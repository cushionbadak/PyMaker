<div class="post-text" itemprop="text">
<p>I am trying to build 2 different functions in Python.</p>
<p>strip consecutive values: desired outcome:</p>
<pre><code>exampleArrray = [0,0,0,0,1,1,1,1,1,1,2,2,2,1,1,2,1,2,1,1,2,2,2,2,2,2,1,1,1,1,0,0]
strippedArray = [0,1,2,1,2,1,2,1,2,1,0] 
</code></pre>
<p>What I have tried so far: </p>
<pre><code>def stripArray(array):
    lengthArray = len(array)
    for i in range (1,lengthArray):
        print(i)
        print(lengthArray)
        if (i&lt;lengthArray):
            if(array[i-1] == array[i]):

                print("has been delted " + str(array[i]))   
                del(array[i])
                i = i -1
                lengthArray = lengthArray -1     
        print(array)

stripArray([0,0,0,0,1,1,1,1,1,1,2,2,2,1,1,2,1,2,1,1,2,2,2,2,2,2,1,1,1,1,0,0])
</code></pre>
<p>Outputs:  [0, 0, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 0], I could loop again but I think there is a better approach somewhere?</p>
<p>count consecutive values and join</p>
<p>Pseudo:
  4x0, 6x1, 3x2, 2x1, 1x2, 1x1, 1x2, 2x1, 6x2, 4x1, 2x0</p>
<pre><code>exampleArrray = [0,0,0,0,1,1,1,1,1,1,2,2,2,1,1,2,1,2,1,1,2,2,2,2,2,2,1,1,1,1,0,0]
   countArray = [40,61,32,21,12,11,12,21,62,41,20]
</code></pre>
<p>I think I'll need the stripArray for this?</p>
<p>Edit: </p>
<pre><code>countArray[0] = OccurencesAfterAnother*10  + stripArray[0]
</code></pre>
<p>SOLVED: We have 3 perfect funtioning answers! Thank you all! Your Answers couldnt be more different and i really like them all!</p>
<p>Edit: 
Thank you all for contributing to the accepted answer! Also future viewers, there are different solutions to this, not all of them need imports and others are using numpy approach. Thanks to all contributors!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>from itertools import groupby

count_dups = [sum(1 for lis in group) for lis, group in groupby(exampleArrray)]
strippedArray =[lis  for lis, group in groupby(exampleArrray)]
countArray= [int(str(v)+str(c)) for v, c in zip(count_dups, strippedArray)]
</code></pre>
<p>output</p>
<blockquote>
<p>[4, 6, 3, 2, 1, 1, 1, 2, 6, 4, 2] </p>
<p>[0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way:</p>
<pre><code>from itertools import zip_longest
import numpy as np

v = [0,0,0,0,1,1,1,1,1,1,2,2,2,1,1,2,1,2,1,1,2,2,2,2,2,2,1,1,1,1,0,0]
v_arr = np.array(v)

arr_stripped = [i for i, j in zip_longest(v, v[1:]) if i != j]
# [0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]

indices = np.hstack((np.array([-1]), np.where(v_arr[:-1] != v_arr[1:])[0], np.array([len(v_arr)-1])))
values = [indices[i+1]-indices[i] for i in range(0, len(indices)-1)]
# [4, 6, 3, 2, 1, 1, 1, 2, 6, 4, 2]

result = [int(str(v)+str(c)) for v, c in zip(values, arr_stripped)]
# [40, 61, 32, 21, 12, 11, 12, 21, 62, 41, 20]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>stripArray</code> may look like this:</p>
<pre><code>def stripArray(array):
    last = None
    output = []
    for i in array:
        if i != last:
            output.append(i)
            last = i
    return output
</code></pre>
<p>I haven't understand the <code>countArray</code>, so I cannot help. Maybe you should provide more details</p>
<p>UPDATE:</p>
<pre><code>def countArray(array):
last = None
output = []
count = 0
for i in array:
    if last is not None and i != last:
        output.append(10*count+last)
        count = 1
    else:
      count += 1
    last = i
output.append(10*count+last)
return output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want to group values, so let's use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; example_list = [0,0,0,0,1,1,1,1,1,1,2,2,2,1,1,2,1,2,1,1,2,2,2,2,2,2,1,1,1,1,0,0]
&gt;&gt;&gt; [v for (v, _) in groupby(example_list)]
[0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]
</code></pre>
<p>To get the second list, assuming the values are always between 0 and 9:</p>
<pre><code>&gt;&gt;&gt; [10 * len(list(vs)) + v for (v, vs) in groupby(example_list)]
[40, 61, 32, 21, 12, 11, 12, 21, 62, 41, 20]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Following works by comparing each item of exampleArray to last added item of strippedArray: </p>
<pre><code>strippedArray = [exampleArrray[0]]
for i in exampleArrray:
    if i != strippedArray[-1]:
        strippedArray.append(i)
</code></pre>
<p>Output:</p>
<pre><code>[0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]
</code></pre>
<p>For counting and joining: </p>
<pre><code>templist = [exampleArray[0]]
outlist = []
for i in exampleArray[1:]:
    if i == templist[0]:
        templist.append(i)
    else:
        outlist.append(str(len(templist))+str(templist[0]))
        templist = [i]
outlist.append(str(len(templist))+str(templist[0]))
print(outlist)
</code></pre>
<p>Output:</p>
<pre><code>['40', '61', '32', '21', '12', '11', '12', '21', '62', '41', '20']
</code></pre>
<p>For getting a list of integers:</p>
<pre><code>outlist = [int(i) for i in outlist]
print(outlist)
</code></pre>
<p>Output:</p>
<pre><code>[40, 61, 32, 21, 12, 11, 12, 21, 62, 41, 20]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this without importing any module:</p>
<pre><code>exampleArrray= [0,0,0,0,1,1,1,1,1,1,2,2,2,1,1,2,1,2,1,1,2,2,2,2,2,2,1,1,1,1,0,0]

def count_join(e):
    indexs = []
    for i, j in enumerate(e):
        try:
            if e[i] != e[i + 1]:
                indexs.append(i)
        except IndexError:
            pass
    print(indexs.insert(0, -1))

    final_output = []
    for i in range(0, len(indexs), 1):
        c = indexs[i:i + 2]

        if len(c) &gt; 1:

            final_output.append(int(((str(len(e[c[0] + 1:c[1] + 1]))) + str(e[c[0] + 1:c[1] + 1][0]))))
        else:
            final_output.append(int((str(len(e[c[0] + 1:])) + str(e[c[0] + 1:][0]))))

    return final_output



print(count_join(exampleArrray))
</code></pre>
<p>output:</p>
<pre><code>[40, 61, 32, 21, 12, 11, 12, 21, 62, 41, 20]
</code></pre>
</div>
<span class="comment-copy">this might be the smoothest answer! Very clever approach!</span>
<span class="comment-copy">also, user commented earlier that <code>itertools.groupby</code> was not permitted! i have submitted an edit to include <code>countArray</code>.</span>
<span class="comment-copy">I never said it wasnt permitted. I just said grouping, like the comment before did wouldnt help me.</span>
<span class="comment-copy">Thank you all for contributing to this answer, it fully solves my problems and it's performance is boss. If i could i would accept all your previous answers, since all of them are solving the problem. Still this solution has the shortest length, and is using just one import.</span>
<span class="comment-copy">This answer is the most beautiful one! It exceeds my biggest wishes! Thank you its perfect!</span>
<span class="comment-copy">Thank you very much this seems to work perfectly! The countArray, should count how many same values come after another, lets say  [0,0,1,2,2,2,0]  then we have 2 after another the 0,  one time after another the 1,  3 times after another the 2,  and 1 times after another the 0,  Since i dont want to lose the value 0,1,2,0  i multiplicate the time after another with 10.  2*10+0,1*10+1,3*10+2,1*10+0, [20, 11, 32, 10] is the new Array,</span>
<span class="comment-copy">Here you go. It works as you described (try the test example), but in my opinion, needing such a function is a sign, you are doing something wrong.</span>
<span class="comment-copy">Also note that these functions are just concepts and will break if an empty array is passed to them, for example.</span>
<span class="comment-copy">hey thank you mate, I use this for signal detection, and to get the length of each signal and type. ;) Thank you really much!</span>
<span class="comment-copy">Thank you for fully answering my question. I really like your solution.</span>
