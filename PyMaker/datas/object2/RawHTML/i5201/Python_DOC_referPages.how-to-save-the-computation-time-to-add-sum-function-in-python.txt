<div class="post-text" itemprop="text">
<p>I am trying to use quicksum function in objective functions when building model in Python and using Gurobi to solve it. When I use a large-scale case, it will take a long time. Any way to improve it? (g[i,j,t] is the inputs and Q[(i,j,t)] is the decision variable in my model).  i,j,t is the keys, g[i,j,t] and Q[(i,j,t)] refers to the values:</p>
<pre><code>obj =(quicksum(quicksum(Q[(i,j,t)]*g[i,j,t]*(p) for i in range(I))for j in range(J))for t in range(T))
</code></pre>
<p>I change it into the following code, but it is wrong:</p>
<pre><code>obj =(LinExpr([((((Q[(i,j,t)], g[i,j,t]) for i in range(I))for j in range(J))for t in range(T) ])*(p))
   TypeError: 'generator' object is not subscriptable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of having nested loops, use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a>:</p>
<pre><code>import itertools
ranges = itertools.product(range(I), range(J), range(T))
obj = quicksum(Q[(i,j,t)] * g[i,j,t] * p for i,j,t in ranges)
</code></pre>
<p>or make use of the more efficient (and readible) tupledict <a href="http://www.gurobi.com/documentation/7.5/refman/py_tupledict_prod.html" rel="nofollow noreferrer">prod</a> functionality:</p>
<pre><code>obj = Q.prod(g) * p
</code></pre>
</div>
