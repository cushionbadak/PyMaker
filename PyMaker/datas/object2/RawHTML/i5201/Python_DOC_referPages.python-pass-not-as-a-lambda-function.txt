<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/18591778/how-to-pass-an-operator-to-a-python-function">How to pass an operator to a python function?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I need to pass a function as a parameter that works as the boolean "not". I tried something like this but it didn't work because <code>not</code> isn't a function.</p>
<pre><code>theFunction(callback=not) # Doesn't work :(
</code></pre>
<p>I need to do the following, but <strong>I wonder if there exists any predefined function that does this simple job</strong>, so that I don't have to redefine it like this:</p>
<pre><code>theFunction(callback=lambda b: not b, anotherCallback=lambda b: not b)
</code></pre>
<hr/>
<p><strong><em>Note:</em></strong> I can't change the fact that I have to pass a function like this because it's an API call.</p></div>
<div class="post-text" itemprop="text">
<p>Yes, there is the <code>operator</code> module: <a href="https://docs.python.org/3.6/library/operator.html" rel="noreferrer">https://docs.python.org/3.6/library/operator.html</a></p>
<pre><code>import operator
theFunction(callback=operator.not_)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>not</code> is <strong>not a function</strong>, but a keyword. So that means you can not pass a reference. There are good reasons, since it allows Python to "<em>short circuit</em>" certain expressions.</p>
<p>You can however use the <code>not_</code> (with underscore) of the <code>operator</code> package:</p>
<pre><code>from operator import not_

theFunction(callback=<b>not_</b>, anotherCallback=<b>not_</b>)</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/operator.html#operator.not_" rel="nofollow noreferrer"><b><code>operator.not_</code></b></a></span>
<span class="comment-copy">Instead of your lambda example you could've still been mostly idiomatic with <code>def not_(b): return not b</code> and then <code>theFunction(callback=not_, anotherCallBack=not_)</code>.</span>
<span class="comment-copy">What is this a duplicate of?</span>
<span class="comment-copy">@PatrickCollins as always: see the banner at the top.</span>
