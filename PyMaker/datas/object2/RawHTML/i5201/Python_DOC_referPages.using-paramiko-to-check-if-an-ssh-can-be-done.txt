<div class="post-text" itemprop="text">
<p>I am trying to do a an automated Ethernet bandwidth test on all the ports of a router.  My set up involves connecting from a Windows PC with 1 connection to a router to a Linux PC with 7 connections. I'm using the Paramiko module to SSH into the the Linux PC to start an Ethernet testm which works fine. </p>
<p>However, I wanted to see what would happen if I removed one of the Ethernet cables in the test. This causes the program to crash, saying "socket operation was attempted to an unreachable host".  I want to be able to avoid this error. Is there a way to check if the connection is possible so that I don't get a crash?  Ideally, I would like the code to skip over the bad connection and proceed to the next cable. Here is a snippet of the code used:</p>
<pre><code>    ssh.connect( hostname = target_host[i] , username = un, password = pwd )
    stdin, stdout, stderr = ssh.exec_command('iperf -c 192.168.0.98')
    t_read=stdout.read()
    read[i]=t_read[360:375]
    raw_speed[i]=t_read[360:364]
    address[i]=t_read[221:233]
    print('Receieved data on cable %s from %s via IP: %s at %s \n'%(Cable[i],WMI_Port[i],address[i],read[i]))
    stdin, stdout, stderr = ssh.exec_command('sudo ifconfig %s down'%(target_eth[i]))
    print ('Disabling %s : \n\n'%(WMI_Port[i]))
    ssh.close()    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to avoid this error is to not do what caused it--pulling the cable. However, you seem to want to be able to handle that in your program, so here are some options! (I'm assuming this snippet resides within some sort of loop based on a list of hosts.)</p>
<p><strong>Option 1:</strong>
You can preemptively check if the host at that address is live before trying to connect. Wrapping the ssh connection code in a <code>if</code> statement with <code>os.system("ping -c 1 " + target_host[i]) is 0</code> as the condition will allow you to skip the connection on a dead host.</p>
<p><strong>Option 2:</strong>
Another approach is to try first and just handle the failure. If you wrap everything from <code>ssh.connect(...)</code> to <code>ssh.close()</code> in a try-except block that watches for <code>paramiko.ssh_exception.NoValidConnectionsError</code>, you can handle the failed connections however you like and continue with the program. An example of this:</p>
<pre><code>for i in len(target_host):
    try:
        ssh.connect( hostname = target_host[i] , username = un, password = pwd )
        stdin, stdout, stderr = ssh.exec_command('iperf -c 192.168.0.98')
        t_read=stdout.read()
        read[i]=t_read[360:375]
        raw_speed[i]=t_read[360:364]
        address[i]=t_read[221:233]
        print('Receieved data on cable %s from %s via IP: %s at %s \n'%(Cable[i],WMI_Port[i],address[i],read[i]))
        stdin, stdout, stderr = ssh.exec_command('sudo ifconfig %s down'%(target_eth[i]))
        print ('Disabling %s : \n\n'%(WMI_Port[i]))
        ssh.close()    
    except paramiko.ssh_exception.NoValidConnectionsError as error:
        print("Failed to connect to host '%s' with error: %s" % (target_host[i], error))
</code></pre>
<p>That exception may not be exactly what you get when it dumps, so replace it with the one you got before. The more closely you match a handler to the expected exception, the better. Too broad of a handler can gobble up exceptions you NEED to see, resulting in silent failures.</p>
<p>For more info on Paramiko exceptions, look here: <a href="http://docs.paramiko.org/en/2.4/api/ssh_exception.html" rel="nofollow noreferrer">http://docs.paramiko.org/en/2.4/api/ssh_exception.html</a></p>
<p>For info on handling exceptions in Python 3:
<a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html</a></p>
</div>
<span class="comment-copy">Thanks for the quick response Ill have to try option 2 i guess.  I already do option 1 in an earlier portion of the code but that doesn't really work too well.  If I unplug one of the 7 connections on the linux machine it still will pass the ping response through one of the other lines even if i specify a diff IP address.</span>
<span class="comment-copy">One of the other tricky things is i need to keep track of is the route table on the linux machine.  So if one the channels is not working I need to also be able to set one of the eth# port to down so that I can bypass the bad channel and ping/iperf it accordingly/  I will try the try command though</span>
<span class="comment-copy">That is interesting. Each interface has its own IP, right? And you're pinging via IP, not via hostname? It should fail if you ping an unreachable IP...</span>
<span class="comment-copy">There are 7 ethernet ports on the linux pc with all their own IPs.  I may have to do a little bit more of a deep dive on that later but I think the try and except may work</span>
<span class="comment-copy">Cool. If it does, accept the answer so people know it worked, and you get some free rep too!</span>
