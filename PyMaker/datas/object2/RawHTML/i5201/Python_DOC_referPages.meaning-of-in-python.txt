<div class="post-text" itemprop="text">
<p>What type of Python data structure is represented by "&lt; &gt;", like this.</p>
<pre><code>[&lt;Board 1&gt;, &lt;Board 2&gt;, &lt;Board 3&gt;]
</code></pre>
<p>I came across this while working with the Flask-SQLAlchemy library for Python3. See code below.</p>
<pre><code>class Board(db.Model):

  __tablename__ = 'boards'

  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(256), unique=True, nullable=False)
  description = db.Column(db.String(256))

  def __init__(id, name, description):
    self.id = id
    self.name = name
    self.description = description


tuple_boards = Board.query.all()

print (tuple_boards)
[&lt;Board 1&gt;, &lt;Board 2&gt;, &lt;Board 3&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not a data structure. This is just how Flask-SQLAlchemy represents an instance of your model as a string with <a href="https://github.com/mitsuhiko/flask-sqlalchemy/blob/c52abbdc972d1619847979057ab6263de01485b7/flask_sqlalchemy/model.py#L148-L154" rel="nofollow noreferrer"><code>Model.__repr__</code></a>:</p>
<pre><code>class Model(object):
    ...

    def __repr__(self):
        identity = inspect(self).identity
        if identity is None:
            pk = "(transient {0})".format(id(self))
        else:
            pk = ', '.join(to_str(value) for value in identity)
        return '&lt;{0} {1}&gt;'.format(type(self).__name__, pk)
</code></pre>
<p>It's a whole lot more useful than the default <code>object.__repr__</code>:</p>
<pre><code>In [1]: class Thing(object):
  ...       pass
  ...

In [2]: [Thing(), Thing(), Thing()]
Out[2]:
[&lt;__main__.Thing at 0x10c8826a0&gt;,
 &lt;__main__.Thing at 0x10c8820b8&gt;,
 &lt;__main__.Thing at 0x10c8822e8&gt;]
</code></pre>
<p>You can put whatever you want in <code>__repr__</code>, but it's usually best to unambiguously represent your object as a string:</p>
<pre><code>In [4]: class OtherThing(object):
  ...       def __repr__(self):
  ...           return "I'm an arbitrary string"
  ...

In [5]: [OtherThing(), OtherThing()]
Out[5]: [I'm an arbitrary string, I'm an arbitrary string]
</code></pre>
<p>I've often seen the <code>&lt;...&gt;</code> string used for object representations that aren't valid Python code, as many other built-in objects' <code>__repr__</code>esentations are valid Python code that reconstructs an equivalent object.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not Python syntax, but it is part of the default string representation for objects, e.g.</p>
<pre><code>&gt;&gt;&gt; a = object()
&gt;&gt;&gt; a
&lt;object object at 0x1009d10b0&gt;
</code></pre>
<p>In your case, it looks like the implementers of the library have adopted this convention as well.</p>
</div>
<span class="comment-copy">That's <b>not</b> Python syntax. It's not supposed to be; it's actually used to deliberately <i>distinguish</i> that representation from something interpretable. See e.g. <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__repr__</a></span>
<span class="comment-copy">Huh? Your question is a little weird. What's displayed when you do <code>print(obj)</code> is determined by the <code>obj</code>'s <code>__repr__</code> (or <code>__str__</code>) implementation.</span>
<span class="comment-copy">Does <code>Board</code> have a <code>__repr__</code> or <code>__str__</code> defined? As written that is not valid Python syntax, it might just be a custom representation of that data type</span>
<span class="comment-copy">This is a typical format for an objects representation returned by an overwritten <code>__repr__</code> or <code>__str__</code> method. It does not represent a special type and the "brackets" have to be put in manually.</span>
<span class="comment-copy">My stupidity abounds. Sorry about that dude.</span>
