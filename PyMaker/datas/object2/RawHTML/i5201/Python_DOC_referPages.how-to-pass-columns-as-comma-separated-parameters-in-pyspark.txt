<div class="post-text" itemprop="text">
<p>I have a dataframe with thousands of columns that I would like to pass to <code>greatest</code> function without specifying column names individually. How can I do that?</p>
<p>As an example, I have <code>df</code> with 3 columns, that I am passing to <code>greatest</code>, each by specifying <code>df.x, df.y..</code> and so on.</p>
<pre><code>df = sqlContext.createDataFrame([(1, 4, 3)], ['x', 'y', 'z'])
&gt;&gt;&gt; df.select(greatest(df.x,df.y,df.z).alias('greatest')).show()
+--------+
|greatest|
+--------+
|       4|
+--------+
</code></pre>
<p>In the above example I had only 3 columns, but if it were in thousands, it is impossible to mention each one of them. Couple of things I tried didn't work.  I am missing some crucial python...</p>
<pre><code>df.select(greatest(",".join(df.columns)).alias('greatest')).show()
ValueError: greatest should take at least two columns

df.select(greatest(",".join(df.columns),df[0]).alias('greatest')).show()
u"cannot resolve 'x,y,z' given input columns: [x, y, z];"

df.select(greatest([c for c in df.columns],df[0]).alias('greatest')).show()
Method col([class java.util.ArrayList]) does not exist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>greatest</code> <a href="https://spark.apache.org/docs/latest/api/python/pyspark.sql.html?highlight=greatest#pyspark.sql.functions.greatest" rel="nofollow noreferrer">supports</a> positional arguments*</p>
<blockquote>
<p><code>pyspark.sql.functions.greatest(*cols)</code></p>
</blockquote>
<p>(this is why you can <code>greatest(df.x,df.y,df.z)</code>) so just</p>
<pre><code>df = sqlContext.createDataFrame([(1, 4, 3)], ['x', 'y', 'z'])
df.select(greatest(*df.columns))
</code></pre>
<hr/>
<p>* Quoting <a href="https://docs.python.org/3/glossary.html#argument" rel="nofollow noreferrer">Python glossary</a>, positional argument is</p>
<blockquote>
<ul>
<li><p>... an argument that is not a keyword argument. Positional arguments can appear at the beginning of an argument list and/or be passed as elements of an iterable preceded by *. For example, 3 and 5 are both positional arguments in the following calls:</p>
<pre><code>complex(3, 5)
complex(*(3, 5))
</code></pre></li>
</ul>
</blockquote>
<p>Furthermore:</p>
<ul>
<li><a href="https://stackoverflow.com/q/3394835/8371915">*args and **kwargs?</a></li>
<li><a href="https://stackoverflow.com/q/36901/8371915">What does ** (double star/asterisk) and * (star/asterisk) do for parameters?</a></li>
</ul>
</div>
<span class="comment-copy">use <code>pandas</code>. You can use <code>apply()</code> with pandas to get max value from each row (if that is what you looking for)</span>
<span class="comment-copy">Haven't tried this one but it would make sense: <code>df.select(greatest(*[col(c) for c in df.columns]).alias('greatest')).show()</code></span>
<span class="comment-copy">@mkaran - It works. But what does the <code>*</code> mean here?</span>
<span class="comment-copy">The <code>*</code> unpacks the list so that the <code>greatest</code> is called with positional arguments instead of a list.</span>
<span class="comment-copy"><code>*cols</code> or <code>*df.columns</code> - Does it return a list or comma separated columns as expected by <code>greatest</code>?  I am always getting confused with it.</span>
