<div class="post-text" itemprop="text">
<p>I want to create a random number using n numbers which are between i and j. For instance, for n=10 and i=1 and j=5, such an output is expected: <code>2414243211</code>. I did it in R using this code:</p>
<pre><code>paste(floor(runif(10,1,5)),collapse="") #runif create 10 random number between 1 and 5 and floor make them as integer and finally paste makes them as a sequence of numbers instead of array. 
</code></pre>
<p>I want to do the same in Python. I found <code>random.uniform</code> but it generates 1 number and I don't want to use loops.</p>
<pre><code>import random
import math
math.floor(random.uniform(1,5)) #just generate 1 number between 1 and 5
</code></pre>
<p><strong>update</strong>:</p>
<ul>
<li>i and j are integers between 0 and 9, while n could be any integer. </li>
<li>i and j decide which number can be used in the string while n indicates the length of the numeric string.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your question (not sure I do), and you have Python 3.6, you can use <code>random.choices</code>:</p>
<pre><code>&gt;&gt;&gt; from random import choices
&gt;&gt;&gt; int(''.join(map(str, choices(range(1, 5), k=10))))
2121233233
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><em>random.choices()</em></a> function does what you want:</p>
<pre><code>&gt;&gt;&gt; from random import choices
&gt;&gt;&gt; n, i, j = 10, 1, 5
&gt;&gt;&gt; population = list(map(str, range(i, j+1)))
&gt;&gt;&gt; ''.join(choices(population, k=n))
'5143113531'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you consider list-comprehensions being loops (which they actually in many ways are) there you will not be satisfied with this but I will try my luck:</p>
<pre><code>from random import randint

res = ''.join([str(randint(1, 5)) for _ in range(10)])
print(res)  #-&gt; 4353344154
</code></pre>
<p>Notes:</p>
<ol>
<li>The result is a string! If you want an integer, cast to <code>int</code>.</li>
<li><code>randint</code> works <em>incluselively</em>; the <code>start</code> (<code>1</code>) and <code>end</code> (<code>5</code>) might be produced and returned. If you do not want that, modify them (<code>start = 2</code> and <code>end = 4</code>)</li>
<li>Is there a reason you are using <code>random.uniform</code> (and subsequently <code>math.floor()</code>) and not simply <code>randint</code>?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = ''.join([str(math.floor(random.uniform(1,5)))  for i in range(10)])
</code></pre>
</div>
<span class="comment-copy">In native Python you'll have to use a loop - if you're familiar with R - then you might want to look at numpy/pandas.</span>
<span class="comment-copy">So you want one number with those digits?  <code>int(''.join([str(math.floor(random.uniform(1,5))) for _ in range(10)]))</code></span>
<span class="comment-copy">I'd go for: <code>''.join(map(str, choices(range(i, j+1), k=n)))</code> - no need to make the range a list, just let it sample from the range, and have that mapped. Might just be worth noting that <code>choices</code> is 3.6+ - still a lot of people on 3.5...</span>
<span class="comment-copy">@JonClements Yes, that would work too.</span>
<span class="comment-copy">That's pretty much what I did @JonClements but Raymond is there a reason to do the string conversion *before sampling with choices?</span>
<span class="comment-copy">It's hard to tell which is best from the question as worded.  My take was that <i>i</i> and <i>j</i> were digit ranges so there would be ten or fewer of them.  Meanwhile, it looked like <i>n</i> could get large.</span>
<span class="comment-copy">@RaymondHettinger Yes, You are right. i and j are in this range [0,9] and n could be any integer. thank you.</span>
<span class="comment-copy">Or if it's just the end that's exclusive - use <code>random.randrange</code>...</span>
<span class="comment-copy">Since I want to create thousands of these numbers with different lengths, I prefer to use loops for that purpose and not for generating random numbers. So there is no way to generate more than 1 number without loops? For 3, no, I simply was not aware of <code>randint</code>. Thank you very much</span>
<span class="comment-copy">@Hadij There is. just wrap the existing list-comprehension in another one. <code>res = [''.join([str(randint(1, 5)) for _ in range(10)]) for _ in range(5)]</code></span>
