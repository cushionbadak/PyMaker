<div class="post-text" itemprop="text">
<p>I have the following folder structure:</p>
<pre><code>project/
    setup.py
    example/
        __init__.py
        foo.py
        tests/
            __init__.py
            test_foo.py
</code></pre>
<p>test_foo.py contains the 'a' variable with some integer value.</p>
<p>foo.py contains the following:</p>
<pre><code>from tests import test_foo

def load_a():
    value = test_foo.a
    return value
</code></pre>
<p>setup.py contains the following:</p>
<pre><code>from example import foo

a = foo.load_a()

print(a)
</code></pre>
<p>When I run setup.py by calling python setup.py I get a ModuleNotFoundError.</p>
<p>Why is that?  I am running python 3.6.3.</p>
</div>
<div class="post-text" itemprop="text">
<p>See Intra-package References in <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html</a></p>
<blockquote>
<p>You can also write relative imports, with the from module import name form of import statement. These imports use leading dots to indicate the current and parent packages involved in the relative import. From the surround module for example, you might use:</p>
<p>from . import echo</p>
<p>from .. import formats</p>
<p>from ..filters import equalizer</p>
</blockquote>
<p>i.e. I think  you need to e.g. <code>from .example import foo</code>.</p>
</div>
<span class="comment-copy">I get a <code>ModuleNotFoundError: No module named '__main__.example'; '__main__' is not a package</code></span>
<span class="comment-copy">Did you also add the dot to the tests import,  <code>from .tests import test_foo</code>?</span>
<span class="comment-copy">yes, same error</span>
<span class="comment-copy">What if you add an <code>__init__.py</code> file to the project directory?  Or alternatively, you may not need the '.' in <code>from .example import foo</code> after all, just for importing <code>test_foo</code></span>
