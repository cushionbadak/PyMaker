<div class="post-text" itemprop="text">
<p>I want to print, log and make report in my pytest framework.</p>
<p>I am creating a config object in pytest_configure as follows</p>
<h2>conftest.py</h2>
<pre><code>def pytest_configure(config):
    config.logs = []
</code></pre>
<p>Then I am creating a fixture to modify this object</p>
<pre><code>@pytest.fixture(scope="function", autouse=True)
def print_info(request):
    return request.config.logs
</code></pre>
<p>In the test file I am calling this fixture to modify object</p>
<h2>test_logs.py</h2>
<pre><code>def test_dummy(print_info):
    print_info.append("I am in test_dummy")
</code></pre>
<p>I want to modify the config object without passing that object in test case.
For example I want to do following</p>
<pre><code>from conftest import print_log
def test_dummy():
    print_log("I am in test_dummy")
</code></pre>
<p>and in conftest.py we can define that fucntion to modify the config object</p>
<h2>conftest.py</h2>
<pre><code>def print_log(message):
    #function to modify config object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Wouldn't logging module help here?</p>
<p>You can configure log record to contain exactly the information you want e.g. module and test function in which message was logged. </p>
<p>Logging has great features like filtering by log level, message content, writing different records to separate log files with various text formats etc.</p>
<p>I would encourage you to take a look at:
<a href="https://docs.pytest.org/en/latest/logging.html" rel="nofollow noreferrer">https://docs.pytest.org/en/latest/logging.html</a></p>
</div>
<span class="comment-copy">We will be having logging module. But we want to generate html report using the logs which we capture. Pytest caplog helps, but it throws all other junk too. That is why we want to be specific about what we are logging.</span>
<span class="comment-copy">I would still advocate for logging module. It's really powerful. Have a look at <a href="https://docs.python.org/3/library/logging.html#filter-objects" rel="nofollow noreferrer">filter-objects</a>. You can configure separate handler to grab standard output and give it different formatting than regular logs.</span>
<span class="comment-copy">You can filter with all parameters of <a href="https://docs.python.org/3/library/logging.html#logging.LogRecord" rel="nofollow noreferrer">LogRecord</a>. You can for example put all helper functions in separate module or include specific string in the functions name and filter logs according to that. I personally use couple of handlers to write full log, console log and log with only failed test written into it. I can include some examples into my answer if you want to try this approach.</span>
