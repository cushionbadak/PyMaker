<div class="post-text" itemprop="text">
<p>I'm using the Python C API to call a method. At present I am using <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_CallMethodObjArgs" rel="nofollow noreferrer"><code>PyObject_CallMethodObjArgs</code></a> to do this. This is a variadic function:</p>
<pre><code>PyObject* PyObject_CallMethodObjArgs(PyObject *o, PyObject *name, ..., NULL)
</code></pre>
<p>This is absolutely fine when the number of arguments is known at compile time. However, I have a scenario where the number of arguments is not known until runtime, they are supplied as an array.</p>
<p>In essence my issue is precisely the same as in this question: <a href="https://stackoverflow.com/questions/14705920/passing-an-array-as-parameters-to-a-vararg-function">How can I pass an array as parameters to a vararg function?</a> </p>
<p>The accepted answer there tells me that there is no solution to my problem. </p>
<p>Is there are way around this hurdle. If I cannot solve the problem using <code>PyObject_CallMethodObjArgs</code> is there an alternative function in the Python C API that can meet my needs?</p>
<p>For instance, <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_Call" rel="nofollow noreferrer"><code>PyObject_Call</code></a> accepts parameters as a Python sequence object. Is it possible to use this function, or one with a similar interface?</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure if I am completey wrong, but AFAICT it should be possible to</p>
<ul>
<li>create a tuple with the required number of arguments</li>
<li>pass this tuple to <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_CallObject" rel="nofollow noreferrer">https://docs.python.org/3/c-api/object.html#c.PyObject_CallObject</a> or <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_Call" rel="nofollow noreferrer">https://docs.python.org/3/c-api/object.html#c.PyObject_Call</a> (this decision depending on the need for kwargs).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>A possible way might be to use <a href="https://sourceware.org/libffi/" rel="nofollow noreferrer">libffi</a>, perhaps thru the <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a> Python library.  It knows your <a href="https://en.wikipedia.org/wiki/Application_binary_interface" rel="nofollow noreferrer">ABI</a> and <a href="https://en.wikipedia.org/wiki/Calling_convention" rel="nofollow noreferrer">calling conventions</a> (so is partly coded in assembler, for many popular implementations) and enables you to call an arbitrary function of arbitrary signature and arbitrary arity.</p>
<p>Notice that there is <a href="https://stackoverflow.com/a/14705987/841108">no purely standard way of doing that</a> (without using some external library Ã  la <code>libffi</code>...) in portable and standard <a href="https://en.wikipedia.org/wiki/C11_(C_standard_revision)" rel="nofollow noreferrer">C11</a> (check by reading <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf" rel="nofollow noreferrer">n1570</a>).</p>
<p>BTW, <code>libffi</code> can be used from any C program. And <code>ctypes</code> can be used from any Python program.</p>
<p>The Python <a href="https://docs.python.org/3/extending/index.html" rel="nofollow noreferrer"><em>Embedding and extending Python</em></a> chapter explains how to call Python from C, or C from Python.</p>
</div>
<span class="comment-copy">Please provide some <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. Your question is unclear. In what programming language are you coding in?</span>
<span class="comment-copy">I don't think that the programming language is relevant.  After all, this is an API and therefore available to pretty much any programming language.</span>
<span class="comment-copy">Each programming language <i>implementation</i> has its own <a href="https://en.wikipedia.org/wiki/Calling_convention" rel="nofollow noreferrer">calling convention</a> so what programming language <i>implementation</i> you are using is <i>extremely</i> relevant. <a href="http://sbcl.org/" rel="nofollow noreferrer">SBCL</a> has not the same one as C (that is GCC on my Linux, which follows the Linux ABI)</span>
<span class="comment-copy">No, I don't think you do understand my problem.</span>
<span class="comment-copy">The problem is at your end. Don't worry about it.</span>
<span class="comment-copy">What do I pass as the <code>callable_object</code> parameter? I suppose I'm wondering how to get <code>self</code> into the method.</span>
<span class="comment-copy">OK, I see, I can just use <code>PyObject_GetAttrString</code> passing the object ref and the method name, and it's all good. I guess what comes back from that is bound. So the answer was in my question after all!</span>
<span class="comment-copy">This is certainly a possibility. I was wondering, as in the final paragraphs of the question, whether or not there is an alternative way to call a method using the Python C API.</span>
<span class="comment-copy">I don't understand your "Python C API" expression. Are you coding in C (then use <code>libffi</code>) or in Python (then use <code>ctypes</code>)?</span>
<span class="comment-copy">The Python C API is documented here: <a href="https://docs.python.org/3/c-api/index.html" rel="nofollow noreferrer">docs.python.org/3/c-api/index.html</a>  It's how you embed Python, or write extension modules. I'm actually coding in Delphi so <code>libffi</code> isn't trivially available.</span>
<span class="comment-copy">That should go into your question!</span>
<span class="comment-copy">I've edited the question to bring out what I am looking for more clearly, I hope. I don't think the language is particularly relevant.</span>
