<div class="post-text" itemprop="text">
<p>could someone please help with a questions around the parametrization of scipy distributions and how to transform them? </p>
<p>I basically would like to recover distribution parameters of data that I simulate with numpy... </p>
<pre><code>some_data = np.random.normal(loc=81, scale=7, size=100000)
</code></pre>
<p>...by fitting a distribution with scipy</p>
<pre><code>recovered_parms = scipy.stats.norm.fit(some_data)
</code></pre>
<p>For the normal distribution, this works. recovered_parms ~= (81,7) </p>
<p>However, for e.g. a wald distribution it does not. </p>
<pre><code>some_data = np.random.wald(mean=4, scale=41, size=100000)

recovered_parms = scipy.stats.wald.fit(some_data)
</code></pre>
<p>Result: recovered_parms ~= (1.28,3.66)    </p>
<p>I understand that they need to be transformed but just can't figure out how. Any help appreciated.  </p>
</div>
<div class="post-text" itemprop="text">
<p>If the problem is to just estimate the lambda and mean of the wald distribution. You can just do</p>
<pre><code>mean = np.mean(some_data)
lambda_ = 1/(np.mean(1/some_data) - 1/mean) # lambda is a reserved keyword :/
</code></pre>
<p>This estimate seems to be pretty close than whatever the scipy.stats.wald fit is returning (if we interpret one of them as mean or we know how to interpret it)</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know that you can; this appears to be a can of worms. See if you agree with my reasoning.</p>
<pre><code>from numpy.random import wald
import scipy.stats

means = [1, 2, 4, 8]
samples = [wald(mean=mean, scale=1, size=100000) for mean in means]

print(('{:&gt;10d}'*len(means)).format(*means))
stats = [scipy.stats.wald.fit(sample) for sample in samples]
print(('{:&gt;10.2f}'*len(means)).format(*[stat[1] for stat in stats]))
print(('{:&gt;10.2f}'*len(means)).format(*[stat[0] for stat in stats]))

scales = [1, 4, 16, 64]
samples = [wald(mean=1, scale=scale, size=100000) for scale in scales]

print(('{:&gt;10d}'*len(scales)).format(*scales))
stats = [scipy.stats.wald.fit(sample) for sample in samples]
print(('{:&gt;10.2f}'*len(scales)).format(*[stat[1] for stat in stats]))
print(('{:&gt;10.2f}'*len(scales)).format(*[stat[0] for stat in stats]))
</code></pre>
<p>First I generate four samples, one for each of the means 1, 2, 4 and 8, keeping the scale the same at 1. I calculate a fit for each sample. Then I generate another four samples, one for each of the scales 1, 4, 16 and 64, this time keeping the mean the same at 1.</p>
<p>Here are the results.</p>
<pre><code>     1         2         4         8
  1.00      1.90      3.53      6.43
 -0.00     -0.13     -0.43     -1.06
     1         4        16        64
  1.00      1.14      0.92      0.68
  0.00      0.12      0.35      0.55
</code></pre>
<p>I would expect the location to appear first in each pair of results but it appears that location is second. Still, at least the location does approximate the mean, even if it shows an increasing negative bias. It's difficult to interpret the scale. Over a large range the scale estimates might be on a logarithm scale.</p>
<p>This might be a question to put on the developer's site.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.wald.html" rel="nofollow noreferrer"><code>numpy.random.wald</code></a> has two parameters, <code>mean</code> and <code>scale</code>.
<code>scale</code> is, as the name suggests, a <em>scale parameter</em>, in the sense
of a <a href="https://en.wikipedia.org/wiki/Location%E2%80%93scale_family" rel="nofollow noreferrer">location-scale family</a>.
<code>mean</code> is a shape parameter; it is <em>not</em> a location parameter.</p>
<p>If you look at the docstring for <code>numpy.random.wald</code>, it says
"Draw samples from a Wald, or inverse Gaussian, distribution."
The docstring for <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wald.html" rel="nofollow noreferrer"><code>scipy.stats.wald</code></a>, however, says that it is
"a special case of <code>invgauss</code> with <code>mu == 1</code>", where <code>mu</code> is a
shape parameter of <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.invgauss.html" rel="nofollow noreferrer"><code>scipy.stats.invgauss</code></a>.  <code>scipy.stats.wald</code> has
only two parameters, <code>loc</code> and <code>scale</code>.  (All the continuous
distributions in <code>scipy.stats</code> have these parameters.)  So the parameters
of <code>numpy.random.wald</code> and <code>scipy.stats.wald</code> don't match up:
<code>numpy.random.wald</code> has a shape and a scale parameter, but <code>scipy.stats.wald</code> has a location and a scale parameter.</p>
<p>Instead of <code>scipy.stats.wald</code>, you must use <code>scipy.stats.invgauss</code> to fit data generated with <code>numpy.random.wald</code>.
<code>scipy.stats.invgauss</code> is an implementation of the inverse Gaussian distribution that is
mentioned in the docstring of <code>numpy.random.wald</code>.  <code>scipy.stats.invgauss</code>
has three parameters: one shape parameter called <code>mu</code>, along with the
standard location (<code>loc</code>) and scale parameters.</p>
<p>The shape parameter <code>mu</code> of <code>scipy.stats.invgauss</code> is not the same as the
shape parameter <code>mean</code> of <code>numpy.random.wald</code>.  If you do a little algebra with the PDFs of the two functions, you'll find that the relation is</p>
<pre><code>mean = mu * scale
</code></pre>
<p>where <code>mu</code> is the <code>invgauss</code> shape parameter, <code>mean</code> is the shape parameter used in <code>numpy.random.wald</code>, and <code>scale</code> has the same meaning in both functions.</p>
<p>If you generate a sample using <code>numpy.random.wald</code> and you then want to
recover the parameters by fitting the inverse Gaussian distribution to
it, you must use the above relation to convert the result of the fit to
the <code>mean</code> used by <code>numpy.random.wald</code>.  Also, <code>numpy.random.wald</code> doesn't
have a location parameter, so you must restrict the location of <code>scipy.stats.invgauss</code> to be 0 by using the argument <code>floc=0</code> in <code>scipy.stats.invgauss.fit()</code>.</p>
<p>Here's an example.  First, generate some data using <code>numpy.random.wald</code>:</p>
<pre><code>In [55]: m = 4

In [56]: s = 41

In [57]: some_data = np.random.wald(mean=m, scale=s, size=100000)
</code></pre>
<p>Now fit <code>scipy.stats.invgauss</code> to that data, with the restriction that the
location parameter is 0:</p>
<pre><code>In [58]: from scipy.stats import invgauss

In [59]: mu, loc, scale = invgauss.fit(some_data, floc=0)

In [60]: mu, loc, scale
Out[60]: (0.097186409353576975, 0, 41.155034600558793)
</code></pre>
<p>As expected, the <code>scale</code> parameter is close to the parameter that was used to generate the data.  To get the estimate of the shape parameter that was used, multiply <code>mu</code> and <code>scale</code>:</p>
<pre><code>In [61]: mu*scale
Out[61]: 3.9997100396505312
</code></pre>
<p>It is approximately 4, as expected.</p>
<p>A plot is always useful for visualizing the fit.  In the plot, the blue bars show the normalized histogram of the data, and the black curve is the PDF of the fitted inverse Gaussian distribution.</p>
<pre><code>In [86]: import matplotlib.pyplot as plt

In [87]: _ = plt.hist(some_data, bins=40, normed=True, alpha=0.6)

In [88]: xx = np.linspace(some_data.min(), some_data.max(), 500)

In [89]: yy = invgauss.pdf(xx, mu, loc, scale)

In [90]: plt.plot(xx, yy, 'k')
Out[90]: [&lt;matplotlib.lines.Line2D at 0x11b6d64e0&gt;]
</code></pre>
<p><a href="https://i.stack.imgur.com/js1vJ.png" rel="nofollow noreferrer"><img alt="plot" src="https://i.stack.imgur.com/js1vJ.png"/></a></p>
</div>
<span class="comment-copy">The 2nd number approximates the mean. (3.66 ~ 4).</span>
<span class="comment-copy">For a hundred thousand samples, mean should be more close to 4.</span>
<span class="comment-copy">This is probably the simplest and most accurate method.  These are the explicit formulas for the maximum likelihood estimate (see, for example, the <a href="https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution#Maximum_likelihood" rel="nofollow noreferrer">"Maximum likelihood" section</a> of the <a href="https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution" rel="nofollow noreferrer">wikipedia article on the inverse Gaussian distribution</a>; set <i>w_i = constant</i> in the formulas shown in the article).</span>
<span class="comment-copy">You should change the name from <code>lambda</code> to something like <code>lam</code> or <code>lmbda</code>.  As it is now, that line results in a syntax error, because <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer"><code>lambda</code> is reserved word in python</a>.</span>
<span class="comment-copy">Thanks @WarrenWeckesser, yes it would be a syntax error but I just wanted to use the correct naming to be clear. I changed it to lambda_ though.</span>
<span class="comment-copy">This is called <a href="https://en.wikipedia.org/wiki/Method_of_moments_(statistics)" rel="nofollow noreferrer">en.wikipedia.org/wiki/Method_of_moments_(statistics)</a></span>
