<div class="post-text" itemprop="text">
<p>I am using Python 3 within a C program. What I wish to do is "run" a single Python file (.py) which will be the main file for a larger Python project. </p>
<p>When I use <code>import</code> within this Python file, it works fine for other Python files in the same directory. In fact, the <code>import</code> works for files in sub-directories too whenever I run the .py file using "Python" in the terminal.</p>
<p>However, if I run it using <code>PyRun_SimpleFile</code> in C, I receive a "ModuleNotFoundError" error.</p>
<p>Here is my directory setup:</p>
<pre><code>Project/
|-- Program.cpp
|-- Program.exe
|-- __init__.py
|-- bla.py
|-- Test/
|   |-- __init__.py
|   |-- bla2.py
</code></pre>
<p>Preferably, I do not want to use <code>sys.path.append('./Test')</code> so I can use the sub-directory names within the imports.</p>
<p>Here are the contents of all relevant files:</p>
<hr/>
<p>bla.py</p>
<pre><code>import Test.bla2
</code></pre>
<hr/>
<p>bla2.py</p>
<pre><code>print("in bla2.py now!")
</code></pre>
<hr/>
<p>Program.cpp</p>
<pre><code>#include &lt;Python.h&gt;
#include &lt;iostream&gt;

int main(int argc, char **argv)
{
    Py_Initialize();

    FILE *file = _Py_fopen( "bla.py", "r" ); 
    PyRun_SimpleFile(file, "bla.py");

    Py_Finalize();
    return 0;
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You just need to add</p>
<pre><code>PySys_SetArgv(1, argv);
</code></pre>
<p>after <code>Py_Initialize</code> (<a href="https://docs.python.org/3/c-api/init.html#c.PySys_SetArgvEx" rel="nofollow noreferrer">documentation</a>). This prepends the directory that your program is in to your Python path. (This is equivalent to prepending <code>.</code> to the path, rather than <code>./Test</code>, but it should be more reliable, for example if your program is not started from its own directory. It gets the needed information on where your program is located from C++ <code>argv</code>)</p>
<p>It's probably a bad idea to call your module <code>Test</code>. There's a built-in Python module called <code>test</code>, and on a case-insensitive OS like Windows that might conflict and get loaded instead. </p>
</div>
<span class="comment-copy">Perhaps this can help you: <a href="https://stackoverflow.com/questions/3654652/why-does-the-python-c-api-crash-on-pyrun-simplefile" title="why does the python c api crash on pyrun simplefile">stackoverflow.com/questions/3654652/â€¦</a></span>
<span class="comment-copy">@Pablo Thank you for the suggestion; however, it does not appear to be relevant to the question here. I did try some of the answers, but to no avail. Keep in mind the Python works perfectly for me, it's just the import statements that are causing issues only when run through the C program.</span>
<span class="comment-copy">Perhaps it would help you to use <code>setenv</code> and add the path of the modules in <code>PYTHONPATH</code> before calling <code>PyRun_SimpleFile</code>.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/c-api/init.html#c.PySys_SetArgvEx" rel="nofollow noreferrer"><code>PySys_SetArgvEx</code></a> might be what you want.</span>
<span class="comment-copy">Thanks, works like a charm! ^^ However, I did receive an error. I've resolved it by simply parsing argv to wchar_t**, but perhaps there is a better way to handle it?                                                                                                                      <code>error: cannot convert 'char**' to 'wchar_t**' for argument '2' to 'void PySys_SetArgv(int, wchar_t**)'   PySys_SetArgv(1, argv);</code></span>
<span class="comment-copy">Ah - I accidentally used Python 2 rather than 3 when I was testing so didn't see that error... I don't know of a anything better than just parsing it.</span>
