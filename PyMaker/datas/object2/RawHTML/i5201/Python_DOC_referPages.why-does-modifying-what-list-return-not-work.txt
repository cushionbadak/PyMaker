<div class="post-text" itemprop="text">
<p>Let's say I have a list that contains three strings, and I want a new list that drops one of the strings. I know there are alternate ways of doing this, but I was surprised that the following does not work:</p>
<pre><code>x = ['A','B','C']

y = list(x).remove('A')
</code></pre>
<p>Why does the above not work?</p>
<p>Edit: Thanks for the answers everyone!</p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/faq/programming.html?highlight=mutate%20return%20none#why-did-changing-list-y-also-change-list-x" rel="nofollow noreferrer">the Python Programming FAQ</a> (emphasis added):</p>
<blockquote>
<p>Some operations (for example <code>y.append(10)</code> and <code>y.sort()</code>) mutate the object, whereas superficially similar operations (for example <code>y = y + [10]</code> and <code>sorted(y)</code>) create a new object. <strong>In general in Python (and in all cases in the standard library) a method that mutates an object will return <code>None</code> to help avoid getting the two types of operations confused.</strong> So if you mistakenly write <code>y.sort()</code> thinking it will give you a sorted copy of <code>y</code>, youâ€™ll instead end up with <code>None</code>, which will likely cause your program to generate an easily diagnosed error.</p>
</blockquote>
<p>Since <code>remove</code> is a mutating method (changes the <code>list</code> it's called on in-place), it follows the general pattern of returning <code>None</code>. If it didn't, a line like:</p>
<pre><code>y = x.remove('A')
</code></pre>
<p>would appear to work, but it would be aliasing <code>y</code> to the same <code>list</code> referenced by <code>x</code>, not creating a new <code>list</code> at all, and it might take some time for that mistake to be noticed, even as you use <code>x</code> and <code>y</code> believing them to be independent. By returning <code>None</code>, any attempt to use <code>y</code> believing it to be a separate <code>list</code> (or a <code>list</code> at all), will likely fail loudly (as it does in your case, with or without the <code>list</code> wrapping, making your misuse of <code>remove</code> obvious).</p>
<p>This also generally encourages Python's (loose) guideline to avoid shoving too many steps in a process on a single line. If you want to copy a <code>list</code> and remove one element, you do it in two steps:</p>
<pre><code>y = list(x)
y.remove('A')
</code></pre>
<p>and it works just fine.</p>
</div>
<span class="comment-copy">I suppose it depends on what you think it "working" means.</span>
<span class="comment-copy"><code>x.remove('A')</code> should work. <code>list(x).remove('A')</code> creates a new list and remove <code>A</code> from the newly created list. So even if you print <code>x</code> after removing the element <code>A</code> will still be there.</span>
<span class="comment-copy"><code>list.remove()</code> returns <code>None</code>. It's documented as doing so, and this is on purpose.</span>
