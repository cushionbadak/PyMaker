<div class="post-text" itemprop="text">
<p>I was trying to modify the values in lists via slices and for-loops, and ran into some pretty interesting behavior. I would appreciate if someone could explain what's happening internally here.</p>
<pre><code>&gt;&gt;&gt; x = [1,2,3,4,5]
&gt;&gt;&gt; x[:2] = [6,7] #slices can be modified
&gt;&gt;&gt; x
[6, 7, 3, 4, 5]
&gt;&gt;&gt; x[:2][0] = 8 #indices of slices cannot be modified
&gt;&gt;&gt; x
[6, 7, 3, 4, 5]
&gt;&gt;&gt; x[:2][:1] = [8] #slices of slices cannot be modified
&gt;&gt;&gt; x
[6, 7, 3, 4, 5]
&gt;&gt;&gt; for z in x: #this version of a for-loop cannot modify lists
...    z += 1
... 
&gt;&gt;&gt; x
[6, 7, 3, 4, 5]
&gt;&gt;&gt; for i in range(len(x)): #this version of a for-loop can modify lists
...    x[i] += 1
... 
&gt;&gt;&gt; x
[7, 8, 4, 5, 6]
&gt;&gt;&gt; y = x[:2] #if I assign a slice to a var, it can be modified...
&gt;&gt;&gt; y[0] = 1
&gt;&gt;&gt; y
[1, 8]
&gt;&gt;&gt; x #...but it has no impact on the original list
[7, 8, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's break down your comments 1 by 1:</p>
<p>1.) <code>x[:2] = [6, 7]</code> slices can be modified:</p>
<p><a href="https://stackoverflow.com/questions/10623302/how-assignment-works-with-python-list-slice#10623352">See these answers here</a>.  It's calling the <a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer"><code>__setitem__</code></a> method from the <code>list</code> object and <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">assigning the <code>slice</code></a> to it.  Each time you  reference <code>x[:2]</code> a new slice object is created (you can simple do <code>id(x[:2])</code> and it's apparent, not once will it be the same id).</p>
<p>2.) indices of slices cannot be modified:</p>
<p>That's not true.  It couldn't be modified because you're performing the assignment on the <code>slice</code> instance, not the <code>list</code>, so it doesn't trigger the <code>__setitem__</code> to be performed on the <code>list</code>.  Also, <code>int</code> are immutable so it cannot be changed either way.</p>
<p>3.) slices of slices cannot be modified:</p>
<p>See above.  Same reason - you are assigning to an instance of the slice and not modifying the <code>list</code> directly.</p>
<p>4.) this version of a for-loop cannot modify lists:</p>
<p><code>z</code> being referenced here is the actual objects in the elements of <code>x</code>.  If you ran the for loop with id(z) you'll note that they're identical to <code>id(6), id(7), id(3), id(4), id(5)</code>.  Even though <code>list</code> contains all 5 identical references, when you do <code>z = ...</code> you are only assigning the new value to the object <code>z</code>, not the object that is stored in <code>list</code>.  If you want to modify the <code>list</code>, you'll need to assign it by index, for the same reason you can't expect <code>1 = 6</code> will turn <code>x</code> into <code>[6, 2, 3, 4, 5]</code>.</p>
<p>5.) this version of a for-loop can modify lists:</p>
<p>See my answer above. Now you are directly performing item assignment on the <code>list</code> instead of its representation.</p>
<p>6.) if I assign a slice to a var, it can be modified:</p>
<p>If you've been following so far, you'll realize now you are assigning the instance of <code>x[:2]</code> to the object <code>y</code>, which is now a <code>list</code>.  The story follows - you perform an item assignment by index on <code>y</code>, of course it will be updated.</p>
<p>7.) ...but it has no impact on the original list:</p>
<p>Of course.  <code>x</code> and <code>y</code> are two different objects.  <code>id(x) != id(y)</code>, therefore any operation performed on <code>x</code> will not affect <code>y</code> whatsoever.  if you however assigned <code>y = x</code> and then made a change to <code>y</code>, then yes, <code>x</code> will be affected as well.</p>
<p>To expand a bit on <code>for z in x:</code>, say you have a <code>class foo()</code> and assigned two instances of such to the list <code>f</code>:</p>
<pre><code>f1 = foo()
f2 = foo()
f = [f1, f2]
f
# [&lt;__main__.foo at 0x15f4b898&gt;, &lt;__main__.foo at 0x15f4d3c8&gt;]
</code></pre>
<p>Note that the reference in question is the actual <code>foo</code> instance, not the object <code>f1</code> and <code>f2</code>.  So even if I did the following:</p>
<pre><code>f1 = 'hello'
f
#  [&lt;__main__.foo at 0x15f4b898&gt;, &lt;__main__.foo at 0x15f4d3c8&gt;]
</code></pre>
<p><code>f</code> still remains unchanged since the foo instances remains the same even though object <code>f1</code> now is assigned to a different value.  For the same reason, whenever you make changes to <code>z</code> in <code>for z in x:</code>, you are only affecting the object <code>z</code>, but nothing in the list is changed until you update <code>x</code> by index.</p>
<p>If however the object have attribute or is mutable, you can directly update the referenced object in the loop:</p>
<pre><code>x = ['foo']
y = ['foo']
lst = [x,y]
lst
# [['foo'], ['foo']]
for z in lst:
    z.append('bar')

lst
# [['foo', 'bar'], ['foo', 'bar']]
x.append('something')
lst
# [['foo', 'bar', 'something'], ['foo', 'bar']]
</code></pre>
<p>That is because you are directly updating the object in reference instead of assigning to object <code>z</code>.  If you however assigned <code>x</code> or <code>y</code> to a new object, <code>lst</code> will not be affected.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is nothing odd happening here. Any slice that you obtain from a list is a new object containing copies of your original list. The same is true for tuples.</p>
<p>When you iterate through your list, you get the object which the iteration yields. Since <code>int</code>s are immutable in Python you can't change the state of <code>int</code> objects. Each time you add two <code>int</code>s a new <code>int</code> object is created. So your "version of a for-loop [which] cannot modify lists" is not really trying to modify anything because it will not assign the result of the addition back to the list.</p>
<p>Maybe you can guess now why your second approach is different. It uses a special slicing syntax which is not really creating a slice of your list and allows you to assign to the list (<a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer">documentation</a>). The newly created object created by the addition operation is stored in the list through this method.</p>
<p>For understanding your last (and your first) examples, it is important to know that slicing creates (at least for lists and tuples, technically you could override this in your own classes) a partial copy of your list. Any change to this new object will, as you already found out, not change anything in your original list.</p>
</div>
<span class="comment-copy">What, exactly is it that you don't understand? What were you expecting?</span>
<span class="comment-copy">But essentially, slices create copies, but <i>slice assignment</i> mutates the underlying list. Since <code>int</code> objects are immutable, <code>z += 1</code> simply assigns a new list to the variable <code>z</code>, so it is equivalent to <code>z = z + 1</code></span>
<span class="comment-copy">There is a difference between slicing and slice assignment. The former creates a copy, the latter makes a special <code>__setitem__</code> call. <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">See here.</a></span>
<span class="comment-copy">Wow, I never imagined that assignment in Python was so complicated. Thanks for the link @Norrius, that was quite informative.</span>
<span class="comment-copy">On your last point, "whenever you make changes to <code>z</code> in <code>for z in x:</code>, you are only affecting the object <code>z</code>, but nothing in the list is changed until you update <code>x</code> by index", is this still true if z is a mutable object? For example, if x is a list of lists, and I executed <code>for z in x: z.append(1)</code>, that should modify all z in x because lists are mutable, unlike integers, right?</span>
<span class="comment-copy">Nope.  The objects in <code>x</code> are directly in reference to the objects themselves.    See my last sample of <code>f = [f1, f2]</code>.  You can see the objects being referenced are the actual <code>foo</code> instances, not <code>f1</code> and <code>f2</code>.  So even if you assigned <code>f1</code> and <code>f2</code> to something else, <code>f</code> is not changed because the <code>foo</code> instances are not changed.  It'll be a different story if you actually updated the <code>foo</code> instances though.</span>
<span class="comment-copy">For example, if you have a class attribute <code>name</code> in <code>foo</code>, if you assigned <code>f1.name = "hello"</code>, then the first <code>foo</code> instance in <code>f</code> will also reflect with the class attribute change.</span>
