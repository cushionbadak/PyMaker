<div class="post-text" itemprop="text">
<p>This may have been asked in a similar context but I was unable to find an answer after about 20 minutes of searching, so I will ask.</p>
<p>I have written a Python script (lets say: scriptA.py) and a script (lets say scriptB.py)</p>
<p>In scriptB I want to call scriptA multiple times with different arguments, each time takes about an hour to run, (its a huge script, does lots of stuff.. don't worry about it) and I want to be able to run the scriptA with all the different arguments simultaneously, but I need to wait till ALL of them are done before continuing; my code:</p>
<pre><code>import subprocess

#setup
do_setup()

#run scriptA
subprocess.call(scriptA + argumentsA)
subprocess.call(scriptA + argumentsB)
subprocess.call(scriptA + argumentsC)

#finish
do_finish()
</code></pre>
<p>I want to do run all the <code>subprocess.call()</code> at the same time, and then wait till they are all done, how should I do this? </p>
<p>I tried to use threading like the example <a href="http://www.saltycrane.com/blog/2008/09/simplistic-python-thread-example/" rel="noreferrer">here</a>:</p>
<pre><code>from threading import Thread
import subprocess

def call_script(args)
    subprocess.call(args)

#run scriptA   
t1 = Thread(target=call_script, args=(scriptA + argumentsA))
t2 = Thread(target=call_script, args=(scriptA + argumentsB))
t3 = Thread(target=call_script, args=(scriptA + argumentsC))
t1.start()
t2.start()
t3.start()
</code></pre>
<p>But I do not think this is right. </p>
<p>How do I know they have all finished running before going to my <code>do_finish()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <a href="http://docs.python.org/library/threading.html#threading.Thread.join" rel="noreferrer">join</a> method of <code>Thread</code> object in the end of the script.</p>
<pre><code>t1 = Thread(target=call_script, args=(scriptA + argumentsA))
t2 = Thread(target=call_script, args=(scriptA + argumentsB))
t3 = Thread(target=call_script, args=(scriptA + argumentsC))

t1.start()
t2.start()
t3.start()

t1.join()
t2.join()
t3.join()
</code></pre>
<p>Thus the main thread will wait till <code>t1</code>, <code>t2</code> and <code>t3</code> finish execution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Put the threads in a list and then use the <a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="noreferrer">Join method</a></p>
<pre><code> threads = []

 t = Thread(...)
 threads.append(t)

 ...repeat as often as necessary...

 # Start all threads
 for x in threads:
     x.start()

 # Wait for all of them to finish
 for x in threads:
     x.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer using list comprehension based on an input list:</p>
<pre><code>inputs = [scriptA + argumentsA, scriptA + argumentsB, ...]
threads = [Thread(target=call_script, args=(i)) for i in inputs]
[t.start() for t in threads]
[t.join() for t in threads]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python3, since Python 3.2 there is a new approach to reach the same result, that I personally prefer to the traditional thread creation/start/join, package <code>concurrent.futures</code>: <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html</a></p>
<p>Using a <code>ThreadPoolExecutor</code> the code would be:</p>
<pre><code>from concurrent.futures.thread import ThreadPoolExecutor
import time

def call_script(ordinal, arg):
    print('Thread', ordinal, 'argument:', arg)
    time.sleep(2)
    print('Thread', ordinal, 'Finished')

args = ['argumentsA', 'argumentsB', 'argumentsC']

with ThreadPoolExecutor(max_workers=2) as executor:
    ordinal = 1
    for arg in args:
        executor.submit(call_script, ordinal, arg)
        ordinal += 1
print('All tasks has been finished')
</code></pre>
<p>The output of the previous code is something like:</p>
<pre><code>Thread 1 argument: argumentsA
Thread 2 argument: argumentsB
Thread 1 Finished
Thread 2 Finished
Thread 3 argument: argumentsC
Thread 3 Finished
All tasks has been finished
</code></pre>
<p>One of the advantages is that you can control the throughput setting the max concurrent workers. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can have class something like below from which you can add 'n' number of functions or console_scripts you want to execute in parallel passion and start the execution and wait for all jobs to complete..    </p>
<pre><code>from multiprocessing import Process

class ProcessParallel(object):
    """
    To Process the  functions parallely

    """    
    def __init__(self, *jobs):
        """
        """
        self.jobs = jobs
        self.processes = []

    def fork_processes(self):
        """
        Creates the process objects for given function deligates
        """
        for job in self.jobs:
            proc  = Process(target=job)
            self.processes.append(proc)

    def start_all(self):
        """
        Starts the functions process all together.
        """
        for proc in self.processes:
            proc.start()

    def join_all(self):
        """
        Waits untill all the functions executed.
        """
        for proc in self.processes:
            proc.join()


def two_sum(a=2, b=2):
    return a + b

def multiply(a=2, b=2):
    return a * b


#How to run:
if __name__ == '__main__':
    #note: two_sum, multiply can be replace with any python console scripts which
    #you wanted to run parallel..
    procs =  ProcessParallel(two_sum, multiply)
    #Add all the process in list
    procs.fork_processes()
    #starts  process execution 
    procs.start_all()
    #wait until all the process got executed
    procs.join_all()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe, something like</p>
<pre><code>for t in threading.enumerate():
    if t.daemon:
        t.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just came across the same problem where I needed to wait for all the threads which were created using the for loop.I just tried out the following piece of code.It may not be the perfect solution but I thought it would be a simple solution to test:</p>
<pre><code>for t in threading.enumerate():
    try:
        t.join()
    except RuntimeError as err:
        if 'cannot join current thread' in err:
            continue
        else:
            raise
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <code>threading</code> <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer">module documentation</a></p>
<blockquote>
<p>There is a “main thread” object; this corresponds to the initial
  thread of control in the Python program. It is not a daemon thread.</p>
<p>There is the possibility that “dummy thread objects” are created.
  These are thread objects corresponding to “alien threads”, which are
  threads of control started outside the threading module, such as
  directly from C code. Dummy thread objects have limited functionality;
  they are always considered alive and daemonic, and cannot be <code>join()</code>ed.
  They are never deleted, since it is impossible to detect the
  termination of alien threads.</p>
</blockquote>
<p>So, to catch those two cases when you are not interested in keeping a list of the threads you create:</p>
<pre><code>import threading as thrd


def alter_data(data, index):
    data[index] *= 2


data = [0, 2, 6, 20]

for i, value in enumerate(data):
    thrd.Thread(target=alter_data, args=[data, i]).start()

for thread in thrd.enumerate():
    if thread.daemon:
        continue
    try:
        thread.join()
    except RuntimeError as err:
        if 'cannot join current thread' in err.args[0]:
            # catchs main thread
            continue
        else:
            raise
</code></pre>
<p>Whereupon:</p>
<pre><code>&gt;&gt;&gt; print(data)
[0, 4, 12, 40]
</code></pre>
</div>
<span class="comment-copy">hmmm - having trouble understanding something, wont this first run t1, wait till its finish, then go to t2..etc,etc ? how do make it all happen at once? i dont see how this would run them at the same time?</span>
<span class="comment-copy">The call to <code>join</code> blocks until thread finishes execution. You will have to wait for all of the threads anyway. If <code>t1</code> finishes first you will start waiting on <code>t2</code> (which might be finished already and you will immediately proceed to wait for <code>t3</code>). If <code>t1</code> took the longest to execute, when you return from it both <code>t1</code> and <code>t2</code> will return immediately without blocking.</span>
<span class="comment-copy">you dont understand my question - if i copy the above code to my code - will it work? or am i missing something?</span>
<span class="comment-copy">sorry, I accidentally missed the part that actually starts threads' execution (updated the answer). Yes, the code, as it is now, will work as you expect it.</span>
<span class="comment-copy">okay, i see. now i understand, was a bit confused about it but i think i understand, <code>join</code> sort of attaches the current process to the thread and waits till its done, and if t2 finishs before t1 then when t1 is done it will check for t2 being done see that it is, and then check t3..etc..etc.. and then only when all are done it will continue. awesome.</span>
<span class="comment-copy">Yes, that would work but is harder to understand. You should always try to find a balance between compact code and "readability". Remember: Code is written once but read many times. So it's more important that it's easy to understand.</span>
<span class="comment-copy">The "factory pattern" isn't something I can explain in one sentence. Google for it and search stackoverflow.com. There are many examples and explanations. In a nutshell: You write code which builds something complex for you. Like a real factory: You give in an order and get a finished product back.</span>
<span class="comment-copy">I don't like the idea of using list comprehension for it's side effects and not doing anything useful with the resulted list. A simple for loop would be cleaner even if it spreads two rows...</span>
<span class="comment-copy">@Aaron DIgull I understand that.What I mean is that I would just do a <code>for x in threads: x.join()</code> rather than using list comprehantion</span>
<span class="comment-copy">@IoanAlexandruCucu: I'm still wondering if there is a more readable and efficient solution: <a href="http://stackoverflow.com/questions/21428602/how-inefficient-is-a-list-comprehension-if-you-dont-assign-it" title="how inefficient is a list comprehension if you dont assign it">stackoverflow.com/questions/21428602/…</a></span>
<span class="comment-copy">Checked answer explains well but this one is shorter and doesn't require ugly repetitions. Just a nice answer. :)</span>
<span class="comment-copy">List comprehension just for side effects is usually depreciated*.  But in this use case, it seems to be a good idea. *<a href="http://stackoverflow.com/questions/5753597/is-it-pythonic-to-use-list-comprehensions-for-just-side-effects" title="is it pythonic to use list comprehensions for just side effects">stackoverflow.com/questions/5753597/…</a></span>
<span class="comment-copy">@VinayakKaniyarakkal <code>for t in threads:t.start()</code> isn't it better?</span>
<span class="comment-copy">but how can you tell when all threads in the threadpool have finished?</span>
<span class="comment-copy">As you can see in the example, the code after the <code>with</code> statement is executed when all task have finished.</span>
<span class="comment-copy">this doesn't work. Try doing something really long in threads. Your print statement will execute before thread finishes</span>
<span class="comment-copy">@Pranalee, That code works, I've updated the code to add the output lines. You cannot see the "All task..." before all threads are finished, That is how the <code>with</code> statement works by design in this case. Anyway, you can always open a new question in SO and post your code so we can help you to find out what is happening in your case.</span>
<span class="comment-copy">I have tried this code but not sure about its working because the last instruction of my code was printed which was after this for loop and still the process was not terminated.</span>
<span class="comment-copy">maybe not all your threads were daemons?</span>
