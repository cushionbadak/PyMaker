<div class="post-text" itemprop="text">
<p>For Linux this would give me <code>/</code>, for Windows on the C drive that would give me <code>C:\\</code>. Note that python is not necessarily installed on the C drive on windows.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the path to the Python executable using <code>sys.executable</code>:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import os
&gt;&gt;&gt; sys.executable
'/usr/bin/python'
</code></pre>
<p>Then, for Windows, the drive letter will be the first part of splitdrive:</p>
<pre><code>&gt;&gt;&gt; os.path.splitdrive(sys.executable)
('', '/usr/bin/python')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import os

def root_path():
    return os.path.abspath(os.sep)
</code></pre>
<p>On Linux this returns <code>/</code></p>
<p>On Windows this returns <code>C:\\</code> or whatever the current drive is</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's what you need:</p>
<pre><code>import sys, os

def get_sys_exec_root_or_drive():
    path = sys.executable
    while os.path.split(path)[1]:
        path = os.path.split(path)[0]
    return path
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> (Python 3.4+):</p>
<pre><code>import sys
from pathlib import Path

path = Path(sys.executable)
root_or_drive = path.root or path.drive
</code></pre>
</div>
<span class="comment-copy">Well on linux, the root directory is not necessarily  on the same drive python is installed on. It depends on how the system is partioned (single drive or multi-drive).</span>
<span class="comment-copy">you can use executable, prefix or exec_prefix from sys (<a href="http://docs.python.org/py3k/library/sys.html" rel="nofollow noreferrer">docs.python.org/py3k/library/sys.html</a>)</span>
<span class="comment-copy">Ow, I didn't think about that. Thanks for the clarification Martin.</span>
<span class="comment-copy">It would've been nice if <code>os.path.splitdrive(sys.executable)[0]</code> would also return <code>/</code> as root in linux. But it's good enough, thank you!</span>
<span class="comment-copy">@Bentley4 I think they did it that way for correctness. <code>/</code> really <b>isn't</b> a drive letter</span>
<span class="comment-copy">True, but I was thinking maybe there was some python object in one of the standard library modules called root which always returned the root. But it seems there isn't.</span>
<span class="comment-copy">When doing a similar task, I was partial to using <b>file</b> to get the location of the script instead of using sys.executable.</span>
<span class="comment-copy">This will give you the letter of the drive you are running your script from on Windows; not the drive letter the python executable is running from as the accepted answer provides. Either could be what various users who find this page want, the accepted answer provides what the original question was asking for.</span>
<span class="comment-copy">IMO, this answer has merit on the points argued about in comments of other answers. It's rather self-obvious which drive this is returning the root of - it's the drive of the python executable. If someone needed a different drive, they should start with a different <code>path</code>. Without that knowledge, this answer uses the superior assumption.</span>
<span class="comment-copy">Perhaps use the ternary operator on that last line</span>
<span class="comment-copy">If you are able to use <code>pathlib</code> &gt;= 3.5, then a wonderful method would be to use <code>Path.home()</code> which is OS dependent and can be used to as root for commands to interact with.</span>
<span class="comment-copy">On Windows with pathlib2 (Python 2.7 backport of Python 3.5+ pathlib), this doesn't give the right answer as the <code>root</code> attribute returns <code>'\\'</code>, so the correct tanswer would seem to be <code>path.drive + path.root</code> as <code>path.drive</code> returns empty <code>''</code> on Linux.</span>
