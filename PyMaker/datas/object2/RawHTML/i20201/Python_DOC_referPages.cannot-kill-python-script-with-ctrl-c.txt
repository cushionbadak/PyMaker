<div class="post-text" itemprop="text">
<p>I am testing Python threading with the following script:</p>
<pre><code>import threading

class FirstThread (threading.Thread):
        def run (self):
                while True:
                        print 'first'

class SecondThread (threading.Thread):
        def run (self):
                while True:
                        print 'second'

FirstThread().start()
SecondThread().start()
</code></pre>
<p>This is running in Python 2.7 on Kubuntu 11.10. <kbd>Ctrl</kbd>+<kbd>C</kbd> will not kill it. I also tried adding a handler for system signals, but that did not help:</p>
<pre><code>import signal 
import sys
def signal_handler(signal, frame):
        sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)
</code></pre>
<p>To kill the process I am killing it by PID after sending the program to the background with <kbd>Ctrl</kbd>+<kbd>Z</kbd>, which isn't being ignored. Why is <kbd>Ctrl</kbd>+<kbd>C</kbd> being ignored so persistently? How can I resolve this?</p>
</div>
<div class="post-text" itemprop="text">
<p><kbd>Ctrl</kbd>+<kbd>C</kbd> terminates the main thread, but because your threads aren't in daemon mode, they keep running, and that keeps the process alive. We can make them daemons:</p>
<pre><code>f = FirstThread()
f.daemon = True
f.start()
s = SecondThread()
s.daemon = True
s.start()
</code></pre>
<p>But then there's another problem - once the main thread has started your threads, there's nothing else for it to do. So it exits, and the threads are destroyed instantly. So let's keep the main thread alive:</p>
<pre><code>import time
while True:
    time.sleep(1)
</code></pre>
<p>Now it will keep print 'first' and 'second' until you hit <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>
<p><strong>Edit:</strong> as commenters have pointed out, the daemon threads may not get a chance to clean up things like temporary files. If you need that, then catch the <code>KeyboardInterrupt</code> on the main thread and have it co-ordinate cleanup and shutdown. But in many cases, letting daemon threads die suddenly is probably good enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>KeyboardInterrupt and signals are only seen by the process (ie the main thread)... Have a look at <a href="https://stackoverflow.com/questions/4136632/ctrl-c-i-e-keyboardinterrupt-to-kill-threads-in-python">Ctrl-c i.e. KeyboardInterrupt to kill threads in python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think it's best to call join() on your threads when you expect them to die.  I've taken some liberty with your code to make the loops end (you can add whatever cleanup needs are required to there as well).  The variable die is checked for truth on each pass and when it's True then the program exits.</p>
<pre><code>import threading
import time

class MyThread (threading.Thread):
    die = False
    def __init__(self, name):
        threading.Thread.__init__(self)
        self.name = name

    def run (self):
        while not self.die:
            time.sleep(1)
            print (self.name)

    def join(self):
        self.die = True
        super().join()

if __name__ == '__main__':
    f = MyThread('first')
    f.start()
    s = MyThread('second')
    s.start()
    try:
        while True:
            time.sleep(2)
    except KeyboardInterrupt:
        f.join()
        s.join()
</code></pre>
</div>
<span class="comment-copy">@dotancohen is it working on Windows?</span>
<span class="comment-copy">@vitaibian: I have not tested on Windows, but it seems to non-OS specific.</span>
<span class="comment-copy">you should mention that by doing this threads are not stopped gracefully and some resources not released.</span>
<span class="comment-copy">Well, Ctrl-C is never a graceful way to stop anything. I'm not sure what resources would be left - shouldn't the OS reclaim anything when the process exits?</span>
<span class="comment-copy">@ThomasK Temporary files created by <code>tempfile.TemporaryFile()</code> may be left on disk, for example.</span>
<span class="comment-copy">@Feuermurmel: Good point. I've added a bit about that.</span>
<span class="comment-copy">Looks like in python3 <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer">you can pass <code>daemon=True</code></a> to <code>Thread.__init__</code></span>
<span class="comment-copy"><code>while True</code> is silly, you should <code>join</code> directly - and that overriden function is kind of questionable. Maybe <code>def join(self, force=False): if force: self.die = True</code> so that <code>join()</code> is unchanged by <code>join(force=True)</code> kills them. But even then, better to inform <i>both</i> threads before joining either one.</span>
