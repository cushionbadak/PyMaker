<div class="post-text" itemprop="text">
<p>I have a dict and would like to remove all the keys for which there are empty value strings.</p>
<pre><code>metadata = {u'Composite:PreviewImage': u'(Binary data 101973 bytes)',
            u'EXIF:CFAPattern2': u''}
</code></pre>
<p>What is the best way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2.X</p>
<pre><code>dict((k, v) for k, v in metadata.iteritems() if v)
</code></pre>
<hr/>
<p>Python 2.7 - 3.X</p>
<pre><code>{k: v for k, v in metadata.items() if v is not None}
</code></pre>
<p>Note that all of your keys have values.  It's just that some of those values are the empty string.  There's no such thing as a key in a dict without a value; if it didn't have a value, it wouldn't be in the dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>It can get even shorter than <a href="https://stackoverflow.com/a/12118700/1641609">BrenBarn's solution</a> (and more readable I think)</p>
<pre><code>{k: v for k, v in metadata.items() if v}
</code></pre>
<p>Tested with Python 2.7.3.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really need to modify the original dictionary:</p>
<pre><code>empty_keys = [k for k,v in metadata.iteritems() if not v]
for k in empty_keys:
    del metadata[k]
</code></pre>
<p>Note that we have to make a list of the empty keys because we can't modify a dictionary while iterating through it (as you may have noticed). This is less expensive (memory-wise) than creating a brand-new dictionary, though, unless there are a lot of entries with empty values.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a full-featured, yet succinct approach to handling real-world data structures which are often nested, and can even contain cycles, I recommend looking at <a href="http://boltons.readthedocs.org/en/latest/iterutils.html#nested">the remap utility from the boltons utility package</a>. </p>
<p>After <code>pip install boltons</code> or copying <a href="https://github.com/mahmoud/boltons/blob/master/boltons/iterutils.py">iterutils.py</a> into your project, just do:</p>
<pre><code>from boltons.iterutils import remap

drop_falsey = lambda path, key, value: bool(value)
clean = remap(metadata, visit=drop_falsey)
</code></pre>
<p><a href="http://sedimental.org/remap.html">This page</a> has many more examples, including ones working with much larger objects from Github's API.</p>
<p>It's pure-Python, so it works everywhere, and is fully tested in Python 2.7 and 3.3+. Best of all, I wrote it for exactly cases like this, so if you find a case it doesn't handle, you can bug me to fix it <a href="https://github.com/mahmoud/boltons/issues">right here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/12118700/1142167">BrenBarn's solution</a> is ideal (and pythonic, I might add). Here is another (fp) solution, however:</p>
<pre><code>from operator import itemgetter
dict(filter(itemgetter(1), metadata.items()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on <a href="https://stackoverflow.com/a/24688773/394647">Ryan's solution</a>, if you also have lists and nested dictionaries:</p>
<p>For Python 2:</p>
<pre><code>def remove_empty_from_dict(d):
    if type(d) is dict:
        return dict((k, remove_empty_from_dict(v)) for k, v in d.iteritems() if v and remove_empty_from_dict(v))
    elif type(d) is list:
        return [remove_empty_from_dict(v) for v in d if v and remove_empty_from_dict(v)]
    else:
        return d
</code></pre>
<p>For Python 3:</p>
<pre><code>def remove_empty_from_dict(d):
    if type(d) is dict:
        return dict((k, remove_empty_from_dict(v)) for k, v in d.items() if v and remove_empty_from_dict(v))
    elif type(d) is list:
        return [remove_empty_from_dict(v) for v in d if v and remove_empty_from_dict(v)]
    else:
        return d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have a nested dictionary, and you want this to work even for empty sub-elements, you can use a recursive variant of BrenBarn's suggestion:</p>
<pre><code>def scrub_dict(d):
    if type(d) is dict:
        return dict((k, scrub_dict(v)) for k, v in d.iteritems() if v and scrub_dict(v))
    else:
        return d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Building on the answers from <a href="https://stackoverflow.com/a/21482035/3381305">patriciasz</a> and <a href="https://stackoverflow.com/a/12118839/3381305">nneonneo</a>, and accounting for the possibility that you might want to delete keys that have only certain falsy things (e.g. <code>''</code>) but not others (e.g. <code>0</code>), or perhaps you even want to include some truthy things (e.g. <code>'SPAM'</code>), then you could make a highly specific hitlist:</p>
<pre><code>unwanted = ['', u'', None, False, [], 'SPAM']
</code></pre>
<p>Unfortunately, this doesn't quite work, because for example <code>0 in unwanted</code> evaluates to <code>True</code>. We need to discriminate between <code>0</code> and other falsy things, so we have to use <code>is</code>:</p>
<pre><code>any([0 is i for i in unwanted])
</code></pre>
<p>...evaluates to <code>False</code>.</p>
<p>Now use it to <code>del</code> the unwanted things:</p>
<pre><code>unwanted_keys = [k for k, v in metadata.items() if any([v is i for i in unwanted])]
for k in unwanted_keys: del metadata[k]
</code></pre>
<p>If you want a new dictionary, instead of modifying <code>metadata</code> in place:</p>
<pre><code>newdict = {k: v for k, v in metadata.items() if not any([v is i for i in unwanted])}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Quick Answer (TL;DR)</h2>
<h3>Example01</h3>
<pre><code>### example01 -------------------

mydict  =   { "alpha":0,
              "bravo":"0",
              "charlie":"three",
              "delta":[],
              "echo":False,
              "foxy":"False",
              "golf":"",
              "hotel":"   ",                        
            }
newdict =   dict([(vkey, vdata) for vkey, vdata in mydict.iteritems() if(vdata) ])
print newdict

### result01 -------------------
result01 ='''
{'foxy': 'False', 'charlie': 'three', 'bravo': '0'}
'''
</code></pre>
<h2>Detailed Answer</h2>
<h3>Problem</h3>
<ul>
<li><strong>Context:</strong>  Python 2.x</li>
<li><strong>Scenario:</strong> Developer wishes modify a dictionary to exclude blank values

<ul>
<li>aka remove empty values from a dictionary</li>
<li>aka delete keys with blank values</li>
<li>aka filter dictionary for non-blank values over each key-value pair</li>
</ul></li>
</ul>
<h3>Solution</h3>
<ul>
<li>example01 use python list-comprehension syntax with simple conditional to remove "empty" values</li>
</ul>
<h3>Pitfalls</h3>
<ul>
<li>example01 only operates on a copy of the original dictionary (does not modify in place)</li>
<li>example01 may produce unexpected results depending on what developer means by "empty"

<ul>
<li>Does developer mean to keep values that are <a href="https://stackoverflow.com/a/9573259/42223">falsy</a>?</li>
<li>If the values in the dictionary are not gauranteed to be strings, developer may have unexpected data loss.</li>
<li>result01 shows that only three key-value pairs were preserved from the original set</li>
</ul></li>
</ul>
<h3>Alternate example</h3>
<ul>
<li>example02 helps deal with potential pitfalls</li>
<li>The approach is to use a more precise definition of "empty" by changing the conditional.</li>
<li>Here we only want to filter out values that evaluate to blank strings.</li>
<li>Here we also use .strip() to filter out values that consist of only whitespace.      </li>
</ul>
<h3>Example02</h3>
<pre><code>### example02 -------------------

mydict  =   { "alpha":0,
              "bravo":"0",
              "charlie":"three",
              "delta":[],
              "echo":False,
              "foxy":"False",
              "golf":"",
              "hotel":"   ",
            }
newdict =   dict([(vkey, vdata) for vkey, vdata in mydict.iteritems() if(str(vdata).strip()) ])
print newdict

### result02 -------------------
result02 ='''
{'alpha': 0,
  'bravo': '0', 
  'charlie': 'three', 
  'delta': [],
  'echo': False,
  'foxy': 'False'
  }
'''
</code></pre>
<h3>See also</h3>
<ul>
<li><a href="https://en.wikipedia.org/w/index.php?title=Python_syntax_and_semantics&amp;oldid=684110148#List_comprehensions" rel="nofollow noreferrer">list-comprehension</a></li>
<li><a href="https://stackoverflow.com/a/9573259/42223">falsy</a></li>
<li><a href="https://stackoverflow.com/questions/9573244/">checking for empty string</a></li>
<li><a href="https://stackoverflow.com/a/12118839/42223">modifying original dictionary in place</a></li>
<li><a href="https://stackoverflow.com/a/21482035/42223">dictionary comprehensions</a></li>
<li><a href="https://stackoverflow.com/a/9573278/42223">pitfalls of checking for empty string</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>For python 3</p>
<pre><code>dict((k, v) for k, v in metadata.items() if v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I read all replies in this thread and some referred also to this thread:
<a href="https://stackoverflow.com/questions/33529312/remove-empty-dicts-in-nested-dictionary-with-recursive-function">Remove empty dicts in nested dictionary with recursive function</a></p>
<p>I originally used solution here and it worked great:</p>
<p><strong>Attempt 1: Too Hot (not performant or future-proof)</strong>:</p>
<pre><code>def scrub_dict(d):
    if type(d) is dict:
        return dict((k, scrub_dict(v)) for k, v in d.iteritems() if v and scrub_dict(v))
    else:
        return d
</code></pre>
<p>But some performance and compatibility concerns were raised in Python 2.7 world:</p>
<ol>
<li>use <code>isinstance</code> instead of <code>type</code></li>
<li>unroll the list comp into <code>for</code> loop for efficiency</li>
<li>use python3 safe <code>items</code> instead of <code>iteritems</code></li>
</ol>
<p><strong>Attempt 2: Too Cold (Lacks Memoization)</strong>:</p>
<pre><code>def scrub_dict(d):
    new_dict = {}
    for k, v in d.items():
        if isinstance(v,dict):
            v = scrub_dict(v)
        if not v in (u'', None, {}):
            new_dict[k] = v
    return new_dict
</code></pre>
<p>DOH! This is not recursive and not at all memoizant.</p>
<p><strong>Attempt 3: Just Right (so far)</strong>:</p>
<pre><code>def scrub_dict(d):
    new_dict = {}
    for k, v in d.items():
        if isinstance(v,dict):
            v = scrub_dict(v)
        if not v in (u'', None, {}):
            new_dict[k] = v
    return new_dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative way you can do this, is using dictionary comprehension. This should be compatible with <code>2.7+</code></p>
<pre><code>result = {
    key: value for key, value in
    {"foo": "bar", "lorem": None}.items()
    if value
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an option if you are using <code>pandas</code>:</p>
<pre><code>import pandas as pd

d = dict.fromkeys(['a', 'b', 'c', 'd'])
d['b'] = 'not null'
d['c'] = ''  # empty string

print(d)

# convert `dict` to `Series` and replace any blank strings with `None`;
# use the `.dropna()` method and
# then convert back to a `dict`
d_ = pd.Series(d).replace('', None).dropna().to_dict()

print(d_)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Some of Methods mentioned above ignores if there are any integers and float with values 0 &amp; 0.0</p>
<p>If someone wants to avoid the above can use below code(removes empty strings and None values from nested dictionary and nested list):</p>
<pre><code>def remove_empty_from_dict(d):
    if type(d) is dict:
        _temp = {}
        for k,v in d.items():
            if v == None or v == "":
                pass
            elif type(v) is int or type(v) is float:
                _temp[k] = remove_empty_from_dict(v)
            elif (v or remove_empty_from_dict(v)):
                _temp[k] = remove_empty_from_dict(v)
        return _temp
    elif type(d) is list:
        return [remove_empty_from_dict(v) for v in d if( (str(v).strip() or str(remove_empty_from_dict(v)).strip()) and (v != None or remove_empty_from_dict(v) != None))]
    else:
        return d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Some benchmarking:</h1>
<h2>1. List comprehension recreate dict</h2>
<pre><code>In [7]: %%timeit dic = {str(i):i for i in xrange(10)}; dic['10'] = None; dic['5'] = None
   ...: dic = {k: v for k, v in dic.items() if v is not None} 
   1000000 loops, best of 7: 375 ns per loop
</code></pre>
<h2>2. List comprehension recreate dict using dict()</h2>
<pre><code>In [8]: %%timeit dic = {str(i):i for i in xrange(10)}; dic['10'] = None; dic['5'] = None
   ...: dic = dict((k, v) for k, v in dic.items() if v is not None)
1000000 loops, best of 7: 681 ns per loop
</code></pre>
<h2>3. Loop and delete key if v is None</h2>
<pre><code>In [10]: %%timeit dic = {str(i):i for i in xrange(10)}; dic['10'] = None; dic['5'] = None
    ...: for k, v in dic.items():
    ...:   if v is None:
    ...:     del dic[k]
    ...: 
10000000 loops, best of 7: 160 ns per loop
</code></pre>
<p>so loop and delete is the fastest at 160ns, list comprehension is half as slow at ~375ns and with a call to <code>dict()</code> is half as slow again ~680ns.</p>
<p>Wrapping 3 into a function brings it back down again to about 275ns. Also for me PyPy was about twice as fast as neet python.</p>
</div>
<span class="comment-copy">+1.  It's important to note that this does not actually remove the keys from an existing dictionary.  Rather, it creates a new dictionary.  Usually this is exactly what someone wants and is probably what the OP needs, but it is not what the OP asked for.</span>
<span class="comment-copy">That's true, good point.</span>
<span class="comment-copy">This also kills v=0, which is fine, if that is what is wanted.</span>
<span class="comment-copy">@shredding: You mean <code>.items()</code>.</span>
<span class="comment-copy">For later versions of python you should also use the dictionary generator: <code>{k: v for k, v in metadata.items() if v is not None}</code></span>
<span class="comment-copy">This also kills zero values.</span>
<span class="comment-copy">To preserve 0 (zero) you can use <code>... if v!=None</code> like so:  <code>{k: v for k, v in metadata.items() if v!=None}</code></span>
<span class="comment-copy">{k: v for k, v in metadata.items() if v!=None}  doesn't get rid of empty strings.</span>
<span class="comment-copy">dictionary comprehensions is supported only with Python 2.7+ for compatibility with prior versions please use @BrenBarn's solution.</span>
<span class="comment-copy">Should always compare None with, 'is not', instead of '!='. <a href="http://stackoverflow.com/a/14247419/2368836">stackoverflow.com/a/14247419/2368836</a></span>
<span class="comment-copy">this will also remove value 0 and 0 is not empty</span>
<span class="comment-copy">If you are using Python 3+ you have to replace <code>.iteritems()</code> with <code>.items()</code>, the first doesn't work anymore in latest Python versions.</span>
<span class="comment-copy">This solution worked great for a similar problem i had: stripping empty values from deeply nested lists inside of dictionaries. Thanks!</span>
<span class="comment-copy">This is good, as you are not reinventing the wheel, and providing a solution for nested objects. Thanks!</span>
<span class="comment-copy">I really liked the article you wrote for your library, and this is a useful library!</span>
<span class="comment-copy">Ha, nice extension! It is a good solution for dictionaries like the following: <code>d = { "things": [{ "name": "" }] }</code></span>
<span class="comment-copy">Use <code>items()</code> instead of <code>iteritems()</code> for Python 3</span>
<span class="comment-copy">really  nice shot, it address many problems at once and it solves the question, thank you to make it clear</span>
<span class="comment-copy">Loop and delete may also throw a RunTimeError, since it is not valid to modify a dictionary while iterating a view. <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html</a> s4.10.1</span>
<span class="comment-copy">ah man yeah ok in python 3 that is true but not in python 2.7 as items returns a list, so you have to call <code>list(dic.items())</code> in py 3.  Dict comprehension ftw then? del still seems faster for a low ratio of Null/empty values. I guess building that list is just as bad for memory consumption than just recreating the dict.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/stdtypes.html#dict.items" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#dict.items</a></span>
