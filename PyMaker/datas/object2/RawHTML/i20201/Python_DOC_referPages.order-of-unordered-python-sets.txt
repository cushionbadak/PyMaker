<div class="post-text" itemprop="text">
<p>I understand that sets in Python are unordered, but I'm curious about the 'order' they're displayed in, as it seems to be consistent. They seem to be out-of-order in the same way every time:</p>
<pre><code>&gt;&gt;&gt; set_1 = set([5, 2, 7, 2, 1, 88])
&gt;&gt;&gt; set_2 = set([5, 2, 7, 2, 1, 88])
&gt;&gt;&gt; set_1
set([88, 1, 2, 5, 7])
&gt;&gt;&gt; set_2
set([88, 1, 2, 5, 7])
</code></pre>
<p>...and another example:</p>
<pre><code>&gt;&gt;&gt; set_3 = set('abracadabra')
&gt;&gt;&gt; set_4 = set('abracadabra')
&gt;&gt;&gt; set_3
set(['a', 'r', 'b', 'c', 'd'])
&gt;&gt;&gt;&gt; set_4
set(['a', 'r', 'b', 'c', 'd'])
</code></pre>
<p>I'm just curious why this would be. Any help?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should watch this <a href="https://www.youtube.com/watch?v=C4Kc8xzcA68" rel="noreferrer">video</a> (although it is CPython<sup>1</sup> specific and about dictionaries -- but I assume it applies to sets as well).  </p>
<p>Basically, python hashes the elements and takes the last N bits (where N is determined by the size of the set) and uses those bits as array indices to place the object in memory.  The objects are then yielded in the order they exist in memory.  Of course, the picture gets a little more complicated when you need to resolve collisions between hashes, but that's the gist of it.</p>
<p>Also note that the order that they are printed out is determined by the order that you put them in (due to collisions).  So, if you reorder the list you pass to <code>set_2</code>, you might get a different order out if there are key collisions.</p>
<p>For example:</p>
<pre><code>list1 = [8,16,24]
set(list1)        #set([8, 16, 24])
list2 = [24,16,8]
set(list2)        #set([24, 16, 8])
</code></pre>
<p><em>Note</em> the fact that the order is preserved in these sets is "coincidence" and has to do with collision resolution (which I don't know anything about).  The point is that the last 3 bits of <code>hash(8)</code>, <code>hash(16)</code> and <code>hash(24)</code> are the same.  Because they are the same, collision resolution takes over and puts the elements in "backup" memory locations instead of the first (best) choice and so whether <code>8</code> occupies a location or <code>16</code> is determined by which one arrived at the party first and took the "best seat".</p>
<p>If we repeat the example with <code>1</code>, <code>2</code> and <code>3</code>, you will get a consistent order no matter what order they have in the input list:</p>
<pre><code>list1 = [1,2,3]
set(list1)      # set([1, 2, 3])
list2 = [3,2,1]
set(list2)      # set([1, 2, 3])
</code></pre>
<p>since the last 3 bits of <code>hash(1)</code>, <code>hash(2)</code> and <code>hash(3)</code> are unique.</p>
<hr/>
<p><sup>1</sup><strong>Note</strong> The implementation described here applies to CPython <code>dict</code> and <code>set</code>.  I think that the general description is valid for all modern versions of CPython up to 3.6. However, starting with CPython3.6, there is an additional implementation detail that actually preserves the insertion order for iteration for <code>dict</code>.  It appears that <code>set</code> still do not have this property.  The data structure is described by <a href="https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html" rel="noreferrer">this blog post</a> by the pypy folks (who started using this before the CPython folks).  The original idea (at least for the python ecosystem) <a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="noreferrer">is archived on the python-dev mailing list</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason of such behavior is than Python use hash tables for dictionary implementation: <a href="https://en.wikipedia.org/wiki/Hash_table#Open_addressing" rel="nofollow">https://en.wikipedia.org/wiki/Hash_table#Open_addressing</a></p>
<p>Position of the key is defined by it's memory address. If you know Python reuse memory for some objects:</p>
<pre><code>&gt;&gt;&gt; a = 'Hello world'
&gt;&gt;&gt; id(a)
140058096568768
&gt;&gt;&gt; a = 'Hello world'
&gt;&gt;&gt; id(a)
140058096568480
</code></pre>
<p>You can see that object <strong>a</strong> has different address every time it's init.</p>
<p>But for small integers it isn't change:</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; id(a)
40060856
&gt;&gt;&gt; a = 1
&gt;&gt;&gt; id(a)
40060856
</code></pre>
<p>Even if we create second object with different name it would be the same:</p>
<pre><code>&gt;&gt;&gt; b = 1
&gt;&gt;&gt; id(b)
40060856
</code></pre>
<p>This approach allow to save memory which Python interpreter consume.</p>
</div>
<div class="post-text" itemprop="text">
<p>AFAIK Python sets are implemented using a <a href="http://en.wikipedia.org/wiki/Hash_table" rel="nofollow">hash table</a>. The order in which the items appear depends on the hash function used. Within the same run of the program, the hash function probably does not change, hence you get the same order. </p>
<p>But there are no guarantees that it will always use the same function, and the order will change across runs - or within the same run if you insert a lot of elements and the hash table has to resize.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sets are based on a hash table. The hash of a value should be consistent so the order will be also - unless two elements hash to the same code, in which case the order of insertion will change the output order.</p>
</div>
<div class="post-text" itemprop="text">
<p>One key thing that's hinted at <a href="https://stackoverflow.com/a/12165239/908494">mgilson's great answer</a>, but isn't mentioned explicitly in any of the existing answers:</p>
<p>Small integers hash to themselves:</p>
<pre><code>&gt;&gt;&gt; [hash(x) for x in (1, 2, 3, 88)]
[1, 2, 3, 88]
</code></pre>
<p>Strings hash to values that are unpredictable. In fact, from 3.3 on, by default, <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow noreferrer">they're built off a seed that's randomized at startup</a>. So, you'll get different results for each new Python interpreter session, but:</p>
<pre><code>&gt;&gt;&gt; [hash(x) for x in 'abcz']
[6014072853767888837,
 8680706751544317651,
 -7529624133683586553,
 -1982255696180680242]
</code></pre>
<hr/>
<p>So, consider the simplest possible hash table implementation: just an array of N elements, where inserting a value means putting it in <code>hash(value) % N</code> (assuming no collisions). And you can make a rough guess at how large <code>N</code> will beâ€”it's going to be a little bigger than the number of elements in it. When creating a set from a sequence of 6 elements, N could easily be, say, 8.</p>
<p>What happens when you store those 5 numbers with N=8? Well, <code>hash(1) % 8</code>, <code>hash(2) % 8</code>, etc. are just the numbers themselves, but <code>hash(88) % 8</code> is 0. So, the hash table's array ends up holding <code>88, 1, 2, NULL, NULL, 5, NULL, 7</code>. So it should be easy to figure out why iterating the set might give you <code>88, 1, 2, 5, 7</code>.</p>
<p>Of course Python doesn't <em>guarantee</em> that you'll get this order every time. A small change to the way it guesses at the right value for <code>N</code> could mean <code>88</code> ends up somewhere different (or ends up colliding with one of the other values). And, in fact, running CPython 3.7 on my Mac, I get <code>1, 2, 5, 7, 88</code>.0</p>
<p>Meanwhile, when you build a hash from a sequence of size 11 and then insert randomized hashes into it, what happens? Even assuming the simplest implementation, and assuming there are no collisions, you still have no idea what order you're going to get. It will be consistent within a single run of the Python interpreter, but different the next time you start it up. (Unless you set <code>PYTHONHASHSEED</code> to <code>0</code>, or to some other int value.) Which is exactly what you see.</p>
<hr/>
<p>Of course it's worth looking at <a href="https://github.com/python/cpython/blob/master/Objects/setobject.c" rel="nofollow noreferrer">the way sets are actually implemented</a> rather than guessing. But what you'd guess based on the assumption of the simplest hash table implementation is (barring collisions and barring expansion of the hash table) exactly what happens.</p>
</div>
<span class="comment-copy">The same data running on the same version of Python will be put into the same hash buckets each time in the same order, so you can be sure they'll be the same under those particular circumstances.</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/526125/why-is-python-ordering-my-dictionary-like-so">Why is python ordering my dictionary like so?</a>. Sets are implemented much like dictionaries.</span>
<span class="comment-copy">@minitech Is that by accident or by design? I mean, is there anything in the spec that says that list(set(...)) will return the same each time? Unless so, safe coding would dictate that you treat any given ordering as perfectly random and unlikely to repeat.</span>
<span class="comment-copy">@KirkStrauser: Nope, but it's just common sense. Why would there be a random number generator involved in the hash algorithm? But yes, good code doesn't rely on the order of this.</span>
<span class="comment-copy">@minitech Believe it or not, that's a security feature of Perl (see <a href="http://perldoc.perl.org/perlsec.html#Algorithmic-Complexity-Attacks" rel="nofollow noreferrer">perldoc.perl.org/perlsec.html#Algorithmic-Complexity-Attacks</a>, and <a href="http://www.cs.rice.edu/~scrosby/hash/CrosbyWallach_UsenixSec2003.pdf" rel="nofollow noreferrer">cs.rice.edu/~scrosby/hash/CrosbyWallach_UsenixSec2003.pdf</a> for justification). It was enabled by default on at least one Perl release; I don't know what its current status is.</span>
<span class="comment-copy">Nice example. Unfortunately it implies that the order out will be the same as the order in, and I don't think that will always be the case.</span>
<span class="comment-copy">@MarkRansom -- That isn't always the case, but I had to come up with an example where I knew for a fact there would be hash collisions ... I'll add a disclaimer.</span>
<span class="comment-copy">@MarkRansom -- Added another (counter) example where the hashes are all unique demonstrating that the order of the set is consistent in that scenario.  Thanks for pointing out how that could be potentially confusing -- hopefully the answer is better now.</span>
<span class="comment-copy">Not that it affects the basic ideas presented here, but starting with Python 3.3, <a href="http://www.gossamer-threads.com/lists/python/dev/979881" rel="nofollow noreferrer">hash randomization</a> of strings and dates is turned on by default (and is available in the latest updates of 2.6, 2.7, 3.1, and 3.2). Your examples should not be affected, but the OP's string example could be.</span>
<span class="comment-copy">@PadraicCunningham -- Thanks.  Youtube's probably more reliable than whatever that other site was.</span>
<span class="comment-copy">Hi, Just tried with below example getting same memory address :                                         &gt;&gt;&gt; a="Helloworld"           &gt;&gt;&gt; id(a)                 140298549847792            &gt;&gt;&gt; a="Helloworld"            &gt;&gt;&gt; id(a)                  140298549847792</span>
