<div class="post-text" itemprop="text">
<p>I would like to subclass an immutable type or implement one of my own which behaves like an <code>int</code> does as shown in the following console session:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; i=42
&gt;&gt;&gt; id(i)
10021708
&gt;&gt;&gt; i.__iadd__(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'int' object has no attribute '__iadd__'
&gt;&gt;&gt; i += 1
&gt;&gt;&gt; i
43
&gt;&gt;&gt; id(i)
10021696
</code></pre>
<p>Not surprisingly, <code>int</code> objects have no <code>__iadd__()</code> method, yet applying <code>+=</code> to one doesn't result in an error, instead it apparently creates a new <code>int</code> and also somehow magically reassigns it to the name given in the augmented assignment statement.</p>
<p>Is it possible to create a user-defined class or subclass of a built-in immutable one that does this, and if so, how?</p>
</div>
<div class="post-text" itemprop="text">
<p>The return value of <code>__iadd__()</code> is used. You don't need to return the object that's being added to; you can create a new one and return that instead. In fact, if the object is immutable, you <em>have</em> to.</p>
<pre><code>import os.path

class Path(str):
    def __iadd__(self, other):
        return Path(os.path.join(str(self), str(other)))

path = Path("C:\\")
path += "windows"

print path
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply don't implement <code>__iadd__</code>, but only <code>__add__</code>:</p>
<pre><code>&gt;&gt;&gt; class X(object):
...     def __add__(self, o):
...             return "added"
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x += 2
&gt;&gt;&gt; x
'added'
</code></pre>
<p>If there's no <code>x.__iadd__</code>, Python simply calculates <code>x += y</code> as <code>x = x + y</code> <a href="http://docs.python.org/reference/datamodel.html#object.__iadd__"><sup>doc</sup></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When it sees <code>i += 1</code>, Python will try to call <code>__iadd__</code>. If that fails, it'll try to call <code>__add__</code>.</p>
<p>In both cases, the result of the call will be bound to the name, i.e. it'll attempt <code>i = i.__iadd__(1)</code> and then <code>i = i.__add__(1)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class aug_int:
    def __init__(self, value):
        self.value = value

    def __iadd__(self, other):
        self.value += other
        return self

&gt;&gt;&gt; i = aug_int(34)
&gt;&gt;&gt; i
&lt;__main__.aug_int instance at 0x02368E68&gt;
&gt;&gt;&gt; i.value
34
&gt;&gt;&gt; i += 55
&gt;&gt;&gt; i
&lt;__main__.aug_int instance at 0x02368E68&gt;
&gt;&gt;&gt; i.value
89
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Is there a reason you want <code>__iadd__</code> instead of <code>__add__</code>?</span>
<span class="comment-copy">@Michael Mauderer: Yes, I want to know how to emulate the behavior of <code>int</code> and other immutable types in this regard.</span>
<span class="comment-copy">Unless you're doing something hacky and/or unconventional with the operators (which is of course permitted), the statement <code>i += j</code> should be equivalent to <code>i = i + j</code> for immutable types. Thus one of the following presumably applies if you've implemented <code>__iadd__</code> for an immutable type: either you've also implemented <code>__add__</code> identically, introducing duplicate code and a maintenance trap, or you've not implemented <code>__add__</code> at all, needlessly losing the ability to also use the <code>+</code> operator which you could have got for free just by implementing <code>__add__</code> instead of <code>__iadd__</code>.</span>
<span class="comment-copy">Good answer and example...but @phihag beat you, timing-wise.</span>
<span class="comment-copy">Our answers are distinctly different; I'm fine with you choosing his (it's fine) but I just wanted to show that <code>__iadd__()</code> will do what you expect. You might want to make regular addition and in-place addition do something totally different, and in that case you'll need to implement both.</span>
<span class="comment-copy">Yes, you have to be very careful. Note that for some built-in types, however, <code>__add__</code> and <code>__iadd__</code> are in fact implemented very differently. One example is lists, where <code>+</code> produces a new list and <code>+=</code> mutates an existing one. If you have multiple references to the list, which one you use can be very important!</span>
<span class="comment-copy">This is a bad idea. The language docs <a href="http://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">Emulating numeric types</a> section explicitly says "These methods should attempt to do the operation in-place (modifying self)". While you <i>can</i> get away with misusing <code>__iadd__</code> this way, you shouldn't. Just leave it out, and the interpreter will call <code>__add__</code> instead.</span>
<span class="comment-copy">Y'all's definition of "should" is contrary to the dictionary. There is no reason whatsoever not to implement <code>__iadd__</code> for immutable types and no reason to "warn" against doing so. It's not as if it won't work perfectly fine. <i>This is why the return value is used, people.</i> If <code>__iadd__</code> was meant to be used only for mutable types then it wouldn't need the return value. Actually, I find the fact that <code>+</code> and <code>+=</code> do totally different things with mutable types the confusing thing! Now, a good argument against <code>__iadd__</code> is that it's generally redundant if you've implemented <code>__add__</code>.</span>
<span class="comment-copy">Yes, that does work and do the reassignment. Thanks. So the appears to be no way to differentiate between the two (even though that's likely fine in almost all cases).</span>
<span class="comment-copy">This is almost certainly the answer you actually want. Immutable objects should not implement the <code>__ifoo__</code> methods.</span>
<span class="comment-copy">"If that fails" is somewhat imprecise. If the <code>__iadd__</code> does exist, it is called, and errors raised by it are reraised.</span>
<span class="comment-copy">@phihag To be even more pedantic, I'll just note that <code>__add__</code> will also be called if <code>__iadd__</code> returns <code>NotImplemented</code>. I'm not sure if this is ever useful in practice; perhaps it could be if you wanted to implement an immutable version of a class as a subclass of the mutable version, and override the <code>__iadd__</code> method to make <code>+=</code> fall back on <code>__add__</code>. I suppose you might also use this if you had a class for which in-place modification was reasonable when adding certain types, but not when adding some other types to it, and in the latter case falling back on <code>__add__</code> was desirable.</span>
<span class="comment-copy">This doesn't define a class of immutable objects.</span>
