<div class="post-text" itemprop="text">
<p>The correct way to load unicode text from Python 2.7 is something like:</p>
<pre><code>content = open('filename').read().decode('encoding'):
for line in content.splitlines():
    process(line)
</code></pre>
<p>(<strong>Update</strong>: No it isn't. See the answers.)</p>
<p>However, if the file is very large, I might want to read, decode and process it one line at a time, so that the whole file is never loaded into memory at once. Something like:</p>
<pre><code>for line in open('filename'):
    process(line.decode('encoding'))        
</code></pre>
<p>The <code>for</code> loop's iteration over the open filehandle is a generator that reads one line at a time.</p>
<p>This doesn't work though, because if the file is utf32 encoded, for example, then the bytes in the file (in hex) look something like:</p>
<pre><code>hello\n = 68000000(h) 65000000(e) 6c000000(l) 6c000000(l) 6f000000(o) 0a000000(\n)
</code></pre>
<p>And the split into lines done by the <code>for</code> loop splits on the <code>0a</code> byte of the <code>\n</code> character, resulting in (in hex):</p>
<pre><code>lines[0] = 0x 68000000 65000000 6c000000 6c000000 6f000000 0a
lines[1] = 0x 000000
</code></pre>
<p>So part of the <code>\n</code> character is left at the end of line 1, and the remaining three bytes end up in line 2 (followed by whatever text is actually in line 2.) Calling <code>decode</code> on either of these lines understandably results in a <code>UnicodeDecodeError</code>.</p>
<pre><code>UnicodeDecodeError: 'utf32' codec can't decode byte 0x0a in position 24: truncated data
</code></pre>
<p>So, obviously enough, splitting a unicode byte stream on <code>0a</code> bytes is not the correct way to split it into lines. Instead I should be splitting on occurrences of the full four-byte newline character (0x0a000000). However, I think the correct way to detect these characters is to decode the byte stream into a unicode string and look for <code>\n</code> characters - and this decoding of the full stream is exactly the operation I'm trying to avoid.</p>
<p>This can't be an uncommon requirement. What's the correct way to handle it?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/codecs.html#codecs.open" rel="nofollow"><code>codecs.open</code> itself notes that <code>io.open</code> is a better option</a> (note is just above link target). It's not deprecated, but only because it supports some esoteric uses (bytes-&gt;bytes codecs).</p>
<p><a href="https://docs.python.org/2/library/io.html#io.open" rel="nofollow"><code>io.open</code> is available in Python 2.6 and higher</a>, and provides the same behaviors as Py3's built-in <code>open</code>, is better optimized, and doesn't misbehave like <code>codecs.open</code> when it comes to stuff like line-ending conversions. The only reason to use <code>codecs.open</code> is if you need to support Python 2.5 and earlier, otherwise, <code>io.open</code> is strictly better.</p>
<pre><code>import io

# Use with statement for guaranteed, predictable cleanup
with io.open('filename', encoding='utf-32') as f:
    for line in f:
        process(line)
</code></pre>
<p>Incidentally, you can convert <em>any</em> already open binary file-like object to a seamless decoding text based object <a href="https://docs.python.org/2/library/io.html#io.TextIOWrapper" rel="nofollow">using <code>io.TextIOWrapper</code></a>, so if someone else provides you an existing file-like object in binary mode, you can still do line by line decoding implicitly with:</p>
<pre><code>def process_file(f):
    if 'b' in f.mode:  # Or some better test...
        f = io.TextIOWrapper(f, encoding='utf-32')
    for line in f:
        process(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about trying somethng like:</p>
<pre><code>for line in codecs.open("filename", "rt", "utf32"):
    print line
</code></pre>
<p>I think this should work.</p>
<p>The <code>codecs</code> module should do the translation for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using the codecs module:</p>
<pre><code>for line in codecs.open(filename, encoding='utf32'):
    do_something(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use codecs.open instead of builtin open:</p>
<pre><code>import codecs
for line in codecs.open('filename', encoding='encoding'):
    print repr(line)
</code></pre>
<p><a href="http://docs.python.org/library/codecs.html#codecs.open" rel="nofollow">http://docs.python.org/library/codecs.html#codecs.open</a></p>
<p>Of course, I discovered this mere moments after finishing my carefully-crafted stackoverflow question.</p>
</div>
<span class="comment-copy">Did you try reading the file using the codecs.open() method?</span>
<span class="comment-copy">@Maulwurfn, I didn't know it existed! But I do now. Thanks.</span>
<span class="comment-copy">Readers! Also see ShadowRanger's low-point answer near the bottom of this page: "codecs.open docs note that io.open is a better option" ...</span>
<span class="comment-copy">I selected @Simon's answer just 'cos he has fewer points, but have an upvote. Thanks!</span>
<span class="comment-copy">Huh? Now you only have one point! What happened!?!?!</span>
<span class="comment-copy">@jamylak, thanks for fixing my shoddy code.</span>
<span class="comment-copy">no problem but I only fixed the indent :)</span>
