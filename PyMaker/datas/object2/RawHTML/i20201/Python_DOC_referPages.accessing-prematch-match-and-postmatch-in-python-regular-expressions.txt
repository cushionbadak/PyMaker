<div class="post-text" itemprop="text">
<p>When matching a regular expression in Perl, <a href="https://perldoc.perl.org/perlreref.html#VARIABLES" rel="nofollow noreferrer">three variables named <code>$PREMATCH</code>, <code>$MATCH</code> and <code>$POSTMATCH</code> are set</a>, containing the parts of the input string before the match, the match itself, and the part after.</p>
<p>How can I access the same values using Python regular expressions?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, Python has no explicit support for prematch and postmatch values, but you <em>can</em> use the attributes of a <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow noreferrer">match object</a> to slice the input string; given a matchobject <code>match</code>, the equivalents are:</p>
<ul>
<li><code>$PREMATCH</code>: <code>match.string[:match.start()]</code></li>
<li><code>$MATCH</code>: <code>match.group()</code></li>
<li><code>$POSTMATCH</code>: <code>match.string[match.end():]</code></li>
</ul>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; match = re.search(r'\d+', 'Pre 1234 Post')
&gt;&gt;&gt; match.string[:match.start()]
'Pre '
&gt;&gt;&gt; match.group()
'1234'
&gt;&gt;&gt; match.string[match.end():]
' Post'
</code></pre>
<p>You could also use <a href="http://docs.python.org/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split()</code></a> to divvie up a string around a regular expression with a group around the whole expression:</p>
<pre><code>&gt;&gt;&gt; re.split(r'(\d+)', 'Pre 1234 Post')
['Pre ', '1234', ' Post']
</code></pre>
<p>You can use tuple-unpacking to put that into variables if you like:</p>
<pre><code>&gt;&gt;&gt; pre, match, post = re.split(r'(\d+)', 'Pre 1234 Post')
&gt;&gt;&gt; pre, post
('Pre ', ' Post')
&gt;&gt;&gt; match
'1234'
</code></pre>
<p>Do be aware that <code>.split()</code> will keep on splitting unless you limit it to 1 match with the <code>maxsplit</code> parameter:</p>
<pre><code>&gt;&gt;&gt; re.split(r'(\d+)', 'One 1 Two 2 Three 3')
['One ', '1', ' Two ', '2', ' Three ', '3', '']
&gt;&gt;&gt; re.split(r'(\d+)', 'One 1 Two 2 Three 3', 1)
['One ', '1', ' Two 2 Three 3']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, you use the <code>re</code> module in python. The syntax is however a bit different than in Perl, there are no shortcuts as in Perl.</p>
<p>Depending on what you are trying to achieve, you can for example use groups.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; str = 'abcdefghijklmnopqrstuv'
&gt;&gt;&gt; match = re.search('(.*)ij(.*)', str)
&gt;&gt;&gt; match.groups()
('abcdefgh', 'klmnopqrstuv')
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">I think he means syntactic shortcuts (not just <code>re.match</code>, etc). There aren't</span>
<span class="comment-copy">I was able to emulate Perl Pre/Post matching this way : <code>&gt;&gt;&gt; aa = re.compile(r'(?P&lt;prematch&gt;.*?)(?P&lt;match&gt;mystring)(?P&lt;postmatch&gt;.*)')</code> then <code>&gt;&gt;bb="some_stuffmystring_mystringsomestuff"</code> and finally <code>&gt;&gt;&gt; aa.match(bb).group('prematch','match','postmatch')</code> gives ('some_stuff', 'mystring', '_mystringsomestuff')</span>
