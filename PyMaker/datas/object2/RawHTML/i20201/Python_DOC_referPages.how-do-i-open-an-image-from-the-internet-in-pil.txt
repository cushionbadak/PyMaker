<div class="post-text" itemprop="text">
<p>I would like to find the dimensions of an image on the internet. I tried using</p>
<pre><code>from PIL import Image
import urllib2 as urllib
fd = urllib.urlopen("http://a/b/c")
im = Image.open(fd)
im.size
</code></pre>
<p>as suggested in <a href="https://stackoverflow.com/a/6014074/159388">this answer</a>, but I get the error message </p>
<pre><code>addinfourl instance has no attribute 'seek'
</code></pre>
<p>I checked and objects returned by <code>urllib2.urlopen(url)</code> do not seem to have a seek method according to <code>dir</code>.</p>
<p>So, what do I have to do to be able to load an image from the Internet into PIL?</p>
</div>
<div class="post-text" itemprop="text">
<p>You might consider using <a href="http://docs.python.org/library/io.html#buffered-streams"><code>io.BytesIO</code></a> for <a href="http://dictionary.reference.com/browse/forward+compatibility">forward compatibility</a>.<br/>
The StringIO and cStringIO modules do not exist in Python 3.</p>
<pre><code>from PIL import Image
import urllib2 as urllib
import io

fd = urllib.urlopen("http://a/b/c")
image_file = io.BytesIO(fd.read())
im = Image.open(image_file)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using your same example, just use StringIO to wrap the buffer into a proper file-like object:</p>
<pre><code>from PIL import Image
import urllib2 as urllib
from StringIO import StringIO

fd = urllib.urlopen("http://a/b/c")
im = Image.open(StringIO(fd.read()))
im.size
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Python <code>requests</code>:</p>
<pre><code>from PIL import Image
from StringIO import StringIO
import requests

r = requests.get("http://a/b/c")
im = Image.open(StringIO(r.content))
im.size
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This <a href="https://github.com/python-pillow/Pillow/pull/1151#issuecomment-87346557" rel="noreferrer">pull-request</a> adds support for stream-handling native to Pillow (the friendly PIL fork) and should be available from version 2.8.0. This allows the simpler opening remote files with <a href="https://docs.python.org/2/library/urllib2.html" rel="noreferrer">urllib</a>:</p>
<pre><code>from PIL import Image
import urllib2
Image.open(urllib2.urlopen(url))
</code></pre>
<p>...or using <a href="http://docs.python-requests.org/en/latest/" rel="noreferrer">requests</a>:</p>
<pre><code>from PIL import Image
import requests
Image.open(requests.get(url, stream=True).raw)
</code></pre>
<p>As <a href="https://github.com/python-pillow/Pillow/pull/1151#issuecomment-87346557" rel="noreferrer">mentioned by mjpieters on the PR</a> requests does not automatically decode <code>gzip</code> responses, so if you're downloading images that have been further compressed for whatever reason you must set <code>decode_content=True</code> on the response object before accessing <code>.raw</code>.</p>
<pre><code>response = requests.get(url, stream=True)
response.raw.decode_content = True
image = Image.open(response.raw)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/urllib#urllib.urlopen" rel="nofollow"><code>urllib</code> documentation</a> mentions that an object returned by <code>urlopen</code> doesn't support <code>seek</code> operation.</p>
<blockquote>
<p>This module provides a high-level interface for fetching data across
  the World Wide Web. In particular, the urlopen() function is similar
  to the built-in function open(), but accepts Universal Resource
  Locators (URLs) instead of filenames. Some restrictions apply â€” it can
  only open URLs for reading, and no seek operations are available.</p>
</blockquote>
<p>However, the <a href="http://www.pythonware.com/library/pil/handbook/image.htm#open" rel="nofollow"><code>PIL.open</code></a> function explicitly requires it. </p>
<blockquote>
<p><strong>open</strong></p>
<p>Image.open(infile) =&gt; image</p>
<p>Image.open(infile, mode) =&gt; image</p>
<p>Opens and identifies the given image file. This is a lazy operation;
  the actual image data is not read from the file until you try to
  process the data (call the load method to force loading). If the mode
  argument is given, it must be "r".</p>
<p>You can use either a string (representing the filename) or a file
  object. In the latter case, <strong>the file object must implement read, seek,
  and tell methods</strong>, and be opened in binary mode.</p>
</blockquote>
<p>Try using <code>cStringIO</code> module that converts a string into a file-like object.</p>
<pre><code>from PIL import Image
import urllib2 as urllib
import cStringIO

fd = urllib.urlopen("http://a/b/c")
image_file = cStringIO.StringIO(fd.read())
im = Image.open(image_file)
im.size
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This answer is 4 years ago, but it's still on top in Google.In Python3,
we have simple solution.</p>
<pre><code>from urllib.request import urlopen
img =Image.open(urlopen('http://dl.iplaypython.com/images/banner336x280.jpg'))
new_img =img.resize((300,500),Image.ANTIALIAS)
new_img.save('url.jpg','jpeg')
</code></pre>
</div>
<span class="comment-copy">I would suggest using <a href="https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile" rel="nofollow noreferrer"><code>tempfile.SpooledTemporaryFile</code></a> with a max size to avoid unintended memory exhaustion.</span>
<span class="comment-copy">Though this answer is different than the others, it doesn't solve the actual problem any differently than jdi's answer. It still wraps the stream in <code>StringIO</code>.</span>
<span class="comment-copy">This worked a treat for a Docker image that didn't have urllib2 but had requests. Thanks for posting an alternative.</span>
<span class="comment-copy">Can you explain a bit more?</span>
