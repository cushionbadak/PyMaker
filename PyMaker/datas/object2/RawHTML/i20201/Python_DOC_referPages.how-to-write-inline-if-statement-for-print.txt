<div class="post-text" itemprop="text">
<p>I need to print some stuff only when a boolean variable is set to <code>True</code>. So, after looking at <a href="https://stackoverflow.com/questions/1319214/shorter-more-pythonic-way-of-writing-an-if-statements">this</a>, I tried with a simple example:</p>
<pre><code>&gt;&gt;&gt; a = 100
&gt;&gt;&gt; b = True
&gt;&gt;&gt; print a if b
  File "&lt;stdin&gt;", line 1
    print a if b
             ^
SyntaxError: invalid syntax  
</code></pre>
<p>Same thing if I write <code>print a if b==True</code>.</p>
<p>What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does <strong>not</strong> have a trailing <code>if</code> <strong>statement</strong>.</p>
<p>There are two kinds of <code>if</code> in Python:</p>
<ol>
<li><p><code>if</code> statement:</p>
<pre><code>if condition: statement
if condition:
    block
</code></pre></li>
<li><p><code>if</code> <strong>expression</strong> (introduced in Python 2.5)</p>
<pre><code>expression_if_true if condition else expression_if_false
</code></pre></li>
</ol>
<p>And note, that both <code>print a</code> and <code>b = a</code> are statements. Only the <code>a</code> part is an expression. So if you write</p>
<pre><code>print a if b else 0
</code></pre>
<p>it means</p>
<pre><code>print (a if b else 0)
</code></pre>
<p>and similarly when you write</p>
<pre><code>x = a if b else 0
</code></pre>
<p>it means</p>
<pre><code>x = (a if b else 0)
</code></pre>
<p>Now what would it print/assign if there was no <code>else</code> clause? The print/assignment is <strong>still there</strong>.</p>
<p>And note, that if you don't want it to be there, you can always write the regular <code>if</code> statement on a single line, though it's less readable and there is really no reason to avoid the two-line variant.</p>
</div>
<div class="post-text" itemprop="text">
<p>Inline if-else <em>EXPRESSION</em> must always contain else clause, e.g:</p>
<pre><code>a = 1 if b else 0
</code></pre>
<p>If you want to leave your 'a' variable value unchanged - assing old 'a' value (else is still required by syntax demands):</p>
<pre><code>a = 1 if b else a
</code></pre>
<p>This piece of code leaves <strong>a</strong> unchanged when b turns to be False.</p>
</div>
<div class="post-text" itemprop="text">
<p>The 'else' statement is mandatory. You can do stuff like this :</p>
<pre><code>&gt;&gt;&gt; b = True
&gt;&gt;&gt; a = 1 if b else None
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b = False
&gt;&gt;&gt; a = 1 if b else None
&gt;&gt;&gt; a
&gt;&gt;&gt; 
</code></pre>
<p><strong>EDIT:</strong></p>
<p>Or, depending of your needs, you may try:</p>
<pre><code>&gt;&gt;&gt; if b: print(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to <code>from __future__ import print_function</code> you can do the following:</p>
<pre><code>a = 100
b = True
print a if b else "",  # Note the comma!
print "see no new line"
</code></pre>
<p>Which prints:</p>
<pre><code>100 see no new line
</code></pre>
<p>If you're not aversed to <code>from __future__ import print_function</code> or are using python 3 or later:</p>
<pre><code>from __future__ import print_function
a = False
b = 100
print(b if a else "", end = "")
</code></pre>
<p>Adding the else is the only change you need to make to make your code syntactically correct, you need the else for the conditional expression (the "in line if else blocks") </p>
<p>The reason I didn't use <code>None</code> or <code>0</code> like others in the thread have used, is because using <code>None/0</code> would cause the program to <code>print None</code> or <code>print 0</code> in the cases where <code>b</code> is <code>False</code>.</p>
<p>If you want to read about this topic I've included a <a href="http://docs.python.org/release/2.5/whatsnew/pep-308.html" rel="noreferrer">link</a> to the release notes for the patch that this feature was added to Python.</p>
<p>The 'pattern' above is very similar to the pattern shown in PEP 308:</p>
<blockquote>
<p>This syntax may seem strange and backwards; why does the condition go
  in the middle of the expression, and not in the front as in C's c ? x
  : y? The decision was checked by applying the new syntax to the
  modules in the standard library and seeing how the resulting code
  read. In many cases where a conditional expression is used, one value
  seems to be the 'common case' and one value is an 'exceptional case',
  used only on rarer occasions when the condition isn't met. The
  conditional syntax makes this pattern a bit more obvious:</p>
<p>contents = ((doc + '\n') if doc else '')</p>
</blockquote>
<p>So I think overall this is a reasonable way of approching it but you can't argue with the simplicity of:</p>
<pre><code>if logging: print data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since 2.5 you can use <a href="https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="nofollow noreferrer">equivalent of C’s ”?:”</a> <a href="https://stackoverflow.com/q/394809/55075">ternary conditional operator</a> and the syntax is:</p>
<pre><code>[on_true] if [expression] else [on_false]
</code></pre>
<p>So your example is fine, but you've to simply add <code>else</code>, like:</p>
<pre><code>print a if b else ''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>print (1==2 and "only if condition true" or "in case condition is false")
</code></pre>
<p>Just as well you can keep going like:</p>
<pre><code>print 1==2 and "aa" or ((2==3) and "bb" or "cc")
</code></pre>
<p>Real world example:</p>
<pre><code>&gt;&gt;&gt; print "%d item%s found." % (count, (count&gt;1 and 's' or ''))
1 item found.
&gt;&gt;&gt; count = 2
&gt;&gt;&gt; print "%d item%s found." % (count, (count&gt;1 and 's' or ''))
2 items found.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this . It might help you</p>
<pre><code>a=100
b=True

if b:
   print a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For your case this works:</p>
<pre><code>a = b or 0
</code></pre>
<p><strong>Edit:</strong> How does this work?</p>
<p>In the question</p>
<pre><code>b = True
</code></pre>
<p>So evaluating</p>
<pre><code>b or 0
</code></pre>
<p>results in</p>
<pre><code>True
</code></pre>
<p>which is assigned to <code>a</code>.</p>
<p>If <code>b == False?</code>, <code>b or 0</code> would evaluate to the second operand <code>0</code> which would be assigned to <code>a</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be done with <a href="https://stackoverflow.com/a/9244925/2000793">string formatting</a>. It works with the % notation as well as <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="noreferrer">.format()</a> and <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="noreferrer">f-strings</a> (new to 3.6)</p>
<pre><code>print '%s' % (a if b else "")
</code></pre>
<p>or</p>
<pre><code>print '{}'.format(a if b else "")
</code></pre>
<p>or</p>
<pre><code>print(f'{a if b else ""}')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're simply overcomplicating.</p>
<pre><code>if b:
   print a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You always need an <code>else</code> in an inline if:</p>
<pre><code>a = 1 if b else 0
</code></pre>
<p>But an easier way to do it would be <code>a = int(b)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well why don't you simply write:</p>
<pre><code>if b:
    print a
else:
    print 'b is false'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>hmmm, you can do it with a <strong>list comprehension</strong>. This would only make sense if you had a real range.. but it does do the job:</p>
<pre><code>print([a for i in range(0,1) if b])
</code></pre>
<p>or using just those two variables:</p>
<pre><code>print([a for a in range(a,a+1) if b])
</code></pre>
</div>
<span class="comment-copy">What should your version do when <code>not b</code>?</span>
<span class="comment-copy">Nothing. I edited my example so that it better suits to my script.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">Does Python have a ternary conditional operator?</a></span>
<span class="comment-copy">Good question, complex answers... a straight one would be "the else part is mandatory".</span>
<span class="comment-copy">I think that <code>if condition: statement</code> does not work in case of multiline statements.</span>
<span class="comment-copy">Yes, but you don't need to use if, simply use boolean logic like I show below in my examples.</span>
<span class="comment-copy">@JanHudec If Python doesn't have a trailing <code>if</code>, then why does this work: <a href="https://repl.it/BLMh" rel="nofollow noreferrer"><code>print [i for i in range(10) if i%2]</code></a>? I wish they'd allow it outside of comprehensions...</span>
<span class="comment-copy">@mbomb007, that is not a trailing if <i>statement</i> either. It is simply part of the list (or generator) comprehension. Note that the thing before the if is not a statement, it is two expressions with <code>for</code> between them.</span>
<span class="comment-copy">@AlexandervonWernherr, yes, that sounds reasonable.</span>
<span class="comment-copy">Oh. But what if I don't want anything to happen in the else branch? I need something like: <code>print a if b</code></span>
<span class="comment-copy"><code>else a</code> would be better then <code>else 0</code></span>
<span class="comment-copy"><code>if b: print a</code> Just need a simple if in that case</span>
<span class="comment-copy">Fixing the answer, because it's almost good if it wasn't for the word 'statement' which made it totally bad. The gist of the question is that it's <i>not</i> a statement.</span>
<span class="comment-copy">+1-1: Good for pointing out that the else expression is mandatory, but not ok for not providing the answer for the case in question: print "nothing" (something along the lines of <code>""</code> or <code>None</code>, see details in other answers).</span>
<span class="comment-copy">But <i>why</i> is the else mandatory, that's the question here.</span>
<span class="comment-copy">@JanHudec Deleted my response, you clearly know what you're talking about. Thought you were asking about <i>why</i> in the <i>syntax</i> :-)</span>
<span class="comment-copy">Thanks. The thing here is that <code>print ""</code> will still print something: a blank line.</span>
<span class="comment-copy">have updated my answer xx</span>
<span class="comment-copy">Thanks. The <code>end</code> argumnt in <code>print</code> only appears in Python 3.x, right?</span>
<span class="comment-copy">aye, I'm more of a 2.7 man hence the  <code>from __future__ import print_function</code></span>
<span class="comment-copy">+1, exactly what I was thinking. I don't think this is readable though, and <code>if b: print a</code> should be preferred.</span>
<span class="comment-copy">Note that the <code>print ''</code> will still print a newline, which is avoided in the answer by Noelkd.</span>
<span class="comment-copy">By the way, that works on Python 2.4 as well, of course...</span>
<span class="comment-copy">it's probably the least clear thing I've ever seen in Python :)</span>
<span class="comment-copy">Unusual, yes, unclear, not so sure, at least not for simple statements (no sub-if). Anyway, there we have it for educational purposes.</span>
<span class="comment-copy">Exactly what I was looking for.</span>
<span class="comment-copy">-1: Not pythonic</span>
<span class="comment-copy">Is that so? Sauce?</span>
<span class="comment-copy">How does this exactly work?</span>
<span class="comment-copy">Ugliness and errorproneness of this expression is the reason why we have conditional expression in the first place.</span>
<span class="comment-copy">This has nothing to do with formatting; you could just do <code>print a if b else ""</code>. Which is exactly what Noelkd's answer does.</span>
<span class="comment-copy">Good point. Looks like I missed that one when I was looking this over earlier.</span>
<span class="comment-copy">@melpomene but printing "" ads a new line, that can be avoided using <code>print "",</code> (colon) for Python2, and using <code>print("", end="")</code> for Python3.</span>
<span class="comment-copy">Of course that's the easiest option. I think that at the time (august 2012) I wanted to do something like: <code>if DEBUG: print something</code></span>
<span class="comment-copy">Duplicated answer? See that by SkariaArun, and also a comment.</span>
<span class="comment-copy">-1: Easier. And totally unreadable. And not what the asker wanted anyway.</span>
<span class="comment-copy">ITYM <code>a = int(bool(b))</code>.</span>
<span class="comment-copy">not always, see "Eduardo" answer.</span>
