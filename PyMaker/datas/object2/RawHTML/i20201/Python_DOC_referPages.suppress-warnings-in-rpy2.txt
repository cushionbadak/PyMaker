<div class="post-text" itemprop="text">
<p>When I import R in python, using rpy2, how do I suppress warnings?</p>
<p>It appears that in R you have to do just the following</p>
<pre><code>options(warn=-1)
</code></pre>
<p>...but I'm not familiar with R. How do I do this in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You pretty much gave the answer yourself. You can call the <code>options(warn=-1)</code> function from Python by using RPy:</p>
<pre><code>rpy.r['options'](warn=-1)
</code></pre>
<p>For RPy2 it should be something like this (haven't tried this):</p>
<pre><code>rpy2.robjects.r['options'](warn=-1)
</code></pre>
<p>Just put it at the beginning of your Python script (after the module imports) and all warnings should be suppressed.</p>
</div>
<div class="post-text" itemprop="text">
<p>The warning system in <a href="http://rpy2.bitbucket.org/" rel="noreferrer">rpy2</a> uses Python's <a href="https://docs.python.org/3.5/library/warnings.html#module-warnings" rel="noreferrer"><code>warnings</code></a> module. As a consequence, you can switch off warnings using that package's <a href="https://docs.python.org/3.5/library/warnings.html#warnings.filterwarnings" rel="noreferrer"><code>filterwarnings()</code></a> function. As already pointed out in a comment to another answer here this could be dangerous as not only R-related warnings are affected.</p>
<p>However, rpy2 comes with its own warning class, <code>RRuntimeWarning</code>. Therefore, you can switch off only this type of warning by</p>
<pre><code>import warnings
from rpy2.rinterface import RRuntimeWarning
warnings.filterwarnings("ignore", category=RRuntimeWarning)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Beginning with 3.0 version, rpy2 does not use Python's <code>warnings</code> module <a href="https://bitbucket.org/rpy2/rpy2/issues/529/rruntimewarning-can-no-longer-be-filtered" rel="nofollow noreferrer">anymore</a>. It now relies on <code>logging</code> instead. The new solution would be:</p>
<pre><code>from rpy2.rinterface_lib.callbacks import logger as rpy2_logger
import logging
rpy2_logger.setLevel(logging.ERROR)   # will display errors, but not warnings
</code></pre>
<p>If you want to filter specific warnings only, use:</p>
<pre><code>rpy2_logger.addFilter(lambda record: 'notch went outside hinges' in record.msg)
</code></pre>
<p>See <a href="https://docs.python.org/3/library/logging.html#logrecord-objects" rel="nofollow noreferrer"><code>LogRecord</code></a> class specification for available fields for advanced filtering.</p>
</div>
<span class="comment-copy">Does these warnings follow from importing R packages at start, or are they issued during a regular session (e.g., for some R expressions)?</span>
<span class="comment-copy">the latter, they are generated by some functions I'm calling.</span>
<span class="comment-copy"><code>suppressWarnings()</code> might be an option then.</span>
<span class="comment-copy">Seems not to work for rpy2. Obviously one can supprese brutally via: <code>import warnings warnings.filterwarnings("ignore")</code>, which is not elegant at all, since it affects not only the rpy2 warnings</span>
<span class="comment-copy">This should be the accepted answer, as it is a solution to "suppress warnings in R". The accepted solution DOES NOT WORK.</span>
