<div class="post-text" itemprop="text">
<p>In Python, it is tedious to write:</p>
<pre><code>print "foo is" + bar + '.'
</code></pre>
<p>Can I do something like this in Python?</p>
<p><code>print "foo is #{bar}."</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6+ does have variable interpolation - prepend an <code>f</code> to your string:</p>
<pre><code>f"foo is {bar}"
</code></pre>
<p>For versions of Python below this (Python 2 - 3.5) you can use <code>str.format</code> to pass in variables:</p>
<pre><code># Rather than this:
print("foo is #{bar}")

# You would do this:
print("foo is {}".format(bar))

# Or this:
print("foo is {bar}".format(bar=bar))

# Or this:
print("foo is %s" % (bar, ))

# Or even this:
print("foo is %(bar)s" % {"bar": bar})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6 <del>will have</del> has <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">literal string interpolation</a> using <em>f-strings</em>:</p>
<pre><code>print(f"foo is {bar}.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6 has <a href="https://www.python.org/dev/peps/pep-0498/#no-use-of-globals-or-locals" rel="noreferrer">introduced f-strings</a>:</p>
<pre><code>print(f"foo is {bar}.")
</code></pre>
<hr/>
<p>Old answer:</p>
<p>Since version 3.2 Python has <a href="http://docs.python.org/3/library/stdtypes.html#str.format_map" rel="noreferrer"><code>str.format_map</code></a> which together with <a href="http://docs.python.org/3/library/functions.html#locals" rel="noreferrer"><code>locals()</code></a> or <a href="http://docs.python.org/3/library/functions.html#globals" rel="noreferrer"><code>globals()</code></a> allows you to do fast:</p>
<pre><code>Python 3.3.2+ (default, Feb 28 2014, 00:52:16) 
&gt;&gt;&gt; bar = "something"
&gt;&gt;&gt; print("foo is {bar}".format_map(locals()))
foo is something
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have learned the following technique from <a href="http://www.dabeaz.com/per.html" rel="noreferrer">Python Essential Reference</a>:</p>
<pre><code>&gt;&gt;&gt; bar = "baz"
&gt;&gt;&gt; print "foo is {bar}.".format(**vars())
foo is baz.
</code></pre>
<p>This is quite useful when we want to refer to many variables in the formatting string:</p>
<ul>
<li>We don't have to repeat all variables in the argument list again: compare it to the explicit keyword argument-based approaches (such as <code>"{x}{y}".format(x=x, y=y)</code> and <code>"%(x)%(y)" % {"x": x, "y": y}</code>).</li>
<li>We don't have to check one by one if the order of variables in the argument list is consistent with their order in the formatting string: compare it to the positional argument-based approaches (such as <code>"{}{}".format(x, y)</code>, <code>"{0}{1}".format(x, y)</code> and <code>"%s%s" % (x, y)</code>).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/stdtypes.html#str.format" rel="noreferrer">String formatting</a></p>
<pre><code>&gt;&gt;&gt; bar = 1
&gt;&gt;&gt; print "foo is {}.".format(bar)
foo is 1.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer this approach because you don't have to repeat yourself by referencing the variable twice:</p>
<pre>
alpha = 123
print 'The answer is {alpha}'.format(**locals())
</pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a big difference between this in Ruby:</p>
<pre><code>print "foo is #{bar}."
</code></pre>
<p>And these in Python:</p>
<pre><code>print "foo is {bar}".format(bar=bar)
</code></pre>
<p>In the Ruby example, <code>bar</code> is <em>evaluated</em><br/>
In the Python example, <code>bar</code> is just a key to the dictionary</p>
<p>In the case that you are just using variables the behave more or less the same, but in general, converting Ruby to Python isn't quite so simple</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, absolutely. Python, in my opinion, has great support for string formatting, replacements and operators.</p>
<p>This might be helpful:<br/>
<a href="http://docs.python.org/library/stdtypes.html#string-formatting-operations" rel="nofollow">http://docs.python.org/library/stdtypes.html#string-formatting-operations</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Almost every other answer didn't work for me. Probably it's because I'm on Python3.5. The only thing which worked is:</p>
<pre><code> print("Foobar is %s%s" %('Foo','bar',))
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/22617/format-numbers-to-strings-in-python">Format numbers to strings in Python</a></span>
<span class="comment-copy">I think I've found a solution, would you check it out?  <a href="http://stackoverflow.com/questions/16504732/how-could-i-make-my-python-string-interpolation-implementation-work-accross-impo" title="how could i make my python string interpolation implementation work accross impo">stackoverflow.com/questions/16504732/â€¦</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4450592/is-there-a-python-equivalent-to-rubys-string-interpolation">Is there a Python equivalent to Ruby's string interpolation?</a></span>
<span class="comment-copy">The 3rd one looks neat, but I remember this way kinda deprecated? is that true?</span>
<span class="comment-copy">There is also, for the lazy, <code>print "foo is %(bar)s" % locals()</code>.</span>
<span class="comment-copy">@yozloy - correct it is deprecated in Python 3 (as I understand it).</span>
<span class="comment-copy">the % syntax is no longer deprecated in Python 3: <a href="http://stackoverflow.com/a/23381153/770425">stackoverflow.com/a/23381153/770425</a></span>
<span class="comment-copy">This is incorrect since <a href="https://docs.python.org/3.7/reference/lexical_analysis.html#index-20" rel="nofollow noreferrer">3.6 introduced f-strings</a></span>
<span class="comment-copy">In case anyone was wondering: yes, you can combine this with say raw strings, like so <code>rf"foo is {bar}"</code>.</span>
<span class="comment-copy">That's an... odd way to pass in bar... Pretty neat though, makes it more closely follow the Ruby way.</span>
<span class="comment-copy">This seems like the best solution if you're working with an object. For example, if you are reporting an urllib2.HTTPError you can do <code>"HTTP error: {error.code} {error.msg}".format(**vars())</code> This doesn't work with <code>format(**locals())</code></span>
<span class="comment-copy">or older but still popular:    print "foo is %s" % str(bar)</span>
<span class="comment-copy">That's supposed to be deprecated by now, though I can't find the PEP.</span>
<span class="comment-copy">Not deprecated, just superseded.</span>
<span class="comment-copy"><a href="http://docs.python.org/release/3.0.1/whatsnew/3.0.html#pep-3101-a-new-approach-to-string-formatting" rel="nofollow noreferrer">I guess in Python 2 it's not</a>, but it was at least supposed to be deprecated by 3.1, which was released some time ago.</span>
<span class="comment-copy">But i guess it's very slow - unpacking a possibly big dict for the params.</span>
<span class="comment-copy">@warwaruk writing to std out is the limiting factor, printing a string takes 10 times longer than formatting it, furthermore locals() returns a reference so I think this method is pretty fast</span>
<span class="comment-copy">This is incorrect since 3.6. We now have <code>print(f"foo is #{bar}")</code></span>
