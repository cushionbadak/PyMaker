<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/unittest.html#unittest.TestCase.assertAlmostEqual">assertAlmostEqual(x, y)</a> method in <a href="http://docs.python.org/library/unittest.html">Python's unit testing framework</a> tests whether <code>x</code> and <code>y</code> are approximately equal assuming they are floats.</p>
<p>The problem with <code>assertAlmostEqual()</code> is that it only works on floats. I'm looking for a method like <code>assertAlmostEqual()</code> which works on lists of floats, sets of floats, dictionaries of floats, tuples of floats, lists of tuples of floats, sets of lists of floats, etc.</p>
<p>For instance, let <code>x = 0.1234567890</code>, <code>y = 0.1234567891</code>. <code>x</code> and <code>y</code> are almost equal because they agree on each and every digit except for the last one. Therefore <code>self.assertAlmostEqual(x, y)</code> is <code>True</code> because <code>assertAlmostEqual()</code> works for floats.</p>
<p>I'm looking for a more generic <code>assertAlmostEquals()</code> which also evaluates the following calls to <code>True</code>:</p>
<ul>
<li><code>self.assertAlmostEqual_generic([x, x, x], [y, y, y])</code>.</li>
<li><code>self.assertAlmostEqual_generic({1: x, 2: x, 3: x}, {1: y, 2: y, 3: y})</code>.</li>
<li><code>self.assertAlmostEqual_generic([(x,x)], [(y,y)])</code>.</li>
</ul>
<p>Is there such a method or do I have to implement it myself?</p>
<p><strong>Clarifications:</strong></p>
<ul>
<li><p><code>assertAlmostEquals()</code> has an optional parameter named <code>places</code> and the numbers are compared by computing the difference rounded to number of decimal <code>places</code>. By default <code>places=7</code>, hence <code>self.assertAlmostEqual(0.5, 0.4)</code> is False while <code>self.assertAlmostEqual(0.12345678, 0.12345679)</code> is True. My speculative <code>assertAlmostEqual_generic()</code> should have the same functionality.</p></li>
<li><p>Two lists are considered almost equal if they have almost equal numbers in exactly the same order. formally, <code>for i in range(n): self.assertAlmostEqual(list1[i], list2[i])</code>.</p></li>
<li><p>Similarly, two sets are considered almost equal if they can be converted to almost equal lists (by assigning an order to each set).</p></li>
<li><p>Similarly, two dictionaries are considered almost equal if the key set of each dictionary is almost equal to the key set of the other dictionary, and for each such almost equal key pair there's a corresponding almost equal value.</p></li>
<li><p>In general: I consider two collections almost equal if they're equal except for some corresponding floats which are just almost equal to each other. In other words, I would like to really compare objects but with a low (customized) precision when comparing floats along the way.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>if you don't mind using NumPy (which comes with your Python(x,y)), you may want to look at the <code>np.testing</code> module which defines, among others, a <code>assert_almost_equal</code> function.</p>
<p>The signature is <code>np.testing.assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)</code></p>
<pre><code>&gt;&gt;&gt; x = 1.000001
&gt;&gt;&gt; y = 1.000002
&gt;&gt;&gt; np.testing.assert_almost_equal(x, y)
AssertionError: 
Arrays are not almost equal to 7 decimals
ACTUAL: 1.000001
DESIRED: 1.000002
&gt;&gt;&gt; np.testing.assert_almost_equal(x, y, 5)
&gt;&gt;&gt; np.testing.assert_almost_equal([x, x, x], [y, y, y], 5)
&gt;&gt;&gt; np.testing.assert_almost_equal((x, x, x), (y, y, y), 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Here's how I've implemented a generic <code>is_almost_equal(first, second)</code> function</strong>:</p>
<p>First, duplicate the objects you need to compare (<code>first</code> and <code>second</code>), but don't make an exact copy: cut the insignificant decimal digits of any float you encounter inside the object.</p>
<p>Now that you have copies of <code>first</code> and <code>second</code> for which the insignificant decimal digits are gone, just compare <code>first</code> and <code>second</code> using the <code>==</code> operator.</p>
<p>Let's assume we have a <code>cut_insignificant_digits_recursively(obj, places)</code> function which duplicates <code>obj</code> but leaves only the <code>places</code> most significant decimal digits of each float in the original <code>obj</code>. Here's a working implementation of <code>is_almost_equals(first, second, places)</code>:</p>
<pre><code>from insignificant_digit_cutter import cut_insignificant_digits_recursively

def is_almost_equal(first, second, places):
    '''returns True if first and second equal. 
    returns true if first and second aren't equal but have exactly the same
    structure and values except for a bunch of floats which are just almost
    equal (floats are almost equal if they're equal when we consider only the
    [places] most significant digits of each).'''
    if first == second: return True
    cut_first = cut_insignificant_digits_recursively(first, places)
    cut_second = cut_insignificant_digits_recursively(second, places)
    return cut_first == cut_second
</code></pre>
<p>And here's a working implementation of <code>cut_insignificant_digits_recursively(obj, places)</code>:</p>
<pre><code>def cut_insignificant_digits(number, places):
    '''cut the least significant decimal digits of a number, 
    leave only [places] decimal digits'''
    if  type(number) != float: return number
    number_as_str = str(number)
    end_of_number = number_as_str.find('.')+places+1
    if end_of_number &gt; len(number_as_str): return number
    return float(number_as_str[:end_of_number])

def cut_insignificant_digits_lazy(iterable, places):
    for obj in iterable:
        yield cut_insignificant_digits_recursively(obj, places)

def cut_insignificant_digits_recursively(obj, places):
    '''return a copy of obj except that every float loses its least significant 
    decimal digits remaining only [places] decimal digits'''
    t = type(obj)
    if t == float: return cut_insignificant_digits(obj, places)
    if t in (list, tuple, set):
        return t(cut_insignificant_digits_lazy(obj, places))
    if t == dict:
        return {cut_insignificant_digits_recursively(key, places):
                cut_insignificant_digits_recursively(val, places)
                for key,val in obj.items()}
    return obj
</code></pre>
<p>The code and its unit tests are available here: <a href="https://github.com/snakile/approximate_comparator" rel="noreferrer">https://github.com/snakile/approximate_comparator</a>. I welcome any improvement and bug fix.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of python 3.5 you may compare using</p>
<pre><code>math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)
</code></pre>
<p>As described in <a href="https://www.python.org/dev/peps/pep-0485/" rel="noreferrer">pep-0485</a>.
The implementation should be equivalent to </p>
<pre><code>abs(a-b) &lt;= max( rel_tol * max(abs(a), abs(b)), abs_tol )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no such method, you'd have to do it yourself.</p>
<p>For lists and tuples the definition is obvious, but note that the other cases you mention aren't obvious, so it's no wonder such a function isn't provided.  For instance, is <code>{1.00001: 1.00002}</code> almost equal to <code>{1.00002: 1.00001}</code>?  Handling such cases requires making a choice about whether closeness depends on keys or values or both.  For sets you are unlikely to find a meaningful definition, since sets are unordered, so there is no notion of "corresponding" elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't mind using the <code>numpy</code> package then <code>numpy.testing</code> has the <code>assert_array_almost_equal</code> method. </p>
<p>This works for <code>array_like</code> objects, so it is fine for arrays, lists and tuples of floats, but does it not work for sets and dictionaries.</p>
<p>The documentation is <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_almost_equal.html" rel="nofollow">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may have to implement it yourself, while its true that list and sets can be iterated the same way, dictionaries are a different story, you iterate their keys not values, and the third example seems a bit ambiguous to me, do you mean to compare each value within the set, or each value from each set.</p>
<p>heres a simple code snippet.</p>
<pre><code>def almost_equal(value_1, value_2, accuracy = 10**-8):
    return abs(value_1 - value_2) &lt; accuracy

x = [1,2,3,4]
y = [1,2,4,5]
assert all(almost_equal(*values) for values in zip(x, y))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative approach is to convert your data into a comparable form by e.g turning each float into a string with fixed precision.</p>
<pre><code>def comparable(data):
    """Converts `data` to a comparable structure by converting any floats to a string with fixed precision."""
    if isinstance(data, (int, str)):
        return data
    if isinstance(data, float):
        return '{:.4f}'.format(data)
    if isinstance(data, list):
        return [comparable(el) for el in data]
    if isinstance(data, tuple):
        return tuple([comparable(el) for el in data])
    if isinstance(data, dict):
        return {k: comparable(v) for k, v in data.items()}
</code></pre>
<p>Then you can:</p>
<pre><code>self.assertEquals(comparable(value1), comparable(value2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>None of these answers work for me. The following code should work for python collections, classes, dataclasses, and namedtuples. I might have forgotten something, but so far this works for me.</p>
<pre><code>import unittest
from collections import namedtuple, OrderedDict
from dataclasses import dataclass
from typing import Any


def are_almost_equal(o1: Any, o2: Any, max_abs_ratio_diff: float, max_abs_diff: float) -&gt; bool:
    """
    Compares two objects by recursively walking them trough. Equality is as usual except for floats.
    Floats are compared according to the two measures defined below.

    :param o1: The first object.
    :param o2: The second object.
    :param max_abs_ratio_diff: The maximum allowed absolute value of the difference.
    `abs(1 - (o1 / o2)` and vice-versa if o2 == 0.0. Ignored if &lt; 0.
    :param max_abs_diff: The maximum allowed absolute difference `abs(o1 - o2)`. Ignored if &lt; 0.
    :return: Whether the two objects are almost equal.
    """
    if type(o1) != type(o2):
        return False

    composite_type_passed = False

    if hasattr(o1, '__slots__'):
        if len(o1.__slots__) != len(o2.__slots__):
            return False
        if any(not are_almost_equal(getattr(o1, s1), getattr(o2, s2),
                                    max_abs_ratio_diff, max_abs_diff)
            for s1, s2 in zip(sorted(o1.__slots__), sorted(o2.__slots__))):
            return False
        else:
            composite_type_passed = True

    if hasattr(o1, '__dict__'):
        if len(o1.__dict__) != len(o2.__dict__):
            return False
        if any(not are_almost_equal(k1, k2, max_abs_ratio_diff, max_abs_diff)
            or not are_almost_equal(v1, v2, max_abs_ratio_diff, max_abs_diff)
            for ((k1, v1), (k2, v2))
            in zip(sorted(o1.__dict__.items()), sorted(o2.__dict__.items()))
            if not k1.startswith('__')):  # avoid infinite loops
            return False
        else:
            composite_type_passed = True

    if isinstance(o1, dict):
        if len(o1) != len(o2):
            return False
        if any(not are_almost_equal(k1, k2, max_abs_ratio_diff, max_abs_diff)
            or not are_almost_equal(v1, v2, max_abs_ratio_diff, max_abs_diff)
            for ((k1, v1), (k2, v2)) in zip(sorted(o1.items()), sorted(o2.items()))):
            return False

    elif any(issubclass(o1.__class__, c) for c in (list, tuple, set)):
        if len(o1) != len(o2):
            return False
        if any(not are_almost_equal(v1, v2, max_abs_ratio_diff, max_abs_diff)
            for v1, v2 in zip(o1, o2)):
            return False

    elif isinstance(o1, float):
        if o1 == o2:
            return True
        else:
            if max_abs_ratio_diff &gt; 0:  # if max_abs_ratio_diff &lt; 0, max_abs_ratio_diff is ignored
                if o2 != 0:
                    if abs(1.0 - (o1 / o2)) &gt; max_abs_ratio_diff:
                        return False
                else:  # if both == 0, we already returned True
                    if abs(1.0 - (o2 / o1)) &gt; max_abs_ratio_diff:
                        return False
            if 0 &lt; max_abs_diff &lt; abs(o1 - o2):  # if max_abs_diff &lt; 0, max_abs_diff is ignored
                return False
            return True

    else:
        if not composite_type_passed:
            return o1 == o2

    return True


class EqualityTest(unittest.TestCase):

    def test_floats(self) -&gt; None:
        o1 = ('hi', 3, 3.4)
        o2 = ('hi', 3, 3.400001)
        self.assertTrue(are_almost_equal(o1, o2, 0.0001, 0.0001))
        self.assertFalse(are_almost_equal(o1, o2, 0.00000001, 0.00000001))

    def test_ratio_only(self):
        o1 = ['hey', 10000, 123.12]
        o2 = ['hey', 10000, 123.80]
        self.assertTrue(are_almost_equal(o1, o2, 0.01, -1))
        self.assertFalse(are_almost_equal(o1, o2, 0.001, -1))

    def test_diff_only(self):
        o1 = ['hey', 10000, 1234567890.12]
        o2 = ['hey', 10000, 1234567890.80]
        self.assertTrue(are_almost_equal(o1, o2, -1, 1))
        self.assertFalse(are_almost_equal(o1, o2, -1, 0.1))

    def test_both_ignored(self):
        o1 = ['hey', 10000, 1234567890.12]
        o2 = ['hey', 10000, 0.80]
        o3 = ['hi', 10000, 0.80]
        self.assertTrue(are_almost_equal(o1, o2, -1, -1))
        self.assertFalse(are_almost_equal(o1, o3, -1, -1))

    def test_different_lengths(self):
        o1 = ['hey', 1234567890.12, 10000]
        o2 = ['hey', 1234567890.80]
        self.assertFalse(are_almost_equal(o1, o2, 1, 1))

    def test_classes(self):
        class A:
            d = 12.3

            def __init__(self, a, b, c):
                self.a = a
                self.b = b
                self.c = c

        o1 = A(2.34, 'str', {1: 'hey', 345.23: [123, 'hi', 890.12]})
        o2 = A(2.34, 'str', {1: 'hey', 345.231: [123, 'hi', 890.121]})
        self.assertTrue(are_almost_equal(o1, o2, 0.1, 0.1))
        self.assertFalse(are_almost_equal(o1, o2, 0.0001, 0.0001))

        o2.hello = 'hello'
        self.assertFalse(are_almost_equal(o1, o2, -1, -1))

    def test_namedtuples(self):
        B = namedtuple('B', ['x', 'y'])
        o1 = B(3.3, 4.4)
        o2 = B(3.4, 4.5)
        self.assertTrue(are_almost_equal(o1, o2, 0.2, 0.2))
        self.assertFalse(are_almost_equal(o1, o2, 0.001, 0.001))

    def test_classes_with_slots(self):
        class C(object):
            __slots__ = ['a', 'b']

            def __init__(self, a, b):
                self.a = a
                self.b = b

        o1 = C(3.3, 4.4)
        o2 = C(3.4, 4.5)
        self.assertTrue(are_almost_equal(o1, o2, 0.3, 0.3))
        self.assertFalse(are_almost_equal(o1, o2, -1, 0.01))

    def test_dataclasses(self):
        @dataclass
        class D:
            s: str
            i: int
            f: float

        @dataclass
        class E:
            f2: float
            f4: str
            d: D

        o1 = E(12.3, 'hi', D('hello', 34, 20.01))
        o2 = E(12.1, 'hi', D('hello', 34, 20.0))
        self.assertTrue(are_almost_equal(o1, o2, -1, 0.4))
        self.assertFalse(are_almost_equal(o1, o2, -1, 0.001))

        o3 = E(12.1, 'hi', D('ciao', 34, 20.0))
        self.assertFalse(are_almost_equal(o2, o3, -1, -1))

    def test_ordereddict(self):
        o1 = OrderedDict({1: 'hey', 345.23: [123, 'hi', 890.12]})
        o2 = OrderedDict({1: 'hey', 345.23: [123, 'hi', 890.0]})
        self.assertTrue(are_almost_equal(o1, o2, 0.01, -1))
        self.assertFalse(are_almost_equal(o1, o2, 0.0001, -1))
</code></pre>
</div>
<span class="comment-copy">What's the point of using <code>float</code> keys in the dictionary? Since you can't be sure to get precisely the same float, you'll never find your items using lookup. And if you're not using lookup, why not just use a list of tuples instead of dictionary?  The same argument applies to sets.</span>
<span class="comment-copy">That's close, but <code>numpy.testing</code> almost-equal methods work only on numbers, arrays, tuples and lists. They do not work on dictionaries, sets and collections of collections.</span>
<span class="comment-copy">Indeed, but that's a start. Besides, you have access to the source code that you can modify to allow the comparison of dictionaries, collections and so forth. <code>np.testing.assert_equal</code> does recognize dictionaries as arguments, for example (even if the comparison is done by a <code>==</code> which won't work for you).</span>
<span class="comment-copy">Of course, you'll still run into troubles when comparing sets, as @BrenBarn mentioned.</span>
<span class="comment-copy">Instead of comparing floats, you're comparing strings? OK... But then, wouldn't it be easier to set a common format? Like <code>fmt="{{0:{0}f}}".format(decimals)</code>, and use this <code>fmt</code> format to "stringify" your floats?</span>
<span class="comment-copy">This looks nice, but a small point: <code>places</code> gives the number of decimal places, not the number of significant figures.  For example, comparing <code>1024.123</code> and <code>1023.999</code> to 3 significant should return equal, but to 3 decimal places they're not.</span>
<span class="comment-copy">@pir, the license is indeed undefined. See snalile's answer in <a href="https://github.com/snakile/approximate_comparator/issues/1" rel="nofollow noreferrer">this issue</a> in which he says he doesn't have time to choose/add a license, but grants use/modification permissions. Thanks for sharing this, BTW.</span>
<span class="comment-copy">@RodneyRichardson, yes this is decimal places, like in <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual" rel="nofollow noreferrer">assertAlmostEqual</a>: "Note that these methods round the values to the given number of decimal places (i.e. like the round() function) and not significant digits."</span>
<span class="comment-copy">@Jérôme, thanks for the comment. I've just added an MIT license.</span>
<span class="comment-copy">How does this helps compare containers with floats, which the question was asking about?</span>
<span class="comment-copy"><code>{1.00001: 1.00002]</code> typo?</span>
<span class="comment-copy">Fixed it, thanks.</span>
<span class="comment-copy">BrenBarn: I've added clarifications to the question. The answer to your question is that <code>{1.00001: 1.00002}</code> almost equals <code>{1.00002: 1.00001}</code> if and only if 1.00001 almost equals 1.00002. By default they do not almost equal (because the default precision is 7 decimal places) but for a small enough value for <code>places</code> they do almost equal.</span>
<span class="comment-copy">@BrenBarn: IMO, the use of keys of type <code>float</code> in dict should be discouraged (and maybe even disallowed) for obvious reasons. Approximate equality of dict should be based on values only; the test framework need not worry about the incorrect usage of <code>float</code> for keys.  For sets, they can be sorted before comparison, and sorted lists can be compared.</span>
<span class="comment-copy">Thanks, the solution is correct for lists and tuples but not for other types of collections (or nested collections). See the clarifications I've added to the question. I hope my intention is clear now. Two sets are almost equal if they would have been considered equal in a world where numbers aren't measured very precisely.</span>
