<div class="post-text" itemprop="text">
<p>I'm trying to create a Python property where in-place adding is handled by a different method than retrieving the value, adding another value and reassigning. So, for a property <code>x</code> on an object <code>o</code>,</p>
<pre><code>o.x += 5
</code></pre>
<p>should work differently than</p>
<pre><code>o.x = o.x + 5
</code></pre>
<p>The value of <code>o.x</code> should be the same in the end, so as not to confuse people's expectations, but I want to make the in-place add more efficient. (In reality the operation takes a lot more time than simple addition.)</p>
<p>My first idea was to define, in the class,</p>
<pre><code>x = property(etc. etc.)
x.__iadd__ = my_iadd
</code></pre>
<p>But this raises an AttributeError, presumably because <code>property</code> implements <code>__slots__</code>?</p>
<p>My next attempt uses a descriptor object:</p>
<pre><code>class IAddProp(object):
    def __init__(self):
        self._val = 5

    def __get__(self, obj, type=None):
        return self._val

    def __set__(self, obj, value):
        self._val = value

    def __iadd__(self, value):
        print '__iadd__!'
        self._val += value
        return self

class TestObj(object):
    x = IAddProp()
    #x.__iadd__ = IAddProp.__iadd__  # doesn't help

&gt;&gt;&gt; o = TestObj()
&gt;&gt;&gt; print o.x
5
&gt;&gt;&gt; o.x = 10
&gt;&gt;&gt; print o.x
10
&gt;&gt;&gt; o.x += 5  # '__iadd__!' not printed
&gt;&gt;&gt; print o.x
15
</code></pre>
<p>As you can see, the special <code>__iadd__</code> method is not called. I'm having trouble understanding why this is, although I surmise that the object's <code>__getattr__</code> is somehow bypassing it.</p>
<p>How can I do this? Am I not getting the point of descriptors? Do I need a metaclass?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__iadd__</code> will only be looked for on the value returned from <code>__get__</code>.  You need to make <code>__get__</code> (or the property getter) return an object (or a proxy object) with <code>__iadd__</code>.</p>
<pre><code>@property
def x(self):
    proxy = IProxy(self._x)
    proxy.parent = self
    return proxy

class IProxy(int, object):
    def __iadd__(self, val):
        self.parent.iadd_x(val)
        return self.parent.x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>+=</code> operator in the line</p>
<pre><code>o.x += 5
</code></pre>
<p>is translated to</p>
<pre><code>o.x = o.x.__iadd__(5)
</code></pre>
<p>The attribute lookup on the right-hand side is translated to</p>
<pre><code>o.x = IAddProp.__get__(TestObj2.x, o, TestObj2).__iadd__(5)
</code></pre>
<p>As you can see, <code>__iadd__()</code> is called on the <em>return value</em> of the attribute lookup, so you need to implement <code>__iadd__()</code> on the returned object.</p>
</div>
<div class="post-text" itemprop="text">
<p>To inspire you, here's a less-than-ideal solution which is the best I've managed to come up with so far:</p>
<pre><code>class IAddObj(object):
    def __init__(self):
        self._val = 5

    def __str__(self):
        return str(self._val)

    def __iadd__(self, value):
        print '__iadd__!'
        self._val += value
        return self._val

class TestObj2(object):
    def __init__(self):
        self._x = IAddObj()

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x._val = value

&gt;&gt;&gt; o = TestObj2()
&gt;&gt;&gt; print o.x
5
&gt;&gt;&gt; o.x = 10
&gt;&gt;&gt; print o.x
10
&gt;&gt;&gt; o.x += 5
__iadd__!
&gt;&gt;&gt; print o.x
15
&gt;&gt;&gt; print o.x + 5  # doesn't work unless __add__ is also implemented
TypeError: unsupported operand type(s) for +: 'IAddObj' and 'int'
</code></pre>
<p>The big disadvantage being, that you have to implement the full complement of numerical magic methods on <code>IAddObj</code> if you want the property to behave anything like a number. Having <code>IAddObj</code> inherit from <code>int</code> doesn't seem to let it inherit the operators, either.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not something like the following example. Basically the idea is to let the Bar class ensure the stored value for property x is always a Foo object.</p>
<pre><code>class Foo(object):
    def __init__(self, val=0):
        print 'init'
        self._val = val

    def __add__(self, x):
        print 'add'
        return Foo(self._val + x)

    def __iadd__(self, x):
        print 'iadd'
        self._val += x
        return self

    def __unicode__(self):
        return unicode(self._val)

class Bar(object):
    def __init__(self):
        self._x = Foo()

    def getx(self):
        print 'getx'
        return self._x

    def setx(self, val):
        if not isinstance(val, Foo):
            val = Foo(val)
        print 'setx'
        self._x = val

    x = property(getx, setx)

obj = Bar()
print unicode(obj.x)
obj.x += 5
obj.x = obj.x + 6
print unicode(obj.x)
</code></pre>
<p>EDIT: Extended example to show how to use it as a property. I first misunderstood the problem slightly. </p>
</div>
<span class="comment-copy">I'm a bit confused by this code snippet. Shouldn't the property getter return something?</span>
<span class="comment-copy">@senderle oh yeah, oops.  Got a bit confusing with the problems of subclassing <code>int</code>.  Thanks!</span>
<span class="comment-copy">This is not correct.  Either <code>o.x.__iadd__(5)</code> is called, or if <code>o.x</code> does not have and <code>__iadd__</code> method, <code>o.x = o.x + 5</code> is called.  That is, <code>o.x = o.x.__iadd__(5)</code> is never used, because <code>__iadd__</code> does not return anything.</span>
<span class="comment-copy">@MarkLodato Please verify your claims before shouting them out. It is exactly as weitten in the answer. Try it out.</span>
<span class="comment-copy">@MarkLodato Look here: <a href="http://codepad.org/wbURpQJT" rel="nofollow noreferrer">codepad.org/wbURpQJT</a> It shows how <code>__iadd__()</code> is called when doing <code>+=</code> (ability to assing somethin completely new to the left hand name), and it shows as well what <code>list.__iadd__()</code> returns: its <code>self</code>.</span>
<span class="comment-copy">@glglgl, you're right.  Sorry about that.  Reference: <a href="http://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">You say "Having IAddObj inherit from <code>int</code> doesn't seem to let it inherit the operators, either." That's not quite true. The problem is that if you don't override all the other operators, then the type of <code>IAddObj(5) + 5</code> is <code>int</code>, not <code>IAddObj</code>, because ints are immutable, and all operations always return new ints. However, there is indeed a way around this using metaclasses. <a href="http://stackoverflow.com/q/10771010/577088">See this answer</a>.</span>
<span class="comment-copy">However, thinking about it more, I believe that ecatmur and muksie offer solutions that will be less complex and more suited to your actual goals.</span>
