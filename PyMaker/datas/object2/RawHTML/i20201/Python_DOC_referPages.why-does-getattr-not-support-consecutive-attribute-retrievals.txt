<div class="post-text" itemprop="text">
<pre><code>class A(): pass

a = A()
b = A()

a.b = b
b.c = 1

a.b     # this is b
getattr(a, "b") # so is this

a.b.c   # this is 1   
getattr(a, "b.c") # this raises an AttributeError
</code></pre>
<p>It seemed very natural to me to assume the latter. I'm sure there is a good reason for this. What is it? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can't put a period in the getattr function because getattr is like accessing the dictionary lookup of the object (but is a little bit more complex than that, due to subclassing and other Python implementation details).</p>
<p>If you use the 'dir' function on a, you'll see the dictionary keys that correspond to your object's attributes. In this case, the string "b.c" <em>isn't</em> in the set of dictionary keys.</p>
<p>The only way to do this with <code>getattr</code> is to nest calls:</p>
<pre><code>getattr(getattr(a, "b"), "c")
</code></pre>
<p>Luckily, the standard library has a better solution!</p>
<pre><code>import operator
operator.attrgetter("b.c")(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/functions.html#reduce">Python's built-in <code>reduce</code> function</a> enables the functionality you're looking for. Here's a simple little helper function that will get the job done:</p>
<pre><code>class NoDefaultProvided(object):
    pass

def getattrd(obj, name, default=NoDefaultProvided):
    """
    Same as getattr(), but allows dot notation lookup
    Discussed in:
    http://stackoverflow.com/questions/11975781
    """

    try:
        return reduce(getattr, name.split("."), obj)
    except AttributeError, e:
        if default != NoDefaultProvided:
            return default
        raise
</code></pre>
<p>Test proof;</p>
<pre><code>&gt;&gt;&gt; getattrd(int, 'a')
AttributeError: type object 'int' has no attribute 'a'

&gt;&gt;&gt; getattr(int, 'a')
AttributeError: type object 'int' has no attribute 'a'

&gt;&gt;&gt; getattrd(int, 'a', None)
None

&gt;&gt;&gt; getattr(int, 'a', None)
None

&gt;&gt;&gt; getattrd(int, 'a', None)
None

&gt;&gt;&gt; getattrd(int, '__class__.__name__')
type

&gt;&gt;&gt; getattrd(int, '__class__')
&lt;type 'type'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think your confusion arises from the fact that straight dot notation (ex <code>a.b.c</code>) accesses the same parameters as <code>getattr()</code>, but the parsing logic is different.  While they both essentially key in to an object's <code>__dict__</code> attribute, <code>getattr()</code> is not bound to the more stringent requirements on dot-accessible attributes.  For instance</p>
<pre><code>setattr(foo, 'Big fat ugly string.  But you can hash it.', 2)
</code></pre>
<p>Is valid, since that string just becomes a hash key in <code>foo.__dict__</code>, but</p>
<pre><code>foo.Big fat ugly string.  But you can hash it. = 2
</code></pre>
<p>and</p>
<pre><code>foo.'Big fat ugly string.  But you can hash it.' = 2
</code></pre>
<p>are syntax errors because now you are asking the interpreter to parse these things as raw code, and that doesn't work.</p>
<p>The flip side of this is that while <code>foo.b.c</code> is equivalent to <code>foo.__dict__['b'].__dict__['c']</code>, <code>getattr(foo, 'b.c')</code> is equivalent to <code>foo.__dict__['b.c']</code>.  That's why <code>getattr</code> doesn't work as you are expecting.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>getattr</code> doesn't work that way. <code>getattr</code> gets attribute of a given object (first argument) with a given name (second argument). So your code:</p>
<pre><code>getattr(a, "b.c") # this raises an AttributeError
</code></pre>
<p>means: <em>Access "b.c" attribute of object referenced by "a"</em>. Obviously your object doesn't have attribute called "<code>b.c</code>".</p>
<p>To get "c" attribute you must use two <code>getattr</code> calls:</p>
<pre><code>getattr(getattr(a, "b"), "c")
</code></pre>
<p>Let's unwrap it for better understanding:</p>
<pre><code>b = getattr(a, "b")
c = getattr(b, "c")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the most straight forward way to achieve what you want is to use <a href="https://docs.python.org/2/library/operator.html#operator.attrgetter" rel="nofollow"><code>operator.attrgetter</code></a>.</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; class B():
...   c = 'foo'
... 
&gt;&gt;&gt; class A():
...   b = B()
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; operator.attrgetter('b.c')(a)
'foo'
</code></pre>
<p>If the attribute doesn't exist then you'll get an <code>AttributeError</code></p>
<pre><code>&gt;&gt;&gt; operator.attrgetter('b.d')(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: B instance has no attribute 'd'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What should return <code>getattr('a.b', {'a': None}, 'default-value'}</code>? Should it raise <code>AttributeError</code> or just return <code>'default-value'</code>? That's why complex keys if introduced in <code>getattr</code> would make it obscure to use.</p>
<p>So, it's more natural to view <code>getattr(..)</code> function as <code>get</code> method of dictionary of object attributes.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can call the multiple getattr without calling a function within function by splitting the dot operators and performing a getattr() for each dot operator</p>
<pre><code>def multi_getattr(self,obj, attr, default = None):
          attributes = attr.split(".")
          for i in attributes:
              try:
                  obj = getattr(obj, i)
              except AttributeError:
                  if default:
                      return default
                  else:
                      raise
          return obj
</code></pre>
<p>If suppose you wish to call a.b.c.d you can do it via a.multi_getattr('b.c.d'). This will generalise the operation without worrying about the count of dot operation one has in the string.</p>
</div>
<span class="comment-copy">Now do this: <code>setattr(a, 'b.c', 2)</code>. What should <code>getattr(a, 'b.c')</code> return now? What if there was no <code>c</code> on <code>b</code> before? You are allowed to use a <code>.</code> in attribute names, so you can't expect <code>getattr</code> to be able to traverse over objects like this.</span>
<span class="comment-copy">@MartijnPieters Sadly, it's impossible to accept your great comment as solution/answer and I almost missed it. I will exted that. <code>get/setattr</code> are mapped to magic methods which have single purpose as @ThaneBrimhall said it's the dictionary lookup. For me this is JavaScript related thing where <code>.</code> operator is just syntax sugar for <code>obj['@ttr1but3']</code> (<code>obj</code> doesn't have to be a mapping). Python' equivalent of this is <code>getattr</code>. Read about <code>__dict__</code> and try to override <code>__getattribute__</code> to grasp it yourself.</span>
<span class="comment-copy">@JCode: <code>getattr()</code> and <code>setattr()</code> are <b>not</b> mapped to magic methods, not directly. The <code>__getattribute__</code>, <code>__getattr__</code> and <code>__setattr__</code> special methods are <i>hooks</i> that, if defined, Python will call for attribute access. <code>getattr()</code> and <code>setattr()</code> are translations of the <code>object.attr</code> expression and <code>object.attr = ...</code> assignment statements that incidentally let you go beyond Python identifiers in the attribute name. And not all Python objects have a <code>__dict__</code> mapping either, so to say it's a straightforward dictionary lookup is also too simplistic.</span>
<span class="comment-copy">@MartijnPieters Thanks for clarification! I indeed went overboard by forgetting about <code>__slots__</code>. Mentioning magic methods as <i>hooks</i> really improved my understanding.</span>
<span class="comment-copy">The OP has realised that... I think he's asking why. Not an unreasonable question given that operator.attrgetter('a.b')(obj) <i>will</i> resolve dotted notation</span>
<span class="comment-copy">Thanks for pointing that out. Clarified my response to hopefully explain better what I meant.</span>
<span class="comment-copy">This is a very good and simple solution to a troubling problem.  The answers below are not as concise.  This answer does not try to implement something that Python already did, which makes it good.</span>
<span class="comment-copy"><b>Note</b>: <code>getattr()</code> is <b><i>not just</i></b> as simple as a direct dictionary lookup! Attribute lookup is a bit more complex than this; attribute lookup also allows for <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor object binding</a>, for example, and there can be a MRO traversal of a class hierarchy (involving multiple dictionaries).</span>
<span class="comment-copy">@MartijnPieters Good point! I'll update the answer to explain the nuance.</span>
<span class="comment-copy">This should be the accepted answer imho, the answer from Thane is next to useless.</span>
<span class="comment-copy">I'm all for a good answer, and this gets the job done. But this answer doesn't give the OP what he was looking for - the <i>reason why</i> it doesn't work.</span>
<span class="comment-copy">The accepted answer doesn't solve the original problem. Assuming that you are only given the string <code>'b.c'</code>, this is the only answer that solves the problem.</span>
<span class="comment-copy">Once again, I'll just say that the point of the question is <i>"why?"</i>, not <i>"how can I?"</i>. This answer doesn't answer the original question. In addition, this is a very long-winded solution that could otherwise have been done using the standard library: <code>operator.attrgetter('a.b')(obj)</code></span>
<span class="comment-copy">I found Thane's answer to be extremely useful.  It uses a function from the standard library.  And in Python 3, you have to import <code>reduce</code> anyway.</span>
<span class="comment-copy">Gosh, I see this happening in an obfuscated code contest...</span>
<span class="comment-copy">I find this answer both very informative and on point. +1</span>
