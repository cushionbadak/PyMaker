<div class="post-text" itemprop="text">
<pre><code>import os

parent_pid = os.getpid()
print "[parent] starts PID: %d" % (parent_pid, )

forked_pid = os.fork()
if forked_pid == 0:
    print "[child] child process can't use os.fork() PID, since it's %d" % (forked_pid, )
    print "[child] but it can reevaluate os.getpid() to get it's own PID: %d" % (os.getpid(), )
else:
    print "[parent] parent process have created child with PID: %d" % (forked_pid, )
</code></pre>
<p><a href="https://i.stack.imgur.com/yqK8G.png" rel="nofollow noreferrer"><img alt="output" src="https://i.stack.imgur.com/yqK8G.png"/></a></p>
<p>If I don't put breakpoint at line 6(<code>forked_pid = os.fork()</code>) - I get log from child process but if I debug - forked_pid is never equal to 0.</p>
<p>Reason I started looking into this.</p>
<pre><code>p = Process(target=self.run_threaded_io, args=(additional_threads,))
p.start()
p.join()
</code></pre>
<p>I had this code, where log messages from <code>run_threaded_io</code> would never print - and that's because </p>
<pre><code>class Popen(object):

    def __init__(self, process_obj):
        sys.stdout.flush()
        sys.stderr.flush()
        self.returncode = None

        self.pid = os.fork()
        if self.pid == 0:
            if 'random' in sys.modules:
                import random
                random.seed()
            code = process_obj._bootstrap()
            sys.stdout.flush()
            sys.stderr.flush()
            os._exit(code)
</code></pre>
<p>if pid is not 0 - <code>process_obj._bootstrap()</code> this never happens - which was internally going to call <code>run</code> on <code>target</code> i.e. <code>run_threaded_io</code> and join on main process (<code>p.join()</code>) never completes. and I was running into timeout.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this case, the parent process doesn't wait for child execution. So the parent will execute completely and exit without showing any result of the child execution.
You can use <code>os.wait()</code> for waiting for the child to execute completely.</p>
</div>
<span class="comment-copy">What happens if you run this from the command line (ie not through pycharm)?</span>
<span class="comment-copy">Also, please include the code in the question body, not as a screenshot</span>
<span class="comment-copy">If i don't debug even through pycharm i.e. let it run - I get logs from child process i.e forked_pid==0 . But only if i debug, I don't enter that else block.</span>
<span class="comment-copy">tried doing that it waits indefinitely and code never completes.</span>
