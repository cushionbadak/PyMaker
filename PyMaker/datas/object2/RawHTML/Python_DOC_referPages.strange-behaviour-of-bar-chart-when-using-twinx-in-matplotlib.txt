<div class="post-text" itemprop="text">
<p>I have been battling this for too long, to the point that I'm pretty sure I don't understand the implementation of <code>twinx</code> in matplotlib</p>
<p>ok I have some code </p>
<pre><code>import matplotlib.pyplot as plt

data1 = [5, 6, 6, 7]
err1 = [1, 1, 1, 1]
data2 = [0.5, 0.6]
err2 = [0.01, 0.01]

label1 = ['var1', 'var2', 'var3', 'var4']
label2 = ['var5', 'var6']
</code></pre>
<p>If I just want to plot data 1 everything is fine.</p>
<pre><code>fig, ax1 = plt.subplots()
ax1.bar(label1, data1, yerr=err1, color='red')
plt.show()
</code></pre>
<p>This gives me a pretty chart 
<a href="https://i.stack.imgur.com/xiKuF.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/xiKuF.png"/></a></p>
<p>If I want to add data 2 onto a second axis I lose columns and the order is also odd.</p>
<pre><code>ax1.bar(label1, data1, yerr=err1, color='red')
ax2 = ax1.twinx()
ax2.bar(label2, data2, yerr=err2, color='blue')
plt.show()
</code></pre>
<p>Does not give me six columns but only 4 with two of the data1 columns now missing?</p>
<p><a href="https://i.stack.imgur.com/QP8pH.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/QP8pH.png"/></a></p>
<p>Obviously Im 100% sure its my fault, but please someone put me out of this misery...</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that your bars are overlapping and therefore you see two less bars. The solution is to use well-defined x-values for positioning your bars and then after you have plotted on twin axis, assign the x-tick labels.</p>
<pre><code>import matplotlib.pyplot as plt

data1 = [5, 6, 6, 7]
err1 = [1, 1, 1, 1]
data2 = [0.5, 0.6]
err2 = [0.01, 0.01]

label1 = ['var1', 'var2', 'var3', 'var4']
label2 = ['var5', 'var6']

fig, ax1 = plt.subplots()
ax1.bar(range(len(label1)), data1, yerr=err1, color='red')

ax2 = ax1.twinx()
ax2.bar(range(4,6), data2, yerr=err2, color='blue')
ax2.set_xticks(range(6))
ax2.set_xticklabels(label1+label2)
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/VIeHE.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/VIeHE.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also do:</p>
<pre class="lang-py prettyprint-override"><code>label = ['var1', 'var2', 'var3', 'var4', 'var5', 'var6']
data1 = [5, 6, 6, 7, np.NaN, np.NaN]
data2 = [np.NaN, np.NaN, np.NaN, np.NaN, 0.5, 0.6]
</code></pre>
<p>The issue here is that a matplotlib axes converts to integers: 'var1'-&gt;1, 'var2'-&gt;2 etc, and <code>ax2</code> is a new axes so 'var4'-&gt;1, 'var5'-&gt;2 and you get the overlap.  Making your categories the same between the twinned axes clears this confusion up.</p>
</div>
<span class="comment-copy">Excellent - In the docs, I interpreted the `the x coordinates of the bars' as referring to the labels - which works with a single plot but clearly not with two axes.</span>
<span class="comment-copy">@nick.sculthorpe: You don't need to pass <code>range(4)</code> etc. while plotting on single axis. There you can do as you did already. But for twin axis, you want to plot the blue bars successively at x=4 and 5. Therefore you need to use 0, 1, 2, 3 for the left y-axis</span>
<span class="comment-copy">Thanks for the explanation - @Bazingaa explained how to fix it, but I stil found it odd that Matplotlib would add a right hand axis but then add the columns to the left hand side.  At least the underlying mechanics now make some kind of sense.</span>
<span class="comment-copy">Those two axes don't really know much about each other, except the x-limits they share.  Its possible that an improvement would be that they share "converters" (i.e. the thing that translates from "category" to integers), but that is a bit of complexity that hasn't been tried yet.</span>
