<div class="post-text" itemprop="text">
<p>What I have is:</p>
<pre><code>from lxml import etree
myscript = "if(0 &lt; 1){alert(\"Hello World!\");}"
html = etree.fromstring("&lt;script&gt;&lt;/script&gt;")

for element in html.findall('//script'):
    element.text = myscript

result = etree.tostring(html)
</code></pre>
<p>What I get is:</p>
<pre><code>&gt;&gt;&gt; result
'&lt;script&gt;if(0 &amp;lt; 1){alert("Hello World!");}&lt;/script&gt;'
</code></pre>
<p>What I want is <strong>unescaped</strong>  JavaScript:</p>
<pre><code>&gt;&gt;&gt; result
'&lt;script&gt;if(0 &lt; 1){alert("Hello World!");}&lt;/script&gt;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason why your approach fails is because you're trying to change the "text" content of the element, whereas you need to change/insert/append the <strong>Element</strong> of its own, see this sample:</p>
<pre><code>In [1]: from lxml import html

In [2]: myscript = "&lt;script&gt;if(0 &lt; 1){alert(\"Hello World!\");}&lt;/script&gt;"

In [3]: template = html.fromstring("&lt;script&gt;&lt;/script&gt;")

# just a quick hack to get the &lt;script&gt; element without &lt;html&gt; &lt;head&gt;
In [4]: script_element = html.fromstring(myscript).xpath("//script")[0]

# insert new element then remove the old one
In [10]: for element in template.xpath("//script"):
   ....:     element.getparent().insert(0, script_element)
   ....:     element.getparent().remove(element)
   ....:

In [11]: print html.tostring(template)
&lt;html&gt;&lt;head&gt;&lt;script&gt;if(0 &lt; 1){alert("Hello World!");}&lt;/script&gt;&lt;/head&gt;&lt;/html&gt;
</code></pre>
<p>So yes, you can still technically use lxml to insert <strong></strong> element.
And I suggest using <code>lxml.html</code> over <code>etree</code> as <code>html</code> is more friendly regarding to html elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can’t. <code>lxml.etree</code> and <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow">ElementTree</a> are XML parsers, so whatever you want to parse or create with them has to be valid XML. And an unescaped <code>&lt;</code> inside some node text is not valid XML. It’s valid HTML but not valid XML.</p>
<p>That’s why in XHTML, you usually had to add CDATA blocks inside <code>&lt;script&gt;</code> tags, so you could put <em>whatever</em> in there without having to worry about valid XML structure.</p>
<p>But in your case, you just want to produce HTML, and for that, you should use an HTML parser. For example <a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow">BeautifulSoup</a>:</p>
<pre><code>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('&lt;script&gt;&lt;/script&gt;')
&gt;&gt;&gt; soup.find('script').string = 'if(0 &lt; 1){alert("Hello World!");}'
&gt;&gt;&gt; str(soup)
'&lt;script&gt;if(0 &lt; 1){alert("Hello World!");}&lt;/script&gt;'
</code></pre>
</div>
<span class="comment-copy">not being impolite but I believe technically you <i>can</i> use <code>lxml</code> to parse the &lt;script&gt; element, it's the method OP using is wrong -- trying to change the text than element itself.</span>
<span class="comment-copy">@Anzel You’re using an HTML parser yourself in your answer… And you can easily confirm that you cannot handle the desired output text with an XML parser by just trying to parse the output text.</span>
<span class="comment-copy">OP has never mentioned not to use HTML parser. The main question is around how to insert JS into the element. Simply put, it's doable by replacing the element on its own. Because normally you will not receive a script tag in XML file, so OP using etree is also inappropriated</span>
<span class="comment-copy">@Anzel Please read my answer? It essentially says “you can’t with an XML parser, use an HTML parser”, so I <i>really</i> don’t get what you are trying to tell me.</span>
<span class="comment-copy">I'm confused, lxml is not only a XML parser, it's also a HTML parser. BeautifulSoup can use "lxml" as its parser too.</span>
