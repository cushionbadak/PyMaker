<div class="post-text" itemprop="text">
<p>I need to make many DNS requests. I'm looking at the Python concurrency library, which says in the introduction:</p>
<p><a href="https://docs.python.org/3.4/library/concurrency.html" rel="nofollow">https://docs.python.org/3.4/library/concurrency.html</a></p>
<blockquote>
<p>The appropriate choice of tool will depend on the task to be executed (CPU bound vs IO bound) and preferred style of development (event driven cooperative multitasking vs preemptive multitasking).</p>
</blockquote>
<p>My task is IO bound, but the docs don't advise which module to use.
Which module is best for IO bound tasks (e.g., DNS requests)?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're not bound by CPU, i'd recommend giving a shot to the standard library <strong>asyncio</strong> module for I/O bound operations.</p>
<p><a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">https://docs.python.org/3/library/asyncio.html</a></p>
<p>here's a third party module for asynchronous dns requests that relies on asyncio:</p>
<p><a href="https://github.com/saghul/aiodns" rel="nofollow">https://github.com/saghul/aiodns</a></p>
<p>Cheers!</p>
</div>
<span class="comment-copy">how many concurrent dns requests are we talking?</span>
<span class="comment-copy">5 - 10 requests for my case. But a general rule of thumb for any case is what I need.</span>
<span class="comment-copy">what does it mean "best": best performance in your particular case, readable/concise code, portability/robustness on multiple platforms, availability in stdlib, etc. For example, <code>ips = ThreadPool(10).map(make_dns_request, hosts)</code> is all you need to make 5-10 concurrent requests. Beware, there could be issues with multithreaded dns requests on OSX.</span>
