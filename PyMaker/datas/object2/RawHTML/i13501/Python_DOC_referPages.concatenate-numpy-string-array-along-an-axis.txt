<div class="post-text" itemprop="text">
<p>I have a 2-d numpy array of strings. Is there a way to concatenate the strings in each row and then join the resulting strings with a separator string, e.g. a newline?</p>
<p>Example:</p>
<pre><code>pic = np.array([ 'H','e','l','l','o','W','o','r','l','d']).reshape(2,5)
</code></pre>
<p>I want to get:</p>
<pre><code>"Hello\nWorld\n"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not hard to do <em>outside</em> of numpy:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; pic = np.array([ 'H','e','l','l','o','W','o','r','l','d']).reshape(2,5)
&gt;&gt;&gt; pic
array([['H', 'e', 'l', 'l', 'o'],
       ['W', 'o', 'r', 'l', 'd']], 
      dtype='|S1')
&gt;&gt;&gt; '\n'.join([''.join(row) for row in pic])
'Hello\nWorld'
</code></pre>
<p>There is also the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.core.defchararray.chararray.html"><code>np.core.defchararray</code></a> module which has "goodies" for working with character arrays -- However, it states that these are merely wrappers around the python builtin and standard library functions so you'll probably not get any real speedup by using them.</p>
</div>
<div class="post-text" itemprop="text">
<p>You had the right ideas there. Here's a <code>vectorized NumPythonic</code> implementation trying to go along those ideas -</p>
<pre><code># Create a separator string of the same rows as input array
separator_str = np.repeat(['\n'], pic.shape[0])[:,None]

# Concatenate these two and convert to string for final output
out = np.concatenate((pic,separator_str),axis=1).tostring()
</code></pre>
<p>Or a one-liner with <code>np.column_stack</code> -</p>
<pre><code>np.column_stack((pic,np.repeat(['\n'], pic.shape[0])[:,None])).tostring()
</code></pre>
<p>Sample run -</p>
<pre><code>In [123]: pic
Out[123]: 
array([['H', 'e', 'l', 'l', 'o'],
       ['W', 'o', 'r', 'l', 'd']], 
      dtype='|S1')

In [124]: np.column_stack((pic,np.repeat(['\n'], pic.shape[0])[:,None])).tostring()
Out[124]: 'Hello\nWorld\n'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way would be to use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code></a> and list comprehension , example -</p>
<pre><code>In [1]: import numpy as np

In [2]: pic = np.array([ 'H','e','l','l','o','W','o','r','l','d']).reshape(2,5)

In [3]: pic
Out[3]:
array([['H', 'e', 'l', 'l', 'o'],
       ['W', 'o', 'r', 'l', 'd']],
      dtype='&lt;U1')

In [4]: '\n'.join([''.join(x) for x in pic])
Out[4]: 'Hello\nWorld'
</code></pre>
<p>If you really need the <code>\n</code> at the end, you can concatenate it after joining th strings. Example -</p>
<pre><code>In [5]: '\n'.join([''.join(x) for x in pic]) + '\n'
Out[5]: 'Hello\nWorld\n'
</code></pre>
</div>
<span class="comment-copy">Is the final <code>\n'</code> important?  The usual use of <code>join</code> puts the separator between strings, but not at the end.</span>
<span class="comment-copy">It's not important - I can always add it later.</span>
<span class="comment-copy">This is very interesting.</span>
<span class="comment-copy">@user5402 Yeah! I wasn't expecting to have a purely numpythonic solution, but it worked out eventually! :)</span>
<span class="comment-copy">It is interesting.  I'm a bit too lazy to try it out, but I wonder how timings would compare to the other (non-numpy) solutions.</span>
