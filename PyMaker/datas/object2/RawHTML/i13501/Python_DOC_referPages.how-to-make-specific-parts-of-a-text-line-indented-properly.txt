<div class="post-text" itemprop="text">
<p>I use python print() function to print component name, its current version and latest version as follows:</p>
<pre><code>for component in component_list:

print("%s \t current ver: %s \t latest ver: %s" % (name, current_version, latest_version))
</code></pre>
<p>The component name can differ in its length, which makes the sentence parts not be indented properly. </p>
<pre><code>bla      current ver: 0x05   latest ver: 0x05


blabla1      current ver: 0x06   latest ver: 0x06


blablablabla     current ver: 0x08   latest ver: 0x0e
</code></pre>
<p>How can I make the above printed as follows:</p>
<pre><code>bla              current ver: 0x05   latest ver: 0x05


blabla1          current ver: 0x06   latest ver: 0x06


blablablabla     current ver: 0x08   latest ver: 0x0e
</code></pre>
<p>Thanks, </p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>maxLength</code> is the maximum length of the name in your list, e.g.:</p>
<pre><code># I don't know how you extract name from component so this might be incorrect
maxLength = max(len(component.name) for component in component_list)
</code></pre>
<p>Then you can use the following to correctly format your code:</p>
<pre><code>print("{:{width}} \t current ver: {} \t latest ver: {}".format(
    name, current_version, latest_version, width = maxLength)
)
</code></pre>
<p>Explanation:</p>
<pre><code>&gt;&gt;&gt; '{:&lt;20}'.format('Hello World!') # Add spaces to the right to reach 20 characters
'Hello World!        '
&gt;&gt;&gt; '{:&gt;20}'.format('Hello World!') # Add spaces to the left
'        Hello World!'
&gt;&gt;&gt; '{:20}'.format('Hello World!') # Use default alignment for the type of object
'Hello World!        ' # For string it is left aligned
</code></pre>
<p>Then, instead of using a raw <code>20</code>, you can use another variable to specify the width:</p>
<pre><code>&gt;&gt;&gt; '{:&lt;{width}}'.format('Hello World!', width = 20)
'Hello World!        '
</code></pre>
<p>Check <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow"><code>str.format</code></a> documentation for complete documentation of the <em>Format Specification Mini-Language</em>.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>Iterate over all the list to find the maximum length of the left component</li>
<li>use this value (e.g. round it to the next 4 character) to determine the starting column for the second  component (say <code>n</code>)</li>
<li>Iterate again over the list, this time printing the first component, <code>(n-len(first_component))</code> spaces and then the second component </li>
</ul>
</div>
<span class="comment-copy"><code>"%20s" % string</code> will space the string over 20 characters, even if the string is less than 20 characters.</span>
<span class="comment-copy">Have a careful read through the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">Format Specification mini-language</a>. Perhaps not the easiest to read, but it has all your information. It mostly uses the newer braces-style formatting, but that shouldn't really matter, as most examples can be easily translated to percent-style formatting.</span>
<span class="comment-copy">Align specs' e.g  {:&lt;20}` specifies justification and width on individual fields.</span>
<span class="comment-copy">Works like a charm!!! Thanks.</span>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy">This is a non-standard answer, sure, but a downvote is not warranted. Anyway, the standardish answer would be to use <code>str.format()</code>.</span>
