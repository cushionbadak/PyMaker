<div class="post-text" itemprop="text">
<p>I have two questions.</p>
<ol>
<li><p>Can ANYTHING (objects, types, operations, functions..) in python return a boolean value when it is called upon by the bool() method?</p></li>
<li><p>Why dont the following two lines of code return the same answer?</p>
<pre><code>print (float == True)  #prints False
print bool(float)      #prints True
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The two, <code>==</code> and <code>bool()</code>, are different. <code>==</code> is for equality testing, whereas <code>bool()</code> returns the result of truth value testing for the object passed to it as parameter.</p>
<p>According to documentation of <code>bool()</code> -</p>
<blockquote>
<p><strong>class bool([x])</strong></p>
<p>Return a Boolean value, i.e. one of True or False. x is converted using the standard truth testing procedure. If x is false or omitted, this returns False; otherwise it returns True.</p>
</blockquote>
<p>The standard truth testing procedure can be found in <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">the documentation -</a></p>
<blockquote>
<p>Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false:</p>
<ol>
<li><p><code>None</code></p></li>
<li><p><code>False</code></p></li>
<li><p>zero of any numeric type, for example, <code>0</code>, <code>0L</code>, <code>0.0</code>, <code>0j</code>.</p></li>
<li><p>any empty sequence, for example, <code>''</code>, <code>()</code>, <code>[]</code>.</p></li>
<li><p>any empty mapping, for example, <code>{}</code>.</p></li>
<li><p>instances of user-defined classes, if the class defines a <code>__nonzero__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value False.</p></li>
</ol>
<p>All other values are considered <code>True</code> — so objects of many types are always true.</p>
</blockquote>
<p>When you do <code>bool(float)</code>, you are checking the truth value for <code>float</code>, which is True.</p>
<p>But when you do <code>float == True</code>, you are doing equality (please note this is not truth value testing, it is equality). In this case <code>float</code> and <code>True</code> are not equal so that results in <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Yes. <a href="https://docs.python.org/2/library/functions.html#bool" rel="nofollow">The docs for bool() say</a>:</li>
</ol>
<blockquote>
<p><em>class</em> <strong>bool</strong>([<em>x</em>])</p>
<p>Return a Boolean value, i.e. one of True or False. <em>x</em> is converted using the standard truth testing procedure.</p>
</blockquote>
<p>The <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">standard truth testing procedure</a> works on any object:</p>
<blockquote>
<p>Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false: [...] All other values are considered true — so objects of many types are always true.</p>
</blockquote>
<ol start="2">
<li><code>float</code> is not equal to True. However, when asking "is <code>float</code> a truthy value", i.e. would <code>if float:</code> evaluate the true branch or the false branch, the answer is "yes, it would evaluate the true branch". </li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Yes every object in Python returns a boolean value, when used with <code>bool</code> which calls the <code>__nonzero__</code>-method of this object</p></li>
<li><p>because the first <code>print</code> does not call the <code>__nonzero__</code> method.</p></li>
</ol>
</div>
<span class="comment-copy">because 0.02 is not equal to <code>True</code>, but implements <code>__nonzero__</code> interface, which returns <code>True</code> (because 0.02 is not zero).</span>
<span class="comment-copy"><code>float</code> is <code>&lt;type 'float'&gt;</code>, and of course that it's different than <code>True</code></span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#boolean-operations</a>.  <code>==</code> always consider objects of different types to be unequal - from <a href="https://docs.python.org/3/reference/expressions.html#not-in" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#not-in</a></span>
<span class="comment-copy">oh ok.. i understand..</span>
<span class="comment-copy">thanks.. I have another question.. so i understand that "float" is a type. But what would I classify  "True" as?</span>
<span class="comment-copy">A singleton immutable object? Or a bool: <code>&gt;&gt;&gt; type(False)</code> says <code>&lt;type 'bool'&gt;</code>.</span>
<span class="comment-copy">Actually it doesn't always call <code>__nonzero__</code>. Consider: <code>a = object(); a.__nonzero__()</code> yields an <code>AttributeError</code>, yet <code>bool(a)</code> is <code>True</code>.</span>
