<div class="post-text" itemprop="text">
<p>I am trying to write a program that reads an integer and displays, using asterisks, a filled diamond of the given side length. For Example, if the side length is 4, the program should display</p>
<pre><code>   *
  ***
 *****
*******
 *****
  ***
   *
</code></pre>
<p>Here is what I am trying to do. It is executing, but I can't seem to get the spaces right for the program to show the diamond shape properly....</p>
<pre><code>userInput = int(input("Please input side length of diamond: "))

if userInput &gt; 0:
    for i in range(userInput):
        for s in range(userInput -3, -2, -1):
            print(" ", end="")
        for j in range(i * 2 -1):
            print("*", end="")
        print()
    for i in range(userInput, -1, -1):
        for j in range(i * 2 -1):
            print("*", end="")
        print()
</code></pre>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>How about the following:</p>
<pre><code>side = int(input("Please input side length of diamond: "))

for x in list(range(side)) + list(reversed(range(side-1))):
    print('{: &lt;{w1}}{:*&lt;{w2}}'.format('', '', w1=side-x-1, w2=x*2+1))
</code></pre>
<p>Giving:</p>
<pre><code>     *
    ***
   *****
  *******
 *********
***********
 *********
  *******
   *****
    ***
     *
</code></pre>
<p>So how does it work?</p>
<p>First we need a counter that counts up to <code>side</code> and then back down again. There is nothing stopping you from appending two range lists together so:</p>
<pre><code>list(range(3)) + list(reversed(range(3-1))
</code></pre>
<p>This gives you a list <code>[0, 1, 2, 1, 0]</code></p>
<p>From here we need to work out the correct number of spaces and asterisks needed for each line:</p>
<pre><code>  *        needs 2 spaces 1 asterix
 ***       needs 1 space  3 asterisks
*****      needs 0 spaces 5 asterisks
</code></pre>
<p>So two formulas are needed, e.g. for <code>side=3</code>:</p>
<pre><code>x   3-x-1   x*2+1
0   2       1
1   1       3
2   0       5
</code></pre>
<p>Using Python's string formatting, it is possible to specify both a fill character and padding width. This avoids having to use string concatenation.</p>
<p>If you are using Python 3.6 or later, you can make use of <code>f</code> string notation:</p>
<pre><code>for x in list(range(side)) + list(reversed(range(side-1))):
    print(f"{'': &lt;{side - x - 1}} {'':*&lt;{x * 2 + 1}}")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>This might work better for you:</strong></p>
<pre><code>n = userInput

for idx in range(n-1):
    print((n-idx) * ' ' + (2*idx+1) * '*')
for idx in range(n-1, -1, -1):
    print((n-idx) * ' ' + (2*idx+1) * '*')
</code></pre>
<p><strong>Output for userInput = 6:</strong></p>
<pre><code>      *
     ***
    *****
   *******
  *********
 ***********
  *********
   *******
    *****
     ***
      *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks Guys, I was able to formulate/correct my code based on the help I received. Thanks for all your input and helping the SO community!</p>
<pre><code>if userInput &gt; 0:              # Prevents the computation of negative numbers
    for i in range(userInput):
        for s in range (userInput - i) :    # s is equivalent to to spaces
            print(" ", end="")
        for j in range((i * 2) - 1):
            print("*", end="")
        print()
    for i in range(userInput, 0, -1):
        for s in range (userInput - i) :
            print(" ", end="")
        for j in range((i * 2) - 1):
            print("*", end="")
        print()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>    def build(width):
        if width%2==0: 
            x=[(' *'*i).center(width*2,' ') for i in range(1,(width*2/2))]
        else: 
           x=[(' *'*i).center(width*2+1,' ') for i in range(1,((width*2+1)/2))]
        for i in x[:-1]+x[::-1]: print i
</code></pre>
<p>This worked for me for any positive width, But there are spaces padding the *s</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>n = 5
stars = [('*' + '**'*i).center(2*n + 1) for i in range(n)]

print('\n'.join(stars + stars[::-1][1:]))
</code></pre>
<p>The output:</p>
<pre><code>     *     
    ***    
   *****   
  *******  
 ********* 
  *******  
   *****   
    ***    
     *    
</code></pre>
<p>This is similar to some of the answers above, but I find the syntax to be more simple and readable.</p>
</div>
<span class="comment-copy">seems like a homework question. review <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy">It is. There is no error per say. Only issue is that I am not able to get the diamond pattern right as shown.</span>
<span class="comment-copy">Your code has <code>range()</code>, and you have no errors?</span>
<span class="comment-copy">Whoops, sorry, I forgot to put in range, but yeah, it is still not giving me the right pattern.</span>
<span class="comment-copy">Tips: 1) in the first half of the diamond, you have to start at a large number of spaces and progressively decrease. So, in <code>userInput - 3</code>, you’re going to have to involve the row number – <code>i</code>. It’s also not necessary to use a backwards range or stop at <code>-2</code>. 2) You have to print spaces in the second half, too.</span>
<span class="comment-copy">This prints it perfectly, however, we should be able to take input from the user and it should print this diamond pattern when the user enters the value 4</span>
<span class="comment-copy">This approach probably won’t be accepted as homework about the original one.</span>
<span class="comment-copy">I like this solution but you're right this probably will not be accepted as homework.</span>
<span class="comment-copy">@Madelyn whenever code uses a variable with a hard-coded value for something like that (like <code>side = 6</code>), you can <i>always</i> replace that with code to read the value in from somewhere and the rest of the code will still work. This can be useful when you're fiddling with the logic, because you don't have to ask for input every time you test it even if you mean to do that once it's working.</span>
