<div class="post-text" itemprop="text">
<p>In my Django app I have 2 querysets of the <strong>same</strong> object. I know I can merge 2 querysets using itertools and chain like so:</p>
<pre><code>from itertools import chain
list(chain(first_queryset, second_queryset))
</code></pre>
<p>But this outputs a new queryset where the entire first one is followed by the entire second one like so: </p>
<pre><code>[&lt;first_queryset_1st_instance&gt;, &lt;first_queryset_2nd_instance&gt;,       &lt;first_queryset_3rd_instance&gt;, &lt;second_queryset_1st_instance&gt;, &lt;second_queryset_2nd_instance&gt;, &lt;second_queryset_3rd_instance&gt;]
</code></pre>
<p>However, I really need an output that is alternating between each queryset instead of just appending the entire second queryset at the end of the first one like so:</p>
<pre><code>[&lt;first_queryset_1st_instance&gt;, &lt;second_queryset_1st_instance&gt;,&lt;first_queryset_2nd_instance&gt;, &lt;second_queryset_2nd_instance&gt;, &lt;first_queryset_3rd_instance&gt;, &lt;second_queryset_3rd_instance&gt;]
</code></pre>
<p>What's the best way I can do this in python/django? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the result you need using <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>zip_longest</code></a>, <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>chain</code></a> and <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> together.</p>
<p>Lets call the querysets <code>p</code> and <code>q</code>. Then you would do:</p>
<pre><code># Python 3.x
from itertools import chain, zip_longest
combined = list(filter(lambda x: x is not None, chain(*zip_longest(p, q))))

# Python 2.7
from itertools import chain, ifilter, izip_longest
combined = list(ifilter(lambda x: x is not None, chain(*izip_longest(p, q))))
</code></pre>
<p>Let's explain how it works. First, <code>zip_longest</code> (<code>izip_longest</code> in Python 2) zips the querysets together. You want <code>zip_longest</code> instead of <code>zip</code>, so that the output continues after the shorter queryset has finished.</p>
<p>This creates an iterable like:</p>
<pre><code>((p[0], q(0)), (p[1], q[1]), (p[2], q[2]), ..., (p[9], q[9]), (p[10], None))
</code></pre>
<p>Note this is an iterable of tuples, but you want a flat list. So next we use <code>chain</code>, using the <code>*</code> operator to unpack the result of <code>zip_longest</code>.</p>
<p>This creates an iterable like.</p>
<pre><code>(p[0], q[0], p[1], q[1], ..., p[9], q[9], p[10], None)
</code></pre>
<p>That's almost what we want, but we've got <code>None</code>s at the end if one queryset is shorter than the other. We can get rid of them with <code>filter</code> (<code>ifilter</code> in Python 2).</p>
</div>
<span class="comment-copy">if there is overlap between results in p and q, what do you recommend to eliminate duplicates?</span>
<span class="comment-copy">@w-- that's not part of the original problem so it would be better to ask a new question.</span>
<span class="comment-copy">cool thanks. I've created a new question here: <a href="https://stackoverflow.com/questions/45834009/django-merge-2-querysets-in-staggered-alternating-fashion-without-duplicates" title="django merge 2 querysets in staggered alternating fashion without duplicates">stackoverflow.com/questions/45834009/â€¦</a></span>
