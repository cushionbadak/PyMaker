<div class="post-text" itemprop="text">
<p>I would like to submit jobs from a thread to an <code>asyncio</code> event loop (just like <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="nofollow">run_in_executor</a> but the other way around).</p>
<p>Here's what the <code>asyncio</code> documentation says about <a href="https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading" rel="nofollow">concurrency and multithreading</a>:</p>
<blockquote>
<p>To schedule a callback from a different thread, the BaseEventLoop.call_soon_threadsafe() method should be used. 
  Example to schedule a coroutine from a different thread:
  <code>loop.call_soon_threadsafe(asyncio.async, coro_func())</code></p>
</blockquote>
<p>That works fine but the result of the coroutine is lost.</p>
<p>Instead, it is possible to use a function that adds a done callback to the future returned by <code>async</code> (or <code>ensure_future</code>) so that the thread can access the result through a <a href="https://docs.python.org/dev/library/concurrent.futures.html#concurrent.futures.Future" rel="nofollow">concurrent.futures.Future</a>. </p>
<p>Is there a particular reason why such a feature is not implemented in the standard library? Or did I miss a simpler way to achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>My request made its way and a <a href="http://docs.python.org/3.5/library/asyncio-task.html#asyncio.run_coroutine_threadsafe" rel="nofollow noreferrer">run_coroutine_threadsafe</a> function has been implemented <a href="https://github.com/python/asyncio/blob/master/asyncio/tasks.py#L739" rel="nofollow noreferrer">here</a>.</p>
<p>Example:</p>
<pre><code>def target(loop, timeout=None):
    future = asyncio.run_coroutine_threadsafe(add(1, b=2), loop)
    return future.result(timeout)

async def add(a, b):
    await asyncio.sleep(1)
    return a + b

loop = asyncio.get_event_loop()
future = loop.run_in_executor(None, target, loop)
assert loop.run_until_complete(future) == 3
</code></pre>
<hr/>
<p>I originally posted a sub-class of <a href="https://docs.python.org/dev/library/concurrent.futures.html#concurrent.futures.Executor" rel="nofollow noreferrer">concurrent.futures.Executor</a> that can still be implemented as:</p>
<pre><code>class LoopExecutor(concurrent.futures.Executor):
    """An Executor subclass that uses an event loop 
    to execute calls asynchronously."""

    def __init__(self, loop=None):
        """Initialize the executor with a given loop."""
        self.loop = loop or asyncio.get_event_loop()

    def submit(self, fn, *args, **kwargs):
        """Schedule the callable, fn, to be executed as fn(*args **kwargs).
        Return a Future object representing the execution of the callable."""
        coro = asyncio.coroutine(fn)(*args, **kwargs)
        return asyncio.run_coroutine_threadsafe(coro, self.loop)
</code></pre>
</div>
<span class="comment-copy">do you want to put this in the question so it doesnt seem like an answer</span>
<span class="comment-copy">Well it is kind of <a href="http://stackoverflow.com/help/self-answer">a partial answer to my own question</a>, since there might be a better way to achieve the same thing.</span>
<span class="comment-copy">if you see it in that way, ok :)</span>
