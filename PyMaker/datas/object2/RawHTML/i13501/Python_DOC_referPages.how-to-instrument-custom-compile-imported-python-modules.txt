<div class="post-text" itemprop="text">
<p>I'm building a visual Python debugger (<a href="http://thonny.org" rel="nofollow noreferrer">http://thonny.org</a>) which relies on instrumenting the code before compiling it. I insert certain marker calls into AST, so I get to know eg. which expression is about to be executed.</p>
<p>At the moment I'm instrumenting only the main module, but I'd like to get extra information also for some imported modules.</p>
<p>How can I override the compilation part of import system? I suppose I need to create a new loader, but how to register it?</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, are you sure that modifying the AST is the way to go? Python already provides means to trace function calls. See <a href="https://docs.python.org/3.5/library/sys.html#sys.call_tracing" rel="nofollow"><code>sys.call_tracing</code></a> and <a href="https://docs.python.org/3.5/library/sys.html#sys.settrace" rel="nofollow"><code>sys.settrace</code></a> for example.</p>
<p>These functions are <em>intended</em> to be used to implement debuggers.</p>
<p>Anyway, if you want to implement and register a new module loader you have to look at <a href="https://docs.python.org/3/library/importlib.html#module-importlib" rel="nofollow"><code>importlib</code></a>. The hooks used to register custom importers are described in <a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow">PEP 302</a>.</p>
<p>Basically you simply have to implement a <em>finder</em> class and insert it into either <code>sys.path_hooks</code> or <code>sys.meta_path</code> depending on when you want it to execute. This finder class, when provided with a module name, will implement a <a href="https://docs.python.org/3/library/importlib.html#importlib.abc.PathEntryFinder.find_loader" rel="nofollow"><code>find_loader</code></a> method which will return the custom loader for the given module.</p>
<p>The loader class can do literally anything in its <a href="https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module" rel="nofollow"><code>load_module</code></a>. You probably want to use the <code>ast</code> module to parse the contents of the module, modify it as you are doing with the main module and then using <code>compile</code> or the equivalent to obtain a code object.</p>
</div>
<span class="comment-copy">Thanks for the answer! BTW, I am using Python's built-in tracing mechanism, but it doesn't generate notifications for all events I'm interested in. I want to get notified for example when Python is about to compute expression x + y. As a workaround I instrument the AST so that each (sub)expression gets wrapped into a dummy function call</span>
