<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5607283/how-can-i-manually-generate-a-pyc-file-from-a-py-file">How can I manually generate a .pyc file from a .py file</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I know that when Python script is imported in other python script, then a .pyc script is created. Is there any other way to create .pyc file by using linux bash terminal? </p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/library/py_compile.html#py_compile.main" rel="nofollow"><code>py_compile</code></a> module. Run it from command line (<code>-m</code> option):</p>
<blockquote>
<p>When this module is run as a script, the <em>main()</em> is used to compile all
  the files named on the command line.</p>
</blockquote>
<p>Example:</p>
<pre class="lang-none prettyprint-override"><code>$ tree
.
└── script.py

0 directories, 1 file
$ python3 -mpy_compile script.py
$ tree
.
├── __pycache__
│   └── script.cpython-34.pyc
└── script.py

1 directory, 2 files
</code></pre>
<p><a href="https://docs.python.org/3/library/compileall.html" rel="nofollow"><code>compileall</code></a> provides similar functionality, to use it you'd do something like</p>
<pre><code>$ python3 -m compileall ...
</code></pre>
<p>Where <code>...</code> <em>are files to compile or directories that contain source files, traversed recursively</em>.</p>
<hr/>
<p>Another option is to import the module:</p>
<pre class="lang-none prettyprint-override"><code>$ tree
.
├── module.py
├── __pycache__
│   └── script.cpython-34.pyc
└── script.py

1 directory, 3 files
$ python3 -c 'import module'
$ tree
.
├── module.py
├── __pycache__
│   ├── module.cpython-34.pyc
│   └── script.cpython-34.pyc
└── script.py

1 directory, 4 files
</code></pre>
<p><code>-c 'import module'</code> is different from <code>-m module</code>, because the former won't execute the <code>if __name__ == '__main__':</code> block in <em>module.py</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the following command:</p>
<pre><code>python -m compileall &lt;your_script.py&gt;
</code></pre>
<p>This will create <code>your_script.pyc</code> file in the same directory.</p>
<p>You can pass directory also as :</p>
<pre><code>python -m compileall &lt;directory&gt;
</code></pre>
<p>This will create .pyc files for all .py files in the directory</p>
<p>Other way is to create another script as</p>
<pre><code>import py_compile
py_compile.compile("your_script.py")
</code></pre>
<p>It also create the your_script.pyc file. You can take file name as command line argument</p>
</div>
<span class="comment-copy">can't do  $ python -c "import script" ?</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/compileall.html" rel="nofollow noreferrer"><code>python -m compileall</code></a></span>
<span class="comment-copy">I think you should try to use 'zipfile' to make pyc. It's so easy to make it. You can use it to deploy your code by no src.</span>
