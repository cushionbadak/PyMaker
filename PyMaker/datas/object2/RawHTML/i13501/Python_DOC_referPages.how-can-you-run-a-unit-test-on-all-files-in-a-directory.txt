<div class="post-text" itemprop="text">
<p>I am a TA for an intro CS class learning Python and I was wondering if there is a way to run <strong>one unit test file</strong> on <strong>multiple .py files in a folder</strong>.</p>
<p>For example, if I make Homework1UnitTest.py and I want it to run on all .py files in the folder C:/Users/Lien/Desktop/StudentSubmissionsHW1, how would I do that? </p>
<p>The StudentSubmissionsHW1 is populated with .py files like:
jsmithhw1.py
bjoneshw1.py
sscotthw1.py 
and so on. </p>
<p>Also, as I was learning about unit tests, I read about passing verbosity arguments to the unittest call. Is there something similar to this where I can see ALL of the tests that failed?</p>
<p>For example, if I have something like:</p>
<pre><code>  def test_is_int(self):
      self.assertEqual(is_int("-51"), True)
      self.assertEqual(is_int("-5.1"), False)
      self.assertEqual(is_int("5.1"), False)
      self.assertEqual(is_int("51"), True)
      self.assertEqual(is_int("0"), True)
      self.assertEqual(is_int("-5-4"), False)
      self.assertEqual(is_int("5..1"), False)
      self.assertEqual(is_int("5-"), False)
      self.assertEqual(is_int("5f"), False)
      self.assertEqual(is_int("-"), False)
</code></pre>
<p>can I set up my results to show ALL the assertEqual() functions that failed instead of just the first one?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, the <a href="https://docs.python.org/2/library/unittest.html#test-discovery" rel="nofollow"><code>discover</code></a> feature was designed with just this use case:</p>
<pre><code>cd project_directory
python -m unittest discover
</code></pre>
<p>By default, it will only run on files that match the pattern <code>test*.py</code>, but if you want it to run on every .py file, you can do instead:</p>
<pre><code>python -m unittest discover -p "*.py"
</code></pre>
<p>As to your second question, the first assert that fails will stop the other tests within the function from even being run; if you need more granularity, you are better off creating a separate test function for each assert as described <a href="http://www.owenpellegrin.com/blog/testing/how-do-you-solve-multiple-asserts/" rel="nofollow">here</a> </p>
<p><strong>Update:</strong> Re-reading your question, it sounds like you have a single unittest file, but want to run those unittests on multiple files.  How to do this would depend what running it on a file entails for your particular use case.  However, if you mean those files have some input that you want as additional "argument" to each of your test cases, one way would be to nest each of your tests in a forloop that loops through all the files in the directory.  Another thing I've done before is to setup a decorator that will automatically setup this forloop for you on all decorated methods, e.g. something like:</p>
<pre><code>def all_files(func):
    def wrapped(self, **kwargs):
        root = 'C:\Users\Lien\Desktop\StudentSubmissionsHW1'
        kwargs.pop('filepath',None)
        for filepath in glob.glob(os.path.join(root, '*.py')):
            func(self, filepath=filepath, **kwargs)   
    return wrapped
</code></pre>
<p>And then you could use it like this:</p>
<pre><code>class TestStringMethods(unittest.TestCase):

    @all_files
    def test_is_int(self, filepath=None):
        # run your test(s) using file filelpath...
        with open(filepath) as fobj:
            self.assertEqual(fobj.read().strip(), 'foobar')
</code></pre>
</div>
<span class="comment-copy">What are you using as your unit test framework? Or are you using anything?</span>
<span class="comment-copy">I am just using Python's unit testing framework: <a href="https://docs.python.org/3.4/library/unittest.html#test-discovery" rel="nofollow noreferrer">docs.python.org/3.4/library/unittest.html#test-discovery</a>. Do you know of a better way of doing this?</span>
<span class="comment-copy">Right, so I tried doing this earlier--but I am wondering how I can get it to import the files from each file. The issue I am having is that this is not importing the students' functions into the unit test so I am retrieving errors like is_int() not defined. Thoughts on how to fix this?</span>
<span class="comment-copy">Hmm... I'm kind of confused what you mean... you have different utiltity functions defined in each of the student modules? Could you not just use a normal python <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">import or import-from</a> statement? <code>from bjoneshw import *</code> or <code>from bjoneshw import is_int</code></span>
<span class="comment-copy">Sorry! To clarify, I have the same functions in each .py. Each student has to write an is_int() function (and an is_float() function). They each submit their files, which I then can export into a main directory of each student's responses. So now I have a directory filled with multiple .py files each with different solutions to is_int(). What I want to try and do is have the unit test run on each .py file individually and provide me with the results. Does that make sense?</span>
<span class="comment-copy">Ah I see, you are looking more for a grader app than a unittest... you could probably do some magic with <code>importlib</code> to procedurally import the functions without clashing namespaces.  I'm not sure unittest is the best use for this, but it might make sense if you do something like dynamically create a new test case class for each student.</span>
