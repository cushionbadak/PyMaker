<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25793188/are-the-integer-keys-in-a-python-dictionary-sorted-and-sorted-with-priority">Are the integer keys in a Python dictionary sorted and sorted with priority?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Running this code multiple times </p>
<pre><code>t = {'a', 'b', 'c', 'd'}
print(t)
</code></pre>
<p>could print something like: </p>
<pre><code>{'c', 'b', 'a', 'd'} 
{'d', 'b', 'c', 'a'} # different
{'d', 'b', 'c', 'a'} # same
{'a', 'd', 'b', 'c'} # different
{'a', 'b', 'c', 'd'} # different
# etc
</code></pre>
<p>(If you are using the console to replicate it, make sure you click <kbd>Rerun</kbd> every time before you re-paste the code and execute it. If you still can't replicate, perhaps you have <a href="https://stackoverflow.com/questions/27522626/hash-function-in-python-3-3-returns-different-results-between-sessions/27522708#27522708">hash randomization</a> not equal to <code>random</code>. <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-R" rel="noreferrer">On Python 3.3 and greater, hash randomization is turned on by default.</a>)</p>
<hr/>
<p>On the other hand, the code below always prints the same set, and it's actually sorted:</p>
<pre><code>s = {1, 6, 3.3, 4}
print(s) 

# prints: 
# {1, 3.3, 4, 6}
# {1, 3.3, 4, 6}
# {1, 3.3, 4, 6}
# {1, 3.3, 4, 6}
</code></pre>
<p><strong>Question:</strong><br/>
Why do sets of numbers appear to be always sorted and are they really <em>always</em> sorted? </p>
</div>
<div class="post-text" itemprop="text">
<p>Note, I don't have python3.4 handy, but on python2.7 this isn't always the case (and I'd expect that to be true of python3.4 too).</p>
<p>I can even change the order of the elements based on how I put them into the set:</p>
<pre><code>&gt;&gt;&gt; print({1, 9})
set([9, 1])
&gt;&gt;&gt; print({9, 1})
set([1, 9])
&gt;&gt;&gt; set([9, 1])
set([9, 1])
&gt;&gt;&gt; set([1, 9])
set([1, 9])
</code></pre>
<p>The order is determined by the hash of the element and by when it was inserted (in the case of hash collisions).  In CPython, integers hash to themselves and a dict/set has 8 slots free to start with.  Since there are 8 spots available, we can hash numbers 0 -&gt; 7 (inclusive) without a hash collision.  However, if we try to hash 8 and 0 (or 9 and 1) in the same set, we'll get a collision.  if <code>9</code> is already in the set and then we try to put <code>1</code> in, python looks and says "Oh snap, that slot's taken -- Now I need to put it in the next most favorable slot".  The details of collision resolution are beyond what I've looked into, so I can't offer insight into what slot that is ...</p>
<p>Note if we had more than ~5 elements in the set, then it would be resized (IIRC, to 16, then 32, then 64, ...) which changes which elements would collide (naturally).</p>
</div>
<span class="comment-copy">Note that a <code>set</code> is basically just a <code>dict</code> with no values.</span>
<span class="comment-copy">It only seems to be sorted in the iPython console, not in the normal python console, when iterating through it or calling <code>str(s)</code> or <code>repr(s)</code>.</span>
<span class="comment-copy">Another possible duplicate:  <a href="http://stackoverflow.com/questions/12165200/order-of-unordered-python-sets" title="order of unordered python sets">stackoverflow.com/questions/12165200/â€¦</a></span>
<span class="comment-copy">Not printing will give you a different ordering</span>
<span class="comment-copy">@PadraicCunningham -- Not sure what you mean?  if I do <code>a = {1, 9}; a</code> I still get the same thing as <code>print({1, 9})</code> on python2.7</span>
<span class="comment-copy"><a href="http://pastebin.com/yaaS9UbE" rel="nofollow noreferrer">pastebin.com/yaaS9UbE</a>, that is running from ipython which seems to be different to the python repl</span>
<span class="comment-copy">@PadraicCunningham -- You're using IPython which appears to try to be helpful and sort the elements for you.  What happens if you just print <code>repr(s)</code> (which is what the normal python REPL will do)?</span>
<span class="comment-copy">@PadraicCunningham -- The really surprising thing for me is that <code>{1, 9}</code> and <code>set([1, 9])</code> give different results... For some reason it seems that python sets that involve only literals are read backwards?</span>
