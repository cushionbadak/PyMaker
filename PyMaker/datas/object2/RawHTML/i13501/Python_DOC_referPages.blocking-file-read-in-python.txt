<div class="post-text" itemprop="text">
<p>I need to read binary data structures as they are flushed to a file in Windows. I don't have control over the program that writes the data, it's a black-box LP model that always writes to a few hard-coded filenames, but I do know it flushes it's output periodically. I would like to read this data as its written, from several files at once. I don't have a problem forking a thread for each file, but it would be really convenient if I could use read(n) and have it block until it reads an <em>entire</em> n bytes, or readinto(d) and have it block until the buffer is full. Is this possible to do in Python on Windows?</p>
<p>I'm having a tough time searching for this because all anyone ever talks about is non-blocking and how to do it. But with this solution I intend to let the children block and report data back via a queue to a parent that doesn't block.</p>
<p>If there isn't a way to get the blocking reads, is there a way to avoid busy waiting or sleep()ing?</p>
</div>
<div class="post-text" itemprop="text">
<p>When reading a file in Python, that thread is blocking all other threads from doing work in the same process by default -- you get this for free due to the GIL.</p>
<p>Whereas you're reading from binary data as it hits the disk, you could read N bytes of data and compare against your desired size, looping as required, and <code>return</code>ing when done.  </p>
<p>e.g. as some runnable pseudo-code (that you should <em>not</em> implement as is):</p>
<pre><code>my_file = open('/Users/tfisher/sputnik.m4a', 'rb')
megabyte_in_bytes = 1000000

def chunk_reader(file=my_file, chunk_size=megabyte_in_bytes):
    filesize = 0
    _return_chunk = bytearray()

    while filesize &lt; chunk_size:

        print("Reading file. Current size: {0}".format(sys.getsizeof(_return_chunk)))

        # reading will keep seeking forward until the file is 
        # seek(0) or otherwise opened from the start
        _return_chunk = _return_chunk + file.read(10)
        filesize = filesize + sys.getsizeof(_return_chunk)

    return _return_chunk

print(chunk_reader())
</code></pre>
<p>If you don't want a busy wait loop, you can check if the file is locked in other threads within the same process by making use of <a href="https://docs.python.org/3/library/threading.html#semaphore-objects" rel="nofollow">synchronization primitives like semaphores</a> or by creating a file reading class that increments a lock value when starting to <code>read()</code>.</p>
</div>
<span class="comment-copy">The assumption is that the file is written slowly, this method would spend vast amounts of time spinning while read(10) returns 0. I am looking for a method to keep the thread waiting for new bytes in the file without wasting the processors' time.</span>
<span class="comment-copy">Even win32 modules and <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa364417(v=vs.85).aspx" rel="nofollow noreferrer">file system events</a> are going to have some sleep between polling (.5 seconds IIRC).</span>
