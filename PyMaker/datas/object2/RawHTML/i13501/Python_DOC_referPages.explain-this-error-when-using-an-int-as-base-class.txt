<div class="post-text" itemprop="text">
<p>I know that it is wrong to do this, but I try to understand what is going on behind the scenes (and if you could potentially duck-type a class for extending it). The code is as follows:</p>
<pre><code>&gt;&gt;&gt; a = 2
&gt;&gt;&gt; class C(a):
...     pass
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: int() takes at most 2 arguments (3 given)
</code></pre>
<p>I'm trying to understand why <code>int()</code> would be called in this example. It is the type of <code>a</code> but I don't get why that is important here.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to inherit from an <em>instance object</em>, an integer object. Python treats <code>type(a)</code> as the <em>metatype</em>. The metatype is passed the class name, a tuple of the baseclasses and the body of the class as a dictionary; it is expected to produce the new class object.</p>
<p>In this case, that means <code>type(2)('C', (2,), {})</code> is called:</p>
<pre><code>&gt;&gt;&gt; type(2)('C', (2,), {})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: int() takes at most 2 arguments (3 given)
</code></pre>
<p>Normally, that'd be the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code> object</a> itself:</p>
<pre><code>&gt;&gt;&gt; type('C', (object,), {})
&lt;class '__main__.C'&gt;
</code></pre>
<p>where I used <code>object</code> as a base class instead.</p>
<p>See <a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">What is a metaclass in Python?</a> for everything you didn't want to know about how metaclasses work in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are basically doing this:</p>
<pre><code>class C(2):
    pass
</code></pre>
<p>As far as I am aware, you cannot inherit from an instance of object in this fashion.</p>
<p>You want to do:</p>
<pre><code>class C(int):
    pass
</code></pre>
<p>OR</p>
<pre><code>class C(type(a)):
    pass
</code></pre>
</div>
<span class="comment-copy">You're not using <code>int</code> as a base class, you're trying to use <i>an integer</i> as the base class.</span>
<span class="comment-copy">@jonrsharpe Nono, I know it is "wrong", I'm interested in what and why this is happening</span>
<span class="comment-copy">It's trying to call <code>type(2)</code> (<code>int</code>) instead of <code>type(int)</code> (<code>type</code>), and <code>int</code> doesn't have the same signature as <code>type</code>.</span>
<span class="comment-copy">so if I get this right, I would be able to "inherit from an instance" if the type of that object behaves like a metaclass, correct?</span>
<span class="comment-copy">@WorldSEnder well, yes - <code>int</code> is an instance of <code>type</code>, for example!</span>
<span class="comment-copy">@WorldSEnder: yes, and all classes are <i>normally</i> instances of a metaclass, directly from <code>type</code> or a subclass of <code>type</code>.</span>
<span class="comment-copy">Although this is correct, it doesn't actually answer the question the OP is asking</span>
