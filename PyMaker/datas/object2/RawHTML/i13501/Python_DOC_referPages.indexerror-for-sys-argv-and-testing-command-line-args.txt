<div class="post-text" itemprop="text">
<p>I am writing a variety of unittest test cases along these lines:</p>
<pre><code>import unittest
import program

class test(unittest.TestCase):
    a = 'acgt'
    b = 'c'
    sys.argv[1] = a
    sys.argv[2] = b
    text, patterns = program.parse()
    assertEqual(text, a)
    assertEqual(patterns, [b])

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>Unfortunately they all return an <code>IndexError</code> that the index is out of range. This makes sense, because nothing was passed on the command line. How can I prime sys.argv arguments in order to test methods which take them through a parser, from sys.argv?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can, by just changing the <code>argv</code> variable</p>
<pre><code>class MyTest(unittest.TestCase):
    def test(self):
        import sys
        sys.argv = ['0', '1', '2']
        program()


def program():
    import sys
    print(sys.argv[1])
    print(sys.argv[2])

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>but this is not the recommended way. Rather change the signature of program so that it accepts a list so that you can easily control how it is called.</p>
<pre><code>program(sys.argv)  # From command line
program(['param1', 'param2'])  # From Tests
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you likely got was not simply an index out of range but more specifically:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.argv[1] = 'foo'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list assignment index out of range
</code></pre>
<p>Unlike <code>dict</code>, a <code>list</code> isn't simply something you can assign arbitrary indexes with items, you have <code>append</code> an individual item or <code>extend</code> a list of items.</p>
<p>Also, your usage of <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase" rel="nofollow"><code>unittest.TestCase</code></a> is wrong.  You have to define test methods and not just write your tests under a class declaration.  It should look something like this:</p>
<pre><code>class MyTestCase(unittest.TestCase):

    def test_program_parse(self):
        a = 'acgt'
        b = 'c'
        sys.argv.append(a)
        sys.argv.append(b)
        text, patterns = program.parse()
        assertEqual(text, a)
        assertEqual(patterns, [b])
</code></pre>
<p>Also, you most certainly don't want to dirty up sys.argv like so, you want to make use of <code>setUp</code> and <code>tearDown</code> to clean up the data, so you might have something like this within your test case class:</p>
<pre><code>    def setUp(self):
        self._original_argv = sys.argv

    def tearDown(self):
        sys.argv = self._original_argv
</code></pre>
<p>By convention, these two methods should be the first two defined within your test class to make it clear and easy to see for future readers of your test cases.</p>
<p>Also, as you can see, you can just simply assign a new list to <code>sys.argv</code> such as the entire list of arguments you want to test against.</p>
</div>
<span class="comment-copy">Sometimes you want to test the interactions with actual <code>sys.argv</code> especially if the code is written to do so.  In fact, the tests for the <code>argparse</code> module does both the standard argument and modify <code>sys.argv</code> directly (see: <a href="https://hg.python.org/cpython/file/default/Lib/test/test_argparse.py#l179" rel="nofollow noreferrer"><code>test_argparse.py</code></a>)</span>
<span class="comment-copy">Thanks, this looks good. However, I don't understand why you would assign 'original arg' to be 'sys.argv' in the setUp - wouldn't you want to assign something to sys.argv instead?</span>
<span class="comment-copy">Yes, which is what I also suggested, however you <i>always</i> want to clean up global variables that your tests have dirtied up to not potentially pollute other test cases (that say doesn't assign anything to <code>sys.argv</code> but expects it to be clean, for instance).</span>
