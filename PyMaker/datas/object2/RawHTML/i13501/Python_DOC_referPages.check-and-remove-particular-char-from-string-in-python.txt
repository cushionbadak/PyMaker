<div class="post-text" itemprop="text">
<p>I'm in a situation where I have a string and a special symbol that is consecutively repeating, such as:</p>
<pre><code>s = 'a.b.c...d..e.g'
</code></pre>
<p>How can I check whether it is repeating or not and remove consecutive symbols, resulting in this:</p>
<pre><code>s = 'a.b.c.d.e.g'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
result = re.sub(r'\.{2,}', '.', 'a.b.c...d..e.g')
</code></pre>
<p>A bit more generalized version:</p>
<pre><code>import re
symbol = '.'
regex_pattern_to_replace = re.escape(symbol)+'{2,}'
# Note that escape sequences are processed in replace_to
# but this time we have no backslash characters in it.
# In case of more complex replacement we could use
# replace_to = replace_to.replace('\\', '\\\\')
# to defend against occasional escape sequences.
replace_to = symbol
result = re.sub(regex_pattern_to_replace, replace_to, 'a.b.c...d..e.g')
</code></pre>
<p>The same with compiled regex (added after Cristian Ciupitu's comment):</p>
<pre><code>compiled_regex = re.compile(regex_pattern_to_replace)
# You can store the compiled_regex and reuse it multiple times.
result = compiled_regex.sub(replace_to, 'a.b.c...d..e.g')
</code></pre>
<p>Check out the docs for <a href="https://docs.python.org/2/library/re.html#re.sub" rel="nofollow">re.sub</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>Simple and clear:</h2>
<pre><code>&gt;&gt;&gt; a = 'a.b.c...d..e.g'
&gt;&gt;&gt; while '..' in a:
       a = a.replace('..','.')
&gt;&gt;&gt; a
'a.b.c.d.e.g'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lot's of answers so why not throw another one into the mix.<br/>
You can zip the string with itself off by one and eliminate all matching <code>'.'</code>s:</p>
<pre><code>''.join(x[0] for x in zip(s, s[1:]+' ') if x != ('.', '.'))
</code></pre>
<p>Certainly not the fastest, just interesting. It's trivial to turn this into eliminating all repeating elements:</p>
<pre><code>''.join(a for a,b in zip(s, s[1:]+' ') if a != b)
</code></pre>
<p>Note: you can use <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow"><code>izip_longest</code></a> (py2) or <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow"><code>zip_longest</code></a> (py3) if <code>' '</code> as a filler causes an issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>My <a href="https://stackoverflow.com/a/32419349/21945">previous answer</a> was a dud so here's another attempt using <code>reduce()</code>. This is reasonably efficient with O(n) time complexity:</p>
<pre><code>def remove_consecutive(s, symbol='.'):
    def _remover(x, y):
        if y == symbol and x[-1:] == y:
            return x
        else:
            return x + y
    return reduce(_remover, s, '')

for s in 'abcdefg', '.a.', '..aa..', '..aa...b...c.d.e.f.g.....', '.', '..', '...', '':
    print remove_consecutive(s)
</code></pre>
<p><strong>Output</strong></p>
<pre>
abcdefg
.a.
.aa.
.aa.b.c.d.e.f.g.
.
.
.

</pre>
</div>
<div class="post-text" itemprop="text">
<p>Kind of complicated, but it works and it's being done in a single loop:</p>
<pre><code>import itertools

def remove_consecutive(s, c='.'):
    return ''.join(
        itertools.chain.from_iterable(
            c if k else g
            for k, g in itertools.groupby(s, c.__eq__)
        )
    )
</code></pre>
</div>
<span class="comment-copy">As a side note, the regular expression should be <a href="https://docs.python.org/2/library/re.html#re.compile" rel="nofollow noreferrer">compiled</a> if it's used multiple times.</span>
<span class="comment-copy">Isn't this kind of inefficient because you have to loop over <code>a</code> multiple times?</span>
<span class="comment-copy">@CristianCiupitu I think it is actually up to the string you are taking care of. If it is a small string or does not have any multiple occurrences to remove at all, this <b>might be even faster</b> than <code>import re</code> approach.</span>
<span class="comment-copy">In case of small strings it probably doesn't matter which method is used. In most cases performance doesn't matter and the focus should be on code readability. In case of critical hot spots one can try and find out what provides acceptable performance in the given scenario.</span>
<span class="comment-copy">I've done some %timeit measurements and it's indeed a bit faster for something like <code>'a.b...c.d......eeeee.g'</code>, and for something like <code>'a.b.....c.........................d.........e........g' * 1000</code> it's a bit slower. My itertools based solution is the slowest of all :-(</span>
<span class="comment-copy">Using <code>' '</code> as a filler can cause problems if it's the character that needs to be deduplicated, e.g. <code>'aaa bbb    '</code> becomes <code>'a b'</code> (the trailing space is missing).</span>
<span class="comment-copy">@ChristianI I recognised that, which is why I had the last comment, if there is no appropriate filler character <code>(i)zip_longest</code> would add a <code>None</code> to the last tuple.</span>
<span class="comment-copy">I doubt that you could make it any more complicated than this :)</span>
<span class="comment-copy">@mhawke, it's the curse of generators and functional programming :-)</span>
