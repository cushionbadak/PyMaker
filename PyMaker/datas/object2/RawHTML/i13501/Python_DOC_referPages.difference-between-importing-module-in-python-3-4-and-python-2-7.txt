<div class="post-text" itemprop="text">
<p>I am trying to import a package present in another folder and it is working perfectly fine in python 3.4. For Example: the files are present in libraries folder</p>
<pre><code>user&gt; python
Python 3.4.1 (default, Nov 12 2014, 13:34:29)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from libraries.controller_utils import *
&gt;&gt;&gt;      
</code></pre>
<p>However when I open a new shell and use Python 2.7:</p>
<pre><code>user&gt; python
Python 2.7.4 (default, Jun  1 2015, 10:35:58)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-55)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from libraries.controller_utils import *
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named libraries.controller_utils
&gt;&gt;&gt;
</code></pre>
<p>I tried adding the entry to <code>sys.path</code> but it is not helping. I read a similar question <a href="https://stackoverflow.com/questions/30249119/difference-in-package-importing-between-python-2-7-and-3-4">here</a> but the solution is not helping me either as I tried both relative and absolute imports. Please advice.</p>
<p>EDIT: The directory structure being <code>~/tests/libraries/controller_utils.py</code>. I am executing these commands inside the tests directory.</p>
<p>EDIT: I have added the sys.path entry as follows but it still does not recognize it. Please note that the error occurs on 2.7 but works absolutely fine on 3.4</p>
<pre><code>user&gt; cd ~/tests/
user&gt; ls
__pycache__  backups  inputs  libraries  openflow.py  test_flow.py
user&gt; ls libraries/
__pycache__  controller_utils.py  general_utils.py  general_utils.pyc  tc_name_list.py  test_case_utils.py
user&gt; python
Python 2.7.4 (default, Jun  1 2015, 10:35:58)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-55)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from libraries.controller_utils import *
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named libraries.controller_utils
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append('libraries/')
&gt;&gt;&gt; from libraries.controller_utils import *
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named libraries.controller_utils
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>libraries</code> package is missing the <code>__init__.py</code> file. You can create an empty file with that name and then:</p>
<pre><code>from libraries.controller_utils import *
</code></pre>
<p>should work.</p>
<p>Alternatively, if you don't want to turn <code>libraries</code> into a package you should add its path to <code>sys.path</code> and import <code>controller_utils</code>:</p>
<pre><code>import sys

sys.path.append('libraries/')
from controller_utils import *
</code></pre>
<hr/>
<p>Note that the error is due to the fact that python2 requires the existence of <code>__init__.py</code> to import from packages while python3.3+ provides <a href="https://docs.python.org/3/reference/import.html#namespace-packages" rel="nofollow">namespace packages</a> (see <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow">PEP420</a>). That's why the import doesn't fail in python3.4.</p>
<p>If you want your code to work in both python2 and python3 in the same way you should always add <code>__init__.py</code> file to packages <em>and</em> use <code>from __future__ import absolute_import</code> in your files.</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://www.python.org/dev/peps/pep-0404/#imports" rel="nofollow">PEP 0404</a>. </p>
<blockquote>
<p>In Python 3, implicit relative imports within packages are no longer available - only absolute imports and explicit relative imports are supported. In addition, star imports (e.g. from x import *) are only permitted in module level code.</p>
</blockquote>
<p>If <code>libraries</code> was in the same directory this would have happened to avoid clashes with packages installed at the system level. It would have been an implicit relative import.</p>
<p>You should be able to <em>navigate</em> to the correct location of the module using <code>..</code>, like:</p>
<pre><code>from ..libraries.controller_utils import *
# or, depending of you directory structure
# put as many dots as directories you need to get out of
from ....common.libraries.controller_utils import *
</code></pre>
<p>But your case seems to be related to the <em>star import</em>. In Python 3 you can only use star imports (<code>from x import *</code>) at the top level of the file, i.e. not inside a function or class definition.</p>
</div>
<span class="comment-copy">What is the directory structure for the module you are importing? which directory are you running the python from?</span>
<span class="comment-copy">What "entry" did you add to <code>sys.path</code> (and how did you add it?)?  Normally, with relative import problems, I'd expect you to find the module on python2.x and not on python3.x ...</span>
<span class="comment-copy">The way in which you are modifying <code>sys.path</code> is wrong. if you add <code>libraries/</code> to <code>sys.path</code> then you should use <code>from controller_utils import *</code> not <code>from libraries.constroller_utils import *</code>.</span>
<span class="comment-copy">You have to add <code>libraries/__init__.py</code>...</span>
<span class="comment-copy">For Python 3 , its called <code>namespace package</code> . Details at - <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow noreferrer">python.org/dev/peps/pep-0420</a> or <a href="https://docs.python.org/3/reference/import.html#namespace-packages" rel="nofollow noreferrer">docs.python.org/3/reference/import.html#namespace-packages</a> or <a href="http://stackoverflow.com/a/32317916/795990">stackoverflow.com/a/32317916/795990</a></span>
<span class="comment-copy">@AnandSKumar Yes, I was just looking into that now.</span>
<span class="comment-copy">This is only valid for intra-package references, That is when the script having the issue is being imported by another script. That is not the case wit the OP , OP is directly launching python terminal and trying to import. In that case doing <code>..</code> would not work . It would complain that relative import went outside scope (or something similar)</span>
<span class="comment-copy">@anand You're right. I'll leave my answer anyway since it could help someone else that gets here by searching for the same question.</span>
