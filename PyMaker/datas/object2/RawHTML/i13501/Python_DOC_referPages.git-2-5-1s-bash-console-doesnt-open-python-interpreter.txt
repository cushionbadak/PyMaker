<div class="post-text" itemprop="text">
<p>If I do it in CMD, it works without issues, but if I try it in Git Bash it doesn't work. I like to use Git Bash as my only console, but I can't do that if it doesn't work with Python 3.4.</p>
<p>Example is in the picture below. This can be easily reproduced. Uninstall Python and Git if they are installed, install Python 3.4, install Git 2.5.1 and you get that result.</p>
<p><a href="https://i.stack.imgur.com/nJV5U.png" rel="noreferrer"><img alt="Console" src="https://i.stack.imgur.com/nJV5U.png"/></a></p>
<p>How can I make the Python interpreter work in Git Bash ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The MinTTY terminal that is the new default terminal for Git simply doesn't support Windows console programs.  I don't know why the decision was made to change the default terminal, but I know a few ways to work around this:</p>
<ol>
<li>Write a Bash alias to launch python with winpty</li>
</ol>
<p><strong>Bash Alias (put in your .bashrc):</strong></p>
<pre><code>alias python=winpty py.exe
</code></pre>
<p><strong>Note</strong>: As of Git for Windows 2.7.1, Winpty is included out of the box.  winpty can be found installed at <code>Git\usr\bin</code>.</p>
<hr/>
<ol start="2">
<li>Write a Bash alias to launch python in interactive mode if there are no arguments:</li>
</ol>
<p><strong>Bash Alias (put in your .bashrc):</strong></p>
<pre><code>function maybe_py() {
    if [ $# -eq 0 ]; then
        /c/Windows/py.exe -i
    else
       /c/Windows/py.exe $@
    fi
}

alias python=maybe_py
</code></pre>
<hr/>
<ol start="3">
<li>Launch python in interactive mode explicitly</li>
</ol>
<p>Note that this may not work correctly using arrow keys to browse command history:</p>
<pre><code>py -i
</code></pre>
<p>Or for scripts:</p>
<pre><code>py script.py
</code></pre>
<p><strong>What Is py.exe?</strong></p>
<p>In case you are wondering why I'm referencing <code>C:\Windows\py.exe</code> instead of a particular <code>python.exe</code> installation, I wanted to explain a few benefits of using it (the <a href="https://docs.python.org/3/using/windows.html#python-launcher-for-windows" rel="nofollow noreferrer">Python Launcher for Windows</a>:</p>
<ul>
<li>It's installed <em>with</em> newer installations of Python (Python 3.3+)</li>
<li>It understands and attempts to use the specified installation of python in <a href="https://stackoverflow.com/a/19305076/936083">shebang lines</a></li>
<li>It works with <a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">Virtual Environments</a> (<a href="https://stackoverflow.com/a/44077346/936083">shebang line example for venv</a>)</li>
</ul>
<p>For changing your preferred/system installation (e.g. for interactive mode), see <a href="https://stackoverflow.com/a/5088548/936083">this answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to explicit python interactive mode: <strong>python -i</strong></p>
<p>You can define an alias in your .bashrc: <strong>alias python='python -i'</strong>, but doing this, you will not be able to run a script file (i.e.: <em>python script.py</em>).</p>
<p>Found here:
<a href="https://stackoverflow.com/questions/3250749/using-windows-python-from-cygwin">Using Windows Python from Cygwin</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Building onto @Darthfett's answer. I had to make sure there were quote marks and not reference the .exe files </p>
<p>So in the end in your <code>.bashrc</code></p>
<p><code>
alias python='winpty python'
alias pip='winpty pip'  # Rescue pip as well
</code></p>
<p>Then is all works</p>
<h3>Python</h3>
<pre><code>Tawanda@Tawanda-PC MINGW64 ~
$ alias python='winpty python'

Tawanda@Tawanda-PC MINGW64 ~
$ python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; exit()
</code></pre>
<h3>Pip</h3>
<pre><code>Tawanda@Tawanda-PC MINGW64 ~
$ alias pip='winpty pip'

Tawanda@Tawanda-PC MINGW64 ~
$ pip -v

Usage:
  pip &lt;command&gt; [options]

Commands:
  install                     Install packages.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Output installed packages in requirements format.
  list                        List installed packages.
  show                        Show information about installed packages.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's trying to open the console for the output.  Unless you compile python or get a version for mingw you may need something like:</p>
<p><a href="https://github.com/rprichard/winpty" rel="nofollow">WinPty</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for @darthfett 's <a href="https://stackoverflow.com/a/33696825/728675">answer</a>, which largely solves the problem!</p>
<p>Just FYI: Same symptom also exists when your script is using <code>import getpass; getpass.getpass()</code>, and in this case <code>python -i your_script.py</code> will NOT fix it, but <code>winpty python your_script.py</code> still works like a charm. (Lucky that they at least provide Winpty out of box with recent versions of Git For Windows.)</p>
<p>So, to setup once (per virtual environment) and forget it, you can append this line at the end of your <code>env/Script/activate</code>:</p>
<pre><code>alias python='winpty python.exe'
</code></pre>
<p>It will work in that bash console. (However, if you happen to be a vim user, it still won't work inside a vim when you do <code>:python my_script.py</code> in vim.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can configure the git bash console by editing the file in your "$HOME/.bashrc"</p>
<p>Add this line to your <code>$HOME/.bashrc</code> </p>
<pre><code>export PATH=$PATH;c:/python34
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When installing git for windows, choose to use windows default console window as shown in the picture below. 
This option allows you to use interactive python or nodejs. Also getpass works on this console.</p>
<p><a href="https://i.stack.imgur.com/YmVqp.png" rel="nofollow noreferrer">enter image description here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>When installing git for windows, choose to use windows default console window as shown in the <a href="https://i.stack.imgur.com/YmVqp.png" rel="nofollow noreferrer">picture</a>. 
This option allows you to use interactive python or nodejs. Also getpass works on this console.</p>
</div>
<span class="comment-copy">I'm having the same problem. Have you found a workaround? Running python -c "&lt;something&gt;" works. The problem seems related only to the interactive shell</span>
<span class="comment-copy">Comment to myself:  <code>python -i</code> with the new git bash console doesn't always work correctly if you are trying to use the arrow keys to retrieve command history.  It seems to move the cursor up through the output, as if it was a text editor.</span>
<span class="comment-copy">Is there any workaround for this?</span>
<span class="comment-copy">@Sushil I just researched and saw an update <a href="http://stackoverflow.com/questions/32597209/python-not-working-in-the-command-line-of-git-bash">here</a>.  It seems the MinTTY terminal will not support windows console programs out of the box, but if you install Git For Windows 2.7.1 or higher, you can use Winpty out of the box to run python.  I have updated the answer appropriately.</span>
<span class="comment-copy">FYI: Same symptom exists when your script is using <code>getpass.getpass()</code>, and <code>python -i your_script.py</code> will NOT fix it, but <code>winpty python your_script.py</code> works like a charm. Lucky that they at least provide Winpty out of box with recent versions of Git For Windows.</span>
<span class="comment-copy">I think you need quotes around the alias since it contains a space.</span>
<span class="comment-copy"><code>python -i</code> with the new git bash console doesn't always work correctly if you are trying to use the arrow keys to retrieve command history.  It seems to move the cursor up through the output, as if it was a text editor.</span>
<span class="comment-copy">Yes, this is true. It's a pity, but this is the only way I found the interpreter working.</span>
<span class="comment-copy"><code>$HOME/.bashrc</code> does not exist by default. Creating it and adding that line, then restarting Git Bash does not make it work with Python.</span>
