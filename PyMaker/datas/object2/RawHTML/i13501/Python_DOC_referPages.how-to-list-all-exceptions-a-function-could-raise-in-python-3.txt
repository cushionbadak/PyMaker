<div class="post-text" itemprop="text">
<p>Is there a programmatic way to get a list of all exceptions a function could raise?</p>
<p>I know for example that <a href="https://docs.python.org/3.4/library/os.html?highlight=os#os.makedirs" rel="nofollow noreferrer"><code>os.makedirs(path[, mode])</code></a> can raise <code>PermissionError</code> (and maybe others), but the documentation only mentions <a href="https://docs.python.org/3.4/library/exceptions.html#OSError" rel="nofollow noreferrer"><code>OSError</code></a>. (This is just an example - maybe even a bad one; I am not especially interested in this function - more in the problem in general).</p>
<p>Is there a programmatic way to find all the possible exceptions when they are not/poorly documented? This may be especially useful in 3rd-party libraries and libraries that do not ship with Python source code.</p>
<p>The solution presented in "<a href="https://stackoverflow.com/questions/1591319/python-how-can-i-know-which-exceptions-might-be-thrown-from-a-method-call">Python: How can I know which exceptions might be thrown from a method call</a>" does not work in Python 3; there is no <a href="https://docs.python.org/2/library/compiler.html" rel="nofollow noreferrer"><code>compiler</code></a> package.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't get reliable results for some (if not most) functions. Some examples:</p>
<ul>
<li><p>functions that execute arbitrary code (e.g. <code>exec(')(rorrEeulaV esiar'[::-1])</code> raises <code>ValueError</code>)</p></li>
<li><p>functions that aren't written in Python</p></li>
<li><p>functions that call other functions that can propagate errors to the caller</p></li>
<li><p>functions re-raising active exceptions in the <code>except:</code> block</p></li>
</ul>
<p>Unfortunately, this list is incomplete.</p>
<p>E.g. <code>os.makedirs</code> is written in Python and you can see its source:</p>
<pre><code>...
try:
    mkdir(name, mode)
except OSError as e:
    if not exist_ok or e.errno != errno.EEXIST or not path.isdir(name):
        raise
</code></pre>
<p>Bare <code>raise</code> re-raises the last active exception (<code>OSError</code> or one of its subclasses). Here's the <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="noreferrer">class hierarchy for <code>OSError</code></a>:</p>
<pre class="lang-none prettyprint-override"><code>+-- OSError
|    +-- BlockingIOError
|    +-- ChildProcessError
|    +-- ConnectionError
|    |    +-- BrokenPipeError
|    |    +-- ConnectionAbortedError
|    |    +-- ConnectionRefusedError
|    |    +-- ConnectionResetError
|    +-- FileExistsError
|    +-- FileNotFoundError
|    +-- InterruptedError
|    +-- IsADirectoryError
|    +-- NotADirectoryError
|    +-- PermissionError
|    +-- ProcessLookupError
|    +-- TimeoutError
</code></pre>
<p>To get the exact exception types you'll need to look into <code>mkdir</code>, functions it calls, functions those functions call etc. </p>
<p>So, <em>getting possible exceptions without running the function is <strong>very</strong> hard</em> and you really should not do it.</p>
<hr/>
<p>However for simple cases like</p>
<pre><code>raise Exception # without arguments
raise Exception('abc') # with arguments
</code></pre>
<p>a combination of <a href="https://docs.python.org/3/library/ast.html" rel="noreferrer"><code>ast</code> module</a> functionality and <a href="https://docs.python.org/3/library/inspect.html#inspect.getclosurevars" rel="noreferrer"><code>inspect.getclosurevars</code></a> (to get exception classes, was introduced in Python 3.3) can produce quite accurate results:</p>
<pre><code>from inspect import getclosurevars, getsource
from collections import ChainMap
from textwrap import dedent
import ast, os

class MyException(Exception):
    pass

def g():
    raise Exception

class A():
    def method():
        raise OSError

def f(x):
    int()
    A.method()
    os.makedirs()
    g()
    raise MyException
    raise ValueError('argument')


def get_exceptions(func, ids=set()):
    try:
        vars = ChainMap(*getclosurevars(func)[:3])
        source = dedent(getsource(func))
    except TypeError:
        return

    class _visitor(ast.NodeTransformer):
        def __init__(self):
            self.nodes = []
            self.other = []

        def visit_Raise(self, n):
            self.nodes.append(n.exc)

        def visit_Expr(self, n):
            if not isinstance(n.value, ast.Call):
                return
            c, ob = n.value.func, None
            if isinstance(c, ast.Attribute):
                parts = []
                while getattr(c, 'value', None):
                    parts.append(c.attr)
                    c = c.value
                if c.id in vars:
                    ob = vars[c.id]
                    for name in reversed(parts):
                        ob = getattr(ob, name)

            elif isinstance(c, ast.Name):
                if c.id in vars:
                    ob = vars[c.id]

            if ob is not None and id(ob) not in ids:
                self.other.append(ob)
                ids.add(id(ob))

    v = _visitor()
    v.visit(ast.parse(source))
    for n in v.nodes:
        if isinstance(n, (ast.Call, ast.Name)):
            name = n.id if isinstance(n, ast.Name) else n.func.id
            if name in vars:
                yield vars[name]

    for o in v.other:
        yield from get_exceptions(o)


for e in get_exceptions(f):
    print(e)
</code></pre>
<p>prints</p>
<pre><code>&lt;class '__main__.MyException'&gt;
&lt;class 'ValueError'&gt;
&lt;class 'OSError'&gt;
&lt;class 'Exception'&gt;
</code></pre>
<p>Keep in mind that this code only works for functions written in Python.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Finding Exception in non built-in source code:</h2>
<p>As said in the topic <a href="https://stackoverflow.com/questions/1591319/python-how-can-i-know-which-exceptions-might-be-thrown-from-a-method-call">Python: How can I know which exceptions might be thrown from a method call</a>, you can get the Abstract Syntax Tree and search for raised exceptions.</p>
<pre><code>import ast

def find_raise(body):
    raises = []
    for ast_ in body:
        if isinstance(ast_, ast.Raise):
            raises.append(ast_)
        if hasattr(ast_, 'body'):
            raises += find_raise(ast_.body)
    return list(set(raises))


test = '''
def f(arg):
    raise OSError(arg)
'''

raises = find_raise(ast.parse(test).body)
print [i.type.func.id for i in raises] # print ['OSError']
</code></pre>
<p>This method works for every piece of code that you have written.</p>
<hr/>
<h2>Finding Exception in Built-in methods</h2>
<p>You <em>cannot</em> parse built-in function like <code>os.makedirs</code>.</p>
<p>Two alternatives:</p>
<ul>
<li>You can have a look at the tests included in your python distribution (<a href="https://hg.python.org/cpython/file/default/Lib/test/test_os.py#l1012" rel="nofollow noreferrer">ex with cpython</a>)</li>
<li>and if your target method offers python source code, you can parse it like previously (the code would be in /usr/lib/python3/*.py) </li>
</ul>
<p>For all native C methods, you are stuck with the documentation and should trust it. When <code>os.makedirs</code> says it only returns <code>OSError</code>, it is true, since <code>PermissionError</code> and <code>FileExistError</code> exceptions  are subclasses of <code>OSError</code>.</p>
<p>To find Errors programmatically for built-in you can use this example:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\w+Error', open.__doc__)
['IOError', 'FileExistsError', 'ValueError']
&gt;&gt;&gt; re.findall(r'\w+Error', os.makedirs.__doc__)
['OSError']
</code></pre>
<p>It catches all exceptions with a name ending with 'Error', it surely can be extended to find all standard exceptions.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/1591319/python-how-can-i-know-which-exceptions-might-be-thrown-from-a-method-call">Python: How can I know which exceptions might be thrown from a method call</a></span>
<span class="comment-copy">"there is no <a href="https://docs.python.org/2/library/compiler.html" rel="nofollow noreferrer"><code>compiler</code></a> package." Then as suggested into your link use the <a href="https://docs.python.org/2/library/parser.html#module-parser" rel="nofollow noreferrer"><code>parser</code></a> one. Or the <a href="https://docs.python.org/3/library/functions.html?highlight=compile#compile" rel="nofollow noreferrer"><code>compile</code></a> builtin or the <a href="https://docs.python.org/2/library/ast.html#ast.parse" rel="nofollow noreferrer"><code>ast.parse</code></a> function</span>
<span class="comment-copy">in order to use the method described there i'd need to have the classes <code>Name</code>, <code>Raise</code>, <code>CallFunc</code>, <code>Const</code>, <code>Getattr</code> from the <code>compiler</code> package. where would i find those?</span>
<span class="comment-copy">I don't think you <i>can</i> get a guaranteed-complete list for arbitrary code, unless that list can include some kind of wildcard value.  Nothing stops a function from executing a statement like <code>raise user_provided_callable('Ouch!')</code> or <code>raise CONFIG['exceptions'].get('nitpick', ValueError)('Whoops!')</code>.  That kind of thing might even be a good idea in some situations, although I'm struggling to think of any beyond, "Because I could!".</span>
<span class="comment-copy">@KevinJ.Chase not to mention built-in exceptions like NameError, KeyError or any other exception that propagates from a function call. Finding the complete list of a function is very likely to be reduceable to halting problem.</span>
<span class="comment-copy">this looks very nice! i tried <code>get_exceptions(os.makedirs)</code> - there it returns nothing.</span>
<span class="comment-copy">@hiroprotagonist This is because of the implementation of <code>os.makedirs</code>.  It uses a bare <code>raise</code> in a <a href="https://github.com/python/cpython/blob/master/Lib/os.py#L242" rel="nofollow noreferrer">block where <code>OSError</code> is caught</a>.  Because of the bare <code>raise</code> (I think), you never get <code>name == 'OSError'</code> in the code above. <code>OSError</code> is actually in the <code>vars</code> ChainMap in the code above), but not the actual subclasses of <code>OSError</code> that might be thrown, I think.  Possibly, you could recurse using <code>getclosurevars</code> as you visit the <code>ast</code> tree, but I'm not even sure that would get everything.</span>
<span class="comment-copy">'cannot parse built-in function' i was afraid of that; <code>PermissionError</code> is nowhere to be found in <code>os.py</code>. i will have a look at your solution. thanks!</span>
<span class="comment-copy">Notice that <code>PermissionError</code> and <code>FileExistError</code> exceptions are subclasses of <code>OSError</code>. So you should be fine <b>only</b> catching <code>OSError</code> and filtering after if needed.</span>
<span class="comment-copy">true; but i'd still need to know about the existence of these exceptions.</span>
<span class="comment-copy">I added an example to find exception form doc. This is not highly accurate but its a good start...</span>
