<div class="post-text" itemprop="text">
<p>I am asking this just to clarify if i am thinking right.</p>
<p>Statically/Dynamically typed 
A language is statically typed if the type of a variable is known at compile time. This in practice means that you as the programmer must specify what type each variable is. Example: Java, C, C++.</p>
<p>A language is dynamically typed if the type of a variable is interpreted at runtime. This means that you as a programmer can write a little quicker because you do not have to specify type everytime. Example: Perl</p>
<p>Static/Dynamic Binding-which the following link clearly explains the difference
<a href="https://stackoverflow.com/questions/16647590/static-binding-and-dynamic-binding">Static Binding and Dynamic Binding</a></p>
<p>The main thing that i want to ask starts from here.
I know the difference between Static Scoping and Dynamic Scoping.
However as i was going through stack overflow people said that C++ and Python are Statically Scoped.</p>
<p>In c++ if i type<br/></p>
<pre><code>int void main(){
   cout&lt;&lt;i;          
   int i=15;
}  
int i=10;
</code></pre>
<p>It works(even in java).However its python equivalent</p>
<pre><code>def foo():
    print(x)
    x=10
x='global'
foo()
</code></pre>
<p>Gives an error.</p>
</div>
<div class="post-text" itemprop="text">
<p>The scope is static in Python as well as in C++. The difference between those languages is related to rules that define start and end of the scope of names.</p>
<p>In C++ the variable <code>i</code> is considered as global before the local definition <code>int i=15;</code>.</p>
<p>In Python:
<a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow">What are the rules for local and global variables in Python?</a>:</p>
<blockquote>
<p>If a variable is assigned a value anywhere within the function’s body,
  it’s assumed to be a local unless explicitly declared as global.</p>
</blockquote>
<p><a href="https://docs.python.org/3.3/reference/executionmodel.html" rel="nofollow">Naming and binding</a>:</p>
<blockquote>
<p>When a name is used in a code block, it is resolved using the nearest
  enclosing scope.</p>
</blockquote>
<p>So, since the variable <code>x</code> is assined inside <code>foo()</code> it is assumed to be a local variable starting from the beginning of the function <code>foo()</code>.
It is possible to treat <code>x</code> within entire function block as global using the <code>global</code> keyword:</p>
<pre><code>def foo():                
    global x              # name 'x' refers to the global variable
    print(x)              # print global 'x'
    x=10                  # assign global variable

x='global'
foo() # print 'global'
foo() # print '10'
</code></pre>
<p>Actually it is possible to access the global variable <code>x</code> even if you want to have a local name <code>x</code> in the same function using <code>globals()</code> build-it function:</p>
<pre><code>def foo():                # name 'x' refers to the local variable
    print(globals()['x']) # access the global name 'x'
    x=10                  # assign local variable
    print(x)              # print local 'x'

x='global'
foo()
</code></pre>
</div>
<span class="comment-copy">So bascially the scoping rules are different</span>
