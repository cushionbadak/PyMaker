<div class="post-text" itemprop="text">
<p>I am trying to concatenate pieces specific lines together between two files. Such that I want to add something from line 2 in file2 onto line 2 of file1. Then from line 6 from file2 onto line 6 of file 1 and so on. Is there a way to simultaneously iterate through these two files to do this?  (It might be helpful to know that the input files are about 15GB each).</p>
<p>Here is a simplified example:</p>
<p>File 1:</p>
<pre><code>Ignore
This is a
Ignore
Ignore
Ignore
This is also a
Ignore
Ignore
</code></pre>
<p>File 2:</p>
<pre><code>Ignore
sentence
Ignore
Ignore
Ignore
sentence
Ignore
Ignore
</code></pre>
<p>Output file:</p>
<pre><code>Ignore
This is a sentence
Ignore
Ignore
Ignore
This is also a sentence
Ignore
Ignore
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python3</strong>:</p>
<pre><code>with open('bigfile_1') as bf1:
    with open('bigfile_2') as bf2:
        for line1, line2 in zip(bf1, bf2):
            process(line1, line2)
</code></pre>
<p>Importantly, bf1 and bf2 will not read the entire file in at once. They are iterators which know how to produce one line at a time.</p>
<p><a href="https://docs.python.org/3/library/functions.html#zip"><code>zip()</code></a> works fine with iterators and will produce an interator itself, in this case pairs of lines for you to process.</p>
<p>Using <code>with</code> ensures the files will be closed afterwards.</p>
<p><strong>Python 2.x</strong> </p>
<pre><code>import itertools

with open('bigfile_1') as bf1:
    with open('bigfile_2') as bf2:
        for line1, line2 in itertools.izip(bf1, bf2):
            process(line1, line2)
</code></pre>
<p>Python 2.x can't use zip the same way - it'll produce a list instead of an iterable, eating all of your system memory with those 15GB files. We need to use a special iterable version of zip.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> built-in to loop over multiple <em>iterables</em> at once.</p>
<p><strong>Example</strong></p>
<pre><code>x = y = [1, 2, 3]
for a, b in zip(x, y):
    print(a, b)
</code></pre>
<p>The output will look like this:</p>
<pre><code>1 1
2 2
3 3
</code></pre>
<p>The same principle will work for your files.</p>
<pre><code>with open("/path/to/file-1") as file_1:
    with open("/path/to/file-2") as file_2:
        for line_1, line_2 in zip(file_1, file_2):
            print(a, b)
</code></pre>
<p>Your output will be the concatenation of the matching lines from either file separated by a single space.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use zip function. Below you have sample usage.</p>
<pre><code>$ cat f1
f1 l1
f1 l2
f1 l3

$ cat f2
f2 l1
f2 l2
f2 l3

$cat test.py 
with open('f1') as f1:
    with open('f2') as f2:
        for lf1, lf2 in zip(f1, f2):
            print lf1.strip(), lf2.strip()

$ python test.py 
f1 l1 f2 l1
f1 l2 f2 l2
f1 l3 f2 l3
</code></pre>
</div>
<span class="comment-copy">What do you have so far? Share some code.</span>
<span class="comment-copy">Python 2 or 3? Python 3 will create generators by default in some places which might be convenient; in 2 we will have to take care.</span>
<span class="comment-copy">I'm using python 2</span>
<span class="comment-copy">Isn't this <a href="http://stackoverflow.com/a/2081880/3516028">stackoverflow.com/a/2081880/3516028</a> a solution for the size problem?</span>
<span class="comment-copy">And what about <code>linecache</code> <a href="https://docs.python.org/2/library/linecache.html" rel="nofollow noreferrer">docs.python.org/2/library/linecache.html</a>?</span>
<span class="comment-copy">what happens if they are not the same in length?</span>
<span class="comment-copy">Note that Python 2's <code>zip</code> function returns a list with all the pairs in it. That will probably blow up the system's memory for large files. Use <code>itertools.izip</code> to get behavior like Python 3's <code>zip</code> (which is a generator).</span>
<span class="comment-copy">@triptych <i>python 2</i> returns the list. you're showing docs for python 3. please check the version of the API docs.</span>
<span class="comment-copy">@Triptych You should combine the first two lines: <code>with open('bigfile_1) as bf1, open('bigfile_2') as bf2:</code> and use normal 4 space indents.</span>
<span class="comment-copy">Good catch @acushner</span>
<span class="comment-copy">"The input files are about 15GB each" so <code>readlines()</code> on both into memory at once will fail almost certainly.</span>
<span class="comment-copy">No, your edit is wrong. Not only does your <code>with</code> code not show how to iterate two files simultaneously, your "warning" is outright false. It will not be "VERY slow" -- it will run out of memory trying to allocate 30GB of RAM and fail utterly.</span>
<span class="comment-copy">@PuercoPop It is against site etiquette for me to edit his answer and code into something that it is not. What is rude about saying exactly what is wrong with a provided answer when it does not answer the question?</span>
<span class="comment-copy">In Python 2 you can use <code>itertools.izip</code> to avoid reading the whole file at once. In Python 3, that's the default behavior of <code>zip</code>.</span>
<span class="comment-copy">@PuercoPop Those two comments address different edits in the revision history. I downvoted, explained. An edit was made. I explained why it did not address the problem. If you think it's rude, rather than arguing with me in comments, flag it as rude/offensive and have a mod take a look at it. The point about when OP stated they were using Python 2 is invalid: that's the reason you wait to answer questions after clarifying comments are made. If you answer while it's still ambiguous, it could turn out you are wrong.</span>
<span class="comment-copy">this is exactly what Triptych suggested 6 minutes ago..</span>
<span class="comment-copy">Yes, and I haven't seen that as I was editing an answer... He was just faster then me.</span>
<span class="comment-copy">You should look at what other people suggested before you do. Otherwise, imagine a question thread with INF number of same answer.</span>
<span class="comment-copy">Can you imagine a situation when I'm writing a response, hitting "add answer" and seing alredy the same answer upvoted 3 times? It hapened here...</span>
<span class="comment-copy">Happens a lot, happens to you, me and my dog. It doesn't mean that you should post it. Simply upvote that answer, or be quicker next time.</span>
