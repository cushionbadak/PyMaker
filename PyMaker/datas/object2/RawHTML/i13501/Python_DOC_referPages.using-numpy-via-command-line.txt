<div class="post-text" itemprop="text">
<p>I need to generate a random matrix in python using the numpy module. The matrix should get its dimensions from the command line, which is the part with which I am having trouble. I would like to know how I should read the dimensions from an input in the command line. </p>
</div>
<div class="post-text" itemprop="text">
<p>What about using <code>sys.argv</code>?</p>
<p><strong>my_file.py</strong></p>
<pre><code>import sys
import numpy as np

print sys.argv

print np.random.random((int(sys.argv[1]), int(sys.argv[2])))
</code></pre>
<p>Result:</p>
<pre><code>$ python my_file.py 3 5
['my_file.py', '3', '5']
[[ 0.03555021  0.46601168  0.54834666  0.78802335  0.67905328]
 [ 0.11735256  0.17789133  0.69066883  0.12928539  0.90023792]
 [ 0.12968023  0.05540043  0.03892649  0.99929185  0.22661845]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>temp.py</strong></p>
<pre><code>import argparse
from numpy.random import rand

parser = argparse.ArgumentParser()
parser.add_argument("x", type=int, help="number of rows")
parser.add_argument("y", type=int, help="number of columns")
args = parser.parse_args()
print rand(args.x, args.y)
</code></pre>
<p>Usage from the command line:</p>
<pre><code>$ python temp.py 5 3
[[ 0.72344512  0.47394825  0.60086466]
 [ 0.35750443  0.42532382  0.61578443]
 [ 0.54963336  0.57135564  0.57787271]
 [ 0.28440563  0.48063044  0.55327626]
 [ 0.88462794  0.03964404  0.38479897]]

$ python temp.py -h
usage: temp.py [-h] x y

positional arguments:
  x           number of rows
  y           number of columns

optional arguments:
  -h, --help  show this help message and exit
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a> do the heavy lifting for you</p>
<p>import argparse</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description='Create a Numpy Matrix')
parser.add_argument('width', type=int, help='Matrix Width')
parser.add_argument('height', type=int, help='Matrix Height')

args = parser.parse_args()
print(args.width)
print(args.height)
</code></pre>
<p>Then invoke your script like so:
<code>python script.py 50 20</code></p>
</div>
<span class="comment-copy">To tie this to other the answers, <code>argparse</code> parses <code>sys.argv[1:]</code>.</span>
<span class="comment-copy">That was extremely helpful ! Yay , it worked :)</span>
<span class="comment-copy">Don't hesitate to accept the answer then ;)</span>
