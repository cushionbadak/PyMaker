<div class="post-text" itemprop="text">
<p>I hit a problem with my nginx+uwsgi+django site.
I know it's nothing special to django+uwsgi, should be something with logging module itself.</p>
<p>Within my site, I use RotatingFileHandler to log special entries, but, when uwsgi running with multiple worker processors,today i find that,
multiple log files are changing at the same time. For example, here is file snippet:</p>
<pre><code>[root@speed logs]# ls -lth
total 18M
-rw-rw-rw- 1 root root  2.1M Sep 14 19:44 backend.log.7
-rw-rw-rw- 1 root root  1.3M Sep 14 19:43 backend.log.6
-rw-rw-rw- 1 root root  738K Sep 14 19:43 backend.log.3
-rw-rw-rw- 1 root root  554K Sep 14 19:43 backend.log.1
-rw-rw-rw- 1 root root 1013K Sep 14 19:42 backend.log.4
-rw-rw-rw- 1 root root  837K Sep 14 19:41 backend.log.5
-rw-rw-rw- 1 root root  650K Sep 14 19:40 backend.log.2
-rw-rw-rw- 1 root root  656K Sep 14 19:40 backend.log
-rw-r--r-- 1 root root   10M Sep 13 10:11 backend.log.8
-rw-r--r-- 1 root root     0 Aug 21 15:53 general.log
[root@speed-app logs]#
</code></pre>
<p>Actually, I set rotate file to 10M perfile and upto 10 files.</p>
<p>I googled a lot and many people hit this before, seems logging module itself cannot support this.</p>
<p>And I find someone mentioned ConcurrentLogHandler(<a href="https://pypi.python.org/pypi/ConcurrentLogHandler/0.9.1" rel="noreferrer">https://pypi.python.org/pypi/ConcurrentLogHandler/0.9.1</a>).
Anybody uses this guy before? I see it's based on file lock, I don't know if this guy's performance is good enouth.</p>
<p>Or anyone has better idea to log multiple uwsig instances to same rotated file ?</p>
<p>Thanks.
Wesley</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for the heck of it, here is a complete solution example which uses python StreamHandler, uWSGI "daemonized file logging", and <code>logrotate</code> daemon to log to file with rotation.</p>
<p>As you will see, uWSGI logging captures stdout/stderr from your app and redirects it either to stdout/stderr (by default) or to other logger/handlers as defined.</p>
<h3>Setup Django/uWSGI</h3>
<p>Your Django <code>settings.py</code></p>
<pre><code>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s - %(process)s - %(levelname)s - %(name)s : %(message)s',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}
</code></pre>
<p>Somewhere in your code</p>
<pre><code>log = logging.getLogger(__name__)
log.info("test log!")
</code></pre>
<p>Run uWSGI with some logging params</p>
<pre><code>$ uwsgi --http :9090 --chdir=`pwd -P` --wsgi-file=wsgi.py \
    --daemonize=test.log \  # daemonize AND set log file
    --log-maxsize=10000  \  # a 10k file rotate
    --workers=4             # start 4 workers
</code></pre>
<h3>Output</h3>
<p>Excerpt of test.log</p>
<pre><code>*** uWSGI is running in multiple interpreter mode ***
spawned uWSGI master process (pid: 79755)
spawned uWSGI worker 1 (pid: 79813, cores: 1)
spawned uWSGI worker 2 (pid: 79814, cores: 1)
spawned uWSGI worker 3 (pid: 79815, cores: 1)
spawned uWSGI worker 4 (pid: 79816, cores: 1)
spawned uWSGI http 1 (pid: 79817)
2015-10-12 07:55:48,458 - 79816 - INFO - testapp.views : test log!
2015-10-12 07:55:51,440 - 79813 - INFO - testapp.views : test log!
2015-10-12 07:55:51,965 - 79814 - INFO - testapp.views : test log!
2015-10-12 07:55:52,810 - 79815 - INFO - testapp.views : test log!
</code></pre>
<p>In the same dir, after a while:</p>
<pre><code>-rw-r-----   1 big  staff   1.0K Oct 12 09:56 test.log
-rw-r-----   1 big  staff    11K Oct 12 09:55 test.log.1444636554
</code></pre>
<h3>Logrotate</h3>
<p>Alternatively, to handle rotating the files yourself, omit the <code>--log-maxsize</code> parameter and use a <code>logrotate</code> config file (<code>/etc/logrotate.d/uwsgi-test-app</code>):</p>
<pre><code>/home/demo/test_django/*log {
    rotate 10
    size 10k
    daily
    compress
    delaycompress
}
</code></pre>
<p>Please note, the above values are for example sake, you probably don't want the rotate size at 10k. For more info on the logrotate format, see <a href="http://www.rackspace.com/knowledge_center/article/understanding-logrotate-utility" rel="nofollow">an example blog post</a>.</p>
</div>
<span class="comment-copy">my offer use a <code>logger server on localhost</code> and send  every log request.</span>
<span class="comment-copy">this works same way as sysloghandler, eh?</span>
<span class="comment-copy">Syslog is what I use most often; even without resorting to "advanced" servers (e.g rsyslog), you can <a href="http://unix.stackexchange.com/a/66305/17836">set it up quickly with logrotate</a>. There is also method recommended in <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes" rel="nofollow noreferrer">python docs</a> which uses Queue (<a href="http://stackoverflow.com/a/894284/484127">example</a> | <a href="https://github.com/jruere/multiprocessing-logging" rel="nofollow noreferrer">packaged</a>)</span>
<span class="comment-copy">Incidently, <a href="https://uwsgi-docs.readthedocs.org/en/latest/Logging.html?highlight=logging" rel="nofollow noreferrer">uWSGI documentation on logging</a> explains their implementation and gives examples.</span>
<span class="comment-copy">Hi, thanks for detailed reply, but have you tried when uwsgi workers are more than 1?</span>
<span class="comment-copy">I have verified uWSGI works as intended with 4 processes all logging nicely (in turns) to same file, which is rotated once size is reached. The example has been updated to show the new output</span>
