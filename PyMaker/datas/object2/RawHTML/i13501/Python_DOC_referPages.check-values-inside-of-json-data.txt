<div class="post-text" itemprop="text">
<p>Could you please help me? I have response with json data and would like to check not only the structure of the json but also some values inside. json data is represented by build-in python types (dict, list, str, ...). Could you please advise easy way to check data inside some arbitrary json in python?</p>
<p>For example let's take following json:</p>
<pre><code>{"employees":[
    {"firstName":"John", "lastName":"Doe"},
    {"firstName":"Anna", "lastName":"Smith"},
    {"firstName":"Peter", "lastName":"Jones"}
]}
</code></pre>
<p>I would like to check that responses have 3 elements in employees lists with specific values in firstName and lastName.</p>
<p>I understand that if I have json as a python dict I can check any value inside just by doing:</p>
<pre><code>data["employees"][0]["firstName"] == ???
</code></pre>
<p>Maybe in this simple case it is not big deal. But in my case I have responses with complex structures where interesting (to me) data are deep inside in different places. It is hard to write something like data['a']['b'][0]['c'][1] for each value which should be checked...is there a better way to check data inside complex json?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you would like to check that you have 3 elements in employees list with specific firstName you could use check_json_data function from here <a href="https://github.com/mlyundin/check-json-data" rel="nofollow">https://github.com/mlyundin/check-json-data</a></p>
<pre><code>data = {"employees":[
{"firstName":"John", "lastName":"Doe"},
{"firstName":"Anna", "lastName":"Smith"},
{"firstName":"Peter", "lastName":"Jones"}
]}

exp_data = {"employees": list_verifier([{"firstName":"John"},
    {"firstName": "Anna"},
    {"firstName": "Peter"}], 
linker=lambda item1, item2, i1, i2:item1['firstName'] == item2['firstName'], strict=True)}

print check_json_data(exp_data, data)
</code></pre>
</div>
<span class="comment-copy">JSON decodes to Python types, yes. You'll need to give us a sample structure and your code to show where you are stuck, but all you'll have is dictionaries, lists, numbers, strings and booleans. Oh, and <code>None</code> objects perhaps. The normal ways of addressing those apply, it doesn't matter that the data structure was sourced from JSON.</span>
<span class="comment-copy">Have you looked at the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code></a> module?</span>
<span class="comment-copy">Yes, json module allows parse json, but I need something more - check data inside parsed json.</span>
<span class="comment-copy">Ok. Thank you. I will consider this as one of possible solutions.</span>
