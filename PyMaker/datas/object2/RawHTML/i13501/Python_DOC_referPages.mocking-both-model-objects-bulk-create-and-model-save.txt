<div class="post-text" itemprop="text">
<p>I'm attempting to mock <em>both</em> <code>bulk_create</code> and <code>save</code> for a dry run. 
I've created code which in essence does following:</p>
<pre class="lang-py prettyprint-override"><code>@mock.patch.object(SomeModel.objects, 'bulk_create')
@mock.patch.object(SomeModel, 'save')
def a_dry_run(mocked_bulk_create, mocked_save):

   def print_bulk(obj_list):
       print 'doing bulk_create'
       for obj in obj_list:
          print obj

   def print_save(instance):
       print 'doing save'
       print instance

   mocked_bulk_create.side_effect = print_bulk
   mocked_bulk_create.return_value = True
   mocked_save.side_effect = print_save
   mocked_save.return_value = True
</code></pre>
<p>The problem is that when I do <code>bulk_create</code> instead of <code>print_bulk</code> it executes <code>print_save</code>. How do I fix that or is there a cleaner way to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The order of argument should be reversed. As you can see at <a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow">Quick Guide</a> where describe <code>patch</code> the order of mock arguments passed to the function follow <code>patch</code>'s decorator from bottom to top.</p>
<p>In you case simply change the patch order or the function signature like</p>
<pre><code>def a_dry_run(mocked_save, mocked_bulk_create):
</code></pre>
</div>
