<div class="post-text" itemprop="text">
<p>I have three lists:</p>
<pre><code>EX_Num = [1.0, 2.0, 3.0]
Height_str = ['tall', 'medium', 'short']
total_carbon = [8.425169446611104, 8.917085904771866, 6.174348482965436]
</code></pre>
<p>How do I make a nested list where <code>column1 = EX_Num</code>, <code>column2 = Height_str</code> and <code>column3 = total_carbon</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not clear what you are asking... but if you just want a list of lists, just append them.</p>
<pre><code>&gt;&gt;&gt; nested_list.append(EX_Num)
&gt;&gt;&gt; nested_list.append(Height_str)
&gt;&gt;&gt; nested_list.append(total_carbon)
&gt;&gt;&gt; nested_list
[[1.0, 2.0, 3.0], ['tall', 'medium', 'short'], [8.425169446611104, 8.917085904771866, 6.174348482965436]]
</code></pre>
<p>If you want all the values put into one list, just concatenate them.</p>
<pre><code>&gt;&gt;&gt; nested_list = EX_Num + Height_str + total_carbon
&gt;&gt;&gt; nested_list
[1.0, 2.0, 3.0, 'tall', 'medium', 'short', 8.425169446611104, 8.917085904771866, 6.174348482965436]
</code></pre>
<p>If you need something different, you need to make your question more clear.]</p>
<p>EDIT based on comment:</p>
<p>If you know that all the lists are the same length:</p>
<pre><code>nested_list = []
# be careful, if the lists aren't all the same length, you will get errors
for x in range(len(EX_Num)):
    tmp = [EX_Num[x], Height_str[x], total_carbon[x]]
    nested_list.append(tmp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> function to join multiple iterables together into tuples:</p>
<pre><code>ex = [1.0, 2.0, 3.0]
height = ['tall', 'medium', 'short']
total_carbon = [8.4, 8.9, 6.1]

joint = zip(ex, height, total_carbon)
print(joint)

# [(1.0, 'tall', 8.4), (2.0, 'medium', 8.9), (3.0, 'short', 6.1)]
</code></pre>
<p>Note: please don't use "hungarian notation" for your variable names (<code>_num</code>, <code>_str</code>, etc.) -- they're just clutter, <em>specially</em> in a dynamic language like Python.</p>
<hr/>
<p>If you need to keep related data grouped together, it's more readable to create a simple container type for it. <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code></a> is great for this:</p>
<pre><code>from collections import namedtuple
Thing = namedtuple('Thing', ['ex', 'height', 'total_carbon'])
my_things = [Thing(*t) for t in zip(ex, height, total_carbon)]
</code></pre>
<p>Now you can refer to stuff by name -- for example, <code>my_things[0].height</code> -- instead of needing to remember the index positions of each attribute.</p>
</div>
<span class="comment-copy">In what language? Please read <a href="http://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example</a> and <a href="http://stackoverflow.com/help/how-to-ask">How do I ask a good question?</a>.</span>
<span class="comment-copy">This question is unclear, but if you are indeed using python, the semi-colons are unnecessary and shouldn't be used. I am assuming the period at the end of list 3 is a type-o but it would be a syntax error if not.</span>
<span class="comment-copy">@ jdLemon, thanks for answering.Sorry I didn't make my question clear enough. I want to make a final list like this: [[1.0, 'tall', 8.425169446611104,], [2.0, 'medium', 8.917085904771866], [3.0, 'short', 6.174348482965436]].</span>
<span class="comment-copy">I've edited my answer. You should edit your question to reflect the answer you are looking for like you posted in the comment.</span>
<span class="comment-copy">@jdfLemon don't use <code>for</code> loops to pair stuff up; <code>zip</code> does it for you.</span>
