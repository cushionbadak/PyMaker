<div class="post-text" itemprop="text">
<p>I was writing a simple Hello World Python script and tried a couple different things to see what I would get.</p>
<p>Results:</p>
<pre><code>print "Hello World"      ===&gt; Hello World
print "Hello"," ","World ===&gt; Hello   World
print "Hello" "World"    ===&gt; HelloWorld
</code></pre>
<p>The results surprised me... from experience with other languages I expected to get something more like this:</p>
<pre><code>print "Hello World"      ===&gt; Hello World
print "Hello"," ","World ===&gt; Hello World
print "Hello" "World"    ===&gt; Syntax Error!
</code></pre>
<p>After trying a couple more examples I realized that it seems to add a space whenever you separate strings with a ",".</p>
<p>...Even more strangely, it doesn't seem to care if you give it multiple strings without a "," separating them as the third example shows.</p>
<hr/>
<p>Why does Python's print function act this way???</p>
<p>Also is there a way to stop it from adding spaces for "," separated strings?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because the <code>print</code> statement adds spaces between <em>separate values</em>, as <a href="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement" rel="nofollow noreferrer">documented</a>:</p>
<blockquote>
<p>A space is written before each object is (converted and) written, unless the output system believes it is positioned at the beginning of a line.</p>
</blockquote>
<p>However, <code>"Hello" "World"</code> is not two values; it is <em>one</em> string. Only whitespace between two string literals is ignored and those string literals are concatenated (<a href="https://stackoverflow.com/questions/26433138/what-is-under-the-hood-of-x-y-z-in-python/26433185#26433185">by the parser</a>):</p>
<pre><code>&gt;&gt;&gt; "Hello" "World"
"HelloWorld"
</code></pre>
<p>See the <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow noreferrer"><em>String literal concatenation</em> section</a>:</p>
<blockquote>
<p>Multiple adjacent string literals (delimited by whitespace), possibly using different quoting conventions, are allowed, and their meaning is the same as their concatenation.</p>
</blockquote>
<p>This makes it easier to combine different string literal styles (triple quoting and raw string literals and 'regular' string literals can all be used to create one value), as well as make creating a <em>long</em> string value easier to format:</p>
<pre><code>long_string_value = (
    "This is the first chuck of a longer string, it fits within the "
    'limits of a "style guide" that sets a shorter line limit while '
    r'at the same time letting you use \n as literal text instead of '
    "escape sequences.\n")
</code></pre>
<p>This feature is in fact inherited from C, it is not a Python invention.</p>
<p>In Python 3, where <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print()</code> is a <em>function</em></a> rather than a <em>statement</em>, you are given more control over how multiple arguments are handled. Separate arguments are delimited by the <code>sep</code> argument to the function, which defaults to a space.</p>
<p>In Python 2, you can get the same functionality by adding <code>from __future__ import print_function</code> to the top of your module. This disables the statement, making it possible to use the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">same function in Python 2 code</a>.</p>
</div>
<span class="comment-copy">Python inserts a space between each element when you write with <code>print</code>. Concatenate the strings manually if you don't like it (or, with Python3, use <code>print(..., sep="")</code>)</span>
<span class="comment-copy">Why is this question being downvoted? There doesn't seem to be anything wrong with it.</span>
<span class="comment-copy">@≈ÅukaszR. Try <code>print "a", "b"</code> and <code>print ("a", "b")</code>. It's not the same.</span>
<span class="comment-copy">Very interesting!  I will have to read up on Python syntax</span>
<span class="comment-copy">@ColonelThirtyTwo you are absolutely right.</span>
<span class="comment-copy">Wow thanks Martijn, This is very informative.  My python version is 2.7.8 so I may look into that <code>__future__</code> import you are talking about.  Its also quite interesting that the Python parser automatically concatenates 2 strings separated by a space for you!</span>
<span class="comment-copy">Unfortunately I can't go to version 3 since it is incompatible with CVS and where I work they still use CVS as their version control system...</span>
