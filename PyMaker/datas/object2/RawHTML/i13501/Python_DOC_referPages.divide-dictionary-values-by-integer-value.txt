<div class="post-text" itemprop="text">
<p>If a <code>mydict</code> is not empty, I access an arbitrary element as:</p>
<pre><code>mydict[mydict.keys()[0]]
</code></pre>
<p>Is there any better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 3, non-destructively and iteratively:</p>
<pre><code>next(iter(mydict.values()))
</code></pre>
<p>On Python 2, non-destructively and iteratively:</p>
<pre><code>mydict.itervalues().next()
</code></pre>
<p>If you want it to work in both Python 2 and 3, you can use the <code>six</code> package:</p>
<pre><code>six.next(six.itervalues(mydict))
</code></pre>
<p>though at this point it is quite cryptic and I'd rather prefer your code.</p>
<p>If you want to remove any item, do:</p>
<pre><code>key, value = mydict.popitem()
</code></pre>
<p>Note that "first" is not an appropriate term here.  This is "any" item, because <code>dict</code> is not an ordered type.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only need to access one element (being the first by chance, since dicts do not guarantee ordering) you can simply do this in <em>Python 2</em>:</p>
<pre><code>my_dict.keys()[0]     -&gt; key of "first" element
my_dict.values()[0]   -&gt; value of "first" element
my_dict.items()[0]    -&gt; (key, value) tuple of "first" element
</code></pre>
<p>Please note that (at best of my knowledge) Python does not guarantee that 2 successive calls to any of these methods will return list with the same ordering. This is not supported with Python3.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3, The way :</p>
<pre><code>dict.keys() 
</code></pre>
<p>return a value in type : dict_keys(), we'll got an error when got 1st member of keys of dict by this way:</p>
<pre><code>dict.keys()[0]
TypeError: 'dict_keys' object does not support indexing
</code></pre>
<p>Finally, I convert dict.keys() to list @1st, and got 1st member by list splice method:</p>
<pre><code>list(dict.keys())[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>to get a key</h3>
<pre><code>next(iter(mydict))
</code></pre>
<h3>to get a value</h3>
<pre><code>next(iter(mydict.values()))
</code></pre>
<h3>to get both</h3>
<pre><code>next(iter(mydict.items())) # or next(iter(mydict.viewitems())) in python 2
</code></pre>
<p>The first two are Python 2 and 3. The last two are lazy in Python 3, but not in Python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others mentioned, there is no "first item", since dictionaries have no guaranteed order (they're implemented as hash tables).  If you want, for example, the value corresponding to the smallest key, <code>thedict[min(thedict)]</code> will do that.  If you care about the order in which the keys were inserted, i.e., by "first" you mean "inserted earliest", then in Python 3.1 you can use <a href="http://docs.python.org/py3k/library/collections.html?highlight=collections#collections.OrderedDict" rel="nofollow noreferrer">collections.OrderedDict</a>, which is also in the forthcoming Python 2.7; for older versions of Python, download, install, and use the ordered dict backport (2.4 and later) which you can find <a href="http://pypi.python.org/pypi/ordereddict/1.1" rel="nofollow noreferrer">here</a>.</p>
<p><strong>Python 3.7</strong>
<a href="https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights" rel="nofollow noreferrer">Now</a> dicts are insertion ordered.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about, this. Not mentioned here yet.</p>
<p><strong>py 2 &amp; 3</strong></p>
<pre><code>a = {"a":2,"b":3}
a[list(a)[0]] # the first element is here
&gt;&gt;&gt; 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ignoring issues surrounding dict ordering, this might be better:</p>
<pre><code>next(dict.itervalues())
</code></pre>
<p>This way we avoid item lookup and generating a list of keys that we don't use.</p>
<h2>Python3</h2>
<pre><code>next(iter(dict.values()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python3 </p>
<pre><code>list(dict.values())[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can always do:</p>
<pre><code>for k in sorted(d.keys()):
    print d[k]
</code></pre>
<p>This will give you a consistently sorted (with respect to <strong>builtin</strong>.hash() I guess) set of keys you can process on if the sorting has any meaning to you. That means for example numeric types are sorted consistently even if you expand the dictionary.</p>
<p>EXAMPLE</p>
<pre><code># lets create a simple dictionary
d = {1:1, 2:2, 3:3, 4:4, 10:10, 100:100}
print d.keys()
print sorted(d.keys())

# add some other stuff
d['peter'] = 'peter'
d['parker'] = 'parker'
print d.keys()
print sorted(d.keys())

# some more stuff, numeric of different type, this will "mess up" the keys set order
d[0.001] = 0.001
d[3.14] = 'pie'
d[2.71] = 'apple pie'
print d.keys()
print sorted(d.keys())
</code></pre>
<p>Note that the dictionary is sorted when printed. But the key set is essentially a hashmap!</p>
</div>
<div class="post-text" itemprop="text">
<p>For both Python 2 and 3:</p>
<pre><code>import six

six.next(six.itervalues(d))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>simplest way for python3:</p>
<pre><code>list(dict.keys())[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No external libraries, works on both Python 2.7 and 3.x:</p>
<pre><code>&gt;&gt;&gt; list(set({"a":1, "b": 2}.values()))[0]
1
</code></pre>
<p>For aribtrary key just leave out .values()</p>
<pre><code>&gt;&gt;&gt; list(set({"a":1, "b": 2}))[0]
'a'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Subclassing <code>dict</code> is one method, though not efficient. Here if you supply an integer it will return <code>d[list(d)[n]]</code>, otherwise access the dictionary as expected:</p>
<pre><code>class mydict(dict):
    def __getitem__(self, value):
        if isinstance(value, int):
            return self.get(list(self)[value])
        else:
            return self.get(value)

d = mydict({'a': 'hello', 'b': 'this', 'c': 'is', 'd': 'a',
            'e': 'test', 'f': 'dictionary', 'g': 'testing'})

d[0]    # 'hello'
d[1]    # 'this'
d['c']  # 'is'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>first_key, *rest_keys = mydict
</code></pre>
</div>
<span class="comment-copy">What he said.. this is only really a valid question if there's only one element in the dict, or you don't care which you get back.</span>
<span class="comment-copy">Yup, I just need to access to whatever element in the dict, so that's why I want to access to first element.</span>
<span class="comment-copy">@Stan: but as Greg said, there is no definite  "first" element in dict. so maybe you should change your question, just to be clear</span>
<span class="comment-copy">I think it is a valid question. If you need to access an arbitrary element, and you are sure that the dict is not empty, it may be a good idea to ask for the "first", because the number of items may not be known.</span>
<span class="comment-copy">@MichaelScheper You have to cast to list : <code>list(mydict.keys())[0]</code>.</span>
<span class="comment-copy">Don't you mean <code>dict.iterkeys().next()</code>?</span>
<span class="comment-copy">@John Machin: Well, the question seems to access value associated with the first key, so that's what I do in the answer as well.</span>
<span class="comment-copy">this looks better: <code>dict.values().__iter__().__next__()</code> :)</span>
<span class="comment-copy">it's annoying that dict.keys() is not directly iterable.</span>
<span class="comment-copy">for a non-destructive popitem you can make a (shallow) copy: <code>key, value = dict(d).popitem()</code></span>
<span class="comment-copy">That only works in Python 2.x, for 3.x you have to use <code>list(my_dict.keys())[0]</code></span>
<span class="comment-copy"><code>TypeError: 'dict_values' object does not support indexing</code></span>
<span class="comment-copy">So, what complexity class is this? Surely, <code>list(my_dict.keys())[0]</code> is not  lazy?</span>
<span class="comment-copy">This is the easiest solution and works in both python2 and python3.</span>
<span class="comment-copy">For my money. I say this answer is the most intuitive</span>
<span class="comment-copy">Yeah, but this doesn't answer the OP question, which is how to get at the VALUES, not the keys.</span>
<span class="comment-copy">@MikeWilliamson hopefully most readers will knows how to get the corresponding value, given a key, from a python dict.</span>
<span class="comment-copy">To get an arbitrary item, not an arbitrary key, you can analogously do <code>list(dict.values())[0]</code>.</span>
<span class="comment-copy"><code>dict.values()</code> returns a view, so should be O(1). <code>list(a)</code> returns a new list, so would be O(n).</span>
<span class="comment-copy">Also it seems like it doesn't work in python2 if a = {"a": {"1"}}</span>
<span class="comment-copy">values() will make a copy of all values (as will keys() for keys), so this will make many operations O(n^2).</span>
<span class="comment-copy">So will the OPs version? I'll change this to use an iterator then.</span>
<span class="comment-copy">This is only Python 2. For Python 3, we need <code>next(iter(dict.values()))</code> to get the same result without creating the list.</span>
<span class="comment-copy">What happens if the dictionary has a billion entries? :)</span>
<span class="comment-copy">This does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post.</span>
<span class="comment-copy">This exactly answers the question <code>Is there any better way to do this?</code> in short manner.</span>
<span class="comment-copy">This answer has been given twice already, one of which has been on this site for almost 5 years. This is a comment on another answer (as in: <i>here's how to improve the answer to make it work with both Python 2 &amp; 3</i>), and not a "new" answer, as such. SO's review system automatically placed a somewhat unhelpful note in this case...</span>
<span class="comment-copy">No, sir. You added this variant to your 5 y.o. answer just 17 hours ago, 1 hour after I wrote this answer. Try to use 'find' on this page for 'six' word and you will find only 6 matches only in these 2 answers. Anyway, does this answer really disturb you? I think this might help other people in future and this is OK. So, what's the deal?</span>
<span class="comment-copy">That's because IMHO this answer should have been an edit to that post in the first place. Without the edit, people would have to scroll a number of pages down to see your answer; do you think that's more useful than editing a highly upvoted answer which is almost exactly the same as yours?</span>
<span class="comment-copy">It is redundant to use <code>.keys()</code> if you are wrapping using <code>list(...)</code>. just <code>list(self)</code> can work</span>
<span class="comment-copy">Thank you for this code snippet, which might provide some limited, immediate help. A <a href="//meta.stackexchange.com/q/114762/206345">proper explanation would greatly improve its long-term value</a> by showing <i>why</i> this is a good solution to the problem, and would make it more useful to future readers with other, similar questions. Please <a href="https://stackoverflow.com/posts/54747361/edit">edit</a> your answer to add some explanation, including the assumptions you've made.</span>
