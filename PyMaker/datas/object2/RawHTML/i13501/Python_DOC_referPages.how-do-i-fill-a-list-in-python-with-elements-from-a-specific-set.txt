<div class="post-text" itemprop="text">
<p>If I have a set of integers which denote the values that a list element can take and a python list of a given length. </p>
<p>I want to fill the list with all possible combinations. </p>
<p><strong>example</strong></p>
<blockquote>
<p>list <code>length=3</code> and the <code>my_set ={1,-1}</code></p>
</blockquote>
<p><strong>Possible combinations</strong></p>
<pre><code>[1,1,1],[1,1,-1],[1,-1,1],[1,-1,-1],
[-1,1,1],[-1,1,-1],[-1,-1,1],[-1,-1,-1]
</code></pre>
<p>I tried approaching with random.sample method from random class
but it doesn't help. I did: </p>
<pre><code>my_set=[1,-1]
from random import sample as sm
print sm(my_set,1)    #Outputs: -1,-1,1,1 and so on..(random)
print sm(my_set,length_I_require)        #Outputs**:Error
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's what <code>itertools.product</code> is for :</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product({1,-1},repeat=3))
[(1, 1, 1), (1, 1, -1), (1, -1, 1), (1, -1, -1), (-1, 1, 1), (-1, 1, -1), (-1, -1, 1), (-1, -1, -1)]
&gt;&gt;&gt; 
</code></pre>
<p>And if you want the result as list you can use <code>map</code> to convert the iterator of tuples to list if list (in python3 it returns an iterator which as a more efficient way you can use a list comprehension ):</p>
<pre><code>&gt;&gt;&gt; map(list,product({1,-1},repeat=3))
[[1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1], [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]]
</code></pre>
<p>In python3 :</p>
<pre><code>&gt;&gt;&gt; [list(pro) for pro in product({1,-1},repeat=3)]
[[1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1], [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.product()</code> function</a>:</p>
<pre><code>from itertools import product

result = [list(combo) for combo in product(my_set, repeat=length)]
</code></pre>
<p>The <code>list()</code> call is optional; if tuples instead of lists are fine to, then <code>result = list(product(my_set, repeat=length))</code> suffices.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; length = 3 
&gt;&gt;&gt; my_set = {1, -1}
&gt;&gt;&gt; list(product(my_set, repeat=length))
[(1, 1, 1), (1, 1, -1), (1, -1, 1), (1, -1, -1), (-1, 1, 1), (-1, 1, -1), (-1, -1, 1), (-1, -1, -1)]
&gt;&gt;&gt; [list(combo) for combo in product(my_set, repeat=length)]
[[1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1], [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]]
</code></pre>
<p><code>random.sample()</code> gives you a random subset of the given input sequence; it doesn't produce all possible combinations of values.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>lst_length = 3
my_set = {1,-1}
result = [[x] for x in my_set]
for i in range(1,lst_length):
    temp = []
    for candidate in my_set:
        for item in result:
            new_item = [candidate]
            new_item += item
            temp.append(new_item)
    result = temp
print result
</code></pre>
<p>If the list length is 1, the result is a list whose elements equal to the set. Every time the list length increases one, the result can be gotten by append each element of the set to the resulted list.</p>
</div>
<span class="comment-copy">Exactly what I wanted.</span>
