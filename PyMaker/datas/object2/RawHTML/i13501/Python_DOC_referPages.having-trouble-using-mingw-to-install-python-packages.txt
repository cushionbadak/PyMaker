<div class="post-text" itemprop="text">
<p>I've spent hours googling this, but haven't been able to find any answers.  I'm trying to install a package for Python 3.4, but keep running into problems.  First, I tried just running "python setup.py install":</p>
<pre><code>running install
running build
running build_py
running build_ext
error: Python was built with Visual Studio 2003;
extensions must be built with a compiler than can generate compatible binaries.
Visual Studio 2003 was not found on this system. If you have Cygwin installed,
you can try compiling with MingW32, by passing "-c mingw32" to setup.py.
</code></pre>
<p>After a long time of searching, I downloaded mingw, added C:/MinGW/bin to my path, made sure MinGW has gcc, and made my distutils.cfg file with [build] and compiler = mingw32 in it.  On running python setup.py install again, I got the same error.</p>
<p>I tried what it suggested, passing -c mingw32 to setup.py.  It can't do it for setup.py install, so I did setup.py build:</p>
<pre><code>python setup.py build -c mingw32
running build
running build_py
running build_ext
</code></pre>
<p>That all seems well and good, but when I try to install after building it tries to build it all over again, and because I can't pass in the compiler for some reason it fails.</p>
<p>How can I get setup.py to work?  If it helps, I'm trying to install the <a href="https://github.com/caseman/noise" rel="nofollow">noise</a> package, and am using Windows Vista 64-bit (I don't have much money...).</p>
</div>
<div class="post-text" itemprop="text">
<p>I had similar issues recently.</p>
<p>Some tips for Windows builds:</p>
<ul>
<li>Check your Python binary at a Windows command prompt: <code>where.exe python.exe</code>
<ul>
<li>Did you forget to activate a virtualenv?</li>
</ul></li>
<li>Check your env vars: <code>%PYTHONPATH%</code> and <code>%PYTHONHOME%</code>
<ul>
<li>Ref: <a href="https://docs.python.org/3/using/cmdline.html#environment-variables" rel="nofollow">https://docs.python.org/3/using/cmdline.html#environment-variables</a></li>
</ul></li>
<li>Clean-up a previous build: <code>python setup.py clean --all</code>
<ul>
<li>If you forget the <code>--all</code>, it is useless for most use cases.  (More like a dusting.)</li>
</ul></li>
<li>View <code>setup.py</code> online help.

<ul>
<li>For <code>setup.py</code>: <code>python setup.py --help</code></li>
<li>For <code>build</code> command:  <code>python setup.py build --help</code></li>
<li>For <code>install</code> command:  <code>python setup.py install --help</code></li>
<li>For <code>clean</code> command:  <code>python setup.py clean --help</code></li>
</ul></li>
<li>Order of operations should be: clean (optional), build, install

<ul>
<li>Clean: <code>python setup.py clean --all</code></li>
<li>Build: <code>python setup.py build</code> (Optional argument: <code>-c mingw32</code>)</li>
<li>Install: <code>python setup.py install --record files.txt</code></li>
<li>The optional arguments <code>--record files.txt</code> help to uninstall if you broken something.</li>
<li>After install, check the folder <code>Libs\site-packages</code> for the Python installation.  Do you see the package?  Usually, you can see <code>*.pyd</code> files, which are similar to DLLs.</li>
</ul></li>
<li>Never underestimate the complexity of build and run environments.  (I often make this mistake.)  It is easy to have a single, errant environment variable break a build or run.

<ul>
<li>Open a new command prompt before the build.</li>
<li>Open a new command prompt for the test run after install.</li>
</ul></li>
</ul>
</div>
<span class="comment-copy">You can download binaries from  <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="nofollow noreferrer">lfd.uci.edu/~gohlke/pythonlibs</a></span>
<span class="comment-copy">Yup. You are in luck. Noise is available.</span>
