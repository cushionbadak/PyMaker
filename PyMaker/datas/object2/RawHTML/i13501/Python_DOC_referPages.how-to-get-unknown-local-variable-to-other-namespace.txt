<div class="post-text" itemprop="text">
<p>I want to read some input, which contains python assignment statements like this string:</p>
<pre><code>"VARIABLE = 'something' + OTHER_VAR"
</code></pre>
<p>So I use one of these:</p>
<pre><code>exec("VARIABLE = 'something' + OTHER_VAR")
exec("VARIABLE = 'something' + OTHER_VAR", globals(), locals())
</code></pre>
<p>I want to use this variable in other code, but after exec(...) it is not in current namespace. 
It is possible to get the variable value like this:</p>
<pre><code>locals()['VARIABLE']
</code></pre>
<p>however, if I dont know the name of variable it is not solution for me.</p>
<p>So how to get that new variable into my namespace?</p>
<p><strong>UPDATE:</strong>
My data for exec are like this:</p>
<pre><code>COMPBLOCK =  StringLeft(MyPlatform.HierarchicalName,6) +"_IADI." + CMP + "." + BLOCK ;
SetCustomPropertyValue("DEVLM2",COMPBLOCK + ".DEVLM2",false);
SetCustomPropertyValue("CRIT",COMPBLOCK + ".CRIT",false);
SetCustomPropertyValue("UNACK",COMPBLOCK + ".UNACK",false);
SetCustomPropertyValue("ALMSTA_26",COMPBLOCK + ".ALMSTA#B26",false);
</code></pre>
<p>I defined functions <code>SetCustomPropertyValue</code> and <code>StringLeft</code>. I want to avoid some complicated translation of this script to python with all possible inputs. <code>Exec()</code> seems to be very quick solution, but after reading <a href="https://stackoverflow.com/questions/1450275/modifying-locals-in-python">this post - Modifying locals in python</a> I am little bit stuck.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>pay attention to the comments warning about how dangerous it is to execute arbitrary code from a foreign source.</li>
<li><p>if the statements have a consistent format, for example like the one in the example, you could easly parse it and extract the variable name:  </p>
<pre><code>varname = stmt.split('=')[0].strip()
</code></pre>
<p>or something more sophisticated using regular expressions</p></li>
<li><p>if the statement always introduces exactly one new variable, you could compare <code>locals()</code> before and after execution and check which new variable has been added:</p>
<pre><code>old_locals = set(locals().keys())
exec(stmt)
new_locals = set(locals().keys())
varname = (new_locals-old_locals).pop()
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>How about using a small domain specific language as found in <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow">configparser</a> to declare your new variables? 
This way you don't need to run untrusted code, and get simple things like variable expansion (though probably in a slightly different syntax).</p>
<p>E.g. considering the following input </p>
<pre><code>FOO = world
BAR = hello, @FOO@
</code></pre>
<p>as simple parser could look like:</p>
<pre><code>lines=["FOO = world", "BAR = hello, @FOO@" ]
vars={}

# store variables in dictionary, with expansion
for line in lines:
  key, value = [x.strip() for x in line.split('=', 1)]
  for k in vars:
     value=value.replace('@%s@' % (k), str(vars[k]))
  vars[key]=value
# make variables available in local namespace
for k in vars:
    locals()[k]=vars[k]
## use new variable
print(BAR)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is some issues around <code>locals()</code> in Python 3 (see this <a href="https://stackoverflow.com/questions/1450275/modifying-locals-in-python">post</a>) so generally speaking, changes in <code>locals()</code> during runtime is not allowed.</p>
<p>So I made some workaround, where I defined my own namespace dictonary <code>my_dict_locals</code> and <code>my_dict_globals</code>. To <code>my_dict_globals</code> I copied some necessary definitions from current namespace (like <code>SetCustomPropertyValue</code> function definition ...). Then I just called</p>
<pre><code>exec(each, my_dict_globals, my_dict_locals)
</code></pre>
<p>where <code>each</code> could be like one of following:</p>
<pre><code>COMPBLOCK =  StringLeft(MyPlatform.HierarchicalName,6) +"_IADI." + CMP + "." + BLOCK ;
SetCustomPropertyValue("DEVLM2",COMPBLOCK + ".DEVLM2",false);
SetCustomPropertyValue("CRIT",COMPBLOCK + ".CRIT",false);
SetCustomPropertyValue("UNACK",COMPBLOCK + ".UNACK",false);
SetCustomPropertyValue("ALMSTA_26",COMPBLOCK + ".ALMSTA#B26",false);`
</code></pre>
<p>This works for me as I expected and I have in <code>my_dict_locals</code> all variables from above script defined.</p>
</div>
<span class="comment-copy">Why is this a problem in the first place? What is the context for evaluating arbitrary Python expressions here?</span>
<span class="comment-copy">What do you mean by <i>your namespace</i>? <code>locals()</code> <i>is</i> the local namespace. Something like <code>exec("a = 5"); print(a);</code> works, i.e. <code>a</code> is then in the local namespace. What do you want to achieve?</span>
<span class="comment-copy"><code>exec</code>ing arbitrary strings is dangerous. Are you sure you <i>really</i> want to do this?</span>
<span class="comment-copy">here is the problem: if i execute above code in console, it works (VARIABLE is define). But if I make a function like <code>def fn(line): exec(line) print(VARIABLE)</code> I got <code>NameError: 'VARIABLE' is not defined</code></span>
<span class="comment-copy">your function <code>fn</code> has a different <i>local</i> namespace (that's the point of local namespaces...)</span>
<span class="comment-copy">Yes, this is good solution for this, however, I also have other types of statements, like: <code>SetCustomPropertyValue('DEVLM2',COMPBLOCK + '.DEVLM2',False);</code>. I defined function SetCustomPropertyValue, it can read the variables, but, it cannot see the resulting variable. (In this case, this could be translated to <code>DEVLM2 = COMPBLOCK + '.DEVLM2'</code>.</span>
<span class="comment-copy">And also there will be some other statements...</span>
