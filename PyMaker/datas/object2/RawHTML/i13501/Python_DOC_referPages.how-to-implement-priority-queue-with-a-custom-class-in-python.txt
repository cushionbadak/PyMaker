<div class="post-text" itemprop="text">
<p>I am from java background, I need to something like this</p>
<pre><code>public class Item implements Comparable&lt;Item&gt; {

    int score;
    ArrayList&lt;Integer&gt; arr;

    @Override
    public int compareTo(Item o2) {
        return score != o2.score ? score - o2.score : arr.size() - o2.arr.size();
    }


    public static void main(String[] args) {
        PriorityQueue&lt;Item&gt; p = new PriorityQueue&lt;Item&gt;();

    }
}
</code></pre>
<p>So I have a class which has two variable, score and list. There is a calculation for natural ordering for also too.</p>
<p>Could somebody please tell me how to do it python? heapq does not work for me, because my score function checks score on the basis of two variables not one.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're in luck because an implementation <a href="https://docs.python.org/2/library/queue.html#Queue.PriorityQueue" rel="nofollow">already exists</a>.</p>
<p>Make sure to follow the regular structuring of entries and attach the priority to all entries inserted into the queue using a tuple of the form <code>(priorities_tuple, entry)</code>.</p>
<p>An example:</p>
<pre><code>import Queue
import random
pq = Queue.PriorityQueue()
todos = ["eat", "sleep", "python"]
# obvously replace random with your 
todos_with_priorities = [((random.random(),), e) for e in todos]
for e in todos:
    pq.put(e)
</code></pre>
<p>Consume the queue like so:</p>
<pre><code>priorities, item = pq.get()
</code></pre>
<p>To form more and more complex priorities add more members to the tuple structure. In your case the tuple should be something like: <code>((e.score, len(e.arr)), e)</code>.</p>
</div>
<span class="comment-copy">But if my data is in the form of tuple, I can't handle the tite breaking unlike comareTo above?</span>
<span class="comment-copy">@Dude look at the edit. Tell me if you're missing something.</span>
<span class="comment-copy">The <code>PriorityQueue</code> in <code>Queue</code> comes with extra baggage (it's thread safe). If performance is an issue then I'd recommend creating a class wrapper for the <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer"><code>heapq</code></a> module.</span>
