<div class="post-text" itemprop="text">
<p>I have a quick question about an issue I discovered. In the Python shell I can write <code>test1 = "hello".upper()</code> and when I type <code>test1</code> I get <code>"HELLO"</code>, as expected. However, if I do something similar with a list, such as <code>test2 = ["hello", "world"].reverse()</code>, and I try to return test2, I get nothing; it is a "NoneType" with no value assigned to it. Why does this happen? Why can I make an assignment with a method acting on a string but I can't make an assignment when there is a method acting on a list?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="noreferrer"><code>list.reverse()</code></a> reverses in place. This means it returns <code>None</code>, so when you do <code>test2 = ["hello", "world"].reverse()</code>, you're assigning the result of <code>.reverse()</code> (<code>None</code>) to <code>test2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, strings are immutable, while lists are mutable. This means you can change an existing list object:</p>
<pre><code>&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; id(l)
140370614775608
&gt;&gt;&gt; l.append(4)
&gt;&gt;&gt; l
[1,2,3,4]
&gt;&gt;&gt; id(l)
140370614775608
</code></pre>
<p>You cannot change a string object, however; you can only create a new string object using the first as a starting point.</p>
<pre><code>&gt;&gt;&gt; s1 = "hello"
&gt;&gt;&gt; id(s1)
140370614929376
&gt;&gt;&gt; s1.upper()
'HELLO'
&gt;&gt;&gt; id(s1)
140370614929376
</code></pre>
<p>In Python, the convention is that a method either modifies an object and returns <code>None</code>, or returns a new, modified object while leaving the original alone.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason that you can sometimes do one thing with one object and not do something different with a different object is that different objects and different methods are different.  The documentation for each method says what it does.  You need to look at the documentation for the individual method you are using to see what it does.  There is no reason to assume that <code>someString.upper()</code> will work like <code>someList.reverse()</code>, because strings are not lists, and <code>upper</code> is not <code>reverse</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>.upper() returns a new string, which you assign to test1. The string you operated on ("hello") is not modified. Indeed, it couldn't be since strings are immutable in Python.</p>
<p>.reverse() modifies in-place. That means the object ["hello", "world"] got modified. Unfortunately, you don't have a variable pointing to that object, so you can't see that.</p>
<p>This is a convention in Python. Functions that modify in-place return None, whereas functions that create a modified copy return that copy.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>.upper()</code> returns a new String object, on the contrary, <code>.reverse()</code> is a destructive method, which means that the receiver is changed forever.</p>
<p>For reversing a list you can use</p>
<pre><code>test2 = ["hello", "world"][::-1]
</code></pre>
<p>which would work for strings too:</p>
<pre><code>In [1]: test2 = ["hello", "world"][::-1]

In [2]: test2
Out[2]: ['world', 'hello']

In [3]: test2 = "world"[::-1]

In [4]: test2
Out[4]: 'dlrow'
</code></pre>
<p>Functional constructs are built into the language and not in methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>The rest of the answers here do a good explanation. I just want to add that if you wanted to do an assignment with <code>reverse</code>, you can actually use <code>reversed</code> like so:</p>
<pre><code>test2 = list( reversed( ["hello", "world"] ) )
# Result: ['world', 'hello']
</code></pre>
<p><code>sort</code> and <code>sorted</code> are similar in this respect.</p>
</div>
<span class="comment-copy">In python strings are immutable, so <code>upper()</code> has to return a new string. Lists are mutable so many operations are done inplace, e.g. <code>reverse()</code></span>
<span class="comment-copy">@achampion, I believe that ALL methods on a list are done in place.</span>
<span class="comment-copy"><code>List.__add__</code> creates a new list.</span>
<span class="comment-copy">@Akavall Nope, <code>pop</code>, <code>index</code>, <code>count</code>, etc.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/9300257/1322401">It is a convention in Python that methods that mutate sequences return <code>None</code>.</a></span>
<span class="comment-copy">See also from the Design and History of Python <a href="https://docs.python.org/2/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list" rel="nofollow noreferrer">Why doesnâ€™t list.sort() return the sorted list?</a></span>
<span class="comment-copy">The first sentence would make a perfect Coelho quote :)</span>
