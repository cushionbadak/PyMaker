<div class="post-text" itemprop="text">
<p><code>deque.popleft()</code> and <code>list.pop(0)</code> seem to return the same result. Is there any performance difference between them and why?</p>
</div>
<div class="post-text" itemprop="text">
<p>deque.popleft() is faster than list.pop(0), because the deque has been optimized to do popleft() approximately in O(1), while list.pop(0) takes O(n) (see <a href="https://docs.python.org/2/library/collections.html#deque-objects" rel="noreferrer">deque objects</a>).</p>
<p>Comments and code in _collectionsmodule.c for deque and listobject.c for list provide implementation insights to explain the performance differences. Namely that a deque object "is composed of a doubly-linked list", which effectively optimizes appends and pops at both ends,  while list objects are not even singly-linked lists but C arrays (of pointers to elements (see <a href="https://hg.python.org/cpython/file/2.7/Include/listobject.h#l22" rel="noreferrer">Python 2.7 listobject.h#l22</a> and <a href="https://hg.python.org/cpython/file/3.5/Include/listobject.h#l23" rel="noreferrer">Python 3.5 listobject.h#l23</a>), which makes them good for fast random access of elements but requires O(n) time to reposition all elements after removal of the first.</p>
<p>For Python 2.7 and 3.5, the URLs of these source code files are: </p>
<ol>
<li><p><a href="https://hg.python.org/cpython/file/2.7/Modules/_collectionsmodule.c" rel="noreferrer">https://hg.python.org/cpython/file/2.7/Modules/_collectionsmodule.c</a></p></li>
<li><p><a href="https://hg.python.org/cpython/file/2.7/Objects/listobject.c" rel="noreferrer">https://hg.python.org/cpython/file/2.7/Objects/listobject.c</a></p></li>
<li><p><a href="https://hg.python.org/cpython/file/3.5/Modules/_collectionsmodule.c" rel="noreferrer">https://hg.python.org/cpython/file/3.5/Modules/_collectionsmodule.c</a> </p></li>
<li><p><a href="https://hg.python.org/cpython/file/3.5/Objects/listobject.c" rel="noreferrer">https://hg.python.org/cpython/file/3.5/Objects/listobject.c</a></p></li>
</ol>
<p>Using %timeit, the performance difference between deque.popleft() and list.pop(0) is about a factor of 4 when both the deque and the list have the same 52 elements and grows to over a factor of 1000 when their lengths are 10**8. Test results are given below. </p>
<pre><code>import string
from collections import deque

%timeit d = deque(string.letters); d.popleft()
1000000 loops, best of 3: 1.46 µs per loop

%timeit d = deque(string.letters)
1000000 loops, best of 3: 1.4 µs per loop

%timeit l = list(string.letters); l.pop(0)
1000000 loops, best of 3: 1.47 µs per loop

%timeit l = list(string.letters);
1000000 loops, best of 3: 1.22 µs per loop

d = deque(range(100000000))

%timeit d.popleft()
10000000 loops, best of 3: 90.5 ns per loop

l = range(100000000)

%timeit l.pop(0)
10 loops, best of 3: 93.4 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there performance difference?</p>
</blockquote>
<p>Yes. <code>deque.popleft()</code> is <code>O(1)</code> -- a constant time operation. While <code>list.pop(0)</code> is <code>O(n)</code> -- linear time operation: the larger the list the longer it takes.</p>
<blockquote>
<p>Why?</p>
</blockquote>
<p>CPython list implementation is array-based. <code>pop(0)</code> removes the first item from the list and it requires to shift left <code>len(lst) - 1</code> items to fill the gap.</p>
<p><code>deque()</code> implementation uses a doubly linked list. No matter how large the deque, <code>deque.popleft()</code> requires a constant (limited above) number of operations.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, and it's considerable if you have a long list or deque. All elements in a list are placed contiguously in memory, so if you remove any element, all subsequent elements must be shifted one position to the left - therefore, the time required to remove or insert an element at the start of a list is proportional to the length of the list. A deque, on the other hand, is specifically constructed to allow fast insertions or removal at <em>either</em> end (typically by allowing "empty" memory locations at the beginning of the deque, or to wrap around so that the end of the memory segment occupied by the deque can contain elements that are actually considered to be at the beginning of the deque).</p>
<p>Compare the performance of these two snippets:</p>
<pre><code>d = deque([0] * 1000000)
while d:
    d.popleft()
    if len(d) % 100 == 0:
        print(len(d))

lst = [0] * 1000000
while lst:
    lst.pop(0)
    if len(lst) % 100 == 0:
        print(len(lst))
</code></pre>
</div>
<span class="comment-copy">@Bin: I've only mentioned CPython because I can't find the appropriate reference in <a href="https://docs.python.org/3/reference/" rel="nofollow noreferrer">the spec</a> (it looks like a bug if Python reference doesn't specify the time complexity for Python list). Though in practice, all Python implementations (that I know of) respect the expected <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">informal time complexity for list operations</a>.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/collections.html#collections.deque" rel="nofollow noreferrer">docs.python.org/2/library/collections.html#collections.deque</a> comments on the time complexity of list for pop(0) and insert(0, v).</span>
<span class="comment-copy">@TrisNefzger: deque docs express "common knowledge" but specifying the list behavior in passing seems less binding then the language reference.</span>
<span class="comment-copy">You are totally right. There should be an official, binding document of the performance characteristics of Python collection-like data structures similar to <a href="http://docs.scala-lang.org/overviews/collections/performance-characteristics.html" rel="nofollow noreferrer">docs.scala-lang.org/overviews/collections/…</a> for Scala.</span>
<span class="comment-copy">Thanks. So for list the subsequest elements must be shifted.</span>
<span class="comment-copy">BTW, the same holds for <code>deque.appendleft()</code> vs <code>list.insert(0)</code></span>
<span class="comment-copy">Bin: Yes. @AndreaCorbellini: Quite so.</span>
