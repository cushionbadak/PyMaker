<div class="post-text" itemprop="text">
<p>I'm going over other people's code in CoderByte exercises. I was just reviewing the first exercise to review a string. </p>
<p>Here is the code:</p>
<pre><code>def FirstReverse(s): 
  ar = bytearray(s)
  ar.reverse()
  return str(ar) 
print FirstReverse("Argument goes here")
</code></pre>
<p>I printed ar after the first line and just got the string back so I'm unclear how the bytearray helped. I also still didn't understand it after reading the documentation here: <a href="https://docs.python.org/2/library/functions.html#bytearray" rel="nofollow">https://docs.python.org/2/library/functions.html#bytearray</a></p>
<p>So what is a bytearray? Did it make sense to use it in this example?  </p>
</div>
<div class="post-text" itemprop="text">
<p>As the <a href="https://docs.python.org/2/library/functions.html#bytearray" rel="nofollow">doc</a> says,</p>
<blockquote>
<p>Return a new array of bytes. ... is a mutable sequence of integers in the range 0 &lt;= x &lt; 256</p>
</blockquote>
<p>For example,</p>
<pre><code> &gt;&gt;&gt; s = 'hello world'
 &gt;&gt;&gt; print bytearray(s) 
 hello world
 &gt;&gt;&gt; bytearray(s)[0] 
 104
</code></pre>
<p>and <code>104</code> is the ASCII side of <code>h</code>.</p>
<p>Class <code>bytearray</code> has the method <code>reverse</code>, but <code>string</code> doesn't. In order to reverse the string, this code first gets its bytes array, and then reserves, finally gets the reversed string by <code>str</code>.</p>
<p>In addition, you can use <code>[::-1]</code> to reverse a string.</p>
<pre><code>&gt;&gt;&gt; 'Argument goes here'[::-1]
'ereh seog tnemugrA'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The difference between a <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow">str</a> and a <a href="https://docs.python.org/3/library/functions.html#bytearray" rel="nofollow">bytearray</a> is that a <code>str</code> is a sequence of Unicode code points, whereas a <code>bytearray</code> is a sequence of bytes. A single Unicode String may be represented by multiple different <code>bytearray</code>s, depending on the encoding format (e.g. there would be different <code>bytearray</code>s for the UTF-8 representation and the UTF-16 representation of the same <code>str</code>). In addition, <code>str</code> is intended to represent text; by contrast, <code>bytearray</code> may be used to represent arbitrary byte sequences that do not correspond to text at all (e.g. sequences of bytes that are not valid Unicode in any standard encoding format and that will, in fact, be interpreted as something completely different from text altogether such as integer sequences, serialized objects, extended precision integers, or anything else you would want to represent as a sequence of bytes).</p>
<p>In addition to this distinction, <code>str</code> is immutable whereas <code>bytearray</code> is mutable. This means that transformations on <code>str</code> necessarily perform copying operations; by contrast, the contents of a <code>bytearray</code> may be updated / modified in place.</p>
<p>In this particular example, there really is no reason to use a <code>bytearray</code> (and in fact, doing that is more dangerous than using a reversed slice of <code>str</code>, because <code>bytearray.reverse()</code> reverses the underlying bytes... for characters that are encoded by more than one byte, this may result in totally invalid Unicode sequences when interpreting back into Unicode code points). However, if you want to examine or manipulate the encoded form of a string or perform something that is totally unrelated to raw text (like populate the bytes of a datagram packet), that would be a use case for <code>bytearray</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't see how it helped personally. You can do this type of reversal natively with a string by just slicing it with a step size of -1:</p>
<pre><code>def FirstReverse(s):
    return s[::-1]
print FirstReverse("Argument goes here")
</code></pre>
<p>I timed the bytearray version and this version using Python 2.7.10 and didn't see one being faster than the other.</p>
<p>So I guess it is a different approach, but I don't see it as a better approach.</p>
<p>The only advantage I could see is if the string were unicode and you are using Python 2.x instead of 3.x (because Python 2.x strings were not natively unicode). However, to pull a unicode string into a bytearray, you need to specify the encoding, which wasn't done here. So it must not have been for that purpose.</p>
</div>
<span class="comment-copy">It is an array of bytes that can be mutable in-place, which is an operation that <code>str</code> or <code>byte</code> types don't support.</span>
<span class="comment-copy">But in this case the mutability is of no use - all that is returned is a <code>str</code> cast of <code>ar</code>, which is function-scoped and not used outside of the function.</span>
<span class="comment-copy">Thanks. Printing out bytearray(s)[0] in your example helped me understand it.</span>
<span class="comment-copy">Your first paragraph is only true for Python 3, while the code in the question only works in Python 2 (assuming <code>s</code> is a <code>str</code>; it would work in Python 3 if <code>s</code> is a <code>bytes</code> object) - calling <code>bytearray</code> with a text string (Python 2 <code>unicode</code>/Python 3 <code>str</code>) requires an encoding.</span>
