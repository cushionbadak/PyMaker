<div class="post-text" itemprop="text">
<p>I have two lists <em>x</em> and <em>y</em>, both of length <em>n</em>, with <em>x<sub>i</sub></em> and <em>y<sub>i</sub></em> forming a pair. How could I take a random sample of <em>m</em> values from these two lists while preserving the pairing information (e.g. x[10] and y[10] would be together in the resulting sample) </p>
<p>My initial idea is this.</p>
<ul>
<li>use zip to create a list of tuples</li>
<li>shuffle the list of tuples</li>
<li>select the first <em>m</em> tuples from the list</li>
<li>break up the tuples into new paired lists</li>
</ul>
<p>And the code would look something like this.</p>
<pre><code>templist = list()
for tup in zip(x, y):
    templist.append(tup)
random.shuffle(templist)
x_sub = [a for a, b in templist[0:m]]
y_sub = [b for a, b in templist[0:m]]
</code></pre>
<p>This seems rather kludgy to me. Is there any way I could make this more clear, concise, or Pythonic?</p>
</div>
<div class="post-text" itemprop="text">
<p>maybe you mean sampling m elements</p>
<pre><code>x_sub, y_sub = zip(*random.sample(list(zip(x, y)), m))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have two lists with elements that are direct pairs of each other and simply <code>zip</code> them (and in python 3, cast that object into a <code>list</code>), then use <code>random.sample</code> to take a sample.</p>
<pre><code>&gt;&gt;&gt; m = 4
&gt;&gt;&gt; x = list(range(0, 3000, 3))
&gt;&gt;&gt; y = list(range(0, 2000, 2))
&gt;&gt;&gt; random.sample(list(zip(x, y)), m)
[(2145, 1430), (2961, 1974), (9, 6), (1767, 1178)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have two lists of the same dimensions, you just want to sample a subset of these elements and pair the results.</p>
<pre><code>x = [1,2,3,4,5] 
y = [6,7,8,9,10]
sample_size = 3
idx = np.random.choice(len(x), size=sample_size, replace=False)
pairs = zip([x[n], y[n]) for n in idx]
&gt;&gt;&gt; pairs
[(5, 10), (2, 7), (1, 6)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can implement the <code>random_product</code> itertools recipe.  I will use a third-party library, <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a>, that implements this recipe for us.  Install this library via <code>pip install more_itertools</code>.</p>
<p><strong>Code</strong></p>
<pre><code>import more_itertool as mit


x, y, m = "abcdefgh", range(10), 2

iterable = mit.random_product(x, y, repeat=m) 
</code></pre>
<p><strong>Results</strong></p>
<pre><code>iterable
# ('e', 9, 'f', 3)
</code></pre>
<p>It is not clear in what form the OP wants the results, but you can group <code>x</code> and <code>y</code> together, e.g. <code>[(x[0], y[0]), (x[1], y[1]), ...]</code>:</p>
<pre><code>paired_xy = list(zip(*[iter(iterable)]*2))
paired_xy
# [('e', 9), ('f', 3)]
</code></pre>
<p>See also <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.sliced" rel="nofollow noreferrer"><code>more_itertools.sliced</code></a> and <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.grouper" rel="nofollow noreferrer"><code>more_itertools.grouper</code></a> for grouping consecutive items.</p>
<p>Alternatively, you may <code>zip</code> further to group along <code>x</code> and <code>y</code>, e.g.  <code>[(x[0], x[1], ...), (y[0], y[1], ...)]</code>:</p>
<pre><code>paired_xx = list(zip(*paired_xy))
paired_xx
# [('e', 'f'), (9, 3)]
</code></pre>
<p>Note, this approach accepts any number of iterables, <code>x</code>, <code>y</code>, <code>z</code>, etc.</p>
<pre><code># Select m random items from multiples iterables, REF 101
x, y, m = "abcdefgh", range(10), 2
a, b, c = "ABCDE", range(10, 100, 10), [False, True]
iterable = mit.random_product(x, y, a, b, c, repeat=m) 
iterable
# ('d', 6, 'E', 80, True, 'a', 1, 'D', 50, False)
</code></pre>
<hr/>
<p><strong>Details</strong></p>
<p>From the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a>:</p>
<pre><code>def random_product(*args, repeat=1):
    "Random selection from itertools.product(*args, **kwds)"
    pools = [tuple(pool) for pool in args] * repeat
    return tuple(random.choice(pool) for pool in pools)
</code></pre>
<p>We can see the function indeed accepts multiple arguments which each become a collection of pools.  The size of the pool scales by the value of <code>repeat</code> keyword. A random selection is made from each pool and tupled together as the final result.</p>
<p>See also <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code> docs</a> for more tools.</p>
</div>
<span class="comment-copy">Have you looked at <a href="https://docs.python.org/2/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample</code></a>?</span>
<span class="comment-copy">@metatoaster As a replacement for the shuffle command? The whole solution would still be a bit kludgy. Unless <code>random.sample</code> could take two paired lists as input.</span>
<span class="comment-copy">I like that this solution creates two new lists, rather than a single list of tuples. Kind of dense otherwise, but conciseness and clarity always seem to be at odds!</span>
<span class="comment-copy">I get an error trying to execute this (assuming m=3)</span>
<span class="comment-copy">@Alexander <code>m</code> is the sample size, the OP didn't provide it just the variable <code>m</code>, what error - works fine for me.</span>
<span class="comment-copy">@Alexander sampling m elements in the two lists</span>
<span class="comment-copy">With the following inputs, I get the following error (Python 2.7.10): x = [1,2,3,4,5]  y = [6,7,8,9,10]  m = 3  TypeError: random_sample() takes at most 1 positional argument (2 given)</span>
