<div class="post-text" itemprop="text">
<p>I'm trying to run this:</p>
<pre><code>def ReadWord(fid,fmt,Addr):
    fid.seek(Addr)
    s = fid.readline(2)
    s = unpack(fmt + 'h', s)
    if(type(s) == tuple):
        return s[0]
    else:
        return s    
</code></pre>
<p>with:</p>
<pre><code>len(s) = 2
len(fmt) = 1
calcsize(fmt) = 0
calcsize(fmt + 'h') = 2
</code></pre>
<p>However, Python returns: </p>
<blockquote>
<p>struct.error: unpack requires a string argument of length 4</p>
</blockquote>
<p>According to python <code>struct.unpack</code> <a href="https://docs.python.org/2/library/struct.html#struct.unpack" rel="nofollow">documentation</a> : </p>
<blockquote>
<p>The string must contain exactly the amount of data required by the format (len(string) must equal calcsize(fmt)).</p>
</blockquote>
<p>So if the length of my string is 2 and calcsize of <code>fmt+'h'</code> is also 2, why does python say "unpack requires a string argument of length <strong>4</strong>" ??</p>
<p><strong>EDIT :</strong> </p>
<p>Thanks for all your answers. Here is the full code:</p>
<p><a href="http://qtwork.tudelft.nl/gitdata/users/guen/qtlabanalysis/analysis_modules/general/lecroy.py" rel="nofollow">http://qtwork.tudelft.nl/gitdata/users/guen/qtlabanalysis/analysis_modules/general/lecroy.py</a></p>
<p>So as you can see in the <code>read_timetrace</code> function, <code>fmt</code> is set to <code>'&lt;'</code> or <code>'&gt;'</code> in a <code>if...else</code> statement. Printing it confirmes that.</p>
<p><strong>But</strong> you should also know that I'm working on windowsx64 (for work).</p>
<p><strong>EDIT2</strong></p>
<p>Here's the full traceback, sorry for the mistake.</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\maxime.vast\Desktop\Test Campaign Template\Test Suite\Include\readLecroyTRCFile.py", line 139, in &lt;module&gt;
    read_timetrace("C:\Users\maxime.vast\Desktop\Test Campaign Template\Test Suite\Traces\KL.ES.001.001.trc")
  File "C:\Users\maxime.vast\Desktop\Test Campaign Template\Test Suite\Include\readLecroyTRCFile.py", line 60, in read_timetrace
    WAVE_ARRAY_1        = ReadLong(fid, fmt, aWAVE_ARRAY_1)
  File "C:\Users\maxime.vast\Desktop\Test Campaign Template\Test Suite\Include\readLecroyTRCFile.py", line 100, in ReadLong
    s = unpack(fmt + 'l', s)
struct.error: unpack requires a string argument of length 4
[Finished in 0.2s]
</code></pre>
<p><strong>EDIT3:</strong></p>
<p>I replaced <code>readline</code> by <code>read</code> and add : </p>
<pre><code>print "len(s) ", len(s)
print "len(fmt) ", len(fmt)
print "calcsize(fmt) ", calcsize(fmt)
print "calcsize(fmt + 'h') ", calcsize(fmt + 'h')
print "fmt ", fmt
</code></pre>
<p>to <code>ReadLong</code> function.</p>
<p>Here's the new traceback : </p>
<pre><code>len(s)  4
len(fmt)  1
calcsize(fmt)  0
calcsize(fmt + 'h')  2
fmt  &lt;
len(s)  4
len(fmt)  1
calcsize(fmt)  0
calcsize(fmt + 'h')  2
fmt  &lt;
len(s)  4
len(fmt)  1
calcsize(fmt)  0
calcsize(fmt + 'h')  2
fmt  &lt;
len(s)  1
len(fmt)  1
calcsize(fmt)  0
calcsize(fmt + 'h')  2
fmt  &lt;
Traceback (most recent call last):
  File "C:\Users\maxime.vast\Desktop\Test Campaign Template\Test Suite\Include\readLecroyTRCFile.py", line 143, in &lt;module&gt;
    read_timetrace("C:\Users\maxime.vast\Desktop\Test Campaign Template\Test Suite\Traces\KL.ES.001.001.trc")
  File "C:\Users\maxime.vast\Desktop\Test Campaign Template\Test Suite\Include\readLecroyTRCFile.py", line 60, in read_timetrace
    WAVE_ARRAY_1        = ReadLong(fid, fmt, aWAVE_ARRAY_1)
  File "C:\Users\maxime.vast\Desktop\Test Campaign Template\Test Suite\Include\readLecroyTRCFile.py", line 104, in ReadLong
    s = unpack(fmt + 'l', s)
struct.error: unpack requires a string argument of length 4
[Finished in 0.2s]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>FWIW, you should be using <code>read(2)</code>, not <code>readline(2)</code>. And if the <code>fmt</code> string really is <code>'&gt;'</code> you should not be getting that error. Here's a short demo that performs as expected.</p>
<pre><code>from struct import unpack

fname = 'qbytes'

#Create a file of all byte values
with open(fname, 'wb') as f:
    f.write(bytearray(range(256)))

def ReadWord(fid, fmt, addr):
    fid.seek(addr)
    s = fid.read(2)
    s = unpack(fmt + 'h', s)
    return s[0]

fid = open(fname, 'rb')

for i in range(16):
    addr = i
    n = 256*i + i+1
    #Interpret file data as big-endian
    print i, ReadWord(fid, '&gt;', addr), n

fid.close()
</code></pre>
<p><strong>output</strong></p>
<pre><code>0 1 1
1 258 258
2 515 515
3 772 772
4 1029 1029
5 1286 1286
6 1543 1543
7 1800 1800
8 2057 2057
9 2314 2314
10 2571 2571
11 2828 2828
12 3085 3085
13 3342 3342
14 3599 3599
15 3856 3856
</code></pre>
<p>BTW, <code>struct.unpack()</code> <em>always</em> returns a tuple, even if the return value is a single item.</p>
<hr/>
<p>Using <code>readline(2)</code> on a binary file can give unexpected results. In my test file in the above code there's a (Linux-style) newline <code>\xa0</code> in the file. So if you change <code>s = fid.read(2)</code> to <code>s = fid.readline(2)</code> everything works fine at first, but on line 10 it crashes because it only reads a single byte, due to that newline char:</p>
<pre><code>from struct import unpack

fname = 'qbytes'

#Create a file of all byte values
with open(fname, 'wb') as f:
    f.write(bytearray(range(256)))

def ReadWord(fid, fmt, addr):
    fid.seek(addr)
    s = fid.readline(2)
    print repr(s),
    s = unpack(fmt + 'h', s)
    return s[0]

with open(fname, 'rb') as fid:
    for i in range(16):
        addr = i
        n = 256*i + i+1
        #Interpret file data as big-endian
        print i, ReadWord(fid, '&gt;', addr), n
</code></pre>
<p><strong>output</strong></p>
<pre><code>0 '\x00\x01' 1 1
1 '\x01\x02' 258 258
2 '\x02\x03' 515 515
3 '\x03\x04' 772 772
4 '\x04\x05' 1029 1029
5 '\x05\x06' 1286 1286
6 '\x06\x07' 1543 1543
7 '\x07\x08' 1800 1800
8 '\x08\t' 2057 2057
9 '\t\n' 2314 2314
10 '\n'
Traceback (most recent call last):
  File "./qtest.py", line 30, in &lt;module&gt;
    print i, ReadWord(fid, '&gt;', addr), n
  File "./qtest.py", line 22, in ReadWord
    s = unpack(fmt + 'h', s)
struct.error: unpack requires a string argument of length 2
</code></pre>
<hr/>
<h1>postscript</h1>
<p>You have several functions in your code that almost do the same thing. That breaks the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow">DRY</a> principle: Don't Repeat Yourself. Here's one way to fix that, using partial function application. See the <a href="https://docs.python.org/3/library/functools.html?module-functools#functools.partial" rel="nofollow">functools docs</a> for more info.</p>
<pre><code>from functools import partial

def ReadNumber(fid, datalen=1, fmt='&gt;', conv='b', addr=0):
    fid.seek(addr)
    s = fid.read(datalen)
    if len(s) != datalen:
        raise IOError('Read %d bytes but expected %d at %d' % (len(s), datalen, addr)) 
    return unpack(fmt+conv, s)[0]

ReadByte = partial(ReadNumber, datalen=1, conv='b') 
ReadWord = partial(ReadNumber, datalen=2, conv='h') 
ReadLong = partial(ReadNumber, datalen=4, conv='l') 
ReadFloat = partial(ReadNumber, datalen=4, conv='f') 
ReadDouble = partial(ReadNumber, datalen=8, conv='d') 
</code></pre>
<p>You need to use keywords to call these new functions. Eg,</p>
<pre><code>ReadLong(fid, fmt='&gt;', addr=addr)
</code></pre>
<p>True, that's slightly more long-winded, but it makes the code a little more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>The length of the format is rather unimportant on its own. Whatâ€™s important is what kind of formats you specify there. There are for example format specifications which specify one byte or even eight bytes. So it really depends on the format how many characters there should be in <code>s</code>.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; struct.unpack('b', 'A')
(65,)
&gt;&gt;&gt; struct.unpack('L', 'A')

Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    struct.unpack('L', 'A')
error: unpack requires a string argument of length 4
&gt;&gt;&gt; struct.unpack('L', 'AAAA')
(1094795585,)
</code></pre>
<p>If <code>fmt</code> is really <code>&gt;</code> as you say, then it should work fine:</p>
<pre><code>&gt;&gt;&gt; struct.unpack('&gt;h', 'AA')
(16705,)
</code></pre>
<p>So I assume that when the error appears, <code>fmt</code> is <em>not</em> just <code>&gt;</code>, but something else that would consume an additional 2 bytes. Try printing <code>fmt</code> before the <code>unpack</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <code>len(fmt)</code> = 1, it means that <code>fmt</code> has value.  If <code>fmt</code> = 'h', then <code>fmt+'h'</code> will be 'hh'.  Therefore, unpack() will expect 4 bytes data as each 'h' required a short integer (2 bytes).</p>
</div>
<span class="comment-copy">what is <code>fmt</code> ?</span>
<span class="comment-copy">Now that you added the complete file, please also add the <i>full traceback</i> you get.</span>
<span class="comment-copy">@MathersMax: You <b>really</b> shouldn't be using <code>.readline()</code> to read a binary file.</span>
<span class="comment-copy">I just noticed another problem: you're opening your waveform file in text mode. You should open it in binary mode because in text mode on Windows <code>'\x0d\x0a'</code> sequences get translated to <code>'\x0a'</code> on reading (and vice versa on writing).</span>
<span class="comment-copy">@MatherMax I can see you're a new member here - it's great that you've edited in response to comments, accepted the answer and got the help you needed!  It's usually not a good idea to edit the solution into the question - particularly as you've got an accepted answer.  Maybe you could move that edit.  All the best!</span>
<span class="comment-copy">+1 for <code>read</code> instead of <code>readline</code>.  Now that the OP has clarified the issue, what happened was that the exception was actually raised by <code>ReadLong</code> which expect 4 bytes.  I guess why this could ever happen is that <code>readline</code> encountered line or file end.  In general the OP should have used <code>read</code> and checked that all bytes were available and read.</span>
