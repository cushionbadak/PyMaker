<div class="post-text" itemprop="text">
<pre><code>from math import sqrt


a=1e-8
b=10
c=1e-8

x1 = ((-b)-sqrt((b**2)-(4*a*c)))/(2*a)
x2 = ((-b)+sqrt((b**2)-(4*a*c)))/(2*a)

print 'x1 = {}'.format(x1)
print 'x2 = {}'.format(x2)

print (4*a*c)
print (sqrt(b**2-4*a*c))
print b**2
print 2*a
</code></pre>
<p>When I run the program, this returns:</p>
<pre><code>x1 = -1e+09
x2 = 0.0

4e-16
10.0
100.0
2e-08
</code></pre>
<p>What I need is for x2 to be equal to -1e-9.</p>
<p>The problem seems to be with the </p>
<pre><code>sqrt((b**2)-(4*a*c))
</code></pre>
<p>as it gives 10 as a result, obviously because 4*(10^-8)*(10^-8) is almost equal to 0, and is considered 0 by python.</p>
<p>This results in:</p>
<pre><code>sqrt((b**2)-(4*a*c)) = sqrt(b**2) = sqrt(10**2) = 10
</code></pre>
<p>Any help would be greatly appreciated </p>
</div>
<div class="post-text" itemprop="text">
<p>Use the decimal module:</p>
<pre><code>from decimal import Decimal
a = Decimal('1E-8')
b = 10
c = Decimal('1E-8')
x1 = ((-b)-((b**2)-(4*a*c)).sqrt())/(2*a)
x2 = ((-b)+((b**2)-(4*a*c)).sqrt())/(2*a)
print 'x1 = {}'.format(x1)
print 'x2 = {}'.format(x2)
</code></pre>
<p>results in</p>
<pre><code>x1 = -999999999.999999999000000000
x2 = -1.0000000000E-9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need extra precision to solve this problem: Python <code>float</code>s already have enough precision for the job.  You just need a (slightly) cleverer algorithm.</p>
<p>Your problem stems from the subtraction of two nearly-equal computed values: for <code>b</code> positive and large (in comparison to <code>a</code> and <code>c</code>) when you do <code>-b + sqrt(b*b-4*a*c)</code>, you end up with a result that has large relative error.  But note that this problem only applies to one of the two roots: in <code>-b - sqrt(b*b-4*a*c)</code>, there's no such problem.  Similarly, for <code>b</code> large and negative, the first root is fine, but the second may be subject to loss of accuracy.</p>
<p>The solution is to use your existing formula to compute whichever of the roots doesn't have the cancellation problem, and then use a different formula for the other root (essentially, using the fact that you know that the product of the two roots is <code>c / a</code>).  That formula is <code>2c / (-b +/- sqrt(b*b-4*a*c))</code>.</p>
<p>Here's some example code.  It uses <a href="https://docs.python.org/3/library/math.html#math.copysign" rel="nofollow"><code>math.copysign</code></a> to pick the sign that won't lead to cancellation error:</p>
<pre><code>&gt;&gt;&gt; from math import sqrt, copysign
&gt;&gt;&gt; def quadratic_roots(a, b, c):
...     discriminant = b*b - 4*a*c
...     q = -b - copysign(sqrt(discriminant), b)
...     root1 = q / (2*a)
...     root2 = (2*c) / q
...     return root1, root2
... 
&gt;&gt;&gt; quadratic_roots(a=1e-8, b=10, c=1e-8)
&gt;&gt;&gt; (-1000000000.0, -1e-09)
</code></pre>
<p>This deals with the most serious possible cause of numerical instability.  There's a second possible cause, in the computation of the discriminant, if <code>b*b</code> happens to be very close to <code>4*a*c</code>.  In that case, it's possible to lose up to half the correct significant figures (so you'll get only 7-8 accurate digits for each root). Getting full-precision results in that case <em>would</em> require computing the discriminant using extended precision.</p>
<p>The wikipedia article on <a href="https://en.wikipedia.org/wiki/Loss_of_significance#A_better_algorithm" rel="nofollow">loss of significance</a> contains a useful discussion of exactly this problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <a href="http://pythonhosted.org/bigfloat/" rel="nofollow">bigfloat</a> library for the same, with arbitrary precision.</p>
<pre><code>from bigfloat import sub, add, mul, div, sqr, sqrt, precision

a=1e-8
b=10
c=1e-8
p = 100

D = sub(sqr(b) , mul(4, mul(a,c) ), precision(p))

x1 = div( - add(b , sqrt(D, precision(p))) , mul(2,a), precision(p))
x2 = div( - sub(b , sqrt(D, precision(p))) , mul(2,a), precision(p))

print x1,x2

-999999999.99999997907743916987153 -9.9999999999981901320509082432747e-10
</code></pre>
</div>
