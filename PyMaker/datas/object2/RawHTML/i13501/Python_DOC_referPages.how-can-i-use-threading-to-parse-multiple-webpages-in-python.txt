<div class="post-text" itemprop="text">
<p>Most of the time the amount of webpages I have to scrape are below 100, so using a for loop I parse them in a reasonable time. But now I have to parse over 1000 webpages. </p>
<p>Searching for a way to do this, I found that threading might help. I have watched and read some tutorials and I believe that I have understood the general logic.</p>
<p>I know that if I have 100 webpages, I can create 100 threads. It's not recommended, especially for a very large number of webpages. What I haven't really figured out is, for example, how I can create 5 threads with 200 webpages on each thread.</p>
<p>Below is a simple code sample using threading and Selenium:</p>
<pre><code>import threading
from selenium import webdriver

def parse_page(page_url):
   driver = webdriver.PhantomJS()
   driver.get(url)
   text = driver.page_source
   ..........
   return parsed_items

def threader():
   worker = q.get()
   parse_page(page_url)
   q.task_one()

urls = [.......]
q = Queue()

for x in range(len(urls)):
    t = threading.Thread(target=threader)
    t.daemon = True
    t.start()

for worker in range(20):
    q.put(worker)

q.join()
</code></pre>
<p>Another thing that I am not clear on and it is shown in the above code sample is how I use arguments in thread.</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably the simplest way will be to use <code>ThreadPool</code> from <a href="https://docs.python.org/2.7/library/multiprocessing.html#module-multiprocessing.dummy" rel="nofollow">multiprocessing.pool</a> module or if you are on python3 <a href="https://docs.python.org/dev/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow">ThreadPoolExecutor</a> from <code>concurrent.futures</code> module.</p>
<p><code>ThreadPool</code> has (almost) the same api as regular <a href="https://docs.python.org/2.7/library/multiprocessing.html#using-a-pool-of-workers" rel="nofollow">Pool</a> but uses threads instead of processes.</p>
<p>e.g.</p>
<pre><code>def f(i):
    return i * i

from multiprocessing.pool import ThreadPool
pool = ThreadPool(processes=10)
res = pool.map(f, [2, 3, 4, 5])
print(res)
[4, 9, 16, 25]
</code></pre>
<p>And for <code>ThreadPoolExecutor</code> check this <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example" rel="nofollow">example</a>.</p>
</div>
<span class="comment-copy">To add arguments to a thread, if your target function takes two arguments: <code>t = threading.Thread(target=threader, args=(arg1,arg2))</code></span>
