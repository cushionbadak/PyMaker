<div class="post-text" itemprop="text">
<p>For example, I have a string like <code>'(10 + 20) / (10 + 20)'</code>. </p>
<p>And now I want to match <code>(10 + 20)</code>. So I write a script like this:</p>
<pre><code>text = '(10 + 20) / (10 + 20)'                                                                                                          
test1 = re.findall(r'(.*)', text)                                            
test2 = re.findall(r'(.+?)', text)                                           

for i in test1:                                                              
    print(i, end='')                                                         
else:                                                                        
    print()                                                                  

for i in test2:                                                              
    print(i, end='')                                                         
else:                                                                        
    print()       
</code></pre>
<p>And the output is this:</p>
<pre><code>(10 + 20) / (10 + 20)                                                                                                                       
(10 + 20) / (10 + 20)
</code></pre>
<p>I don't understand, doesn't <code>.+?</code> not greedy?</p>
</div>
<div class="post-text" itemprop="text">
<p>The round brackets in a regex pattern must be escaped with <code>\</code> to match literal round brackets:</p>
<pre><code>test2 = re.findall(r'\(.+?\)', text) 
</code></pre>
<p>See <a href="https://ideone.com/lOFgcC" rel="nofollow">demo</a></p>
<p>A "raw" string literal does not mean that you do not have to escape special regex characters but it means you can use just <em>one</em> backslash to escape them, not two.</p>
<p>See this excerpt from <a href="https://docs.python.org/3/library/re.html#raw-string-notation" rel="nofollow"><em>6.2.5.8. Raw String Notation</em></a>:</p>
<blockquote>
<p>Raw string notation <code>(r"text")</code> keeps regular expressions sane. Without it, every backslash (<code>'\'</code>) in a regular expression would have to be prefixed with another one to escape it. For example, the two following lines of code are functionally identical:</p>
<p><code>&gt;&gt;&gt;</code><br/>
<code>&gt;&gt;&gt; re.match(r"\W(.)\1\W", " ff ")</code><br/>
<code>&lt;_sre.SRE_Match object; span=(0, 4), match=' ff '&gt;</code><br/>
<code>&gt;&gt;&gt; re.match("\\W(.)\\1\\W", " ff ")</code><br/>
<code>&lt;_sre.SRE_Match object; span=(0, 4), match=' ff '&gt;</code><br/></p>
</blockquote>
<p>The docs say <em>usually</em>, but it does not mean you have to use raw string literals every time.</p>
<p>It is true that <code>.+?</code> is a lazy pattern, it means <em>match 1 or more characters other than a newline, but as few as possible</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to escape <code>(</code> and <code>)</code> like this:  </p>
<pre><code>`\(.*\)`
</code></pre>
<p>and this </p>
<pre><code>`\(.+?\)`. 
</code></pre>
<p>The first one will match until it finds the last possible <code>)</code>, the other one i non-greedy and will stop at the first <code>)
</code> </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\([^()]+\)', '(10 + 20) / (10 + 20)')
['(10 + 20)', '(10 + 20)']
</code></pre>
<p>The dialect of regular expressions used in the <code>re</code> module can't support arbitrary nested parentheses therefore <code>[^()]</code> that matches everything except parentheses is always valid here.</p>
<p>Note: you don't need to escape <code>()</code> inside <code>[]</code> that defines a set of characters.</p>
</div>
<span class="comment-copy">You need to escape <code>(</code> and <code>)</code> to match literal parentheses.</span>
<span class="comment-copy">@stribizhev Thanks, it works. but <code>r'(.+?)'</code> is raw string right?</span>
<span class="comment-copy">Ok, let me answer this.</span>
<span class="comment-copy">You probably want <code>r'\([^\(].+?\)'</code> otherwise it will match <code>((2+3)) -&gt; ((2+3)</code></span>
<span class="comment-copy">@KevinGuan your regex will handle brackets incorrectly. Try this <code>((2+3) + (4+5))</code></span>
<span class="comment-copy">Thanks, I understand now :)</span>
<span class="comment-copy">There is one thing of interest in Python: when an escape sequence cannot be parsed as an escape sequence, the backslash is treated as a literal. <code>'\('</code> and <code>'\\('</code> will be printed the same, and no error will be thrown. So, using a raw string literal here is optional, but it is still the best practice.</span>
<span class="comment-copy">So whatever if I need use raw string or not, but use raw string is always a good choice. Right?</span>
<span class="comment-copy">@KevinGuan: Unless you use Unicode or very simple patterns, yes. I added more description from the Python 3 re reference.</span>
<span class="comment-copy">Seems like I forgot accept this answer :P</span>
<span class="comment-copy">That is, but @stribizhev has answered me.</span>
<span class="comment-copy">Thanks, I'll keep this in my mind :)</span>
