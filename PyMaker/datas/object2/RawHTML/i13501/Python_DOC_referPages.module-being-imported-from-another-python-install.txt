<div class="post-text" itemprop="text">
<p>I'm running multiple installs of Python on Windows Server 2012. I can probably find a way to work around this, but I'm curious as to what is going on. I'm wary about radically changing the installs in case I break other people's Python scheduled tasks that I may not be aware of.</p>
<p>(All the code boxes below are PowerShell).</p>
<pre><code>PS C:\&gt; C:\Python34\Scripts\pip.exe list
jdcal (1.0)
pip (7.1.2)
setuptools (12.0.5)
virtualenv (13.1.2)
</code></pre>
<p>Although this Python 3.4 install doesn't have Django installed, it appears to pick up the version from the Python 33x86 install. Is that normal?</p>
<pre><code>PS C:\&gt; C:\Python34\python.exe -c "import django; print(django.get_version())"
1.6.5
PS C:\&gt; C:\Python33x86\python.exe -c "import django; print(django.get_version())"
1.6.5
</code></pre>
<p>I've created a Python virtualenv based on Python 3.4 and installed Django 1.8.4 in it. Doing a "pip list" confirms that it is installed correctly:-</p>
<pre><code>PS C:\&gt; D:\PyVirtualEnvs\example_py34\Scripts\activate.bat
PS C:\&gt; D:\PyVirtualEnvs\example_py34\Scripts\pip.exe list | Select-String "Django "
Django (1.8.4)
</code></pre>
<p>However, when I import within that virtualenv, I get Django version 1.6.5:-</p>
<pre><code>PS C:\&gt; D:\PyVirtualEnvs\example_py34\Scripts\python.exe -c "import django; print(django.get_version())"
1.6.5
</code></pre>
<p>Is this a bug in virtualenv or am I missing something?</p>
<p>EDIT: Could it be related to <a href="https://stackoverflow.com/questions/25920265/python-module-imported-from-outside-virtualenv">this question</a>?</p>
<p>EDIT2: The same thing happens when using <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">pyvenv</a>, as suggested by ham-sandwich.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only thing that looks strange to me is that you are running</p>
<pre><code>D:\PyVirtualEnvs\example_py34\Scripts\activate.bat
</code></pre>
<p>in powershell when a there is a activate.ps1. I don't know if there are compatibility issues with this.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you run a <code>cmd.exe</code> shell script from PowerShell (a batch file), PowerShell spawns an instance of <code>cmd.exe</code> to run the script (batch file). If the batch file sets environment variables, they exist only in the spawned <code>cmd.exe</code> instance. Once that instance terminates (i.e., when the script ends), the environment variables do not propagate to the calling process (PowerShell, in this case). This is by design.</p>
<p>If you want to propagate environment variables, you can use the following <code>Invoke-CmdScript</code> function in PowerShell:</p>
<pre><code>function Invoke-CmdScript {
  param(
    [String] $scriptName
  )
  $cmdLine = """$scriptName"" $args &amp; set"
  &amp; $Env:SystemRoot\system32\cmd.exe /c $cmdLine |
  Select-String '^([^=]*)=(.*)$' | ForEach-Object {
    $varName = $_.Matches[0].Groups[1].Value
    $varValue = $_.Matches[0].Groups[2].Value
    Set-Item Env:$varName $varValue
  }
}
</code></pre>
<p>Some more information about this in the following article:</p>
<p><a href="http://windowsitpro.com/powershell/take-charge-environment-variables-powershell" rel="nofollow">Windows IT Pro: Take Charge of Environment Variables in PowerShell</a></p>
<p>In your case, you would run:</p>
<pre><code>PS C:\&gt; Invoke-CmdScript D:\PyVirtualEnvs\example_py34\Scripts\activate.bat
</code></pre>
<p>This will spawn <code>activate.bat</code> and propagate the environment variable changes.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've discovered the reason for this behaviour. The PYTHONPATH environment variable was set to a Python installation at an unusual location on the machine.</p>
<p>According to <a href="https://docs.python.org/2/tutorial/modules.html#the-module-search-path" rel="nofollow">the documentation</a>, PYTHONPATH is used as the import location when the module is not found in the current directory.</p>
<blockquote>
<p>When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path. sys.path is initialized from these locations:</p>
<ul>
<li>the directory containing the input script (or the current directory).</li>
<li>PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).</li>
<li>the installation-dependent default.</li>
</ul>
</blockquote>
<p>For some reason PYTHONPATH is not set/unset by the activate/deactivate scripts. It does set PYTHONHOME, but this doesn't seem to affect imports. This feels like a bug in virtualenv and pyvenv (I tried both).</p>
<p>The original activate.bat scripts change a "set" variable, which doesn't affect the $env:PYTHONPATH. Activate.ps1 attempts to save the original PYTHONPATH in a variable, set it to the virtual environment directory, then on deactivate, restore the original PYTHONPATH. Neither of these work anymore, possibly due to a Powershell or Python update.</p>
<p>The solution for us is to modify the activate and deactivate scripts (PoSh or bat) to switch the PYTHONPATH between two hard-coded values.</p>
</div>
<span class="comment-copy">Maybe a daft question, but are you sure you have activated the venv? <code>venv\Scripts\activate.bat</code></span>
<span class="comment-copy">Yes, at the top of the 3rd code box above. Saying that, there's no visual feedback when doing it to verify that it worked.</span>
<span class="comment-copy">Is there a reason for using virtualenv, instead of pyvenv? <a href="https://docs.python.org/3/library/venv.html#module-venv" rel="nofollow noreferrer">docs.python.org/3/library/venv.html#module-venv</a></span>
<span class="comment-copy">@ham-sandwich - Oh, that's news to me. Thanks for the link, from the related PEP, it sounds good. However, my question above seems to run deeper than virtualenvs; I still find it surprising that 3.4 imports something from 3.3 and would like to know why.</span>
<span class="comment-copy">Also one of our virtual envs was 2.7 and I think pyenv is 3.3+</span>
<span class="comment-copy">Thanks, good point, but I just tried it and got the same results.</span>
<span class="comment-copy">Thanks, I didn't know that. However, the Invoke-CmdScript function seems to swallow all the output from python, even in the interactive shell. If I run the activate as suggested then call the python command it's still the wrong version of django, if I try Invoke-CmdScript python.exe the -c import fails.</span>
<span class="comment-copy">Presumably I'd need to run everything I wanted through a single batch file call to preserve those environment variables between the activate and python calls.</span>
<span class="comment-copy">You would not use that function to run python; you would use it only to execute the <code>activate.bat</code> script and propagate the environment variables it sets. Note that there is an <code>activate.ps1</code> specifically for PowerShell as noted in another answer.</span>
<span class="comment-copy">Sorry, crossed, comments. Ran activate.bat with Invoke-CmdScript (seemed fine). Ran python call as above (still django 1.6.5). Same with activate.ps1</span>
<span class="comment-copy">My answer is specific to running a <code>cmd.exe</code> shell script (batch file) and propagating its environment variables to PowerShell. I don't use python so I can't comment on the rest of what you're doing. It seems to me that you need a better definition of your specific problem.</span>
