<div class="post-text" itemprop="text">
<p>I'm using a library that returns a generator.  Is there a way to start at a particular iteration without using multiple <strong>next ()</strong> statement?</p>
<p>In a simple for loop, I could do the following.</p>
<pre><code>array = [2, 5, 1, 4, 3]

for i in array [2:]:
    # do something
</code></pre>
<p>In a generator, I couldn't do as shown above.  Instead I'll have to use multiple <strong>next ()</strong> statements to start at the 3rd index.  When attempting to do the same as the for loop, I get an error that said, "generator is not scriptable."</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice</code></a> does this, but in reality, it's just invoking <code>next</code> for you over and over (though at the C layer in CPython, so it's faster than doing it manually).</p>
<pre><code>for i in itertools.islice(mygenerator, 2, None):
    # do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use <a href="https://docs.python.org/2/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice()</code></a> , which can slice the generator as you want -</p>
<pre><code>&gt;&gt;&gt; def a():
...     for i in range(10):
...             yield i
...
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; x = a()
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for i in itertools.islice(x, 2, None):
...     print(i)
...
2
3
4
5
6
7
8
9
</code></pre>
<hr/>
<p>Please note, though you are not manually doing the multiple <code>next()</code> , it is being internally done by <code>islice()</code> . You cannot reach at the required index until you iterate till it (islice just does that for you , instead of you have to write multiple <code>next()</code> , etc).</p>
<hr/>
<p>The signature of <code>itertools.islice</code> is -</p>
<blockquote>
<p>itertools.islice(iterable, stop)<br/>
  itertools.islice(iterable, start, stop[, step])</p>
</blockquote>
<p>The first argument is always the iterable, then if you pass in only 2 arguments, second argument is interpreted as the <code>stop</code> index (exclusive, meaning it does not return the <code>stop</code> index element).</p>
<p>If there are 3 or 4 arguments to it , second argument is treated as the start index (index) , third argument as the <code>stop</code> (exclusive) , and if fourth argument is specified its treated as the <code>step</code> value.</p>
</div>
<span class="comment-copy">If you have control over how the generator is created, you can simply start <code>yield</code>ing from the element you want.  Otherwise by definition the preceding values must be calculated (example: generator for the Fibonacci sequence).</span>
<span class="comment-copy">Thank you for the clarification.  Your solution work as well.</span>
<span class="comment-copy">Glad I could be helpful.</span>
