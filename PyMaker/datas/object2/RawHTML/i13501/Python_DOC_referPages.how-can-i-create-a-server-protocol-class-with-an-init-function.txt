<div class="post-text" itemprop="text">
<p>I come from a Twisted background, so I have a solid understanding of protocols and factories, as implemented by Twisted.  However, I am in the midst of switching over to asyncio, and I'm having a bit of trouble understanding how factories integrate into this particular framework.</p>
<p>In the <a href="https://docs.python.org/3/library/asyncio-protocol.html#tcp-echo-server-protocol" rel="nofollow">official documentation</a>, we have an example of a server's <code>asyncio.Protocol</code> class definition.  It does not have a user-defined <code>__init__</code> function, so we can simply call <code>loop.create_server(EchoServerClientProtocol, addr, port)</code>.</p>
<p>What happens if our <code>Protocol</code> needs to implement some initialization logic?  For instance, consider this example which sets a maximum buffer size:</p>
<pre><code>import asyncio
from collections import deque

class BufferedProtocolExample(asyncio.Protocol):
    def __init__(self, buffsize=None):
        self.queue = deque((), buffsize)

    # ...
</code></pre>
<p>In Twisted, you'd create a <code>Factory</code> class to hold all of the configuration values, which you would then pass to the function initializing the connection.  Asyncio <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.create_server" rel="nofollow">seems to work in the same way</a>, but I cannot find any documentation.</p>
<p>I <em>could</em> use <code>functools.partial</code>, but what is the correct way of handling this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation <a href="https://docs.python.org/3/library/asyncio-protocol.html#tcp-echo-client-protocol" rel="noreferrer">has an example where they use a lambda for this</a>, so my guess is that functools.partial is fine. They also <a href="https://docs.python.org/3/library/asyncio-eventloop.html#creating-connections" rel="noreferrer">state that <code>protocol_factory</code> can be any callable</a>. So to have something like Twisted's Factorys, you'll just need to implement <code>__call__</code> on a class the way you'd implement <code>buildProtocol</code> in Twisted.</p>
</div>
<span class="comment-copy">The documentation <a href="https://docs.python.org/3/library/asyncio-protocol.html#tcp-echo-client-protocol" rel="nofollow noreferrer">has an example where they use a lambda for this</a>, so my guess is that <code>functools.partial</code> is fine. They also <a href="https://docs.python.org/3/library/asyncio-eventloop.html#creating-connections" rel="nofollow noreferrer">state that <code>protocol_factory</code> can be any callable</a>.</span>
<span class="comment-copy">@Phillip Thank you very much.  Feel free to restate this as an answer and I'll gladly accept.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.create_connection" rel="nofollow noreferrer">create_connection</a> and <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.create_server" rel="nofollow noreferrer">create_server</a> both end up running <code>protocol = protocol_factory()</code> (see the code <a href="https://github.com/python/asyncio/blob/4f45ac71aa8e1aa97007c6da4f12f7c159b24a36/asyncio/selector_events.py#L198" rel="nofollow noreferrer">here</a> and <a href="https://github.com/python/asyncio/blob/27f3499f968e8734fef91677eb339b5d32a6f675/asyncio/base_events.py#L681" rel="nofollow noreferrer">there</a>).</span>
