<div class="post-text" itemprop="text">
<p>I wrote some code for a contest in python. The test case limit is 1 &lt;= n &lt;= 10^9.</p>
<pre><code>n=input("")
sum=0
for i in range(0,n):
   s=input("")
   sum=sum^s
print sum
</code></pre>
<p>It shows an error of time limit exceeded, but when I did the same in C, it worked fine. My C code is:</p>
<pre><code>#include&lt;stdio.h&gt;
int main()
{
long long int a;
int ex=0,n;
scanf("%d",&amp;n);
for(int i=0;i&lt;n;i++)
 {
 scanf("%lld",&amp;a);
 ex=ex^a;
  }
printf("%d\n",ex);
  return 0;
}
</code></pre>
<p>Can someone explain this difference?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is a very simple and powerful language, but it is slow as compared to C language for a variety of reasons like:
1.It is dynamically typed
2.It is interpreted rather than compiled
3.Some of its memory access models are inefficient.</p>
<p>So some of the Python programs may be as slow as 20 times than a similar C program.</p>
</div>
<span class="comment-copy">What were the inputs? When you run it locally for <code>10^9</code> inputs how long does each version take?</span>
<span class="comment-copy">Please tell us what you're trying to accomplish.  Testing the speed of bitwise XOR or the bandwidth of taking input from <code>stdin</code>?  What does it mean to have "time limit exceeded"?  It looks like the execution time is IO bound, and most time is spent on the inner <code>input()</code> or <code>scanf()</code>.</span>
<span class="comment-copy">In general, C code will be a lot faster than python code, because C is compiled to machine and python is compiled to byte codes that are executed by the python virtual machine.</span>
<span class="comment-copy">@jojonas <code>input()</code> returns a Python object by <code>eval()</code>ing the input.  It's evil and should be avoided anyway.</span>
<span class="comment-copy">Sorry, I tested in <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer">Python 3</a>, where it returns a string. For <a href="https://docs.python.org/2/library/functions.html#input" rel="nofollow noreferrer">Python 2</a>, you're right, it's equivalent to <code>eval(raw_input())</code>.</span>
<span class="comment-copy">Technically, the code is compiled into bytecode and run on a virtual machine.</span>
<span class="comment-copy">This may not be the problem at all.  Looking at the code, it is very likely that the bottleneck is the inner <code>input()</code> (Python) and <code>scanf()</code> (C), either of which <i>waits for input</i>.  It is this wait and read (both likely super slow) that limits the execution time of either program.</span>
