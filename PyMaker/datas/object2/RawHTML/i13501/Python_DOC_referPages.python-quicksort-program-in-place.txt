<div class="post-text" itemprop="text">
<p>I have a quicksort program here, but there seems to be a problem with the result. I think there must have been some issue in the areas highlighted below when referencing some values. Any suggestions?</p>
<pre><code>#where l represents low, h represents high
def quick(arr,l,h):
    #is this the correct array for quicksorting?
    if len(x[l:h]) &gt; 1:
        #r is pivot POSITION
        r = h
        #R is pivot ELEMENT
        R = arr[r]
        i = l-1
        for a in range(l,r+1):  
            if arr[a] &lt;= arr[r]:
                i+=1
                arr[i], arr[a] = arr[a], arr[i]
        #should I take these values? Note that I have repeated elements below, which is what I want to deal with
        quick(arr,l,arr.index(R)-1)
        quick(arr,arr.index(R)+arr.count(R),h)

x = [6,4,2,1,7,8,5,3]

quick(x,0,len(x)-1)

print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please check this. I think you find your answer.</p>
<pre><code>def partition(array, begin, end):
    pivot = begin
    for i in xrange(begin+1, end+1):
        if array[i] &lt;= array[begin]:
            pivot += 1
            array[i], array[pivot] = array[pivot], array[i]
    array[pivot], array[begin] = array[begin], array[pivot]
    return pivot


def quicksort(array, begin=0, end=None):
    if end is None:
        end = len(array) - 1
    if begin &gt;= end:
        return
    pivot = partition(array, begin, end)
    quicksort(array, begin, pivot-1)
    quicksort(array, pivot+1, end)

array = [6,4,2,1,7,8,5,3]
quicksort(array)
print (array)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<pre><code>        #should I take these values? Note that I have repeated elements below, which is what I want to deal with
        quick(arr,l,arr.index(R)-1)
        quick(arr,arr.index(R)+arr.count(R),h)
</code></pre>
</blockquote>
<p>You seem to be assuming that the values equal to the pivot element are already consecutive. This assumption is probably wrong for your current implementation. Test it e.g. by outputting the full list before recursing.</p>
<p>To make the assumption true, partition into three instead of just two groups, as described <a href="https://en.wikipedia.org/wiki/Quicksort#Repeated_elements" rel="nofollow">at Wikipedia</a>.</p>
</div>
<span class="comment-copy">This shouldn't have an effect, but you probably want to use <code>arr[l:h]</code> in the first <code>if</code> condition, rather than the global <code>x[l:h]</code>.</span>
<span class="comment-copy">Are you trying to implement quicksort according to the <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" rel="nofollow noreferrer">Lomuto partition scheme</a>?</span>
<span class="comment-copy"><code>i  = -1</code> looks fishy. Shouldn't that be <code>i = l - 1</code>?</span>
<span class="comment-copy">What is xrange? I'm not sure what that means as it doesn't work, but otherwise, thanks for your help!</span>
<span class="comment-copy">For the most part, xrange and range are the exact same in terms of functionality. They both provide a way to generate a list of integers for you to use, however you please. The only difference is that range returns a Python list object and xrange returns an xrange object.  For Details, please see this <a href="http://pythoncentral.io/how-to-use-pythons-xrange-and-range/" rel="nofollow noreferrer">pythoncentral.io/how-to-use-pythons-xrange-and-range</a></span>
<span class="comment-copy">I'm using Python 3.4.3, so can I just use range?</span>
<span class="comment-copy">@teachmyselfhowtocode: Obviously you can use <code>range()</code> in python 3.4.3. Here this is python 3.4.3 documentation. Take a look <a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#the-range-function</a></span>
<span class="comment-copy">Ok, thanks, I was not sure then.</span>
<span class="comment-copy">Have you read that section of the Wikipedia article?</span>
<span class="comment-copy">what does := mean? (in the Wikipedia article)</span>
<span class="comment-copy">Well, I have read that, but I plan to see the entire list after every quicksort. In that case, can you refine the sorting part of the code itself, so that the values equal to the pivot will be in place?</span>
<span class="comment-copy"><code>:=</code> in the pseudo code is an operator notation taken from mathematics, signifying an assignment. (Thus, what <code>=</code> does in Python, which in mathematics would signify an equality comparison or postulation (<code>==</code> in Python).)</span>
