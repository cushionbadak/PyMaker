<div class="post-text" itemprop="text">
<p>I'm using <code>argparse</code> to manage command line options, and I want manage two options, <code>--check</code> and <code>--nocheck</code>.
I'm actually doing something like this in <code>mybadscript.py</code>:</p>
<pre><code>[...]
args = parser.parse_args()

if args.check:
    check = True

if args.nocheck:
    check = False
[...]
</code></pre>
<p>The problem is that if launch the script this way:</p>
<p><code>python mybadscript.py --nocheck --check</code></p>
<p><code>check</code> will be set to <code>False</code>. This is incorrect, since the last option is <code>--check</code>.</p>
<p>How can I correctly manage them?</p>
<p>PS: I know you can easily avoid it using only one option, but I would know how I can manage option precedence with <code>argparse</code>, since you can encounter it in more complicated scenarios.</p>
<p>PPS: the suggested answer does incidentally answer my question, but the related question is not the same one.</p>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_mutually_exclusive_group" rel="nofollow">argparse documentation</a>. Here's an example of what you might want. I've included several options you may not need—I thought that was better than leaving them off and you needing them.</p>
<pre><code>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; group = parser.add_mutually_exclusive_group(required=True)
&gt;&gt;&gt; group.add_argument('--check', action='store_true', dest="check")
&gt;&gt;&gt; group.add_argument('--nocheck', action='store_false', dest="check")
&gt;&gt;&gt; parser.parse_args(["--check"])
Namespace(check=True)
&gt;&gt;&gt; parser.parse_args(["--nocheck"])
Namespace(check=False)
</code></pre>
<p>You may not want the mutually exclusive part—in that case delete the second line and replace <code>group</code> with <code>parser</code>.  If you do so you may wish to add this line:</p>
<pre><code>&gt;&gt;&gt; parser.set_defaults(check=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have two arguments that independently set two different Namespace attributes, <code>args.check</code> and <code>args.nocheck</code>.  With <code>--nocheck --check</code> input line, both are set.  </p>
<p>In:</p>
<pre><code>if args.check:
    check = True
if args.nocheck:
    check = False
</code></pre>
<p>you test <code>nocheck</code> last, so that one overrides <code>check</code>.</p>
<p><code>argparse</code> tries to handle optionals (flagged arguments) in an order independent manner.  </p>
<p>If they write to the same 'dest', it's the last one that you will end up seeing.  One way to see what was entered, and in what order, is to use an 'append' action:</p>
<pre><code>parser=argparse.ArgumentParser()
parser.add_argument('--check', dest='checked', action='append_const', const=True)
 parser.add_argument('--nocheck', dest='checked', action='append_const', const=False)

In [14]: parser.parse_args(''.split()) # no arg
Out[14]: Namespace(checked=None)
</code></pre>
<p>I could have made the default []</p>
<pre><code>In [15]: parser.parse_args('--check'.split())
Out[15]: Namespace(checked=[True])

In [16]: parser.parse_args('--nocheck'.split())
Out[16]: Namespace(checked=[False])

In [17]: parser.parse_args('--nocheck --check --nocheck'.split())
Out[17]: Namespace(checked=[False, True, False])
</code></pre>
<p>The paired 'store_true' and 'store_false' in the other answer is simpler.</p>
<p>Better yet, choose one as the default choice, and just provide an option for the other.  As long as the default is clear, there really isn't a need for both arguments.</p>
</div>
<span class="comment-copy">Possible dupe?  <a href="http://stackoverflow.com/q/15008758/748858">stackoverflow.com/q/15008758/748858</a></span>
<span class="comment-copy">The basic point is that your user controls the precedence - the last option string has final say on the value.  If you don't like that, you have to use specialized <code>action</code> classes and <code>dest</code> values to detect and use earlier strings.</span>
<span class="comment-copy">The mutually exclusive group sidesteps the actual question, since now it's not possible to use both, making the question of precedence moot. Otherwise, good answer. I'd use <code>set_defaults</code> to set the value of <code>check</code> in case <i>neither</i> option is used.</span>
<span class="comment-copy">@chepner I added a reference to <code>set_defaults</code>, but in my second line I say <code>required=True</code>, sidestepping the issue of the user not supplying an preference.</span>
<span class="comment-copy">Thank you, I missed <code>dest</code>. Anyway this does not fullfill completely my curiosity, but the actual question is answered. I'll open another question about option position.</span>
<span class="comment-copy">@MarcoSulla I believe my explanation after the code covers the rest of your question—if you don't use the <code>add_mutually_exclusive_group</code> part you'll simply get the value corresponding to the most recent option.</span>
<span class="comment-copy">Yes, indeed I have a new one :)    ----&gt; <a href="http://stackoverflow.com/questions/33264649/cli-option-that-is-an-aggregation-of-two-other-options-in-python" title="cli option that is an aggregation of two other options in python">stackoverflow.com/questions/33264649/…</a></span>
