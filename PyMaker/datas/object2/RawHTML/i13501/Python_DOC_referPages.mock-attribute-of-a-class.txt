<div class="post-text" itemprop="text">
<p>I'm doing an unit test on a file and I'm having trouble to mock an attribute or function call (<code>self.logger.info</code>) in my class B. I have two classes A and B and B inherit from A.</p>
<pre><code>import logging

class A(object): 
    def __init__(self):
        self.logger = logging.getLogger()
</code></pre>
<p>and in another module:</p>
<pre><code>from A import A

class B(A):  
    def function(self):
        self.logger.info("Hello")
</code></pre>
<p>I want to mock <code>self.logger.info</code> to not be called. I tried to used <code>patch('A.logging.info')</code> but it didn't work. I also tried <code>patch('A.logging.getLogger')</code> but if I <code>print type(self.logger)</code> in <code>function()</code> while testing I get an logging object not a mock object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your attribute is set <em>when creating an instance</em>. Just patch <code>logging.getLogger</code> or even <code>logging.Logger.info</code>.</p>
<p>If you patch the <code>logging.getLogger()</code> call, you don't have to patch any other <code>self.logger</code> calls either, as the resulting mock will take care of any attributes on it:</p>
<pre><code>with mock.patch('logging.getLogger') as mock_log:
    mock_logger = mock_log.return_value
    b = B()
    b.function()
    mock_logger.info.assert_called_with('Hello')
</code></pre>
<p>With the mock in place, using <code>logging.getLogger()</code> returns a new mock object (the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value" rel="nofollow"><code>mock_log.return_value</code> object</a>), and any attempt to access <code>self.logger.info</code> then returns the <code>mock_log.return_value.info</code> object, which logs calls testable with the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_with" rel="nofollow"><code>Mock.assert_called_with()</code> method</a>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import mock
&gt;&gt;&gt; import logging
&gt;&gt;&gt; class A(object): 
...     def __init__(self):
...         self.logger = logging.getLogger()
... 
&gt;&gt;&gt; class B(A):
...     def function(self):
...         self.logger.info("Hello")
... 
&gt;&gt;&gt; with mock.patch('logging.getLogger') as mock_log:
...     mock_logger = mock_log.return_value
...     b = B()
...     b.function()
...     mock_logger.info.assert_called_with('Hello')
... 
&gt;&gt;&gt; mock_logger
&lt;MagicMock name='getLogger()' id='4375059984'&gt;
&gt;&gt;&gt; mock_logger.info
&lt;MagicMock name='getLogger().info' id='4374917008'&gt;
&gt;&gt;&gt; mock_logger.info.call_args
call('Hello')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The real issue is that you want to patch <strong>just</strong> <code>info</code> logger and not logger. To do it you should use</p>
<pre><code>patch.object(logging.getlogger(), 'info')

&gt;&gt;&gt; from mock import patch
&gt;&gt;&gt; with patch.object(logging.getLogger(), "info") as mock_info:
...     B().function()
...     print(mock_info.mock_calls)
...     mock_info.assert_called_with("Hello")
[call('Hello')]
</code></pre>
<p>The funny thing is that <code>logging.getLogger()</code> return a global object a so this method work even if <code>B</code> object is created before the patch context:</p>
<pre><code>&gt;&gt;&gt; b = B()
&gt;&gt;&gt; with patch.object(logging.getLogger(), "info") as mock_info:
...     b.function()
...     print(mock_info.mock_calls)
...     mock_info.assert_called_with("Hello")
... 
[call('Hello')]
</code></pre>
</div>
<span class="comment-copy">I removed the <code>B.__init__()</code> method because a) it was redundant without doing anything itself, and b) your <code>super()</code> call was invalid (use <code>super(B, self)</code>, not <code>super(A, self)</code>).</span>
<span class="comment-copy">sorry for the mistakes i tried to do a quick example which was representing my actual code.</span>
<span class="comment-copy">Be <i>careful</i> when producing a new example, in that it still should <i>reproduce the problem you have</i>. Test the code you post first to see that you haven't accidentally removed the source of your issue. Oh, and that it actually <i>works</i>.</span>
<span class="comment-copy">Also see <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> in the help center.</span>
<span class="comment-copy">Ok the issue was that I was creating a object to test in all my unit tests and as i added the logging patch after the object was created it couldn't work.</span>
<span class="comment-copy">I tried already to patch only logging.getLogger but it's not working. If I do a patch(A.logging.getLogger) and do a print type(self.logger) i still get a logging object not a mock object. class A and B are in different files.</span>
<span class="comment-copy">@RomanzoCriminale: then <i>show that in your question</i>. Include how it is not working for you (as in, tell us what actually happens and what you expected to happen instead).</span>
<span class="comment-copy">@RomanzoCriminale: note that I told you to patch <code>logging.getLogger</code>, <b>not</b> <code>A.logging.getLogger</code>.</span>
<span class="comment-copy">@RomanzoCriminale: no, <code>mock.patch()</code> takes care of handling that for you.</span>
<span class="comment-copy">I'm trying to update my example because i can't make it work even with your help</span>
