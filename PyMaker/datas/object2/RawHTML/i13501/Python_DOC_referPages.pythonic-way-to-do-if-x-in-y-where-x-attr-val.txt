<div class="post-text" itemprop="text">
<p>I have a class that represents a polynomial as a collection of terms where each term has a coefficient and an exponent. I am working on the <code>__add__</code> method of the class and I am wondering what the most effective way to do something like:</p>
<pre><code>def __add__(self, other):
    new_terms = []
    for term in self.terms:
        if there is a term in other with an exponent == term.exponent
            new_terms.append(Term(term.coef + other_term.coef, term.exponent))
</code></pre>
<p>It strikes me that I'm looking for something such as:</p>
<pre><code>if x in y where x.attr == val
</code></pre>
<p>Or in my specific case:</p>
<pre><code>if x in other where x.exponent == term.exponent
</code></pre>
<p>Does such a thing exist?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to filter your list before doing your contains check.  As tobias_k suggested, you can either build a new list, e.g.</p>
<pre><code>[x for x in other if x.exponent == term.exponent]
</code></pre>
<p>This works directly in an <code>if</code> statement, because an empty list is <code>False</code>:</p>
<pre><code>if [x for x in other if x.exponent == term.exponent]:
</code></pre>
<p>But this does some wasteful work, since it a) has to construct a new list and b) doesn't short-circuit once a result is found.  Better is to use the same syntax in a generator expression:</p>
<pre><code>(True for x in other if x.exponent == term.exponent)
</code></pre>
<p>Which you can then similarly use in an <code>if</code> statement, but no wasteful work is done:</p>
<pre><code>if next((True for x in other if x.exponent == term.exponent), False):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you want <code>[x for x in y if x.attr == val]</code>, or use <code>next</code> with the same expression for just the first such value.</p>
<p>In your case, it could look something like this:</p>
<pre><code>def __add__(self, other):
    for term in self.terms:
        for other_term in (x for x in other.terms 
                             if x.exponent == term.exponent):
            term.coefficient += other_term.coefficient
</code></pre>
<p>However, this will not work too well. First, <code>__add__</code> should not modify neither <code>self</code> nor <code>other</code> but instead create a new polynomial. Also, this will ignore any values from <code>other</code> that have a different exponent that any of the terms in <code>self</code>. And third, the performance is pretty lousy, as it loops the list of terms in <code>other</code> for each term in <code>self</code>, giving it quadratic complexity.</p>
<hr/>
<p>Instead, I suggest using a dictionary, mapping exponents in the term to their coefficient. In fact, you could probably just use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> for that; it already implements <code>__add__</code> in the right way. Something like this:</p>
<pre><code>class Poly:

    def __init__(self, counts):
        self.terms = collections.Counter(counts)

    def __add__(self, other):
        return Poly(self.terms + other.terms)

    def __str__(self):
        return " + ".join("%dx^%d" % (c, x) for x, c in self.terms.items())
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; Poly({2: 1, 1: 3, 0: 5}) + Poly({3: 1, 1: 2, 0: 3})
8x^0 + 5x^1 + 1x^2 + 1x^3
</code></pre>
</div>
<span class="comment-copy">I think you want <code>[x for x in  y if x.attr == val]</code>, or <code>next(the same expression)</code> for just the first such value.</span>
<span class="comment-copy">@tobias_k, could you clarify how that would be used?</span>
<span class="comment-copy">The <code>__add__</code> operator should not mutate the <code>self</code> instance. And don't forget, if a term is not present in A but is present in B, then it should be present in A+B as well. BTW I assumed that your <code>terms</code> variable came from <code>self.terms</code></span>
<span class="comment-copy">If you do sparse polynomials, it might be betterto use a <code>dict</code> to store the  coefficients. And then, <code>2*x**2 + (-2)*x**2</code> should be simplified from <code>0*x**2</code> to simply <code>0</code></span>
<span class="comment-copy">you have to build a new instance of your type and return it explicitly.</span>
<span class="comment-copy">True about the generator expression, but using this just to check whether there <i>is</i> such an element, and then having to search _again_to get that element, seems wasteful, too.</span>
<span class="comment-copy">Agreed, you shouldn't need to use this pattern if you'll be doing anything with the values (you'd just loop over them if so); this is only necessary if you <i>only</i> want to test for existence.</span>
