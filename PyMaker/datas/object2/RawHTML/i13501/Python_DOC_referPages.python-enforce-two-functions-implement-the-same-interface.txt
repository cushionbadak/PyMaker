<div class="post-text" itemprop="text">
<p>I want to do something, for <em>functions</em>, not <em>classes</em>, like </p>
<pre><code>def function_A(param1, param2 = "default_param_2")

def function_B(__signature of A__)
</code></pre>
<p>So that whenever I change the interface of <code>A</code>, this is automatically updated in <code>B</code>. Is there a notion of an "abstract base interface" for functions or a mechanism to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure how useful this is but decorators may give you a least part of what you are looking for.  Consider:</p>
<pre><code>from functools import wraps

def abi(f):
    @wraps(f) #preserves name/doc of wrapped function
    def function_A(param1, param2='param2'):
        print(param1, param2)
    return function_A

@abi
def function_B(*args, **kw):
    "I'm function_B but I'm REALLY function_A.  Look there for params."
    pass
</code></pre>
<p>Defining *args and **kw for function_B makes it flexible for function_A to change its signature.  Any parameters passed into function_B will be mapped to function_A's following the normal rules; too many args, multiple values for argument, etc. will raise TypeErrors.</p>
<p>If you change the signature of function_A, any calls to function_B that still match can be called successfully (assuming the module has been reloaded).  The rest will fail obviously and you'll need to update the calls to function_B.</p>
<p>Hope this helps!  YMMV.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would not do this at runtime, and you cannot change the signature automatically but you can definitely test that in your testing suite using the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow">inspect</a> module.</p>
<p>For instance:</p>
<pre><code>import inspect

def foo(bar, baz=42, **kwargs):
    pass

for param in inspect.signature(foo).parameters.values():
    print('%s is %s' % (param.name, param.kind))
</code></pre>
<p>This will print:</p>
<pre><code>bar is POSITIONAL_OR_KEYWORD
baz is POSITIONAL_OR_KEYWORD
kwargs is VAR_KEYWORD
</code></pre>
<p>You can use this to compare the signature of functions in your test suite. Check out the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow">inspect</a> module for other things you can introspect.</p>
</div>
<div class="post-text" itemprop="text">
<p>Under Python 3 you can easily get the signature:</p>
<pre><code>&gt;&gt;&gt; from inspect import signature
&gt;&gt;&gt; def A(a, b='default'):
...    pass
&gt;&gt;&gt; sig=signature(A) 
&gt;&gt;&gt; print(sig)
(a, b='default')
</code></pre>
<p>Problem is, there is not much you can do with that without being really hacky. </p>
<p>You can compare a function's signature to another:</p>
<pre><code>def A(a, b='default'):
    pass

def B(a, b='something else'):
    if signature(A) != signature(B):
        print('Yo, need to update me!')
    else:
        print('all good in B land')    
</code></pre>
<p>But you cannot dynamically update B to match A.</p>
</div>
<span class="comment-copy">No, there isn't.</span>
<span class="comment-copy">this is a helpful first start, let me play around with this, thanks.</span>
<span class="comment-copy">You might be able to do something with <a href="http://stackoverflow.com/a/147878/298607">decorators</a></span>
