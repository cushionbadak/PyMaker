<div class="post-text" itemprop="text">
<p>Given 2 strings:</p>
<pre><code>a='AAAAAAAA'
b='GGGG'
</code></pre>
<p>I'd like to have a result of  </p>
<pre><code>'AG','AG','AG','AG','A','A','A','A'
</code></pre>
<p>So far I've tried 2 ways and both of them are returning only 4 items  </p>
<p><strong>Map approach:</strong></p>
<pre><code>list(map(lambda x,y:x+y,a,b))
</code></pre>
<p>result:</p>
<pre><code>'AG','AG','AG','AG'
</code></pre>
<p><strong>Zip approach:</strong></p>
<pre><code>list(zip(a,b))
</code></pre>
<p>result:</p>
<pre><code>('A','G'),('A','G'),('A','G'),('A','G')
</code></pre>
<p>Map method looks closer to what I'm looking for</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow"><code>itertools.zip_longest</code></a> which accepts a <code>fillvalue</code> argument :</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; a='AAAAAAAA'
&gt;&gt;&gt; b='GGGG'

&gt;&gt;&gt; [''.join(i) for i in zip_longest(a,b,fillvalue='')]
['AG', 'AG', 'AG', 'AG', 'A', 'A', 'A', 'A']
</code></pre>
<p>If you want to do this without importing a library you can have a look at <code>zip_longest</code> source code.And you might note that this is the most pythonic way to do such task.</p>
<p>By the way you can use another approaches which are not pythonic and efficient, for example you can use <code>atr.ljust</code> to fill the <code>b</code> with a special character and makes its size equal to <code>a</code> then zip them and use a list comprehension to get the expected output :</p>
<pre><code>&gt;&gt;&gt; [''.join((i,j)) if j != '.' else i for i,j in zip(a,b.ljust(len(a),'.'))]
['AG', 'AG', 'AG', 'AG', 'A', 'A', 'A', 'A']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No imports is a strange request, however:</p>
<pre><code>&gt;&gt;&gt; a='AAAAAAAA'
&gt;&gt;&gt; b='GGGG'
&gt;&gt;&gt; [a[i: i + 1] + b[i: i + 1] for i in range(max(map(len, (a, b))))]
['AG', 'AG', 'AG', 'AG', 'A', 'A', 'A', 'A']
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; [''.join(i) for i in zip(a, b)] + list(a[len(b):]) + list(b[len(a):])
['AG', 'AG', 'AG', 'AG', 'A', 'A', 'A', 'A']
</code></pre>
<p>importing itertools is a far better solution</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a='AAAAAAA'
b='GGGG'
listab=[] #declaring new list
for i in range(0,len(a)): #loops for length of a
    item = a[i:i+1] + b[i:i+1] #concatenates a letter from a and b
    listab.append(item) 
print (listab)
</code></pre>
<ol>
<li>Program declares two variables a and b.</li>
<li>Declares an empty list</li>
<li>Starts a for loop assuming variable (a) is longer (you can always write an if statement to check which one is longer if need be)</li>
<li><code>for i in range(0,len(a))</code> increases integer i from 0 to the length of (a)</li>
<li>Then add the letters at the same position in (a) and (b) and append to the empty list you created.</li>
</ol>
<p><code>string[start position: end position]</code> returns the part of the string between the start and the end-1 position.</p>
</div>
<span class="comment-copy">Do you know a solution that doesn't need importing libraries? Of course this one works great, I'm just trying to understand the logic behind Python itself a little bit better.</span>
<span class="comment-copy">@Random, the required module is <i>standard Python</i>, so no external library is needed. You can take a look at the equivalent Python code for <code>zip_longest</code> in the module's <a href="https://docs.python.org/3.0/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">@wap26 Like I said - I'm more after a concept (i.e. one I could port to other language) not an API call</span>
<span class="comment-copy">That's a great edit @Kasramvd, thanks</span>
<span class="comment-copy">@Random As Wao26 said <code>itertools</code> is not an external lib, and if you can check the source to find the python code there.Anyway I edited the answer with another alternative which is not the way to go with such tasks.</span>
