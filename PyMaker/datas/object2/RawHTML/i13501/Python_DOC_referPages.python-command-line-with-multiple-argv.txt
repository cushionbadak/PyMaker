<div class="post-text" itemprop="text">
<p>i wrote a bash script that is basicly a wrapper for the commands nsupdate/rndc.  It checks the status of dns servers, querys them, then add/remove records,cname,reverse, etc.</p>
<p>Problem is.... it's a big pile of shell commands that is going everywhere.  It's not too pretty and a nightmare to maintain.</p>
<p>I've come across the dnsupdate python library (<a href="http://www.dnspython.org/" rel="nofollow">http://www.dnspython.org/</a>) which to me does everything i'm doing but better.  So i would like to recode everything in python.</p>
<p>I'm fairly new in python (I know the language structure but just never did a big project like this) and i'm stubbling right from the start with the command line opts.</p>
<p>I've read the argparse python doc but not sure it's the way to go.  In shell a simple getopt and a case does the trick but how does python handle cmd line options?</p>
<pre><code>./easy_nsupdate -a record -ip=10.10.10.10 -name=toto
./easy_nsupdate -r record -ip=10.10.10.10 -name=toto
./easy_nsupdate -a cname -name=toto -cname=newtoto
./easy_nsupdate -r cname -cname=newtoto
</code></pre>
<p>With some opt values being forward or reverse or the dreaded --force at the end to bypass all the dns query checks.</p>
<p>Now this is my try with getopt but that doesn't seem to be a very good start:</p>
<pre><code>def main(argv):
    if len(sys.argv) &gt; 4 :
        usage()
        print("Too many arguments")
        sys.exit()
    try:
        opts, args = getopt.getopt(argv, "h:d", ["help", "add_rec", "remove_rec"])
    except getopt.GetoptError:
        usage()
        sys.exit(1)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt == '-d':
            global _debug
            _debug = 1
        elif opt in ("add_rec"):
            operation,record,info = arg1, arg2, arg3
        elif opt in ("remove_rec"):
            operation,record,info = arg1, arg2, arg3
        elif opt in ("add_cname"):
            operation,record,info = arg1, arg2, arg3
        elif opt in ("remove_cname"):
            operation,record,info = arg1, arg2
</code></pre>
<p>Simply put:  How do you guys handle a long list of args + values at the command line?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <a href="http://docs.python-guide.org/en/latest/" rel="nofollow">The Hitchhiker's Guide to Python</a> there is a <a href="http://docs.python-guide.org/en/latest/scenarios/cli/" rel="nofollow">page</a> dedicated to libraries for helping you with building console applications. I recommend you use <a href="http://click.pocoo.org/5/" rel="nofollow">Click</a> and the author does a good job explaining <a href="http://click.pocoo.org/5/why/" rel="nofollow">why</a>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Simply put: How do you guys handle a long list of args + values at the command line?</p>
</blockquote>
<p>Python's built in <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow"><code>argparse</code></a> is the module for you:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                   help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                   const=sum, default=max,
                   help='sum the integers (default: find the max)')

args = parser.parse_args()
print(args.accumulate(args.integers))
</code></pre>
</div>
<span class="comment-copy">maybe have a look at <a href="https://docs.python.org/2/howto/argparse.html" rel="nofollow noreferrer">argparse</a> or <a href="http://docopt.org/" rel="nofollow noreferrer">docopt</a> (my personal favorite).</span>
<span class="comment-copy">Learn <code>argparse</code> and let it do the work. Yes, it's a little more work when you're just learning it, but it also gives a lot of side-benefits (no manually writing a usage statement separate from the actual switch definitions, handling switches and positional arguments combined, performing type conversion and verification with useful error messages, etc.).</span>
<span class="comment-copy">Yes argparse does it but you really have to sync in.  I'll check docopt and click and if i don't find my piece with those tools i'll just have to learn argparse</span>
<span class="comment-copy">Click and Docopt sound like the way to go before syncing into argparse.  Thanks!</span>
<span class="comment-copy">I know it's the right thing to do but python offers alot of simpler options that i'll try the easy first and if i'm not completly satisfied i'll bang myself and learn argparse.  Thanks!</span>
