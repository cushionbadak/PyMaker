<div class="post-text" itemprop="text">
<p>in my program I want to have 1D array, convert it to a 2D array, convert it back to a 1D array again and I want to search for a value in the final array. In order to change 1D array to 2D, I used numpy. I used where() function in order to search through the array and in the end I get this output:</p>
<p>(array([4], dtype=int32),) </p>
<p>I get this result but I only need its index, 4 in case. Is there a way which I can only get the numerical result of the where() function or is there an alternative way which allows me to do 1D to 2D and 2D to 1D conversions without using numpy?</p>
<pre><code>import numpy as np

a = [1,2,3,4,5,6,7,8,9];
print(a)
b = np.reshape(a,(3,3))
print(b)
c = b.ravel()
print(c)
d = np.where(c==5)
print(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy as np

a = [1,2,3,4,5,6,7,8,9];
print(a)
b = np.reshape(a,(3,3))
print(b)
c = b.ravel()
print(c)
d = np.where(c==5)
print(d[0][0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>...is there an alternative way which allows me to do 1D to 2D and 2D to 1D conversions without using numpy?</code>:</p>
<p>1-d to 2-d</p>
<pre><code>b = [1,2,3,4,5,6,7,8,9]
ncols = 3
new = []
for i,n in enumerate(b):
    if i % ncols == 0:
        z = []
        new.append(z)
    z.append(n)
</code></pre>
<p>2-d to 1-d: <a href="https://stackoverflow.com/q/952914/2823755">How to make a flat list out of list of lists?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>No numpy version:</p>
<pre><code>from itertools import chain

a = list(range(1, 10))
b = list(zip(*3*(iter(a),)))
c = list(chain.from_iterable(b))
d = c.index(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your case </p>
<pre><code>print(d[0][0])
</code></pre>
<p>will give you the index as integer. But if you want to use any other methods I recommend checking <a href="https://stackoverflow.com/questions/432112/is-there-a-numpy-function-to-return-the-first-index-of-something-in-an-array">Is there a NumPy function to return the first index of something in an array?</a></p>
</div>
<span class="comment-copy"><code>where</code> gives you a tuple of arrays, one array per dimension.  Applied to a 1d array, it is a 1 element tuple; applied to the 2d array it is a 2 element tuple.  <code>d[0]</code> pulls that array out of the tuple.  By the way, <code>d</code> can be used as an index, e.g. <code>a[d]</code> works just as well as <code>a[4]</code>.</span>
<span class="comment-copy">Or if you array is sorted like the one you show, use <code>np.searchsorted(c, 5)</code></span>
<span class="comment-copy">Try <code>print(dir(d))</code> this will tell you what attributes are available</span>
<span class="comment-copy"><code>np.argmax(a==5)</code> will give you the index of the <b>first</b> <code>5</code> in the array.</span>
<span class="comment-copy">@wwii but won't complain if there is no <code>5</code> in a.</span>
<span class="comment-copy">I don't know why but I sure like that <code>zip(*3*(iter(a),))</code> thing.</span>
<span class="comment-copy">@wwii Not my invention. It is one of the itertools recipes. Search for "grouper".</span>
<span class="comment-copy">Yep, I knew that - I still like it.</span>
<span class="comment-copy">@wwii Yeah it's a nice little puzzle to wrap ones head around isn't it?</span>
