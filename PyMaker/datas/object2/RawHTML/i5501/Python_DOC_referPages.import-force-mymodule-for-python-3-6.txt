<div class="post-text" itemprop="text">
<p>Is there a way to do this in python 3.6+?</p>
<pre><code>import -force mymodule
</code></pre>
<p>I just want a single python command that both:</p>
<p>(1) loads the module for the first time, and </p>
<p>(2) forces a reload of the module if it already loaded without barfing.</p>
<p>(This is not a duplicate question because I'm asking for something different.  What I want is a single function call that will do Items (1) and (2) above as the same function call.  I don't want to make a coding decision manually about if I could issue "import" or "imp.reload".  I just want python code for a single function "def" that can detect which case is appropriate and proceed automatically to make the decision for me about how to import it it, (1) or (2).</p>
<p>I'm thinking that it something like this:</p>
<pre><code>def import_force(m):
    import sys
    if m not in sys.modules:
        import m
    else:
        import importlib
        importlib.reload(m)
</code></pre>
<p>Except, I can't figure out how to pass a module name as a parameter.  Just gives me an error no such module named 'm'</p>
</div>
<div class="post-text" itemprop="text">
<p>There is one missing step that you semi-corrected in your new answer, which is that you need to assign the new module in every scope that uses it. The easiest way is to return the module object and bind it to the name you want outside your function. Your original implementation was 90% correct:</p>
<pre><code>import sys, importlib

def import_force(m):
    if m not in sys.modules:
        return __import__(m)
    else:
        return importlib.reload(sys.modules[m])
</code></pre>
<p>Now you can use this function from the command line to replace <code>import</code>, e.g.:</p>
<pre><code>my_module = force_import('my_module')
</code></pre>
<p>Any time you find yourself using <code>exec</code> to perform a task for which there is so much well defined machinery already available, you have code smell. There is also no reason to re-import <code>sys</code> and <code>importlib</code> every time.</p>
</div>
<div class="post-text" itemprop="text">
<p>This function should do what you want:</p>
<pre><code>def import_force(name):
    needs_reload = name in sys.modules
    module = importlib.import_module(name)
    if needs_reload:
        module = importlib.reload(module)
    return module

# Usage example:
os = import_force('os')
</code></pre>
<p>An alternative approach is to <a href="https://docs.python.org/3/reference/import.html#replacing-the-standard-import-system" rel="nofollow noreferrer">write your own import hooks</a>, which I won't describe.</p>
<p>However please note that <strong>this is an anti-pattern</strong> and I would discourage the practice of reloading modules at every import.</p>
<p>If this is for debugging purposes, then I would suggest using one of the many <a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=auto+reload&amp;submit=search" rel="nofollow noreferrer">auto-reloader solutions available online</a>: they watch your Python files for changes, and when you make modifications they automatically re-import the modules.</p>
<p>The reasons why your function didn't work are two:</p>
<ol>
<li><p>The <code>import</code> keyword does not resolve variables, so <code>import m</code> does not mean "import the module which name is in the variable <code>m</code>", but rather it means "import the module named <code>m</code>".</p></li>
<li><p><code>importlib.reload</code> wants a module object, not a module name.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
import importlib

# importing with a sledgehammer... simple, effective, and it always works
def import_force(name):
    module = importlib.import_module(name)
    module = importlib.reload(module)
    return module

#assuming mymodule.py is in the current directory
mymodule = import_force("mymodule")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's possible! but a little bit tricky to code correctly the first time...</p>
<pre><code>import sys
import importlib

def import_force(modstr):    
    if modstr not in sys.modules:
        print("IMPORT " + modstr)
        cmd = "globals()['%s'] = importlib.import_module('%s')" % (modstr, modstr)
        exec(cmd)
    else:
        print("RELOAD " + modstr)
        cmd = "globals()['%s'] = importlib.reload(%s)" % (modstr, modstr)
        exec(cmd)       
</code></pre>
<p>If you have a module file in your current directory call "mymodule.py", then use it like this:</p>
<pre><code>Py&gt;  import_force("mymodule")
</code></pre>
<p>Version 2.0:</p>
<pre><code>def import_force(modstr):    
    if modstr not in sys.modules:
        print("IMPORT " + modstr)
        globals()[modstr] = importlib.import_module(modstr)
    else:
        print("RELOAD " + modstr)
        globals()[modstr] = importlib.reload(sys.modules[modstr])
</code></pre>
</div>
<span class="comment-copy">(Alternatively, is there a python command that resets the memory back to a checkpoint state?  Then, to clear the loaded module I can just reset the memory checkpoint and reissue the "import mymodule" without needing to reload as well.  Example, load python interactive, check point memory, run imports, reload memory checkpoint of previously saved, rerun imports. I know this one is kind of a long shot...)</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1254370/reimport-a-module-in-python-while-interactive">Reimport a module in python while interactive</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer">docs.python.org/3/library/importlib.html#importlib.reload</a></span>
<span class="comment-copy">There's a good writeup on ways to do this along with caveats at <a href="http://justus.science/blog/2015/04/19/sys.modules-is-dangerous.html" rel="nofollow noreferrer">justus.science/blog/2015/04/19/sys.modules-is-dangerous.html</a></span>
<span class="comment-copy">Your existing code is almost there.  To import from a string, use <code>importlib.import_module</code>.  You will need to assign the resulting object into <code>globals()</code>.</span>
<span class="comment-copy">It's quite useful in the context of making frequent debugging changes that OP described. Certainly not for production use.</span>
<span class="comment-copy">So what if it’s an “anti pattern”... it’s a useful debugging “pattern” that saves me time...  that’s interesting I didn’t think of using the import to lookup the module object.  Thanks.  That’s why I had to get strange with the exec statements.</span>
<span class="comment-copy">@BillMoore: if it's for debugging, than go for it. I don't think patterns and anti-patterns matter a lot in debugging environments. By the way, may I suggest using an auto-reloader (see updated answer)? I find it pretty useful during development</span>
<span class="comment-copy">Using <code>exec</code> here is just as pointless as in your earlier answer.</span>
<span class="comment-copy">How do you figure?  Importlib returns the module  object then I assign it to a global variable.  Exec import is only pointless if you don’t assign local module to global</span>
<span class="comment-copy">@Bill. 90% of what you do with exec here, as before, should just be plain Python code, not a string.</span>
<span class="comment-copy">Also, if you put your function in a module of its own, setting globals won't do anything close to what you want.</span>
