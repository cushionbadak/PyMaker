<div class="post-text" itemprop="text">
<p>I am running a terminal command to list a directory, I would like to loop through each line returned and search for a particular filename, I have this so far...</p>
<pre><code>import subprocess

for line in subprocess.check_output(['ls', '-l']):
    if "(myfile.txt)" in line: 
        print("File Found")
</code></pre>
<p>But this is just outputing the list and doesn't seem to be searching for the file, anyone have an example they can point me at?</p>
</div>
<div class="post-text" itemprop="text">
<p>Calling <code>ls</code> from within <code>subprocess</code> would return a <code>Bytes</code> Object.<br/>
So, first, You might want to convert the returned value to a String.<br/>
And then split the <code>String</code> with New-Line ("\n") as delimiter.<br/>
Afterwards, you can iterate and search for your Needle in the List-Values.</p>
<pre><code>import subprocess
# CALLING "subprocess.check_output(['ls', '-l']" RETURNS BYTES OBJECT...
# SO WE DECODE THE BYTES INTO STRING, FIRST
# AND THEN SPLIT AT THE NEW-LINE BOUNDARY TO CONVERT IT TO A LIST
for line in bytes.decode(subprocess.check_output(['ls', '-l'])).split(sep="\n"):
    # NOW WE CAN CHECK IF THE DESIRED FILE IS IN THE LINE
    if "(myfile.txt)" in line:
        print("File Found")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try to pass in the encoding <code>utf-8</code> and split it by <code>\n</code>.</p>
<pre><code>for line in subprocess.check_output(['ls', '-l'], encoding="utf-8").split("\n"):
    # print(line)
    if "myfile.txt" in line: 
         print("File Found")
</code></pre>
<p>As originally, <code>check_output</code> was returning bytes, thus we pass in encoding here. Also, since you want to search it line by line, we split it with <code>\n</code>. (Tested on Python 3.)</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output</code></a>: ... <strong>By default, this function will return
  the data as encoded bytes</strong>. The actual encoding of the output data may
  depend on the command being invoked, so the decoding to text will
  often need to be handled at the application level.</p>
<p>This behaviour may be overridden by setting universal_newlines to True
  as described above in Frequently Used Arguments. -- cited from <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#subprocess.check_output</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Why not use something that is more reliable such as <code>os.listdir</code> or <code>glob</code>:</p>
<pre><code>import glob

if glob.glob('myfile.txt'):
    print('File found')
else:
    print('File not found')
</code></pre>
<p>The <code>glob.glob</code> function returns a list of files that match the wildcard. In this case, you will have <code>['myfile.txt']</code> if the file exists, or <code>[]</code> if not.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
 def find(name):
    for root, dirs, files in os.walk('C:\\');
        if name in files:
            print(root,name)
            print("FINISH")
            input()

try:
    s=input("name:  ")
    find(s)
except:
    None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>to output the contents of a directory, i would recommend the os module.</p>
<pre><code>import os

content = os.listdir(os.getcwd())
</code></pre>
<p>then you have a searchable list.</p>
<p>But are you sure, your file ist named (myfile.txt) ??</p>
</div>
<span class="comment-copy">Your explanation is kind of misleading. I think it is not the <code>ls</code> function that returns a <code>Bytes</code> object but this is what <code>check_output</code> returns. Also, the <code>Bytes</code> object is iterable. You can try to iterate over it.</span>
<span class="comment-copy">@Tai  Thanks for Pointing that out :-)</span>
<span class="comment-copy">That would be perfectly ideal if he was interested in doing it directly. Perhaps he's just experimenting with the <code>subprocess</code> module.... However, if not for any valid reason, your solution would be most appropriate and straightforward.</span>
<span class="comment-copy">Please also add some info in ordinary text on how this answers OP's question.</span>
