<div class="post-text" itemprop="text">
<p>So I'm currently planning on making a relatively basic game which involves enemies making their way towards a player's "base" which will be located directly at the centre of the screen. I'm struggling to find a way in which I can spawn these enemies from all sides of the screen but only on the edges. Below is the basic class I have created for the enemy sprite and my attempt at trying to spawn them in a location that is on the outer part of the screen. For the most part it works, apart from the fact that it will never spawn any of the sprites at the bottom outer part of my screen since I'm unsure of how to make the Y coordinate a random number between 0,80 OR between 600,680. Also, this doesn't really seem like the most efficient way of assigning the X and Y values. Would appreciate any advice or help given. Screen dimensions I am using are 800x680, Thanks. </p>
<pre><code>class Enemy(pygame.sprite.Sprite):
def __init__(self,x,y):
    pygame.sprite.Sprite.__init__(self)
    self.image = pygame.Surface((15,15))
    self.image.fill(RED)
    self.rect = self.image.get_rect()
    self.rect.x = x
    self.rect.y = y

all_sprites = pygame.sprite.Group()
mobs = pygame.sprite.Group()
for i in range (10):
    x = random.randint(0,800)
    if x &lt; 100 or x &gt; 700:
        y = random.randint(0,680)
    else:
        y = random.randint(0,80)
    m = Enemy(x,y)
    all_sprites.add(m)
    mobs.add(m)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could create a list of the sides (as strings), pick one with <code>random.choice</code> and then assign the coordinates depending on the chosen side. </p>
<pre><code>sides = ['top', 'bottom', 'left', 'right']
while True:
side = random.choice(sides)

if side == 'top':
    y = 0
    x = random.randrange(screen_width-4)
# etc.
</code></pre>
<p>However, there's a problem because the density at the shorter edges will be higher. If you want to distribute the objects randomly along all edges, you can use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> (available in Python 3.6+) which makes selections according to weights. Just pass the lengths of the edges as the <code>weights</code> argument. Here's a short example (I just draw red rects):</p>
<pre><code>import random
import pygame as pg

pg.init()
RED = pg.Color('red')
screen = pg.display.set_mode((800, 400))
width, height = screen.get_size()
clock = pg.time.Clock()
done = False

sides = ['top', 'bottom', 'left', 'right']
weights = [width, width, height, height]

while not done:
    for event in pg.event.get():
        if event.type == pg.QUIT:
            done = True

    side = random.choices(sides, weights)[0]

    if side == 'top':
        y = 0
        x = random.randrange(width-4)
    elif side == 'bottom':
        y = height-4
        x = random.randrange(width-4)
    elif side == 'left':
        x = 0
        y = random.randrange(height-4)
    elif side == 'right':
        x = width-4
        y = random.randrange(height-4)

    pg.draw.rect(screen, RED, (x, y, 4, 4))
    pg.display.flip()
    clock.tick(30)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could let <code>randint</code> decide for you whether to put an enemy on top or bottom:</p>
<pre><code>for i in range (10):
   x = random.randint(0,800)
   if x &lt; 100 or x &gt; 700:
       y = random.randint(0,680)
   else:
       bot_top = random.randint(0,1)
       if(bot_top == 0):
          y = random.randint(0,80)
       else:
          y = random.randint(600,680)
   m = Enemy(x,y)
   all_sprites.add(m)
   mobs.add(m)
</code></pre>
</div>
