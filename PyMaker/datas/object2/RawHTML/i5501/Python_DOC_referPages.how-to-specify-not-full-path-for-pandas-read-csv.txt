<div class="post-text" itemprop="text">
<p>I'm working with <a href="https://grouplens.org/datasets/movielens/100k/" rel="nofollow noreferrer">this tutorial</a>, and I'm using pandas to go through.</p>
<p>This is the code fragment I typed and received an error:
</p>
<pre><code>users = pd.read_csv('ml-100k//u.users', sep = '|', names = ['User ID', 'Age','Gender', 'Occupation','Zip Code'])
</code></pre>
<p>Error produced by code above:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;pyshell#33&gt;", line 1, in &lt;module&gt;
    users = pd.read_csv('ml-100k//u.users', sep = '|', names = ['User ID', 'Age','Gender', 'Occupation','Zip Code'])
  File "C:\Program Files\Python 3.5\lib\site-packages\pandas\io\parsers.py", line 709, in parser_f
    return _read(filepath_or_buffer, kwds)
  File "C:\Program Files\Python 3.5\lib\site-packages\pandas\io\parsers.py", line 449, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File "C:\Program Files\Python 3.5\lib\site-packages\pandas\io\parsers.py", line 818, in __init__
    self._make_engine(self.engine)
  File "C:\Program Files\Python 3.5\lib\site-packages\pandas\io\parsers.py", line 1049, in _make_engine
    self._engine = CParserWrapper(self.f, **self.options)
  File "C:\Program Files\Python 3.5\lib\site-packages\pandas\io\parsers.py", line 1695, in __init__
    self._reader = parsers.TextReader(src, **kwds)
  File "pandas\_libs\parsers.pyx", line 402, in pandas._libs.parsers.TextReader.__cinit__
  File "pandas\_libs\parsers.pyx", line 718, in pandas._libs.parsers.TextReader._setup_parser_source
FileNotFoundError: File b'ml-100k//u.users' does not exist
</code></pre>
<hr/>
<p>I figured it out how to make it work by writing:</p>
<pre><code>users = pd.read_csv(r'C:\\Users\\User\\Documents\\Python3\\ml-100k\\ml-100k\\u.user', sep = '|', names = ['User ID', 'Age','Gender', 'Occupation','Zip Code'])
</code></pre>
<p>Is there an easier way to do this without writing in full file path? I use a Windows 64 Pro.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several ways to specify path in <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer"><code>pandas.read_csv()</code> documentation</a>:</p>
<blockquote>
<p><strong>filepath_or_buffer</strong> : <em><a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer"><code>str</code></a>, <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" rel="nofollow noreferrer"><code>pathlib.Path</code></a>, <a href="https://py.readthedocs.io/en/latest/path.html#py._path.local.LocalPath" rel="nofollow noreferrer"><code>py._path.local.LocalPath</code></a> or any object with a <code>read()</code> method (such as a file handle or <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer"><code>StringIO</code></a>)</em></p>
<p>The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. For instance, a local file could be file <code>://localhost/path/to/table.csv</code></p>
</blockquote>
<ul>
<li><blockquote>
<p><em>class</em> <code>pathlib.Path(*pathsegments)</code></p>
<p>A subclass of <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath" rel="nofollow noreferrer"><code>PurePath</code></a>, this class represents concrete paths of the system’s path flavour (instantiating it creates either a <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath" rel="nofollow noreferrer"><code>PosixPath</code></a> or a <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath" rel="nofollow noreferrer"><code>WindowsPath</code></a>):</p>
<pre><code>&gt;&gt;&gt; Path('setup.py')
PosixPath('setup.py')
</code></pre>
<p><em>pathsegments</em> is specified similarly to <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath" rel="nofollow noreferrer"><code>PurePath</code></a>.</p>
</blockquote></li>
<li><blockquote>
<p><em>class</em> <code>pathlib.WindowsPath(*pathsegments)</code></p>
<p>A subclass of <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" rel="nofollow noreferrer"><code>Path</code></a> and <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PureWindowsPath" rel="nofollow noreferrer"><code>PureWindowsPath</code></a>, this class represents concrete Windows filesystem paths:</p>
<pre><code>&gt;&gt;&gt; WindowsPath('c:/Program Files/')
WindowsPath('c:/Program Files')
</code></pre>
<p><em>pathsegments</em> is specified similarly to <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath" rel="nofollow noreferrer"><code>PurePath</code></a>.</p>
</blockquote></li>
<li><blockquote>
<p><em>class</em> <strong><code>io.TextIOBase</code></strong></p>
<p>Base class for text streams. This class provides a character and line based interface to stream I/O. There is no <code>readinto()</code> method because Python’s character strings are immutable. It inherits <a href="https://docs.python.org/3/library/io.html#io.IOBase" rel="nofollow noreferrer">IOBase</a>. There is no public constructor.
  <a href="https://docs.python.org/3/library/io.html#io.TextIOBase" rel="nofollow noreferrer"><code>TextIOBase</code></a> provides or overrides these data attributes and methods in addition to those from <a href="https://docs.python.org/3/library/io.html#io.IOBase" rel="nofollow noreferrer"><code>IOBase</code></a>:</p>
<p><strong><code>read(size)</code></strong></p>
<p>Read and return at most <em><code>size</code></em> characters from the stream as a single <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer">str</a>. If <em><code>size</code></em> is negative or <code>None</code>, reads until EOF.</p>
</blockquote></li>
</ul>
<p>TextIOBase provides or overrides these data attributes and methods in addition to those from IOBase:</p>
<p>Also I've found <a href="https://stackoverflow.com/questions/2953834/windows-path-in-python#2953843">question about path specifying in Windows</a>, answers say, that it can be done in several ways:</p>
<ul>
<li><blockquote>
<p>you can use always:</p>
<pre><code>'C:/mydir'
</code></pre>
</blockquote></li>
<li><blockquote>
<p>this works both in linux and windows. Other posibility is</p>
<pre><code>'C:\\mydir'
</code></pre>
</blockquote></li>
<li><blockquote>
<p>if you have problems with some names you can also try raw strings:</p>
<pre><code>r'C:\mydir'
</code></pre>
</blockquote></li>
<li><blockquote>
<p>however best practice is to use the os.path module functions that
  always select the correct configuration for your OS:</p>
<pre><code>os.path.join(mydir, myfile)
</code></pre>
</blockquote></li>
</ul>
<hr/>
<p><strong>TLDR</strong>: Easiest and least complex way is by specifying path variable as </p>
<pre><code>CSV_FILE = r'C:\Users\User\Documents\Python3\ml-100k\ml-100k\u.user'
</code></pre>
<p>or</p>
<pre><code>CSV_FILE = 'C:\\Users\\User\\Documents\\Python3\\ml-100k\\ml-100k\\u.user'
</code></pre>
<p>and better, though still easy way would be</p>
<pre><code>CSV_FILE = os.path.join('C:', 'Users', 'User', 'Documents', 'Python3', 'ml-100k', 'ml-100k', 'u.user')
</code></pre>
<p>you can also specify path relatively to your working directory (for example if you have your script in <code>C:\Users\User\Documents\Python3\ml-100k\ml-100k</code>, you could simply specify filename:</p>
<pre><code>CSV_FILE = 'u.user'
</code></pre>
<p>also you can specify URL, like mentioned on the top.</p>
</div>
<div class="post-text" itemprop="text">
<p>I find usefull to work with the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> module. I create <code>Path</code> objects on top of my scripts (or in a dedicated file) like this:</p>
<pre><code>from pathlib import Path
path_1 = Path(r'C:\Users\User\Documents\Python3\ml-100k\ml-100k') # absolute path
path_2 = Path.cwd() # current working directory
</code></pre>
<p>Then this is helpfull for the rest of your scripts. You can use these objects like so:</p>
<pre><code>user = pd.read_csv(path_2.joinpath('u.users'), sep = '|', names = ['User ID', 'Age','Gender', 'Occupation','Zip Code'])
</code></pre>
</div>
<span class="comment-copy">if you start the python shell from the <code>ml-100k</code> folder, you can just specify the file name rather than the entire path as the working directory will be `c:\...\ml-100k`</span>
<span class="comment-copy"><code>'ml-100k//u.users'</code> - The problem may be the two forward slashes. Try a single forward slash. In windows you can use a single forward slash <code>/</code> or double backslash <code>\\` as a separator. Or, if you make it a raw string, a single backslash </code>r"\"`,</span>
