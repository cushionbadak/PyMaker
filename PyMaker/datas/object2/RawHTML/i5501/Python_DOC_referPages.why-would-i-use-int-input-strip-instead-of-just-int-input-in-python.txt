<div class="post-text" itemprop="text">
<p>If I want to take a number as input, would I also need the <code>.strip()</code> method? Like this:</p>
<pre><code>n = int(input().strip())
</code></pre>
<p>Instead of just coding:</p>
<pre><code>n = int(input())
</code></pre>
<p>I know <code>.strip()</code> returns a copy of the string in which all chars have been stripped from the beginning and the end of the string. But I wonder why / if it is necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>It isn't necessary when you cast it to an integer with <code>int</code> because <code>int</code> already handles (ignores) leading and trailing whitespaces*:</p>
<pre><code>&gt;&gt;&gt; int('1 ')
1
&gt;&gt;&gt; int(' 1')
1
&gt;&gt;&gt; int(' 1\n\t')  # also handles other spaces like newlines or tabs
1
</code></pre>
<p>It's mostly important to strip the whitespaces if you use <code>sys.stdin.readline</code> (which contains a trailing newline character) and you don't know if the function that uses that value <em>can</em> handle additional whitespaces.</p>
<hr/>
<p>* Just FYI: The types <code>float</code>, <code>complex</code>, <code>fractions.Fraction</code>, and <code>decimal.Decimal</code> also ignore leading and trailing whitespaces so you don't need to <code>strip</code> the strings if you use any of those.</p>
</div>
<span class="comment-copy">You’re right, there’s no need. Those will always have the same result.</span>
<span class="comment-copy">From the <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer">docs</a>: "Optionally, the literal can be preceded by + or - (with no space in between) and <b>surrounded by whitespace</b>." (emphasis mine) Therefore as @Ryan says, there's no need to strip whitespace.</span>
<span class="comment-copy">also <code>int</code> can parse things like <code>00001</code> where <code>a = 0001</code> fails</span>
<span class="comment-copy">Yes, it can even parse the thousand separators, I was really amazed when <code>int('100_000')</code> worked (Python 3.6).</span>
<span class="comment-copy">That's particularly useful with large hexadecimal numbers (using base 16).</span>
