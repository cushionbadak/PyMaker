<div class="post-text" itemprop="text">
<p>I have written code that creates a text file (if it doesn't exist) and asks you to input a name and an age to record peoples names and ages. I would like to add an elif into my code so that I can update peoples ages. </p>
<p>For example if a text file held the name Paul and their age was 46 and I typed in Paul when asked to input a name, I'd like it to just ask for an updated age.</p>
<p>Here is my attempt that simply doesn't work.</p>
<p>Code:</p>
<pre><code>while True:
    family=open("FamilyAges.txt",'a+')
    familyR=open("FamilyAges.txt",'r')
    line1= familyR.readlines(1)
    name = input('Enter name of person : ')
    if name == 'end':
        break 
    elif name == line1:
        print('test')
    else:
        age = input('Enter age of person : ')
        family.write((name)+' '+(age)+'\n')
        family.close()
</code></pre>
<p>Text File:</p>
<pre><code>Paul 46
Sarah 46
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best solution is to read all the file, keep it in memory using a dict then update the dict every time  you add a name. </p>
<p>When you decide to stop (input 'end') overwrite the file with the  new values in the dict</p>
</div>
<div class="post-text" itemprop="text">
<p>The following solves your immediate problem with the code you posted, however for the goal you described you should think about: This code only checks the first line of your file but you want to check if the name is anywhere in the file.</p>
<p><code>readlines(1)</code> returns a list with one element (the first line). So what you need is:</p>
<pre><code>while True:
    family=open("FamilyAges.txt",'a+')
    familyR=open("FamilyAges.txt",'r')
    line1= familyR.readlines(1)
    name = input('Enter name of person : ')
    if name == 'end':
        break 
    elif name in line1[0]:
        print('test')
    else:
        age = input('Enter age of person : ')
        family.write((name)+' '+(age)+'\n')
        family.close()
</code></pre>
<p>Note the <code>line1[0]</code> and the <code>name in line1[0]</code> (you need this because your line contains not only the name but additional text). </p>
</div>
<div class="post-text" itemprop="text">
<p>A bit longer then Joe's solution, but I like functions more. I did not correct your code, because certain parts were missing - rewriting seemed a better option keeping to stuff you did use. </p>
<p>After <a href="https://stackoverflow.com/users/1092803/gianluca">gianluca</a> answer "what" to do I implemented an example of that for you.</p>
<p>I use the <code>with open(...) as f:</code> instead of your type of file reading as it automatically will close/flush/dispose of the filehandle when leaving the following block. Its the recommed way to operate with files. <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Dictionaries</a>is a data structure for fast key/value access and better suited to your problem then simple strings.</p>
<p>See also <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">reading-and-writing-files</a> </p>
<ol>
<li>Reading the whole file</li>
<li>input loop until done, modifying the dict</li>
<li>then (if needed) saving it.</li>
</ol>
<p>Breaking up funcionality into funcitons is that have a limited scope and are easier to understand helps keep the code cleaner. </p>
<hr/>
<pre><code>def readFile(fn):
    """Read the file given as by filename fn. 

    Expected format: 
    one key:value per line, key being a name, value a string as age.
    Returns a dictionary of the parsed contents key:value if no 
    errors occure. Returs False on IOError or FileNotFoundError"""
    try:
        with open(fn,"r") as f:
            lines = f.read().split("\n")          # read all, split at linebreaks
            print(lines)                          # debugging output
            rv = {}
            for l in lines:                       # parse all lines       
                item =l.split(":",2)                   # split each  
                if item is not None and len(item)==2:  # must be 2 parts
                    rv[item[0]] = item[1]              # put key/valu into dict
            return rv                             # return dict
    except IOError:
        return False                     # error - return false
    except FileNotFoundError:
        pass                             # error - no file, thats ok

    return {}    # no file found, return empty dict


def saveFile(fn,famil):
    """Saves a dictionary famil as filename fn. 

    Produced format: 
    one key:value per line, key being a name, value a string as age.
    Overwrites existing file of same name with new contents."""
    with open(fn,"w+") as f:
        for i in famil:           # for all keys in dict
            f.write(i + ":" + famil[i] + "\n")   # write file


fileName = "FamilyAges.txt"       # consistent filename
family = readFile(fileName)       # read it

if not isinstance(family,dict):   # check if no error, if error, print msg &amp; quit
    print("Error reading file")
else:                             # we got a dict
    print(family)                 # print it 
    gotInput = False              # remember for later if we need to save new data

    while True:                    # loop until name input is "end"    
        name = input('Enter name of person : ')      # input name
        if name == 'end':          # check break condition
            break
        else:
            age = input('Enter age of person : ')    # input age as string, no validation
            family[name] = age                       # store in dictionary
            gotInput = True                          # this will "alter" existing
                                                     # ages for existing names

    if (gotInput):                          # if input happened, save data to file
        saveFile(fileName, family)

    print(family)                           # print dict before end
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>The steps:</strong></p>
<ul>
<li>if the file exists (could use <code>try...except</code> or <code>os.path</code>):

<ul>
<li>Create a dictionary of <code>name: age</code> pairs of people already in there</li>
</ul></li>
<li>else:

<ul>
<li>Create an empty dictionary</li>
</ul></li>
</ul>
<hr/>
<ul>
<li>begin a loop</li>
<li>input name</li>
<li>if <code>name == "end"</code> break out of loop</li>
<li>input age</li>
<li>set name entry in the dictionary to age (will override if not already set)</li>
<li>continue looping</li>
</ul>
<hr/>
<ul>
<li>open the file again, but in write (<code>"w"</code>) mode so it is blanked</li>
<li>loop through each person in the dictionary (old and new)</li>
<li>write to the file their name and age (separated by a space) and then a new-line</li>
</ul>
<hr/>
<p>Here's what that looks like:</p>
<pre><code>try:
    d = {n:a for n, a in (l.split() for l in open("FamilyAges.txt").readlines())}
except FileNotFoundError:
    d = {}

while True:
    name = input("name: ")
    if name == "end":
        break             #will escape loop here, so no need for `elif`s
    age = input("age: ")  #no need to convert to an integer as noo calculations
    d[name] = age

with open("FamilyAges.txt", "w") as f:
    for person in d.items():
        f.write(" ".join(person) + "\n")
</code></pre>
<hr/>
<p>And it works!</p>
<pre><code>$ python t.py 
name: bob
age: 23
name: cat 
age: 98
name: end

$ cat FamilyAges.txt 
bob 23
cat 98

$ python t.py 
name: bob
age: 67
name: fish
age: 10
name: end

$ cat FamilyAges.txt 
bob 67
cat 98
fish 10
</code></pre>
</div>
<span class="comment-copy">Can you explain in detail what exactly does not work?</span>
<span class="comment-copy">So when I get asked for a name, I type in Paul but it doesn't recognise the Paul already exists in the text file and I want it to recognise that it DOES exist</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem. We should be able to paste your posted code into a text file and reproduce the problem you described.  Please update your posted code to reflect the problem.</span>
<span class="comment-copy">Well, you read a line from your text file. But in the line there is not only the name but the name and then a space and then the age. This is why your comparison fails</span>
<span class="comment-copy">Are you sure that your <code>line1</code> contains what you expect? When I tried it I got a list with the string of the first line as element of the list.</span>
<span class="comment-copy">Enter name of person : Paul Traceback (most recent call last):   File "/Users/olivermanning/Documents/familyAges.py", line 21, in &lt;module&gt;     elif name in line1[0]: IndexError: list index out of range</span>
<span class="comment-copy">Strange. I do not get this error. What does line1 look like for you? Index Error for 0 indicates empty list?</span>
<span class="comment-copy">I'd recommend you take the headings out so it's one code block and adding  1. some kind of explanation, 2. some comments on major changes from the OP's code, and 3. <i>documentation for your functions</i>.  Otherwise same <a href="https://stackoverflow.com/questions/48173166/how-to-check-if-the-input-has-already-been-entered-into-a-txt-file#comment83330507_48173557">comment to you as to Joe</a></span>
<span class="comment-copy">@TadhgMcDonald-Jensen  thanks for the feedback, changed and documented.</span>
<span class="comment-copy">You recreate the file even if no input is done. Other then that, cool stuff +1 - You might overwrite a existing file with a new one if "on start" an error occures but it saves with success.</span>
<span class="comment-copy">Completely rewriting the OP's code doesn't help them write better code, it just encourages the use of code without understanding it.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen Thanks for the feedback, but I would disagree. When I started off learning the basics of Python, seeing how others would accomplish the same task, especially if there was some explanation alongside really helped me personally.</span>
