<div class="post-text" itemprop="text">
<p>This code runs fine under regular CPython 3.5:</p>
<pre><code>import concurrent.futures

def job(text):
    print(text)

with concurrent.futures.ProcessPoolExecutor(1) as pool:
    pool.submit(job, "hello")
</code></pre>
<p>But if you run it as <code>python -m doctest myfile.py</code>, it hangs.  Changing <code>submit(job</code> to <code>submit(print</code> makes it not hang, as does using <code>ThreadPoolExecutor</code> instead of <code>ProcessPoolExecutor</code>.</p>
<p>Why does it hang when run under doctest?</p>
</div>
<div class="post-text" itemprop="text">
<p>So I think the issue is because of your <code>with</code> statement. When you have below</p>
<pre><code>with concurrent.futures.ProcessPoolExecutor(1) as pool:
    pool.submit(job, "hello")
</code></pre>
<p>It enforces the thread to be executed and closed then an there itself. When you run this as main process it works and gives time for thread to execute the job. But when you <code>import</code> it as a module then it doesn't give the background thread a chance and the <code>shutdown</code> on the pool waits for the work to be executed and hence a <code>deadlock</code></p>
<p>So the workaround that you can use is below</p>
<pre><code>import concurrent.futures

def job(text):
    print(text)

pool = concurrent.futures.ProcessPoolExecutor(1)
pool.submit(job, "hello")

if __name__ == "__main__":
    pool.shutdown(True)
</code></pre>
<p>This will prevent the <code>deadlock</code> and will let you run <code>doctest</code> as well as <code>import</code> the module if you want</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that importing a module acquires a lock (which lock depends on your python version), see the <a href="https://docs.python.org/3/library/imp.html#imp.lock_held" rel="nofollow noreferrer">docs for <code>imp.lock_held</code></a>. </p>
<p>Locks are shared over multiprocessing so your deadlock occurs because your main process, while it is importing your module, loads and waits for a subprocess which attempts to import your module, but can't acquire the lock to import it because it is currently being imported by your main process.</p>
<p>In step form:</p>
<ol>
<li>Main process acquires lock to import <code>myfile.py</code></li>
<li>Main process starts importing <code>myfile.py</code> <em>(it has to import <code>myfile.py</code> because that is where your <code>job()</code> function is defined, which is why it didn't deadlock for <code>print()</code>)</em>.</li>
<li>Main process starts <em>and blocks on</em> subprocess.</li>
<li>Subprocess tries to acquire lock to import <code>myfile.py</code></li>
</ol>
<p>=&gt; Deadlock.</p>
</div>
<div class="post-text" itemprop="text">
<p>doctest imports your module in order to process it.  Try adding this to prevent execution on import:</p>
<pre><code>if __name__ == "__main__":
    with concurrent.futures.ProcessPoolExecutor(1) as pool: 
        pool.submit(job, "hello")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should actually be a comment, but it's too long to be one.</p>
<p>Your code fails if it's imported as a module too, with the same error as doctest. I get <code>_pickle.PicklingError: Can't pickle &lt;function job at 0x7f28cb0d2378&gt;: import of module 'a' failed</code> (I named the file as <code>a.py</code>). </p>
<p>Your lack of <code>if __name__ == "__main__":</code> violates the programming guidelines for multiprocessing:
<a href="https://docs.python.org/3.6/library/multiprocessing.html#the-spawn-and-forkserver-start-methods" rel="nofollow noreferrer">https://docs.python.org/3.6/library/multiprocessing.html#the-spawn-and-forkserver-start-methods</a></p>
<p>I guess that the child processes will also try to import the module, which then tries to start another child process (because the pool unconditionally executes). But I'm not 100% sure about this.
I'm also not sure why the error you get is <code>can't pickle &lt;function&gt;</code>.</p>
<p>The issue here seems to be that you want the module to auto start a process on import. I'm not sure if this is possible.</p>
</div>
<span class="comment-copy">Any update/feedback on the answer I posted?</span>
<span class="comment-copy">This answer is a little misleading, because the problem is not with the <code>with</code> statement. You can reproduce this behaviour without the <code>with</code> statement by doing <code>pool = ...ProcessPoolExecutor()</code> <code>pool.submit(...)</code> <code>pool.shutdown()</code>. The problem is the import lock, as I note in my answer.</span>
<span class="comment-copy">@daphtdazz, I do agree with you. I was not aware of <code>https://docs.python.org/3/library/imp.html#imp.lock_held</code> to quote that in my answer, I just knew it is a import deadlock. When I said the <code>with</code> statement is the issue, I meant that the <code>__exit__</code> of the <code>ProcessPoolExecutor</code> will execute the <code>shutdown</code> method and cause the deadlock with import. Your answer explains one layer below mine. Both are correct in their own context. You explained why it doesn't work and I explained how to make it work.</span>
<span class="comment-copy">That sidesteps the problem by preventing the code from running all together.  But I don't want to prevent the code from running, I want to prevent it from hanging.</span>
<span class="comment-copy">Would you like the code to run under doctest?</span>
<span class="comment-copy">The code should run when the module is loaded (e.g. by doctest, or regular import), or run as a standalone script.</span>
<span class="comment-copy">I see what you're saying.  Still, the problem is that I want to be able to launch a ProcessPoolExecutor within a doctest.  That is what I can't get to work.  Simply hiding all the code under <code>if name == "main"</code> doesn't work, because that prevents the code from ever running (under doctest).</span>
<span class="comment-copy">Why not put the code for the ProcessPoolExecutor in the doctest string so it runs it as a test? Or is there some other use case?</span>
