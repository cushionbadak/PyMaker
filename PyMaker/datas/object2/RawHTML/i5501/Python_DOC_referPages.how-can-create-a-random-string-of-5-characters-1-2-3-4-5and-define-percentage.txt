<div class="post-text" itemprop="text">
<p>How can create a random string of 5 characters? (1,2,3,4,5) and define percentage-wise of this characters.</p>
<p>I'd like to define how many times in % should be every character from ["1","2","3","4","5"] in new random_char</p>
<p>for example: </p>
<ol>
<li>is 50% from 100 it should be 50 characters of '1' </li>
<li>is 20% from 100 it should be 20 characters of '2' </li>
<li>is 10% form 100 it should be 10 characters of '3' </li>
<li>is 15% from 100 it should be 15 characters of '4' </li>
<li>is  5% from 100 it should be  5 characters of '5'</li>
</ol>
<p>No more than 100 %, of course.</p>
<pre><code>import random
string = ["1","2","3","4","5"]

random_char=''
for i in range(0,100):
    random_char+=random.choice(string)

print(random_char)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Function <code>random.choices</code> is new in python 3.6, but you can easily to implement it with <code>random.shuffle</code>:</p>
<pre><code>import random

def choices(options, percentages, length):
    result = []
    for (char, weight) in zip(options, percentages):
        n = int(weight / 100.0 * length)
        result.extend(char * n)
    random.shuffle(result)
    return ''.join(result)

def test(options, percentages, length):
    string = choices(options, percentages, length)
    print(string)
    for char in options:
        count = string.count(char)
        perc = count / length * 100.0
        print('Character {!r} is in result: {} times = {}%'.format(char, count, perc))
    print()

percentages = 50, 20, 10, 15, 5

test(['1', '2', '3', '4', '5'], percentages, 40)
test(['a', 'b', 'c', 'd', 'e'], percentages, 80)
test(['q', 'w', 'e', 'r', 't'], percentages, 100)
</code></pre>
<p><strong>Sample output</strong>:</p>
<pre><code>3141213511213142214421511411141211121213
Character '1' is in result: 20 times = 50.0%
Character '2' is in result: 8 times = 20.0%
Character '3' is in result: 4 times = 10.0%
Character '4' is in result: 6 times = 15.0%
Character '5' is in result: 2 times = 5.0%

dacadaabaaebeadaadaaccacaaadadbaabddaababdacbaadaaceaeaabaacabdaabcaaadabbbbabab
Character 'a' is in result: 40 times = 50.0%
Character 'b' is in result: 16 times = 20.0%
Character 'c' is in result: 8 times = 10.0%
Character 'd' is in result: 12 times = 15.0%
Character 'e' is in result: 4 times = 5.0%

qqetweqrrwqqwqqqqqqwqerqqqwqeqwqwqwqqqqrqwqwrqqqqwwqqqqqqrqrreqqrrqqqqeqwreqtqtrqwetewrwqqtrwewqrwwq
Character 'q' is in result: 50 times = 50.0%
Character 'w' is in result: 20 times = 20.0%
Character 'e' is in result: 10 times = 10.0%
Character 'r' is in result: 15 times = 15.0%
Character 't' is in result: 5 times = 5.0%
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you always want that fixed proportion in a 100-char-long string, you can simply shuffle a string with what you want:</p>
<pre><code>import random


s = list('1' * 50 + '2' * 20 + '3' * 10 + '4' * 15 + '5' * 5)
random.shuffle(s)
''.join(s)
</code></pre>
<p>That gives you something like:</p>
<blockquote>
<p>'1112213241213121114254411211141541342111141411411152423322114133124141512212211521213131111111311214'</p>
</blockquote>
<p>If you want it to be random and have any length, then you can use <code>choices</code> instead.</p>
<pre><code>options = '12345'
weights = [.5, .2, .1, .15, .05]
length = 10  # how many characters long

''.join(random.choices(options, weights, k=length))
</code></pre>
<p>Which gives results like:</p>
<blockquote>
<p>'5514232551'</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure I understand your question, but here's a guess:</p>
<pre><code>import random

num_chars = 100
characters = "12345"
percentages = .50, .20, .10, .15, .05
counts = [int(percent*num_chars) for percent in percentages]
random_chars = ['' for _ in range(num_chars)]   # Initialize to empty chars.

for char, count in zip(characters, counts):
    for _ in range(count):
        while True:
            index = random.randrange(0, num_chars)  # Pick random spot.
            if not random_chars[index]:  # Empty?
                random_chars[index] = char
                break

random_chars = ''.join(random_chars)
print('random_chars:', random_chars)

# Verify result is correct.
if len(random_chars) != num_chars:
    print('Generated string is wrong length ({} instead of {})'.format(
        len(random_chars), num_chars))

# Check distribution of characters.
for char in characters:
    count = sum(1 for i in range(num_chars) if random_chars[i] == char)
    print('Character {!r} is in result: {} times'.format(char, count))
</code></pre>
<p>Sample output:</p>
<pre class="lang-none prettyprint-override"><code>random_chars: 1422121211111141334154411511142221114211131212342242222332511241351121114314151431434111111111121111
Character '1' is in result: 50 times
Character '2' is in result: 20 times
Character '3' is in result: 10 times
Character '4' is in result: 15 times
Character '5' is in result: 5 times
</code></pre>
<p>However, as I said in a comment, using <code>random.shuffle()</code> would be more efficient and straightforward:</p>
<pre><code>num_chars = 100
characters = "12345"
percentages = 50, 20, 10, 15, 5
random_chars = [char*round(percent/100*num_chars)
                    for char, percent in zip(characters, percentages)]
random.shuffle(random_chars)
random_chars = ''.join(random_chars)
print('random_chars:', random_chars)
</code></pre>
</div>
<span class="comment-copy">It's not clear what your question is.  I think you wight be interested in the <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> function, which allows you to select from one sequence using another sequence of weights.</span>
<span class="comment-copy">It is reversely to this, I'd like to define output but in %   a='12345123331112321421243'  dict((letter,a.count(letter)) for letter in set(a))  Output {'1': 7, '2': 6, '3': 6, '4': 3, '5': 1}</span>
<span class="comment-copy">So you have some input string and then you want the character counts of that string to be the weights to the random selection of characters for a different string?</span>
<span class="comment-copy">It's the only percentage in this case but we change num_chars = 1000 there   will be a lot of free space between random_chars</span>
<span class="comment-copy">batmanforever: That's easy to fix by converting the percentages to floats in the range of 0..1 and then converting those into whole number character counts. See updated code in my answer. Regardless, the idea of using <code>random.shuffle()</code> as mentioned in @grovina's <a href="https://stackoverflow.com/a/48143077/355230">answer</a> would be more efficientâ€”although not in it's current form because it, too, needs more generalization.</span>
<span class="comment-copy">martineau:  thanks for the explanation</span>
