<div class="post-text" itemprop="text">
<p>Hello I want to know how to  subtract 2 lists by duplicate elements, not by value, in python.</p>
<pre><code>ListA = [G, A, H, I, J, B]

ListB = [A, B, C]

ListC = [G, H, I, J] 
</code></pre>
<p>So we subtract the ListB values, if they are found in ListA as duplicates, and the ListC will give back the non-duplicate values in ListA.</p>
<ul>
<li><p>Mathematically written it would be:</p>
<p>ListC = ListA - (ListA âˆ© ListB)</p></li>
</ul>
<p>(I don't want to remove the duplicates in ListA, only the intersection between ListA and ListB, as described in the above formula, so this question is not a duplicate of <a href="https://stackoverflow.com/questions/3428536/python-list-subtraction-operation">questions/48242432</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do a list comprehension..</p>
<pre><code>[x for x in listA if x not in listB]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>&gt;&gt;&gt; def li(li1,li2):
    li3=li1
    for i in li2:
        if i in li1:
            li3.remove(i)
    return(li3)

&gt;&gt;&gt; li(["G","A","H","I","J","B"],["A","B","C"])
['G', 'H', 'I', 'J']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the sets library in Python.</p>
<pre><code>from sets import Set

setA = Set(['G', 'A', 'H', 'I', 'J', 'B'])
setB = Set(['A', 'B', 'C'])

# get difference between setA and intersection of setA and setB
setC = setA - (setA &amp; setB)
</code></pre>
<p>The cool thing about sets is that they tend to operate faster than list comprehensions. For instance, this operation would tend to run at <code>O(len(setA)) + O(min(len(setA), len(setB))) = O(len(setA))</code> whereas a list comprehension would run at <code>O(len(setA) * len(setB))</code> to achieve the same result. Of course, these are average cases not worst cases. Worst case, they'd be the same. Either way, you should use the object that best fits your operations, right?</p>
<p>See <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">the Python documentation</a> for more.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what you want?</p>
<pre><code>L1 = ['A', 'G', 'H', 'I', 'J', 'B']
L2 = ['A', 'B', 'C']

for i in L1:
    if i not in L2:
        print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On basis of using mathematical set notations, why not <em>use</em> sets?</p>
<pre><code>ListA = [G,A,H,I,J,B]

ListB = [A,B,C]

SetC = set(ListA) - set(ListB)
</code></pre>
<p>But then you get sets out and have to go back to lists... also the order might change and any character that was twice in the list is then only once in it </p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#sets</a></p>
<blockquote>
<pre><code>&gt;&gt;&gt; a = set('abracadabra') # sets have only unique elements and are unordered
&gt;&gt;&gt; b = set('alacazam')

&gt;&gt;&gt; a                                  # unique letters in a
{'a', 'r', 'b', 'c', 'd'}

&gt;&gt;&gt; a - b                              # letters in a but not in b
{'r', 'd', 'b'}

&gt;&gt;&gt; a | b                              # letters in a or b or both
{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}

&gt;&gt;&gt; a &amp; b                              # letters in both a and b
{'a', 'c'}

&gt;&gt;&gt; a ^ b                              # letters in a or b but not both
{'r', 'd', 'b', 'm', 'z', 'l'}
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3428536/python-list-subtraction-operation">Python list subtraction operation</a></span>
<span class="comment-copy">better use <code>set(listB)</code> for ~O(1) check.</span>
<span class="comment-copy">As the documentation you link warns right at the start, the sets module has been deprecated since Python 2.6, which was released almost ten years ago (1 October 2008), and doesn't even exist in modern Python.</span>
<span class="comment-copy">@DSM Good catch on the documentation. Have this instead: <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#sets</a></span>
<span class="comment-copy">I don't want the duplicates in listA to be removed only the intersection between listA and listB, so we can't use the set() function.</span>
<span class="comment-copy">@Markus84612 I'm not sure I understand your meaning. If you want the intersection between sets A and B, just do <code>setA &amp; setB</code>. If you want to keep set A pristine, just copy the list before the operation</span>
<span class="comment-copy">The set() removes the duplicate elements in the listA as well. I don't want that, I just want the intersection of the 2 lists to be removed.</span>
