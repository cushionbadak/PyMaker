<div class="post-text" itemprop="text">
<p>I have a <em>hex string</em>, but i need to convert it to <em>actual</em> <em>hex</em>.
For example, i have this <em>hex string</em>:</p>
<pre><code>3f4800003f480000
</code></pre>
<p>One way I could achieve my goal is by using escape sequences:</p>
<pre><code>print("\x3f\x48\x00\x00\x3f\x48\x00\x00")
</code></pre>
<p>However, I can't do it this way, because I want create together my hex from multiple variables.</p>
<p>My program's <strong><em>purpose</em></strong> is to:</p>
<ol>
<li>take in a number for instance <code>100</code></li>
<li>multiply it by <code>100</code>: <code>100 * 100 = 10000</code></li>
<li>convert it to hex <code>2710</code></li>
<li>add <code>0000</code></li>
<li>add <code>2710</code> again</li>
<li>add <code>0000</code> once more</li>
</ol>
<p><strong>Result</strong> I'm expecting is <code>2710000027100000</code>. Now I need to pass this hexadecimal number as argument to a function (as hexadecimal).</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, there is no separate type as 'hex'. It represents the hexadecimal notation of the number as <code>str</code>. You may check the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type</code></a> yourself by calling it on <a href="https://docs.python.org/3/library/functions.html#hex" rel="nofollow noreferrer"><code>hex()</code></a> as:</p>
<pre><code>#         v  convert integer to hex
&gt;&gt;&gt; type(hex(123))
&lt;type 'str'&gt;
</code></pre>
<p>But in order to represent the value as a hexadecimal, Python prepends the <code>0x</code> to the string which represents <em>hexadecimal</em> number. For example:</p>
<pre><code>&gt;&gt;&gt; hex(123)
'0x7b' 
</code></pre>
<p>So, in your case in order to display your string as a hexadecimal equivalent, all you need is to prepend it with "0x" as:</p>
<pre><code>&gt;&gt;&gt; my_hex = "0x" + "3f4800003f480000"
</code></pre>
<p>This way if you probably want to later convert it into some other notation, let's say integer <em>(which based on the nature of your problem statement, you'll definitely need)</em>, all you need to do is call <code>int</code> with <strong>base</strong> 16 as:</p>
<pre><code>&gt;&gt;&gt; int("0x3f4800003f480000", base=16)
4559894623774310400
</code></pre>
<p>In fact Python's interpreter is smart enough. If you won't even prepend "0x", it will take care of it. For example:</p>
<pre><code>&gt;&gt;&gt; int("3f4800003f480000", base=16)
4559894623774310400
</code></pre>
<p>"0x" is all about representing the string is hexadecimal string in case someone is looking/debugging your code (in future), they'll get the idea. That's why it is preferred. </p>
<p><strong><em>So my suggestion is to stick with Python's Hex styling, and don't convert it with escape characters as "\x3f\x48\x00\x00\x3f\x48\x00\x00"</em></strong></p>
<hr/>
<p>From the <a href="https://docs.python.org/3/library/functions.html#hex" rel="nofollow noreferrer">Python's <code>hex</code> document</a> :</p>
<blockquote>
<p>Convert an integer number to a lowercase hexadecimal string prefixed with “0x”. If x is not a Python int object, it has to define an <strong>index</strong>() method that returns an integer.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>try <code>binascii.unhexlify</code>:</p>
<blockquote>
<p>Return the binary data represented by the hexadecimal string hexstr.</p>
</blockquote>
<p>example:</p>
<pre><code>assert binascii.unhexlify('3f4800003f480000') == b"\x3f\x48\x00\x00\x3f\x48\x00\x00"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; hex(int('3f4800003f480000', 16))
'0x3f4800003f480000'
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/14678132/python-hexadecimal">Python Hexadecimal</a></span>
<span class="comment-copy">in this question they want to cnvert a decimal to a hexadecimal, but i have a string already containing hexadecimals</span>
<span class="comment-copy">If you multiply by 6553600 instead of by 100, you are halfway to your target without any string manipulations. But your ultimate program's purpose is not entirely clear to me.</span>
