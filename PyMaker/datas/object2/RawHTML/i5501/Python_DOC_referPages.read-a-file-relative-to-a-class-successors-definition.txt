<div class="post-text" itemprop="text">
<p>Say I have an interface class <code>Base</code> intended to be inherited. I need to define a static method in <code>Base</code> that would read and print a text file next to a successor's definition. My attempt was as follows.</p>
<p>Example structure:</p>
<pre><code>.../module/
      __init__.py
      Base.py
      A/
          __init__.py
          A.py
          file.txt
      B/
          __init__.py
          B.py
          file.txt
</code></pre>
<p>Base.py:</p>
<pre><code>import os.path

class Base:
    @staticmethod
    def print_file():
        file = os.path.join(os.path.dirname(__file__), 'file.txt')
        with open(file, 'r') as f:
            print(f.read())
</code></pre>
<p>A.py (same for B.py):</p>
<pre><code>from module.Base import Base

class A(Base):
    pass
</code></pre>
<p>When I import <code>A</code> class and call <code>A.print_file()</code>, this code attempts to read <code>.../module/file.txt</code> and not <code>.../module/A/file.txt</code>, as <code>__file__</code> seems to be calculated against <code>Base.py</code> and not <code>A.py</code>.</p>
<p>Is there a way to read <code>A/file.txt</code> and <code>B/file.txt</code> in the static method without additional code in <code>A.py</code> and <code>B.py</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>__file__ is the pathname of the file from which the module was loaded, if it was loaded from a file. The __file__ attribute may be missing for certain types of modules, such as C modules that are statically linked into the interpreter; for extension modules loaded dynamically from a shared library, it is the pathname of the shared library file.</p>
</blockquote>
<p>Thus having <code>__file__</code> point to Base.py makes sense as this is where the module <code>Base</code> initially is loaded from.</p>
<p>An appropriate choice here could be <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">getfile</a> from the inspect package:</p>
<blockquote>
<p><em>inspect.getfile(object)</em>: Return the name of the (text or binary) file in which an object was defined.</p>
</blockquote>
<pre><code>import os
import inspect

class Base:       
    @classmethod          
    def print_file(cls):                                
        file = os.paht.join(
            os.path.dirname(inspect.getfile(cls)),
            'file.txt'
            )  
        with open(file, 'r') as f:
            print(f.read())
</code></pre>
</div>
<span class="comment-copy">just a guess: use the inspect module, something like: <code>inspect.getframeinfo(inspect.currentframe()).filename</code></span>
<span class="comment-copy">@jojo <code>print</code>-ing exactly this line before the rest of the static method prints <code>.../module/Base.py</code> when calling <code>A.print_file()</code>. Seems like everything is calculated against the base class. Still, thank you, I will look into the inspect module.</span>
<span class="comment-copy"><code>__file__</code> will refer to the <i>current</i> file (module) from where it is invoked.</span>
