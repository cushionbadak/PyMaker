<div class="post-text" itemprop="text">
<p>This question is about nested dictionary comprehension and I have referred the <a href="https://stackoverflow.com/questions/20489609/dictionary-comprehension-in-python-3">link1</a> and <a href="https://stackoverflow.com/questions/17915117/nested-dictionary-comprehension-python">link2</a> before asking this.<br/>
I have a list whose first element is None and the remaining of it is a list of sorted positive numbers.</p>
<pre><code>sorted_ar = [None, 10, 10, 12, 12, 12, 15, 25] 
</code></pre>
<p>My requirement is to build a dictionary as:  </p>
<pre><code>key_dict = {10: [3, 2], 12: [12, 3], 15: [6, 1], 25: [7, 1]}
</code></pre>
<p>The values of the dictionary are a two element list, first element is the sum of indexes of the occurrences of key, second is the number of occurrences.<br/>
For example for element 12,
sum of indexes = 3+4+5 = 12 and number of occurrences is 3.<br/>
The following code does it.  </p>
<pre><code> key_dict = {k:[0,0] for k in sorted_ar if k!=None}
        for i in range(len(sorted_ar)):
            if sorted_ar[i]:
                key_dict[sorted_ar[i]][0] += i
                key_dict[sorted_ar[i]][1] += 1  
</code></pre>
<p>My requirement is to prepare the key_dict dictionary using dictionary comprehension.</p>
<p>My attempt:  </p>
<pre><code>key_dict = { 
    sorted_ar[i]:[ key_dict[sorted_ar[i]][0] + i,key_dict[sorted_ar[i]][0] + 1] 
    for i in range(1,len(sorted_ar)) if sorted_ar[i]!=None
}
</code></pre>
<p>But this is giving some erroneous result as  </p>
<pre><code>key_dict = {10: [2, 1], 12: [5, 1], 15: [6, 1], 25: [7, 1]} 
</code></pre>
<p>How should I write the dictionary comprehension in this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are going to use sorting, then look at <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> and the <a href="https://docs.python.org/3/library/functools.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code> function</a> to add indices:</p>
<pre><code>from itertools import groupby

filtered = ((i, v) for i, v in enumerate(sorted_ar) if v)
grouped = ((v, list(g)) for v, g in groupby(filtered, lambda iv: iv[1]))
result = {v: [sum(i for i, v in g), len(g)] for v, g in grouped}
</code></pre>
<p>You can put this all into a single expression if you so desire:</p>
<pre><code>result = {v: [sum(i for i, v in g), len(g)] for v, g in (
    (v, list(g)) for v, g in groupby((
        (i, v) for i, v in enumerate(sorted_ar) if v), lambda iv: iv[1]))}
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; sorted_ar = [None, 10, 10, 12, 12, 12, 15, 25]
&gt;&gt;&gt; filtered = ((i, v) for i, v in enumerate(sorted_ar) if v)
&gt;&gt;&gt; grouped = ((v, list(g)) for v, g in groupby(filtered, lambda iv: iv[1]))
&gt;&gt;&gt; {v: [sum(i for i, v in g), len(g)] for v, g in grouped}
{10: [3, 2], 12: [12, 3], 15: [6, 1], 25: [7, 1]}
</code></pre>
<p>or as one long expression:</p>
<pre><code>&gt;&gt;&gt; {v: [sum(i for i, v in g), len(g)] for v, g in ((v, list(g)) for v, g in groupby(((i, v) for i, v in enumerate(sorted_ar) if v), lambda iv: iv[1]))}
{10: [3, 2], 12: [12, 3], 15: [6, 1], 25: [7, 1]}
</code></pre>
<p>Your dictionary approach, on the other hand, does not require the input to be sorted, so can be run in O(N) time (sorting takes O(NlogN) time).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>sorted_ar = [None, 10, 10, 12, 12, 12, 15, 25] 
new_data = {i:[sum(c for c, b in enumerate(sorted_ar) if b == i), sorted_ar.count(i)] for i in sorted_ar if i}
</code></pre>
<p>Output:</p>
<pre><code>{25: [7, 1], 10: [3, 2], 12: [12, 3], 15: [6, 1]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok I have found a way to achieve my behavior, not sure why, but the trick is that dictionary updates need to happen outside the comprehension.</p>
<pre><code>def my_summer(i,num,key_dict):
    key_dict[num][0] = key_dict[num][0]+i
    return key_dict[num][0]  


def my_counter(num,key_dict):
    key_dict[num][1] +=1
    return key_dict[num][1]

sorted_ar = [None, 10, 10, 12, 12, 12, 15, 25] 
key_dict = {k:[0,0] for k in sorted_ar if k!=None}

key_dict = {sorted_ar[i]:[my_summer(i,sorted_ar[i],key_dict),my_counter(sorted_ar[i],key_dict)] for i in range(1,len(sorted_ar))}
</code></pre>
<p>Output: <code>{10: [3, 2], 12: [12, 3], 15: [6, 1], 25: [7, 1]}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can try something like this:</p>
<pre><code>sorted_ar = [None,10, 10, 12, 12, 12, 15, 25]

track={}
for i,j in enumerate(sorted_ar):
    if j not in track:
        track[j]=[(i,1)]
    else:
        track[j].append((i,1))


final_={}
for i,j in track.items():
    if i not in final_:
        final_[i]=(sum(list(map(lambda x:x[0],j))),sum(list(map(lambda x:x[1],j))))

print(final_)
</code></pre>
<p>output:</p>
<pre><code>{None: (0, 1), 10: (3, 2), 15: (6, 1), 12: (12, 3), 25: (7, 1)}
</code></pre>
</div>
<span class="comment-copy">Both the solutions are correct, however there is a reason I tried the way I tried. If you look at the for loop code that works ( 3rd snippet) , it looks simple/readable and has no comparison operations, the values are updated as and when a key is found.  I am looking for such a solution that has no comparison and written with basic python akin to the for loop solution.</span>
