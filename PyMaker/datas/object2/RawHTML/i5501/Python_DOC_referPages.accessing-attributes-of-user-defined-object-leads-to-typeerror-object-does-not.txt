<div class="post-text" itemprop="text">
<p>I have a class called LineString that consists of a list of Point objects. For example;</p>
<pre><code>points = [Point(2,3), Point(7,8), Point(5,7)]

lin = LineString(points)
</code></pre>
<p>I want to write a function under LineString class that checks each point coordinate and returns (minimum_y, minimum_x, maximum_y, maximum_x). </p>
<p>Here is my <code>Point</code> class:</p>
<pre><code>class Point(object):    
    def __init__(self, x, y):
        try:
            self.x = float(x)
            self.y = float(y)
        except ValueError as e:
            print(e)
            raise ValueError("x and y must be floating point numbers!")
</code></pre>
<p>And here is the <code>LineString</code> class</p>
<pre><code>class LineString(points):
    def __init__(self, points):
        self.points = points

    def bounds(self):

        for point in points:
            x = point[0] 
            y = point[-1] 
            minx = min(x) 
            miny = min(y) 
            maxx = max(x) 
            maxy = max(x)    
            return (miny, minx, maxy, maxx)
</code></pre>
<p>I couldn't write the correct code to return the function minimum and maximum x,y values. When I run this, I get that:</p>
<pre><code>x = point[0]
TypeError: 'Point' object does not support indexing"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The cause for your error is the fact that you are attempting to access coordinates using <code>point[...]</code> which does not work on objects of user defined classes which do not implement the <code>__getitem__</code> magic method.</p>
<p>So, start by adding a <code>__getitem__</code> method to your class.</p>
<pre><code>class Point(object):
    def __init__(self, x, y):
        self.x = float(x)
        self.y = float(y)

    def __getitem__(self, idx):
        try:
            return [self.x, self.y][idx]
        except IndexError:
            raise ValueError("Invalid Index") from None 
</code></pre>
<p>Note to readers - <code>raise ... from None</code> is supported from python3 onwards. For older versions, use <code>raise ValueError("Invalid Index")</code>.</p>
<p>Now, your existing code should work.</p>
<pre><code>&gt;&gt;&gt; p = Point(1, 2)
&gt;&gt;&gt; p[0]
1.0
&gt;&gt;&gt; p[-1]
2.0
&gt;&gt;&gt; p[2]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 9, in __getitem__
ValueError: Invalid Index
</code></pre>
<p>As an aside, you should seriously consider the use of <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code>s</a> here.</p>
<hr/>
<p>Your <code>LineString.bounds</code> method is also flawed. My guess is you want to find the min/max across <em>all</em> points. If that's the case, you're supposed to first get all the coordinates, and call <code>max</code>/<code>min</code> <em>outside</em> the loop.</p>
<pre><code>def bounds(self):
    X = [p[0] for p in points]
    y = [p[-1] for p in points]

    return min(y), min(X), max(y), max(X)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have not made the point class so that you can index into it.
Either you fix that (see coldspeeds answer), or access the values as they are in the point class.</p>
<pre><code>... 
for point in points:
    x = point.x 
    y = point.y 
    minx = min(x) 
    miny = min(y) 
    maxx = max(x) 
    maxy = max(x)    
    return (miny, minx, maxy, maxx)
</code></pre>
</div>
<span class="comment-copy">I'm guessing all this code comes with a definition for the <code>Point</code> class as well?</span>
<span class="comment-copy">(psst, add it please)</span>
<span class="comment-copy">Took the liberty of cleaning up this question.</span>
<span class="comment-copy">@fuji_doji Okay, your program has been fixed. It's up to you to use this as a starting point to polish your assignment.</span>
