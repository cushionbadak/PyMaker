<div class="post-text" itemprop="text">
<p>"reload" function cannot delete variable which have loaded into memory if you delete it in your module before reload. In another words, even if you delete the variable before reload, it will still exist.</p>
<p>According to the (<a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">DOCS</a>):</p>
<blockquote>
<p>When a module is reloaded, its dictionary (containing the moduleâ€™s global variables) is retained.</p>
</blockquote>
<p>Here's a simple example:</p>
<pre><code>import importlib
import time
def main():
    import ex1
    i = 0
    while True:
        importlib.reload(ex1)
        ex1.x = ex1.x + 1
        i = i + 1
        print("loop:%d" %i)
        print("x:%d" %ex1.x)
        print(dir(ex1))
        time.sleep(5)
</code></pre>
<p>ex1 module's content before reload:</p>
<pre><code>x = 1
y = 1
</code></pre>
<p>Then delete <code>x</code> and reload <code>ex1</code> and we will find that <code>x</code> is still in the <code>dir(ex1)</code></p>
<p>So, my question is how can I get a <code>dict</code> in which <code>x</code> is not in the <code>dir</code> after delete and reload?</p>
</div>
<div class="post-text" itemprop="text">
<p>You did not read far enough, after the sentence you quoted comes:</p>
<blockquote>
<p>Redefinitions of names will override the old definitions, so this is generally not a problem. If the new version of a module does not define a name that was defined by the old version, the old definition remains.</p>
</blockquote>
<p>So, the sentence you quoted only applies to variables that were defined in the old version of the module, but are not defined in the new version of the module.</p>
<p>So to your Question:</p>
<blockquote>
<p>So, my question is how can I get a <code>dict</code> in which <code>x</code> is not in the <code>dir</code> after delete and reload?</p>
</blockquote>
<p>The answer is you can't.  You can however do:</p>
<pre><code>del ex1.x
</code></pre>
<p>After the reload.</p>
</div>
<span class="comment-copy">What are you actually trying to do? Use of <code>reload()</code> in normal code is usually not recommended.</span>
<span class="comment-copy">Is this <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY</a>?</span>
<span class="comment-copy">If you have the value of <code>x, y</code> in <code>ex1</code>, of course each time <code>x, y</code> will be present again when <code>ex1</code> is reloaded.  If you however <code>del ex1.x</code> and not reload, then <code>ex1.x</code> will be gone from your namespace.</span>
<span class="comment-copy">@Idlehands Thank you for your answer and yes,it can make it . But I don't want to change the code in <code>ex1</code>.</span>
<span class="comment-copy">@StephenRauch <code>ex1</code> module only have <code>x</code> and <code>y</code>. This is just small example to explain my question. So in actual I have more variables,functions and classes</span>
<span class="comment-copy">It's <code>del ex1.x</code>, they used <code>import ex1</code>, not <code>from ex1 import x, y</code>.</span>
<span class="comment-copy">Why I can't make it ? What about changing <code>reload</code> 's implementation mechanism?Or <code>import</code></span>
<span class="comment-copy">Well of course you can implement your own Python too.  Bu that seems like it was out of scope of your question.</span>
