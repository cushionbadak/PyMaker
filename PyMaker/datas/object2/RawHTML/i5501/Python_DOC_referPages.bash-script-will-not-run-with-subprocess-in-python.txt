<div class="post-text" itemprop="text">
<p>For some reason, no matter how many variations I've tried, I can't seem to execute a bash script I've written. The command words 100% fine in Terminal, but when I try calling it with a subprocess, it returns nothing.</p>
<pre><code>from os import listdir
import subprocess

computer_name = 'homedirectoryname'

moviefolder = '/Users/{}/Documents/Programming/Voicer/Movies'.format(computer_name)

string = 'The lion king'

for i in listdir(moviefolder):
    title = i.split('.')
    formatted_title = title[0].replace(' ', '\ ')

    if string.lower() == title[0].lower():
        command = 'vlc {}/{}.{}'.format(moviefolder, formatted_title, title[1])

        subprocess.call(["/usr/local/bin",'-i','-c', command], stdout=subprocess.PIPE,
                                                        stderr=subprocess.PIPE, shell=True)
    else:
        continue
</code></pre>
<p>The bash executable file looks like this:</p>
<pre><code>#/bin/bash

func() {
    open -a /Applications/VLC.app/Contents/MacOS/VLC $1
}
</code></pre>
<p>Where have I gone wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should call <code>open</code> directly:</p>
<pre><code>import os
import subprocess

computer_name = 'homedirectoryname'

moviefolder = '/Users/{}/Documents/Programming/Voicer/Movies'.format(computer_name)

string = 'The lion king'

for filename in os.listdir(moviefolder):
    title = filename.split('.')

    if string.lower() == title[0].lower():
        subprocess.call(['open', '-a', '/Applications/VLC.app/Contents/MacOS/VLC', os.path.join(moviefolder, filename)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like you even mentioned in a comment, you get <code>/usr/local/bin: is a directory</code> when you properly capture the error from the shell (and take out the erroneous <code>shell=True</code>; or correspondingly refactor the command line to be suitable for this usage, i.e. pass a string instead of a list).</p>
<p>Just to spell this out, you are attempting to run the command <code>/usr/local/bin</code> with some options; but of course, it's not a valid command; so this fails.</p>
<p>The actual script you seem to want to run will declare a function and then exit, which results in the function's definition being lost again, because the subprocess which ran the shell in which this function declaration was executed has now terminated and released all its resources back to the system.</p>
<p>Perhaps you should take more than just a few steps back and explain what you <em>actually</em> want to accomplish; but really, that should be a new, separate question.</p>
<p>Assuming you are actually trying to run <code>vlc</code>, and guessing some other things, too, perhaps you actually want</p>
<pre><code>subprocess.call(['vlc','{}/{}.{}'.format(moviefolder, formatted_title, title[1]),
    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</code></pre>
<p>If your <code>PATH</code> is correct, you should not need to specify <code>/usr/local/bin/</code> explicitly (and if your <code>PATH</code> is wrong, correct it in the code before, instead of hardcoding a directory for the executable you want to call).</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are using <code>shell=True</code>, the command must be a string:</p>
<blockquote>
<p>On Unix with shell=True, the shell defaults to /bin/sh. If args is a
  string, the string specifies the command to execute through the shell.
  This means that the string must be formatted exactly as it would be
  when typed at the shell prompt. This includes, for example, quoting or
  backslash escaping filenames with spaces in them. If args is a
  sequence, the first item specifies the command string, and any
  additional items will be treated as additional arguments to the shell
  itself. (<a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">docs</a>)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>/usr/local/bin</code> is a directory. You can't run a directory as if it were a command.</p>
<p>Anyhow, there's no point to having <code>/usr/local/bin</code> anywhere in your command at all. Leave out the <code>shell=True</code>, and explicitly call <code>vlc</code>:</p>
<pre><code>subprocess.call([
  'vlc',
  '{}/{}.{}'.format(moviefolder, formatted_title, title[1])
])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When <code>shell=True</code> is used in <code>subprocess.call</code>, if the command arguments is a sequence, then the first element of the sequence needs to be the command, and the rest are treated as argument(s) to the shell itself.</p>
<p>So, this should do:</p>
<pre><code>subprocess.call(["/usr/local/bin/{}".format(command), '-i','-c'], shell=True, ...)
</code></pre>
<p>Otherwise, you can make the command a string.</p>
<p><strong>Example:</strong></p>
<pre><code>In [20]: subprocess.call(["cat spamegg", "-i", "-c"], shell=True)
foobar
</code></pre>
</div>
<span class="comment-copy">Not sure of the issue, but <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>subprocess.call</code></a> document says not to use <code>PIPE</code> with <code>stdout</code> and <code>stderr</code></span>
<span class="comment-copy">@MoinuddinQuadri If I take those out, it returns  <code>-i: /usr/local/bin: is a directory</code> in Terminal</span>
<span class="comment-copy">Why do you even try to invoke a shell? A shell is a utility that sits on top of the OS and gives you a UI to start programs. You don't need that, just start VLC.</span>
<span class="comment-copy">use check_call, so you can see if your call succeeds. call doesn't check anything.</span>
<span class="comment-copy">The error message is correct: <code>/usr/local/bin</code> <b>is</b> a directory. You're not expected to be able to run it as a command.</span>
<span class="comment-copy">Wow. I don't know why I didn't think of this. Duh. I've used this as my solution. Thanks!</span>
<span class="comment-copy">One absolutely can pass an array with <code>shell=True</code> -- the first element of that array should be a script, and subsequent elements arguments to that script. It's much better practice security-wise to call <code>subprocess.Popen(['script involving "$1", '_', python_variable])</code> than to do something like <code>subprocess.Popen(['script involving %s' % (python_variable,)])</code>.</span>
<span class="comment-copy">@CharlesDuffy that's strange, because the cited docs say specifically that additional items are interpreted as args to the shell and not to the "script"</span>
<span class="comment-copy">You can read the implementation if you have any question here -- <code>shell=True</code> literally just prepends <code>['sh', '-c']</code> to the argument list (being a single-item list with a string if a string is passed, or the literal list given by the user otherwise).</span>
<span class="comment-copy">...and when <code>sh -c '...script here...' 'argument 0' 'argument 1' 'argument 2'</code> is run, your subsequent arguments are <code>$0</code>, <code>$1</code>, <code>$2</code>, etc. in the context of the script passed immediately after the <code>-c</code>. (Meaning if that script doesn't refer to its subsequent arguments, they're utterly ignored).</span>
<span class="comment-copy">...so, yes, subsequent items are passed as arguments to the shell, but the shell passes them as arguments to the script.</span>
<span class="comment-copy">Tried this, but it didn't work. Returned nothing.      <code>command = 'vlc {}/{}.{}'.format(moviefolder, formatted_title, title[1])</code> <code>subprocess.call(["/usr/local/bin/{}".format(command), '-i','-c'], shell=True)</code></span>
<span class="comment-copy">@AntonioNogueras What did you expect? Why are you running <code>vlc</code> like this? Try <code>cvlc</code> then. Also, try with other command.</span>
<span class="comment-copy">This is still wrong because the argument to <code>vlc</code> should be a separate string in the command list, or the code should be refactored to use <code>shell=True</code> and a single command string intead.</span>
<span class="comment-copy">@tripleee Can't reproduce. Check my edits.</span>
<span class="comment-copy">Thanks; this rhymes well with Charles' comments to another answer on this page, though it must be regarded as undocumented behavior which could well change in a future version.</span>
