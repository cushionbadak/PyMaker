<div class="post-text" itemprop="text">
<p>i need to get the latest file of a folder using python. While using the code:</p>
<pre><code>max(files, key = os.path.getctime)
</code></pre>
<p>I am getting the below error:  </p>
<blockquote>
<p>FileNotFoundError: [WinError 2] The system cannot find the file specified: 'a'</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Whatever is assigned to the <code>files</code> variable is incorrect. Use the following code.</p>
<pre><code>import glob
import os

list_of_files = glob.glob('/path/to/folder/*') # * means all if need specific format then *.csv
latest_file = max(list_of_files, key=os.path.getctime)
print latest_file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>max(files, key = os.path.getctime)
</code></pre>
<p>is quite incomplete code. What is <code>files</code>? It probably is a list of file names, coming out of <code>os.listdir()</code>.</p>
<p>But this list lists only the filename parts (a. k. a. "basenames"), because their path is common. In order to use it correctly, you have to combine it with the path leading to it (and used to obtain it).</p>
<p>Such as (untested):</p>
<pre><code>def newest(path):
    files = os.listdir(path)
    paths = [os.path.join(path, basename) for basename in files]
    return max(paths, key=os.path.getctime)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to sort items by creation time. Example below sorts files in a folder and gets first element which is latest.</p>
<pre><code>import glob
import os

files_path = os.path.join(folder, '*')
files = sorted(
    glob.iglob(files_path), key=os.path.getctime, reverse=True) 
print files[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using <code>glob.iglob()</code> instead of the <code>glob.glob()</code>, as it is more efficient.</p>
<blockquote>
<p>glob.iglob() Return an iterator which yields the same values as glob() without actually storing them all simultaneously.</p>
</blockquote>
<p>Which means <code>glob.iglob()</code> will be more efficient.</p>
<p>I mostly use below code to find the latest file matching to my pattern:</p>
<p><code>LatestFile = max(glob.iglob(fileNamePattern),key=os.path.getctime)</code></p>
<hr/>
<p>NOTE:
There are variants of <code>max</code> function, In case of finding the latest file we will be using below variant:
<code>max(iterable, *[, key, default])</code></p>
<p>which needs iterable so your first parameter should be iterable.
In case of finding max of nums we can use beow variant : <code>max (num1, num2, num3, *args[, key])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>(Edited to improve answer)</p>
<p>First define a function get_latest_file</p>
<pre><code>def get_latest_file(path, *paths):
    fullpath = os.path.join(path, paths)
    ...
get_latest_file('example', 'files','randomtext011.*.txt')
</code></pre>
<p>You may also use a docstring !</p>
<pre><code>def get_latest_file(path, *paths):
    """Returns the name of the latest (most recent) file 
    of the joined path(s)"""
    fullpath = os.path.join(path, *paths)
</code></pre>
<p><strong>If you use Python 3</strong>, you can use <a href="https://docs.python.org/3/library/glob.html?highlight=glob.iglob#glob.iglob" rel="nofollow">iglob</a> instead.</p>
<p><strong>Complete code to return the name of latest file:</strong></p>
<pre><code>def get_latest_file(path, *paths):
    """Returns the name of the latest (most recent) file 
    of the joined path(s)"""
    fullpath = os.path.join(path, *paths)
    files = glob.glob(fullpath)  # You may use iglob in Python3
    if not files:                # I prefer using the negation
        return None                      # because it behaves like a shortcut
    latest_file = max(files, key=os.path.getctime)
    _, filename = os.path.split(latest_file)
    return filename
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have tried to use the above suggestions and my program crashed, than I figured out the file I'm trying to identify was used and when trying to use 'os.path.getctime' it crashed.
what finally worked for me was:</p>
<pre><code>    files_before = glob.glob(os.path.join(my_path,'*'))
    **code where new file is created**
    new_file = set(files_before).symmetric_difference(set(glob.glob(os.path.join(my_path,'*'))))
</code></pre>
<p>this codes gets the uncommon object between the two sets of file lists
its not the most elegant, and if multiple files are created at the same time it would probably won't be stable</p>
</div>
<div class="post-text" itemprop="text">
<p>A much faster method on windows (0.05s), call a bat script that does this:</p>
<p>get_latest.bat</p>
<pre><code>@echo off
for /f %%i in ('dir \\directory\in\question /b/a-d/od/t:c') do set LAST=%%i
%LAST%
</code></pre>
<p>where <code>\\directory\in\question</code> is the directory you want to investigate.</p>
<p>get_latest.py</p>
<pre><code>from subprocess import Popen, PIPE
p = Popen("get_latest.bat", shell=True, stdout=PIPE,)
stdout, stderr = p.communicate()
print(stdout, stderr)
</code></pre>
<p>if it finds a file <code>stdout</code> is the path and <code>stderr</code> is None.</p>
<p>Use <code>stdout.decode("utf-8").rstrip()</code> to get the usable string representation of the file name.</p>
</div>
<span class="comment-copy">Which file are you try to find? add your relevant code to the quesiton.</span>
<span class="comment-copy">I'm guessing why it might not be working for you: is "files" a list of filename elements or a single filename string?</span>
<span class="comment-copy">Why the downvote? please downvoter feel free to ask any question you have</span>
<span class="comment-copy">What if instead of a file I want to find the latest created/modified folder ?</span>
<span class="comment-copy">The <code>latest_file</code> variable can contain both dirs or files. So if you want to check the latest modified is a folder you can add the above if condition at the end of the script. so you can ignore if its a file and write the logic inside <code>if</code> to run if it's a folder.</span>
<span class="comment-copy">Weird. I had to use "min" to get the latest file. Some searching around hinted that it's os specific.</span>
<span class="comment-copy">This is an excellent answer--THANK YOU! I like to work with <code>pathlib.Path</code> objects more than strings and os.path. With pathlib.Path objects your answer becomes:      <code>list_of_paths = folder_path.glob('*');      latest_path = max(list_of_paths, key=lambda p: p.stat().st_ctime)</code></span>
<span class="comment-copy">I am sure the downvoters can explain what exactly is wrong.</span>
<span class="comment-copy">Dunno, tested for you, it does seem to work. On top of that, you were the only one to care to explain a bit. Reading the accepted answer made me think that 'glob' thing was needed, whereas it's absolutely not. Thanks</span>
<span class="comment-copy">is there a way to only select certain type of files, such as CSV?</span>
<span class="comment-copy">@David Of course. Just insert <code>if basename.endswith('.csv')</code> into the list comprehension.</span>
<span class="comment-copy">@BreakBadSP If you want flexibility, you are right. If you are restricted to a certain directory, I don't see how yours can possibly more efficient. But sometimes, readability is more important than efficiency, so yours might indeed be better in that sense.</span>
<span class="comment-copy">Where did you get the <code>JuniperAccessLog-standalone-FCL_VPN</code> part from?</span>
<span class="comment-copy">@glglgl ok i have corrected it. sorry</span>
<span class="comment-copy">Not sure why this attracting down votes, for those that need to do this task quickly this is the fastest method I could find. And sometimes it is necessary to do this very quickly.</span>
<span class="comment-copy">Have an upvote. I'm not doing this in Windows, but if you're looking for speed, the other answers require an iteration of all files in a directory. So if shell commands in your OS that specify a sort order of the listed files are available, pulling the first or last result of that <i>should</i> be faster.</span>
<span class="comment-copy">Thanks I'm actually more concerned with a better solution than this (as in similarly fast but pure python) so was hoping someone could elaborate on that.</span>
