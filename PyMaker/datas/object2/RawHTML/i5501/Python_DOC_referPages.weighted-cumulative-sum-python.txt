<div class="post-text" itemprop="text">
<p>I'm having problem finding function similar to cumulative sum only I want it weighted. So with an external for loop would look something like this:</p>
<pre><code>discount_rate = 0.95 
rewards = [0, 0, 10] # want to translate to: [9, 9.5, 10] (approximation)

reversed_rewards = [10, 0, 0]
new_rewards = [0] * len( rewards)

previus = 0
for index in range( len( rewards)):
     new_rewards[ index] = reversed_rewards[ index] + previus * discount_rate
     previus = new_rewards[ index]

print( list( reversed( new_rewards)))
</code></pre>
<p>But this is kind of slow version if you have large reward array. Is there any existing function that would do this faster? </p>
</div>
<div class="post-text" itemprop="text">
<p>NOTE: I'm using <code>Python 3.6.0</code></p>
<p>You can try using <code>itertools</code>: <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html</a></p>
<p>The <code>itertools.accumulate</code> function was shown to possibly be faster than <code>np.cumsum</code>: <a href="https://stackoverflow.com/a/39534850/7175945">https://stackoverflow.com/a/39534850/7175945</a></p>
<pre><code>from itertools import accumulate

def weighted():
    discount_rate = 0.95 #your discount rate
    rewards = [0, 0, 10] # want to translate to: [9, 9.5, 10](approximation)
    reversed_rewards = rewards[::-1] #list reversal
    acc = list(accumulate(reversed_rewards, lambda x,y: x*discount_rate + y))
    return acc[::-1] 

print(weighted())
</code></pre>
<p>I think this should be what you're looking for if you truly don't want to use <code>numpy</code>, otherwise what you already have written is also a viable option.</p>
</div>
<span class="comment-copy">Duplicate - <a href="https://stackoverflow.com/questions/47970683/vectorize-a-numpy-discount-calculation" title="vectorize a numpy discount calculation">stackoverflow.com/questions/47970683/â€¦</a>?</span>
<span class="comment-copy">It does kinda look like a dupe, but despite having the <code>numpy</code> tag this question doesn't actually use numpy as currently written.</span>
