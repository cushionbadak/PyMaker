<div class="post-text" itemprop="text">
<pre><code>def strange_syntax(stuff):
    return ".".join(item for item in stuff)
</code></pre>
<p>How (and why) works this code? What happens here? Normally I can't use this syntax. Also this syntax doesn't exist if it's not inside some <em>function</em> as argument.</p>
<p>I know, I could do the same with:</p>
<pre><code>def normal_syntax(stuff):
    return ".".join(stuff)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is called a <a href="https://docs.python.org/3/reference/expressions.html?highlight=generator%20expression#generator-expressions" rel="nofollow noreferrer">generator expression</a>.</p>
<p>It works just like a list comprehension (but evaluating the iterated objects lazily and not building a new list from them), but you use parentheses instead of brackets to create them. And you can drop the parentheses in a function call that only has one argument.</p>
<p>In your specific case, there is no need for a generator expression (as you noted) - <code>(item for item in stuff)</code> gives the same result as <code>stuff</code>. Those expressions start making sense when doing something with the items like <code>(item.strip() for item in stuff)</code> (map) or <code>(item for item in stuff if item.isdigit())</code> (filter) etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>When used in a function call, the syntax:</p>
<pre><code>f(a for a in b)
</code></pre>
<p>implicitly is compiled as a generator, meaning</p>
<pre><code>f((a for a in b))
</code></pre>
<p>This is just syntactic sugar, to make the program look nicer. It doesn't make much sense to write directly in the console</p>
<pre><code>&gt;&gt;&gt;a for a in b
</code></pre>
<p>because it's unclear if you want to create a generator, or perform a regular loop. In this case you must use the outer <code>()</code>.</p>
</div>
<span class="comment-copy">Why was I downvoted?</span>
<span class="comment-copy">Thanks. I also found thread about generators here <a href="https://stackoverflow.com/questions/1756096/understanding-generators-in-python" title="understanding generators in python">stackoverflow.com/questions/1756096/â€¦</a> It's nicely explained there.</span>
