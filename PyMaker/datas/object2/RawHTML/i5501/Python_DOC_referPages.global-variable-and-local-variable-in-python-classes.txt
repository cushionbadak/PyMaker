<div class="post-text" itemprop="text">
<pre><code>x = "xtop"
y = "ytop"
def func():
    x = "xlocal"
    y = "ylocal"
    class C:
        print x  #xlocal  of course
        print y  #ytop  why? I guess output may be 'ylocal' or '1'
        y = 1
        print y  #1  of course
func()
</code></pre>
<ol>
<li><p>Why x and y are different here？    </p></li>
<li><p>If I replace <code>class C</code> with a function scope I will get <code>UnboundLocalError: local variable 'y' referenced before assignment</code>，What is the difference between a class and a function in this situation?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The reason for this is because the scope of <code>class C</code> is actually different than the scope of <code>def func</code> - and the different defaulting behaviours of scopes that python has.</p>
<p>Here is basically how python looks for a variable</p>
<ul>
<li>Look in current scope  </li>
<li>If current scope doesn't have it -&gt; use nearest enclosing scope  </li>
<li>If current scope has it, but not yet defined -&gt; use global scope  </li>
<li>If current scope has it, and already defined -&gt; use it</li>
<li>else blow up</li>
</ul>
<p>(If you remove <code>ytop</code> you get a <code>NameError: name 'y' is not defined</code>)</p>
<p>So basically, when the interpreter looks at the following section of code it goes</p>
<pre><code>class C:
    print(x) # need x, current scope no x  -&gt; default to nearest (xlocal)
    print(y) # need y, current scope yes y -&gt; default to global (ytop)
             #         but not yet defined 
    y = 1
    print(y) # okay we have local now, switch from global to local
</code></pre>
<p>Consider the following scenarios</p>
<pre><code>1) class C:
    print(x)
    print(y)

&gt;&gt;&gt; xlocal
&gt;&gt;&gt; ylocal

2) class C:
    y = 1
    print(x)
    print(y)  

&gt;&gt;&gt; xlocal
&gt;&gt;&gt; 1

3) class C:
    print(x)
    print(y)
    x = 1

&gt;&gt;&gt; xtop
&gt;&gt;&gt; ylocal
</code></pre>
</div>
<span class="comment-copy">Why will we get an output, no object of <code>class C</code> is created?</span>
<span class="comment-copy">@ShashankSingh In python, all <code>class</code> objects are evaluated immediately. <code>def</code> objects (functions) are not.</span>
<span class="comment-copy">If I replace <code>class C</code> with  <code>def C():</code> function  and call it after its definition I get <code>UnboundLocalError: local variable 'y' referenced before assignment</code>，What is the difference between a class and a function in this situation?</span>
<span class="comment-copy">@ShashankSingh That is a rather complex question. It has to do with how python interprets the code. You will need to read <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html</a></span>
<span class="comment-copy">The point you wrote under <code>Here is basically how python looks for a variable</code> applies to classes only and not function, right?</span>
