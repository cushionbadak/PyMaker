<div class="post-text" itemprop="text">
<p>What goes on under the hood in <code>if</code> statement? For example:</p>
<pre><code>list_ = [1, 2, 3]
str_ = ''

if str_ or list_:
    # do something
</code></pre>
<p>Can we say that implicitly something like this happens?</p>
<pre><code>if bool(str_ or list_) is True:
    # do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The value of</p>
<pre><code>str_ or list_
</code></pre>
<p>is surprisingly <strong>neither</strong> <code>True</code> <strong>nor</strong> <code>False</code> - it's simply <code>str_</code> or <code>list_</code> :-)</p>
<p>More precisely - from <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">Python Language Reference</a>:</p>
<blockquote>
<p>The expression <code>x or y</code> first evaluates <code>x</code>; if <code>x</code> is true, its value is returned; otherwise, <code>y</code> is evaluated and the resulting
  value is returned.</p>
</blockquote>
<p>Then, for evaluation in the <code>if</code> statement:</p>
<blockquote>
<p>In the context of Boolean operations, and also when expressions are used by control flow statements, the following
  values are interpreted as false: <code>False</code>, <code>None</code>, numeric zero of all types, and empty strings and containers (including
  strings, tuples, lists, dictionaries, sets and frozensets). All other values are interpreted as true. User-defined objects
  can customize their truth value by providing a <code>__bool__()</code> method.</p>
</blockquote>
<hr/>
<p>So, in your particular case, <code>str_</code> is empty, so its boolean value is interpreted as <code>False</code>, and</p>
<pre><code>str_ or list_
</code></pre>
<p>will evaluate to the value of the variable <code>list_</code>, i. e. to <code>[1, 2, 3]</code>.</p>
<p>Then</p>
<pre><code>if [1, 2, 3]:
</code></pre>
<p>is interpreted as</p>
<pre><code>if True:
</code></pre>
<p>because <code>[1, 2, 3]</code> is not empty.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you say</p>
<pre><code>a = 0
b = None
c = 123
d = 'aaa'
zzz = a or b or c or d
</code></pre>
<p>then <code>zzz</code> is equals to <code>123</code>. So if evaluates expression and operates on that answer. Since Python takes non empty strings, lists, non <code>None</code> values, not zero numbers - as <code>True</code> then whole system follows bool algebra. </p>
</div>
<span class="comment-copy">Yes. It evaluates the truthiness, and checks if the expression after the <code>if</code> is <code>True</code>. Note that <code>or</code> also evaluates truthiness.</span>
<span class="comment-copy">Semantically, they're the same, but the byte code generated in each case differs.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ: yeah, I guess that is because <code>bool</code> can be overwritten, so Python can not optimize this away.</span>
<span class="comment-copy">If you make a custom class, you can define <code>__nonzero__</code> in Python 2 or <code>__bool__</code> in Python 3 to override what happens during an if statement.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ - That doesn't seem right. <code>('' or [1,2,3]) is True</code> returns <code>False</code>. Or do I misunderstand your comment?</span>
