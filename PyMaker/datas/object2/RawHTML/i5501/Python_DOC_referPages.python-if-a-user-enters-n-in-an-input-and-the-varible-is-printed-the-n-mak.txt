<div class="post-text" itemprop="text">
<p>For example, if I did this:</p>
<pre><code>test=input("Text: ")
print(test)
</code></pre>
<p>And then set test as<code>hello\nhow are you?</code>, and then call test(), I want it to appear as this:</p>
<pre><code>hello
how are you?
</code></pre>
<p>and not</p>
<pre><code>hello\nhow are you?
</code></pre>
<p>Is this possible?
-darth</p>
</div>
<div class="post-text" itemprop="text">
<p>The sequence <code>\n</code> (so a backslash and a letter <code>n</code>) is an <a href="https://en.wikipedia.org/wiki/Escape_sequence" rel="nofollow noreferrer"><em>escape sequence</em></a>. <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">Python string literals</a> support such sequences. Many programming languages support such sequences in string literals too, and so do JSON strings. But that doesn't make such sequences <em>universal</em>.</p>
<p><code>input()</code> just takes the input the user gave, and returns that input. Nothing more, nothing less, there are no special meanings attached to this, and this is by design. So if you want to give meaning to a series of characters that is different from their normal meaning, then you have to code this yourself.</p>
<p>You could just use <code>str.replace()</code>; if all you want is <code>\n</code> to be a newline, then that's the easiest:</p>
<pre><code>test = input("Text: ")
test = test.replace('\\n', '\n')
</code></pre>
<p>Because you have to define string literals to tell <code>str.replace()</code> what to do, you now do have support for escape sequences, and have to tell Python to <em>not make a newline character</em>, but a literal <code>\</code> followed by a <code>n</code> character, to replace that sequence with an actual newline character.</p>
<p>If you want to support <em>all</em> escape sequences that Python string literals support, then can use the <a href="https://docs.python.org/3/library/codecs.html#text-encodings" rel="nofollow noreferrer"><code>unicode_escape</code> codec</a>, via the <a href="https://docs.python.org/3/library/codecs.html#codecs.decode" rel="nofollow noreferrer"><code>codecs.decode()</code> function</a>:</p>
<pre><code>import codecs

test = input("Text: ")
test = codecs.decode(test, 'unicode_escape')
</code></pre>
<p>This then interprets all possible escape sequences that the Python string literal syntax supports, including <code>\n</code>, <code>\t</code>, <code>\b</code>, <code>\uhhhh</code>, etc.</p>
</div>
<span class="comment-copy"><code>test = input("Text: ").replace('\\n', '\n')</code>?</span>
<span class="comment-copy">@Rawing Indeed, but what about the other escape sequences?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Well, the question didn't mention any others.</span>
<span class="comment-copy">@Rawing So? Would you prefer writing a good answer, or an answer that's only "good enough"?</span>
<span class="comment-copy"><code>print('\n'.join(test.split('\\n')))</code></span>
