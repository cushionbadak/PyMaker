<div class="post-text" itemprop="text">
<p>Here is the list </p>
<pre><code> value = {'a': [['1312.98680732', 14.28625384], 
                ['1312.98680735', 20.303], 
                ['1312.98680736', 9.78438636]], 
          'b': [['1307.00000001', 0.02968967], 
                ['1307.00000000', 1.948], 
                ['1306.53301802', 0.02]], 
          'c': 0, 
          'd': 226843654} 
</code></pre>
<p>I am able to extract and get </p>
<pre><code>a = [['1312.98680732', 14.28625384], 
     ['1312.98680735', 20.303], 
     ['1312.98680736', 9.78438636]]
</code></pre>
<p>However I need to convert the quoted values from string to float.</p>
<p>Desired output: </p>
<pre><code>a = [[1312.98680732, 14.28625384], 
     [1312.98680735, 20.303], 
     [1312.98680736, 9.78438636]]
</code></pre>
<p>I tried <code>list(map(float, a)</code> but it is working only if I have one value.</p>
</div>
<div class="post-text" itemprop="text">
<p>For nested data, use a nested <a href="https://docs.python.org/3/glossary.html#term-list-comprehension" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; a = [['1312.98680732', 14.28625384], ['1312.98680735', 20.303], ['1312.98680736', 9.78438636]]
&gt;&gt;&gt; [[float(x) for x in group] for group in a]
[[1312.98680732, 14.28625384], [1312.98680735, 20.303], [1312.98680736, 9.78438636]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension to go through the old list and generate a new one. Use list unpacking to separate the list of two values at each outer list location.</p>
<pre><code>a = [[float(s), v] for s,v in a]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list(map(lambda l: list(map(float, l)), a))
</code></pre>
<p>if you do not want to use list comprehensions</p>
</div>
<div class="post-text" itemprop="text">
<p>If it's always the first element of your secondary list which is a string, then you could iterate through your first list (<code>a</code>) and for each list inside <code>a</code>, convert the first item to <code>float</code>, like this:</p>
<pre><code>for item in a:
    item[0] = float(item[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>a</code> is a list of lists. You want to cast the first item in those inner lists to a float. You can do this with list comprehension.</p>
<pre><code>[[float(item[0]), item[1]] for item in a]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will work:</p>
<pre><code>a = [[float(n) for n in b] for b in value["a"]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also try using <code>isinstance()</code>:</p>
<pre><code>a = [[float(x) if isinstance(x, str) else x for x in lst] for lst in a]
</code></pre>
<p>Which gives:</p>
<pre><code>[[1312.98680732, 14.28625384], [1312.98680735, 20.303], [1312.98680736, 9.78438636]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>something like this ?</p>
<pre><code>a = [['1312.98680732', 14.28625384],
     ['1312.98680735', 20.303],
     ['1312.98680736', 9.78438636]]


print(list(map(lambda x:list(map(lambda y:float(y),x)),a)))
</code></pre>
<p>output:</p>
<pre><code>[[1312.98680732, 14.28625384], [1312.98680735, 20.303], [1312.98680736, 9.78438636]]
</code></pre>
</div>
<span class="comment-copy">You applied <code>float</code> to the elements of <code>a</code>, which are 2-item lists.  You need to apply it to the elements of each of <i>those</i> lists.  How variable is your nested list structure?</span>
<span class="comment-copy"><code>a = [list(map(float, x)) for x in a]</code></span>
<span class="comment-copy">Remember that maps and list comprehensions are very similar processes. Try both and see which you prefer.</span>
