<div class="post-text" itemprop="text">
<p>I'm struggling with my first Python package + script project using <code>setuptools</code>. Here's a skeleton of my <code>setup.py</code>:</p>
<pre><code>setuptools.setup(
    name=&lt;PROJECT&gt;,
    packages=[&lt;PACKAGE_NAME&gt;],
    scripts=['bin/&lt;PACKAGE_NAME&gt;.py'],
    python_requires='&gt;=3',
)
</code></pre>
<p>My package is in <code>package_name/</code> and my script, which has the same base name as the package, is in <code>bin/package_name.py</code>. The script does <code>from package_name import *</code>. There are no dependencies.</p>
<p>When I run <code>python3 setup.py install</code>, it succeeds. Thereafter, when I do <code>import package_name</code> in a Python console, it succeeds. But when I run the script from the command line, it fails with a <code>NameError</code> on the first reference to a component from the package. I've reproduced the same error on Mac OS X and Linux.</p>
<p>Why does it fail this way, but doesn't throw an <code>ImportError</code>? How can I fix my script or my <code>setup.py</code>?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>has the same base name as the package</p>
</blockquote>
<p>That's exactly the problem. When you run <code>package_name.py</code> and the script imports <code>package_name</code> Python tries to import it from that script because it's the first <code>package_name.py</code> in <code>sys.path</code> (Python automatically prepends script's directory to <code>sys.path</code>).</p>
<p>Rename the script to <code>package_name</code>. Or even better create <a href="https://docs.python.org/3/library/__main__.html?#module-__main__" rel="nofollow noreferrer"><code>__main__.py</code></a> in your package and use <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#new-and-changed-setup-keywords" rel="nofollow noreferrer"><code>entry_points</code></a>:</p>
<pre><code>setup(
    …
    entry_points={
        'console_scripts': [
            'package_name = package_name.__main__:main'
        ]
    },
    …
)
</code></pre>
<p>That way <code>setuptools</code> create the script <code>package_name</code> for you automatically.</p>
<p>See an example in my <a href="https://github.com/phdru/mimedecode" rel="nofollow noreferrer">mimedecode</a>.</p>
</div>
<span class="comment-copy">Thank you - that solved the problem, and taught me something about Python's import order.  Placing command-line scripts in <code>__main__.py</code> inside the package seems like it break the separability of library and client. I'd say that wasn't great practice in C, but I don't know Python as well. Is that the preferred way to distribute such a package (library + its own client)?</span>
<span class="comment-copy">Yes. Or, if it's a one-module (not-package) library it usually has its own <code>main()</code> function, protected with <code>if __name__ == '__main__'</code>. Even modules in Python library have these. <a href="https://github.com/python/cpython/blob/master/Lib/zipfile.py#L2025" rel="nofollow noreferrer">Example: zipfile.py</a>.</span>
