<div class="post-text" itemprop="text">
<p>I made a chess board, but I need help with coloring the different squares. I only have <em>white</em> squares but I need <em><strong>black</strong></em> squares. Here is my code.</p>
<pre><code>import pygame
def board():   
    width=480         # measurements for the window
    height=480
    block_size=59
    window = pygame.display.set_mode((width,height))
    background_color = (0,0,0)     # This is how I make the lines
    window.fill(background_color)
    for y in range(height):
        for x in range(width):
            rect = pygame.Rect(x*(block_size+1), y*(block_size+1), block_size, block_size)
            pygame.draw.rect(window, (255,255,255), rect)   # Leaves space for lines to be visible.
    pygame.display.flip()
board()

# It's just the board.
</code></pre>
<p>I already know I violated PEP 8.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like: I changed your coord-manipulation to benefit directly from the given range values not using a mult inside it. Color is flipped on each <code>rect</code> drawn and also on line-change to get alternating row colorings:</p>
<pre><code>import pygame
def board(): 
    def flipColor(color):
        white = (240,240,240)
        black = (30,30,30)
        if not color or color == white:
            color = black
        else: 
            color = white
        return color

    width=480         # measurements for the window
    height=480
    block_size= 60  
    window = pygame.display.set_mode((width,height))
    background_color = (0,0,0)     # This is how I make the lines
    window.fill(background_color)
    c = None
    pygame.draw.rect(window,(255,0,0),pygame.Rect(0,0,width,height)) # red background
    for y in range(0,height,block_size): 
        c = flipColor(c)
        for x in range(0,width,block_size):
            c = flipColor(c)
            rect = pygame.Rect(x , y , x+block_size , y+block_size ) 
            pygame.draw.rect(window, c , rect, 0)   # Leaves space for lines to be visible.

    for i in range(0,height+1,block_size):  
        pygame.draw.line(window,(233,33,187),(i,0),(i,width),2)
        pygame.draw.line(window,(233,33,187),(0,i),(height,i),2)

    pygame.draw.line(window,(233,33,187),(height-2,0),(height-2,width),2) # fix for out of window line
    pygame.draw.line(window,(233,33,187),(0,width-2),(height,width-2),2) # fix for out of wondow line

    pygame.display.flip()


board()
</code></pre>
<p><a href="https://i.stack.imgur.com/GzW4j.png" rel="nofollow noreferrer"><img alt="chessboard" src="https://i.stack.imgur.com/GzW4j.png"/></a>
<a href="https://i.stack.imgur.com/eoxHb.png" rel="nofollow noreferrer"><img alt="chessboard with lines" src="https://i.stack.imgur.com/eoxHb.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>, pass an iterable with the colors and then just call <code>next</code> to cycle through them. I'd create the background surface when the program starts and then just blit it in the while loop. If you need a background with extra lines, just draw them on the same background surface as well or create a copy.</p>
<pre><code>import itertools
import pygame as pg


pg.init()
screen = pg.display.set_mode((480, 480))
clock = pg.time.Clock()

width, height = screen.get_size()
block_size = 60
# Create a surface onto which we'll blit the rectangles.
background = pg.Surface((width, height))
colors = itertools.cycle((pg.Color('white'), pg.Color('black')))

for y in range(0, height, block_size):
    for x in range(0, width, block_size):
        rect = (x, y, block_size, block_size)
        pg.draw.rect(background, next(colors), rect)
    next(colors)  # Skip the next color.


# Then you can just blit the background in the while loop.
screen.blit(background, (0, 0))
pg.display.flip()
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/45945254/make-a-88-chessboard-in-pygame-with-python">Make a 8*8 chessboard in pygame with python</a></span>
<span class="comment-copy">got a bug for the linesizes .. fixing atm</span>
<span class="comment-copy">ok I tried it and you forgot the '#' for some comments. I fixed it and it worked.</span>
<span class="comment-copy">@Luke_Hands  fixed it with lines...</span>
<span class="comment-copy">smart use of cycle - very near</span>
