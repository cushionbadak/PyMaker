<div class="post-text" itemprop="text">
<p>I have a C function that takes an object as argument:</p>
<pre><code>void fct(struct Objet * obj1) {
  ....
}
</code></pre>
<p>I would like to use this function in Python. I'm trying to parse this argument but can't find the way to. In Python:</p>
<pre><code>static PyObject* NameMod_fct(PyObject* self, PyObject* args) {

    PyObject * Obj;

    if (!PyArg_ParseTuple(args, "O!", **&amp;...**, &amp;Obj)) { // what should I put as &amp;Py_Type?
        return NULL;
    }

...
} 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Each Python object has a reference to its type: For a <code>pPyObj</code> (of type <code>PyObject*</code>), it can be accessed with <code>pPyObj-&gt;ob_type</code>.</p>
<p>This should point to an instance of <a href="https://docs.python.org/3/c-api/typeobj.html" rel="nofollow noreferrer"><code>PyTypeObject</code></a>.</p>
<p>At this point, the answer very depends on where the resp. <code>PyTypeObject</code> is "constructed".</p>
<h3>Case A: <code>Objet</code> is a Wrapper Object Written in C</h3>
<p>This is the case, where "I feel at home" (as I got my knowledge about Python rather exclusively by writing extensions in C/C++). There should/must exist a <code>static</code> instance of <code>PyTypeObject</code> which is registered in Python initially. Just get and pass its address.</p>
<h3>Case B: <code>Objet</code> is an Object of a non-C Library</h3>
<p>Hmm... That's IMHO the most difficult case. You have to retrieve the address of the resp. <code>PyTypeObject</code> instance. This probably could be done retrieving the resp. dictionaries of Python. I cannot say in detail as I've no experience regarding this.</p>
<p>I guess a good start regarding this is to (re-)search about <a href="https://docs.python.org/3/c-api/module.html#c.PyModule_GetDict" rel="nofollow noreferrer"><code>PyModule_GetDict()</code></a> together with <a href="https://docs.python.org/3/c-api/import.html#c.PyImport_Import" rel="nofollow noreferrer"><code>PyImport_Import()</code></a>.</p>
<h3>Case C: <code>Objet</code> is an Object of a Built-In Type of Python</h3>
<p>Last but not least â€“ the trivial case. In this case, I wouldn't use <code>O</code> because there are a lot of other designators for the built-in types.</p>
</div>
<span class="comment-copy">You said: You want to call C function <code>fct(struct Objet *ob1)</code> out of Python. How is <code>struct Objet</code> stored in Python?</span>
