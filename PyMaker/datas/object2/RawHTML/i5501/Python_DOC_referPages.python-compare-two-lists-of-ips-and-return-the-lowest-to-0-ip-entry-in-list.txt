<div class="post-text" itemprop="text">
<p>I have managed to compile two lists of IP addresses. used and unused ips as such</p>
<pre><code>unused_ips = ['172.16.100.0/32', '172.16.100.1/32', '172.16.100.2/32', '172.16.100.3/32', '172.16.100.4/32', '172.16.100.5/32', '172.16.100.6/32', '172.16.100.7/32', '172.16.100.8/32', '172.16.100.9/32'...]

used_ips = ['172.16.100.1/32','172.16.100.33/32']
</code></pre>
<p>what I want to be able to do now is compare these lists and return the next free IP. in the above example the next ip would be 172.16.100.2/32, until it handed out all of those from 1 to 32 then it would hand out 34.</p>
<p>im not sure where to begin with this, I can convert these to IPv4Network objects if there is something built in for this but I couldn't find anything in documentation</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd keep a <code>set</code> of <code>ipaddress</code> objects and manipulate them to allocate and de-allocate the addresses, like so:</p>
<pre><code>import ipaddress

def massage_ip_lists():
    global unused_ips, used_ips
    unused_ips = set(ipaddress.ip_address(ip.replace('/32', ''))
                     for ip in unused_ips)
    used_ips = set(ipaddress.ip_address(ip.replace('/32', ''))
                   for ip in used_ips)

def allocate_next_ip():
    new_ip = min(unused_ips - used_ips)
    used_ips.add(new_ip)
    return new_ip

unused_ips = [
    '172.16.100.0/32',
    '172.16.100.1/32',
    '172.16.100.2/32',
    '172.16.100.3/32',
    '172.16.100.4/32',
    '172.16.100.5/32',
    '172.16.100.6/32',
    '172.16.100.7/32',
    '172.16.100.8/32',
    '172.16.100.9/32']
used_ips = ['172.16.100.1/32', '172.16.100.33/32']

massage_ip_lists()
print(allocate_next_ip())
print(allocate_next_ip())
</code></pre>
<p>Note:</p>
<ul>
<li><code>/32</code> is a nomenclature for IP networks, not IP hosts.</li>
<li><code>ipaddress</code> objects are comparable, so functions like <code>min()</code> work on them.</li>
<li><code>172.16.100.0</code> is a perfectly valid IP address, depending upon the netmask. If you don't want to allocate it, either keep it out of <code>unused_ips</code>, or make the program aware of the netmask in use.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You want ips that are in unused but not used:</p>
<pre><code>available_ips = [ip for ip in unused_ips if ip not in used_ips]
</code></pre>
<p>You want to sort them to get the one that's closest to zero. Naive sorting will not work as you have strings; 172.16.xxx.xxx is sorted higher than 172.100.xxx.xxx for example. You can convert the IPs into lists of numbers to sort them correctly.</p>
<pre><code>import re
available_ips = sorted(available_ips, key=lambda ip: (int(n) for n in re.split(r'[./]', ip)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're just trying to iterate through a list of the available ips, you could do something like this:</p>
<pre><code># Filter unavailable ips from the list of all ips
available_ips = set(unused_ips) - set(used_ips)

# Iterate through list of available ips
for ip in available_ips:
    print(ip) # Or whatever you want to do with the next available ip
</code></pre>
</div>
<span class="comment-copy">FYI, in Python3 there is <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer"><code>ipaddress</code></a>.</span>
<span class="comment-copy">Wouldn't unused_ips be more appropriately named 'all_ips' or just 'ips'? It looks like when an IP is used it's in both lists, it's confusing to name it unused_ips if some of the IPs in the list are actually used.</span>
<span class="comment-copy">You seem to have networks in IPv4 with <code>32</code> bits in the mask set to 1? That wouldn't leave any space for hosts (all your IPs are designed for subnetworks) Is that correct?</span>
<span class="comment-copy">Based on your list values, you can instantiate new networks as object representations using the <code>ipaddress</code> package that Rob mentioned. <code>n = IPv4Network('172.16.100.0/32')</code></span>
<span class="comment-copy">this works perfectly! thank you!</span>
<span class="comment-copy">That's not how remove works. You want a set operation.  set(unused_ips) - set(used_ips)</span>
