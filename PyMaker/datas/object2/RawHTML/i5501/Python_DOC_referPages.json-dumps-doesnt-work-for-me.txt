<div class="post-text" itemprop="text">
<p>I wrote a small Python script to get a response from GitHub and its GraphQL API.</p>
<p>Here is what I coded:</p>
<pre><code>import json
def pp_json(json_thing, sort=True, indents=4):
    if type(json_thing) is str:
        print(json.dumps(json.loads(json_thing),sort_key=sort, indent=indents))
    else:
        print(json.dumps(json_thing, sort_key=sort, indent=indents))
    return None
</code></pre>
<p>I start this function with the output of my request as you can see here:</p>
<pre><code>url = 'https://api.github.com/graphql'
json = { "query" : """query {
  viewer {
    login
    name
    bio
    company
    location
  }
}""" 
        }
api_token = "hiddencontent"
headers = {'Authorization': 'token %s' % api_token}

result_tokentest = requests.post(url=url, json=json, headers=headers) # just Response Code
string_tokentest = result_tokentest.text

print (result_tokentest)
print (string_tokentest)
pp_json(result_tokentest)
</code></pre>
<p>I get following output:</p>
<pre><code>&lt;Response [200]&gt;
{"data":{"viewer":{"login":"datasienceelmo","name":"E.Lmo","bio":"Rohdaten sind geil!!","company":"Hochschule Ulm","location":"Ulm"}}}

--------------------------------------------------------------------------- AttributeError                            Traceback (most recent call last) &lt;ipython-input-12-9c2eefbf15a2&gt; in &lt;module&gt;()
     19 print (result_tokentest)
     20 print (string_tokentest)
---&gt; 21 pp_json(result_tokentest)

&lt;ipython-input-2-f2241ef62766&gt; in pp_json(json_thing, sort, indents)
      4         print(json.dumps(json.loads(json_thing),sort_key=sort, indent=indents))
      5     else:
----&gt; 6         print(json.dumps(json_thing, sort_key=sort, indent=indents))
      7     return None

AttributeError: 'dict' object has no attribute 'dumps'
</code></pre>
<p>I am unable to understand what the problem with my Python interpreter is, because I imported JSON. And in the documentation I just read how to use it, and I did as they did.</p>
</div>
<div class="post-text" itemprop="text">
<p>You re-used the global name <code>json</code> for the module import <em>and</em> for a dictionary. The last assignment wins, so <code>json</code> now references the dictionary, not the module. Use a different name for the dictionary, like <code>json_data</code>:</p>
<pre><code>json_data = { "query" : """query {
  viewer {
    login
    name
    bio
    company
    location
  }
}""" 

# ...

result_tokentest = requests.post(url=url, json=json_data, headers=headers)
</code></pre>
<p>Not that you need to use the <code>json</code> library at all here; the <code>requests</code> library supports decoding JSON responses natively by calling the <code>response.json()</code> method. You can pretty-print the result better by using the <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer"><code>pprint</code> library</a>:</p>
<pre><code>from pprint import pprint

pprint(result_tokentest.json())
</code></pre>
<p>As a side note: the GraphQL query itself is <strong>not JSON</strong>. There is no point in using the <code>json</code> library to parse or output a GraphQL query. It is fine to embed a GraphQL query in a JSON document however. The response is entirely in JSON.</p>
</div>
<span class="comment-copy">Wow mate, thank you so mutch and sorry for that really bad english you corrected in my question :). I using pprint as you suggested :) Much less complex Thank you so mutch :)</span>
