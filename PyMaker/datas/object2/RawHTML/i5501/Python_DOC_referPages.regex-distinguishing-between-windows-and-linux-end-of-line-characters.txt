<div class="post-text" itemprop="text">
<p>I'm trying to distinguish between Linux/Unix end of line character <code>\n</code> and the Windows end of line <code>\r\n</code>. I cannot seem to find a unique regex string that will distinguish between the two situations. My code is</p>
<pre><code>import regex 

winpattern = regex.compile("[(?m)[\r][\n]$",regex.DEBUG|regex.MULTILINE)

linuxpattern = regex.compile("^*.[^\r][\n]$", regex.DEBUG)

for i, line in enumerate(open('file8.py')):
    for match in regex.finditer(linuxpattern, line):
        print 'Found on line %s: %s' % (i+1, match.groups())
</code></pre>
<p>The <code>winpattern</code> and <code>linuxpattern</code> match both Windows and Linux. I want <code>linuxpattern</code> to only match Linux EOL and <code>winpattern</code> to only match Windows EOL. Any suggestions? </p>
</div>
<div class="post-text" itemprop="text">
<p>When opening a file as a text file Python by default uses Universal Newline Mode (see <a href="https://www.python.org/dev/peps/pep-0278/" rel="nofollow noreferrer">PEP 278</a>), which means it converts all three newline type <code>\r\n</code>, <code>\r</code> and <code>\n</code> to just <code>\n</code>. This means that your regex are irrelevant: you already lost the information about newline type when you read the files.</p>
<p>To disable newline conversion you should pass the <code>newline=''</code> parameter to <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open</code></a> (use <a href="https://docs.python.org/2/library/io.html#io.open" rel="nofollow noreferrer"><code>io.open</code></a> for python&lt;3):</p>
<pre><code>$ echo 'Hello
&gt; World
&gt; ' &gt; test.unix
$ cp test.unix test.dos
$ unix2dos test.dos
unix2dos: converting file test.dos to DOS format...
$ python3
Python 3.5.3 (default, Nov 23 2017, 11:34:05) 
[GCC 6.3.0 20170406] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; unix = open('test.unix', newline='').read()
&gt;&gt;&gt; dos = open('test.dos', newline='').read()
&gt;&gt;&gt; unix
'Hello\nWorld\n\n'
&gt;&gt;&gt; dos
'Hello\r\nWorld\r\n\r\n'
</code></pre>
<p>Afterwards these regexes will work:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; winregex = re.compile(r'\r\n')
&gt;&gt;&gt; unixregex = re.compile(r'[^\r]\n')
&gt;&gt;&gt; winregex.findall(unix)
[]
&gt;&gt;&gt; winregex.findall(dos)
['\r\n', '\r\n', '\r\n']
&gt;&gt;&gt; unixregex.findall(unix)
['o\n', 'd\n']
&gt;&gt;&gt; unixregex.findall(dos)
[]
</code></pre>
<p>Note that <code>$</code> matches right <em>before</em> the newline character when using <code>re.MULTILINE</code> and only the end of string without it. To correctly match any newline you should just remove the <code>$</code>.</p>
<p>If you want a regex that matches complete lines use something like this:</p>
<pre><code>&gt;&gt;&gt; unix_lines = re.compile(r'^(.*[^\r\n]\n|\n)', re.MULTILINE)
&gt;&gt;&gt; dos_lines = re.compile(r'^.*\r\n', re.MULTILINE)
&gt;&gt;&gt; unix_lines.findall(dos)
[]
&gt;&gt;&gt; unix_lines.findall(unix)
['Hello\n', 'World\n', '\n']
&gt;&gt;&gt; dos_lines.findall(unix)
[]
&gt;&gt;&gt; dos_lines.findall(dos)
['Hello\r\n', 'World\r\n', '\r\n']
</code></pre>
</div>
<span class="comment-copy"><code>[(?m)[\r][\n]$</code> says to match any of the characters in the set <code>[?()m\r</code> then <code>\n</code>, then end of line.</span>
