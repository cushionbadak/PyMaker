<div class="post-text" itemprop="text">
<p>For a <code>1D</code> NumPy array, I am looking to get the combinations without the same elements being repeated in a combination. The order is important. So, <code>[a,b]</code> and <code>[b,a]</code> would be two distinct combinations. Since we don't want repeats, <code>[a,a]</code> and <code>[b,b]</code> aren't valid combinations. For simplicity, let's keep it to two elements per combination. Thus, the output would be a <code>2D</code> NumPy array with <code>2</code> columns.</p>
<p>The desired result would be essentially same as <code>itertools.product</code> output except that we need to mask out the combinations that are repeated.  As such, we can solve it for a sample case, like so -</p>
<pre><code>In [510]: import numpy as np

In [511]: a = np.array([4,2,9,1,3])

In [512]: from itertools import product

In [513]: np.array(list(product(a,repeat=2)))[~np.eye(len(a),dtype=bool).ravel()]
Out[513]: 
array([[4, 2],
       [4, 9],
       [4, 1],
       [4, 3],
       [2, 4],
       [2, 9],
       [2, 1],
       [2, 3],
       [9, 4],
       [9, 2],
       [9, 1],
       [9, 3],
       [1, 4],
       [1, 2],
       [1, 9],
       [1, 3],
       [3, 4],
       [3, 2],
       [3, 9],
       [3, 1]])
</code></pre>
<p>But, creating that huge array and then masking out and hence not using some elements, doesn't look too efficient to me.</p>
<p>That got me thinking if <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.strides.html" rel="nofollow noreferrer"><code>numpy.ndarray.strides</code></a> could be leveraged here. I have one solution with that idea in mind, which I will be posting as an answer post, but would love to see other efficient ones.</p>
<p>In terms of usage - We come across these cases with adjacency matrices among others and I thought it would be good to solve such a problem. For easier and efficient plug-n-play into other problems, it would be nice to have the final output that's not a <em>view</em> of some intermediate array.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like  <a href="http://www.scipy-lectures.org/advanced/advanced_numpy/#indexing-scheme-strides" rel="nofollow noreferrer"><code>np.lib.stride_tricks.as_strided</code></a> could be used to maximize the efficiency of <code>views</code> and we delay the copying until the final stage, where we assign into an initialized array. The implementation would be in two steps, with some work needed for the second column (as shown in the sample case in the question), which we are calling as <code>one-cold</code> (fancy name that denotes one element missing per sequence <em>/ is cold</em> in a each interval of <code>len(input_array) - 1</code>)</p>
<pre><code>def onecold(a):
    n = len(a)
    s = a.strides[0]
    strided = np.lib.stride_tricks.as_strided
    b = np.concatenate((a,a[:-1]))
    return strided(b[1:], shape=(n-1,n), strides=(s,s))
</code></pre>
<p>To showcase, <code>onecold</code> with a sample case -</p>
<pre><code>In [563]: a
Out[563]: array([4, 2, 9, 1, 3])

In [564]: onecold(a).reshape(len(a),-1)
Out[564]: 
array([[2, 9, 1, 3],
       [4, 9, 1, 3],
       [4, 2, 1, 3],
       [4, 2, 9, 3],
       [4, 2, 9, 1]])
</code></pre>
<p>To solve the original problem, we will use it like so -</p>
<pre><code>def combinations_without_repeat(a):
    n = len(a)
    out = np.empty((n,n-1,2),dtype=a.dtype)
    out[:,:,0] = np.broadcast_to(a[:,None], (n, n-1))
    out.shape = (n-1,n,2)
    out[:,:,1] = onecold(a)
    out.shape = (-1,2)
    return out  
</code></pre>
<p>Sample run -</p>
<pre><code>In [574]: a
Out[574]: array([4, 2, 9, 1, 3])

In [575]: combinations_without_repeat(a)
Out[575]: 
array([[4, 2],
       [4, 9],
       [4, 1],
       [4, 3],
       [2, 4],
       [2, 9],
       [2, 1],
       [2, 3],
       [9, 4],
       [9, 2],
       [9, 1],
       [9, 3],
       [1, 4],
       [1, 2],
       [1, 9],
       [1, 3],
       [3, 4],
       [3, 2],
       [3, 9],
       [3, 1]])
</code></pre>
<p>Seems quite efficient for a <code>1000</code> elements array of <code>ints</code> -</p>
<pre><code>In [578]: a = np.random.randint(0,9,(1000))

In [579]: %timeit combinations_without_repeat(a)
100 loops, best of 3: 2.35 ms per loop
</code></pre>
<p>Would love to see others!</p>
</div>
<div class="post-text" itemprop="text">
<p><em>"It would be essentially same as <code>itertools.product</code> output, expect that we need to mask out the combinations that are repeated."</em>  Actually, what you want is <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a>:</p>
<pre><code>In [7]: import numpy as np

In [8]: from itertools import permutations

In [9]: a = np.array([4,2,9,1,3])

In [10]: list(permutations(a, 2))
Out[10]: 
[(4, 2),
 (4, 9),
 (4, 1),
 (4, 3),
 (2, 4),
 (2, 9),
 (2, 1),
 (2, 3),
 (9, 4),
 (9, 2),
 (9, 1),
 (9, 3),
 (1, 4),
 (1, 2),
 (1, 9),
 (1, 3),
 (3, 4),
 (3, 2),
 (3, 9),
 (3, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Benchmarking Post</h2>
<p>Posting the performance numbers/figures for the proposed approaches thus far in this wiki-post.</p>
<p>System config :</p>
<pre><code>NumPy version         : 1.13.3
Python version        : 2.7.12 (GCC 5.4.0)

Operating System: Ubuntu 16.04
RAM: 16GB
CPU Model: Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz (# Cores=4, # Threads=8)
</code></pre>
<p>The benchmarking setup would be :</p>
<pre><code>import numpy as np
import perfplot
from itertools import permutations

# https://stackoverflow.com/a/48234170/ @Divakar
def onecold(a):
    n = len(a)
    s = a.strides[0]
    strided = np.lib.stride_tricks.as_strided
    b = np.concatenate((a,a[:-1]))
    return strided(b[1:], shape=(n-1,n), strides=(s,s))

# https://stackoverflow.com/a/48234170/ @Divakar
def combinations_without_repeat(a):
    n = len(a)
    out = np.empty((n,n-1,2),dtype=a.dtype)
    out[:,:,0] = np.broadcast_to(a[:,None], (n, n-1))
    out.shape = (n-1,n,2)
    out[:,:,1] = onecold(a)
    out.shape = (-1,2)
    return out

# https://stackoverflow.com/a/48234349/ @Warren Weckesser
def itertools_permutations(a):
    return np.array(list(permutations(a, 2)))

perfplot.show(
        setup=lambda n: np.random.rand(n),
        n_range=[10,20,50,100,200,500,1000], # dataset sizes
        kernels=[combinations_without_repeat, itertools_permutations],
        logx=True,
        logy=True,
        )
</code></pre>
<p>The performance figure :</p>
<p><a href="https://i.stack.imgur.com/sUkQI.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/sUkQI.png"/></a></p>
</div>
<span class="comment-copy">Since the <i>ordering</i> matters, it's good to phrase the question as permutations instead of combinations where ordering of the elements don't matter.</span>
<span class="comment-copy">@kmario23 Yeah, somehow I missed out on that term. Should change the title probably.</span>
<span class="comment-copy">Nice! But that's the issue with list/itertools based ones, as they are slow. It works though.</span>
<span class="comment-copy">For a small array such as <code>a = np.array([4,2,9,1,3])</code>, using <code>itertools.permutations</code> is faster, but as the length of the input increases, your code eventually wins.</span>
