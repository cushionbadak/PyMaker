<div class="post-text" itemprop="text">
<p>I’m writing a program that pulls a list of departments from a database. I want to avoid hardcoding this since the list may change. </p>
<p>I want to create a variable for each department to populate questions into a GUI. The problem I have is that I can create variables from the database list using the vars() function. I’m then storing the list of variable names so I can reference them elsewhere in my program. As long as I do everything in the same def, there is no problem. But I don’t know how to reference the dynamically created variables in a separate function. </p>
<p>Since I won’t know the variable names ahead of time, I don’t know how to make them available in other functions. </p>
<pre><code>deptList = ['deptartment 1', 'deptartment 2', 'deptartment 3', 'deptartment 4', 'deptartment4']

varList=[]

def createVariables():
    global varList    
    for i in range(len(deptList)):

        templst=deptList[i].replace(' ', '')
        varList.append(templst+'Questions')
        globals()['{}'.format(varList[i])] = []


def addInfo():
    global varList

    print('varlist',vars()[varList[1]]) #Keyerror



createVariables()
print(varList)
vars()[varList[1]].append('This is the new question')
print('varlist',vars()[varList[1]]) #Prints successfully

addInfo()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do <strong>not</strong> use dynamic variables here. It makes no sense, just use one of Python's built-in containers, like a <code>dict</code>. </p>
<p>But, the reason your code isn't working is because <code>vars()</code> returns <code>locals()</code> when called with no argument. From the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><strong>vars</strong>([object]) Return the <code>__dict__</code> attribute for a module, class,
  instance, or any other object with a <code>__dict__</code> attribute.</p>
<p>...</p>
<p>Without an argument, <code>vars()</code> acts like <code>locals()</code>. Note, the locals
  dictionary is only useful for reads since updates to the locals
  dictionary are ignored.</p>
</blockquote>
<p>So really, you just want to use the <code>dict</code> object returned by <code>globals()</code>. But this should make you wonder, why not just leave the global name-space out of it, and rather, just use your own custom <code>dict</code> object? Read <a href="https://stackoverflow.com/questions/1373164/how-do-i-create-a-variable-number-of-variables">this</a> related question.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the tips. I was able to write the code I needed with a dictionary. Being new to python, it took a little trial and error, but the solution was better than what I was originally trying to do.</p>
<p>Thanks for your help!</p>
</div>
<span class="comment-copy">Your question seems ambiguous. Can you make it more clear what's certain and what's uncertain?</span>
<span class="comment-copy"><code>globals()</code> just returns a dictionary. Can you not just create a custom dictionary for this? Why do you need global variables generated dynamically? And why does <code>vars()</code> return variables from the database? There must be a separate way you get the variable names and values from the database.</span>
<span class="comment-copy">a dictionary might be sufficient for your use case.</span>
<span class="comment-copy">Using dynamically created global variables here seems inadvisable. Just use a <code>dict</code> object. There is no need for a <code>varsList</code></span>
