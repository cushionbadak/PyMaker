<div class="post-text" itemprop="text">
<p>I'm trying to mock out urllib.request.urlopen's Read method on Python 3:</p>
<p><strong>Function Code:</strong></p>
<pre><code>try:
    with request.urlopen(_webhook_url, json.dumps(_message).encode('utf-8')) as _response:
        _response_body = _response.read()
        return _response_body
</code></pre>
<p><strong>Test Code:</strong></p>
<pre><code>with mock.patch('urllib.request.urlopen') as mock_urlopen:
    response_mock = MagicMock()
    response_mock.read.return_value = 'ok'
    mock_urlopen.return_value = response_mock


    with self.stubber:
        _response = NotifySlack.lambda_handler(_event)

        self.assertEqual('ok', _response)
</code></pre>
<p>If I call <code>response_mock.read()</code> I get the 'ok' value returned, however when I assert the return value I get a mock signature:</p>
<pre><code>Expected :ok
Actual   :&lt;MagicMock name='urlopen().__enter__().read()' id='2148156925992'&gt;
</code></pre>
<p>Any ideas on why the mock isn't returning the value assigned to read()?</p>
</div>
<div class="post-text" itemprop="text">
<p>To follow @jonrsharpe's comment and the <a href="https://stackoverflow.com/q/28850070/3001761">Python: Mocking a context manager</a> thread, to properly <em>mock the context manager</em> in this case, you would need this interestingly looking line:</p>
<pre><code>mock_urlopen.return_value.__enter__.return_value.read.return_value = 'ok'
#^^^^^^context manager to return response^^^^^^^|^^^read method^^^
</code></pre>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/28850070/3001761">stackoverflow.com/q/28850070/3001761</a></span>
<span class="comment-copy">That works, thanks! For other Python newbies (myself included), this particular approach seems to be required because I used the with keyword (which creates the context manager construct referred to in the answer). Had the been "_response = request.urlopen..." the original code would appear to have worked.</span>
<span class="comment-copy">Also mentioned in the <code>unittest.mock</code> docs: <a href="https://docs.python.org/3/library/unittest.mock.html#mocking-magic-methods" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">You can also do <code>mock_urlopen().__enter__().read.return_value = 'ok'</code>, which is shorter. If you are tracking whether your mock has been called then you can reset the call count with <code>mock_urlopen.reset_mock()</code>.</span>
