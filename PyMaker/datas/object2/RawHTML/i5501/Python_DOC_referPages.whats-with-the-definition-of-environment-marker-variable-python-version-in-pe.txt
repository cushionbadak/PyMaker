<div class="post-text" itemprop="text">
<p>Just a quick question I stumbled upon. It's not really important, but I'm interested in the reason for this and haven't found a quick answer, yet.</p>
<p>According to <a href="https://www.python.org/dev/peps/pep-0508/#id23" rel="nofollow noreferrer">PEP 508 -- Environment Markers (section "Specification" - "Environment markers")</a> marker variable <code>python_version</code> is defined as <code>platform.python_version()[:3]</code>.</p>
<p>So for Python 3.5.2, <code>python_version</code> is going to be <code>3.5</code>.</p>
<p>However, what if either major or minor version number is higher than 9? The version number would consist of more than 3 characters and <code>[:3]</code> would crop it. Isn't this a possibility for future Python versions?</p>
<p>Why not use something like <code>".".join(platform.python_version().split(".", 2)[:2])</code> which still seems very basic and won't overly complicate the code?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure it is just an oversight or simplification for documentation purposes. The <em>intention</em> is clearly to provide a <code>major.minor</code> version string.</p>
<p>Note that historically, there <em>never has been a minor version number with double digits</em>. So far, Python has managed with just one digit, always. The highest numbers, so far, have been <code>1.6</code>, <code>2.7</code> and <code>3.7</code>. That's not to say there never will be a <code>3.10</code> in future, but so far, it just hasn't come up.</p>
<p>I'd imagine an actual implementation to use <a href="https://docs.python.org/3/library/platform.html#platform.python_version_tuple" rel="nofollow noreferrer"><code>platform.python_version_tuple()</code></a>:</p>
<pre><code>return '.'.join(platform.python_version_tuple()[:2]
</code></pre>
<p>or</p>
<pre><code>major, minor, patch = platform.python_version_tuple()
return '{}.{}'.format(major, minor)
</code></pre>
<p>However, both forms are rather a bit more verbose to fit into a PEP table column aiming to document rather than prescribe code.</p>
<p>If in doubt, write to the Python-dev mailing list. I'm sure that if this was to become so confusing as to be problematic, the PEP can be adjusted.</p>
<p>As for pip; it uses the vendored <a href="https://github.com/pypa/packaging" rel="nofollow noreferrer"><code>packaging</code> library</a> to handle environment markers, which has <a href="https://github.com/pypa/packaging/blob/c22fbd8c7bfa989df911243b10901645b7d4758d/packaging/markers.py#L267" rel="nofollow noreferrer">implemented the <code>python_version</code> marker verbatim as specced in the PEP</a>. If you feel strongly about it, you could file an issue there, the PEP maintainers are active on that project.</p>
<p>Note that there is still <em>plenty</em> of time. So far, 3.x releases each take about 18 months to appear (3.2: 2011-02, 3.3: 2012-09, 3.4: 2014-03, 3.5: 2015-09, 3.6: 2016-12, 3.7: expected 2018-06), so we have 5 years or so to address this.</p>
</div>
<span class="comment-copy">Why care about a rejected PEP?</span>
<span class="comment-copy">@MartijnPieters Thank you. I linked the wrong PEP. I'll fix it.</span>
<span class="comment-copy">I see that PEP 508 states the same derivation from <code>platform.python_version()</code>.</span>
<span class="comment-copy">Much better: <code>'.'.join(platform.python_version_tuple()[:2]</code>.</span>
<span class="comment-copy">Hmm, I'm not sure how I feel about this kind of simplification for documentation purposes. <code>implementation_version</code> is more elaborate and its definition seems to be completely documented? However, I'm far from being an advanced programmer. So what do I know... ;-) Where would I have to look for the actual implementation? Would this be in the <code>pip</code> source code?</span>
<span class="comment-copy">@emmi474: I've linked to the implementation used by <code>pip</code>. We have 5 more years before this would become a problem however.</span>
