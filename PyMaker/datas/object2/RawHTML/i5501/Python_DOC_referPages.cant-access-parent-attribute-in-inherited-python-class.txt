<div class="post-text" itemprop="text">
<p>This is my parent class,</p>
<pre><code>class BaseResource:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        fmt = '[%(asctime)s] [%(levelname)s] [%(message)s] [--&gt; %(pathname)s [%(process)d]:]'
        logging.basicConfig(format=fmt, level=logging.DEBUG)

    def log(self, msg):
        self.logger.debug(msg)
</code></pre>
<p>This is my inherited object,</p>
<pre><code>class SendOTP(BaseResource):

    def __init__(self):
        super(BaseResource, self).__init__()

    def on_post(self, req, res):
        self.logger.log("[FAILURE]..unable to read from POST data")
</code></pre>
<p>This throws up the following error,</p>
<pre><code>AttributeError: 'SendOTP' object has no attribute 'logger'
</code></pre>
<p>What am I doing wrong here.</p>
</div>
<div class="post-text" itemprop="text">
<p>It should be <code>super(SendOTP, self)</code>, not <code>super(BaseResource, self)</code>.</p>
<p>Also, if this is Python 3, you can simplify it to just <code>super()</code>; if Python 2, you also need to change the declaration of <code>BaseResource</code> to</p>
<pre><code>class BaseResource(object):
</code></pre>
<p>to get a new-style class.</p>
</div>
<div class="post-text" itemprop="text">
<p>If it is <strong>python 3</strong> you have to use: 
<code>Super()._init_()</code> </p>
<p>instead of <code>super(BaseResource, self).__init__()</code> </p>
<p><strong><em>and</em></strong></p>
<p><code>super().log("[FAILURE]..unable to read")</code> </p>
<p>instead of <code>self.logger.log("[FAILURE]..unable to read")</code></p>
<p>If it is <strong>python 2</strong> you have to use:
<code>BaseResource.__init__(self)</code> </p>
<p>instead of <code>super(BaseResource, self).__init__()</code> </p>
<p><strong><em>and</em></strong></p>
<p><code>self.log("[FAILURE]..unable to read")</code> </p>
<p>instead of <code>self.logger.log("[FAILURE]..unable to read")</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In super you should put your class type</p>
<pre><code>&gt;&gt;&gt; class A(object):
...     def __init__(self):
...             print("hi")

&gt;&gt;&gt; class B(A):
...     def __init__(self):
...             super(B, self).__init__()

&gt;&gt;&gt; class C(A):
...     def __init__(self):
...             super(A, self).__init__()

&gt;&gt;&gt; B()
hi
&lt;__main__.B object at 0x0000024F90141C88&gt;

&gt;&gt;&gt; C()
&lt;__main__.C object at 0x0000024F90141D30&gt;
</code></pre>
</div>
<span class="comment-copy">Can't reproduce: <a href="https://ideone.com/Xmp1b2" rel="nofollow noreferrer">ideone.com/Xmp1b2</a></span>
<span class="comment-copy">If this is python3, you could simplify the <code>super</code> call to <code>super().__init__()</code></span>
<span class="comment-copy">@melpomene imho, call on_post</span>
<span class="comment-copy">This  worked but just curious, <code>class BaseResource(object)</code> is the old Python 2 style, right?</span>
<span class="comment-copy">But now I get the following error, <code>TypeError: log() missing 1 required positional argument: 'msg'</code></span>
<span class="comment-copy">So I guess this is an additional question, I'm trying to call a method from the super and I'm passing in the correct argument and still getting an error.</span>
<span class="comment-copy">@MelissaStewart: <a href="https://docs.python.org/3/library/logging.html#logging.Logger.log" rel="nofollow noreferrer">Read the docs for <code>Logger.log</code>.</a></span>
