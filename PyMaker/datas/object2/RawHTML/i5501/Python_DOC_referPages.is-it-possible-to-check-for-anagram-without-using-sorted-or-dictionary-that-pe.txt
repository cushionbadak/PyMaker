<div class="post-text" itemprop="text">
<p>I'm currently studying and I was told not to use "magic" python tricks like sorted() or string splitting in python. </p>
<p>I mistook this as only using arrays to check if a input string is an anagram. So while the first thing I thought of was to use a dictionary I did not pursue it because I thought it was banned. Using the dictionary I can count up the frequency of the letters by using the letter as a key and the count as the value and counting down (subtract) the frequency of letters encountered in the input string and doing a loop for the frequency dictionary to see if there's any zeros. </p>
<p>So...with a false notion of the restriction set upon me, I created a nested loop like the following (problem assumes equal length, no space)</p>
<pre><code>def anagram(original, input):
    for a in original:
        i=0
        for b in input:
            if a == b:
               del input[i]
            else:
               pass
        i+=1
    if len(input) == 0:
        return True
    else:
        return False
</code></pre>
<p>Obviously this is undesirable as the big o notation is O(n^2) to the solution using dictionary which would be O(3n), two iterations to count the frequency, and a final iteration to check if any entry in the dictionary has a non zero frequency (which would mean this is not an anagram).</p>
<p>So this is some comprehension problem on my end but instead of moving on, I thought to myself is it possible to produce a better performing anagram checker that is better than my solution O(n^2) without using dictionary and just relying on array/list?</p>
<p>I had another idea but I stopped:</p>
<p>1) Convert the list of string characters into a list of numbers - but this means I need to still loop over the reference character (original) to find the number position.</p>
<p>It's been eating away at me, and I realize that I am overthinking such simple algorithm questions....but still curious if there is a solution meeting the criteria.</p>
</div>
<div class="post-text" itemprop="text">
<p>The pythonic way of answering this question would be using a <code>collections.Counter</code> object:</p>
<pre><code>from collections import Counter

def anagram(s1, s2):
    return Counter(s1) == Counter(s2)
</code></pre>
<p>But since those are restricted, you can fall back to vanilla dictionaries (also known as hashmaps, a fundamental ingredient in so many efficient algorithms).</p>
<hr/>
<p>A high level process is as follows. First, build a hashmap of counts for <code>string1</code>. Repeat the process for <code>string2</code>. Finally, compare the two hashmaps for equality.</p>
<p>First, the helper function - </p>
<pre><code>def build_counts(string):
    ctr = {}
    for c in string:
        ctr[c] = ctr.setdefault(c, 0) + 1

    return ctr
</code></pre>
<p>And now, the driver - </p>
<pre><code>def anagram(string1, string2):  
    c1 = build_counts(string1)
    c2 = build_counts(string2)

    return c1 == c2
</code></pre>
<p>Complexity Analysis - building each hashmap takes O(N) time, and performing comparison is O(N) as well, since you have to, one, test if the keys are identical, and two, compare the values of corresponding keys. All in all, a linear algorithm.</p>
<hr/>
<p>Since hashmaps and hash sets are so commonplace, you should not argue that this is restricted, unless you plan on implementing your own hash map with arrays and open addressing.</p>
<p>And no, there is no efficient algorithm that does not rely on hashmaps or something more complicated. Not unless you go with viraptor's answer, which is basically an <em>array version of a hashmap</em> (!), but having a unique entry for <em>every single</em> character in the ASCII set. For example, the count for ASCII character 65 would be accessed with <code>arr[65]</code>, and so on. So, you'd need to have an array big enough to fit every ASCII character.</p>
<p>Things are manageable for <em>just</em> the ASCII letters, but the plot thickens when you consider other, broader encodings (unicode). In the end, it's a lot more space efficient to just use a hashmap. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an alternative method that works in linear time for "reasonable" length words. The Algorithm runs O(n) if you don't count the arbitrary precision multiplications.</p>
<p>The logic, If you assign each letter to a prime number. The multiplication of these primes for 2 anagrams will be the same.</p>
<p>I hope reduce doesn't count as a magic function.</p>
<pre><code>from operator import mul
from functools import reduce


def is_anagram(word_a, word_b):
    primes_26 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,
                 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]

    def prime_product(word):
        return reduce(mul, [primes_26[ord(ch) - 65] for ch in word.upper() if ch.isalpha()])

    return prime_product(word_a) == prime_product(word_b)


assert is_anagram("abc", "cba") 
assert not is_anagram("abc", "cbad") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It depends on the definition of your inputs. Do you want to handle all characters, or just the printable / latin-1 set? Do you care about theoretical complexity, or real performance?</p>
<p>For the first question - if you don't care about characters encoding to more than one byte, you can create a list with 256 elements and instead of indexing into a dict, index that array instead. For each character add/remove <code>1</code> at a specific position in the list. It's the same complexity as your dict solution: <code>O(n+m)</code>. (counting in the array is <code>O(1)</code> since it's got predefined size)</p>
<p>For the second question - if you want to use characters without limit, you can do the same thing, but create a list with <code>1,114,112</code> elements and index by unicode character number. It's not going to be faster than the dictionary solution, but again - the complexity remains <code>O(n+m)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If magic functions are disallowed, you can build your own Counter</p>
<p><code>def Counter(string):
    return {i: string.count(i) for i in set(string)}</code></p>
<p>Then you can simply fall back on cᴏʟᴅsᴘᴇᴇᴅ's solution</p>
</div>
<span class="comment-copy">You could use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>. <code>Counter(original) == Counter(input)</code> should be equivalent to an anagram check.</span>
<span class="comment-copy">@PatrickHaugh that's pretty neat but for this case such magic functions are restricted.</span>
<span class="comment-copy"><code>Counter</code> is effectively a dict, so if you're excluding dicts I'd assume counters are also excluded. If I were gonna do this and not use any kind of mapping type, I'd use an array indexing each letter by its 0-25 offset (or 0-51 if considering caps distinct) and build the counts into that.</span>
<span class="comment-copy">If this is for studies, then it may be worth being precise - the function you presented is <code>O(n*m)</code>, and the dictionary solution you explained is <code>O(n+m)</code> given the original and input lengths being <code>n</code> and <code>m</code> respectively.</span>
<span class="comment-copy">@viraptor if <code>n != m</code> the answer is <code>False</code> straight away...</span>
<span class="comment-copy">Consider reviewing my answer for a space-efficient solution. I took a few liberties with what counts as an <code>operation</code>.</span>
<span class="comment-copy">Building the counter like this is O(N ** 2) because you've used <code>string.count</code>.</span>
