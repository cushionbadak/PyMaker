<div class="post-text" itemprop="text">
<p>I would like to rename images based on part of the name of the folder the images are in and iterate through the images.  I am using os.walk and I was able to rename all the images in the folders but could not figure out how to use the letters to the left of the first hyphen in the folder name as part of the image name.</p>
<p>Folder name:  <code>ABCDEF - THIS IS - MY FOLDER - NAME</code></p>
<p>Current image names in folder:</p>
<pre><code>dsc_001.jpg 
dsc_234.jpg
dsc_123.jpg
</code></pre>
<p>Want to change to show like this:</p>
<pre><code>ABCDEF_1.jpg
ABCDEF_2.jpg
ABCDEF_3.jpg
</code></pre>
<p>What I have is this, but I am not sure why I am unable to split the filename by the hyphen:</p>
<pre><code>import os
from os.path import join

path = r'C:\folderPath'
i = 1

for root, dirs, files in os.walk(path):
    for image in files:
        prefix = files.split(' - ')[0]
        os.rename(os.path.join(path, image), os.path.join(path, prefix + '_' 
        + str(i)+'.jpg'))
        i = i+1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Okay, I've re-read your question and I think I know what's wrong.</p>
<p>1.) The <code>os.walk()</code> iterable is recursive, i.e. if you use <code>os.walk(r'C:\')</code>, it will loop through <em>all</em> the folders and find <em>all</em> the files under C drive.  Now I'm not sure if your C:\folderPath has any sub-folders in it.  If it does, and any of the folder/file format are not the convention as C:\folderPath, your code is going to have a bad time.</p>
<p>2.) When you iterate through <code>files</code>, you are <code>split()</code>ing the wrong object.  Your question state you want to split the Folder name, but your code is splitting the <code>files</code> iterable which is a list of all the files under the current iteration directory.  That doesn't accomplish what you want. Depending if your <code>ABCDEF</code> folder is the C:\folderPath or a sub folder within, you'll need to code differently.</p>
<p>3.) you have imported <code>join</code> from <code>os.path</code> but you still end up calling the full name <code>os.path.join()</code> anyways, which is redundant.  Either just <code>import os</code> and call <code>os.path.join()</code> or just with your current imports, just <code>join()</code>.</p>
<p>Having said all of that, here are my edits:</p>
<h1>Answer 1:</h1>
<p><strong>If your ABCDEF is the assigned folder</strong></p>
<pre><code>import os
from os.path import join

path = r'C:\ABCDEF - THIS - IS - MY - FOLDER - NAME'

for root, dirs, files in os.walk(path):
    folder = root.split("\\")[-1] # This gets you the current folder's name
    for i, image in enumerate(files):
        new_image = "{0}_{1}.jpg".format(folder.split(' - ')[0], i + 1)
        os.rename(join(path, image), join(path, new_image))
    break # if you have sub folders that follow the SAME structure, then remove this break.  Otherwise, keep it here so your code stop after all the files are updated in your parent folder.
</code></pre>
<h1>Answer 2:</h1>
<p><strong>Assuming your ABCDEF's are all sub folders under the assigned directory, and <em>all</em> of them follow the same naming convention.</strong></p>
<p>import os
    from os.path import join</p>
<pre><code>path = r'C:\parentFolder' # The folder that has all the sub folders that are named ABCDEF...

for i, (root, dirs, files) in enumerate(os.walk(path)):
    if i == 0: continue # skip the parentFolder as it doesn't follow the same naming convention
    folder = root.split("\\")[-1] # This gets you the current folder's name
    for i, image in enumerate(files):
        new_image = "{0}_{1}.jpg".format(folder.split(' - ')[0], i + 1)
        os.rename(join(path, image), join(path, new_image))
</code></pre>
<h1>Note:</h1>
<p>If your scenario doesn't fall under either of these, please make it clear what your folder structure is (a sample including all sub folders and sub files).  Remember, <em>consistency</em> is key in determining how your code should work. If it's inconsistent, your best bet is use Answer 1 on <em>each</em> target folder separately.</p>
<h1>Changes:</h1>
<p>1.) You can get an incremental index without doing a <code>i += 1</code>.  <a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a> is a great tool for iterables that also give you the iteration number.</p>
<p>2.) Your <code>split()</code> should be operated on the folder name instead of <code>files</code> (an iterable).  In your case, <code>image</code> is the actual file name, and <code>files</code> is the list of files in the current iteration directory.</p>
<p>3.) Use of <a href="https://docs.python.org/3.6/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code> function</a> to make your new file format easier to read.</p>
<p>4.) You'll note the use of <code>split("\\")</code> instead of <code>split(r"\")</code>, and that's <a href="https://stackoverflow.com/questions/647769/why-cant-pythons-raw-string-literals-end-with-a-single-backslash">because a single backslash cannot be a raw string.</a></p>
<p>This should now work.  I ended up doing a lot more research than expected such as <a href="https://stackoverflow.com/questions/3207219/how-do-i-list-all-files-of-a-directory">how to handle the <code>os.walk()</code> properly in both scenarios.</a> For future reference, a little google search goes a long way.  I hope this finally answers your question.  Remember, doing your own research and clarity in demonstrating your problem will get you more efficient answers.</p>
<p>Bonus: if you have python 3.6+, you can even use <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">f strings</a> for your new file name, which ends up looking really cool:</p>
<pre><code>new_image = f"{image.split(' - ')[0]}_{i+1}.jpg"
</code></pre>
</div>
<span class="comment-copy">You mean <code>image.split</code> not <code>files.split</code>, no?</span>
<span class="comment-copy">I thought I needed to use the files.split as I wanted to use the first part of the file name in the image name</span>
<span class="comment-copy"><code>files</code> is a list of filenames. <code>image</code> is the name of the current file.</span>
<span class="comment-copy">Thank you for your help!  I did give it a try but still got an error of file not found:    Traceback (most recent call last):   File "C:/Users/mypla/Desktop/testloop.py", line 11, in &lt;module&gt;     os.rename(os.path.join(path, image), os.path.join(path, new_image)) FileNotFoundError: [WinError 2] The system cannot find the file specified: 'C:\\Users\\mypla\\Desktop\\1_Japanese\\dsc_342.jpg' -&gt; 'C:\\Users\\mypla\\Desktop\\1_Japanese\\ dsc_342_2.jpg_2.jpg'</span>
<span class="comment-copy">Oh geez, I just read your post a second time and I think the code is fundamentally doing a different thing.  I thought the files are under the root folder <code>path</code>, but it seems like they're actually in the sub directories? Perhaps share a sample folder/file structure?</span>
<span class="comment-copy">Whew, just did a huge edit.  I hope that covers it - if not, you'll need to be really clear on your folder/file structure to get a meaningful answer.</span>
<span class="comment-copy">Thank you so much! The only thing I had to change was to add the folder in os.rename.                                                                           os.rename(join(path, folder, image), join(path, folder, new_image))</span>
