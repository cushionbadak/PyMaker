<div class="post-text" itemprop="text">
<p>I have list of dictionaries like below:</p>
<pre><code>A=[
    {key1 : val11, key2 : val21, key3 : val31, key5 : val51, key6 : val61},
    {key2 : val22, key3 : val32, key5 : val52, key6 : val62},
    {key1 : val13, key2 : val23, key4 : val43, key5 : val53},
    {key1 : val14, key3 : val34, key4 : val44, key5 : val54, key6 : val64},
    {key4 : val45, key5 : val55, key6 : val65}
]
</code></pre>
<p>As you see the length of the dictionaries are not the same and also the <code>key : value</code> in each dictionary are not necessarily similar. I was wondering how to sum the values assigned for each key in all dictionaries:</p>
<p>For instance for <code>key4: (val43 + val44 + val45)</code> or for <code>key3: (val31 + val32 + val34)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Starting with this - </p>
<pre><code>A = [{1 : 5, 2  : 3, 3 : 4}, {1 : 1, 5: 10, 3: 2}, {100 : 2}]
</code></pre>
<p>Here's one way of getting what you want, using the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> data structure - </p>
<ol>
<li>Convert each dict to a <code>Counter</code> using <code>map</code></li>
<li>Sum each <code>Counter</code> object with <code>sum</code></li>
</ol>
<p></p>
<pre><code>from collections import Counter
r = sum(map(Counter, A), Counter())
</code></pre>
<p></p>
<pre><code>r
Counter({1: 6, 2: 3, 3: 6, 5: 10, 100: 2})
</code></pre>
<p>The great thing about <code>Counter</code>s is that you can add them up, quite nicely.  The second argument to <code>sum</code> is the start of the "sum". If you want a dictionary back (instead of a <code>Counter</code>), call <code>dict(r)</code>.</p>
<p>Note that this solution works when your dicts only have keys with numeric values.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may also use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> to get the count of all the values corresponding to each key. All you need to do is to iterate each element and sum the values to the <code>defaultdict</code>. For example:</p>
<pre><code>my_list = [
     {'key1': 2, 'key2': 7},
     {'key2': 6, 'key3': 8},
     {'key1': 7, 'key4':9} 
 ]

from collections import defaultdict
my_counter = defaultdict(int)

for my_dict in my_list:                 # iterate your `list`
    for key, value in my_dict.items():  # iterate "key", "value" pairs of your `dict`
        my_counter[key] += value        # sum the "value" and add to the dict
</code></pre>
<p>This will return you the <code>dict</code> as:</p>
<pre><code>&gt;&gt;&gt; my_counter
defaultdict(&lt;type 'int'&gt;, {'key3': 8, 'key2': 13, 'key1': 9, 'key4': 9})
</code></pre>
</div>
<span class="comment-copy"><code>sum(d.get(mykey, 0) for d in mylist)</code>?</span>
<span class="comment-copy">If your question was answered, please <a href="https://stackoverflow.com/help/someone-answers">vote on, and accept the most helpful one</a>. You can accept an answer by clicking the grey check next to it to toggle it green. You can only accept one.</span>
<span class="comment-copy">(Welcome to SO!) Well, it would have been more useful if you gave it a try and presented how far you got "on your own".</span>
<span class="comment-copy">Many thanks for your responses. In following, I would be so thankful if you could kindly explain how to calculate the standard error of mean (sem) here.  Cheers,  Alex</span>
<span class="comment-copy">@user9185533 That's not how this site works. If you have a different question, you're supposed to open a new question. Can you please do that? Also, accept an answer if <i>this</i> question was solved.</span>
<span class="comment-copy">I am sorry for the inconvenient. I am going to post my question as a new one!</span>
<span class="comment-copy">Many thanks for your responses.  In following, I would be so thankful if you could kindly explain how to calculate the standard error of mean (sem) here.  Cheers, Alex</span>
