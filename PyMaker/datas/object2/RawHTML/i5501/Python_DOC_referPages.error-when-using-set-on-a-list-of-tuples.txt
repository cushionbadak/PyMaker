<div class="post-text" itemprop="text">
<p>I have a matrix of data.I don't understand why do i get the unhashable type error when performing set on the list of tuples:</p>
<pre><code>pairs=list(set(map(lambda line:{line[Column.TO],line[Column.FROM]},self.DataMatrix)))
</code></pre>
<p>line[Column.TO] is a string and DataMatrix is a list of lists</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not using <code>set()</code> on a list of tuples, you are using <code>set()</code> on a list of <code>set()</code>s. Change your brackets <code>{}</code> to parentheses <code>()</code>:</p>
<pre><code>pairs=list(set(map(lambda line:(line[Column.TO],line[Column.FROM]),self.DataMatrix)))
</code></pre>
<p>For example, the following demonstrates how to find "the unique pairs generated from the map function".</p>
<pre><code>In [23]: self.DataMatrix = [[1,2,5],[3,4,5],[1,2,6]]

In [24]: Column.TO
Out[24]: 0

In [25]: Column.FROM
Out[25]: 1

In [26]: pairs=list(set(map(lambda line:(line[Column.TO],line[Column.FROM]),self.DataMatrix)))

In [27]: pairs
Out[27]: [(1, 2), (3, 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Being unhashable, <code>sets</code> cannot be members of a <code>set</code>. And while you are at it turning those sets into <code>tuples</code> or <code>frozensets</code>, pls get rid of that <code>map</code> with <code>lambda</code> in favor of a generator expression:</p>
<pre><code>pairs = list(set((line[Column.TO],line[Column.FROM]) for line in self.DataMatrix))
</code></pre>
</div>
<span class="comment-copy">You're not using <code>set()</code> on a list of tuples... check the result of your <code>map()</code> statement.</span>
<span class="comment-copy"><code>set</code> is unhashable. Change it to <code>tuple</code>: Change <code>{line[Column.TO],line[Column.FROM]}</code> to <code>(line[Column.TO], line[Column.FROM])</code> and (eventually) do some additional filtering later.</span>
<span class="comment-copy">I need the unique pairs generated from the map function</span>
<span class="comment-copy">@CristiFati OP could use <a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow noreferrer"><b><code>frozenset</code></b></a> instead</span>
<span class="comment-copy">Good one @PeterWood !</span>
<span class="comment-copy">I wanted to create anonymous objects that's why i thought { } can be used.</span>
<span class="comment-copy">I see. <code>{1,2}</code> creates a <code>set</code>. <code>{1:2}</code> creates a <code>dict</code>. <code>(1,2)</code> (or <code>1,2</code> in some cases) creates a tuple. <code>[1,2]</code> creates a <code>list</code>. Confusingly, <code>{}</code> creates a <code>dict</code>. Hope this helps.</span>
<span class="comment-copy">So basically when i am applying the map construct it generates a set?</span>
<span class="comment-copy">@user1913744 No, when you apply the brackets <code>{}</code> it generates a set. I.e. your <code>lambda</code> expression returns a set, so your <code>map()</code> function returns a list of sets.</span>
<span class="comment-copy">Oh....i understand now.It wasn't my intention to create a set in the map function.I just wanted to apply the map with a custom predicate for the data and get the unique's after.</span>
<span class="comment-copy">A minor correction to my previous statement: <code>map()</code> doesn't return a <code>list</code> in Python3. It returns an iterator that can generate such a list. But that doesn't change the point I was making.</span>
