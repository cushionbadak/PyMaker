<div class="post-text" itemprop="text">
<p>I wrote a python script that backs up my files while I'm sleeping at night. The program is designed to run whenever the computer is on and to automatically shut down the computer after the backups are done. My code looks like this:</p>
<pre><code>from datetime import datetime
from os import system
from backup import backup

while True:
    today = datetime.now()

    # Perform backups on Monday at 3:00am.
    if today.weekday() == 0 and today.hour == 3:
        print('Starting backups...')

        # Perform backups.
        backup("C:\\Users\\Jeff Moorhead\\Desktop", "E:\\")
        backup("C:\\Users\\Jeff Moorhead\\Desktop", "F:\\")
        backup("C:\\Users\\Jeff Moorhead\\OneDrive\\Documents", "E:\\")
        backup("C:\\Users\\Jeff Moorhead\\OneDrive\\Documents", "F:\\")

        # Shutdown computer after backups finish.
        system('shutdown /s /t 10')
        break

    else:
        del today
        continue
</code></pre>
<p>The backup function is from another file that I wrote to perform more customized backups on a case by by case basis. This code all works perfectly fine, but I'm wondering if the del statement </p>
<pre><code>del today
</code></pre>
<p>is really necessary. I put it in thinking that it would prevent my memory from getting filled up by thousands of datetime objects, but then I read that Python uses garbage collection, similar to Java. Further, does the <code>today</code>variable automatically get replaced with each pass through the while loop? I know that the program works as intended with the del statement, but if it is unnecessary, then I would like to get rid of it if only for the sake of brevity! What are it's actual effects on memory?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I put it in thinking that it would prevent my memory from getting filled up by thousands of datetime objects</p>
</blockquote>
<p>The <code>del</code> statement is not necessary, you may simply remove that block.  Python will free the space from those local variables automatically.</p>
<blockquote>
<p>... but then I read that Python uses garbage collection, similar to Java. </p>
</blockquote>
<p>The above statement is misguided: this has nothing to do with the garbage collector, which exists to break up circular references.  In CPython, the memory is released when the object reference count decreases to zero, and that would occur even if the garbage collector is disabled.  </p>
<blockquote>
<p>Further, does the today variable automatically get replaced with each pass through the while loop? I know that the program works as intended with the del statement, but if it is unnecessary, then I would like to get rid of it if only for the sake of brevity! What are it's actual effects on memory?</p>
</blockquote>
<p>A new datetime object is created on each iteration of the loop.
The <code>today</code> name in scope will be rebound to the newly created datetime instance.  The old datetime instance will be deleted because no reference exists on it (since the only existing reference is lost once you rebound the name <code>today</code> to a different object).  Once again, I stress that this is just ref-counting and has nothing to do with <a href="https://docs.python.org/3/library/gc.html" rel="nofollow noreferrer"><code>gc</code></a>.</p>
<p>On an unrelated note, your program will busy-loop and consume an entire CPU with this while loop.  You should consider adding a call to <code>time.sleep</code> into the loop so the process will remain mostly idle. Or, better yet, schedule the task to run periodically using <a href="https://en.wikipedia.org/wiki/Cron" rel="nofollow noreferrer"><code>cron</code></a>.</p>
</div>
<span class="comment-copy">No, it doesn't. It only decrements an object's reference count. If you want to free up memory, see <a href="https://stackoverflow.com/questions/1316767/how-can-i-explicitly-free-memory-in-python" title="how can i explicitly free memory in python">stackoverflow.com/questions/1316767/…</a></span>
<span class="comment-copy">Based on that post, it seems the garbage collector will handle it for me automatically. Since I’m not dealing with massive data, I should have no problem. Thanks!</span>
<span class="comment-copy">you won't hog a bunch of memory but you will be hogging a lot of CPU, checking the time as frequently as possible when you only actually do something on a weekly basis, you could probably just calculate the time until you want to perform the backup then do <code>time.sleep</code> until then.</span>
<span class="comment-copy">Good point, I added a call to time.sleep() to check the time every hour. I don’t want to add a days long sleep because I tend to turn my laptop off most nights so the computer could miss the backup time if it’s sleeping during the 3:00 hour Monday.</span>
<span class="comment-copy">“The old datetime instance will be deleted...” is precisely what I was looking for. Thank you!</span>
