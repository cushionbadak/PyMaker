<div class="post-text" itemprop="text">
<p>Is there a way to copy an <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer"><code>array.array</code></a> (not a <code>list</code>) in Python, besides just creating a new one and copying values, or using <code>.to_something</code> and <code>.from_something</code>? I can't seem to find anything in the documentation. If not, is there a similar builtin datatype that can do this?</p>
<p>I am working on a high-performance module, so the faster the answer, the better.</p>
<p>My current solution is just using <code>.to_bytes</code> and <code>.from_bytes</code>, which is about 1.8 times faster from my tests.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure what your <code>array.array</code> includes, but using a sample:</p>
<pre><code>&gt;&gt;&gt; import array
&gt;&gt;&gt; a = array.array('i', [1, 2, 3] * 1000)
array('i', [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,
2, 3, 1, 2, 3, 1, 2, 3, 1, 2, ... ])
</code></pre>
<h1>Some set up:</h1>
<pre><code>&gt;&gt;&gt; from copy import deepcopy
&gt;&gt;&gt; import numpy as np
</code></pre>
<h1>Timing various methods</h1>
<h3>(using the %timeit magic in a Jupyter Notebook):</h3>
<p><strong>Slicing</strong></p>
<pre><code>In [1]: %timeit cp = a[:]

418 ns ± 4.89 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
<p><strong>Deepcopy</strong></p>
<pre><code>In [2]: %timeit cp = deepcopy(a)

1.83 µs ± 34 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
<p><strong>numpy copy ... NOTE: This produces a numpy array, not an array.array</strong></p>
<pre><code>In [3]: %timeit cp = np.copy(a)

1.87 µs ± 62.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
<p><strong>List Comprehension and array.array conversion</strong></p>
<pre><code>In [4]: %timeit cp = array.array('i', [item for item in a])

147 µs ± 5.39 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<p><strong>numpy copy and array.array conversion</strong></p>
<pre><code>In [5]: %timeit cp = array.array('i', np.copy(a))

310 µs ± 2.25 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<p><strong>Copying to an existing array</strong></p>
<pre><code>In[6]: pre = array.array('i', [0, 0, 0] * 1000)
In[7]: %timeit for i, element in enumerate(a): pre[i] = a[i]

344 µs ± 7.83 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>copy.copy(arr)</code> would work fine.</p>
</div>
<span class="comment-copy">You can use deepcopy and list - <a href="https://stackoverflow.com/questions/17873384/deep-copy-a-list-in-python" title="deep copy a list in python">stackoverflow.com/questions/17873384/deep-copy-a-list-in-python</a></span>
<span class="comment-copy">Is this what you want? <a href="https://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list" title="how to clone or copy a list">stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list</a></span>
<span class="comment-copy">How about <code>a[:]</code>?</span>
<span class="comment-copy">@Stefan Tested that, it's about the same as my current way, but sometimes slower. And yeah, idk why everyone thinks I was referring to <code>list</code>s.</span>
<span class="comment-copy">Can you show your tests?</span>
<span class="comment-copy">The one I mentioned I found to be faster is <code>a * 1</code>. I suspect under the hood it's equivalent to <code>a[:]</code> but it gets under the hood more quickly (as in, it reaches the copying code more quickly: <a href="https://ideone.com/KLb3wl" rel="nofollow noreferrer">ideone.com/KLb3wl</a>). Only noticeable with small arrays, though.</span>
<span class="comment-copy">If I'm not wrong, <code>array.array</code> can't store mutable items. So there's no point in using <code>copy.deepcopy</code> instead of <code>copy.copy</code>.</span>
<span class="comment-copy">This does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post. - <a href="/review/low-quality-posts/18429898">From Review</a></span>
<span class="comment-copy">@31piy How exactly does it not answer the question? Rather looks like you didn't read the question. And how does this "critique or request clarification"?</span>
