<div class="post-text" itemprop="text">
<p>How to rewrite the Django model save method? </p>
<pre><code>class Message(models.Model):
    """
    message
    """
    message_num = models.CharField(default=getMessageNum, max_length=16)  

    title = models.CharField(max_length=64)
    content = models.CharField(max_length=1024)

    def save(self, force_insert=False, force_update=False, using=None,
         update_fields=None):
        # I want send email there
        pass
</code></pre>
<p>I mean, in the Django model, if I create instance success, I want to call a function, such as send a email in the function. </p>
<p>I find in the Django model have a <code>save</code> method. I am not sure whether should write other code, because there are so many params.</p>
<p>I mean whether I only should care about my send email logic? </p>
</div>
<div class="post-text" itemprop="text">
<p>When you override the <code>save</code> method, you still have to make sure that the it actually saves the instance. You can do that by simply calling the parent class' <code>save</code> via <code>super</code>:</p>
<pre><code>class Message(models.Model): 
    # ...
    def save(self, *args, **kwargs):
        # this will take care of the saving
        super(Message, self).save(*args, **kwargs)
        # do email stuff  
        # better handle ecxeptions well or the saving might be rolled back
</code></pre>
<p>You can also connect the mail sending to the <a href="https://docs.djangoproject.com/en/2.0/ref/signals/#post-save" rel="nofollow noreferrer"><code>post_save</code></a> (or <a href="https://docs.djangoproject.com/en/2.0/ref/signals/#pre-save" rel="nofollow noreferrer"><code>pre_save</code></a>, depending on your logic) signal. Whether you want to separate one orm the other in that way depends on how closely the two actions are linked and a bit on your taste.</p>
<p>Overriding <code>save</code> gives you the option to intervene in the saving process, e.g. you can change the value of fields based on whether the mail sending was successful or not save the instance at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution to what you want to do is to use <a href="https://docs.djangoproject.com/en/2.0/topics/signals/" rel="nofollow noreferrer">Django Signals</a>. By using Signals you can hook code to when a model is created and saved without having to rewrite the save method, that keep the separation of code and logic in a much nicer way, obviously the model does not need to know about the emails for example.</p>
<p>An example of how to use Signals would be to simply do the following:</p>
<pre class="lang-py prettyprint-override"><code>from django.db.models.signals import pre_save
from django.dispatch import receiver
from myapp.models import MyModel

@receiver(pre_save, sender=MyModel)
def my_handler(sender, **kwargs):
    # Code to execute whenever MyModel is saved...
</code></pre>
<p>If you still want to override the <code>save()</code> method you can use the Python <code>super()</code> method to do so (<a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">docs</a>).</p>
<pre><code>class MyModel(models.Model):
    def save(self, *args, **kwargs):
        # This will call the parent method that you are overriding
        # so it will save your instance with the default behavior.
        super(MyModel, self).save(*args, **kwargs)

        # Then we add whatever extra code we want, e.g. send email...
        Messenger.send_email()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to activate signal once your message is saved. That means, when your message is saved, django will issue signal as follows: </p>
<pre><code>from django.db.models.signals import post_save
from django.dispatch import receiver

class Message(models.Model):
    # fields...

# method for sending email
@receiver(post_save, sender=Message, dispatch_uid="send_email")
def send_email(sender, instance, **kwargs):
    # your email send logic here..
</code></pre>
<p>You can put your signals in <code>signals.py</code> file inside your app folder and make sure to import that in your application config file as follows:</p>
<pre><code>message/apps.py

from django.apps import AppConfig

class MyAppConfig(AppConfig):
    name = 'message'

    def ready(self):
        import message.signals
</code></pre>
<p>And update init file as follows: </p>
<pre><code>message/__init__.py

default_app_config = 'message.apps.MyAppConfig'
</code></pre>
</div>
<span class="comment-copy">The signals are the way to go in this case. This should be the accepted answer.</span>
<span class="comment-copy">@MarcusLind Do you mean create a single py file to write <code>Signals </code>? and the <code>my_handler</code> method will execute automatically when saved the instance?</span>
<span class="comment-copy">@1243916142 Well you can keep the signal method wherever you want. It could be in a separate file or within the model itself. Depends what makes sense in your use case. But yes, the point is that the method will execute whenever you save the instance. Note that there are many types of signals, like <code>post_save</code> and <code>pre_save</code> that execute after, or before a save.</span>
<span class="comment-copy">@MarcusLind thank you, bro. how about the <code>dispatch_uid</code>? can I set the <code>dispatch_uid</code> same when other place I want to write a signal ?</span>
<span class="comment-copy">I see you put the receivered method in the Model file, can it be put to a single .py file ? does it need additional operate if I put the method to a single file?</span>
<span class="comment-copy">Yes. You can put that on different file. Just need to import your Model (Message) and post_save signal in that file.</span>
<span class="comment-copy">@1243916142 I have made the changes in the code above for your reference.</span>
