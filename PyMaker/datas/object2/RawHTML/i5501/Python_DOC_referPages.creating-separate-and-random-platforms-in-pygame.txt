<div class="post-text" itemprop="text">
<p>Im trying to create more platforms, I was wondering whats the correct approach to do this whether to create a for loop or add more stuff to the code like change the numbers in the Platform bracket, also when this code is played the platforms arent seperate how would i go about separating them? so that you see the platforms individually and in random positions something like this <a href="https://forums.crackberry.com/blackberry-10-games-f275/fall-down-game-906376/" rel="nofollow noreferrer">https://forums.crackberry.com/blackberry-10-games-f275/fall-down-game-906376/</a></p>
<pre><code>import pygame


pygame.init()

clock = pygame.time.Clock()
FPS = 60
DS = pygame.display.set_mode((800, 600))
sprite_image = pygame.Surface((50, 50), pygame.SRCALPHA)
pygame.draw.circle(sprite_image, (90, 100, 200), [25, 25], 25)
W, H = DS.get_size()


class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, w, h):
        super(Platform, self).__init__()
        self.image = pygame.Surface((w, h))
        self.image.fill((90, 90, 120))
        self.rect = self.image.get_rect(topleft=(x, y))


class Sprite(pygame.sprite.Sprite):
    def __init__(self, pos):
        super(Sprite, self).__init__()
        self.image = sprite_image
        self.rect = self.image.get_rect()
        self.rect.center = pos
        self._vx = 0
        self._vy = 0
        self._spritex = pos[0]
        self._spritey = pos[1]
        self.level = None
        self._gravity = .9

    def update(self):
        # Adjust the x-position.
        self._spritex += self._vx
        self.rect.centerx = self._spritex  # And update the rect.

        block_hit_list = pygame.sprite.spritecollide(self, self.level, False)
        for block in block_hit_list:
            if self._vx &gt; 0:
                self.rect.right = block.rect.left
            elif self._vx &lt; 0:
                # Otherwise if we are moving left, do the opposite.
                self.rect.left = block.rect.right
            self._spritex = self.rect.centerx  # Update the position.

        # Adjust the y-position.
        self._vy += self._gravity  # Accelerate downwards.
        self._spritey += self._vy
        self.rect.centery = self._spritey  # And update the rect.

        # Check and see if we hit anything
        block_hit_list = pygame.sprite.spritecollide(self, self.level, False)
        for block in block_hit_list:
            # Reset our position based on the top/bottom of the object.
            if self._vy &gt; 0:
                self.rect.bottom = block.rect.top
            elif self._vy &lt; 0:
                self.rect.top = block.rect.bottom
            self._spritey = self.rect.centery  # Update the position.
            # Stop our vertical movement
            self._vy = 0

    def jump(self):
        self.rect.y += 2
        platform_hit_list = pygame.sprite.spritecollide(self, self.level, False)
        self.rect.y -= 2

        # If it is ok to jump, set our speed upwards
        if len(platform_hit_list) &gt; 0 or self.rect.bottom &gt;= H:
            self._vy = -17

    def go_left(self):
        """ Called when the user hits the left arrow. """
        self._vx = -3

    def go_right(self):
        """ Called when the user hits the right arrow. """
        self._vx = 3

    def stop(self):
        """ Called when the user lets off the keyboard. """
        self._vx = 0


sprite = Sprite([60, 60])

active_sprite_list = pygame.sprite.Group(sprite)
sprite.level = pygame.sprite.Group(
    Platform(20, 400, 200, 20), Platform(220, 300, 20, 120),
    Platform(220, 300, 300, 20),  Platform(220, 300, 300, 20),
    Platform(220, 300, 300, 20),  Platform(220, 300, 300, 20))
active_sprite_list.add(sprite.level)

done = False
while not done:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                sprite.go_left()
            if event.key == pygame.K_RIGHT:
                sprite.go_right()
            if event.key == pygame.K_UP:
                sprite.jump()
        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT and sprite._vx &lt; 0:
                sprite.stop()
            if event.key == pygame.K_RIGHT and sprite._vx &gt; 0:
                sprite.stop()
    # If the player gets near the right side, shift the world left (-x)
    if sprite.rect.right &gt; W:
        sprite.rect.right = W
        # If the player gets near the left side, shift the world right (+x)
    if sprite.rect.left &lt; 0:
        sprite.rect.left = 0

    active_sprite_list.update()

    DS.fill((50, 50, 50))
    # Blit the sprite's image at the sprite's rect.topleft position.
    active_sprite_list.draw(DS)
    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to change the coordinates of the platforms if you want to place them elsewhere. The first two arguments are the <code>x</code> and <code>y</code> (top left) coordinates and the third and fourth are the width and height of the platform: <code>Platform(x, y, width, height)</code>.</p>
<p>If you want to use a for loop to create the platforms, you could create a list of rects (or rect style tuples), unpack the values, use them to create new platform instances and add the instances to the sprite groups.</p>
<pre><code>active_sprite_list = pygame.sprite.Group(sprite)
sprite.level = pygame.sprite.Group()

# A list with rect style tuples (x, y, width, height).
rects = [
    (20, 450, 200, 20), (220, 300, 20, 120), (300, 240, 300, 20),
    (20, 380, 200, 20), (220, 300, 150, 20), (520, 200, 300, 20),
    ]

# You can unpack the rect tuples directly in the head of the for loop.
for x, y, width, height in rects:
    # Create a new platform instance and pass the coords, width and height.
    platform = Platform(x, y, width, height)
    # Add the new platform instance to the sprite groups.
    sprite.level.add(platform)
    active_sprite_list.add(platform)
</code></pre>
<p>To pass random positions, just call <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer"><code>random.randrange</code></a> instead of passing the <code>x</code> and <code>y</code> variables.</p>
<pre><code>platform = Platform(random.randrange(800), random.randrange(600), width, height)
</code></pre>
</div>
<span class="comment-copy">what would be the correct syntax for the random.randrange using this code because when i try it line 103, in &lt;module&gt;     random.randrange(250,600[500]) NameError: name 'random' is not defined what should be done to correct this error</span>
<span class="comment-copy">I've edited the post (the last line). You also have to import the random module: <code>import random</code>.</span>
