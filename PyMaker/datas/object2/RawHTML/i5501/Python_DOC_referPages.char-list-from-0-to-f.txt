<div class="post-text" itemprop="text">
<p>I write a python script, which needs a list of all hexadecimal characters.</p>
<p>Is it a good idea to do <code>list(string.printable[:16])</code> to get <code>['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way would be a list comprehension of all numbers from 0 to 15 formatted as hex:</p>
<pre><code>["{:x}".format(x) for x in range(0,16)]
</code></pre>
<p>User GarbageCollector suggested a nice alternative in comments, which must be adapted to remove the redundant, uppercased chars:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.hexdigits
'0123456789abcdefABCDEF'
&gt;&gt;&gt; string.hexdigits[:16]
'0123456789abcdef'
</code></pre>
<p>to get a list:</p>
<pre><code>&gt;&gt;&gt; list(string.hexdigits[:16])
</code></pre>
<p>the fact that the order of the characters remains the same in <code>string.hexdigits</code> in future python version is however unknown. Still nice to know that <code>string</code> has some many useful characters groups.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about doing <code>list('0123456789abcdef')</code> to make it explicit?</p>
<p>If you don't want to spell it out, <code>[f'{i:x}' for i in range(16)]</code> should also work.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer to your question is: it is not a particularly good idea.</p>
<p>From the <a href="https://docs.python.org/3/library/string.html" rel="nofollow noreferrer">Python docs</a>:</p>
<blockquote>
<p><code>string.printable</code></p>
<p>String of ASCII characters which are considered printable. This is a combination of <a href="https://docs.python.org/3/library/string.html#string.digits" rel="nofollow noreferrer"><code>digits</code></a>, <a href="https://docs.python.org/3/library/string.html#string.ascii_letters" rel="nofollow noreferrer"><code>ascii_letters</code></a>, <a href="https://docs.python.org/3/library/string.html#string.punctuation" rel="nofollow noreferrer"><code>punctuation</code></a>, and <a href="https://docs.python.org/3/library/string.html#string.whitespace" rel="nofollow noreferrer"><code>whitespace</code></a>.</p>
</blockquote>
<p>An implementation of Python could follow this definition, but choose to provide the characters in a different order, which could break your code.</p>
<p>Even if the order were defined, it would not be obvious without being familiar with the definition, what result the code would produce.</p>
<p>There is a <a href="https://docs.python.org/3/library/string.html#string.hexdigits" rel="nofollow noreferrer"><code>string.hexdigits</code></a> constant, whose value is strictly defined as <code>'0123456789abcdefABCDEF'</code>, so taking the first 16 digits of that would definitely be a better choice, but I would still say that just giving the exact string itself would be clearer.</p>
<p>Also note that <code>'01234567890abcdef'</code> is actually two characters shorter than <code>string.hexdigits[:16]</code> anyway.</p>
</div>
<span class="comment-copy">I don't see anything wrong with doing that.</span>
<span class="comment-copy">How about <a href="https://docs.python.org/3/library/string.html#string.hexdigits" rel="nofollow noreferrer">Hex digits</a></span>
<span class="comment-copy">@GarbageCollector nice one, but it prints <code>'0123456789abcdefABCDEF'</code>. It's done for testing, not generating lists. of course you could slice it.</span>
<span class="comment-copy">@PM2Ring rather: <code>string.hexdigits[:16]</code></span>
<span class="comment-copy">Wow, I didn't see string.hexdigits. It is more understandable.</span>
<span class="comment-copy">Also @GarbageCollector should get credits :/</span>
<span class="comment-copy">yes, why not. GarbageCollector should have answered as well.</span>
<span class="comment-copy"><code>[format(i, 'x') for i in range(16)]</code> is better than slicing the value returned by <code>hex</code>. Or in Python 3.6+, <code>[f'{i:x}' for i in range(16)]</code></span>
<span class="comment-copy">I guess so. I still think the first solution is the best, as per PEP-10, but I'll edit in your suggestion.</span>
<span class="comment-copy">Perfect, that's why I asked</span>
