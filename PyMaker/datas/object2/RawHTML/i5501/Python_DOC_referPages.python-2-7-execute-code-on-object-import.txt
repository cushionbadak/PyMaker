<div class="post-text" itemprop="text">
<p>I'm trying to make a deprecation system that allows code to run transparently for regular users, but flag deprecated objects in developer mode.</p>
<p>One issue that I'm having is that I can import a deprecated object into another module even if I'm in developer mode. This means that I'm missing places where the deprecated object is used.</p>
<p>For example in module1.py:</p>
<pre><code>class MyObject(object):
    pass
MyObject = MyObject if not dev_mode() else DeprecatedObject
</code></pre>
<p>Then in module2.py:</p>
<pre><code>from module1 import MyObject
</code></pre>
<p>I already have DeprecatedObject set up so that any interaction with it raises a DeprecationWarning - is there any way that I can make it error on import? ie. even importing module2.py would raise an exception.</p>
<p>I'm imagining something like:</p>
<pre><code>import warnings

class DeprecatedObject(object):
    ...
    def __onimport__(self):
        warnings.warn("deprecated", DeprecationWarning)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The module level <code>__getattr__</code> feature allows, among other things, for module level names to undergo a correct deprecation process at import time.  This feature is coming in Python 3.7, see <a href="https://www.python.org/dev/peps/pep-0562/" rel="nofollow noreferrer">PEP 562</a> for details (since you've tagged with Python 2.7, it can't help you, but I mention it for the benefit of future readers).  </p>
<p>On Python 2.7 you have two inferior options:</p>
<ul>
<li>Trigger deprecation warning in the object <code>__init__</code>.  </li>
<li>Use <a href="https://mail.python.org/pipermail/python-ideas/2012-May/014969.html" rel="nofollow noreferrer">Guido's hack</a> to replace the module with a patched version of itself after import.  Wrapping a proxy object around the module allows you to control name resolution.  </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>First off, I recommend looking into the built-in <a href="https://docs.python.org/2.7/library/warnings.html" rel="nofollow noreferrer"><code>warnings</code></a> module. It has tools made specifically for this type of thing. Having a non-fatal warning in place makes more sense than raising an exception.</p>
<p>Now, for your case, one possible course of action would be to "replace" the deprecated class with a function. This means renaming the class to something else, and having a function with the original name which checks whether or not developer mode is enabled and acts accordingly. The result would be something like:</p>
<pre><code>class MyDeprecatedClass:
    pass

def MyClass(*args, **kwargs):
    if dev_mode():
        raise DeprecationWarning
    else:
        return MyDeprecatedClass(*args, **kwargs)
</code></pre>
<p>Or, with warnings:</p>
<pre><code>def MyClass(*args, **kwargs):
    from warnings import warn
    if dev_mode():
        warn("Dont use this!!!!!!!!!")
    else:
        return MyDeprecatedClass(*args, **kwargs)
</code></pre>
<p>What this does is it checks whether or not developer mode is enabled, and only raises the exception (or warning) if it is. Otherwise, it passes all the arguments given to it to the constructor of the renamed class, meaning all old that relies on it will work fine. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your initial approach is almost exactly what I would advise, except that you allow for both types of objects to exist simultaneously. I would start with a full-blown <code>if</code> statement in your module, that only allows one of the objects to be defined at a time. Something more like:</p>
<pre><code>if dev_mode():
    class MyObject:
        # Define deprecated version here
        ...
else:
    class MyObject:
        # Define production version here
        ...
</code></pre>
<p>If the difference between the deprecated version and the non-deprecated version is something simple, e.g., that could be easily accomplished with a function or class decorator (like raising a warning), you could simplify the code above to something like:</p>
<pre><code>if dev_mode():
    def function_decorator(func, cls=None):
        # You can use the second argument when calling manually from a class decorator
        name = func.__name__ is cls is None else cls.__name__ + '.' + func.__name__
        warnings.warn("Importing deprecated function: {}".format(name))
        return func

    def class_decorator(cls):
        warnings.warn("Importing deprecated class: {}".format(cls.__name__))
        # Make additional modifications here (like adding function_decorator to all the class methods)
        return cls
else:
    def function_decorator(func):
        return func
    def class_decorator(cls):
        return cls

@class_decorator
class MyClass:
    pass
</code></pre>
<p>Using a module-level <code>if</code> to avoid multiple versions of the class floating around is the basic tool here. You can add any number of layers of complexity to your process. One technique I have seen for a similar purpose (where the particular version of a class depends on some import-time condition like OS), is to create a package named <code>module1</code>, and implement two different versions of your classes in different modules entirely. The package structure would look like this:</p>
<pre><code>module1/
|
+-- __init__.py
|
+-- _development.py
|
+-- _production.py
</code></pre>
<p>Both <code>_development</code> and <code>_production</code> define the same names, but different versions. The underscores in front of the module names imply that they should never be imported directly. You expose <code>module1</code> as a module rather than as a package using its <code>__init__</code> file, which would look something like this:</p>
<pre><code>__all__ = ['MyModule']

if dev_mode():
    from ._development import MyModule
else:
    from ._production import MyModule
</code></pre>
<p>If you have a lot of names, you can automate the public import using <code>__all__</code> in <code>__init__</code>:</p>
<pre><code>import importlib, sys

__all__ = ['MyClass']

self = sys.modules[__name__]
sub = importlib.import_module('_development' if dev_mode() else '_production')
for name in __all__:
    setattr(self, name, getattr(sub, name))
</code></pre>
<p>This form of separation allows you to test both the production and the dev versions without having two separate test flows. Your tests can import the private modules directly.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">An <code>__init__.py</code> file</a> might let you do what you want?</span>
<span class="comment-copy">Perhaps my own question; is it right to raise an <i>exception</i> on importing deprecated methods/objects/modules? Why do they still exist in that case?</span>
<span class="comment-copy">you can probably achieve this using class decorators:  <a href="https://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators/1594484#1594484" title="how to make a chain of function decorators">stackoverflow.com/questions/739654/â€¦</a> just have the decorator return the original class or return the DeprectedObject class depending on dev_mode , or just raise DeprecationWarning directly</span>
<span class="comment-copy">Is there any reason you don't just  use an <code>if</code> at the module level? <code>if dev_mode()</code>, define a whole bunch of classes and methods with the deprecated functionality. <code>else:</code> define pristine versions of the same.</span>
<span class="comment-copy">Any comment from downvoter?</span>
<span class="comment-copy">Upvote to fix the h a t e r s problem.</span>
<span class="comment-copy">@wim. I am bad at reading. Comment rescinded, upvote obtained.</span>
<span class="comment-copy">This breaks <code>isinstance</code>.</span>
<span class="comment-copy">It will also make correct testing almost impossible, because <code>dev_mode</code> gets called at import time when the test runner imports your code.</span>
<span class="comment-copy">Technically, you also don't fix the issue of having both classes floating around at the same time.</span>
<span class="comment-copy">As with the other answer, this requires two branches of testing (one for dev mode on and one for dev mode off) and a complicated setup of the test runner to avoid <code>dev_mode</code> being called at import time.  Not ideal.</span>
<span class="comment-copy">@wim. The package version allows for a single test flow if you import the "private" submodules. I should explicitly state that in the answer.</span>
<span class="comment-copy">Hmm, isn't this just moving code around?  The same module level logical branch is still there in <code>__init__.py</code>.  The long and short of it is the feature the OP needs simply doesn't exist in Python 2.7.  And it's a useful feature, hence the PEP's acceptance - deprecation of module-level names was actually one of the main motivations mentioned.</span>
<span class="comment-copy">@wim, not quite. You now have two private modules that you can test individually. Not a huge improvement, but it should make at least some of the testing easier.</span>
