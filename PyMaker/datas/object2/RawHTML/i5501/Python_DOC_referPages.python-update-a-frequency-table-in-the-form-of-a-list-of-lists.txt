<div class="post-text" itemprop="text">
<p>I have two lists of US state abbreviations (for example):</p>
<pre><code>s1=['CO','MA','IN','OH','MA','CA','OH','OH']
s2=['MA','FL','CA','GA','MA','OH']
</code></pre>
<p>What I want to end up with is this (basically an ordered frequency table):</p>
<pre><code>S=[['CA',2],['CO',1],['FL',1],['GA',1],['IN',1],['MA',4],['OH',4]]
</code></pre>
<p>The way I came up with was:</p>
<pre><code>s3=s1+s2
S=[[x,s3.count(x)] for x in set(s3)]
</code></pre>
<p>This works great - though, tbh, I don't know that this is very memory efficient.</p>
<p>BUT... there is a catch.  </p>
<pre><code>s1+s2 
</code></pre>
<p>...is too big to hold in memory, so what I'm doing is appending to s1 until it reaches a length of 10K (yes, resources are THAT limited), then summarizing it (using the list comprehension step above), deleting the contents of s1, and re-filling s1 with the next chunk of data (only represented as 's2' above for purpose of demonstration).  ...and so on through the loop until it reaches the end of the data.  </p>
<p>So with each iteration of the loop, I want to sum the 'base' list of lists 'S' with the current iteration's list of lists 's'.  My question is, essentially, how do I add these:
 (the current master data):</p>
<pre><code>S=[['CA',1],['CO',1],['IN',1],['MA',2],['OH',3]]  
</code></pre>
<p>(the new data):</p>
<pre><code>s=[['CA',1],['FL',1],['GA',1],['MA',2],['OH',1]]
</code></pre>
<p>...to get (the new master data):</p>
<pre><code>S=[['CA',2],['CO',1],['FL',1],['GA',1],['IN',1],['MA',4],['OH',4]]
</code></pre>
<p>...in some sort of reasonably efficient way.  If this is better to do with dictionaries or something else, I am fine with that.  What I can't do, unfortunately is make use of <em>ANY</em> remotely specialized Python module -- all I have to work with is the most stripped-down version of Python 2.6 imaginable in a closed-off, locked-down, resource-poor Linux environment (hazards of the job).  Any help is greatly appreciated!!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.chain</code> to chain two iterators efficiently:</p>
<pre><code>import itertools
import collections

counts = collections.Counter()

for val in itertools.chain(s1, s2): # memory efficient
    counts[val] += 1
</code></pre>
<p>A <code>collections.Counter</code> object is a <code>dict</code> specialized for counting... if you know how to use a <code>dict</code> you can use a <code>collections.Counter</code>. However, it allows you to write the above more succinctly as:</p>
<pre><code>counts = collections.Counter(itertools.chain(s1, s2))
</code></pre>
<p>Also note, the following construction:</p>
<pre><code>S=[[x,s3.count(x)] for x in set(s3)]
</code></pre>
<p>Happens to also be very time inefficient, since you are calling <code>s3.count</code> in a loop. Although, this might not be too bad if <code>len(set(s3)) &lt;&lt; len(s3)</code></p>
<p>Note, you can do the chaining "manually" by doing something like:</p>
<pre><code>it1 = iter(s1)
it2 = iter(s2)

for val in it1:
    ...

for val in it2:
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can run <a href="https://docs.python.org/3/library/collections.html#collections.Counter.update" rel="nofollow noreferrer"><code>Counter.update</code></a> as many times as you like, cutting your data to fit in memory / streaming them as you like.</p>
<pre><code>import collections

counter = collections.Counter()

counter.update(['foo', 'bar'])
assert counter['foo'] == counter['bar'] == 1

counter.update(['foo', 'bar', 'foo'])
assert counter['foo'] == 3
assert counter['bar'] == 2

assert sorted(counter.items(), key=lambda rec: -rec[1]) == [('foo', 3), ('bar', 2)]
</code></pre>
<p>The last line uses negated count as the sorting key to make the higher counts come first.</p>
<p>If with that your <em>count</em> structure does not fit in memory, you need a (disk-based) database, such as Postgres, or likely just a machine with more memory and a more efficient key-value store, such as Redis.</p>
</div>
<span class="comment-copy">Doesn't the loop defeat the purpose of the <code>Counter</code>? <code>counts = collections.Counter(itertools.chain(s1, s2))</code> should be better.</span>
<span class="comment-copy">@schwobaseggl yeah, originally I was using an <code>OrderedDict</code> since I thought order might matter, then changed to <code>Counter</code> when I re-read op and it said "dict is fine". I'm not sure it "defeats the purpose" but it definitely isn't as straightforward.</span>
<span class="comment-copy">@juanpa.arrivillaga Thanks so much - this worked perfectly!  I actually ended up doing it in the loop as in your first example because I need to keep appending to the Counter() object (every time len(s) gets to 10K).  And - actually I did need the result sorted - so after the loop I just converted to a sorted list (tuple?) using: freqs=sorted(counts.items())   -- thanks to you both!</span>
<span class="comment-copy">Thanks @9000 -- I'm going to play with this solution too - always can use more practice with dictionaries....</span>
