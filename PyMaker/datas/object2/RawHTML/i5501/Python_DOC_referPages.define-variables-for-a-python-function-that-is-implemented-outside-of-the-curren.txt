<div class="post-text" itemprop="text">
<p>I was wondering why the following works: </p>
<pre><code>def wrapper():
    def wrap(p=10):
        def f():
            print(p)
        f()
    return wrap

f2 = wrapper()
f2()
</code></pre>
<p>But this doesn't:  </p>
<pre><code>def f():
    print(p)

def enhance(f):
    def wrap(p=10):
        f()
    return wrap

f2 = enhance(f)
f2() # NameError: name 'p' is not defined
</code></pre>
<p>Is there a way I can modify the second scenario so that variable <code>p</code> is defined? I was playing around with function decorators but couldn't figure it out how to expose the variables to the function I'm passing into the decorators. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think I understand what you are really asking.  You're taking about decorators, not variable scope.  You say you can't figure out how to "expose the variables to the function I'm passing to the decorators." In your case 2, the function you are passing to <code>enhance</code> doesn't <em>have</em> any variables (arguments).  Suppose we give it an argument, like this:</p>
<pre><code>def f(p):
    print(p)

def enhance(f):
    def wrap(p=10):
        f(p)   # pass the argument to f
    return wrap

f2 = enhance(f)
f2()
</code></pre>
<p>Now you have a function, named <code>enhance</code>, which can be used as a decorator.  The function to be decorated takes one argument.  The decorator will replace this function with a new function, which can be called with one or zero arguments.  If called with no arguments it will get the value "10" as a default.</p>
<p>Decorators replace one function with another function.  In general it isn't the decorator's job to supply the arguments, except in the case of default arguments as you are trying to do.  The arguments come from the code that calls the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>because in example 2 youâ€™re referencing <code>p</code> that is not defined in one function and used as a parameter in the other function each of which is defined in their own scope.</p>
<p>in example 1 a function defined within the scope of another ie a nested function, has access to the outer functions scope (and therefore its variables)</p>
</div>
<span class="comment-copy">Oh, maybe I'm not using decorators the right way.... So I must change the function parameter for f() then (making it take in p)? Is there a way I don't have to do that, like recreating it in wrap() so as if it's defined inside the same scope as p, or something like that.</span>
<span class="comment-copy">just pass in an object then that has a variable p defined inside it</span>
<span class="comment-copy">Your function <code>f</code> has a statement <code>print(p)</code>, but what is p?  Somehow you must define p.  You can have a global variable named <code>p</code>, or you can pass an argument to the function and name the argument <code>p</code>.  You have to do one or the other.  For some reason you seem to want to avoid doing either, which makes no sense to me.  Can you explain why?</span>
<span class="comment-copy">So this would be scopes and namespaces.  <a href="https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example" rel="nofollow noreferrer">A good example to prove the point</a></span>
<span class="comment-copy">@DaLord yes exactly</span>
