<div class="post-text" itemprop="text">
<p>I am using the Requests library to decode a JSON response as follows:</p>
<p>Payload Being Decoded:</p>
<pre><code>{
    "objectOne": {
        "desc": "one"
    },
    "objectTwo": {
        "desc": "two"
    }
}
</code></pre>
<p>Code:</p>
<pre><code>from django.http import HttpResponse
import requests

class ApiService:
    @staticmethod
    def say_something(self):
        resp = requests.get('http://127.0.0.1:9501/polls/test/')

        return HttpResponse(resp.json())
</code></pre>
<p>Output:</p>
<p>objectOneobjectTwo</p>
<p>I followed the simple example from the official documentation:</p>
<p><a href="http://docs.python-requests.org/en/master/user/quickstart/#json-response-content" rel="nofollow noreferrer">JSON Response Content</a></p>
<p>In addition I wrapped the response in <code>[]</code> brackets to see if the response must be in a JSON array but it just returns an array with 'objectOneobjectTwo' as the 1st and only element. </p>
</div>
<div class="post-text" itemprop="text">
<p>You have misdiagnosed what is happening. <code>requests</code> is returning the correct dictionary. But you are passing a dictionary to <code>HttpResponse()</code>, without any further processing. However, <code>HttpResponse()</code> is <strong>not set up to handle dictionaries</strong>. </p>
<p>What happens is that <code>HttpResponse()</code> takes an <em>iterable</em> and will serve each value from the iterable as a string. In essence, you told Django to send <strong>only the keys</strong>, concatenated, to the client. From the <a href="https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpResponse.__init__" rel="nofollow noreferrer"><code>HttpResponse()</code> documentation</a>:</p>
<blockquote>
<p><strong><code>content</code></strong> should be an iterator or a string. If itâ€™s an iterator, it should return strings, and those strings will be joined together to form the content of the response.</p>
</blockquote>
<p>and from the <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer"><code>dict()</code> documentation</a>:</p>
<blockquote>
<p><strong><code>iter(d)</code></strong><br/>
  Return an iterator over the keys of the dictionary. This is a shortcut for <code>iter(d.keys())</code>.</p>
</blockquote>
<p>If you wanted to send JSON data, use a <a href="https://docs.djangoproject.com/en/stable/ref/request-response/#jsonresponse-objects" rel="nofollow noreferrer"><code>JSONResponse()</code> object</a> instead. It is set up to encode Python objects correctly:</p>
<pre><code>from django.http import JSONResponse
import requests


def say_something(request):
    resp = requests.get('http://127.0.0.1:9501/polls/test/')

    return JSONResponse(resp.json())
</code></pre>
<p>or don't bother with decoding and re-encoding, just pass on the original response data:</p>
<pre><code>from django.http import HttpResponse
import requests


def say_something(request):
    resp = requests.get('http://127.0.0.1:9501/polls/test/')

    return HttpResponse(resp.text, resp.headers['content-type'])
</code></pre>
<p>Note: I removed the class and <code>staticmethod</code> decorator; there is little point in wrapping static view functions in a class when no state is shared. Use modules to create namespaces instead. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your data is a JSON object, which is parsed into a Python dictionary. HttpResponse expects an iterable, which it iterates through when returning the response upstream; usually you pass a string (ie the result of rendering a template), but here you pass a dictionary. Iterating through a dictionary gives the keys only. </p>
<p>If you want to show the full output, convert to a string first by passing <code>str(response.json())</code> - which of course is pointless since it will just be the same as the raw response.</p>
</div>
<span class="comment-copy">@Rawing: the example is there, and it'll produce the wrong output. But that's because the OP has misunderstood Django, and blames <code>requests</code>.</span>
<span class="comment-copy">Side note: a <code>staticmethod()</code> doesn't take <code>self</code> as an argument. The actual object passed in is the Django <code>request</code> argument.</span>
