<div class="post-text" itemprop="text">
<p>Reading about Python types the description <code>string-like</code> or <code>byte-like</code> captured my attention. I couldn't find a proper definition what those exactly mean andhow to use those terms properly. I read for example in <code>Python Cookbook</code> the following section:</p>
<blockquote>
<p><code>basestring</code> is a common base class for the <code>str</code> and <code>unicode</code> types, and any <strong>string-like</strong> type that user code might define should also subclass <code>basestring</code>, just to make sure that such <code>isinstance</code> testing works as intended. </p>
</blockquote>
<p>So is it now correct to say that anything deriving from <code>basestring</code> can be considered <strong>string-like</strong>? Even than what makes it <code>string-like</code>, it's return type?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>&lt;type&gt;-like</code> is any object that <em>acts just like that type</em>. Python widely relies on <em>duck typing</em>; if it walks and quacks like a duck, it <em>is</em> a duck. If it behaves like a string, it probably is one.</p>
<p>So the documentation is telling you that if you are going to create a custom type that wants to be treated like a string everywhere, it may be an idea to subclass <code>basestring</code>.  That way any code that explicitly wants to test for string types (bytes or unicode text) by using <code>isinstance(obj, basestring)</code> will accept your custom type too.</p>
<p>You still have to implement the minimum set of expected methods; inheriting from <code>basestring</code> won't magically make your type <em>work</em>. That <em>minimum set</em> depends on how the code you are trying to dupe is manipulating the strings. Your type has to be string-like <em>enough</em> to dupe whatever you are using your type for.</p>
<p>Yes, that's deliberately vague, and not all code can be duped (some built-in functions and types expect to be able to use the C API on string objects, or even reach into the <code>str</code> internals). Often it is easier to just subclass <code>str</code> or <code>unicode</code> to ensure nothing is missed.</p>
<p>The language has since stepped away from such base classes, and has defined <a href="https://docs.python.org/3/glossary.html#term-abstract-base-class" rel="nofollow noreferrer"><em>abstract base classes</em></a> instead, which, together with <a href="https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks" rel="nofollow noreferrer">hooks for customising subclass and instance checks</a> now are the recommended way to do duck typing in one check.</p>
</div>
