<div class="post-text" itemprop="text">
<p>There is a python code, which is supposed to support Python 3, but may or may not run in Python 2.7.
For example, this snippet  can run in both Python 2.7 and Python 3.
What is the standard way to enforce and recommend Python 3 compatibility in strict mode, even if the code runs fine on Python 2.7 ?</p>
<pre><code>print('This file works in both')
print('How to throw an exception,and suggest recommendation of python 3 only ?')
</code></pre>
<p>Python 2.7 : <a href="https://ideone.com/bGnbvd" rel="nofollow noreferrer">https://ideone.com/bGnbvd</a></p>
<p>Python 3.5 : <a href="https://ideone.com/yrTi3p" rel="nofollow noreferrer">https://ideone.com/yrTi3p</a></p>
<p>There can be multiple hacks and exceptions, which work in Python 3, and not in Python 2.7, which can be used to achieve this.
I am looking for most recommended way of doing this in the beginning of files/modules/projects.</p>
</div>
<div class="post-text" itemprop="text">
<p>If it is a proper Python package with the <code>setup.py</code>, you can use several things:</p>
<ul>
<li><p><a href="https://packaging.python.org/tutorials/distributing-packages/#python-requires" rel="nofollow noreferrer"><code>python_requires</code> classifier</a></p>
<blockquote>
<p>If your project only runs on certain Python versions, setting the <code>python_requires</code> argument to the appropriate <a href="https://www.python.org/dev/peps/pep-0440/" rel="nofollow noreferrer">PEP 440</a> version specifier string will prevent pip from installing the project on other Python versions.</p>
</blockquote>
<p>Sample: <code>python_requires='&gt;=3',</code></p></li>
<li><p>Since the support for <code>python_requires</code> classifier has been added relatively recently, you should account for users installing your package with older versions of <code>pip</code> and <code>setuptools</code>. In this case you can check the <a href="https://docs.python.org/3/library/sys.html#sys.version_info" rel="nofollow noreferrer"><code>sys.version_info</code></a> inside the <code>setup.py</code> file <a href="https://github.com/django/django/blob/master/setup.py#L7" rel="nofollow noreferrer">like Django does</a>:</p>
<pre><code>import sys

CURRENT_PYTHON = sys.version_info[:2]
REQUIRED_PYTHON = (3, 5)

# This check and everything above must remain compatible with Python 2.7.
if CURRENT_PYTHON &lt; REQUIRED_PYTHON:
    sys.stderr.write("""...""")
    sys.exit(1)
</code></pre></li>
<li><p><a href="https://pypi.python.org/pypi?%3Aaction=list_classifiers" rel="nofollow noreferrer"><code>Programming Language</code> Python version classifiers</a>:</p>
<pre><code>'Programming Language :: Python',
'Programming Language :: Python :: 3',
'Programming Language :: Python :: 3.5',
'Programming Language :: Python :: 3.6',
'Programming Language :: Python :: 3 :: Only',
</code></pre></li>
</ul>
<p>And, as a bonus, if the package is distributed through PyPI package index, <code>python_requires</code> and other classifiers are going to be displayed on the <a href="https://pypi.python.org/pypi/Django/2.0.1" rel="nofollow noreferrer">package home page</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could simply check the <code>sys.version_info</code>:</p>
<pre><code>import sys
if sys.version_info[0] &lt; 3:
    raise SystemExit("Use Python 3 (or higher) only")
</code></pre>
</div>
