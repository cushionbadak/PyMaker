<div class="post-text" itemprop="text">
<p>Is there a way in Python to silence stdout without wrapping a function call like following?</p>
<p>Original Broken Code:</p>
<pre><code>from sys import stdout
from copy import copy
save_stdout = copy(stdout)
stdout = open('trash','w')
foo()
stdout = save_stdout
</code></pre>
<p>Edit: Corrected code from Alex Martelli</p>
<pre><code>import sys
save_stdout = sys.stdout
sys.stdout = open('trash', 'w')
foo()
sys.stdout = save_stdout
</code></pre>
<p>That way works but appears to be terribly inefficient. There <em>has</em> to be a better way. Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assigning the <code>stdout</code> variable as you're doing has no effect whatsoever, assuming <code>foo</code> contains <code>print</code> statements -- yet another example of why you should never import stuff from <em>inside</em> a module (as you're doing here), but always a module as a whole (then use qualified names).  The <code>copy</code> is irrelevant, by the way.  The correct equivalent of your snippet is:</p>
<pre><code>import sys
save_stdout = sys.stdout
sys.stdout = open('trash', 'w')
foo()
sys.stdout = save_stdout
</code></pre>
<p><strong>Now</strong>, when the code is correct, is the time to make it more elegant or fast.  For example, you could use an in-memory file-like object instead of file 'trash':</p>
<pre><code>import sys
import io
save_stdout = sys.stdout
sys.stdout = io.BytesIO()
foo()
sys.stdout = save_stdout
</code></pre>
<p>for elegance, a <em>context</em> is best, e.g:</p>
<pre><code>import contextlib
import io
import sys

@contextlib.contextmanager
def nostdout():
    save_stdout = sys.stdout
    sys.stdout = io.BytesIO()
    yield
    sys.stdout = save_stdout
</code></pre>
<p>once you have defined this context, for any block in which you don't want a stdout,</p>
<pre><code>with nostdout():
    foo()
</code></pre>
<p>More optimization: you just need to replace sys.stdout with an object that has a no-op <code>write</code> method.  For example:</p>
<pre><code>import contextlib
import sys

class DummyFile(object):
    def write(self, x): pass

@contextlib.contextmanager
def nostdout():
    save_stdout = sys.stdout
    sys.stdout = DummyFile()
    yield
    sys.stdout = save_stdout
</code></pre>
<p>to be used the same way as the previous implementation of <code>nostdout</code>.  I don't think it gets any cleaner or faster than this;-).</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to add to what others already said, Python 3.4 introduced the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="noreferrer"><code>contextlib.redirect_stdout</code></a> context manager. It accepts a file(-like) object to which the output is to be redirected.</p>
<p>Redirecting to <em>/dev/null</em> will suppress the output:</p>
<pre><code>In [11]: def f(): print('noise')

In [12]: import os, contextlib

In [13]: with open(os.devnull, 'w') as devnull:
   ....:     with contextlib.redirect_stdout(devnull):
   ....:         f()
   ....:         

In [14]: 
</code></pre>
<p>This solution can be adapted to be used as a decorator:</p>
<pre><code>import os, contextlib

def supress_stdout(func):
    def wrapper(*a, **ka):
        with open(os.devnull, 'w') as devnull:
            with contextlib.redirect_stdout(devnull):
                func(*a, **ka)
    return wrapper

@supress_stdout
def f():
    print('noise')

f() # nothing is printed
</code></pre>
<p><br/></p>
<p>Another possible and occasionally useful solution that will work in both Python 2 and 3 is to pass <em>/dev/null</em> as an argument to <code>f</code> and redirect the output using the <code>file</code> argument of the <a href="https://docs.python.org/3/library/functions.html#print" rel="noreferrer"><code>print</code></a> function:</p>
<pre><code>In [14]: def f(target): print('noise', file=target)

In [15]: with open(os.devnull, 'w') as devnull:
   ....:     f(target=devnull)
   ....:     

In [16]: 
</code></pre>
<p>You can even make <code>target</code> completely optional:</p>
<pre><code>def f(target=sys.stdout):
    # Here goes the function definition
</code></pre>
<p>Note, you'll need to</p>
<pre><code>from __future__ import print_function
</code></pre>
<p>in Python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why do you think this is inefficient? Did you <em>test</em> it? By the way, it does not work at all because you are using the <code>from ... import</code> statement.
Replacing <code>sys.stdout</code> is fine, but don't make a copy and don't use a temporary file. Open the null device instead:</p>
<pre><code>import sys
import os

def foo():
    print "abc"

old_stdout = sys.stdout
sys.stdout = open(os.devnull, "w")
try:
    foo()
finally:
    sys.stdout.close()
    sys.stdout = old_stdout
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Chiming in very late to this with what I thought was a cleaner solution to this problem.</p>
<pre><code>import sys, traceback

class Suppressor(object):

    def __enter__(self):
        self.stdout = sys.stdout
        sys.stdout = self

    def __exit__(self, type, value, traceback):
        sys.stdout = self.stdout
        if type is not None:
            # Do normal exception handling

    def write(self, x): pass
</code></pre>
<p>Usage:</p>
<pre><code>with Suppressor():
    DoMyFunction(*args,**kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A slight modification to <a href="https://stackoverflow.com/questions/2828953/silent-the-stdout-of-a-function-in-python-without-trashing-sys-stdout-and-restori/2829036#2829036">Alex Martelli's answer</a>...</p>
<p>This addresses the case where you always want to suppress <code>stdout</code> for a function instead of individual calls to the function.</p>
<p>If <code>foo()</code> was called many times would it might be better/easier to wrap the function (decorate it).  This way you change the definition of <code>foo</code> once instead of encasing every use of the function in a with-statement.</p>
<pre><code>import sys
from somemodule import foo

class DummyFile(object):
    def write(self, x): pass

def nostdout(func):
    def wrapper(*args, **kwargs):        
        save_stdout = sys.stdout
        sys.stdout = DummyFile()
        func(*args, **kwargs)
        sys.stdout = save_stdout
    return wrapper

foo = nostdout(foo)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By generalizing even more, you can get a nice decorator that can capture the ouput and even return it:</p>
<pre><code>import sys
import cStringIO
from functools import wraps

def mute(returns_output=False):
    """
        Decorate a function that prints to stdout, intercepting the output.
        If "returns_output" is True, the function will return a generator
        yielding the printed lines instead of the return values.

        The decorator litterally hijack sys.stdout during each function
        execution for ALL THE THREADS, so be careful with what you apply it to
        and in which context.

        &gt;&gt;&gt; def numbers():
            print "42"
            print "1984"
        ...
        &gt;&gt;&gt; numbers()
        42
        1984
        &gt;&gt;&gt; mute()(numbers)()
        &gt;&gt;&gt; list(mute(True)(numbers)())
        ['42', '1984']

    """

    def decorator(func):

        @wraps(func)
        def wrapper(*args, **kwargs):

            saved_stdout = sys.stdout
            sys.stdout = cStringIO.StringIO()

            try:
                out = func(*args, **kwargs)
                if returns_output:
                    out = sys.stdout.getvalue().strip().split()
            finally:
                sys.stdout = saved_stdout

            return out

        return wrapper

    return decorator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>I don't think it gets any cleaner or faster than this;-)</em></p>
<p>Bah! I think I can do a little better :-D</p>
<pre><code>import contextlib, cStringIO, sys

@contextlib.contextmanager
def nostdout():

    '''Prevent print to stdout, but if there was an error then catch it and
    print the output before raising the error.'''

    saved_stdout = sys.stdout
    sys.stdout = cStringIO.StringIO()
    try:
        yield
    except Exception:
        saved_output = sys.stdout
        sys.stdout = saved_stdout
        print saved_output.getvalue()
        raise
    sys.stdout = saved_stdout
</code></pre>
<p>Which gets to what I wanted originally, to suppress output normally but to show the suppressed output if an error was thrown.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow noreferrer">redirect_stdout()</a> has been added to contextlib since python 3.4</p>
<p>For python &gt;= 3.4, this should do it:</p>
<pre><code>import contextlib
import io

with contextlib.redirect_stdout(io.StringIO()):
    foo()
</code></pre>
</div>
<span class="comment-copy">I'd say you should leave it uncorrected, since Alex already did it for you. It would make more sense to who is reading.</span>
<span class="comment-copy">Cawas:   I am going to add my initial uncorrected one back above it.  Or something similar with the same errors.  Good call</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/6796492/4279">Temporarily Redirect stdout/stderr</a></span>
<span class="comment-copy">Alex Martelli: that last one seems too pretty.  I never have used the "with" keyword before.  I am going to have to look into it.</span>
<span class="comment-copy">It should be noted that if you use this in a threaded environment, your substitution will apply to <i>all</i> threads.  So if you use it in a threaded webserver for instance, stdout will get trashed for all threads (for the duration of that function call, which will be some random chunk of time in other threads).  Handling this case is hard, and would involve <code>threading.local</code> (mostly I'd recommend try avoiding threads and stdout redirection).</span>
<span class="comment-copy">I've downvoted this because it makes code hang — in such a way that it cannot be interrupted, as far as I can tell — if an exception is raised within the context.  I think <a href="http://stackoverflow.com/a/40054132/1194883">@bitmous's answer</a> is more robust <i>and</i> more elegant in a very clever way (no need for the <code>DummyFile</code> class).</span>
<span class="comment-copy">After none of the answers in this thread worked for me, I found out after <i>way</i> too long that a C-level function was generating the output, which the python-stdout doesn't catch directly. The following answer helped: <a href="https://stackoverflow.com/a/17954769/2965879">stackoverflow.com/a/17954769/2965879</a> In particular, <code>sys.stdout.close()</code> in the <code>try</code>-block should help.</span>
<span class="comment-copy">Most elegant solution for Python 3.4 and newer.</span>
<span class="comment-copy">The only reason I think it is inefficient because it is a file write. File writes are definitely slower than needed if you are doing it enough times.  But yeah I messed up my initial code, I fixed it based of Alex's initial comment</span>
<span class="comment-copy">It should be <code>open(os.devnull, 'w')</code>. In general <code>os.devnull</code> is useful if you need <i>real</i> file object. But <code>print</code> accepts anything with a <code>write()</code> method.</span>
<span class="comment-copy">+1 for os.devnull.. surprised the winning answer propagated the use of an actual file for output.</span>
<span class="comment-copy">Indeed it should be <code>open(os.devnull, 'w')</code>.       Otherwise you will get:[Errno 9] Bad file descriptor</span>
<span class="comment-copy">This is nice because it handles exceptions within the context.  And the use of <code>self</code> as the trivial <code>write</code>r is very clever.</span>
<span class="comment-copy">This is certainly the best answer. H̶i̶n̶t̶ ̶f̶o̶r̶ ̶a̶n̶y̶o̶n̶e̶ ̶u̶n̶s̶u̶r̶e̶:̶ ̶i̶f̶ ̶y̶o̶u̶ ̶w̶a̶n̶t̶ ̶e̶r̶r̶o̶r̶s̶ ̶t̶o̶ ̶b̶e̶ ̶t̶h̶r̶o̶w̶n̶ ̶a̶s̶ ̶n̶o̶r̶m̶a̶l̶,̶ ̶j̶u̶s̶t̶ ̶r̶e̶p̶l̶a̶c̶e̶ <code># Do normal exception handling</code> ̶w̶i̶t̶h̶ ̶<code>raise</code>. I've made an edit</span>
<span class="comment-copy">It should also be mentioned, here, that if you have any debugger traces set in <code>DoMyFunction()</code>, they will be invisible, the program will simply wait on the trace with no prompt.</span>
<span class="comment-copy">What do you mean do normal exception handling here? What exactly will this catch? If I want to use this for any number of abstract cases, what should I be expecting to hit <code>if type is not None</code> and what happens if I omit that line?</span>
<span class="comment-copy">tgray: I really like that approach. Is it truly faster?  It can save a little bit of time via not doing I guess two jmps  and less pushing and pulling from the stack.  That and I can over-call all the functions I will call.  Is their another hidden advantage that I am not seeing?</span>
<span class="comment-copy">Tim: It's main benefit is saving programmer time by reducing the number of changes you need to make to your code to turn off stdout for a function.  I haven't run a performance test against the contextmanager yet.</span>
<span class="comment-copy">tgray:  Thats what I thought.  It is a great Idea though.  I do like it.  I think both approaches are good depending on what you are attempting to do. IE if you are trying to replace a call in 100s of spot that way is better, but if you want to do it for a function being passed into another function, I think the other has its advantages. I do like it though</span>
<span class="comment-copy">tgray: Random note. After timing the two ways wrapping a function that just does 1+1, because i only care to look at the overhead. That being said it was pretty much a wash. So which ever between the two styles is easiest to implement is the one to go for.</span>
<span class="comment-copy">Is this a duplicate of @vaultah's answer above?</span>
