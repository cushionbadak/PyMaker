<div class="post-text" itemprop="text">
<p>This is my code:</p>
<pre><code>from decimal import *
a = eval (input ("Pelase, give me a numbre: \n"))
if type(a) not in (int, float, Decimal):
    print ("It's not possible to make a float from a complex number")
else :
    a=float(a)
    print ("Now your number is", a, "and its type is" , type(a))
</code></pre>
<p>If the input is just text (<code>Hello</code> for instance) you get an error.</p>
<p>I'd like to evaluate if it is a <code>str</code> and give advice to the user based on that evaluation.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def do_input():
    user_input = input("Input a number: ")
    try:
        num = int(user_input)
    except ValueError:
        try:
            num = float(user_input)
        except ValueError:
            print("You didn't input a number")
            num = None
    return num

for _ in range(3):
    a = do_input()
    print("Now your number is", a, "and its type is" , type(a))
</code></pre>
<p>Output:</p>
<pre><code>Input a number: 3
Now your number is 3 and its type is &lt;class 'int'&gt;
Input a number: 2.1
Now your number is 2.1 and its type is &lt;class 'float'&gt;
Input a number: ij
You didn't input a number
Now your number is None and its type is &lt;class 'NoneType'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python, a string is like a "instance of class str". To order to compare if the "content" within the input was a string, you can make something like...</p>
<pre><code>a = input("Put something...")

if isinstance(a, str):
    print("Error caught, a string was given...")
else:
    print ("Now your number is", a, "and its type is" , type(a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>eval</code> function does not really parse given string as number. It  <a href="https://docs.python.org/3.6/library/functions.html#eval" rel="nofollow noreferrer">evaluates string as a python expression</a>. So try one of the two ways mentioned below :</p>
<p><strong>One way</strong></p>
<pre><code>from decimal import *

a = input("Please, give me a number : \n")
if type(a) not in (int, float, Decimal):
    print("It's not possible to make a float.")
else:
    a = float(a)
    print("Now your number is", a, "and its type is", type(a))
</code></pre>
<p><strong><em>Case 1 :</em></strong></p>
<pre><code>Please, give me a number : 
5
Now your number is 5.0 and its type is &lt;class 'float'&gt;
</code></pre>
<p><strong><em>Case 2 :</em></strong></p>
<pre><code>Please, give me a number : 
hello
It's not possible to make a float.
</code></pre>
<p><strong>Another way</strong></p>
<pre><code>try:
    a = float(input("Please, give me a number : \n"))
    print("Now your number is", a, "and its type is", type(a))
except ValueError:
    print("It's not possible to make a float.")
</code></pre>
<p><strong><em>Case 1 :</em></strong></p>
<pre><code>Please, give me a number : 
5
Now your number is 5.0 and its type is &lt;class 'float'&gt;
</code></pre>
<p><strong><em>Case 2 :</em></strong></p>
<pre><code>Please, give me a number : 
hello
It's not possible to make a float.
</code></pre>
<blockquote>
<p>The expression argument is parsed and evaluated as a Python expression
  (technically speaking, a condition list) using the globals and locals
  dictionaries as global and local namespace. If the globals dictionary
  is present and lacks ‘<strong>builtins</strong>’, the current globals are copied
  into globals before expression is parsed. This means that expression
  normally has full access to the standard builtins module and
  restricted environments are propagated. If the locals dictionary is
  omitted it defaults to the globals dictionary. If both dictionaries
  are omitted, the expression is executed in the environment where
  eval() is called. The return value is the result of the evaluated
  expression. Syntax errors are reported as exceptions. Example:</p>
<pre><code>from math import *

def secret_function():
    return "Secret key is 1234"

def function_creator():

    # expression to be evaluated
    expr = raw_input("Enter the function(in terms of x):")

    # variable used in expression
    x = int(raw_input("Enter the value of x:"))

    # evaluating expression
    y = eval(expr)

    # printing evaluated result
    print("y = {}".format(y))

if __name__ == "__main__":
    function_creator()
</code></pre>
<p>Output : </p>
<pre><code>Enter the function(in terms of x):x*(x+1)*(x+2)
Enter the value of x:3
y = 60
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using <code>eval</code> (which is rather dangerous - a user could enter any valid python code and it'll run), you should use <code>int</code>, and use a try-catch statement something like the following:</p>
<pre><code>while True:
    try:
            a = int(input ("Pelase, give me a numbre: \n"))
            break
    except ValueError:
            print("Not a number!")
</code></pre>
<p>For more examples, see here: <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>eval</code> function does not really parse given string as number. It  <a href="https://docs.python.org/2/library/functions.html#eval" rel="nofollow noreferrer">evaluates string as a python expression</a>.</p>
<p>So the fact that <code>eval('2')</code> gives 2 is just a coincidence, because 2 is correct python expression that evaluates to number. </p>
<p>So you shouldnt use <code>eval</code> to parse strings as numbers. Instead simply try parsing (con verting) it as integer, float and Decimal (in this order) and if you don't get error in any of your tries it means this is correct number of specified type. </p>
<p>Answer posted by @jose-a shows how could it be done. </p>
</div>
<div class="post-text" itemprop="text">
<p>Why not simply encapsulate your Logic within a <code>try :: except</code> Block like so:</p>
<pre><code>iNumber = input ("Please, enter a Number: \n")
try :
    # TRY CASTING THE ENTERED DATA TO A FLOAT...
    iNumber = float(iNumber)
    print ("Now your number is {} and its type is {}".format(iNumber, type(iNumber)))
except:
    # IF CASTING FAILS, THEN YOU KNOW IT'S A STRING OR SO... 
    # DO SOMETHING - THROW AN EXCEPTION OR WHATEVER...
    print ("Non Numeric Data is not acceptable...")
</code></pre>
<p><br/>
<br/>
<strong>UPDATE:</strong><br/>
If you wish to handle Complex Number Inputs (like you mentioned in your comment)... you could just wrap the Code above in an <code>if - else</code> block like so:</p>
<pre><code>import re

iNumber         = input ("Please, enter a Number: \n")
# MATCH A SOMEWHAT COMPLEX NUMBER PATTERN
if re.match(r"\d{1,}[ \-\+]*\d{1,}[a-z]", iNumber):
    print("Not possible to convert a complex number to float: {}".format(iNumber))
else:
    try :
        # TRY CASTING THE ENTERED DATA TO A FLOAT...
        iNumber = float(iNumber)
        print ("Now your number is {} and its type is {}".format(iNumber, type(iNumber)))
    except:
        # IF CASTING FAILS, THEN YOU KNOW IT'S A STRING OR SO...
        # DO SOMETHING - THROW AN EXCEPTION OR WHATEVER...
        print ("Non Numeric Data is not acceptable...")
</code></pre>
</div>
<span class="comment-copy">"To evaluate a string" means "to execute it as raw Python code". Is just <code>Hello</code> valid Python code?</span>
<span class="comment-copy">Note, this is valid in python2.  In python3, the type of all inputs is a string and you need to explicitly construct the number.</span>
<span class="comment-copy">The OP seems to want a <code>float</code> rather than an <code>int</code></span>
<span class="comment-copy">Good point - another answer tries both, which seems like a better option</span>
<span class="comment-copy">It's a nice and simple way to do, but it's not able to evaluate a complex number, which is evaluated as a string.  ¿Do you know how to solve? When you input for instance 4+5j (complex number) it should give a message (Not possible to convert to float a complex number).  Thanks</span>
<span class="comment-copy">Post updated...</span>
