<div class="post-text" itemprop="text">
<p>I have a python object that represents a connection to a rest api with a large number of endpoints. I need to come up with a strategy to organize hundreds of method calls (right now I am using prefixes on the methods). I would also like to break up the files if that's possible.</p>
<p>I am working in python 2.7</p>
<p>Two give more clear questions -
1) Is it possible to split an object into multiple files in some sort of effective manner in python? Specifically without introducing more complexity?</p>
<p>2) Is it possible to make "submodules" for lack of a better phrase, so</p>
<pre><code>my_rest_api.users.create
</code></pre>
<p>rather than</p>
<pre><code>my_rest_api.users_create
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can implement the groups as mixins. For example like this:</p>
<p>user_actions.py</p>
<pre><code>class UserActions:
    def user_create(...): ...
</code></pre>
<p>the_api.py</p>
<pre><code>from . import user_actions

class TheApi(UserActions, ItemActions, OtherActions, ...):
    # common functionality goes here
</code></pre>
<p>Then you can call <code>the_api_instance.user_create(...)</code> once you have an object created.</p>
</div>
<span class="comment-copy">You need to be a lot more specific to get useful answers here...</span>
<span class="comment-copy">edited to reflect specific questions</span>
<span class="comment-copy">If the final object has discretely definable pieces, would writing a bunch of mixin classes, then combining them through multiple inheritance work for your purposes? For the ones that don't make sense instantiated on their own, inherit from <a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="nofollow noreferrer"><code>abc.ABC</code></a> and define required but unimplemented methods with <code>@abc.abstractmethod</code> that would prevent direct construction unless the methods were implemented in the child (directly, or via inheritance from a non-abstract definition in another parent).</span>
<span class="comment-copy">Yes, I screwed up my terminology. I was unaware python had mixins, that's the technology I need.</span>
<span class="comment-copy">Mixins are what I need, thanks</span>
