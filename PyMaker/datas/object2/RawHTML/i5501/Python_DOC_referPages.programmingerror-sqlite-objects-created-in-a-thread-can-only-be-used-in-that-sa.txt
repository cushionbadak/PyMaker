<div class="post-text" itemprop="text">
<p>i'm fairly new to programming. I've tried MySQL before, but now it's my first time using SQLite in a python flask website. 
    So maybe I'm using MySQL syntax instead of SQLite, but I can't seem to find the problem.</p>
<pre><code>Piece of my code: 

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm(request.form)
    if request.method=='POST' and form.validate():
        name =  form.name.data 
        email = form.email.data
        username = form.username.data
        password = sha256_crypt.encrypt(str(form.password.data))

        c.execute("INSERT INTO users(name,email,username,password) 
        VALUES(?,?,?,?)", (name, email, username, password))

        conn.commit

        conn.close()

The error:
 File "C:\Users\app.py", line 59, in register c.execute("INSERT INTO users(name,email,username,password) VALUES(?,?,?,?)", (name, email, username, password))
 ProgrammingError: SQLite objects created in a thread can only be used in that 
 same thread.The object was created in thread id 23508 and this is thread id 
 22640
</code></pre>
<p>Does this mean I can't use the name, email username &amp; password in an HTML file?
How do I solve this? </p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your cursor 'c' is not created in the same thread; it was probably initialized when the Flask app is ran.</p>
<p>You probably want to generate SQLite objects (the conneciton, and the cursor) in the same method, such as:</p>
<pre><code>  @app.route('/')
  def dostuff():
    with sql.connect("database.db") as con:
      name = "bob"
      cur = con.cursor()
      cur.execute("INSERT INTO students (name) VALUES (?)",(bob))
      con.commit()
      msg = "Done"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Where you make your connection to the database add the following.</p>
<pre><code>conn = sqlite3.connect('your.db', check_same_thread=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my case, I have the same issue with two python files creating sqlite engine and therefore possibly operating on different threads. Reading SQLAlchemy doc <a href="http://docs.sqlalchemy.org/en/latest/dialects/sqlite.html?highlight=check_same_thread" rel="nofollow noreferrer">here</a>, it seems it is better to use singleton technique in both files:  </p>
<pre><code># maintain the same connection per thread
from sqlalchemy.pool import SingletonThreadPool
engine = create_engine('sqlite:///mydb.db',
                poolclass=SingletonThreadPool)
</code></pre>
<p>It does not solve all cases, meaning I occasionally getting the same error, but i can easily overcome it, refreshing the browser page. Since I'm only using this to debug my code, this is OK for me. For more permanent solution, should probably choose another database, like PostgreSQL or other database    </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>engine = create_engine(
'sqlite:///restaurantmenu.db',
connect_args={'check_same_thread': False}
)
</code></pre>
<p>Works for me</p>
</div>
<span class="comment-copy">Are <i>name, email, username &amp; password</i> <b>SQLite Objects</b>? Read the words in the error message. They're there for reasons other than taking up space on your screen.</span>
<span class="comment-copy">No, they're clearly python objects defined right above it.  The error message talks about the connection and the cursor.</span>
<span class="comment-copy">I ran into this. I'm going through a udacity full stack dev course that appears to have some python2 stuff. So it's actually turning out to be a good learning opportunity. Either way worked for me. I had the following at the top of the app.py file and then I literally copied and pasted into that function (path) and voila problem solved. <code>python DBSession = sessionmaker(bind=engine)  session = DBSession() </code></span>
<span class="comment-copy">Does one also need a <code>con.close()</code> or does the <code>with</code> take care of this?</span>
<span class="comment-copy">is this safe to use?</span>
<span class="comment-copy">@uzu, I don't see why not, as long as you do your own synchronization to ensure only one thread uses the object at the same time.</span>
<span class="comment-copy">Some additional info for future readers of this thread. Per <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">docs.python.org/3/library/sqlite3.html</a>: By default, check_same_thread is True and only the creating thread may use the connection. If set False, the returned connection may be shared across multiple threads. When using multiple threads with the same connection writing operations should be serialized by the user to avoid data corruption.</span>
<span class="comment-copy">Hi J J, welcome to Stack Overflow! Please can you improve this answer? Use single backquotes ` to show code like this `code`, and explain why the code in question answers the question/does the job the person asked..</span>
