<div class="post-text" itemprop="text">
<p>got a problem with my code here. I am trying to get a script working that can make an ePub file. They are compressed zip files that are deflated (i.e. without compression) and have to be done in order. This current script will create a .zip but it is unusable a creates errors both in Python Shell and on the Terminal app when running the <code>zip -t</code> command.</p>
<p>The error in question is as follows on the Python shell:</p>
<pre><code>Traceback (most recent call last):
  File "/Users/Hal/Documents/GitHub/Damore-essay-ebook/GenEpub-old.py", line 29, in &lt;module&gt;
    if zipfile.is_zipfile(zf) is True:
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/zipfile.py", line 183, in is_zipfile
    result = _check_zipfile(fp=filename)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/zipfile.py", line 169, in _check_zipfile
    if _EndRecData(fp):
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/zipfile.py", line 241, in _EndRecData
    fpin.seek(0, 2)
AttributeError: 'ZipFile' object has no attribute 'seek'
</code></pre>
<p>The error in question on the Mac Terminal (though I am sure the output would the same wherever I ran <code>zip -t</code>:</p>
<pre><code>Archive:  IdealogicalEcho.epub
  End-of-central-directory signature not found.  Either this file is not
  a zipfile, or it constitutes one disk of a multi-part archive.  In the
  latter case the central directory and zipfile comment will be found on
  the last disk(s) of this archive.
unzip:  cannot find zipfile directory in one of IdealogicalEcho.epub or
        IdealogicalEcho.epub.zip, and cannot find IdealogicalEcho.epub.ZIP, period.
</code></pre>
<p>Python source code:</p>
<pre><code>#!/usr/bin/env python

#GenEpub.py - Generates an .epub file from the data provided.
#Ideally with no errors or warnings from epubcheck (needs to be implemented, maybe with the Python wrapper).

import os
import json
import zipfile

with open('metadata.json') as json_file:
        data = json.load(json_file)

#The ePub standard requires deflated compression and a compression order.
zf = zipfile.ZipFile(data["fileName"] + '.epub', mode='w', compression=zipfile.ZIP_STORED)

zf.write(data["fileName"] + '/mimetype')

for dirname, subdirs, files in os.walk(data["fileName"] + '/META-INF'):
    zf.write(dirname)
    for filename in files:
        zf.write(os.path.join(dirname, filename))

for dirname, subdirs, files in os.walk(data["fileName"] + '/EBOOK'):
    zf.write(dirname)
    for filename in files:
        zf.write(os.path.join(dirname, filename))

#zipfile has a built-in validator for debugging
if zipfile.is_zipfile(zf) is True:
    print("ZIP file is valid.")

#Extra debugging information
#print(getinfo.compress_type(zf))
#print(getinfo.compress_size(zf))
#print(getinfo.file_size(zf))

zf.close()
</code></pre>
<p>JSON file I used:</p>
<pre><code>{
        "comment1": "Metadata.json - Insert the e-book's metadata here. WIP",

        "comment2": "Technical metadata - This is the where the cover image is specified. Recommended to use ePub V2.0.1 over 3.0 for epubVersion and Reflowable rather than Fixed for textPresentation (unless doing a project that requires a specific layout). mobiCover and generateKindle are currently unused but added for futureproofing.",
        "epubCover": "cover.jpg",
        "mobiCover": "cover.jpg",
        "fileName": "IdealogicalEcho",
        "epubVersion": "2.0.1",
        "textPresentation": "Reflowable",
        "generateKindle": "no",

        "comment3": "Book metadata - Information about the e-book itself. Language is specified with ISO 639-1. Rights can be worldwide, country specific or under a permissable license such as Creative-Commons SA",
        "title": "Google's Idealogical Echochamber",
        "creator": "James Damore",
        "subject": "Academic",
        "publisher": "Hal Motley",
        "ISBN": "-",
        "language": "en",
        "rights": "Creative-Commons SA",

        "comment4": "This is the page order that the e-book has. The first number before the colon is the page order, the second is the indentation, third is the page name and fourth is file itself.",
            "pages": [
                    {
                        "1": [0, "Cover", "bookcover.xhtml"],
                        "2": [0, "Title", "title.xhtml"],
                        "3": [0, "Indicia", "indicia.xhtml"],
                        "4": [0, "License", "license.xhtml"],
                        "5": [0, "Contents", "toc.xhtml"],
                        "6": [0, "Foreword", "foreword.xhtml"],
                        "7": [0, "Article", "article.xhtml"]
                    }
                            ]
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem lies somewhere inside <code>is_zipfile</code>. Although it is stayed that "<em>filename</em> may be a file or file-like object" (<a href="https://docs.python.org/3/library/zipfile.html#zipfile-objects" rel="nofollow noreferrer">13.5.1. ZipFile Objects: zipfile.is_zipfile</a>), it fails with the <code>seek</code> error.</p>
<p>A possible solution is to close the file and reopen it just to check:</p>
<pre><code>zf.close()

with open(data["fileName"] + '.epub','r') as f:
    if zipfile.is_zipfile(f) is True:
        print("ZIP file is valid.")
</code></pre>
<p>I also found that that check is extremely basic and will return <code>True</code> even if you manually damage some bytes. It takes some effort to actually make it fail.</p>
<p>Interestingly, the apparent more thorough <code>zipfile.ZipFile.testzip</code> function needs that <code>zf</code> again – but it also fails if called before <code>zf.close()</code>. And there is no <code>zf.flush()</code> ...</p>
<p>Luckily, checking the created ePub file with <code>zip</code> after running the script reveals it contains no errors:</p>
<pre><code>~/Documents $ zip -T IdealogicalEcho.epub 
test of IdealogicalEcho.epub OK
</code></pre>
<p>(which does <em>not</em> tell you, by the way, that it is a valid <em>epub</em>. (It is not.))</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you try closing <em>before</em> validating.  Doing whole-file operations on files which are still open for write may not give valid results.</p>
</div>
<span class="comment-copy">Although the question title of OP suggests duplication of the question with this one <a href="https://stackoverflow.com/questions/43670450/attributeerror-when-creating-zipfile">here</a>.. it is in fact not related. End of review. Please finish the tour. Enjoy SO ;-)</span>
<span class="comment-copy">"... deflated (i.e. without compression)" is a <i>non sequitur</i>. Deflate <i>is</i> a compression scheme – no compression would be "stored" (which is also a valid compression scheme, albeit not a very popular one as it only increases the total file size). But the e-pub format <i>does</i> support compression.</span>
<span class="comment-copy">There's where my use of the &lt;code&gt;is_zipfile&lt;/code&gt; originated. epubcheck would repeatedly fail the zip file as invalid and all e-book readers would refuse to open the book.  I do appreciate getting rid of the seek error though, that technically answers this question. Now to make an IDPF-validated ePub generator.</span>
<span class="comment-copy">@HalMotley: unpack a working epub and mimick its structure. There should be some meta folder and file that you can use as template.</span>
<span class="comment-copy">I ran the code on an ePub that I know works to the fullest, changed the extension to .zip, extracted the archive to a folder. Altered my JSON's fileName attribute and then executed GenEpub.py. Adobe Digital Editions went from recognising that e-book beforehand to now not knowing what it is at all. Definitely my code has caused this. :-( <a href="https://github.com/inferno986return/Damore-essay-ebook" rel="nofollow noreferrer">github.com/inferno986return/Damore-essay-ebook</a></span>
<span class="comment-copy">No dice running the validator after zf.close(). But it's an interesting thought nonetheless.</span>
