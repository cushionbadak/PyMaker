<div class="post-text" itemprop="text">
<p>I really like Python generators. In particular, I find that they are just the right tool for connecting to Rest endpoints - my client code only has to iterate on the generator that is connected the the endpoint. However, I am finding one area where Python's generators are not as expressive as I would like. Typically, I need to filter the data I get out of the endpoint. In my current code, I pass a predicate function to the generator and it applies the predicate to the data it is handling and only yields data if the predicate is True.</p>
<p>I would like to move toward composition of generators - like <strong>data_filter(datasource( ))</strong>. Here is some demonstration code that shows what I have tried. It is pretty clear why it does not work, what I am trying to figure out is what is the most expressive way of arriving at the solution:</p>
<pre><code># Mock of Rest Endpoint: In actual code, generator is 
# connected to a Rest endpoint which returns dictionary(from JSON).
def mock_datasource ():
    mock_data = ["sanctuary", "movement", "liberty", "seminar",
                 "formula","short-circuit", "generate", "comedy"]
    for d in mock_data:
        yield d

# Mock of a filter: simplification, in reality I am filtering on some
# aspect of the data, like data['type'] == "external" 
def data_filter (d):
    if len(d) &lt; 8:
        yield d

# First Try:
# for w in data_filter(mock_datasource()):
#     print(w)
# &gt;&gt; TypeError: object of type 'generator' has no len()

# Second Try 
# for w in (data_filter(d) for d in mock_datasource()):
#     print(w)
# I don't get words out, 
# rather &lt;generator object data_filter at 0x101106a40&gt;

# Using a predicate to filter works, but is not the expressive 
# composition I am after
for w in (d for d in mock_datasource() if len(d) &lt; 8):
    print(w)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>data_filter</code> should apply <code>len</code> on the <em>elements</em> of <code>d</code> not on <code>d</code> itself, like this:</p>
<pre><code>def data_filter (d):
    for x in d:
        if len(x) &lt; 8:
            yield x
</code></pre>
<p>now your code:</p>
<pre><code>for w in data_filter(mock_datasource()):
    print(w)
</code></pre>
<p>returns</p>
<pre><code>liberty
seminar
formula
comedy
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>More concisely, you can do this with a generator expression directly:</p>
<pre><code>def length_filter(d, minlen=0, maxlen=8):
    return (x for x in d if minlen &lt;= len(x) &lt; maxlen)
</code></pre>
<p>Apply the filter to your generator just like a regular function:</p>
<pre><code>for element in length_filter(endpoint_data()):
    ...
</code></pre>
<p>If your predicate is really simple, the built-in function <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> may also meet your needs.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You could pass a filter function that you apply for each item:</p>
<pre><code>def mock_datasource(filter_function):
    mock_data = ["sanctuary", "movement", "liberty", "seminar",
             "formula","short-circuit", "generate", "comedy"]

    for d in mock_data:
        yield filter_function(d)

def filter_function(d):
    # filter
    return filtered_data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What I would do is define <code>filter(data_filter)</code> to receive a generator as input and return a generator with values filtered by <code>data_filter</code> predicate (regular predicate, not aware of generator interface).</p>
<p>The code is:</p>
<pre class="lang-py prettyprint-override"><code>def filter(pred):
    """Filter, for composition with generators that take coll as an argument."""
    def generator(coll):
        for x in coll:
            if pred(x):
                yield x
    return generator

def mock_datasource ():
    mock_data = ["sanctuary", "movement", "liberty", "seminar",
                 "formula","short-circuit", "generate", "comedy"]
    for d in mock_data:
        yield d

def data_filter (d):
    if len(d) &lt; 8:
        return True


gen1 = mock_datasource()
filtering = filter(data_filter)
gen2 = filtering(gen1) # or filter(data_filter)(mock_datasource())

print(list(gen2)) 
</code></pre>
<p>If you want to further improve, may use <code>compose</code> which was the whole intent I think:</p>
<pre class="lang-py prettyprint-override"><code>from functools import reduce

def compose(*fns):
    """Compose functions left to right - allows generators to compose with same
    order as Clojure style transducers in first argument to transduce."""
    return reduce(lambda f,g: lambda *x, **kw: g(f(*x, **kw)), fns)

gen_factory = compose(mock_datasource, 
                      filter(data_filter))
gen = gen_factory()

print(list(gen))
</code></pre>
<p>PS: I used some code found <a href="https://github.com/cognitect-labs/transducers-python/blob/master/tests/genducers.py" rel="nofollow noreferrer">here</a>, where the Clojure guys expressed composition of generators inspired by the way they do composition generically with transducers. 
PS2: <code>filter</code> may be written in a more pythonic way:</p>
<pre class="lang-py prettyprint-override"><code>def filter(pred):
    """Filter, for composition with generators that take coll as an argument."""
    return lambda coll: (x for x in coll if pred(x))
</code></pre>
</div>
<span class="comment-copy">How do you feel about the built-in <code>filter()</code>?</span>
<span class="comment-copy">Good suggestion - if I use a predicate function I write filter(data_predicate, mock_datasource()). However, I do prefer the approach where I can write the generate composition like f(g(x))</span>
<span class="comment-copy">@Kevin in that case <code>filter</code> calls for <code>lambda</code> and now you have a clunky expression. <code>filter</code> is good when the filtering function already exists (like <code>str.isdigit</code>, <code>None</code> to test truth values, or such,</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre, agreed, <code>filter</code> is a "sometimes" solution. Which is why I didn't go to the effor to build a full-fledged answer around it :-P</span>
<span class="comment-copy"><code>filter</code> was <i>very</i> useful on strings in python 2 because it saved the need for <code>str.join</code>. Now the joy is gone :)</span>
<span class="comment-copy">Thanks, this I seems get me the closest to what I what I asked for. That being said, I wonder if composing generators entails a performance cost that I did not consider.</span>
<span class="comment-copy">That's true, the more you're chaining function/generator calls, the slowest your application will be. Calling a function in python is more expensive than in compiled languages, partly because compiled languages have the ability to <i>inline</i> some calls.</span>
<span class="comment-copy">So far in testing comparing execution time of filtering with predicates, vs filtering with composed generators (i.e. based your answer), I am not seeing a huge performance penalty with composition approach. As often the case, need to run more tests ."The first principle is that you must not fool yourself and you are the easiest person to fool." Richard Feynman</span>
<span class="comment-copy">that's true. You much bench your various approaches with a relevant datasize (size &amp; contents).</span>
<span class="comment-copy">Right - the approach you suggest is similar to the code I am using that is working.  I am trying to put the filter at the output end of the datasource. I would like to lift the filter completely out of the generator's code. The closest I have come to that is the use of a predicate in the final example I gave.  In any case thanks for the advice!</span>
