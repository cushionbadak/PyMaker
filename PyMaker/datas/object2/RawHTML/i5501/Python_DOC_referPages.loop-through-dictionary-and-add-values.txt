<div class="post-text" itemprop="text">
<p>I am trying to add values for duplicate keys in a dictionary. I am not sure why my code isn't working.</p>
<pre><code>d = {'inds': [], 'vals': []}
d['inds'] = [0,   3,   7,   3,   3,   5, 1]
d['vals'] = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
</code></pre>
<p>I would like to get a list with the added values as result at index 3 and 0 for an index that doesn't exist:</p>
<pre><code>desired_output=[1.0, 7.0, 0.0, 11.0, 0.0, 6.0, 0.0, 3.0]
</code></pre>
<p>My code: I am making list of zeros and adding dictionary in a loop.</p>
<pre><code>d = {'inds': [], 'vals': []}
d['inds'] = [0,   3,   7,   3,   3,   5, 1]
d['vals'] = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]

length=len(d['inds'])

a=[0]*(length)

for key,val in d.items():
    a[key]= a[key] + d[val]
</code></pre>
<p>It's throwing an error:
TypeError: list indices must be integers or slices, not str</p>
<p>Appreciate your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>you don't even need a dictionary here (but I'll leave it in). just zip indices &amp; values and add to your zeroed list. Also the length of your result list is incorrect. Compute it using <code>max</code> of the indices plus one:</p>
<pre><code>d = {}
d['inds'] = [0,   3,   7,   3,   3,   5, 1]
d['vals'] = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]

result = [0]*(max(d["inds"])+1)
for a,b in zip(d['inds'],d['vals']):
    result[a] += b
</code></pre>
<p>result:</p>
<pre><code>[1.0, 7.0, 0, 11.0, 0, 6.0, 0, 3.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for key, val in d.items():
</code></pre>
<p>This loops over the items at the top-level of <code>d</code>: first <code>key='inds'</code> and <code>val=[0, 3, 7, 3, 3, 5, 1]</code>, and then <code>key='vals'</code> and <code>val=[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]</code>. But you're looking for <code>key</code> to take on the values 0, 3, 7, 3, etc., and for <code>val</code> to be <code>1.0</code>, <code>2.0</code>, <code>3.0</code>, etc.</p>
<p>To loop over the indices in <code>d['inds']</code> and the values in <code>d['vals']</code>, use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>. It will pull one item at a time from each sublist in parallel.</p>
<pre><code>for key, val zip(d['inds'], d['vals']):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a shorter, though not as effecient, list comprehension:</p>
<pre><code>d = {}
d['inds'] = [0,   3,   7,   3,   3,   5, 1]
d['vals'] = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
new_d = [0 if i not in d['inds'] else dict(zip(d['inds'], d['vals']))[i] for i in range(max(d["inds"])+1)]
</code></pre>
<p>Output:</p>
<pre><code>[1.0, 7.0, 0, 5.0, 0, 6.0, 0, 3.0]
</code></pre>
</div>
<span class="comment-copy">Thank you very much. This explains very well how to traverse through dictionary elements one by one using zip(). Works great. As a Python newbie, I learned something new today.</span>
<span class="comment-copy">@RomanPerekhrest It's incredibly, incredibly complicated. The C++ culture treats it as a point of pride rather than embarrassment. It's so ugly to look at. Templating metaprogramming is an abomination. Compiling is dog slow. The concept of "undefined behavior" is an anathema. No stack traces when it crashes. It's not <i>elegant</i>.</span>
<span class="comment-copy">@JohnKugelman, I hope you think better of pure C language which is the best choice for high-performance "stuff" (in particular)</span>
<span class="comment-copy">I've no beef with C. We're great pals.</span>
