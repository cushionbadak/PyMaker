<div class="post-text" itemprop="text">
<p>I'm getting the name of a file in Django after an Image save :</p>
<pre><code>path-&gt;    'companies/92_dsa/log/Hydrangeas.jpg' as it is in database
</code></pre>
<p>I do a clone of the file, an resize (is an image) and want to save the new file with a different name.</p>
<p>I get the directory of the original file:</p>
<pre><code>folder = os.path.dirname(path)
</code></pre>
<p>the filename and extension:</p>
<pre><code>  filename, extension = os.path.splitext(os.path.basename(media_path))
</code></pre>
<p>then create a </p>
<pre><code>new_filename =  filename + '_sz' + extension
</code></pre>
<p>and the I want to recreate the path:</p>
<pre><code>new_path = os.path.join(folder, new_filename)
</code></pre>
<p>and the problem(slash-backslash before the filename):</p>
<pre><code>'companies/94_sda/logos\Hydrangeas_sz.jpg'
</code></pre>
<p>I'm working in Windows, bur the final deploy probably will be on Linux, so I want a fix indifferent of the OS.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>so I want a fix indifferent of the OS.</p>
</blockquote>
<p>Unfortunately, you can't really have your cake and eat it.</p>
<p>You say that</p>
<blockquote>
<p>I'm working in Windows, bur the final deploy <strong>probably</strong> will be on Linux</p>
</blockquote>
<p>This implies you are running the program on Windows, but dealing with *nix file names (be it Linux, Unix, or mac OS).</p>
<p>To do this completely os-independent ... you would need to split the original path on "/" to get all the sub components and then re-join them with <code>os.path.join</code>.</p>
<p>But then you need to deal with the fact that directory structures for absolute paths are very different between the two OS's - not to mention the leading drive specifier on Windows. This is less of an issue if you are only dealing with relative paths.</p>
<p>In short, the root of your problem is that the database contains Linux-style paths and you are processing them on Windows. You would have a similar problem if it was the other way around.</p>
<p>You need to choose your deployment platform and code for it.</p>
<p>Alternatively, write your code to simply remove the extension from the full path and replace it with <code>"_sz."+extension</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Since you don't actually care about the path in relation to the host OS (because you've chosen to store paths POSIX style in your DB), you can just use string joining: <code>new_path = '/'.join([folder, new_filename])</code>, or you could import the <code>posixpath</code> module directly <code>import posixpath; new_path = posixpath.join(folder, new_filename)</code>.</p>
<p>You could also investigate <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">PathLib</a>, though that may be overkill for you.</p>
</div>
<span class="comment-copy">It's not clear what the issue is. <code>os.path.join()</code> works correctly regardless of OS.</span>
<span class="comment-copy">@blurp Only if the filenames belong to the host OS</span>
<span class="comment-copy">@kdopen Maybe, but that doesn't appear to be relevant here.</span>
<span class="comment-copy">@Blurp It's actually the root cause of the OP's problem. Django is providing a Linux style filename. The script is running on Windows, so uses "\" as the path separator.</span>
<span class="comment-copy">@kdopen OP doesn't actually state what the problem is. It sounds like they are doing development on Windows and deploying to Linux, in which case there shouldn't be an issue... <i>unless</i> they're doing something odd like creating records locally and copying them to the production database.</span>
<span class="comment-copy">@actually I didn't chose, is how the Django Framework is setting, what I want is to do the development in windows, and if the server will be in linux, the code to work.</span>
<span class="comment-copy">My main point was that your file paths are stored POSIX style in the database, i.e. <code>/path/to/file.ext</code> as opposed to NT style i.e. <code>C:\path\to\file.ext</code>, which means you don't care about joining the path with host operating system directory separators, and as such you should write your code to treat the paths as POSIX regardless of OS by either using string joining (which won't ever change because it's explicit what character you're joining the strings with) or using the <code>posixpath</code> which is what most POSIX compatible systems use.</span>
