<div class="post-text" itemprop="text">
<p>The goal of following code is merely to fill array a with 0 to 9:
</p>
<pre><code>import multiprocessing
import numpy as np
from joblib import Parallel, delayed

num_cores = multiprocessing.cpu_count()

inputs = range(10)
a = np.zeros(10)

def processInput():
    def testNested(t):
        a[t]= t
    Parallel(n_jobs=num_cores, backend="threading")(delayed(testNested)(t) for t in range(0, 10))

processInput()
</code></pre>
<p>I get the pickle error when I'm trying to call multiprocess in a function:</p>
<pre><code>AttributeError: Can't pickle local object 'processInput.&lt;locals&gt;.testNested'
</code></pre>
<p><strong>Question:</strong> Any suggestion how to achieve this goal, in a case I have to operate multiprocess within other functions?</p>
</div>
<div class="post-text" itemprop="text">
<p>The error message is very clear, a nested function cannot be pickled. <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">As documented stated</a>, you should define worker function at the top level of a module.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are examples shown in built-in <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> package, I slightly modified first one, which includes using <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool" rel="nofollow noreferrer">Pool</a> class:</p>
<blockquote>
<p><strong><em><code>class multiprocessing.pool.Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])</code></em></strong></p>
<blockquote>
<p>A process pool object which controls a pool of worker processes to which jobs can be submitted. It supports asynchronous results with timeouts and callbacks and has a parallel map implementation.</p>
<p><strong><em><code>processes</code></em></strong> is the number of worker processes to use. If processes is <code>None</code> then the number returned by <a href="https://docs.python.org/3/library/os.html#os.cpu_count" rel="nofollow noreferrer"><code>os.cpu_count()</code></a> is used.</p>
<p>If <strong><em><code>initializer</code></em></strong> is not <code>None</code> then each worker process will call <code>initializer(*initargs)</code> when it starts.</p>
<p><strong><em><code>maxtasksperchild</code></em></strong> is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process, to enable unused resources to be freed. The default <code>maxtasksperchild</code> is <code>None</code>, which means worker processes will live as long as the pool.</p>
<p><strong><em><code>context</code></em></strong> can be used to specify the context used for starting the worker processes. Usually a pool is created using the function <code>multiprocessing.Pool()</code> or the <code>Pool()</code> method of a context object. In both cases context is set appropriately.</p>
<blockquote>
<p><strong>Note</strong> that the methods of the pool object should only be called by the process which created the pool.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Therefore you don't really need to import and use <a href="https://pypi.python.org/pypi/joblib" rel="nofollow noreferrer"><code>joblib</code></a>, because <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool" rel="nofollow noreferrer">Pool</a> uses <code>the number of CPUs in the system</code> by default:</p>
<pre><code>from multiprocessing import Pool

def f(x):
    return x

if __name__ == '__main__':
    with Pool() as p:
        print(p.map(f, list(range(10))))
</code></pre>
<p>however same result could be achieved by writing "one-liner":</p>
<pre><code>print(list(range(10)))
</code></pre>
<p>I mapped pool <code>p</code> to function <code>f()</code> in case you want to do something more complex than just assigning values to index.</p>
</div>
<span class="comment-copy">hey any feedback?</span>
