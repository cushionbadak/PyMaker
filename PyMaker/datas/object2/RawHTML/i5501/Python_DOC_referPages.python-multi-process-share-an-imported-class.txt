<div class="post-text" itemprop="text">
<p>I got an issue on Python multiprocessing sharing imported Class. The troubled part is like this:</p>
<p><strong>file A:</strong></p>
<pre><code>class Meta:
    db_a = None
    db_b = None
    ...
# class will be initialized at the very beginning of the program and might
# be imported by all other models globally for a global variable/instance
# access, for example, a global DB access instance is in Meta
</code></pre>
<p><strong>file B:</strong></p>
<pre><code>from file_A import Meta
def runner():
    initialize_meta_db()  # Meta's attributes now have values
    ...
    pool = multiprocessing.Pool(4)
    pool.map(worker, arg_list)
    pool.close()
    pool.join()
    ...

def worker(*args):
    ...
    print(Meta.db_a)  # process will print None
    ...
# a runner function which spawns 4 processes, each process will use class Meta
# to do some work.
</code></pre>
<p>But the program runs with errors that for each process, the <code>Meta</code> class is not initialized and every attribute is <code>None</code>. I know the reason why, that the <code>Meta</code> class is only initialized in the memory of the main process, and each child process will have its own raw class Meta independently.</p>
<p>But is there any way that I can share this class with both parent process and child processes? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you considered using the initializer and initargs parameters of multiprocessing.Pool?</p>
<p>I modified your code slightly to do this and be able to run. It seems to do what you want.</p>
<p>File_A</p>
<pre><code>class Meta:
    db_a = None
    db_b = None
    @classmethod
    def initialize_meta_db(cls, db_a='a', db_b='b'):
        Meta.db_a = db_a
        Meta.db_b = db_b
</code></pre>
<p>File_B</p>
<pre><code>import multiprocessing

from file_A import Meta

def runner():
    Meta.initialize_meta_db()  # Meta's attributes now have values
    pool = multiprocessing.Pool(4, init, '')
    pool.map(worker, (1, 2, 3, 4))
    pool.close()
    pool.join()

def init(*initargs):
    from file_A import Meta
    Meta.initialize_meta_db()

def worker(*args):
    print('Worker {} -- Work {}'.format(args, Meta.db_a))

if __name__ == '__main__':
    runner()
</code></pre>
</div>
<span class="comment-copy">You should read the docs on <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">sharing state between processes</a>.</span>
