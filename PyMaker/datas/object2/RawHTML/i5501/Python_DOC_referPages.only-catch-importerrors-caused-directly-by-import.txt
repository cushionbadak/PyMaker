<div class="post-text" itemprop="text">
<p>I have a situation where a python file is dynamically loaded with the <code>importlib</code> module. I then catch <code>ImportError</code> to detect if the file does not exist. However this catches any <code>importerrors</code> indirectly caused by the import too. E.g.</p>
<pre><code># file a.py
import importlib

try:
    importlib.load_module("b")
except ImportError:
    print("it seems b.py does not exist!")  # oops! it actually does, it just also raised an ImportError!

# file b.py

import nonexistantmoduletocauserror
</code></pre>
<p>I would like to be able to tell the difference between an <code>ImportError</code> caused from my <code>importlib.load_module</code> and and caused by the process of executing the imported module itself.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>load_module()</code> is deprecated now.  They say to use <code>exec_module()</code> instead.  And indeed this offers a solution, because the import now happens in two phases: finding the module, then executing it.  See "Checking if a module can be imported" in the documentation, here: <a href="https://docs.python.org/3/library/importlib.html#checking-if-a-module-can-be-imported" rel="nofollow noreferrer">https://docs.python.org/3/library/importlib.html#checking-if-a-module-can-be-imported</a></p>
<p>In your case the code would look like:</p>
<pre><code>spec = importlib.util.find_spec('b')
if spec is None:
    print("it seems b.py does not exist!")
else:
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just create and use a custom exception:</p>
<p>File <code>MyImportError.py</code>:</p>
<pre><code>class MyImportError(Exception):
    """Raise for my specific kind of exception"""
</code></pre>
<p>File <code>a.py</code>:</p>
<pre><code>from MyImportError import MyImportError
import importlib

try:
    importlib.import_module("b")
except MyImportError:
    print("Error: It seems b.py does not exist!")
</code></pre>
<p>File <code>b.py</code>:</p>
<pre><code>from MyImportError import MyImportError

try:
    import nonexistantmoduletocauserror
except ImportError:
    raise MyImportError("Error: It seems nonexistantmoduletocauserror.py does not exist!")
</code></pre>
<hr/>
<p><strong>Edit:</strong></p>
<p>Okay, I see, then try that alternatively:</p>
<p>File <code>a.py</code>:</p>
<pre><code>import traceback
import sys
import importlib

try:
    importlib.import_module("b")
except ImportError as e:
    exc_type, exc_obj, tb = sys.exc_info()
    print(exc_type)
    print(exc_obj)
    traceback.print_exc()
</code></pre>
<p>File <code>b.py</code>:</p>
<pre><code>import nonexistantmoduletocauserror
</code></pre>
<p>You will see a full traceback with the relevant error messages:</p>
<pre><code>Traceback (most recent call last):
  File "/Users/darius/code/python/sklearn-keras/examples/a.py", line 8, in &lt;module&gt;
    importlib.import_module("b")
  File "/Users/darius/anaconda2/envs/sklearn-keras/lib/python2.7/importlib/__init__.py", line 37, in import_module
    __import__(name)
  File "/Users/darius/code/python/sklearn-keras/examples/b.py", line 3, in &lt;module&gt;
    import nonexistantmoduletocauserror
ImportError: No module named nonexistantmoduletocauserror

&lt;type 'exceptions.ImportError'&gt;
No module named nonexistantmoduletocauserror
</code></pre>
</div>
<span class="comment-copy">Nice idea, but unfortunately it is not feasible to wrap everything that might cause an importError in a try-except clause. Especially since the modules will be provided by third parties.</span>
<span class="comment-copy">I add a alternative solution, maybe it's more useful.</span>
