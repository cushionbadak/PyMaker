<div class="post-text" itemprop="text">
<p>I'm trying to build a method where if an item is not in a dictionary then it uses the last member of a list and updates the dictionary accordingly.  Sort of like a combination of the pop and setdefault method.  What I tried was the following:</p>
<pre><code>dict1 = {1:2,3:4,5:6}
b = 7
c = [8,9,10]
e = dict1.setdefault(b, {}).update(pop(c))
</code></pre>
<p>So I would like the output to be where <code>{7:10}</code> gets updated to dict1, that is to say, if b is not in the keys of dict1 then the code updates dict1 with an item using b and the last item of c. </p>
</div>
<div class="post-text" itemprop="text">
<p>It might be possible for you to abuse a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

c = [8, 9, 10]
dict1 = defaultdict(c.pop, {1: 2, 3: 4, 5: 6})
b = 7
e = dict1[b]
</code></pre>
<p>This will pop an item from <code>c</code> and make it a value of <code>dict1</code> <em>whenever a key missing from <code>dict1</code> is accessed</em>. (That means the expression <code>dict1[b]</code> on its own has side-effects.) There are many situations where that behaviour is more confusing than helpful, though, in which case you can opt for explicitness:</p>
<pre><code>if b in dict1:
    e = dict1[b]
else:
    e = dict1[b] = c.pop()
</code></pre>
<p>which can of course be wrapped up in a function:</p>
<pre><code>def get_or_pop(mapping, key, source):
    if key in mapping:
        v = mapping[key]
    else:
        v = mapping[key] = source.pop()

    return v

â‹®
e = get_or_pop(dict1, b, c)
</code></pre>
</div>
<span class="comment-copy">thanks, that did it.  I really appreciate that.</span>
<span class="comment-copy"><code>defaultdict(c.pop, ...)</code></span>
<span class="comment-copy">@StefanPochmann: Thanks!</span>
