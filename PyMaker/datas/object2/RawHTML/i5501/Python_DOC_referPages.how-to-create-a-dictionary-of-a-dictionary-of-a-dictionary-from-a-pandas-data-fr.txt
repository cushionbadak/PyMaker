<div class="post-text" itemprop="text">
<p>I have a pandas dataframe that looks like this:</p>
<pre><code>Copy    sequence    type    ntv
1        1           A      0.45
1        1           R2     0.878
1        1           R3     1.234
1        2           A      -7.890
1        2           R2     2.345
1        2           R3     -0.871
2        1           A      -0.098
2        1           R2     -0.007
2        1           R3     9.089
2        2           A      1.567
2        2           R2     -0.764
2        2           R3     17.908
3        1           A      4.980
3        1           R2     2.34
3        1           R3     1.280
3        2           A      -9.189
3        2           R2     -7.09
3        2           R3     -0.009
</code></pre>
<p>The data frame is made of 3 copies as in the first column. Each of these copies contain the same elements, i.e they have 2 sequences each, which are in turn made up of 3 different types: A, R2 and R3. </p>
<p>How can I create a dictionary of a dictionary of a dictionary that looks like this:</p>
<pre><code>d1 = {sequence:{type:{Copy:ntv}}}
</code></pre>
<p>So that for example if I say:</p>
<pre><code>d2 = d1[1][‘R2’]
rank = sorted(d2.items(), key =operator.itemgetter(1))
pprint(rank)
</code></pre>
<p>It should print out a dictionary (shown below) where all the ntv values have been sorted indicating which copy number has the lowest or highest ntv value for sequence 1 of type R2. </p>
<pre><code>{2: -0.007,
 1: 0.878, 
 3: 2.34}
</code></pre>
<p>Also, I look forward to your suggestions if you have better ideas on how to go about it. Thanks in advance! </p>
</div>
<div class="post-text" itemprop="text">
<p>You can do sth along these lines, using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

def nested_dict():
    return defaultdict(nested_dict)

d = nested_dict()

for _, row in df.iterrows():
    d[row['sequence']][row['type']][row['Copy']] = row['ntv']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, make a dictionary </p>
<pre><code>df_dict = dict(zip(df.sequence, df.ntv))
</code></pre>
<p>then sort the df_dict</p>
<pre><code>sorted_x = sorted(df_dict.items(), key=operator.itemgetter(1))
</code></pre>
</div>
<span class="comment-copy">May I know why my question got down voted?</span>
<span class="comment-copy">I didn't, but I assume that is because you have not shown an attempt of your own.</span>
<span class="comment-copy">Very nice solution !</span>
<span class="comment-copy">Thank you very much!</span>
<span class="comment-copy">@schwobaseggl This is a beauty. Elegant!</span>
