<div class="post-text" itemprop="text">
<p>Most of my small-scale project worked fine using dictionaries, so changing it now would basically mean starting over.</p>
<p>Let's say I have two different dictionaries(dict1 and dict2).</p>
<p>One being: </p>
<pre><code>{'the dog': 3, 'dog jumped': 4, 'jumped up': 1, 'up onto': 8, 'onto me': 13}
</code></pre>
<p>Second one being: </p>
<pre><code>{'up': 12, 'dog': 22, 'jumped': 33}
</code></pre>
<p>I want to find wherever the first word of the first dictionary is equal to the word of the second one. These 2 dictionaries don't have the same length, like in the example. Then after I find them, divide their values.</p>
<p>So what I want to do, sort of using a bit of Java is:</p>
<pre><code>for(int i = 0;i&lt;dict1.length(),i++){
    for(int j = 0;j&lt;dict2.length(),j++){
        if(dict1[i].contains(dict2[j]+" ") // not sure if this works, but this
                                           // would theoretically remove the 
                                           // possibility of the word being the 
                                           // second part of the 2 word element
            dict1[i] / dict2[j]
</code></pre>
<p>What I've tried so far is trying to make 4 different lists. A list for <code>dict1</code> keys, a list for <code>dict1</code> values and the same for <code>dict2</code>. Then I've realized I don't even know how to check if <code>dict2</code> has any similar elements to <code>dict1</code>.</p>
<p>I've tried making an extra value in the dictionary (a sort of index), so it would kind of get me somewhere, but as it turns out <code>dict2.keys()</code> isn't iterable either. Which would in turn have me believe using 4 different lists and trying to compare it somehow using that is very wrong. </p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries don't have any facilities at all to handle parts of keys. Keys are opaque objects. They are either there or not there.</p>
<p>So yes, you would loop over all the keys in the first dictionary, extract the first word, and then test if the other dictionary has that first word as a key:</p>
<pre><code>for key, dict1_value in dict1.items():
    first_word = key.split()[0]  # split on whitespace, take the first result
    if first_word in dict2:
        dict2_value = dict2[first_word]
        print(dict1_value / dict2_value)
</code></pre>
<p>So this takes every key in <code>dict1</code>, splits off the first word, and tests if that word is a key in <code>dict2</code>. If it is, get the values and print the result.</p>
<p>If you need to test those first words more often, you could make this a bit more efficient by first building another structure to to create an index from first words to whole keys. Simply store the first words every key of the first dictionary, in a new dictionary:</p>
<pre><code>first_to_keys = {}
for key in dict1:
    first_word = key.split()[0]
    # add key to a set for first_word (and create the set if there is none yet)
    first_to_keys.setdefault(first_word, set()).add(key)
</code></pre>
<p>Now <code>first_to_key</code> is a dictionary of first words, pointing to sets of keys (so if the same first word appears more than once, you get <em>all</em> full keys, not just one of them). Build this index once (and update the values each time you add or remove keys from <code>dict1</code>, so keep it up to date as you go).</p>
<p>Now you can compare that mapping to the other dictionary:</p>
<pre><code>for matching in first_to_key.keys() &amp; dict2.keys():
    dict2_value = dict2[matching]
    for dict1_key in first_to_key[matching]:
        dict1_value = dict1[dict1_key]
        print(dict1_value / dict2_value)
</code></pre>
<p>This uses the keys from two dictionaries as <em>sets</em>; the <code>dict.keys()</code> object is a <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">dictionary view</a> that lets you apply set operations. <code>&amp;</code> gives you the <em>intersection</em> of the two dictionary key sets, so all keys that are present in both.</p>
<p>You only need to use this second option if you need to get at those first words more often. It gives you a quick path in the other direction, so you could loop over <code>dict2</code>, and quickly go back to the first dictionary again.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using the <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer"><code>str.startswith</code></a> method of strings</p>
<pre><code>for phrase, val1 in dict1.items():
    for word, val2 in dict2.items():
        if phrase.startswith(word):
            print(val1/val2)
</code></pre>
</div>
<span class="comment-copy">This is hugely inefficient; why loop over both dictionaries when you could just test if the first word is present in the other dict? Also, <code>str.startswith()</code> is true for prefixes of words too, without taking into account word boundaries. Note that the OP at least added a space first.</span>
<span class="comment-copy">@MartijnPieters so how do I check if the word is present in the other dict?</span>
<span class="comment-copy">@Nephilim: Just use containment testing with <code>in</code>: <code>key in dict</code></span>
<span class="comment-copy">@Nephilim: and the answer to such questions are a short search away: <a href="//stackoverflow.com/q/1602934">Check if a given key already exists in a dictionary</a></span>
<span class="comment-copy">@MartijnPieters guess I have no idea how to search for things like that. I've scoured through dozens of -2 and +1 threads and never stumbled upon such a popular thread. Thank you. I'm trying to implement this right now.</span>
