<div class="post-text" itemprop="text">
<p>I have list with <code>n</code> multiple lists.</p>
<pre><code>data = [
    [1, 2, 3, 4, 5, 6, 7, 8],
    [2, 6, 3, 5, 9, 1, 1, 1, 2, 4, 5],
    [8, 1, 4, 1, 2, 3, 4, 2, 5]
    [3, 9, 1, 2, 2, 1, 1, 5, 9, 3]
]
</code></pre>
<p>How can I efficiently compare them and generate a list which always contains the highest value at the current position?
I don't know how I can do this since the boundaries for each list are different.</p>
<p>The output for the above example should be a list with these values:</p>
<pre><code>[8,9,4,5,9,6,7,8,9,4,5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most idiomatic approach would be transposing the 2D list and calling <code>max</code> on each row in the transposed list. But in your case, you're dealing with <em>ragged lists</em>, so <code>zip</code> cannot be directly applied here (it zips upto the shortest list only).</p>
<p>Instead, use <code>itertools.zip_longest</code> (<code>izip_longest</code> for python 2), and then apply <code>max</code> using <code>map</code> - </p>
<pre><code>from itertools import zip_longest
r = list(map(max, zip_longest(*data, fillvalue=-float('inf'))))
</code></pre>
<p>Or, using <a href="https://stackoverflow.com/questions/48156643/find-highest-values-in-n-unequal-lists/48156692#comment83292333_48156692">@Peter DeGlopper's suggestion</a>, with a list comprehension - </p>
<pre><code>r = [max(x) for x in zip_longest(*data, fillvalue=-float('inf'))]
</code></pre>
<p></p>
<pre><code>print(r)
[8, 9, 4, 5, 9, 6, 7, 8, 9, 4, 5]
</code></pre>
<p>Here, I use a <code>fillvalue</code> parameter to fill missing values with negative infinity. The intermediate result looks something like this - </p>
<pre><code>list(zip_longest(*data, fillvalue=-float('inf')))

[(1, 2, 8, 3),
 (2, 6, 1, 9),
 (3, 3, 4, 1),
 (4, 5, 1, 2),
 (5, 9, 2, 2),
 (6, 1, 3, 1),
 (7, 1, 4, 1),
 (8, 1, 2, 5),
 (-inf, 2, 5, 9),
 (-inf, 4, -inf, 3),
 (-inf, 5, -inf, -inf)]
</code></pre>
<p>Now, applying <code>max</code> becomes straightforward - just do it over each row and you're done.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">zip_longest</a> is your friend in this case.</p>
<pre><code>from itertools import zip_longest

data = [
    [1, 2, 3, 4, 5, 6, 7, 8],
    [2, 6, 3, 5, 9, 1, 1, 1, 2, 4, 5],
    [8, 1, 4, 1, 2, 3, 4, 2, 5],
    [3, 9, 1, 2, 2, 1, 1, 5, 9, 3],
]

output = list()

for x in zip_longest(*data, fillvalue=0):
  output.append(max(x))

print(output)
&gt;&gt;&gt; [8, 9, 4, 5, 9, 6, 7, 8, 9, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding a <code>pandas</code> solution </p>
<pre><code>import pandas as pd 

pd.DataFrame(data).max().astype(int).tolist()
Out[100]: [8, 9, 4, 5, 9, 6, 7, 8, 9, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need any external module , Just use some logic and you go :</p>
<pre><code>data = [
    [1, 2, 3, 4, 5, 6, 7, 8],
    [2, 6, 3, 5, 9, 1, 1, 1, 2, 4, 5],
    [8, 1, 4, 1, 2, 3, 4, 2, 5],
    [3, 9, 1, 2, 2, 1, 1, 5, 9, 3]
]

new_data={}
for j in data:
    for k,m in enumerate(j):
        if k not in new_data:
            new_data[k] = [m]
        else:
            new_data[k].append(m)




final_data=[0]*len(new_data.keys())

for key,value in new_data.items():
    final_data[key]=max(value)

print(final_data)
</code></pre>
<p>output:</p>
<pre><code>[8, 9, 4, 5, 9, 6, 7, 8, 9, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.izip_longest</code> (<code>itertools.zip_longest</code> in Python3):</p>
<p>Python2:</p>
<pre><code>import itertools
data = [
[1, 2, 3, 4, 5, 6, 7, 8],
[2, 6, 3, 5, 9, 1, 1, 1, 2, 4, 5],
[8, 1, 4, 1, 2, 3, 4, 2, 5],
[3, 9, 1, 2, 2, 1, 1, 5, 9, 3],
]
new_data = [max(filter(lambda x:x, i)) for i in itertools.izip_longest(*data)]
</code></pre>
<p>Output:</p>
<pre><code>[8, 9, 4, 5, 9, 6, 7, 8, 9, 4, 5]
</code></pre>
<p>Python3:</p>
<pre><code>import itertools
data = [
[1, 2, 3, 4, 5, 6, 7, 8],
[2, 6, 3, 5, 9, 1, 1, 1, 2, 4, 5],
[8, 1, 4, 1, 2, 3, 4, 2, 5],
[3, 9, 1, 2, 2, 1, 1, 5, 9, 3],
]
new_data = [max(filter(None, i)) for i in itertools.zip_longest(*data)]
</code></pre>
</div>
<span class="comment-copy">Will the numbers always be &gt;= 0?</span>
<span class="comment-copy">Do you accept pandas' answer ?</span>
<span class="comment-copy">@n00b.exe , I don't want that you should accept my answer , please remove accept mark from there.</span>
<span class="comment-copy">I accepted @C0LDSPEED's Answer. But all of you helped me a lot !</span>
<span class="comment-copy">@n00b.exe that was my main purpose for giving answer to your question , just understand the logic and then use any lib or module :)</span>
<span class="comment-copy">I prefer a comprehension over <code>list(map(...))</code>: eg <code>r = [max(candidates) for candidates in itertools.izip_longest(*data, fillvalue=float('-inf'))]</code> - but this is basically what I had in my edit widget.</span>
<span class="comment-copy">@PeterDeGlopper Thanks, that's a good suggestion, I appreciate it.</span>
<span class="comment-copy">I guess the list comp is a little more readable than using <code>list</code> and <code>map</code>, but IMHO <code>map</code> is ok here because you're calling <code>max</code>, a built-in function written in C. OTOH, using <code>map</code> or <code>filter</code> with a <code>lambda</code> is not so efficient because it involves an extra Python function call per iteration compared to using a list comp.</span>
<span class="comment-copy">I prefer comprehensions for style reasons, I don't think I've ever had a case where I had reason to measure the performance of them vs <code>map</code> or <code>filter</code>. Built-ins when possible is always good advice, eg IIRC I saw about a 10% speedup from using <code>itemgetter</code>/<code>attrgetter</code> rather than a lambda to define a custom <code>sort</code> key.</span>
<span class="comment-copy">@PeterDeGlopper I tend to agree. <code>map</code> (in Python 3) is great when you can use a generator, but a list comp is more readable (unless you're coming from a functional language like Haskell). However, <code>map</code> <i>is</i> noticeably faster, especially in Python 3, see <a href="https://pastebin.com/2HBrcws1" rel="nofollow noreferrer">here</a> for some <code>timeit</code> code.</span>
<span class="comment-copy">Nice one! Like this.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ hah ,Thank you :-)</span>
<span class="comment-copy">I don't see your point. <code>itertools</code> is not an external module, you just need to import it.</span>
<span class="comment-copy">I'm not quite sure I see the benefit in rewriting the same thing that can be succinctly achieved by a function, for the sake of "simplicity" (where is the simplicity here?)</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ , I never downvote and i never expect upvote nor i give answer for upvote or downvote. Thanks for comment. I am not in race of earning points , I just enjoy  coding :)</span>
<span class="comment-copy">And thanks for deleting comment.</span>
<span class="comment-copy">I guess it's good to show how to perform this transposition using explicit loops and an extra collection (<code>new_data</code>), but I bet <code>zip_longest</code> is faster. Note that <code>itertools</code> is (usually) compiled into the CPython interpreter, so importing it doesn't even require an extra disk access. See <a href="https://docs.python.org/3/library/sys.html#sys.builtin_module_names" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.builtin_module_names</a> and run <code>import sys; sys.builtin_module_names</code> to get a list of those modules.</span>
<span class="comment-copy"><code>filter(None, i)</code></span>
<span class="comment-copy">You're right about <code>zip_longest</code> but I think your <code>filter</code> does a little too much. That will drop 0 from the list, which is maybe safe here (all the sample data is positive integers) but I'd prefer not to get into the habit when working with numeric data. I like specifying the fill value as something that can never be the max, but <code>filter(lambda x: x is not None, i)</code> would be safer if you want to use the default behavior of filling with <code>None</code> and then filter that out.</span>
<span class="comment-copy">@PeterDeGlopper Yep, good point. The filter removes falsey values, including 0 and 0.0. This could even result in a <code>ValueError</code> being thrown if <code>max</code> ever receives an empty list.</span>
