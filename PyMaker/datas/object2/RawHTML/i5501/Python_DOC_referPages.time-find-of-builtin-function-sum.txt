<div class="post-text" itemprop="text">
<p>I'm trying to find out how much time it takes to execute a Python statement, so I looked online and found that the standard library provides a module called <a href="http://docs.python.org/library/timeit.html" rel="noreferrer">timeit</a> that purports to do exactly that:</p>
<pre><code>import timeit

def foo():
    # ... contains code I want to time ...

def dotime():
    t = timeit.Timer("foo()")
    time = t.timeit(1)
    print "took %fs\n" % (time,)

dotime()
</code></pre>
<p>However, this produces an error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in dotime
  File "/usr/local/lib/python2.6/timeit.py", line 193, in timeit
    timing = self.inner(it, self.timer)
  File "&lt;timeit-src&gt;", line 6, in inner
NameError: global name 'foo' is not defined
</code></pre>
<p>I'm still new to Python and I don't fully understand all the scoping issues it has, but I don't know why this snippet doesn't work. Any thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>Change this line:</p>
<pre><code>t = timeit.Timer("foo()")
</code></pre>
<p>To this:</p>
<pre><code>t = timeit.Timer("foo()", "from __main__ import foo")
</code></pre>
<p>Check out the link you provided at the very bottom.</p>
<blockquote>
<p>To give the timeit module access to functions you define, you can pass a setup parameter which contains an import statement:</p>
</blockquote>
<p>I just tested it on my machine and it worked with the changes.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this hack:</p>
<pre><code>import timeit

def foo():
    print 'bar'

def dotime():
    t = timeit.Timer("foo()")
    time = t.timeit(1)
    print "took %fs\n" % (time,)

import __builtin__
__builtin__.__dict__.update(locals())

dotime()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3, you can use <code>globals=globals()</code> </p>
<pre><code>t = timeit.Timer("foo()", globals=globals())
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/timeit.html#examples" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>Another option is to pass <code>globals()</code> to the <code>globals</code> parameter, which
  will cause the code to be executed within your current global
  namespace. This can be more convenient than individually specifying
  imports</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>t = timeit.Timer("foo()", "from __main__ import foo")
</code></pre>
<p>Since timeit doesn't have your stuff in scope.</p>
</div>
<div class="post-text" itemprop="text">
<p>add into your setup "import thisfile; "</p>
<p>then when you call the setup function myfunc() use  "thisfile.myfunc()"</p>
<p>eg  "thisfile.py"</p>
<pre><code>def myfunc():

 return 5

def testable(par):

 pass



t=timeit.timeit(stmt="testable(v)",setup="import thisfile; v=thisfile.myfunc();").repeat(10)

print( t )
</code></pre>
</div>
<span class="comment-copy">It works! However, this is a pretty stupid interface design if I have to both supply the command I wish to time as a string and to import the <b>main</b> module for it to work.</span>
<span class="comment-copy">Python namespacing is utter madness to me.  I assume that it makes sense to a certain sort of mind, but that sort of mind isn't one I happen to posess.  Thank $DEITY for Ruby, in my case.</span>
<span class="comment-copy">womble, this is a wart, not a general python namespace problem.  Main thread:  <a href="http://writeonly.wordpress.com/2008/09/12/using-python-timeit-to-time-functions/" rel="nofollow noreferrer">writeonly.wordpress.com/2008/09/12/â€¦</a>  has links to other discussions about this.</span>
<span class="comment-copy">@Gregg The link is no longer accessible (error 404). What was in that discussion?</span>
<span class="comment-copy">those links are all dead</span>
<span class="comment-copy">This hack is great if you'd otherwise need complex setup code.</span>
<span class="comment-copy">Better than the startup code alternative given in other replies (i.e. better than <code>t = timeit.Timer("foo()", "from __main__ import foo")</code>). Specially if you want to test several different functions, it will save a lot of typing!</span>
<span class="comment-copy">I've got about 20 imports, so passing them as an argument gets messy quick. This hack is awesome!</span>
<span class="comment-copy">Great! On python3 however you need <code>import builtins</code> and 'builtins.__dict__.update(locals())'</span>
<span class="comment-copy">Works for Python 3 only. <code>globals</code> not a parameter for Python 2's <code>timeit</code></span>
