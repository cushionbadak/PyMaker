<div class="post-text" itemprop="text">
<p>I was trying to insert list values from one list to another, but in a specific order, where dates[0] entered text[1], dates[1] entered text[3] and so on.</p>
<pre><code>dates=['21/11/2044', '31/12/2018', '23/9/3000', '25/12/2007']

text=['What are dates? ', ', is an example.\n', ', is another format as
well.\n', ', also exists, but is a bit ludicrous\n', ', are examples but more commonly used']
</code></pre>
<p>I tried this method:</p>
<pre><code>for j in range(len(text)):
  for i in range(len(dates)):
   text.insert(int((j*2)+1), dates[i])
</code></pre>
<p>This was the result, which was incorrect:</p>
<pre><code>['What are dates? ', '25/12/2007', '23/9/3000', '25/12/2007', '23/9/3000',
'25/12/2007', '23/9/3000', '25/12/2007', '23/9/3000', '25/12/2007',
'23/9/3000', '31/12/2018', '21/11/2044', '31/12/2018', '21/11/2044',
'31/12/2018', '21/11/2044', '31/12/2018', '21/11/2044', '31/12/2018',
'21/11/2044', ', is an example.\n', ', is another format as well.\n', ',
also exists, but is a bit ludicrous\n', ', are examples but more commonly used']
</code></pre>
<p>I was trying to get back a list that reads like:</p>
<pre><code>['What are dates? ','21/11/2044', 'is an example.\n','31/12/2018', ', is
another format as well.\n','23/9/3000', ', also exists, but is a bit
ludicrous\n', '25/12/2007',', are examples but more commonly used']
</code></pre>
<p>Is there a way to insert dates[i] into text[2*j+1] in the way I wanted? Should I even use a <code>for</code> loop, or is there another way without listing everything in dates as well?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simpler way to achieve this is using <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a> in Python 3.x (or <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>izip_longest</code></a> in Python 2.x) as:</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest # for Python 3.x

&gt;&gt;&gt; # For Python 2.x
&gt;&gt;&gt; # from itertools import izip_longest

&gt;&gt;&gt; dates=['21/11/2044', '31/12/2018', '23/9/3000', '25/12/2007']
&gt;&gt;&gt; text=['What are dates? ', ', is an example.\n', ', is another format as well.\n', ', also exists, but is a bit ludicrous\n', ', are examples but more commonly used']

&gt;&gt;&gt; [w for x in zip_longest(text, dates, fillvalue='') for w in x if w]
['What are dates? ', '21/11/2044', ', is an example.\n', '31/12/2018', ', is another format as well.\n', '23/9/3000', ', also exists, but is a bit ludicrous\n', '25/12/2007', ', are examples but more commonly used']
</code></pre>
<hr/>
<p>The issue with your code is that you have nested <code>for</code> loops, and that's why for each index of <code>j</code>, all values of <code>dates</code> are getting added.</p>
</div>
<div class="post-text" itemprop="text">
<p>For your specific example of wanting to fit the dates in every other element you can use <code>zip</code>:</p>
<pre><code>parts = zip(['a', 'b', 'c', 'd'], ['d1', 'd2', 'd3'])
text = [x for y in parts for x in y]
# ['a', 'd1', 'b', 'd2', 'c', 'd3']
</code></pre>
<p>You may need to use <code>itertools.izip_longest</code> and/or handle unequal lengths between the list or you'll see results like the above where <code>'d'</code> was left off the end. The second line is ugly list comprehension magic to flatten a list of lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>The double for loop is the problem here; just using a single for loop, as in</p>
<pre><code>for i in range(len(dates)):
    text.insert(int((i*2)+1), dates[i])
</code></pre>
<p>should do the trick.</p>
<p>However, if you are planning on the second list ending up as a string, it might be simpler to use <code>.format</code>, as in</p>
<pre><code>text = 'Date with one format is {} and date with another format is {}.'.format(*dates)
</code></pre>
<p>which will give you</p>
<pre><code>'Date with one format is 21/11/2044 and date with another format is 31/12/2018.'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe it is not the most elegant version, but this works for example:</p>
<pre><code>from itertools import zip_longest


dates=['21/11/2044', '31/12/2018', '23/9/3000', '25/12/2007']

text=['What are dates? ', ', is an example.\n', ', is another format as well.\n', ', also exists, but is a bit ludicrous\n', ', are examples but more commonly used']


l3 = list()
for i, j in zip_longest(text, dates, fillvalue=None):
    if i is not None:
        l3.append(i)
    if j is not None:
        l3.append(j)

print(l3)
</code></pre>
<p>zip_longest from the standard itertools module zips 2 lists of uneven length together and fills the missing values with "fillvalue". If you just discard that fillvalue, you are good to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution which is pretty easy to understand</p>
<pre><code>counter = 0
while counter &lt; len(dates):
    text.insert(counter + counter + 1, dates[counter])
    counter += 1
</code></pre>
<p>Essentially, <code>.insert()</code> is used to just append to a list in a specific position.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>result = [ ]
for x in enumerate(dates, text):
   result.append(dates[x]).append(text[x])
</code></pre>
</div>
<span class="comment-copy">Thank you for the reply, the code works as intended. However, I was doing a project in Al Sweigart's book, where I used regular expressions to find dates of different formats, i.e.  5/14/2000, 2016/5/16, replace them in a standard format, D/M/Y. The book hinted using the regex.sub() function to find and replace these unstandardised date formats, and I used :<code>'foregex=re.compile(r'\d{1,4}/\d{1,2}/\d{1,4}') for i in range(len(dates)):   print(foregex.sub(dates[i], text)) </code>,  which didn't work. Is there any way to use the info from previous chapters (currently chap. 7) to get my intended list?</span>
<span class="comment-copy">You'll have to write a very smart regex in order to identify the difference between " 5/14/2000" and "2016/5/16" because Python doesn't know what is the year, and what is the month. For Python all are strings. Simpler way to do it is using <code>dateutil</code> library as used here: <a href="https://stackoverflow.com/a/470303/2063361">stackoverflow.com/a/470303/2063361</a> .However if you want to regex only, you should create a separate question, and the community, I am noot that good in regex :)</span>
<span class="comment-copy">zip will skip the last element from one the list here</span>
<span class="comment-copy">Yep, that's why I mentioned that that would happen. I upvoted your answer since you took the time to do the full answer instead of my shortcut.</span>
