<div class="post-text" itemprop="text">
<p>I have three dicts as given below,</p>
<pre><code>d1  = {1:'a',2:'k',3:'l'}
d2 =  {1:'j',2:'k',3:'j',4:'n'}
d3 =  {1:'j',2:'k',3:'j',4:'i',5:'j'}
</code></pre>
<p>Is there a way that these three dictionaries can be merged that d1 is written same it is written above in d_merged and then same keys from d2 are written by adding 1 in max key of d1 and likewise same keys from d3 will be appended in d_merged by adding 1 in max key of d_merged as shown below:</p>
<pre><code>d_merged = {1:'a',2:'k',3:'l',4:'j',5:'k',6:'j',7:'n',8:'j',9:'k',10:'j',11:'i',12:'j'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about iterating over the dicts and the items in each dict and keeping track of the numbering with a helper variable:</p>
<pre><code>d1  = {1:'a',2:'k',3:'l'}
d2 =  {1:'j',2:'k',3:'j',4:'n'}
d3 =  {1:'j',2:'k',3:'j',4:'i',5:'j'}
d_merged = {}
count = 1

for d in d1, d2, d3:
    for k, val in sorted(d.items()):
        d_merged[count] = val
        count += 1

print(d_merged)
</code></pre>
<p>The output looks like this:</p>
<pre><code>{1: 'a', 2: 'k', 3: 'l', 4: 'j', 5: 'k', 6: 'j', 7: 'n', 8: 'j', 9: 'k', 10: 'j', 11: 'i', 12: 'j'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can reduce the task to merging two dictionaries into one and then use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a> and the binary merging function in order to merge your entire list of dictionaries:</p>
<pre><code>from functools import reduce  # Python3, no import needed in Python2

def merge(d1, d2):
    mk = max(d1) if d1 else 0  # max key of d1
    return dict(list(d1.items()) + [(mk+k, d2[k]) for k in d2])

reduce(merge, [d1, d2, d3])  # reduce dicts
# {1: 'a', 2: 'k', 3: 'l', 4: 'j', 5: 'k', 6: 'j', 7: 'n', 8: 'j', 9: 'k', 10: 'j', 11: 'i', 12: 'j'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One simple way:</p>
<pre><code>dicts = [
    d1,
    {k + max(d1): v for k, v in d2.items()},
    {k + max(d2): v for k, v in d3.items()},
]

d_merged = {k: v for d in dicts for k, v in d.items()}
</code></pre>
<p>More generally:</p>
<pre><code>dicts = [d1, d2, d3]

dicts = ([dicts[0]] +
    [{k + max(a): v for k, v in b.items()}
        for a, b in zip(dicts[:-1], dicts[1:])])

d_merged = {k: v for d in dicts for k, v in d.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the order could be of importance, here a solution using <code>OrderedDict</code>:</p>
<pre><code>from collections import OrderedDict

d1  = {1:'a',2:'k',3:'l'}
d2 =  {1:'j',2:'k',3:'j',4:'n'}
d3 =  {1:'j',2:'k',3:'j',4:'i',5:'j'}

d1o = OrderedDict(sorted(d1.items(), key=lambda t: t[0]))
d2o = OrderedDict(sorted(d2.items(), key=lambda t: t[0]))
d3o = OrderedDict(sorted(d3.items(), key=lambda t: t[0]))

d_OrderedList=[]
d_OrderedList.extend(d1o.values())
d_OrderedList.extend(d2o.values())
d_OrderedList.extend(d3o.values())

d_merged = OrderedDict()
for i,v in enumerate(d_OrderedList):
    d_merged[i+1] = v
</code></pre>
<p>Output:</p>
<pre><code>OrderedDict([(1, 'a'), (2, 'k'), (3, 'l'), (4, 'j'), (5, 'k'), (6, 'j'), (7, 'n'), (8, 'j'), (9, 'k'), (10, 'j'), (11, 'i'), (12, 'j')])
print(d_merged)
</code></pre>
</div>
<span class="comment-copy">Have you attempted this? If yes then please post so that we can work with that.</span>
<span class="comment-copy">Thanks for you help, it works fine.</span>
