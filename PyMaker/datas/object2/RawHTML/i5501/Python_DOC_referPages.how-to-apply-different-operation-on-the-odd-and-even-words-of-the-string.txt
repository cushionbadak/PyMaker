<div class="post-text" itemprop="text">
<p>I am trying to update my string such that:</p>
<ul>
<li>every word on the odd position becomes uppercase.</li>
<li>every word on the even position gets reversed</li>
</ul>
<p>For example, if my input string is:</p>
<pre><code>n = 'what is the boarding time in bangalore station'
</code></pre>
<p>I want my output string to be:</p>
<pre><code>WHAT si THE gnidraob TIME ni BANGALORE noitats
</code></pre>
<p>Here's the code I tried:</p>
<pre><code>n = 'what is the boarding time in bangalore station'
m = n.split(" ")
k=m[0::2]
for i in k:
    print(i.upper())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your solution is incomplete. Instead of slicing every alternate word and performing one kind of operation at a time, iterate over each one in turn, handling it as appropriate.</p>
<p>Here's one simple way of tackling your problem. Define a little function to do this for you. </p>
<ol>
<li>split the string into words</li>
<li>for each word, check if it is an even word. If it is, then uppercase it. If not, reverse it</li>
<li>join the transformed words into a single string</li>
</ol>
<p></p>
<pre><code>def f(n):
    for i, w in enumerate(n.split()):
        if i % 2 == 0:
            yield w.upper()    # uppercase even words
        else:
            yield w[::-1]      # reverse odd words
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; ' '.join(f('what is the boarding time in bangalore station'))
'WHAT si THE gnidraob TIME ni BANGALORE noitats'
</code></pre>
<p>What <code>f</code> does is split the string into a list of words. <a href="https://docs.python.org/3.3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> transforms the list into a list of (index, word) tuples. Use the index to determine whether the word is an odd or even word. <code>yield</code> transforms the function into a generator, yielding one word at a time from the loop. Finally, <code>str.join</code> joins each word back into a single string.</p>
<p>Note that there are other ways to accomplish this. I leave them as an exercise to you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><strong><code>zip</code></strong></a> with the <em>list comprehension</em> expression (along with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a>) to get the desired string. For example:</p>
<pre><code>&gt;&gt;&gt; my_str = "what is the boarding time in bangalore station"
&gt;&gt;&gt; words = my_str.split()  # list of words

&gt;&gt;&gt; ' '.join(['%s %s'%(x.upper(), y[::-1]) for x, y in zip(words[::2], words[1::2])])
'WHAT si THE gnidraob TIME ni BANGALORE noitats'
</code></pre>
<p><strong>Note:</strong> Here I am using <em>list comprehension</em> instead of <em>generator</em> expression because though generator expressions are more efficient but that is not the case when used with <code>str.join</code>. In order to know the reason for this weird behavior, please take a look at: </p>
<ul>
<li><p><a href="https://stackoverflow.com/a/9061024/2063361"><em>Raymond Hettinger's answer for "List comprehension without [ ] in Python"</em></a></p></li>
<li><p><a href="https://stackoverflow.com/a/37782238/2063361"><em>Blckknght's answer for "List vs generator comprehension speed with join function"</em></a> </p></li>
</ul>
<p>Most of the comprehension based answers here are using <em>generator</em> though they are referring it as <em>list comprehension</em> :D :D</p>
</div>
<div class="post-text" itemprop="text">
<p>A little be more descriptive in one single line:</p>
<pre><code>print(' '.join([w[::-1] if i % 2 else w.upper() for i, w in enumerate(n.split())]))
</code></pre>
<p>OUTPUT:</p>
<pre><code>'WHAT si THE gnidraob TIME ni BANGALORE noitats'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another list comprehension solution:</p>
<pre><code>n = 'what is the boarding time in bangalore station'
print(' '.join(word[::-1] if ind % 2 == 1 else word.upper() for ind, word in enumerate(n.split())))
</code></pre>
<p>Output:</p>
<pre><code>'WHAT si THE gnidraob TIME ni BANGALORE noitats'
</code></pre>
<p>Another solution:</p>
<pre><code>upper_words = [item.upper() for item in n.split()[0::2]]
reverse_words = [item[::-1] for item in n.split()[1::2]]
print(' '.join(word[0] + ' ' + word[1] for word in zip(upper_words, reverse_words)))
</code></pre>
<p>Output:</p>
<pre><code>'WHAT si THE gnidraob TIME ni BANGALORE noitats'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>taking not to high level, just by if-else:</p>
<pre><code>n = 'what is the boarding time in bangalore station'
m = list(n.split(' '))
for i in range(len(m)):
    if i%2==0:
      print(m[i].upper(),end=' ')
    else:
        print(m[i][::-1].lower(),end=' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to answer your question using comprehension : </p>
<pre><code>n = 'what is the boarding time in bangalore station'
b = n.split()
final = ' '.join(map(lambda x: ' '.join(x), ((k.upper(), v[::-1]) for k, v in zip(b[::2], b[1::2]))))

print(final)
</code></pre>
<p>Output:</p>
<pre><code>'WHAT si THE gnidraob TIME ni BANGALORE noitats'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about:</p>
<pre><code>n = 'what is the boarding time in bangalore station'

' '.join([token.upper() if i%2==0 else token[::-1] 
          for i, token in enumerate(n.split())
         ]
        )
</code></pre>
<ol>
<li>Iterate with <code>enumerate()</code> to keep a count.</li>
<li>Check the odd vs even with <code>i%2</code></li>
<li>Uppercase if even, reverse string (i.e. <code>str[::-1]</code>) if odd</li>
<li>Join the list of substrings with <code>' '.join([...])</code></li>
</ol>
</div>
<span class="comment-copy">And what exactly is the problem with your solution?</span>
<span class="comment-copy">@goodvibration I don't know how to reverse the odd strings and join it.</span>
<span class="comment-copy"><code>' '.join(x[::-1] if i % 2 else x.upper() for i, x in enumerate(n.split()))</code>.</span>
<span class="comment-copy">If your question was answered, please <a href="https://stackoverflow.com/help/someone-answers">vote on, and accept the most helpful one</a>. You can accept an answer by clicking the grey check next to it to toggle it green. You can only accept one.</span>
<span class="comment-copy">As usual, your Python is terrific :)</span>
<span class="comment-copy"><code>list comprehension</code> vs. <code>generator expression</code> with <code>str.join()</code> thing is very interesting. Not easy to discover. Thank you. Regarding the same, I've just read Raymond Hettinger's answer <a href="https://stackoverflow.com/a/9061024/8709791">here</a>. I'm wondering if it's the same with Python 3.x.</span>
<span class="comment-copy">@srig Yes, you'll see the same behavior in Python 3 as well.</span>
<span class="comment-copy">Thanks.I am new to Python. Your approach is the easiest.</span>
<span class="comment-copy">Wow. this is really easy to understand. Thank you</span>
