<div class="post-text" itemprop="text">
<p>I need a decorator to log method calls. I`ll use something like this (print will be replaced by sending data somewhere):</p>
<pre><code>def log(function):
    varnames = function.__code__.co_varnames[:function.func_code.co_argcount]

    defaults = {}
    varnames_list = list(varnames)
    for default in reversed(foo.func_defaults):
        defaults[varnames_list.pop()] = default

    @functools.wraps(function)
    def decorator(*arg, **kargs):
        result = function(*arg, **kargs)
        incoming_args = defaults
        incoming_args.update(kargs)
        for i, value in enumerate(arg):
            incoming_args[varnames[i]] = value
        obj_to_log = {'function':function.__name__, 'incoming_args':incoming_args, "result":result}
        print('log', obj_to_log)
        return result

    return decorator
    pass
</code></pre>
<p>It works fine, but it shadows original method signature:</p>
<pre><code>def print_function_args(function):
    argcount = function.func_code.co_argcount
    print(function.__name__,
        'argnames:', function.__code__.co_varnames[:argcount],
        'defaults:', function.func_defaults)


def foo(a, b='default', c=42):
    pass

print_function_args(foo)
# prints: foo argnames: ('a', 'b', 'c') defaults: ('default', 42)

@log
def bar(a, b='default', c=42):
    pass

print_function_args(bar)
# bar argnames: () defaults: None
</code></pre>
<p>I have to keep method signature untouched, so</p>
<p><strong>Is there a way to wrap function with decorator, keeping it`s signature and docs?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>The main problem here is that you're grabbing the function parameters directly from the function's code object. This is not really what you want - you aren't actually interested in the function's <em>code</em>, you're interested in the function itself. Decorators have a special <code>__wrapped__</code> attribute which points to the original function; but code objects do not. Therefore you should use the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code> module</a> instead, which will take care of most things for you and give you the result you expect.</p>
<p>Unfortunately, maintaining the decorated function's signature must be done manually, by assigning a <a href="https://docs.python.org/3/library/inspect.html#inspect.Signature" rel="nofollow noreferrer">signature object</a> to <code>decorator.__signature__</code>.</p>
<p>Here is an implementation of the <code>log</code> decorator with python 3's <code>inspect</code> module:</p>
<pre><code>def log(function):
    signature = inspect.signature(function)

    @functools.wraps(function)
    def decorator(*args, **kwargs):
        result = function(*args, **kwargs)

        incoming_args = signature.bind(*args, **kwargs)
        incoming_args.apply_defaults()
        incoming_args = dict(incoming_args.arguments)
        obj_to_log = {'function': function.__name__,
                    'incoming_args': incoming_args,
                    "result": result}
        print('log', obj_to_log)

        return result

    # maintain the decorated function's signature
    decorator.__signature__ = signature
    return decorator
</code></pre>
<p>And the <code>print_function_args</code> function can be simplified (and corrected) with <a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="nofollow noreferrer"><code>getfullargspec</code></a>:</p>
<pre><code>def print_function_args(function):
    argspec = inspect.getfullargspec(function)
    print(function.__name__,
        'argnames:', argspec.args,
        'defaults:', argspec.defaults,
        'docstring:', function.__doc__)
</code></pre>
<hr/>
<p>You'll find that everything works as expected now:</p>
<pre><code>def foo(a, b='default', c=42):
    """sample docstring"""

@log
def bar(a, b='default', c=42):
    """sample docstring"""

print_function_args(foo)
print_function_args(bar)

bar(3)
</code></pre>
<pre><code>foo argnames: ['a', 'b', 'c'] defaults: ('default', 42) docstring: sample docstring
bar argnames: ['a', 'b', 'c'] defaults: ('default', 42) docstring: sample docstring
log {'function': 'bar', 'incoming_args': {'a': 3, 'b': 'default', 'c': 42}, 'result': None}
</code></pre>
</div>
<span class="comment-copy">You're using python 2, correct? I don't think this is possible in python 2, but in python 3 it would be easy enough.</span>
<span class="comment-copy">@Rawing yes, i`m using python 2, but migration to 3rd version is planned, so python 3 solution would be welcomed also</span>
