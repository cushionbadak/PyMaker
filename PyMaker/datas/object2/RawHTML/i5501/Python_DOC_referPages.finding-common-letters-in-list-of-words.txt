<div class="post-text" itemprop="text">
<p>I am new to python this is what i am trying to achieve: </p>
<pre><code>letter = 4
word = "Demo Deer Deep Deck Cere Reep Creep Creeps"
split_word = word.split()   
</code></pre>
<p>I am trying to achieve words that can be formed by any 4 common letters for example: </p>
<pre><code>Deer Deep Reep [these can be formed by 4 letters d, e, r &amp; p]
Creep Cere Reep [these can be formed by 4 letters c, r, e, p]
</code></pre>
<p>Is there easy way to do this in python without using regex.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to do this in a few steps, I think.</p>
<p>First, you need to figure out what your set of letters is. You could use the whole alphabet, but I'd recommend against that if you can avoid it. I'd try using a set:</p>
<pre><code>letter_pool = set([ltr.lower() for ltr in word if ltr != " "])
</code></pre>
<p>Next, you need to iterate through all combinations of four letters in your pool and check which words can be formed with them. This is why it's probably better not to use the whole alphabet; this is a lot of combinations. In the example below, I'm storing the results in a dictionary keyed by the combination of letters, but you could modify that to suit your needs.</p>
<pre><code>results = {}
import itertools
for combination in itertools.combinations(letter_pool, letter): #in this case, letter=4
   results[combination] = []
   for wrd in split_word:
      for character in wrd:
         if character.lower() not in combination:
            break
      else:
         results[combination].append(wrd)
   if len(results[combination]) == 0:
      del results[combination]
</code></pre>
<p>Note the <code>for-else</code> syntax; it means if the loop does not break, the code in the <code>else</code> clause executes. Basically, for a given combination of letters, this code checks each word and determines if it is composed of just those letters. If it is, it stores that information. If a given combination doesn't form any words, its entry in the dictionary is removed (to save on memory). Note that this is a pretty naive solution and will not scale well. </p>
<p>If you want to print out the results, you can do:</p>
<pre><code>for key in results:
   print ", ".join(results[key]), " [ formed by "+str(key)+"]"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this using <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations</a>:</p>
<pre><code>word = "Demo Deer Deep Deck Cere Reep Creep Creeps"
split_word = word.split() 

from itertools import combinations

letters = {s for it in split_word for s in it.lower()}
out = dict()
for n in range(len(letters)):
    out[n] = {''.join(letters_subset): [word
                                        for word in split_word
                                        if set(word.lower()).issubset(letters_subset)]
          for letters_subset in combinations(letters, n)}
    out[n] = {k: v for k, v in out[n].items() if len(v) &gt; 0}

# Print output
for n, d in out.items():
    for k, v in d.items():
        print('{}:\t{}\t{}'.format(n, k, v))
</code></pre>
</div>
<span class="comment-copy">In your first and third examples, how are "d e r p" common to the words involved? "Deep" doesn't have an "r", and "Reep" doesn't have a "d".</span>
<span class="comment-copy">I don't get how you define common letters. Deer, deep, and reep have 1 common letter, which is E. Cere, reep, and creep have two common letters, E and R. Etc??</span>
<span class="comment-copy">@leeum letters are considered common if they appear in more than one word (I think).</span>
<span class="comment-copy">It doesnt really make sense what you want here.</span>
<span class="comment-copy">@RoadRunner: sorry let me rethink again, i am trying to get words which can be formed with only 4 letters like deer, err, deep &amp; peer [in this case like d, e , r &amp; p]. I think i was not able to explain it right. I will update my question.</span>
