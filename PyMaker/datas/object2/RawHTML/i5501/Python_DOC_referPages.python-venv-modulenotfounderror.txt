<div class="post-text" itemprop="text">
<p>(Before marking me with duplicate question votes, please note that everything that I can find on this question has to do with virtualenv, not venv)</p>
<p><strong>System</strong>:</p>
<ul>
<li>Ubuntu Server 16.04</li>
<li>Python 3.6 installed, Python 3.5 native</li>
</ul>
<p><strong>Background</strong>
(Contrived example, so might have a typo or two, but the idea is the important part)</p>
<p>I have a project in the form of:</p>
<pre><code>Project/
├── __init__.py
└── project
    ├── packageA
    │   ├── fileA.py
    │   └── __init__.py
    └── packageB
        ├── fileB.py
        └── __init__.py
</code></pre>
<p>in fileb.py, I have an import statement such as</p>
<pre><code>import project.packageA.fileA
</code></pre>
<p>I create a venv by; </p>
<pre><code>cd /path/to/Project; python3.6 -m venv .venv; source .venv/bin/activate
</code></pre>
<p>then I run</p>
<pre><code>source project/packageB/fileB.py
</code></pre>
<p>This will give me an error: </p>
<pre><code>ModuleNotFoundError: no module named 'project'
</code></pre>
<p><strong>Attempts to address</strong>: </p>
<ol>
<li>Add the path to "Project" and "project" to $PATH</li>
<li>Modify $PYTHONPATH in the .venv/bin/activate script so that sys.path now points to "Project" and "project"</li>
<li>Completely read the docs <a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">here</a></li>
<li>Verified that os.sys.path shows Project and project paths</li>
</ol>
<p><strong>Question</strong>: It must be possible to do module imports using venv or it would be of zero value -- so what am I fundamentally missing in my setup? (With viritualenv, I just used 'add2virtualenv')</p>
<p>[<strong>Edit</strong> - Showing more detail]</p>
<pre><code># Changes to .venv/bin/activate
PYTHONPATH="/home/steve/Temp/Project:/home/steve/Temp/Project/project:$PYTHONPATH"
export PYTHONPATH

python -c "import os; print(os.sys.path)"
['', '/home/steve/Temp/Project', '/home/steve/Temp/Project/project', .....
</code></pre>
<p>[<strong>Edit2</strong> - adding packageA to PYTHONPATH Works]</p>
<p>If I add 'path/to/packageA' to my PYTHONPATH, the import works. To use this, I would have to add each subpackage to my project -- less than ideal for large projects.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a somewhat murky situation IMHO. My solution to this is: create a setup.py for your project (beneficial anyways), and with activated venv do a "python setup.py develop".</p>
<p>That will add your project to a PTH-file, and thus you can import.</p>
<p>Example for a setup.py, taken from the interwebs:</p>
<pre><code># from http://python-packaging.readthedocs.io/en/latest/minimal.html

from setuptools import setup

setup(name='funniest',
      version='0.1',
      description='The funniest joke in the world',
      url='http://github.com/storborg/funniest',
      author='Flying Circus',
      author_email='flyingcircus@example.com',
      license='MIT',
      packages=['funniest'],
      zip_safe=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This line</p>
<pre><code>​$ source project/packageB/fileB.py
</code></pre>
<p>fails because </p>
<ol>
<li>the <code>import</code> path is messed up, it includes the <code>project</code> folder but it should not</li>
<li><code>project</code> is <em>possibly</em> not in your <code>PYTHONPATH</code></li>
</ol>
<p>To fix it</p>
<p>Step 1) fix the <code>import</code> statement in <code>fileB.py</code>, replace your <code>import</code> with</p>
<pre><code>​import packageA.fileA
</code></pre>
<p>Step 2) Confirm for yourself whether you added <code>project</code> to <code>PYTHONPATH</code> by checking your <code>bash</code> environment</p>
<pre><code>​$ echo $PYTHONPATH     # does it contain `path/to/project`?
</code></pre>
<p>If not temporarily fix it</p>
<pre><code>​$ export PYTHONPATH=path/to/project:$PYTHONPATH   # forget `/path/to/Project` you only need `path/to/Project/project`
</code></pre>
<p>(Note changes to <code>$PATH</code>  are irrelevant to <code>Python package/module</code> searches, so that was a wasted attempt).</p>
<p>Then when you run your script, it will not fail:</p>
<pre><code>$ source project/packageB/fileB.py      # success?!
</code></pre>
<p>By the way it is better to call your python scripts with <code>python</code>:</p>
<pre><code>$ python project/packageB/fileB.py
</code></pre>
<p>Finally, permanently update your virtual environment by editing the <code>activate</code> script in your virtual environment's <code>bin</code> directory. Add the <code>PYTHONPATH</code> export above somewhere near the top. </p>
</div>
<span class="comment-copy">Thank you for the answer. Do you happen to know which "PTH" file it is added? Couldn't I add to that same file independently of setup?</span>
<span class="comment-copy">Well, this seemed to work -- but it is total bull ship - I can't believe a tool would be shipped without an elegant way to deal with something as fundamental as imports -- Anyway, your just the messenger so thanks for getting me out of a bind.</span>
<span class="comment-copy">I have to admit this was always a bit of a nuisance for me as well. OTOH most things I do end up having a setup.py eventually, so.... Apparently virtualenv has something (didn't even know it) called add2virtualenv. Ultimately it's probably 20 lines of code making that happen for venv - you might consider filing a bug.</span>
<span class="comment-copy">As for the pth file - no idea. Just grep through the site-packages and look for your packages path.</span>
<span class="comment-copy">My example was simplified,  indeed each package has an init file as does 'project'. My PYTHON path was added in the venv/bin/activate file. I confirm this by python -c "import os; print (os.sys.path)". I added Project and project. Additionally, the imports work as is when run from within pycharm. I'll update the details in the morning, but I think I already have the bases covered. Unless you are saying that for nested packages I have to add all the sub directories to the last branch. I do really appreciate yor help, BTW ... this is kicking my tail.</span>
<span class="comment-copy">Also, deets approach makes it work with the imports as they are. Additionally using legacy virtual envs with add2virtualenv makes the imports work.</span>
<span class="comment-copy">Okay, I’ve edited out the reference to <code>__init__.py</code> in my Answer since I see you have edited it into your Question.</span>
