<div class="post-text" itemprop="text">
<p>I'm trying to use a simple code that tries to use numba and list generator and I get an error executing the following code. </p>
<pre><code>@numba.jit(nopython=True, nogil=True)
def perform_search(simple_list, number):
    gen = (ind for ind in xrange(len(simple_list)) if simple_list[ind] != number)
    return next(gen)

x = [1,1,1,2,1,3]
perform_search(x, 1)
</code></pre>
<p>When I execute the above code I get a <code>ValueError</code>, however, when just use the decorator <code>@numba.jit</code>, I get a a <code>LoweringError</code>. </p>
<p>Please help me to perform this simple search using generator (or otherwise). Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have</p>
<pre><code>gen = (ind for ind in xrange(len(simple_list)) if simple_list[ind] != number)
</code></pre>
<p>is a generator expression, which is not supported by numba at the moment.</p>
<p>If you use square brackets instead, like:</p>
<pre><code>gen = [ind for ind in xrange(len(simple_list)) if simple_list[ind] != number]
</code></pre>
<p>then it is a list-comprehension and numba can support it.  With that change, <code>gen</code> is a <code>list</code> and you can index it (i.e. <code>gen[0]</code>).</p>
<p><strong>EDITED:</strong> </p>
<p>The following code is a suggestion from the user sklam in gitter, that I'm updating here. </p>
<pre><code>@numba.jit(nopython=True)
def the_gen(simple_list, number):
    for ind in range(len(simple_list)):
        if simple_list[ind] != number:
            yield ind


@numba.jit(nopython=True, nogil=True)
def perform_search(simple_list, number):
    for i in the_gen(simple_list, number):
        print(i)
</code></pre>
<p>If you do the above way, you will be able to do with a generator (so gains in memory and time) since generator-expression is currently not supported by <code>numba</code>. </p>
</div>
<span class="comment-copy">I'm not sure what's going on here, but you may want to ask on the mailing list or in the gitter chat: <a href="https://gitter.im/numba/numba" rel="nofollow noreferrer">gitter.im/numba/numba</a></span>
<span class="comment-copy">To be clear, what you've got here is called a <a href="https://docs.python.org/3/glossary.html#term-generator-expression" rel="nofollow noreferrer">generator expression</a>, not a "list generator".</span>
<span class="comment-copy">Thanks @sklam . I'm currently using your solution already. However, as you can imagine, this alternative is memory (and time) intensive for large arrays. Do you know when the generator is supported in numba?</span>
<span class="comment-copy">Edited the response based on the help received from sklam over gitter.</span>
<span class="comment-copy">Presumably, you could drop the generator entirely, and just have <code>perform_search</code> do <code>for ind, val in enumerate(simple_list):</code> <code>if val != number: return ind</code>? Keep the use of <code>xrange</code> if <code>numba</code> removes indexing overhead completely (also, was the second solution supposed to be <code>range</code> or <code>xrange</code>, if it's Py2, <code>range</code> involves creating a huge unnecessary list of all indices up front).</span>
<span class="comment-copy">Yes, thanks @ShadowRanger, that helps. And, yes, it has to be xrange instead of range. Edited it.</span>
