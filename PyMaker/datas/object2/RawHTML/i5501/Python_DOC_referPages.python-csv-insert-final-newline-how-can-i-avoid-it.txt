<div class="post-text" itemprop="text">
<p>Let's say I create a csv with two lines:</p>
<pre><code>&gt;&gt;&gt; import csv
&gt;&gt;&gt; csvfile = csv.writer(open('test.csv', 'w'))
&gt;&gt;&gt; csvfile.writerow(['row'])
5
&gt;&gt;&gt; csvfile.writerow(['row2'])
6
</code></pre>
<p>When reading it, I get a final new line:</p>
<pre><code>&gt;&gt;&gt; open('test.csv').read()
'row\nrow2\n'
</code></pre>
<p>Of course, this can be expected, but in my case I would prefer not to have it since it would be easier to interpret: No need to check for empty lines when doing a split.</p>
<pre><code>&gt;&gt;&gt; open('test.csv').read().split('\n')
['row', 'row2', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a workaround you could use a <a href="https://docs.python.org/3/library/io.html?highlight=stringio#io.StringIO" rel="nofollow noreferrer"><code>StringIO()</code></a> object to write to. The output could then have <code>rstrip()</code> applied to it before writing to a file:</p>
<pre><code>from io import StringIO        
import csv

output = StringIO(newline='')
csvfile = csv.writer(output)

csvfile.writerow(['row'])
csvfile.writerow(['row2'])        

with open('test.csv', 'w', newline='') as f_output:
    f_output.write(output.getvalue().rstrip())
</code></pre>
<p>This has the benefit of preserving the full functionality of the CSV library. I would though recommend you keep the trailing newline.</p>
<hr/>
<p>For an iterative approach:</p>
<pre><code>from io import StringIO        
import csv

data = [['row'], ['row2']]

with open('test.csv', 'w', newline='') as f_output:
    iter_data = iter(data)
    next_row = next(iter_data)
    csv_writer = csv.writer(f_output)

    for row in iter_data:
        csv_writer.writerow(next_row)
        next_row = row

    # Write the last row to a string to remove trailing newline
    last_row = StringIO(newline='')
    csv.writer(last_row).writerow(next_row)
    f_output.write(last_row.getvalue().rstrip())        
</code></pre>
<p>This writes the data a row at a time and then deals with the last row using the <code>StringIO()</code> approach to remove the trailing newline.</p>
</div>
<div class="post-text" itemprop="text">
<p>After a bit of investigation, I found the writerow source: <a href="https://hg.python.org/cpython/file/tip/Modules/_csv.c#l1254" rel="nofollow noreferrer">https://hg.python.org/cpython/file/tip/Modules/_csv.c#l1254</a></p>
<p>And, from what I can guess, there is <a href="https://hg.python.org/cpython/file/tip/Modules/_csv.c#l1152" rel="nofollow noreferrer">no such option in there</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Do this:</p>
<pre><code>open('test.csv').read().strip('\n').split('\n')
</code></pre>
</div>
<span class="comment-copy">Your goal doesn't seem like a good idea.  Just like you write files with a csv writer, you read files with a csv reader-- otherwise your code is going to break when you suddenly have your split character in a cell.</span>
<span class="comment-copy">If you really want a list of the rows without using a proper CSV reader, at least use <code>readlines</code> instead of manually splitting the output of <code>read</code>.</span>
<span class="comment-copy">Why are you using <code>csv.writer()</code> to write but using <code>file.read()</code> to read anyways? If you're trying to read a csv the <code>csv.reader()</code> would handle the newlines for you.</span>
<span class="comment-copy">The reason is twofold: The software ingesting those CSV is buggy and ingest empty lines as new lines, also it's simply because even in some theoretical way, there's more lines than there should be (when we count the extra empty line)</span>
<span class="comment-copy">This is the perfect answer in my book. "Here's how you do this: but don't do this at all."</span>
<span class="comment-copy">Thanks, this looks like a fine answer for my case, the only problem it's gonna have is that now I have the whole file in memory. But my guess is that I can also do a streaming version of this solution.</span>
<span class="comment-copy">PS: The only awkward thing in your answer is the extra <code>newline=''</code> which are useless based on the few tests I did</span>
<span class="comment-copy">The <code>newline=''</code> parameter is for the CSV library to work correctly, this is recommended in the <a href="https://docs.python.org/3.6/library/csv.html#csv.writer" rel="nofollow noreferrer">Python 3.x docs</a>. A different approach would be needed if your data is large. You would need to delay writing each line until you know if it is the last.</span>
<span class="comment-copy">This is a solution for reading the CSV, here we can assume the reader is broken</span>
