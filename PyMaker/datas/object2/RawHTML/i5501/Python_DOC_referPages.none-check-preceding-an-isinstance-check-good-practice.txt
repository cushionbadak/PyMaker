<div class="post-text" itemprop="text">
<p>Is it good practice to test for not <code>None</code> preceding an <code>isinstance</code> check in Python? For example: </p>
<pre><code>if x is not None and isinstance(x, (int, float)):
    # Some code over here 
    pass
</code></pre>
<p>Or can I do without and is this sufficient?</p>
<pre><code>if isinstance(x, (int, float)):
    # Some code over there 
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer your question, doing a <code>is not None</code> check is unnecessary, because - </p>
<pre><code>&gt;&gt;&gt; isinstance(None, (int, float))
False
</code></pre>
<p>Meaning, if <code>x</code> is <code>None</code>, then the <code>isinstance</code> condition would return <code>False</code> anyway, making the <code>x is not None</code> check redundant. So, in summary, </p>
<pre><code>if isinstance(x, (int, float)):
    ...
</code></pre>
<p>Works just as well.</p>
<hr/>
<p>Furthermore, if you want to test whether an object is numeric in nature, a simpler way to do so would be using the <a href="https://docs.python.org/3/library/numbers.html#numbers.Number" rel="nofollow noreferrer"><code>numbers</code></a> module - </p>
<pre><code>import numbers
if isinstance(x, numbers.Number):
    ...
</code></pre>
<p>Note that <code>numbers.Number</code> tests all numeric objects from the very root of the hierarchy. This also includes complex numbers, so if that isn't what you want, you can test with <code>numbers.Real</code> to <code>numbers.Rational</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>Python 2.7.14 (default, Sep 20 2017, 01:25:59) 
[GCC 7.2.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; isinstance(None, (int, float))
False
&gt;&gt;&gt; 
</code></pre>
<p>It raises no error, so I would actually prefer the version without the 'is None' check, as it is just less code.</p>
</div>
<span class="comment-copy">if <code>x</code> is None, then the <code>isinstance</code> would return False anyway, so the <code>is not None</code> check is redundant.</span>
<span class="comment-copy">I'd say this depends on your "use cases" (and this question risks being considered opinion-based), but <b>usually</b>, the "Pythonic" way is more a <i>rather ask for forgiveness (handle exceptions) than for permission</i>. For instance, <code>x = float(x)</code> will either make your <code>x</code> a float or give you a ValueError (<code>float("foo")</code>) or a TypeError (<code>float(None)</code>). I'd say you can put that casting to <code>float</code> in a try/except block and handle exceptions as needed.</span>
<span class="comment-copy">One case where it would be necessary: if your <code>isinstance</code> call included <code>object</code> in the sequence of types to check against. (But since <code>isinstance(x, object)</code> is, by definition of <code>object</code>, true for any <code>x</code>, that would be a silly thing to do.)</span>
<span class="comment-copy">Please vote on, and accept the most helpful answer, thanks!</span>
<span class="comment-copy">@Coldspeed For now I won't accept an answer as it doesn't add anything to what I already know. Obviously I tried the answers given in this thread myself before asking. I just want to know what is best to do as dealing with <code>None</code> requires caution in Python (and other languages where it is called <code>null</code>).</span>
