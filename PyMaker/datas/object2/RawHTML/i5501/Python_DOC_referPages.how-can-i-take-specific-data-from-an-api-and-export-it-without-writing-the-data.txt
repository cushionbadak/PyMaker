<div class="post-text" itemprop="text">
<p> I'm new to Python and using APIs and would love some help!</p>
<p>
Using the URL: <a href="http://api.worldbank.org/v2/countries?format=xml" rel="nofollow noreferrer">http://api.worldbank.org/v2/countries?format=xml</a>
I want to gather each country's "iso2Code" and "name".
I want to be able to output the data in a cleaner XML file format or an array (but would love the knowledge on how to do both!).
<p>
I can currently write it to a file and make use of it there, but I am trying to sort it without that extra step.</p>
<p>I haven't got much so far at all, but here it is:</p>
<pre><code>import requests

url = ("http://api.worldbank.org/v2/countries?format=xml")

r = requests.get(url)

with open(('testcase.xml'), 'w') as f:
        f.write(r.text)

test = r.text
print(test)
</code></pre>
<p><a href="https://i.stack.imgur.com/bCZtV.png" rel="nofollow noreferrer">This is the data I receive upon printing. I want to gather the first two parts.</a></p>
<p>
Thanks for the help in advance!</p>
</p></div>
<div class="post-text" itemprop="text">
<p>Consider <a href="https://www.w3.org/Style/XSL/" rel="nofollow noreferrer">XSLT</a>, the special-purpose language designed to transform XML from complex types to simpler types for your specific needs such as extracting only <em>iso2Code</em> and <em>name</em>. </p>
<p>Python's <code>lxml</code> module can run XSLT 1.0 scripts. However, because is XSLT is portable you don't need <code>lxml</code> but can call other programs like Linux/Mac's dedicated XSLT processor: <a href="http://xmlsoft.org/XSLT/xsltproc2.html" rel="nofollow noreferrer">xsltproc</a>.</p>
<p><strong>XSLT</strong></p>
<pre><code>&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                              xmlns:wb="http://www.worldbank.org"
                              exclude-result-prefixes="wb"&gt;
    &lt;xsl:output method="xml" indent="yes"/&gt;
    &lt;xsl:strip-space elements="*"/&gt;

    &lt;xsl:template match="/wb:countries"&gt;
     &lt;countries&gt;
       &lt;xsl:apply-templates select="wb:country"/&gt;
     &lt;/countries&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wb:country"&gt;
     &lt;country&gt;
       &lt;iso2Code&gt;&lt;xsl:value-of select="wb:iso2Code"/&gt;&lt;/iso2Code&gt;
       &lt;name&gt;&lt;xsl:value-of select="wb:name"/&gt;&lt;/name&gt;
     &lt;/country&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</code></pre>
<p><strong>Python</strong> <em>(using lxml)</em></p>
<pre><code>import lxml.etree as et

# LOAD XML AND XSL
doc = et.parse('http://api.worldbank.org/v2/countries?format=xml')
xsl = et.parse('XSLT_Script.xsl')

# TRANSFORM SOURCE
transformer = et.XSLT(xsl)
result = transformer(doc)

# PRINT TO SCREEN
print(result)

# SAVE TO FILE
with open('Output.xml', 'wb') as f:
  f.write(result)
</code></pre>
<p><strong>Python</strong> <em>(command line call to Unix's xsltproc)</em></p>
<pre><code>import requests as rq
from subprocess import Popen

url = "http://api.worldbank.org/v2/countries?format=xml"
r = rq.get(url)

with open('Input.xml', 'wb') as f:
    f.write(r.content)              # NOTICE .text NOT USED

proc = Popen(['xsltproc -o Output.xml XSLT_Script.xsl Input.xml'], 
             shell=True, cwd='/path/to/working/directory',
             stdin=None, stdout=None, stderr=None)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;countries&gt;
  &lt;country&gt;
    &lt;iso2Code&gt;AW&lt;/iso2Code&gt;
    &lt;name&gt;Aruba&lt;/name&gt;
  &lt;/country&gt;
  &lt;country&gt;
    &lt;iso2Code&gt;AF&lt;/iso2Code&gt;
    &lt;name&gt;Afghanistan&lt;/name&gt;
  &lt;/country&gt;
  &lt;country&gt;
    &lt;iso2Code&gt;A9&lt;/iso2Code&gt;
    &lt;name&gt;Africa&lt;/name&gt;
  &lt;/country&gt;
  &lt;country&gt;
    &lt;iso2Code&gt;AO&lt;/iso2Code&gt;
    &lt;name&gt;Angola&lt;/name&gt;
  &lt;/country&gt;
  &lt;country&gt;
    &lt;iso2Code&gt;AL&lt;/iso2Code&gt;
    &lt;name&gt;Albania&lt;/name&gt;
  &lt;/country&gt;
  &lt;country&gt;
    &lt;iso2Code&gt;AD&lt;/iso2Code&gt;
    &lt;name&gt;Andorra&lt;/name&gt;
  &lt;/country&gt;
...
&lt;/countries&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use regular expressions (re) to find strings with findall in the XML and then save the results into a pandas dataframe. </p>
<p>Like this:</p>
<pre><code>import requests
import pandas as pd
import re

url = ("http://api.worldbank.org/v2/countries?format=xml")

r = requests.get(url)

with open(('testcase.xml'), 'w') as f:
        f.write(r.text)

test = r.text

# Parse through string and capture ISO and name
country_iso = re.findall(r"iso2Code&gt;(.*)&lt;/wb:iso2Code",test)
country_name = re.findall(r"name&gt;(.*)&lt;/wb:name",test)

# store in pandas dataframes, then concatenate them into one
country_iso_df = pd.DataFrame(country_iso, columns=['ISO'])
country_name_df = pd.DataFrame(country_name, columns=['Name'])
output_df = pd.concat([country_iso_df, country_name_df], axis=1)

# print then output to csv
output_df
output_df.to_csv("insert path here")
</code></pre>
</div>
<span class="comment-copy">So you want to write it to a different kind of file?</span>
<span class="comment-copy">@SuperStew I want to write it to an XML, but only taking certain components from the first file</span>
<span class="comment-copy">Have you looked at the XML library? And are you set on xml for a particular reason?</span>
<span class="comment-copy">@SuperStew Not necessarily, I'm just trying to learn how to do it that was is all!</span>
<span class="comment-copy">Fair enough. I don't use the xml stuff if I can avoid it, but this should get you pointed in the right direction <a href="https://docs.python.org/3/library/xml.html" rel="nofollow noreferrer">docs.python.org/3/library/xml.html</a>. If this is just an exercise, I would suggest also learning how to work with JSON data. In general, it seems to be preferred to xml most of the time.</span>
<span class="comment-copy">Are we using regex on <a href="https://stackoverflow.com/a/1732454/1422451">x|html</a>?</span>
<span class="comment-copy">Wow, didn't realise it was such a faux pas!</span>
