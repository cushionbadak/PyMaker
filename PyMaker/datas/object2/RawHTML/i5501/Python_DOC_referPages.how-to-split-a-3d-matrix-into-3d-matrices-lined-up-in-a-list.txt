<div class="post-text" itemprop="text">
<p>I have a NumPy array with the following shape:</p>
<pre><code>(1532, 2036, 5)
</code></pre>
<p>I would like to generate a list of arrays where each one has the following shape:</p>
<pre><code>(1532, 2036)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/constants.html#Ellipsis" rel="nofollow noreferrer"><code>Ellipsis</code></a> to signify all dimensions up to the last. For example:</p>
<pre><code>arr = np.random.rand(4, 3, 2)
arr
array([[[ 0.35235813,  0.57984153],
        [ 0.53743048,  0.46753367],
        [ 0.80048303,  0.07982378]],

       [[ 0.1339381 ,  0.84586721],
        [ 0.81425027,  0.41086151],
        [ 0.34039991,  0.19972737]],

       [[ 0.2112466 ,  0.73086434],
        [ 0.03755819,  0.40113463],
        [ 0.74622891,  0.74695994]],

       [[ 0.99313615,  0.65634951],
        [ 0.90787642,  0.37387861],
        [ 0.8738962 ,  0.41747727]]])
</code></pre>
<p>The list of the last dimension arrays can be constructed as @Usernamenotfound mentioned or with <code>Ellipsis</code> like so:</p>
<pre><code>[arr[..., i] for i in range(arr.shape[-1])]
[array([[ 0.35235813,  0.53743048,  0.80048303],
        [ 0.1339381 ,  0.81425027,  0.34039991],
        [ 0.2112466 ,  0.03755819,  0.74622891],
        [ 0.99313615,  0.90787642,  0.8738962 ]]),
 array([[ 0.57984153,  0.46753367,  0.07982378],
        [ 0.84586721,  0.41086151,  0.19972737],
        [ 0.73086434,  0.40113463,  0.74695994],
        [ 0.65634951,  0.37387861,  0.41747727]])]
</code></pre>
<p>Each element has the shape <code>(4, 3)</code>. </p>
<p>Likewise you could so the same for the first dimension, making 4 (3, 2) arrays.</p>
<pre><code>[arr[i, ...] for i in range(arr.shape[0])]
[array([[ 0.35235813,  0.57984153],
        [ 0.53743048,  0.46753367],
        [ 0.80048303,  0.07982378]]), array([[ 0.1339381 ,  0.84586721],
        [ 0.81425027,  0.41086151],
        [ 0.34039991,  0.19972737]]), array([[ 0.2112466 ,  0.73086434],
        [ 0.03755819,  0.40113463],
        [ 0.74622891,  0.74695994]]), array([[ 0.99313615,  0.65634951],
        [ 0.90787642,  0.37387861],
        [ 0.8738962 ,  0.41747727]])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also permute the axes with <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.transpose.html" rel="nofollow noreferrer"><code>numpy.transpose</code></a> then simply iterate through the array:</p>
<pre><code>import numpy as np
a = ... # Define the input array here
out = [a for a in np.transpose(arr, (2, 0, 1))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can slice the 3D array using</p>
<pre><code>[x[:,:,i] for i in range(5)]
</code></pre>
<p>The above would give you a list of 2D arrays.</p>
<p>The same process can be scaled for multidimensional arrays</p>
</div>
<span class="comment-copy">That would be 2D arrays I think. Simply use list comprehension - <code>[a[:,:,i] for i in range(a.shape[-1])]</code>?</span>
<span class="comment-copy">Similar question (but with unpacking to variables): <a href="https://stackoverflow.com/questions/48101040/slice-a-3d-array-in-to-multiple-2d-arrays" title="slice a 3d array in to multiple 2d arrays">stackoverflow.com/questions/48101040/â€¦</a>.  I proposed this list comprehension, the accepted answer transposed the axes.</span>
<span class="comment-copy">To the downvoter... May I ask why you down voted? Would help me so I can improve on this post if required.</span>
<span class="comment-copy">You may want to make the loop adaptive to the number of slices in the array by examining the number of slices in the third dimension, or <code>for i in range(x.shape[2])</code>.</span>
