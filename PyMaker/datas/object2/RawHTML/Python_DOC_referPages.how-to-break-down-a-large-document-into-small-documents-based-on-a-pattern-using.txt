<div class="post-text" itemprop="text">
<p>The large document consists of small document separated by pattern like "1 of 1435 DOCUMENTS". I want to break it down into 1435 small documents. </p>
<pre><code> re_1 =  r"\d{1,4} of \d{1,4} DOCUMENTS.+?"

 re_2 =  r"\d{1,4} of \d{1,4} DOCUMENTS.+"
</code></pre>
<p>re_1 gives me "1 of 1435 DOCUMENTS" etc only. 
re_2 gives me the entire doc. </p>
<p>If there a way using re.findall with a proper regex? 
or I have to do a re.split (which happens to be easiest for this case) or alternatively loops over each line and checks for the pattern?  Thank you!</p>
<pre><code>1 of 1435 DOCUMENTS
blabla (multiple lines)

2 of 1435 DOCUMENTS
blabla(multiple lines)
3 of 1435 DOCUMENTS
blabla(multiple lines)
4 of 1435 DOCUMENTS
blabla(multiple lines)

5 of 1435 DOCUMENTS
....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With earlier versions of Python prior to 3.7 you can use <code>re.findall</code> with</p>
<pre><code>r'(?sm)^\d{1,4} of \d{1,4} DOCUMENTS.*?(?=^\d{1,4} of \d{1,4} DOCUMENTS|\Z)'
</code></pre>
<p>See the <a href="https://regex101.com/r/pzQZGg/3" rel="nofollow noreferrer">regex demo</a></p>
<p><strong>Details</strong></p>
<ul>
<li><code>(?sm)</code> - <code>re.M</code> and <code>re.S</code> options on</li>
<li><code>^</code> - start of the line</li>
<li><code>\d{1,4} of \d{1,4} DOCUMENTS</code> - 1 to 4 digits, space, <code>of</code>, space, 1 to 4 digits, space and <code>DOCUMENTS</code> substring</li>
<li><code>.*?</code> - any 0 or more chars, as few as possible up to the closest</li>
<li><code>(?=^\d{1,4} of \d{1,4} DOCUMENTS|\Z)</code> - <code>^\d{1,4} of \d{1,4} DOCUMENTS</code> pattern or (<code>|</code>) the end of the string (<code>\Z</code>).</li>
</ul>
<p>See the <a href="https://ideone.com/E7R6Yq" rel="nofollow noreferrer">Python demo</a>:</p>
<pre><code>import re
s = "TEXT_HERE"
print(re.findall(r'^\d{1,4} of \d{1,4} DOCUMENTS.*?(?=\d{1,4} of \d{1,4} DOCUMENTS|\Z)', s, re.M | re.S))
# =&gt; ['1 of 1435 DOCUMENTS\nblabla (multiple lines)\n\n', '2 of 1435 DOCUMENTS\nblabla(multiple lines)\n', '3 of 1435 DOCUMENTS\nblabla(multiple lines)\n', '4 of 1435 DOCUMENTS\nblabla(multiple lines)\n\n', '5 of 1435 DOCUMENTS\n....']
</code></pre>
<p>With Python 3.7, where <code>re.split</code> can split with zero length matches you may use</p>
<pre><code>r'(?m)(?!\A)(?=^\d{1,4} of \d{1,4} DOCUMENTS)'
</code></pre>
<p>See the <a href="https://regex101.com/r/pzQZGg/2" rel="nofollow noreferrer">regex demo</a>.</p>
<p><strong>Details</strong></p>
<ul>
<li><code>(?m)</code> - <code>re.M</code> option is on</li>
<li><code>(?!\A)</code> - not at the start of the string
-<code>(?=^\d{1,4} of \d{1,4} DOCUMENTS)</code> - immediately to the right, there must be start of a line, 1 to 4 digits, space, <code>of</code>, space, 1 to 4 digits, space and <code>DOCUMENTS</code> substring</li>
</ul>
<p>Usage:</p>
<pre><code>re.split(r'(?!\A)(?=^\d{1,4} of \d{1,4} DOCUMENTS)', text, flags=re.M)
</code></pre>
</div>
<span class="comment-copy">You may use <code>re.split(r'(?!\A)(?=^\d{1,4} of \d{1,4} DOCUMENTS)', text, flags=re.M)</code> with Python 3.7</span>
<span class="comment-copy">Good to know. Thank you!</span>
