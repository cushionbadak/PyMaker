<div class="post-text" itemprop="text">
<p>I have the following list of dictionaries</p>
<pre><code>a = [{23:100}, {3:103}, {2:102}, {36:103}, {43:123}]
</code></pre>
<p>How can I sort it to get:</p>
<pre><code>a = [{43:123}, {3:103}, {36:103}, {2:102}, {23:100}]
</code></pre>
<p>I mean, to sort the list by its dicts' values, in descending order.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to brandizzi's answer, you could go with:</p>
<pre><code>sorted(a, key=dict.values, reverse=True)
</code></pre>
<p>Pretty much the same thing, but possibly more idiomatic.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; sorted(a, key=lambda i: i.values()[0], reverse=True)
[{43: 123}, {3: 103}, {36: 103}, {2: 102}, {23: 100}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pass a <a href="http://wiki.python.org/moin/HowTo/Sorting#Key_Functions" rel="nofollow"><code>key</code></a> parameter to the <code>list.sort()</code> method, so the comparison will be made in function of the returning value of <code>key</code>:</p>
<pre><code>&gt;&gt;&gt; a = [{23:100}, {3:103}, {2:102}, {36:103}, {43:123}]
&gt;&gt;&gt; a.sort(key=lambda d: d.values()[0], reversed=True)
&gt;&gt;&gt; a
[{23: 100}, {2: 102}, {3: 103}, {36: 103}, {43: 123}]
</code></pre>
<p>In this case, the key is a function which receives a dictionary <code>d</code> and gets a list of its value with <code>.values()</code>. Since there is just one value, we get this only value from the returned list. Then, the <code>list.sort()</code> method will compare those returned values, instead of the dictionaries themselves, when sorting.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python 3, the other answers no longer work because <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow noreferrer"><code>dict.values()</code></a> now returns a dict view object rather than a list. To extract the value from the view object, we can use a combination of <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> and <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a>:</p>
<pre><code>a.sort(key=lambda dic: next(iter(dic.values())), reverse=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd rather use (or at least keep in mind) <code>.itervalues()</code></p>
<pre><code>In [25]: sorted(a, key=lambda x: next(x.itervalues()), reverse=True)
Out[25]: [{43: 123}, {36: 103}, {2: 102}, {23: 100}, {3: 103}]
</code></pre>
</div>
<span class="comment-copy">Each of those dictionaries have different keys. Is there a better data type for this?</span>
<span class="comment-copy">+1 I agree, this is the better answer unless the question specifies that only the first item be used for the sort.</span>
<span class="comment-copy">hey, how can I extract the value from sorted <code>a</code> dict to recive int ? e.g.  <code>for b in a:       print a[i].keys()      i+=1</code> but python says it is still a list, I need to recive int. How can I do it ?</span>
<span class="comment-copy">@user1403568 try <code>for b in a: print b.keys()[0]</code>. that will extract the keys, so you will end up printing out: 43, 3, 36, 2, 23. If you want values instead (like 123,103,36,102,100), use <code>b.values()[0]</code>.</span>
<span class="comment-copy">Am I the only one getting the error: <code>'&lt;' not supported between instances of 'dict_values' and 'dict_values'</code>?</span>
<span class="comment-copy">This give a sort in increasing order, the OP wanted decreasing.</span>
<span class="comment-copy">@raym0nd ok, repaired, although I should say I would prefer HodfHod solution anyway :)</span>
<span class="comment-copy">+1 because I don't think this <i>deserves</i> a downvote. However, I don't see how this is substantially different to @KurzedMetal's solution. Don't think <code>list.sort</code> vs <code>sorted(list)</code> merits two different solutions.</span>
<span class="comment-copy">@jpp The thing is that <code>itervalues</code> doesn't exist in py3. I guess I could've edited that answer, but it would've been quite a substantial edit with the link to <code>iter</code> and <code>next</code> and everything.</span>
