<div class="post-text" itemprop="text">
<p>I want to make a dictionary where English words point to Russian and French translations. </p>
<p>How do I print out unicode characters in Python?  Also, how do you store unicode chars in a variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>To include Unicode characters in your Python source code, you can use <a href="http://docs.python.org/howto/unicode.html#unicode-literals-in-python-source-code" rel="noreferrer">Unicode escape characters</a> in the form <code>\u0123</code> in your string, and prefix the string literal with 'u'.</p>
<p>Here's an example running in the Python interactive console:</p>
<pre><code>&gt;&gt;&gt; print u'\u0420\u043e\u0441\u0441\u0438\u044f'
Россия
</code></pre>
<p>Strings declared like this are Unicode-type variables, as described in the <a href="http://docs.python.org/howto/unicode.html#the-unicode-type" rel="noreferrer">Python Unicode documentation</a>.</p>
<p>If running the above command doesn't display the text correctly for you, perhaps your terminal isn't capable of displaying Unicode characters.</p>
<p>For information about reading Unicode data from a file, see this answer:</p>
<p><a href="https://stackoverflow.com/questions/147741/character-reading-from-file-in-python">Character reading from file in Python</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>Print a unicode character in Python:</h2>
<p><strong>Print a unicode character directly from python interpreter:</strong></p>
<pre><code>el@apollo:~$ python
Python 2.7.3
&gt;&gt;&gt; print u'\u2713'
✓
</code></pre>
<p>Unicode character <code>u'\u2713'</code> is a checkmark.  The interpreter prints the checkmark on the screen.</p>
<p><strong>Print a unicode character from a python script:</strong></p>
<p>Put this in test.py:</p>
<pre><code>#!/usr/bin/python
print("here is your checkmark: " + u'\u2713');
</code></pre>
<p>Run it like this:</p>
<pre><code>el@apollo:~$ python test.py
here is your checkmark: ✓
</code></pre>
<p>If it doesn't show a checkmark for you, then the problem could be elsewhere, like the terminal settings or something you are doing with stream redirection.</p>
<p><strong>Store unicode characters in a file:</strong></p>
<p>Save this to file: foo.py:</p>
<pre><code>#!/usr/bin/python -tt
# -*- coding: utf-8 -*-
import codecs
import sys 
UTF8Writer = codecs.getwriter('utf8')
sys.stdout = UTF8Writer(sys.stdout)
print(u'e with obfuscation: é')
</code></pre>
<p>Run it and pipe output to file:</p>
<pre><code>python foo.py &gt; tmp.txt
</code></pre>
<p>Open tmp.txt and look inside, you see this:</p>
<pre><code>el@apollo:~$ cat tmp.txt 
e with obfuscation: é
</code></pre>
<p>Thus you have saved unicode e with a obfuscation mark on it to a file.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>If you're trying to <code>print()</code> Unicode, and getting ascii codec errors</strong>, check out <a href="http://chase-seibert.github.io/blog/2014/01/12/python-unicode-console-output.html" rel="noreferrer">this page</a>, the TLDR of which is do <code>export PYTHONIOENCODING=UTF-8</code> before firing up python (this variable controls what sequence of bytes the console tries to encode your string data as).  Internally, Python3 uses UTF-8 by default (see <a href="https://docs.python.org/3/howto/unicode.html" rel="noreferrer">the Unicode HOWTO</a>) so that's not the problem; you can just put Unicode in strings, as seen in the other answers and comments.  It's when you try and get this data out to your console that the problem happens.  Python thinks your console can only handle ascii.  Some of the other answers say, "Write it to a file, first" but note they specify the encoding (UTF-8) for doing so (so, Python doesn't change anything in writing), and then use a method for reading the file that just spits out the bytes without any regard for encoding, which is why that works.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, you declare unicode strings with a <code>u</code>, as in <code>u"猫"</code> and use <code>decode()</code> and <code>encode()</code> to translate to and from unicode, respectively.</p>
<p>It's quite a bit easier in Python 3. A very good overview can be found <a href="http://pyvideo.org/video/948/pragmatic-unicode-or-how-do-i-stop-the-pain">here</a>.  That presentation clarified a lot of things for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use Portable winpython in Windows, it includes IPython QT console, I could achieve the following.</p>
<pre><code>&gt;&gt;&gt;print ("結婚")
結婚

&gt;&gt;&gt;print ("おはよう")
おはよう

&gt;&gt;&gt;str = "結婚"


&gt;&gt;&gt;print (str)
結婚
</code></pre>
<p>your console interpreter should support unicode in order to show unicode characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just one more thing that hasn't been added yet</p>
<p>In Python 2, if you want to print a variable that has unicode and use <code>.format()</code>, then do this (make the base string that is being formatted a unicode string with <code>u''</code>:</p>
<pre><code>&gt;&gt;&gt; text = "Université de Montréal"
&gt;&gt;&gt; print(u"This is unicode: {}".format(text))
&gt;&gt;&gt; This is unicode: Université de Montréal
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This fixes UTF-8 printing in python:</p>
<pre><code>UTF8Writer = codecs.getwriter('utf8')
sys.stdout = UTF8Writer(sys.stdout)
</code></pre>
</div>
<span class="comment-copy">Does this help:  <a href="http://docs.python.org/howto/unicode.html" rel="nofollow noreferrer">docs.python.org/howto/unicode.html</a></span>
<span class="comment-copy">Have a look <a href="http://docs.python.org/reference/lexical_analysis.html#string-literals" rel="nofollow noreferrer">here</a>. Prefixing your strings with <code>u</code> allows python to consider them as unicode string literals.</span>
<span class="comment-copy">Yeah, you <i>can</i> write your code in Unicode-encoded text files, but a lot of editors and tools have trouble dealing with them. My experience with working with source code on lots of different platforms has been that it's best to keep source code in ASCII and use Unicode escapes.</span>
<span class="comment-copy">@MattRyall, I agree, but a team of Russian developers may want to write comments and docstrings in Russian. For a language project it's a good option.</span>
<span class="comment-copy">Though note that this only works if you print just the string.  If it's wrapped in some other object you'll see escape codes.   Try "print [u'\u0420\u043e\u0441\u0441\u0438\u044f']" for example.</span>
<span class="comment-copy">What if I stored it into a string <code>mystr</code>? then how to print it?</span>
<span class="comment-copy">@CarloWood The <a href="http://stackoverflow.com/questions/10569438/how-to-print-unicode-character-in-python/10569468#10569468">top answer</a>  tells you exactly what you want. Just <code>print your_unicode_characters.encode('utf-8')</code></span>
<span class="comment-copy">Terminal issue for me. Forwarding output to file worked. +1.</span>
<span class="comment-copy">@ofer.sheffer bizarrely I'm here looking to solve the opposite problem, the point being it may take some fiddling.</span>
<span class="comment-copy">Thank you! I had a unicde problem when using the asciitree package to write results to a file. This solved it for me.</span>
<span class="comment-copy">Thank you so much. Spent hours googling, glad I found this.</span>
<span class="comment-copy">Thx for the video link. It is very useful.</span>
<span class="comment-copy">This is also available as a non-video here:  Pragmatic Unicode, or, How do I stop the pain? (Pycon2012) <a href="https://nedbatchelder.com/text/unipain.html" rel="nofollow noreferrer">nedbatchelder.com/text/unipain.html</a></span>
