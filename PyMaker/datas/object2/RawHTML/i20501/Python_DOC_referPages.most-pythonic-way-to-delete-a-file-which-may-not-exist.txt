<div class="post-text" itemprop="text">
<p>I want to delete the file <code>filename</code> if it exists.  Is it proper to say</p>
<pre><code>if os.path.exists(filename):
    os.remove(filename)
</code></pre>
<p>Is there a better way? A one-line way? </p>
</div>
<div class="post-text" itemprop="text">
<p>A more pythonic way would be:</p>
<pre><code>try:
    os.remove(filename)
except OSError:
    pass
</code></pre>
<p>Although this takes even more lines and looks very ugly, it avoids the unnecessary call to <code>os.path.exists()</code> and follows the python convention of overusing exceptions.</p>
<p>It may be worthwhile to write a function to do this for you:</p>
<pre><code>import os, errno

def silentremove(filename):
    try:
        os.remove(filename)
    except OSError as e: # this would be "except OSError, e:" before Python 2.6
        if e.errno != errno.ENOENT: # errno.ENOENT = no such file or directory
            raise # re-raise exception if a different error occurred
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer to suppress an exception rather than checking for the file's existence, to avoid a <a href="http://en.wikipedia.org/wiki/TOCTTOU">TOCTTOU</a> bug.  Matt's answer is a good example of this, but we can simplify it slightly under Python 3, using <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress"><code>contextlib.suppress()</code></a>:</p>
<pre><code>import contextlib

with contextlib.suppress(FileNotFoundError):
    os.remove(filename)
</code></pre>
<p>If <code>filename</code> is a <code>pathlib.Path</code> object instead of a string, we can call its <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink"><code>.unlink()</code></a> method instead of using <code>os.remove()</code>.  In my experience, Path objects are more useful than strings for filesystem manipulation.</p>
<p>Since everything in this answer is exclusive to Python 3, it provides yet another reason to upgrade.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/os.path.html#os.path.exists"><code>os.path.exists</code></a> returns <code>True</code> for folders as well as files. Consider using <a href="https://docs.python.org/2/library/os.path.html#os.path.isfile"><code>os.path.isfile</code></a> to check for whether the file exists instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the spirit of Andy Jones' answer, how about an authentic ternary operation:</p>
<pre><code>os.remove(fn) if os.path.exists(fn) else None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to know if the file (or files) exists, and to remove it, is using the module glob.</p>
<pre><code>from glob import glob
import os

for filename in glob("*.csv"):
    os.remove(filename)
</code></pre>
<p>Glob finds all the files that could select the pattern with a *nix wildcard, and loops the list.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if os.path.exists(filename): os.remove(filename)
</code></pre>
<p>is a one-liner.</p>
<p>Many of you may disagree - possibly for reasons like considering the proposed use of ternaries "ugly" - but this begs the question of whether we should listen to people used to ugly standards when they call something non-standard "ugly".</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/10840586/248616">Matt's answer</a> is the right one for older Pythons and <a href="https://stackoverflow.com/a/27045091/248616">Kevin's</a> the right answer for newer ones.</p>
<p>If you wish not to copy the function for <code>silentremove</code>, this functionality is exposed in <a href="https://pypi.org/project/path.py" rel="nofollow noreferrer">path.py</a> as <a href="http://pathpy.readthedocs.io/en/latest/api.html#path.Path.remove_p" rel="nofollow noreferrer">remove_p</a>:</p>
<pre><code>from path import Path
Path(filename).remove_p()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4 or later version, the pythonic way would be:</p>
<pre><code>import os
from contextlib import suppress

with suppress(OSError):
    os.remove(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this? Takes advantage of short-circuit evaluation. If the file does not exist, the whole conditional cannot be true, so python will not bother evaluation the second part. </p>
<pre><code>os.path.exists("gogogo.php") and os.remove("gogogo.php")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A KISS offering:</p>
<pre><code>def remove_if_exists(filename):
  if os.path.exists(filename):
    os.remove(filename)
</code></pre>
<p>And then:</p>
<pre><code>remove_if_exists("my.file")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is another solution:</p>
<pre><code>if os.path.isfile(os.path.join(path, filename)):
    os.remove(os.path.join(path, filename))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have used <code>rm</code> which can force to delete nonexistent files with <code>--preserve-root</code> as an option to <code>rm</code>. </p>
<pre><code>--preserve-root
              do not remove `/' (default)
</code></pre>
<hr/>
<pre><code>rm --help | grep "force"
  -f, --force           ignore nonexistent files and arguments, never prompt
</code></pre>
<p>We can also use <a href="https://launchpad.net/safe-rm" rel="nofollow noreferrer">safe-rm</a> (<code>sudo apt-get install safe-rm</code>)</p>
<blockquote>
<p>Safe-rm is a safety tool intended to prevent the accidental deletion
  of important files by replacing /bin/rm with a wrapper, which checks
  the given arguments against a configurable blacklist of files and
  directories that should never be removed.</p>
</blockquote>
<p>First I check whether folder/file path exist or not. This will prevent setting variable fileToRemove<code>/</code>folderToRemove<code>to the string</code>-r /`.</p>
<hr/>
<pre><code>import os, subprocess

fileToRemove = '/home/user/fileName';
if os.path.isfile(fileToRemove):
   subprocess.run(['rm', '-f', '--preserve-root', fileToRemove]
   subprocess.run(['safe-rm', '-f', fileToRemove]
</code></pre>
</div>
<span class="comment-copy">Do you want to try to delete a file if it exists (and fail if you lack permissions) or to do a best-effort delete and never have an error thrown back in your face?</span>
<span class="comment-copy">The latter.  Best effort delete.</span>
<span class="comment-copy">@Matt nailed it.  Seek forgiveness, not permission.</span>
<span class="comment-copy">I wanted to do "the former" of what @DonalFellows said. For that, I guess Scott's original code would be a good approach?</span>
<span class="comment-copy">@LarsH See the second code block of the accepted answer. It reraises the exception if the exception is anything but a "no such file or directory" error.</span>
<span class="comment-copy">But would this pass if the remove operation failed (read only file system or some other unexpected issue)?</span>
<span class="comment-copy">Also, the fact that the file exists when <code>os.path.exists()</code> is executed does not mean that it exists when <code>os.remove()</code> is executed.</span>
<span class="comment-copy">My +1, but overusing of exceptions is not a Python convention :)  Or is it?</span>
<span class="comment-copy">@pepr I was just humorously criticizing how exceptions are part of normal behavior in python. For example, iterators <b>must</b> raise exceptions in order to stop iterating.</span>
<span class="comment-copy">+1 because I can't +2. Besides being more Pythonic, this one is actually correct, while the original is not, for the reason kindall suggested. Race conditions like that lead to security holes, hard-to-repro bugs, etc.</span>
<span class="comment-copy">This even cleaner than try/except.</span>
<span class="comment-copy">This is the most pythonic way as on December 2015. Python keeps evolving though.</span>
<span class="comment-copy">I found no remove() method for pathlib.Path objects on Python 3.6</span>
<span class="comment-copy">@jeffbyrnes: I'd call that a violation of the Zen of Python: "There should be one-- and preferably only one --obvious way to do it."  If you had two methods which did the same thing, you would end up with a mixture of them in running source code, which would be harder for the reader to follow.  I suspect they wanted consistency with <code>unlink(2)</code>, which is by far the oldest relevant interface here.</span>
<span class="comment-copy">@nivk: If you need an <code>except</code> clause, then you should use <code>try</code>/<code>except</code>.  It cannot be meaningfully shortened, because you must have a line to introduce the first block, the block itself, a line to introduce the second block, and then that block, so <code>try</code>/<code>except</code> is already as terse as possible.</span>
<span class="comment-copy">Ugly misuse of ternaries.</span>
<span class="comment-copy">@bgusach Why ugly?</span>
<span class="comment-copy">@BrianHVB Because ternaries are there to choose between two values based on a condition, not to do branching.</span>
<span class="comment-copy">I've found this very useful in maps and apply's :)</span>
<span class="comment-copy">This is not atomic.  The file can be deleted between calls to exists and remove.  It's safer to attempt the operation and allow it to fail.</span>
<span class="comment-copy">Thanks for this. Didn't know about the glob module... the wildcard wasn't working otherwise</span>
<span class="comment-copy">this is clean -- I don't like to use exceptions for flow control.  They make code difficult to understand and more importantly can mask some other error occurring (like a permission issue blocking a file delete) which will cause a silent fail.</span>
<span class="comment-copy">It's not pretty because it assumes there is only one process that will modify filename.  It's not atomic.  It's safe and correct to attempt the operation and fail gracefully.  It's annoying that Python can't standardize.  If we had a directory, we'd use shutil and it would support exactly what we want.</span>
<span class="comment-copy">This does not differ substantively from <a href="https://stackoverflow.com/a/27045091/148680">the answer offered here</a>.</span>
<span class="comment-copy">This is definitely not "more Pythonic"—in fact, it's something Guido specifically warns about, and refers to as "abuse" of the boolean operators.</span>
<span class="comment-copy">oh, I agree - part of the question asked for a one line way and this was the first thing that popped into my head</span>
<span class="comment-copy">Well, you could also make it a one-liner by just removing the newline after the colon… Or, even better, Guide grudgingly added the if-expression to stop people from "abusing the boolean operators", and there's a great opportunity to prove that anything can be abused: os.remove("gogogo.php") if os.path.exists("gogogo.php") else None. :)</span>
<span class="comment-copy">If you have to write a whole function it kind of misses the point of one-liners</span>
<span class="comment-copy">@Ion Lesan The OP is after the "best" way to solve this problem. A one liner is never a better way if it jeopardizes readability.</span>
<span class="comment-copy">Given the inherently broad definition of "best", I'm not going to argue in this sense, although it's clearly affected by TOCTOU. And definitely not a KISS solution.</span>
<span class="comment-copy">@Matt True but don't a number of solutions offered here suffer from this issue?</span>
<span class="comment-copy">Using a shell for something this trivial is overkill and this approach also won't work cross-platform (ie. Windows).</span>
<span class="comment-copy">What do you mean by overkill? Using shell shouldn't be a bottleneck. @Nable</span>
<span class="comment-copy">Using a shell instead of the standard library (os.remove for example) is always one of the least pythonic/clean ways of doing something. For example you have to manually handle errors returned by the shell.</span>
<span class="comment-copy">I added my answer to use <code>rm</code> safely and prevent <code>rm -r /</code>. @JonBrave</span>
<span class="comment-copy">Not the way you've used it, with a variable name (environment variable), and no quoting, and no protection, no.  And not for this question, no.  Exposing the unwary to <code>os.system('rm ...')</code> is extremely dangerous, sorry.</span>
