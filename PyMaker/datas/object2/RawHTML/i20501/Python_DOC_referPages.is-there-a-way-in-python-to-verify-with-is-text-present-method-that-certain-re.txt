<div class="post-text" itemprop="text">
<p>Is there a way in python to verify with <code>is_text_present()</code> method that certain regex is present on web page?</p>
<p>For example I made regex:</p>
<pre><code> p= re.compile('Today:\s\w')
</code></pre>
<p>and when using:</p>
<pre><code> try: self.failUnless(sel.is_text_present(p))
 except AssertionError, e: self.verificationErrors.append(str(e))
 time.sleep(10)
</code></pre>
<p>I get an exception.
Dont understand why?</p>
<pre><code>sel = self.selenium
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://release.seleniumhq.org/selenium-remote-control/1.0-beta-2/doc/python/selenium.selenium-class.html" rel="nofollow">Documentation</a> does not mention that the method would accept a compiled regex. Instead, you can pass a regex as a string prefixed with <code>rexeg:</code>. Try this:</p>
<pre><code>p = r"regex:Today:\s\w"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex" rel="nofollow"><code>assertRegex()</code></a> and <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotRegex" rel="nofollow"><code>assertNotRegex()</code></a> for that which test that a regex search matches.</p>
<p>Sample usage:</p>
<pre><code>errors = "(?i)Example|MySQL|not a valid|error"
self.assertNotRegex(self.driver.page_source, errors)
</code></pre>
</div>
<span class="comment-copy">What if you will do it in general python.</span>
<span class="comment-copy">You say <code>I get an exception</code>. What exception?</span>
<span class="comment-copy">What about using <code>p.match('some text')</code> or <code>p.search('some text')</code>, if it returns something it means the pattern is present.</span>
<span class="comment-copy">Yes, get_text() and re.search will hep</span>
<span class="comment-copy">What is r after = sign for?</span>
<span class="comment-copy">The <code>r</code> marks a <a href="http://docs.python.org/reference/lexical_analysis.html#string-literals" rel="nofollow noreferrer">raw string</a>, telling Python not to interpret the backslash as an escape character. In this case it does not make a difference, because <code>\s</code> and <code>\w</code> have no special meaning to Python, but it is a good habit to use a raw string when you want to include a backslash.</span>
