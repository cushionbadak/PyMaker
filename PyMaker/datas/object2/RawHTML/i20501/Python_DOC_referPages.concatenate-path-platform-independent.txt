<div class="post-text" itemprop="text">
<p>In python I have variables <code>base_dir</code> and <code>filename</code>. I would like to concatenate them to obtain <code>fullpath</code>. But under windows I should use <code>\</code> and for POSIX <code>/</code> .</p>
<pre><code>fullpath = "%s/%s" % ( base_dir, filename ) # for Linux
</code></pre>
<p>How to make it platform independent?</p>
<p><strong>Duplicate</strong>: <a href="https://stackoverflow.com/questions/6036129/platform-independent-file-paths">Platform-independent file paths?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use <a href="http://docs.python.org/library/os.path.html?highlight=os.path.join#os.path.join">os.path.join()</a> for this.</p>
<p>The strength of using this rather than string concatenation etc is that it is aware of the various OS specific issues, such as path separators. Examples:</p>
<pre><code>import os
</code></pre>
<p>Under <strong>Windows 7</strong>:</p>
<pre><code>base_dir = r'c:\bla\bing'
filename = r'data.txt'

os.path.join(base_dir, filename)
'c:\\bla\\bing\\data.txt'
</code></pre>
<p>Under <strong>Linux</strong>:</p>
<pre><code>base_dir = '/bla/bing'
filename = 'data.txt'

os.path.join(base_dir, filename)
'/bla/bing/data.txt'
</code></pre>
<p>The <a href="http://docs.python.org/library/os.path.html">os</a> module contains many useful methods for directory, path manipulation and finding out OS specific information, such as the separator used in paths via <a href="http://docs.python.org/library/os.html?highlight=os.sep#os.sep">os.sep</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/library/os.path.html#os.path.join" rel="noreferrer"><code>os.path.join()</code></a>:</p>
<pre><code>import os
fullpath = os.path.join(base_dir, filename)
</code></pre>
<p>The <a href="http://docs.python.org/library/os.path.html" rel="noreferrer">os.path</a> module contains all of the methods you should need for platform independent path manipulation, but in case you need to know what the path separator is on the current platform you can use <a href="http://docs.python.org/library/os.html#os.sep" rel="noreferrer"><code>os.sep</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
path = os.path.join("foo", "bar")
path = os.path.join("foo", "bar", "alice", "bob") # More than 2 params allowed.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Digging up an old question here, but on Python 3.4+ you can use <a href="https://docs.python.org/3/library/pathlib.html#operators" rel="nofollow noreferrer">pathlib operators</a>:</p>
<pre><code>from pathlib import Path

# evaluates to ./src/cool-code/coolest-code.py on Mac
concatenated_path = Path("./src") / "cool-code\\coolest-code.py"
</code></pre>
<p>It's potentially more readable than <code>os.path.join()</code> if you are fortunate enough to be running a recent version of Python. But, you also tradeoff compatibility with older versions of Python if you have to run your code in, say, a rigid or legacy environment.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've made a helper class for this:</p>
<pre><code>import os

class u(str):
    """
        Class to deal with urls concat.
    """
    def __init__(self, url):
        self.url = str(url)

    def __add__(self, other):
        if isinstance(other, u):
            return u(os.path.join(self.url, other.url))
        else:
            return u(os.path.join(self.url, other))

    def __unicode__(self):
        return self.url

    def __repr__(self):
        return self.url
</code></pre>
<p>The usage is:</p>
<pre><code>    a = u("http://some/path")
    b = a + "and/some/another/path" # http://some/path/and/some/another/path
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/6036129/platform-independent-file-paths">Platform-independent file paths?</a></span>
<span class="comment-copy">Though, Windows accepts forward slashes too.</span>
<span class="comment-copy">it is not <i>full</i> path if <code>base_dir</code> is a relative path (despite OP uses it)</span>
<span class="comment-copy">Adding an <code>abspath()</code> call should make it a full path if there's anything relative in it.</span>
<span class="comment-copy">@Andrew Clark, os.sep returns "\\" on Windows, but it still works even if I use "/". Is there any problem if we just use "/"?</span>
