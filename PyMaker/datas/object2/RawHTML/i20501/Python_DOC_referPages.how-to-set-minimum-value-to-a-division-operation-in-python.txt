<div class="post-text" itemprop="text">
<p>Is there a standard library  function which will set a minimum value to a division operation, for example:</p>
<pre><code>min(1, a/b)
</code></pre>
<p>This will ensure that min value of operation above will always be 1, never 0.</p>
<p>Such as:</p>
<pre><code>min(1, 1/5)
1
</code></pre>
<p>Also, how do I round up a division:</p>
<pre><code>round_up(1/5) = 1
</code></pre>
<p>I always get "0" when I divide 1/5, even with ceil function:</p>
<pre><code>math.ceil(1/5)
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use floating point division as default, you can do <code>from __future__ import division</code>:</p>
<pre><code>&gt;&gt;&gt; 1/5
0
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 1/5
0.2
&gt;&gt;&gt; math.ceil(1/5)
1.0
</code></pre>
<p>If you need the result to be of integer type, e.g. for indexing, you can use</p>
<pre><code>int(math.ceil(1/5))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The result of <code>1/5</code> is an integer already. If you want the floating point version you need to do <code>1.0/5</code>. The <code>math.ceil</code> function will then work as you expect: <code>math.ceil(1.0/5) = 1.0</code>.</p>
<p>If you're working with variables instead of constants, use the <code>float(x)</code> function to convert an integer into a floating point.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [4]: 1/5
Out[4]: 0

In [5]: math.ceil(1/5)
Out[5]: 0.0

In [7]: float(1)/5
Out[7]: 0.2

In [8]: math.ceil(float(1)/5)
Out[8]: 1.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could make a round up function for integers like this</p>
<pre><code>&gt;&gt;&gt; def round_up(p, q):
...     d, r = divmod(p, q)
...     if r != 0:
...         d += 1
...     return d
... 
&gt;&gt;&gt; round_up(1, 5)
1
&gt;&gt;&gt; round_up(0, 5)
0
&gt;&gt;&gt; round_up(5, 5)
1
&gt;&gt;&gt; round_up(6, 5)
2
&gt;&gt;&gt; 
</code></pre>
<p>Your example doesn't work because an integer dividing an integer is an integer.</p>
<p>As for your min question - what you wrote is probably the best you can do.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know about anything in the standard library, but if you are just trying to make sure the answer is never less than 1, the function is pretty easy:</p>
<pre><code>def min_dev(x,y):
    ans = x/y
    if ans &lt; 1:      # ensures answer cannot be 0
        return 1
    else:            # answers greater than 1 are returned normally
        return ans
</code></pre>
<p>If, instead, you are looking to round up every answer:</p>
<pre><code>def round_up(x,y):
    ans = x//y         # // is the floor division operator
    if x % y == 1:     # tests for remainder (returns 0 for no, 1 for yes)
        ans += 1       # same as ans = ans + 1
        return ans
    else:
        return ans
</code></pre>
<p>This will round up any answer with a remainder.
I believe Python 3.3 (and I know 3.4) return a float by default for integer division:  <a href="https://docs.python.org/3/tutorial/introduction.html" rel="nofollow">https://docs.python.org/3/tutorial/introduction.html</a></p>
</div>
