<div class="post-text" itemprop="text">
<p>I see a lot on converting a date string to an <code>datetime</code> object in Python, but I want to go the other way.<br/>
I've got </p>
<pre><code>datetime.datetime(2012, 2, 23, 0, 0)
</code></pre>
<p>and I would like to convert it to string like <code>'2/23/2012'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/time.html#time.strftime" rel="noreferrer">strftime</a> to help you format your date.</p>
<p>E.g.,</p>
<pre><code>import datetime
t = datetime.datetime(2012, 2, 23, 0, 0)
t.strftime('%m/%d/%Y')
</code></pre>
<p>will yield:</p>
<pre><code>'02/23/2012'
</code></pre>
<p>More information about formatting see <a href="http://docs.python.org/library/datetime.html#strftime-strptime-behavior" rel="noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>date</code> and <code>datetime</code> objects (and <code>time</code> as well) support a <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">mini-language to specify output</a>, and there are two ways to access it:</p>
<ul>
<li>direct method call: <code>dt.strftime('format here')</code>; and</li>
<li>new format method: <code>'{:format here}'.format(dt)</code></li>
</ul>
<p>So your example could look like:</p>
<pre><code>dt.strftime('%m/%d/%Y')
</code></pre>
<p>or</p>
<pre><code>'{:%m/%d/%Y}'.format(dt)
</code></pre>
<p>For completeness' sake: you can also directly access the attributes of the object, but then you only get the numbers:</p>
<pre><code>'%s/%s/%s' % (dt.month, dt.day, dt.year)
</code></pre>
<p>The time taken to learn the mini-language is worth it.</p>
<hr/>
<p>For reference, here are the codes used in the mini-language:</p>
<ul>
<li><code>%a</code>  Weekday as locale’s abbreviated name.   </li>
<li><code>%A</code>  Weekday as locale’s full name.  </li>
<li><code>%w</code>  Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.</li>
<li><code>%d</code>  Day of the month as a zero-padded decimal number.</li>
<li><code>%b</code>  Month as locale’s abbreviated name.</li>
<li><code>%B</code>  Month as locale’s full name.</li>
<li><code>%m</code>  Month as a zero-padded decimal number.  01, ..., 12      </li>
<li><code>%y</code>  Year without century as a zero-padded decimal number.   00, ..., 99      </li>
<li><code>%Y</code>  Year with century as a decimal number.  1970, 1988, 2001, 2013   </li>
<li><code>%H</code>  Hour (24-hour clock) as a zero-padded decimal number.   00, ..., 23      </li>
<li><code>%I</code>  Hour (12-hour clock) as a zero-padded decimal number.   01, ..., 12      </li>
<li><code>%p</code>  Locale’s equivalent of either AM or PM.</li>
<li><code>%M</code>  Minute as a zero-padded decimal number.     00, ..., 59      </li>
<li><code>%S</code>  Second as a zero-padded decimal number.     00, ..., 59</li>
<li><code>%f</code>  Microsecond as a decimal number, zero-padded on the left.   000000, ..., 999999</li>
<li><code>%z</code>  UTC offset in the form +HHMM or -HHMM  (empty if naive), +0000, -0400, +1030</li>
<li><code>%Z</code>  Time zone name      (empty if naive), UTC, EST, CST      </li>
<li><code>%j</code>  Day of the year as a zero-padded decimal number.    001, ..., 366    </li>
<li><code>%U</code>  Week number of the year (Sunday is the first) as a zero padded decimal number.</li>
<li><code>%W</code>  Week number of the year (Monday is first) as a decimal number.</li>
<li><code>%c</code>  Locale’s appropriate date and time representation.  </li>
<li><code>%x</code>  Locale’s appropriate date representation.   </li>
<li><code>%X</code>  Locale’s appropriate time representation.   </li>
<li><code>%%</code>  A literal '%' character.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Another option:</p>
<pre><code>import datetime
now=datetime.datetime.now()
now.isoformat()
# ouptut --&gt; '2016-03-09T08:18:20.860968'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use simple string formatting methods:</p>
<pre><code>&gt;&gt;&gt; dt = datetime.datetime(2012, 2, 23, 0, 0)
&gt;&gt;&gt; '{0.month}/{0.day}/{0.year}'.format(dt)
'2/23/2012'
&gt;&gt;&gt; '%s/%s/%s' % (dt.month, dt.day, dt.year)
'2/23/2012'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/string.html#format-examples"><strong><code>type-specific formatting</code></strong></a> can be used as well:</p>
<pre><code>t = datetime.datetime(2012, 2, 23, 0, 0)
"{:%m/%d/%Y}".format(t)
</code></pre>
<p>Output:</p>
<pre><code>'02/23/2012'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to convert a datetime object into a string by working directly with the components of the datetime object.</p>
<pre><code>from datetime import date  

myDate = date.today()    
#print(myDate) would output 2017-05-23 because that is today
#reassign the myDate variable to myDate = myDate.month 
#then you could print(myDate.month) and you would get 5 as an integer
dateStr = str(myDate.month)+ "/" + str(myDate.day) + "/" + str(myDate.year)    
# myDate.month is equal to 5 as an integer, i use str() to change it to a 
# string I add(+)the "/" so now I have "5/" then myDate.day is 23 as
# an integer i change it to a string with str() and it is added to the "5/"   
# to get "5/23" and then I add another "/" now we have "5/23/" next is the 
# year which is 2017 as an integer, I use the function str() to change it to 
# a string and add it to the rest of the string.  Now we have "5/23/2017" as 
# a string. The final line prints the string.

print(dateStr)  
</code></pre>
<p>Output --&gt; 5/23/2017</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert datetime to string.</p>
<pre><code>published_at = "{}".format(self.published_at)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>String concatenation, <code>str.join</code>, can be used to build the string.</p>
<pre><code>d = datetime.now()
'/'.join(str(x) for x in (d.month, d.day, d.year))
'3/7/2016'
</code></pre>
</div>
<span class="comment-copy">Very useful for <code>DateTimeField</code> or <code>DateField</code> in django.  Thanks</span>
<span class="comment-copy">use <code>t = datetime.datetime.now()</code> to use current date</span>
<span class="comment-copy">As far as I can tell from the docs there is no way to return a non-zero padded date ie '2/23/2012'.</span>
<span class="comment-copy">bounty goes here for a good sum up</span>
<span class="comment-copy">Thats a great list to follow for Various kinds of Date Manipulations :-)</span>
<span class="comment-copy">The best and simplest solution here</span>
<span class="comment-copy">similarly, you can do something like <code>'{:%Y-%m-%d %H:%M}'.format(datetime(2001, 2, 3, 4, 5))</code>. See more at pyformat.info</span>
