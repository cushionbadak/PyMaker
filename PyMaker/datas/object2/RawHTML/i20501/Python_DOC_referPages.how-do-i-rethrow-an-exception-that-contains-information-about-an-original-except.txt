<div class="post-text" itemprop="text">
<p>So I basically have to isolate 2 layers of the application from one another by exceptions.</p>
<p>I have this WLST 12c script (python 2.2), that goes like</p>
<pre><code>try:
    something something...
except java.lang.UnsuportedOpperationException, (a, b):
    pass
except java.lang.reflect.UndeclaredThrowableException, (a, b):
    pass
</code></pre>
<p>I'd like to be able to re-raise one of my own types of exception, that contains a message about what caused the previous exception (and no, i don't know what the <code>a</code> and <code>b</code> parameters are, but i'm guessing one of them should be the exception description).</p>
<p>I'm a java guy myself, so i am looking forward to something like</p>
<pre><code>try {
    something something...
} catch (Exception e) {
    throw new RuntimeException(e, "something horrible happened");
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hope I got the question right.</p>
<p>I'm not sure about Python 2.2 specifics, but <a href="http://rgruet.free.fr/PQR2.2.html#Statements" rel="noreferrer">this</a> says you can handle exceptions the same way it's done in more recent versions:</p>
<pre><code>try:
    do_stuff()
except ErrorToCatch, e:
    raise ExceptionToThrow(e)
</code></pre>
<p>Or maybe the last line should be <code>raise ExceptionToThrow(str(e))</code>. That depends on how your exception is defined. Example:</p>
<pre><code>try:
    raise TypeError('foo')
except TypeError, t:
    raise ValueError(t)
</code></pre>
<p>This raises <code>ValueError('foo')</code>.</p>
<p>Hope it helps :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Although this is an old post, there is a much more simple answer to the original question. To rethrow an exception after catching it, just use "raise" with no arguments. The original stack trace will be preserved.</p>
</div>
<div class="post-text" itemprop="text">
<p>The idiom</p>
<pre><code>try:
   ...
except SomeException:
   ...
   raise
</code></pre>
<p>mentioned by @normaldotcom rethrows the error that has been catched as-is, without any modification. It does <em>not</em> answer to the OP, "<em>How do I create a new exception that contain information about an exception that has been catched</em>".</p>
<p>Indeed in some situations, one would like to create a new exception, typically to regroup many possible sources of internal errors into a single exception with a clearer message, while still keeping the traceback to the original error to enable debugging.</p>
<p>A way to achieve this is via the <a href="https://docs.python.org/3/library/exceptions.html#BaseException.with_traceback" rel="nofollow noreferrer"><code>with_traceback</code> method of <code>BaseException</code></a>. For example,</p>
<pre><code>import sys

try:
  raise ValueError('internal error message')
except ValueError:
  tb = sys.exc_info()[2]
  raise Exception('new error message').with_traceback(tb)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class MyException(Exception): pass

...

try:
    my_funcion(my_args)
except (IOError, KeyError, some_list_of_other_possible_exceptions), e:
    raise MyException("Uh oh")
</code></pre>
<p>You can extract information from the original exception, which here is bound to e, and then pass that on to your own exception when you raise it.</p>
</div>
<span class="comment-copy">Why exactly are you using python 2.2? The most recent 2.2 release was 2003. There's no current distributions that ship that for their current version as far as I'm aware...</span>
<span class="comment-copy">that actually looks like it's using a <code>Jython</code> interpreter which may be behind CPython in terms of version numbers</span>
<span class="comment-copy">The method without str() is best; see <a href="http://www.python.org/dev/peps/pep-3134/" rel="nofollow noreferrer">python.org/dev/peps/pep-3134</a> . Also @vlad-ardelean: you can use ExceptionToThrow e.__cause__ to get the ErrorToCatch</span>
<span class="comment-copy">Note that this discards information about where the original exception occurred, but that sounds like what the OP is asking for.</span>
<span class="comment-copy">This is the correct answer.</span>
<span class="comment-copy">Note here that multicatch MUST be the last except statement that specifies types</span>
