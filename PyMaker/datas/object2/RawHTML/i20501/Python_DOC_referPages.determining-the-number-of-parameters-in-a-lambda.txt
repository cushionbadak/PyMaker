<div class="post-text" itemprop="text">
<p>I am wondering if there is a way to determine (given a variable containing a lambda) the number of parameters the lambda it contains.  The reason being, I wish to call a function conditionally dependent on the number of parameters.</p>
<p>What I'm looking for</p>
<pre><code>def magic_lambda_parameter_counting_function(lambda_function):
    """Returns the number of parameters in lambda_function

    Args:
        lambda_function - A lambda of unknown number of parameters
    """
</code></pre>
<p>So I can do something like</p>
<pre><code>def my_method(lambda_function):

    # ... 
    # (say I have variables i and element)

    parameter_count = magic_lambda_parameter_counting_function(lambda_function)

    if parameter_count == 1:
        lambda_function(i)
    elif parameter_count == 2:
        lambda_function(i, element)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm skipping the part about how to count the arguments, because I don't know how you want to consider varargs and keywords.  But this should get you started.</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; foo = lambda x, y, z: x + y + z
&gt;&gt;&gt; inspect.getargspec(foo)
ArgSpec(args=['x', 'y', 'z'], varargs=None, keywords=None, defaults=None)
</code></pre>
<p>It sounds like <a href="https://docs.python.org/3/library/inspect.html#inspect.getargspec" rel="nofollow">inspect.getargspec is deprecated</a> as of Python 3 (thanks to @JeffHeaton).  The recommend solution uses <a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="nofollow">inspect.signature</a>. The <code>.parameters</code> member of the result contains a variety of structures depending on the arrangement of parameters to the function in question, but I'm matching my function from the Python 2 example above.</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; foo = lambda x, y, z: x + y + z
&gt;&gt;&gt; inspect.signature(foo).parameters
mappingproxy(OrderedDict([('x', &lt;Parameter "x"&gt;), ('y', &lt;Parameter "y"&gt;), ('z', &lt;Parameter "z"&gt;)]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lambdas are functions like any other.  The argument count is stored in <code>func.__code__.co_argcount</code>.</p>
<pre><code>&gt;&gt;&gt; foo = lambda x, y=2: x+y
&gt;&gt;&gt; foo.__code__.co_argcount
2
&gt;&gt;&gt; foo = lambda x, y=2, z=3: x+y+z
&gt;&gt;&gt; foo.__code__.co_argcount
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation on <a href="http://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy">callable types</a>, the <code>func_code</code> attribute of functions contains a code object, and from the inspect module documentation on <a href="http://docs.python.org/library/inspect.html#types-and-members">code objects</a> there is a <code>co_argcount</code> member that contains the number of arguments (not including <code>*</code> or <code>**</code> args).</p>
<p>So the best way to get this information from a lambda function (or any function) is to use <code>func.func_code.co_argcount</code>:</p>
<pre><code>&gt;&gt;&gt; foo = lambda a, b, *args, **kwargs: None
&gt;&gt;&gt; foo.func_code.co_argcount
2
</code></pre>
</div>
<span class="comment-copy">looks like inspect.getargspec is deprecated, it is suggested to use inspect.signature</span>
<span class="comment-copy">+1 Great answer -- wish I could accept two answers.  This is in fact how inspect.py does it (looked up the source).</span>
<span class="comment-copy">But using <code>inspect</code> you get the "portable" functionality, seeing how the attribute's name changed from Python 2 to Python 3.</span>
