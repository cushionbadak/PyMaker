<div class="post-text" itemprop="text">
<p>I already created a txt file using python with a few lines of text that will be read by a simple program. However, I am having some trouble reopening the file and writing additional lines in the file in a later part of the program. (The lines will be written from user input obtained later on.) </p>
<pre><code>with open('file.txt', 'w') as file:
    file.write('input')
</code></pre>
<p>This is assuming that 'file.txt' has been opened before and written in. In opening this a second time however, with the code that I currently have, I have to erase everything that was written before and rewrite the new line. Is there a way to prevent this from happening (and possibly cut down on the excessive code of opening the file again)?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to append to the file, open it with <code>'a'</code>. If you want to seek through the file to find the place where you should insert the line, use <code>'r+'</code>. (<a href="http://docs.python.org/tutorial/inputoutput.html#reading-and-writing-files">docs</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Open the file for 'append' rather than 'write'.</p>
<pre><code>with open('file.txt', 'a') as file:
    file.write('input')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>'a'</code>, <code>'a'</code> means <code>append</code>. Anything written to a file opened with <code>'a'</code> attribute is written at the end of the file.</p>
<pre><code>with open('file.txt', 'a') as file:
    file.write('input')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answers above are correct, but to append the data as a new line, as opposed to tacking it onto the end of the last line in the file, use the following:</p>
<pre><code>with open('file.txt', 'a') as file:
    file.writelines('input')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you open with "a" mode , the write position will always be at the end of the file (an append). There are other permutations of the mode argument for updating (+), truncating (w) and binary (b) mode but starting with just "a" is your best. If you want to seek through the file to find the place where you should insert the line, use 'r+'.</p>
<p>The following code <a href="http://net-informations.com/python/iq/append.htm" rel="nofollow noreferrer">append a text</a> in the existing file:</p>
<pre><code>with open("file.txt", "a") as myfile:
    myfile.write("text appended")
</code></pre>
</div>
<span class="comment-copy">Do not use "file" as variable name because it's shadowing the built-in file type</span>
<span class="comment-copy">Note! This will not add a newline. If you need to add a line to a text file (as opposed to a line fragment), end the data with <code>\n</code>, e.g.: <code>file.write('input\n')</code></span>
<span class="comment-copy">This is actually incorrect. <code>file.write(arg)</code> writes <code>arg</code> to the file as-is. <code>file.writelines(arg)</code> writes all the elements of <code>arg</code> (e.g., characters of a string or items in a list) to the file <i>without</i> <i>any</i> <i>separators</i>. In this example, they both do exactly the same thing. See <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">docs.python.org/3/library/io.html</a> . Whenever you're writing files, you have to add the line endings yourself.</span>
<span class="comment-copy">@MatthiasFripp is correct. I don't know why I thought this worked, but it doesn't. Though <code>writelines</code> should probably be renamed <code>writeiter</code>, or at least take a <code>sep='\n'</code> argument. It's discussed further <a href="https://stackoverflow.com/questions/13730107/writelines-writes-lines-without-newline-just-fills-the-file">here</a></span>
