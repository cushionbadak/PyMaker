<div class="post-text" itemprop="text">
<p>Given a list of items, recall that the <em>mode</em> of the list is the item that occurs most often.</p>
<p>I would like to know how to create a function that can find the mode of a list but that displays a message if the list does not have a mode (e.g., all the items in the list only appear once). I want to make this function without importing any functions. I'm trying to make my own function from scratch.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>max</code> function and a key. Have a look at <a href="https://stackoverflow.com/questions/18296755/python-max-function-using-key-and-lambda-expression">python max function using 'key' and lambda expression</a>.</p>
<pre><code>max(set(list), key=list.count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/library/collections.html#collections.Counter"><code>Counter</code></a> supplied in the <a href="http://docs.python.org/library/collections.html"><code>collections</code></a> package which has a <code>mode</code>-esque function</p>
<pre><code>from collections import Counter
data = Counter(your_list_in_here)
data.most_common()   # Returns all unique items and their counts
data.most_common(1)  # Returns the highest occurring item
</code></pre>
<p>Note: Counter is new in python 2.7 and is not available in earlier versions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.4 includes the method <a href="http://docs.python.org/3.4/library/statistics.html#statistics.mode"><code>statistics.mode</code></a>, so it is straightforward:</p>
<pre><code>&gt;&gt;&gt; from statistics import mode
&gt;&gt;&gt; mode([1, 1, 2, 3, 3, 3, 3, 4])
 3
</code></pre>
<p>You can have any type of elements in the list, not just numeric:</p>
<pre><code>&gt;&gt;&gt; mode(["red", "blue", "blue", "red", "green", "red", "red"])
 'red'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Taking a leaf from some statistics software, namely <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mode.html" rel="noreferrer">SciPy</a> and <a href="http://www.mathworks.co.uk/help/techdoc/ref/mode.html" rel="noreferrer">MATLAB</a>, these just return the smallest most common value, so if two values occur equally often, the smallest of these are returned. Hopefully an example will help:</p>
<pre><code>&gt;&gt;&gt; from scipy.stats import mode

&gt;&gt;&gt; mode([1, 2, 3, 4, 5])
(array([ 1.]), array([ 1.]))

&gt;&gt;&gt; mode([1, 2, 2, 3, 3, 4, 5])
(array([ 2.]), array([ 2.]))

&gt;&gt;&gt; mode([1, 2, 2, -3, -3, 4, 5])
(array([-3.]), array([ 2.]))
</code></pre>
<p>Is there any reason why you can 't follow this convention?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many simple ways to find the mode of a list in Python such as:</p>
<pre><code>import statistics
statistics.mode([1,2,3,3])
&gt;&gt;&gt; 3
</code></pre>
<p>Or, you could find the max by its count</p>
<pre><code>max(array, key = array.count)
</code></pre>
<p>The problem with those two methods are that they don't work with multiple modes. The first returns an error, while the second returns the first mode. </p>
<p>In order to find the modes of a set, you could use this function:</p>
<pre><code>def mode(array):
    most = max(list(map(array.count, array)))
    return list(set(filter(lambda x: array.count(x) == most, array)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Extending the Community answer that will not work when the list is empty, here is working code for mode:</p>
<pre><code>def mode(arr):
        if arr==[]:
            return None
        else:
            return max(set(arr), key=arr.count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you are interested in either the smallest, largest or all modes:</p>
<pre><code>def get_small_mode(numbers, out_mode):
    counts = {k:numbers.count(k) for k in set(numbers)}
    modes = sorted(dict(filter(lambda x: x[1] == max(counts.values()), counts.items())).keys())
    if out_mode=='smallest':
        return modes[0]
    elif out_mode=='largest':
        return modes[-1]
    else:
        return modes
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wrote up this handy function to find the mode.  </p>
<pre><code>def mode(nums):
    corresponding={}
    occurances=[]
    for i in nums:
            count = nums.count(i)
            corresponding.update({i:count})

    for i in corresponding:
            freq=corresponding[i]
            occurances.append(freq)

    maxFreq=max(occurances)

    keys=corresponding.keys()
    values=corresponding.values()

    index_v = values.index(maxFreq)
    global mode
    mode = keys[index_v]
    return mode
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short, but somehow ugly:</p>
<pre><code>def mode(arr) :
    m = max([arr.count(a) for a in arr])
    return [x for x in arr if arr.count(x) == m][0] if m&gt;1 else None
</code></pre>
<p>Using a dictionary, slightly less ugly:</p>
<pre><code>def mode(arr) :
    f = {}
    for a in arr : f[a] = f.get(a,0)+1
    m = max(f.values())
    t = [(x,f[x]) for x in f if f[x]==m]
    return m &gt; 1 t[0][0] else None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A little longer, but can have multiple modes and can get string with most counts or mix of datatypes. </p>
<pre><code>def getmode(inplist):
    '''with list of items as input, returns mode
    '''
    dictofcounts = {}
    listofcounts = []
    for i in inplist:
        countofi = inplist.count(i) # count items for each item in list
        listofcounts.append(countofi) # add counts to list
        dictofcounts[i]=countofi # add counts and item in dict to get later
    maxcount = max(listofcounts) # get max count of items
    if maxcount ==1:
        print "There is no mode for this dataset, values occur only once"
    else:
        modelist = [] # if more than one mode, add to list to print out
        for key, item in dictofcounts.iteritems():
            if item ==maxcount: # get item from original list with most counts
                modelist.append(str(key))
        print "The mode(s) are:",' and '.join(modelist)
        return modelist 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not just</p>
<pre><code>def print_mode (thelist):
  counts = {}
  for item in thelist:
    counts [item] = counts.get (item, 0) + 1
  maxcount = 0
  maxitem = None
  for k, v in counts.items ():
    if v &gt; maxcount:
      maxitem = k
      maxcount = v
  if maxcount == 1:
    print "All values only appear once"
  elif counts.values().count (maxcount) &gt; 1:
    print "List has multiple modes"
  else:
    print "Mode of list:", maxitem
</code></pre>
<p>This doesn't have a few error checks that it should have, but it will find the mode without importing any functions and will print a message if all values appear only once.  It will also detect multiple items sharing the same maximum count, although it wasn't clear if you wanted that.  </p>
</div>
<div class="post-text" itemprop="text">
<p>This function returns the mode or modes of a function no matter how many, as well as the frequency of the mode or modes in the dataset. If there is no mode (ie. all items occur only once), the function returns an error string. This is similar to A_nagpal's function above but is, in my humble opinion, more complete, and I think it's easier to understand for any Python novices (such as yours truly) reading this question to understand.</p>
<pre><code> def l_mode(list_in):
    count_dict = {}
    for e in (list_in):   
        count = list_in.count(e)
        if e not in count_dict.keys():
            count_dict[e] = count
    max_count = 0 
    for key in count_dict: 
        if count_dict[key] &gt;= max_count:
            max_count = count_dict[key]
    corr_keys = [] 
    for corr_key, count_value in count_dict.items():
        if count_dict[corr_key] == max_count:
            corr_keys.append(corr_key)
    if max_count == 1 and len(count_dict) != 1: 
        return 'There is no mode for this data set. All values occur only once.'
    else: 
        corr_keys = sorted(corr_keys)
        return corr_keys, max_count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a number to be a <code>mode</code>, it must occur more number of times than <em>at least one other number</em> in the list, and it must <em>not</em> be the only number in the list. So, I refactored @mathwizurd's answer (to use the <a href="https://docs.python.org/3.6/library/stdtypes.html?highlight=set#frozenset.difference" rel="nofollow noreferrer"><code>difference</code></a> method) as follows: </p>
<pre><code>def mode(array):
    '''
    returns a set containing valid modes
    returns a message if no valid mode exists
      - when all numbers occur the same number of times
      - when only one number occurs in the list 
      - when no number occurs in the list 
    '''
    most = max(map(array.count, array)) if array else None
    mset = set(filter(lambda x: array.count(x) == most, array))
    return mset if set(array) - mset else "list does not have a mode!" 
</code></pre>
<p>These tests pass successfully: </p>
<pre><code>mode([]) == None 
mode([1]) == None
mode([1, 1]) == None 
mode([1, 1, 2, 2]) == None 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def mode(inp_list):
    sort_list = sorted(inp_list)
    dict1 = {}
    for i in sort_list:        
            count = sort_list.count(i)
            if i not in dict1.keys():
                dict1[i] = count

    maximum = 0 #no. of occurences
    max_key = -1 #element having the most occurences

    for key in dict1:
        if(dict1[key]&gt;maximum):
            maximum = dict1[key]
            max_key = key 
        elif(dict1[key]==maximum):
            if(key&lt;max_key):
                maximum = dict1[key]
                max_key = key

    return max_key
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def mode(data):
    lst =[]
    hgh=0
    for i in range(len(data)):
        lst.append(data.count(data[i]))
    m= max(lst)
    ml = [x for x in data if data.count(x)==m ] #to find most frequent values
    mode = []
    for x in ml: #to remove duplicates of mode
        if x not in mode:
        mode.append(x)
    return mode
print mode([1,2,2,2,2,7,7,5,5,5,5])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple function that gets the first mode that occurs in a list. It makes a dictionary with the list elements as keys and number of occurrences and then reads the dict values to get the mode.</p>
<pre><code>def findMode(readList):
    numCount={}
    highestNum=0
    for i in readList:
        if i in numCount.keys(): numCount[i] += 1
        else: numCount[i] = 1
    for i in numCount.keys():
        if numCount[i] &gt; highestNum:
            highestNum=numCount[i]
            mode=i
    if highestNum != 1: print(mode)
    elif highestNum == 1: print("All elements of list appear once.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will return all modes:</p>
<pre><code>def mode(numbers)
    largestCount = 0
    modes = []
    for x in numbers:
        if x in modes:
            continue
        count = numbers.count(x)
        if count &gt; largestCount:
            del modes[:]
            modes.append(x)
            largestCount = count
        elif count == largestCount:
            modes.append(x)
    return modes
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a clear approach, useful for classroom and only using lists and dictionaries by comprehension, you can do:</p>
<pre><code>def mode(my_list):
    # Form a new list with the unique elements
    unique_list = sorted(list(set(my_list)))
    # Create a comprehensive dictionary with the uniques and their count
    appearance = {a:my_list.count(a) for a in unique_list} 
    # Calculate max number of appearances
    max_app = max(appearance.values())
    # Return the elements of the dictionary that appear that # of times
    return {k: v for k, v in appearance.items() if v == max_app}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#function to find mode
def mode(data):  
    modecnt=0
#for count of number appearing
    for i in range(len(data)):
        icount=data.count(data[i])
#for storing count of each number in list will be stored
        if icount&gt;modecnt:
#the loop activates if current count if greater than the previous count 
            mode=data[i]
#here the mode of number is stored 
            modecnt=icount
#count of the appearance of number is stored
    return mode
print mode(data1)
</code></pre>
</div>
<span class="comment-copy">Sorry, but can you explain what exactly you mean by 'mode of the list'?</span>
<span class="comment-copy">@Vikas: the mode is the most frequently-occurring element (if any). Some definitions extend it to take the arithmetic mean of all such elements if there are more than one.</span>
<span class="comment-copy">So many wrong answers here! For e.g <code>assert(mode[1, 1, 1]) == None</code> and  <code>assert(mode[1, 2, 3, 4]) == None</code>. For a number to be a <code>mode</code>, it must occur more number of times than at least one other number in the list, and it must <i>not</i> be the only number in the list.</span>
<span class="comment-copy">This is the correct answer to OP, considering it does not require any extra imports.  Good job, David</span>
<span class="comment-copy">It seems to me that this would run in <code>O(n**2)</code>. Does it?</span>
<span class="comment-copy">This has quadratic runtime</span>
<span class="comment-copy">Can someone explain the choice of key to me in this answer? The example keys in the link are all transformations whereas list.count should be a static numeric value right?</span>
<span class="comment-copy">Could also just use <code>max(lst, key=lst.count)</code>. (And I'd really not call a list <code>list</code>.)</span>
<span class="comment-copy">The question states that the user wants to make a function from scratch -- i.e., no imports.</span>
<span class="comment-copy">Your last line returns a list containing a tuple containing a mode and its frequency. To get just a mode use <code>Counter(your_list_in_here).most_common(1)[0][0]</code>. If there is more than one mode this returns an arbitrary one.</span>
<span class="comment-copy">Suppose there are <code>n</code> most common <code>modes</code>. If Counter(your_list_in_here).most_common(1)[0][0] gets you the first mode, how would you get another most common <code>mode</code> ? Just replace the last <code>0</code> with <code>1</code>? One can make a function to customize the <code>mode</code> to their liking..</span>
<span class="comment-copy">if there is more than one mode, how can I return the largest of these numbers?</span>
<span class="comment-copy">Throws error on using mode([1, 1,1,1, 2, 3, 3, 3, 3, 4]) where 1 and 3 repeat equal number of time. Ideally, should return smallest of the number which largest but equal number of times. StatisticsError: no unique mode; found 2 equally common values</span>
<span class="comment-copy">Haven't used this 3.4 statistics package, but scipy.stats.mode will return the smallest, in this case 1. I would, however, prefer the throw of the error in certain cases...</span>
<span class="comment-copy">Why only the smallest mode is returned when there are multiple?</span>
<span class="comment-copy">@zyxue simple statistical convention</span>
<span class="comment-copy">@chrisfs and to make it return the largest mode if there are multiple?</span>
<span class="comment-copy">Using the mode, gives error when there are two elements occur same amount of time.</span>
<span class="comment-copy">This method will fail if 2 items have same no. of occurences.</span>
<span class="comment-copy">So what im trying to do is to detect multiple items displaying the same count and then displaying all the items with that same count</span>
<span class="comment-copy">Have you actually tried this yourself?  The extension from my code here to have it print all items with the same count is fairly straightforward.</span>
<span class="comment-copy">I say this only because you said "the function returns an error string." The line that reads <code>return 'There is no mode for this data set. All values occur only once.'</code> can be turned into an error message with <code>traceback</code> as `if condition: <i>next line with indent</i> raise ValueError('There is no mode for this data set. All values occur only once.') <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">Here is a list</a> of different types of errors you can raise.</span>
<span class="comment-copy">You should explain your answer with comments or more details</span>
