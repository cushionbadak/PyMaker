<div class="post-text" itemprop="text">
<p>How do you trigger an exception in a main thread, running blocking code, from a daemon thread in Python?</p>
<p>I have a daemon thread that periodically checks a database for a record indicating that its current process should terminate (i.e. the user has pressed the "cancel" button). In my main non-daemon thread, I'm running a blocking call to an external process that I can't easily modify to gracefully terminate. However, the main thread can gracefully handle a normal KeyboardInterrupt when I manually trigger one.</p>
<p>So if my daemon thread receives the terminate command, how do I raise an exception in my main thread to terminate my process?</p>
</div>
<div class="post-text" itemprop="text">
<p>After digging through the thread docs, I finally found the solution to be <a href="http://docs.python.org/library/thread.html#thread.interrupt_main" rel="nofollow">interrupt_main()</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get your subprocess returncode with the <a href="http://docs.python.org/library/subprocess.html#subprocess.Popen.returncode" rel="nofollow">returncode</a> attribute. Raise something if it's different from zero.</p>
<p>Edit: I've mixed up the subprocess and multiprocessing modules. There is however an <a href="http://docs.python.org/library/multiprocessing.html?highlight=daemon#multiprocessing.Process.exitcode" rel="nofollow">exitcode</a> attribute in the multiprocessing module that seems similar to the subprocess returncode attribute.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's typically done using a message queue. 
See <a href="https://stackoverflow.com/questions/2829329/catch-a-threads-exception-in-the-caller-thread-in-python">Catch a thread's exception in the caller thread in Python</a></p>
<p>However it will not preempt your main thread, you will have to actively poll for it. Maybe with signals you'll be able to get what you need.</p>
</div>
<span class="comment-copy">The link should read : <a href="https://docs.python.org/3/library/_thread.html" rel="nofollow noreferrer">docs.python.org/3/library/_thread.html</a>  It is the rare solution to stopping Django from code.</span>
<span class="comment-copy">My question concerns threading, not multi-processing.</span>
