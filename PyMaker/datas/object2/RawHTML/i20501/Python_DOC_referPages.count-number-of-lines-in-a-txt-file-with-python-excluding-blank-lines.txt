<div class="post-text" itemprop="text">
<p>I wish to count the number of lines in a .txt file which looks something like this:</p>
<pre><code>apple
orange
pear

hippo
donkey
</code></pre>
<p>Where there are blank lines used to separate blocks. The result I'm looking for, based on the above sample, is five (lines).</p>
<p>How can I achieve this?</p>
<p>As a bonus, it would be nice to know how many blocks/paragraphs there are. So, based on the above example, that would be two blocks.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>non_blank_count = 0

with open('data.txt') as infp:
    for line in infp:
       if line.strip():
          non_blank_count += 1

print 'number of non-blank lines found %d' % non_blank_count
</code></pre>
<p>UPDATE: Re-read the question, OP wants to count <em>non-blank</em> lines .. (sigh .. thanks @RanRag).
(I need a break from the computer ...)</p>
</div>
<div class="post-text" itemprop="text">
<p>A short way to count the number of non-blank lines could be:</p>
<pre><code>with open('data.txt', 'r') as f:
    lines = f.readlines()
    num_lines = len([l for l in lines if l.strip(' \n') != ''])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>sum([1 for i in open("file_name","r").readlines() if i.strip()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Considering the blank lines will only contain the new line character, it would be pretty faster to avoid calling <code>str.strip</code> which creates a new string but instead to check if the line contains only spaces using <code>str.isspace</code> and then skip it:</p>
<pre><code>with open('data.txt') as f:
    non_blank_lines = sum(not line.isspace() for line in f)
</code></pre>
<hr/>
<p>Demo:</p>
<pre><code>from io import StringIO

s = '''apple
orange
pear

hippo
donkey'''

non_blank_lines = sum(not line.isspace() for line in StringIO(s)))
# 5
</code></pre>
<hr/>
<p>You can further use <code>str.isspace</code> with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to count the number of contiguous lines/blocks in the file:</p>
<pre><code>from itertools import groupby

no_paragraphs = sum(k for k, _ in groupby(StringIO(s), lambda x: not x.isspace()))
print(no_paragraphs)
# 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not blank lines Counter:</p>
<pre><code>lines_counter = 0

with open ('test_file.txt') as f:
    for line in f:
        if line != '\n':
            lines_counter += 1
</code></pre>
<p>Blocks Counter:</p>
<pre><code>para_counter = 0
prev = '\n'

with open ('test_file.txt') as f:
    for line in f:
        if line != '\n' and prev == '\n':
            para_counter += 1
        prev = line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This bit of Python code should solve your problem:</p>
<pre><code>with open('data.txt', 'r') as f: 
    lines = len(list(filter(lambda x: x.strip(), f)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how I would've done it:</p>
<pre><code>f = open("file.txt")
l = [x for x in f.readlines() if x != "\n"]

print len(l)
</code></pre>
<p><code>readlines()</code> will make a list of all the lines in the file and then you can just take those lines that have at least something in them.
Looks pretty straightforward to me!</p>
</div>
<div class="post-text" itemprop="text">
<p>Pretty straight one! I believe</p>
<pre><code>f = open('path','r')
count = 0
for lines in f:
    if lines.strip():
        count +=1
print count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am surprised to see that there isn't a clean pythonic answer yet (as of Jan 1, 2019). Many of the other answers create unnecessary lists, count in a non-pythonic way, loop over the lines of the file in a non-pythonic way, do not close the file properly, do unnecessary things, assume that the end of line character can only be <code>'\n'</code>, or have other smaller issues.</p>
<p>Here is my suggested solution:</p>
<pre><code>with open('myfile.txt') as f:
    line_count = sum(1 for line in f if line.strip())
</code></pre>
<p>The question does not define what blank line is. <strong>My definition of blank line:</strong> <code>line</code> is a blank line if and only if <code>line.strip()</code> returns the empty string. This may or may not be your definition of blank line.</p>
</div>
<span class="comment-copy">Does it need to be python? <code>grep . filename | wc -l</code> will give you the  lines easily.</span>
<span class="comment-copy">@Daenyth It's part of a larger Python script, so ideally yes.</span>
<span class="comment-copy">@larsmans That's a funny link. I've been searching for a long time, and have found lots of examples of how to get the lines, but none on how to exclude blanks.</span>
<span class="comment-copy">This doesn't work. A blank line is returned as <code>"\n"</code>, not <code>""</code>.</span>
<span class="comment-copy">Junuxx, not infp.readlines(), as it will read all the lines at once, instead of iterating over the lines.</span>
<span class="comment-copy">@Levon: I think user wants to count the number of lines in a file excluding the blank lines. He doesn't want to count the number of <code>blank lines</code>.</span>
<span class="comment-copy">@Junuxx Point taken, however I think the line by line approach might be better for potentially large files since <code>readlines</code> reads the whole file into a list/memory</span>
<span class="comment-copy">yet another way: <code>non_blank_count = sum(1 for line in open("data.txt") if line.strip())</code></span>
<span class="comment-copy">Why the <code>filter</code> and <code>map</code>?  Couldn't you just do:  <code>filter(lambda x:x.strip(),f)</code></span>
<span class="comment-copy">@mgilson: haha good point, I wasn't thinking :P</span>
<span class="comment-copy">I don't know that I've ever had a good reason to <code>import string</code>  :)</span>
<span class="comment-copy">@mgilson: and, in my haste to edit, I completely forgot to remove that part :)</span>
