<div class="post-text" itemprop="text">
<p>I want one module to import data from another, but I don't want to hard code the name of the other module. I have attempted using <code>sys.argv</code>, as in:</p>
<pre><code>from sys import argv
from argv[1] import database
</code></pre>
<p>but this gives me <code>invalid syntax</code> under <code>argv[1]</code>. I have also tried raw_input, as in:</p>
<pre><code>module = raw_input("Enter module name: ")
from module import database
</code></pre>
<p>This results in <code>ImportError: No module named module</code>. I checked that this is not due to the name being module. Other variable names have the same result.
The name of the variable database will always be the same. I have successfully imported this variable by importing from the name of the module, but I would like this code to handle cases where the module name is different, as I can then use more than one, and the user is not obliged to use the same module name every time. Is there a way to do this? All the other questions I have seen do not address this specific issue, and I have not found any information in Python's help module either.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>importlib.import_module</code></a> to import a given module using a string:</p>
<blockquote>
<p>Import a module. <strong>The name argument specifies what module to import</strong> in absolute or relative terms (e.g. either pkg.mod or ..mod). If the name is specified in relative terms, then the package argument must be set to the name of the package which is to act as the anchor for resolving the package name (e.g. import_module('..mod', 'pkg.subpkg') will import pkg.mod).</p>
</blockquote>
<p><sub> (emphasis mine) </sub></p>
<pre><code>&gt;&gt;&gt; from importlib import import_module
&gt;&gt;&gt; module_name = 're'
&gt;&gt;&gt; module = import_module(module_name)
&gt;&gt;&gt; module
&lt;module 're' from 'C:\\Users\\Christian\\AppData\\Local\\Programs\\Python\\Python36\\lib\\re.py'&gt;
&gt;&gt;&gt; 
</code></pre>
<p>Also, as a side recommendation, if you plan on getting command line arguments from the user, use a dedicated command line argument parsing library instead of using bare <code>sys.argv</code>. There are several good ones out there. In fact, Python has one in the standard library; <a href="https://docs.python.org/3.6/library/argparse.html" rel="nofollow noreferrer">argparse</a>.</p>
</div>
<span class="comment-copy">How will that allow me to specify the module name at runtime? I am not running this from within the shell.</span>
<span class="comment-copy">You don't have to run your code from the shell. Simply pass <code>sys.argv[1]</code> into <code>import_module</code>.</span>
<span class="comment-copy">Thanks. I now have module_name = argv[1]; module = import_module(module_name); from module import database; on separate lines of course. I printed argv[1], and it was correct, but I still have the import error, no module named module.</span>
<span class="comment-copy">@Dylan_Oscar You need to pass <b><i><code>sys.argv[1]</code> into <code>import_module</code></i>. Like so: <code>import_module(sys.argv[1])</code></b>. That should return the module with the name specified from the command line. If an <code>ImportError</code> is still raised, then make sure you've put your module in the same directory as your main script.</span>
<span class="comment-copy">@Dylan_Oscar Actually, you can just leave it as is. The question shows what you've tried. You don't have to update it with the correct solution. That's what my answer is for ;-)</span>
