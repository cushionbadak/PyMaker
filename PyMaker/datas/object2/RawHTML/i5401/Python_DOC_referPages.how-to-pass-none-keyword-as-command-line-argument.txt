<div class="post-text" itemprop="text">
<p>I am trying to pass <code>None</code> keyword as a command line parameter to a script as follows, if I explicity mention <code>Category=None</code> it works but the moment I switch to <code>sys.argv[1]</code> it fails, any pointers on how to fix this?</p>
<pre><code>category = None --&gt; works
#category=sys.argv[1] --&gt; doesn't work 
</code></pre>
<p>so I tried as below which still didn't work</p>
<pre><code>  if sys.argv[1].strip()==None:
    category = None
else:
    category=sys.argv[1].strip()
</code></pre>
<p>Command line passage:</p>
<pre><code> script.py None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>just an FYI. You can use <strong><a href="https://docs.python.org/2/library/ast.html" rel="nofollow noreferrer">ast module</a></strong> to convert sting 'None' to None type</p>
<p><strong>Ex:</strong></p>
<pre><code>import ast
if not ast.literal_eval(sys.argv[1]):
    print "Input Arg is None"
</code></pre>
<p>or</p>
<pre><code>if sys.argv[1].strip() == 'None':
     print "Input Arg is None"
</code></pre>
<p><em>Faster and better solution.</em> </p>
</div>
<div class="post-text" itemprop="text">
<p>As Stephen mentioned, <code>None</code> is not a string, so when comparing a <code>str</code> type to a <code>NoneType</code> type, the result will always be <code>False</code>.</p>
<p>If I just put <code>"</code> around <code>None</code> on the right-hand-side of the comparison, we get:</p>
<pre><code>import sys

if sys.argv[1].strip() == "None":
    category = None
else:
    category = sys.argv[1].strip()

print(category)
print(type(category))
</code></pre>
<p>Resulting in:</p>
<pre><code>~/temp $ python script.py 123
123
&lt;type 'str'&gt;
~/temp $ python script.py None
None
&lt;type 'NoneType'&gt;
</code></pre>
<h3><code>argparse</code> instead?</h3>
<p>However, I recommend using <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> instead, if you're in a position to do so. I use it all the time.</p>
<p>The above code could be replaced with:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description='Do some cool stuff.')

def none_or_str(value):
    if value == 'None':
        return None
    return value

parser.add_argument('category', type=none_or_str, nargs='?', default=None,
                    help='the category of the stuff')

args = parser.parse_args()

print(args.category)
print(type(args.category))
</code></pre>
<p>Which will also tolerate no parameters</p>
<pre><code>~/temp $ python script.py 
None
&lt;type 'NoneType'&gt;
~/temp $ python script.py 123
123
&lt;type 'str'&gt;
~/temp $ python script.py None
None
&lt;type 'NoneType'&gt;
</code></pre>
<p>And it auto-formats some help text for you!</p>
<pre><code>~/temp $ python script.py --help
usage: script.py [-h] [category]

Do some cool stuff.

positional arguments:
  category    the category of the stuff

optional arguments:
  -h, --help  show this help message and exit
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think more appropriate way to do this would be to check if there's any parameter passed or not. If not then set <code>category</code> to <code>None</code>, otherwise set the value that is passed.</p>
<p>Ex:</p>
<pre><code>if len(sys.argv) == 2: // or &gt;= 2 in case of more parameter
    category = sys.argv[1].strip()
else:
    category = None
</code></pre>
<p>So if you just call <code>script.py</code>, category will be set to <code>None</code>.<br/>
If you call like <code>script.py Value</code>, category will be set to <code>Value</code>.</p>
</div>
<span class="comment-copy"><code>sys.argv[1]</code> is a string.  <code>None</code> is not.  Try <code>if sys.argv[1].strip()=='None':</code></span>
