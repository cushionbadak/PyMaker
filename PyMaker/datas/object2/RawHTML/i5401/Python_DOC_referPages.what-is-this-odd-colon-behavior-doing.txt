<div class="post-text" itemprop="text">
<p>I am using Python 3.6.1, and I have come across something very strange. I had a simple dictionary assignment typo that took me a long time to find.</p>
<pre><code>context = {}
context["a"]: 2
print(context)
</code></pre>
<p>Output</p>
<pre><code>{}
</code></pre>
<p>What is the code <code>context["a"]: 2</code> doing? It doesn't raise a <code>SyntaxError</code> when it should IMO. At first I thought it was creating a slice. However, typing <code>repr(context["a"]: 2)</code> raises a <code>SyntaxError</code>. I also typed <code>context["a"]: 2</code> in the console and the console didn't print anything. I thought maybe it returned <code>None</code>, but I'm not so sure.</p>
<p>I've also thought it could be a single line if statement, but that shouldn't be the right syntax either.</p>
<p>Additionally, <code>context["a"]</code> should raise a <code>KeyError</code>.</p>
<p>I am perplexed. What is going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have accidentally written a syntactically correct <em>variable annotation</em>. That feature was introduced in Python 3.6 (see <a href="https://www.python.org/dev/peps/pep-0526/" rel="noreferrer">PEP 526</a>).</p>
<p>Although a variable annotation is parsed as part of an <a href="https://docs.python.org/3/reference/simple_stmts.html#annotated-assignment-statements" rel="noreferrer">annotated assignment</a>, the assignment statement is <em>optional</em>:</p>
<pre><code>annotated_assignment_stmt ::=  augtarget ":" expression ["=" expression]
</code></pre>
<p>Thus, in <code>context["a"]: 2</code></p>
<ul>
<li><code>context["a"]</code> is the annotation target</li>
<li><code>2</code> is the annotation itself</li>
<li><code>context["a"]</code> is left uninitialised</li>
</ul>
<p>The PEP states that <em>"the target of the annotation can be any valid single assignment target, at least syntactically (it is up to the type checker what to do with this)"</em>, which means that the key doesn't need to exist to be annotated (hence no <code>KeyError</code>). Here's an example from the original PEP:</p>
<pre><code>d = {}
d['a']: int = 0  # Annotates d['a'] with int.
d['b']: int      # Annotates d['b'] with int.
</code></pre>
<p>Normally, the annotation expression <em>should</em> evaluate to a Python type --
 after all the main use of annotations is type hinting, but it is not enforced. The annotation can be any <em>valid</em> Python expression, regardless of the type or value of the result.</p>
<p>As you can see, at this time type hints are very permissive and rarely useful, unless you have a static type checker such as <a href="http://mypy-lang.org/" rel="noreferrer">mypy</a>.</p>
</div>
<span class="comment-copy">Already this question has a <a href="https://stackoverflow.com/questions/48336724/name-error-not-defined-in-python">dupe</a> and it's pretty clear this is confusing for Python novices. I guess this is worst if Python is your only language, where type hinting and variable definition prior to initialisation in general might feel foreign. I imagine raising an error is impossible as this behaviour is deliberate and sometimes useful as explained in PEP 526, and you don't want to break compatibility. However, I wonder if the Python devs would consider adding a useful warning message for some cases.</span>
<span class="comment-copy">Shouldn't this require an <code>=</code> assignment operator then? The key doesn't exist. This just feels wrong to me.</span>
<span class="comment-copy">In this case, <code>:</code> <i>is</i> the assignment operator. We're just "assigning" a type annotation alone, not a key. I doubt there's any reason for allowing it, just an unintended side affect of adding the annotation syntax.</span>
<span class="comment-copy">@chepner It seems this is no side-effect imho. This is exactly what the corresponding PEP was designed to do.</span>
<span class="comment-copy">It's weird that it'll allow you to annotate a target that hasn't yet been defined though.  If my very first line is <code>x: str</code> and immediately followed by <code>type(x)</code>, the interpreter will raise a <code>NameError</code>.  IMO the syntax should enforce the object is pre-defined, or is defined on the spot.  This just introduces confusion.</span>
<span class="comment-copy">@Idlehands This defeats the purpose though. Having <code>x = 'i am a string'</code> prior to <code>x: str</code> makes the latter kind of redundant.. This shouldn't have been added at all. It was fine as comment; I never show it used one way or the other.</span>
