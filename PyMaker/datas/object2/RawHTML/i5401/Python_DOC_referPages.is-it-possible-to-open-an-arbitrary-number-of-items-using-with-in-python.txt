<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3024925/create-a-with-block-on-several-context-managers">Create a “with” block on several context managers? [duplicate]</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I've got a situation where I have several items I'd like to open using a <code>with</code> block. In my case, these are external hardware devices which require some clean-up when closed -- but that doesn't really matter for the point at hand.</p>
<p>Assuming a class something like:</p>
<pre><code>class Controller(object):

    def __init__(self, name):
        self._name = name

    def __enter__(self):
        # Do some work on entry
        print("Entering", self._name)
        return self

    def __exit__(self, type, value, traceback):
        # Clean up (restoring external state, turning off hardware, etc)
        print("Exiting", self._name)
        return False

    def work(self):
        print("Working on", self._name)
</code></pre>
<p>I would (given a fixed number of <code>Controller</code>s), do something like</p>
<pre><code>with Controller("thing1") as c1:
    with Controller("thing2") as c2:
        c1.do_work()
        c2.do_work()
</code></pre>
<p>However, I've run across a situation where I have a flexible number of things I need to manage in this manner. That is, I have a situation similar to:</p>
<pre><code>things = ["thing1", "thing2", "thing3"] # flexible in size
for thing in things:
    with Controller(thing) as c:
        c.do_work()
</code></pre>
<p>However, the above doesn't quite do what I need -- which is to have <code>Controllers</code> for all <code>thing</code>s in scope at one time.</p>
<p>I've built a toy example which works through recursion:</p>
<pre><code>def with_all(controllers, f, opened=None):
    if opened is None:
        opened = []

    if controllers:
        with controllers[0] as t:
            opened.append(t)
            controllers = controllers[1:]

            with_all(controllers, f, opened)
    else:
        f(opened)

def do_work_on_all(controllers):
    for c in controllers:
        c.work()

names = ["thing1", "thing2", "thing3"]
controllers = [Controller(n) for n in names]

with_all(controllers, do_work_on_all)
</code></pre>
<p>but I don't like the recursion or the abstraction of the actual function call. I'm interested in ideas for doing this in a more "pythonic" way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes there is a more pythonic way to do that, using the standard library contextlib, which has a class ExitStack which does excatly what you want:</p>
<pre><code>with ExitStack() as stack:
    controllers = [stack.enter_context(Controller(n)) for n in names]
</code></pre>
<p>This should do what you want.</p>
</div>
<span class="comment-copy">Take a look at the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer">ExitStack from contexlib</a></span>
<span class="comment-copy">Make it a full answer already @MegaIng</span>
<span class="comment-copy"><a href="https://stackoverflow.com/q/16083791/1394393">This</a> may be a better dupe target. Choose carefully, close voters.</span>
<span class="comment-copy">Perfect, thanks!</span>
