<div class="post-text" itemprop="text">
<p>Let's say I am having a list as:</p>
<pre><code>a = ['no', 'no', 'no', 'yes', 'no', 'yes', 'no']
</code></pre>
<p>Here I want to <strong>remove every <code>'no'</code> which is preceded by every <code>'yes'</code></strong>. So <strong>my resultant list should be like</strong>:</p>
<pre><code>['no', 'no', 'yes', 'yes', 'no']
</code></pre>
<hr/>
<p>I've found that in order to remove an element from a list by its value, we may use <code>list.remove(..)</code> as:</p>
<pre><code>a = ['no', 'no', 'no', 'yes', 'no', 'yes', 'no']
a.remove('no')
print a
</code></pre>
<p>But it gives me result with only removing first occurrence of <code>'no'</code> as:</p>
<pre><code>['no', 'no', 'yes', 'no', 'yes', 'no']
</code></pre>
<p><strong>How can I achieve the desired result by removing all the occurrence of <code>'no'</code> which are preceded by all <code>'yes'</code> in my list?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>a = ['no', 'no', 'no', 'yes', 'no', 'yes', 'no']
a = ' '.join(a)  
print(a.replace('no yes', 'yes').split(' '))
</code></pre>
<p>What it is doing is:
1. merging the list into a string with <code>' '.join()</code>
2. replacing all the occurrencies of 'no yes' with 'yes' by <code>a.replace()</code>
3. splitting it back into a list with <code>a.split(' ')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>For removing all the occurrence of <code>'no'</code> which are present just before the <code>'yes'</code> in your list, you may use <em>list comprehension</em> with <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><strong><code>itertools.zip_longest(...)</code></strong></a> in Python 3.x (which is equivalent of <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><strong><code>iterools.izip_longest(..)</code></strong></a> in Python 2.x) <em>(having default <code>fillvalue</code> as <code>None</code>)</em> to achieve this as :</p>
<pre><code>&gt;&gt;&gt; a = ['no', 'no', 'no', 'yes', 'no', 'yes', 'no']

# Python 3.x solution
&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; [x for x, y in zip_longest(a, a[1:]) if not(x=='no' and y=='yes')]
['no', 'no', 'yes', 'yes', 'no']

# Python 2.x solution
&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; [x for x, y in izip_longest(a, a[1:]) if not(x=='no' and y=='yes')]
['no', 'no', 'yes', 'yes', 'no']
</code></pre>
<hr/>
<p>You might be interested in taking a look at the <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><strong><code>zip_longest</code></strong> document</a> which says:</p>
<blockquote>
<p>Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with <code>fillvalue</code>. Iteration continues until the longest iterable is exhausted. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Iterate with the condition and append last item:</p>
<pre><code>[i for i, j in zip(a, a[1:]) if (i == 'yes' or j == 'no')] + a[-1:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An interestingly roundabout way, using <code>regex</code> with a <code>look-ahead</code>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = ' '.join(a)                          # convert it into string
&gt;&gt;&gt; out = re.sub('no (?=yes)', '', s)        # remove
&gt;&gt;&gt; out.split()                              # get back the list
=&gt; ['no', 'no', 'yes', 'yes', 'no']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this code ! </p>
<p>I've also attached the screenshot of the output!</p>
<pre><code>a = ['no', 'no', 'no', 'yes', 'no', 'yes', 'no']
for i in range (1,5):
  if a[i]=='yes':
    j=i-1
    a.pop(j)

print(a)
</code></pre>
<p><strong>The output:</strong> </p>
<p><a href="https://i.stack.imgur.com/ZAUL2.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ZAUL2.png"/></a></p>
</div>
<span class="comment-copy">I see 3 problems with this: 1) It only works with strings. 2) It breaks if any of the strings contains a space. 3) It breaks if an element ends with "no" (e.g. "anno") or starts with "yes" (e.g. "yesterday"). <b>That said</b>, it's still better than that regex answer up there.</span>
<span class="comment-copy">@MoinuddinQuadri I disagree. Could you provide a non-working example?</span>
<span class="comment-copy">sorry, my bad, you've my +1</span>
<span class="comment-copy">Obligatory disclaimer: This approach doesn't work if any of the elements contain a space.</span>
<span class="comment-copy">@Rawing : ofcourse. Its assuming that the list only contains elements with values <code>yes</code> and <code>no</code></span>
