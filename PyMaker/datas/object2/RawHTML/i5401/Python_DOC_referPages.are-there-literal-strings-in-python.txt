<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4703516/how-to-write-string-literals-in-python-without-having-to-escape-them">How to write string literals in python without having to escape them?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>In F# there is something called a <code>literal string</code> (not <code>string literal</code>), basically if a string literal is preceded by <code>@</code> then it is interpreted as-is, without any escapes.</p>
<p>For example if you want to write the path of a file in Windows(for an <code>os.walk</code> for example) you would do it like this:</p>
<p><code>"d:\\projects\\re\\p1\\v1\\pjName\\log\\"</code></p>
<p>Or you could do this(the F# way):</p>
<p><code>@"d:\projects\re\p1\v1\pjName\log\"</code></p>
<p>The second variant looks much more clear and pleasing to the eye. Is there something of the sort in python? The documentation doesn't seem to have anything regarding that.</p>
<p>I am working in Python 3.6.3.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are: <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals</a></p>
<p>You can use <code>r</code> prefix.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2.0/ref/strings.html" rel="nofollow noreferrer">https://docs.python.org/2.0/ref/strings.html</a></p>
<p>TL;DR use little r</p>
<pre><code>myString = r'\n'
</code></pre>
</div>
<span class="comment-copy">Have you tried raw or unicode strings like <code>path = r'"d:\projects\re\p1\v1\pjName\log\"</code></span>
<span class="comment-copy">@KunalMukherjee Note that a string literal cannot end with a single backslash, even if you use raw strings. One way to work around that is to use literal string concatenation, eg <code>path = r'd:\projects\re\p1\v1\pjName\log' '\\'</code></span>
<span class="comment-copy">Think you meant to do: <code>\n</code>.</span>
<span class="comment-copy">To show that it will escape, and not go down a line :)</span>
