<div class="post-text" itemprop="text">
<p>I have a question for <code>Counter</code> with python dictionary. I build dictionary using Counter (it helps me to build adjacency matrix)</p>
<pre><code>{48: {Note(note=48, duration=200): 4, Note(note=52, duration=200): 2}}
</code></pre>
<p>I use <code>namedtuple</code> for this example. The values stored 48 - fourfold
 52 - double?</p>
<p>Let do this with list in dict:</p>
<pre><code>{48: ['48','48','48','48','52','52']}
</code></pre>
<p>Now I will choose a random value from a given key (48). What is the probability for the list in the dictionary and for the dictionary with counter? It's better to do this with list in dictionary? Does it matter?</p>
<p>I wonder the extract of dic with counter give me <code>{48: {48,48,48,48}, {52,52}}</code> or Counter only store number of elements?</p>
<p>The real question is:
Which way I should use to get random value from key? Dict with list or Dict with counter? It's the same? </p>
<p>I woring on Markov Chain to generate music. I have set of notes and I build a dictionary. </p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on how you're randomly selecting the elements.  </p>
<p>If you're using <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>random.choice</code></a>, then you want to use the dict with list values. This is because when you iterate over a <code>Counter</code> you only iterate over the keys, so <code>random.choice(some_counter)</code> weights all keys of <code>some_counter</code> equally.</p>
<p>If you're using Python &gt;= 3.6, you can use the new <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> to select the keys using their values as weights</p>
<pre><code>from random import choices 
from collections import Counter

counts = Counter('Some input iterable')

print(choices(*zip(*counts.items())))
# This gives us a list containing one randomly selected key of counts
# ['e'] for example
# If you want more, you can specify a keyword argument k equal to the number of elements
#   you  want to select form the population (with replacement)
</code></pre>
<p><code>choices(*zip(*counts.items()))</code> is a shorter way of doing something like</p>
<pre><code>keys = []
values = []
for key, value in counts.items():
    keys.append(key)
    values.append(value)
print(choices(keys, values))
</code></pre>
</div>
<span class="comment-copy">I'm not sure I understand the question - the probability is the same in each example. What is the real question? Is it about constructing the dict, or about extracting a random entry from the value?</span>
<span class="comment-copy">I wonder how elements in dict with Counter are stored I updated my quesion.</span>
<span class="comment-copy"><code>random.choices</code> select the keys with all values in context of <code>Counter</code>?</span>
<span class="comment-copy">I mean sum of values eg. num of 42 eq 4 so weight od 42 is 4</span>
<span class="comment-copy">@lukassz Yes.  More precisely, <code>choices</code> can take two positional arguments <code>population</code> and <code>weights</code>, in that order. The element at <code>population[i]</code> has weight <code>weights[i]</code>. We're processing <code>counts.items()</code> so that each key value pair ends up at the same index in <code>population</code> and <code>weights</code>.</span>
<span class="comment-copy">As I se <code>weights</code> must sum to 1. How can I calculated <code>weights</code> for this collection <code>{48: ['48','48','48','48','52','52']}</code> (48,52)?</span>
<span class="comment-copy"><code>choices</code> uses relative weights, so they don't have to sum to one.</span>
