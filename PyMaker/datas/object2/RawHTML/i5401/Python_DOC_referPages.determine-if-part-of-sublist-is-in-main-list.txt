<div class="post-text" itemprop="text">
<p>I have the 2d list mainlist</p>
<pre><code>mainlist = [['John','Doe',True],['Mary','Jane',False],['James','Smith',False]]
slist1 = ['John', 'Doe']
slist2 = ['John', 'Smith']
slist3 = ['Doe', 'John']
slist4 = ['John', True]
</code></pre>
<p>How to determine if a sublist of a sublist exists in a list where if slist1 is tested against mainlist will return True while slist2 will return False</p>
<p>I am thinking of something like this (code from <a href="https://stackoverflow.com/questions/22673770/simplest-way-to-check-if-multiple-items-are-or-are-not-in-a-list" title="here">here</a>)</p>
<pre><code>for sublist in mainlist:
    if all(i in sublist for i in slist1):
        return True
        break
</code></pre>
<p>is there a more "pythonic" way to do this? thanks</p>
<p>edit:</p>
<ol>
<li>slist1 tested against mainlist would return True </li>
<li>slist2 would return False </li>
<li>slist3 would return False </li>
<li>slist4 would return False</li>
</ol>
<p>so basically, i am just testing if slist is in the first 2 index of mainlist[x]</p>
</div>
<div class="post-text" itemprop="text">
<p>Since OP did not respond, I am going to cover both cases.</p>
<p>If order does <strong>not</strong> matter; both <code>['John', 'Doe']</code> and <code>['Doe', 'John']</code> are <strong>assumed contained</strong> in <code>mainlist</code>:</p>
<pre><code>def list_intersection_no_order(a, b):
    b = set(b)
    if any(b.difference(sublist) == set() for sublist in a):
        return True
    return False


mainlist = [['John','Doe',True],['Mary','Jane',False],['James','Smith',False]]
slist1 = ['John', 'Doe']
slist2 = ['John', 'Smith']
slist3 = ['Doe', 'John']

print(list_intersection_no_order(mainlist, slist1))
# True
print(list_intersection_no_order(mainlist, slist2))
# False
print(list_intersection_no_order(mainlist, slist3))
# True
</code></pre>
<hr/>
<p>If order does matter; <code>['John', 'Doe']</code> is contained but <code>['Doe', 'John']</code> is not in <code>mainlist</code>:</p>
<pre><code>def list_intersection_with_order(a, b):
    if any(b == sublist[:2] for sublist in a):
        return True
    return False


mainlist = [['John','Doe',True],['Mary','Jane',False],['James','Smith',False]]
slist1 = ['John', 'Doe']
slist2 = ['John', 'Smith']
slist3 = ['Doe', 'John']

print(list_intersection_with_order(mainlist, slist1))
# True
print(list_intersection_with_order(mainlist, slist2))
# False
print(list_intersection_with_order(mainlist, slist3))
# False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If i did understand your question i think you can use <code>set()</code> and intersection between sets, like this example:</p>
<pre><code>def list_intersection(a, b):
   for sub in a:
       condition = set(sub) &amp; set(b)
       condition2 = len(set(b)) == len(condition)
       if condition and condition2:
           return True
   return False


mainlist = [['John','Doe',True],['Mary','Jane',False],['James','Smith',False]]
slist1 = ['John', 'Doe']
slist2 = ['John', 'Smith']

list_intersection(mainlist, slist1)
# True
list_intersection(mainlist, slist2)
# False
</code></pre>
<p>PS: This solution have many weaknesses ... And it doesn't cover all the cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems you want to check if sublists in each list in <code>mainlist</code> has <code>slist1</code> or <code>slist2</code>. In that case, you can do something simple like this:</p>
<pre><code>def sublist_intersection(lst, sub):
    sub_len = len(sub)

    for l in lst:
        for i in range(0, len(l), sub_len):
            if l[i:i+sub_len] == sub:
                return True

    return False
</code></pre>
<p>or a shorter solution with <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a>:</p>
<pre><code>def sublist_intersection(lst, sub):
    sub_len = len(sub)
    return any(l[i:i+sub_len] == sub for l in lst for i in range(0, len(l), sub_len))
</code></pre>
<p>Which works as follows:</p>
<pre><code>&gt;&gt;&gt; mainlist = [['John','Doe',True],['Mary','Jane',False],['James','Smith',False]]
&gt;&gt;&gt; slist1 = ['John', 'Doe']
&gt;&gt;&gt; slist2 = ['John', 'Smith']
&gt;&gt;&gt; slist3 = ['Doe', 'John']
&gt;&gt;&gt; sublist_intersection(mainlist, slist1)
True
&gt;&gt;&gt; sublist_intersection(mainlist, slist2)
False
&gt;&gt;&gt; sublist_intersection(mainlist, slist3)
False
</code></pre>
<p><strong>Note:</strong> This also assumes that you are checking contiguous sublists, where order does matter. </p>
</div>
<span class="comment-copy">do you want to test all items in mainlist lists or just the 2 first ones? in which case I'd do <code>if slist1 == sublist[:2]:</code> instead of <code>all</code></span>
<span class="comment-copy">"How to determine if a sublist of a sublist exists in a list where if slist1 is tested against mainlist will return True while slist2 will return False" This makes my head hurt. Can you please give a clearer definition of what you want?</span>
<span class="comment-copy">what about making all <code>set</code>s</span>
<span class="comment-copy">Do the boolean values in index 2 of each sublist of the mainlist <i>matter</i>?</span>
