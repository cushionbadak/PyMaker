<div class="post-text" itemprop="text">
<p>I started off today <a href="https://stackoverflow.com/questions/48367645/can-i-blackbox-compile-a-python-object">wondering whether it is possible to save a python object for use in a C program</a>, a proposition which, after many hours of reading looks naive. Here is a possible workaround:</p>
<p>1. Create a complex object dependent on many python libraries with data inside I need preserved.<br/>
 2. Pickle the complex object and place it where it will be accessible.<br/>
 3. Define compileme.py:</p>
<pre><code>import pickle
thing = pickle.load(open('thing.pkl', 'r'))# an object with a method query(),
                                           # which takes a numpy array as input
</code></pre>
<p>4. <code>cython --embed -o compileme.c compileme.py</code> to generate a .c version of the script.<br/>
5. Define main.c:</p>
<pre><code>#include &lt;stdio.h&gt;
#include//(A) something from compileme

int main(void) {
    input = //(B) query takes a numpy array in python. Define something palatable.
    double result = thing.query(input);
    printf("%d", result);
}
</code></pre>
<p>6. Compile main.c properly, with all the right linkages.</p>
<p>It is not clear to me this basic solution strategy is sound, and I have a number of concerns:</p>
<ol>
<li>The <code>thing</code> is of a class from a library not even mentioned here, so its <code>query()</code> method depends on that external python. How can I ensure the relevant parts are also being compiled and linked?</li>
<li>How should I include <code>compileme</code> in my <code>main.c</code> so the <code>thing</code> will be accessible there? (location (A) in the code)</li>
<li>How can I appropriately define an input to <code>thing</code>'s method here? Do I need to use one of the many types defined in <code>compileme.c</code>? (location (B) in the code)</li>
<li>How do I compile <code>main.c</code> with the proper linkages?</li>
<li>In doing all this, it appears I have to include references to the python header files from the <code>python-dev</code> package. Just to be clear, I am not actually including the interpreter by doing this, correct?</li>
</ol>
<p>Here are some resources I've found during my search that prove it is possible to compile a simple python script to an executable compiled C program: <a href="https://stackoverflow.com/questions/5105482/compile-main-python-program-using-cython">Compile main Python program using Cython</a>
<a href="http://masnun.rocks/2016/10/01/creating-an-executable-file-using-cython/" rel="nofollow noreferrer">http://masnun.rocks/2016/10/01/creating-an-executable-file-using-cython/</a></p>
<p>Here is some relevant cython documentation:
<a href="http://cython.readthedocs.io/en/latest/src/reference/compilation.html" rel="nofollow noreferrer">http://cython.readthedocs.io/en/latest/src/reference/compilation.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm afraid this answer just explains why I don't think what you want is realistic, rather than offering solutions. It's worth looking at the code that Cython generates for a slightly modified <code>compileme.pyx</code></p>
<pre><code>cdef public get_unpickled():
    import pickle
    return pickle.load(open('thing.pkl', 'r'))
</code></pre>
<p>This creates a function that you can happily call from C (the signature is generated in <code>compileme.h</code> and is <code>__PYX_EXTERN_C PyObject *get_unpickled(void);</code>). The generated '.c' file containing the implementation is quite long, but the relevant section looks like:</p>
<pre><code>__pyx_t_1 = __Pyx_Import(__pyx_n_s_pickle, 0, -1);
__pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pickle, __pyx_n_s_load);
__pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple_, NULL);
__pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
</code></pre>
<p>I've cut this down quite a bit for clarity (mostly removing reference counting and some checks) but you can see it uses the Python import mechanism to load the <code>pickle</code> module from the Python standard library, it does <code>getattr</code> to get the function <code>load</code>. It calls the Python builtin <code>open</code> and then it calls <code>pickle.load</code>. All of these operations need libpython.</p>
<p>Then we consider <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances" rel="nofollow noreferrer">what <code>pickle</code> does</a> - it basically gets the .py file your class came from, imports that, and creates a new instance of your class, then populates the instance dictionary with data from the file (possibly calling some special methods if present). Again, this is entirely dependent on the using Python.</p>
<p>Finally let's consider what you can do with the result of <code>get_unpickled</code>. You have a <code>PyObject*</code>, a fairly opaque C structure. Most of its information is probably stored in its internal Python dictionary, which you can access through the Python C API <code>PyObject_GetAttrString</code> and related functions. However this data is still stored as other <code>PyObject</code>s which you will need to access using the Python C API. (If it's a Cython class the data may be stored in more accessible C struct fields which require less use of libpython, but probably not none).</p>
<hr/>
<p>In summary, Cython is largely implemented using the Python C API, which requires access to the <code>libpython</code> library for anything but the absolute most trivial programs. Using Python standard library functions such as <code>pickle</code> requires the Python standard library is installed too. Therefore you can't really achieve this without needing to bundle Python with your C program. The examples that you linked fall in this category - they are C programs but they depend on Python being present.</p>
<hr/>
<p>A better solution might be to look at common serialization formats that both Python and C support, such as JSON, XML, or HDF5 to allow you to save the data in one language and retrieve it in the other with as little effort as possible.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/22589868/call-python-code-from-c-via-cython">Call python code from c via cython</a></span>
<span class="comment-copy">Generally saving objects externally in this manner is to persist the data; you generally can’t serialiaze out logic from the object.  You’d import the data into the other process and deserialiaze it back into the class/object with methods defined in that program.</span>
<span class="comment-copy">@EliKorvigo, Doesn't that Py_Initialize() stuff actually invoke a python runtime environment? I would like to avoid that because my embedded application will not have python.</span>
<span class="comment-copy">@Joe Yes, pickle is for saving from python and reading back to python, usually. The idea here is I would have something compiled which encapsulates the logic while the pickle encapsulates the object settings, and part of the logic is to read the settings at startup.</span>
<span class="comment-copy">You aren't going to be able to do this without linking to the Python interpreter.</span>
<span class="comment-copy">Even a definitive explanation of why not is useful so I can know to quit trying.</span>
<span class="comment-copy">How bulky is it to bundle python? <code>libpython</code> is not a full-fledged interpreter, so these compiled versions should still be lighter and faster, right? Just not as light and fast as actually reimplementing things in C.</span>
<span class="comment-copy">On my PC it's about 3MB (the Python executable is actually only about 10kb - almost all the detail is actually in <code>libpython</code>). You also need some (but probably not all) of the Python standard library. That's around 30MB in total (but you might be able to select the parts you need).</span>
<span class="comment-copy">I think you could use something like PyInstaller (or similar) to select only the libraries you use, but I've never used it myself so can't be of real help there</span>
