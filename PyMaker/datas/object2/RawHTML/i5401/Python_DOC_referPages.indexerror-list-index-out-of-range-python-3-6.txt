<div class="post-text" itemprop="text">
<p>I have the following code</p>
<pre><code>def retrieve_user(username):

    with open(users_file, 'r', encoding='utf-8') as f:

        items = []
        line_num = 0
        for line in f:
            line_num = line_num+1
            #print(items)
            if line_num &gt; 1:
                items = line.split(';')
                name = items[0]
                area = items[1]
                all_keywords = items[2].split('$')

                if name in user.keys():
                    user[name].append([area, all_keywords])
                else:
                    user[name] = [area, all_keywords]

        if username in user.keys():
            print(user[username])
        else:
            print('User ', username, ' could not be found')
            login_user()

    return False
</code></pre>
<p>and now i get the following error. does anybody knows why? I have stuck and i don't know what I am doing wrong.</p>
<pre><code>**area = items[1]
IndexError: list index out of range**
</code></pre>
<p>the file that i am trying to retrieve the data looks like this</p>
<pre><code>user;area;keywords

mike;Sports: Football;Arsenal

john;Technology: IBM;CPU
</code></pre>
<p>thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>You have empty lines in the file, if you split a empty line on <code>;</code> you do not have an index of 1 in the resulting <code>item</code>. Error tells you as much.</p>
<p>Your code is missing crucial codeparts (f.e. the user dict):</p>
<p>Try this:</p>
<pre><code>with open(users_file, 'r', encoding='utf-8') as f:
   txt = f.read()

# txt = """user;area;keywords
#
# mike;Sports: Football;Arsenal
# 
# john;Technology: IBM;CPU"""

# split each line on newlines, take only lines thats have non-whitespace in it. 
# split those line at ;
splitted = [x.split(";") for x in txt.splitlines() if x.strip() != ""]
print(splitted)
</code></pre>
<p>Output:</p>
<pre><code>[['user', 'area', 'keywords'], 
 ['mike', 'Sports: Football', 'Arsenal'], 
 ['john', 'Technology: IBM', 'CPU']]
</code></pre>
<p>Accessing the parsed lists by row:</p>
<pre><code>for name, area, words in splitted[1:]:  # skips the first row via list comprehension, 
                                        # and decompose each inner list into name,
                                        # area and words
    all_keywords = words.split("$")
    print(name, "    ", area , "    ", all_keywords)
</code></pre>
<p>Output:</p>
<pre><code>mike      Sports: Football      ['Arsenal']
john      Technology: IBM      ['CPU']
</code></pre>
<p>If you want to create keys into dictionarys, you can leverage <code>dict.setdefault(key,defaultvalue)</code>:</p>
<pre><code>if name in user.keys():
    user[name].append([area, all_keywords])
else:
    user[name] = [area, all_keywords]
</code></pre>
<p>is roughly equivalent to:</p>
<pre><code>user.setdefault(name,[]).extend([area, all_keywords])  
</code></pre>
<p>This creates the key with an empty list if it does not yet exists. The value is returned by <code>setdefault</code> and <code>extend(...)</code> adds to it your current data. If the key exists, setdefault simpley returns the value and also extends it. Win-Win: your list grows.</p>
<p>See <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#dict</a>   or    this answer: <a href="https://stackoverflow.com/a/3483652/7505395">https://stackoverflow.com/a/3483652/7505395</a></p>
</div>
<span class="comment-copy">now i get the results twice</span>
<span class="comment-copy">@newbie The code reads the complete file into <code>txt</code> (if you uncomment <code>with open(users_file, 'r', encoding='utf-8') as f:</code> and the next line).  <code>splittet</code> is a list, each non-empty line in your file is one list-entry and each entry is split at <code>;</code>   the <code>for name,area, words in splitted[1:]:</code>  skips the "headerrow" and gives you each lines <code>name</code>, <code>area</code> and <code>words</code>. Thats about what you do above, you can use those 3 on your user-dict and do what you need to do</span>
