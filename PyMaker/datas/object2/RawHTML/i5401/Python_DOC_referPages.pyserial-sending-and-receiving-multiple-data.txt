<div class="post-text" itemprop="text">
<p>I have a question about sending and receiving multiple data using the pySerial Python library. According to what I understand, serial port communication works with byte variables.</p>
<p>How do I send four different variables with method <code>write</code> and then with method <code>read</code> receive two different variables?</p>
<p>As an example:</p>
<pre><code>import serial
import time

sendSerial = serial.Serial ("COM4", 9600)
readoutSerial = serial.Serial ("COM4", 9600)
time.sleep (2)
sendSerial.write ("data1" + "data2" + "data3" + "data4")
while True:
    readoutSerial.read ("data5" + "data6")
</code></pre>
<p>What should I do to send the four variables with <code>write</code> differentiated by some character and then separate them for the respective use of each variable? (applying the same for the two variables received with <code>read</code>) Also, what can I do to send the variables as<code>float</code> and not generate conflict with the reading in <code>byte</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are transporting text, the easies way is to pick some character to separate individual strings, it can be \n(newline), comma or anything.  </p>
<pre><code>ser = serial.Serial ("COM4", 9600)
ser.write(b"some string\n")
ser.write(b"some other string\n")
</code></pre>
<p>Reading of text in python will be like this:</p>
<pre><code>s1 = ser.readline()
</code></pre>
<p>On arduino, you will read the string like this(primitive example):</p>
<pre><code>char buf[64];
int bufIdx = 0;
while(Serial.peek() != '\n') { // Continue till the end of line
  if(Serial.peek() != -1) { // If no char arrived in this loop, skip.
    buf[bufIdx] = Serial.read();
    bufIdx = (bufIdx + 1) % 64; // Wrap around, so it will not go crazy string too long
  }
}
buf[bufIdx] = '\0'; // End of string char
</code></pre>
<p>Or if you don't mind using strings on Arduino(you most likely don't), you might be better of using <a href="https://www.arduino.cc/en/Serial/ReadStringUntil" rel="nofollow noreferrer">readStringUntil</a> function:</p>
<pre><code>string str1 = Serial.readStringUntil('\n');
string str2 = Serial.readStringUntil('\n');
</code></pre>
<p>In python, you can even convert numerical values into text: </p>
<pre><code>textStr = str(1234)
</code></pre>
<p>On Arduino side, you can receive numbers as a string like this:</p>
<pre><code>int x = Serial.parseInt(); // Receives (string)"1234", returns (int)1234
float y = Serial.parseFloat(); // Receives (string)"1.24E13", returns (float)1.24E13
</code></pre>
<hr/>
<p>If you need to transport structured binary data, python has a module called <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a>, that is the recomended way to do it in python. On arduino side, you will most likely have to shuffle bytes manualy. For example, int16 would be received like this:</p>
<pre><code>while(Serial.available() &lt; 2); // Block, until at least 2 bytes are received
int int16;
int16 = Serial.read() | (Serial.read()&lt;&lt;8); // Little-endian, low byte first, high byte second
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <strong>mutex(Lock)</strong> in <strong>threading</strong> library for avoiding send/receive conflict, such as following code:</p>
<pre><code>import serial
import time
from threading import Lock

mutex = Lock() 

sendSerial = serial.Serial ("COM4", 9600)
readoutSerial = serial.Serial ("COM4", 9600)
time.sleep (2)

mutex.acquire()
try:
    sendSerial.write ("data1" + "data2" + "data3" + "data4")
except:
    pass
finally:
    self.mutex.release()

while True:
    with mutex:
        readoutSerial.read ("data5" + "data6")
</code></pre>
</div>
<span class="comment-copy">How is this related to <a href="https://stackoverflow.com/tags/tkinter/info"><code>tkinter</code></a>?</span>
<span class="comment-copy">Through <code>tkinter</code> I have a graphical interface where the values of the variables are entered and read</span>
<span class="comment-copy">For avoiding send and get conflict, you can use .mutex() in threading library</span>
<span class="comment-copy">I haven't tested your code but as a new user, it was pretty elaborate of you. Keep up the good work! +1</span>
