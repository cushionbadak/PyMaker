<div class="post-text" itemprop="text">
<p>My intention is to get a list completed with the values that are assigned to a variable in each class of superior nature in the simplest way possible.</p>
<pre><code>class First:
    list = []
    def get_final_list(self):
        return self.list

class Second(First):
    list = ['one']

class Third(Second):
    list = ['two']
</code></pre>
<p>Result: list = ['one','two']</p>
<p>This is an example of the final result but obviously the whole logic of the function to return this value is missing.</p>
</div>
<div class="post-text" itemprop="text">
<p>I did something similar recently where I wanted child classes to be able to define <em>additional</em> values within attributes of their parents. You can do this using <a href="https://docs.python.org/3/reference/datamodel.html#metaclasses" rel="nofollow noreferrer"><em>metaclasses</em></a>, which allow you to hook into class creation in the same way that classes let you hook into instance creation. </p>
<p>In your case, for example, you could do something like:</p>
<pre><code>class ListCombiner(type):
    def __new__(cls, name, bases, dct):
        l = []
        for base in bases:
            l = getattr(base, 'list', []) + []
        dct['list'] = l + dct.get('list', [])
        return type.__new__(cls, name, bases, dct)

class First(metaclass=ListCombiner):
    list = []
    def get_final_list(self):
        return self.list

class Second(First):
    list = ['one']

class Third(Second):
    list = ['two']
</code></pre>
<p>Now the result is:</p>
<pre><code>&gt;&gt;&gt; Third().list
['one', 'two']
</code></pre>
<p>For more information on metaclasses, see e.g. <a href="https://stackoverflow.com/q/100003/3001761">What are metaclasses in Python?</a></p>
<p>If you're really interested, you can see where I introduced it in <a href="https://github.com/textbook/flash_services/commit/3b9acf472bbc9e568af5bc95a2ad2555751ac22d" rel="nofollow noreferrer">this commit</a>; this shows how I was able to replace some awkward code with the metaclass. The fact that I was using sets made it slightly easier, as I didn't care about the order.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about using proper methods etc. instead of a mere field in the class?</p>
<pre><code>class First:
    def list(self):
        return []
    def get_final_list(self):
        return self.list

class Second(First):
    def list(self):
        return super().list() + ['one']

class Third(Second):
    def list(self):
        return super().list() +  ['two']
</code></pre>
<p>Then you can:</p>
<pre><code>Third().list() # returns ['one', 'two']
</code></pre>
</div>
<span class="comment-copy">For classes that deal with lists, using a name like <code>list</code> and shadowing the builtin isn't the best thing to do.</span>
<span class="comment-copy">What would trigger the addition of new element? In your code you are just overriding the variable each time.</span>
<span class="comment-copy">An interesting way, I must prove how it interferes with the operation of the rest of the class, but it perfectly fulfills what I was looking for.</span>
<span class="comment-copy">@paralosreg that's the only way it changes the behaviour. But if you have tests you can check for any regressions.</span>
<span class="comment-copy">I tested it on a Django project and it works correctly as long as the inheritance order is Third (OtherClass, Second). In case of being Third (Second, Otherclass) ignores the metaclass and the result is that of the local variable of the class. Is there a way to solve this so that it works in the second way?</span>
<span class="comment-copy">@paralosreg if you're doing this within a Django app you should include that in your <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>; Django is already using metaclasses that may require changes to the approach.</span>
<span class="comment-copy">Or a property, perhaps?</span>
<span class="comment-copy">I wanted to keep it simple.  I'm not sure if changes to the value are wished (as a property would suggest).  But of course, that would work as well.</span>
<span class="comment-copy">Yes, I have already done it with functions, but I prefer a more DRY way</span>
