<div class="post-text" itemprop="text">
<p>In your Document folder create a folder <code>temp</code>:</p>
<p><code>/My Documents/temp</code></p>
<p>Save these few lines as <code>worker.py</code> Python scripts:</p>
<pre><code>import time 
from datetime import datetime
for i in range(10):
    print '%s...working on iteration %s' % (datetime.now(), i)
    time.sleep(0.2) 
print '\nCompleted!\n'
</code></pre>
<p>Save the code below as <code>caller.py</code>:</p>
<pre><code>import subprocess
cmd = ['python', 'worker.py']
stdout = subprocess.check_output(cmd)
print stdout
</code></pre>
<p><strong>(Please note that both Python scripts were saved in to the same folder).</strong></p>
<p>Now using the OS X Terminal or Windows CMD window change the current directory to the folder you created:</p>
<p><code>cd /My Documents/temp</code></p>
<p>Now run:</p>
<p><code>python caller.py</code></p>
<p>The process takes 2 seconds to complete. When completed it prints out the entire progress log all at once:</p>
<pre><code>2018-01-20 07:52:14.399679...working on iteration 0
...
2018-01-20 07:52:16.216237...working on iteration 9
Completed!
</code></pre>
<p>Instead of getting the log printed (all at once after the process has been already completed), I would like the have a real-time progress update. I would like to get every printed line from the process at the same moment it occured.
So, when I run <code>python worker.py</code>command it will give me line by line update happening in a real time. How to achieve it?</p>
</div>
<div class="post-text" itemprop="text">
<p>To get a real-time feed from the subprocess you can use this code in the caller.py</p>
<pre><code>import time 
import subprocess

# Start worker process
p = subprocess.Popen(['python', '-u', 'worker.py'], stdout=subprocess.PIPE)

# Loop forever
while True:

    # Get new line value
    l = p.stdout.readline()

    # Stop looping if the child process has terminated
    if p.poll() is not None:
        break

    # Print the line
    print l
</code></pre>
<p>Note the <em>-u</em> in the subprocess.Popen, you need unbuffered stdout.
<a href="https://docs.python.org/3/using/cmdline.html#cmdoption-u" rel="nofollow noreferrer">https://docs.python.org/3/using/cmdline.html#cmdoption-u</a></p>
<p>With readline() you are reading a single line per time from the subprocess output. Be aware when the subprocess prints '\nCompleted!\n' you will read it in three loops.
<a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects</a></p>
<p>In the example, the loop will run until the subprocess will terminate.
<a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.poll" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#subprocess.Popen.poll</a></p>
</div>
<span class="comment-copy">Don't know to answer your question but consider using IPC instead to communicate: <a href="https://docs.python.org/3/library/ipc.html" rel="nofollow noreferrer">docs.python.org/3/library/ipc.html</a></span>
<span class="comment-copy">How can your solution work with the example posted in a question (two python scripts with the first being <code>worker.py</code> and the second being <code>caller.py</code>)? Where and how should your <code>follow()</code> function be used? Please clarify.</span>
<span class="comment-copy">@alphanumeric Updated the answer with the correct code</span>
