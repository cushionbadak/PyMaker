<div class="post-text" itemprop="text">
<p>I have a base class and two different subclasses (they are in 3 different modules).<br/>
In the base class I have test methods which I use for the subclasses.<br/>
I want that the test methods in the base class to use the defined variables from the subclass. But I cannot access to the variables from the subclass, when I run the test methods in subclass.<br/>
Can someone help me to resolve this problem?</p>
<p>P.S.: I cannot use a <code>__init__</code> constructor (cannot collect test class)!</p>
<pre class="lang-none prettyprint-override"><code>Error with __init__ contructor:   No tests found

============================== warnings summary =============================== src/test_icd_operation.py::TestICDFields   cannot collect test class
'TestICDFields' because it has a __init__ constructor

-- Docs: http://doc.pytest.org/en/latest/warnings.html
========================= 1 warnings in 16.80 seconds =========================

Process finished with exit code 0
</code></pre>
<p><strong>Code</strong>:</p>
<pre><code>class BaseClassExample:
  table_name = None

  def test_field_for_both_devices(self):
    firstname = get_field(table_name)



class SubClass1(BaseClassExample):
  table_name = 'Pacer'

  def test_field1():
    field1 = get_field(table_name)



class SubClass2(BaseClassExample):
  table_name = 'ICD'

  def test_field2(self):
    field2 = get_field(table_name)
</code></pre>
<p>So, when I run the tests in the class <code>SubClass1</code>, I want that variable <code>table_name</code> on the <code>BaseClassExample</code> to take the value <code>Pacer</code> from the variable in subclass <code>SubClass1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>self.table_name</code>:</p>
<pre class="lang-python prettyprint-override"><code>class BaseClassExample:
  table_name = None

  def test_field_for_both_devices(self):
    firstname = get_field(self.table_name)



class SubClass1(BaseClassExample):
  table_name = 'Pacer'

  def test_field1():
    field1 = get_field(self.table_name)



class SubClass2(BaseClassExample):
  table_name = 'ICD'

  def test_field2(self):
    field2 = get_field(self.table_name)
</code></pre>
<p>Explanation: Python has a few <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">namespaces</a> â€” global, local, class and instance. You cannot access <code>table_name</code> because Python looks it up in local and global namespaces and fails. You can access <code>self.table_name</code> because it's instance namespace which also has access to class namespace if the name is not shadowed in instance (in <code>self</code>).</p>
</div>
<span class="comment-copy">Could you add some of your code please ? Can you show the error message ?</span>
<span class="comment-copy">Base classes cannot use stuff defined in the sub classes.  Maybe you want to define the stuff in the base class and then just <i>override</i> it in the subclass?  Anyway, showing all of your code will definitely help in figuring this out.</span>
<span class="comment-copy">I added an example @GwendalGrelier</span>
<span class="comment-copy">Can you show the example please @alfe</span>
<span class="comment-copy">thank you very much @phd</span>
