<div class="post-text" itemprop="text">
<p>I am trying to create a Python distribution where I have to include both the source and the compiled binary. (Yes, I read arguments against/for adding <code>.pyc</code>, but my use case requires the <code>.pyc</code> to be added). Running my steps in Windows, both the source and compiled binaries are added in the output file (I used both <code>sdist</code> and <code>bdist_wheel</code>).</p>
<p>Say I have the following structure:</p>
<pre><code>root
+--folderA
   +--alpha
   +--beta
   +--__init__.py
+--folderB
</code></pre>
<p><code>folderA</code> contains source codes while <code>folderB</code> contains other files within its subdirectories.</p>
<p>Steps done:</p>
<ol>
<li>Modules are compiled using <code>compileall</code></li>
<li>Sources in <code>alpha</code> are removed. Sources in <code>beta</code> are kept.</li>
<li>Run <code>python setup.py sdist|bdist_wheel</code></li>
</ol>
<p>I used <code>find_packages()</code> in setup.py to detect the modules. Modules in <code>alpha</code> are not detected while those in <code>beta</code> are found.</p>
<p>In the results <code>.tgz</code> and <code>.whl</code> files in Windows, all the needed files are there. All is good.</p>
<p>However, when the same procedure is done in Linux (Ubuntu to be specific), only the modules in <code>beta</code> are added and some modules in <code>folderB</code> but <em>not other files of different type and the module <code>alpha</code></em>. <code>sdist</code> will give only the source while <code>bdist</code> and <code>bdist_wheel</code> will give the <code>.pyc</code>s only. I understand that <code>sdist</code> is for distributing source files while <code>bdist</code> is for binary files.</p>
<p>My question is <em>why is the behavior different in Windows</em> and is it possible to produce the same output in Linux (source and <code>.pyc</code> along with other files)?</p>
<p>I am using Python 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<p>To include files in sdist add them to <a href="https://docs.python.org/3.4/distutils/sourcedist.html#specifying-the-files-to-distribute" rel="nofollow noreferrer">MANIFEST.in</a>:</p>
<pre><code>global-include *.py *.pyc
</code></pre>
<p>Including <code>*.pyc</code> into wheels works for me on Linux without any special configuration, I just do</p>
<pre><code>python setup.py build
python -m compileall build
python setup.py sdist
python setup.py bdist_wheel
</code></pre>
<p>PS. If you're trying to hide sources from people — you're on the wrong track. <code>*.pyc</code> files can be decompiled. There is a <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer">disassembler</a> in standard library and there are many <a href="https://encrypted.google.com/search?hl=en&amp;pws=0&amp;q=Python+bytecode+decompiler" rel="nofollow noreferrer">decompilers and uncompilers</a> out there.</p>
</div>
<span class="comment-copy">Thanks, I'll give it a try. As for the hiding source, we do have our reasons but we do not think we will have to do this for long :).</span>
<span class="comment-copy">Sorry are the four commands, supposed to be FOUR different ways to generate the package?</span>
<span class="comment-copy">All right, I seem to get this one: <code>build</code>, <code>compile</code>, and <code>sdist|bdist_wheel</code> should be executed in sequence.</span>
<span class="comment-copy">Yep, exactly. PS. There are more ways to generate packages — <code>sdist</code> for source distribution, <code>bdist_egg</code> and <code>bdist_wheel</code> for "eggs" and "wheels", <code>bdist_deb</code> and <code>bdist_rpm</code>…</span>
<span class="comment-copy">How would I specifically exclude all *.py files and only distribute the *.pyc files? Is the MANIFEST.in taken into consideration for bdist_wheel, or just sdist?</span>
