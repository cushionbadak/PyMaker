<div class="post-text" itemprop="text">
<p>I have the latest version of Python installed. Will <code>from __future__ import...</code> statements have any effect at all? Is there any "future" beyond the most up-to-date version that I should know about - a "pre-release" or beta version not obvious to newcomers perhaps?</p>
<p>I ask because I'm working through <a href="https://www.tensorflow.org/get_started/get_started" rel="nofollow noreferrer">This introductory tutorial to TensorFlow</a> which tells me to execute <code>from __future__ import print_function</code>. I'm really not sure what this is trying to do, and whether it is doing it at all - there are no errors reported... but no apparent effect either.</p>
<p>I have experimented with executing the <code>from future...</code> statement as the first thing in the python session, or where it fell in the sequence of instructions given in the tutorial. It seems to make no difference... other than to send newcomers off on a wild goose chase! Have I missed anything?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 already has the <code>print</code> function, so the <code>from __future__ import print_function</code> will have no effect when you are already on Python 3.  As <a href="https://www.python.org/dev/peps/pep-0236/" rel="nofollow noreferrer">PEP 236</a> describes, future statements are handled at compile time not at runtime, so the module should be indistinguishable with or without the redundant future statement.  </p>
<p>The import does not cause any error if used even when unneeded.  This allows developers to write Python modules that are cross-compatible on Python 2 and Python 3.  </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#future" rel="nofollow noreferrer">From the documentation on <strong>Future Statements</strong>:</a></p>
<blockquote>
<p>The features recognized by Python 3.0 are absolute_import, division, generators, unicode_literals, print_function, nested_scopes and with_statement. They are all redundant because they are always enabled, and only kept for backwards compatibility.</p>
</blockquote>
<p>So if you are on Python 3, no.  It's not necessary.</p>
</div>
<span class="comment-copy">That documentation quote is a little bit misleading. There are a few features that have been added since Python 3.0, some of which are not yet redundant. For instance, <code>from __future__ import generator_stop</code> can be used to make it an error (<code>RuntimeError</code> gets raised) to let a <code>StopIteration</code> exception leak out of a generator function. That will become the standard behavior in Python 3.7 (which will be released pretty soon, its beta period is about to start). There's also <code>from __future__ import barry_as_FLUFL</code> from the April Fools joke PEP 401, which replaces <code>!=</code> with <code>&lt;&gt;</code>.</span>
