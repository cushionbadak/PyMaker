<div class="post-text" itemprop="text">
<p>For example, when i use matplotlib as plt, a possible statement is like below:</p>
<p>plt.plot(x,y,color='blue')</p>
<p>so how can i get what arguments like 'color' i can pass to the 'plot' function, and what is the proper values for that  argument?</p>
<p>Especially when i use some modules.</p>
<p>thanks for any answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm a little disappointed that this post is being downvoted because I think it's a very legitimate question. In particular, I appreciate that you asked not <em>what</em> the answer was but instead <em>how</em> you could find it for yourself in the future.</p>
<h2>Exploring Local Python Documentation</h2>
<p>Python has a very robust built-in documentation system as well as a very active and supportive community. At any point in time, you can use the <a href="https://docs.python.org/2/library/functions.html#help" rel="nofollow noreferrer"><code>help</code></a> function to examine a particular object that you want more information on - this will pull up the documentation for that object. In your example, you could do something like:</p>
<pre><code>help(plt.plot)
</code></pre>
<p>to pull up the documentation for the <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" rel="nofollow noreferrer"><code>matplotlib.pyplot.plot</code></a> function. Outside of a running Python process, you can use the <code>pydoc</code> command line tool to read and explore that same documentation. Something like:</p>
<pre><code>$ pydoc matplotlib.pyplot.plot
</code></pre>
<p>Running that in the shell will display the same documentation as the <code>help</code> command example.</p>
<h3>Writing Documentation</h3>
<p>As a good citizen of the Python ecosystem, you'll naturally want to document your <em>own</em> code. This is done pretty simply by adding a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a> to the top of a function, class, or module. Docstrings are denoted with a triple quotation mark <code>"""</code>, seen in the examples below:</p>
<pre><code>"""This module contains some example classes and functions"""

class MyClass(object):
    """MyClass does some things"""
    pass

def my_function(a):
    """Calculates the sum"""
    return(a)
</code></pre>
<p>There are <a href="https://stackoverflow.com/a/24385103/9190971">many different</a> documentation styles that people prefer, so what you choose is up to you. Though I would recommend the <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">official docstring standards outlined in PEP 257</a>.</p>
<h2>Finding Online Resources</h2>
<p>It's also often useful to take advantage of online documentation and resources. The <a href="https://docs.python.org/3/" rel="nofollow noreferrer">official Python documentation</a> includes all of the builtin documentation for the standard libraries as well as a tutorial for developers who are new to Python!</p>
<p>As it seems that you're relatively new to the ecosystem yourself, here's some more resources that you might find useful:</p>
<ul>
<li><a href="https://learnpythonthehardway.org/" rel="nofollow noreferrer">Learn Python the Hard Way</a></li>
<li>CodeAcademy has a <a href="https://www.codecademy.com/tracks/python" rel="nofollow noreferrer">Python track</a></li>
<li><a href="https://stackoverflow.com/questions/tagged/python">StackOverflow, obviously</a></li>
</ul>
</div>
<span class="comment-copy">Have you tried reading the documentation?</span>
<span class="comment-copy">Have you even tried searching Google? The very first for <code>matplotlib</code> hit is the documentation!</span>
<span class="comment-copy">Welcome to Stack Overflow, please review: <a href="https://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a></span>
<span class="comment-copy">Tahnks for your answering. I guess Python should provide some tools to list those information like help() and inspect module. But i don't know the precise usage. e.g. help(plt.xlabel) doesn't  give enough arguments details. what should i do to get those details other than reading documentation?</span>
<span class="comment-copy">Thank you very much. I tried help(plt.plot) and i do get useful help. But when i try 'help(plt.xlabel)', I didn't get enough arguments details(only 3 override arguments). How is this goingï¼Ÿ does it mean xlabel doesn't support other arguments? What should i do in this situation? I tried inspect module, too. only inspect.getmembers can give all arguments but with so many redundant message. I am new to python. Really thank you for answering such beginner's question so patiently.</span>
<span class="comment-copy">and I will learn very hard!</span>
