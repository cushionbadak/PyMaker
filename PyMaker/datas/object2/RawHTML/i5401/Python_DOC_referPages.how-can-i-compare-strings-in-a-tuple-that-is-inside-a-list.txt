<div class="post-text" itemprop="text">
<p>I have this list of tuples <code>[(amount, name)]</code>:</p>
<pre><code>[(214.05, 'Charlie'), (153.57, 'Ben'),(213.88, 'Charlie')]
</code></pre>
<p>I am trying to compare them by their names and if there is a tuple that has the same name, I want to add the amounts together.</p>
<p>The output would go into another list with the same structure <code>[(amount,name)]</code>.</p>
<p>I managed to extract the name part with this:</p>
<pre><code>for i in range(0, len(spendList)):
    print(spendList[i][1])
</code></pre>
<p>The output:</p>
<pre><code>Charlie
Ben
Charlie
</code></pre>
<p>How can I compare the names with each other?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to do these sorts of operations is to use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault()</code></a> like:</p>
<h3>Code:</h3>
<pre><code>data = [(214.05, 'Charlie'), (153.57, 'Ben'), (213.88, 'Charlie')]
summed = {}
for amount, name in data:
    summed.setdefault(name, []).append(amount)
summed = [(sum(amounts), name) for name, amounts in summed.items()]
print(summed)
</code></pre>
<h3>How does this work?</h3>
<ol>
<li><p>Start by defining a <code>dict object</code> to accumulate the amounts for each name.</p>
<pre><code>summed = {}
</code></pre></li>
<li><p>Step through every pair of amounts and names:</p>
<pre><code>for amount, name in data:
</code></pre></li>
<li><p>Using the <code>dict</code> property that things that hash the same will end up in the same slot in dict, and the <code>dict</code> method: <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>setdefault()</code></a> to make sure that the dict has an empty list available for every name we come across, create a list of amounts for each name:</p>
<pre><code>summed.setdefault(name, []).append(amount)
</code></pre>
<p>This creates a dict of lists like:</p>
<pre><code>{'Charlie': [214.05, 213.88], 'Ben': [153.57]}
</code></pre></li>
<li><p>Finally using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><code>comprehension</code></a> we can <code>sum()</code> up all of the items with the same name.</p>
<pre><code>summed = [(sum(amounts), name) for name, amounts in summed.items()]
</code></pre></li>
</ol>
<h3>Results:</h3>
<pre><code>[(427.93, 'Charlie'), (153.57, 'Ben')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>text = [(214.05, 'Charlie'), (153.57, 'Ben'),(213.88, 'Charlie')]
dictionary = {}
for val in text:
    amount, name = val
    if name in dictionary:
        dictionary[name] += amount
    else:
        dictionary[name] = amount
print(*dictionary.items(),sep="\n")
&gt;&gt;('Charlie', 427.93)
  ('Ben', 153.57)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First sort your list, then use <code>itertools.groupby</code> with a small lambda function:</p>
<pre><code>from itertools import groupby

lst = [(214.05, 'Charlie'), (153.57, 'Ben'),(213.88, 'Charlie')]
lst = sorted(lst, key=lambda x: x[1])

for k,v in groupby(lst, key = lambda x: x[1]):
    amount = sum(x[0] for x in v)
    print("Name: {}, Amount: {}".format(k, amount))
</code></pre>
<p>Which yields</p>
<pre><code>Name: Ben, Amount: 153.57
Name: Charlie, Amount: 427.93
</code></pre>
<p>Or, even shorter with a <strong><em>dict comprehension</em></strong>:</p>
<pre><code>summary = {name: amount 
            for name, v in groupby(lst, key = lambda x: x[1])
            for amount in [sum(x[0] for x in v)]}

print(summary)
# {'Charlie': 427.93, 'Ben': 153.57}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can group the amounts per name with a <a href="https://docs.python.org/3.6/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>, then sum the amounts at the end:</p>
<pre><code>from collections import defaultdict

data = [(214.05, 'Charlie'), (153.57, 'Ben'),(213.88, 'Charlie')]

d = defaultdict(list)
for amount, name in data:
    d[name].append(amount)

print([(_, sum(v)) for _, v in d.items()])
# [('Charlie', 427.93), ('Ben', 153.57)]
</code></pre>
</div>
<span class="comment-copy">Instead of printing the name, just access the second element (<code>spendList[i][2]</code>), add it to another external variable, remove the element <code>spendList[i]</code> and add a new element, with the external variable as its amount</span>
<span class="comment-copy">May i ask you to explain this <code>for amount, name in data:     summed.setdefault(name, []).append(amount) summed = {name: sum(amounts) for name, amounts in summed.items()}</code> for me in a simple way to understand. I am fairly new to python.  @Stephen Rauch</span>
<span class="comment-copy">Sure, I will expand.</span>
<span class="comment-copy">Thank you very much!</span>
<span class="comment-copy">May i ask what the <code>*</code> meant in <code>print(*dictionary.items(),sep="\n")</code></span>
<span class="comment-copy">@Charlieit unpacks the list values.ex: a = [1,2,3,4,5] print(*a,sep="\n") this example print all the values in new lines.</span>
