<div class="post-text" itemprop="text">
<p>I have three threads : <code>main</code>, <code>t1</code>, <code>t2</code>. <code>t1</code> and <code>t2</code> are spawned from <code>main</code>. There is a <code>while</code> loop in <code>t2</code> in which some processing is happening. <code>t2</code> consumes a bool variable set by <code>t1</code>. I want that the control to exit the while loop in <code>t2</code> as soon as <code>t1</code> sets the bool variable to <code>true</code>.</p>
<pre><code>class main()
    # Initialise thread object
    start t1
    start t2
    t1.join
    t2.join
</code></pre>
<p>t1:</p>
<pre><code>flag=False;
if (condition is true):
    flag = True
    q.put(flag)
else:
    q.put(flag)
    time.sleep(1)
</code></pre>
<p>t2:</p>
<pre><code>while (not q.get()):
    # Logic
    return
</code></pre>
<p>I am checking for <code>q.get()</code> in <code>t2</code> but that is not solving the problem as I want the control to skip the rest of the lines in the loop if lets say the value of 'flag' is set to true by <code>t1</code> somewhere when control in <code>t2</code> is  inside the while loop.</p>
<p>Is there a way to achieve this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/threading.html#event-objects" rel="nofollow noreferrer">Event Objects</a> from threading.<br/>
You'll need to set an event object in your main method and use it as argument:</p>
<pre><code>def main()
    # Initialise thread object
    flag = threading.Event()        
    start t1  # pass flag as arg
    start t2  # pass flag as arg
    t1.join
    t2.join
</code></pre>
<p>And your threading logic should be something like this</p>
<p>t1</p>
<pre><code>if (condition is true):
    flag.set()
</code></pre>
<p>t2</p>
<pre><code>while (not flag.is_set()):
    # Logic
    return
</code></pre>
<p>Here's another real, non-pseudo example</p>
<pre><code>import threading


def main():
    # Initialise thread object
    flag = threading.Event()
    for i in range(2):
        if i == 0:
            t1 = threading.Thread(target=t1_func, args=(flag,))
            t1.start()
        else:
            t2 = threading.Thread(target=t2_func, args=(flag,))
            t2.start()


def t1_func(flag):
    for i in range(100000000):
        if i == 100000000 - 1:
            flag.set()


def t2_func(flag):
    while not flag.is_set():
        print('not flag yet')
    print('GOT FLAG !')


if __name__ == '__main__':
    main()
</code></pre>
<blockquote>
<p>not flag yet<br/>
  not flag yet<br/>
  not flag yet<br/>
  GOT FLAG !<br/></p>
</blockquote>
<p>Hope that's helpful and clear.</p>
</div>
<span class="comment-copy">if t2 only reads the flag, and t1 only sets it you dont need the queue</span>
<span class="comment-copy">The only way I can think to achieve this is to check every other line within the while loop. And even that is fragile, because you could have a blocking call in <code>t2</code> that waits for something and in the meantime <code>t1</code> sets the flag. But the fact that you need this may be a sign that you haven't designed your threads well. Why do you need to do this?</span>
<span class="comment-copy">It seems to me like you need t1 to control t2, so maybe it should have a reference to t2 in t1. It also looks a scenario where you need some ind of interrupt mechanism and not poll. I don't know :-)</span>
<span class="comment-copy">@Netwave I don't believe that is correct. A <code>Condition</code> should be used instead of a <code>Queue</code>. <a href="https://docs.python.org/3/library/threading.html#threading.Condition" rel="nofollow noreferrer">docs.python.org/3/library/threading.html#threading.Condition</a> (if your statement was true that <code>Condition</code> wouldn't need to exist--I believe the write still isn't atomic so you could have a read in a partially written flag state)</span>
<span class="comment-copy">@BaileyParker, that is the correct way of doing it, ofc using just the flag is not atomic, so what you said is what should be done ;)</span>
<span class="comment-copy">That was really descriptive. Thanks. But this does not seem to solve the problem. Let's say there are 5 lines in while loop and the control was on 2 line inside while loop in t2 when the flag was set by t1. So I want that t2 should exit there and not continue with the rest of the three lines. With the soln you have suggested, the flag will be checked when the current iteration of loop will complete. I actually have function executions inside the while loop that cannot execute if the flag from t1 is set.</span>
<span class="comment-copy">@Arushigupta OK, so what's the stop condition on the while loop ? is it an infinite loop ? do your testing on <code>flag.is_set()</code> wherever you want (i.e before the 3 lines are executed), it was just an example for a shared condition between threads. And you should do which ever testing you want on the while loop as well, it's really up to you.</span>
<span class="comment-copy">Thanks. That solved the problem!</span>
