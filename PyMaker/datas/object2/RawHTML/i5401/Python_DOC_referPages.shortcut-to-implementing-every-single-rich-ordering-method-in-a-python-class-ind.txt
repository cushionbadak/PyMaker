<div class="post-text" itemprop="text">
<p>I have a Python class that I'd like to support <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer">rich ordering</a> by one of its attributes. I could of course simply implement all the magic ordering methods like <code>__lt__</code>, <code>__le__</code> etc. with that attribute as the key, but that seems a bit cumbersome and repetetive. Is there a way I can simply define that attribute as the ordering key once and have Python figure out the individual comparisons automatically?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python3.2 or later, you can use <a href="https://docs.python.org/3.6/library/functools.html#functools.total_ordering" rel="nofollow noreferrer">functools.total_ordering</a>.</p>
<blockquote>
<p>Given a class defining one or more rich comparison ordering methods,
  this class decorator supplies the rest. This simplifies the effort
  involved in specifying all of the possible rich comparison operations:</p>
<p>The class must define one of __ lt__(), __ le__(), __ gt__(), or
  __ ge__(). In addition, the class should supply an __ eq__() method.</p>
</blockquote>
</div>
<span class="comment-copy">Ah, I new that Python wouldn't let me down:) Thank you!</span>
