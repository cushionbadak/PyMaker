<div class="post-text" itemprop="text">
<p>I have a bunch of JSON data from honeypots that I need to rip information from. Right now, I just need to rip the destination_ip from the JSON data. The data is structured like this:</p>
<pre><code>{"_id":{"$oid":"5a300dc6eb0a197ba6fefe31"},"destination_ip":"IP_ADDRESS","protocol":"pcap","hpfeed_id":{"$oid":"5a300dc5eb0a197ba6fefe26"},"timestamp":{"$date":"2017-12-12T17:11:33.514Z"},"source_ip":"14.160.13.174","source_port":11208,"destination_port":22,"identifier":"ee8dc5d6-c5b5-11e7-9c0a-1e7dbf5015ae","honeypot":"p0f"}
{"_id":{"$oid":"5a300dc6eb0a197ba6fefe32"},"destination_ip":"IP_ADDRESS","protocol":"pcap","hpfeed_id":{"$oid":"5a300dc5eb0a197ba6fefe25"},"timestamp":{"$date":"2017-12-12T17:11:33.261Z"},"source_ip":"14.160.13.174","source_port":11208,"destination_port":22,"identifier":"ee8dc5d6-c5b5-11e7-9c0a-1e7dbf5015ae","honeypot":"p0f"}
{"_id":{"$oid":"5a300dc6eb0a197ba6fefe33"},"protocol":"ssh","hpfeed_id":{"$oid":"5a300dc4eb0a197ba6fefe24"},"timestamp":{"$date":"2017-12-12T17:11:32.079Z"},"source_ip":"103.89.89.225","session_ssh":{"version":"SSH-2.0-JSCH-0.1.54"},"source_port":57899,"destination_port":22,"identifier":"e3b688d6-c5b6-11e7-9c0a-1e7dbf5015ae","honeypot":"cowrie","auth_attempts":[{"login":"support","password":"support"},{"login":"support","password":""},{"login":"support","password":"support"}]}
</code></pre>
<p>The third JSON string has no destination_ip parameter which is giving me issues when I am running my loadJson function as it does not exist. There are many JSON strings that do not have this data, so I need to anticipate it. </p>
<p><strong>Error Code:</strong></p>
<pre><code>Error:
File "H:\Python\Json\test.py", line 40, in &lt;module&gt;
  loadJson()
File "H:\Python\Json\test.py", line 32, in loadJson
  dstIp = jsonData['destination_ip']

builtins.KeyError: 'destination_ip'
</code></pre>
<p>Is there a way I can anticipate an attribute being non-existent and flag it as such so that I can continue to add IP's to an array? I have attempted this in the usual ways (not in, not json.loads['destinaion_ip'], etc.) but I can't seem to find if there is a method built into the JSON python API that I can use. </p>
<p>Here is the (very Beta) function that is conducting the parsing:</p>
<pre><code>def loadJson():

    i = 0
    for line in open('data/7day_Dec_17_2017_Dump/session.json'):
        data[i] = line
        i+=1

    for j in range (0, len(data)):
        jsonData = json.loads(data[j])
        dstIp = jsonData['destination_ip']
        if (dstIp == BANGALORE):
            csvWriter.writerow([dstIp, 'Bangalore'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python have a very convenient function for dictionaries that allows you to have a default value if a key does not exist <code>get</code>. <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">Python docs</a> and <a href="https://www.tutorialspoint.com/python/dictionary_get.htm" rel="nofollow noreferrer">Tutorials Point Demo</a></p>
<pre><code>  jsonData.get('destination_ip', default=None)
</code></pre>
<p>This will return the value <code>None</code> if the key <code>destination_ip</code> does not exist. Your code will still work fine with this replacement because <code>None != BANGLORE</code>.</p>
</div>
<span class="comment-copy">Awesome, thank you very much!</span>
