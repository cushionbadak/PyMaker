<div class="post-text" itemprop="text">
<p>I have following code to select the values which are not contained in the another list.</p>
<pre><code>import re
isbn  = ["1111","2222","3333","4444","5555"]
sku = ["k1 1111", "k2 2222", "k3 3333", "k4 4444", "k5 5555", "k6 6666", "k7 7777", "k8 8888" ,"k9 1111"]

for x in isbn:
    for i in sku:
        if x not in i:
            print (i)
</code></pre>
<p>Expected outcome should be like this:</p>
<pre><code>k6 6666
k7 7777
k8 8888
</code></pre>
<p>But I get all unmatched values. How can I get the expected outcome as I showed above.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be using <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><strong><code>any</code></strong></a> within your loop. Infact you may achieve it using below <em>list comprehension</em> as:</p>
<pre><code>&gt;&gt;&gt; list_1  = ["1111","2222","3333","4444","5555"]
&gt;&gt;&gt; list_2 = ["k1 1111", "k2 2222", "k3 3333", "k4 4444", "k5 5555", "k6 6666", "k7 7777", "k8 8888" ,"k9 1111"]

&gt;&gt;&gt; [x for x in list_2 if not any( y in x for y in list_1)]
['k6 6666', 'k7 7777', 'k8 8888']
</code></pre>
<p>Here <code>any</code> will return <code>True</code> if any of string in <code>list_1</code> is present as substring in <code>list2</code>. As soon as it finds the match, it will short-circuit the iteration <em>(without checking for other matches)</em> and will return the result as <code>True</code>. </p>
<p>In case if you are not interested in using <code>any</code>, you may get the same result with the below <code>for</code> loop as:</p>
<pre><code>for x in list_2:
    for y in list_1:
        if y in x:
            break
    else:
        print(x)
</code></pre>
<p>which will print your desired output:</p>
<pre><code>k6 6666
k7 7777
k8 8888
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You would need to test <strong>all</strong> values in <code>isbn</code> before you can conclude none of those match.</p>
<p>Rather than loop over <code>isbn</code> first, loop over <code>sku</code> and test that value with each of the <code>isbn</code> values; the <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code> function</a> makes that easier and more efficient:</p>
<pre><code>for value in sku:
    if not any(i in value for i in isbn):
        print(value)
</code></pre>
<p>More efficient still would be to <em>split out</em> the ISBN portion, and test against a set:</p>
<pre><code>isbn_set = set(isbn)
for value in sku:
    isbn_part = value.partition(' ')[-1]  # everything after the first space
    if isbn_part not in isbn_set:
        print(value)
</code></pre>
<p>This avoids looping over <code>isbn</code> altogther; set membership testing takes O(1) constant time; for N skus and M ISBN values, this makes a O(N) loop (vs O(NM) loop with <code>any()</code>).</p>
<p>Either version can be converted to a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to produce a list of matches; the preferred set version then becomes:</p>
<pre><code>isbn_set = set(isbn)
not_matched = [value for value in sku if value.partition(' ')[-1] not in isbn_set]
</code></pre>
<p>Demo of the latter:</p>
<pre><code>&gt;&gt;&gt; isbn  = ["1111","2222","3333","4444","5555"]
&gt;&gt;&gt; sku = ["k1 1111", "k2 2222", "k3 3333", "k4 4444", "k5 5555", "k6 6666", "k7 7777", "k8 8888" ,"k9 1111"]
&gt;&gt;&gt; isbn_set = set(isbn)
&gt;&gt;&gt; [value for value in sku if value.partition(' ')[-1] not in isbn_set]
['k6 6666', 'k7 7777', 'k8 8888']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you remove matches from a set, then the left over set is what you are after:</p>
<h3>Code:</h3>
<pre><code>skus = set(sku)
for x in isbn:
    skus -= {i for i in skus if x in i}
</code></pre>
<h3>Test Code:</h3>
<pre><code>isbn = ["1111", "2222", "3333", "4444", "5555"]
sku = ["k1 1111", "k2 2222", "k3 3333", "k4 4444", "k5 5555", "k6 6666",
       "k7 7777", "k8 8888", "k9 1111"]

skus = set(sku)
for x in isbn:
    skus -= {i for i in skus if x in i}
print(skus)
</code></pre>
<h3>Results:</h3>
<pre><code>{'k6 6666', 'k7 7777', 'k8 8888'}
</code></pre>
</div>
<span class="comment-copy">At the bottom code which is without any(). Why that else is lined with for not lined with if.</span>
<span class="comment-copy">@LandOwner that <code>else</code> will be executed if your <code>for</code> loop completes the iteration without the execution of <code>break</code>. In case if your <code>if</code> condition returns <code>True</code>, <code>break</code> will stop the inner loop and in that case <code>else</code> won't be executed.</span>
<span class="comment-copy">That's not the most intuitive path, and still a O(NM) solution.</span>
<span class="comment-copy">Actually, this is worse than O(NM), as you loop over N skus for M isbn values, and the subtraction is another loop over up to N values, so O(N**2M), worse than what the OP had.</span>
