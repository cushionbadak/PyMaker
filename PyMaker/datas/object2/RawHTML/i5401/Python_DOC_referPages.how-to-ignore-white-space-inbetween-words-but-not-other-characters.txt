<div class="post-text" itemprop="text">
<p>I want to rename a long list of file names to make them more searchable. The names where auto generated so there is some odd spacing issues. I wrote a little python script that does what I want. But I don't want to remove white spaces between words. For instance I have two names: </p>
<pre><code>0 130 — HG — 1500 — 12"  (Page 1 of 2)  
01 30 — HD LOW POINT DRAIN  
</code></pre>
<p>They should read  :</p>
<pre><code>0130-HG-1500-12"  
0130-HD LOW POINT DRAIN  
</code></pre>
<p>My code so far  :</p>
<pre><code>import os
import re

for filename in os.listdir("."):
    if not filename.endswith(".py"):
        os.replace(filename, re.sub("[(].*?[)]", "",  # Remove anything between ()
                                    "".join(filename.split()  # Remove any whitespaces
                                            ).replace("—", "-")))  # Replace Em dash with hyphen  
</code></pre>
<p>Everything is working except I cant figure out how to not strip white spaces between words only.</p>
</div>
<div class="post-text" itemprop="text">
<p>If by "words" you mean "strings made up of letters" then</p>
<pre><code>re.sub('((?&lt;=[^a-zA-Z]) | (?=[^a-zA-Z]))', '', filename)
</code></pre>
<p>will do the trick. In plain language, that would be "replace every space that is either after or before a non-letter character with nothing". Output:</p>
<pre><code>In [24]: re.sub('((?&lt;=[^A-Z]) | (?=[^A-Z]))', '', '01 30 — HD LOW POINT DRAIN  ')
Out[24]: '0130—HD LOW POINT DRAIN'

In [25]: re.sub('((?&lt;=[^A-Z]) | (?=[^A-Z]))', '', '0 130 — HG — 1500 — 12"')
Out[25]: '0130—HG—1500—12"'
</code></pre>
</div>
<span class="comment-copy">Why on earth would one need regular expressions for so simple a task? You can simply scan the text and remove each space you encounter if the preceding and next characters are both either a letter or a digit. Changing em-dashes to hyphens is trivial, but you will need a little bit of state-tracking to remove parentheses.</span>
<span class="comment-copy">Why is regular expressions not the easier way of doing this? Isn't that exactly what the regular expression is doing?</span>
<span class="comment-copy">No, it is not. Instead of using the native constructs of your programming language, you use a string literal with a "regular expression", which is quite another langauge compiled under the hood into a <i>nondeterministic finite automaton</i> with a complicated and non-trivial implementation. Using this "heavy" mechanism for such a tiny task as yours is like killing a fly with a sledgehammer. Furthermore, your example seems to make three passes over each file name, whereas you could easily have written a lean single-pass algorithm!</span>
<span class="comment-copy">Can you give me an example of how I could have done a single-pass algorithm? This is lean as I can get it. With the use of Regex.</span>
<span class="comment-copy">I do not know Python and cannot post code inside comments. Will another language suffice?</span>
<span class="comment-copy">can you tell me the significance of '&lt;' in re</span>
<span class="comment-copy">In this context, as part of <code>(?&lt;= ... )</code>, it signifies a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">positive lookbehind assertion</a>.</span>
