<div class="post-text" itemprop="text">
<p>Let's say i'm not interested to relay on 3rd party modules.
Is it possible to wrap a standard python module into a coroutine in order to use with <code>asyncio</code>? </p>
<p>For example: </p>
<ul>
<li>wrapping <code>open()</code> into a coroutine to read/write files</li>
<li>Wrapping <code>urllib</code> into coroutines to make non blocking requests</li>
</ul>
<p>something like this:</p>
<pre><code>@asyncio.coroutine
def async_open(filename: str, mode: str) -&gt; str:
    with open(filename, mode) as fopen:
        for block in fopen:
            yield block
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually you can cast some sync code to async running it asynchronously using <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor" rel="nofollow noreferrer">run_in_executor</a>.</p>
<p>Note, that casting sync code to async this way means it wouldn't block event loop and other coroutines, but it doesn't always mean such code would run faster then original. For example, if you want to cast some CPU-bound python code to coroutine you'll get benefit only if you run it in multiple processes on multiple cores. But if you cast some network I/O related python code, using threads would be fine to achieve parallelization.</p>
<p><code>open()</code> to work with files already casted to coroutine <a href="https://stackoverflow.com/a/48343991/1113207">using</a> threads executor in <a href="https://github.com/Tinche/aiofiles" rel="nofollow noreferrer">aiofiles</a> module. You can look at module's source code and implement your own wrapper same way.</p>
<p>To see how to wrap <code>urllib</code> take a look at <a href="https://stackoverflow.com/a/22414756/1113207">this answer</a>. It shows casting sync <code>requests.get</code> to coroutine: everything would be same for <code>urllib</code>.</p>
</div>
