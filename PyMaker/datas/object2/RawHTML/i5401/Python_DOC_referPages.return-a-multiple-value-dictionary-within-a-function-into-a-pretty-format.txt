<div class="post-text" itemprop="text">
<p>So the first 2 steps I took to come to this point were as follows:</p>
<ol>
<li><p>I opened a textfile. The print-method provided me with this:</p>
<pre><code>["string1","a","b","c"] 
["string2","d","e","f"]
["string3","g","h","i"] 
["string4","j","k","l"]
</code></pre></li>
<li><p>I converted these lists into a dictionary. It looks like this now:</p>
<pre><code>dictionary = {"string1":["a","b","c"], "string2":["d","e","f"],
              "string3":["g","h","i"], "string4":["j","k","l"]}  
</code></pre></li>
</ol>
<p>My goal was to return this dictionary within a function, so that it looks like this when it's printed in a main function:</p>
<pre><code>{
"string1":["a","b","c"],
"string2":["d","e","f"],
"string3":["g","h","i"],
"string4":["j","k","l"]}
</code></pre>
<p>I tried applying a newline before each key but it only prints this:</p>
<pre><code>{"\nstring1":["a","b","c"], "\nstring2":["d","e","f"],"\nstring3":["g","h","i"], 
"\nstring4":["j","k","l"]}
</code></pre>
<p>This is my function (including the main function):</p>
<pre><code>import csv

def read_dictionary():
    with open("text.tsv") as tsvfile:
        tsvreader = csv.reader(tsvfile, delimiter = "\t")
        d = {}
        for line in tsvreader:
            first_row = line[0:1] 
            rest_rows = line[1:]
            for strings in first_row: #converting lists into strings
                d["\n"+strings] = rest_rows
        return d

if __name__=="__main__":
   print(read_dictionary())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries (like all built-in containers) are represented with their contents shown as representations, essentially using the <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>repr()</code> function</a> on each. For strings, those are meant to be as helpful as possible in that they are shown as <em>string literals</em> that can simply be copied and pasted to recreate their value. That means they also show unprintable characters or characters with special meaning as <em>escape sequences</em>. Your newline characters are just such characters.</p>
<p>In other words, you can't do what you want just by inserting <code>\n</code> characters in the string values.</p>
<p>Instead, you need to do your <em>own</em> formatting if you really want to show your dictionary that way. Just print out the keys and values yourself:</p>
<pre><code>def represent_dict(d):
    print('{', end='')  # no newline
    first = True
    for key, value in d.items():
        # newline at the start, not end, with commas
        print('{}\n{!r}: {!r}'.format('' if first else ',', key, value), end='')
        first = False
    print('}')  # closing with a brace and a newline
</code></pre>
<p>Remove the <code>\n</code> addition in your reading code; it can be simplified to just produce the dictionary directly with a dictionary comprehension:</p>
<pre><code>def read_dictionary():
    with open("text.tsv") as tsvfile:
        tsvreader = csv.reader(tsvfile, delimiter = "\t")
        return {row[0]: row[1:] for row in tsvreader}

represent_dict(read_dictionary())
</code></pre>
<p>You generally should keep <em>presentation</em> and <em>data structure</em> separate. Those newlines in the keys can easily cause issues elsewhere, and they are only there for the presentation output.</p>
<p>Demo of the output:</p>
<pre><code>&gt;&gt;&gt; dictionary = {"string1":["a","b","c"], "string2":["d","e","f"],
...               "string3":["g","h","i"], "string4":["j","k","l"]}
&gt;&gt;&gt; represent_dict(dictionary)
{
'string1': ['a', 'b', 'c'],
'string2': ['d', 'e', 'f'],
'string3': ['g', 'h', 'i'],
'string4': ['j', 'k', 'l']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While a very good answer is given, this would be an alternative method of printing the dictionary, by converting its key/item pairs to a list, same result, just less lines of code, this answer given as alternative:</p>
<pre><code>def print_mydict(my_dict):
    my_list = list(my_dict.items())
    print('{')
    for i in my_list[:-1]:
        print('"{}":{},'.format(i[0], i[1]))
    print('"{}":{}}}'.format(my_list[-1][0], my_list[-1][1]))
</code></pre>
<p>but the last line looks more complex and less "readable", output the same:</p>
<pre><code>{
"string1":['a', 'b', 'c'],
"string2":['d', 'e', 'f'],
"string3":['g', 'h', 'i'],
"string4":['j', 'k', 'l']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use template string or multiple print calls to achieve this.</p>
</div>
<span class="comment-copy">What are you <i>actually</i> trying to achieve? Do you know about <code>csv.DictReader</code> ? Are you sure that you don't want to work with <code>json</code> instead of <code>csv</code>?</span>
<span class="comment-copy">I wasn't taught anything about csv.DictReader unfortunately.. The task I need to submit also specifies the use of csv</span>
<span class="comment-copy">Thank you very much. Gonna try this now.</span>
<span class="comment-copy">That's also very awesome! Thank you for sharing!</span>
