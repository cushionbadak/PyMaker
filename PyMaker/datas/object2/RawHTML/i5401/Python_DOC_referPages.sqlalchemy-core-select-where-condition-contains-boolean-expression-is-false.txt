<div class="post-text" itemprop="text">
<p>How to use SQLAlchemy expression language to select columns with where condition to check boolean expression. example:</p>
<pre><code>select([table]).\
    where(and_(table.c.col1 == 'abc',
               table.c.is_num is False 
    ))
</code></pre>
<p>This doesn't give syntax error, but evaluates the condition wrong. I cannot use == False which gives error. <strong>SQLAlchemy Core</strong> v.1.0.8</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/reference/expressions.html#is" rel="nofollow noreferrer">identity comparison operator <code>is</code></a> cannot be overloaded in Python, so</p>
<pre><code>table.c.is_num is False
</code></pre>
<p>compares the identities of the <code>Column</code> object and <code>False</code>, and since they're clearly not the same object, evaluates to False. By</p>
<blockquote>
<p>I cannot use == False which gives error</p>
</blockquote>
<p>you probably mean that some Python linter adhering to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> gives you a warning. Checking equality against True or False is still valid Python, though <a href="https://www.python.org/dev/peps/pep-0008/#id51" rel="nofollow noreferrer">unpythonic</a> in the general sense – but it <a href="https://stackoverflow.com/questions/18998010/flake8-complains-on-boolean-comparison-in-filter-clause">does make sense in SQLAlchemy filters</a> and it is <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.and_" rel="nofollow noreferrer">used in the docs</a>. For example:</p>
<pre><code>In [5]: t.c.bar == False
Out[5]: &lt;sqlalchemy.sql.elements.BinaryExpression object at 0x7fdc355a1da0&gt;

In [6]: print(_)
foo.bar = false
</code></pre>
<p>But: instead of comparing a boolean to a boolean you could use the value itself:</p>
<pre><code>select([table]).\
    where(and_(table.c.col1 == 'abc',
               ~table.c.is_num
    ))
</code></pre>
<p>which would translate to (approximately):</p>
<pre><code>SELECT ... FROM table WHERE col1 = 'abc' AND NOT is_num
</code></pre>
<p>since SQLAlchemy <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.operators.ColumnOperators" rel="nofollow noreferrer"><code>ColumnOperators</code></a> overload the <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.operators.ColumnOperators.__invert__" rel="nofollow noreferrer"><code>__invert__</code></a> to <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.not_" rel="nofollow noreferrer"><code>not_()</code></a>. Some backends may not support a boolean type, but SQLAlchemy handles the conversion:</p>
<pre><code>In [6]: print((~t.c.bar).compile(dialect=sqlite.dialect()))
foo.bar = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="http://docs.sqlalchemy.org/en/rel_1_0/core/sqlelement.html?highlight=true#sqlalchemy.sql.expression.true" rel="nofollow noreferrer">the documentation</a>, the way you should handle this is by using the true() or false() constants that you can import from SqlAlchemy. It would look like this:</p>
<pre><code>from sqlalchemy import false

select([table]).\
    where(and_(table.c.col1 == 'abc',
               table.c.is_num == false() 
    ))
</code></pre>
<p>Hope this helps!</p>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/5602918/select-null-values-in-sqlalchemy" title="select null values in sqlalchemy">stackoverflow.com/questions/5602918/…</a></span>
<span class="comment-copy">Also somewhat related: <a href="https://stackoverflow.com/questions/42681231/sqlalchemy-boolean-value-of-this-clause-is-not-defined" title="sqlalchemy boolean value of this clause is not defined">stackoverflow.com/questions/42681231/…</a></span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/18998010/flake8-complains-on-boolean-comparison-in-filter-clause" title="flake8 complains on boolean comparison in filter clause">stackoverflow.com/questions/18998010/…</a></span>
<span class="comment-copy">It is imperative that you copy whatever error message you received into the question, and <i>verbatim</i>. Now we just need to guess whichever of the many possible errors you might have encountered.</span>
<span class="comment-copy">I am specifically talking of sqlalchemy Core 1.0.8, what you have answered is for orm</span>
<span class="comment-copy">Ah, sorry i missed that. It looks like instead of comparing to the boolean False, try comparing it to the True constant created by SqlAlchemy which you can read about here: <a href="http://docs.sqlalchemy.org/en/rel_1_0/core/sqlelement.html?highlight=true#sqlalchemy.sql.expression.true" rel="nofollow noreferrer">docs.sqlalchemy.org/en/rel_1_0/core/…</a> (I edited my answer to reflect this answer)</span>
<span class="comment-copy">can you set the expression in the above code and show how exactly it is incorporated?</span>
<span class="comment-copy">For sure. I used the false() method in the answer above (edited) check it out and try it to see if it works</span>
