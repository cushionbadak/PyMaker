<div class="post-text" itemprop="text">
<p>I'm quite new to using python, and im trying to read loads (100s) of CSV files into one dataframe.  However, the csv files are quite messy, using multiple delimeters and such. I tried searching this site but all the things i found do not work. I have tried readlines and pd.read with many options, but all i get is errors or empty dataframes. When i open the CSV in excel it looks fine, and when i save it as an UTF-8 csv, all works fine. However, doing this for each excel file is so much work, even when using a macro. Is there any way to replicate this process using python code,in2csv for example? Below i have provided a part of the csv file i need to work with, and part of the csv that comes out of excel(that works). To me it looks like the main difference is the whitespace and comma delimiter, but changing this in pd.read does not help. many thanks in advance!</p>
<p>Messy csv: </p>
<pre><code>"Device name:UU-WGB-JV_1  Device type:SUN2000  Device address:IP Address=62.72.193.88   Device No.=2  Date:2018-01-23 08:51:23  "   
"Generated On"  "Device Status" "Energy Yield of Current Day (kWh)" "Inv. efficiency"(%)    "Total Energy Yield (kWh)"  "Input Power (kW)"  "Active Power (kW)" "Reactive Power (kVar)" "Power Factor"  "Grid Frequency (Hz)"   "Grid A Current (A)"    "Grid B Current (A)"    "Grid C Current (A)"    "Grid A Phase Voltage (V)"  "Grid B Phase Voltage (V)"  "Grid C Phase Voltage (V)"  "PV1 Input Current (A)" "PV2 Input Current (A)" "PV3 Input Current (A)" "PV4 Input Current (A)" "PV5 Input Current (A)" "PV6 Input Current (A)" "PV1 Input Voltage (V)" "PV2 Input Voltage (V)" "PV3 Input Voltage (V)" "PV4 Input Voltage (V)" "PV5 Input Voltage (V)" "PV6 Input Voltage (V)" "Cabinet Temperature (℃)"   
"2017-12-22 00:00:00    "   "Idle: No irradiation"  "0.00"  "0.00"  "45803.34"  "0.000" "0.000" "0.000" "0.000" "0.00"  "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"
"2017-12-22 00:15:00    "   "Idle: No irradiation"  "0.00"  "0.00"  "45803.34"  "0.000" "0.000" "0.000" "0.000" "0.00"  "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"   "0.0"
</code></pre>
<p>Good CSV:</p>
<pre><code>Device name:UU-CB_1  Device type:SUN2000  Device address:IP Address=62.140.137.136   Device No.=1  Date:2018-01-22 13:31:51  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated On,Device Status,Energy Yield of Current Day (kWh),Inv. efficiency(%),Total Energy Yield (kWh),Input Power (kW),Active Power (kW),Reactive Power (kVar),Power Factor,Grid Frequency (Hz),Grid A Current (A),Grid B Current (A),Grid C Current (A),Grid A Phase Voltage (V),Grid B Phase Voltage (V),Grid C Phase Voltage (V),PV1 Input Current (A),PV2 Input Current (A),PV3 Input Current (A),PV4 Input Current (A),PV5 Input Current (A),PV6 Input Current (A),PV1 Input Voltage (V),PV2 Input Voltage (V),PV3 Input Voltage (V),PV4 Input Voltage (V),PV5 Input Voltage (V),PV6 Input Voltage (V),Cabinet Temperature (℃)
"2017-11-01 00:00:00    ",Idle: No irradiation,0,-,36670.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Seems that the first (title) line is unsalvageable because it contains spaces &amp; unquoted fields. Could be fixed by a specific regex. I'll skip it instead.</p>
<p>The rest of the lines is not csv, but contains quoted tokens separated by spaces, a breeze for <code>shlex.split</code>:</p>
<pre><code>import shlex,csv

with open("input.csv") as f:
   title = next(f)   # discard title line

   with open("output.csv","w",newline="",encoding="utf-8") as fw:
      cw = csv.writer(fw,delimiter=";")  # may be changed to ","
      cw.writerows(shlex.split(l) for l in f)
</code></pre>
<p>output:</p>
<pre><code>Generated On;Device Status;Energy Yield of Current Day (kWh);Inv. efficiency(%);Total Energy Yield (kWh);Input Power (kW);Active Power (kW);Reactive Power (kVar);Power Factor;Grid Frequency (Hz);Grid A Current (A);Grid B Current (A);Grid C Current (A);Grid A Phase Voltage (V);Grid B Phase Voltage (V);Grid C Phase Voltage (V);PV1 Input Current (A);PV2 Input Current (A);PV3 Input Current (A);PV4 Input Current (A);PV5 Input Current (A);PV6 Input Current (A);PV1 Input Voltage (V);PV2 Input Voltage (V);PV3 Input Voltage (V);PV4 Input Voltage (V);PV5 Input Voltage (V);PV6 Input Voltage (V);Cabinet Temperature (℃)
2017-12-22 00:00:00    ;Idle: No irradiation;0.00;0.00;45803.34;0.000;0.000;0.000;0.000;0.00;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0
2017-12-22 00:15:00    ;Idle: No irradiation;0.00;0.00;45803.34;0.000;0.000;0.000;0.000;0.00;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0
</code></pre>
<p>the file now opens properly in excel (note that various versions of excel require comma or semicolon separator by default)</p>
<p><a href="https://i.stack.imgur.com/3lt9I.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/3lt9I.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a more intuitive way to process large csv files for beginners. This allows you to process groups of rows, or chunks, at a time. </p>
<pre><code>import pandas as pd
chunksize = 10 ** 8
for chunk in pd.read_csv(filename, chunksize=chunksize):
    process(chunk)
</code></pre>
<p>You may want to check here, <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">http://pandas.pydata.org/</a></p>
<p>Pandas is a high performance data analysis library for big data.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just read the csv files as strings and then use regular expressions to handle splits. Typically the field delimiters are commas, semicolons or tabs, while a line ends with \n, so reading could look like this:</p>
<pre><code>import re

data = []
with open("yourfile.csv", "r") as csvfile:
    for line in csvfile:
        data.append(re.split("[\,\;\t\n]", line)[:-1])
</code></pre>
<p>Now data is a list of lists containing your data that should be easy to convert to a dataframe or anything else really. I included \n in the split , because in my test the line endings were still part of the lines. This is just an example, no doubt you will want to make a function from this and adapt it to your use case.</p>
</div>
<div class="post-text" itemprop="text">
<p>So this turned out to be mainly an encoding issue. I used a .exe called cpconverter to change the encoding from unicode (1200) to utf-8. Now pd.read works when i pass sep='\t'. It would be even better if i can change this encoding using a python script (or use the original encoding), but for now it works. Thanks for all the effort and help!</p>
<p>Edit: passing encoding = 'utf-16' to pd.read_csv fixes everything now. Don't knwo how i missed it, but the original encoding is utf-16 apparently.</p>
</div>
<span class="comment-copy">The first is a fixed length file, not a CSV. Excel can to a pretty good job of guessing the format but will fail eg if you work eg in a European country that uses <code>,</code> as the decimal separator and <code>;</code> as the list separator.</span>
<span class="comment-copy">As for messy CSVs and multiple delimiters, yes. That's exactly what data engineering &amp; data science is about - 80% is cleaning the data. Even the "good" CSV has messy dates for example. And what's that <code>-</code> in the <code>Inv. efficiency(%)</code> field? Or the many <code>,,,</code> entries in the <i>header</i>? Looks like someone tried to treat the header as a column row. You'll have to specify the appropriate format for each file (flat, delimited, etc), skipping headers where appropriate.</span>
<span class="comment-copy">To avoid specifying multiple formats, one trick is to transform as many files as possible to a common format. For example, in the fixed-length files you could convert all instances of <code>"   "</code> to <code>","</code> or a rarely used character like ¤. You'd have to test this extensively though and keep backup copies in case of errors. For example, the flat file header seems to have a <i>different</i> number of spaces.</span>
<span class="comment-copy">the - means that there is no value. I'm mainly interested in the Energy Yield of Current Day coumn so this is no problem. When i used pd.read_csv(file, header = 1, index_col = 'Generated On',parse_dates = True) on this file, it's very workable for me. So i have to convert the fixed length (or width) to a csv file? it is automaticly saved as .csv.</span>
<span class="comment-copy">The first file is a fixed-length file. It's actually easier and safer to read. The second file is no better - check that <code>-</code> stored in the percentage column</span>
<span class="comment-copy">I trust your expertise. Just providing a simple way to parse that using standard python libs.</span>
<span class="comment-copy">trying this now. I have used one of my 'messy' CSV files as input.csv, but how do i view the output?</span>
<span class="comment-copy">Nevermind my last question, but when i try to open the output in a dataframe i a frame filled with NaN. Also, the shape of this frame makes no sense.</span>
<span class="comment-copy">I just provided a way to get the csv at the proper format. as csv it opens properly (except for the date which would need some rework because excel detects it wrongly)</span>
<span class="comment-copy">This gives me something weird, maybe it has to do with encoding. This is an example of what i get: [['ÿþ"\x00D\x00e\x00v\x00i\x00c\x00e\x00 \x00n\x00a\x00m\x00e\x00:\x00U\x00U\x00-\x00C\x00B\x00_\x002\x00 \x00 \x00D\x00e\x00v\x00i\x00c\x00e\x00 \x00t\x00y\x00p\x00e\x00:\x00S\x00U\x00N\x002\ And so on</span>
<span class="comment-copy">Yes, this is certainly an encoding issue. I thought your problem was more the occurrence of different delimiters across files. The default encoding used by open() is platform dependent (more information <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">here</a>), but can be specified via a keyword. Does it work if you add <code>encoding="utf-8"</code>?</span>
<span class="comment-copy">Apparently it is utf-16 encoded. pd.read_csv now works. Thanks!</span>
