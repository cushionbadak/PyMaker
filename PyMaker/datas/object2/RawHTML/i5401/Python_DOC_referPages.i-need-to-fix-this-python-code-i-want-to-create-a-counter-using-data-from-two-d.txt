<div class="post-text" itemprop="text">
<p>I started to study class object with python (never done before)</p>
<p>the program should get from a list (harvest list) the info that the class apple need to count the grams of apple if the quality is high then they go on the good barrel if it's not then on the bad barrel, I want to implement a counter that counts how many barrels I have used </p>
<p>the code that is in bold and italic should count how many barrels are used
totApple should be the total grams of all the apples and countBarrel should use totApple to check if it is &gt;=100 gr, if so then a new barrel should be counted and used but these codes are not either in relationship with the rest of the code</p>
<p>If you run the code without the "italic bold part" should work, This is the output: "<code>Harvested 2 high-quality apples with a total weight of 230 g Harvested 2 cider apples with a total weight of 219 g</code>"</p>
<p>what I am looking for, it's to get an output that says how many barrels is used, like if it is filled up then a new barrel should be used</p>
<p>I have been googling this topic (class and object) but any good resource (except python API) what I'm looking for is something more practical</p>
<pre><code> class Apple:
    def __init__(self,weight,quality):
        self.weight=weight
        self.quality=quality
        self.totApple=0

    def pickApple(self,goodBarrel,badBarrel):
        if self.quality=="High":
            goodBarrel.addApple(self.weight)
        else:
            badBarrel.addApple(self.weight)

*** def totApple(self,barreln):
        for Apple.weight in list:
            self.totApple = barreln.addApple(self.weight)***



class Barrel:
    def __init__(self):
        #empty barrel
        self.weight=0
        #number of apples in the barrel
        self.count=0
        #number of barrel used
        self.barreln=0
    def addApple(self,weight):
        self.count+=1
        self.weight+=weight

 ***def countBarrel(self,barreln):
        x=Apple() #I know thi is an erro but I don't know get the 
                  #totApple from Apple class

        if x.totApple(barreln) &gt;=100:
           self.barreln+=1***

def harvestApples():
    barrel1=Barrel()
    barrel2=Barrel()
    harvest = [Apple(98,"High"),Apple(120,"Low"),Apple(132,"High"),Apple(99,"Medium")]
    for fruit in harvest:
        fruit.pickApple(barrel1, barrel2)
    print("Harvested ", barrel1.count, " high quality apples with a total weight of ", barrel1.weight, "g")
    print("Harvested ", barrel2.count, " cider apples with a total weight of ", barrel2.weight, "g")



    harvestApples()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use your <code>Barrel</code> class to store the "finished barrels" - the Storeroom idea of @Coled would be a better fit class-wise, but it demonstrates how it works:</p>
<p>I modified your self.<code>barreln</code> to <code>barrels</code> - and added the "see if it fits into current barrel, if not make a new one" - logic into your <code>addApple(...)</code> function. </p>
<p>You would have to adapt this a bit to fit yours fully:</p>
<pre><code>class Barrel: 
    def __init__(self):
        #empty barrel
        self.weight=0.0  # 0.0 to store floats
        #number of apples in the barrel
        self.count=0
        #number of barrel used
        self.barrels=[]


    def addApple(self,weight):
        """Add apple to barrel if it fits into it. Max weight per barrel is 100kg.

        If it does not fit, remember weight and count in internal list and make a
        new, empty barrel and put apple inside that."""
        if self.weight + weight &lt; 100:    # ok
            self.count+=1
            self.weight+=weight
        else:                             # need new one
            self.barrels.append( [float(self.weight),int(self.count)]) # stash old
            self.count = 1          # new one
            self.weight = weight    # new one


    def printAllBarrels(self):
        """Prints all barrels including the actual not full one. Also prints total.

        Return new list of all barrels including the half full one."""
        for n in self.barrels:   # filled barrels
            print("Barrel weights: " + str(n[0]) + " with " + str(n[1]) 
                  + " Appels in it.")
        # current barrel
        print("Barrel weights: " + str(self.weight) + " with " + str(self.count) 
              + " Appels in it.")
        # summary of all barrels
        print("Total of " + str(len(self.barrels) + 1)) + " barrels of " 
              + str(sum(x[0] for x in self.barrels)+self.weight) + "kg apples")

        # return list of all barrels
        return list(self.barrels[:]+[self.weight,self.count])
</code></pre>
<hr/>
<pre><code>import random
import itertools

# create appels of weight 80-150g in 3er steps, 2000 apples total with redraw
apples = [x/1000.0 for x in random.choices( (range(80,150,3)),k=2000)]

b = Barrel()
for n in apples:
    b.addApple(n)

b.printAllBarrels()
</code></pre>
<p>Output:</p>
<pre><code># float calculation magic at its best ;) use decimal to avoid that or calculate gramms
# see     https://docs.python.org/3/tutorial/floatingpoint.html#representation-error

Barrel weights: 99.99999999999974 with 872 Appels in it.
Barrel weights: 99.97799999999971 with 876 Appels in it.
Barrel weights: 28.946999999999967 with 252 Appels in it.
Total of 4 barrels of 228.92499999999941kg apples 
</code></pre>
<p>If you wanted to go for a Storeroom-Class, easiest would be to inject it into your barrel - class and each time you need a new barrel you call a <code>self.storeroom.addBarrel(float(self.weight),int(self.count))</code> - your storeroom would then hold that list of weigts/counts and the print function. You just have to make sure to "finalize" the last, not yet full barrel into your storeroom before printing.</p>
</div>
<span class="comment-copy">You also asked this less than an hour ago, surely. My comment is the same : <code>for Apple.weight in list:</code>, <i>what is <code>list</code></i>?</span>
<span class="comment-copy">PLease fix the indentation of your last <code>for</code> loop and the lines below it. they are indented 1 too many</span>
<span class="comment-copy">@roganjosh list I meant the list inside the def harvestApples():</span>
<span class="comment-copy">Create another class <code>Storeroom</code> where you can put barrels that are full.  After you add an apple to a barrel, if it is full put it in the the Storeroom and create a new barrel to put the apples in.</span>
<span class="comment-copy">@wwii how? because I am no very into class and object mechanism</span>
