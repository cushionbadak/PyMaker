<div class="post-text" itemprop="text">
<p><strong>Context</strong></p>
<p>I have a list of numbers in an array, I want to append a letter to the value in the array depending on the number.</p>
<p><strong>Code</strong></p>
<pre><code>numbers = [] 
numbers.append(9,8,7,6,5,4,3,2,1)
</code></pre>
<p><strong>Psuedo-Code</strong></p>
<p>I've tried something like this but got stuck it failed and just assigned [A-Z] to each letter</p>
<pre><code>for x in numbers:
   x.join('[A-Z]')
</code></pre>
<p>I want to add A to 9, B to 8, etc... </p>
<p>How do I do this dynamically?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>chr</code> to convert a number to a character with that ASCII value. Since <code>a</code>'s ASCII is <code>97</code>, adding 97 to the index in the list and converting it back to a character will give you an increasing series of characters. All that you're missing is some list comprehensions to put it all together:</p>
<pre><code>result = [str(x[1]) + chr(97 + x[0]) for x in enumerate(numbers)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string

numbers = list(range(9,0,-1))   # list of numbers from range (you could use range directly)

paired = list(zip (numbers,string.ascii_uppercase))
di     = dict(zip (numbers,string.ascii_uppercase))
di2    = dict(zip (string.ascii_uppercase, numbers))

print (paired) # these are tuples, numbers first

print(di)      # dictionary, number as key

print(di2)     # dictionary, alpha as key
</code></pre>
<p>Output:</p>
<pre><code>[(9, 'A'), (8, 'B'), (7, 'C'), (6, 'D'), (5, 'E'), (4, 'F'), (3, 'G'), (2, 'H'), (1, 'I')]

{9: 'A', 8: 'B', 7: 'C', 6: 'D', 5: 'E', 4: 'F', 3: 'G', 2: 'H', 1: 'I'}

{'A': 9, 'B': 8, 'C': 7, 'D': 6, 'E': 5, 'F': 4, 'G': 3, 'H': 2, 'I': 1}
</code></pre>
<p><code>string.ascii_uppercase</code> is a const that contains what its named after,
<code>zip</code> takes n iterables and matches them on indexes as pairs - shortest iterable wins, elements of longer ones are discarded.</p>
<p>Doku: <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> and <a href="https://docs.python.org/3.6/library/string.html" rel="nofollow noreferrer">string</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand right you want a multidimensional array that looks like:</p>
<pre><code>[('A', 9), ('B', 8),  # ... ]
</code></pre>
<p>In that case <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> is helpful and you can use <a href="https://docs.python.org/3/library/string.html#string.ascii_uppercase" rel="nofollow noreferrer"><code>string.ascii_uppercase</code></a>:</p>
<pre><code>import string
letters_to_numbers = list(zip(string.ascii_uppercase, numbers))

# =&gt; [('A', 9), ('B', 8), ...]
</code></pre>
<p>One cool side effect of how <code>dict</code> works is we can pass this into <code>dict</code> and get what you would expect (<code>'A'</code> maps to <code>9</code>, etc.):</p>
<pre><code>letters_to_numbers = dict(zip(string.ascii_uppercase, numbers))
# =&gt; {'A': 9, 'B', 8, ...}
</code></pre>
<p>Note that in your construction of <code>numbers</code> you don't need to use append you can just use a literal:</p>
<pre><code>numbers = [9, 8, 7, 6, 5, 4, 3, 2, 1]
</code></pre>
<p>If your intent is that numbers is always a descending series like that, you should look at range:</p>
<pre><code>numbers = list(range(9, 0, -1))  # = [9, 8, 7, ..., 1]
</code></pre>
</div>
<span class="comment-copy"><i>Add 'A' to 9</i>? but how? you can't add an integer to string.</span>
<span class="comment-copy">There's either a multi-dimensional array option or to create a dictionary; I've done the latter</span>
<span class="comment-copy">So that's not adding. Please update your question with your desire output.</span>
<span class="comment-copy">lol. thats almost the same as I did.</span>
