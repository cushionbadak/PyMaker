<div class="post-text" itemprop="text">
<pre><code>def gp(inp): #group positives in the list
  for x in range(len(inp)-1):
    if is_pos(inp[x][0]) and is_pos(inp[x+1][0]): 
      inp[x] += inp[x+1]
      del inp[x+1]
</code></pre>
<p>I work in python. That code above is for grouping together adjacent positives. I think this question would appeal to other people because of the error I received. What would that error be? an IndexError. </p>
<pre><code>Traceback (most recent call last):
  File "python", line 95, in &lt;module&gt;
  File "python", line 49, in formt
  File "python", line 10, in gp
IndexError: list index out of range
</code></pre>
<p>What I am trying to achieve is to group a list that looks like this: <code>[[1],[2],[3],[-4],[-3],[-2],[-1],[0]]</code>
into what looks like this: <code>[[1,2,3],[-4,-3,-2,-1],[0]]</code> I have no other imports, and this doesn't call to any other functions. How would I go about doing this, and why am I receiving that error? My theory is that it lies in <code>range(len(inp))</code> but I've tried experimenting with it a lot and no luck. The brackets around each individual number are intentional, so that I could combine numbers into lists by "adding" them. If you have a different way, please tell me. I want this to be about interior grouping in general, so try to generalize what I did wrong to that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how to do it using itertools:</p>
<pre><code>from itertools import groupby

def gp(inp):
    return [
        list(things)  # groupby yields iterators
        for _, things  # throw away the truth value
        # chain to remove the nesting
        in groupby(inp, lambda x: x&lt;0)
    ]
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; gp([1, 2, 3, -4, -3, -2, -1, 0])
[[1, 2, 3], [-4, -3, -2, -1], [0]]
</code></pre>
<p>If you consider 0 its own class, you can get away with a little bit of hackiness by replacing the <code>lambda x: x&lt;0</code> with <code>lambda x: x*float("inf")</code>:</p>
<pre><code>&gt;&gt;&gt; gp_new([1, 2, 3, -4, -3, -2, -1, 0, 1, 2, 3])
[[1, 2, 3], [-4, -3, -2, -1], [0], [1, 2, 3]]
</code></pre>
</div>
<span class="comment-copy">This is for a machine learning library, and grouping together the positives is an important step in my process. I wish I could explain why, but that'd be a very long comment.</span>
<span class="comment-copy">You are deleting a list element, while iterating over it. Don't do this. <a href="https://stackoverflow.com/q/45946228/8881141">See for instance here</a></span>
<span class="comment-copy">what would happen if you have a list <code>[[1],[-1],[1]]</code> would you love it as it is?</span>
<span class="comment-copy">Is 0 assumed to be a positive number?</span>
<span class="comment-copy">The standard <code>itertools</code> module has a <code>groupby</code> function that's good for tasks like this.</span>
<span class="comment-copy">You should also show the simpler version that works with a flat list. The OP is only using that list of lists to simplify the task of merging groups.</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable</code></a> to avoid unpacking the list.</span>
<span class="comment-copy">I removed the more complicated version</span>
<span class="comment-copy">How come this doesn't group 0 with the <i>positive</i> numbers? Both return <code>False</code> on the <code>lambda</code> check..</span>
<span class="comment-copy">@Ev.Kounis negative numbers are smaller than 0 and therefore return <code>True</code></span>
