<div class="post-text" itemprop="text">
<p>I have found no reference for a short constructor call that would initialize variables of the caller's choice. I am looking for</p>
<pre><code>class AClass:
    def __init__(self):
        pass

instance = AClass(var1=3, var2=5)
</code></pre>
<p>instead of writing the heavier</p>
<pre><code>class AClass:
    def __init__(self, var1, var2):
        self.var1 = var1
        self.var2 = var2
</code></pre>
<p>or the much heavier</p>
<pre><code>instance = AClass()
instance.var1 = 3
instance.var2 = 5
</code></pre>
<p>Am I missing something?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an excellent question and has been a puzzle also for me.</p>
<p>In the modern Python world, there are <strong>three</strong> (excellent) <strong>shorthand initializers</strong> (<em>this term is clever, I am adopting it</em>), depending on your needs. <strong>None requires any footwork with <code>__init__</code> methods</strong> (which is what you wanted to avoid in the first place).</p>
<p><strong>Namespace object</strong></p>
<p>If you wish to assign arbitrary values to an instance (i.e. not enforced by the class), you should use a particular data structure called <strong>namespace</strong>. A namespace object is an object accessible with the dot notation, to which you can assign basically what you want.</p>
<p>You can import the Namespace class from argparse (it is covered here: <a href="https://stackoverflow.com/questions/28345780/how-do-i-create-a-python-namespace-argparse-parse-args-value">How do I create a Python namespace (argparse.parse_args value)?</a>). Since Python 3.3. a <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow noreferrer">SimpleNamespace</a> class is available from the standard types package.</p>
<pre><code>from types import SimpleNamespace
instance = SimpleNamespace(var1=var1, var2=var2)
</code></pre>
<p>You can also write:</p>
<pre><code>instance = SimpleNamespace()
instance.var1 = var1
instance.var2 = var2
</code></pre>
<p>Let's say its the "quick and dirty way", which would work in a number of cases. In general there is not even the need to declare your class.</p>
<p>If you want your instances to still have a few methods and properties you could still do:</p>
<pre><code>class AClass(Namespace):
    def mymethod(self, ...):
        pass
</code></pre>
<p>And then:</p>
<pre><code>instance = AClass(var1=var1, var2=var2, etc.)
</code></pre>
<p>That gives you maximum flexibility.</p>
<p><strong>Named tuple</strong></p>
<p>On the other hand, if you want the class to <strong>enforce</strong> those attributes, then you have another, more solid option.</p>
<p>A <strong>named tuple</strong> produces immutable instances, which are initialized once and for all. Think of them as ordinary tuples, but with each item also accessible with the dot notation. This class <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a> is part of the standard distribution of Python. This how you generate your class:</p>
<pre><code>from collections import namedtuple
AClass = namedtuple("AClass", "var1 var2")
</code></pre>
<p>Note how cool and short the definition is and not <code>__init__</code> method required. You can actually complete your class after that.</p>
<p>And to create an object:</p>
<pre><code>instance = AClass(var1, var2)
</code></pre>
<p>or </p>
<pre><code>instance = AClass(var1=var1, var2=var2)
</code></pre>
<p><strong>Named list</strong></p>
<p>But what if you want that instance to be mutable, i.e. to allow you update the properties of the instance? The answer is the <strong>named list</strong> (also known as RecordClass). Conceptually it is like a normal list, where the items are also accessible with the dot notation.</p>
<p>There are various implementations. I personally use the aptly named <a href="https://pypi.python.org/pypi/namedlist" rel="nofollow noreferrer">namedlist</a>.</p>
<p>The syntax is identical:</p>
<pre><code>from namedlist import namedlist
AClass = namedlist("AClass", "var1 var2")
</code></pre>
<p>And to create an object:</p>
<pre><code>instance = AClass(var1, var2)
</code></pre>
<p>or:</p>
<pre><code>instance = AClass(var1=var1, var2=var2)
</code></pre>
<p>And you can then modify them:</p>
<pre><code>instance.var1 = var3
</code></pre>
<p>But you can't add an attribute that is not defined.</p>
<pre><code>&gt;&gt;&gt; instance.var4 = var4
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'instance' object has no attribute 'var4'
</code></pre>
<p><strong>Usage</strong></p>
<p>Here is my two-bit:</p>
<ol>
<li><p><strong>Namespace</strong> object is for maximum flexibility and there is not even the need to declare a class; with the risk of having instances that don't behave properly (but Python is a language for consenting adults). If you have only one instance and/or you know what you're doing, that would be the way to go.</p></li>
<li><p><strong>namedtuple</strong> class generator is perfect to generate objects for returns from functions (see this <a href="https://youtu.be/OSGv2VnC0go?t=32m15s" rel="nofollow noreferrer">brief explanation</a> in a lecture from Raymond Hettinger). Rather than returning bland tuples that the user needs to look up in the documentation, the tuple returned is self-explanatory (a dir or help will do it). And it it's compatible with tuple usage anyway (e.g. <code>k,v, z = my_func()</code>). Plus it's immutable, which has its own advantages.</p></li>
<li><p><strong>namedlist</strong> class generator is useful in a wide range of cases, including when you need to return multiple values from a function, which then need to be amended at a later stage (and you can still unpack them: <code>k, v, z = instance</code>). If you need a mutable object from a proper class with enforced attributes, that might be the go-to solution. </p></li>
</ol>
<p>If you use them well, this might significantly cut down time spent on writing classes and handling instances!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can update the <a href="https://docs.python.org/3/library/stdtypes.html#object.__dict__" rel="nofollow noreferrer"><code>__dict__</code></a> attribute of your object directly, which is where the attributes are stored</p>
<pre><code>class AClass:
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

c = AClass(var1=1, var2='a')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the dictionary representation of the object's attributes, and update its elements with the keyword arguments given to the constructor:</p>
<pre><code>class AClass:
    def __init__(self, **kwargs):
        self.__dict__.update(**kwargs)

instance = AClass(var1=3, var2=5)
print(instance.var1, instance.var2) # prints 3 5
</code></pre>
<p>However, consider <a href="https://stackoverflow.com/questions/9728243/is-self-dict-updatekwargs-good-or-poor-style#9728406">this question</a> and its answers considering the style of this. Unless you know what you are doing, better explicitly set the arguments one by one. It will be better understandable for you and other people later - explicit is better than implicit. If you do it the <code>__dict__.update</code> way, document it properly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>class AClass:
    def __init__(self, **vars):
        self.var1 = vars.get('var1')
</code></pre>
</div>
<span class="comment-copy">Unfortunately you aren't missing anything. You may want to check out the <a href="https://pypi.python.org/pypi/attrs" rel="nofollow noreferrer"><code>attrs</code> module</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/35190877/how-do-i-avoid-the-self-x-x-self-y-y-self-z-z-pattern-in-init">How do I avoid the "self.x = x; self.y = y; self.z = z" pattern in __init__?</a></span>
<span class="comment-copy">And the price you pay is that you don't get error checking for constructor arguments any more.</span>
<span class="comment-copy">@DietrichEpp You could always insert some validation step where you do stuff to clean up/check <code>kwargs</code> before the <code>update</code>.</span>
<span class="comment-copy">This does what OP is asking for, but would likely be considered poor style in Python. One of the "Zen of Python" <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">python.org/dev/peps/pep-0020</a> principles is "explicit is better than implicit" and automatically assigning nameless attributes is not explicit.</span>
<span class="comment-copy">This only saves writing the attribute names in the method definition. You're still stuck writing a bunch of assignments self.var1=, self.var2=...</span>
