<div class="post-text" itemprop="text">
<p>Okay so lets say I have number , 100, and I want to split it up into 12 groups randomly and have the total from all the groups equate to 100. How would I do this, I have written a piece of code but it has a flaw.  </p>
<pre><code>from random import randint
total = 100
while total &lt; 101:
    for i in range(0,9):
        num = randint(1,total)
        print(i,"|","*"*num)
        total -= num
if total &lt;= 0:
    for j in range (i,10):
        print(j,"|","*"*total)
</code></pre>
<p>when you run it , once the total is equal to zero or less, it crashes, so it wont post the full results and I do not know how to deal fix this. I'm new to Python so my knowledge is limited. </p>
</div>
<div class="post-text" itemprop="text">
<p>Splitting a number <em>n</em> into <em>k</em> groups randomly is mathematically equivalent to randomly placing <em>k</em>-1 dividers. Thus, I would do something like this:</p>
<pre><code>from random import randint
def split_randomly(n,k):
    dividers = set() # guarantee no duplicate dividers
    while len(dividers) &lt; k-1:
        dividers.add(randint(1,n-1))
    dividers = [0] + sorted(dividers) + [n]
    return [dividers[i+1] - dividers[i] for i in range(len(dividers)-1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a proper random split, you could use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><strong><code>random.sample</code></strong></a>. THe following gathers a sample of <code>k-1</code> random split points from [1..n] and <code>0</code> and <code>n</code> and returns a <code>list</code> of their pairwise differences:</p>
<pre><code>from random import sample

def split(n, k):
  splits = [0] + sorted(sample(range(1, n), k-1)) + [n]
  return [end-start for start, end in zip(splits, splits[1:])]

&gt;&gt;&gt; split(10, 7)
[1, 3, 1, 1, 1, 1, 2]
&gt;&gt;&gt; split(10, 7)
[1, 1, 1, 1, 1, 4, 1]
&gt;&gt;&gt; split(10, 7)
[1, 2, 2, 1, 2, 1, 1]

&gt;&gt;&gt; split(100, 12)
[10, 10, 8, 5, 7, 15, 1, 5, 1, 8, 26, 4]
</code></pre>
</div>
<span class="comment-copy">What do you mean by crashes?  Do you mean the console just closes?</span>
<span class="comment-copy">What do you mean by 'split a number into groups'??? Into addends, perhaps?</span>
<span class="comment-copy">You should add error message to the question.</span>
<span class="comment-copy"><code>while total &lt; 101</code> is meaningless: You start with <code>total=100</code> and subtract positive numbers from it. It can never become bigger than it was before.</span>
<span class="comment-copy">Note that I am still a bit unsure by what you mean by "groups". This code will return <i>k</i> numbers that add up to <i>n</i>, which seems to be what you mean</span>
<span class="comment-copy">You actually <i>do</i> have duplicate dividers, if it matters. I easily got <code>[4, 10, 8, 4, 15, 39, 3, 4, 8, 2, 2, 1]</code> and <code>[3, 1, 2, 20, 23, 1, 11, 8, 12, 3, 2, 14]</code>.</span>
<span class="comment-copy">The dividers are not duplicates: the group sizes are duplicates (which wasn't part of the restriction if I'm not mistaken). I think my terminology was confusing. I'm treating the number line [0,<i>n</i>] as the full window, and I partition this window into <i>k</i> randomly-sized groups, which I do by placing <i>k</i>-1 dividers (which thus define <i>k</i> groups), and the sizes of the groups are <i>k</i> random numbers that must add up to <i>n</i></span>
<span class="comment-copy">This solution is equivalent to mine (but clearly much cleaner), but I'm curious to see how performance compares between yours calling <code>sample()</code> once vs. mine calling <code>randint()</code> <i>k</i>-1 times compares. I am guessing calling <code>sample()</code> once would be faster, so I think this is a superior solution to mine</span>
