<div class="post-text" itemprop="text">
<p>I'm learning about how to import libraries from directories and I've stumbled upon an error I can't seem to figure out. I'm using the IMDBpy python library in a folder called lib. Below, I am importing the module which no longer returns any errors, but when I move to line number 6, I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "testlib.py", line 4, in &lt;module&gt;
    from lib.imdb import IMDb
  File "/home/user/Scripts/test/lib/imdb/__init__.py", line 49, in &lt;module&gt;
    import imdb._logging
ImportError: No module named 'imdb'
</code></pre>
<p>Python is throwing an error because the python test file I'm writing is 2 directories up. Not sure how to get it working without putting everything in the same directory.</p>
<pre><code>#!/usr/bin/env python3

from lib.imdb import IMDb

# Create the object that will be used to access the IMDb's database.
ia = imdb.IMDb() # by default access the web.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can either write:</p>
<pre><code>from lib.imdb import IMDb

ia = IMDb()
</code></pre>
<p>or:</p>
<pre><code>from lib import imdb

ia = imdb.IMDb()
</code></pre>
<p>But importing <code>IMDb</code> and then calling <code>imdb.IMDb()</code> does not work.</p>
<p>One other point to mention: If your <em>testlib.py</em> resides above the <code>lib</code> foder, then you need to add a <code>__init__.py</code> file within <code>lib</code> for your import to work. The file can be completely empty.</p>
<hr/>
<p><strong>Update</strong>: This packages uses import statement that are not relative to the package folder, but to an arbitrary folder in <code>sys.path</code>. An illustration of this is the exact line that causes the error:</p>
<pre><code># imdb.__init__.py
imdb._logging
</code></pre>
<p>This works only if the packages resides in a folder that is part of <code>sys.path</code>, so either in the same path as the script that does the <code>from imdb import IMDb</code> statement or in the python dist-package path (simplified explanation). This and all equivalent imports could be replaced by</p>
<pre><code>#Â imdb.__init__.py
from . import _logging
</code></pre>
<p>In which case the import is relative to the module, so there is no need for the imdbpy package to reside in a directory in <code>sys.path</code>.</p>
<p>The consequence for us now is that we cannot simply put imdb in a sub-folder, we need to either put it in a folder from <code>sys.path</code> or add the folder it resides in to <code>sys.path</code>. So, the options are:</p>
<ul>
<li>install the package</li>
<li>move the imdb folder up into the current folder</li>
<li><p>write:</p>
<pre><code>import sys
sys.path.insert(0, 'absolute/path/to/lib')
</code></pre>
<p>before the import statement. </p></li>
</ul>
<p>In any of the above cases you will be able to do:</p>
<pre><code>from imdb import IMDb
ia = IMDb()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned above, it is different importing an object from importing a function.
When you import a module such as <code>imdb</code> you may use its functions. However, when you import a function, you can only use that function, not the object/module where it came from.</p>
<p>Check this for better examples: <a href="https://docs.python.org/3/tutorial/modules.html#modules" rel="nofollow noreferrer">Python 3 modules</a></p>
</div>
<span class="comment-copy">I've tried both the examples you provided and it did not work. I get the exact error as above.</span>
<span class="comment-copy">@yusof please see the edited answer.</span>
<span class="comment-copy">I had already done that which is why I was finally able to import, this is the second hurdle i'm facing. When I ran the script after putting that, I got a new directory called <b>pycache</b> and a file named <b>init</b>.pyc automatically.</span>
<span class="comment-copy">@yusof I've been looking at the <a href="https://github.com/alberanid/imdbpy" rel="nofollow noreferrer">imdbpy</a> package a bit more closely. Funny enough, if you replace all imports of type <code>import imdb.xxx</code> with relative import like <code>from . import xxx</code> then everything runs smoothly. What should work is adding it to sys.path, so <code>import sys, os</code> then <code>sys.path.insert(0, 'absolute/path/to/lib')</code>.</span>
