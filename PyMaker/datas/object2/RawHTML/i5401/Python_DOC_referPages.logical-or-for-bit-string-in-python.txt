<div class="post-text" itemprop="text">
<p>What i want to do is have the result of logical OR for two bit-strings. For example:</p>
<pre><code>    a='010010'
    b='000101'
    c=LOGIC_OR(a,b)
    c
    010111
</code></pre>
<p>The error i encounter most of the time is when I convert 'b' from string to binary it removes leading zeros. Others methods i have used convert 'a' and 'b' to integers. Generally nothing is working and help would be much appreciated. 
Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a couple of alternative methods.</p>
<p>Third-party <a href="http://pypi.python.org/pypi/bitarray" rel="nofollow noreferrer">bitarray</a> library:</p>
<pre><code>from bitarray import bitarray

a='010010'
b='000101'

logical_or_bitarray = bitarray(a) | bitarray(b)  # output: bitarray('010111')
logical_or_string = ''.join(map(str, map(int, logical_or_bitarray)))  # output: '010111'
</code></pre>
<p>Python strings:-</p>
<pre><code>a='010010'
b='000101'

def compare_bits(A, B):
    c_1 = str(int(A) | int(B))
    c = (len(A) - len(c_1))*'0' + str(c_1)
    return c

compare_bits(a, b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can convert them to integers with <code>int</code> specifying the base to be <code>2</code>. Then, perform a <em>bitwise OR</em> operation and convert the result to a bit string with <code>bin</code>.</p>
<pre><code>&gt;&gt;&gt; c = int(a, 2) | int(b, 2))
&gt;&gt;&gt; c
23
</code></pre>
<p>If you want to print the result as a bit string, use <code>str.format</code>. If you're on python-3.6, you can also use f-strings.</p>
<pre><code>&gt;&gt;&gt; '{:b}'.format(c)
'10111'
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; print(f"{c:b}")
10111
</code></pre>
<p>To capture leading zeros with respect to <code>a</code>/<code>b</code>, use <code>str.zfill</code> -</p>
<pre><code>&gt;&gt;&gt; f"{c:b}".zfill(len(a))
'010111'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should convert to <code>int</code> objects and do numerical operations in the numerical data type. Then you use string-formatting when you need to see it. If you have Python 3.6, using f-strings makes this trivial:</p>
<pre><code>&gt;&gt;&gt; a='010010'
&gt;&gt;&gt; b='000101'
&gt;&gt;&gt; a = int(a, base=2) # we should be ints
&gt;&gt;&gt; b = int(b, base=2) # we should be ints
&gt;&gt;&gt; c = a | b # operations natural and built in
&gt;&gt;&gt; print(f"{c:b}") # use formatting when you need it
10111
</code></pre>
<p>Read the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting spec's</a>. You can make them do whatever you desire. Using a fill value of <code>'0'</code> and a width of <code>'6'</code>:</p>
<pre><code>&gt;&gt;&gt; print(f"{c:0&gt;6b}")
010111
</code></pre>
<p>And this is cool too:</p>
<pre><code>&gt;&gt;&gt; pad='0'
&gt;&gt;&gt; width = 6
&gt;&gt;&gt; print(f"{c:{pad}&gt;{width}b}")
010111
</code></pre>
</div>
<span class="comment-copy">If your question was answered, please consider <a href="https://stackoverflow.com/help/someone-answers">accepting the most helpful answer</a>. Click the grey check to toggle it green. It indicates that your problem was solved, and helps the community. Thank you.</span>
<span class="comment-copy">Does this function also work if there are no,or many leading zeros? I ask because i don't understand the " *'0' " when you define c. Thanks anyways</span>
<span class="comment-copy"><code>str(int(A) | int(B))</code> removes leading 0's. We need to add back a certain number of 0's, precisely <code>len(A) - len(c_1)</code>. The <code>*0</code> repeats a string by the preceding integer.</span>
<span class="comment-copy">For the string method, I recommend COLDSPEED's answer which utilises str.zfill.</span>
<span class="comment-copy">Probably the next question OP will ask is regarding the presence of <code>b</code>, slice it to show them what they desire. also the string formatting to show extra 0 at start ;)</span>
