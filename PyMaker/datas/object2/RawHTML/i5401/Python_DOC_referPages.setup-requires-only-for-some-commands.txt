<div class="post-text" itemprop="text">
<p>I have a distutils-style Python package which requires a specific, and quite large, dependency for its build step. Currently, this dependency is specified under the <code>setup_requires</code> argument to distutils.setup. Unfortunately, this means the dependency will be built for <em>any</em> execution of setup.py, including when running <code>setup.py clean</code>. This creates the rather ironic situation of the clean step sometimes causing large amount of code to be compiled.</p>
<p>As I said, this setup dependency is only required for the <code>build</code> step. Is there a way to encode this logic in setup.py so that all commands that do not invoke the build command are run without it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can always order the <code>Distribution</code> to fetch some packages explicitly, same way as they will be if you define them in <code>setup_requires</code>. Example with <code>numpy</code> dependency required for <code>build</code> command only:</p>
<pre class="lang-python prettyprint-override"><code>from distutils.command.build import build as build_orig
from setuptools import setup, find_packages,  Command, dist


class build(build_orig):

    def run(self):
        self.distribution.fetch_build_eggs(['numpy'])
        # numpy becomes available after this line. Test it:
        import numpy
        print(numpy.__version__)
        super().run()

setup(
    name='spam',
    packages=find_packages(),
    cmdclass={'build': build,}
    ...
)
</code></pre>
<p>The dependencies are passed the same as they would be defined in <code>setup_requires</code> arg, so version specs are also ok:</p>
<pre><code>self.distribution.fetch_build_eggs(['numpy&gt;=1.13'])
</code></pre>
<p>Although I must note that fetching dependencies via <code>setup_requires</code> is usually <em>much</em> slower than installing them via <code>pip</code> (especially when you have some heavy dependencies that must be built from source first), so if you can be sure you will have <code>pip</code> available (<a href="https://docs.python.org/3/library/ensurepip.html#module-ensurepip" rel="nofollow noreferrer">or use <code>python3.4</code> and newer</a>), the approach suggested by <a href="https://stackoverflow.com/users/7976758/phd">phd</a> in his <a href="https://stackoverflow.com/a/48284235/2650249">answer</a> will save you time. Fetching eggs via distribution may, however, come handy when building for old python versions or obscure python installations like the system python on MacOS.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if sys.argv[0] == 'build':
    kw = {'setup_requires': [req1, req2, …]}
else:
    kw = {}

setup(
    …,
    **kw
)
</code></pre>
<p>Another approach to try is override <code>build</code> command with a custom <code>cmdclass</code>:</p>
<pre><code>from setuptools.command.build import build as _build

class build(_build):
    def run(self):
        subprocess.call(["pip", "install", req1, req2…"])
        _build.run(self)

setup(
    …,
    cmdclass={'build': build},
)
</code></pre>
<p>and avoid <code>setup_requires</code> at all.</p>
</div>
<span class="comment-copy">Unfortunately that fails when the build command is invoked as a sub-command of something else. (e.g.: When running <code>python setup.py install</code>.)</span>
<span class="comment-copy">I added another approach to the answer.</span>
