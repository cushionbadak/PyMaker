<div class="post-text" itemprop="text">
<p>The following code block was tested with (cpython) Python 3.6.4 and Python 2.7.14.</p>
<p>With the explicit <code>raise ValueError</code> statement commented out, the following code runs and prints "Hello!" and then "World!" even though no <code>ValueErro</code> symbol exists.</p>
<p>Uncomment the <code>raise ValueError</code> statement and the ValueError is raised and the expected <code>NameError: name 'ValueErro' is not defined</code> is raised.</p>
<pre><code>try:
    print("Hello!")
    # raise ValueError("?")
except ValueErro:
    print("Error!")
finally:
    print("World!")
</code></pre>
<p>I was expecting the NameError to show up well before runtime processing of the except block.</p>
<p>Is there a different except syntax that would more aggressively check Names/Symbols during a parsing step?</p>
<p>Is this an implementation bug?</p>
<p>Thanks for reading!</p>
</div>
<div class="post-text" itemprop="text">
<p>After a comment from @DYZ, I found the right search terms to get the answer.</p>
<p><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html#handling-exceptions</a></p>
<blockquote>
<p>The try statement works as follows.</p>
<ul>
<li><p>First, the try clause (the statement(s) between the try and except keywords) is executed.</p></li>
<li><p>If no exception occurs, the except clause is skipped and execution of the try statement is finished.</p></li>
</ul>
</blockquote>
<p>Another resource exploring this problem.</p>
<p><a href="https://dbaktiar-on-python.blogspot.com/2009/07/python-lazy-evaluation-on-exception.html" rel="nofollow noreferrer">https://dbaktiar-on-python.blogspot.com/2009/07/python-lazy-evaluation-on-exception.html</a></p>
<p>-</p>
<p>My Solution moving forward:</p>
<pre><code># Explicitly bind the Exception Names in a non-lazy fashion.
errors = (KeyboardInterrupt, ValueErro) # Caught!
try:
    print("Hello!")
    raise ValueError("?")
except errors:
    print("Error!")
finally:
    print("World!")
</code></pre>
<p>-</p>
<p>tl;dr - The except clauses are entirely skipped if the try clauses executes without exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>Exceptions can be defined at run time. Example:</p>
<p>myexcept.py contains:</p>
<pre><code>class ValueErro(Exception):
    pass
</code></pre>
<p>Your program slightly modified:</p>
<pre><code>import_myexcept = False
if import_myexcept:
    from myexcept import ValueErro

try:
    print("Hello!")
    raise ValueError("?")
except ValueErro:
    print("Error!")
finally:
    print("World!")
</code></pre>
<p>This behaves just like your program: <code>NameError: name 'ValueErro' is not defined</code>.</p>
<p>But change: <code>import_myexcept = True</code>, and by the time the <code>except ValueErro:</code> statement is encountered, the <code>ValueErro</code> exception is defined and no NameError occurs.</p>
</div>
<span class="comment-copy">well, you could try writing "ValueError" instead of "ValueErro".</span>
<span class="comment-copy">That's the explicit behavior I'm trying to highlight. I caught this because I had a typo in a larger program that would silently pass over the except block where the code should have flowed through.  argparse.ArgumentTypeError vs argparser.ArgumentTypeError.  The confusion lies in that NameErrors like this should probably be caught at parsing time rather than runtime.</span>
<span class="comment-copy">What's the problem then ?</span>
<span class="comment-copy">NameErrors can't be caught at parse time. For all Python knows, some other code it can't see is intended to bind the <code>ValueErro</code> name in the cases where that expression would be evaluated.</span>
<span class="comment-copy">This is one of the tradeoffs you make with a dynamic language. If you don't like it, you can look for static analysis tools, but they can't catch everything.</span>
<span class="comment-copy">@DYZ - if you'd like to post an answer, I'd be happy to accept it.</span>
<span class="comment-copy">I really don't get what your question is and how is this the answer.</span>
<span class="comment-copy">@tglaria - I wanted to better understand why the <code>ValueErro</code> name was not being evaluated during the overall try-except definition and find a way to force it to resolve at an earlier time.   I had previously assumed that the entire try-except block had a single symbol resolution time. That not being the case, the links in here provide the explicit rules behind the observed lazy evaluation.</span>
