<div class="post-text" itemprop="text">
<p>I am suffering from the Windows Python subprocess module.<br/>
This is test code1(named test1.py):  </p>
<pre><code>import subprocess as sbp


with sbp.Popen('python tests/test2.py',stdout=sbp.PIPE) as proc:
    print('parent process')
    print(proc.stdout.read(1))
    print('end.')
</code></pre>
<p>and test code2(named <code>test2.py</code>):    </p>
<pre><code>import random
import time

def r():
    while True:
        yield random.randint(0, 100)


for i in  r():
    print(i)
    time.sleep(1)
</code></pre>
<p>Generally, the test code2 generates random integer(0~100) and print it out infinitely.
I want the test code1 create a subprocess and launch it, read the stdout in realtime(not waiting for subprocess finished).
But when I run the code, the output is :</p>
<pre><code>python.exe test1.py
parent process
</code></pre>
<p>It blocks on stdout.read() forever.
I have tried:</p>
<ol>
<li>Replace <code>stdout.read</code> with communicate(), doesn't work as <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">python doc</a> expected, it will blocking until subprocess terminate.</li>
<li>use poll() methods to detect subprocess and read n bytes, forever block on read()</li>
<li>Modify the test2.code, only generate one nunber and break the loop. The father process print it out immediately(I think it's because child process terminated)</li>
</ol>
<p>I searched a lot of similiar answers and did as they suggested(use stdout instead of communicate), but still didn't work?  </p>
<p><em>Could anyone help me explaining why and how to do it?</em></p>
<p>This is my platform information:<br/>
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</p>
</div>
<div class="post-text" itemprop="text">
<p>It has to do with Python's output buffering (for a child process in your case). Try disabling the buffering and your code should work. You can do it by either running python with <code>-u</code> key, or calling <code>sys.stdout.flush()</code>.</p>
<p>To use the <code>-u</code> key you need to modify the argument in the call to <code>Popen</code>, to use the <code>flush()</code> call you need to modify the <code>test2.py</code>.</p>
<p>Also, your <code>test1.py</code> would print just a single number, because you read only 1 byte from the pipe, instead of reading them in a loop.</p>
<p>Solution 1:</p>
<p>test1.py</p>
<pre><code>import subprocess as sbp

with sbp.Popen(["python3", "-u", "./test2.py"], stdout=sbp.PIPE) as proc:
    print("parent process")
    while proc.poll() is None:  # Check the the child process is still running
        data = proc.stdout.read(1)  # Note: it reads as binary, not text
        print(data)
    print("end")
</code></pre>
<p>This way you don't have to touch the <code>test2.py</code> at all.</p>
<p>Solution 2:</p>
<p>test1.py</p>
<pre><code>import subprocess as sbp

with sbp.Popen("./test2.py", stdout=sbp.PIPE) as proc:
    print("parent process")
    while proc.poll() is None:  # Check the the child process is still running
        data = proc.stdout.read(1)  # Note: it reads as binary, not text
        print(data)
    print("end")
</code></pre>
<p>test2.py</p>
<pre><code>import random
import time
import sys

def r():
    while True:
        yield random.randint(0, 100)

for i in  r():
    print(i)
    sys.stdout.flush()  # Here you force Python to instantly flush the buffer
    time.sleep(1)
</code></pre>
<p>This will print each received byte on a new line, e.g.:</p>
<pre><code>parent process
b'9'
b'5'
b'\n'
b'2'
b'6'
b'\n'
</code></pre>
<p>You can switch the pipe to text mode by providing <code>encoding</code> in arguments or providing <code>universal_newlines=True</code>, which will make it use the default encoding. And then write directly to <code>sys.stdout</code> of your parent process. This will basically  stream the output of a child process to the output of the parent process.</p>
<p>test1.py</p>
<pre><code>import subprocess as sbp
import sys

with sbp.Popen("./test2.py", stdout=sbp.PIPE, universal_newlines=True) as proc:
    print("parent process")
    while proc.poll() is None:  # Check the the child process is still running
        data = proc.stdout.read(1)  # Note: it reads as binary, not text
        sys.stdout.write(data)
    print("end")
</code></pre>
<p>This will provide the output as if the <code>test2.py</code> is executed directly:</p>
<pre><code>parent process
33
94
27
</code></pre>
</div>
<span class="comment-copy">Any reason why it needs to be <code>Popen</code> specifically? Why not use <code>subprocess.check_output</code>? Or does <code>check_output</code> not do realtime reading?</span>
<span class="comment-copy">@NiemaMoshiri Yeah, <code>check_output</code> is similiar to <code>run</code>, it return until subprocess terminate.</span>
<span class="comment-copy">You point out the key -- the child process output buffered!    Thank you Nikita, both of the 2 solutions are great. This is a test code for situition to transmit data(large data) between child and parent process. So byte format is ok, and also your example of using poll() in a loop works for me. Thank you again!</span>
