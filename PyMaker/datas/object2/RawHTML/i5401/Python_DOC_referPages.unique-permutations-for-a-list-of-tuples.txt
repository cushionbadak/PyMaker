<div class="post-text" itemprop="text">
<p>I want to produce something between a permutation and a combination for a list of tuples. If, for example, I have the list</p>
<pre><code>list_of_tuples = [(1,20), (1,21), (2,18), (2,19)]
</code></pre>
<p>I want to create all possible "combinations" of 3 tuples so that I want the list to include the result <code>[(1,20), (1,20), (1,20)]</code> but I consider <code>[(1,20), (1,20), (1,21)]</code> to be identical to <code>[(1,20), (1,21), (1,20)]</code> and <code>[(1,21), (1,20), (1,20)]</code> and want to keep only one of these (doesn't matter which one). </p>
<p>In other words, if the "combination" includes the same tuples as another "combination", I don't want to keep the other one(s).</p>
<p>I've tried something like</p>
<pre><code>list_of_lists = [list_of_tuples]*3
results = list(itertools.product(*list_of_lists))
results = set(results)
</code></pre>
<p>But by using <code>set()</code> I lose <code>[(1,20), (1,20), (1,20)]</code> and all the other results that have the same tuple three times.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer"><code>itertools.combinations_with_replacement</code></a>, which should produce exactly what you describe:</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations_with_replacement
&gt;&gt;&gt; list_of_tuples = [(1,20), (1,21), (2,18), (2,19)]
&gt;&gt;&gt; list(combinations_with_replacement(list_of_tuples, 3))
[((1, 20), (1, 20), (1, 20)),
 ((1, 20), (1, 20), (1, 21)),
 ((1, 20), (1, 20), (2, 18)),
 ((1, 20), (1, 20), (2, 19)),
 ((1, 20), (1, 21), (1, 21)),
 ((1, 20), (1, 21), (2, 18)),
 ((1, 20), (1, 21), (2, 19)),
 ((1, 20), (2, 18), (2, 18)),
 ((1, 20), (2, 18), (2, 19)),
 ((1, 20), (2, 19), (2, 19)),
 ((1, 21), (1, 21), (1, 21)),
 ((1, 21), (1, 21), (2, 18)),
 ((1, 21), (1, 21), (2, 19)),
 ((1, 21), (2, 18), (2, 18)),
 ((1, 21), (2, 18), (2, 19)),
 ((1, 21), (2, 19), (2, 19)),
 ((2, 18), (2, 18), (2, 18)),
 ((2, 18), (2, 18), (2, 19)),
 ((2, 18), (2, 19), (2, 19)),
 ((2, 19), (2, 19), (2, 19))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also try this:</p>
<pre><code>from itertools import product
from collections import Counter

list_of_tuples = [(1,20), (1,21), (2,18), (2,19)]

list_of_lists = [list_of_tuples] * 3

seen = set()
unique = []

for prod in product(*list_of_lists):
    curr = frozenset(Counter(prod).items())

    if curr not in seen:
        seen.add(curr)
        unique.append(prod)

print(unique)
</code></pre>
<p>Which Outputs:</p>
<pre><code>[((1, 20), (1, 20), (1, 20)), 
 ((1, 20), (1, 20), (1, 21)), 
 ((1, 20), (1, 20), (2, 18)), 
 ((1, 20), (1, 20), (2, 19)), 
 ((1, 20), (1, 21), (1, 21)), 
 ((1, 20), (1, 21), (2, 18)), 
 ((1, 20), (1, 21), (2, 19)), 
 ((1, 20), (2, 18), (2, 18)), 
 ((1, 20), (2, 18), (2, 19)), 
 ((1, 20), (2, 19), (2, 19)), 
 ((1, 21), (1, 21), (1, 21)), 
 ((1, 21), (1, 21), (2, 18)), 
 ((1, 21), (1, 21), (2, 19)), 
 ((1, 21), (2, 18), (2, 18)), 
 ((1, 21), (2, 18), (2, 19)), 
 ((1, 21), (2, 19), (2, 19)), 
 ((2, 18), (2, 18), (2, 18)), 
 ((2, 18), (2, 18), (2, 19)), 
 ((2, 18), (2, 19), (2, 19)), 
 ((2, 19), (2, 19), (2, 19))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you looking something like this?</p>
<pre><code>list_of_tuples = [(1,20), (1,21), (2,18), (2,19)]

import itertools

data=[]

for i in itertools.product(list_of_tuples,repeat=3):
    data.append(i)

dict_1=[]

for i in data:
    if sorted(i,key=lambda x:x[1]) not in dict_1:
        dict_1.append(sorted(i,key=lambda x:x[1]))

print(dict_1)
</code></pre>
<p>output:</p>
<pre><code>[[(1, 20), (1, 20), (1, 20)], [(1, 20), (1, 20), (1, 21)], [(2, 18), (1, 20), (1, 20)], [(2, 19), (1, 20), (1, 20)], [(1, 20), (1, 21), (1, 21)], [(2, 18), (1, 20), (1, 21)], [(2, 19), (1, 20), (1, 21)], [(2, 18), (2, 18), (1, 20)], [(2, 18), (2, 19), (1, 20)], [(2, 19), (2, 19), (1, 20)], [(1, 21), (1, 21), (1, 21)], [(2, 18), (1, 21), (1, 21)], [(2, 19), (1, 21), (1, 21)], [(2, 18), (2, 18), (1, 21)], [(2, 18), (2, 19), (1, 21)], [(2, 19), (2, 19), (1, 21)], [(2, 18), (2, 18), (2, 18)], [(2, 18), (2, 18), (2, 19)], [(2, 18), (2, 19), (2, 19)], [(2, 19), (2, 19), (2, 19)]]
</code></pre>
</div>
<span class="comment-copy">dude , what is your email or anything , i have something to share with you.</span>
