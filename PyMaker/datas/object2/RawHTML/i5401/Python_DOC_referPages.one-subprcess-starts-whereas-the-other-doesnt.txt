<div class="post-text" itemprop="text">
<p>I basically want to run multiple python scripts. There were many ways of doing this but basically preferred the following one:</p>
<pre><code>import subprocess
@bot.event
async def on_ready():
    subprocess.call(['python','fileA.py'])
    subprocess.call(['python','fileB.py'])
</code></pre>
<p>However, fileA runs, but fileB doesn't. Only after closing the first, the second starts. I tried with os.system, but same happens there too. Please help. I need both files to <strong>run</strong> simultaneously.</p>
</div>
<div class="post-text" itemprop="text">
<p>The comments are correct - this is still run sequentially due to the Python script in which <code>subprocess</code> is embedded.</p>
<p>What I think you're looking for is the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">Python 'threading' module</a>. This will allow you to set up your threads (<code>subprocess</code> of <code>fileA.py</code> and <code>fileB.py</code>), then execute them at the same time.</p>
<p>Note that this is <strong>not</strong> multiprocessing (which is a lot more complex), and because of this, your main script will not continue until all threads are complete.</p>
</div>
<span class="comment-copy"><code>run</code> is not an asynchronous call, so the files will run one after the other- can I ask why you are not using the files like a library, importing the contents and running the pertinent code using a multithreading library?</span>
<span class="comment-copy"><code>subprocess.call()</code> <i>waits for the command to complete</i>. Does that command complete?</span>
<span class="comment-copy">@Philp Adler, I do not wish to import them as library because these python scripts do not end. These are infinite running until the program is killed.</span>
<span class="comment-copy">I am not able to understand the documentation. I am kinda new to python and I am just 15. Could you just tell me  how to just start fileA and fileB simultaneously with that tread thingy?</span>
<span class="comment-copy">@RaebelChristo Good for you for starting so young. I haven't done threading in a while, so I had to look over it myself; I think the 'threading' library is more complex than you need (depending on what <code>fileA</code> and <code>fileB</code> do, of course). I would actually go with the lower-level (and simpler) 'thread' module (Python2: <code>import thread</code>, Python3: <code>import _thread</code>). When you run the linked example, you'll see the lines aren't always printed in the same order, showing that it's running concurrently in separate threads. <a href="https://www.dropbox.com/s/7g3xi7umzh2z73d/thread_example.py?dl=0" rel="nofollow noreferrer">dropbox.com/s/7g3xi7umzh2z73d/thread_example.py?dl=0</a></span>
