<div class="post-text" itemprop="text">
<p>If I have a dictionary where each value is a list, how can I check if there is a specific element in my list? For example:</p>
<pre><code>myDict = { 0 : ['a','b','c'],
           1 : ['d','e','f']}
</code></pre>
<p>How can I check if <code>'a'</code> exists?</p>
</div>
<div class="post-text" itemprop="text">
<h1>Check all values</h1>
<p>We can use <a href="https://docs.python.org/3.7/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><strong><code>itertools.chain</code></strong></a> and use it in a rather self-explaining <em>one liner</em>:</p>
<pre><code>from itertools import chain

if 'a' in chain.from_iterable(myDict.values()):
    # do something
    pass
</code></pre>
<p>Here we will chain the <code>.values()</code> of a list together in an iterable, and thus check membership of <code>'a'</code>.</p>
<p>Note that this runs in <em>linear</em> time with the total number of values in the lists. In case you have to perform the membership check a single time, we can not do much about it, but in case we have to check it multiple times, it is better to cache the values in a set (given the values are hashable).</p>
<h1>Check a specific key</h1>
<p>In case you want to check a specific key, we can just lookup the corresponding value and check membership:</p>
<pre><code>if 'a' in myDict[0]:
    # do something
    pass
</code></pre>
<p>In case it is not certain if the key is present in <code>myDict</code>, and we want to return <code>False</code> in that case, we can use <code>.get(..)</code> and use <code>()</code> (the empty tuple) as a fallback value:</p>
<pre><code># will not error, but False in case key does not exists
if 'a' in myDict.get(0, ()):
    # do something
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>:</p>
<pre><code>any('a' in lst for lst in myDict.values())
</code></pre>
<p>This will stop the iteration and evaluate to <code>True</code> on the first find. <code>any</code> is the built-in short-cut for the following pattern:</p>
<pre><code>for x in y:
    if condition:
        return True
return False
# return any(condition for x in y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It always strikes me as strange when someone wants to scan the values of a dictionary. It's highly unefficient if done many times.</p>
<p>Instead, I'd build another dictionary, or a <code>set</code> for quick check:</p>
<pre><code>myDict = { 0 : ['a','b','c'],
           1 : ['d','e','f']}

rset = {x for v in myDict.values() for x in v}

print(rset)
</code></pre>
<p>gives:</p>
<pre><code>{'b', 'e', 'c', 'd', 'a', 'f'}
</code></pre>
<p>now:</p>
<pre><code>'a' in rset
</code></pre>
<p>is super fast and concise. Build as many sets &amp; dictionaries as you need on your original data set to get a fast lookup.</p>
</div>
<span class="comment-copy">Thanks, do you also know of a way to search just one key, for example, if I want to search for 'a' by only looking through key 0?</span>
<span class="comment-copy">@carmo: That's just <code>'a' in myDict[0]</code>.</span>
<span class="comment-copy">@ShadowRanger Ah okay, thank you.</span>
