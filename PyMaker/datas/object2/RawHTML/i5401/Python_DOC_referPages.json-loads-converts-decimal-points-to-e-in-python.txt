<div class="post-text" itemprop="text">
<p>Here is a response I am getting from server </p>
<pre><code>[{"type":"bid","price":0.00000026,"amount":737.15054457,"tid":200001915,"timestamp":1516036570}]
</code></pre>
<p>I am trying to parse this string into JSON using </p>
<pre><code>json_data = json.loads (req.text)
</code></pre>
<p>However when I try to read the 'price' using <code>json_data[0]['price']</code> the output is <code>2.6e-07</code></p>
<p>I tried parsing data as <code>json_data = json.loads (req.text, parse_float=Decimal)</code> but still no difference. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is the way python shows floats</p>
<pre><code>price = 0.00000026
print(price)
</code></pre>
<p>outputs: 2.6e-07
you can print it this way if you want to see it normal:</p>
<pre><code>print('{0:.8f}'.format(price))
</code></pre>
<p>ouputs: 0.00000026</p>
</div>
<div class="post-text" itemprop="text">
<p>Your value <em>is</em> parsed as a Decimal, it's just <em>shown</em> in an exponential form because it's more compact:</p>
<pre><code>&gt;&gt;&gt; x = json.loads('{"a":0.00000000000000026}', parse_float=decimal.Decimal)
&gt;&gt;&gt; repr(x)
"{'a': Decimal('2.6E-16')}"
</code></pre>
<p>You can see that the precision is preserved, though, unlike with a float:</p>
<pre><code>&gt;&gt;&gt; x['a'] + 1
Decimal('1.00000000000000026')
&gt;&gt;&gt; 1 + 2.6e-16
1.0000000000000002
</code></pre>
<p>So everything works as expected.</p>
</div>
<span class="comment-copy">That's how python represents the float value 0.00000026. It has nothing to do with JSON. What exactly is the problem? Are you trying to do something with that number that isn't working?</span>
<span class="comment-copy">You have the right <i>value</i>, your issue is only with the <i>representation when you print it</i>. Just pick a different format to print it with, like <code>print(format(json_data['price'], '.8f'))</code>.</span>
<span class="comment-copy">BTW storing a price as a float may have unpleasant implications if you want penny-perfect computations. Reading the value as a text and constructing a Python Decimal from it may make sense.</span>
<span class="comment-copy">Don't use <code>'{.:&lt;format&gt;}'.format(object)</code> when you use <code>format(object, '&lt;format&gt;')</code> instead, and save Python the bother of having to parse out the <code>{.:...}</code> part of out a string template. See the <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code> function documentation</a>.</span>
