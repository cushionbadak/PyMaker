<div class="post-text" itemprop="text">
<p>I'm writing a tool for <a href="http://donkirkby.github.io/live-py-plugin/" rel="nofollow noreferrer">live coding in Python</a>, and I want to monkeypatch matplotlib if the user imports it. It's kind of slow to import though, so I don't want to import it and monkeypatch it when the user doesn't import it.</p>
<p>I read through the import hooks <a href="https://docs.python.org/3/reference/import.html#searching" rel="nofollow noreferrer">documentation</a>, and I got this working in Python 3.</p>
<pre><code># scratch.py
from importlib import import_module
import sys

class PatchedModuleFinder(object):
    def find_module(self, fullname, path=None):
        if fullname not in ('matplotlib', 'matplotlib.pyplot'):
            return None
        is_after = False
        for finder in sys.meta_path:
            if not is_after:
                is_after = finder is self
                continue
            loader = finder.find_module(fullname, path)
            if loader is not None:
                return PatchedMatplotlibLoader(fullname, loader)


class PatchedMatplotlibLoader(object):
    def __init__(self, fullname, main_loader):
        self.fullname = fullname
        self.main_loader = main_loader

    def load_module(self, fullname):
        if self.main_loader is not None:
            module = self.main_loader.load_module(fullname)
        else:
            module = import_module(fullname)
            PatchedModuleFinder.is_desperate = False
        if fullname == 'matplotlib':
            module.use('Agg')
        elif fullname == 'matplotlib.pyplot':
            module.show = self.mock_show
        return module

    def mock_show(self, *args, **kwargs):
        print('mock_show:', args, kwargs)


sys.meta_path.insert(0, PatchedModuleFinder())

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

plt.plot([1, 2, 5])
plt.show()
</code></pre>
<p>This works fine for Python 3, but not for Python 2.7:</p>
<pre><code>$ .tox/py36/bin/python scratch.py
mock_show: () {}
$ .tox/py27/bin/python scratch.py
$ 
</code></pre>
<p>My tool runs on both Python 2.7 and Python 3.x, so how can I lazily monkeypatch a module in both versions?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is ugly, but it works. Hopefully someone can suggest a better option.</p>
<pre><code># scratch.py
from importlib import import_module
import sys

class PatchedModuleFinder(object):
    is_desperate = False

    def find_module(self, fullname, path=None):
        if fullname not in ('matplotlib', 'matplotlib.pyplot'):
            return None
        is_after = False
        for finder in sys.meta_path:
            if not is_after:
                is_after = finder is self
                continue
            loader = finder.find_module(fullname, path)
            if loader is not None:
                return PatchedMatplotlibLoader(fullname, loader)
        if sys.version_info &lt; (3, 0) and not PatchedModuleFinder.is_desperate:
            # Didn't find anyone to load the module, get desperate.
            PatchedModuleFinder.is_desperate = True
            return PatchedMatplotlibLoader(fullname, None)


class PatchedMatplotlibLoader(object):
    def __init__(self, fullname, main_loader):
        self.fullname = fullname
        self.main_loader = main_loader
        self.plt = None

    def load_module(self, fullname):
        if self.main_loader is not None:
            module = self.main_loader.load_module(fullname)
        else:
            module = import_module(fullname)
            PatchedModuleFinder.is_desperate = False
        if fullname == 'matplotlib':
            module.use('Agg')
        elif fullname == 'matplotlib.pyplot':
            self.plt = module
            module.show = self.mock_show
        return module

    def mock_show(self, *args, **kwargs):
        print('mock_show:', args, kwargs)


sys.meta_path.insert(0, PatchedModuleFinder())

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

plt.plot([1, 2, 5])
plt.show('x', 23, foo='bar')
</code></pre>
<p>Now it works in both:</p>
<pre><code>$ .tox/py36/bin/python scratch.py
mock_show: ('x', 23) {'foo': 'bar'}
$ .tox/py27/bin/python scratch.py
('mock_show:', ('x', 23), {'foo': 'bar'})
</code></pre>
</div>
