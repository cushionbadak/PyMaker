<div class="post-text" itemprop="text">
<p>Consider an object in java which implements <code>Serializable</code>. I want to send that object to a python code on TCP socket. I am serializing object and sending on TCP by using :</p>
<pre><code>//socket connection code
PySessionObject object = new PySessionObject();
object.setMethodCall(PyServerMethodConstant.SETATTRIBUTE);
object.setAttributeName(name);          
object.setAttributeValue(value);// value is of object type which also  implements Serializable  
os = sChannel.socket().getOutputStream();       
oos = new ObjectOutputStream(os);
oos.writeObject(object);
oos.flush();
os.flush();
//socket closing and exception handling
</code></pre>
<p>Now I want to convert this byte stream into object in python perform some operation on that object and send it back to java world and deserialize it again. For this purpose I come to about <a href="https://pypi.python.org/pypi/javaobj-py3" rel="nofollow noreferrer">javaobj-py3</a>, with this everything is fine until I pass <code>LinkedHashMap</code> in <code>setAttributeValue()</code>. In Python I am doing this:</p>
<pre><code>total_data=b''
    while True:            
        data = self.clientsocket.recv(8192) 
        if not data: break
        total_data += data
pyobj = javaobj.loads(total_data)
</code></pre>
<p>For this I am getting exception as:</p>
<blockquote>
<p>RuntimeError: Unknown OpCode in the stream: 0x8 (at offset 0x14C)</p>
</blockquote>
<p>What will be cause? Is it like opcodes are not found for "something"? Is anyone can suggest any other idea to convert byte stream send from java into object in python world perform some operation on that object and send it back to java world and deserialize it again.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the object to a JSON string and then send over the wire.</p>
<p>To convert object to json</p>
<pre><code>new GSONBuilder().create().toJSON(obj);
</code></pre>
<p>To convert json to object</p>
<pre><code>new GSONBuilder().create().fromJSON(jsonString, YouObject.class);
</code></pre>
<p>I prefer using <a href="https://github.com/google/gson" rel="nofollow noreferrer">GSON</a> for converting a object to <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json</a> and reverse in java. In python you can use json library. The methods are 
<code>json.loads(string)</code> and <code>json.dumps(object)</code></p>
</div>
<span class="comment-copy">I had tried thia approach before trying the explained one. Problem with this approach is if I pass jsonstring to <code>fromJSON()</code> then typecastexception is occurred when i access and type cast <code>attributeValue</code> field in passed object.</span>
<span class="comment-copy">Can you paste your code</span>
