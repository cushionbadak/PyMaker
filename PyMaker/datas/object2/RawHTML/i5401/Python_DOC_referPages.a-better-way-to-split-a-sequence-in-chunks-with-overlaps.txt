<div class="post-text" itemprop="text">
<p>I need a function to split an iterable into chunks with the option of having an overlap between the chunks.</p>
<p>I wrote the following code, which gives me the correct output but that is quite inefficient (slow). I can't figure out how to speed it up. Is there a better method?</p>
<pre><code>def split_overlap(seq, size, overlap):
    '''(seq,int,int) =&gt; [[...],[...],...]
    Split a sequence into chunks of a specific size and overlap.
    Works also on strings! 

    Examples:
        &gt;&gt;&gt; split_overlap(seq=list(range(10)),size=3,overlap=2)
        [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]

        &gt;&gt;&gt; split_overlap(seq=range(10),size=3,overlap=2)
        [range(0, 3), range(1, 4), range(2, 5), range(3, 6), range(4, 7), range(5, 8), range(6, 9), range(7, 10)]

        &gt;&gt;&gt; split_overlap(seq=list(range(10)),size=7,overlap=2)
        [[0, 1, 2, 3, 4, 5, 6], [5, 6, 7, 8, 9]]
    '''
    if size &lt; 1 or overlap &lt; 0:
        raise ValueError('"size" must be an integer with &gt;= 1 while "overlap" must be &gt;= 0')
    result = []
    while True:
        if len(seq) &lt;= size:
            result.append(seq)
            return result
        else:
            result.append(seq[:size])
            seq = seq[size-overlap:]
</code></pre>
<p><strong>Testing results so far:</strong></p>
<pre><code>l = list(range(10))
s = 4
o = 2
print(split_overlap(l,s,o))
print(list(split_overlap_jdehesa(l,s,o)))
print(list(nwise_overlap(l,s,o)))
print(list(split_overlap_Moinuddin(l,s,o)))
print(list(gen_split_overlap(l,s,o)))
print(list(itr_split_overlap(l,s,o)))

[[0, 1, 2, 3], [2, 3, 4, 5], [4, 5, 6, 7], [6, 7, 8, 9]]
[(0, 1, 2, 3), (2, 3, 4, 5), (4, 5, 6, 7), (6, 7, 8, 9)]
[(0, 1, 2, 3), (2, 3, 4, 5), (4, 5, 6, 7), (6, 7, 8, 9), (8, 9, None, None)] #wrong
[[0, 1, 2, 3], [2, 3, 4, 5], [4, 5, 6, 7], [6, 7, 8, 9], [8, 9]] #wrong
[[0, 1, 2, 3], [2, 3, 4, 5], [4, 5, 6, 7], [6, 7, 8, 9]]
[(0, 1, 2, 3), (2, 3, 4, 5), (4, 5, 6, 7), (6, 7, 8, 9)]

%%timeit
split_overlap(l,7,2)
718 ns ± 2.36 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

%%timeit
list(split_overlap_jdehesa(l,7,2))
4.02 µs ± 64.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

%%timeit
list(nwise_overlap(l,7,2))
5.05 µs ± 102 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

%%timeit
list(split_overlap_Moinuddin(l,7,2))
3.89 µs ± 78.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

%%timeit
list(gen_split_overlap(l,7,2))
1.22 µs ± 13.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

%%timeit
list(itr_split_overlap(l,7,2))
3.41 µs ± 36.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
<p><strong>With longer list as input:</strong></p>
<pre><code>l = list(range(100000))

%%timeit
split_overlap(l,7,2)
4.27 s ± 132 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

%%timeit
list(split_overlap_jdehesa(l,7,2))
31.1 ms ± 495 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

%%timeit
list(nwise_overlap(l,7,2))
5.74 ms ± 66 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

%%timeit
list(split_overlap_Moinuddin(l,7,2))
16.9 ms ± 89.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

%%timeit
list(gen_split_overlap(l,7,2))
4.54 ms ± 22.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

%%timeit
list(itr_split_overlap(l,7,2))
19.1 ms ± 240 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
<p>From other tests (not reported here), it turned out that for small lists <code>len(list) &lt;= 100</code>, my original implementation <code>split_overlap()</code> is the fastest. But for anything larger than that, <code>gen_split_overlap()</code> is the most efficient solution so far.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes readability counts vs. speed. A simple generator that iterates over indices, producing slices gets the job done in reasonable time:</p>
<pre><code>def gen_split_overlap(seq, size, overlap):        
    if size &lt; 1 or overlap &lt; 0:
        raise ValueError('size must be &gt;= 1 and overlap &gt;= 0')

    for i in range(0, len(seq) - overlap, size - overlap):            
        yield seq[i:i + size]
</code></pre>
<p>If you want to handle potentially infinite iterables, you just have to keep <em>overlap</em> items from the previous yield and slice <em>size - overlap</em> new items:</p>
<pre><code>def itr_split_overlap(iterable, size, overlap):
    itr = iter(iterable)

    # initial slice, in case size exhausts iterable on the spot
    next_ = tuple(islice(itr, size))
    yield next_
    # overlap for initial iteration
    prev = next_[-overlap:] if overlap else ()

    # For long lists the repeated calls to a lambda are slow, but using
    # the 2-argument form of `iter()` is in general a nice trick.
    #for chunk in iter(lambda: tuple(islice(itr, size - overlap)), ()):

    while True:
        chunk = tuple(islice(itr, size - overlap))

        if not chunk:
            break

        next_ = (*prev, *chunk)
        yield next_

        # overlap == 0 is a special case
        if overlap:
            prev = next_[-overlap:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>If it is must to meet the criterion of the chunk size</h1>
<p>You can create you custom function using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><strong><code>zip</code></strong></a> and a <em>list comprehension</em> to achieve this as:</p>
<pre><code>def split_overlap(seq, size, overlap):
     return [x for x in zip(*[seq[i::size-overlap] for i in range(size)])]
</code></pre>
<p><strong>Sample Run:</strong></p>
<pre><code># Chunk size: 3
# Overlap: 2 
&gt;&gt;&gt; split_overlap(list(range(10)), 3, 2)
[(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9)]

# Chunk size: 3
# Overlap: 1
&gt;&gt;&gt; split_overlap(list(range(10)), 3, 1)
[(0, 1, 2), (2, 3, 4), (4, 5, 6), (6, 7, 8)]

# Chunk size: 4
# Overlap: 1
&gt;&gt;&gt; split_overlap(list(range(10)), 4, 1)
[(0, 1, 2, 3), (3, 4, 5, 6), (6, 7, 8, 9)]

# Chunk size: 4
# Overlap: 2
&gt;&gt;&gt; split_overlap(list(range(10)), 4, 2)
[(0, 1, 2, 3), (2, 3, 4, 5), (4, 5, 6, 7), (6, 7, 8, 9)]

# Chunk size: 4
# Overlap: 1
&gt;&gt;&gt; split_overlap(list(range(10)), 4, 3)
[(0, 1, 2, 3), (1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8), (6, 7, 8, 9)]
</code></pre>
<h1>If remaining chunks from the end not meeting the criterion of chunk size are also desired</h1>
<p>If you want to display the chunks even if the doesn't meet the pre-requisite of the chunk size, then you should be using the <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><strong><code>itertools.zip_longest</code></strong></a> in Python 3.x (which is equivalent of <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><strong><code>itertools.izip_longest</code></strong></a> in Python 2.x). </p>
<p>Also, this is <strong>variant to <em>yield</em> the values dynamically</strong>, which is more efficient in terms of memory in case you have huge list:</p>
<pre><code># Python 3.x
from itertools import zip_longest as iterzip

# Python 2.x
from itertools import izip_longest as iterzip

# Generator function
def split_overlap(seq, size, overlap):
    for x in iterzip(*[my_list[i::size-overlap] for i in range(size)]):
        yield tuple(i for i in x if i!=None) if x[-1]==None else x
        #      assuming that your initial list is  ^
        #      not containing the `None`, use of `iterzip` is based
        #      on the same assumption  
</code></pre>
<p>Sample Run:</p>
<pre><code>#     v  type-cast to list in order to display the result, 
#     v  not required during iterations
&gt;&gt;&gt; list(split_overlap(list(range(10)),7,2))
[[0, 1, 2, 3, 4, 5, 6], [5, 6, 7, 8, 9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your approach is about as good as it will get, you need to poll the sequence/iterable and build the chunks, but in any case, here is a lazy version that works with iterables and uses a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>deque</code></a> for performance:</p>
<pre><code>from collections import deque

def split_overlap(iterable, size, overlap=0):
    size = int(size)
    overlap = int(overlap)
    if size &lt; 1 or overlap &lt; 0 or overlap &gt;= size:
        raise ValueError()
    pops = size - overlap
    q = deque(maxlen=size)
    for elem in iterable:
        q.append(elem)
        if len(q) == size:
            yield tuple(q)
            for _ in range(pops):
                q.popleft()
    # Yield final incomplete tuple if necessary
    if len(q) &gt; overlap:
        yield tuple(q)

&gt;&gt;&gt; list(split_overlap(range(10), 4, 2))
[(0, 1, 2, 3), (3, 4, 5, 6), (6, 7, 8, 9)]
&gt;&gt;&gt; list(split_overlap(range(10), 5, 2))
[(0, 1, 2, 3, 4), (3, 4, 5, 6, 7), (6, 7, 8, 9)]
</code></pre>
<p>Note: as it is, the generator yields one last incomplete tuple if the input does not produce an exact number of chunks (see second example). If you want to avoid this remove the final <code>if len(q) &gt; overlap: yield tuple(q)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can try using  </p>
<pre><code>itertools.izip(...)
</code></pre>
<p>which is good for large lists, because it returns an iterator instead of a list.</p>
<p>like this:  </p>
<pre><code>import itertools
def split_overlap(iterable, size, overlap):
    '''(iter,int,int) =&gt; [[...],[...],...]
    Split an iterable into chunks of a specific size and overlap.
    Works also on strings! 

    Examples:
        &gt;&gt;&gt; split_overlap(iterable=list(range(10)),size=3,overlap=2)
        [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]

        &gt;&gt;&gt; split_overlap(iterable=range(10),size=3,overlap=2)
        [range(0, 3), range(1, 4), range(2, 5), range(3, 6), range(4, 7), range(5, 8), range(6, 9), range(7, 10)]
    '''
    if size &lt; 1 or overlap &lt; 0:
        raise ValueError('"size" must be an integer with &gt;= 1 while "overlap" must be &gt;= 0')
    result = []
    for i in itertools.izip(*[iterable[i::size-overlap] for i in range(size)]):
        result.append(i)
    return result
</code></pre>
</div>
<span class="comment-copy">Do you actually need to build and return a list of lists? The pattern in <code>itertools</code> is to return an iterator of tuples, and evaluate lazily. Anyway, if this is <b>working code</b> that you think could be improved, maybe see <a href="https://codereview.stackexchange.com">Code Review</a>.</span>
<span class="comment-copy">An iterator would be fine as well</span>
<span class="comment-copy">Actually it's not quite working, at least not as documented, because it only works on <i>sequences</i>, not iterables.</span>
<span class="comment-copy">range() is an iterable</span>
<span class="comment-copy">When you say "quite inefficient," what do you mean?</span>
<span class="comment-copy"><code>itr_split_overlap()</code> doesn't return the correct result</span>
<span class="comment-copy">I was so deeply involved with <code>zip</code> that my mind* didn't thought of doing the direct slicing (+1)</span>
<span class="comment-copy">I like that one!</span>
<span class="comment-copy">Though it doesn't return the expected result, with an uneven split. <code>list(split_overlap([0]*10,7,2)) == [(0, 0, 0, 0, 0, 0, 0)]</code> <b>!=</b> <code>[(0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0)]</code></span>
<span class="comment-copy">@JamesSchinner Correct, because the next chunk doesn't meet the pre-requisite of the size to be <code>7</code> in this case. After getting the first chunk, remaining elements will be <code>3</code> and with allowed over lap of <code>2</code>, elements eligible for second chunk are <code>5</code>. But since the required chunk size is <code>7</code>, it is skipped</span>
<span class="comment-copy">I only mention it because, OP made the same comment about my answer. Easy fix though, <code>zip_longest</code></span>
<span class="comment-copy">@JamesSchinner In that case OP is wrong about the their comment. It is a expected behavior for the program based on the requirement mentioned in the question.</span>
<span class="comment-copy">You code does not produce the correct output. Try <code>print(split_overlap_Aviad(list(range(10),7,2))</code></span>
