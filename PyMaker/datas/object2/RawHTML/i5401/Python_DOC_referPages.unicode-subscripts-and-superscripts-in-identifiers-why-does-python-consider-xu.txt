<div class="post-text" itemprop="text">
<p>Python allows unicode identifiers.  I defined <code>Xᵘ = 42</code>, expecting <code>XU</code> and <code>Xᵤ</code> to result in a <code>NameError</code>.  But in reality, when I define <code>Xᵘ</code>, Python (silently?) turns <code>Xᵘ</code> into <code>Xu</code>, which strikes me as somewhat of an unpythonic thing to do.  Why is this happening?</p>
<pre><code>&gt;&gt;&gt; Xᵘ = 42
&gt;&gt;&gt; print((Xu, Xᵘ, Xᵤ))
(42, 42, 42)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python converts all identifiers to their <a href="https://en.wikipedia.org/wiki/Unicode_equivalence#Normalization" rel="noreferrer">NFKC normal form</a>; from the <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="noreferrer"><em>Identifiers</em> section</a> of the reference documentation:</p>
<blockquote>
<p>All identifiers are converted into the normal form NFKC while parsing; comparison of identifiers is based on NFKC.</p>
</blockquote>
<p>The NFKC form of both the super and subscript characters is the lowercase <code>u</code>:</p>
<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.normalize('NFKC', 'Xᵘ Xᵤ')
'Xu Xu'
</code></pre>
<p>So in the end, all you have is a single identifier, <code>Xu</code>:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile('Xᵘ = 42\nprint((Xu, Xᵘ, Xᵤ))', '', 'exec'))
  1           0 LOAD_CONST               0 (42)
              2 STORE_NAME               0 (Xu)

  2           4 LOAD_NAME                1 (print)
              6 LOAD_NAME                0 (Xu)
              8 LOAD_NAME                0 (Xu)
             10 LOAD_NAME                0 (Xu)
             12 BUILD_TUPLE              3
             14 CALL_FUNCTION            1
             16 POP_TOP
             18 LOAD_CONST               1 (None)
             20 RETURN_VALUE
</code></pre>
<p>The above disassembly of the compiled bytecode shows that the identifiers have been normalised during compilation; this happens during parsing, any identifiers are normalised when creating the AST (Abstract Parse Tree) which the compiler uses to produce bytecode.</p>
<p>Identifiers are normalized to avoid many potential 'look-alike' bugs, where you'd otherwise could end up using both <code>ﬁnd()</code> (using the <a href="https://codepoints.net/U+FB01" rel="noreferrer"><em>U+FB01 LATIN SMALL LIGATURE FI</em></a> character followed by the ASCII <code>nd</code> characters) and <code>find()</code> and wonder why your code has a bug.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python, as of version 3.0, supports non-ASCII identifiers. When parsing the identifiers are converted using NFKC normalization and any identifiers where the normalized value is the same are considered the same identifier.</p>
<p>See PEP 3131 for more details. <a href="https://www.python.org/dev/peps/pep-3131/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-3131/</a></p>
</div>
<span class="comment-copy">PyCharm (2013.2.3) flags the <code>Xu, Xᵤ</code> as <code>unresolved references</code> but the code runs nonetheless</span>
<span class="comment-copy">@Ev.Kounis: that'd be a bug in PyCharm, they are forgetting to normalise to the NFKC form.</span>
<span class="comment-copy">This might be a stupid question but should there not be a step in the <code>dis</code> where the name is converted to its NFKC form? In other words, should it not take a <i>tad</i> longer to define a value like that?</span>
<span class="comment-copy">@Ev.Kounis: no, because the identifier has been normalised <i>before</i> bytecode is produced, when parsing (a stage that converts tokens into an AST, which the compiler then uses to produce bytecode).</span>
<span class="comment-copy">I see.  Yet normalisation does not prevent <code>a٨ = 42; a۸ = 43; a٨ == a۸</code> resulting in <code>False</code>…</span>
<span class="comment-copy">@gerrit: 'many potential' is not <i>all</i> potential bugs. See the <a href="https://codepoints.net/U+0668" rel="nofollow noreferrer">codepoints.net page for <i>U+0668 ARABIC-INDIC DIGIT EIGHT</i></a> for more options to confuse that codepoint with.</span>
<span class="comment-copy">@gerrit: there is a good reason that the Python style guide recommends all variable names to be ASCII-only English terms.</span>
