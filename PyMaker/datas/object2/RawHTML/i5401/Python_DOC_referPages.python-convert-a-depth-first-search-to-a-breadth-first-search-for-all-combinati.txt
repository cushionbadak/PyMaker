<div class="post-text" itemprop="text">
<p>I have a simple recursive function that provides a depth first search of each possible combination of a list of options:</p>
<pre><code>def twoCharacters_dfs(options, used):
    for i in range(len(options)):
        used.append(options.pop(0))
        print("used=", used)
        twoCharacters_dfs(options, used)
    if len(used) == 0:
        return
    options.append(used.pop())

twoCharacters_dfs(['q', 'w', 'e', 'r'], [])
</code></pre>
<p>The ouput (shortened due to length) looks as follows:</p>
<pre><code>used= ['q']
used= ['q', 'w']
used= ['q', 'w', 'e']
used= ['q', 'w', 'e', 'r']
used= ['q', 'w', 'r']
used= ['q', 'w', 'r', 'e']
used= ['q', 'e']
used= ['q', 'e', 'r']
used= ['q', 'e', 'r', 'w']
used= ['q', 'e', 'w']
used= ['q', 'e', 'w', 'r']
....
used= ['w']
....
used= ['e']
....
used= ['r']
....
</code></pre>
<p>And that is all well and good and works how i want it. But I am interested in converting this from depth first to breadth first so the output looks more like:</p>
<pre><code>used= ['q']
used= ['w']
used= ['e']
used= ['r']
used= ['q', 'w']
used= ['q', 'e']
used= ['q', 'r']
used= ['w', 'q']
used= ['w', 'e']
used= ['w', 'r']
....
</code></pre>
<p>I have been somewhat able (only a hard-coded fixed length list) to do it iteratively, but desire a recursive solution so it can work for any length of options. I am also purposely avoiding python libraries that provide the functionality i seek because i would like to understand how things work and build my own stuff as a learning exercise. </p>
<p>I feel like there is a simple solution, but i am having trouble conceptualizing the breadth first algorithm into my code.</p>
<p><strong>UPDATE</strong></p>
<p>Before attempting a recursive BFS solution i wanted to create an iterative BFS solution as it appears to be easier to implement. As it turns out, i am also having trouble doing that.</p>
<pre><code>def twoCharacters_bfs_iterative(options, used):
    for option in options:
        print("using option = ", option)

    for option1 in options:
        list2 = options[:]
        list2.remove(option1)
        for option2 in list2:
            print("using option = ", option1, option2)

    for option1 in options:
        list2 = options[:]
        list2.remove(option1)
        for option2 in list2:
            list3 = list2[:]
            list3.remove(option2)
            for option3 in list3:
                print("using option = ", option1, option2, option3)
</code></pre>
<p>This achieves my desired output (listed above), but only works for a set where i know the length. I want to expand it for a list of an arbitrary length, but am having trouble doing that. I imagine if I can get the iterative solution working, a recursive solution isn't far behind.</p>
</div>
<div class="post-text" itemprop="text">
<p>Edit: I did't notice from the example that all permutations was required. Follows a function that uses a list as a queue:</p>
<pre><code>def bfs(options):
    queue = [([c], [*options[:i], *options[i+1:]]) for i,c in enumerate(options)]
    while len(queue) &gt; 0:
        head, tail = queue[0]
        print(head)
        queue.extend([([*head, c], [*tail[:i], *tail[i+1:]]) for i,c in enumerate(tail)])
        del queue[0]
</code></pre>
<p>Which works like this (64 lines, truncated):</p>
<pre><code>&gt;&gt;&gt; bfs(['q','w','e','r'])
['q']
['w']
['e']
['r']
['q', 'w']
['q', 'e']
...
['r', 'w']
['r', 'e']
['q', 'w', 'e']
['q', 'w', 'r']
['q', 'e', 'w']
...
['r', 'q', 'e', 'w']
['r', 'w', 'q', 'e']
['r', 'w', 'e', 'q']
['r', 'e', 'q', 'w']
['r', 'e', 'w', 'q']
</code></pre>
<p>Also,</p>
<pre><code>def bfs(options):
    queue = [([c], [*options[:i], *options[i+1:]]) for i,c in enumerate(options)]
    for head, tail in queue:
        queue.extend([([*head, c], [*tail[:i], *tail[i+1:]]) for i,c in enumerate(tail)])
    return [head for head, tail in queue]
</code></pre>
<p>this version returns a list instead of printing.</p>
<hr/>
<p><em>Follows the previous answer, not considering permutations</em>:</p>
<hr/>
<p>As already said by others in the comments, it's not natural. Follows a "recursive" function:</p>
<pre><code>def bfs(options, level=0):
    if level == 0:
        for c in options:
            print([c])
        for i in range(1,len(options)):
            bfs(options, i)
    else:
        for i,c in enumerate(options):
            for j,g in enumerate(options[i+1:]):
                if i+1+j+level &lt;= len(options):
                    print([c,*options[i+1+j:i+1+j+level]])
</code></pre>
<p>The <code>*</code> in the last line requires Python3, but you can remove that.</p>
<p>The expected output is:</p>
<pre><code>['q']
['w']
['e']
['r']
['q', 'w']
['q', 'e']
['q', 'r']
['w', 'e']
['w', 'r']
['e', 'r']
['q', 'w', 'e']
['q', 'e', 'r']
['w', 'e', 'r']
['q', 'w', 'e', 'r']
</code></pre>
<p>Another version:</p>
<pre><code>def bfs(options, level=0):
    for i,c in enumerate(options):
        for j,g in enumerate(options[i+1:]):
            if i+1+j+level &lt;= len(options):
                print([c,*options[i+1+j:i+1+j+level]])
            if level == 0:
                break
    if level &lt; len(options):
        bfs(options, level + 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am posting an answer for my own question to offer some clarity regarding depth first search and breadth first search. My initial goal was a recursive breadth first version of my recursive depth first function. This came from a lack of understanding of the fundamental difference between DFS and BFS: DFS uses a stack and BFS uses a queue. (Thanks to @Patrick Haugh for the insight as well as this post: <a href="https://stackoverflow.com/questions/2549541/performing-breadth-first-search-recursively">Performing Breadth First Search recursively</a>).</p>
<p>The fact that DFS uses a stack lends itself well with a recursive function because you can use the call stack as your operating stack. But This doesn't work for the queue style of a BFS. Breadth First Search can be done recursively, but ends up resembling a bit of a mangled depth first search. It is much cleaner and intuitive to keep BF as an iterative function.</p>
<p>Never a fan of copy/pasting code without understanding why it works, @Matteo T. correct answer guided me to the iterative BFS solution without enumeration which i am currently implementing:</p>
<pre><code>def bfs_iterative(options):
    queue = [[item] for item in options]
    while queue:
        using = queue.pop(0)
        print(using)
        remaining = [item for item in options if item not in using]
        extension = []
        for item in remaining:
            using.append(item)
            extension.append(using[:])
            using.pop()
        queue.extend(extension)
</code></pre>
</div>
<span class="comment-copy">I don't know if BFS makes sense as a recursive function.  The basic difference between DFS and BFS is that DFS uses a stack to track unvisited nodes and BFS uses a queue.  Recursive DFS implementations are basically just using the call stack as that stack. Try writing a non-recursive DFS (hint: python lists can be treated like stacks), and then try replacing the stack in that implementation with a queue (You can use <a href="https://docs.python.org/3/library/queue.html#queue.Queue" rel="nofollow noreferrer"><code>queue.Queue</code></a> for a FIFO queue)</span>
<span class="comment-copy">@PatrickHaugh That is a good tip. wanted to flex my recursive muscles, but going to a non-recursive DFS then from there to a non-recursive BFS is a good learning process for me</span>
<span class="comment-copy">Agree with @PatrickHaugh 100%, implementing a BFS as a recursive function would require jumping through some complicated hoops.  BFS is much more naturally implemented with loops.</span>
<span class="comment-copy">That insight about DFS "using the call stack" as the data structure itself is great.</span>
<span class="comment-copy">@Turksarama: It's not really complicated hoops; there's languages where recursion is the only available looping construct, and they obviously still can implement BFS. The problem is more that Python does not (<a href="https://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion">and never will</a>) support Tail Call Optimisation, so you can't do it without wasting a ton of memory.</span>
<span class="comment-copy">Brilliant.  I had the same concept of using a level but got stuck on trying to implement a separate dict/list similar to OP's DFS.  Now I can sleep... thanks.</span>
<span class="comment-copy">This is a good start to the solution, but one thing: Order is relevant, so I need every possible combination. For example: [q,w] and [w,q] should appear in the list. The key i think i was missing was tracking the level. I will try to build off this today...</span>
<span class="comment-copy">take a look at the edit: is it what you were looking for?</span>
<span class="comment-copy">@MatteoT. Yes, that is more of less what I am looking for. It is not recursive, but after reading more about DFS and BFS i am content with using an iterative solution as a recursive BFS doesn't make a whole lot of sense. I ended up modifying your solution for more my coding style but yours works and will be marked as such. Thanks!</span>
