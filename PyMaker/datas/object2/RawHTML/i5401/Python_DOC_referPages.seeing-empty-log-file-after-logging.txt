<div class="post-text" itemprop="text">
<p>I want to create a log file in Python 3.6 &amp; save the time for different operations.</p>
<p>So I used this code:</p>
<pre><code>def create_logger(logFile, fileLogLevel, streamLogLevel):
    # create logger for "Sample App"
    logger = logging.getLogger('Seller Explosion')
    logger.setLevel(logging.INFO)

    # create file handler which logs WARNING messages
    fh = logging.FileHandler(logFile, mode='w')
    fh.setLevel(fileLogLevel)

    # create console handler with a higher log level
    ch = logging.StreamHandler(stream=sys.stdout)
    ch.setLevel(streamLogLevel)

    # create formatter and add it to the handlers
    formatter = logging.Formatter('[%(asctime)s] %(levelname)8s --- %(message)s ' +
                                  '(%(filename)s:%(lineno)s)', datefmt='%Y-%m-%d %H:%M:%S')
    fh.setFormatter(formatter)
    ch.setFormatter(formatter)

    # add the handlers to the logger
    logger.addHandler(ch)
    logger.addHandler(fh)

    return logger
</code></pre>
<p>While executing the code I'm using following command</p>
<pre><code>logger = create_logger('&lt;path to my folder&gt;/TimeLog.log', logging.WARNING, logging.WARNING)
startTime=time.ctime()
logTime="Start Time for uploading: "+startTime
logger.info(logTime)
</code></pre>
<p>But while going to my path, I'm seeing that <code>TimeLog.log</code> is a blank file with size 0 byte. Can you please suggest me what error I'm making?</p>
</div>
<div class="post-text" itemprop="text">
<p>You set your handlers to filter on the <code>WARNING</code> level:</p>
<pre><code>logger = create_logger(..., logging.WARNING, logging.WARNING)
</code></pre>
<p>and</p>
<pre><code>fh.setLevel(fileLogLevel)
# ...
ch.setLevel(streamLogLevel)
</code></pre>
<p>then logged an <code>INFO</code> level message. <code>INFO</code> is a <em>lower</em>, <em>less severe</em> level from <code>WARNING</code>, so is filtered out by the handler.</p>
<p>You need to log at <code>WARNING</code> level or higher (so <code>WARNING</code>, <code>ERROR</code> or <code>CRITICAL</code>, or a numeric value of 30 and up), <em>or</em> configure your handlers to handle lower levels (so <code>INFO</code>, <code>DEBUG</code>, or <code>NOTSET</code>, or a numeric value of 20 or below).</p>
<p>For example, <code>logger.warn(logTime)</code> causes data to be added to your log file. And if you used <code>logging.INFO</code> for the second argument to <code>create_logger()</code>, the <code>logger.info()</code> call would also have the same effect.</p>
<p>From the <a href="https://docs.python.org/3/library/logging.html#logging.Handler.setLevel" rel="nofollow noreferrer"><code>Handler.setLevel()</code> method documentation</a>:</p>
<blockquote>
<p>Sets the threshold for this handler to level. <strong>Logging messages which are less severe than level will be ignored</strong>. When a handler is created, the level is set to <code>NOTSET</code> (which causes all messages to be processed.</p>
</blockquote>
<p>Bold emphasis mine; also see the <a href="https://docs.python.org/3/library/logging.html#levels" rel="nofollow noreferrer"><em>Logging levels</em> section</a> for their ordering and numeric values.</p>
<p>Note that creating a log message with a timestamp <em>in the log message</em> is rather redundant, as your log format already includes a timestamp:</p>
<pre><code>&gt;&gt;&gt; startTime = time.ctime()
&gt;&gt;&gt; logTime = "Start Time for uploading: " + startTime
&gt;&gt;&gt; logger.warn(logTime)
[2018-01-17 16:36:20]  WARNING --- Start Time for uploading: Wed Jan 17 16:36:20 2018 (&lt;stdin&gt;:1)
</code></pre>
</div>
