<div class="post-text" itemprop="text">
<p>Ok, I'm aware that it's probably not the best way to edit a string with regex expressions in loops. Just for the sake of interest: How would I have to build a loop, that executes a regex pattern as long as it matches, run in a loop and stop when it doesn't hit anymore? Im doing this in python.</p>
<pre><code>match = re.search(r'pattern, repl, str)
while match (is True, == True?):
   sub = re.sub(r'pattern, repl, str)
else:
   Do something else
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>match is not None</code>, since <code>match</code> returns <code>None</code> in case of no match, according to <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">the docs</a>. But you're not updating <code>match</code> in the loop. Did you mean something like:</p>
<pre><code>match = re.search(pattern, repl, str)
while match is not None:
    str = re.sub(pattern, repl, str)
    match = re.search(pattern, str)
</code></pre>
<p>(Note that <code>search</code> takes no <code>repl</code> argument)</p>
</div>
<span class="comment-copy"><code>re.sub</code> normally performs the substitution on all non-overlapping matches it finds (although you can limit it by passing a <code>count</code> arg), so it is rather unusual to put it in a loop like that, although i guess it makes sense if the result of substitution creates more substrings which match the pattern. However, as nnnmmm points out, you aren't updating <code>match</code> inside the loop, so it will either never run, or it will be an infinite loop.</span>
<span class="comment-copy">The goal is to delete line-endings from within p-tags in html. So I search anything from &lt;p&gt; to \n, delete \n and repeat the regex. It works for my purposes when I just repeat the same regex-line again and again. But there should be a loop-solution, too, I think.</span>
<span class="comment-copy">@Pjoern if you want to <i>correctly</i> handle html, use a html parser.</span>
<span class="comment-copy">Yup, this works. Of course, you have to put re.search in the loop.</span>
