<div class="post-text" itemprop="text">
<p>I got the task to alternately combine the letters of two strings with the same length.</p>
<p>For example:</p>
<pre><code>Inputstring 1: "acegi"

Inputstring 2: "bdfhj"

Outputstring: "abcdefghij"
</code></pre>
<p>And I got the following Problem when I run my code. </p>
<pre><code>Traceback (most recent call last):  
  File "...", line 14, in &lt;module&gt;
    x =x+f
TypeError: must be str, not int
</code></pre>
<p>I think every relevant variable is a <code>String</code>.</p>
<pre><code>s=str(input("Input first String:"))
v=str(input("Input second String:"))
x=""
c=1
z=""
f=""
laenge=len(s)
lenge=len(v)

for f in range(laenge):

    if f in range(c,c+1):
        x =x+f
for z in range(lenge):

    if z in range(c,c+1):
        x=x+z
c=c+1

print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One of the first things you should learn when programming is to use meaningful variable names, not cryptic, 1-letter names. </p>
<p>Your code is not alternating between the two input strings. You're looping through the first string, then looping through the second string, and never repeating. </p>
<p>I'm not sure what the point of the <code>c</code> variable is. You set it to <code>1</code> at the beginning of the script, then add 1 to it later, but then the script ends. Was there supposed to be another loop around all that code?</p>
<p>The loop that checks if <code>f</code> is in <code>range(c, c+1)</code> could just be <code>f = c</code>, there's no point to looping.</p>
<p>The error is coming from</p>
<pre><code>x = x + f
</code></pre>
<p>because <code>x</code> is a string and <code>f</code> is an <code>int</code>. I suspect you wanted to do <code>x = x + s[f]</code>.</p>
<p>The whole thing can be simplified greatly.</p>
<pre><code>string1 = input("Enter string 1: ")
len1 = len(string1)
string2 = input("enter string 2: ")
len2 = len(string2)
if len1 != len2:
    print("Inputs must be the same length")
else:
    result = ""
    for i in range(len1):
        result += string1[i]
        result += string2[i]
    print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it in one line using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code></a>.</p>
<pre><code>out1 = ''.join(''.join(f for f in tup) for tup in zip(inp1, inp2))
</code></pre>
<p><strong>or</strong> the more functional-style:</p>
<pre><code>out1 = ''.join(map(''.join, zip(inp1, inp2)))  # kudos @Coldspeed
</code></pre>
<p>which both print</p>
<pre><code>abcdefghij
</code></pre>
<hr/>
<p>Braking the code down:</p>
<ul>
<li><p><code>zip()</code></p>
<pre><code>pairs = list(zip(inp1, inp2))
print(pairs )  # [('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j')]
</code></pre></li>
<li><p><code>.join()</code></p>
<pre><code>temp = []
for sub in pairs:
    temp.append(''.join(sub))
print(temp)  # ['ab', 'cd', 'ef', 'gh', 'ij']
</code></pre></li>
<li><p><code>.join()</code> again</p>
<pre><code>out1 = ''.join(temp)
print(out1)  # abcdefghij
</code></pre></li>
</ul>
<hr/>
<p>Finally, and for your entertainment and learning only, two additional, more <em>old-school</em> approaches:</p>
<pre><code>out1 = ''
for i in range(len(inp1)):
    out1 += inp1[i] + inp2[i]
</code></pre>
<p>and</p>
<pre><code>out1 = ''
for i, c in enumerate(inp1):
    out1 += c + inp2[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have several problems in your code. The one that is the most important is your naming problem. Give meaningful names to your variables.</p>
<p>Now, to the logic. You need to <strong>iterate</strong> through your strings at the same time, or use an index on both at the same time, and not one after the other.</p>
<p>You could do as such, for a more pythonic way of doing this.</p>
<pre><code>first = input("Your first string.")
second = input("Your second string.")

if len(first) != len(second):
    print 'Bad length for the inputs.'
else:
    newString = ""
    for s1, s2 in zip(first, second):
        newString += s1 + s2
    print newString
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One can simply use <code>map</code> with <code>join</code> to get desired result: </p>
<pre><code>"".join(map(lambda x,y: x+y, astr, bstr))
</code></pre>
<p><code>zip</code> in not needed here since 2 strings/lists can be provided to <code>map</code> which has a lambda function that takes 2 arguments. Also, <code>+</code> symbol works to concatenate 2 strings here. </p>
</div>
<div class="post-text" itemprop="text">
<p>Get a and b with input or however you want. No need to copy that. The point is the code.</p>
<pre><code>a = 'acegi'
b = 'bdfhj'

c = ''
for i in range(len(a)):
    c += a[i] + b[i]

print(c)
</code></pre>
<p>Result is:</p>
<pre><code>abcdefghij
</code></pre>
</div>
<span class="comment-copy"><code>input()</code> returns a string, you don't need to use <code>str()</code> around it.</span>
<span class="comment-copy">Have you tried to debug it?</span>
<span class="comment-copy">Could you explain your code? I see several issues. What are you trying to accomplish? I suggest a complete rewrite instead of fixing the <code>TypeError</code>.</span>
<span class="comment-copy">Post detailed error message please. On which line of code?</span>
<span class="comment-copy"><code>x = x + f</code> is the problem. <code>x</code> is a string, <code>f</code> is a number. You can't add them.</span>
<span class="comment-copy">I'm sure that the OP had meant for there to be an outer loop involving <code>c</code> some how and the code for appending should have been like: <code>x = x + s[f]</code>. Anyway, your code is <i>much</i> simpler!</span>
<span class="comment-copy">Further simplification: <code>''.join(map(''.join, zip(string1, string2)))</code></span>
<span class="comment-copy">Isn't concatenating strings with <code>+=</code> quadratic? appending to a list then using <code>join()</code> would be linear.</span>
<span class="comment-copy">@RoadRunner Clarity is more important than efficiency for something like this.</span>
