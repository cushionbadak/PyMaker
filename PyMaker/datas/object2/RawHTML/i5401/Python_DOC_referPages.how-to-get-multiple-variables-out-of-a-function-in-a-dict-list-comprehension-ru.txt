<div class="post-text" itemprop="text">
<p>I have a dict comprehension that I wish to optimize, now it seems that it might be less efficient than the for-loop since it runs a function twice so as to get the index slice.</p>
<p>I've written both the for-loop version and the dict comprehension version.</p>
<p>Edit: The dict comprehension runs a function twice, which is wav.read on every iteration, once to get the first index, and then another time to get the second index. 
On the for loop, the wav.read function is only run twice, the results saved in memory as two different variables. I want to know a way to be able to do this via list/dict comprehension.</p>
<pre><code>import scipy.io.wavfile as wav
import os
from deepspeech.model import Model

ds = Model(lm_binary,N_FEATURES, N_CONTEXT, alphabet, BEAM_WIDTH) 
ds.enableDecoderWithLM(alphabet, lm_binary, trie, LM_WEIGHT,
                              WORD_COUNT_WEIGHT, VALID_WORD_COUNT_WEIGHT)

sample_folder = 'data/samples/'
files = {str(file):sample_folder+file for file in os.listdir(sample_folder) if file.endswith('.wav')}


## For loop
prediction = {}
for file_name,directory in files.items():
    wavelength,audio = wav.read(directory)
    prediction[file_name] = ds.stt(audio,wavelength)



## Dictionary comprehension to output
prediction = {file_name:ds.stt(wav.read(directory)[1],wav.read(directory)[0]) for file_name,directory in files.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For this specific case, <a href="https://stackoverflow.com/a/48287544/364696">Stefan's answer</a> of:</p>
<pre><code>prediction = {file_name:ds.stt(*wav.read(directory)[::-1])
              for file_name,directory in files.items()}
</code></pre>
<p>is the most straightforward, reversing and then unpacking the results as positional arguments to <code>ds.stt</code>.</p>
<p>If you have a scenario where constructing a valid slice isn't possible though (say, you need the 0th, 3rd and 4th values, or attributes <code>spam</code> and <code>eggs</code>) there are other ways to do this with a single call, while preserving the <code>dict</code> comprehension. All of them boil down to making a cached of the result somehow, so it can have multiple items pulled from it before it disappears:</p>
<ol>
<li><p>Via <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> or <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow noreferrer"><code>operator.attrgetter</code></a>:</p>
<pre><code>from operator import attrgetter, itemgetter

# For specified indices with itemgetter (returns tuple of requested values in order specified)
get1_0 = itemgetter(1, 0)
prediction = {file_name:ds.stt(*get1_0(wav.read(directory)))
              for file_name,directory in files.items()}

# For spam and eggs attributes via attrgetter in order specified:
getspamandeggs = attrgetter('spam', 'eggs')
prediction = {file_name:ds.stt(*getspamandeggs(wav.read(directory)))
              for file_name,directory in files.items()}
</code></pre></li>
<li><p>Via nested loops in comprehension to make cached item:</p>
<pre><code># Final line makes one-tuple of cached value and iterates it to give
# a name for reuse
prediction = {file_name:ds.stt(audio, wavelength)
              for file_name,directory in files.items()
              for wavelength, audio in (wav.read(directory),)}
# Last line could be just
              for readval in (wav.read(directory),)}
# If unpacking impractical, and then readval reused to index or look up attributes
</code></pre></li>
<li><p>Two-liner, with a lazy generator expression to pair values, then a dict comprehension to consume it:</p>
<pre><code>prediction = ((file_name, wav.read(directory))
              for file_name,directory in files.items())
prediction = {file_name:ds.stt(readval[1],readval[0])
              for file_name, (wavelength, audio) in prediction}
# Again, (wavelength, audio) could just be readval if you unpacking
# impractical
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>runs a function twice:</p>
<pre><code>ds.stt(wav.read(directory)[1], wav.read(directory)[0])
</code></pre>
</blockquote>
<p>Run it once, by <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow noreferrer">unpacking the arguments</a> (in the needed order):</p>
<pre><code>ds.stt(*wav.read(directory)[::-1])
</code></pre>
</div>
<span class="comment-copy">Just use the for-loop...</span>
<span class="comment-copy">Also, this: <code>prediction = dict.fromkeys(files.keys(),[])</code> is a bug waiting to happen, you are filling your <code>dict</code> with references to the <i>same list</i>.</span>
<span class="comment-copy">Yeah I thought that was my intention, Since I wanted to get the predictions from the files. Now files is a dictionary where keys = filename, values = file directory. the for loop takes the directory, reads it with wav and then feeds it into the predictor. Predictor gets a prediction and then now sets the prediction, a dictionary where keys = filename, values = empty, into keys=filename,values= prediction</span>
<span class="comment-copy">So, if you do <code>mydict = dict.fromkeys('abc', []); mydict['a'].append('foo')</code> you intend for <code>mydict['b'] == ['foo']</code>?</span>
<span class="comment-copy">Regardless, this line: <code>prediction = dict.fromkeys(files.keys(),[])</code> is completely useless, since you overwrite those keys immediately afterwards in the for-loop, never once using the <code>list</code> you put in them originally...</span>
<span class="comment-copy">In the second version, I usually use a list because I prefer the look of <code>[x]</code> over <code>(x,)</code>. Why do you prefer a tuple?</span>
<span class="comment-copy">@StefanPochmann: No strong reason; the <code>tuple</code> approach is likely faster (Python caches and reuses small tuples, saving a little allocator overhead, and it allocates in a single block, not one for the object header and one for the elements, reducing memory fragmentation), but the difference is so trivial that's it likely to be lost in the noise; if you prefer the look of a one-element <code>list</code>, more power to ya. I just tend to default to <code>tuple</code> without thinking about it when <code>tuple</code> is legal and mutability is not needed.</span>
<span class="comment-copy">Ok, thanks. I did know tuple is slightly faster but didn't know those details. Anyway, I think I'll keep ignoring that and stick with what I find prettier. I do use <code>x,</code> occasionally, just the <code>(x,)</code> is so ugly. Another reason I often prefer a list is that I tend to have more <code>(</code>/<code>)</code> than <code>[</code>/<code>]</code>, so the latter usually stand out better visually and help see the overall code structure better.</span>
<span class="comment-copy">Awesome, learnt something new. I did thought of the ::-1, but I don't really know what that * means. Except now it works.</span>
<span class="comment-copy">@NasrudinSalim The <code>*</code> just unpacks the iterable into separate arguments. See <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
