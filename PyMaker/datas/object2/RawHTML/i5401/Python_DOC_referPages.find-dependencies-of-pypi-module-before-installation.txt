<div class="post-text" itemprop="text">
<p>This question gets asked a lot, but there's never a satisfactory answer.</p>
<p>Here's my situation.  I'm working at a secure facility.  My desktop system can connect to the internet, but I'm not allowed to install unapproved software, included Python.  There's a lab where Python 2.7 and 3.7 are installed, but it doesn't have internet access.  I've downloaded example-1.0.0.tar.gz from PyPy and copied to a lab server, but pip says it wants requests==2.9.1 to be installed.  I can do that, but I'd really like to get a list of everything I'll be needing and do them all at one time.</p>
<p>I could install the package at home and then use "pip show", but it's something of no use at home, so I'll want to uninstall it once I'm done and that seems like a lot of effort.</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Create <a href="https://docs.python.org/3/library/venv.html#module-venv" rel="nofollow noreferrer">virtual environment</a> on a machine that has internet access and use the <code>--copies</code> option to ensure files are not symlinked. Afterwards copy the whole environment to the target machine and use it there.</p>
<pre><code># create the environement
python3 -m venv venvfoldername --copies
# activate the environment
. venvfoldername/bin/activate
# install your requirements together with their dependencies
pip install -r requirements.txt
# copy everything to target machine
scp -r venvfoldername labhostname:/path/on/the/server
# connect there and activate the environment
ssh labhostname
cd /path/on/the/server/
. venvfoldername/bin/activate
# you can also use it like that
/path/on/the/server/venvfoldername/bin/python foobar.py
</code></pre>
<p>You should have everything at hand now.</p>
</div>
<span class="comment-copy">Why not just create a virtual environment at home and then delete it when you have the information you need?</span>
<span class="comment-copy">Well, the scp step will actually require a thumb-drive, but I like it.  I'll rate this useful today, and probably accept it tomorrow.</span>
<span class="comment-copy">be careful with this approach when you transfer the environment to another OS or distribution! I discovered today that external dependencies like openssl or sqlite3 are usually linked as shared objects (in linux based distributions) and you might discover weired behavior if the versions, which are usually installed system wide differ.</span>
<span class="comment-copy">If you just want the full list of dependencies you should call <code>pip freeze</code> after you've installed everything into the environment. This will give you the full list of dependencies - also those that are dependencies of you dependencies in requirements.txt.</span>
