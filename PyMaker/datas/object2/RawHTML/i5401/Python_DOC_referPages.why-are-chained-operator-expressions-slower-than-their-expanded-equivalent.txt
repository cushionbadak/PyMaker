<div class="post-text" itemprop="text">
<p>In python, it is possible to <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="noreferrer">chain operators</a> in this manner:</p>
<pre><code>a op b op c
</code></pre>
<p>Which is evaluated to </p>
<pre><code>a op b and b op c 
</code></pre>
<p>With the only difference being that <code>b</code> is evaluated only once (so, something more like <code>t = eval(b); a op t and t op c</code>).</p>
<p>This is advantageous from the view point that it is <em>very readable</em> and more concise than the equivalent version with explicit conjunction (using <code>and</code>). </p>
<p>However... I've noticed that there is a minor performance difference between chained expressions and the equivalent, be it for 3 operands or 20. This becomes apparent when you time these operations.</p>
<pre><code>import timeit 

timeit.timeit("a &lt;= b &lt;= c", setup="a,b,c=1,2,3")
0.1086414959972899

timeit.timeit("a &lt;= b and b &lt;= c", setup="a,b,c=1,2,3")
0.09434155100097996
</code></pre>
<p>And,</p>
<pre><code>timeit.timeit("a &lt;= b &lt;= c &lt;= d &lt;= e &lt;= f", setup="a,b,c,d,e,f=1,2,3,4,5,6")
0.2151330839988077

timeit.timeit("a &lt;= b and b &lt;= c and c &lt;= d and d &lt;= e and e &lt;= f", setup="a,b,c,d,e,f=1,2,3,4,5,6")
0.19196406500122976
</code></pre>
<p>Note: <em>All tests were done with Python-3.4</em>.</p>
<p>Examining the byte code for both expressions, I noticed that one performs significantly more (actually, 4 more) operations than the other.</p>
<pre><code>import dis

dis.dis("a &lt;= b &lt;= c")
  1           0 LOAD_NAME                0 (a)
              3 LOAD_NAME                1 (b)
              6 DUP_TOP
              7 ROT_THREE
              8 COMPARE_OP               1 (&lt;=)
             11 JUMP_IF_FALSE_OR_POP    21
             14 LOAD_NAME                2 (c)
             17 COMPARE_OP               1 (&lt;=)
             20 RETURN_VALUE
        &gt;&gt;   21 ROT_TWO
             22 POP_TOP
             23 RETURN_VALUE 
</code></pre>
<p>Contrast this with,</p>
<pre><code>dis.dis("a &lt;= b and b &lt;= c")
  1           0 LOAD_NAME                0 (a)
              3 LOAD_NAME                1 (b)
              6 COMPARE_OP               1 (&lt;=)
              9 JUMP_IF_FALSE_OR_POP    21
             12 LOAD_NAME                1 (b)
             15 LOAD_NAME                2 (c)
             18 COMPARE_OP               1 (&lt;=)
        &gt;&gt;   21 RETURN_VALUE
</code></pre>
<p>I am not experienced with reading byte code, but the first code snippet <em>definitely</em> performs more operations at the byte code level than the second.</p>
<p>Here's how I've interpreted this. In the first case, variables are pushed onto some sort of stack, and popped successively for comparison. All variables are popped only once. In the second case, there is no stack, but at least (N - 2) of the operands have to be loaded into memory twice for comparison. It appears the stack popping operation is more expensive than loading (N - 2) variables twice for comparison, accounting for the speed difference.</p>
<p>In a nutshell, I'm trying to understand why one operation is always slower than the other by a constant factor. Is my hypothesis correct? Or is there something more to the python internals I'm missing? </p>
<hr/>
<p>More benchmarks:</p>
<pre><code>| System | a &lt;= b &lt;= c         | a &lt;= b and b &lt;= c   | a &lt;= b &lt;= ... &lt;= e &lt;= f | a &lt;= b and ... and e &lt;= f | Credit         |
|--------|---------------------|---------------------|-------------------------|---------------------------|----------------|
| 3.4    | 0.1086414959972899  | 0.09434155100097996 | 0.2151330839988077      | 0.19196406500122976       | @cᴏʟᴅsᴘᴇᴇᴅ     |
| 3.6.2  | 0.06788300536572933 | 0.059271858073771   | 0.1505890181288123      | 0.12044331897050142       | @Bailey Parker |
| 2.7.10 | 0.05009198188781738 | 0.04472208023071289 | 0.11113405227661133     | 0.09062719345092773       | @Bailey Parker |
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In CPython's <a href="https://github.com/python/cpython/blob/v3.6.4/Python/ceval.c" rel="noreferrer">stack-based bytecode execution engine</a>, saving an extra reference to <code>b</code> for the chained comparison isn't free. It's at the "seriously, don't worry about it" level of cheap, but it's not literally free, and you're comparing it to the slightly cheaper operation of loading a local variable.</p>
<p>The <code>COMPARE_OP</code> opcode removes the objects it's comparing from the stack, so for the chained comparison, Python has to create another reference to <code>b</code> (<code>DUP_TOP</code>) and shove it two places down in the stack (<code>ROT_THREE</code>) to get it out of the way.</p>
<p>In <code>a &lt;= b and b &lt;= c</code>, instead of the above reference shuffling, Python just copies another reference to <code>b</code> out of the stack frame's <code>fastlocals</code> array. This involves less pointer shuffling and one less trip around the bytecode evaluation loop, so it's slightly cheaper.</p>
</div>
<span class="comment-copy">It might be helpful to specify python version here. I'd imagine you could get different results especially between 2 vs 3. Interesting question nonetheless! :)</span>
<span class="comment-copy">@BaileyParker Good catch.. I did these tests on 3.4 ;)</span>
<span class="comment-copy">On 3.6.2, I get these numbers in the same order as your tests: <code>0.05435221083462238</code> vs <code>0.05949017032980919</code> and <code>0.1505890181288123</code> vs <code>0.12044331897050142</code>. Similar results but in the 3 item case less pronounced.</span>
<span class="comment-copy">Similar results on 2.7.10: <code>0.05009198188781738</code> vs <code>0.04472208023071289</code> and <code>0.11113405227661133</code> vs <code>0.09062719345092773</code></span>
<span class="comment-copy">If you don't mind I can add these in a table at the bottom to your results. I can also include dis for 2.7 and 3.6.</span>
<span class="comment-copy">Yes, so it <i>is</i> a stack! Your answer tells me exactly what the bytecode is doing, so thanks, your answer is great.</span>
<span class="comment-copy">In your experience, do you find readability and conciseness to be a fair tradeoff for this slight performance loss?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ: I did say "seriously, don't worry about it". Maybe if you're trying to squeeze every last bit of performance out of a performance-critical inner loop, it might be worth changing, but if you're at the point where you're optimizing your chained comparisons, it might be worth rewriting that part of your code in Cython or C.</span>
