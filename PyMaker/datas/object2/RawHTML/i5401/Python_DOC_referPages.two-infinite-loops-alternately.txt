<div class="post-text" itemprop="text">
<p>I'm looking for solution of this problem:</p>
<p>I have two functions:</p>
<pre><code>def foo1():
    while True:
        print("x")

def foo2():
    while True:
        print("y")
</code></pre>
<p>I would like to run them alternately, like:</p>
<ol>
<li>run foo1()</li>
<li>stop foo1() run foo2()</li>
<li>stop foo2() run foo1()</li>
</ol>
<p>Functions can't work simultaneously, at the moment only one of them can work.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong> Leave it to @StefanPochmann to shoot down my beautiful answer: It doesn't matter for the question as it is posed, but it is certainly worth mentioning that zip works pair-by-pair. So while you can formally pause <code>alter</code> defined below after an odd number of iterations, at this point 'y' will have been printed already.</p>
<p>If you care about this the solution also due to Stefan is</p>
<pre><code>&gt;&gt;&gt; alter = map(next, it.cycle((foo1(), foo2())))
</code></pre>
<p>which is actually pretty clever.</p>
<p><strong>Edit ends</strong></p>
<p>You could convert the functions into generators, then zip them.</p>
<pre><code>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt;
&gt;&gt;&gt; def foo1():
...     while True:
...         print("x")
...         yield None
... 
&gt;&gt;&gt; def foo2():
...     while True:
...         print("y")
...         yield None
... 
&gt;&gt;&gt; alter = it.chain.from_iterable(zip(foo1(), foo2()))
&gt;&gt;&gt; while True:
...     next(alter)

x
y
x
y
...
</code></pre>
<p>or:</p>
<pre><code>&gt;&gt;&gt; for a in alter:
...     pass

x
y
x
y
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I personally favour the <code>itertools</code> approach by Paul Panzer. However, if it is an option, I'd strongly suggest moving the "infinite loop" out of these functions and instead putting it in another "driver" function that calls these two in an alternating fashion.</p>
<pre><code>def f1():
    print('x')

def f2():
    print('y')
</code></pre>
<p></p>
<pre><code>def driver():
    while True:
        f1()
        f2()
</code></pre>
<p>I get that this won't be possible to implement in every situation, but it does lead to better design in the end if you can.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no way to do what you want with the functions you've shown. However, there are some approaches that might come close, to differing degrees, depending on what details you're willing to change in your current code.</p>
<p>One option to get sort-of parallel execution is to use threads. Python doesn't actually allow more than one thread to be running Python code at once, so this isn't really useful in most situations, but it might be good enough for your specific use case. Unfortunately it does very badly with your current code, since one thread will tend to block the other for a long time, so you'll get lots of <code>x</code>s, followed by lots of <code>y</code>s, as they functions only swap the GIL irregularly.</p>
<p>Another option is to use <code>multiprocessing</code>, which does allow parallel execution. It would do a better job of interleaving your two functions, but the exact timing of the swaps between the two processes will still not be exactly consistent, so you won't always get "xyxyxyxy", you might get something more like "xyxxyyxy" (the exact details may depend on your OS, CPU and how busy your machine is at the time you run the code).</p>
<p>Now we get into solutions that require modifications to the functions. An obvious solution is to simply rewrite them into a single function that does both steps:</p>
<pre><code>def foo_combined():
    while True:
        print('x')
        print('y')
</code></pre>
<p>Another option is to make the functions into generators, which you can combine yourself using <code>zip</code>:</p>
<pre><code>def foo1_gen():
    while True:
        yield 'x'

def foo2_gen():
    while True
        yield 'y'
</code></pre>
<p>You could consume the generators like this:</p>
<pre><code>for x, y in zip(foo1_gen(), foo2_gen()):
    print(x)
    print(y)
</code></pre>
<p>Or, if you want a single iterable:</p>
<pre><code>for val in itertools.chain.from_iterable(zip(foo1_gen(), foo2_gen())):
    print(val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From what you say you don't want/need for them really both be running at the same time, but rather to be able to switch execution back and forth among them. What you've describe is what's called <a href="https://en.wikipedia.org/wiki/Cooperative_multitasking" rel="nofollow noreferrer">co-operative multitasking</a>. </p>
<p>This can be accomplished by simply making each function a <a href="https://en.wikipedia.org/wiki/Coroutine" rel="nofollow noreferrer">coroutine</a>. In Python that can be accomplished by making them <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">generator functions</a> which is done by simply by adding a <code>yield</code> statement to them at the right spot. That way they will each <strong>pause</strong> execution until <code>next()</code> is called on them again.</p>
<p>The only slightly tricky part is remembering that each generator function will need to be "primed" once it's called the first time (which actually doesn't execute the code in the function). The first call to <code>next()</code> of the value returned by the first call to the function itself will advances its execution to the location of the first <code>yield</code> in it.</p>
<p>Here's what I mean:</p>
<pre><code>def foo1():
    while True:
        yield
        print("x")

def foo2():
    while True:
        yield
        print("y")

# Sample usage.
def process():
    f1 = foo1()
    next(f1)  # Prime generator.
    f2 = foo2()
    next(f2)  # Prime generator.
    while True:
        next(f1)
        next(f2)


process()
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>x
y
x
y
x
...
</code></pre>
<p>If you're going to do a lot of this, you can create a decorator that will make generator functions used as coroutines prime themselves automatically (taken from a tutorial David Beazley gave at Pycon 2009 titled <a href="https://www.youtube.com/watch?v=Z_OAlIhXziw" rel="nofollow noreferrer"><em>Curious Course on Coroutines and Concurrency</em></a>).</p>
<pre><code>def coroutine(func):
    """ Decorator for wrapping coroutine functions so they automatically
        prime themselves.
    """
    def start(*args,**kwargs):
        cr = func(*args,**kwargs)
        next(cr)
        return cr

    return start

@coroutine
def foo1():
    while True:
        yield
        print("x")

@coroutine
def foo2():
    while True:
        yield
        print("y")

# Sample usage.
def process():
    f1, f2 = foo1(), foo2()  # Each will be "primed" automatically.
    for _ in range(10):
        next(f1)
        next(f2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So this is my personal way of doing this but there's probably a better one.</p>
<pre><code>def foo(i):
    while(True):
       i += 1
       if(i%2 == 0):
            print('x')
       else:
            print('y')
</code></pre>
<p>So the way this works is <code>i</code> is working as an iterator. Then it checks it increments the iterator every time by 1 with <code>i+= 1</code>. Next we check if <code>i</code> is odd or even and because it will alternate. So with every even number you will get <code>x</code> and every odd you you will get <code>y</code>. Hope this helps!</p>
</div>
<span class="comment-copy">Why can't you combine the functions into one?</span>
<span class="comment-copy">You've stated the answer by yourself. Use threads (or multiprocessing)</span>
<span class="comment-copy">Take the <code>while</code> out of the functions, and use another function that calls these alternatively inside an infinite <code>while</code>?</span>
<span class="comment-copy">@jhpratt because each is responsible for performing other operations, both running simultaneously cause errors</span>
<span class="comment-copy">Its best to read about the multithreading module, try it out and post a question showing where you got stuck</span>
<span class="comment-copy">This is probably the cleanest way that does exactly what OP wants.</span>
<span class="comment-copy">This is correct. Using multithreading/multiprocessing is <i>not</i> the same thing.</span>
<span class="comment-copy">Actually... just changed my mind, don't find it ok. It's misleading. I'd say the proper way to do it is <code>alter = map(next, it.cycle((foo1(), foo2())))</code>. That does achieve your "one-by-one-None" and does so by calling the generators one-by-one.</span>
<span class="comment-copy">@jhpratt How can you be so certain you know exactly what OP wants? OP says "running simultaneously cause errors". If OP has a concurrency issue, who knows where that concurrency issue exists? If <a href="https://stackoverflow.com/a/48391783/224704">Coldpeed's answer</a> works, then this would also work (and vice versa). But then Coldspeed's seems simpler and more pragmatic.</span>
<span class="comment-copy">@CraigYoung In that case, the OP should have been more specific on why they couldn't do it concurrently.</span>
