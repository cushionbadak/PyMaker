<div class="post-text" itemprop="text">
<p>I am trying to look for a string, <code>userType</code> in all of the files inside of  a directory.</p>
<p>This code works on most files, but i have a file, <code>.DS_STORE</code> that seems to be encoded differently than the rest of the files.  I know the string I'm looking for is not in this file, but it breaks the program. How can I skip any files that can't be read?</p>
<p>Here is my code:</p>
<pre><code>import os

path = "/home/me/Work/myprojectvirtualenv/myproject/homepage/templates/"

direct = os.listdir(path)

for item in direct:
    print("Checking " + item)
    if 'userType' in open(os.path.join(path ,item)).read():
        print("FOUND USERTYPE IN " + item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use a <code>try/except</code> based on the <em>exception</em> that you know should be raised for the particular action you are performing. I'm pretty sure the exception you are most likely getting is <code>UnicodeDecodeError</code>. Alternatively, you could also open the file using "read-bytes" -&gt; <code>rb</code>:</p>
<pre><code>f = open('filename', 'rb')
</code></pre>
<p>More directly in your problem for using the try/except:</p>
<pre><code>for item in direct:
    print("Checking " + item)
    try:
        if 'userType' in open(os.path.join(path ,item)).read():
            print("FOUND USERTYPE IN " + item)
    except WhateverTheExceptionIsYouWantToCatch:
        pass
</code></pre>
<p>Doing the above will raise when something unexpected happens so you can then determine how you want to proceed, otherwise, continue. </p>
<p>I would also suggest as an added bonus, to either explicitly call <code>.close</code> on your open, or even better and strongly recommended, use a context to handle the opening/closing for you, so you don't end up with a bunch of open files.</p>
<pre><code>for item in direct:
    print("Checking " + item)
    try:
        with open(os.path.join(path, item)) as f:
            if 'userType' in f.read():
                print("FOUND USERTYPE IN " + item)
    except WhateverTheExceptionIsYouWantToCatch:
        pass
</code></pre>
<p>Finally, to the point of <a href="https://stackoverflow.com/questions/48361738/filter-files-out-of-listdir-that-cant-be-read-in-python-3/48361806#comment83710388_48361789">this</a> comment, you should probably ensure you even want to open certain files that you might not care about. Using the <code>glob</code> as suggested in that respective answer, you will probably filter down to files you actually care about. </p>
<h2>Use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.open" rel="nofollow noreferrer">pathlib</a></h2>
<p>It would be a good opportunity to also start making use of pathlib, as it provides great tools.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using <code>os.listdir</code>, take advantage of swanky new python features like <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>Path</code></a> and (not new but part of path) <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob" rel="nofollow noreferrer"><code>glob</code></a>. Wit it you can look for files names matching a pattern:</p>
<pre><code>from pathlib import Path

BASE_DIR = Path('/home/me/Work/myprojectvirtualenv/myproject/homepage/templates/')

for path in BASE_DIR.glob('**/*.txt'):
    with path.open() as f
        if 'userType' in f.read():
            print(f'found in: {path}')
</code></pre>
<p>This assumes the files you're interested in are <code>.txt</code>s, but you can tweak this to your needs.</p>
</div>
<span class="comment-copy">Is it all dot files that throw this error?</span>
<span class="comment-copy">If there are files that you know that throw an exception and you want to ignore those, why not <code>try/except</code> them and move on through your iteration of each file?</span>
<span class="comment-copy">Wrap the read in a try/except block?</span>
<span class="comment-copy">@MikeTung No, just the .DS_STORE.  I am pretty sure the reason is because it is encoded differently than the rest of the files.</span>
<span class="comment-copy">@idjaw That worked.  You should post that as an answer and i'll accept it</span>
<span class="comment-copy">Thanks for the warning about not keeping files open.  Would it just keep the files open in memory if you don't close them?</span>
<span class="comment-copy">@wanderer0810 Yes, so it is best to always close when you are done.</span>
<span class="comment-copy">It wasn't me that downvoted, I just want to say that I thought your answer was really informative and awesome!</span>
<span class="comment-copy">I don't think it is a filename issue. It is the ability to actually read the file. In this case, I thinkg the <code>f.read()</code> will still raise the same error. But, ++ for the <code>Path</code> recommendation. :)</span>
<span class="comment-copy">Yes but if you glob for only what you're interested in, it will exclude the <code>.DS_Store</code>. You shouldn't be opening files you can't read.</span>
<span class="comment-copy">I agree. However, from my understanding, the OP wants to still read from DS_STORE.</span>
