<div class="post-text" itemprop="text">
<p>I just stumbled over <code>callstats</code> in the <code>sys</code> module after PyCharm's
autocomplete suggested it. Else I probably would never have discovered it
because it doesn't get even mentioned in the <a href="https://docs.python.org/3/library/sys.html" rel="nofollow noreferrer">docs</a></p>
<p><code>help(sys.callstats)</code> gives this:</p>
<pre> Help on built-in function callstats in module sys:
callstats(...)
    callstats() -&gt; tuple of integers

    Return a tuple of function call statistics, if CALL_PROFILE was defined
    when Python was built.  Otherwise, return None.

    When enabled, this function returns detailed, implementation-specific
    details about the number of function calls executed. The return value is
    a 11-tuple where the entries in the tuple are counts of:
    0. all function calls
    1. calls to PyFunction_Type objects
    2. PyFunction calls that do not create an argument tuple
    3. PyFunction calls that do not create an argument tuple
       and bypass PyEval_EvalCodeEx()
    4. PyMethod calls
    5. PyMethod calls on bound methods
    6. PyType calls
    7. PyCFunction calls
    8. generator calls
    9. All other calls
    10. Number of stack pops performed by call_function() </pre>
<p>Now I'm curious why it doesn't get mentioned anywhere and if there is a possibility to use it in an Anaconda build for Python.
It returns <code>None</code> when I call <code>sys.callstats()</code> so I assume the answer for the latter will be no.
However I'd still be interested in seeing how an actual output of this would look like for Python builds
where this works.</p>
<hr/>
<p>Edit:
In the <a href="https://bugs.python.org/issue28799" rel="nofollow noreferrer">Issue28799</a> linked from the comments below the accepted answer we find the reason why <code>callstats</code> will be removed with Python 3.7. The stats probably wouldn't be right after an upcoming feature will be implemented:</p>
<blockquote>
<p>My problem is that with my work on FASTCALL, it became harder to track where the functions are called in practice. It maybe out of the Python/ceval.c file. I'm not sure that statistics are still computed correctly after my FASTCALL changes, and I don't know how to check it.</p>
<p>Python has already sys.setprofile(), cProfile and profile modules. There is also sys.settrace(). Do we still need CALL_PROFILE?</p>
<p>Attached patch removes the feature:</p>
<ul>
<li>Calling the the untested and undocumented sys.callstats() function now emits a DeprecationWarning warning</li>
<li>Remove the PyEval_GetCallStats() function and its documentation</li>
</ul>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Don't. It's undocumented, untested, and <a href="https://github.com/python/cpython/blob/fc2f407829d9817ddacccae6944dd0879cfaca24/Python/sysmodule.c#L1403" rel="nofollow noreferrer">disabled in Python 3.7</a>. If you want to do profiling, use <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer"><code>cProfile</code>, <code>profile</code></a>, or <a href="https://docs.python.org/3/library/sys.html#sys.setprofile" rel="nofollow noreferrer"><code>sys.setprofile</code></a>.</p>
<p>For now, if you compile Python 3.6 or 2.7 from source with <code>CALL_PROFILE</code> defined, then <code>sys.callstats</code> does exactly what the docstring says it does with <code>CALL_PROFILE</code> defined: it returns an 11-element tuple containing counts of various internal call types. The stats are only tracked in <code>Python/ceval.c</code>, so it'll miss calls that don't go through there.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am curious about <code>sys.callstats</code> too, so I compiled a binary of Python 2.7.12 with <code>CALL_PROFILE</code> flag. With zero user code but only python bootstrap routines, the result of <code>sys.callstats()</code> is:</p>
<pre><code>PCALL_ALL 1691
PCALL_FUNCTION 371
PCALL_FAST_FUNCTION 363
PCALL_FASTER_FUNCTION 257
PCALL_METHOD 59
PCALL_BOUND_METHOD 58
PCALL_CFUNCTION 892
PCALL_TYPE 394
PCALL_GENERATOR 28
PCALL_OTHER 33
PCALL_POP 2005
</code></pre>
</div>
<span class="comment-copy">Interesting, thanks! Do you have knowledge where it was or is used until now?</span>
<span class="comment-copy">@Darkonaut: <a href="https://bugs.python.org/issue28799" rel="nofollow noreferrer">As far as any of the devs could tell</a>, basically nowhere. Don't start using it now!</span>
<span class="comment-copy">I can promise you I won't ;) Thank you!</span>
<span class="comment-copy">Thanks for the effort! Is this possibly used internally by cProfile? Doesn't look all too revealing for end users indeed, still strange it doesn't get mentioned.</span>
<span class="comment-copy">@Darkonaut nope, you need to define the <code>CALL_PROFILE</code> flag during compile time, <code>cProfile</code> use <code>sys.settrace</code> and timer internally.</span>
<span class="comment-copy">maybe there it brings too much overhead? see the <a href="https://github.com/python/cpython/blob/v3.6.3/Python/ceval.c#L5069-L5084" rel="nofollow noreferrer">cpython souce</a></span>
