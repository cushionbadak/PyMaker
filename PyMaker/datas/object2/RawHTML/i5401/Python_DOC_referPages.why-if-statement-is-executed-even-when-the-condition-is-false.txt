<div class="post-text" itemprop="text">
<p>Ok this might be trivial but for clarity, I am still asking it:</p>
<pre><code>In [1]: s = "abc"

In [2]: type(s)
Out[2]: str

In [3]: if s:
   ...:     print("works")
works

In [4]: s == True
Out[4]: False
</code></pre>
<p>So a string is not equal to <code>True</code> and even then the <code>if</code> thinks that it is <code>True</code>. Explicitly checking whether <code>s == True</code> returns <code>False</code>. </p>
<pre><code>In [6]: if not s:
   ...:     print("works")
</code></pre>
<p>So here for the <code>if</code> statement, <code>not s</code> is False! What is happening?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>if s</code> is analogous to <code>if bool(s)</code>, i.e. evaluating the boolean truthiness of the value. A lot more values are <em>truthy</em> than just <code>True</code>. Since the string <em>isn't</em> the value <code>True</code>, <code>s == True</code> is false.</p>
<blockquote>
<p>By default, an object is considered true unless its class defines
  either a <code>__bool__()</code> method that returns <code>False</code> or a <code>__len__()</code>
  method that returns zero, when called with the object. Here are most
  of the built-in objects considered false:</p>
<ul>
<li>constants defined to be false: <code>None</code> and <code>False</code>.</li>
<li>zero of any numeric type: <code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code></li>
<li>empty sequences and collections: <code>''</code>, <code>()</code>, <code>[]</code>, <code>{}</code>, <code>set()</code>, <code>range(0)</code></li>
</ul>
<p><a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="noreferrer">https://docs.python.org/3/library/stdtypes.html#truth-value-testing</a></p>
</blockquote>
</div>
<span class="comment-copy">Strings never compare equal to booleans. Try <code>bool(s) == True</code> instead</span>
<span class="comment-copy"><code>if s:</code> checks whether <code>s</code> is a <i>Truthy</i> value - not whether it is specifically the value <code>True</code>. <code>s == True</code> checks whether it is the exact value <code>True</code> - which it isn't, it's a string (but evaluates to being <i>Truthy</i> since it is not empty).</span>
<span class="comment-copy">That solves it. Thanks!</span>
