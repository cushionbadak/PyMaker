<div class="post-text" itemprop="text">
<p>I know, that <code>eval()</code> is <strong>evil</strong>. </p>
<p>I'm sure there are much better ways.</p>
<p>This is just a general question of approaching a problem.</p>
<p><strong>What do you think about using <code>eval()</code> in order to make a function more generic?</strong></p>
<p>In a very simple example, it could look like this:</p>
<pre><code>def generic_eval_func(a, operator, b):
    return eval('a '+operator+' b')    

if __name__ == '__main__':
    a = 6
    b = 7
    print generic_eval_func(a, '&lt;', b)
</code></pre>
<p>I have not used such a function, yet. </p>
<p>But every now and then it pops into my mind when thinking about how to make functions more generic.</p>
<p>Instead of having two functions <code>subtract(a,b)</code> <code>add(a, b)</code> there would be  one function <code>operation(a, '+', b)</code> or <code>operation(a, '-', b)</code> or <code>operation(a, '&lt;', b)</code>.</p>
<p>I'm really not sure about it.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use the operator if you are interested in simple arithmetic operations</p>
<pre><code>from functools import reduce  # Python 3
import operator

print(reduce(operator.__sub__, (6,7)) )
print(reduce(operator.__add__, [6,7]) ) # you can pass a list as well.
</code></pre>
<p>for other operator like <code>&lt;</code> I guess you better go with <code>lambda</code> functions</p>
</div>
<div class="post-text" itemprop="text">
<p>My mind goes with this <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">thread</a>. You must have already read it, but... in your case, you want to know if <strong>there is</strong> a case where it could be useful for generic programming.</p>
<p>And... unfortunately, the answer is : If you can't prove at least <strong>one</strong> good use-case, it doesn't exist.</p>
<p>If you truly believe such a use-case for generic programming exists, then find one, and come show us (But I understand the question might be interesting to think about as a <strong>group</strong>, more than as an <strong>individual</strong>, but then, you might want to consider going on another site).</p>
</div>
<span class="comment-copy">I think this question is very likely to be closed as an opinion-based question because the first think that comes to my mind is an opinion. An mine is: No, I can't see any use for a generic function like this.</span>
<span class="comment-copy">It's not really opinion based though. It's a fact that using eval in this way incurs the exact same problems as using eval itself. So if you understand the evils of eval, you should understand the evils of sneakily embedding it in functions in attempts of making macros. As Alg_D's answer shows, there are much better ways to achieve what rocksteady desires.</span>
<span class="comment-copy">This would only apply to infix operators for which there is a small (fixed) set. All these operators can be accessed as functions with the <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator</code></a> library. What you have done is simply to re-create the functionality of <code>apply</code> (which was deemed unnecessary and depreciated)</span>
