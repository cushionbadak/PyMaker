<div class="post-text" itemprop="text">
<p>I have a function that takes in a string and a prefix word. I want to use re.findall to get a list of suffix words that follow the given prefix.
For example: </p>
<pre><code>string: "My mother gave my sister my robot." 
prefix: "my"
result: ["mother", "sister", "robot"]
</code></pre>
<p>My implementation is </p>
<pre><code>def suffix(txt, prefix):
    rv = re.findall(prefix + r' \w{4-15}',txt)
    rv = [i.replace(prefix,'') for i in rv]
    return rv
</code></pre>
<p>However, I am getting [] returned. 
Can someone suggest how I can implement this, using re? </p>
</div>
<div class="post-text" itemprop="text">
<p>Building on top of other answers here is a 1 liner</p>
<pre><code>&gt;&gt;&gt; s = "My mother gave my sister my robot."
&gt;&gt;&gt; import re
&gt;&gt;&gt; prefix = "my"
&gt;&gt;&gt; re.findall(prefix + r'\s+(\w+)', s, re.IGNORECASE)
['mother', 'sister', 'robot']
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Several issues here, first the range separator inside a quantifier is a comma not a hyphen, so: <code>{4,15}</code> instead of <code>{4-15}</code>.</p>
<p>Second, you need to match both <code>my</code> and <code>My</code>, so the match should be case insensitive (<code>re.IGNORECASE</code>).</p>
<p>Third, if you use a <em>capturing parentheses group</em> (the round brackets) with <code>finditer</code> then you don't need to hack off the prefix.</p>
<p>Try this:</p>
<pre><code>import re

def suffix(txt, prefix):
    rv = []
    for m in re.finditer(prefix + r' (\w{4,15})', txt, re.IGNORECASE):
        rv.append(m.groups()[0])

    return rv

print suffix("My mother gave my sister my robot.", "my")
</code></pre>
<p>Gives:</p>
<pre><code>['mother', 'sister', 'robot']
</code></pre>
<p>Depending on needs, <code>\b</code> (word boundary) might be better than a space to separate words.  For example:  "my, and your, stuff" would not match using a space.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since @cdarke covered your main issues with your problem, another way would be to split <code>string</code> into a list of words with <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a>, and if a word in the list is equal to any case of <code>prefix</code>, get the previous word and add it to your resulting list. </p>
<p>Here is an example:</p>
<pre><code>import re

string = "My mother gave my sister my robot."
prefix = "my"

words = re.sub("[^\w]", " ",  string).split()

suffixes = [words[i] for i in range(len(words)) if words[i-1].lower() == prefix]

print(suffixes)
</code></pre>
<p>Which Outputs:</p>
<pre><code>['mother', 'sister', 'robot']
</code></pre>
<p><strong>Note:</strong> In order to check if any case in the words list match with <code>prefix</code>, you can convert it to lowercase first with <code>lower()</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>That's where you need   Positive Lookbehind :</p>
<p>Here we go:</p>
<pre><code>import re

def find_suffix(word,string):
    pattern = '(?&lt;=' + word + '\s)\w+'
    return re.findall(pattern,string)
print(find_suffix('my',"my mother gave my sister my robot."))
</code></pre>
<p>output:</p>
<pre><code>['mother', 'sister', 'robot']
</code></pre>
</div>
<span class="comment-copy">Try <code>{4,15}</code> instead of <code>{4-15}</code>.</span>
<span class="comment-copy">I think you might need <code>\s+</code>, otherwise it might get a hit on (for example) "mystify" (although the question is a little ambiguous).</span>
<span class="comment-copy">@cdarke yes thanks, point taken!</span>
