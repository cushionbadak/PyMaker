<div class="post-text" itemprop="text">
<p>Task1: I have a ~120Gb set of the document from which one program is continuously extracting "ids".</p>
<p>Task2: Once all "ids" are extracted I have to process each of the "ids" and extract some data which links to each "id". </p>
<p>I have written a python script which performs this serially, i.e Task 2 on completion of Task 1. I was wondering if there is a way in which as an when each "ids" is found in Task1, it sends it to Task2 immediately for processing while itself resuming to look for the next "ids". Basically, make both tasks work parallelly to save time. </p>
</div>
<div class="post-text" itemprop="text">
<p>What you are describing reminds me of <a href="http://www.celeryproject.org/" rel="nofollow noreferrer">celery</a>. </p>
<p>Some other recommended libraries:</p>
<ul>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" rel="nofollow noreferrer">concurrent.futures.ProcessPoolExecutor</a></li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">multiprocessing.Pool</a></li>
</ul>
</div>
<span class="comment-copy">sounds like a problem for a database script?</span>
<span class="comment-copy">So... Multiprocessing? Did you google anything about python parallelism?</span>
<span class="comment-copy">The DB would be dynamically be updated, would be hard to track which ids are processed. Will have to keep flags to update db about processed or not processed along with new ids being added.</span>
<span class="comment-copy">I couldn't find anything supporting multiprocessing. Most documents talk about threads which act serially</span>
