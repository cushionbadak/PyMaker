<div class="post-text" itemprop="text">
<p>Trying to simplify lots of repetive reading and writing in a script of mine and I can not figure out how to get data out of a def function.   </p>
<pre><code>def writefile(FILE, DATA):
    file = open(FILE, "w")
    X = str(DATA) 
    file.write(X)
    file.close()
def readfile(FILE):
    file = open(FILE, "r")
    readvar = file.read()
    file.close()
readfile("BAL.txt")
print(readvar)
</code></pre>
<p>I would expect the value stored in BAL.txt to come back but it always says that readvar is not defined. I just defined it in a function that I ran. i am extremely confused </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, variables from inside a function is generally not accessible from the outside (Look up variable scoping). You can put a <code>return</code> statement at the end of a function to return variables (<code>readvar</code> in this case) (and you almost always should). Then you can assign the returned argument (<code>readvar</code>) to a new variable (e.g. <code>rv</code>). You can also give it the same name.</p>
<pre><code>def writefile(FILE, DATA):
    file = open(FILE, "w")
    X = str(DATA) 
    file.write(X)
    file.close()
def readfile(FILE):
    file = open(FILE, "r")
    readvar = file.read()
    file.close()
    return readvar
rv = readfile("BAL.txt")
print(rv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're unable to see the value of <code>readvar</code> because it's only locally defined within the scope of the <code>readfile</code> function, not globally, as you're attempting to use it when calling <code>print(readvar)</code>. </p>
<p>If you need a value to persist outside the scope of the function, you must <code>return</code> it to where the function is called, like so: </p>
<pre><code>def readfile(FILE):
    file = open(FILE, "r")
    file_data = file.read()
    file.close()
    return file_data

file_data = readfile("my_file.txt")
print(file_data)
</code></pre>
<p>I'd also suggest using a <code>with</code> block when performing file operations. It's best practice as to ensure the file handle is correctly closed, even if exceptions occur. This improves the handling of any errors the operation may encounter. For example: </p>
<pre><code>def writefile(FILE, DATA):
    data = str(DATA) 

    with open(FILE, 'w') as write_stream:
        write_stream.write(data)

def readfile(FILE):
    with open(FILE, 'r') as read_stream:
        file_data = read_stream.read()

    return file_data

file_data = readfile("my_file.txt")
print(file_data)
</code></pre>
<p>If you wanted to access the file line-by-line, we simply include a <code>for</code> loop within the scope of <code>with</code>. For example, printing each line of the file:</p>
<pre><code>def readfile(FILE):
    with open(FILE, 'r') as read_stream:
        for line in read_stream
            print(line)
</code></pre>
</div>
<span class="comment-copy">"I would expect the value stored in BAL.txt to come back" why would you expect that? You don't return anything from your function so your function implicitely returns <code>None</code> every time it is called. But yes, your function defined a <i>local variable called <code>readvar</code></i>. Why did you expect that local variable to be available in the global scope?</span>
<span class="comment-copy">Useful reading: <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">Python Scopes and Namespaces</a></span>
<span class="comment-copy">And you should use the <code>with</code> statement whenever you deal with files because it handles program crashes better. <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">Thank you this will make this a lot easier to write</span>
