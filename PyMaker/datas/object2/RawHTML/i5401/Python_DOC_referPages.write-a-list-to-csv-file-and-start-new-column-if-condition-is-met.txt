<div class="post-text" itemprop="text">
<p>I have a list with data points and 'identifiers' that looks like this:</p>
<pre><code>['identifier', 1, 2, 3, 4, 'identifier', 10, 11, 12, 13, 'identifier', ...]
</code></pre>
<p>I would like to write this list to a CSV file and start a new column for each identifier.
e.g.</p>
<pre><code> for data in list:
        if data=='identifier':
            ==&gt; create a new column in the CSV file and print the subsequent data points
</code></pre>
<p>I'm looking forward to hearing your suggestions.</p>
<p>Cheers,</p>
<p>-Sebastian</p>
</div>
<div class="post-text" itemprop="text">
<p>This solution does not write the data to a csv file, but using the csv library this is a simple step. What this does do is restructure the data from what you provided into a list of lists with each sublist being a single row of data.</p>
<pre class="lang-py prettyprint-override"><code>l = ['identifier', 1, 2, 3, 'identifier', 10, 11, 12, 13, 'identifier', 4, 3, 2, 1, 10]

def split_list(l, on):
    """Splits a list an identifier and returns a list of lists split on the
    identifier without including it."""
    splits = []
    cache = []
    for v in l:
        # Check if this is an identifier
        if v == on:
            # Add the cache to splits unless it is empty
            if cache:
                splits.append(cache)
                # Empty the cache
                cache = []
        else:
            cache.append(v)
    # Add the last cache to splits if it is not empyt
    if cache:
        splits.append(cache)
    return splits

def reshape_list(l, default=None):
    """Takes a list of lists assuming each list is a column of values and
    reshapes it to be a list of rows, if list are not all the same length None
    will be used to fill empyt spots."""
    result = []
    # Get the length of the longest list
    maxlen = max(map(len, l))
    for i in range(maxlen):
        # Create each row
        row = []
        # Extract the values from the columns
        for column in l:
            if i &lt; len(column):
                row.append(column[i])
            else:
                row.append(default)
        result.append(row)
    return result


print(l)
t = split_list(l, 'identifier')
print(t)
r = reshape_list(t)
print(r)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Generate demo data:</strong></p>
<pre><code>import random

random.seed(20180119) # remove to get random data between runs
id = 'identifier'

def genData():
    data = []
    for n in range(10+random.randint(1,10)):
        data.append(id)
        data.extend(random.choices(range(1,20),k=random.randint(3,12)))
    print(data)
    return data
</code></pre>
<p>Output:</p>
<pre><code>['identifier', 18, 6, 19, 10, 12, 18, 17, 12, 
 'identifier', 10, 17, 17, 10, 15, 12, 16, 18, 19, 18, 14, 9, 
 'identifier', 6, 10, 1, 14, 4, 
 'identifier', 3, 7, 7, 4, 8, 2, 16, 8, 1, 8, 16, 6, 
 'identifier', 6, 17, 8, 8, 13, 15, 7, 9, 4, 10, 15, 
 'identifier', 17, 8, 3, 8, 2, 19, 16, 2, 5, 6, 
 'identifier', 18, 6, 18, 19, 7, 8, 14, 7, 7, 19, 
 'identifier', 13, 7, 4, 13, 
 'identifier', 15, 8, 17, 8, 1, 12, 16, 7, 5, 19, 14, 9, 
 'identifier', 18, 16, 10, 7, 16, 18, 19, 6, 15, 8, 13, 15, 
 'identifier', 15, 2, 18, 13, 7, 
 'identifier', 17, 19, 15, 4, 18, 7, 13, 17, 8, 9, 
 'identifier', 9, 17, 18, 8, 17, 17, 17, 
 'identifier', 3, 16, 15, 13, 9, 
 'identifier', 15, 12, 2, 16, 2, 5, 16, 18]
</code></pre>
<p><strong>Reformat:</strong></p>
<pre><code>def partitionData(idToUse,dataToUse):
    lastId = None
    for (i,n) in enumerate(data):       # identify subslices of data
        if n == idToUse and not lastId:     # find first id, data before is discarded
          lastId = i
          continue

        if n == idToUse:                    # found id
          yield data[lastId:i]                  # yield sublist including idToUse
          lastId = i

    if (data[-1] != id):                    # yield rest of data
        yield data[lastId:]
</code></pre>
<p><strong>Write data:</strong></p>
<pre><code>data = genData()
partitioned = partitionData(id, data)

import itertools
import csv
with open('result.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile, delimiter=";")
    # like zip, but fills up shorter ones with None till longest index
    writer.writerows(itertools.zip_longest(*partitioned, fillvalue=None)) 
</code></pre>
<p><strong>result.csv:</strong></p>
<pre><code>identifier;identifier;identifier;identifier;identifier;identifier;identifier;identifier;identifier;identifier;identifier;identifier;identifier;identifier
10;6;3;6;17;18;13;15;18;15;17;9;3;15
17;10;7;17;8;6;7;8;16;2;19;17;16;12
17;1;7;8;3;18;4;17;10;18;15;18;15;2
10;14;4;8;8;19;13;8;7;13;4;8;13;16
15;4;8;13;2;7;;1;16;7;18;17;9;2
12;;2;15;19;8;;12;18;;7;17;;5
16;;16;7;16;14;;16;19;;13;17;;16
18;;8;9;2;7;;7;6;;17;;;18
19;;1;4;5;7;;5;15;;8;;;
18;;8;10;6;19;;19;8;;9;;;
14;;16;15;;;;14;13;;;;;
9;;6;;;;;9;15;;;;;
</code></pre>
<p>Links:<br/>
- <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">itertools.zip_longest</a><br/>
- <a href="https://docs.python.org/3/library/csv.html#writer-objects" rel="nofollow noreferrer">csv-writer</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like that, assuming <code>l</code> is your list:</p>
<pre><code>import pandas as pd
import numpy as np
pd.DataFrame(np.array(l).reshape(-1,5)).set_index(0).T.to_csv('my_file.csv',index=0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your dataset is not too large, you should prepare your data first, then serialize it to csv file.</p>
<pre><code>import csv

dataset = ['identifier', 1, 2, 3, 4, 'identifier', 10, 11, 12, 13, 'identifier', 21, 22, 23, 24]
columns = []
col = []
for datapoint in dataset:
    if datapoint == 'identifier':
        if col:
            columns.append(col)
            col = []
    else:
        col.append(datapoint)
columns.append(col)

rows_count = max((len(c) for c in columns))

with open('result.csv', 'w') as csvfile:
    writer = csv.writer(csvfile, delimiter=";")

    for x in range(rows_count):
        data = []
        for col in columns:
            if len(col) &gt; x:
                data.append(col[x])
            else:
                data.append("")
        writer.writerow(data)
</code></pre>
</div>
<span class="comment-copy">I'm looking forward to seeing your attempts. There's thousands of existing questions about reading/writing CSVs on this site already. What have you tried from your research?</span>
<span class="comment-copy">Hi, I have tried most of them. The element I am missing is to tell the writer to start a new column if a criteria is met.</span>
<span class="comment-copy">Please include your best attempt as an edit to the question. It's far more useful to you if we could also address your misconceptions while answering the question</span>
<span class="comment-copy">you might also think about why one "identifier" is followed by 4 values and why they shoudl go into new columns - you never talk about rows...</span>
<span class="comment-copy">@pault yes you can. The <code>writerows</code> method takes a nested list, each inner list representing a row (each item in that list being in a separate column). You could easily break this input down into rows and columns as a nested list with <code>for</code> loops and probably compress that down into list comprehensions.</span>
<span class="comment-copy">there is no defined answer to the questions as it is still unclear. any answer you provide will be based on your assumtion what the Q wanted, not his intent as stated in the Q</span>
<span class="comment-copy">This is how I understood the question.</span>
<span class="comment-copy">Got a live, thanks :) I came to the same conclusion as you (format wise) but until he states what he wants its moot to post answers "thinking" to be right - but in most cases, the Q changes trice over that way.</span>
<span class="comment-copy">Question is now better specified and your solution breaks :) â– </span>
