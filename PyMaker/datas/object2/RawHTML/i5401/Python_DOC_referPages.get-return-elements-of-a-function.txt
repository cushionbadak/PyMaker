<div class="post-text" itemprop="text">
<p>Is there a way to introspect and fetch the return values of a function.
Eg.</p>
<pre><code>def foo():
    x = 10
    y = 20
    return x,y 
</code></pre>
<p>I am looking for a way to see the return elements <code>x</code> and <code>y</code> as a <code>list</code>. Is there a clean way to do this?</p>
<p><strong>NOTE:</strong></p>
<p>I am not looking for the values of the return elements. Just the name and count of them.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is generally not possible. Consider the function:</p>
<pre><code>def foo(x, y):
    if x &lt; y:
        return x
    else:
        return x, y
</code></pre>
<p>Here we have a function that can conditionally return 1 value or 2 values (with different names).</p>
<p>If your function has type annotations then you can get the return type using <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>inspect.getfullargspec</code></a>:</p>
<pre><code>def foo(x: int) -&gt; int:
    return x + 2

inspect.getfullargspec(foo).annotations['return']
</code></pre>
<p>returns</p>
<pre><code>int
</code></pre>
<p>i.e. the type that you specified the function would return.</p>
<p><strong>Note:</strong> Because they are fixed, <strong>it is possible</strong> to get the names/default values of function parameters using that same method. I.e. <code>inspect.getfullargspec(foo).args</code> returns <code>['x']</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A bit of <code>ast</code> transformations should get you there. A naive implementation can be done like this:</p>
<pre><code>import inspect
import ast 

def get_return_ids(f):
    def get_ids(elt):
        """Extract identifiers if present. If not return None"""
        if isinstance(elt, (ast.Tuple, )):
            # For tuple get id of each item if item is a Name
            return [x.id for x in elt.elts if isinstance(x, (ast.Name, ))]
        if isinstance(elt, (ast.Name, )):
            return [elt.id]

    # Get source and parse AST
    (tree, ) = ast.parse(inspect.getsource(f)).body

    # Find all return statements
    rs = [
        node for node in ast.walk(tree) if isinstance(node, (ast.Return, ))
    ]

    return [get_ids(r.value) for r in rs]
</code></pre>
<p>Example usage:</p>
<pre><code>&gt;&gt;&gt; get_return_ids(foo)
[['x', 'y']]
</code></pre>
<p>With more complex function (borrowed form <a href="https://stackoverflow.com/users/1953800/alex">Alex's</a> <a href="https://stackoverflow.com/a/48365074/8371915">answer</a>):</p>
<pre><code>&gt;&gt;&gt; def bar(x, y):
...     if x &lt; y:
...         return x
...     else:
...         return x, y
...     
&gt;&gt;&gt; get_return_ids(bar)
[['x'], ['x', 'y']]
</code></pre>
<p>In its current form it supports only small subset of scenarios, but you can extend it, if you need.</p>
</div>
<span class="comment-copy">Do you want to see <code>x, y</code> as an answer? What if there are more than 1 return statement in the function?</span>
<span class="comment-copy">simply <code>return [x,y]</code>? Am I missing something?</span>
<span class="comment-copy">This is a very difficult thing to do given functions can take many branches that can result in different return statements.</span>
<span class="comment-copy">If I understand correctly, I think OP wants, for a given function, the names of the variables returned and the count of variables returned.</span>
<span class="comment-copy">@VeltzerDoron It is <a href="https://stackoverflow.com/a/48366253/8371915">perfectly possible</a>, won't comment on pythonic, without a context :)</span>
<span class="comment-copy">I borrowed your "hard" example. I hope you don't mind (upvoted and attributed accordingly).</span>
<span class="comment-copy">@user8371915 no worries.</span>
