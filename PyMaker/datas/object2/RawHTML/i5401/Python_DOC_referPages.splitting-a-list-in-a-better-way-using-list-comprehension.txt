<div class="post-text" itemprop="text">
<p>I have a simple list that I am splitting and concatenating. My code uses for loop and if condition and ugly. Can you suggest a better way using list comprehension?</p>
<p><strong>My code</strong></p>
<pre><code>mylist = ['10.10.10.1','10.10.10.2,10.10.10.3,10.10.10.4,10.10.10.5','10.10.10.6']

mylist = [i.split(",") for i in mylist] 
list =[]
for x,y in enumerate(mylist):
    if len(y) == 1:
        list.append(y[0])
    else:
        for z in y:
            list.append(z)
print(list)
</code></pre>
<p>I am getting the below result and exactly the way i want
    ['10.10.10.1','10.10.10.2','10.10.10.3','10.10.10.4','10.10.10.5','10.10.10.6']</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with @juanpa.arrivillaga. However hope we can avoid that second looping since he is checking for empty values returning while splitting</p>
<pre><code>In [7]: s=['10.10.10.1','','10.10.10.2,10.10.10.3,10.10.10.4,10.10.10.5','10.10.10.6']

In [8]: [splitRec for rec in s for splitRec in rec.split(',') if splitRec]
Out[8]: 
['10.10.10.1',
 '10.10.10.2',
 '10.10.10.3',
 '10.10.10.4',
 '10.10.10.5',
 '10.10.10.6']

In [9]: s=['10.10.10.1',',,','10.10.10.2,10.10.10.3,10.10.10.4,10.10.10.5','10.10.10.6']

In [10]: [splitRec for rec in s for splitRec in rec.split(',') if splitRec]Out[10]: 
['10.10.10.1',
 '10.10.10.2',
 '10.10.10.3',
 '10.10.10.4',
 '10.10.10.5',
 '10.10.10.6']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want:</p>
<pre><code>[s for string in mylist for s in string.split(',')]
</code></pre>
<p>Note, your original approach wouldn't be so bad if you just simplified. No need for <code>enumerate</code> and no need to check the length, so just:</p>
<pre><code>final_list =[]
for sub in mylist:
    for s in sub:
         final_list.append(s)
</code></pre>
<p>By the way, you shouldn't shadow the built-in <code>list</code>. Use another name</p>
</div>
<div class="post-text" itemprop="text">
<p>Not a comprehension, but good anyway, I think.</p>
<pre><code>','.join(mylist).split(',')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can first just split each string on <code>','</code>:</p>
<pre><code>&gt;&gt;&gt; mylist = ['10.10.10.1','10.10.10.2,10.10.10.3,10.10.10.4,10.10.10.5','10.10.10.6']
&gt;&gt;&gt; split_str = [x.split(',') for x in mylist]
&gt;&gt;&gt; split_str
[['10.10.10.1'], ['10.10.10.2', '10.10.10.3', '10.10.10.4', '10.10.10.5'], ['10.10.10.6']]
</code></pre>
<p>Then if you want to flatten it, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(split_str))
['10.10.10.1', '10.10.10.2', '10.10.10.3', '10.10.10.4', '10.10.10.5', '10.10.10.6']
</code></pre>
</div>
<span class="comment-copy">This question is probably better served to be asked here: <a href="https://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
<span class="comment-copy">Yeah I agree however the empty values of list also needs a loop or a logic to be filtered out. That's when I thought of using a list comp also since we are looking out for a list type as return. Just a thought.</span>
<span class="comment-copy">@Varad I don't see any empty values in their list.</span>
<span class="comment-copy">Yeah, its not there in his given list. However he is adding a logic in his program where is enumerates and tries to find the length of list to see if its empty. That made me think he is looking to filter out the empty ones.</span>
<span class="comment-copy">@Varad that isn't what the conditional logic checks in OPs implementation, indeed, it is completely equivalent to what I have in my answer,  and it doesn't filter out empty values</span>
<span class="comment-copy">@Varad Huh? There's only one length check, and it's for length 1 (and completely unnecessary).</span>
