<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15363138/scope-of-python-variable-in-for-loop">Scope of python variable in for loop</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>I don't understand how python deals with variables with same names in a program, especially in <code>for</code> loops.</p>
<p>The following is a python program</p>
<pre><code>for i in range(10):
    if i%2!=0:
        print i
        continue
    i += 2
    print i
</code></pre>
<p>The outcome is as follows</p>
<pre><code>2
1
4
3
6
5
8
7
10
9
</code></pre>
<p>I don't understand why I get the above-mentioned outcome. In my opinion, when <code>i</code> is 0, the program will execute <code>i+=2</code>, so <code>i</code> becomes 2, and is printed out. Then the <code>for</code> finishes one loop so that <code>i</code> is increased by 1. So after the first loop, <code>i</code> should become 3. I test my opinion using the following C++ program, the result is exactly what I expect.</p>
<pre><code>#include &lt;iostream&gt;
using namespace std;

int main(int argc, char const *argv[])
{
    int i;
    for (i = 0; i &lt; 10; ++i)
    {
        if(i%2!=0){
            cout &lt;&lt; i &lt;&lt; endl;
            continue;
        }
        i += 2;
        cout &lt;&lt; i &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
<p>The outcome is as follows:</p>
<pre><code>2
3
6
7
10
</code></pre>
<p>Why is the result of python program looks like that?</p>
<p>To further exploit the reasons, I add more <code>print</code> sentences to the python program as follows:</p>
<pre><code>for i in range(10):
    print 'round ', i
    if i%2!=0:
        print 'in if, i = ',i
        continue
    print 'before i+=2, i is ',i
    i += 2
    print 'after i+=2, i is ',i
</code></pre>
<p>Then the outcome becomes:</p>
<pre><code>round  0
before i+=2, i is  0
after i+=2, i is  2
round  1
in if, i =  1
round  2
before i+=2, i is  2
after i+=2, i is  4
round  3
in if, i =  3
round  4
before i+=2, i is  4
after i+=2, i is  6
round  5
in if, i =  5
round  6
before i+=2, i is  6
after i+=2, i is  8
round  7
in if, i =  7
round  8
before i+=2, i is  8
after i+=2, i is  10
round  9
in if, i =  9
</code></pre>
<p>It seems python treat <code>i</code>'s differently in different parts of the program. It implicitly declares another variable named <code>i</code>. But why? And what is the rule of python to decide whether to declare a new variable implicitly?</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't matter how you modify <code>i</code> inside the loop, the next iteration a new value will be fetched from the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=range#range" rel="nofollow noreferrer"><code>range</code></a> object and the value of <code>i</code> will be overwritten.</p>
<p>So the Python loop</p>
<pre><code>for i in range(10): ...
</code></pre>
<p>is <strong><em>not</em></strong> equivalent to the C loop</p>
<pre><code>for (i = 0; i &lt; 10; i = i + 1) { ... }
</code></pre>
<p>which uses the current value of <code>i</code> to calculate the new value. Instead it's more equivalent to</p>
<pre><code>for (i = 0; i &lt; 10; i = get_next_value()) { ... }
</code></pre>
<p>where <code>get_next_value()</code> doesn't consider the current value of <code>i</code> at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python simply draws elements from the iterable produced by <code>range(10)</code> and binds <code>i</code> to each of these elements, that's it. So, what Python is doing is:</p>
<pre><code>iterable = range(10)

try:
    while True:
        i = next(iterable) # this is important!

        # this is your code
except StopIteration:
    pass
</code></pre>
<p>As you can see, you can modify <code>i</code> the way you want, but it will be set equal to <code>next(iterable)</code> right on the next iteration.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what you get when you run <code>range(10)</code> in a python (2.7) shell:</p>
<pre><code>&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>So what your code is doing is the same as</p>
<pre><code>for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
    #the rest of the code...
</code></pre>
<p>Which means <code>i</code> is set to the next value in the array at each iteration, regardless of what you did with <code>i</code> in the previous iteration</p>
<p>Obs:</p>
<p>As was pointed out, in python 3 <code>range(10)</code> actually creates a range object <code>range(0,10)</code>, which will function like the list above in your example but isn't exactly the same thing. It's an object that stores only the start, stop and step values so as not to store the whole list, and calculates items as needed.</p>
<p>For the purpose of understanding what's going on in your question they're gonna be pretty much the same</p>
</div>
<span class="comment-copy">if I recall correctly, in python you can't alter the forloop variable so if you are manipulating it it gets reset on the next iteration as to what it should be based on the loop iteration. Hope this helps</span>
<span class="comment-copy">Apparently <code>for i in range(10):</code> in python isn't the same as <code>for (i = 0; i &lt; 10; ++i)</code> in C</span>
<span class="comment-copy">I suggest removing the C and C++ tags since this is a Python question.</span>
<span class="comment-copy">By the way, your question title is a little misleading since your question is not about different variables with the same name, but involves operations on a single variable.</span>
<span class="comment-copy">That is not true for Python 3 - there it returns a <code>range(0,10)</code> object</span>
<span class="comment-copy">Not "the same", but more <i>equivalent</i>.</span>
<span class="comment-copy">@UnholySheep thanks. I'm still using 2.7 for work so that still what runs by default in my head and my computer. Added an explanation for python3</span>
