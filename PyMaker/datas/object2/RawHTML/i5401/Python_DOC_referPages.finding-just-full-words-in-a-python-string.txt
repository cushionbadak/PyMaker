<div class="post-text" itemprop="text">
<p>Basically it all comes down to finding just the fullword, not matching also a substring thereof.</p>
<p>I have phrases like: </p>
<p>texto = "hello today is the first day of working week" and what I wanted to do is to split that phrase into words to see if any matched fullwords that I have obtained from a sql query, like this:</p>
<pre><code>sql = "select keyword from keywords"
    try:
        cursor.execute(sql)
        # Fetch all the rows in a list of lists.
        results = cursor.fetchall()
        for result in results:
            keywords.append(result) 
</code></pre>
<p>so there I have a tuple of keywords.</p>
<p>So, yes, of course, you would split the phrase like this:</p>
<pre><code>for word in texto.split():
    if word in keywords.__str__():
        print ("keyword %s detected in texto" % (word))
</code></pre>
<p>but while that does indeed find me words, it also "finds" me things that I would have not wanted or expected (a substring of a word):</p>
<p>I know that in PHP you would do something like this:</p>
<pre><code>if (preg_match("/\b$search\b/", texto)):
            {print "word found"}
</code></pre>
<p>and I ve read quite a few discussions on this at SO. Some people say that you just do split, (but that is what I have done), others say use this:</p>
<p>in isn't how it's done.</p>
<pre><code>&gt;&gt;&gt; re.search(r'\babc\b', 'abc123')
&gt;&gt;&gt; re.search(r'\babc\b', 'abc 123')
&lt;_sre.SRE_Match object at 0x1146780&gt;
</code></pre>
<p>is this latest example the way to do it? according to the shell interpreter it would match the second row.</p>
</div>
<div class="post-text" itemprop="text">
<p>I dont't see why split() should not work. The issue is the <code>.__str__()</code> (which I don't see any need for). It creates one single string in which the keywords are searched - and then it will find substrings as well. </p>
<p>The following is working for me:</p>
<pre><code>texto = "hello today is the first day of working week"
keywords = ["is", "day", "week", "work", "sun"]

for keyword in keywords:
    print("keyword", keyword, end=" ")
    if keyword in texto.split():
        print("found.")
    else:
        print("not found")
</code></pre>
<p><code>work</code> and <code>sun</code> should not match, <code>work</code> is a substring in the text, <code>sun</code> is not in the text.</p>
<p>Output is </p>
<pre><code>keyword is found.
keyword day found.
keyword week found.
keyword work not found
keyword sun not found
</code></pre>
</div>
<span class="comment-copy">Is the stuff about SQL relevant to the question, or could we remove it and just give a particular example input to the text processing problem?</span>
<span class="comment-copy">Did you read the docs for <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><code>re.search</code></a>? It returns a match object if it found something and <code>None</code> otherwise. This is exactly what you're seeing. <code>re.search(r'\babc\b', 'abc123') is None</code> and <code>re.search(r'\babc\b', 'abc 123') is not None</code> should both be true.</span>
<span class="comment-copy">what is the output of <code>keywords.__str__()</code>? If it is one string containing all keywords, is should be <code>.split()</code> as well. BTW: why do you use the __str__() at all? just removing it might fix the issue...</span>
<span class="comment-copy">Assuming your keywords list is really a list of single words, remove the <code>.__str__()</code> as this is giving you the string representation of the list. And then the <code>in</code> statement searches for your words in that string instead of in the list.</span>
<span class="comment-copy">yes the sql is relevant because I think it brings me objects not words, that is why I had to use the .__str__() to make a string representation of that object that could then be workable when searching for words in a phrase</span>
<span class="comment-copy">thank you everybody, it seems that the .__str__() was the reason of the problems..</span>
<span class="comment-copy">Keywords is a list of tuples, that is [('Europe',), ('Spain',), ('France',)]</span>
<span class="comment-copy">just change <code>keyword</code> to <code>keyword[0]</code> to get the string from the tuple. BTW: If there are performance issues, you could move the <code>.split()</code> out of the loop by creating a new split list before the loop.</span>
