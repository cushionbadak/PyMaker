<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7828867/how-to-efficiently-compare-two-unordered-lists-not-sets-in-python">How to efficiently compare two unordered lists (not sets) in Python?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>Assuming:</p>
<pre><code>a = [(1,2,3),(4,5,6)]
b = [(4,5,6),(1,2,3)]
</code></pre>
<p>I want the following comparison to be True. Meaning position of tuple inside list doesn't matter.</p>
<pre><code>a == b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sort the lists, then compare them: </p>
<pre><code>a = [(1,2,3),(4,5,6)]
b = [(4,5,6),(1,2,3)]
sorted(a)==sorted(b)
# True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a <a href="https://en.wikipedia.org/wiki/Multiset" rel="nofollow noreferrer"><strong>multiset</strong></a> - <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> object in Python - from both lists and compare those:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = [(1,2,3), (4,5,6)]
&gt;&gt;&gt; b = [(4,5,6), (1,2,3)]
&gt;&gt;&gt; Counter(a) == Counter(b)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about repetitions, use sets: <code>set(a) == set(b)</code></p>
<p>Otherwise, sort them: <code>sorted(a) == sorted(b)</code></p>
</div>
<span class="comment-copy">Sort the lists, then compare them.</span>
<span class="comment-copy">@PatrickHaugh Won't work if there are dupes in one but not the other.</span>
<span class="comment-copy">Looks like an overkill... Why not just sort the lists?</span>
<span class="comment-copy">What makes you think it's an overkill as compared to O(nlogn) sorting ? You can't tell except you time both.</span>
<span class="comment-copy">Interesting approach - I wonder what the performance of <code>Counter</code> is compared to a sort? My gut feeling is that it would be faster...</span>
<span class="comment-copy">@DYZ Correct me if i'm wrong, but building the <code>Counter</code> should be <code>O(n)</code>, while sorting is <code>O(nlogn)</code></span>
<span class="comment-copy"><a href="https://repl.it/@Haugh/MidnightblueTightKudu" rel="nofollow noreferrer">Here's a REPL</a> I threw together to check (using bare ints, not tuples).  As expected, there comes a point where <code>Counter</code> pulls ahead in speed, though not by much compared to <code>sorted</code>.</span>
