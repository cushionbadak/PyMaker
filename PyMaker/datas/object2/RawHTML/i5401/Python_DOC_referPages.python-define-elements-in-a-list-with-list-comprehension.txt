<div class="post-text" itemprop="text">
<p>I'm wondering if it is possible to define a range of elements within a list definition by list comprehension. I would like to achieve something like this as a result:</p>
<pre><code>&gt;&gt; ['a', 'b', 1, 2, 3, 'c']
</code></pre>
<p>I tried this:</p>
<pre><code>result_list = ['a', 'b', [i for i in range(3)] 'c']
</code></pre>
<p>But this yields <code>['a', 'b', [1, 2, 3], 'c']</code></p>
<p>Or if i try with tuple, I get a generator object like so: <code>['a', 'b', &lt;generator object &lt;genexpr&gt; at 0x0000000002C9A9E8&gt;, 'c']</code></p>
<p>Can it be done somehow?
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what you need:</p>
<pre><code>result_list = ['a', 'b', *[i for i in range(3)], 'c']
print(result_list)  # ['a', 'b', 0, 1, 2, 'c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In recent versions of Python 3 you can use star unpacking inside the list definition:</p>
<pre><code>result_list = ['a', 'b', *[i for i in range(3)], 'c']
print(result_list)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['a', 'b', 0, 1, 2, 'c']
</code></pre>
<p>Bear in mind that it can get messy if you mix data types inside a list. If you want a heterogeneous collection, it's generally better to use a tuple.</p>
<hr/>
<p>Also note that while </p>
<pre><code>[[i for i in range(u)] for u in range(3)]
</code></pre>
<p>is valid, and will produce</p>
<pre><code>[[], [0], [0, 1]]
</code></pre>
<p>you can't get a flattened version by doing</p>
<pre><code>[*[i for i in range(u)] for u in range(3)]
</code></pre>
<hr/>
<p>If you're stuck on an older version of Python, your best option is to use <a href="https://docs.python.org/2/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>:</p>
<pre><code>import itertools

src = ['a', 'b', [i for i in range(3)], 'c']
result_list = list(itertools.chain.from_iterable(src))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>result_list = ['a', 'b'] + [i for i in range(1, 4)] + ['c']</code></p>
</div>
<div class="post-text" itemprop="text">
<p>As documented in <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists</a> you can unpack lists as arguments using the * character. </p>
<p>So your answer would be:</p>
<pre><code>result_list = ['a', 'b', *[i for i in range(3)], 'c']
</code></pre>
</div>
<span class="comment-copy"><code>['a', 'b'] + [i for i in range(1,4)] + ['c']</code> ?</span>
<span class="comment-copy">Flatten the list <code>list(chain.from_iterable(['a', 'b', [i for i in range(3)], 'c']))</code></span>
<span class="comment-copy">@khelwood: yes, this is obvious, but I must do it inside the scope of an   existing list definition.</span>
<span class="comment-copy">this is what i got   <code>&gt;&gt;&gt; result_list = ['a', 'b', *[i for i in range(3)], 'c']   File "&lt;stdin&gt;", line 1 SyntaxError: can use starred expression only as assignment target</code></span>
<span class="comment-copy">i am with python 3</span>
<span class="comment-copy">@SwadhikarC You should be using <code>3.6</code>.</span>
<span class="comment-copy">anyways +1 for the idea. Hope its not working in my machine!</span>
<span class="comment-copy">its python 3.4.1</span>
<span class="comment-copy"><code>['a', 'b', *range(3), 'c']</code> works just as nicely.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Sure, but I assume the OP wants to be able to use general list comps, and they just used <code>[i for i in range(3)]</code> to keep the example simple.</span>
