<div class="post-text" itemprop="text">
<p>I know this is going to be basic for most of you, but bear with me, I'm trying to dust off the cobwebs, and build up the muscle memory.</p>
<p>I have a host dict that contains a hostname key, and list values. I would like to be able to remove any item of fruit_ from the list of each value. </p>
<pre><code>host = { 
  'abc.com': ['fruit_apple', 'fruit_orange', 'veg_carrots'], 
  '123.com': None, 
  'foo.com': ['fruit_tomatoes', 'veg_potatoes']
}

for v in host.values():
  if v is not None:
    for x in v:
      try:
        # creating my filter
        if x.startswith('fruit_'):
        # if x finds my search, get, or remove from list value
         host(or host.value()?).get/remove(x)# this is where i'm stuck
        print(hr.values(#call position here?)) # prove it
      except:
        pass
</code></pre>
<p>I'm stuck around the commented area, I feel like I'm missing another iteration (new list somewhere?), or maybe I'm not understanding how to write the list value back. Any direction would be helpful. </p>
</div>
<div class="post-text" itemprop="text">
<p>A better way to filter items from a list is to use list comprehension with a filtering condition and create a new list, like this.</p>
<pre><code>host = {
    'abc.com': ['fruit_apple', 'fruit_orange', 'veg_carrots'],
    '123.com': [None],
    '456.com': None,
    'foo.com': ['fruit_tomatoes', 'veg_potatoes']
}


def reconstruct_list(vs):
    return vs if vs is None else [
        v for v in vs if v is None or not v.startswith('fruit_')
    ]


print({k: reconstruct_list(vs) for k, vs in host.items()})
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'abc.com': ['veg_carrots'], '123.com': [None], '456.com': None, 'foo.com': ['veg_potatoes']}
</code></pre>
<p>In this particular case, individual values of the lists are filtered and a new dictionary object is created with dictionary comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>What about rebuilding the dictionary with a dict comprehension:</p>
<pre><code>&gt;&gt;&gt; host = { 
  'abc.com': ['fruit_apple', 'fruit_orange', 'veg_carrots'], 
  '123.com': [None] , 
  'foo.com': ['fruit_tomatoes', 'veg_potatoes']
}

&gt;&gt;&gt; {k: [x for x in v if not str(x).startswith('fruit_') or not x] for k, v in host.items()}
{'abc.com': ['veg_carrots'], '123.com': [None], 'foo.com': ['veg_potatoes']}
</code></pre>
<p>Or if <code>'123.com'</code> has just <code>None</code> as a value, you can do this:</p>
<pre><code>&gt;&gt;&gt; host = { 
  'abc.com': ['fruit_apple', 'fruit_orange', 'veg_carrots'], 
  '123.com': None , 
  'foo.com': ['fruit_tomatoes', 'veg_potatoes']
}

&gt;&gt;&gt; {k: v if not v else [x for x in v if not x.startswith('fruit_')] for k, v in host.items()}
{'abc.com': ['veg_carrots'], '123.com': None, 'foo.com': ['veg_potatoes']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try something like this:</p>
<pre><code>host = {
  'abc.com': ['fruit_apple', 'fruit_orange', 'veg_carrots'],
  '123.com': None,
  'foo.com': ['fruit_tomatoes', 'veg_potatoes']
}


print({i:[k for k in j if not k.startswith('fruit_')] if j!=None  else None for i,j in host.items() })
</code></pre>
<p>But if there is no None then you can try this interesting approach:</p>
<pre><code>print(dict(map(lambda z,y:(z,list(filter(lambda x:not x.startswith('fruit_'),host[y]))),host,host)))
</code></pre>
</div>
<span class="comment-copy">In your example <code>if v is not None:</code> will always be <code>True</code>. you probably knew that already</span>
<span class="comment-copy">Yes, that's fine. I guess you have a <code>None</code> in the values of <code>host</code> that isn't posted?. I just wanted to make sure that you didn't think it would catch <code>[None]</code></span>
<span class="comment-copy">I guess I should update that, ''123.com': [ None ], ' should probbly read '123.com': None, not in a list.</span>
<span class="comment-copy">No problem, I didn't mean to nit pick, I guess you did already know!</span>
<span class="comment-copy">@hobbes I think your data has <code>None</code> as a value instead of <code>[None]</code> in some cases. Is that correct?</span>
<span class="comment-copy">that is correct, i've made the update above. it should have not been in a list.</span>
<span class="comment-copy">@hobbes I updated the answer to fit both the <code>None</code> cases. Its just ignoring <code>None</code> from the filtering.</span>
<span class="comment-copy">Wow, that did it, thank you! I will need to take some time to digest that list comprehension, I understand a bit of it, but still grasping on breaking it down into chunks, into an order of operation.</span>
<span class="comment-copy">@hobbes Start with <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">this</a>.</span>
<span class="comment-copy">also correct, thank you. this is nice to compare to when breaking it down your examples, and the one posted above.</span>
