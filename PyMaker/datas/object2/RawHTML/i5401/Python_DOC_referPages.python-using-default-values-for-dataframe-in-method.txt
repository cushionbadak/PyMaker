<div class="post-text" itemprop="text">
<p>let's say I have the following code</p>
<pre><code>df1 = ['a']
df2 = ['a']

def some_method():
    global df1
    global df2
    df1 = pd.DataFrame(Some populated dataframe...)
    df2 = pd.DataFrame(Some populated dataframe...)

def test(my_df=df1):
    print(my_df)
</code></pre>
<p>In the following scenario, df1 outputs ['a'] when test() is called with no params. df1/df2 will print when they are passed in as params</p>
<pre><code>some_method()
test() # Prints out ['a']
test(df1) # Works as expected
test(df2) # Works as expected
</code></pre>
<p>Can someone please explain why the default value defined in the test method does not work?</p>
</div>
<div class="post-text" itemprop="text">
<p>What is happening here is a result of three tricky Python attributes that can be hard to remember: </p>
<ol>
<li>names are references to objects, but independent of the objects themselves</li>
<li>mutable and immutable objects handle chained references differently [1]</li>
<li>"the global namespace for a module is created when the module definition is read in". [2] </li>
</ol>
<p>When <code>test()</code> is defined, <code>my_df</code> is bound to the current global object referenced by <code>df1</code>, which in your case is <code>['a']</code>. When <code>some_method()</code> is called, it changes the reference for the global name <code>df1</code> to your dataframe, but <code>my_df</code> has already been bound to the object behind the previous <code>df1</code> (<code>['a']</code>). It is not bound to the <code>df1</code> reference itself.</p>
<p>An illustration to simplify:</p>
<pre><code>a = 1
b = a
a = 3
print(a)
&gt;&gt;&gt; 3
print(b)
&gt;&gt;&gt; 1
</code></pre>
<p>kbball suggests re-arranging, which works, because it defines <code>some_method()</code> and runs it before <code>test()</code> is defined, which means that during the <code>test()</code> definition, the global <code>df1</code> now references the dataframe. As before, <code>my_df=df1</code> points to the object behind the <code>df1</code> reference, but now that has changed to the dataframe, so <code>test()</code> will print that.</p>
<p>To see this in action, use your current code as posted but add to your test:</p>
<pre><code>print(df1) # will print out ['a']
some_method() # changes object references of global names df1, df2
print(df1) # will print out dataframe
test() # Prints out ['a']
test(df1) # Works as expected
test(df2) # Works as expected
</code></pre>
<p>Your solution then is to re-arrange your code to define <code>test()</code> after <code>some_method()</code> is called (you don't need the return that kbball includes), or, you can ensure that <code>df1</code> within test refers to the current global name <code>df1</code> each time it runs:</p>
<pre><code>def test(my_df=None):
    global df1
    if not my_df:
        my_df = df1
    print(my_df)

df1 = ['a']
test() # returns ['a']
some_method()
test() # returns dataframe
</code></pre>
<p>I know that's a long explanation, but I hope it clears it up for you. It's a wonky issue.</p>
<p>[1] <a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/" rel="nofollow noreferrer">https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/</a></p>
<p>[2] <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think you just need to do some re-arranging:</p>
<pre><code>import pandas as pd
import numpy as np

df1 = ['a']

def some_method():
  global df1
  df1 = pd.DataFrame(np.random.randint(0,100, size=(10, 4)), columns=list('ABCD'))
  return df1

some_method()

def test(my_df=df1):
    print(my_df)

test()

#output

    A   B   C   D
0  95  83  33  92
1  22  68  87  99
2  61  37  11  51
3  18  76  77  47
4   1   9  38  21
5  27  87  75  56
6  55  95  62  98
7  78  49  93  48
8  83  54  40  23
9   2  82   3  57
</code></pre>
</div>
<span class="comment-copy">This works for me, what does <code>print(df1)</code> show? Are you somehow overwriting or shadowing <code>df1</code> in some other part of your code?</span>
<span class="comment-copy">This should work in the way that you have presented it. when you execute <code>test()</code> what output do you get if any? do you get an error or nothing printed?</span>
<span class="comment-copy">Can you show both how you create/operate on <code>df1</code> and <code>df2</code> before this, and what happens when you run <code>test()</code>? Namely (!), are these the actual namespaces you have, or are <code>df1</code> and <code>df2</code> defined in a separate namespace from <code>test()</code>?</span>
<span class="comment-copy">ok, edited question again to be clearer. Hopefully this will help clear up some questions you have all had</span>
<span class="comment-copy">Thanks for the info!  I didn't realize that it bound it to the variables definition at the time of creation. I was kinda assuming it did your if clause under the hood :(</span>
<span class="comment-copy">Sure! I just discovered that your exact problem and related issues are described exactly under point 4.7 of the <a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions" rel="nofollow noreferrer">Control Flow docs</a>, in case you are interested. You hit a fairly obscure error, so no wonder it was confusing.</span>
<span class="comment-copy">Sorry I was trying to do bare-minimum code. Please see updated question</span>
<span class="comment-copy">I'm not sure that changing the ordering would solve the issue. If I place the test() call before the return statement in some_method() I still get ['a']</span>
<span class="comment-copy">He's sort of right, but this is not a great solution. I am writing out an explanation currently.</span>
<span class="comment-copy">Also (still a newbie) I assume that all defs can go safely to the top of the file since they don't get executed until called. Is that correct?</span>
