<div class="post-text" itemprop="text">
<pre><code>list1=[1,3,8,10,23,8,8,10,23,3,8,10,23,3,8,10,23]
list2=[10,23,3]
cnt=list1.count(list2[0])
cnt1=1
j=0
while (cnt1&lt;=cnt):
    list3=[]
    list3.append(list2[0])
    i=1
    k=list1.index(list2[0])
    while (i&lt;len(list2)):
        list3.append(list1[k+i])
        i=i+1
    print (list3)    
    if (list2==list3):
        print ("list2 is a subset")
        j=j+1
    else:
        print ("list2 is not a subset")

    list1.remove(list2[0])    
    cnt1=cnt1+1    
print (list2,"occurs",j,"times")
</code></pre>
<p>I am getting this error.</p>
<blockquote>
<pre><code>Traceback (most recent call last):
  File "C:\Python26\Lib\idlelib\sublist.py", line 12, in &lt;module&gt;
    list3.append(list1[k+i])
IndexError: list index out of range"
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You're definitely over-complicating this - to the point where it is not obvious as to what your strategy actually is.</p>
<p>Here's a simple algorithm you could try and integrate:</p>
<ol>
<li>Get the length of <code>list2</code></li>
<li>Iterate through <code>list1</code>, accessing slices of the list of length <code>list2</code> (eg the first slice would be <code>[1, 3, 8]</code>, then the next would be <code>[3, 8, 10]</code></li>
<li>Check if the slice is equal to <code>list2</code> - if it is then return True (or add 1 to the counter)</li>
<li>If you reach the end of the list - end</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can test all the <code>list1</code> slices of the proper length for equality with <code>list2</code>. You can then use <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><strong><code>sum</code></strong></a> to get the number of occurrences:</p>
<pre><code>list1 = [1,3,8,10,23,8,8,10,23,3,8,10,23,3,8,10,23]
list2 = [10,23,3]

l1, l2 = len(list1), len(list2)
num_occurrences = sum(list1[i:i+l2] == list2 for i in range(l1 - l2 + 1))
# 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one possible way to do it:</p>
<pre><code>from collections import deque
from itertools import islice

list1=[1,3,8,10,23,8,8,10,23,3,8,10,23,3,8,10,23]

list2=[10,23,3]

size = len(list2)

# convert to a queue
items = deque(list1)

count = 0

# iterate until no more sublists can be extracted
while len(items) &gt;= size:
    current = list(islice(items, 0, size))

    # if the current sublist is equal to list1, increment count
    if current == list2:
        count += 1

    # pop the first element from this queue, ready for next sublist
    items.popleft()

print (list2,"occurs",count,"times")
</code></pre>
<p>Which Outputs:</p>
<pre><code>[10, 23, 3] occurs 2 times
</code></pre>
<p>The approach of the above code:</p>
<ul>
<li>Convert <code>list1</code> to a <a href="https://docs.python.org/2/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> object, which can pop objects off the front in <code>O(1)</code> time. This is <code>items</code> in the code.</li>
<li>Store a <code>count</code> of identical lists found equal to <code>list2</code>.</li>
<li>Check if the <code>current</code> sub list, the first <code>n</code> elements in <code>items</code> as a list, is equal to <code>list2</code>. Increment the count if it is equal.</li>
<li>Pop the first item from <code>items</code> with <code>popleft()</code>, getting ready for the next sub list. So if my list is <code>[1, 2, 3, 4]</code>, After processing <code>[1, 2, 3]</code>, pop <code>1</code> from <code>items</code>, and the next sub list to check is <code>[2, 3, 4]</code>. </li>
<li>Keep doing this process until no <code>size</code> sub lists can be extracted. Then you can just print out the count at the end. </li>
</ul>
</div>
<span class="comment-copy">Not sure why you're complicating things this much. <code>from collections import Counter; print(not bool(Counter(list2) - Counter(list1)))</code></span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, doesn't this lose any ordering?</span>
<span class="comment-copy">Does it have to be a continuous sub_list, a slice?</span>
<span class="comment-copy">@StephenRauch Point, it does. If that's a requirement, then that doesn't work, sadly. I was thinking more along the lines of "subset" accounting for duplicates.</span>
