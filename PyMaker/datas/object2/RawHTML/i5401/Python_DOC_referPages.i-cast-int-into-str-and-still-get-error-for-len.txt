<div class="post-text" itemprop="text">
<p>The code below gives me an error that <code>int</code> has no length even though I cast it into <code>str</code>. Where is the problem there?</p>
<p>Code:</p>
<pre><code>n=39
x=str(n)
counter=0
mult=1
while len(x) != 1:
    for i in x:
        mult = mult * int(i)
    x=mult
    mult=1
    counter+=1
</code></pre>
<p>The output I get:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object of type 'int' has no len()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You assign an integer to <code>x</code> <em>in the loop</em>:</p>
<pre><code>x = mult
</code></pre>
<p>so the <em>next</em> iteration of your <code>while</code> loop now passes that integer to the <code>len()</code> function and you get your exception.</p>
<p>Convert the value to a string instead:</p>
<pre><code>x = str(mult)
</code></pre>
<p>I'd set <code>mult</code> to 1 inside the loop to simplify it, and test for <em>more than 1</em> digit:</p>
<pre><code>def digit_multiply_steps(n): 
    """Reduce n to one digit, multiplying the digits each step

    Returns the number of steps required to do so.

    """   
    x = str(n)
    counter = 0
    while len(x) &gt; 1:
        mult = 1
        for i in x:
            mult *= int(i)
        x = str(mult)
        counter += 1
    return counter

print(digit_multiply_steps(39))
</code></pre>
<p>The loop can also be done using the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code> function</a>, together with <a href="https://docs.python.org/3/library/operator.html#operator.mul" rel="nofollow noreferrer"><code>operator.mul()</code> function</a> for speed. The <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code> function</a> can be used to turn the characters of <code>x</code> back to integers to multiply with. We can use <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count()</code></a> to produce the counter:</p>
<pre><code>from functools import reduce
from itertools import count
from operator import mul

def digit_multiply_steps(n): 
    """Reduce n to one digit, multiplying the digits each step

    Returns the number of steps required to do so.

    """   
    x = str(n)
    for counter in count():
        if len(x) == 1:
            return counter
        x = str(reduce(mul, map(int, x), 1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>while</code> loop check the condition after all code, right after <code>counter+=1</code> in your code. At that time, your <code>x</code> variable is a product, (maybe int?) as mult, and then python interpreter try to apply <code>__len__</code> in the int object, so it raise a <code>TypeError</code>.</p>
</div>
<span class="comment-copy"><code>x</code> becomes an <code>int</code> after the first iteration. You have to cast it back to <code>str</code> to proceed.</span>
<span class="comment-copy">What is this code supposed to be doing though?</span>
<span class="comment-copy">It's just  a typographical mistake and ignorance of course</span>
<span class="comment-copy">I've added the actual error output; in future <b>always</b> add that to debug questions. It was easy enough for me to deduce that here but we normally close questions lacking that information. You should really also add what output you <i>expected</i> to get instead. See <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. You are likely receiving downvotes because your question lacks those all-important details telling us what your code should do, and what happens instead, in detail.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ: multiplying the digits of a number until only one digit remains. It's a common puzzle. I'm guessing the goal is to count how many steps it takes.</span>
