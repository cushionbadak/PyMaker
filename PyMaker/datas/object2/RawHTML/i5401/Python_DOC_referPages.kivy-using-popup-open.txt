<div class="post-text" itemprop="text">
<p>I have code with <em>Popup</em>, which containts <em>TextInput</em>. Form code in example is working, but with using <em>TextInputPopup</em> constructor is falling down after using <em>Popup.open()</em> (version with costructor is in the note).</p>
<ul>
<li>What must I repair for using constructor?</li>
<li>Parameter from <em>TextInputPopup</em> is used in function <em>TextInputPopup.next_step()</em>. Can I use this parametr in function <em>SaveAs.on_call_popup()</em>, which call <em>TextInputPopup</em>? How do I it?</li>
</ul>
<p>Example:</p>
<pre><code>   Builder.load_string('''
    &lt;SaveAs&gt;:
        teinp: teinp
        Button:
            text:'Hi users'
            on_release: root.on_call_popup()
        TextInput:
            id: teinp
            text:'text input'

    &lt;TextInputPopup&gt;:
        answer: answer

        title: root.title
        size_hint: None, None
        size: app.root.width/2, app.root.height/2
        auto_dismis: False

        BoxLayout:
            orientation: 'vertical'
            Label:
                text: root.label
            TextInput:
                id: answer
                text: ''
            BoxLayout:
                Button:
                    text: 'Cancel'
                    on_press: root.dismiss()
                Button:
                    text: 'OK'
                    on_press: root.dismiss()
    ''')

    class TextInputPopup(Popup):
        title = StringProperty()
        label = StringProperty()
        answer = ObjectProperty()
        '''
        def __init__ (self,title, label):
            self.set_description(title, label)
            return
        '''
        def set_description(self,title, label):
            self.title = title
            self.label = label
            return

        def get_answer(self):
            return self.answer.text

    class SaveAs(BoxLayout):
        teinp = ObjectProperty()

        def on_call_popup(self):
            self.poti = TextInputPopup()
    #        self.poti = TextInputPopup('File Manager', 'Name')
            self.poti.open()   
            self.poti.set_description('File Manager', 'Name') 
            self.poti.bind(on_dismiss = self.next_step)
            return

        def next_step(self, obj):
            a = self.poti.get_answer()
            self.teinp.text = self.poti.get_answer()
            return

    class ExplorerApp(App):

        def build(self):
            return SaveAs()

    if __name__ == '__main__':
        ExplorerApp().run()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You must call the initializer of the parent class (<code>__init__</code>), for that use <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super</code></a>:</p>
<pre><code>from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.popup import Popup
from kivy.properties import StringProperty, ObjectProperty
from kivy.lang.builder import Builder


Builder.load_string('''
&lt;SaveAs&gt;:
    teinp: teinp
    Button:
        text:'Hi users'
        on_release: root.on_call_popup()
    TextInput:
        id: teinp
        text:'text input'

&lt;TextInputPopup&gt;:
    answer: answer
    title: root.title
    size_hint: None, None
    size: app.root.width/2, app.root.height/2
    auto_dismis: False

    BoxLayout:
        orientation: 'vertical'
        Label:
            text: root.label
        TextInput:
            id: answer
            text: ''
        BoxLayout:
            Button:
                text: 'Cancel'
                on_press: root.dismiss()
            Button:
                text: 'OK'
                on_press: root.dismiss()
 ''')


class TextInputPopup(Popup):
    title = StringProperty()
    label = StringProperty()
    answer = ObjectProperty()

    def __init__(self, title, label, **kwargs):
        super(TextInputPopup, self).__init__(**kwargs)
        self.set_description(title, label)

    def set_description(self, title, label):
        self.title = title
        self.label = label

    def get_answer(self):
        return self.answer.text


class SaveAs(BoxLayout):
    teinp = ObjectProperty()

    def on_call_popup(self):
        poti = TextInputPopup('File Manager', 'Name')
        poti.open()
        poti.bind(on_dismiss=self.next_step)

    def next_step(self, popup):
        self.teinp.text = popup.get_answer()


class ExplorerApp(App):

    def build(self):
        return SaveAs()


if __name__ == '__main__':
    ExplorerApp().run()
</code></pre>
<p>If you use <code>__init__</code> in your class derived, you are re-defining parent constructor, which would normally run the initialization of the base class. <code>super</code> is used to run the parent <code>__init__</code> without an explicit call to the parent class and allow you to  pass parameters to it.</p>
<p>In principle, whenever you overwrite <code>__init__</code> in a daughter class you should call the <code>__init__</code> of your parent class with the necessary arguments to be properly initialized.</p>
</div>
<span class="comment-copy">@ Thank you for the quick advice. Explain me please next. Function 'super' call constructor of parent, Why must I use 'super' in both reasons?</span>
<span class="comment-copy">In your <code>TextInputPopup</code> class you need the <code>__init__</code> to pass the title and label of your popup, this rewrites the <code>__init__</code> of the parent class (<code>Popup</code> class), so you need to explicitly call the constructor of the base class to initialize the widget properly. In your <code>SaveAs</code> class it is not necessary because you do not need an initializer, I'm sorry, it was a problem with the autocomplete of my IDE ... I have edited the answer adding some more information.</span>
<span class="comment-copy">@ a) Does it mean that I must use 'super' in constructor for every child whose parent have constructor? b) Cann you add comment for 2nd qustion in introductory question (with example)</span>
