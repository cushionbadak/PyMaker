<div class="post-text" itemprop="text">
<p>Hello I am working with a lot of numbers like this: 0.00000005, 0.000341, 3423.52322154. Basically bitcoin and altcoin numbers.</p>
<p>Now I know that if I do this for example in python </p>
<pre><code>&gt;&gt;&gt; 0.1 + 0.2
0.30000000000000004
</code></pre>
<p>It's not correct and that I can str my variables and put them inside Decimal module to fix it. My problem is that I don't know when float is /good enough/ and because I am probably a bit autistic when it comes to performance and understanding what I'm doing I am thinking that I'm perhaps using decimal module too much when it isn't needed.</p>
<p>So how can I know when I need to use Decimal when I'm doing math and when I don't have to?</p>
<p>Edit: Ok, a lot of people are assuming that because im dealing with bitcoin and altcoin numbers i want to calculate it to buy exact sums or whatever, that is not the case <em>always</em> for me. I also want to take like 200 numbers every second and quickly calculate amount * rate for displayment purposes and perhaps float can be <em>good enough</em>. I suppose there's no <em>easy</em> answer for these things though(i suppose i have to read up on binary representation of numbers etc).</p>
<p>Also people have suggested i represent the numbers as integers and then also store the decimal place and then put it back after the calculation. I don't know if this is faster than decimal?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has the <code>decimal</code> module that comes along with he language: although it is technically "floating point", it really deals with decimal numbers up to the precision of digits you specify.</p>
<p>So it is possible to use the 18 or so numbers after the decimal point some of the cryptocurrencies use (like ethereum) with zero erros introduced due to base shift or rounding.</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal as D
&gt;&gt;&gt; D("0.1") + D("0.2") 
Decimal('0.3')
&gt;&gt;&gt; (D("0.1") + D("0.2")) * D("0.00000000001") + D("0.1") 
Decimal('0.100000000003')
&gt;&gt;&gt; 
</code></pre>
<p>It may look artificial since Decimal instances have to be constructed from strings, but that is just to avoid the errors like those you see in first place. These objects support all numeric operations, and can be easily be converted to strings with no rounding errors for usage on any API you have.</p>
<p><a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">https://docs.python.org/3/library/decimal.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If it needs to be very precise, you shouldn't really use floats. Instead you should store two integers, one that has the number without a decimal point and one that shows how many decimal places it should divide into while displaying or something.<br/><br/>
The times that float may be useful is when you are doing operations that are within 3 or 4 decimal places, you can use the round function to the amount of desired decimal places after every calculation.</p>
</div>
<span class="comment-copy">If you're dealing with money, <code>float</code>s not good enough</span>
<span class="comment-copy">When you don't need the result to be completely accurate. Ex: Calculating the position of a character in a video game at x,y. Does it really matter if x,y is off by .0001? No. Are you doing accounting? Working with money? You don't use float. If you are concerned about your calculations being off by .0000000000004 in the first place then just use the correct type and don't use float. Don't make a workaround to pass them to another function if there is a remainder.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/20354423/clarification-on-the-decimal-type-in-python">Clarification on the Decimal type in Python</a></span>
<span class="comment-copy">In a nutshell: anything <i>visual</i> (charts, screen coordinates, 3D renderings) usually doesn't need to be terribly precise and can get away with fast floats. Anything outside of that you need to know for yourself whether your numbers need to be <i>accurate</i> or <i>fast</i>. Chances are if you're just doing <i>light arithmetic</i> and are not crunching millions of numbers per second, you prefer <i>accuracy</i>.</span>
<span class="comment-copy">"When can I safely use float to do math?" -- when you don't care about the resulting round-off error.</span>
<span class="comment-copy">They understand that, the problem is what is <i>"very precise"</i>?</span>
<span class="comment-copy">if you are doing something that has significant/import to keep values in the decimal place like butcoins</span>
<span class="comment-copy">@NickA The definition of <i>"very precise"</i> is going to depend on the application, which is why this is a very hard question to answer accurately.</span>
<span class="comment-copy">@glibdud I realise that, I was trying to indicate that this answer doesn't really make reference to that, it's more of a "how to fix broken floats"</span>
<span class="comment-copy">round on a decimal for " the amount of desired decimal places after every calculation." won't help much as certain numbers simply can't be represented in base 2 with - just like 1/3 can't be represented in base 10.  The best way to avoid errors is just use base 10 all the way.</span>
