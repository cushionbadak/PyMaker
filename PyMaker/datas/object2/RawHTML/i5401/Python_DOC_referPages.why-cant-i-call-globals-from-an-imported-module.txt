<div class="post-text" itemprop="text">
<p>let's say I have a module, spam. In spam, I put this code:</p>
<pre><code>import __main__ 
print(__main__.globals())
</code></pre>
<p>Then, from any old python script, I import spam. From this I would get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "main.py", line 1, in &lt;module&gt;
    import spam
  File "/home/runner/spam.py", line 7, in &lt;module&gt;
    print(__main__.globals())
AttributeError: module '__main__' has no attribute 'globals'
</code></pre>
<p>But, however, when I do this inside of the script importing spam;</p>
<pre><code>import spam
a = globals()
</code></pre>
<p>and I repeat the same code with one difference;</p>
<pre><code> ... 
print(eval(main_mod[0]).a)
</code></pre>
<p>I get the result I hoped for, which was a list of all the globals in <code>__main__</code>. Why can't I just call it normally? I don't want to have to code
in a variable to hold <code>globals()</code> every time I import "spam". I'm sure others could benefit from this, I tried it with other builtins from <code>__main__</code> like <code>abs</code> but same error. By the way, I'm trying to get <code>__main__</code>'s globals so that I can get the names of functions of whatever is importing spam. I need it so that I can also access variables from <code>__main__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The global variables in a module are the contents of the module object's <code>__dict__</code>, not an attribute named <code>globals</code>. You can access the <code>__dict__</code> of any object using the builtin function <code>vars</code>:</p>
<pre><code>vars(eval(main_mod[0]))
</code></pre>
<p>I'd also suggest you use <code>importlib</code> rather than <code>exec</code> and <code>eval</code> with <code>import</code> statements:</p>
<pre><code>import importlib

main = importlib.import_module('__main__')
main_by_name = importlib.import_module(main.__file__.split('.')[0])
main_globals = vars(main_by_name)
</code></pre>
</div>
<span class="comment-copy">Because globals is not a property of the module, it's a built-in that returns the values in the current global namespace.</span>
<span class="comment-copy">It doesn't look like you have the () needed at the end of globals in your first code sample.</span>
<span class="comment-copy">I don't get this. If you want the globals of the current <code>__main__</code> module, why don't you just do <code>print(vars(__main__))</code>? What's the point of all that ugly <code>exec/eval</code> stuff?</span>
<span class="comment-copy">@ekhumoro  I'm not too familiar with all of the builtins, enlighten me on what vars does.</span>
<span class="comment-copy">@MegaFirm. You don't have to use <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer">vars</a> - you could also use <code>__dict__</code> (as explained in the answer below). But my point was: why don't you just use the <code>__main__</code> object that you've already imported? What do you gain from that <code>exec/eval</code> stuff? Can you give a more specific use-case for what you're really trying to achieve?</span>
<span class="comment-copy">I'm not sure I understand your comments. Stack Overflow isn't really designed for ongoing conversations, it's just for questions and answers. One thing to be aware of, you usually don't need to go through the <code>__dict__</code> of a module (or any other object) manually. Instead, you can just use <code>getattr</code> and <code>setattr</code> to modify the attributes directly.</span>
<span class="comment-copy">Okay. I'll be short &amp; sweet next time, and thanks for the tip.</span>
