<div class="post-text" itemprop="text">
<p>I know it is possible to consistently rewrite the last line displayed in the terminal with "\r", but I am having trouble figuring out if there is a way to go back and edit previous lines printed in the console.</p>
<p>What I would like to do is reprint multiple lines for a text-based RPG, however a friend was also wondering about this for an application which had one line dedicated to a progress bar, and another describing the download.</p>
<p>i.e. the console would print:</p>
<p>Moving file: NameOfFile.txt<br/>
Total Progress: [########              ] 40%</p>
<p>and then update appropriately (to both lines) as the program was running.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Unix, use the <a href="http://docs.python.org/howto/curses.html">curses</a> module.</p>
<p>On Windows, there are several options:</p>
<ul>
<li>PDCurses: <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></li>
<li>The HOWTO linked above recommends the <a href="http://effbot.org/zone/console-index.htm">Console</a> module</li>
<li><a href="http://newcenturycomputers.net/projects/wconio.html">http://newcenturycomputers.net/projects/wconio.html</a></li>
<li><a href="http://docs.activestate.com/activepython/2.7/pywin32/win32console.html">http://docs.activestate.com/activepython/2.7/pywin32/win32console.html</a></li>
</ul>
<p>Simple example using curses (I am a total curses n00b):</p>
<pre><code>import curses
import time

def report_progress(filename, progress):
    """progress: 0-10"""
    stdscr.addstr(0, 0, "Moving file: {0}".format(filename))
    stdscr.addstr(1, 0, "Total progress: [{1:10}] {0}%".format(progress * 10, "#" * progress))
    stdscr.refresh()

if __name__ == "__main__":
    stdscr = curses.initscr()
    curses.noecho()
    curses.cbreak()

    try:
        for i in range(10):
            report_progress("file_{0}.txt".format(i), i+1)
            time.sleep(0.5)
    finally:
        curses.echo()
        curses.nocbreak()
        curses.endwin()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ultimately, if you want to manipulate the screen, you need to use the underlying OS libraries, which will typically be:</p>
<ul>
<li>curses (or the underlying terminal control codes as tracked by the terminfo/termcap database) on Linux or OSX</li>
<li>the win32 console API on Windows.</li>
</ul>
<p>The answer from @codeape already gives you some of the many options if you don't mind sticking to one OS or are happy to install third party libraries on Windows.</p>
<p>However, if you want a cross-platform solution that you can simply pip install, you could use <a href="https://github.com/peterbrittain/asciimatics" rel="nofollow">asciimatics</a>.  As part of developing this package, I've had to resolve the differences between environments to provide a single API that works on Linux, OSX and Windows.</p>
<p>For progress bars, you could use the BarChart object as shown in <a href="https://asciinema.org/a/26114" rel="nofollow">this demo</a> using <a href="https://github.com/peterbrittain/asciimatics/blob/master/samples/bars.py" rel="nofollow">this code</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a Python module for both Python 2/3, which can simply solve such situation with a few line of code ;D</p>
<p><a href="https://github.com/Yinzo/reprint" rel="nofollow noreferrer">reprint - A simple module for Python 2/3 to print and refresh multi line output contents in terminal</a></p>
<p>You can simply treat that <code>output</code> instance as a normal <code>dict</code> or <code>list</code>(depend on which mode you use). When you modify that content in the <code>output</code> instance, the output in terminal will automatically refresh :D </p>
<p>For your need, here is the code:</p>
<pre><code>from reprint import output
import time

if __name__ == "__main__":
    with output(output_type='dict') as output_lines:
        for i in range(10):
            output_lines['Moving file'] = "File_{}".format(i)
            for progress in range(100):
                output_lines['Total Progress'] = "[{done}{padding}] {percent}%".format(
                    done = "#" * int(progress/10),
                    padding = " " * (10 - int(progress/10)),
                    percent = progress
                    )
                time.sleep(0.05)
</code></pre>
</div>
<span class="comment-copy">What platform is this supposed to be on?</span>
<span class="comment-copy">Unix, specifically Fuduntu, but I'd like it to work on most platforms... Doesn't need to be though.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/3002085/python-to-print-out-status-bar-and-percentage" title="python to print out status bar and percentage">stackoverflow.com/questions/3002085/â€¦</a>  good answer there, helped me loads!</span>
<span class="comment-copy">Thanks, I added the link in the answer. Is the API just like Unix curses?</span>
<span class="comment-copy">There's actually a module to do what you want: [progressbar][<a href="http://code.google.com/p/python-progressbar/]" rel="nofollow noreferrer">code.google.com/p/python-progressbar/]</a></span>
<span class="comment-copy">Well, but how to display status rows not at the top of screen, but at the bottom (on the next line after previous output). I want an effect like with multiple <code>pv --name</code> in one pipeline</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/curses.html#curses.window.addstr" rel="nofollow noreferrer">docs.python.org/3/library/curses.html#curses.window.addstr</a></span>
<span class="comment-copy">I'm somewhat amazed that something as useful as a cross platform console manipulation isn't shipped with python. (Esp. given the existence of Tkinter)</span>
<span class="comment-copy">@PythonNut - I don't know the full history, but AFAIK no one was prepared to write an support a compatible API for Windows and so the <a href="https://docs.python.org/3/howto/curses.html" rel="nofollow noreferrer">recommendation</a> was to use the various glue code options already mentioned.</span>
<span class="comment-copy">When I try <code>output_lines['one'] = 'abcd'</code>, after setting it up like you did, I get a zero division error. I believe there is something wrong here. Do you have any insight into that?</span>
<span class="comment-copy">@cat40 I think that's maybe something make <code>get_terminal_size()</code>  returning a value of (0,0). May I ask for more detail for that? You can post it at Github issue :D</span>
