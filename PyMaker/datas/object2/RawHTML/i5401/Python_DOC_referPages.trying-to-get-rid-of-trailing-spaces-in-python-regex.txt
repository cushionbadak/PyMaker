<div class="post-text" itemprop="text">
<p>I have a CSV that I am working with in Python REGEX. I need to extract values in the final field of the CSV, but I am having trouble with it in regex101.com (fantastic page, by the way).</p>
<p>A couple of example rows:</p>
<pre><code>,11/12/2017,00-87-67 34849444,-27.00,ITEMRECEIVED,H2G2                   929613292012071217 REF
,02/01/2018,00-87-68 58493922,-1110.79,ITEMSENT,MIL P01  WOOLLIES     9221234545         DEG
</code></pre>
<p>I need to capture the final "MEMO" field on the end with this regex:</p>
<pre><code>(?:[^\,]*\,){5}(?P&lt;CompanyName&gt;[^\s].*)\s{4,19}(?P&lt;Reference&gt;\S{1,18})\s{1,11}(?P&lt;Type&gt;\w{3})
</code></pre>
<p>What I am getting is:</p>
<pre><code>CompanyName           Reference             Type
-----------           -----------           ----
'H2G2               ' '929613292012071217'  'REF'
'MIL P01  WOOLLIES  ' '9221234545'          'DEG'
</code></pre>
<p>It doesn't seem much, but how can I get the regex to trim the trailing spaces in the CompanyName, so that I get the following instead, please?</p>
<pre><code>CompanyName         Reference             Type
-----------         -----------           ----
'H2G2'              '929613292012071217'  'REF'
'MIL P01  WOOLLIES' '9221234545'          'DEG'
</code></pre>
<p>Thanks in advance,</p>
<p>QuietLeni</p>
</div>
<div class="post-text" itemprop="text">
<p>Change your regex to:</p>
<pre><code>(?:[^\,]*\,){5}(?P&lt;CompanyName&gt;[^\s].*\S)\s{4,19}(?P&lt;Reference&gt;\S{1,18})\s{1,11}(?P&lt;Type&gt;\w{3})
</code></pre>
<p>Adding <code>\S</code> basically means that after the last non-whitespace character there have to be no more whitespaces.</p>
</div>
<div class="post-text" itemprop="text">
<p>One approach might be using a lookahead to "short-circuit" a wildcard (non-greedy), like so:</p>
<pre><code>(?P&lt;CompanyName&gt;.*?)(?=\s+\d)
</code></pre>
<p>whole pattern:</p>
<pre><code>(?:[^\,]*\,){5}(?P&lt;CompanyName&gt;.*?)(?=\s+\d)\s*(?P&lt;Reference&gt;\S{1,18})\s{1,11}(?P&lt;Type&gt;\w{3})
</code></pre>
<p>(Depends on the possibilities inherent in your data of course, here I'm assuming that the company name can't end with an isolated number)</p>
<p><a href="https://regex101.com/r/reT66g/1/" rel="nofollow noreferrer">https://regex101.com/r/reT66g/1/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Unless I am missing something, just adding a question mark to this thing should do it <code>(?P&lt;CompanyName&gt;[^\s].*)</code> (making the quantifier non-greedy)</p>
<p>e.g. <code>(?P&lt;CompanyName&gt;[^\s].*)</code> -&gt; <code>(?P&lt;CompanyName&gt;[^\s].*?)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Just to put my two cents in - you could use</p>
<pre><code>,
(?P&lt;CompanyName&gt;\b(?:(?!\d{3,})[A-Z\d ])+\b)\s+
(?P&lt;Reference&gt;\b\d{1,18}\b)\s+
(?P&lt;Type&gt;[A-Z]+)
</code></pre>
<p>See <a href="https://regex101.com/r/3HmGnx/1/" rel="nofollow noreferrer"><strong>a demo on regex101.com</strong></a>.</p>
</div>
<span class="comment-copy">the lines start with a comma?</span>
<span class="comment-copy">I would advise using the standard library <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv module</a> instead of using regexes â€“ it will be better at avoiding these kinds of problems.</span>
<span class="comment-copy">Sorry, that is not available to me in this environment. I am using a tool that uses Python, but does not expose other libraries.</span>
<span class="comment-copy">Not all of the lines start with a comma. One or two have a number before the comma, which is why I find all of the commas first.</span>
