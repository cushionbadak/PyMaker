<div class="post-text" itemprop="text">
<p>Trying to figure out best coding practices as I'm getting started with python. I wrote a csv to dataframe reader with pandas. It uses the format: </p>
<pre><code>dataframe = read_csv(csv_input, usecols=column_names, dtype=test_dictionary)
</code></pre>
<p>We're using a dictionary to determine the columns we want to import along with their associated data types. For example: </p>
<pre><code>test_dictionary = {'column1': int, 'column2': float, 'column3': string}
</code></pre>
<p>Now to assign the second argument, usecols, we can take the keys from a dictionary in order to get just the names of the columns (column1, column2, column3). I used the keys method:</p>
<pre><code>column_names = test_dictionary.keys()
</code></pre>
<p>Someone checking my code changed it to this instead:</p>
<pre><code>column_names = [keys for keys in test_dictionary.keys()]
</code></pre>
<p>Could someone explain to me why one would choose one method over the other for assigning the keys in a dictionary to a variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <code>keys()</code> does not return a list, but rather <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow noreferrer">a "view" of the keys in the dictionary</a>.</p>
<pre><code>&gt;&gt;&gt; d = {'x': 1, 'y': 2, 'z': 3}
&gt;&gt;&gt; keys = d.keys()
&gt;&gt;&gt; keys
dict_keys(['x', 'y', 'z'])
</code></pre>
<p>This view differs from lists in two major ways:</p>
<ol>
<li><p>You cannot modify it:</p>
<pre><code>&gt;&gt;&gt; keys.append('k')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'dict_keys' object has no attribute 'append'
</code></pre></li>
<li><p>If the dictionary changes, the view reflects those changes:</p>
<pre><code>&gt;&gt;&gt; del d['z']
&gt;&gt;&gt; keys
dict_keys(['x', 'y'])
</code></pre></li>
</ol>
<p>You might want to turn this view into a list if you need to modify it or if you want it to be independent from the original dictionary.</p>
<p>Other than lists, other standard containers that are suitable for these purposes are sets (read-write) and tuple or frozensets (read-only).</p>
<p>One thing worth mentioning is that this code:</p>
<pre><code>column_names = [keys for keys in test_dictionary.keys()]
</code></pre>
<p>Can be rewritten in a more compact and fast way like this (thanks <a href="https://stackoverflow.com/users/1534017/cleb">Cleb</a> for pointing it out!):</p>
<pre><code>column_names = list(test_dictionary)
</code></pre>
<p>Another thing to note is that iterating over a list might be slightly faster than iterating over the view. That's because list have a better memory representation. (However, this is a very generic statement: factors like the number of items in the dictionary, the time required to create the list, and the Python version can have great effect on the overall performance.)</p>
</div>
<span class="comment-copy">All I can see is an explicit array declaration versus the method you used.</span>
<span class="comment-copy">There's no reason to do that. If <code>column_names</code> absolutely has to be a list rather than a <code>dict_keys</code> object, just use <code>list(test_dictionary.keys())</code>.</span>
<span class="comment-copy"><code>[keys for keys in test_dictionary.keys()]</code> is a very silly way of writing <code>list(test_dictionary.keys())</code> which is a slightly silly way of writing <code>list(test_dictionary)</code></span>
<span class="comment-copy">@ayhan well, a <code>dict_keys</code> is essentially  a set-like-view on the underlying <code>dict</code>. It is quite different than a list of keys, and has several advantages.</span>
<span class="comment-copy">From python documentation: "Calling d.keys() will return a dictionary view object. It supports operations like membership test and iteration, but its contents are not independent of the original dictionary â€“ it is only a view."  Source: <a href="https://docs.python.org/3.6/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">docs.python.org/3.6/tutorial/datastructures.html#dictionaries</a></span>
<span class="comment-copy">Or just <code>list(test_dictionary)</code></span>
<span class="comment-copy">@Cleb: excellent observation</span>
