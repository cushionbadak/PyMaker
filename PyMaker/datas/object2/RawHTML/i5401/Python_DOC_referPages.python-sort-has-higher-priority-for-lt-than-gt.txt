<div class="post-text" itemprop="text">
<p>I have seen similar questions, but they did not answer why python <code>__lt__</code> has higher priority than <code>__gt__</code>?</p>
<p>Quick example, let me give a superclass and a subclass:</p>
<pre><code>class Person(object):
    id = 0
    def __init__(self, name):
        self.name = name
        self.id = Person.id
        Person.id += 1

    def __str__(self):
        return self.name

    def __lt__(self, other):
        return self.id &lt; other.id

class SubPerson(Person):
    def __gt__(self, other):
        return self.name &gt; other.name
</code></pre>
<p>Here in superclass <code>Person</code>, I created a <code>__lt__</code> method, to compare based on Person's <code>self.id</code>. In sub class <code>SubPerson</code>, I created a <code>__gt__</code> method to compare based on the <code>self.name</code>.</p>
<p>What I found is that if I created a number of <code>SubPerson</code> instances in a list:</p>
<pre><code>s1 = SubPerson('WWW'); s1.id = 14
s2 = SubPerson('XXX'); s2.id = 12
s3 = SubPerson('YYY'); s3.id = 11
s4 = SubPerson('ZZZ'); s4.id = 13
lst2 = [s2, s1, s4, s3]
lst2.sort()
print([i.__str__() for i in lst2])  # &gt;&gt;&gt; ['YYY', 'XXX', 'ZZZ', 'WWW']
</code></pre>
<p>What I found is that:
if <code>__lt__</code> is defined in superclass, then even if you define <code>__gt__</code> in subclass, it will still sort by the <code>__lt__</code> method in superclass</p>
<p>But if it is the other way around, define <code>__gt__</code> in superclass and <code>__lt__</code> in subclass, then it will then sort by <code>__lt__</code> in subclass</p>
<p>If the two method names are the same (both <code>lt</code> or both <code>gt</code>), obviously, the subclass will override superclass, as it should be. </p>
<p>But it seems when they are different, it follows a different rule: by whatever <code>__lt__</code> defines. I've also noticed that even if in one class, if both <code>__lt__</code> and <code>__gt__</code> are defined (based on different things, it will still sort by <code>__lt__</code> method)</p>
<p>SO back to my question, is my observation true or not? and since I am a beginner, and I have not read through the whole python documents, can somebody point me out where in the documents that this rule is written.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list.sort</code> uses only <code>&lt;</code> comparisons. <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">This is documented.</a></p>
<p>Binary operators like <code>&lt;</code> will try the left-hand operand's method first unless the right-hand operand's class is a subclass of the left-hand operand's class. The other operand's method will only be considered if the first method is missing or returns <code>NotImplemented</code>. The left-hand operand's method for <code>&lt;</code> is <code>__lt__</code>, and the right-hand operand's method is <code>__gt__</code>. <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer">This is also documented.</a></p>
<p>Since all your list elements have the same class and <code>__lt__</code> always succeeds, only the <code>__lt__</code> methods end up getting called.</p>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">the documentation</a>: “This method sorts the list in place, <b>using only &lt; comparisons between items</b>.”</span>
<span class="comment-copy">@Ryan but it seems that it will still sort if I only define <code>__gt__</code> method??</span>
<span class="comment-copy">@Code_Control_jxie0755: You defined both; the subclass still inherited <code>__lt__</code> from the parent.</span>
<span class="comment-copy">@ShadowRanger I mean, I can go back and delete the <code>__lt__</code> in the parent, and sub will then sort by <code>__gt__</code>.</span>
<span class="comment-copy">@Code_Control_jxie0755: See user2357112's answer; there is a reflective test applied (checking the right hand side's reversed comparison, <code>__gt__</code>) when the left hand side doesn't support the direct (<code>__lt__</code>) comparison. You benefit by accident. In practice, you should really only define <code>__eq__</code> and <code>__lt__</code>, then <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer">decorate the class with <code>functools.total_ordering</code></a> to define the other comparisons in terms of them.</span>
<span class="comment-copy">But I noticed that if I only define <code>__gt__</code> method, it will still sort? So in a way, <code>__lt__</code> is not the must have????</span>
<span class="comment-copy">I don't have to define <code>__lt__</code> to make <code>.sort()</code> work, I can delete all the <code>__lt__</code> and leave only <code>__gt__</code> it will still sort</span>
