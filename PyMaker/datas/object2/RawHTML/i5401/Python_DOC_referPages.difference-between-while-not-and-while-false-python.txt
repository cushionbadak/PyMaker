<div class="post-text" itemprop="text">
<p>I am trying to distinguish between different ways of writing while loops.</p>
<p>I am writing this specifically for a poker game where I distinguish between different hand types. When writing my <code>is_pair</code> function, I start by saying <code>pair = False</code>. The only way I have found that continues the loop is if I say <code>while pair == False: ...</code>. For my <code>is_flush</code> function I am able to set <code>flush = True</code> and the <code>while</code> loop runs on <code>while flush</code> which continues the loop until <code>flush</code> is not true any more. </p>
<p>I have tried <code>while not pair:</code> but that didn't work. I want it to continue while <code>pair</code> is <code>False</code> so when it has found a pair it will return as <code>True</code>.</p>
<p>I think the statement for <code>flush</code> just looks cleaner and I am wondering if there is another way to incorporate that style into my pair function. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since your <code>while not pair:</code> loop did not work, you have found an important difference: <code>pair == False</code> only tests true if <code>pair</code> is set to <code>0</code> or <code>False</code> (the only two values that test as equal to <code>False</code>), while <code>while not pair</code> tests for <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">any truth value</a> (inverting that value).</p>
<p>You appear to have assigned some <em>other</em> value to <code>pair</code> that is neither of those two values causing the behaviour to change (a truthy value to break out early, or a falsey value to keep the loop going longer than expected).</p>
<p>It is <em>that difference</em> that is one of the reasons why the <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">Python style guide</a> recommends you always use <code>if true_expression</code> or <code>if not false_expression</code> rather than use <code>== True</code> or <code>== False</code>:</p>
<blockquote>
<ul>
<li><p>Don't compare boolean values to <code>True</code> or <code>False</code> using <code>==</code>.</p>
<p>Yes:   <code>if greeting:</code><br/>
  No:    <code>if greeting == True:</code><br/>
  Worse: <code>if greeting is True:</code> </p></li>
</ul>
</blockquote>
<p>Last but not least, for a <code>while ...:</code> loop that simply tests against a single boolean flag (<code>while flag:</code> or <code>while not pair:</code>), consider using <code>while True:</code> and <code>break</code> instead. So rather than do:</p>
<pre><code>flag = True
while flag:
    # ...
    if condition:
        flag = False
</code></pre>
<p>do this instead:</p>
<pre><code>while True:
    # ...
    if condition:
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Aside from actually having little or no difference at all,</p>
<p>Using <strong>False</strong> in a <strong>==</strong> comparison allows usage of 0 and 1. </p>
<pre><code>0 == False
1 == True
</code></pre>
<p>Using <strong>not</strong> is inversion of current value. </p>
<pre><code>not 0 == True
not 1 == False
not False == True
</code></pre>
<p>You can use in your program assuming that <strong>pair</strong> can only contain boolean values:</p>
<pre><code>while not pair:
</code></pre>
<p>If you however still want to use a variable that can contain both boolean and number, you can use:</p>
<pre><code>while pair is False:
</code></pre>
</div>
<span class="comment-copy">There is little difference, other than bad style.</span>
<span class="comment-copy">and if <code>while not pair:</code> did not work, then you have probably been assigning other values to it that are truthy but are not equal to <code>False</code>.</span>
<span class="comment-copy">If <code>pair</code> is a boolean, and you want to continue while <code>pair</code> is <code>false</code> then <code>while not pair</code> should work. If it doesn't then you have another problem somewhere. You're going to need to show a code sample of what doesn't work.</span>
<span class="comment-copy"><i>while any number above 0 == True.</i> No, only <code>1 == True</code>. Higher numbers do not compare true to either boolean value.</span>
