<div class="post-text" itemprop="text">
<p>I have a the following exemplary code:</p>
<pre><code>class X:
 def __init__(self, value):
  self.value = value

 def method_a(self):
  ...
</code></pre>
<p>I now want to <strong>instantiate a new object of <em>X</em> within <em>method_a</em></strong>, re-using <code>value</code>, i.e.</p>
<pre><code>def method_a(self):
 x = X(value = self.value)
</code></pre>
<p>Now, imagine I have <strong>several</strong> <strong>parameters</strong> to set in the constructor of <code>X</code>. Is there a "pythonic" way to re-set/copy all the parameters at once? Something like:</p>
<pre><code>def method_a(self):
 x = X(self)
</code></pre>
<p>The latter doesn't work ("_init__() missing 1 required positional argument"). I also couldn't find any solution to this problem case in the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer"><code>copy</code></a> module may be what you need:</p>
<h3>Code</h3>
<pre><code>def method_a(self):
    return copy.copy(self)
</code></pre>
<h3>Finer Control :</h3>
<p>In various scenarios you may need to copy only some parameters, that can be done using <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer"><em>unpacking of argument lists</em></a> combined with <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> to manage longer lists to copy:</p>
<pre><code>def method_a(self):
    attributes_to_copy = ('value1', 'value2')
    kwargs = {k: getattr(self, k) for k in attributes_to_copy}
    return type(self)(**kwargs)
</code></pre>
<h3>Test code:</h3>
<pre><code>import copy

class X(object):
    def __init__(self, value1, value2):
        self.value1 = value1
        self.value2 = value2

    def method_a(self):
        return copy.copy(self)

    def method_b(self):
        attributes_to_copy = ('value1', 'value2')
        kwargs = {k: getattr(self, k) for k in attributes_to_copy}
        return type(self)(**kwargs)

x1 = X(1, 2)
x2 = x1.method_a()
x3 = x1.method_b()
assert x1.value1 == x2.value1
assert x1.value1 == x3.value1
</code></pre>
</div>
