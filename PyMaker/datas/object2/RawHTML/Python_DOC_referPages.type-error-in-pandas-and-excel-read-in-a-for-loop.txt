<div class="post-text" itemprop="text">
<p>I have a for loop to create a Pandas data-frame from an excel workbook with multiple sheets. Effectively, I want a create a data-frame by selecting the data in a particular column from all the sheets in an excel workbook. My code is the following.</p>
<pre><code>  for sheet in sheetnames:
    df1[sheet]=pd.read_excel('P:/ITM/egi_esa/1.Users_Personal_Folders/Vignesh/JRC/Wind_TEMBA.xlsx',sheet_name=sheet,usecols='J')
</code></pre>
<p>where sheetnames is a list with the names (4 character strings) of the different sheets in the excel workbook. When I run the code for the first time, there is no error. But , when I run it for the second time, I get the following error</p>
<pre><code>---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-11-e1db6061ba75&gt; in &lt;module&gt;
      1 for sheet in sheetnames:
----&gt; 2     df1[sheet]=pd.read_excel('P:/ITM/egi_esa/1.Users_Personal_Folders/Vignesh/JRC/Wind_TEMBA.xlsx',sheet_name=sheet,usecols='J')

TypeError: 'type' object does not support item assignment
</code></pre>
<p>Can someone help me with understanding why it works for the first time and not from the second instance.</p>
<p>Best
v</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to read all the sheets in the <code>excel</code> file into a <code>dict</code> with <code>key</code> is the sheet name and <code>value</code> is the data frame for the sheet you can see this code,</p>
<pre><code>xls = pd.ExcelFile('excel_file_path.xls')

# Now you can list all sheets in the file
xls.sheet_names
# ['sheet1', 'sheet2', ...]

sheet_to_df_map = {}
for sheet_name in xls.sheet_names:
    sheet_to_df_map[sheet_name] = xls.parse(sheet_name)
</code></pre>
<p>This can be done with a single line code like this</p>
<pre><code>sheet_to_df_map = pd.read_excel(file_name, sheet_name=None)
</code></pre>
<p>You will get an <code>OrderedDict</code></p>
<p>After that, you can loop through the dictionary values and take the column you need and make the final dataframe</p>
<pre><code>df1 = pd.DataFrame()


for key, data in sheet_to_df_map.items():

    if 'J' in data.columns:
        df1[key] = data['J']
    else:
        df1[key] = [np.nan] * len(data)

print(df1)
</code></pre>
<p>This will only work if the length of all the sheets is the same, ie every sheet has the same number of rows.</p>
</div>
<span class="comment-copy">What is df1.? is it a dict.?</span>
<span class="comment-copy">df1 is an empty dataframe.</span>
<span class="comment-copy">@Sreeram TP: thanks for your suggestion. taking the sheets into a dictionary was easier. I am not sure why the reply is not visible anymore. Thanks</span>
<span class="comment-copy">Check the answer now. If it helped do accept</span>
