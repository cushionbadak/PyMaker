<div class="post-text" itemprop="text">
<p>Just like the title says, do overridden methods inherit decorators?</p>
<pre><code>class A:
    @memoized
    def fun(self, arg):
        return None


class B(A):
    def fun(self, arg):
        #computations
        return something
</code></pre>
<p>so does B.fun() maintain the decorator?</p>
</div>
<div class="post-text" itemprop="text">
<p>Think about it this way</p>
<pre><code>class A(object):
    def fun(self, arg):
        return None
    fun = memoized(fun)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No. It's a completely different function. But you can try that for yourself with a dummy decorator.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, it doesn't.</p>
</div>
<span class="comment-copy">When you tried it, what did you observe?</span>
<span class="comment-copy">I have to disagree that this is something that deserves a downvote for not trying first. It's a definite question with an unambiguous answer. Using  decorators in inherited methods is completely valid to use if you don't understand how to write decorators yourself.</span>
<span class="comment-copy">"It's a definite question with an unambiguous answer" is completely unrelated to trying it first.  Take the hint.  Try it first.</span>
<span class="comment-copy">Old question I know - martineau's comments are understandable, but I would tend to say that Falmarri's question is still valuable, as SO is about sharing knowledge and making answers easier to find for others. It saves other people's time by not having to write the test code by themselves. I don't think it was worth a down vote.</span>
<span class="comment-copy">I agree with @AlexandreH.  This question saved me the effort from trying it myself.  Shame on the rest of you for being so quick to blast other people who are trying to learn.</span>
