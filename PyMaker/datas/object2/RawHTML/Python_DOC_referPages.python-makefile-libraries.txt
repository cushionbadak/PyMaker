<div class="post-text" itemprop="text">
<p>Although it may sound trivial how should I import libraries in Python makefiles?</p>
<p>I am creating a basic Python makefile such as:</p>
<pre class="lang-make prettyprint-override"><code>all: my_file.py
    python3 my_file.py
</code></pre>
<p>However I am using specific libraries inside my_file.py, not included/imported in the basic package, for instance: <code>xlswriter</code>. So if someone tries to run the code they must type in terminal something similiar to:</p>
<pre><code>$ sudo apt-get install python3-xlsxwriter
</code></pre>
<p>So my question is how to adapt my Makefile, so that it is enough for an external user to run the program only by the <code>$ make</code> command (and it automatically proceeds with installing the package).
Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, making installation changes for your users is a bad idea. Their system is theirs to control, and if they decide they do not want to install additional packages, and therefore not be able to use your script, that is usually left up to them.</p>
<p>Using <code>sudo</code> for them is an even worse idea, and may be detected as an attack. What if you made some weird mistake in your code and <code>sudo rm -r</code> their hard-drive? Respect the permission hierarchy - global installations are up to the super-user, local ones and running the script is up to the user, and doing exactly the work the script is promised to do is up to you - given all requirements are met (which should be listed as well).</p>
<p>The <code>import</code> itself is not done in the Makefile, but in your Python script. That is where I would detect it, and produce the error that <strong>informs</strong> the user what they need to do. So in you script I would have something like:</p>
<pre><code>try: 
    import xslwriter
    #Add as as many imports as you would like to check for.
except ModuleNotFoundError as e:
    print("-E- Failed to import prerequisite {}. Please install prior to running this script.".format(e.name))
    exit(1)
</code></pre>
<p>You can <code>print</code> suggestions for installations as well (Detect <code>os</code> and decide if you suggest <code>yum</code> or <code>apt</code> (if a Linux flavor and not Windows), using <code>pip</code> which always works etc.). </p>
<p><code>exit(1)</code> indicates your program halted with an error, and will fail the Makefile recipe as well. This way the script warns properly and works as a standalone as well.</p>
</div>
<span class="comment-copy">Why are you using <code>make</code> instead of <code>pip</code>/<code>setup.py</code>?</span>
<span class="comment-copy">excuse me but can you be more specific please</span>
<span class="comment-copy">Python has its own tooling to properly install a script and its dependencies.</span>
