<div class="post-text" itemprop="text">
<p>I have (more than) two dataframes:</p>
<pre><code>In [22]: df = pd.DataFrame({'database' : ['db1', 'db2', 'db3']})                                                                                                                                                             

In [23]: df1 = pd.DataFrame({'database' : ['db1', 'db2', 'db3']})                                                                                                                                                            

In [24]: df2 = pd.DataFrame({'database' : ['db2', 'db3', 'db4']})                                                                                                                                                            

In [25]: df1                                                                                                                                                                                                                 
Out[25]: 
  database
0      db1
1      db2
2      db3

In [26]: df2                                                                                                                                                                                                                 
Out[26]: 
  database
0      db2
1      db3
2      db4
</code></pre>
<p>What I want as output is dataframe in this format:</p>
<pre><code>Out[45]: 
  database database
0      db1         
1      db2      db2
2      db3      db3
3               db4
</code></pre>
<p>I manage to get it in this format like this:</p>
<pre><code>df1.index = df1.database.values.ravel()
df2.index = df2.database.values.ravel()
pd.concat([df1, df2], axis=1).fillna('').reset_index(drop=True)                                                                                                                                                              
</code></pre>
<p>But I think there must be better solution than this trick with ravel() function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.set_index.html" rel="nofollow noreferrer"><code>DataFrame.set_index</code></a> with <code>drop=False</code>:</p>
<pre><code>df = (pd.concat([df1.set_index('database', drop=False), 
                 df2.set_index('database', drop=False)], axis=1)
        .fillna('')
        .reset_index(drop=True))
print (df)
  database database
0      db1         
1      db2      db2
2      db3      db3
3               db4
</code></pre>
<p>More dynamic solution with <code>list comprehension</code>:</p>
<pre><code>dfs = [df, df1, df2]
dfs1 = [x.set_index('database', drop=False) for x in dfs]
df = (pd.concat(dfs1, axis=1)
        .fillna('')
        .reset_index(drop=True))
print (df)
  database database database
0      db1      db1         
1      db2      db2      db2
2      db3      db3      db3
3                        db4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a series and append it as a row to your data frame and then shift the 2nd column by 1. Here is an example:</p>
<pre><code>df = pd.concat([df1, df2], axis = 1)
import numpy as np
s = pd.Series([np.NaN, np,NaN], index = ['database', 'database1'])
df.append(s, ignore_index = True)
df['database1'] = df['database1'].shift(1)
df.fillna('')
</code></pre>
<p>This will generate expected output. Hope this helps!</p>
</div>
