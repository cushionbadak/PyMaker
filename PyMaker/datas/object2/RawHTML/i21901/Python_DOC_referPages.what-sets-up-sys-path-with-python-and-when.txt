<div class="post-text" itemprop="text">
<p>When I run </p>
<pre><code>import sys 
print sys.path
</code></pre>
<p>on my Mac (Mac OS X 10.6.5, Python 2.6.1), I get the following results.</p>
<pre>
/Library/Python/2.6/site-packages/ply-3.3-py2.6.egg
...
/Library/Python/2.6/site-packages/ipython-0.10.1-py2.6.egg
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python26.zip
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-darwin
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-mac
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-mac/lib-scriptpackages

/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-tk
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-old
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-dynload
/Library/Python/2.6/site-packages
/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/PyObjC
/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/wx-2.8-mac-unicode
</pre>
<p>They are grouped into 5 categories.</p>
<ul>
<li>/Library/Python/2.6/site-packages/*.egg</li>
<li>/Library/Python/2.6/site-packages</li>
<li>Frameworks/Python.framework/Versions/2.6/lib/python2.6</li>
<li>Frameworks/Python.framework/Versions/2.6/Extras/lib/python</li>
<li>PATH from PYTHONPATH environment variable.</li>
</ul>
<p>And I can add more paths using the code </p>
<pre><code>sys.path.insert(0, MORE_PATH)
</code></pre>
<ul>
<li>What routines sets up those paths, and when?</li>
<li>Are some of the paths are built in python source code?</li>
<li>Is it possible that the paths inserted with 'sys.path.insert' are ignored? I'm curious about this, as with mod_wsgi, I found the paths are not found with 'sys.path.insert'. I asked <a href="https://stackoverflow.com/questions/4269445/does-django-or-mod-wsgi-modify-sys-path-when-its-running">another post</a> for this question.</li>
</ul>
<h2>ADDED</h2>
<p>Based on Michael's answer, I looked into site.py, and I got the following code.</p>
<pre><code>def addsitepackages(known_paths):
    """Add site-packages (and possibly site-python) to sys.path"""
    sitedirs = []
    seen = []

    for prefix in PREFIXES:
        if not prefix or prefix in seen:
            continue
        seen.append(prefix)

        if sys.platform in ('os2emx', 'riscos'):
            sitedirs.append(os.path.join(prefix, "Lib", "site-packages"))
        elif sys.platform == 'darwin' and prefix == sys.prefix:
            sitedirs.append(os.path.join("/Library/Python", sys.version[:3], "site-packages"))
</code></pre>
<p>I also think that the directory name that has site.py (/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6 for my Mac) should be built into Python source code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Most of the stuff is set up in Python's <code>site.py</code> which is automatically imported when starting the interpreter (unless you start it with the <code>-S</code> option). Few paths are set up in the interpreter itself during initialization (you can find out which by starting python with <code>-S</code>). </p>
<p>Additionally, some frameworks (like Django I think) modify <code>sys.path</code> upon startup to meet their requirements.</p>
<p>The <code>site</code> module has a pretty good <a href="http://docs.python.org/2/library/site.html" rel="nofollow noreferrer">documentation</a>, a commented <a href="https://github.com/python/cpython/blob/master/Lib/site.py" rel="nofollow noreferrer">source code</a> and prints out some information if you run it via <code>python -m site</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <em>Learning Python</em>:</p>
<blockquote>
<p>sys.path is the module search path. 
  Python configures it at program
  startup, automatically merging the
  home directory of the top-level file
  (or an empty string to designate the
  current working directory), any
  PYTHONPATH directories, the contents
  of any <em>.pth</em> file paths you've
  created, and the standard library
  directories.  The result is a list of
  directory name strings that Python
  searches on each import of a new file.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>site.py is indeed the answers. I wanted to remove any dependencies on the old Python that is installed by default on my mac. This works pretty good, as 'site.py' is called each time the python interpreter is started.</p>
<p>For Mac, I manually added the following line at the end of main() in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/site.py:</p>
<pre><code>    sys.path =  filter (lambda a: not a.startswith('/System'), sys.path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Path has these parts:</p>
<ul>
<li>OS paths that have your system libraries</li>
<li>current directory python started from</li>
<li>environmental variable <code>$PYTHONPATH</code></li>
<li>you can add paths at runtime.</li>
</ul>
<p>Paths are not ignored. But, they may not be found and that will not raise an error.
sys.path should only be added too, not subtracted from. Django would not remove paths.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to the accepted answer, and addressing the comments that say a module shouldn't remove entries from <code>sys.path</code>:</p>
<p>This is broadly true but there <em>are</em> circumstances where you might want to modify <code>sys.path</code> by removing entries.  For instance - and this is Mac-specific; *nix/Windows corollaries may exist - if you create a customised <code>Python.framework</code> for inclusion in your own project you may want to ignore the default <code>sys.path</code> entries that point at the system <code>Python.framework</code>.</p>
<p>You have a couple of options:</p>
<ol>
<li><p>Hack the <code>site.py</code>, as @damirv indicates, or</p></li>
<li><p>Add your own <code>sitecustomize</code> module (or package) to the custom framework that achieves the same end result.  As indicated in the <code>site.py</code> comments (for 2.7.6, anyway):</p>
<blockquote>
<p>After these path manipulations, an attempt is made to import a module
  named sitecustomize, which can perform arbitrary additional
  site-specific customizations.  If this import fails with an
  ImportError exception, it is silently ignored.</p>
</blockquote></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Also note: if the <code>PYTHONHOME</code> env var is set, standard libraries will be loaded from this path instead of the default, as <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHOME" rel="nofollow">documented</a>.</p>
<p>This is not a direct answer to the question, but something I just discovered that was causing the wrong standard libraries to be loaded, and my searches lead me here along the way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using system python <code>/usr/bin/python</code>.</p>
<p>sys.path is set from system files at python startup.</p>
<p>Do not touch those files, in particular site.py, because this may perturb the system.</p>
<p>However, you can change sys.path within python, in particular, at startup :</p>
<p>in ~/.bashrc or ~/.zshrc:</p>
<p><code>export PYTHONSTARTUP=~/.pythonrc</code></p>
<p>in ~/.pythonrc:</p>
<p>write your changes to sys.path.</p>
<p>Those changes will be only for you in interactive shells.</p>
<p>For hacking at little risk for the system, install you own and more recent python version.</p>
</div>
<span class="comment-copy">Part of it can be answered with <a href="http://stackoverflow.com/questions/897792/pythons-sys-path-value">Python's sys.path value</a>?</span>
<span class="comment-copy">If your still trying to figure out your previous question - It is far more likely that your problem lies in the start up file, than something to do with site imports. It would be extremely poor practice for a package to remove paths they new nothing about.</span>
<span class="comment-copy">Why <code>seen</code> is not a set ? :P</span>
<span class="comment-copy">The best answer I found to the same question can be <a href="https://stackoverflow.com/a/38403654/534238">found here</a>, which is a link to an answer to another SO question.</span>
<span class="comment-copy">Apparently in Debian and derivatives, directories in <code>/usr/local/lib/python&lt;version&gt;/dist-packages</code> and <code>/usr/{lib,share}/python&lt;version&gt;/dist-packages</code> are automatically added to the path (according to <code>/usr/lib/python2.7/site.py</code> in Ubuntu 14.04).</span>
<span class="comment-copy">Please remember that <code>site.py</code> can be prevented from running by using command line <code>-S</code> option when running Python. From <a href="https://docs.python.org/2/using/cmdline.html#cmdoption-S" rel="nofollow noreferrer">docs</a> â€“ <i>Disable the import of the module <code>site</code> and the site-dependent manipulations of <code>sys.path</code> that it entails.</i></span>
<span class="comment-copy">PYTHONHOME doesn't really apply in case of mod_wsgi as Apache isn't going to be started from the user environment and the root user it starts as from system unit scripts wouldn't have it set.</span>
<span class="comment-copy">@GrahamDumpleton Maybe, but the title of the question is likely to lead others in more general cases here. I'm just hoping this information may help someone.</span>
<span class="comment-copy">how do you tell "You are using system python /usr/bin/python."?</span>
