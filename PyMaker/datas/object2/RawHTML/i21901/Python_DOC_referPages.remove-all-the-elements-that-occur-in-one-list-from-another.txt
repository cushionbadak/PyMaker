<div class="post-text" itemprop="text">
<p>Let's say I have two lists, <code>l1</code> and <code>l2</code>.  I want to perform <code>l1 - l2</code>, which returns all elements of <code>l1</code> not in <code>l2</code>.</p>
<p>I can think of a naive loop approach to doing this, but that is going to be really inefficient.  What is a pythonic and efficient way of doing this?</p>
<p>As an example, if I have <code>l1 = [1,2,6,8] and l2 = [2,3,5,8]</code>, <code>l1 - l2</code> should return <code>[1,6]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a language feature called <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions">List Comprehensions</a> that is perfectly suited to making this sort of thing extremely easy. The following statement does exactly what you want and stores the result in <code>l3</code>:</p>
<pre><code>l3 = [x for x in l1 if x not in l2]
</code></pre>
<p><code>l3</code> will contain <code>[1, 6]</code>.</p>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use sets:</p>
<pre><code>&gt;&gt;&gt; set([1,2,6,8]) - set([2,3,5,8])
set([1, 6])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on Donut's answer and the other answers here, you can get even better results by using a generator comprehension instead of a list comprehension, and by using a <code>set</code> data structure (since the <code>in</code> operator is O(n) on a list but O(1) on a set).</p>
<p>So here's a function that would work for you:</p>
<pre><code>def filter_list(full_list, excludes):
    s = set(excludes)
    return (x for x in full_list if x not in s)
</code></pre>
<p>The result will be an iterable that will lazily fetch the filtered list.  If you need a real list object (e.g. if you need to do a <code>len()</code> on the result), then you can easily build a list like so:</p>
<pre><code>filtered_list = list(filter_list(full_list, excludes))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the Python set type.   That would be the most Pythonic.  :)</p>
<p>Also, since it's native, it should be the most optimized method too.</p>
<p>See:</p>
<p><a href="http://docs.python.org/library/stdtypes.html#set" rel="noreferrer">http://docs.python.org/library/stdtypes.html#set</a></p>
<p><a href="http://docs.python.org/library/sets.htm" rel="noreferrer">http://docs.python.org/library/sets.htm</a> (for older python)</p>
<pre><code># Using Python 2.7 set literal format.
# Otherwise, use: l1 = set([1,2,6,8])
#
l1 = {1,2,6,8}
l2 = {2,3,5,8}
l3 = l1 - l2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative, you may also <strong>use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> with the lambda expression</strong> to get the desired result. For example:</p>
<pre><code>&gt;&gt;&gt; l1 = [1,2,6,8]
&gt;&gt;&gt; l2 = set([2,3,5,8])

#     v  `filter` returns the a iterator object. Here I'm type-casting 
#     v  it to `list` in order to display the resultant value
&gt;&gt;&gt; list(filter(lambda x: x not in l2, l1))
[1, 6]
</code></pre>
<p><strong>Performance Comparison</strong></p>
<p>Here I am comparing the performance of all the answers mentioned here. As expected, <a href="https://stackoverflow.com/a/4211239/2063361"><em>Arkku's</em></a> <code>set</code> based operation is fastest.</p>
<ul>
<li><p><a href="https://stackoverflow.com/a/4211239/2063361"><em>Arkku's Set Difference</em></a> - First <em>(0.124 usec per loop)</em></p>
<pre><code>mquadri$ python -m timeit -s "l1 = set([1,2,6,8]); l2 = set([2,3,5,8]);" "l1 - l2"
10000000 loops, best of 3: 0.124 usec per loop
</code></pre></li>
<li><p><a href="https://stackoverflow.com/a/4211325/2063361"><em>Daniel Pryden's List Comprehension with <code>set</code> lookup</em></a> - Second <em>(0.302 usec per loop)</em></p>
<pre><code>mquadri$ python -m timeit -s "l1 = [1,2,6,8]; l2 = set([2,3,5,8]);" "[x for x in l1 if x not in l2]"
1000000 loops, best of 3: 0.302 usec per loop
</code></pre></li>
<li><p><a href="https://stackoverflow.com/a/4211228/2063361"><em>Donut's List Comprehension on plain list</em></a> - Third <em>(0.552 usec per loop)</em></p>
<pre><code>mquadri$ python -m timeit -s "l1 = [1,2,6,8]; l2 = [2,3,5,8];" "[x for x in l1 if x not in l2]"
1000000 loops, best of 3: 0.552 usec per loop
</code></pre></li>
<li><p><a href="https://stackoverflow.com/a/48038480/2063361"><em>Moinuddin Quadri's using <code>filter</code></em></a> - Fourth <em>(0.972 usec per loop)</em></p>
<pre><code>mquadri$ python -m timeit -s "l1 = [1,2,6,8]; l2 = set([2,3,5,8]);" "filter(lambda x: x not in l2, l1)"
1000000 loops, best of 3: 0.972 usec per loop
</code></pre></li>
<li><p><a href="https://stackoverflow.com/a/33491327/2063361"><em>Akshay Hazari's using combination of <code>reduce</code> + <code>filter</code></em></a> - Fifth <em>(3.97 usec per loop)</em></p>
<pre><code>mquadri$ python -m timeit "l1 = [1,2,6,8]; l2 = [2,3,5,8];" "reduce(lambda x,y : filter(lambda z: z!=y,x) ,l1,l2)"
100000 loops, best of 3: 3.97 usec per loop
</code></pre></li>
</ul>
<p><strong>PS:</strong> <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow noreferrer"><code>set</code></a> does not maintain the order and removes the duplicate elements from the list. Hence, do not use <em>set difference</em> if you need any of these.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternate Solution  :</p>
<pre><code>reduce(lambda x,y : filter(lambda z: z!=y,x) ,[2,3,5,8],[1,2,6,8])
</code></pre>
</div>
<span class="comment-copy">Just a tip: <a href="https://www.python.org/dev/peps/pep-0008/#names-to-avoid" rel="nofollow noreferrer">PEP8</a> states that lowercase "L" should not be used because it looks too much like a 1.</span>
<span class="comment-copy">Very pythonic; I like it!  How efficient is it?</span>
<span class="comment-copy">I believe quite efficient, and it has the benefit of being extremely readable and clear as to what you're trying to accomplish. I came across a blog post you might find interesting relating to efficiency: <a href="http://blog.cdleary.com/2010/04/efficiency-of-list-comprehensions/" rel="nofollow noreferrer">blog.cdleary.com/2010/04/efficiency-of-list-comprehensions</a></span>
<span class="comment-copy">@fandom: the list comprehension itself is quite efficient (although a generator comprehension might be more efficient by not duplicating elements in memory), but the <code>in</code> operator isn't that efficient on a list.  <code>in</code> on a list is O(n), whereas <code>in</code> on a set is O(1).  However, until you get to thousands of elements or more, you're unlikely to notice the difference.</span>
<span class="comment-copy"><code>l3 = [x for x in l1 if x not in set(l2)]</code> ? I am sure if <code>set(l2)</code> would be called more than once.</span>
<span class="comment-copy">You could also just set <code>l2s = set(l2)</code> and then say <code>l3 = [x for x in l1 if x not in l2s]</code>. Slightly easier.</span>
<span class="comment-copy">This will also remove duplicates from <code>l1</code>, which may be an undesired side effect.</span>
<span class="comment-copy">..and lose element order (if order is important).</span>
<span class="comment-copy">Sorry gang but this is the best answer and the simplest to read.  I need to generate random keys that I will store in a list. I need to make sure they are unique. So I have a range say from 1-10000 and then I have a list of numbers I have generated. A nice solution looks  like this:  random.sample( set( range(1,10) ) - set([2,3]), 1 )</span>
<span class="comment-copy">@TereusScott It is the best answer if your items are hashable. In my case, they weren't, so I had to use the selected answer.</span>
<span class="comment-copy">It should be noted that the output of a set is ordered, i.e. {1,3,2} becomes {1,2,3} and {"A","C","B"} becomes {"A","B","C"} and you might not want to have that.</span>
<span class="comment-copy">When using sets it should be noted that the output of is ordered, i.e. {1,3,2} becomes {1,2,3} and {"A","C","B"} becomes {"A","B","C"} and you might not want to have that.</span>
<span class="comment-copy">this method will not work if list <code>l1</code> includes repeated elements.</span>
<span class="comment-copy">Though reduce and map are much more flexible with working out how you would want the output. It sucks that everything else beats it.</span>
<span class="comment-copy">Is there any advantage to using this method? It looks like it's more complex and harder to read without much benefit.</span>
<span class="comment-copy">That might seem complex . Reduce is very flexible and can be used for a lot of purposes. It is known as fold . reduce is actually foldl . Suppose you want to add more complex stuff in it then it will be possible in this function but list comprehension which is the selected best answer will only get you an output of the same type i.e list and probably of the same length while with folds you could change the output type as well . <a href="https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29" rel="nofollow noreferrer">en.wikipedia.org/wiki/Fold_%28higher-order_function%29</a> . This solution is n*m or less complexity. Others may or may not be better though.</span>
<span class="comment-copy">reduce (function , list , initial accumulator (which can be of any type))</span>
