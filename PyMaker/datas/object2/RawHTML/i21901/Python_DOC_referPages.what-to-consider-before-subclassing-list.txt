<div class="post-text" itemprop="text">
<p>I was recently going over a coding problem I was having and someone looking at the code said that subclassing list was bad (my problem was unrelated to that class). He said that you shouldn't do it and that it came with a bunch of bad side effects. Is this true?</p>
<p>I'm asking if list is generally bad to subclass and if so, what are the reasons. Alternately, what should I consider before subclassing list in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>There are no benefits to subclassing <code>list</code>.</strong> None of the methods will use any methods you override, so you can have unexpected bugs. Further, it's very often confusing doing things like <code>self.append</code> instead of <code>self.foos.append</code> or especially <code>self[4]</code> rather than <code>self.foos[4]</code> to access your data. You can make something that works <strong>exactly like a list</strong> or (better) <em>howevermuch like a list you really want</em> while just subclassing <code>object</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/glossary.html#term-abstract-base-class" rel="noreferrer">abstract base classes</a> provided in the <a href="http://docs.python.org/library/collections.html#abcs-abstract-base-classes" rel="noreferrer"><code>collections</code></a> module, particularly <code>MutableSequence</code>, can be useful when implementing list-like classes.  These are available in Python 2.6 and later.</p>
<p>With ABCs you can implement the "core" functionality of your class and it will provide the methods which logically depend on what you've defined.</p>
<p>For example, implementing <code>__getitem__</code> in a <code>collections.Sequence</code>-derived class will be enough to provide your class with <code>__contains__</code>, <code>__iter__</code>, and other methods.</p>
<p>You may still want to use a contained list object to do the heavy lifting.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the first question I'd ask myself is, "Is my new object really a list?".  Does it walk like a list, talk like a list?  Or is is something else?</p>
<p>If it is a list, then all the standard list methods should all make sense.</p>
<p>If the standard list methods don't make sense, then your object should contain a list, not be a list.</p>
<p>In old python (2.2?) sub-classing list was a bad idea for various technical reasons, but in a modern python it is fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nick is correct.
Also, while I can't speak to Python, in other OO languages (Java, Smalltalk) subclassing a list is a bad idea. Inheritance in general should be avoided and delegation-composition used instead.</p>
<p>Rather, you make a container class and delegate calls to the list. The container class has a reference to the list and you can even expose the calls and returns of the list in your own methods.
This adds flexibility and allows you to change the implementation (a different list type or data structure) later w/o breaking any code. If you want your list to do different listy-type things then your container can do this and use the plain list as a simple data structure.
Imagine if you had 47 different uses of lists. Do you really want to maintain 47 different subclasses?
Instead you could do this via the container and interfaces. One class to maintain and allow people to call your new and improved methods via the interface(s) with the implementation remaining hidden.</p>
</div>
<span class="comment-copy">Subclassing list isn't inherently bad, but there are many cases where it's really not what you want to do.  We can't answer whether that's the case here unless you give us specifics.</span>
<span class="comment-copy">What if we want to add an attribute to a list? For example, suppose that we have mylist = []. We want something like mylist.x = 3.</span>
<span class="comment-copy">@Selinap, In a case where I wanted my state to include a list of something and an int, I would still likely use composition. Using inheritance for that opens up confusion in writing, confusion in using, and doesn't really gain you anything.</span>
<span class="comment-copy">This seems to be untrue of python 3. These contain <a href="https://docs.python.org/3.4/library/collections.html#collections.UserList" rel="nofollow noreferrer"><code>collections.UserList</code></a> explicitly for this purpose. It even suggests that subclassing from list is possible now: "The need for this class has been partially supplanted by the ability to subclass directly from list;" (I understand this is an old topic and the comments above probably were true while written, just want to make this clear for people finding this question now)</span>
<span class="comment-copy">@Claude, There are those that like the abstract fact that since the introduction of new-style classes, subclassing builtins was possible (didn't throw an error), but the fact remains that it's virtually useless. Subclassing list has tons of undefined behavior, and the real behavior is the unhelpful 'nothing is virtual'. It's far more useful in Python 2 or Python 3 to subclass <code>collections.MutableSequence</code> or <code>object</code>(2)/nothing(3).</span>
<span class="comment-copy">Since Python 3.3+ it has been moved to the <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer"><code>collections.abc</code></a> module.</span>
<span class="comment-copy">+1 Only inherit when it really makes 100% sense, otherwise compose.</span>
<span class="comment-copy">As to side effects, he was a bit out of date? The data is contained in a list, but there are a lot of other specific methods I need to throw over the top in order to do a number of things.</span>
<span class="comment-copy">yes, inherit for "is-a" relationships, compose for pretty much everything else.</span>
