<div class="post-text" itemprop="text">
<p><strong>main.py:</strong></p>
<pre><code>import subone
import subtwo
</code></pre>
<p><strong>subone.py:</strong></p>
<pre><code>a = 'abc'
</code></pre>
<p><strong>subtwo.py:</strong></p>
<pre><code>print subone.a
</code></pre>
<p>Running <code>python main.py</code> throws a <code>NameError: name 'subone' is not defined</code>. I expected it to print 'abc'.</p>
<p>Refactoring it to use <code>from</code> <code>import</code> and classes doesn't help:</p>
<p><strong>main.py:</strong></p>
<pre><code>from subone import *   # Only using from X import * for example purposes.
from subtwo import *

print 'from main.py:', a.out
</code></pre>
<p><strong>subone.py:</strong></p>
<pre><code>class A:
    out = 'def'

a = A()
</code></pre>
<p><strong>subtwo.py:</strong></p>
<pre><code># This throws NameError: name 'a' is not defined
print a.out

# This throws NameError: name 'A' is not defined
b = A()
print b.out
</code></pre>
<p>BUT it <em>will</em> print 'from main.py: def'. (It works when using <code>import</code> too.)</p>
<p>Why does it work this way? It seems like once <code>subone</code> is imported, it should be available to <code>subtwo</code>.</p>
<p>Is it because it's bad programming to have imported modules depend on each other without going through their 'parent' module? Is there another, standard way to do this?</p>
<h1>Update:</h1>
<p>I now understand that the first example will not work because the line <code>print subone.a</code> doesn't recognize the name <code>subone</code>, it not being in <strong><code>subtwo</code>'s</strong> namespace (even though it's in <code>main.py</code>'s), and it is being called from within the module <code>subtwo</code>. This can be fixed by using <code>import subone</code> at the top of <code>subtwo.py</code> -- it will not re-load the module but will add it to <code>subtwo</code>'s namespace so <code>subtwo</code> can use it.</p>
<p>But what about this:</p>
<p><strong>main.py:</strong></p>
<pre><code>from subone import Nugget
from subtwo import Wrap

wrap = Wrap()
print wrap.nugget.gold
</code></pre>
<p><strong>subone.py:</strong></p>
<pre><code>class Nugget:
    gold = 'def'
</code></pre>
<p><strong>subtwo.py:</strong></p>
<pre><code>class Wrap:
    nugget = Nugget()
</code></pre>
<p>I would think that since <code>Wrap</code> and <code>Nugget</code> are both loaded directly into <code>main</code>'s namespace, that they would use <code>main</code>'s namespace and be able to reference each other, but it throws a <code>NameError: name 'Nugget' is not defined</code>. IS IT because <code>Wrap</code> is evaluated/checked from <em>within</em> <code>subtwo</code>'s namespace BEFORE being loaded into <code>main</code>'s namespace?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you modified your subtwo.py this way then it will work</p>
<pre><code>import subone
print subone.a
</code></pre>
<p>When you do subone.a in subtwo.py, you are trying to access the namespace subone in subtwo.py and in the namespace "subone", there should be a attribute "a".</p>
<p>When you do - import subone in subtwo.py, then subone is added to the namespace and subone namespace has attribute a. so subone.a will work.</p>
<p>I would also suggest that you play with dir() to see how namespaces are being added.</p>
<p>In subtwo.py, you can do the following:</p>
<pre><code>print dir()
import subone
print dir()
print subone.a
</code></pre>
<p>Similarly, try adding "print dir()" before and after your import statements and the idea should become clear to you.</p>
<blockquote>
<p>"import x" adds 'x' to the current modules
  namespace while "from x import * " will
  add all the module level attributes
  directly into current module namespace</p>
</blockquote>
<p><em>So in your above first example of main.py, subone.py and subtwo.py, the namespace in main.py will contain 'subone' and 'subtwo' while subtwo.py will have an empty namespace and can not access subone.a.</em></p>
<p>[Edit: Some more explanations]
Consider following files: 
main.py</p>
<pre><code>print "Before importing subone : ", dir()
import subone
print "After importing subone and before importing subtwo: ",  dir()
import subtwo
print "After importing subone and subtwo: ", dir()
</code></pre>
<p>subone.py</p>
<pre><code>a = 'abc'
</code></pre>
<p>subtwo.py</p>
<pre><code>print dir()
import subone
print "module level print: ", subone.a
print dir()
def printX():
    print subone.a
</code></pre>
<p>And the output of running main.py:</p>
<pre><code>Before importing subone :  ['__builtins__', '__doc__', '__file__', '__name__', '__package__']
After importing subone and before importing subtwo:  ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'subone']
['__builtins__', '__doc__', '__file__', '__name__', '__package__']
module level print:  abc
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'subone']
After importing subone and subtwo:  ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'subone', 'subtwo']
</code></pre>
<blockquote>
<p><strong>Some Observations</strong></p>
</blockquote>
<ol>
<li>You will notice that importing a module subtwo.py, the print statement is executed immediately. </li>
<li>So when subone and subtwo are imported in main.py, the namespace of main.py is augmented.</li>
<li>That does not mean that namespace of subtwo will be augmented. so "a" is available only in main.py via subone.a</li>
<li>When we do import subone in subtwo.py then the namespace of subtwo is augmented with subone and attribute a of module subone is available in subtow.py via subone.a</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Can you explain why you feel like subone should be available to subtwo, when subone has been imported by main? As it is, subtwo.py can be compiled without knowing what main.py has imported.</p>
<p>Also, if a second program imports subtwo.py, should subtwo's knowledge of subone depend on which of two main programs is importing subtwo? This would reduce reusability of subtwo.</p>
<p>It seems like you're thinking of the compilation as a process with a defined order, accumulating state information: compile main.py, during which we compile/import subone.py, accumulating information from it, and then we compile/import subtwo.py, using the information we've already accumulated.</p>
<p>Instead, the compilation of each module is independent of others, unless dependencies are declared. This makes it much easier to reuse and maintain code: there are fewer hidden dependencies.</p>
<blockquote>
<p>Is it because it's bad programming to
  have imported modules depend on each
  other without going through their
  'parent' module?</p>
</blockquote>
<p>Not as such... It's just bad programming to have module 2 depend on module 1 <em>without saying so</em>, i.e. without module 2 declaring "I depend on module 1".</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>subtwo</code> namespace will be totally empty unless you import <code>subone</code> into it.</p>
<p>As far as programming practices, <code>subone</code> and <code>subtwo</code> can depend on each other if so desired, you just need to explicitly link them (with an <code>import</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Regarding your second example, "main.py" knows about <code>Nugget</code> but "subtwo.py" doesn't.</p>
<p>I think it would help to think of it this way.  Every module (file) has to work as if the only other modules that exist are the ones that it imports.  In this case "subtwo.py" would not be able to run by itself because it hasn't imported <code>Nugget</code>.  Essentially "subtwo.py" doesn't know what "main.py" knows.  It shouldn't, because it could be called from anywhere by anyone, and it can't rely on anyone else importing the stuff that it needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because the imported modules have its own separate namespaces. What you wrote is very much like:</p>
<pre><code>def func1():
    a = 1

def func2():
    print a

func1()
func2()  # This will throw an error

a = 2

func2()  # Now this will print 2.
</code></pre>
<p>The modules have their namespaces locally, and when you use <code>from subone import *</code> you import the namespace ONLY to <code>main.py</code> namespace which cannot be accessed by <code>subtwo</code>.</p>
<p>Nevertheless - what you're trying to do is very bad practice. Avoid using global variables and <code>import *</code>, just because you will get more and more confused like now.</p>
<hr/>
<p>More on it:
<a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a></p>
<p><a href="https://bytebaker.com/2008/07/30/python-namespaces/" rel="nofollow noreferrer">https://bytebaker.com/2008/07/30/python-namespaces/</a></p>
<p><a href="http://www.diveintopython.net/html_processing/locals_and_globals.html" rel="nofollow noreferrer">http://www.diveintopython.net/html_processing/locals_and_globals.html</a></p>
<p>and maybe: <a href="http://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html" rel="nofollow noreferrer">http://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html</a></p>
</div>
<span class="comment-copy">Your encapsulation seems really broken...</span>
<span class="comment-copy">you need to lookup lexical scoping. The basic idea is that code has access to what it can 'see' in the source code. what happens at runtime has nothing to do with it.</span>
<span class="comment-copy">This is very helpful. dir() really makes things clear for me. My only question (as I commented below) is that if "from x import *" adds all the module level attributes directly into the current namespace, then why can't those attributes access each other?</span>
<span class="comment-copy">That import doesn't actually change the scope of the attributes, it merely copies their definition to the local scope.</span>
<span class="comment-copy">@willell: Ignacio Vazquez-Abrams is correct. I should have been more clear. This is not the same as copying the code as it happens in case of #include in "C". The imported modules are loaded and evaluated already. if you had a print statement in an imported module, it would already have been evaluated.</span>
<span class="comment-copy">@Ignacio: You're saying each attribute has its own namespace, inherited from the module it came from?</span>
<span class="comment-copy">Each attribute has its own scope, which the reference carries around with it.</span>
<span class="comment-copy">Ah, I see. The way you describe it helps. I think I've been used to PHP's <code>include</code> and <code>require</code> statements, which directly embed code. Instead, modules are objects which need to be called.</span>
<span class="comment-copy">@willell: I've never used PHP, but C is similar with the preprocessor <code>#include</code> just pasting the entire file there.  Regardless, some sort of implicit dependency like that just doesn't seem smart regardless of language.</span>
<span class="comment-copy">@willell, that makes sense... the way you're thinking of it indeed matches how PHP and C include mechanisms work. However you can see how that leads to dependencies that are difficult to trace... in order to find out what file B depends on, you have to look at all the places where file B is included. So there's a fundamental difference between "including a file" and "importing a module". The former is more of a simple, literal insertion of a text string, unconscious of the semantic consequences. The latter is more of a conceptual linking of one program component to another.</span>
<span class="comment-copy">Yeah, I gotcha. What you call conceptual linking is a big part of the reason I'm using Python anyway. The only thing I'm still confused about: If <code>from import</code> loads all module-level objects into the current namespace, then why can't those objects reference each other? Is it because those objects are evaluated within their respective modules BEFORE they're loaded into the current module?</span>
<span class="comment-copy">Okay, but why doesn't it work even when using from - import, which loads everything into main's namespace?</span>
<span class="comment-copy">It doesn't matter, when <code>subtwo</code> runs (when main <code>import</code>'s it), nothing is in <i>its</i> namespace.</span>
<span class="comment-copy">It might help to remember that <code>import</code> in Python is not like <code>include</code> in other languages.</span>
<span class="comment-copy">You're right, I learned PHP first.</span>
