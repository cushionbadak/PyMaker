<div class="post-text" itemprop="text">
<p>I don't understand what <code>%s</code> and <code>%d</code> do and how they work.</p>
</div>
<div class="post-text" itemprop="text">
<p>They are used for formatting strings. <code>%s</code> acts a placeholder for a string while <code>%d</code> acts as a placeholder for a number. Their associated values are passed in via a tuple using the <code>%</code> operator. </p>
<pre><code>name = 'marcog'
number = 42
print '%s %d' % (name, number)
</code></pre>
<p>will print <code>marcog 42</code>. Note that name is a string (%s) and number is an integer (%d for decimal).</p>
<p>See <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="noreferrer">https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting</a> for details.</p>
<p>In Python 3 the example would be:</p>
<pre><code>print('%s %d' % (name, number))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>%s</code> is used as a placeholder for string values you want to inject into a formatted string.</p>
<p><code>%d</code> is used as a placeholder for numeric or decimal values.</p>
<p>For example (for python 3)</p>
<pre><code>print ('%s is %d years old' % ('Joe', 42))
</code></pre>
<p>Would output</p>
<pre><code>Joe is 42 years old
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>from <a href="https://docs.python.org/3.4/library/string.html" rel="noreferrer">python 3 doc</a></p>
<p><code>%d</code> is for decimal integer</p>
<p><code>%s</code> is for generic string or object and in case of object, it will be converted to string</p>
<p>Consider the following code</p>
<pre><code>name ='giacomo'
number = 4.3
print('%s %s %d %f %g' % (name, number, number, number, number))
</code></pre>
<p>the out put will be</p>
<blockquote>
<p>giacomo 4.3 4 4.300000 4.3</p>
</blockquote>
<p>as you can see <code>%d</code> will truncate to integer, <code>%s</code> will maintain formatting, <code>%f</code> will print as float and <code>%g</code> is used for generic number</p>
<p>obviously</p>
<pre><code>print('%d' % (name))
</code></pre>
<p>will generate an exception; you cannot convert string to number</p>
</div>
<div class="post-text" itemprop="text">
<p>These are placeholders:</p>
<p>For example: <code>'Hi %s I have %d donuts' %('Alice', 42)</code></p>
<p>This line of code will substitute %s with Alice (str) and %d with 42.</p>
<p>Output: <code>'Hi Alice I have 42 donuts'</code></p>
<p>This could be achieved with a "+" most of the time. To gain a deeper understanding to your question, you may want to check {} / .format() as well. Here is one example: <a href="https://stackoverflow.com/questions/5082452/python-string-formatting-vs-format">Python string formatting: % vs. .format</a></p>
<p>also see here a google python tutorial video @ 40', it has some explanations
<a href="https://www.youtube.com/watch?v=tKTZoB2Vjuk" rel="nofollow noreferrer">https://www.youtube.com/watch?v=tKTZoB2Vjuk</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>%d</code> and <code>%s</code> are placeholders, they work as a replaceable variable. For example, if you create 2 variables</p>
<pre><code>variable_one = "Stackoverflow"
variable_two = 45
</code></pre>
<p>you can assign those variables to a sentence in a string using a tuple of the variables.</p>
<pre><code>variable_3 = "I was searching for an answer in %s and found more than %d answers to my question"
</code></pre>
<p>Note that <code>%s</code> works for String and <code>%d</code> work for numerical or decimal variables.</p>
<p>if you print <code>variable_3</code> it would look like this</p>
<pre><code>print(variable_3 % (variable_one, variable_two))
</code></pre>
<p>I was searching for an answer in StackOverflow and found more than 45 answers to my question.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>%d</code> and <code>%s</code> string formatting "commands" are used to format strings. The <code>%d</code> is for numbers, and <code>%s</code> is for strings.</p>
<p>For an example:</p>
<pre><code>print("%s" % "hi")
</code></pre>
<p>and</p>
<pre><code>print("%d" % 34.6)
</code></pre>
<p>To pass multiple arguments:</p>
<p><code>print("%s %s %s%d" % ("hi", "there", "user", 123456))</code> will return <code>hi there user123456</code></p>
</div>
<div class="post-text" itemprop="text">
<p>They are format specifiers. They are used when you want to include the value of your Python expressions into strings, with a specific format enforced.</p>
<p>See <a href="http://diveintopython.net/native_data_types/formatting_strings.html" rel="noreferrer">Dive into Python</a> for a relatively detailed introduction.</p>
</div>
<div class="post-text" itemprop="text">
<p>In case you would like to avoid %s or %d then..</p>
<pre><code>name = 'marcog'
number = 42
print ('my name is',name,'and my age is:', number)
</code></pre>
<p>Output:</p>
<pre><code>my name is marcog and my name is 42
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>speaking of which ... <br/>
python3.6 comes with <code>f-strings</code> which  makes things much easier in formatting!
<br/>
now if your python version is greater than 3.6 you can format your strings with these available methods:</p>
<pre><code>name = "python"

print ("i code with %s" %name)          # with help of older method
print ("i code with {0}".format(name))  # with help of format
print (f"i code with {name}")           # with help of f-strings
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per latest standards, this is how it should be done.</p>
<pre><code>print("My name is {!s} and my number is{:d}".format("Agnel Vishal",100))
</code></pre>
<p>Do check <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer">python3.6 docs</a> and <a href="https://github.com/agnelvishal/Condense.press/blob/master/backend/avarticle.py" rel="nofollow noreferrer">sample program</a></p>
</div>
<span class="comment-copy">What would the syntax look like for python3?</span>
<span class="comment-copy">print("%s %d" % (name, number))</span>
<span class="comment-copy">thanks marcog...</span>
<span class="comment-copy">In Google Chrome: Settings &gt;&gt; Search &gt;&gt; Manage search engines... notice how <code>%s</code> is used with search engine configurations. Chrome uses <code>%s</code> to replace keywords entered in the address bar. Python uses <code>%s</code> in a similar way. In <code>print('description: %s' % descrip)</code> the <code>%s</code> operator will be replaced by the text string stored in the <code>descrip</code> variable. The round braces prevent an error message in Python 3.</span>
<span class="comment-copy">@Chaine they are called Placeholders, they are replaceable variables</span>
<span class="comment-copy">Doesn't really explain the problem?  I'm not explaining the problem, I'm providing a concise answer <i>to</i> the question.  The question specifically asked what %s and %d were for.</span>
<span class="comment-copy">You explained "what they do" - not "how they work".</span>
<span class="comment-copy">do you know the difference between %i and %d? does python support %i?</span>
<span class="comment-copy">This deseeves more upvote. It explains what would happen if <code>%s</code> is used for a number instead.</span>
<span class="comment-copy">Up-voted for the use of a float!</span>
<span class="comment-copy">What does this answer have to do with the question? The questioner was asking about use of <code>%s</code> and <code>%d</code>.</span>
<span class="comment-copy">BTW, the code you show is invalid in Python 3.5.1: <code>print</code> is a function in Python 3, not a statement.</span>
<span class="comment-copy">I have edited the post ...please see it. Actually, I posted it as an alternative..if some one might avoid using %d or %s. And thanks for the error detection, ..I have edited the code.</span>
<span class="comment-copy">Thanks for the edits. Unfortunately, this still isn't an answer to the question.</span>
