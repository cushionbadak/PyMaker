<div class="post-text" itemprop="text">
<p>when I run my programs from within Eclipse IDE the following piece of code works perfectly:</p>
<pre><code>address_name = self.text_ctrl_address.GetValue().encode('utf-8')
self.address_list = [i for i in data if address_name.upper() in i[5].upper().encode('utf-8')]
</code></pre>
<p>but when running the same piece of code directly with python, I get an "UnicodeDecodeError".</p>
<p>What does the IDE does differently that it doesn't fall on this error ?</p>
<p>ps: I encode both unicode strings because it is the only way to test one string against another containing letters like ñ or ç.</p>
<p>Edit:</p>
<p>Sorry, I should have given more details: This piece of code belongs to a dialog built with WxPython. The GetValue() functions gets texts from a line edit widget and try to match this piece of text against a database. The program runs on Windows (and because of this, maybe michael Shopsin above might be right("Win-1252 to UTF-8 is a serious nuisance"). I've read many times that I should always work with unicode, avoid encoding, but if I don't encode, certain string methods don't seem to work very well depending on the characters in a word (I am in Spain, so lots of non ascii characters). By directly I meant "double clicking" the file it self, and not running from within the IDE.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>UnicodeDecodeError</code> indicates that the error happens during <em>decoding</em> of a bytestring into Unicode.</p>
<p>In particular, it may happen if you try to <em>encode</em> a bytestring instead of Unicode string on Python 2:</p>
<pre><code>&gt;&gt;&gt; u"\N{EM DASH}".encode('utf-8').encode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 0: ordinal not in range(128)
</code></pre>
<p><code>u"\N{EM DASH}".encode('utf-8')</code> is a bytestring and invoking <code>.encode('utf-8')</code> the 2nd time leads to implicit <code>.decode(sys.getdefaultencoding())</code> that leads to the <code>UnicodeDecodeError</code>.</p>
<blockquote>
<p>What does the IDE does differently that it doesn't fall on this error ?</p>
</blockquote>
<p>It probably works in IDE because it changes <code>sys.getdefaultencoding()</code> to <code>utf-8</code> that you <em>should not</em> do. It may hide bugs as your question demonstrates. In general, it may also break 3rd-party libraries that do not expect non-ascii <code>sys.getdefaultencoding()</code> on Python 2.</p>
<blockquote>
<p>I encode both unicode strings because it is the only way to test one string against another containing letters like ñ or ç.</p>
</blockquote>
<p>You should <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize" rel="nofollow">use <code>unicodedata.normalize()</code> instead</a>:</p>
<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; a, b = u'\xf1', u'n\u0303'
&gt;&gt;&gt; print(a)
ñ
&gt;&gt;&gt; print(b)
ñ
&gt;&gt;&gt; a == unicodedata.normalize('NFC', b)
True
</code></pre>
<p>Note: the code in your question may produce surprising results:</p>
<pre><code>#XXX BROKEN, DON'T DO IT
...address_name.upper() in i[5].upper().encode('utf-8')...
</code></pre>
<p><code>address_name.upper()</code> calls <code>bytes.upper</code> method while <code>i[5].upper()</code> calls <code>unicode.upper</code> method. The former does not support Unicode and it may depend on the current locale, the latter is better but to perform case-insensitive comparison, use <code>.casefold()</code> method instead:</p>
<pre><code>key = unicode_address_name.casefold()
... if key == i[5].casefold()...
</code></pre>
<p>In general, If you need to sort unicode strings then you could use <a href="https://gist.github.com/dpk/8325992/ad45dac1a6e152500b237a4b648e45f427c96bc1" rel="nofollow"><code>icu.Collator</code></a>. Compare the default lexicographical sort:</p>
<pre><code>&gt;&gt;&gt; L = [u'sandwiches', u'angel delight', u'custard', u'éclairs', u'glühwein']
&gt;&gt;&gt; sorted(L)
[u'angel delight', u'custard', u'gl\xfchwein', u'sandwiches', u'\xe9clairs']
</code></pre>
<p>with the order in <code>en_GB</code> locale:</p>
<pre><code>&gt;&gt;&gt; import icu # PyICU
&gt;&gt;&gt; collator = icu.Collator.createInstance(icu.Locale('en_GB'))
&gt;&gt;&gt; sorted(L, key=collator.getSortKey)
[u'angel delight', u'custard', u'\xe9clairs', u'gl\xfchwein', u'sandwiches']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I could solve the problem changing the encoding from UTF-8 to cp1252 (Windows western europe). Apparently UTF-8 could not encode some Windows characters. Thanks to Michael Shopsin above for the insight.</p>
<p>The program runs on windows and uses WxPython dialog , getting values from a line edit widget and matching the string against a database.</p>
<p>Thank you all for the attention, and I hope this post can help people in the future with a similar problem.</p>
</div>
<span class="comment-copy">"directly"?  Do you mean from the command prompt? What OS?  What is the encoding for your console?</span>
<span class="comment-copy">I don't know about Eclipse, but what do you mean "it is the only way to test one string against another"? In modern Python, you shouldn't need to bother about encoding/decoding if you are not doing input or output (from file, DB or network) and even in that case many APIs handle unicode transparently. What is this GetValue() method? Which library?</span>
<span class="comment-copy">Win-1252 to UTF-8 is a serious nuisance, I second Kelmer's question about stable encoding.</span>
<span class="comment-copy">No problem, I've dealt with this problem in a lot of languages.</span>
<span class="comment-copy"><i>"Apparently UTF-8 could not encode some Windows characters."</i> -- it is not correct. <code>cp1252</code> supports <code>0x100</code> characters, <code>utf-8</code> supports more than a million Unicode characters. <code>utf-8</code> may fail on non-valid Unicode text e.g., on a lone surrogate: <code>u'\udce2'</code>. <code>utf-8</code> supports all characters that <code>cp1252</code> supports.</span>
