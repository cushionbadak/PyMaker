<div class="post-text" itemprop="text">
<p>I have dynamic regexp in which I don't know in advance how many groups it has
I would like to replace all matches with xml tags</p>
<p>example</p>
<pre><code>re.sub("(this).*(string)","this is my string",'&lt;markup&gt;\anygroup&lt;/markup&gt;')
&gt;&gt; "&lt;markup&gt;this&lt;/markup&gt; is my &lt;markup&gt;string&lt;/markup&gt;"
</code></pre>
<p>is that even possible in single line?</p>
</div>
<div class="post-text" itemprop="text">
<p>For a constant regexp like in your example, do</p>
<pre><code>re.sub("(this)(.*)(string)",
       r'&lt;markup&gt;\1&lt;/markup&gt;\2&lt;markup&gt;\3&lt;/markup&gt;',
       text)
</code></pre>
<p>Note that you need to enclose .* in parentheses as well if you don't want do lose it.</p>
<p>Now if you don't know what the regexp looks like, it's more difficult, but should be doable.</p>
<pre><code>pattern = "(this)(.*)(string)"
re.sub(pattern,
       lambda m: ''.join('&lt;markup&gt;%s&lt;/markup&gt;' % s if n % 2 == 0
                         else s for n, s in enumerate(m.groups())),
       text)
</code></pre>
<p>If the first thing matched by your pattern doesn't necessarily have to be marked up, use this instead, with the first group optionally matching some prefix text that should be left alone:</p>
<pre><code>pattern = "()(this)(.*)(string)"
re.sub(pattern,
       lambda m: ''.join('&lt;markup&gt;%s&lt;/markup&gt;' % s if n % 2 == 1
                         else s for n, s in enumerate(m.groups())),
       text)
</code></pre>
<p>You get the idea.</p>
<p>If your regexps are complicated and you're not sure you can make everything part of a group, where only every second group needs to be marked up, you might do something smarter with a more complicated function:</p>
<pre><code>pattern = "(this).*(string)"
def replacement(m):
    s = m.group()
    n_groups = len(m.groups())
    # assume groups do not overlap and are listed left-to-right
    for i in range(n_groups, 0, -1):
        lo, hi = m.span(i)
        s = s[:lo] + '&lt;markup&gt;' + s[lo:hi] + '&lt;/markup&gt;' + s[hi:]
    return s
re.sub(pattern, replacement, text)
</code></pre>
<p>If you need to handle overlapping groups, you're on your own, but it should be doable.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>re.sub()</code> will replace everything it can. If you pass it a function for <code>repl</code> then you can do even more.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this can be done in a single line.</p>
<pre><code>&gt;&gt;&gt; re.sub(r"\b(this|string)\b", r"&lt;markup&gt;\1&lt;/markup&gt;", "this is my string")
'&lt;markup&gt;this&lt;/markup&gt; is my &lt;markup&gt;string&lt;/markup&gt;'
</code></pre>
<p><code>\b</code> ensures that only complete words are matched.</p>
<p>So if you have a list of words that you need to mark up, you could do the following:</p>
<pre><code>&gt;&gt;&gt; mywords = ["this", "string", "words"]
&gt;&gt;&gt; myre = r"\b(" + "|".join(mywords) + r")\b"
&gt;&gt;&gt; re.sub(myre, r"&lt;markup&gt;\1&lt;/markup&gt;", "this is my string with many words!")
'&lt;markup&gt;this&lt;/markup&gt; is my &lt;markup&gt;string&lt;/markup&gt; with many &lt;markup&gt;words&lt;/markup&gt;!'
</code></pre>
</div>
<span class="comment-copy">What does the m in lamba m represent?</span>
<span class="comment-copy">The <code>m</code> stands for <code>match</code>, the <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow noreferrer">regexp match object</a>.</span>
<span class="comment-copy">I am expecting my match to appear between &lt;markup&gt;\1|\2|\3.. &lt;markup&gt;</span>
