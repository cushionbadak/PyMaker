<div class="post-text" itemprop="text">
<p>If I want to make my formatted string dynamically adjustable, I will change the following code from</p>
<pre><code>print '%20s : %20s' % ("Python", "Very Good")
</code></pre>
<p>to</p>
<pre><code>width = 20
print ('%' + str(width) + 's : %' + str(width) + 's') % ("Python", "Very Good")
</code></pre>
<p>However, it seems that string concatenation is cumbersome here. Any other way to simplified it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can fetch the padding value from the argument list:</p>
<pre><code>print '%*s : %*s' % (20, "Python", 20, "Very Good")
</code></pre>
<p>You can even insert the padding values dynamically:</p>
<pre><code>width = 20
args = ("Python", "Very Good")
padded_args = zip([width] * len(args), args)
# Flatten the padded argument list.
print "%*s : %*s" % tuple([item for list in padded_args for item in list])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this using the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code></a> method.</p>
<pre><code>&gt;&gt;&gt; width = 20
&gt;&gt;&gt; print("{:&gt;{width}} : {:&gt;{width}}".format("Python", "Very Good", width=width))
              Python :            Very Good
</code></pre>
<p>Starting from Python 3.6 you can use <a href="https://docs.python.org/3.6/reference/lexical_analysis.html#formatted-string-literals" rel="noreferrer"><code>f-string</code></a> to do this:</p>
<pre><code>In [579]: lang = 'Python'

In [580]: adj = 'Very Good'

In [581]: width = 20

In [582]: f'{lang:&gt;{width}}: {adj:&gt;{width}}'
Out[582]: '              Python:            Very Good'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print '%*s : %*s' % (width, 'Python', width, 'Very Good')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to specify the widths at the same time, you can prepare a format string ahead of time, like you were doing - but with another substitution. We use <code>%%</code> to escape actual % signs in a string. We want to end up with <code>%20s</code> in our format string when the width is 20, so we use <code>%%%ds</code> and supply the width variable to substitute in there. The first two % signs become a literal %, and then %d is substituted with the variable.</p>
<p>Thus:</p>
<pre><code>format_template = '%%%ds : %%%ds'
# later:
width = 20
formatter = format_template % (width, width)
# even later:
print formatter % ('Python', 'Very Good')
</code></pre>
</div>
<span class="comment-copy">Related (or duplicate): <a href="https://stackoverflow.com/q/3228865">How do I format a number with a variable number of digits in Python?</a></span>
<span class="comment-copy">Thank you for adding the f-strings solution!</span>
<span class="comment-copy">+1 This is better answer than mine. I was looking at ljust and rjust functions to do that.</span>
<span class="comment-copy">I like this as a way to dynamically generate format strings in general.  However, Mr. Hamidi's approach is better if only the field widths are to be dynamically interpolated.</span>
