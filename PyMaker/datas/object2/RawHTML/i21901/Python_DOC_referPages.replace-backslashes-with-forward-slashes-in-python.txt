<div class="post-text" itemprop="text">
<p>I'm writing a cross platform file explorer in python. I am trying to convert any backslashes in a path into forward slashes in order to deal with all paths in one format.</p>
<p>I've tried not only using string.replace(str, '\\', '/'), but also creating a method manually to search through the string and replace the instances, and both do not work properly, as a path name such as: </p>
<pre><code>\dir\anotherdir\foodir\more
</code></pre>
<p>changes to:</p>
<pre><code>/dir/anotherdir\x0oodir/more
</code></pre>
<p>I am assuming that this has something to do with how Python represents escape characters or something of the sort. How do I prevent this happening?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="http://docs.python.org/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code></a> for this kind of stuff. In Python 3, you can also use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> to represent paths in a portable manner, so you don't have to worry about things like slashes anymore.</p>
</div>
<div class="post-text" itemprop="text">
<p>Elaborating <a href="https://stackoverflow.com/a/4119176/">this answer</a>,
with <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a> you can use the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.as_posix" rel="nofollow noreferrer">as_posix</a> method:</p>
<pre><code>&gt;&gt;&gt; import pathlib
&gt;&gt;&gt; p = pathlib.PureWindowsPath(r'\dir\anotherdir\foodir\more')
&gt;&gt;&gt; print(p)    
\dir\anotherdir\foodir\more
&gt;&gt;&gt; print(p.as_posix())
/dir/anotherdir/foodir/more
&gt;&gt;&gt; str(p)
'\\dir\\anotherdir\\foodir\\more'
&gt;&gt;&gt; str(p.as_posix())
'/dir/anotherdir/foodir/more'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Doesn't this work:</p>
<pre><code>    &gt;&gt;&gt; s = 'a\\b'
    &gt;&gt;&gt; s
    'a\\b'
    &gt;&gt;&gt; print s
    a\b
    &gt;&gt;&gt; s.replace('\\','/')
    'a/b'
</code></pre>
<p>?</p>
<p>EDIT:</p>
<p>Of course this is a string-based solution, and using <em>os.path</em> is wiser if you're dealing with filesystem paths.</p>
</div>
<span class="comment-copy"><code>r'\dir\anotherdir\foodir\more'.replace('\\', '/')</code> works just fine.</span>
<span class="comment-copy">Your error occurs because you typed <code>\dir\anotherdir\foodir\more</code> as a string yourself, and <code>\f</code> is special. If you want Python not to interpret special characters (characters prefixed by backslashes) you should use “raw” strings, e.g: <code>r'\dir\anotherdir\foodir\more'</code></span>
<span class="comment-copy"><code>os.path.abspath</code> will convert them to unified format.</span>
<span class="comment-copy">I cannot see any functions in os.path related to replacing backslashes with forwardslashes. Could you please elaborate?</span>
<span class="comment-copy">The functions in <code>os.path</code> are designed so you don't have to care what kind of slashes your paths contain. E.g. if you use <code>os.path.join</code> to join paths, it will use the appropriate separator for your platform.</span>
<span class="comment-copy">Thanks, so just to be clear there are no functions in os.path that actually replace slashes, just functions that allow you to avoid dealing with path separators.</span>
