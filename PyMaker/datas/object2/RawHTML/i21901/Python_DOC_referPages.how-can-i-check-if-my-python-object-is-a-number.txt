<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3441358/what-is-the-most-pythonic-way-to-check-if-an-object-is-a-number">What is the most pythonic way to check if an object is a number?</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>In Java the numeric types all descend from Number so I would use</p>
<pre><code>(x instanceof Number).
</code></pre>
<p>What is the python equivalent?</p>
</div>
<div class="post-text" itemprop="text">
<p>In more recent Python versions (2.6+; in older versions you're pretty much limited to checking for a few hardcoded types), the correct way is to test if your variable is an instance of <a href="https://docs.python.org/3.6/library/numbers.html#numbers.Number" rel="noreferrer"><code>numbers.Number</code></a>:</p>
<pre><code>&gt;&gt;&gt; import numbers
&gt;&gt;&gt; import decimal
&gt;&gt;&gt; [isinstance(x, numbers.Number) for x in (0, 0.0, 0j, decimal.Decimal(0))]
[True, True, True, True]
</code></pre>
<p>This uses <a href="http://docs.python.org/glossary.html#term-abstract-base-class" rel="noreferrer">ABCs</a> and will work for all build-in number-like classes, and also for all third-party classes if they are worth their salt (registered as subclasses of the <code>Number</code> ABC). However, in many cases you shouldn't worry about checking typed manually - Python is duck-typed and mixing somewhat compatible types usually works, yet it will barf an error message when some operation doesn't make sense (<code>4 - "1"</code>), so manually checking this is rarely really needed. It's just bonus, you can add it when finishing this module to avoid pestering others with implementation details.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this would work:</p>
<p><code>isinstance(x, (int, long, float, complex))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>Number</code> from the <code>numbers</code> module to test <code>isinstance(n, Number)</code> (available since 2.6).</p>
<pre><code>isinstance(n, numbers.Number)
</code></pre>
<p>Here it is in action with various kinds of numbers and one non-number:</p>
<pre><code>&gt;&gt;&gt; from numbers import Number
... from decimal import Decimal
... from fractions import Fraction
... for n in [2, 2.0, Decimal('2.0'), complex(2,0), Fraction(2,1), '2']:
...     print '%15s %s' % (n.__repr__(), isinstance(n, Number))
              2 True
            2.0 True
 Decimal('2.0') True
         (2+0j) True
 Fraction(2, 1) True
            '2' False
</code></pre>
<p>This is, of course, contrary to duck typing. If you are more concerned about how an object acts rather than what it is, perform your operations as if you have a number and use exceptions to tell you otherwise.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure you can use <code>isinstance</code>, but be aware that this is not how Python works. Python is a duck typed language. You should not explicitly check your types. A <code>TypeError</code> will be raised if the incorrect type was passed. </p>
<p>So just assume it is an <code>int</code>. Don't bother checking.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's not really how python works. Just use it like you would a number, and if someone passes you something that's not a number, fail. It's the programmer's responsibility to pass in the correct types.</p>
</div>
<div class="post-text" itemprop="text">
<p>it seems to work</p>
<pre><code>isinstance(TheNumber, (int,float, ...)
</code></pre>
</div>
<span class="comment-copy">For a better answer, see Alex Martelli's answer to the same question.</span>
<span class="comment-copy">Not really a duplicate, the other one is a very specific case of this question (check if something is a number in a vector), and most voted answers really relate to that detail.</span>
<span class="comment-copy">Multiply x by zero.  if the results is anything other than zero then x is not a number see: <a href="https://stackoverflow.com/a/44418960/3419693">stackoverflow.com/a/44418960/3419693</a></span>
<span class="comment-copy">@shrewmouse This is very elegant, thanks for the solution.</span>
<span class="comment-copy">small comment, you can easily get burned if you accidentally try to use comparison with objects of different types because then the types of the objects are compared as strings.</span>
<span class="comment-copy">Switching this to accepted answer because Python 2.5 has fallen far out of favor.</span>
<span class="comment-copy">This gives a false positive when you pass it a boolean: <code>isinstance(True, numbers.Number)</code> returns <code>True</code> even though <code>True</code> is clearly not a number.</span>
<span class="comment-copy">@AlexKahn In Python, booleans are practically numbers: <code>bool</code> inherits from <code>int</code>, <code>abs(True) == 1</code>, <code>"foo" * False == ""</code>, <code>sum([True, False, True]) == 2</code>, <code>"%f" % True == "1.0"</code>, and so on.</span>
<span class="comment-copy">Frustratingly, <code>isinstance(float('nan'), numbers.Number)</code> returns <code>True</code></span>
<span class="comment-copy">Thanks, this is what ended up working for me in Jython (which is python 2.5 so it doesn't have the 'numbers' package).  And yes I have a real reason to break duck typing; I need to treat strings and numbers differently.</span>
<span class="comment-copy"><code>isinstance(Decimal(10), (int, long, float, complex))</code> gives <code>False</code>. -1</span>
<span class="comment-copy">Doesn't work on Python 3 (name 'long' is not defined)</span>
<span class="comment-copy">This also doesn't work if <code>x</code> is a boolean. <code>isinstance(True, (int, long, float, complex))</code> returns <code>True</code>.</span>
<span class="comment-copy"><code>long</code> is probably <a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow noreferrer">deprecated</a> in Python 3</span>
<span class="comment-copy">The "see if there's an exception" strategy is often ineffective. Python is a little aggressive in allowing arithmetic-type operations on all sorts of non-arithmetic things - so just because an object allows <code>+</code> or <code>*</code> doesn't mean it's anything at all like a number.</span>
<span class="comment-copy">as noted before, the whole point of duck-typing is to allow method overloading and method polymorphism in the same class.</span>
<span class="comment-copy">...but only if they are triggered. In the "normal" case they are cheaper than an <code>if</code> statement.</span>
<span class="comment-copy">not always quite so simple, sometimes both types support the interface but you want to handle them differently. Consider a reduce function that should add numbers but not concatenate strings.</span>
<span class="comment-copy">This answer is assuming the most naive scripts, and doesn't consider complex cases.  As Rob says, there are legitimate needs for handling a number differently than a string.  There are also many cases where a custom class needs to behave one way when multiplied by a number and a different way when multiplied by an instance of itself.  You might implement a matrix class in such a way.</span>
<span class="comment-copy">@Falmarri it absolutely does... <a href="http://docs.python.org/2/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">docs.python.org/2/reference/â€¦</a></span>
<span class="comment-copy">Defensive programming is a necessity especially when you are using those values to perform data manipulation operations in, for instance, a database. Dynamic languages are fantastic, but sometimes you need your guarantees.</span>
<span class="comment-copy">Downvoted because this is a duplicate of an already posted answer and it was added <i>nearly two years</i> after the question.</span>
<span class="comment-copy">This answer could have been just deleted instead of downvoted</span>
