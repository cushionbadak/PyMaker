<div class="post-text" itemprop="text">
<p>How do I get the actual filesize on disk in python? (the actual size it takes on the harddrive).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>st = os.stat(…)
du = st.st_blocks * st.st_blksize
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>UNIX only:</p>
<pre><code>import os
from collections import namedtuple

_ntuple_diskusage = namedtuple('usage', 'total used free')

def disk_usage(path):
    """Return disk usage statistics about the given path.

    Returned valus is a named tuple with attributes 'total', 'used' and
    'free', which are the amount of total, used and free space, in bytes.
    """
    st = os.statvfs(path)
    free = st.f_bavail * st.f_frsize
    total = st.f_blocks * st.f_frsize
    used = (st.f_blocks - st.f_bfree) * st.f_frsize
    return _ntuple_diskusage(total, used, free)
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; disk_usage('/')
usage(total=21378641920, used=7650934784, free=12641718272)
&gt;&gt;&gt;
</code></pre>
<p>Edit 1 - also for Windows: <a href="https://code.activestate.com/recipes/577972-disk-usage/?in=user-4178764" rel="noreferrer">https://code.activestate.com/recipes/577972-disk-usage/?in=user-4178764</a></p>
<p>Edit 2 - this is also available in Python 3.3+: <a href="https://docs.python.org/3/library/shutil.html#shutil.disk_usage" rel="noreferrer">https://docs.python.org/3/library/shutil.html#shutil.disk_usage</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>Use os.stat(filename).st_size to get the logical size of the file. Use os.statvfs(filename).f_bsize to get the filesystem block size. Then use integer division to compute the correct size on disk, as below:</p>
<pre><code>lSize=os.stat(filename).st_size
bSize=os.statvfs(filename).f_bsize
sizeOnDisk=(lSize/bSize+1)*bSize
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not certain if this is size on disk, or the logical size:</p>
<pre><code>import os
filename = "/home/tzhx/stuff.wev"
size = os.path.getsize(filename)
</code></pre>
<p>If it's not the droid your looking for, you can round it up by dividing by cluster size (as float), then using ceil, then multiplying.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get the disk usage for a given file/folder, you can do the following:</p>
<pre><code>import os

def disk_usage(path):
    """Return cumulative number of bytes for a given path."""
    # get total usage of current path
    total = os.path.getsize(path)
    # if path is dir, collect children
    if os.path.isdir(path):
        for file_name in os.listdir(path):
            child = os.path.join(path, file_name)
            # recursively get byte use for children
            total += disk_usage(child)
    return total
</code></pre>
<p>The function recursively collects byte usage for files nested within a given path, and returns the cumulative use for the entire path.
You could also add a <code>print "{path}: {bytes}".format(path, total)</code> in there if you want the information for each file to print.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the correct way to get a file's size on disk, on platforms where <code>st_blocks</code> is set:</p>
<pre><code>import os

def size_on_disk(path):
    st = os.stat(path)
    return st.st_blocks * 512
</code></pre>
<p>Other answers that indicate to multiply by <code>os.stat(path).st_blksize</code> or <code>os.vfsstat(path).f_bsize</code> are simply incorrect.</p>
<p>The <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_blocks" rel="nofollow noreferrer">Python documentation for <code>os.stat_result.st_blocks</code></a> very clearly states:</p>
<blockquote>
<p><strong><code>st_blocks</code></strong><br/>
  Number of 512-byte blocks allocated for file. This may be smaller than <code>st_size</code>/512 when the file has holes.</p>
</blockquote>
<p>Furthermore, the <a href="http://man7.org/linux/man-pages/man2/stat.2.html" rel="nofollow noreferrer"><code>stat(2)</code> man page</a> says the same thing:</p>
<blockquote>
<pre><code>blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */
</code></pre>
</blockquote>
</div>
<span class="comment-copy">You mean rouned up by cluster size?</span>
<span class="comment-copy">Take a look at this question: <a href="http://stackoverflow.com/questions/2493172/determine-cluster-size-of-file-system-in-python" title="determine cluster size of file system in python">stackoverflow.com/questions/2493172/…</a></span>
<span class="comment-copy">@ruslik: It's not that simple. Consider e.g. sparse or compressed files, which can take less space than their size indicates.</span>
<span class="comment-copy">+1, didn't realise this was in <code>os.stat</code>!  I was about to refer the questioner to <a href="http://docs.activestate.com/activepython/2.5/pywin32/win32file__DeviceIoControl_meth.html" rel="nofollow noreferrer"><code>win32file.DeviceIoControl</code></a>.  Don't know why I assumed the OP was on Windows :P</span>
<span class="comment-copy">"On some Unix systems (such as Linux), the following attributes may also be available: st_blocks (number of blocks allocated for file), st_blksize (filesystem blocksize)..." – i.e. that's not portable, and you should at least catch the exception that is raised when these members aren't available.</span>
<span class="comment-copy">Careful, this is wrong!  On Linux, <code>st.st_blocks</code> is <i>always</i> in units of 512 bytes, while <code>st.st_blksize</code> is a filesystem blocksize (typically 4096 bytes).  The real usage is <code>st.st_blocks * 512</code>.  See <a href="http://linux.die.net/man/2/stat" rel="nofollow noreferrer">linux.die.net/man/2/stat</a> for details.</span>
<span class="comment-copy">No, you're both wrong: st.st_blocks is NOT ALWAYS in units of 512 bytes.  On my machine it is in units of 1024 (which is strange indeed). Additionally, the answer is wrong because st_blksize does not return 1024, it returns the FILE I/O block size, e.g., st_blksize returns 65536 on my machine. For example, on my dell laptop running python 2.7.8 on cygwin on Windows 7, I created a 3000Byte files ("dd if=/dev/zero bs=3000 count=1 of=./testfile.txt") and: os.stat("testfile.txt").st_blocks=4; os.stat("./testfile.txt").st_blksize=65536; the logical size is 3000, on disk is 4096. I will answer below</span>
<span class="comment-copy">Can you please update your answer to refer to @hft's answer below?</span>
<span class="comment-copy"><code>((lSize-1)/bSize+1)*bSize)</code> might be slightly more accurate.  Thanks for correcting my ancient and wrong answer.</span>
<span class="comment-copy">no problem whatsoever ;)</span>
<span class="comment-copy"><code>Deprecated since version 2.6: The statvfs module has been removed in Python 3.</code> :-( <a href="https://docs.python.org/2/library/statvfs.html" rel="nofollow noreferrer">docs.python.org/2/library/statvfs.html</a></span>
<span class="comment-copy">@danodonovan It looks like the <code>statvfs</code> module has been removed in Python 3, but the answer uses the <code>os</code> module. As you can see, the <a href="https://docs.python.org/3/library/os.html#os.statvfs" rel="nofollow noreferrer">documentation for Python 3</a> reveals that <code>os.statvfs</code> is still around and has even been updated to include new functionality as recently as Python 3.6.</span>
<span class="comment-copy">I am having a situation with larger files where both of your formulae are giving me a value that is 1 block (4,096 bytes) smaller than what du gives me. For example, if you create a file using the command <code>dd if=/dev/zero of=testsize bs=1 count=419472426</code>. Said another way, the difference between du's results using the --apparent-size option is off by 7,126 instead of 4,096. Note: the value from du's --apparent-size option does match the value obtained using <code>os.stat(filename).st_size</code>.</span>
<span class="comment-copy">That's not the size on disk.</span>
<span class="comment-copy">when I used getsize() in windows7,python 2.2, I did get the actual space file occupies. In my case, I crave for the just "file size" not "file space".I wonder how can you get just the file size</span>
<span class="comment-copy">After running multiple tests, on Windows 7 this returns the real size, not the size on disk.</span>
