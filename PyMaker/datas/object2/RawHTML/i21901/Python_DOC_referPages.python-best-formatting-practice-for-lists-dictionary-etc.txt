<div class="post-text" itemprop="text">
<p>I have been looking over the <a href="https://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="noreferrer">Python</a> documentation for code formatting best practice for large lists and dictionaries, for example,</p>
<pre><code>something = {'foo' : 'bar', 'foo2' : 'bar2', 'foo3' : 'bar3'..... 200 chars wide, etc..}
</code></pre>
<p>or</p>
<pre><code>something = {'foo' : 'bar',
             'foo2' : 'bar2',
             'foo3' : 'bar3',
             ...
             }
</code></pre>
<p>or</p>
<pre><code>something = {
             'foo' : 'bar',
             'foo2' : 'bar2',
             'foo3' : 'bar3',
             ...
             }
</code></pre>
<p>How do I handle deep nesting of lists/dictionaries?</p>
</div>
<div class="post-text" itemprop="text">
<p>My preferred way is:</p>
<pre><code>something = {'foo': 'bar',
             'foo2': 'bar2',
             'foo3': 'bar3',
             ...
             'fooN': 'barN'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>aaronasterling's indentation style is what I prefer. This, and several other styles are explained in <a href="https://stackoverflow.com/questions/1431862/python-bracket-convention">another SO Question</a>. Especially Lennart Regebro's answer gave a nice overview.</p>
<p>But this style was the one most voted for:</p>
<pre><code>my_dictionary = {
    1: 'something',
    2: 'some other thing',
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="http://www.python.org/dev/peps/pep-0008/#indentation">PEP8 style guide</a> there are two ways to format a dictionary:</p>
<pre><code>mydict = {
    'key': 'value',
    'key': 'value',
    ...
    }
</code></pre>
<p>OR</p>
<pre><code>mydict = {
    'key': 'value',
    'key': 'value',
    ...
}
</code></pre>
<p>If you want to conform to PEP8 I would say anything else is technically wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>Define your dictionary in any way you want and then try this:</p>
<pre><code>from pprint import pprint

pprint(yourDict)

# for a short dictionary it returns:

{'foo': 'bar', 'foo2': 'bar2', 'foo3': 'bar3'}

# for a longer/nested:

{'a00': {'b00': 0,
         'b01': 1,
         'b02': 2,
         'b03': 3,
         'b04': 4,
         'b05': 5,
         'b06': 6,
         'b07': 7,
         'b08': 8,
         'b09': 9},
 'a01': 1,
 'a02': 2,
 'a03': 3,
 'a04': 4,
 'a05': 5,
 'a06': 6,
 'a07': 7,
 'a08': 8,
 'a09': 9,
 'a10': 10}
</code></pre>
<p>Do you like the output?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you go by <a href="http://code.google.com/p/ganeti/wiki/StyleGuide#Formatting_sequences" rel="nofollow">ganeti</a> (which respects PEP 8) you should choose the third option.</p>
<pre><code>something = {
             'foo1': 'bar1',
             'foo2': 'bar2',
             'foo3': 'bar3',
             ...
             }
</code></pre>
<p>I like this esp. because you can select <em>only</em> the elements you want. And I feel removing or adding elements to either ends is faster this way.</p>
<p><strong>Note:</strong> As pointed out in the comment there should be no whitespace before ':' (E203) as per PEP.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, the first one is a no-go, since your lines should only 79 characters wide. With regards to the other two options, I suppose it's a matter of taste, but I personally prefer the second option.</p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer the second or third one. </p>
<p>Reason: </p>
<ol>
<li>Each element is on its own line</li>
<li>Reaching to end of line to add a new element is a pain in a text editor</li>
<li>Adding a new element is easy</li>
<li>With the third option, sometimes you can check the number of elements by selecting those lines. Most editors will tell you the number of selected lines.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Definitely NOT option 1, one of the strenghts of <a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="nofollow">Python</a> is its legibility. Option 1 severely diminishes that legibility.</p>
<p>Out of 2 and 3, I'll echo the same reasons pyfunc stated for both.</p>
<p>However, in my own code I prefer option 3 simply because the first element sometimes gets 'lost' by being at the end of the declare line, and upon quick glancing at code sometimes I just won't see it immediately. I know it's a little silly, but the mind works in mysterious ways ...</p>
</div>
<div class="post-text" itemprop="text">
<p>I love the second way:</p>
<pre><code>something = {'foo' : 'bar',
         'foo2' : 'bar2',
         'foo3' : 'bar3',
         ...
         'fooN': 'barN'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Previous to reading this post I would have opted for the third option you give. But now I might go for the one that is NOT Török Gábor's style:</p>
<p>my_dictionary = {
    1: 'something',
    2: 'some other thing',
}</p>
<p>But honestly anything aside from your first option is probably fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>I want to mention the following option, which is not specifically mentioned in the PEP8, but is noted in the <a href="https://docs.python.org/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary documentation</a>: "When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:"</p>
<pre><code>my_dict = dict(
    foo = 1,
    bar = 2,
    baz = 3,
    ...
)
</code></pre>
<p>It doesn't settle the indentation question, however.</p>
</div>
<span class="comment-copy">+1 it conforms to PEP8.</span>
<span class="comment-copy">Slightly less git-friendly in that changing key/values on first or last line pull in other syntax elements into changeset.</span>
<span class="comment-copy">what about nested dictionaries?</span>
<span class="comment-copy">That's not my style :)</span>
<span class="comment-copy">I particularly like that python allows you to follow the last item of a dictionary, list, or tuple with a comma. This makes it easier to re-order or to extend the sequence later.</span>
<span class="comment-copy">@AndrewF I must agree. That's one of the only things JSON makes me angry about, in refusing to handle a trailing comma in sequences.</span>
<span class="comment-copy">@Török Sorry, changed it.</span>
<span class="comment-copy">It must have been C/Java programmers voting on that because they saw  something familiar.</span>
<span class="comment-copy">OP doesn't want to know how to print it but how to format it IN the source code.</span>
<span class="comment-copy">@aaronasterling - of course. This can show him, how to format a given structure in his source code.</span>
<span class="comment-copy">so how does pprint print out? second or third?</span>
<span class="comment-copy">@Ashish - first for short, second for longer structures</span>
<span class="comment-copy">Yes, as <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer"><code>pprint</code></a> is in the standard library, it provides a preferable style to follow according to the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Zen of Python</a> motto <i>"There should be one-- and preferably only one --obvious way to do it."</i></span>
<span class="comment-copy">This does not conform to PEP8 because there is whitespace before ':' (E203).</span>
<span class="comment-copy">@Török Gábor: copy paste error :P</span>
<span class="comment-copy">"ganeti" link is not working :(</span>
<span class="comment-copy">#4 works with the second option too.</span>
<span class="comment-copy">@aaronasterling: Yup, I should have written second and third option.</span>
<span class="comment-copy">I don't agree with #2. Use a text editor that powers you and not restricts you.</span>
