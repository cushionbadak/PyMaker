<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2710940/python-if-x-is-not-none-or-if-not-x-is-none">Python `if x is not None` or `if not x is None`?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>Out of these not None tests.</p>
<pre><code>if val != None:

if not (val is None):

if val is not None:
</code></pre>
<p>Which one is preferable, and why?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if val is not None:
    # ...
</code></pre>
<p>is the Pythonic idiom for testing that a variable is not set to <code>None</code>. This idiom has particular uses in the case of <a href="http://effbot.org/zone/default-values.htm" rel="noreferrer">declaring keyword functions with default parameters</a>. <code>is</code> tests identity in Python. Because there is one and only one instance of <code>None</code> present in a running Python script/program, <code>is</code> is the optimal test for this. As <a href="https://stackoverflow.com/questions/3965104/not-none-test-in-python/3965165#3965165">Johnsyweb points out</a>, this is discussed in <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> under "Programming Recommendations".</p>
<p>As for why this is preferred to </p>
<pre><code>if not (val is None):
    # ...
</code></pre>
<p>this is simply part of the <a href="http://www.python.org/dev/peps/pep-0020/" rel="noreferrer">Zen of Python</a>: "Readability counts." Good Python is often close to good <a href="http://en.wikipedia.org/wiki/Pseudocode" rel="noreferrer">pseudocode</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From, Programming Recommendations, <a href="http://www.python.org/dev/peps/pep-0008/">PEP 8</a>:</p>
<blockquote>
<p>Comparisons to singletons like None should always be done with
  'is' or 'is not', never the equality operators.</p>
<p>Also, beware of writing "if x" when you really mean "if x is not None"
  -- e.g. when testing whether a variable or argument that defaults to
  None was set to some other value.  The other value might have a type
  (such as a container) that could be false in a boolean context!</p>
</blockquote>
<p>PEP 8 is essential reading for any Python programmer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Either of the latter two, since <code>val</code> could potentially be of a type that defines <code>__eq__()</code> to return true when passed <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best bet with these types of questions is to see exactly what python does.  The <code>dis</code> module is incredibly informative:</p>
<pre><code>&gt;&gt;&gt; def f(val):
...   if val != None:
...     return True
...   return False
...
&gt;&gt;&gt; def g(val):
...   if not (val is None):
...     return True
...   return False
...
&gt;&gt;&gt; def h(val):
...   if val is not None:
...     return True
...   return False
...
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_FAST                0 (val)
              3 LOAD_CONST               0 (None)
              6 COMPARE_OP               3 (!=)
              9 POP_JUMP_IF_FALSE       16

  3          12 LOAD_GLOBAL              1 (True)
             15 RETURN_VALUE

  4     &gt;&gt;   16 LOAD_GLOBAL              2 (False)
             19 RETURN_VALUE
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_FAST                0 (val)
              3 LOAD_CONST               0 (None)
              6 COMPARE_OP               9 (is not)
              9 POP_JUMP_IF_FALSE       16

  3          12 LOAD_GLOBAL              1 (True)
             15 RETURN_VALUE

  4     &gt;&gt;   16 LOAD_GLOBAL              2 (False)
             19 RETURN_VALUE
&gt;&gt;&gt; dis.dis(h)
  2           0 LOAD_FAST                0 (val)
              3 LOAD_CONST               0 (None)
              6 COMPARE_OP               9 (is not)
              9 POP_JUMP_IF_FALSE       16

  3          12 LOAD_GLOBAL              1 (True)
             15 RETURN_VALUE

  4     &gt;&gt;   16 LOAD_GLOBAL              2 (False)
             19 RETURN_VALUE
</code></pre>
<p>Note that the last two cases reduce to the same sequence of operations (python reads <code>not (val is None)</code> and uses the <code>is not</code> operator).  The first uses the <code>!=</code> operator when comparing with None.</p>
<p>As pointed out by other answers, using <code>!=</code> when comparing with None is a bad idea</p>
</div>
<span class="comment-copy">also, "is not" has special semeantics created for this purpose (it's not a logical consequence of how expressions are constructed; "1 is (not None)" and "1 is not None" have two different outcomes.</span>
<span class="comment-copy">+1: I liked this reference - "Good Python is often close to good pseudocode"</span>
<span class="comment-copy">"not None" returns True. Interesting.</span>
<span class="comment-copy">@Ethan <code>val = ''; print(val is not None)</code> prints <code>True</code>, so what part do you find incorrect?</span>
<span class="comment-copy">As for why the <code>val != None</code> is not recommended: If <code>val</code> can be either <code>None</code> or a more complex thing, like a numpy array, it's not entirely clear whether this intends to be an element-wise comparison (e.g: <code>arr&gt;0 </code> will produce a list of indices at which elements of arr are positive), so if you expect <code>val</code> to be either an array or <code>None</code>, then <code>arr is None</code> is the safest way to test this. In fact, Python 2.7.6 generates a warning that <code>arr != None</code> will work element-wise in the future. <code>arr is not None</code> is also nicer to read.</span>
<span class="comment-copy">+1 for the "essential reading" -- didn't know about that</span>
<span class="comment-copy">That's rather dastardly <code>__eq__()</code> behavior, and something I hadn't considered. Good answer for catching a corner case.</span>
<span class="comment-copy">What is the difference betwen compare_op 9 and 3?</span>
<span class="comment-copy">@evolvedmicrobe From the <code>dis doc</code> (<a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer">https://docs.python.org/3/library/dis.html</a>), <code>COMPARE_OP</code> performs the boolean operation corresponding to the tuple <code>dis.cmp_op = ('&lt;', '&lt;=', '==', '!=', '&gt;', '&gt;=', 'in', 'not in', 'is', 'is not', 'exception match', 'BAD')</code>. So <code>COMPARE_OP 9</code> performs <code>is not</code> and <code>COMPARE_OP 3</code> performs <code>!=</code>.</span>
