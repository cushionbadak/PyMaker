<div class="post-text" itemprop="text">
<p>Sometimes when I get input from a file or the user, I get a string with escape sequences in it. I would like to process the escape sequences <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">in the same way that Python processes escape sequences in string literals</a>.</p>
<p>For example, let's say <code>myString</code> is defined as:</p>
<pre><code>&gt;&gt;&gt; myString = "spam\\neggs"
&gt;&gt;&gt; print(myString)
spam\neggs
</code></pre>
<p>I want a function (I'll call it <code>process</code>) that does this:</p>
<pre><code>&gt;&gt;&gt; print(process(myString))
spam
eggs
</code></pre>
<p>It's important that the function can process all of the escape sequences in Python (listed in a table in the link above).</p>
<p>Does Python have a function to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct thing to do is use the 'string-escape' code to decode the string.</p>
<pre><code>&gt;&gt;&gt; myString = "spam\\neggs"
&gt;&gt;&gt; decoded_string = bytes(myString, "utf-8").decode("unicode_escape") # python3 
&gt;&gt;&gt; decoded_string = myString.decode('string_escape') # python2
&gt;&gt;&gt; print(decoded_string)
spam
eggs
</code></pre>
<p>Don't use the AST or eval. Using the string codecs is much safer.</p>
</div>
<div class="post-text" itemprop="text">
<h2><code>unicode_escape</code> doesn't work in general</h2>
<p>It turns out that the <code>string_escape</code> or <code>unicode_escape</code> solution does not work in general -- particularly, it doesn't work in the presence of actual Unicode.</p>
<p>If you can be sure that <em>every</em> non-ASCII character will be escaped (and remember, anything beyond the first 128 characters is non-ASCII), <code>unicode_escape</code> will do the right thing for you. But if there are any literal non-ASCII characters already in your string, things will go wrong.</p>
<p><code>unicode_escape</code> is fundamentally designed to convert bytes into Unicode text. But in many places -- for example, Python source code -- the source data is already Unicode text.</p>
<p>The only way this can work correctly is if you encode the text into bytes first. UTF-8 is the sensible encoding for all text, so that should work, right?</p>
<p>The following examples are in Python 3, so that the string literals are cleaner, but the same problem exists with slightly different manifestations on both Python 2 and 3.</p>
<pre><code>&gt;&gt;&gt; s = 'naïve \\t test'
&gt;&gt;&gt; print(s.encode('utf-8').decode('unicode_escape'))
naÃ¯ve   test
</code></pre>
<p>Well, that's wrong.</p>
<p>The new recommended way to use codecs that decode text into text is to call <code>codecs.decode</code> directly. Does that help?</p>
<pre><code>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; print(codecs.decode(s, 'unicode_escape'))
naÃ¯ve   test
</code></pre>
<p>Not at all. (Also, the above is a UnicodeError on Python 2.)</p>
<p>The <code>unicode_escape</code> codec, despite its name, turns out to assume that all non-ASCII bytes are in the Latin-1 (ISO-8859-1) encoding. So you would have to do it like this:</p>
<pre><code>&gt;&gt;&gt; print(s.encode('latin-1').decode('unicode_escape'))
naïve    test
</code></pre>
<p>But that's terrible. This limits you to the 256 Latin-1 characters, as if Unicode had never been invented at all!</p>
<pre><code>&gt;&gt;&gt; print('Ernő \\t Rubik'.encode('latin-1').decode('unicode_escape'))
UnicodeEncodeError: 'latin-1' codec can't encode character '\u0151'
in position 3: ordinal not in range(256)
</code></pre>
<h2>Adding a regular expression to solve the problem</h2>
<p>(Surprisingly, we do not now have two problems.)</p>
<p>What we need to do is only apply the <code>unicode_escape</code> decoder to things that we are certain to be ASCII text. In particular, we can make sure only to apply it to valid Python escape sequences, which are guaranteed to be ASCII text.</p>
<p>The plan is, we'll find escape sequences using a regular expression, and use a function as the argument to <code>re.sub</code> to replace them with their unescaped value.</p>
<pre><code>import re
import codecs

ESCAPE_SEQUENCE_RE = re.compile(r'''
    ( \\U........      # 8-digit hex escapes
    | \\u....          # 4-digit hex escapes
    | \\x..            # 2-digit hex escapes
    | \\[0-7]{1,3}     # Octal escapes
    | \\N\{[^}]+\}     # Unicode characters by name
    | \\[\\'"abfnrtv]  # Single-character escapes
    )''', re.UNICODE | re.VERBOSE)

def decode_escapes(s):
    def decode_match(match):
        return codecs.decode(match.group(0), 'unicode-escape')

    return ESCAPE_SEQUENCE_RE.sub(decode_match, s)
</code></pre>
<p>And with that:</p>
<pre><code>&gt;&gt;&gt; print(decode_escapes('Ernő \\t Rubik'))
Ernő     Rubik
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The actually correct and convenient answer for python 3:</p>
<pre><code>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; myString = "spam\\neggs"
&gt;&gt;&gt; print(codecs.escape_decode(bytes(myString, "utf-8"))[0].decode("utf-8"))
spam
eggs
&gt;&gt;&gt; myString = "naïve \\t test"
&gt;&gt;&gt; print(codecs.escape_decode(bytes(myString, "utf-8"))[0].decode("utf-8"))
naïve    test
</code></pre>
<p>Details regarding <code>codecs.escape_decode</code>:</p>
<ul>
<li><code>codecs.escape_decode</code> is a bytes-to-bytes decoder</li>
<li><code>codecs.escape_decode</code> decodes ascii escape sequences, such as: <code>b"\\n"</code> -&gt; <code>b"\n"</code>, <code>b"\\xce"</code> -&gt; <code>b"\xce"</code>.</li>
<li><code>codecs.escape_decode</code> does not care or need to know about the byte object's encoding, but the encoding of the escaped bytes should match the encoding of the rest of the object.</li>
</ul>
<p>Background:</p>
<ul>
<li><a href="https://stackoverflow.com/a/24519338/2626865">@rspeer</a> is correct: <code>unicode_escape</code> is the incorrect solution for python3. This is because <code>unicode_escape</code> decodes escaped bytes, then decodes bytes to unicode string, but receives no information regarding which codec to use for the second operation.</li>
<li><a href="https://stackoverflow.com/a/4020824/2626865">@Jerub</a> is correct: avoid the AST or eval.</li>
<li>I first discovered <code>codecs.escape_decode</code> from <a href="https://stackoverflow.com/a/23151714/2626865">this answer to "how do I .decode('string-escape') in Python3?"</a>. As that answer states, that function is currently not documented for python 3.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/ast.html#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval</code></a> function comes close, but it will expect the string to be properly quoted first.</p>
<p>Of course Python's interpretation of backslash escapes depends on how the string is quoted (<code>""</code> vs <code>r""</code> vs <code>u""</code>, triple quotes, etc) so you may want to wrap the user input in suitable quotes and pass to <code>literal_eval</code>. Wrapping it in quotes will also prevent <code>literal_eval</code> from returning a number, tuple, dictionary, etc.</p>
<p>Things still might get tricky if the user types unquoted quotes of the type you intend to wrap around the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a bad way of doing it, but it worked for me when trying to interpret escaped octals passed in a string argument.</p>
<pre class="lang-py prettyprint-override"><code>input_string = eval('b"' + sys.argv[1] + '"')
</code></pre>
<p>It's worth mentioning that there is a difference between eval and ast.literal_eval (eval being way more unsafe). See <a href="https://stackoverflow.com/questions/15197673/using-pythons-eval-vs-ast-literal-eval">Using python's eval() vs. ast.literal_eval()?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Below code should work for \n is required to be displayed on the string.</p>
<pre><code>import string

our_str = 'The String is \\n, \\n and \\n!'
new_str = string.replace(our_str, '/\\n', '/\n', 1)
print(new_str)
</code></pre>
</div>
<span class="comment-copy">hmmm, how exactly would you expect a string containing <code>'spam'+"eggs"+'''some'''+"""more"""</code> to be processed?</span>
<span class="comment-copy">@Nas Banov That's a good test. That string contains no escape sequences, so it should be exactly the same after processing. <code>myString = "'spam'+\"eggs\"+'''some'''+\"\"\"more\"\"\""</code>, <code>print(bytes(myString, "utf-8").decode("unicode_escape"))</code> seems to work.</span>
<span class="comment-copy">Most answers to this question have serious problems. There seems to be no standard way to honor escape sequences in Python without breaking unicode. The answer posted by @rspeer is the one that I adopted for <a href="https://pypi.python.org/pypi/grako/" rel="nofollow noreferrer">Grako</a> as it so far handles all known cases.</span>
<span class="comment-copy">hands down, the <b>best</b> solution! btw, by docs it should be "string_escape" (with underscore) but for some reason accepts anything in the pattern 'string escape', 'string@escape" and whatnot... basically <code>'string\W+escape'</code></span>
<span class="comment-copy">@Nas Banov The documentation does <a href="http://docs.python.org/library/codecs.html#standard-encodings" rel="nofollow noreferrer">make a small mention about that</a>: <code>Notice that spelling alternatives that only differ in case or use a hyphen instead of an underscore are also valid aliases; therefore, e.g. 'utf-8' is a valid alias for the 'utf_8' codec.</code></span>
<span class="comment-copy">This solution is not good enough because it doesn't handle the case in which there are legit unicode characters in the original string. If you try:  <code>&gt;&gt;&gt; print("juancarlo\\tañez".encode('utf-8').decode('unicode_escape'))</code>  You get:  <code>juancarlo    aÃ±ez</code></span>
<span class="comment-copy">Agreed with @Apalala: this is not good enough. Check out rseeper's answer below for a complete solution that works in Python2 and  3!</span>
<span class="comment-copy">Since <code>latin1</code> is assumed by <code>unicode_escape</code>, redo the encode/decode bit, e.g. <code>s.encode('utf-8').decode('unicode_escape').encode('latin1').decode('utf8')</code></span>
<span class="comment-copy">we need more encompassing types of answers like that. thanks.</span>
<span class="comment-copy">Does this work with <code>os.sep</code> at all? I'm trying to do this: <code>patt = '^' + self.prefix + os.sep ; name = sub(decode_escapes(patt), '', name)</code> and it's not working. Semicolon is there in place of a new line.</span>
<span class="comment-copy">@Pureferret I'm not really sure what you're asking, but you probably shouldn't run this on strings where the backslash has a different meaning, such as Windows file paths. (Is that what your <code>os.sep</code> is?) If you have backslashed escape sequences in your Windows directory names, the situation is pretty much unrecoverable.</span>
<span class="comment-copy">The escape sequence doesn't have escapes in them,  but I'm getting a 'bogus escape string ' error</span>
<span class="comment-copy">That tells me that you ended some other regular expression with a backslash: <a href="http://stackoverflow.com/questions/4427174/python-re-bogus-escape-error" title="python re bogus escape error">stackoverflow.com/questions/4427174/…</a></span>
<span class="comment-copy">This is the real answer (: Too bad it relies upon a poorly-documented function.</span>
<span class="comment-copy">This is the answer for situations where the escape sequences you have are <code>\x</code> escapes of UTF-8 bytes. But because it decodes bytes to bytes, it doesn't -- and can't -- decode any escapes of non-ASCII Unicode characters, such as <code>\u</code> escapes.</span>
<span class="comment-copy">I see. This seems to be potentially dangerous as you say: <code>myString = "\"\ndoBadStuff()\n\""</code>, <code>print(ast.literal_eval('"' + myString + '"'))</code> seems to try to run code. How is <code>ast.literal_eval</code> any different/safer than <code>eval</code>?</span>
<span class="comment-copy">@dln385: <code>literal_eval</code> never executes code. From the documentation, "This can be used for safely evaluating strings containing Python expressions from untrusted sources without the need to parse the values oneself."</span>
<span class="comment-copy">requires Python 2.6+ ?</span>
<span class="comment-copy">This doesn't work as written (the forward slashes make the <code>replace</code> do nothing), uses wildly outdated APIs (the <code>string</code> module functions of this sort are deprecated as of Python 2.0, replaced by the <code>str</code> methods, and gone completely in Python 3), and only handles the specific case of replacing a single newline, not general escape processing.</span>
