<div class="post-text" itemprop="text">
<p>I've inherited the maintenance of some scientific computing using Parallel Python on a cluster.  With Parallel Python, jobs are submitted to a ppserver, which (in this case) talks to already-running ppserver processes on other computers, dishing tasks out to ppworkers processes.</p>
<p>I'd like to use the standard library logging module to log errors and debugging information from the functions that get submitted to a ppserver.  Since these ppworkers run as separate processes (on separate computers) I'm not sure how to properly structure the logging. Must I log to a separate file for each process? Maybe there's a log handler that would make it all better?</p>
<p>Also, I want reports on what process on what computer has hit an error, but the code I'm writing the logging in probably isn't aware of these things; maybe that should be happening at the ppserver level?</p>
<p>(Version of the question cross-posted on Parallel Python Forums, I'll post an answer here if I get something there about this from a non SO user)</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to solve your problem is to do the following:</p>
<ol>
<li>In each worker process, use a <code>logging.handlers.SocketHandler</code> to send events from the worker to a dedicated logger process.</li>
<li>Create a dedicated logger process which listens for logging events on a socket, based on the working example given in the docs at <a href="https://docs.python.org/3/howto/logging-cookbook.html#sending-and-receiving-logging-events-across-a-network" rel="nofollow noreferrer">https://docs.python.org/3/howto/logging-cookbook.html#sending-and-receiving-logging-events-across-a-network</a></li>
<li>Profit ;-)</li>
</ol>
<p>If you catch exceptions in your worker functions and log them, then you should be able to get visibility of errors across all workers in one place.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd use Python's <code>logging</code> and <code>socket</code> APIs. Just follow the example <a href="http://docs.python.org/library/logging.html#sending-and-receiving-logging-events-across-a-network" rel="nofollow">here</a>.</p>
<p>Simply start a <code>ppworker</code> dedicated to logging somewhere, and create a new <code>logging.Logger</code> in each of the other workers with a <code>logging.SocketHandler</code> specifying the hostname and port of the machine running the logging <code>ppworker</code>. </p>
<p>If you have a syslog server running, you can also use Python's <code>syslog</code> module, which is documented <a href="http://docs.python.org/library/syslog.html" rel="nofollow">here</a>.</p>
</div>
