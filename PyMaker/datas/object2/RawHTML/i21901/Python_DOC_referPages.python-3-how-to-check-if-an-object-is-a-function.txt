<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/624926/how-do-i-detect-whether-a-python-variable-is-a-function">How do I detect whether a Python variable is a function?</a>
<span class="question-originals-answer-count">
                    22 answers
                </span>
</li>
</ul>
</div>
<p>Am I correct assuming that all functions (built-in or user-defined) belong to the same class, but that class doesn't seem to be bound to any variable by default?</p>
<p>How can I check that an object is a function?</p>
<p>I can do this I guess:</p>
<pre><code>def is_function(x):
  def tmp()
    pass
  return type(x) is type(tmp)
</code></pre>
<p>It doesn't seem neat, and I'm not even 100% sure it's perfectly correct.</p>
</div>
<div class="post-text" itemprop="text">
<p>in python2:</p>
<pre><code>callable(fn)
</code></pre>
<p>in python3:</p>
<pre><code>isinstance(fn, collections.Callable)
</code></pre>
<p>as Callable is an Abstract Base Class, this is equivalent to:</p>
<pre><code>hasattr(fn, '__call__')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How can I check that an object is a function?</p>
</blockquote>
<p>Isn't this same as checking for callables</p>
<pre><code>hasattr(object, '__call__')
</code></pre>
<p>and also in python 2.x</p>
<pre><code>callable(object) == True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>def is_function(x):
    import types
    return isinstance(x, types.FunctionType) \
        or isinstance(x, types.BuiltinFunctionType)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>try:
    magicVariable()
except TypeError as e:
    print( 'was no function' )
</code></pre>
</div>
<span class="comment-copy">There are also objects with a <b>call</b> method that can be called as a function.</span>
<span class="comment-copy">All classes can be called as a function.</span>
<span class="comment-copy">The <code>callable</code> function was first removed in Python 3.0 and then brought back in Python 3.2 - so you can also use it w/ Python 3 if using a recent version of the interpreter. See <a href="http://docs.python.org/3/library/functions.html?highlight=callable#callable" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> for more information.</span>
<span class="comment-copy">it also applies to classes, but +1 anyway has it seems more in the logic of duck typing</span>
<span class="comment-copy">but does this also check if it is of the same class ?</span>
<span class="comment-copy">@Version, what do you mean by <code>if it is of the same class</code>?</span>
<span class="comment-copy"><code>is</code> on type objects, yikes. If you must use explicit typechecks, at least use <code>isinstance()</code>, and preferably ask the <code>inspect</code> module to do it instead.</span>
<span class="comment-copy">Explicit "type(object) is SomeType" is error-prone and has been long-ago replaced with <code>isinstance</code> - learn the new and improved coding idioms!</span>
<span class="comment-copy">@Thomas, @Paul, you're right, answer updated. Thanks for the heads-up :)</span>
<span class="comment-copy">-1, you shouldn't have to execute the function to test it.</span>
<span class="comment-copy">My code is not meant as a <i>test</i>. When you have a variable, the only reason why you would check if it is a function is because you want to use it. So instead of investing time in checking that beforehand, you should just use it as a function and handle the exception.</span>
<span class="comment-copy">i +1'ed it because in the general case, I think you're right but there are definitely cases where one wants to know if one is dealing with a function without having any intent of executing it. Metaclasses and class decorators come to mind.</span>
<span class="comment-copy">@poke: no, that is one reason. What if you want store the function? If you use this method it will be much more difficult to debug.</span>
<span class="comment-copy">This doesn't work if the function raises a TypeError.</span>
