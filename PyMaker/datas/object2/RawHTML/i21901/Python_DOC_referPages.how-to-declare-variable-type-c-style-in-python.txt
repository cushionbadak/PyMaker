<div class="post-text" itemprop="text">
<p>i'm a programming student and my teacher is starting with C to teach us the programming paradigms, he said it's ok if i deliver my homework in python(it's easier and faster for the homeworks). And i would like to have my code to be as close as posible as in plain C.
Question is
How do i declare data types for variables in python like you do in C. ex:</p>
<pre><code>int X,Y,Z;
</code></pre>
<p>I know i can do this in python</p>
<pre><code>x = 0
y = 0
z = 0
</code></pre>
<p>But that seems a lot of work and it misses the point of python being easier/faster than C.
So, whats <em>the shorttest way</em> to do this?
P.S. i know you dont <em>have to</em> declare the data type in python most of the time, but still i would like to do it so my code looks as much possible like classmates'.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no way to declare variables in Python, since neither "declaration" nor "variables" in the C sense exist. This will <strong>bind</strong> the three <strong>names</strong> to the same object:</p>
<pre><code>x = y = z = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python isn't necessarily easier/faster than C, though it's <strong>possible</strong> that it's simpler  ;)</p>
<p>To clarify another statement you made, "you don't have to declare the data type" - it should be restated that you <strong>can't</strong> declare the data type.  When you assign a value to a variable, the type of the value becomes the type of the variable.  It's a subtle difference, but different nonetheless.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm surprised no one has pointed out that you actually can do this:</p>
<pre><code>decimalTwenty = float(20)
</code></pre>
<p>In a lot of cases it is meaningless to type a variable, as it can be retyped at any time.  However in the above example it could be useful.  There are other type functions like this such as: <code>int()</code>, <code>long()</code>, <code>float()</code> and <code>complex()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>From python 3.6, you can declare types of variables and funtions, like this :</p>
<pre><code>explicite_number: type
</code></pre>
<p>or for a function</p>
<pre><code>def function(explicite_number: type) -&gt; type
</code></pre>
<p>This example from this post: <a href="https://medium.com/@ageitgey/learn-how-to-use-static-type-checking-in-python-3-6-in-10-minutes-12c86d72677b" rel="noreferrer">How to Use Static Type Checking in Python 3.6</a> is more explicit</p>
<pre><code>from typing import Dict

    def get_first_name(full_name: str) -&gt; str:
        return full_name.split(" ")[0]

    fallback_name: Dict[str, str] = {
        "first_name": "UserFirstName",
        "last_name": "UserLastName"
    }

    raw_name: str = input("Please enter your name: ")
    first_name: str = get_first_name(raw_name)

    # If the user didn't type anything in, use the fallback name
    if not first_name:
        first_name = get_first_name(fallback_name)

    print(f"Hi, {first_name}!")
</code></pre>
<p>You can find all the information in oficial domentation for typing python: 
<a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">typing â€” Support for type hints</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Everything in Python is an object, and that includes classes, class instances, code in functions, libraries of functions called modules, as well as data values like integers, floating-point numbers, strings, or containers like lists and dictionaries. It even includes namespaces which are dictionary-like (or mapping) containers which are used to keep track of the associations between identifier names (character string objects) and to the objects which currently exist. An object can even have multiple names if two or more identifiers become associated with the same object.</p>
<p>Associating an identifier with an object is called "binding a name to the object". That's the closest thing to a variable declaration there is in Python. Names can be associated with different objects at different times, so it makes no sense to declare what type of data you're going to attach one to -- you just do it. Often it's done in one line or block of code which specifies both the name and a definition of the object's value causing it to be created, like <code>&lt;variable&gt; = 0</code> or a function starting with a <code>def &lt;funcname&gt;</code>.</p>
<p>How this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>But strong types and variable definitions are actually there to make development easier. If you haven't thought these things through in advance you're not designing and developing code but merely hacking.</p>
<p>Loose types simply shift the complexity from "design/hack" time to run time.</p>
</div>
<span class="comment-copy">You're not quite understanding what variables are in Python. Think of it like C void* pointers: they don't have an inherent type, they are names used to refer to, well, anything. In Python, objects exist out there in the interpreter's memory jungle, and you can give them names and remember where to find them using variables. Your variable doesn't have a type in the C sense, it just points to an object.</span>
<span class="comment-copy">I would say that C is simpler than python. It lacks decorators, metaclasses, descriptors, etc. Granted, those can all be implemented in C but then it's your program that's sophisticated and not the underlaying language.</span>
<span class="comment-copy">@aaron - note I said possible :) I've done C for more than 25 years and python for only a year - I still write all my little stuff in C (but not because it's simple)</span>
<span class="comment-copy">The language might be simpler in terms of functions. But the point is it's NOT simpler to implement decorators, metaclasses, descriptors, etc</span>
<span class="comment-copy">C is a fairly simple language. That definitely doesn't mean that writing code in C is simple. :)</span>
<span class="comment-copy">I am surprised you say that. Because that does not make your variable typed and that is no different than assigning a value of 20.0... none of them makes your variable an always float. You can still assign any value to that variable.</span>
<span class="comment-copy">Finally a proper answer to the question.... But even this cannot avoid assigning an incompatible values to vars. Only that IDEs like pycharm can use the info to find possible errors...</span>
<span class="comment-copy">You will always have this disadvantage in dinamic languages, js, python, groovy, inclunding typescript, because they are strongly typed, soy get another advantages and benefits, like code faster, thar are scripting languages, etc. Thats the principal reason you have to wirte good code and always tested, trying to reduce the amount of bugs, no matter wich type you use static or dinamic you will always have.</span>
