<div class="post-text" itemprop="text">
<p>I'm trying to remove specific characters from a string using Python. This is the code I'm using right now. Unfortunately it appears to do nothing to the string.</p>
<pre><code>for char in line:
    if char in " ?.!/;:":
        line.replace(char,'')
</code></pre>
<p>How do I do this properly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings in Python are <em>immutable</em> (can't be changed).  Because of this, the effect of <code>line.replace(...)</code> is just to create a new string, rather than changing the old one.  You need to <em>rebind</em> (assign) it to <code>line</code> in order to have that variable take the new value, with those characters removed.</p>
<p>Also, the way you are doing it is going to be kind of slow, relatively.  It's also likely to be a bit confusing to experienced pythonators, who will see a doubly-nested structure and think for a moment that something more complicated is going on.</p>
<p>Starting in Python 2.6 and newer Python 2.x versions *, you can instead use <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate</code></a>, (but read on for Python 3 differences):</p>
<pre><code>line = line.translate(None, '!@#$')
</code></pre>
<p>or regular expression replacement with <a href="https://docs.python.org/2/library/re.html#re.sub" rel="noreferrer"><code>re.sub</code></a></p>
<pre><code>import re
line = re.sub('[!@#$]', '', line)
</code></pre>
<p>The characters enclosed in brackets constitute a <em>character class</em>.  Any characters in <code>line</code> which are in that class are replaced with the second parameter to <code>sub</code>: an empty string.</p>
<p>In Python 3, strings are Unicode. You'll have to translate a little differently. kevpie mentions this in a <a href="https://stackoverflow.com/questions/3939361/remove-specific-characters-from-a-string-in-python#comment-4205256">comment</a> on one of the answers, and it's noted in the <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="noreferrer">documentation for <code>str.translate</code></a>.</p>
<p>When calling the <code>translate</code> method of a Unicode string, you cannot pass the second parameter that we used above. You also can't pass <code>None</code> as the first parameter, or even a translation table from <code>string.maketrans</code>. Instead, you pass a dictionary as the only parameter. This dictionary maps the <em>ordinal values</em> of characters (i.e. the result of calling <a href="https://docs.python.org/2/library/functions.html#ord" rel="noreferrer"><code>ord</code></a> on them) to the ordinal values of the characters which should replace them, or—usefully to us—<code>None</code> to indicate that they should be deleted.</p>
<p>So to do the above dance with a Unicode string you would call something like</p>
<pre><code>translation_table = dict.fromkeys(map(ord, '!@#$'), None)
unicode_line = unicode_line.translate(translation_table)
</code></pre>
<p>Here <a href="https://docs.python.org/2/library/stdtypes.html#dict.fromkeys" rel="noreferrer"><code>dict.fromkeys</code></a> and <a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map</code></a> are used to succinctly generate a dictionary containing</p>
<pre><code>{ord('!'): None, ord('@'): None, ...}
</code></pre>
<p>Even simpler, as <a href="https://stackoverflow.com/questions/23175809/typeerror-translate-takes-one-argument-2-given-python">another answer puts it</a>, create the dictionary in place:</p>
<pre><code>unicode_line = unicode_line.translate({ord(c): None for c in '!@#$'})
</code></pre>
<hr/>
<p>*   for compatibility with earlier Pythons, you can create a "null" translation table to pass in place of <code>None</code>:</p>
<pre><code>import string
line = line.translate(string.maketrans('', ''), '!@#$')
</code></pre>
<p>Here <a href="https://docs.python.org/2/library/string.html#string.maketrans" rel="noreferrer"><code>string.maketrans</code></a> is used to create a <em>translation table</em>, which is just a string containing the characters with ordinal values 0 to 255.</p>
</div>
<div class="post-text" itemprop="text">
<p>Am I missing the point here, or is it just the following:</p>
<pre><code>&gt;&gt;&gt; string = "ab1cd1ef"
&gt;&gt;&gt; string.replace("1","")
'abcdef'
&gt;&gt;&gt;
</code></pre>
<p>Put it in a loop:</p>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; a = "a!b@c#d$"
&gt;&gt;&gt; b = "!@#$"
&gt;&gt;&gt; for char in b:
...     a = a.replace(char,"")
...
&gt;&gt;&gt; print a
abcd
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; line = "abc#@!?efg12;:?"
&gt;&gt;&gt; ''.join( c for c in line if  c not in '?:!/;' )
'abc#@efg12'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Easy peasy with <code>re.sub</code> in Python 3.5</h1>
<pre><code>re.sub('\ |\?|\.|\!|\/|\;|\:', '', line)
</code></pre>
<h3>Example</h3>
<pre><code>&gt;&gt;&gt; import re

&gt;&gt;&gt; line = 'Q: Do I write ;/.??? No!!!'

&gt;&gt;&gt; re.sub('\ |\?|\.|\!|\/|\;|\:', '', line)
'QDoIwriteNo'
</code></pre>
<h3>Explanation</h3>
<p>In <a href="https://en.wikipedia.org/wiki/Regular_expression" rel="noreferrer"><strong>regular expressions</strong></a> (regex), <code>|</code> is a logical OR and <code>\</code> escapes spaces and special characters that might be actual regex commands. <code>sub</code> stands for substitution.</p>
</div>
<div class="post-text" itemprop="text">
<p>The asker almost had it. Like most things in Python, the answer is simpler than you think.</p>
<pre><code>&gt;&gt;&gt; line = "H E?.LL!/;O:: "  
&gt;&gt;&gt; for char in ' ?.!/;:':  
...  line = line.replace(char,'')  
...
&gt;&gt;&gt; print line
HELLO
</code></pre>
<p>You don't have to do the nested if/for loop thing, but you DO need to check each character individually.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the inverse requirement of <strong>only <em>allowing</em> certain characters</strong> in a string, you can use regular expressions with a set complement operator <code>[^ABCabc]</code>. For example, to remove everything except ascii letters, digits, and the hyphen:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; phrase = '  There were "nine" (9) chick-peas in my pocket!!!      '
&gt;&gt;&gt; allow = string.letters + string.digits + '-'
&gt;&gt;&gt; re.sub('[^%s]' % allow, '', phrase)

'Therewerenine9chick-peasinmypocket'
</code></pre>
<p>From <a href="http://docs.python.org/2/library/re.html">the python regular expression documentation</a>:</p>
<blockquote>
<p>Characters that are not within a range can be matched by complementing
  the set. If the first character of the set is <code>'^'</code>, all the characters
  that are not in the set will be matched. For example, <code>[^5]</code> will match
  any character except '5', and <code>[^^]</code> will match any character except
  <code>'^'</code>. <code>^</code> has no special meaning if it’s not the first character in the
  set.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>line = line.translate(None, " ?.!/;:")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; s = 'a1b2c3'
&gt;&gt;&gt; ''.join(c for c in s if c not in '123')
'abc'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable in Python. The <code>replace</code> method returns a new string after the replacement. Try:</p>
<pre><code>for char in line:
    if char in " ?.!/;:":
        line = line.replace(char,'')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/functions.html#filter" rel="noreferrer"><code>filter</code></a>, you'd just need one line
</p>
<pre><code>line = filter(lambda char: char not in " ?.!/;:", line)
</code></pre>
<p>This treats the string as an iterable and checks every character if the <code>lambda</code> returns <code>True</code>:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; help(filter)
Help on built-in function filter in module __builtin__:

filter(...)
    filter(function or None, sequence) -&gt; list, tuple, or string

    Return those items of sequence for which function(item) is true.  If
    function is None, return the items that are true.  If sequence is a tuple
    or string, return the same type, else return a list.
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I was surprised that no one had yet recommended using the builtin <b>filter</b> function.</p>
<pre><code>    import operator
    import string # only for the example you could use a custom string

    s = "1212edjaq"
</code></pre>
<p>Say we want to filter out everything that isn't a number. Using the filter builtin method "...is equivalent to the generator expression (item for item in iterable if function(item))" [<a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">Python 3 Builtins: <i>Filter</i></a>]</p>
<pre><code>    sList = list(s)
    intsList = list(string.digits)
    obj = filter(lambda x: operator.contains(intsList, x), sList)))
</code></pre>
<p>In Python 3 this returns </p>
<pre><code>    &gt;&gt;  &lt;filter object @ hex&gt;
</code></pre>
<p>To get a printed string,</p>
<pre><code>    nums = "".join(list(obj))
    print(nums)
    &gt;&gt; "1212"
</code></pre>
<p>I am not sure how <b>filter</b> ranks in terms of efficiency but it is a good thing to know how to use when doing list comprehensions and such.</p>
<p>UPDATE</p>
<p>Logically, since filter works you could also use list comprehension and from what I have read it is supposed to be more efficient because lambdas are the wall street hedge fund managers of the programming function world. Another plus is that it is a one-liner that doesnt require any imports. For example, using the same string 's' defined above,</p>
<pre><code>      num = "".join([i for i in s if i.isdigit()])
</code></pre>
<p>That's it. The return will be a string of all the characters that are digits in the original string.</p>
<p>If you have a specific list of acceptable/unacceptable characters you need only adjust the 'if' part of the list comprehension.</p>
<pre><code>      target_chars = "".join([i for i in s if i in some_list]) 
</code></pre>
<p>or alternatively,</p>
<pre><code>      target_chars = "".join([i for i in s if i not in some_list])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's my Python 2/3 compatible version. Since the translate api has changed. </p>
<pre><code>def remove(str_, chars):
    """Removes each char in `chars` from `str_`.

    Args:
        str_: String to remove characters from
        chars: String of to-be removed characters

    Returns:
        A copy of str_ with `chars` removed

    Example:
            remove("What?!?: darn;", " ?.!:;") =&gt; 'Whatdarn'
    """
    try:
        # Python2.x
        return str_.translate(None, chars)
    except TypeError:
        # Python 3.x
        table = {ord(char): None for char in chars}
        return str_.translate(table)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; # Character stripping
&gt;&gt;&gt; a = '?abcd1234!!'
&gt;&gt;&gt; t.lstrip('?')
'abcd1234!!'
&gt;&gt;&gt; t.strip('?!')
'abcd1234'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's some possible ways to achieve this task:</p>
<pre><code>def attempt1(string):
    return "".join([v for v in string if v not in ("a", "e", "i", "o", "u")])


def attempt2(string):
    for v in ("a", "e", "i", "o", "u"):
        string = string.replace(v, "")
    return string


def attempt3(string):
    import re
    for v in ("a", "e", "i", "o", "u"):
        string = re.sub(v, "", string)
    return string


def attempt4(string):
    return string.replace("a", "").replace("e", "").replace("i", "").replace("o", "").replace("u", "")


for attempt in [attempt1, attempt2, attempt3, attempt4]:
    print(attempt("murcielago"))
</code></pre>
<p>PS: Instead using " ?.!/;:" the examples use the vowels... and yeah, "murcielago" is the Spanish word to say bat... funny word as it contains all the vowels :)</p>
<p>PS2: If you're interested on performance you could measure these attempts with a simple code like:</p>
<pre><code>import timeit


K = 1000000
for i in range(1,5):
    t = timeit.Timer(
        f"attempt{i}('murcielago')",
        setup=f"from __main__ import attempt{i}"
    ).repeat(1, K)
    print(f"attempt{i}",min(t))
</code></pre>
<p>In my box you'd get:</p>
<pre><code>attempt1 2.2334518376057244
attempt2 1.8806643818474513
attempt3 7.214925774955572
attempt4 1.7271184513757465
</code></pre>
<p>So it seems attempt4 is the fastest one for this particular input.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/python
import re

strs = "how^ much for{} the maple syrup? $20.99? That's[] ricidulous!!!"
print strs
nstr = re.sub(r'[?|$|.|!|a|b]',r' ',strs)#i have taken special character to remove but any #character can be added here
print nstr
nestr = re.sub(r'[^a-zA-Z0-9 ]',r'',nstr)#for removing special character
print nestr
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>def text_cleanup(text):
    new = ""
    for i in text:
        if i not in " ?.!/;:":
            new += i
    return new
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use a function in order to substitute different kind of regular expression or other pattern with the use of a list. With that, you can mixed regular expression, character class, and really basic text pattern. It's really useful when you need to substitute a lot of elements like HTML ones.</p>
<p>*NB: works with Python 3.x</p>
<pre><code>import re  # Regular expression library


def string_cleanup(x, notwanted):
    for item in notwanted:
        x = re.sub(item, '', x)
    return x

line = "&lt;title&gt;My example: &lt;strong&gt;A text %very% $clean!!&lt;/strong&gt;&lt;/title&gt;"
print("Uncleaned: ", line)

# Get rid of html elements
html_elements = ["&lt;title&gt;", "&lt;/title&gt;", "&lt;strong&gt;", "&lt;/strong&gt;"]
line = string_cleanup(line, html_elements)
print("1st clean: ", line)

# Get rid of special characters
special_chars = ["[!@#$]", "%"]
line = string_cleanup(line, special_chars)
print("2nd clean: ", line)
</code></pre>
<p>In the function string_cleanup, it takes your string x and your list notwanted as arguments. For each item in that list of elements or pattern, if a substitute is needed it will be done.</p>
<p>The output:</p>
<pre><code>Uncleaned:  &lt;title&gt;My example: &lt;strong&gt;A text %very% $clean!!&lt;/strong&gt;&lt;/title&gt;
1st clean:  My example: A text %very% $clean!!
2nd clean:  My example: A text very clean
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My method I'd use probably wouldn't work as efficiently, but it is massively simple. I can remove multiple characters at different positions all at once, using slicing and formatting.
Here's an example:</p>
<pre><code>words = "things"
removed = "%s%s" % (words[:3], words[-1:])
</code></pre>
<p>This will result in 'removed' holding the word 'this'.</p>
<p><strong>Formatting</strong> can be very helpful for printing variables midway through a print string. It can insert any data type using a <strong>%</strong> followed by the variable's data type; all data types can use <strong>%s</strong>, and floats (aka decimals) and integers can use <strong>%d</strong>. </p>
<p><strong>Slicing</strong> can be used for intricate control over strings. When I put <strong>words[:3]</strong>,  it allows me to select all the characters in the string from the beginning (the colon is before the number, this will mean 'from the beginning to') to the 4th character (it includes the 4th character). The reason 3 equals till the 4th position is because Python starts at 0. Then, when I put <strong>word[-1:]</strong>, it means the 2nd last character to the end (the colon is behind the number). Putting -1 will make Python count from the last character, rather than the first. Again, Python will start at 0. So, <strong>word[-1:]</strong> basically means 'from the second last character to the end of the string.</p>
<p>So, by cutting off the characters before the character I want to remove and the characters after and sandwiching them together, I can remove the unwanted character. <strong>Think of it like a sausage.</strong> In the middle it's dirty, so I want to get rid of it. I simply cut off the two ends I want then put them together without the unwanted part in the middle. </p>
<p>If I want to remove multiple consecutive characters, I simply shift the numbers around in the [] (slicing part). Or if I want to remove multiple characters from different positions, I can simply sandwich together multiple slices at once.</p>
<p>Examples:</p>
<pre><code> words = "control"
 removed = "%s%s" % (words[:2], words[-2:])
</code></pre>
<p><strong>removed</strong> equals 'cool'.</p>
<pre><code>words = "impacts"
removed = "%s%s%s" % (words[1], words[3:5], words[-1])
</code></pre>
<p><strong>removed</strong> equals 'macs'.</p>
<p>In this case, <strong>[3:5]</strong> means character at <strong>position</strong> 3 through character at <strong>position</strong> 5 (excluding the character at the final position). </p>
<p>Remember, <em>Python starts counting at 0</em>, so you will need to as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to reassign your str variable:</p>
<pre><code>for char in line:
if char in " ?.!/;:":
    line = line.replace(char,'')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below one.. with out using regular expression concept.. </p>
<pre><code>ipstring ="text with symbols!@#$^&amp;*( ends here"
opstring=''
for i in ipstring:
    if i.isalnum()==1 or i==' ':
        opstring+=i
    pass
print opstring
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>In Python 3.5</h2>
<p>e.g.,</p>
<pre><code>os.rename(file_name, file_name.translate({ord(c): None for c in '0123456789'}))
</code></pre>
<p>To remove all the number from the string  </p>
</div>
<div class="post-text" itemprop="text">
<p>you can use set</p>
<pre><code>    charlist = list(set(string.digits+string.ascii_uppercase) - set('10IO'))
    return ''.join([random.SystemRandom().choice(charlist) for _ in range(passlen)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this one:</p>
<pre><code>def rm_char(original_str, need2rm):
    ''' Remove charecters in "need2rm" from "original_str" '''
    return original_str.translate(str.maketrans('','',need2rm))
</code></pre>
<p>This method works well in python 3.5.2</p>
</div>
<div class="post-text" itemprop="text">
<p>Recursive split:
<em>s=string ; chars=chars to remove</em></p>
<pre><code>def strip(s,chars):
if len(s)==1:
    return "" if s in chars else s
return strip(s[0:int(len(s)/2)],chars) +  strip(s[int(len(s)/2):len(s)],chars)
</code></pre>
<p>example: </p>
<pre><code>print(strip("Hello!","lo"))    #He!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even the below approach works</p>
<pre><code>line = "a,b,c,d,e"
alpha = list(line)
        while ',' in alpha:
            alpha.remove(',')
finalString = ''.join(alpha)
print(finalString)
</code></pre>
<p>output &gt;&gt; abcde</p>
</div>
<span class="comment-copy">It's been over 5 years, but how about using the <code>filter</code> function and a Lambda Expression: <code>filter(lambda ch: ch not in " ?.!/;:", line)</code>. Pretty concise and efficient too, I think. Of course, it returns a new string that you'll have to assign a name to.</span>
<span class="comment-copy">@JohnRed: Actually it returns an iterator that returns a list of characters but if you'd put this in an answer a few of us would be pleased to up-vote it.</span>
<span class="comment-copy">Easy peasy with <a href="https://stackoverflow.com/a/46414390/2192488"><b><code>re.sub</code> in Python 3.5</b></a></span>
<span class="comment-copy">@BillBell: see <a href="https://stackoverflow.com/a/46930314/1587329">stackoverflow.com/a/46930314/1587329</a> and <a href="https://stackoverflow.com/a/41413861/1587329">stackoverflow.com/a/41413861/1587329</a></span>
<span class="comment-copy">@BillBell: PS: it's an iterator in Python3 and a string, tuple, or list in Python2</span>
<span class="comment-copy">In Python3, <code>line.translate</code> takes only one argument and the first solution will not work</span>
<span class="comment-copy">@marczoid: Thanks, added a note to that effect.</span>
<span class="comment-copy">In python3, str.translate() does not take the 2nd argument. So, your answer will become  <code>line.translate({ord(i):None for i in '!@#$'})</code></span>
<span class="comment-copy">Same as any other character. Python lets you use pairs of either single or double quotes. So you just write <code>"'"</code> for the character set.</span>
<span class="comment-copy">@naveen's comment above worked for me. Pythony 2.7.13. In my case I wanted to strip " and ' characters: <code>notes = notes.translate({ord(i):None for i in '\"\''})</code></span>
<span class="comment-copy">This will make a copy of the string in each loop, which might not be desirable. Also it is not very good Python. In Python you would loop like this instead: <code>for char in b: a=a.replace(char,"")</code></span>
<span class="comment-copy">using user defined variables which overlaps system classes is not a good idea. You would better use variable STRING instead of STR and C instead of CHAR.</span>
<span class="comment-copy">Thank you very much !! I was trying to remove a Japanese Yen symbol from a string I'd parsed in via XML http response. This solution worked and avoided alot of Unicode hassle. # -<i>- coding: utf-8 -</i>- yenSymbol = ord(u'\u00A5') cpc = ''.join( c for c in cpcWithYen if ord(c) != yenSymbol )</span>
<span class="comment-copy">how can i remove `` character ?????? i can't do this with any of these ways</span>
<span class="comment-copy">use another string delimitor such as ''' or "</span>
<span class="comment-copy">how can i remove `` character ?????? i can't do this with any of these ways</span>
<span class="comment-copy">yes i know, probably too late, but should work if you escape it. Like this: line = line.replace('`', '')  read on: <a href="https://learnpythonthehardway.org/book/ex10.html" rel="nofollow noreferrer">learnpythonthehardway.org/book/ex10.html</a></span>
<span class="comment-copy">This probably isn't performant because you're allocating a new string for every character</span>
<span class="comment-copy">how can i remove `` character ?????? i can't do this with any of these ways</span>
<span class="comment-copy">+1 When using unicode it requires setting up a translation to delete instead of a delete string. <a href="http://docs.python.org/library/stdtypes.html#str.translate" rel="nofollow noreferrer">docs.python.org/library/stdtypes.html#str.translate</a></span>
<span class="comment-copy">This is a great suggestion (ref: <a href="https://docs.python.org/2/library/string.html#string.translate" rel="nofollow noreferrer">docs.python.org/2/library/string.html#string.translate</a> )  The unicode note is good as well.</span>
<span class="comment-copy">My answer does provide a solution to the original question, but I was also interested (an perhaps the OP as well) in feedback as to why my solution might not be ideal. Should I have created a new question and referenced this one for context?</span>
<span class="comment-copy">How can you iterate over line and modify it at the same time?</span>
<span class="comment-copy">@eumiro: The iteration proceeds over the <i>original</i> <code>line</code>.</span>
<span class="comment-copy">good to know! So if I iterate over an array, I iterate over an original array. Iteration over an iterator wouldn't be possible.</span>
<span class="comment-copy">There is no reason to use <code>operator.contains</code> if you're using a <code>lambda</code> anyway. <code>lambda x: operator.contains(intsList, x)</code> should be spelled <code>lambda x: x in intsList</code>, or if you're trying to get the C-level check, <code>intsList.__contains__</code> (no <code>lambda</code> at all) will do the trick.</span>
<span class="comment-copy">I'd use <code>dict.fromkeys(map(ord, '!@#$'))</code> to create the map.</span>
<span class="comment-copy"><code>map</code> is generally less readable than a list/dict/set/generator comprehension. So much so that Guido wanted to remove <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">it from the language</a>. Using <code>fromkeys</code> is also a bit clever and requires a doc check.</span>
<span class="comment-copy">@MartijnPieters: For Python 3, it should just be <code>str.maketrans('', '', chars)</code>, which handles the <code>ord</code> conversion and <code>dict</code> construction all in one go (not to mention being rather more obvious in intent, since it's designed to pair with <code>str.translate</code>).</span>
<span class="comment-copy">Only removes characters from the beginning or end of the string</span>
<span class="comment-copy">You are creating a needless <code>list</code> in <code>attempt1</code> and the tuple can be rewritten to <code>"aeiou"</code> for simplicity sakes (removing <code>[</code> and <code>]</code> will turn in into a generator without creating a list). You create tons of throwaway intermediary strings in <code>attemt2</code>, you use multiple applications of regex in <code>attempt3</code> where you could use <code>r'[aeiou]'</code> in one pass. each one has flaws - its nice to see different ways to do things, but please fix them to be good attempts as well</span>
<span class="comment-copy">@PatrickArtner You're absolutely right... from the dozens ways I've got in mind to achieve this task I've picked up the slower ones (wanted to show the OP some easiest ones)... That said, after you guys closed the other thread I've lost motivation to put more effort on this already answered old thread, so... :) . Thanks for the points though.</span>
<span class="comment-copy">@PatrickArtner Ok... just for just sake added a new one, "attempt4"... haven't measured but I think that one should be the faster one</span>
<span class="comment-copy">@PatrickArtner Edited... attempt4 was the fastest from the little set of attempts. Anyway, I'm not wasting more time with this stuff :)</span>
<span class="comment-copy">how can i remove `` character ?????? i can't do this with any of these ways</span>
<span class="comment-copy">Do you mean speech marks? re has backslash to escape the code and consider <code>'</code> as a string. <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">docs.python.org/2/library/re.html</a></span>
<span class="comment-copy">Could you elaborate more your answer adding a little more description about the solution you provide?</span>
<span class="comment-copy">Adding to a list, then using join would be more efficient than concatenation</span>
<span class="comment-copy">When giving an answer it is preferable to give <a href="http://stackoverflow.com/help/how-to-answer">some explanation as to WHY your answer</a> is the one.</span>
