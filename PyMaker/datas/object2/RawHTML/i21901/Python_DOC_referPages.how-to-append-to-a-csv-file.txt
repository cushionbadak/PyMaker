<div class="post-text" itemprop="text">
<p>Using Python to append CSV file, I get data every other row.
How do I fix?</p>
<pre><code>import csv

LL = [(1,2),(3,4)]

Fn = ("C:\Test.csv")
w = csv.writer(open(Fn,'a'), dialect='excel')
w.writerows(LL)
</code></pre>
<p><code>C:\test.csv</code> when opened looks like this:</p>
<pre class="lang-none prettyprint-override"><code>1,2

3,4

1,2

3,4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Appending is irrelevant to the problem; notice that the first two rows (those from the original file) are also double-spaced.</p>
<p><strong>The real problem is that you have opened your file in <em>text</em> mode.</strong></p>
<p>CSV is a binary format, believe it or not. The csv module is writing the misleadingly-named "lineterminator (should be "rowseparator") as <code>\r\n</code> as expected but then the Windows C runtime kicks in and replaces the <code>\n</code> with <code>\r\n</code> so that you have <code>\r\r\n</code> between rows. When you "open" the csv file with Excel it becomes confused</p>
<p>Always open your CSV files in binary mode ('rb', 'wb', 'ab'), whether you are operating on Windows or not. That way, you will get the expected rowseparator (CR LF) even on *x boxes, your code will be portable, and any linefeeds embedded in your data won't be changed into something else (on writing) or cause dramas (on input, provided of course they're quoted properly).</p>
<p>Other problems:</p>
<p>(1) Don't put your data in your root directory (<code>C:\</code>). Windows inherited a hierarchical file system from MS-DOS in the 1980s. Use it.</p>
<p>(2) If you must embed hard-wired filenames in your code, use raw strings <code>r"c:\test.csv"</code> ... if you had <code>"c:\test.csv"</code> the '\t' would be interpreted as a TAB character; similar problems with <code>\r</code> and <code>\n</code></p>
<p>(3) The examples in the Python manual are aligned more towards brevity than robust code.</p>
<p>Don't do this:</p>
<pre><code>w = csv.writer(open('foo.csv', 'wb'))
</code></pre>
<p>Do this:</p>
<pre><code>f = open('foo.csv', 'wb')
w = csv.writer(f)
</code></pre>
<p>Then when you are finished, you have <code>f</code> available so that you can do <code>f.close()</code> to ensure that your file contents are flushed to disk. Even better: read up on the new <code>with</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have encountered a similar problem with appending an already created csv file, while running on windows. </p>
<p>As in this case writing and appending in "binary" mode avoids adding extra line to each rows written or appended by using the python script. Therefore;      </p>
<pre><code>w = csv.writer(open(Fn,'ab'),dialect='excel')
</code></pre>
</div>
<span class="comment-copy">What is the question/problem? It's not clear to me..</span>
<span class="comment-copy">"I get data every other row. How do I fix?" What precisely does this mean?  Can you paste sample output versus desired sample output?</span>
<span class="comment-copy">@poke, @Chris: The OP is getting an unexpected empty row inserted after each expected data row.</span>
<span class="comment-copy">Darn.  I just figured this out and was halfway through an answer saying the same.  +1.</span>
<span class="comment-copy">+1; for a complete answer and thorough explanation.</span>
<span class="comment-copy">Interestingly, while most of the examples in the <code>csv</code> docs for Python 2 docs use binary mode, the <a href="https://docs.python.org/2/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>DictReader</code></a> examples don't, and nor do <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">any of the examples for Python 3</a>. Is there a good reason for this? If not, perhaps you'd like to try getting the docs changed?</span>
<span class="comment-copy">In python3, opening in binary mode: <code>_csv.Error: iterator should return strings, not bytes (did you open the file in text mode?)</code></span>
<span class="comment-copy">On windows, you have to do alot of defensive coding with python...</span>
