<div class="post-text" itemprop="text">
<p>I read somewhere that <code>KeyboardInterrupt</code> exception is only raised in the main thread in Python. I also read that the main thread is blocked while the child thread executes. So, does this mean that <kbd>CTRL</kbd>+<kbd>C</kbd> can never reach to the child thread. I tried the following code:</p>
<pre><code>def main():
    try:
        thread = threading.Thread(target=f)
        thread.start()  # thread is totally blocking (e.g., while True)
        thread.join()
    except KeyboardInterrupt:
        print "Ctrl+C pressed..."
        sys.exit(1)

def f():
    while True:
        pass  # do the actual work
</code></pre>
<p>In this case there is no effect of <kbd>CTRL</kbd>+<kbd>C</kbd> on the execution. It is like it is not able to listen to the signal. Am I understanding this the wrong way? Is there any other way to kill the thread using <kbd>CTRL</kbd>+<kbd>C</kbd>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem there is that you are using <code>thread1.join()</code>, which will cause your program to wait until that thread finishes to continue.</p>
<p>The signals will always be caught by the main process, because it's the one that receives the signals, it's the process that has threads.</p>
<p>Doing it as you show, you are basically running a 'normal' application, without thread features, as you start 1 thread and wait until it finishes to continue.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to have main thread to receive the <kbd>CTRL</kbd>+<kbd>C</kbd> signal while joining, it can be done by adding timeout to <code>join()</code> call.</p>
<p>The following seems to be working (don't forget to add <code>daemon=True</code> if you want main to actually end):
</p>
<pre><code>thread1.start()
while True:
    thread1.join(600)
    if not thread1.isAlive():
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, it is true that <code>KeyboardInterrupt</code> exceptions are raised only in the main thread of each process. But as other answers mentionned, it is also true that the method <code>Thread.join</code> blocks the calling thread, <em>including</em> <code>KeyboardInterrupt</code> <em>exceptions</em>. That is why <kbd>Ctrl</kbd>+<kbd>C</kbd> seems to have no effect: the execution in the main thread remains blocked at the line <code>thread.join()</code>.</p>
<p>So a simple solution to your question is to add a timeout argument to <code>Thread.join</code> and put it in an infinite loop in the main thread so that <code>KeyboardInterrup</code> exceptions can be raised after each timeout, and make the child thread <a href="https://docs.python.org/3/library/threading.html#threading.Thread.daemon" rel="nofollow noreferrer">daemonic</a>, which means its parent (the main thread here) will kill it when it exits (only non-daemon threads are not killed but joined when their parent exits):</p>
<pre><code>def main():
    try:
        thread = threading.Thread(target=f, daemon=True)  # create a daemon child thread
        thread.start()

        while True:
            thread.join(1)  # join shortly to not block KeyboardInterrupt exceptions
    except KeyboardInterrupt:
        print "Ctrl+C pressed..."
        sys.exit(1)

def f():
    while True:
        pass  # do the actual work
</code></pre>
<p>But a better solution, if you control the child thread's code, is to inform the child thread to exit gracefully (instead of abruptly like with the first solution), for instance with a <code>threading.Event</code>:</p>
<pre><code>def main():
    try:
        event = threading.Event()
        thread = threading.Thread(target=f, args=(event,))
        thread.start()
        event.wait()  # wait forever but without blocking KeyboardInterrupt exceptions
    except KeyboardInterrupt:
        print "Ctrl+C pressed..."
        event.set()  # inform the child thread that it should exit
        sys.exit(1)

def f(event):
    while not event.is_set():
        pass  # do the actual work
</code></pre>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread-in-python" title="is there any way to kill a thread in python">stackoverflow.com/questions/323972/â€¦</a></span>
<span class="comment-copy">Your main thread isn't blocked because you start another thread. What would be the point of threads if that were true? It's because you're calling thread1.join(), which DOES block until thread1 is done.</span>
