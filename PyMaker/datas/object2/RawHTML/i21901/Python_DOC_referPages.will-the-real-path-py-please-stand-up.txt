<div class="post-text" itemprop="text">
<p>There was a good module, <code>path.py</code>, written by Jason Orendorff. If I recall correctly, there was some discussion about adding it to the standard library then it faded away.</p>
<p>It looks now that there are multiple outgrowths of the original one. I can find so far <a href="http://pypi.python.org/pypi/Unipath/0.2.1">unipath</a>, what looks like a <a href="http://pypi.python.org/pypi/path.py/2.2.2">forked path.py</a>, <a href="http://pypi.python.org/pypi/forked-path/0.2">another one</a>, and a few others according to PyPI.</p>
<p>Anyone has experience with any of those options? Is one better than the other in terms of functionality, maintenance or any other criteria? Or should I just pick one at random?</p>
<p>(Apologies for the whimsical title. I first went for "Which path.py?" but it was too short for SO's taste.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I've also been a fan of this module for quite some time.  <a href="https://pypi.python.org/pypi/path.py" rel="nofollow noreferrer">This one</a> seems to have the most recent commits, and also to be true to the original form -- which really, I like best of the different versions I've tried.  Installable using <code>pip install path.py</code></p>
<p><strong>edit</strong>:  Looks like as of python 3.4 (and backported to 2.7 on PYPI), there's a standard lib path module called <a href="https://pypi.python.org/pypi/pathlib/" rel="nofollow noreferrer">pathlib</a>.  It's not nearly as extensive as some of the path modules are, but it benefits from the lack of clutter, and it is a well-thought-out path implementation, retaining some of the best base qualities of quite a few of the path libraries that are out there.  Particularly of note, it cleanly handles the differences between different OS paths (Windows and Posix), and seems like a good clean tool that's worth a look.  Regardless of whether it has every feature one could ever want or not (it doesn't), it's nice that Python finally has a good standard path implementation.</p>
</div>
<div class="post-text" itemprop="text">
<p>All path.py fans stand up!</p>
<p>Since Python 3.4, a module is dealing with paths, <a href="https://docs.python.org/3/library/pathlib.html#module-pathlib" rel="nofollow">module <code>pathlib</code></a>. It is based on <a href="http://www.python.org/dev/peps/pep-0428/" rel="nofollow">PEP 428</a>, and heavily inspired from our beloved path.py, though seems to take some different approach notably on a strong distinction between Windows path and Unix path.</p>
</div>
<span class="comment-copy">Hi, my name is <i>what</i> my name is <i>WHAT</i> my name is path.py.</span>
<span class="comment-copy">The discussion morphed into PEP 355 (<a href="http://www.python.org/dev/peps/pep-0355/" rel="nofollow noreferrer">python.org/dev/peps/pep-0355</a>) which was eventually rejected by GvR (<a href="http://article.gmane.org/gmane.comp.python.devel/84061" rel="nofollow noreferrer">article.gmane.org/gmane.comp.python.devel/84061</a>)</span>
<span class="comment-copy">"rejected" - to quote him literally, "PEP 355 is dead". Why so? More importantly, is there a replacement PEP for the better?</span>
<span class="comment-copy">Too bad the PEP is rejected.  I use 'path.py' all the time (not sure where mine comes from).  I guess the rejection comes down to subclassing from 'str' and having too much functionality.  My 'path.py' doesn't subclass from 'str', but I love having the kitchen sink included when I write real code.  I even love the '/' operator overload.  Rarely does that get confused with divide.</span>
<span class="comment-copy">I just looked and it appears that the 'path.py' I have been using does subclass 'str' (or 'unicode').  I am using one which is originally by Jason Orendorff.  I really don't run into a problem with it subclassing from 'str'.  I might guess that those who think that is a bad idea have never used it.</span>
<span class="comment-copy"><a href="https://github.com/jaraco/path.py" rel="nofollow noreferrer">github.com/jaraco/path.py</a> is the most maintained now I think. it has also new features like <a href="http://stackoverflow.com/questions/169070/python-how-do-i-write-a-decorator-that-restores-the-cwd/14019583#14019583" title="python how do i write a decorator that restores the cwd">stackoverflow.com/questions/169070/â€¦</a></span>
<span class="comment-copy">Good notice -- he's actually the maintainer of 'path.py' on pypi now, too.  I've updated my post to reflect the difference.</span>
<span class="comment-copy">That is positively good news. Many thanks.</span>
<span class="comment-copy">But although it was backported, they don't want anything to do with Python 2 (see <a href="https://bitbucket.org/pitrou/pathlib/issue/25" rel="nofollow noreferrer">#25 (wontfix)</a>, and bytes vs unicode makes it non-interoperable anyway). Also the whole "pretending bytes are unicode" and their <code>surrogateescape</code> encoding makes it very wonky if you ask me.</span>
