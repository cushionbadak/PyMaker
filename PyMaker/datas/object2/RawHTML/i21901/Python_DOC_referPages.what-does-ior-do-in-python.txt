<div class="post-text" itemprop="text">
<p>Google won't let me search |= so I'm having trouble finding relevant documentation. Anybody know?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, and many other programming languages, <code>|</code> is the <a href="http://en.wikipedia.org/wiki/Bitwise_operation" rel="noreferrer">bitwise-OR operation</a>.  <code>|=</code> is to <code>|</code> as <code>+=</code> is to <code>+</code>, i.e. a combination of operation and asignment.</p>
<p><code>var |= value</code> is short for <code>var = var | value</code></p>
</div>
<div class="post-text" itemprop="text">
<p>When used with sets it performs union operation.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is just an OR operation between the current variable and the other one. Being <code>T=True</code> and <code>F=False</code>, see the output graphically:</p>
<pre><code>r    s    r|=s
--------------
T    T    T
T    F    T
F    T    T
F    F    F
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; r=True
&gt;&gt;&gt; r|=False
&gt;&gt;&gt; r
True
&gt;&gt;&gt; r=False
&gt;&gt;&gt; r|=False
&gt;&gt;&gt; r
False
&gt;&gt;&gt; r|=True
&gt;&gt;&gt; r
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>|=</code> performs an <a href="https://docs.python.org/3/reference/datamodel.html#object.__ior__" rel="noreferrer">inplace, bitwise OR operation</a> and also performs <a href="https://en.wikipedia.org/wiki/Union_(set_theory)" rel="noreferrer">union</a> operation of <a href="https://docs.python.org/2/library/sets.html" rel="noreferrer">Python sets</a>.  </p>
<p>For example, the union of two sets <code>x</code> and <code>y</code> share the following equivalent expressions:</p>
<pre><code>&gt;&gt;&gt; x = x | y                                              # (1)
&gt;&gt;&gt; x |= y                                                 # (2)
&gt;&gt;&gt; x.__ior__(y)                                           # (3)
</code></pre>
<p>where the final value of <code>x</code> is equivalent either by:</p>
<ol>
<li>an assigned OR operation</li>
<li>an inplace OR operation</li>
<li>an inplace OR operation via special method</li>
</ol>
<p>See also <a href="http://www.diveintopython3.net/special-method-names.html" rel="noreferrer">section B.8 of Dive in Python 3</a> on special methods of Python operators.</p>
<hr/>
<p>Here are some examples comparing OR (<code>|</code>) and the inplace OR (<code>|=</code>) applied to sets:</p>
<pre><code>&gt;&gt;&gt; x = {"a", "b", "c"}
&gt;&gt;&gt; y = {"d", "e", "f"}

&gt;&gt;&gt; # OR, | 
&gt;&gt;&gt; x | y
{'a', 'b', 'c', 'd', 'e', 'f'}
&gt;&gt;&gt; x                                                      # `x` is unchanged
{'a', 'b', 'c'}

&gt;&gt;&gt; # Inplace OR, |=
&gt;&gt;&gt; x |= y
&gt;&gt;&gt; x                                                      # `x` is reassigned
{'a', 'b', 'c', 'd', 'e', 'f'}
</code></pre>
<p>Here is an example of <a href="https://github.com/python/cpython/blob/5ce0a2a100909104836f53a2c8823006ec46f8ad/Lib/_collections_abc.py#L604" rel="noreferrer">overloading the <code>__ior__()</code> method</a> to iterate iterables in a <code>MutableSet</code> abstract base class.  See it also sub-classed and applied in Raymond Hettinger's <a href="https://code.activestate.com/recipes/576694-orderedset/" rel="noreferrer">OrderedSet recipe (see lines 3 and 10 respectively)</a>.  Here is a <a href="https://mail.python.org/pipermail/python-ideas/2018-March/049233.html" rel="noreferrer">thread on Python-ideas</a> on why to use <code>|=</code> to update a set.</p>
</div>
<div class="post-text" itemprop="text">
<p>It performs a binary bitwise OR of the left-hand and right-hand sides of the assignment, then stores the result in the left-hand variable.</p>
<p><a href="http://docs.python.org/reference/expressions.html#binary-bitwise-operations" rel="noreferrer">http://docs.python.org/reference/expressions.html#binary-bitwise-operations</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It's bitwise or.
Let's say we have <code>32 |= 10</code>, picture 32 and 10 is binary.</p>
<pre><code>32 = 10 0000
10 = 00 1010
</code></pre>
<p>Now because | is or, do a bitwise or on the two numbers</p>
<p>i.e 1  or 0 --&gt;  1, 0 or 0 --&gt; 0. Continue this down the chain</p>
<pre><code>10 0000 | 00 1010 = 10 1010.
</code></pre>
<p>Now change the binary into a decimal, 10 1010 = 42.</p>
<p>For |=, think of the known examples, <code>x +=5</code>. It means <code>x = x + 5,</code> therefore if we have <code>x |= 5</code>, it means <code>x = x bitwiseor with 5</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python,|=(ior) works like union operation.
like if x=5 and x|=5 then both the value will first convert in binary value then the union operation will perform and we get the answer 5.</p>
</div>
<div class="post-text" itemprop="text">
<p>To give a use-case (after spending time with the other answers):</p>
<pre><code>def has_some_property(item):
    fake_test_result = bool(item)
    return fake_rest_result

def lmk(data): # let_me_know_if_at_least_one_succeeds
    at_least_one = False
    for item in data:
       at_least_one |= has_some_property(item)
    return at_least_one

&gt;&gt;&gt; lmk([False, False, False])
False
&gt;&gt;&gt; lmk([True, False, False])
True
&gt;&gt;&gt; lmk([False, True, False])
True
</code></pre>
<p>See also the caveats in <a href="https://stackoverflow.com/questions/3929433/does-python-have-an-or-equals-function-like-in-ruby">this answer</a></p>
</div>
<span class="comment-copy">I think it's relevant to point out, as in sunny's answer below, that <code>|</code> is also used as the set union operator</span>
<span class="comment-copy">in 2019 Google will let you search` |=` ! :-)</span>
<span class="comment-copy">Can you please provide an example?</span>
<span class="comment-copy">Have given one use case I encountered below</span>
<span class="comment-copy">I was reading some code and the <code>|=</code> was used in set context, and it wasn't until I messed around and figured it out that I noticed this answer was here too</span>
<span class="comment-copy">This gives a kinda of warped impression of the operator; <code>|</code> is a bitwise-or operator for integers, not specifically a boolean operator, and for anything other than <code>bool</code>s, it won't actually produce <code>True</code> or <code>False</code> outputs. <code>bool</code> is a subclass of <code>int</code>, and to be nice, they overloaded it for <code>bool</code> to keep producing <code>True</code>/<code>False</code> outputs, but in most cases, boolean operations should be done with <code>or</code>, not <code>|</code>. Normal uses for <code>|</code> are bitwise-or, or set-union. Better examples of use would be something like <code>a = 0b1001; a |= 0b0010; print(bin(a))</code> which produces <code>0b1011</code>.</span>
<span class="comment-copy">this is the explanation I was looking for, everyone talked about sets and bools but no one mentioned its use with numbers.</span>
