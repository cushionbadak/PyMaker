<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/139180/how-to-list-all-functions-in-a-python-module">How to list all functions in a Python module?</a>
<span class="question-originals-answer-count">
                    15 answers
                </span>
</li>
</ul>
</div>
<p>I defined a .py file in this format:</p>
<h3>foo.py</h3>
<pre><code>def foo1(): pass
def foo2(): pass
def foo3(): pass
</code></pre>
<p>I import it from another file:</p>
<h3>main.py</h3>
<pre><code>from foo import * 
# or
import foo
</code></pre>
<p>Is it possible list all functions name, e.g. <code>["foo1", "foo2", "foo3"]</code>?</p>
<hr/>
<p>Thanks for your help, I made a class for what I want, pls comment if you have suggestion</p>
<pre><code>class GetFuncViaStr(object):
    def __init__(self):
        d = {}
        import foo
        for y in [getattr(foo, x) for x in dir(foo)]:
            if callable(y):
               d[y.__name__] = y
    def __getattr__(self, val) :
        if not val in self.d :
           raise NotImplementedError
        else:
           return d[val] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The cleanest way to do these things is to use the inspect module. It has a <code>getmembers</code> function that takes a predicate as the second argument. You can use <code>isfunction</code> as the predicate.</p>
<pre><code> import inspect

 all_functions = inspect.getmembers(module, inspect.isfunction)
</code></pre>
<p>Now, <code>all_functions</code> will be a list of tuples where the first element is the name of the function and the second element is the function itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use dir to explore a namespace.</p>
<pre><code>import foo
print dir(foo)
</code></pre>
<p>Example: loading your foo in shell</p>
<pre><code>&gt;&gt;&gt; import foo
&gt;&gt;&gt; dir(foo)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'foo1', 'foo2', 'foo3']
&gt;&gt;&gt; 
&gt;&gt;&gt; getattr(foo, 'foo1')
&lt;function foo1 at 0x100430410&gt;
&gt;&gt;&gt; k = getattr(foo, 'foo1')
&gt;&gt;&gt; k.__name__
'foo1'
&gt;&gt;&gt; callable(k)
True
&gt;&gt;&gt; 
</code></pre>
<p>You can use getattr to get the associated attribute in foo and find out if it callable.</p>
<p>Check the documentation : <a href="http://docs.python.org/tutorial/modules.html#the-dir-function">http://docs.python.org/tutorial/modules.html#the-dir-function</a></p>
<p>and if you do - "from foo import *" then the names are included in the namespace where you call this. </p>
<pre><code>&gt;&gt;&gt; from foo import *
&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', '__package__', 'atexit', 'foo1', 'foo2', 'foo3']
&gt;&gt;&gt; 
</code></pre>
<p>The following brief on introspection in python might help you :</p>
<ul>
<li><a href="http://www.ibm.com/developerworks/library/l-pyint.html">http://www.ibm.com/developerworks/library/l-pyint.html</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Try using inspect module like below for exmaple if module --&gt; temp.py</p>
<pre><code>In [26]: import inspect

In [27]: import temp

In [28]: l1 = [x.__name__ for x in temp.__dict__.values() if inspect.isfunction(x)]

In [29]: print l1
['foo', 'coo']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like 
<a href="https://stackoverflow.com/a/4040709/247696">aaronasterling said</a>, you can use the <a href="http://docs.python.org/3/library/inspect.html#inspect.getmembers" rel="nofollow noreferrer">getmembers</a> functions from the <code>inspect</code> module to do this.</p>
<pre><code>import inspect

name_func_tuples = inspect.getmembers(module, inspect.isfunction)
functions = dict(name_func_tuples)
</code></pre>
<p>However, this <strong>will include functions that have been defined elsewhere</strong>, but imported into that module's namespace.</p>
<p>If you want to get only the functions that have been defined in that module, use this snippet:</p>
<pre><code>name_func_tuples = inspect.getmembers(module, inspect.isfunction)
name_func_tuples = [t for t in name_func_tuples if inspect.getmodule(t[1]) == module]
functions = dict(name_func_tuples)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a wild import</p>
<pre><code>from foo import * 
print dir()
</code></pre>
<p>you can use <code>dir()</code> without a parameter to show objects in the current module's namespace. This will most probably include more than just the content of <code>foo</code>.</p>
<p>In case of an absolute import (which you should prefer by the way) you can pass the module to <code>dir()</code>:</p>
<pre><code>import foo
print dir(foo)
</code></pre>
<p>Also check the <a href="http://docs.python.org/library/functions.html#dir" rel="nofollow">documentation of <code>dir</code></a>. As you only wanted functions, you might want to think about using <a href="http://docs.python.org/library/inspect.html#inspect.isfunction" rel="nofollow"><code>inspect.isfunction</code></a>. Hope you don't use that list for non-debugging purposes.</p>
</div>
<div class="post-text" itemprop="text">
<p>if wanting to list functions of the current module (i.e., not an imported one), you could also do something like this:</p>
<pre><code>import sys
def func1(): pass
def func2(): pass

if __name__ == '__main__':
    print dir(sys.modules[__name__])
</code></pre>
</div>
<span class="comment-copy">This is a terrible idea. Use a decorator to enumerate the functions you care about.</span>
<span class="comment-copy">Thanks Ignacio, but to put a @push_to_list on each function may cause a lot of replacement work in my case, can you show me why it is a bad idea?</span>
<span class="comment-copy">You may not want all the functions in the module to be available for use.</span>
<span class="comment-copy">+1 for inspect.getmembers !</span>
<span class="comment-copy">@user478514  You have to import it initially to call <code>getmembers</code> on it but after that, the second element of each tuple is a function with it's globals bound to the globals of the module that it is defined in. No further reference need be made to that module.</span>
<span class="comment-copy">How to list all functions in the current file when you don't know module name?</span>
<span class="comment-copy">Wow, really cool.  Much better than using <code>dir()</code>, since that just provides the module attributes (the behaviour of which can be overriden by defining <a href="http://docs.python.org/2/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer"><code>__getattribute__</code></a> in the module).</span>
<span class="comment-copy">To only include functions that have been defined in that module (not imported), see this question: <a href="http://stackoverflow.com/questions/1106840/find-functions-explicitly-defined-in-a-module-python" title="find functions explicitly defined in a module python">stackoverflow.com/questions/1106840/â€¦</a></span>
<span class="comment-copy">Take a look at inspect also: <a href="http://docs.python.org/library/inspect.html" rel="nofollow noreferrer">docs.python.org/library/inspect.html</a></span>
<span class="comment-copy">thanks,is it means I may have to filter the result of dir() in order to get all functions?</span>
<span class="comment-copy">@user478514: Just edited to answer that ;) You can use <code>inspect.isfunction</code>.</span>
