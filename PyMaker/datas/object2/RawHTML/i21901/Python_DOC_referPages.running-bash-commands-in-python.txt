<div class="post-text" itemprop="text">
<p>On my local machine, I run a python script which contains this line</p>
<pre><code>bashCommand = "cwm --rdf test.rdf --ntriples &gt; test.nt"
os.system(bashCommand)
</code></pre>
<p>This works fine.</p>
<p>Then I run the same code on a server and I get the following error message</p>
<pre><code>'import site' failed; use -v for traceback
Traceback (most recent call last):
File "/usr/bin/cwm", line 48, in &lt;module&gt;
from swap import  diag
ImportError: No module named swap
</code></pre>
<p>So what I did then is I inserted a "print bashCommand" which prints me than the command in the terminal before it runs it with os.system().</p>
<p>Of course, I get again the error (caused by os.system(bashCommand)) but before that error it prints the command in the terminal. Then I just copied that output and did a copy paste into the terminal and hit enter and it works...</p>
<p>Does anyone have a clue what's going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>os.system</code>. It has been deprecated in favor of <a href="http://docs.python.org/library/subprocess.html" rel="noreferrer">subprocess</a>. From the <a href="https://docs.python.org/3/library/subprocess.html" rel="noreferrer">docs</a>: "This module intends to replace several older modules and functions: <code>os.system</code>, <code>os.spawn</code>".</p>
<p>Like in your case:</p>
<pre><code>bashCommand = "cwm --rdf test.rdf --ntriples &gt; test.nt"
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To somewhat expand on the earlier answers here, there are a number of details which are commonly overlooked.</p>
<ul>
<li>Prefer <code>subprocess.run()</code> over <code>subprocess.check_call()</code> and friends over <code>subprocess.call()</code> over <code>subprocess.Popen()</code> over <code>os.system()</code> over <code>os.popen()</code></li>
<li>Understand and probably use <code>text=True</code>, aka <code>universal_newlines=True</code>.</li>
<li>Understand the meaning of <code>shell=True</code> or <code>shell=False</code> and how it changes quoting and the availability of shell conveniences.</li>
<li>Understand differences between <code>sh</code> and Bash</li>
<li>Understand how a subprocess is separate from its parent, and generally cannot change the parent.</li>
<li>Avoid running the Python interpreter as a subprocess of Python.</li>
</ul>
<p>These topics are covered in some more detail below.</p>
<h1>Prefer <code>subprocess.run()</code> or <code>subprocess.check_call()</code></h1>
<p>The <code>subprocess.Popen()</code> function is a low-level workhorse but it is tricky to use correctly and you end up copy/pasting multiple lines of code ... which conveniently already exist in the standard library as a set of higher-level wrapper functions for various purposes, which are presented in more detail in the following.</p>
<p>Here's a paragraph from the <a href="https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>The recommended approach to invoking subprocesses is to use the <code>run()</code> function for all use cases it can handle. For more advanced use cases, the underlying <code>Popen</code> interface can be used directly.</p>
</blockquote>
<p>Unfortunately, the availability of these wrapper functions differs between Python versions.</p>
<ul>
<li><code>subprocess.run()</code> was officially introduced in Python 3.5. It is meant to replace all of the following.</li>
<li><code>subprocess.check_output()</code> was introduced in Python 2.7 / 3.1. It is basically equivalent to <code>subprocess.run(..., check=True, stdout=subprocess.PIPE).stdout</code></li>
<li><code>subprocess.check_call()</code> was introduced in Python 2.5.  It is basically equivalent to <code>subprocess.run(..., check=True)</code></li>
<li><code>subprocess.call()</code> was introduced in Python 2.4 in the original <code>subprocess</code> module (<a href="https://www.python.org/dev/peps/pep-0324/" rel="noreferrer">PEP-324</a>). It is basically equivalent to <code>subprocess.run(...).returncode</code></li>
</ul>
<h3>High-level API vs <code>subprocess.Popen()</code></h3>
<p>The refactored and extended <code>subprocess.run()</code> is more logical and more versatile than the older legacy functions it replaces.  It returns a <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess" rel="noreferrer"><code>CompletedProcess</code></a> object which has various methods which allow you to retrieve the exit status, the standard output, and a few other results and status indicators from the finished subprocess.</p>
<p><code>subprocess.run()</code> is the way to go if you simply need a program to run and return control to Python. For more involved scenarios (background processes, perhaps with interactive I/O with the Python parent program) you still need to use <code>subprocess.Popen()</code> and take care of all the plumbing yourself. This requires a fairly intricate understanding of all the moving parts and should not be undertaken lightly.  The simpler <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="noreferrer"><code>Popen</code> object</a> represents the (possibly still-running) process which needs to be managed from your code for the remainder of the lifetime of the subprocess.</p>
<p>It should perhaps be emphasized that just <code>subprocess.Popen()</code> merely creates a process. If you leave it at that, you have a subprocess running concurrently alongside with Python, so a "background" process. If it doesn't need to do input or output or otherwise coordinate with you, it can do useful work in parallel with your Python program.</p>
<h3>Avoid <code>os.system()</code> and <code>os.popen()</code></h3>
<p>Since time eternal (well, since Python 2.5) the <a href="https://docs.python.org/release/2.5.2/lib/os-process.html" rel="noreferrer"><code>os</code> module documentation</a> has contained the recommendation to prefer <code>subprocess</code> over <code>os.system()</code>:</p>
<blockquote>
<p>The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function.</p>
</blockquote>
<p>The problems with <code>system()</code> are that it's obviously system-dependent and doesn't offer ways to interact with the subprocess. It simply runs, with standard output and standard error outside of Python's reach. The only information Python receives back is the exit status of the command (zero means success, though the meaning of non-zero values is also somewhat system-dependent).</p>
<p><a href="https://www.python.org/dev/peps/pep-0324/" rel="noreferrer">PEP-324</a> (which was already mentioned above) contains a more detailed rationale for why <code>os.system</code> is problematic and how <code>subprocess</code> attempts to solve those issues.</p>
<p><code>os.popen()</code> used to be even more <a href="https://docs.python.org/2/library/os.html#os.popen" rel="noreferrer">strongly discouraged</a>:</p>
<blockquote>
<p><em>Deprecated since version 2.6:</em> This function is obsolete. Use the <code>subprocess</code> module.</p>
</blockquote>
<p>However, since sometime in Python 3, it has been reimplemented to simply use <code>subprocess</code>, and redirects to the <code>subprocess.Popen()</code> documentation for details.</p>
<h3>Understand and usually use <code>check=True</code></h3>
<p>You'll also notice that <code>subprocess.call()</code> has many of the same limitations as <code>os.system()</code>. In regular use, you should generally check whether the process finished successfully, which <code>subprocess.check_call()</code> and <code>subprocess.check_output()</code> do (where the latter also returns the standard output of the finished subprocess). Similarly, you should usually use <code>check=True</code> with <code>subprocess.run()</code> unless you specifically need to allow the subprocess to return an error status.</p>
<p>In practice, with <code>check=True</code> or <code>subprocess.check_*</code>, Python will throw a <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CalledProcessError" rel="noreferrer"><code>CalledProcessError</code> exception</a> if the subprocess returns a nonzero exit status.</p>
<p>A common error with <code>subprocess.run()</code> is to omit <code>check=True</code> and be surprised when downstream code fails if the subprocess failed.</p>
<p>On the other hand, a common problem with <code>check_call()</code> and <code>check_output()</code> was that users who blindly used these functions were surprised when the exception was raised e.g. when <code>grep</code> did not find a match. (You should probably replace <code>grep</code> with native Python code anyway, as outlined below.)</p>
<p>All things counted, you need to understand how shell commands return an exit code, and under what conditions they will return a non-zero (error) exit code, and make a conscious decision how exactly it should be handled.</p>
<h1>Understand and probably use <code>text=True</code> aka <code>universal_newlines=True</code></h1>
<p>Since Python 3, strings internal to Python are Unicode strings. But there is no guarantee that a subprocess generates Unicode output, or strings at all.</p>
<p>(If the differences are not immediately obvious, Ned Batchelder's <a href="https://nedbatchelder.com/text/unipain.html" rel="noreferrer">Pragmatic Unicode</a> is recommended, if not outright obligatory, reading. There is a 36-minute video presentation behind the link if you prefer, though reading the page yourself will probably take significantly less time.)</p>
<p>Deep down, Python has to fetch a <code>bytes</code> buffer and interpret it somehow. If it contains a blob of binary data, it <em>shouldn't</em> be decoded into a Unicode string, because that's error-prone and bug-inducing behavior - precisely the sort of pesky behavior which riddled many Python 2 scripts, before there was a way to properly distinguish between encoded text and binary data.</p>
<p>With <code>text=True</code>, you tell Python that you, in fact, expect back textual data in the system's default encoding, and that it should be decoded into a Python (Unicode) string to the best of Python's ability (usually UTF-8 on any moderately up to date system, except perhaps Windows?)</p>
<p>If that's <em>not</em> what you request back, Python will just give you <code>bytes</code> strings in the <code>stdout</code> and <code>stderr</code> strings. Maybe at some later point you <em>do</em> know that they were text strings after all, and you know their encoding. Then, you can decode them.</p>
<pre><code>normal = subprocess.run([external, arg],
    stdout=subprocess.PIPE, stderr=subprocess.PIPE,
    check=True,
    text=True)
print(normal.stdout)

convoluted = subprocess.run([external, arg],
    stdout=subprocess.PIPE, stderr=subprocess.PIPE,
    check=True)
# You have to know (or guess) the encoding
print(convoluted.stdout.decode('utf-8'))
</code></pre>
<p>Python 3.7 introduced the shorter and more descriptive and understandable alias <code>text</code> for the keyword argument which was previously somewhat misleadingly called <code>universal_newlines</code>.</p>
<h1>Understand <code>shell=True</code> vs <code>shell=False</code></h1>
<p>With <code>shell=True</code> you pass a single string to your shell, and the shell takes it from there.</p>
<p>With <code>shell=False</code> you pass a list of arguments to the OS, bypassing the shell.</p>
<p>When you don't have a shell, you save a process and get rid of a <a href="/questions/3172470/actual-meaning-of-shell-true-in-subprocess">fairly substantial amount of hidden complexity, which may or may not harbor bugs or even security problems.</a></p>
<p>On the other hand, when you don't have a shell, you don't have redirection, wildcard expansion, job control, and a large number of other shell features.</p>
<p>A common mistake is to use <code>shell=True</code> and then still pass Python a list of tokens, or vice versa. This happens to work in some cases, but is really ill-defined and could break in interesting ways.</p>
<pre><code># XXX AVOID THIS BUG
buggy = subprocess.run('dig +short stackoverflow.com')

# XXX AVOID THIS BUG TOO
broken = subprocess.run(['dig', '+short', 'stackoverflow.com'],
    shell=True)

# XXX DEFINITELY AVOID THIS
pathological = subprocess.run(['dig +short stackoverflow.com'],
    shell=True)

correct = subprocess.run(['dig', '+short', 'stackoverflow.com'],
    # Probably don't forget these, too
    check=True, text=True)

# XXX Probably better avoid shell=True
# but this is nominally correct
fixed_but_fugly = subprocess.run('dig +short stackoverflow.com',
    shell=True,
    # Probably don't forget these, too
    check=True, text=True)
</code></pre>
<p>The common retort "but it works for me" is not a useful rebuttal unless you understand exactly under what circumstances it could stop working.</p>
<h3>Refactoring Example</h3>
<p>Very often, the features of the shell can be replaced with native Python code.  Simple Awk or <code>sed</code> scripts should probably simply be translated to Python instead.</p>
<p>To partially illustrate this, here is a typical but slightly silly example which involves many shell features.</p>
<pre><code>cmd = '''while read -r x;
   do ping -c 3 "$x" | grep 'round-trip min/avg/max'
   done &lt;hosts.txt'''

# Trivial but horrible
results = subprocess.run(
    cmd, shell=True, universal_newlines=True, check=True)
print(results.stdout)

# Reimplement with shell=False
with open('hosts.txt') as hosts:
    for host in hosts:
        host = host.rstrip('\n')  # drop newline
        ping = subprocess.run(
             ['ping', '-c', '3', host],
             text=True,
             stdout=subprocess.PIPE,
             check=True)
        for line in ping.stdout.split('\n'):
             if 'round-trip min/avg/max' in line:
                 print('{}: {}'.format(host, line))
</code></pre>
<p>Some things to note here:</p>
<ul>
<li>With <code>shell=False</code> you don't need the quoting that the shell requires around strings. Putting quotes anyway is probably an error.</li>
<li>It often makes sense to run as little code as possible in a subprocess. This gives you more control over execution from within your Python code.</li>
<li>Having said that, complex shell pipelines are tedious and sometimes challenging to reimplement in Python.</li>
</ul>
<p>The refactored code also illustrates just how much the shell really does for you with a very terse syntax -- for better or for worse. Python says <em>explicit is better than implicit</em> but the Python code <em>is</em> rather verbose and arguably looks more complex than this really is. On the other hand, it offers a number of points where you can grab control in the middle of something else, as trivially exemplified by the enhancement that we can easily include the host name along with the shell command output. (This is by no means challenging to do in the shell, either, but at the expense of yet another diversion and perhaps another process.)</p>
<h3>Common Shell Constructs</h3>
<p>For completeness, here are brief explanations of some of these shell features, and some notes on how they can perhaps be replaced with native Python facilities.</p>
<ul>
<li>Globbing aka wildcard expansion can be replaced with <code>glob.glob()</code> or very often with simple Python string comparisons like <code>for file in os.listdir('.'): if not file.endswith('.png'): continue</code>.  Bash has various other expansion facilities like <code>.{png,jpg}</code> brace expansion and <code>{1..100}</code> as well as tilde expansion (<code>~</code> expands to your home directory, and more generally <code>~account</code> to the home directory of another user)</li>
<li>Redirection allows you to read from a file as your standard input, and write your standard output to a file. <code>grep 'foo' &lt;inputfile &gt;outputfile</code> opens <code>outputfile</code> for writing and <code>inputfile</code> for reading, and passes its contents as standard input to <code>grep</code>, whose standard output then lands in <code>outputfile</code>. This is not generally hard to replace with native Python code.</li>
<li>Pipelines are a form of redirection. <code>echo foo | nl</code> runs two subprocesses, where the standard output of <code>echo</code> is the standard input of <code>nl</code> (on the OS level, in Unix-like systems, this is a single file handle). If you cannot replace one or both ends of the pipeline with native Python code, perhaps think about using a shell after all, especially if the pipeline has more than two or three processes  (though look at the <a href="https://docs.python.org/3.7/library/pipes.html" rel="noreferrer"><code>pipes</code> module in the Python standard library</a> or a number of more modern and versatile third-party competitors).</li>
<li>Job control lets you interrupt jobs, run them in the background, return them to the foreground, etc.  The basic Unix signals to stop and continue a process are of course available from Python, too. But jobs are a higher-level abstraction in the shell which involve process groups etc which you have to understand if you want to do something like this from Python.</li>
</ul>
<h1>Understand differences between <code>sh</code> and Bash</h1>
<p><code>subprocess</code> runs your shell commands with <code>/bin/sh</code> unless you specifically request otherwise (except of course on Windows, where it uses the value of the <code>COMSPEC</code> variable). This means that <a href="/a/42666651/874188">various Bash-only features like arrays, <code>[[</code> etc</a> are not available.</p>
<p>If you need to use Bash-only syntax, you can 
pass in the path to the shell as <code>executable='/bin/bash'</code> (where of course if your Bash is installed somewhere else, you need to adjust the path).</p>
<pre><code>subprocess.run('''
    # This for loop syntax is Bash only
    for((i=1;i&lt;=$#;i++)); do
        # Arrays are Bash-only
        array[i]+=123
    done''',
    shell=True, check=True,
    executable='/bin/bash')
</code></pre>
<h1>A <code>subprocess</code> is separate from its parent, and cannot change it</h1>
<p>A somewhat common mistake is doing something like</p>
<pre><code>subprocess.run('foo=bar', shell=True)
subprocess.run('echo "$foo"', shell=True)  # Doesn't work
</code></pre>
<p>which aside from the lack of elegance also betrays a fundamental lack of understanding of the "sub" part of the name "subprocess".</p>
<p>A child process runs completely separate from Python, and when it finishes, Python has no idea what it did (apart from the vague indicators that it can infer from the exit status and output from the child process).  A child generally cannot change the parent's environment; it cannot set a variable, change the working directory, or, in so many words, communicate with its parent without cooperation from the parent.</p>
<p>The immediate fix in this particular case is to run both commands in a single subprocess;</p>
<pre><code>subprocess.run('foo=bar; echo "$foo"', shell=True)
</code></pre>
<p>though obviously this particular use case doesn't require the shell at all.  Remember, you can manipulate the environment of the current process (and thus also its children) via</p>
<pre><code>os.environ['foo'] = 'bar'
</code></pre>
<p>or pass an environment setting to a child process with</p>
<pre><code>subprocess.run('echo "$foo"', shell=True, env={'foo': 'bar'})
</code></pre>
<p>(not to mention the obvious refactoring <code>subprocess.run(['echo', 'bar'])</code>; but <code>echo</code> is a poor example of something to run in a subprocess in the first place, of course).</p>
<h1>Don't run Python from Python</h1>
<p>This is slightly dubious advice; there are certainly situations where it does make sense or is even an absolute requirement to run the Python interpreter as a subprocess from a Python script. But very frequently, the correct approach is simply to <code>import</code> the other Python module into your calling script and call its functions directly.</p>
<p>If the other Python script is under your control, and it isn't a module, consider <a href="/questions/15746675/how-to-write-a-python-module-package">turning it into one</a>.  (This answer is too long already so I will not delve into details here.)</p>
<p>If you need parallelism, you can run Python functions in subprocesses with the <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing" rel="noreferrer"><code>multiprocessing</code> module.</a>  There is also <a href="https://docs.python.org/3/library/threading.html#module-threading" rel="noreferrer"><code>threading</code></a> which runs multiple tasks in a single process (which is more lightweight and gives you more control, but also more constrained in that threads within a process are tightly coupled, and bound to a single <a href="https://docs.python.org/3/glossary.html#term-global-interpreter-lock" rel="noreferrer">GIL</a>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Call it with subprocess</p>
<pre><code>import subprocess
subprocess.Popen("cwm --rdf test.rdf --ntriples &gt; test.nt")
</code></pre>
<p>The error you are getting seems to be because there is no swap module on the server, you should install swap on the server then run the script again</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible you use the bash program, with the parameter -c for execute the commands:</p>
<pre><code>bashCommand = "cwm --rdf test.rdf --ntriples &gt; test.nt"
output = subprocess.check_output(['bash','-c', bashCommand])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use 'subprocess', but I always felt that it was not a 'Pythonic' way of doing it. So I created Sultan (shameless plug) that makes it easy to run command line functions.</p>
<p><a href="https://github.com/aeroxis/sultan" rel="noreferrer">https://github.com/aeroxis/sultan</a></p>
</div>
<div class="post-text" itemprop="text">
<p>According to the error you are missing a package named <em>swap</em> on the server. This <code>/usr/bin/cwm</code> requires it. If you're on Ubuntu/Debian, install <code>python-swap</code> using aptitude.</p>
</div>
<div class="post-text" itemprop="text">
<p>To run the command without a shell, pass the command as a <em>list</em> and implement the redirection in Python using <a href="https://stackoverflow.com/tags/subprocess/info"><code>[subprocess]</code></a>:</p>
<pre><code>#!/usr/bin/env python
import subprocess

with open('test.nt', 'wb', 0) as file:
    subprocess.check_call("cwm --rdf test.rdf --ntriples".split(),
                          stdout=file)
</code></pre>
<p>Note: no <code>&gt; test.nt</code> at the end. <code>stdout=file</code> implements the redirection.</p>
<hr/>
<p>To run the command using the shell in Python, pass the command as a <em>string</em> and enable <code>shell=True</code>:</p>
<pre><code>#!/usr/bin/env python
import subprocess

subprocess.check_call("cwm --rdf test.rdf --ntriples &gt; test.nt",
                      shell=True)
</code></pre>
<p>Here's the shell is responsible for the output redirection (<code>&gt; test.nt</code> is in the command).</p>
<hr/>
<p>To run a bash command that uses bashisms, specify the bash executable explicitly e.g., to <a href="https://stackoverflow.com/a/28840955/4279">emulate bash process substitution</a>:</p>
<pre><code>#!/usr/bin/env python
import subprocess

subprocess.check_call('program &lt;(command) &lt;(another-command)',
                      shell=True, executable='/bin/bash')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also you can use 'os.popen'.
Example:</p>
<pre><code>import os

command = os.popen('ls -al')
print(command.read())
print(command.close())
</code></pre>
<p>Output:</p>
<pre><code>total 16
drwxr-xr-x 2 root root 4096 ago 13 21:53 .
drwxr-xr-x 4 root root 4096 ago 13 01:50 ..
-rw-r--r-- 1 root root 1278 ago 13 21:12 bot.py
-rw-r--r-- 1 root root   77 ago 13 21:53 test.py

None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The pythonic way of doing this is using <a href="https://docs.python.org/2/library/subprocess.html#popen-constructor" rel="nofollow noreferrer"><code>subprocess.Popen</code></a></p>
<p><code>subprocess.Popen</code> takes a list where the first element is the command to be run followed by any command line arguments.</p>
<p>As an example:</p>
<pre><code>import subprocess

args = ['echo', 'Hello!']
subprocess.Popen(args) // same as running `echo Hello!` on cmd line

args2 = ['echo', '-v', '"Hello Again"']
subprocess.Popen(args2) // same as running 'echo -v "Hello Again!"` on cmd line
</code></pre>
</div>
<span class="comment-copy">There seems to be a difference in the environment depending on how you run <code>cwm</code>.  Maybe you have some configuration in your <code>.bashrc</code> that sets up the environment for interactive bash use?</span>
<span class="comment-copy">Did you try running the command from the command line when logged in on the server?  Your post just says you "pasted [it] into the terminal".</span>
<span class="comment-copy">@Sven: yes I meant that I ran the command directly in the terminal of the server</span>
<span class="comment-copy">There seems to be a difference in the PYTHONPATH depending on how you run <code>cwm</code>.  Or maybe there is a difference in PATH, and different version of <code>cwm</code> are called.  Or different versions of Python.  It is really hard to figure this out without access to the machine...</span>
<span class="comment-copy">This didn't do what I wanted when I needed to do a <code>cd 'path\to\somewhere'</code> followed by another bash command that needed to be run in that somewhere. @user225312</span>
<span class="comment-copy">@AWrightIV If you need your subprocess to be run in a particular working directory, you can use the <code>cwd</code> argument to Popen: <code>subprocess.Popen(..., cwd='path\to\somewhere')</code></span>
<span class="comment-copy">For my command I needed shell=True as here; <a href="http://stackoverflow.com/questions/18962785/oserror-errno-2-no-such-file-or-directory-while-using-python-subprocess-in-dj" title="oserror errno 2 no such file or directory while using python subprocess in dj">stackoverflow.com/questions/18962785/…</a></span>
<span class="comment-copy">It's better use shlex.split() instead string.split() in this case</span>
<span class="comment-copy">... (<code>stdout=file</code> redirects the output to a file in this case. It implements <code>&gt; file</code>). It would be wrong to pass <code>..., '&gt;', 'file']</code> in the last command expecting the redirection (it won't work without a shell and if you use a shell, you should pass the command as a string)</span>
<span class="comment-copy">For a more detailed exposition of how you might avoid calling Python as a subprocess, see <a href="/a/48401774/874188">this answer on a tangentially similar question.</a></span>
<span class="comment-copy">it boggles my mind that I had to post a new answer to such a basic question in order to show how to run the command from the question idiomatically. Your answer is long but I don't see such example. Unrelated: avoid cargo-culting. If check_call() works in your case, use it. I had to fix a code that used <code>run()</code> blindly. Missing <code>check=True</code> caused a bug which would be avoided if check_call were used — "check" is in the name, you can't lose it —it is the correct default: don't ignore errors silently. I didn't read further.</span>
<span class="comment-copy">@jfs Thanks for the feedback, I was in fact planning to add a section about Bash vs <code>sh</code> but you beat me to it. I'm trying to spell out the specifics in enough detail to help beginners for whom these pitfalls are not obvious so that does get a bit longwinded. Yours should be quite sufficient otherwise; +1</span>
<span class="comment-copy">Reminder to self: Add a section about interactive features like aliases, history, etc.</span>
<span class="comment-copy">@Stringers I have not tested, but I don't see why it should. If you connect those pipes to something which does some processing, then of course that processing needs to oe accouted for; but it doesn't happen in the pipe itself. The default is to not capture stdout or stderr at all, i.e. whatever gets printed there is out of Python's visibility and control, just like with <code>os.system()</code>.</span>
<span class="comment-copy">The <code>swap</code> module is obviously there, because running the command from the shell works.</span>
<span class="comment-copy">Not on the server, when he runs it on the server there is an import error.</span>
<span class="comment-copy">@mkn: "Then I just copied that output and did a copy paste into the terminal and hit enter and it works..." -- Did you try this on the server or on your machine?</span>
<span class="comment-copy">Yes it runs locally...</span>
<span class="comment-copy">Is it you are running this on a stand alone computer fine but its not working when you run it on your server? Or are you able to run it on a server terminal but not the server itself</span>
<span class="comment-copy"><code>subprocess.check_output(bashCommand, shell=True)</code> does the same thing. If your command is a static string, try parsing it into a list yourself and avoid the <code>shell=True</code>; though in this case you need the shell for the redirection anyway, or else you will need to refactor it to pure Python -- <code>with open('test.nt', 'w') as dest: output = subprocess.check_output(['cwm' ,'--rdf', 'test.rdf', '--ntriples'], stdout=dest, shell=False)</code></span>
<span class="comment-copy">@tripleee note: <code>/bin/sh</code> (used by subprocess) is not necessarily <code>bash</code> (you can't use bashisms). Though one could use <code>executable='/bin/bash</code> if desired. <a href="https://stackoverflow.com/q/28840575/4279">Here's a code example</a></span>
<span class="comment-copy">it is the first answer where the command should start successfully (the accepted and the 2nd popular answers are just wrong. A minor quibble: <code>check_output()</code> is useless here (the output is always empty due to the <code>&gt; file</code> redirection; <a href="https://stackoverflow.com/a/53090482/4279">use <code>check_call()</code> instead.</a></span>
<span class="comment-copy"><code>output.decode("utf-8")</code> to convert byte to string</span>
<span class="comment-copy">Well done! Much cleaner and more intuitive than subprocess.</span>
<span class="comment-copy">Thank you so much! I'm happy to hear that!</span>
<span class="comment-copy">This should honestly be adopted into the standard library.</span>
<span class="comment-copy">Is there a way to capture the output from the terminal using Sultan?</span>
<span class="comment-copy">Yes you can @alvas ... Here is the docs on how to do it: <a href="https://sultan.readthedocs.io/en/latest/sultan-examples.html#example-12-results-from-a-command" rel="nofollow noreferrer">sultan.readthedocs.io/en/latest/…</a></span>
<span class="comment-copy">but it works when I run it directly in the terminal... so the swap must be there, not?</span>
<span class="comment-copy">there are two options. either it can't find <code>swap</code> or it shouldn't have imported it in the first place. can you <code>import swap</code> manually? does it work?</span>
<span class="comment-copy">hm I can't. If i start python with typing python in the terminal and then i type import swap then I got the error "ImportError: No module named swap". The weird thing is still that it works when I run the cwm command directly in the terminal of the server</span>
<span class="comment-copy">Try printing <code>sys.path</code> where it's working and where it's not. Then try looking for the swap folder or swap.py in the folders printed. As Sven said, there may be a problem with those paths, and this will help you figure it out.</span>
<span class="comment-copy">Perhaps mention that <code>.split()</code> is not adequate when there are quoted strings etc. There is a separate routine <a href="https://docs.python.org/3/library/shlex.html#shlex.split" rel="nofollow noreferrer"><code>shlex.split()</code></a> which copes with arbitrarily complex shell syntax.</span>
<span class="comment-copy">@tripleee the <code>.split()</code> works in this case. <code>shlex.split()</code> can be useful sometimes but it may fail in some cases too. There are great many things that could be mentioned. You could start with the link to the subprocess tag description provided above.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/os.html#os.popen" rel="nofollow noreferrer">The documentation</a> contains a big red box: <i>"<b>Deprecated since version 2.6:</b> This function is obsolete. Use the <code>subprocess</code> module."</i></span>
<span class="comment-copy">No, the last example is the same as running <code>echo -v '"Hello Again!"'</code> with single quotes around the double quotes.</span>
