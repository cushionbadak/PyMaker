<div class="post-text" itemprop="text">
<p>How can I generate random integers between 0 and 9 (inclusive) in Python?</p>
<p>For example, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>from random import randint
print(randint(0, 9))
</code></pre>
<p>More info: <a href="https://docs.python.org/3/library/random.html#random.randint" rel="noreferrer">https://docs.python.org/3/library/random.html#random.randint</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random
print(random.randint(0,9))
</code></pre>
<hr/>
<pre><code>random.randint(a, b)
</code></pre>
<p>Return a random integer N such that a &lt;= N &lt;= b.</p>
<p>Docs: <a href="https://docs.python.org/3.1/library/random.html#random.randint" rel="noreferrer">https://docs.python.org/3.1/library/random.html#random.randint</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>from random import randrange, uniform

# randrange gives you an integral value
irand = randrange(0, 10)

# uniform gives you a floating-point value
frand = uniform(0, 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from random import randint

x = [randint(0, 9) for p in range(0, 10)]
</code></pre>
<p>This generates 10 pseudorandom integers in range 0 to 9 inclusive.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3.6/library/secrets.html#module-secrets"><code>secrets</code></a> module is new in Python 3.6. This is better than the <a href="https://docs.python.org/3.6/library/random.html#module-random"><code>random</code></a> module for cryptography or security uses.</p>
<p>To randomly print an integer in the inclusive range 0-9:</p>
<pre><code>from secrets import randbelow
print(randbelow(10))
</code></pre>
<p>For details, see <a href="https://www.python.org/dev/peps/pep-0506/">PEP 506</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this through <code>random.shuffle</code></p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; nums = [x for x in range(10)]
&gt;&gt;&gt; random.shuffle(nums)
&gt;&gt;&gt; nums
[6, 3, 5, 4, 0, 1, 2, 9, 8, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Choose the size of the array (in this example, I have chosen the size to be 20). And then, use the following: </p>
<pre><code>import numpy as np   
np.random.randint(10, size=(1, 20))
</code></pre>
<p>You can expect to see an output of the following form (<em>different random integers will be returned each time you run it; hence you can expect the integers in the output array to differ from the example given below</em>).</p>
<pre><code>array([[1, 6, 1, 2, 8, 6, 3, 3, 2, 5, 6, 5, 0, 9, 5, 6, 4, 5, 9, 3]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case of continuous numbers <a href="https://docs.python.org/library/random.html#random.randint" rel="noreferrer"><code>randint</code></a> or <a href="https://docs.python.org/library/random.html#random.randrange" rel="noreferrer"><code>randrange</code></a> are probably the best choices but if you have several distinct values in a sequence (i.e. a <code>list</code>) you could also use <a href="https://docs.python.org/library/random.html#random.choice" rel="noreferrer"><code>choice</code></a>:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; values = list(range(10))
&gt;&gt;&gt; random.choice(values)
5
</code></pre>
<p><code>choice</code> also works for one item from a not-continuous sample:</p>
<pre><code>&gt;&gt;&gt; values = [1, 2, 3, 5, 7, 10]
&gt;&gt;&gt; random.choice(values)
7
</code></pre>
<p>If you need it "cryptographically strong" there's also a <a href="https://docs.python.org/library/secrets.html#secrets.choice" rel="noreferrer"><code>secrets.choice</code></a> in python 3.6 and newer:</p>
<pre><code>&gt;&gt;&gt; import secrets
&gt;&gt;&gt; values = list(range(10))
&gt;&gt;&gt; secrets.choice(values)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want to use numpy then use the following:</p>
<pre><code>import numpy as np
print(np.random.randint(0,10))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The original question implies generating <em>multiple</em> random integers.</p>
<blockquote>
<p>How can I generate integers between 0 and 9 (inclusive) in Python?</p>
</blockquote>
<p>Many responses however only show how to get <em>one</em> random number, e.g. <code>random.randint</code> and <code>random.choice</code>.  </p>
<p><strong>Multiple Random Integers</strong></p>
<p>For clarity, you can still generate multiple random numbers using those techniques by simply iterating <code>N</code> times:</p>
<pre><code>import random


N = 5

[random.randint(0, 9) for _ in range(N)]
# [9, 7, 0, 7, 3]

[random.choice(range(10)) for _ in range(N)]
# [8, 3, 6, 8, 7]
</code></pre>
<p><strong>Sample of Random Integers</strong></p>
<p>Some posts demonstrate how to natively generate <em>multiple</em> random integers.<sup>1</sup>  Here are some options that address the implied question:</p>
<p><a href="https://docs.python.org/3/library/random.html#random.sample" rel="noreferrer"><code>random.sample</code></a> returns <code>k</code> unique selections from a population (without replacement):<sup>2</sup></p>
<pre><code>random.sample(range(10), k=N)
# [4, 5, 1, 2, 3]
</code></pre>
<p>In Python 3.6, <a href="https://docs.python.org/3/library/random.html#random.choices" rel="noreferrer"><code>random.choices</code></a> returns <code>k</code> selections from a population (with replacement):</p>
<pre><code>random.choices(range(10), k=N)
# [3, 2, 0, 8, 2]
</code></pre>
<p>See also <a href="https://stackoverflow.com/a/47321460/4531270">this related post</a> using <code>numpy.random.choice</code>.</p>
<p><sub><sup>1</sup>Namely @John Lawrence Aspden, @S T Mohammed, @SiddTheKid, @user14372, @zangw, et al.</sub></p>
<p><sub><sup>2</sup>@prashanth mentions this module showing one integer.</sub></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.randrange(10)
3
&gt;&gt;&gt; random.randrange(10)
1
</code></pre>
<p>To get a list of ten samples:</p>
<pre><code>&gt;&gt;&gt; [random.randrange(10) for x in range(10)]
[9, 0, 4, 0, 5, 7, 4, 3, 6, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>random.sample</code> is another that can be used</p>
<pre><code>import random
n = 1 # specify the no. of numbers
num = random.sample(range(10),  n)
num[0] # is the required number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generating random integers between 0 and 9.</p>
<pre><code>import numpy
X = numpy.random.randint(0, 10, size=10)
print(X)
</code></pre>
<p>Output:</p>
<pre><code>[4 8 0 4 9 6 9 9 0 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Best way is to use import Random function  </p>
<pre><code>import random
print(random.sample(range(10), 10))
</code></pre>
<p>or without any library import:</p>
<pre><code>n={} 
for i in range(10):
    n[i]=i

for p in range(10):
    print(n.popitem()[1])
</code></pre>
<p>here the <a href="https://docs.python.org/3.6/library/stdtypes.html#dict.popitem" rel="nofollow noreferrer">popitems</a> removes and returns an arbitrary value from the dictionary <code>n</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>import numpy as np
print ( np.random.uniform(low=0, high=10, size=(15,)) ).astype(int)

&gt;&gt;&gt; [8 3 6 9 1 0 3 6 3 3 1 2 4 0 4]
</code></pre>
<p><strong>Notes:</strong></p>
<blockquote>
<p>1.&gt; <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html" rel="nofollow noreferrer">np.random.uniform</a> generates uniformly distributed numbers over the half-open interval [low, high).</p>
<p>2.&gt; <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.astype.html" rel="nofollow noreferrer">astype(int)</a> casts the numpy array to int data type. </p>
<p>3.&gt; I have chosen size = (15,). This will give you a numpy array of length = 15. </p>
</blockquote>
<p>More information on <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html" rel="nofollow noreferrer">numpy.random.uniform</a></p>
<p>More information on <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.astype.html" rel="nofollow noreferrer">numpy.ndarray.astype</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is more of a mathematical approach but it works 100% of the time:</p>
<p>Let's say you want to use <code>random.random()</code> function to generate a number between <code>a</code> and <code>b</code>. To achieve this, just do the following:</p>
<p><code>num = (b-a)*random.random() + a;</code></p>
<p>Of course, you can generate more numbers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try This,</p>
<pre><code>import numpy as np

X = np.random.randint(0, 99, size=1000) # 1k random integer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I used variable to control the range</p>
<pre><code>from random import randint 
numberStartRange = 1
numberEndRange = 9
randomNumber = randint(numberStartRange, numberEndRange)
print(randomNumber)
</code></pre>
<p>I used the print function to see the results. You can comment is out if you do not need this.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the example that you have given (a random integer between 0 and 9), the cleanest solution is:</p>
<pre><code>from random import randrange

randrange(10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation page for the <a href="https://docs.python.org/2.7/library/random.html" rel="nofollow noreferrer">random</a> module:</p>
<blockquote>
<p>Warning: The pseudo-random generators of this module should not be
  used for security purposes. Use os.urandom() or SystemRandom if you
  require a cryptographically secure pseudo-random number generator.</p>
</blockquote>
<p><a href="https://docs.python.org/2.7/library/random.html?highlight=random#random.SystemRandom" rel="nofollow noreferrer">random.SystemRandom</a>, which was introduced in Python 2.4, is considered <a href="https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator" rel="nofollow noreferrer">cryptographically secure</a>.  It is still available in Python 3.7.1 which is current at time of writing.  </p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.digits
'0123456789'
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.SystemRandom().choice(string.digits)
'8'
&gt;&gt;&gt; random.SystemRandom().choice(string.digits)
'1'
&gt;&gt;&gt; random.SystemRandom().choice(string.digits)
'8'
&gt;&gt;&gt; random.SystemRandom().choice(string.digits)
'5'
</code></pre>
<p>Instead of <code>string.digits</code>, <code>range</code> could be used per some of the other answers along perhaps with a comprehension.  Mix and match according to your needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had better luck with this for Python 3.6  </p>
<pre><code>str_Key = ""                                                                                                
str_RandomKey = ""                                                                                          
for int_I in range(128):                                                                                    
      str_Key = random.choice('0123456789')
      str_RandomKey = str_RandomKey + str_Key 
</code></pre>
<p>Just add characters like 'ABCD' and 'abcd' or '^!~=-&gt;&lt;' to alter the character pool to pull from, change the range to alter the number of characters generated.</p>
</div>
<span class="comment-copy">Just a note, these are pseudorandom numbers and they are not cryptographically secure. Do not use this in any case where you don't want an attacker to guess your numbers. Use the <code>secrets</code> module for better random numbers. Reference: <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">docs.python.org/3/library/random.html</a></span>
<span class="comment-copy">10 or 9? I'm getting only 9.</span>
<span class="comment-copy">This would improve the answer and should be added. The more security minded answers should always be added if available.</span>
<span class="comment-copy">nums = range(10)</span>
<span class="comment-copy">It's also helpful to know how Numpy can generate a random array of specified size, not just a single random number. (Docs: <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html" rel="nofollow noreferrer">numpy.random.randint</a>)</span>
<span class="comment-copy">What if we want more numbers from the sequence?</span>
<span class="comment-copy">If they should be without replacement: <a href="https://docs.python.org/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample</code></a>. With replacement you could use a comprehension with <code>choice</code>: for example for a list containing 3 random values with replacement: <code>[choice(values) for _ in range(3)]</code></span>
<span class="comment-copy">You could tell something about "numpy".</span>
<span class="comment-copy"><a href="http://www.numpy.org/" rel="nofollow noreferrer">numpy.org</a></span>
<span class="comment-copy">Yeah. Thanks for the link. But I intended to mean that you could have improved your answer by providing details before just quoting two lines of code; like for what reason would someone prefer to use it instead of something already built in. Not that you're obliged to, anyway.</span>
<span class="comment-copy">If you're using NumPy, you should use NumPy's random functionalities to generate this list, for example with <code>numpy.random.randint(0, 10, size=10)</code>. The method you show is needlessly inefficient.</span>
<span class="comment-copy">randrange returns a single number between specified range.</span>
<span class="comment-copy">@ShitalShah That is exactly what the question wants. Run the accepted answer and realize that it does the same thing.</span>
<span class="comment-copy">@ShitalShah If you want all numbers between 0 and 9, you use <code>range(10)</code>.</span>
