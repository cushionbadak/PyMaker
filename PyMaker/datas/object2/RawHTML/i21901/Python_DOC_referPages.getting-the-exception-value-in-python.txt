<div class="post-text" itemprop="text">
<p>If I have that code:</p>
<pre><code>try:
    some_method()
except Exception,e:
</code></pre>
<p>How can I get this Exception value (string 
representation I mean)?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>use <code>str</code></p>
<pre><code>try:
    some_method()
except Exception as e:
    s = str(e)
</code></pre>
<p>Also, most exception classes will have an <code>args</code> attribute. Often, <code>args[0]</code> will be an error message.</p>
<p>It should be noted that just using <code>str</code> will return an empty string if there's no error message whereas using <code>repr</code> as pyfunc recommends will at least display the class of the exception. My take is that if you're printing it out, it's for an end user that doesn't care what the class is and just wants an error message.</p>
<p>It really depends on the class of exception that you are dealing with and how it is instantiated. Did you have something in particular in mind?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Use repr() and The difference between using repr and str</p>
</blockquote>
<p>Using repr:</p>
<pre><code>&gt;&gt;&gt; try:
...     print x
... except Exception, e:
...     print repr(e)
... 
NameError("name 'x' is not defined",)
&gt;&gt;&gt; 
</code></pre>
<p>Using str:</p>
<pre><code>&gt;&gt;&gt; 
&gt;&gt;&gt; try:
...     print x
... except Exception, e:
...     print str(e)
... 
name 'x' is not defined
&gt;&gt;&gt; 
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way hasn't been given yet:</p>
<pre><code>try:
    1/0
except Exception, e:
    print e.message
</code></pre>
<p>Output:</p>
<pre><code>integer division or modulo by zero
</code></pre>
<p><code>args[0]</code> might actually not be a message.</p>
<p><code>str(e)</code> might return the string with surrounding quotes and possibly with the leading <code>u</code> if unicode:</p>
<pre><code>'integer division or modulo by zero'
</code></pre>
<p><code>repr(e)</code> gives the full exception representation which is not probably what you want:</p>
<pre><code>"ZeroDivisionError('integer division or modulo by zero',)"
</code></pre>
<p><strong>edit</strong></p>
<p>My bad !!! It seems that <code>BaseException.message</code> <a href="http://sayspy.blogspot.ie/2007/05/baseexceptionmessage-is-now-deprecated.html">has been deprecated from <code>2.6</code></a>, finally, it definitely seems that there is still not a standardized way to display exception messages. So I guess the best is to do deal with <code>e.args</code> and <code>str(e)</code> depending on your needs (and possibly <code>e.message</code> if the lib you are using is relying on that mechanism).</p>
<p>For instance, with <code>pygraphviz</code>, <code>e.message</code> is the only way to display correctly the exception, using <code>str(e)</code> will surround the message with <code>u''</code>.</p>
<p>But with <code>MySQLdb</code>, the proper way to retrieve the message is <code>e.args[1]</code>: <code>e.message</code> is empty, and <code>str(e)</code> will display <code>'(ERR_CODE, "ERR_MSG")'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Even though I realise this is an old question, I'd like to suggest using the <a href="http://docs.python.org/3/library/traceback.html"><code>traceback</code> module</a> to handle output of the exceptions.</p>
<p>Use <code>traceback.print_exc()</code> to print the current exception to standard error, just like it would be printed if it remained uncaught, or <code>traceback.format_exc()</code> to get the same output as a string. You can pass various arguments to either of those functions if you want to limit the output, or redirect the printing to a file-like object.</p>
</div>
<div class="post-text" itemprop="text">
<p>For python2, It's better to use <code>e.message</code> to get the exception message, this will avoid possible <code>UnicodeDecodeError</code>. But yes <code>e.message</code> will be empty for some kind of exceptions like <code>OSError</code>, in which case we can add a <code>exc_info=True</code> to our logging function to not miss the error.<br/>
For python3, I think it's safe to use <code>str(e)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't know the type/origin of the error, you can try:</p>
<pre><code>import sys
try:
    doSomethingWrongHere()
except:
    print('Error: {}'.format(sys.exc_info()[0]))
</code></pre>
<p>But be aware, you'll get pep8 warning:</p>
<pre><code>[W] PEP 8 (E722): do not use bare except
</code></pre>
</div>
<span class="comment-copy">I'm printing this to make a report, the str(e) is fine i guess. Thanks a lot</span>
<span class="comment-copy">I would prefer to use <code>e.message</code> because <code>args[0]</code> might not be actually a message.</span>
<span class="comment-copy">repr(e) is also helpful if you want to get the full exception( e.g. NameError("global name 'variable' is not defined",), instead of "global name 'variable' is not defined"</span>
<span class="comment-copy">this answer is dangerous, as it will fail for unicode exceptions like this: <code>raise Exception(u'jörn')</code>. The failure is especially bad, because you will never see the actual exception but just a <code>UnicodeDecodeError</code>. If you don't know the exception's encoding (and most of the time you don't), you should either work on <code>repr(e)</code> or if you really need to, use another try-except block in your exception handling which catches UnicodeDecodeErrors and falls back to <code>repr(e)</code>.</span>
<span class="comment-copy">Agree with @JörnHees. I cannot count the number of times that <code>str</code> (or even <code>unicode</code> or <code>.format</code>) has caused bugs due to Unicode handling. If you don't have complete control of the error message contents, ALWAYS use <code>repr</code> to avoid unexpected Unicode errors.</span>
<span class="comment-copy">Great advice! Didn't know about the difference for exceptions.</span>
<span class="comment-copy">i'd suggest to use a different letter for the undefined 'e' and the exception 'e' to avoid people confusing them</span>
<span class="comment-copy">ah, <code>repr</code> is useful thanks, it seems anything else <code>unicode</code>, <code>str</code>, encoding, ... may raise an exception depending on input. Not quite useful when trying to keep the exception to look, but repr is <code>exception-safe</code> it seems</span>
<span class="comment-copy">This is <i>much</i> better than any <code>str()</code>-like solutions, because it actually includes the type of exception. With <code>str()</code> I got <code>'status'</code> while with <code>repr()</code> I got <code>KeyError('status')</code> and I was like "aaaaah, now I understand the error".</span>
