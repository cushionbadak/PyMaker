<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33270019/python-3-str-join-with-seperator">Python 3: str.join() with seperator</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>with the following snippet I can achieve what I'm looking for:</p>
<pre><code>d = {}
d[1] = 'one'
d[2] = 'two'
d[3] = 'three'

exp = ''
for k, v in d.items():
    exp += '{}@1 + '.format(v)

exp = exp[:-3]

exp
'one@1 + two@1 + three@1'
</code></pre>
<p>I was wondering if there are some better solution than deleting the last characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://www.tutorialspoint.com/python/string_join.htm" rel="nofollow noreferrer"><code>join</code></a>:</p>
<pre><code>d = {}
d[1] = 'one'
d[2] = 'two'
d[3] = 'three'

exp = ' + '.join('{}@1'.format(v) for v in d.values())    
print(exp)
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>one@1 + two@1 + three@1
</code></pre>
</div>
<span class="comment-copy"><code>' + '.join('{}@1'.format(v) for v in d.values())</code></span>
<span class="comment-copy"><code>exp = ' + '.join([f'{v}@1' for v in d.values()])</code></span>
<span class="comment-copy">@juanpa.arrivillaga: <code>join</code> accepts a generator, so square brackets are not needed.</span>
<span class="comment-copy">@Amadan I know, I even like the way it looks better, but for some reason the fact that it is inconsequentially faster to use the list comprehension compels me...</span>
