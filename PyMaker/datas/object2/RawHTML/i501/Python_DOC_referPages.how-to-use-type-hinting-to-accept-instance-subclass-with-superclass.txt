<div class="post-text" itemprop="text">
<p>I have a function that looks a bit like this. I want the function to accept any subclass of io.IOBase - in other words, any file-like object.</p>
<pre><code>def import_csv_file(f:io.IOBase)-&gt;pandas.DataFrame:
    return pandas.read_csv(f)
</code></pre>
<p>When I view the object in IntelliJ, the JetBrains implementation of type-hinting rejects any input unless I provide exactly an instance of io.IOBase - but what if I want to pass in an instance of a sub-class of io.IOBase? Is there a way to change the type-hint to say that this is allowed?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you annotate a function argument with the base class (<code>io.IOBase</code> in your case) then you can also pass instances of any subtype of the base class – inheritance applies to annotation types as well.</p>
<p>That said, you could use <a href="https://docs.python.org/3/library/typing.html#typing.io" rel="nofollow noreferrer"><code>typing.IO</code></a> as a generic type representing any I/O stream (and <code>typing.TextIO</code> and <code>typing.BinaryIO</code> for binary and text I/O streams respectively).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def import_csv_file(f: typing.Type[io.IOBase])-&gt;pandas.DataFrame:
    return pandas.read_csv(f)
</code></pre>
<p>Quoting the <a href="https://www.python.org/dev/peps/pep-0484/#the-type-of-class-objects" rel="nofollow noreferrer">PEP</a>:</p>
<blockquote>
<p>Sometimes you want to talk about class objects, in particular class objects that inherit from a given class. This can be spelled as Type[C] where C is a class. To clarify: while C (when used as an annotation) refers to instances of class C , Type[C] refers to subclasses of C .</p>
</blockquote>
<p>Python <a href="https://docs.python.org/3.5/library/typing.html#typing.Type" rel="nofollow noreferrer">doc</a>: </p>
<blockquote>
<p>A variable annotated with C may accept a value of type C. In contrast, a variable annotated with Type[C] may accept values that are classes themselves – specifically, it will accept the class object of C. For example:</p>
</blockquote>
<pre><code>a = 3         # Has type 'int'
b = int       # Has type 'Type[int]'
c = type(a)   # Also has type 'Type[int]'
</code></pre>
<p>Note that Type[C] is covariant:</p>
<pre><code>class User: ...
class BasicUser(User): ...
class ProUser(User): ...
class TeamUser(User): ...

# Accepts User, BasicUser, ProUser, TeamUser, ...
def make_new_user(user_class: Type[User]) -&gt; User:
    # ...
    return user_class()
</code></pre>
</div>
<span class="comment-copy">My answer is wrong. This would make the function accept classes, not instances. I'll remove this answer instead.</span>
<span class="comment-copy">But why I can't delete this accepted answer ?</span>
<span class="comment-copy">typing.IO is a better solution. :-)</span>
<span class="comment-copy">This would apparently make the function accept <i>classes</i>, not instances..</span>
<span class="comment-copy">@eugeney Yeah you're right, I misunderstand the Type[C], I'll delete this answer.</span>
