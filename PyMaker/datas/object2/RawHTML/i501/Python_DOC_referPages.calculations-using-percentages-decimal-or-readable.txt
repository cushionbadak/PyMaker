<div class="post-text" itemprop="text">
<p>Simple question (and apologies if this is too opinion based):
How should I store percentages?</p>
<p>When writing a program which includes a large number of analytical calculations, or financial calculations involving percents (return rates, APRs, profit margins etc), which of the three options below are best practice, in terms of performance, readability, good code practice etc.</p>
<ol>
<li><p>Store percentages as floats in decimal form: ie 20% = <code>0.20</code>, and write a filter to transform this in the UI. (In django this would be a templatetag, which would need to be applied everytime a percentage was dislayed).</p></li>
<li><p>Store percentages as whole numbers and divide by 100 whenever calculations need to be done in the backend, ie 20.13% is stored as <code>20.13</code> and used like <code>percent/100 * myNumber</code>.</p></li>
<li><p>Create (or use a library) a datatype for Percent, which can do both, such as having an attribute 'Percent.value' with a property decorated attribute for 'Percent.display' which multiplies by 100 and rounds. In this class I imagine __str__ is set to the display value, whereas all other operations use the raw value.</p></li>
</ol>
<p>As far as I see, 1 is the most intuitive, but doesn't seem like best practice for encapsulation, and could lead to issues with errors displaying odd values, debugging and etc. 2 seems to be insanely annoying for developers, and could lead to errors because of that. Option 3 seems like an unnecessary memory overhead.</p>
<p>Which is the most used in industry, and why?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest something along the lines of your option 1.</p>
<p>But instead of <code>float</code> you should use Pythons <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> library and for example Djangos <a href="https://docs.djangoproject.com/en/2.1/ref/models/fields/#decimalfield" rel="nofollow noreferrer"><code>DecimalField</code></a> to store it in the database.
The <code>decimal.Decimal</code> object allows for fixed rounding, which will save you from a lot of headaches.</p>
<p>I suggest storing the percentages as the value you will be needing for multiplications (example: store <code>21.56%</code> as <code>Decimal('0.2156')</code>). In my opinion it is better to alter the display when needed instead of making transformations in the calculations.</p>
<p>And yes, a template tag in Django sounds like a good way to go about displaying these values as percentages.</p>
</div>
<span class="comment-copy">Do you expect to do a lot of calculations using that percentage field directly in the database? Or mostly in Python after retrieving the records?</span>
