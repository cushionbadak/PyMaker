<div class="post-text" itemprop="text">
<p>I have a problem when I use Python to generate pdf files from markdown.
My goal here is to transform my documentation to pdf.
To do that I already have a shell command which looks like this:</p>
<pre><code>markdown &lt;markdown filename&gt;.md | htmldoc --cont --headfootsize 8.0 --linkcolor blue --linkstyle plain --charset utf-8 --format pdf14 - &gt; &lt;pdf filename&gt;.pdf
</code></pre>
<p>To use it you need to install markdown and htmldoc:</p>
<pre><code>sudo apt-get update
sudo apt-get install markdown
sudo apt-get install htmldoc
</code></pre>
<p>So now I want to automate the generation. I want to use python with its main library <code>subprocess</code> in 3.6 so here is the code: </p>
<pre><code>import subprocess
import os
import sys
import getopt
import shutil


def list_markdown_file(path):
    # this function list all markdown file
    # param path = path to the target directory

    list_of_file = []
    for file in os.listdir(path):
        if file.endswith(".md") and not file == 'README.md':
            list_of_file.append(os.path.splitext(file)[0])
    return list_of_file


def generate_pdf(path, list_file):
    destination_dir = "pdf"
    if os.path.isdir(os.path.join(path, destination_dir)):
        shutil.rmtree(os.path.join(path, destination_dir))
    os.mkdir(os.path.join(path, destination_dir))

    for filename in list_file:
        subprocess.run(["markdown", filename+".md", "|", "htmldoc", "--cont",
                        "--headfootsize", "8.0", "--linkcolor", "blue", "--linkstyle",
                        "plain", "--charset", "utf-8", "--format", "pdf14", "-", "&gt;",
                        os.path.join(path, destination_dir, filename+".pdf")], encoding='utf-8', stdout=subprocess.PIPE)


def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hp:", ["path"])
    except getopt.GetoptError:
        print('python generate_pdf.py -p &lt;path_to_directory&gt;')
        sys.exit(2)
    path_to_file = ''
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print('python generate_pdf.py -p &lt;path_to_directory&gt;')
            sys.exit()
        elif opt in ("-p", "--path"):
            path_to_file = arg
    if not opts:
        print('python generate_pdf.py -h to see how its works')
        exit(2)
    list_of_file = list_markdown_file(path=path_to_file)
    generate_pdf(path=path_to_file, list_file=list_of_file)


if __name__ == '__main__':
    main(sys.argv[1:])
</code></pre>
<p>The problem is located in this part:</p>
<pre><code>for filename in list_file:
    subprocess.run(["markdown", filename+".md", "|", "htmldoc", "--cont",
                    "--headfootsize", "8.0", "--linkcolor", "blue", "--linkstyle",
                    "plain", "--charset", "utf-8", "--format", "pdf14", "-", "&gt;",
                    os.path.join(path, destination_dir, filename+".pdf")], encoding='utf-8', stdout=subprocess.PIPE)
</code></pre>
<p>When I do that only the part with <code>markdown filename.md</code> is run.
Why is that? What can I do to fix that?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess</code> without <code>shell=True</code> runs a single subprocess.  If you want to run a complete pipeline, you need to use <code>shell=True</code> or run each process separately.</p>
<p>Trivially but unattractively with <code>shell=True</code>:</p>
<pre><code>for filename in list_file:
    # Switch run([list, of, things]) to (run("string of things", shell=True)
    subprocess.run("""markdown '{0}.md' |
        htmldoc --cont --headfootsize 8.0 --linkcolor blue --linkstyle plain \\
            --charset utf-8 --format pdf14 - &gt;'{1}'""".format(
            filename, os.path.join(path, destination_dir, filename+".pdf"),
        shell=True)
</code></pre>
<p>Perhaps slightly more elegantly</p>
<pre><code>for filename in list_file:
    with open(os.path.join(path, destination_dir, filename+".pdf")) as dest:
        subprocess.run("""markdown '{0}.md' |
            htmldoc --cont --headfootsize 8.0 --linkcolor blue --linkstyle plain \\
                --charset utf-8 --format pdf14 -""".format(filename),
            shell=True, stdout=dest, universal_newlines=True, check=True)
</code></pre>
<p>You could also get rid of <code>shell=True</code> and run two separate processes; see <a href="https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline" rel="nofollow noreferrer">Replacing shell pipeline</a> in the <code>subprocess</code> documentation.</p>
<p>Just to make this explicit, <code>subprocess.run(['foo', 'bar', '|' 'baz'])</code> runs the program <code>foo</code> with the arguments <code>bar</code>, <code>|</code>, and <code>baz</code>; not two processes where the second is <code>baz</code> and the standard input of the second is connected to the standard output of the first, which is what the shell does when you run a pipeline.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can Convert Markdwen File To PDF file using a Python Module Named <code>Markdown2PDF</code>, Install it in Python 3 by <code>sudo pip3 install Markdown2PDF</code>. Open the Terminal and write <code>md2pdf &lt;file_name&gt;</code> like <code>md2pdf test.md</code> to convert to pdf.</p>
</div>
<span class="comment-copy">You're using pipes in your commands. Per <a href="https://stackoverflow.com/questions/13332268/how-to-use-subprocess-command-with-pipes">this</a> answer you need to specify <code>shell=True</code> in the <code>subprocess.run(...)</code> call.</span>
<span class="comment-copy">I tried but now it get stuck and do nothing (no error ...)</span>
<span class="comment-copy">For (much) more detail, see also <a href="https://stackoverflow.com/a/51950538/874188">stackoverflow.com/a/51950538/874188</a></span>
