<div class="post-text" itemprop="text">
<p>I'm trying to convert <code>PHP</code> snippet into <code>Python3</code> code but outputs of <code>print</code> and <code>echo</code> are different.</p>
<p>You can see it in the step 1. </p>
<p>Do you know where is the problem? I'm attaching input arrays too but I think they are equal.</p>
<pre><code>�W2+ vs ee7523b2
</code></pre>
<p><strong>EDIT</strong></p>
<p>When I switch raw from TRUE to FALSE, outputs of 1st step are the same. <code>$d = strrev(hash("crc32b", $d, FALSE)) . $d</code></p>
<p>But the problem is that I have to convert PHP to Python, not the opposite because, then I'm usit in the step 2 which I need to have equal output.</p>
<p><strong>PHP OUTPUT (CMD)</strong></p>
<pre><code>0 -&gt;    1   1   100 EUR 20190101    11111111                Faktúra 1   SK6807200002891987426353        0   0
1 -&gt; �W2+   1   1   100 EUR 20190101    11111111                Faktúra 1   SK6807200002891987426353        0   0
2 -&gt; 00004e00007715c242b04d5014490af1445dd61c1527ddc5f4461ca5886caf63fd8fbcf7df69c2035760ecb28d8171efdb409c0206996498ea7921e715172e60c210f923f070079ffba40000
</code></pre>
<p><strong>PYTHON OUTPUT</strong></p>
<pre><code>-------
0 -&gt;    1   1   100 EUR 20190101    11111111                Faktúra 1   SK6807200002891987426353        0   0
1 -&gt; ee7523b2   1   1   100 EUR 20190101    11111111                Faktúra 1   SK6807200002891987426353        0   0
2 -&gt; b'00006227515c7830302762275c783030325c7865305c7864386a34585c7862346d5c7838665c7865625c7863315c786266625c7839625c786339675c786332785c7831645c7862392c415c7862625c7831645c78663770365c786463735c786236572d606c225c7865355c7865635c7831345c7863655c786331205c7830635c7831315c7861375c7839345c7864665c7865635c7830365c7831652c22265c7866355c7862335c7866345c78616145585c7861625c7866395c7839615c7839645c7865645c7864625c7830305c7864355c7861643b5c7865365f5c7866645c786533405c78303027'
</code></pre>
<p><strong>PHP</strong></p>
<pre><code>&lt;?php
$suma = "100";
$datum = "20190101";
$varsym = "11111111";
$konsym = "";
$specsym = "";
$poznamka = "Faktúra";
$iban = "SK6807200002891987426353";
$swift = "";

$d = implode("\t", array(
    0 =&gt; '',
    1 =&gt; '1',
    2 =&gt; implode("\t", array(
        true,
        $suma,                      // SUMA
        'EUR',                      // JEDNOTKA
        $datum,                 // DATUM
        $varsym,                    // VARIABILNY SYMBOL
        $konsym,                        // KONSTANTNY SYMBOL
        $specsym,                       // SPECIFICKY SYMBOL
        '',
        $poznamka,                  // POZNAMKA
        '1',
        $iban,  // IBAN
        $swift,                 // SWIFT
        '0',
        '0'
    ))
));
// 0
echo "0 -&gt; ".$d."\n";
$d = strrev(hash("crc32b", $d, TRUE)) . $d;
// 1
echo "1 -&gt; ".$d."\n";
$x = proc_open("/usr/bin/xz '--format=raw' '--lzma1=lc=3,lp=0,pb=2,dict=128KiB' '-c' '-'", [0 =&gt; ["pipe", "r"], 1 =&gt; ["pipe", "w"]], $p);
fwrite($p[0], $d);
fclose($p[0]);
$o = stream_get_contents($p[1]);
fclose($p[1]);
proc_close($x);

$d = bin2hex("\x00\x00" . pack("v", strlen($d)) . $o);
// 2
echo "2 -&gt; ".$d."\n";
?&gt;
</code></pre>
<p><strong>PYTHON</strong></p>
<pre><code>    def crc32b(x):
        h = zlib.crc32(x)
        x='%08X' % (h &amp; 0xffffffff,)
        return x.lower()

    t = "\t"
    gen = t.join(["1",
                  "100", # SAME VARIABLES 
                  "EUR",
                  "20190101",
                  "11111111",
                  "",
                  "",
                  "",
                  "Faktúra",
                  "1",
                  "SK6807200002891987426353",
                  "",
                  "0",
                  "0"]
                 )

    d = t.join([
        "", "1", gen])
    # 0
    print(f"0 -&gt; {d}")
    hashD = crc32b(d.encode()) # OK

    hashD = hashD[::-1]
    # hashD = str(binascii.unhexlify(hashD))
    d = hashD + d
    # 1
    print(f"1 -&gt; {d}")
    args = shlex.split("xz '--format=raw' '--lzma1=lc=3,lp=0,pb=2,dict=128KiB' -c -")
    process = subprocess.Popen(args, shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    output = process.communicate(d.encode())

    pack = "\x00\x00" + str(struct.pack("H", len(d))) + str(output[0])

    d = binascii.hexlify(pack.encode())
    # 2
    print(f"2 -&gt; {d}")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Didn't work with <em>PHP</em>. <br/>According to <a href="https://docs.python.org/3/library/zlib.html#zlib.crc32" rel="nofollow noreferrer">[Python 3]: zlib.<strong>crc32</strong>(<em>data[, value]</em>)</a> (<strong>emphasis</strong> is mine):</p>
<blockquote>
<p>Computes a CRC (Cyclic Redundancy Check) checksum of <em>data</em>. The result is an <strong>unsigned 32-bit integer</strong>.</p>
</blockquote>
<p>You are making a confusion between:</p>
<ul>
<li>Its value - which can also be seen as an <em>ASCII</em> string of length 4</li>
<li>The textual representation of its value (in <strong>base <em>16</em></strong>) - which is a string of length 8</li>
</ul>
<blockquote>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; crc = 0x2B3257EE  # The value returned by zlib.crc32 for your text
&gt;&gt;&gt; type(crc), crc
(&lt;class 'int'&gt;, 724719598)
&gt;&gt;&gt;
&gt;&gt;&gt; [chr((crc &gt;&gt; shift_bits) &amp; 0xFF) for shift_bits in [0, 8, 16, 24]]
['î', 'W', '2', '+']
</code></pre>
</blockquote>
<p><strong>Notes</strong>:</p>
<ul>
<li>One way to do it is converting each of the number's 4 bytes into a <em>char</em></li>
<li>To get a byte from the <em>uint32</em> value, the <em>uint32</em> must be shifted to the right (<a href="https://wiki.python.org/moin/BitwiseOperators" rel="nofollow noreferrer">[Python.Wiki]: BitwiseOperators</a>) by the order of that <em>byte</em> in the value (<strong><em>[3, 2, 1, 0]</em></strong>) multiplied by <strong><em>8</em></strong> (number of bits in a byte)

<ul>
<li>Also, to get rid of the unwanted bytes (any of them except the right-most one), the resulting value is also <em>and</em>ed with <em>0xFF</em> (<em>255</em>)</li>
</ul></li>
<li>Due to <em>little endian</em>ness, the bytes are converted to <em>char</em>s in reversed order (from right to left)</li>
<li>The 1<sup>st</sup> <em>char</em> (<code>'î'</code>) looks different, but it's just a matter of representation (in my console <em>vs</em> yours)</li>
</ul>
<p>Integrating it into your code, you need to modify your <em>crc32b</em> function (and also remove any further processing on <em>hashD</em>) to:</p>
<pre class="lang-py prettyprint-override"><code>def crc32b(x):
    crc = zlib.crc32(x)
    return "".join([chr((crc &gt;&gt; shift_bits) &amp; 0xFF) for shift_bits in [0, 8, 16, 24]])
</code></pre>
<p>For more details on this general topic, check <a href="https://stackoverflow.com/questions/37990060/python-struct-pack-behavior/38003729#38003729">[SO]: Python struct.pack() behavior (@CristiFati's answer)</a>.</p>
<p><strong><em>@EDIT0</em></strong>:</p>
<p>Adding the version that starts from the <em>hex</em> representation:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; crc = 0x2B3257EE
&gt;&gt;&gt; crc_hex = "{:08X}".format(crc)
&gt;&gt;&gt; crc_hex
'2B3257EE'
&gt;&gt;&gt;
&gt;&gt;&gt; list(reversed([chr(int(crc_hex[2 * i] + crc_hex[2 * i + 1], 16)) for i in range(len(crc_hex) // 2)]))
['î', 'W', '2', '+']
</code></pre>
</blockquote>
<ul>
<li>From my <em>PoV</em>, this is uglier, also it's inefficient (many back and forth conversions), but posting anyway as some folks have trouble working on bit operations</li>
<li>The key point is to handle 2 <em>hex</em> <em>char</em>s at a time, and only reverse after conversion</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>you just have to remove the 3rd argument of the function <code>hash()</code></p>
<p>if you set this argument to true, hash will return raw binary data and php is trying to parse it as a text string whereas you are expecting a hexadecimal result</p>
</div>
<span class="comment-copy">How would you do that? I've added step 2. Those have to be equal.</span>
<span class="comment-copy">@aws_apprentice It's crc32b not crc32 and zlib is used inside the function as you can see</span>
<span class="comment-copy">Hey, did this answer your question?</span>
<span class="comment-copy">Thanks but I need to edit Python code to get the same result, not the opposite. How would you do that? It's a part of a bigger script and I need to use the output on the other line.</span>
