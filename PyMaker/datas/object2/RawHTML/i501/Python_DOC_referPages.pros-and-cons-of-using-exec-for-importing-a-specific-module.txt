<div class="post-text" itemprop="text">
<p>I would like to find out disadvantages of using <code>exec</code> for imports. One of the files serves as interface towards real implementations of specific functionalities depending on chosen project (framework is intended to work on several projects). </p>
<p>First use-case goes like this:</p>
<pre><code>exec ("from API.%s.specific_API_%s import *" % (project, project))
</code></pre>
<p>This way I don't have to hard code anything except the variable <code>project</code> which is injected in the interface-module itself.</p>
<p>This is the other way:</p>
<pre><code>if project == 'project_one':
    from API.project_one.specific_API_project_one import *
elif project == 'project_two':
    from API.project_two.specific_API_project_two import *
elif project == 'project_three':
    from API.project_three.specific_API_project_three import *
</code></pre>
<p>This way I have to alter this interface-file each time new project is added to be supported.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>If you need programmatic way to import modules, please use <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a> or <code>__import__</code> (for really specific cases). Reasons — don't re-invent the wheel, there's way to do what you want without <code>exec</code>. If your <code>project</code> variable coming from outer world, <code>exec</code> is a huge security issue.</li>
<li>Wildcard imports considered bad practice — it makes harder to maintain your codebase afterwards.</li>
</ol>
<hr/>
<p>Oversimplified example of issues with <code>exec</code> by executing arbitrary code:</p>
<pre><code>module = 'request'
func = 'urlopen'
exec("from urllib.%s import %s" % (module, func))

func = 'urlopen; print("hello python")'
exec("from urllib.%s import %s" % (module, func))
</code></pre>
<p>yes, your example is harder to forge, but problem stays — giving python arbitrary code to execute is overkill (with potential security gap), when you have tool built exactly for your purpose — programatically importing modules.</p>
</div>
<span class="comment-copy">A possible third way would be to use <code>importlib.import_module</code> which takes a string argument to do the importing. This is probably better than using <code>exec</code></span>
<span class="comment-copy">Could you explain why exec is a huge security issue? I'm trying to understand do's and dont's rather than excepting them as is.</span>
