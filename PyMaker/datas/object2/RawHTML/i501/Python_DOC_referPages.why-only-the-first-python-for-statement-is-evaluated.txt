<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14637154/performing-len-on-list-of-a-zip-object-clears-zip">Performing len on list of a zip object clears zip [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I know how to use the <code>zip()</code> function in Python 3. My question is regarding the following which I somehow feel quite peculiar:</p>
<p>I define two lists:</p>
<pre><code>lis1 = [0, 1, 2, 3]
lis2 = [4, 5, 6, 7]
</code></pre>
<p>and I use the <code>zip()</code> on these in the following ways:</p>
<pre><code>1. test1 = zip( lis1, lis2)

2. test2 = list(zip(lis1, lis2))
</code></pre>
<p>when I type <code>test1</code> at the interpreter, I get this:</p>
<pre><code>"zip object at 0x1007a06c8"
</code></pre>
<p>So, I type <code>list(test1)</code> at the interpreter and I get the intended result, but  when I type <code>list(test1)</code> again, I get an empty list.</p>
<p>What I find peculiar is that no matter how many times I type <code>test2</code> at the interpreter I always get the intended result and never an empty list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Unlike in Python 2, the <code>zip</code> function in Python 3 returns an <em>iterator</em>.  Iterators can only be exhausted (by something like making a list out of them) once.  The purpose of this is to save memory by only generating the elements of the iterator as you need them, rather than putting it all into memory at once.  If you want to reuse your zipped object, just create a list out of it as you do in your second example, and then duplicate the list by something like</p>
<pre><code> test2 = list(zip(lis1,lis2))
 zipped_list = test2[:]
 zipped_list_2 = list(test2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> function in Python 3 returns an iterator. That is the reason why when you print <code>test1</code> you get - <code>&lt;zip object at 0x1007a06c8&gt;</code>. <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">From documentation</a> -</p>
<blockquote>
<p>Make an iterator that aggregates elements from each of the iterables.</p>
</blockquote>
<p>But once you do - <code>list(test1)</code> - you have exhausted the iterator. So after that anytime you do <code>list(test1)</code> would only result in empty list.</p>
<p>In case of <code>test2</code>, you have already created the list once, <code>test2</code> is a list, and hence it will always be that list.</p>
</div>
<span class="comment-copy"><code>zip()</code> is a <i>generator</i>; it produces the values just once. <code>list()</code> creates a list of any iterable (including generators), so you pulled out the values for <code>zip()</code> just once and stored the resulting list in <code>lis2</code>. List objects are not generators, they keep track of all values contained.</span>
<span class="comment-copy">isn't that behavior applicable for a generator, not an iterator?</span>
<span class="comment-copy">why isn't it applicable for an iterator? Check - <a href="http://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators" title="difference between pythons generators and iterators">stackoverflow.com/questions/2776829/â€¦</a> - <i>Every generator is an iterator</i> . Iterators also can get exhausted, and in the same way , there can be generators that never get exhausted.</span>
