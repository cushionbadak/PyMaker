<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3917574/how-is-pythons-list-implemented">How is Python's List Implemented?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>Let's say we have</p>
<blockquote>
<p>a = [1, 2, 3]</p>
</blockquote>
<p>Whenever I use index in list like <code>0</code>, <code>1</code>, <code>2</code> in this case, How does python3 retrieve element by knowing the index? Is there any specific address for each element inside the list under the hood other than index?</p>
</div>
<div class="post-text" itemprop="text">
<p>the arrays (list in python) technically store pointers rather than the objects themselves, which allows the array to contain only elements of a specific size even with mixed types list in python.</p>
<p><strong>from python docs:</strong></p>
<blockquote>
<p>CPython’s lists are really variable-length arrays, not Lisp-style
  linked lists. The implementation uses a contiguous array of references
  to other objects, and keeps a pointer to this array and the array’s
  length in a list head structure.</p>
<p>This makes indexing a list a[i] an operation whose cost is independent
  of the size of the list or the value of the index.</p>
<p>When items are appended or inserted, the array of references is
  resized. Some cleverness is applied to improve the performance of
  appending items repeatedly; when the array must be grown, some extra
  space is allocated so the next few times don’t require an actual
  resize.</p>
</blockquote>
<p>source:
<a href="https://docs.python.org/3/faq/design.html#how-are-lists-implemented-in-cpython" rel="nofollow noreferrer">https://docs.python.org/3/faq/design.html#how-are-lists-implemented-in-cpython</a></p>
<p><strong>more explanation :</strong></p>
<hr/>
<p><strong>what is a pointer?</strong></p>
<p>A pointer is a variable that stores a memory address.  Pointers are used to store the addresses of other variables or memory items.</p>
<p><strong>and how indexing work ?</strong></p>
<p>a[i] means the same as (p + i) when p represents pointer to the first element of an array:
*(a + i)
so if a pointer p points to an element of an array, then adding n to the pointer makes it point at the nth element following the original one. this involved adding or subtracting the correct offset (based on the size of a reference) in bytes between objects.</p>
<p>the size of a reference same as word size for the CPU 4 bytes on a 32bit system, and 8 bytes on a 64bit system</p>
<p><a href="https://i.stack.imgur.com/ZeWQG.png" rel="nofollow noreferrer">memory representation of array of pointers</a></p>
<p>hope this clear things to you ..
this is my first answer for me in stackoverflow, vote up if it is helpful. thank you.</p>
</div>
