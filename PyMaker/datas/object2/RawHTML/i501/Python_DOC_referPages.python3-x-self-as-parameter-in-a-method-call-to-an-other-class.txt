<div class="post-text" itemprop="text">
<p>I am trying to call a method on an other class and give the called class a reference of the current class along with some other parameters. But somehow it takes the self given as a parameter as the self of the called class.</p>
<p>Let me show you:</p>
<pre><code>import os, sys
from wsPart import wsPart
class thermo(wsPart):
    functional = False ## see line 8
    file = '/sys/bus/w1/devices/28-00000833e8ff/w1_slave' 
    def __init__(self, name, logger):
        super().__init__(name, logger)
        functional = True 
    def read(self):
        fileobject = open(self.file)
        filecontent = fileobject.read()
        fileobject.close()
        self.logger.writeLog(self,"Completed Meassurement") ##Problem on this line
        return filecontent
</code></pre>
<p>So I call the class <code>logger</code> and the method <code>writeLog</code> on it. Giving the Parameters message and a reference of the class thermo (self).</p>
<pre><code>import datetime
from wsPart import wsPart
class logger():
    logfile = "/var/log/wheaterstation.log"
    name = "Logger"
    def writeLog(self, sender, message):
        conn = open(self.logfile, "w")
        now = str(datetime.datetime.now().isoformat())
        conn.write("[" + now + "]" + " (" + sender.getName() + "): " + message + "\n") ##Problem on this line
        conn.close()
</code></pre>
<p>As you can see I put the parameters <code>self</code> because its a method that belongs to a class, the <code>sender</code> should be the reference to the class thermo that was passed as self in the thermo class. Lastly there is the <code>message</code> wich was passed in the thermo class aswell.
But this just gives me the error:</p>
<pre><code>Traceback (most recent call last):
File "scrLib/wsControl.py", line 61, in &lt;module&gt;
controller = controller()
File "scrLib/wsControl.py", line 22, in __init__
self.thermo = thermo("Thermometer", logger)
File "/home/joco/git/wheaterstation/scrLib/thermo.py", line 10, in __init__
super().__init__(name, logger)
File "/home/joco/git/wheaterstation/scrLib/wsPart.py", line 8, in __init__
self.logger.writeLog(self, "created")
TypeError: writeLog() missing 1 required positional argument: 'message'
</code></pre>
<p>So it seems that the <code>self</code> parameter wich was passed in the thermo class is interpetet as the <code>self</code> of the class <code>logger</code> wich gets it all mixed up.</p>
<p>Can you guys help me here?</p>
<p>Thank you all in advance</p>
<p>The full code + additonal comments can be viewed <a href="https://github.com/Jocomol/wheaterstation/tree/master/scrLib" rel="nofollow noreferrer">Here</a></p>
<p>Edit:
Both the logger and the thermo class get initilized in the file <code>wsPart.py</code>:</p>
<pre><code>class controller():
    name = ""
    logger = None
    thermo = None
    dbConnector = None

    def __init__(self):
    ##THis created the controller and all the other objects
        self.name = "Controller"
        ##Create Objects
        self.logger = logger()
        self.logger.writeLog(self,"logger created") ##This line Works
        self.thermo = thermo("Thermometer", logger)
        self.dbConnector = dbConnector("DBConnector",logger)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>yes, bad idea to call the instance and the class name the same. Here:</p>
<pre><code>    self.logger = logger()
    self.logger.writeLog(self,"logger created") ##This line Works
    self.thermo = thermo("Thermometer", logger)
    self.dbConnector = dbConnector("DBConnector",logger)
</code></pre>
<p>You're passing the <em>class</em> itself to your constructors. So the methods are seen as static/expect one more parameter. You need to change the 2 last lines to pass the instance you just created:</p>
<pre><code>    self.thermo = thermo("Thermometer", self.logger)
    self.dbConnector = dbConnector("DBConnector", self.logger)
</code></pre>
<p>more importantly, you need to use different names for classes and instances of the same objects to avoid that confusion (python convention for class names is starting each word with upper case (camelcase) ex: <code>Logger</code>. Other languages don't use that convention, but python is a lot about conventions).</p>
<p>With a different name you'd have gotten a <code>NameError</code> exception and you would have fixed the error yourself.</p>
<p>Aside: don't "initialize" members like this in the class definition:</p>
<pre><code>name = ""
logger = None
thermo = None
dbConnector = None
</code></pre>
<p>those are creating class members, not instance members. Remove those, and let <code>__init__</code> create instance members like you're currently doing. <code>__init__</code> is called no matter what, and those lines above just add to the confusion (except for some corner cases, only constants should be declared that way)</p>
</div>
<div class="post-text" itemprop="text">
<p>Totally unrelated but code in comments is unreadable so I post this as an answer:</p>
<ol>
<li><p>this does not work as you seem to expect:</p>
<p>class Whatever():
    functional = False ## see line 8</p>
<pre><code>def __init__(self, name, logger):
    super().__init__(name, logger)
    functional = True 
</code></pre></li>
</ol>
<p>Python has no "implied this" sor here in <code>__init__</code> you're not creating an instance attribute but a local variable. You want <code>self.functional = True</code></p>
<ol start="2">
<li><p>Make sure you close files</p>
<p>def read(self):
    fileobject = open(self.file)
    filecontent = fileobject.read()
    fileobject.close()</p></li>
</ol>
<p>If anything wrong happens between <code>open()</code> and <code>fileobject.close()</code>, the file is not garanteed to be properly closed. You want eiher a <code>try/finally</code> block ie</p>
<pre><code>    f = open(path)
    try:
        do_something_with(f)
    finally:
        f.close()
</code></pre>
<p>or much better a <code>with</code> block:</p>
<pre><code>    with open(path) as f:
        do_something_with(f)
</code></pre>
<p>which will ensure the file is closed whatever happens.</p>
<ol start="3">
<li><p><code>write</code> mode truncates the file</p>
<p>def writeLog(self, sender, message):
    conn = open(self.logfile, "w")
    now = str(datetime.datetime.now().isoformat())
    conn.write("[" + now + "]" + " (" + sender.getName() + "): " + message + "\n") ##Problem on this line
    conn.close()</p></li>
</ol>
<p><a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">as documented</a>, opening a file in write mode truncates the file. You probably want the "append" mode instead here.</p>
<ol start="4">
<li>Don't reinvent the squared wheel when there's a round one already</li>
</ol>
<p>Logging is not as trivial as just writing to a file (concurrency issues, need to send the log message to some other destination, logging levels etc), and even if you don't need more (at least the moment) your solution is quite inefficient (opening a file is expensive). </p>
<p>Python has a very comprehensive logging package in it's standard lib. I wholefully agree that it requires a bit of learning to configure and use properly but that's still a huge win compared to the time you'll spend trying to make a naive half-backed custom implementation works properly on production, AND this is a knowledge that you will need for just any serious project anyway.</p>
</div>
<span class="comment-copy">are you sure that <code>self.logger</code> is an <i>instance</i> of <code>logger</code> ? can you <a href="https://stackoverflow.com/posts/54744329/edit">edit</a> to show how you're initializing it? (note: I'm not going to visit the link to full code)</span>
<span class="comment-copy">@Jean-FrançoisFabre I added the part where both get initialized.</span>
<span class="comment-copy">@Jocomol "I personally name my classes with first upper case ex: Logger " : note that using CamelCase for class names is the convention in python anyway so you should really stick to this.</span>
<span class="comment-copy">true, doing too much C++ those days, thanks for that note</span>
<span class="comment-copy">@brunodesthuilliers What should I do if camelCase isn‘t an option, like in Logger?</span>
<span class="comment-copy">you can leave as is, but you can also use <code>logger_class</code> for instance :) (for instance, haha)</span>
<span class="comment-copy">Thank you, I've tried my best to realize your feedback (Except Nr 4. because I havent had time yet), if you want to take a look at it, its on GitHub under Jocomol/wheaterstation. If you have any other feedback dont hesitate to contact me under joelmeier08@gmail.com, I would be really grateful since there is so much I don't know yet in programming.</span>
