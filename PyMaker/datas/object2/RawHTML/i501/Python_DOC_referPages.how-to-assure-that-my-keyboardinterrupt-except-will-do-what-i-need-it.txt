<div class="post-text" itemprop="text">
<p>I am making an email-scraper and the pseudo-system is as follows</p>
<pre>
Stage 1.
1.Fetch all links from url
Stage 2.
2.Scrape emails
Stage 3.
3.Scrape links 
Stage 4.
4. If all links are processed, go to end_scene(which just asks me where i want to save em etc)
4.1 if an interruption has happend, go to end_scene
</pre>
<p>The main action part is in stage2 under <code>while len(unprocessed_urls)</code>
 I would have my logic to create urls and a <code>try except</code> for requesting the response of the urls, heres where the magic happens.
<strong>Here i can</strong> simply put an <code>except KeyboardInterrupt</code> and send it to my function.</p>
<p><strong>Now the problem</strong> comes at stage3 where I am scraping the emails, this part isn't in any <code>try/except</code> blocks so I cant really implement an interrupter or im not sure how to without an abrupt stop</p>
<p><strong>The core problem</strong> is that there's a <strong>certain</strong> moment where if I press <code>ctrl+c</code> It throws the default error exception and my code is never run.</p>
<p><strong>Here is the logic:</strong></p>
<pre><code>   # process urls one by one from unprocessed_url queue until queue is empty
while len(unprocessed_urls):

     ...URL processing...

     try:       
        ...heres the request is made...
        response = requests.get(url, timeout=3)
        done = True
    except requests.exceptions.ConnectionError as e:
        print("\n[ERROR]Connection Error:")
        print(e)
        continue
    except requests.Timeout as e:   
        print("\n[ERROR]Connection Timeout:")
        print(e)
        continue
    except requests.HTTPError as e:   
        print("\n[ERROR]HTTP Error:")
        print(e)
        continue
    except requests.RequestException as e:   
        print("\n[ERROR]General Error:")
        print(e)
        continue    
        ...this works...
        # Check for CTRL+C interruption
    except KeyboardInterrupt:
            end_scene()

    # extract all email addresses and add them into the resulting set
      ...email extraction logic...

    if len(new_emails) is 0:
       ...print no emails...
    else:
       ...print emails found...        
    # create a beutiful soup for the html document
    soup = BeautifulSoup(response.text, 'lxml')

    # Once this document is parsed and processed, now find and process all the anchors i.e. linked urls in this document
    for anchor in soup.find_all("a"):
        # extract link url from the anchor
        link = anchor.attrs["href"] if "href" in anchor.attrs else ''
        # resolve relative links (starting with /)
        if link.startswith('/'):
            link = base_url + link
        elif not link.startswith('http'):
            link = path + link

            # add the new url to the queue if it was not in unprocessed list nor in processed list yet
            if not link in unprocessed_urls and not link in processed_urls:
                unprocessed_urls.append(link)
</code></pre>
<p>So the question is, <strong>how can I build my code to rest assured when any keyboardInterruptions are initiated I can run <em>my code</em> ?</strong> </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/env python
import signal
import sys
def signal_handler(sig, frame):
        print('You pressed Ctrl+C!')
        sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)
print('Press Ctrl+C')
signal.pause()
</code></pre>
<p>scissored from <a href="https://stackoverflow.com/questions/1112343/how-do-i-capture-sigint-in-python">How do I capture SIGINT in Python?</a></p>
<p>I would suggest you use and register the appropriate signal handler, at least if your main goal is to simply catch any user-/system-interrupts.</p>
<p>It's a nice way to clean up any exits / interrupts.<br/>
Can also be used if you're running your application as a service to handle shutdown events and such.</p>
</div>
<div class="post-text" itemprop="text">
<p>I feel like this might not the right way, but you could try using a <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer"><code>contextmanager</code></a>:</p>
<pre><code>import time
from contextlib import contextmanager

# build your keyboard interrupt listener
@contextmanager
def kb_listener(func):
    print('Hey want to listen to KeyboardInterrupt?')
    try:
        yield func
    except KeyboardInterrupt:
        print("Who's there?")
        interrupt()      # &lt;--- what you actually want to do when KeyboardInterrupt

    # This might not be necessary for your code
    finally:             
        print('Keyboa^C')

# sample KeyboardInterrupt event
def interrupt():         
    print("KeyboardInterrupt.")

# sample layered function
def do_thing():          
    while True:
        print('Knock Knock')
        time.sleep(1)

with kb_listener(do_thing) as f:
    f()
</code></pre>
<p>Test output:</p>
<blockquote>
<pre><code>Hey want to listen to KeyboardInterrupt?
Knock Knock
Knock Knock
Knock Knock
Who's there?
KeyboardInterrupt.
Keyboa^C
</code></pre>
</blockquote>
<p>At least this way you don't need to wrap your entire function in a <code>try... except</code> block.</p>
</div>
<span class="comment-copy">wrap your code in a big try/except KeyboardInterrupt.</span>
<span class="comment-copy">@Jean-FrançoisFabre That sounds, strange. Can't the use of <a href="https://stackoverflow.com/questions/1112343/how-do-i-capture-sigint-in-python">signal</a> be a valid option instead?</span>
<span class="comment-copy">I tried the Big try/except before but the problem with that is that Any error inside will mess everything up and isn't reliable. @Torxed your suggestion worked flawlessly, signal is the way to go at least it seems right now</span>
<span class="comment-copy">@Torxed not sure if this signal stuff is portable under windows. Why not using exceptions?</span>
<span class="comment-copy">@Jean-FrançoisFabre: It is: <a href="https://i.imgur.com/KFV2k6I.png" rel="nofollow noreferrer">i.imgur.com/KFV2k6I.png</a> (signal.pause() doesn't exist tho, so replace with a while loop)</span>
