<div class="post-text" itemprop="text">
<p>I'm learning about lambda functions in python through tutorials online. I understand how it works but I came across an example that puzzles me (on this page <a href="https://www.w3schools.com/python/python_lambda.asp" rel="noreferrer">https://www.w3schools.com/python/python_lambda.asp</a>):</p>
<pre><code>def myfunc(n):
    return lambda a : a * n

mydoubler = myfunc(2)
print(mydoubler(11))
</code></pre>
<p>I don't understand how "mydoubler" function works here. How does it take 11 as an argument when we didn't define it before.
Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>mydoubler</code> is what <code>myfunc(2)</code> returns. It returns a lambda that accepts a single argument, <code>a</code>.</p>
<p>When you call on a function like this: <code>myfunction(this_argument)</code>, it is going to resolve to what is returned in that spot. So this is effectively the same as writing <code>mydoubler = lambda a : a * 2</code></p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>lambda</code> function is a small anonymous function. In your example </p>
<pre><code>myfunc(2) # lambda a: a * 2
</code></pre>
<p>You translate it as apply a function on each input element. It is quite obvious when an input is just a scalar, for example</p>
<pre><code>mydoubler(11) #outputs 11 * 2 = 22
</code></pre>
<p>But what do you expect when the input is an <code>array</code> or a <code>string</code>?</p>
<pre><code>mydoubler([1,1,1]) #outputs [1,1,1] * 2 = [1,1,1,1,1,1]
mydoubler("str") #outputs "str" * 2 = "strstr"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as Python documentation says, lambda is only anonymous function</p>
<blockquote>
<p>Lambda expressions (sometimes called lambda forms) are used to create anonymous functions. The expression lambda parameters: expression yields a function object.</p>
</blockquote>
<p>you can see it in <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">here</a> </p>
<p>what's going on in your snippet of code is that your <code>myfunc</code> function use <code>n</code> as a constant to new anonymous function that receive one parameter called <code>a</code> and return the multiplication of <code>a</code> with the <code>n</code>.
In your calling <code>n</code> value is <code>2</code>, result by your call <code>myfunc(2)</code>.
when you call <code>mydoubler(11)</code> you call your new anonymous function when <code>a</code> has value <code>11</code></p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p>As per the lambda documentation in <a href="https://pythonreference.readthedocs.io/en/latest/docs/operators/lambda.html" rel="nofollow noreferrer">https://pythonreference.readthedocs.io/en/latest/docs/operators/lambda.html</a></p>
<blockquote>
<p>lambda returns an anonymous function.</p>
</blockquote></li>
<li><p>In the above-mentioned example, lambda function is lambda a : a * n and
the lambda itself returns some anonymous function which must be something like </p>
<pre><code>def mydoubler(a, n):
    return a*n
</code></pre></li>
<li>But here, as we have already passed n=2 while calling myfun(), hence doing mydoubler(a) just returns a*2 (as here n=2) and hence the result.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Your example has two functions: the outer function <code>myfunc</code> and the inner function <code>lambda</code>. Normally you can call a <code>lambda</code> function directly:</p>
<pre><code>n = 2
print((lambda a: a * n)(11))
# 22
</code></pre>
<p>Or you can assign some variable to this function and call it through this variable:</p>
<pre><code>inner = lambda a: a * n
print(inner(11))
# 22
</code></pre>
<p>You can also define some outer function, which will return the inner <code>lambda</code> function:</p>
<pre><code>def myfunc():
    n = 2
    return lambda a: a * n

mydoubler = myfunc()
print(mydoubler(11))
# 22
</code></pre>
<p>What is equivalent to:</p>
<pre><code>mydoubler = lambda a: a * 2
print(mydoubler(11))
# 22
</code></pre>
<p>In the example above the variable <code>n</code> was declared inside <code>myfunc</code> and in your case <code>n</code> is the parameter of <code>myfunc</code>, which is passed to the <code>lambda</code> function. The function <code>myfunc</code> returns the<code>lambda</code> function with <code>n</code> equal to the argument, which you pass to <code>myfunc</code> by the function call. So the function call <code>myfunc(2)</code> returns the fuction <code>lambda a: a * 2</code>. </p>
</div>
<span class="comment-copy"><code>mydoubler</code> is a reference to the lambda returned by <code>myfunc</code>, and takes an <code>a</code> as input. 11 is passed as this <code>a</code>.</span>
<span class="comment-copy"><code>mydoubler</code> is <code>lambda a: a * n</code>, and so 11 is <code>a</code>, the only argument of that lambda.</span>
<span class="comment-copy">youâ€™re essentially making a curried function here</span>
