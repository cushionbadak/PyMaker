<div class="post-text" itemprop="text">
<p>I am trying to train my image dataset on google colab. I have the dataset folder present in colab. When trying to read the images from the directory in colab, I am just able to read the file name of all the images. However, if I try extracting the shape of the images in an array, it gives different errors with different approaches. I have tried using <strong>os</strong> library and <strong>PIL.Image</strong> and even <strong>pickle</strong>, but I am still not able to sort or even guess what could be the issue. <br/><br/>The errors which I am getting are:</p>
<blockquote>
<p>1) AttributeError: 'list' object has no attribute 'read'<br/>
  2) AttributeError: 'list' object has no attribute 'seek'</p>
</blockquote>
<p>Both when using <code>os.walk(path)</code> function in a for loop and picking up the files from the resultant list of all files present in the path.</p>
<blockquote>
<p>3) FileNotFoundError: [Errno 2] No such file or directory: '7119-220.jpg'</p>
</blockquote>
<p>This seems weird as it is looking out specifically for the same file each time I run the code. By using try and except for this <code>FileNotFoundError</code> I don't get any output.</p>
<p><strong>Question:</strong> What's the mistake that I am not getting?</p>
<pre><code>import os
import matplotlib.pyplot as plt
import time
import numpy as np
from PIL import Image

imagesPath = 'Neural_Net-for-Concrete-Crack-Detection/Wall_crack_dataset/W/CW'

target_names = [item for item in os.listdir(imagesPath)
                if os.path.isdir(os.path.join(imagesPath, item))]
number_train_samples = sum([len(files) for _, _, files in os.walk(imagesPath)])  

image = np.zeros((256, 256), dtype=int)

total_number_samples = number_train_samples

print('Training a CNN Multi-Classifier Model ......')
print(' - # of trained samples: ', number_train_samples, 
       '\n - total # of samples: ', total_number_samples)
</code></pre>
<p>This piece works for just counting the number of image files.</p>
<pre><code>from PIL import Image
import os
i=0
image = np.zeros((256, 256), dtype='uint8')

imagesPath = 'Neural_Net-for-Concrete-Crack-Detection/Wall_crack_dataset/W/CW'

for _, _, files in os.walk(imagesPath):
  for file in files:
    image = Image.open(file)
</code></pre>
<p>This code works better if I specify a particular image file in the directory to be plotted, but not for all.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk(...)</code></a> yields a 3-tuple <code>(dirpath, dirnames, filenames)</code>. Therefore, you should try to open <code>os.path.join(dirpath, file)</code> instead of <code>file</code>:</p>
<pre class="lang-py prettyprint-override"><code>from PIL import Image
import os
i=0
image = np.zeros((256, 256), dtype='uint8')

imagesPath = 'Neural_Net-for-Concrete-Crack-Detection/Wall_crack_dataset/W/CW'

for dirpath, _, files in os.walk(imagesPath):  # &lt;--
  for file in files:
    image = Image.open(os.path.join(dirpath, file))  # &lt;--
</code></pre>
<p>If you need a <code>dataset</code> with shape <code>(n_samples, channels, height, width)</code> and you want to stick to <code>PIL.Image</code>, you can do this:</p>
<pre class="lang-py prettyprint-override"><code>dataset_dir = "[DATASET_DIR]"
dataset = np.asarray([
    np.asarray(  # convert from PIL.Image to np.array
        Image.open(os.path.join(dirpath, img_fname))  # open image
    ).transpose((2,0,1))  # change from (H,W,C) to (C,H,W)
    for dirpath, _, fnames in os.walk(dataset_dir)  # scan the `dataset_dir`
    for img_fname in fnames  # for each file in `dataset_dir`
])
</code></pre>
<p>Pay attention that it requires all images to have the same <code>shape</code>.</p>
</div>
<span class="comment-copy">I am getting the files using this approach, but still not able to store the image shape and array. I tried using img_to_array from keras.preprocessing.image library. All I want is store the image as an array in dataset array defined as:   dataset = np.ndarray(shape=(len(train_files), channels, image_height, image_width),                      dtype=np.float32)</span>
<span class="comment-copy">@rajkumaryadav your original question is missing these infos. I updated my answer with a code that gives you a dataset the way you want without using keras, and I'd recommend you to open another question if you have a problem with keras. If you find my answer helpful, consider upvoting. If you open a follow-up question, you can paste the link here and I may take a look at it.</span>
