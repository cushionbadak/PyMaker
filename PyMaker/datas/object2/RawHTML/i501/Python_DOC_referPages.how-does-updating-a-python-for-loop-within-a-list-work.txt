<div class="post-text" itemprop="text">
<p>In Michael Nielsen's tutorial on neural networks he has the following code:</p>
<pre><code>def update_mini_batch(self, mini_batch, eta):
    """The ``mini_batch`` is a list of tuples ``(x, y)``, and ``eta``
    is the learning rate."""
    nabla_b = [np.zeros(b.shape) for b in self.biases]
    nabla_w = [np.zeros(w.shape) for w in self.weights]
    for x, y in mini_batch:
        delta_nabla_b, delta_nabla_w = self.backprop(x, y)
        nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
        nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]
    self.weights = [w-(eta/len(mini_batch))*nw
                    for w, nw in zip(self.weights, nabla_w)]
    self.biases = [b-(eta/len(mini_batch))*nb
                   for b, nb in zip(self.biases, nabla_b)]
</code></pre>
<p>I understand what tuples and lists are and I understand what the zip function is doing but I don't understand how the variables nb, dnb, nw, and dnw are updated on these 2 lines of code:</p>
<pre><code>        nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
        nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]
</code></pre>
<p>Can anyone help explain the magic going on in these 2 lines?</p>
</div>
<div class="post-text" itemprop="text">
<p>These 2 lines are typical examples of Python <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>.</p>
<p>In essence, for your first list:</p>
<pre><code>nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
</code></pre>
<p>this means:</p>
<ol>
<li>Take the 1st pair from <code>zip(nabla_b, delta_nabla_b)</code>; name them <code>nb</code> and <code>dnb</code></li>
<li>add them (<code>nb+dnb</code>)</li>
<li>make the result the 1st element of new list <code>nabla_b</code></li>
<li>Go to step one for the 2nd pair etc appending the results to <code>nabla_b</code>, until all pairs from <code>zip(nabla_b, delta_nabla_b)</code> have been exhausted</li>
</ol>
<p>As a simple example, the list comprehension below:</p>
<pre><code>squares = [x**2 for x in range(10)]
print(squares)
# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p>is equivalent with the following <code>for</code> loop:</p>
<pre><code>squares = []

for x in range(10):
    squares.append(x**2)

print(squares)
# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p>See <a href="https://www.pythonforbeginners.com/basics/list-comprehensions-in-python" rel="nofollow noreferrer">here</a> for more examples and a quick introduction.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>zip</code> function sticks the two lists together element by element, so that if you gave it:</p>
<pre><code>a = [1, 2, 3, 4]
b = ["a", "b", "c", "d"]
</code></pre>
<p><code>zip(a, b)</code> would return:</p>
<pre><code>[(1, "a"), (2, "b"), ...]
</code></pre>
<p>(each element being a <code>tuple</code>)</p>
<p>You can unpack elements of <code>list</code>s that are <code>tuple</code>s (or <code>list</code>s) using the a comma between each variable in the element <code>tuple</code>:</p>
<pre><code>for elem_a, elem_b in zip(a, b):
    print(elem_a, elem_b)
</code></pre>
<p>This would print:</p>
<pre><code>1 a
2 b
3 c
4 d
</code></pre>
<p>So in your case, it's adding the two lists <code>nabla_b</code> and <code>delta_nabla_b</code> elementwise, so you get one list with each element being the sum of the corresponding elements in the zipped lists.</p>
<p>It might look a bit strange because the <code>for</code> loop is all on one line, but this is called a "list comprehension". Simple list comprehensions read like English.</p>
</div>
<span class="comment-copy">Welcome to StackOverflow! Please clarify: a) you mean a chapter from <a href="http://neuralnetworksanddeeplearning.com" rel="nofollow noreferrer">neuralnetworksanddeeplearning.com</a>? Which? b) <code>np</code> is <code>numpy</code>?</span>
<span class="comment-copy">Are you (a) not understanding how <code>for</code> can appear inside a list: <code>[x for y in z]</code>, or (b) how two names can be assigned simultaneously: <code>for a, b in x</code>?</span>
<span class="comment-copy">I would like clarification on <code>nb+dnb for nb</code> and <code>dnb in zip(nabla_b, delta_nabla_b)</code> separately to start.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/10867882/tuple-unpacking-in-for-loops">Tuple unpacking in for loops</a></span>
<span class="comment-copy">Ahhh, I got it now. Thank you. My confusion was treating <code>nb+dnb for nb</code> and <code>dnb in zip(nabla_b, delta_nabla_b)</code> as separate statements that would somehow return a list of 2 elements into nabla_b. This is not correct at all.</span>
<span class="comment-copy">You just overlooked the comprehension part, which I believe is part of OP's misunderstanding. +1 though, although you simplified (maybe not on purpose) the behaviour of <code>zip</code>. It only returns a list in Python 2, while it returns a <code>zip</code> object (ie a generator) in Python 3 - still, I find it much more reasonable to present it as you did to a newcomer.</span>
<span class="comment-copy">@Rightleg I concur - I chose to focus on the list comprehension part myself since OP made explicit that "I understand what the zip function is doing"...</span>
<span class="comment-copy">Yes I always miss the crux of the question and go off on tangents. I only outlined explicitly what zip was doing because that was necessary to explain the unpacking in my view.</span>
