<div class="post-text" itemprop="text">
<p>Is there a way to convert a string from uppercase, or even part uppercase to lowercase? </p>
<p>For example, "Kilometers" → "kilometers".</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>.lower()</code> - For example:</p>
<pre><code>s = "Kilometer"
print(s.lower())
</code></pre>
<p>The official 2.x documentation is here: <a href="https://docs.python.org/2/library/stdtypes.html?highlight=str.lower#str.lower" rel="noreferrer"><code>str.lower()</code></a><br/>
The official 3.x documentation is here: <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str.lower#str.lower" rel="noreferrer"><code>str.lower()</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 2, this doesn't work for non-English words in UTF-8. In this case <code>decode('utf-8')</code> can help:</p>
<pre><code>&gt;&gt;&gt; s='Километр'
&gt;&gt;&gt; print s.lower()
Километр
&gt;&gt;&gt; print s.decode('utf-8').lower()
километр
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>How to convert string to lowercase in Python?</h1>
<p>Is there any way to convert an entire user inputted string from uppercase, or even part uppercase to lowercase? </p>
<p>E.g. Kilometers --&gt; kilometers</p>
</blockquote>
<p>The canonical Pythonic way of doing this is </p>
<pre><code>&gt;&gt;&gt; 'Kilometers'.lower()
'kilometers'
</code></pre>
<p>However, if the purpose is to do case insensitive matching, you should use case-folding:</p>
<pre><code>&gt;&gt;&gt; 'Kilometers'.casefold()
'kilometers'
</code></pre>
<p>Here's why:</p>
<pre><code>&gt;&gt;&gt; "Maße".casefold()
'masse'
&gt;&gt;&gt; "Maße".lower()
'maße'
&gt;&gt;&gt; "MASSE" == "Maße"
False
&gt;&gt;&gt; "MASSE".lower() == "Maße".lower()
False
&gt;&gt;&gt; "MASSE".casefold() == "Maße".casefold()
True
</code></pre>
<p>This is a str method in Python 3, but in Python 2, you'll want to look at the PyICU or py2casefold - <a href="https://stackoverflow.com/q/18271077/541136">several answers address this here</a>.</p>
<h2>Unicode Python 3</h2>
<p><a href="https://docs.python.org/3/howto/unicode.html" rel="noreferrer">Python 3</a> handles plain string literals as unicode:</p>
<pre><code>&gt;&gt;&gt; string = 'Километр'
&gt;&gt;&gt; string
'Километр'
&gt;&gt;&gt; string.lower()
'километр'
</code></pre>
<h2>Python 2, plain string literals are bytes</h2>
<p>In Python 2, the below, pasted into a shell, encodes the literal as a string of bytes, using <a href="https://docs.python.org/2/library/codecs.html#python-specific-encodings" rel="noreferrer"><code>utf-8</code></a>.</p>
<p>And <code>lower</code> doesn't map any changes that bytes would be aware of, so we get the same string. </p>
<pre><code>&gt;&gt;&gt; string = 'Километр'
&gt;&gt;&gt; string
'\xd0\x9a\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80'
&gt;&gt;&gt; string.lower()
'\xd0\x9a\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80'
&gt;&gt;&gt; print string.lower()
Километр
</code></pre>
<p>In scripts, Python will object to non-ascii (as of Python 2.5, and warning in Python 2.4) bytes being in a string with no encoding given, since the intended coding would be ambiguous. For more on that, see the Unicode how-to in the <a href="https://docs.python.org/2/howto/unicode.html#unicode-literals-in-python-source-code" rel="noreferrer">docs</a> and <a href="https://www.python.org/dev/peps/pep-0263/" rel="noreferrer">PEP 263</a></p>
<h3>Use Unicode literals, not <code>str</code> literals</h3>
<p>So we need a <code>unicode</code> string to handle this conversion, accomplished easily with a unicode string literal, which disambiguates with a <code>u</code> prefix (and note the <code>u</code> prefix also works in Python 3):</p>
<pre><code>&gt;&gt;&gt; unicode_literal = u'Километр'
&gt;&gt;&gt; print(unicode_literal.lower())
километр
</code></pre>
<p>Note that the bytes are completely different from the <code>str</code> bytes - the escape character is <code>'\u'</code> followed by the 2-byte width, or 16 bit representation of these <code>unicode</code> letters:</p>
<pre><code>&gt;&gt;&gt; unicode_literal
u'\u041a\u0438\u043b\u043e\u043c\u0435\u0442\u0440'
&gt;&gt;&gt; unicode_literal.lower()
u'\u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440'
</code></pre>
<p>Now if we only have it in the form of a <code>str</code>, we need to convert it to <code>unicode</code>. Python's Unicode type is a universal encoding format that has many <a href="https://en.wikipedia.org/wiki/UTF-8#Advantages_and_disadvantages" rel="noreferrer">advantages</a> relative to most other encodings. We can either use the <code>unicode</code> constructor or <code>str.decode</code> method with the codec to convert the <code>str</code> to <code>unicode</code>:</p>
<pre><code>&gt;&gt;&gt; unicode_from_string = unicode(string, 'utf-8') # "encoding" unicode from string
&gt;&gt;&gt; print(unicode_from_string.lower())
километр
&gt;&gt;&gt; string_to_unicode = string.decode('utf-8') 
&gt;&gt;&gt; print(string_to_unicode.lower())
километр
&gt;&gt;&gt; unicode_from_string == string_to_unicode == unicode_literal
True
</code></pre>
<p>Both methods convert to the unicode type - and same as the unicode_literal.</p>
<h2>Best Practice, use Unicode</h2>
<p>It is recommended that you always <a href="https://docs.python.org/2/howto/unicode.html#tips-for-writing-unicode-aware-programs" rel="noreferrer">work with text in Unicode</a>.</p>
<blockquote>
<p>Software should only work with Unicode strings internally, converting to a particular encoding on output.</p>
</blockquote>
<h2>Can encode back when necessary</h2>
<p>However, to get the lowercase back in type <code>str</code>, encode the python string to <code>utf-8</code> again:</p>
<pre><code>&gt;&gt;&gt; print string
Километр
&gt;&gt;&gt; string
'\xd0\x9a\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80'
&gt;&gt;&gt; string.decode('utf-8')
u'\u041a\u0438\u043b\u043e\u043c\u0435\u0442\u0440'
&gt;&gt;&gt; string.decode('utf-8').lower()
u'\u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440'
&gt;&gt;&gt; string.decode('utf-8').lower().encode('utf-8')
'\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80'
&gt;&gt;&gt; print string.decode('utf-8').lower().encode('utf-8')
километр
</code></pre>
<p>So in Python 2, Unicode can encode into Python strings, and Python strings can decode into the Unicode type.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do what <a href="https://stackoverflow.com/questions/6797984/how-to-convert-string-to-lowercase-in-python/6797990#6797990">Peter said</a>, or if you want the user to input something you could do the below code:</p>
<pre><code>raw_input('Type Something').lower()
</code></pre>
<p>It will then automatically convert the string they typed into lowercase.</p>
<p><em>Note: <code>raw_input</code> was renamed to <code>input</code> in Python 3.x and above.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Also, you can overwrite some variables:</p>
<pre><code>s = input('UPPER CASE')
lower = s.lower()
</code></pre>
<p>If you use like this:</p>
<pre><code>s = "Kilometer"
print(s.lower())     - kilometer
print(s)             - Kilometer
</code></pre>
<p>It will work just when called.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't try this, totally un-recommend, don't do this:</p>
<pre><code>import string
s='ABCD'
print(''.join([string.ascii_lowercase[string.ascii_uppercase.index(i)] for i in s]))
</code></pre>
<p>Output:</p>
<pre><code>abcd
</code></pre>
<p>Since no one wrote it yet you can use <code>swapcase</code> (so uppercase letters will become lowercase, and vice versa) (and this one you should use in cases where i just mentioned (convert upper to lower, lower to upper)):</p>
<pre><code>s='ABCD'
print(s.swapcase())
</code></pre>
<p>Output:</p>
<pre><code>abcd
</code></pre>
</div>
<span class="comment-copy">Perhaps we should be a bit more explicit by saying that the <code>decode('utf-8')</code> is not only unnecessary in Python 3, but causes an error. (<a href="https://stackoverflow.com/q/28583565/6505499">ref</a>). Example: <code>$python3;     &gt;&gt;&gt;s='Километр';   &gt;&gt;&gt;print (s.lower);   #result: километр   &gt;&gt;&gt;s.decode('utf-8').lower();   #result: ...AttributeError: 'str' object has no attribute 'decode'</code> We can see a second way to do this, referencing the excellent answer of @AaronHall.   <code>&gt;&gt;&gt;s.casefold()   #result: километр</code></span>
<span class="comment-copy">This is the most complete, portable answer. In my opinion, it should be the correct one. Thanks especially for the, "However, if the purpose is to do case insensitive matching, you should use case-folding" +1</span>
<span class="comment-copy">I have one note that doesn't necessarily apply to the OP's question, but which is important with portability (internationalization) when doing case insensitive matching. With case-insensitive matching, diacritics (accent marks) may become a concern. Example: <code>&gt;&gt;&gt; "raison d'être".casefold(); "raison d'être"</code> Check out <a href="https://stackoverflow.com/a/2633310/6505499">this answer</a> about <code>unidecode</code></span>
<span class="comment-copy">Note that there is no "or" about this, it's not a different technique. <code>input()</code> returns a string, which you can then apply string methods onto, just like Petar demonstrated.</span>
<span class="comment-copy">Unnecessary expansion of question; this is just about the lowercase and not the input</span>
<span class="comment-copy">Question is how to transform string to lowercase. How this answer got so many up-votes?</span>
<span class="comment-copy"><code>s=s.lower()</code> is the way to go.</span>
