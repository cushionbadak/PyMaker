<div class="post-text" itemprop="text">
<p>I am running a query through python in aws and getting the sql results in tuples which consists of datetime objects.</p>
<p>sample record:</p>
<pre><code>'('BlaBla', '20190212', 'Blabla', 'job_name', 
  datetime.datetime(2019, 2, 13, 18, 4, 41),
  datetime.datetime(2019, 2, 13, 18, 4, 43))'
</code></pre>
<p>I using a logic on the above record and converting to the below</p>
<pre><code>['BlaBla', '20190212', 'BlaBla', 'jobname', 
 '2019-02-13 14:26:49',
 '2019-02-13 14:26:52']
</code></pre>
<p>FYI, the times are not the same, i pasted the second record as a sample. The time is in GMT</p>
<p>Now i have a list of tuples , How do i convert the tuple's datetime objects into PST?</p>
<p>I have looked into astimezone function but i am getting </p>
<pre><code>ValueError: astimezone() cannot be applied to a naive datetime
</code></pre>
<p>also i tried</p>
<pre><code>d = local_tz.localize(datetime(2019, 2, 13, 17, 1, 27),is_dst=None)
</code></pre>
<p>getting errors, Nothing seems to be working..</p>
<pre><code>TypeError: 'module' object is not callable
</code></pre>
<p>Any help would be really appreciated..</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's my solution based off the python <a href="https://docs.python.org/3/library/datetime.html#datetime.timezone" rel="nofollow noreferrer">documentation</a>. I'm wondering if I'm missing something somewhere though, having to create all these tzinfo subclasses from scratch. I would expect them to be part of the datetime library to be honest.</p>
<pre><code>from datetime import tzinfo, timedelta, datetime

ZERO = timedelta(0)
HOUR = timedelta(hours=1)

# A UTC class.

class UTC(tzinfo):
    """UTC"""

    def utcoffset(self, dt):
        return ZERO

    def tzname(self, dt):
        return "UTC"

    def dst(self, dt):
        return ZERO

class PST(tzinfo):
    """PST"""

    def utcoffset(self, dt):
        return timedelta(hours=8) + self.dst(dt)

    def tzname(self, dt):
        return "PST"

    def dst(self, dt):
        # DST starts last Sunday in March
        d = datetime(dt.year, 4, 1)   # ends last Sunday in October
        self.dston = d - timedelta(days=d.weekday() + 1)
        d = datetime(dt.year, 11, 1)
        self.dstoff = d - timedelta(days=d.weekday() + 1)
        if self.dston &lt;=  dt.replace(tzinfo=None) &lt; self.dstoff:
            return timedelta(hours=1)
        else:
            return timedelta(0)

utc = UTC()
pst = PST()

&gt;&gt;&gt;dt1 = datetime(2019,2,13,14,26,49, tzinfo=utc)
datetime.datetime(2019, 2, 13, 14, 26, 49, tzinfo=&lt;dtime_test.UTC object at 0x00000180AF6F1F60&gt;)

&gt;&gt;&gt;dt1.astimezone(pst)
datetime.datetime(2019, 2, 13, 22, 26, 49, tzinfo=&lt;dtime_test.PST object at 0x00000180AF934080&gt;)
</code></pre>
</div>
<span class="comment-copy">Can you provide full error responses</span>
<span class="comment-copy">Thanks Jaba for response :) I have used the below function.      def gmt_pst(time_stmp):         time_stmp = time_stmp - datetime.timedelta(hours=8)         return time_stmp But i would like to use astimezone because of timezones</span>
<span class="comment-copy">are you in GMT+8?</span>
<span class="comment-copy">No , My Timezone is UTC</span>
<span class="comment-copy">Sorry, I was referring to your db timezone. Is that GMT+0 then?</span>
<span class="comment-copy">Did a little bit more searching. There's a 3rd party library called <a href="http://pytz.sourceforge.net/" rel="nofollow noreferrer">pytz</a> that allows you to avoid creating the tzinfo subclasses</span>
<span class="comment-copy">Thank you, Honestly your code is well above on my head. I am very new to Py Actually i have a list of tuples   a_list=['blabla' , '20190201','blablah','job_name','2019-02-13 16:55:55','2019-02-13 22:01:02'],['blabla' , '20190201','blablah','job_name','2019-02-13 18:30:55','2019-02-13 20:01:02']  in the above record a_list{4] and a_list[5] are in UTC, because i am running the  sql query in AWS cluster which has UTC TZ  I am trying to get a record like  'blabla' , '20190201','blablah','job_name','2019-02-13 16:55:55','2019-02-13 22:01:02'] here a_list[4] and a_list[5] should be in pst</span>
<span class="comment-copy">In that case, before you convert your tuple into a list, add one more step to inject the tzinfo into the datetime object and convert it to pst first. Unpack your tuple to extract the datetime object and then 1.<code>dt_utc = datetime_object.replace(tzinfo=utc)</code> 2. <code>dt_pst = dt_utc.astimezone(pst)</code> . You can then proceed to construct your list after that using <code>dt_pst</code></span>
