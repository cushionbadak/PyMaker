<div class="post-text" itemprop="text">
<p>I'm looking for a way to create multiple lists from one large list.</p>
<p>What I want to do is to filter out different digit groups (amounts of fruits sold each week) form a list. Each group of digits should be in a separate list when it hits '******' string that indicates where each group should end.</p>
<pre><code>Example list:

['apples', '1000', '2000', '2500', '******', 'oranges', '5000', '150', '******']
</code></pre>
<p>So far I've got this:</p>
<pre><code>list = []
for i in mainList:
        if i.isdigit():
            list.append(i)
    print(list)
</code></pre>
<p>However, my code prints everything in one list like that:</p>
<pre><code>#Ouput = ['1000', '2000', '2500', '5000', '150'] 
</code></pre>
<p>How can divide the output into separate lists so that each fruit group is printed in a separate "blocks" and all of them are part of a larger list?</p>
<p>The result I'm looking for should look like this:</p>
<pre><code>[['1000', '2000', '2500'], ['5000', '150']]
</code></pre>
<p>So far I've tried this:</p>
<pre><code>for i in mainList:
   if '******' in i:
       break
   if i != '******':
       result.append(i)
</code></pre>
<p>But this returns the same list and I was expecting it to break the loop at the first <code>'******'</code> breakpoint. I am struggling to separate each part of the list after the <code>'******'</code> delimiter.</p>
<p>I'd appreciate any help I can get.</p>
</div>
<div class="post-text" itemprop="text">
<p>The most <em>pythonic</em> way I can think of is to use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer">itertools.groupby</a>:</p>
<pre><code>from itertools import  groupby

lst = ['apples', '1000', '2000', '2500', '******', 'oranges', '5000', '150', '******']

result = [list(group) for k, group in  groupby(lst, key=str.isdigit) if k]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['1000', '2000', '2500'], ['5000', '150']]
</code></pre>
<p>As an alternative you could use a for loop:</p>
<pre><code>result = []
start = True
for element in lst:
    if start and element.isdigit():  # start group
        result.append([element])
        start = False
    elif element.isdigit():  # just append to current group
        result[-1].append(element)
    else:  # close group
        start = True

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['1000', '2000', '2500'], ['5000', '150']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use <code>for</code> loops, this will work, if it is guaranteed that the list will have the proper format.</p>
<pre><code>mylist = ['apples', '1000', '2000', '2500', '******', 'oranges', '5000', '150', '******']
terminator = '******'

result = []
sublist = []
for item in mylist:
    if item == terminator:
        result.append(sublist)
        sublist = []
    elif item.isdigit():
        sublist.append(item)

print(result)
</code></pre>
<p>The printout from that is what you wanted:</p>
<pre><code>[['1000', '2000', '2500'], ['5000', '150']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, try this: </p>
<pre><code>mylst = ['apples', '1000', '2000', '2500', '******', 'oranges', '5000', '150', '******']

finallst = []
digits = []

for i in mylst:
  if i.isdigit():
    digits.append(i)
  else:
    digits = []
  if digits not in finallst and digits:
    finallst.append(digits)

print(finallst)
</code></pre>
<p>What I am doing there is:</p>
<ul>
<li>Taking a temporary list to store the digits in it.</li>
<li>Taking the final list and appending the existing list of digits to
it.</li>
<li>Once I find the list element which is not int, I empty the list so
that we can reuse it with next elements.</li>
</ul>
</div>
<span class="comment-copy">Are you open to a dictionary keyed by the fruit name?</span>
<span class="comment-copy">No, I'm supposed to use loops for that.</span>
<span class="comment-copy">OP is skipping the fruit names in their example.</span>
<span class="comment-copy">I'm looking to extract just the digits. Like this: [['1000', '2000', '2500'], ['5000', '150']]</span>
<span class="comment-copy">I have edited the answer, so only the digits remain now.</span>
