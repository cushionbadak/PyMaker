<div class="post-text" itemprop="text">
<p>I am pretty new to Python and am tackling OOP. I am a bit confused as to when to use calls to methods and classes. The sample code below outputs the average, however I am curious as to when you would use calling from the Class vs methods from a real-world perspective. I'm pretty sure this is just something that I may have yet to tackle, but it's just been a bit of a confusion as to when I would use one over the other.</p>
<pre><code>class Student:
    def __init__(self, new_name, new_grades):
        self.name = new_name
        self.grades = new_grades

    def average(self):
        return sum(self.grades) / len(self.grades)

student_one = Student('Test User', [70, 88, 90, 99])

# object.method()
print(student_one.average())

# Class.method(object)
print(Student.average(student_one))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your example, there is no difference. <strong>Use the first way.</strong> The second way makes it appear as though you need to use "the back door" for some reason, for example if <code>type(student_one) is not Student</code> but you wanted to specifically call the <code>average</code> method of the <code>Student</code> class.</p>
<p>For what's going on behind the scenes, the first way uses a <a href="https://docs.python.org/3/glossary.html#term-method" rel="nofollow noreferrer"><em>bound method</em></a> and the second way just uses a normal <a href="https://docs.python.org/3/glossary.html#term-function" rel="nofollow noreferrer">function</a>.</p>
<pre><code>&gt;&gt;&gt; Student.average
&lt;function __main__.Student.average(self)&gt;
&gt;&gt;&gt; student_one.average 
&lt;bound method Student.average of &lt;__main__.Student object at 0xcafef00d&gt;&gt;
</code></pre>
<p>A bound method is just a function which is bound to an instance, via <a href="https://docs.python.org/3/reference/datamodel.html#invoking-descriptors" rel="nofollow noreferrer">descriptor protocol</a>*, and the instance ("self") is passed as the first positional argument implicitly:</p>
<pre><code>&gt;&gt;&gt; student_one.average.__self__ is student_one 
True
&gt;&gt;&gt; student_one.average.__func__ is Student.average 
True
</code></pre>
<p>By using the function on the class and passing in the instance explicitly, you essentially do the same thing as an invocation of the descriptor does automatically.</p>
<p>For a deeper understanding of what a method is, there's detailed documentation of this binding process in the docs <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">here</a>.</p>
<p>*<sub> Just a fancy way of saying via the "." i.e. the dotted attribute access</sub></p>
</div>
<span class="comment-copy">They are functionally equivalent. Strictly speaking <code>object.method()</code> is calling a bound method in <code>object</code>. The <code>class</code> call is using an unbound method but explicitly passing in the object. If you are manipulating instance state always use, <code>object.method()</code>... reserve <code>class.method()</code> for <a href="https://docs.python.org/3/library/functions.html?highlight=classmethod#classmethod" rel="nofollow noreferrer"><code>@classmethod</code></a> or <a href="https://docs.python.org/3/library/functions.html?highlight=staticmethod#staticmethod" rel="nofollow noreferrer"><code>@staticmethod</code></a> functions.</span>
<span class="comment-copy">You would always use <code>student_one.average()</code></span>
<span class="comment-copy">The "back door" explanation is very helpful. So it seems like I would only want to call from the class if there are any instances that would require me to access the average method (perhaps to do a similar calculation for those that are not a student). object.method() it is!</span>
<span class="comment-copy">@AntonioSaqueton Yes, you got it.</span>
