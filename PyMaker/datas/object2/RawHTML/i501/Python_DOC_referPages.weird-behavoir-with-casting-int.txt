<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44891070/whats-the-difference-between-str-isdigit-isnumeric-and-isdecimal-in-python">What's the difference between str.isdigit, isnumeric and isdecimal in python?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I am using Python 3.6.3 and I encounter a weird behavior from <code>int()</code> and <code>isdigit()</code> with the following code: </p>
<pre><code>s = "..... not less than 66²/ 3 % of ......"
total = 0
for c in s:
    if c.isdigit():
        total += int(c)

ValueError: invalid literal for int() with base 10: '²'
</code></pre>
<p>I understand the bug and I know that I can skip the error with <code>try catch</code>. My question is that if <code>isdigit()</code> return true then the char\string should be cast without error or <code>isdigit()</code> should return false. Otherwise said <code>int()</code> and <code>isdigit()</code> should be coherent.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is exactly <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">as documented</a>:</p>
<blockquote>
<p><code>str.isdigit()</code> Return true if all characters in the string are digits
  and there is at least one character, false otherwise. Digits include
  decimal characters and digits that need special handling, such as the
  compatibility superscript digits. This covers digits which cannot be
  used to form numbers in base 10, like the Kharosthi numbers. Formally,
  a digit is a character that has the property value Numeric_Type=Digit
  or Numeric_Type=Decimal.</p>
</blockquote>
</div>
<span class="comment-copy">Actually, <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer"><code>isdigit</code></a> is documented to work in exactly this case</span>
<span class="comment-copy">This is so unbelievable that it feels like a bug but it actually makes sense. Duplicate of <a href="https://stackoverflow.com/questions/44891070/whats-the-difference-between-str-isdigit-isnumeric-and-isdecimal-in-python">this</a> (kind of)</span>
<span class="comment-copy">Why do you believe this to be the case? As noted, the documentation explicitly states otherwise.</span>
<span class="comment-copy">Don't know if it's viable but technically I guess you could use a regex to turn superscripts to <code>**n</code> then your algorithm my be easier to implement. Or even just in the case of superscripts use pythonic exponential notation. <code>**n</code></span>
<span class="comment-copy">@juanpa.arrivillaga I hold my hands up as guilty for having taken this method on face value. At least for me, it was too easy to feel I implicitly knew what it did; the corner case being that it wouldn't work with negative numbers for <code>all()</code> etc. Considering the rapid upvotes, I have a feeling there's a lot of code out there than can be crashed with this, explicitly documented or not :P</span>
<span class="comment-copy">This makes it clear ... but it's very annoying ...  even I tried with re.match([0-9]+, c) and I still get the same behavior ... is there a method that rejects those digits, or a method that can cast them?</span>
<span class="comment-copy"><code>re.match([0-9]+, c)</code> should work <code>c in "1234567890"</code> too as well as <code>c.isdecimal()</code></span>
<span class="comment-copy">I like where @Gha93 is headed by asking if there could be a replacement for using <code>int</code> here there's gotta be a way to marry <code>isdigit</code> with a corresponding method.</span>
<span class="comment-copy">@Gha93 it depends what you want to do, but <code>all(c in '1234567890' for c in '66²')</code> might suffice</span>
<span class="comment-copy">Right, We should make it clear that <code>try: int(s); catch ValueError:</code> is the correct way of handling this. Some people don't like <code>try/catch</code> but it is the most Pythonic way.</span>
