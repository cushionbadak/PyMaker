<div class="post-text" itemprop="text">
<p>Hi the purpose of my code is to find average and variance in a list of lists. The constraint is: if in "linesort" there are two or more lists with the first two equal elements calculate the average of the third element adding the lists. My problem is to include the calculation of the variance as well as the average and to return a list containing [a, b, mean, variance].
Thank you so much in advance.</p>
<pre><code>linesort = [[1, 2, 3.00], [1, 2, 5.00], [1, 4, 7.00], [1, 4, 3.00] ,[3, 6, 5.2]]
new = []
final = []
count=0
for el in linesort:
    new.append(el[:-1])

tnew = [tuple(t) for t in new]
setnew = set(tnew)
setnew = [list(t) for t in setnew]

for items in setnew:
    inds = [i for i,x in enumerate(new) if x == items]
    if len(inds) &gt; 1:
        somma = 0
        for ind in inds:
            print(somma)
            somma = linesort[ind][2] + somma
        media = somma/len(inds)
        items.append(media)
        final.append(items)
print(final)
</code></pre>
<p>Desired Output:</p>
<pre><code>('Output: ', [[1, 2, 4.0,1.0], [1, 4, 5.0,4.0]])

</code></pre>
<p>As for the variance I thought about this line of code but I can not make it work.</p>
<pre><code>variance = float(sum((linesort[ind][2] - media) ** 2 for linesort[ind][2] in linesort) / len(linesort))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make the code simpler by first reorganising the data in a dict, with the tuples of the first two elements as keys and the corresponding values in a list.</p>
<p>You can use a <code>defaultdict</code> to make that easier.</p>
<p>Then, we just have to calculate the mean and variance for each of these lists.</p>
<pre><code>from collections import defaultdict

linesort = [[1, 2, 3.00], [1, 2, 5.00], [1, 4, 7.00], [1, 4, 3.00] ,[3, 6, 5.2]]

# Let's first group the values: 

d = defaultdict(list)
for x, y, val in linesort:
    d[(x, y)].append(val)

# d will be: {(1, 2): [3.0, 5.0], (1, 4): [7.0, 3.0], (3, 6): [5.2]}    
# Now we can build the output list:

out = []
for (x, y), values in d.items():
    n = len(values)
    mean = sum(values)/n
    variance = sum(x**2 for x in values)/n - mean**2
    out.append([x, y, mean, variance])

print(out)
# [[1, 2, 4.0, 1.0], [1, 4, 5.0, 4.0], [3, 6, 5.2, 0.0]]
</code></pre>
<hr/>
<p>To answer your comment:</p>
<p>If you want to omit the cases where you have only one value, just change the last part to:</p>
<pre><code>for (x, y), values in d.items():
    n = len(values)
    if n &gt; 1:
        mean = sum(values)/n
        variance = sum(x**2 for x in values)/n - mean**2
        out.append([x, y, mean, variance])
</code></pre>
</div>
<span class="comment-copy">Your choice in variable names makes this code hard to trace. "<a href="https://www.python.org/dev/peps/pep-0020/#id3" rel="nofollow noreferrer">explicit is better than implicit</a>" - <i>The Zen of Python</i> please maybe add some comments in your code or explain more detail about what and where this program isn't working.</span>
<span class="comment-copy">Take a look at the <code>statistics</code> module (<a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">docs.python.org/3/library/statistics.html</a>). It has a <code>variance()</code> function.</span>
<span class="comment-copy">ok thanks a lot, I'm new to both python and stackoverflow. I recommend the advice.</span>
<span class="comment-copy">Surely I will have explained myself badly. The mean and the variance must be calculated only if the first element and the second element are equal. So the correct output must be without the last list [3, 6, 5.2, 0.0]</span>
<span class="comment-copy">Thanks so much. You solved my problem and also in a much more efficient way.</span>
