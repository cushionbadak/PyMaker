<div class="post-text" itemprop="text">
<p>I am needing a function that will increment by one every time it is called. I have used count but every time I do it resets the count back to the original value plus one count. I have seen lots of code but none of it works. Here is what I have now</p>
<p>I have done lots of looking into loops and iterations </p>
<pre><code>def count_row():
    count = 1  
    while count &gt;= 1:
        yield count
        count += 1 
return count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.count</code>.</p>
<pre><code>from itertools import count

counter = count(1)
next(counter) # 1
next(counter) # 2
</code></pre>
<h2>Stateful function</h2>
<p>If you absolutely want a stateful function instead of calling <code>next</code>, you can wrap the <code>count</code> in a function.</p>
<pre><code>def counter(_count=count(1)):
    return next(_count)

counter() # 1
counter() # 2
</code></pre>
<h2>Class</h2>
<p>Alternatively, <code>itertools.count</code> being a class, you can inherit from it to extend it's behaviour and make it a callable. </p>
<pre><code>class CallableCount(count):
    def __call__(self):
        return next(self)

counter = CallableCount(1)

counter() # 1
counter() # 2
</code></pre>
<p>Using a class should be your preferred approach since it allows instantiating multiple counters.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a closure. Define a function <code>make_counter</code> which initializes a local variable, then defines and returns a function that increments that variable on each call.</p>
<pre><code>def make_counter():
    count = -1
    def _():
        count += 1
        return count
    return _

count_row = make_counter()
</code></pre>
<p>Now <code>count_row</code> will return a new value on each call:</p>
<pre><code>&gt;&gt;&gt; count_row()
0
&gt;&gt;&gt; count_row()
1
</code></pre>
<p>This is sort of the dual of a class. You have a function that "wraps" some data (<em>closes</em> over the variable), instead of a piece of data with an associated method. The class version; note the similarity to <code>make_counter</code>:</p>
<pre><code>class Count:
    def __init__(self):
        self.count = -1

    def __call__(self):
        self.count += 1
        return count
</code></pre>
<p>An instance of this class now behaves like our previous closure.</p>
<pre><code>&gt;&gt;&gt; count_row = Count()
&gt;&gt;&gt; count_row()
0
&gt;&gt;&gt; count_row()
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator here that increments value by one every time it's called using <code>next()</code>:</p>
<pre><code>def count_row():
    count = 0
    while True:
        count += 1
        yield count

itr = count_row()

print(next(itr))  # 1
print(next(itr))  # 2
</code></pre>
<p>If you look closely, this is equivalent to what <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count()</code></a> does.</p>
</div>
<div class="post-text" itemprop="text">
<p>if I got this right this should work:</p>
<pre><code>count=0
def count_row(count): 
    count += 1 
    return count
</code></pre>
</div>
<span class="comment-copy">In order for <code>count</code> to return +1 in each call it has to "remember" the last value. Or in other words you need some state shared between calls. Does this help?</span>
<span class="comment-copy">Yes that makes perfect sense but I just don't know how to do that.</span>
<span class="comment-copy">What else does this function do besides return an ever-increasing number? You might want to look into the <code>enumerate</code> function, which lets you pair an increasing number with a value from an iterator. <code>enumerate(some_list)</code> is roughly the same as <code>zip(range(0, len(some_list)), some_list)</code>.</span>
<span class="comment-copy">The idea is to use this with xlwings to iterate down excel rows and based on the cell value use a formula to insert data.</span>
<span class="comment-copy">Evertime i go to call the function it only shows 1</span>
<span class="comment-copy">Are you sure you call this exact code? If so what is your Python version?</span>
<span class="comment-copy">Yes, I copied and pasted to make sure. Python 3.7.1</span>
<span class="comment-copy">@nmhammer It works on both Python 3.6 and 3.7. You are probably not running the script you are looking at or you did not import itertools.count and are using another value named count. See this repl: <a href="https://repl.it/@omelancon/callableCounter" rel="nofollow noreferrer">repl.it/@omelancon/callableCounter</a></span>
<span class="comment-copy">here is the latest attempt <a href="https://repl.it/@nmhammer2/LikelyDeliriousNamebinding" rel="nofollow noreferrer">repl.it/@nmhammer2/LikelyDeliriousNamebinding</a> . I am using this code with xlwings.</span>
<span class="comment-copy">I call the coun_row() later on and I get an error that states missing 1 required positional argument count</span>
<span class="comment-copy">@nmhammer you shold call it like this ¨count_row(count)¨ and you probably called like this ¨count_row()¨</span>
