<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4568580/python-glob-multiple-filetypes">Python glob multiple filetypes</a>
<span class="question-originals-answer-count">
                    26 answers
                </span>
</li>
</ul>
</div>
<p>I have a folder containing files in different types. I only need to deal with image files (jpg, png, jpeg, JPG, ...). For that, I use <code>glob.glob</code> to get only files with 'jpg', 'png', ... extensions.<br/>
The problem is that I have to use <code>glob.glob</code> many times (as much as the image extensions number) to get all the images:  </p>
<pre><code>import glob
images = glob.glob('tests/*.jpg') + glob.glob('tests/*.jpeg') + glob.glob('tests/*.png') + glob.glob('tests/*.JPG')  
</code></pre>
<p>Is there a way to use <code>glob.glob</code> in a more optimized form (something like <code>glob.glob('path/*.{'jpg', 'png', 'jpeg', 'JPG'}</code>) or is there a simpler function to use it instead of <code>glob</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot do complex wildcard globbing like <code>glob.glob('*.{JPG, png..})</code> because,
if you take a look at the source code you will see,</p>
<pre><code>def glob(pathname):
    """Return a list of paths matching a pathname pattern.
    ....
    """
    return list(iglob(pathname))
</code></pre>
<p>And then if you find the source of <code>iglob</code> you will then see,</p>
<pre><code>def iglob(pathname):
    ....
    ....
    dirname, basename = os.path.split(pathname)

    # voila, here, our complex glob wildcard will certainly break, and can't be used :)
</code></pre>
<p>Therefore, you can only do simple <code>glob</code>bing using <code>glob</code> :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a>:</p>
<pre><code>from pathlib import Path

extensions = ['.jpg', '.png', '.jpeg']
images = [x for x in Path('tests').iterdir() if x.suffix.lower() in extensions]
</code></pre>
</div>
<span class="comment-copy"><code>glob.glob('tests/*.{jpg, png, JPG}')</code> returns an empty list</span>
<span class="comment-copy">Sorry, looks like it only support simple shell-style wildcards</span>
<span class="comment-copy">Although you could do something like <code>[x for x in glob.glob('*') if os.path.splitext(x)[1] in ['.txt', '.jpg', '.png'] ]</code> :)</span>
<span class="comment-copy">@hansolo this kind of defeat the whole point of glob...</span>
<span class="comment-copy">IIRC glob is case-insensitive, so at the very least you can remove the check for "JPG", since "jpg" will cover that.</span>
<span class="comment-copy">When I run the code you suggested, I got this output: <code>[PosixPath('tests/a.jpg'), PosixPath('tests/b.jpg'), PosixPath('tests/d.png'), PosixPath('tests/e.jpeg'), PosixPath('tests/c.JPG')] </code>, what <code>PosixPath()</code> stands for?</span>
<span class="comment-copy">@singrium what about reading the FineManual ? <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">docs.python.org/3/library/pathlib.html</a></span>
<span class="comment-copy">These are described here: <a href="https://docs.python.org/3/library/pathlib.html#pure-paths" rel="nofollow noreferrer">docs.python.org/3/library/pathlib.html#pure-paths</a>. They are a platform independent way of representing files.</span>
<span class="comment-copy">@brunodesthuilliers, I'll take a look at the documentation. Thank you.</span>
