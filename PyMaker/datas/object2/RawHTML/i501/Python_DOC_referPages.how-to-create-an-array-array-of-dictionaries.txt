<div class="post-text" itemprop="text">
<p>What is the typecode <code>'x'</code> of a dictionary?</p>
<pre><code>dict_array = array.array('x', [dict1, dict2, dict3])
</code></pre>
<p>I don't know what to put at <code>'x'</code>. Is there another way it can be done or is it not possible? I don't want a <code>list</code> of <code>dict</code>s, I want an <code>array</code> of them.</p>
</div>
<div class="post-text" itemprop="text">
<p>A hack (which only works with CPython) would be to store a <strong>pointer</strong> to each dictionary in the <code>array</code>:</p>
<pre><code>import array
import _ctypes


def di(obj_id):
    """ Reverse of id() function. """
    # from https://stackoverflow.com/a/15012814/355230
    return _ctypes.PyObj_FromPtr(obj_id)


dict1 = {'key': '1'}
dict2 = {'key': '2'}
dict3 = {'key': '3'}

dict_array = array.array('q', map(id, [dict1, dict2, dict3]))

for i, ptr in enumerate(dict_array):
    print('dict_array[{}]: &lt;0x{:08x}&gt; {!r}'.format(i, ptr, di(ptr)))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>dict_array[0]: &lt;0x00946630&gt; {'key': '1'}
dict_array[1]: &lt;0x00946690&gt; {'key': '2'}
dict_array[2]: &lt;0x00d80660&gt; {'key': '3'}
</code></pre>
<p><strong>However</strong> @tobias_k suggested a simpler and much better (IMO) approach that uses integer dictionary keys instead of memory pointers. </p>
<p>Here's an example of doing that:</p>
<pre><code>import array

dicts = {
    0: {'key': '1'},
    1: {'key': '2'},
    2: {'key': '3'},
}

dict_array = array.array('L', dicts.keys())

for i, key in enumerate(dict_array):
    print('dict_array[{}]: {!r}'.format(i, dicts[key]))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>dict_array[0]: {'key': '1'}
dict_array[1]: {'key': '2'}
dict_array[2]: {'key': '3'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the other comments have indicated, a dictionary of dictionaries would be your best bet. You would first define your individual dictionaries like the following:</p>
<pre><code>dict1 = {1 : 'first value', 2 : 'second value'}
dict2 = {1 : 'first value', 2 : 'second value'}
dict3 = {1 : 'first value', 2 : 'second value'}
</code></pre>
<p>Then to define an array in which the keys are the indexes:</p>
<pre><code>dict_of_dicts = {1 : dict1, 2 : dict2, 3 : dict3}
</code></pre>
<p>Note: The indexes can match array notation, starting from 0, if you choose.</p>
<p>Then, you may access dictionary elements as such (in example of printing every element):</p>
<pre><code>#This will neatly print out each dictionary, and its' elements, inserting a newline after each element has been printed.
for key, value in dict_of_dicts.items():
    print('{} = {'.format(key), end='')
    for i in value:
        print(i, end='')
    print('}')
</code></pre>
<p>This is probably your best option if you do not want a list. However, if for some reason it really does need to be an array of dictionaries, then visit the link @meowgoesthedog posted.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">docs.python.org/3/library/array.html</a> – "<code>array</code> — Efficient arrays of <b><i>numeric</i></b> values"</span>
<span class="comment-copy">Or maybe using a dictionary of dictionaries? I often find that useful and easier to organize.</span>
<span class="comment-copy">If you really don't want a list, your best bet would be a dictionary of dictionaries with numeric keys.</span>
<span class="comment-copy">Pray tell, <i>why</i> do you need to use an array? a list would be the correct data structure to use. Not to mention that anyway arrays can't contain dictionaries, only numeric values!</span>
<span class="comment-copy">Depending on what OP wants to do with that array you could do the same putting the dictionaries in another dict or list and storing the index to that in the array.</span>
<span class="comment-copy">@tobias_k: Very good point—both portable and non-hacky.</span>
