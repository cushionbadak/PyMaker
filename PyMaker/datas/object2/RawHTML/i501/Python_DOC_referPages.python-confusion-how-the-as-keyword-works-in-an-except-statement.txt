<div class="post-text" itemprop="text">
<p>I have been trying to understand in general how the "as" keyword in python works so far and have learnt 3 cases for it</p>
<p>Case 1: <code>import foo as bar</code></p>
<p>Case 2: <code>with foo() as bar:</code></p>
<p>Case 3: <code>except Exception as e:</code></p>
<p>I understand how the first 2 cases work, case 1 works assigning a package name to a different name, case 2 works using <code>__entry__</code> and <code>__exit__</code> methods within a class (say for ensuring resources close), where <code>__entry__</code> returns the class <code>bar</code> is being assigned to.</p>
<p>However, case 3 seems different, I was looking through the docs which didn't seem to help and couldn't find much of an explanation anywhere. In this case <code>Exception.args</code> works differently to <code>e.args</code> and I have been trying to work out how this works behind the scenes, i.e. whatever methods may be called, or why it behaves differently</p>
</div>
<div class="post-text" itemprop="text">
<p>In the except statement to associate a name to the exception being passed, <code>as</code> keyword is used.</p>
<p>Using <code>as</code> is the only way to assign the exception to a local in Python 3.x. But it is not required. </p>
<p>In Python 2.6+, we had 2 options <code>,</code> and <code>as</code>. since <code>,</code> is ambiguous in case of multicatch, which allows you to catch multiple exceptions in one except block. <code>as</code> is the preferred option.</p>
<p>In Python 2.5 and earlier, we use the <code>,</code>for association, since <code>as</code> isn't supported. </p>
</div>
<div class="post-text" itemprop="text">
<p>The phrase <code>except A as b:</code> states that in the above <code>try</code> clause all exceptions of class <code>A</code> (or a subclass thereof) are to be caught.  The actually caught exception will be visible in the variable <code>b</code> then.</p>
<pre><code>try:
  raise KeyError('example')
except LookupError as problem:
  print("I caught %r as problem." % problem)
</code></pre>
<p>This will print</p>
<pre><code>I caught KeyError('example',) as problem.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try running this, which should make it clear.</p>
<pre><code>try:
    zero = 0
    b = 1.0 / zero
except ArithmeticError as e:
    print( "Runtime error: ", e)
</code></pre>
<p><code>ArithmeticError</code> is a Python exception class to be caught. e is an instance of that class, in this case the subclass <code>ZeroDivisionError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Calling <code>e.args</code> means that you can access the attributes of the exception object. But it won't catch <code>BaseException</code> <code>SystemExit</code> <code>KeyboardInterrupt</code> and <code>GeneratorExit</code></p>
<pre><code>try:
    i = 1/0
    print(i)
except Exception as e:
    print (e.args)
</code></pre>
<p>This will print:</p>
<pre><code>('division by zero')
</code></pre>
<p>More ever If we rasie <code>BaseException</code> error</p>
<pre><code>try:
    raise BaseException()
except Exception as e:
    print (e.args)
</code></pre>
<p>The output will be like this</p>
<pre><code>runfile('W:/Summerizer/except.py', wdir='W:/Summerizer')
Traceback (most recent call last):

  File "&lt;ipython-input-3-11e8f07e28c7&gt;", line 1, in &lt;module&gt;
    runfile('W:/Summerizer/except.py', wdir='W:/Summerizer')

  File "C:\Users\adodhiwala\AppData\Local\conda\conda\envs\py35\lib\site-packages\spyder_kernels\customize\spydercustomize.py", line 668, in runfile
    execfile(filename, namespace)

  File "C:\Users\adodhiwala\AppData\Local\conda\conda\envs\py35\lib\site-packages\spyder_kernels\customize\spydercustomize.py", line 108, in execfile
    exec(compile(f.read(), filename, 'exec'), namespace)

  File "W:/Summerizer/except.py", line 10, in &lt;module&gt;
    raise BaseException()

BaseException
</code></pre>
<p>Here <code>as</code> is used to access more functions(args,message etc) so you can understand error more efficiently. </p>
</div>
<span class="comment-copy"><code>Exception</code> is the exception <i>class</i>, and <code>e</code> is the exception <i>object</i>.</span>
<span class="comment-copy">That <code>as e</code> basically assigns the name <code>e</code> to the instance of the exception that has been caught, so that you can refer to it (e.g. for logging) within the <code>except</code> block.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">Ahh I see, this makes a bit more sense, so the b in this case just catches an object of that class, and you can't go printing LookupError on its own un-initialized in this case if I understand correctly</span>
<span class="comment-copy">@NightShade Yes.  <code>LookupError</code> in my example is a <i>class</i> object while <code>problem</code> is an <i>instance</i> object.  The first is the type, the second a value of this type.  (Kind of.)</span>
