<div class="post-text" itemprop="text">
<p>In the Python documentation it describes how to start and use <a href="https://docs.python.org/3/library/asyncio-task.html#coroutines" rel="nofollow noreferrer"><code>coroutines</code></a>.</p>
<p>This section describes how to use a <a href="https://docs.python.org/3/library/asyncio-task.html#task-object" rel="nofollow noreferrer"><code>Task</code></a>.</p>
<p>In the <code>Task</code> section, it states:</p>
<blockquote>
<p>Tasks are used to schedule coroutines concurrently</p>
</blockquote>
<p>I'm failing to understand, what is happening when I start a <code>coroutines</code> <strong>without</strong> using <code>Task</code>? Is the code running <a href="https://stackoverflow.com/a/748189/10597450">asynchronously</a> but not <strong>concurrently</strong>? Does it mean when the code sees an <code>await</code> it goes and does something else? </p>
<p>When I use a <code>Task</code> is it <strong>like</strong> start two threads and calling <code>join()</code>? I start two or more tasks and wait for the result, correct?</p>
</div>
<div class="post-text" itemprop="text">
<p>For simple cases, creating <code>Tasks</code> manually is somewhat similar to threads – you can create them, event loop will eventually run them, and you should eventually get result/exception.</p>
<p>But in most cases, your code is built around <code>await coro()</code> – nothing low-level. This means that your code <em>may</em> do some I/O operation inside <code>coro</code>, so process is free to put your implicitly created task into queue, and resume execution later.</p>
</div>
