<div class="post-text" itemprop="text">
<p>I would like to speed up a function on a single array in Numpy using fancy indexing, vectorization, and/or broadcasting. For each value in my array, I need to do a calculation that involves adjacent values. Therefore, in my vectorized operation, I need to have access to the current index so that I can grab indices around it. Consider the following simple array operation:</p>
<pre><code>x = np.arange(36).reshape(6, 6)
y = np.zeros((6, 6))
y[:] = x + 1
</code></pre>
<p>I'd like to use similar syntax, but rather than a simple increment, I'd like to do something like add all values at adjacent indices to the current value in the vectorized loop. For instance if the region around index <code>[i, j] == 7</code> looks like</p>
<pre><code>3 2 5
2 7 6
5 5 5
</code></pre>
<p>I'd like the calculated value for <code>[i, j]</code> to be <code>3 + 2 + 5 + 2 + 7 + 6 + 5 + 5 + 5</code>, and I want to do that for all indices <code>[i, j]</code>.</p>
<p>This is a straightforward nested for loop (or a single for loop using <code>np.sum</code> for each index)... but I want to use broadcasting and/or fancy indexing if possible. This may be too complex of a problem for the Numpy syntax, but I feel like it should be possible.</p>
<p>Essentially, it comes down to this: how do I reference the current index during a broadcasting operation?</p>
</div>
<div class="post-text" itemprop="text">
<p>Start with a 1D example:</p>
<pre><code>x = np.arange(10)
</code></pre>
<p>There is a choice you have to make: do you discard the edges or not, since they don't have two neighbors? If you do, you can create your output array in esentially one step:</p>
<pre><code>result = x[:-2] + x[1:-1] + x[2:]
</code></pre>
<p>Notice that all three addends are views because they use simple indexing. You want to avoid fancy indexing as much as you can because it generally involves making copies.</p>
<p>If you prefer to retain the edges, you can pre-allocate the output buffer and add directly into it:</p>
<pre><code>result = x.copy()
result[:-1] += x[1:]
result[1:] += x[:-1]
</code></pre>
<p>The fundamental idea in both cases is that to apply an operation to <em>all</em> neighboring elements, you just shift the array by +/-1. You don't need to know any indices, or do anything fancy. The simpler the better.</p>
<p>Hopefully you can see how how to generalize this to the 2D case. Rather than a single index shifting between -1, 0, 1, you have two indices in every possible combination of -1, 0, 1 between the two of them.</p>
<p><strong>Appendix</strong></p>
<p>Here's the generalized approach for a no-egde result:</p>
<pre><code>from itertools import product
def sum_shifted(a):
    result = np.zeros(tuple(x - 2 for x in a.shape), dtype=a.dtype)
    for index in product([slice(0, -2), slice(1, -1), slice(2, None)], repeat=a.ndim):
        result += a[index]
    return result
</code></pre>
<p>This implementation is somewhat rudimentary because it doesn't check for inputs with no dimensions or shapes &lt; 2, but it does work for arbitrary numbers of dimensions.</p>
<p>Notice that for a 1D case, the loop will run exactly three times, for 2D nine times and for ND 3N. This is one case where I find an explicit <code>for</code> loop to be appropriate with numpy. The loop is very small compared to the work done on a large array, fast enough for a small array, and certainly better than writing all 27 possibilities out by hand for the 3D case.</p>
<p>One more thing to pay attention to is how the successive indices are generated. In Python an index with a colon, like <code>x[1:2:3]</code> is converted to the relatively unknown <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> object: <code>slice(1, 2, 3)</code>. Since (almost) everything with commas gets interpreted as a tuple, an index like in the expression <code>x[1:2, ::-1, :2]</code> is exactly equivalent to <code>(slice(1, 2), slice(None, None, -1), slice(None, 2))</code>. The loop generates exactly such an expression, with one element for each dimension. So the result is actually simple indexing across all dimensions.</p>
<p>A similar approach is possible if you want to retain edges. The only significant difference is that you need to index both the input and the output arrays:</p>
<pre><code>from itertools import product
def sum_shifted(a):
    result = np.zeros_like(a)
    for r_index, a_index in zip(product([slice(0, -1), slice(None), slice(1, None)], repeat=a.ndim),
                                product([slice(1, None), slice(None), slice(0, -1)], repeat=a.ndim)):
        result[r_index] += a[a_index]
    return result
</code></pre>
<p>This works because <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> guarantees the order of the iteration, so the two zipped iterators will stay in lockstep.</p>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>x = np.arange(36).reshape(6, 6)
y = np.zeros((6, 6))
for i in range(x.shape[0]):
    for j in range(x.shape[1]):
        if i&gt;0 and i&lt;x.shape[0]-1 and j&gt;0 and j&lt;x.shape[1]-1:
            y[i,j]=x[i,j]+x[i-1,j]+x[i,j-1]+x[i-1,j-1]+x[i+1,j]+x[i,j+1]+x[i+1,j+1]+x[i-1,j+1]+x[i+1,j-1]
        if j==0:
            if i==0:
                y[i,j]=x[i,j]+x[i,j+1]+x[i+1,j+1]+x[i+1,j]
            elif i==x.shape[0]-1:
                y[i,j]=x[i,j]+x[i,j+1]+x[i-1,j+1]+x[i-1,j]
            else:
                y[i,j]=x[i,j]+x[i,j+1]+x[i+1,j+1]+x[i+1,j]+x[i-1,j]+x[i-1,j+1]

        if j==x.shape[1]-1:
            if i==0:
                y[i,j]=x[i,j]+x[i,j-1]+x[i+1,j-1]+x[i+1,j]
            elif i==x.shape[0]-1:
                y[i,j]=x[i,j]+x[i,j-1]+x[i-1,j-1]+x[i-1,j] 
            else:
                y[i,j]=x[i,j]+x[i,j-1]+x[i-1,j-1]+x[i+1,j]+x[i-1,j]+x[i+1,j-1]
        if i==0 and j in range(1,x.shape[1]-1):
            y[i,j]=x[i,j]+x[i,j-1]+x[i+1,j-1]+x[i+1,j]+x[i+1,j+1]+x[i,j+1]
        if i==x.shape[0]-1 and j in range(1,x.shape[1]-1):
            y[i,j]=x[i,j]+x[i,j-1]+x[i-1,j-1]+x[i-1,j]+x[i-1,j+1]+x[i,j+1]
print(y)
</code></pre>
</div>
<span class="comment-copy">While it's possible to access the indices - just build arrays of indices and incorporate those into your computation - doing so isn't really a great way of using neighboring element values.</span>
<span class="comment-copy">@user2357112 Can you elaborate on why it's not a great way to do it?</span>
<span class="comment-copy">Once you've got the indices, what do you imagine you're going to do with them to get the neighboring element values? Most of the things I can imagine you imagining either are nonviable, require explicit Python loops, or result in neighbor values in an array format that could have been built more efficiently without the use of explicit indices.</span>
<span class="comment-copy">The short answer is that that's not how you go about doing something like that in numpy.</span>
<span class="comment-copy">@user2357112 "that could have been built more efficiently without the use of explicit indices." That's the method I'm looking for-- I don't care about using fancy indexing unless it gets me to goal. Essentially, I want to do what I described but use Numpy's fast compiled libraries rather than the slow Python loops. I'm not married to the idea of using index arrays.</span>
<span class="comment-copy">Yep, I think this is going to get me there. But, now that I think about it, I should just write the code as a loop and compile with Numba. "Code is read more than it is written," says the Great Guido-- and bending over backwards to write arcane code to do simple concepts is very anti-python. (But I find myself doing it a lot!) Was trying to avoid using Numba or Cython.</span>
<span class="comment-copy">@physmom: If you've got Numba, the best answer to a lot of advanced NumPy problems becomes "just write the <code>for</code> loop and throw it at Numba".</span>
<span class="comment-copy">This is an example of using the fast whole-array building blocks.  Actually this is very Pythonic.  Lists and dictionaries are building blocks which we use as whole objects where possible.  <code>numpy</code> just takes that a step further.  MATLAB used to require that kind of thinking as well, though now its JIT lets you revert to iterative thinking without much of performance penalty.</span>
