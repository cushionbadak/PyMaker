<div class="post-text" itemprop="text">
<p>I have a Python app that initiates from a main script, let's say a <code>main.py</code>. <code>main.py</code> (since my app is organized) references and imports other <code>.py</code> files within the same directory, that house other functions. As my app is continuously running, it imports such a function from another script, which is also supposed to run forever until it is explicitly cancelled. </p>
<p>Thing is, how would I cancel <em>that</em> specific script, while leaving its affected variables untouched and the main script/larger app still running? </p>
<p>I do not how I would go about targeting a specific function to stop its execution.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use a kill function in my utils to kill any unneeded python process who's name I know. Note the following code was tested/works on Ubuntu Linux and Mac OS machines.</p>
<pre><code>def get_running_pids(process_name):
    pids = []
    p = subprocess.Popen(['ps', '-A'], stdout=subprocess.PIPE)
    out, err = p.communicate()
    for line in out.splitlines():
        if process_name in line.decode('utf-8'):
            pid = int(line.decode('utf-8').split(None, 1)[0])
            pids.append(pid)
    return pids

def kill_process_with_name(process_name):
        pids = get_running_pids(process_name)
        for pid in pids:
            os.kill(pid, signal.SIGKILL)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>not sure of the exact syntax as im not currently in a position to test but something like this is what i was thinking:</p>
<pre><code>HaltException.py:

class HaltException(Exception):
    pass
</code></pre>
<p>-</p>
<pre><code>main.py:

from HaltException import HaltException

class Functions():

    def a(self):
       print("hey")
       self.b()
       return "1"
def b(self):
    print("hello")
    raise HaltException()

def main():

    func_obj = Functions()

    try: 
        func_obj.a()
    except HaltException as e:
        pass
    print("Awesome")

main()
</code></pre>
</div>
<span class="comment-copy">if im understanding this correctly, you could have a custom exception class within that script that, when called, will stop that script from running, but wont effect the main loop.  ill post an example if this sounds like what you're looking for</span>
<span class="comment-copy">You can just kill your process (not good but easy).</span>
<span class="comment-copy">Go through this:- <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">docs.python.org/3/library/asyncio.html</a></span>
<span class="comment-copy">While I am reading gautamaggarwal's suggestion, stopping the particular function I want through some custom exception that is called from another function, would be ideal indeed. I would greatly appreciate such an example.</span>
<span class="comment-copy">For the process_name, is this the name of the function that is continuously running, or something else?</span>
<span class="comment-copy">I usually start the script I want to kill in a different process from the controlling script.</span>
<span class="comment-copy">This seems like what I would want to do, being able to cancel the script within standard Python, but the logic of this answer confuses me a bit. How is this working?</span>
<span class="comment-copy">hey, check out the docs here on user defined exceptions : <a href="https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html#user-defined-exceptions</a>   can probably explain it better than i</span>
