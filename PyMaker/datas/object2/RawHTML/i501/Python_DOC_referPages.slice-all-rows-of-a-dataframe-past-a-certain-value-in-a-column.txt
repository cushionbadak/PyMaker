<div class="post-text" itemprop="text">
<p>I am trying to find a more pandorable way to get all rows of a DataFrame past a certain value in the a certain column (the <code>Quarter</code> column in this case). </p>
<p>I want to slice a DataFrame of GDP statistics to get all rows <em>past</em> the first quarter of 2000 (<code>2000q1</code>). Currently, I'm doing this by getting the index number of the value in the <code>GDP_df["Quarter"]</code> column that equals <code>2000q1</code> (see below). This seems way too convoluted and there must be an easier, simpler, more idiomatic way to achieve this. Any ideas?  </p>
<p><strong>Current Method:</strong></p>
<pre><code>def get_GDP_df():
    GDP_df = pd.read_excel(
        "gdplev.xls", 
        names=["Quarter", "GDP in 2009 dollars"], 
        parse_cols = "E,G", skiprows = 7)
    year_2000 = GDP_df.index[GDP_df["Quarter"] == '2000q1'].tolist()[0]
    GDP_df["Growth"] = (GDP_df["GDP in 2009 dollars"]
        .pct_change()
        .apply(lambda x: f"{round((x * 100), 2)}%"))
    GDP_df = GDP_df[year_2000:]
    return GDP_df
</code></pre>
<p><strong>Output:</strong></p>
<p><img height="350" src="https://i.stack.imgur.com/xHvMl.png" width="300"/></p>
<p>Also, after the DataFrame has been sliced, the indices now start at 212. Is there a method to renumber the indices so they start at 0 or 1? </p>
</div>
<div class="post-text" itemprop="text">
<p>The following is equivalent:</p>
<pre><code>year_2000 = (GDP_df["Quarter"] == '2000q1').idxmax()
GDP_df["Growth"] = (GDP_df["GDP in 2009 dollars"]
  .pct_change()
  .mul(100)
  .round(2)
  .apply(lambda x: f"{x}%"))
return GDP_df.loc[year_2000:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>As pointed in the comments you can use the new <em>awesome</em> method <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html#pandas-dataframe-query" rel="nofollow noreferrer">query()</a>
  that <code>Query the columns of a DataFrame with a boolean expression that
  uses the top-level pandas.eval() function to evaluate the passed
  query</code> with <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.eval.html#pandas.eval" rel="nofollow noreferrer">pandas.eval</a> method that <code>Evaluate a Python expression
  as a string using various backends</code> that uses <a href="https://docs.python.org/3/reference/simple_stmts.html#expression-statements" rel="nofollow noreferrer">only Python
  expressions</a>.</p>
</blockquote>
<pre><code>import pandas as pd

raw_data = {'ID':['101','101','101','102','102','102','102','103','103','103','103'],
            'Week':['08-02-2000','09-02-2000','11-02-2000','10-02-2000','09-02-2000','08-02-2000','07-02-2000','01-02-2000',
               '02-02-2000','03-02-2000','04-02-2000'],
            'Quarter':['2000q1','2000q2','2000q3','2000q4','2000q1','2000q2','2000q3','2000q4','2000q1','2000q2','2000q3'],
            'GDP in 2000 dollars':[15,15,10,15,15,5,10,10,15,20,11]}


def get_GDP_df():
    GDP_df = pd.DataFrame(raw_data).set_index('ID')
    print(GDP_df) # for reference to see how the data is indexed, printing out to the screen
    GDP_df = GDP_df.query("Quarter &gt;= '2000q1'").reset_index(drop=True) #performing the query() + reindexing the dataframe
    GDP_df["Growth"] = (GDP_df["GDP in 2000 dollars"]
        .pct_change()
        .apply(lambda x: f"{round((x * 100), 2)}%"))
    return GDP_df

get_GDP_df()
</code></pre>
<p><a href="https://i.stack.imgur.com/jRHvq.png" rel="nofollow noreferrer"><img alt="Table1: SampleData read. // Table2: FinalResult with re-indexing." src="https://i.stack.imgur.com/jRHvq.png"/></a></p>
</div>
<span class="comment-copy">Take a look at  <code>~</code> <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.eval.html#pandas.eval" rel="nofollow noreferrer">not operator</a> and <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html#pandas-dataframe-query" rel="nofollow noreferrer">query()</a> for the slicing.</span>
<span class="comment-copy">For index reindexing use <code>GDP_df = GDP_df.reset_index(drop=True)</code></span>
<span class="comment-copy">@n1tk Thanks, those pages were both super helpful. But is this what you mean? It still seems a bit more complex than it could be:  <code>year_2000 = GDP_df.query("Quarter == '2000q1'").index.tolist()[0]</code>   (after this runs, <code>year_2000 == 212</code>)</span>
<span class="comment-copy">@n1tk Ah, wait a sec, this works and it is infinitely better: <code>GDP_df = GDP_df.query("Quarter &gt;= '2000q1'")</code>. Thank you!</span>
<span class="comment-copy">I wonder if .values.argmax() is preferable to idxmax()... and then use .iloc.</span>
