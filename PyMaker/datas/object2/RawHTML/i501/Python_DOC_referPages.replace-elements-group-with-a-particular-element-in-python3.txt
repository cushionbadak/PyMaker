<div class="post-text" itemprop="text">
<p>I have a list of over 50 elements. These elements are lowercase and uppercase alphabets, numbers, special characters.</p>
<p>eg.</p>
<pre><code>sample_list = ['1', '0', 'b', 'B', '2', '6', 'a', '7', '9', '5', 'c', 'd', '4', 'A', 'C', 'f', 'D', 'F', '3', 'C', '8', 'A', 'F', 'B', 'A', 'A', 'D'] 
</code></pre>
<p>I want to interchange particular elements with a special character.
eg. </p>
<pre><code>replacing `A,B,C and 1 with @
replacing `D,E,F and 2 with &amp;
replacing `G,H,I and 3 with (
</code></pre>
<p>and so on, I have to replace a particular set of elements with 11 selected special characters. Like I replaced few selected elements with 3 of the special characters.</p>
<p>How to do it efficiently.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do it using <code>translate</code> method following way:</p>
<pre><code>sample_list = ['1', '0', 'b', 'B', '2', '6', 'a', '7', '9', '5', 'c', 'd', '4', 'A', 'C', 'f', 'D', 'F', '3', 'C', '8', 'A', 'F', 'B', 'A', 'A', 'D']
t = ''.maketrans('ABC1DEF2GHI3','@@@@&amp;&amp;&amp;&amp;((((')
out = [i.translate(t) for i in sample_list]
print(out)
</code></pre>
<p>Output:</p>
<pre><code>['@', '0', 'b', '@', '&amp;', '6', 'a', '7', '9', '5', 'c', 'd', '4', '@', '@', 'f', '&amp;', '&amp;', '(', '@', '8', '@', '&amp;', '@', '@', '@', '&amp;']
</code></pre>
<p><code>maketrans</code> method of <code>str</code> is used for creating translation table, just feed it with two equal length <code>str</code>s with first consisting of keys and second of values. <code>translate</code> method accept that table and replace characters accordingly, or left original intact if that there is not such key in table.</p>
<p>EDIT: As noted by Olivier Melan√ßon it can be used only if you want to replace 1 character with 1 character.</p>
</div>
<div class="post-text" itemprop="text">
<p>You first need to define your replacement rules, by example with a <code>dict</code>. In particular, since <code>dict</code> allows <em>O(1)</em> access, this is as fast as your method will be able to get time-complexity-wise: that is solve it in a single traversal of the list.</p>
<p>You can then traverse the list and replace each element if it has a replacement rule.</p>
<pre><code>rules = {
    'A': '@',
    'B': '@',
    'D': '&amp;',
    'E': '&amp;'
}

for i, c in enumerate(sample_list):
    if c in rules:
        sample_list[i] = rules[c]
</code></pre>
<p>If you wish to create a new list instead of mutating the initial one, you can use a list-comprehension</p>
<pre><code>new_list = [rules.get(c, c) for c in sample_list]
</code></pre>
<h2>Example</h2>
<pre><code>rules = {
    'A': '@',
    'B': '@',
    'D': '&amp;',
    'E': '&amp;'
}

sample_list = ['A', 'A', 'B', 'C', 'D', 'E', 'F']

new_list = [rules.get(c, c) for c in sample_list]

print(new_list)
</code></pre>
<h2>Output</h2>
<pre><code>['@', '@', '@', 'C', '&amp;', '&amp;', 'F']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this and set all of your maping in dictionary:</p>
<pre><code>chars = {"@": ["A", "B", "C", "1"], "&amp;": ["D", "E", "F", "2"]}
sample_list = ['1', '0', 'b', 'B', '2', '6', 'a', '7', '9', '5', 'c', 'd', '4', 'A', 'C', 'f', 'D', 'F', '3', 'C', '8', 'A', 'F', 'B', 'A', 'A', 'D']

for k, v in chars.items():
    for value in v:
        if value in sample_list:
            ind = [index for index, val in enumerate(sample_list) if val == value]            
            for x in ind:
                sample_list[x] = k


print(sample_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the map function:</p>
<p>Ex for the first replacement:</p>
<pre><code>new_list = map(lambda x: '@' if x in ('A', 'B', 'C') else x, sample_list)
</code></pre>
<p>sample_list can be a string too (each character is one element, but map will return an array either way).</p>
<p>On a "string" list, you could just use the replace method:</p>
<pre><code>compact_list = ''.join(sample_list)
new_compact_list = compact_list.replace('A', '@').replace('B', '@').replace('C', '@')
</code></pre>
<p>Of course if the source list is variable, write a loop around it...</p>
</div>
<div class="post-text" itemprop="text">
<p>Start with a simple function and refine it. </p>
<p>Simple would be using 3 <code>sets</code> (for lookup set is better then lists) - if sets do not need to mutate, use <code>frozensets</code> instead. Use a simple loop - straight forward:</p>
<pre><code>sample_list = ['1', '0', 'b', 'B', '2', '6', 'a', '7', '9', '5', 'c', 'd', '4', 'A', 'C', 'f', 'D', 'F', '3', 'C', '8', 'A', 'F', 'B', 'A', 'A', 'D'] 

new_list = []
for item in sample_list:
    abc = frozenset("ABC")    # frozensets do not change, they are immuteable
    dfe = frozenset("DEF")    # and fast for lookups. this is less performant
    ghi = frozenset("GHI")    # then using a dict - but it works as well

    if item in abc:
        new_list.append("@")
    elif item in dfe:
        new_list.append("&amp;")
    elif item in ghi:
        new_list.append("(")
    else:
        new_list.append(item)

print(new_list)
</code></pre>
<p>Output:</p>
<pre><code>['1', '0', 'b', '@', '2', '6', 'a', '7', '9', '5', 'c', 'd', '4', '@', '@', 'f', '&amp;', '&amp;', '3', '@', '8', '@', '&amp;', '@', '@', '@', '&amp;']
</code></pre>
<p>To get more fancy use a dictionary and list-comp: </p>
<pre><code>transform = {"A":"@", "B":"@", "C":"@", 
             "D":"&amp;", "E":"&amp;", "F":"&amp;", 
             "G":"(", "H":"(", "I":"("}

new_list = [ transform.get(i,i) for i in sample_list]
</code></pre>
<p>Output:</p>
<pre><code>['1', '0', 'b', '@', '2', '6', 'a', '7', '9', '5', 'c', 'd', '4', '@', '@', 'f', '&amp;', '&amp;', '3', '@', '8', '@', '&amp;', '@', '@', '@', '&amp;']
</code></pre>
<p>See: </p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">set()/frozenset()</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a></li>
<li><a href="https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey">Why dict.get(key) instead of dict[key]?</a></li>
</ul>
</div>
<span class="comment-copy">Why are ppl always ask how to do it "efficiently" ? How did you try to solve it? What was your bottleneck? What was your problem? Where is your <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>?</span>
<span class="comment-copy">@PatrickArtner , I had created many lists and then was searching which list the element belongs and then replacing it with the resp special character. It wasn't efficient.</span>
<span class="comment-copy">It's neat, although it's good to point out that this method will not be able to extend to a sample list with elements of more than one character.</span>
<span class="comment-copy">Can the downvoter explain? There is no reason this is wrong.</span>
