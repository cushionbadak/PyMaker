<div class="post-text" itemprop="text">
<p>I'm not sure how integer division actually works with decimal. Considering these two examples on <code>Python 3.x</code>:</p>
<pre class="lang-py prettyprint-override"><code>4/0.4 = 10.0
4//0.4 = 9.0
</code></pre>
<p>Regular division gives 10 but the integer division of 4 by 0.4 results in 9.0. </p>
<p>Do you know the behavior of integer division with decimal and why the result is this way?</p>
</div>
<div class="post-text" itemprop="text">
<p>The CPython's implementation of floor division of a float number, as either a dividend or a divisor, lies in the <a href="https://github.com/python/cpython/blob/6d43f6f081023b680d9db4542d19b9e382149f0a/Objects/floatobject.c#L665" rel="nofollow noreferrer"><code>float_floor_div</code></a> function, which calls the <a href="https://github.com/python/cpython/blob/6d43f6f081023b680d9db4542d19b9e382149f0a/Objects/floatobject.c#L618" rel="nofollow noreferrer"><code>float_divmod</code></a> function (which implements the <code>divmod</code> function) for the actual calculation, which, with the following lines of code:</p>
<pre><code>mod = fmod(vx, wx);
div = (vx - mod) / wx;
...
floordiv = floor(div);
</code></pre>
<p>tells you that the way that floor division works for a float number is to first call the <code>fmod</code> function to obtain the remainder of the division, subtract the remainder from the dividend <code>vx</code>, and then divide it by the divisor <code>wx</code>, before applying the <code>floor</code> function on the resulting quotient <code>div</code>.</p>
<p>And if you try performing the modulo operation of <code>4 % 0.4</code>, expecting it to be <code>0</code> because 4 / 0.4 should be mathematically 10:</p>
<pre><code>&gt;&gt;&gt; 4 % 0.4
0.3999999999999998
</code></pre>
<p>You'll see the classic <a href="https://stackoverflow.com/questions/588004/is-floating-point-math-broken">floating error</a> inherent from the way decimal numbers are approximated by the binary system. As a result 0.4 is actually stored as something slightly greater than 0.4, which you can verify by instantiating a high-precision <code>Decimal</code> object with 0.4:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(0.4)
Decimal('0.40000000000000002220446049250313080847263336181640625')
</code></pre>
<p>which is why 4 % 0.4 has a remainder of 0.3999999999999998 instead of 0, and as a result, with the way <code>float_divmod</code> calculated the quotient, by first subtracting the remainder from the dividend, you get:</p>
<pre><code>&gt;&gt;&gt; 4 - 4 % 0.4
3.6
</code></pre>
<p>so naturally,</p>
<pre><code>&gt;&gt;&gt; (4 - 4 % 0.4) / 0.4
9.0
</code></pre>
</div>
<span class="comment-copy"><code>//</code> is floor division, not "integer division".</span>
<span class="comment-copy">According to <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow noreferrer">the official Python 3 reference</a> the <code>//</code> operator is <i>floor division</i>, not integer division (how would an integer division using non-integer values even work?). As for the result, see <a href="https://stackoverflow.com/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a></span>
<span class="comment-copy">Combine with <a href="https://stackoverflow.com/questions/183853/what-is-the-difference-between-and-when-used-for-division" title="what is the difference between and when used for division">stackoverflow.com/questions/183853/â€¦</a> for full effect.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/183853/what-is-the-difference-between-and-when-used-for-division">What is the difference between '/' and '//' when used for division?</a></span>
