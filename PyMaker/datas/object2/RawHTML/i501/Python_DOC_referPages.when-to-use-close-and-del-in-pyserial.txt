<div class="post-text" itemprop="text">
<p>According to <a href="https://pythonhosted.org/pyserial/pyserial_api.html?highlight=setdtr#serial.Serial.read" rel="nofollow noreferrer">documentation</a>, class <code>serial.Serial()</code> has the following methods. </p>
<pre><code>close()
Close port immediately.

__del__()
Destructor, close port when serial port instance is freed.
</code></pre>
<p>I would like to know when I should use <code>close()</code> and <code>__del__()</code>? Example, I have a GUI that created an instance of <code>serial.Serial()</code> with an assigned port. According to documentation, the assigned port will be opened when the instance of <code>serial.Serial()</code>. Now when I terminate my GUI, am I correct to say that <code>__del__()</code> (and not <code>close()</code>) is the most appropriate method to use to close the serial port?</p>
</div>
<div class="post-text" itemprop="text">
<h1>Analysis</h1>
<p>If we look at <a href="https://github.com/pyserial/pyserial/blob/a4d8f27bf636ee598c4368d7e488f78a226bf778/serial/serialutil.py#L163" rel="nofollow noreferrer">pyserial source</a> we see:</p>
<pre><code>class SerialBase(io.RawIOBase):
</code></pre>
<p>Aha! Let's look into <a href="https://docs.python.org/3/library/io.html#io.RawIOBase" rel="nofollow noreferrer">io.RawIOBase</a>:</p>
<blockquote>
<p>Base class for raw binary I/O. It inherits <code>IOBase</code>. There is no public constructor.</p>
</blockquote>
<p>OK. Looking for <code>__del__</code> in <code>IOBase</code> we see:</p>
<blockquote>
<p><code>__del__()</code>
  Prepare for object destruction. <code>IOBase</code> provides a default implementation of this method that calls the instanceâ€™s <code>close()</code> method.</p>
</blockquote>
<h1>Conclusion</h1>
<p>You can use <code>close()</code> or <code>del</code> or <code>with</code>-context - they all close the port.</p>
</div>
<span class="comment-copy">When you terminate the GUI <code>__del__()</code> will be called automtically...</span>
<span class="comment-copy">@StephenRauch By any chance to you know where this instruction is stated in the serial.py module? I could not find it. Can you help show me the location of this instruction?</span>
<span class="comment-copy">Thank you. Noted that <code>.__del__()</code> method in the <code>serial.Serial()</code> object is really a method from python's <code>io.IOBase()</code> object. After reading other SO discussions on <code>__del__ ()</code>, e.g. <a href="https://stackoverflow.com/questions/1481488/what-is-the-del-method-how-to-call-it">this</a> and <a href="https://stackoverflow.com/questions/37852560/is-del-really-a-destructor">this</a>, I learnt that <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow noreferrer"><code>__del__()</code> is really a Python Special Method name</a> that is used to customize the finalization of a python object.</span>
<span class="comment-copy">The execution of <code>__del__()</code> can be problematic according to Python documentation. If so, I am thinking that in situations where I no longer require the port in an instance of the <code>serial.Serial()</code> object to be opened, I should promptly close the port using the <code>.close()</code> method instead of the <code>.__del__()</code> method.</span>
<span class="comment-copy">There is nothing problematic itself in calling <code>__methods__</code> - it's just looking strange to call them directly. E.g. <code>someobject.__del__()</code> instead of <code>del someobject</code></span>
<span class="comment-copy">If you look at source you can also see <code>__exit__</code> method that automaticaly calls <code>close()</code>. So: call whatever you want - result will be same.</span>
