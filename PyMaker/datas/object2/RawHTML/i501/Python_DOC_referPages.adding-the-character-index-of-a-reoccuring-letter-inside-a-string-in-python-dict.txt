<div class="post-text" itemprop="text">
<p>Example
for the word 'apple':</p>
<pre><code>['a', 'p', 'p', 'l', 'e']
{'a': [[0], False], 'p': [[1], False], 'l': [[3], False], 'e': [[4], False]}
</code></pre>
<p>i can't figure out how to add the indexes of the letters that reoccur in a word so that it can look like:</p>
<pre><code>{'a': [[0], False], 'p': [[1, 2], False], 'l': [[3], False], 'e': [[4], False]}
</code></pre>
<p>the code i got so far is:</p>
<pre><code>def creer_dict_mot():
    letter_list = obtenir_lettres_mot()
    mot_choisi = "apple"
    letter_dict = {}
    for let in mot_choisi:
        letter_dict[let] = [[mot_choisi.index(let)], False]
    return letter_dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Two main problems;</p>
<p><strong>First</strong>: Let's take a look at this loop:</p>
<pre><code>for let in mot_choisi:
    letter_dict[let] = [[mot_choisi.index(let)], False]
</code></pre>
<p>Here, with each iteration of the loop, you are overwriting the entry for letter_dict for that letter. You don't want to do that, because you will end up with something like <code>{'a': [[0], False], 'p': [[2], False], 'l': [[3], False], 'e': [[4], False]}</code>
, which is still not what you want. </p>
<p>Instead, you want to be able to update your entry in the dictionary, instead of overwriting it. We can do this by checking if we already have an entry before making our assignment.</p>
<pre><code>for let in mot_choisi:
    if not let in letter_dict:
        letter_dict[let] = [[mot_choisi.index(let)], False]
    else:
        # Instead of overwriting the dict, we grab the list from the dict value and update it
        letter_dict[let][0] += [mot_choisi.index(let)] 
</code></pre>
<p><strong>Second:</strong> <code>.index</code> always returns the index of the first occurrence of a character in a string. Therefore, when you call <code>'apple'.index('p')</code>, it will always return <code>1</code>. Observe:</p>
<pre><code>my_string = 'apple'
for let in my_string:
    idx = my_string.index(let)
    print(let, idx)
&gt;&gt;&gt; ('a', 0)
&gt;&gt;&gt; ('p', 1)
&gt;&gt;&gt; ('p', 1) # The first occurrence is index 1
&gt;&gt;&gt; ('l', 3)
&gt;&gt;&gt; ('e', 4)
</code></pre>
<p>How do we fix this? I would recommend looking into <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a></p>
<pre><code>my_string = 'apple'
for idx, let in enumerate(my_string):
    print(let, idx)
&gt;&gt;&gt; ('a', 0)
&gt;&gt;&gt; ('p', 1)
&gt;&gt;&gt; ('p', 2) # Now we see the index we want
&gt;&gt;&gt; ('l', 3)
&gt;&gt;&gt; ('e', 4)
</code></pre>
<p>I will leave it as an exercise to the reader to combine the solutions to these two problems</p>
</div>
<div class="post-text" itemprop="text">
<p>Another easy option would be to collect your indices in a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a>, then modify it at the end to include <code>False</code>:</p>
<pre><code>from collections import defaultdict

word = 'apple'

d = defaultdict(list)
for idx, letter in enumerate(word):
    d[letter].append(idx)

print({k: [v, False] for k, v in d.items()})
# {'a': [[0], False], 'p': [[1, 2], False], 'l': [[3], False], 'e': [[4], False]}
</code></pre>
<p>Also note strings are iterable, so you can use <code>'apple'</code> instead of <code>['a', 'p', 'p', 'l', 'e']</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def creer_dict_mot():
    s = 'apple'
    d = {}
    for char in s:
        ind = [i for i, a in enumerate(s) if a == char]
        if char not in d:
            d[char] = [ind, False]
    return d
</code></pre>
</div>
<span class="comment-copy">What is the meaning or usage of the boolean (seems to always be 'False') in the dictionary?</span>
<span class="comment-copy">yes this is for another part of my program and it can be changed to True if the user discovers the letter (it's the game where you have to find a hidden word)</span>
<span class="comment-copy">Ok. Just so you know for the future, try to remove all the bits that are not relevant to your question in the future and provide the <a href="https://stackoverflow.com/help/mcve">minimal, complete and verifiable example</a>. This will more often than not help you get better answers faster. Welcome to StackOverflow!</span>
<span class="comment-copy">Ok i got it ! thanks for the tip.</span>
<span class="comment-copy">this works ! thank you</span>
