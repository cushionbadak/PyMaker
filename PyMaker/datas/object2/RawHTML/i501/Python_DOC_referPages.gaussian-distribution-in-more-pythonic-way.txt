<div class="post-text" itemprop="text">
<p>I am new to python coding . I have written a python code to calculate Gaussian distribution and predict the label of the set of values. This was my class assignment for which I got good marks. Now I want to know if my code is correct in more python sense. Can I do any more improvement to the code and make it precise and more "Pythonic". </p>
<pre><code>import math
import operator 
# Class to get the mean  and variance of all data point. Input paramaters 
#are the Labels (M or W) and parameter to calculate (height, weight, age). 
#samples are the number of data points
def getMean(trainingSet,parameter1,parameter2):
    mean =0 
    samples = 0 
    variance = 0
    for x in range(len(trainingSet)):
        if trainingSet[x][3]==parameter2:
            mean+= trainingSet[x][parameter1]
            samples = samples+1
    finalMean = mean/samples
    #print(finalMean)
    for x in range(len(trainingSet)):
        if trainingSet[x][3]==parameter2:
            variance+= (trainingSet[x][parameter1]-finalMean)**2
    finalVariance = variance/samples
    gausVal = []
    for x in range(len(trainingSet)):
        tempval = 
calculateGuassian(finalMean,finalVariance,trainingSet[x][parameter1])
        gausVal.append(tempval)
    return gausVal

#Class to calculate the gussaian distriubion points 

def calculateGuassian(meanVal, varianceVal, feature1):
    DenoVariance = 2*varianceVal
    func1 = 1/(math.sqrt(2*3.14*varianceVal))
    func2 = (-(feature1-meanVal)**2)/DenoVariance
    func3 = math.exp(func2)
    distro = func1*func3
    return distro

def finalProduct(multiplyer):
    result = 1
    for x in multiplyer: 
        result = result*x
    return result   

def arrayMultiply(arr1, arr2) :
    resultArray = []
    for x in range(len(arr1)):
        arrMul = arr1[x]*arr2[x]
        resultArray.append(arrMul)
    return resultArray  


# Main classes where every feature is calculated multiplied and the result 
#is shown

def main() :
    MenArr = []
    WomenList = []
    heightM = getMean(trainSet,0,'M')
    finalHM = finalProduct(heightM)
    MenArr.append(finalHM)
    heightW = getMean(trainSet,0, 'W')
    finalHW = finalProduct(heightW)
    WomenList.append(finalHW)
    weightM = getMean(trainSet,1,'M')
    finalWM = finalProduct(weightM)
    MenArr.append(finalWM)
    weightW = getMean(trainSet,1,'W')
    finalWW = finalProduct(weightW)
    WomenList.append(finalWW)
    ageM = getMean(trainSet,2,'M')
    finalAM = finalProduct(ageM)
    MenArr.append(finalAM)
    ageW = getMean(trainSet,2,'W')
    finalAW = finalProduct(ageW)
    WomenList.append(finalAW)
    BestResultMTemp = arrayMultiply(MenArr,testData)
    BestResultWTemp = arrayMultiply(WomenList,testData)
    BestResultM = finalProduct(BestResultMTemp)*0.50
    BestResultW = finalProduct(BestResultWTemp)*0.50
    print (BestResultM)
    print(BestResultW)
    if BestResultM&lt;BestResultW :
        print("The Class Label Is W")
    if BestResultM&gt;BestResultW :
            print("The Class Label Is M")


trainSet = [[170, 57, 32, 'W'],
[192, 95, 28, 'M'],
[150, 45, 30, 'W'],
[170, 65, 29, 'M'],
[175, 78, 35, 'M'],
[185, 90, 32, 'M'],
[170, 65, 28, 'W'],
[155, 48, 31, 'W'],
[160, 55, 30, 'W'],
[182, 80, 30, 'M'],
[175, 69, 28, 'W'],
[180, 80, 27, 'M'],
[160, 50, 31, 'W'],
[175, 72, 30, 'M']]     
testData = (175, 70, 35)        
main()
</code></pre>
<p>Any kind of suggestion is most welcome. Thank You in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>As NichtJens mentioned, try to follow the PEP8 guide, so use lower case variable names with underscores to separate words, and add more spaces between characters.</p>
<p>Also try to use consistent and meaningful variable names. For example, why do you have <code>MenArr</code> and <code>WomenList</code>? You have a variable <code>mean</code> but its value is a sum. You have temporary variables with names <code>func1</code>, <code>func2</code>, etc..</p>
<p>To make your <code>for</code> loops more Pythonic loop through the items in a list rather than create an index and then look up the items.</p>
<p>So:</p>
<pre><code>gauss_value = []
for x in range(len(lst)):
    value = calculate_guassian(mean, variance, lst[x][parameter1])
    gauss_value.append(value)
return gauss_value
</code></pre>
<p>You can do:</p>
<pre><code>gauss_value = []
for item in lst:
    value = calculate_guassian(mean, variance, item[parameter1])
    gauss_value.append(value)
return gauss_value
</code></pre>
<p>But even better you can use a list comprehension:</p>
<pre><code>gauss_value = [calculate_guassian(mean, variance, item[parameter1]) for item in lst]
</code></pre>
<p>You can use this to simplify a lot of your code, e.g. <code>arrayMultiply</code> could be:</p>
<pre><code>def list_multiply(list_1, list_2) :
    return [a * b for a, b in zip(list_1, list_2)]
</code></pre>
<p>My version of <code>getMean</code> would filter the data first. I'm not sure if it's correct to use the unfiltered data for the <code>calculateGuassian</code> part:</p>
<pre><code>def get_mean(values, index, label):
    filtered_values = [value[index] for value in values if value[3] == label]
    n = len(filtered_values)

    mean = sum(filtered_values) / n
    summed_squared_difference = sum((val - mean) ** 2 for val in filtered_values)
    variance = summed_squared_difference / n

    return [calculateGuassian(mean, variance, item[index]) for item in values]
</code></pre>
<p>You can also greatly reduce the amount of code required to get up the initial lists:</p>
<pre><code>men_values = [product(get_mean(trainSet, i, 'M')) for i in range(3)]
women_values = [product(get_mean(trainSet, i, 'W')) for i in range(3)]
</code></pre>
<p>You could reduce the repetition further by having a function that take 'M' or 'W' as a parameter and returns the relevant list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question's title does not reflect what you are actually asking. You might be better fitting to <a href="http://codereview.stackexchange.com/">http://codereview.stackexchange.com/</a> with this...</p>
<p>But, on first glance:</p>
<ul>
<li><p>Read and adhere to PEP8, which defines good Python coding practices: <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a></p></li>
<li><p>Maybe use things like autopep8 (<a href="https://pypi.org/project/autopep8/" rel="nofollow noreferrer">https://pypi.org/project/autopep8/</a>) or flake8 (<a href="http://flake8.pycqa.org/" rel="nofollow noreferrer">http://flake8.pycqa.org/</a>)</p></li>
<li><p>Look up how <code>if __name__ == "__main__":</code> is used: <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">What does if __name__ == "__main__": do?</a></p></li>
<li><p>Look into NumPy (<a href="http://www.numpy.org/" rel="nofollow noreferrer">http://www.numpy.org/</a>) specifically for things like your <code>arrayMultiply()</code> function.</p></li>
<li><p>You are calling this a "class" in the header comment. However, there's no class defined anywhere here. So, look into what a Python class actually is: <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html</a></p></li>
</ul>
</div>
<span class="comment-copy">If you just want your code reviewed try: <a href="https://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
<span class="comment-copy">Also, in reality, it's far more likely that you'd use something like <code>numpy</code> e.g. <a href="https://docs.scipy.org/doc/numpy-1.14.1/reference/generated/numpy.random.normal.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy-1.14.1/reference/generated/…</a> or <code>scipy</code> <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.norm.html" rel="nofollow noreferrer">docs.scipy.org/doc/scipy/reference/generated/…</a></span>
<span class="comment-copy">we where not allowed to use numpy</span>
<span class="comment-copy">@PeterCollingridge I also want to know if there are better functions to write gussian distribution</span>
<span class="comment-copy">Also, why are you importing operator?</span>
<span class="comment-copy">All very good points! However, I'd say NumPy should be used for <code>list_multiply()</code> etc. Even though he says he wasn't allowed to use NumPy during class, he also says asking this question was to go beyond the class work.</span>
<span class="comment-copy">This is perfect. This was exactly what I was looking for. Now using these points I can code better in future assignments. Thank You</span>
