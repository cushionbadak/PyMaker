<div class="post-text" itemprop="text">
<p>I am looking for a way to save the data that was typed into an <code>Entry</code> box on my Tkinter GUI and then immediately load that data back into the <code>Entry</code> box when the program is opened after it has been closed. I have done some research and found that the <code>Pickle</code> module is the best way to do this kind of stuff. Here is my code so far:</p>
<pre><code>from tkinter import*
import pickle

root = Tk()
root.geometry("200x100")

cooltext = StringVar()

entry1 = Entry(root, textvariable=cooltext)
entry1.pack()

def save():
    text = cooltext.get()
    pickle.dump(text, open("savedtext.dat", "wb"))


btn = Button(root, text="save", command=save).pack()

root.mainloop()
</code></pre>
<p>Essentially my code just saves the data into a <code>.dat</code> file after the <kbd>save</kbd> button is clicked. How would I load the same data so if I typed "test" and closed the program and then opened it it would still say "test"? </p>
<p>This probably the code to load the data, but I do not know how to incorporate it here: </p>
<pre><code>text = pickle.load(open("savedtext.dat", "rb"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, the code you provided has a syntax error. It's </p>
<p><code>text = pickle.load(open("savedtext.dat", "rb"))</code> and not </p>
<p><code>text = pickle.load(open("savedtext.dat"), "rb"))</code></p>
<p>If you want to insert text in your Entry widget, you can use <code>entry1.insert("end", text)</code>. It will insert the string in <code>text</code> at the end of what is written in your Entry widget. You can open the file, if it exists, and then, after you create your Entry widget you check if there is something to insert and then, if so, insert it.</p>
<p>EDIT: As @martineau said, we should avoid open a file without closing it after an interaction. You could use something like the code below to read the file content and then insert it in your widget.</p>
<pre><code>with open("savedtext.dat", "rb") as file:
        text = pickle.load(file)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This could be done using <code>pickle</code> like this:</p>
<pre><code>from tkinter import *
import pickle


root = Tk()
root.geometry("200x100")

cooltext = StringVar()

entry1 = Entry(root, textvariable=cooltext)
entry1.pack()


def save():
    text = cooltext.get()
    with open("savedtext.dat", "wb") as pickle_file:
        pickle.dump(text, pickle_file, pickle.HIGHEST_PROTOCOL)

def clear():
    cooltext.set('')

def load():
    with open("savedtext.dat", "rb") as pickle_file:
        text = pickle.load(pickle_file)
    cooltext.set(text)


Button(root, text="Save", command=save).pack()
Button(root, text="Clear", command=clear).pack()
Button(root, text="Load", command=load).pack()

root.mainloop()
</code></pre>
<p>I added a <kbd>Clear</kbd> and <kbd>Load</kbd> <code>Button</code> along with similarly named functions to make things easier to use (and test).</p>
<p><strong>Note:</strong> A statement like the <code>btn = Button(root, text="save", command=save).pack()</code> you have in your code would result in <code>btn</code> being assigned the value <code>None</code> because the <code>pack()</code> doesn't return anything. That caused no harm, but only because <code>btn</code> wasn't ever referenced again, but in general you will need to call <code>pack()</code> (or <code>grid()</code>) in a separate statement just like you did for the <code>Entry</code> widget <code>entry1</code>.</p>
</div>
<span class="comment-copy">I don't think pickle is necessarily the <i>best</i>, but it's certainly one alternative.</span>
<span class="comment-copy">While basically the right idea, in general it's best to avoid calling <code>open()</code> without also calling <code>close()</code> because each call to the former creates a separate <code>file</code> object. This can matter for files opened for writing because the writes may be buffered and not have actually been written to disk yetâ€”which a call <code>close()</code> ensures. A really good way to do this is via a <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with</code> statement</a> because it will ensure that this happens even if an exception occurs while the file is open.</span>
<span class="comment-copy">That's a important point, I'll write this detail in my answer. Thanks.</span>
<span class="comment-copy">You can drop the file.close() from edited part of the answer as the close operation is automatically performed within the context of the with statement.</span>
<span class="comment-copy">Oh, that's new to me. Thank you for the information.</span>
