<div class="post-text" itemprop="text">
<pre><code>import msvcrt
while True:
    try:
        a=msvcrt.getch()
        a=a.decode('utf-8')
        print(a)
    except:
        print(a)
</code></pre>
<p>The above piece of code yields unexpected results when I input arrow keys or page up/page down/delete etc.</p>
<pre><code>The output is as follows:
[I/P=a]
a #expected result
[I/P=UP ARROW]
b'\xe0'
H  #unexpected result
</code></pre>
<p>I can understand b'\xe0' being printed, but why is <code>H</code> being printed along with it?
H is not printed when I do this:</p>
<pre><code>import msvcrt
a=msvcrt.getch()
print(a)#b'\xe0'
a=a.decode('utf-8')
print(a)
When I input UP ARROW here, it raises a UNICODEDECODERROR.
</code></pre>
<p>I've looked at the other question that explains how msvcrt.getch() works, but that still fails to explain why I get two characters in the first piece of code and only one character in the second piece of code.
<strong>Instead of waiting for the next character to be entered, why does a assume the value b'H'?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Arrow keys (and function keys and others) need <em>two separate calls</em> to <code>msvcrt.getch</code>. When you press <kbd>&amp;uparrow</kbd>, the first one returns <code>b'\xe0'</code> and the second one returns <code>b\x48</code>. <em>Neither of these are UTF-8</em> or even ASCII. The first one is not a valid UTF-8 sequence, which is why your <code>decode('utf-8')</code> call throws an exception. The second one is a byte value representing keycode 72, which <em>coincidentally</em> happens to be the same byte value that represent the letter <code>'H'</code> in UTF-8 or ASCII. </p>
<p>From the <a href="https://docs.python.org/3/library/msvcrt.html#msvcrt.getch" rel="nofollow noreferrer">msvcrt documentation</a> (emphasis mine):</p>
<blockquote>
<h3><code>msvcrt.getch()</code></h3>
<p>Read a keypress and return the resulting character as a byte string.
  Nothing is echoed to the console.
  This call will block if a keypress is not already available, but will not wait for Enter to be pressed.
  If the pressed key was a special function key, this will return <code>'\000'</code> or <code>'\xe0'</code>; <strong>the next call will return the keycode</strong>.
  The Control-C keypress cannot be read with this function.</p>
</blockquote>
<p>You can see the bytes coming through using a program like this one:</p>
<pre><code>import msvcrt

NEXT_CHARACTER_IS_KEYCODE = [b'0xe0', b'0x00']

while True:
  ch1 = msvcrt.getch()
  print("Main getch(): {}".format(ch1))
  if ch1 in NEXT_CHARACTER_IS_KEYCODE:
      ch2 = msvcrt.getch()
      print("  keycode getch(): {}".format(ch2))
</code></pre>
<p>Note that there's no <code>.decode('utf-8')</code> in there since <code>getch</code> doesn't return UTF-8 bytes anyway.</p>
<p>(note: make sure you really want to use <code>msvcrt.getch</code>, since that's a pretty unusual choice, especially in 2019.)</p>
<p>Related:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/44793410/python-how-to-introduce-windows-predefined-constants-into-python">Python How to introduce windows predefined constants into python?</a></li>
<li><a href="https://stackoverflow.com/questions/50922537/what-is-xe0-in-the-msvcrt-getch-method">What is \xe0 in the msvcrt.getch() method?</a></li>
<li><a href="https://stackoverflow.com/questions/12175964/python-method-for-reading-keypress">Python method for reading keypress?</a></li>
</ul>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15599565/how-do-you-use-msvcrt-getch-to-extract-and-use-input">How do you use msvcrt.getch to extract and use input?</a></span>
<span class="comment-copy">Why do you decode as UTF-8 is your input is not anything like UTF-8?</span>
<span class="comment-copy">Why do you say that getch() is an unusual choice?</span>
<span class="comment-copy"><code>getch</code> is a weird old compatibility API that needs things like calling twice for some keys and once for others, as well as knowing magic numbers. It is specific to Windows, and in fact to a particular range of older Windows runtimes (it's not part of the more modern Universal Windows Runtime, for example). So unless you're doing something very particular and special, there's almost certainly a better (and more convenient) API to do it.</span>
