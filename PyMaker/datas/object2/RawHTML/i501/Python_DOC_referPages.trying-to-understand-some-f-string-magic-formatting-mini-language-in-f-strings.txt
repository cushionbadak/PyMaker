<div class="post-text" itemprop="text">
<p>In a comment on <a href="https://stackoverflow.com/questions/41215365/nested-f-strings">this post</a>, somebody dropped this line of code:</p>
<pre><code>print("\n".join(f'{a:{a}&lt;{a}}' for a in range(1,10)))
</code></pre>
<pre><code>1
22
333
4444
55555
666666
7777777
88888888
999999999
</code></pre>
<p>And it looks like magic to me, can somebody explain to me why it works (more specifically <code>f'{a:{a}&lt;{a}}'</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>It's quite simple if you visualize the iterations:</p>
<pre><code>1           # f'{1:1&lt;1}', means start with 1, left align with 1 spaces filled with 1
22          # f'{2:2&lt;2}', means start with 2, left align with 2 spaces filled with 2
333         # f'{3:3&lt;3}', means start with 3, left align with 3 spaces filled with 3
4444        # f'{4:4&lt;4}', means start with 4, left align with 4 spaces filled with 4
55555       # f'{5:5&lt;5}', means start with 5, left align with 5 spaces filled with 5
666666      # f'{6:6&lt;6}', means start with 6, left align with 6 spaces filled with 6
7777777     # f'{7:7&lt;7}', means start with 7, left align with 7 spaces filled with 7
88888888    # f'{8:8&lt;8}', means start with 8, left align with 8 spaces filled with 8
999999999   # f'{9:9&lt;9}', means start with 9, left align with 9 spaces filled with 9
</code></pre>
<p>You already know what the f-string <code>f'{a:{a}&lt;{a}'</code> does - when given an <code>{object}</code> within the string it will replace with said object.  In this case, <code>a</code> is range of 1 to 9.</p>
<p>Then all you need to understand is what <code>{9:9&lt;9}</code> does.  It's a string formatter as <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">the documentation</a> that the answer has provided:</p>
<blockquote>
<p><code>'&lt;'</code> Forces the field to be left-aligned within the available space (this is the default for most objects).</p>
</blockquote>
<p>The <code>x&lt;y</code> portion signifies to left-align the text with a width of <code>y</code> spaces.  For any unused space, pad it with character <code>x</code>.  So you start with <code>{9}</code> as the first character, and for the rest of the 8 unused spaces, fill it with <code>{9}</code>.  This is what <code>{9:9&lt;9}</code> does.</p>
<p>Then you apply the same logic and see how each iteration came about.</p>
<p>More importantly, it should be noted that what feels like "magic" is often just a lack of understanding.  Once you take the time to digest and understand the process, it becomes very disillusioning and you become enlightened.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can demistify the output if you substitute some things:</p>
<pre><code>print("\n".join(f'{a:4&lt;5}' for a in range(1,10)))
</code></pre>
<p>and read up on <a href="https://docs.python.org/3/library/string.html#formatspec" rel="noreferrer">String format mini language</a>:</p>
<p>It left aligns the value of <code>a</code> in 5 spaces using <code>4</code> as filler:</p>
<pre><code>14444
24444
34444
44444
54444
64444
74444
84444
94444
</code></pre>
<p>Playing around with code is a good way to get what it does ...</p>
</div>
<span class="comment-copy">Thanks, in my head it would have printed <code>{1:False}</code> as I though it had to do with the comparison operator <code>&lt;</code></span>
<span class="comment-copy">What's within the <code>{}</code> quote is interpreted as a string formatter.  But to add to your example, you <i>could</i> add computation within it as well.  e.g. <code>f'{32:0{"b" if cond else "x"}}'</code> will format <code>32</code> as bytes or hex depending on condition.  What's within the immediate <code>{}</code> gets evaluated first, and so the outer-most <code>{}</code> is left alone to be a string formatter to be evaluated last... if it's a valid format.</span>
<span class="comment-copy">One day, I might actually use this... Thank you for the great explanation.</span>
