<div class="post-text" itemprop="text">
<p>I have seen questions about passing in dictionaries and lists to Python using the argparse library. The examples all show what my Python code looks like. But none show me what they look like on the command line. Where do I need braces, brackets, and quotes?</p>
<p>So if I wanted parameters --my_dict and --my_list how would I specify them as called from the command line?</p>
<p>Here is the essence of what I want to accomplish:</p>
<pre><code>Python foo.py --my_dict="{'Name': 'Zara', 'Class': 'First'}" --my_list="['a', 'b', 'c']"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> to safely convert user-inputted strings to Python dicts and lists:</p>
<pre><code>import argparse
import ast
parser = argparse.ArgumentParser()
parser.add_argument('--my_dict', type=ast.literal_eval)
parser.add_argument('--my_list', type=ast.literal_eval)
args = parser.parse_args()
print(args)
</code></pre>
<p>Running</p>
<pre><code>% python script.py --my_dict="{'Name': 'Zara', 'Class': 'First'}" --my_list="['a', 'b', 'c']"
</code></pre>
<p>yields</p>
<pre><code>Namespace(my_dict={'Name': 'Zara', 'Class': 'First'}, my_list=['a', 'b', 'c'])
</code></pre>
</div>
<span class="comment-copy">Read the accepted answer from the following: <a href="https://stackoverflow.com/questions/18608812/accepting-a-dictionary-as-an-argument-with-argparse-and-python" title="accepting a dictionary as an argument with argparse and python">stackoverflow.com/questions/18608812/â€¦</a> Your <code>dict</code> is actually just a string which you need to parse into a dict</span>
<span class="comment-copy">Look at <code>sys.argv[1:]</code> to see the list of strings that the shell has passed to your script.  You need enough quotes to keep the shell from splitting the strings.  Whether you need brackets or braces depends on how you intend to parse the resulting string.  The JSON route gives the greatest flexibility.</span>
<span class="comment-copy">For the list, why not use <code>nargs='+'</code>?  Then you can input "--mylist a b c", without added quotes or brackets.</span>
<span class="comment-copy">Typically, you <i>don't</i> pass raw bits of Python code as an argument. For example, have an option that takes two arguments and is used like <code>--student Zara First</code>, and build the appropriate dict from the resulting tuple.</span>
<span class="comment-copy">@chepner, make '--student' an `action='append', and use it several times, once for each student.</span>
