<div class="post-text" itemprop="text">
<p>I try to convert a string containing two lists using literal_eval as shown below. </p>
<pre><code>from ast import literal_eval
literal_eval('[[ba], [38]]')
</code></pre>
<p>However I got this error </p>
<pre><code>raise ValueError('malformed string')
</code></pre>
<p>Is it because 'ba' is not converted to string? How can I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because that's not a valid set of Python literals you're asking it to eval. The string needs to be quoted, like so:</p>
<pre class="lang-py prettyprint-override"><code>from ast import literal_eval
literal_eval('[["ba"], [38]]')
</code></pre>
<p>Then you will get the correct result:</p>
<pre class="lang-py prettyprint-override"><code>[['ba'], [38]]
</code></pre>
</div>
<span class="comment-copy">Yes. Fix is add quotes manually.</span>
<span class="comment-copy">I don't understand why someone downvoted this question. So I gave a counter-upvote. Now that the solution is clear though, perhaps the title could be changed to something more descriptive.</span>
<span class="comment-copy">"that's not valid Python" - it is, because <code>ast.parse('[[ba], [38]]')</code> doesn't raise any exceptions.</span>
<span class="comment-copy">It's parsable Python, assuming <code>ba</code> is a name (variable), but not legit  for Python literals. <code>ast.parse()</code> and <code>ast.literal_eval()</code> follow different parts of the Python grammar. The latter is strictly for literals, and abides by literals-only rules, whereas the former is not / does not. Tweaked the answer wording to make that clearer.</span>
<span class="comment-copy">Yep, you're right. The <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">docs</a> says "The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and <code>None</code>". So, it's not a valid literal, then.</span>
