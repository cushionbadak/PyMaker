<div class="post-text" itemprop="text">
<p>So I am trying to run a Unit Test in which only one correct solution passes and every other incorrect solutions need to fail. But, the thing is the Unit Test has to account for a broad spectrum of test cases even negative values. How can I do this in which only one solution passes and every other fails? I heard of people doing this efficiently by using hash tables in which the input is the key and the output is the value.</p>
<p>What I did below apparently isn't good enough of a Unit Test and is marked incorrect.</p>
<p>Unit_Test/lecture/MainObject.py</p>
<pre><code>def computeShippingCost(input):
    if (0 &lt; input &lt;= 30):
        return 5
    elif (input &gt; 30):
        return ((input - 30) * 0.25) + 5
</code></pre>
<p>Unit_Test/tests/Testing.py</p>
<pre><code>from lecture.MainObject import computeShippingCost

class Testing(object):
    def Test(self):
        assert computeShippingCost(20) == 3 #incorrect
        assert computeShippingCost(-30) == -8 #incorrect
        assert computeShippingCost(40) == -20 #incorrect
        assert computeShippingCost(50) == 10 #correct
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From your example and description I take it that there might be a very fundamental misconception about how a test should look.  Every test somehow stimulates its subject (the system under test, aka SUT), and then verifies that the result meets the expectation.</p>
<p>On a very abstract level, a test looks like this:</p>
<pre><code>def myTest():
    &lt;Prepare the SUT for the test&gt;
    &lt;Stimulate the SUT&gt;
    &lt;check if the result matches the expectation&gt;
</code></pre>
<p>The intention is, that a failing test will indicate that there is a bug in the SUT.  Correctly implemented code shall not lead to a failing test. (*)</p>
<p>In your code example, you have stimulated the SUT and checked the result in the following way:</p>
<pre><code>assert computeShippingCost(20) == 3 #incorrect
</code></pre>
<p>From the implementation of <code>computeShippingCost</code> it is clear that the result in this case would be <code>5</code> and not <code>3</code>.  There are now two possibilities:</p>
<p>A) <code>computeShippingCost</code> is implemented correctly.  Then, the expectation in this case should be <code>5</code>.  An assertion against anything else than <code>5</code> will fail.  This violates the above goal (*), because you will have a failing test although the code is implemented correctly.</p>
<p>B) <code>computeShippingCost</code> has a bug, and it actually should deliver <code>3</code> in this situation.  Then, this assertion represents a useful test, and the fact that it fails indicates to you that your function has a bug.</p>
</div>
<span class="comment-copy">First off, <code>computeShippingCost</code> does not appear to <code>return</code> a value.  Consider changing line 3, <code>5</code> to <code>return 5</code>, and likewise for line 5, <code>((input - 30) * 0.25) + 5</code> to <code>return ((input - 30) * 0.25) + 5</code>.  The other thing is that if you are trying to assert a failure or non-equality, <code>!=</code> should be used. Please refer to a <a href="https://docs.python.org/3/library/unittest.html#basic-example" rel="nofollow noreferrer">basic example unittest class</a> for a more standardised approach for unittesting within Python.</span>
<span class="comment-copy">Oh snap, forgot. Yeah, that wasn't the problem. Sorry, I was busy working in Scala before in which there is no return keyword.</span>
<span class="comment-copy">Problem still lies within my Unit Test.</span>
<span class="comment-copy">What is the criteria for correctness? As implemented, <code>computeShippingCost(20)</code> returns <code>5</code>, so it clearly does not equal to <code>3</code>.  Is the test wrong or is the implementation wrong?  This is what you need to establish for us because we don't know. Wording this another way (ignore the code completely when answering this): what is the shipping cost when input is 20?  when input is -30?, when input is 40?</span>
