<div class="post-text" itemprop="text">
<p>I have a list of numbers from which I have extracted common factors of all these numbers. For example, from list <code>b = [16, 32, 96]</code>, I have produced <code>list_of_common_factors = [1, 8, 16, 2, 4]</code>.</p>
<p>I have another list of integers, <code>a</code> and I wish to extract the numbers from <code>list_of_common_factors</code> of which all elements of <code>a</code> are factors. So if <code>a = [2, 4]</code>, then I should end up with <code>[4, 8, 16]</code>, as these are the numbers in <code>list_of_common_factors</code> of which 2 and 4 are factors.</p>
<p>However, I am struggling to figure out how to implement this step in a list comprehension, even in pseudocode. It should look something like this: <code>[x for x in list_of_common_factors if all elements of a are factors of x]</code>. It's the if statement that I'm having trouble with because I believe it should contain a for loop, but I can't think of a concise way to write it.</p>
<p>I have managed to do it the long way, using a nested for loop and it looks like this:</p>
<pre><code>between_two_lists = []
# Determine the factors in list_of_common_factors of which all elements of a are factors.
for factor in list_of_common_factors:
    # Check that all a[i] are factors of factor.
    """ Create a counter.
        For each factor, find whether a[i] is a factor of factor.
        Do this with a for loop up to len(a).
        If a[i] is a factor of factor, then increment the counter by 1.
        At the end of this for loop, check if the counter is equal to len(a).
        If they are equal to each other, then factor satisfies the problem requirements.
        Add factor to between_two_lists. """
    counter = 0
    for element in a:
        if factor % element == 0:
            counter += 1
    if counter == len(a):
        between_two_lists.append(factor)
</code></pre>
<p><code>between_two_lists</code> is the list I am trying to produce by converting the above code into a list comprehension. How can I do that, if it is even possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is what you are looking for:</p>
<pre><code>[x for x in list_of_common_factors if all(x % i==0 for i in a)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It might be more efficient to calculate the least common multiple of the elements of <code>a</code> first, especially if <code>a</code> has more than 2 elements:</p>
<pre><code>from functools import reduce

def gcd(x, y):    # greatest common divisor
   while y:
       x, y = y, x % y
   return x

def lcm(x, y):    # least common multiple
   return (x*y)//gcd(x,y)

lcm_of_a = reduce(lcm, a)  
result = [x for x in list_of_common_factors if (x % lcm_of_a == 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So basically, you need to have a function returning the factors from a list of numbers. This function would return a list. And then you simply need to find the intersection of both list. Since each factor is unique, I suggest to use a set implementation which will be more efficient. To resume, the code would look like:</p>
<pre><code>A = set(factors(#Input 1))
B = set(factors(#Input 2))
N = A.intersection(B)
</code></pre>
</div>
<span class="comment-copy"><code>https://docs.python.org/3/library/math.html#math.gcd</code></span>
<span class="comment-copy">OP wants it with list-comprehension.</span>
<span class="comment-copy">@MehrdadPedramfar Which is not optimal for this problem. So why is it wrong to propose something else, which the OP probably didn't know?</span>
