<div class="post-text" itemprop="text">
<p>how to check if this list is empty?</p>
<pre><code>l = ['',['']]
</code></pre>
<p>I tried solutions from how to find if nested lists are empty. but none of them worked.</p>
<pre><code>def isListEmpty(inList):
    if isinstance(inList, list): # Is a list
         return all( map(isListEmpty, inList) )
    return False # Not a list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should check if the list is falsy/empty first before recursively checking the list items. You can also avoid explicitly returning <code>True</code> or <code>False</code> by using the <code>and</code> and <code>or</code> operators:</p>
<pre><code>def isListEmpty(inList):
    return inList == '' or isinstance(inList, list) and (not inList or all(map(isListEmpty, inList)))
</code></pre>
<p>Demo: <a href="https://repl.it/repls/AccurateSmallOutcome" rel="nofollow noreferrer">https://repl.it/repls/AccurateSmallOutcome</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For lists that actually are empty, the function should simply return True.</p>
<pre><code>def isListEmpty(inList):
    if isinstance(inList, list): # Is a list
        if len(inList) == 0:
            return True
        else:
            return all(map(isListEmpty, inList))
    return False # Not a list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>l</code> is not empty in fact. But in this case this code should work:</p>
<pre><code>l = ['',['']]
def isListEmpty(inList):
    for char in inList:   
        if char == '' or ['']:
            return True
        else:
            return False
            break

print(isListEmpty(l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a simple recursive approach with <code>any</code>. Using <code>any</code> would make sure that the recursively search ends as soon as a non empty item is found   </p>
<pre><code>&gt;&gt;&gt; def is_non_empty_list (l):
...     return any(is_non_empty_list(e) if isinstance(e, list) else e for e in l)
... 
&gt;&gt;&gt; def is_empty_list (l):
...     return not is_non_empty_list(l)
... 
&gt;&gt;&gt; is_empty_list(['', ['']])
True
&gt;&gt;&gt; is_empty_list(['', ['a']])
False
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try This</p>
<pre><code>l = [' ',[ ]]
def isListEmpty(thisList):
  for el in thisList:
    if (len(el)==0 and type(el)==list):
      print('empty') # Or whatever you want to do if you encounter an empty list

isListEmpty(l)
</code></pre>
<p>If you face any problems comment below</p>
</div>
<span class="comment-copy">Do you have to check if the nested list is empty?</span>
<span class="comment-copy">Check if its <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer">length</a> is zero?</span>
<span class="comment-copy">@Austin That string is actually not empty.</span>
<span class="comment-copy">@Someprogrammerdude, I'm pretty sure OP means it as empty string though there is a space like you say.</span>
<span class="comment-copy">Its empty string. I used the space to make it clear</span>
<span class="comment-copy">returns false for everything</span>
<span class="comment-copy">It returns <code>True</code> for <code>[[[]]]</code> for example.</span>
<span class="comment-copy">See demo: <a href="https://repl.it/repls/AccurateSmallOutcome" rel="nofollow noreferrer">repl.it/repls/AccurateSmallOutcome</a></span>
<span class="comment-copy">true but that is not the list I want to check for</span>
<span class="comment-copy">So you consider a list with an empty string empty?</span>
<span class="comment-copy">not working. It returns false for all lists</span>
<span class="comment-copy">It works for me. Can you provide a sample list that fails?</span>
<span class="comment-copy">I added it in question itself</span>
<span class="comment-copy">That list contains a string, and your sample code explicitly returns non-empty for any data type that is not a list.  If that is not your desired behavior, you chould make that clear.</span>
<span class="comment-copy">yes its a list of (empty string and list of empty string)</span>
<span class="comment-copy">What about for deeper lists like <code>['',['',['']]]</code> ? That is why other people have taken a recursive approach, because it can be infinitely deep</span>
