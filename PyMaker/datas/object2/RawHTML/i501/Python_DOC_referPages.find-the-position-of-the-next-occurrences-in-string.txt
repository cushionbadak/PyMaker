<div class="post-text" itemprop="text">
<p>I'm new to python, trying to get familiar with regular expressions, and string processing. I have written a regular expression by which numbers throughout a string are identified and extracted to an array. </p>
<p>I want a parallel array which contains the positions of found terms.</p>
<p>To clarify, suppose that the main string is: </p>
<pre><code>text = '11 scholars are selected to comptete on Feb 20 , 2019. 
Afterwards, 11 professors will review their submitted work. 
The results will be announced on Mar 20 , 2019.'
</code></pre>
<p>As I said, I can match <code>nums = ['11', '20', '2019', '11', '20', '2019']</code> from the string above. Now, I want to form a synced array where stores the positions of each of these numbers. I'm using the following snippet:</p>
<pre><code>positions = []
for num in nums:
   pos = text.find(num)
   positions.append(num + ' : ' + str(pos))
</code></pre>
<p>The positions array contains: <code>positions = ['11 : 0', '20 : 44', '2019 : 49', '11 : 0', '20 : 44', '2019 : 49']</code> which obviously is not what I want. As there are duplicate numbers (like two 11's or 12's) in the list, <code>text.find(num)</code> returns the first occurrence of the term. So, when the program reaches the next occurrences of the token, it returns position of the first occurrence. </p>
<p>Any thoughts on how to fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.finditer" rel="nofollow noreferrer">finditer</a> which returns an iterator yielding match objects, and you can get the matched string and the start position from these matches:</p>
<pre><code>import re

text = """11 scholars are selected to comptete on Feb 20 , 2019. 
Afterwards, 11 professors will review their submitted work. 
The results will be announced on Mar 20 , 2019."""

[(m.group(0), m.start()) for m in re.finditer(r'\d+', text)]
# [('11', 0), ('20', 44), ('2019', 49), ('11', 68), ('20', 154), ('2019', 159)]
</code></pre>
<p>Or, if you want it formatted as in your question:</p>
<pre><code>['{}: {}'.format(m.group(0), m.start()) for m in re.finditer(r'\d+', text)]
# ['11: 0', '20: 44', '2019: 49', '11: 68', '20: 154', '2019: 159']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@Thierry's approach is surely pythonic and makes good use of regular expressions. A simpler approach is as follows:</p>
<pre><code>positions = []
i=0
for num in nums:
   pos = text.find(num, i)
   positions.append(num + ' : ' + str(pos))
   i =+ pos + len(num)

print(positions)
['11 : 0', '20 : 44', '2019 : 49', '11 : 68', '20 : 153', '2019 : 158']
</code></pre>
</div>
<span class="comment-copy">How are you matching those numbers from the string? Your method may be adapted to store both the number and the position simultaneously, or it may not. Show us so we can know. Also, do you know the full syntax of the <code>find</code> method?</span>
