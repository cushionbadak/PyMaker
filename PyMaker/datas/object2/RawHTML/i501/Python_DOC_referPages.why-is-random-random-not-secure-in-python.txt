<div class="post-text" itemprop="text">
<p>I came across this question on Stack overflow:
<a href="https://stackoverflow.com/questions/306400/how-to-randomly-select-an-item-from-a-list">How to randomly selection item from a list in Python</a>
and they mentioned that it is not suitable for cryptographic/security purposes. </p>
<p>So, I found this page in the official documentation: <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">random - Generate pseudorandom numbers</a></p>
<p>It mentions that they use a Mersenne twister to generate random numbers.</p>
<p>Isn't Mersenne twister supposed to be a pretty decent random generator (at least that's what I was told in class)? So why can you not use it for security purposes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Mersenne twister does a decent job of mimicking statistical properties(*) of randomness, but it is a deterministic algorithm.  If two copies are set to the same state, they will produce identical results in synchronization.  That means fhat for crypto/security applications your security is shot if an attacker can determine your initial state.  I've read that for MT this can be done by knowledgeable people after six hundred and some sequential observations.</p>
<p>Bottom line - use it for Monte Carlo sampling or stochastic models, but not for crypto.</p>
<p>(*) - Actually, <a href="https://www.iro.umontreal.ca/~lecuyer/papers.html" rel="nofollow noreferrer">Pierre L'Ecuyer</a>, who is considered one of the foremost researchers on pseudo-random number generation, is not a fan of MT even for Monte Carlo usage.  He has shown that while the full cycle is uniformly distributed, zeros in the the internal state tend to be persistent and the generator can get "stuck" for sizeable sub-periods in non-uniform subsequences.  He collaborated with the creator of Mersenne Twister to fix these issues in the <a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html" rel="nofollow noreferrer">WELL generator</a>.</p>
</div>
<span class="comment-copy">You shouldn't handle security yourself (especially on a programming language you can introspect to find the seed :o)</span>
<span class="comment-copy">But isn't the seed for the random generator randomly generated using the OS library (if it exists) or the system clock? Even if that was not the case, how would using the security library (that they suggest), get over that?</span>
<span class="comment-copy">The intent of the <code>random</code> module is to provide usable random numbers for general purposes. But if you start using those random numbers for encryption then there may be someone prepared to invest effort in cracking your encryption, which is something that <code>random</code> is not designed to withstand. In that case, use the <code>secrets</code> module instead. See PEP 506 for the reasons why you should do this.</span>
<span class="comment-copy">That's not my point, you could get the seed (introspection), and once you have it, you can predict all future numbers. Which is pretty bad in terms of security.</span>
<span class="comment-copy">Using a "pretty decent random generator" for security purposes is really not on. Very easily hackable by determined attackers. Good security is very, very hard, so I agree with @Beno√ÆtPilatte, don't try to handle it yourself.</span>
