<div class="post-text" itemprop="text">
<p>My code is:</p>
<pre><code>import os
import h5py
import asyncio
import numpy as np
import matplotlib.pyplot as plt
from dotenv import load_dotenv
load_dotenv()

data_path = os.environ['DATA_PATH']
output_data_path = os.environ['OUTPUT_DATA_PATH']
patient_files = os.listdir(data_path)


async def save_file(filename, image_data):
    plt.imshow(image_data, cmap='gray')
    await plt.savefig(filename, pad_inches=0, bbox_inches='tight')

for patient_file in patient_files:
    patient_parts = patient_file.split('.')
    patient_parts = patient_parts[0].split('_')
    patient_id = patient_parts[1]
    if int(patient_id) &lt; 21:
        continue
    print('Doing patient', patient_id)

    patient_data = h5py.File(os.path.join(data_path, patient_file))
    variables = patient_data.items()

    for var in variables:
        name = var[0]
        data = var[1]

        if type(data) is h5py.Dataset:
            value = data.value
            plt.axis('off')
            if name == 'Svar25':
                for layer in range(value.shape[0]):
                    output_file = os.path.join(
                        output_data_path, patient_id + '_FLAIR_debone_' + str(layer) + '.png')
                    save_file(filename=output_file, image_data=value[layer])

            if name == 'Svar24':
                for layer in range(value.shape[0]):
                    output_file = os.path.join(
                        output_data_path, patient_id + '_FLAIR_bone_' + str(layer) + '.png')
                    save_file(filename=output_file, image_data=value[layer])
</code></pre>
<p>I'm trying to write my files asynchronously, but it doesn't actually write.</p>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What am I doing wrong?</p>
</blockquote>
<pre><code>await plt.savefig(filename, pad_inches=0, bbox_inches='tight')
</code></pre>
<p>Function doesn't become async just because you use <code>await</code> before it. You have to <a href="https://docs.python.org/3/library/asyncio-task.html#coroutines" rel="nofollow noreferrer">declare</a> function as <code>async def</code> to make it async in the first place.</p>
<p>Any function that uses <code>await</code> should be defined as <code>async def</code> up to entry point of your program (like <code>async def main()</code>). You should <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run" rel="nofollow noreferrer">run entry point in event loop</a> to make async code work.</p>
<p>Both functions <code>plt.imshow</code> and <code>plt.savefig</code> are sync by their nature. You can try to cast second one to async using <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer">run_in_executor</a> and awaiting for result, but I'm not sure if it'll work. I'm also not sure if you need it: you probably won't achieve any speedup paralleling these disk I/O operations.</p>
<hr/>
<p>Long story short, please read <a href="https://stackoverflow.com/a/33399896/1113207">this answer</a> to better understand why people use asyncio in the first place. I also advice you to read <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">this part of documentation</a> and starting with more trivial async task.</p>
</div>
<div class="post-text" itemprop="text">
<p>You forgot to add <code>await</code> ahead of <code>save_file(...)</code>. That means the asyncio loop will never schedule the file writing function.</p>
<p>Very common mistake in my experience...</p>
<p>Update: From your comment, it appears you never kick off the asyncio loop to process functions. You'll need to start the top level function, as per <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run" rel="nofollow noreferrer">docs</a>. Python 3.7 has a nice new simple syntax, the principle is the same in 3.5 and 3.6 but a bit more long-winded.</p>
<pre><code>&gt;&gt;&gt; import asyncio

&gt;&gt;&gt; async def main():
...     print('hello')
...     await asyncio.sleep(1)
...     print('world')

&gt;&gt;&gt; asyncio.run(main())
hello
world
</code></pre>
</div>
<span class="comment-copy">Do I have to make my entire code somehow <code>async</code> then?</span>
<span class="comment-copy">Yeah, pretty much, async does tend to spread like a virus through your code. You need to kick off the asyncio loop. Then you can do cool stuff like running the saves in parallel, but using a single thread.</span>
<span class="comment-copy">My main code isn't in a function, so how can I kick off the <code>async</code> portion?</span>
<span class="comment-copy">You'll need to put it in a function. Global variables and async is kind of asking for trouble anyhow ;)</span>
