<div class="post-text" itemprop="text">
<p>I am interested in using <a href="https://pybind11.readthedocs.io/en/stable/" rel="nofollow noreferrer">pybind11</a> to optimize some Python computation using C++. The <a href="https://pybind11.readthedocs.io/en/stable/advanced/cast/index.html" rel="nofollow noreferrer">casting documentation</a> doesn't make much sense to me and was wondering if anyone knew how to cast boost datatypes, specifically cpp_int, to a Python datatype so I can return computations. A simple example of what I'm trying to do would be factorials:</p>
<pre><code>#include &lt;pybind11/pybind11.h&gt;
#include &lt;pybind11/stl.h&gt;

#include &lt;boost/multiprecision/cpp_int.hpp&gt;


using boost::multiprecision::cpp_int;
namespace py = pybind11;

py::int_ fact(int i) {
    cpp_int prod = 1;
    while(i-- &gt;= 1){
        prod *= (i+1);
    }
    return py::cast(prod);
}

PYBIND11_MODULE(fact, m) {
  m.def("fact", &amp;fact,R"pbdoc(
        Returns the factorial of a number.
    )pbdoc");
}
</code></pre>
<p>The above compiles but when I go to use it I get</p>
<pre><code>TypeError: Unregistered type : boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;
</code></pre>
<p>so something isn't working with py::cast I think...<br/> My laptop runs Windows 10 and I am using Anaconda Python 3.7</p>
<pre><code>C:\Users\15734&gt;python
Python 3.7.1 (default, Dec 10 2018, 22:54:23) [MSC v.1915 64 bit (AMD64)] :: Anaconda, Inc. on win32
Type "help", "copyright", "credits" or "license" for more information.
</code></pre>
<p>and <a href="https://nuwen.net/mingw.html" rel="nofollow noreferrer">Stephan T. Lavavej's MinGW C++ 8.2.0</a></p>
<pre><code>C:\Users\15734&gt;g++ -v
Using built-in specs.
COLLECT_GCC=g++
COLLECT_LTO_WRAPPER=c:/mingw/bin/../libexec/gcc/x86_64-w64-mingw32/8.2.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../src/configure --enable-languages=c,c++ --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --disable-multilib --prefix=/c/temp/gcc/dest --with-sysroot=/c/temp/gcc/dest --disable-libstdcxx-pch --disable-libstdcxx-verbose --disable-nls --disable-shared --disable-win32-registry --with-tune=haswell --enable-threads=posix --enable-libgomp
Thread model: posix
gcc version 8.2.0 (GCC)
</code></pre>
<p>I am also using <a href="https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017" rel="nofollow noreferrer">Build Tools for Visual Studio 2017</a> for the vcruntime140.dll located in "<strong>C:\ProgramFiles(x86)\MicrosoftVisualStudio\2017\BuildTools\VC\Redist\MSVC\14.16.27012\onecore\x64\Microsoft.VC141.CRT</strong>" (which I copied and pasted into "<strong>C:\MinGW\lib</strong>"). I also changed all string "gcc" in "<strong>C:\Anaconda3\Lib\distutils\cygwinccompiler.py</strong>" to "g++" (I <em>did not</em> change the variable names with gcc in them).</p>
<p>Keywords:<br/>
"pybind11" ; "Boost" ; "C++ and Python" ; "boost::multiprecision::cpp_int"</p>
</div>
<div class="post-text" itemprop="text">
<p>I got this working:</p>
<pre><code>#include &lt;boost/multiprecision/cpp_int.hpp&gt;
#include &lt;iomanip&gt;
#include &lt;pybind11/pybind11.h&gt;
#include &lt;sstream&gt;

using cpp_int = boost::multiprecision::cpp_int;
namespace py = pybind11;

namespace pybind11
{
namespace detail
{
    template &lt;&gt;
    struct type_caster&lt;cpp_int&gt; {
        /**
         * This macro establishes the name 'cpp_int' in
         * function signatures and declares a local variable
         * 'value' of type cpp_int
         */
        PYBIND11_TYPE_CASTER(cpp_int, _("cpp_int"));

        /**
         * Conversion part 1 (Python-&gt;C++): convert a PyObject into a cpp_int
         * instance or return false upon failure. The second argument
         * indicates whether implicit conversions should be applied.
         */
        bool load(handle src, bool)
        {
            // Convert into base 16 string (PyNumber_ToBase prepend '0x')
            PyObject* tmp = PyNumber_ToBase(src.ptr(), 16);
            if (!tmp) return false;

            std::string s = py::cast&lt;std::string&gt;(tmp);
            value = cpp_int{s}; // explicit cast from string to cpp_int,
                                // don't need a base here because
                                // `PyNumber_ToBase` already prepended '0x'
            Py_DECREF(tmp);

            /* Ensure return code was OK (to avoid out-of-range errors etc) */
            return !PyErr_Occurred();
        }

        /**
         * Conversion part 2 (C++ -&gt; Python): convert an cpp_int instance into
         * a Python object. The second and third arguments are used to
         * indicate the return value policy and parent object (for
         * ``return_value_policy::reference_internal``) and are generally
         * ignored by implicit casters.
         */
        static handle cast(const cpp_int&amp; src, return_value_policy, handle)
        {
            // Convert cpp_int to base 16 string
            std::ostringstream oss;
            oss &lt;&lt; std::hex &lt;&lt; src;
            return PyLong_FromString(oss.str().c_str(), nullptr, 16);
        }
    };
} // namespace detail
} // namespace pybind11

py::int_ fact(int i)
{
    cpp_int prod = 1;
    while (i-- &gt; 1) prod *= i + 1;
    return py::cast(prod);
}

PYBIND11_MODULE(python_example, m)
{
    m.def("fact", &amp;fact, R"pbdoc(
        Returns the factorial of a number.
    )pbdoc");
}
</code></pre>
<p>Probably not the fastest way since it converts <code>cpp_int</code> to a temporary base 16 string first and then convert this string to Python integer.</p>
</div>
<span class="comment-copy">cpp_int (for some backends) is just a wrapper around a C library (mpz, maybe?) So it might be easier just to wrap the C directly.</span>
<span class="comment-copy">@user14717 If I wrapped mpz how would I use it in C++ and return it via pybind11?</span>
<span class="comment-copy">Well, you wouldn't use it in C++ at all. If you need to use it in both C++ and Python, my suggestion won't work.</span>
<span class="comment-copy">If you go directly from C-&gt;Python, you'd build a python extension module.</span>
<span class="comment-copy">Maybe you can try to replace <a href="https://pybind11.readthedocs.io/en/stable/advanced/cast/custom.html" rel="nofollow noreferrer"><code>struct inty</code></a> with <code>cpp_int</code>?. You could convert cpp_int to base16 string and pass it to <a href="https://docs.python.org/3/c-api/long.html#c.PyLong_FromString" rel="nofollow noreferrer">PyLong_FromString</a> to convert from C++--&gt;Python, and Python--&gt;C++ by casting PyNumber to string base16 with <a href="https://docs.python.org/3/c-api/number.html?highlight=pynumber_long#c.PyNumber_ToBase" rel="nofollow noreferrer">PyNumber_ToBase</a> and construct a cpp_int based on this Python string object.</span>
