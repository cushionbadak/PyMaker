<div class="post-text" itemprop="text">
<p>I need to synchronize data from a csv-file every night to update the data in my django project (I'm using mysql as backend). The data contains user information - sometimes users are to be removed, sometimes new user has to be added and sometimes some of the information about a specific user has changed and needs to be updated. I need to keep this in sync. Are there any built in functions to do this (i.e. manage.py/django-admin)? Do I write a python script and work with my django models to manipulate the data? Is it ok/safe to work directly with the tables in the database, bypassing the models? What is best practice?</p>
<p>I'm using Python 3.7 and Django 2.1 if this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are no prebuilt commands that will likely meet your exact needs, but python has good <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> reading utilities and you could write a custom <a href="http://%20https://docs.djangoproject.com/en/2.1/howto/custom-management-commands/" rel="nofollow noreferrer">Django command</a> to read your csv file and add, delete or update your User models.</p>
<p>Unless you've got special requirements - ie, huge datasets or other constraints - I'd recommend interacting with Django's model layer to make the changes, rather than interacting directly with the database. This way, if you have any special validation on your User model that is not represented on the database-level (choices, integer ranges, so on), you will avoid introducing data inconsistencies.</p>
<p>A final thought - in your command, consider making use of the following excellent methods that Django's ORM provides: <a href="https://docs.djangoproject.com/en/2.1/ref/models/querysets/#get-or-create" rel="nofollow noreferrer">Manager.get_or_create</a> and <a href="https://docs.djangoproject.com/en/2.1/ref/models/querysets/#update-or-create" rel="nofollow noreferrer">Manager.update_or_create</a>. They are useful to avoid duplicating data and elegantly telling the ORM to create or modify in-place, etc.</p>
<p>Good luck!</p>
</div>
