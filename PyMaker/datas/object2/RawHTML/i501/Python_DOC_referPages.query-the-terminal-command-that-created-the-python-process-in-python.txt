<div class="post-text" itemprop="text">
<p>I have a Python module that I call like this</p>
<pre><code>python -m foo.bar arg1 -a foo --some-arg=10
</code></pre>
<p>And inside the <code>bar.py</code> module, I need to query the command that was used to call the module. For example, <code>get_raw_terminal_command()</code> would return <code>"python -m foo.bar arg1 -a foo --some-arg=10"</code>.</p>
<p>I've seen several posts suggest <code>import sys; sys.argv</code> but <code>sys.argv</code> fails in multiple ways.</p>
<ol>
<li><code>sys.argv</code> returns the full path the <code>foo/bar.py</code> file. I need the raw command for debugging purposes and calling <code>python /path/to/foo/bar.py</code> is not the same as calling <code>python foo.bar</code></li>
<li>In my production use-case, <code>sys.argv</code> is returning <code>['-c']</code> instead of the name or path of any Python module. I'm still in the middle of troubleshooting why this is happening but I've already made a case for why <code>sys.argv</code> isn't what I'm looking for anyway.</li>
</ol>
<p>Another popular solution is to use <code>argparse</code> to rebuild the command-line input but I can't use it because I don't control how the Python code is being called. The solution must be generic.</p>
<p>Does anyone know how to get the raw command that is used to call a Python script from within the Python script? If possible, the solution should be compatible with Windows.</p>
</div>
<div class="post-text" itemprop="text">
<p>This won't be compatible with windows, but in GNU/Linux or Solaris (credit: tripleee) you should be able to use /proc/self/cmdline to see exactly how you were called :</p>
<pre><code> Import os

 with open("/proc/self/cmdline") as f:
      print(f.readline())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found something that may be helpful for Windows users: <a href="https://bytes.com/topic/python/answers/706727-get-complete-command-line" rel="nofollow noreferrer">https://bytes.com/topic/python/answers/706727-get-complete-command-line</a></p>
<p>I'll paste the code again, here:</p>
<pre><code>import ctypes

p = ctypes.windll.kernel32.GetCommandLineA()
print ctypes.c_char_p(p).value
</code></pre>
<p>The <code>ctypes</code> solution worked for me. Another commenter pointed out that pywin32 also has its own flavor: </p>
<pre><code>import win32api
print win32api.GetCommandLine ()
</code></pre>
<p>I didn't test it but that may work better.</p>
</div>
<span class="comment-copy">Do you mind to edit your answer? I suggest you to use <code>argparse</code> <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">doc</a> instead of <code>sys.argv</code>.</span>
<span class="comment-copy">The method that's being used to call the Python code isn't always my implementation so I can't use <code>argparse</code>. The solution needs to be generic. That said, I'll update my question to exclude <code>argparse</code> so people don't post it</span>
<span class="comment-copy">Possible duplicate: <a href="https://stackoverflow.com/questions/11938327/what-is-the-proc-self-cmdline-getcommandline-equivalent-on-mac-os-x" title="what is the proc self cmdline getcommandline equivalent on mac os x">stackoverflow.com/questions/11938327/â€¦</a></span>
<span class="comment-copy">On my CentOS 7 machine, I had to <code>[line.replace('\x00', ' ') for line in f.readlines()]</code> to show spaces between command-line args but it seems to work well. If there's a Windows-specific solution that does the same thing, that'd be perfect</span>
<span class="comment-copy">This also doesn't work on OSX, or a large number of OSes other than Linux and Solaris. The *nix isn't really correct here. <a href="https://en.wikipedia.org/wiki/Procfs" rel="nofollow noreferrer">en.wikipedia.org/wiki/Procfs</a> has some further notes.</span>
<span class="comment-copy">Yep, you're right tripleee, updated answer accordingly</span>
