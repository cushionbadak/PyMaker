<div class="post-text" itemprop="text">
<p>I have a <a href="https://github.com/aptiko/textbisect" rel="nofollow noreferrer">library</a> that does some kind of binary search in a seekable open file that it receives as an argument.</p>
<p>The file must have been opened with <code>open(..., newline="\n")</code>, otherwise <code>.seek()</code> and <code>.tell()</code> might not work properly if there's newline translation.</p>
<p>The README of the library does make this thing clear, but still it's easy to miss. I missed it myself and I was wondering why things aren't working properly. I'd therefore like to make the library raise an error or at least a warning if it receives a file-like object that performs text translation. Is it possible to make this check?</p>
</div>
<div class="post-text" itemprop="text">
<p>I see two ways around this. One is Python 3.7's <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper.reconfigure" rel="nofollow noreferrer">io.TextIOWrapper.reconfigure()</a> (thanks @martineau!).</p>
<p>The second one is to make some tests to see whether <code>seek</code>/<code>tell</code> work as expected. A simple but inefficient way to do it is this:</p>
<pre><code>from io import SEEK_END


def has_newlines_translated(f):
    f.seek(0)
    file_size_1 = len(f.read())
    file_size_2 = f.seek(0, SEEK_END) - 1
    return file_size_1 != file_size_2
</code></pre>
<p>It may be possible to do it more efficiently by reading character by character (with <code>f.read(1)</code>) until past the first newline and playing with <code>seek()</code>/<code>tell()</code> to see whether results are consistent, but it's tricky and it wouldn't work in all cases (e.g. if the first newline is a lone <code>\n</code> whereas other newlines are <code>\r\n</code>).</p>
</div>
<span class="comment-copy">"file-like" is a somewhat vague term, and there's no documented way I know of to detect if whatever is passed as an argument even supports something like a <code>newline</code> argument. That said, you may be able to automatically reconfigure the most likely type of argument received via the [<code>io.TextIOWrapper.reconfigure()</code>]<a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper.reconfigure()" rel="nofollow noreferrer">docs.python.org/3/library/…</a> method so it's in the mode required—and doing that is successful, there wouldn't be a need to raise an exception.</span>
