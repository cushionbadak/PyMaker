<div class="post-text" itemprop="text">
<p>How to delete a file or folder in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/os.html#os.remove" rel="noreferrer"><code>os.remove()</code></a> removes a file.</p>
<p><a href="http://docs.python.org/library/os.html#os.rmdir" rel="noreferrer"><code>os.rmdir()</code></a> removes an empty directory.</p>
<p><a href="http://docs.python.org/library/shutil.html#shutil.rmtree" rel="noreferrer"><code>shutil.rmtree()</code></a> deletes a directory and all its contents.</p>
<p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink" rel="noreferrer"><code>pathlib.Path.unlink()</code></a> removes the file or symbolic link.</p>
<p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink" rel="noreferrer"><code>pathlib.Path.rmdir()</code></a> removes the empty directory.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Python syntax to delete a file</h2>
<pre><code>import os
os.remove("/tmp/&lt;file_name&gt;.txt")
</code></pre>
<p>Or</p>
<pre><code>import os
os.unlink("/tmp/&lt;file_name&gt;.txt")
</code></pre>
<h2>Best practice</h2>
<ol>
<li>First, check whether the file or folder exists or not then only delete that file. This can be achieved in two ways :<br/>
a. <code>os.path.isfile("/path/to/file")</code><br/>
b. Use <code>exception handling.</code><br/></li>
</ol>
<p><strong>EXAMPLE</strong> for <code>os.path.isfile</code></p>
<pre><code>#!/usr/bin/python
import os
myfile="/tmp/foo.txt"

## If file exists, delete it ##
if os.path.isfile(myfile):
    os.remove(myfile)
else:    ## Show an error ##
    print("Error: %s file not found" % myfile)
</code></pre>
<h3>Exception Handling</h3>
<pre><code>#!/usr/bin/python
import os

## Get input ##
myfile= raw_input("Enter file name to delete: ")

## Try to delete the file ##
try:
    os.remove(myfile)
except OSError as e:  ## if failed, report it back to the user ##
    print ("Error: %s - %s." % (e.filename, e.strerror))
</code></pre>
<h3>RESPECTIVE OUTPUT</h3>
<pre>
Enter file name to delete : demo.txt
Error: demo.txt - No such file or directory.

Enter file name to delete : rrr.txt
Error: rrr.txt - Operation not permitted.

Enter file name to delete : foo.txt
</pre>
<h3>Python syntax to delete a folder</h3>
<pre><code>shutil.rmtree()
</code></pre>
<p>Example for <code>shutil.rmtree()</code></p>
<pre><code>#!/usr/bin/python
import os
import sys
import shutil

# Get directory name
mydir= raw_input("Enter directory name: ")

## Try to remove tree; if failed show an error using try...except on screen
try:
    shutil.rmtree(mydir)
except OSError as e:
    print ("Error: %s - %s." % (e.filename, e.strerror))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use </p>
<pre><code>shutil.rmtree(path[, ignore_errors[, onerror]])
</code></pre>
<p>(See complete documentation on <a href="http://docs.python.org/library/shutil.html" rel="noreferrer">shutil</a>) and/or</p>
<pre><code>os.remove
</code></pre>
<p>and</p>
<pre><code>os.rmdir
</code></pre>
<p>(Complete documentation on <a href="http://docs.python.org/library/os.html#os.remove" rel="noreferrer">os</a>.)</p>
</div>
<div class="post-text" itemprop="text">
<h2>For deleting files:</h2>
<p>You can use <a href="https://docs.python.org/library/os.html#os.unlink"><code>unlink</code></a> or <a href="https://docs.python.org/library/os.html#os.remove"><code>remove</code></a>. </p>
<pre><code>os.unlink(path, *, dir_fd=None)
</code></pre>
<p>Or</p>
<pre><code>os.remove(path, *, dir_fd=None)
</code></pre>
<p>This functions removes (deletes) the file path. If path is a directory, <a href="https://docs.python.org/library/exceptions.html#OSError"><code>OSError</code></a> is raised.</p>
<p>In Python 2, if the path does not exist, <code>OSError</code> with [Errno 2] (<code>ENOENT</code>) is raised. In Python 3, <code>FileNotFoundError</code> with [Errno 2] (<code>ENOENT</code>) is raised. In Python 3, because <code>FileNotFoundError</code> is a subclass of <code>OSError</code>, catching the latter will catch the former.</p>
<h2>For deleting folders:</h2>
<pre><code>os.rmdir(path, *, dir_fd=None)
</code></pre>
<p><a href="https://docs.python.org/library/os.html#os.rmdir"><code>rmdir</code></a> Remove (delete) the directory path. Only works when the directory is empty, otherwise, <a href="https://docs.python.org/library/exceptions.html#OSError">OSError</a> is raised. 
In order to remove whole directory trees, <a href="https://docs.python.org/library/shutil.html#shutil.rmtree"><code>shutil.rmtree()</code></a> can be used.</p>
<pre><code>shutil.rmtree(path, ignore_errors=False, onerror=None)
</code></pre>
<p><code>shutil.rmtree</code> Delete an entire directory tree. Path must point to a directory (but not a symbolic link to a directory). </p>
<p>If ignore_errors is true, errors resulting from failed removals will be ignored and if false or omitted, such errors are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception.</p>
<p>See also:</p>
<pre><code>os.removedirs(name)
</code></pre>
<p><a href="https://docs.python.org/library/os.html#os.removedirs"><code>os.removedirs(name)</code></a> Remove directories recursively. Works like rmdir() except that, if the leaf directory is successfully removed, removedirs() tries to successively remove every parent directory mentioned in path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). </p>
<p>For example, os.removedirs('foo/bar/baz') will first remove the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if they are empty. </p>
</div>
<div class="post-text" itemprop="text">
<p>Create a function for you guys.</p>
<pre><code>def remove(path):
    """ param &lt;path&gt; could either be relative or absolute. """
    if os.path.isfile(path):
        os.remove(path)  # remove the file
    elif os.path.isdir(path):
        shutil.rmtree(path)  # remove dir and all contains
    else:
        raise ValueError("file {} is not a file or dir.".format(path))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <a href="https://docs.python.org/library/pathlib.html#module-pathlib" rel="noreferrer"><code>pathlib</code></a> module (requires Python 3.4+, but there are backports for older versions on PyPI: <a href="https://pypi.python.org/pypi/pathlib/" rel="noreferrer"><code>pathlib</code></a>, <a href="https://pypi.python.org/pypi/pathlib2/" rel="noreferrer"><code>pathlib2</code></a>). </p>
<p>To remove a file there is the <a href="https://docs.python.org/library/pathlib.html#pathlib.Path.unlink" rel="noreferrer"><code>unlink</code></a> method:</p>
<pre><code>import pathlib
path = pathlib.Path(name_of_file)
path.unlink()
</code></pre>
<p>Or the <a href="https://docs.python.org/library/pathlib.html#pathlib.Path.rmdir" rel="noreferrer"><code>rmdir</code></a> method to remove an <strong>empty</strong> folder:</p>
<pre><code>import pathlib
path = pathlib.Path(name_of_folder)
path.rmdir()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>How do I delete a file or folder in Python?</h2>
</blockquote>
<p>For Python 3, to remove the file and directory individually, use the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink" rel="noreferrer"><code>unlink</code></a> and <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir" rel="noreferrer"><code>rmdir</code></a> <code>Path</code> object methods respectively:</p>
<pre><code>from pathlib import Path
dir_path = Path.home() / 'directory' 
file_path = dir_path / 'file'

file_path.unlink() # remove file

dir_path.rmdir()   # remove directory
</code></pre>
<p>Note that you can also use relative paths with <code>Path</code> objects, and you can check your current working directory with <code>Path.cwd</code>.</p>
<p>For removing individual files and directories in Python 2, see the section so labeled below.</p>
<p>To remove a directory with contents, use <a href="https://docs.python.org/3/library/shutil.html#shutil.rmtree" rel="noreferrer"><code>shutil.rmtree</code></a>, and note that this is available in Python 2 and 3:</p>
<pre><code>from shutil import rmtree

rmtree(dir_path)
</code></pre>
<h2>Demonstration</h2>
<p>New in Python 3.4 is the <code>Path</code> object. </p>
<p>Let's use one to create a directory and file to demonstrate usage. Note that we use the <code>/</code> to join the parts of the path, this works around issues between operating systems and issues from using backslashes on Windows (where you'd need to either double up your backslashes like <code>\\</code> or use raw strings, like <code>r"foo\bar"</code>):</p>
<pre><code>from pathlib import Path

# .home() is new in 3.5, otherwise use os.path.expanduser('~')
directory_path = Path.home() / 'directory'
directory_path.mkdir()

file_path = directory_path / 'file'
file_path.touch()
</code></pre>
<p>and now:</p>
<pre><code>&gt;&gt;&gt; file_path.is_file()
True
</code></pre>
<p>Now let's delete them. First the file:</p>
<pre><code>&gt;&gt;&gt; file_path.unlink()     # remove file
&gt;&gt;&gt; file_path.is_file()
False
&gt;&gt;&gt; file_path.exists()
False
</code></pre>
<p>We can use globbing to remove multiple files - first let's create a few files for this:</p>
<pre><code>&gt;&gt;&gt; (directory_path / 'foo.my').touch()
&gt;&gt;&gt; (directory_path / 'bar.my').touch()
</code></pre>
<p>Then just iterate over the glob pattern:</p>
<pre><code>&gt;&gt;&gt; for each_file_path in directory_path.glob('*.my'):
...     print(f'removing {each_file_path}')
...     each_file_path.unlink()
... 
removing ~/directory/foo.my
removing ~/directory/bar.my
</code></pre>
<p>Now, demonstrating removing the directory:</p>
<pre><code>&gt;&gt;&gt; directory_path.rmdir() # remove directory
&gt;&gt;&gt; directory_path.is_dir()
False
&gt;&gt;&gt; directory_path.exists()
False
</code></pre>
<p>What if we want to remove a directory  and everything in it? 
For this use-case, use <code>shutil.rmtree</code></p>
<p>Let's recreate our directory and file:</p>
<pre><code>file_path.parent.mkdir()
file_path.touch()
</code></pre>
<p>and note that <code>rmdir</code> fails unless it's empty, which is why rmtree is so convenient:</p>
<pre><code>&gt;&gt;&gt; directory_path.rmdir()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "~/anaconda3/lib/python3.6/pathlib.py", line 1270, in rmdir
    self._accessor.rmdir(self)
  File "~/anaconda3/lib/python3.6/pathlib.py", line 387, in wrapped
    return strfunc(str(pathobj), *args)
OSError: [Errno 39] Directory not empty: '/home/excelsiora/directory'
</code></pre>
<p>Now, import rmtree and pass the directory to the funtion:</p>
<pre><code>from shutil import rmtree
rmtree(directory_path)      # remove everything 
</code></pre>
<p>and we can see the whole thing has been removed:</p>
<pre><code>&gt;&gt;&gt; directory_path.exists()
False
</code></pre>
<h2>Python 2</h2>
<p>If you're on Python 2, there's a <a href="https://pypi.python.org/pypi/pathlib2/" rel="noreferrer">backport of the pathlib module called pathlib2</a>, which can be installed with pip:</p>
<pre><code>$ pip install pathlib2
</code></pre>
<p>And then you can alias the library to <code>pathlib</code></p>
<pre><code>import pathlib2 as pathlib
</code></pre>
<p>Or just directly import the <code>Path</code> object (as demonstrated here):</p>
<pre><code>from pathlib2 import Path
</code></pre>
<p>If that's too much, you can remove files with <a href="https://docs.python.org/2/library/os.html#os.remove" rel="noreferrer"><code>os.remove</code> or <code>os.unlink</code></a></p>
<pre><code>from os import unlink, remove
from os.path import join, expanduser

remove(join(expanduser('~'), 'directory/file'))
</code></pre>
<p>or</p>
<pre><code>unlink(join(expanduser('~'), 'directory/file'))
</code></pre>
<p>and you can remove directories with <a href="https://docs.python.org/2/library/os.html#os.rmdir" rel="noreferrer"><code>os.rmdir</code></a>:</p>
<pre><code>from os import rmdir

rmdir(join(expanduser('~'), 'directory'))
</code></pre>
<p>Note that there is also a <a href="https://docs.python.org/2/library/os.html#os.removedirs" rel="noreferrer"><code>os.removedirs</code></a> - it only removes empty directories recursively, but it may suit your use-case.</p>
</div>
<div class="post-text" itemprop="text">
<p>shutil.rmtree is the asynchronous function, 
so if you want to check when it complete, you can use while...loop</p>
<pre><code>import os
import shutil

shutil.rmtree(path)

while os.path.exists(path):
  pass

print('done')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os

folder = '/Path/to/yourDir/'
fileList = os.listdir(folder)

for f in fileList:
    filePath = folder + '/'+f

    if os.path.isfile(filePath):
        os.remove(filePath)

    elif os.path.isdir(filePath):
        newFileList = os.listdir(filePath)
        for f1 in newFileList:
            insideFilePath = filePath + '/' + f1

            if os.path.isfile(insideFilePath):
                os.remove(insideFilePath)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend using <code>subprocess</code> if writing a beautiful and readable code is your cup of tea:</p>
<pre><code>import subprocess
subprocess.Popen("rm -r my_dir", shell=True)
</code></pre>
<p>And if you are not a software engineer, then maybe consider using Jupyter; you can simply type bash commands:</p>
<pre><code>!rm -r my_dir
</code></pre>
<p>Traditionally, you use <code>shutil</code>:</p>
<pre><code>import shutil
shutil.rmtree(my_dir) 
</code></pre>
</div>
<span class="comment-copy">os.rmdir() on Windows also removes directory symbolic link even if the target dir isn't empty</span>
<span class="comment-copy">Please add the pathlib interface (new since Python 3.4) to your list.</span>
<span class="comment-copy">That is <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink" rel="nofollow noreferrer"><code>pathlib.Path.unlink</code></a> and <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir" rel="nofollow noreferrer"><code>pathlib.Path.rmdir</code></a> to be precise.</span>
<span class="comment-copy">It is possible to use <code>os.system('rm -rf /directory_address/')</code> instead of shutil</span>
<span class="comment-copy">@W1ldworm That's a POSIX command, not a Python command. It won't work on Windows.</span>
<span class="comment-copy">@Zygimantas: And he gave possibly the best answer. Well laid out, showed how to avoid common pitfalls, and gave great examples for different scenarios.</span>
<span class="comment-copy">The <code>except OSError, e:</code> should be <code>except OSError as e:</code>.</span>
<span class="comment-copy">You saved my day! Thanks a lot.</span>
<span class="comment-copy">Please add the pathlib interface (new since Python 3.4) to your list.</span>
<span class="comment-copy">I.e. 8 lines of code to simulate the ISO C <code>remove(path);</code> call.</span>
<span class="comment-copy">@Kaz agreed annoying, but does remove deal with trees? :-)</span>
<span class="comment-copy">What about a non-empty directory though?</span>
<span class="comment-copy">@Pranasas Unfortunately it seems there is nothing (natively) in <code>pathlib</code> that can handle deleting non-empty directories. However you could use <a href="https://docs.python.org/3/library/shutil.html#shutil.rmtree" rel="nofollow noreferrer"><code>shutil.rmtree</code></a>. It has been mentioned in several of the other answers so I haven't included it.</span>
<span class="comment-copy"><code>rmtree(directory_path)</code> works in python 3.6.6 but not in python 3.5.2 - you need <code>rmtree(str(directory_path)))</code> there.</span>
<span class="comment-copy">Really good answer, should be the voted one for the new Python3 (and .4) practices as the way to test the answer</span>
<span class="comment-copy"><code>shutil.rmtree</code> is not supposed to be asynchronous. However, it may appear to be on Windows with virus scanners interfering.</span>
<span class="comment-copy">This will delete only the files inside the folder and subfolders leaving the folder structure intact..</span>
<span class="comment-copy">Subprocess is practice to avoid</span>
