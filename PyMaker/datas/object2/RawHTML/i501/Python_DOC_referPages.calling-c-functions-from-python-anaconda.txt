<div class="post-text" itemprop="text">
<p>Update:</p>
<p>So I have gotten my C++ code to compile, as per the <a href="https://docs.python.org/3/extending/extending.html" rel="nofollow noreferrer">docs</a> using <a href="https://docs.python.org/3/extending/building.html#building" rel="nofollow noreferrer">setup.py as shown in section 4.1 here</a>, and it seems the module is being successfully imported as when I query <code>assignment1.add?</code> after importing I receive the information:</p>
<blockquote>
<p>Docstring: Add two numbers.</p>
<p>Type:      builtin_function_or_method</p>
</blockquote>
<p>However, when I actually call the function <code>assignment1.sum(1,2)</code> the Python kernel immediately dies with no further error message than "Kernel died, restarting".</p>
<pre><code>#include &lt;Python.h&gt;

static PyObject * assignment1_add(PyObject *self, PyObject *args)
{
    int *a, *b;
    int sum;

    if (!PyArg_ParseTuple(args, "ii", &amp;a, &amp;b))
        return NULL;
    sum = *a + *b;
    return PyLong_FromLong(sum);
}

static PyMethodDef Assignment1Methods[] = {
    {"add",  assignment1_add, METH_VARARGS, "Add two numbers."},
    {NULL, NULL, 0, NULL}        /* Sentinel */
};

static struct PyModuleDef assignment1module = {
    PyModuleDef_HEAD_INIT,
    "assignment1",   /* name of module */
    NULL, /* module documentation, may be NULL */
    -1,       /* size of per-interpreter state of the module,
              or -1 if the module keeps state in global variables. */
    Assignment1Methods
};

PyMODINIT_FUNC PyInit_assignment1(void)
{
    PyObject *m;

    m = PyModule_Create(&amp;assignment1module);
    if (m == NULL)
        return NULL;
    return m;
}

int
main(int argc, char *argv[])
{
    wchar_t *program = Py_DecodeLocale(argv[0], NULL);
    if (program == NULL) {
        fprintf(stderr, "Fatal error: cannot decode argv[0]\n");
        exit(1);
    }

    /* Add a built-in module, before Py_Initialize */
    PyImport_AppendInittab("assignment1", PyInit_assignment1);

    /* Pass argv[0] to the Python interpreter */
    Py_SetProgramName(program);

    /* Initialize the Python interpreter.  Required. */
    Py_Initialize();

    /* Optionally import the module; alternatively,
    import can be deferred until the embedded script
    imports it. */
    PyImport_ImportModule("assignment1");

    PyMem_RawFree(program);
    return 0;
}
</code></pre>
<p>Any suggestions as to where I should look next for the cause of the problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your first attempt uses Python3 API. I'm not sure what "linker error 1120" is, not going to look it up, but my guess is undefined reference, which is totally understandable if you are trying to use Python2.7 (why by the way?) Python2 and Python3 have different incompatible C APIs.</p>
<p>The second attempt uses Python2.7. The example you have copied is wrong. The init function to initialise a module named <code>module</code> should be called <code>initmodule</code>, not <code>initmod</code>. But wait, there's more! You have not copied it verbatim. You have renamed the file "module.c" to "assignment1.c", but neglected to change either the module name string or the init function string, <em>and</em> you have called your python file the same as your supposed module, "assignment1", which doesn't exist. A module called <code>assignment1</code> should be in a library named <code>assignment1.&lt;your library extension&gt;</code> and have an init function named <code>initassignment1</code>. The library you have created is not usable as a Python module. My guess is that your Python module <code>assignment1.py</code> has imported itself, and it of course doesn't have anything called <code>sum</code>. </p>
<p><a href="http://coliru.stacked-crooked.com/a/e3c67806e8fdd097" rel="nofollow noreferrer">Live demo of the fixed module</a>.</p>
<p>All of this is totally irrelevant for calling C++ functions from Python. Just use pybind11. </p>
</div>
<span class="comment-copy">I don't know what is there to struggle. Get <a href="https://github.com/pybind/pybind11" rel="nofollow noreferrer">pybind11</a>. Read the <a href="https://pybind11.readthedocs.io/en/stable/basics.html" rel="nofollow noreferrer">docs</a>. Done.</span>
<span class="comment-copy">This isn't a particularly helpful answer. I have gotten the above working before and I have no idea why it is failing now, I was aware of boost, which pybind claims to be a lightweight version of, before asking. I would prefer to understand what the problem here is.</span>
<span class="comment-copy">Hello, so, I ran more carefully through the docs and redid my Python 3 example. It now compiles successfully and imports fine (so it seems), but the kernel crashes when I try to call my function. I didn't realise the second example used Python 2, sorry. I renamed assignment1.py to avoid the self-import problem. I'd like to get this working from basics, I understand there are libraries available. I would appreciate any further advice you have. Thanks.</span>
