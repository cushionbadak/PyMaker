<div class="post-text" itemprop="text">
<p>How i can change multiple parameters value in this url: <a href="https://google.com/?test=sadsad&amp;again=tesss&amp;dadasd=asdaas" rel="nofollow noreferrer">https://google.com/?test=sadsad&amp;again=tesss&amp;dadasd=asdaas</a></p>
<p>You can see my code: i can just change 2 value!</p>
<p>This is the response <a href="https://google.com/?test=aaaaa&amp;dadasd=howwww" rel="nofollow noreferrer">https://google.com/?test=aaaaa&amp;dadasd=howwww</a></p>
<p><code>again</code> parameter not in the response! how i can change the value and add it to the url?</p>
<pre><code>def between(value, a, b):
    pos_a = value.find(a)
    if pos_a == -1: return ""
    pos_b = value.rfind(b)
    if pos_b == -1: return ""
    adjusted_pos_a = pos_a + len(a)
    if adjusted_pos_a &gt;= pos_b: return ""
    return value[adjusted_pos_a:pos_b]

def before(value, a):
    pos_a = value.find(a)
    if pos_a == -1: return ""
    return value[0:pos_a]

def after(value, a):
    pos_a = value.rfind(a)
    if pos_a == -1: return ""
    adjusted_pos_a = pos_a + len(a)
    if adjusted_pos_a &gt;= len(value): return ""
    return value[adjusted_pos_a:]


test = "https://google.com/?test=sadsad&amp;again=tesss&amp;dadasd=asdaas"
if "&amp;" in test:
    print(test.replace(between(test, "=", "&amp;"), 'aaaaa').replace(after(test, "="), 'howwww'))
else:
    print(test.replace(after(test, "="), 'test'))
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>From your code it seems like you are probably fairly new to programming, so first of all congratulations on having attempted to solve your problem.</p>
<p>As you might expect, there are language features you may not know about yet that can help with problems like this. (There are also libraries specifically for parsing URLs, but point you to those wouldn't help your progress in Python quite as much - if you are just trying to get some job done they might be a godsend).</p>
<p>Since the question lacks a little clarity (don't worry - I can only speak and write English, so you are ahead of me there), I'll try to explain a simpler approach to your problem. From the last block of your code I understand your intent to be:</p>
<blockquote>
<p>"If there are multiple parameters, replace the value of the first with <code>'aaaaa'</code> and the others with <code>'howwww'</code>. If there is only one, replace its value with <code>'test'</code>."</p>
</blockquote>
<p>Your code is a fair attempt (at what I think you want to do). I hope the following discussion will help you. First, set <code>url</code> to your example initially.</p>
<pre><code>&gt;&gt;&gt; url = "https://google.com/?test=sadsad&amp;again=tesss&amp;dadasd=asdaas"
</code></pre>
<p>While the code deals with multiple arguments or one, it doesn't deal with no arguments at all. This may or may not matter, but I like to <a href="https://en.wikipedia.org/wiki/Defensive_programming" rel="nofollow noreferrer">program defensively</a>, having made too many silly mistakes in the past. Further, detecting that case early simplifies the remaining logic by eliminating an "edge case" (something the general flow of your code does not handle). If I were writing a function (good when you want to repeat actions) I'd start it with something like</p>
<pre><code> if "?" not in url:
    return url
</code></pre>
<p>I skipped this here because I know what the sample string is and I'm not writing a function. Once you know there <em>are</em> arguments, you can split them out quite easily with</p>
<pre><code>&gt;&gt;&gt; stuff, args = url.split("?", 1)
</code></pre>
<p>The second argument to <code>split</code> is another defensive measure, telling it to ignore all but the first question mark. Since we know there <em>is</em> at least one, this guarantees there will always be two elements in the result, and Python won't complain about a different number of names as values in that assignment. Let's confirm their values:</p>
<pre><code>&gt;&gt;&gt; stuff, args
('https://google.com/', 'test=sadsad&amp;again=tesss&amp;dadasd=asdaas')
</code></pre>
<p>Now we have the arguments alone, we can split them out into a list:</p>
<pre><code>&gt;&gt;&gt; key_vals = args.split("&amp;")
&gt;&gt;&gt; key_vals
['test=sadsad', 'again=tesss', 'dadasd=asdaas']
</code></pre>
<p>Now you can create a list of key,value pairs:</p>
<pre><code>&gt;&gt;&gt; kv_pairs = [kv.split("=", 1) for kv in key_vals]
&gt;&gt;&gt; kv_pairs
[['test', 'sadsad'], ['again', 'tesss'], ['dadasd', 'asdaas']]
</code></pre>
<p>At this point you can do whatever is appropriate do the keys and values - deleting elements, changing values, changing keys, and so on. You could create a dictionary from them, but beware repeated keys. I assume you can change <code>kv_pairs</code> to reflect the final URL you want.</p>
<p>Once you have made the necessary changes, putting the return value back together is relatively simple: we have to put an <code>"="</code> between each key and value, then a "&amp;" between each resulting string, then join the stuff back up with a "?". One step at a time:</p>
<pre><code>&gt;&gt;&gt; [f"{k}={v}" for (k, v) in kv_pairs]
['test=sadsad', 'again=tesss', 'dadasd=asdaas']

&gt;&gt;&gt; "&amp;".join(f"{k}={v}" for (k, v) in kv_pairs)
'test=sadsad&amp;again=tesss&amp;dadasd=asdaas'

&gt;&gt;&gt; stuff + "?" + "&amp;".join(f"{k}={v}" for (k, v) in kv_pairs)
'https://google.com/?test=sadsad&amp;again=tesss&amp;dadasd=asdaas'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use <code>urllib</code> since it handles this for you.</p>
<p>First lets break down the URL.</p>
<pre><code>import urllib

u = urllib.parse.urlparse('https://google.com/?test=sadsad&amp;again=tesss&amp;dadasd=asdaas')

ParseResult(scheme='https', netloc='google.com', path='/', params='', query='test=sadsad&amp;again=tesss&amp;dadasd=asdaas', fragment='')
</code></pre>
<p>Then lets isolate the query element.</p>
<pre><code>data = dict(urllib.parse.parse_qsl(u.query))

{'test': 'sadsad', 'again': 'tesss', 'dadasd': 'asdaas'}
</code></pre>
<p>Now lets update some elements.</p>
<pre><code>data.update({
    'test': 'foo',
    'again': 'fizz',
    'dadasd': 'bar'})
</code></pre>
<p>Now we should encode it back to the proper format.</p>
<pre><code>encoded = urllib.parse.urlencode(data)

'test=foo&amp;again=fizz&amp;dadasd=bar'
</code></pre>
<p>And finally let us assemble the whole URL back together.</p>
<pre><code>new_parts = (u.scheme, u.netloc, u.path, u.params, encoded, u.fragment)
final_url = urllib.parse.urlunparse(new_parts)

'https://google.com/?test=foo&amp;again=fizz&amp;dadasd=bar'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is it necessary to do it from scartch? If not use the <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer">urllib</a> already included in vanilla Python.</p>
<pre class="lang-py prettyprint-override"><code>from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

url = "https://google.com/?test=sadsad&amp;again=tesss&amp;dadasd=asdaas"
parsed_url = urlparse(url)
qs = dict(parse_qsl(parsed_url.query))
# {'test': 'sadsad', 'again': 'tesss', 'dadasd': 'asdaas'}

if 'again' in qs:
    del qs['again']
# {'test': 'sadsad', 'dadasd': 'asdaas'}

parts = list(parsed_url)
parts[4] = urlencode(qs)
# ['https', 'google.com', '/', '', 'test=sadsad&amp;dadasd=asdaas', '']
new_url = urlunparse(parts)
# https://google.com/?test=sadsad&amp;dadasd=asdaas
</code></pre>
</div>
<span class="comment-copy">You should really utilize <a href="https://stackoverflow.com/questions/5074803/retrieving-parameters-from-a-url">Retrieving parameters from a URL</a> if possible.</span>
<span class="comment-copy">If you read my code, you can see, i get parameter from find it!  so i dont know parameter name!</span>
<span class="comment-copy">You can iterate over them, it's a dictionary.</span>
<span class="comment-copy">this is a great write up and explanation however for beginners I think it is better to lead them towards proven tools for things like this, hence using urllib that way there is less chance of making an error with string manipulation</span>
<span class="comment-copy">Sure. There's an answer that reflects this advice which I have upvoted, and I'm pretty confident it will do better than this one.</span>
<span class="comment-copy">Thank you, that helped me more :)</span>
<span class="comment-copy">Thanks: always good to get positive feedback.</span>
<span class="comment-copy">Ok thanks, but in this <code>data.update</code> should i know the parameters name to change it!  what should i do if i don't know <code>parameters name</code>?</span>
<span class="comment-copy">yes you should know the parameters to update, if you're planning to use a <code>query</code> param you need to know the fields ahead of time, but you can also pull the <code>params</code> from <code>data</code> since you will retrieve that from the original url so there's no way you won't not know it</span>
