<div class="post-text" itemprop="text">
<p>I have a list like this-:</p>
<pre><code> list= [[Timestamp('2019-02-08 19:00:00'), -0.10272366503382457],
[Timestamp('2019-02-08 20:00:00'), -0.09879936173003045],
[Timestamp('2019-02-08 21:00:00'), -0.09485899037087542],
[Timestamp('2019-02-08 22:00:00'), -0.09090362376394268],
[Timestamp('2019-02-08 23:00:00'), -0.08693431127731444],
[Timestamp('2019-02-09 00:00:00'), -0.08295207923696779]....]
</code></pre>
<p>I want to filter it and get a output like this-:</p>
<pre><code>  ['2019-02-08 19:00:00', -0.10272366503382457],
  ['2019-02-08 20:00:00', -0.09879936173003045],
  ['2019-02-08 21:00:00', -0.09485899037087542],
  ['2019-02-08 22:00:00', -0.09090362376394268],
  ['2019-02-08 23:00:00', -0.08693431127731444],
  ['2019-02-09 00:00:00', -0.08295207923696779].....,
</code></pre>
<p>i use this <code>str(list_result[0][0])</code> syntax , but problem is I have to </p>
<p>iterate all lists which is time consuming . </p>
<p>is it possible with iteration ?</p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/time.html#time.strftime" rel="nofollow noreferrer">strftime</a> to help you format your datetime object and then append them in the list like you did at first.</p>
<p>E.g.,</p>
<pre><code>import datetime
t = datetime.datetime(2012, 2, 23, 0, 0)
t.strftime('%Y-%m-%d %H:%M:%S')
</code></pre>
<p>will yield:</p>
<pre><code>'02/23/2012'
</code></pre>
<p>More information about formatting see <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">here</a></p>
<p>This will only help you in converting the datetime object to string and will not filter out anything. Also, since <strong>Lists</strong> are Python's representation of arrays and fetching it's elements is not possible without iteration or indexing.</p>
</div>
<span class="comment-copy">Can you update your question with how you mean to filter your list. Your question seems to show the same number of items and thus there was no filtering.</span>
<span class="comment-copy">ok , let me modify it,   @quamrana</span>
<span class="comment-copy">@arjun kindly check the answer provided below, and let me know if that helps...</span>
<span class="comment-copy">i am just working on it @DevanshuMisra</span>
<span class="comment-copy">hey, thanks for your time , I just update my question , the solution you have provided is good but i will not use it coz if i will apply it dynamically i have to iterate the loop , can you suggest something else?</span>
<span class="comment-copy">i am going to post one more question , just help me out</span>
<span class="comment-copy">@arjun I'd ask you to put your code, which you find problematic, in the question so that the community could help you accordingly. It's not possible for us to provide you with a solution that does not use iteration without actually knowing as to when and where it is being implemented. If you post your code in the question we'd be able to provide you with a better solution.</span>
<span class="comment-copy">@arjun I think that there is going to have to be iteration... somewhere.</span>
<span class="comment-copy">@quamrana that is exactly what I'm trying to tell our friend here, since you cannot extract the elements from a list without iteration. Or you'll have to use indexing, but that is not possible in a dynamically populated list (Unless you are sure of the element's position in the list).</span>
