<div class="post-text" itemprop="text">
<p>My main concern is doing this more pythonically. The code below works, but seems clunky.</p>
<p>I have a dictionary with keys mapped to lists. I want to loop through the dictionary and see if each key is in a value list, and if so, append that to a new list associated with that key value. I will post an example below for clarification.</p>
<p>To simplify the problem, say that I have a dict like so:</p>
<pre><code>my_dict = {1: [3], 2: [4,5,6], 3: [1,2], 4: [5,6], 5: [4,6], 6: [4,5]}
</code></pre>
<p>In my_dict, key <code>1</code> is present in the value list of key <code>3</code>, so we would create a new dict with <code>key = 1</code>, and <code>value = list(3)</code></p>
<p>Similarly, key <code>6</code> is present in the value lists of keys <code>2</code>, <code>4</code>, and <code>5</code>. We would create a new <code>key =6</code> and <code>value = list(2,4,5)</code> in our dict.</p>
<p>Here would be the final output for our dict:</p>
<pre><code>output_dict = {1: [3], 2: [3], 3: [1], 4: [2,5,6], 5: [2, 4, 6], 6: [2,4,5]}
</code></pre>
<p>My code so far: </p>
<pre><code>new_dict = {}
for k, v in my_dict.items():
    new_dict[k] = []

for k , v in my_dict.items():
    for k2 in new_dict.keys():
        if k2 in v:
            new_dict[k2].append(k)
</code></pre>
<p>Any pointers are much appreciated. Thank you for your time. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">setdefault</a> to <em>invert</em> the dictionary:</p>
<pre><code>my_dict = {1: [3], 2: [4, 5, 6], 3: [1, 2], 4: [5, 6], 5: [4, 6], 6: [4, 5]}

new_dict = {}
for key, values in my_dict.items():
    for value in values:
        new_dict.setdefault(value, []).append(key)

print(new_dict)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{1: [3], 2: [3], 3: [1], 4: [2, 5, 6], 5: [2, 4, 6], 6: [2, 4, 5]}
</code></pre>
<p>The idea is to iterate over each (key, values) pair then use each value as key, <code>setdefault</code> will handle the case when the key is missing. An alternative will be to set the empty list as default value for each new key in <code>new_dict</code>, for example:</p>
<pre><code># set the empty list for each new key in new_dict
new_dict = {}
for values in my_dict.values():
    for value in values:
        new_dict[value] = []

# fill new_dict
for key, values in my_dict.items():
    for value in values:
        new_dict[value].append(key)
</code></pre>
<p>This will produce the same output as above, a third option will be to use <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">collections.defaultdict</a> and skip the first loop:</p>
<pre><code>from collections import defaultdict

my_dict = {1: [3], 2: [4, 5, 6], 3: [1, 2], 4: [5, 6], 5: [4, 6], 6: [4, 5]}

new_dict = defaultdict(list)
for key, values in my_dict.items():
    for value in values:
        new_dict[value].append(key)

print(new_dict)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>defaultdict(&lt;class 'list'&gt;, {1: [3], 2: [3], 3: [1], 4: [2, 5, 6], 5: [2, 4, 6], 6: [2, 4, 5]})
</code></pre>
<p>Note that this returns a defaultdict, that is a sub-class of dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for completeness, here is another version using dict comprehension:</p>
<pre><code>from itertools import chain
my_dict = {1: [3], 2: [4,5,6], 3: [1,2], 4: [5,6], 5: [4,6], 6: [4,5]}

vals = set(chain.from_iterable(my_dict.values()))
d = {val:[k for k, v in my_dict.items() if val in v] for val in vals}
</code></pre>
</div>
