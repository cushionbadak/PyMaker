<div class="post-text" itemprop="text">
<p>It's about missing <code>typing.Range</code>.</p>
<p>There is no type for <code>range</code> in the <code>typing</code> package, but at the same time we see <code>typing.re.Match</code>, which is a package-oriented type.
The <code>typing.sequence</code> or <code>typing.Iterable</code> is too comprehensive.</p>
<p>Is there a better way to check <code>range</code> type and only <code>range</code> type? Besides using:</p>
<pre><code>range_instance.__class__ == range
</code></pre>
<p><em>update</em>:</p>
<p>To be clear, I mean some of the types in typing are including all elements or aspects of something, like <code>typeing.Iterable</code> (generic type, that's fine)</p>
<p>On the other hand, there are also very <strong>specific</strong> types like </p>
<p><code>typing.Generator</code>, <code>typing.Tuple</code>, <code>typing.Dict</code>, <code>typing.re.Match</code>
<code>typing.AsyncContextManager</code>, ...</p>
<p>but not</p>
<p><code>typing.Range</code></p>
<p>Fact 1: a <code>range</code> type is a different type in python
(for example, a range has extra optimization given for checking elements there, and sometimes it makes sense to know if you're dealing with list or range)</p>
<p>Fact 2: a <code>typing</code> module seems to covers all aspects of types.
(see imports and logic there if you doubt)</p>
<p>Knowing this, I think <code>typing.Range</code> is missing.</p>
<p>The difference between type hints and type checking doesn't matter here.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main idea of the <code>typing</code> package <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle" rel="nofollow noreferrer">interface segregation</a>. In most cases you <em>should not</em> care whether the argument passed is actually a <code>range</code> object, but about some aspect of its functionality. In most cases, that functionality is covered by the <code>typing.Iterable</code> (I don't understand what you mean by "too comprehensive").</p>
<p>On the other hand, if you want to explicitly check for the range type, just use <code>isinstance(x, range)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You asked:</p>
<blockquote>
<p>Is there a better way to check <code>range</code> type and only <code>range</code> type, besides:</p>
<pre><code>range_instance.__class__ == range
</code></pre>
</blockquote>
<p>I think you can use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance()</code></a> for this case (I tested it in <code>Python 3.x</code>):</p>
<pre><code>&gt;&gt;&gt; isinstance(range(10), range)
True
&gt;&gt;&gt; isinstance(list(range(10)), range)               # this is a list
False
&gt;&gt;&gt; isinstance([1, 2, 3, 4], range)                  # this is a list
False
&gt;&gt;&gt; isinstance((e for e in range(10)), range)        # this is a generator
False
</code></pre>
<p>As you can see, it works correctly in recognizing range objects and it also does not get confused by lists or generators.</p>
</div>
<span class="comment-copy">Anything wrong with <code>isinstance(range_instance, range)</code>?</span>
<span class="comment-copy">You are confusing two similar but different things: the typing module offered generic types for type annotation which serve the purpose of documentation and <b>hint</b>ing. A type check on the other hand is solid <b>check</b> that an object is derived from a defined class or parent class. It might be valid in some usecase but it generally opposes the duck-typing concept of Python.</span>
<span class="comment-copy">@Klaus: no, I don't because <code>typing</code> serves not only generic types and since that module is based on the <code>types</code>, <code>collections</code>, <code>abc</code> and others, there is no problem to use that package not only for type hinting but also for type checking. Of course, we're not limited to that module for type checking. Maybe it shouldn't be the first try at all.</span>
<span class="comment-copy">I've updated question above, thank you for your link. I think the ISP is broken in typing module for range, due to not providing <code>typing.Range</code>.</span>
<span class="comment-copy">@SławomirLenart Why would you expect <code>typing.Range</code> to exist? <code>range</code> is neither an interface (like <code>typing.Iterable</code>) nor a generic (like <code>typing.List</code>); there is absolutely no reason for <code>typing.Range</code> to be a thing. It would be literally the same thing as <code>range</code>.</span>
<span class="comment-copy">@SławomirLenart: I think it's the exact opposite. <code>range</code> is just an iterable for most purposes. So, you should be covered by <code>iterable</code>. However, you're right, the <code>typing</code> module is a bit inconsistent regarding what it represents. Keep in mind though that it's an afterthought, and it's relatively new. On the other hand, the <code>abc.collections</code> follows interface segregation more clearly</span>
