<div class="post-text" itemprop="text">
<p>I'm trying to represent a number with leading and trailing zeros so that the total width is 7 including the decimal point. For example, I want to represent "5" as "005.000". It seems that string formatting will let me do one or the other but not both. Here's the output I get in Ipython illustrating my problem:</p>
<pre><code>In [1]: '%.3f'%5
Out[1]: '5.000'

In [2]: '%03.f'%5
Out[2]: '005'

In [3]: '%03.3f'%5
Out[3]: '5.000'
</code></pre>
<p>Line 1 and 2 are doing exactly what I would expect. Line 3 just ignores the fact that I want leading zeros. Any ideas? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The first number is the <strong>total</strong> number of digits, including decimal point.</p>
<pre><code>&gt;&gt;&gt; '%07.3f' % 5
'005.000'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>[Edit: Gah, beaten again]</p>
<pre><code>'%07.3F'%5
</code></pre>
<p>The first number is the total field width.</p>
</div>
<div class="post-text" itemprop="text">
<p>This took me a second to figure out how to do @nosklo's way but with the <code>.format()</code> and being nested.</p>
<p>Since I could not find an example anywhere else atm I am sharing here.</p>
<h2>Example using <code>"{}".format(a)</code></h2>
<h1>Python 2</h1>
<pre class="lang-python3 prettyprint-override"><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; print "{}".format('%07.3F' % a)
005.000
&gt;&gt;&gt; print("{}".format('%07.3F' % a))
005.000
</code></pre>
<h1>Python 3</h1>
<p>More <code>python3</code> way, <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer">created from docs</a>, but Both work as intended.</p>
<p>Pay attention to the <code>%</code> vs the <code>:</code> and the placement of the format is different in python3.</p>
<pre class="lang-python3 prettyprint-override"><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; print("{:07.3F}".format(a))
005.000
</code></pre>
<pre class="lang-python3 prettyprint-override"><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; print("Your Number is formatted: {:07.3F}".format(a))
Your Number is formatted: 005.000
</code></pre>
<h2>Example using <code>"{}".format(a)</code> Nested</h2>
<p>Then expanding that to fit my code, that was nested <code>.format()</code>'s:</p>
<pre><code>print("{}: TimeElapsed: {} Seconds, Clicks: {} x {} "
      "= {} clicks.".format(_now(),
                            "{:07.3F}".format((end -
                                               start).total_seconds()),
                            clicks, _ + 1, ((_ + 1) * clicks),
                            )
      )
</code></pre>
<p>Which formats everything the way I wanted.</p>
<h2>Result</h2>
<pre class="lang-bash prettyprint-override"><code>20180912_234006: TimeElapsed: 002.475 Seconds, Clicks: 25 + 50 = 75 clicks.
</code></pre>
<h2>Important Things To Note:</h2>
<blockquote>
<ul>
<li><p>@babbitt: The first number is the total field width.</p></li>
<li><p>@meawoppl: This also counts the minus sign!...</p></li>
</ul>
</blockquote>
</div>
<span class="comment-copy">Makes sense, thanks!</span>
<span class="comment-copy">decimal point is a digit?</span>
<span class="comment-copy">This also counts the minus sign!  bleh, unusually shoddy for Python IMHO</span>
