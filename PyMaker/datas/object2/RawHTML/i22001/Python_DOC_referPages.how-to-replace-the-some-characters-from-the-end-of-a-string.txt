<div class="post-text" itemprop="text">
<p>I want to replace characters at the end of a python string.  I have this string:</p>
<pre><code> s = "123123"
</code></pre>
<p>I want to replace the last <code>2</code> with <code>x</code>.  Suppose there is a method called <code>replace_last</code>:</p>
<pre><code> r = replace_last(s, '2', 'x')
 print r
 1231x3
</code></pre>
<p>Is there any built-in or easy method to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is exactly what the <code>rpartition</code> function is used for:</p>
<blockquote>
<p>rpartition(...)
      S.rpartition(sep) -&gt; (head, sep, tail)</p>
<pre><code>Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
</code></pre>
</blockquote>
<p>I wrote this function showing how to use <code>rpartition</code> in your use case:</p>
<pre><code>def replace_last(source_string, replace_what, replace_with):
    head, _sep, tail = source_string.rpartition(replace_what)
    return head + replace_with + tail

s = "123123"
r = replace_last(s, '2', 'x')
print r
</code></pre>
<p>Output:</p>
<pre><code>1231x3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Using regular expression function <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> to replace words at end of string</h2>
<pre><code>import re
s = "123123"
s = re.sub('23$', 'penguins', s)
print s
</code></pre>
<p>Prints:</p>
<pre><code>1231penguins
</code></pre>
<p>or </p>
<pre><code>import re
s = "123123"
s = re.sub('^12', 'penguins', s)
print s
</code></pre>
<p>Prints:</p>
<pre><code>penguins3123
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one of the few string functions that doesn't have a left and right version, but we can mimic the behaviour using some of the string functions that do.</p>
<pre><code>&gt;&gt;&gt; s = '123123'
&gt;&gt;&gt; t = s.rsplit('2', 1)
&gt;&gt;&gt; u = 'x'.join(t)
&gt;&gt;&gt; u
'1231x3'
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; 'x'.join('123123'.rsplit('2', 1))
'1231x3'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; s = "aaa bbb aaa bbb"
&gt;&gt;&gt; s[::-1].replace('bbb','xxx',1)[::-1]
'aaa bbb aaa xxx'
</code></pre>
<p>For your second example</p>
<pre><code>&gt;&gt;&gt; s = "123123"
&gt;&gt;&gt; s[::-1].replace('2','x',1)[::-1]
'1231x3'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When the wanted match is at the end of string, <a href="http://docs.python.org/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> comes to the rescue.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "aaa bbb aaa bbb"
&gt;&gt;&gt; s
'aaa bbb aaa bbb'
&gt;&gt;&gt; re.sub('bbb$', 'xxx', s)
'aaa bbb aaa xxx'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution based on a simplistic interpretation of your question. A better answer will require more information.</p>
<pre><code>&gt;&gt;&gt; s = "aaa bbb aaa bbb"
&gt;&gt;&gt; separator = " "
&gt;&gt;&gt; parts = s.split(separator)
&gt;&gt;&gt; separator.join(parts[:-1] + ["xxx"])
'aaa bbb aaa xxx'
</code></pre>
<p><strong>Update</strong></p>
<p>(After seeing edited question) another very specific answer.</p>
<pre><code>&gt;&gt;&gt; s = "123123"
&gt;&gt;&gt; separator = "2"
&gt;&gt;&gt; parts = s.split(separator)
&gt;&gt;&gt; separator.join(parts[:-1]) + "x" + parts[-1]
'1231x3'
</code></pre>
<p><strong>Update 2</strong></p>
<p>There is far better <a href="https://stackoverflow.com/questions/3675318/how-to-replace-the-some-characters-from-the-end-of-a-string/3675423#3675423">way to do this</a>. Courtesy <a href="https://stackoverflow.com/users/56763/mizipzor">@mizipzor</a>.</p>
</div>
<span class="comment-copy">For the example given in the question:  <code>r = re.sub(r"2[^2]$", "x", s)</code></span>
<span class="comment-copy">+1: As well as being shorter than the accepted solution, this solution has the advantage that one can make as many replacements from the right as one wishes, just by changing the value of the second parameter in <code>rsplit()</code>. This was an advantage to me when I went looking for a solution to this problem because I would otherwise have had to use a loop to make multiple replacements.</span>
<span class="comment-copy">Very sorry, I just edited my question, make it clearer.</span>
