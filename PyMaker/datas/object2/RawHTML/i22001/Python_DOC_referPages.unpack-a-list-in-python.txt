<div class="post-text" itemprop="text">
<p>I think 'unpack' might be the wrong vocabulary here - apologies because I'm sure this is a duplicate question.</p>
<p>My question is pretty simple: in a function that expects a list of items, how can I pass a Python list item without getting an error?</p>
<pre><code>my_list = ['red', 'blue', 'orange']
function_that_needs_strings('red', 'blue', 'orange') # works!
function_that_needs_strings(my_list) # breaks!
</code></pre>
<p>Surely there must be a way to expand the list, and pass the function <code>'red','blue','orange'</code> on the hoof?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>function_that_needs_strings(*my_list) # works!
</code></pre>
<p><a href="https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists" rel="noreferrer">You can read all about it here.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use the <code>*args</code> (splat) syntax:</p>
<pre><code>function_that_needs_strings(*my_list)
</code></pre>
<p>where <code>my_list</code> can be any iterable; Python will loop over the given object and use each element as a separate argument to the function.</p>
<p>See the <a href="https://docs.python.org/2/reference/expressions.html#calls" rel="noreferrer">call expression documentation</a>.</p>
<p>There is a keyword-parameter equivalent as well, using two stars:</p>
<pre><code>kwargs = {'foo': 'bar', 'spam': 'ham'}
f(**kwargs)
</code></pre>
<p>and there is <a href="https://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters">equivalent syntax</a> for specifying catch-all arguments in a function signature:</p>
<pre><code>def func(*args, **kw):
    # args now holds positional arguments, kw keyword arguments
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.5 you can unpack unlimited amount of <code>list</code>s.</p>
<p><a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="noreferrer">PEP 448 - Additional Unpacking Generalizations</a></p>
<p>So this will work:</p>
<pre><code>a = ['1', '2', '3', '4']
b = ['5', '6']
function_that_needs_strings(*a, *b)
</code></pre>
</div>
<span class="comment-copy">My #1 gripe with Python is the difficulty of looking up neat stuff like the <code>*</code> operator. :)</span>
<span class="comment-copy">yea, how the heck would you have known how to do that in advance?</span>
<span class="comment-copy">If you search for "python apply" and read the docs there it points out the syntax there. "apply" is used in a number of languages in this way.</span>
<span class="comment-copy">That's what makes knowing many languages so important: You don't need to find out which cool features a particular language <i>has</i> but rather which features are missing or done differently!</span>
<span class="comment-copy">@Gary: work through the tutorial.</span>
<span class="comment-copy">-1 Assuming that your <code>csvfile</code> is a <code>csv.writer</code> object, its <code>writerow</code> method has only one arg. <code>*args</code> in a function/method call is just a short way of writing <code>arg[0], arg[1], ...</code>. The function or method must be capable of handling the args that you supply. <code>*args</code> is not voodoo that overrides the funtion/method arg declaration. Your example "works" only when <code>len(my_list) == 1</code>. This is the worst case of Gadarene upvoting that I've seen for a while.</span>
<span class="comment-copy">@John Machin: You missed the point of the question. I just copied the function from the question's first revision - but I changed it just for you.</span>
<span class="comment-copy">@THC4k: I'm well aware of the point of the question. Where you copied parts of your answer from is irrelevant. My point is that the first sentence of your answer was ludicrously wrong.</span>
<span class="comment-copy">Then I hereby declare that you were wrong by "assuming that your csvfile is a csv.writer object" :P I don't get the point of this discussion anyways.</span>
<span class="comment-copy">yeah, @THC4k got the answer right - my bad for posting the wrong function in the question first time around...</span>
<span class="comment-copy">how can I do the same with python 2.7 or 3.4?</span>
<span class="comment-copy">@answerSeeker not efficient, but <code>function_that_needs_strings(*(a+b))</code></span>
