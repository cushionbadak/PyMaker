<div class="post-text" itemprop="text">
<p>I use Python and MySQLdb to download web pages and store them into database. The problem I have is that I can't save complicated strings in the database because they are not properly escaped.</p>
<p>Is there a function in Python that I can use to escape a string for MySQL? I tried with <code>'''</code> (triple simple quotes) and <code>"""</code>, but it didn't work. I know that PHP has <code>mysql_escape_string()</code>, is something similar in Python?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>conn.escape_string()
</code></pre>
<p>See MySQL C API function mapping: <a href="http://mysql-python.sourceforge.net/MySQLdb.html" rel="noreferrer">http://mysql-python.sourceforge.net/MySQLdb.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The MySQLdb library will actually do this for you, if you use their implementations to build an SQL query string instead of trying to build your own.</p>
<p>Don't do:</p>
<pre><code>sql = "INSERT INTO TABLE_A (COL_A,COL_B) VALUES (%s, %s)" % (val1, val2)
cursor.execute(sql)
</code></pre>
<p>Do:</p>
<pre><code>sql = "INSERT INTO TABLE_A (COL_A,COL_B) VALUES (%s, %s)"
cursor.execute(sql, (val1, val2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; example = r"""I don't like "special" chars ¯\_(ツ)_/¯"""
&gt;&gt;&gt; example
'I don\'t like "special" chars \xc2\xaf\\_(\xe3\x83\x84)_/\xc2\xaf'
&gt;&gt;&gt; MySQLdb.escape_string(example)
'I don\\\'t like \\"special\\" chars \xc2\xaf\\\\_(\xe3\x83\x84)_/\xc2\xaf'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Use sqlalchemy's text function to remove the interpretation of special characters:</strong></p>
<p>Note the use of the function <code>text("your_insert_statement")</code> below.  What it does is communicate to sqlalchemy that all of the questionmarks and percent signs in the passed in string should be considered as literals.  </p>
<pre><code>import sqlalchemy
from sqlalchemy import text
from sqlalchemy.orm import sessionmaker
from datetime import datetime
import re

engine = sqlalchemy.create_engine("mysql+mysqlconnector://%s:%s@%s/%s"
     % ("your_username", "your_password", "your_hostname_mysql_server:3306",
     "your_database"),
     pool_size=3, pool_recycle=3600)

conn = engine.connect()

myfile = open('access2.log', 'r')
lines = myfile.readlines()

penguins = []
for line in lines:
   elements = re.split('\s+', line)

   print "item: " +  elements[0]
   linedate = datetime.fromtimestamp(float(elements[0]))
   mydate = linedate.strftime("%Y-%m-%d %H:%M:%S.%f")

   penguins.append(text(
     "insert into your_table (foobar) values('%%%????')"))

for penguin in penguins:
    print penguin
    conn.execute(penguin)

conn.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>{!a}</code> applies <code>ascii()</code> and hence escapes non-ASCII characters like quotes and even emoticons.
Here is an example</p>
<pre><code>cursor.execute("UPDATE skcript set author='{!a}',Count='{:d}' where url='{!s}'".format(authors),leng,url))
</code></pre>
<p><a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">Python3 docs</a></p>
</div>
<span class="comment-copy">Do <code>db_cur.execute('''UPDATE test_table SET field_1="%s" WHERE field_2="%s"''' % (data, condition))</code> Note the triple single quotes and double quotes around <code>%s</code></span>
<span class="comment-copy">+1 ... Perfect answer. Surprised to see so many complicated answers out there. Clearly, param'ed queries don't take into account for long strings (text) that is being stored.</span>
<span class="comment-copy">+1 I love the black and white HTML pages with swear words and code.</span>
<span class="comment-copy">_mysql.escape_string("input's " ) can also work to escape an ascii string for mysql. Apparently not for unicode though.  _mysql.escape_string( u"input's éh " )</span>
<span class="comment-copy">What are the parameters for this function?</span>
<span class="comment-copy">our equivalent would be MySQLdb.escape_string("")</span>
<span class="comment-copy">Somewhat upsetting that it forces quotation marks.  For example, if you were inserting into a conditional table (TABLE_A instead of 'TABLE_A'), you couldn't do it completely with this method.</span>
<span class="comment-copy">bozdoz, this is very much by design as it prevents SQL Injection. If you want to insert into a conditional table, first make sure there is no way a user submitted string can be used for the table name, and then just add it directly to the query.</span>
<span class="comment-copy">This is definitely the correct answer. Never know what new ways will exist to get around string escaping (Like we currently do over in the PHP world...). Just safer to do prepared statements always</span>
<span class="comment-copy">Hm. Seems as if StackOverflows highlighting algorithm doesn't know Pythons triple quotes.</span>
<span class="comment-copy">This is especially helpful for use in routines where the SQL string is constructed piecemeal.</span>
<span class="comment-copy">You mean function?</span>
<span class="comment-copy">Yes, corrected.</span>
<span class="comment-copy">does this work to escape single quotes?</span>
<span class="comment-copy">Your Sample Program link is broken, and single quotes are ascii</span>
