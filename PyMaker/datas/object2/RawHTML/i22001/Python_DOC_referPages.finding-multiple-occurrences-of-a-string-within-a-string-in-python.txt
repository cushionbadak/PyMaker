<div class="post-text" itemprop="text">
<p>How do I find multiple occurrences of a string within a string in Python? Consider this:</p>
<pre><code>&gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; text.find("ll")
1
&gt;&gt;&gt; 
</code></pre>
<p>So the first occurrence of <code>ll</code> is at 1 as expected. How do I find the next occurrence of it?</p>
<p>Same question is valid for a list. Consider:</p>
<pre><code>&gt;&gt;&gt; x = ['ll', 'ok', 'll']
</code></pre>
<p>How do I find all the <code>ll</code> with their indexes? </p>
</div>
<div class="post-text" itemprop="text">
<p>Using regular expressions, you can use <a href="http://docs.python.org/3/library/re.html#re.finditer"><code>re.finditer</code></a> to find all (non-overlapping) occurences:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = 'Allowed Hello Hollow'
&gt;&gt;&gt; for m in re.finditer('ll', text):
         print('ll found', m.start(), m.end())

ll found 1 3
ll found 10 12
ll found 16 18
</code></pre>
<p>Alternatively, if you don't want the overhead of regular expressions, you can also repeatedly use <a href="http://docs.python.org/3/library/stdtypes.html#str.find"><code>str.find</code></a> to get the <em>next</em> index:</p>
<pre><code>&gt;&gt;&gt; text = 'Allowed Hello Hollow'
&gt;&gt;&gt; index = 0
&gt;&gt;&gt; while index &lt; len(text):
        index = text.find('ll', index)
        if index == -1:
            break
        print('ll found at', index)
        index += 2 # +2 because len('ll') == 2

ll found at  1
ll found at  10
ll found at  16
</code></pre>
<p>This also works for lists and other sequences.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you are looking for is <code>string.count</code></p>
<pre><code>"Allowed Hello Hollow".count('ll')
&gt;&gt;&gt; 3
</code></pre>
<p>Hope this helps <br/>
NOTE: this only captures non-overlapping occurences</p>
</div>
<div class="post-text" itemprop="text">
<p>For the list example, use a comprehension:</p>
<pre><code>&gt;&gt;&gt; l = ['ll', 'xx', 'll']
&gt;&gt;&gt; print [n for (n, e) in enumerate(l) if e == 'll']
[0, 2]
</code></pre>
<p>Similarly for strings:</p>
<pre><code>&gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; print [n for n in xrange(len(text)) if text.find('ll', n) == n]
[1, 10, 16]
</code></pre>
<p>this will list adjacent runs of "ll', which may or may not be what you want:</p>
<pre><code>&gt;&gt;&gt; text = 'Alllowed Hello Holllow'
&gt;&gt;&gt; print [n for n in xrange(len(text)) if text.find('ll', n) == n]
[1, 2, 11, 17, 18]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>FWIW, here are a couple of non-RE alternatives that I think are neater than <a href="https://stackoverflow.com/questions/3873361/finding-multiple-occurrences-of-a-string-within-a-string-in-python/3873422#3873422">poke's solution</a>.</p>
<p>The first uses <code>str.index</code> and checks for <code>ValueError</code>:</p>
<pre><code>def findall(sub, string):
    """
    &gt;&gt;&gt; text = "Allowed Hello Hollow"
    &gt;&gt;&gt; tuple(findall('ll', text))
    (1, 10, 16)
    """
    index = 0 - len(sub)
    try:
        while True:
            index = string.index(sub, index + len(sub))
            yield index
    except ValueError:
        pass
</code></pre>
<p>The second tests uses <code>str.find</code> and checks for the sentinel of <code>-1</code> by using <code>iter</code>:</p>
<pre><code>def findall_iter(sub, string):
    """
    &gt;&gt;&gt; text = "Allowed Hello Hollow"
    &gt;&gt;&gt; tuple(findall_iter('ll', text))
    (1, 10, 16)
    """
    def next_index(length):
        index = 0 - length
        while True:
            index = string.find(sub, index + length)
            yield index
    return iter(next_index(len(sub)).next, -1)
</code></pre>
<p>To apply any of these functions to a list, tuple or other <em>iterable</em> of strings, you can use a <em>higher-level function</em> —one that takes a function as one of its arguments— like this one:</p>
<pre><code>def findall_each(findall, sub, strings):
    """
    &gt;&gt;&gt; texts = ("fail", "dolly the llama", "Hello", "Hollow", "not ok")
    &gt;&gt;&gt; list(findall_each(findall, 'll', texts))
    [(), (2, 10), (2,), (2,), ()]
    &gt;&gt;&gt; texts = ("parallellized", "illegally", "dillydallying", "hillbillies")
    &gt;&gt;&gt; list(findall_each(findall_iter, 'll', texts))
    [(4, 7), (1, 6), (2, 7), (2, 6)]
    """
    return (tuple(findall(sub, string)) for string in strings)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For your list example:</p>
<pre><code>In [1]: x = ['ll','ok','ll']

In [2]: for idx, value in enumerate(x):
   ...:     if value == 'll':
   ...:         print idx, value       
0 ll
2 ll
</code></pre>
<p>If you wanted all the items in a list that contained 'll', you could also do that.</p>
<pre><code>In [3]: x = ['Allowed','Hello','World','Hollow']

In [4]: for idx, value in enumerate(x):
   ...:     if 'll' in value:
   ...:         print idx, value
   ...:         
   ...:         
0 Allowed
1 Hello
3 Hollow
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; for n,c in enumerate(text):
...   try:
...     if c+text[n+1] == "ll": print n
...   except: pass
...
1
10
16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Brand new to programming in general and working through an online tutorial. I was asked to do this as well, but only using the methods I had learned so far (basically strings and loops). Not sure if this adds any value here, and I know this isn't how you would do it, but I got it to work with this:</p>
<pre><code>needle = input()
haystack = input()
counter = 0
n=-1
for i in range (n+1,len(haystack)+1):
   for j in range(n+1,len(haystack)+1):
      n=-1
      if needle != haystack[i:j]:
         n = n+1
         continue
      if needle == haystack[i:j]:
         counter = counter + 1
print (counter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This version should be linear in length of the string, and should be fine as long as the sequences aren't too repetitive (in which case you can replace the recursion with a while loop).</p>
<pre><code>def find_all(st, substr, start_pos=0, accum=[]):
    ix = st.find(substr, start_pos)
    if ix == -1:
        return accum
    return find_all(st, substr, start_pos=ix + 1, accum=accum + [ix])
</code></pre>
<p>bstpierre's list comprehension is a good solution for short sequences, but looks to have quadratic complexity and never finished on a long text I was using.</p>
<pre><code>findall_lc = lambda txt, substr: [n for n in xrange(len(txt))
                                   if txt.find(substr, n) == n]
</code></pre>
<p>For a random string of non-trivial length, the two functions give the same result:</p>
<pre><code>import random, string; random.seed(0)
s = ''.join([random.choice(string.ascii_lowercase) for _ in range(100000)])

&gt;&gt;&gt; find_all(s, 'th') == findall_lc(s, 'th')
True
&gt;&gt;&gt; findall_lc(s, 'th')[:4]
[564, 818, 1872, 2470]
</code></pre>
<p>But the quadratic version is about 300 times slower</p>
<pre><code>%timeit find_all(s, 'th')
1000 loops, best of 3: 282 µs per loop

%timeit findall_lc(s, 'th')    
10 loops, best of 3: 92.3 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/usr/local/bin python3
#-*- coding: utf-8 -*-

main_string = input()
sub_string = input()

count = counter = 0

for i in range(len(main_string)):
    if main_string[i] == sub_string[0]:
        k = i + 1
        for j in range(1, len(sub_string)):
            if k != len(main_string) and main_string[k] == sub_string[j]:
                count += 1
                k += 1
        if count == (len(sub_string) - 1):
            counter += 1
        count = 0

print(counter) 
</code></pre>
<p>This program counts the number of all substrings even if they are overlapped without the use of regex. But this is a naive implementation and for better results in worst case it is advised to go through either Suffix Tree, KMP and other string matching data structures and algorithms.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my function for finding multiple occurrences. Unlike the other solutions here, it supports the optional start and end parameters for slicing, just like <code>str.index</code>:</p>
<pre><code>def all_substring_indexes(string, substring, start=0, end=None):
    result = []
    new_start = start
    while True:
        try:
            index = string.index(substring, new_start, end)
        except ValueError:
            return result
        else:
            result.append(index)
            new_start = index + len(substring)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple iterative code which returns a list of indices where the substring occurs.</p>
<pre><code>        def allindices(string, sub):
           l=[]
           i = string.find(sub)
           while i &gt;= 0:
              l.append(i)
              i = string.find(sub, i + 1)
           return l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split to get relative positions then sum consecutive numbers in a list and add (string length * occurence order) at the same time to get the wanted string indexes.  </p>
<pre><code>&gt;&gt;&gt; key = 'll'
&gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; x = [len(i) for i in text.split(key)[:-1]]
&gt;&gt;&gt; [sum(x[:i+1]) + i*len(key) for i in range(len(x))]
[1, 10, 16]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe not so Pythonic, but somewhat more self-explanatory. It returns the position of the word looked in the original string. </p>
<pre><code>def retrieve_occurences(sequence, word, result, base_counter):
     indx = sequence.find(word)
     if indx == -1:
         return result
     result.append(indx + base_counter)
     base_counter += indx + len(word)
     return retrieve_occurences(sequence[indx + len(word):], word, result, base_counter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This <a href="http://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/" rel="nofollow noreferrer">link</a> explains how to do the whole thing in O(n) and includes a solution in python as well.</p>
<p>If you go further down the sets to '<a href="http://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/" rel="nofollow noreferrer">Suffix trees</a>' you'd be able to do the same thing if you had one big string but wanted to search for 1000s of patterns in it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think there's no need to test for length of text; just keep finding until there's nothing left to find. Like this:</p>
<pre><code>    &gt;&gt;&gt; text = 'Allowed Hello Hollow'
    &gt;&gt;&gt; place = 0
    &gt;&gt;&gt; while text.find('ll', place) != -1:
            print('ll found at', text.find('ll', place))
            place = text.find('ll', place) + 2


    ll found at 1
    ll found at 10
    ll found at 16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do it with conditional list comprehension like this:</p>
<pre><code>string1= "Allowed Hello Hollow"
string2= "ll"
print [num for num in xrange(len(string1)-len(string2)+1) if string1[num:num+len(string2)]==string2]
# [1, 10, 16]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had randomly gotten this idea just a while ago. Using a While loop with string splicing and string search can work, even for overlapping strings.</p>
<pre><code>findin = "algorithm alma mater alison alternation alpines"
search = "al"
inx = 0
num_str = 0

while True:
    inx = findin.find(search)
    if inx == -1: #breaks before adding 1 to number of string
        break
    inx = inx + 1
    findin = findin[inx:] #to splice the 'unsearched' part of the string
    num_str = num_str + 1 #counts no. of string

if num_str != 0:
    print("There are ",num_str," ",search," in your string.")
else:
    print("There are no ",search," in your string.")
</code></pre>
<p>I'm an amateur in Python Programming (Programming of any language, actually), and am not sure what other issues it could have, but I guess it's working fine?</p>
<p>I guess lower() could be used somewhere in it too if needed.</p>
</div>
<span class="comment-copy">&gt;&gt;&gt; text.count("ll")</span>
<span class="comment-copy">Is there no way to do it without using regular expressions?</span>
<span class="comment-copy">Not that I have any problem, but just curious.</span>
<span class="comment-copy">@poke: This is what I was looking for (wrt edit)</span>
<span class="comment-copy">lists don't have <code>find</code>. But it works with <code>index</code>, you just need to <code>except ValueError</code> instead of testing for -1</span>
<span class="comment-copy">now that you mention the whole <code>index += 2</code> thing, if you apply this to the string 'lllll', it will miss two out of four occurrences of 'll'. Best to stick with <code>index += 1</code> for strings too.</span>
<span class="comment-copy">I need the index.</span>
<span class="comment-copy">Wow I like this. Thank you. This is perfect.</span>
<span class="comment-copy">This is extremely inefficient.</span>
<span class="comment-copy">@Clément post a more efficient example</span>
<span class="comment-copy">@sirvon did you look at the accepted answer?</span>
<span class="comment-copy">@Clément print [n for n in xrange(len(text)) if text[n-1:n] == 'll']</span>
<span class="comment-copy">Nice. Thank you!</span>
