<div class="post-text" itemprop="text">
<p>I want to get a running total from a list of numbers.</p>
<p>For demo purposes, I start with a sequential list of numbers using <code>range</code></p>
<pre><code>a = range(20)

runningTotal = []
for n in range(len(a)):
    new = runningTotal[n-1] + a[n] if n &gt; 0 else a[n]
    runningTotal.append(new)

# This one is a syntax error
# runningTotal = [a[n] for n in range(len(a)) if n == 0 else runningTotal[n-1] + a[n]]

for i in zip(a, runningTotal):
    print "{0:&gt;3}{1:&gt;5}".format(*i)
</code></pre>
<p>yields</p>
<pre><code>  0    0
  1    1
  2    3
  3    6
  4   10
  5   15
  6   21
  7   28
  8   36
  9   45
 10   55
 11   66
 12   78
 13   91
 14  105
 15  120
 16  136
 17  153
 18  171
 19  190
</code></pre>
<p>As you can see, I initialize an empty list <code>[]</code>, then <code>append()</code> in each loop iteration. Is there a more elegant way to this, like a list comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p>A list comprehension has no good (clean, portable) way to refer to the very list it's building. One good and elegant approach might be to do the job in a generator:</p>
<pre><code>def running_sum(a):
  tot = 0
  for item in a:
    tot += item
    yield tot
</code></pre>
<p>to get this as a list instead, of course, use <code>list(running_sum(a))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you can use <a href="http://numpy.scipy.org/" rel="noreferrer">numpy</a>, it has a built-in function named <code>cumsum</code> that does this.</p>
<pre><code>import numpy
tot = numpy.cumsum(a)  # returns a numpy.ndarray
tot = list(tot)        # if you prefer a list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>This can be implemented in 2 lines in Python.</em></p>
<p>Using a default parameter eliminates the need to maintain an aux variable outside, and then we just do a <code>map</code> to the list.</p>
<pre><code>def accumulate(x, l=[0]): l[0] += x; return l[0];
map(accumulate, range(20))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure about 'elegant', but I think the following is much simpler and more intuitive (at the cost of an extra variable):</p>
<pre><code>a = range(20)

runningTotal = []

total = 0
for n in a:
  total += n
  runningTotal.append(total)
</code></pre>
<p>The functional way to do the same thing is:</p>
<pre><code>a = range(20)
runningTotal = reduce(lambda x, y: x+[x[-1]+y], a, [0])[1:]
</code></pre>
<p>...but that's much less readable/maintainable, etc.</p>
<p>@Omnifarous suggests this should be improved to:</p>
<pre><code>a = range(20)
runningTotal = reduce(lambda l, v: (l.append(l[-1] + v) or l), a, [0])
</code></pre>
<p>...but I still find that less immediately comprehensible than my initial suggestion.</p>
<p>Remember the words of Kernighan: "Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it."</p>
</div>
<div class="post-text" itemprop="text">
<p>When we take the sum of a list, we designate an accumulator (<code>memo</code>) and then walk through the list, applying the binary function "x+y" to each element and the accumulator. Procedurally, this looks like:</p>
<pre><code>def mySum(list):
    memo = 0
    for e in list:
        memo = memo + e
    return memo
</code></pre>
<p>This is a common pattern, and useful for things other than taking sums — we can generalize it to any binary function, which we'll supply as a parameter, and also let the caller specify an initial value. This gives us a function known as <code>reduce</code>, <code>foldl</code>, or <code>inject</code><sup>[1]</sup>:</p>
<pre><code>def myReduce(function, list, initial):
    memo = initial
    for e in list:
        memo = function(memo, e)
    return memo

def mySum(list):
    return myReduce(lambda memo, e: memo + e, list, 0)
</code></pre>
<p>In Python 2, <code>reduce</code> was a built-in function, but in Python 3 it's been moved to the <code>functools</code> module:</p>
<pre><code>from functools import reduce
</code></pre>
<p>We can do all kinds of cool stuff with <code>reduce</code> depending on the function we supply as its the first argument. If we replace "sum" with "list concatenation", and "zero" with "empty list", we get the (shallow) <code>copy</code> function:</p>
<pre><code>def myCopy(list):
    return reduce(lambda memo, e: memo + [e], list, [])

myCopy(range(10))
&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>If we add a <code>transform</code> function as another parameter to <code>copy</code>, and apply it before concatenating, we get <code>map</code>:</p>
<pre><code>def myMap(transform, list):
    return reduce(lambda memo, e: memo + [transform(e)], list, [])

myMap(lambda x: x*2, range(10))
&gt; [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</code></pre>
<p>If we add a <code>predicate</code> function that takes <code>e</code> as a parameter and returns a boolean, and use it to decide whether or not to concatenate, we get <code>filter</code>:</p>
<pre><code>def myFilter(predicate, list):
    return reduce(lambda memo, e: memo + [e] if predicate(e) else memo, list, [])

myFilter(lambda x: x%2==0, range(10))
&gt; [0, 2, 4, 6, 8]
</code></pre>
<p><code>map</code> and <code>filter</code> are sort of unfancy ways of writing list comprehensions — we could also have said <code>[x*2 for x in range(10)]</code> or <code>[x for x in range(10) if x%2==0]</code>. There's no corresponding list comprehension syntax for <code>reduce</code>, because <code>reduce</code> isn't required to return a list at all (as we saw with <code>sum</code>, earlier, which Python also happens to offer as a built-in function).</p>
<p>It turns out that for computing a running sum, the list-building abilities of <code>reduce</code> are exactly what we want, and probably the most elegant way to solve this problem, despite its reputation (along with <code>lambda</code>) as something of an un-pythonic shibboleth. The version of <code>reduce</code> that leaves behind copies of its old values as it runs is called <code>reductions</code> or <code>scanl</code><sup>[1]</sup>, and it looks like this:</p>
<pre><code>def reductions(function, list, initial):
    return reduce(lambda memo, e: memo + [function(memo[-1], e)], list, [initial])
</code></pre>
<p>So equipped, we can now define:</p>
<pre><code>def running_sum(list):
    first, rest = list[0], list[1:]
    return reductions(lambda memo, e: memo + e, rest, first)

running_sum(range(10))
&gt; [0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</code></pre>
<p>While conceptually elegant, this precise approach fares poorly in practice with Python. Because Python's <code>list.append()</code> mutates a list in place but doesn't return it, we can't use it effectively in a lambda, and have to use the <code>+</code> operator instead. This constructs a whole new list, which takes time proportional to the length of the accumulated list so far (that is, an O(n) operation). Since we're already inside the O(n) <code>for</code> loop of <code>reduce</code> when we do this, the overall time complexity compounds to O(n<sup>2</sup>).</p>
<p>In a language like Ruby<sup>[2]</sup>, where <code>array.push e</code> returns the mutated <code>array</code>, the equivalent runs in O(n) time:</p>
<pre><code>class Array
  def reductions(initial, &amp;proc)
    self.reduce [initial] do |memo, e|
      memo.push proc.call(memo.last, e)
    end
  end
end

def running_sum(enumerable)
  first, rest = enumerable.first, enumerable.drop(1)
  rest.reductions(first, &amp;:+)
end

running_sum (0...10)
&gt; [0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</code></pre>
<p>same in JavaScript<sup>[2]</sup>, whose <code>array.push(e)</code> returns <code>e</code> (not <code>array</code>), but whose anonymous functions allow us to include multiple statements, which we can use to separately specify a return value:</p>
<pre><code>function reductions(array, callback, initial) {
    return array.reduce(function(memo, e) {
        memo.push(callback(memo[memo.length - 1], e));
        return memo;
    }, [initial]);
}

function runningSum(array) {
    var first = array[0], rest = array.slice(1);
    return reductions(rest, function(memo, e) {
        return x + y;
    }, first);
}

function range(start, end) {
    return(Array.apply(null, Array(end-start)).map(function(e, i) {
        return start + i;
    }
}

runningSum(range(0, 10));
&gt; [0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</code></pre>
<p>So, how can we solve this while retaining the conceptual simplicity of a <code>reductions</code> function that we just pass <code>lambda x, y: x + y</code> to in order to create the running sum function? Let's rewrite <code>reductions</code> procedurally. We can fix the <a href="http://accidentallyquadratic.tumblr.com/" rel="nofollow noreferrer">accidentally quadratic</a> problem, and while we're at it, pre-allocate the result list to avoid heap thrashing<sup>[3]</sup>:</p>
<pre><code>def reductions(function, list, initial):
    result = [None] * len(list)
    result[0] = initial
    for i in range(len(list)):
        result[i] = function(result[i-1], list[i])
    return result

def running_sum(list):
    first, rest = list[0], list[1:]
    return reductions(lambda memo, e: memo + e, rest, first)

running_sum(range(0,10))
&gt; [0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</code></pre>
<p>This is the sweet spot for me: O(n) performance, and the optimized procedural code is tucked away under a meaningful name where it can be re-used the next time you need to write a function that accumulates intermediate values into a list.</p>
<ol>
<li>The names <code>reduce</code>/<code>reductions</code> come from the LISP tradition, <code>foldl</code>/<code>scanl</code> from the ML tradition, and <code>inject</code> from the Smalltalk tradition.</li></ol></div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate()</code></a>. Here is an example:</p>
<pre><code>from itertools import accumulate

a = range(20)
runningTotals = list(accumulate(a))

for i in zip(a, runningTotals):
    print "{0:&gt;3}{1:&gt;5}".format(*i)
</code></pre>
<p>This only works on Python 3. On Python 2 you can use the backport in the <a href="https://pypi.org/project/more-itertools/" rel="nofollow noreferrer">more-itertools</a> package.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wanted to do the same thing to generate cumulative frequencies that I could use bisect_left over - this is the way I've generated the list;</p>
<pre><code>[ sum( a[:x] ) for x in range( 1, len(a)+1 ) ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a linear time solution one liner:</p>
<pre><code>list(reduce(lambda (c,s), a: (chain(c,[s+a]), s+a), l,(iter([]),0))[0])
</code></pre>
<p>Example:</p>
<pre><code>l = range(10)
list(reduce(lambda (c,s), a: (chain(c,[s+a]), s+a), l,(iter([]),0))[0])
&gt;&gt;&gt; [0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</code></pre>
<p>In short, the reduce goes over the list accumulating sum and constructing an list. The final <code>x[0]</code> returns the list, <code>x[1]</code> would be the running total value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another one-liner, in linear time and space.</p>
<pre><code>def runningSum(a):
    return reduce(lambda l, x: l.append(l[-1]+x) or l if l else [x], a, None)
</code></pre>
<p>I'm stressing linear space here, because most of the one-liners I saw in the other proposed answers --- those based on the pattern <code>list + [sum]</code> or using <code>chain</code> iterators --- generate O(n) lists or generators and stress the garbage collector so much that they perform very poorly, in comparison to this.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a coroutine for this:</p>
<pre><code>def runningTotal():
    accum = 0
    yield None
    while True:
        accum += yield accum

tot = runningTotal()
next(tot)
running_total = [tot.send(i) for i in xrange(N)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for two things: fold (reduce) and a funny function that keeps a list of the results of another function, which I have called running. I made versions both with and without an initial parameter; either way these need to go to reduce with an initial [].</p>
<pre><code>def last_or_default(list, default):
    if len(list) &gt; 0:
        return list[-1]
    return default

def initial_or_apply(list, f, y):
    if list == []:
        return [y]
    return list + [f(list[-1], y)]

def running_initial(f, initial):
    return (lambda x, y: x + [f(last_or_default(x,initial), y)])

def running(f):
    return (lambda x, y: initial_or_apply(x, f, y))

totaler = lambda x, y: x + y
running_totaler = running(totaler)
running_running_totaler = running_initial(running_totaler, [])

data = range(0,20)
running_total = reduce(running_totaler, data, [])
running_running_total = reduce(running_running_totaler, data, [])

for i in zip(data, running_total, running_running_total):
    print "{0:&gt;3}{1:&gt;4}{2:&gt;83}".format(*i)
</code></pre>
<p>These will take a long time on really large lists due to the + operator. In a functional language, if done correctly, this list construction would be O(n).</p>
<p>Here are the first few lines of output:</p>
<pre><code>0   0                      [0]
1   1                   [0, 1]
2   3                [0, 1, 3]
3   6             [0, 1, 3, 6]
4  10         [0, 1, 3, 6, 10]
5  15     [0, 1, 3, 6, 10, 15]
6  21 [0, 1, 3, 6, 10, 15, 21]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is inefficient as it does it every time from beginning but possible it is:</p>
<pre><code>a = range(20)
runtot=[sum(a[:i+1]) for i,item in enumerate(a)]
for line in zip(a,runtot):
    print line
</code></pre>
</div>
<span class="comment-copy">On Python 3 you should use <code>itertools.accumulate(a)</code></span>
<span class="comment-copy">This "exploits" a Python feature that has tripped me up before. I like it, but fear that it makes for a nasty trap if related code ever needs to be debugged!</span>
<span class="comment-copy">More like 4 PEP-8 lines :)</span>
<span class="comment-copy">An official "accumulate" function is now available in Python 3 as <code>from itertools import accumulate</code>.  Also, while clever, satoru's "accumulate" implementation will break as soon as you try running it a second time.</span>
<span class="comment-copy">downvoted, because as @sffc said, this will give you an incorrect result when running more than once</span>
<span class="comment-copy">+1 for the debugging quote, emphasizing the un-readability of the reduce example :)</span>
<span class="comment-copy">I would've written the <code>reduce</code> as <code>reduce(lambda l, v: (l.append(l[-1] + v) or l), a, [0])</code></span>
<span class="comment-copy">@Omnifarious, +1 for being more readable</span>
<span class="comment-copy">@Satoru.Logic - I think dismissing <code>reduce</code> by making the code purposely more obscure than it has to be is rather disingenuous.  I also think there is a bit of towing the party line that reduce is scary and you shouldn't program functionally in Python.</span>
<span class="comment-copy">@Omnifarious Me too. I never use FP in Python until I have to do so.</span>
<span class="comment-copy">You just resurrected a 5-year-old thread, but, thank you! I learned a lot: especially by knowing that it's a common pattern, and that there are best practices for it.</span>
<span class="comment-copy">Minor bug: you would need to fix your indexes by 1 in <code>reductions</code> in a few places; or you can rewrite reductions to automatically grab the first item of the list as an initial value (same as built-in <code>reduce</code>). Alternatively, you can just create a function that appends to and returns a list, and replace <code>.append</code> in your original <code>O(N^2)</code> with that function.</span>
<span class="comment-copy">Also, do you think <code>itertools.accumulate</code> is essentially the same as your <code>reductions</code>, or there are some meaningful differences between the two (besides returning iterator vs list)?</span>
<span class="comment-copy">This is an old question with a lot of old answers, but in 2015 this is the best solution.</span>
<span class="comment-copy">I hope your list isn't very long... that's O(len(a)^2) right there that is.</span>
<span class="comment-copy">slightly shorter version (and using xrange): [ sum(a[:x+1]) for x in xrange(len(a)) ]</span>
<span class="comment-copy">This is very elegant! I go a bit stuck on the 'or l' part until I've realized it's short for <code>...; return(l)</code></span>
<span class="comment-copy">alex's answer is much cleaner but i'll leave this one up as an example of why not to use coroutines</span>
<span class="comment-copy">This answer does have the virtue of allowing the interpreter to allocate a list of the appropriate size to hold the result right up front.  I suspect the interpreter is generally not that smart yet though.</span>
