<div class="post-text" itemprop="text">
<p>With the Time module in python is it possible to measure elapsed time? If so, how do I do that? </p>
<p>I need to do this so that if the cursor has been in a widget for a certain duration an event happens.  </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>start_time = time.time()
# your code
elapsed_time = time.time() - start_time
</code></pre>
<p>You can also write simple decorator to simplify measurement of execution time of various functions:</p>
<pre><code>import time
from functools import wraps

PROF_DATA = {}

def profile(fn):
    @wraps(fn)
    def with_profiling(*args, **kwargs):
        start_time = time.time()

        ret = fn(*args, **kwargs)

        elapsed_time = time.time() - start_time

        if fn.__name__ not in PROF_DATA:
            PROF_DATA[fn.__name__] = [0, []]
        PROF_DATA[fn.__name__][0] += 1
        PROF_DATA[fn.__name__][1].append(elapsed_time)

        return ret

    return with_profiling

def print_prof_data():
    for fname, data in PROF_DATA.items():
        max_time = max(data[1])
        avg_time = sum(data[1]) / len(data[1])
        print "Function %s called %d times. " % (fname, data[0]),
        print 'Execution time max: %.3f, average: %.3f' % (max_time, avg_time)

def clear_prof_data():
    global PROF_DATA
    PROF_DATA = {}
</code></pre>
<p>Usage:</p>
<pre><code>@profile
def your_function(...):
    ...
</code></pre>
<p>You can profile more then one function simultaneously. Then to print measurements just call the print_prof_data():</p>
</div>
<div class="post-text" itemprop="text">
<p><code>time.time()</code> will do the job.</p>
<pre><code>import time

start = time.time()
# run your code
end = time.time()

elapsed = end - start
</code></pre>
<p>You may want to look at <a href="https://stackoverflow.com/questions/85451/python-time-clock-vs-time-time-accuracy">this</a> question, but I don't think it will be necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>For users that want better formatting,</p>
<pre><code>import time
start_time = time.time()
# your script
elapsed_time = time.time() - start_time
time.strftime("%H:%M:%S", time.gmtime(elapsed_time))
</code></pre>
<p>will print out, for 2 seconds:</p>
<pre><code>'00:00:02'
</code></pre>
<p>and for 7 minutes one second:</p>
<pre><code>'00:07:01'
</code></pre>
<p>note that the minimum time unit with gmtime is seconds. If you need microseconds consider the following:</p>
<pre><code>import datetime
start = datetime.datetime.now()
# some code
end = datetime.datetime.now()
elapsed = end - start
print(elapsed)
# or
print(elapsed.seconds,":",elapsed.microseconds) 
</code></pre>
<p>strftime <a href="http://strftime.org/" rel="noreferrer">documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For the best measure of elapsed time (since Python 3.3), use <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="noreferrer"><code>time.perf_counter()</code></a>.</p>
<blockquote>
<p>Return the value (in fractional seconds) of a performance counter, i.e. a clock with the highest available resolution to measure a short duration. It does include time elapsed during sleep and is system-wide. The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid.</p>
</blockquote>
<p>For measurements on the order of hours/days, you don't care about sub-second resolution so use <a href="https://docs.python.org/3/library/time.html#time.monotonic" rel="noreferrer"><code>time.monotonic()</code></a> instead.</p>
<blockquote>
<p>Return the value (in fractional seconds) of a monotonic clock, i.e. a clock that cannot go backwards. The clock is not affected by system clock updates. The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid.</p>
</blockquote>
<p>In many implementations, these may actually be the same thing.</p>
<p>Before 3.3, you're stuck with <a href="https://docs.python.org/3/library/time.html#time.clock" rel="noreferrer"><code>time.clock()</code></a>.</p>
<blockquote>
<p>On Unix, return the current processor time as a floating point number expressed in seconds. The precision, and in fact the very definition of the meaning of “processor time”, depends on that of the C function of the same name.</p>
<p>On Windows, this function returns wall-clock seconds elapsed since the first call to this function, as a floating point number, based on the Win32 function QueryPerformanceCounter(). The resolution is typically better than one microsecond.</p>
</blockquote>
<hr/>
<h3>Update for Python 3.7</h3>
<p>New in Python 3.7 is <a href="https://www.python.org/dev/peps/pep-0564/" rel="noreferrer">PEP 564</a> -- Add new time functions with nanosecond resolution.</p>
<p>Use of these can further eliminate rounding and floating-point errors, especially if you're measuring very short periods, or your application (or Windows machine) is long-running.</p>
<p>Resolution starts breaking down on <code>perf_counter()</code> after around 100 days. So for example after a year of uptime, the shortest interval (greater than 0) it can measure will be bigger than when it started.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to import time and then use time.time() method to know current time. </p>
<pre><code>import time

start_time=time.time() #taking current time as starting time

#here your code

elapsed_time=time.time()-start_time #again taking current time - starting time 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a longer period.</p>
<pre><code>import time
start_time = time.time()
...
e = int(time.time() - start_time)
print('{:02d}:{:02d}:{:02d}'.format(e // 3600, (e % 3600 // 60), e % 60))
</code></pre>
<p>would print</p>
<pre><code>00:03:15
</code></pre>
<p>if more than 24 hours</p>
<pre><code>25:33:57
</code></pre>
<p>That is inspired by Rutger Hofste's answer. Thank you Rutger!</p>
</div>
<div class="post-text" itemprop="text">
<p>Vadim Shender response is great. You can also use a simpler decorator like below:</p>
<pre><code>import datetime
def calc_timing(original_function):                            
    def new_function(*args,**kwargs):                        
        start = datetime.datetime.now()                     
        x = original_function(*args,**kwargs)                
        elapsed = datetime.datetime.now()                      
        print("Elapsed Time = {0}".format(elapsed-start))     
        return x                                             
    return new_function()  

@calc_timing
def a_func(*variables):
    print("do something big!")
</code></pre>
</div>
<span class="comment-copy">N.B. that any answer using <code>time.time()</code> is incorrect. The simplest example is if the system time gets changed during the measurement period.</span>
<span class="comment-copy">For your original question regarding firing an event if a cursor stays for a certain duration on a widget, <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">docs.python.org/3/library/threading.html</a> provides all you need, I think. Multithreading and a condition variable with timeout might be one of the solutions. Your circumstances, however, are currently unclear to answer.</span>
<span class="comment-copy">There is no reason anyone should be using <code>time.time()</code> to measure elapsed time in modern python (affected by manual changes, drift, leap seconds etc). <a href="https://stackoverflow.com/a/47637891/5623232">This answer below</a> needs to be higher, considering this question is now top result in Google for measuring elapsed time.</span>
<span class="comment-copy">You can measure time with the cProfile profiler as well: <a href="https://docs.python.org/3/library/profile.html#module-cProfile" rel="nofollow noreferrer">docs.python.org/3/library/profile.html#module-cProfile</a> <a href="https://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script" title="how can you profile a python script">stackoverflow.com/questions/582336/…</a></span>
<span class="comment-copy">You can also take a look at <a href="http://pypi.python.org/pypi/profilehooks" rel="nofollow noreferrer">profilehooks</a> <code>pip install profilehooks</code>, and its <a href="http://mg.pov.lt/profilehooks/" rel="nofollow noreferrer">homepage here</a></span>
<span class="comment-copy">Note that since Python 3.3, one should probably use <code>time.monotonic()</code> rather then <code>time.time()</code> when measuring timeouts or durations. <a href="https://docs.python.org/3/library/time.html#time.monotonic" rel="nofollow noreferrer">docs.python.org/3/library/time.html#time.monotonic</a></span>
<span class="comment-copy">Worth adding/noting here that the unit of measure for elapsed time will be seconds.</span>
<span class="comment-copy">@EricKramer thank you! huge pet peev of mine, explaining measurements without defining the unit of measurement.  And as a .NET guy dipping his toes into Python for the first time, I automatically thought "milliseconds".</span>
<span class="comment-copy">Doesn't work if (e.g.) the system clock is changed, and may not have subsecond resolution. Correct answer: <a href="https://stackoverflow.com/a/47637891/476716">stackoverflow.com/a/47637891/476716</a></span>
<span class="comment-copy">This is the time in seconds, right?</span>
<span class="comment-copy">Yes, time is in seconds</span>
<span class="comment-copy">Thank you for your answer, which inspires me. I am going to use <code>e = time.time() - start_time ; print("%02d:%02d:%02d" % (e // 3600, (e % 3600 // 60), (e % 60 // 1)))</code> that yields almost same as well as covering the situation elapsing more than 24 hours.</span>
<span class="comment-copy">@Tora you might want to check out "{}".format() instead of %02d for future compatibility issues.</span>
<span class="comment-copy">thank you! Now I am getting used to the new one. '{:02d}:{:02d}:{:02d}'.format(e // 3600, (e % 3600 // 60), e % 60)</span>
