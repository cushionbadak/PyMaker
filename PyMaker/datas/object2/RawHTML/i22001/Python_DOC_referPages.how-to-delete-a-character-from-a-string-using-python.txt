<div class="post-text" itemprop="text">
<p>There is a string, for example. <code>EXAMPLE</code>.</p>
<p>How can I remove the middle character, i.e., <code>M</code> from it? I don't need the code. I want to know:</p>
<ul>
<li>Do strings in Python end in any special character?</li>
<li>Which is a better way - shifting everything right to left starting from the middle character OR creation of a new string and not copying the middle character?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In Python, strings are immutable, so you have to create a new string.  You have a few options of how to create the new string.  If you want to remove the 'M' wherever it appears:</p>
<pre><code>newstr = oldstr.replace("M", "")
</code></pre>
<p>If you want to remove the central character:</p>
<pre><code>midlen = len(oldstr)/2
newstr = oldstr[:midlen] + oldstr[midlen+1:]
</code></pre>
<p>You asked if strings end with a special character.  No, you are thinking like a C programmer.  In Python, strings are stored with their length, so any byte value, including <code>\0</code>, can appear in a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is probably the best way:</p>
<pre><code>original = "EXAMPLE"
removed = original.replace("M", "")
</code></pre>
<p>Don't worry about shifting characters and such. Most Python code takes place on a much higher level of abstraction.</p>
</div>
<div class="post-text" itemprop="text">
<p>To replace a specific position:</p>
<pre><code>s = s[:pos] + s[(pos+1):]
</code></pre>
<p>To replace a specific character:</p>
<pre><code>s = s.replace('M','')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable. But you can convert them to a list, which is mutable, and then convert the list back to a string after you've changed it.</p>
<pre><code>s = "this is a string"

l = list(s)  # convert to list

l[1] = ""    # "delete" letter h (the item actually still exists but is empty)
l[1:2] = []  # really delete letter h (the item is actually removed from the list)
del(l[1])    # another way to delete it

p = l.index("a")  # find position of the letter "a"
del(l[p])         # delete it

s = "".join(l)  # convert back to string
</code></pre>
<p>You can also create a new string, as others have shown, by taking everything <em>except</em> the character you want from the existing string.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How can I remove the middle character, i.e., M from it?</p>
</blockquote>
<p>You can't, because strings in Python are <a href="http://en.wikipedia.org/wiki/Immutable_object" rel="nofollow noreferrer">immutable</a>.</p>
<blockquote>
<p>Do strings in Python end in any special character?</p>
</blockquote>
<p>No. They are similar to lists of characters; the length of the list defines the length of the string, and no character acts as a terminator.</p>
<blockquote>
<p>Which is a better way - shifting everything right to left starting from the middle character OR creation of a new string and not copying the middle character?</p>
</blockquote>
<p>You cannot modify the existing string, so you must create a new one containing everything except the middle character.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/2/library/string.html#string.translate" rel="nofollow noreferrer"><code>translate()</code></a> method:</p>
<pre><code>&gt;&gt;&gt; s = 'EXAMPLE'
&gt;&gt;&gt; s.translate(None, 'M')
'EXAPLE'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/userdict.html#UserString.MutableString" rel="nofollow noreferrer">UserString.MutableString</a></p>
<p>Mutable way:</p>
<pre><code>import UserString

s = UserString.MutableString("EXAMPLE")

&gt;&gt;&gt; type(s)
&lt;type 'str'&gt;

# Delete 'M'
del s[3]

# Turn it for immutable:
s = str(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>card = random.choice(cards)
cardsLeft = cards.replace(card, '', 1)
</code></pre>
<p><strong>How to remove one character from a string:</strong>
Here is an example where there is a stack of cards represented as characters in a string.
One of them is drawn (import random module for the random.choice() function, that picks a random character in the string).
A new string, cardsLeft, is created to hold the remaining cards given by the string function replace() where the last parameter indicates that only one "card" is to be replaced by the empty string...</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def kill_char(string, n): # n = position of which character you want to remove
    begin = string[:n]    # from beginning to n (n not included)
    end = string[n+1:]    # n+1 through end of string
    return begin + end
print kill_char("EXAMPLE", 3)  # "M" removed
</code></pre>
<p>I have seen this somewhere <a href="http://www.codingbat.com/python" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's what I did to slice out the "M":</p>
<pre><code>s = 'EXAMPLE'
s1 = s[:s.index('M')] + s[s.index('M')+1:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to delete/ignore characters in a string, and, for instance, you have this string,</p>
<p>"[11:L:0]"</p>
<p>from a web API response or something like that, like a CSV file, let's say you are using requests</p>
<pre><code>import requests
udid = 123456
url = 'http://webservices.yourserver.com/action/id-' + udid
s = requests.Session()
s.verify = False
resp = s.get(url, stream=True)
content = resp.content
</code></pre>
<p>loop and get rid of unwanted chars:</p>
<pre><code>for line in resp.iter_lines():
  line = line.replace("[", "")
  line = line.replace("]", "")
  line = line.replace('"', "")
</code></pre>
<p>Optional split, and you will be able to read values individually:</p>
<pre><code>listofvalues = line.split(':')
</code></pre>
<p>Now accessing each value is easier:</p>
<pre><code>print listofvalues[0]
print listofvalues[1]
print listofvalues[2]
</code></pre>
<p>This will print</p>
<blockquote>
<blockquote>
<p>11</p>
<p>L</p>
<p>0</p>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>from random import randint


def shuffle_word(word):
    newWord=""
    for i in range(0,len(word)):
        pos=randint(0,len(word)-1)
        newWord += word[pos]
        word = word[:pos]+word[pos+1:]
    return newWord

word = "Sarajevo"
print(shuffle_word(word))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To delete a <code>char</code> or a <code>sub-string</code> <strong>once</strong> (only the first occurrence):       </p>
<pre><code>main_string = main_string.replace(sub_str, replace_with, 1)
</code></pre>
<p>NOTE: Here <code>1</code> can be replaced with any <code>int</code> for the number of occurrence you want to replace. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use list comprehension.</p>
<p>Assume that you have the string: <code>my name is</code> and you want to remove character <code>m</code>. use the following code:</p>
<pre><code>"".join([x for x in "my name is" if x is not 'm'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable in Python so both your options mean the same thing basically.</p>
</div>
<span class="comment-copy">Some examples <a href="https://www.journaldev.com/23674/python-remove-character-from-string" rel="nofollow noreferrer">journaldev.com/23674/python-remove-character-from-string</a></span>
<span class="comment-copy">Given that the questioner is brand new to python, it might be worth noting that while in version 2.X python the "/" operator returns an integer (truncated towards zero), in version 3.X python you should use "//" instead. Also, the line <code>from __future__ import division</code> at the beginning of your script will make version 2.X python act like version 3.X</span>
<span class="comment-copy">Note that if "M" is the only contents of the line, "" leaves behind an empty line in its place.</span>
<span class="comment-copy">@7SpecialGems it depends entirely on what you do with this string.  An empty string like <code>""</code> doesn't imply an empty line.  If you put it in a list, and join it with newlines, then it will make an empty line, but there are lots of other places you might use an empty string that won't do that.</span>
<span class="comment-copy"><code>M</code> might not be unique. In that case, this will replace all the <code>M</code>s, right?</span>
<span class="comment-copy">Yes, that's correct.  If you only want to replace <code>n</code> occurrences, use <code>original.replace("M", "", n)</code>.</span>
<span class="comment-copy">@Lazer: Try it and see.</span>
<span class="comment-copy">@S.Lott I took that to be rhetorical, to suggest providing the solution for only replacing only one instance</span>
<span class="comment-copy">While this may work, I think your answer could be improved by explaining what is going on in the first part, since the substring operations are not necessarily easy to understand for a Python newbie without any explanation.</span>
<span class="comment-copy">So if the length of s is <code>l</code>. Then for the first part,  the constraint for pos should be <code>l-1 &gt; pos &gt;= 0</code>.</span>
<span class="comment-copy">Why wouldn't you just the use the <code>str.replace</code> method?</span>
<span class="comment-copy">The method has changed. See the docs for Python 3: <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer">translate()</a> This replaces different characters with space (<code>None</code> to remove seems not to work): <code>translate( str.maketrans("&lt;&gt;", "  ") )</code></span>
<span class="comment-copy">Actually, the docs specify two ways to remove different characters with translate() in Python 3, : <code>str.maketrans( "", "", "&lt;&gt;")</code> and <code>str.maketrans( {"&lt;":None,"&gt;":None })</code></span>
<span class="comment-copy">The equivalent of the code in the answer became this in python3: <code>'EXAMPLE'.translate({ord("M"): None})</code></span>
<span class="comment-copy">404 website no import</span>
<span class="comment-copy">This would only work this specific string and is not a general solution.</span>
<span class="comment-copy">While this code snippet may solve the question, <a href="http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers">including an explanation</a> really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion.</span>
