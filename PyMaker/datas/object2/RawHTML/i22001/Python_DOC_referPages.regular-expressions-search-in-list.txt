<div class="post-text" itemprop="text">
<p>I want to filter strings in a list based on a regular expression.</p>
<p>Is there something better than <code>[x for x in list if r.match(x)]</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create an <strong>iterator</strong> in Python 3.x or a <strong>list</strong> in Python 2.x by using:</p>
<pre><code>filter(r.match, list)
</code></pre>
<p>To convert the Python 3.x <em>iterator</em> to a list, simply cast it; <code>list(filter(..))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Full Example (Python 3):</strong><br/>
<strong>For Python 2.x look into Note below</strong></p>
<pre><code>import re

mylist = ["dog", "cat", "wildcat", "thundercat", "cow", "hooo"]
r = re.compile(".*cat")
newlist = list(filter(r.match, mylist)) # Read Note
print(newlist)
</code></pre>
<p>Prints:</p>
<pre><code>['cat', 'wildcat', 'thundercat']
</code></pre>
<hr/>
<p><strong>Note:</strong></p>
<p>For Python 2.x users, <a href="https://docs.python.org/2/library/functions.html#filter" rel="noreferrer"><code>filter</code></a> returns a list already. In <a href="https://docs.python.org/3/library/functions.html#filter" rel="noreferrer">Python 3.x <code>filter</code></a> was changed to return an iterator so it has to be converted to <code>list</code> (in order to see it printed out nicely).</p>
<p><a href="http://rextester.com/RDBZLH81559" rel="noreferrer">Python 3 code example</a> <br/>
<a href="http://rextester.com/YTISE81276" rel="noreferrer">Python 2.x code example</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Just in case someone comes here in future, there is another pythonic way to do it. First you need to create the <code>regex</code> and then then <code>filter</code></p>
<pre><code>import re

inilist =["dog", "cat", "wildcat", "thundercat", "cow", "hooo"]
regex = re.compile(r'.*cat')
selectobj = filter(regex.search, inilist)
selectobj
</code></pre>
<p>results:</p>
<pre><code>['cat', 'wildcat', 'thundercat']
</code></pre>
</div>
<span class="comment-copy">Actually, list comprehensions are usually prefered over functional constructs such as filter, reduce, lambda, etc.</span>
<span class="comment-copy">@Ivo: They are usually preferred because they're usually clearer and often more succinct. However in this case, the <code>filter</code> version is perfectly clear and has much less noise.</span>
<span class="comment-copy">what is <code>r.match</code> here?</span>
<span class="comment-copy">@rbatt <code>r.match</code> is a method that, when applied to a given string,  finds whether the regex <code>r</code> matches that string (and returns a corresponding match object if so, but that doesn't matter in this case as we just care whether the result is truthy)</span>
<span class="comment-copy">Hi there, When I run the above code, I get <code>&lt;filter object at 0x1057acda0&gt;</code> What am I doing wrong?</span>
<span class="comment-copy">According to python docs (python 2.7.12): <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#filter</a> filter returns a list not an object. You can also check that code:  <a href="https://repl.it/X3G/5786" rel="nofollow noreferrer">repl.it/X3G/5786</a>  (just hit run)</span>
<span class="comment-copy">Thank you. I am using Python 3.5.2 on a Mac. I tried your link. Of course it works, though not sure why I get that msg. I even removed the <code>str</code> since <code>filter</code> returns a list anyway, to no avail...</span>
<span class="comment-copy">@joshua you've probably figured this out by now but try <code>print(list(newlist))</code> or <code>print([i for i in newlist])</code></span>
<span class="comment-copy">@James Draper  Thank you James. It was a good reminder.</span>
<span class="comment-copy">That's literally what the accepted answer suggests</span>
<span class="comment-copy">@leoluk Yes, but it shows greater detail and is probably more useful to those who ask questions vs answer questions on SO. You have 9K reputation!  Of course you don't need any other details! :)</span>
