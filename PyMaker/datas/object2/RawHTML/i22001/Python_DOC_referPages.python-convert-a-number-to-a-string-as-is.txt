<div class="post-text" itemprop="text">
<p>Using Python 2.6
<br/><br/><br/>
I want to be able to convert numbers such as 00000, 000.00004 and 001 to strings. Such that each string is '00000', '000.00004' and '001' respectively.</p>
<p>It is also necessary that the way to do this is the same with all numbers, and also copes when letters are fed into it. E.g. foo should become 'foo', 2bar should be become '2bar' but 001 should still be '001'.</p>
<p><br/>
Using str([object]) the above numbers would go to '0', '4e-05' and '1' respectively.
<br/><br/><br/><br/>
Any ideas?</p>
<p>EDIT:</p>
<p>@unholysampler (and everyone else) you are of course right.</p>
<p>I was simply getting confused because Sqlite3 was taking strings and then converting them to integers or floating point numbers when putting them into it's database, despite it being declared as a string column. But this is another issue entirely.
<br/> <br/></p>
<p>SECOND EDIT:</p>
<p>If anybody was curious why Sqlite3 was doing that, it was because I had actually set the column to be of type 'STRING' in the schema, where it should have been type 'TEXT' (see <a href="http://www.sqlite.org/datatype3.html" rel="nofollow">http://www.sqlite.org/datatype3.html</a>) - this was combined with Sqlite's "dynamic typing" (see <a href="http://www.sqlite.org/faq.html#q3" rel="nofollow">http://www.sqlite.org/faq.html#q3</a>) and was enough to make me confused :-)</p>
<p>Thank you for giving nice answers anyway :D</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no number 0000 or 001. There is only 0 and 1. If you want to produce a string representation of a number, you can use <a href="http://docs.python.org/library/string.html#string-formatting" rel="nofollow">string formatting</a> to pad zeros.</p>
<pre><code>n = 1
print '%03d' % n //001
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first step would be: however you are getting a number that you think should be 00000 instead of 0 ... don't actually convert it to a number. Just keep it as a string.</p>
</div>
<span class="comment-copy">Be careful, a leading 0 means that the number representation is octal. print 010 --&gt; 8</span>
<span class="comment-copy">but it doesn't mean that 001 or 0000000001 doesn't exist in any system. Python - seems to fail to read these..     "jack": [001, 25, "HR" ],                 ^ SyntaxError: invalid token</span>
<span class="comment-copy">The syntax error is new for Python3. An <a href="https://docs.python.org/3/reference/lexical_analysis.html#integer-literals" rel="nofollow noreferrer">integer literal</a> that starts with <code>0</code> is used writing numbers as binary, octal or hexadecimal. However, the prefix expects a second character that specifies which format. It seems like the value 0 can be written as a literal with any number of <code>0</code>s, which is why the invalid token points to the <code>1</code>. In python2, a literal that started with <code>0</code> is always octal, but it was removed because it is too easy for people to think it is just a normal integer literal.</span>
