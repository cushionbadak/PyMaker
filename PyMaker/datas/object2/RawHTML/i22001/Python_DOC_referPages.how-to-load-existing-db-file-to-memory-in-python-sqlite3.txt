<div class="post-text" itemprop="text">
<p>I have an existing <code>sqlite3</code> db file, on which I need to make some extensive calculations. Doing the calculations from the file is painfully slow, and as the file is not large (~<code>10 MB</code>), so there should be no problem to load it into memory.</p>
<p>Is there a Pythonic way to load the existing file into memory in order to speed up the calculations?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the snippet that I wrote for my flask application:</p>
<pre><code>import sqlite3
from StringIO import StringIO

def init_sqlite_db(app):
    # Read database to tempfile
    con = sqlite3.connect(app.config['SQLITE_DATABASE'])
    tempfile = StringIO()
    for line in con.iterdump():
        tempfile.write('%s\n' % line)
    con.close()
    tempfile.seek(0)

    # Create a database in memory and import from tempfile
    app.sqlite = sqlite3.connect(":memory:")
    app.sqlite.cursor().executescript(tempfile.read())
    app.sqlite.commit()
    app.sqlite.row_factory = sqlite3.Row
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/sqlite3.html#sqlite3.Connection.iterdump" rel="noreferrer"><code>sqlite3.Connection.iterdump</code></a> "[r]eturns an iterator to dump the database in an SQL text format. Useful when saving an in-memory database for later restoration. This function provides the same capabilities as the <code>.dump</code> command in the sqlite3 shell."</p>
<p>Get such an iterator and dump the disk-based database into a memory-based one, and you're ready to compute. When the computation is done, just dump the other way around back to disk.</p>
</div>
<div class="post-text" itemprop="text">
<p>First you should try and find out what is causing the slowness you are observing. Are you writing to tables? Are your writes within large enough <a href="http://www.sqlite.org/lang_transaction.html" rel="noreferrer">transactions</a> so that you don't save needless temporary results to disk? Can you change writes to go to temporary tables (with <a href="http://www.sqlite.org/pragma.html#pragma_temp_store" rel="noreferrer"><code>pragma temp_store=memory</code></a>)? Can you live with <a href="http://www.sqlite.org/pragma.html#pragma_synchronous" rel="noreferrer"><code>pragma synchronous=off</code></a>?</p>
<p>I don't think this functionality is exposed in the Python module, but sqlite has a <a href="http://sqlite.org/c3ref/backup_finish.html" rel="noreferrer">backup API</a> that sounds like exactly what you are asking for: a way to copy from one database to another (either one of which may be an in-memory database) that works pretty much automatically without any user-visible enumeration of tables. (Maybe <a href="http://code.google.com/p/apsw/" rel="noreferrer">APSW</a> exposes this?)</p>
<p>Another option is to create a ram disk (if you have sufficient control of the environment) and copy the file there.</p>
</div>
<div class="post-text" itemprop="text">
<p>if we must use a python wrapper,then there are no better solution than the two pass, read and write solution. 
but beginning with version 3.7.17, SQLite has the option of accessing disk content directly using memory-mapped I/O.<a href="http://www.sqlite.org/mmap.html" rel="noreferrer">sqlite mmap</a></p>
<p>if you want to use mmap,you have to use the C interface since no wrapper provide it.</p>
<p>and there is another hardware solution,the memory disk.then you have the convenient file IO and the speed of memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>This has already been answered before, including code examples at <a href="https://stackoverflow.com/questions/3826552">In python, how can I load a sqlite db completely to memory before connecting to it?</a></p>
<p>You do not mention operating system, but one gotcha of Windows XP is that it defaults to a 10MB file cache, no matter how much memory you have.  (This made sense in the days when systems came with 64MB etc).  This message has several links:</p>
<p><a href="http://marc.info/?l=sqlite-users&amp;m=116743785223905&amp;w=2" rel="nofollow noreferrer">http://marc.info/?l=sqlite-users&amp;m=116743785223905&amp;w=2</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a relatively simple way to read a SQLite db into memory. Depending upon your preferences with regard to manipulating data, you either use Pandas dataframe  or write your table to a in-memory sqlite3 database. Similarly after manipulating your data you use the same df.to_sqlite approach to store your results back into a db table.</p>
<pre><code>import sqlite3 as lite
from pandas.io.sql import read_sql
from sqlalchemy import create_engine

engine = create_engine('sqlite://')
c = engine.connect()
conmem = c.connection
con = lite.connect('ait.sqlite', isolation_level=None) #Here is the connection to &lt;ait.sqlite&gt; residing on disk
cur = con.cursor()
sqlx = 'SELECT * FROM Table'
df = read_sql(sqlx, con, coerce_float=True, params=None) 

#Read SQLite table into a panda dataframe
df.to_sql(con=conmem, name='Table', if_exists='replace', flavor='sqlite')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.backup" rel="nofollow noreferrer"><code>sqlite3.Connection.backup(...)</code></a>? "This method makes a backup of a SQLite database even while itâ€™s being accessed by other clients, or concurrently by the same connection." Availability: SQLite 3.6.11 or higher. New in version 3.7.</p>
<pre><code>import sqlite3

source = sqlite3.connect('existing_db.db')
dest = sqlite3.connect(':memory:')
source.backup(dest)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>sqlite supports in-memory databases.</p>
<p>In python, you would use a <strong>:memory:</strong> database name for that.</p>
<p>Perhaps you could open two databases (one from the file, an empty one in-memory), migrate everything from the file database into memory, then use the in-memory database further to do calculations.</p>
</div>
<span class="comment-copy">That's great, but how do you restore that dump into a memory database?</span>
<span class="comment-copy">Connect to the file-based database and dump the other way around. It's not pretty, but if your calculations are really expensive, it will pay off.</span>
<span class="comment-copy">Wohoo! Works like a charm.</span>
<span class="comment-copy">so no one is going to give an example of code?</span>
<span class="comment-copy">Thanks for the profound answer. I'm only reading from it, so a simple copy-to-memory trick will do.</span>
<span class="comment-copy">This is a very good advice. I've divided my performance by a 3x factor, running on Windows. Plus it supports implicitly VFS tables (I use R*Tree and FTS) w/o any extra copy or backup operation. Note you don't need C to enable this, just use a <code>PRAGMA mmap_size=268435456</code> like command, so it works with any language that supports SQLite (I use C#).</span>
<span class="comment-copy">Is there a fast way to transfer the database? Moving each table is not elegant.</span>
<span class="comment-copy">This answer basically just repeats the question.</span>
