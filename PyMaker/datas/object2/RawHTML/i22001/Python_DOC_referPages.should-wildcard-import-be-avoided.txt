<div class="post-text" itemprop="text">
<p>I'm using PyQt and am running into this issue.  If my import statements are:</p>
<pre><code>from PyQt4.QtCore import *
from PyQt4.QtGui import *
</code></pre>
<p>then pylint gives hundreds of "Unused import" warnings.  I'm hesitant to just turn them off, because there might be other unused imports that are actually useful to see.  Another option would be to do this:</p>
<pre><code>from PyQt4.QtCore import Qt, QPointF, QRectF
from PyQt4.QtGui import QGraphicsItem, QGraphicsScene, ...
</code></pre>
<p>and I end up having 9 classes on the QtGui line.  There's a third option, which is:</p>
<pre><code>from PyQt4 import QtCore, QtGui
</code></pre>
<p>and then prefix all the classes with QtCore or QtGui whenever I use them.</p>
<p>At this point I'm agnostic as to which one I end up doing in my project, although the last one seems the most painful from my perspective.  What are the common practices here?  Are there technical reason to use one style over the other?</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer to your question's title is "yes": I recommend never using <code>from ... import *</code>, and I discussed the reasons in another very recent answer.  Briefly, qualified names are <em>good</em>, barenames are very limited, so the "third option" is optimal (as you'll be using qualified names, not barenames) among those you present.</p>
<p>(Advantages of qualified names wrt barenames include ease of faking/mocking for testing purposes, reduced to nullified risk of unnoticed errors induced by accidental rebinding, ability to "semi-fake" the top name in a "tracing class" for the purpose of logging exactly what you're using and easing such activities as profiling, and so forth -- disadvantages, just about none... see also the last-but-not-least koan in the Zen of Python, <code>import this</code> at the interactive interpreter prompt).</p>
<p>Equally good, if you grudge the 7 extra characters to say <code>QtCore.whatever</code>, is to abbreviate -- <code>from PyQt4 import QtCore as Cr</code> and <code>from PyQt4 import QtGi as Gu</code> (then use <code>Cr.blah</code> and <code>Gu.zorp</code>) or the like.  Like all abbreviations, it's a style tradeoff between conciseness and clarity (would you rather name a variable <code>count_of_all_widgets_in_the_inventory</code>, <code>num_widgets</code>, or <code>x</code>? often the middle choice would be best, but not always;-).</p>
<p>BTW, I would not use more than one <code>as</code> clause in a single <code>from</code> or <code>import</code> statement (could be confusing), I'd rather have multiple statements (also easier to debug if any import is giving problem, to edit if you change your imports in the future, ...).</p>
</div>
<div class="post-text" itemprop="text">
<p>There are also good cases for <code>import *</code>. ie. it's common for Django developers to have many config files and chain them using import *:</p>
<pre><code>settings.py:
FOO = 1
BAR = 2
DEBUG = False

test_settings.py:
from settings import *
DEBUG = True
</code></pre>
<p>In this case most disadvantages of <code>import *</code> become advantages.  </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer">Python doc</a> says:</p>
<p><code>Although certain modules are designed to export only names that follow certain patterns when you use import *, it is still considered bad practise in production code.</code></p>
<p>It can have side effects and be very difficult to debug</p>
<p>Personnaly, I am using <code>import</code> rather than <code>from import</code> because I find awful big declarations at the beginning of the file and I think it keeps the code more readable</p>
<pre><code>import PyQt4

PyQt4.QtCore
</code></pre>
<p>If the module name is too long and can be renamed locally with the <code>as</code> keyword. For example:</p>
<pre><code> import PyQt4.QtCore as Qc
</code></pre>
<p>I hope it helps</p>
</div>
<div class="post-text" itemprop="text">
<p>I use the "import *" for the PyQt modules I use, but I put them in their own module, so it doesn't pollute the namespace of the user. e.g.</p>
<p>In qt4.py:</p>
<pre>
 from PyQt4.QtCore import *
 from PyQt4.QtGui import *
</pre>
<p>Then use it like this</p>
<pre>
 import qt4
 app = qt4.QApplication(...)
</pre>
</div>
<div class="post-text" itemprop="text">
<p>import for PyQt4 is a special case.<br/>
sometimes I'll choose the "first option" for quick and dirty coding, and turn it to the "second option" when the code grows longer and longer.<br/>
namespace collision maybe not a big deal here, I haven't see other package'name starts with a big "Q". and whenever I finish a PyQt4 script. convert"from PyQt4.QtGui import *" to sth. like "</p>
<pre><code>from PyQt4.QtGui import (QApplication, QDialog, QLineEdit, QTextBrowser,
                         QVBoxLayout)
</code></pre>
<p>"
just FYI, <a href="http://www.python.org/dev/peps/pep-0328/#rationale-for-parentheses" rel="nofollow noreferrer">parentheses for multi-line import</a> is handy here.</p>
</div>
<span class="comment-copy">I starred this question because I want to see the answer, but I'm also curious as to why one would do this.  Usually I only import what I need, and I know what I need, so I only import those things.  Maybe I'm being naive, but it would seem to me that the "pain" of typing QtCore.something would be better(autofill?) than wasting processor time importing hundreds of unused items.  I know doing so would get me blasted in a code review.  They ask me about every import I use.</span>
<span class="comment-copy">I would agree with you for professional code, but for personal scripts or projects, it's not as big an issue.  Especially since the import is probably going to happen right at program launch, so it shouldn't affect running performance, just startup time.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/2386714/3357935">Why is “import *” bad?</a></span>
<span class="comment-copy">Another advantage of qualified - you can't import everything in a huge lib like PyQt, and then accidentally cause a namespace collision with something you didn't know was there.</span>
<span class="comment-copy">maybe there is a typo, "import from this" -&gt; "import this"</span>
<span class="comment-copy">@sunq, yep you're right, thanks, let me edit to fix.</span>
<span class="comment-copy">This answer is outdated for one special case in my opinion:  It's good to use wildcard imports in "<b>init</b>.py" files to import from modules that define <code>__all__</code>.</span>
<span class="comment-copy">Such files are one-hit-wonders that are designed to be imported by star. PyQt4.QtGui does not qualify! C-;</span>
<span class="comment-copy">@Phlip Agree, but the title of this post is "Should wildcard import be avoided?" not "Should wildcard import be avoided <b>in PyQt4</b>?"</span>
<span class="comment-copy">I think this answer is needed in showing good scenarios, not just picking the main scenario and saying it's bad. It's like saying "Should I drive my car on a road", and someone says "yes" and someone else says "not if there are 'no entry' signs".</span>
<span class="comment-copy">So if you had a mouse event handler, for example, you might have a line like this: "if event.buttons() &amp; PyQt4.QtCore.Qt.LeftButton:"? That doesn't seem as readable as "if event.buttons() &amp; Qt.LeftButton:"</span>
<span class="comment-copy">If it gets too long I do: import PyQt4.QtCore.Qt at Qc and then Qc.LeftButton</span>
<span class="comment-copy">I meant :  import PyQt4.QtCore.Qt as Qc</span>
<span class="comment-copy">Isn't this equivalent to "import PyQt4.QtCore as qt4"? I guess you'd need separate namespaces for QtCore and QtGui if you did that, but that doesn't seem like such a bad thing.</span>
<span class="comment-copy">It's equivalent, if there's only one import in qt4.py. I've not found the distinction between the QtCore, QtGui, etc... very useful when programming.</span>
<span class="comment-copy">This is a nice solution that gets around the cruft at the top of source files. The Qt modules do not conflict with one another, so this introduces no problems as far as I can tell.</span>
