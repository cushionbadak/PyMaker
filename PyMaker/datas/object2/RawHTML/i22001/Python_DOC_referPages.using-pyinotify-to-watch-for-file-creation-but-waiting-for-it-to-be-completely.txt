<div class="post-text" itemprop="text">
<p>I'm using pyinotify to watch a folder for when files are created in it. And when certain files are created I want to move them. The problem is that as soon as the file is created (obviously), my program tries to move it, even before it's completely written to disk.</p>
<p>Is there a way to make pyinotify wait until a file is completely written to disk before notifying me that it's been created? Or is there any easy way to, after I'm notified, make python wait to move it until it's done being written?</p>
</div>
<div class="post-text" itemprop="text">
<p>Have pyinotify react to <a href="https://github.com/seb-m/pyinotify/wiki/Events-types" rel="nofollow noreferrer">IN_CLOSE_WRITE</a> events:</p>
<pre><code>wm.add_watch(watched_dir, pyinotify.IN_CLOSE_WRITE, proc_fun=MyProcessEvent())
</code></pre>
<p>This is from <code>man 5 incrontab</code>, but it applies equally well to pyinotify:</p>
<pre><code>   IN_ACCESS           File was accessed (read) (*)
   IN_ATTRIB           Metadata changed (permissions, timestamps, extended attributes, etc.) (*)
   IN_CLOSE_WRITE      File opened for writing was closed (*)
   IN_CLOSE_NOWRITE    File not opened for writing was closed (*)
   IN_CREATE           File/directory created in watched directory (*)
   IN_DELETE           File/directory deleted from watched directory (*)
   IN_DELETE_SELF           Watched file/directory was itself deleted
   IN_MODIFY           File was modified (*)
   IN_MOVE_SELF        Watched file/directory was itself moved
   IN_MOVED_FROM       File moved out of watched directory (*)
   IN_MOVED_TO         File moved into watched directory (*)
   IN_OPEN             File was opened (*)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is quite difficult to tell at this level if a file is being written to. What you can do is test to see if a file is opened by some other process. </p>
<p>1) From the various flags that are used while opening a file, O_EXLOCK flag might be of help.
If the O_EXLOCK flag is set, the file descriptor has an exclusive lock on the file.
So my understanding is if you can do os.open() with O_EXLOCK flag, it's not open by other process. 
This should work on all posix compatible OS but I have not tested it. If the file, is open then you could close, wait and retry again.</p>
<p>2) You can also try os.stat and see changing time stamp and try to safely interpret the information. Though this is not fool proof. </p>
<p>3)
On unix systems, you can try "lsof"</p>
<p>4) The following page describes use of symlinks from /proc/PID/fd to test for open files</p>
<ul>
<li><a href="http://www.gossamer-threads.com/lists/python/python/639874" rel="nofollow">http://www.gossamer-threads.com/lists/python/python/639874</a> </li>
</ul>
<p>[Edit : Links updated]</p>
<ul>
<li><a href="https://launchpad.net/ubuntu/%2Bsource/lsof" rel="nofollow">https://launchpad.net/ubuntu/%2Bsource/lsof</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you have control of the writing process, you could call the file "foo.part" while it is being written to and rename it to "foo" when it has been closed.</p>
</div>
<span class="comment-copy">Note that this will catch modifications, as well as creations (if you're mirroring the directory that might be desired behaviour). If you only want to trigger on detection of <i>new</i> files, you will need a custom handler which tracks <code>IN_CREATE</code> events and then waits for them to finish (via watching the <code>IN_CLOSE_WRITE</code> events also).</span>
<span class="comment-copy">How to get file names?</span>
<span class="comment-copy">@NPE: Define <code>MyProcessEvent</code> as a subclass of <code>pyinotify.ProcessEvent</code> with a <code>process_IN_CLOSE_WRITE</code> method. When a CLOSE_WRITE event occurs, <code>process_IN_CLOSE_WRITE</code> will be called with argument, <code>event</code>. <code>event.pathname</code> is the path to the file which has been closed.  See <a href="https://github.com/seb-m/pyinotify/blob/master/python2/examples/tutorial_notifier.py" rel="nofollow noreferrer">this, for example</a>.</span>
<span class="comment-copy">@unutbu Great explanation, how to get file name?</span>
<span class="comment-copy">@NPE: You could use <a href="https://docs.python.org/3/library/os.path.html#os.path.basename" rel="nofollow noreferrer"><code>os.path.basename(event.pathname)</code></a>.</span>
