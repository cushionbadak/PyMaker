<div class="post-text" itemprop="text">
<p>Just as the title says. I want to write a script that behaves differently depending on whether it's running inside a console window or in IDLE. Is there an object that exists only when running in IDLE that I can check for? An environment variable?</p>
<p>I'm using Python 2.6.5 and 2.7 on Windows.</p>
<h3>Edit:</h3>
<p><em>The answers given so far work. But I'm looking for an official way to do this, or one that doesn't look like a hack. If someone comes up with one, I'll accept that as the answer. Otherwise, in a few days, I'll accept the earliest answer. Thanks, everyone!</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Google found me <a href="http://www.velocityreviews.com/forums/t320691-re-check-if-running-under-idle.html" rel="noreferrer">this</a> forum post from 2003. With Python 3.1 (for win32) and the version of IDLE it comes with, len(sys.modules) os 47 in the command line but 122 in the IDLE shell.</p>
<p>But why do you need to care anyway? Tkinter code has some annoyances when run with IDLE (since the latter uses tkinter itself), but otherwise I think I'm safe to assume you shouldn't have to care.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would prefer to do:</p>
<pre><code>import sys
print('Running IDLE' if 'idlelib.run' in sys.modules else 'Out of IDLE')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest packing all the code in one function (Python 3):</p>
<pre><code>def RunningIntoPythonIDLE():

    import idlelib.PyShell

    def frames(frame = sys._getframe()):
        _frame = frame
        while _frame :
            yield _frame
            _frame = _frame.f_back

    return idlelib.PyShell.main.__code__ in [frame.f_code for frame in frames()]
</code></pre>
<p>So tkinter apps can do its check:</p>
<pre><code>if not RunningIntoPythonIDLE():
    root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My suggestion is to get list of all running frames and check if main Idle method would be in there.</p>
<pre><code>def frames(frame = sys._getframe()):
    _frame = frame
    while _frame :
        yield _frame
        _frame = _frame.f_back
import idlelib.PyShell
print(idlelib.PyShell.main.func_code in [frame.f_code for frame in frames()])
</code></pre>
<p>the frames function generates frames running at moment of its declaration, so you can check if idle were here.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm a touch late, but since IDLE replaces the standard streams with custom objects (<a href="https://docs.python.org/3/library/idle.html" rel="nofollow noreferrer">and that is documented</a>), those can be checked to determine whether a script is running in IDLE:</p>
<pre><code>import sys

def in_idle():
    try:
        return sys.stdin.__module__.startswith('idlelib')
    except AttributeError:
        return True
</code></pre>
</div>
<span class="comment-copy">Hmm... sys.modules is a dict, with some keys that start with "idlelib.", so I could check for that. But it sounds like a hack, so I'd like to avoid it. They can even have different lengths (2.6.5:149, 2.7:152).</span>
<span class="comment-copy">Well, I guess this isn't possible without ugly hacks. That's the reason I ask why you think you need to...</span>
<span class="comment-copy">With the console, I want to be able to clear the screen, move the cursor, add color, use msvcrt.getch, etc.  Most of those don't seem to work in IDLE, and some will even fail silently, so instead of letting that happen, I'd rather make it check if it's running in IDLE or not.</span>
<span class="comment-copy">Well, I fear you're out of luck here. Unless you want to hack around, that is. Sorry.</span>
<span class="comment-copy">One might care because <a href="http://stackoverflow.com/a/21199005/2738262">multiprocessing examples tend to run poorly in IDLE</a>.</span>
<span class="comment-copy">This does not work with Python 2.7.2. Try to search for 'idlelib.__main__' instead</span>
<span class="comment-copy">It works in 2.7.3, just rerun it in IDLE command line and CMD in windowsXP and by running the script in both.</span>
<span class="comment-copy">If you save this as a script and open it in IDLE from the right-click context menu, then it doesn't work. If you open IDLE first then open the script, it works. The method I suggested works in both cases [This is a known "feature" of IDLE: in the first case, it opens both the script and the interpreter in the same process]</span>
<span class="comment-copy">It works, but if it wasn't opened with a script, then it returns False. But there are other idlelib objects in it like &lt;code object runcode at 00B9AE30, file "C:\Python26\lib\idlelib\run.py", line 287&gt;. (tried with 2.6)</span>
