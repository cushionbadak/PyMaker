<div class="post-text" itemprop="text">
<p>I'm implementing a Unix userland tool that needs to store a hash on the disk. The hash will be read every run of the program, pretty frequently. The hash needs to store "name:path" values only.</p>
<p>I looked at the <a href="https://docs.python.org/2/library/bsddb.html" rel="nofollow noreferrer">bsddb</a> standard library module for python, but I can see it will be deprecated in Python 3. I also saw the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a> standard library module.</p>
<p>I'm not a python guy, so what is the efficient way for hash serialization and frequent open/read/close operations?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would start with the <a href="http://docs.python.org/library/shelve.html" rel="nofollow noreferrer">shelve</a> module and see if that isn't too slow. It does exactly what you want.</p>
<pre><code>import shelve

d = shelve.open('filename')

d['name'] = 'path'

d.close()
</code></pre>
<p>or to read from it</p>
<pre><code>d = shelve.open('filename')

d = hash['name']
</code></pre>
<p>It's essentially a wrapper around pickle that provides a dictionary abstraction.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd use pickle and see if it's fast enough for your needs. </p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest you use pickle / shelve for serialization of data.</p>
<ul>
<li><a href="http://www.saltycrane.com/blog/2008/01/saving-python-dict-to-file-using-pickle/" rel="nofollow noreferrer">http://www.saltycrane.com/blog/2008/01/saving-python-dict-to-file-using-pickle/</a></li>
<li><a href="http://docs.python.org/library/shelve.html" rel="nofollow noreferrer">http://docs.python.org/library/shelve.html</a></li>
</ul>
</div>
<span class="comment-copy">+1 Cool, never heard of that module before. -0.1 for shadowing <code>hash</code>, though. :o) ... ok, that's been removed now.</span>
<span class="comment-copy">@jellybean, something looked wrong to me. changed it to <code>d</code> to reflect the fact that it's essentially a dict. good looking out.</span>
