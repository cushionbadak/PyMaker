<div class="post-text" itemprop="text">
<p>Is there a more idiomatic way to sum string lengths in Python than by using a loop?</p>
<pre><code>length = 0
for string in strings:
    length += len(string)
</code></pre>
<p>I tried <code>sum()</code>, but it only works for integers:</p>
<pre><code>&gt;&gt;&gt; sum('abc', 'de')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sum() can't sum strings [use ''.join(seq) instead]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know this is an old question, but I can't help noting that the Python error message <em>tells</em> you how to do this: </p>
<pre><code>TypeError: sum() can't sum strings [use ''.join(seq) instead]
</code></pre>
<p>So:</p>
<pre><code>&gt;&gt;&gt; strings = ['abc', 'de']
&gt;&gt;&gt; print len(''.join(strings))
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>length = sum(len(s) for s in strings)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My first way to do it would be <code>sum(map(len, strings))</code>. Another way is to use a list comprehension or generator expression as the other answers have posted.</p>
</div>
<div class="post-text" itemprop="text">
<p>The shortest and fastest way is apply a <a href="https://en.wikipedia.org/wiki/Functional_programming" rel="noreferrer">functional programming style</a> with <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><em>map()</em></a> and <a href="https://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><em>sum()</em></a>:</p>
<pre><code>&gt;&gt;&gt; data = ['a', 'bc', 'def', 'ghij']
&gt;&gt;&gt; sum(map(len, data))
10
</code></pre>
<p>In Python 2, use <a href="https://docs.python.org/2.7/library/itertools.html#itertools.imap" rel="noreferrer"><em>itertools.imap</em></a> instead of <em>map</em> for better memory performance:</p>
<pre><code>&gt;&gt;&gt; from itertools import imap
&gt;&gt;&gt; data = ['a', 'bc', 'def', 'ghij']
&gt;&gt;&gt; sum(imap(len, data))
10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print(sum(len(mystr) for mystr in strings))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another way using operator.  Not sure if this is easier to read than the accepted answer.</p>
<pre><code>import operator

length = reduce(operator.add, map(len, strings))

print length
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to add upon ...</p>
<p>Adding numbers from a list stored as a string</p>
<p>nos = ['1','14','34']</p>
<p>length = sum(int(s) for s in nos)</p>
</div>
<span class="comment-copy">What do you mean by "quicker"? Less typing or faster execution?</span>
<span class="comment-copy">@Richard: Sorry, I was thinking "quicker" as in less typing, but what I actually mean is idiomatic.</span>
<span class="comment-copy">No worries. I think that's what everybody else figured. I'm just a pedant!</span>
<span class="comment-copy">It seems wasteful to concatenate the strings when you don't have to, but +1 for adding another way of solving the problem!</span>
<span class="comment-copy">I don't know - I long since stopped wondering whether code was CPU wasteful for non-realtime systems. But since you mentioned "less typing" this looks pretty tight.</span>
<span class="comment-copy">@Zaz Wasteful? This is by far the fastest of the three solutions, if the <code>timeit</code> module is to be believed. The answer you accepted, <code>sum(len(s) for s in strings)</code>, is over three times as slow, and is also almost twice as slow as <code>sum(map(len, strings))</code>. (Speed of course doesn't matter much in Python -- if you wanted speed you'd be using Pypy, as the saying goes -- but the full generator expression is also IMO a bit of an eyesore compared to the others.)</span>
<span class="comment-copy">The other answers are more generic and useful, as they also answer the question when the element type of the list is not a string.</span>
<span class="comment-copy">@aggieNick02 The other answers answer a question that was not asked! The question was about lists of strings, with the answer provided by the error message. Why overcomplicate things?</span>
<span class="comment-copy">This is definitely a more idiomatic way of expressing it but I don't think it's any more efficient computationally. Still, +1 for elegance and Pythonicness!</span>
<span class="comment-copy">If you're really worried about computational efficiency, you probably shouldn't use Python, or should write the computation-intense part in C or C++ (or SciPy's weave library if you're brave).  I like this style because it's more legible to other Python developers.</span>
<span class="comment-copy">Thanks, this is much shorter and easier to understand than my code.</span>
<span class="comment-copy">Good answer, but I've accepted <a href="http://stackoverflow.com/questions/3780403#3780412">liori's answer</a> because I found it more idiomatic.</span>
<span class="comment-copy">@Josh: Most people will indeed find the genexp more pythonic. I just wanted to add this for completeness.</span>
