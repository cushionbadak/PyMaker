<div class="post-text" itemprop="text">
<p>What exactly are views in Python3.1? They seem to behave in a similar manner as that of iterators and they can be materialized into lists too. How are iterators and views different?</p>
</div>
<div class="post-text" itemprop="text">
<p>From what I can tell, a view is still attached to the object it was created from. Modifications to the original object affect the view.</p>
<p>from the <a href="http://docs.python.org/release/3.0.1/library/stdtypes.html#dictionary-view-objects" rel="noreferrer">docs</a> (for dictionary views):</p>
<pre><code>&gt;&gt;&gt; dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}
&gt;&gt;&gt; keys = dishes.keys()
&gt;&gt;&gt; values = dishes.values()

&gt;&gt;&gt; # iteration
&gt;&gt;&gt; n = 0
&gt;&gt;&gt; for val in values:
...     n += val
&gt;&gt;&gt; print(n)
504

&gt;&gt;&gt; # keys and values are iterated over in the same order
&gt;&gt;&gt; list(keys)
['eggs', 'bacon', 'sausage', 'spam']
&gt;&gt;&gt; list(values)
[2, 1, 1, 500]

&gt;&gt;&gt; # view objects are dynamic and reflect dict changes
&gt;&gt;&gt; del dishes['eggs']
&gt;&gt;&gt; del dishes['sausage']
&gt;&gt;&gt; list(keys)
['spam', 'bacon']

&gt;&gt;&gt; # set operations
&gt;&gt;&gt; keys &amp; {'eggs', 'bacon', 'salad'}
{'bacon'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend that you read <a href="http://answers.oreilly.com/topic/1576-new-iterables-in-python-3-0/" rel="nofollow">this</a>. It seems to do the best job of explaining.</p>
<p>As far as I can tell, views seem to be associated more with <code>dict</code>s and can be forced into <code>list</code>s. You can also make an iterator out of them, through which you could then iterate (in a <code>for</code> loop or by calling <code>next</code>)</p>
<p>Update: <a href="http://web.archive.org/web/20140219195551/http://answers.oreilly.com/topic/1576-new-iterables-in-python-3-0" rel="nofollow">updated link from wayback machine</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How are iterators and views different?</p>
</blockquote>
<p>I'll rephrase the question as "what's the difference between an <em>iterable</em> objects and an <em>iterator</em>"?</p>
<p>An <strong>iterable</strong> is an object that can be iterated over (e.g. used in a <code>for</code> loop).</p>
<p>An <strong>iterator</strong> is an object that can be called with the <code>next()</code> function, that is it implements the <code>.next()</code> method in Python2 and <code>.__next__()</code> in python3. An iterator is often used to wrap an <em>iterable</em> and return each item of interest. All iterators are iterable, but the reverse is not necessarily true (all iterables are not iterators).</p>
<p>Views are <em>iterable</em> objects, not <em>iterators</em>.</p>
<p>Let's look at some code to see the distinction (Python 3):</p>
<p>The <a href="https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow">"What's new in Python 3"</a> document is very specific about which functions return iterators. <code>map()</code>, <code>filter()</code>, and <code>zip()</code> definitely return an iterator, whereas <code>dict.items()</code>, <code>dict.values()</code>, <code>dict.keys()</code> are said to return a view object. As for <code>range()</code>, although the description of what it returns exactly lacks precision, we know it's not an iterator.</p>
<p>Using <code>map()</code> to double all numbers in a list</p>
<pre><code>m = map(lambda x: x*2, [0,1,2])
hasattr(m, '__next__')
# True
next(m)
# 0
next(m)
# 2
next(m)
# 4
next(m)
# StopIteration ...
</code></pre>
<p>Using <code>filter()</code> to extract all odd numbers</p>
<pre><code>f = filter(lambda x: x%2==1, [0,1,2,3,4,5,6])
hasattr(f, '__next__')
# True
next(f)
# 1
next(f)
# 3
next(f)
# 5
next(f)
# StopIteration ...
</code></pre>
<p>Trying to use <code>range()</code> in the same manner to produce a sequence of number</p>
<pre><code>r = range(3) 
hasattr(r, '__next__')
# False
next(r)
# TypeError: 'range' object is not an iterator
</code></pre>
<p>But it's an iterable, so we should be able to wrap it with an iterator</p>
<pre><code>it = iter(r)
next(it)
# 0
next(it)
# 1
next(it)
# 2
next(it)
# StopIteration ...
</code></pre>
<p><code>dict.items()</code> as well as <code>dict.keys()</code> and <code>dict.values()</code> also do not return iterators in Python 3 </p>
<pre><code>d = {'a': 0, 'b': 1, 'c': 2}
items = d.items()
hasattr(items, '__next__')
# False
it = iter(items)
next(it)
# ('b', 1)
next(it)
# ('c', 2)
next(it)
# ('a', 0)
</code></pre>
<p>An iterator can only be used in a single <code>for</code> loop, whereas an iterable can be used repeatedly in subsequent <code>for</code> loops. Each time an iterable is used in this context it implicitely returns a new iterator (from its <code>__iter__()</code> method). The following custom class demonstrates this by outputting the memory <code>id</code> of both the list object and the returning iterator object:</p>
<pre><code>class mylist(list):
    def __iter__(self, *a, **kw):
        print('id of iterable is still:', id(self))
        rv = super().__iter__(*a, **kw)
        print('id of iterator is now:', id(rv))
        return rv 

l = mylist('abc')
</code></pre>
<p>A <code>for</code> loop can use the iterable object and will implicitly get an iterator</p>
<pre><code>for c in l:
    print(c)
# id of iterable is still: 139696242511768
# id of iterator is now: 139696242308880
# a
# b
# c
</code></pre>
<p>A subsequent <code>for</code> loop can use the same iterable object, but will get another iterator</p>
<pre><code>for c in l:
    print(c)
# id of iterable is still: 139696242511768
# id of iterator is now: 139696242445616
# a
# b
# c
</code></pre>
<p>We can also obtain an iterator explicitly</p>
<pre><code>it = iter(l)
# id of iterable is still: 139696242511768
# id of iterator is now: 139696242463688
</code></pre>
<p>but it can then only be used once</p>
<pre><code>for c in it:
    print(c)
# a
# b
# c
for c in it:
    print(c)
for c in it:
    print(c)
</code></pre>
</div>
<span class="comment-copy">The link is dead.</span>
<span class="comment-copy">@AnirudhRamanathan: I've updated the link. Thanks for letting me know</span>
