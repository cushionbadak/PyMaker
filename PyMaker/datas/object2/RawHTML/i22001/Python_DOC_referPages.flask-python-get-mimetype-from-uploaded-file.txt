<div class="post-text" itemprop="text">
<p>I am using Flask micro-framework 0.6 and Python 2.6</p>
<p>I need to get the mimetype from an uploaded file so I can store it.</p>
<p>Here is the relevent Python/Flask code:</p>
<pre><code>@app.route('/upload_file', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        file = request.files['file']
        mimetype = #FIXME
        if file:
            file.save(os.path.join(UPLOAD_FOLDER, 'File-Name')
            return redirect(url_for('uploaded_file'))
        else:
            return redirect(url_for('upload'))
</code></pre>
<p><br/>
And here is the code for the webpage:</p>
<pre><code>&lt;form action="upload_file" method=post enctype=multipart/form-data&gt; 
Select file to upload: &lt;input type=file name=file&gt; 
&lt;input type=submit value=Upload&gt; 
&lt;/form&gt; 
</code></pre>
<p><br/>
The code works, but I need to be able to get the mimetype when it uploads. I've had a look at the Flask docs here: <a href="http://flask.pocoo.org/docs/api/#incoming-request-data" rel="noreferrer">http://flask.pocoo.org/docs/api/#incoming-request-data</a> <br/>
So I know it does get the mimetype, but I can't work out how to retrieve it - as a text string, e.g. 'txt/plain'.</p>
<p>Any ideas?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://werkzeug.pocoo.org/docs/0.11/datastructures/#werkzeug.datastructures.FileStorage.content_type" rel="nofollow noreferrer">docs</a>, <code>file.content_type</code> contains the full type with encoding, <code>mimetype</code> contains just the mime type.</p>
<pre><code>@app.route('/upload_file', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        file = request.files.get('file')
        if file:
            mimetype = file.content_type
            filename = werkzeug.secure_filename(file.filename)
            file.save(os.path.join(UPLOAD_FOLDER, filename)
            return redirect(url_for('uploaded_file'))
        else:
            return redirect(url_for('upload'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could in theory use <code>request.files['YOUR_FILE_KEY'].content_type</code>, but the implementation (included below, found in <a href="https://github.com/pallets/werkzeug/blob/73683a2ee741288c18751a4f739b9758a9e18a55/werkzeug/datastructures.py" rel="nofollow noreferrer">werkzeug.datastructures</a>) either trust whatever the client is providing, or uses <code>mimetypes.guess_type</code> which only checks the file extension (see Python doc <a href="https://docs.python.org/3/library/mimetypes.html" rel="nofollow noreferrer">here</a>).</p>
<pre><code>class FileMultiDict(MultiDict):

    """A special :class:`MultiDict` that has convenience methods to add
    files to it.  This is used for :class:`EnvironBuilder` and generally
    useful for unittesting.
    .. versionadded:: 0.5
    """

    def add_file(self, name, file, filename=None, content_type=None):
        """Adds a new file to the dict.  `file` can be a file name or
        a :class:`file`-like or a :class:`FileStorage` object.
        :param name: the name of the field.
        :param file: a filename or :class:`file`-like object
        :param filename: an optional filename
        :param content_type: an optional content type
        """
        if isinstance(file, FileStorage):
            value = file
        else:
            if isinstance(file, string_types):
                if filename is None:
                    filename = file
                file = open(file, 'rb')
            if filename and content_type is None:
                content_type = mimetypes.guess_type(filename)[0] or \
                    'application/octet-stream'
            value = FileStorage(file, filename, name, content_type)

        self.add(name, value)
</code></pre>
<p>Depending on your use case, you might want to use <a href="https://github.com/ahupp/python-magic" rel="nofollow noreferrer">python-magic</a> which will use the actual file to get the mimetype. It would something like that:</p>
<pre><code>import magic


def get_mimetype(data: bytes) -&gt; str:
    """Get the mimetype from file data."""
    f = magic.Magic(mime=True)
    return f.from_buffer(data)


get_mimetype(request.files['YOUR_FILE_KEY'].stream.read(MAX_LENGTH))
</code></pre>
</div>
<span class="comment-copy">Thank you so much! I Will remember about the Werkzeug docs next time :)</span>
<span class="comment-copy">@Jonathan: You're welcome! It was linked from the doc page you supplied.</span>
<span class="comment-copy">Well that is slightly embarrassing :S lol</span>
<span class="comment-copy">This solution is actually problematic, as the mimetype returned by Werkzeug is derived from the extension. e.g. take any pdf, rename it as something.png and upload it, and Werkzeug will tell you the mime type is image/png while the correct answer is application/pdf (something python-magic will correctly tell you)</span>
