<div class="post-text" itemprop="text">
<p>It used to be in Python (2.6) that one could ask:</p>
<pre><code>isinstance(f, file)
</code></pre>
<p>but in Python 3.0 <a href="https://docs.python.org/release/3.0/whatsnew/3.0.html#builtins" rel="nofollow"><code>file</code> was removed</a>.</p>
<p>What is the proper method for checking to see if a variable is a file now?  The What'sNew docs don't mention this...</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def read_a_file(f)
    try:
        contents = f.read()
    except AttributeError:
        # f is not a file
</code></pre>
<p>substitute whatever methods you plan to use for <code>read</code>. This is optimal if you expect that you will get passed a file like object more than 98% of the time. If you expect that you will be passed a non file like object more often than 2% of the time, then the correct thing to do is:</p>
<pre><code>def read_a_file(f):
    if hasattr(f, 'read'):
        contents = f.read()
    else:
        # f is not a file
</code></pre>
<p>This is exactly what you would do if you <em>did</em> have access to a <code>file</code> class to test against. (and FWIW, I too have <code>file</code> on 2.6) Note that this code works in 3.x as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3 you could refer to <a href="https://docs.python.org/3/library/io.html#module-io" rel="nofollow">io</a> instead of <a href="https://docs.python.org/release/2.7/library/stdtypes.html#file-objects" rel="nofollow">file</a> and write</p>
<pre><code>import io
isinstance(f, io.IOBase)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Typically, you don't need to check an object type, you could use duck-typing instead i.e., just call <code>f.read()</code> directly and allow the possible exceptions to propagate -- it is either a bug in your code or a bug in the caller code e.g., <code>json.load()</code> raises <code>AttributeError</code> if you give it an object that has no <code>read</code> attribute.</p>
<p>If you need to distinguish between several acceptable input types; you could use <code>hasattr/getattr</code>:</p>
<pre><code>def read(file_or_filename):
    readfile = getattr(file_or_filename, 'read', None)
    if readfile is not None: # got file
       return readfile()
    with open(file_or_filename) as file: # got filename
       return file.read()
</code></pre>
<p>If you want to support a case when <code>file_of_filename</code> may have <code>read</code> attribute that is set to <code>None</code> then you could use <code>try/except</code> over <code>file_or_filename.read</code> -- note: no parens, the call is not made -- e.g., <a href="http://hg.python.org/cpython/file/3.4/Lib/xml/etree/ElementTree.py#l787" rel="nofollow"><code>ElementTree._get_writer()</code></a>.</p>
<p>If you want to check certain guarantees e.g., that only one single system call is made (<code>io.RawIOBase.read(n)</code> for n &gt; 0) or there are no short writes (<code>io.BufferedIOBase.write()</code>) or whether read/write methods accept text data (<code>io.TextIOBase</code>) then you could use <code>isinstance()</code> function with <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow">ABCs defined in <code>io</code> module</a> e.g., <a href="http://hg.python.org/cpython/file/3.4/Lib/xml/sax/saxutils.py#l72" rel="nofollow">look at how <code>saxutils._gettextwriter()</code> is implemented</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Works for me on python 2.6... Are you in a strange environment where builtins aren't imported by default, or where somebody has done <code>del file</code>, or something?</p>
</div>
<span class="comment-copy">My Python 2.6.5 returns True for isinstance(f, file), when f=open('filepath', 'r') and False for f=''. I'm starting to think something else might be the issue here</span>
<span class="comment-copy">The <a href="http://docs.python.org/library/functions.html#file" rel="nofollow noreferrer">current docs</a> actually mention that the main use for <code>file</code> is that it's "more suited [than <code>open</code>] to type testing (for example, writing <code>isinstance(f, file))</code>".</span>
<span class="comment-copy">I've concluded that v3.x is broken.</span>
<span class="comment-copy">Not a bad general solution in absence of more direct support within the language....</span>
<span class="comment-copy">@Mark J. This is not a workaround. This is <b>THE CORRECT PYTHONIC WAY</b> to address testing if you are dealing with a file or not. This way, your code works with any object that supports the minimal interface which it requires.</span>
<span class="comment-copy">Alright, I'll accept that.  Though, I believe this is a wart in 3.0 not to be able to check an instance like all other types.</span>
<span class="comment-copy">@Mark. You're not supposed to check any types in python. I normally downvote answers that suggest doing so for no other reason. You are supposed to use one of the two methods that I've presented for all of your type checking needs.</span>
<span class="comment-copy">@MarkJ It's better to ask for forgiveness than for permission. With duck types, that means trying to use the method you need and then catching the error if that fails instead of testing for an explicit type. This is intentional -- you don't generally care if you have an object of a specific type, but rather whether the object can do things you need it to do.</span>
