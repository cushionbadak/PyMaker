<div class="post-text" itemprop="text">
<p>I read through the zipfile modules docs, but couldn't understand how to <em>unzip</em> a file, only how to zip a file. How do I unzip all the contents of a zip file into the same directory?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import zipfile
zip_ref = zipfile.ZipFile(path_to_zip_file, 'r')
zip_ref.extractall(directory_to_extract_to)
zip_ref.close()
</code></pre>
<p>That's pretty much it!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using <em>Python 3.2</em> or later:</p>
<pre><code>import zipfile
with zipfile.ZipFile("file.zip","r") as zip_ref:
    zip_ref.extractall("targetdir")
</code></pre>
<p>You dont need to use the <em>close</em> or <em>try/catch</em> with this as it uses the
<a href="http://eigenhombre.com/2013/04/20/introduction-to-context-managers/" rel="noreferrer">context manager</a> construction.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>extractall</code> method, if you're using Python 2.6+</p>
<pre><code>zip = ZipFile('file.zip')
zip.extractall()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>This is a recursive solution for both ZIP and RAR  :</h1>
<ul>
<li>Just create a file with the python code given below.</li>
<li>Run the code from cmd like <code>python filename.py</code></li>
<li>It will ask you to provide the absolute path of the ZIP or RAR file.</li>
<li>Get all the Files extracted in a folder with the same name as the zip file has.</li>
<li>This is the same as Winrar functionality, "Extract Here".</li>
<li><strong>One extra facility is given ie. recursive extractions. if your file say "a.zip" contains other .zip files like "b.zip", "c.zip" etc. then those files will also be extracted in a nested manner.</strong></li>
<li><p>for RAR support, you need to install unrar and rarfile python packages.</p>
<pre><code>pip install unrar
pip install rarfile
</code></pre></li>
<li><p>You are not done yet now you have to also manually install the unrar for windows and Linux.</p>
<p>For Linux :</p>
<pre><code>sudo apt-get install unrar
</code></pre>
<p>For Windows :</p>
<p><a href="https://www.rarlab.com/rar/unrarw32.exe" rel="nofollow noreferrer">click here to download the unrar .exe file</a></p></li>
<li><p>Install it.</p></li>
<li>Now get the unrar.exe file installed from program files.</li>
<li><p>Normally Location is :</p>
<pre><code>C:\Program Files (x86)\GnuWin32\bin\unrar.exe
</code></pre></li>
<li><p><em>Add this path in your windows path variables.</em> because this path will be the unrar tool path which will be used at the time of extracting RAR file.</p>
<pre><code>rarfile.UNRAR_TOOL = C:\Program Files (x86)\GnuWin32\bin\unrar.exe
</code></pre>
<p>If Everything is set up you are ready to deploy.</p></li>
</ul>
<h1>-----------------------</h1>
<pre><code>#import zip file.
import zipfile
# import rarfile
import rarfile
# for path checking.
import os.path
# deleting directory.
import shutil

def check_archrive_file(loc):
    '''
    check the file is an archive file or not.
    if the file is an archive file just extract it using the proper extracting method.
    '''
    # check if it is a zip file or not.
    if (loc.endswith('.zip') or loc.endswith('.rar')):
        # chcek the file is present or not .
        if os.path.isfile(loc):
            #create a directory at the same location where file will be extracted.
            output_directory_location = loc.split('.')[0]
            # if os path not exists .
            if not os.path.exists(output_directory_location):
                # create directory .
                os.mkdir(output_directory_location)
                print(" Otput Directory " , output_directory_location)
                # extract 
                if loc.endswith('.zip'):
                    extractzip(loc,output_directory_location)
                else:
                    extractrar(loc,output_directory_location)

            else:
                # Directory allready exist.
                print("Otput Directory " , output_directory_location)
                # deleting previous directoty .
                print("Deleting old Otput Directory ")
                ## Try to remove tree; if failed show an error using try...except on screen
                try:
                    # delete the directory .
                    shutil.rmtree(output_directory_location)
                    # delete success
                    print("Delete success now extracting")
                    # extract
                    # extract 
                    if loc.endswith('.zip'):
                        extractzip(loc,output_directory_location)
                    else:
                        extractrar(loc,output_directory_location)
                except OSError as e:
                    print ("Error: %s - %s." % (e.filename, e.strerror))
        else:
            print("File not located to this path")
    else:
        print("File do not have any archrive structure.")


def extractzip(loc,outloc):
    '''
    using the zipfile tool extract here .
    This function is valid if the file type is zip only
   '''
    with zipfile.ZipFile(loc,"r") as zip_ref:
        # iterate over zip info list.
        for item in zip_ref.infolist():
            zip_ref.extract(item,outloc)
        # once extraction is complete
        # check the files contains any zip file or not .
        # if directory then go through the directoty.
        zip_files = [files for files in zip_ref.filelist if files.filename.endswith('.zip')]
        # print other zip files
        # print(zip_files)
        # iterate over zip files.
        for file in zip_files:
            # iterate to get the name.
            new_loc = os.path.join(outloc,file.filename)
            #new location
            # print(new_loc)
            #start extarction.
            check_archrive_file(new_loc)
        # close.
        zip_ref.close()


def extractrar(loc,outloc):
    '''
    using the rarfile tool extract here .
    this function is valid if the file type is rar only
   '''
   #check the file is rar or not
    if(rarfile.is_rarfile(loc)):
        with rarfile.RarFile(loc,"r") as rar_ref:
                # iterate over zip info list.
                for item in rar_ref.infolist():
                    rar_ref.extract(item,outloc)
                # once extraction is complete
                # get the name of the rar files inside the rar.
                rar_files = [file for file in rar_ref.infolist() if file.filename.endswith('.rar') ]
                # iterate
                for file in rar_files:
                    # iterate to get the name.
                    new_loc = os.path.join(outloc,file.filename)
                    #new location
                    # print(new_loc)
                    #start extarction.
                    check_archrive_file(new_loc)
                # close.
                rar_ref.close()
    else:
        print("File "+loc+" is not a rar file")




def checkpathVariables():
    '''
    check path variables.
    if unrar.exe nor present then 
    install unrar and set unrar.exe in path variable.
    '''
    try:
            user_paths = os.environ['PYTHONPATH'].split(os.pathsep)
    except KeyError:
            user_paths = []
    # iterate over paths.
    for item in user_paths:
        print("User path python variables :"+user_paths)
    # check rar tool exe present or not.
    for item in user_paths:
        # print(item)
        if("unrar.exe" in item):
            print("Unrar tool setup found PYTHONPATH")
            return
    print("Unrar tool setup not found in  PYTHONPATH")
    # print os path
    os_paths_list = os.environ['PATH'].split(';')
    # check rar tool exe present or not.
    for item in os_paths_list:
        # print(item)
        if("unrar.exe" in item):
            print("Unrar tool setup found in PATH")
            rarfile.UNRAR_TOOL = item 
            print("Unrar tool path set up complete ."+item)
            return
    print("Unrar tool setup not found in PATH")
    print("RAR TOOL WILL NOT WORK FOR YOU.")
    downloadlocation = "https://www.rarlab.com/rar/unrarw32.exe"
    print("install unrar form the link"+downloadlocation)




# run the main function
if __name__ == '__main__':
    '''
    before you run this function make sure you have installed two packages 
    unrar and rarfile.
    if not installed then 
    pip install unrar
    pip install rarfile.
    This is not only the case unrar tool should be set up.
    zip is included in standard library so do not worry about the zip file.
    '''
    # check path and variables.
    checkpathVariables()
    # Take input form the user.
    location = input('Please provide the absolute path of the zip/rar file-----&gt; ')
    check_archrive_file(location)
</code></pre>
<h1>-----------------------</h1>
<p>Do not Panic it is a long script divided in mainly four-part.</p>
<h3> Part 1 </h3>
<p>Check that you have installled the the path variable correctly .
This section is not required if you do not want to work with RAR file.</p>
<pre><code>def checkpathVariables():
    '''
    check path variables.
    if unrar.exe nor present then 
    install unrar and set unrar.exe in path variable.
    '''
    try:
            user_paths = os.environ['PYTHONPATH'].split(os.pathsep)
    except KeyError:
            user_paths = []
    # iterate over paths.
    for item in user_paths:
        print("User path python variables :"+user_paths)
    # check rar tool exe present or not.
    for item in user_paths:
        # print(item)
        if("unrar.exe" in item):
            print("Unrar tool setup found PYTHONPATH")
            return
    print("Unrar tool setup not found in  PYTHONPATH")
    # print os path
    os_paths_list = os.environ['PATH'].split(';')
    # check rar tool exe present or not.
    for item in os_paths_list:
        # print(item)
        if("unrar.exe" in item):
            print("Unrar tool setup found in PATH")
            rarfile.UNRAR_TOOL = item 
            print("Unrar tool path set up complete ."+item)
            return
    print("Unrar tool setup not found in PATH")
    print("RAR TOOL WILL NOT WORK FOR YOU.")
    downloadlocation = "https://www.rarlab.com/rar/unrarw32.exe"
    print("install unrar form the link"+downloadlocation)
</code></pre>
<h3> Part 2 </h3>
<p>This function extract a ZIP file .
Takes two argument loc and outloc .
loc = "File name with absolute path".
outloc = "File where it will be extracted".</p>
<pre><code>def extractzip(loc,outloc):
        '''
        using the zipfile tool extract here .
        This function is valid if the file type is zip only
       '''
        with zipfile.ZipFile(loc,"r") as zip_ref:
            # iterate over zip info list.
            for item in zip_ref.infolist():
                zip_ref.extract(item,outloc)
            # once extraction is complete
            # check the files contains any zip file or not .
            # if directory then go through the directoty.
            zip_files = [files for files in zip_ref.filelist if files.filename.endswith('.zip')]
            # print other zip files
            # print(zip_files)
            # iterate over zip files.
            for file in zip_files:
                # iterate to get the name.
                new_loc = os.path.join(outloc,file.filename)
                #new location
                # print(new_loc)
                #start extarction.
                check_archrive_file(new_loc)
            # close.
            zip_ref.close()
</code></pre>
<h3> Part 3 </h3>
<p>This function extract a RAR file .
Almost same as zip.</p>
<pre><code>def extractrar(loc,outloc):
        '''
        using the rarfile tool extract here .
        this function is valid if the file type is rar only
       '''
       #check the file is rar or not
        if(rarfile.is_rarfile(loc)):
            with rarfile.RarFile(loc,"r") as rar_ref:
                    # iterate over zip info list.
                    for item in rar_ref.infolist():
                        rar_ref.extract(item,outloc)
                    # once extraction is complete
                    # get the name of the rar files inside the rar.
                    rar_files = [file for file in rar_ref.infolist() if file.filename.endswith('.rar') ]
                    # iterate
                    for file in rar_files:
                        # iterate to get the name.
                        new_loc = os.path.join(outloc,file.filename)
                        #new location
                        # print(new_loc)
                        #start extarction.
                        check_archrive_file(new_loc)
                    # close.
                    rar_ref.close()
        else:
            print("File "+loc+" is not a rar file")
</code></pre>
<h3> Part 4 </h3>
<p>The main function ask user for the absolute path.
You can change it to a predefined path by setting location value.
and comment out the input function.</p>
<pre><code>if __name__ == '__main__':
    '''
    before you run this function make sure you have installed two packages 
    unrar and rarfile.
    if not installed then 
    pip install unrar
    pip install rarfile.
    This is not only the case unrar tool should be set up.
    zip is included in standard library so do not worry about the zip file.
    '''
    # check path and variables.
    checkpathVariables()
    # Take input form the user.
    location = input('Please provide the absolute path of the zip/rar file-----&gt; ')
    check_archrive_file(location)
</code></pre>
<h3> Problems that still present .</h3>
<ul>
<li>This solution is not able to extract all type of  RAR files.</li>
<li>Though it passes the checking <code>rarfile.is_rarfile("filename")</code></li>
<li><p>I checked with the RAR created by WinRAR it provides a warning and does not extract the files.</p>
<p>[Please comment if you can help regarding this warning and isuue]</p>
<pre><code>rarfile.RarWarning: Non-fatal error [1]: b'\r\nD:\\Kiosk\\Download\\Tutorial\\reezoo\\a.rar is not RAR archive\r\nNo files to extract\r\n
</code></pre></li>
<li><p>But It can easily extract RAR4 Type.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os 
zip_file_path = "C:\AA\BB"
file_list = os.listdir(path)
abs_path = []
for a in file_list:
    x = zip_file_path+'\\'+a
    print x
    abs_path.append(x)
for f in abs_path:
    zip=zipfile.ZipFile(f)
    zip.extractall(zip_file_path)
</code></pre>
<p>This does not contain validation for the file if its not zip. If the folder contains non .zip file it will fail.  </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>You can also import only <code>ZipFile</code>:</strong></p>
<pre><code>from zipfile import ZipFile
zf = ZipFile('path_to_file/file.zip', 'r')
zf.extractall('path_to_extract_folder')
zf.close()
</code></pre>
<p>Works in <em>Python 2</em> and <em>Python 3</em>.</p>
</div>
<span class="comment-copy">what if the contents of the .zip archive are same, in all .zip archives? how to rename the content before extracting? example: 1.zip 2.zip.. all contain content.txt : extract all like 1content.txt 2content.txt?</span>
<span class="comment-copy">@iratzhash I typically create a new temporary directory for the contents using tempfile: <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">docs.python.org/3/library/tempfile.html</a> I unzip to the temporary directory and the move / organize the files from there.</span>
<span class="comment-copy">@3kstc I would <code>from zipfile import ZipFile</code>. When using it, you no longer need to use <code>zipfile.ZipFile</code>, and can use <code>ZipFile(zip_file_name)</code>.</span>
<span class="comment-copy">@iratzhash I realize you commented 1.5 years ago. But just so others know, usually contents within a zip file are read-only. A good answer is <a href="https://stackoverflow.com/questions/7428318/rename-files-in-zip-folder-using-zipmodule?lq=1">here</a> by "bouke"</span>
<span class="comment-copy">Is there no <code>try/except</code> needed here? Or better: <code>with zipfile.... as zip_ref</code></span>
<span class="comment-copy">ZipFile also works as a context manager in 2.7 or later: <a href="https://docs.python.org/2/library/zipfile.html#zipfile.ZipFile" rel="nofollow noreferrer">docs.python.org/2/library/zipfile.html#zipfile.ZipFile</a></span>
<span class="comment-copy">This is the best answer. Context managers ftw.</span>
<span class="comment-copy">How to deal with <a href="https://docs.python.org/3.6/library/zipfile.html#zipfile.BadZipFile" rel="nofollow noreferrer">docs.python.org/3.6/library/zipfile.html#zipfile.BadZipFile</a> exception? Generally, what is the best practice to use try/except with context manager (with-statement)?</span>
<span class="comment-copy">Don't you have to specify a destination (zip.extractall(destination))?</span>
<span class="comment-copy">Not if you're just extracting into the same directory as the zipfile</span>
<span class="comment-copy">@DanGayle this appears to be extracting the zip file into the current working directory, NOT the location of the zip file</span>
<span class="comment-copy">for me, ZipFile() didn't work but zipfile.ZipFile() did - after import zipfile</span>
<span class="comment-copy">Why would you  do that?</span>
<span class="comment-copy">@user1767754 I do not get you. Can you please be more specific.</span>
<span class="comment-copy">This is an exact copy of the accepted answer. Also, this way is worse for readability because now the reader has to figure out where <code>ZipFile</code> came from, which requires scrolling back up to the top of the script. Yes, you're importing less code, but consider <code>import zipfile.ZipFile</code> instead if you really need to do that so you can maintain readability.</span>
<span class="comment-copy">Thank you for your attention @MylesHollowed  However, this is not a copy from the accepted answer. I agree that they are similar to each other, but they are different. This is also indicated by your comment, because the accepted one is definitely better for you than mine. If it was a copy, it would be the same...  For someone my answer may be valuable because it is perhaps more readable and as you noticed import less code... It is because of these differences that I decided to put my answer to give an alternative. Is not that why we can put other answers after accepting one? All the best</span>
