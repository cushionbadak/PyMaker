<div class="post-text" itemprop="text">
<p>I've looked at the <a href="http://en.wikipedia.org/wiki/Pickle_%28Python%29" rel="noreferrer">pickle</a> documentation, but I don't understand where pickle is useful.</p>
<p>What are some common use-cases for pickle?</p>
</div>
<div class="post-text" itemprop="text">
<p>Some uses that I have come across:</p>
<p>1) saving a program's state data to disk so that it can carry on where it left off when restarted (persistence)</p>
<p>2) sending python data over a TCP connection in a multi-core or distributed system (marshalling)</p>
<p>3) storing python objects in a database</p>
<p>4) converting an arbitrary python object to a string so that it can be used as a dictionary key (e.g. for caching &amp; memoization).</p>
<p>There are some issues with the last one - two identical objects can be pickled and result in different strings - or even the same object pickled twice can have different representations.  This is because the pickle can include reference count information.</p>
<p>To emphasise @lunaryorn's comment - you should never unpickle a string from an untrusted source, since a carefully crafted pickle could execute arbitrary code on your system.  For example see <a href="https://blog.nelhage.com/2011/03/exploiting-pickle/" rel="nofollow noreferrer">https://blog.nelhage.com/2011/03/exploiting-pickle/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Minimal roundtrip example..</p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; a = Anon()
&gt;&gt;&gt; a.foo = 'bar'
&gt;&gt;&gt; pickled = pickle.dumps(a)
&gt;&gt;&gt; unpickled = pickle.loads(pickled)
&gt;&gt;&gt; unpickled.foo
'bar'
</code></pre>
<p><strong>Edit:</strong> but as for the question of real-world examples of pickling, perhaps <em>the</em> most advanced use of pickling (you'd have to dig quite deep into the source) is ZODB:
<a href="http://svn.zope.org/" rel="noreferrer">http://svn.zope.org/</a></p>
<p>Otherwise, PyPI mentions several:
<a href="http://pypi.python.org/pypi?:action=search&amp;term=pickle&amp;submit=search" rel="noreferrer">http://pypi.python.org/pypi?:action=search&amp;term=pickle&amp;submit=search</a></p>
<p>I have personally seen several examples of pickled objects being sent over the network as an easy to use network transfer protocol.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have used it in one of my projects. If the app was terminated during it's working (it did a lengthy task and processed lots of data), I needed to save the whole data structure and reload it after the app was run again. I used cPickle for this, as speed was a crucial thing and the size of data was really big. </p>
</div>
<div class="post-text" itemprop="text">
<p>Pickling is absolutely necessary for distributed and parallel computing.</p>
<p>Say you wanted to do a parallel map-reduce with <code>multiprocessing</code> (or across cluster nodes with <a href="http://pythonhosted.org/pyina" rel="noreferrer">pyina</a>), then you need to make sure the function you want to have mapped across the parallel resources will pickle.  If it doesn't pickle, you can't send it to the other resources on another process, computer, etc.  Also see <a href="http://nbviewer.ipython.org/5241793" rel="noreferrer">here</a> for a good example.</p>
<p>To do this, I use <a href="http://pythonhosted.org/dill" rel="noreferrer">dill</a>, which can serialize almost anything in python. Dill also has <a href="https://github.com/uqfoundation/dill/blob/master/dill/detect.py" rel="noreferrer">some good tools</a> for helping you understand what is causing your pickling to fail when your code fails.</p>
<p>And, yes, people use picking to save the state of a calculation, or your <a href="http://ipython.org/" rel="noreferrer">ipython</a> session, or whatever.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the beginner (as is the case with me) it's really hard to understand why use pickle in the first place when reading the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">official documentation</a>. It's maybe because the docs imply that you already know the whole purpose of serialization. Only after reading the <a href="http://en.wikipedia.org/wiki/Serialization" rel="nofollow noreferrer">general description</a> of serialization have I understood the reason for this module and its common use cases. Also broad explanations of serialization disregarding a particular programming language may help:
<a href="https://stackoverflow.com/a/14482962/4383472">https://stackoverflow.com/a/14482962/4383472</a>, <a href="https://stackoverflow.com/questions/633402/what-is-serialization">What is serialization?</a>,
<a href="https://stackoverflow.com/a/3984483/4383472">https://stackoverflow.com/a/3984483/4383472</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To add a real-world example: The <a href="http://sphinx.pocoo.org/" rel="nofollow">Sphinx</a> documentation tool for Python uses pickle to cache parsed documents and cross-references between documents, to speed up subsequent builds of the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>I can tell you the uses I use it for and have seen it used for:</strong></p>
<ul>
<li>Game profile saves</li>
<li>Game data saves like lives and health</li>
<li>Previous records of say numbers inputed to a program</li>
</ul>
<p>Those are the ones I use it for at least</p>
</div>
<div class="post-text" itemprop="text">
<p>Pickle is like "Save As.." and "Open.." for your data structures and classes. Let's say I want to save my data structures so that it is persistent between program runs.</p>
<p>Saving:</p>
<pre><code>with open("save.p", "wb") as f:    
    pickle.dump(myStuff, f)        
</code></pre>
<p>Loading:</p>
<pre><code>try:
    with open("save.p", "rb") as f:
        myStuff = pickle.load(f)
except:
    myStuff = defaultdict(dict)
</code></pre>
<p>Now I don't have to build myStuff from scratch all over again, and I can just pick(le) up from where I left off. </p>
</div>
<div class="post-text" itemprop="text">
<p>I use pickling during web scrapping one of website at that time I want to store more than 8000k urls and want to process them as fast as possible so I use pickling because its output quality is very high.</p>
<p>you can easily reach to url and where you stop even job directory key word also fetch url details very fast for resuming the process.</p>
</div>
<span class="comment-copy">I have Googled something similar, but Google is not smart enough to tell me how can a certain module help me. I know how to use <code>pickle</code>, but what I want to know is in what scenario other people use it.</span>
<span class="comment-copy">There's nothing wrong with this question.</span>
<span class="comment-copy">Upvote.  Questions like these are very important on Stackoverflow.</span>
<span class="comment-copy">Looks like someone downvoted this question? So I upvote it. :D</span>
<span class="comment-copy">The part I don't get about pickling is why don't you just save the value to a file? Why pickle it?</span>
<span class="comment-copy">One should not transfer pickled objects over network or other untrusted channels, unless the pickled data is carefully secured against manipulation.  The pickle documentation explicitly warns to <i>never</i> unpickle data from untrusted or unauthenticated sources.</span>
<span class="comment-copy">@lunaryorn: good point.  If you are going to transfer pickled data between machines then use a secure channel such as SSL or SSH tunnelling.</span>
<span class="comment-copy">Then you are still trusting the endpoint not to exploit you, which may or not be okay, depending on context.</span>
<span class="comment-copy">@lunaryorn - good point but in that case how can we encrypt data in public domain. do we have to use some other py lib or not to use pickle</span>
<span class="comment-copy">Is point 4) true? I found this which has some (old) evidence that wouldn't work <a href="http://www.aminus.org/blogs/index.php/2007/11/03/pickle_dumps_not_suitable_for_hashing?blog=2" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">your "answer" is not an answer, it's more of a comment.  The OP's question is "What are some common use-cases for pickle?".  Do you feel you have answered that question in any way?</span>
<span class="comment-copy">well, I feel that I have answered the question because I also had difficulties to understand common uses of pickle when I tried to read about this module <a href="https://docs.python.org/3.4/library/pickle.html" rel="nofollow noreferrer">here</a>, <a href="http://en.wikipedia.org/wiki/Pickle_(Python)" rel="nofollow noreferrer">here</a> and <a href="http://pymotw.com/2/pickle/index.html" rel="nofollow noreferrer">here</a>. Because mostly they begin to explain what pickle does assuming that you know the motivation behind the whole concept of serialization. After I read simple wiki article on serialization I grasped the general idea as well as "common cases". Maybe it'll help somebody...</span>
<span class="comment-copy">and some of those common cases are…?  If there are some that are not listed here in other answers… adding them to your answer would be very appropriate.</span>
