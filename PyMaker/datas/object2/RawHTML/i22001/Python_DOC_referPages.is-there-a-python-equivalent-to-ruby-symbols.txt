<div class="post-text" itemprop="text">
<p>Is there a Python equivalent to Ruby symbols? </p>
<ul>
<li><p>If so then what is it?</p></li>
<li><p>If not then are we stuck with using <strong>strings</strong> as our <strong>keys</strong> in dictionaries only?</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>No, python doesn't have a symbol type.</p>
<p>However string literals are interned by default and other strings can be interned using the <a href="https://docs.python.org/3/library/sys.html#sys.intern" rel="nofollow noreferrer"><code>intern</code></a> function. So using string literals as keys in dictionaries is not less performant than using symbols in ruby.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have said, there is no symbol in Python, but strings work well.</p>
<p>To avoid quoting strings as keys, use the dict() constructor syntax:</p>
<pre><code>d = dict(
    a = 1,
    b = 2,
    c = "Hello there",
    )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also for those interested: symbols in Ruby when used in a hash are very similar to empty objects in python. For example you could do:</p>
<pre><code>some_var = object()
</code></pre>
<p>and then set a dictionary key as some_var:</p>
<pre><code>some_dict = { some_var : 'some value' }
</code></pre>
<p>and then do a standard retrieval:</p>
<pre><code>some_dict[some_var]
</code></pre>
<p>However, as sepp2k noted there is no performance benefit in doing this. In fact I did a quick test and noted little to no performance boost: </p>
<pre><code>a, b, c, d, e = [object() for _ in range(5)]
dict_symbols = {a : 'a', b : 'b', c : 'c', d : 'd', e : 'e'}
dict_strings = {'a' : 'a', 'b' : 'b', 'c' : 'c', 'd' : 'd', 'e' : 'e'}

def run_symbols():
    for key in dict_symbols.keys():
        dict_symbols[key]

def run_strings():
    for key in dict_strings.keys():
        dict_strings[key]
</code></pre>
<p>Speed tested in ipython:</p>
<pre><code>In [3]: %timeit run_symbols
10000000 loops, best of 3: 33.2 ns per loop

In [4]: %timeit run_strings
10000000 loops, best of 3: 28.3 ns per loop
</code></pre>
<p>So in my case the 'symbols' run slower! (for fun numbers, not accurate). However it is to note that there are probably memory advantages to doing it this way. If you don't care about the key type objects have a smaller footprint than strings. </p>
<pre><code>import sys
sys.getsizeof('some_var') # 45
some_var = object() 
sys.getsizeof(some_var) # 0
</code></pre>
<p>Although that raises the question of how python treats the memory of the variable name some_var. </p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>No, there is no equivalent.</li>
<li>No you can use every hashable object as dictionary key.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Not as a first-class type but there does exist <a href="https://pypi.python.org/pypi/SymbolType" rel="nofollow">https://pypi.python.org/pypi/SymbolType</a>.</p>
</div>
<span class="comment-copy">Following up on your comment to <a href="http://stackoverflow.com/a/3743919/897968">this answer below</a>: If you want something where you can type <code>d.b</code> instead of <code>d['b']</code>, you could just use an empty <code>class D(object): pass</code> to create an instance <code>d = D()</code> to which you can then assign your values to attributes you make up, like so <code>d.a=1</code> and <code>d.b=2</code> and of course get their values like so <code>print(d.a + d.b)</code>. Not sure if that would be slower than a plain dictionary lookup like the <code>d['b']</code> in the answer.</span>
<span class="comment-copy">+1. Fortunately for us Ruby developers, performant is not a word. (Sorry, we're just so semantic!) :D</span>
<span class="comment-copy">Thie major benefit of this is that the language has one less core syntax and builtin type.  It's unnecessary complexity in the language when it can be done transparently.</span>
<span class="comment-copy">@Glenn At first I was upset to hear that Python did not have symbols and that string literals can be used as keys. The problem is that I am not happy with the fact that I will have to place quotes around all my keys. Is there a way around this?</span>
<span class="comment-copy">@J3M 7OR3: No, of course there's no way around this. But consider: It's just one additional character, and in real code, you often use varibles instead of literal keys anyway.</span>
<span class="comment-copy">@delnan, of course there is a way around this: dict(a=1,b=2,c=3).</span>
<span class="comment-copy">ironically, this solution <i>does</i>, at least initially, restrict you to having strings as the keys.</span>
<span class="comment-copy">yeah, it is a work around but only during the assignment step. i still have to add quotes around the b in d['b'] to get its value. i guess i just remember ruby symbols being easier to type. i wish there was a module that solved this problem. i wonder if it would make the program run slower though.</span>
<span class="comment-copy">Great answer! Thanks for looking into this.</span>
<span class="comment-copy">Can one assign a string literal to a variable and then use that variable as a key. e.g. orange = 'orange" food_type = {orange : 'fruit', banana : 'fruit'}</span>
<span class="comment-copy">@J3M 7OR3: Strings are hashable! As are all immutable types. Concerning the second question... Python is not Javascript - keys in dict literals are not special. They can be any expression (a variable, a literal, ...), are evaluated and the result is used as key. So yes, this works.</span>
<span class="comment-copy">@delnan Ok. But is using a variable, instead of a string literal, as a key best practice? Do people typically do this? Or are they fine with using just string literals ( with their quotes) as keys?</span>
<span class="comment-copy">@J3M 7OR3: Wat? Most of the time, you can't possibly know the key by the time you write the program. Of course <code>k = "key"; d[k] = "value"</code> is stupid (but not <code>for k in keys: d[k] = "default"</code>, although there are better ways), but as already said, most of the time you use runtime-values as keys.</span>
