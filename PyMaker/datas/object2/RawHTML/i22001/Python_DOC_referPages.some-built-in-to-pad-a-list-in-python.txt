<div class="post-text" itemprop="text">
<p>I have a list of size &lt; <em>N</em> and I want to pad it up to the size N with a value.</p>
<p>Certainly, I can use something like the following, but I feel that there should be something I missed:</p>
<pre><code>&gt;&gt;&gt; N = 5
&gt;&gt;&gt; a = [1]
&gt;&gt;&gt; map(lambda x, y: y if x is None else x, a, ['']*N)
[1, '', '', '', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a += [''] * (N - len(a))
</code></pre>
<p>or if you don't want to change <code>a</code> in place</p>
<pre><code>new_a = a + [''] * (N - len(a))
</code></pre>
<p>you can always create a subclass of list and call the method whatever you please</p>
<pre><code>class MyList(list):
    def ljust(self, n, fillvalue=''):
        return self + [fillvalue] * (n - len(self))

a = MyList(['1'])
b = a.ljust(5, '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no built-in function for this. But you could compose the built-ins for your task (or anything :p).</p>
<p>(Modified from itertool's <code>padnone</code> and <code>take</code> recipes)</p>
<pre><code>from itertools import chain, repeat, islice

def pad_infinite(iterable, padding=None):
   return chain(iterable, repeat(padding))

def pad(iterable, size, padding=None):
   return islice(pad_infinite(iterable, padding), size)
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; list(pad([1,2,3], 7, ''))
[1, 2, 3, '', '', '', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this approach is more visual and pythonic.</p>
<pre><code>a = (a + N * [''])[:N]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>gnibbler's answer is nicer, but if you need a builtin, you could use <a href="http://docs.python.org/library/itertools.html#itertools.izip_longest" rel="noreferrer"><code>itertools.izip_longest</code></a> (<code>zip_longest</code> in Py3k):</p>
<pre><code>itertools.izip_longest( xrange( N ), list )
</code></pre>
<p>which will return a list of tuples <code>( i, list[ i ] )</code> filled-in to None. If you need to get rid of the counter, do something like:</p>
<pre><code>map( itertools.itemgetter( 1 ), itertools.izip_longest( xrange( N ), list ) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also use a simple generator without any build ins.
But I would not pad the list, but let the application logic deal with an empty list.</p>
<p>Anyhow, iterator without buildins</p>
<pre><code>def pad(iterable, padding='.', length=7):
    '''
    &gt;&gt;&gt; iterable = [1,2,3]
    &gt;&gt;&gt; list(pad(iterable))
    [1, 2, 3, '.', '.', '.', '.']
    '''
    for count, i in enumerate(iterable):
        yield i
    while count &lt; length - 1:
        count += 1
        yield padding

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to pad with None instead of '', map() does the job:</p>
<pre><code>&gt;&gt;&gt; map(None,[1,2,3],xrange(7))

[(1, 0), (2, 1), (3, 2), (None, 3), (None, 4), (None, 5), (None, 6)]

&gt;&gt;&gt; zip(*map(None,[1,2,3],xrange(7)))[0]

(1, 2, 3, None, None, None, None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more-itertools</code></a> is a library that includes a special <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.padded" rel="nofollow noreferrer"><code>padded</code></a> tool for this kind of problem:</p>
<pre><code>import more_itertools as mit

list(mit.padded(a, "", N))
# [1, '', '', '', '']
</code></pre>
<hr/>
<p>Alternatively, <code>more_itertools</code> also implements Python <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a> including <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.padnone" rel="nofollow noreferrer"><code>padnone</code></a> and <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.take" rel="nofollow noreferrer"><code>take</code></a> as mentioned by @kennytm, so they don't have to be reimplemented:</p>
<pre><code>list(mit.take(N, mit.padnone(a)))
# [1, None, None, None, None]
</code></pre>
<p>If you wish to replace the default <code>None</code> padding, use a list comprehension:</p>
<pre><code>["" if i is None else i for i in mit.take(N, mit.padnone(a))]
# [1, '', '', '', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To go off of kennytm:</p>
<pre><code>def pad(l, size, padding):
    return l + [padding] * abs((len(l)-size))

&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; pad(l, 7, 0)
[1, 2, 3, 0, 0, 0, 0]
</code></pre>
</div>
<span class="comment-copy">Why do you want to do this? There is probably a better way.</span>
<span class="comment-copy">I serialize the list into a tab-separated string with the fixed number of columns.</span>
<span class="comment-copy">Do you mean you are doing something like '\t'.join([1,'','','',''])? Maybe you can tell us more about what you intend to implement, then we can try to come up with a idea.</span>
<span class="comment-copy">@Satoru.Logic: yes, <i>print &gt;&gt; a_stream, '\t'.join(the_list)</i> is all I want to implement</span>
<span class="comment-copy">This looks much better, but I still expect something like a <i>fill</i> or <i>pad</i> method or function =)</span>
<span class="comment-copy">I do want to change in place. The former is great. I'll go with that, thank you.</span>
<span class="comment-copy">Thanks for this, I've been trying to find out a clean way of doing this and it's been driving me nuts.</span>
<span class="comment-copy">I knew about <i>izip_longest</i> but resulting the code does not look nice =)</span>
<span class="comment-copy">I believe you mean <code>operator.itemgetter()</code>.  Also the <code>None</code> values needed to be replaced with <code>""</code>.</span>
<span class="comment-copy">To say frankly, <i>a+['']*(N-len(a))</i> looks much clearer. Besides, it lacks casting to list. But thank you anyway.</span>
