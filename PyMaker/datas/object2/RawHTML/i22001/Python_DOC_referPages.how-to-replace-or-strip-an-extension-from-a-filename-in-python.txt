<div class="post-text" itemprop="text">
<p>Is there a built-in function in Python that would replace (or remove, whatever) the extension of a filename (if it has one) ?</p>
<p>Example:</p>
<pre><code>print replace_extension('/home/user/somefile.txt', '.jpg')
</code></pre>
<p>In my example: <code>/home/user/somefile.txt</code> would become <code>/home/user/somefile.jpg</code></p>
<p>I don't know if it matters, but I need this for a SCons module I'm writing. (So perhaps there is some SCons specific function I can use ?)</p>
<p>I'd like something <strong>clean</strong>. Doing a simple string replacement of all occurrences of <code>.txt</code> within the string is obviously not clean. (This would fail if my filename is <code>somefile.txt.txt.txt</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="http://docs.python.org/library/os.path.html#os.path.splitext" rel="noreferrer">os.path.splitext</a> it should do what you want.</p>
<pre><code>import os
print os.path.splitext('/home/user/somefile.txt')[0]+'.jpg'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on AnaPana's answer, how to <strong>remove</strong> an extension using <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">pathlib</a> (Python &gt;= 3.4):</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path

&gt;&gt;&gt; filename = Path('/some/path/somefile.txt')

&gt;&gt;&gt; filename_wo_ext = filename.with_suffix('')

&gt;&gt;&gt; filename_replace_ext = filename.with_suffix('.jpg')

&gt;&gt;&gt; print(filename)
/some/path/somefile.ext    

&gt;&gt;&gt; print(filename_wo_ext)
/some/path/somefile

&gt;&gt;&gt; print(filename_replace_ext)
/some/path/somefile.jpg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @jethro said, <code>splitext</code> is the neat way to do it. But in this case, it's pretty easy to split it yourself, since the extension <em>must be</em> the part of the filename coming after the final period:</p>
<pre><code>filename = '/home/user/somefile.txt'
print( filename.rsplit( ".", 1 )[ 0 ] )
# '/home/user/somefile'
</code></pre>
<p>The <code>rsplit</code> tells Python to perform the string splits starting from the right of the string, and the <code>1</code> says to perform at most one split (so that e.g. <code>'foo.bar.baz'</code> -&gt; <code>[ 'foo.bar', 'baz' ]</code>). Since <code>rsplit</code> will always return a non-empty array, we may safely index <code>0</code> into it to get the filename minus the extension.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way to do is to use the <a href="http://docs.python.org/2/library/stdtypes.html" rel="nofollow"><code>str.rpartition(sep)</code></a> method. </p>
<p>For example:</p>
<pre><code>filename = '/home/user/somefile.txt'
(prefix, sep, suffix) = filename.rpartition('.')

new_filename = prefix + '.jpg'

print new_filename
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer the following one-liner approach using <a href="https://docs.python.org/2/library/stdtypes.html#str.rsplit%20%22str.rsplit()" rel="nofollow noreferrer">str.rsplit()</a>:</p>
<pre><code>my_filename.rsplit('.', 1)[0] + '.jpg'
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; my_filename = '/home/user/somefile.txt'
&gt;&gt;&gt; my_filename.rsplit('.', 1)
&gt;&gt;&gt; ['/home/user/somefile', 'txt']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python &gt;= 3.4:</p>
<pre><code>from pathlib import Path

filename = '/home/user/somefile.txt'

p = Path(filename)
new_filename = p.parent.joinpath(p.stem + '.jpg') # PosixPath('/home/user/somefile.jpg')
new_filename_str = str(new_filename) # '/home/user/somefile.jpg'
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/541390/extracting-extension-from-filename-in-python">Extracting extension from filename in Python</a></span>
<span class="comment-copy">SCons allows getting at the filebase in an action string.  Can you post your scons specific logic that needs this? Is this for the action, emitter, scanner?</span>
<span class="comment-copy">@ereOn: Also, in the future, try SEARCH first.  It works much better for answer these kind of standard questions.</span>
<span class="comment-copy">@S.Lott: Believe me or not. But I did. I always do. Perhaps with the wrong terms.</span>
<span class="comment-copy">@ereOn: Since your question uses almost the exact same phrasing, I'm a little surprised you didn't find it. Your question has 5 words -- in a row -- that match precisely.</span>
<span class="comment-copy">Only put the new name together with os.path.join to look clean.</span>
<span class="comment-copy">@Tony Veijalainen: You shouldn't use os.path.join because that is for joining path components with the OS-specific path separator. For example, <code>print os.path.join(os.path.splitext('/home/user/somefile.txt')[0], '.jpg')</code> will return <code>/home/user/somefile/.jpg</code>, which is not desirable.</span>
<span class="comment-copy">For Python 3.x this should be the answer pathlib is the future...</span>
<span class="comment-copy">Real Python has a good write-up of example use cases of the pathlib module: <a href="https://realpython.com/python-pathlib/" rel="nofollow noreferrer">realpython.com/python-pathlib</a></span>
<span class="comment-copy">Thanks for the explanations and for the workaround.</span>
<span class="comment-copy">Note that using <code>rsplit</code> will result in different results for files which start with a dot and have no other extension (like hidden files on Linux, e.g. <code>.bashrc</code>). <code>os.path.splitext</code> returns an empty extension for these, but using <code>rsplit</code> will treat the whole filename as an extension.</span>
<span class="comment-copy">This will also give unexpected results for the filename <code>/home/john.johnson/somefile</code></span>
<span class="comment-copy">This fails if the somefile has no extension and user is 'john.doe'.</span>
<span class="comment-copy">I think the pathlib approach suggested by JS. is much simpler.</span>
