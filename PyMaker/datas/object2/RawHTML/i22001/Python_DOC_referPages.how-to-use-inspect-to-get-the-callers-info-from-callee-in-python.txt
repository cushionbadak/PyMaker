<div class="post-text" itemprop="text">
<p>I need to get the caller info (what file/what line) from callee. I learned that I can use inpect module for that for purposes, but not exactly how.</p>
<p>How to get those info with inspect? Or is there any other way to get the info?</p>
<pre><code>import inspect

print __file__
c=inspect.currentframe()
print c.f_lineno

def hello():
    print inspect.stack
    ?? what file called me in what line?

hello()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The caller's frame is one frame higher than the current frame. You can use <a href="https://docs.python.org/3/library/inspect.html#types-and-members" rel="noreferrer"><code>inspect.currentframe().f_back</code></a> to find the caller's frame.
Then use <a href="https://docs.python.org/3/library/inspect.html#inspect.getframeinfo" rel="noreferrer">inspect.getframeinfo</a> to get the caller's filename and line number.</p>
<pre><code>import inspect

def hello():
    previous_frame = inspect.currentframe().f_back
    (filename, line_number, 
     function_name, lines, index) = inspect.getframeinfo(previous_frame)
    return (filename, line_number, function_name, lines, index)

print(hello())

# (&lt;frame object at 0x8ba7254&gt;, '/home/unutbu/pybin/test.py', 10, '&lt;module&gt;', ['hello()\n'], 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest to use <code>inspect.stack</code> instead:</p>
<pre><code>import inspect

def hello():
    frame,filename,line_number,function_name,lines,index = inspect.stack()[1]
    print(frame,filename,line_number,function_name,lines,index)
hello()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I published a wrapper for inspect with simple stackframe addressing covering the stack frame by a single parameter <code>spos</code>: </p>
<ul>
<li><a href="https://pypi.python.org/pypi/pysourceinfo/" rel="nofollow">https://pypi.python.org/pypi/pysourceinfo/</a></li>
<li><a href="https://pythonhosted.org/pysourceinfo/" rel="nofollow">https://pythonhosted.org/pysourceinfo/</a></li>
</ul>
<p>E.g. <code>pysourceinfo.PySourceInfo.getCallerLinenumber(spos=1)</code></p>
<p>where <code>spos=0</code> is the lib-function, <code>spos=1</code> is the caller, <code>spos=2</code> the caller-of-the-caller, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the caller is the main file, simply use sys.argv[0]</p>
</div>
<span class="comment-copy">thanks for the answer. How can I get the caller's caller?</span>
<span class="comment-copy">@prosseek: To get the caller's caller, just change the index <code>[1]</code> to <code>[2]</code>. (<code>inspect.getouterframes</code> returns a list of frames...). Python is beautifully organized.</span>
<span class="comment-copy">You can also use inspect.currentframe().f_back.</span>
<span class="comment-copy">@JasonS: "the filename in the stack frame is <a href="https://doughellmann.com/blog/2012/04/30/determining-the-name-of-a-process-from-python/" rel="nofollow noreferrer">relative to the start up directory</a> of the application".</span>
<span class="comment-copy">This code sample works but performs pretty poorly. If you're only interested in a single frame and not the whole stack trace, you can get the previous frame and inspect it for the frame info:              <code>filename, line_number, clsname, lines, index = inspect.getframeinfo(sys._getframe(1))</code></span>
<span class="comment-copy">How is it better than using <code>getouterframes</code> as suggested by @unutbu?</span>
<span class="comment-copy">It is more compact and better reflects the intent.</span>
<span class="comment-copy">Note that <code>getouterframes(currentframe())</code> and <code>stack()</code> are equivalent under the hood <a href="https://github.com/python/cpython/blob/master/Lib/inspect.py#L1442" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Lib/inspect.py#L1442</a></span>
<span class="comment-copy">Another reason using stack() is nice is that it shows how to easily get other frames.  If, for example. your hello() function is called by another function first, you can update it to go two levels back.</span>
