<div class="post-text" itemprop="text">
<p>In Python, consider I have the following code:</p>
<pre><code>&gt;&gt;&gt; class SuperClass(object):
    def __init__(self, x):
        self.x = x

&gt;&gt;&gt; class SubClass(SuperClass):
    def __init__(self, y):
        self.y = y
        # how do I initialize the SuperClass __init__ here?
</code></pre>
<p>How do I initialize the <code>SuperClass __init__</code> in the subclass? I am following the Python tutorial and it doesn't cover that. When I searched on Google, I found more than one way of doing. What is the standard way of handling this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python (until version 3) supports "old-style" and new-style classes. New-style classes are derived from <code>object</code> and are what you are using, and invoke their base class through <code>super()</code>, e.g.</p>
<pre><code>class X(object):
  def __init__(self, x):
    pass

  def doit(self, bar):
    pass

class Y(X):
  def __init__(self):
    super(Y, self).__init__(123)

  def doit(self, foo):
    return super(Y, self).doit(foo)
</code></pre>
<p>Because python knows about old- and new-style classes, there are different ways to invoke a base method, which is why you've found multiple ways of doing so.</p>
<p>For completeness sake, old-style classes call base methods explicitly using the base class, i.e.</p>
<pre><code>def doit(self, foo):
  return X.doit(self, foo)
</code></pre>
<p>But since you shouldn't be using old-style anymore, I wouldn't care about this too much.</p>
<p>Python 3 only knows about new-style classes (no matter if you derive from <code>object</code> or not).</p>
</div>
<div class="post-text" itemprop="text">
<p>Both</p>
<pre><code>SuperClass.__init__(self, x)
</code></pre>
<p>or</p>
<pre><code>super(SubClass,self).__init__( x )
</code></pre>
<p>will work (I prefer the 2nd one, as it adheres more to the DRY principle).</p>
<p>See here: <a href="http://docs.python.org/reference/datamodel.html#basic-customization" rel="noreferrer">http://docs.python.org/reference/datamodel.html#basic-customization</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As of python 3.5.2, you can use:</p>
<pre><code>class C(B):
def method(self, arg):
    super().method(arg)    # This does the same thing as:
                           # super(C, self).method(arg)
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#super" rel="noreferrer">https://docs.python.org/3/library/functions.html#super</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>How do I initialize the base (super) class?</h2>
<pre><code>class SuperClass(object):
    def __init__(self, x):
        self.x = x

class SubClass(SuperClass):
    def __init__(self, y):
        self.y = y
</code></pre>
</blockquote>
<p>Use a <code>super</code> object to ensure you get the next method (as a bound method) in the method resolution order. In Python 2, you need to pass the class name and <code>self</code> to super to lookup the bound <code>__init__</code> method:</p>
<pre><code> class SubClass(SuperClass):
      def __init__(self, y):
          super(SubClass, self).__init__('x')
          self.y = y
</code></pre>
<p>In Python 3, there's a little magic that makes the arguments to <code>super</code> unnecessary - and as a side benefit it works a little faster:</p>
<pre><code> class SubClass(SuperClass):
      def __init__(self, y):
          super().__init__('x')
          self.y = y
</code></pre>
<p>Hardcoding the parent like this below prevents you from using cooperative multiple inheritance:</p>
<pre><code> class SubClass(SuperClass):
      def __init__(self, y):
          SuperClass.__init__(self, 'x') # don't do this
          self.y = y
</code></pre>
<p>Note that <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="noreferrer"><code>__init__</code> may only return <code>None</code></a> - it is intended to modify the object in-place.</p>
<h2>Something <code>__new__</code></h2>
<p>There's another way to initialize instances - and it's the only way for subclasses of immutable types in Python. So it's required if you want to subclass <code>str</code> or <code>tuple</code> or another immutable object.</p>
<p>You might think it's a classmethod because it gets an implicit class argument. But it's <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="noreferrer">actually a staticmethod</a>. So you need to call <code>__new__</code> with <code>cls</code> explicitly.</p>
<p>We usually return the instance from <code>__new__</code>, so if you do, you also need to call your base's <code>__new__</code> via <code>super</code> as well in your base class. So if you use both methods:</p>
<pre><code>class SuperClass(object):
    def __new__(cls, x):
        return super(SuperClass, cls).__new__(cls)
    def __init__(self, x):
        self.x = x

class SubClass(object):
    def __new__(cls, y):
        return super(SubClass, cls).__new__(cls)

    def __init__(self, y):
        self.y = y
        super(SubClass, self).__init__('x')
</code></pre>
<p>Python 3 sidesteps a little of the weirdness of the super calls caused by <code>__new__</code> being a static method, but you still need to pass <code>cls</code> to the non-bound <code>__new__</code> method:</p>
<pre><code>class SuperClass(object):
    def __new__(cls, x):
        return super().__new__(cls)
    def __init__(self, x):
        self.x = x

class SubClass(object):
    def __new__(cls, y):
        return super().__new__(cls)
    def __init__(self, y):
        self.y = y
        super().__init__('x')
</code></pre>
</div>
<span class="comment-copy">wrong. super only works with new-style classes, and is the only proper way to call a base when using new-style classes. Furthermore, you also need to pass 'self' explicitly using the old-style construct.</span>
<span class="comment-copy">@Ivo - the OP gave a new-style class in the example, and there's little point in talking about the difference between new-style and old-style as no one should use old-style any more. The link I gave (to the Python docs) suggest that there's more than one "proper" way to call the super-class <code>__init__</code>.</span>
<span class="comment-copy">Thumps up for the little magic.</span>
