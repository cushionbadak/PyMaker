<div class="post-text" itemprop="text">
<p>Is there a way to write the following function so that my IDE doesn't complain that <em>column</em> is an unused variable? </p>
<pre><code>def get_selected_index(self):
    (path, column) = self._tree_view.get_cursor()
    return path[0]
</code></pre>
<p>In this case I don't care about the second item in the tuple and just want to discard the reference to it when it is unpacked.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python the <code>_</code> is often used as an ignored placeholder.</p>
<pre><code>(path, _) = self._treeView.get_cursor()
</code></pre>
<p>You could also avoid unpacking as a tuple is indexable.</p>
<pre><code>def get_selected_index(self):
    return self._treeView.get_cursor()[0][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about the second item, why not just extract the first one:</p>
<pre><code>def get_selected_index(self):
    path = self._treeView.get_cursor()[0]
    return path[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it looks pretty, I don't know if a good performance.</p>
<pre><code>a = (1, 2, 3, 4, 5)
x, y = a[0:2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it is possible. The accepted answer with <code>_</code> convention still unpacks, just to a placeholder variable.</p>
<p>You can avoid this via <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a>:</p>
<pre><code>from itertools import islice

values = (i for i in range(2))

res = next(islice(values, 1, None))  # 1
</code></pre>
<p>This will give the same <code>res</code> as below:</p>
<pre><code>_, res = values
</code></pre>
<p>The solution, as demonstrated above, works when <code>values</code> is an iterable that is not an indexable collection such as <code>list</code> or <code>tuple</code>.</p>
</div>
<span class="comment-copy">It's worth noting that <code>_</code> is not any kind of syntactic magic, but a convention (of course, it's a convention recognised by IDEs and pylint, and Python conventions are pretty strong...)</span>
<span class="comment-copy">Python would be nothing without conventions!</span>
<span class="comment-copy">Is this convention documented?</span>
<span class="comment-copy">It is common in OCaml and Haskell.</span>
<span class="comment-copy">@Gaius: I believe in Haskell it explicitly means "discard this value"; in Python <code>_</code> is still an assigned variable that you could in theory use just like any other variable.</span>
<span class="comment-copy">Note that the return should now be <code>return path</code>, not <code>return path[0]</code></span>
<span class="comment-copy">This is weaker, because it removes the assertion that there are exactly two items.</span>
<span class="comment-copy">@Michael Mior: I've rolled back your edit: Based on the original question, it should still be <code>path[0]</code> (<code>path</code> seems to be a sequence itself)</span>
<span class="comment-copy">I'd argue that this is less explicit as the _ placeholder convention. There's potential ambiguity in the order of operations, is it: <code>(path = self._treeView.get_cursor())[0]</code> or <code>path = (self._treeView.get_cursor()[0])</code></span>
