<div class="post-text" itemprop="text">
<p>The question arose when answering to another SO question (<a href="https://stackoverflow.com/questions/3811794/how-do-i-track-down-a-heisenbug-in-some-python-code/3812011#3812011">there</a>).</p>
<p>When I iterate several times over a python set (without changing it between calls), can I assume it will always return elements in the same order? And if not, what is the rationale of changing the order ? Is it deterministic, or random? Or implementation defined?</p>
<p>And when I call the same python program repeatedly (not random, not input dependent), will I get the same ordering for sets?</p>
<p>The underlying question is if python set iteration order only depends on the algorithm used to implement sets, or also on the execution context?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no formal guarantee about the stability of sets (or dicts, for that matter.) However, in the CPython implementation, as long as nothing changes the set, the items will be produced in the same order. Sets are implemented as open-addressing hashtables (with a prime probe), so inserting or removing items can completely change the order (in particular, when that triggers a resize, which reorganizes how the items are laid out in memory.) You can also have two identical sets that nonetheless produce the items in different order, for example:</p>
<pre><code>&gt;&gt;&gt; s1 = {-1, -2}
&gt;&gt;&gt; s2 = {-2, -1}
&gt;&gt;&gt; s1 == s2
True
&gt;&gt;&gt; list(s1), list(s2)
([-1, -2], [-2, -1])
</code></pre>
<p>Unless you're very certain you have the same set and nothing touched it inbetween the two iterations, it's best not to rely on it staying the same. Making seemingly irrelevant changes to, say, functions you call inbetween could produce very hard to find bugs.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>And when I call the same python
  program repeatedly (not random, not
  input dependent), will I get the same
  ordering for sets?</p>
</blockquote>
<p>I can answer this part of the question now after a quick experiment. Using the following code:</p>
<pre><code>class Foo(object) :
  def __init__(self,val) :
    self.val = val
  def __repr__(self) :
    return str(self.val)

x = set()
for y in range(500) :
  x.add(Foo(y))
print list(x)[-10:]
</code></pre>
<p>I can trigger the behaviour that I was asking about in the other question. If I run this repeatedly then the output changes, but not on every run. It seems to be "weakly random" in that it changes slowly. This is certainly implementation dependent so I should say that I'm running the macports Python2.6 on snow-leopard. While the program will output the same answer for long runs of time, doing something that affects the system entropy pool (writing to the disk mostly works) will somethimes kick it into a different output.</p>
<p>The class Foo is just a simple int wrapper as experiments show that this doesn't happen with sets of ints. I think that the problem is caused by the lack of <code>__eq__</code> and <code>__hash__</code> members for the object, although I would dearly love to know the underlying explanation / ways to avoid it. Also useful would be some way to reproduce / repeat a "bad" run. Does anyone know what seed it uses, or how I could set that seed?</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>set</code> or <code>frozenset</code> is inherently an unordered collection. Internally, sets are based on a <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">hash table</a>, and the order of keys depends both on the insertion order and on the <a href="https://docs.python.org/3/library/functions.html#hash" rel="nofollow noreferrer"><code>hash</code></a> algorithm. In CPython (aka standard Python) integers less than the machine word size (32 bit or 64 bit) hash to themself, but text strings, <code>bytes</code> strings, and <code>datetime</code> objects hash to integers that vary randomly; you can control that by setting the <code>PYTHONHASHSEED</code> environment variable. </p>
<p>From the <code>__hash__</code> docs:</p>
<blockquote>
<p><strong>Note</strong></p>
<p>By default, the <code>__hash__()</code> values of <code>str</code>, <code>bytes</code> and <code>datetime</code>
  objects are “salted” with an unpredictable random value. Although they
  remain constant within an individual Python process, they are not
  predictable between repeated invocations of Python.</p>
<p>This is intended to provide protection against a denial-of-service
  caused by carefully-chosen inputs that exploit the worst case
  performance of a dict insertion, O(n^2) complexity. See
  <a href="http://www.ocert.org/advisories/ocert-2011-003.html" rel="nofollow noreferrer">http://www.ocert.org/advisories/ocert-2011-003.html</a> for details.</p>
<p>Changing hash values affects the iteration order of dicts, sets and
  other mappings. Python has never made guarantees about this ordering
  (and it typically varies between 32-bit and 64-bit builds).</p>
<p>See also PYTHONHASHSEED.</p>
</blockquote>
<p>The results of hashing objects of other classes depend on the details of the class's <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__</code></a> method.</p>
<p>The upshot of all this is that you can have two sets containing identical strings but when you convert them to lists they can compare unequal. Or they may not. ;) Here's some code that demonstrates this. On some runs, it will just loop, not printing anything, but on other runs it will quickly find a set that uses a different order to the original.</p>
<pre><code>from random import seed, shuffle

seed(42)

data = list('abcdefgh')
a = frozenset(data)
la = list(a)
print(''.join(la), a)

while True:
    shuffle(data)
    lb = list(frozenset(data))
    if lb != la:
        print(''.join(data), ''.join(lb))
        break    
</code></pre>
<p><strong>typical output</strong></p>
<pre><code>dachbgef frozenset({'d', 'a', 'c', 'h', 'b', 'g', 'e', 'f'})
deghcfab dahcbgef
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The definition of a set is unordered, unique elements (<a href="http://docs.python.org/library/sets.html" rel="nofollow">"Unordered collections of unique elements"</a>). You should care only about the interface, not the implementation. If you want an ordered enumeration, you should probably put it into a list and sort it.</p>
<p>There are many different implementations of Python. Don't rely on undocumented behaviour, as your code could break on different Python implementations. </p>
</div>
<div class="post-text" itemprop="text">
<p>It’s definitely implementation defined. The <a href="http://docs.python.org/library/stdtypes.html#set-types-set-frozenset" rel="nofollow" title="5.7. Set Types — set, frozenset">specification of a set</a> says only that</p>
<blockquote>
<p>Being an unordered collection, sets do not record element position or order of insertion.</p>
</blockquote>
<p>Why not use <a href="http://docs.python.org/dev/library/collections.html#collections.OrderedDict" rel="nofollow" title="7.3.5. OrderedDict objects">OrderedDict</a> to create your own OrderedSet class?</p>
</div>
<div class="post-text" itemprop="text">
<p>As pointed out, this is strictly an implementation detail.</p>
<p>But <em>as long as</em> you don’t change the structure between calls, there should be <em>no reason</em> for a read-only operation (= iteration) to change with time: no sane implementation does that. Even randomized (= non-deterministic) data structures that can be used to implement sets (e.g. skip lists) don’t change the reading order when no changes occur.</p>
<p>So, being rational, you can safely rely on this behaviour.</p>
<p>(I’m aware that certain GCs may reorder memory in a background thread but even this reordering will not be noticeable on the level of data structures, unless a bug occurs.)</p>
</div>
<span class="comment-copy">I think the consensus here is that no sane language would provide a data structure whose order changes spontaneously, but no sane programmer would make such an assumption without being explicitly told it. <i>Clearly</i> the answer is immutability by default.</span>
<span class="comment-copy">I would say that the stability of dict at least is guaranteed.  The docs say: "If items(), keys(), values(), iteritems(), iterkeys(), and itervalues() are called with no intervening modifications to the dictionary, the lists will directly correspond."  This implies that calling any of those methods repeatedly will return the same sequence if the dict is not modified.  It also says that iter(dict) is a shortcut for dict.iterkeys()</span>
<span class="comment-copy">I said "no <i>formal</i> guarantee". The dict docs can change (and such details have indeed changed in the past, not to mention differed between implementations); the "formal" (but rather terse) language specification at <a href="http://docs.python.org/ref" rel="nofollow noreferrer">docs.python.org/ref</a> doesn't mention it either way.</span>
<span class="comment-copy">@ThomasWouters: The language spec is not concerned with types except insofar as they affect the syntax and mentioning the built-ins that happen to implement the high-level concepts. The docs for <code>dict</code> are considered binding; sure, the implementation has changed over time, but the docs for <code>dict</code> guarantee very little. They specifically mention when it's a CPython implementation detail, and the repeatability of iteration ordering (given no intervening modifications) is not an implementation detail. The Python Standard Library is normative, not just the Python Language Reference.</span>
<span class="comment-copy">For reference, <a href="https://docs.python.org/2.0/lib/typesmapping.html" rel="nofollow noreferrer">the <code>dict</code> requirements for <code>keys</code>/<code>items</code>/<code>values</code> since as early as 2.0 mention this repeatability guarantee</a> (see footnote 2). No such guarantee has ever been made for <code>set</code> (it shares algorithms with <code>dict</code> in many versions, but it's not 100% consistent, and the guarantee isn't as useful as it is for <code>dict</code>, so there is little benefit in making that guarantee and binding implementations to it.</span>
<span class="comment-copy">This is terribly easy to explain: because of the lack of <code>__eq__</code> and <code>__hash__</code>, your objects hash based on <code>id()</code>, and the id for the objects changes between runs. You aren't repeatedly printing <code>list()[-10:]</code> of the <i>same</i> set, just one that was created the same way.</span>
<span class="comment-copy">Why do the default implementations of <b>eq</b> and <b>hash</b> rely on the random module... It seems as if they use id() + something else. If I methods that use id() explicitly then the behaviour changes.</span>
<span class="comment-copy">They don't rely on the <code>random</code> module at all. They only use the <code>id</code> of the object. The <code>id</code> of an object is the memory address, so <i>between runs</i> it will differ because of all manner of reasons. If I implement <code>__hash__</code> and <code>__eq__</code> in terms of <code>id()</code>, the behaviour is the same. I'm not sure what you did, but I guess you did something different; you'll have to put up the code to tell. Or, you can stop worrying about the behaviour <i>between runs</i>, because there's no kind of guarantee about the order of sets or dicts in that case anyway.</span>
<span class="comment-copy">Thanks for the comments. I'll wrap up some test code and ask a separate question.</span>
<span class="comment-copy">I'm not saying I will use that behavior, just wondering where the bug seen by another poster could be coming from. Also there is a very similar property for dict that <i>is</i> guaranteed by python documentation (see <a href="http://stackoverflow.com/questions/3666237/are-order-of-keys-and-values-in-python-dictionary-guaranteed-to-be-the-same" title="are order of keys and values in python dictionary guaranteed to be the same">stackoverflow.com/questions/3666237/…</a>). Why there should be such differences between sets and dict is quite surprising.</span>
<span class="comment-copy">Being rational, we would also try to capture this assumption in a unit test so the program does not break in mysterious ways at a later date. :)</span>
<span class="comment-copy">@jleedev: True, but unfortunately I can easily see such a unit test fail to flag the error: if the behaviour is indeed nondeterministc, writing a reliable unit test for this behaviour will be incredibly hard. For example, I had a unit test suite on a parallel program that would fail only about once out of a hundred calls due to a race condition. In 99% of the cases, it would run through, even though it was a <i>very</i> thorough test suite.</span>
