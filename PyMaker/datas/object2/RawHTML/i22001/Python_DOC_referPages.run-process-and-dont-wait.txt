<div class="post-text" itemprop="text">
<p>I'd like to run a process and not wait for it to return.  I've tried spawn with P_NOWAIT and subprocess like this:</p>
<pre><code>app = "C:\Windows\Notepad.exe"
file = "C:\Path\To\File.txt"

pid = subprocess.Popen([app, file], shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).pid
</code></pre>
<p>However, the console window remains until I close Notepad.  Is it possible to launch the process and not wait for it to complete?</p>
</div>
<div class="post-text" itemprop="text">
<p>This call doesn't wait for the child process to terminate (on Linux). Don't ask me what <code>close_fds</code> does; I wrote the code some years ago. (BTW: The documentation of <code>subprocess.Popen</code> is confusing, IMHO.)</p>
<pre><code>proc = Popen([cmd_str], shell=True,
             stdin=None, stdout=None, stderr=None, close_fds=True)
</code></pre>
<p><strong>Edit:</strong></p>
<p>I looked at the the documentation of <a href="http://docs.python.org/library/subprocess.html" rel="noreferrer">subprocess</a>, and I believe the important aspect for you is <code>stdin=None, stdout=None, stderr=None,</code>. Otherwise <em>Popen</em> captures the program's output, and you are expected to look at it. <code>close_fds</code> makes the parent process' file handles inaccessible for the child.</p>
</div>
<div class="post-text" itemprop="text">
<p>I finally got this to work. I'm running "Python 2.6.6 (r266:84297, Aug 24 2010, 18:13:38) [MSC v.1500 64 bit (AMD64)] win32". Here's how I had to code it:</p>
<pre><code>from subprocess import Popen
DETACHED_PROCESS = 0x00000008
cmd = [
        sys.executable,
        'c:\somepath\someprogram.exe',
        parm1,
        parm2,
        parm3
      ]
p = Popen(cmd,shell=False,stdin=None,stdout=None,stderr=None,close_fds=True,creationflags=DETACHED_PROCESS)
</code></pre>
<p>This turns off all piping of standard input/output and does NOT execute the called program in the shell. Setting 'creationflags' to DETACHED_PROCESS seemed to do the trick for me. I forget where I found out about it, but an example is used <a href="https://stackoverflow.com/questions/2970045/python-launch-a-long-running-process-from-a-web-app">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the simples way to implement this is using the <a href="https://docs.python.org/3/library/os.html?highlight=spawn#os.spawnl" rel="nofollow noreferrer">os.spawn*</a> family of functions passing the <code>P_NOWAIT</code> flag.</p>
<p>This for example will spawn a <code>cp</code> process to copy a large file to a new directory and not bother to wait for it.</p>
<pre><code>import os
os.spawnlp(os.P_NOWAIT, 'cp', 'cp', '/path/large-file.db', '/path/dest')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are capturing input and output to the program so your program will not terminate as long as it keeps those file descriptors open. If you want to capture, you need to close the file descriptors. If you don't want to capture:</p>
<pre><code>app = "C:\Windows\Notepad.exe"
file = "C:\Path\To\File.txt"

pid = subprocess.Popen([app, file]).pid
</code></pre>
</div>
<span class="comment-copy">Are you using <code>python.exe</code> or <code>pythonw.exe</code>?</span>
<span class="comment-copy">Apparently python is smart enough to realize those backslashes aren't escape characters, nevertheless, I would avoid doing that by using <code>r'C:\path'</code> or even better <code>'C:/path'</code></span>
<span class="comment-copy">@NickT or just single quote instead of double</span>
<span class="comment-copy">@aking1012 single vs. double quoted strings are parsed differently?  Did not know</span>
<span class="comment-copy">@aking1012: You are; Python does not treat single and double quotes differently.</span>
<span class="comment-copy">Looks like it works for me with Python 2.6/2.7 on XP-32b</span>
<span class="comment-copy">I need the win32 DETACHED_PROCESS flag otherwise it hangs on Windows for me.</span>
<span class="comment-copy">According to [1] shell=True may be a security hazard and if shell is True, it is recommended to pass args as a String (I had problems with incorrectly passed args using a sequence and shell=True. Although my args sequence matched shlex output). I'm pretty sure shell=True is not needed for detaching (tested only on Linux).</span>
<span class="comment-copy">The recipe does not work on Windows XP + Python 2.7</span>
<span class="comment-copy">see also <a href="https://stackoverflow.com/q/49310057/32453">stackoverflow.com/q/49310057/32453</a></span>
<span class="comment-copy">the proper way to tokenize is with shlex</span>
<span class="comment-copy">creationflags is windows only</span>
