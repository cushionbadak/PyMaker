<div class="post-text" itemprop="text">
<p>I've slightly changed the way I use <code>super</code> as I've got a little more familiar with it, and each time I've found an issue. I'm still having to use Python 2.7 so the old syntax is necessary.</p>
<p>Two of the alternate ways I've tried and stopped using are <code>super(self.__class__, self)</code> and <code>InheritClass.func(self, ...)</code>.</p>
<p>I realised that <code>super</code> basically returns an object, so instead of constantly creating the object, it could be assigned to a class attribute instead. It seems a little neater as the instance is only needed to be read once, but would there be any potential issues arising over this.</p>
<p>I've been setting it to <code>self.__super</code> so nothing can really interfere with it, I'd just like an opinion before I do too much and have to rewrite a whole load of code.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with assigning a <code>super</code> object to an instance attribute is that it creates a reference cycle:</p>
<pre><code>import weakref

class RefCycle(object):
    def __init__(self):
        self.__super = super(RefCycle, self)

obj = RefCycle()

ref = weakref.ref(obj)
del obj
assert ref() is None  # &lt;- assertion fails, the object still exists
</code></pre>
<p>Of course the garbage collector will detect and clean up this reference cycle <em>eventually</em>, but if you get into a habit of using <code>super</code> like this, you <em>will</em> be wasting a significant amount of memory.</p>
<p>A better solution is to implement a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a> that returns a <code>super</code> object:</p>
<pre><code>class NoRefCycle(object):
    @property
    def __super(self):
        return super(NoRefCycle, self)
</code></pre>
<p>This way, no reference cycles are created.</p>
</div>
<span class="comment-copy">Your title says "class attribute", but <code>self.__super</code> is an instance attribute. But more importantly, you haven't shown us <i>what</i> you assign to that attribute, so we can't tell you if it's wrong or right.</span>
<span class="comment-copy">Theres potential issues with messing with any internal functions, why are you doing it at all?</span>
<span class="comment-copy">I mean using <code>self.__super = super(MyClass, self)</code>, then just using <code>self.__super</code> every time you need to inherit a method</span>
<span class="comment-copy">Well initially, what happens when you inherit from an inherited class?</span>
<span class="comment-copy">You may need to add extra bits to a method but still call it from the inherited class. In my case, I've overridden a ton of methods, where it will only use the inherited method if the window is in a certain state.</span>
<span class="comment-copy">Ah thanks for the info, yeah that definitely sounds bad on larger projects. The property is a good idea, but as it's still recreating the object, I guess I might as well stick with the traditional method :)</span>
