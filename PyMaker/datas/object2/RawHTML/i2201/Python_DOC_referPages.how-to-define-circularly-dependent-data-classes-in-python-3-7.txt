<div class="post-text" itemprop="text">
<p>Suppose that <code>class A</code> has a member whose type is <code>class B</code>, and <code>class B</code> has a member whose type is <code>class A</code>.</p>
<p>In Scala or Kotlin, you can define the classes in any order without worries in this case because the firstly-defined class can use the secondly-defined class as usual, even in case/data classes.</p>
<p>However in Python, the following code</p>
<pre><code>class A:
    b = B()

class B:
    a = A()     
</code></pre>
<p>throws a compile error because <code>class B</code> is not defined when <code>class A</code> is being defined.</p>
<p>You can work around this simple case, like in <a href="https://stackoverflow.com/questions/6402522/python-mutually-dependent-classes-circular-dependencies">this answer</a></p>
<pre><code>class A:
    pass

class B:
    a = A()

A.b = B()
</code></pre>
<p>However, this way does not work for data classes in Python because assigning members after the definition of data classes will not update the auto-generated methods of the data classes, which makes the usage of "data class" useless.</p>
<pre><code>@dataclass
class A:
    b: B  # or `b: Optional[B]`

@dataclass
class B:
    a: A  # or `a: Optional[A]`
</code></pre>
<p>How can I avoid this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several ways to solve circular dependencies like this, see <a href="https://stackoverflow.com/questions/33837918/type-hints-solve-circular-dependency">Type hints: solve circular dependency</a></p>
<p>You can always apply the decorator manually (and update the annotations), like @Nearoo's answer shows.</p>
<p>However, it might be easier to "forward declare" the class:</p>
<pre><code>class A:
    pass

@dataclass
class B:
    a: A

@dataclass
class A:
    b: B
</code></pre>
<p>Or simply use a forward reference:</p>
<pre><code>@dataclass
class B:
    a: 'A'

@dataclass
class A:
    b: B
</code></pre>
<p>The cleanest is to import <a href="https://docs.python.org/3/whatsnew/3.7.html#pep-563-postponed-evaluation-of-annotations" rel="noreferrer">Python 4.0's behavior</a> (if you can):</p>
<pre><code>from __future__ import annotations

@dataclass
class B:
    a: A

@dataclass
class A:
    b: B
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve your goal by applying the <code>dataclass</code> decorator only after we injected the field <code>b</code> into <code>A</code>. For that, we simply have to add the type annotation into <code>A</code>'s <code>__annotations__</code>-field</p>
<p>The following code solves your problem:</p>
<pre><code>class A:
    b: None     # Note: __annotations__ only exists if &gt;=1 annotation exists

@dataclass
class B:
    a: A

A.__annotations__.update(b=B) # Note: not the same as A.b: B
A = dataclass(A) # apply decorator
</code></pre>
<p>Concerning the safety and validity of this method, <a href="https://www.python.org/dev/peps/pep-0526/#runtime-effects-of-type-annotations" rel="nofollow noreferrer">PEP 524</a> states that </p>
<blockquote>
<p>..at the module or class level, if the item being annotated is a simple name, then it and the annotation will be stored in the __annotations__ attribute of that module or class.
  [This attribute] is writable, so this is permitted:  </p>
<p><code>__annotations__['s'] = str</code></p>
</blockquote>
<p>So adding a type annotation later on by editing <code>__annotations__</code> is identical to defining it at the class definition.</p>
</div>
<div class="post-text" itemprop="text">
<p>As python is script language - there is no way to do it with <code>@dataclass</code>. Because there is no "autowired" (dependency injection) mechanism in python.
At this moment if you need circular dependency - you should use one of class as regular.</p>
<pre><code>class A:
    b = None

@dataclass
class B:
    a: A

a = A()
a.b = B(a)
</code></pre>
<p>Python compiler goes through each line, without jumping from class/function definition. And when compiler/interpreter see following line <code>b: B</code> and it didn't see <code>B</code> class before - it will throw an exception <code>NameError: name 'B' is not defined</code></p>
<p>I would like to believe that there is way to do that(circular dependency for <code>@dataclass</code>), but the truth is cruel. (There are many things that you can do in Java/other language and can't do in python. Another direction of this statement is truthful either.)</p>
</div>
<span class="comment-copy">I'm thinking of just closing this as a duplicate of <a href="//stackoverflow.com/q/33837918">Type hints: solve circular dependency</a>, because this is just another type hint circular dependency problem.</span>
<span class="comment-copy">The <code>__future__</code> import is nice, but doesn't seem to work if you have to do something like <code>a: A = field=(default_factory=A)</code>. Is there something additional that can be done in this case or is forward declaring the only option?</span>
<span class="comment-copy">Actually, looks like forward declaring doesn't work in this case either...</span>
