<div class="post-text" itemprop="text">
<p>For example, let's say I have a class for iterating the records inside a file:</p>
<pre><code>class MySpecialFile:
    ...
    def reset(self):
        self._handle.seek(0)

    def __iter__(self):
        self.reset()
        return self
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>iter</code> is expected to have no side effects. By violating this assumption, your code breaks all sorts of things. For example, the standard test for whether a thing is iterable:</p>
<pre><code>try:
    iter(thing)
except TypeError:
    do_whatever()
</code></pre>
<p>will reset your file. Similarly, the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools <code>consume</code> recipe</a>:</p>
<pre><code>def consume(iterator, n=None):
    "Advance the iterator n-steps ahead. If n is None, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
</code></pre>
<p>will produce an incorrect file position instead of advancing <code>n</code> records after <code>consume(your_file, n)</code>. Skipping the first few records with <code>next</code> before a loop will also fail:</p>
<pre><code>f = MySpecialFile(whatever)
next(f) # Skip a header, or try, anyway.
for record in f:
    # We get the header anyway.
    uhoh()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Anything that subverts the intended flow of a language construct is a danger sign, worse than just a "code smell".  This is not specific to Python; it applies to any language or system.</p>
<p>However, remember the stricture about "the hobgoblin of little minds":</p>
<ul>
<li>Does your <code>reset</code> improve the program flow?</li>
<li>Is the resulting code easy to read and understand?</li>
</ul>
<p>If you've covered these for the people who will have to understand and maintain this -- including your future self -- then the <code>reset</code> might well be good practice.  I'm skeptical, but I've seen such situations at work.</p>
<p><em>Side note</em>: Why do you need to <code>reset</code> the iterator when you first construct it?</p>
</div>
<span class="comment-copy">This would make it impossible to skip over the first few records (header lines, perhaps), and then use a <code>for</code> loop to iterate the rest of the file.</span>
<span class="comment-copy">This breaks all sorts of things. The itertools <code>consume</code> recipe, or using <code>iter</code> to test whether a thing is iterable, for example. It looks like you were trying to "fix" the common two-loops-over-a-file bugs, but it just creates new problems.</span>
<span class="comment-copy">Let's say the file class is more high-level than that. No need to skip the header, it is automatically read when the file is opened (in fact, it's needed for the object to work properly). The user have direct access to the header fields through the object...   Skipping records is also not needed: the file object allows to filter and get the records based on the only conditions that matter for the application.   On the other hand, re-iteration is frequent. That's why "reset" exists.</span>
<span class="comment-copy">@sboby: You're creating a minefield for yourself. Maybe you don't think you're going to do any of the things I've listed in this answer. Well, there are plenty more things that could wind up calling <code>iter</code> in the middle of an iteration. It's going to be impossible to safely pass your file object to any library not specifically designed with your file object in mind, severely limiting its usefulness. Why not use a safer design, like having <code>reset</code> return the file and use <code>for record in f.reset()</code> to make the reset explicit without breaking <code>iter</code>?</span>
<span class="comment-copy">Oh, I'm not going to write that code. I'm going to do what you said (though I hadn't thought to return self in reset, thank you) or rethinking the design from the ground up.   But... a part of me says that it's far more likely that a user will make a mistake because he/she will forget to reset the iterator.   Keep in mind that there's not any sane/meaningful use of the library that implies to skip records. That's part of the reason why I'm asking this question: is it <b>always</b> wrong?  This scheme also turns an iterator to a re-iterable object.</span>
