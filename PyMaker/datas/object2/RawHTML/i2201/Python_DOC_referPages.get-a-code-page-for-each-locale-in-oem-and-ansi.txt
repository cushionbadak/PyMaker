<div class="post-text" itemprop="text">
<p>How do I get the code page for each locale (not only for my locale)?</p>
<p>I looking for a simple function in python / c# / c  (prefer with python or c#) to found for each locale that I want  what is the code page in Ansi and in OEM.</p>
</div>
<div class="post-text" itemprop="text">
<p>In C, starting with Windows Vista, you can query information for a <a href="https://docs.microsoft.com/en-us/windows/desktop/Intl/locale-names" rel="nofollow noreferrer">locale name</a> via <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winnls/nf-winnls-getlocaleinfoex" rel="nofollow noreferrer"><code>GetLocaleInfoEx</code></a>. The <a href="https://docs.microsoft.com/en-us/windows/desktop/Intl/locale-idefault-constants" rel="nofollow noreferrer">locale information constants</a> to query the ANSI and OEM codepages are, respectively,<code>LOCALE_IDEFAULTANSICODEPAGE</code> (0x1004) and <code>LOCALE_IDEFAULTCODEPAGE</code> (0x000B). You can enumerate all system locale names via <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winnls/nf-winnls-enumsystemlocalesex" rel="nofollow noreferrer"><code>EnumSystemLocalesEx</code></a> and query the ANSI and OEM codepages for each locale in the callback. </p>
<p>In a Python script, you can call these functions via <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a>. For example:</p>
<pre class="lang-python prettyprint-override"><code>import ctypes
from ctypes import c_int
from ctypes.wintypes import BOOL, DWORD, LPVOID, LPWSTR, LPARAM, WCHAR

kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)

CP_ACP = 0
CP_OEMCP = 1
LOCALE_NAME_USER_DEFAULT = None
LOCALE_NAME_SYSTEM_DEFAULT = "!x-sys-default-locale"
LOCALE_RETURN_NUMBER = 0x20000000
LOCALE_IDEFAULTCODEPAGE = 0x0000000B
LOCALE_IDEFAULTANSICODEPAGE = 0x00001004
LOCALE_SENGLISHLANGUAGENAME = 0x00001001
LOCALE_SENGLISHCOUNTRYNAME = 0x00001002

LOCALE_ENUMPROCEX = ctypes.WINFUNCTYPE(BOOL, 
    LPWSTR, # lpLocaleString
    DWORD,  # dwFlags
    LPARAM) # lParam

def _check_zero(result, func, args):
    if not result:
        raise ctypes.WinError(ctypes.get_last_error())
    return args

kernel32.EnumSystemLocalesEx.errcheck = _check_zero
kernel32.EnumSystemLocalesEx.argtypes = (
    LOCALE_ENUMPROCEX, # lpLocaleEnumProcEx
    DWORD,             # dwFlags
    LPARAM,            # lParam
    LPVOID)            # lpReserved

LCTYPE = DWORD
kernel32.GetLocaleInfoEx.errcheck = _check_zero
kernel32.GetLocaleInfoEx.argtypes = (
    LPWSTR, # lpLocaleName,
    LCTYPE, # LCType,
    LPVOID, # lpLCData,
    c_int)  # cchData

def get_language(locale=LOCALE_NAME_SYSTEM_DEFAULT):
    length = kernel32.GetLocaleInfoEx(locale, LOCALE_SENGLISHLANGUAGENAME, 
        None, 0)
    language = (WCHAR * length)()
    kernel32.GetLocaleInfoEx(locale, LOCALE_SENGLISHLANGUAGENAME, 
        language, length)
    return language.value

def get_country(locale=LOCALE_NAME_SYSTEM_DEFAULT):
    length = kernel32.GetLocaleInfoEx(locale, LOCALE_SENGLISHCOUNTRYNAME, 
        None, 0)
    country = (WCHAR * length)()
    kernel32.GetLocaleInfoEx(locale, LOCALE_SENGLISHCOUNTRYNAME, 
        country, length)
    return country.value

def get_acp(locale=LOCALE_NAME_SYSTEM_DEFAULT):
    cp_ansi = DWORD()
    kernel32.GetLocaleInfoEx(locale, LOCALE_IDEFAULTANSICODEPAGE | 
        LOCALE_RETURN_NUMBER, ctypes.byref(cp_ansi), 
        ctypes.sizeof(cp_ansi) // ctypes.sizeof(WCHAR))
    return cp_ansi.value

def get_oemcp(locale=LOCALE_NAME_SYSTEM_DEFAULT):
    cp_oem = DWORD()
    kernel32.GetLocaleInfoEx(locale, LOCALE_IDEFAULTCODEPAGE | 
        LOCALE_RETURN_NUMBER, ctypes.byref(cp_oem), 
        ctypes.sizeof(cp_oem) // ctypes.sizeof(WCHAR))
    return cp_oem.value

def list_system_locales():
    system_locales = []
    @LOCALE_ENUMPROCEX
    def enum_cb(locale, flags, param):
        system_locales.append((locale, 
            get_language(locale), get_country(locale), 
            get_acp(locale), get_oemcp(locale)))
        return True
    kernel32.EnumSystemLocalesEx(enum_cb, 0, 0, None)
    return sorted(system_locales)
</code></pre>
<p>Note that Unicode-only locales do not have an ANSI or OEM codepage. In this case the values returned are for the current system ANSI and OEM codepages, i.e. <code>CP_ACP</code> (0) and <code>CP_OEMCP</code> (1). For example, the Hindi (hi) language in India (IN) is a Unicode-only locale:</p>
<pre><code>&gt;&gt;&gt; (get_acp('hi-IN'), get_oemcp('hi-IN')) == (CP_ACP, CP_OEMCP)
True
</code></pre>
</div>
<span class="comment-copy">thank you so much about it!  is there any way to get on the list that <code>list_system_locales</code> return the full country(lang) like i see it on windows locale windowand not like <code>ff-NG</code> or <code>en-MG</code> ,  and is that list is correct for all windows versions or it depend on somthing?</span>
<span class="comment-copy"><code>EnumSystemLocalesEx</code> enumerates the locales available on the current system; it won't be the same on all systems. Also, the enumeration can be narrowed down. I had it enumerate all locales, including variants with an alternate sort. When I have time, I'll add a function to get the full language and country name.</span>
<span class="comment-copy">I will thank you to see the full language and country.  What I mean is if I see that in <code>ff-NG</code> it use in ansi codepage X and wity oem codepage Y, so in all windows version that true? Or maybe in another version it use another codepage</span>
<span class="comment-copy">I don't know the deep history of codepage assignment way back to Windows NT 3.1 in 1993. Codepages are legacy locale data, so I think they've been stable since Windows Vista at least. My updated answer requires Windows 7+. Locale names were introduced in Vista, in place of local IDs (LCIDs), but the information constants I'm using for the English names of languages and countries were introduced in Windows 7.</span>
<span class="comment-copy">1) When I running this code in win 7 I get list with 360 items, when I running it in win 10 I get a list with 850 items, so there is a locale that exist in win 10 but not in win 7? 2) to 'Embu', 'Kenya' I see in ansi code page 0 is that wrong? I see here en.wikipedia.org/wiki/Code_page all the code page that windows have , and not see code page 0 thank you a lot!</span>
