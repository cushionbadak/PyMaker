<div class="post-text" itemprop="text">
<p>AFAIK this code can be used to lock a directory:</p>
<pre><code>class LockDirectory(object):
    def __init__(self, directory):
        assert os.path.exists(directory)
        self.directory = directory

    def __enter__(self):
        self.dir_fd = os.open(self.directory, os.O_RDONLY)
        try:
            fcntl.flock(self.dir_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError as ex:
            if ex.errno != errno.EAGAIN:
                raise
            raise Exception('Somebody else is locking %r - quitting.' % self.directory)

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.dir_fd.close()
</code></pre>
<p>But according to the answers of this question locking a directoy is not possible: <a href="https://stackoverflow.com/questions/52643622/python-lock-a-directory">Python: Lock a directory</a></p>
<p>What is wrong with above code?</p>
<p>I only need to support current linux version. No Windows, Mac or other unix.</p>
</div>
<div class="post-text" itemprop="text">
<p>I change your code a bit,add <code>return self</code> like most context manage do,then with <code>dup()</code>,the second context manage will fail.and the solution is simple,uncomment<code>fcntl.flock(self.dir_fd,fcntl.LOCK_UN)</code></p>
<p>The mode used to open the file doesn't matter to flock. </p>
<p>and you cannot flock on NFS.</p>
<pre><code>import os
import fcntl
import time
class LockDirectory(object):
    def __init__(self, directory):
        assert os.path.exists(directory)
        self.directory = directory

    def __enter__(self):
        self.dir_fd = os.open(self.directory, os.O_RDONLY)
        try:
            fcntl.flock(self.dir_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError as ex:             
            raise Exception('Somebody else is locking %r - quitting.' % self.directory)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # fcntl.flock(self.dir_fd,fcntl.LOCK_UN)
        os.close(self.dir_fd)

def main():
    with LockDirectory("test") as lock:
        newfd = os.dup(lock.dir_fd)
    with LockDirectory("test") as lock2:
        pass

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is a <em>read</em> lock, then there is only a minor error in the code you have. It is perfectly feasible to get a read lock on a directory.</p>
<p>You'll need to alter your <code>__exit__</code> function to use <a href="https://docs.python.org/3/library/os.html#os.close" rel="nofollow noreferrer"><code>os.close()</code></a> to close the file descriptor; a file descriptor is just an integer, and integers have no <code>.close()</code> method:</p>
<pre><code>def __exit__(self, exc_type, exc_val, exc_tb):
    os.close(self.dir_fd)
</code></pre>
<p>The usual confusion for people that think you can't, are those that have tried with the <code>open()</code> function. Python won't let you open a directory node with that function because there is no point in creating a Python file object for a directory. Or perhaps there is an assumption that you wanted the OS to enforce access to the directory via the lock (as opposed to an advisory lock that a cooperative set of processes agree to obtain first before attempting access).</p>
<p>So no, there is nothing wrong with the code if all you want is an advisory lock, and are fine with this only working on Linux.</p>
<p>I'd drop the <code>directory</code> distinction from the code. The lock will work on any path that you have read access to. It is not exclusive to directories.</p>
<p>The downside of locking the directory is that this doesn't give you a place to store lock metadata. While <code>lsof</code> can give you the PID of the current owner of the lock, you may want to communicate some other information with the lock to help troubleshoot or automate lock breaking. A <code>.lock</code> file or symlink would let you record additional information. For example, Mercurial will create a symlink with the hostname, the PID namespace identifier (Linux only) and the PID in the target name; you can create such a symlink atomically, while writing that data to a file would require creating a file under a temp name followed by a rename.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found an answer here: <a href="https://stackoverflow.com/q/52815858/633961">Python: Lock directory</a></p>
<p>It is possible to lock a directory with this:</p>
<pre><code>fcntl.flock(self.dir_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
</code></pre>
<p>Of course this is a lock which every code which plays in this game need to check first.</p>
<p>AFAIK this is called "advisory lock".</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest you go with a simple lock file. As the question in the comment (<a href="https://stackoverflow.com/questions/32592698/how-to-lock-a-directory-between-python-processes-in-linux">How to lock a directory between python processes in linux?</a>) suggests, there is no locking mechanism for <strong>directories</strong>, as opposed to files.<br/>
Lock files are used left and right on Linux, they are very transparent and easy to debug, so I would just go with that.<br/>
I am waiting to be challenged on this however!</p>
</div>
<span class="comment-copy">Is your own python process the only candidate to operate on the directory?</span>
<span class="comment-copy">@FlyingTeller there is an other process who puts files into this directory, but this does not need to get locked. Only the python script which consumes the data needs locking.</span>
<span class="comment-copy">if it's in the same process, why not use a "is_running" flag, so you don't fire the next processing if the current one isn't finished?</span>
<span class="comment-copy">The question asks "How to lock a directory?" and the answer is "You can't, create a file that symbolizes a lock on the directory"</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre Cron is starting the process every N minutes. You suggest to use a "is_running" flag. That's why I want to lock the directory which the script operates on.</span>
<span class="comment-copy">Great. Has any one fun making a little python lib on github+pypi from this?</span>
<span class="comment-copy">You don't need to keep this anymore. I merged the questions. Please don't ask duplicated questions like that again.</span>
<span class="comment-copy">@YvetteColomb what happens if I do it again?</span>
<span class="comment-copy">it's not the worst thing that can happen, it's something we discourage. It creates more work for people to have to close them. If it were an ongoing habit it could result in disciplinary action, but that's in rare and persistent cases.</span>
<span class="comment-copy">Directories support advisory locking just fine, that other answer is simply wrong. All you need is a file handle, and the low-level <code>os.open()</code> call will let you open a directory file handle just fine.</span>
