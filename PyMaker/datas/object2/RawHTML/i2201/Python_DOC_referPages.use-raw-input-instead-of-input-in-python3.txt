<div class="post-text" itemprop="text">
<p>I am in the habit of using <code>raw_input(...)</code> for certain debugging. However, in python3 this has changed to <code>input(...)</code>. Is there a way to define an alias at the top of my project, such as:</p>
<pre><code># __init__.py
raw_input = input
</code></pre>
<p>I tried the above, but it only worked in the file I added it to, and not any other files in that directory. I'd like this to work basically in every file within my python repository.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define all aliases in a separate file (e.g. <code>aliases.py</code>) then import said file where needed (i.e. <code>import aliases</code>).</p>
<p>The con with this method that you'll be referencing the alias through <code>aliases.alias</code> unless you make the import stricter (i.e. <code>from aliases import raw_input</code>) or if you don't care about avoiding a wildcard import (i.e. <code>from aliases import *</code>).</p>
<p>Additionally, if you don't mind another import in the aliases file you can use the builtins namespace:</p>
<pre><code>import builtins

builtins.raw_input = input
</code></pre>
<p>You still have to define all aliases separate file (e.g. <code>aliases.py</code>) then import said file where needed (i.e. <code>import aliases</code>) but the advantage of using the builtins namespace is that you can use that import exactly as given.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it by creating a module for creating the renaming function and then importing it to every file you want to like this:</p>
<p>First the module function declaration in alias.py</p>
<pre><code>def raw_input(a):
    return input(a)
</code></pre>
<p>Secondly, import to another file:</p>
<pre><code>from alias import raw_input
x = raw_input("hello world")
print(x)
</code></pre>
<p>Sadly, you will have to make the import of the module to every file you want to use the renamed function.</p>
<p>Hope it works for you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Put this at the top, and you will get exactly what you want.</p>
<pre><code>import builtins
builtins.raw_input = builtins.input
</code></pre>
<p>It is guaranteed to work, but generally considered a bad practice (everybody will be confused with where is that raw_input defined)</p>
</div>
<span class="comment-copy">Do you mean, <code>raw_input = input</code>?</span>
<span class="comment-copy">@Rishav yes, sorry. Thanks for pointing that out -- updated above.</span>
<span class="comment-copy">Python 3's <code>input</code> method is already the equivalent of Python 2's <code>raw_input</code>. It's Python 2's <code>input</code> that doesn't exist anymore.</span>
<span class="comment-copy">Nope.  There's <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP" rel="nofollow noreferrer"><code>PYTHONSTARTUP</code></a>, but that only works for interactive interpreter sessions. See also: <a href="https://stackoverflow.com/questions/6965090/how-to-add-builtin-functions">How to add builtin functions</a> (tldr: not really possible)</span>
<span class="comment-copy">@PatrickHaugh got it -- so maybe I should just add that line at the top of each file I need to use it in?</span>
<span class="comment-copy">How is this different from just <code>raw_input = input</code>?</span>
<span class="comment-copy">@Rishav This makes all the aliases available to all Python files easily with one import. Instead of having to redefine them in every file.</span>
<span class="comment-copy">It just skirts around the real problem IMO; which is how to include a certain piece of functionality without explicitly <code>import</code>ing it or adding it to the top of the file.</span>
<span class="comment-copy">Does it?  <code>import aliases</code> will only pull <code>aliases</code> into the current namespace, so now OP can write <code>aliases.raw_input(...)</code>.</span>
<span class="comment-copy">@Rishav A solution that looks like what OP seems to expect it to look like would involve modifying the Python parser. Which is almost universally considered a bad idea. You're basically forking the language at that point and creating your own personal dialect. Instead of doing that, you can put one import statement in each of your Python files.</span>
<span class="comment-copy">How is this different from just <code>raw_input = input</code>?</span>
<span class="comment-copy">sorry, forgot to clarify that the first part of the code is within another file called alias.py (already edited), the only difference I see is that he wanted to have the renamed function in every file he uses so it is available through the import. Fake Code Monkey Rashid answered the same way of solving it just a few seconds before me.</span>
<span class="comment-copy">@Rishav is not wrong.  You don't have to define <code>raw_input</code> as a new function since <code>raw_input = input</code> essentially makes them identical objects, and you can still <code>import</code> the same from aliases.</span>
<span class="comment-copy">This method does define an alias but it doesn't make said alias available across multiple files. I hope you don't mind but I elaborated on this method in my answer.</span>
<span class="comment-copy">@FakeCodeMonkeyRashid this method needs to be executed once per python process. Then <code>raw_input</code> becomes available in every module of this process</span>
<span class="comment-copy">I tested it and it does work as you described if the project is structured accordingly. If you are just working with a few files in an unstructured project then it is more likely to work as I described.</span>
