<div class="post-text" itemprop="text">
<p>I'm trying to understand <a href="https://docs.sqlalchemy.org/en/latest/orm/join_conditions.html#composite-secondary-joins" rel="nofollow noreferrer">this section of the SQLAlchemy documentation on Composite Secondary Joins</a>. There is a dot operator between two joins that seems like I would expect it to be a comma. I'm thinking, if it isn't a typo, it might be an intersection operator, but I don't know. <code>secondary="join(B, D, B.d_id == D.id)."</code> is the line. As you can see, there is a dot right before the double quote.</p>
<p><strong><em>What does this dot do?</em></strong></p>
<p>I extract the following code</p>
<pre><code>    d = relationship("D",
                secondary="join(B, D, B.d_id == D.id)."  ### &lt;-- What is this dot doing?
                            "join(C, C.d_id == D.id)",
                primaryjoin="and_(A.b_id == B.id, A.id == C.a_id)",
                secondaryjoin="D.id == B.d_id",
                uselist=False
                )
</code></pre>
<p>The full code is here:</p>
<pre><code>class A(Base):
    __tablename__ = 'a'

    id = Column(Integer, primary_key=True)
    b_id = Column(ForeignKey('b.id'))

    d = relationship("D",
                secondary="join(B, D, B.d_id == D.id)."
                            "join(C, C.d_id == D.id)",
                primaryjoin="and_(A.b_id == B.id, A.id == C.a_id)",
                secondaryjoin="D.id == B.d_id",
                uselist=False
                )

class B(Base):
    __tablename__ = 'b'

    id = Column(Integer, primary_key=True)
    d_id = Column(ForeignKey('d.id'))

class C(Base):
    __tablename__ = 'c'

    id = Column(Integer, primary_key=True)
    a_id = Column(ForeignKey('a.id'))
    d_id = Column(ForeignKey('d.id'))

class D(Base):
    __tablename__ = 'd'

    id = Column(Integer, primary_key=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Many of the arguments for <a href="https://docs.sqlalchemy.org/en/latest/orm/relationship_api.html#sqlalchemy.orm.relationship" rel="nofollow noreferrer"><code>relationship</code></a> can be passed as either a callable or a Python-evaluable string, for lazy evaluation at mapper initialization time. If a string, it is evaluated in a context that includes names from the metadata and Declarative class registry, and the <code>sqlalchemy</code> package â€“ see <a href="https://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/relationships.html#configuring-relationships" rel="nofollow noreferrer">"Configuring Relationships"</a> for details. This allows for example breaking some circular dependencies during class construction, etc.</p>
<p>Your <a href="https://docs.sqlalchemy.org/en/latest/orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary" rel="nofollow noreferrer"><code>secondary</code></a> argument is such a string, split to two lines. It is essentially as if you'd have used the expression </p>
<pre><code>join(B, D, B.d_id == D.id).join(C, C.d_id == D.id)
</code></pre>
<p>as the argument (evaluated in the future), which should clear it right up: the dot is simply the dot from an <a href="https://docs.python.org/3/reference/expressions.html#attribute-references" rel="nofollow noreferrer">attribute reference</a>. The first join object is further joined with <code>C</code>, resulting in</p>
<pre class="lang-sql prettyprint-override"><code>B JOIN D ON B.d_id = D.id JOIN C ON C.d_id = D.id
</code></pre>
</div>
