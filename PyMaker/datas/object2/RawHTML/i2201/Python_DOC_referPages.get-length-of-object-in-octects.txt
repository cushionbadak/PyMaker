<div class="post-text" itemprop="text">
<p>I am needing to calculate the length of a dictionary in octects to conform to the BUFR standard which states:</p>
<pre><code>Total length of BUFR message, in octets (including Section 0)
</code></pre>
<p>I have been able to find bytes, but not information for decoding octects. 
To get bytes I would do:</p>
<pre><code>sys.getsizeof(json_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow noreferrer"><code>sys.getsizeof()</code></a> will give you the size of an object in memory.  But from your description, it sounds like you're looking for <em>the length</em> of <em>some serialization</em> (into a message) of the dictionary.</p>
<p>It looks like you're using JSON, and that makes sense.  For example using <a href="https://docs.python.org/3/library/json.html#json.dumps" rel="nofollow noreferrer"><code>json.dumps()</code></a>:</p>
<pre><code>json_string = json.dumps(your_dict)
</code></pre>
<p>The next question is how do you get the length (in octets) of that string.</p>
<p>Well <code>len(json_string)</code> will give you the number of <em>characters</em>, but for most encodings, the number of bytes required to transmit those characters will be different.(<a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">Docs</a>)</p>
<p>So first you need to encode your string to bytes, then use the length of the resulting bytes object:</p>
<p><code>len(json_string.encode(&lt;your encoding&gt;))</code></p>
<p>Which will give you the number of octets needed to transmit that dictionary.</p>
<p>Note: any other requirements of the message, such as headers, delimiters, escaping, formatting, etc will be in addition to this number.</p>
</div>
<span class="comment-copy"><a href="https://en.wikipedia.org/wiki/Octet_(computing)" rel="nofollow noreferrer">en.wikipedia.org/wiki/Octet_(computing)</a> <code>The octet is a unit of digital information in computing and telecommunications that consists of eight bits. The term is often used when the term byte might be ambiguous, as the byte has historically been used for storage units of a variety of sizes.</code> How is what you've already found not sufficient?</span>
<span class="comment-copy">I just stumbled across that same information, for some reason I was thinking of bit not bytes. If your response is answer worthy you can reply and I'll accept it as correct.</span>
<span class="comment-copy">Um, what is the length of a dictionary in octects suppose to entail? Note, you are working with objects in Python that essentially contain lots of pointers to different objects, so, you are going to have to think about exactly what that means vis a vis this binary format.</span>
<span class="comment-copy">The dictionary contains lists of floats and lists of lists of floats.</span>
<span class="comment-copy"><code>sys.getsizeof</code> does not give you an estimate (at least not for built in objects). You just need to understand what it means, it gives you the size of an object but not the objects referenced (internally) by the object.</span>
<span class="comment-copy">For stdlib it may always give you the actual number, but it's implementation defined: <i>getsizeof() calls the objectâ€™s <code>__sizeof__</code> method</i></span>
<span class="comment-copy">Yes, that is true. But it is guaranteed that built-in objects will return correct results.</span>
<span class="comment-copy">@juanpa.arrivillaga took it out nonetheless -- no need to confuse on minutiae</span>
