<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4477850/python-and-or-operators-return-value">python and / or operators return value [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to return a boolean in a function like this:</p>
<pre><code>return mylist and any(condition(x) for x in mylist)
</code></pre>
<p>The behavior should be to return <code>True</code> if the list is empty or if any element in it meets the condition. I am using the first operand as a shortcircuit since <code>any</code> would return <code>True</code> if the list was empty, which is not what I am after.</p>
<p>I would expect <code>[] and boolval</code> to return <code>False</code> since the list is empty, but to my surprise it returns <code>[]</code> whether <code>boolval</code> is <code>True</code> or <code>False</code>. I would expect the first operand to be automatically evaluated as a boolean since it is involved in a comparison operation, and not whatever is happening.</p>
<p>I am not really asking how to solve my problem, which is easily done by an explicit type conversion: <code>bool(mylist)</code>, but rather asking what is happening and why.</p>
<p>edit: when I ask "why" this is happening I am not looking for the "facts" only, as they are already explained in the linked duplicate question, but also the reasons behind the implementation of this behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>and</code> and <code>or</code> operators <strong><em>do not</em></strong> return <code>True/False</code>. They return <strong>the last thing evaluated</strong> (that's the case in other dynamic languages too, eg. javascript). </p>
<p>The <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">official documentation describes that</a></p>
<ul>
<li>for <code>and</code>, the first falsy value, or the last operand</li>
<li>for <code>or</code>, the first truthy value, or the last operand</li>
</ul>
<p>That's by design, so you can create expressions like <code>return username or 'guest'</code>. So, if you want <em>guarantee</em> that a boolean value is returned, you have to </p>
<pre><code>return bool(x or y)
</code></pre>
<p>instead of </p>
<pre><code>return x or y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because as khelwood said:</p>
<blockquote>
<p><code>x and y</code> gives <code>x</code> if <code>x</code> is falsey, otherwise it gives <code>y</code>.</p>
</blockquote>
<p>That's the point, (<code>and</code> is not <code>or</code> :-)), so still best is:</p>
<pre><code>return all([my_list,any(condition(x) for x in my_list)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This has to do with how python evaluate the expression. </p>
<p>An empty list is considered as false by python, that means that the code after 'and' will not be executed, as this will not change the result. </p>
<p>Python does not need to convert the empty list into bool as it is not compared to anything, and just return it as empty list.</p>
<p>This shouldn't change anything for you, if you test the returned value of the function, it will be evaluate the same way as if the function did return False.</p>
</div>
<span class="comment-copy"><code>x and y</code> gives <code>x</code> if <code>x</code> is falsey, otherwise it gives <code>y</code>. This is a generalisation of the way <code>and</code> works on booleans.</span>
<span class="comment-copy">you should enforce it by <code>return bool(mylist) and ...</code> if you want a bool output in this case.</span>
<span class="comment-copy">@alec_djinn The OP covers that in the question.</span>
<span class="comment-copy">@khelwood My bad, went too fast.</span>
<span class="comment-copy">How did I not know this? I am used to <code>x or y</code>, I use it all the time for assignments when <code>x</code> is falsy, but I did not know it what a thing for <code>and</code> too. Can you link to the docs where they cover this matter and especially the reasoning of implementing this behavior?</span>
<span class="comment-copy">#@dabadaba: edited. The reasoning for design choices however is not provided in any language's reference that I know of. It seems to be something along the lines of "give me the first non-empty list" for <code>and</code>, or "set a default value" for <code>or</code>.</span>
<span class="comment-copy">This is another bit of documentation that is a bit more explicit. Or rather it gives a table of the operators with a short explanation of their results. Just before it gives a detailed explanation of how an object is considered true or false. <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
