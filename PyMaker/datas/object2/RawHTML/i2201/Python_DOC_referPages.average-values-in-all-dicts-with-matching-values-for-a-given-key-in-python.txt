<div class="post-text" itemprop="text">
<p>I have a list of dictionnaries that all have the same keys. </p>
<pre><code>in_list = [{'index':1, 'value':2.}, {'index':1, 'value':3.}, {'index':2, 'value':4.}]
</code></pre>
<p>I'd like to create a new dictionnary with the average on <code>'value'</code> for each <code>'index'</code>. </p>
<pre><code>out_dict = {1:2.5, 2:4.}
</code></pre>
<p>What would be the most pythonic way to do this ?</p>
<hr/>
<p>The following code does what I want, but I feel like it is clumsy</p>
<pre><code>tmp = {x:[] for x in range(1,3)}
for el in in_list:
    tmp[el['index']].append(el['value'])

for key, val in tmp.iteritems():
    out_dict[key] = sum(val)/len(val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is fine, but you can make it a little more compact. As Transhuman's answer shows you can avoid initialising <code>tmp</code> by making it a <code>defaultdict</code> of lists. Another way to do that is to use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault</code></a> method. And then use a <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow noreferrer">dict comprehension</a> to calculate the averages.</p>
<pre><code>in_list = [
    {'index':1, 'value':2.}, 
    {'index':1, 'value':3.}, 
    {'index':2, 'value':4.}
]

out_dict = {}
for d in in_list:
    out_dict.setdefault(d['index'], []).append(d['value'])
out_dict = {k: sum(v) / len(v) for k, v in out_dict.items()}
print(out_dict)
</code></pre>
<p><strong>output</strong></p>
<pre><code>{1: 2.5, 2: 4.0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To do it without any packages to install (long one-liner :-) ):</p>
<pre><code>import itertools,statistics
a = dict(zip(sorted(set([i['index'] for i in lod])),[statistics.mean(int(item['value']) for item in group) for key, group in itertools.groupby(lod, key=lambda x: x['index'])]))
</code></pre>
<p>Now:</p>
<pre><code>print(a)
</code></pre>
<p>Returns:</p>
<pre><code>{1: 2.5, 2: 4}
</code></pre>
<p>If python 2:</p>
<pre><code>import itertools
a = dict(zip(sorted(set([i['index'] for i in lod]),key=[i['index'] for i in lod].index),[sum(int(item['value']) for item in group)/len(int(item['value']) for item in group) for key, group in itertools.groupby(lod, key=lambda x: x['index'])]))
</code></pre>
<p><strong>Explanation:</strong></p>
<ul>
<li><p>get the ordered list of unique elements using <code>set</code></p></li>
<li><p>use <code>itertools.groupby</code> for grouping then iterate by <code>key</code> a <code>group</code>, the get average using <code>statistics</code> or <code>sum</code> and <code>len</code></p></li>
<li><p>the above two notes are all in a <code>zip</code>(<code>dict(zip(...))</code>)</p></li>
</ul>
<p>Or to make the code little cleaner:</p>
<p>Python 3:</p>
<pre><code>import itertools,statistics
unique_elements=sorted(set([i['index'] for i in lod]))
groups=statistics.mean(int(item['value']) for item in group) for key, group in itertools.groupby(lod, key=lambda x: x['index'])]
a = dict(zip(unique_elements,groups))
</code></pre>
<p>Python 2:</p>
<pre><code>import itertools
unique=sorted(set([i['index'] for i in lod])
groups=[sum(int(item['value']) for item in group)/len(int(item['value']) for item in group) for key, group in itertools.groupby(lod, key=lambda x: x['index'])]
a = dict(unique,groups))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think your code is clumsy, but you could check out <code>pandas</code>.</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; in_list = [{'index':1, 'value':2.}, {'index':1, 'value':3.}, {'index':2, 'value':4.}]
&gt;&gt;&gt; 
&gt;&gt;&gt; df = pd.DataFrame(in_list)
&gt;&gt;&gt; df.groupby(by='index').mean()
       value
index       
1        2.5
2        4.0
</code></pre>
<p>You can transform the result to a standard dictionary if you like.</p>
<pre><code>&gt;&gt;&gt; df.groupby(by='index').mean().to_dict()['value']
{1: 2.5, 2: 4.0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way you can do is using <code>collections.defaultdict</code></p>
<pre><code>in_list = [{'index':1, 'value':2.}, {'index':1, 'value':3.}, {'index':2, 'value':4.}]

from collections import defaultdict
d_dict = defaultdict(list)
for k,v in [d.values() for d in in_list]:
    d_dict[k].append(v)

{k:sum(v)/len(v) for k,v in d_dict.items()}
#{1: 2.5, 2: 4.0}
</code></pre>
</div>
<span class="comment-copy">Ok, it works, but would you like to encounter this oneliner when having to read code?</span>
<span class="comment-copy">@timgeb Yeah, doing a whole explanation</span>
<span class="comment-copy">@timgeb Now????</span>
<span class="comment-copy">That's fine. I would use three lines of self-documenting code <code>unique_elements = ...</code>, <code>groups = ...</code>, <code>result = ...</code>. Instead of one line of code with three lines of explanation. ;)</span>
<span class="comment-copy">@timgeb Oh that's right, i was about to do that too</span>
