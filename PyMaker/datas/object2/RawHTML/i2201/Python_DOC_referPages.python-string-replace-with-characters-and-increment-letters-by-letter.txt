<div class="post-text" itemprop="text">
<p>Currently I'm learning python scripts and trying to get the below outputs</p>
<pre><code>1BCD
2BCD
3BCD
11CD
21CD
31CD
12CD
22CD
32CD
13CD
23CD
33CD
111D
211D
311D
121D
221D
321D
</code></pre>
<p>and so..on till last character</p>
<p>How this can be achieved? I'm using python 3.0 and please find the below my code:</p>
<pre><code>import sys

def tv():
    GET = 'ABCD'
    INC = 0
    IGKINNER = 0
    COUNT = 0
    i = 0
    while (COUNT &lt; 1):
        IGKINNER = IGKINNER + 1
        try:
            for h in range(len(GET)):
                print('GET', GET)
                INC = INC + 1
                if (INC == 1):
                    GET = GET.replace(GET[IGKINNER], chr(49), 1)
                if (INC == 2):
                    GET = GET.replace(GET[IGKINNER], chr(50), 1)
                if (INC == 3):
                    GET = GET.replace(GET[IGKINNER], chr(51), 1)
                if (INC &gt;=4):
                    INC = 0
                    break
        except:
            COUNT = 3
    return

tv()
</code></pre>
<p>Please help me and Thanks a lot</p>
</div>
<div class="post-text" itemprop="text">
<p>This is easy to achieve using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>. The code below produces the output specified in the question, but it's very easy to generalize it to more digits.</p>
<pre><code>from itertools import product

base = 'ABCD'
for i in range(1, 5):
    s = base[i:]
    for t in product('123', repeat=i):
        print(''.join(t[::-1]) + s)
</code></pre>
<p><strong>output</strong></p>
<pre><code>1BCD
2BCD
3BCD
11CD
21CD
31CD
12CD
22CD
32CD
13CD
23CD
33CD
111D
211D
311D
121D
221D
321D
131D
231D
331D
112D
212D
312D
122D
222D
322D
132D
232D
332D
113D
213D
313D
123D
223D
323D
133D
233D
333D
1111
2111
3111
1211
2211
3211
1311
2311
3311
1121
2121
3121
1221
2221
3221
1321
2321
3321
1131
2131
3131
1231
2231
3231
1331
2331
3331
1112
2112
3112
1212
2212
3212
1312
2312
3312
1122
2122
3122
1222
2222
3222
1322
2322
3322
1132
2132
3132
1232
2232
3232
1332
2332
3332
1113
2113
3113
1213
2213
3213
1313
2313
3313
1123
2123
3123
1223
2223
3223
1323
2323
3323
1133
2133
3133
1233
2233
3233
1333
2333
3333
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your description of what you want isn't very clear, but this produces what it seems like you want (w/o printing <code>GET</code> each time):</p>
<pre><code>def tv():
    base = "ABCD"
    nums = "123"
    s4 = base[3]+nums
    s3 = base[2]+nums
    s2 = base[1]+nums
    for c4 in s4:
        for c3 in s3:
            for c2 in s2:
                for c1 in nums:
                    print(c1+c2+c3+c4)
            s2 = nums
        s3 = nums
</code></pre>
</div>
<span class="comment-copy">What is the pattern of incrementing?   <code>1-&gt;2-&gt;3</code> makes sense but how do the letters work?  It looks like it's also starting on the left side and moving towards the right?</span>
<span class="comment-copy">Thanks for replying. I just want to replace ABCD letters by replacing character 1-&gt;2-&gt;3 and need to to character by character (like maths permutation and combination). ABCD is just for example. It could be "0000" or "aaaa" "zzzz"</span>
<span class="comment-copy">With the "ABCD" base string should the last line of output be "333D" or "3333"?</span>
<span class="comment-copy">last line output expecting "3333"</span>
<span class="comment-copy">Nice lecture, thanks for this question .. I do not understand why some guys vote down.</span>
<span class="comment-copy">Thanks a lot  :)</span>
<span class="comment-copy">PM 2Ring, I tried to accept and unable do because of less than 15 votes. Anyway Thanks a lot for your great help you and Mr.Scott Hunter. Really appreciated both of you :)</span>
<span class="comment-copy">Done !!!. Thanks</span>
<span class="comment-copy">Yours code works fine. This what i want exactly. Thanks a lot !!!!</span>
