<div class="post-text" itemprop="text">
<p>I have created a dictionary containing keys and values. After reading a text file like this:</p>
<pre class="lang-none prettyprint-override"><code>test1
    House: True
    Car: False
    Money: False
    Case: 1

test2
    House: True
    Car: False
    Money: False
    Case: 2

test3
    House: True
    Car: False
    Money: False
    Case: 3
</code></pre>
<p>the dictionary is created. The problem is that the values are read as strings. I need to have them as bools so that later I can parse them to a JSON file and use them there as bools. The dictionary created is called <code>answer</code>. I tried the following but it is only giving me <code>True</code> as boolean:</p>
<pre><code>    to_json = {}
    block_cnt = 1
    header = re.compile('[a-zA-Z0-9]')
    inner = re.compile("[\t]")
    empty = re.compile("[\n]",)`

    with open(rDEMO_parameters.txt', 'r') as document:
    for line in document:
        #print line
        if empty.match(line[0]):
            continue

        elif header.match(line[0]):
            if answer:
                to_json[block_cnt] = answer
                #print answer
                block_cnt += 1
                answer = {}
        elif inner.match(line[0]):
            _key, value = line.split(":  ")
            tab, key = _key.split("\t")
            answer[key] = value.split()
           for key in answer.keys():
            if key == "House":
                answer[key] = map(bool, answer[key])
            if key == "Car":
                answer[key] = map(bool, answer[key])
            if key == "Money":
                answer[key] = map(bool, answer[key])
            if key == "Case":
                answer[key] = map(int, answer[key])


   f = open(r"parameters.json", "w")

   json.dump(to_json, f)
   f.close()
</code></pre>
<p>Then after converting I only get something like this but everything in only one line:</p>
<pre class="lang-none prettyprint-override"><code> {1
   {
    House: True
    Car: True
    Money: True
    Case: [1]
             } }
 {2
   {
    House: True
    Car: True
    Money: True
    Case: [2] } }
 {3
    {
    House: True
    Car: True
    Money: True
    Case: [3] }}
</code></pre>
<p>So the strings are all converted to <code>True</code> booleans, which is not the case.
The other problem is that the values are read inside lists. Is there any method to avoid that? Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> is used to apply a function to each value in an iterable.</p>
<p>You can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> instead:</p>
<pre><code>from ast import literal_eval

answer[key] = literal_eval(answer[key])
</code></pre>
<p>Moreover, you don't need to check for each key in a separate <code>if</code> statement. It's also more idiomatic to iterate over <code>dict.items</code> if you are using both key and value in your logic:</p>
<pre><code>for key, value in answer.items():
    if key in ('House', 'Car', 'Money'):
        answer[key] = literal_eval(value)
</code></pre>
<p>Finally, consider using a dictionary comprehension instead:</p>
<pre><code># for modifying over all values
answer = {k: literal_eval(v) for k, v in answer.items()}

# for modifying selected values
select = {'House', 'Car', 'Money'}
answer = {k: literal_eval(v) if k in select else v for k, v in answer.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>map(bool, answer[key])</code> is mapping the function over the characters of a string. All non empty characters are true, so you should expect to only get True.</p>
<p>You need to actually check for <code>== "True"</code></p>
<p>In other words, result of <code>bool("False")</code> might surprise you </p>
</div>
<div class="post-text" itemprop="text">
<p>Why not simply:</p>
<pre><code>for key in answer.keys():
   answer[key] = answer[key] == "True"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your bools are strings and you need them to actually be bools, if so <em>dictionary comprehension</em> will work</p>
<pre><code>d = {k: True if d[k] == 'True' else False for k in d}
</code></pre>
<blockquote>
<pre><code> {'House': True, 'Car': False, 'Money': False}
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Please show the code that parses the file</span>
<span class="comment-copy">Does the key have a trailing space, eg <code>'House '</code> rather than <code>'House'</code>?</span>
<span class="comment-copy"><code>map</code> will apply <code>bool</code> to each character in the value, e.g. <code>'False'</code> will give <code>[True, True, True, True, True]</code> as <code>bool('F') == True</code>, <code>bool('a') == True</code>, <code>bool('l') == True</code>, etc.</span>
<span class="comment-copy">show the code that parses the file +1, so that we can get exact look at your answer dict.</span>
<span class="comment-copy">@PeterWood I put the full Code, Input and Output. Hope that helps :)</span>
<span class="comment-copy">Hi, thank you for your answer. Still i am getting the following error:  Traceback (most recent call last):   File ".\s - Kopie.py", line 49, in &lt;module&gt;     answer[key] = literal_eval(value)   File "C:\Python27\lib\ast.py", line 80, in literal_eval     return _convert(node_or_string)   File "C:\Python27\lib\ast.py", line 79, in _convert     raise ValueError('malformed string') ValueError: malformed string</span>
<span class="comment-copy">I can't reproduce. Looks like one of your strings are <b>not</b> <code>"True"</code> or <code>"False"</code>. This is not reflected in your original question.</span>
<span class="comment-copy">The values are inside lists. For example: House: ['True']  Car: ['False'] etc. Can that be the reason?</span>
<span class="comment-copy">@Dj_96, Yes, that's probably the reason. If those are lists you need to use <code>value[0]</code> or <code>v[0]</code> in my solutions to get the first item.</span>
<span class="comment-copy">i tried it and the error above is gone. However i get another error:        answer[key] = literal_eval(value[0]) TypeError: 'bool' object has no attribute '<b>getitem</b>'</span>
<span class="comment-copy">I don't think this is the reason, otherwise OP would get a <code>list</code> of <code>bool</code>. I don't think it's applying the conversion at all, as the keys have spaces in them.</span>
<span class="comment-copy"><code>map()</code> should return a list or generator yes, but that isn't what OP is seeing, so I went with the minimal information that was given in the question. Still, using map at all is incorrect.</span>
<span class="comment-copy">Or just <code>for key in answer:</code></span>
<span class="comment-copy">Hi, now it prints everything false</span>
