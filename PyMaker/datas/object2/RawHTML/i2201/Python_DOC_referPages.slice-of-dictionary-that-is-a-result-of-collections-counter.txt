<div class="post-text" itemprop="text">
<p>While I am trying to create a dictionary using dict(x), where x is a slice of another dictionary,d(y) where y is collections.Counter() object. This is the one-liner:</p>
<pre><code>lengths=dict(islice(dict(Counter(input())),3))
</code></pre>
<p>The exception I am getting is this</p>
<pre><code>lengths=dict(islice(dict(Counter(input())),3))
ValueError: dictionary update sequence element #0 has length 1; 2 is required
</code></pre>
<p>According to my understanding, this error is caused when the update function is called with only one value(instead of key value pair). I know something is bad in the nested function calls, but couldn't find it.</p>
<p>How can I get a slice of dictionary items? Is there a way I could do this without actually iterating through the entire dictionary and updating to a new dictionary?</p>
</div>
<div class="post-text" itemprop="text">
<p>Iterating a dictionary will only yield keys. To slice a dictionary, you need to extract both key and value via <code>dict.items</code>. In addition, note <code>collections.Counter</code> is a subclass of <code>dict</code>, so no <code>dict</code> conversion is necessary.</p>
<blockquote>
<p>How can I get a slice of dictionary items? Is there a way I could do
  this without actually iterating through the entire dictionary and
  updating to a new dictionary?</p>
</blockquote>
<p>No, you cannot slice a dictionary without iteration. You can create a new <code>Counter</code> object and use <code>islice</code> to return the first 3 values <em>by insertion order</em>. This still requires iteration, and works in Python 3.6+ where dictionaries are insertion ordered.</p>
<pre><code>from collections import Counter
from itertools import islice

c = Counter('abbcccddeeff')

lengths = Counter()
lengths.update(dict(islice(c.items(), 3)))

print(lengths)

Counter({'c': 3, 'b': 2, 'a': 1})
</code></pre>
<p>A couple of points to note:</p>
<ol>
<li>The order in which <code>Counter</code> objects are printed do not correspond to the internal order in which items are stored, which is still <em>insertion ordered</em>. See also <a href="https://stackoverflow.com/questions/52174284/how-are-counter-defaultdict-ordered-in-python-3-7">How are Counter / defaultdict ordered in Python 3.7?</a></li>
<li>You may wonder why, if dictionaries are ordered, as they are in
Python 3.6+, you <em>cannot</em> slice directly. There are structural
reasons why this is not possible: see <a href="https://stackoverflow.com/questions/52507860/accessing-dictionary-items-by-position-in-python-3-6-efficiently">Accessing dictionary items by
position in Python 3.6+
efficiently</a>.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>So isslice expects a iterables. So to slice a dictionary you should probably convert the dictionary to list of tuples. But dictionary does not maintain the insertion order. So to maintain that you can probably go with Ordered dict from collections lib in python.</p>
<pre><code>    from collections import Counter, OrderedDict
    from itertools import islice

    data = OrderedDict(list(islice(sorted(Counter("aaabbbccccddddd").items(),key=lambda element: (-element[1], element[0])), 3)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>islice</code> on the items of the <code>Counter</code> (which is a dict subclass so no need for dict conversion) object and then convert the sliced items to a dict using the dict constructor.</p>
<p>For example,</p>
<pre><code>dict(islice(Counter('abbcccddeeff').items(), 3))
</code></pre>
<p>returns: (note the absence of <code>d</code>, <code>e</code> and <code>f</code>)</p>
<pre><code>{'a': 1, 'b': 2, 'c': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(Python 2.6+) I could solve this using the <a href="https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow noreferrer">OrderedCounter</a>. You can see for the explanation of it here : <a href="https://stackoverflow.com/questions/35446015/how-ordered-counter-recipe-works">How Ordered Counter recipe works</a></p>
<pre><code>from collections import Counter, OrderedDict


class OrderedCounter(Counter, OrderedDict):
    pass

dict([c for c in OrderedCounter(sorted(input())).most_common(3)])
</code></pre>
<p>Further adding, most_common(n) is a method of collections.Counter class that returns the first n elements in that dictionary. Ref: <a href="https://docs.python.org/2/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>most_common([n])</code></a></p>
</div>
<span class="comment-copy">An <code>islice</code> of a <code>dict</code> will give you an iterator over part of the keys. You are getting an error because the <code>dict</code> constructor expects an iterable of two-element-iterables.</span>
<span class="comment-copy">You need to unnest the code then and check the return of <code>islice(dict(Counter(input())),3)</code>- it's probably not a dict, but the keys</span>
<span class="comment-copy">How can I get a slice of dictionary items? Is there a way I get a sliced dictionary without actually iterating through the entire dictionary and updating to a new dictionary?</span>
<span class="comment-copy">Probably it was a NO. But I've seen that in 3.7+ Counter also maintains insertion order but its <b>repr</b> wasn't updated. According to your comment on the order of Counter, <code>list(Counter('aadddassaaa'))</code> will probably give the insertion order. So I'd like to store the Counter() as another list and then slice the list and access each key? <code>from collections import Counter from itertools import islice x = Counter('abbcccddeeff') c = [(i,x[i]) for i in islice(list(x),3)] print(c)</code></span>
<span class="comment-copy">No, it isn't working that way.</span>
<span class="comment-copy">Can you explain that lambda function?</span>
<span class="comment-copy">I loved your solution here is mine(using the lambda from you :p) <code>print([(i[0],i[1]) for i,j in zip(sorted(Counter(input()).items(),key=lambda x:(-x[1],x[0])),range(3))])</code></span>
<span class="comment-copy">look at this solution too: <code>from collections import Counter, OrderedDict  class OrderedCounter(Counter, OrderedDict):     pass [print(*c) for c in OrderedCounter(sorted(input())).most_common(3)]</code></span>
<span class="comment-copy"><code>But dictionary does not maintain the insertion order.</code> This is incorrect. In Python 3.6+, dictionaries (including <code>Counter</code>) <i>are</i> insertion ordered.</span>
<span class="comment-copy">@jpp Thanks for bringing this point. Yes they do maintain the order in python 3.6+ higher version. But as per the old implementation it doesn't.</span>
<span class="comment-copy">With Python 3.6+, ordered insertion into dict may obviate this recipe.  <code>Counter</code>s may be ordered already.</span>
<span class="comment-copy">It's not clear why sort is necessary.</span>
<span class="comment-copy">That was particular to my case. Its optional.</span>
