<div class="post-text" itemprop="text">
<p><strong>List 1</strong></p>
<pre><code>[]
</code></pre>
<p><strong>dictionary 1</strong></p>
<pre><code>{ 
   'test': 'baum',
   'alter': 0,
   'voegel': ['amsel']
}
</code></pre>
<p><strong>dictionary 2</strong></p>
<pre><code>{ 
   'test': 'grosserbaum',
   'alter': 3,
   'voegel': ['meise']
}
</code></pre>
<p><em>Do something to merge dictionaries together....</em></p>
<p><strong>Result:</strong></p>
<pre><code>[
   { 
      'test': 'baum',
      'alter': 0,
      'voegel': ['amsel'] 
   }, 
   { 
      'test': 'grosserbaum',
      'alter': 3,
      'voegel': ['meise']
   }
]
</code></pre>
<p>How can this be done using Python? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>d1={ 
   'test': 'baum',
   'alter': 0,
   'voegel': ['amsel']
}
d2={ 
   'test': 'grosserbaum',
   'alter': 3,
   'voegel': ['meise']
}
</code></pre>
<p>Lets try with your expected output</p>
<blockquote>
<p>{d1:d2} #TypeError: unhashable type: 'dict'</p>
</blockquote>
<p>The error is raised because the <code>dict</code> type cannot be hashed. similar to the list type as it does not comes with a hash function. Therefore, moral of the story is in order for an object to be hashable, it must be immutable types like <code>string</code>, <code>integer</code> or <code>tuple</code>.</p>
<p>In case you are just looking to iterate over the dicts</p>
<pre><code>[d1,d2] # convert into a list
</code></pre>
<p>OR  </p>
<pre><code>(d1,d2)# convert into a tuple
</code></pre>
<p>or create a new list with immutable keys</p>
<pre><code>{'d1':d1,'d2':d2}
</code></pre>
<p>For further reference <a href="https://www.asmeurer.com/blog/posts/what-happens-when-you-mess-with-hashing-in-python/" rel="nofollow noreferrer">https://www.asmeurer.com/blog/posts/what-happens-when-you-mess-with-hashing-in-python/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If the data in your <code>dict</code>s never change, and you want the keys, then you should opt for using <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>namedtuple</code></a>s.</p>
<p>You'll need to convert that nested <code>list</code> into a <code>tuple</code> since lists are not hashable. Then you can take your existing dictionaries and plop them into your namedtuple (or create them directly).</p>
<pre><code>d1 = { 
   'test': 'baum',
   'alter': 0,
   'voegel': ('amsel')
}
d2 = { 
   'test': 'grosserbaum',
   'alter': 3,
   'voegel': ('meise')
}

from collections import namedtuple

Test = namedtuple("Test", "test alter voegel")

t1 = Test(**d1)
t2 = Test(**d2)

print(t1)            # Test(test='baum', alter=0, voegel='amsel')
print(t2)            # Test(test='grosserbaum', alter=3, voegel='meise')
print(set([t1, t2])) # {Test(test='grosserbaum', alter=3, voegel='meise'), Test(test='baum', alter=0, voegel='amsel')}
</code></pre>
<p>Now you can keep those namedtuples inside a <code>set</code> so that collection will contain only unique items! Also, namedtuples use less memory than a dict since it implements <a href="https://stackoverflow.com/questions/472000/usage-of-slots"><code>__slots__</code></a>.</p>
</div>
<span class="comment-copy">create a list and append two dicts?</span>
<span class="comment-copy">Your requested output throws a <code>TypeError</code>. It's not a valid dictionary structure but, rather, an impossible <code>set()</code></span>
<span class="comment-copy">@mad_ Right, I see the data is different. He's looking to make a set of dicts,</span>
<span class="comment-copy">To reiterate/add to @roganjosh 's answer, your question is ambiguous. Are you trying to create a nested dictionary of dict objects, or a set of dicts, or are you trying to combine the values from dict1 and dict2 with the same keys, or maybe a JSON file? What object <code>type()</code> do you want to have at the end?</span>
<span class="comment-copy">The result you are showing us is not a dictionary but rather a list of two dictionaries. Keys must be unique and you clearly have repetitions. So you need to think what you want to do in this situation. I would suggest creating a dictionary with the the keys from each dictionary and then for each key in the original dictionaries take the value and insert it into a list. The result will be a dictionary with list values and each list will have the values from both original dictionaries for the same key.</span>
<span class="comment-copy">A list with dictionaries - that is what I was looking for. Thanks</span>
