<div class="post-text" itemprop="text">
<p><strong>Background:</strong> I have a small feature in my Tkinter application which randomizes two random values from list and prints them to GUI. But I'm struggling to get right image (team logo) with random value.</p>
<p><strong>Goal:</strong> is to random team name (from list of 28 teams) and GUI should show team logo also. Pressing button "RANDOM" and it generates Team1 &amp; Team2 and both should have logos next of the texts.</p>
<p><a href="https://i.stack.imgur.com/cnRX3.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/cnRX3.png"/></a></p>
<p><strong>I have done research about:</strong> I had time with this answer, but I could not figure it out. This dice game kinda does it but I need two values instead of one and my list is full of strings.</p>
<p>Example: <a href="https://stackoverflow.com/a/27913052/5132305">https://stackoverflow.com/a/27913052/5132305</a></p>
<pre><code>import random
import tkinter as tk
from PIL import ImageTk, Image

 # Use a class that hold all Team data
class Team():
   def __init__(self, name, img_filename):
    self.name = name
    self.img_filename = img_filename

   @property
   def image(self):
    # TODO: Open image file and return .PhotoImage object
    team_logo = Image.open("%s.jpg" % (self.img_filename))
    render = ImageTk.PhotoImage(team_logo)
    self.img_filename.image = render
    return self.img_filename

   #This is how the class prints
   def __str__(self):
    return "Name: {} Image:{}".format(self.name, self.img_filename)


class MainWindow(tk.Frame):
      def __init__(self, parent, *args, **kwargs):
       tk.Frame.__init__(self, parent,  *args, **kwargs)
       root.geometry("700x450")
       text_1 = tk.Label(text="VS", fg="red", anchor="center")
       text_1.place(relx=.5, rely=.5, anchor="center")
       text_2 = tk.Label(text="RANDOM GAME", fg="green", anchor="n")
       text_2.pack(side="top")

       # Button for randomize
       self.parent = parent
       self.frame = tk.Frame(self.parent)
       self.randomButton = tk.Button(self.frame, text = 'RANDOM', 
       command=self.genRanTeam)
       self.randomButton.pack(side="bottom")
       self.frame.pack(side="bottom")

       self.home_name = tk.StringVar()
       self.visitor_name = tk.StringVar()

       if 0: # TODO: Implement Team.image
           # Images, I should somehow use this with home/visitor label?
           # Yes, look at TODO in def genRanTeam(...

           load = Image.open("%s.jpg" % (self.home.image))
           render = ImageTk.PhotoImage(load)
           # ONLY, if you decide to use OWN Label for Image
           # What you suggest for this? So if I decide to only use home/visitor labels, I don't need next 4 lines of code (after this text?)
           self.team_logo = tk.Label(parent, image=render)
           self.team_logo.image = render
       else:
           self.team_logo = None


       # Home team
       self.home_label = tk.Label(Image = self.team_logo, textvariable=self.home_name) 
       self.home_label.pack(side="left")
       # Visitor team
       self.visitor_label = tk.Label(Image = self.team_logo, textvariable=self.visitor_name) 
       self.visitor_label.pack(side="right")

       self.__init__Teams()

      # Hold this in a own function for brevity
      def __init__Teams(self):
        self.teams = [Team('Chicago Fire', 'chicago'), Team('New York \
        Red Bulls', 'newyork'), Team('Philadelphia Union', 'phila'), 
        Team('Toronto FC', 'toronto')]
        # Init defaults
        self.home = self.teams[0]
        self.visitor = self.teams[0]

      def genRanTeam(self):
        # Use the initalized Teams from MainWindow..__init__
        self.__init__Teams()
        self.home = random.choice(self.teams)
        self.visitor = None
        # Loop while home == visitor
        while self.visitor is None or self.home.name is self.visitor.name:
         self.visitor = random.choice(self.teams)

        self.home_name.set(self.home.name)
        self.visitor_name.set(self.visitor.name)   

        # TODO: Configure .team_label with Team.image
        # self.home_label.configure(image=self.home.image)
        self.home_label.configure(image=self.home.image)
        self.visitor_label.configure(image=self.visitor.image)

if __name__ == "__main__":
         root = tk.Tk()
         main = MainWindow(root)
         main.pack(side="top", fill="both", expand=True)
         root.mainloop()
</code></pre>
<p>Now when I am pressing RANDOM-button, it does random correctly values to variables x &amp; y from list.</p>
<p>I also have 28 images in folder project/images. All of the images are "team_name.jpg"</p>
<p><strong>Question 1:</strong> How do I loop list and match team name and logo?</p>
<p>All help is appreciated and some code review would be great also! (First question in SO!)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Comment</strong>: Implement Team.image</p>
</blockquote>
<p>Running your <code>Team.image</code> gives me:  </p>
<blockquote>
<pre><code>self.img_filename.image = render
AttributeError: 'str' object has no attribute 'image'
</code></pre>
</blockquote>
<p>You <strong>can't</strong> add a new attribute to buildin <code>str</code> object.
This will work, change to:</p>
<pre><code>self.render = ImageTk.PhotoImage(team_logo)
return self.render
</code></pre>
<hr/>
<blockquote>
<p><strong>Comment</strong>: Do I need to make another tk.Label for team image?  </p>
</blockquote>
<p>There is no need to do so, this depends on your desired layout.<br/>
Start with <strong>one</strong> <code>tk.Label(self, image=image, textvariable=name)</code><br/>
This looks like:<br/>
<a href="https://i.stack.imgur.com/ihA6d.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ihA6d.png"/></a>
Relevant: <a href="https://stackoverflow.com/questions/33460872/label-on-top-of-image-in-python">label-on-top-of-image-in-python</a> </p>
<blockquote>
<p><strong>Comment</strong>: Is it possible that self.visitor can show team+logo?  </p>
</blockquote>
<p>It's not the function of <code>class Team()</code> to show anything, it's the job of <code>tk.Lable(...</code>.<br/>
Relevant: <a href="https://stackoverflow.com/questions/28798496/updating-tkinter-label-with-an-image">updating-tkinter-label-with-an-image</a></p>
<hr/>
<blockquote>
<p><strong>Question</strong>: Two random values from list needs to match with images</p>
</blockquote>
<p>This approach <strong>don't</strong> use <strong>two</strong> lists, it defines both values(team name, team image) in <strong>one</strong> class. Therefore no matching is needed.<br/>
For example:</p>
<pre><code># Use a class that hold all Team data
class Team():
    def __init__(self, name, img_filename):
        self.name = name
        self.img_filename = img_filename

    # This is how the class prints
    def __str__(self):
        return "Name: {} Image:{}".format(self.name, self.img_filename)

class MainWindow(tk.Frame):
    def __init__(self, parent, *args, **kwargs):

        # Up to 28 teams - Defined in __init__ only once
        # Create a list with all Teams using class Team
        self.teams = [Team('Chicago Fire', 'logo1.jpg'), Team('New York Red Bulls', 'logo2.jpg'), Team('Philadelphia Union', 'logo3.jpg'), Team('Toronto FC', 'logo4')]
        # Init defaults
        self.home = self.teams[0]
        self.visitor = self.teams[0]

    def genRanTeam(self):
        # Use the initalized Teams from __init__
        self.home = random.choice(self.teams)

        self. visitor = None
        # Loop while home == visitor
        while self.visitor is None or self.home is self.visitor:
            self.visitor = random.choice(self.teams)

if __name__ == "__main__":
    import time

    root = tk.Tk()
    main = MainWindow(root)
    for _ in range(3):
        main.genRanTeam()
        print("home:{} :\tvisitor:{}".format(main.home, main.visitor))
        time.sleep(1)
</code></pre>
<blockquote>
<p><strong>Output</strong>:</p>
<pre><code>home:Name: Toronto FC Image:logo4 : visitor:Name: Chicago Fire Image:logo1.jpg
home:Name: New York Red Bulls Image:logo2.jpg : visitor:Name: Toronto FC Image:logo4
home:Name: Toronto FC Image:logo4 : visitor:Name: New York Red Bulls Image:logo2.jpg
</code></pre>
</blockquote>
<p><strong><em>Tested with Python: 3.4.2</em></strong></p>
</div>
<span class="comment-copy">Change to <code>[ ('Team1', Logo_Team1), ...]</code>. <code>x[0]</code> is the Team-Name, <code>x[1]</code> is the Team-Logo. Read about <a href="https://docs.python.org/3/reference/compound_stmts.html#index-9" rel="nofollow noreferrer">8.3. The for statement</a></span>
<span class="comment-copy">I will try this @stovfl , thanks!</span>
<span class="comment-copy">I did not succeed with that solution. Other tips?</span>
<span class="comment-copy">Looks just like it, the idea! Do I need to make another tk.Label for team image? I tried to add this solution for my example code, but had no luck still. Is it possible that self.visitor can show team+logo? Forgot to mention that teams can be against each other also. But I really appreciate this solution already!</span>
<span class="comment-copy">Added few questions in code, sorry not that skilled yet! First: Should I add teams list in Teams class? When we are talking about <b>init</b> only is it about MainWindow <b>init</b> or Team (actually should this be separate file, <b>init</b>.py example? From external resrouces you linked I got the idea for Images and text, but I have hard time to get how to link them.. I mean we need to change that print to something else right? Is this #Image block any near about handling images? Yes, that picture is what I am looking for!</span>
<span class="comment-copy">Edited code. Made changes to TODOs expect for images. What approach you would suggest? Now code prints the stuff like return does in line 13. Did my edit work as expected? (Not sure but I cannot highlight your nickname with @)</span>
<span class="comment-copy">Bit stuck, edited code and made few comments. I really liked this example about property <a href="https://stackoverflow.com/a/5130337/5132305">link text</a> but I'm still missing some logic here.</span>
<span class="comment-copy">@ponkape: Updated my Answer. Doing changes as described it will work with a minor faulty: <b>The Label doesn't show the text anymore</b>. Reread already linke to <a href="https://stackoverflow.com/questions/33460872/label-on-top-of-image-in-python">label-on-top-of-image-in-python</a>. We have reached our comments limt. To continue I have setup a <a href="https://gist.github.com/WK-GiHu/12f6e5fadf6b83c0e67525fddfd47a7f" rel="nofollow noreferrer">gist.github.com</a> showing my working implementation.</span>
