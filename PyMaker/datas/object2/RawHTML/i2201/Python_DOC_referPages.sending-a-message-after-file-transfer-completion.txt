<div class="post-text" itemprop="text">
<p>I'm new to socket programming. I'm trying to send 4 files from one host to another. Here is the code:</p>
<p><strong>sender:</strong></p>
<pre><code>from __future__ import print_function
import socket
from struct import pack

HOST = '10.0.0.2'
PORT = 12345
BUFSIZE = 4096

def send(sock, data):
    while data:
        sent = sock.send(data)
        data = data[sent:]

def send_file(fname):
    with open(fname, 'rb') as f:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.connect((HOST, PORT))
        except socket.error as err:
            print(err, HOST, PORT)
            sock.close()
            return

        # Send the file name length &amp; the filename itself in one packet          
        send(sock, pack('B', len(fname)) + fname.encode())
        while True:
            data = f.read(BUFSIZE)
            if not data:
                break
            send(sock, data)

    sock.close()

fnames = [
    '1.jpg',
    '2.jpg',
    '3.jpg',
    '4.jpg',
]

def main():
    for fname in fnames:
        send_file(fname)

if __name__ == '__main__':
    main()
</code></pre>
<p><strong>Receiver:</strong></p>
<pre><code>from __future__ import print_function
import socket
from struct import unpack

HOST = '10.0.0.2'
PORT = 12345
BUFSIZE = 4096


class Receiver:
    ''' Buffer binary data from socket conn '''
    def __init__(self, conn):
        self.conn = conn
        self.buff = bytearray()

    def get(self, size):
        ''' Get size bytes from the buffer, reading
            from conn when necessary 
        '''
        while len(self.buff) &lt; size:
            data = self.conn.recv(BUFSIZE)
            if not data:
                break
            self.buff.extend(data)
        # Extract the desired bytes
        result = self.buff[:size]
        # and remove them from the buffer
        del self.buff[:size]
        return bytes(result)

    def save(self, fname):
        ''' Save the remaining bytes to file fname '''
        with open(fname, 'wb') as f:
            if self.buff:
                f.write(bytes(self.buff))
            while True:
                data = self.conn.recv(BUFSIZE)
                if not data:
                    break
                f.write(data)


def main():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        sock.bind((HOST, PORT))
    except socket.error as err:
        print('Bind failed', err)
        return

    sock.listen(1)
    print('Socket now listening at', HOST, PORT)
    try:
        while True:
            conn, addr = sock.accept()
            print('Connected with', *addr)
            # Create a buffer for this connection
            receiver = Receiver(conn)
            # Get the length of the file name
            name_size = unpack('B', receiver.get(1))[0] 
            # Get the file name itself
            name = receiver.get(name_size).decode()
            print('name', name)
            # Save the file
            receiver.save(name)
            conn.close()
            print('saved\n')

    # Hit Break / Ctrl-C to exit
    except KeyboardInterrupt:
        print('\nClosing')

    sock.close()

if __name__ == '__main__':
    main()
</code></pre>
<p>File transfer is working fine and there is no problem with it. Now I want to send a simple string like "finish" after sending all files, so that receiver will understand that the transfer is completed and it will do some other tasks based on this finish message (however, it still can receive messages at the same time).</p>
<p>I tried to do this by adding another function called <code>sendMessage()</code> to the sender code and a function called <code>recvMessage()</code> to the receiver. Here are the changed codes:</p>
<p><strong>Sender:</strong></p>
<pre><code>from __future__ import print_function
import socket
from struct import pack

HOST = '10.0.0.2'
PORT = 12345
BUFSIZE = 4096
BUFFER_SIZE = 1024
MESSAGE = "Finish!"

def send(sock, data):
    while data:
        sent = sock.send(data)
        data = data[sent:]

#Updated part for sending message
def sendMessage(message):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((HOST, PORT))
    sock.send(message)
    data = sock.recv(BUFFER_SIZE)
    sock.close()
    print ("received data:", data)

def send_file(fname):
    with open(fname, 'rb') as f:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.connect((HOST, PORT))
        except socket.error as err:
            print(err, HOST, PORT)
            sock.close()
            return

        # Send the file name length &amp; the filename itself in one packet          
        send(sock, pack('B', len(fname)) + fname.encode())
        while True:
            data = f.read(BUFSIZE)
            if not data:
                break
            send(sock, data)

    sock.close()

fnames = [
    '1.jpg',
    '2.jpg',
    '3.jpg',
    '4.jpg',
]

def main():
    for fname in fnames:
        send_file(fname)
    sendMessage(MESSAGE)

if __name__ == '__main__':
    main()
</code></pre>
<p><strong>receiver:</strong></p>
<pre><code>from __future__ import print_function
import socket
from struct import unpack

HOST = '10.0.0.2'
PORT = 12345
BUFSIZE = 4096
BUFFER_SIZE = 20

class Receiver:
    ''' Buffer binary data from socket conn '''
    def __init__(self, conn):
        self.conn = conn
        self.buff = bytearray()

    def get(self, size):
        ''' Get size bytes from the buffer, reading
            from conn when necessary 
        '''
        while len(self.buff) &lt; size:
            data = self.conn.recv(BUFSIZE)
            if not data:
                break
            self.buff.extend(data)
        # Extract the desired bytes
        result = self.buff[:size]
        # and remove them from the buffer
        del self.buff[:size]
        return bytes(result)

    def save(self, fname):
        ''' Save the remaining bytes to file fname '''
        with open(fname, 'wb') as f:
            if self.buff:
                f.write(bytes(self.buff))
            while True:
                data = self.conn.recv(BUFSIZE)
                if not data:
                    break
                f.write(data)

#Updated part for receiving message
def recvMessage(conn):
    while 1:
        data = conn.recv(BUFFER_SIZE)
        if not data: break
        print("received data:", data)
        conn.send(data)  # echo


def main():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        sock.bind((HOST, PORT))
    except socket.error as err:
        print('Bind failed', err)
        return

    sock.listen(1)
    print('Socket now listening at', HOST, PORT)
    try:
        while True:
            conn, addr = sock.accept()
            print('Connected with', *addr)
            # Create a buffer for this connection
            receiver = Receiver(conn)
            # Get the length of the file name
            name_size = unpack('B', receiver.get(1))[0] 
            # Get the file name itself
            name = receiver.get(name_size).decode()
            print('name', name)
            # Save the file
            receiver.save(name)
            conn.close()
            print('saved\n')

    recvMessage(conn)
    # Hit Break / Ctrl-C to exit
    except KeyboardInterrupt:
        print('\nClosing')

    sock.close()

if __name__ == '__main__':
    main()
</code></pre>
<p>but after running these codes both sender and receiver freeze after the complete transfer of 4 files and nothing happens. What's wrong and how can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suspect you're falling prey to buffering here:</p>
<pre><code>def sendMessage(message):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((HOST, PORT))
    sock.send(message)
    data = sock.recv(BUFFER_SIZE)
    sock.close()
    print ("received data:", data)
</code></pre>
<p>You perform a <code>send</code>, then immediately try to <code>recv</code>. Except stream connections tend to buffer to avoid excessive packet overhead, so odds are, you don't actually send anything yet, the server doesn't see anything so it doesn't respond, and both sides are blocked waiting for data.</p>
<p>The simplest solution here is to shut down the send side port for writing once you've sent the message, which forces out the last data and lets the receiver know you're done:</p>
<pre><code>def sendMessage(message):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((HOST, PORT))
    sock.sendall(message)          # sendall makes sure the *whole* message is sent
    sock.shutdown(socket.SHUT_WR)  # We're done writing
    data = sock.recv(BUFFER_SIZE)
    sock.close()
    print("received data:", data)
</code></pre>
<p>On the receiver side you have a bigger problem: You close the connection before trying to receive at all:</p>
<pre><code>    while True:
        conn, addr = sock.accept()
        print('Connected with', *addr)
        # Create a buffer for this connection
        receiver = Receiver(conn)
        # Get the length of the file name
        name_size = unpack('B', receiver.get(1))[0] 
        # Get the file name itself
        name = receiver.get(name_size).decode()
        print('name', name)
        # Save the file
        receiver.save(name)
        conn.close()       # Closed here!!!
        print('saved\n')

        recvMessage(conn)  # Used again here!!!
</code></pre>
<p>So move the <code>close</code> after the <code>recvMessage</code> call, and change <code>recvMessage</code> to <a href="https://docs.python.org/3/library/socket.html#socket.socket.setsockopt" rel="nofollow noreferrer">use <code>setsockopt</code></a> to <a href="https://linux.die.net/man/7/tcp" rel="nofollow noreferrer">turn on <code>TCP_NODELAY</code></a>, so buffering isn't occurring (otherwise the echo back may end up buffering indefinitely, though shutting down the sender for write does mean you're likely to detect the sender is done and exit the loop then close the connection, so it may work fine without <code>TCP_NODELAY</code>, as long as the sender isn't expecting to receive data and respond further):</p>
<pre><code>def recvMessage(conn):
    # Disable Nagle algorithm so your echoes don't buffer
    conn.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
    while 1:
        data = conn.recv(BUFFER_SIZE)
        if not data: break
        print("received data:", data)
        conn.sendall(data)  # echo using sendall, again, to ensure it's all really sent
</code></pre>
</div>
<span class="comment-copy">Some notes: One, <code>socket.sendall</code> exists, and does what your unnecessary <code>send</code> function does already, so you can avoid some custom code there. Two, if this is Python 3, <a href="https://docs.python.org/3/library/socket.html#socket.socket.sendfile" rel="nofollow noreferrer"><code>socket.sendfile</code></a> can replace even more of your code, and on many systems, run significantly faster (it directly transfers data from file to socket in the kernel without copying it out to user space and back). If it's not Python 3, maybe switch? Python 2 is out of support, soon, so coding for it is voluntary obsolescence.</span>
<span class="comment-copy">@ShadowRanger I'm using mininet which, as far as I know, does not support Python 3. This is the reason I'm using Python 2.7</span>
<span class="comment-copy">@helen then stop using mininet</span>
<span class="comment-copy">@dangee1705 Mininet is the best tool available for simulating SDN networks.</span>
<span class="comment-copy">@helen: Correct me if I'm wrong, but it looks like, while <code>mininet</code> itself is Python 2 based, all <code>mininet</code> itself does is set up the virtual network/hosts, then you run arbitrary commands with <code>.cmd("command line")</code>. Those commands can be <i>anything</i>, Python 2, Python 3, <code>bash</code> scripts, compiled <code>C</code> executables, etc. So sure, the <code>mininet</code> script itself might need to be Python 2, but the server and client code it runs can be Python 3 or Perl or Ruby or Lisp, all with no problems.</span>
<span class="comment-copy">Side-note: Having the sender set <code>TCP_NODELAY</code> would also solve your problem without explicitly performing a <code>shutdown</code>, in that it would send all of its data immediately just like a <code>shutdown</code> forces, but given you only send one thing and then you're done, <code>shutdown(socket.SHUT_WR)</code> should work just fine, doesn't involve disabling the Nagle algorithm, and provides faster feedback to the server that the client is done sending it data (instead of waiting for the client to receive the data, then <code>close</code> the socket, then wait for OS connection teardown, before the server <code>read</code> can end).</span>
<span class="comment-copy">Thanks. But there is a problem. when I run this code, a new text file which is named "inish" is created. However, I just want to send a simple message "finish" so that the receiver will understand that all files from that sender is received (and it will do some other tasks later based on this message). I don't want any file to be created.</span>
<span class="comment-copy">@helen: That's a problem with not knowing how big your files are, so it has no way of knowing when a file is done, nor how to detect the difference between file data, file names, and the <code>finish</code> command. Simplest solution is similar to what you're already doing for the file name; after the file name is sent, send the binary length of the file (as a 64 bit value to handle large files) before sending the file, so it knows how much to read to populate the resulting file.</span>
<span class="comment-copy">You'd probably want to add a marker like a raw zero byte after the last file is finished (when the receiver expects the length of the next file name) so it can detect that <code>finish</code> isn't intended as a file name, just a confirmation string that says "we're all done sending files, move to echo mode".</span>
<span class="comment-copy">@helen: Yeah. The idea is that it needs to be something (anything) that can't be mistaken for the start of a new file. Since a new file starts with a length field for the file name, and a length can't logically be zero, sending zero makes sense as the marker. The precise value would differ depending on context, but for length, 0 (or if the field has a signed interpretation, some negative value) are the only reasonable markers. Note: This isn't needed if only one file can be sent per connection (which seems to be your design), and the file is length prefixed so you know when to stop.</span>
