<div class="post-text" itemprop="text">
<p>which of the two are more pythonic?</p>
<pre><code>class A:
    def __init__(self):
        self.v1 = None
        self.v2 = None
        self.v3 = None
        self.foo()

    def foo(self):
        self.v1, self.v2, self.v3 = ...
</code></pre>
<p>or:</p>
<pre><code>class A:
    def __init__(self):
        self.v1, self.v2, self.v3 = self.foo()

    def foo(self):
        return ...
</code></pre>
<p>What I infer myself is that in the first example it is not clear at first glance what <code>self.foo()</code> does, until someone reads through the method itself.</p>
<p>But the problem with the second one is that it may arise the warning that: <code>foo</code> method may be static.</p>
</div>
<div class="post-text" itemprop="text">
<p>A good way to initialize a class is:</p>
<pre><code>class A:
    def __init__(self, arg1=None, arg2=None):
        self.arg1=arg1
        self.arg2=arg2
</code></pre>
<p>Since you want to initialize variables using a file, you may want to use ConfigParser. ConfigParser allows you to read from a file and access key-value pairs easily.</p>
<pre><code>from configparser import ConfigParser
config = ConfigParser()
config.read('example.conf')

class A:
    def __init__(self, config):
        self.arg1=config['arg1']
        self.arg2=config['arg2']
</code></pre>
<p>My example class above takes in a config object in which you can get the values you stored from a file.</p>
<p>P.S. I didn't test the code above. Take a look at <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">the configparser docs</a> for more info.</p>
</div>
<span class="comment-copy">wouldn't you want to be able to pass arguments to your constructor and only set the non-specified args to the default? i.e. <code>def __init__(self, v1=None, v2=None, v3=None):</code> and then be able to call <code>a = A(v2=some_value)</code> and have <code>__init__</code> set the values for <code>v1</code> and <code>v2</code>?</span>
<span class="comment-copy">Potential approach #3: don't create any attributes of self in the <code>__init__</code>, instead creating them directly within <code>foo</code>. There's no rule that says that attributes need to be declared within init before they can be defined somewhere else, or anything.</span>
<span class="comment-copy">@hiroprotagonist actually no. in my code, I just need a path as an input, and many variables are initialized according to that path.</span>
<span class="comment-copy">Thanks for your answer, but in my case the variables are calculated with respect to images in the directory, and they are not constant to be put in config file.</span>
