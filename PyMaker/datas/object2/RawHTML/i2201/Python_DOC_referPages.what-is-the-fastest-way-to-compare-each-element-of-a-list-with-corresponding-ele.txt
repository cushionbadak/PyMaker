<div class="post-text" itemprop="text">
<p>I want to compare each element of a list with corresponding element of another list to see if it is greater or lesser.</p>
<pre><code>list1 = [4,1,3]
list2 = [2,5,2]
</code></pre>
<p>So compare <code>4</code> with <code>2</code>, <code>1</code> with <code>5</code>, <code>3</code> with <code>2</code>.</p>
<p>Are there other fast ways to do that other than using a for loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>numpy</code> library  for this. And its significantly faster </p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; list1 = np.array([4,1,3]) 
&gt;&gt;&gt; list2 = np.array([2,5,2])
&gt;&gt;&gt; list1 &lt; list2
array([False,  True, False])
</code></pre>
<p>The time taken  to run the function </p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("""
... import numpy as np
... list1 = np.array([4,1,3])
... list2 = np.array([2,5,2])
... print(list1 &lt; list2)
... """,number=1)
[False  True False]
0.00011205673217773438
</code></pre>
<p>Well the fact that numpy is basically written in C,C++ makes it considerable faster, if you look into the implementation of it .</p>
</div>
<div class="post-text" itemprop="text">
<p>You can map the two lists to an operator such as <code>int.__lt__</code> (the "less than" operator):</p>
<pre><code>list(map(int.__lt__, list1, list2))
</code></pre>
<p>With your sample input, this returns:</p>
<pre><code>[False, True, False]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do like this,</p>
<p>Use of lambda:</p>
<pre><code>In [91]: map(lambda x,y:x&lt;y,list1,list2)
Out[91]: [False, True, False]
</code></pre>
<p>With <code>zip</code> and for loop:</p>
<pre><code>In [83]: [i&lt;j for i,j in zip(list1,list2)]
Out[83]: [False, True, False]
</code></pre>
<p>Execution timings for lambda and for loop:</p>
<pre><code>In [101]: def test_lambda():
     ...:     map(lambda x,y:x&gt;y,list1,list2)
     ...:     

In [102]: def test_forloop():
     ...:     [i&lt;j for i,j in zip(list1,list2)]
     ...:     

In [103]: %timeit test_lambda
     ...: 
10000000 loops, best of 3: 21.9 ns per loop

In [104]: %timeit test_forloop
10000000 loops, best of 3: 21 ns per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">use <code>zip()</code> to</a> join the list elements and a list comprehension to create the resulting list:</p>
<pre><code>list1 = [4,1,3]
list2 = [2,5,2]

list1_greater_list2_value = [a &gt; b for a,b in zip(list1,list2)]

print ("list1-value greater then list2-value:", list1_greater_list2_value) 
</code></pre>
<p>Output:</p>
<pre><code> list1-value greater then list2-value: [True, False, True]
</code></pre>
<p>This does the same work as a normal loop - but looks more pythonic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for the sake of better comparison, if all approaches are timed in the same way:</p>
<pre><code>paul_numpy:  0.15166378399999303
artner_LCzip:  0.9575707100000272
bhlsing_map__int__:  1.3945185019999826
rahul_maplambda:  1.4970900099999653
rahul_LCzip:  0.9604789950000168
</code></pre>
<p>Code used for timing:</p>
<pre><code>setup_str = '''import numpy as np
list1 = list(map(int, np.random.randint(0, 100, 1000000)))
list2 = list(map(int, np.random.randint(0, 100, 1000000)))'''


paul_numpy = 'list1 = np.array(list1); list2 = np.array(list2);list1 &lt; list2'
t = timeit.Timer(paul_numpy, setup_str)
print('paul_numpy: ', min(t.repeat(number=10)))

artner = '[a &gt; b for a,b in zip(list1,list2)]'
t = timeit.Timer(artner, setup_str)
print('artner_LCzip: ', min(t.repeat(number=10)))

blhsing = 'list(map(int.__lt__, list1, list2))'
t = timeit.Timer(blhsing, setup_str)
print('bhlsing_map__int__: ', min(t.repeat(number=10)))

rahul_lambda = 'list(map(lambda x,y:x&lt;y,list1,list2))'
t = timeit.Timer(rahul_lambda, setup_str)
print('rahul_maplambda: ', min(t.repeat(number=10)))

rahul_zipfor = '[i&lt;j for i,j in zip(list1,list2)]'
t = timeit.Timer(rahul_zipfor, setup_str)
print('rahul_LCzip: ', min(t.repeat(number=10)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>actually, I should say that there is no faster way of doing your desired action other that loop because if you look closer to the problem you can see that by use of algorithm this action takes at least <code>O(n)</code> to be done. so all answers are right and will do as you want with <code>Zip</code> or <code>map</code> or ... but these solutions just make your implementing more beautiful and pythonic. not faster, in some cases, like blhsing answer, it is a little bit faster because of less line of code, not the time complexity.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <em>enumerate</em> eliminates the need for any <code>zip</code> or <code>map</code> here  </p>
<pre><code>[item &gt; list2[idx] for idx, item in enumerate(list1)]
# [True, False, True]
</code></pre>
</div>
<span class="comment-copy">OP:<code>Are there other fast ways to do that other than using a for loop?</code></span>
<span class="comment-copy">@mehrdad-pedramfar Updated.</span>
<span class="comment-copy">is using lambda and zip much faster than a for loop?</span>
<span class="comment-copy">@Brock Updated the timings.</span>
<span class="comment-copy">purely in terms of how it works algorithmic, "no faster way" might be true. But due to implementation differences, there might actually be quite big ones. Do timing measurements exist to actually quantify your/the general gut feeling, comparing the different approaches?</span>
<span class="comment-copy">list comprehension for-loop is the pythonic way. <code>map</code> is not  pythonic way. Almost every language uses map in the same way. Also although there is no difference in time complexity, there is a great difference in the running time due to the code simplicity. <code>map</code> is still calling for loop on the background. and thus it is just a way of avoiding to explicitly call for loops and just for readability. but it is slower than the list comprehension</span>
<span class="comment-copy">@Onyambu yes, I mean exactly that, the simplicity and readability are effective. but time complexity stays the same.</span>
<span class="comment-copy">but map is not simple as compared to list comprehension, that's why its slower than list comprehension.</span>
<span class="comment-copy">@OnyambuI didn't know that. thanks for saying.</span>
<span class="comment-copy">@davedwards yeah I realized I was being lazy and just looked it up :) ty!</span>
