<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/52409549/where-to-call-join-when-multiprocessing">Where to call join() when multiprocessing</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I want to know which way is better performance, the code1 is as below, join them after all threads started.</p>
<pre><code>ts = []
for href in hrefs:
    t = create_thread_parse(href)
    t.daemon = True
    t.start()
    ts.append(t)

for t in ts:
    t.join()
</code></pre>
<p>The code2 as below, join it after thread started.</p>
<pre><code>ts = []
for p, href in enumerate(hrefs):
    t = create_thread_parse(href)
    t.daemon = True
    t.start()
    ts.append(t)
    t.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>They do different things.</p>
<p><a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow noreferrer"><code>t.join</code></a> blocks until the <code>t</code> thread terminates. So your 1st version runs the threads in parallel, then waits for them all to finish. The 2nd version runs the threads one after the other, a new thread isn't created or started until the previous one terminates.</p>
</div>
