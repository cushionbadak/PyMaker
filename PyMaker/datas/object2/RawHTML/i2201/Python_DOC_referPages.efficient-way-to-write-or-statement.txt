<div class="post-text" itemprop="text">
<p>From my standard input I take two words and I want to process them if they occur in a dictionary. This means that I can have both, one or none of the words match (in which case I will wrap up the code with an error message). This is very similar to a boolean OR gate. I can write my script like this:</p>
<pre><code>if word1 in dict and word2 in dict:
    # process word1
    # process word2
elif word1 in dict:
    # process word1
elif word2 in dict:
    # process word2
else:
    # error msg
</code></pre>
<p>However, this seems rather redundant. Is there a simple alternative to this? I have a separate function that processes one of these words at a time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Now that it's clear that processing of both words is nothing special, i.e. just sequential processing of the individual words, you can reduce your code by moving up the error check to the top:</p>
<pre><code>if word1 not in dict and word2 not in dict:
    # raise Exception or print and return
if word1 in dict:
    # process word1
if word2 in dict:
    # process word2
</code></pre>
<p>Readable and no extra state variables needed. </p>
</div>
<div class="post-text" itemprop="text">
<p>If processing word1 and word2 is independent of each other, then you can modify your code as follows:</p>
<pre><code>word_found = False
if word1 in dict:
    #process word1
    word_found = True
if word2 in dict:
    #process word2
    word_found = True
if not word_found:
    #error message
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">leverage <code>all(..)</code></a> to check if multiple keys are in your dictionary - this will test all things until a False one is found or all are True:</p>
<pre><code>def doSmthWithAllOfThem(words,dictionary):
    print(words, "are in it")
    print(sum(dictionary[word] for word in words) )

d = {"w{}".format(i):i for i in range(10)}

words = {"w1","w9","w4"} 

if all(w in d for w in words):
    doSmthWithAllOfThem(words,d)
elif "w9" in dict:
    pass
else:
    raise ValueError("not in")
</code></pre>
<p>Output:</p>
<pre><code>{'w4', 'w9', 'w1'} are in it
14
</code></pre>
<p>You could also <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.intersection" rel="nofollow noreferrer">use <code>set</code>-intersection operation</a>:</p>
<pre><code>words = {"w1","w9","w4"} 

if words &amp; set(d.keys()) == words:
    doSmthWithAllOfThem(words,d)
</code></pre>
<p>or (cudos to @jpp) the <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.issubset" rel="nofollow noreferrer">use <code>set</code>-issubset operation</a>:</p>
<pre><code>if words &lt;= set(d.keys()):
    doSmthWithAllOfThem(words,d)
</code></pre>
<p>(Output in both <code>set-usage</code> cases identical to the one above)</p>
<hr/>
<p>The intersection returns only things that are in both sets - if the  result afterwards is euqal to <code>words</code> all elements were in your dict.</p>
</div>
<span class="comment-copy"><code>if word1 and word2 in dict</code> does not do what you think it does. It returns <code>True</code> for any <code>word1</code> that is not empty - also do not name variables after built ins, you shadow them <code>(list,dict,set,abs,min,max,tuple,...)</code></span>
<span class="comment-copy">@PatrickArtner I am aware of the error, I meant to write it like this: <code>if word1 in dict and word2 in dict</code>. Thanks for notifying me though! And the <code>dict</code> variable name is purely for the example.</span>
<span class="comment-copy">The value of the dictionary key is used while processing the word.</span>
<span class="comment-copy">Please add somd dummy method calls for processing which make clear how those differ, especially if when both words are there, the processing is just the sequential individual processing.</span>
<span class="comment-copy">@HylkevanderVeen Under the first if condition you should probably write #process word1 and another line #process word2. This would make your question clearer.</span>
<span class="comment-copy">As he said, "Mind you, I have a separate function which processes one of these words at a time.". So if both words are there, processing is apparently different from just doing both sequentially. Although, the question is a bit unclear about that..</span>
<span class="comment-copy">Sorry I might not have written that clearly, I will make an edit. I meant to say I have a function which processes one word. This means when I want to process both words, I have to call the function twice.</span>
<span class="comment-copy">Generally you'd write <code>if not wordFound:</code> (or <code>word_found</code>); encouraging equality comparison like this can lead to unexpected results (e.g. <a href="https://stackoverflow.com/q/7479808/3001761">stackoverflow.com/q/7479808/3001761</a>).</span>
<span class="comment-copy">@jonrsharpe Thanks. Corrected. I am a technology agnostic programmer. So not aware of code styling in python.</span>
