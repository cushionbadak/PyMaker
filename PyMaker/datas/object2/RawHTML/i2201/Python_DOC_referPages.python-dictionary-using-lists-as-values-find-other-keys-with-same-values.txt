<div class="post-text" itemprop="text">
<p>Say I have the following dictionary.</p>
<p><code>&gt;&gt; sample_dict = {"1": ['a','b','c'], "2": ['d','e','f'], "3": ['g','h','a']}</code></p>
<p>I would like to find a way that would look at the values of each of the keys and return whether or not the value lists have the a duplicate variable inside.</p>
<p>For example it would output:</p>
<pre><code>&gt;&gt; [["1","3"] , ['a']]
</code></pre>
<p>I've looked at a few of the posts here and tried to use and/or change them to accomplish this, however none of what I have found has worked as intended. They would work if it was as follows:</p>
<pre><code>&gt;&gt; sample_dict = {"1": ['a','b','c'], "2": ['d','e','f'], "3": ['a','b','c']}
</code></pre>
<p>but not if only a single value within the list was the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use another dictionary to map the values to the lists of corresponding keys. Then just select the values that map to more than one key, e.g.:</p>
<pre><code>from collections import defaultdict

sample_dict = {'1': ['a','b','c'], '2': ['d','e','f'], '3': ['g','h','a']}    

d = defaultdict(list)  # automatically initialize every value to a list()

for k, v in sample_dict.items():
    for x in v:
        d[x].append(k)

for k, v in d.items():
    if len(v) &gt; 1:
        print([v, k])
</code></pre>
<p>Output:</p>
<pre><code>[['1', '3'], 'a']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the list elements are hashable, you can use <code>.setdefault</code> to build an inverse mapping like so:</p>
<pre><code>&gt;&gt;&gt; sample_dict = {"1": ['a','b','c'], "2": ['d','e','f'], "3": ['g','h','a']}
&gt;&gt;&gt; aux = {}
&gt;&gt;&gt; for k, v in sample_dict.items():
...     for i in v:
...         aux.setdefault(i, []).append(k)
... 
&gt;&gt;&gt; [[v, k] for k, v in aux.items() if len(v) &gt; 1]
[[['1', '3'], 'a']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries map from keys to values, not from values to keys. But you can write a function for <em>one-off</em> calculations. This will incur O(<em>n</em>) time complexity and is not recommended for larger dictionaries:</p>
<pre><code>def find_keys(d, val):
    return [k for k, v in d.items() if val in v]

res = find_keys(sample_dict, 'a')  # ['1', '3']
</code></pre>
<p>If you do this often, I recommend you "invert" your dictionary via <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

dd = defaultdict(list)

for k, v in sample_dict.items():
    for w in v:
        dd[w].append(k)

print(dd)

defaultdict(&lt;class 'list'&gt;, {'a': ['1', '3'], 'b': ['1'], 'c': ['1'], 'd': ['2'],
                             'e': ['2'], 'f': ['2'], 'g': ['3'], 'h': ['3']})
</code></pre>
<p>This costs O(<em>n</em>) for the inversion, as well as additional memory, but now allows you to access the keys associated with an input value in O(1) time, e.g. <code>dd['a']</code> will return <code>['1', '3']</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>defaultdict</code> from <code>collections</code> module to do this</p>
<p>for example,</p>
<pre><code>from collections import defaultdict
sample_dict = {"1": ['a','b','c'], "2": ['d','e','f'], "3": ['g','h','a']}

d = defaultdict(list)
for keys, vals in sample_dict.items():
    for v in vals:
        d[v].append(keys)


print(d)
</code></pre>
<p>d will return a <code>dict</code>, where the keys will be the values that are repeated and values will be the list in which they were repeated in</p>
<p>The output of above code is <code>defaultdict(list,{'a': ['1', '3'],'b': ['1'],'c': ['1'],'d': ['2'],'e': ['2'],'f': ['2'],'g': ['3'],'h': ['3']})</code>
â€‹</p>
<p>Although it IS possible to get form in which you desired the output to be in, but it is not generally recommended because we are trying to get what character get repeated in which list, that feels like a job of a dictionary</p>
</div>
<span class="comment-copy">Dictionaries are made for a lookup by key, not by value. Can you explain the use case behind it? There might be a better structure.</span>
<span class="comment-copy">@KlausD.I have a YAML File that's being read in, there are 275 keys total with each key have a list with 4 values. I'm using this for the user to select up to 10 of they keys and it finds the similar values between each of them.</span>
