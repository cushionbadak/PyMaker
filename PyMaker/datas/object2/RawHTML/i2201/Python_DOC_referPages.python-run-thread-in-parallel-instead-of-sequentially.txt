<div class="post-text" itemprop="text">
<p>Code:</p>
<pre><code>from threading import Thread
import time

def main():
    print([threadID])
    time.sleep(5)
    pass

if __name__ == '__main__':
    threadID = 0
    while threadID &lt; 5:
        main()
        threadID +=1
</code></pre>
<p>Currently, it runs the first thread, then once it is finished it starts the next. </p>
<p>How can I get all threads to start at the same time? </p>
</div>
<div class="post-text" itemprop="text">
<p>I feel a little stupid but was never actually calling threading...</p>
<p>Code: </p>
<pre><code>from threading import Thread
import time

def main():
    print([threadID])
    time.sleep(5)
    pass

if __name__ == '__main__':
    threadID = 0
    while threadID &lt; 5:
        t = Thread(target=main)
        t.start()
        threadID +=1
</code></pre>
</div>
<span class="comment-copy">You don't get any threading just by importing <code>Thread</code>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2846653/how-to-use-threading-in-python">How to use threading in Python?</a></span>
<span class="comment-copy">@MikeScotty thank you for the reply - Will read this now and try to implement</span>
<span class="comment-copy">While what you're doing here might work for trivial use cases, in general it's a better idea to let Python manage multiple threads when you want to use them like this. I'm linking to a <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example" rel="nofollow noreferrer">particular example in the doc</a>; while reading from the start is important, in my opinion this is the most useful practical example in there. <code>multiprocessing.pool</code> also provides <code>ThreadPool</code>, though the documentation is... not really there.</span>
