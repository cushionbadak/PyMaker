<div class="post-text" itemprop="text">
<p>I have been trying to make a 'Prime Number Checker' that looks like this:</p>
<p>Please enter a number: 7</p>
<p>The factors are:</p>
<p>1</p>
<p>7</p>
<p>7 is a prime number</p>
<p>Try again? Y</p>
<p>Enter a number: 6</p>
<p>The factors are:</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>6</p>
<p>6 is not a prime number</p>
<p>It has 6 factors</p>
<p>I am stuck on the very last portion, which counts how many factors a non-prime number has (listed as 'num_factors' in the code below). Thank you! *Edited for clarity.</p>
<pre><code>def main():
    num = int(input("Please enter an integer between 2 and 5,000: "))

    def list_factors(x):
        print("The factors of your number are: ")
        for i in range(1, x + 1):
                if x % i == 0:
                    print(i)
    list_factors(num)

    def is_prime(num):
        if num&gt;1:
            for i in range(2,num):
                if (num%i) == 0:
                    print(num, "is NOT a prime number")
                    break
            else:
                print(num, "is a prime number")

        else:
            print(num, "is not a prime number")
    is_prime(num)

    def num_factors(x):
        for i in range(1, x + 1):
                if x % i == 0:
                    list = []
                    print("It has", len(list), "factors")
    num_factors(x)


    print()
    again=input("Try again? (y/n): ")
    if again == "y":
        print()
        main()
    else:
        print("Bye!") 

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you build a list of factors first, instead of iterating at each step.</p>
<pre><code>def get_factors(n):
    factors = []
    for i in range(1, n+1):
        if n % i == 0:
            factors.append(i)
    return factors
</code></pre>
<p>Now you can define your other functions in terms of the list of factors:</p>
<pre><code>def is_prime(factors):
    return len(factors) == 2

def num_factors(factors):
    return len(factors)
</code></pre>
<p>If you want to make your implementation more efficient, I suggest you read up on prime factorization.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a=int(input("Enter number: "))
k=0
for i in range(2,a//2+1):
    if(a%i==0):
        k=k+1
if(k&lt;=0):
    print("Number is prime")
else:
    print("Number isn't prime") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change</p>
<pre><code>def num_factors(x):
    for i in range(1, x + 1):
            if x % i == 0:
                list = []
                print("It has", len(list), "factors")
num_factors(x)
</code></pre>
<p>for</p>
<pre><code>def num_factors(x):
    list = []
    for i in range(1, x + 1):
            if x % i == 0:
                list.append(x)      
    print("It has", len(list), "factors")
num_factors(num)
</code></pre>
<p>Your number is called <code>num</code>, not <code>x</code>. Then you should create the factor list outside the for loop and append each factor to the list.</p>
<p>As somebody recommended in the comments, you should print outside of the functions. Also you don't need to check for factors bigger than <code>x//2</code>. So I would recommend something like this:</p>
<pre><code>def num_factors(x):
    list = []
    for i in range(1, x//2 + 1):
            if x % i == 0:
                list.append(x)      
    return facts
facts=num_factors(num)
print("It has", len(facts), "factors")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were very close, the only adjustment would be that you would want to append those values that pass <code>if x % i == 0</code> which can also be stated <code>if not x % i:</code> and you would want to move the empty list outside of your loop. then just return the length of that list.   </p>
<pre><code>def num_factors(non_prime):
    l = []
    for i in range(1, non_prime+1):
        if not non_prime % i:
            l.append(i)
    return len(l)

print('It has {} factors'.format(num_factors(10)))
# It has 4 factors.
</code></pre>
<p><em>Future References</em>:</p>
<p>Just to open you to why it would be important to explore built in functions, you could accomplish this using <code>filter</code> in one expression</p>
<pre><code>def num_factors(non_prime):
    return len(list(filter(lambda x: not non_prime % x, range(1, non_prime +1))))
</code></pre>
<p>As well as with <em>list comprehension</em> </p>
<pre><code>def num_factors(non_prime):
    return len([i for i in range(1, non_prime +1) if not non_prime % i])
</code></pre>
<p>You can find information on both at <a href="https://docs.python.org/3/" rel="nofollow noreferrer">https://docs.python.org/3/</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code># input and validation integer number
try:
    num = int(input(
        "Please enter an integer number between 2 and 5,000 : "))
except ValueError:
    print("Please enter an integer number between 2 and 5,000!!!")

# for check number.
# If number is prime it's true
# If number not prime it's false 
# default is true
status = True

print("%d divided by %d" % (num, 1))
for i in range(2, int(num / 2)+1):
    if num % i == 0:
        status = False
        print("%d divided by %d" % (num, i))
print("%d divided by %d" % (num, num))


if status:
    print("%d is prime" % (num))
else:
    print("%d is not prime" % (num))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you would like to capture all the factors, you could use the sub below. If you give it a number like 1024, it returns a list of ten 2's (all the factors)</p>
<pre><code>def main():
    x = int(input('Enter a number to find the prime factors '))

    primes = prime_factors(x)

    print(primes)

def prime_factors(x):
    factors = []

    y = 2

    while (y &lt;= x):
        while x % y != 0:
            y += 1
        x /= y
        factors.append(y)

    return factors

main()
</code></pre>
</div>
<span class="comment-copy">I think your first example should say that 7 <i>is</i> a prime number.</span>
<span class="comment-copy">Create functions which return results. Print results from outside of the functions. Once you get that resolved, the rest will be easy.</span>
<span class="comment-copy">you only need <code>n//2 +1</code></span>
<span class="comment-copy">@JoranBeasley That has the same time complexity so it's a pointless optimization.  If you want to be more efficient you can iterate up to the square root of <code>n</code> and for each factor found add its complement also.  Or, as I mentioned, just compute the prime factors/exponents and use those.</span>
<span class="comment-copy">To help readers understand your solution, consider including a short description of your code and how it solves the posted question</span>
