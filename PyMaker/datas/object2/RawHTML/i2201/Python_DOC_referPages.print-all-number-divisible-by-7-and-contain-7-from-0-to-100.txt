<div class="post-text" itemprop="text">
<p>I am trying to make a for loop that will print all the numbers divisible by 7 from 0 to 100 and also numbers that contain 7, like this example:
7
14
17
21
27
28
and so on</p>
<p>I tried to do this:</p>
<pre><code>for i in range(101):
    if i%7==0 or i==range(7,98,10):
        print(i)
</code></pre>
<p>but it prints this:</p>
<p>7
14
21 and so on</p>
<p>what should I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>As pointed out elsewhere, <code>i == range(7,98,10)</code> doesn't really make sense, as you can't compare an integer to a range object. What you're actually trying to do is a membership test, which in python uses the <code>in</code> keyword: <code>i in range(7,98,10)</code></p>
<p>The next issue you'll find is that you're missing a class of numbers that contain the digit 7. Namely, the 70-79 range (although you'll get 70 and 77 from the other rules). Following your current strategy, your final answer might look like this:</p>
<pre><code>for i in range(101):
    if i % 7 == 0 or i in range(7, 98, 10) or i in range(70, 80):
        print(i)
</code></pre>
<p>This is perfectly valid. You can also approach it mathematically, by noting that the numbers with a 7 ones digit will have a remainder of 7 when divided by 10 (known as the modulo operator, <code>%</code>), and numbers with a 7 tens digit will have a quotient of 7 when divided by 10 (using integer division, <code>//</code>).</p>
<pre><code>for i in range(101):
    if i % 7 == 0 or i % 10 == 7 or i // 10 == 7:
        print(i)
</code></pre>
<p>Finally, there's a neat trick you can do since you're checking both division and mod by the same number; these two results will be given at the same time by the built-in <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod()</code></a> function. You just need to check if either of them are 7. (Note that this won't work if you expand beyond 2 digit numbers.)</p>
<pre><code>for i in range(101):
    if i % 7 == 0 or 7 in divmod(i, 10):
        print(i)
</code></pre>
<p>(Note: I left the range of the <code>for</code> loop the same as your sample code. This will include <code>0</code> in the output, since it is divisible by 7. If you don't want <code>0</code>, just change the range to <code>range(1, 101)</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>well actually when you do:</p>
<pre class="lang-py prettyprint-override"><code>i == range(7, 98, 10)
</code></pre>
<p>you are comparing an integer with a iterable. So this condition always evaluates to <code>False</code>.</p>
<hr/>
<p>What you want to do is to check whether the string representation of you number contains <code>7</code>. You can do:</p>
<pre class="lang-py prettyprint-override"><code>'7' in str(i)
</code></pre>
<hr/>
<p>So globally, you could write the following:</p>
<pre class="lang-py prettyprint-override"><code>for i in range(0, 101):
    if i % 7 == 0 or '7' in str(i):
        print i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you don't want to do <code>'7' in number</code> and mathematically do it here is how you can</p>
<pre><code>n = 7
i = 0
j = 100

# largest_multiple_of_n_smaller_than_j = (j - j%n) # 100 - 100%7 --&gt; 100 -2 --&gt; 98
# 98//7 --&gt; 14 
# therefore we can say 7 multiply i( where i goes from 0 --&gt; 14) will be less than equal to 100

multiples_of_n = [n*i for i in range(0, ((j - j%n) // n) +1)] # 0 7 14 21 ....98

# 17 27 37..(dont pick 77 here)..97 and 71 72 73...77..79
contains_n = [i*10+n for i in range(1,10) if i != n] + [n*10+x  for x in range(1,10) if (n*10+x) % n !=0] 

'''
or use this 

contains_n = [x for x in range(10+n,j,10) if x != n*11] + [x for x in range(n*10+1,n*10+10) if x % n !=0] 
'''

mult_and_contain_n =  sorted(multiples_of_n + contains_n)
print(mult_and_contain_n)
</code></pre>
<p><br/>
<strong>Output</strong></p>
<p><code>n = 7</code></p>
<pre><code>[0, 7, 14, 17, 21, 27, 28, 35, 37, 42, 47, 49, 56, 57, 63, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 87, 91, 97, 98]
</code></pre>
<p><br/>
<code>n = 5</code></p>
<pre><code>[0, 5, 10, 15, 15, 20, 25, 25, 30, 35, 35, 40, 45, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 65, 70, 75, 75, 80, 85, 85, 90, 95, 95, 100]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <em>list comprehension</em> and using <code>not i % 7</code> along with the checking <code>str(i)</code> contents for a <code>7</code> </p>
<pre><code>print([i for i in range(7, 101) if not i % 7 or '7' in str(i)])
# [7, 14, 17, 21, 27, 28, 35, 37, 42, 47, 49, 56, 57, 63, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 87, 91, 97, 98]
</code></pre>
</div>
<span class="comment-copy">0 is divisible by 7. Should the output include 0?</span>
<span class="comment-copy">Side-note: The simple way to do this is with <code>set</code> operations, so you never even generate values that don't match. On 3.5+ with <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">additional unpacking generalizations</a> you can do: <code>for i in sorted({*range(0, 101, 7), *range(7, 101, 10), *range(70, 80)}): print(i)</code>. Pre-3.5, you could do the <i>slightly</i> slower: <code>for i in sorted(set().union(range(0, 101, 7), range(7, 101, 10), range(70, 80))): print(i)</code> Not posted as answer because it's more about playing with your prompt than solving your actual problem (and because it's not quite as generalizable).</span>
<span class="comment-copy">nice answer +1, I didn't knew about divmod() function.</span>
<span class="comment-copy">Up-voted: I was scrolling down to see if anyone had suggested the mathematical approach, hoping someone would mention <code>divmod</code>, and you hit both points, so I didn't need to do it myself. :-) Side-note: Sadly, due to built-in lookup and function call overhead, unless <code>i</code> is <i>huge</i> (as in hundreds of bits), <code>divmod</code> never actually saves any time. But it's a nice convenience, and we're usually not too concerned with speed anyway.</span>
<span class="comment-copy">I'd edit out "a generator (think of it as a list)". It is wrong both conceptually and functionality.</span>
<span class="comment-copy">I changed for iterator (since it is python 3). Better?</span>
<span class="comment-copy">@LÃ©opoldHoudin: Nope. <code>range</code> on Python 3 is <i>iterable</i>, but it is not an <i>iterator</i>. To be slightly more precise, it's an immutable sequence.</span>
