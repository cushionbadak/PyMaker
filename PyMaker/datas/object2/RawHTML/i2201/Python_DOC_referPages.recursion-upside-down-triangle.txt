<div class="post-text" itemprop="text">
<p>I'm supposed to create a recursive statement that if first calls triangle(n) it returns </p>
<pre><code>'******\n *****\n ****\n ***\n **\n *'
</code></pre>
<p>This above is called for triangle(6) and if I print(triangle(6)) it returns below.</p>
<pre><code>******
 *****
  ****
   ***
    **
     *
</code></pre>
<p>Then I must create another code recursive_triangle(x, n) that returns a string with the LAST x lines of a right triangle of base and height n. For example if I did recursive_triangle(3, 6) it returns </p>
<pre><code>'   ***\n    **\n     *'
</code></pre>
<p>and if i print it should returns</p>
<pre><code>***
 ** 
  *
</code></pre>
<p>So far my code is</p>
<pre><code>#### DO NOT modify the triangle(n) function in any way! 
def triangle(n):
    return recursive_triangle(n, n)
###################


def recursive_triangle(k, n=0):
    '''
    Takes two integers k and n
    &gt;&gt;&gt; recursive_triangle(2,4)
    '  **\\n   *'
    &gt;&gt;&gt; print(recursive_triangle(2,4))
      **
       *
    &gt;&gt;&gt; triangle(4)
    '****\\n ***\\n  **\\n   *'
    &gt;&gt;&gt; print(triangle(4))
    ****
     ***
      **
       *
'''
    # --- YOUR CODE STARTS HERE
    if n == 1:
        return "*"


    else:
        for i in range(1, n+1):
            return ("*" *n) + "\n" + (' ' * i) + triangle (n - 1)
</code></pre>
<p>for print(triangle(4)) this is what i got </p>
<pre><code>****
 ***
 **
 *
</code></pre>
<p>How do I modify the code to get the output above?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your recursion case is ill-formed:</p>
<pre><code>else:
    for i in range(1, n+1):
        return ("*" *n) + "\n" + (' ' * i) + triangle (n - 1)
</code></pre>
<p>First of all, this code returns after a single iteration: <code>return</code> ends your function instance, so <code>i</code> never gets to a value of 2.  You need to do something simple, and then recur on a simpler case to handle the rest.</p>
<p>Next, <code>triangle</code> exists only to call <code>recursive_triangle</code>.  Then, <code>recursive_triangle</code> needs to call <em>itself</em>, not loop back to <code>triangle</code>.</p>
<p>Finally, note that <code>recursive_triangle</code> utterly ignores the parameter <code>k</code>.  This value is critical to determine where in the line to place the asterisks.</p>
<p>Each instance of <code>recursive_triangle</code> should produce a single line of the triangle -- you have that correct -- and then concatenate that line with the remainder of the triangle, returning that concatenated whole to the instance that called it.  You'll want something roughly like:</p>
<pre><code>else:
    line = ... # build a line of k-n spaces and n asterisks
    return line + recursive_triangle(k, n-1)
</code></pre>
<p>Can you take it from there?  Among other things, remember to insert a few useful <code>print</code> commands to trace your execution flow and the values you generate.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, there are better ways to achieve this.
However, if you really want to go this way, the following code can fix the spacing issues.</p>
<pre><code>#### DO NOT modify the triangle(n) function in any way! 
def triangle(n):
    return recursive_triangle(n, n)
###################


def recursive_triangle(k, n=0):
    '''
    Takes two integers k and n
    &gt;&gt;&gt; recursive_triangle(2,4)
    '  **\\n   *'
    &gt;&gt;&gt; print(recursive_triangle(2,4))
      **
       *
    &gt;&gt;&gt; triangle(4)
    '****\\n ***\\n  **\\n   *'
    &gt;&gt;&gt; print(triangle(4))
    ****
     ***
      **
       *
'''
    # --- YOUR CODE STARTS HERE
    if n == 1:
        return "*"


    else:
        for i in range(1, n+1):
            return ("*" *n) + "\n" + (' ' * i) + triangle (n - 1).replace("\n", "\n ")
</code></pre>
<p>which gives you </p>
<pre><code>****
 ***
  **
   *
</code></pre>
<p>in Python 3.6.5.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can count the row with <code>r</code> and use a secondary parameter to count the spaces, <code>s</code></p>
<pre><code>def triangle (r = 0, s = 0):
  if r is 0:
    return ""
  else:
    return (" " * s) + ("*" * r) + "\n" + triangle (r - 1, s + 1)

print (triangle(5))
# *****
#  ****
#   ***
#    **
#     *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>code.py</em>:</p>
<pre class="lang-python prettyprint-override"><code>#!/usr/bin/env python3

import sys


#### DO NOT modify the triangle(n) function in any way! 
def triangle(n):
    return recursive_triangle(n, n)
###################


def recursive_triangle(k, n=0):
    '''
    Takes two integers k and n
    &gt;&gt;&gt; recursive_triangle(2,4)
    '  **\\n   *'
    &gt;&gt;&gt; print(recursive_triangle(2,4))
      **
       *
    &gt;&gt;&gt; triangle(4)
    '****\\n ***\\n  **\\n   *'
    &gt;&gt;&gt; print(triangle(4))
    ****
     ***
      **
       *
    '''
    # --- YOUR CODE STARTS HERE

    if k == 0:
        return ""
    else:
        return "\n".join(["".join([" " * (n - k), "*" * k]), recursive_triangle(k - 1, n)])
        #return " " * (n - k) + "*" * k + "\n" + recursive_triangle(k - 1, n)


def main():
    print("triangle(6):\n{:s}".format(triangle(6)))
    print("recursive_triangle(3, 6):\n{:s}".format(recursive_triangle(3, 6)))
    print("repr recursive_triangle(2, 4): {:s}".format(repr(recursive_triangle(2, 4))))
    print("repr triangle(4): {:s}".format(repr(triangle(4))))


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>To make things simpler, you can look at <code>recursive_triangle(k, n)</code>'s argument meanings like:

<ul>
<li><em>k</em>: Recursion step, and also the number of "<strong><em>*</em></strong>" characters. Decrements with every recursive function call</li>
<li><em>n</em>: 1<sup>st</sup> (longest) triangle line length (the number of <em>SPACE</em>s + <em>k</em>). Remains constant inside recursion</li>
</ul></li>
<li>Current line contains <strong><em>n - k</em></strong> <em>SPACE</em>s followed by <strong><em>k</em></strong> "<strong><em>*</em></strong>" s (<strong><em>n</em></strong> characters in total). Lines are joined together via <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">[Python 3]: str.<strong>join</strong>(<em>iterable</em>)</a> (or "manually", in the  (next) commented line)</li>
<li>The function calls itself until there are no more <strong><em>"*"</em></strong> characters (<em>k</em> becomes <strong><em>0</em></strong>)</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>(py35x64_test) e:\Work\Dev\StackOverflow\q052652407&gt;"e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" code.py
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32

triangle(6):
******
 *****
  ****
   ***
    **
     *

recursive_triangle(3, 6):
   ***
    **
     *

repr recursive_triangle(2, 4): '  **\n   *\n'
repr triangle(4): '****\n ***\n  **\n   *\n'
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Your first two "code" boxes don't match: the string you give at the top matches your actual output, not the desired output.</span>
