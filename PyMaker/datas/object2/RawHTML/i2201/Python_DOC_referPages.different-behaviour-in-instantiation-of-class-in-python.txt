<div class="post-text" itemprop="text">
<p>Recently I have been experimenting with classes and objects &amp; got stuck in one doubt. I tried googling but I didn't understand what to search of this. Below is the code snippet.</p>
<pre><code>class Demo:
    def __init__(self):
        print("In init")

    def __call__(self,item):
        print("Got {} in call".format(item))

    def print(self):
        print("Evaluating print()")
</code></pre>
<p>Now after completing the above program I tried the following few commands as below :</p>
<pre><code>&gt;&gt;&gt;a=Demo
&gt;&gt;&gt;a.print()
Traceback (most recent call last):
  Python Shell, prompt 3, line 1
builtins.TypeError: print() missing 1 required positional argument: 'self'
&gt;&gt;&gt;a.print(a)
Evaluating print()
&gt;&gt;&gt;b=Demo()
In init
&gt;&gt;&gt;b.print()
Evaluating print()
&gt;&gt;&gt;type(a)
&lt;class 'type'&gt;
&gt;&gt;&gt;type(b)
&lt;class '__main__.Demo'&gt;
</code></pre>
<p>My Questions in this case are :<br/>
1) What is the difference between <code>a=Demo</code> and <code>b=Demo()</code> while creating objects?<br/>
2) Why <code>a.print()</code> didn't work in the first case but <code>a.print(a)</code> is working fine?<br/>
3) In this case <code>b('item')</code> will work to give output as <code>Got item on call</code> which doesn't work in case of <code>a('item')</code>. Why is it like this? <br/>
<br/></p>
<p>NOTE :: I am using Python 3.6 for this</p>
</div>
<div class="post-text" itemprop="text">
<p><code>a=Demo</code> doesn't create any objects, it merely assigns the <code>Demo</code> class object to the variable <code>a</code>.</p>
<p>You actually show this yourself:</p>
<pre><code>&gt;&gt;&gt;type(a)
&lt;class 'type'&gt;
&gt;&gt;&gt;type(b)
&lt;class '__main__.Demo'&gt;
</code></pre>
<p>In Python, classes are also objects that have the type <code>type</code>.</p>
<p>Compare what happens when you use <code>a</code> by replacing <code>a</code> with <code>Demo</code>.</p>
<p>Note, classes are first class objects, you can treat them like any other object, like a <code>list</code> or an <code>int</code>. <code>type</code> is actually just a constructor, like <code>list</code> and <code>int</code>:</p>
<pre><code>&gt;&gt;&gt; list()
[]
&gt;&gt;&gt; int()
0
&gt;&gt;&gt;
&gt;&gt;&gt; MyClass = type('MyClass', (), {})
&gt;&gt;&gt; MyClass
&lt;class '__main__.MyClass'&gt;
&gt;&gt;&gt; MyClass()
&lt;__main__.MyClass object at 0x10406fe80&gt;
&gt;&gt;&gt;
</code></pre>
<p>The type constructor takes three arguments the name of the class as a string (note, you don't <em>have</em> to assign it to the same variable name), a tuple of bases, here's it's empty so it is implicitely <code>object</code>, like if you did <code>class A: pass</code>, and the <em>namespace</em>, so a mapping from attribute names to attributes. Methods are just function objects that belong to the namespace of the class</p>
<pre><code>Init signature: type(self, /, *args, **kwargs)
Docstring:
type(object_or_name, bases, dict)
type(object) -&gt; the object's type
type(name, bases, dict) -&gt; a new type
Type:           type
</code></pre>
<p>Here's a slightly less trivial example of a class created with the <code>type</code> constructor that also has methods:</p>
<pre><code>&gt;&gt;&gt; Foo = type('Foo', (), {'__init__': lambda self, x: setattr(self, 'x', x), 'bar': lambda self: self.x})
&gt;&gt;&gt; f = Foo(42)
&gt;&gt;&gt; f.bar()
42
</code></pre>
<p>Read more in the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer">docs</a></p>
</div>
<span class="comment-copy">So it's more like creating an alias for the Demo class object..?</span>
<span class="comment-copy">@DibakarBose Yes. <i>every</i> assignment in Python is like creating an alias. Note, class objects <i>are first class citizens</i> in Python. Just like functions, they can be assigned to a variable, re-assigned to any other variable, passed as a function argument, returned from a function etc</span>
<span class="comment-copy">I see.. Now I understand.. Thank you</span>
<span class="comment-copy">@DibakarBose I updated with some more information you might find enlightening</span>
