<div class="post-text" itemprop="text">
<p>my site is up and running. However, silly me I didnt put in a validator to check if users and username can only be in lower-case (I only realised that DJANGO allowed capitalized Users and usernames). Although, I have put up a warning but users usually ignore that still write upper case letters or alteast capitalized letters in their signup forms. I then encounter the problem of slugs not working, thereafter I have to manually change their usernames. I do not want to change the behavior of slugs and instead can I please ask for help from someone in changing my views? I have tried .lower() .format() as well and it didnt work. I am very weak on validators.</p>
<p>forms.py</p>
<pre><code>from django.contrib.auth.models import User
from django import forms
from captcha.fields import CaptchaField

class SignUpForm(forms.ModelForm):

    captcha = CaptchaField()
    password = forms.CharField(max_length= 15, widget=forms.PasswordInput)

    class Meta:
           model = User
           fields = ['username', 'email', 'password']
</code></pre>
<p>Views.py</p>
<pre><code>   from django.shortcuts import render, redirect
   from django.http import HttpResponse
   from django.contrib.auth import authenticate, login
   from django.views import generic
   from django.views.generic import View
   from home.forms import SignUpForm



  class SignUpFormView(View):
form_class = SignUpForm
template_name = 'home/signup.html'

#if there is no sign up yet
def get(self,request):
    form = self.form_class(None)
    return render(request, self.template_name, {'form': form})


#if going to sig up
def post(self,request):
    form = self.form_class(request.POST)


    if form.is_valid():
        #it takes information but does save it
        user = form.save(commit = False)
        #cleaned normalized data
        username = form.cleaned_data['username']
        password = form.cleaned_data['password']
        user.set_password(password)
        user.save()




        #returns if it is all correct

        user = authenticate(username = username, password = password)

        if user is not None:

            if user.is_active:
                login(request, user)
                return redirect("userprofile:newprofile")

    return render(request, self.template_name, {'form': form})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can add a validation in the <code>SignupForm</code>:</p>
<pre><code>from django.contrib.auth.models import User
from django import forms
from captcha.fields import CaptchaField

class SignUpForm(forms.ModelForm):

    captcha = CaptchaField()
    password = forms.CharField(max_length= 15, widget=forms.PasswordInput)

    def clean_username(self):
        data = self.cleaned_data['username']
        if <b>not data.islower()</b>:
            raise forms.ValidationError("Usernames should be in lowercase")
        return data

    class Meta:
           model = User
           fields = ['username', 'email', 'password']</code></pre>
<p>So in case the <code>data.islower()</code> check fails (the <code>username</code> contains uppercase characters), it will raise a <code>ValidationError</code>, and thus the form is not valid.</p>
<p>Note that <code>islower()</code> only checks <em>case-based characters</em>, so if the string contains digits, it will still succeed. You thus might want to finetune the check. Or as specified in the <a href="https://docs.python.org/3/library/stdtypes.html#str.islower" rel="nofollow noreferrer">documentation of <strong><code>str.islower</code></strong></a>:</p>
<blockquote>
<p>Return <code>True</code> if all cased characters in the string are lowercase and
  there is at least one cased character, <code>False</code> otherwise.</p>
</blockquote>
<p>An alternative might be to convert the data to lowercase, such that a user that enters <code>'FooBar'</code> gets as username <code>foobar</code>, although this can result in the fact that users get confused that the username they picked is <em>not</em> the username they get.</p>
</div>
<div class="post-text" itemprop="text">
<p>Change <code>username = form.cleaned_data['username']</code> to <code>username = form.cleaned_data['username'].lower()</code></p>
</div>
<span class="comment-copy">django doesn't cares about case in username, user can login by entering username in lower or upper. eg <code>Username</code>, <code>username</code>, <code>USERNAME</code>, <code>UsErNaMe</code> are all same and will log in the user without any problem</span>
<span class="comment-copy">perfect Willem you are a life saver :)</span>
<span class="comment-copy">thanks I tried that but it didn't work.</span>
