<div class="post-text" itemprop="text">
<p>I have an input string which is as follows:</p>
<pre><code>input_string = [{"name":"Jason","cover":25.1},{"name":"Jake","cover":62.23},{"name":"Amy","cover":70.11}]
</code></pre>
<p>I need output string with <code>line breaks</code> and without <code>â€œ</code> and  <code>brackets</code></p>
<pre><code>output_string_1 = 
name:Jason, cover:25.1
name:Jake, cover:62.23
name:Amy, cover:70.11
</code></pre>
<p>Finally, I require output string 2 which eliminates repeating terms and has a <code>|</code> separator</p>
<pre><code>output_string_2 = 
name | cover
Jason | 25.1
Jake | 62.23
Amy | 70.11
</code></pre>
<p><code>output_string_1</code> and <code>output_string_2</code> should be of type <code>str</code></p>
<p>I would need a solution which can be done programmatically irrespective of the number of elements within the string</p>
</div>
<div class="post-text" itemprop="text">
<p>You can parse the string as json to a list of dicts:</p>
<pre><code>In [11]: lst = json.loads(input_string)

In [12]: print("name | cover")
     ...: for d in lst:
     ...:     print(d["name"], "|", d["cover"])
     ...:
name | cover
Jason | 25.1
Jake | 62.23
Amy | 70.11

# To return the string
In [13]: "\n".join(["name | cover"] + [d["name"] + " | " + str(d["cover"]) for d in lst])
Out[13]: 'name | cover\nJason | 25.1\nJake | 62.23\nAmy | 70.11'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> with <code>str.join</code>, list comprehensions and f-strings:</p>
<pre><code>from ast import literal_eval

L = literal_eval(input_string)

print('\n'.join([f'name:{d["name"]}, cover:{d["cover"]}' for d in L]))

name:Jason, cover:25.1
name:Jake, cover:62.23
name:Amy, cover:70.11

print('\n'.join(['name | cover'] + [f'{d["name"]} | {d["cover"]}' for d in L]))

name | cover
Jason | 25.1
Jake | 62.23
Amy | 70.11
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a function called ast.literal_eval(string_with_list)</p>
<p>You can input your string with your list and dictionaries and your output is the real list of dicts.</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; a = ast.literal_eval('[{"name":"Jason","cover":25.1},{"name":"Jake","cover":62.23},{"name":"Amy","cover":70.11}]')
&gt;&gt;&gt; print(a)
[{'name': 'Jason', 'cover': 25.1}, {'name': 'Jake', 'cover': 62.23}, {'name': 'Amy', 'cover': 70.11}]
</code></pre>
<p>Then you can easily...</p>
<pre><code>for y in a:
    print("name:" + y["name"] + ", cover:" + str(y["cover"]))
</code></pre>
<p>So you ready code is:</p>
<pre><code>import ast
a = ast.literal_eval('[{"name":"Jason","cover":25.1},{"name":"Jake","cover":62.23},{"name":"Amy","cover":70.11}]')
for y in a:
    # [3 STRINGS]
    print("name:" + y["name"] + ", cover:" + str(y["cover"]))
output_string_1 = "name:" + a[0]["name"] + ", cover:" + str(a[0]["cover"]) + "\nname:"+ a[1]["name"] + ", cover:" + str(a[1]["cover"]) + "\nname:"+ a[2]["name"] + ", cover:" + str(a[2]["cover"]))
output_string_2 = "name | cover\n" + a[0]["name"] + " | " + str(a[0]["cover"]) + "\n"+ a[1]["name"] + " | " + str(a[1]["cover"]) + "\n"+ a[2]["name"] + " | " + str(a[2]["cover"]))
print(output_string_1)
print(output_string_2)
</code></pre>
<p>The result:</p>
<pre><code>[3 STRINGS]
name:Jason, cover:25.1
name:Jake, cover:62.23
name:Amy, cover:70.11

[1 STRING]
name:Jason, cover:25.1
name:Jake, cover:62.23
name:Amy, cover:70.11

[1 STRING]
name | cover
Jason | 25.1
Jake | 62.23
Amy | 70.11
</code></pre>
<p>If you like my answer please vote for me!</p>
</div>
<span class="comment-copy">That looks like json... why not use json.loads?</span>
<span class="comment-copy">it is not VALID json. My input that I receive is a string as described above</span>
<span class="comment-copy">Your example is valid JSON: <a href="https://repl.it/repls/SlategrayStarchyChief" rel="nofollow noreferrer">repl.it/repls/SlategrayStarchyChief</a></span>
<span class="comment-copy">I have corrected my question. apologies. please check the input_string</span>
<span class="comment-copy">Your edit makes it look like your <code>input_string</code> isn't actually a string but a list of dictionaries.  Is that correct?</span>
<span class="comment-copy">Thanks for this. Simple and Elegant !</span>
