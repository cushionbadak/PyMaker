<div class="post-text" itemprop="text">
<p>In the <a href="https://docs.python.org/3/reference/executionmodel.html#resolution-of-names" rel="nofollow noreferrer"><em>Execution Model</em> section</a> of the Python 3.7 reference manual I read the following statement:</p>
<blockquote>
<p>The <code>global</code> statement has the same scope as a name binding operation in the same block. If the nearest enclosing scope for a free variable contains a <code>global</code> statement, the free variable is treated as a global.</p>
</blockquote>
<p>So I typed the following code into the Python Interpreter:</p>
<pre><code>x =0
def func1():
    global x
    def func2():
        x = 1
    func2()
</code></pre>
<p>After calling <code>func1()</code> I would have expected the value of <code>x</code> in the global scope to change to <code>1</code>.</p>
<p>What did I get wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>x = 1</code> in <code>func2</code> <em>is not a free variable</em>. It's just another local; you are binding to the name and names bound to are, by default, locals unless you tell Python otherwise.</p>
<p>From the <a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">same <em>Execution model</em> documentation</a>:</p>
<blockquote>
<p>If a name is bound in a block, it is a local variable of that block, unless declared as <code>nonlocal</code> or <code>global</code>. <em>[...]</em> <strong>If a variable is used in a code block but not defined there, it is a free variable.</strong></p>
</blockquote>
<p>(<em>Bold emphasis mine</em>)</p>
<p>You bound the name in the block with <code>x = 1</code>, so it is a local variable in that block, and can't be a free variable. So section you found doesn't apply, because that would only apply to free variables:</p>
<blockquote>
<p>If the nearest enclosing scope <strong>for a free variable</strong> contains a <code>global</code> statement, the free variable is treated as a global.</p>
</blockquote>
<p>You should not bind <code>x</code> in <code>func2()</code>, because only names that are <em>not</em> binding in the scope are free variables.</p>
<p>So this works:</p>
<pre><code>&gt;&gt;&gt; def func1():
...     global x
...     x = 1
...     def func2():
...         print(x)  # x is a free variable here
...     func2()
...
&gt;&gt;&gt; func1()
1
&gt;&gt;&gt; x
1
</code></pre>
<p><code>x</code> in <code>func2</code> is now a free variable; it is not defined in the scope of <code>func2</code>, so picks it up from the parent scope. The parent scope here is <code>func1</code>, but <code>x</code> is marked a global there so when <em>reading</em> <code>x</code> for the <code>print()</code> function the global value is used.</p>
<p>Contrast this with <code>x</code> not being marked as a global in <code>func1</code>:</p>
<pre><code>&gt;&gt;&gt; def func1():
...     x = 1
...     def func2():
...         print(x)  # x is free variable here, now referring to x in func1
...     func2()
...
&gt;&gt;&gt; x = 42
&gt;&gt;&gt; func1()
1
</code></pre>
<p>Here the global name <code>x</code> is set to <code>42</code>, but this doesn't affect what is printed. <code>x</code> in <code>func2</code> is a free variable, but the parent scope <code>func1</code> only has <code>x</code> as a local name.</p>
<p>It becomes all the more <em>interesting</em> when you add a new outer-most scope where <code>x</code> is <em>still local</em>:</p>
<pre><code>&gt;&gt;&gt; def outerfunc():
...     x = 0   # x is a local
...     def func1():
...         global x   # x is global in this scope and onwards
...         def func2():
...             print('func2:', x)  # x is a free variable
...         func2()
...     print('outerfunc:', x)
...     func1()
...
&gt;&gt;&gt; x = 42
&gt;&gt;&gt; outerfunc()
outerfunc: 0
func2: 42
&gt;&gt;&gt; x = 81
&gt;&gt;&gt; outerfunc()
outerfunc: 0
func2: 81
</code></pre>
<p><code>x</code> in <code>outerfunc</code> is bound, so not a free variable. It is therefore a local in that scope. However, in <code>func1</code>, the <code>global x</code> declaration marks <code>x</code> as a global in the nested scrope. In <code>func2</code> <code>x</code> is a free variable, and by the statement that you found, it is treated as a global.</p>
</div>
