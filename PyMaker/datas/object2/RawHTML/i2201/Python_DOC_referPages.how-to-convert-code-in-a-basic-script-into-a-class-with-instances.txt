<div class="post-text" itemprop="text">
<p>I have a basic Python script that I need to convert to a class and create multiple instances of that class.</p>
<p>The script has some global data holders that the functions modify. The global variables are something like this:</p>
<pre><code># a global list
list_1 = [...]
# a global dictionary
dict_1 = {...}
# a global pandas dataframe
df_1 = pd.DataFrame(...)
</code></pre>
<p>I have a single main function (that performs the most essential tasks) and lots of auxiliary functions for specific tasks that the main function calls when needed. Something like this:</p>
<pre><code># main function
def  main_def():
    global list_1, dict_1, df_1
    aux_def_1 (list_1, df_1)
    aux_def_2 (dict_1, df_1)

# auxiliary function 1
def  aux_def_1 ()
    global list_1, dict_1, df_1
    ...

# auxiliary function 2  
def  aux_def_2 ()
    global list_1, dict_1, df_1
    ...
</code></pre>
<p>I use the above script in jupyter notebook like this:</p>
<pre><code>import script as scr

scr.main_def()

scr.aux_def_1()
scr.aux_def_2()

scr.list_1
scr.dict_1
scr.df_1
</code></pre>
<p>Now I need to create multiple main fuctions like the above and the most of the global variables and the auxiliary functions will stay the same. </p>
<p>One way to do this is to create a base class defining the global variables and the auxiliary functions and after that to create instances of that class. Each instance will have a different main function.</p>
<p>What is the best way to do that with minimal changes to the existing code?</p>
<p>EDIT: Is it possible to arrange the matter as follows:</p>
<pre><code>class BaseClass:
    # BaseClass list
    list_1 = [...]
    # BaseClass dictionary
    dict_1 = {...}
    # BaseClass pandas dataframe
    df_1 = pd.DataFrame(...)

    # BaseClass auxiliary function 1
    def  aux_def_1 ()

    # BaseClass auxiliary function 2  
    def  aux_def_2 ()

class MainDef_1(BaseClass)
    def __init__(self, parameter1, parameter2, parameter3):
        self.parameter1 = parameter1
        self.parameter2 = parameter2
        self.parameter3 = parameter3

class MainDef_2(BaseClass)
    def __init__(self, parameter1, parameter3, parameter4):
        self.parameter1 = parameter1
        self.parameter3 = parameter3
        self.parameter4 = parameter4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This may be too simplistic (or I'm still not understanding the details of what you want done, but it seems like this kind of approach would work).</p>
<pre><code>class BaseClass:
    list_1 = [...]
    dict_1 = {...}
    df_1 = pd.DataFrame(...)

    def aux_def_1(self):
        pass

    def aux_def_2(self):
        pass


class MainDef_1(BaseClass)
    def __init__(self, parameter1, parameter2, parameter3):
        self.parameter1 = parameter1
        self.parameter2 = parameter2
        self.parameter3 = parameter3

    def main(self):
        # whatever this version does...for example.
        self.list_1  # Accesses attribute of base class.
        x = self.parameter1 + 42  # Accesses attribute of this class.


class MainDef_2(BaseClass)
    def __init__(self, parameter1, parameter3, parameter4):
        self.parameter1 = parameter1
        self.parameter3 = parameter3
        self.parameter4 = parameter4

    def main(self):
        # whatever this version does...for example.
        result = self.aux_def_2()  # Use method defined in base class.
        y = self.parameter4 + 13  # Accesses attribute of this class.
</code></pre>
<p>Each subclass defines its own <code>main()</code> method. In it the needed parameters can be referenced via <code>parameterN</code> as well as the data and methods of the baseclass (again, just by prefixing their names with "<code>self.</code>".</p>
</div>
<span class="comment-copy">What's wrong with just defining more <code>main_*</code> functions similar to the one you have now. Right now, you are basically treating the module as if it were the single instance of some unnamed class. What reason do you have for needing additional instances?</span>
<span class="comment-copy">Define a <code>class</code> and make the globals attributes of instances of it by assigning values to them in the new class' <code>__init__()</code> method. Then turn the auxiliary functions into class methods that operate on those attributes through their <code>self</code> argument. For example (assuming <code>dict_1</code> is now an instance attribute): <code>x = self.dict_1.get(some_dict_key)</code></span>
<span class="comment-copy">@chepner Each main_* function has like 500 lines of code and I will be writing such functions over and over again: In one year from now there might be 50 or 100 of those. Each has different inputs and most of them will need some additional global variable. Really messy stuff. I do need class and instances :)</span>
<span class="comment-copy">@martineau If I am getting you right I need to include my present globals into the class <code>__init__()</code> method. All the auxiliaries included as class methods. For the <code>main_*</code> functions I create an instance of the base class and add to the <code>__init__()</code> of the instance the needed extra attributes. Do I have to mark the methods static, abstract, etc?</span>
<span class="comment-copy">@MarinDraganov Sounds like you just need one parameterized <code>main_def</code>; defining a class by itself won't really fix this. Either you have 50 or 100 different methods in the class, or you have a parameterized method (whether it's parameterized using arguments or instance objects is a minor distinction).</span>
<span class="comment-copy">Yes, that's exactly what I need. Thanks a lot!</span>
<span class="comment-copy">Marin: That's good to hear. The core idea it to push common data and code into the base class and specialize as needed in the subclasses. Also note that you can override the base class' definition of attributes and/or methods by just defining them at the subclass level. It's even possible to do that and still reference the base class' version of the item by using the built-in <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super()</code></a> function.</span>
