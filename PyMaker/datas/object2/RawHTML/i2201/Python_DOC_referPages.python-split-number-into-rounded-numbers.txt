<div class="post-text" itemprop="text">
<p>Is there a library that can split a number into multiple parts, but makes sure all the parts are rounded numbers?</p>
<p>For example, splitting 100 into 3 would be <code>33.33</code>, but I would like it to be rounded and make sure the total sum stays as 100 also:</p>
<p><code>[34 33 33]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the builtin function <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod</code></a> for this. Since all this function does is simple arithmetic, I'm using single letter variable names.</p>
<pre><code>def parts(a, b):
    q, r = divmod(a, b)
    return [q + 1] * r + [q] * (b - r)
</code></pre>
<p>The return value is a list with the larger parts first.</p>
<pre><code>&gt;&gt;&gt; parts(100, 3)
[34, 33, 33]

&gt;&gt;&gt; parts(100, 7)
[15, 15, 14, 14, 14, 14, 14]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well I think this is what you wanted  </p>
<pre><code>number=100
div=3
#find the dividend of the number in this case 33

dividend=int(number/div)
#makea a list to store the numbers

listofrequirednumbers=[dividend]*div
#find the numbers remaining from 100 ie 100-33*3=1 one 
#one number should be added to the list 

for i in range(number%div):
    listofrequirednumbers[i]+=1

print(listofrequirednumbers)
</code></pre>
<p>Output</p>
<pre><code>[34, 33, 33]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that your inputs are integers, another approach could be the following:</p>
<pre><code>def divNum(num, parts):
    #Compute integer division
    p = num/parts

    #Check if there's a reminder
    if p*parts == num:
        #No reminder, return the integers as they are
        return [p]*parts
    else:
        #Compute how much is the reminder
        missing = num - p*parts                  
        return [p+1]*missing + [p]*(parts-missing)
</code></pre>
<p>Edit: as suggested there's no need to check if the remainder is zero or not, so my code could be simplified as:</p>
<pre><code>def divNum(num, parts):
    p = num/parts
    missing = num - p*parts                  
    return [p+1]*missing + [p]*(parts-missing)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can implement it without libraries.</p>
<p>1) If the number <code>n</code> is divided by 3, then the output would be <code>[n/3, n/3, n/3]</code></p>
<p>2) If the number <code>n = 3k + 1(k&gt;=0)</code>, then the output would be <code>[(n/3)+1, n/3, n/3]</code></p>
<p>3) Otherwise, the output would be <code>[(n/3)+1, (n/3)+1, n/3]</code></p>
</div>
<span class="comment-copy">dividing 100 by 3 would not yield 33.3 in python. if you divide integers, your returnvalue is of type integer.</span>
<span class="comment-copy">Well what I mean is that I would like something that allows me to split a number into multiple parts and make sure the total value of the parts is the same as the initial value, and the parts are rounded numbers</span>
<span class="comment-copy">great and quick answer</span>
<span class="comment-copy">Would it also be possible that the first number would always be around 40% of the initial number, and the rest of the numbers get their share of the leftover?</span>
<span class="comment-copy">This function will always return the list sorted. So you can simply reorder the output from the function.</span>
<span class="comment-copy">I mean if I would like 6 numbers and the amount is 100 and the first have to be 40%, the output would be:  40 12 12 12 12 12  so first number always 40% and the rest shared</span>
<span class="comment-copy">You just proved it's possible! Now you just write a python function to split the number in 40/60 parts, and then pass the 60% part to the function in my answer.</span>
<span class="comment-copy">Exactly what I need, thank you so much!</span>
<span class="comment-copy">@p0nts Well if you find this useful make sure to mark it as correct answer</span>
<span class="comment-copy">The <code>if</code> block is not necessary. The <code>else</code> part will give the correct return value even if <code>missing == 0</code>. For example <code>divNum(15, 3)</code> will give you <code>[] + [5,5,5] == [5,5,5]</code>.</span>
<span class="comment-copy">Good point, I'll edit my answer</span>
<span class="comment-copy">What code would you use to test for n=3k+1 ?</span>
