<div class="post-text" itemprop="text">
<p>When defining a builtin python property using the @property, how does the property object differentiates the setter from the getter method, provided that they are overloaded (have the same name)?</p>
<pre class="lang-py prettyprint-override"><code>class A:

    def __init__(self):
        self._x = 12

    @property
    def x(self) -&gt; int:
        return self._x

    @notifiable # strangely this stacks on both setter and getter
    @x.setter
    def x(self, val: int):
        self._x = val
</code></pre>
<p>If I define a custom property decorator, say:</p>
<pre class="lang-py prettyprint-override"><code>class my_property:
    def __init__(self, getter):
        print("__init__ getter %s:" % getter)

    def setter(self, setter: FunctionType):
        print("setter: %s" % setter)


class B:
    def __init__(self):
        self._val = 44

    @my_property
    def x(self):
        return self._val

    @x.setter
    def x(self, val):
        self._val = val
</code></pre>
<p>Executing the code results in the following output    </p>
<pre><code>__init__ getter &lt;function B.x at 0x7ff80c5e1620&gt;:
setter: &lt;function B.x at 0x7ff80c5e1620&gt;
</code></pre>
<p>Both the getter and the setter funtions passed to the decorator are the same funtion, but they should be different functions.</p>
<p>If I use the annotation like this:</p>
<pre class="lang-py prettyprint-override"><code>class C:
    def __init__(self):
        self._val = 44

    @my_property
    def x(self):
        return self._val

    @x.setter
    def set_x(self, val):
        self._val = val
</code></pre>
<p>A different function is printed, as expected.</p>
<pre><code>__init__ getter &lt;function C.x at 0x7f529132c6a8&gt;:
setter: &lt;function C.set_x at 0x7f529132c6a8&gt;
</code></pre>
<p>How does python solves this issue with the builtin @property? Is the decorator treated differently from user decorators ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you're seeing what you're seeing here is because you don't keep a reference to the getter anywhere. This means that once the <code>__init__</code> method ends, there's no more reference to the first B.x, (i.e. the refcount is zero), so the function is released. Since the original getter function has been released, Python is free to reuse the exact same memory address for another object/function, which is what happens in this case.</p>
<p>If you modify my_property to keep a reference to the original getter method as such:</p>
<pre><code>class my_property:
    def __init__(self, getter):
        print("__init__ getter %s:" % getter)
        self.getter = getter

    def setter(self, setter: FunctionType):
        print("setter: %s" % setter)
</code></pre>
<p>you'll see that the function name (B.x) is still the same (which is ok, as python doesn't use the function name to uniquely identify a function), however the memory address of the two functions are different:</p>
<pre><code>__init__ getter &lt;function B.x at 0x7f9870d60048&gt;
setter: &lt;function B.x at 0x7f9870d600d0&gt;
</code></pre>
<blockquote>
<p>Is the decorator treated differently from user decorators ?</p>
</blockquote>
<p>No, property just a regular decorator. However, if you want to reimplement the property decorator, you'd probably be interested in the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a> (there's a pure python reimplementation of @property in that page).</p>
</div>
<span class="comment-copy">thanks, that's exactly what I was looking for, the descriptor protocol.</span>
