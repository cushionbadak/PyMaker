<div class="post-text" itemprop="text">
<p>I'm using Python's <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> module to parse command line arguments. Consider the following simplified example,</p>
<pre><code># File test.py
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-s', action='store')
parser.add_argument('-a', action='append')
args = parser.parse_args()
print(args)
</code></pre>
<p>which can successfully be called like</p>
<pre><code>python test.py -s foo -a bar -a baz
</code></pre>
<p>A single argument is required after <code>-s</code> and after each <code>-a</code>, which may contain spaces if we use quotation. If however an argument starts with a dash (<code>-</code>) and does not contain any spaces, the code crashes:</p>
<pre><code>python test.py -s -begins-with-dash -a bar -a baz
</code></pre>
<blockquote>
<p>error: argument -s: expected one argument</p>
</blockquote>
<p>I get that it interprets <code>-begins-with-dash</code> as the beginning of a new option, which is illegal as <code>-s</code> has not yet received its required argument. It's also pretty clear though that no option with the name <code>-begins-with-dash</code> has been defined, and so it should not interpret it as an option in the first place. How can I make <code>argparse</code> accept arguments with one or more leading dashes?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can force argparse to interpret an argument as a value by including an equals sign:
<code>
python test.py -s=-begins-with-dash -a bar -a baz
Namespace(a=['bar', 'baz'], s='-begins-with-dash')
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If you are instead trying to provide multiple values to one argument:</p>
<pre><code>parser.add_argument('-a', action='append', nargs=argparse.REMAINDER)
</code></pre>
<p>will grab <em>everything</em> after <code>-a</code> on the command line and shove it in <code>a</code>.</p>
<pre><code>python test.py -toe -a bar fi -fo -fum -s fee -foo
usage: test.py [-h] [-s S] [-a ...]
test.py: error: unrecognized arguments: -toe

python test.py -a bar fi -fo -fum -s fee -foo
Namespace(a=[['bar', 'fi', '-fo', '-fum', '-s', 'fee', '-foo']], s=None)
</code></pre>
<p>Note that even though <code>-s</code> is a recognized argument, <code>argparse.REMAINDER</code> adds it to the list of args found by <code>-a</code> since it is after <code>-a</code> on the command line</p>
</div>
<span class="comment-copy">Due to the <code>argparse</code> parsing approach it is hard, if not impossible, to do this. <a href="https://bugs.python.org/issue9334" rel="nofollow noreferrer">bugs.python.org/issue9334</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/16174992/cant-get-argparse-to-read-quoted-string-with-dashes-in-it" title="cant get argparse to read quoted string with dashes in it">stackoverflow.com/questions/16174992/â€¦</a></span>
<span class="comment-copy">True, though what I really want is a solution from within the Python script, allowing it to be called like <code>-s -begins-with-dash</code>.</span>
