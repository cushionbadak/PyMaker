<div class="post-text" itemprop="text">
<p>I have a class in python for a figure with attributes name, health, strength, stealth, agility, weapons and money. There is a shop in the game I'm making to increase the value of any of the integer properties with a specific item. Each integer property can be increased by one of two different items with a different cost and buff strength. The issue I'm having is actually incrementing the attribute by the amount and saving the object.</p>
<p>Here's the code for the object:</p>
<pre><code>class Figure:
    def __init__(self, stats):
        #create figure object
        self.name = stats[0]
        self.health = int(stats[1])
        self.strength = int(stats[2])
        self.stealth = int(stats[3])
        self.agility = int(stats[4])
        self.weapons = int(stats[5])
        self.money = int(stats[6])

    def show_person(self):
        #show object attributes
        print("\n\n{}\n\nHealth: {}\nStrength: {}\nStealth: {}\nCunning: {}\nWeapons: {}\nMoney: £{}".format(self.name.title(),self.health,self.strength,self.stealth,self.cunning,self.weapons, self.money))

    def set_attr(self,attr,buff):
        #increase character attribute by a variable amount
        eval("self.{} = self.{} + {}".format(attr,attr,buff))
</code></pre>
<p>I might put <code>friend.set_attr("stealth",10)</code> to increase friend's value of stealth by 10 where friend is a variable that contains one of these Figure objects but this error is thrown:</p>
<pre><code>File Computer Science\python\oop game.py", line 21, in set_attr
  exec(eval("self.{} = self.{} + {}".format(attr,attr,buff)))
File "&lt;string&gt;", line 1
  self.agility = self.agility + 4
                 ^
SyntaxError: invalid syntax
</code></pre>
<p>And I can't work out why. </p>
</div>
<div class="post-text" itemprop="text">
<p>Assignment is a statement and cannot be used inside an <code>eval</code>, which accepts only expressions. You should use <code>exec</code> instead:</p>
<pre><code>exec("self.{} = self.{} + {}".format(attr,attr,buff))
</code></pre>
<p>But instead of <code>exec</code>, it's better to use the <code>setattr</code> function:</p>
<pre><code>setattr(self, attr, getattr(self, attr) + buff)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>exec</code> and <code>eval</code>. Use <code>getattr</code> and <code>setattr</code>:</p>
<pre><code>class Foo:
    def __init__(self):
        self.x = 0

    def set_attr(self, attr, buff):
        new_val = getattr(self, attr) + buff
        setattr(self, attr, new_val)

foo = Foo()
foo.set_attr('x', 10)
print(foo.x)
# 10
foo.set_attr('x', 11)
print(foo.x)
# 21
</code></pre>
<p>Alternatively it is possible to use <code>vars</code> to modify the attribute directly (which personally I tend to like less):</p>
<pre><code>class Foo:
    def __init__(self):
        self.x = 0

    def set_attr(self, attr, buff):
        vars(self)[attr] += buff

foo = Foo()
foo.set_attr('x', 10)
print(foo.x)
# 10
foo.set_attr('x', 11)
print(foo.x)
# 21
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to be clear: you know you could just type</p>
<pre><code>a.foo += 2
</code></pre>
<p>If yes, but you need the other method:</p>
<p>Python already has internal functions that does <em>exactly</em> what you're trying to achieve.
The methods are called <code>setattr</code> and <code>getattr</code>. Read more about them <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer">here</a>. For now, here's how you can use them:</p>
<pre><code>class A:
   b = 3

a = A()

setattr(a, 'b', 5)
print(a.b) # 5
print(getattr(a, 'b')) # 5

setattr(a, 'b', getattr(a, 'b') + 5)
print(a.b) # 10
</code></pre>
<p>So you could implement a method that increments an attribute like this:</p>
<pre><code>class A:
   def incr_attr(self, attr_name, amount):
      setattr(self, attr_name, getattr(self, attr_name) + amount)
</code></pre>
<p>Or, even more convenient:</p>
<pre><code>def incr_attrs(self, **attr_map):
    for attr_name, amount in attr_map.items():
         setattr(self, attr_name, getattr(self, attr_name) + amount)
</code></pre>
<p>So you can type</p>
<pre><code>A.incr_attr(stealth=3, money=10)
</code></pre>
</div>
<span class="comment-copy">Have you considered using a dictionary with attribute names as key instead of several variables? That way you could access the values by their names <code>self.attribs["agility"]</code> instead of using <code>eval</code>.</span>
<span class="comment-copy">Why don't you just do <code>friend.stealth = 10</code>?</span>
<span class="comment-copy">Also see <a href="https://stackoverflow.com/questions/2627002/whats-the-pythonic-way-to-use-getters-and-setters" title="whats the pythonic way to use getters and setters">stackoverflow.com/questions/2627002/…</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">"The expression argument is parsed and evaluated as a Python expression"</a></span>
<span class="comment-copy">The code in the traceback doesn't match the code in the question.</span>
