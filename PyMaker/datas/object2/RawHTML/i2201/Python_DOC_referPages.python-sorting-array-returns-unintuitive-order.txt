<div class="post-text" itemprop="text">
<p>I have the two inputs and my output</p>
<pre><code>Sorted_Array = ['Historic Rate', 'Overnight', '1M', '3M', '6M', '1Y', '2Y', '3Y', '4Y', '5Y', '6Y', '7Y', '8Y', '9Y', '10Y', '12Y', '15Y']

Input = ['6M', '2Y', '7Y', '1Y']

Output = ['7Y', '1Y', '6M', '2Y']
</code></pre>
<p>the output is unintuitive, it should be</p>
<pre><code>Actual_Output = ['6M','1Y','2Y','7Y']
</code></pre>
<p>the code I use is:</p>
<pre><code>Ouput = [x for _, x in sorted(zip(Sorted_Array,Input), key=lambda pair: pair[0])]
print(Output)
</code></pre>
<p>Can anyone see where this has gone wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are currently pairing the items of <code>Input</code> with the 4 first items of <code>Sorted_Array</code>:</p>
<pre><code>&gt;&gt;&gt; temp = list(zip(Sorted_Array, Input)))
[('Historic Rate', '6M'), ('Overnight', '2Y'), ('1M', '7Y'), ('3M', '1Y')]
</code></pre>
<p>Then you sort with a lambda function based on the first items of these tuples. Which is in the following order:</p>
<pre><code>&gt;&gt;&gt; sorted(temp, key=lambda pair: pair[0])
[('1M', '7Y'), ('3M', '1Y'), ('Historic Rate', '6M'), ('Overnight', '2Y')]
</code></pre>
<p>It should now be clear how you end up with the result you have. To sort based on the order of the elements in <code>Sorted_Array</code> can  the <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer"><code>index</code></a> function:</p>
<pre><code>&gt;&gt;&gt; sorted(Input, key=lambda item: Sorted_Array.index(item))
['6M', '1Y', '2Y', '7Y']
</code></pre>
<p>Note: the index function raises an exception if the item is not present in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sorted(zip(Sorted_Array,Input), key=lambda pair: pair[0])</code> sort the result based on the key, the first member of the pair, from which you extracted the second member</p>
<pre><code>&gt;&gt;&gt;&gt; Output = [x for x in sorted(zip(Sorted_Array,Input), key=lambda pair: pair[0])]
&gt;&gt;&gt;&gt; print(Output)
[('1M', '7Y'), ('3M', '1Y'), ('Historic Rate', '6M'), ('Overnight', '2Y')]
&gt;&gt;&gt;&gt; Output = [x for _, x in sorted(zip(Sorted_Array,Input), key=lambda pair: pair[0])]
&gt;&gt;&gt;&gt; print(Output)
['7Y', '1Y', '6M', '2Y']
</code></pre>
<p>you need to change the key to <code>pair[1]</code></p>
<pre><code>&gt;&gt;&gt;&gt; Output = [x for _, x in sorted(zip(Sorted_Array,Input), key=lambda pair: pair[1])]
&gt;&gt;&gt;&gt; print(Output)
['1Y', '2Y', '6M', '7Y']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in python 2.x:</p>
<pre><code>def dist(x,y):
     return sorted_array.index(x) - sorted_array.index(y)

output = sorted(input, cmp=dist)
</code></pre>
<p>In python 3.x:</p>
<pre><code>def func(input):
    output = input
    for i in range(len(output)):
         try:
            output[i] = sorted_array.index(output[i])
         except Exception as e:
            output[i] = len(sorted_array)+1
    return output

output = [ x for x,y in sorted((input,func(input),key = lambda k: k[1])]
</code></pre>
<p>this should work</p>
</div>
<span class="comment-copy">Why would you expect that output? I think your code is working properly....</span>
<span class="comment-copy">you are sorting your sorted list, not using it to sort the the second list</span>
<span class="comment-copy">Have you looked at what <code>zip(Sorted_Array,Input)</code> looks like ? The output is what one would expect. I don't know what you're trying to do but obviously you're doing it wrong ;-)</span>
<span class="comment-copy">you mean raises a ValueError if there is no such item present in the list.</span>
<span class="comment-copy">Thanks, I didn't realise I was doing this</span>
<span class="comment-copy">That's not the expected output, the OP says it should be <code>['6M','1Y','2Y','7Y']</code>.</span>
<span class="comment-copy">well, i'd say the OP expected it to be intuitive, which I'd argue sorted by the actual first char 1, 2, 6 7 is more intuitive than using the 2nd char M, Y, Y, Y. But my actual intention is to pointed out the usage of <code>key=lamda pair: pair[0]</code> there (in line with his question: Can anyone see where this has gone wrong?).</span>
<span class="comment-copy">What is <code>sorted_list</code> in your code?</span>
<span class="comment-copy">the sorted-array containing the order you are following to sort</span>
<span class="comment-copy">You mean what the OP called <code>Sorted_Array</code>?</span>
<span class="comment-copy">yes it is the Sorted_array of OP. i ll change it for better understanding</span>
