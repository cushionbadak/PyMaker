<div class="post-text" itemprop="text">
<p>I want to control the input of the class <code>Webpage</code>. Meaning, I want to be sure that the webpage's link is appropriately provided, e.g. <code>'http://example.com'</code>. </p>
<pre><code>class Webpage(object):
    def __init__(self, link):
        prefix = ['http', 'https']
        suffix = ['com', 'net']
        try:
            if link.split(':')[0] in prefix and link.split('.')[-1] in suffix:
                self.link = link
        except:
            raise ValueError('Invalid link') 


   def get_link(self):
        '''
        Used to safely access self.link outside of the class

        Returns: self.link
        '''
        return self.link

   def __str__(self):
        return str(self.link)  
</code></pre>
<p>However, when I try code: </p>
<pre><code>test_link = Webpage('example.com')
</code></pre>
<p>I do not get <code>ValueError</code>, as I would expect. Call of methods:</p>
<pre><code>test_link.get_link()
print(test_lint)
</code></pre>
<p>result in </p>
<pre class="lang-none prettyprint-override"><code>AttributeError: 'Webpage' object has no attribute 'link'
</code></pre>
<p>which indicates that try/except worked partially - <code>try</code> did not execute <code>self.link = link</code>, however <code>except</code> statement wasn't executed.</p>
<p>An example:</p>
<pre><code>test_link = Webpage('http://example.com')
</code></pre>
<p>works fine with <code>get_link()</code> and <code>print</code> methods of that class.</p>
<p>Will appreciate any hint.</p>
</div>
<div class="post-text" itemprop="text">
<p>Raising an expection as in your case ValueError is done in the try block and handling of the expection it is done in the except block</p>
<p>For more information please visit <a href="https://docs.python.org/3/tutorial/errors.html#raising-exceptions" rel="nofollow noreferrer" title="Raising Exceptions">Raising Expections in python</a> </p>
<pre><code>class Webpage(object):
    def __init__(self, link):
        prefix = ['http', 'https']
        suffix = ['com', 'net']
        try:
            if link.split(':')[0] in prefix and link.split('.')[-1] in suffix:

                self.link = link
            else:
                raise ValueError('Invalid link')
        except ValueError as exp:
            print("the value error is {}\nthe link specified is {} ".format(exp,link))



    def get_link(self):
        '''
        Used to safely access self.link outside of the class

        Returns: self.link
        '''
        return self.link

    def __str__(self):
        return str(self.link) 

test_link = Webpage('example.com')
</code></pre>
<p>Output</p>
<pre><code>the value error is Invalid link
the link specified is example.com
</code></pre>
<p>Hope this helps</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>str.startswith</code> and <code>str.endswith</code> and create the <code>raise</code> in else. </p>
<p><strong>Demo:</strong></p>
<pre><code>class Webpage(object):
    def __init__(self, link):
        prefix = ('http', 'https')
        suffix = ('com', 'net')
        if (link.startswith(prefix)) and (link.endswith(suffix)):
            self.link = link
        else:
            raise ValueError('Invalid link') 

    def get_link(self):
        '''
        Used to safely access self.link outside of the class

        Returns: self.link
        '''
        return self.link

    def __str__(self):
        return str(self.link)  

test_link = Webpage( 'example.com')
print(test_link.get_link())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> try:
            if link.split(':')[0] in prefix and link.split('.')[-1] in suffix:
                self.link = link
        except:
            raise ValueError('Invalid link') 
</code></pre>
<p>If you pass link <code>example.com</code>, if statement fails since it does not contain any pre mentioned prefix. Since its logically correct, it will never go down to <code>except</code> block. 
You may probably want to check if <code>self.link</code> exists inside <code>get_link</code> function </p>
</div>
<div class="post-text" itemprop="text">
<p>Try this updated code</p>
<pre><code>class Webpage(object):
    def __init__(self, link):
        prefix = ['http', 'https']
        suffix = ['com', 'net']
        if link.split(':')[0] in prefix and link.split('.')[-1] in suffix:
            self.link = link
        else:
            self.link = 'Invalid link'


    def get_link(self):
        '''
        Used to safely access self.link outside of the class

        Returns: self.link
        '''
        return self.link

    def __str__(self):
        return str(self.link)

test_link = Webpage('example.com')
test_link.get_link()
print(test_link)
</code></pre>
</div>
<span class="comment-copy">The url "example.com" doesn't pass your <code>if</code> statement: <code>if link.split(':')[0] in prefix and link.split('.')[-1] in suffix:</code>.</span>
<span class="comment-copy">Maybe what you wanted is to raise the exception in an <code>else</code> block?</span>
<span class="comment-copy">That is exactly what I wanted. Works like a charm! That ".format(exp,link)" also does the job. Many thanks, Albin Paul. M</span>
<span class="comment-copy">What's the point of the try-catch??? and raising an exception just to catch it?</span>
<span class="comment-copy">I agree there is no specfic point in this context . I just was illustrating how we can force an exception and handle it using except .</span>
<span class="comment-copy">I also thought the same, I guess this example is simply not suitable to practice on the try/except thing...</span>
<span class="comment-copy">Hey Rakesh. As below, I wanted to use "try/except" to practice that as well - I was able to do "if/else" way. However, those <code>str.startswith</code> and <code>str.endswith</code> are very nice! Thanks, M.</span>
<span class="comment-copy">Thanks Dithon for your effort. However, I wanted to use "try/except" to practice that as well - I was able to do "if/else" way. Best, M</span>
<span class="comment-copy">@mmikeel: Just change the <code>self.link = 'Invalid link'</code> to <code>raise ValueError('Invalid link')</code>. You can practice handling exceptions by putting the <code>test_link = Webpage('example.com')</code> statement inside a <code>try/except</code>.</span>
