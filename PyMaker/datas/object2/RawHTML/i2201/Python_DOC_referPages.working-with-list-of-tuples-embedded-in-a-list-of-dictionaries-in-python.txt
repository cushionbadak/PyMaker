<div class="post-text" itemprop="text">
<p>I am in a beginning coding class and I can not seem to turn the basics I'm taught into a working program with a list this complicated. What functions should I be using to do this?</p>
<p>At this point we have not discussed importing any extra features (numpy etc) and I know people use lambda a lot (though I don't really understand what it does), but that has not been introduced in this class. </p>
<pre><code>#This is an example of the structure of a student dictionary
#They have an id number
#They have a first name, last name and a list of assignments
#Assignments are tuples of an assignment name and grade
#The grade is a 4 point scale from 0 to 4
'''
student_list = [{'id': 12341, 'first_name': 'Alice', 'last_name': 'Anderson',
     'assignments': [('assignment_1', 0), ('assignment_2', 2), ('assignment_3', 4)]},

 {'id': 12342, 'first_name': 'Boris', 'last_name': 'Bank',
   'assignments': [('assignment_1', 1), ('assignment_2', 3), ('assignment_3', 0)]},

 {'id': 12343, 'first_name': 'Carl', 'last_name': 'Cape',
   'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]},

 {'id': 12344, 'first_name': 'Didi', 'last_name': 'Dawson',
   'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]},

 {'id': 12345, 'first_name': 'Ed', 'last_name': 'Enders',
   'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}]

#This function should return a list of the n student dictionaries with the
#highest grades on the assignment passed in as assignment name
#If there is a tie then it is broken by returning the student(s) with the
#lowest id number(s)
def highest_n_grades(students, assignment_name, n):
</code></pre>
<h2>Edit</h2>
<p>Sorry, I'm not trying to get an answer. I see how that looks. I feel like I've written out and deleted a million things and that's my problem. I'm having trouble even getting started.</p>
<p>I was hoping for a point in the right direction in terms of maybe what commands can grab highest grades etc. all I really have so far is something like:</p>
<pre><code>def highest_n_grades(student_list):
  for s in student_list:
    for assignment_name, grade in s['assignments']:
        if int(grade) &gt;= 4:
            print(assignment_name, grade)

highest_n_grades(student_list)
</code></pre>
<p>But I know that's not even really getting me started. It doesn't have three inputs and it's not looking for the max, it's looking for the manually entered value 4, and it's not even coming close to tying at back to student names or making another list. </p>
<h2>Edit 2</h2>
<p>Also tried that gave an error I was trying to sort the dictionary rather than the list. </p>
<pre><code>def highest_n_grades(student_list, assignment_name):
  for s in student_list:
    for assignment_name in s['assignments'][1]:
      s['assignments'][1] = assignment_name
      s.sort(key=assignment_name)
    print(student_list)

highest_n_grades(student_list, assignment_name='assignment_1' )
</code></pre>
<h2>Edit 3</h2>
<p>OK, I've maybe made a little headway? </p>
<pre><code>newlist2 = sorted(newlist, key=lambda k: k['assignments'][0], reverse = True)
newlist3 = sorted(newlist, key=lambda k: k['assignments'][1], reverse = True)
newlist4 = sorted(newlist, key=lambda k: k['assignments'][2], reverse = True)
</code></pre>
<p>These seem to be sorting by assignment. I don't understand what lambda is doing, but I at least can generate a list with the highest grade coming up first. I think that's a baby step. </p>
<h2>Edit 4</h2>
<p>Here is a function I created. It seems to get me what I want, it outputs the highest 3 students, but it prints it 5 times? and I know this isn't really flexible but it's a start. </p>
<pre><code>def highest_n_grades(student_list,  n):
  for s in student_list:
    newlist = sorted(student_list, key=lambda k: k['assignments'][0], reverse=True)
    print(newlist[:n])

highest_n_grades(student_list, 3)
</code></pre>
<p>output: </p>
<pre><code>[{'id': 12345, 'first_name': 'Ed', 'last_name': 'Enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'Didi', 'last_name': 'Dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'Carl', 'last_name': 'Cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}]
[{'id': 12345, 'first_name': 'Ed', 'last_name': 'Enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'Didi', 'last_name': 'Dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'Carl', 'last_name': 'Cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}]
[{'id': 12345, 'first_name': 'Ed', 'last_name': 'Enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'Didi', 'last_name': 'Dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'Carl', 'last_name': 'Cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}]
[{'id': 12345, 'first_name': 'Ed', 'last_name': 'Enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'Didi', 'last_name': 'Dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'Carl', 'last_name': 'Cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}]
[{'id': 12345, 'first_name': 'Ed', 'last_name': 'Enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'Didi', 'last_name': 'Dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'Carl', 'last_name': 'Cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done using <code>lambda</code> and <code>sorted</code>.  When using <code>sorted</code> with <code>lambda</code> we set first <code>key=lambda x:</code>. Now you can think of that <code>x</code> representing a list index, so to sort by <code>assignment_1</code> we are going to want to go <code>x['assignments']</code> this will take us to the assignments, then the next step, if our assignment is <code>assignment_1</code> we know that that is the <code>0</code> index of <code>assignments</code> so together it would be <code>key=lambda x: x['assignments'][0]</code>. Now we can also <code>sort</code> a secondary option and that will be our tie breaker, we will use <code>x[id]</code> and will be in a tuple with our primary sorting factor.  Of course we should use <code>reverse = True</code> to get descending scores, but since we want our tiebreaker to be in ascending order we can offset the reverse on <code>id</code> using <code>-(x['id'])</code></p>
<p>Altogether the sort looks like this :</p>
<pre><code>lista = sorted(students, key=lambda x: (x['assignments'][0], -(x['id'])), reverse = True)
</code></pre>
<p>The tricky part would be choosing the proper assignment index for the passed assignment, for that you could use <code>.split('_')[1]</code> (when using <code>.split('_')</code> on <code>'assignment_1'</code> we generate a new list that is <code>['assignemnt', '1']</code> in this case we can take now the <code>[1]</code> index of <code>.split()</code> which is <code>1</code> as an <code>int</code> and subtract 1 to get <code>0</code> which is the corresponding index, as well as for the rest being that all are off 1 from their index.</p>
<pre><code>def highest_n_grades(students, assignment_name, n):
    y = int(assignment_name.split('_')[1]) - 1
    lista = sorted(students, key=lambda x: (x['assignments'][y], 'id'), reverse = True)
    return lista [:n]   

print(highest_n_grades(student_list, 'assignment_1', 3))
# [{'id': 12345, 'first_name': 'Ed', 'last_name': 'Enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'Didi', 'last_name': 'Dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'Carl', 'last_name': 'Cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}]
</code></pre>
<p>Demonstration of tie-breaker case, using pseudo scores:</p>
<pre><code>print(highest_n_grades(student_list, 'assignment_1', 3))
# [{'id': 12344, 'first_name': 'Didi', 'last_name': 'Dawson', 'assignments': [('assignment_1', 4), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12345, 'first_name': 'Ed', 'last_name': 'Enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12342, 'first_name': 'Boris', 'last_name': 'Bank', 'assignments': [('assignment_1', 2), ('assignment_2', 3), ('assignment_3', 0)]}]
</code></pre>
<p><em>Further reading</em></p>
<p>on <code>.split()</code> </p>
<p><a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html</a></p>
<p>on using <code>sorted</code></p>
<p><a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html</a>
<a href="https://wiki.python.org/moin/HowTo/Sorting" rel="nofollow noreferrer">https://wiki.python.org/moin/HowTo/Sorting</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is a difficult assignment for a beginner's course. The difficulties are lambdas, multiple-key sorting, lists, list slices and tuples, dictionaries and even ordered versus unordered data types. I've been programming in Python for 10 years and didn't find it straightforward.</p>
<p>A lambda is a tiny function that you define on the fly. <code>sorted()</code> takes a function as its second argument. It needs to call this function for each student to generate a sort key. The sort function compares the sort keys of two students to decide which student goes first in the sort.</p>
<p>A good  place to start with lambdas is to remember that:</p>
<pre><code>id_key = lambda x: x[0]
</code></pre>
<p>is equivalent to:</p>
<pre><code>def id_key(x):
    return x[0]
</code></pre>
<p>Furthermore</p>
<pre><code>sorted(students, key=lambda x: x[0])
</code></pre>
<p>is equivalent to:</p>
<pre><code>sorted(student, key=id_key)
</code></pre>
<p>For sorting on multiple values I'd be looking at <a href="https://wiki.python.org/moin/HowTo/Sorting/" rel="nofollow noreferrer">stable sorts and their properties</a>. Stable sort algorithms are great for sorting on more than one value. Most Python sorting functions are 'stable'.</p>
<p>Here's a solution using the present structure:</p>
<pre><code>def sort_by_grade_then_id(grades):
    # sort (id, grade) tuples high grades, low ids first
    sorted_by_id = sorted(grades, key=lambda student: student[0])
    sorted_by_id_and_assignment_grade = sorted(sorted_by_id,
        key=lambda student: student[1], reverse=True)
    return sorted_by_id_and_assignment_grade


def highest_n_grades(students, assignment_name, n):
grades = []
for student in students:
    for assignment, grade in student['assignments']:
        if assignment_name == assignment:
            grades.append((student['id'], grade))
return sort_by_grade_then_id(grades)[:n]    

&gt;&gt;&gt; print(highest_n_grades(student_list, 'assignment_2', 2))
[(12343, 4), (12342, 3)]
</code></pre>
<p>But if you now want the student's name rather than his/her id, you'll have to do another serial search to get it.</p>
<p>As a different approach, the following copies the original list-based student database into a dictionary-based one.</p>
<pre><code>from copy import copy

students_dict = {student['id']: student for student in copy(student_list)}
for student in students_dict.values():
    student['assignments'] = dict(student['assignments'])
</code></pre>
<p>Listing the top grades becomes:</p>
<pre><code>def highest_n_grades_dict(students, assignment_name, n):
    grades = [
        (id, student['assignments'][assignment_name])
        for id, student
        in students.items()
    ]
    return sort_by_grade_then_id(grades)[:n]
</code></pre>
<p>It doesn't matter with just a few students, but if you had many students and many assignments, this new version would be faster. You can also use the student database to look stuff up now, rather than having to search and match.</p>
<p>As an example:</p>
<pre><code>print('Highest grades dict version...')
grades = highest_n_grades_dict(students_dict, 'assignment_2', 2)
print(grades)
print("...and dict structure easily allows us to get other student details")
names_and_grades = [
    (students_dict[id]['first_name'] + ' ' + students_dict[id]['last_name'], grade)
    for id, grade
    in grades]
print(names_and_grades)
&gt;&gt;&gt; python grades.py
Highest grades dict version...
[(12343, 4), (12342, 3)]
...and dict structure easily allows us to get other student details
[('Carl Cape', 4), ('Boris Bank', 3)]
</code></pre>
<p>Side note: if you deal with tuples a lot, you might be interested in <a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer">named tuples</a>, as they often make tuple-related code (including lambda functions) easier to read, write and understand. Have a look at my recent answer to <a href="https://stackoverflow.com/questions/32209343/sort-a-complex-python-dictionary-by-just-one-of-its-values/52637132#52637132">this question</a> for an example.</p>
</div>
<span class="comment-copy">Hi, just posting your homework task probably will not get you any help. At least show some effort and make your program so that it runs, even if it does not do anything. Then you could start looping through the data and output it, just to get started. Any tutorial on loops will do, e.g. <a href="https://www.python-course.eu/python3_for_loop.php" rel="nofollow noreferrer">python-course.eu/python3_for_loop.php</a></span>
<span class="comment-copy">What have you tried? Can you provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>? This appears to be a homework assignment, and this is not really a "here is my homework requirements, please provide a fully working example" type of site. Please post what you have tried, so we can help <b>POINT</b> you in the right direction.</span>
<span class="comment-copy">Sorry. I'm not trying to get answer. I see how that looks. I feel like I've written out and deleted a million things and that's my problem. I'm having trouble even getting started.... I was hoping for a point in the right direction in terms of maybe what commands can grab highest grades etc.  all I really have so far is something like  def highest_n_grades(student_list):   for s in student_list:     for assignment_name, grade in s['assignments']:         if int(grade) &gt;= 4:             print(assignment_name, grade)  highest_n_grades(student_list)</span>
<span class="comment-copy">Ok, a very helpful strategy would be for you to just start printing the values. for example print out <code>student_list[0]</code> then see the output of <code>student_list[0]['id']</code> then see the output of <code>student_list[0]['assignments'][0]</code> this will help you understand how to fetch data you need. and also in your loops you'd know which values you're working on</span>
<span class="comment-copy">@tsb I was suggesting sorting <code>student_list</code> which is a <code>list</code> of dictionaries. Specifically, sorting with descending order based on the assignment name that is passed in (so we would be specifying a <code>key</code> attribute in the sort function). Can you see the idea behind this approach now?</span>
<span class="comment-copy">The goal was to not completely solve it for the OP but to guide them to the solution since this is a homework problem.</span>
<span class="comment-copy">@slider yeah but also I don't think SO was made for step by step online guidance in a comment box, it was getting ridiculous the amount of comments that were leading here but unconstructed, what good is a question with a 30 comment solution</span>
<span class="comment-copy">yeah, shoot. I do appreciate this, and I see that it works, but I feel like I've lost some learning opportunity. What does the [1] in the y = int(assignment_name.split('_')[1]) - 1 do? is it saying to look for the second argument in the highest_n_grades function?</span>
<span class="comment-copy">also on that vain, do you know of a resource that would be more step by step guidance?</span>
<span class="comment-copy">@tsb I tried to be as informative as I could along the way, I didn't want to give you the answer but the only way I could explain what is going on and what you need to learn is to walk through it step by step, I added to the paragraph about <code>.split()</code> and will include some links</span>
<span class="comment-copy">Thank you! Your statements are really reaffirming. I thought this was an unreasonably complex data set for how early into this program I am... last week I wrote a program that counted numbers and added fizz to it if it was divisible by 3.... This is one of 6 functions I have to write with this data set. While the other answer works and was helpful, I think something more like what you've written might be what they are going for. Hopefully I can take this knowledge to work on my other functions</span>
<span class="comment-copy">No worries! Thinking about this problem further, my preferred method is actually to rewrite the data as dictionaries before doing any processing. My guess is it would actually be easier and faster to do that than leave the data as it is.</span>
<span class="comment-copy">added the code to rewrite student database as a dictionary.</span>
