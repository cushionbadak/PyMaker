<div class="post-text" itemprop="text">
<p>I want to generate strings with all possible combinations of two characters of a certain length. For example, if I want to generate all the strings of length 3 with characters <code>'a'</code> and <code>'b'</code> I want the next output (not in a list):</p>
<pre><code>aaa
aab
aba
baa
bbb
bba
abb
bbb
</code></pre>
<p>I had defined two functions:</p>
<pre><code>def replace(string,char):
    y = string[1] 
    for i in range(1,len(string)):
        string = string[:i].replace(y,char) + string[i:]
        print(string)

def powerset(char1,char2,longitud):
"""FUnction to get all the combinations
of two characters of a certain length """
    x = char1*longitud
    print (x)
    replace(x, char2)
    y = char2* longitud
    replace(y, char1)
    print (y)
</code></pre>
<p>If I run the code with a lenth of 3 I get only 6 of the 8 combinations:   </p>
<pre><code>powerset('a','b',3)
aaa
baa
bba
abb
aab
bbb
</code></pre>
<p>I'm still missing the <code>bab</code> and <code>aba</code> combinations. If I put 4 in my powerset function I get 8 of the 16 possible combinations. There should be an easiest way of solving the problem but I'm stuck. Do you have any idea? </p>
</div>
<div class="post-text" itemprop="text">
<p>Simple recursive <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator function</a>:</p>
<pre><code>def combos(chars, length):
  if length == 0:
    yield ''
    return
  for char in chars:
    for combo in combos(chars, length-1):
      yield char + combo

&gt;&gt;&gt; list(combos('ab', 3))
['aaa', 'aab', 'aba', 'abb', 'baa', 'bab', 'bba', 'bbb']
</code></pre>
</div>
<span class="comment-copy">You can use <code>itertools.product</code>.</span>
<span class="comment-copy">If you are going to specify "without itertools" please specify why you can't use itertools.</span>
<span class="comment-copy">If your teacher forbids you from importing itertools, you can always copy-paste the "roughly equivalent to:" code blocks from their documentation :-)</span>
<span class="comment-copy">Have you seen the example implementation in the <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> documentation?  It's not as efficient as the reference implementation, but it should produce identical results.</span>
<span class="comment-copy">The <code>return</code> statement isn't necessary.</span>
<span class="comment-copy">@chepner I think it is. Where else is the base case?</span>
<span class="comment-copy">Oops, sorry, I was seeing an <code>else</code> that isn't there.</span>
