<div class="post-text" itemprop="text">
<p>this code is repetitive so should I use a helper function for calling this function or encapsulate it?</p>
<pre><code>if exitcode==0:
   pygame.font.init()
   font = pygame.font.Font(None, 24)
   text = font.render("Accuracy: "+str(accuracy)+"%", True, (255,0,0))
   textRect = text.get_rect()
   textRect.centerx = screen.get_rect().centerx
   textRect.centery = screen.get_rect().centery+24
   screen.blit(gameover, (0,0))
   screen.blit(text, textRect)
else:
   pygame.font.init()
   font = pygame.font.Font(None, 24)
   text = font.render("Accuracy: "+str(accuracy)+"%", True, (0,255,0))
   textRect = text.get_rect()
   textRect.centerx = screen.get_rect().centerx
   textRect.centery = screen.get_rect().centery+24
   screen.blit(youwin, (0,0))
   screen.blit(text, textRect)
</code></pre>
<p>The only difference is the second last line of the if-else statement, <code>screen.blit(youwin / youlose, (0,0))</code>, and <code>text = font.render("Accuracy: "+str(accuracy)+"%", True, (0,255,0) / (255,0,0))</code></p>
<p>This is what I did using a helper function, but it wouldn't run:</p>
<pre><code>if exitcode==0:
   initialize_game()
   text = font.render("Accuracy: "+str(accuracy)+"%", True, (255,0,0))
   produce_text_on_screen()
else:
   initialize_game()
   text = font.render("Accuracy: "+str(accuracy)+"%", True, (0,255,0))
   produce_text_on_screen()

def initialize_game():
    pygame.font.init()
    font = pygame.font.Font(None, 24)

def produce_text_on_screen():
   textRect = text.get_rect()
   textRect.centerx = screen.get_rect().centerx
   textRect.centery = screen.get_rect().centery+24
   screen.blit(gameover, (0,0))
   screen.blit(text, textRect)
</code></pre>
<p>NameError: name 'initialize_game' is not defined.
Some help would be great, Thank you!!</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, order of function definitions matters.  Under the hood, <code>def</code> is just an assignment, which assigns to the function name when executed.  This means that the function definitions must come before their use:</p>
<pre><code>def initialize_game():
   pygame.font.init()
   font = pygame.font.Font(None, 24)

def produce_text_on_screen():
   textRect = text.get_rect()
   textRect.centerx = screen.get_rect().centerx
   textRect.centery = screen.get_rect().centery+24
   screen.blit(gameover, (0,0))
   screen.blit(text, textRect)

if exitcode==0:
   initialize_game()
   text = font.render("Accuracy: "+str(accuracy)+"%", True, (255,0,0))
   produce_text_on_screen()
else:
   initialize_game()
   text = font.render("Accuracy: "+str(accuracy)+"%", True, (0,255,0))
   produce_text_on_screen()
</code></pre>
<p>Or more precisely, the definitions do not always have to come first in the source code, they just have to be <em>executed</em> first, so that the name is defined when it used.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the ternary operator (<code>value1 if condition else value2</code>):</p>
<pre><code>result = gameover if exitcode == 0 else youwin
color = (255, 0, 0) if exitcode == 0 else (0, 255, 0)

pygame.font.init()
font = pygame.font.Font(None,  24)
text = font.render("Accuracy: " + str(accuracy) + "%",  True,  color)
textRect = text.get_rect()
textRect.centerx = screen.get_rect().centerx
textRect.centery = screen.get_rect().centery + 24
screen.blit(result,  (0, 0))
screen.blit(text,  textRect)
</code></pre>
<p>Of course, making a function is never a bad idea.</p>
<pre><code>def show_final_screen(result, color, accuracy):
    # ...

if exitcode == 0:
    show_final_screen(gameover, (255, 0, 0), accuracy)
else
    show_final_screen(youwin, (0, 255, 0), accuracy)
</code></pre>
</div>
<span class="comment-copy">Ah right, thank you! It's been awhile since I coded in Python. So, I'm kind of refreshing my mind on how to do this!</span>
<span class="comment-copy">This is something new to me so syntactically its the same as: if exitcode == 0 :     gameover else:     youwin   ?</span>
<span class="comment-copy">Essentially, yes. Compare: <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
