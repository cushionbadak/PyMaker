<div class="post-text" itemprop="text">
<p>I want the desired output as-</p>
<p><code>coord = 
{0: (0, 0), 1: (0, 1), 2: (0, 2), 3: (0, 3),
4: (1, 0), 5: (1, 1), 6: (1, 2),
7: (1, 3),8: (2, 0), 9: (2, 1), 10: (2, 2),
11: (2, 3),12: (3, 0), 13: (3, 1), 14: (3, 2), 15: (3, 3)}</code></p>
<p>using</p>
<pre><code>coord = {}

for i in range(0,16):

    if i &lt; 4:
        for j in range (0,4):
            coord[i] = (0,j)
    elif   i &gt; 3 and i &lt;8:
        for j in range (0,4):
            coord[i] = (1,j)
    elif i &gt; 7 and i &lt; 12:
        for j in range (0,4):
            coord[i] = (1,j)
    elif i &gt; 11 and i &lt; 16:
        for j in range (0,4):
            coord[i] = (1,j)
print (coord)
</code></pre>
<p>getting the output as
<code>{0: (0, 3), 1: (0, 3), 2: (0, 3), 3: (0, 3), 4: (1, 3), 5: (1, 3), 6: (1, 3), 7: (1, 3), 8: (1, 3), 9: (1, 3), 10: (1, 3), 11: (1, 3), 12: (1, 3), 13: (1, 3), 14: (1, 3), 15: (1, 3)}</code></p>
<p>not able to build the logic to get desired output. </p>
</div>
<div class="post-text" itemprop="text">
<p>The most straightforward way is using the nested for loop.</p>
<pre><code>k = 0
d = {}
for i in range(4):
     for j in range(4):
         d[k] = (i, j)
         k += 1
</code></pre>
<p>or, if you prefer oneliners, double comprehension</p>
<pre><code> dict( enumerate ( [ (i, j) for i in range(4) for j in range(4)] )) 
</code></pre>
<p>To have one simple for loop or comprehension we can use integer arithmetic operators // (integer division) and % remainder </p>
<pre><code> { k : (k // 4, k % 4) for k in range(16) }
</code></pre>
<p>This probably more elegant and fast</p>
</div>
<div class="post-text" itemprop="text">
<p>We can enumerate a <a href="https://en.wikipedia.org/wiki/Cartesian_product" rel="nofollow noreferrer"><em>Cartesian product</em></a> of integers with <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>.</p>
<pre><code>import itertools as it


{i: x for i, x in enumerate(it.product(range(3+1), repeat=2))}
# {0: (0, 0),
#  1: (0, 1),
#  2: (0, 2),
#  3: (0, 3),
#  ...
#  15: (3, 3)}
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html</a></span>
<span class="comment-copy">Is there any particular reason you want a dictionary here? A <code>dict</code> who's keys are all increasing integers starting at 0 is basically an inefficient <code>list</code>, unless you would like some other property of <code>dict</code> objects?</span>
<span class="comment-copy">In all four cases you have <code>coord[i] = (0, j)</code> or <code>coord[i] = (1, j)</code>. How do you expect the first item in each entry to be anything but 0 or 1?</span>
<span class="comment-copy">I know its wrong logic but I am new to python so trying to learn by experimenting.</span>
<span class="comment-copy">oh...my bad it should be 2 and 3 for the last two elif. But then also the output is wrong.</span>
<span class="comment-copy">Thanks for the correct logic</span>
