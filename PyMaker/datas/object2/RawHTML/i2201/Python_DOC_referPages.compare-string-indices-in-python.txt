<div class="post-text" itemprop="text">
<p>Coming from other languages, I know how to compare string indices to test for equality. But in Python I get the following error when trying to compare indices within a string.  </p>
<p><code>TypeError: string indices must be integers</code></p>
<p>How can the indices of a string be compared for equality?</p>
<p><strong>program.py</strong></p>
<pre><code>myString = 'aabccddde'
for i in myString:
    if myString[i] == myString[i + 1]:
        print('match')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>for</code> loops are sometimes known as "foreach" loops in other languages. You are not looping over indices, you are looping over the characters of the string. Strings are iterable and produce their characters when iterated over.</p>
<p>You may find <a href="https://stackoverflow.com/questions/14785495/how-to-change-index-of-for-loop-in-python/47532461#47532461">this answer</a> and part of <a href="https://stackoverflow.com/questions/1952464/in-python-how-do-i-determine-if-an-object-is-iterable/36407550#36407550">this answer</a> helpful to understand how exactly a <code>for</code> loop in Python works.</p>
<p>Regarding your actual problem, the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> documentation</a> has a recipe for this called <strong><code>pairwise</code></strong>. You can either copy-paste the function or import it from <a href="https://pypi.org/project/more-itertools/" rel="nofollow noreferrer"><code>more_itertools</code></a> (which needs to be installed).</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; # copy recipe from itertools docs or import from more_itertools
&gt;&gt;&gt; from more_itertools import pairwise
&gt;&gt;&gt; myString = 'aabccddde'
&gt;&gt;&gt;
&gt;&gt;&gt; for char, next_char in pairwise(myString):
...     if char == next_char:
...         print(char, next_char, 'match')
... 
a a match
c c match
d d match
d d match
</code></pre>
<p>In my opinion, we should avoid explicitly using indices when iterating whenever possible. Python has high level abstractions that allow you to not get sidetracked by the indices most of the time. In addition, lots of things are iterable and can't even be indexed into using integers. The above code works for <em>any</em> iterable being passed to <code>pairwise</code>, not just strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this phrase: </p>
<pre><code>for i in myString:
</code></pre>
<p>You are iterating over single letters. So <code>myString[i]</code> means <code>'aabccddde'["a"]</code> in the first iteration, what is of course not possible.</p>
<p>If you would like to save order of letters and letters, you may use <code>"enumerate"</code> or <code>"len"</code>:</p>
<pre><code>myString = 'aabccddde'
for i in range(len(myString)-2):
    if myString[i] == myString[i + 1]:
        print('match')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use enumerate:</p>
<pre><code>myString = 'aabccddde'
l = len(myString)
for i,j in enumerate(myString):
    if i == l-1:    # This if block will prevent the error message for last index
        break
    if myString[i] == myString[i + 1]:
        print('match')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Enumerate will help iterate over each character and the index of the character in the string:</p>
<pre><code>myString = 'aabccddde'
for idx, char in enumerate(myString, ):
    # guard against IndexError
    if idx+1 == len(myString):
        break
    if char == myString[idx + 1]:
        print('match')
</code></pre>
</div>
<span class="comment-copy">use <code>for i in range(len(myString))</code>. With your code you are accessing each character in that string and not the indices.</span>
<span class="comment-copy">You want to compare characters at adjacent indices, not the indices themselves.</span>
