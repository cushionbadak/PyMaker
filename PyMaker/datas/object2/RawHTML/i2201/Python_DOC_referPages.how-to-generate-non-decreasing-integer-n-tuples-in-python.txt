<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/34058251/number-list-with-no-repeats-and-ordered">Number list with no repeats and ordered</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>Consider the tuple <code>(x_1,x_2,...,x_n)</code> with each satisfying <code>1 &lt;= x_i &lt;= m and 
x_1 &lt;= x_2 &lt;= ... &lt;= x_n</code>. I know that in Python, I can generate all the <code>n-tuples</code> satisfying the bound <code>1 &lt;= x_i &lt;= m</code> using the following:
<code>list_of_tuples = list(product(range(1,m+1), repeat = n))</code> but this will return a list of tuples that do not satisfy the non-decreasing property of the tuple. How do I generate such sequences? </p>
<p>As an example, say that <code>n=3 and m=2</code> then</p>
<p><code>list_of_tuples = [(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2), (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]</code></p>
<p>However, we notice that <code>(1,2,1),(2,1,1),(2,1,2),(2,2,1)</code> do not obey the non-decreasing property. For instance in <code>(1,2,1)</code> we see that <code>x_2 = 2</code> is <strong>not</strong> less than or equal to <code>x_3 = 1</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer"><code>itertools.combinations_with_replacement</code></a> does the job:</p>
<pre><code>from itertools import combinations_with_replacement as cwr
for tup in cwr(range(1, m+1), n):
    do_whatever_with(tup)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>def list_of_tuples(n, m):
 return set(tuple(sorted(tup)) for tup in product(range(1,m+1), repeat = n))
</code></pre>
<p>For n=3 and m=2, it results in:</p>
<pre><code>{(1, 2, 2), (2, 2, 2), (1, 1, 1), (1, 1, 2)}
</code></pre>
<p>This is not very efficient, though, but perhaps this does not matter.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure that I got exactly what you're looking for, but perhaps this code snippet might work:</p>
<pre><code>list_of_tuples = list(product(range(1,m+1), repeat = n))
my_set = set([tuple(sorted(t)) for t in list_of_tuples])
</code></pre>
<p>Using the <code>set</code> operation you keep a single copy of each duplicate, and you're done.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code could be done pretty easily with recursion, without using <code>itertools</code>.</p>
<pre><code>def non_decreasing(n, m):
  if n==0:
    return []
  if n==1:
    return [[i] for i in range(1,m+1)]
  return [[i] + t for t in non_decreasing(n-1, m) for i in range(1,t[0]+1)]
</code></pre>
<p>Example:</p>
<pre><code>In [23]: non_decreasing(2,3)
Out[23]: [[1, 1], [1, 2], [2, 2], [1, 3], [2, 3], [3, 3]]
</code></pre>
</div>
<span class="comment-copy">Have you considered using the built-in <code>sorted</code> function to sort your list of tuples? You could use the <code>sorted</code> function to sort the tuples inside your list. Your question is unclear, so I can't help you much further. Can you provide an example of desired inout and output?</span>
<span class="comment-copy">do you need <i>all</i> of the non-decreasing tuples?</span>
<span class="comment-copy">@Joel I made an edit. Is it clear now?</span>
<span class="comment-copy">Try <code>sorted(list_of_tuples, key=lambda x: (x[0], x[1], x[2]))</code></span>
<span class="comment-copy">Are you just looking for <code>combinations_with_replacement(range(1,m+1), n)</code>?  (I'm not making this an answer because I think it might be a dupe, if so.)</span>
<span class="comment-copy">Hi, Thanks for your answer. How efficient is this method? I want to this for large values of $n.$ Do you think it is feasible to use this method?</span>
<span class="comment-copy">@SuperMario: It's going to be more feasible than filtering the <code>itertools.product</code> output, but iterating over all those tuples at all is probably infeasible no matter how you generate them.</span>
<span class="comment-copy">Actually, my goal is to test whether the sum of elements of the tuple is equal to their product, with m = 2n. So for various values of n, I have to generate non-decreasing tuples with each element ranging from 1 to 2n and then I want to iterate over them and check if the sum of elements of the tuple is equal to their product. I guess if it is efficient it will be better.</span>
