<div class="post-text" itemprop="text">
<p>Suppose I have a dictionary:</p>
<pre><code>rank_dict = {'V*': 1, 'A*': 2, 'V': 3,'A': 4}
</code></pre>
<p>As you can see, I have added a * to the end of one V. Whereas a 3 may be the value for just V, I want another key for V1, V2, V2234432, etc...I want to check it against:</p>
<pre><code>checker = 'V30'
</code></pre>
<p>and get the value. what is the correct syntax for this?</p>
<pre><code>for k, v in rank_dict.items():
    if checker == k:
        print(v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch" rel="nofollow noreferrer"><code>fnmatch.fnmatch</code></a> to match Unix shell-style wildcards:</p>
<pre><code>&gt;&gt;&gt; import fnmatch
&gt;&gt;&gt; fnmatch.fnmatch('V34', 'V*')
True
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; rank_dict = {'V*': 1, 'A*': 2, 'V': 3,'A': 4}
&gt;&gt;&gt; checker = 'V30'
&gt;&gt;&gt; for k, v in rank_dict.items():
...     if fnmatch.fnmatch(checker, k):
...         print(v)
... 
1
</code></pre>
<p>NOTE: Every lookup will have O(n) time complexity. This may become an issue with large dictionaries. Recommended only if lookup performance is not an issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would split your single dictionary into two, a regular one and a wildcard-derived one, so you can maintain O(1) lookup time complexity.</p>
<pre><code>rank_dict = {'V*': 1, 'A*': 2, 'V': 3,'A': 4}

d1 = {k: v for k, v in rank_dict.items() if not k.endswith('*')}
d2 = {k[0]: v for k, v in rank_dict.items() if k.endswith('*')}

def get_val(key, d1, d2):
    return d1.get(key, d2.get(key[0]))

get_val('V', d1, d2)    # 3
get_val('V30', d1, d2)  # 1
</code></pre>
</div>
<span class="comment-copy">'*' is simply a character. It's not a wildcard unless it's used by a command or function which treats it as a wildcard, such as <code>glob.glob()</code> or <code>fnmatch.fnmatch()</code>. But '==' on a string is merely the method <code>str.__eq__()</code>, which does not. And if you wanted to use <code>re.match/find...()</code> you'd need the wildcard to be <code>V.*</code></span>
<span class="comment-copy">There are many duplicates, such as <a href="https://stackoverflow.com/questions/15949694/unix-filename-wildcards-in-python">Unix filename wildcards in Python?</a></span>
<span class="comment-copy">@smci, In the context of dictionaries, I think my solution is valid and not possible to put on the dup, I think it should be left open as (potentially) someone might come up with a better idea.</span>
<span class="comment-copy">Wow, I like that! Super easy! Worked like a charm; thanks.</span>
<span class="comment-copy">@jpp, Thank you for comment. I added your comment to answer as NOTE.</span>
