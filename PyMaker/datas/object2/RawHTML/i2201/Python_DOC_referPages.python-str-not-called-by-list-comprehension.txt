<div class="post-text" itemprop="text">
<p>When I use list comprehension, I'm getting different results when I print a nested list of objects, compared to what happens if I just use a for loop.</p>
<pre><code>class Feature:
    def __str__(self) -&gt; str:
        return 'f'

featList = [[Feature() for j in range(3)] for i in range(10)]

[print(str(f)) for f in [r for r in featList]]

for r in featList:
    [print(str(f)) for f in r]
</code></pre>
<p>The first print gives me back stuff like:</p>
<blockquote>
<p>[&lt;<strong>main</strong>.Feature object at 0x0000026AB6371588&gt;, &lt;<strong>main</strong>.Feature
  object at 0x0000026AB63BA8D0&gt;, &lt;<strong>main</strong>.Feature object at
  0x0000026AB4966BE0&gt;]</p>
</blockquote>
<p>The second print gives me back "f" 30 times.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is how you are Iterating </p>
<pre><code>featList = [[Feature() for j in range(3)] for i in range(10)]
</code></pre>
<p>list of lists of features</p>
<pre><code>a = [f for f in [r for r in featList]]
</code></pre>
<p><code>a</code> is a list of lists of features (still)
you could do it this way</p>
<pre><code>a = [ f for r in featList for f in r]
</code></pre>
<p>an It's a list of f's, so now you can do what you wanted.</p>
<pre><code>[ print(str(f)) for r in featList for f in r]
</code></pre>
<p>If you see the last part of the List Comprehension section at <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">Python's Docs</a></p>
<p>you'll see the have the example, for a case like that (double list comprehension)</p>
<p>think of it as a regular <code>for</code></p>
<pre><code># Regular for
for a in A
   for b in A
       f(b)

# Comprehended Loop
a = ( f(b) for a in A for b in a)
</code></pre>
<p>It's pretty much the same order, except for the statement. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's work for list comprehension but you should to rewrite your list comprehension</p>
<pre><code>[print(f) for r in featList for f in r]
</code></pre>
<p>If you want to run </p>
<pre><code>[print(str(f)) for f in [r for r in featList]]
</code></pre>
<p>than you could implement <code>__repr__</code> in <code>Feature</code>:</p>
<pre><code>def __repr__(self) -&gt; str:
    return 'f'
</code></pre>
<p>Hope it will help you :)</p>
</div>
<span class="comment-copy"><code>[print(str(f)) for f in [r for r in featList]]</code> this returns the print function object into your list. That's just how it works. Though i don't know why you need to put print in your list .....</span>
<span class="comment-copy"><code>f</code> isn't iterating over each individual <code>r</code>; it's iterating over a list of <i>lists</i> of <code>r</code>s</span>
<span class="comment-copy">You're calling str on a list of objects, not on Feature. Although when converting a list to a string, it will call <b>repr</b> to get a printable version of the object. Still, you should use loops because they make sense.</span>
<span class="comment-copy">Mention of <b>repr</b> was helpful.  I tried to upvote, but not enough reputation points yet for that.</span>
