<div class="post-text" itemprop="text">
<p>Let's say I have a simple library which uses <a href="https://setuptools.readthedocs.io/en/latest/" rel="nofollow noreferrer">setuptools</a> for packaging and distributing. The library in this case also requires a minimum version of Python 3.6, meaning my setup.py would be something like as follows:</p>
<pre><code>from setuptools import setup, find_packages

setup(
    name='something',
    version='0.0.1',

    description='description',
    long_description=long_description,

    # More metadata

    packages=find_packages(exclude=['tests', 'docs']),

    python_requires='&gt;=3.6'
)
</code></pre>
<p>Now, when I run <code>python setup.py bdist_wheel</code>, I get a file named <code>something-0.0.1-py3-none-any.whl</code>. As evident here, wheel is ignoring the <code>python_requires</code> option in <code>setuptools</code> when determining the Python tag for my wheel (it should be <code>py36</code> but is the default <code>py3</code>). Obviously, I realize that I can just pass in <code>--python-tag py36</code> from the command line, which will do the job, but the continuous deployment service I am using for deploying my library only takes in the name of the distribution I am using (<code>bdist_wheel</code>). As such, I cannot pass any command line parameters.</p>
<p>After doing a bit of research, I found that I could inherit from the <code>bdist_wheel</code> class and override the <code>python_tag</code> member variable, but according to the wheel README:</p>
<blockquote>
<p>It should be noted that wheel is <strong>not</strong> intended to be used as a library, and as such there is no stable, public API.</p>
</blockquote>
<p>Because of this, I want to avoid inheriting from the <code>bdist_wheel</code> class which might force me to rewrite my class every time some breaking change occurs.</p>
<p>Is there any alternative way through setuptools which allows me to pass in the Python tag for a wheel?</p>
</div>
<div class="post-text" itemprop="text">
<p>Every command line argument for every <code>distutils</code> command can be persisted in setup config file. Create a file named <code>setup.cfg</code> in the same directory your <code>setup.py</code> resides in and store the custom <code>bdist_wheel</code> configuration in there:</p>
<pre><code># setup.cfg
[bdist_wheel]
python-tag=py36
</code></pre>
<p>Now running <code>python setup.py bdist_wheel</code> will be essentially the same as running <code>python setup.py bdist_wheel --python-tag py36</code>.</p>
<p>Relevant article in the <code>distutils</code> docs: <a href="https://docs.python.org/3/distutils/configfile.html" rel="nofollow noreferrer">Writing the Setup Configuration File</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could hack in something like</p>
<pre><code>if 'bdist_wheel' in sys.argv:
    if not any(arg.startswith('--python-tag') for arg in sys.argv):
        sys.argv.extend(['--python-tag', 'py36'])
</code></pre>
<p>but it's arguably just as brittle...</p>
</div>
<span class="comment-copy">This works! Thank you! If only it was a bit more documented...</span>
<span class="comment-copy">Glad I could help! as for the docs, I guess this should fit: <a href="https://docs.python.org/3/distutils/configfile.html" rel="nofollow noreferrer">Writing the Setup Configuration File</a> from the <code>distutils</code> docs.</span>
<span class="comment-copy">I don't think this is brittle in the terms of compatibility (since the cli argument <i>is</i> the public api). However, would this solution work if the code ran something like <code>python setup.py bdist_wheel sdist</code>?</span>
<span class="comment-copy">It's actually kind of unfortunate that this problem even exists, when wheel <i>could</i> see if <code>python_requires</code>  in <code>setup</code> is defined... sigh.</span>
