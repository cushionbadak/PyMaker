<div class="post-text" itemprop="text">
<pre><code>s = "lallalaiial" 
subs = []

for g in range(len(s)):
    for o in range(g, len(s)):
        substring = s[g:o+1]
        passable = True
        for v in range(len(substring)):
            if(substring[v] == "i"):
                passable = False
        if(passable):
            subs.append(substring)

print(subs)
</code></pre>
<p>Can I make a list comprehension for the for loops? A new value should be added to the list only after the last for loop has checked the list. I do not want to remove the last for loop - even if the same result could be achieved without it.</p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehensions are <em>all about</em> appending to the list in a for loop (creating the list at the start, returning that list as a result), but you need to convert your logic a little first.</p>
<p>A list comprehension basically is a series of nested loops and <code>if</code> filters, and a single expression that determines the values to append:</p>
<pre><code>for ... in ...:
    if ...:
        for ... in ...:
            expression_generating_value_to_append
</code></pre>
<p>with a minimum of one loop, with zero or more <code>if</code> filters and additional loops. If you can convert your code to such a structure, you can make it a list comprehension.</p>
<p>Your code isn't quite there yet, because you have</p>
<pre><code>substring = s[g:o+1]
passable = True
for char in substring:
    if char == "i":
        passable = False
if passable:
    subs.append(substring)
</code></pre>
<p>but that can easily be transformed to a simple <code>in</code> containment test:</p>
<pre><code>if "i" not in s[g:o + 1]:
    subs.append(s[g:o + 1])
</code></pre>
<p>That's basically the same thing; if the character <code>"i"</code> is not in the substring, then the substring is passable and can be appended:</p>
<p>So now you have</p>
<pre><code>subs = []

for g in range(len(s)):
    for o in range(g, len(s)):
        if "i" not in s[g:o+1]:
            subs.append(s[g:o+1])
</code></pre>
<p>which can be converted to a list comprehension; use the same loops and <code>if</code> tests, but move the part in <code>subs.append()</code> to the front; that's the part that produces each value in the output list:</p>
<pre><code>subs = [
    s[g:o+1]
    for g in range(len(s))
    for o in range(g, len(s))
    if "i" not in s[g:o+1]
]
</code></pre>
<p>or on one line:</p>
<pre><code>subs = [s[g:o+1] for g in range(len(s)) for o in range(g, len(s)) if "i" not in s[g:o+1]]
</code></pre>
<p>and this indeed produces the same output as your loop:</p>
<pre><code>&gt;&gt;&gt; s = "lallalaiial"
&gt;&gt;&gt; subs = []
&gt;&gt;&gt; for g in range(len(s)):
...     for o in range(g, len(s)):
...         substring = s[g:o+1]
...         passable = True
...         for v in range(len(substring)):
...             if(substring[v] == "i"):
...                 passable = False
...         if(passable):
...             subs.append(substring)
...
&gt;&gt;&gt; subs
['l', 'la', 'lal', 'lall', 'lalla', 'lallal', 'lallala', 'a', 'al', 'all', 'alla', 'allal', 'allala', 'l', 'll', 'lla', 'llal', 'llala', 'l', 'la', 'lal', 'lala', 'a', 'al', 'ala', 'l', 'la', 'a', 'a', 'al', 'l']
&gt;&gt;&gt; [s[g:o+1] for g in range(len(s)) for o in range(g, len(s)) if "i" not in s[g:o+1]]
['l', 'la', 'lal', 'lall', 'lalla', 'lallal', 'lallala', 'a', 'al', 'all', 'alla', 'allal', 'allala', 'l', 'll', 'lla', 'llal', 'llala', 'l', 'la', 'lal', 'lala', 'a', 'al', 'ala', 'l', 'la', 'a', 'a', 'al', 'l']
</code></pre>
<p>If you <strong>must</strong> use a <code>for</code> loop to test for the absence of <code>"i"</code>, then you can still use one with a generator expression and the <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> or <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> functions. These essentially do the same thing your loop setting a boolean in a loop when you encounter evidence that a test doesn't hold for all elements in a sequence, except the loop is cut short that point (as if you used <code>break</code> in the <code>if char == "i":</code> block:</p>
<pre><code>if not any(char == "i" for char in s[g:o+1]):
    subs.append(s[g:o+1])
</code></pre>
<p>That's a slow <code>"i" not in s[g:o+1]</code> implementation using a loop, and the full list comprehension then becomes</p>
<pre><code>subs = [
    s[g:o+1]
    for g in range(len(s))
    for o in range(g, len(s))
    if not any(char == "i" for char in s[g:o+1])
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using your <code>passable</code> flag simply to test if <code>i</code> is in the current substring, you can use the following list comprehension with a condition that does so using the <code>in</code> operator:</p>
<pre><code>[s[g:o+1] for g in range(len(s)) for o in range(g, len(s)) if 'i' not in s[g:o+1]]
</code></pre>
<p>This and your code would both output:</p>
<p><code>['l', 'la', 'lal', 'lall', 'lalla', 'lallal', 'lallala', 'a', 'al', 'all', 'alla', 'allal', 'allala', 'l', 'll', 'lla', 'llal', 'llala', 'l', 'la', 'lal', 'lala', 'a', 'al', 'ala', 'l', 'la', 'a', 'a', 'al', 'l']</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Since you want to keep the inner-most loop, you can do something like this :</p>
<pre><code>subs = [ s[g:o+1] for g in range(len(s)) for o in range(g,len(s)) if all( [s[g:o+1][v]!="i" for v in range(len(s[g:o+1]))] ) ]
</code></pre>
</div>
<span class="comment-copy">They did specifically say "I do not want to remove the last for loop - even if the same result could be achieved without it", though. I don't know why they said that, or if it'll turn out they don't actually care that much once they see this, but still.</span>
<span class="comment-copy"><i>"List comprehensions are all about appending"</i> What?! Since when? List comprehensions <i>create</i> lists, they don't <i>append</i>.</span>
<span class="comment-copy">@Aran-Fey: They create a list first, then append. That that list only lives on the stack until the comprehension is done doesn't change this implementation.</span>
<span class="comment-copy">That may be technically true, but it's still misleading. Considering how many people here try to use comprehensions for side effects (like appending to an existing list), I'd prefer if you could rephrase that first sentence.</span>
<span class="comment-copy">@Aran-Fey: their speed advantage lies in the fact that you don't need to do a <code>list.append</code> method lookup, and a dedicated <code>LIST_APPEND</code> bytecode is used, but it is really appending.</span>
<span class="comment-copy"><code>all( [s[g:o+1][v]!="i" for v in range(len(s[g:o+1]))</code> could be just <code>'i' not in s[g:o+1]</code>.</span>
<span class="comment-copy">Yes, but explicitly loops over the substring, maybe as asked by the OP.</span>
