<div class="post-text" itemprop="text">
<p>I write asynchronous telegram bot using the aiogram library. I decided to use SQLite as a database for storing immutable values. How do I implement asynchronous reads from my database?</p>
</div>
<div class="post-text" itemprop="text">
<p>A wrapper for the <code>sqlite3</code> module <a href="https://github.com/jreese/aiosqlite" rel="nofollow noreferrer">already exists</a>, and you should use it in your async code.</p>
<p>Alternatively, you can turn synchronous calls into asynchronous ones by wrapping them in <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer"><code>run_in_executor</code></a>. For example:</p>
<pre><code>async def fetchall_async(conn, query):
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        None, lambda: conn.cursor().execute(query).fetchall())
</code></pre>
<p>That gives you a coroutine you can call from your async code without worrying that a long-running execution will block the whole event loop:</p>
<pre><code>async def some_task():
    ...
    students = await fetchall_async(conn, "select * from students")
</code></pre>
<p>But it is a much better idea to leave this to a well-tested package.</p>
</div>
<span class="comment-copy">The first part of the question is clearly opinion-based, but the second (and more important) part is a useful question and can be answered. Given that the OP is a new contributor, I have elected to answer the question instead of voting to close.</span>
<span class="comment-copy">Thank you. Can I pass arguments to execute()? execute(query, (arg,)) does not work.</span>
<span class="comment-copy">@dydoser There should be no problem padsing arguments to <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute" rel="nofollow noreferrer"><code>execute</code></a>. What exactly doesn't work when doing so?</span>
<span class="comment-copy">The one mentioned already uses an executor and single threaded at that.  Is there anything closer to the metal using libuv?</span>
<span class="comment-copy">@SamanthaAtkins I don't know - perhaps you should ask a question, preferably with details why existing solutions don't satisfy your requirements.</span>
