<div class="post-text" itemprop="text">
<p>Often when I need to debug the value of a variable <strong>at runtime</strong> I use <code>print()</code>.</p>
<p>But when there are many variables, I need to identify the name of the variable along with the value.</p>
<p>This way, with several variables, <strong>print becomes more laborious</strong>:</p>
<p>    </p>
<pre><code> print ("x=", x, "y=", y, "x+y*2=", x+y*2)
</code></pre>
<p>The ideal would be a simple command, such as:</p>
<p>    </p>
<pre><code> debug (x, y, x + y * 2)
</code></pre>
<p>... which would automatically add variables as in the print above.</p>
<p>The idea would be just to have a simple and quick command to facilitate debugging since during this process it would not be nice to lose focus by building a series of commands just to debug. </p>
<p>I already use Pycharm which has an excellent debugging. The problem is that to follow the evolution of values at runtime, I have to use <code>print()</code> because the Pycharm debugger shows the values only during a <strong>breakpoint</strong>. Hence my question, if I had a facilitator, something simple?</p>
<p>Is there any simple command to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is an <a href="https://pt.stackoverflow.com/a/333454/110948">excellent solution</a> created by user @<a href="https://pt.stackoverflow.com/users/5878/anderson-carlos-woss">Anderson Carlos Woss</a>. 
Here, adapted for English:</p>
<hr/>
<blockquote>
<p>As discussed, one option for displaying variable <em>debug</em> is using the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">inspect</a> module. With the help of the <a href="https://docs.python.org/3/library/inspect.html#inspect.stack" rel="nofollow noreferrer">inspect.stack</a> function you can check the context where the function was executed and access the local and global variables in this context. So, instead of passing the variable itself to function, you can only pass its name so that the function will be in charge of accessing its value by inspection. For this example I still used the tabulate module to format the output easily and legibly.</p>
</blockquote>
<pre><code>import inspect
import tabulate


def debug(*args):

# Find the context of who called the debug function:
context = inspect.stack()[1][0]

# Results to be displayed:
result = []

# Scroll through all the variables to display:
for name in args:
    # Checks whether it is a local variable in context:
    if name in context.f_locals:
        result.append([name, context.f_locals[name]])
    # Checks whether it is a global variable in context:
    elif name in context.f_globals:
        result.append([name, context.f_globals[name]])
    # Variable not found in context:
    else:
        result.append([name, 'Not found'])

# Displays the results in tabular form:
print(tabulate.tabulate(result, headers=['Variable', 'Content']))
</code></pre>
<blockquote>
<p>An example of use would be:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; x, y, nome = 1, 2, 'Anderson Carlos Woss'
&gt;&gt;&gt; debug('x', 'y', 'nome', 'foo')

Variable    Content
----------  --------------------
x           1
y           2
nome        Anderson Carlos Woss
foo         Não encontrada
</code></pre>
<blockquote>
<p>See on <a href="https://repl.it/@acwoss/BuzzingDefensiveFreesoftware" rel="nofollow noreferrer">Repl.it</a></p>
</blockquote>
<p>Example call within a function</p>
<blockquote>
<p>Debugging a local and a global variable:</p>
</blockquote>
<pre><code>author = "Anderson Carlos Woss"

def hello(name):
    debug('name', 'author')
    print(f'Hi, {name} (by {author})')

hello('John Doe')
</code></pre>
<blockquote>
<p>See on <a href="https://repl.it/@acwoss/LegitimateExtrovertedDemoware" rel="nofollow noreferrer">Repl.it</a></p>
</blockquote>
<pre><code>Variable    Content
----------  --------------------
name        John Doe
author      Anderson Carlos Woss

Hi, John Doe (by Anderson Carlos Woss)
</code></pre>
<blockquote>
<p>However, for expression, like doing <code>x + y * 2</code> the function will not
  work. It is possible to implement the function for this, but I believe
  it will be impractical. It will be much simpler for you to assign the
  expression to another variable and pass it to the function. For
  example:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; x, y = 1, 2
&gt;&gt;&gt; x_plus_2y = x + 2*y
&gt;&gt;&gt; debug('x', 'y', 'x_plus_2y')
</code></pre>
<blockquote>
<p>Which shows:</p>
</blockquote>
<pre><code>Variable    Content
----------  -------
x                 1
y                 2
x_plus_2y         5
</code></pre>
</div>
<span class="comment-copy">I think you have to create your own library/function.</span>
<span class="comment-copy">Have you tried single-stepping in your debugger? I would expect Pycharm to show variable values at whatever point the code is paused at, rather than just breakpoints.</span>
