<div class="post-text" itemprop="text">
<p>Lets say I have a list of tuples like this:</p>
<pre><code>myList = [(1,2,3), ('a','b','c'), (4,'j',9)]
</code></pre>
<p>What I want to do is create a list that has the second and third items (but not the first) of each tuple. </p>
<pre><code>[2, 3, 'b', 'c', 'j', 9]
</code></pre>
<p>Obviously I could do it like this:</p>
<pre><code>result = []
for i in myList:
    result.append(i[1])
    result.append(i[2])
</code></pre>
<p>However, I'd like to know how to do this in a single line with list comprehension.</p>
<p>One thing I attempted to do was:</p>
<pre><code>[*(i[1],i[2]) for i in myList]
</code></pre>
<p>This however didn't work, since Python does not like unpacking in list comprehensions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Really could do it with a list comprehension:</p>
<pre><code>[item for subTuple in myList for item in subTuple[1:]]
</code></pre>
<p>Understanding:</p>
<pre><code>for subTuple in myList:        # Every tuple in the list
    for item in subTuple[1:]:  # Every item starting from index 1
        item                   # the item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use  <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable</code></a> with list-comprehension:</p>
<pre><code>from itertools import chain

myList = [(1,2,3), ('a','b','c'), (4,'j',9)]

print(list(chain.from_iterable([(y, z) for _, y, z in myList])))
# [2, 3, 'b', 'c', 'j', 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try This:</p>
<pre><code>from itertools import chain
a = [i[1:3] for i in myList]  
list(chain(*a))
</code></pre>
<p>Output:   <code>[2, 3, 'b', 'c', 'j', 9]</code></p>
</div>
<span class="comment-copy">Result should like <code>[(2, 3), ('b', 'c'), ('j', 9)]</code></span>
<span class="comment-copy">@Aran-Fey Sorry, added the expected result.</span>
