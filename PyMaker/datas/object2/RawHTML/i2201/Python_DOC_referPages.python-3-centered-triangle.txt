<div class="post-text" itemprop="text">
<p>I'm trying to hone my Python 3 (specifically, nested loops) with the good old triangle exercises (which only takes an odd input for now). However, I have come across a problem I can't warp my head around with.</p>
<pre><code>user_input = 7
x = 1
temp = user_input
spaces = " "
stars = ""
y = temp - 2
t = 0
while x &lt; temp:
    while y &gt; t:
        stars = "*" * x
        spaces = spaces * y
        print(spaces + stars)
        spaces= " "
        y -= 1
        x += 2
</code></pre>
<p>I have a <code>user_input</code> (which is 7 for now so I don't have to give an input each time I run). </p>
<p>A variable <code>x</code> and <code>t</code> used for the <code>while</code> loop</p>
<p>Another <code>temp</code>orary variable that holds my <code>user_input</code> (in case I decrement it as not to 'damage' the original variable).</p>
<p>A variable <code>spaces</code> and another variable <code>stars</code> (which should be self explanatory as I'm trying to draw a triangle based on asterisks).</p>
<p>I have a variable <code>y</code> which is equal to <code>temp - 2</code></p>
<p>Expected output of 7 should be like this:</p>
<pre><code>     *
    ***
   *****
  *******
</code></pre>
<p>The reason I have made <code>y</code> equal to <code>temp - 2</code> is because the first row has spaces equal to <code>user_input - 2</code>. </p>
<p>So let's say our input was 7, first row's amount of spaces is 5.</p>
<p>If our input is 9, first row's amount of spaces is 7</p>
<p>The first <code>while</code> loop will loop from 1 to 7 (1, 3 , 5, 7) which is why I made <code>x</code> equal to <code>1</code>.</p>
<p>The second <code>while</code> loop should loop from <code>input - 2</code> until 0.</p>
<p>Weird thing is, that if my <code>user_input</code> is equal to <code>5</code>, it outputs just how I expected it to be.</p>
<pre><code>   *
  ***
 *****
</code></pre>
<p>But once I enter something like <code>7</code>, it builds a triangle from 1 to 9 (1, 3, 5, 7, 9)</p>
<pre><code>     *
    ***
   *****
  *******
 *********
</code></pre>
<p>But I expect it to end right before the last row, it should output as many asterisks as my input. </p>
<p>Is my thought process wrong? If so, where did I end up wrong?</p>
<p>I hope I have clarified everything as much as possible.</p>
<p>Thanks a bunch.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems overly complicated. Why not just:</p>
<pre><code>input = 7
i = 1
while i &lt;= input:
    spaces = ' ' * ((input-i) // 2) 
    stars = '*' * i
    print(spaces + stars)
    i += 2 

   *
  ***
 *****
*******
</code></pre>
<p>Or even simpler, using <code>str.center</code>:</p>
<pre><code>while i &lt;= input:
    print(('*' * i).center(input))
    i += 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's clarify a bit your code a bit :</p>
<ul>
<li><code>t</code> is useless since it holds only 0 and never changes, use 0 instead</li>
<li><code>user_input</code> is never used except to make <code>temp = user_input</code>, use <code>user_input</code> instead of temp. As for decrementing it, it doesn't happen, and anyway you never return it to the user so it would be ok.</li>
<li>that's kind of a typo so it's ok, but avoid letting your debugging prints like <code>print(x,y)</code> when you show some code on Stack Overflow, it's harder for us to understand the whole code.</li>
<li>If you change back <code>spaces = " "</code> at the end of the <code>while</code>, just use <code>spaces = " " * y</code>.</li>
<li>You do nothing between the two <code>while</code> so you can "merge" them with an <code>and</code> on conditions.</li>
</ul>
<p>So now we have :</p>
<pre><code>user_input = 9
x = 1
y = user_input - 2
while x &lt; user_input and y &gt; 0:
    stars = "*" * x
    spaces = " " * y
    print(spaces + stars)
    y -= 1
    x += 2
</code></pre>
<p>As you can see, you have two stopping conditions on your <code>while</code> when only one would be clearer. The reason behind your code works with 7 and not more is because 7 is the limit between when one condition stops loop and when the other does.</p>
<p>I would suggest to change your code to :</p>
<pre><code>user_input = 3
x = 0
while x &lt; user_input//2:
    stars = "*" * (x * 2 + 1)
    spaces = " " * (user_input//2 - x)
    print(spaces + stars)
    x += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a bug in your code. Here is the rectified code.</p>
<pre><code>user_input = 7
x = 1
temp = user_input
spaces = " "
stars = ""
y = temp - 2
t = 0
while x &lt;= temp:
    stars = "*" * x
    spaces = spaces * y
    print(spaces + stars)
    spaces= " "
    y -= 1
    x += 2
</code></pre>
<p>It is not necessary to check <code>y&gt;0</code> since your first while loop is enough to meet the requirement. Because of that extra <code>while loop</code> you are getting ambiguous values of <code>(x,y)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The lazy solution using the builtin <a href="https://docs.python.org/3/library/stdtypes.html#str.center" rel="nofollow noreferrer"><code>center()</code></a> and the <a href="https://docs.python.org/3.4/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">format mini language</a>:</p>
<pre><code>user_input = [5,7,9]

def getStars(num):
    return ('*' * i for i in range(1,num+1,2))

def sol1(num):
    for s in getStars(num):
        print(s.center(num)) 

def sol2(num):
    stars = getStars(num)

    for s in stars:
        print( ("{:^"+str(num)+"}").format(s))

for s in user_input:
    sol1(s)
    sol2(s) 
</code></pre>
<p>Output:</p>
<pre><code>  *  
 *** 
*****
  *  
 *** 
*****
   *   
  ***  
 ***** 
*******
   *   
  ***  
 ***** 
*******
    *    
   ***   
  *****  
 ******* 
*********
    *    
   ***   
  *****  
 ******* 
*********
</code></pre>
</div>
<span class="comment-copy">Is your input (<code>user_input</code>) guaranteed to always be odd? If not, what should happen if it is even?</span>
<span class="comment-copy">@G_M Yes. This program is only able to take odd inputs (for now) I plan to broaden my program into taking even inputs as well once I'm done with the odd part for now. I figured that I should split the problems into "sub problems" first :)</span>
<span class="comment-copy">I'm trying to avoid ´for´ loops and functions. I'm concentrating on  nested ´while´ loops. Thank you for your answer though.</span>
<span class="comment-copy">@KoyaCho Edited my answer. Removed convenience function and changed for to while loop ;)</span>
<span class="comment-copy">May I ask why you are dividing by 2 each time in the loop? :)</span>
<span class="comment-copy">The last line contains <code>input</code> stars, and as you go up you replace stars with spaces. But you actually print only the spaces before the remaining stars, so half of them, hence the dividing by 2.</span>
<span class="comment-copy">My apologies about the typo! I have removed it as per requested. On a different note, how would you go about it using nested <code>while</code> loops?   Thanks a bunch, Baptiste!</span>
<span class="comment-copy">What do you mean by using nested while loop? The only way to use another loop here is to add a useless one, or to find a case like <code>while &lt;something working for the n first steps&gt; while &lt;something working for the other steps&gt;</code> so I do not think you should do it.</span>
<span class="comment-copy">A general rule in programming is <b>Simple is better than complicated</b> so if you can do it with only one loop instead of two, most of the time it is better to use only one. But for a more general case, sometime it is necessary to use nested loops, even if the lesser the better.</span>
<span class="comment-copy">I have already removed the <code>(x,y)</code>. My bad about that one!</span>
<span class="comment-copy">I was talking about the values of x and y which you are using to print the stars and spaces.</span>
