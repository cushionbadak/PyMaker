<div class="post-text" itemprop="text">
<p><strong>What explains the difference in behavior of boolean and bitwise operations on lists vs numpy.arrays?</strong> </p>
<p>I'm getting confused about the appropriate use of the '<code>&amp;</code>' vs '<code>and</code>' in python, illustrated in the following simple examples. </p>
<pre><code>    mylist1 = [True,  True,  True,  False,  True]
    mylist2 = [False, True, False,  True, False]  

    &gt;&gt;&gt; len(mylist1) == len(mylist2)
    True

    # ---- Example 1 ----
    &gt;&gt;&gt;mylist1 and mylist2 
    [False, True, False, True, False]
    #I am confused: I would have expected [False, True, False, False, False]

    # ---- Example 2 ----
    &gt;&gt;&gt;mylist1 &amp; mylist2 
    *** TypeError: unsupported operand type(s) for &amp;: 'list' and 'list'
    #I am confused: Why not just like example 1? 

    # ---- Example 3 ----
    &gt;&gt;&gt;import numpy as np

    &gt;&gt;&gt; np.array(mylist1) and np.array(mylist2) 
    *** ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
    #I am confused: Why not just like Example 4? 

     # ---- Example 4 ----
    &gt;&gt;&gt; np.array(mylist1) &amp; np.array(mylist2) 
    array([False,  True, False, False, False], dtype=bool)
    #This is the output I was expecting! 
</code></pre>
<p>This <a href="https://stackoverflow.com/a/6490106/2098573">answer</a>, and this <a href="https://stackoverflow.com/a/10246441/2098573">answer</a> both helped me understand that <a href="http://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not" rel="noreferrer">'and'</a> is a boolean operation but <a href="http://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="noreferrer">'&amp;'</a> is a bitwise operation. </p>
<p>I was <a href="https://wiki.python.org/moin/BitwiseOperators" rel="noreferrer">reading</a> some information to better understand the concept of <a href="https://wiki.python.org/moin/BitwiseOperators" rel="noreferrer">bitwise operations</a>, but I am struggling to use that information to make sense of  my above 4 examples. </p>
<p>Note, in my particular situation, my desired output is a newlist where:</p>
<pre><code>    len(newlist) == len(mylist1) 
    newlist[i] == (mylist1[i] and mylist2[i]) #for every element of newlist
</code></pre>
<p>Example 4, above, led me to my desired output, so that is fine. </p>
<p>But I am left feeling confused about when/how/why I should use 'and' vs '&amp;'. Why do lists and numpy arrays behave differently with these operators? </p>
<p><strong>Can anyone help me understand the difference between boolean and bitwise operations to explain why they handle lists and numpy.arrays differently?</strong> </p>
<p>I just want to make sure I continue to use these operations correctly going forward. Thanks a lot for the help!</p>
<pre><code>Numpy version 1.7.1

python 2.7

References all inline with text.
</code></pre>
<p><strong>EDITS</strong></p>
<p>1) Thanks @delnan for pointing out that in my original examples I had am ambiguity that was masking my deeper confusion. I have updated my examples to clarify my question. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>and</code> tests whether both expressions are logically <code>True</code> while <code>&amp;</code> (when used with <code>True</code>/<code>False</code> values) tests if both are <code>True</code>.</p>
<p>In Python, empty built-in objects are typically treated as logically <code>False</code> while non-empty built-ins are logically <code>True</code>. This facilitates the common use case where you want to do something if a list is empty and something else if the list is not. Note that this means that the list [False] is logically <code>True</code>:</p>
<pre><code>&gt;&gt;&gt; if [False]:
...    print 'True'
...
True
</code></pre>
<p>So in Example 1, the first list is non-empty and therefore logically <code>True</code>, so the truth value of the <code>and</code> is the same as that of the second list. (In our case, the second list is non-empty and therefore logically <code>True</code>, but identifying that would require an unnecessary step of calculation.)</p>
<p>For example 2, lists cannot meaningfully be combined in a bitwise fashion because they can contain arbitrary unlike elements. Things that can be combined bitwise include: Trues and Falses, integers.</p>
<p>NumPy objects, by contrast, support vectorized calculations. That is, they let you perform the same operations on multiple pieces of data.</p>
<p>Example 3 fails because NumPy arrays (of length &gt; 1) have no truth value as this prevents vector-based logic confusion.</p>
<p>Example 4 is simply a vectorized bit <code>and</code> operation.</p>
<p><strong>Bottom Line</strong></p>
<ul>
<li><p>If you are not dealing with arrays and are not performing math manipulations of integers, you probably want <code>and</code>.</p></li>
<li><p>If you have vectors of truth values that you wish to combine, use <code>numpy</code> with <code>&amp;</code>.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The short-circuiting boolean operators (<code>and</code>, <code>or</code>) can't be overriden because there is no satisfying way to do this without introducing new language features or sacrificing short circuiting. As you may or may not know, they evaluate the first operand for its truth value, and depending on that value, either evaluate and return the second argument, or don't evaluate the second argument and return the first:</p>
<pre><code>something_true and x -&gt; x
something_false and x -&gt; something_false
something_true or x -&gt; something_true
something_false or x -&gt; x
</code></pre>
<p>Note that the (result of evaluating the) actual operand is returned, not truth value thereof.</p>
<p>The only way to customize their behavior is to override <code>__nonzero__</code> (renamed to <code>__bool__</code> in Python 3), so you can affect which operand gets returned, but not return something different. Lists (and other collections) are defined to be "truthy" when they contain anything at all, and "falsey" when they are empty.</p>
<p>NumPy arrays reject that notion: For the use cases they aim at, two different notions of truth are common: (1) Whether any element is true, and (2) whether all elements are true. Since these two are completely (and silently) incompatible, and neither is clearly more correct or more common, NumPy refuses to guess and requires you to explicitly use <code>.any()</code> or <code>.all()</code>.</p>
<p><code>&amp;</code> and <code>|</code> (and <code>not</code>, by the way) <em>can</em> be fully overriden, as they don't short circuit. They can return anything at all when overriden, and NumPy makes good use of that to do element-wise operations, as they do with practically any other scalar operation. Lists, on the other hand, don't broadcast operations across their elements. Just as <code>mylist1 - mylist2</code> doesn't mean anything and <code>mylist1 + mylist2</code> means something completely different, there is no <code>&amp;</code> operator for lists.</p>
</div>
<div class="post-text" itemprop="text">
<h1>About <code>list</code></h1>
<p>First a very important point, from which everything will follow (I hope).</p>
<p>In ordinary Python, <code>list</code> is not special in any way (except having cute syntax for constructing, which is mostly a historical accident). Once a list <code>[3,2,6]</code> is made, it is for all intents and purposes just an ordinary Python object, like a number <code>3</code>, set <code>{3,7}</code>, or a function <code>lambda x: x+5</code>.</p>
<p>(Yes, it supports changing its elements, and it supports iteration, and many other things, but that's just what a type is: it supports some operations, while not supporting some others. int supports raising to a power, but that doesn't make it very special - it's just what an int is. lambda supports calling, but that doesn't make it very special - that's what lambda is for, after all:).</p>
<h1>About <code>and</code></h1>
<p><code>and</code> is not an operator (you can call it "operator", but you can call "for" an operator too:). Operators in Python are (implemented through) methods called on objects of some type, usually written as part of that type. There is no way for a method to hold an evaluation of some of its operands, but <code>and</code> can (and must) do that.</p>
<p>The consequence of that is that <code>and</code> cannot be overloaded, just like <code>for</code> cannot be overloaded. It is completely general, and communicates through a specified protocol. What you <em>can</em> do is customize your part of the protocol, but that doesn't mean you can alter the behavior of <code>and</code> completely. The protocol is:</p>
<p>Imagine Python interpreting "a and b" (this doesn't happen literally this way, but it helps understanding). When it comes to "and", it looks at the object it has just evaluated (a), and asks it: are you true? (<strong>NOT</strong>: are you <code>True</code>?) If you are an author of a's class, you can customize this answer. If <code>a</code> answers "no", <code>and</code> (skips b completely, it is not evaluated at all, and) says: <code>a</code> is my result (<strong>NOT</strong>: False is my result).</p>
<p>If <code>a</code> doesn't answer, <code>and</code> asks it: what is your length? (Again, you can customize this as an author of <code>a</code>'s class). If <code>a</code> answers 0, <code>and</code> does the same as above - considers it false (<strong>NOT</strong> False), skips b, and gives <code>a</code> as result.</p>
<p>If <code>a</code> answers something other than 0 to the second question ("what is your length"), or it doesn't answer at all, or it answers "yes" to the first one ("are you true"), <code>and</code> evaluates b, and says: <code>b</code> is my result. Note that it does <strong>NOT</strong> ask <code>b</code> any questions.</p>
<p>The other way to say all of this is that <code>a and b</code> is almost the same as <code>b if a else a</code>, except a is evaluated only once.</p>
<p>Now sit for a few minutes with a pen and paper, and convince yourself that when {a,b} is a subset of {True,False}, it works exactly as you would expect of Boolean operators. But I hope I have convinced you it is much more general, and as you'll see, much more useful this way.</p>
<h1>Putting those two together</h1>
<p>Now I hope you understand your example 1. <code>and</code> doesn't care if mylist1 is a number, list, lambda or an object of a class Argmhbl. It just cares about mylist1's answer to the questions of the protocol. And of course, mylist1 answers 5 to the question about length, so  and returns mylist2. And that's it. It has nothing to do with elements of mylist1 and mylist2 - they don't enter the picture anywhere.</p>
<h1>Second example: <code>&amp;</code> on <code>list</code></h1>
<p>On the other hand, <code>&amp;</code> is an operator like any other, like <code>+</code> for example. It can be defined for a type by defining a special method on that class. <code>int</code> defines it as bitwise "and", and bool defines it as logical "and", but that's just one option: for example, sets and some other objects like dict keys views define it as a set intersection. <code>list</code> just doesn't define it, probably because Guido didn't think of any obvious way of defining it.</p>
<h1>numpy</h1>
<p>On the other leg:-D, numpy arrays <em>are</em> special, or at least they are trying to be. Of course, numpy.array is just a class, it cannot override <code>and</code> in any way, so it does the next best thing: when asked "are you true", numpy.array raises a ValueError, effectively saying "please rephrase the question, my view of truth doesn't fit into your model". (Note that the ValueError message doesn't speak about <code>and</code> - because numpy.array doesn't know <em>who</em> is asking it the question; it just speaks about truth.)</p>
<p>For <code>&amp;</code>, it's completely different story. numpy.array can define it as it wishes, and it defines <code>&amp;</code> consistently with other operators: pointwise. So you finally get what you want.</p>
<p>HTH,</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Example 1:</strong></p>
<p>This is how the <a href="http://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not" rel="noreferrer">and</a> operator works. </p>
<p><em>x</em> and <em>y</em>  =&gt; 
if <em>x</em> is false, then <em>x</em>, else <em>y</em></p>
<p>So in other words, since <code>mylist1</code> is not <code>False</code>, the result of the expression is <code>mylist2</code>. (Only <a href="http://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="noreferrer">empty lists</a> evaluate to <code>False</code>.)</p>
<p><strong>Example 2:</strong></p>
<p>The <code>&amp;</code> operator is for a bitwise and, as you mention. Bitwise operations only work on numbers. The result of <em>a</em> &amp; <em>b</em> is a number composed of 1s in bits that are 1 in both <em>a</em> and <em>b</em>. For example: </p>
<pre><code>&gt;&gt;&gt; 3 &amp; 1
1
</code></pre>
<p>It's easier to see what's happening using a <a href="http://docs.python.org/2/reference/lexical_analysis.html#integer-and-long-integer-literals" rel="noreferrer">binary literal</a> (same numbers as above): </p>
<pre><code>&gt;&gt;&gt; 0b0011 &amp; 0b0001
0b0001
</code></pre>
<p>Bitwise operations are similar in concept to boolean (truth) operations, but they work only on bits. </p>
<p>So, given a couple statements about my car</p>
<ol>
<li>My car is red</li>
<li>My car has wheels</li>
</ol>
<p>The logical "and" of these two statements is: </p>
<blockquote>
<p>(is my car red?) and (does car have wheels?) =&gt; logical true of false value</p>
</blockquote>
<p>Both of which are true, for my car at least. So the value of the statement as a whole is <em>logically</em> true. </p>
<p>The bitwise "and" of these two statements is a little more nebulous:</p>
<blockquote>
<p>(the numeric value of the statement 'my car is red') &amp; (the numeric value of the statement 'my car has wheels') =&gt; number</p>
</blockquote>
<p>If python knows how to convert the statements to numeric values, then it will do so and compute the bitwise-and of the two values. This may lead you to believe that <code>&amp;</code> is interchangeable with <code>and</code>, but as with the above example they are different things. Also, for the objects that can't be converted, you'll just get a <code>TypeError</code>. </p>
<p><strong>Example 3 and 4:</strong></p>
<p>Numpy implements <a href="http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html#arithmetic-and-comparison-operations" rel="noreferrer">arithmetic operations</a> for arrays: </p>
<blockquote>
<p>Arithmetic and comparison operations on ndarrays are defined as element-wise operations, and generally yield ndarray objects as results.</p>
</blockquote>
<p>But does not implement logical operations for arrays, because you <a href="https://stackoverflow.com/a/471561/65295">can't overload logical operators in python</a>. That's why example three doesn't work, but example four does. </p>
<p>So to answer your <code>and</code> vs <code>&amp;</code> question: Use <code>and</code>. </p>
<p>The bitwise operations are used for examining the structure of a number (which bits are set, which bits aren't set). This kind of information is mostly used in low-level operating system interfaces (<a href="https://stackoverflow.com/a/1861970/65295">unix permission bits</a>, for example). Most python programs won't need to know that. </p>
<p>The logical operations (<code>and</code>, <code>or</code>, <code>not</code>), however, are used all the time. </p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>In Python an expression of <code>X and Y</code> returns <code>Y</code>, given that <code>bool(X) == True</code> or any of <code>X</code> or <code>Y</code> evaluate to False, e.g.:</p>
<pre><code>True and 20 
&gt;&gt;&gt; 20

False and 20
&gt;&gt;&gt; False

20 and []
&gt;&gt;&gt; []
</code></pre></li>
<li><p>Bitwise operator is simply not defined for lists. But it is defined for integers - operating over the binary representation of the numbers. Consider 16 (01000) and 31 (11111):</p>
<pre><code>16 &amp; 31
&gt;&gt;&gt; 16
</code></pre></li>
<li><p>NumPy is not a psychic, it does not know, whether you mean that
e.g. <code>[False, False]</code> should be equal to <code>True</code> in a logical expression. In this it overrides a standard Python behaviour, which is: "Any empty collection with <code>len(collection) == 0</code> is <code>False</code>".</p></li>
<li><p>Probably an expected behaviour of NumPy's arrays's &amp; operator. </p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>For the first example and base on the <a href="http://docs.python.org/2/library/stdtypes.html#boolean" rel="nofollow">django's doc</a><br/>
It will always return the second list, indeed a non empty list is see as a True value for Python thus python return the 'last' True value so the second list</p>
<pre><code>In [74]: mylist1 = [False]
In [75]: mylist2 = [False, True, False,  True, False]
In [76]: mylist1 and mylist2
Out[76]: [False, True, False, True, False]
In [77]: mylist2 and mylist1
Out[77]: [False]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Operations with a Python list operate on the <em>list</em>. <code>list1 and list2</code> will check if <code>list1</code> is empty, and return <code>list1</code> if it is, and <code>list2</code> if it isn't. <code>list1 + list2</code> will append <code>list2</code> to <code>list1</code>, so you get a new list with <code>len(list1) + len(list2)</code> elements. </p>
<p>Operators that only make sense when applied element-wise, such as <code>&amp;</code>, raise a <code>TypeError</code>, as element-wise operations aren't supported without looping through the elements.</p>
<p>Numpy arrays support <em>element-wise</em> operations. <code>array1 &amp; array2</code> will calculate the bitwise or for each corresponding element in <code>array1</code> and <code>array2</code>. <code>array1 + array2</code> will calculate the sum for each corresponding element in <code>array1</code> and <code>array2</code>. </p>
<p>This does not work for <code>and</code> and <code>or</code>.</p>
<p><code>array1 and array2</code> is essentially a short-hand for the following code:</p>
<pre><code>if bool(array1):
    return array2
else:
    return array1
</code></pre>
<p>For this you need a good definition of <code>bool(array1)</code>. For global operations like used on Python lists, the definition is that <code>bool(list) == True</code> if <code>list</code> is not empty, and <code>False</code> if it is empty. For numpy's element-wise operations, there is some disambiguity whether to check if any element evaluates to <code>True</code>, or all elements evaluate to <code>True</code>. Because both are arguably correct, numpy doesn't guess and raises a <code>ValueError</code> when <code>bool()</code> is (indirectly) called on an array. </p>
</div>
<span class="comment-copy">Example 1 only appears to give the correct output. It actually just returns the second list unaltered. Try some other lists, in particular anything where the second list contains a <code>True</code> in a position that's <code>False</code> in the first list: Boolean logic dictates a <code>False</code> output at that position, but you'll get a <code>True</code>.</span>
<span class="comment-copy">@delnan Thanks for noticing the ambiguity in my examples. I have updated my examples to highlight my confusion and focus on the aspect of this behavior that I do not understand. I'm clearly missing something important, because I did not expect the output of Example 1.</span>
<span class="comment-copy">In Numpy there's <code>np.bitwise_and()</code> and <code>np.logical_and()</code> and friends to avoid confusion.</span>
<span class="comment-copy">In example 1, <code>mylist1 and mylist2</code> does not output the same result as <code>mylist2 and mylist1</code>, since what is being returned is the second list as pointed out by delnan.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/3845018/python-boolean-operators-vs-bitwise-operators">Python: Boolean operators vs Bitwise operators</a></span>
<span class="comment-copy">One particularly interesting example of what this can produce is <code>[False] or [True]</code> evaluates to <code>[False]</code>, and <code>[False] and [True]</code> evaluates to <code>[True]</code>.</span>
<span class="comment-copy">Great answer, thank you!</span>
<span class="comment-copy"><code>False and 20</code> returns <code>False</code>, just to be precise..</span>
<span class="comment-copy">False and 20 returns False</span>
