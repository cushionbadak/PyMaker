<div class="post-text" itemprop="text">
<p>I read a pandas dataframe <code>df</code> from <code>.csv</code> file.
Each cell of the dataframe contains a string like the following</p>
<pre><code>for i in df.index:
    for j in df.columns:

df[i][j]
      '[0.109, 0.1455, 0.0, 1.80e-48, 42.070, -14.582]'
</code></pre>
<p>I would like to have a <code>list</code> with the values as <code>np.float</code>. I tried</p>
<pre><code> df[i][j].split()
'[0.109,',
 '0.145,',
 '0.0,',
 '1.80e-48,',
 '42.070,',
 '-14.582]']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ast.literal_eval</code> to parse the string as a list of floats:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval('[0.109, 0.1455, 0.0, 1.80e-48, 42.070, -14.582]')
[0.109, 0.1455, 0.0, 1.8e-48, 42.07, -14.582]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without exterior modules, it's pretty easy to do with a list comprehension: </p>
<pre><code>A = df[i][j]                     '[0.109, 0.1455, 0.0, 1.80e-48, 42.070, -14.582]'
B = A.strip("[]").split(",")      ['0.109', ' 0.1455', ' 0.0', ' 1.80e-48', ' 42.070', ' -14.582']
C = [float(x) for x in B]         [0.109, 0.1455, 0.0, 1.8e-48, 42.07, -14.582]
</code></pre>
<p>So the one-liner would be:</p>
<pre><code>My_list_of_floats = [float(x) for x in df[i][j].strip("[]").split(",")]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the python <code>eval()</code> function to convert the string into a python object, then turn into np.float objects:</p>
<p><code>map(np.float, eval(df[i][j]))</code></p>
<p>This makes the string into a python list first, then casts each item as a np.float.</p>
<p>Since <code>np.float == float</code>, you can skip the casting to np.float, and just do </p>
<p><code>eval(df[i][j])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>, and I recommend you <em>avoid</em> chained indexing. Instead, use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.at.html" rel="nofollow noreferrer"><code>pd.DataFrame.at</code></a> for fast scalar access. Note also to iterate columns you don't need to access <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.columns.html" rel="nofollow noreferrer"><code>pd.DataFrame.columns</code></a>:</p>
<pre><code>from ast import literal_eval

for i in df.index:
    for j in df:
        print(literal_eval(df.at[i, j]))
</code></pre>
<p>If you need to apply this for an entire series, you can use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html" rel="nofollow noreferrer"><code>pd.Series.map</code></a> or a list comprehension:</p>
<pre><code>df['col1'] = df['col1'].map(literal_eval)
df['col1'] = [literal_eval(i) for i in df['col1']]
</code></pre>
<p>If each list has the same number of items I strongly suggest you split into separate columns to permit vectorised functionality:</p>
<pre><code>df = df.join(pd.DataFrame(df.pop('col1').map(literal_eval).values.tolist()))
</code></pre>
<p>Pandas is not designed to hold lists in series and for big data workflows you will likely face efficiency and memory issues with such a data structure.</p>
</div>
<span class="comment-copy">what about <code>l = [float(x.strip(' []')) for x in s.split(',')]</code></span>
<span class="comment-copy">This has the added benefit to being easily modified in the case you run into slightly different formats such as a list of numbers enclosed with curly brackets or other small changes. It can also never be used to run malicious code.</span>
<span class="comment-copy">True, it's also easy to add support for other languages, for example if the values use a comma instead of a dot as decimal separator (add in a <code>.replace(",", ".")</code>) and semi-colons instead of commas to delimit values.</span>
<span class="comment-copy">You might want to include the <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">usual provisos</a>.</span>
