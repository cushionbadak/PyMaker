<div class="post-text" itemprop="text">
<p>I am reading about algorithms' complexity. And I have a code for which I'm suppose to tell it's number of primitive operations.</p>
<pre><code>sum_res = 0     #1
for num in num_list:  # 5 * n + 2
    sum_res += num   #  n * 1
mean = sum_res / len(num_list) # 3
</code></pre>
<p>I understand that line 1 is 1 operation. And line 3 is 1 operation but because it's been executing n times, it makes it n operations in total. And last line is 3 operations. But I don't understand why is the loop <strong>5 * n + 2</strong></p>
<p>I would really appreciate if someone could break it down for me. </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure where your instructor is getting those numbers from. If you want to see the primitive operations that the stack-based Python virtual machine executes for a piece of code you can use the <a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="nofollow noreferrer"><code>dis.dis</code></a> function. </p>
<p>From the docs:</p>
<blockquote>
<p><code>dis.dis(x=None, *, file=None, depth=None)</code></p>
<p>Disassemble the <code>x</code> object. <code>x</code> can denote either a module, a class, a
  method, a function, a generator, an asynchronous generator, a
  coroutine, a code object, a string of source code or a byte sequence
  of raw bytecode. For a module, it disassembles all functions. For a
  class, it disassembles all methods (including class and static
  methods). For a code object or sequence of raw bytecode, it prints one
  line per bytecode instruction. It also recursively disassembles nested
  code objects (the code of comprehensions, generator expressions and
  nested functions, and the code used for building nested classes).
  Strings are first compiled to code objects with the <code>compile()</code> built-in
  function before being disassembled. If no object is provided, this
  function disassembles the last traceback.</p>
</blockquote>
<p>We can put your code into a string and pass it to <code>dis.dis</code> like this:</p>
<pre><code>from dis import dis

src = '''\
sum_res = 0
for num in num_list:
    sum_res += num
mean = sum_res / len(num_list)
'''
dis(src)
</code></pre>
<p><strong>output</strong></p>
<pre><code>  1           0 LOAD_CONST               0 (0)
              2 STORE_NAME               0 (sum_res)

  2           4 SETUP_LOOP              20 (to 26)
              6 LOAD_NAME                1 (num_list)
              8 GET_ITER
        &gt;&gt;   10 FOR_ITER                12 (to 24)
             12 STORE_NAME               2 (num)

  3          14 LOAD_NAME                0 (sum_res)
             16 LOAD_NAME                2 (num)
             18 INPLACE_ADD
             20 STORE_NAME               0 (sum_res)
             22 JUMP_ABSOLUTE           10
        &gt;&gt;   24 POP_BLOCK

  4     &gt;&gt;   26 LOAD_NAME                0 (sum_res)
             28 LOAD_NAME                3 (len)
             30 LOAD_NAME                1 (num_list)
             32 CALL_FUNCTION            1
             34 BINARY_TRUE_DIVIDE
             36 STORE_NAME               4 (mean)
             38 LOAD_CONST               1 (None)
             40 RETURN_VALUE
</code></pre>
<p>Hopefully, you can roughly follow what's going on there, but please see the <code>dis</code> docs for the meanings of the various instructions.</p>
</div>
<span class="comment-copy">Who told you that the loop is <code>5*n + 2</code> operations? I need some source.</span>
<span class="comment-copy">My instructor did. I don't have a source exactly. It's from his lectures.</span>
<span class="comment-copy">The exact formula is hardly relevant. The key point is that it's O(n).</span>
<span class="comment-copy">I understand it's O(n) but why is loop 5n+2. How do you calculate the number of primitive steps for a for-loop?</span>
<span class="comment-copy">Maybe there's some info missing in your slides, or you have posted an incomplete question. Python (usually loops in all languages), run for as long as the condition to run the loop remains true (something like, O(untilConditionTrue)).</span>
