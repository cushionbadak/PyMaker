<div class="post-text" itemprop="text">
<p>suppose we have two <code>python</code> programs. <code>calculate.py</code> and <code>show_results.py</code>.</p>
<p>When <code>calculate.py</code> program runs on terminal, it returns a variable (let's say a list called <code>result</code>) to the computer memory. And when we run <code>show_results.py</code> on terminal, it prints the <code>result</code> from the programs before.</p>
<p>Suppose the result of the <code>calculate.py</code> is a list A = [83, 22]. So it will be like below on terminal:</p>
<pre><code>$:~ python3 calculate.py
-------Calculation Done--------
$:~ python3 show_results.py
83, 22
</code></pre>
<p>Any suggestions ? </p>
<p>Any response will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>As @blue_note suggests, it will not possible from kernal level. 
1) You can store first script result into filesystem/database to retrieve later.
2) You can write a program which will handle all these functionality in one python script if you run it together. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can store that data in a .json file. For that, you can use the json library:</p>
<pre><code>import json
with open('data.json', 'w') as outfile:
   json.dump(data, outfile)
</code></pre>
<p>And, read it from show_results.py file:</p>
<pre><code>import json

with open('data.json') as f:
    data = json.load(f)
</code></pre>
<p>Here you have the documentation about Json Python library:
<a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">https://docs.python.org/3/library/json.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do that. And there's no way around it, it's not in python's hands, the operating system decides. When you run <code>python my_script.py</code>, you create a process. The process has its own memory space, as long as it runs. When the program terminates, this memory is cleared. When you run the second script, the execution of the first script has never happened, as far as the OS is concerned.</p>
<p>You <em>could</em> get around it with keeping the first process running and using some interprocess communication method. But it's difficult and has no real benefits. Just create as script that gets the results from the first script and passes them to the second script, if you just want one-off results. Or, store to a file or database, if you care about the result long-term.</p>
</div>
<span class="comment-copy">you could write it to a file</span>
<span class="comment-copy">Two different calls to python don't share the same memory. Try to write the result to a file or db. If you need it in memory, have a look at memory mapped files or tempfs.</span>
