<div class="post-text" itemprop="text">
<p>I was previously using the <code>threading.Thread</code> module. Now I'm using <code>concurrent.futures</code> -&gt; <code>ThreadPoolExecutor</code>. Previously, I was using the following code to exit/kill/finish a thread:</p>
<pre><code>def terminate_thread(thread):
    """Terminates a python thread from another thread.

    :param thread: a threading.Thread instance
    """
    if not thread.isAlive():
        return

    exc = ctypes.py_object(SystemExit)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(
        ctypes.c_long(thread.ident), exc)
    if res == 0:
        raise ValueError("nonexistent thread id")
    elif res &gt; 1:
        # """if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect"""
        ctypes.pythonapi.PyThreadState_SetAsyncExc(thread.ident, None)
        raise SystemError("PyThreadState_SetAsyncExc failed")
</code></pre>
<p>This doesn't appear to be working with futures interface. What's the best practice here? Just <code>return</code>? My threads are controlling Selenium instances. I need to make sure that when I kill a thread, the Selenium instance is torn down.</p>
<p>Edit: I had already seen the post that is referenced as duplicate. It's insufficient because when you venture into something like futures, behaviors can be radically different. In the case of the previous threading module, my <code>terminate_thread</code> function is acceptable and not applicable to the criticism of the other q/a. It's not the same as "killing". Please take a look at the code I posted to see that.</p>
<p>I don't want to kill. I want to check if its still alive and gracefully exit the thread in the most proper way. How to do with futures?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about <code>.cancel()</code> on the thread result?</p>
<blockquote>
<p>cancel() Attempt to cancel the call. If the call is currently being
  executed and cannot be cancelled then the method will return False,
  otherwise the call will be cancelled and the method will return True.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to let the threads finish their current work use:</p>
<pre><code>thread_executor.shutdown(wait=True)
</code></pre>
<p>If you want to bash the current futures being run on the head and stop all ...future...(heh) futures use:</p>
<pre><code>thread_executor.shutdown(wait=False)
for t in thread_executor._threads:
    terminate_thread(t)
</code></pre>
<p>This uses your terminate_thread function to call an exception in the threads in the thread pool executor. Those futures that were disrupted will return with the exception set.</p>
</div>
<span class="comment-copy">someone pls upvote against whoever did that. I've searched around and can't find an example. It's not uncommon or unreasonable to want to kill a thread.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread-in-python">Is there any way to kill a Thread in Python?</a></span>
<span class="comment-copy">it looks like that was copied from <a href="https://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread-in-python" title="is there any way to kill a thread in python">stackoverflow.com/questions/323972/â€¦</a>  did you also implement the <code>StoppableThread</code>?</span>
<span class="comment-copy">question edited</span>
<span class="comment-copy">I see one problem with it. Before I was storing my threads in a list. Now I'm not. Maybe I can store the futures too and pass them in.</span>
<span class="comment-copy">You would need to cancel every future and any future that is currently running isn't guaranteed to be stopped by <code>.cancel()</code></span>
