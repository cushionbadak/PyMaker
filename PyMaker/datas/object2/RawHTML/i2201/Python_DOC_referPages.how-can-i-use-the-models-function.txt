<div class="post-text" itemprop="text">
<p>I have a <code>TypeModel</code> model, and in it there is a :</p>
<pre><code>class TypeModel(models.Model):
    name = models.CharField(max_length=22)
    type = models.CharField(max_length=12)
    ch = models.CharField(max_length=44, null=True)

    def print(self, name, type):
        t = TypeModel.objects.create(name=name, type=type)
        print('success - ' + t.name)
</code></pre>
<p>I want to invoke the <code>print</code> method like this:</p>
<pre><code>class TypeModelCreateAPIView(APIView):
    permission_classes = [AllowAny]
    def post(self, request):

        TypeModel.print() # Can I invoke like this
        return Response(status=HTTP_200_OK, data='')
</code></pre>
<p>Whether I can invoke the function of model like this? if not, how to realize the Class method of model?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this can be done with the <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer">staticmethod annotation</a></p>
<pre><code>class TypeModel(models.Model):
    name = models.CharField(max_length=22)
    type = models.CharField(max_length=12)
    ch = models.CharField(max_length=44, null=True)

    @staticmethod
    def print(name, type):
        t = TypeModel.objects.create(name=name, type=type)
        print('success - ' + t.name)    
</code></pre>
<p>Please note, that a static method does not have the implicit <code>self</code> as first argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use staticmethod:</p>
<pre><code>@staticmethod
def print(name, type):
    t = TypeModel.objects.create(name=name, type=type)
    print('success - ' + t.name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Currently <code>print</code>is defined as an instance method. You would have to create an instance of <code>TypeModel</code> to call it. Like:</p>
<pre><code>model = TypeModel()
model.print()
</code></pre>
<p>Or you could use the <code>@staticmethod</code> decorator: </p>
<pre><code>@staticmethod
def print(name, type):
    t = TypeModel.objects.create(name=name, type=type)
    print('success - ' + t.name)  
</code></pre>
</div>
