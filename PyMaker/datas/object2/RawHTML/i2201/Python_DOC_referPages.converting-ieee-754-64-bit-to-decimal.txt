<div class="post-text" itemprop="text">
<p>I have a list of 64-bit IEEE-754 hex values, stored as strings, that I want to convert to python <code>float</code>:</p>
<pre><code>['40D3970060AA64C3', ...]
</code></pre>
<p>I've have tried to use <code>binascii.unhexlify and</code>struct.unpack` to convert each string, but it fails since this is 64 bit. </p>
<p>I can get it to work with 32 bit hex values: </p>
<pre><code>import binascii
import struct

hex_list = ['40D38700', '40D64700', '40E79700']

for i, value in enumerate(hex_list, 0):
    print(struct.unpack('&lt;f', binascii.unhexlify(hex_list[i].replace(' ', ''))))
</code></pre>
<p>Result:</p>
<pre><code>(1.24735742022795e-38,)
(6.597178645388664e-39,)
(1.3950116788944702e-38,)
</code></pre>
<p>When I go to 64 bit:</p>
<pre><code>import binascii
import struct

hex_list_64 = ['40D3970060AA64C3', '40D3970060AA64C3', '40D3970060AA64C3']

for i, value in enumerate(hex_list_64, 0):
    print(struct.unpack('&lt;d', binascii.unhexlify(hex_list_64[i].replace(' ', ''))))
</code></pre>
<p>Result:</p>
<pre><code>(-4.653463070196378e+16,)
(-4.653463070196378e+16,)
(-4.653463070196378e+16,)
</code></pre>
<p>However, converting <code>40D3970060AA64C3</code> to binary is supposed to yield <code>2.00600059000000001105945557356E4</code>. Via, <a href="http://www.binaryconvert.com/result_double.html?hexadecimal=40D3970060AA64C3" rel="nofollow noreferrer">http://www.binaryconvert.com/result_double.html?hexadecimal=40D3970060AA64C3</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like the byte order is reversed for your (and my) platform relative to how it was encoded:</p>
<pre><code>for value in hex_list_64:
    print(struct.unpack('&lt;d', binascii.unhexlify(value)))
</code></pre>
<p></p>
<pre><code>(-4.653463070196378e+16,)
(-4.653463070196378e+16,)
(-4.653463070196378e+16,)
</code></pre>
<p>BUT</p>
<pre><code>for value in hex_list_64:
    print(struct.unpack('&gt;d', binascii.unhexlify(value)))

(20060.0059,)
(20060.0059,)
(20060.0059,)
</code></pre>
<p>This makes sense, since Intel generally stores everything in little-endian order internally, while the string, if interpreted as read, is by definition in big endian.</p>
</div>
<span class="comment-copy">Use <code>d</code> for 64-bit floats. The <code>f</code> only works with 32-bit.</span>
<span class="comment-copy">Thank you. New issue now -- the values I'm getting back are not correct. Edited original post.</span>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="nofollow noreferrer">Byte Order, Size, and Alignment</a></span>
<span class="comment-copy">What if I wanted to get more decimals from the conversion?</span>
<span class="comment-copy">@Cowboysforlife. The entire number is stored in a <code>float</code>. If you want to print more, print something like <code>'{:.15g}'.format(blah)</code>. It's just a display issue, not an internal representation one.</span>
