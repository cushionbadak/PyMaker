<div class="post-text" itemprop="text">
<p>My teacher challenged me of finding a way to count the occurences of the word "bob" in any random string variable without <code>str.count()</code>. So I did,</p>
<pre><code>a = "dfjgnsdfgnbobobeob bob"
compteurDeBob = 0
for i in range (len(a) - 1):
   if a[i] == "b":
       if a[i+1] == "o":
           if a[i+2] == "b":
               compteurDeBob += 1
print(compteurDeBob)
</code></pre>
<p>but I wanted to find a way to do that with a word of any length as shown below, but I have no clue on how to do that... </p>
<pre><code>a = input("random string: ")
word = input("Wanted word: ")
compteurDeBob = 0
for i in range (len(a)-1):

   #... i don't know... 

print(compteurDeBob)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = input("random string: ")
word = input("Wanted word: ")

count = 0
for i in range(len(a)-len(word)):
    if a[i:i+len(word)] == word:
        count += 1
print(count)
</code></pre>
<p>If you want your search to be case-insensitive, then you can use <code>lower()</code> function: </p>
<pre><code>a = input("random string: ").lower()
word = input("Wanted word: ").lower()

count = 0
for i in range(len(a)):
    if a[i:i+len(word)] == word:
        count += 1
print(count)
</code></pre>
<p>For the user input</p>
<pre><code>Hi Bob. This is bob
</code></pre>
<p>the first approach will output <code>1</code> and the second approach will output <code>2</code></p>
</div>
<div class="post-text" itemprop="text">
<p>To count all overlapping occurrences (like in your example) you could just slice the string in a loop:</p>
<pre><code>a = input("random string: ")
word = input("Wanted word: ")    
cnt = 0

for i in range(len(a)-len(word)+1):
    if a[i:i+len(word)] == word:
        cnt += 1

print(cnt)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use string slicing. One way to adapt your code:</p>
<pre><code>a = 'dfjgnsdfgnbobobeob bob'

counter = 0
value = 'bob'
chars = len(value)

for i in range(len(a) - chars + 1):
    if a[i: i + chars] == value:
        counter += 1
</code></pre>
<p>A more succinct way of writing this is possible via <code>sum</code> and a generator expression:</p>
<pre><code>counter = sum(a[i: i + chars] == value for i in range(len(a) - chars + 1))
</code></pre>
<p>This works because <code>bool</code> is a subclass of <code>int</code> in Python, i.e. <code>True</code> / <code>False</code> values are considered <code>1</code> and <code>0</code> respectively.</p>
<p>Note <code>str.count</code> won't work here, as it <a href="https://docs.python.org/3.7/library/stdtypes.html#str.count" rel="nofollow noreferrer">only counts <em>non-overlapping</em> matches</a>. You <em>could</em> utilise <a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow noreferrer"><code>str.find</code></a> if built-ins are allowed. </p>
</div>
<div class="post-text" itemprop="text">
<p>The fastest way to calculate <em>overlapping</em> matches is the <a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" rel="nofollow noreferrer"><em>Knuth-Morris-Pratt algorithm</em> [wiki]</a> which runs in <em>O(m+n)</em> with <em>m</em> the string to match, and <em>n</em> the size of the string.</p>
<p>The algorithm first builds a lookup table that acts more or less as the description of a <em>finite state machine (FSM)</em>. First we construct such table with:</p>
<pre><code>def build_kmp_table(word):
    t = [-1] * (len(word)+1)
    cnd = 0
    for pos in range(1, len(word)):
        if word[pos] == word[cnd]:
            t[pos] = t[cnd]
        else:
            t[pos] = cnd
            cnd = t[cnd]
            while cnd &gt;= 0 and word[pos] != word[cnd]:
                cnd = t[cnd]
        cnd += 1
    t[len(word)] = cnd
    return t
</code></pre>
<p>Then we can count with:</p>
<pre><code>def count_kmp(string, word):
    n = 0
    wn = len(word)
    t = build_kmp_table(word)
    k = 0
    j = 0
    while j &lt; len(string):
        if string[j] == word[k]:
            k += 1
            j += 1
            if k &gt;= len(word):
                n += 1
                k = t[k]
        else:
            k = t[k]
            if k &lt; 0:
                k += 1
                j += 1
    return n
</code></pre>
<p>The above counts overlapping instances in <em>linear</em> time in the string to be searched, which was an improvements of the "slicing" approach that was earlier used, that works in <em>O(m√ón)</em>.</p>
</div>
<span class="comment-copy">What is  a <i>high</i> level function?</span>
<span class="comment-copy">Just so you know, you can accept only one answer. Be sure you select the one you believe is the best.</span>
<span class="comment-copy">thank you so much i didn't think about that !</span>
<span class="comment-copy">@EricDuminil Thanks for pointing that out! Edited my answer.</span>
<span class="comment-copy">thank you very much !</span>
<span class="comment-copy">maybe that's right but far too complicated for me right now, thank you though !</span>
