<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/576169/understanding-python-super-with-init-methods">Understanding Python super() with __init__() methods [duplicate]</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I am not sure how object of a parent class is created in Python. Consider a following scenario.</p>
<pre><code>class Animal():
    def __init__(self):
        print("Animal is created")

    def eat(self):
        print("I am eating")

class Dog(Animal):

    def __init__(self, breed, name, spots):
        self.breed = breed
        self.name = name
        self.spots = spots

    def bark(self):
        print("Woof! My name is {}".format(self.name))

my_dog = Dog(breed="lab", name="Sam", spots=False)
</code></pre>
<p>This does not print "Animal is created".</p>
<pre><code>class Animal():
    def __init__(self):
        print("Animal is created")

    def eat(self):
        print("I am eating")

class Dog(Animal):

    def __init__(self, breed, name, spots):
        Animal.__init__(self)
        self.breed = breed
        self.name = name
        self.spots = spots

    def bark(self):
        print("Woof! My name is {}".format(self.name))

my_dog = Dog(breed="lab", name="Sam", spots=False)
</code></pre>
<p>Whereas this prints "Animal is created"</p>
<p>But in both the cases I am able to access eat() method of Animal class from Dogs instance (my_dog). This means Animal is created in both the cases. Then why I don't see Animals constructor getting called in case#1?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be calling the parent class (<code>Animal</code>) <code>__init__</code> method in the <code>Dog</code> <code>__init__</code> method. To get a handle on the parent class you can use <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super</code></a>. This is considered better practice than <code>Dog.__init__</code> since it doesn't explicitly require the name of the parent class.</p>
<pre><code>class Dog(Animal):

    def __init__(self, breed, name, spots):
        super().__init__()
        self.breed = breed
        self.name = name
        self.spots = spots
</code></pre>
</div>
<span class="comment-copy">You need to use <code>super</code>.</span>
<span class="comment-copy">"But in both the cases I am able to access eat() method of Animal class from Dogs instance (my_dog). This means Animal is created in both the cases. " No, that is not how it works. Only a <code>Dog</code> object is created which <i>is</i> an <code>Animal</code> object, but there is only one instance. Instances have <i>access</i> to all methods in their class and the classes they inherit from. Remember, <i>methods belong to the class, not the instance</i>.</span>
<span class="comment-copy">@RedCricket This is not a duplicate. Please read the question properly before acting on it.</span>
<span class="comment-copy">@LokeshAgrawal Have you read the answers? Do you understand that when you inherit from a class you have to call the father's methods, and that does not mean that an object of the parent class has been created, but that the child needs to initialize some properties that the parent object I inherit it. For example, let's say that the Animal class has an attribute number of legs and that depends on how it walks, so as the Dog class inherits from Animal it has to initialize the number of legs that the parent class inherits.</span>
<span class="comment-copy">But you have to understand that this question is the lines of whether parent object gets created automatically or not and this has nothing to do with the question you referred as duplicate of. I hope you understand this.</span>
<span class="comment-copy">My question is what if I dont. If I dont then also I am able to access parents method from childs object.</span>
<span class="comment-copy">Sure you can still access parent methods but why would you expect the parents <code>__init__</code> to be called automatically?</span>
<span class="comment-copy">If the parent <b>init</b> is not called then how the parent object is created? As per my understanding <b>init</b> is called anytime an object of a class is created.</span>
<span class="comment-copy">@LokeshAgrawal You can examine the order those methods are called using <code>Dog.mro()</code></span>
<span class="comment-copy"><code>__init__</code> just initialized an object - it doesn't create one. You might be thinking of <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__</code></a>.</span>
