<div class="post-text" itemprop="text">
<p>I have below pattern of stars</p>
<pre><code>*
*
**
***
***
**
***
*
**
***
</code></pre>
<p>Based on that above pattern I have to generate numbered index like below.</p>
<pre><code>1
2
2.1
2.1.1
2.1.2
2.2
2.2.1
3
3.1
3.1.1
</code></pre>
<p>I am trying with loops but not able to find how to generate sub indexes. I am trying in python.
Is there any library or algorithm that I can use to achieve this.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator function</a>: at each iteration, bring the list of indexes to the length of the stars and then increment the last index.</p>
<pre><code>def gen(stars):
    inds = []
    for star in stars:
        if len(star) &gt; len(inds):  # length should not increase by more than one ...
            inds.append(0)
        while len(star) &lt; len(inds):  # ... but can decrease by more
            inds.pop()
        inds[-1] += 1
        yield '.'.join(map(str, inds))

&gt;&gt;&gt; stars = ['*', '**', '***', '**', '***', '***', '***', '*', '**', '***']
&gt;&gt;&gt; list(gen(stars))
['1', '1.1', '1.1.1', '1.2', '1.2.1', '1.2.2', '1.2.3', '2', '2.1', '2.1.1']
</code></pre>
<p>Also see the docs on <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> that are used for convenience.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your pattern is in a file <code>"tempfile"</code>, you can use the following code : </p>
<pre><code>#!/usr/bin/env python

with open("tempfile") as f:
    content=f.readlines()
content = [x.strip() for x in content]
arr=[0,0,0,0]
for line in content:
    arr[len(line)-1] = arr[len(line)-1]+1
    arr[len(line):]=[0] * (len(arr)-len(line))
    tarr=arr[:len(line)]
    print ".".join(map(str,tarr))
</code></pre>
<p><strong>Explanation :</strong> </p>
<ul>
<li>Keep a memory array with all elements as 0</li>
<li>For each line, count the number of asterisks, </li>
<li>For a line with number of asterisk as n, increment the memory array with index = n-1 by 1, </li>
<li>Assign all indexes to right with value = 0.</li>
<li>Repeat logic for all lines.</li>
</ul>
<p><strong>Output</strong></p>
<pre><code>1
2
2.1
2.1.1
2.1.2
2.2
2.2.1
3
3.1
3.1.1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your star pattern is stored in string <code>s</code>, here's one way to do it efficiently:</p>
<pre><code>i = [0]
for l in s.splitlines():
    while len(i) &lt; len(l):
        i.append(0)
    while len(l) &lt; len(i):
        i.pop()
    i[-1] += 1
    print('.'.join(map(str, i)))
</code></pre>
<p>This outputs:</p>
<pre><code>1
2
2.1
2.1.1
2.1.2
2.2
2.2.1
3
3.1
3.1.1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can build up a dictionary from your lines and print the whole dicts numbers after each line you parsed:</p>
<pre><code>text = """*
*
**
***
***
**
***
*
**
***"""

d = {}
for l in text.splitlines():

    # add key if needed (with 0) 
    d.setdefault(l,0)
    # increment key
    d[l] += 1

    lenL = len(l)
    # delete any key in the dict that is longer then the actual one
    delete = [k for k in d.keys() if len(k) &gt; lenL]
    for k in delete:
        del d[k]

    # from 3.7 on dict insert order is guaranteed - you could skip the sorting
    # sort keys by length and print theire respective values
    all_keys = sorted(d.keys(), key=len) 
    print('.'.join( ( str(d[k]) for k in all_keys) ), 
          "\t                from ", d) # this line just to display the dict
</code></pre>
<p>Output:</p>
<pre><code>1                       from  {'*': 1}
2                       from  {'*': 2}
2.1                     from  {'*': 2, '**': 1}
2.1.1                   from  {'*': 2, '**': 1, '***': 1}
2.1.2                   from  {'*': 2, '**': 1, '***': 2}
2.2                     from  {'*': 2, '**': 2}
2.2.1                   from  {'*': 2, '**': 2, '***': 1}
3                       from  {'*': 3}
3.1                     from  {'*': 3, '**': 1}
3.1.1                   from  {'*': 3, '**': 1, '***': 1}    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a list of counts which will keep track of each level. Increment current level, and reset all levels next to it.</p>
<pre><code>stars = ['*', '*', '**', '***', '***', '**', '***', '*', '**', '***']
counts = [] # to keep track of level counts
numbered_index = [] # will contain the numbered index

for s in stars:
    # if there are more levels than already known, initialize them with 0
    counts = counts + [0] * (len(s) - len(counts))
    # increment the current level count
    counts[len(s) - 1] += 1
    # the counts up to current level contain the index, join them in a string
    numbered_index.append('.'.join(map(str, counts[:len(s)])))
    # set all the values ahead of current level to zero, as the current level has been increased
    counts[len(s):] = [0] * (len(counts) - len(s))

print('\n'.join(numbered_index))
</code></pre>
<p>Output:</p>
<pre><code>1
2
2.1
2.1.1
2.1.2
2.2
2.2.1
3
3.1
3.1.1
</code></pre>
</div>
<span class="comment-copy">It's not clear what your generating function is. Show the function you are working with and whatever errors you are getting.</span>
