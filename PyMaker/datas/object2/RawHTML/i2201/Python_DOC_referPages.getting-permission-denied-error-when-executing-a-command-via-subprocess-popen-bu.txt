<div class="post-text" itemprop="text">
<p>I am trying to move a folder into another folder but am getting Permission Denied error when I try to perform this operation in a Python script vs. the move working successfully when I run it in bash or even in Python interactive mode.</p>
<pre><code>cmd = ['sudo', 'mv', '/path1/dir', '/path2']
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()
if p.returncode != 0:
     print(stderr)    
</code></pre>
<p>I also tried adding shell=True.</p>
<pre><code>p = subprocess.Popen(' '.join(cmd), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()
if p.returncode != 0:
     print(stderr)
</code></pre>
<p>In both cases, I am getting the following error: </p>
<pre><code> "mv: cannot move '/path1/dir' to '/path2/dir': Permission denied\n"
</code></pre>
<p>I invoke my script in the following manner:</p>
<pre><code>sudo python script.py
</code></pre>
<p>I tried executing each command in shell as well as Python interactive mode and I don't get any errors. Any idea what is going on over here?</p>
</div>
<div class="post-text" itemprop="text">
<p>After wasting hours of time debugging as to what was going wrong, I finally figured out what was happening. I was creating <code>/path1</code> and <code>/path2</code> using tempfile. Here is a snippet of the code:</p>
<pre><code>class UtilitiesTest(unittest.TestCase):
    @staticmethod
    def createTestFiles():
        dir = tempfile.mkdtemp()
        _, file = tempfile.mkstemp(dir=dir)
        return dir, file

    def test_MoveFileToAnotherLocation(self):
        src_dir, src_file = UtilitiesTest.createTestFiles()
        dest_dir, dest_file = UtilitiesTest.createTestFiles()
        cmd = ['sudo', 'mv', src_dir, dest_dir]
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = p.communicate()
        if p.returncode != 0:
             print(stderr)
</code></pre>
<p>Like zwer said in the comments, if I am running this script using sudo, I don't need to add sudo in my mv command. Because I kept getting permission denied errors, I kept thinking that sudo would fix my problem. The actual issue over here was when tempfile.mkstemp() is called, it returns an <strong>open</strong> file descriptor along with the file path. I didn't pay much attention to the first argument, so when I modified my createTestFiles() to below, everything started working.</p>
<pre><code>    @staticmethod
    def createTestFiles():
        dir = tempfile.mkdtemp()
        fd, file = tempfile.mkstemp(dir=dir)
        os.close(fd)
        return dir, file
</code></pre>
</div>
<span class="comment-copy"><code>mv</code> is a shell command, try executing it through the default shell: <code>cmd = ['sudo', '-s', 'mv', '/path1/dir', '/path2']</code> . The question is - since you're already execute your Python script as superuser, why do you resort to subprocess to move your files - just do it directly through Python (check the <a href="https://docs.python.org/3/library/shutil.html" rel="nofollow noreferrer"><code>shutil</code></a> module, for example).</span>
<span class="comment-copy">Without sudo, it throws the Permission Denied error. When you say default shell, do you mean to not do shell=True?</span>
<span class="comment-copy">At the moment, it throws Permission Denied error with/without sudo. I thought adding sudo would help.</span>
<span class="comment-copy">No, just add <code>-s</code> to the command list as I've typed in my first comment - that will tell <code>sudo</code> to run a shell process as a superuser and then execute your move command in it. But you don't need subprocess at all if you're running your Python script as a <i>sudoer</i> - <a href="https://docs.python.org/3/library/shutil.html#shutil.move" rel="nofollow noreferrer"><code>shutil.move()</code></a> should do just fine.</span>
<span class="comment-copy">I tried both removing sudo and adding -s after sudo. Neither worked. Is shutil my only option?</span>
