<div class="post-text" itemprop="text">
<p>Given a list of positive integers, associate the largest duplicated element with the variable <code>maximum</code>. If the list contains no duplicates, associate -1 with <code>maximum</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's more than one way to do it, depending on your time/space complexity requirements. Here're some ideas:</p>
<p><strong>Using a set</strong></p>
<pre><code>def max_dup(lst):
    seen = set()        
    for i in sorted(lst, reverse=True):
        if i in seen:
            return i
        seen.add(i)
    return -1
</code></pre>
<p><strong>Using <a href="https://docs.python.org/3.6/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a></strong></p>
<pre><code>from collections import Counter

def max_dup(lst):
    cnt = Counter(lst)
    return max((k for k in cnt if cnt[k] &gt; 1), default=-1)
</code></pre>
<p><strong>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a></strong></p>
<pre><code>from itertools import groupby

def max_dup(lst):
    for k, g in groupby(sorted(lst, reverse=True)):
        if len(list(g)) &gt; 1:
            return k
    return -1
</code></pre>
<p>In my tests (for rather small lists) using a set appears to be the fastest method, but your mileage may vary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this without counters too:</p>
<pre><code>def max_dup(numbers):
    desc_numbers = sorted(numbers, reverse=True)
    for i in range(1, len(desc_numbers)):
        if desc_numbers[i] == desc_numbers[i - 1]:
            return desc_numbers[i]
    return -1

print(max_dup([1,2,3,4,5,5,6,7])) # 5
print(max_dup([1,2,3,4,5,6,7])) # -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This could be done with <em>itertools.groupby</em> we would first have to sort our list, and then we could take only <code>k</code> if its corresponding <code>list(g)</code> has a <code>len &gt; 1</code> into a new list. We could then use <code>max</code> on that list    </p>
<pre><code>from itertools import groupby
lista = [1, 5, 3, 4, 1, 5, 7]
max_dup = -1

lrg_dup = [k for k, g in groupby(sorted(lista)) if len(list(g)) &gt; 1]
if lrg_dup:
    max_dup = max(lrg_dup)
# 5
</code></pre>
<p>Expanded:</p>
<pre><code>lrg_dup = []
listb = sorted(lista)
for k, g in groupby(listb):
    if len(list(g)) &gt; 1:
        lrg_dup.append(k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sort the list, iterate through the list in pairs, exit on first matching pair.</p>
<pre><code>def maxdup(l):
    l = sorted(l, reverse=True)
    for i in range(1, len(l)):
        if l[i-1] == l[i]:
            return l[i]

    return -1
</code></pre>
</div>
<span class="comment-copy">Please do not vandalize your question.</span>
<span class="comment-copy">There is a <a href="https://docs.python.org/2/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>Counter.most_common</code></a> method.</span>
<span class="comment-copy">@taras: How would it help to find the <i>largest duplicate</i>?</span>
<span class="comment-copy">agree. I misunderstood the question</span>
