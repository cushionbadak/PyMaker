<div class="post-text" itemprop="text">
<p>I understand the basic function and use case of <code>__getattr__</code> method. But I'm having trouble how parameters are passed around inside <code>__getattr__</code>. </p>
<p>I have code </p>
<pre><code>class Wrapper:
    def __init__(self, object):
        self.wrapped = object
    def __getattr__(self, attrname):
        print('trace: ' + attrname)
        return getattr(self.wrapped, attrname)


x = Wrapper([1, 2, 3])
x.append(4)
print(x.wrapped)
</code></pre>
<p>And it prints </p>
<pre><code>trace: append
[1, 2, 3, 4]
</code></pre>
<p>Forgive me if my assumption below is incorrect. I assume that the parameter <code>4</code> in <code>x.append(4)</code> is somehow passed from the initial call to <code>__getattr__</code> and then to the call to <code>getattr</code> method and then to the <code>append</code> method of <code>list</code> class. But I'm not sure what exactly is happening. Could someone please clarify the details. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is how I understand it:</p>
<pre class="lang-py prettyprint-override"><code>x = Wrapper([1, 2, 3])
</code></pre>
<p>So, <code>x.wrapped</code> is a <code>list</code>, that is <code>[1, 2, 3]</code>.</p>
<p>Now, when you do <code>x.append</code>, you call <code>__getattr__</code>  of <code>Wrapper</code>, with argument <code>append</code>. So when python resolves:</p>
<pre class="lang-py prettyprint-override"><code>getattr(self.wrapped, attrname)
</code></pre>
<p>it gets the method <code>append</code> of your inner list, which is then returned. So, you could imagine that your code is interpreted as:</p>
<pre class="lang-py prettyprint-override"><code># just got it outside for later explanation
l = [1, 2, 3]

x = Wrapper(l)

f = x.__getattr__('append')
# here `f` is the `append` method of `l`

f(4) # which is equivalent to `l.append(4)`

# finally
print(x.wrapped)
# which is equivalent to `print(l)`, hence the output
# [1, 2, 3, 4]
</code></pre>
<p>Hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__getattr__</code> never comes in contact with that <code>4</code>. <code>__getattr__</code> simply returns a bound method, which is then called with the argument <code>4</code>. <em>Obtaining</em> the bound method and <em>calling</em> the bound method are two unrelated steps, and <code>__getattr__</code> is only responsible for the first one.</p>
<p>It might be easier to follow along if you mentally split this line:</p>
<pre><code>x.append(4)
</code></pre>
<p>into two:</p>
<pre><code>method = x.append  # obtain the bound method
method(4)          # call the bound method
</code></pre>
<p>Clearly, <code>__getattr__</code> is called in the first line and has nothing to do with the 2nd line. <code>__getattr__</code> simply returns a reference to the <code>append</code> method of the wrapped list, as you can easily verify for yourself:</p>
<pre><code>&gt;&gt;&gt; x.append
&lt;built-in method append of list object at 0x7f096feb2fc8&gt;
</code></pre>
<p>This is a <em>bound method</em>. A bound method is simply a method that has a reference to the object that will take the place of the <code>self</code> when the method is called (in this case, the list <code>x.wrapped</code>). Bound methods are the reason why we can call methods without explicitly passing an argument for <code>self</code>.</p>
<p>For more details about bound methods, see <a href="https://stackoverflow.com/questions/11949808/what-is-the-difference-between-a-function-an-unbound-method-and-a-bound-method">What is the difference between a function, an unbound method and a bound method?</a>.</p>
</div>
<span class="comment-copy">What? Neither <code>__getattr__</code> nor <code>getattr</code> ever come in contact with that <code>4</code>. 4 isn't an attribute, after all.</span>
<span class="comment-copy">@Aran-Fey I understand that <code>4</code> is not an attribute, but I was just wondering how is the original argument <code>4</code> passed to the call to <code>append</code> method of <code>list</code> class</span>
<span class="comment-copy">hi Houdin, thank for the answer. It definitely helps me better visualise the process. Just wondering if you know any official documentation that document the process?</span>
<span class="comment-copy">Well... You have python's <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">official documentation for <code>__getattr__</code></a>, but apart from this link, I don't really know...</span>
<span class="comment-copy">I have already checked the official documentation for <b>getattr</b> but it doesn't seem to contain the info I'm looking for. Thanks for helping out! really appreciate it :)</span>
<span class="comment-copy">I have found this <a href="https://www.python.org/download/releases/2.3/mro/" rel="nofollow noreferrer">link</a> about python's resolution order of methods. It's actually for python 2.3, but I guess it doesn't differ a lot from the one used in 3.x.</span>
