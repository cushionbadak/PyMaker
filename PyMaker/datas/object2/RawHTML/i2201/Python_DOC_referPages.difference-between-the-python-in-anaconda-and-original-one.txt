<div class="post-text" itemprop="text">
<p>I'm a windows user and I've already installed the python (which is version 3.6) on my computer. Then I downloaded the Anaconda and when I open the Anaconda prompt to run python, it gives python version3.7</p>
<p>However, if I directly use the cmd to run python, it still appeared to be version 3.6     . It seems there are 2 versions in my computer. As I can use some libraries in the anaconda prompt python but cannot use them in my original python. One thing I'm not very happy with is that the anaconda prompt runs much slower than cmd in my computer.</p>
<p>So my question is: will there be any conflict between these two pythons and their libraries? If I want to use the libraries and packages embedded in anaconda, does it necessarily mean I can only use the anaconda prompt (but cannot use cmd in windows) to run my python file from now on?</p>
</div>
<div class="post-text" itemprop="text">
<p>The system Python and Anaconda Python interpreters should not come into conflict.  The motivation for this lies with <a href="https://docs.python.org/3/library/venv.html#venv-def" rel="nofollow noreferrer">virtual environmnets</a>.  If you want to use the modules in your anaconda python, you don't necessarily need to execute from the anaconda prompt.  To do this (as in how I would do this), you will need to determine the filepath of your anaconda python instance.  You can set that path as your default by modifying your <code>$PATH</code> (see <a href="https://stackoverflow.com/questions/36075166/how-do-i-set-anacondas-python-as-my-default-python-command">related post</a>) environment variable.  If you don't want to set it as your default, but just use for some scripts, you can always call the <code>C:\path\to\anaconda\env\python.exe</code> to execute whatever script.  If you do this, might be worth setting as an environment variable of its own to make calling easier (something like <code>$CONDA_PYTHON</code>).  There are other ways to execute such as setting the shebang line in the script directly, but this isn't supported on all versions of windows and python.  More details on that can be found <a href="https://docs.python.org/3/library/venv.html#venv-def" rel="nofollow noreferrer">here</a>.  Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>There will probably not be any conflict between the versions of Python. Here's how to check if one Python can access another Python's libraries. I'm on a Mac, so my output will look a little different, but it should work the same on Windows.</p>
<p>Open your non-anaconda Python and run the following commands:</p>
<pre><code>Î» python
Python 2.7.10 (default, Oct  6 2017, 22:29:07)
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path
# Prints list of folders
</code></pre>
<p>These are the folders Python looks for libraries in. Let's save it to a file (make sure you save it where you can find it):</p>
<pre><code>&gt;&gt;&gt; with open('default-python-path.txt', 'w') as fp:
...     for folder in sorted(sys.path):
...         print(folder, file=fp)
...
&gt;&gt;&gt;
</code></pre>
<p>Then open your Anaconda Python and do the same thing (with a different filename of course)</p>
<p>Finally, you can open the two files and compare the paths. If the lists of paths are completely different, you won't have any shared libaries.</p>
<p>For what it's worth, I recommend you look into <a href="https://docs.python-guide.org/dev/virtualenvs/" rel="nofollow noreferrer">pipenv</a> or <a href="https://conda.io/docs/user-guide/getting-started.html#managing-envs" rel="nofollow noreferrer">conda environments</a> (Anaconda only) to keep your projects' library installations from stepping on each other.</p>
</div>
<span class="comment-copy">Thanks. I think this should work. By the way, I knew that anaconda can create other virtual environment. Do you mean the anaconda python is already in a environment without my creating it?</span>
<span class="comment-copy">An environment (in context of Anaconda) is simply a python interpreter, along with the libraries/modules installed for it.  It needs to be created through anaconda; but once it's created, you can access that Python instance without going into that anaconda prompt.</span>
<span class="comment-copy">okay,  I guess I should create one first.</span>
