<div class="post-text" itemprop="text">
<p>I want to create a recursive method with Python that prints this dictionary:</p>
<pre><code>partners = {
        'manager-1': {
            'name': 'Manager 1',
            'children': {
                'manager-2': {
                    'name': 'Manager 2',
                    'children': {
                        'employee-1': {
                            'name': 'Employee 1',
                            'children': {
                                'employee-7': {
                                    'name': 'Employee 7',
                                },
                                'employee-8': {
                                    'name': 'Employee 8',
                                }
                            }
                        },
                        'employee-2': {
                            'name': 'Employee 2',
                        },
                        'employee-3': {
                            'name': 'Employee 3',
                        },
                    },
                },
                'manager-3': {
                    'name': 'Manager 3',
                    'children': {
                        'employee-4': {
                            'name': 'Employee 4',
                        },
                        'employee-5': {
                            'name': 'Employee 5',
                        },
                        'employee-6': {
                            'name': 'Employee 6',
                        },
                    },
                },
                'manager-4': {
                    'name': 'Manager 4',
                },
                'manager-5': {
                    'name': 'Manager 5',
                }
            }
        }
    }
</code></pre>
<p>And gives it like this:</p>
<pre><code>--Manager 1
----Manager 2
------Employee 1
--------Employee 7
--------Employee 8
------Employee 2
------Employee 3
----Manager 3
------Manager 4
------Manager 5
------Manager 6
----Manager 4
----Manager 5
</code></pre>
<p>I made this method:</p>
<pre><code>def hierarch(partners):
    for partner in partners:
        if 'children' not in partner.keys(): 
            print(partner['name'])
        else:
            hierarch(partner['children'])
</code></pre>
<p>And I got this error when running the code:</p>
<pre><code>AttributeError: 'str' object has no attribute 'keys'
</code></pre>
<p>How can I make a script that allows me to print this hierarchy? I'm not really good with dictionaries. I'm working with Python 3. Any help please? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you need to reproduce the exact order?  You could use something like this to traverse the data structure:</p>
<pre><code>def recurse(data, level):
    if type(data) is dict:
        if "name" in data:
            print("-" * level + data["name"])
        for (key, value) in data.items():
            recurse(value, level + 1)
recurse(partners, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You get that <code>AttributeError</code> because you are recursively calling the <code>hierarch</code> function on every 'children' value. That's valid for the keys like 'employee-1', since the recursive call will loop over the associated dict, but it will fail on 'name', since there is no associated dict, just a name string.</p>
<p>So you need to test each item to see whether it's valid to recurse on it. You can use the <code>type</code> function for that, but it's recommended to use the more versatile <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a> function.  </p>
<p>Rather than printing the desired names, we can make the function more flexible by turning it into a generator. That way we can loop over the generated results, printing them as we go, or perform some other processing. Or we can easily collect them into a list, or a new flat dictionary.</p>
<pre><code>partners = {
    'manager-1': {
        'name': 'Manager 1',
        'children': {
            'manager-2': {
                'name': 'Manager 2',
                'children': {
                    'employee-1': {
                        'name': 'Employee 1',
                        'children': {
                            'employee-7': {
                                'name': 'Employee 7',
                            },
                            'employee-8': {
                                'name': 'Employee 8',
                            }
                        }
                    },
                    'employee-2': {
                        'name': 'Employee 2',
                    },
                    'employee-3': {
                        'name': 'Employee 3',
                    },
                },
            },
            'manager-3': {
                'name': 'Manager 3',
                'children': {
                    'employee-4': {
                        'name': 'Employee 4',
                    },
                    'employee-5': {
                        'name': 'Employee 5',
                    },
                    'employee-6': {
                        'name': 'Employee 6',
                    },
                },
            },
            'manager-4': {
                'name': 'Manager 4',
            },
            'manager-5': {
                'name': 'Manager 5',
            }
        }
    }
}

def show(obj, depth=0):
    depth += 1
    for v in obj.values():
        if isinstance(v, dict):
            yield from show(v, depth)
        else:
            yield v, depth

for v, depth in show(partners):
    print('-' * depth + v)   
</code></pre>
<p><strong>output</strong></p>
<pre><code>--Manager 1
----Manager 2
------Employee 1
--------Employee 7
--------Employee 8
------Employee 2
------Employee 3
----Manager 3
------Employee 4
------Employee 5
------Employee 6
----Manager 4
----Manager 5
</code></pre>
</div>
<span class="comment-copy">Have you tried anything? SO isn't for people to write your code for you. Also why does your expected output not have <code>Employee 7</code>?</span>
<span class="comment-copy">A cleaner way to do this would be to have level as a default arg so you don't have to explicitly state in when you initially call the function. <code>def recurse(data, level=1)</code>. Also OP's output has +2 dashes per level so maybe increment by 2 and start from 2.</span>
