<div class="post-text" itemprop="text">
<p>I would like to be able to run this function without needing to add <code>.elements</code> to the end. For instance, if <code>seta=MySet([1,2,3])</code> and <code>setb=MySet([1,10,11])</code>, I can run <code>setc=seta.intersection(setb.elements)</code>, but not without the <code>.elements</code>. How can I run it without needing to type <code>.elements</code>? </p>
<pre><code>class MySet:
    def __init__(self, elements):
        self.elements=elements
    def intersection(self, other_set):
        self.other_set=other_set
        new_set = []
        for j in other_set:
            if j in self.elements:
                new_set.append(j)
        new_set.sort()
        return new_set 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Easily, all you have to do is access the <code>.elements</code> in the function. No <code>__repr__</code> required.</p>
<pre><code>class MySet:
    def __init__(self, elements):
        self.elements=elements
    def intersection(self, setb):
        other_set = setb.elements
        new_set = []
        for j in other_set:
            if j in self.elements:
                new_set.append(j)
        new_set.sort()
        return new_set 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer">Make your set an iterable by defining <code>__iter__</code></a>:</p>
<pre><code>class MySet:
    def __init__(self, elements):
        self.elements=elements
    def intersection(self, other_set):
        ...
    def __iter__(self):
        return iter(self.elements)
        # Or for implementation hiding, so the iterator type of elements
        # isn't exposed:
        # yield from self.elements
</code></pre>
<p>Now iteration over an instance of <code>MySet</code> seamlessly iterates the elements it contains.</p>
<p>I'd strongly suggest looking at <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer">the <code>collections.abc</code> module</a>; you're clearly trying to build a <code>set</code>-like object, and getting the basic behaviors in place is easiest by using <code>collections.abc.Set</code> (or <code>collections.abc.MutableSet</code>) as your base class.</p>
</div>
