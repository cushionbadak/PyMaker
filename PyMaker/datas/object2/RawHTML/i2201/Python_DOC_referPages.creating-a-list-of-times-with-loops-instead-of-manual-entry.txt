<div class="post-text" itemprop="text">
<p>I'm trying to create a list with options in 30 minute intervals from 9am-5pm.
e.g.</p>
<pre><code>    times = ['09:00-09:30', '09:30-10:00', '10:00-10:30', '10:30-11:00', '11:00-11:30', '11:30-12:00',
            '12:00-12:30', '12:30-13:00', '13:00-13:30', '13:30-14:00', '14:00-14:30', '14:30-15:00',
            '15:00-15:30', '15:30-16:00', '16:00-16:30', '16:30-17:00']
</code></pre>
<p>How would I be able to accomplish this but using loops or a method that doesn't look this verbose?</p>
</div>
<div class="post-text" itemprop="text">
<p>Create an iterable of <code>datetime</code> objects, starting at 9 o'clock.</p>
<pre><code>import datetime

fmt = '%H:%M'
start = datetime.datetime.strptime('09:00', fmt)
times = (start + datetime.timedelta(minutes=30*i) for i in range(17))
</code></pre>
<p>Turn the <code>datetime</code> objects back to strings.</p>
<pre><code>times_str = (t.strftime(fmt) for t in times)
</code></pre>
<p>Iterate over <code>times_str</code> in pairs. The <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> documentation</a> has a recipe for this called <strong><code>pairwise</code></strong>. You can either copy-paste the function or import it from <a href="https://pypi.org/project/more-itertools/" rel="nofollow noreferrer"><code>more_itertools</code></a> (which needs to be installed).</p>
<pre><code>from more_itertools import pairwise
result = ['-'.join(times) for times in pairwise(times_str)]
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; print(result)
['09:00-09:30', '09:30-10:00', '10:00-10:30', '10:30-11:00', '11:00-11:30', '11:30-12:00', '12:00-12:30', '12:30-13:00', '13:00-13:30', '13:30-14:00', '14:00-14:30', '14:30-15:00', '15:00-15:30', '15:30-16:00', '16:00-16:30', '16:30-17:00']
</code></pre>
<p>You could encapsulate everything with a function.</p>
<pre><code>import datetime
from more_itertools import pairwise

def timepairs(start:datetime.datetime, steps:int, delta:datetime.timedelta, fmt='%H:%M'):
    times = (start + delta*i for i in range(steps + 1))
    times_str = (t.strftime(fmt) for t in times)
    return ['-'.join(times) for times in pairwise(times_str)]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; start = datetime.datetime.strptime('09:00', '%H:%M')
&gt;&gt;&gt; timepairs(start, 16, datetime.timedelta(minutes=30))
['09:00-09:30', '09:30-10:00', '10:00-10:30', '10:30-11:00', '11:00-11:30', '11:30-12:00', '12:00-12:30', '12:30-13:00', '13:00-13:30', '13:30-14:00', '14:00-14:30', '14:30-15:00', '15:00-15:30', '15:30-16:00', '16:00-16:30', '16:30-17:00']
&gt;&gt;&gt; 
&gt;&gt;&gt; start = datetime.datetime.strptime('00:00', '%H:%M')
&gt;&gt;&gt; timepairs(start, 12, datetime.timedelta(minutes=5))
['00:00-00:05', '00:05-00:10', '00:10-00:15', '00:15-00:20', '00:20-00:25', '00:25-00:30', '00:30-00:35', '00:35-00:40', '00:40-00:45', '00:45-00:50', '00:50-00:55', '00:55-01:00']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime

fmt='%H:%M'
time=datetime.datetime.strptime('09:00',fmt)
min30=datetime.timedelta(minutes=30)
times=[]

for i in range(16):
    times.append('%s-%s' % ( time.strftime(fmt), (time+min30).strftime(fmt)))
    time+=min30
print times
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this..:</p>
<pre><code>hours = 9
minutes = 0

n = 10
cal = {}

for i in range(n):
    key = str(hours) + ":" + str(minutes)
    cal[key] = 10

    if i%2 != 0:
        hours += 1

    minutes += 30
    if minutes == 60:
        minutes = 0

print(cal)
</code></pre>
<p>You can change the number of times you run the loop. Change the condition to run until <code>hours</code> reach your desired time. </p>
<p>You can also make some edits to get the key as <code>09:00</code> instead of <code>9:0</code>.</p>
<p>Basically, for a dict, you just have to have a key value as a string. You can use any string you want, and assign a value to it. Easy as pie.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short and simple code with <code>pandas</code>:</p>
<pre><code>In [2]:pandas.date_range("09:00", "17:00", freq="30min").time
Out[2]:
array([datetime.time(9, 0), datetime.time(9, 30), datetime.time(10, 0),
       datetime.time(10, 30), datetime.time(11, 0), datetime.time(11, 30),
       datetime.time(12, 0), datetime.time(12, 30), datetime.time(13, 0),
       datetime.time(13, 30), datetime.time(14, 0), datetime.time(14, 30),
       datetime.time(15, 0), datetime.time(15, 30), datetime.time(16, 0),
       datetime.time(16, 30), datetime.time(17, 0)], dtype=object)
</code></pre>
</div>
<span class="comment-copy">How would the desired output look like? You say you want to create a dictionary but define a list.</span>
<span class="comment-copy">Sorry, that's an error on my part, I meant a list.</span>
<span class="comment-copy">If you have the option of using a 3rd party python package, you can look into dateutil.rrule</span>
<span class="comment-copy">This is even more than what I was asking for. Thank you!</span>
<span class="comment-copy">This is what I used as an answer before i read timgeb 's solution. Thanks!</span>
<span class="comment-copy">How do you get strings as in the OP's example?</span>
