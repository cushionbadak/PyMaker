<div class="post-text" itemprop="text">
<pre><code>dictionaryofinputs = {'0':[0,0],'1':[2,1],'0':[5,1],'1':[20,1]}
</code></pre>
<p>How do i make a new dictionary made out of all of values with a key of one? 
i tried something like this:</p>
<pre><code> for item in dictionaryofinputs.values():
      if key[0] == '1'
          locationcoor = locationcoor + key[1]
</code></pre>
<p>but it did not work</p>
<p>thanks for your help, I am just starting out with python</p>
</div>
<div class="post-text" itemprop="text">
<p>A dictionary uses a series of unique <code>keys</code> to identify a single or set of <code>values</code>. How you have your dictionary defined above will only return the second instance of the <code>0</code> and <code>1</code> <code>keys</code>. Your <code>value</code> can have repeated data, but not your <code>key</code>.</p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html</a></p>
<p>Additionally, your dictionary <code>values</code> are lists, not tuples. It is important to know the difference as tuples are immutable objects, and lists are mutable objects.</p>
<pre><code>my_tuple = ('value1', 'value2')
my_list = ['value1', 'value2']
</code></pre>
<p>If you wanted to create a new dictionary using the <code>key</code> and <code>value</code>:</p>
<pre><code>my_old_dict = {
    '0':[0, 0],
    '1':[2, 1],
}

my_new_dict = {}

for key, value in my_old_dict.items():
    if key == '1':
        my_new_dict[key] = value

print(my_new_dict)  #&lt;-- PRINTS {'1': [2, 1]}
</code></pre>
<blockquote>
<p>ADDITIONAL INFO:</p>
</blockquote>
<p>You code above:</p>
<pre><code>for item in dictionaryofinputs.values():
    if key[0] == '1'  #&lt;-- THERE IS NO KEY, YOU DID NOT UNPACK ONE.
        locationcoor = locationcoor + key[1]
</code></pre>
<p>is not complete, and one of the biggest reasons it is not working is because you are not unpacking a key with your values. It should be</p>
<pre><code>for item, value in dictionaryofinputs.items():
    if item == '1':
        locationcoor[item] = value
</code></pre>
<p>assuming that <code>locationcoor</code> is a dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Such dictionary can not exists, as <code>keys</code> are unique but this would be possible if that were a list of tuples like so <code>lst = [('0',[0,0]), ('1',[2,1]), ('0',[5,1]), ('1',[20,1])]</code> or same for list of lists.  We can use <code>sort</code>, <code>groupby</code> and a dictionary constructor</p>
<pre><code>from itertools import groupby
from operator import itemgetter

lst = [('0',[0,0]), ('1',[2,1]), ('0',[5,1]), ('1',[20,1])]
lst = sorted(lst, key=itemgetter(0))
lsta = []
for k, g in groupby(lst, key=itemgetter(0)):
    x = list(g)
    lsta.append((k, x[0][1] + x[1][1]))
d = dict(lsta)
# {'0': [0, 0, 5, 1], '1': [2, 1, 20, 1]}
</code></pre>
</div>
<span class="comment-copy">What is the expected output?</span>
<span class="comment-copy">Furthermore the above is <i>non-sensical</i>: in a dictionary a key maps to exactly <i>one</i> value. So you can not add two entries with <code>'1'</code> as key.</span>
<span class="comment-copy">The datastructure <code>dictionaryofinputs</code> cannot exist in Python as you posted it.</span>
<span class="comment-copy">@WillemVanOnsem the output that I would like is locationcoor = [[2,1],20,1]</span>
<span class="comment-copy">@a.l: the point is that your <code>dictionaryofinputs</code> can <i>never</i> exist, since one of the two values will already be erased upon <i>construction</i> of the dictionary.</span>
