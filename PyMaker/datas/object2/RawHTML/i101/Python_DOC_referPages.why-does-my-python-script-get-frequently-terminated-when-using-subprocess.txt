<div class="post-text" itemprop="text">
<p>I have this code. Basically I using subprocess to execute a program several times in a while loop. It works fine but after several times (5 times to be precise) the my python script just terminates and it still has a long way before finishing.</p>
<pre><code>        while x &lt; 50:

            # ///////////I am doing things here/////////////////////

            cmdline = 'gmx mdrun -ntomp 1 -v -deffnm my_sim'
            args = shlex.split(cmdline)
            proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            output = proc.communicate()[0].decode()

            # ///////////I am doing things here/////////////////////
            x += 1
</code></pre>
<p>For each time I am calling program, it will take approximately one hour to finish. In the mean time subprocess should wait because depending on the output I must execute parts of my code (that is why I am using .communicate() ).</p>
<p>Why is this happening?</p>
<p>Thanks for the help in advanced!</p>
</div>
<div class="post-text" itemprop="text">
<p>A subprocess runs asynchronously in the background (since it's a different process) and you need to use <a href="https://docs.python.org/3.7/library/subprocess.html#subprocess.Popen.wait" rel="nofollow noreferrer">subprocess.wait()</a> to wait for it to finish. Since you have <em>multiple</em> subprocesses you'll likely want to wait on all of them, like this:</p>
<pre><code>exit_codes = [p.wait() for p in (p1, p2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To solve this problem I suggest doing the following:</p>
<pre><code>    while x &lt; 50:

        # ///////////I am doing things here/////////////////////

        cmdline = 'gmx mdrun -ntomp 1 -v -deffnm my_sim 2&gt;&amp;1 | tee output.txt'
        proc = subprocess.check_output(args, shell=True)
        with open('output.txt', 'r') as fin:
        out_file = fin.read()

        # ///////////Do what ever you need with the out_file/////////////   


        # ///////////I am doing things here/////////////////////
        x += 1
</code></pre>
<p>I know it is not recommended to use shell=True, so if you do not want to use it then just pass the cmdline you with commas. Be aware that you might get an error when passing with commas. I do want to go into details but in that case you can use shell=True and your problem will be gone.</p>
<p>Using the piece of code I just provided your python script will not terminate abruptly when using subprocess many time and with programs that have a lot of stdout and stderr messages. </p>
<p>It tool some time to discover this and I hope I can help someone out there.</p>
</div>
<span class="comment-copy">Does your script actually wait on anything after calling <code>Popen</code>?  I think you need a call to <code>proc.wait()</code> or <code>proc.communicate()</code>, unless I am misunderstanding your goal.</span>
<span class="comment-copy">Could you check the system monitor for memory usage while this script is running? It looks like a memory overflow situation.</span>
<span class="comment-copy">for this particular case I need to know in the output text if there is any error word. That is why I am using .decode(). Then I look for the string 'error'. If there is one I take some measurements, and there is non I take other measurements.  If I use proc.wait() it should be just after proc = .....?</span>
<span class="comment-copy">Also, is there a big difference between using proc.stdout.read() and proc.communicate()?</span>
<span class="comment-copy">@ Paandittya my problem still persists after using communicate(). How can I check if I have memory leaks? I running my script in a host centos 7.0 machine</span>
<span class="comment-copy">that command line you . are suggesting to put it at the end of my while loop?</span>
<span class="comment-copy">That line is valid Python code.</span>
<span class="comment-copy">Thanks Kristopher. Could you please help me telling where to put it?</span>
<span class="comment-copy">Yes in that case you can just use <code>proc.wait()</code> inside the loop</span>
<span class="comment-copy"><code>communicate()</code> mostly replaces the need for <code>read()</code> and <code>wait()</code></span>
<span class="comment-copy">I highly doubt your answer provides any help. For once, the OP is correctly using <code>shlex.split</code> to launch <code>Popen</code>. Using <code>shell=True</code> will <b>not</b> fix anything, it will just open a security hole and add some overhead to the subprocesses. Also the OP is already using <code>communicate</code> which blocks and waits the subprocess.</span>
<span class="comment-copy">It depends. I am telling you when using shlex.split that command line cmdline did not work. Only when I used shell=True. I am using a host machine superPC centos 7.0. What you say is valid, communicate() should work but it did not for me. The only whay I was able to solve my problem was the script provided</span>
<span class="comment-copy">How much output does the subprocess produce? How much RAM does your computer have available? As mentioned <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">in the documentation</a> <code>communicate</code> will buffer all output in memory which might be an issue. Also, I repeat, you do <i>not</i> need <code>shell=True</code>. What you want to do is open the file and pass it to <code>stdout</code>: <code>with open('output.txt', 'w') as out: Popen(..., stdout=out)</code>.</span>
<span class="comment-copy">Command line: The error I have when using shlex is:   <code>gmx grompp -f em_ini.mdp -c cnc1_ions.gro -p topol.top -o cnc1_em.tpr -maxwarn 2 2&gt;&amp;1 | tee outGromppEmInitial.txt  Program:     gmx grompp, version 2018.3 Source file: src/gromacs/commandline/cmdlineparser.cpp (line 276) Function:    void gmx::CommandLineParser::parse(int *, char **)  Error in user input: Invalid command-line options   In command-line option -maxwarn     Invalid values: '2&gt;&amp;1', '|', 'tee', 'outGromppEmInitial.txt'; expected an integer</code>  Using shell=True I do not have that problem.</span>
<span class="comment-copy">@Bakuriu For your suggestion above, about using : stdout: with open('output.txt', 'w') as out: Popen(..., stdout=out), could you please provide the example as a formal answer so I can get the way you are telling me it should be done? Thanks</span>
