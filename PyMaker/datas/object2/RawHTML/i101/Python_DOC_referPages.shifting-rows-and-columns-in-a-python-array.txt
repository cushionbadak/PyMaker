<div class="post-text" itemprop="text">
<p>I'm building a basic mapping robot where all the data is stored on a 2D python array. However I am unable to find any way to move entire rows or columns over and then insert a blank row/column in. For example:</p>
<pre><code>['#','0','0']        
['0','1','0']                                            
['#','0','0']
</code></pre>
<p>if moved to the right to look like :</p>
<pre><code>['0','#','0']        
['0','0','1']                                            
['0','#','0']
</code></pre>
<p>or</p>
<pre><code>['#','0','#']         
['0','1','0']                                     
['0','0','0']                                     
</code></pre>
<p>if moved down to look like :</p>
<pre><code>['0','0','0']         
['#','0','#']                                     
['0','1','0']
</code></pre>
<p>I have already figured out how to expand the array whenever something is detected outside of the pre-defined array however I am unable to move rows and columns like demonstrated above.</p>
<p>Any help would be greatly appreciated. Thanks :)</p>
</div>
<div class="post-text" itemprop="text">
<p>The numpy solutions work great, but here is a solution in pure Python, with no imports. Note that most of this code just prints the results--each roll uses only one line of code. I also added <code>shiftedup</code>, where the matrix is rotated up then the last row is replaced with all zeros (though it is done more efficiently than that).</p>
<pre><code>myarray = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
]
print('\nOriginal:')
for row in myarray:
    print(row)

rolledup = myarray[1:] + myarray[:1]
print('\nRolled up:')
for row in rolledup:
    print(row)

rolleddown = myarray[-1:] + myarray[:-1]
print('\nRolled down:')
for row in rolleddown:
    print(row)

rolledleft = [row[1:] + row[:1] for row in myarray]
print('\nRolled left:')
for row in rolledleft:
    print(row)

rolledright = [row[-1:] + row[:-1] for row in myarray]
print('\nRolled right:')
for row in rolledright:
    print(row)

shiftedup= myarray[1:] + [[0] * len(myarray[0])]
print('\nShifted up:')
for row in shiftedup:
    print(row)
</code></pre>
<p>The printout from that is:</p>
<pre><code>Original:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]

Rolled up:
[4, 5, 6]
[7, 8, 9]
[1, 2, 3]

Rolled down:
[7, 8, 9]
[1, 2, 3]
[4, 5, 6]

Rolled left:
[2, 3, 1]
[5, 6, 4]
[8, 9, 7]

Rolled right:
[3, 1, 2]
[6, 4, 5]
[9, 7, 8]

Shifted up:
[4, 5, 6]
[7, 8, 9]
[0, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you looked at numpy and numpy.roll for this?</p>
<pre><code>import numpy as np
a = np.array([['#','0','0'],
['0','1','0'],                                           
['#','0','0']])
</code></pre>
<p>then you can shift right:</p>
<pre><code>a = np.roll(a,1)
a[:,0] = 0
</code></pre>
<p>shift left:</p>
<pre><code>a = np.roll(a,-1)
a[:,-1] = 0
</code></pre>
<p>shift up:</p>
<pre><code>a = np.roll(a,-1,axis = 0)
a[-1,:] = 0
</code></pre>
<p>shift down:</p>
<pre><code>a = np.roll(a,1,axis = 0)
a[0,:] = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a class to handle this movements like this:</p>
<pre><code>class Board(object):
    def __init__(self, rows):
        self.rows = rows
        self.print_status()

    def print_status(self):
        for row in self.rows:
            print(row)

    def right(self):
        new_rows = []
        for row in self.rows:
            row = row[-1:] + row[:len(row)-1]
            new_rows.append(row)
        self.rows = new_rows
        self.print_status()

    def left(self):
        new_rows = []
        for row in self.rows:
            row = row[1:] + row[:1]
            new_rows.append(row)
        self.rows = new_rows
        self.print_status()

    def up(self):
        new_rows = []
        for row in self.rows[1:]:
            new_rows.append(row)
        new_rows.append(self.rows[0])
        self.rows = new_rows
        self.print_status()

    def down(self):
        new_rows = []
        new_rows.append(self.rows[-1])
        for row in self.rows[:-1]:
            new_rows.append(row)
        self.rows = new_rows
        self.print_status()
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; a = Board([[1,2,3],[4,5,6],[7,8,9]])
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]

&gt;&gt;&gt; a.down()
[7, 8, 9]
[1, 2, 3]
[4, 5, 6]

&gt;&gt;&gt; a.up()
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]

&gt;&gt;&gt; a.right()
[3, 1, 2]
[6, 4, 5]
[9, 7, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be easily done by "roll" function from numpy<br/>
example in your case:<br/></p>
<pre><code>import numpy as np
a = np.array([['#','0','0'], ['0','1','0'], ['#','0','0']])
</code></pre>
<p>output will be:</p>
<pre><code>array([['#', '0', '0'],
   ['0', '1', '0'],
   ['#', '0', '0']], dtype='&lt;U1')
</code></pre>
<p>for 1st usecase:</p>
<pre><code>np.roll(a, 1, 1)
</code></pre>
<p>output will be</p>
<pre><code>array([['0', '#', '0'],
   ['0', '0', '1'],
   ['0', '#', '0']], dtype='&lt;U1')
</code></pre>
<p>for second case yo can simply take transpose:</p>
<pre><code>a.T
</code></pre>
<p>and output will be </p>
<pre><code>array([['#', '0', '#'],
   ['0', '1', '0'],
   ['0', '0', '0']], dtype='&lt;U1')
</code></pre>
<p>Third case be done by applying numpy roll operation on transpose matrix</p>
<pre><code>np.roll(a.T, 1, 0)
</code></pre>
<p>output</p>
<pre><code>array([['0', '0', '0'],
   ['#', '0', '#'],
   ['0', '1', '0']], dtype='&lt;U1')
</code></pre>
</div>
<span class="comment-copy">Do you know of anyway of having the numbers at the top replace to the bottom but to replace then with a row of zero's instead. i.e: [1,2,3][4,5,6][7,8,9] becomes [4,5,6][7,8,9][0,0,0]</span>
<span class="comment-copy">@user9015687: See the additions to my code and the printout.</span>
<span class="comment-copy">Thanks that is working perfectly. I'm a bit confused with the use of colons in manipulating the arrays, I've seen them all over the place but I don't really understand them. You wouldn't be able to tell me what they mean could you. Thanks</span>
<span class="comment-copy">@user9015687: That is Python's slice notation. Start with <a href="https://stackoverflow.com/questions/509211/understanding-slice-notation#509295">this answer on this site</a> and <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">the official tutorial</a>, and if you still do not understand slices, do a web search on "python slice." Those explain better than I could.</span>
<span class="comment-copy">roll alone doesn't insert blank rows, it simply takes from the other side of the array.</span>
