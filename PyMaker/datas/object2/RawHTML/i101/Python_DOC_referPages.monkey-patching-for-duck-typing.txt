<div class="post-text" itemprop="text">
<pre><code># python3.7
Python 3.7.2 (default, Feb 15 2019, 16:54:46) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from collections.abc import *
&gt;&gt;&gt; from _collections_abc import _check_methods
&gt;&gt;&gt; class A:
...     pass
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; isinstance(a, Iterable)
False
&gt;&gt;&gt; A.__iter__ = 100
&gt;&gt;&gt; isinstance(a, Iterable)             # why this not working?
False
&gt;&gt;&gt; _check_methods(A, "__iter__")
True
&gt;&gt;&gt; class B:
...     def __iter__(self):
...             pass
... 
&gt;&gt;&gt; isinstance(B(), Iterable)
True
</code></pre>
<p>I patched <code>A</code> with <code>__iter__</code>, so <code>isinstance(a, Iterable)</code> should returns <code>True</code>, since it hehaves like an iterable now for having <code>__iter__</code> defined. From the <a href="https://github.com/python/cpython/blob/master/Lib/_collections_abc.py" rel="nofollow noreferrer">source</a>, <code>Iterable</code> determines only based on whether the class has <code>__iter__</code> implemented.</p>
<p>So why does this monkey patch not working as I expected?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dynamically implementing (or un-implementing) abstract methods isn't supported. The <code>abc</code> machinery does a lot of caching to speed up <code>isinstance</code> and <code>issubclass</code> checks, and there's no option to manually reset the cache. The fact that <code>A</code> isn't a subclass of <code>Iterable</code> is cached after the first <code>isinstance</code> call, causing a <code>False</code> result for the second call.</p>
<p>The closest the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">docs</a> come to describing the caching behavior is the following line:</p>
<blockquote>
<p>Dynamically adding abstract methods to a class, or attempting to modify the abstraction status of a method or class once it is created, are not supported.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><strike>you add variable <code>__iter__</code> to <code>a</code>. you must add it as a method like this</strike>:</p>
<pre><code> class A:
     pass

 def foo(self):
     pass

 A.__iter__ = foo
 a = A()
 isinstance(a, Iterable)
 # True
</code></pre>
<p><strong>UPDATE</strong>: this answer is accidentally returns True. this just returns True because I set <strong>iter</strong> and then call isinstance. If I first call isinstance and then set <strong>iter</strong> it always returns False because of python caching system (read the answer of user2357112)</p>
</div>
<span class="comment-copy">thanks, I just realize the instance check got returned in <code>__instancecheck__</code> because of the caching in <code>cls._abc_negative_cache</code>before jumping into <code>__subclasscheck__</code>.</span>
<span class="comment-copy">You do save my day!!!</span>
<span class="comment-copy">While <code>__iter__</code> does need to be a method, making it a method doesn't actually change the <code>isinstance</code> behavior. You're seeing a <code>True</code> result for other reasons - you removed the first <code>isinstance</code> check.</span>
<span class="comment-copy">@user2357112. Yes you are right.</span>
