<div class="post-text" itemprop="text">
<p>I have a numpy array, and I would like to shuffle parts of it. For example, with the following array:</p>
<pre><code>import numpy as np
import random

a = np.arange(15)
# =&gt; array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
</code></pre>
<p>I want to do:</p>
<pre><code>shuffle_parts(a, [(0, 3), (10, 13)])
# =&gt; array([ 2,  0,  1,  3,  4,  5,  6,  7,  8,  9, 12, 11, 10, 13, 14])
#            ^^^^^^^^^                              ^^^^^^^^^^
#            Shuffle those 3 values                 and those 3 values
</code></pre>
<p>The following would shuffle all the array: (Not what I want)</p>
<pre><code>random.shuffle(a) 
# =&gt; array([10, 11,  8,  1, 13,  5,  9, 14,  4,  7,  2, 12,  3,  0,  6])
</code></pre>
<p>One way would be to use split / concatenate like so:</p>
<pre><code>splits = np.split(a, 5)
random.shuffle(splits[0])
random.shuffle(splits[3])
np.concatenate(splits)
# =&gt; array([ 2,  0,  1,  3,  4,  5,  6,  7,  8, 11, 10, 9, 12, 13, 14])
#            ^^^^^^^^^                          ^^^^^^^^^^
#            Correctly shuffled                 Shuffled but off by 1 index
</code></pre>
<p>This is almost what I want. My questions:</p>
<ul>
<li>Can I write <code>shuffle_parts</code> where the indices are custom (parts with arbitrary indices, not restricted to modulos, and parts with varying length)</li>
<li>Is there a method in numpy that I missed and that would help me do that?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>It can be done directly:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import random
&gt;&gt;&gt; a = np.arange(15)
&gt;&gt;&gt; s=3
&gt;&gt;&gt; f=7
&gt;&gt;&gt; random.shuffle(a[s:f])
&gt;&gt;&gt; a
array([ 0,  1,  2,  5,  4,  3,  6,  7,  8,  9, 10, 11, 12, 13, 14])
</code></pre>
<p>Indexing directly references the data, making this possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>numpy <a href="https://docs.scipy.org/doc/numpy/glossary.html#term-view" rel="nofollow noreferrer">slices are views</a> on the data below; so you can directly shuffle the slices:</p>
<pre><code>import numpy as np
import random

a = np.arange(15)

random.shuffle(a[0:3])
random.shuffle(a[10:13])
print(a)
# [ 2  0  1  3  4  5  6  7  8  9 12 10 11 13 14]
</code></pre>
<p>you could implement your <code>shuffle_parts</code> function using <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> this way then:</p>
<pre><code>def shuffle_parts(array, slices):
    for s in slices:
        random.shuffle(a[slice(*s)])

shuffle_parts(array=a, slices=((0, 3), (10, 13)))
</code></pre>
<p>or (depending on how you want to pass the slices to your function):</p>
<pre><code>def shuffle_parts(array, slices):
    for s in slices:
        random.shuffle(a[s])

shuffle_parts(array=a, slices=(slice(0, 3), slice(10, 13)))
</code></pre>
<p>personally i'd prefer the second version (that way you could also e.g. shuffle the even indices: <code>shuffle_parts(array=a, slices=(slice(None, None, 2), ))</code>)...</p>
</div>
<span class="comment-copy">Just shuffle sliced views of the array, for instance <code>np.random.shuffle(a[0:3])</code></span>
<span class="comment-copy">My code is running inside workers running in parallel, and I've noticed that all random values end up the same (for a given work batch). If I init the random seed with the worker index, that solves this problem. I don't know if this what you are warning about.</span>
<span class="comment-copy">@BenjaminCrouzier No, the random algorithm itself is "insecure". I do not think it should matter though for programs that just need some randomness in them. I noted it in case you want to read more.</span>
<span class="comment-copy">You're confusing randomness and security.  Python (and by extension numpy) use a pseudo random number generator, so it is not secure for cryptographic purposes.  For anything else, it's just fine.  This is not a weakness or drawback of the library or language - it's the same in any other language.  If you need truly random numbers, they have to come from a truly random source rather than an algorithm (and if you don't know if you do, you don't).</span>
<span class="comment-copy">@user2699 Very well, I did not want to go into such depth, but the end of your comment I think drives your point - I'll edit out the note.</span>
