<div class="post-text" itemprop="text">
<p>I have a flask restful project with the following layout (file names changed for convenience)</p>
<pre><code>myproject/
    __init__.py
    app.py
    common/
        __init__.py
        util.py
    foo/
        __init__.py
        main.py
        utilities.py
</code></pre>
<p><code>foo/</code> is just a folder containing code for one of the API endpoints, I'm planning to add others in the future, for this reason I have <code>common/util.py</code> file which contains reusable functions that I will use with other API endpoints.</p>
<p><strong><code>foo/main.py</code></strong></p>
<pre><code>from flask_restful import Resource, request

from utilities import Analysis

class Foo(Resource):
    def get(self):      
        pass
</code></pre>
<p>in <code>foo/utilities.py</code> I have classes with methods that get some data, I import those classes to <code>foo/main.py</code> to return JSON response</p>
<p>classes in <code>foo/utilities.py</code> also uses some functions from <code>common/util.py</code> but when I try to import something from <code>common/util.py</code> to <code>foo/utilities.py</code> I get <code>import common.util
ModuleNotFoundError: No module named 'common'</code></p>
<p>What could be causing this? I tried importing various ways:
<code>from common.util import my_func</code>
<code>from .common.util import my_func</code>
<code>from myproject.common.util import my_func</code></p>
<p>but none worked.</p>
<p>This is <code>myproject/app.py</code> in case it matters:</p>
<pre><code>from flask import Flask
from flask_restful import Api

from foo.main import Foo

app = Flask(__name__)
api = Api(app)

api.add_resource(Foo, '/Foo')

if __name__ == "__main__":
    app.run()
</code></pre>
<p>I'm doing all of this in activated virtualenv if it matters</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>from common.util import my_func</p>
</blockquote>
<p>In Python 3 this is an absolute import, that is, the directory with <code>common/</code> subdirectory must be in <code>sys.path</code>. In your situation it's certainly a wrong approach.</p>
<blockquote>
<p>from .common.util import my_func</p>
</blockquote>
<p>This import expects <code>common</code> to be a subdirectory of <code>foo</code> which is also not the case.</p>
<blockquote>
<p>from myproject.common.util import my_func</p>
</blockquote>
<p>This is finally the best approach but for it to work the parent directory of <code>myproject/</code> subdirectory must be in <code>sys.path</code>. Either you install the entire <code>myproject</code> or add the parent directory to <code>$PYTHONPATH</code> environment variable or add the directory to <code>sys.path</code> in <code>foo/main.py</code>. Something like:</p>
<pre><code>PYTHONPATH=/home/to/parentdir /home/to/parentdir/myproject/foo/main.py
</code></pre>
<p>or</p>
<pre><code>import sys
sys.path.insert(0, '/home/to/parentdir')
</code></pre>
<p><code>/home/to/parentdir</code> is the directory where <code>myproject/</code> is.</p>
<p>After installing <code>myproject</code> or adding its parent directory to <code>sys.path</code> you can also use relative import. You need to remember that <code>common</code> is a sibling package comparing to <code>foo</code> so the import must be not from <code>.common</code> but from <code>..common</code>:</p>
<pre><code>from ..common.util import my_func
</code></pre>
</div>
<span class="comment-copy">What Python version? Py2 and Py3 have different rules about implicit relative import.</span>
<span class="comment-copy">@phd I'm using python 3</span>
<span class="comment-copy">Have you installed <code>myproject</code>? Or you simply run <code>foo/main</code> as a script without installation? In the latter case <code>myproject</code> is not available in <code>sys.path</code>, only directory <code>foo</code> is and it's not a package so you cannot use relative import.</span>
<span class="comment-copy">What do you mean by installing? I don't run <code>foo/main.py</code> I run <code>myproject/app.py</code> to run the whole API, it runs fine but the import of <code>common.util</code> fails in <code>foo/utilities.py</code>, to test it I run <code>foo/utilities.py</code> and I get the error I wrote above</span>
<span class="comment-copy">Putting a copy of <code>myproject</code> into <code>site-packages/</code> directory of the current Python (or any directory that's already in <code>sys.path</code>) by running <code>python setup.py install</code> or <a href="https://docs.python.org/3/installing/index.html" rel="nofollow noreferrer"><code>pip install</code></a>. Of course you have to have <a href="https://docs.python.org/3/distributing/index.html" rel="nofollow noreferrer"><code>setup.py</code></a>.</span>
<span class="comment-copy">Thanks, it worked.  in <code>myproject/app.py</code> I added the following at the top: <code>import sys sys.path.insert('path/to/parent/of/myproject')</code> and everything is fine. Only problem is that in <code>foo/utilities.py</code> I have to use absolute import like <code>from myproject.common.util import</code> but that'll do for the time being</span>
<span class="comment-copy"><code>sys.path.insert(0, 'path/to/parent')</code> not <code>sys.path.insert('path/to/parent')</code></span>
<span class="comment-copy">Fixed, thank you!</span>
