<div class="post-text" itemprop="text">
<p>For a list <code>["foo", "bar", "baz"]</code> and an item in the list <code>"bar"</code>, how do I get its index (1) in Python?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; ["foo", "bar", "baz"].index("bar")
1
</code></pre>
<p>Reference: <a href="http://docs.python.org/2/tutorial/datastructures.html#more-on-lists" rel="noreferrer">Data Structures &gt; More on Lists</a></p>
<h1>Caveats follow</h1>
<p>Note that while this is perhaps the cleanest way to answer the question <em>as asked</em>, <code>index</code> is a rather weak component of the <code>list</code> API, and I can't remember the last time I used it in anger. It's been pointed out to me in the comments that because this answer is heavily referenced, it should be made more complete. Some caveats about <code>list.index</code> follow. It is probably worth initially taking a look at the docstring for it:</p>
<pre><code>&gt;&gt;&gt; print(list.index.__doc__)
L.index(value, [start, [stop]]) -&gt; integer -- return first index of value.
Raises ValueError if the value is not present.
</code></pre>
<h2>Linear time-complexity in list length</h2>
<p>An <code>index</code> call checks every element of the list in order, until it finds a match. If your list is long, and you don't know roughly where in the list it occurs, this search could become a bottleneck. In that case, you should consider a different data structure. Note that if you know roughly where to find the match, you can give <code>index</code> a hint. For instance, in this snippet, <code>l.index(999_999, 999_990, 1_000_000)</code> is roughly five orders of magnitude faster than straight <code>l.index(999_999)</code>, because the former only has to search 10 entries, while the latter searches a million:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('l.index(999_999)', setup='l = list(range(0, 1_000_000))', number=1000)
9.356267921015387
&gt;&gt;&gt; timeit.timeit('l.index(999_999, 999_990, 1_000_000)', setup='l = list(range(0, 1_000_000))', number=1000)
0.0004404920036904514
</code></pre>
<h2>Only returns the index of the <em>first match</em> to its argument</h2>
<p>A call to <code>index</code> searches through the list in order until it finds a match, and <em>stops there.</em> If you expect to need indices of more matches, you should use a list comprehension, or generator expression.</p>
<pre><code>&gt;&gt;&gt; [1, 1].index(1)
0
&gt;&gt;&gt; [i for i, e in enumerate([1, 2, 1]) if e == 1]
[0, 2]
&gt;&gt;&gt; g = (i for i, e in enumerate([1, 2, 1]) if e == 1)
&gt;&gt;&gt; next(g)
0
&gt;&gt;&gt; next(g)
2
</code></pre>
<p>Most places where I once would have used <code>index</code>, I now use a list comprehension or generator expression because they're more generalizable. So if you're considering reaching for <code>index</code>, take a look at these excellent python features.</p>
<h2>Throws if element not present in list</h2>
<p>A call to <code>index</code> results in a <code>ValueError</code> if the item's not present.</p>
<pre><code>&gt;&gt;&gt; [1, 1].index(2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: 2 is not in list
</code></pre>
<p>If the item might not be present in the list, you should either </p>
<ol>
<li>Check for it first with <code>item in my_list</code> (clean, readable approach), or</li>
<li>Wrap the <code>index</code> call in a <code>try/except</code> block which catches <code>ValueError</code> (probably faster, at least when the list to search is long, and the item is usually present.)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>One thing that is really helpful in learning Python is to use the interactive help function:</p>
<pre><code>&gt;&gt;&gt; help(["foo", "bar", "baz"])
Help on list object:

class list(object)
 ...

 |
 |  index(...)
 |      L.index(value, [start, [stop]]) -&gt; integer -- return first index of value
 |
</code></pre>
<p>which will often lead you to the method you are looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>The majority of answers explain how to find <strong>a single index</strong>, but their methods do not return multiple indexes if the item is in the list multiple times. Use <a href="https://docs.python.org/3.6/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code></a>:</p>
<pre><code>for i, j in enumerate(['foo', 'bar', 'baz']):
    if j == 'bar':
        print(i)
</code></pre>
<p>The <code>index()</code> function only returns the first occurrence, while <code>enumerate()</code> returns all occurrences.</p>
<p>As a list comprehension:</p>
<pre><code>[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'bar']
</code></pre>
<hr/>
<p>Here's also another small solution with <a href="http://docs.python.org/2/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count()</code></a> (which is pretty much the same approach as enumerate):</p>
<pre><code>from itertools import izip as zip, count # izip for maximum efficiency
[i for i, j in zip(count(), ['foo', 'bar', 'baz']) if j == 'bar']
</code></pre>
<p>This is more efficient for larger lists than using <code>enumerate()</code>:</p>
<pre><code>$ python -m timeit -s "from itertools import izip as zip, count" "[i for i, j in zip(count(), ['foo', 'bar', 'baz']*500) if j == 'bar']"
10000 loops, best of 3: 174 usec per loop
$ python -m timeit "[i for i, j in enumerate(['foo', 'bar', 'baz']*500) if j == 'bar']"
10000 loops, best of 3: 196 usec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get all indexes:</p>
<pre><code> indexes = [i for i,x in enumerate(xs) if x == 'foo']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>index()</code> returns the <strong>first</strong> index of value!</p>
<blockquote>
<p>|  index(...)<br/>
   |      L.index(value, [start, [stop]]) -&gt; integer -- return first index of value</p>
</blockquote>
<pre><code>def all_indices(value, qlist):
    indices = []
    idx = -1
    while True:
        try:
            idx = qlist.index(value, idx+1)
            indices.append(idx)
        except ValueError:
            break
    return indices

all_indices("foo", ["foo","bar","baz","foo"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A problem will arise if the element is not in the list. This function handles the issue:</p>
<pre><code># if element is found it returns index of element else returns None

def find_element_in_list(element, list_element):
    try:
        index_element = list_element.index(element)
        return index_element
    except ValueError:
        return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = ["foo","bar","baz",'bar','any','much']

indexes = [index for index in range(len(a)) if a[index] == 'bar']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to set a condition to check if the element you're searching is in the list</p>
<pre><code>if 'your_element' in mylist:
    print mylist.index('your_element')
else:
    print None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All of the proposed functions here reproduce inherent language behavior but obscure what's going on.</p>
<pre><code>[i for i in range(len(mylist)) if mylist[i]==myterm]  # get the indices

[each for each in mylist if each==myterm]             # get the items

mylist.index(myterm) if myterm in mylist else None    # get the first index and fail quietly
</code></pre>
<p>Why write a function with exception handling if the language provides the methods to do what you want itself?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want all indexes, then you can use <a href="http://en.wikipedia.org/wiki/NumPy" rel="noreferrer">NumPy</a>:</p>
<pre><code>import numpy as np

array = [1, 2, 1, 3, 4, 5, 1]
item = 1
np_array = np.array(array)
item_index = np.where(np_array==item)
print item_index
# Out: (array([0, 2, 6], dtype=int64),)
</code></pre>
<p>It is clear, readable solution.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>Finding the index of an item given a list containing it in Python</h2>
<p>For a list <code>["foo", "bar", "baz"]</code> and an item in the list <code>"bar"</code>, what's the cleanest way to get its index (1) in Python?</p>
</blockquote>
<p>Well, sure, there's the index method, which returns the index of the first occurrence:</p>
<pre><code>&gt;&gt;&gt; l = ["foo", "bar", "baz"]
&gt;&gt;&gt; l.index('bar')
1
</code></pre>
<p>There are a couple of issues with this method:</p>
<ul>
<li>if the value isn't in the list, you'll get a <code>ValueError</code></li>
<li>if more than one of the value is in the list, you only get the index for the first one</li>
</ul>
<h3>No values</h3>
<p>If the value could be missing, you need to catch the <code>ValueError</code>. </p>
<p>You can do so with a reusable definition like this:</p>
<pre><code>def index(a_list, value):
    try:
        return a_list.index(value)
    except ValueError:
        return None
</code></pre>
<p>And use it like this:</p>
<pre><code>&gt;&gt;&gt; print(index(l, 'quux'))
None
&gt;&gt;&gt; print(index(l, 'bar'))
1
</code></pre>
<p>And the downside of this is that you will probably have a check for if the returned value <code>is</code> or <code>is not</code> None:</p>
<pre><code>result = index(a_list, value)
if result is not None:
    do_something(result)
</code></pre>
<h3>More than one value in the list</h3>
<p>If you could have more occurrences, you'll <strong>not</strong> get complete information with <code>list.index</code>:</p>
<pre><code>&gt;&gt;&gt; l.append('bar')
&gt;&gt;&gt; l
['foo', 'bar', 'baz', 'bar']
&gt;&gt;&gt; l.index('bar')              # nothing at index 3?
1
</code></pre>
<p>You might enumerate into a list comprehension the indexes:</p>
<pre><code>&gt;&gt;&gt; [index for index, v in enumerate(l) if v == 'bar']
[1, 3]
&gt;&gt;&gt; [index for index, v in enumerate(l) if v == 'boink']
[]
</code></pre>
<p>If you have no occurrences, you can check for that with boolean check of the result, or just do nothing if you loop over the results:</p>
<pre><code>indexes = [index for index, v in enumerate(l) if v == 'boink']
for index in indexes:
    do_something(index)
</code></pre>
<h3>Better data munging with pandas</h3>
<p>If you have pandas, you can easily get this information with a Series object:</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; series = pd.Series(l)
&gt;&gt;&gt; series
0    foo
1    bar
2    baz
3    bar
dtype: object
</code></pre>
<p>A comparison check will return a series of booleans:</p>
<pre><code>&gt;&gt;&gt; series == 'bar'
0    False
1     True
2    False
3     True
dtype: bool
</code></pre>
<p>Pass that series of booleans to the series via subscript notation, and you get just the matching members:</p>
<pre><code>&gt;&gt;&gt; series[series == 'bar']
1    bar
3    bar
dtype: object
</code></pre>
<p>If you want just the indexes, the index attribute returns a series of integers:</p>
<pre><code>&gt;&gt;&gt; series[series == 'bar'].index
Int64Index([1, 3], dtype='int64')
</code></pre>
<p>And if you want them in a list or tuple, just pass them to the constructor:</p>
<pre><code>&gt;&gt;&gt; list(series[series == 'bar'].index)
[1, 3]
</code></pre>
<p>Yes, you could use a list comprehension with enumerate too, but that's just not as elegant, in my opinion - you're doing tests for equality in Python, instead of letting builtin code written in C handle it:</p>
<pre><code>&gt;&gt;&gt; [i for i, value in enumerate(l) if value == 'bar']
[1, 3]
</code></pre>
<h2>Is this an <a href="https://meta.stackexchange.com/a/66378/239121">XY problem</a>?</h2>
<blockquote>
<p>The XY problem is asking about your attempted solution rather than your actual problem.</p>
</blockquote>
<p>Why do you think you need the index given an element in a list? </p>
<p>If you already know the value, why do you care where it is in a list?</p>
<p>If the value isn't there, catching the <code>ValueError</code> is rather verbose - and I prefer to avoid that.</p>
<p>I'm usually iterating over the list anyways, so I'll usually keep a pointer to any interesting information, getting the <a href="https://stackoverflow.com/q/522563/541136">index with enumerate.</a></p>
<p>If you're munging data, you should probably be using pandas - which has far more elegant tools than the pure Python workarounds I've shown.</p>
<p>I do not recall needing <code>list.index</code>, myself. However, I have looked through the Python standard library, and I see some excellent uses for it. </p>
<p>There are many, many uses for it in <code>idlelib</code>, for GUI and text parsing.</p>
<p>The <code>keyword</code> module uses it to find comment markers in the module to automatically regenerate the list of keywords in it via metaprogramming.</p>
<p>In Lib/mailbox.py it seems to be using it like an ordered mapping:</p>
<pre><code>key_list[key_list.index(old)] = new
</code></pre>
<p>and</p>
<pre><code>del key_list[key_list.index(key)]
</code></pre>
<p>In Lib/http/cookiejar.py, seems to be used to get the next month:</p>
<pre><code>mon = MONTHS_LOWER.index(mon.lower())+1
</code></pre>
<p>In Lib/tarfile.py similar to distutils to get a slice up to an item:</p>
<pre><code>members = members[:members.index(tarinfo)]
</code></pre>
<p>In Lib/pickletools.py:</p>
<pre><code>numtopop = before.index(markobject)
</code></pre>
<p>What these usages seem to have in common is that they seem to operate on lists of constrained sizes (important because of O(n) lookup time for <code>list.index</code>), and they're mostly used in parsing (and UI in the case of Idle). </p>
<p>While there are use-cases for it, they are fairly uncommon. If you find yourself looking for this answer, ask yourself if what you're doing is the most direct usage of the tools provided by the language for your use-case.</p>
</div>
<div class="post-text" itemprop="text">
<p>All indexes with the <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> function:</p>
<pre><code>get_indexes = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if x == y]

print get_indexes(2, [1, 2, 3, 4, 5, 6, 3, 2, 3, 2])
print get_indexes('f', 'xsfhhttytffsafweef')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Getting all the occurrences and the position of one or more (identical) items in a list</h3>
<p>With enumerate(alist) you can store the first element (n) that is the index of the list when the element x is equal to what you look for.</p>
<pre><code>&gt;&gt;&gt; alist = ['foo', 'spam', 'egg', 'foo']
&gt;&gt;&gt; foo_indexes = [n for n,x in enumerate(alist) if x=='foo']
&gt;&gt;&gt; foo_indexes
[0, 3]
&gt;&gt;&gt;
</code></pre>
<h3>Let's make our function findindex</h3>
<p>This function takes the item and the list as arguments and return the position of the item in the list, like we saw before.</p>
<pre><code>def indexlist(item2find, list_or_string):
  "Returns all indexes of an item in a list or a string"
  return [n for n,item in enumerate(list_or_string) if item==item2find]

print(indexlist("1", "010101010"))
</code></pre>
<hr/>
<p><strong>Output</strong></p>
<hr/>
<pre><code>[1, 3, 5, 7]
</code></pre>
<h2>Simple</h2>
<pre><code>for n, i in enumerate([1, 2, 3, 4, 1]):
    if i == 1:
        print(n)
</code></pre>
<p>Output:</p>
<pre><code>0
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply you can go with</p>
<pre><code>a = [['hand', 'head'], ['phone', 'wallet'], ['lost', 'stock']]
b = ['phone', 'lost']

res = [[x[0] for x in a].index(y) for y in b]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option</p>
<pre><code>&gt;&gt;&gt; a = ['red', 'blue', 'green', 'red']
&gt;&gt;&gt; b = 'red'
&gt;&gt;&gt; offset = 0;
&gt;&gt;&gt; indices = list()
&gt;&gt;&gt; for i in range(a.count(b)):
...     indices.append(a.index(b,offset))
...     offset = indices[-1]+1
... 
&gt;&gt;&gt; indices
[0, 3]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A variant on the answer from FMc and user7177 will give a dict that can return all indices for any entry:</p>
<pre><code>&gt;&gt;&gt; a = ['foo','bar','baz','bar','any', 'foo', 'much']
&gt;&gt;&gt; l = dict(zip(set(a), map(lambda y: [i for i,z in enumerate(a) if z is y ], set(a))))
&gt;&gt;&gt; l['foo']
[0, 5]
&gt;&gt;&gt; l ['much']
[6]
&gt;&gt;&gt; l
{'baz': [2], 'foo': [0, 5], 'bar': [1, 3], 'any': [4], 'much': [6]}
&gt;&gt;&gt; 
</code></pre>
<p>You could also use this as a one liner to get all indices for a single entry. There are no guarantees for efficiency, though I did use set(a) to reduce the number of times the lambda is called.</p>
</div>
<div class="post-text" itemprop="text">
<h1>And now, for something completely different...  </h1>
<p>... like confirming the existence of the item before getting the index.  The nice thing about this approach is the function always returns a list of indices -- even if it is an empty list.  It works with strings as well.</p>
<pre><code>def indices(l, val):
    """Always returns a list containing the indices of val in the_list"""
    retval = []
    last = 0
    while val in l[last:]:
            i = l[last:].index(val)
            retval.append(last + i)
            last += i + 1   
    return retval

l = ['bar','foo','bar','baz','bar','bar']
q = 'bar'
print indices(l,q)
print indices(l,'bat')
print indices('abcdaababb','a')
</code></pre>
<p>When pasted into an interactive python window:</p>
<pre><code>Python 2.7.6 (v2.7.6:3a1db0d2747e, Nov 10 2013, 00:42:54) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def indices(the_list, val):
...     """Always returns a list containing the indices of val in the_list"""
...     retval = []
...     last = 0
...     while val in the_list[last:]:
...             i = the_list[last:].index(val)
...             retval.append(last + i)
...             last += i + 1   
...     return retval
... 
&gt;&gt;&gt; l = ['bar','foo','bar','baz','bar','bar']
&gt;&gt;&gt; q = 'bar'
&gt;&gt;&gt; print indices(l,q)
[0, 2, 4, 5]
&gt;&gt;&gt; print indices(l,'bat')
[]
&gt;&gt;&gt; print indices('abcdaababb','a')
[0, 4, 5, 7]
&gt;&gt;&gt; 
</code></pre>
<h1>Update</h1>
<p>After another year of heads-down python development, I'm a bit embarrassed by my original answer, so to set the record straight, one can certainly use the above code; however, the <em>much</em> more idiomatic way to get the same behavior would be to use list comprehension, along with the enumerate() function.  </p>
<p>Something like this:  </p>
<pre><code>def indices(l, val):
    """Always returns a list containing the indices of val in the_list"""
    return [index for index, value in enumerate(l) if value == val]

l = ['bar','foo','bar','baz','bar','bar']
q = 'bar'
print indices(l,q)
print indices(l,'bat')
print indices('abcdaababb','a')
</code></pre>
<p>Which, when pasted into an interactive python window yields:</p>
<pre><code>Python 2.7.14 |Anaconda, Inc.| (default, Dec  7 2017, 11:07:58) 
[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def indices(l, val):
...     """Always returns a list containing the indices of val in the_list"""
...     return [index for index, value in enumerate(l) if value == val]
... 
&gt;&gt;&gt; l = ['bar','foo','bar','baz','bar','bar']
&gt;&gt;&gt; q = 'bar'
&gt;&gt;&gt; print indices(l,q)
[0, 2, 4, 5]
&gt;&gt;&gt; print indices(l,'bat')
[]
&gt;&gt;&gt; print indices('abcdaababb','a')
[0, 4, 5, 7]
&gt;&gt;&gt; 
</code></pre>
<p>And now, after reviewing this question and all the answers, I realize that this is exactly what <a href="https://stackoverflow.com/users/55857/fmc">FMc</a> suggested in his <a href="https://stackoverflow.com/questions/176918/finding-the-index-of-an-item-given-a-list-containing-it-in-python/17300987#17300987">earlier answer</a>.  At the time I originally answered this question, I didn't even <em>see</em> that answer, because I didn't understand it.  I hope that my somewhat more verbose example will aid understanding.  </p>
<p>If the single line of code above still <em>doesn't</em> make sense to you, I highly recommend you Google 'python list comprehension' and take a few minutes to familiarize yourself.  It's just one of the many powerful features that make it a joy to use Python to develop code.</p>
</div>
<div class="post-text" itemprop="text">
<p>This solution is not as powerful as others, but if you're a beginner and only know about <code>for</code>loops it's still possible to find the first index of an item while avoiding the ValueError:</p>
<pre><code>def find_element(p,t):
    i = 0
    for e in p:
        if e == t:
            return i
        else:
            i +=1
    return -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>name ="bar"
list = [["foo", 1], ["bar", 2], ["baz", 3]]
new_list=[]
for item in list:
    new_list.append(item[0])
print(new_list)
try:
    location= new_list.index(name)
except:
    location=-1
print (location)
</code></pre>
<p>This accounts for if the string is not in the list too, if it isn't in the list then location = -1</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python lists are zero-based, we can use the zip built-in function as follows:</p>
<pre><code>&gt;&gt;&gt; [i for i,j in zip(range(len(haystack)), haystack) if j == 'needle' ]
</code></pre>
<p>where "haystack" is the list in question and "needle" is the item to look for.</p>
<p>(Note: Here we are iterating using i to get the indexes, but if we need rather to focus on the items we can switch to j.)</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a more functional answer to this.</p>
<pre><code>list(filter(lambda x: x[1]=="bar",enumerate(["foo", "bar", "baz", "bar", "baz", "bar", "a", "b", "c"])))
</code></pre>
<p>More generic form:</p>
<pre><code>def get_index_of(lst, element):
    return list(map(lambda x: x[0],\
       (list(filter(lambda x: x[1]==element, enumerate(lst))))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>index()</code> method throws an error if the item was not found, which sucks!</p>
<p>So instead you can make it similar to the <code>indexOf()</code> function of JavaScript which returns <code>-1</code> if the item was not found:</p>
<pre><code>    try:
        index = array.index('search_keyword')
    except ValueError:
        index = -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Finding index of item x in list L:</p>
<pre><code>idx = L.index(x) if (x in L) else -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is two possibility if the list has no repeated items that you need to check the index for </p>
<pre><code> eg: li=[10,20,30] # here need to get index of 20 means
     li.index(20) # will work properly because 20 is not repeated
</code></pre>
<p>if its repeated means it will give you only the first index</p>
<p>If you need to get all the index where the item is present means</p>
<pre><code>eg: li=[10,20,30,20,40, 50, 10] # here need to get index of 20 means its have 2 index (1,3) 
</code></pre>
<p>to get that you need to do it like </p>
<pre><code> li=[10,20,30,20,40, 50, 10]
 [i for i, e in enumerate(li) if e == 20]
</code></pre>
<p>then you will get a list of index as o/p like [1,3] </p>
</div>
<div class="post-text" itemprop="text">
<p>Let’s give the name <code>lst</code> to the list that you have. One can convert the list <code>lst</code> to a <code>numpy array</code>. And, then use <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.where.html" rel="nofollow noreferrer">numpy.where</a> to get the index of the chosen item in the list. Following is the way in which you will implement it.</p>
<pre><code>import numpy as np

lst = ["foo", "bar", "baz"]  #lst: : 'list' data type
print np.where( np.array(lst) == 'bar')[0][0]

&gt;&gt;&gt; 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For those coming from another language like me, maybe with a simple loop it's easier to understand and use it:</p>
<pre><code>mylist = ["foo", "bar", "baz", "bar"]
newlist = enumerate(mylist)
for index, item in newlist:
  if item == "bar":
    print(index, item)
</code></pre>
<p>I am thankful for <em><a href="https://www.codecademy.com/en/forum_questions/5087f2d786a27b02000041a9" rel="nofollow noreferrer">So what exactly does enumerate do?</a></em>. That helped me to understand.</p>
</div>
<div class="post-text" itemprop="text">
<h1>If performance is of concern:</h1>
<p>It is mentioned in numerous answers that the built-in method of <code>list.index(item)</code> method is an O(n) algorithm. It is fine if you need to perform this once. But if you need to access the indices of elements a number of times, it makes more sense to first create a dictionary (O(n)) of item-index pairs, and then access the index at O(1) every time you need it.</p>
<p>If you are sure that the items in your list are never repeated, you can easily:</p>
<pre><code>myList = ["foo", "bar", "baz"]

# Create the dictionary
myDict = dict((e,i) for i,e in enumerate(myList))

# Lookup
myDict["bar"] # Returns 1
# myDict.get("blah") if you don't want an error to be raised if element not found.
</code></pre>
<p>If you may have duplicate elements, and need to return all of their indices:</p>
<pre><code>from collections import defaultdict as dd
myList = ["foo", "bar", "bar", "baz", "foo"]

# Create the dictionary
myDict = dd(list)
for i,e in enumerate(myList):
    myDict[e].append(i)

# Lookup
myDict["foo"] # Returns [0, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As indicated by @TerryA, many answers discuss how to find <em>one</em> index.</p>
<p><a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> is a third-party library with tools to locate <em>multiple</em> indices within an iterable. </p>
<p><strong>Given</strong></p>
<pre><code>import more_itertools as mit


iterable = ["foo", "bar", "baz", "ham", "foo", "bar", "baz"]
</code></pre>
<p><strong>Code</strong></p>
<p>Find indices of multiple observations:</p>
<pre><code>list(mit.locate(iterable, lambda x: x == "bar"))
# [1, 5]
</code></pre>
<p>Test multiple items:</p>
<pre><code>list(mit.locate(iterable, lambda x: x in {"bar", "ham"}))
# [1, 3, 5]
</code></pre>
<p>See also more options with <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.locate" rel="nofollow noreferrer"><code>more_itertools.locate</code></a>.  Install via <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>&gt; pip install more_itertools</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>using dictionary , where process the list first and then add the index to it </p>
<pre><code>from collections import defaultdict

index_dict = defaultdict(list)    
word_list =  ['foo','bar','baz','bar','any', 'foo', 'much']

for word_index in range(len(word_list)) :
    index_dict[word_list[word_index]].append(word_index)

word_index_to_find = 'foo'       
print(index_dict[word_index_to_find])

# output :  [0, 5]
</code></pre>
</div>
<span class="comment-copy">Are you returning:  [1] The lowest index in case there are multiple instances of <code>"bar"</code>, [2] All the indices of <code>"bar"</code>?</span>
<span class="comment-copy">a) Is it guaranteed that item is in the list, or else how we should handle the error case? (return None/ raise ValueError) b) Are list entries guaranteed to be unique, and should we return the first index of a match, or all indexes?</span>
<span class="comment-copy">index returns the first item whose value is "bar". If "bar" exists twice at list, you'll never find the key for the second "bar". See documentation: <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a></span>
<span class="comment-copy">How to do this for numpy array ?</span>
<span class="comment-copy">It's stipulated in the question that the item is in the list.</span>
<span class="comment-copy">@AlexCoventry: even so it's still good to show the more paranoid alternative too. Especially as this question is now canonical.</span>
<span class="comment-copy">@mpoletto the scenario you describe already has another question here on SO: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a>. This question focuses on one index only.</span>
<span class="comment-copy">Enumeration works better than the index-based methods for me, since I'm looking to gather the indices of strings using 'startswith" , and I need to gather multiple occurrences. Or is there a way to use index with "startswith" that I couldn't figure out</span>
<span class="comment-copy">In my hands, the enumerate version is consistently slightly faster. Some implementation details may have changed since the measurement above was posted.</span>
<span class="comment-copy">This was already answered since '11: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">There's already another question for this, added in '11: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">And if doesn't exist in the list?</span>
<span class="comment-copy">Not-exist item will raise ValueError</span>
<span class="comment-copy">This answer would fit better here: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">'item' is a very misleading variable name. 'index' maybe ?</span>
<span class="comment-copy">This answer should be better posted here: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">This helps us to avoid try catch!</span>
<span class="comment-copy">The 3rd method iterates twice over the list, right?</span>
<span class="comment-copy">Re: <i>"All of the proposed functions here"</i>: At the time of writing perhaps, but you ought to check newer answers to see if it is still true.</span>
<span class="comment-copy">What about lists of strings, lists of non-numeric objects, etc... ?</span>
<span class="comment-copy">This answer should be better posted here: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">This answer should be better posted here: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">This answer should be better posted here: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">This answer should be better posted here: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">This answer should be better posted here: <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list" title="how to find all occurrences of an element in a list">stackoverflow.com/questions/6294179/…</a></span>
<span class="comment-copy">Downvoted for single letter variable names.</span>
<span class="comment-copy">[i for i,j in enumerate(haystack) if j==‘needle’] is more compact and readable, I think.</span>
<span class="comment-copy">This answer feels at home for <code>Scala</code> / <i>functional-programming</i> enthusiasts</span>
<span class="comment-copy">This iterates the array twice, thus it could result in performance issues for large arrays.</span>
<span class="comment-copy">Agree. If lists are considerably long, I'd go for something else. Shouldn't be a big deal for small to medium sized lists though.</span>
