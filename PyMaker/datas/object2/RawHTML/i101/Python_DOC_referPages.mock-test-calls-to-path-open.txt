<div class="post-text" itemprop="text">
<p>I am attempting to write a unit test for a function that calls the <code>open</code> method on a <code>pathlib.Path</code>.  I am able to successfully mock the <code>open</code> method without issue, but verifying the function is having the correct behavior is difficult.  See the sample code below:</p>
<pre class="lang-py prettyprint-override"><code>def test_my_function(self):
    with patch.object(Path, 'open') as mock_open:
        my_function(*args)  # This function calls Path.open
</code></pre>
<p>When I introspect <code>mock_open</code> and review the <code>_mock_mock_calls</code> list, I am unable to find the string path of the file that is being written to.  The call history looks like this:</p>
<pre class="lang-py prettyprint-override"><code>[
    call(mode='w'),
    call().__enter__(),
    call().__enter__().write('&lt;file contents&gt;'),
    call().__enter__().flush(),
    call().__exit__(None, None, None),
]
</code></pre>
<p>Is there a way to test what path is being opened when <code>Path.open</code> is called?</p>
</div>
<div class="post-text" itemprop="text">
<p>You replaced a method with a mock object. The issue with using a mock object here is that it <em>won't be bound to the <code>Path()</code> instance</em>. It'll be called, but there is no path back to the <code>Path()</code> instance (no pun intended).</p>
<p>Use a function to mock out <code>open()</code>, one that returns a <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.mock_open" rel="nofollow noreferrer"><code>mock_open()</code> object</a> to track further 'open file' use, functions <em>will</em> be bound when accessed on instances of <code>Path</code>:</p>
<pre><code>from unittest.mock import patch, mock_open

def test_my_function(self):
    opener = mock_open()
    def mocked_open(self, *args, **kwargs):
        return opener(self, *args, **kwargs)
    with patch.object(Path, 'open', mocked_open):
        my_function(*args)  # This function calls Path.open
</code></pre>
<p>Now any <code>Path().open()</code> call will call the <code>opener</code> mock, recording all file interactions <em>and</em> the <code>Path()</code> object on which it was called:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; from unittest.mock import patch, mock_open
&gt;&gt;&gt; opener = mock_open()
&gt;&gt;&gt; def mocked_open(self, *args, **kwargs):
...     return opener(self, *args, **kwargs)
...
&gt;&gt;&gt; with patch.object(Path, 'open', mocked_open):
...     print(Path.open)
...     print(Path().open)
...     with Path().open() as f:
...         f.write('&lt;file contents&gt;')
...         f.flush()
...
&lt;function mocked_open at 0x12026f5c0&gt;
&lt;bound method mocked_open of PosixPath('.')&gt;
&lt;MagicMock name='open().flush()' id='4834728928'&gt;
&gt;&gt;&gt; opener.mock_calls
[call(PosixPath('.')),
 call().__enter__(),
 call().write('&lt;file contents&gt;'),
 call().flush(),
 call().__exit__(None, None, None)]
</code></pre>
</div>
<span class="comment-copy">With a slight modification to the <code>mocked_open</code> function to pass along <code>*args</code> and <code>**kwargs</code>, this worked perfectly.  Thank you!</span>
