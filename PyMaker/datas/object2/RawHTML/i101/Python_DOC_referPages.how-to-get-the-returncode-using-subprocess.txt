<div class="post-text" itemprop="text">
<p>So I am trying to execute a file and get the returned value back using the python builtin methods available in the subprocess library. </p>
<p>For example, lets say I want to execute this hello_world python file:</p>
<pre><code>def main():
    print("in main")
    return("hello world!")

if __name__ == '__main__':
    main()
</code></pre>
<p>I do not care about getting back the statement <code>in main</code>. What I want to get back is the return value <code>hello world!</code>.</p>
<p>I tried numerous things but non of them worked.</p>
<p>Here's a list of what I tried and their outputs:</p>
<p>args is common for all trials:
<code>args = ['python',hello_cmd]</code></p>
<p>First trial:</p>
<pre><code>p1 = subprocess.Popen(args, stdout=subprocess.PIPE)

print(p1.communicate())
print("returncode is:")
print(p1.returncode)
</code></pre>
<p>output is:</p>
<pre><code>(b'in main\n', None)
returncode is:
0
</code></pre>
<p>second trial:</p>
<pre><code>p2 = subprocess.check_output(args,stderr=subprocess.STDOUT)
print(p2)
</code></pre>
<p>output is:</p>
<pre><code>b'in main\n'
</code></pre>
<p>third trial:</p>
<pre><code>output, result = subprocess.Popen(args, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=False).communicate()
print(output)
print(result)
</code></pre>
<p>output is:</p>
<pre><code>b'in main\n'
b''
</code></pre>
<p>fourth trial:</p>
<pre><code>p4 = subprocess.run(args, stdout=PIPE, stderr=PIPE)
print(p4)
</code></pre>
<p>output is:</p>
<pre><code>CompletedProcess(args=['python', '/path/to/file/hello.py'], returncode=0, stdout=b'in main\n', stderr=b'')
</code></pre>
<p>fifth trial:</p>
<pre><code>p5 =subprocess.getstatusoutput(args)
print(p5)
</code></pre>
<p>output is:</p>
<pre><code>(0, '')
</code></pre>
<p>Can anyone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>The return value of the main function is not the return code that is passed to the OS. To pass a return code to the OS use <code>sys.exit()</code>, which expects an integer. You <em>can</em> pass it a string, but if you do, Python will pass 1 to the OS.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot return strings as return codes it must be an integer. If you want to act differently depending on the process. Try to map your return code to some function in your main program. For example</p>
<pre><code>def execute_sub_program(): ... 

# somewhere else:
return_code = execute_sub_program()
if return_code == 0: 
    # do something ...
elif ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>You can try with <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer">subprocess.run().returncode</a>, it gives 0 if successful execution and 1 if failed execution.</strong></p>
<hr/>
<p><strong>driver.py</strong></p>
<pre><code>import subprocess

args = ['python', './hello_cmd.py']
status_code = subprocess.run(args).returncode
print(["Successful execution", "Failed execution"][status_code])
</code></pre>
<hr/>
<p><strong>For happy flow (hello_cmd.py):</strong></p>
<pre><code>def main():
    print("in main")
    return("hello world!")

if __name__ == '__main__':
    main()
</code></pre>
<hr/>
<p><strong>For failed flow (hello_cmd.py):</strong></p>
<pre><code>def main():
    print("in main")
    raise ValueError('Failed')

if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">I don't know of any operating systems that support non-numeric return codes.  If you want to pass the string <code>'hello world!'</code> to the parent process, you need to either go through a file or through stdout/stderr.</span>
<span class="comment-copy">@0x5453 even if the return was a value instead of <code>hello world!</code>, still, non of the above would work!</span>
