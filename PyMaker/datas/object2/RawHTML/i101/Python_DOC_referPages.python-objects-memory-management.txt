<div class="post-text" itemprop="text">
<p>Why does the following behave unexpectedly in Python?</p>
<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; a is b
True           # This is an expected result
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; a is b
False          # What happened here? Why is this False?
&gt;&gt;&gt; 257 is 257
True           # Yet the literal numbers compare properly
</code></pre>
<p>I am using Python 2.5.2. Trying some different versions of Python, it appears that Python 2.3.3 shows the above behaviour between 99 and 100.</p>
<p>Based on the above, I can hypothesize that Python is internally implemented such that "small" integers are stored in a different way than larger integers and the <code>is</code> operator can tell the difference. Why the leaky abstraction? What is a better way of comparing two arbitrary objects to see whether they are the same when I don't know in advance whether they are numbers or not?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at this:</p>
<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; id(a)
9987148
&gt;&gt;&gt; id(b)
9987148
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; id(a)
11662816
&gt;&gt;&gt; id(b)
11662828
</code></pre>
<p>EDIT: Here's what I found in the Python 2 documentation, <a href="https://docs.python.org/2/c-api/int.html" rel="noreferrer">"Plain Integer Objects"</a> (It's the same for <a href="https://docs.python.org/3/c-api/long.html" rel="noreferrer">Python 3</a>):</p>
<blockquote>
<p>The current implementation keeps an
  array of integer objects for all
  integers between -5 and 256, when you
  create an int in that range you
  actually just get back a reference to
  the existing object. So it should be
  possible to change the value of 1. I
  suspect the behaviour of Python in
  this case is undefined. :-)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>Python's “is” operator behaves unexpectedly with integers?</h1>
</blockquote>
<p>In summary - let me emphasize: <strong><em>Do not use <code>is</code> to compare integers.</em></strong></p>
<p>This isn't behavior you should have any expectations about.</p>
<p>Instead, use <code>==</code> and <code>!=</code> to compare for equality and inequality, respectively. For example:</p>
<pre><code>&gt;&gt;&gt; a = 1000
&gt;&gt;&gt; a == 1000       # Test integers like this,
True
&gt;&gt;&gt; a != 5000       # or this!
True
&gt;&gt;&gt; a is 1000       # Don't do this! - Don't use `is` to test integers!!
False
</code></pre>
<h2>Explanation</h2>
<p>To know this, you need to know the following.</p>
<p>First, what does <code>is</code> do? It is a comparison operator. From the <a href="https://docs.python.org/2/reference/expressions.html#not-in" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>The operators <code>is</code> and <code>is not</code> test for object identity: <code>x is y</code> is true
  if and only if x and y are the same object. <code>x is not y</code> yields the
  inverse truth value.</p>
</blockquote>
<p>And so the following are equivalent. </p>
<pre><code>&gt;&gt;&gt; a is b
&gt;&gt;&gt; id(a) == id(b)
</code></pre>
<p>From the <a href="https://docs.python.org/library/functions.html#id" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p><strong><code>id</code></strong>
  Return the “identity” of an object. This is an integer (or long
  integer) which is guaranteed to be unique and constant for this object
  during its lifetime. Two objects with non-overlapping lifetimes may
  have the same <code>id()</code> value.</p>
</blockquote>
<p>Note that the fact that the id of an object in CPython (the reference implementation of Python) is the location in memory is an implementation detail. Other implementations of Python (such as Jython or IronPython) could easily have a different implementation for <code>id</code>.</p>
<p>So what is the use-case for <code>is</code>?  <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="noreferrer">PEP8 describes</a>:</p>
<blockquote>
<p>Comparisons to singletons like <code>None</code> should always be done with <code>is</code> or
  <code>is not</code>, never the equality operators.</p>
</blockquote>
<h2>The Question</h2>
<p>You ask, and state, the following question (with code):</p>
<blockquote>
<p><strong>Why does the following behave unexpectedly in Python?</strong></p>
<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; a is b
True           # This is an expected result
</code></pre>
</blockquote>
<p>It is <em>not</em> an expected result. Why is it expected? It only means that the integers valued at <code>256</code> referenced by both <code>a</code> and <code>b</code> are the same instance of integer. Integers are immutable in Python, thus they cannot change. This should have no impact on any code. It should not be expected. It is merely an implementation detail. </p>
<p>But perhaps we should be glad that there is not a new separate instance in memory every time we state a value equals 256. </p>
<blockquote>
<pre><code>&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; a is b
False          # What happened here? Why is this False?
</code></pre>
</blockquote>
<p>Looks like we now have two separate instances of integers with the value of <code>257</code> in memory. Since integers are immutable, this wastes memory. Let's hope we're not wasting a lot of it. We're probably not. But this behavior is not guaranteed.</p>
<blockquote>
<pre><code>&gt;&gt;&gt; 257 is 257
True           # Yet the literal numbers compare properly
</code></pre>
</blockquote>
<p>Well, this looks like your particular implementation of Python is trying to be smart and not creating redundantly valued integers in memory unless it has to. You seem to indicate you are using the referent implementation of Python, which is CPython. Good for CPython. </p>
<p>It might be even better if CPython could do this globally, if it could do so cheaply (as there would a cost in the lookup), perhaps another implementation might. </p>
<p>But as for impact on code, you should not care if an integer is a particular instance of an integer. You should only care what the value of that instance is, and you would use the normal comparison operators for that, i.e. <code>==</code>.</p>
<h2>What <code>is</code> does</h2>
<p><code>is</code> checks that the <code>id</code> of two objects are the same. In CPython, the <code>id</code> is the location in memory, but it could be some other uniquely identifying number in another implementation. To restate this with code:</p>
<pre><code>&gt;&gt;&gt; a is b
</code></pre>
<p>is the same as</p>
<pre><code>&gt;&gt;&gt; id(a) == id(b)
</code></pre>
<h2>Why would we want to use <code>is</code> then?</h2>
<p>This can be a very fast check relative to say, checking if two very long strings are equal in value. But since it applies to the uniqueness of the object, we thus have limited use-cases for it. In fact, we mostly want to use it to check for <code>None</code>, which is a singleton (a sole instance existing in one place in memory). We might create other singletons if there is potential to conflate them, which we might check with <code>is</code>, but these are relatively rare. Here's an example (will work in Python 2 and 3) e.g.</p>
<pre><code>SENTINEL_SINGLETON = object() # this will only be created one time.

def foo(keyword_argument=None):
    if keyword_argument is None:
        print('no argument given to foo')
    bar()
    bar(keyword_argument)
    bar('baz')

def bar(keyword_argument=SENTINEL_SINGLETON):
    # SENTINEL_SINGLETON tells us if we were not passed anything
    # as None is a legitimate potential argument we could get.
    if keyword_argument is SENTINEL_SINGLETON:
        print('no argument given to bar')
    else:
        print('argument to bar: {0}'.format(keyword_argument))

foo()
</code></pre>
<p>Which prints:</p>
<pre><code>no argument given to foo
no argument given to bar
argument to bar: None
argument to bar: baz
</code></pre>
<p>And so we see, with <code>is</code> and a sentinel, we are able to differentiate between when <code>bar</code> is called with no arguments and when it is called with <code>None</code>. These are the primary use-cases for <code>is</code> - do <em>not</em> use it to test for equality of integers, strings, tuples, or other things like these.</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on whether you're looking to see if 2 things are equal, or the same object. </p>
<p><code>is</code> checks to see if they are the same object, not just equal. The small ints are probably pointing to the same memory location for space efficiency </p>
<pre><code>In [29]: a = 3
In [30]: b = 3
In [31]: id(a)
Out[31]: 500729144
In [32]: id(b)
Out[32]: 500729144
</code></pre>
<p>You should use <code>==</code> to compare equality of arbitrary objects. You can specify the behavior with the <code>__eq__</code>, and <code>__ne__</code> attributes.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>I'm late but, you want some source with your answer?</em><sup>*</sup></p>
<p>Good thing about CPython is that you can actually see the source for this. I'm going to use links for the <code>3.5</code> release for now; finding the corresponding <code>2.x</code> ones is trivial.</p>
<p>In CPython, the <code>C-API</code> function that handles creating a new <code>int</code> object is <a href="https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong" rel="noreferrer"><code>PyLong_FromLong(long v)</code></a>. The description for this function is:</p>
<blockquote>
<p><em>The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object</em>. So it should be possible to change the value of 1. I suspect the behaviour of Python in this case is undefined. :-)</p>
</blockquote>
<p>Don't know about you but I see this and think: <em>Let's find that array!</em></p>
<p>If you haven't fiddled with the <code>C</code> code implementing CPython <em>you should</em>, everything is pretty organized and readable. For our case, we need to look in the <a href="https://hg.python.org/cpython/file/d489394a73de/Objects/" rel="noreferrer"><code>Objects/</code> subdirectory</a> of the <a href="https://hg.python.org/cpython/file/tip" rel="noreferrer">main source code directory tree</a>.</p>
<p><code>PyLong_FromLong</code> deals with <code>long</code> objects so it shouldn't be hard to deduce that we need to peek inside <a href="https://hg.python.org/cpython/file/tip/Objects/longobject.c" rel="noreferrer"><code>longobject.c</code></a>. After looking inside you might think things are chaotic; they are, but fear not, the function we're looking for is chilling at <a href="https://hg.python.org/cpython/file/tip/Objects/longobject.c#l230" rel="noreferrer"><code>line 230</code></a> waiting for us to check it out. It's a smallish function so the main body (excluding declarations) is easily pasted here:</p>
<pre><code>PyObject *
PyLong_FromLong(long ival)
{
    // omitting declarations

    CHECK_SMALL_INT(ival);

    if (ival &lt; 0) {
        /* negate: cant write this as abs_ival = -ival since that
           invokes undefined behaviour when ival is LONG_MIN */
        abs_ival = 0U-(unsigned long)ival;
        sign = -1;
    }
    else {
        abs_ival = (unsigned long)ival;
    }

    /* Fast path for single-digit ints */
    if (!(abs_ival &gt;&gt; PyLong_SHIFT)) {
        v = _PyLong_New(1);
        if (v) {
            Py_SIZE(v) = sign;
            v-&gt;ob_digit[0] = Py_SAFE_DOWNCAST(
                abs_ival, unsigned long, digit);
        }
        return (PyObject*)v; 
}
</code></pre>
<p>Now, we're no <code>C</code> <em>master-code-haxxorz</em> but we're also not dumb, we can see that <code>CHECK_SMALL_INT(ival);</code> peeking at us all seductively; we can understand it has something to do with this. <a href="https://hg.python.org/cpython/file/tip/Objects/longobject.c#l51" rel="noreferrer">Let's check it out:</a></p>
<pre><code>#define CHECK_SMALL_INT(ival) \
    do if (-NSMALLNEGINTS &lt;= ival &amp;&amp; ival &lt; NSMALLPOSINTS) { \
        return get_small_int((sdigit)ival); \
    } while(0)
</code></pre>
<p>So it's a macro that calls function <code>get_small_int</code> if the value <code>ival</code> satisfies the condition:</p>
<pre><code>if (-NSMALLNEGINTS &lt;= ival &amp;&amp; ival &lt; NSMALLPOSINTS)
</code></pre>
<p>So what are <code>NSMALLNEGINTS</code> and <code>NSMALLPOSINTS</code>? If you guessed macros you get nothing because that wasn't such a hard question.. <em><a href="https://hg.python.org/cpython/file/tip/Objects/longobject.c#l12" rel="noreferrer">Anyway, here they are</a></em>:</p>
<pre><code>#ifndef NSMALLPOSINTS
#define NSMALLPOSINTS           257
#endif
#ifndef NSMALLNEGINTS
#define NSMALLNEGINTS           5
#endif
</code></pre>
<p>So our condition is <code>if (-5 &lt;= ival &amp;&amp; ival &lt; 257)</code> call <code>get_small_int</code>. </p>
<p>No other place to go but continue our journey by looking at <a href="https://hg.python.org/cpython/file/tip/Objects/longobject.c#l37" rel="noreferrer"><code>get_small_int</code> in all its glory</a> (well, we'll just look at it's body because that's were the interesting things are):</p>
<pre><code>PyObject *v;
assert(-NSMALLNEGINTS &lt;= ival &amp;&amp; ival &lt; NSMALLPOSINTS);
v = (PyObject *)&amp;small_ints[ival + NSMALLNEGINTS];
Py_INCREF(v);
</code></pre>
<p>Okay, declare a <code>PyObject</code>, assert that the previous condition holds and execute the assignment:</p>
<pre><code>v = (PyObject *)&amp;small_ints[ival + NSMALLNEGINTS];
</code></pre>
<p><code>small_ints</code> looks a lot like that array we've been searching for.. and, it is! <em><a href="https://hg.python.org/cpython/file/tip/Objects/longobject.c#l25" rel="noreferrer">We could've just read the damn documentation and we would've know all along!</a></em>:</p>
<pre><code>/* Small integers are preallocated in this array so that they
   can be shared.
   The integers that are preallocated are those in the range
   -NSMALLNEGINTS (inclusive) to NSMALLPOSINTS (not inclusive).
*/
static PyLongObject small_ints[NSMALLNEGINTS + NSMALLPOSINTS];
</code></pre>
<p>So yup, this is our guy. When you want to create a new <code>int</code> in the range <code>[NSMALLNEGINTS, NSMALLPOSINTS)</code> you'll just get back a reference to an already existing object that has been preallocated. </p>
<p>Since the reference refers to the same object, issuing <code>id()</code> directly or checking for identity with <code>is</code> on it will return exactly the same thing. </p>
<h3>But, when are they allocated??</h3>
<p><a href="https://hg.python.org/cpython/file/tip/Objects/longobject.c#l5343" rel="noreferrer">During initialization in <code>_PyLong_Init</code></a> Python will gladly enter in a for loop do do this for you: </p>
<pre><code>for (ival = -NSMALLNEGINTS; ival &lt;  NSMALLPOSINTS; ival++, v++) {
    // Look me up!
}
</code></pre>
<p>I hope my explanation has made you <code>C</code> (pun obviously intented) things clearly now.</p>
<hr/>
<h3>But, 257 is 257? What's up?</h3>
<p>This is actually easier to explain, <a href="https://stackoverflow.com/questions/34147515/is-operator-returns-different-results-on-integers">and I have attempted to do so already</a>; it's due to the fact that Python will execute this interactive statement:</p>
<pre><code>&gt;&gt;&gt; 257 is 257
</code></pre>
<p>as a single block. During complilation of this statement, CPython will see that you have two matching literals and will use the same <code>PyLongObject</code> representing <code>257</code>. You can see this if you do the compilation yourself and examine its contents:</p>
<pre><code>&gt;&gt;&gt; codeObj = compile("257 is 257", "blah!", "exec")
&gt;&gt;&gt; codeObj.co_consts
(257, None)
</code></pre>
<p>When CPython does the operation; it's now just going to load the exact same object:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(codeObj)
  1           0 LOAD_CONST               0 (257)   # dis
              3 LOAD_CONST               0 (257)   # dis again
              6 COMPARE_OP               8 (is)
</code></pre>
<p>So <code>is</code> will return <code>True</code>.</p>
<hr/>
<p><sub>* -- I'll try and word this in a more introductory manner in order for most to be able to follow along.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>As you can check in <a href="http://svn.python.org/projects/python/trunk/Objects/intobject.c" rel="nofollow noreferrer">source file <em>intobject.c</em></a>, Python caches small integers for efficiency. Every time you create a reference to a small integer, you are referring the cached small integer, not a new object. 257 is not an small integer, so it is calculated as a different object.</p>
<p>It is better to use <code>==</code> for that purpose.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think your hypotheses is correct. Experiment with <code>id</code> (identity of object):</p>
<pre><code>In [1]: id(255)
Out[1]: 146349024

In [2]: id(255)
Out[2]: 146349024

In [3]: id(257)
Out[3]: 146802752

In [4]: id(257)
Out[4]: 148993740

In [5]: a=255

In [6]: b=255

In [7]: c=257

In [8]: d=257

In [9]: id(a), id(b), id(c), id(d)
Out[9]: (146349024, 146349024, 146783024, 146804020)
</code></pre>
<p>It appears that numbers <code>&lt;= 255</code> are treated as literals and anything above is treated differently!</p>
</div>
<div class="post-text" itemprop="text">
<p>For immutable value objects, like ints, strings or datetimes, object identity is not especially useful. It's better to think about equality. Identity is essentially an implementation detail for value objects - since they're immutable, there's no effective difference between having multiple refs to the same object or multiple objects.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>is</code> <em>is</em> the identity equality operator (functioning like <code>id(a) == id(b)</code>); it's just that two equal numbers aren't necessarily the same object. For performance reasons some small integers happen to be <a href="http://en.wikipedia.org/wiki/Memoization" rel="nofollow">memoized</a> so they will tend to be the same (this can be done since they are immutable).</p>
<p><a href="http://en.wikipedia.org/wiki/PHP" rel="nofollow">PHP's</a> <code>===</code> operator, on the other hand, is described as checking equality and type: <code>x == y and type(x) == type(y)</code> as per Paulo Freitas' comment. This will suffice for common numbers, but differ from <code>is</code> for classes that define <code>__eq__</code> in an absurd manner:</p>
<pre><code>class Unequal:
    def __eq__(self, other):
        return False
</code></pre>
<p>PHP apparently allows the same thing for "built-in" classes (which I take to mean implemented at C level, not in PHP). A slightly less absurd use might be a timer object, which has a different value every time it's used as a number. Quite why you'd want to emulate Visual Basic's <code>Now</code> instead of showing that it is an evaluation with <code>time.time()</code> I don't know.</p>
<p>Greg Hewgill (OP) made one clarifying comment "My goal is to compare object identity, rather than equality of value. Except for numbers, where I want to treat object identity the same as equality of value."</p>
<p>This would have yet another answer, as we have to categorize things as numbers or not, to select whether we compare with <code>==</code> or <code>is</code>. <a href="http://en.wikipedia.org/wiki/CPython" rel="nofollow">CPython</a> defines the <a href="http://docs.python.org/2/c-api/number.html" rel="nofollow">number protocol</a>, including PyNumber_Check, but this is not accessible from Python itself.</p>
<p>We could try to use <code>isinstance</code> with all the number types we know of, but this would inevitably be incomplete. The types module contains a StringTypes list but no NumberTypes. Since Python 2.6, the built in number classes have a base class <a href="https://docs.python.org/2/library/numbers.html#numbers.Number" rel="nofollow"><code>numbers.Number</code></a>, but it has the same problem:</p>
<pre><code>import numpy, numbers
assert not issubclass(numpy.int16,numbers.Number)
assert issubclass(int,numbers.Number)
</code></pre>
<p>By the way, <a href="http://en.wikipedia.org/wiki/NumPy" rel="nofollow">NumPy</a> will produce separate instances of low numbers.</p>
<p>I don't actually know an answer to this variant of the question. I suppose one could theoretically use ctypes to call <code>PyNumber_Check</code>, but even that function <a href="http://mail.python.org/pipermail/python-dev/2002-November/030237.html" rel="nofollow">has been debated</a>, and it's certainly not portable. We'll just have to be less particular about what we test for now.</p>
<p>In the end, this issue stems from Python not originally having a type tree with predicates like <a href="http://en.wikipedia.org/wiki/Scheme_%28programming_language%29" rel="nofollow">Scheme's</a> <code>number?</code>, or <a href="http://en.wikipedia.org/wiki/Haskell_%28programming_language%29" rel="nofollow">Haskell's</a> <a href="https://en.wikipedia.org/wiki/Type_class" rel="nofollow">type class</a> <a href="http://www.haskell.org/ghc/docs/7.4-latest/html/libraries/base-4.5.1.0/Prelude.html#t:Num" rel="nofollow">Num</a>. <code>is</code> checks object identity, not value equality. PHP has a colorful history as well, where <code>===</code> apparently behaves as <code>is</code> only on objects <a href="http://www.php.net/manual/en/language.operators.comparison.php" rel="nofollow">in PHP5, but not PHP4</a>. Such are the growing pains of moving across languages (including versions of one).</p>
</div>
<div class="post-text" itemprop="text">
<p>It also happens with strings:</p>
<pre><code>&gt;&gt;&gt; s = b = 'somestr'
&gt;&gt;&gt; s == b, s is b, id(s), id(b)
(True, True, 4555519392, 4555519392)
</code></pre>
<p>Now everything seems fine.</p>
<pre><code>&gt;&gt;&gt; s = 'somestr'
&gt;&gt;&gt; b = 'somestr'
&gt;&gt;&gt; s == b, s is b, id(s), id(b)
(True, True, 4555519392, 4555519392)
</code></pre>
<p>That's expected too.</p>
<pre><code>&gt;&gt;&gt; s1 = b1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'
&gt;&gt;&gt; s1 == b1, s1 is b1, id(s1), id(b1)
(True, True, 4555308080, 4555308080)

&gt;&gt;&gt; s1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'
&gt;&gt;&gt; b1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'
&gt;&gt;&gt; s1 == b1, s1 is b1, id(s1), id(b1)
(True, False, 4555308176, 4555308272)
</code></pre>
<p>Now that's unexpected.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look <a href="https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong" rel="nofollow">here</a></p>
<blockquote>
<p>The current implementation keeps an array of integer objects for all
  integers between -5 and 256, when you create an int in that range you
  actually just get back a reference to the existing object.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>There's another issue that isn't pointed out in any of the existing answers. Python is allowed to merge any two immutable values, and pre-created small int values are not the only way this can happen. A Python implementation is never <em>guaranteed</em> to do this, but they all do it for more than just small ints.</p>
<hr/>
<p>For one thing, there are some other pre-created values, such as the empty <code>tuple</code>, <code>str</code>, and <code>bytes</code>, and some short strings (in CPython 3.6, it's the 256 single-character Latin-1 strings). For example:</p>
<pre><code>&gt;&gt;&gt; a = ()
&gt;&gt;&gt; b = ()
&gt;&gt;&gt; a is b
True
</code></pre>
<hr/>
<p>But also, even non-pre-created values can be identical. Consider these examples:</p>
<pre><code>&gt;&gt;&gt; c = 257
&gt;&gt;&gt; d = 257
&gt;&gt;&gt; c is d
False
&gt;&gt;&gt; e, f = 258, 258
&gt;&gt;&gt; e is f
True
</code></pre>
<p>And this isn't limited to <code>int</code> values:</p>
<pre><code>&gt;&gt;&gt; g, h = 42.23e100, 42.23e100
&gt;&gt;&gt; g is h
True
</code></pre>
<p>Obviously, CPython doesn't come with a pre-created <code>float</code> value for <code>42.23e100</code>. So, what's going on here?</p>
<p>The CPython compiler will merge constant values of some known-immutable types like <code>int</code>, <code>float</code>, <code>str</code>, <code>bytes</code>,  in the same compilation unit. For a module, the whole module is a compilation unit, but at the interactive interpreter, each statement is a separate compilation unit. Since <code>c</code> and <code>d</code> are defined in separate statements, their values aren't merged. Since <code>e</code> and <code>f</code> are defined in the same statement, their values are merged.</p>
<hr/>
<p>You can see what's going on by disassembling the bytecode. Try defining a function that does <code>e, f = 128, 128</code> and then calling <code>dis.dis</code> on it, and you'll see that there's a single constant value <code>(128, 128)</code></p>
<pre><code>&gt;&gt;&gt; def f(): i, j = 258, 258
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_CONST               2 ((128, 128))
              2 UNPACK_SEQUENCE          2
              4 STORE_FAST               0 (i)
              6 STORE_FAST               1 (j)
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE
&gt;&gt;&gt; f.__code__.co_consts
(None, 128, (128, 128))
&gt;&gt;&gt; id(f.__code__.co_consts[1], f.__code__.co_consts[2][0], f.__code__.co_consts[2][1])
4305296480, 4305296480, 4305296480
</code></pre>
<hr/>
<p>You may notice that the compiler has stored <code>128</code> as a constant even though it's not actually used by the bytecode, which gives you an idea of how little optimization CPython's compiler does. Which means that (non-empty) tuples actually don't end up merged:</p>
<pre><code>&gt;&gt;&gt; k, l = (1, 2), (1, 2)
&gt;&gt;&gt; k is l
False
</code></pre>
<p>Put that in a function, <code>dis</code> it, and look at the <code>co_consts</code>—there's a <code>1</code> and a <code>2</code>, two <code>(1, 2)</code> tuples that share the same <code>1</code> and <code>2</code> but are not identical, and a <code>((1, 2), (1, 2))</code> tuple that has the two distinct equal tuples.</p>
<hr/>
<p>There's one more optimization that CPython does: string interning. Unlike compiler constant folding, this isn't restricted to source code literals:</p>
<pre><code>&gt;&gt;&gt; m = 'abc'
&gt;&gt;&gt; n = 'abc'
&gt;&gt;&gt; m is n
True
</code></pre>
<p>On the other hand, it is limited to the <code>str</code> type, and to strings of <a href="https://github.com/python/cpython/blob/master/Include/unicodeobject.h#L197" rel="nofollow noreferrer">internal storage kind "ascii compact", "compact", or "legacy ready"</a>, and in many cases only "ascii compact" will get interned.</p>
<hr/>
<p>At any rate, the rules for what values must be, might be, or cannot be distinct vary from implementation to implementation, and between versions of the same implementation, and maybe even between runs of the same code on the same copy of the same implementation.</p>
<p>It can be worth learning the rules for one specific Python for the fun of it. But it's not worth relying on them in your code. The only safe rule is:</p>
<ul>
<li>Do not write code that assumes two equal but separately-created immutable values are identical.</li>
<li>Do not write code that assumes two equal but separately-created immutable values are distinct.</li>
</ul>
<p>Or, in other words, only use <code>is</code> to test for the documented singletons (like <code>None</code>) or that are only created in one place in the code (like the <code>_sentinel = object()</code> idiom).</p>
</div>
<span class="comment-copy">does anyone know how that range (-5, 256) was chosen? i wouldn't be too surprised if it were (0, 255) or even (-255, 255), but a range of 262 numbers starting at -5 seems surprisingly arbitrary.</span>
<span class="comment-copy">@WoodrowBarlow: The -5 is just a heuristic to capture common negative placeholders, I think.  0..255 covers arrays of single byte values.  It’s 256 that’s mysterious, but I guess it’s for (dis)assembling integers into/from bytes.</span>
<span class="comment-copy">From what I understand the range was chosen by looking at the commonly used values across multiple projects (and multiple languages).</span>
<span class="comment-copy">According to <a href="https://www.reddit.com/r/Python/comments/18leav/python_integer_range_5_256_and_identity_comparison/c8iq3c4/" rel="nofollow noreferrer">reddit.com/r/Python/comments/18leav/…</a>, the range used to be [-5,100].  It was expanded to include the full range of byte values - plus 256, because that's presumably a common number.</span>
<span class="comment-copy">Wish I could give you two up votes, beautiful explanation!</span>
<span class="comment-copy">It is because objects representing values from -5 to +256 are created at Startup time - and so all use of those value use to prebuilt object. Almost all references to integers outside that range create a new internal object each time they are referenced. I think the use of the term literal is confusing - literal normally refers to any value that is typed in a piece of code - so all number in the source code are literals.</span>
<span class="comment-copy">Happened upon this - agreed, that even weirder.  So I played with it, and it's weirder yet - related to the space.  For example, the string <code>'xx'</code> is as expected, as is <code>'xxx'</code>, but <code>'x x'</code> is not.</span>
<span class="comment-copy">That's because it looks like a symbol if there's no space in it. Names are automatically interned, so if there's anything named <code>xx</code> anywhere in your Python session, that string is already interned; and there might be a heuristic that does it if it just resembles a name. As with numbers, this can be done because they are immutable. <a href="https://docs.python.org/2/library/functions.html#intern" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#intern</a> <a href="http://guilload.com/python-string-interning/" rel="nofollow noreferrer">guilload.com/python-string-interning</a></span>
<span class="comment-copy">@YannVernier Thanks for sharing python string interning blog, I just read everything and loved it. Python is so amazing :)</span>
