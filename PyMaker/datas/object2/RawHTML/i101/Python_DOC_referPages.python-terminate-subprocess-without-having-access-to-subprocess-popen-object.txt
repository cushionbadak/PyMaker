<div class="post-text" itemprop="text">
<p>I have a script whereby I simply call a subprocess in Python using the <code>subprocess</code> module, like so:</p>
<pre><code>import subprocess
process = subprocess.Popen(['python3', 'some_Python_script.py']
</code></pre>
<p>I want to be able to terminate/kill this process. However, after creating my process, in my app I lose access to the <code>process</code> object, and thus am not able to commonly terminate it as described in <a href="https://stackoverflow.com/questions/16866602/kill-a-running-subprocess-call/16866661">here</a>, using <code>process.kill</code>.</p>
<p>However, is there a way to "store" some unique ID of the process, and with it be able to manipulate/terminate it later on (if it is still running)?</p>
<p>For ex., I am thinking of something like</p>
<pre><code>process = subprocess.Popen(['python3', 'some_Python_script.py']
process_ID_string = process.id
...
...
*later on*
subprocess.kill(process_id = process_ID_string)
</code></pre>
<p>Is something like this possible with the <code>subprocess</code> module? I would appreciate any suggestions on this.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import subprocess, os, signal

process = subprocess.Popen(['python3', 'some_Python_script.py']
processId = process.pid

# later on
os.kill(processId, signal.SIGTERM)
</code></pre>
</div>
<span class="comment-copy">If you can store the PID, why can't you store a reference to the object the same way?</span>
<span class="comment-copy">(and to be clear, it's <code>process.pid</code>, as documented at <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.pid" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html#subprocess.Popen.pid</a>)</span>
<span class="comment-copy">Because I am working with <code>Dash</code>, and the callbacks within <code>Dash</code> behave like local functions in that their variables are also local, except only basic variables like strings can be returned.</span>
<span class="comment-copy">This is perfect. I knew my intuition was on the right track ^^; , but <code>subprocess</code>'s doc's weren't making it easy for me to find this functionality. Thank you.</span>
