<div class="post-text" itemprop="text">
<p>How do I concatenate two lists in Python?</p>
<p>Example:</p>
<pre><code>listone = [1, 2, 3]
listtwo = [4, 5, 6]
</code></pre>
<p>Expected outcome:</p>
<pre><code>&gt;&gt;&gt; joinedlist
[1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>+</code> operator to combine them:</p>
<pre><code>listone = [1,2,3]
listtwo = [4,5,6]

mergedlist = listone + listtwo
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; mergedlist
[1,2,3,4,5,6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's also possible to create a generator that simply iterates over the items in both lists. This allows you to chain lists (or any iterable) together for processing without copying the items to a new list:</p>
<pre><code>import itertools
for item in itertools.chain(listone, listtwo):
   # Do something with each list item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use sets to obtain merged list of unique values</p>
<pre><code>mergedlist = list(set(listone + listtwo))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python <code>&gt;= 3.5</code> alternative: <code>[*l1, *l2]</code></strong></p>
<p>Even though this is an old answer, another alternative has been introduced via the acceptance of <strong><a href="https://www.python.org/dev/peps/pep-0448/" rel="noreferrer"><code>PEP 448</code></a></strong> which deserves mentioning. </p>
<p>The PEP, titled <strong><em>Additional Unpacking Generalizations</em></strong>, generally reduced some syntactic restrictions when using the starred <code>*</code> expression in Python; with it, joining two lists (applies to any iterable) can now also be done with:</p>
<pre><code>&gt;&gt;&gt; l1 = [1, 2, 3]
&gt;&gt;&gt; l2 = [4, 5, 6]

#unpack both iterables in a list literal
&gt;&gt;&gt; joinedList = [*l1, *l2]
&gt;&gt;&gt; print(joinedList)
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>This functionality <em>was defined for Python <code>3.5</code></em> it hasn't been backported to previous versions in the <code>3.x</code> family. In unsupported versions a <code>SyntaxError</code> is going to be raised.</p>
<p>As with the other approaches, this too <em>creates as shallow copy</em> of the elements in the corresponding lists.</p>
<hr/>
<p>The <strong>upside</strong> to this approach is that you really don't need lists in order to perform it, anything that is iterable will do. As stated in the PEP:</p>
<blockquote>
<p>This is also useful as a more readable way of summing iterables into a
  list, such as <code>my_list + list(my_tuple) + list(my_range)</code> which is now
  equivalent to just <code>[*my_list, *my_tuple, *my_range]</code>.</p>
</blockquote>
<p>So while addition with <code>+</code> would raise a <code>TypeError</code> due to type mismatch:</p>
<pre><code>l = [1, 2, 3]
r = range(4, 7)
res = l + r
</code></pre>
<p>The following won't:</p>
<pre><code>res = [*l, *r]
</code></pre>
<p>because it will first unpack the contents of the iterables and then simply create a <code>list</code> from the contents.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also use <a href="https://docs.python.org/2.7/tutorial/datastructures.html#more-on-lists" rel="noreferrer"><code>extend</code></a> in order to add a <code>list</code> add the end of another one:</p>
<pre><code>listone = [1,2,3]
listtwo = [4,5,6]
mergedlist = []
mergedlist.extend(listone)
mergedlist.extend(listtwo)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is quite simple, and I think it was even shown in <a href="http://docs.python.org/tutorial/" rel="nofollow noreferrer">the tutorial</a>:</p>
<pre><code>&gt;&gt;&gt; listone = [1,2,3]
&gt;&gt;&gt; listtwo = [4,5,6]
&gt;&gt;&gt;
&gt;&gt;&gt; listone + listtwo
[1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This question directly asks about joining two lists. However it's pretty high in search even when you are looking for a way of joining many lists (including the case when you joining zero lists).</p>
<p>I think the best option is to use list comprehensions:</p>
<pre><code>&gt;&gt;&gt; a = [[1,2,3], [4,5,6], [7,8,9]]
&gt;&gt;&gt; [x for xs in a for x in xs]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>You can create generators as well:</p>
<pre><code>&gt;&gt;&gt; map(str, (x for xs in a for x in xs))
['1', '2', '3', '4', '5', '6', '7', '8', '9']
</code></pre>
<p><strong>Old Answer</strong></p>
<p>Consider this more generic approach:</p>
<pre><code>a = [[1,2,3], [4,5,6], [7,8,9]]
reduce(lambda c, x: c + x, a, [])
</code></pre>
<p>Will output:</p>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Note, this also works correctly when <code>a</code> is <code>[]</code> or <code>[[1,2,3]]</code>.</p>
<p>However, this can be done more efficiently with <code>itertools</code>:</p>
<pre><code>a = [[1,2,3], [4,5,6], [7,8,9]]
list(itertools.chain(*a))
</code></pre>
<p>If you don't need a <code>list</code>, but just an iterable, omit <code>list()</code>.</p>
<p><strong>Update</strong></p>
<p>Alternative suggested by Patrick Collins in the comments could also work for you:</p>
<pre><code>sum(a, [])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could simply use the <code>+</code> or <code>+=</code> operator as follows:</p>
<pre><code>a = [1, 2, 3]
b = [4, 5, 6]

c = a + b
</code></pre>
<p>Or:</p>
<pre><code>c = []
a = [1, 2, 3]
b = [4, 5, 6]

c += (a + b)
</code></pre>
<p>Also, if you want the values in the merged list to be unique you can do:</p>
<pre><code>c = list(set(a + b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's worth noting that the <code>itertools.chain</code> function accepts variable number of arguments:</p>
<pre><code>&gt;&gt;&gt; l1 = ['a']; l2 = ['b', 'c']; l3 = ['d', 'e', 'f']
&gt;&gt;&gt; [i for i in itertools.chain(l1, l2)]
['a', 'b', 'c']
&gt;&gt;&gt; [i for i in itertools.chain(l1, l2, l3)]
['a', 'b', 'c', 'd', 'e', 'f']
</code></pre>
<p>If an iterable (tuple, list, generator, etc.) is the input, the <code>from_iterable</code> class method may be used:</p>
<pre><code>&gt;&gt;&gt; il = [['a'], ['b', 'c'], ['d', 'e', 'f']]
&gt;&gt;&gt; [i for i in itertools.chain.from_iterable(il)]
['a', 'b', 'c', 'd', 'e', 'f']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can go for <a href="https://www.tutorialspoint.com/python/list_extend.htm" rel="noreferrer"><code>list.extend</code></a> function.</p>
<pre><code>l1 = [1,2,3]
l2 = [4,5,6]
l1.extend(l2)
print l1
</code></pre>
<p>Output: </p>
<p><code>[1,2,3,4,5,6]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.3+ you can use <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="noreferrer">yield from</a>:</p>
<pre><code>listone = [1,2,3]
listtwo = [4,5,6]

def merge(l1, l2):
    yield from l1
    yield from l2

&gt;&gt;&gt; list(merge(listone, listtwo))
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>Or, if you want to support an arbitrary number of iterators:</p>
<pre><code>def merge(*iters):
    for it in iters:
        yield from it

&gt;&gt;&gt; list(merge(listone, listtwo, 'abcd', [20, 21, 22]))
[1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 20, 21, 22]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to merge the two lists in sorted form, you can use the <code>merge</code> function from the <code>heapq</code> library.</p>
<pre><code>from heapq import merge

a = [1, 2, 4]
b = [2, 4, 6, 7]

print list(merge(a, b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can't use the plus operator (<code>+</code>), you can uses the  <code>__add__</code> function:</p>
<pre><code>listone = [1,2,3]
listtwo = [4,5,6]

result = list.__add__(listone, listtwo)
print(result)

&gt;&gt;&gt; [1, 2, 3, 4, 5, 6]
</code></pre>
<p>Alternatively, if you don't like the use of <a href="https://wiki.python.org/moin/DunderAlias" rel="nofollow noreferrer">dunders</a> you can use the <code>operator</code> import:</p>
<pre><code>import operator

listone = [1,2,3]
listtwo = [4,5,6]

result = operator.add(listone, listtwo)
print(result)

&gt;&gt;&gt; [1, 2, 3, 4, 5, 6]
</code></pre>
<p>One could argue this is a bit more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a more general way for more lists you can put them within a list and use the <code>itertools.chain.from_iterable()</code><sup>1</sup> function which based on <a href="https://stackoverflow.com/a/953097/2867928"><em>this</em> answer</a> is the best way for flatting a nested list:</p>
<pre><code>&gt;&gt;&gt; l=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain.from_iterable(l))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<hr/>
<p><sub>
1. Note that <code>chain.from_iterable()</code> is available in Python 2.6 and later. In other versions, use <code>chain(*l)</code>.
</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Joining two lists in Python:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = [1, 4, 6, 7]
&gt;&gt;&gt; c = a + b
&gt;&gt;&gt; c
[1, 2, 3, 4, 1, 4, 6, 7]
</code></pre>
<p>If you don't want any duplication:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; b = [5, 6, 7, 8]
&gt;&gt;&gt; c = list(set(a + b))
&gt;&gt;&gt; c
[1, 2, 3, 4, 5, 6, 7, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to merge two ordered lists with complicated sorting rules, you might have to roll it yourself like in the following code (using a simple sorting rule for readability :-) ).</p>
<pre><code>list1 = [1,2,5]
list2 = [2,3,4]
newlist = []

while list1 and list2:
    if list1[0] == list2[0]:
        newlist.append(list1.pop(0))
        list2.pop(0)
    elif list1[0] &lt; list2[0]:
        newlist.append(list1.pop(0))
    else:
        newlist.append(list2.pop(0))

if list1:
    newlist.extend(list1)
if list2:
    newlist.extend(list2)

assert(newlist == [1, 2, 3, 4, 5])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As already pointed out by many, <code>itertools.chain()</code> is the way to go if one needs to apply <em>exactly the same treatment</em> to both lists. In my case, I had a label and a flag which were different from one list to the other, so I needed something slightly more complex. As it turns out, behind the scenes <code>itertools.chain()</code> simply does the following:</p>
<pre><code>for it in iterables:
    for element in it:
        yield element
</code></pre>
<p>(see <a href="https://docs.python.org/2/library/itertools.html" rel="noreferrer">https://docs.python.org/2/library/itertools.html</a>), so I took inspiration from here and wrote something along these lines:</p>
<pre><code>for iterable, header, flag in ( (newList, 'New', ''), (modList, 'Modified', '-f')):
    print header + ':'
    for path in iterable:
        [...]
        command = 'cp -r' if os.path.isdir(srcPath) else 'cp'
        print &gt;&gt; SCRIPT , command, flag, srcPath, mergedDirPath
        [...]
</code></pre>
<p>The main points to understand here are that lists are just a special case of iterable, which are objects like any other; and that <code>for ... in</code> loops in python can work with tuple variables, so it is simple to loop on multiple variables at the same time. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list(set(listone) | set(listtwo))
</code></pre>
<p>The above code, does not preserve order, removes duplicate from each list (but not from the concatenated list)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>append()</code> method defined on <code>list</code> objects: </p>
<pre><code>mergedlist =[]
for elem in listone:
    mergedlist.append(elem)
for elem in listtwo:
    mergedlist.append(elem)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python you can concatenate two arrays of compatible dimensions with this command</p>
<pre><code>numpy.concatenate([a,b])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To extend a list with another one there are several methods like below:</p>
<pre><code>&gt;&gt;&gt; listone = [1,2,3]
&gt;&gt;&gt; listome = [4,5,6]
&gt;&gt;&gt;
&gt;&gt;&gt; listone+listome # adding 2 list is actually extending the list
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt;
&gt;&gt;&gt; listone.extend(listome)
&gt;&gt;&gt; listone
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt;
&gt;&gt;&gt; listone = [1,2,3]
&gt;&gt;&gt;
&gt;&gt;&gt; listone.__add__(listome)
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>Also, <code>for loop</code> can also be used:</p>
<pre><code>&gt;&gt;&gt; for i in listome:
...     listone.append(i)
...
&gt;&gt;&gt; listone
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A really concise way to combine a list of lists is</p>
<pre><code>list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]
reduce(list.__add__, list_of_lists)
</code></pre>
<p>which gives us</p>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lst1 = [1,2]

lst2 = [3,4]

def list_combinationer(Bushisms, are_funny):

    for item in lst1:
        lst2.append(item)
        lst1n2 = sorted(lst2)
        print lst1n2

list_combinationer(lst1, lst2)

[1,2,3,4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

A = list(zip([1,3,5,7,9],[2,4,6,8,10]))
B = [1,3,5,7,9]+[2,4,6,8,10]
C = list(set([1,3,5,7,9] + [2,4,6,8,10]))

D = [1,3,5,7,9]
D.append([2,4,6,8,10])

E = [1,3,5,7,9]
E.extend([2,4,6,8,10])

F = []
for a in itertools.chain([1,3,5,7,9], [2,4,6,8,10]):
    F.append(a)


print ("A: " + str(A))
print ("B: " + str(B))
print ("C: " + str(C))
print ("D: " + str(D))
print ("E: " + str(E))
print ("F: " + str(F))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>A: [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]
B: [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]
C: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
D: [1, 3, 5, 7, 9, [2, 4, 6, 8, 10]]
E: [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]
F: [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a simple list comprehension:</p>
<pre><code>joined_list = [y for x in [list_one, list_two] for y in x]
</code></pre>
<p>It has all the advantages of the newest approach of using <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">Additional Unpacking Generalizations</a> - i.e. you can concatenate an arbitrary number of different iterables (for example, lists, tuples, ranges, and generators) that way - and it's not limited to Python 3.5 or later.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>extends</code> function </p>
<pre><code>listone.extends(listtwo)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you wanted a new list whilst keeping the two old lists:</p>
<pre><code>def concatenate_list(listOne, listTwo):
    joinedList = []
    for i in listOne:
        joinedList.append(i)
    for j in listTwo:
        joinedList.append(j)

    sorted(joinedList)

    return joinedList
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [1,2,3,4,5,6]
b = [7,8,9,10]
c = a.extend(b)
</code></pre>
<p>print(c) gives</p>
<pre><code>[1,2,3,4,5,6,7,8,9,10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So there are two easy ways.</p>
<ol>
<li><strong>Using <code>+</code></strong>: It creates a new list from provided lists</li>
</ol>
<p>Example:</p>
<pre><code>In [1]: a = [1, 2, 3]

In [2]: b = [4, 5, 6]

In [3]: a + b
Out[3]: [1, 2, 3, 4, 5, 6]

In [4]: %timeit a + b
10000000 loops, best of 3: 126 ns per loop
</code></pre>
<ol start="2">
<li><strong>Using extend</strong>: It appends new list to existing list. That means it does not create a separate list.</li>
</ol>
<p>Example:</p>
<pre><code>In [1]: a = [1, 2, 3]

In [2]: b = [4, 5, 6]

In [3]: %timeit a.extend(b)
10000000 loops, best of 3: 91.1 ns per loop
</code></pre>
<p>Thus we see that out of two of most popular methods, <code>extend</code> is efficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the '+' operator for concatenating two lists in Python:</p>
<pre><code>&gt;&gt;&gt; listone = [1,2,3]
&gt;&gt;&gt; listtwo = [4,5,6]
&gt;&gt;&gt;
&gt;&gt;&gt; listSum = []
&gt;&gt;&gt; listSum = listone + listtwo
&gt;&gt;&gt; print(listSum)

   [1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<span class="comment-copy">what about if listone was <code>[3,2,1]</code>?  Will the output change?</span>
<span class="comment-copy">'merge' as 'create one shallow-copy', 'deep-copy' or 'iterate from'? (@Clergyman, it's not at all that trivial)</span>
<span class="comment-copy">Isn’t this operation called <i>concatination</i> rather than <i>merging</i>? I always thought merging means concatination + sorting.</span>
<span class="comment-copy">Do you want to simply <b>append</b>, or do you want to <b>merge the two lists in sorted order</b>? What output do you expect for [1,3,6] and [2,4,5]? Can we assume both sublists are already sorted (as in your example)?</span>
<span class="comment-copy">@LenarHoyt Correct. Merging implies some sort of either arbitrary or relational ordering at the very minimum.</span>
<span class="comment-copy">does this create a deep copy of listone and appends listtwo?</span>
<span class="comment-copy">@Daniel it will create a new list with a shallow copy of the items in the first list, followed by a shallow copy of the items in the second list. Use copy.deepcopy to get deep copies of lists.</span>
<span class="comment-copy">another useful detail here: <code>listone += listtwo</code> results in <code>listone == [1, 2, 3, 4, 5, 6]</code></span>
<span class="comment-copy">@br1ckb0t will that change what listone is pointing at?  So:<code>list3 = listone</code> <code>listone+=listtwo</code>       Is list3 changed as well?</span>
<span class="comment-copy">it does change list3. However, if that isn't a problem, it's simpler more readable to add the two lists instead of creating a new one.</span>
<span class="comment-copy">This is better way because it also works with numpy array.</span>
<span class="comment-copy">will this work the same way: mergedList = itertools.chain(listone, listtwo)      for item in mergedList:</span>
<span class="comment-copy">@d.putto: individual item access is very slow for numpy arrays (each access requires to convert the raw memory with a C type to Python object. Vectorized operations such as <code>np.dot()</code> work on the C types directly without the round trip to Python and therefore fast). You could use <code>merged = np.r_[a, b]</code> to get concatenated numpy array.</span>
<span class="comment-copy">this will lose ordering information.</span>
<span class="comment-copy">True, however, it will also remove duplicates, if that's what you are interested in. List addition along would not do that.</span>
<span class="comment-copy">Better than <code>listone + [x for x in listtwo if x not in listone]</code></span>
<span class="comment-copy">If I had a list of lists, such as this one:  <code>[[0, 5], [1, 10], [0, 7], [3, 5]]</code>  How would you merge them to avoid duplicates in the key (first value in each sub-list), but if they are duplicates, end up with the sum of the second values? Like so:  <code>[[0, 12], [1, 10], [3, 5]]</code>  Thanks</span>
<span class="comment-copy">+1 IMHO this is the correct way to "merge" (union) lists while the "approved" answer describes how to combine/add lists (multiset)</span>
<span class="comment-copy">You can use just listone.extend(listtwo) but it wil be deprecated soon</span>
<span class="comment-copy">@SergeyIvanov no it won't. <code>list.extend</code> isn't going anywhere.</span>
<span class="comment-copy">And this also works when <code>listone</code> and <code>listtwo</code> have a different number of elements ;-)</span>
<span class="comment-copy"><code>sum(a,[])</code> only works when "a" is a list of lists.</span>
<span class="comment-copy">Python 3 note: <code>reduce</code> is now in <code>functools</code> so you'll need to import it first.</span>
<span class="comment-copy">@Procyclinsur And the list of lists contain integers</span>
<span class="comment-copy">More pythonic way.</span>
<span class="comment-copy">What I looked for</span>
<span class="comment-copy">Note, this assumes that <code>a</code> and <code>b</code> are already sorted</span>
<span class="comment-copy">grabbing dunders is generally not the best approach. If <code>+</code> is off the table, use <code>operator.add</code>.</span>
<span class="comment-copy">The looks a lot prettier, but I guess you would need <code>import operator</code> for that to work.</span>
<span class="comment-copy">Why would the plus operator be unavailable?</span>
<span class="comment-copy">Normally it wouldn't :) but if you are doing list concatenation with the map function or want to store the add function in a variable, you can't use +.</span>
<span class="comment-copy">just so you know, if this is what you're doing in practice, this is much, much slower than the other proposed methods. see <a href="http://stackoverflow.com/questions/17479361/iterating-vs-list-concatenation/17479468#17479468" title="iterating vs list concatenation">stackoverflow.com/questions/17479361/…</a></span>
<span class="comment-copy">Well, please do some explanation</span>
<span class="comment-copy">And <code>Bushisms</code>, <code>are_funny</code> are bad names!!!</span>
<span class="comment-copy">Already an answer <a href="https://stackoverflow.com/a/48894188/2308683">stackoverflow.com/a/48894188/2308683</a> and <a href="https://stackoverflow.com/a/14453876/2308683">stackoverflow.com/a/14453876/2308683</a></span>
<span class="comment-copy">Its extend and not extends</span>
<span class="comment-copy">Since you are <code>return</code>ing, this should be in a function. (Since it's forbidden outside a function)</span>
<span class="comment-copy">this is not true</span>
<span class="comment-copy">You meant <code>print(a)</code> gives the list</span>
<span class="comment-copy">What if i need to add multiple lists, like a+b+c+d+e?</span>
