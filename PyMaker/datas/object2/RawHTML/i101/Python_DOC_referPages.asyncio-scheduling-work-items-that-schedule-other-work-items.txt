<div class="post-text" itemprop="text">
<p>I am writing a Python program which schedules a number of asynchronous, I/O-bound items to occur, many of which will also be scheduling other, similar work items. The work items themselves are completely independent of one another and they do not require each others' results to be complete, nor do I need to gather any results from them for any sort of local output (beyond logging, which takes place as part of the work items themselves).</p>
<p>I was originally using a pattern like this:</p>
<pre class="lang-py prettyprint-override"><code>async def some_task(foo):
    pending = []

    for x in foo:
        # ... do some work ...
        if some_condition:
            pending.append(some_task(bar))

    if pending:
        await asyncio.wait(pending)
</code></pre>
<p>However, I was running into trouble with some of the nested <code>asyncio.wait(pending)</code> calls sometimes hanging forever, even though the individual things being <code>await</code>ed were always completing (according to the debug output that was produced when I used <code>KeyboardInterrupt</code> to list out the state of the un-gathered results, which showed all of the futures as being in the <code>done</code> state). When I asked others for help they said I should be using <code>asyncio.create_task</code> instead, but I am not finding any useful information about how to do this nor have I been able to get clarification from the people who suggested this.</p>
<p>So, how can I satisfy this use case?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python <a href="https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue" rel="nofollow noreferrer">asyncio.Queue</a> may help to tie your program processing to program completion.  It has a <code>join()</code> method which will block until all items in the queue have been received and processed.</p>
<p>Another benefit that I like is that the worker becomes more explicit as it pulls from a queue processes, potentially adds more items, and then ACKS, but this is just personal preference.</p>
<pre><code>async def worker(q):
    while True:
      item = await queue.get()

      # process item potentially requeue more work
      if some_condition:
         await q.put('something new')

      queue.task_done()


async def run():
  queue = asyncio.Queue()
  worker = asyncio.ensure_future(worker(queue))
  await queue.join()
  worker.cancel()


loop = asyncio.get_event_loop()
loop.run_until_complete(run())
loop.close()
</code></pre>
<p>The example above was adapted from asyncio producer_consumer example and modified since your worker both consumes and produces:</p>
<p><a href="https://asyncio.readthedocs.io/en/latest/producer_consumer.html" rel="nofollow noreferrer">https://asyncio.readthedocs.io/en/latest/producer_consumer.html</a></p>
<hr/>
<p>I'm not super sure how to fix your specific example but I would def look at the primitives that asyncio offers to help the event loop hook into your program state, notably <code>join</code> and using a <code>Queue</code>.</p>
</div>
<span class="comment-copy">Your code looks correct as far as the <code>wait</code> is concerned. How exactly have you concluded that <i>all</i> items in <code>pending</code> are done?</span>
<span class="comment-copy">Two additional remarks: the code doesn't implement a "queue" as indicated by the title, it only waits for a fixed list of items. Also, those who said that you should use <code>create_task</code> are in this case not correct - <code>wait()</code> automatically applies <code>ensure_future</code> to the awaitables it receives, and in case of coroutine objects, that is equivalent to calling <code>create_task</code>.</span>
<span class="comment-copy">@user4815162342 I logged every item as it was submitted, started, and finished. The only thing that was blocked was the <code>await asyncio.wait(pending)</code> itself, and if I terminated the program the "result was never processed" default logging showed all of the futures as being in the <code>done</code> state.</span>
<span class="comment-copy">@user4815162342 and title updated per your feedback</span>
<span class="comment-copy">Another, simpler thing you can do: call <code>create_task</code> to get a real future to put in <code>pending</code>. Before putting it into the list, call <code>add_done_callback</code> to ensure a debugging print when each of the tasks is done, <b>according to asyncio</b>. If they all turn out to be done, you've found a bug in <code>asyncio.wait()</code>. If some turn out not to be printed (as I suspect will happen), you'll know where you went wrong in your previous analysis.</span>
<span class="comment-copy">It seems that this code would only work on work items one at a time as the top-level worker visits them, which isn't what I want.</span>
<span class="comment-copy">Ah I c, with this solution one option to control concurrency is to spawn multiple consumers, this could give bounded control over number of concurrent operations allowed, following a worker pool pattern</span>
<span class="comment-copy">I already have the concurrency gated by the connection pool limits on <code>aiohttp</code> in this case. Assume that the underlying coroutines do their own appropriate <code>await</code>ing. :)</span>
