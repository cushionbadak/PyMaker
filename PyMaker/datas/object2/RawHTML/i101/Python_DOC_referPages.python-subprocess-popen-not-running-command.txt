<div class="post-text" itemprop="text">
<p>I'm trying to use <code>subprocess.Popen()</code> to run a command in my script. The code is:</p>
<pre><code>output = Popen(["hrun DAR_MeasLogDump " + log_file_name], stdout=subprocess.PIPE, stderr = subprocess.PIPE, executable="/bin/csh", cwd=cwdir, encoding='utf-8')
</code></pre>
<p>When I print the output, it's printing out the created shell output and not the actual command that's in the list. I tried getting rid of <code>executable='/bin/csh'</code>, but then Popen wouldn't even run.</p>
<p>I also tried using <code>subprocess.communicate()</code>, but it didn't work either. I would also get the shell output and not the actual command run. </p>
<p>I want to completely avoid using <code>shell=True</code> because of security issues.</p>
<p>EDIT: In many different attempts, "hrun" is not being recoognized. "hrun" is a Pearl script that is being called, DAR_MeasLogDump is the action and log_file_name is the file that the script will call its action on. Is there any sort of set up or configuration that needs to be done in order for "hrun" to be recognized?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>output = Popen(["-c", "hrun DAR_MeasLogDump " +log_file_name], stdout=subprocess.PIPE, stderr = subprocess.PIPE, executable="/bin/csh", cwd=cwdir, encoding='utf-8')
</code></pre>
<p><code>csh</code> is expecting <code>-c "full command here"</code>. Without <code>-c</code> I think it just tries to open it as a file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Specifying an odd shell and an explicit <code>cwd</code> seems completely out of place here (assuming <code>cwdir</code> is defined to the current directory).</p>
<p>If the first argument to <code>subprocess</code> is a list, <em>no</em> shell is involved.</p>
<pre><code>result = subprocess.run(["hrun", "DAR_MeasLogDump", log_file_name],
    stdout=subprocess.PIPE, stderr = subprocess.PIPE,
    universal_newlines=True, check=True)
output = result.stdout
</code></pre>
<p>If you need this to be run under a legacy version of Python, maybe use <code>check_output</code> instead of <code>run</code>.</p>
<p>You generally want to avoid <code>Popen</code> unless you need to do something which the higher-level wrapper functions cannot do.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are creating an instance of <code>subprocess.Popen</code> but not executing it.</p>
<p>You should try:</p>
<pre><code>p = Popen(["hrun", "DAR_MeasLogDump ", log_file_name], stdout=subprocess.PIPE, stderr = subprocess.PIPE, cwd=cwdir, encoding='utf-8')

out, err = p.communicate()  # This will get you output
</code></pre>
<p>Args should be passed as a sequence if you do not use <code>shell=True</code>, and then using <code>executable</code> <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">should not be required</a>.</p>
<p>Note that if you are not using advanced features from <code>Popen</code>, the doc recommends using <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a>:</p>
<pre><code>from subprocess import run

p = run(["hrun", "DAR_MeasLogDump ", log_file_name], capture_output=True, cwd=cwdir, encoding='utf-8')

out, err = p.communicate()  # This will get you output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works with <strong>cat</strong> example:</p>
<pre><code>import subprocess

log_file_name='-123.txt'

output = subprocess.Popen(['cat', 'DAR_MeasLogDump' + log_file_name], 
                                stdout=subprocess.PIPE, 
                                stderr=subprocess.STDOUT)
stdout, stderr = output.communicate()
print (stdout)
print (stderr)
</code></pre>
<p>I think you need only change to your '<strong>hrun</strong>' command</p>
</div>
<span class="comment-copy">Did you try making it a list as it is meant to be: <code>["hrun DAR_MeasLogDump", log_file_name]</code></span>
<span class="comment-copy">Yes, I tried it, but there is nothing being written to "output". When I run the command on the command line, there is an output which I am hoping to store in "output".</span>
<span class="comment-copy">Thanks for the reply! I tried doing it this way, and there is nothing being written to "output". When I run the same command on the command line, I see an output, which is what I'm hoping to store to "output".</span>
<span class="comment-copy">I got it wrong the first time as I didn't notice <code>executable="/bin/csh"</code>. See the updated answer.</span>
<span class="comment-copy">I tried it with "-c", but there is still nothing being stored to "output". Is the command not running, or is there something wrong with the arguments being passed into Popen?</span>
<span class="comment-copy">Oh <code>Popen()</code> doesn't return the output. You still need to call <code>output.communicate()</code> after adding <code>"-c</code>". You can also try <code>check_output()</code> for an easier route.</span>
<span class="comment-copy">When using output.communicate(), "DAR_MeasLogDump" is not being recognized (no such file or directory). It's meant to be an action. Surprisingly, "hrun" isn't throwing an error, which was the case for most of the other comments on this thread.</span>
<span class="comment-copy">For (much) more on the nuances of using <code>subprocess</code> on Unix, see also <a href="https://stackoverflow.com/a/51950538/874188">stackoverflow.com/a/51950538/874188</a></span>
<span class="comment-copy">Thanks for the reply! "hrun" is not being found when I try run(). "hrun" is a Pearl script that is being called from another directory that performs the action DAR_MeasLogDump. Is there any kind of set up or configuration that needs to be done in order for run/Popen to recognize hrun?</span>
<span class="comment-copy">Then you should call it from its absolute path, or make it available to PATH. And ensure it is executable, with appropriate shebang.</span>
