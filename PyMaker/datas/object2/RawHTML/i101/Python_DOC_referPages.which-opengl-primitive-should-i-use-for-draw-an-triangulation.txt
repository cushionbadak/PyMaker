<div class="post-text" itemprop="text">
<p>I've the following image : </p>
<p><a href="https://i.stack.imgur.com/0orHU.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/0orHU.png"/></a></p>
<p>That I was able to triangulate like the following : 
<a href="https://i.stack.imgur.com/34mx8.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/34mx8.png"/></a></p>
<p>I did it using the <a href="https://pypi.org/project/triangle/" rel="nofollow noreferrer">triangle</a> library of python. My triangulation result is stored into a <code>dict</code> object which look like that: </p>
<pre><code>&gt;&gt;&gt; triangulation["vertices"]
array([[ 23.        , 282.        ],
       [ 24.        , 254.        ],
       [ 30.        , 239.        ],
       [ 43.        , 219.        ],
       [ 60.        , 204.        ], ...  And so on ...



&gt;&gt;&gt; triangulation["triangles"]
array([[ 89, 106, 105],
       [ 99,  35,  86],
       [110,  68,  87],
       [ 47,  66,  83],
       [ 72,  82,  74], ...  And so on ...
</code></pre>
<p>Now, I want to distord and draw this texture as a mesh using OpenGL. I was wondering which primitive should I use? I think that <code>TRIANGLE_STRIP</code> is the right solution but it's a complex triangulation and it seems obvious that only one TRIANGLE_STRIP will not be enough.    </p>
</div>
<div class="post-text" itemprop="text">
<p>You've 2 arrays. The first array contains the 2 dimensional vertex coordinates and the second array contains the indices.<br/>
You have to use <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glDrawElements.xhtml" rel="nofollow noreferrer"><code>glDrawElements</code></a> tor draw the triangle primitives which are contained in the 2nd array. The indices refer to the corresponding vertex coordinates of the 1st array.</p>
<p>First you've to create a floating point buffer for the vertex coordinates and an integral buffer for the indices. The easiest way is to use <a href="http://www.numpy.org/" rel="nofollow noreferrer">NumPy</a>, to transform nested list or arrays to array buffers.</p>
<p>Assuming that you've an array of <code>vertices</code> in the form <em>[[x0, y0], [x1, y1], [x2, y2],...]</em> and an array of <code>indices</code> in the form <em>[[a0, b0, c0], [a1, b1, c1], [a2, b2, c2],...]</em>, then the buffers can be created like this:</p>
<pre class="lang-py prettyprint-override"><code>import numpy as np

vertex_array = np.array(vertices, dtype=np.float32)

no_of_indices = len(indices) * 3
index_array = np.array(indices, dtype=np.uint32)
</code></pre>
<p>The same can be done by using <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code></a>, instead of NumPy. But then the lists have to be <em>flattened</em> in the form <em>[x0, y0, x1, y1, x2, y2,...]</em> respectively <em>[a0, b0, c0, a1, b1, c1, a2, b2, c2,...]</em>:</p>
<pre class="lang-py prettyprint-override"><code>vertex_array = (ctypes.c_float * len(flat_vertices))(*flat_vertices)

no_of_indices = len(flat_indices) * 3
index_array = (ctypes.c_uint32 * no_of_indices)(*flat_indices)
</code></pre>
<p>Create a vertex array object. See <a href="https://www.khronos.org/opengl/wiki/Vertex_Specification#Vertex_Array_Object" rel="nofollow noreferrer">Vertex Specification</a>:</p>
<pre class="lang-py prettyprint-override"><code>vao = glGenVertexArrays(1)
glBindVertexArray(vao)

ibo = glGenBuffers(1)
glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo)
glBufferData(GL_ELEMENT_ARRAY_BUFFER, index_array, GL_STATIC_DRAW)

vbo = glGenBuffers(1)
glBindBuffer(GL_ARRAY_BUFFER, vbo)
glBufferData(GL_ARRAY_BUFFER, vertex_array, GL_STATIC_DRAW)

glVertexAttribPointer(0, 2, GL_FLOAT, False, 0, None)
glEnableVertexAttribArray(0)

glBindBuffer(GL_ARRAY_BUFFER, 0)
glBindVertexArray(0)
</code></pre>
<p>If you want to draw the triangle primitives  it is sufficient to bind the vertex array object and to call <code>glDrawElements</code>:</p>
<pre class="lang-py prettyprint-override"><code>glBindVertexArray(vao)
glDrawElements(GL_TRIANGLES, no_of_indices, GL_UNSIGNED_INT, None)
</code></pre>
<hr/>
<p>Regarding to the comment:</p>
<blockquote>
<p>[...] I already know how to texture a plane by using <code>glTexCoord2f</code> then <code>glVertex3f</code> but didn't figure out how I can do it with a vao.</p>
</blockquote>
<p>The easiest way is to create a separate array of texture coordinates. Assuming you've the texture coordinates <code>texAttr</code> in the form [[u0, v0], [u1, v1], [u2, v2],...]. 
Generating the buffer is straight forward:</p>
<pre class="lang-py prettyprint-override"><code>texAttr_array = np.array(texAttr, dtype=np.float32)
</code></pre>
<p>If you have a shader program, then you've to add the texture coordinate attribute:</p>
<p>e.g.</p>
<pre class="lang-c prettyprint-override"><code>layout (location = 0) in vec2 vertex;
layout (location = 1) in vec2 texAttr;
</code></pre>
<p>and to define an array of generic vertex attribute data.</p>
<pre class="lang-py prettyprint-override"><code>vao = glGenVertexArrays(1)
glBindVertexArray(vao)

# [...] index buffer

vbo = glGenBuffers(2)
glBindBuffer(GL_ARRAY_BUFFER, vbo[0])
glBufferData(GL_ARRAY_BUFFER, vertex_array, GL_STATIC_DRAW)
glBindBuffer(GL_ARRAY_BUFFER, vbo[1])
glBufferData(GL_ARRAY_BUFFER, texAttr_array, GL_STATIC_DRAW)

glVertexAttribPointer(0, 2, GL_FLOAT, False, 0, None)
glEnableVertexAttribArray(0)
glVertexAttribPointer(1, 2, GL_FLOAT, False, 0, None)
glEnableVertexAttribArray(1)

glBindBuffer(GL_ARRAY_BUFFER, 0)
glBindVertexArray(0)
</code></pre>
<p>If you use  compatibility profile and the fixed function attributes, then you've to specify the <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTexCoordPointer.xml" rel="nofollow noreferrer"><code>glTexCoordPointer</code></a> and enable the client state <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glEnableClientState.xml" rel="nofollow noreferrer"><code>GL_TEXTURE_COORD_ARRAY</code></a>.<br/>
Note, the client state <code>GL_VERTEX_ARRAY</code> and <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glVertexPointer.xml" rel="nofollow noreferrer"><code>glVertexPointer</code></a> is mapped to the vertex attribute 0. See <a href="https://stackoverflow.com/questions/20573235/what-are-the-attribute-locations-for-fixed-function-pipeline-in-opengl-4-0-cor/51949673#51949673">What are the Attribute locations for fixed function pipeline in OpenGL 4.0++ core profile?</a>:</p>
<pre class="lang-py prettyprint-override"><code>vao = glGenVertexArrays(1)
glBindVertexArray(vao)

# [...] index buffer

vbo = glGenBuffers(2)
glBindBuffer(GL_ARRAY_BUFFER, vbo[0])
glBufferData(GL_ARRAY_BUFFER, vertex_array, GL_STATIC_DRAW)
glBindBuffer(GL_ARRAY_BUFFER, vbo[1])
glBufferData(GL_ARRAY_BUFFER, texAttr_array, GL_STATIC_DRAW)

glVertexPointer(2, GL_FLOAT, 0, None)
glEnableClientState(GL_VERTEX_ARRAY)
glTexCoordPointer(2, GL_FLOAT, 0, None)
glEnableClientState(GL_TEXTURE_COORD_ARRAY)

glBindBuffer(GL_ARRAY_BUFFER, 0)
glBindVertexArray(0)
</code></pre>
<p>Note, if you don't use a shader, then 2 dimensional texturing has to be enabled by </p>
<pre class="lang-py prettyprint-override"><code>glEnable(GL_TEXTURE_2D)
</code></pre>
<hr/>
<p>Regarding to the comment:</p>
<blockquote>
<p>I d'like to displace vertex one by one [...]</p>
</blockquote>
<p>A single vertex coordinate can be changed by <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBufferSubData.xhtml" rel="nofollow noreferrer"><code>glBufferSubData</code></a>, where the 2nd parameter is a byte offset to the vertex coordinate. The offset for the coordinate <code>i</code> would be <code>4*2*i</code> (4 is the size of float in bytes, and each coordinate consist of 2 components <em>x</em> and <em>y</em>).  </p>
</div>
<span class="comment-copy">What's wrong with <code>TRIANGLES</code>?</span>
<span class="comment-copy">my triangles need to be connected, no ?</span>
<span class="comment-copy">Thank you, how can this vertex array be textured ? And do you think it will be easy to modify its vertex position in real time ?</span>
<span class="comment-copy">For the texturing you need texture coordinates. See <a href="https://stackoverflow.com/questions/5532595/how-do-opengl-texture-coordinates-work">How do opengl texture coordinates work?</a>. What do you mean by <i>" modify its vertex position in real time"</i>? Do you want to displace or rotate the mesh? Do you want to generate distortions?</span>
<span class="comment-copy">and I'm still learning and it's damn hard ^^ . Not sure If it should be a vertex or a fragment shader. I'm sure that your answer is correct but I need to make it work before accept it. Good exercice by the way.</span>
<span class="comment-copy">of course, I can't make it work : ) Are you sure about <code>glEnableClientState(GL_VERTEX_ARRAY)</code> after <code>glTexCoordPointer()</code> ? it doesn't looks like the example I found here : <a href="https://www.khronos.org/opengl/wiki/VBO_-_just_examples" rel="nofollow noreferrer">khronos.org/opengl/wiki/VBO_-_just_examples</a> where <code>GL_TEXTURE_COORD_ARRAY</code> is used instead of <code>GL_VERTEX_ARRAY</code>. it perturbs me a bit..</span>
<span class="comment-copy">By the way, I had to invert tex coordinates vertically: <code>texAttr = [[vert[0] / img_width, img_height - vert[1] / img_height] for vert in vertices]</code> and then <code>vertex_array[:, 1] = img_height - vertex_array[:, 1]</code></span>
