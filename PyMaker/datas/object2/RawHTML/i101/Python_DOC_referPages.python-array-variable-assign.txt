<div class="post-text" itemprop="text">
<p>I have the following array in Python in the following format:</p>
<pre><code>Array[('John', '123'), ('Alex','456'),('Nate', '789')]
</code></pre>
<p>Is there a way I can assign the array variables by field as below?</p>
<pre><code>Name = ['john', 'Alex', 'Nate']
ID = ['123', '456', '789']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the spirit of "explicit is better than implicit":</p>
<pre><code>data = [('John', '123'), ('Alex', '456'), ('Nate', '789')]

names = [x[0] for x in data]
ids = [x[1] for x in data]


print(names) # prints ['John', 'Alex', 'Nate']
print(ids)  # prints ['123', '456', '789']
</code></pre>
<p>Or even, to be even more explicit:</p>
<pre><code>data = [('John', '123'), ('Alex', '456'), ('Nate', '789')]
NAME_INDEX = 0
ID_INDEX = 1

names = [x[NAME_INDEX] for x in data]
ids = [x[ID_INDEX] for x in data]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is a compact way to do this using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>lst = [('John', '123'), ('Alex','456'),('Nate', '789')]

name, userid = list(zip(*lst))

print(name)   # ('John', 'Alex', 'Nate')
print(userid)  # ('123', '456', '789')
</code></pre>
<p>note that the results are stored in (immutable) <code>tuple</code>s; if you need (mutatble) <code>list</code>s you need to cast.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/21867303/how-to-split-a-list-of-2-tuples-into-two-lists">How to split a list of 2-tuples into two lists?</a></span>
<span class="comment-copy">What do you mean by "if you need (mutable) <code>list</code>s you need to cast"? There are no casts in Python.</span>
<span class="comment-copy">wouldn't you call <code>int('123')</code> a cast? (here i mean: <code>list(name)</code>.)</span>
<span class="comment-copy">No, that's not a cast. You're just constructing a new instance, or, more pedantically, just calling a callable that happens to construct a new instance. When you call <code>int('123')</code> you are simply calling <code>int.__init__(..., '123')</code>, and the <code>int</code> class can do whatever it wants with that. It can have the side effect of producing a new object with a new type that is otherwise equivalent, but that's not its primary purpose.</span>
<span class="comment-copy">hmmm. i agree... i'd just have called that a cast (maybe because there is no such thing in python and this is the closest to it). but maybe i really shouldn't.</span>
