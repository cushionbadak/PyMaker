<div class="post-text" itemprop="text">
<p>I was reading <a href="https://docs.python.org/3/reference/index.html" rel="nofollow noreferrer">Python Language reference</a>.</p>
<p>On <a href="https://docs.python.org/3/reference/lexical_analysis.html#indentation" rel="nofollow noreferrer">lexical analysis page</a></p>
<blockquote>
<p>Before the first line of the file is read, a single zero is pushed on the stack; this will never be popped off again. The numbers pushed on the stack will always be strictly increasing from bottom to top. At the beginning of each logical line, the line’s indentation level is compared to the top of the stack. If it is equal, nothing happens. If it is larger, it is pushed on the stack, and one INDENT token is generated.</p>
</blockquote>
<p>Here, it says that adding indent on a line will just add the value associated with INDENT to the indent tracking stack.</p>
<hr/>
<p>So I tried to do python equivalent of the C++ snippet</p>
<pre><code>int x = 23;
{
    int y = 13;
}
int z = 2*x;
</code></pre>
<p>with this python snippet</p>
<pre><code>x = 23
    y = 13
z = 2*x
</code></pre>
<p>But making python run this code generated following error:</p>
<pre><code>    y = 13
IndentationError: unexpected indent
</code></pre>
<hr/>
<p>So the above rule doesn't apply all the time, I wanted to know </p>
<ul>
<li>Is there a python equivalent to the above C++ code snippet</li>
<li>What exactly are the cases in python, when I can use the indentation,
other than the general cases like function and class definitions.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>"At the beginning of each logical line, the line’s indentation level is compared to the top of the stack. If it is equal, nothing happens. If it is larger, it is pushed on the stack, and one INDENT token is generated."</p>
<p>So here it tells you all about when indent token are generated. Now you also need to know that only the key words class, def, if, for, while, etc. allows you to have an additionnal current indent token.</p>
<p>"when I can use the indentation, other than the general cases like function and class definitions". -&gt; Never.</p>
<p>Note : breaking line doesn't count as indent token. So :</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, \  # \ is breaking line.
        3]
</code></pre>
<p>is possible, it doesn't technically count as indentation because it's the same python line. Same for function arguments :</p>
<pre><code>&gt;&gt;&gt; a = np.array([0,1],
                 dtype=float)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the most important usage of indentations is in loops. Because python does not have an <code>end</code> for loops like in Matlab, the lines with the correct indentation are in the loop. </p>
</div>
<span class="comment-copy">There is no direct equivalent to that in Python because python doesn't really have block scoping.</span>
<span class="comment-copy">it sounds like you did not read far enough in to the python docs, if you keep going you will understand when indenting is needed</span>
<span class="comment-copy">You use indentation to indicate inclusion in a block. However, there are no "anonymous" blocks in Python, only blocks introduced by <code>class</code>, <code>with</code>, <code>for</code>, <code>while</code>, <code>if</code>, etc.</span>
<span class="comment-copy">Is there something like temporary variable which I can dump it quickly after using?</span>
<span class="comment-copy">In python you cannot do that like in C/C++, in those languages you can use <code>{ }</code> to limit the scope of your code, but python only understand your code based into identation since he is a interpreted language and not compiled and do not use <code>{ }</code>, basically identation is everything in python :)</span>
