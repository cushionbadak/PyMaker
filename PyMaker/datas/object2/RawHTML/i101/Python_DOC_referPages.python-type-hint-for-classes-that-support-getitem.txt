<div class="post-text" itemprop="text">
<p>I want to add type hints to a function that will accept any object with a <code>__getitem__</code> method. For instance, in</p>
<pre><code>def my_function(hasitems, locator):
    hasitems[locator]
</code></pre>
<p>I don't want to restrict <code>hasitems</code> to be a specific type like <code>list</code> or <code>dict</code>. As long as it supports <code>__getitem__</code>, it's an appropriate argument to <code>my_function</code>. How can I annotate its type without being unnecessarily restrictive?</p>
<p>Edit: apparently PyCharm can deduce the appropriate hint in a number of common cases, but not in my actual use case. I can't post the code since it's for work, and I haven't been able to find a nonproprietary minimal example where PyCharm fails. In any case, the original question doesn't reference PyCharm and it is still a valid use case for type hints.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're willing to install a not-quite-offical extension to <code>typing</code>, <a href="https://pypi.org/project/typing-extensions/" rel="nofollow noreferrer">typing-extensions</a>, you can use a <code>Protocol</code>, which should be an implementation of <a href="https://www.python.org/dev/peps/pep-0544/" rel="nofollow noreferrer">PEP-0544</a>:</p>
<pre><code>from typing_extensions import Protocol
from typing import Any

class GetItem(Protocol):
    def __getitem__(self: 'Getitem', key: Any) -&gt; Any: pass

class BadGetItem:
    def __getitem__(self, a: int, b: int) -&gt; Any: pass

def do_thing(arg: GetItem):
    pass

do_thing(dict())  # OK
do_thing(BadGetItem())  # Fails with explanation of correct signature
do_thing(1)  # Fails
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will work for dict and list, but not for any generic type:</p>
<pre><code>from typing import Any, Mapping, Sequence, Union

def my_function(hasitems: Union[Mapping, Sequence], locator: Any) -&gt; Any:
    return hasitems[locator]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you essentially want to define your own <a href="https://docs.python.org/3/glossary.html#term-abstract-base-class" rel="nofollow noreferrer">abstract base class (abc)</a>.</p>
<p>Following the documentation above, you can define a custom abc that only dictates the presence of <code>__getitem__</code>, but let's use a predefined one for an example. 
The <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping" rel="nofollow noreferrer"><code>Mapping</code></a> abc consists of <code>__getitem__</code> and a few other magic methods. You can use abcs in <code>isinstance</code>, but you can also directly use them as a type annotations:</p>
<pre><code>def foo(bar: Mapping):
    pass
</code></pre>
<p>Or, using the <a href="https://docs.python.org/3/library/typing.html#generics" rel="nofollow noreferrer">extended type hinting support of ABCs</a> do even fancies things, which you already saw in other answers:</p>
<pre><code>def foo(bar: Mapping[Any, Any]):
    pass
</code></pre>
</div>
<span class="comment-copy">Make an <code>abc</code> with that single abstract method.</span>
<span class="comment-copy">May I ask what is the use for such a hint? IDEs already deduct the hints automatically based on the usage. Are you using these hints for something else?</span>
<span class="comment-copy">Then upgrade. For me PyCharm yields for calling <code>my_function(5, 10)</code>: &gt; Type 'int' doesn't have expected attribute '<b>getitem</b>' less... (Ctrl+F1)  Inspection info: This inspection detects type errors in function call expressions. Due to dynamic dispatch and duck typing, this is possible in a limited but useful number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations.</span>
<span class="comment-copy">I suggest you put your actual code in the question. This way we could be more helpful.</span>
<span class="comment-copy">What Python version are you using?  3.7 introduced Protocols, which are supposed to address this problem: <a href="https://www.python.org/dev/peps/pep-0544/" rel="nofollow noreferrer">python.org/dev/peps/pep-0544</a></span>
<span class="comment-copy">This is the best solution so far, but it ignores the function's arguments. It does not verify the function's number of arguments and the argument's types.</span>
<span class="comment-copy">@LiranFunaro What makes you say that?  When I run mypy on the above example (which I just added a test case to), it fails <code>BadGetItem</code> objects because of incompatible signatures.</span>
<span class="comment-copy">I'm basing my response on the fact that PyCharm does not issue a warning when the parameters are incompatible. Also, <code>isinstance()</code> returns <code>True</code> for the same case.</span>
<span class="comment-copy">@LiranFunaro I'm using command line mypy 0.670.  When I try to use a <code>Protocol</code> in an <code>isinstance</code> check, I get an error <code>TypeError: Instance and class checks can only be used with @runtime protocols</code></span>
<span class="comment-copy">You should add <code>@runtime</code> decrator to the Protocol.</span>
<span class="comment-copy">Mmmm not quite. A <code>Mapping</code> is much more than merely <code>__getitem__</code>. Note also, <code>list</code> objects support <code>__getitem__</code>, but they are not a <code>Mapping</code></span>
<span class="comment-copy"><code>typing.Sequence</code> is another ABC that "defines" <code>__getitem__</code>, though even that may be more specific than the OP wants. (As it also mandates <code>__len__</code>, <code>__iter__</code>, etc.)</span>
<span class="comment-copy">@LiranFunaro Thanks, but I specifically asked for a solution that is not restricted to <code>dict</code> and <code>list</code>.</span>
<span class="comment-copy">@chepner Correct, mandating <code>__len__</code> and <code>__iter__</code> is not ok.</span>
<span class="comment-copy">I think what you are asking for, then, is almost <i>too</i> broad. Sure, classes that support <code>__getitem__</code> but nothing else <i>can</i> exist, but is there any reason to <i>support</i> them? Unless  you have a specific class in mind that <i>isn't</i> covered by <code>Union[Mapping,Sequence]</code>, I would use that until it actually presents a problem.</span>
<span class="comment-copy"><code>Mapping</code> is not appropriate here, it will be overly restrictive.</span>
<span class="comment-copy">That's why I said I only use it as an example and OP can define their own ABC that only consists of <code>__getitem__</code></span>
<span class="comment-copy">If this is truly the best way, I'm disappointed in the <code>typing</code> module. My use case must be quite common.</span>
<span class="comment-copy">You can always just doo <code>hasattr(x, '__getitem__')</code> or wrap a lookup in try-except. python's type hinting looks and works clunky indeed imo</span>
<span class="comment-copy">Thanks, but I'm not interested in guarding the input type. I just want a type hint that works with PyCharm.</span>
