<div class="post-text" itemprop="text">
<p>I have the following text: </p>
<pre><code>text = je vais mettre la {\i1}i{\i0}-ème équation, donc {\i1}aᵢ₁x₁+{\i0} … + {\i1}aᵢₙxₙ= bi{\i0} et ensuite, je ne change pas les autres
</code></pre>
<p>I would like to replace to replace all instances <code>{\i1}SOMETHING{\i0}</code> with <code>\textit{SOMETHING}</code> </p>
<p>Is this possible with Python ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a regular expression:</p>
<pre><code>import re
re.sub(r'{\\i1}(.*?){\\i0}', r'\textit{\1}', text)
</code></pre>
<p>An explanation. You must replace all sub-string (character sequences) that match a precise pattern:</p>
<ul>
<li>a fixed string: "{\i1}";</li>
<li>some generic text you do not know right now (SOMETHING);</li>
<li>a fixed string: "{\i0}";</li>
</ul>
<p>with the following text: "\textit{SOMETHING}", where SOMETHING is exactly the same text as above. Regular expressions are perfect for this kind of job. With them you can search text, capture it in a variable, replace, etc. The syntax, related to your need, is the following:</p>
<ul>
<li>the literal string "{\i1}", the double backslash is needed because the backslash is a special character;</li>
<li>the dot (<code>.</code>) match every character</li>
<li>the start-question-mark (<code>*?</code>) repeat the previous pattern (the dot) in a non-greedy fashion. Combined with the previous token means any character as less as possible;</li>
<li>the parenthesis (<code>()</code>) store the content pattern in a special variable (<code>\1</code>, <code>\2</code>, etc.) that you can reference later in the replacement text;</li>
<li>the literal string "{\i0}".</li>
</ul>
<p>Using <code>re.sub</code> you can replace the matching pattern with a replacement text. I suggest you to follow the @cglacet advice and test your regular expression with regex101: <a href="https://regex101.com/r/8vaDFt/1" rel="nofollow noreferrer">https://regex101.com/r/8vaDFt/1</a></p>
</div>
<span class="comment-copy">Yes, it is. Please have a look at the <code>re</code> standard module.</span>
<span class="comment-copy">Yes, it is possible, and there are multiple ways to do this. Have you tried something, did it work, and just where are you stuck? This could be done easily with <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a>. If you are not familiar with those, you could repeatedly search for the initial part of the desired substring then the final part then deal with the section.</span>
<span class="comment-copy">If you are not used to regex format you can use a site like <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a> to build/test your regex.</span>
<span class="comment-copy">Thank you very much for your answer. As I am completely new to regular expressions, would you mind to tell me how it works ?</span>
<span class="comment-copy">Regular expressions are a series of pattern that are matched against a string. They are a powerful tool to parse and manipulate text. The argument is so big that are many book dedicated entirely to it. I can only point you to the documentation of the python library (but they are language agnostic) and to the wikipedia article.  <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a> <a href="https://en.wikipedia.org/wiki/Regular_expression" rel="nofollow noreferrer">en.wikipedia.org/wiki/Regular_expression</a></span>
<span class="comment-copy">Thank you very much! Could you just add a comment of what the code does roughly ? I will then try to understand it on my own using your provided link.</span>
