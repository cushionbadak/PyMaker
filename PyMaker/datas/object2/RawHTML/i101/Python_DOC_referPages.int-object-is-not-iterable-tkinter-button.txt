<div class="post-text" itemprop="text">
<p>In my code, I define a series of buttons using a <code>for</code> loop and when the green one is pressed it runs a function. My problem I think is that when it runs the function it is doing it inside of the <code>Button</code> class and thus not using the global value that I want it to.</p>
<pre><code>##def of the for loop to make the buttons##
for x in range(len(ProjectList)):
    if ProjectList[x][1] &gt; money:
        buylist[x] = Button(buyf, text = ProjectList[x][1], bg = "red", fg = "white")

    elif ProjectList[x][1] &lt;= money:
        buylist[x] = Button(buyf, text = ProjectList[x][1], command = lambda n=x: buycheck(n,money, moneyps), bg="green", fg="white")

##function called when button pressed##
def buycheck(numbbuy,money, moneyps):
    ##error checking stuff##

    ##buy function##
    buy(numbbuy,money, moneyps)

##function that does the purchase##
def buy(numbbuy,money, moneyps):

    money -= int(ProjectList[numbbuy][1])
    moneyps += int(ProjectList[numbbuy][0])
</code></pre>
<p><code>ProjectList</code> is 11 rows by 2 columns of numbers.</p>
<p><code>money</code> and <code>moneyps</code> are integers defined at the start.</p>
<p>The error occurs in the <code>buy()</code> function on the assignment lines for <code>money</code> and <code>moneyps</code>. The error shown is:</p>
<pre class="lang-none prettyprint-override"><code>moneyps += int(ProjectList[numbbuy][0])
TypeError: 'int' object is not iterable
</code></pre>
<p>Full code:</p>
<pre><code>from tkinter import *
from time import *

##############globals##############
global ProjectList
global gamecomplete
global money
global moneyps

##############values for init##############
names = [
"Reusable Rockets" ,
"Space elevator"   ,
"Orbital rings"    ,
"Asteroid mining"  ,
"1Space clean up"  ,
"1Mars colony"     ,
"Planet mining"    ,
"1Dyson Swarm"     ,
"1Dyson sphere"    ,
"Sun mining"       ,
"Space colony"     ,
"Colony Ship"      ,
]

ProjectList = [
#   name            PS      cost
[100,   3000],  #0
[200,   6000],  #1
[300,   9000],  #2
[400,   12000], #3
[500,   13000], #4
[600,   15000], #5
[700,   16000], #6
[800,   17000], #7
[900,   18000], #8
[1000,  19000], #9
[1100,  20000], #10
[0,     21000]  #11
]

gamecomplete = False
money = 10000
moneyps = 200
boughtitems = []

##############functions##############
def buy(numbbuy,money, moneyps):

    money -= int(ProjectList[numbbuy][1])
    moneyps += int(ProjectList[numbbuy][0])
    names.append(ProjectList[numbbuy])
    print("money", money)
    print("moneyps", moneyps)

##############Checks to see what it needs to do befre it can be bought##############
def buycheck(numbbuy,money, moneyps):
    ##############it can only be bought once##############
    if names[numbbuy][0] == "1":
        buy(numbbuy,money, moneyps)
        names.pop(numbbuy)
    ##############its the last thing to buy to win the game##############
    elif numbbuy == 11:
        gamecomplete = True
    ##############normal buys##############
    else:
        buy(numbbuy,money, moneyps)

##############UI creation##############
def ui(money, moneyps):
    ##############init##############
    win = Tk()
    buyf = Frame()

    ##############headder##############
    headder = Label(win,text = "Money = $"+str(money)+"\t$/s = $"+str(moneyps))

    ##############title##############
    projectname = Label(buyf,text = "Project names")
    projectPS = Label(buyf, text = "$/s added")
    buybutton = Label(buyf, text = "buy")

    ##############title gridded##############
    projectname.grid(row = 0, padx = 2)
    projectPS.grid(row = 0, column = 1, padx = 2)
    buybutton.grid(row = 0, column = 2, padx = 2)

    buildproj = list()
    moneyps = list()
    buylist = list()

    ##############name of build proj // money PS // buy button##############

    #defines empty lists
    buildproj = [None] * len(ProjectList)
    moneyps = [None] * len(ProjectList)
    buylist = [None] * len(ProjectList)

    #for loop to make all the buttons
    for x in range(len(ProjectList)):

        #clean up input
        if names[x][0] == "1":
            temp == names[x][1::]

        else:
            temp = names[x]

        #define content
        buildproj[x] = Label(buyf, text = temp)
        moneyps[x] = Label(buyf, text = ProjectList[x][0])

        if ProjectList[x][1] &gt; money:
            buylist[x] = Button(buyf, text = ProjectList[x][1], bg = "red", fg = "white")

        elif ProjectList[x][1] &lt;= money:
            buylist[x] = Button(buyf, text = ProjectList[x][1], command = lambda n=x: buycheck(n,money, moneyps), bg="green", fg="white")

        #grid it
        buildproj[x].grid(row = x+1, sticky = "e")
        moneyps[x].grid(row = x+1, column =1)
        buylist[x].grid(row = x+1, column = 2, sticky = "nesw")

    ##############quit button##############
    quit = Button(win, text = "Quit", command=win.quit, bg = "red", fg = "white")

    ##############research update##############
    status = Label(win, text="current research % complete", bd = 1, relief = SUNKEN, anchor = W)

    ##############packing##############
    headder.pack()
    buyf.pack()
    quit.pack(fill = "x")
    status.pack(side=BOTTOM, fill = "x", )

    win.mainloop()

##############Body##############
ui(money, moneyps)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error is telling you that when you try to do <code>moneyps += int(ProjectList[numbbuy][0])</code> You are indexing something (an integer in this case) that is not iterable (cannot be indexed). Based on your variable names I would guess that <code>ProjectList</code> is a <strong>list</strong> and from the error I would guess it looks something like:</p>
<pre><code>ProjectList = [1, 3, 7, 11, 9] #some integers
</code></pre>
<p>So let's say your <code>numbbuy</code> is 2, then</p>
<pre><code>moneyps += int(ProjectList[numbbuy][0])
</code></pre>
<p>equates to</p>
<pre><code>moneyps += int(7[0])
</code></pre>
<p>Because ProjectList indexed at 2 -&gt; 7. You are then asking the computer to split 7 into an iterable list/string and then take the first value (0th index). This doesn't physically make sense to do. Since it is the first item you are going for anyways I would recommend trying:</p>
<pre><code>moneyps += int(ProjectList[numbbuy]) # Just remove [0]
</code></pre>
<p>This would just reduce to:</p>
<pre><code>moneyps += int(7)
</code></pre>
<p>In our example above, which is what I think you are trying to do. For a more appropriate answer though you will need to provide many more details to create an MCVE that we can help with (Check the link in the comment @Prune left for you)</p>
<p><strong>UPDATE</strong></p>
<p>With your full code I found that </p>
<pre><code>moneyps = [&lt;tkinter.Label object .1294806022968.1294809795776&gt;, &lt;tkinter.Label object .1294806022968.1294809795944&gt;, &lt;tkinter.Label object .1294806022968.1294809796168&gt;, &lt;tkinter.Label object .1294806022968.1294809796392&gt;, &lt;tkinter.Label object .1294806022968.1294809804872&gt;, &lt;tkinter.Label object .1294806022968.1294809805040&gt;, &lt;tkinter.Label object .1294806022968.1294809805208&gt;, &lt;tkinter.Label object .1294806022968.1294809805376&gt;, &lt;tkinter.Label object .1294806022968.1294809805544&gt;, &lt;tkinter.Label object .1294806022968.1294809805712&gt;, &lt;tkinter.Label object .1294806022968.1294809805880&gt;, &lt;tkinter.Label object .1294806022968.1294809806048&gt;]
</code></pre>
<p>And therefore your line <code>moneyps += int(ProjectList[numbbuy][0])</code> does not make any sense because you are trying to add an integer with a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the problem is you don't understand how global variables work in Python and what the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer"><code>global</code></a> statement does (i.e. it doesn't "define" a variable). Those <code>global</code> statements at the beginning don't really do anything — except perhaps to act as documentation — because they're at the module-level and any variables <em>defined</em> there would be global anyway.</p>
<p><code>global</code> statements are need inside any function that wishes to <em>change</em> the value of the variable (it's not needed to just reference the current value of one).</p>
<p>Given that information, avoid the <code>TypeError</code> can be avoided by changing your code as I've as indicated below with <code>#---&gt;</code> comments. That said, I can't tell if your program really works correctly now because I don't really understand what you're trying to make it do. Having function parameters and global variables with the same name but different types is at best very confusing (as pointed out by @acw1668 in a comment under your question as well as in @Reedinationer's answer).</p>
<pre><code>from tkinter import *
from time import *

##############globals##############
#global ProjectList   # Does nothing.
#global gamecomplete  # Does nothing.
#global money         # Does nothing.
#global moneyps       # Does nothing.

##############values for init##############
names = [
"Reusable Rockets" ,
"Space elevator"   ,
"Orbital rings"    ,
"Asteroid mining"  ,
"1Space clean up"  ,
"1Mars colony"     ,
"Planet mining"    ,
"1Dyson Swarm"     ,
"1Dyson sphere"    ,
"Sun mining"       ,
"Space colony"     ,
"Colony Ship"      ,
]

ProjectList = [
#   name            PS      cost
[100,   3000],  #0
[200,   6000],  #1
[300,   9000],  #2
[400,   12000], #3
[500,   13000], #4
[600,   15000], #5
[700,   16000], #6
[800,   17000], #7
[900,   18000], #8
[1000,  19000], #9
[1100,  20000], #10
[0,     21000]  #11
]

gamecomplete = False
money = 10000
moneyps = 200
boughtitems = []

##############functions##############
def buy(numbbuy):  #---&gt; Removed money, moneyps parameters
    global money, moneyps  #---&gt; Added
    money -= int(ProjectList[numbbuy][1])
    moneyps += int(ProjectList[numbbuy][0])
    names.append(ProjectList[numbbuy])
    print("money", money)
    print("moneyps", moneyps)

##############Checks to see what it needs to do befre it can be bought##############
def buycheck(numbbuy):   #---&gt; Removed money, moneyps parameters
    global money, moneyps  #---&gt; Added
    ##############it can only be bought once##############
    if names[numbbuy][0] == "1":
        buy(numbbuy,money, moneyps)
        names.pop(numbbuy)
    ##############its the last thing to buy to win the game##############
    elif numbbuy == 11:
        gamecomplete = True
    ##############normal buys##############
    else:
        buy(numbbuy)  #---&gt; Removed money, moneyps parameters

##############UI creation##############
def ui(money, moneyps):
    ##############init##############
    win = Tk()
    buyf = Frame()

    ##############headder##############
    headder = Label(win,text = "Money = $"+str(money)+"\t$/s = $"+str(moneyps))

    ##############title##############
    projectname = Label(buyf,text = "Project names")
    projectPS = Label(buyf, text = "$/s added")
    buybutton = Label(buyf, text = "buy")

    ##############title gridded##############
    projectname.grid(row = 0, padx = 2)
    projectPS.grid(row = 0, column = 1, padx = 2)
    buybutton.grid(row = 0, column = 2, padx = 2)

    buildproj = list()
    moneyps = list()
    buylist = list()

    ##############name of build proj // money PS // buy button##############

    #defines empty lists
    buildproj = [None] * len(ProjectList)
    moneyps = [None] * len(ProjectList)
    buylist = [None] * len(ProjectList)

    #for loop to make all the buttons
    for x in range(len(ProjectList)):

        #clean up input
        if names[x][0] == "1":
            temp == names[x][1::]

        else:
            temp = names[x]

        #define content
        buildproj[x] = Label(buyf, text = temp)
        moneyps[x] = Label(buyf, text = ProjectList[x][0])

        if ProjectList[x][1] &gt; money:
            buylist[x] = Button(buyf, text = ProjectList[x][1], bg = "red", fg = "white")

        elif ProjectList[x][1] &lt;= money:
            buylist[x] = Button(buyf, text = ProjectList[x][1],
#               command = lambda n=x: buycheck(n,money, moneyps), bg="green", fg="white")
                command = lambda n=x: buycheck(n), bg="green", fg="white")  #---&gt; Changed
        #grid it
        buildproj[x].grid(row = x+1, sticky = "e")
        moneyps[x].grid(row = x+1, column =1)
        buylist[x].grid(row = x+1, column = 2, sticky = "nesw")

    ##############quit button##############
    quit = Button(win, text = "Quit", command=win.quit, bg = "red", fg = "white")

    ##############research update##############
    status = Label(win, text="current research % complete", bd = 1, relief = SUNKEN, anchor = W)

    ##############packing##############
    headder.pack()
    buyf.pack()
    quit.pack(fill = "x")
    status.pack(side=BOTTOM, fill = "x", )

    win.mainloop()

##############Body##############
ui(money, moneyps)
</code></pre>
</div>
<span class="comment-copy">Apparently <code>ProjectList[numbbuy]</code> is an integer, so attempting to index it with the following <code>[0]</code> fails. You'll need to include much more code in your question to get a better answer.</span>
<span class="comment-copy">@martineau  ProjectList = [ #   name            PS      cost [100, 	3000],  #0 [200,	6000],  #1 [300,	9000],  #2 [400,	12000], #3 [500,	13000], #4 [600,	15000], #5 [700,	16000], #6 [800,	17000], #7 [900,	18000], #8 [1000,	19000], #9 [1100,	20000], #10 [0,		21000]  #11 ]  its a 2D array thus i dont think im referencing it incorectly   added full code</span>
<span class="comment-copy">Please don't post the full code. We need something minimal. For example, do you really need a dozen ships just to reproduce this problem?</span>
<span class="comment-copy">The main issue is that you redefine <code>money</code> and <code>moneyps</code> from <code>integer</code> to <code>list</code> inside <code>ui()</code> function.  Think carefully whether the redefinition is a mistake and not neccessary.</span>
<span class="comment-copy">@acw1668 thx that was the problem i miss labelled the variable thx</span>
<span class="comment-copy">ProjectList = [ #   name            PS      cost [100, 	3000],  #0 [200,	6000],  #1 [300,	9000],  #2 [400,	12000], #3 [500,	13000], #4 [600,	15000], #5 [700,	16000], #6 [800,	17000], #7 [900,	18000], #8 [1000,	19000], #9 [1100,	20000], #10 [0,		21000]  #11 ]  its a 2D array so I don't think I'm referencing it incorrectly idk tho.  added full code</span>
<span class="comment-copy">@biddls You are adding an integer with a list. I think you intended for <code>moneyps</code> to be something else...</span>
