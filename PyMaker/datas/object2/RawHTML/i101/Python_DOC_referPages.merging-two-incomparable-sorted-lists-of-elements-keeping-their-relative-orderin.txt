<div class="post-text" itemprop="text">
<p>I have two ordered lists with incomparable elements:  </p>
<pre><code>l1 = [1, 2, 3, 4]  
l2 = [obj1, obj2, obj3]  
</code></pre>
<p>I want to merge them randomly into one list but keep their relative order, like this:  </p>
<pre><code>ml = [1, 2, obj1, obj2, 3, obj3, 4]  
</code></pre>
<p>or  </p>
<pre><code>ml = [obj1, 1, 2, 3, obj2, obj3, 4]  
</code></pre>
<p>I would appreciate if anyone help me.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Simple function that modifies the input and returns a list:</h2>
<pre><code>import random

l1 = [1, 2, 3, 4]
l2 = ["obj1", "obj2", "obj3"]

def merge_random(lists):
    res = []
    while lists:
        li = random.choice(lists)
        res.append(li.pop(0))
        lists = [li for li in lists if li]
    return res

print(merge_random((l1, l2)))
</code></pre>
<p>Example output:</p>
<pre><code>['obj1', 'obj2', 1, 2, 'obj3', 3, 4]
</code></pre>
<h2>A generator, the more pythonic solution</h2>
<p>This solution was suggested by <a href="https://stackoverflow.com/users/1252759/jon-clements">Jon Clements</a>. It makes use of a <a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="nofollow noreferrer">generator</a> and does not modify the user input. This is clearly the more pythonic solution to the problem.</p>
<pre><code>import random

def f(*iterables):
    todo = [iter(it) for it in iterables]
    while todo:
        idx = random.randrange(len(todo))
        try:
            yield next(todo[idx])
        except StopIteration:
            del todo[idx]
</code></pre>
<p>It can be used like this:</p>
<pre><code>l1 = [1, 2, 3, 4]
l2 = ["obj1", "obj2", "obj3"]

for i in f(l1, l2):
    print(i)
</code></pre>
<p><strong>Example output:</strong></p>
<pre><code>obj1
1
2
obj2
obj3
3
4
</code></pre>
</div>
<span class="comment-copy">Umm... could just do: <code>l3 = l1 + l2; random.shuffle(l3)</code>...</span>
<span class="comment-copy">I do not this this would work, because the result is required to have the elements in the same order as in the original lists. With your suggested code, for example 'obj2' could appear before 'obj1'</span>
<span class="comment-copy">Ahh... good point... completely glossed over the "relative ordering" part... ignore me :)</span>
<span class="comment-copy">You could probably generalise it something like: <a href="http://dpaste.com/1XTNTW3" rel="nofollow noreferrer">dpaste.com/1XTNTW3</a></span>
<span class="comment-copy">Thank you, I included it into the answer.</span>
