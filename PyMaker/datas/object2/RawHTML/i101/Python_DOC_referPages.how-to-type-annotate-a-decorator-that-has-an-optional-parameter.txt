<div class="post-text" itemprop="text">
<p>Here's the exact function that I'm trying to type-annotate correctly:</p>
<pre><code>F = TypeVar('F', bound=Callable[..., Any])

def throtle(_func: Optional[F] = None, *, rate: float = 1) -&gt; Union[F, Callable[[F], F]]:
    """Throtles a function call, so that at minimum it can be called every `rate` seconds.

    Usage::

        # this will enforce the default minimum time of 1 second between function calls
        @throtle
        def ...

    or::

        # this will enforce a custom minimum time of 2.5 seconds between function calls
        @throtle(rate=2.5)
        def ...

    This will raise an error, because `rate=` needs to be specified::

        @throtle(5)
        def ...
    """

    def decorator(func: F) -&gt; F:
        @functools.wraps(func)
        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:
            time.sleep(rate)
            return func(*args, **kwargs)

        return cast(F, wrapper)

    if _func is None:
        return decorator
    else:
        return decorator(_func)
</code></pre>
<p>While I'm not getting any error when putting it through mypy, I'm not convinced that I did the right thing, nor am I sure how I could go about proving it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code typechecks but probably it does not do what you want, because you are returning an <code>Union</code>.</p>
<p>To check what type mypy infers for some variable you can use <code>reveal_type</code>.</p>
<pre class="lang-py prettyprint-override"><code># Note: I am assuming you meant "throttle" and so I changed your spelling
def throttle1(
    _func: Optional[F] = None, *, rate: float = 1.0
) -&gt; Union[F, Callable[[F], F]]:
    # code omitted


@throttle1
def hello1() -&gt; int:
    return 42


reveal_type(hello1) # Revealed type is 'Union[def () -&gt; builtins.int, def (def () -&gt; builtins.int) -&gt; def () -&gt; builtins.int]'
</code></pre>
<p>Assuming we want <code>hello1</code> to be a function that returns an int (i.e. <code>def () -&gt; builtins.int</code>) we need to try something else.</p>
<h2>Simple strategy</h2>
<p>The simplest thing is to always ask the user of <code>throttle</code> to "call the decorator" even if she/he is not overriding any arguments:</p>
<pre class="lang-py prettyprint-override"><code>def throttle2(*, rate: float = 1.0) -&gt; Callable[[F], F]:
    def decorator(func: F) -&gt; F:
        @functools.wraps(func)
        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:
            time.sleep(rate)
            return func(*args, **kwargs)

        return cast(F, wrapper)

    return decorator


@throttle2() # Note that I am calling throttle2 without arguments
def hello2() -&gt; int:
    return 42

reveal_type(hello2) # Revealed type is 'def () -&gt; builtins.int'


@throttle2(rate=2.0)
def hello3() -&gt; int:
    return 42

reveal_type(hello3) # Revealed type is 'def () -&gt; builtins.int'

</code></pre>
<p>This already works and is very simple.</p>
<h2>Use <code>typing.overload</code></h2>
<p>In case the previous solution is not acceptable, you can use <code>overload</code>.</p>
<pre><code># Matches when we are overriding some arguments
@overload
def throttle3(_func: None = None, *, rate: float = 1.0) -&gt; Callable[[F], F]:
    ...

# Matches when we are not overriding any argument
@overload
def throttle3(_func: F) -&gt; F:
    ...


def throttle3(
    _func: Optional[F] = None, *, rate: float = 1.0
) -&gt; Union[F, Callable[[F], F]]:
    # your original code goes here


@throttle3 # Note: we do not need to call the decorator
def hello4() -&gt; int:
    return 42


reveal_type(hello4) # Revealed type is 'def () -&gt; builtins.int'


@throttle3(rate=2.0)
def hello5() -&gt; int:
    return 42


reveal_type(hello5) # Revealed type is 'def () -&gt; builtins.int'
</code></pre>
<p>You can learn more on how to use <code>overload</code> by reading <a href="https://docs.python.org/3/library/typing.html#typing.overload" rel="nofollow noreferrer">its official documentation</a>, and <a href="https://mypy.readthedocs.io/en/latest/more_types.html#function-overloading" rel="nofollow noreferrer">mypy's documentation on Function overloading</a>.</p>
</div>
<span class="comment-copy">the part from "Use typing.overload" doesn't work though, mypy just gives other errors</span>
<span class="comment-copy">check out this gist please, where everything seems to work fine <a href="https://gist.github.com/Laurentiu-Andronache/505908e99e299e55070a644e8ff24187" rel="nofollow noreferrer">gist.github.com/Laurentiu-Andronache/â€¦</a></span>
<span class="comment-copy">Umh, you are right. I think the problem is that ellipsis (<code>...</code>) can be used as default only in stub files. If you don't want to use a stub file, I think the only thing is to write again the default values. I will update the answer :)</span>
<span class="comment-copy">you also have to remove the typing from the actual definition <code>def throttle3(     _func: Optional[F] = None, *, rate: float = 1.0 ) -&gt; Union[F, Callable[[F], F]]:</code></span>
<span class="comment-copy">and the first overload doesn't need <code>_func</code></span>
