<div class="post-text" itemprop="text">
<p>Consider a list </p>
<pre><code>temp=[
{'white': ['BlackRock Institutional Trust Company, N.A.  400 Howard Street  San Francisco, CA 94105-2618', ' ', '1,741,814', '', ' ', ' ', ' 6.85%', ' ']},
{'white': ['The Banc Funds Co, LLC  20 North Wacker Drive    Suite 3300  Chicago, IL 60606-3105', ' ', '1,447,529', '', ' ', ' ', ' 5.69%', ' ']}, 
{'blue': ['James B. Miller, Jr.', ' ', '3,413,249', '', '(1)     ', ' ', '13.40%', ' ']}, 
{'blue': ['Major General (Ret) David R. Bockel', ' ', '41,471', '', '(2)    ', ' ', ' *', ' ']}, 
{'white': ['Wm. Millard Choate', ' ', '221,581', '', '(3)   ', ' ', ' *', ' ']}, 
{'white': ['Dr. Donald A. Harp, Jr.', ' ', '40,892', '', '(4)   ', ' ', ' *', ' ']}, 
{'white': ['Kevin S. King', ' ', '53,124', '', '(5)  ', ' ', ' *', ' ']}, 
{'white': ['William C. Lankford, Jr.', ' ', '32,043', '', '(6)  ', ' ', ' *', ' ']}, 
{'white': ['H. Palmer Proctor, Jr.', ' ', '309,384', '', '(7)  ', ' ', '1.22%', ' ']}, 
{'white': ['W. Clyde Shepherd III', ' ', '349,450', '', '(8)     ', ' ', '1.37%', ' ']}, 
{'white': ['Rankin M. Smith, Jr.', ' ', '303,768', '', '(9)  ', ' ', '1.19%', ' ']}, 
{'white': ['Stephen H. Brolly', ' ', '48,958', '', ' ', ' ', ' *', ' ']}, 
{'blue': ['David Buchanan', ' ', '278,601', '', ' ', ' ', '1.10%', ' ']}, 
{'blue': ['All directors and executive officers  as a group (11 persons)', ' ', '5,092,521', '', '(10)  ', ' ', '19.93%', ' ']}
]
</code></pre>
<p>I want to break the list into different list whenever the key of dictionary changes. The desired output would be </p>
<pre><code>[{'white': ['BlackRock Institutional Trust Company, N.A.  400 Howard Street  San Francisco, CA 94105-2618', ' ', '1,741,814', '', ' ', ' ', ' 6.85%', ' ']}, {'white': ['The Banc Funds Co, LLC  20 North Wacker Drive   Suite 3300  Chicago, IL 60606-3105', ' ', '1,447,529', '', ' ', ' ', ' 5.69%', ' ']}]
[{'blue': ['James B. Miller, Jr.', ' ', '3,413,249', '', '(1)    ', ' ', '13.40%', ' ']}, {'blue': ['Major General (Ret) David R. Bockel', ' ', '41,471', '', '(2)  ', ' ', ' *', ' ']}]
[{'white': ['Wm. Millard Choate', ' ', '221,581', '', '(3)  ', ' ', ' *', ' ']}, {'white': ['Dr. Donald A. Harp, Jr.', ' ', '40,892', '', '(4)  ', ' ', ' *', ' ']}, {'white': ['Kevin S. King', ' ', '53,124', '', '(5)  ', ' ', ' *', ' ']}, {'white': ['William C. Lankford, Jr.', ' ', '32,043', '', '(6)  ', ' ', ' *', ' ']}, {'white': ['H. Palmer Proctor, Jr.', ' ', '309,384', '', '(7)  ', ' ', '1.22%', ' ']}, {'white': ['W. Clyde Shepherd III', ' ', '349,450', '', '(8)  ', ' ', '1.37%', ' ']}, {'white': ['Rankin M. Smith, Jr.', ' ', '303,768', '', '(9)  ', ' ', '1.19%', ' ']}, {'white': ['Stephen H. Brolly', ' ', '48,958', '', ' ', ' ', ' *', ' ']}]
[{'blue': ['David Buchanan', ' ', '278,601', '', ' ', ' ', '1.10%', ' ']}, {'blue': ['All directors and executive officers  as a group (11 persons)', ' ', '5,092,521', '', '(10)  ', ' ', '19.93%', ' ']}]
</code></pre>
<p>Key can be more than two (i.e., white and blue)</p>
<p>For now i came up with this logic, but is there any simple or short way to do this.</p>
<pre><code>def format(temp):
    i=0
    tmp_list = []
    while i&lt;len(temp):
        found=False
        for color1 in  temp[i]:
            if i+1&lt;len(temp):
                for color2 in temp[i+1]:
                    if color1!=color2:
                        tmp_list.append(temp[i])
                        tmp_list.append("changed")
                        found=True
        if found==False:
            tmp_list.append(temp[i])
        i=i+1
    final_list = []
    another_lis = []
    for tl in tmp_list:
        if tl!='changed':
            another_lis.append(tl)
        else:
            final_list.append(another_lis)
            another_lis = []

    return final_list

whole_list = format(temp)

for wl in whole_list:
    print(wl)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An nice way to do this is to use <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools%20groupby#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>from itertools import groupby
temp = [...]
data = [list(g) for _, g in groupby(temp, key=dict.keys)]
</code></pre>
<p>However, as pointed out by Eli Korvigo, this solution is only works with multi-key dictionaries in Python 3.x, since on Python 2.x, <code>dict.keys()</code> returns a list object, which is order-sensitive when being compared. As Eli states, an appropriate substitute to use in Python 2.x would be a data structure such as a <code>set</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I like to have a custom method like the one here below, to be used whenever a <strong>slicing on condition between consecutive elements</strong> is required.</p>
<pre><code>def chunk_while(predicate, iterable):
  i, x, size = 0, 0, len(iterable)
  while i &lt; size-1:
    if not predicate(iterable[i], iterable[i+1]):
      yield iterable[x:i+1]
      x = i + 1
    i += 1
  yield iterable[x:size]
</code></pre>
<p>In this case it can be used in this way:</p>
<pre><code>slices = chunk_while(lambda x,y: list(x) == list(y), temp)
</code></pre>
<p>The result is generator for a a nested array:</p>
<pre><code>print(list(slices))

# [
#   [{'white': ['BlackRock Institutional ...', '..']}, {'white': ['The Banc Funds ...', '..']}],
#   [{'blue': ['James B. Miller, Jr.', '..']}, {'blue': ['Major General (Ret) ...']}],
#   [{'white': ['Wm. Millard Choate', '..']}, {'white': ['Dr. Donald A. Harp, Jr.', '..']}, {'white': ['Kevin S. King', '..']}, {'white': ['William C. Lankford, Jr.', '..']}, {'white': ['H. Palmer Proctor, Jr.', '..']}, {'white': ['W. Clyde Shepherd III', '..']}, {'white': ['Rankin M. Smith, Jr.', '..']}, {'white': ['Stephen H. Brolly', '..']}],
#   [{'blue': ['David Buchanan', '..']}, {'blue': ['All directors and executive ...', '..']}]
# ]
</code></pre>
</div>
<span class="comment-copy">I don't understand <i>whenever the key of dictionary changes</i>. Can you explain more clearly how you relate the input to the output?</span>
<span class="comment-copy">If I read his question correctly, he wants to group his data by the first key of each dictionary @BoarGules</span>
<span class="comment-copy">Lets take an example. When you come to 3rd iteration you find out the key as 'blue' -&gt; which does not match the previous key 'white'. so i will break list from that point.  Note-&gt; any no of keys can be there.  Thanks, for your time</span>
<span class="comment-copy">If there can be more than a single key, should the solution account for all keys? That is, do you want to introduce a breakpoint whenever any key in a set of keys changes?</span>
<span class="comment-copy">Thanks, Really great bro.</span>
<span class="comment-copy">I love me some itertools. There is no need to convert <code>dict_keys</code> objects into lists, though. They implement <code>__eq__</code>, i.e. you can simply pass <code>key=dict.keys</code> instead of <code>key=lambda ...</code>.</span>
<span class="comment-copy">Ah, yeah I forgot! @EliKorvigo Good catch man, thanks.</span>
<span class="comment-copy">You're welcome. You can also add that this solution is only adequate for multi-key dictionaries on Python 3.x, because on Python 2.x <code>dict.keys</code> returns a list, and list comparison is order-sensitive. Your previous solution had a problem with multi-key dicts even on Py 3.x (due to conversion to list). On Python 2 one can do <code>key=set</code>. This will also work on Py3, but in that case the <code>dict.key</code> solution is more efficient, because <code>dict_keys</code> objects are (computationally cheap) views.</span>
<span class="comment-copy">@user3809411 can you show your <code>groupby</code> call? If you do pass <code>key=dict.keys</code> in the <code>groupby</code> call and get this error, it is highly likely that you've shadowed the builtin name <code>dict</code> with an instance: <b>don't ever do that</b> without a very good reason. Moreover, on Py 2.7 you should use <code>key=set</code> instead.</span>
<span class="comment-copy"><code>Iterable</code> objects are not subscriptable, hence your argument names are misleading and even unsafe. Subscription operations (to the extent used in your function) are implemented by classes conforming to the <code>Sequence</code> ABC.</span>
<span class="comment-copy">@EliKorvigo I supposed it was ok, since <a href="https://docs.python.org/3.7/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer">docs.python.org/3.7/library/itertools.html#itertools.dropwhile</a>. But maybe I misunderstood something. Can you help me understand why the method doesn't work and why arguments are unsafe?</span>
<span class="comment-copy">As you might've noticed there is no subscription in the snippet you've referenced. All functions in <code>itertools</code> are design to work with generic <code>Iterable</code> objects. These objects must implement only one method: <code>__iter__</code>. You solution relies on subscription and slicing: both are implemented by <code>__getitem__</code> of all builtin <code>Sequence</code> types, though user-defined <code>Sequence</code>s are not forced to implement slicing.</span>
