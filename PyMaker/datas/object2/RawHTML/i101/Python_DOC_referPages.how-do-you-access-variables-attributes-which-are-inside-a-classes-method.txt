<div class="post-text" itemprop="text">
<p>How do I access the attribute/variable a inside the method yes form the body of the program outside of the class? What I have below gives me an error. </p>
<pre><code>class test:
    def yes(self):
        a=5


g=test()
print(g.yes.a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot directly access the variable, even if 'g' is an object of 'test', and yes() is it' method, 'a' is still a local variable for yes(). You haven't initialized it for the entire class. So your object cannot access it. You need to return its value from the function. This should work</p>
<pre><code>class test:
    def yes(self):
        a=5
        return a

g=test()
print(g.yes())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure why you would want to access it, but here's another way to do so:</p>
<pre class="lang-py prettyprint-override"><code>from collections import defaultdict

class test:
    def __init__(self):
        self.for_returns = defaultdict()

    def yes(self):
        a=7
        self.for_returns['a'] = 7

    def return_all(self):
        return self.for_returns

x = test()
x.yes()
x.return_all()

</code></pre>
<blockquote>
<p>defaultdict(None, {'a': 7})</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Variables defined within a function have local scope, and can't be accessed from outside the function.</p>
<p>If you want to access a variable from inside a function, <code>return</code> it from the function:</p>
<pre><code>class test:
    def yes(self):
        a = 5
        return a


g = test()
print(g.yes())
</code></pre>
<p>However, I suspect you may want to look at setting the variable as an instance variable:</p>
<pre><code>class test:
    def __init__(self):
        self.a = None

    def yes(self):
        self.a = 5
        # Do some other things here...

g = test()
g.yes()
print(g.a)
</code></pre>
<p>Finally, if you're using external code, and are interested in this for the sake of debugging, then the <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">python debugger (pdb)</a> will let you inspect variables within a function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>self</code> to set and get instance variables. You can set it in the <code>__init__</code> method:</p>
<pre><code>class test:
    def __init__(self):
        self.a = 5

g = test()
print(g.a)
</code></pre>
<p><strong>OR</strong></p>
<p>If you must use the <code>yes</code> func:</p>
<pre><code>class test:
    def __init__(self):
        self.a = None

    def yes(self):
       self.a = 5

g = test()
g.yes()
print(g.a)
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>5
</code></pre>
</div>
<span class="comment-copy">It is a local variable, you cannot. Make it an instance variable by assigning it to <code>self.a</code></span>
<span class="comment-copy">@dentalfloss, you may consider accepting an answer that helped you: <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work" title="how does accepting an answer work">meta.stackexchange.com/questions/5234/â€¦</a> cheers</span>
