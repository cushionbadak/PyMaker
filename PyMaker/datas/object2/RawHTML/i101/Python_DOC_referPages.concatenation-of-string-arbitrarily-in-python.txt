<div class="post-text" itemprop="text">
<p>I have to generate the concatenation of the string:</p>
<p>My function has <code>n</code> and <code>stuff</code> as inputs it has to generate the following arbitrary sequence</p>
<p>Here <code>N</code> is the no of input strings to be considered.</p>
<p><strong>Sample Inputs:</strong></p>
<blockquote>
<p>N = 3 , stuff = ['x','y','z']</p>
</blockquote>
<p><strong>Sample Ouputs:</strong></p>
<blockquote>
<p>xy xz yz</p>
</blockquote>
<p><strong>Explanation of output:</strong></p>
<p>xy -&gt; combination of 1 and 2</p>
<p>xz -&gt; combination of 1 and 3</p>
<p>yz -&gt; combination of 2 and 3</p>
<p>The range of N is not specific to 3. i.e Range of N &lt;= 1000. </p>
<p><strong>My code:</strong></p>
<pre><code>for _ in range(int(input())):
n = int(input())
stuff = []
for i in range(0,n):
    stuff.append(input())

for L in stuff[0:]:
    for J in stuff[1:-1]:
        k = L+J
        print(k)
</code></pre>
<p><strong>My Output:</strong></p>
<blockquote>
<p>xy
  yy
  zy</p>
</blockquote>
<p>I understood I failed to implement the indexing in list properly.But also I could not fix this bug.</p>
<p><strong>Question1:</strong>
Can anyone help me to fix the list indexing in loops ?</p>
<p><strong>Question2:</strong>
Time Complexity is O(n^2) Can I optimize to O(n)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe it's not what you are looking for. But try this one for beginner:</p>
<pre><code>stuff = []
N = int(input("Enter the size of N: "))
for n in range(N):
    s = input("Enter stuff %i : " %(n+1))
    stuff.append(str(s))   

for ss in range(len(stuff)):
    st = stuff[ss]
    for x in range(ss+1, len(stuff)):
        comb = st + stuff[x]
        print (comb)
</code></pre>
<p>or you can simplify by using <code>itertools.combination</code>:</p>
<pre><code>from itertools import combinations   

stuff = []
N = int(input("Enter the size of N: "))
for n in range(N):
    s = input("Enter stuff %i : " %(n+1))
    stuff.append(str(s)) 

result = [''.join(i) for i in combinations(stuff, 2)]
print (result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could achieve this with list comprehensions and <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations</a>:</p>
<pre><code>from itertools import combinations    
res = [''.join(item) for item in combinations(stuff, 2)]
# ['xy', 'xz', 'yz']
</code></pre>
<p>with 2 being the length of your desired combination</p>
</div>
<span class="comment-copy">You are generating <i>permutations</i>, and the Python standard library has you covered: use <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations()</code></a> instead. The documentation includes a pure-python implementation of the O(n) algorithm used.</span>
<span class="comment-copy">Using permutations would yield both 'xy' and 'yx' as valid outputs, I believe he's looking for combinations</span>
<span class="comment-copy">The tested code for combinations is here [itertools.combinations] (<a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.combinations</a>)</span>
<span class="comment-copy">Please fix your code indentation. Correct indentation is critical to understanding Python code.</span>
<span class="comment-copy">learnt something new today</span>
