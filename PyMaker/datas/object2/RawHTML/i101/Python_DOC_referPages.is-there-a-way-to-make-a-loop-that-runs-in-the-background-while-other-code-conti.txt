<div class="post-text" itemprop="text">
<p>I'm really new to programming, I was wondering if there was a way to run a while loop in the background of code already running in Python?</p>
<p>I was thinking of something like</p>
<p><code>While True:
    print("gibberish")
print("pass")</code></p>
<p>with an output of something like:</p>
<p>'gibberish
gibberish
pass
gibberish.....'</p>
<p>(It doesn't have to be in this order as long as I get a similar result)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can refer to the following code.</p>
<pre><code>import threading

def func1():
    for i in range(10):
        print("gibberish")

def func2():
    print("pass")

t1 = threading.Thread(target=func1)
t2 = threading.Thread(target=func2)


if __name__ == '__main__':
    t1.start()
    t2.start()
</code></pre>
<p>What it does is, runs the methods <code>func1</code> and <code>func2</code> concurrently so that the provided methods run as background task for each other.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use either <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> or <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer"><code>threading</code></a>:</p>
<pre><code>def background_code():
    while some_condition:
        print("gibberish")

...
thread = threading.Thread(target=background_code, args=(), kwargs={})
thread.start()
print("pass")
...
</code></pre>
<p>Both <code>multiprocessing</code> and <code>threading</code> have very similar APIs, and which one to use depends on your use case - the distinction between processes and threads is not one for this question. You're <em>probably</em> going to want <code>threading</code> for what you're currently working on, but there are different situations in which you'd prefer one or the other.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is something similar using <code>asyncio</code> (requires python 3.7+):</p>
<pre><code>import asyncio

async def loop():
    while True:
        print("gibberish")
        await asyncio.sleep(0.5)

async def main():
    future = asyncio.ensure_future(loop())
    for i in range(100):
        print("pass")
        await asyncio.sleep(1)
    future.cancel()
asyncio.get_event_loop().run_until_complete(main())    
</code></pre>
<p>This will print two <code>gibberish</code> for each <code>pass</code>. You can change the sleep timing to change the ratio.</p>
<p>Here, <code>main</code> and <code>loop</code> are <a href="https://en.wikipedia.org/wiki/Coroutine" rel="nofollow noreferrer">coroutines</a>, where only one is executed at a time. The <code>await ...</code> calls are points where execution is potentially yielded to other coroutines.</p>
</div>
<span class="comment-copy">You should research multiprocessing/multithreading.</span>
<span class="comment-copy">Take a look to this answer <a href="https://stackoverflow.com/a/3221320/3920623">stackoverflow.com/a/3221320/3920623</a></span>
<span class="comment-copy"><code>threading.Thread</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2905965/creating-threads-in-python">Creating Threads in python</a></span>
<span class="comment-copy">I don't think this would ever print <code>"pass"</code>.</span>
<span class="comment-copy">This is true; however, it most closely resembles the code put forth in the question and I think it's pretty obvious</span>
<span class="comment-copy">I believe it would be most useful for future readers if you could demonstrate how to run the <code>while</code> loop in another thread while doing something else (such as printing "pass") in the main thread.</span>
<span class="comment-copy">@Selcuk Good idea. Edited accordingly.</span>
<span class="comment-copy">coroutines are an alternative to both multiprocessing and threading (not disagreeing with these choices at all) -- just providing a 3rd option</span>
