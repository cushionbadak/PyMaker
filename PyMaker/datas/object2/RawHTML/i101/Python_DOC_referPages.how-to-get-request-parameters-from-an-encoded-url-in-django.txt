<div class="post-text" itemprop="text">
<p>I am using Django Rest Framework.</p>
<p>The API receives GET requests with json objects encoded into the URL. For example:</p>
<p><code>/endpoint?%7B%0D%0A++%22foo%22%3A%5B%22bar%22%2C%22baz%22%5D%0D%0A%7D</code></p>
<p>Where the decoded parameters are</p>
<pre><code>{
  "foo":["bar","baz"]
}
</code></pre>
<p>I can't find anything in the documentation for Django or DRF pointing to how the framework can handle this so that I get a <code>QueryDict</code> with the json objects in it by doing something like:</p>
<p><code>request.query_params # Should yield a dict -&gt; {foo=[bar,baz]}</code></p>
<p>How can I decode JSON encoded URLs in Django Rest Framework?</p>
<p>Note that my actual parameters are much more complex. Using POST is not an because the caller relies heavily on caching and bookmarking</p>
</div>
<div class="post-text" itemprop="text">
<p>The Django <code>request.GET</code> object, and the <code>request.query_params</code> alias that Django REST adds, can only parse <a href="https://url.spec.whatwg.org/#application/x-www-form-urlencoded" rel="nofollow noreferrer"><code>application/x-www-form-urlencoded</code> query strings</a>, the type encoded by using a HTML form. This format can only encode key-value pairs. There is no standard for encoding JSON into a query string, partly because URLs have a <a href="https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers">rather limited amount of space</a>.</p>
<p>If you must use JSON in a query string, it'd be much easier for you if you <a href="https://stackoverflow.com/questions/15872658/standardized-way-to-serialize-json-to-query-string">prefixed the JSON data with a key name</a>, so you can at least have Django handle the URL percent encoding for you.</p>
<p>E.g.</p>
<pre><code>/endpoint?json=%7B%0D%0A++%22foo%22%3A%5B%22bar%22%2C%22baz%22%5D%0D%0A%7D
</code></pre>
<p>can be accessed and decoded with:</p>
<pre><code>import json

json_string = request.query_params['json']
data = json.loads(json_string)
</code></pre>
<p>If you can't add the <code>json=</code> prefix, you need to decode the URL percent encoding yourself with <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote_plus" rel="nofollow noreferrer"><code>urllib.parse.unquote_plus()</code></a>, from the <a href="https://docs.djangoproject.com/en/2.1/ref/request-response/#django.http.HttpRequest.META" rel="nofollow noreferrer"><code>request.META['QUERY_STRING']</code> value</a>:</p>
<pre><code>from urllib.parse import unquote_plus
import json

json_string = unquote_plus(request.META['QUERY_STRING'])
data = json.loads(json_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse" rel="nofollow noreferrer">Urllib</a> ought to do it:</p>
<pre><code>from urllib.parse import unquote
url = "endpoint?%7B%0D%0A++%22foo%22%3A%5B%22bar%22%2C%22baz%22%5D%0D%0A%7D"
url = unquote(url)
print(url)
</code></pre>
<p>The above almost works, but the encoding might be incorrect, not sure:</p>
<pre><code>endpoint?{
++"foo":["bar","baz"]
}
</code></pre>
</div>
<span class="comment-copy">Why are you sending the data like that? Can you change it?</span>
<span class="comment-copy">The reason for receiving data in that form is because the API receives a large number of input parameters. I cannot change that because I do not own my client's code. Even if I did, this would still be the best way barring POST.</span>
<span class="comment-copy">There is no standard for sending structured form parameters in URLs, so <code>request.query_params</code> can't just parse a random format that purports to contain structure. All we have is <a href="https://url.spec.whatwg.org/#application/x-www-form-urlencoded" rel="nofollow noreferrer">url-encoded query parameters</a>, which contains a series of <code>name=value</code> pairs separated by <code>&amp;</code>.</span>
<span class="comment-copy">So what you really should do, is <a href="https://stackoverflow.com/questions/15872658/standardized-way-to-serialize-json-to-query-string">to prefix the json string with a key name</a>, so it can at least be extracted as just another query parameter. And be aware that URLs have a <a href="https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers">rather low length limit</a>.</span>
