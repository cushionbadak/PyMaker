<div class="post-text" itemprop="text">
<p>I would like to find all possible paths from [0,0,0,0,0,0] to [1,1,1,1,1,1]. So for example:</p>
<pre><code>path_i = [[0,0,0,0,0,0], 
          [0,1,0,0,0,0],
          [0,1,1,0,0,0], 
          [0,1,1,0,0,1], 
          [0,1,1,1,0,1],
          [0,1,1,1,1,1],
          [1,1,1,1,1,1]]
</code></pre>
<p>would be one example of this possible path.</p>
<p>I can imagine some really horrible ways of doing this (randomly adding 1 to each list item where it is zero and iterating until you have all the unique paths). However, I believe there must be a better method</p>
<p>Edit: Asked for clarification of a step in each path</p>
<p>Where the sum of the subsists changes by 1, e.g.</p>
<pre><code> [0,0,0,0,0,0] -&gt; [0,0,0,0,1,0] is a step

 [0,0,0,0,0,0] -&gt; [0,0,1,0,1,0] is NOT a step
</code></pre>
<p>In each path, there should only be 7 steps</p>
<p>Thanks in advance
J</p>
</div>
<div class="post-text" itemprop="text">
<p>So you agrre we have <code>7!</code> ways to find a path, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a> for that:</p>
<pre><code>from itertools import permutations
paths = permutations(range(7), 7)

list_paths = []

for path in paths:
    tmp = [0]*7
    list_path = [tmp[:]]
    for index in path:
        tmp[index] = 1
        list_path.append(tmp[:])
    list_paths.append(list_path)
</code></pre>
<p>All yours paths are in <code>list_paths</code></p>
</div>
<span class="comment-copy">Define a "step" in your "path".</span>
<span class="comment-copy">Then generate all possible steps from the given state and use your favorite tree traversing algorithm.</span>
<span class="comment-copy">Thanks, a lot quicker and neater than what i had in mind!</span>
