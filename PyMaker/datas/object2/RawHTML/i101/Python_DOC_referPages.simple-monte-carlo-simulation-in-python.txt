<div class="post-text" itemprop="text">
<p>What is the expectation of the number of times you need to roll a fair die until you have seen every number?</p>
<p>I have been asked to define a function that runs a monte carlo simulation that returns an estimate for the question above. My understanding of the solution is that I need to:</p>
<ol>
<li>Define a function that takes the number of trials as an input</li>
<li>Generates a random integer between 1 and 6 (the number of sides on a die)</li>
<li>Store that integer in a list if it is not already in the list</li>
<li>Count the number of trials it takes to reach said condition, and return that count</li>
</ol>
<p>I am fairly new to programming and Python in particular so I am struggling to identify why my syntax does not produce an output when the function is called and was hoping someone could help steer me in right direction</p>
<p>This is my code :</p>
<pre><code>def roll(n=1000):
    trials = []
    sides = 6
    start = 1

    for i in range (n):
        for x in range (sides):
            collection = [random.randint(1,sides)]
            while any([x not in collection]):
            collection.append(random.randint(1,6))
            trials.append(len(collection))

    return sum(trials)/ len(trials)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are probably not <em>printing</em> whatever the funtion returns - that why it displays nothing.</p>
<p>Use <code>print(roll())</code> instead of <code>roll()</code> to print the result you get.</p>
<p>You have too many loops and your solution uses far too much memory space.</p>
<p>Consider being unlucky and having to roll 1.000.000.000.000 times to get the first 6 - you'll save 1.000.000.000.000 other numbers in a list .. thats a lot of memory.</p>
<hr/>
<p>You can use a <code>set</code> to remember seen numbers and a counter to count how long it took to find all:</p>
<pre><code>def roll(sides=6, n=1000):
    """Tests 'n' times to roll all numbers from 1 to 'sides' randomly.
    Returns average tries needed to see all numbers over 'n' tries."""
    trials = []   # collects all sinly tried counters

    for _ in range(n):
        seen = set()   # empty, will only ever store 6 elements at most
        tried = 0      # how long did it take to find all 6?
        while len(seen) &lt; sides:  # use sides here as well
            seen.add(random.randint(1,sides))
            tried += 1
        trials.append(tried)

    return sum(trials)/n


print(roll())  
</code></pre>
<p>Output (4 starts):</p>
<pre><code>14.878

14.694

14.732

14.516
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>while</code> condition does not express what you expect it to be. You probably wanted to use list comprehension</p>
<pre><code>while any([x not in collection for x in [1, 2, 3, 4, 5, 6])
</code></pre>
<p>also, you don't want 3 layers of loop, only two: one <code>for</code> each trial and the other <code>while</code> trial is not complete. A working example, close to your original post would be</p>
<pre><code> import random

 def roll(n=1000):
     trials = []
     sides = 6
     start = 1
     possible_sides = [1, 2, 3, 4, 5, 6]

     for i in range (n):
         collection = [random.randint(1,sides)]
         while any([side not in collection for side in possible_sides]):
             collection.append(random.randint(1,6))
         trials.append(len(collection))

     return sum(trials)/ len(trials)
</code></pre>
<p>whereas a more efficient solution uses <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer"><code>set</code></a> to efficiently do the same thing as the previous solution achieves with <code>any([side not in collection for side in possible_sides])</code>:</p>
<pre><code>import random

 def roll(n=1000):
     trials = []
     sides = 6
     start = 1
     possible_sides = set([1, 2, 3, 4, 5, 6])

     for i in range (n):
         n_rolls = 0
         sides_rolled = set()
         while not sides_rolled == possible_sides:
             sides_rolled.add(random.randint(1, sides))
             n_rolls += 1

         trials.append(n_rolls)

     return sum(trials)/ len(trials)
</code></pre>
<p>Or, even more efficiently, just check if <code>len(sides_rolled) &lt; 6</code>, as pointed out in an answer by Patrick Artner.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simplify your code considerably by using a <code>set</code> instead of a list and also changing your iteration logic:</p>
<pre><code>import random

def roll_till_all_sides_appeared():
    sides_seen = set()
    n = 0

    while len(sides_seen) &lt; 6:
        side = random.randint(1, 6)
        sides_seen.add(side)         # will only be added if it isn't present
        n += 1

    return n

def test(repetitions):
    max_n = float('-inf')
    min_n = float('inf')
    sum_n = 0

    for _ in range(repetitions):
        n = roll_till_all_sides_appeared()
        max_n = max(max_n, n)
        min_n = min(min_n, n)
        sum_n += n

    print('max:', max_n)
    print('min:', min_n)
    print('avg:', sum_n / repetitions)
</code></pre>
<p>This code can be used like this:</p>
<pre><code>&gt;&gt;&gt; test(10)
max: 32
min: 8
avg: 14.3
&gt;&gt;&gt; test(100)
max: 45
min: 6
avg: 14.13
&gt;&gt;&gt; test(1000)
max: 56
min: 6
avg: 14.749
&gt;&gt;&gt; test(10000)
max: 62
min: 6
avg: 14.6422
</code></pre>
</div>
<span class="comment-copy">Your original post is not properly indented: The <code>while</code> should have at least one line indented after it.</span>
<span class="comment-copy">What do you mean by "does not produce an output when the function is called " ? How are you invoking/calling the function?</span>
<span class="comment-copy"><code>sides</code> is a great idea to make the function more readable.</span>
<span class="comment-copy">@qu yes, but if you use it you need to use it throughout - and it is not needed for the task as formulated: <b>YAGNI</b></span>
<span class="comment-copy">YAGNI doesn't apply to readability.</span>
<span class="comment-copy"><code>for _ in range(1000)</code> should probably be <code>for _ in range(n)</code>. Otherwise <code>n</code> is not needed at all. You can also use it instead of <code>len(trials)</code>, because if that is not <code>n</code> something went seriously wrong...</span>
<span class="comment-copy">@Graipher Thanks .. some blunders there after the last edit</span>
<span class="comment-copy">**while not sides_rolled == possible_sides:              sides_rolled.add(random.randint(1, sides))  ** the "not" accomplishes the same thing as **while sides_rolled != possible_sides, then adds the result to the set and counts the number of rolls? Also, the .add is a specifc syntax for the set type that accomplishes the same thing as append?</span>
<span class="comment-copy">Thank you for this solution.  Very helpful</span>
<span class="comment-copy">Yes, I could've written <code>sides_rolled != possible_sides</code> and it would perhaps be considered better. Honestly I was typing out rather quick and missed some possible idiosyncrasies. In general, as pointed out in other comments, checking the length of <code>sides_rolled</code> is sufficient, and set equality adds unnecessary overhead.</span>
