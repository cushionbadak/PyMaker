<div class="post-text" itemprop="text">
<p>Does anyone know what is the difference in Pydicom between the two methods <code>FileDataset.get()</code> and <code>FileDataset.get_item()</code>?
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Both of these are not used often in user code.  <code>Dataset.get</code> is the equivalent of python's <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">dict.get</a>; it allows you to ask for an item in the dictionary, but return a default if that item does not exist in the Dataset.  The more usual way to get an item from a Dataset is to use the dot notation, e.g.</p>
<pre><code>dataset.PatientName
</code></pre>
<p>or to get the <code>DataElement</code> object via the tag number, e.g.</p>
<pre><code>dataset[0x100010]
</code></pre>
<p><code>Dataset.get_item</code> is a lower-level routine, primarily used when there is something wrong with some incoming data, and it needs to be corrected before the "raw data element" value is converted into python standard types (int, float, string types, etc).</p>
<p>When used with a keyword, <code>Dataset.get()</code> returns a <em>value</em>, not a <code>DataElement</code> instance.  <code>Dataset.get_item</code> always returns either a <code>DataElement</code> instance, or a <code>RawDataElement</code> instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>I imagine your answer is in the source for those two functions.  Looks like <code>get()</code> handled strings as well as DataElements as input.</p>
<pre><code>def get(self, key, default=None):
        """Extend dict.get() to handle DICOM DataElement keywords.

        Parameters
        ----------
        key : str or pydicom.tag.Tag
            The element keyword or Tag or the class attribute name to get.
        default : obj or None
            If the DataElement or class attribute is not present, return
            `default` (default None).

        Returns
        -------
        value
            If `key` is the keyword for a DataElement in the Dataset then
            return the DataElement's value.
        pydicom.dataelem.DataElement
            If `key` is a tag for a DataElement in the Dataset then return the
            DataElement instance.
        value
            If `key` is a class attribute then return its value.
        """
        if isinstance(key, (str, compat.text_type)):
            try:
                return getattr(self, key)
            except AttributeError:
                return default
        else:
            # is not a string, try to make it into a tag and then hand it
            # off to the underlying dict
            if not isinstance(key, BaseTag):
                try:
                    key = Tag(key)
                except Exception:
                    raise TypeError("Dataset.get key must be a string or tag")
        try:
            return_val = self.__getitem__(key)
        except KeyError:
            return_val = default
        return return_val





def get_item(self, key):
        """Return the raw data element if possible.

        It will be raw if the user has never accessed the value, or set their
        own value. Note if the data element is a deferred-read element,
        then it is read and converted before being returned.

        Parameters
        ----------
        key
            The DICOM (group, element) tag in any form accepted by
            pydicom.tag.Tag such as [0x0010, 0x0010], (0x10, 0x10), 0x00100010,
            etc. May also be a slice made up of DICOM tags.

        Returns
        -------
        pydicom.dataelem.DataElement
        """
        if isinstance(key, slice):
            return self._dataset_slice(key)

        if isinstance(key, BaseTag):
            tag = key
        else:
            tag = Tag(key)
        data_elem = dict.__getitem__(self, tag)
        # If a deferred read, return using __getitem__ to read and convert it
        if isinstance(data_elem, tuple) and data_elem.value is None:
            return self[key]
        return data_elem
</code></pre>
</div>
