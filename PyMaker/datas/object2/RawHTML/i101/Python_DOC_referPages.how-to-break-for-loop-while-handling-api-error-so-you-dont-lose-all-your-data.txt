<div class="post-text" itemprop="text">
<p>I have a for loop that is continually passing a parameter to an API. I am taking the responses from the API call and appending them to 3 lists. Once the for loop is completed, I am creating a pandas dataframe which I am then write to a .csv file. </p>
<p>The entire loop takes like 20 min to run and I just got an error 10 min in, so I lost all the data before it was able to write to a dataframe and then .csv file.</p>
<p>How would you handle this situation better?</p>
<pre><code># Create empty lists for data
email = []
is_disposable_address = []
mailbox_verification = []

for address in emails_to_validate:

    parameters = {"address": address}
    response = requests.get(url, params=parameters,
                auth=("api", "key"))

    email.append(address)
    is_disposable_address.append(response.json()["is_disposable_address"])
    mailbox_verification.append(response.json()["mailbox_verification"])

# Combine lists into dictionary and create dataframe
data = {"email_address": email,
        "is_disposable_address": is_disposable_address,
        "mailbox_verification": mailbox_verification}

dF = pd.DataFrame(data)

# Export to csv
dF.to_csv("emails.csv", index=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest solution is to just wrap the loop in a try/catch block like so:</p>
<pre><code>try:
    for address in emails_to_validate:

        parameters = {"address": address}
        response = requests.get(url, params=parameters,
            auth=("api", "key"))

        email.append(address)
        is_disposable_address.append(response.json()["is_disposable_address"])
        mailbox_verification.append(response.json()["mailbox_verification"])

except Exception as e:
    print('An exception has occurred.  Giving up on loop:')
    print(e)
</code></pre>
<p>Execution will then continue to the subsequent part of your code.</p>
<p>You could also put the <code>Try</code>/<code>Except</code> block inside the loop if you want to continue working on subsequent list items.</p>
<p>See the docs on <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">exception handling</a> for more detail on how to use try/except and do more nuanced conditionals on error type.</p>
</div>
<span class="comment-copy">Do you want it to stop looping if an exception is thrown?  Or just keep trying for other emails?</span>
<span class="comment-copy">It was a bad handshake error, so I assume stop looping is the best method since it might not connect with the API again.</span>
<span class="comment-copy">I'd suggest some kind of retry loop. For example, add a retry count, this needs to increment by 1 whenever there is an error, you should be specific and catch the handshake exception too. Then make some retry countdown, for example I've seen telephony companies which increase the time between retransmission, 10 secs, 30 secs, 45 secs, 1min 30secs, etc. Eventually you should send yourself an email saying "Dude, you fucked something up, please come and fix it!"</span>
<span class="comment-copy">Please add that he should be excepting the handshake error. This will catch all errors which might not be intended or advisable</span>
<span class="comment-copy">This is an important point @Swift.  That's what I intended with "nuanced conditionals".  Definitely recommended to be more specific about error type if you know what kinds of errors you're looking for, otherwise, "out of memory" might get misinterpreted as a more common "network timeout".</span>
<span class="comment-copy">Thanks for upvote. I didn't cotton on! I apologise :)</span>
