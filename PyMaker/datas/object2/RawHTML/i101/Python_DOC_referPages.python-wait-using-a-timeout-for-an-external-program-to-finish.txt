<div class="post-text" itemprop="text">
<p>Before I run my python script I need to check if an external program is running and wait for it to finish.</p>
<p>I have a few pieces but am having some difficulty putting it all together into a cohesive script.</p>
<p>I can use the following to get the PID of a program and a while loop which will timeout in 10 seconds</p>
<pre><code>from subprocess import check_output
import time

def get_pid(name):
    return check_output(["pidof",name])

print "%s" % get_pid("java")

timeout = time.time() + 10
test = 0
while True:
    if time.time() &gt; timeout:
        print "exception goes here"
        break
test = test + 1
time.sleep(1)
</code></pre>
<p>If the program is not running get_pid would fail and I think I need to catch the exception in that case? This is where I am not certain where to go.  Maybe there is a better way to approach this?</p>
<p>==============</p>
<p>Here is an update which seems to work correctly.</p>
<pre><code>from subprocess import check_output, CalledProcessError
import time

def get_pid(name):
    try:
        process_status = check_output(["pidof",name])
    except CalledProcessError as e:
        process_status = None
    return process_status

timeout = time.time() + 10
program = "java"
while get_pid(program) != None:
    time.sleep(1)
    print "1 second loop"
    if time.time() &gt; timeout:
        raise ValueError ('Timeout exceeded')
print "%s is not running" % program
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try catching <a href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError" rel="nofollow noreferrer">this</a> exception. Because when <code>check_output</code> returns non zero exception instance of <code>CalledProcessError</code> is raised which can be handled. Like this.</p>
<pre><code>from subprocess import CalledProcessError
def get_pid(name):

    try:
        process_status = check_output(["pidof",name])
    except CalledProcessError as e:
        process_status = None # You can additionally get return code in the returncode attribute and any output in the output attribute.
    return process_status
</code></pre>
<p>Hope it works!</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using the try and except block?
E.g. </p>
<pre><code>try:
 #some code
except (RuntimeError, TypeError, NameError):
 #pass etc.
</code></pre>
<p>You can read the docs here <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Handling Exceptions</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Exception handling can be at the place where the exception is thrown. So if check_output is throwing exception, you could handle below way,</p>
<pre><code>def get_pid(name):
    pid_ = None 
    try:
       pid_ = check_output(["pidof",name])
    except:
       pass
    return pid_
#logic to wait for pid_ to finish if found
</code></pre>
</div>
<span class="comment-copy">Mark answer as correct if it solved your problem. Thank you!</span>
