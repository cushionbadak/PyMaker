<div class="post-text" itemprop="text">
<p>I have written the following code to modify my custom python class <code>Point</code> using the <code>ctypes</code> library, following the approch I found in this <a href="https://dbader.org/blog/python-ctypes-tutorial-part-2" rel="nofollow noreferrer">tutorial</a>. The <code>wrap_function</code> is just a little helper for ease of use, as this is a MWE from a bigger project. </p>
<p>On the python side: </p>
<pre><code>import ctypes
import numpy as np 
libc = ctypes.WinDLL(r'C:\Path\lib.dll')

def wrap_function(lib, funcname, restype, argtypes): 
    func = lib.__getattr__(funcname) 
    func.restype = restype 
    func.argtypes = argtypes 
    return func 

class Point(ctypes.Structure): 
    _fields_ = [('x', ctypes.c_int), ('xdata', ctypes.c_void_p)]

list_of_points = []                                #unused for now 
xdata = np.zeros((40000,), dtype=np.double)
a = Point(1,xdata.ctypes.data) 
b = Point(3,xdata.ctypes.data) 

change_data_for_point = wrap_function(libc,'change_data_for_point', None, [ctypes.POINTER(Point)])
change_data_for_point(a)
</code></pre>
<p>And on the C-side: </p>
<pre><code>---header: 

const int N = 40000;
typedef struct {
    double x; 
    double xdata[N];
} Point;

extern "C" LIB_API void change_data_for_point(Point* p);


---source:

void change_data_for_point(Point* p) {
    p-&gt;x++; 
    for (int i = 0; i &lt; 40000; i++) {
        p-&gt;xdata[i] = 2.0*i;
        if (i % 1000 == 0) printf("xdata at index %d is %f\n", i, p-&gt;xdata[i]);
    }
}
</code></pre>
<p>When executing the python file in Windows 7 <code>cmd</code>, it prints the following output: </p>
<pre><code>xdata at index 0 is 0.000000
xdata at index 1000 is 2000.000000
 // ... some more ... 
xdata at index 17000 is 34000.000000
xdata at index 18000 is 36000.000000
Traceback (most recent call last):
   File "test.py", line 40, in &lt;module&gt;
</code></pre>
<p>Why does it stop at 18.000 ? I tried it several times, sometimes the loop reaches 19 or 20k, but it never gets higher than that. Does it have something to do with the array initialization on the C-side? Did I mess up the parameter passing on the python side? </p>
<hr/>
<p>Bonus question: How can I pass a list of these points to the C-side with ctypes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Although <em>NumPy</em> adds an additional complexity level, every piece of info can be found on <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python 3]: ctypes - A foreign function library for Python</a>.</p>
<p>The (main) problem was that the <em>Point</em> structure was differently defined in <em>C</em> and <em>Python</em>. <br/>Also, the function expects a <code>Point*</code>, so <em>byref</em> must be used (it works without it as well, I don't know whether this is <em>Undefined Behavior</em>'s happy case, or <em>ctypes</em> does that silently - due to <em>argtypes</em>).</p>
<p>I've adapted your code in order to work.</p>
<p><em>dll.c</em>:</p>
<pre class="lang-c prettyprint-override"><code>#include &lt;stdio.h&gt;

#if defined(_WIN32)
#  define DLL_EXPORT __declspec(dllexport)
#else
#  define DLL_EXPORT
#endif


const int N = 40000;

typedef struct {
    double x;
    double xdata[N];
} Point;


#if defined(__cplusplus)
extern "C" {
#endif

    DLL_EXPORT void change_data_for_point(Point *p);

#if defined(__cplusplus)
}
#endif


void change_data_for_point(Point *p) {
    p-&gt;x++; 
    for (int i = 0; i &lt; 40000; i++) {
        p-&gt;xdata[i] = 2.0 * i;
        if (i % 10000 == 9999)
            printf("xdata at index %d is %f\n", i, p-&gt;xdata[i]);
    }
}
</code></pre>
<p><em>code.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import sys
import ctypes
import numpy as np


DLL_NAME = "./dll.dll"

xdata_dim = 40000  # !!! Must match N (from C) !!!
DoubleArr = ctypes.c_double * xdata_dim

class Point(ctypes.Structure): 
    _fields_ = [
        ("x", ctypes.c_int),
        ("xdata", DoubleArr),
    ]


def wrap_function(lib, funcname, restype, argtypes):
    func = lib.__getattr__(funcname)
    func.restype = restype
    func.argtypes = argtypes
    return func


def main():
    dll = ctypes.CDLL(DLL_NAME)
    #xdata_dim = ctypes.c_int.in_dll(dll, "N")

    xdata = np.zeros((xdata_dim,), dtype=np.double)
    a = Point(1, DoubleArr.from_address(xdata.ctypes.data))
    b = Point(3, DoubleArr.from_address(xdata.ctypes.data))
    change_data_for_point = wrap_function(dll,"change_data_for_point", None, [ctypes.POINTER(Point)])
    change_data_for_point(ctypes.byref(a))
    print(a.xdata[30000])


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Output</strong>:</p>
<blockquote>
<pre class="lang-bat prettyprint-override"><code>[cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055124400]&gt; sopr.bat
*** Set shorter prompt to better fit when pasted in StackOverflow (or other) pages ***

[prompt]&gt; "c:\Install\x86\Microsoft\Visual Studio Community\2015\vc\vcvarsall.bat" x64

[prompt]&gt; dir /b
code.py
dll.c

[prompt]&gt; cl /nologo /DDLL /MD /Tp dll.c  /link /NOLOGO /DLL /OUT:dll.dll
dll.c
   Creating library dll.lib and object dll.exp

[prompt]&gt; dir /b
code.py
dll.c
dll.dll
dll.exp
dll.lib
dll.obj

[prompt]&gt; "e:\Work\Dev\VEnvs\py_064_03.06.08_test0\Scripts\python.exe" code.py
Python 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 24 2018, 00:16:47) [MSC v.1916 64 bit (AMD64)] on win32

xdata at index 9999 is 19998.000000
xdata at index 19999 is 39998.000000
xdata at index 29999 is 59998.000000
xdata at index 39999 is 79998.000000
60000.0
</code></pre>
</blockquote>
<p><strong><em>@EDIT0</em></strong>:</p>
<p>If you want to handle a list of <em>Point</em>s, you can use arrays. Something like:</p>
<pre class="lang-bat prettyprint-override"><code>PointArr = Point * len(list_of_points)
point_arr = PointArr(*list_od_points)
</code></pre>
</div>
<span class="comment-copy">Surrounding the critical lines in python with a <code>try-catch-block</code> now lets me print <code>exception: access violation writing 0x0000000006F60000</code>, so I think I am most likely messing up on the C-side.</span>
<span class="comment-copy"><i>Point</i> definition in <i>C</i> and <i>Python</i> <b>don't match</b> (<i>xdata</i>).</span>
<span class="comment-copy">Thanks a lot! That really helped :) How would I go If I wanted to pass a list of points to the C-side to edit them? I already tried nesting the structs on the python side, but upon execution I get an access violation error!</span>
<span class="comment-copy">But you're already <i>editing</i> them. The values from the <i>xdata</i> array are set from <i>C</i>.</span>
<span class="comment-copy">Haha, yes I know! Maybe I didnt formulate my intention clear enough - say, I have a list of n Point-objects on the Python-side. Now I want to pass that list to a function (the entire list, not all n points separately - they have to be present on the C side at the same time). This function, on the C-side, should iterate through the list and edit the data from each of these n points.   I thought about doing something like <code>class pointList(ctypes.Structure): _fields_ = [('1',point), ('2',point), ... ('n',point),]</code> and then passing this to a function, along with the number n.</span>
<span class="comment-copy">Then use an array of points. What you're suggesting is not possible (at least not in that form). Check <a href="https://stackoverflow.com/questions/55103298/python-ctypes-read-pointerc-char-in-python/55128773#55128773" title="python ctypes read pointerc char in python">stackoverflow.com/questions/55103298/â€¦</a> - you'd have to do something similar to <i>CharArr</i> (somewhere at the end of <i>main</i>).</span>
<span class="comment-copy">Thanks man! I found a workaround by passing several points separately, but storing them in a <code>std::vector&lt;Point*&gt;</code> on the C-side. Appreciate your help!</span>
