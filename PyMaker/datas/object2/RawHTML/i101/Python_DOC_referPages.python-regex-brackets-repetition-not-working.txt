<div class="post-text" itemprop="text">
<p>I have a question about a regex pattern. I have to write a function where I have to find sentences that start with a certain word and have a certain number of words. This is what i've written so far:</p>
<pre><code>def sentences_starting_with(w,2(how many words has to contain the sentence),corpus(a text where to find the sentences)):
    upper=w[0].upper()
    repetition=length-1

    pattern=upper+w[1:]+'(\s\w*){2}'


    return re.findall(pattern,corpus)
</code></pre>
<p>But the problem is that when i put the brackets around the part that i have to repeat: (\s\w*){2} it's not working. It's just giving me a list where I have just one random word in the middle of some random sentence sentence and not even the word that the sentence should start with. 
Could ypu please tell me what I'm doing wrong. Thank you :)</p>
</div>
<div class="post-text" itemprop="text">
<p>In order for the function to work, I changed the first line to be:</p>
<pre><code>def sentences_starting_with(w,corpus,length=2):
</code></pre>
<p>and I used the following data and function call:</p>
<pre><code>corpus='For example, This starts a sentence and This will do another one. this one, however\
will not, because we are looking for the word "This" with a capital letter.'
sentences_starting_with("this", corpus)
</code></pre>
<p>The value of <code>pattern=upper+w[1:]+'(\s\w*){2}'</code> is <code>This(\s\w*){2}</code>, which means it matches the word <code>This</code> followed by <code>(\s\w*){2}</code> (two words). The parentheses around <code>\s\w*</code> will capture the last one (second one) of the two words captured, including the space in front of it -- meaning, the third word, counting from <code>This</code>:</p>
<pre><code>[' a', ' do']
</code></pre>
<p>I added parentheses around the entire pattern:</p>
<pre><code>pattern='('+upper+w[1:]+'(\s\w*){2})'
</code></pre>
<p>So now the pattern is: <code>(This(\s\w*){2})</code>, which has two sets of parentheses. The first one encompasses entire pattern, so it will capture entire match (the word <code>This</code> and two following words), while the second one will capture the third word (with it's preceding space), returning:</p>
<pre><code>[('This starts a', ' a'), ('This will do', ' do')]
</code></pre>
<p>Your can then loop through this list and take the first one of each tuple.</p>
<p>To simplify your code, you can also add <code>?:</code> after the <code>(</code> of the group(s) that you don't want to capture, for example, <code>(?:\s\w*)</code>. Now the code is:</p>
<pre><code>pattern='('+upper+w[1:]+'(?:\s\w*){2})'
</code></pre>
<p>and it returns:</p>
<pre><code>['This starts a', 'This will do']
</code></pre>
<hr/>
<p>Also, this is not a good practice:</p>
<pre><code>upper=w[0].upper()
</code></pre>
<p>In this case, there is no problem, because the function <code>upper()</code> is a method in <code>string</code> class. But if you did something like this:</p>
<pre><code>len = len(w)
</code></pre>
<p>it could cause the problem further on, because the function <code>len</code> is not accessible anymore. The name <code>len</code> now refers to the variable <code>len</code>.</p>
<p>In this example:</p>
<pre><code>w = 'Some random text'
name='monty python'
len = len(w)
print(len)
len2 = len(name)
</code></pre>
<p>the output will be:</p>
<pre><code>16
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-349-9ef3e2e1cb59&gt; in &lt;module&gt;
      6 len = len(w)
      7 print(len)
----&gt; 8 len2 = len(name)

TypeError: 'int' object is not callable
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a> returns only the capture group(s) when there are any. If you want the whole match, you might want to use a non-capture group: <code>(?:\s\w*){2}</code></span>
<span class="comment-copy">If I plopp in your code into my IDE I get plenty of errors. Please provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> with demodata that replicates your problem. Thanks. Addon: Your demodata should cover <i>all</i> cases for your regex : positives and negatives. Thanks again. For comments use <code># this is a comment</code> or docstrings to describe your function. Add your function call as well. Ideally your problem runs without errors and we just need to modify the regex.</span>
