<div class="post-text" itemprop="text">
<p>I've recently started learning how to use python and i'm having some trouble with a graphQL api call. </p>
<p>I'm trying to set up a loop to grab all the information using pagination, and my first request is working just fine.</p>
<pre><code>values = """
      {"query" : "{organizations(ids:) {pipes {id name phases {id name cards_count cards(first:30){pageInfo{endCursor hasNextPage} edges {node {id title current_phase{name} assignees {name} due_date createdAt finished_at fields{name value filled_at updated_at} } } } } }}}"}
    """
</code></pre>
<p>but the second call using the end cursor as a variable isn't working for me. I assume that it's because i'm not understanding how to properly escape the string of the variable. But for the life of me I'm unable to understand how it should be done.</p>
<p>Here's what I've got for it so far...</p>
<pre><code>values = """
      {"query" : "{phase(id: """ + phaseID+ """ ){id name cards_count cards(first:30, after:"""\" + pointer + "\"""){pageInfo{endCursor hasNextPage} edges {node {id title assignees {name} due_date createdAt finished_at fields{name value datetime_value updated_at phase_field { id label }  } } } } } }"}
        """ 
</code></pre>
<p>the second one as it loops just returns a 400 bad request.</p>
<p>Any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a general rule you should avoid building up queries using string manipulation like this.</p>
<p>In the GraphQL query itself, GraphQL allows <a href="https://graphql.org/learn/queries/#variables" rel="nofollow noreferrer">variables</a> that can be placeholders in the query for values you will plug in later.  You need to declare the variables at the top of the query, and then can reference them anywhere inside the query.  The query itself, without the JSON wrapper, would look something like</p>
<pre class="lang-py prettyprint-override"><code>query = """
  query MoreCards($phase: ID!, $cursor: String) {
    phase(id: $phase) {
      id, name, cards_count
      cards(first: 30, after: $cursor) {
        ... CardConnectionData
      }
    }
  }
"""
</code></pre>
<p>To actually supply the variable values, they get passed as an ordinary dictionary</p>
<pre class="lang-py prettyprint-override"><code>variables = {
  "phase": phaseID,
  "cursor": pointer
}
</code></pre>
<p>The actual request body is <a href="https://graphql.org/learn/serving-over-http/#post-request" rel="nofollow noreferrer">a straightforward JSON structure</a>.  You can construct this as a dictionary too:</p>
<pre class="lang-py prettyprint-override"><code>body = {
  "query": query,
  "variables": variables
}
</code></pre>
<p>Now you can use the standard <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code></a> module to format it to a string</p>
<pre class="lang-py prettyprint-override"><code>print(json.dumps(body))
</code></pre>
<p>or pass it along to something like the <a href="http://docs.python-requests.org/en/master/user/quickstart/#more-complicated-post-requests" rel="nofollow noreferrer"><code>requests</code></a> package that can directly accept the object and encode it for you.</p>
</div>
<span class="comment-copy">Ah this is excellent thank you! Is it advisable to not use string manipulation due to the problem I was having or are there other reasons I should be aware of?</span>
<span class="comment-copy">Incidents such as <a href="https://xkcd.com/327/" rel="nofollow noreferrer">xkcd.com/327</a> are possible if you build up queries via string concatenation.  Thatâ€™s SQL but the same principle applies in GraphQL, XML, JSON, ...</span>
