<div class="post-text" itemprop="text">
<p>I have nearly 5000+ xml files in <strong>a</strong> directory. I am planning to read them one by one and parse them, however I am not sure os.listdir(path) is a good way, </p>
<pre><code>import xml.etree.ElementTree as ET  
import os

list_files = os.listir(os.curdir)
for files in list_files:
   tree = ET.parse(files)
   root = tree.getroot()
</code></pre>
<p>os.listdir(path) returns a list with names of the files inside that directory. After that with the for loop which takes the string names of the files and giving them to Parser class object might not be a good way, since the parser would searh the files again, second time, with their names inside the same directory.</p>
<p>Is there a better way? Am I missing something, Maybe a pointer logic for finding inside directory?</p>
<p><strong>EDIT:</strong> <em>I think this question is off topic and should be deleted since parser doesnt search for string name inside the dir, in other words I believe Operating system handles it in the back. As you can as following lines inside ET object of Parser, it directly opens</em></p>
<pre><code>def parse(self, source, parser=None):
    close_source = False
    if not hasattr(source, "read"):
        source = open(source, "rb")
        close_source = True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can take some steps to read XML files:</p>
<p><strong>Step 1:</strong>
Parse all the current directory XML file in a list</p>
<pre><code>import xml.etree.ElementTree as ET  
import os
items = os.listdir(".")

xmllist = []
for names in items:
    if names.endswith(".xml"):
        xmllist.append(names)
print(xmllist)
</code></pre>
<p><strong>Step 2:</strong></p>
<p>Now want to read xmllist files </p>
<pre><code>for files in xmllist:
    tree = ET.parse(files)
    root = tree.getroot()
    print(root)
</code></pre>
<p>[Note: if you have more queries leave the comments]</p>
</div>
<div class="post-text" itemprop="text">
<p>Please check this
python3.5 : <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">https://docs.python.org/3/library/os.html#os.scandir</a>
python2 :   <a href="https://pypi.org/project/scandir/" rel="nofollow noreferrer">https://pypi.org/project/scandir/</a></p>
<pre><code>try:
    from os import scandir, walk
except ImportError:
    from scandir import scandir, walk


def subdirs(path):
    for entry in scandir(path):
        if entry.name.endswith('.xml') and  entry.is_file(): // change your restriction
            yield entry.name



for i in subdirs('/tmp'):
    print i # you get file name here, 
    //ET.parse(i)
</code></pre>
</div>
<span class="comment-copy">Perhaps you could make it clearer what you are looking for. Your example parses each file (to a first approximation), but you seem to want to find a specific file. Do you want to build in index? without that, a scan of all files seems like the only way.</span>
<span class="comment-copy">I want to parse all of them but after you list and for loop for the list it takes the string from the list, and searches in 5000+ file directory again second time, I believe it is costly</span>
<span class="comment-copy">how else do you propose parsing each file if you don't iterate through the list</span>
<span class="comment-copy">It wouldn't - <code>for files in list_files</code> loops over path strings so it directly goes to that file, parses it and starts to read the XML. It doesn't search for it anywhere. If you want to access all the files, then this is the fastest way.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">docs.python.org/3/library/os.html#os.scandir</a></span>
<span class="comment-copy">what is the difference from the code in my question</span>
<span class="comment-copy">I believe you are telling me that scandir returns a path object that is great, how can I give path to the xml parser?</span>
<span class="comment-copy">try:     from os import scandir, walk except ImportError:     from scandir import scandir, walk   def subdirs(path):     """Yield directory names not starting with '.' under given path."""     for entry in scandir(path):         if  entry.is_file():             yield entry.name    for i in subdirs('/tmp'):     print i</span>
<span class="comment-copy">How can I give path object to xml parser?</span>
