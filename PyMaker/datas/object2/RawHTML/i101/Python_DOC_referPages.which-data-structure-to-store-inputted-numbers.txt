<div class="post-text" itemprop="text">
<p>Which data structure is best for calculating average of inputted numbers ?
I used an array, but it feels clumsy.<br/>
Is there a more standard way to do this?</p>
<pre><code>import os

def getGrades():
    g = input("How many tests?")
    numGrades = int(g)

    grades = []*numGrades

    for x in range(numGrades):
        t = int(input("Enter Grade #" + str(x+1) + ": "))
        grades.append(t)
    avgGrades(grades)

def avgGrades(a):
    total = 0
    count = 0
    for t in a:
        total = total + t
        count = count + 1
    avg = total / count
    print (f"average is: {avg}")


getGrades()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">statistics</a> module which you can use:</p>
<pre><code>import statistics


def get_grades_avg():
    g = input("How many tests?")
    num_grades = int(g)
    grades = [] * num_grades
    for x in range(num_grades):
        grades.append(int(input("Enter Grade #" + str(x + 1) + ": ")))
    return statistics.mean(grades)


avg = get_grades_avg()
print('avg: {}'.format(avg))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Python list is well. Maybe trying some built-in functions for getting average grade  would be more easily.</p>
<p>Assume grades is a list store some grade.</p>
<pre><code>sum(grades) / len(grades)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use something like this:</p>
<pre><code>def average_factory():
    count_numbers = 0
    sum_numbers = 0

    def wrapper(number):
        nonlocal count_numbers
        nonlocal sum_numbers
        sum_numbers += number
        count_numbers += 1
        return sum_numbers / count_numbers

    return wrapper


def get_number(message):
    str_number = input(message)

    try:
        return int(str_number)
    except (ValueError, TypeError):
        print('Invalid number, please try again')
        return get_number(message)


def get_average_of_all_tests():
    count_tests = get_number('How many tests? ')

    get_average = average_factory()
    average = 0

    for test_number in range(1, count_tests + 1):
        number = get_number('Enter Grade #{test_number}: '.format(test_number=test_number))
        average = get_average(number)
    return average
</code></pre>
<p>Yes this solution seems a little complex with average factory. But I think storing all value just for calculating average is not so good idea. Storing only count and sum of grades is better. 
If you have any question about solution feel free to ask me about it.</p>
</div>
<div class="post-text" itemprop="text">
<p>numpy or scipy offer good facilities for this.</p>
<p>store your numbers in an <code>numpy.array([])</code>.
To obtain your mean, <code>numpy.mean(&lt;yourarray&gt;)</code></p>
<p>Your code would look like:</p>
<pre><code>import numpy
import os

def getGrades():
    g = input("How many tests?")
    numGrades = int(g)

    grades = []*numGrades

    for x in range(numGrades):
        t = int(input("Enter Grade #" + str(x+1) + ": "))
        grades.append(t)
    yourArray = numpy.array(grades)
    return numpy.mean(yourArray)
</code></pre>
</div>
<span class="comment-copy">You used a list, not array and is a go-to for these purposes.</span>
<span class="comment-copy"><code>list</code> (the one you referred to as array) is fine for this use case. And you could lose the line <code>grades = []*numGrades</code>. It doesn't do anything useful :)</span>
<span class="comment-copy">also a suggestion would be to use builtin python functions such as <code>sum(a)</code>, e.g. <code>avg = sum(a) / len(a)</code> and <code>grades = []*numGrades</code> does nothing, even if it did the logic wouldn't be the one you want as you always append a new value instead of using an index</span>
<span class="comment-copy"><code>[] * anything</code> is still <code>[]</code>. You aren't preallocating space for the grades, nor do you need to since you are using <code>append</code>.</span>
<span class="comment-copy">Ok, I'll just declare grades = []</span>
<span class="comment-copy">Thanks.  I wanted to do everything manually, to practice some Python syntax.</span>
<span class="comment-copy">Thanks.  I wanted to do everything manually, to practice some Python syntax.</span>
<span class="comment-copy"><code>numpy</code> seems way to heavy a dependency for taking an average, especially when <code>statistics.mean</code> is already in the standard library.</span>
<span class="comment-copy">A good day to learn. Thanks, I did not know that.</span>
<span class="comment-copy">You might be able to get a lot of use out of <a href="https://docs.python.org/3/py-modindex.html" rel="nofollow noreferrer">docs.python.org/3/py-modindex.html</a> . I wouldn't suggest reading it like a novel; just clicking interesting-looking links. There's a surprising amount of standard modules, and I've also learned a lot by clicking the "View Source" button at the top of interesting modules.</span>
<span class="comment-copy">Thanks.  I wanted to do everything manually, to practice some Python syntax.</span>
