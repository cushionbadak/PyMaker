<div class="post-text" itemprop="text">
<p>I'm using Python's <code>max</code> and <code>min</code> functions on lists for a minimax algorithm, and I need the index of the value returned by <code>max()</code> or <code>min()</code>. In other words, I need to know which move produced the max (at a first player's turn) or min (second player) value.</p>
<pre><code>for i in range(9):
    newBoard = currentBoard.newBoardWithMove([i / 3, i % 3], player)

    if newBoard:
        temp = minMax(newBoard, depth + 1, not isMinLevel)  
        values.append(temp)

if isMinLevel:
    return min(values)
else:
    return max(values)
</code></pre>
<p>I need to be able to return the actual index of the min or max value, not just the value.</p>
</div>
<div class="post-text" itemprop="text">
<pre>
if isMinLevel:
    return values.index(min(values))
else:
    return values.index(max(values))
</pre>
</div>
<div class="post-text" itemprop="text">
<p>Say that you have a list <code>values = [3,6,1,5]</code>, and need the index of the smallest element, i.e. <code>index_min = 2</code> in this case.</p>
<p>Avoid the solution with <code>itemgetter()</code> presented in the other answers, and use instead</p>
<pre><code>index_min = min(xrange(len(values)), key=values.__getitem__)
</code></pre>
<p>because it doesn't require to <code>import operator</code> nor to use <code>enumerate</code>, and it is always faster(benchmark below) than a solution using <code>itemgetter()</code>.</p>
<p>If you are dealing with numpy arrays or can afford <code>numpy</code> as a dependency, consider also using</p>
<pre><code>import numpy as np
index_min = np.argmin(values)
</code></pre>
<p>This will be faster than the first solution even if you apply it to a pure Python list if:</p>
<ul>
<li>it is larger than a few elements (about 2**4 elements on my machine)</li>
<li>you can afford the memory copy from a pure list to a <code>numpy</code> array</li>
</ul>
<p>as this benchmark points out:
<a href="https://i.stack.imgur.com/UTXzO.png"><img alt="enter image description here" src="https://i.stack.imgur.com/UTXzO.png"/></a></p>
<p>I have run the benchmark on my machine with python 2.7 for the two solutions above (blue: pure python, first solution) (red, numpy solution) and for the standard solution based on <code>itemgetter()</code> (black, reference solution).
The same benchmark with python 3.5 showed that the methods compare exactly the same of the python 2.7 case presented above</p>
</div>
<div class="post-text" itemprop="text">
<p>You can find the min/max index and value at the same time if you enumerate the items in the list, but perform min/max on the original values of the list. Like so:</p>
<pre><code>import operator
min_index, min_value = min(enumerate(values), key=operator.itemgetter(1))
max_index, max_value = max(enumerate(values), key=operator.itemgetter(1))
</code></pre>
<p>This way the list will only be traversed once for min (or max).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find the index of max within a list of numbers (which seems your case), then I suggest you use numpy:</p>
<pre><code>import numpy as np
ind = np.argmax(mylist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Possibly a simpler solution would be to turn the array of values into an array of value,index-pairs, and take the max/min of that. This would give the largest/smallest index that has the max/min (i.e. pairs are compared by first comparing the first element, and then comparing the second element if the first ones are the same). Note that it's not necessary to actually create the array, because min/max allow generators as input.</p>
<pre><code>values = [3,4,5]
(m,i) = max((v,i) for i,v in enumerate(values))
print (m,i) #(5, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list=[1.1412, 4.3453, 5.8709, 0.1314]
list.index(min(list))
</code></pre>
<p>Will give you first index of minimum.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was also interested in this and compared some of the suggested solutions using <a href="https://github.com/nschloe/perfplot" rel="noreferrer">perfplot</a> (a pet project of mine).</p>
<p>Turns out that <a href="https://docs.scipy.org/doc/numpy-1.12.0/reference/generated/numpy.argmin.html" rel="noreferrer">numpy's argmin</a>,</p>
<pre><code>numpy.argmin(x)
</code></pre>
<p>is the fastest method for large enough lists, even with the implicit conversion from the input <code>list</code> to a <code>numpy.array</code>.</p>
<p><a href="https://i.stack.imgur.com/JLml3.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/JLml3.png"/></a></p>
<hr/>
<p>Code for generating the plot:</p>
<pre><code>import numpy
import operator
import perfplot


def min_enumerate(a):
    return min(enumerate(a), key=lambda x: x[1])[0]


def min_enumerate_itemgetter(a):
    min_index, min_value = min(enumerate(a), key=operator.itemgetter(1))
    return min_index


def getitem(a):
    return min(range(len(a)), key=a.__getitem__)


def np_argmin(a):
    return numpy.argmin(a)


perfplot.show(
    setup=lambda n: numpy.random.rand(n).tolist(),
    kernels=[
        min_enumerate,
        min_enumerate_itemgetter,
        getitem,
        np_argmin,
        ],
    n_range=[2**k for k in range(15)],
    logx=True,
    logy=True,
    )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a numpy array and the argmax() function</p>
<pre><code> a=np.array([1,2,3])
 b=np.argmax(a)
 print(b) #2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use numpy module's function numpy.where</p>
<pre><code>import numpy as n
x = n.array((3,3,4,7,4,56,65,1))
</code></pre>
<p>For index of minimum value:    </p>
<pre><code>idx = n.where(x==x.min())[0]
</code></pre>
<p>For index of maximum value:</p>
<pre><code>idx = n.where(x==x.max())[0]
</code></pre>
<p>In fact, this function is much more powerful. You can pose all kinds of boolean operations
For index of value between 3 and 60:</p>
<pre><code>idx = n.where((x&gt;3)&amp;(x&lt;60))[0]
idx
array([2, 3, 4, 5])
x[idx]
array([ 4,  7,  4, 56])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After you get the maximum values, try this:</p>
<pre><code>max_val = max(list)
index_max = list.index(max_val)
</code></pre>
<p>Much simpler than a lot of options.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the answer above solves your problem but I thought I'd share a method that gives you the minimum and all the indices the minimum appears in.</p>
<pre><code>minval = min(mylist)
ind = [i for i, v in enumerate(mylist) if v == minval]
</code></pre>
<p>This passes the list twice but is still quite fast. It is however slightly slower than finding the  index of the first encounter of the minimum. So if you need just one of the minima, use <a href="https://stackoverflow.com/users/196970/matt-anderson" title="Matt Anderson">Matt Anderson</a>'s solution, if you need them all, use this.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is simply possible using the built-in <code>enumerate()</code> and <code>max()</code> function and the optional <code>key</code> argument of the <code>max()</code> function and a simple lambda expression:</p>
<pre><code>theList = [1, 5, 10]
maxIndex, maxValue = max(enumerate(theList), key=lambda v: v[1])
# =&gt; (2, 10)
</code></pre>
<p>In the docs for <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max()</code></a> it says that the <code>key</code> argument expects a function like in the <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort()</code></a> function. Also see the <a href="https://docs.python.org/3.5/howto/sorting.html#key-functions" rel="nofollow noreferrer">Sorting How To</a>.</p>
<p>It works the same for <code>min()</code>. Btw it returns the first max/min value.</p>
</div>
<div class="post-text" itemprop="text">
<p>As long as you know how to use lambda and the "key" argument, a simple solution is:</p>
<pre><code>max_index = max( range( len(my_list) ), key = lambda index : my_list[ index ] )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Say you have a list such as:</p>
<pre><code>a = [9,8,7]
</code></pre>
<p>The following two methods are pretty compact ways to get a tuple with the minimum element and its index. Both take a <strong>similar</strong> time to process. I better like the zip method, but that is my taste.</p>
<h2>zip method</h2>
<pre><code>element, index = min(list(zip(a, range(len(a)))))

min(list(zip(a, range(len(a)))))
(7, 2)

timeit min(list(zip(a, range(len(a)))))
1.36 µs ± 107 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
<h2>enumerate method</h2>
<pre><code>index, element = min(list(enumerate(a)), key=lambda x:x[1])

min(list(enumerate(a)), key=lambda x:x[1])
(2, 7)

timeit min(list(enumerate(a)), key=lambda x:x[1])
1.45 µs ± 78.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why bother to add indices first and then reverse them? Enumerate() function is just a special case of zip() function usage. Let's use it in appropiate way:</p>
<pre><code>my_indexed_list = zip(my_list, range(len(my_list)))

min_value, min_index = min(my_indexed_list)
max_value, max_index = max(my_indexed_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a minor addition to what has already been said.
<code>values.index(min(values))</code> seems to return the smallest index of min. The following gets the largest index:</p>
<pre><code>    values.reverse()
    (values.index(min(values)) + len(values) - 1) % len(values)
    values.reverse()
</code></pre>
<p>The last line can be left out if the side effect of reversing in place does not matter.</p>
<p>To iterate through all occurrences</p>
<pre><code>    indices = []
    i = -1
    for _ in range(values.count(min(values))):
      i = values[i + 1:].index(min(values)) + i + 1
      indices.append(i)
</code></pre>
<p>For the sake of brevity. It is probably a better idea to cache <code>min(values), values.count(min)</code> outside the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way for finding the indexes with minimal value in a list if you don't want to import additional modules:</p>
<pre><code>min_value = min(values)
indexes_with_min_value = [i for i in range(0,len(values)) if values[i] == min_value]
</code></pre>
<p>Then choose for example the first one:</p>
<pre><code>choosen = indexes_with_min_value[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the best thing to do is convert the list to a <code>numpy array</code> and use this function : </p>
<pre><code>a = np.array(list)
idx = np.argmax(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple as that :</p>
<pre><code>stuff = [2, 4, 8, 15, 11]

index = stuff.index(max(stuff))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dont have high enough rep to comment on existing answer.</p>
<p>But for <a href="https://stackoverflow.com/a/11825864/3920439">https://stackoverflow.com/a/11825864/3920439</a> answer</p>
<p>This works for integers, but does not work for array of floats (at least in python 3.6)
It will raise <code>TypeError: list indices must be integers or slices, not float</code></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow">https://docs.python.org/3/library/functions.html#max</a></p>
<p>If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as <code>sorted(iterable, key=keyfunc, reverse=True)[0]</code></p>
<p>To get more than just the first use the sort method.</p>
<pre><code>import operator

x = [2, 5, 7, 4, 8, 2, 6, 1, 7, 1, 8, 3, 4, 9, 3, 6, 5, 0, 9, 0]

min = False
max = True

min_val_index = sorted( list(zip(x, range(len(x)))), key = operator.itemgetter(0), reverse = min )

max_val_index = sorted( list(zip(x, range(len(x)))), key = operator.itemgetter(0), reverse = max )


min_val_index[0]
&gt;(0, 17)

max_val_index[0]
&gt;(9, 13)

import ittertools

max_val = max_val_index[0][0]

maxes = [n for n in itertools.takewhile(lambda x: x[0] == max_val, max_val_index)]
</code></pre>
</div>
<span class="comment-copy">The builtin <code>divmod</code> exists to prevent having to say <code>[i / 3, i % 3]</code> much.</span>
<span class="comment-copy">@KevinGriffin, Note that this gets you only one of possibly several occurrences of the minimum/maximum. This may not be what you want, for example if it's possible to increase your gain the same two ways, but one of them hurts the other player more. I do not know if this is a case you need to consider.</span>
<span class="comment-copy">Slow but clear and readable</span>
<span class="comment-copy">O(N^2) for no apparent reason. Any interviewer would deduct a point for doing this when it's possible to do it in O(N).</span>
<span class="comment-copy">@Kashyap It's actually O(N), not O(N^2).  In the min case, first min(values) is evaluated, which is O(N), then values.index() is called, which is also O(N).  O(N) + O(N) = O(N).  The argument to index is only evaluated once.  It's equivalent to: <code>tmp = min(values); return values.index(tmp)</code></span>
<span class="comment-copy">@too much php what to do when there is repetition of elements.?</span>
<span class="comment-copy">Underrated answer.</span>
<span class="comment-copy">Wow, benchmarked possible solutions with plots...first time I've seen this on SO! Awesome...</span>
<span class="comment-copy">len(list) in powers of 2 for xtick labels? :-) Keeping us sharp!</span>
<span class="comment-copy">A very strong +1.  I love the benchmarking of the proposed solutions and the rules of thumb you have summarized.  As I suggested in another answer below, could you provide (or link to) your test code so others might reproduce your results?  Machines and libraries change over time, and it would allow comparing to other solutions.</span>
<span class="comment-copy">don't forget to "import operator" to get this to work</span>
<span class="comment-copy">Or use a lambda: <code>key=lambda p: p[1]</code></span>
<span class="comment-copy">The simplest solution. Thanks</span>
<span class="comment-copy">In case of multiple occurrences of the maximum values, the indices corresponding to the first occurrence are returned.</span>
<span class="comment-copy">nice and simple approach</span>
<span class="comment-copy">Notice that the same conclusion is posted already above in my answer, more than 2 years ago, with more information on when and why argmin can be used or not. Consider deleting the answer, which is also not giving merit to what is already been proposed on this same page. Consider also reviewing your other answers on SO for similar behavior: you appear to not cite the actual answer providing the best solution in your performance analyses. This is rather bad, especially for somebody with &gt;10K rep that has been around long enough to know better.</span>
<span class="comment-copy">@gg349, very good points, but he does provide the source code for generating the results, making this easily reproducible and adaptable to comparing other solutions.  I agree that he might consider removing this answer as a duplicate, but perhaps you could add value to your answer by including or linking to the code you used?</span>
<span class="comment-copy"><code>np.argmax</code> also works with lists.</span>
<span class="comment-copy">This is literally the simplest/ shortest way to do it.</span>
<span class="comment-copy">hmm ... does that work?</span>
<span class="comment-copy">Yes sir It does.  Please try it.</span>
<span class="comment-copy">index in python starts at 0. index returned shall be 6 (for 65), while your code returns 7 (OP's question was "Getting the index ...")</span>
<span class="comment-copy">In the command, I have queried for index of minimum value (here: 1) whose index IS 7. 65 is the maximum value of elements in the array. If you type:     n.where(x==x.max())[0] you will get index of max. value which is 65 here. Its index will come out to be 6</span>
<span class="comment-copy">use of numpy: probably prohibited in this application. But if you are going to use numpy, you're much better of just using <code>argmin()</code> instead of what you did here.</span>
<span class="comment-copy">I like this because it uses base Python, and I find list comprehension easier to understand than itemgetter, lambda etc.(and flexible enough to solve a variety of tasks, such as this ....)</span>
<span class="comment-copy">raw. I prefer this.</span>
<span class="comment-copy">Late but best answer (if you don't have need for speed).</span>
<span class="comment-copy">Very clean! And unlike the accepted answer, this is <b>true</b> O(n), right? I know that O(2n) is considered O(n), but for very large <code>n</code> it can be noticeably slower.</span>
<span class="comment-copy"><code>reversed(…)</code> instead of <code>….reverse()</code> is likely preferable as it doesn't mutate and returns a generator anyway. And all occurrences could also be <code>minv = min(values); indices = [i for i, v in enumerate(values) if v == minv]</code></span>
