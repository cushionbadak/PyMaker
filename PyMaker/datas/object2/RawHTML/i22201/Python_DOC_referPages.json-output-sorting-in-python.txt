<div class="post-text" itemprop="text">
<p>I've a problem with JSON in python.</p>
<p>In fact, if I try to execute this code, python gives me a sorted JSON string! </p>
<p>For example:</p>
<pre><code>values = {'profile' : 'testprofile', 
          'format': 'RSA_RC4_Sealed', 
          'enc_key' : base64.b64encode(chiave_da_inviare), 
          'request' : base64.b64encode(data)
      }


values_json = json.dumps(values, sort_keys=False, separators=(',', ':'))
</code></pre>
<p>and this is the output:</p>
<pre><code>{"profile":"testprofile","enc_key":"GBWo[...]NV6w==","request":"TFl[...]uYw==","format":"RSA_RC4_Sealed"}
</code></pre>
<p>As you can see, I tried to use "sort_keys=False" but nothing changed.</p>
<p>How can I stop Python sorting my JSON strings?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are storing your values into a python <a href="http://docs.python.org/tutorial/datastructures.html#dictionaries" rel="noreferrer" title="dict">dict</a> which has no inherent notion of ordering at all, it's just a key =&gt; value map.  So your items lose all ordering when you place them into the "values" variable.  </p>
<p>In fact the only way to get a deterministic ordering would be to use "sort_keys=True", which I assume places them in alphanumeric ordering.  Why is the order so important?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>OrderedDict</code></a> from the standard library <a href="https://docs.python.org/2/library/collections.html" rel="noreferrer"><code>collections</code></a>:<br/></p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; values = OrderedDict([('profile','testprofile'), 
                          ('format', 'RSA_RC4_Sealed'), 
                          ('enc_key', '...'), 
                          ('request', '...')])
&gt;&gt;&gt; json.dumps(values, sort_keys=False)
'{"profile": "testprofile", "format": "RSA_RC4_Sealed", "enc_key": "...", "request": "..."}'
</code></pre>
<p>Unfortunately this feature is <code>New in version 2.7</code> for <code>collections</code></p>
</div>
<div class="post-text" itemprop="text">
<p>An OrderedDict as discussed elsewhere is most of the solution to your problem, and an 'ObjDict' could be even better.</p>
<p>However if you need the order maintained on loading, then you will also need the json.loads()  to load the values into an OrderedDict.  To do this use</p>
<pre><code>from collections import OrderedDict
values=json.loads(jsontext,object_pairs_hook=OrderedDict)
</code></pre>
<p>Otherwise even though the json file will be in order, that order will be lost when loaded.</p>
<p>Perhaps an even better solution is to use 'ObjDict' in place of OrderedDict.
This requires a pip install objdict.  ObjDict still maintains order, as with OrderedDict, but also brings JSON support and better handling of this example.</p>
<pre><code>from objdict import ObjDict
values = ObjDict("""{"profile" : "testprofile",
      "format": "RSA_RC4_Sealed" }""")
values.enc_key = base64.b64encode(chiave_da_inviare)
values.request = base64.b64encode(data)

values_json = values.dumps(separators=(',', ':'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you specify <code>sort_keys=False</code> then Python will simply print the items in whatever order they appear in the underlying Python dict object.  In some cases this may happen to be the same as the default alphanumeric sort order.  In your example, the keys AREN'T even sorted like that, since "format" comes after "request".  Regardless, the <code>sort_keys</code> parameter is still valid, as evidenced by this sample code:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps({"a":5, "b":6, "c":7}, sort_keys=False)
'{"a": 5, "c": 7, "b": 6}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The keys aren't sorted: "profile", "enc_key", "request", "format".</p>
<p>It sounds like you want them to appear in the same order that you created them in the dictionary, but dictionaries are inherently unsorted, they don't remember the order you inserted keys.</p>
<p>There are a number of SortedDict implementations that you can use, but the json encoder won't know to use it to get the keys in the order you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can sort json data using simple json.dumps as </p>
<pre><code>sotred_json = json.dumps(values, sort_keys=True)
</code></pre>
<p>If you want no need to sort simply provide</p>
<pre><code>unsotred_json = json.dumps(values)  
</code></pre>
<p>or:</p>
<pre><code>unsotred_json = json.dumps(values, sort_keys=False)
</code></pre>
</div>
<span class="comment-copy">sort_keys is False by default. <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">docs.python.org/3/library/json.html</a> Which python did you use?</span>
<span class="comment-copy">because i think that my code doesn't work because the order is not the  right. is it possible?</span>
<span class="comment-copy">You code is working fine, its just that the order is undefined.  If you want to always be consistent use "sort_keys=True".</span>
<span class="comment-copy">what if i want to sort by values rather than keys ?</span>
<span class="comment-copy">Sort a Python dictionary by value: <a href="http://stackoverflow.com/q/613183/3345375">stackoverflow.com/q/613183/3345375</a></span>
<span class="comment-copy">There is at least one very-valid reason to want to sort these: if you want to hash the dictionary to quickly determine later if a dictionary is identical but can't store the original dictionary, you need a deterministic representation of the dictionary.</span>
<span class="comment-copy">+1 for providing simple yet direct answer to the question asked</span>
<span class="comment-copy">This feature is available to older version of Python using <code>pip install ordereddict</code> and then changing the import line into <code>from ordereddict import OrderedDict</code> as stated on <a href="http://stackoverflow.com/a/6852800/892951">this answer</a> (tested on Python 2.6.6).</span>
<span class="comment-copy">Nice... but note, surprisingly, while this works for json 2.0.9 it does not work (i.e. order is not preserved in serialization) with simplejson 2.0.9 (that is supposedly just the externally installed version of json?!). Python version is 2.7.3.</span>
