<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4260280/if-else-in-pythons-list-comprehension">if/else in Python's list comprehension?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>Here is the code I was trying to turn into a list comprehension:</p>
<pre><code>table = ''
for index in xrange(256):
    if index in ords_to_keep:
        table += chr(index)
    else:
        table += replace_with
</code></pre>
<p>Is there a way to add the else statement to this comprehension?</p>
<pre><code>table = ''.join(chr(index) for index in xrange(15) if index in ords_to_keep)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The syntax <code>a if b else c</code> is a ternary operator in Python that evaluates to <code>a</code> if the condition <code>b</code> is true - otherwise, it evaluates to <code>c</code>. It can be used in comprehension statements:</p>
<pre><code>&gt;&gt;&gt; [a if a else 2 for a in [0,1,0,3]]
[2, 1, 2, 3]
</code></pre>
<p>So for your example,</p>
<pre><code>table = ''.join(chr(index) if index in ords_to_keep else replace_with
                for index in xrange(15))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want an <code>else</code> you don't want to filter the list comprehension, you want it to iterate over every value. You can use <code>true-value if cond else false-value</code> as the statement instead, and remove the filter from the end:</p>
<pre><code>table = ''.join(chr(index) if index in ords_to_keep else replace_with for index in xrange(15))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To use the <code>else</code> in list comprehensions in python programming you can try out the below snippet. This would resolve your problem, the snippet is tested on python 2.7 and python 3.5. </p>
<pre><code>obj = ["Even" if i%2==0 else "Odd" for i in range(10)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Yes</strong>, <code>else</code> can be used in Python inside a <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer"><code>list</code></a> <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-comprehension" rel="nofollow noreferrer">comprehension </a> with a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">Conditional Expression</a> ("ternary operator"):</p>
<pre><code>&gt;&gt;&gt; [("A" if b=="e" else "c") for b in "comprehension"]
['c', 'c', 'c', 'c', 'c', 'A', 'c', 'A', 'c', 'c', 'c', 'c', 'c']
</code></pre>
<p>Here, the parentheses "()" are just to emphasize the conditional expression, they are not necessarily required (<a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">Operator precedence</a>). </p>
<p>Additionaly, several expressions can be nested, resulting in more <code>else</code>s and harder to read code:</p>
<pre><code>&gt;&gt;&gt; ["A" if b=="e" else "d" if True else "x" for b in "comprehension"]
['d', 'd', 'd', 'd', 'd', 'A', 'd', 'A', 'd', 'd', 'd', 'd', 'd']
&gt;&gt;&gt;
</code></pre>
<p>On a related note, a comprehension can also contain its own <code>if</code> condition(s) at the end:</p>
<pre><code>&gt;&gt;&gt; ["A" if b=="e" else "c" for b in "comprehension" if False]
[]
&gt;&gt;&gt; ["A" if b=="e" else "c" for b in "comprehension" if "comprehension".index(b)%2]
['c', 'c', 'A', 'A', 'c', 'c']
</code></pre>
<p>Condition<strong>s</strong>? Yes, multiple <code>if</code>s are possible, and actually multiple <code>for</code>s, too:</p>
<pre><code>&gt;&gt;&gt; [i for i in range(3) for _ in range(3)]
[0, 0, 0, 1, 1, 1, 2, 2, 2]
&gt;&gt;&gt; [i for i in range(3) if i for _ in range(3) if _ if True if True]
[1, 1, 2, 2]
</code></pre>
<p>(The single underscore <code>_</code> is a valid variable name (<a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="nofollow noreferrer">identifier</a>) in Python, used here just to show it's <em>not actually used</em>. It has a <a href="https://stackoverflow.com/questions/1538832/is-the-single-underscore-a-built-in-variable-in-python">special meaning in interactive mode</a>)</p>
<p>Using this for an additional conditional expression is possible, but of  no real use:</p>
<pre><code>&gt;&gt;&gt; [i for i in range(3)]
[0, 1, 2]
&gt;&gt;&gt; [i for i in range(3) if i]
[1, 2]
&gt;&gt;&gt; [i for i in range(3) if (True if i else False)]
[1, 2]
</code></pre>
<p>Comprehensions can also be nested to create "multi-dimensional" lists ("arrays"):</p>
<pre><code>&gt;&gt;&gt; [[i for j in range(i)] for i in range(3)]
[[], [1], [2, 2]]
</code></pre>
<hr/>
<p>Last but not least, a comprehension is not limited to creating a <code>list</code>, i.e. <code>else</code> and <code>if</code> can also be used the same way in a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer"><code>set</code></a> comprehension:</p>
<pre><code>&gt;&gt;&gt; {i for i in "set comprehension"}
{'o', 'p', 'm', 'n', 'c', 'r', 'i', 't', 'h', 'e', 's', ' '}
</code></pre>
<p>and a <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer"><code>dictionary</code></a> comprehension:</p>
<pre><code>&gt;&gt;&gt; {k:v for k,v in [("key","value"), ("dict","comprehension")]}
{'key': 'value', 'dict': 'comprehension'}
</code></pre>
<p>The same syntax is also used for <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">Generator Expressions</a>:</p>
<pre><code>&gt;&gt;&gt; for g in ("a" if b else "c" for b in "generator"):
...     print(g, end="")
...
aaaaaaaaa&gt;&gt;&gt;
</code></pre>
<p>which can be used to create a <code>tuple</code> (<a href="https://stackoverflow.com/questions/16940293/why-is-there-no-tuple-comprehension-in-python">there is no tuple comprehension</a>).</p>
<p><hr/>
Further reading:</p>
<ul>
<li>The <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">Python Tutorial on Data Structures</a>
<ul>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehensions</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">Sets</a> </li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Dictionaries</a></li>
</ul></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Great answers, but just wanted to mention a gotcha that "pass" keyword will not work in the if/else part of the list-comprehension (as posted in the examples mentioned above).</p>
<pre><code>#works
list1 = [10, 20, 30, 40, 50]
newlist2 = [x if x &gt; 30 else x**2 for x in list1 ]
print(newlist2, type(newlist2))

#but this WONT work
list1 = [10, 20, 30, 40, 50]
newlist2 = [x if x &gt; 30 else pass for x in list1 ]
print(newlist2, type(newlist2))
</code></pre>
<p>This is tried and tested on python 3.4.
Error is as below:</p>
<pre><code>newlist2 = [x if x &gt; 30 else pass for x in list1 ]                                    
SyntaxError: invalid syntax
</code></pre>
<p>So, try to avoid pass-es in list comprehensions</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Also, would I be right in concluding that a list comprehension is the most efficient way to do this?</p>
</blockquote>
<p>Maybe. List comprehensions are not inherently computationally efficient. It is still running in linear time.</p>
<p>From my personal experience:
I have significantly reduced computation time when dealing with large data sets by replacing list comprehensions (specifically nested ones) with for-loop/list-appending type structures you have above. In this application I doubt you will notice a difference.</p>
</div>
<span class="comment-copy">Note that this only works in Python 2.5 and later.</span>
<span class="comment-copy">Also note, that the <code>else</code> is necessary and cannot be ommited, because a resulting value is always required.</span>
<span class="comment-copy">The code within join(), is that list comprehension when there is no bracket? Or is that a generator expression and join takes that as argument just fine?</span>
<span class="comment-copy">@huggie it's a generator expression, and <code>join</code> happily takes a generator or any other iterable.</span>
<span class="comment-copy">Docs: <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a> and <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
<span class="comment-copy">The if/else construct is just an expression as far as the list comprehension is concerned. If you want to leave items out, you need to put your expression in place of <code>expr2</code> here  <code>[expr1 for x in list1 if expr2]</code></span>
<span class="comment-copy">Well pass works in a normal if else block , to me, that implies that it would work everywhere else too. But not so in list comprehensions.</span>
<span class="comment-copy">But this isn't a normal if/else block. It's <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="nofollow noreferrer">an expression</a>. You can't use elif in there either.</span>
<span class="comment-copy">woops, i meant to ask about the join method vs. += on a string.</span>
<span class="comment-copy">Interesting. This (<a href="http://wiki.python.org/moin/PythonSpeed#Takeadvantageofinterpreteroptimizations" rel="nofollow noreferrer">wiki.python.org/moin/…</a>) says otherwise.</span>
<span class="comment-copy">@Josh: in older version of Python, the join() method is vastly superior.  Newer versions of the interpreter attempt to optimize the += method, but I'm not sure how well this works.  I almost always just use the join() method.</span>
