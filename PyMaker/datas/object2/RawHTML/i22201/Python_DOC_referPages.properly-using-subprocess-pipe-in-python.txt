<div class="post-text" itemprop="text">
<p>I'm trying to use <code>subprocess.Popen</code> to construct a sequence to grab the duration of a video file. I've been searching for 3 days, and can't find any reason online as to why this code isn't working, but it keeps giving me a blank result:</p>
<pre><code>import sys
import os
import subprocess

def main():
  the_file = "/Volumes/Footage/Acura/MDX/2001/Crash Test/01 Acura MDX Front Crash.mov"
  ffmpeg = subprocess.Popen(['/opt/local/bin/ffmpeg', '-i', the_file], stdout = subprocess.PIPE, )
  grep = subprocess.Popen(['grep', 'Duration'], stdin = subprocess.PIPE, stdout = subprocess.PIPE, )
  cut = subprocess.Popen(['cut', '-d', ' ', '-f', '4'], stdin = subprocess.PIPE, stdout = subprocess.PIPE, )
  sed = subprocess.Popen(['sed', 's/,//'], stdin = subprocess.PIPE, stdout = subprocess.PIPE, )

  duration = sed.communicate()
  print duration

if __name__ == '__main__':
  main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>stderr needs to be redirected to stdout. Also, there's no need to call other tools like <code>cut/sed</code> etc. do your string manipulation in Python</p>
<pre><code>import subprocess
....
the_file = "/Volumes/Footage/Acura/MDX/2001/Crash Test/01 Acura MDX Front Crash.mov"
ffmpeg = subprocess.Popen(['/usr/bin/ffmpeg', '-i', the_file], stderr=subprocess.STDOUT,stdout = subprocess.PIPE )
out, err = ffmpeg.communicate()
if "Duration" in out:
    print out[out.index("Duration"):].split()[1]
</code></pre>
<p>If Python is not a must, you can use the shell directly.</p>
<pre><code>the_file="/Volumes/Footage/Acura/MDX/2001/Crash Test/01 Acura MDX Front Crash.mov"
ffmpeg -i "$file" 2&gt;&amp;1 | awk '/Duration/{print $2}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As others have pointed out, you need to pass the PIPE from one process to the next.
The stdout (PIPE) from one process becomes the stdin for the following task.</p>
<p>Something like this (starting from your example):</p>
<pre><code>import sys
import os
import subprocess

def main():
  the_file = "/Volumes/Footage/Acura/MDX/
              2001/Crash Test/01 Acura MDX Front Crash.mov"
  ffmpeg = subprocess.Popen(['/opt/local/bin/ffmpeg', '-i', the_file],
                            stdout = subprocess.PIPE)
  grep = subprocess.Popen(['grep', 'Duration'], 
                          stdin = ffmpeg.stdout, stdout = subprocess.PIPE)
  cut = subprocess.Popen(['cut', '-d', ' ', '-f', '4'],
                         stdin = grep.stdout, stdout = subprocess.PIPE)
  sed = subprocess.Popen(['sed', 's/,//'],
                         stdin = cut.stdout, stdout = subprocess.PIPE)

  duration = sed.communicate()[0]
  print duration

if __name__ == '__main__':
  main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>subprocess.PIPE</code> will not magically wire the correct pipes for you.</p>
<p>You must pass the output pipe of the first process as the value for the parameter <code>stdin</code> of the second process. <a href="http://docs.python.org/library/subprocess.html#replacing-shell-pipeline" rel="noreferrer">See the docs for an example</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python can't "build a whole pipeline" in this way -- it could delegate the task to the shell, or glue it up more directly using the <code>stdout</code> attributes of previous subprocess objects in the line, but there's really no reason for that in this specific case, since you can code it directly in Python pretty easily.  E.g.:</p>
<pre><code>  ffmpeg = subprocess.Popen(['/opt/local/bin/ffmpeg', '-i', the_file],
                            stdout=subprocess.PIPE)
  for line in ffmpeg.stdout:
    if 'Duration' not in line: continue
    fields = line.split()
    duration = fields[4].replace(',', '')
    break
</code></pre>
</div>
<span class="comment-copy">Why are you using grep, cut and sed to parse the output instead of using builtin Python functions?</span>
<span class="comment-copy"><a href="http://thraxil.org/users/anders/posts/2008/03/13/Subprocess-Hanging-PIPE-is-your-enemy/" rel="nofollow noreferrer">subprocess.PIPE</a>  is your enemy</span>
<span class="comment-copy">Thank you. I didn't realize I had to redirect <code>stderr</code> as well.</span>
<span class="comment-copy">I'd consider this the correct answer, it answers exactly what OP asked and isn't instructing on how you could work around it.</span>
<span class="comment-copy">There is a pipes module nowadays: <a href="https://docs.python.org/3/library/pipes.html?highlight=pipe#module-pipes" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
