<div class="post-text" itemprop="text">
<p>I seem to have a hard time getting my head around this.</p>
<p>What's the difference between <code>calendar.timegm()</code> and <code>time.mktime()</code>?</p>
<p>Say I have a <code>datetime.datetime</code> with no tzinfo attached, shouldn't the two give the same output? Don't they both give the number of seconds between epoch and the date passed as a parameter? And since the date passed has no tzinfo, isn't that number of seconds the same?</p>
<pre><code>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; import time
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = datetime.datetime(2010, 10, 10)
&gt;&gt;&gt; calendar.timegm(d.timetuple())
1286668800
&gt;&gt;&gt; time.mktime(d.timetuple())
1286640000.0
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/time.html#time.mktime" rel="noreferrer"><code>time.mktime()</code></a> assumes that the passed tuple is in local time, <a href="http://docs.python.org/library/calendar.html#calendar.timegm" rel="noreferrer"><code>calendar.timegm()</code></a> assumes it's in GMT/UTC. Depending on the interpretation the tuple represents a different time, so the functions return different values (seconds since the epoch are UTC based).</p>
<p>The difference between the values should be equal to the time zone offset of your local time zone.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>calendar.timegm</code> converts from UTC timestamp, <a href="http://docs.python.org/library/time.html#time.mktime" rel="noreferrer"><code>time.mktime</code> converts from <em>local</em> time not UTC</a>.</p>
<p>8 hours difference in their results corresponds exactly to timezone of your location.</p>
</div>
<span class="comment-copy">See this question: <a href="http://stackoverflow.com/questions/15447632/python-convert-utc-time-tuple-to-utc-timestamp" title="python convert utc time tuple to utc timestamp">stackoverflow.com/questions/15447632/â€¦</a></span>
<span class="comment-copy">Oh, I see, so basically timegm assumes I passed UTC and simply makes the difference between what I passed and 1970.01.01 UTC, whereas mktime first converts what I passed to UTC by adding my timezone offset and does what timegm did from there on?</span>
<span class="comment-copy">But WHY if my datetime's tzinfo is None does mktime do ANY conversion? Shouldn't it leave it as it is? Why would it assume it's in local time zone?</span>
<span class="comment-copy">@ibz: The <code>timetuple</code> parameter given to <code>mktime()</code> doesn't contain any time zone information (it never does, there is no time zone field in a <code>timetuple</code>). Therefore the function has to "guess" which time zone it might be, and <code>mktime()</code> just always assumes that it is local time. That's just how the function behaves.</span>
<span class="comment-copy">also <code>calendar.timegm()</code> has epoch hardcoded to 1970-01-01UTC (posix epoch). <code>time.mktime()</code> <i>might</i> use different epoch. From <a href="http://docs.python.org/3/library/time" rel="nofollow noreferrer">the docs: <i>For Unix, the epoch is 1970. To find out what the epoch is, look at gmtime(0).</i></a> Though the rest of stdlib might assume posix epoch.</span>
<span class="comment-copy">More precisely, timegm interprets the given date as UTC, returning a timestamp, while mktime interprets the given date as local time, returning a timestamp.</span>
<span class="comment-copy">@Greg: corrected. misread the docs :)</span>
