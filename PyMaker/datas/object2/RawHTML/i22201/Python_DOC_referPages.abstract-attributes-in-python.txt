<div class="post-text" itemprop="text">
<p>What is the shortest / most elegant way to implement the following Scala code with an abstract attribute in Python?</p>
<pre><code>abstract class Controller {

    val path: String

}
</code></pre>
<p>A subclass of <code>Controller</code> is enforced to define "path" by the Scala compiler. A subclass would look like this:</p>
<pre><code>class MyController extends Controller {

    override val path = "/home"

}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a built-in exception for this, though you won't encounter the exception until runtime.</p>
<pre><code>class Base(object):
    @property
    def path(self):
        raise NotImplementedError


class SubClass(Base):
    path = 'blah'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Python 3.3+</h2>
<pre><code>from abc import ABCMeta, abstractmethod


class A(metaclass=ABCMeta):
    def __init__(self):
        # ...
        pass

    @property
    @abstractmethod
    def a(self):
        pass

    @abstractmethod
    def b(self):
        pass


class B(A):
    a = 1

    def b(self):
        pass
</code></pre>
<p>Failure to declare <code>a</code> or <code>b</code> in the derived class <code>B</code> will raise a <code>TypeError</code> such as:</p>
<blockquote>
<p><code>TypeError</code>: Can't instantiate abstract class <code>B</code> with abstract methods <code>a</code></p>
</blockquote>
<h2>Python 2.7</h2>
<p>There is an <a href="https://docs.python.org/2.7/library/abc.html#abc.abstractproperty" rel="noreferrer">@abstractproperty</a> decorator for this:</p>
<pre><code>from abc import ABCMeta, abstractmethod, abstractproperty


class A:
    __metaclass__ = ABCMeta

    def __init__(self):
        # ...
        pass

    @abstractproperty
    def a(self):
        pass

    @abstractmethod
    def b(self):
        pass


class B(A):
    a = 1

    def b(self):
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could create an attribute in the <a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="noreferrer">abc.ABC</a> abstract base class with a value such as <a href="https://docs.python.org/library/stdtypes.html?highlight=notimplemented#the-notimplemented-object" rel="noreferrer"><code>NotImplemented</code></a> so that if the attribute is not overriden and then used, an error is shown at run time.</p>
<p>The following code uses a <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a> type hint to help PyCharm correctly statically analyze the type of the <code>path</code> attribute as well.</p>
<pre><code>import abc


class Controller(abc.ABC):
    path = NotImplemented  # type: str


class MyController(Controller):
    path = '/home'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since this question was originally asked, python has changed how abstract classes are implemented. I have used a slightly different approach using the abc.ABC formalism in python 3.6.  Here I define the constant as a property which must be defined in each subclass.</p>
<pre><code>from abc import ABC, abstractmethod


class Base(ABC):

    @property
    @classmethod
    @abstractmethod
    def CONSTANT(cls):
        return NotImplementedError

    def print_constant(self):
        print(type(self).CONSTANT)


class Derived(Base):
    CONSTANT = 42
</code></pre>
<p>This forces the derived class to define the constant, or else a <code>TypeError</code> exception will be raised when you try to instantiate the subclass. When you want to use the constant for any functionality implemented in the abstract class, you must access the subclass constant by <code>type(self).CONSTANT</code> instead of just <code>CONSTANT</code>, since the value is undefined in the base class. </p>
<p>There are other ways to implement this, but I like this syntax as it seems to me the most plain and obvious for the reader.   </p>
<p>The previous answers all touched useful points, but I feel the accepted answer does not directly answer the question because</p>
<ul>
<li>The question asks for implementation in an abstract class, but the accepted answer does not follow the abstract formalism.</li>
<li>The question asks that implementation is enforced.  I would argue that enforcement is stricter in this answer because it causes a runtime error when the subclass is instantiated if <code>CONSTANT</code> is not defined. The accepted answer allows the object to be instantiated and only throws an error when <code>CONSTANT</code> is accessed, making the enforcement less strict.  </li>
</ul>
<p>This is not to fault the original answers.  Major changes to the abstract class syntax have occurred since they were posted, which in this case allow a neater and more functional implementation. </p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at the abc (Abtract Base Class) module: <a href="http://docs.python.org/library/abc.html" rel="nofollow noreferrer">http://docs.python.org/library/abc.html</a></p>
<p>However, in my opinion the simplest and most common solution is to raise an exception when an instance of the base class is created, or when its property is accessed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your base class could implement a <code>__new__</code> method that check for class attribute:</p>
<pre><code>class Controller(object):
    def __new__(cls, *args, **kargs):
        if not hasattr(cls,'path'): 
            raise NotImplementedError("'Controller' subclasses should have a 'path' attribute")
        return object.__new__(cls,*args,**kargs)

class C1(Controller):
    path = 42

class C2(Controller):
    pass


c1 = C1() 
# ok

c2 = C2()  
# NotImplementedError: 'Controller' subclasses should have a 'path' attribute
</code></pre>
<p>This way the error raise at instantiation</p>
</div>
<div class="post-text" itemprop="text">
<p>Python3.6 implementation might looks like this:</p>
<pre><code>In [20]: class X:
    ...:     def __init_subclass__(cls):
    ...:         if not hasattr(cls, 'required'):
    ...:             raise NotImplementedError

In [21]: class Y(X):
    ...:     required =5
    ...:     

In [22]: Y()
Out[22]: &lt;__main__.Y at 0x7f08408c9a20&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0526/" rel="nofollow noreferrer">In Python 3.6+</a>, you can annotate an attribute of an abstract class (or any variable) without providing a value for that attribute.</p>
<pre class="lang-py prettyprint-override"><code>class Controller:
    path: str

class MyController(Controller):
    path = "/home"
</code></pre>
<p>This makes for very clean code where it is obvious that the attribute is abstract. Code that tries to access the attribute when if has not been overwritten will raise an <code>AttributeError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Bastien Léonard's answer mentions the abstract base class module and Brendan Abel's answer deals with non-implemented attributes raising errors. To ensure that the class is not implemented outside of the module, you could prefix the base name with an underscore which denotes it as private to the module (i.e. it is not imported). </p>
<p>i.e.</p>
<pre><code>class _Controller(object):
    path = '' # There are better ways to declare attributes - see other answers

class MyController(_Controller):
    path = '/Home'</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class AbstractStuff:
    @property
    @abc.abstractmethod
    def some_property(self):
        pass
</code></pre>
<p>As of 3.3 <code>abc.abstractproperty</code> is deprecated, I think.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.6 you can use <code>__init_subclass__</code> to check for the class variables of the child class upon initialisation:</p>
<pre class="lang-py prettyprint-override"><code>from abc import ABC

class A(ABC):
    @classmethod
    def __init_subclass__(cls):
        required_class_variables = [
            "foo",
            "bar"
        ]
        for var in required_class_variables:
            if not hasattr(cls, var):
                raise NotImplementedError(
                    f'Class {cls} lacks required `{var}` class attribute'
                )
</code></pre>
</div>
<span class="comment-copy">What have you tried?  Please post your Python code with any problems or question you have about your solution.</span>
<span class="comment-copy">"A subclass of Controller is enforced to define "path" by the Scala compiler." ... Enforced when? If it's compile time, you're out of luck. If it's runtime, then how exactly do you want it "enforced"? In other words, is there a difference between raising an AttributeError and a NotImplementedError? Why?</span>
<span class="comment-copy">I know that Python is a dynamic language and that the python interpreter cannot enforce static types. It is important to me, that it fails as early as possibly and that it is easy to find the place where the error orrured and why.</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/1151212/equivalent-of-notimplementederror-for-fields-in-python" title="equivalent of notimplementederror for fields in python">stackoverflow.com/questions/1151212/…</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/46133031/python-abstract-attribute">Python Abstract Attribute</a></span>
<span class="comment-copy">Specifically, you won't encounter the exception until the attrtibute is accessed, in which case you would have got an AttributeError anyway.</span>
<span class="comment-copy">I think that raising a <code>NotImplementedError</code> is more explicit and therefore probably better than leaving it to an <code>AttributeError</code>.</span>
<span class="comment-copy">Also you can add a message such "Can't instantiate abstract class Base" when raising an exception yourself.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/a/1151275/216229">stackoverflow.com/a/1151275/216229</a> too.</span>
<span class="comment-copy">Not that this only works if <code>path</code> is set directly on the <code>SubClass</code>. Given an instance <code>sc = SubClass()</code>, if you try to set <code>sc.path = 'blah'</code> or have a method that contains something like <code>self.path = 'blah'</code> without defining <code>path</code> directly on <code>SubClass</code>, you will get an <code>AttributeError: can't set attribute</code>.</span>
<span class="comment-copy">My "A" class is a subclass of Exception, and this appears to break the example.</span>
<span class="comment-copy">@Chris2048 how does it break it? what error are you getting?</span>
<span class="comment-copy">Is there a way to write this in a Python 2/3 agnostic way similar to <a href="https://stackoverflow.com/questions/35673474/using-abc-abcmeta-in-a-way-it-is-compatible-both-with-python-2-7-and-python-3-5">this question</a>?</span>
<span class="comment-copy">Note this is not instance field. The Scala field is always instance member in the class definition. Because Scala separate the static and instance.</span>
<span class="comment-copy">this appears to be the only correct answer which also appeases <code>mypy</code></span>
<span class="comment-copy">Please elaborate: How does abc module help in this context?</span>
<span class="comment-copy">interestingly, this doesn't work if you need to use def __init__(self).</span>
<span class="comment-copy">c = Controller() still works. Controller class is not abstract.</span>
<span class="comment-copy">is it possible to raise some error if the subclass does not redefine the attribute? It would be easy for methods, but how about attributes?</span>
<span class="comment-copy">Wouldn't it be better to leave out the path declaration in <code>_Controller</code> class? Duck Typing wouldn't take effect if there is already a (invalid) value. Otherwise at some point, where I need the <code>path</code> field to be defined, there would be no error because there is already a value.</span>
<span class="comment-copy">@Mario - yes, Brendan Abel's answer gives a good way to do this</span>
