<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16522362/concatenate-elements-of-a-list">Concatenate elements of a list [duplicate]</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I have extracted some data from a file and want to write it to a second file. But my program is returning the error:</p>
<pre class="lang-none prettyprint-override"><code>sequence item 1: expected string, list found
</code></pre>
<p>This appears to be happening because <code>write()</code> wants a string but it is receiving a list.</p>
<p>So, with respect to this code, how can I convert the list <code>buffer</code> to a string so that I can save the contents of <code>buffer</code> to <code>file2</code>?</p>
<pre><code>file = open('file1.txt','r')
file2 = open('file2.txt','w')
buffer = []
rec = file.readlines()
for line in rec :
    field = line.split()
    term1 = field[0]
    buffer.append(term1)
    term2 = field[1]
    buffer.append[term2]
    file2.write(buffer)  # &lt;== error
file.close()
file2.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="http://docs.python.org/library/stdtypes.html#str.join" rel="noreferrer"><code>str.join</code></a>:</p>
<pre><code>file2.write(' '.join(buffer))
</code></pre>
<p>Documentation says:</p>
<blockquote>
<p>Return a string which is the concatenation of the strings in the iterable iterable. The separator between elements is the string providing this method.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>''.join(buffer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>file2.write( str(buffer) )
</code></pre>
<p>Explanation:
<code>str(anything)</code> will convert any python object into its string representation. Similar to the output you get if you do <code>print(anything)</code>, but as a string.</p>
<p>NOTE: This probably isn't what OP wants, as it has no control on how the elements of <code>buffer</code> are concatenated -- it will put <code>,</code> between each one -- but it may be useful to someone else.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>buffer=['a','b','c']
obj=str(buffer)
obj[1:len(obj)-1]
</code></pre>
<p>will give "'a','b','c'" as output</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>file2.write(','.join(buffer))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Method 1:</p>
<pre class="lang-py prettyprint-override"><code>import functools
file2.write(functools.reduce((lambda x,y:x+y), buffer))
</code></pre>
<p>Method 2:</p>
<pre class="lang-py prettyprint-override"><code>import functools, operator
file2.write(functools.reduce(operator.add, buffer))
</code></pre>
<p>Method 3:</p>
<pre class="lang-py prettyprint-override"><code>file2.write(''.join(buffer))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># it handy if it used for output list
list = [1, 2, 3]
stringRepr = str(list)
# print(stringRepr)
# '[1, 2, 3]'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/faq/programming.html#what-is-the-most-efficient-way-to-concatenate-many-strings-together" rel="nofollow noreferrer">the official Python Programming FAQ</a> for Python 3.6.4:</p>
<blockquote>
<p>What is the most efficient way to concatenate many strings together?
  <code>str</code> and <code>bytes</code> objects are immutable, therefore concatenating many strings together is inefficient as each concatenation creates a new object. In the general case, the total runtime cost is quadratic in the total string length.</p>
<p>To accumulate many str objects, the recommended idiom is to place them into a list and call <code>str.join()</code> at the end:</p>
</blockquote>
<pre><code>chunks = []
for s in my_strings:
    chunks.append(s)
result = ''.join(chunks)
</code></pre>
<blockquote>
<p>(another reasonably efficient idiom is to use <code>io.StringIO</code>)</p>
<p>To accumulate many bytes objects, the recommended idiom is to extend a <code>bytearray</code> object using in-place concatenation (the <code>+=</code> operator):</p>
</blockquote>
<pre><code>result = bytearray()
for b in my_bytes_objects:
    result += b
</code></pre>
</div>
<span class="comment-copy">with that code posted, you should get other errors, too. e.g. at <code>buffer.append[term2]</code> ...</span>
<span class="comment-copy">You appear to be adding data to the "buffer" for each line, and then writing the whole buffer to the file without ever clearing it.  This will result in the first line's data being in the file once for every line in the file, the second's data one fewer time than that, and so on.  This is probably not what you want.</span>
<span class="comment-copy">If you want each item in <code>buffer</code> to be written to a separate line in <code>file2</code>, use: <code>'\n'.join(buffer)</code></span>
<span class="comment-copy">@miku : This donâ€™t work with python3.</span>
<span class="comment-copy">@user2284570 It does work in python3, as well.</span>
<span class="comment-copy">yes, though the OP probably wants a space or comma as a separator I'm guessing.</span>
<span class="comment-copy">Thanks for comment. In which case use <code>' '.join(buffer)</code> or <code>','.join(buffer)</code></span>
<span class="comment-copy">sorry it still says that buffer is list , and the ' '.join(buffer) expect string..</span>
<span class="comment-copy"><code>str.join()</code> does not expect a string per se, it expects a <i>list</i> of strings. The code you provided us, sans syntax errors, does exactly that. Maybe you should give us the actual code?</span>
<span class="comment-copy">@PARJAT, @bp, are you addressing the original poster or me? <code>buffer</code> is a list of strings and therefore <code>''.join(buffer)</code> will join them into one string.</span>
<span class="comment-copy">You are missing a <code>.</code> after <code>''</code> and before <code>join</code>.</span>
