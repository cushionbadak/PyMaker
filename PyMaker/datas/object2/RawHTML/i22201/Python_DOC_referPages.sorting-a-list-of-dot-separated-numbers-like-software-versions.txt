<div class="post-text" itemprop="text">
<p>I have a list containing version strings, such as things:</p>
<pre><code>versions_list = ["1.1.2", "1.0.0", "1.3.3", "1.0.12", "1.0.2"]
</code></pre>
<p>I would like to sort it, so the result would be something like this:</p>
<pre><code>versions_list = ["1.0.0", "1.0.2", "1.0.12", "1.1.2", "1.3.3"]
</code></pre>
<p>The order of precedence for the digits should obviously be from left to right, and it should be descending. So <code>1.2.3</code> comes before <code>2.2.3</code> and <code>2.2.2</code> comes before <code>2.2.3</code>.</p>
<p>How do I do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Split each version string to compare it as a list of integers:</p>
<pre><code>versions_list.sort(key=lambda s: map(int, s.split('.')))
</code></pre>
<p>Gives, for your list:</p>
<pre><code>['1.0.0', '1.0.2', '1.0.12', '1.1.2', '1.3.3']
</code></pre>
<p>In Python3 <code>map</code> no longer returns a <code>list</code>, So we need to <a href="https://stackoverflow.com/questions/1303347/getting-a-map-to-return-a-list-in-python-3-x">wrap it in a <code>list</code> call</a>. </p>
<pre><code>versions_list.sort(key=lambda s: list(map(int, s.split('.'))))
</code></pre>
<p>The alternative to map here is a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>. See <a href="https://stackoverflow.com/q/34835951/4099593">this post</a> for more on list comprehensions. </p>
<pre><code>versions_list.sort(key=lambda s: [int(u) for u in s.split('.')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <code>distutils.version</code> module of standard library:</p>
<pre><code>from distutils.version import StrictVersion
versions = ["1.1.2", "1.0.0", "1.3.3", "1.0.12", "1.0.2"]
versions.sort(key=StrictVersion)
</code></pre>
<p>Gives you:</p>
<pre><code>['1.0.0', '1.0.2', '1.0.12', '1.1.2', '1.3.3']
</code></pre>
<p>It can also handle versions with pre-release tags, for example:</p>
<pre><code>versions = ["1.1", "1.1b1", "1.1a1"]
versions.sort(key=StrictVersion)
</code></pre>
<p>Gives you:</p>
<pre><code>["1.1a1", "1.1b1", "1.1"]
</code></pre>
<p>Documentation: <a href="https://github.com/python/cpython/blob/3.2/Lib/distutils/version.py#L101" rel="noreferrer">https://github.com/python/cpython/blob/3.2/Lib/distutils/version.py#L101</a></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pypi.python.org/pypi/natsort" rel="noreferrer">natsort</a> proposes "natural sorting"; wich works very intuitively (in Python 3)</p>
<pre><code>from natsort import natsorted
versions = ["1.1.2", "1.0.0", "1.3.3", "1.0.12", "1.0.2"]
natsorted(versions)
</code></pre>
<p>gives</p>
<pre><code>['1.0.0', '1.0.2', '1.0.12', '1.1.2', '1.3.3']
</code></pre>
<p>but it works as well on complete package names with version number:</p>
<pre><code>versions = ['version-1.9', 'version-2.0', 'version-1.11', 'version-1.10']
natsorted(versions)
</code></pre>
<p>gives</p>
<pre><code>['version-1.9', 'version-1.10', 'version-1.11', 'version-2.0']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I also solved this question using Python, although my version does some extra things, here is my code:</p>
<pre><code>def answer(l):
    list1 = [] # this is the list for the nested strings
    for x in l:
        list1.append(x.split("."))
    list2 = [] # this is the same list as list one except everything  is an integer in order for proper sorting
    for y in list1:
        y = map(int, y)
        list2.append(y)
    list3 = sorted(list2) #this is the sorted list of of list 2
    FinalList = [] # this is the list that converts everything back to the way it was
    for a in list3:
        a = '.'.join(str(z) for z in a)
        FinalList.append(a)
    return FinalList
</code></pre>
<p>For versions there exist three things; Major, Minor, and the revision. What this does is that it organises it so that <code>'1'</code> will come before <code>'1.0'</code> which will come before <code>'1.0.0'</code>. Also, another plus, no need to import any libraries incase you don't have them, and it works with old versions of Python, this one was specifically meant for Version 2.7.6.  Anyway, here are a few examples:</p>
<pre><code>Inputs:
    (string list) l = ["1.1.2", "1.0", "1.3.3", "1.0.12", "1.0.2"]
Output:
    (string list) ["1.0", "1.0.2", "1.0.12", "1.1.2", "1.3.3"]

Inputs:
    (string list) l = ["1.11", "2.0.0", "1.2", "2", "0.1", "1.2.1", "1.1.1", "2.0"]
Output:
    (string list) ["0.1", "1.1.1", "1.2", "1.2.1", "1.11", "2", "2.0", "2.0.0"]
</code></pre>
<p>If you have any questions, just comment on the answer!!</p>
</div>
<span class="comment-copy">Related <a href="http://stackoverflow.com/q/11887762">How to compare "version-style" strings</a></span>
<span class="comment-copy">For the regular expression solution you would just replace the s with the expression that returns the group that you want.   For example: lambda s: map(int, re.search(myre, s).groups[0].split('.'))</span>
<span class="comment-copy">Thank you, worked like a charm</span>
<span class="comment-copy">This is pure elegance.</span>
<span class="comment-copy">Sort return None, but list is sorted.</span>
<span class="comment-copy">That key function will not work in Python 3 because <code>map</code> returns an iterator in Python 3, not a list. But this will work in both versions: <code>key=lambda s: [int(u) for u in s.split('.')])</code>.</span>
<span class="comment-copy">+1. Cool. I'd prefer this solution.</span>
<span class="comment-copy">Seems more pythonic then Eli's solution.</span>
<span class="comment-copy">There's also distutils.version.LooseVersion which is a little more forgiving with version numbers that end in letters ['1.0b', '1.0.2-final'], etc. or whatnot - I prefer this version since StrictVersion seems to be more oriented towards Python distutils specific version strings, LooseVersion caters to a wider swath of potential version strings you'll see in the wild.</span>
<span class="comment-copy"><code>StrictVersion</code> does not handle versions such as '9.20.00.0': invalid version number is returned. I'm wondering if, however, this is because the actual version is indicated as <code>u'9.20.00.0'</code> ...??? Maybe this needs to be decoded to UTF-8.</span>
<span class="comment-copy">In case you need more freedom, you could use distutils.version.LooseVersion over StrictVersion. See <a href="http://epydoc.sourceforge.net/stdlib/distutils.version.LooseVersion-class.html" rel="nofollow noreferrer">epydoc.sourceforge.net/stdlib/â€¦</a></span>
<span class="comment-copy">Your example does not work: <code>natsort(versions)</code>:  <code>TypeError: 'module' object is not callable</code></span>
<span class="comment-copy">You should use python 3...</span>
<span class="comment-copy">I use only python3.4</span>
<span class="comment-copy">You should use <code>natsorted</code> according to the documentation</span>
<span class="comment-copy">I use python 3.3 with natsort 4.0.4, and my example above works fine. The documented "from natsort import natsorted" doesn't work for me however....</span>
