<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2491222/how-to-rename-a-file-using-python">How to rename a file using Python</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/17748228/rename-multiple-files-in-python">Rename multiple files in Python</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to rename some files in a directory using Python.</p>
<p>Say I have a file called <code>CHEESE_CHEESE_TYPE.***</code> and want to remove <code>CHEESE_</code> so my resulting filename would be <code>CHEESE_TYPE</code></p>
<p>I'm trying to use the <code>os.path.split</code> but it's not working properly. I have also considered using string manipulations, but have not been successful with that either.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/os.html#os.rename" rel="noreferrer"><code>os.rename(src, dst)</code></a> to rename or move a file or a directory.</p>
<pre><code>$ ls
cheese_cheese_type.bar  cheese_cheese_type.foo
$ python
&gt;&gt;&gt; import os
&gt;&gt;&gt; for filename in os.listdir("."):
...  if filename.startswith("cheese_"):
...    os.rename(filename, filename[7:])
... 
&gt;&gt;&gt; 
$ ls
cheese_type.bar  cheese_type.foo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a script based on your newest comment.</p>
<pre><code>#!/usr/bin/env python
from os import rename, listdir

badprefix = "cheese_"
fnames = listdir('.')

for fname in fnames:
    if fname.startswith(badprefix*2):
        rename(fname, fname.replace(badprefix, '', 1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following code should work. It takes every filename in the current directory, if the filename contains the pattern <code>CHEESE_CHEESE_</code> then it is renamed. If not nothing is done to the filename.</p>
<pre><code>import os
for fileName in os.listdir("."):
    os.rename(fileName, fileName.replace("CHEESE_CHEESE_", "CHEESE_"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are already in the directory, and that the "first 8 characters" from your comment hold true always.  (Although "CHEESE_" is 7 characters... ? If so, change the 8 below to 7)</p>
<pre><code>from glob import glob
from os import rename
for fname in glob('*.prj'):
    rename(fname, fname[8:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have the same issue, where I want to replace the white space <code></code> in any pdf file to a dash <code>-</code>.
But the files were in multiple sub-directories. So, I had to use <code>os.walk()</code>.
In your case for multiple sub-directories, it could be something like this:</p>
<pre><code>import os
for dpath, dnames, fnames in os.walk('/path/to/directory'):
    for f in fnames:
        os.chdir(dpath)
        if f.startswith('cheese_'):
            os.rename(f, f.replace('cheese_', ''))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import os
import shutil

for file in os.listdir(dirpath):
    newfile = os.path.join(dirpath, file.split("_",1)[1])
    shutil.move(os.path.join(dirpath,file),newfile)
</code></pre>
<p>I'm assuming you don't want to remove the file extension, but you can just do the same split with periods.</p>
</div>
<div class="post-text" itemprop="text">
<p>This sort of stuff is perfectly fitted for IPython, which has shell integration.</p>
<pre><code>In [1] files = !ls
In [2] for f in files:
           newname = process_filename(f)
           mv $f $newname
</code></pre>
<p>Note: to store this in a script, use the <code>.ipy</code> extension, and prefix all shell commands with <code>!</code>.</p>
<p>See also: <a href="http://ipython.org/ipython-doc/stable/interactive/shell.html" rel="nofollow">http://ipython.org/ipython-doc/stable/interactive/shell.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that your problem is more in determining the new file name rather than the rename itself (for which you could use the os.rename method).</p>
<p>It is not clear from your question what the pattern is that you want to be renaming. There is nothing wrong with string manipulation. A regular expression may be what you need here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a more general solution:</p>
<p>This code can be used to remove any particular character or set of characters recursively from all filenames within a directory and replace them with any other character, set of characters or no character.</p>
<pre><code>import os

paths = (os.path.join(root, filename)
        for root, _, filenames in os.walk('C:\FolderName')
        for filename in filenames)

for path in paths:
    # the '#' in the example below will be replaced by the '-' in the filenames in the directory
    newname = path.replace('#', '-')
    if newname != path:
        os.rename(path, newname)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This command will remove the <em>initial</em> "CHEESE_" string from all the files in the current directory, using <a href="https://github.com/75lb/renamer" rel="nofollow noreferrer">renamer</a>:</p>
<pre><code>$ renamer --find "/^CHEESE_/" *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use os.system function for simplicity and to invoke bash to accomplish the task:</p>
<pre><code>import os
os.system('mv old_filename new_filename')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was originally looking for some GUI which would allow renaming using regular expressions and which had a preview of the result before applying changes.</p>
<p>On Linux I have successfully used <a href="http://www.krename.net/home/" rel="nofollow">krename</a>, on Windows Total Commander does renaming with regexes, but I found no decent free equivalent for OSX, so I ended up writing a python script which works recursively and by default only prints the new file names without making any changes. Add the '-w' switch to actually modify the file names.</p>
<pre class="lang-python prettyprint-override"><code>#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import fnmatch
import sys
import shutil
import re


def usage():
    print """
Usage:
        %s &lt;work_dir&gt; &lt;search_regex&gt; &lt;replace_regex&gt; [-w|--write]

        By default no changes are made, add '-w' or '--write' as last arg to actually rename files
        after you have previewed the result.
        """ % (os.path.basename(sys.argv[0]))


def rename_files(directory, search_pattern, replace_pattern, write_changes=False):

    pattern_old = re.compile(search_pattern)

    for path, dirs, files in os.walk(os.path.abspath(directory)):

        for filename in fnmatch.filter(files, "*.*"):

            if pattern_old.findall(filename):
                new_name = pattern_old.sub(replace_pattern, filename)

                filepath_old = os.path.join(path, filename)
                filepath_new = os.path.join(path, new_name)

                if not filepath_new:
                    print 'Replacement regex {} returns empty value! Skipping'.format(replace_pattern)
                    continue

                print new_name

                if write_changes:
                    shutil.move(filepath_old, filepath_new)
            else:
                print 'Name [{}] does not match search regex [{}]'.format(filename, search_pattern)

if __name__ == '__main__':
    if len(sys.argv) &lt; 4:
        usage()
        sys.exit(-1)

    work_dir = sys.argv[1]
    search_regex = sys.argv[2]
    replace_regex = sys.argv[3]
    write_changes = (len(sys.argv) &gt; 4) and sys.argv[4].lower() in ['--write', '-w']
    rename_files(work_dir, search_regex, replace_regex, write_changes)
</code></pre>
<h3>Example use case</h3>
<p>I want to flip parts of a file name in the following manner, i.e. move the bit <code>m7-08</code> to the beginning of the file name:</p>
<pre><code># Before:
Summary-building-mobile-apps-ionic-framework-angularjs-m7-08.mp4

# After:
m7-08_Summary-building-mobile-apps-ionic-framework-angularjs.mp4
</code></pre>
<p>This will perform a dry run, and print the new file names without actually renaming any files:</p>
<pre><code>rename_files_regex.py . "([^\.]+?)-(m\\d+-\\d+)" "\\2_\\1"
</code></pre>
<p>This will do the actual renaming (you can use either <code>-w</code> or <code>--write</code>):</p>
<pre><code>rename_files_regex.py . "([^\.]+?)-(m\\d+-\\d+)" "\\2_\\1" --write
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>import os
import string
def rename_files():</p>
<pre><code>#List all files in the directory
file_list = os.listdir("/Users/tedfuller/Desktop/prank/")
print(file_list)

#Change current working directory and print out it's location
working_location = os.chdir("/Users/tedfuller/Desktop/prank/")
working_location = os.getcwd()
print(working_location)

#Rename all the files in that directory
for file_name in file_list:
    os.rename(file_name, file_name.translate(str.maketrans("","",string.digits)))
</code></pre>
<p>rename_files()</p>
</div>
<div class="post-text" itemprop="text">
<h2>What about this :</h2>
<pre><code>import re
p = re.compile(r'_')
p.split(filename, 1) #where filename is CHEESE_CHEESE_TYPE.***
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works for me.</p>
<pre><code>import os
for afile in os.listdir('.'):
    filename, file_extension = os.path.splitext(afile)
    if not file_extension == '.xyz':
        os.rename(afile, filename + '.abc')
</code></pre>
</div>
<span class="comment-copy">Your needle is not in the haystack, your haystack has a wildcard, and even ignoring case your result cannot come from that haystack. Care to clean up the question a bit?</span>
<span class="comment-copy">Ok, I'll try to clear it up as best I can.   I have a folder of files that all are named something like cheese_cheese_type.prj (all have the same first 15 chars, but different trailing 4 chars &amp; extensions) Im trying to remove the first 8 charecters from the filename (in the example, 'cheese_' would be removed and the resulting filename would be cheese_type.prj  so what Im trying to do is walk the directory, split the file names, and remove the first 8 characters from the filename. in would be cheese_cheese_type.prj  out would be cheese_type.prj  Thanks!</span>
<span class="comment-copy">Im getting an error from windows saying it cant find the file, and it's not doing anything...any tips?</span>
<span class="comment-copy">is python in your path?</span>
<span class="comment-copy">@Jeff I found it much easier to save the script and place it in the directory I would be running it in. This way, the os.rename method works correctly. The disadvantage is you might end up renaming the script itself. Instead of using <code>.</code> as the dir, you could make a variable called <code>dir</code> and use that, then prepend <code>dir</code> to the <code>filename</code>.</span>
<span class="comment-copy">you got the "can't find file' because filename isn't the absolute path. Explicitly call path and os.path.join(path, filename) prior to calling the rename and it will work.</span>
<span class="comment-copy">its better to have full path with the filename passed to os.rename rather than just a file name only.</span>
<span class="comment-copy">overriding the builtin 'file' is generally bad practice.</span>
<span class="comment-copy">@bukzor 7 years later, I'll expand on that: "overriding builtins is generally bad practice."</span>
<span class="comment-copy">npm (JavaScript) ≠ python. One might as well link to the Perl <a href="http://search.cpan.org/~rmbarker/File-Rename-0.20/rename.PL" rel="nofollow noreferrer" title="rename">rename</a> command.</span>
<span class="comment-copy">This only works on posix systems.</span>
<span class="comment-copy">Here's another script, you can write <code>replacement_functions</code> for it, and run them, and for each of them it will show you a preview of the changes that will be made, with the differences highlighted with colors, and ask for confirmation <a href="https://gist.github.com/aljgom/81e8e4ca9584b481523271b8725448b8" rel="nofollow noreferrer">gist.github.com/aljgom/81e8e4ca9584b481523271b8725448b8</a></span>
<span class="comment-copy">This does not answer the question!</span>
