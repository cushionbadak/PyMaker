<div class="post-text" itemprop="text">
<p>What is the best way to open a file as read/write if it exists, or if it does not, then create it and open it as read/write? From what I read, <code>file = open('myfile.dat', 'rw')</code> should do this, right?</p>
<p>It is not working for me (Python 2.6.2) and I'm wondering if it is a version problem, or not supposed to work like that or what.</p>
<p>The bottom line is, I just need a solution for the problem. I am curious about the other stuff, but all I need is a nice way to do the opening part.</p>
<p>UPDATE: the enclosing directory was writeable by user and group, not other (I'm on a Linux system... so permissions 775 in other words), and the exact error was:</p>
<blockquote>
<p>IOError: no such file or directory.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>open</code> with the <code>w+</code> mode:</p>
<pre><code>file = open('myfile.dat', 'w+')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The advantage of the following approach is that the file is <strong>properly closed</strong> at the block's end, even if an exception is raised on the way. It's equivalent to <code>try-finally</code>, but much shorter.</p>
<pre><code>with open("file.dat","a+") as f:
    f.write(...)
    ...
</code></pre>
<blockquote>
<p><strong>a+</strong> Opens a file for both appending and reading. The file pointer is
  at the end of the file if the file exists. The file opens in the
  append mode. If the file does not exist, it creates a new file for
  reading and writing. -<a href="http://www.tutorialspoint.com/python/python_files_io.htm" rel="noreferrer">Python file modes</a></p>
</blockquote>
<p><a href="http://www.tutorialspoint.com/python/file_seek.htm" rel="noreferrer">seek() method</a> sets the file's current position.</p>
<pre><code>f.seek(pos [, (0|1|2)])
pos .. position of the r/w pointer
[] .. optionally
() .. one of -&gt;
  0 .. absolute position
  1 .. relative position to current
  2 .. relative position from end
</code></pre>
<blockquote>
<p>Only "rwab+" characters are allowed; there must be exactly one of "rwa" - see Stack Overflow question <em><a href="https://stackoverflow.com/a/656289/985454">Python file modes detail</a></em>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; if os.path.exists("myfile.dat"):
...     f = file("myfile.dat", "r+")
... else:
...     f = file("myfile.dat", "w")
</code></pre>
<p>r+ means read/write</p>
</div>
<div class="post-text" itemprop="text">
<p>Good practice is to use the following:</p>
<pre><code>import os

writepath = 'some/path/to/file.txt'

mode = 'a' if os.path.exists(writepath) else 'w'
with open(writepath, mode) as f:
    f.write('Hello, world!\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change "rw" to "w+"</p>
<p>Or use 'a+' for appending (not erasing existing content)</p>
</div>
<div class="post-text" itemprop="text">
<p>My answer:</p>
<pre><code>file_path = 'myfile.dat'
try:
    fp = open(file_path)
except IOError:
    # If not exists, create the file
    fp = open(file_path, 'w+')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>open('myfile.dat', 'a')</code> works for me, just fine.</p>
<p>in py3k your code raises <code>ValueError</code>:</p>
<pre><code>&gt;&gt;&gt; open('myfile.dat', 'rw')
Traceback (most recent call last):
  File "&lt;pyshell#34&gt;", line 1, in &lt;module&gt;
    open('myfile.dat', 'rw')
ValueError: must have exactly one of read/write/append mode
</code></pre>
<p>in python-2.6 it raises <code>IOError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it's <em>r+</em>, not <em>rw</em>. I'm just a starter, and that's what I've seen in the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>What do you want to do with file? Only writing to it or both read and write?</p>
<p>'w', 'a' will allow write and will create the file if it doesn't exist.</p>
<p>If you need to read from a file, the file has to be exist before open it. You can test its existence before opening it or use a try/except.</p>
</div>
<div class="post-text" itemprop="text">
<p>Put w+ for writing the file, truncating if it exist, r+ to read the file, creating one if it don't exist but not writing (and returning null) or a+ for creating a new file or appending to a existing one.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>'''
w  write mode
r  read mode
a  append mode

w+  create file if it doesn't exist and open it in write mode
r+  create file if it doesn't exist and open it in read mode
a+  create file if it doesn't exist and open it in append mode
'''
</code></pre>
<p>example:</p>
<pre><code>file_name = 'my_file.txt'
f = open(file_name, 'w+')  # open file in write mode
f.write('python rules')
f.close()
</code></pre>
<p>I hope this helps. [FYI am using python version 3.6.2</p>
</div>
<div class="post-text" itemprop="text">
<p>Since python 3.4 you <em>should</em> use <code>pathlib</code> to "touch" files.<br/>
It is a much more elegant solution than the proposed ones in this thread.</p>
<pre><code>from pathlib import Path

filename = Path('myfile.txt')
filename.touch(exist_ok=True)  # will create file, if it exists will do nothing
file = open(filename)
</code></pre>
<p>Same thing with directories:</p>
<pre><code>filename.mkdir(parents=True, exist_ok=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>import os

f_loc = r"C:\Users\Russell\Desktop\ip_addr.txt"

if not os.path.exists(f_loc):
    open(f_loc, 'w').close()

with open(f_loc) as f:
    #Do stuff
</code></pre>
<p>Make sure you close the files after you open them. The <code>with</code> context manager will do this for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to open it to read and write, I'm assuming you don't want to truncate it as you open it and you want to be able to read the file right after opening it. So this is the solution I'm using:</p>
<pre><code>file = open('myfile.dat', 'a+')
file.seek(0, 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os, platform
os.chdir('c:\\Users\\MS\\Desktop')

try :
    file = open("Learn Python.txt","a")
    print('this file is exist')
except:
    print('this file is not exist')
file.write('\n''Hello Ashok')

fhead = open('Learn Python.txt')

for line in fhead:

    words = line.split()
print(words)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So You want to write data to a file, but only if it doesn’t already exist?.</p>
<p>This problem is easily solved by using the little-known x mode to open() instead of the usual w mode. For example:</p>
<pre><code> &gt;&gt;&gt; with open('somefile', 'wt') as f:
 ...     f.write('Hello\n')
...
&gt;&gt;&gt; with open('somefile', 'xt') as f:
...     f.write('Hello\n')
...
 Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
FileExistsError: [Errno 17] File exists: 'somefile'
  &gt;&gt;&gt;
</code></pre>
<p>If the file is binary mode, use mode xb instead of xt.</p>
</div>
<span class="comment-copy">As S.Mark mentioned, this should "just work". Is the enclosing directory writeable?</span>
<span class="comment-copy">"it is not working for me "?  What does that mean, specifically?  Please provide the actual error message.</span>
<span class="comment-copy">muksie's answer below worked (and baloo's too for that matter), but just for completeness, the enclosing dir was writable by user and group, not other (im on a linux system... so permissions 775 in other words), and the exact error was IOError: no such file or directory. thanks for the help guys.</span>
<span class="comment-copy">@S.Lott: done. sorry about that.</span>
<span class="comment-copy"><code>w</code> truncates existing file. docs: <i>Modes <code>'r+'</code>, <code>'w+'</code> and <code>'a+'</code> open the file for updating (note that <code>'w+'</code> truncates the file).</i></span>
<span class="comment-copy">this did the trick. thank you. i feel like an idiot now for not reading the spec. i dont think 'rw' is even acceptable there. i must have been thinking of something else.</span>
<span class="comment-copy">Note that a+ creates a file if it does not exist and, crucially, seeks the file to the end. So if you do a read immediately after opening this way, you'll get nothing. You need to seek back to the beginning first: f.seek(0)</span>
<span class="comment-copy"><a href="http://docs.python.org/library/functions.html#open" rel="nofollow noreferrer">For the verbose, example-less documentation</a></span>
<span class="comment-copy">This is not the solution. The <b>problem is the directory</b>. Either the script lacks the permissions to create a file in that directory, or the directory simply doesn't exist. <code>open('myfile.dat', 'w')</code> is then enough.</span>
<span class="comment-copy">I try this with open(filename, 'a+') as myfile: and get IOError: [Errno 2] No such file or directory: - why it doesn't create the file?</span>
<span class="comment-copy">@Loretta Have you checked the value of <code>filename</code>?</span>
<span class="comment-copy">Yes, I did. It is a unicode string. I also tried with open('{}.txt'.format(filename), 'a+') as myfile:</span>
<span class="comment-copy">I am not using a path. and I tried open('test.txt', 'a+') it gets following exception 'TypeError: coercing to Unicode: need string or buffer, file found' in the line if os.stat(myfile).st_size == 0:</span>
<span class="comment-copy">@Loretta <code>os.stat()</code> accepts a path/filename, not an opened file. <a href="https://docs.python.org/2/library/os.html#os.stat" rel="nofollow noreferrer">See here.</a></span>
<span class="comment-copy">This is Unpythonic. Rather than <a href="http://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">checking if the file exists first</a>, one should <a href="http://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">assume it does first, then handle the case that it doesn't</a>.</span>
<span class="comment-copy">even worse, this code is prone to a race condition. thus, after checking if the file exists, the process could be interrupted and another process could create this file.</span>
<span class="comment-copy">You would also need the "w+" flag so both files will be in a read and write modes.</span>
<span class="comment-copy">It is bad to test a file before opening it, as it can lead to race conditions (file is deleted before it is opened). Race conditions can sometimes be used to exploit vulnerabilities in a system. "a+" mode is the best way to open the file: it creates a new file, and appends to existing files. Do not forget to wrap this in a try/except.</span>
<span class="comment-copy">Testing for existence before opening might introduce a race condition. Probably not a big deal in this case, but something to keep in mind.</span>
<span class="comment-copy">"If you need to read from a file, the file has to be exist before you open it." Thank you for saving my sanity.</span>
