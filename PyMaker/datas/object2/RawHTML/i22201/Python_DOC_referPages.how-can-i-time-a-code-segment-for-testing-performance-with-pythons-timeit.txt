<div class="post-text" itemprop="text">
<p>I've a python script which works just as it should, but I need to write the execution time. I've googled that I should use <a href="https://docs.python.org/2/library/timeit.html" rel="noreferrer"><code>timeit</code></a> but I can't seem to get it to work.</p>
<p>My Python script looks like this:</p>
<pre><code>import sys
import getopt
import timeit
import random
import os
import re
import ibm_db
import time
from string import maketrans
myfile = open("results_update.txt", "a")

for r in range(100):
    rannumber = random.randint(0, 100)

    update = "update TABLE set val = %i where MyCount &gt;= '2010' and MyCount &lt; '2012' and number = '250'" % rannumber
    #print rannumber

    conn = ibm_db.pconnect("dsn=myDB","usrname","secretPWD")

for r in range(5):
    print "Run %s\n" % r        
    ibm_db.execute(query_stmt)
 query_stmt = ibm_db.prepare(conn, update)

myfile.close()
ibm_db.close(conn)
</code></pre>
<p>What I need is the time it takes to execute the query and write it to the file <code>results_update.txt</code>. The purpose is to test an update statement for my database with different indexes and tuning mechanisms.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/time.html#time.time" rel="noreferrer"><code>time.time()</code></a> or <a href="https://docs.python.org/3/library/time.html#time.clock" rel="noreferrer"><code>time.clock()</code></a> before and after the block you want to time.</p>
<pre><code>import time

t0 = time.time()
code_block
t1 = time.time()

total = t1-t0
</code></pre>
<p>This method is not as exact as <a href="https://docs.python.org/3/library/timeit.html" rel="noreferrer"><code>timeit</code></a> (it does not average several runs) but it is straightforward. </p>
<p><code>time.time()</code> (in Windows and Linux) and <code>time.clock()</code> (in Linux) are not precise enough for fast functions (you get total = 0). In this case or if you want to average the time elapsed by several runs, you have to manually call the function multiple times (As I think you already do in you example code and timeit does automatically when you set its <em>number</em> argument)</p>
<pre><code>import time

def myfast():
   code

n = 10000
t0 = time.time()
for i in range(n): myfast()
t1 = time.time()

total_n = t1-t0
</code></pre>
<p>In Windows, as Corey stated in the comment, <code>time.clock()</code> has much higher precision (microsecond instead of second) and is preferred over <code>time.time()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are profiling your code and can use IPython, it has the magic function <code>%timeit</code>.</p>
<p><code>%%timeit</code> operates on cells.</p>
<pre><code>In [2]: %timeit cos(3.14)
10000000 loops, best of 3: 160 ns per loop

In [3]: %%timeit
   ...: cos(3.14)
   ...: x = 2 + 3
   ...: 
10000000 loops, best of 3: 196 ns per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Quite apart from the timing, this code you show is simply incorrect: you execute 100 connections (completely ignoring all but the last one), and then when you do the first execute call you pass it a local variable <code>query_stmt</code> which you only initialize <em>after</em> the execute call.</p>
<p>First, make your code correct, without worrying about timing yet: i.e. a function that makes or receives a connection and performs 100 or 500 or whatever number of updates on that connection, then closes the connection. Once you have your code working correctly is the correct point at which to think about using <code>timeit</code> on it!</p>
<p>Specifically, if the function you want to time is a parameter-less one called <code>foobar</code> you can use <a href="http://docs.python.org/library/timeit.html?highlight=timeit#timeit.timeit" rel="noreferrer">timeit.timeit</a> (2.6 or later -- it's more complicated in 2.5 and before):</p>
<pre><code>timeit.timeit('foobar()', number=1000)
</code></pre>
<p>You'd better specify the number of runs because the default, a million, may be high for your use case (leading to spending a lot of time in this code;-).</p>
</div>
<div class="post-text" itemprop="text">
<p>Focus on <em>one specific thing</em>. Disk I/O is slow, so I'd take that out of the test if all you are going to tweak is the database query.</p>
<p>And if you need to time your database execution, look for database tools instead, like asking for the query plan, and note that performance varies not only with the exact query and what indexes you have, but also with the data load (how much data you have stored).</p>
<p>That said, you can simply put your code in a function and run that function with <a href="https://docs.python.org/2/library/timeit.html#timeit.timeit" rel="noreferrer"><code>timeit.timeit()</code></a>:</p>
<pre><code>def function_to_repeat():
    # ...

duration = timeit.timeit(function_to_repeat, number=1000)
</code></pre>
<p>This would disable the garbage collection, repeatedly call the <code>function_to_repeat()</code> function, and time the total duration of those calls using <a href="https://docs.python.org/2/library/timeit.html#timeit.default_timer" rel="noreferrer"><code>timeit.default_timer()</code></a>, which is the most accurate available clock for your specific platform.</p>
<p>You should move setup code <em>out</em> of the repeated function; for example, you should connect to the database first, then time only the queries. Use the <code>setup</code> argument to either import or create those dependencies, and pass them into your function:</p>
<pre><code>def function_to_repeat(var1, var2):
    # ...

duration = timeit.timeit(
    'function_to_repeat(var1, var2)',
    'from __main__ import function_to_repeat, var1, var2', 
    number=1000)
</code></pre>
<p>would grab the globals <code>function_to_repeat</code>, <code>var1</code> and <code>var2</code> from your script and pass those to the function each repetition. </p>
</div>
<div class="post-text" itemprop="text">
<p>I see the question has already been answered, but still want to add my 2 cents for the same.</p>
<p>I have also faced similar scenario in which I have to test the execution times for several approaches and hence written a small script, which calls timeit on all functions written in it.</p>
<p>The script is also available as github gist <a href="https://gist.github.com/abhijitmamarde/0af8c54bfff21c6a3d65" rel="nofollow noreferrer">here</a>.</p>
<p>Hope it will help you and others.</p>
<pre><code>from random import random
import types

def list_without_comprehension():
    l = []
    for i in xrange(1000):
        l.append(int(random()*100 % 100))
    return l

def list_with_comprehension():
    # 1K random numbers between 0 to 100
    l = [int(random()*100 % 100) for _ in xrange(1000)]
    return l


# operations on list_without_comprehension
def sort_list_without_comprehension():
    list_without_comprehension().sort()

def reverse_sort_list_without_comprehension():
    list_without_comprehension().sort(reverse=True)

def sorted_list_without_comprehension():
    sorted(list_without_comprehension())


# operations on list_with_comprehension
def sort_list_with_comprehension():
    list_with_comprehension().sort()

def reverse_sort_list_with_comprehension():
    list_with_comprehension().sort(reverse=True)

def sorted_list_with_comprehension():
    sorted(list_with_comprehension())


def main():
    objs = globals()
    funcs = []
    f = open("timeit_demo.sh", "w+")

    for objname in objs:
        if objname != 'main' and type(objs[objname]) == types.FunctionType:
            funcs.append(objname)
    funcs.sort()
    for func in funcs:
        f.write('''echo "Timing: %(funcname)s"
python -m timeit "import timeit_demo; timeit_demo.%(funcname)s();"\n\n
echo "------------------------------------------------------------"
''' % dict(
                funcname = func,
                )
            )

    f.close()

if __name__ == "__main__":
    main()

    from os import system

    #Works only for *nix platforms
    system("/bin/bash timeit_demo.sh")

    #un-comment below for windows
    #system("cmd timeit_demo.sh")
</code></pre>
</div>
<span class="comment-copy">Was / is your question specific about <code>timeit</code>? I guess not. In that case, you should probably remove "with Pythons timeit" from the title.</span>
<span class="comment-copy">fyi on windows, use time.clock() instead of time.time()</span>
<span class="comment-copy">Thanks Corey, why? because clock is more precise (microseconds) or there is something more?</span>
<span class="comment-copy">You can use timeit.default_timer() to make your code platform independent; it returns either time.clock() or time.time() as appropriate for the OS.</span>
<span class="comment-copy">Rather than select a clock by hand, use <a href="https://docs.python.org/2/library/timeit.html#timeit.default_timer" rel="nofollow noreferrer"><code>timeit.default_timer</code></a>; Python has already done the work for you. But really, you should use <code>timeit.timeit(myfast, number=n)</code> instead of re-inventing the repetitive call wheel (and miss the fact that <code>timeit</code> disables the garbage collector while running the code repeatedly).</span>
<span class="comment-copy">update: time.clock() is now deprecated. You should now use time.time(). Actually, since version 3.3, the best option would be time.perf_counter()</span>
<span class="comment-copy">After struggling with this for the last few mintues I want to let future viewers know that you also probably want to pass a setup variable if your function <code>foobar</code> is in a main file.  Like this:  <code>timeit.timeit('foobar()','from __main__ import foobar',number=1000)</code></span>
<span class="comment-copy">In Python 2.7.8, you could simply use <code>timeit.timeit( foobar, number=1000 )</code></span>
<span class="comment-copy">Putting the code into a function is a step I was looking for -since simply making code a string and <code>eval</code>ing is not going to fly for anything not completely trivial. thx</span>
