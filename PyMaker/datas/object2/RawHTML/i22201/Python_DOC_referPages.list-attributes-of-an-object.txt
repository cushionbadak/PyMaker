<div class="post-text" itemprop="text">
<p>Is there a way to grab a list of attributes that exist on instances of a class?</p>
<pre><code>class new_class():
    def __init__(self, number):
        self.multi = int(number) * 2
        self.str = str(number)

a = new_class(2)
print(', '.join(a.SOMETHING))
</code></pre>
<p>The desired result is that "multi, str" will be output.  I want this to see the current attributes from various parts of a script.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; class new_class():
...   def __init__(self, number):
...     self.multi = int(number) * 2
...     self.str = str(number)
... 
&gt;&gt;&gt; a = new_class(2)
&gt;&gt;&gt; a.__dict__
{'multi': 4, 'str': '2'}
&gt;&gt;&gt; a.__dict__.keys()
dict_keys(['multi', 'str'])
</code></pre>
<p>You may also find <a href="http://docs.python.org/py3k/library/pprint.html" rel="noreferrer">pprint</a> helpful.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>dir(instance)
# or (same value)
instance.__dir__()
# or
instance.__dict__
</code></pre>
<p>Then you can test what type is with <code>type()</code> or if is a method with <code>callable()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>vars(obj)</code> returns the attributes of an object.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; ', '.join(i for i in dir(a) if not i.startswith('__'))
'multi, str'
</code></pre>
<p>This of course will print any methods or attributes in the class definition. You can exclude "private" methods by changing <code>i.startwith('__')</code> to <code>i.startwith('_')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3.5/library/inspect.html" rel="noreferrer">inspect</a> module provides easy ways to inspect an object: </p>
<blockquote>
<p>The inspect module provides several useful functions to help get
  information about live objects such as modules, classes, methods,
  functions, tracebacks, frame objects, and code objects. </p>
</blockquote>
<hr/>
<p>Using <code>getmembers()</code> you can see all attributes of your class, along with their value. To exclude private or protected attributes use <code>.startswith('_')</code>. To exclude methods or functions use <code>inspect.ismethod()</code> or <code>inspect.isfunction()</code>. </p>
<pre><code>import inspect


class NewClass(object):
    def __init__(self, number):
        self.multi = int(number) * 2
        self.str = str(number)

    def func_1(self):
        pass


a = NewClass(2)

for i in inspect.getmembers(a):
    # Ignores anything starting with underscore 
    # (that is, private and protected attributes)
    if not i[0].startswith('_'):
        # Ignores methods
        if not inspect.ismethod(i[1]):
            print(i)
</code></pre>
<p>Note that <code>ismethod()</code> is used on the second element of <code>i</code> since the first is simply a string (its name). </p>
<p><sub>Offtopic: Use <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="noreferrer">CamelCase</a> for class names.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>What do you want this for? It may be hard to get you the best answer without knowing your exact intent.</p>
<ul>
<li><p>It is almost always better to do this manually if you want to display an instance of your class in a specific way. This will include exactly what you want and not include what you don't want, and the order will be predictable. </p>
<p>If you are looking for a way to display the content of a class, manually format the attributes you care about and provide this as the <code>__str__</code> or <code>__repr__</code> method for your class.</p></li>
<li><p>If you want to learn about what methods and such exist for an object to understand how it works, use <code>help</code>. <code>help(a)</code> will show you a formatted output about the object's class based on its docstrings.</p></li>
<li><p><code>dir</code> exists for programatically getting all the attributes of an object. (Accessing <code>__dict__</code> does something I would group as the same but that I wouldn't use myself.) However, this may not include things you want and it may include things you do not want. It is unreliable and people think they want it a lot more often than they do.</p></li>
<li><p>On a somewhat orthogonal note, there is very little support for Python 3 at the current time. If you are interested in writing real software you are going to want third-party stuff like numpy, lxml, Twisted, PIL, or any number of web frameworks that do not yet support Python 3 and do not have plans to any time too soon. The differences between 2.6 and the 3.x branch are small, but the difference in library support is huge.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>It's often mentioned that to list a complete list of attributes you should use <code>dir()</code>. Note however that contrary to popular belief <code>dir()</code> does not bring out <em>all</em> attributes. For example you might notice that <code>__name__</code> might be missing from a class's <code>dir()</code> listing even though you can access it from the class itself. From the doc on <code>dir()</code> (<a href="https://docs.python.org/2/library/functions.html#dir">Python 2</a>, <a href="https://docs.python.org/3/library/functions.html#dir">Python 3</a>):</p>
<blockquote>
<p>Because dir() is supplied primarily as a convenience for use at an
  interactive prompt, it tries to supply an interesting set of names
  more than it tries to supply a rigorously or consistently defined set
  of names, and its detailed behavior may change across releases. For
  example, metaclass attributes are not in the result list when the
  argument is a class.</p>
</blockquote>
<p>A function like the following tends to be more complete, although there's no guarantee of completeness since the list returned by <code>dir()</code> can be affected by many factors including implementing the <code>__dir__()</code> method, or customizing <code>__getattr__()</code> or <code>__getattribute__()</code> on the class or one of its parents. See provided links for more details.</p>
<pre><code>def dirmore(instance):
    visible = dir(instance)
    visible += [a for a in set(dir(type)).difference(visible)
                if hasattr(instance, a)]
    return sorted(visible)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please see the python shell script which has been executed in sequence, here you will get the attributes of a class in string format separated by comma.</p>
<pre><code>&gt;&gt;&gt; class new_class():
...     def __init__(self, number):
...         self.multi = int(number)*2
...         self.str = str(number)
... 
&gt;&gt;&gt; a = new_class(4)
&gt;&gt;&gt; ",".join(a.__dict__.keys())
'str,multi'&lt;br/&gt;
</code></pre>
<p>I am using python 3.4</p>
</div>
<div class="post-text" itemprop="text">
<p>All previous answers are correct, you have three options for what you are asking </p>
<p>1.<a href="https://docs.python.org/3/library/functions.html#dir" rel="noreferrer" title="dir()">dir()</a></p>
<p>2.<a href="https://docs.python.org/3/library/functions.html#vars" rel="noreferrer">vars()</a></p>
<p>3.<a href="https://docs.python.org/3/library/stdtypes.html#object.__dict__" rel="noreferrer" title="__dict__">__dict__</a></p>
<pre><code>&gt;&gt;&gt; dir(a)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'multi', 'str']
&gt;&gt;&gt; vars(a)
{'multi': 4, 'str': '2'}
&gt;&gt;&gt; a.__dict__
{'multi': 4, 'str': '2'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is more than one way to do it:</p>
<pre><code>#! /usr/bin/env python3
#
# This demonstrates how to pick the attiributes of an object

class C(object) :

  def __init__ (self, name="q" ):
    self.q = name
    self.m = "y?"

c = C()

print ( dir(c) )
</code></pre>
<p>When run, this code produces:</p>
<pre><code>jeffs@jeff-desktop:~/skyset$ python3 attributes.py 
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__',      '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'm', 'q']

jeffs@jeff-desktop:~/skyset$
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>dir(your_object)</code> to get the attributes and <code>getattr(your_object, your_object_attr)</code> to get the values</p>
<p>usage :</p>
<pre><code>for att in dir(your_object):
    print (att, getattr(your_object,att))
</code></pre>
<p>This is particularly useful if your object have no __dict__. If that is not the case you can try var(your_object) also</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>attributes_list = [attribute for attribute in dir(obj) if attribute[0].islower()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please see the following Python shell scripting execution in sequence, it will give the solution from creation of class to extracting the field names of instances.</p>
<pre><code>&gt;&gt;&gt; class Details:
...       def __init__(self,name,age):
...           self.name=name
...           self.age =age
...       def show_details(self):
...           if self.name:
...              print "Name : ",self.name
...           else:
...              print "Name : ","_"
...           if self.age:
...              if self.age&gt;0:
...                 print "Age  : ",self.age
...              else:
...                 print "Age can't be -ve"
...           else:
...              print "Age  : ","_"
... 
&gt;&gt;&gt; my_details = Details("Rishikesh",24)
&gt;&gt;&gt; 
&gt;&gt;&gt; print my_details
&lt;__main__.Details instance at 0x10e2e77e8&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; print my_details.name
Rishikesh
&gt;&gt;&gt; print my_details.age
24
&gt;&gt;&gt; 
&gt;&gt;&gt; my_details.show_details()
Name :  Rishikesh
Age  :  24
&gt;&gt;&gt; 
&gt;&gt;&gt; person1 = Details("",34)
&gt;&gt;&gt; person1.name
''
&gt;&gt;&gt; person1.age
34
&gt;&gt;&gt; person1.show_details
&lt;bound method Details.show_details of &lt;__main__.Details instance at 0x10e2e7758&gt;&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; person1.show_details()
Name :  _
Age  :  34
&gt;&gt;&gt;
&gt;&gt;&gt; person2 = Details("Rob Pike",0)
&gt;&gt;&gt; person2.name
'Rob Pike'
&gt;&gt;&gt; 
&gt;&gt;&gt; person2.age
0
&gt;&gt;&gt; 
&gt;&gt;&gt; person2.show_details()
Name :  Rob Pike
Age  :  _
&gt;&gt;&gt; 
&gt;&gt;&gt; person3 = Details("Rob Pike",-45)
&gt;&gt;&gt; 
&gt;&gt;&gt; person3.name
'Rob Pike'
&gt;&gt;&gt; 
&gt;&gt;&gt; person3.age
-45
&gt;&gt;&gt; 
&gt;&gt;&gt; person3.show_details()
Name :  Rob Pike
Age can't be -ve
&gt;&gt;&gt;
&gt;&gt;&gt; person3.__dict__
{'age': -45, 'name': 'Rob Pike'}
&gt;&gt;&gt;
&gt;&gt;&gt; person3.__dict__.keys()
['age', 'name']
&gt;&gt;&gt;
&gt;&gt;&gt; person3.__dict__.values()
[-45, 'Rob Pike']
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As written before using <code>obj.__dict__</code> can handle common cases but some classes do not have the <code>__dict__</code> attribute and use <a href="https://docs.python.org/2/reference/datamodel.html#slots" rel="nofollow noreferrer"><code>__slots__</code></a> (mostly for memory efficiency).</p>
<p>example for a more resilient way of doing this:</p>
<pre><code>class A(object):
    __slots__ = ('x', 'y', )
    def __init__(self, x, y):
        self.x = x
        self.y = y


class B(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y


def get_object_attrs(obj):
    try:
        return obj.__dict__
    except AttributeError:
        return {attr: getattr(obj, attr) for attr in obj.__slots__}


a = A(1,2)
b = B(1,2)
assert not hasattr(a, '__dict__')

print(get_object_attrs(a))
print(get_object_attrs(b))
</code></pre>
<p>this code's output:</p>
<pre><code>{'x': 1, 'y': 2}
{'x': 1, 'y': 2}
</code></pre>
<p><strong>Note1:</strong><br/>
Python is a dynamic language and it is always better knowing the classes you trying to get the attributes from as even this code can miss some cases.</p>
<p><strong>Note2:</strong><br/>
this code outputs only instance variables meaning class variables are not provided. for example:</p>
<pre><code>class A(object):
    url = 'http://stackoverflow.com'
    def __init__(self, path):
        self.path = path

print(A('/questions').__dict__)
</code></pre>
<p>code outputs:</p>
<pre><code>{'path': '/questions'}
</code></pre>
<p>This code does not print the <code>url</code> class attribute and might omit wanted class attributes.<br/>
Sometimes we might think an attribute is an instance member but it is not and won't be shown using this example.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__attr__</code> gives the list of attributes of an instance.</p>
<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r=requests.get('http://www.google.com')
&gt;&gt;&gt; r.__attrs__
['_content', 'status_code', 'headers', 'url', 'history', 'encoding', 'reason', 'cookies', 'elapsed', 'request']
&gt;&gt;&gt; r.url
'http://www.google.com/'
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Virtually everyone in Python names their classes like <code>NewClass</code>. You may defy people's expectations if you use a naming convention like <code>new_class</code>.</span>
<span class="comment-copy">Even though it is human-interactive and cannot be programatically used, <code>help()</code> function helps for getting info on classes, functions, builtins, modules, and more</span>
<span class="comment-copy">Relevant: <a href="http://stackoverflow.com/questions/1398022/looping-over-all-member-variables-of-a-class-in-python" title="looping over all member variables of a class in python">stackoverflow.com/questions/1398022/…</a></span>
<span class="comment-copy">The issue of <b>dict</b> usage just showed up on r/python.  someone pointed out that vars(a) is equivalent to a.__dict__</span>
<span class="comment-copy">In case anyone is wondering, this works on Python 2.7 as well</span>
<span class="comment-copy">To be specific, <code>pprint.pprint(a.__dict__)</code> does a pretty-print on the attributes.</span>
<span class="comment-copy">Definitely that <code>pprint</code> does NOT work on Python 2.6.</span>
<span class="comment-copy">Note that this only works for user-defined classes, not for built-in or extension types.</span>
<span class="comment-copy"><code>callable</code> doesn't exist in py3k</span>
<span class="comment-copy">(And probably shouldn't be used in Python 2.)</span>
<span class="comment-copy">dir worked better on classes with overloaded attribute get/set</span>
<span class="comment-copy">this is great for debugging code quickly, +1.</span>
<span class="comment-copy">dir(instance) lists a lot of things that you are probably not interested in</span>
<span class="comment-copy">Only works for <b>dict</b> attributes.</span>
<span class="comment-copy">I'd just to point out that five years later (now), I believe all the third party modules that you mention support python3. Source: <a href="https://python3wos.appspot.com/" rel="nofollow noreferrer">python3wos.appspot.com</a></span>
<span class="comment-copy">And if you want only the list can use just <code>a.__dict__.keys()</code>. However if you want to know if an object has a specific attribute you can use <a href="http://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python"><code>hasattr</code></a>.</span>
<span class="comment-copy">Why this answer has been downvoted? For debugging purpose, dir works pretty well!</span>
<span class="comment-copy">Pretty works with Python 2.7.x. Exactly what I wanted.</span>
<span class="comment-copy">It does not work with class attribute names starting with a capital letter or single underscore.</span>
<span class="comment-copy">We can also check for the callablilty of each attributes.visit <a href="http://stackoverflow.com/questions/1398022/looping-over-all-member-variables-of-a-class-in-python?noredirect=1&amp;lq=1" title="looping over all member variables of a class in python">stackoverflow.com/questions/1398022/…</a></span>
<span class="comment-copy">Doesn't always work. Also, you write <code>__attr__</code> in the description but use <code>__attrs__</code> in the code. Neither worked for me (werkzeug.datastructures.FileStorage)</span>
