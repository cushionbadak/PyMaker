<div class="post-text" itemprop="text">
<p>Is there a way to generate random letters in Python (like random.randint but for letters)? The range functionality of random.randint would be nice but having a generator that just outputs a random letter would be better than nothing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.choice(string.ascii_letters)
'j'
</code></pre>
<p><a href="https://docs.python.org/3/library/string.html#string.ascii_letters" rel="noreferrer"><code>string.ascii_letters</code></a> returns a string containing the lower case and upper case letters according to the current locale.</p>
<p><a href="http://docs.python.org/library/random.html#random.choice" rel="noreferrer"><code>random.choice</code></a> returns a single, random element from a sequence.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; import string
&gt;&gt;&gt; random.choice(string.ascii_letters)
'g'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt;def random_char(y):
       return ''.join(random.choice(string.ascii_letters) for x in range(y))

&gt;&gt;&gt;print (random_char(5))
&gt;&gt;&gt;fxkea
</code></pre>
<p>to generate y number of random characters </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; import string    
&gt;&gt;&gt; random.choice(string.ascii_lowercase)
'b'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way, for completeness:</p>
<pre><code>&gt;&gt;&gt; chr(random.randrange(97, 97 + 26))
</code></pre>
<p>Use the fact that <code>ascii</code> 'a' is 97, and there are 26 letters in the alphabet.</p>
<p>When determining the upper and lower bound of the <code>random.randrange()</code> function call, remember that <code>random.randrange()</code> is exclusive on its upper bound, meaning it will only ever generate an integer up to 1 unit less that the provided value.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def randchar(a, b):
    return chr(random.randint(ord(a), ord(b)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random
def guess_letter():
    return random.choice('abcdefghijklmnopqrstuvwxyz')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just make a list:</p>
<pre><code>import random
list1=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
b=random.randint(0,7)
print(list1[b])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use this to get one or more random letter(s)</p>
<pre><code>import random
import string
random.seed(10)
letters = string.ascii_lowercase
rand_letters = random.choices(letters,k=5) # where k is the number of required rand_letters

print(letters)

['o', 'l', 'p', 'f', 'v']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string
import random

KEY_LEN = 20

def base_str():
    return (string.letters+string.digits)   
def key_gen():
    keylist = [random.choice(base_str()) for i in range(KEY_LEN)]
    return ("".join(keylist))
</code></pre>
<p>You can get random strings like this:</p>
<pre><code>g9CtUljUWD9wtk1z07iF
ndPbI1DDn6UvHSQoDMtd
klMFY3pTYNVWsNJ6cs34
Qgr7OEalfhXllcFDGh2l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def create_key(key_len):
    key = ''
    valid_characters_list = string.letters + string.digits
    for i in range(key_len):
        character = choice(valid_characters_list)
        key = key + character
    return key

def create_key_list(key_num):
    keys = []
    for i in range(key_num):
        key = create_key(key_len)
        if key not in keys:
            keys.append(key)
    return keys
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All previous answers are correct, if you are looking for random characters of various types (i.e. alphanumeric and special characters) then here is an script that I created to demonstrate various types of creating random functions, it has three functions one for numbers, alpha- characters and special characters. The script simply generates passwords and is just an example to demonstrate various ways of generating random characters. </p>
<pre><code>import string
import random
import sys

#make sure it's 3.7 or above
print(sys.version)

def create_str(str_length):
    return random.sample(string.ascii_letters, str_length)

def create_num(num_length):
    digits = []
    for i in range(num_length):
        digits.append(str(random.randint(1, 100)))

    return digits

def create_special_chars(special_length):
    stringSpecial = []
    for i in range(special_length):
        stringSpecial.append(random.choice('!$%&amp;()*+,-.:;&lt;=&gt;?@[]^_`{|}~'))

    return stringSpecial

print("how many characters would you like to use ? (DO NOT USE LESS THAN 8)")
str_cnt = input()
print("how many digits would you like to use ? (DO NOT USE LESS THAN 2)")
num_cnt = input()
print("how many special characters would you like to use ? (DO NOT USE LESS THAN 1)")
s_chars_cnt = input()
password_values = create_str(int(str_cnt)) +create_num(int(num_cnt)) + create_special_chars(int(s_chars_cnt))

#shuffle/mix the values
random.shuffle(password_values)

print("generated password is: ")
print(''.join(password_values))
</code></pre>
<p><strong>Result:</strong></p>
<p><a href="https://i.stack.imgur.com/2ckjw.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2ckjw.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use</p>
<pre><code>map(lambda a : chr(a),  np.random.randint(low=65, high=90, size=4))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>well, this is my answer! It works well. Just put the number of random letters you want in 'number'... (Python 3)</p>
<pre><code>import random

def key_gen():
    keylist = random.choice('abcdefghijklmnopqrstuvwxyz')
    return keylist

number = 0
list_item = ''
while number &lt; 20:
    number = number + 1
    list_item = list_item + key_gen()

print(list_item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string
import random

def random_char(y):
    return ''.join(random.choice(string.ascii_letters+string.digits+li) for x in range(y))
no=int(input("Enter the number of character for your password=  "))
li = random.choice('!@#$%^*&amp;( )_+}{')
print(random_char(no)+li)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My overly complicated piece of code:</p>
<pre><code>import random

letter = (random.randint(1,26))
if letter == 1:
   print ('a')
elif letter == 2:
    print ('b')
elif letter == 3:
    print ('c')
elif letter == 4:
    print ('d')
elif letter == 5:
    print ('e')
elif letter == 6:
    print ('f')
elif letter == 7:
    print ('g')
elif letter == 8:
    print ('h')
elif letter == 9:
    print ('i')
elif letter == 10:
    print ('j')
elif letter == 11:
    print ('k')
elif letter == 12:
    print ('l')
elif letter == 13:
    print ('m')
elif letter == 14:
    print ('n')
elif letter == 15:
    print ('o')
elif letter == 16:
    print ('p')
elif letter == 17:
    print ('q')
elif letter == 18:
    print ('r')
elif letter == 19:
    print ('s')
elif letter == 20:
    print ('t')
elif letter == 21:
    print ('u')
elif letter == 22:
    print ('v')
elif letter == 23:
    print ('w')
elif letter == 24:
    print ('x')
elif letter == 25:
    print ('y')
elif letter == 26:
    print ('z')
</code></pre>
<p>It basically generates a random number out of 26 and then converts into its corresponding letter. This could defiantly be improved but I am only a beginner and I am proud of this piece of code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this can help you:</p>
<pre><code>import random
for a in range(64,90):
    h = random.randint(64, a)
    e += chr(h)
print e
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Place a python on the keyboard and let him roll over the letters until you find your preferd random combo                  Just kidding!</p>
<pre><code>import string #This was a design above but failed to print. I remodled it.
import random
irandom = random.choice(string.ascii_letters) 
print irandom
</code></pre>
</div>
<span class="comment-copy">It's actually string.ascii_lowercase or string.ascii_uppercase.</span>
<span class="comment-copy">string.letters disappeared after python 2.6. In python 3.1 you must use string.ascii_letters that is also present in python 2.6</span>
<span class="comment-copy">Often, I need a string of randoms, here's that (after <code>from string import ascii_letters, digits</code> and <code>from random import choice</code>): <code>''.join([choice(ascii_letters + digits) for i in range(32)])</code></span>
<span class="comment-copy">@joaquin string.letters is present in python 2.7.7.</span>
<span class="comment-copy">This can be lower or uppercase. Not sure if that is what is needed.</span>
<span class="comment-copy">@TaylorLeese, as I have known that there are three options including <code>ascii_letters</code>, <code>ascii_uppercase</code>, and <code>ascii_lowercase</code>.</span>
<span class="comment-copy">also: <code>''.join(random.sample(string.ascii_lowercase,5))</code></span>
<span class="comment-copy">@Dannid Doesn't <code>random.sample()</code> return a <i>unique</i> set of values from the input, which is not the same as <code>random.choice()</code>?</span>
<span class="comment-copy">Yes, though if you're choosing just one letter that doesn't make a difference Furthermore, you may want 5 unique letters - the OP didn't specify, and both <code>random.choice</code> and <code>random.randint</code> return a single value. You can also use <code>numpy.random.choice</code> to give a unique set if you add replace=False, like so: <code>numpy.random.choice(string.ascii_lowercase, size=5, replace=False)</code></span>
<span class="comment-copy">That depends on what alphabet we're talking about ;-)</span>
<span class="comment-copy">shouldn't it be <code>chr(random.randrange(97, 97 + 26 - 1))</code>?</span>
<span class="comment-copy">@zhongxiao37 Really, it should be <code>chr(random.randrange(97, 97 + 26)</code>. <code>random.randrange()</code> is exclusive on its upper bound, meaning that in order to get the whole range of characters <code>97 - 122</code>, the argument passed must be <code>123</code>.</span>
<span class="comment-copy">@KieranMoynihan Thanks for sharing. I double checked that and you're right. Now I see why <code>97 + 26</code> is used.</span>
<span class="comment-copy">It would improve the quality of your answer if you put some information as to what you've done.  Also as this question has an accepted answer, why your solution is any different.</span>
<span class="comment-copy">@NigelRen what is the distribution of <code>random.choices</code> ?</span>
<span class="comment-copy">You should format and describe your answer</span>
<span class="comment-copy">your answer needs improvement and is not very functional.</span>
<span class="comment-copy">in your case you can simply do <code>print(chr(96 + letter))</code>, no <code>if</code>-<code>elif</code> hell is needed</span>
<span class="comment-copy">Welcome to Stack Overflow! While this is a good answer it is <i>identical</i> to the already posted and accepted answer by @MarkRushakoff, answered two years ago. Please review the answers before you post so we can keep the signal to noise ratio down.</span>
