<div class="post-text" itemprop="text">
<p>If there are several methods in the test class, I found that the order to execute is alphabetical. But I want to customize the order of execution. How to define the execution order?</p>
<p>For example: testTestA will be loaded first than testTestB.</p>
<pre><code>class Test(TestCase):
    def setUp(self):
        ...

    def testTestB(self):
        #test code

    def testTestA(self):
        #test code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A tenet of unit-testing is that each test should be independent of all others.
If in your case the code in testTestA must come before testTestB, then you could
combine both into one test:</p>
<pre><code>def testTestA_and_TestB(self):
    # test code from testTestA
    ...
    # test code from testTestB
</code></pre>
<p>or, perhaps better would be </p>
<pre><code>def TestA(self):
    # test code
def TestB(self):
    # test code
def test_A_then_B(self):
    self.TestA()
    self.TestB()
</code></pre>
<p>The <code>Test</code> class only tests those methods who name begins with a lower-case <code>test...</code>. 
So you can put in extra helper methods <code>TestA</code> and <code>TestB</code> which won't get run unless you explicitly call them.</p>
</div>
<div class="post-text" itemprop="text">
<p>As far as I know, there is no way to order tests other than rename them. Could you explain why you need to run test cases in the specific order? In unit testing it usually considered as bad practice since it means that your cases are not independent.</p>
</div>
<div class="post-text" itemprop="text">
<p>To update on the topic (from documentation):</p>
<blockquote>
<p><a href="https://docs.djangoproject.com/en/1.7/topics/testing/overview/#order-in-which-tests-are-executed" rel="noreferrer">Order in which tests are executed</a></p>
<p>In order to guarantee that all <strong><code>TestCase</code></strong> code starts with a clean
  database, the Django test runner reorders tests in the following way:</p>
<ul>
<li>All <a href="https://docs.djangoproject.com/en/1.7/topics/testing/tools/#django.test.TestCase" rel="noreferrer"><code>TestCase</code></a> subclasses are run first.</li>
<li>Then, all other Django-based
  tests (test cases based on <a href="https://docs.djangoproject.com/en/1.7/topics/testing/tools/#django.test.SimpleTestCase" rel="noreferrer"><code>SimpleTestCase</code></a>, including
  <a href="https://docs.djangoproject.com/en/1.7/topics/testing/tools/#django.test.TransactionTestCase" rel="noreferrer"><code>TransactionTestCase</code></a>) are run with no particular ordering guaranteed
  nor enforced among them.</li>
<li>Then any other <a href="http://docs.python.org/3/library/unittest.html#unittest.TestCase" rel="noreferrer"><code>unittest.TestCase</code></a> tests
  (including <code>doctests</code>) that may alter the database without restoring it
  to its original state are run.</li>
</ul>
<p><strong>Note</strong>: The new ordering of tests may reveal unexpected dependencies on test
  case ordering. This is the case with doctests that relied on state
  left in the database by a given <code>TransactionTestCase</code> test, they must be
  updated to be able to run independently.</p>
</blockquote>
</div>
<span class="comment-copy">+1: Done this more than once myself to chain tests together, reducing setup time.</span>
<span class="comment-copy">Like, for testing create an account and all following operations on account. What might be the alternative to this approach?</span>
<span class="comment-copy">@ziang: The idea is that you test only <i>one</i> operation. If you want to test operations on an account, create a dummy account, then perform one op on it &amp; check. Do this once for each operation to test, that gives you one test per operation.</span>
<span class="comment-copy">I see. Thank you for your suggestion.</span>
<span class="comment-copy">I like to logically order tests. It's not that they are dependent, but the more similar the tests (test methods I mean here) are, the closer I want to put them together. It's annoying to run tests with a failfast option (as with Django) that are not executed in the order you defined them, in case if you placed a pdb line in there it won't get triggered unless it's the alphabetically first failing test.</span>
<span class="comment-copy">@sleske so you offer to copy a code for each test for account creation? Doesn't seem right to me at all, once I have to refactor tests due to code refactoring it's better to do in one place instead of editing 2000 tests right?</span>
