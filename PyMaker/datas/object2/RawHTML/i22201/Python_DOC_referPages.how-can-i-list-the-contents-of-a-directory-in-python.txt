<div class="post-text" itemprop="text">
<p>Can’t be hard, but I’m having a mental block.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
os.listdir("path") # returns list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way:</p>
<pre><code>import os
os.listdir("/home/username/www/")
</code></pre>
<p><a href="http://docs.python.org/library/glob.html#glob.glob" rel="nofollow noreferrer">Another way</a>:</p>
<pre><code>glob.glob("/home/username/www/*")
</code></pre>
<p><a href="http://diveintopython.net/file_handling/os_module.html" rel="nofollow noreferrer">Examples found here</a>.</p>
<p>The <code>glob.glob</code> method above will not list hidden files.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.walk</code> can be used if you need recursion:</p>
<pre><code>import os
start_path = '.' # current directory
for path,dirs,files in os.walk(start_path):
    for filename in files:
        print os.path.join(path,filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>glob.glob</code> or <code>os.listdir</code> will do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/os.html#os.listdir" rel="noreferrer"><code>os</code> module</a> handles all that stuff.</p>
<blockquote>
<p><code>os.listdir(path)</code></p>
<p>Return a list containing the names of the entries in the directory given by path. 
  The list is in arbitrary order. It does not include the special entries '.' and 
  '..' even if they are present in the directory.</p>
<p>Availability: Unix, Windows.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4+, you can use the new <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> package:</p>
<pre><code>from pathlib import Path
for path in Path('.').iterdir():
    print(path)
</code></pre>
<p><code>Path.iterdir()</code> returns an iterator, which can be easily turned into a <code>list</code>:</p>
<pre><code>contents = list(Path('.').iterdir())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.5, you can use <code>os.scandir</code>.</p>
<p>The difference is that it returns file <em>entries</em> not names. On some OSes like windows, it means that you don't have to <code>os.path.isdir/file</code> to know if it's a file or not, and that saves CPU time because <code>stat</code> is already done when scanning dir in Windows:</p>
<p>example to list a directory and print files bigger than <code>max_value</code> bytes:</p>
<pre><code>for dentry in os.scandir("/path/to/dir"):
    if dentry.stat().st_size &gt; max_value:
       print("{} is biiiig".format(dentry.name))
</code></pre>
<p>(read an extensive performance-based answer of mine <a href="https://stackoverflow.com/a/46145070/6451573">here</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Below code will list directories and the files within the dir. The other one is os.walk</p>
<pre><code>def print_directory_contents(sPath):
        import os                                       
        for sChild in os.listdir(sPath):                
            sChildPath = os.path.join(sPath,sChild)
            if os.path.isdir(sChildPath):
                print_directory_contents(sChildPath)
            else:
                print(sChildPath)
</code></pre>
</div>
<span class="comment-copy">The most honest question that I've seen on here.</span>
<span class="comment-copy">Would glob.glob list hidden files (I assume you mean <code>.XYZ</code> files in a Unix file-system context), when used with <code>glob.glob("/home/username/www/.*")</code> ?</span>
<span class="comment-copy">Yes I mean files beginning with a dot.  The example you gave would work for matching hidden files (and only hidden files).</span>
<span class="comment-copy">I just imported glob and used glob.glob(r'c:\users') but it only returned <code>['c:\\users']</code></span>
<span class="comment-copy">@Musixauce3000: You'll want to do <code>glob.glob(r'c:\users\*')</code> (glob it doesn't actually list directories, but expands asterisks and such which accomplishes a similar task).</span>
<span class="comment-copy"><code>import glob</code> ENTER <code>glob.glob(r'c:\users')</code> ENTER only seems to return <code>['c:\\users']</code>. Why is that? I'd like to use glob.glob because as other users have pointed out, it supposedly returns the contents of a directory while also ignoring hidden files. This is important.</span>
<span class="comment-copy">because you have to specify a wildcard with <code>glob</code>: <code>glob.glob(r'c:\users\*')</code></span>
