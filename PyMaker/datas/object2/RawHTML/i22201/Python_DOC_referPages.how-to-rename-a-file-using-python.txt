<div class="post-text" itemprop="text">
<p>I want to change <code>a.txt</code> to <code>b.kml</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/library/os.html#os.rename" rel="noreferrer"><code>os.rename</code></a>:</p>
<pre><code>import os

os.rename('a.txt', 'b.kml')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import shutil

shutil.move('a.txt', 'b.kml')
</code></pre>
<p>This will work to rename or move a file.</p>
</div>
<div class="post-text" itemprop="text">
<p>File may be inside a directory, in that case specify the path:</p>
<pre><code>import os
old_file = os.path.join("directory", "a.txt")
new_file = os.path.join("directory", "b.kml")
os.rename(old_file, new_file)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>os.rename(old, new)</code></p>
<p>This is found in the Python docs: <a href="http://docs.python.org/library/os.html" rel="noreferrer">http://docs.python.org/library/os.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.4 one can use the <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">pathlib</a> module to solve this.</p>
<p>If you happen to be on an older version, you can use the backported version found <a href="https://pypi.python.org/pypi/pathlib2/" rel="noreferrer">here</a></p>
<p>Let's assume you are not in the root path (just to add a bit of difficulty to it) you want to rename, and have to provide a full path, we can look at this: </p>
<pre><code>some_path = 'a/b/c/the_file.extension'
</code></pre>
<p>So, you can take your path and create a <code>Path</code> object out of it:</p>
<pre><code>from pathlib import Path
p = Path(some_path)
</code></pre>
<p>Just to provide some information around this object we have now, we can extract things out of it. For example, if for whatever reason we want to rename the file by modifying the filename from <code>the_file</code> to <code>the_file_1</code>, then we can get the filename part:</p>
<pre><code>name_without_extension = p.stem
</code></pre>
<p>And still hold the extension in hand as well: </p>
<pre><code>ext = p.suffix
</code></pre>
<p>We can perform our modification with a simple string manipulation:</p>
<pre><code>new_file_name = "{}_{}".format(name_without_extension, 1)
</code></pre>
<p>And now we can perform our rename by calling the <code>rename</code> method on the path object we created and appending the <code>ext</code> to complete the proper rename structure we want:</p>
<pre><code>p.rename(Path(p.parent, new_file_name + ext))
</code></pre>
<p>More shortly to showcase its simplicity: </p>
<pre><code>from pathlib import Path
p = Path(some_path)
p.rename(Path(p.parent, "{}_{}".format(p.stem, 1) + p.suffix))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>os.rename</code>. But you have to pass full path of both files to the function. If I have a file <code>a.txt</code> on my desktop so I will do and also I have to give full of renamed file too.</p>
<pre><code> os.rename('C:\\Users\\Desktop\\a.txt', 'C:\\Users\\Desktop\\b.kml')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os

# Set the path
path = 'a\\b\\c'  
# save current working directory
saved_cwd = os.getcwd()
# change your cwd to the directory which contains files
os.chdir(path)
os.rename('a.txt', 'b.klm')
# moving back to the directory you were in 
os.chdir(saved_cwd)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use os.system to invoke terminal to accomplish the task:</p>
<pre><code>os.system('mv oldfile newfile')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import shutil
import os

files = os.listdir("./pics/") 

for key in range(0, len(files)):
 print files[key]
 shutil.move("./pics/" + files[key],"./pics/img" + str(key) + ".jpeg")
</code></pre>
<p>this should do it. python 3+</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>    import os
import re
from pathlib import Path

for f in os.listdir(training_data_dir2):
  for file in os.listdir( training_data_dir2 + '/' + f):
    oldfile= Path(training_data_dir2 + '/' + f + '/' + file)
    newfile = Path(training_data_dir2 + '/' + f + '/' + file[49:])
    p=oldfile
    p.rename(newfile)
</code></pre>
</div>
<span class="comment-copy">Should be noted that if the files are not in the working directory you will need the full path.</span>
<span class="comment-copy">not really, on 3.7 ubuntu, works for me using relative paths</span>
<span class="comment-copy"><code>shutil.move</code> is not a good option due to not being an atomic operation. If the file is open, for instance, <code>shutil.move</code> will create a file with <code>new_name</code>, but will not delete the file with <code>old_name</code> hence leaving you with two files. <code>os.rename</code> on the other hand will do nothing, which is a <i>better option</i>. With <code>shutil.move</code>, even if you caught the error, you would still have to worry about checking and deleting the rogue file. Just not worth it when <b>a better tool exists: <code>os.rename</code></b>.</span>
<span class="comment-copy">Why would you do this instead of the accepted answer? Seems far more complicated</span>
<span class="comment-copy">Well @rbennell, most of this answer is an explanation. The answer is really just the three lines at the end. Furthermore, the accepted answer is made explicitly for that very name change. This answer provides a way to show how you can manipulate the filename to preserve parts that you want in the path or name of the file. Furthermore, the <code>pathlib</code> library is introduced in python 3.4 so sharing the answer here also provides exposure for a solid module to showcase its versatility and usage for more complicated requirements.</span>
<span class="comment-copy">Thank you @idjaw, your comment is a good answer to a basic question of us beginners, a simple <i>Why did you did that?</i>. Also, it is refreshing to see non-hostile approach on internet to what is often considered as ignorant.</span>
<span class="comment-copy">can you explain line : <code>new_file_name = "{}_{}".format(name_without_extension, 1)</code> ? What is <code>{}_{}</code> ? where can I read more about it?</span>
<span class="comment-copy">@SasukeUchiha - The <code>{}</code> are for string formatting, which you can read about <a href="https://docs.python.org/3.7/library/string.html#format-examples" rel="nofollow noreferrer">here</a>. Ultimately, what is happening is that the <code>{}</code> get replaced with the variables that are passed in to the <code>format</code> method. So the first <code>{}</code> will hold what is in <code>name_without_extension</code>, and the second will hold the second argument which is simply <code>1</code>.</span>
<span class="comment-copy">Be wary of doing it this way.  You cannot always <code>chdir()</code> to a directory, e.g. what happens under Windows when it is a UNC?  And doing a <code>chdir()</code> has side-effects.  I would rather just specify the necessary paths to <code>os.rename()</code> directly, no <code>chdir()</code>ing.</span>
<span class="comment-copy">Only on a unix-based machine though, right?</span>
<span class="comment-copy">yes, this will work only on a unix-based machine as <code>mv</code> is a unix builtin commandline program to move/rename a file.</span>
<span class="comment-copy">Why would you invoke a terminal and define a UNIX only command when you can do it from python in a multi-platform way?</span>
<span class="comment-copy">... or use enumerate for a slightly more readable version : for key, fname in enumerate(files): â€¦</span>
