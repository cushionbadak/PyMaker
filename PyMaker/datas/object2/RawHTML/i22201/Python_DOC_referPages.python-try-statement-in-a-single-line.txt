<div class="post-text" itemprop="text">
<p>Is there a way in python to turn a try/except into a single line?</p>
<p>something like...</p>
<pre><code>b = 'some variable'
a = c | b #try statement goes here
</code></pre>
<p>Where <code>b</code> is a declared variable and <code>c</code> is not... so <code>c</code> would throw an error and <code>a</code> would become <code>b</code>...</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no way to compress a <code>try</code>/<code>except</code> block onto a single line in Python.</p>
<p>Also, it is a bad thing not to know whether a variable exists in Python, like you would in some other dynamic languages. The safer way (and the prevailing style) is to set all variables to something. If they might not get set, set them to <code>None</code> first (or <code>0</code> or <code>''</code> or something if it is more applicable.)</p>
<hr/>
<p>If you <strong>do</strong> assign all the names you are interested in first, you do have options. </p>
<ul>
<li><p>The best option is an if statement.</p>
<pre><code>c = None
b = [1, 2]

if c is None:
    a = b
else:
    a = c
</code></pre></li>
<li><p>The one-liner option is a conditional expression. </p>
<pre><code>c = None
b = [1, 2]
a = c if c is not None else b
</code></pre></li>
<li><p>Some people abuse the short-circuiting behavior of <code>or</code> to do this. <strong>This is error prone,</strong> so I never use it.</p>
<pre><code>c = None
b = [1, 2]
a = c or b
</code></pre>
<p>Consider the following case:</p>
<pre><code>c = []
b = [1, 2]
a = c or b
</code></pre>
<p>In this case, <code>a</code> probably <em>should</em> be <code>[]</code>, but it is <code>[1, 2]</code> because <code>[]</code> is false in a boolean context. Because there are lots of values that can be false, I don't use the <code>or</code> trick. (This is the same problem people run into when they say <code>if foo:</code> when they mean <code>if foo is not None:</code>.)</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is terribly hackish, but I've used it at the prompt when I wanted to write up a sequence of actions for debugging:</p>
<pre><code>exec "try: some_problematic_thing()\nexcept: problem=sys.exc_info()"
print "The problem is %s" % problem[1]
</code></pre>
<p>For the most part, I'm not at all bothered by the no-single-line-try-except restriction, but when I'm just experimenting and I want readline to recall a whole chunk of code at once in the interactive interpreter so that I can adjust it somehow, this little trick comes in handy.</p>
<p>For the actual purpose you are trying to accomplish, you might try <code>locals().get('c', b)</code>; ideally it would be better to use a real dictionary instead of the local context, or just assign c to None before running whatever may-or-may-not set it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way is to define a context manager:</p>
<pre><code>class trialContextManager:
    def __enter__(self): pass
    def __exit__(self, *args): return True
trial = trialContextManager()
</code></pre>
<p>Then use the <code>with</code> statement to ignore errors in one single line:</p>
<pre><code>&gt;&gt;&gt; with trial: a = 5      # will be executed normally
&gt;&gt;&gt; with trial: a = 1 / 0  # will be not executed and no exception is raised
&gt;&gt;&gt; print a
5
</code></pre>
<p>No exception will be raised in case of a runtime error. It's like a <code>try:</code> without the <code>except:</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it by accessing the namespace dict using <code>vars()</code>, <code>locals()</code>, or <code>globals()</code>, whichever is most appropriate for your situation.</p>
<pre><code>&gt;&gt;&gt; b = 'some variable'
&gt;&gt;&gt; a = vars().get('c', b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>parse_float = lambda x, y=exec("def f(s):\n try:\n  return float(s)\n except:  return None"): f(x)
</code></pre>
<p>There is always a solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>You mentioned that you're using django. If it makes sense for what you're doing you might want to use:</p>
<pre><code>my_instance, created = MyModel.objects.get_or_create()
</code></pre>
<p><code>created</code> will be True or False. Maybe this will help you.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The problem is that its actually a django model.objects.get query i am trying to test. the .get returns an error if no data is found... it doesn't return None (which annoys me)</p>
</blockquote>
<p>Use something like this:</p>
<pre><code>print("result:", try_or(lambda: model.objects.get(), '&lt;n/a&gt;'))
</code></pre>
<p>Where try_or is an utility function defined by you:</p>
<pre><code>def try_or(fn, default):
    try:
        return fn()
    except:
        return default
</code></pre>
<p>Optionally you can restrict the accepted exception types to <code>NameError</code>, <code>AttributeError</code>, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3 you can use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer">contextlib.suppress</a>:</p>
<pre><code>from contextlib import suppress

d = {}
with suppress(KeyError): d['foo']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you need to actually manage exceptions:<br/>
(modified from poke53280's answer)</p>
<pre><code>&gt;&gt;&gt; def try_or(fn, exceptions: dict = {}):
    try:
        return fn()
    except Exception as ei:
        for e in ei.__class__.__mro__[:-1]:
            if e in exceptions: return exceptions[e]()
        else:
            raise


&gt;&gt;&gt; def context():
    return 1 + None

&gt;&gt;&gt; try_or( context, {TypeError: lambda: print('TypeError exception')} )
TypeError exception
&gt;&gt;&gt; 
</code></pre>
<p>note that if the exception is not supported, it will raise as expected:</p>
<pre><code>&gt;&gt;&gt; try_or( context, {ValueError: lambda: print('ValueError exception')} )
Traceback (most recent call last):
  File "&lt;pyshell#57&gt;", line 1, in &lt;module&gt;
    try_or( context, {ValueError: lambda: print('ValueError exception')} )
  File "&lt;pyshell#38&gt;", line 3, in try_or
    return fn()
  File "&lt;pyshell#56&gt;", line 2, in context
    return 1 + None
TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'
&gt;&gt;&gt; 
</code></pre>
<p>also if <code>Exception</code> is given, it will match anything below.<br/>
(<code>BaseException</code> is higher, so it will not match)</p>
<pre><code>&gt;&gt;&gt; try_or( context, {Exception: lambda: print('exception')} )
exception
</code></pre>
</div>
<span class="comment-copy">Thanks. The problem is that its actually a django model.objects.get query i am trying to test. the .get returns an error if no data is found... it doesn't return None (which annoys me)</span>
<span class="comment-copy">@Brant, so why can't you catch the error? why one line?</span>
<span class="comment-copy">@Brant, Okay, that situation is a bit different than checking if a variable is set (no variables are declared in Python). The typical style in Python is to prefer raising exceptions to returning errors as values, which many of us actually love. Having to check the return code of an operation every time and having a hard time tracking down errors if I don't is something I definitely don't miss about C when writing Python. In any event, though it's been discussed, there is no one-line syntax for a <code>try</code>/<code>except</code> block. Luckily lines are cheap, so the 4-line solution should work for you. ;-)</span>
<span class="comment-copy">It is part of a large set of tuples within a dict... I was just trying to shorten things up a bit</span>
<span class="comment-copy">Don't use <code>get</code> if you don't want an exception.  Use <code>filter</code> instead.</span>
<span class="comment-copy">Hey, this answers the question! :)</span>
<span class="comment-copy">Love this answer, super messy, but one line, just the way I like it.</span>
<span class="comment-copy">This is the answer!!  will <code>problem[0]</code> return what that function returns?</span>
<span class="comment-copy">Exec is a code smell and should be avoided unless nothing else works. If one line code is so important then this will work, but you need to ask yourself why one line is so important.</span>
<span class="comment-copy">clearly not for production use, but exactly what is needed for an awkward debugging session.</span>
<span class="comment-copy">This is great! Since there's no explicit try/except, could you explain briefly how the context manager deals with errors?</span>
<span class="comment-copy">Thank you! Can you please explain how this works?</span>
<span class="comment-copy">This doesn't work exactly the same as checking whether a variable is set (though it does if you are interested in a particular scope.) Also, ewwwwwwww.....</span>
