<div class="post-text" itemprop="text">
<p>Could someone tell me how to get the parent directory of a path in Python in a cross platform way. E.g.</p>
<pre><code>C:\Program Files ---&gt; C:\
</code></pre>
<p>and</p>
<pre><code>C:\ ---&gt; C:\
</code></pre>
<p>If the directory doesn't have a parent directory, it returns the directory itself. The question might seem simple but I couldn't dig it up through Google.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import os.path
print os.path.abspath(os.path.join(yourpath, os.pardir))
</code></pre>
<p>where <code>yourpath</code> is the path you want the parent for.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>os.path.dirname</code>:</p>
<pre><code>&gt;&gt;&gt; os.path.dirname(r'C:\Program Files')
'C:\\'
&gt;&gt;&gt; os.path.dirname('C:\\')
'C:\\'
&gt;&gt;&gt;
</code></pre>
<p>Caveat: <code>os.path.dirname()</code> gives different results depending on whether a trailing slash is included in the path. This may or may not be the semantics you want. Cf. @kender's answer using <code>os.path.join(yourpath, os.pardir)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4+</p>
<pre><code>from pathlib import Path
Path('C:\Program Files').parent
</code></pre>
<p><a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">Python documentation</a></p>
<hr/>
<p><strong>Additional Info</strong></p>
<p>The new pathlib library brings together and simplifies using paths and common file operations.
Here are some examples from the docs.</p>
<p>Navigating inside a directory tree:</p>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; p = Path('/etc')
&gt;&gt;&gt; q = p / 'init.d' / 'reboot'
&gt;&gt;&gt; q
PosixPath('/etc/init.d/reboot')
&gt;&gt;&gt; q.resolve()
PosixPath('/etc/rc.d/init.d/halt')
</code></pre>
<p>Querying path properties:</p>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; q.exists()
True
&gt;&gt;&gt; q.is_dir()
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
p = os.path.abspath('..')
</code></pre>
<p><code>C:\Program Files</code> ---&gt; <code>C:\\\</code></p>
<p><code>C:\</code> ---&gt; <code>C:\\\</code></p>
</div>
<div class="post-text" itemprop="text">
<p>An alternate solution of @kender</p>
<pre><code>import os
os.path.dirname(os.path.normpath(yourpath))
</code></pre>
<p>where <code>yourpath</code> is the path you want the parent for.</p>
<p>But this solution is not perfect, since it will not handle the case where <code>yourpath</code> is an empty string, or a dot.</p>
<p>This other solution will handle more nicely this corner case:</p>
<pre><code>import os
os.path.normpath(os.path.join(yourpath, os.pardir))
</code></pre>
<p>Here the outputs for every case that can find (Input path is relative):</p>
<pre><code>os.path.dirname(os.path.normpath('a/b/'))          =&gt; 'a'
os.path.normpath(os.path.join('a/b/', os.pardir))  =&gt; 'a'

os.path.dirname(os.path.normpath('a/b'))           =&gt; 'a'
os.path.normpath(os.path.join('a/b', os.pardir))   =&gt; 'a'

os.path.dirname(os.path.normpath('a/'))            =&gt; ''
os.path.normpath(os.path.join('a/', os.pardir))    =&gt; '.'

os.path.dirname(os.path.normpath('a'))             =&gt; ''
os.path.normpath(os.path.join('a', os.pardir))     =&gt; '.'

os.path.dirname(os.path.normpath('.'))             =&gt; ''
os.path.normpath(os.path.join('.', os.pardir))     =&gt; '..'

os.path.dirname(os.path.normpath(''))              =&gt; ''
os.path.normpath(os.path.join('', os.pardir))      =&gt; '..'

os.path.dirname(os.path.normpath('..'))            =&gt; ''
os.path.normpath(os.path.join('..', os.pardir))    =&gt; '../..'
</code></pre>
<p>Input path is absolute (Linux path):</p>
<pre><code>os.path.dirname(os.path.normpath('/a/b'))          =&gt; '/a'
os.path.normpath(os.path.join('/a/b', os.pardir))  =&gt; '/a'

os.path.dirname(os.path.normpath('/a'))            =&gt; '/'
os.path.normpath(os.path.join('/a', os.pardir))    =&gt; '/'

os.path.dirname(os.path.normpath('/'))             =&gt; '/'
os.path.normpath(os.path.join('/', os.pardir))     =&gt; '/'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>os.path.split(os.path.abspath(mydir))[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>os.path.abspath(os.path.join(somepath, '..'))
</code></pre>
<p>Observe:</p>
<pre><code>import posixpath
import ntpath

print ntpath.abspath(ntpath.join('C:\\', '..'))
print ntpath.abspath(ntpath.join('C:\\foo', '..'))
print posixpath.abspath(posixpath.join('/', '..'))
print posixpath.abspath(posixpath.join('/home', '..'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
print"------------------------------------------------------------"
SITE_ROOT = os.path.dirname(os.path.realpath(__file__))
print("example 1: "+SITE_ROOT)
PARENT_ROOT=os.path.abspath(os.path.join(SITE_ROOT, os.pardir))
print("example 2: "+PARENT_ROOT)
GRANDPAPA_ROOT=os.path.abspath(os.path.join(PARENT_ROOT, os.pardir))
print("example 3: "+GRANDPAPA_ROOT)
print "------------------------------------------------------------"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want <em>only</em> the <strong><em>name</em></strong> of the folder that is the immediate parent of the file provided as an argument and <strong>not</strong> the <em>absolute path</em> to that file:</p>
<p><code>os.path.split(os.path.dirname(currentDir))[1]</code></p>
<p>i.e. with a <code>currentDir</code> value of <code>/home/user/path/to/myfile/file.ext</code></p>
<p>The above command will return:</p>
<p><code>myfile</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.basename(os.path.dirname(&lt;your_path&gt;))
</code></pre>
<p>For example in Ubuntu:  </p>
<pre><code>&gt;&gt;&gt; my_path = '/home/user/documents'
&gt;&gt;&gt; os.path.basename(os.path.dirname(my_path))
# Output: 'user'
</code></pre>
<p>For example in Windows:  </p>
<pre><code>&gt;&gt;&gt; my_path = 'C:\WINDOWS\system32'
&gt;&gt;&gt; os.path.basename(os.path.dirname(my_path))
# Output: 'WINDOWS'
</code></pre>
<p>Both examples tried in Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print os.path.abspath(os.path.join(os.getcwd(), os.path.pardir))
</code></pre>
<p>You can use this to get the parent directory of the current location of your py file.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os.path

os.path.abspath(os.pardir)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just adding something to the Tung's answer (you need to use <code>rstrip('/')</code> to be more of the safer side if you're on a unix box).</p>
<pre><code>&gt;&gt;&gt; input = "../data/replies/"
&gt;&gt;&gt; os.path.dirname(input.rstrip('/'))
'../data'
&gt;&gt;&gt; input = "../data/replies"
&gt;&gt;&gt; os.path.dirname(input.rstrip('/'))
'../data'
</code></pre>
<p>But, if you don't use <code>rstrip('/')</code>, given your input is </p>
<pre><code>&gt;&gt;&gt; input = "../data/replies/"
</code></pre>
<p>would output,</p>
<pre><code>&gt;&gt;&gt; os.path.dirname(input)
'../data/replies'
</code></pre>
<p>which is probably not what you're looking at as you want both <code>"../data/replies/"</code> and <code>"../data/replies"</code> to behave the same way.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os

dir_path = os.path.dirname(os.path.realpath(__file__))
parent_path = os.path.abspath(os.path.join(dir_path, os.pardir))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>GET Parent Directory Path</strong> and <strong>make New directory</strong> (name <code>new_dir</code>)</p>
<h3>Get Parent Directory Path</h3>
<pre><code>os.path.abspath('..')
os.pardir
</code></pre>
<h3>Example 1</h3>
<pre><code>import os
print os.makedirs(os.path.join(os.path.dirname(__file__), os.pardir, 'new_dir'))
</code></pre>
<h3>Example 2</h3>
<pre><code>import os
print os.makedirs(os.path.join(os.path.dirname(__file__), os.path.abspath('..'), 'new_dir'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>os.path.abspath('D:\Dir1\Dir2\..')

&gt;&gt;&gt; 'D:\Dir1'
</code></pre>
<p>So a <code>..</code> helps</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os

def parent_filedir(n):
    return parent_filedir_iter(n, os.path.dirname(__file__))

def parent_filedir_iter(n, path):
    n = int(n)
    if n &lt;= 1:
        return path
    return parent_filedir_iter(n - 1, os.path.dirname(path))

test_dir = os.path.abspath(parent_filedir(2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answers given above are all perfectly fine for going up one or two directory levels, but they may get a bit cumbersome if one needs to traverse the directory tree by many levels (say, 5 or 10). This can be done concisely by joining a list of <code>N</code> <code>os.pardir</code>s in <code>os.path.join</code>. Example:</p>
<pre><code>import os
# Create list of ".." times 5
upup = [os.pardir]*5
# Extract list as arguments of join()
go_upup = os.path.join(*upup)
# Get abspath for current file
up_dir = os.path.abspath(os.path.join(__file__, go_upup))
</code></pre>
</div>
<span class="comment-copy">Your answer is correct but convoluted; <code>os.path.dirname</code> is the function for this, like <code>a+=5-4</code> is more convoluted than <code>a+=1</code>. The question requested only the parent directory, not whether is exists or the <i>true</i> parent directory assuming symbolic links get in the way.</span>
<span class="comment-copy">It's <code>os.pardir</code>, not <code>os.path.pardir</code>.</span>
<span class="comment-copy">@bouteillebleu: Both <code>os.pardir</code> and <code>os.path.pardir</code> are actually correct (they are identical).</span>
<span class="comment-copy">@tzot: unfortunately <code>os.path.dirname</code> gives different results depending on whether a trailing slash is included in the path. If you want reliable results you need to use the <code>os.path.join</code> method in answer above.</span>
<span class="comment-copy">Since this is apparently complicated enough to warrant a StackOverflow question, I feel that this should be added to the os.path library as a built-in function.</span>
<span class="comment-copy"><code>os.path.dirname(r'C:\Program Files')</code> what?  Python's just giving you the directory where the file 'Program Files' would be.  What's more, it doesn't even have to exist, behold: <code>os.path.dirname(r'c:\i\like\to\eat\pie')</code> outputs <code>'c:\\i\\like\\to\\eat'</code></span>
<span class="comment-copy">The original poster does not state that the directory have to exist. There are a lot of pathname methods that does nothing but string manipulation.   To verify if the pathname actually exist requires a disk access. Depends on the application this may or may not be desirable.</span>
<span class="comment-copy">this solution is sensitive to trailing os.sep. Say os.sep=='/'. dirname(foo/bar) -&gt; foo, but dirname(foo/bar/) -&gt; foo/bar</span>
<span class="comment-copy">That's by design. It comes down to the interpretation of a path with a trailing /. Do you consider "path1" equals to "path1/"? The library use the most general interpretation that they are distinct. In some context people may want to treat them as equivalent. In this case you can do a rstrip('/') first. Had the library pick the other interpretation you will lost fidelity.</span>
<span class="comment-copy">@Ryan, I don't know about that. There is an entire RFC 1808 written to address the issue of relative path in URI and all the subtlety of the presence and absence of a trailing /. If you know of any documentation that says they should be treated equivalent in general please point it out.</span>
<span class="comment-copy">This is the only sane answer. If you're forced to use Python 2, just <code>pip install pathlib2</code> and use the backport.</span>
<span class="comment-copy">This solution is NOT sensitive to trailing <code>os.sep</code>!</span>
<span class="comment-copy">This only gets the parent of the CWD, not the parent of an arbitrary path as the OP asked.</span>
<span class="comment-copy">Add the double dots at the end of your URL and it will work  E.g   <code>os.path.abspath(r'E:\O3M_Tests_Embedded\branches\sw_test_level_gp\test_scripts\..\..')</code>  Result: <code>E:\\O3M_Tests_Embedded\\branches</code></span>
<span class="comment-copy">Normalizing the path is always a good practice, especially when doing cross-platform work.</span>
<span class="comment-copy">This is the correct answer! It keeps relative paths relative. Thanks!</span>
<span class="comment-copy">@Maxim This solution was not perfect, I did improved it since the orginal solution does not handle one case</span>
<span class="comment-copy">@benjarobin Yes, I hadn't thought of the corner case. Thanks.</span>
<span class="comment-copy">This won't work for paths which are to a directory, it'll just return the directory again.</span>
<span class="comment-copy">@AnthonyBriggs, I just tried this using Python 2.7.3 on Ubuntu 12.04 and it seems to work fine. <code>os.path.split(os.path.abspath("this/is/a/dir/"))[0]</code> returns <code>'/home/daniel/this/is/a'</code> as expected.  I don't at the moment have a running Windows box to check there. On what setup have you observed the behavior that you report?</span>
<span class="comment-copy">You could do <code>parentdir = os.path.split(os.path.apspath(dir[:-1]))[0]</code>. This - I am certain - works because if there is a slash on the end, then it is removed; if there is no slash, this will still work (even if the last part of the path is only one char long) because of the preceding slash. This of course assumes that the path is proper and not say something like <code>/a//b/c///d////</code> (in unix this is valid still), which in most cases they are (proper) especially when you do something like <code>os.path.abspath</code> or any other <code>os.path</code> function.</span>
<span class="comment-copy">Also, to counteract a lot of slashes on the end, you could just write a small for loop that removes those. I'm sure there could even be a clever one-liner to do it, or maybe do that and os.path.split in one line.</span>
<span class="comment-copy">@Den Menes I just saw you comment. It doesn't work if you have something like <code>os.path.split("a/b//c/d///")</code> and, for example, <code>cd //////dev////// is equivalent to </code>cd /dev/` or <code>cd /dev</code>; all of these are valid in linux. I just came up with this and it may be useful, though: <code>os.path.split(path[:tuple(ind for ind, char in enumerate(path) if char != "/" and char != "\\")[-1]])[0]</code>. (This essentially searches for the last non-slash, and gets the substring of the path up to that char.) I used <code>path = "/a//b///c///d////"</code> and then ran the aforementioned statement and got <code>'/a//b///c'</code>.</span>
<span class="comment-copy">os.path.basename(os.path.dirname(current_dir)) also works here.</span>
<span class="comment-copy">That suggestion often leads to bugs. os.getcwd() is often NOT where "your py file" is. Think packages. If I "import some_package_with_subpackages" many modules will not be in that package's top-most directory. os.getcwd() returns where you execute top-most script. And that also presumes you are doing it from a command line.</span>
<span class="comment-copy">This presumes you want the parent directory of "the current working directory" and not the parent directory any path in general.</span>
<span class="comment-copy">I would recommend to not use "input" as a variable/reference. It is a built-in function.</span>
<span class="comment-copy">&gt;&gt;&gt; input = "../data/replies/" works..</span>
