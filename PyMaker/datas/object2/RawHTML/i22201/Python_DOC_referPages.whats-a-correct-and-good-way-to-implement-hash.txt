<div class="post-text" itemprop="text">
<p>What's a correct and good way to implement <code>__hash__()</code>?</p>
<p>I am talking about the function that returns a hashcode that is then used to insert objects into hashtables aka dictionaries.</p>
<p>As <code>__hash__()</code> returns an integer and is used for "binning" objects into hashtables I assume that the values of the returned integer should be uniformly distributed for common data (to minimize collisions).
What's a good practice to get such values? Are collisions a problem?
In my case I have a small class which acts as a container class holding some ints, some floats and a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>An easy, correct way to implement <code>__hash__()</code> is to use a key tuple. It won't be as fast as a specialized hash, but if you need that then you should probably implement the type in C.</p>
<p>Here's an example of using a key for hash and equality:</p>
<pre><code>class A:
    def __key(self):
        return (self.attr_a, self.attr_b, self.attr_c)

    def __hash__(self):
        return hash(self.__key())

    def __eq__(self, other):
        return isinstance(self, type(other)) and self.__key() == other.__key()
</code></pre>
<p>Also, the <a href="https://docs.python.org/3.5/reference/datamodel.html#object.__hash__" rel="noreferrer">documentation of <code>__hash__</code></a> has more information, that may be valuable in some particular circumstances.</p>
</div>
<div class="post-text" itemprop="text">
<p>John Millikin proposed a solution similar to this:</p>
<pre><code>class A(object):

    def __init__(self, a, b, c):
        self._a = a
        self._b = b
        self._c = c

    def __eq__(self, othr):
        return ((self._a, self._b, self._c) ==
                (othr._a, othr._b, othr._c))

    def __hash__(self):
        return hash((self._a, self._b, self._c))
</code></pre>
<p>The problem with this solution is that the <code>hash(A(a, b, c)) == hash((a, b, c))</code>. In other words, the hash collides with that of the tuple of its key members. Maybe this does not matter very often in practice?</p>
<p>The <a href="http://docs.python.org/3/reference/datamodel.html#object.__hash__">Python documentation on <code>__hash__</code></a> suggests to combine the hashes of the sub-components using something like XOR, which gives us this:</p>
<pre><code>class B(object):

    def __init__(self, a, b, c):
        self._a = a
        self._b = b
        self._c = c

    def __eq__(self, othr):
        return (isinstance(othr, type(self))
                and (self._a, self._b, self._c) ==
                    (othr._a, othr._b, othr._c))

    def __hash__(self):
        return (hash(self._a) ^ hash(self._b) ^ hash(self._c) ^
                hash((self._a, self._b, self._c)))
</code></pre>
<p>Bonus: more robust <code>__eq__</code> thrown in there for good measure.</p>
<p>Update: as Blckknght points out, changing the order of a, b, and c could cause problems. I added an additional <code>^ hash((self._a, self._b, self._c))</code> to capture the order of the values being hashed. This final <code>^ hash(...)</code> can be removed if the values being combined cannot be rearranged (for example, if they have different types and therefore the value of <code>_a</code> will never be assigned to <code>_b</code> or <code>_c</code>, etc.).</p>
</div>
<div class="post-text" itemprop="text">
<p>Paul Larson of Microsoft Research studied a wide variety of hash functions. He told me that </p>
<pre><code>for c in some_string:
    hash = 101 * hash  +  ord(c)
</code></pre>
<p>worked surprisingly well for a wide variety of strings. I've found that similar polynomial techniques work well for computing a hash of disparate subfields.</p>
</div>
<div class="post-text" itemprop="text">
<p>I can try to answer the second part of your question.</p>
<p>The collisions will probably result not from the hash code itself, but from mapping the hash code to an index in a collection. So for example your hash function could return random values from 1 to 10000, but if your hash table only has 32 entries you'll get collisions on insertion.</p>
<p>In addition, I would think that collisions would be resolved by the collection internally, and there are many methods to resolve collisions. The simplest (and worst) is, given an entry to insert at index i, add 1 to i until you find an empty spot and insert there. Retrieval then works the same way. This results in inefficient retrievals for some entries, as you could have an entry that requires traversing the entire collection to find!</p>
<p>Other collision resolution methods reduce the retrieval time by moving entries in the hash table when an item is inserted to spread things out. This increases the insertion time but assumes you read more than you insert. There are also methods that try and branch different colliding entries out so that entries to cluster in one particular spot. </p>
<p>Also, if you need to resize the collection you will need to rehash everything or use a dynamic hashing method. </p>
<p>In short, depending on what you're using the hash code for you may have to implement your own collision resolution method. If you're not storing them in a collection, you can probably get away with a hash function that just generates hash codes in a very large range. If so, you can make sure your container is bigger than it needs to be (the bigger the better of course) depending on your memory concerns. </p>
<p>Here are some links if you're interested more: </p>
<p><a href="http://en.wikipedia.org/wiki/Coalesced_hashing" rel="nofollow noreferrer">coalesced hashing on wikipedia</a></p>
<p>Wikipedia also has a <a href="http://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">summary</a> of various collision resolution methods: </p>
<p>Also, "<a href="https://rads.stackoverflow.com/amzn/click/com/0471617660" rel="nofollow noreferrer">File Organization And Processing</a>" by Tharp covers alot of collision resolution methods extensively. IMO it's a great reference for hashing algorithms. </p>
</div>
<div class="post-text" itemprop="text">
<p>Depends on the size of the hash value you return. It's simple logic that if you need to return a 32bit int based on the hash of four 32bit ints, you're gonna get collisions.</p>
<p>I would favor bit operations. Like, the following C pseudo code:</p>
<pre><code>int a;
int b;
int c;
int d;
int hash = (a &amp; 0xF000F000) | (b &amp; 0x0F000F00) | (c &amp; 0x00F000F0 | (d &amp; 0x000F000F);
</code></pre>
<p>Such a system could work for floats too, if you simply took them as their bit value rather than actually representing a floating-point value, maybe better.</p>
<p>For strings, I've got little/no idea.</p>
</div>
<span class="comment-copy">Hm, I didn't think of that. However, this might lead to huge tuples/keys when the number of attributes that make my object unique is high.</span>
<span class="comment-copy">Yes; if your object is very large, then its key will be correspondingly large (and the hash expensive to calculate). If the attributes can be enumerated (eg, columns in an ORM object), then you can simplify <code>__key()</code>; however, you'll still have to hash every attribute value. There's not really any way around this.</span>
<span class="comment-copy">This would result in <code>AttributeError</code> when comparing an instance of <code>A</code> to an instance of most other classes, including <code>None</code>. And it may result in a false <code>True</code> if the other class happens to have same-named attributes. Wouldn't that be a problem in most cases? If so, should we manually check that it's the same class?</span>
<span class="comment-copy">@max - good point, in which case <code>__eq__</code> is better implemented as <code>type(x) == type(y) and x.__key() == y.__key()</code></span>
<span class="comment-copy">@Yonatan, I think the best way to handle that would be catching the <code>AttributeError</code> and returning <code>NotImplemented</code></span>
<span class="comment-copy">You usually don't want to do a straight XOR the attributes together, as that will give you collisions if you change the order of the values. That is, <code>hash(A(1, 2, 3))</code> will be equal to <code>hash(A(3, 1, 2))</code> (and they'll both hash equal to any other <code>A</code> instance with a permutation of <code>1</code>, <code>2</code> and <code>3</code> as its values). If you want to avoid your instance having the same hash as a tuple of their arguments, simply create a sentinel value (as either a class variable, or as a global) then include it in the tuple to be hashed: return hash((_sentinel, self._a, self._b, self._c))</span>
<span class="comment-copy">Your use of <code>isinstance</code> could be problematic, since an object of a subclass of <code>type(self)</code> can now be equal to an object of <code>type(self)</code>. So you may find that adding a <code>Car</code> and a <code>Ford</code> to a <code>set()</code> may result in only one object inserted, depending on the order of insertion. Additionally, you may run into a situation where <code>a == b</code> is True but <code>b == a</code> is False.</span>
<span class="comment-copy">If you're subclassing <code>B</code>, you may want to change that to <code>isinstance(othr, B)</code></span>
<span class="comment-copy">A thought: the key tuple could include the class type, which would prevent other classes with the same key set of attributes from being shown to be equal: <code>hash((type(self), self._a, self._b, self._c))</code>.</span>
<span class="comment-copy">Apparently Java does it the same way but using 31 instead of 101</span>
<span class="comment-copy">What's the rationale behind using these numbers? Is there a reason to pick 101, or 31?</span>
<span class="comment-copy">Here's an explanation for prime multipliers: <a href="http://stackoverflow.com/questions/3613102/why-use-a-prime-number-in-hashcode" title="why use a prime number in hashcode">stackoverflow.com/questions/3613102/…</a>. 101 seems to work particularly well, based on Paul Larson's experiments.</span>
<span class="comment-copy">Python uses <code>(hash * 1000003) XOR ord(c)</code> for strings with 32-bit wraparound multiplication. <a href="http://effbot.org/zone/python-hash.htm" rel="nofollow noreferrer">[Citation</a>]</span>
<span class="comment-copy">I know that there will be collisions. But I have no clue how these are handled. And furhermore my attribute values in combination are very sparsely distributed so I was looking for a smart solution. And somehow I expected there to be a best practice somewhere.</span>
