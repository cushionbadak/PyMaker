<div class="post-text" itemprop="text">
<p>this code is get the templates/blog1/page.html  in b.py:</p>
<pre><code>path = os.path.join(os.path.dirname(__file__), os.path.join('templates', 'blog1/page.html'))
</code></pre>
<p>but i want to get the parent dir location:</p>
<pre><code>aParent
   |--a
   |  |---b.py
   |      |---templates
   |              |--------blog1
   |                         |-------page.html
   |--templates
          |--------blog1
                     |-------page.html
</code></pre>
<p>and  how to get the aParent location</p>
<p>thanks</p>
<p><strong>updated:</strong></p>
<p>this is right:</p>
<pre><code>dirname=os.path.dirname
path = os.path.join(dirname(dirname(__file__)), os.path.join('templates', 'blog1/page.html'))
</code></pre>
<p>or </p>
<pre><code>path = os.path.abspath(os.path.join(os.path.dirname(__file__),".."))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can apply dirname repeatedly to climb higher: <code>dirname(dirname(file))</code>. This can only go as far as the root package, however. If this is a problem, use <code>os.path.abspath</code>: <code>dirname(dirname(abspath(file)))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.path.abspath</code> doesn't validate anything, so if we're already appending strings to <code>__file__</code> there's no need to bother with <code>dirname</code> or joining or any of that. Just treat <code>__file__</code> as a directory and start climbing:</p>
<pre><code># climb to __file__'s parent's parent:
os.path.abspath(__file__ + "/../../")
</code></pre>
<p>That's far less convoluted than <code>os.path.abspath(os.path.join(os.path.dirname(__file__),".."))</code> and about as manageable as <code>dirname(dirname(__file__))</code>. Climbing more than two levels starts to get ridiculous.</p>
<p>But, since we know how many levels to climb, we could clean this up with a simple little function:</p>
<pre><code>uppath = lambda _path, n: os.sep.join(_path.split(os.sep)[:-n])

# __file__ = "/aParent/templates/blog1/page.html"
&gt;&gt;&gt; uppath(__file__, 1)
'/aParent/templates/blog1'
&gt;&gt;&gt; uppath(__file__, 2)
'/aParent/templates'
&gt;&gt;&gt; uppath(__file__, 3)
'/aParent'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <strong>relative path</strong> with the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> module in Python 3.4+:</p>
<pre><code>from pathlib import Path

Path(__file__).parent
</code></pre>
<p>You can use multiple calls to <code>parent</code> to go further in the path:</p>
<pre><code>Path(__file__).parent.parent
</code></pre>
<p>As an alternative to specifying <code>parent</code> twice, you can use</p>
<pre><code>Path(__file__).parents[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>os.path.dirname(os.path.abspath(__file__))
</code></pre>
<p>Should give you the path to <code>a</code>.</p>
<p>But if <code>b.py</code> is the file that is currently executed, then you can achieve the same by just doing</p>
<pre><code>os.path.abspath(os.path.join('templates', 'blog1', 'page.html'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>os.pardir</code> is a better way for <code>../</code> and more readable. </p>
<pre><code>import os
print os.path.abspath(os.path.join(given_path, os.pardir))  
</code></pre>
<p>This will return the parent path of the given_path</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way can be:</p>
<pre><code>import os
current_dir =  os.path.abspath(os.path.dirname(__file__))
parent_dir = os.path.abspath(current_dir + "/../")
print parent_dir
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>May be join two <code>..</code> folder, to get parent of the parent folder?</p>
<pre><code>path = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),"..",".."))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the following to jump to previous folder:</p>
<pre><code>os.chdir(os.pardir)
</code></pre>
<p>If you need multiple jumps a good and easy solution will be to use a simple decorator in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another relatively simple solution that:</p>
<ul>
<li>does not use <code>dirname()</code> (which does not work as expected on one level arguments like "file.txt" or relative parents like "..")</li>
<li>does not use <code>abspath()</code> (avoiding any assumptions about the current working directory) but instead preserves the relative character of paths</li>
</ul>
<p>it just uses <code>normpath</code> and <code>join</code>:</p>
<pre><code>def parent(p):
    return os.path.normpath(os.path.join(p, os.path.pardir))

# Example:
for p in ['foo', 'foo/bar/baz', 'with/trailing/slash/', 
        'dir/file.txt', '../up/', '/abs/path']:
    print parent(p)
</code></pre>
<p>Result:</p>
<pre><code>.
foo/bar
with/trailing
dir
..
/abs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think use this is better:</p>
<pre><code>os.path.realpath(__file__).rsplit('/', X)[0]


In [1]: __file__ = "/aParent/templates/blog1/page.html"

In [2]: os.path.realpath(__file__).rsplit('/', 3)[0]
Out[3]: '/aParent'

In [4]: __file__ = "/aParent/templates/blog1/page.html"

In [5]: os.path.realpath(__file__).rsplit('/', 1)[0]
Out[6]: '/aParent/templates/blog1'

In [7]: os.path.realpath(__file__).rsplit('/', 2)[0]
Out[8]: '/aParent/templates'

In [9]: os.path.realpath(__file__).rsplit('/', 3)[0]
Out[10]: '/aParent'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried: </p>
<pre><code>import os
os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))), os.pardir))
</code></pre>
</div>
<span class="comment-copy">So you want to get <code>blog1</code> or <code>a</code> ? And where is your current file located?</span>
<span class="comment-copy">do you understand what your code is doing?</span>
<span class="comment-copy">yes , it get the templates/blog1/page.html</span>
<span class="comment-copy"><code>os.path.join('templates', 'blog1/page.html')</code> looks strange to me. You are mixing things up. Either <code>os.path.join('templates', 'blog1', 'page.html')</code> or <code>'templates/blog1/page.html'</code>. And much easier would be <code>os.path.abspath(os.path.join('templates', 'blog1', 'page.html'))</code> then</span>
<span class="comment-copy">@zjm: no, you don't <i>get</i> that page. It's not some blackbox that you could just use to get the template file. It performs a series of trivial small steps, and if you could understand them, you wouldn't have this question.</span>
<span class="comment-copy">he seems to know about <code>dirname</code></span>
<span class="comment-copy">I know the OP knows about <code>dirname</code>. It isn't obvious to everyone that applying dirname to a directory yields the parent directory.</span>
<span class="comment-copy"><code>dirname</code> does <b>NOT</b> always return the parent directory; <a href="http://twitter.com/#!/ActiveState/status/671049326788608" rel="nofollow noreferrer">twitter.com/#!/ActiveState/status/671049326788608</a></span>
<span class="comment-copy">@Sridhar: That depends on your perspective; I consider a path ending in <code>/</code> as not representing the leaf directory entry itself, but its contents, which is why, e.g., <code>mv xxx yyy/</code> fails if <code>yyy</code> isn't a preexisting directory. In any case, even if we take your point as a given, it is irrelevant in the context of my answer. Neither <code>file</code> nor the result of <code>dirname</code> will ever end in a <code>/</code>.</span>
<span class="comment-copy">Minor correction: <code>dirname</code> may return <code>'/'</code>, which clearly ends in a <code>/</code>. That is the only exception, AFAIK.</span>
<span class="comment-copy">I like this answer best ^</span>
<span class="comment-copy">Excellent approach</span>
<span class="comment-copy">This is nice, but it would also be cool if the standard library added a convenience function that accomplished this...don't want to come to SO every time I need this func</span>
<span class="comment-copy">Would <code>os.path.abspath(os.path.join(__file__,  "..", "..")</code> be more portable?</span>
<span class="comment-copy">o ,i know ,you are right ,and i want to get the a's parent folder. how to get it</span>
<span class="comment-copy">@zjm1126: See Marcelo Cantos' answer. Apply <code>dirname()</code> twice. Everything you need now should be on this site.</span>
<span class="comment-copy">It works! You saved me!</span>
<span class="comment-copy">Not quite, it's OS dependent (will not work on Windows). Also it does not allow to use relative paths.</span>
