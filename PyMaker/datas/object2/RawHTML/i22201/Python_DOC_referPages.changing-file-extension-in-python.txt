<div class="post-text" itemprop="text">
<p>Suppose from <code>index.py</code> with CGI, I have post file <code>foo.fasta</code> to display file. I want to change <code>foo.fasta</code>'s file extension to be <code>foo.aln</code> in display file. How can I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/os.path.html#os.path.splitext" rel="noreferrer"><code>os.path.splitext()</code></a>, <a href="http://docs.python.org/library/os.html#os.rename" rel="noreferrer"><code>os.rename()</code></a></p>
<p>for example:</p>
<pre><code># renamee is the file getting renamed, pre is the part of file name before extension and ext is current extension
pre, ext = os.path.splitext(renamee)
os.rename(renamee, pre + new_extension)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
thisFile = "mysequence.fasta"
base = os.path.splitext(thisFile)[0]
os.rename(thisFile, base + ".aln")
</code></pre>
<p>Where thisFile = the absolute path of the file you are changing </p>
</div>
<div class="post-text" itemprop="text">
<p>An elegant way using <a href="https://docs.python.org/3/library/pathlib.html#concrete-paths" rel="noreferrer">pathlib.Path</a>:</p>
<pre><code>from pathlib import Path
p = Path('mysequence.fasta')
p.rename(p.with_suffix('.aln'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Starting from Python 3.4 there's <a href="https://docs.python.org/3.4/library/pathlib.html" rel="noreferrer">pathlib</a> built-in library. So the code could be something like:</p>
<pre><code>from pathlib import Path

filename = "mysequence.fasta"
new_filename = Path(filename).stem + ".aln"
</code></pre>
<p><a href="https://docs.python.org/3.4/library/pathlib.html#pathlib.PurePath.stem" rel="noreferrer">https://docs.python.org/3.4/library/pathlib.html#pathlib.PurePath.stem</a></p>
<p>I love pathlib :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this:</p>
<pre><code>os.path.splitext("name.fasta")[0]+".aln"
</code></pre>
<p>And here is how the above works:</p>
<p>The splitext method separates the name from the extension creating a tuple:</p>
<pre><code>os.path.splitext("name.fasta")
</code></pre>
<p>the created tuple now contains the strings "name" and "fasta".
Then you need to access only the string "name" which is the first element of the tuple:</p>
<pre><code>os.path.splitext("name.fasta")[0]
</code></pre>
<p>And then you want to add a new extension to that name:</p>
<pre><code>os.path.splitext("name.fasta")[0]+".aln"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using pathlib and preserving full path:</p>
<pre><code>from pathlib import Path
p = Path('/User/my/path')
new_p = Path(p.parent.as_posix() + '/' + p.stem + '.aln')
</code></pre>
</div>
<span class="comment-copy">Can you be more specific, i saw documentation before too but didn't work.</span>
<span class="comment-copy">Use the first function to get the base. Combine it with the new extension and pass the old filename and the new filename to the second function.</span>
<span class="comment-copy">Correction: <code>os.rename(root, root + new_extension)</code> should read <code>os.rename(renamee, root + new_extension)</code></span>
<span class="comment-copy">actually, its better to use this method instead for python3:    pathlib.path(pathtofile).with_suffix(".mynewext"). The way, suggested with pathlib.path(pathtofile).stem works but will delete the path before the basename.</span>
<span class="comment-copy">str(pathlib.path(pathtofile).with_suffix(".mynewext"))</span>
<span class="comment-copy">I like this answer more because it provides an example and not just cites the methods needed to accomplish the task.  Thanks @FryDay</span>
<span class="comment-copy"><code>base, _ = os.path.splitext(thisFile)</code> is more idiomatic.</span>
<span class="comment-copy">Although the OP didn't ask to perform a rename, it was in the tags, and if you're going to perform a rename and if it's possible the input might have a path and not just a filename, this technique is the right one.</span>
<span class="comment-copy">Regarding <code>.with_suffix()</code>, the properties <code>.suffix</code> and <code>.suffixes</code> should have setters.</span>
<span class="comment-copy">This is a seriously cool lib!!! Thanks!</span>
<span class="comment-copy">This is even better with python 3.6 string interpolation syntax ( <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">python.org/dev/peps/pep-0498</a> )  <code>new_filename = f"{Path(filename).stem}.aln"</code>  ðŸ˜ŽðŸ˜ŽðŸ˜Ž</span>
<span class="comment-copy">Be careful - stem also strips the path if one is present. If you wanted to rename the file and if a path was supplied (which admittedly it wasn't in the question), this technique would fail.</span>
<span class="comment-copy">Also, the result is a string, no longer a pathlib Path.  <code>p.parent / (p.stem + '.aln')</code> will give you a new Path.</span>
