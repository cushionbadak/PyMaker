<div class="post-text" itemprop="text">
<p>In Python, I'd like to be able to create a function that behaves both as a class function and an instance method, but with the ability to change behaviors. The use case for this is for a set of serializable objects and types. As an example:</p>
<pre><code>&gt;&gt;&gt; class Thing(object):
    #...
&gt;&gt;&gt; Thing.to_json()
'A'
&gt;&gt;&gt; Thing().to_json()
'B'
</code></pre>
<p>I know that given the definition of classmethod() in funcobject.c in the Python source, this looks like it'd be simple with a C module. Is there a way to do this from within python?</p>
<p>Thanks!</p>
<p>With the hint of descriptors, I was able to do it with the following code:</p>
<pre><code>class combomethod(object):
    def __init__(self, method):
        self.method = method

    def __get__(self, obj=None, objtype=None):
        @functools.wraps(self.method)
        def _wrapper(*args, **kwargs):
            if obj is not None:
                return self.method(obj, *args, **kwargs)
            else:
                return self.method(objtype, *args, **kwargs)
        return _wrapper
</code></pre>
<p>Thank you Alex!</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure, you just need to define your own <strong>descriptor</strong> type.  There's an excellent tutorial on Python descriptors <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Why would you need to serialize the <i>type</i>?</span>
<span class="comment-copy">there are plenty of reasons. In my particular problem, serializing the type allows us to create the specifications in an RPC system.</span>
<span class="comment-copy">For an update 9 years later, the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">Python documentation</a> now hosts this tutorial from Raymond Hettinger, and it's no longer at the link posted. (One can check archive.org for a cached version of the original, but it's just a slightly smaller version of the one on the Python docs).</span>
