<div class="post-text" itemprop="text">
<p>How to find out what week number is current year on June 16th (wk24) with Python?  </p>
</div>
<div class="post-text" itemprop="text">
<p><code>datetime.date</code> has a <code>isocalendar()</code> method, which returns a tuple containing the calendar week:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.date(2010, 6, 16).isocalendar()[1]
24
</code></pre>
<p><a href="http://docs.python.org/library/datetime.html#datetime.date.isocalendar" rel="noreferrer">datetime.date.isocalendar()</a> is an instance-method returning a tuple containing year, weeknumber and weekday in respective order for the given date instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the week number directly from datetime as string.</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.date(2010, 6, 16).strftime("%V")
'24'
</code></pre>
<p>Also you can get diferent "types" of the week number of the year changing the strftime parameter for:</p>
<blockquote>
<p>%U - week number of the current year, starting with the first Sunday
  as the first day of the first week.</p>
<p>%V - The ISO 8601 week number of the current year (01 to 53), where
  week 1 is the first week that has at least 4 days in the current year,
  and with Monday as the first day of the week.</p>
<p>%W - week number of the current year, starting with the first Monday
  as the first day of the first week.</p>
</blockquote>
<p>I've got it from <a href="http://www.tutorialspoint.com/python/time_strftime.htm">here</a>. It worked for me in Python 2.7.6</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe <code>date.isocalendar()</code> is going to be the answer. <a href="http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm" rel="noreferrer">This article</a> explains the math behind ISO 8601 Calendar. Check out the date.isocalendar() portion of the <a href="http://docs.python.org/library/datetime.html#datetime.date.isocalendar" rel="noreferrer">datetime page</a> of the Python documentation.</p>
<pre><code>&gt;&gt;&gt; dt = datetime.date(2010, 6, 16) 
&gt;&gt;&gt; wk = dt.isocalendar()[1]
24
</code></pre>
<p>.isocalendar() return a 3-tuple with (year, wk num, wk day). <code>dt.isocalendar()[0]</code> returns the year,<code>dt.isocalendar()[1]</code> returns the week number, <code>dt.isocalendar()[2]</code> returns the week day. Simple as can be.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's another option:</p>
<pre><code>import time
from time import gmtime, strftime
d = time.strptime("16 Jun 2010", "%d %b %Y")
print(strftime("%U", d))
</code></pre>
<p>which prints <code>24</code>.</p>
<p>See: <a href="http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Generally to get the current week number (starts from Sunday):</p>
<pre><code>from datetime import *
today = datetime.today()
print today.strftime("%U")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The ISO week suggested by others is a good one, but it might not fit your needs. It assumes each week begins with a Monday, which leads to some interesting anomalies at the beginning and end of the year.</p>
<p>If you'd rather use a definition that says week 1 is always January 1 through January 7, regardless of the day of the week, use a derivation like this:</p>
<pre><code>&gt;&gt;&gt; testdate=datetime.datetime(2010,6,16)
&gt;&gt;&gt; print(((testdate - datetime.datetime(testdate.year,1,1)).days // 7) + 1)
24
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the integer value of the instantaneous week of the year try:</p>
<pre><code>import datetime
datetime.datetime.utcnow().isocalendar()[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are only using the isocalendar week number across the board the following should be sufficient:</p>
<pre><code>import datetime
week = date(year=2014, month=1, day=1).isocalendar()[1]
</code></pre>
<p>This retrieves the second member of the tuple returned by isocalendar for our week number.</p>
<p>However, if you are going to be using date functions that deal in the Gregorian calendar, isocalendar alone will not work!  Take the following example:</p>
<pre><code>import datetime
date = datetime.datetime.strptime("2014-1-1", "%Y-%W-%w")
week = date.isocalendar()[1]
</code></pre>
<p>The string here says to return the Monday of the first week in 2014 as our date.  When we use isocalendar to retrieve the week number here, we would expect to get the same week number back, but we don't.  Instead we get a week number of 2.  Why?</p>
<p>Week 1 in the Gregorian calendar is the first week containing a Monday.  Week 1 in the isocalendar is the first week containing a Thursday.  The partial week at the beginning of 2014 contains a Thursday, so this is week 1 by the isocalendar, and making <code>date</code> week 2.</p>
<p>If we want to get the Gregorian week, we will need to convert from the isocalendar to the Gregorian.  Here is a simple function that does the trick.</p>
<pre><code>import datetime

def gregorian_week(date):
    # The isocalendar week for this date
    iso_week = date.isocalendar()[1]

    # The baseline Gregorian date for the beginning of our date's year
    base_greg = datetime.datetime.strptime('%d-1-1' % date.year, "%Y-%W-%w")

    # If the isocalendar week for this date is not 1, we need to 
    # decrement the iso_week by 1 to get the Gregorian week number
    return iso_week if base_greg.isocalendar()[1] == 1 else iso_week - 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try %W directive as below:</p>
<pre><code>d = datetime.datetime.strptime('2016-06-16','%Y-%m-%d')
print(datetime.datetime.strftime(d,'%W'))
</code></pre>
<p>'%W': Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53)</p>
</div>
<div class="post-text" itemprop="text">
<p>Look at <a href="http://docs.python.org/library/datetime.html#datetime.datetime.isocalendar" rel="noreferrer">datetime.datetime.isocalendar</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>isocalendar() returns incorrect year and weeknumber values for some dates:</p>
<pre><code>Python 2.7.3 (default, Feb 27 2014, 19:58:35) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import datetime as dt
&gt;&gt;&gt; myDateTime = dt.datetime.strptime("20141229T000000.000Z",'%Y%m%dT%H%M%S.%fZ')
&gt;&gt;&gt; yr,weekNumber,weekDay = myDateTime.isocalendar()
&gt;&gt;&gt; print "Year is " + str(yr) + ", weekNumber is " + str(weekNumber)
Year is 2015, weekNumber is 1
</code></pre>
<p>Compare with Mark Ransom's approach:</p>
<pre><code>&gt;&gt;&gt; yr = myDateTime.year
&gt;&gt;&gt; weekNumber = ((myDateTime - dt.datetime(yr,1,1)).days/7) + 1
&gt;&gt;&gt; print "Year is " + str(yr) + ", weekNumber is " + str(weekNumber)
Year is 2014, weekNumber is 52
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I summarize the discussion to two steps: </p>
<ol>
<li>Convert the raw format to a <code>datetime</code> object.</li>
<li>Use the function of a <code>datetime</code> object or a <code>date</code> object to calculate the week number.</li>
</ol>
<p><strong>Warm up</strong></p>
<p>```python</p>
<pre><code>from datetime import datetime, date, time
d = date(2005, 7, 14)
t = time(12, 30)
dt = datetime.combine(d, t)
print(dt)
</code></pre>
<p>```</p>
<p><strong>1st step</strong></p>
<p>To manually generate a <code>datetime</code> object, we can use <code>datetime.datetime(2017,5,3)</code> or <code>datetime.datetime.now()</code>.</p>
<p>But in reality, we usually need to parse an existing string. we can use <code>strptime</code> function, such as <code>datetime.strptime('2017-5-3','%Y-%m-%d')</code> in which you have to specific the format. Detail of different format code can be found in the <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">official documentation</a>. </p>
<p>Alternatively, a more convenient way is to use <a href="https://dateparser.readthedocs.io/" rel="nofollow noreferrer">dateparse</a> module. Examples are <code>dateparser.parse('16 Jun 2010')</code>, <code>dateparser.parse('12/2/12')</code> or <code>dateparser.parse('2017-5-3')</code></p>
<p>The above two approaches will return a <code>datetime</code> object. </p>
<p><strong>2nd step</strong></p>
<p>Use the obtained  <code>datetime</code> object to call <code>strptime(format)</code>. For example,</p>
<p>```python</p>
<pre><code>dt = datetime.strptime('2017-01-1','%Y-%m-%d') # return a datetime object. This day is Sunday
print(dt.strftime("%W")) # '00' Monday as the 1st day of the week. All days in a new year preceding the 1st Monday are considered to be in week 0.
print(dt.strftime("%U")) # '01' Sunday as the 1st day of the week. All days in a new year preceding the 1st Sunday are considered to be in week 0.
print(dt.strftime("%V")) # '52' Monday as the 1st day of the week. Week 01 is the week containing Jan 4.
</code></pre>
<p>```</p>
<p>It's very tricky to decide which format to use. A better way is to get a <code>date</code> object to call <code>isocalendar()</code>. For example,</p>
<p>```python</p>
<pre><code>dt = datetime.strptime('2017-01-1','%Y-%m-%d') # return a datetime object
d = dt.date() # convert to a date object. equivalent to d = date(2017,1,1), but date.strptime() don't have the parse function
year, week, weekday = d.isocalendar() 
print(year, week, weekday) # (2016,52,7) in the ISO standard
</code></pre>
<p>```</p>
<p>In reality, you will be more likely to use <code>date.isocalendar()</code> to prepare a weekly report, especially in the "Christmas-New Year" shopping season. </p>
<h1> </h1>
</div>
<div class="post-text" itemprop="text">
<pre><code>userInput = input ("Please enter project deadline date (dd/mm/yyyy/): ")

import datetime

currentDate = datetime.datetime.today()

testVar = datetime.datetime.strptime(userInput ,"%d/%b/%Y").date()

remainDays = testVar - currentDate.date()

remainWeeks = (remainDays.days / 7.0) + 1


print ("Please pay attention for deadline of project X in days and weeks are  : " ,(remainDays) , "and" ,(remainWeeks) , "Weeks ,\nSo  hurryup.............!!!") 
</code></pre>
</div>
<span class="comment-copy">@Donal: One looks at June 16, the other at June 26.</span>
<span class="comment-copy">Define week 1.  isocalendar() is not the only way to do it.</span>
<span class="comment-copy">Note that the output of <code>strftime("%U", d)</code> may differ from the <code>isocalendar()</code>. For example if you change the year to 2004 you'd get week 24 using <code>strftime()</code> and week 25 using <code>isocalendar()</code>.</span>
<span class="comment-copy">It would help if you explained the '<code>[1]</code>', or gave a pointer where to look for the information.</span>
<span class="comment-copy">I guess the easiest is extract the week number using strftime, best     import datetime     today = datetime.now()     week = today.strftime("%W")</span>
<span class="comment-copy">This is a little late. But on my machine, <code>date(2010, 1, 1).isocalendar()[1]</code> returns <code>53</code>. From the docs:  "For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that <code>date(2003, 12, 29).isocalendar() == (2004, 1, 1)</code> and <code>date(2004, 1, 4).isocalendar() == (2004, 1, 7)</code>."</span>
<span class="comment-copy"><code>isocalendar()</code> is great, but be sure it's what you want.  Today is a perfect example.  01/01/2016 is equal to <code>(2015, 53, 5)</code>.  <code>now.strftime("%W")</code> and <code>now.strftime("%U")</code> are equal to <code>00</code> which is often what is wanted.  <a href="https://docs.python.org/2/library/time.html#time.strftime" rel="nofollow noreferrer">STRFTIME examples</a></span>
<span class="comment-copy">nice one, I just added the now day I think it will be helpful, it was what I was serching for :D</span>
<span class="comment-copy">What are you quoting, some Linux manual? Python 2.7.5 and 3.3.2 say <code>Invalid format string</code> to this pattern. Their docs don't mention <code>%V</code> either.</span>
<span class="comment-copy">Sorry I didn't mention it, I've got from <a href="http://www.tutorialspoint.com/python/time_strftime.htm" rel="nofollow noreferrer">here</a>. It worked for me in Python 2.7.6.</span>
<span class="comment-copy">+1 for the link which explains the non-intuitive nature of ISO weeks.</span>
<span class="comment-copy">+1 for the URL to more information</span>
<span class="comment-copy">or %W if your weeks start on Mondays.</span>
<span class="comment-copy">This approach is better in cases where you don't want to split or convert a date which comes as a string... just pass the string in strptime in string format as it is and specify the format in second argument. Good solution. Remember: %W if week starts on Mondays.</span>
<span class="comment-copy">From the documentation of strftime('%U'): "Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0."</span>
<span class="comment-copy">Saying that isocalendar has "some interesting anomalies" at the  beginning and end of the year seems to be a bit of an understatement. isocalendar's results are very misleading (even if not actually incorrect under the ISO specification) for some datetime values, like December 29, 2014, 00:00:00, which according to isocalendar has a year value of 2015 and a weekNumber of 1 (see my entry below).</span>
<span class="comment-copy">@Kevin, it's not wrong, it's just that their definitions don't match yours. ISO decided two things: first that the entire week Monday through Sunday would be in the same year, second that the year containing most of the days would be the one assigned. This leads to days of the week around the beginning and end of the year that move into the adjoining year.</span>
<span class="comment-copy">Agreed. But by most people's definition, December 29 2014 will most definitely not be week 1 of the year 2015. I just wanted to draw attention to this potential source of confusion.</span>
<span class="comment-copy">Looking at some links about the iso8601 calendar (e.g., <a href="http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm" rel="nofollow noreferrer">staff.science.uu.nl/~gent0113/calendar/isocalendar.htm</a>), I see that the year and weeknumber values returned by isocalendar() are not "incorrect" as such. Under ISO8601, for example, the year 2004 started on December 29, 2003. So isocalendar() may be correct in returning a year of 2015 for Dec.29 2014, but for a lot of people's purposes, this is going to be pretty misleading.</span>
