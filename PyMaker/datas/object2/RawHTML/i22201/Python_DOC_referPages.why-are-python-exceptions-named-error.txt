<div class="post-text" itemprop="text">
<p>Why are Python exceptions named "Error" (e.g. <code>ZeroDivisionError</code>, <code>NameError</code>, <code>TypeError</code>)
and not "Exception" (e.g. <code>ZeroDivisionException</code>, <code>NameException</code>, <code>TypeException</code>).</p>
<p>I come from a Java background and started to learn Python recently, as such this is confusing because in Java there is a distinction between errors and exceptions.</p>
<p>Is there a difference in Python also or not?</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>You don't name each class with 'Class' in name and each variable with '_variable' in name. The same name you don't name exception using the word 'Exception'. The name should tell something about the meaning of the object. 'Error' is the meaning of most of the exceptions.</p></li>
<li><p>Not all Exceptions are Errors. <code>SystemExit</code>, <code>KeyboardInterrupt</code>, <code>StopIteration</code>, <code>GeneratorExit</code> are all exceptions and not errors. The word 'Error' in actual errors shows the difference.</p></li>
<li><p>'Error' is shorter than 'Exception'. Than can save a few characters in the code width with no loss in meaning. That makes some difference. </p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I believe this convention comes from <a href="https://www.python.org/dev/peps/pep-0008/#exception-names" rel="noreferrer">PEP 8 - Style Guide for Python Code</a>:</p>
<blockquote>
<h3>Exception Names</h3>
<p>Because exceptions should be classes, the class naming convention
  applies here.  However, you should use the suffix "Error" on your
  exception names (if the exception actually is an error).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python is fairly similar to Java in this respect. But Python's Exception should be compared to Java's Throwable. </p>
<p>As Throwables come in all kinds of flavors - Error, RuntimeException and (checked) Exception - so do Python's (though no checked exceptions).</p>
<p>As for the language, an Error is exceptional, so that inheritance hierarchy is not strange.</p>
<p>I don't particularly like the name Exception though. Exceptions are not only used for exceptional circumstances (like hopefully Errors) but also to just get out of the control flow. Because that is what a Exception does; it jumps out of the normal flow of control to a marked point. A bit like a goto, but more refined.</p>
<p>That said, every time you have a situation in which no suitable return value can be found you tend to use an Exception. Both in Python as in Java. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Q. Why are Python exceptions named “Error”?</p>
</blockquote>
<p>I surmise this is because <em>most</em> Python exceptions are classified as either <strong>errors</strong> or <strong>warnings</strong>. If the names of Python exceptions were to end with <code>Exception</code>, this distinction would not be possible.</p>
<p>Examples of warnings are <code>DeprecationWarning</code> and <code>ImportWarning</code>.</p>
<p>Please see the <a href="https://docs.python.org/2/library/exceptions.html#exception-hierarchy" rel="nofollow">the 2.x class hierarchy for built-in exceptions</a> as well as that for <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow">3.x</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's just naming. In Java, you have <code>java.lang.Error</code> distinct from other <code>Throwable</code>s because those kinds of errors need to be unchecked. In Python, all exceptions are unchecked, so the distinction is kind of pointless.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Simply put:</strong></p>
<ul>
<li>Python exceptions are NOT named "Error".</li>
<li>Python errors are named "Error".</li>
<li>Python errors can be raised, caught, and handled as exceptions.</li>
<li>Something that begins as an error can end up being a handled exception that does not result in an error message.</li>
<li>An <code>Exception</code> can also be raised directly</li>
</ul>
<p><strong>Concept:</strong></p>
<blockquote>
<p>I normally do this thing but I'm going to make an exception</p>
</blockquote>
<p><strong>OR</strong></p>
<p>This would normally be an error, but we're going to make an exception, catch it, and performing some procedure.</p>
<p><strong>Details:</strong></p>
<p>Exceptions vs Errors:</p>
<p><a href="https://docs.python.org/2/tutorial/errors.html" rel="nofollow noreferrer">https://docs.python.org/2/tutorial/errors.html</a></p>
<blockquote>
<p>Errors detected during execution are called <em>exceptions</em> and are not
  unconditionally fatal</p>
</blockquote>
<p>Workflow:</p>
<ul>
<li>The program monitors for errors.</li>
<li>If an error occurs but is NOT detected by the program during execution, it results in an error message.</li>
<li>If an error occurs and is detected by the program during execution, it is an exception.</li>
<li>Exceptions can be handled by the program.  They can be handled gracefully or result in an error message.</li>
<li>Exceptions that are NOT handled by the program are <em>unhandled</em>(<em>uncaught</em>) exceptions and become error messages.</li>
</ul>
</div>
<span class="comment-copy"><i>Not all Exceptions are Errors</i>: Indeed, there are a number of exceptions that derive from an exception class named <code>Warning</code>. Please see <a href="http://stackoverflow.com/a/28971626/1497596">my answer</a>.</span>
<span class="comment-copy">This is a great visualization <a href="https://docs.python.org/2/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">docs.python.org/2/library/exceptions.html#exception-hierarchy</a></span>
<span class="comment-copy">Up-to-date visualization for Python3 is here: <a href="https://docs.python.org/3.6/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">docs.python.org/3.6/library/exceptions.html#exception-hierarchy</a></span>
<span class="comment-copy">-1; I don't feel like this offers any useful insight. You talk about 'exceptional circumstances' without defining them clearly, you give a description of how exceptions work ("jump out of the normal flow of control to a marked point") that isn't really accurate, you invoke the distinction between Error and RuntimeException in Java as if some similar distinction exists in Python (it doesn't), and you never actually address the question of why Python's exceptions often have <code>Error</code> in their name.</span>
<span class="comment-copy">The base class is called Exception (see my comment on the other answer) so why not name the children Exception too?</span>
<span class="comment-copy">@Elena: Because then you would finally end up with something like <code>class ExceptionHandlingException extends RuntimeException</code> and that's just horrible to read.</span>
<span class="comment-copy">Apart from other reasons posted by others, keep in mind the naming in the Python standard library isn't always consistent.</span>
