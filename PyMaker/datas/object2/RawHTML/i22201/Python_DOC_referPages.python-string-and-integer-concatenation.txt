<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2823211/making-a-string-out-of-a-string-and-an-integer-in-python">Making a string out of a string and an integer in Python [duplicate]</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I want to create string using integer appended to it, in a for loop.  Like this:</p>
<pre><code>for i in range(1,11):
  string="string"+i
</code></pre>
<p>But it returns an error:</p>
<pre><code>TypeError: unsupported operand type(s) for +: 'int' and 'str'
</code></pre>
<p>What's the best way to concatenate the String and Integer?</p>
</div>
<div class="post-text" itemprop="text">
<h2>NOTE:</h2>
<p>The method used in this answer (backticks) is deprecated in later versions of Python 2, and removed in Python 3. Use the <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="noreferrer"><code>str()</code></a> function instead.</p>
<hr/>
<p>You can use :</p>
<pre><code>string = 'string'
for i in range(11):
    string +=`i`
print string
</code></pre>
<p>It will print <code>string012345678910</code>.</p>
<p>To get <code>string0, string1 ..... string10</code> you can use this as @YOU suggested</p>
<pre><code>&gt;&gt;&gt; string = "string"
&gt;&gt;&gt; [string+`i` for i in range(11)]
</code></pre>
<hr/>
<h1>Update as per Python3</h1>
<p>You can use :</p>
<pre><code>string = 'string'
for i in range(11):
    string +=str(i)
print string
</code></pre>
<p>It will print <code>string012345678910</code>.</p>
<p>To get <code>string0, string1 ..... string10</code> you can use this as @YOU suggested</p>
<pre><code>&gt;&gt;&gt; string = "string"
&gt;&gt;&gt; [string+str(i) for i in range(11)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range (1,10):
    string="string"+str(i)
</code></pre>
<p>To get <code>string0, string1 ..... string10</code>, you could do like</p>
<pre><code>&gt;&gt;&gt; ["string"+str(i) for i in range(11)]
['string0', 'string1', 'string2', 'string3', 'string4', 'string5', 'string6', 'string7', 'string8', 'string9', 'string10']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range[1,10]: 
  string = "string" + str(i)
</code></pre>
<p>The <code>str(i)</code> function converts the integer into a string.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>string = 'string%d' % (i,)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(11):
    string = "string{0}".format(i)
</code></pre>
<p>What you did (<code>range[1,10]</code>) is </p>
<ul>
<li>a TypeError since brackets denote an index (<code>a[3]</code>) or a slice (<code>a[3:5]</code>) of a list, </li>
<li>a SyntaxError since <code>[1,10]</code> is invalid, and </li>
<li>a double off-by-one error since <code>range(1,10)</code> is <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>, and you seem to want <code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code></li>
</ul>
<p>And <code>string = "string" + i</code> is a TypeError since you can't add an integer to a string (unlike JavaScript).</p>
<p>Look at the documentation for <a href="http://docs.python.org/tutorial/inputoutput.html#fancier-output-formatting" rel="noreferrer">Python's new string formatting method</a>, it is very powerful.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator to do this ! </p>
<pre><code>def sequence_generator(limit):  
    """ A generator to create strings of pattern -&gt; string1,string2..stringN """
    inc  = 0
    while inc &lt; limit:
        yield 'string'+str(inc)
        inc += 1

# to generate a generator. notice i have used () instead of []
a_generator  =  (s for s in sequence_generator(10))

# to generate a list
a_list  =  [s for s in sequence_generator(10)]

# to generate a string
a_string =  '['+", ".join(s for s in sequence_generator(10))+']'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If we want output like <code>'string0123456789'</code> then we can use <code>map function</code> and <code>join</code> method of string. </p>
<pre><code>&gt;&gt;&gt; 'string'+"".join(map(str,xrange(10)))
'string0123456789'
</code></pre>
<p>If we want List of string values then use <code>list comprehension</code> method. </p>
<pre><code>&gt;&gt;&gt; ['string'+i for i in map(str,xrange(10))]
['string0', 'string1', 'string2', 'string3', 'string4', 'string5', 'string6', 'string7', 'string8', 'string9']
</code></pre>
<p><strong>Note:</strong></p>
<p>Use <code>xrange()</code> for Python 2.x</p>
<p>USe <code>range()</code> for Python 3.x</p>
</div>
<div class="post-text" itemprop="text">
<p>I did something else.
I wanted to replace a word, in lists off lists, that contained phrases.
I wanted to replace that sttring / word with a new word that will be a join between string and number, and that number / digit will indicate the position of the phrase / sublist / lists of lists. </p>
<p>That is, I replaced a string with a string and an incremental number that follow it. </p>
<pre><code>    myoldlist_1=[[' myoldword'],[''],['tttt myoldword'],['jjjj ddmyoldwordd']]
        No_ofposition=[]
        mynewlist_2=[]
        for i in xrange(0,4,1):
            mynewlist_2.append([x.replace('myoldword', "%s" % i+"_mynewword") for x in myoldlist_1[i]])
            if len(mynewlist_2[i])&gt;0:
                No_ofposition.append(i)
mynewlist_2
No_ofposition
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Concatenation of a string and integer is simple:
just use</p>
<pre><code>abhishek+str(2)
</code></pre>
</div>
<span class="comment-copy">Shouldn<code>t it be </code>range(1,10)`?</span>
<span class="comment-copy">Your question is unclear. What is it the output you want to get? <code>string = "string10"</code>? <code>string = "string1string2string3string4string5string6string7string8string9string10"</code>? Ten different variables?</span>
<span class="comment-copy">@stephan: +1, but it should be <code>range(1,11)</code> :)</span>
<span class="comment-copy">@Tim: maybe even <code>range(11)</code> looking at the comment...</span>
<span class="comment-copy">@stephan: Ha, you're right :)</span>
<span class="comment-copy">if i input this: <code>47</code>, then why do i get this in my string:<code>u'47'</code></span>
<span class="comment-copy">This answer is outdated. Backticks are outdated and have been removed in Python 3. See <a href="http://stackoverflow.com/questions/1673071/what-do-backticks-mean-to-the-python-interpreter-num">this question</a> for more details. The other answers to this question are better solutions.</span>
<span class="comment-copy">@RogerFan, yeah right! Don't know, how my answer got this many upvotes o_o Didn't expect this!</span>
<span class="comment-copy">Backticks are the equivalent of the <code>repr()</code> function, not <code>str()</code>. For non-integer values, the <code>repr()</code> and <code>str()</code> results can differ significantly.</span>
<span class="comment-copy">SyntaxError: invalid syntax</span>
<span class="comment-copy">Backticks are all sorts of silly.</span>
<span class="comment-copy">It's still worth mentioning that backticks are equivalent to <code>repr()</code>, not <code>str()</code>.</span>
<span class="comment-copy">Bastien, Thanks for the note, but I think I don't put it back again.</span>
<span class="comment-copy">Mmh, I tried to remove my vote (just a test), and then vote again; the vote is suppressed but I can't upvote it anymore... ("Your vote is now locked in unless this answer is edited")</span>
<span class="comment-copy">@Bastien, yeah, there is 5 minutes window to undo up/downvotes, but once its over, its stuck and can't do different vote until next edit. I think thats by-design</span>
<span class="comment-copy">you only need to use a list for formatting when you have more than one format specifier, otherwise, it's ugly :)</span>
<span class="comment-copy">That's not a list, that's a tuple. And you also need it if the single item to be formatted is itself a tuple.</span>
<span class="comment-copy">(Correction: If you do <code>range={(1,10): "foo"}</code>, then <code>range[1,10]</code> is in fact a syntactically valid expression.)</span>
<span class="comment-copy">format your answer properly</span>
