<div class="post-text" itemprop="text">
<p>I'm trying to run a piece of python code using exec.</p>
<pre><code>my_code = """
class A(object):
  pass

print 'locals: %s' % locals()
print 'A: %s' % A

class B(object):
  a_ref = A
"""

global_env = {}
local_env = {}
my_code_AST = compile(my_code, "My Code", "exec")
exec(my_code_AST, global_env, local_env)

print local_env
</code></pre>
<p>which results in the following output</p>
<pre><code>locals: {'A': &lt;class 'A'&gt;}
A: &lt;class 'A'&gt;
Traceback (most recent call last):
  File "python_test.py", line 16, in &lt;module&gt;
    exec(my_code_AST, global_env, local_env)
  File "My Code", line 8, in &lt;module&gt;
  File "My Code", line 9, in B
NameError: name 'A' is not defined
</code></pre>
<p>However, if I change the code to this -</p>
<pre><code>my_code = """
class A(object):
  pass

print 'locals: %s' % locals()
print 'A: %s' % A

class B(A):
  pass
"""

global_env = {}
local_env = {}
my_code_AST = compile(my_code, "My Code", "exec")
exec(my_code_AST, global_env, local_env)

print local_env
</code></pre>
<p>then it works fine - giving the following output -</p>
<pre><code>locals: {'A': &lt;class 'A'&gt;}
A: &lt;class 'A'&gt;
{'A': &lt;class 'A'&gt;, 'B': &lt;class 'B'&gt;}
</code></pre>
<p>Clearly A is present and accessible - what's going wrong in the first piece of code? I'm using 2.6.5, cheers,</p>
<p>Colin</p>
<p><strong>* UPDATE 1 *</strong></p>
<p>If I check the locals() inside the class -</p>
<pre><code>my_code = """
class A(object):
  pass

print 'locals: %s' % locals()
print 'A: %s' % A

class B(object):
  print locals()
  a_ref = A
"""

global_env = {}
local_env = {}
my_code_AST = compile(my_code, "My Code", "exec")
exec(my_code_AST, global_env, local_env)

print local_env
</code></pre>
<p>Then it becomes clear that locals() is not the same in both places -</p>
<pre><code>locals: {'A': &lt;class 'A'&gt;}
A: &lt;class 'A'&gt;
{'__module__': '__builtin__'}
Traceback (most recent call last):
  File "python_test.py", line 16, in &lt;module&gt;
    exec(my_code_AST, global_env, local_env)
  File "My Code", line 8, in &lt;module&gt;
  File "My Code", line 10, in B
NameError: name 'A' is not defined
</code></pre>
<p>However, if I do this, there is no problem -</p>
<pre><code>def f():
  class A(object):
    pass

  class B(object):
    a_ref = A

f()

print 'Finished OK'
</code></pre>
<p><strong>* UPDATE 2 *</strong></p>
<p>ok, so the docs here - <a href="http://docs.python.org/reference/executionmodel.html" rel="noreferrer">http://docs.python.org/reference/executionmodel.html</a></p>
<p><i>'A class definition is an executable statement that may use and define names. These references follow the normal rules for name resolution. The namespace of the class definition becomes the attribute dictionary of the class. Names defined at the class scope are not visible in methods.'</i></p>
<p>It seems to me that 'A' should be made available as a free variable within the executable statement that is the definition of B, and this happens when we call f() above, but not when we use exec().  This can be more easily shown with the following -</p>
<pre><code>my_code = """
class A(object):
  pass

print 'locals in body: %s' % locals()
print 'A: %s' % A

def f():
  print 'A in f: %s' % A

f()

class B(object):
  a_ref = A
"""
</code></pre>
<p>which outputs</p>
<pre><code>locals in body: {'A': &lt;class 'A'&gt;}
A: &lt;class 'A'&gt;
Traceback (most recent call last):
  File "python_test.py", line 20, in &lt;module&gt;
    exec(my_code_AST, global_env, local_env)
  File "My Code", line 11, in &lt;module&gt;
  File "My Code", line 9, in f
NameError: global name 'A' is not defined
</code></pre>
<p>So I guess the new question is - why aren't those locals being exposed as free variables in functions and class definitions - it seems like a pretty standard closure scenario.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, I believe it's either an implementation bug or an undocumented design decision. The crux of the issue is that a name-binding operation in the module-scope should bind to a global variable. The way it is achieved is that when in the module level, globals() IS locals() (try that one out in the interpreter), so when you do any name-binding, it assigns it, as usual, to the locals() dictionary, which is also the globals, hence a global variable is created.</p>
<p>When you look up a variable, you first check your current locals, and if the name is not found, you recursively check locals of containing scopes for the variable name until you find the variable or reach the module-scope. If you reach that, you check the globals, which are supposed to be the module scope's locals.</p>
<pre><code>&gt;&gt;&gt; exec(compile("import sys\nprint sys._getframe().f_code.co_name", "blah", "exec"), {}, {})
&lt;module&gt;
&gt;&gt;&gt; exec("a = 1\nclass A(object):\n\tprint a\n", {}, {})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 2, in &lt;module&gt;
  File "&lt;string&gt;", line 3, in A
NameError: name 'a' is not defined
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; exec("a = 1\nclass A(object):\n\tprint a\n", d,d)
1
</code></pre>
<p>This behavior is why inheritance worked (The name-lookup used code object's scope locals(), which indeed had A in it).</p>
<p>In the end, it's an ugly hack in the CPython implementation, special-casing globals lookup. It also causes some nonsensical artifical situations - e.g.:</p>
<pre><code>&gt;&gt;&gt; def f():
...     global a
...     a = 1
...
&gt;&gt;&gt; f()
&gt;&gt;&gt; 'a' in locals()
True
</code></pre>
<p>Please note that this is all my inference based on messing with the interpreter while reading section 4.1 (Naming and binding) of the python language reference. While this isn't definitive (I haven't opened CPython's sources), I'm fairly sure I'm correct about the behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>After <code>print locals()</code> and <code>globals()</code>,you will find the reason why exec throws "not defined" exception, and you can try this</p>
<pre><code>d = dict(locals(), **globals())
exec (code, d, d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your question is how to get the <code>exec</code> statement to behave like the file scope, I followed some hints in the linked question and bug and got it working by passing a single dictionary for globals and locals. Apparently the file scope is a special case where local declarations are automatically placed in the global scope.</p>
<pre><code>exec code in dict()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_code = """
class A(object):
    pass

class B(object):
    a = A
"""

my_code_AST = compile(my_code, "My Code", "exec")
extra_global = "hi"
global_env = {}
exec my_code_AST in global_env
print "global_env.keys() =", global_env.keys()
print "B.a =", global_env["B"].a
</code></pre>
<p>prints</p>
<pre><code>global_env.keys() = ['__builtins__', 'A', 'B']
B.a = &lt;class 'A'&gt;
</code></pre>
<p>Hawkett, you say,</p>
<blockquote>
<p>the main reason I wanted to use locals like that, was to get all the stuff defined in the code string, without all the other stuff that python puts in the globals.</p>
</blockquote>
<p>With exec, if your globals don't have <code>__builtins__</code> defined, exec adds one item, <code>__builtins__</code> to your globals, so you get A, B, and <code>__builtins__</code>.  <code>__builtins__</code> itself is a big dictionary, but it's always the same one element to delete (as long as you wait until your code is finished using it before you delete it!).  Documented under exec() <a href="http://docs.python.org/release/2.6.6/library/functions.html" rel="nofollow" title="The exec statement">here</a>.</p>
<p>The docs for eval under <a href="http://docs.python.org/release/2.6.6/library/functions.html" rel="nofollow" title="Built-in functions">built in functions</a> say </p>
<blockquote>
<p>If the globals dictionary is present and lacks ‘<strong>builtins</strong>’, the current globals are copied into globals before expression is parsed.</p>
</blockquote>
<p>But actually it seems only to copy <code>__builtins__</code> in.</p>
<p>(And n.b. what everyone else said: either set globals and locals the same or say <code>exec my_code_AST in global_env</code> without a separate local_env.)</p>
</div>
<span class="comment-copy">Nice. Never noticed that.</span>
<span class="comment-copy">It seems to be the same issue as in this question: <a href="http://stackoverflow.com/questions/2749655/why-are-closures-broken-within-exec" title="why are closures broken within exec">stackoverflow.com/questions/2749655/…</a></span>
<span class="comment-copy">thanks for the pointer - I'm not a python guru, but it appears that when I print the locals(), A <i>has</i> been compiled to a local variable - i.e. it does know what to do with it. The answer in the question you highlighted says -   'There's no way for compile to know that a is a freevar, so it compiles it to a global reference'  The problem here seems to be that locals() is redefined inside the body of B when using exec, but not when using a function (see update in question)? Could easily be my misunderstanding of the implications of that answer though...</span>
<span class="comment-copy">I've added a second update to the question which clarifies things a fair bit - at least what is happening, but still not why.</span>
<span class="comment-copy">Ok - thanks for that info - that's a hassle :) the main reason I wanted to use locals like that, was to get all the stuff defined in the code string, without all the other stuff that python puts in the globals. If I 'print globals()' inside that code, its a big dictionary of stuff, which makes sense, but now I'm at a loss as to how to get just the stuff that was defined in the code string into a dictionary - i.e. a dictionary with just {'A', &lt;class ..&gt;, 'B', &lt;class ...&gt;} in it. I don't want to have to manually strip everything out, and I don't know in advance what's in the code string.</span>
<span class="comment-copy">I'm going to mark this question answered - I filed a python bug here - <a href="http://bugs.python.org/issue8819" rel="nofollow noreferrer">bugs.python.org/issue8819</a> - cheers.</span>
<span class="comment-copy">The bug I filed was a duplicate. I've made an argument for this to be fixed in 2.6+ here - <a href="http://bugs.python.org/issue991196" rel="nofollow noreferrer">bugs.python.org/issue991196</a></span>
<span class="comment-copy">Looks like this is now a 'wont fix' issue. I think that the exec API is very misleading with bad defaults.</span>
<span class="comment-copy">I recommend <a href="https://docs.python.org/3/library/runpy.html" rel="nofollow noreferrer">runpy</a>. Much better api</span>
<span class="comment-copy">This is the only response where you can ship and receive globals / locals back. Fantastic answer. You can then use d as the basis of accessing variables from the child code. d['status'] if you had status={} in your code. Thank you @Zoe</span>
