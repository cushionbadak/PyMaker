<div class="post-text" itemprop="text">
<p>I have a bunch of <strong>C</strong> macros the operation of which I need to simulate in python. I saw some pointers to pygccxml or ctypeslib etc. Are these the ways to go? Or is there something out there that is better ?</p>
<p>The <strong>C</strong> macros if and when they change, I would like the python implementation to be auto generated rather than having to make manual modifications. Hence the question.</p>
<p><strong>my_c_header.h</strong>:</p>
<pre><code>#ifdef OS

#define NUM_FLAGS   (uint16_t)(3)
#define NUM_BITS    (uint16_t)(8)

#else

#define NUM_FLAGS   (uint16_t)(6)
#define NUM_BITS    (uint16_t)(16)
#endif

#define MAKE_SUB_FLAGS    (uint16_t)((1&lt;&lt;NUMFLAGS) -1)

#define MAKE_TOTAL_FLAGS(x)  (uint16_t)((x &amp; MAKE_SUB_FLAGS) &gt;&gt; NUM_BITS)

/* #defines type 2 */

#ifdef OS
#DO_SOMETHING(X)  os_specifc_process(x)
#else
#DO_SOMETHING(x)  
#endif

/* #defines type 3 */

enum
{
CASE0,
CASE1,
CASE2
}

#define MY_CASE_0     ((uint16_t)CASE0)
#define MY_CASE_1     ((uint16_t)CASE1)
#define MY_CASE_2     ((uint16_t)CASE2)


/*End of file &lt;my_c_header.h&gt; */
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are writing an extension module, use <a href="https://docs.python.org/3/c-api/module.html#c.PyModule_AddIntMacro" rel="nofollow noreferrer">https://docs.python.org/3/c-api/module.html#c.PyModule_AddIntMacro</a></p>
</div>
<span class="comment-copy">How complex are these macros?  Macros in C can of course be anything (as they're just textual substitution), but generally "sane" ones can be quite simple, perhaps merely mathematical expressions with limited or no calls to functions.  What do yours look like?  (Examples?)</span>
<span class="comment-copy">@Peter I have added examples</span>
<span class="comment-copy">It would also help to understand more about what you're doing: is this for automated testing or something like that?  I made a <code>parse_c.py</code> for testing some 68HC12 code (embedded CPU) that can handle stuff about the complexity of what you show.  Within certain limits, it handles enums, structs (building ctypes Structures), and evaluates (using Python eval) macros as you show above.  It's crude, but depending on your needs it may be about what you want (with some work).  Eli Bendersky's <a href="http://code.google.com/p/pycparser/" rel="nofollow noreferrer">code.google.com/p/pycparser</a> may be a good place to start: I'd begin there if I were to start over.</span>
<span class="comment-copy">It would have been a case of simply using pre-existing C libraries from Python code using 'ctypes' or similar, except for the complication brought  in by the need to calculate parameters passed into the C library API using the header of the form posted in the orignal message. Any suggestions ?</span>
<span class="comment-copy">This question has been answered in another thread later    <a href="http://stackoverflow.com/questions/12147394/how-can-i-reference-defines-in-a-c-file-from-python" title="how can i reference defines in a c file from python">stackoverflow.com/questions/12147394/â€¦</a></span>
