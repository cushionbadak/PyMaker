<div class="post-text" itemprop="text">
<p>The following code returns "TypeError", the part of code that is causing the problem i think is
 "available_boilers = db.session.query(Boilers.name).all()boiler_list = [(b.name) for b in available_boilers]" 
where boiler list should be iterated over to form a drop down list in the form. I am using Flask-Bootstrap quick form to display the list so I dont think my problem is there, To check that a list is being sent I checked tis part of the code in shell</p>
<pre><code>@bp.route('/control/addboiler_circuit', methods=('GET', 'POST'))
def addboiler_circuit():
    available_boilers = db.session.query(Boilers.name).all()
    boiler_list = [(b.name) for b in available_boilers]
    form = AddBoiler_CircuitForm()
    form.name.choices = boiler_list
    if form.validate_on_submit():
        boiler_circuits = Boilers_Circuit(name=form.name.data,\
                          BoilerName=form.BoilerName.data)
        db.session.add(boilers_circuits)
        db.session.commit()
        flash('Congratulations, you have now a registered a new boiler 
      circuit!')
        return redirect(url_for('control.addboiler_circuit'))
    return render_template('control/addboiler_circuit.html', title='Add boiler',
                       form=form)
</code></pre>
<p>form.py</p>
<pre><code>class AddBoiler_CircuitForm(FlaskForm):
name = StringField('Name', validators=[DataRequired()])
BoilerName = SelectField('BoilerName', coerce=int, validators=[DataRequired()])

def validate_boilerName(self, boilerName):
    boilers = Boilers_Circuit.query.filter_by(boiler=BoilerName.data).first()
    if boilers is not None:
        raise ValidationError('Please use a different Boiler.')
</code></pre>
<p>python shell</p>
<pre><code>&gt;&gt;&gt; available_boilers = db.session.query(Boilers.name).all()
&gt;&gt;&gt; print(available_boilers)
[('Log Burner',), ('solar panel',), ('pellet boiler',)]
&gt;&gt;&gt; boiler_list = [(b.name) for b in available_boilers]
&gt;&gt;&gt; print(boiler_list)
['Log Burner', 'solar panel', 'pellet boiler']
</code></pre>
<p>My code comes from <a href="https://wtforms.readthedocs.io/en/stable/fields.html" rel="nofollow noreferrer">WTForms</a> and from <a href="https://stackoverflow.com/questions/46921823/dynamic-choices-wtforms-flask-selectfield?rq=1">Dynamic choices WTForms Flask SelectField</a></p>
<p>This is new territory for me and I am a in need of help</p>
<p>EDIT
Here is the complete error message</p>
<pre><code>&gt; Traceback (most recent call last):
1/File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/app.py", 
line 2309, in __call__
return self.wsgi_app(environ, start_response)
2/ File "/home/pi/heating/venv/lib/python3.7/site- 
packages/flask/app.py", 
line 2295, in wsgi_app
response = self.handle_exception(e)
3/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/app.py", line 1741, in handle_exception
reraise(exc_type, exc_value, tb)
4/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/_compat.py", line 35, in reraise
raise value
5/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/app.py", line 2292, in wsgi_app
response = self.full_dispatch_request()
6/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/app.py", line 1815, in full_dispatch_request
rv = self.handle_user_exception(e)
7/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/app.py", line 1718, in handle_user_exception
reraise(exc_type, exc_value, tb)
8/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/_compat.py", line 35, in reraise
raise value
9/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/app.py", line 1813, in full_dispatch_request
rv = self.dispatch_request()
10/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/app.py", line 1799, in dispatch_request
return self.view_functions[rule.endpoint](**req.view_args)
11/ File "/home/pi/heating/homeHeating/control/control.py", line 49, in addboiler_circuit
form=form)
12/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/templating.py", line 135, in render_template
context, ctx.app)
13/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask/templating.py", line 117, in _render
rv = template.render(context)
14/ File "/home/pi/heating/venv/lib/python3.7/site-packages/jinja2/asyncsupport.py", line 76, in render
return original_render(self, *args, **kwargs)
15/ File "/home/pi/heating/venv/lib/python3.7/site-packages/jinja2/environment.py", line 1008, in render
return self.environment.handle_exception(exc_info, True)
16/ File "/home/pi/heating/venv/lib/python3.7/site-packages/jinja2/environment.py", line 780, in handle_exception
reraise(exc_type, exc_value, tb)
17/ File "/home/pi/heating/venv/lib/python3.7/site-packages/jinja2/_compat.py", line 37, in reraise
raise value.with_traceback(tb)
18/ File "/home/pi/heating/homeHeating/templates/control/addboiler_circuit.html", line 2, in top-level template code
{% import 'bootstrap/wtf.html' as wtf %}
19/ File "/home/pi/heating/homeHeating/templates/base.html", line 1, 
 in top-level template code  {% extends 'bootstrap/base.html' %}
20/ File "/home/pi/heating/venv/lib/python3.7/site- 
  packages/flask_bootstrap/templates/bootstrap/base.html", line 1, in 
top-level template code
{% block doc -%}
21/ File "/home/pi/heating/venv/lib/python3.7/site- 
packages/flask_bootstrap/templates/bootstrap/base.html", line 4, in 
 block "doc"
{%- block html %}
21/ File "/home/pi/heating/venv/lib/python3.7/site- 
packages/flask_bootstrap/templates/bootstrap/base.html", line 20, in 
block 
"html"
 {% block body -%}
22/ File "/home/pi/heating/venv/lib/python3.7/site- 
packages/flask_bootstrap/templates/bootstrap/base.html", line 23, in 
block "body"
{% block content -%} 23/File"/home/pi/heating/homeHeating/templates/control/addboiler_circuit.html", line 8, in block "content" {{ wtf.quick_form(form) }}
24/ File "/home/pi/heating/venv/lib/python3.7/site-packages/jinja2/runtime.py", line 579, in _invoke rv = self._func(*arguments)
25/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask_bootstrap/templates/bootstrap/wtf.html", line 205, in template {{ form_field(field,
26/ File "/home/pi/heating/venv/lib/python3.7/site-packages/jinja2/runtime.py", line 579, in _invoke rv = self._func(*arguments)
27/ File "/home/pi/heating/venv/lib/python3.7/site-packages/flask_bootstrap/templates/bootstrap/wtf.html", line 123, in template {{field(class="form-control", **kwargs)|safe}}
28/ File "/home/pi/heating/venv/lib/python3.7/site packages/wtforms/fields/core.py", line 155, in __call__ return self.meta.render_field(self, kwargs)
29/ File "/home/pi/heating/venv/lib/python3.7/site packages/wtforms/meta.py", line 56, in render_field return field.widget(field, **render_kw)
30/ File "/home/pi/heating/venv/lib/python3.7/site packages/wtforms/widgets/core.py", line 323, in __call__ for val, label, selected in field.iter_choices():
31/ File "/home/pi/heating/venv/lib/python3.7/site packages/wtforms/fields/core.py", line 454, in iter_choices for value, label in self.choices:
TypeError: 'NoneType' object is not iterable
</code></pre>
<p>This is the full error script, Line 23/ mentions my form "addboiler_circuit.html" which I have added below:</p>
<pre><code>{% extends "base.html" %}
{% import 'bootstrap/wtf.html' as wtf %}

{% block content %}
    &lt;h1&gt;{{ 'Register' }}&lt;/h1&gt;
    &lt;div class="row"&gt;
        &lt;div class="col-md-4"&gt;
            {{ wtf.quick_form(form) }}
        &lt;/div&gt;
    &lt;/div&gt;
{% endblock %}
</code></pre>
<p>Thank you for taking a look at my problem
regards Paul</p>
<p>EDIT 30/03/2019
This is a bit more complicated than I had shown, I eventually finished with this:</p>
<pre><code>@bp.route('/control/addboiler_circuit', methods=('GET', 'POST'))
def addboiler_circuit():
    boiler_list = [(b.id, b.id) for b in db.session.query(Boilers).all()]
    sensorID_list = [(s.id, s.sensorID) for s in db.session.query(Sensors).all()]
    valveID_list = [(p.id, p.name) for p in db.session.query(Pins).all()]
    form = AddBoiler_CircuitForm()
    form.boiler_ID.choices = boiler_list
    form.sensor_ID1.choices = sensorID_list
    form.sensor_ID2.choices = sensorID_list
    form.sensor_ID3.choices = sensorID_list
    form.pin_ID1.choices = valveID_list
    form.pin_ID2.choices = valveID_list
    form.pin_ID3.choices = valveID_list
    if form.validate_on_submit():
        boilercircuits = Boilercircuit(name=form.name.data,\
       boiler_ID=form.boiler_ID.data,sensor_ID1=form.sensor_ID1.data,\
     sensor_ID2=form.sensor_ID2.data,sensor_ID3=form.sensor_ID3.data,\
       pin_ID1=form.pin_ID1.data,pin_ID2=form.pin_ID2.data,\
                   pin_ID3=form.pin_ID3.data)
        db.session.add(boilercircuits)
        db.session.commit()
        flash('Congratulations, you have now a registered a new boiler circuit!')
        return redirect(url_for('control.addboiler_circuit'))
    return render_template('control/addboiler_circuit.html', title='Add boiler',
                       form=form)
</code></pre>
<p>Now @sleblanc has come up with a whole new way to write this function, but how do I put that into place? I have so many questions I dont know where to begin. Thank you for your help.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>31/ File "/home/pi/heating/venv/lib/python3.7/site packages/wtforms/fields/core.py", line 454, in iter_choices for value, label in self.choices:
TypeError: 'NoneType' object is not iterable
</code></pre>
<p>This tells us that your form does not have the choices set for the boilerName field. In your code, it seems like you are doing it, but upon closer inspection, you are setting choices on the <code>name</code> field rather than the <code>boilerName</code> field.</p>
<p>There are other issues with your code, too. <code>Choices</code> should be a list of <code>(id, 'label')</code> tuples. If your model refers to a literal string, then you may simply do <code>[(b.name, b.name) for b in available_boilers]</code>.</p>
<p>Also, since you are using flask_wtf, you should rewrite your views this way to make them clearer:</p>
<pre><code>@bp.route('/control/addboiler_circuit', methods=('GET', 'POST'))
def addboiler_circuit():
    available_boilers = Boilers.query.all()
    boiler_list = [(b.name) for b in available_boilers]

    obj = Circuit() # you may pass default parameters to this constructor
    form = AddBoiler_CircuitForm(request.form, obj=obj)
    form.name.choices = boiler_list

    if form.validate_on_submit():
        form.populate(obj)
        db.session.add(obj)
        db.session.commit()

        flash('Congratulations, you have now a registered a new '
              'boiler circuit!')

        return redirect(url_for('control.addboiler_circuit'))

    return render_template('control/addboiler_circuit.html', title='Add boiler',
                   form=form)
</code></pre>
<p>Furthermore, consider using WTForms-SQLAlchemy's QuerySelectField to populate the choices, it saves you from some more boilerplate:</p>
<pre><code>from wtforms_sqlalchemy.fields import QuerySelectField

class AddBoiler_CircuitForm(FlaskForm):
    name = StringField('Name', validators=[DataRequired()])
    boiler = QuerySelectField(
                'Boiler name', 
                query_factory=lambda: Boiler.query.all(),
                validators=[DataRequired()])
</code></pre>
<p>By setting a relationship named "boiler" on your Circuit model, the form's populate_obj will do exactly what you expect it to do. QuerySelectField will even ensure that the user's choice is contained in the query that you provide it, thus preventing crafty users from editing the HTML form and submitting disallowed values.</p>
</div>
<span class="comment-copy">Thank you @sleblanc, Just when I thought I have understood what I am doing, You have come along and turned it all upside down, &gt;then you may simply do [(b.name, b.name) for b in available_boilers]. I have done this, But I can see now that every thing I learnt from different tutorials may not be correct, What you have written above is much clearer, But I dont think I have seen it anywhere before. i will put it into my code and let you know what happens. Its a shame but this space is not ment to be used to say thank you to some stranger who has taken the time to help another stranger who is lost</span>
<span class="comment-copy">Hi @sleblanc, i have been looking at your advise above, and have given it a go, I have changed the view function to match and the combined two populate the fields, but with this &lt; boilers 1 &gt;  instead of '1' , so when i submit i get a "translate" error. I have looked at the wtforms-alchemy site and really like the look and as I have several questions concerning the setup I should ask a new question? Thanks again for your kind help</span>
<span class="comment-copy">Sure, post away! A new question seems in order. I am not sure what that "translate" error might mean.</span>
<span class="comment-copy">Looking into it, AttributeError, something something has no attribute "translate" probably means that some part of the form was manipulating an object while it was expecting a plain string.</span>
<span class="comment-copy">Hi @sleblanc, Before I post a new question, You have said that I can use the same view function for add and edit, But I have not understood how to do this could you please show me an example? &gt; qoute: You may easily change this "Edit sensor view" to a generic "create or edit sensor view" by handling cases where get(id) returns nothing, by creating a fresh instance of Sensors. obj = Sensors.query.get(id) or Sensors()/qoute I have not understood this! sorry</span>
