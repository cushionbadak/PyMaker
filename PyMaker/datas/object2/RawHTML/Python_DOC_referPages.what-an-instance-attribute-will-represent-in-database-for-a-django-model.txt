<div class="post-text" itemprop="text">
<p>Let say i have a model called foo:</p>
<pre><code>class Foo(models.Model):
    col_one = models.SomeFiled(...)
    col_two = models.SomeFiled(...)
</code></pre>
<p>Now i know col_one and col_two will represent columns in the database,but if i add the <strong>init</strong>() method to the model like so:</p>
<pre><code>class Foo(models.Model):
    col_one = models.SomeFiled(...)
    col_two = models.SomeFiled(...)
    def __init__(self):
        attr_one=value_one
</code></pre>
<p>Now each instance of Foo will represent a record in the Database,but what attr_one will represent for that particular record,is it like meta data associated with that record? is it going to be stored in the database when the object created for the first time?</p>
<p>I am new to both python and Django if my question is trivial.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your specific case, attr_one is a local variable just like in any python function that is gone once the function is done executing.</p>
<p>If on the other hand you meant <code>self.attr_one=...</code> then this would be a class instance attribute which would be lost once the object is destroyed. That is, it is only created when that function is called, it is accessible and defined as long as that same instance of the python object is used, but lost of you retrieve the same object from the database from scratch. </p>
<p>All that said, I would not override the <code>__init__</code> method of a django model. Especially not without calling super(). It will inhibit core django functionality and probably cause errors. </p>
</div>
<span class="comment-copy">I think you need to rephrase a bit. It is not clear what your question actually is. Perhaps you should also add an example. And please move the part with "i am new to both python and Django if my question is trivial." to its own sentence, or remove it completely.</span>
<span class="comment-copy"><code>attr_one</code> will only be available in the <b>init</b> method. If you meant to use <code>self.attr_one</code>, it's there as long as the instance is not garbage collected. It's not persisted anywhere in the DB if that's what you're asking.</span>
