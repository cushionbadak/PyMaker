<div class="post-text" itemprop="text">
<p>I am labeling transactional data with fiscal year ranges. For example, 2018-2019 fiscal has a date range of 7/1/2018 - 6/30/2019. For some reason, when I run the following code, any transaction that happened 7/1/2018 (first day of fiscal) it gets labeled 2017 - 2018 fiscal. Sample data provided as well. </p>
<pre><code>data = [['Start 17-18 Fiscal', '7/1/2017'], ['End 17-18 Fiscal', '6/30/2018'], ['Start 18-19 Fiscal', '7/1/2018'], 
        ['End 18-19 Fiscal', '6/30/2019'], ['Start 19-20 Fiscal', '7/1/2019'], ['End 19-20 Fiscal', '6/30/2020']]
df = pd.DataFrame(data, columns=['Correct Fiscal', 'Date'])

df['Date'] = pd.to_datetime(df['Date'])
y_max = df['Date'].dt.year.max() + 1
y_min = df['Date'].dt.year.min() - 1
labels = [str(x) + ' - ' + str(x+1) for x in np.arange(y_min, y_max, 1)]
df['pay_period'] = pd.cut(df.Date, pd.date_range(str(y_min), str(y_max+1), freq='BAS-JUL'), right=False, labels=labels)
</code></pre>
<p>Also, if you look at sample data for 2019 - 2020 fiscal both are labeled as expected. Below is the output.</p>
<pre><code>       Correct Fiscal       Date   pay_period
0  Start 17-18 Fiscal 2017-07-01  2016 - 2017
1    End 17-18 Fiscal 2018-06-30  2017 - 2018
2  Start 18-19 Fiscal 2018-07-01  2017 - 2018
3    End 18-19 Fiscal 2019-06-30  2018 - 2019
4  Start 19-20 Fiscal 2019-07-01  2019 - 2020
5    End 19-20 Fiscal 2020-06-30  2019 - 2020
</code></pre>
<p><strong>Updated Solution</strong></p>
<p>So, I was able to fix this and reduce the code to just these two lines:</p>
<pre><code>period_end = pd.to_datetime(df.Date).apply(pd.Period, freq='A-JUN')
df['fiscal_p'] = (period_end - 1).astype(str) + ' - ' + period_end.astype(str)
</code></pre>
<p>Thanks to Dan for providing the function answer as well. I can confirm that his answer works as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the problem is with your "labels" line, not the date range frequency. The labels list is ensuring that the first row is labelled as '2016 -2017', which is incorrect according to your inputs.</p>
<p>Here's an alternative way to get your desired output, using a simple function:</p>
<pre><code>data = [['Start 17-18 Fiscal', '7/1/2017'], ['End 17-18 Fiscal', '6/30/2018'], ['Start 18-19 Fiscal', '7/1/2018'], 
        ['End 18-19 Fiscal', '6/30/2019'], ['Start 19-20 Fiscal', '7/1/2019'], ['End 19-20 Fiscal', '6/30/2020']]
df = pd.DataFrame(data, columns=['Correct Fiscal', 'Date'])

df['Date'] = pd.to_datetime(df['Date'])

def find_pay_period(date):
    if date.month == 7:
        end_year = date.year + 1
    elif date.month == 6:
        end_year = date.year
    else:
        return 'undefined'

    return f'{end_year - 1} - {end_year}'

df['pay_period'] = df['Date'].apply(find_pay_period)
</code></pre>
<p>Which gives the following output:</p>
<pre><code>       Correct Fiscal       Date   pay_period
0  Start 17-18 Fiscal 2017-07-01  2017 - 2018
1    End 17-18 Fiscal 2018-06-30  2017 - 2018
2  Start 18-19 Fiscal 2018-07-01  2018 - 2019
3    End 18-19 Fiscal 2019-06-30  2018 - 2019
4  Start 19-20 Fiscal 2019-07-01  2019 - 2020
5    End 19-20 Fiscal 2020-06-30  2019 - 2020
</code></pre>
</div>
<span class="comment-copy">Thanks, your code works. While you were writing your answer I was actually able to fix it as well by scrapping the old code and replacing it with two new lines. See the last part of my questions.</span>
