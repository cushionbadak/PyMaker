<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/423379/using-global-variables-in-a-function">Using global variables in a function</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
</ul>
</div>
<p>I am working on a currency converter for my computing GCSE at school and I have no idea what I am doing wrong here.</p>
<p>My code is:</p>
<pre><code>PD = 1.66401 # declare pounds to dollars exchange rate

def Convert(ex): #converting sub... ex = exchange rate
    amount = input("Enter amount to convert: ") #get amount to convert
    result = round(float(amount) * float(ex),2) #calculate result using PD rate
    print("result = " + str(result)) #print result

def Change(ex): #change sub... ex = echange rate
    newex = input("Enter new exchange rate: ") #allow user to enter new exchange rate
    if ex == PD: #check what exchange rate to change (needed because final version will have alot more options
        PD = float(newex) #change exchange rate

#display menu
menu = input("1.Convert\n2.Modify exchange rate\nPlease select option: ")
if menu == "1":
    Convert(PD) #Call sub...convert using pounds to dollars
elif menu == "2":
    Change(PD) #Call sub...change pounds to dollars exchange rate
</code></pre>
<p>When I convert it works correctly but when changing exchange rate i get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "F:/USB/Computing/Programming/Python/test2.py", line 18, in &lt;module&gt;
    Change(PD) #Call sub...change pounds to dollars echange rate
  File "F:/USB/Computing/Programming/Python/test2.py", line 10, in Change
    if ex == PD: #check what exchange rate to change (needed because final version will have alot more options
UnboundLocalError: local variable 'PD' referenced before assignment
</code></pre>
<p>I have searched around but no answer has been very helpful
if you could try and keep any explanations as simple as possible and provide an example of where Im going wrong and what i should be doing that would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <em>access</em> global variables just fine from inside functions.  When you want to modify their values however, you need to first use <a href="http://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow"><code>global</code></a> and declare them as being in the global scope:</p>
<pre><code>def Change(ex):
    ##########
    global PD
    ##########
    newex = input("Enter new exchange rate: ")
    if ex == PD:
        PD = float(newex)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def Change(ex): #change sub... ex = echange rate
    global PD
    newex = input("Enter new exchange rate: ") #allow user to enter new exchange rate
    if ex == PD: #check what exchange rate to change (needed because final version will have alot more options
        PD = float(newex) #change exchange rate
</code></pre>
<p>More information in <a href="http://docs.python.org/3.3/reference/executionmodel.html" rel="nofollow">Python docs</a>:</p>
<blockquote>
<p>When a name is used in a code block, it is resolved using the nearest
  enclosing scope. The set of all such scopes visible to a code block is
  called the blockâ€™s environment.</p>
<p>If a name is bound in a block, it is a local variable of that block,
  unless declared as nonlocal. If a name is bound at the module level,
  it is a global variable. (The variables of the module code block are
  local and global.) If a variable is used in a code block but not
  defined there, it is a free variable.</p>
<p>When a name is not found at all, a NameError exception is raised. <strong>If
  the name refers to a local variable that has not been bound, a
  UnboundLocalError exception is raised</strong>. UnboundLocalError is a subclass
  of NameError.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This is a great example of where a class would be very helpful. By declaring PD as a class property, you can use the @property decorator to keep your code organized and not have to worry about global variables.</p>
<pre><code>class CurrencyConverter(object):

    def __init__(self):
        """
        Set the default exchange rate to Pounds to U.S. Dollars
        """
        self.PD = 1.66401

    @property
    def PD(self):
        return self._PD

    @PD.setter
    def PD(self, value):
        """
        Set and ensure PD is a float value.
        """
        self._PD = float(value)

    def convert(self):
        """
        Takes user input and returns exchanged value.
        """
        amount = input("Enter amount to convert: ")
        result = round(float(amount) * self.PD, 2)
        print "result = %.2f\n" % result

    def change(self):
        """
        Takes user input and changes exchange rate.
        """
        newex = input("New exchange rate: ")
        self.PD = newex
</code></pre>
<p>The bonus with this method is that if your next assignment is to extend your currency converter, it'll be easy to add methods or inherit this class like so:</p>
<pre><code>class CanadianExchangeRate(CurrencyConverter):
    """
    Converts Canadian Dollars to U.S. Dollars.
    """
    def __init__(self):
        self.PD = 0.90
</code></pre>
</div>
<span class="comment-copy">@Aerovistae I urge you to read the Python documentation on variable scope</span>
<span class="comment-copy">I like your choice of words.</span>
<span class="comment-copy">What i didn't understand was how i was able to use the variable PD in one sub and not the other.. i wasn't aware that you needed to use Global when modifying it. Ps Thank you @ICodez for the response</span>
<span class="comment-copy">I hadn't done a scoping experiment like this in awhile so I had forgotten, but I just went back through it and now I've recovered the details. So while everything you've learned so far is accurate, it would be good to add in that you should not be using <code>global</code> here. There's no need to-- the use of it is highly discouraged. You can read the variable without any problem from inside the function, and if you're going to have multiple exchange rates and need to assign then you should just put them inside a mutable object such as a dictionary or list, which you can change without using <code>global</code>.</span>
<span class="comment-copy">"If a name is bound in a block, it is a local variable of that block." That bit in the docs seems too vague to me. Classifying a name as local in Python doesn't mean it always refers to local storage. In CPython, an unoptimized scope uses the <code>LOAD_NAME</code> operation that falls back on searching globals and builtins. For example storing <code>x += 1</code> in a class definition will load the value of global <code>x</code>, add 1, and store the result to local <code>x</code>. If <code>x</code> isn't found in globals or builtins, a <code>NameError</code> is raised instead of the <code>UnboundLocalError</code> subclass.</span>
<span class="comment-copy">@eryksun good addition</span>
