<div class="post-text" itemprop="text">
<p>Reference <a href="http://docs.python.org/3/glossary.html#term-parameter" rel="nofollow">http://docs.python.org/3/glossary.html#term-parameter</a></p>
<p><strong>keyword-only parameter</strong>: specifies an argument that can be supplied only by keyword. Keyword-only parameters can be defined by including a <strong>single var-positional parameter</strong> or bare * in the parameter list of the function definition before them, for example kw_only1 and kw_only2 in the following:</p>
<pre><code>def func(arg, *, kw_only1, kw_only2):
</code></pre>
<p>Instead of single var-positional parameter shouldn't that be single var-keyword parameter?
Maybe i understood something wrong ...</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you must use either the <code>*</code> <em>bare</em> parameter, or use a single <code>*args</code> parameter, called a <em>var-positional parameter</em> (see the next item in that glossary entry). By adding it to your function signature you force any parameters that follow it to be keyword-only parameters.</p>
<p>So the function signature could be:</p>
<pre><code>def func(positional_arg1, *variable_args, kw_only1, kw_only2):
</code></pre>
<p>and <code>variable_args</code> will capture any extra <em>positional</em> arguments passed to the function, or you could use:</p>
<pre><code>def func(positional_arg1, *, kw_only1, kw_only2):
</code></pre>
<p>and the function will not support extra positional arguments beyond the first one.</p>
<p>In both cases, you can set <code>kw_only1</code> and <code>kw_only2</code> <em>only</em> by using them as keyword arguments when calling <code>func()</code>. Without default values (no <code>=&lt;expression&gt;</code> in their definition) they are still <em>required</em> arguments.</p>
</div>
<span class="comment-copy">got it  ... thanks!</span>
