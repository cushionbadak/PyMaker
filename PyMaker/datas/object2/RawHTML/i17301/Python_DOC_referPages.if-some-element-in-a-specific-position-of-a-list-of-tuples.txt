<div class="post-text" itemprop="text">
<p>I have a list of tuples:</p>
<pre><code>MyList = [('name1', 'surname1', 'age1'), ('name2', 'surname2', 'age2'), ...]
</code></pre>
<p>I would like to make a check "if 'name2' in MyList, something like:</p>
<pre><code>if 'name2' in MyList[?][0]: 
    print "do something"
</code></pre>
<p>If I would write <code>if 'name2' in MyList[0]</code> I would be accessing the element ('name1', 'surname1', 'age1') while what I meant is to access <em>the element at position 0 of every tuple in the list</em>. I guess there is a syntaxis to do that but I'm a newbie and cannot find it online myself, can anyone help me with this?  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/functions.html#any" rel="nofollow"><code>any</code></a> function and a generator function, like this</p>
<pre><code>if any("name2" in name for name, surname, age in my_list):
    # do something
</code></pre>
<p>Here all the elements of tuples are unpacked to <code>name, surname, age</code> while iterating. So, we can simply check if <code>name2</code> is in name. This is the same as writing</p>
<pre><code>if any("name2" in current_item[0] for current_item in my_list):
</code></pre>
<p>This will be efficient, as it yields <code>True</code> immediately after there is a match, rest of the items need not be checked.</p>
<p>If you are looking for a way to compare two strings, you should be using <code>==</code> operator, like this</p>
<pre><code>if any("name2" == name for name, surname, age in my_list):
# do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sounds that you could benefit from using dictionaries:</p>
<pre><code>my_dict = dict( (x[0],(x[1],x[2])) for x in MyList)
</code></pre>
<p>Then you can check for existence <code>'names2' in my_dict</code> and also access directly the data <code>my_dict['names2']</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure if this is the most efficient method, but you could use this. </p>
<pre><code>&gt;&gt;&gt;MyList = [('name1', 'surname1', 'age1'), ('name2', 'surname2', 'age2'), ...]
&gt;&gt;&gt; if 'name2' in zip(*MyList)[0]:
              #do something. 
</code></pre>
<p>The point is it creates a transpose of the original list. <strong>Caveat</strong>: All tuples have to be of same length to avoid data loss. </p>
<p>EDIT: Official <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow">docs</a> for zip.</p>
<p>Official <a href="http://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">docs</a> for <code>*</code> operator used in unpacking argument lists. </p>
</div>
<span class="comment-copy">why '"name2" in name'? Should it not be '"name2" == name'?</span>
<span class="comment-copy">@JayanthKoushik That is what he has in the question. I ll include this suggestion also in the answer.</span>
<span class="comment-copy">This could have the problem of having to create a new dict for comparing surnames and a new dict for comparing ages. Might go out of hand.</span>
