<div class="post-text" itemprop="text">
<p>First and foremost, I am new to python. As of such, I only know for loops, range, lens, and sum to do this problem. I am having difficulty trying to make a function that can average list of numbers. </p>
<p>This is my code so far:</p>
<pre><code>def ave(L):
    L = list(range(len(L))
    for a in range(len(L)):
        if len(L) == 0: return 0
        else: return float((sum(L))/len(L))
</code></pre>
<p>So far, I am getting a syntax error on my third line with <code>range(L)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>All you need to do is return the sum of <code>L</code> divided by the length of <code>L</code>:</p>
<pre><code>def ave(L):
    if not L:
        return 0
    return sum(L) / len(L)
</code></pre>
<p>No <code>range()</code> or <code>float()</code> or <code>for</code> required.</p>
<p>In Python 3, <code>/</code> always produces a floating point number. <code>sum()</code> will do all the looping for you. The only thing you need to take care of, is returning <code>0</code> if the list is empty.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following line is missing a <code>)</code>:</p>
<pre><code>L = list(range(len(L)))
                      ^
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because average of empty list is undefined, you should rather return None instead of '0'.
And instead checking for length, it is better to catch potential error, according to <a href="http://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP principle</a>. It makes also more clear what are you doing, as error is self-descriptive.</p>
<pre><code>def ave(L):
    try:
        return sum(L) / len(L)
    except ZeroDivisionError:
        return None
</code></pre>
</div>
<span class="comment-copy">You replaced <code>L</code> with a range on the first line of the function; doesn't matter what the rest of the function does from there on out.</span>
<span class="comment-copy">It can also be <code>return sum(L)/len(L) if L else 0</code></span>
<span class="comment-copy">@GrijeshChauhan: yup, but I tried to keep it to syntax the OP already tried to use.</span>
<span class="comment-copy">One question In Python &lt; 3, <code>float((sum(L))/len(L))</code> is wrong it should be <code>float(sum(L))/len(L)</code>.</span>
<span class="comment-copy">@GrijeshChauhan: these days I always use <code>from __future__ import division</code> instead and not worry about when to use <code>float()</code> at all.</span>
<span class="comment-copy">Many thanks for all of the help, however, I am still getting a [TypeError: unsupported operand type(s) for +: 'int' and 'str']  When inputting a list.</span>
<span class="comment-copy">hmmm Nice.. I will this approach.</span>
