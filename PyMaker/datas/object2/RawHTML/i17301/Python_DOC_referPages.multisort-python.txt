<div class="post-text" itemprop="text">
<p>I'm trying to write a custom exporter for Blender in Python. However, I'm having some trouble figuring out how I could use Python's native sort implementation to sort my vertices in the way I need.</p>
<p>Basically, I need to export the vertices in such a way where they can form a grid like this, assuming that V is a double.</p>
<pre><code>V V V V V
V V V V V
V V V V V
V V V V V
</code></pre>
<p>The "engine" that I'm writing automatically retrieves the X and Z value of the coordinate based on where it is in the vertex map shown above. The V represents the Y coordinate. So this 5 by 5 map of vertices would create a 4 by 4 faced mesh.</p>
<p>However, in Blender, vertices appear to be ordered individually for each face of a mesh, rather in a format like mine. So, in order to export it, I need to order the coordinates first by depth (Y coordinate in Blender) and then by width (X coordinate in Blender). It would have to behave like a SQL query, where the first paramter given takes precedence in order compared to the second.</p>
<p>Here is what my code currently looks like</p>
<pre><code>#!BPY

"""
Name: 'VaV Export'
Blender: 269
Group: 'Export'
Tooltip: 'Export to VaV file format'
"""
import Blender
import bpy

class Coordinate:
    def __init__(self, posX, posY):
        self.posX = posX
        self.posY = posY

    def sortX(self, other):
        if posX &lt; other.posX:
            return 1

    def sortY(self, other):
        if posY &lt; other.posY:
            return 1



def write(filename):
    out = open(filename, "w")
    terraindata = bpy.data.meshes["Terrain"]
    vertices = terraindata.vertices
    vertices = sorted(vertices, key = lambda x: x.co.y, reverse = True)
    vertices = sorted(vertices, key = lambda x: x.co.x, reverse = False)
    print(vertices)

Blender.Window.FileSelector(write, "Export")
</code></pre>
<p>The first call to sorted() successfully orders it according to depth (Y). However, The 2nd call to sorted messes up the order (as expected). How could I amend this to allow both sorts to occur without the 2nd messing up the first?</p>
<p>Thanks for your time in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>Change </p>
<pre><code>vertices = sorted(vertices, key = lambda x: x.co.y, reverse = True)
</code></pre>
<p>to </p>
<pre><code>vertices = sorted(vertices, key = lambda x: (x.co.y, x.co.x), reverse = True)
</code></pre>
<p>...and that should do it. </p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, you want to order your vertices by decreasing <code>y</code> coordinate, with coordinates with equal <code>y</code> values ordered by increasing <code>x</code> coordinate. If that's right, you can return a tuple <code>(-x.co.y, x.co.x)</code> from your <code>key</code> function to <code>sorted</code> and Python will do both the whole sorting at once.</p>
<p>An alternative would be to take a page from <a href="http://en.wikipedia.org/wiki/Radix_sort" rel="nofollow">radix sort</a> and sort by least-significant coordinate (e.g. <code>x</code>) first, then by the more significant coordinate (<code>y</code>). This will work since Python's <code>sort</code> is <a href="http://en.wikipedia.org/wiki/Sorting_algorithm#Stability" rel="nofollow">stable</a>.</p>
</div>
<span class="comment-copy">Thanks for the response! However, I'm unsure as to what a tuple is as this is my first time working with Python. Do you have any sample code that I could look at?</span>
<span class="comment-copy">Tuples are one of the basic <a href="http://docs.python.org/3/library/stdtypes.html#typesseq" rel="nofollow noreferrer">sequence data types</a> in Python (see also, <a href="http://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">this part</a> of the tutorial). They're a lot like lists, but immutable (you can't modify them after they're created). You make a tuple by using commas in your code (e.g. <code>a,b</code>), though in some places like function arguments and lambda return values you may need to add a set of parentheses around the tuple values to avoid ambiguity (e.g. <code>func((a,b))</code> or <code>lambda x: (-x.co.y, x.co.x)</code>).</span>
