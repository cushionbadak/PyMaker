<div class="post-text" itemprop="text">
<p>I was not expecting the first output, though it kind of makes sense. A raw iterator only cycles through once. The thing I don't understand is why it behaves differently if the <code>reversed()</code> function is used in the comprehension statement. </p>
<pre><code>&gt;&gt;&gt; old_list = ['h', 'e', 'l', 'l', 'o']
&gt;&gt;&gt; rev_old = reversed(old_list)
&gt;&gt;&gt; [i + a for i in old_list for a in rev_old]
['ho', 'hl', 'hl', 'he', 'hh']
&gt;&gt;&gt; [i + a for i in old_list for a in reversed(old_list)]
['ho', 'hl', 'hl', 'he', 'hh', 'eo', 'el', 'el', 'ee', 'eh', 'lo', 'll', 'll', 'le', 'lh', 'lo', 'll', 'll', 'le', 'lh', 'oo', 'ol', 'ol', 'oe', 'oh']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first method evaluates <code>reversed(old_list)</code> only once.  Its equivalent code would be this:</p>
<pre><code>rev_old = reversed(old_list)
lst = []
for i in old_list:
    for a in rev_old:
        lst.append(i + a)
</code></pre>
<p>The second one however re-evaluates <code>reversed(old_list)</code> multiple times.  Its equivalent code would be this:</p>
<pre><code>lst = []
for i in old_list:
    for a in reversed(old_list):
        lst.append(i + a)
</code></pre>
<p>In the above code, the <code>reversed(old_list)</code> part of <code>for a in reversed(old_list):</code> is evaluated with each iteration of <code>for i in old_list:</code>.</p>
<hr/>
<p>Regarding your comment, what you have is a <a href="http://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow">nested list comprehension</a>. The equivalent code of this:</p>
<pre><code>[[str(x)+'+'+str(y) for x in [10,30,50]] for y in [20,40,60]]
</code></pre>
<p>would be this:</p>
<pre><code>outer = []
for y in [20,40,60]:
    inner = []
    for x in [10,30,50]:
        inner.append(str(x)+'+'+str(y))
    outer.append(inner)
</code></pre>
</div>
<span class="comment-copy">because you are re-evaluating <code>reversed(old_list)</code> in the second case for every value of <code>old_list</code>.</span>
<span class="comment-copy">Right, ok that makes sense</span>
<span class="comment-copy">What doesn't really make a ton of sense is that the actual order of operations is the reverse of this. Try <code>[str(x)+'+'+str(y) for x in [10,30,50] for y in [20,40,60]]</code></span>
<span class="comment-copy">Never mind, I'm wrong lol</span>
<span class="comment-copy">I was confusing <code>[str(x)+'+'+str(y) for x in [10,30,50] for y in [20,40,60]]</code> with <code>[[str(x)+'+'+str(y) for x in [10,30,50]] for y in [20,40,60]]</code></span>
<span class="comment-copy">@JoshRusso - Yea, I thought so.  I'll include the code's breakdown in my answer though just for a refresher. :)</span>
