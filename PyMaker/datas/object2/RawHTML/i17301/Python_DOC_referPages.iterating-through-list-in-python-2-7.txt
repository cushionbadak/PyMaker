<div class="post-text" itemprop="text">
<p>How will I do the following?</p>
<pre><code>class a:
    def get(self):
        return (1, 2)

i = a() #this is variable that i wont have access directly and should be accessed only from list P below
P = [i, i, i, i]
Q = [P, P, P, P]
</code></pre>
<p>I want is</p>
<pre><code>L = [list of all i.get() results iterating through Q and P]
</code></pre>
<p>for eg </p>
<pre><code>L = [px.get() for px in P for P in Q] # I want something like this
</code></pre>
<p>i.e </p>
<pre><code>L = [(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension:</p>
<pre><code>L = [i.get() for P in Q for i in P]
</code></pre>
<p>This gives you <code>[Q[0][0].get(), Q[0][1].get(), ..., Q[-1][-2].get(), Q[-1][-1].get()]</code></p>
<p>The double loop is just like a nested for loop outside of a list comprehension, the above is the equivalent of:</p>
<pre><code>L = []
for P in Q:
    for i in P:
        L.append(i.get())
</code></pre>
<p>The list comprehension follows the same order of loops, nesting is translated to loops being listed from left to right.</p>
</div>
<div class="post-text" itemprop="text">
<p>Replicating a list can be done with the <code>*</code> operator in Python (i.e. <a href="http://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow">multiplying a list</a>):</p>
<pre><code>&gt;&gt;&gt; [i.get()] * (len(P) + len(Q))
[(1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2)]
</code></pre>
</div>
<span class="comment-copy">Presumably the fact that <code>P</code> contains 4 times <code>a</code> has nothing to do with the <i>class</i> <code>a</code> here?</span>
<span class="comment-copy">I am in situation where i need to access the methods of the same class but numerous of different objects. I just wanted to make my question simple here</span>
<span class="comment-copy">So you want <code>[P[0].get(), P[1].get(), ..., Q[2].get(), Q[3].get()]</code> instead? Because your sample code suggests otherwise.</span>
<span class="comment-copy">sorry,please see my edited post</span>
<span class="comment-copy">So <code>Q</code> contains <code>[[i, i, i, i], [i, i, i, i], [i, i, i, i], [i, i, i, i]]</code>? Then you'd expect <i>16</i> <code>(1, 2)</code> tuples, not 5.</span>
<span class="comment-copy">Please just iterate and use .get() method for elements of list P only without using i variable. I am using i just to show my situation. I need to iterate through Q and P to get all 'a' object and call its method..</span>
