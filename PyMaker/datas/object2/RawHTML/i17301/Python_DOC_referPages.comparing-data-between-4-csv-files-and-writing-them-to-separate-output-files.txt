<div class="post-text" itemprop="text">
<p>Could someone please advice me on how I could improve my code? I have 4 big csv files. The first is a reference file to which 3 other files (file1, file2 and file3) are compared to. In the files, there are three columns. Each row is a unit (e.g. ABC, DEF, GHI are 3 separate units).</p>
<pre><code>col_1   col_2    col_3 
 A        B         C    
 D        E         F
 G        H         I
</code></pre>
<p>I would like to compare file1, file2 and file3 to the reference file. If unit for each row in the reference file is present in all 3 files, I would like to write them into file A. If unit for each row is present in at least 1 of the 3 files, they should be written to file B. If unit for each each row is not present in any of the 3 files, I would like to write them in file C. My current strategy is to append the files as 4 separate lists and to compare them. I realize that this approach is memory intensive. In addition, my script has been running for a long time without final output. As such I was wondering if there is a more efficient approach to this problem?</p>
<p>Below is my code:</p>
<pre><code>import csv

reference_1 = open ('reference.csv', 'rt', newline = '')
reader = csv.reader(reference_1, delimiter = ',')
file1 = open ('file1.csv','rt', newline = '')
reader1 = csv.reader(file1, delimiter = ',')
file2 = open ('file2.csv', 'rt',newline = '')
reader2 = csv.reader(file2, delimiter = ',')                 
file3 = open ('file3.csv', 'rt',newline = '')
reader3 = csv.reader(file3, delimiter = ',')                 


Common = open ('Common.csv', 'w',newline = '')
writer1 = csv.writer(Common, delimiter = ',')                 
Partial = open ('Partial.csv', 'w',newline = '')
writer2 = csv.writer(Partial, delimiter = ',')                   
Absent = open ('Absent.csv', 'w',newline = '')
writer3 = csv.writer(Absent, delimiter = ',')

reference = []
fileA = []
fileB = []
fileC = []

for row in reader:
                 reference.append (row)

for row in reader1:
                 fileA.append(row)

for row in reader2:
                 fileB.append(row)

for row in reader3:
                 fileC.append(row)


for row in reference:
    if row in fileA and row in fileB  and row in fileC:
        writer1.writerow (row)
        continue
    elif row in fileA or row in fileB or row in fileC:
        writer2.writerow (row)
        continue
    else:
        writer3.writerow (row)


reference_1.close() 
file1.close()
file2.close()
file3.close()
Common.close()
Partial.close()
Absent.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the order of the rows is not important and that there aren't duplicate rows in the reference file, here is an option using <a href="http://docs.python.org/2/library/stdtypes.html#set" rel="nofollow"><code>set</code></a>.</p>
<pre><code>def file_to_set(filename):
    """Opens a file and returns a set containing each line of the file."""
    with open(filename) as f:
        return set(f.read().splitlines(True))

def set_to_file(s, filename):
    """Writes a set to file."""
    with open(filename, 'w') as f:
        f.writelines(s)

def compare_files(ref_filename, *files):
    """Compares a reference file to two or more files."""
    if len(files) &lt; 2:
        raise TypeError("compare_files expected at least 2 files, got %s" %
                        len(files))

    ref = file_to_set(ref_filename)
    file_data = [file_to_set(f) for f in files]

    all = file_data[0].union(*file_data[1:])
    common = ref.intersection(*file_data)
    partial = ref.intersection(all).difference(common)
    absent = ref.difference(all)

    set_to_file(common, 'common.csv')
    set_to_file(partial, 'partial.csv')
    set_to_file(absent, 'absent.csv')

compare_files('reference.csv', 'file1.csv', 'file2.csv', 'file3.csv')
</code></pre>
<p>The idea is:</p>
<ol>
<li>Create sets containing each line of a file.</li>
<li>Make a set (<code>all</code>) that contains every line in every file (except the reference file).</li>
<li>Make a set (<code>common</code>) that contains only the lines that are in every file, including the reference file.</li>
<li>Make a set (<code>partial</code>) that contains the lines in the reference file that also appear in at least one but not all of the other files.</li>
<li>Make a set (<code>absent</code>) that contains the lines only present in the reference file.</li>
<li>Write <code>common</code>, <code>partial</code>, and <code>absent</code> to files.</li>
</ol>
</div>
<span class="comment-copy">please see final edits.</span>
<span class="comment-copy">One idea is to not use <code>csv.reader</code> since you are just comparing lines. You don't actually use the columns individually, so don't split the line up. For example, try this one liner: <code>reference = reference_1.read().splitlines()</code>. You can do that for all of your <code>csv.reader</code> objects. Then you can drop the <code>csv.writer</code> objects as well and just write a line directly.</span>
<span class="comment-copy">Is the order of the lines/rows (not columns) important? Or is it okay if the rows change in order?</span>
<span class="comment-copy">Thanks very much for this brilliant advice! Much appreciated.</span>
<span class="comment-copy">Just a quick question. Could you please explain the value or importance of using True in your code: return set(f.read().splitlines(True))? I don't fully understand this statement. Thanks.</span>
<span class="comment-copy"><a href="http://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer"><code>str.splitlines(True)</code></a> splits a string into a list at each <code>'\n'</code>, but it doesn't remove the <code>'\n'</code>. If the <code>True</code> was <code>False</code> instead, then the <code>'\n'</code> characters would be removed. It's <code>True</code> because later on in the code when we call <code>f.writelines(s)</code> we need the newline characters. <a href="http://docs.python.org/2/library/stdtypes.html#file.writelines" rel="nofollow noreferrer"><code>file.writelines()</code></a> does not add line separators.</span>
