<div class="post-text" itemprop="text">
<p>What's the fastest way to convert a list of booleans into a binary string in python?</p>
<p>e.g. boolList2BinString([True, True, False]) = '0b110'.</p>
<p>Also, how would I convert that binary string into the binary literal?  Would this take more time than just converting from the boolean list to the binary literal immediatley?  How would one do this?</p>
<p>e.g. boolList2Bin([True, True, False]) = 0b110.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Regarding your first question, you can use a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>* and a <a href="https://stackoverflow.com/q/394809/2555451">conditional expression</a>:</p>
<pre><code>&gt;&gt;&gt; def boolList2BinString(lst):
...     return '0b' + ''.join(['1' if x else '0' for x in lst])
...
&gt;&gt;&gt; boolList2BinString([True, True, False])
'0b110'
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Regarding your second, you cannot "convert that binary string into the binary literal". As their name suggests, <a href="http://docs.python.org/3/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">literals</a> must be <em>literally typed out</em>:</p>
<pre><code>&gt;&gt;&gt; x = 0b110
&gt;&gt;&gt;
</code></pre>
<p>Perhaps you meant that you want the quotes removed from the output?  If so, use <a href="http://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a>:</p>
<pre><code>&gt;&gt;&gt; def boolList2BinString(lst):
...     return '0b' + ''.join(['1' if x else '0' for x in lst])
...
&gt;&gt;&gt; boolList2BinString([True, True, False])
'0b110'
&gt;&gt;&gt; print(boolList2BinString([True, True, False]))
0b110
&gt;&gt;&gt;
</code></pre>
<hr/>
<p><strong>*Note:</strong> I purposefully chose to use a list comprehension with <code>str.join</code> instead of a generator expression because the former is <a href="https://stackoverflow.com/a/9061024/2555451">generally faster</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Convert the list to a decent binary (will be a long int):</p>
<pre><code>number = reduce(lambda a, b: (a&lt;&lt;1) + int(b), [ True, True, False ])
</code></pre>
<p>And then, if you really need a "binary string", as you put it, use</p>
<pre><code>bin(number)
</code></pre>
<p>to generate that string.</p>
<p>EDIT</p>
<p>You also can use this code:</p>
<pre><code>number = sum(int(bit) &lt;&lt; position
             for (position, bit) in
             enumerate(reversed([True, True, False])))
</code></pre>
<p>The mechanism behind it is the same as before.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>data = [True, True, False]
print bin(int("".join(str(int(item)) for item in data), 2))
# 0b110
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>values = [True,False,False,True]
bin(sum(int(v)*2**i for i,v in enumerate(values[::-1]) ))
</code></pre>
<p>actually </p>
<pre><code>In [7]: %timeit bin(sum(int(v)*2**i for i,v in enumerate(values[::-1]) ))
10000 loops, best of 3: 108 us per loop

In [8]: %timeit '0b' + ''.join(['1' if x else '0' for x in values])
100000 loops, best of 3: 5.25 us per loop

In [9]: %timeit bin(int("".join(str(int(item)) for item in values), 2))
10000 loops, best of 3: 29.5 us per loop

In [10]: %timeit bin(reduce(lambda a, b: (a&lt;&lt;1) + int(b), values))
10000 loops, best of 3: 31.3 us per loop
</code></pre>
<p>my solution is the slowest :( ... </p>
</div>
<span class="comment-copy">An extension module written in C -- pre-allocating the space for the string and doing reference comparisons with <code>Py_True</code> -- is probably fastest. /s Seriously though, how serious is the "fastest" requirement? Did you add that just because or have you tried something and it was too slow (if so, please add details!).</span>
<span class="comment-copy">Remove the brackets.  <code>join</code> can handle generators, so you do not need to create a <code>list</code> first.</span>
<span class="comment-copy">Instead of the <code>if</code>/<code>else</code> you can use <code>'01'[x]</code> because bools can be used as indexes.</span>
<span class="comment-copy">this is the most efficient solution there is(at least out of the posted solutions) by a good margin +1</span>
<span class="comment-copy">@Alfe - You are correct that you do not <i>need</i> a list with <code>str.join</code>.  But the link I gave in my answer shows that it is generally faster to use one.  Also, if you use <a href="http://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow noreferrer"><code>timeit.timeit</code></a>, you will see that the conditional expression is slightly faster than <code>'01'[x]</code>.</span>
<span class="comment-copy">Whoa.  My bad :(  I ignored the <b>Note</b> below the answer, sorry.  And now that I want to revoke my downvote I only can so if the answer has changed.  May I humbly ask you for doing a minor edit of it just for allowing me to?</span>
<span class="comment-copy">In Python 3+ <code>reduce</code> us moved to <a href="https://docs.python.org/3.5/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools</code></a> module.</span>
<span class="comment-copy">fixed ... minor error :P assumming LSB is on RIGHT in bool list at least</span>
<span class="comment-copy">Of course your solution is the slowest ;-)</span>
<span class="comment-copy">But given your tests and results, your answer is (among) the best :)</span>
