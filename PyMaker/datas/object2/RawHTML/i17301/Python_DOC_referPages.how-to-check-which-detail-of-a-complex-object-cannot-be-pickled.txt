<div class="post-text" itemprop="text">
<h1>Overview</h1>
<p>I want to serialize my complex objects. It looks simple but every step creates a different problem. </p>
<p>In the end, other programmers must also be able to create a complex object inherited from my parent object. And this object should be pickleable, for Python 2.7 and Python3.x.</p>
<p>I started with a simple object and used <code>pickle.dump</code> and <code>pickle.load</code> with success.</p>
<p>I then created multiple complex objects (similar but not identical), some of which can be dumped, and a few cannot.</p>
<h1>Debugging</h1>
<p>The pickle library <a href="http://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">knows</a> which objects can be pickled or not.  In theory this means <a href="http://docs.python.org/3/library/bdb.html" rel="nofollow noreferrer"><code>pdb</code></a> could be customized to enable pickle debugging.</p>
<h1>Alternative serialization libraries</h1>
<p>I wanted a reliable serialization independent of the content of the object. So I searched for other serialization tools:</p>
<ul>
<li><a href="http://home.gna.org/oomadness/en/cerealizer/index.html" rel="nofollow noreferrer">Cerealizer</a> which selftest failed and seems to be outdated. </li>
<li><a href="http://www.msgpack.org" rel="nofollow noreferrer">MessagePack</a> which is not available for Python 3. </li>
<li>I tried JSON and got the error:
<code>builtins.TypeError: &lt;lib.scan.Content object at 0x7f37f1e5da50&gt; is not JSON serializable</code></li>
<li>I looked at Marshal and Shelve but all refer to Pickle.</li>
</ul>
<h1>Digging into using pickle</h1>
<p>I have read <a href="https://stackoverflow.com/questions/17872056/how-to-check-if-object-is-pickleable-in-python">How to check if an object is pickleable</a> which did not give me an answer.</p>
<p>The closest I found was <a href="https://stackoverflow.com/questions/6589869/how-to-find-source-of-error-in-python-pickle-on-massive-object">How to find source of error in Python Pickle on massive object</a> </p>
<p>I adjusted this to:</p>
<pre><code>import pickle

if _future_.isPython3():        
    class MyPickler(pickle._Pickler):        
        def save(self, obj):             
            try:
                pickle._Pickler.save(self, obj)
            except:
                print ('pick(3.x) {0} of type {1}'.format(obj, type(obj)))                  
else:
    class MyPickler (pickle.Pickler):

        def save(self, obj):         
            try:
                pickle.Pickler.save(self, obj)
            except:
                print('pick(2.x)', obj, 'of type', type(obj))
</code></pre>
<p>I call this code using:</p>
<pre><code>def save(obj, file):  
    if platform.python_implementation() == 'CPython':
        myPickler = MyPickler(file)                
        myPickler.save(obj) 
</code></pre>
<p>I expect the save is executed until an exception is raised. The content of <code>obj</code> is printed so I can see exactly where the error orcurs. But the result is:</p>
<pre><code>pick(3.x)  &lt;class 'module'&gt; of type &lt;class 'type'&gt;
pick(3.x)  &lt;class 'module'&gt; of type &lt;class 'type'&gt;
pick(3.x)  &lt;class 'Struct'&gt; of type &lt;class 'type'&gt;
pick(3.x)  &lt;class 'site.setquit.&lt;locals&gt;.Quitter'&gt; of type &lt;class 'type'&gt;
pick(3.x)  &lt;class 'site.setquit.&lt;locals&gt;.Quitter'&gt; of type &lt;class 'type'&gt;
pick(3.x)  &lt;class 'module'&gt; of type &lt;class 'type'&gt;
pick(3.x)  &lt;class 'sys.int_info'&gt; of type &lt;class 'type'&gt;
...
</code></pre>
<p>This is just a small part of the result. I do not comprehend this. It does not help me which detail is wrong to pickle. And how to solve this.</p>
<p>I have seen : <a href="http://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">http://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled</a> but it does not help me much if I cannot detect which line in my code cannot be pickled.</p>
<p>The code in my complex object works as expecting, in the end running a generated code as:</p>
<pre><code>sys.modules['unum']
</code></pre>
<p>But when pickling it seems the 'module' is not read as expected.</p>
<h1>Attempt at a solution</h1>
<p>Some background to clear what I mean. I have had programs who worked, and suddenly did not work. It might be an update or an other change resource. Programs who work for others and not for me and opposite.</p>
<p>This is a general problem so I want to develop a program to check all kind of resources. The amount of different kind of resources is huge. So I have one parent object class with all general behaviour. And a as small as possible detail class for the specific resources.</p>
<p>This is done in my child resources classes.</p>
<p>These resources have to be checked with different versions f.e. Python 2.7 or Python 3.3
If you run with Python 2.7.5 the resource is valid if Python 2.7 and higher is required. So the check must be a bit more then an equal value.
This is specified as a single statement in the custom config file. There is a specific config file for each program, which must be as small as possible to be used. One resource is checked with a single statement in the config file.</p>
<p>The general class is about 98% of the code. The specific resources and config is just about 2% of the code. So it is very easy to add new resources to check, and new config files for new programs.</p>
<p>This child resources :</p>
<pre><code>class R_Sys(r_base.R_Base):
    '''
    doc : http://docs.python.org/3/library/sys.html#module-sys

    sys.modules returns only a list of imported module

    statement :
    sys.modules['psutil'] #  may return false (installed but not imported
    but the statements :
    import psutil
    sys.modules['psutil'] # will return true, now psutil is imported
    '''

    allowed_names = ('modules', 'path', 'builtin_module_names', 'stdin')

    allowed_keys_in_dict_config = ('name',)
    allowed_operators = ("R_NONE", "=", 'installed')  # installed only for modules

    class_group = 'Sys'
    module_used = sys   


    def __init__(self, check_type, group, name):
        super(R_Sys, self).__init__(check_type, group, name)
</code></pre>
<p>called by this config statement :</p>
<pre><code>sc.analyse(r.R_Sys, c.ct('DETECT'), dict(name='path'))
</code></pre>
<p>can be succefull pickled.
But with config statement :</p>
<pre><code>sc.analyse(r.R_Sys, c.ct('DETECT'),
                     dict(name='modules', tuplename='unum') )  
</code></pre>
<p>it fails.</p>
<p>This means in my opinion that 98% main code should be ok, otherwise the first statement would fail as well.</p>
<p>There are class attributes in the child class. These are required to function properly. And again in the first call the dump execute well. I did not do a load yet.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dill</code> has some good diagnostic tools for pickling, the best of which is the pickle trace (similar to what you have implemented).</p>
<p>Let's build a complex object, and explore:</p>
<pre><code>&gt;&gt;&gt; import dill
&gt;&gt;&gt; class Foo(object):
...   @classmethod
...   def bar(self, x):
...     return self.z + x
...   def baz(self, z):
...     self.z = z
...   z = 1
...   zap = lambda self, x: x + self.bar(x)
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.zap(3)
7
&gt;&gt;&gt; f.baz(7)
&gt;&gt;&gt; f.z 
7
</code></pre>
<p>Turn on "pickle trace":</p>
<pre><code>&gt;&gt;&gt; dill.detect.trace(True)
&gt;&gt;&gt; _f = dill.dumps(f)
T2: &lt;class '__main__.Foo'&gt;
F2: &lt;function _create_type at 0x10f94a668&gt;
T1: &lt;type 'type'&gt;
F2: &lt;function _load_type at 0x10f94a5f0&gt;
T1: &lt;type 'object'&gt;
D2: &lt;dict object at 0x10f96bb40&gt;
Cm: &lt;classmethod object at 0x10f9ad408&gt;
T4: &lt;type 'classmethod'&gt;
F1: &lt;function bar at 0x10f9aa9b0&gt;
F2: &lt;function _create_function at 0x10f94a6e0&gt;
Co: &lt;code object bar at 0x10f9a9130, file "&lt;stdin&gt;", line 2&gt;
F2: &lt;function _unmarshal at 0x10f94a578&gt;
D1: &lt;dict object at 0x10e8d6168&gt;
D2: &lt;dict object at 0x10f96b5c8&gt;
F1: &lt;function baz at 0x10f9aaa28&gt;
Co: &lt;code object baz at 0x10f9a9ab0, file "&lt;stdin&gt;", line 5&gt;
D1: &lt;dict object at 0x10e8d6168&gt;
D2: &lt;dict object at 0x10f969d70&gt;
F1: &lt;function &lt;lambda&gt; at 0x10f9aaaa0&gt;
Co: &lt;code object &lt;lambda&gt; at 0x10f9a9c30, file "&lt;stdin&gt;", line 8&gt;
D1: &lt;dict object at 0x10e8d6168&gt;
D2: &lt;dict object at 0x10f97d050&gt;
D2: &lt;dict object at 0x10e97b4b0&gt;
&gt;&gt;&gt; f_ = dill.loads(_f)
&gt;&gt;&gt; f_.z
7
</code></pre>
<p>Ok, <code>dill</code> can pickle this objectâ€¦ so let's make it harder.
We first turn off trace.</p>
<pre><code>&gt;&gt;&gt; dill.detect.trace(False)
&gt;&gt;&gt; 
&gt;&gt;&gt; f.y = xrange(5)
&gt;&gt;&gt; f.w = iter([1,2,3])
&gt;&gt;&gt; 
&gt;&gt;&gt; dill.pickles(f)
False
</code></pre>
<p>Ok, now <code>dill</code> fails.  So what causes the failure?
We can look at all of the objects that fail to pickle if we dig into our object <code>f</code>.</p>
<pre><code>&gt;&gt;&gt; dill.detect.badtypes(f)
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; dill.detect.badtypes(f, depth=1)
{'__hash__': &lt;type 'method-wrapper'&gt;, '__setattr__': &lt;type 'method-wrapper'&gt;, '__reduce_ex__': &lt;type 'builtin_function_or_method'&gt;, 'baz': &lt;type 'instancemethod'&gt;, '__reduce__': &lt;type 'builtin_function_or_method'&gt;, '__str__': &lt;type 'method-wrapper'&gt;, '__format__': &lt;type 'builtin_function_or_method'&gt;, '__getattribute__': &lt;type 'method-wrapper'&gt;, 'zap': &lt;type 'instancemethod'&gt;, '__delattr__': &lt;type 'method-wrapper'&gt;, '__repr__': &lt;type 'method-wrapper'&gt;, 'w': &lt;type 'listiterator'&gt;, '__dict__': &lt;type 'dict'&gt;, '__sizeof__': &lt;type 'builtin_function_or_method'&gt;, '__init__': &lt;type 'method-wrapper'&gt;}
&gt;&gt;&gt; dill.detect.badobjects(f, depth=1)
{'__hash__': &lt;method-wrapper '__hash__' of Foo object at 0x10f9b0050&gt;, '__setattr__': &lt;method-wrapper '__setattr__' of Foo object at 0x10f9b0050&gt;, '__reduce_ex__': &lt;built-in method __reduce_ex__ of Foo object at 0x10f9b0050&gt;, 'baz': &lt;bound method Foo.baz of &lt;__main__.Foo object at 0x10f9b0050&gt;&gt;, '__reduce__': &lt;built-in method __reduce__ of Foo object at 0x10f9b0050&gt;, '__str__': &lt;method-wrapper '__str__' of Foo object at 0x10f9b0050&gt;, '__format__': &lt;built-in method __format__ of Foo object at 0x10f9b0050&gt;, '__getattribute__': &lt;method-wrapper '__getattribute__' of Foo object at 0x10f9b0050&gt;, 'zap': &lt;bound method Foo.&lt;lambda&gt; of &lt;__main__.Foo object at 0x10f9b0050&gt;&gt;, '__delattr__': &lt;method-wrapper '__delattr__' of Foo object at 0x10f9b0050&gt;, '__repr__': &lt;method-wrapper '__repr__' of Foo object at 0x10f9b0050&gt;, 'w': &lt;listiterator object at 0x10f9b0550&gt;, '__dict__': {'y': xrange(5), 'z': 7, 'w': &lt;listiterator object at 0x10f9b0550&gt;}, '__sizeof__': &lt;built-in method __sizeof__ of Foo object at 0x10f9b0050&gt;, '__init__': &lt;method-wrapper '__init__' of Foo object at 0x10f9b0050&gt;}
</code></pre>
<p>Hmmm. That's a lot.  Of course, not all of these objects have to serialize for our object to serializeâ€¦ however at least <strong>one</strong> of them is causing the failure.</p>
<p>The natural thing to do is look at the failure we are gettingâ€¦
So, what's the error that would be thrown?  Maybe that will give a hint.</p>
<pre><code>&gt;&gt;&gt; dill.detect.errors(f)
PicklingError("Can't pickle &lt;type 'listiterator'&gt;: it's not found as __builtin__.listiterator",)
</code></pre>
<p>Aha, the <code>listiterator</code> is a bad object.  Let's dig deeper by turning "trace" back on.</p>
<pre><code>&gt;&gt;&gt; dill.detect.trace(True)
&gt;&gt;&gt; dill.pickles(f)
T2: &lt;class '__main__.Foo'&gt;
F2: &lt;function _create_type at 0x10f94a668&gt;
T1: &lt;type 'type'&gt;
F2: &lt;function _load_type at 0x10f94a5f0&gt;
T1: &lt;type 'object'&gt;
D2: &lt;dict object at 0x10f9826e0&gt;
Cm: &lt;classmethod object at 0x10f9ad408&gt;
T4: &lt;type 'classmethod'&gt;
F1: &lt;function bar at 0x10f9aa9b0&gt;
F2: &lt;function _create_function at 0x10f94a6e0&gt;
Co: &lt;code object bar at 0x10f9a9130, file "&lt;stdin&gt;", line 2&gt;
F2: &lt;function _unmarshal at 0x10f94a578&gt;
D1: &lt;dict object at 0x10e8d6168&gt;
D2: &lt;dict object at 0x10f96b5c8&gt;
F1: &lt;function baz at 0x10f9aaa28&gt;
Co: &lt;code object baz at 0x10f9a9ab0, file "&lt;stdin&gt;", line 5&gt;
D1: &lt;dict object at 0x10e8d6168&gt;
D2: &lt;dict object at 0x10f969d70&gt;
F1: &lt;function &lt;lambda&gt; at 0x10f9aaaa0&gt;
Co: &lt;code object &lt;lambda&gt; at 0x10f9a9c30, file "&lt;stdin&gt;", line 8&gt;
D1: &lt;dict object at 0x10e8d6168&gt;
D2: &lt;dict object at 0x10f97d050&gt;
D2: &lt;dict object at 0x10e97b4b0&gt;
Si: xrange(5)
F2: &lt;function _eval_repr at 0x10f94acf8&gt;
T4: &lt;type 'listiterator'&gt;
False
</code></pre>
<p>Indeed, it stops at the <code>listiterator</code>.  However, notice (just above) that the <code>xrange</code> does pickle.  So, let's replace the <code>iter</code> with <code>xrange</code></p>
<pre><code>&gt;&gt;&gt; f.w = xrange(1,4)  
&gt;&gt;&gt; dill.detect.trace(False)
&gt;&gt;&gt; dill.pickles(f)
True
&gt;&gt;&gt; 
</code></pre>
<p>Our object now pickles again.</p>
<p><code>dill</code> has a bunch of other pickle detection tools built-in, including methods to trace which object points to which (useful for debugging recursive pickling failures).</p>
<p>I believe that <code>cloudpickle</code> also has some similar tools to <code>dill</code> for pickle debuggingâ€¦ but the main tool in either case is similar to what you have built. </p>
</div>
<span class="comment-copy">Can zou post the code of the unserializable object?</span>
<span class="comment-copy">Not really. It is complex. With a lot of code which has nothing to do with pickling. So it would be very confusing and hard to detect.</span>
<span class="comment-copy">In general my preference is not a solution for this single object. Because the next complex object the problem may appear again. I am searching for a kind of "pickle debug". This "pickle debug" pinpoint to one line of code which is wrong for pickling, and if possible the type of error. If that line is found, with error code, I assume 99% of the problem is solved. And not only for me, but for everybody using pickle.</span>
<span class="comment-copy">I am using pickle. So you just want to know which object is not picklable or also the line of code where this object was created? The last one is very difficult. It could be done that it tells you which attribute of something is not picklable or the whole reference graph from the pickle.dumps input to the unpicklable object. A simple example would be good to see if we talk about the same thing and to show the algorithm. Of cause I could create it but of what use is the example if it does not match your case.</span>
<span class="comment-copy">@Bernard it is great, you have provided some code. Advice: do not complain about having too many lines to show and do your best to make your own "minimal working example", what in this case means, minimal example, where you have a problem to pickle. It requires some effort, but generally force you to think about the problem and often leads to a solution. At least, it helps others to understand your problem what is prerequisite to helping you.</span>
<span class="comment-copy">thank you for your answer. I am not so familiar which SO. This question was asked one year ago, and I skipped pickling at all. Most important for the above reason, but also for the security risk when received a pickle file from an other source. So sorry you spent time to this. I would have like to close this question. I don not know how to close on SO.  But may be this question has value for others. If so please do response. Debugging pickle is an important subject.</span>
<span class="comment-copy">@Bernard: don't worry about it.  It was a good question, so I left an answer.  Feel free to leave it open for others if they find it, and maybe it will help.  I would not however take pickles from 3rd parties.  That is surely a bad idea.  If you are looking for a secure pickle, then you have to use one that limits the datatypes to the most basic typesâ€¦ and still someone might hijack it. Having said that, pickling is great when you are passing objects to yourself.  One thing I didn't mention is <code>pickletools.dis</code>, which reads pickles and turns them into code instructions.  Very useful.</span>
