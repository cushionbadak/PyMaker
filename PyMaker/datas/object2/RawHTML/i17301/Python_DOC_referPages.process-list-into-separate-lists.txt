<div class="post-text" itemprop="text">
<p>Have:</p>
<pre><code>my_list = [([9, 1, 4], ['b', 'j', 'k']), ([8, 5, 9], ['m', 't', 'y']), ([6, 2, 0], ['p', 'q', 'r'])]
</code></pre>
<p>Want (in sequence order):</p>
<pre><code>number_list = [9, 1, 4, 8, 5, 9, 6, 2, 0]
letter_list = ['b', 'j', 'k', 'm', 't', 'y', 'p', 'q', 'r']
</code></pre>
<p>Obvious solution is:</p>
<pre><code>for data in my_list:

    try:
        number_list += data[0]
        letter_list += data[1]
    except:
        number_list = data[0]
        letter_list = data[1]

print number_list
print letter_list

&gt; [9, 1, 4, 8, 5, 9, 6, 2, 0]
&gt; ['b', 'j', 'k', 'm', 't', 'y', 'p', 'q', 'r']
</code></pre>
<p>Is there a better and/or faster way to achieve this - possibly with a list comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; a, b = [list(chain.from_iterable(x)) for x in zip(*my_list)]
&gt;&gt;&gt; a
[9, 1, 4, 8, 5, 9, 6, 2, 0]
&gt;&gt;&gt; b
['b', 'j', 'k', 'm', 't', 'y', 'p', 'q', 'r']
</code></pre>
</div>
<span class="comment-copy">Your "obvious" solution will change <code>my_list</code>. When you write <code>number_list = data[0]</code> you don't get a copy of the list in <code>data[0]</code> but a reference.</span>
<span class="comment-copy">Didn't know that.  How do you get a copy of the list?</span>
<span class="comment-copy">You'll get a copy with <code>number_list = data[0][:]</code> or by using <a href="http://docs.python.org/3/library/copy.html#copy.copy" rel="nofollow noreferrer"><code>copy.copy</code></a> or in the case of nested structures <a href="http://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer"><code>copy.deepcopy</code></a>.</span>
<span class="comment-copy">This works great until one day <code>my_list</code> is empty and you get a <code>ValueError: need more than 0 values to unpack</code>.</span>
<span class="comment-copy">Use try-except to address this problem.</span>
