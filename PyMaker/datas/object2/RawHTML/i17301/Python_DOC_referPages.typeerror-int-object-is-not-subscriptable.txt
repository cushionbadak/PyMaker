<div class="post-text" itemprop="text">
<p>Why does this code snippet result in: <code>TypeError 'int' object is not subscriptable</code>?</p>
<pre><code>return (bin(int(hexdata)[2:].zfill(16)))
</code></pre>
<p><code>hexdata</code> is a hexadecimal string. For example, it may be <code>0x0101</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're doing this:</p>
<pre><code>&gt;&gt;&gt; int('1234')[2:]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object has no attribute '__getitem__'

&gt;&gt;&gt; 1234[2:]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object has no attribute '__getitem__'
</code></pre>
<p>If you intended to remove the first two character, use following:</p>
<pre><code>&gt;&gt;&gt; int('1234'[2:])
34
</code></pre>
<p>If the orignal string is hexadecimal representation, you should pass optional <code>base</code> argument 16</p>
<pre><code>&gt;&gt;&gt; int('1234'[2:], 16)
52
</code></pre>
<p>If <code>[2:]</code> is used to remove <code>0b</code> generated by <code>bin</code> (not to remove leading characters from the original string), then following is what you want.</p>
<pre><code>&gt;&gt;&gt; int('0x1234', 16) # No need to remove leading `0x`
4660
&gt;&gt;&gt; int('0x1234', 0)  # automatically recognize the number's base using the prefix
4660
&gt;&gt;&gt; int('1234', 16)
4660
&gt;&gt;&gt; bin(int('1234', 16))
'0b1001000110100'
&gt;&gt;&gt; bin(int('1234', 16))[2:]
'1001000110100'
&gt;&gt;&gt; bin(int('1234', 16))[2:].zfill(16)
'0001001000110100'
</code></pre>
<p>BTW, you can use <a href="http://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>str.format</code></a> or <a href="http://docs.python.org/3/library/functions.html#format" rel="nofollow"><code>format</code></a> instead of <code>bin</code> + <code>str.zfill</code>:</p>
<pre><code>&gt;&gt;&gt; '{:016b}'.format(int('1234', 16))
'0001001000110100'
&gt;&gt;&gt; format(int('1234', 16), '016b')
'0001001000110100'
</code></pre>
<p><strong>UPDATE</strong></p>
<p>If you specify 0 as a base, <code>int</code> will automatically recognize the number's base using the prefix.</p>
<pre><code>&gt;&gt;&gt; int('0x10', 0)
16
&gt;&gt;&gt; int('10', 0)
10
&gt;&gt;&gt; int('010', 0)
8
&gt;&gt;&gt; int('0b10', 0)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Parentheses in the wrong place. Assuming you have a string like "0x0101" where you want to end up with a 16-digit binary string:</p>
<pre><code>bin(int(hexdata,16))[2:].zfill(16)
</code></pre>
<p>The <code>int(X,16)</code> call interprets that as a hex number (and can accept a number of the form <code>0xSomething</code>). Then <code>bin(X)</code> turns that into a string of the form <code>0b01010101</code>.</p>
<p>The <code>[2:]</code> then gets rid of the <code>0b</code> at the front and <code>zfill(16)</code> fills that out to 16 "bits".</p>
<pre><code>&gt;&gt;&gt; bin(int("0x0102",16))[2:].zfill(16)
'0000000100000010'
</code></pre>
</div>
<span class="comment-copy">your are applying [] to int(hexdata) which is integer</span>
<span class="comment-copy">so you're suggesting bin(int(hexdata[2:])).zfill(16))?</span>
<span class="comment-copy">if that's your intent, then yes.  bin returns a string which i assume you want to pad?  however, if i understand correctly, hexdata is a hexidecimal string? in that case you need to specify correct base, eg <code>int("0xA", 16)</code></span>
<span class="comment-copy">The 2-subscript is clearly to get rid of the <code>0x</code> from the sample number <code>0x0101</code>. I think all the stuff about <code>"1234"[2:]</code> is probably superfluous.</span>
<span class="comment-copy">@paxdiablo, I don't think so. Try <code>int('0x12')</code>: raises <code>ValueError: invalid literal for int() with base 10: '0x12'</code>, which is different from what OP mentioned int he question.</span>
<span class="comment-copy">@paxdiablo, IMHO, <code>[2:]</code> was used to remove <code>0b</code> prepended by <code>bin</code>.</span>
<span class="comment-copy">Actually, you're right, <code>int(x,16)</code> happily accept numbers of the form <code>0xWhatever</code>. But I still think that the bits suggesting <code>int('1234'[2:])</code> are not necessary in the answer, since they're not touching a <code>0bxxxx</code> string.</span>
<span class="comment-copy">@paxdiablo, Thank you for the comment. I updated the answer accordingly.</span>
<span class="comment-copy">should set the base to 16: <code>int(hexdata, 16)</code></span>
<span class="comment-copy">It's hex: "hexdata is a hexadecimal string. for example, it may be 0x0101"</span>
