<div class="post-text" itemprop="text">
<p>I have the following list of lists of values and I want to find the min value among all the values.</p>
<pre><code>Q = [[8.85008011807927, 4.129896248976861, 5.556804136197901], 
     [8.047707185696948, 7.140707521433818, 7.150610818529693],  
     [7.5326340018228555, 7.065307672838521, 6.862894377422498]]
</code></pre>
<p>I was planning to do something like:</p>
<pre><code>min(min(Q))
</code></pre>
<p>I tried this approach on a smaller example and it works:</p>
<pre><code>&gt;&gt;&gt;b = [[2,2],[1,9]]
&gt;&gt;&gt;min(b)
[1, 9]
&gt;&gt;&gt;min(min(b))
1
</code></pre>
<p>But using this on my original list Q it returns the wrong result:</p>
<pre><code>&gt;&gt;&gt; min(Q)
[7.5326340018228555, 7.065307672838521, 6.862894377422498]
&gt;&gt;&gt; min(min(Q))
6.862894377422498
</code></pre>
<p>Why is this approach wrong and why?</p>
</div>
<div class="post-text" itemprop="text">
<p>Lists are compared using their <a href="http://en.wikipedia.org/wiki/Lexicographical_order" rel="nofollow">lexicographical order</a><sup>1</sup> (i.e. first elements compared, then the second, then the third and so on), so just because <code>list_a &lt; list_b</code> <em>doesn't mean</em> that the smallest element in <code>list_a</code> is less than the smallest element in <code>list_b</code>, which is why your approach doesn't work in the general case.</p>
<p>For example, consider this:</p>
<pre><code>&gt;&gt;&gt; l1 = [3, 0]
&gt;&gt;&gt; l2 = [2, 1]
&gt;&gt;&gt; 
&gt;&gt;&gt; min(l1, l2)
[2, 1]
</code></pre>
<p>The reason <code>min(l1, l2)</code> is <code>[2, 1]</code> is because the first element of <code>l1</code> (<code>3</code>) is initially compared with that of <code>l2</code> (<code>2</code>). Now, <code>2 &lt; 3</code>, so <code>l2</code> is returned as the minimum without any further comparisons. However, it is <code>l1</code> that really contains the smallest number out of both lists (<code>0</code>) which occurs <em>after</em> the initial element. Therefore, taking the <code>min</code> of <code>min(l1, l2)</code> gives us the incorrect result of <code>1</code>.</p>
<p>A good way to address this would be to find the minimum of the "flattened" list, which can be obtained with a generator:</p>
<pre><code>&gt;&gt;&gt; Q = [[8.85008011807927, 4.129896248976861, 5.556804136197901], 
...      [8.047707185696948, 7.140707521433818, 7.150610818529693],  
...      [7.5326340018228555, 7.065307672838521, 6.862894377422498]]
&gt;&gt;&gt; 
&gt;&gt;&gt; min(a for sub in Q for a in sub)  # &lt;--
4.129896248976861
</code></pre>
<p>(+1 to @Ffisegydd for posting a solution along these lines first.)</p>
<hr/>
<p><sup>1</sup> From <a href="http://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types" rel="nofollow">http://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types</a>:</p>
<blockquote>
<p>Sequence objects may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Your approach didn't work properly because, that is how Python <a href="http://docs.python.org/2/tutorial/datastructures.html#comparing-sequences-and-other-types" rel="nofollow">sequence comparison</a> is done</p>
<blockquote>
<p>I want to find the min value among all the values.</p>
</blockquote>
<p>If you want to find the minimum of all the values, you can do something like this</p>
<pre><code>print min(map(min, Q))
# 4.12989624898
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator expression</a> coupled with the <code>min</code> function to find the answer:</p>
<pre><code>Q = [[8.85008011807927, 4.129896248976861, 5.556804136197901], 
     [8.047707185696948, 7.140707521433818, 7.150610818529693],  
     [7.5326340018228555, 7.065307672838521, 6.862894377422498]]

minimum = min(i for j in Q for i in j)
print(minimum) # 4.12989624898
</code></pre>
<p>This generator expression <a href="https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python">flattens</a> your list of lists and then simply returns the minimum value.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>min(map(min,Q))</code> ist the command you're looking for.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><code>min(Q)</code> returns the "minimum" list in <code>Q</code>, which is the list that has the smallest first element.</li>
<li>Therefore, <code>min(min(Q))</code> returns the smallest element of the list with the smalles first element, which is not what you want.</li>
</ul>
<p>You could use</p>
<pre><code>min(min(x) for x in Q)
</code></pre>
<p>instead, which returns the smallest of the minimums of all lists in <code>Q</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you really want is to flatten that list and then find the minimum:</p>
<pre><code>min(value for row in Q for value in row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are lots of answers, but the easiest way IMHO is to make the 'list of lists' into a single list using <code>itertools.chain.from_iterable</code>:</p>
<pre><code>from itertools import chain

min(chain.from_iterable(Q))
</code></pre>
<p>or the shorter and just as easy to read (to me) version:</p>
<pre><code>min(chain(*Q))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think I found why, 
min applied on a list of lists will compare the first values of each sublist.</p>
<pre><code>&gt;&gt;&gt; b=[[3,1],[2,5]]
&gt;&gt;&gt; min(b)
[2, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>min(Q) does not always return the list that must contain Minimum of all values. That's why your approach is wrong.
You must find the min value of all list and make another list. then find min of that list, that's it.</p>
</div>
<span class="comment-copy">As for why it's wrong, lists are sorted by their first element; subsequent elements are only used to break ties if the first elements are equal.</span>
<span class="comment-copy">What does map(min, Q) do?</span>
<span class="comment-copy">@AlvinPastore It performs min on each list</span>
<span class="comment-copy">@Denis, probably why you got downvoted is because you included the code, without any explanation - so that would be my recommendation next time. as the comment to the other answer (which DID have at least some explanation) shows, having code doesn't always mean you can learn something from it, or understand why it works.</span>
<span class="comment-copy">Please Denis, integrate your answer with an explanation. +1 for the correct answer.</span>
<span class="comment-copy">Thanks for the feedback guys. You're right, retrospectively I admit the answer was not very helpful, especially since the question explicitly pointed torwards "why" does it not work. I'll work on that!</span>
<span class="comment-copy">just a comment: in the future, since this doesn't answer the question but is an addition to your original question, you should just edit this back into your original question.</span>
<span class="comment-copy">@CorleyBrigman His question was "Why is this approach wrong?", doesn't this answer it?</span>
<span class="comment-copy">sort of... it explains why the original approach didn't work, but isn't an answer by itself. i didn't vote it down or anything, just posted the comment.</span>
<span class="comment-copy">sorry, I'll try to keep in mind, any improvement of the question gets to edit the original question, any answer is a separate post. thank you</span>
