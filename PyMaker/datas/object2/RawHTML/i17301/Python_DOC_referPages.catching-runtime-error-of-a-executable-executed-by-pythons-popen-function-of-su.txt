<div class="post-text" itemprop="text">
<p>I am writing a python script which compiles and runs a C/C++ code.
I want to capture <strong>runtime errors</strong>.
Eg: Nzecv, Segmentation fault, Fragmentation Error etc</p>
<p>I am using following command to execute the compiled file:</p>
<pre><code>process = Popen( exec_path , stdin=PIPE, stdout=PIPE, stderr=PIPE, shell= False) 
(output, error) = process.communicate(testCase)
</code></pre>
<p>I have tried few programs with runtime errors, but the errors <strong><em>arent reflected in stderr</em></strong>.
After some research i found that stderr reads from <em>return value of program</em>.
And in C and mostly all other programs, main returns custom ("return 0;") value not the error signal.</p>
<p>Is it possible to <strong><em>catch runtime error signal?</em></strong> How should i go about implementing it?  </p>
<p>EDIT: Can runtime error signal be captured by Terminal? HOW?
If yes, ill run the corresponding shell script through python.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is it possible to catch runtime error signal? How should i go about implementing it?</p>
</blockquote>
<p>To find out whether the child process is killed by a signal, you could inspect <a href="http://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode" rel="nofollow noreferrer"><code>process.returncode</code></a>:</p>
<blockquote>
<p>A negative value -N indicates that the child was terminated by signal
  N (Unix only).</p>
</blockquote>
<p>Note: if you want to provide a custom handler for a signal in the child process, you could call <code>signal.signal()</code> in <code>preexec_fn</code>, see <a href="https://stackoverflow.com/a/22083141/4279">code example that shows how to restore default signal handler using <code>prexec_fn</code></a></p>
</div>
