<div class="post-text" itemprop="text">
<p>I'm teaching myself Python, and want a helper class to load images from either a shell script or other classes.</p>
<p>Here's what I have so far:</p>
<pre><code>import cv2 as cv
import os, sys


class LoadImage:

    def __init__(self, inputfile, outputfile=None):
        self.inputfile = inputfile
        self.outputfile = outputfile
        self.img = None

        if os.path.isfile(self.inputfile):
            self.load()
        else:
            print "Path provided is not to a file"
            sys.exit(1)

    def load(self):
        self.img = cv.imread(self.inputfile)

        if self.img is not None:
            return self.img
        else:
             print "Error with loading image"
            sys.exit(1)
</code></pre>
<p>My issue is how to use this.  Lets say I copy this to /home/jason/python_project which has a directory structure like</p>
<pre><code>python_project
    |--- LoadImage.py
    |
    |--- images
           |
           |--- test1.jpg
           |--- test2.jpg
</code></pre>
<p>What I want to happen is upon instanciation of LoadImage with a valid path name, <code>type(img)</code> returns <code>numpy.ndarray</code>.</p>
<p>Lets say I open up an ipython shell in python_project and enter</p>
<pre><code>from LoadImage import LoadImage
img = LoadImage("images/test1.jpg")
</code></pre>
<p>Here, <code>img</code> returns </p>
<pre><code>In [21]: img
Out[21]: &lt;LoadImage.LoadImage instance
</code></pre>
<p>but <code>img.img</code> returns the matrix array of the numpy ndarray which is created upon <code>cv.imread()</code>.</p>
<p>How can I modify this setup so that I can do this from the shell:</p>
<pre><code>import LoadImage

img = LoadImage("images/test1.jpg")
img.shape() #returns a 3 item tuple
type(img) # returns numpy.ndarray
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>LoadImage("images/test1.jpg")</code> it calls the "constructor" and it will always return an instance of the class. What you should do is call the load function after you create an instance, and change the code so that it does not call load in the <strong>init</strong>.</p>
<p>Updating your code to reflect the changes mentioned above;</p>
<p></p>
<pre><code>import cv2 as cv
import os, sys


class LoadImage:

    def __init__(self, inputfile, outputfile=None):
        self.inputfile = inputfile
        self.outputfile = outputfile
        self.img = None

    def load(self):
        if not os.path.isfile(self.inputfile):
            print "Path provided is not to a file"
            sys.exit(1)

        self.img = cv.imread(self.inputfile)

        if self.img is not None:
            return self.img
        else:
             print "Error with loading image"
            sys.exit(1)
</code></pre>
<p></p>
<p>And you would call it like;</p>
<p>
    import LoadImage</p>
<pre><code>img = LoadImage("images/test1.jpg").load()
img.shape()
</code></pre>
<p></p>
<p>OR if you don't really need a class here, you can just write a function that does all of this for you like;</p>
<p></p>
<pre><code>import cv2 as cv
import os, sys

def load_image(input_file):
    if not os.path.isfile(self.inputfile):
        print "Path provided is not to a file"
        sys.exit(1)
    img = cv.imread(self.inputfile)
    if self.img:
        return self.img
    else:
         print "Error with loading image"
        sys.exit(1)
</code></pre>
<p></p>
</div>
<div class="post-text" itemprop="text">
<p>for the <code>type</code> thing, I have no comment; but for the attributes, you can customize attribute access as explained <a href="http://docs.python.org/3/reference/datamodel.html#customizing-attribute-access" rel="nofollow">here</a>; this is a minimal example where attributes look-up falls back on <code>img</code>:</p>
<pre><code>&gt;&gt;&gt; class Foo():
...     def __init__(self):
...         self.img = np.random.randn(3, 4, 5)
...     def __getattr__(self, name):
...         return self.img.__getattribute__(name)
</code></pre>
<p>now, you can access <code>Foo</code> attributes as if you are working with a <code>np.ndarray</code>, and it falls back on <code>img</code> attributes:</p>
<pre><code>&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.shape
(3, 4, 5)
&gt;&gt;&gt; foo.max()
2.52702
&gt;&gt;&gt; foo.dtype
dtype('float64')
&gt;&gt;&gt; foo.size
60
&gt;&gt;&gt; foo.trace()
array([ 3.12457781,  0.61121423, -2.34856374,  3.049762  , -0.59381223])
</code></pre>
<p>still you get:</p>
<pre><code>&gt;&gt;&gt; type(foo)
&lt;class '__main__.Foo'&gt;
</code></pre>
<p>but as long as duck-typing is in effect, this works like a <code>np.ndarray</code>; ( you also need to overwrite <code>__setattr__</code> method, as documented <a href="http://docs.python.org/3/reference/datamodel.html#object.__setattr__" rel="nofollow">here</a>)</p>
</div>
<span class="comment-copy">Make LoadImage a function instead of a class? Or do <code>img = LoadImage('images/test1.jpg').load()</code>.</span>
