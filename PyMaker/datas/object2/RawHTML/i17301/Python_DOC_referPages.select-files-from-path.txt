<div class="post-text" itemprop="text">
<p>I have files in particular path and need to select one by one base on namefile (yyyymmdd.faifb1p16m2.nc) where yyyy is year, mm is month, and dd is date. I made code like this :</p>
<pre><code>results=[]
base_dir = 'C:/DATA2013'
os.chdir(base_dir) 
files = os.listdir('C:/DATA2013')
for f in files:
    results += [each for each in os.listdir('C:/DATA2013')
    if each.endswith('.faifb1p16m2.nc')] 
</code></pre>
<p>What should I do next if I only select files for January, and then February, and so on. Thank you.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Two regexes:</p>
<ol>
<li><code>\d{4}(?:\d?|\d{2})(?:\d?|\d{2})\.faifb1p16m2\.nc</code></li>
<li><code>\d{8}\.faifb1p16m2\.nc</code></li>
</ol>
<p>Sample data:</p>
<ol>
<li>20140131.faifb1p16m2.nc</li>
<li>2014131.faifb1p16m2.nc</li>
<li>201412.faifb1p16m2.nc</li>
<li>201411.faifb1p16m2.nc</li>
<li>20141212.faifb1p16m2.nc</li>
<li>2014121.faifb1p16m2.nc</li>
<li>201411.faifb1p16m2.nc</li>
</ol>
<p>The first regex will match all 7 of those entries. The second regex will match only 1, and 5. I probably made the regexes way more complicated than I needed to. </p>
<p><strong>You're going to want the second regex, but I'm just listing the first as an example.</strong></p>
<pre><code>from glob import glob
import re

re1 = r'\d{4}(?:\d?|\d{2})(?:\d?|\d{2})\.faifb1p16m2\.nc'
re2 = r'\d{8}\.faifb1p16m2\.nc'

l = [f for f in glob('*.faifb1p16m2.nc') if re.search(re1, f)]
m = [f for f in glob('*.faifb1p16m2.nc') if re.search(re2, f)]

print l
print
print m
#Then, suppose you want to filter and select everything with '12' in the list m
print filter(lambda x: x[4:6] == '12', m)
</code></pre>
<p>As <a href="https://stackoverflow.com/questions/13031989/regular-expression-using-in-glob-glob-of-python">another similar solution shows</a> you can ditch glob for os.listdir(), so:</p>
<pre><code>l = [f for f in glob('*.faifb1p16m2.nc') if re.search(re1, f)]`
</code></pre>
<p>Becomes: </p>
<pre><code>l = [f for f in os.listdir() if re.search(re1, f)]
</code></pre>
<p>And then the rest of the code is great. One of the great things about using <a href="http://docs.python.org/2/library/glob.html" rel="nofollow noreferrer">glob</a> is that you can use <code>iglob</code> which is just like glob, but as an iterator, which can help with performance when going through a directory with lots of files. </p>
<p>One more thing, here's another stackoverflow post with an overview of <a href="https://stackoverflow.com/questions/890128/python-lambda-why">python's infamous lambda feature</a>. It's often used for the functions <code>map</code>, <code>reduce</code>, <code>filter</code>, and so on. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can do :</p>
<pre><code>x = [i for i in results if i[4:6] == '01']
</code></pre>
<p>It will list all file names for January.
Assuming that your all files of same format as you have described in the question. </p>
</div>
<div class="post-text" itemprop="text">
<p>To validate filenames, you could use <a href="http://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow"><code>datetime.strptime()</code> method</a>:</p>
<pre><code>#!/usr/bin/env python
import os
from datetime import datetime
from glob import glob

suffix = '.faifb1p16m2.nc'

def parse_date(path):
    try:
        return datetime.strptime(os.path.basename(path), '%Y%m%d' + suffix)
    except ValueError:
        return None # failed to parse


paths_by_month = [[] for _ in range(12 + 1)]
for path in glob(r'C:\DATA2013\*' + suffix): # for each nc-file in the directory
    date = parse_date(path)
    paths_by_month[date and date.month or 0].append(path)

print(paths_by_month[2]) # February paths
print(paths_by_month[0]) # paths with unrecognized date
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>from os import *
results = []
base_dir = 'C://local'
chdir(base_dir)
files = listdir(base_dir)
for f in files:
    if '.faifb1p16m2.nc' in f and f[4:6] == '01': #describe the month in this string
        print f            
</code></pre>
</div>
<span class="comment-copy">Use glob: <a href="http://docs.python.org/2/library/glob.html" rel="nofollow noreferrer">docs.python.org/2/library/glob.html</a></span>
<span class="comment-copy">See answer I made to this post</span>
<span class="comment-copy">Thank you very much. Now it works, but I still have problem. I will put it in next question</span>
<span class="comment-copy">@user3346361, be sure to upvote the answers and mark them as correct. What's your other problem?</span>
<span class="comment-copy">Thank you, now it works..</span>
<span class="comment-copy">Thank you for your help</span>
<span class="comment-copy">@user3346361, be sure to upvote the answer and mark it as correct.</span>
