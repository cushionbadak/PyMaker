<div class="post-text" itemprop="text">
<p>I am trying to recreate the s.find('substring') function. the two problems I am encountering are as follows: <br/> 1)The ability to find the beginning index, for example:
<br/></p>
<pre><code>Enter a phrase please"my best test ever!"
Enter a word you wish to find"best"
found first instance of letter at,  0
found first instance of letter at,  19
&gt;&gt;&gt; 
</code></pre>
<p>2) Assuming the correct index has been located, I expected this code segment to indicate whether or 
not the entire substring is within the string:<br/></p>
<pre><code>str2 in str1[i:len(str1)]
</code></pre>
<p>Whenever I test it independently of the main loop in idle, it does not work correctly.</p>
<p>Here is my main code: </p>
<pre><code>str1 = input("Enter a phrase please")
str2 = input("Enter a word you wish to find")




for i in range(len(str1)):
    if str2[0] == str1[i]:
        print("found first instance of letter at, ", i)
        str2 in str1[i:len(str1)]
</code></pre>
<p>Any suggestions would be greatly appreciated, thanks mates!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your loop should work just fine, but you are not doing anything with the <code>str2 in str1[..]</code> test and are not calculating the end point correctly; you want to use the length of <code>str2</code> here, really.</p>
<p>You could loop directly over <code>str1</code> and add indices with the <a href="http://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code> function</a>. You need to <em>add</em> the <code>len(str2)</code> result to <code>i</code> to find the endpoint, and make it print out the test; I used <code>==</code> here as the resulting slice should be the <em>same string</em>:</p>
<pre><code>for i, char in enumerate(str1):
    if str2[0] == char:
        print("found first instance of letter at,", i)
        print(str2 == str1[i:i + len(str2)])
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; str1 = 'my best test ever!'
&gt;&gt;&gt; str2 = 'best'
&gt;&gt;&gt; for i, char in enumerate(str1):
...     if str2[0] == char:
...         print("found first instance of letter at, ", i)
...         print(str2 == str1[i:i + len(str2)])
... 
found first instance of letter at,  3
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a demo of an algorithm that does not use any of the wonderful tools that Python gives you, take a look at the <a href="http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" rel="nofollow">Knuth-Morris-Pratt</a> method.</p>
<p>Here, roughly implemented in Python as if Python were Assembly:</p>
<pre><code>  #0         1         2
  #0123456789012345678901234
S='dcdcacdcdeerecdabcddfdabc'
W=               'abc' # ^^^
m=0
i=0
while True:
    if m+i==len(S):
        break   
    if W[i]==S[m+i]:
        if i==len(W)-1:
            print 'MATCH!', m
            i=0
            m+=1
        else:
            i+=1
    else:
        i=0
        m+=1
</code></pre>
<p>Prints:</p>
<pre><code>MATCH! 15
MATCH! 22
</code></pre>
</div>
