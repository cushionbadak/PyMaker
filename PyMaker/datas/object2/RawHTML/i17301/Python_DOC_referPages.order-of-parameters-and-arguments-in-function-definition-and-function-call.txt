<div class="post-text" itemprop="text">
<p>At the end of the day studying parameters and arguments in python , I finally made the following conclusion</p>
<p><strong>Order of parameters in function definition</strong></p>
<pre><code>def foo ( non-optional parameters , optional parameters , *args , **kwargs):
</code></pre>
<p><strong>Order of arguments in function call</strong> </p>
<pre><code>foo( non-keyword arguments , keyword arguments )
</code></pre>
<p>Just want to know whether there is any exception to this in python world....
Further if there are any other types of arguments/parameters please do comment...</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Argument Matching Syntax</strong>
summarizes the syntax that invokes the special argument-matching modes.
Function argument-matching forms Syntax Location Interpretation</p>
<ol>
<li><strong>func(value)</strong>       Caller Normal argument: matched by position</li>
<li><strong>func(name=value)</strong>  Caller Keyword argument: matched by name</li>
<li><strong>func(*iterable)</strong>   Caller Pass all objects in iterable as individual positional arguments</li>
<li><strong>func(**dict)</strong>      Caller Pass all key/value pairs in dict as individual keyword arguments</li>
</ol>
<p>below are for defining functions......</p>
<ol>
<li><strong>def func(name)</strong>    Function Normal argument: matches any passed value by position or name</li>
<li><strong>def func(name=value)</strong> Function Default argument value, if not passed in the call</li>
<li><strong>def func(*name)</strong>        Function Matches and collects remaining positional arguments in a tuple</li>
<li><strong>def func(**name)</strong>     Function Matches and collects remaining keyword arguments in a dictionary</li>
<li><strong>def func(*other, name)</strong> Function Arguments that must be passed by keyword only in calls (3.X)</li>
<li><strong>def func(*, name=value)</strong> Function Arguments that must be passed by keyword only in calls (3.X)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/2/reference/index.html#the-python-language-reference" rel="nofollow">Python Language Reference</a> describes the syntax and “core semantics” of the language. It is terse, but attempts to be exact and complete. There you find descriptions of lexical analysis and syntax using a modified <a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form" rel="nofollow">BNF grammar</a> notation.</p>
<p>Usually all Python implementation follow this grammar. Thus there should be no exceptions on this grammar. If yes, you should refer to the implementation-specific documentation.</p>
<p><a href="http://docs.python.org/2/reference/compound_stmts.html#function-definitions" rel="nofollow">Function definitions</a></p>
<pre><code>decorated      ::=  decorators (classdef | funcdef)
decorators     ::=  decorator+
decorator      ::=  "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE
funcdef        ::=  "def" funcname "(" [parameter_list] ")" ":" suite
dotted_name    ::=  identifier ("." identifier)*
parameter_list ::=  (defparameter ",")*
                    (  "*" identifier ["," "**" identifier]
                    | "**" identifier
                    | defparameter [","] )
defparameter   ::=  parameter ["=" expression]
sublist        ::=  parameter ("," parameter)* [","]
parameter      ::=  identifier | "(" sublist ")"
funcname       ::=  identifier
</code></pre>
<p><a href="http://docs.python.org/2/reference/expressions.html#calls" rel="nofollow">Calls</a></p>
<pre><code>call                 ::=  primary "(" [argument_list [","]
                          | expression genexpr_for] ")"
argument_list        ::=  positional_arguments ["," keyword_arguments]
                            ["," "*" expression] ["," keyword_arguments]
                            ["," "**" expression]
                          | keyword_arguments ["," "*" expression]
                            ["," "**" expression]
                          | "*" expression ["," "*" expression] ["," "**" expression]
                          | "**" expression
positional_arguments ::=  expression ("," expression)*
keyword_arguments    ::=  keyword_item ("," keyword_item)*
keyword_item         ::=  identifier "=" expression
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/1419046/python-normal-arguments-vs-keyword-arguments">Python normal arguments vs. keyword arguments</a></span>
<span class="comment-copy">Allowed syntax for <a href="http://docs.python.org/2/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">Python 2.x</a> and allowed for <a href="http://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">Python 3.x</a> - note the difference for specifying end of positional arguments in Python 3.x is discussed in <a href="http://legacy.python.org/dev/peps/pep-3102/" rel="nofollow noreferrer">PEP 3102</a></span>
