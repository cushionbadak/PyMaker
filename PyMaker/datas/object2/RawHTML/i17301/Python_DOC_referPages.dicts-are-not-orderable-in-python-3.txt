<div class="post-text" itemprop="text">
<p>Why are dicts orderable in python2, but not in python3? I can't find it anywhere in the documentation.</p>
<pre><code>Python 3.3.4 (default, Feb 11 2014, 16:14:21)
&gt;&gt;&gt; sorted([{'a':'a'},{'b':'b'}])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: dict() &lt; dict()
</code></pre>
<p>vs.</p>
<pre><code>Python 2.7.6 (default, Feb 26 2014, 12:01:28)
&gt;&gt;&gt; sorted([{'a':'a'},{'b':'b'}])
[{'a': 'a'}, {'b': 'b'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 2 uses an <a href="https://stackoverflow.com/q/3484293">undocumented ordering</a>, implemented as a <a href="http://docs.python.org/2/reference/datamodel.html#object.__cmp__" rel="noreferrer"><code>.__cmp__()</code></a> special method.</p>
<p>The ordering only makes sense in a limited set of use-cases, and only exists because Python 2 tries to make <em>everything</em> orderable.</p>
<p>Python 3 <a href="http://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons" rel="noreferrer">drastically cleaned up Python's ordering story</a>; <code>.__cmp__()</code> is gone, and only types that actually have a natural ordering (such as numbers and strings) now support ordering. For everything else, you'll need to explicitly define an ordering.</p>
<p>Dictionaries do not have a natural ordering. If you do need to order dictionaries, you need to define an explicit order that makes sense for your use case. If that means comparing just the keys, do so (e.g. use <code>key=sorted</code>), etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to <code>sort</code> with a <code>key</code> (<a href="http://docs.python.org/2.7/library/functions.html#sorted" rel="nofollow noreferrer">documentation</a>). Only you know what key you want, but here's one example:</p>
<pre><code>&gt;&gt;&gt; dicts = [{'a':'a'},{'b':'b'}]
&gt;&gt;&gt; sorted(dicts, key=lambda x:sorted(x.keys()))
[{'a': 'a'}, {'b': 'b'}]
</code></pre>
<p>This is sorting by keys, where the dict with the "lowest" key comes first</p>
<hr/>
<p><strong>Edit:</strong> as pointed out by Martijn Pieters, <a href="https://stackoverflow.com/a/3484456/3130539">this answer</a> describes exactly how Python 2 does it. But you should sort in the way that makes sense to <em>your situation</em>, which may be fundamentally different from how Python 2 does it.</p>
</div>
<span class="comment-copy">Nope, what order did you expect them to be in?</span>
<span class="comment-copy">Hrm, I was wrong, both keys and values are used; still, because dictionaries are <i>themselves</i> unordered, this doesn't actually make much sense.</span>
<span class="comment-copy">For a reference of what Python 2 does: <a href="http://stackoverflow.com/q/3484293">Is there a description of how cmp works for dict objects in Python 2?</a></span>
<span class="comment-copy">Why was that abandoned in Python 3? Is it found in some documentation somewhere?</span>
<span class="comment-copy">But the ordering wasn't even documented, and doesn't make sense in all use-cases. Explicit is better than implicit; you need to sort dictionaries you need to bring your own definition what the proper order should be.</span>
<span class="comment-copy">But why in python 3 can I sort a list of sets? If I do a = {1, 2}, b = {3, 4} I can do sorted([a, b]) and sorted([b, a]), but sorted([a, b]) != sorted([b, a]). This seems like it it using the len operator as a key, but why doesn't it throw a TypeError instead?</span>
<span class="comment-copy">@Erotemic sets overload the comparison operator to implement subset testing instead. <code>a &lt; b</code> is true if a is a strict subset of b.</span>
<span class="comment-copy">@Erotemic they don't define a sort order; <code>{1, 2, 3}</code> is a superset of sets <code>{1}</code>, <code>{2}</code>, and <code>{3}</code>, but those three smaller sets are not subsets of one another and so <code>&lt;</code> returns false for any combination of those smaller sets. That breaks the expectations of sorting. No type error is thrown however because it is still a legal test.</span>
<span class="comment-copy">Which is pretty much what Python 2 did except it also compared values if keys were equal.</span>
<span class="comment-copy">Ah, good to know! This was just my guess</span>
<span class="comment-copy">I linked to a detailed description from Ned in a <a href="http://stackoverflow.com/questions/22333388/dicts-are-not-orderable-in-python-3/22333507?noredirect=1#comment33940961_22333388">comment under the question</a>.</span>
