<div class="post-text" itemprop="text">
<p>Me and my friend are making a program that requires a login at the start. We've managed to get the user to input details, and have the program create a text file called (users name) profile with the details in. each one is formatted like this:</p>
<p>(Name)</p>
<p>(Username)</p>
<p>(Password)</p>
<p>when you want to log in, the program asks for your name and finds the file with the name (whatever they typed) profile.
if it exists, the program then opens a GUI window and asks for the username and password, and if you put in the correct details for the file it has opened, it says that the details are wrong. We think its to do with the variables, but we've tried lot of different ways of laying it out e.t.c and can't find the problem. Can anyone help?
(The code I have included is only the GUI part including the bit that isn't working, the rest is fine.</p>
<pre><code># Log in
def LogIn():
    name=input("Please enter your name: ")
    file = open(name.lower() + " profile.txt", "r")
#+=========GUI===========GUI============GUI===========+

    #mport modules
    import tkinter
    import time

    #---Window---#
    #make window
    window = tkinter.Tk()
    #change title
    window.title("Python Games Login")
    #change size
    window.geometry("270x210")
    #change window icon
    window.wm_iconbitmap("Login icon.ico")
    #change window colour
    window.configure(bg="#39d972")

    #---Commands---#
    #go
    def callback():
        line = file.readlines()
        username = user.get()
        password = passw.get()
        if username == line[1] and password == line[2]:
            message.configure(text = "Logged in.")
        else:
            message.configure(text = "Username and password don't match the account \n under the name;\n \'" + name + "\'. \nPlease try again.")
    #---Widgets---#
    #labels
    title1 = tkinter.Label(window, text="--Log in to play the Python Games--\n", bg="#39d972")
    usertitle = tkinter.Label(window, text="---Username---", bg="#39d972")
    passtitle = tkinter.Label(window, text="---Password---", bg="#39d972")
    message = tkinter.Label(window, bg="#39d972")

    #text entry windows
    user = tkinter.Entry(window)
    passw = tkinter.Entry(window, show='*')

    #buttons
    go = tkinter.Button(window, text="Log in!", command = callback, bg="#93ff00")

    #pack widgets
    title1.pack()
    usertitle.pack()
    user.pack()
    passtitle.pack()
    passw.pack()
    go.pack()
    message.pack()

    #start window
    window.mainloop()

#+===================GUI END=====================+
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Notice that <code>readlines</code> does not strip the end-of-line character(s) from the lines:</p>
<pre><code>In [57]: f = open('data','r')

In [58]: f.readlines()
Out[58]: ['index,value\n', '0,16714217840939775\n', '1,16714217840939776 \n']
</code></pre>
<p>So <code>username == line[1]</code> is probably failing since <code>username</code> does not include the end-of-line character. And the same goes for <code>password == line[2]</code>.</p>
<p>A simple fix would be to use </p>
<pre><code>username == line[1].strip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use python's <em>pickle</em> module to save data. It is much more high level than just saving it in a text file. In my example, I pickled a list of dictionaries.</p>
<pre><code>import pickle
def LogIn():
    name=input("Please enter your name: ").lower()
    #data.pickle should be a list of dictionaries representing a user
    usernames= pickle.load('data.pickle')
    for userdata in usernames:
        if userdata['name']== name:
            return userdata
    #didn't find the name
    print('could not find '+ name+ ' in data.pickle')
    return None
</code></pre>
<p>A note about <em>pickle</em> from <a href="http://docs.python.org/3/library/pickle.html#module-pickle" rel="nofollow" title="the docs">the docs</a>:</p>
<blockquote>
<p>Warning:</p>
<p>The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.</p>
</blockquote>
<p>Also check out <em>shelve</em> and <em>marshal</em>, they perform similar results, or consider saving it in a json file format (python has a <em>json</em> module)</p>
</div>
<span class="comment-copy">Thanks a lot, i hadn't though about the end of line characters, that makes a lot of sense now, thank you :)</span>
<span class="comment-copy">For better security you may want to <a href="http://dustwell.com/how-to-handle-passwords-bcrypt.html" rel="nofollow noreferrer">read this</a> and store the bcrypt hash of the password rather than the password itself.</span>
<span class="comment-copy">thanks, that will be useful if we need it in the future, but at the moment, security isnt the problem, we decided we could use accounts to store scores, so nothing is really being lost if someone decides to hack it</span>
<span class="comment-copy">Thank you, we'll try using the pickle module in a duplicate and see which works best/we prefer, thanks for the suggestion</span>
<span class="comment-copy">No problem, if you have any trouble let me know, and Ill be gld to help out</span>
