<div class="post-text" itemprop="text">
<p>Hi I am trying to print the data type of a user input and produce a table like following:</p>
<blockquote>
<p>ABCDEFGH = String,
  1.09 = float, 0 = int, true = bool</p>
</blockquote>
<p>, etc.
I'm using python 3.2.3 and I know I could use type() to get the type of the data but in python all user inputs are taken as strings and I don't know how to determine whether the input is a string or Boolean or integer or float. Here is that part of the code:</p>
<pre><code>user_var = input("Please enter something: ")
print("you entered " + user_var)
print(type(user_var))
</code></pre>
<p>which always returns str for string.
Appreciate any help</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from ast import literal_eval

def get_type(input_data):
    try:
        return type(literal_eval(input_data))
    except (ValueError, SyntaxError):
        # A string, so return str
        return str

print(get_type("1"))        # &lt;class 'int'&gt;
print(get_type("1.2354"))   # &lt;class 'float'&gt;
print(get_type("True"))     # &lt;class 'bool'&gt;
print(get_type("abcd"))     # &lt;class 'str'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/functions.html#input" rel="nofollow"><code>input()</code></a> will always return a string. If you want to see if it is possible to be converted to an integer, you should do:</p>
<pre><code>try:
    int_user_var = int(user_var)
except ValueError:
    pass # this is not an integer
</code></pre>
<p>You could write a function like this:</p>
<pre><code>def try_convert(s):
    try:
        return int(s)
    except ValueError:
        try:
            return float(s)
        except ValueError:
            try:
                return bool(s)
            except ValueError:
                return s
</code></pre>
<p>However, as mentioned in the other answers, using <code>ast.literal_eval</code> would be a more concise solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Input will always return a string. You need to evaluate the string to get some Python value:</p>
<pre><code>&gt;&gt;&gt; type(eval(raw_input()))
23423
&lt;type 'int'&gt;
&gt;&gt;&gt; type(eval(raw_input()))
"asdas"
&lt;type 'str'&gt;
&gt;&gt;&gt; type(eval(raw_input()))
1.09
&lt;type 'float'&gt;
&gt;&gt;&gt; type(eval(raw_input()))
True
&lt;type 'bool'&gt;
</code></pre>
<p>If you want safety (here user can execute arbitrary code), you should use <code>ast.literal_eval</code>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; type(ast.literal_eval(raw_input()))
342
&lt;type 'int'&gt;
&gt;&gt;&gt; type(ast.literal_eval(raw_input()))
"asd"
&lt;type 'str'&gt;
</code></pre>
</div>
<span class="comment-copy">i like the answer, but i think the poster wanted to print the evaluated type of the input string, not the evaluated value</span>
<span class="comment-copy">@icedtrees Please check my updated answer :)</span>
<span class="comment-copy">The problem now seems to be that the "try" statements are ignored and nothing that is inside the statements is printed</span>
<span class="comment-copy">@ApeironKambyses Can you please update the question with your changed code?</span>
<span class="comment-copy">@ApeironKambyses Do the boolean values have initial capital letters?</span>
<span class="comment-copy">do I have to use "if statements" to determine every single type and try to convert them to Booleans, floats etc?</span>
<span class="comment-copy">Yes, you will have to do that.</span>
<span class="comment-copy"><code>bool(s)</code> is <code>True</code> for every non-empty string. Without <code>literal_eval</code> you'd have to use a string comparison for <code>"True"</code> and <code>"False"</code>.</span>
<span class="comment-copy">Thanks everybody. You have all been very helpful</span>
<span class="comment-copy">From the question <code>I'm using python 3.2.3</code></span>
<span class="comment-copy">This is very dangerous if the user input is <code>import os; os.system("rm -rf *")</code>.</span>
<span class="comment-copy">@TomLeese no it's not, you are probably thinking of <code>exec</code> and not <code>eval</code></span>
<span class="comment-copy">Ok, you are correct that you would not be able to <code>import os</code>, but you could still run <code>os.system("rm -rf *")</code> if it was already imported.</span>
<span class="comment-copy">@Tom Leese: see my edit. I didn't write it at first because I didn't remember in with module the <code>literal_eval</code> function was.</span>
