<div class="post-text" itemprop="text">
<p>This is my Python code:</p>
<pre><code># 1)
if (x not in z for z in y):

# 2)
if (x not in y):
</code></pre>
<p>Where y could be a list like:</p>
<pre><code>y = ['1','2','3']
</code></pre>
<p>Can somebody explain me the difference between these two sentences?
Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Let’s start with the simple one first:</p>
<pre><code>if (x not in y):
</code></pre>
<p>The parentheses don’t carry any meaning there, so this is equivalent to this:</p>
<pre><code>if x not in y:
</code></pre>
<p>The <a href="http://docs.python.org/3/reference/expressions.html#not-in" rel="nofollow"><code>in</code> operator</a> checks if something is <em>contained within</em> something else. In your case, you have a list <code>y</code>, so you are checking if something (<code>x</code>) is <em>not contained within</em> (<code>not in</code>) that list <code>y</code>. So <code>'1' not in y</code> would be <code>False</code> because <code>'1'</code> is an element of <code>y</code>, and <code>'4' not in y</code> would be <code>True</code> because <code>'4'</code> is not an element of <code>y</code>.</p>
<p>The other one is something completely different though:</p>
<pre><code>if (x not in z for z in y)
</code></pre>
<p>Here we have a <a href="http://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow"><em>generator expression</em></a>. Generator expressions are of the format <code>(x for z in y)</code> and are equivalent to this code:</p>
<pre><code>for z in y:
    yield x
</code></pre>
<p>You might have heard about <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow"><em>list comprehensions</em></a> before; those are similar but use square brackets instead of parentheses: <code>[x for z in y]</code>. As they return a list, they are a bit easier to understand. They are equivalent to this:</p>
<pre><code>lst = []
for z in y:
    lst.append(x)
return lst
</code></pre>
<p>Essentially, you are looping over the elements of <code>y</code>, calling each element in an iteration
<code>z</code> and return <code>x</code> for that element. In your case, <code>x</code> is an expression itself: <code>x not in z</code> which is basically the same as above: You are checking if <code>x</code> is <em>not contained within</em> <code>z</code>.</p>
<p>Now, generator expressions are a bit complicated, because they are evaluated when an element is requested from it, so let’s assume for now that we have a list comprehension instead</p>
<pre><code>if [x not in z for z in y]:
</code></pre>
<p>So what this does is calculate <code>x not in z</code> for each element <code>z</code> in <code>y</code>. So for your <code>y</code>, the resulting list would be this:</p>
<pre><code>[x not in '1', x not in '2', x not in '3']
</code></pre>
<p>With a real <code>x</code>, this would as such result in a list with three boolean values. Now a non-empty list is always trueish, so regardless of the result in this check, the <code>if</code>-check would succeed.</p>
<p>The generator expression will return a generator though, which is a more complex object that a list. It is just as well true-ish though, so your check will also succeed regardless of the individual values.</p>
<p>Now imagine, we want to make sure, that for those three elements in the list, we want all checks to result in <code>True</code>. For that, we can use the <a href="http://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all()</code></a> function which essentially checks if a list—or the values in a generator—contains only true values.</p>
<pre><code>if all(x not in z for z in y):
</code></pre>
<p>So this will succeed if <code>x</code> is not contained within any element of the list <code>y</code>. If on the other hand we wanted to check if at least one trueish value is in the list or generator, then we could instead use the <a href="http://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any()</code></a> function.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Generator</h2>
<p>To begin with, <code>(x not in z for z in y)</code> is a generator statement, and if <code>if</code> is in front of it, it will always return True.</p>
<pre><code>if (x not in z for z in y): # Always returns True
</code></pre>
<p>This could be used to see if any or all of the nested iterables contain <code>x</code>.</p>
<p>e.g. </p>
<pre><code>if any(x in z for z in y): # Returns True if any of the z's contain x
if all(x in z for z in y): # Returns True only if all of the z's contain x
</code></pre>
<p>So if <code>y</code> is this:</p>
<pre><code>y = ['hello','how','are','you']
</code></pre>
<p>then if <code>x</code> is, for example, <code>'e'</code>, then the <code>any</code> comprehension above would return <code>True</code>, but the <code>all</code> comprehension would return <code>False</code>. </p>
<h2>Conditional</h2>
<p>So here's what going on inside that generator comprehension: if y is a list, and you test with:</p>
<pre><code>(x not in z for z in y)
</code></pre>
<p>the z in y must be an iterable in order to test for inclusion, which strings are, but you're only seeing if something is in a string of length one in this case. A better example would be to use integers:</p>
<pre><code>y = [1, 2, 3]
</code></pre>
<p>and </p>
<pre><code>if (x not in z for z in y):
</code></pre>
<p>would fail, because integers are not iterable, but </p>
<pre><code>if (x not in y):
</code></pre>
<p>would succeed because you can test for membership in the actual list.</p>
<p>When you have </p>
<pre><code>y = ['1','2','3']
</code></pre>
<p>a similar level of nesting would be:</p>
<pre><code>y = [(1,), (2,), (3,)]
</code></pre>
<p>and with </p>
<pre><code>(x not in z for z in y)
</code></pre>
<p>you are testing if x is in one of those tuples.</p>
<p>Does that make sense?</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>This</p>
<pre><code>if (x not in z for z in y):
</code></pre>
<p>is equivalent to</p>
<pre><code>if True:
</code></pre>
<p>Because</p>
<pre><code>&gt;&gt;&gt; (x not in z for z in y)
&lt;generator object &lt;genexpr&gt; at 0x000000E7AE26FB88&gt;
&gt;&gt;&gt; bool(_)
True
</code></pre></li>
<li><p>This</p>
<pre><code>if (x not in y):
</code></pre>
<p>Is the same as</p>
<pre><code>if x not in y:
</code></pre>
<p>Which resolves internally to</p>
<pre><code>if not y.__contains__(x):
</code></pre></li>
</ol>
<hr/>
<p>In the first case, you might have meant to write:</p>
<pre><code>if any(x not in z for z in y):
# same as
if not all(x in z for z in y):
</code></pre>
<p>or:</p>
<pre><code>if all(x not in z for z in y):
# same as
if not any(x in z for z in y):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'll assume this is a general question, and the actual values in the list don't matter much. </p>
<p>For:</p>
<pre><code>1) if (x not in z for z in y):
</code></pre>
<p>The <code>for</code> in the statement means you have a  "list comprehension" or "generator expression" (inside parens). It will generate a list. This one is a list comprehension with a filter (the <code>x not in z</code> part). But the end result will be a list that may or may not be empty. Now the <code>if</code> statement will evaluate this for "truthiness", where an empty list is considered false, and non-empty is true.  </p>
<pre><code>2) if (x not in y):
</code></pre>
<p>This is a straight "containment test" that tests directly if <code>x</code> is contained (or not) in the iterable <code>y</code>, and returns a Boolean value. This can be a fast test, depending on what kind of object <code>y</code> is.  </p>
<p>The first form is probably slower and unnecessary in most cases. The first one has to create and then destroy a temporary list.</p>
</div>
<span class="comment-copy">Thank you very much! What if y = ['hello','how','are','you']? What is x then?</span>
<span class="comment-copy">@Krishath it would check if x is a letter in any of those words.    e.g., <code>x = 'h' &gt; True</code>; <code>x = 'p' &gt; False</code>; <code>x = 'hello' &gt; False</code></span>
<span class="comment-copy">Thanks! Great community!</span>
