<div class="post-text" itemprop="text">
<p>I have four functions named <code>numbers_string1()</code>, <code>numbers_string2()</code>, <code>numbers_string3()</code>, <code>numbers_string4()</code>, and I need to find out the execution time of these functions.</p>
<pre><code>from numstring import *
import time
def profile_clock():
    l=["numbers_string1","numbers_string2","numbers_string3","num_strings4"]
    for i in l:
        count=1
        for j in range(5):
            m=[]
            count=count*10
            m=timeit.repeat("i(count)",5,count)
            #m=t.repeat(5,count)
            print i,(),"count=",count,"min=",min(m),"atuals=",m
</code></pre>
<p>When I execute this, I am getting error as global name <code>i</code> is not defined.</p>
</div>
<div class="post-text" itemprop="text">
<p>Tests with <code>timeit</code> are executed in their own separated scope. This is primarily done so the timing is not influenced by some side effects in the module that is executing the test. As such, neither <code>i</code>, nor your functions <code>numbers_string1/2/3/4</code> are defined during the test.</p>
<p>You can import them by setting them up though, for example:</p>
<pre><code>timeit.repeat("numbers_string1(count)", 5, count, setup='from __main__ import numbers_string1')
</code></pre>
<p>But this wonâ€™t fix the issue for you because <code>i</code> is still not defined, and even if it was, it would be <em>a string</em>, and not a function you can execute. Your intention was probably this:</p>
<pre><code>timeit.repeat('{}({})'.format(i, count), repeat=5, setup='from __main import ' + i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>timeit</code> functions run in their own function space. It doesn't have access to your scope, which is why it provides for a "setup" parameter that it executes to set up the timing environment. You need to define any functions and variables that you need in a string, which you then pass to <code>timeit.repeat</code> as the <code>setup</code> argument.</p>
<p>You seem to be misunderstanding how a couple of other things work, too. When you put <code>"i"</code> in a string, it's just the letter <code>"i"</code>. It doesn't magically take on the value of the variable <code>i</code>. For that matter, neither does <code>"count"</code>. You need to create a string that holds some actual values, not variable names.</p>
<p>It looks to me like you want to do something like this:</p>
<pre><code>setup = 'from numstring import *' # String to execute to set up the timeit scope
funcs = ["numbers_string1", "numbers_string2", "numbers_string3", "num_strings4"]
for func in funcs: # Better variable names are better!
    for count in (1, 10, 100, 1000, 10000): # Clean up this iteration
        statement = '{f}({n})'.format(f=func, n=count) # the call to test
        m = timeit.repeat(statement, setup=setup, repeat=5)
</code></pre>
<hr/>
<p>I highly recommend that you <a href="http://docs.python.org/3/library/timeit.html" rel="nofollow">read the documentation</a>, since <code>m=timeit.repeat("i(count)",5,count)</code> isn't a legal use of the function in the first place.</p>
</div>
