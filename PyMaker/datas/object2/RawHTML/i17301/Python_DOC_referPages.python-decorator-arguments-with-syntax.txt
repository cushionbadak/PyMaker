<div class="post-text" itemprop="text">
<p>I'm trying to use a cached property decorator that can take arguments.</p>
<p>I looked at this implementation: <a href="http://www.daniweb.com/software-development/python/code/217241/a-cached-property-decorator" rel="nofollow">http://www.daniweb.com/software-development/python/code/217241/a-cached-property-decorator</a></p>
<pre><code>from functools import update_wrapper 

def cachedProperty (func ,name =None ):
  if name is None :
    name =func .__name__ 
  def _get (self ):
    try :
      return self .__dict__ [name ]
    except KeyError :
      value =func (self )
      self .__dict__ [name ]=value 
      return value 
  update_wrapper (_get ,func )
  def _del (self ):
    self .__dict__ .pop (name ,None )
  return property (_get ,None ,_del )
</code></pre>
<p>But the problem I have is that I cannot call the decorator with the @ syntax if I want to use the parameter:</p>
<pre><code>@cachedProperty(name='test') # This does NOT work
def my_func(self):
    return 'ok'

# Only this way works
cachedProperty(my_func, name='test')
</code></pre>
<p>How to use the @ syntax with decorators arguments?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a <em>decorator factory</em>, another wrapper that <em>produces</em> the decorator:</p>
<pre><code>from functools import wraps 

def cachedProperty(name=None):
    def decorator(func):
        if decorator.name is None:
            decorator.name = func.__name__ 
        @wraps(func)
        def _get(self):
            try:
                return self.__dict__[decorator.name]
            except KeyError:
                value = func(self)
            self.__dict__[decorator.name] = value 
            return value 
        def _del(self):
            self.__dict__.pop(decorator.name, None)
        return property(_get, None, _del)
    decorator.name = name
    return decorator
</code></pre>
<p>Use this as:</p>
<pre><code>@cachedProperty(name='test')
def my_func(self):
    return 'ok'
</code></pre>
<p>A decorator is really just syntactic sugar for:</p>
<pre><code>def my_func(self):
    return 'ok'
my_func = cachedProperty(name='test')(my_func)
</code></pre>
<p>so as long as the expression after <code>@</code> returns your decorator <sup>[*]</sup> it doesn't matter what the expression itself actually does.</p>
<p>In the above example, the <code>@cachedProperty(name='test')</code> part first executes <code>cachedProperty(name='test')</code>, and the return value of that call is used as the decorator. In the above example, <code>decorator</code> is returned, so the <code>my_func</code> function is decorated by calling <code>decorator(my_func)</code>, and the return value of that call is <code>property</code> object, so that is what'll replace <code>my_func</code>.</p>
<hr/>
<p><sup>[*]</sup> The <code>@</code> expression syntax is deliberately limited in how much it is allowed to do. You can do attribute lookups and calls, that's it, the <a href="https://docs.python.org/3/reference/compound_stmts.html#grammar-token-decorator" rel="nofollow noreferrer"><code>decorator</code> grammar rule</a> only allows an optional call with arguments at the end of a dotted name (where dots are optional):</p>
<blockquote>
<pre><code>decorator               ::=  "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE)
</code></pre>
</blockquote>
<p>This is a <a href="https://stackoverflow.com/questions/32567563/python-decorator-func-attribute-syntax-error/32567701#32567701">deliberate limitation</a> of the syntax.</p>
</div>
<span class="comment-copy">Yes that does not work, name is not referenced. How can I have access to it then? Also, would it be easier to define the decorator with a class?</span>
<span class="comment-copy">is there a difference between using <code>(set|get|del)attr</code> and <code>__dict__</code>?</span>
<span class="comment-copy">@rmartinjak: it would bypass any data descriptors, for one. So if there is a <code>type(self).test</code> property, <code>self.__dict__['test']</code> would access the instance attribute directly without triggering the property.</span>
<span class="comment-copy">once I defined a descriptor with arguments, do I always have to call it with the parentheses even if I want the default values for the arguments <code>@cached_property()</code>? Doing <code>@cached_property</code> returns the decorator function.</span>
<span class="comment-copy">@YAmikep: yes, because otherwise the <code>cached_property()</code> factory would be called with the function-to-decorate.</span>
