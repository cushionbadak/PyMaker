<div class="post-text" itemprop="text">
<p>I am writing a Python script that will ask for a file and a name (e.g. "John").  </p>
<p>The file contains a whole bunch of lines like this:</p>
<pre><code>...
Name=John
Age=30
Pay=1000
Married=1
Name=Bob
Age=25
Pay=500
Married=0
Name=John
Age=56
Pay=3000
Married=1
...
</code></pre>
<p>I want to open this file, ask the user for a name, and replace the pay value for all entries that match that name.  So, for example, the user inputs "John", I want to change the Pay for all "John"s to be, say, 5000.  The Pay value for other names don't change. </p>
<p>So far, I've opened up the file and concatenated everything into one long string to make things a bit easier:</p>
<pre><code>for line in file:
    file_string += line
</code></pre>
<p>At first, I was thinking about some sort of string replace but that didn't pan out since I would search for "John" but I don't want to replace the "John", but rather the Pay value that is two lines down.</p>
<p>I started using regex instead and came up with something like this.</p>
<pre><code># non-greedy matching
re.findall("Name=(.*?)\nAge=(.*?)\nPay=(.*?)\n", file_string, re.S)
</code></pre>
<p>Okay, so that spits out a list of 3-tuples of those groupings and it does seem to find everything fine.  Now, to do the actual replacement...</p>
<p>I read on another question here on StackOverflow that I can set the name of a grouping and use that grouping later on...:</p>
<pre><code>re.sub(r'Name=(.*?)\nAge=(.*?)\nPay=', r'5000', file_string, re.S)
</code></pre>
<p>I tried that to see if it would work and replace all Names with 5000, but it didn't.  If it would then I would probably do a check on the first group to see if it matched the user-inputed name or something.  </p>
<p>The other problem is that I read on the Python docs that <code>re.sub</code> only replaces the left-most occurrence.  I want to replace all occurrences.  How do I do that?</p>
<p>Now I am a bit loss of what to do so if anyone can help me that would be great!</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think that regex is the best solution to this problem. I prefer more general solutions. The other answers depend on one or more of the following things:</p>
<ol>
<li>There are always 4 properties for a person.</li>
<li>Every person has the same properties.</li>
<li>The properties are always in the same order.</li>
</ol>
<p>If these are true in your case, then regex could be ok.</p>
<p>My solution is more verbose, but it isn't depending on these. It handles mixed/missing properties, mixed order, and able to set and get any property value. You could even extend it a little, and support new property or person insertion if you need.</p>
<p>My code:</p>
<pre><code># i omitted "data = your string" here

def data_value(person_name, prop_name, new_value = None):
    global data
    start_person = data.find("Name=" + person_name + "\n")
    while start_person != -1:
        end_person = data.find("Name=", start_person + 1)
        start_value = data.find(prop_name + "=", start_person, end_person)        
        if start_value != -1:
            start_value += len(prop_name) + 1
            end_value = data.find("\n", start_value, end_person)
            if new_value == None:
                return data[start_value:end_value]
            else:
                data = data[:start_value] + str(new_value) + data[end_value:]                
        start_person = data.find("Name=" + person_name + "\n", end_person)
    return None

print data_value("Mark", "Pay")    # Output: None (missing person)
print data_value("Bob", "Weight")  # Output: None (missing property)
print data_value("Bob", "Pay")     # Output: "500" (current value)
data_value("Bob", "Pay", 1234)     # (change it)
print data_value("Bob", "Pay")     # Output: "1234" (new value)

data_value("John", "Pay", 555)     # (change it in both Johns)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterate 4 lines at a time. If the first line contains 'John' edit the line that comes two after. </p>
<pre><code>data = """
Name=John
Age=30
Pay=1000
Married=1
Name=Bob
Age=25
Pay=500
Married=0
Name=John
Age=56
Pay=3000
Married=1
"""

lines = data.split() 
for i, value in enumerate(zip(*[iter(lines)]*4)):
    if 'John' in value[0]:
        lines[i*4 + 2] = "Pay=5000"

print '\n'.join(lines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following code will do what you need:</p>
<pre><code>import re

text = """
Name=John
Age=30
Pay=1000
Married=1
Name=Bob
Age=25
Pay=500
Married=0
Name=John
Age=56
Pay=3000
Married=1
"""

# the name you're looking for
name = "John"
# the new payment
pay = 500

print re.sub(r'Name={0}\nAge=(.+?)\nPay=(.+?)\n'.format(re.escape(name)), r'Name=\1\nAge=\2\nPay={0}\n'.format(pay), text)
</code></pre>
</div>
<span class="comment-copy">You can just go through the file line by line, and as soon as you reach a name "John", change the Pay value two lines down, and then keep reading the remaining lines.</span>
<span class="comment-copy">Thank you for this solution because it is indeed much more robust and works great for me.  Now, there are two issues that I'd like to ask you about.  First, I'm a bit wary of using a deprecated <code>string.find()</code> function.  Is this going to be okay?  Second, I believe this function only happens to change one occurence of <code>Bob</code>.  How would I change all occurrences of <code>Bob</code> to <code>Pay=1234</code>?</span>
<span class="comment-copy">First: I don't know about <code>find()</code> being deprecated. It's even there in <a href="http://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow noreferrer">python 3 str</a>. Second: I try to do that, and get back to you...</span>
<span class="comment-copy">I modified the code so it changes all occurrences of the person. The "get" mode is still returns with the first match.</span>
<span class="comment-copy">You are the man! (or woman!) :)</span>
<span class="comment-copy">Man, and thank you :D</span>
