<div class="post-text" itemprop="text">
<p>I know <code>sum(list)</code> works to add ALL the elements in a list, but it doesn't allow you to select a range. </p>
<p>ex:</p>
<pre><code>l = [11, 22, 33, 44, 55, 66, 77]    
x = 4
</code></pre>
<p>In this case I want to add <code>l[0 : 4]</code> together. </p>
<p>I know I can do:</p>
<pre><code>short_l = l[0 : x]
sum(short_l)
</code></pre>
<p>But is there a function that allows me to select the range of elements within a list to add together?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to create a sublist, you can use <a href="http://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice</code></a>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l = [11, 22, 33, 44, 55, 66, 77]
&gt;&gt;&gt; sum(itertools.islice(l, 0, 4))
110
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the builtin <a href="http://docs.python.org/2/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> function to get the range of items, like this</p>
<pre><code>l, x = [11, 22, 33, 44, 55, 66, 77], 4
print(sum(l[slice(0, 4)]))
# 110
</code></pre>
<p>The parameters to <code>slice</code> are the same as the <a href="https://stackoverflow.com/a/509295/1903116">slicing syntax</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why do you need a new function anyways? Just do <code>sum(l[0:x])</code>. If you really want a function, you can define one yourself:</p>
<pre><code>def sum_range(lst, end, start=0):
    return(sum(lst[start : end + 1]))
</code></pre>
<p>which adds from index start to end including end. And start is default to index 0 if not specified.</p>
</div>
<span class="comment-copy">You want a function to select or a builtin function to select the range and add?</span>
<span class="comment-copy">Either or really...</span>
<span class="comment-copy">Is there any way in which this is better than: <code>sum(l[slice(0,4)])</code> ?</span>
<span class="comment-copy">@Gronk, <code>l[slice(0,4)]</code> returns a sublist, while <code>itertools.islice(l, 0, 4)</code> returns a iterator. In case the sublist is huge, <code>itertools.islice</code> is more memory-efficient. But for small sublist, the it will not make much difference.</span>
<span class="comment-copy">@Gronk, <code>l[slice(0,4)]</code> is a just another way of expressing <code>l[0:4]</code>. (<code>l[0:4] == l[slice(0,4)]</code>)</span>
<span class="comment-copy">The list grows up to over 12,000 elements so this is good to know.</span>
<span class="comment-copy">@Gronk: Use <code>islice</code> if the slice is huge (12000 items is only 50 to 100 KiB -- a drop in the bucket), or if you're creating thousands or millions of slices that coexist on the heap. Otherwise using a regular slice will usually perform better.</span>
