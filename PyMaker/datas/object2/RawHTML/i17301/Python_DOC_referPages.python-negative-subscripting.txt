<div class="post-text" itemprop="text">
<p>I'm currently reading Robert Sebesta's Concepts of Programming Languages, 10th edition (2012). In the chapter about data types, it reads "Ruby and Lua support negative subscripts, but Python does not". I thought negatives subscripts could be done in Python using <code>list_name[-i]</code>. What are negative subscripts then?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python, Lua, and Ruby support negative subscripts. In Python, this feature was added as <a href="https://docs.python.org/release/1.5/lib/node10.html#SECTION003150000000000000000" rel="nofollow noreferrer">a footnote in version 1.4</a> and <a href="http://docs.python.org/3/whatsnew/2.3.html" rel="nofollow noreferrer">reaffirmed as extended slicing in version 2.3</a></p>
<p>On p.264 of Sebesta's book (10th ed.) he claims Python does not support negative indexing on arrays. The original text was overhauled and republished as edition 6 in 2004, while Python 2.3 was released on July 29, 2003. I'm guessing extended slicing was overlooked and been in error since the release of Sebesta's 6th edition. </p>
<p>I cannot find errata for the 10th edition. You may want to email the author and inform him. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python and Ruby, a negative subscript indexes backward from the end of the array. That is, when the subscript is negative, the array length is added to it.</p>
<p>This is not the case in Lua. A negative subscript has no special meaning; it simply references or creates a table entry with that negative number as the key.</p>
<p>Python 2.7.3:</p>
<pre><code>&gt;&gt;&gt; a = [ 'x', 'y', 'z' ]
&gt;&gt;&gt; a
['x', 'y', 'z']
&gt;&gt;&gt; a[-1]
'z'
&gt;&gt;&gt; a[-1] = 'm'
&gt;&gt;&gt; a
['x', 'y', 'm']
&gt;&gt;&gt;
</code></pre>
<p>Ruby 1.9.3:</p>
<pre><code>irb(main):001:0&gt; a = [ 'x', 'y', 'z' ]
=&gt; ["x", "y", "z"]
irb(main):002:0&gt; a
=&gt; ["x", "y", "z"]
irb(main):003:0&gt; a[-1]
=&gt; "z"
irb(main):004:0&gt; a[-1] = 'm'
=&gt; "m"
irb(main):005:0&gt; a
=&gt; ["x", "y", "m"]
irb(main):006:0&gt;
</code></pre>
<p>Lua 5.2.3:</p>
<pre><code>&gt; a = { 'x', 'y', 'z' }
&gt; for key, value in pairs(a) do print( key, value ) end
1       x
2       y
3       z
&gt; print( a[3] )
z
&gt; print( a[-1] )
nil
&gt; a[-1] = 'm'
&gt; print( a[-1] )
m
&gt; for key, value in pairs(a) do print( key, value ) end
1       x
2       y
3       z
-1      m
&gt;
</code></pre>
<p>JavaScript's behavior is fairly similar to Lua's. You can use a negative subscript on an array, and in fact you can use any arbitrary <em>string</em> as a subscript. A JavaScript array is actually an object with some additional methods, properties (<code>.length</code>) and behavior (updating <code>.length</code> as needed). When you use <code>array[-1]</code> you're adding or referencing a property with the key <code>"-1"</code>, and <code>.length</code> is not updated.</p>
<p>Chrome 33:</p>
<pre><code>&gt; var a = [ 'x', 'y', 'z' ];
undefined
&gt; a
["x", "y", "z"]
&gt; a[2]
"z"
&gt; a[-1]
undefined
&gt; a[-1] = 'm'
"m"
&gt; a[-1]
"m"
&gt; a[2]
"z"
&gt; a
["x", "y", "z"]
&gt; for( var key in a ) console.log( key, a[key] );
0 x
1 y
2 z
-1 m
undefined
</code></pre>
<p>Don't be misled by the <code>undefined</code> printed at the end - that's not part of the  <code>for( var key in a )</code> enumeration, it's just printed there because <code>console.log()</code> is the last expression evaluated in the loop and it does not return a value (it just <em>prints</em> a value).</p>
</div>
<span class="comment-copy">Strange. I can see how terminology misuse might lead to the Lua claim, but Ruby <a href="http://codepad.org/DFouLDxR" rel="nofollow noreferrer">appears to behave</a> exactly like Python in this regard.</span>
<span class="comment-copy">You count from the back, i.e. <code>list[-1]</code> is the last element of a list, <code>list[-2]</code> is the next to last element and so on.</span>
<span class="comment-copy">The author may be wrong? <a href="http://en.wikibooks.org/wiki/Python_Programming/Strings" rel="nofollow noreferrer">en.wikibooks.org/wiki/Python_Programming/Strings</a></span>
<span class="comment-copy">@zhangxaochen That's what I thought, but it's still pretty weird to get something like that wrong.</span>
<span class="comment-copy">@FelipeCortez maybe you could contact the author for more info</span>
<span class="comment-copy">The ability to use negative indexes has been in Python since at least Version 1.4. Extended slicing simply extended slicing to tuples, lists and strings - negative indexing was already available. Sometimes textbooks are wrong.</span>
<span class="comment-copy">I thought that may be the case, but I couldn't find any evidence about the features pre 1.5. At any rate, the author seems unaware of the error so it would be worthwhile to contact him.</span>
<span class="comment-copy"><a href="http://docs.python.org/release/1.5/lib/node10.html#SECTION003150000000000000000" rel="nofollow noreferrer">docs.python.org/release/1.5/lib/â€¦</a> footnote 1 shows that even in 1.5 negative indexes were a standard feature of the language.</span>
<span class="comment-copy">I've already considered that, but it's not kosher either, because the Python and Ruby equivalent of a Lua table isn't an list/array but a dict/hash. Those do, of course, also support any indices.</span>
<span class="comment-copy">Lua's behavior is similar to JavaScript's, right? It's like the indices were dictionary keys.</span>
<span class="comment-copy">@delnan - Yes, that is a good point. A Lua table can be <i>used</i> as an array, and Lua has some optimizations to support this case, but in principle it is more like a dict or hash.</span>
<span class="comment-copy">@FelipeCortez - That sounds right to me. I added a JavaScript test to compare.</span>
