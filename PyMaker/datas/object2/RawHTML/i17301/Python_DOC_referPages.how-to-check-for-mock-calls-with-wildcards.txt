<div class="post-text" itemprop="text">
<p>I am writing unit tests, and want to check for a call which has a function object, like so: </p>
<p><code>call(u'mock', u'foobar', &lt;function &lt;lambda&gt; at 0x1ea99b0&gt;, 10)</code> </p>
<p>How do I check that the call() has all the parameters I want, without reproducing the lambda? </p>
<p>Edit: I wanted to clarify that I am using the <code>mock</code> library from here: <a href="http://mock.readthedocs.org/en/latest/" rel="noreferrer">http://mock.readthedocs.org/en/latest/</a>. The <code>call</code> I showed above is a call on a <code>MagicMock</code> object, which I want to check using <code>assert_has_calls</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I finally found out how to do what I want. Basically, when using <code>assert_has_calls</code>, I wanted one parameter to match regardless of what it was (because I can't recreate the <code>lambda</code> every time during test). </p>
<p>The way to do it is to use <a href="https://docs.python.org/3/library/unittest.mock.html#any" rel="noreferrer"><code>mock.ANY</code></a>.</p>
<p>So, in my example, this could match the call:</p>
<pre><code>mocked_object.assert_has_calls([
   call('mock', 'foobar', mock.ANY, 10)
])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want more granularity than mock.ANY, you can make your own validator class for use in call comparisons like assert_has_calls, assert_called_once_with, etc.</p>
<pre><code>class MockValidator(object):

    def __init__(self, validator):
        # validator is a function that takes a single argument and returns a bool.
        self.validator = validator

    def __eq__(self, other):
        return bool(self.validator(other))
</code></pre>
<p>Which can be used like:</p>
<pre><code>import mock
my_mock = mock.Mock()
my_mock('foo', 8)

# Raises AssertionError.
my_mock.assert_called_with('foo', MockValidator(lambda x: isinstance(x, str)))

# Does not raise AssertionError.
my_mock.assert_called_with('foo', MockValidator(lambda x: isinstance(x, int)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>not sure how you're building the <code>call</code>, but if it's some sort of <code>args</code>:</p>
<pre><code># IN THE CASE WE'RE DOING call(*args)

if all([len(args) == 4,isinstance(args[0],str),
       isinstance(args[1],str), hasattr(args[2],'__call__'),
       isinstance(args[3],int)]):
    # PASS
else:
    # FAIL
</code></pre>
<p>If you're overly concerned about getting input that is a callable that ISN'T a function, and feel it will fail the unit test silently:</p>
<pre><code>from types import FunctionType

isinstance(lambda x: x,FunctionType) # True
</code></pre>
</div>
<span class="comment-copy">My general way of testing this is to use <code>mockobject.assert_has_calls([(call('foo', 'bar', 'bla')])</code>. I am assuming I can't use something similar here?</span>
<span class="comment-copy">@RohanDhruva I'm afraid I don't follow</span>
<span class="comment-copy">This is what I'm using to test for calls: <a href="http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.assert_has_calls" rel="nofollow noreferrer">voidspace.org.uk/python/mock/â€¦</a></span>
