<div class="post-text" itemprop="text">
<p>Good day :)</p>
<p>So I recently learned about I/O in codeacademy. It just barely teach about open,close,read,write and so on.</p>
<p>I love to wander in those programming competition, where the website give you the challenge, you create the source code, then you download the input and finally upload the source code with the output. (I'm talking about Google Jam)</p>
<p>So here's the point.</p>
<p>I usually notice there are 3 kind of input</p>
<pre><code>#
X X X X
</code></pre>
<p>Then we have this kind</p>
<pre><code>#
XXXX
</code></pre>
<p>And finally. </p>
<pre><code>#
X
X
X
X
</code></pre>
<p>So the question is</p>
<p>Let say there are three input file</p>
<p>Input #1</p>
<pre><code>3
A B C D
</code></pre>
<p>Input #2</p>
<pre><code>3
ABCD
</code></pre>
<p>Input #3</p>
<pre><code>3
A
B
C
D
</code></pre>
<p>For each input, how to process it so my interpreter will print this</p>
<pre><code>3
[A,B,C,D] # As you can see, the interpreter prints the ABCD as a list.
</code></pre>
<p>To put in another word (Sorry if my word choice are bad, I just tried to make it as clear as possible): Let's say you get input #1, how do you process it with python so you can get the above result printed in the interpreter, and so on with input #2 and input #3</p>
<p>PS: I will be happy, if you give short explanation.
PPS: Since I just understand the I/O stuff from codeacademy, I wish you will use open(fileinput,"r") to take input instead of import fileinput.
PPPS: Thank you so much for answering this question.</p>
</div>
<div class="post-text" itemprop="text">
<p>For #1</p>
<pre><code>l=list(open('myfile.txt').read())
print(l)
</code></pre>
<p>For #2</p>
<pre><code>l=open('myfile.txt').read().split(' ')
print(l)
</code></pre>
<p>For #3</p>
<pre><code>l=open('myfile.txt').read().split('\n')
print(l)
</code></pre>
<hr/>
<p><strong>Explanation</strong>: <code>list(s)</code> splits all characters in one string into a list of characters.</p>
<p><code>s.split(' ')</code> seperates the input into list, breaking it into a new element whenever it encounters a space. Same for <code>s.split('\n')</code></p>
<hr/>
<p>In case you want the output <code>A B C D</code> use, <code>print(' '.join(l))</code> instead of <code>print(l)</code>. Check the docs for the documentation of <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow">str.join</a></p>
<hr/>
<p>At OP's request, modification. </p>
<pre><code>for i in l:
     if i.isdigit():
           print(i)
     else:
           print(i,end=' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can read from file one byte/char at the time by passing 1 to <code>file.read</code> function(). So you might write code like this:</p>
<pre><code>f = open("test.txt")
ch = f.read(1)              # Read the first character
number = None               # Some variable use to holding the number
l =[]                       # Some list to store letters ('A', 'B', ...)
token = ""      
while ch:                   # This will loop until ch get empty or EOF.
    if ch.isdigit() or ch.isalpha():    # If readed character is a number, or letter
        token += ch
    else:                               # We just hit a space, tab, ect..
        if token[-1].isdigit():
            number = int(token)         # OF course you can find things like '3BGFN5', that aren't  numbers. But your
                                        # files will don't have input like that, right?             
        else:
            l.append(token)
        token = ""
    # We don't care about others types of characters.
    # Just read the next.
    ch = f.read(1)

print(number)
print(l)
</code></pre>
<p>This code consumes files with formats like you posted and others combinations, for instance, a file containing</p>
<pre><code>3
ABC ZXY
D E F
G
H
I
</code></pre>
<p>will ouput</p>
<pre><code>3
['ABC', 'ZXY', 'D', 'E', 'F', 'G', 'H']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>OK , I will walk you through how you can load each of these input files into some meaningful representation (which is, as you requested, a variable with an integer and a variable with a list).</p>
<p>In all three cases, we will open the file and read line by line using a piece of code like this:</p>
<pre><code>with open('input.txt') as f:
    line = f.readline()
</code></pre>
<p>Be careful that the line variable contains the full line including the "\n" ending character.</p>
<p>Now, let's get to each of the cases. Let me assume that we want to parse the data storing it into a variable <code>N</code> (for the integer) and <code>data</code> for the list</p>
<p><strong>#2</strong></p>
<p>Let me start with the second, which is slightly easier:</p>
<pre><code>with open('input.txt') as f:
    line = f.readline()
    #the first line is an integer, which we store into a variable
    N = int(line)
    line = f.readline()
    #We remove the ending "\n" character of the line
    line = line.strip('\n')
    #The string is already a list of characters
    #So it's just a matter of feeding it into a proper list:
    data = list(line)
</code></pre>
<p><strong>#1</strong></p>
<pre><code>with open('input.txt') as f:
    line = f.readline()
    #the first line is an integer, which we store into a variable
    N = int(line)
    line = f.readline()
    #The second line is a space-separated list
    #We remove the \n character from the end
    #and we apply "split" to split the string into a list
    #by the spaces
    data = line.strip('\n').split(" ")
</code></pre>
<p><strong>#3</strong></p>
<p>For this case, let me assume that you positively responded my question and the integer is actually the number of items in the list. If not, I will change my answer accordingly.</p>
<pre><code>with open('input.txt') as f:
    line = f.readline()
    #the first line is an integer, which we store into a variable
    N = int(line)
    #We create a list to store the data
    data = []
    #We read items line by line
    for i in range(N):
        line = f.readline()
        line = line.strip('\n')
        #We store the data item
        data.append(line)
</code></pre>
</div>
<span class="comment-copy">could it be, by any chance, that "3" is actually "4"? In these kind of programming competitions, the first number usually refers to the number of test cases and since you have 4 -A, B, C and D- I was wondering if that's not actually what you meant</span>
<span class="comment-copy">So it will print as [2,a,b,c,d]? I got the point of the list and split, but I can't figure out what it will print</span>
<span class="comment-copy">It will print like you asked for <code>['A','B','C','D']</code>. In case you want something like <code>A B C D</code>, check my new edit. @Realdeo</span>
<span class="comment-copy">No. Actually you are in the right track. However, the input has digit and letters. So, if I input my file into your given code, it will print [2,A,B,C,D] instead of the requested : 2 <i>new line</i> [A,B,C,D]. But I do get your point. So thanks a lot beforehand. BTW: Just assume only the first character is digit :)</span>
<span class="comment-copy">@Realdeo check the modification. This does not need to assume first character is a number, whenever it finds number, it goes to a new line. :)</span>
<span class="comment-copy">Wait! What if the input is word instead of alphabet? This solution seems to work no matter the input type is, but it will split word into alphabet right? (Sorry for not mentioning this parameter earlier. I never thought this solution will arose).</span>
<span class="comment-copy">@Realdeo your original question seems to split words into alphabets, for example you said ABC should become [A,B,C]</span>
<span class="comment-copy">Answer edited to match your requirements.</span>
<span class="comment-copy">So your solution in a brief is take the first letter, add a space, then take next letter, and so on ? :)</span>
<span class="comment-copy">NO, the solution takes ALL the characters until some space is found, and put those characters into <code>token</code> variable. When a space is found <code>token</code> is stored in a list. A token might have only one letter or many. Have you tested my solution? :)</span>
<span class="comment-copy">This is actually helpful. Since the question is based on observation on Google Jam, your assumtion is correct. However, one final question. What does N = int(line). Does it tells us how many lines are they? Thanks!</span>
<span class="comment-copy">Nope, when you run <code>line = f.readline()</code>, the first line of the text gets stored into the variable <code>line</code>, containing the string "4\n", for example. <code>int(line)</code>then converts that string -throwing away the "\n" character- into an integer value <code>4</code>, which we store into the variable N. Hence, we are just assuming that the file format contains the information of how many lines you have to read. Is it clear now?</span>
<span class="comment-copy">When we f.readline(), do when we call the f.readline() again, will it read the next line? (Sorry. I have tough time understanding the documentation.) The reason I asked is that you use for i in range(N) in case 3. I mean if python still reads the first line, sure the integer will be read again.</span>
<span class="comment-copy">f.readline() will give you line after line every time you call. Try it yourself: create a file "input.txt" with the contents of input 3 and try the following program:     <code>with open('input.txt') as f:          print repr(f.readline())          print repr(f.readline())         print repr(f.readline())         print repr(f.readline())</code>  The <code>repr</code> is just for better visualisation of the return value</span>
