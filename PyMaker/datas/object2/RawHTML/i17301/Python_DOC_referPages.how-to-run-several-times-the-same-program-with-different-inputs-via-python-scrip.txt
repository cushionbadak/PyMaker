<div class="post-text" itemprop="text">
<p>I need to run a simple C program several time, each one with different input string (let's say AAAAA... increasing size, until I get "TRUE" as output).
e.g.</p>
<pre><code>./program A # output FALSE
./program AA # output FALSE
./program AAA # output FALSE
./program AAAA # output FALSE
./program AAAAA # output FALSE
./program AAAAAA # output FALSE
./program AAAAAAA  # output TRUE
</code></pre>
<p>in C I would simply use a <strong>while</strong> loop.
I know in python there is the <strong>while</strong> loop as well.</p>
<p>So the python program would be:</p>
<pre><code>strlen = 0
while TRUE
 strlen++
 &lt;run ./**C program** "A"*strlen &gt; 
 if (&lt;program_output&gt; = TRUE)
   break
</code></pre>
<p>Given that I can make the .py script executable by writing</p>
<pre><code>#! /usr/bin/env python
</code></pre>
<p>and</p>
<pre><code> chmod +x file.py
</code></pre>
<p>What should I do to make this work?</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try something like this (see <a href="http://docs.python.org/2/library/subprocess.html#subprocess.call" rel="nofollow">docs</a>):</p>
<pre><code>import subprocess

args = ""
while True:
     args += "A"
     result = subprocess.call(["./program", "{args}".format(args=args)])
     if result == 'TRUE':
         break
</code></pre>
<p>The <code>subprocess</code> module is preferred to the <code>os.popen</code> command, since it has been "deprecated since version 2.6." See the <a href="http://docs.python.org/2/library/os.html#os.popen" rel="nofollow">os documentation</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow">subprocess.check_output</a>:</p>
<pre><code>import subprocess
strlen = 0
while True:
    strlen += 1
    if subprocess.check_output(['./program', 'A'*strlen]) == 'TRUE':
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>file.py</strong></p>
<pre><code>import os

count=10
input="A"
for i in range(0, count):
    input_args=input_args+input_args
    os.popen("./program "+input_args)
</code></pre>
<p>running <strong>file.py</strong> would execute <strong>./program</strong> 10 times with increasing <code>A</code> input</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>commands</code>. Here is the documentation <code>http://docs.python.org/2/library/commands.html</code></p>
<ol>
<li><code>commands.getstatusoutput</code> returns a stdout output from your C program. So, if your program prints something, use that. (In fact, it returns a tuple (0, out) for stdout).</li>
<li><code>commands.getstatus</code> returns boolean status from program which you can use as well.</li>
</ol>
<p>So, assuming you are using stdout to capture the <code>./program</code> output, the entire modified program looks like</p>
<pre><code>import commands

while TRUE:
  strlen += 1
  output = commands.getstatusoutput("./program " + "A"*strlen)
  outstatus = output[1]
  if output == "true":
     break
</code></pre>
<p>I would experiment with <code>getstatus</code> to see if I can read values returned by <code>program</code>. </p>
<p><strong>Edit:</strong> Didn't notice that <code>commands</code> is deprecated since 2.6 Please use <code>subprocess</code> as shown in other response.</p>
</div>
<span class="comment-copy">...that's not a Python program</span>
<span class="comment-copy">I know, the syntax is not  the right one. it's just an example</span>
<span class="comment-copy">program is not a .py script, but a C program</span>
<span class="comment-copy">Please see my edited answer.</span>
<span class="comment-copy">the code works. why do you use "args"? However, the program (./program) after every execution requires a user interrupt (ctrl+C) to stop. And obviously if I do it, the program ./program exists, as well as the .py program. is there any one to make ./program exit, but the .py continue?</span>
<span class="comment-copy">I was using 'args' to refer to the command-line arguments you would be passing in, had you simply ran your c file from command line. You could call that variable whatever you want. And you might be able to do a result.kill() with the revised subprocess.Popen(...)</span>
<span class="comment-copy">I tried the code. It seems to work.. but after 1 loop only it gets stuck. I tried to place print(strlen) after strlen +=1 and indeed it prints 1 only and nothing more (nor the program exits)</span>
<span class="comment-copy">It works for me. Does the program exit? with return code 0?</span>
<span class="comment-copy">actually it doesn't. he program (./program) after every execution requires a user interrupt (ctrl+C) to stop. And obviously if I do it, the program ./program exists, as well as the .py program. is there any one to make ./program exit, but the .py continue?</span>
<span class="comment-copy">You can set a <code>timeout</code> argument to <code>check_output</code> (see the doc linked above). A cleaner way would be to use <code>subprocess.Popen</code> directly (<code>check_output</code> is a wrapper), read the four first characters from the process' stdout, and then kill it.</span>
<span class="comment-copy">program is not a .py script, but a C program</span>
<span class="comment-copy">@dragonmnl made changes to run <code>program</code> as executable</span>
<span class="comment-copy"><b>Don't</b> use <code>commands</code>. Use the <a href="http://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code> module</a> instead. The big fat warning at the top of the documentation for <code>commands</code> tells you: <i>Deprecated since version 2.6</i>.</span>
<span class="comment-copy">Oops.. Didn't notice the deprecated part. I used it sometime back, not recently</span>
