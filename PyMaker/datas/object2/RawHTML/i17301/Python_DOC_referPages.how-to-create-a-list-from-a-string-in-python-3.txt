<div class="post-text" itemprop="text">
<p>So I am trying to turn a string with multiple separators into a list, but dictated by where the separators are:</p>
<p>ex:  <code>("Hooray! Finally, we're done.", "!,")</code>    to be converted to:  <code>['Hooray', ' Finally', " we're done."]</code> based upon the separators given.</p>
<p>As you can see, the string is split into a list based on the separators.  My closest attempt:</p>
<pre><code> for ch in separators:
    original = ' '.join(original.split(ch))
return(original.split())
</code></pre>
<p>when I do this I get the result: </p>
<p><code>['Hooray', 'Finally', "we're", 'done.']</code></p>
<p>but I need to have <code>" we're done"</code> as one element of the list, not separated.  </p>
<p>I got a suggestion to use a string accumulator, but I don't see how it helps to solve the issue</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Just do this, using <a href="http://docs.python.org/3/library/re#re.split" rel="nofollow"><code>re.split</code></a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; original = "Hooray! Finally, we're done."
&gt;&gt;&gt; re.split('!|,', start)
['Hooray', ' Finally', " we're done."]
</code></pre>
<hr/>
<p><strong>EDIT</strong>:
Without regular expressions, you need a custom function such as:</p>
<pre><code>def multisplit(s, delims):
    pos = 0
    for i, c in enumerate(s):
        if c in delims:
            yield s[pos:i]
            pos = i + 1
    yield list(s[pos:])
</code></pre>
<p>And then use it as so:</p>
<pre><code>&gt;&gt;&gt; original = "Hooray! Finally, we're done."
&gt;&gt;&gt; multisplit(original, '!,')
['Hooray', ' Finally', " we're done."] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3.3/library/re.html#re.split" rel="nofollow"><code>re.split</code></a> with an appropriate expression:</p>
<pre><code>&gt;&gt;&gt; data=("Hooray! Finally, we're done.", "!,")
&gt;&gt;&gt; re.split("[%s]" % re.escape(data[1]), data[0])
['Hooray', ' Finally', " we're done."]
</code></pre>
<p>Splits the first element of the tuple by every character in the tuples second element.</p>
<p>The regex is made out of the tuple's second string where all regex special charcters are properly escaped. [some chars] means that every character inside the Square Brackets will be a seperator.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple solutoin <strong>without</strong> regular expressions could be:</p>
<pre><code>def split_on_separators(word, separators):
    word_list = [word]
    auxList = []
    for sep in separators:
        for w in word_list:
            auxList.extend(w.split(sep))
        word_list = auxList
        auxList = list()
    return word_list

example = "Hooray! Finally, we're done."
separators = '!,'

split_on_separators(example, separators)

Out[49]: ['Hooray', ' Finally', " we're done."]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change the string so all the separators are the same, then split on that one:</p>
<pre><code>def separate(words, separators):
    sep0 = separators[0]
    for sep in separators[1:]:
        words = words.replace(sep, sep0)

    return words.split(sep0)
</code></pre>
</div>
<span class="comment-copy">Thanks for the response, but I don't think I am allowed to use the re.split method. We haven't learned it in class yet so I think I am stuck only able to go about it the long way using a for loop and some sort of accumulator.</span>
<span class="comment-copy">@user3394677 See edits above. If I have been useful to you, kindly accept my answer.</span>
<span class="comment-copy">Thanks for the response, but I don't think I am allowed to use the re.split method. We haven't learned it in class yet so I think I am stuck only able to go about it the long way using a for loop and some sort of accumulator.</span>
<span class="comment-copy">@user3394677 see my answer</span>
