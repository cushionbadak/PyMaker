<div class="post-text" itemprop="text">
<p>I was trying something with lambdas, to better understand how they work when I ran into this behavior. I guess I will let the code speak for itself</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'2.7.3 (default, Sep 26 2013, 20:03:06) \n[GCC 4.6.3]'
&gt;&gt;&gt; a = 5; b = 7
&gt;&gt;&gt; func1 = lambda True: a if True else b
&gt;&gt;&gt; func1(True)
5
&gt;&gt;&gt; func1(False)    # &lt;== why?
7
&gt;&gt;&gt; func2 = lambda x: a if True else b
&gt;&gt;&gt; func2(True)
5
&gt;&gt;&gt; func2(False)
5
</code></pre>
<p>I ran 'dis' on the functions and this is what came out:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(func1)
  1           0 LOAD_FAST                0 (True)
              3 POP_JUMP_IF_FALSE       10
              6 LOAD_GLOBAL              0 (a)
              9 RETURN_VALUE        
        &gt;&gt;   10 LOAD_GLOBAL              1 (b)
             13 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(func2)
  1           0 LOAD_GLOBAL              0 (True)
              3 POP_JUMP_IF_FALSE       10
              6 LOAD_GLOBAL              1 (a)
              9 RETURN_VALUE        
        &gt;&gt;   10 LOAD_GLOBAL              2 (b)
             13 RETURN_VALUE        
</code></pre>
<p>The only difference is between the <a href="http://docs.python.org/2/library/dis.html#opcode-LOAD_FAST" rel="nofollow">LOAD_FAST</a> and the <a href="http://docs.python.org/2/library/dis.html#opcode-LOAD_GLOBAL" rel="nofollow">LOAD_GLOBAL</a></p>
<p>Why is it that the 'False' in func1 gets evaluated at all?</p>
<p>On a side note, 3.3 doesn't allow this:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'3.3.3 (v3.3.3:c3896275c0f6, Nov 18 2013, 21:19:30) [MSC v.1600 64 bit (AMD64)]'
&gt;&gt;&gt; a = 5; b = 7
&gt;&gt;&gt; func = lambda True: a if True else b
  File "&lt;stdin&gt;", line 1
    func = lambda True: a if True else b
                     ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>True</code> and <code>False</code> are <a href="http://docs.python.org/3/reference/lexical_analysis.html#keywords" rel="nofollow">keywords</a> in Python 3, you can't use them as a variables anymore . And in Python 2 they are just simple variables and you can override their value by a simple assignment.</p>
<p>Python 2:</p>
<pre><code>&gt;&gt;&gt; True = False
&gt;&gt;&gt; True
False
&gt;&gt;&gt; def f(True):
...     print True
...     
&gt;&gt;&gt; f(1)     #assigns 1 to local variable True
1
&gt;&gt;&gt; f(False) #assigns False to local variable True
False
</code></pre>
<p>Python 3:</p>
<pre><code>&gt;&gt;&gt; True = False
  File "&lt;ipython-input-2-7cebd69d5d15&gt;", line 1
SyntaxError: assignment to keyword
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>func1 = lambda True: a if True else b
</code></pre>
<p>Here, you named your lambda's argument <code>True</code>. That means the <code>True</code> in the body refers to the argument, whatever that happens to be. It's roughly equivalent to</p>
<pre><code>def func1(x):
    return a if x else b
</code></pre>
<p>On the other hand,</p>
<pre><code>func2 = lambda x: a if True else b
</code></pre>
<p>here, the argument has a more reasonable name, so <code>True</code> refers to the built-in variable. It's roughly equivalent to</p>
<pre><code>def func2(x):
    return a if True else b
</code></pre>
<p>In Python 3, you can no longer name variables <code>True</code>.</p>
</div>
<span class="comment-copy">What were you expecting to happen?</span>
<span class="comment-copy">I liked both answers, but <a href="http://stackoverflow.com/users/846892/ashwini-chaudhary">@ashwch</a> called them by their names. How wrong I was to think 'True' and 'False' were immutable objects! I wonder when Python 3 will reign over 2...</span>
