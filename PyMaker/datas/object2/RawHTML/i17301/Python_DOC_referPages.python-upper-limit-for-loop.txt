<div class="post-text" itemprop="text">
<p>Let me start by saying I'm fairly new to python.</p>
<p>Ok so I'm running code to perform physics calculations/draw graphs etc on data files, and what I need to do is loop over a number of files and sub-files. But the problem is there are a different number of sub-files in each file (e.g. file 0 has 711 sub-files, file 1 has 660 odd). It obviously doesn't like it when I run it across a file that doesn't have a sub-file at index x, so I was wondering is there a way to get it to run (iterate?) up to the final limit in each file automatically?</p>
<p>What I've got is a nested loop like:</p>
<pre><code>for i in range(0,120):
    for j in range(0,715):

         stuff
</code></pre>
<p>Cheers in advance for any help, and sorry if my explanation is bad!</p>
<p>Edit:
some more of the code. So what I'm actually doing is calculating/plotting the angular momentum of gas and dark matter particles. These are in halos (j), &amp; there are a number of files (i) containing lots and lots of these halos.</p>
<pre><code>import getfiby
import numpy as np 
import pylab as pl


angmom=getfiby.ReadFIBY("B")

for i in range(0,120):
    for j in range(0,715):

        pos_DM = angmom.getParticleField(49,i,j,"DM","Coordinates")
        vel_DM = angmom.getParticleField(49,i,j,"DM","Velocity")
        mass_DM = angmom.getParticleField(49,i,j,"DM","Mass")
        more stuff
</code></pre>
<p>getfiby is a code I was given that retrieves all the data from the files (that I can't see). It's not really a massive problem, as I can still get it to run the calculations &amp; make plots even if the upper limit I put on my range for j exceeds the number of halos there are in a particular file (I get: Halo index out of bounds.  Goodbye.) But yeah I just wondered if there was a nicer, tidier way of getting it to run.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may want something like this:</p>
<pre><code>a=range(3)
for i in range(5):
    try:
        b=a[i] #if you iterate over your "subfiles" by index
    except IndexError:
        break #break out when list index out of range
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you build the list of files and subfiles to process, you could have the list in a variable named filelist and the subfile list in a variable called subfilelist You could then run the loops as</p>
<pre><code>for myfile in filelist:
  # Process code
  for subfile in subfilelist:
    # Process code.
</code></pre>
<p>If you need to use a range then</p>
<pre><code>filerange = len(filelist)
subfilerange = len(subfilelist)

for i in range(0, filerange):
  for j in range(0, subfilerange):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I may be misunderstanding your structure/intent here, but it sounds like you want to perform some calculations on each file in some folder structure, where the folders contain various numbers of the data files. In that case, I'd make use of the <a href="http://docs.python.org/3/library/os.html#os.listdir" rel="nofollow"><code>os.listdir</code></a> function rather than trying to manually index each data file.</p>
<pre><code>import os
for file in os.listdir(ROOT_DIRECTORY):
    for subfile in os.listdir(os.path.join(ROOT_DIRECTORY, file)):
        process(os.path.join(ROOT_DIRECTORY, file, subfile)) # or whatever
</code></pre>
<p>This can of course be made a little easier to look at in a few ways (personally I have my own <code>listdir</code> wrapper that returns full paths instead of just the basenames), but that would be my basic idea.</p>
<p>If you <em>also</em> need the index of each file, you can probably get it using some combination of <a href="http://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a> and maybe <code>sorted</code> (e.g. <code>for i, file in enumerate(sorted(os.listdir(...)))</code>), but the specifics obviously depend on your filenames and directory structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming <code>fileSet</code> is an iterable full of <code>file</code> objects, and each <code>file</code> object is itself an iterable full of <code>subfile</code> objects, than:</p>
<pre><code>    for i,file in enumerate(fileSet): 
        for j,subfile in enumerate(file):
            stuff
</code></pre>
<p>But think hard about whether you really need the indices <code>i</code> and <code>j</code>, as you already have the words <code>file</code> and <code>subfile</code> to refer to the objects you are dealing with. If you don't need the indices, it's simply:</p>
<pre><code>    for file in fileSet: 
        for subfile in file:
            stuff
</code></pre>
<p>Now, if by "file" you actually meant files in the Operating System's Filesystem, then I need you to explain me what a subfile is in that context, as Filesystem files usually cannot be nested, only directories can.</p>
</div>
<span class="comment-copy">It would help if we could see a bit more of the code for context.</span>
<span class="comment-copy">What`s a sub file? Are you asking how to iterate of the files in a directory and its subdirectories?</span>
<span class="comment-copy">Are the files folders or ZIPs or some other format of files?</span>
<span class="comment-copy">As a side note, changing those <code>range</code> to <code>xrange</code> will perform better under python2. If it's python3, leave it as is.</span>
