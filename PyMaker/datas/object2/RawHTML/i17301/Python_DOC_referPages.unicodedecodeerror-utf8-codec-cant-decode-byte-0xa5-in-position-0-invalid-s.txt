<div class="post-text" itemprop="text">
<p>I am using <code>Python-2.6 CGI</code> scripts but found this error in server log while doing <code>json.dumps()</code>,</p>
<pre><code>Traceback (most recent call last):
  File "/etc/mongodb/server/cgi-bin/getstats.py", line 135, in &lt;module&gt;
    print json.dumps(​​__get​data())
  File "/usr/lib/python2.7/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python2.7/json/encoder.py", line 201, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/lib/python2.7/json/encoder.py", line 264, in iterencode
    return _iterencode(o, 0)
UnicodeDecodeError: 'utf8' codec can't decode byte 0xa5 in position 0: invalid start byte
</code></pre>
<p>​Here ,</p>
<p><code>​__get​data()</code> function returns <code>dictionary {}</code> .</p>
<p>Before posting this question I have referred <strong><a href="https://stackoverflow.com/questions/6180521/unicodedecodeerror-utf8-codec-cant-decode-bytes-in-position-3-6-invalid-dat">this</a></strong> of question os SO.</p>
<hr/>
<h2>UPDATES</h2>
<p>Following line is hurting JSON encoder,</p>
<pre><code>now = datetime.datetime.now()
now = datetime.datetime.strftime(now, '%Y-%m-%dT%H:%M:%S.%fZ')
print json.dumps({'current_time': now}) // this is the culprit
</code></pre>
<p>I got a temporary fix for it</p>
<pre><code>print json.dumps( {'old_time': now.encode('ISO-8859-1').strip() })
</code></pre>
<p>But I am not sure is it correct way to do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error is because there is some non-ascii character in the dictionary and it can't be encoded/decoded. One simple way to avoid this error is to encode such strings with <code>encode()</code> function as follows (if <code>a</code> is the string with non-ascii character):</p>
<pre><code>a.encode('utf-8').strip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the below code snippet:</p>
<blockquote>
<pre><code>with open(path, 'rb') as f:
  text = f.read()
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I switched this simply by defining a different codec package in the <code>read_csv()</code> command</p>
<pre><code>encoding = 'unicode_escape'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your string has a non ascii character encoded in it.</p>
<p>Not being able to decode with utf-8 may happen if you've needed to use other encodings in your code. For example:</p>
<pre><code>&gt;&gt;&gt; 'my weird character \x96'.decode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode byte 0x96 in position 19: invalid start byte
</code></pre>
<p>In this case, the encoding is windows-1252 so you have to do:</p>
<pre><code>&gt;&gt;&gt; 'my weird character \x96'.decode('windows-1252')
u'my weird character \u2013'
</code></pre>
<p>Now that you have unicode, you can safely encode into utf-8.</p>
</div>
<div class="post-text" itemprop="text">
<p>Set default encoder at the top of your code</p>
<pre><code>import sys
reload(sys)
sys.setdefaultencoding("ISO-8859-1")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Inspired by aaronpenne and Soumyaansh</p>
<pre><code>f    = open("file.txt","rb")
text = f.read().decode(errors='replace')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>As of 2018-05 this is handled directly with <a href="https://docs.python.org/3/library/codecs.html#codecs.decode" rel="nofollow noreferrer"><code>decode</code>, at least for Python 3</a>.</strong> </p>
<p>I'm using the below snippet after getting <code>invalid start byte</code> and <code>invalid continuation byte</code> type errors. Adding <code>errors='ignore'</code> fixed it for me.</p>
<pre><code>with open(out_file, 'rb') as f:
    for line in f:
        print(line.decode(errors='ignore'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Following line is hurting JSON encoder,</p>
<pre><code>now = datetime.datetime.now()
now = datetime.datetime.strftime(now, '%Y-%m-%dT%H:%M:%S.%fZ')
print json.dumps({'current_time': now}) // this is the culprit
</code></pre>
<p>I got a temporary fix for it</p>
<pre><code>print json.dumps( {'old_time': now.encode('ISO-8859-1').strip() })
</code></pre>
<p>Marking this as correct as a temporary fix (Not sure so).</p>
</div>
<div class="post-text" itemprop="text">
<p>After trying all the aforementioned workarounds, if it still throws the same error, you can try exporting the file as CSV (a second time if you already have).
Especially if you're using scikit learn, it is best to import the dataset as a CSV file.</p>
<p>I spent hours together, whereas the solution was this simple. Export the file as a CSV to the directory where Anaconda or your classifier tools are installed and try.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the above methods are not working for you, you may want to look into changing the encoding of the csv file itself.</p>
<p>Using Excel:</p>
<pre><code>1. Open csv file using Excel
2. Navigate to "File menu" option and click "Save As"
3. Click "Browse" to select a location to save the file
4. Enter intended filename
5. Select CSV (Comma delimited) (*.csv) option
6. Click "Tools" drop-down box and click "Web Options"
7. Under "Encoding" tab, select the option Unicode (UTF-8) from "Save this document as" drop-down list
8. Save the file
</code></pre>
<p>Using Notepad:</p>
<pre><code>1. Open csv file using notepad
2. Navigate to "File" &gt; "Save As" option
3. Next, select the location to the file
4. Select the Save as type option as All Files(*.*)
5. Specify the file name with .csv extension
6. From "Encoding" drop-down list, select UTF-8 option.
7. Click Save to save the file
</code></pre>
<p>By doing this, you should be able to import csv files without encountering the UnicodeCodeError.</p>
</div>
<div class="post-text" itemprop="text">
<p>On read csv I added an encoding method</p>
<pre><code>import pandas as pd
dataset = pd.read_csv('sample_data.csv',header=0,encoding = 'unicode_escape')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generally speaking, </p>
<p>Python throws such an error when an illegal type of object is tried to be read as a file.</p>
<p>e.g. </p>
<p><code>file = open("xyz.pkl", "r") 
 text= file.read()</code></p>
<p>the second line will throw the above error: </p>
<p><strong>UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte</strong></p>
<p>Possible reading <strong>.npy</strong> in a similar manner will also throw this kind of error </p>
</div>
<div class="post-text" itemprop="text">
<p>Just in my case, if I save the xslx excel file as a CSV(Comma delimited), the error will present. However, when I save is as CSV(MS-DOS), the error won't come. </p>
</div>
<div class="post-text" itemprop="text">
<p>HitHere, you should load the "GoogleNews-vectors-negative300.bin.gz" file at first then extract it by this command in Ubuntu: gunzip -k GoogleNews-vectors-negative300.bin.gz. [ manually extracting is never recommended].</p>
<p>secondly, you should apply these commands in python 3:</p>
<pre><code>import gensim
model = gensim.models.Word2Vec.load_word2vec_format('./model/GoogleNews-vectors-negative300.bin', binary=True)
</code></pre>
<p>I hope it will be useful.</p>
</div>
<span class="comment-copy">It looks like you have some string data in the dictionary that can't be encoded/decoded.  What's in the <code>dict</code>?</span>
<span class="comment-copy">@mgilson yup master I understood the issue but donno how to deal with it..<code>dict</code> has <code>list, dict, python timestamp value </code></span>
<span class="comment-copy">@Pilot -- Not really.  The real problem is buried somewhere in <code>__getdata</code>.  I don't know <i>why</i> you're getting a non-decodable character.  You can try to come up with patches on the dict to make it work, but those are mostly just asking for more problems later.  I would try printing the dict to see where the non-ascii character is.  Then figure out how that field got calculated/set and work backward from there.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/q/12468179/1677912">UnicodeDecodeError: 'utf8' codec can't decode byte 0x9c</a>.</span>
<span class="comment-copy">I had that same error when trying to read a .csv file which had some non-ascii characters in it. Removing those characters (as suggested below) solved the issue.</span>
<span class="comment-copy">Since UTF-8 is back-compatible with the oldschool 7-bit ASCII you should just encode everything. For characters in the 7-bit ASCII range this encoding will be an identity mapping.</span>
<span class="comment-copy">I had <code>r</code> instead of <code>rb</code>. thanks for the reminder to add <code>b</code>!</span>
<span class="comment-copy">This is the right answer</span>
<span class="comment-copy">I got "AttributeError: 'str' object has no attribute 'decode'". Not sure what went wrong?</span>
<span class="comment-copy">Did you include b to the "rb"? The b is for opening the file as byte-formated. If you just use r it is string, and don't include decode.</span>
<span class="comment-copy">Not necessarily in file read operation @Priyank. It could be any case where you try to encode/decode invalid character.</span>
