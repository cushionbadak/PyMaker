<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; sum([0.3, 0.1, 0.2])
0.6000000000000001

&gt;&gt;&gt; sum([0.3, 0.1, 0.2]) == 0.6
False
</code></pre>
<p>What can I do to make the result be exactly 0.6? 
I don't want to round the result to a certain number of decimal digits because then I could lose precision for other list instances.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>float</code> is inherently imprecise in pretty much every language because it cannot be represented precisely in binary.</p>
<p>If you need exact precision use the <code>Decimal</code> <code>class</code>:</p>
<pre><code>from decimal import Decimal

num1 = Decimal("0.3")
num2 = Decimal("0.2")
num3 = Decimal("0.1")

print(sum([num1, num2, num3]))
</code></pre>
<p>Which will <code>return</code> the very pleasing result of:</p>
<pre><code>Decimal('0.6')  # One can do float() on this output to get plain (0.6).
</code></pre>
<p>Which conveniently is also a <code>Decimal</code> object with which you can work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>math.fsome()</code> instead of <code>sum()</code>.</p>
</div>
<span class="comment-copy">Why do you need exactly 0.6? Would you have the same problem if <code>1.0/3+2.0/3</code> did not exactly equal <code>1</code>?</span>
<span class="comment-copy">I want exactly 0.6 because that is the result I'd expect. Yes, it, would be the same problem.</span>
<span class="comment-copy">There are plenty of posts on this on SO already, e.g.: <a href="http://stackoverflow.com/questions/5595425/what-is-the-best-way-to-compare-floats-for-almost-equality-in-python" title="what is the best way to compare floats for almost equality in python">stackoverflow.com/questions/5595425/â€¦</a></span>
<span class="comment-copy">@user2460978 I'm afraid the answer is to adjust your expectations. There isn't a good general-purpose way to have math with rationals work as you'd expect while still permitting things like square roots and sines.</span>
<span class="comment-copy">Welcome to floating point. 0.6 cannot be exactly represented in binary floating point.</span>
<span class="comment-copy"><code>Decimal</code> is also a floating point number, just using a different base. It can represent the literals one writes in decimal notation exactly, but in turn is less accurate than binary ("ordinary") floats in other cases.</span>
<span class="comment-copy">Interesting. When you say 'using a different base', I assume it's base 10?</span>
<span class="comment-copy">@user2460978 Exactly. Instead of {some integer} * 2^x (that's what a <code>float</code> looks like), a <code>decimal</code> is stored as {some integer} * 10^x.</span>
<span class="comment-copy">I guess you mean <a href="https://docs.python.org/3/library/math.html#math.fsum" rel="nofollow noreferrer"><code>math.fsum</code></a> rather than <code>math.fsome</code>? (There's no such thing as <code>math.fsome</code> in Python.) But even then, it's not really a solution to the problem: try <code>math.fsum([0.1, 0.2, 0.4])</code>, for example. On a typical machine, the result won't be equal to <code>0.7</code>.</span>
