<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9764930/capturing-repeating-subpatterns-in-python-regex">Capturing repeating subpatterns in Python regex</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I want to capture repeated groups in Python as a separate list:</p>
<pre><code>match = re.match(r'!((?:abc|123)+)!', '!abc123abc!').groups()
print(match)
print(len(match))
</code></pre>
<p>This gives back a tuple with a single element:</p>
<pre><code>('abc123abc',)
1
</code></pre>
<p>How can I get the following output?</p>
<pre><code>('abc', '123', 'abc',)
3
</code></pre>
<p>Following <a href="https://www.regular-expressions.info/captureall.html" rel="nofollow noreferrer">this helpful article on capturing repeated groups</a> I now understand the earlier problem I had, trying to repeat a capturing group instead of capturing a repeated group. But still I don't understand how or if it is possible to capture <strong>different groups</strong> for better post-processing.</p>
<p>Please note that I cannot do without the pre-/suffix, because this also contains multiple capturing groups. My actual use case differs a little bit from this MWE, but should be clear enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>This resembles the correct answer by @WiktorStribi≈ºew while staying more easily comparable to my original question</p>
<pre><code>import regex as re
match = re.match(r'!(abc|123)+!', '!abc123abc!').captures(1)
print(match)
print(len(match))
</code></pre>
<p>Which correctly outputs</p>
<pre><code>['abc', '123', 'abc']
3
</code></pre>
<p>This works, because the <code>regex</code> module (not to be confused with Python's internal <code>re</code> module) handles groups differently when using the <code>capture()</code> method, i.e. not overwriting them (as outlined in the article in my original question), but rather append them, not overwriting the index. This can be followed in the section <em>Notes on named capture groups</em> in the <a href="https://pypi.org/project/regex/" rel="nofollow noreferrer"><code>regex</code> package's official documentation</a>.</p>
</div>
<span class="comment-copy">Try <code>&gt;&gt;&gt; re.findall(r'abc|123', x)</code> <code>['abc', '123', 'abc']</code>.</span>
<span class="comment-copy">This would work, but in the case I want to use it, I cannot do without the pre-/suffix, which also contains several capturing groups.</span>
<span class="comment-copy"><code>re.findall</code> returns a <code>list</code>. You cannot use <code>groups()</code> on <code>re.findall</code>. Are you talking about <code>re.search</code> ? Note, <code>re.match</code> will match from <code>start</code></span>
<span class="comment-copy">Use PyPi regex model and grab <code>.captures(1)</code> with <code>r'!(abc|123)+!'</code></span>
<span class="comment-copy">No way, <code>regex.match(r'!(abc|123)+!', '!abc123abc!').captures(1)</code> <a href="https://rextester.com/RFXH47168" rel="nofollow noreferrer">yields expected output</a>, <code>['abc', '123', 'abc']</code></span>
