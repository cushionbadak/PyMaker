<div class="post-text" itemprop="text">
<p>I'm trying to read a file and to save the text inside as a list containing strings,
(each object in the list is a string which is one line in the text)
i only managed to print out the text line by line , and not as a list.</p>
<p>the text is a long list of biological stuff (random letter if you ask me (:)
and-</p>
<pre><code>    def read_proteome ( filename ):
       f= open(filename).readlines()
       for line in f:
          print(line)
</code></pre>
<p>only printed the file (did seperated the lines..)</p>
<p>where did i go wrong ?
how do i set it into a list ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The result of <a href="http://docs.python.org/3/library/io.html?highlight=readlines#io.IOBase.readlines" rel="nofollow"><code>.readlines()</code> <em>is</em> a list</a>. Just print <code>f</code>:</p>
<pre><code>print(f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Martijn Pieters already gives a simple and complete answer, but it's worth learning how to figure these things out yourself. It's usually faster, and it doesn't cost you a half-dozen downvotes.</p>
<p>First, the fact that you can use <code>for line in f:</code> means that <code>f</code> is obviously some kind of list-ish object, in that it can be used in a <code>for</code> loop the same way a <code>list</code> can. Technically, this means it's an "iterable".</p>
<p>Maybe this means it's already a <code>list</code>? If so, you're already done. If not, the <code>list</code> function takes any iterable and makes it into a <code>list</code>, so, you can just add <code>f = list(f)</code> and you're done.</p>
<p>How do you find out which?</p>
<p>Well, you can add <code>print(type(f))</code> to your code and see what it prints out. If it says <code>list</code>, you're done; if it says anything else, you need to add the conversion line <code>f = list(f)</code>.</p>
<p>It's often easier to do this all interactively, rather than in a script:</p>
<pre><code>&gt;&gt;&gt; f = open(filename).readlines()
&gt;&gt;&gt; type(f)
list
&gt;&gt;&gt; f
['first line\n', 'second line\n', 'last line\n']
</code></pre>
<p>If you break this down into pieces, you can see the types of each piece separately:</p>
<pre><code>&gt;&gt;&gt; filename = 'C:/foo.txt'
&gt;&gt;&gt; type(filename)
str
&gt;&gt;&gt; fileobj = open(filename)
&gt;&gt;&gt; type(fileobj)
_io.TextIOWrapper
&gt;&gt;&gt; lines = fileobj.readlines()
&gt;&gt;&gt; type(lines)
list
</code></pre>
<p>When you put this all together in one line, <code>lines=open('C:/foo.txt').readlines()</code>, the end result is the same as if you did it in three steps—<code>lines</code> is a <code>list</code>.</p>
<p>But what if you can't figure something out by experimenting, because you don't know what to try?</p>
<p>Well, the interactive interpreter has built-in help:</p>
<pre><code>&gt;&gt;&gt; fileobj = open(filename)
&gt;&gt;&gt; help(fileobject.readlines)
Help on built-in function readlines:

readlines(...)
    Return a list of lines from the stream.

    hint can be specified to control the number of lines read: no more
    lines will be read if the total size (in bytes/characters) of all
    lines so far exceeds hint.
</code></pre>
<p>It says right there that it returns a <code>list</code>.</p>
<p>Or, you can look at <a href="http://docs.python.org/3/index.html" rel="nofollow">the documentation</a>. Trying to guess where <code>readlines</code> might be in 3.x is actually a bit complicated, because the type of thing <code>open</code> returns is not obvious… but you can just use the "quick search" on the left, and you'll find <a href="http://docs.python.org/3/library/io.html?highlight=readlines#io.IOBase.readlines" rel="nofollow"><code>io.ioBase.readlines</code></a>, which gives you the same answer:</p>
<blockquote>
<p><code>readlines(hint=-1)</code></p>
<p>Read and return a list of lines from the stream. hint can be specified to control the number of lines read: no more lines will be read if the total size (in bytes/characters) of all lines so far exceeds hint.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As Martijn said, .readlines() converts a file into a list and cycles through them. However, this is what I think you are trying to do.</p>
<pre><code>with open("file.txt", 'r') as file:
    print file.read().split("\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As Martijn said, the readlines() method returns a list as said in the python <a href="http://docs.python.org/3.2/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow" title="documentation">documentation</a> .</p>
<p>If what you need is to convert a string to a list use this: <a href="http://docs.python.org/3.2/library/ast.html#ast-helpers" rel="nofollow">ast helper</a></p>
<pre>
import ast
stringList = "{'a':'text'}"
realList = ast.literal_eval(stringList)
print realList
</pre>
<p>Hope this is what you need!</p>
</div>
<span class="comment-copy">Why did you accept Guillermo Bergengruen's answer instead of Martijn Pieters's?</span>
<span class="comment-copy">oh, i just thought i marked all the answers.. once againg sorry for the mass, very new around here</span>
<span class="comment-copy">+1. To add, the variable should not be named <code>f</code>. Say, <code>lst</code> or <code>lines</code> would be better. A good name helps when thinking about the solution. A bad name leads to confusion because you later tend to think that it was chosen well and that it means what it says.</span>
<span class="comment-copy">Expanding on what @pepr says: the name <code>f</code> makes people think it's a file object, because that's a common (if not very good) variable name for files. In fact, it seems like the OP confused himself, by accidentally checking the <code>type</code> of <code>f=open('c:/hey.txt')</code>, instead of <code>f=open('c:/hey.txt').readlines()</code>—a mistake that would have been much more obvious with, say, <code>lines=open('c:/hey.txt')</code>.</span>
<span class="comment-copy">tahnks ! i still don't get it, i tried your suggestions , and python simply crush down , could be because the file is very long ?</span>
<span class="comment-copy">@dulce.de.leche: I don't know what "crush down" means. What exactly did you do, and what exactly happened? Ideally, copy and paste from a session, just like I did above, instead of trying to explain it.</span>
<span class="comment-copy">sorry for all the mass, i made a new txt file to try again , at first it did recognize f a a list , but now :  f=open('c:/hey.txt') f.readlines() does return - ['hey how-are-you /n i-am-ok thankyou']  but type(f)  is &lt;class '_io.TextIOWrapper'&gt; instaed of list...</span>
<span class="comment-copy">@dulce.de.leche: OK, <code>open('c:/hey.txt')</code> is a file object (which, in modern Python, is called <code>&lt;class _io.TextIOWrapper&gt;</code>. But <code>open('c:/hey.txt').readlines()</code> is the result of calling <code>readlines</code> on a file object, which is a <code>list</code> of strings. I'll edit the answer to make this more clear.</span>
<span class="comment-copy">thanks again :) hope to make a progress (not only with my program but also with learning how to comment properly)</span>
<span class="comment-copy">Note that the OP is using Python 3, but your code and documentation links are assuming Python 2.</span>
<span class="comment-copy">Thank you for showing me that. I'll edit the post right now.</span>
<span class="comment-copy">Moreover, your example is for a dictionary, not a list, so you are only making matters more complicated here.</span>
<span class="comment-copy">It's the same for lists.</span>
<span class="comment-copy">@GuillermoBergengruen: Well, yes, except that in your example, <code>realList</code> will not be a <code>list</code>, which means your own description is misleading, and which also means that it doesn't answer the OP's question. Also, even after the edit, this is still not legal Python 3.</span>
