<div class="post-text" itemprop="text">
<p>I'm working on creating a word cloud program in Python and I'm getting stuck on a word replace function. I am trying to replace a set of numbers in an html file (so I'm working with a string) with words from an ordered list. So 000 would be replaced with the first word in the list, 001 with the second, etc.</p>
<p>This method below works when moving through a relatively simple string:</p>
<pre><code>def textReplace():  
  text = '000 this is 001 some 002 text 003 '
  word = ['foo', 'bar', 'that', 'these']
  for a in word:    
    for y, w in enumerate(text):      
      x = "00"+str(y)
      text = text.replace(x, a)
  print text 
</code></pre>
<p>I am working my way through a html file (I put a portion of the file in a string below) and instead of replacing each instance of 000,001,002, etc. with successive items in the list it replaces all of the numbers with the first item. Why does this method work on the above string but not with the one below. Any help is appreciated.  Thanks!</p>
<pre><code>def htmlReplace():
  text = '&lt;p&gt;&lt;span class="newStyle0" style="left: 291px; top: 258px"&gt;000&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span class="newStyle1" style="left: 85px; top: 200px"&gt;001&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span class="newStyle2" style="left: 580px; top: 400px; width: 167px; height: 97px"&gt;002&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span class="newStyle3" style="left: 375px; top: 165px"&gt;003&lt;/span&gt;&lt;/p&gt;'
  word = ['foo', 'bar', 'that', 'these']
  for a in word:    
    for y, w in enumerate(text):      
      x = "00"+str(y)
      text = text.replace(x, a)
  print text            
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like that is much better written as (for your non-HTML):</p>
<pre><code>&gt;&gt;&gt; text = '000 this is 001 some 002 text 003'
&gt;&gt;&gt; word = ['foo', 'bar', 'that', 'these']
&gt;&gt;&gt; word_list = iter(word)
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'\d+', lambda L: next(word_list), text)
'foo this is bar some that text these'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, your approach is completely wrong for these sort of problems as they are good candidates for <a href="http://en.wikipedia.org/wiki/Template_engine_%28web%29" rel="nofollow">Template Engines</a>.</p>
<p>You can experiment with number of available template engine or I can suggest <a href="http://jinja.pocoo.org/" rel="nofollow">Jinja2</a> which will serve your purpose
Here is an example with <a href="http://jinja.pocoo.org/" rel="nofollow">Jinja2</a></p>
<pre><code>&gt;&gt;&gt; text = """
{% for style in styles %}
&lt;p&gt;&lt;span class="newStyle{{ style.styleno }}"
{% for orin in style.orin %}
style="{{ orin.orin }}: {{ orin.attrib }}px
{% endfor %}
"&gt;{{ style.val }}&lt;/span&gt;&lt;/p&gt;
{% endfor %}
"""
&gt;&gt;&gt; styles = [{'no':1,
           "orin":[{"orin":"left", "attrib":291},
               {"orin":"top", "attrib":258}],
           "val":"000"},
           {'no':2,
        "orin":[{"orin":"left", "attrib":100},
            {"orin":"top", "attrib":222},
            {"orin":"height", "attrib":222},
            {"orin":"width", "attrib":222}],
        "val":"001"}]
&gt;&gt;&gt; template = Template(text)
&gt;&gt;&gt; template.render(styles = styles)
u'\n\n&lt;p&gt;&lt;span class="newStyle"\n\nstyle="left: 291px\n\nstyle="top: 258px\n\n"&gt;000&lt;/span&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;span class="newStyle"\n\nstyle="left: 100px\n\nstyle="top: 222px\n\nstyle="height: 222px\n\nstyle="width: 222px\n\n"&gt;001&lt;/span&gt;&lt;/p&gt;\n'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Wouldn't it be better to use the standard Python string formatting function? <code>'{0}, {1}, {2}, {3}'.format(*word)</code> would achieve the same results.</span>
<span class="comment-copy">You will turn 1000 into 1foo this way.</span>
<span class="comment-copy">Why did you accept <a href="http://stackoverflow.com/a/13784019/722121">my answer</a> to <a href="http://stackoverflow.com/q/13784006/722121">your last question</a>, and then continue to use a version that is broken? Also, you could make this far easier on yourself by using the <a href="http://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">String Formatting syntax</a> and just using <code>str.format()</code>.</span>
<span class="comment-copy">@Lattyware I am a bit of a novice, sorry for any confusion. As I understood it I did use your answer to tackle this problem.  It worked perfectly on the simpler string but not on the "html string". So when I applied the above method on my HTML file it didn't work as I expected.</span>
<span class="comment-copy">There are also things like <code>291px</code> in the text, so that wouldn't work.</span>
<span class="comment-copy">@BrtH very good point - was referring to the original non-HTML text thing</span>
<span class="comment-copy">Indeed. btw, for the non-html text, <code>re.sub(r'\d+', lambda m:word[int(m.group(0))], text)</code> would be even simpler.</span>
<span class="comment-copy">Is it possible to use regexes to preform the list replacements on the HTML text string?</span>
<span class="comment-copy">@NightMarcher You'd have to use something like <code>lxml.html</code> or <code>BeautifulSoup</code> to get your text content, then amend that...</span>
