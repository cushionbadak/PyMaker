<div class="post-text" itemprop="text">
<p>I am using a  file and i have one section named DIR in which it contain the paths.
EX:</p>
<pre><code>[DIR]
DirTo=D:\Ashish\Jab Tak hai Jaan
DirBackup = D:\Parser\ERICSSON_CSCORE_STANDARD_VMS\Backup
ErrorDir = D:\Parser\ERICSSON_CSCORE_STANDARD_VMS\Error

CombinerDir = D:\Parser\ERICSSON_CSCORE_STANDARD_VMS\Combiner
DirFrom=D:\Parser\ERICSSON_CSCORE_STANDARD_VMS\In
PidFileDIR = D:\Parser\ERICSSON_CSCORE_STANDARD_VMS\Pid
LogDir = D:\Parser\ERICSSON_CSCORE_STANDARD_VMS\Log   
TempDir = D:\Parser\ERICSSON_CSCORE_STANDARD_VMS\Temp
</code></pre>
<p>Now I want to replace the paths which I have done it but when I replaced its giving me spaces after and before the delimiter in the newly written <code>.ini</code> file. For example: <code>DirTo =  D:\Parser\Backup</code>. How I remove these spaces?</p>
<p>Code:</p>
<pre><code>def changeINIfile():
    config=ConfigParser.RawConfigParser(allow_no_value=False)
    config.optionxform=lambda option: option
    cfgfile=open(r"D:\Parser\ERICSSON_CSCORE_STANDARD_VMS\Windows\opx_PAR_GEN_660_ERICSSON_CSCORE_STANDARD_PM_VMS_MALAYSIA.ini","w")
    config.set('DIR','DirTo','D:\Ashish\Jab Tak hai Jaan')
    config.optionxform=str
    config.write(cfgfile)
    cfgfile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the definition of <code>RawConfigParser.write</code>:</p>
<pre><code>def write(self, fp):
    """Write an .ini-format representation of the configuration state."""
    if self._defaults:
        fp.write("[%s]\n" % DEFAULTSECT)
        for (key, value) in self._defaults.items():
            fp.write("%s = %s\n" % (key, str(value).replace('\n', '\n\t')))
        fp.write("\n")
    for section in self._sections:
        fp.write("[%s]\n" % section)
        for (key, value) in self._sections[section].items():
            if key != "__name__":
                fp.write("%s = %s\n" %
                         (key, str(value).replace('\n', '\n\t')))
        fp.write("\n")
</code></pre>
<p>As you can see, the <code>%s = %s\n</code> format is hard-coded into the function.  I think your options are:</p>
<ol>
<li>Use the INI file with whitespace around the equals</li>
<li>Overwrite <code>RawConfigParser</code>'s <code>write</code> method with your own</li>
<li>Write the file, read the file, remove the whitespace, and write it again</li>
</ol>
<p>If you're 100% sure option 1 is unavailable, here's a way to do option 3:</p>
<pre><code>def remove_whitespace_from_assignments():
    separator = "="
    config_path = "config.ini"
    lines = file(config_path).readlines()
    fp = open(config_path, "w")
    for line in lines:
        line = line.strip()
        if not line.startswith("#") and separator in line:
            assignment = line.split(separator, 1)
            assignment = map(str.strip, assignment)
            fp.write("%s%s%s\n" % (assignment[0], separator, assignment[1]))
        else:
            fp.write(line + "\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I ran into this problem to and I came up with an additional solution.</p>
<ul>
<li>I didn't want to replace the function as future versions of Python might change the internal function structures of RawConfigParser.</li>
<li>I also didn't want to read the file back in right after it was written because that seemed wasteful</li>
</ul>
<p>Instead I wrote a wrapper around the file object which simply replaces " = " with "=" in all lines written though it.</p>
<pre><code>class EqualsSpaceRemover:
    output_file = None
    def __init__( self, new_output_file ):
        self.output_file = new_output_file

    def write( self, what ):
        self.output_file.write( what.replace( " = ", "=", 1 ) )

config.write( EqualsSpaceRemover( cfgfile ) )
</code></pre>
</div>
<span class="comment-copy">Please post the code you are using to write these lines of text. Martijn Pieters correctly suggests that you can use <code>strip()</code> to remove whitespace from the start and end of a string, but a code sample would help us debug better.</span>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/14021135/edit">edit</a> your question to update it with code.</span>
<span class="comment-copy">Use <a href="http://docs.python.org/2/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">raw strings</a> or double escape your \, or use <code>os.path.join</code> for your paths. Also, as I see it the Python code is not creating any extra spaces, so what exactly is your question?</span>
<span class="comment-copy">I cannot reproduce your problem; no whitespace is added when I use your <code>.set()</code> call. Or did you mean the spaces around the ` = ` equals? Those are part of the format; the standard <code>.ini</code> file format allows for those spaces.</span>
<span class="comment-copy">Note that the Win32 INI parser will ignore this whitespace (it has some rather interesting behaviour, but that at least is one sensible one). So it may not actually be a problem for you beyond cosmetics.</span>
<span class="comment-copy">Hi Slace..Yup the 3 solution worked for me..thankyou so much :)</span>
<span class="comment-copy">In Python 3, you can use <code>config.write(file_on_disk, space_around_delimiters=False)</code>. See <a href="http://docs.python.org/3/library/configparser.html#configparser.ConfigParser.write" rel="nofollow noreferrer">Python 3 Documentation: configparser.write</a></span>
<span class="comment-copy">Most elegant and flexible solution. The write function can easily be extended to perform other kinds of filtering.</span>
<span class="comment-copy">I would use write.replace(" = ", "=", 1) so you don't change any values that happen to have " = " in them</span>
<span class="comment-copy">Ok, @linuts I edited the answer to add max replace count of 1.  The only way this could cause a problem is if there is an equals in the key, but a key is usually less prolific then the data.</span>
