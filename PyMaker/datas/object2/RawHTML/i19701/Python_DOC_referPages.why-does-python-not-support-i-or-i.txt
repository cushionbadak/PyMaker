<div class="post-text" itemprop="text">
<p>Why are there no <code>++</code> and <code>--</code> operators in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not because it doesn't make sense; it makes perfect sense to define "x++" as "x += 1, evaluating to the previous binding of x".</p>
<p>If you want to know the original reason, you'll have to either wade through old Python mailing lists or ask somebody who was there (eg. Guido), but it's easy enough to justify after the fact:</p>
<p>Simple increment and decrement aren't needed as much as in other languages.  You don't write things like <code>for(int i = 0; i &lt; 10; ++i)</code> in Python very often; instead you do things like <code>for i in range(0, 10)</code>.</p>
<p>Since it's not needed nearly as often, there's much less reason to give it its own special syntax; when you do need to increment, <code>+=</code> is usually just fine.</p>
<p>It's not a decision of whether it makes sense, or whether it can be done--it does, and it can.  It's a question of whether the benefit is worth adding to the core syntax of the language.  Remember, this is <em>four</em> operators--postinc, postdec, preinc, predec, and each of these would need to have its own class overloads; they all need to be specified, and tested; it would add opcodes to the language (implying a larger, and therefore slower, VM engine); every class that supports a logical increment would need to implement them (on top of <code>+=</code> and <code>-=</code>).</p>
<p>This is all redundant with <code>+=</code> and <code>-=</code>, so it would become a net loss.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>This original answer I wrote is a myth from the folklore of computing</strong>: debunked by Dennis Ritchie as "historically impossible" as noted in the letters to the editors of <em>Communications of the ACM</em> July 2012 <a href="http://dx.doi.org/10.1145/2209249.2209251" rel="noreferrer">doi:10.1145/2209249.2209251</a></p>
<hr/>
<p>The C increment/decrement operators were invented at a time when the C compiler wasn't very smart and the authors wanted to be able to specify the direct intent that a machine language operator should be used which saved a handful of cycles for a compiler which might do a </p>
<pre><code>load memory
load 1
add
store memory
</code></pre>
<p>instead of </p>
<pre><code>inc memory 
</code></pre>
<p>and the PDP-11 even supported "autoincrement" and "autoincrement deferred" instructions corresponding to <code>*++p</code> and <code>*p++</code>, respectively. See section 5.3 of <a href="https://web.archive.org/web/20110929024449/http://computer-refuge.org/bitsavers/pdf/dec/pdp11/rsx11/RSX11M_V2/DEC-11-OIMRA-A-D_MACRO_75.pdf" rel="noreferrer">the manual</a> if horribly curious.</p>
<p>As compilers are smart enough to handle the high-level optimization tricks built into the syntax of C, they are just a syntactic convenience now. </p>
<p>Python doesn't have tricks to convey intentions to the assembler because it doesn't use one.</p>
</div>
<div class="post-text" itemprop="text">
<p>I always assumed it had to do with this line of the zen of python:</p>
<blockquote>
<p>There should be one — and preferably only one — obvious way to do it.</p>
</blockquote>
<p>x++ and x+=1 do the exact same thing, so there is no reason to have both. </p>
</div>
<div class="post-text" itemprop="text">
<p>Of course, we could say "Guido just decided that way", but I think the question is really about the reasons for that decision. I think there are several reasons:</p>
<ul>
<li>It mixes together statements and expressions, which is not good practice. See <a href="http://norvig.com/python-iaq.html" rel="noreferrer">http://norvig.com/python-iaq.html</a></li>
<li>It generally encourages people to write less readable code</li>
<li>Extra complexity in the language implementation, which is unnecessary in Python, as already mentioned</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Because, in Python, integers are immutable (int's += actually returns a different object).</p>
<p>Also, with ++/-- you need to worry about pre- versus post- increment/decrement, and it takes only one more keystroke to write <code>x+=1</code>.  In other words, it avoids potential confusion at the expense of very little gain.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Clarity!</h2>
<p>Python is a lot about <strong>clarity</strong> and no programmer is likely to correctly guess the meaning of <code>--a</code> unless s/he's learned a language having that construct.</p>
<p>Python is also a lot about <strong>avoiding constructs that invite mistakes</strong> and the <code>++</code> operators are known to be rich sources of defects.
These two reasons are enough not to have those operators in Python.</p>
<p>The decision that Python uses indentation to mark blocks rather
than syntactical means such as some form of begin/end bracketing 
or mandatory end marking is based largely on the same considerations.</p>
<p>For illustration, have a look at the <strong>discussion around introducing a conditional operator</strong> (in C: <code>cond ? resultif : resultelse</code>) into Python in 2005.
Read at least the <a href="https://mail.python.org/pipermail/python-dev/2005-September/056546.html">first message</a> and the <a href="https://mail.python.org/pipermail/python-dev/2005-September/056846.html">decision message</a> of that <a href="https://mail.python.org/pipermail/python-dev/2005-September/">discussion</a> (which had several precursors on the same topic previously).</p>
<p><strong>Trivia:</strong>
The PEP frequently mentioned therein is the "Python Extension Proposal" <a href="https://www.python.org/dev/peps/pep-0308/">PEP 308</a>. LC means <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehension</a>, GE means <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions">generator expression</a> (and don't worry if those confuse you, they are none of the few complicated spots of Python).</p>
</div>
<div class="post-text" itemprop="text">
<p>It was just designed that way.  Increment and decrement operators are just shortcuts for <code>x = x + 1</code>.  Python has typically adopted a design strategy which reduces the number of alternative means of performing an operation.  <a href="http://www.python.org/download/releases/2.0/new-python.htm#SECTION000700000000000000000" rel="noreferrer">Augmented assignment</a> is the closest thing to increment/decrement operators in Python, and they weren't even added until Python 2.0.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm very new to python but I suspect the reason is because of the emphasis between mutable and immutable objects within the language.  Now, I know that x++ can easily be interpreted as x = x + 1, but it LOOKS like you're incrementing <em>in-place</em> an object which could be immutable.</p>
<p>Just my guess/feeling/hunch.</p>
</div>
<div class="post-text" itemprop="text">
<p>My understanding of why python does not have <code>++</code> operator is following: When you write this in python <code>a=b=c=1</code> you will get three variables (labels) pointing at same object (which value is 1). You can verify this by using id function which will return an object memory address:</p>
<pre><code>In [19]: id(a)
Out[19]: 34019256

In [20]: id(b)
Out[20]: 34019256

In [21]: id(c)
Out[21]: 34019256
</code></pre>
<p>All three variables (labels) point to the same object. Now increment one of variable and see how it affects memory addresses:</p>
<pre><code>In [22] a = a + 1

In [23]: id(a)
Out[23]: 34019232

In [24]: id(b)
Out[24]: 34019256

In [25]: id(c)
Out[25]: 34019256
</code></pre>
<p>You can see that variable <code>a</code> now points to another object as variables <code>b</code> and <code>c</code>. Because you've used <code>a = a + 1</code> it is explicitly clear. In other words you assign completely another object to label <code>a</code>. Imagine that you can write <code>a++</code> it would suggest that you did not assign to variable <code>a</code> new object but ratter increment the old one. All this stuff is IMHO for minimization of confusion. For better understanding see how python variables works:</p>
<p><a href="https://stackoverflow.com/questions/575196/in-python-why-can-a-function-modify-some-arguments-as-perceived-by-the-caller">In Python, why can a function modify some arguments as perceived by the caller, but not others?</a></p>
<p><a href="https://www.jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/" rel="nofollow noreferrer">Is Python call-by-value or call-by-reference? Neither.</a></p>
<p><a href="http://stupidpythonideas.blogspot.sk/2013/11/does-python-pass-by-value-or-by.html" rel="nofollow noreferrer">Does Python pass by value, or by reference?</a></p>
<p><a href="http://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/" rel="nofollow noreferrer">Is Python pass-by-reference or pass-by-value?</a></p>
<p><a href="https://stackoverflow.com/questions/986006/python-how-do-i-pass-a-variable-by-reference">Python: How do I pass a variable by reference?</a></p>
<p><a href="http://foobarnbaz.com/2012/07/08/understanding-python-variables/" rel="nofollow noreferrer">Understanding Python variables and Memory Management</a></p>
<p><a href="https://stackoverflow.com/questions/845110/emulating-pass-by-value-behaviour-in-python">Emulating pass-by-value behaviour in python</a></p>
<p><a href="https://stackoverflow.com/questions/13299427/python-functions-call-by-reference">Python functions call by reference</a></p>
<p><a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="nofollow noreferrer">Code Like a Pythonista: Idiomatic Python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I believe it stems from the Python creed that "explicit is better than implicit".</p>
</div>
<div class="post-text" itemprop="text">
<p>First, Python is only indirectly influenced by C; it is heavily influenced by <a href="http://en.wikipedia.org/wiki/ABC_programming_language" rel="noreferrer">ABC</a>, which <a href="http://homepages.cwi.nl/~steven/abc/qr.html" rel="noreferrer">apparently does not have these operators</a>, so it should not be any great surprise not to find them in Python either.</p>
<p>Secondly, as others have said, increment and decrement are supported by <code>+=</code> and <code>-=</code> already.</p>
<p>Third, full support for a <code>++</code> and <code>--</code> operator set usually includes supporting both the prefix and postfix versions of them.  In C and C++, this can lead to all kinds of "lovely" constructs that seem (to me) to be against the spirit of simplicity and straight-forwardness that Python embraces.</p>
<p>For example, while the C statement <code>while(*t++ = *s++);</code> may seem simple and elegant to an experienced programmer, to someone learning it, it is anything but simple.  Throw in a mixture of prefix and postfix increments and decrements, and even many pros will have to stop and think a bit.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may be because <a href="https://stackoverflow.com/a/3654936/">@GlennMaynard</a> is looking at the matter as in comparison with other languages, but in Python, you do things the python way. It's not a 'why' question. It's there and you can do things to the same effect with <code>x+=</code>. In <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">The Zen of Python</a>, it is given: "there should only be one way to solve a problem." Multiple choices are great in art (freedom of expression) but lousy in engineering.</p>
</div>
<div class="post-text" itemprop="text">
<p>as i understood it so you won't think the value in memory is changed.
in c when you do x++ the value of x in memory changes.
but in python all numbers are immutable hence the address that x pointed as still has x not x+1. when you write x++ you would think that x change what really happens is that x refrence is changed to a location in memory where x+1 is stored or recreate this location if doe's not exists.  </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>++</code> class of operators are expressions with side effects. This is something generally not found in Python.</p>
<p>For the same reason an assignment is not an expression in Python, thus preventing the common <code>if (a = f(...)) { /* using a here */ }</code> idiom.</p>
<p>Lastly I suspect that there operator are not very consistent with Pythons reference semantics. Remember, Python does not have variables (or pointers) with the semantics known from C/C++.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe a better question would be to ask why do these operators exist in C. K&amp;R calls increment and decrement operators 'unusual' (Section 2.8page 46). The Introduction calls them 'more concise and often more efficient'. I suspect that the fact that these operations always come up in pointer manipulation also has played a part in their introduction.
In Python it has been probably decided that it made no sense to try to optimise increments (in fact I just did a test in C, and it seems that the gcc-generated assembly uses addl instead of incl in both cases) and there is no pointer arithmetic; so it would have been just One More Way to Do It and we know Python loathes that.</p>
</div>
<div class="post-text" itemprop="text">
<p>To complete already good answers on that page:</p>
<p>Let's suppose we decide to do this, prefix (<code>++i</code>) that would break the unary + and - operators.</p>
<p>Today, prefixing by <code>++</code> or <code>--</code> does nothing, because it enables unary plus operator twice (does nothing) or unary minus twice (twice: cancels itself)</p>
<pre><code>&gt;&gt;&gt; i=12
&gt;&gt;&gt; ++i
12
&gt;&gt;&gt; --i
12
</code></pre>
<p>So that would potentially break that logic.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this relates to the concepts of mutability and immutability of objects. 2,3,4,5 are immutable in python. Refer to the image below. 2 has fixed id until this python process. </p>
<p><a href="https://i.stack.imgur.com/TwcRW.png" rel="nofollow noreferrer"><img alt="ID of constants and variables" src="https://i.stack.imgur.com/TwcRW.png"/></a></p>
<p>x++ would essentially mean an in-place increment like C. In C, x++ performs in-place increments. So, x=3, and x++ would increment 3 in the memory to 4, unlike python where 3 would still exist in memory. </p>
<p>Thus in python, you don't need to recreate a value in memory. This may lead to performance optimizations. </p>
<p>This is a hunch based answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>++ operator is not exactly same the += operator.
In fact result of both is same but uses have some difference.
For example, You can use ++ operator in ternary conditional, for loop, etc but can't use +=.
At bottom, We feel the need ++ and --, for this reason.</p>
</div>
<span class="comment-copy">Related post - <a href="https://stackoverflow.com/q/1485841/465053">Behaviour of increment and decrement operators in Python</a></span>
<span class="comment-copy">Because… Python ISN'T C!</span>
<span class="comment-copy">It is often useful to use something like array[i++], which is not tidily done with +=/-=.</span>
<span class="comment-copy">@thayes: That's not a common pattern in Python.</span>
<span class="comment-copy">@thayes Since that will be inside a loop, you might as well loop over <code>i</code> directly - if you actually need it and can't just e.g. use <code>array.append()</code></span>
<span class="comment-copy">I see the much bigger concern being readability and predictability. Back in my C days, I saw more than enough bugs stemming from misunderstandings about the distinction between <code>i++</code> and <code>++i</code>...</span>
<span class="comment-copy">Adding to justifying after-the-fact: on a project I work on, I've encountered (more than anyone should in their life) a fair amount of C++ code suffering from problems with <code>++</code> and <code>--</code> being used in ways that result in undefined or unspecified behavior.  They make it possible to write complicated, difficult-to-correctly-parse code.</span>
<span class="comment-copy">Javascript has ++.  I don't think that's a "trick to convey intentions to the assembler."  Plus, Python does have bytecode.  So I think the reason is something else.</span>
<span class="comment-copy">This "providing hints to the compiler" business is indeed a myth.  Frankly, it's a dumb addition to any language and it violates the following two precepts: <b>1. You don't code for the computer to read, you code for another engineer to read.</b>  And <b>2. You don't code for a competent engineer to read, you code for a competent engineer to read while exhausted at 3am and hopped up on caffeine.</b></span>
<span class="comment-copy">@tgm1024 To be fair, when coding on a 10–30 character per second, half-duplex teletype, you code so that you can key it in before next week.</span>
<span class="comment-copy">@msw, I'm afraid I missed your meaning.</span>
<span class="comment-copy">@tgm1024 Unix and C saw the bulk of their initial development on PDP-11s which used incredibly slow teletypes for user communication. While you are dead right that <i>today</i> coding for the machine is mostly silly, back then it was the Human/Machine interface which was the bottleneck. It is hard to imagine working that slowly if you never had to.</span>
<span class="comment-copy">Ok, let's delete += operator then?</span>
<span class="comment-copy"><code>one--</code> is zero ?</span>
<span class="comment-copy"><code>one--</code> is one in the sentence, but zero immediately afterwards. So this 'koan' also hints that increment/decrement operators are non-obvious.</span>
<span class="comment-copy">@EralpB If you delete +=, then you cannot do things like x += 10. += is a more general case of ++</span>
<span class="comment-copy">Also: "Explicit is better than implicit".</span>
<span class="comment-copy">Glad someone finally mentioned the statement vs expression aspect. In C assignment is an expression and so it the ++ operator. In Python assignment is a statement, so <b>if</b> it had a ++, it would likely need to be an assignment statement, too (and even less useful or needed).</span>
<span class="comment-copy">Agreed - if they were statements, then at a minimum it would become absolutely meaningless to talk about the difference between post- and pre- operators.</span>
<span class="comment-copy">ints are immutable in C as well. If you don't think so, try to get your C compiler to generate code for <code>42++</code>... Something like this (modifying a literal constant) <i>was</i> actually possible in some old Fortran compilers (or so I've read): All future uses of that literal in that program run would then really have a different value. Happy debugging!</span>
<span class="comment-copy">Right.  42 is a literal <i>constant</i>.  Constants are (or at least <i>should</i> be) immutable.  That doesn't mean C <code>int</code>s in general are immutable.  An <code>int</code> in C simply designates a place in memory.  And the bits in that place is very much mutable.  You can, for instance, create a reference of an <code>int</code> and change the referent of that reference.  This change is visible in all references (including the original <code>int</code> variable) to that place.  The same doesn't hold for a Python integer object.</span>
<span class="comment-copy">x+=1 doesn't end up becoming inc mem.  Python executes a function call to add 1 to a variable; it's pathetic.</span>
<span class="comment-copy">Yeah mate, like, you could replace <code>return a[i++]</code> with <code>return a[i=i+1]</code>.</span>
<span class="comment-copy">In this aspect, <code>x++</code> is closer to <code>x += 1</code> than to <code>x = x + 1</code>, these two making a difference as well on mutable objects.</span>
<span class="comment-copy">Well, you don't explicitly write "begin" and "end" statements in Python, right? Even though I agree with the statement, I think there are boundaries to that. While we can argue on that boundaries, I think we all can agree, that there is a line, which is impractical to cross. And since there are so many opinions and justifications on that decision, I don't think it was a clear choice. At least, I can't find a source, where it is explicitly stated</span>
<span class="comment-copy">So what makes this <code>++</code> and different from <code>+= 1</code>?</span>
<span class="comment-copy">That's wrong, at least for C/C++. You can use <code>+=</code> in for loops, if statements etc. It is an expression just like assignment, return the result of the addtions.</span>
