<div class="post-text" itemprop="text">
<p>In Python, if I define a list as
    xx = [1,2,3,4]
then I can reference the data in that (vector) as xx[0] and get 1, xx[1] and get 2, etc.</p>
<p>If I have a data file that has csv ... Datafile is --&gt;  xx,1,2,3,4
Is there a way for me to read the Datafile, and make that first element of the Datafile (xx) the name of a vector that is [1,2,3,4]?  I would like to be able to be able to see xx[0] as 1, xx[1] as 2, etc.</p>
<p>This is all Python lists, not dictionaries - I'd prefer to keep this as simple as possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>can</em> do this, but the real question is, should you? The answer is, quite simply, no. Dynamic variable names are a recipe for trouble, and you are much better off using a dictionary. It will make your code simpler, not more complex. One simply does:</p>
<pre><code>data['xx'][0]
</code></pre>
<p>Use <a href="http://docs.python.org/3/library/csv.html" rel="nofollow">the <code>csv</code> module</a> to load in your data, then construct a dictionary. This can be a simple <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">dictionary comprehension</a>:</p>
<pre><code>with open('data.csv') as file:
    reader = csv.reader(file)
    data = {key: values for key, *values in reader}
</code></pre>
<p>If you really need the order, then you can use <a href="http://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a> to do the job.</p>
<pre><code>data = collections.OrderedDict((key, values) for key, *values in reader)
</code></pre>
<p>Do note that this nice unpacking syntax only works in 3.x, so for 2.x, you will need to do something more along the lines of <code>{line[0]: line[1:] for line in reader}</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should start with looking into Python's <a href="http://docs.python.org/2/library/csv.html" rel="nofollow">csv</a> library.</p>
</div>
<span class="comment-copy">I was hoping to have the "key" values, come from the data file.  I could hard code them in - perhaps I will do that - seems easy enough.  Then I could use the columns of numerics as lists.  I thought for sure there would be a one-liner to point a string at a vector.  My Matlab code to plot the data works well, but it would be nice to avoid that expense.  Matplotlib is fantastic.  I thought reading in the data would be turn-key.  Thanks for the response.  No reason to spend more time on this thread.</span>
<span class="comment-copy">@Mark My answer does have the key values come from the data file. As you said in the question, it uses the first column as the keys. Please try my answer before you reject it.</span>
