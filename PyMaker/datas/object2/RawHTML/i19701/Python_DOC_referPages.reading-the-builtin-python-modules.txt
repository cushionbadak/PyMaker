<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong><br/>
<a href="https://stackoverflow.com/questions/269795/how-do-i-find-the-location-of-python-module-sources">How do I find the location of Python module sources?</a> </p>
</blockquote>
<p>I dont understand how to read the code in the builtin python modules. I know how to find out whats in a module for example,</p>
<pre><code>import os;

dir(os)
</code></pre>
<p>But when I try to look for example for the function <code>listdir</code> I cannot find a <code>def listdir</code> to read what it actually does.</p>
</div>
<div class="post-text" itemprop="text">
<p>One word: <a href="http://docs.python.org/library/inspect.html" rel="nofollow">inspect</a>.</p>
<blockquote>
<p>The inspect module provides several useful functions to help get information about live objects such as modules, classes, methods, functions, tracebacks, frame objects, and code objects. For example, it can help you examine the contents of a class, retrieve the source code of a method, extract and format the argument list for a function, or get all the information you need to display a detailed traceback.</p>
</blockquote>
<p>It's in the standard library, and the docs have examples. So, you just <code>print(inspect.getsource(os))</code>, or do <code>inspect.getsourcefile(os)</code>, etc.</p>
<p>Note that some of the standard-library modules are written in C (or are even fake modules built into the interpreter), in which case <code>getsourcefile</code> returns nothing, but <code>getfile</code> will at least tell you it's a <code>.so</code>/<code>.pyd</code>/whatever, which you can use to look up the original C source in, say, a copy of the Python source code.</p>
<p>You can also just type <code>help(os)</code>, and the <code>FILE</code> right at the top gives you the path (generally the same as <code>getsourcefile</code> for Python modules, the same a <code>getfile</code> otherwise).</p>
<p>And you can always go to the online source for the <a href="http://hg.python.org/cpython/file/2.7/Lib/" rel="nofollow">Python modules</a> and <a href="http://hg.python.org/cpython/file/2.7/Modules/" rel="nofollow">C extension modules</a>. Just change the "2.7" to "3.3", etc., in the URL to get different versions. (I believe if you remove the version entirely, you get the trunk code, currently corresponding to 3.4 pre-alpha, but don't quote me on that.)</p>
<p>The <code>os.listdir</code> function isn't actually defined directly in <code>os</code>; it's effectively <code>from &lt;platform-specific-module&gt; import *</code> imported. You can trace it down through a few steps yourself, but it's usually going to be <code>posix_listdir</code> in <a href="http://hg.python.org/cpython/file/2.7/Modules/posixmodule.c" rel="nofollow"><code>posixmodule.c</code></a> on most platforms. (Even Windows—recent versions use the same file to define the <code>posix</code> module on non-Windows, and the <code>nt</code> and <code>posix</code> modules on Windows, and there's a bunch of <code>#if defined(…)</code> stuff in the code.)</p>
</div>
<span class="comment-copy">The easiest option is to <a href="http://docs.python.org/3/library/index.html" rel="nofollow noreferrer">look it up in the docs</a>.</span>
<span class="comment-copy">@Lattyware: Where do the docs tell you the source? A few of the modules <i>do</i> have links to the source, generally the ones that are meant as much as examples as usable code (like <code>asyncore</code>), but most do not (like <code>os</code>).</span>
<span class="comment-copy">@abarnert I took 'read what it actually does' to mean how to use it, not see the source. The question is a little unclear, but rereading it, your interpretation is probably right.</span>
<span class="comment-copy">@HansEngel: That answer is way, way out of date. They added <code>inspect</code> way back in 2.1 so you didn't have to deal with "sometimes there's a <code>__file__</code>, sometimes there isn't, sometimes it's the <code>.pyc</code> and sometimes the <code>.py</code>, it may be different on different platforms, and even worse on different implementations like PyPy, etc." stuff anymore,  and as of 3.0 the rules aren't even documented (beyond "it has to be whatever <code>inspect</code> expects").</span>
