<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong><br/>
<a href="https://stackoverflow.com/questions/301134/dynamic-module-import-in-python">Dynamic module import in Python</a> </p>
</blockquote>
<p>I intend to make a suite of files at some point soon, and the best way to organize it is to have a list, that list will be at the very top of a file, and after it will come a ridiculous amount of code to handle what that list controls and how it operates. I'm looking to write said list only once, and said list is a list of folder and file names in this format:</p>
<pre><code>[(folder/filename, bool, bool, int), (folder/filename, bool, bool, int)]
</code></pre>
<p>As you can see, <code>folder/filename</code> are the same (sort of). File name is folder name with <code>.py</code> on the end, but doing import XXX you don't need to do import XXX.py, so I don't see this causing an issue.</p>
<p>The problem I'm facing is importing using this method...</p>
<pre><code>for (testName, auto, hardware, bit) in testList:
    print(testName)
    paths = "\\" + testName
    print paths
    addpath(paths)
    sys.modules[testName] = testName # One of a few options I've seen suggested on the net
    print("Path Added")
    test = testName + ".Helloworld()"
    eval(test)
</code></pre>
<p>So for each test I have, print the name, assemble a string which contains the path (<code>"\\testName"</code>), for this example, print the test path, then add the path to the list (<code>sys.path.append(path)</code>), then print to confirm it happened, then assemble a string which will be executed by <code>eval</code> for the tests main module and eventually eval it.</p>
<p>As you can see, I'm currently having to have a list of imports at the top. I can't simply do import <code>testName</code> (the contents of <code>testName</code> are the name of the module I wish to import), as it will try to find a module called <code>testName</code>, not a module called the contents of <code>testName</code>.</p>
<p>I've seen a few examples of where this has been done, but can't find any which work in my circumstances. If someone could literally throw a chunk of code which does it that would be wonderful.</p>
<p>I'd also request that I'm not hung, drawn, nor quartered for use of eval, it is used in a very controlled environment (the list through which it cycles is within the .py file, so no "end user" should mess with it).</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if I understood everything correctly, but you can import a module dynamically using <code>__import__</code>:</p>
<pre><code>mod = __import__(testName)
mod.HelloWorld()
</code></pre>
<p><strong>Edit</strong>: I wasn't aware that the use of <code>__import__</code> was discouraged by the python docs for user code: <a href="http://docs.python.org/2/library/functions.html#__import__" rel="noreferrer">__import__ documentation</a> (as noted by Bakuriu)</p>
<p><a href="https://docs.python.org/3/library/importlib.html" rel="noreferrer">This</a> should also work and would be considered better style:</p>
<pre><code>import importlib

mod = importlib.import_module(testName)
mod.HelloWorld()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Never, ever, ever mess with <code>sys.modules</code> directly if you don't know exactly what you are doing.</li>
<li>There are a lot of ways to do what you want:

<ol>
<li>The build-in <a href="http://docs.python.org/2/library/functions.html?highlight=__import__#__import__" rel="noreferrer"><code>__import__</code></a> function</li>
<li>Using <a href="http://docs.python.org/2/library/imp.html#imp.load_module" rel="noreferrer"><code>imp.load_module</code></a></li>
<li>Using <a href="http://docs.python.org/2/library/importlib.html#importlib.import_module" rel="noreferrer"><code>importlib.import_module</code></a></li>
</ol></li>
</ol>
<p>I'd avoid using <code>__import__</code> directly, and go for <code>importlib.import_module</code>(which is also suggested at the end of the documentation of <code>__import__</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Add the path where module resides to sys.path. Import the module using __import__ function which accepts a string variable as module name.</p>
<pre><code>import sys
sys.path.insert(0, mypath)  # mypath = path of module to be imported
imported_module = __import__("string_module_name") # __import__ accepts string 
imported_module.myfunction()   # All symbols in mymodule are now available normally
</code></pre>
</div>
<span class="comment-copy">Note that the indentation is correct in ST, for some reason I think this website just doesn't like parsing my text correctly :(</span>
<span class="comment-copy">Don't use tabs but spaces for indentation.</span>
<span class="comment-copy">Python already has a way of managing large collections of <code>.py</code> files that you might want to import, which understands folders and subfolders, lets you handle relative imports, does namespacing properly, and so on. It's called a <a href="http://docs.python.org/2/tutorial/modules.html#packages" rel="nofollow noreferrer">package</a>. Is there a reason you don't want to use one?</span>
<span class="comment-copy">duplicate also of: <a href="http://stackoverflow.com/questions/8718885/import-module-from-string-variable" title="import module from string variable">stackoverflow.com/questions/8718885/â€¦</a></span>
<span class="comment-copy">Marvelous, thanks a ton for this, spent well over an hour scouring for information on it, I managed to write out __import__(testName) earlier, but didn't realise I had to assign the response to a module or w.e, fortunately all my functions will be named Test throughout all files, so I can just call mod.Test() from now on.</span>
<span class="comment-copy">@XtrmJosh have you seen the other answer? <code>__import__</code> is an implementation detail; you should use <code>importlib</code> (or <code>imp</code> if you don't care about Python 3.x compatibility).</span>
<span class="comment-copy">This is for <code>import moduleName</code> where moduleName is string. How about <code>from moduleName import *</code> ?</span>
<span class="comment-copy">@NamGVU try to import the module as above and then: <code>globals().update(module.__dict__)</code></span>
<span class="comment-copy">Work like a charm. Thank you!</span>
<span class="comment-copy">I just found another solution here which import only the user-defined variables <a href="https://stackoverflow.com/a/31306598/248616">stackoverflow.com/a/31306598/248616</a></span>
