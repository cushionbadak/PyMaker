<div class="post-text" itemprop="text">
<p>The shortest ways I have found:</p>
<pre><code>n = 5

#Python 2
s = str(n)
i = int(s)

#Python 3
s = bytes(str(n),"ascii")
i = int(s)
</code></pre>
<p>I am particularly concerned with two factors: readability and portability.  The second method, for Python 3, is ugly.  However, I think it may be backwards compatible.</p>
<p>Is there a shorter, cleaner way that I have missed?  I currently make a lambda expression to fix it with a new function, but maybe that's unnecessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>To convert a string to a sequence of bytes in either Python 2 or Python 3, you use the string's <code>encode</code> method. If you don't supply an encoding parameter <code>'ascii'</code> is used, which will always be good enough for numeric digits.</p>
<pre><code>s = str(n).encode()
</code></pre>
<ul>
<li>Python 2: <a href="http://ideone.com/Y05zVY" rel="noreferrer">http://ideone.com/Y05zVY</a></li>
<li>Python 3: <a href="http://ideone.com/XqFyOj" rel="noreferrer">http://ideone.com/XqFyOj</a></li>
</ul>
<p>In Python 2 <code>str(n)</code> already produces bytes; the <code>encode</code> will do a double conversion as this string is implicitly converted to Unicode and back again to bytes. It's unnecessary work, but it's harmless and is completely compatible with Python 3.
<hr/>
Above is the answer to the question that was actually asked, which was to produce a string of ASCII bytes. But since people keep coming here trying to get the answer to a <em>different</em> question, I'll answer that question too. If you want to convert <code>10</code> to <code>b'10'</code> use the answer above, but if you want to convert <code>10</code> to <code>b'\x0a\x00\x00\x00'</code> then keep reading.</p>
<p>The <a href="https://docs.python.org/3/library/struct.html" rel="noreferrer"><code>struct</code> module</a> was specifically provided for converting between various types and their binary representation as a sequence of bytes. The conversion from a type to bytes is done with <a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="noreferrer"><code>struct.pack</code></a>. There's a format parameter <code>fmt</code> that determines which conversion it should perform. For a 4-byte integer, that would be <code>i</code> for signed numbers or <code>I</code> for unsigned numbers. For more possibilities see the <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="noreferrer">format character table</a>, and see the <a href="https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="noreferrer">byte order, size, and alignment table</a> for options when the output is more than a single byte.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/2/library/struct.html#struct.pack">struct's pack</a>:</p>
<pre><code>In [11]: struct.pack("&gt;I", 1)
Out[11]: '\x00\x00\x00\x01'
</code></pre>
<p>The "&gt;" is the <a href="https://docs.python.org/2/library/struct.html#byte-order-size-and-alignment">byte-order (big-endian)</a> and the "I" is the <a href="https://docs.python.org/2/library/struct.html#format-characters">format character</a>. So you can be specific if you want to do something else:</p>
<pre><code>In [12]: struct.pack("&lt;H", 1)
Out[12]: '\x01\x00'

In [13]: struct.pack("B", 1)
Out[13]: '\x01'
</code></pre>
<p><em>This works the same on both python 2 and <a href="https://docs.python.org/3/library/struct.html">python 3</a>.</em></p>
<p>Note: the inverse operation (bytes to int) can be done with <a href="https://docs.python.org/2/library/struct.html#struct.unpack">unpack</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have found the only reliable, portable method to be</p>
<pre><code>bytes(bytearray([n]))
</code></pre>
<p>Just bytes([n]) does not work in python 2.  Taking the scenic route through bytearray seems like the only reasonable solution.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Converting an <strong>int</strong> to a <strong>byte</strong> in Python <strong>3</strong>:</p>
<pre><code>    n = 5    
    bytes( [n] )

&gt;&gt;&gt; b'\x05'
</code></pre>
<p>;) guess that'll be better than messing around with strings</p>
<p>source: <a href="http://docs.python.org/3/library/stdtypes.html#binaryseq" rel="noreferrer">http://docs.python.org/3/library/stdtypes.html#binaryseq</a></p>
</div>
<div class="post-text" itemprop="text">
<p>from int to byte:</p>
<pre><code>bytes_string = int_v.to_bytes( lenth, endian )
</code></pre>
<p>where the lenth is 1/2/3/4...., and endian could be 'big' or 'little'</p>
<p>form bytes to int:</p>
<pre><code>data_list = list( bytes );
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x, you can convert an integer value (including large ones, which the other answers don't allow for) into a series of bytes like this:</p>
<pre><code>import math

x = 0x1234
number_of_bytes = int(math.ceil(x.bit_length() / 8))

x_bytes = x.to_bytes(number_of_bytes, byteorder='big')

x_int = int.from_bytes(x_bytes, byteorder='big')
x == x_int
</code></pre>
</div>
<span class="comment-copy"><code>bytes(str(n),"ascii")</code> is not backwards compatible, <code>bytes()</code> was introduced in python 3.x only.</span>
<span class="comment-copy">I realize that you are trying to be broad to keep it from being to specific, but it's hard to tell why you're trying to do this or what exactly you're trying to achieve.</span>
<span class="comment-copy">@AshwiniChaudhary, I tried it at <a href="http://www.trypython.org/#" rel="nofollow noreferrer">trypython.org/#</a>, because my current Python is 3.3, but I acknowledge that that's hardly conclusive.</span>
<span class="comment-copy">When <code>bytes</code> exists in 2, it's only an alias for <code>str</code>.  <code>bytearray</code> exists, though, and has a <code>bytearray(string, encoding[, errors]) -&gt; bytearray</code> call signature.</span>
<span class="comment-copy">I think what @IgnacioVazquez-Abrams meant was that a network protocol would be more likely to want binary <code>0x05</code> rather than ASCII <code>'5'</code>, but I know there are plenty of protocols that are text based. As for the double conversion to Unicode then raw bytes, it's eminently sensible when you've experienced the alternative. In Python 2 it's far too easy to get confused about whether you have a string of characters or a string of bytes and it leads to no end of bugs.</span>
<span class="comment-copy">This doesn't work for me. str(0x04).encode() gives me '4'. I expect b'\x04'.</span>
<span class="comment-copy">@Tolli then you misunderstood the question. The goal was to produce a byte string that represents the numeric value, not the character. I think you're looking for <code>chr(n)</code>.</span>
<span class="comment-copy">Ok. From the example in the question, it looks like you are right. Reading just the question, it's not coat exactly what is being asked. I actually don't want <code>chr(n)</code>, because my number may be greater than 255. The struct.pack answer below is what I wanted.</span>
<span class="comment-copy">The problem is that google searching sends you here when you are solving int to bytes, hence why I answered this question (I was trying to do what Tolli was doing). IMO These answers can easily co-exist here. Apparently <a href="http://stackoverflow.com/posts/14043886/timeline">all answers were downvoted</a> which I think was unnecessary - they're all helpful.</span>
<span class="comment-copy">The <code>.encode()</code> call here is effectively a no-op in Python 2, since the <code>str</code> type is already a bytes (not character text) type. But the answer still works fine.</span>
<span class="comment-copy">This doesn't work for large integers.</span>
<span class="comment-copy">works only if  <code>n</code> is in <code>&lt;0,255&gt;</code> range</span>
<span class="comment-copy">Nadu, I much prefer your answer: Comparing this answer with the one from @MarkRansom, the values returned are different: <code>print(str(8).encode()) #Prints b'8'</code> but <code>print(bytes([8]))</code> prints <code>b'\x08'</code></span>
<span class="comment-copy">@Startec indeed there is a difference: Try type( print(bytes([8])) ) and you get  &lt;class 'NoneType'&gt; while the same on ....encode() give you &lt;class 'bytes'&gt;.  First is a class and later a primitive. Both are functional identical. However in some situations only one of these may be accepted. Not yet encountered that in python. But recently I had struggle in C# with int and Integer. Only the later you can use in generics. Functions demanding 'primitive' int won't accept Integer. Convert int into Integer is 'costly'. So these are like two paths you can go either the primitive or the class one.</span>
<span class="comment-copy">That could cause you a problem if your "int" is greater than 255, because of course "bytes" would expect items smaller than one byte in its initialization list.</span>
