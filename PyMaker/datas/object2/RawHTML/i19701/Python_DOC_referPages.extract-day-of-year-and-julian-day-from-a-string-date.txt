<div class="post-text" itemprop="text">
<p>I have a string <code>"2012.11.07"</code> in python. I need to convert it to date object and then get an integer value of <em>day of year</em> and also <em>Julian day</em>. Is it possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you can convert it to a <a href="http://docs.python.org/library/datetime.html#datetime-objects"><code>datetime.datetime</code></a> object like this:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; fmt = '%Y.%m.%d'
&gt;&gt;&gt; s = '2012.11.07'
&gt;&gt;&gt; dt = datetime.datetime.strptime(s, fmt)
&gt;&gt;&gt; dt
datetime.datetime(2012, 11, 7, 0, 0)
</code></pre>
<p>Then you can use the methods on <code>datetime</code> to get what you want… except that <code>datetime</code> doesn't have the function you want directly, so you need to convert to a <a href="http://docs.python.org/2/library/time.html#time.struct_time">time tuple</a></p>
<pre><code>&gt;&gt;&gt; tt = dt.timetuple()
&gt;&gt;&gt; tt.tm_yday
312
</code></pre>
<p>The term "Julian day" has a few different meanings. If you're looking for <code>2012312</code>, you have to do that indirectly, e.g., one of the following.</p>
<pre><code>&gt;&gt;&gt; int('%d%03d' % (tt.tm_year, tt.tm_yday))
2012312
&gt;&gt;&gt; tt.tm_year * 1000 + tt.tm_yday
2012312
</code></pre>
<p>If you're looking for a different meaning, you should be able to figure it out from here. For example, if you want the "days since 1 Jan 4713 BC" meaning, and you have a formula that requires Gregorian year and day in year, you've got those two values above to plug in. (If you have a formula that takes Gregorian year, month, and day, you don't even need the <code>timetuple</code> step.) If you can't work out where to go from there, ask for further details.</p>
<p>If you don't have a formula—and maybe even if you already do—your best bet is probably to look around PyPI and ActiveState for pre-existing modules. For example, a quick search turned up something called <a href="http://pypi.python.org/pypi/jdcal/1.0"><code>jdcal</code></a>. I'd never seen it before, but a quick <code>pip install jdcal</code> and a brief skim of the readme, and I was able to do this:</p>
<pre><code>&gt;&gt;&gt; sum(jdcal.gcal2jd(dt.year, dt.month, dt.day))
2456238.5
</code></pre>
<p>That's the same result that the USN <a href="http://aa.usno.navy.mil/data/docs/JulianDate.php">Julian date converter</a> gave me.</p>
<p>If you want integral Julian day, instead of fractional Julian date, you have to decide which direction you want to round—toward 0, toward negative infinity, rounding noon up to the next day, rounding noon toward even days, etc. (Note that Julian date is defined as starting since noon on 1 Jan 4713BC, so half of 7 Nov 2012 is 2456238, the other half is 2456239, and only you know which one of those you want…) For example, to round toward 0:</p>
<pre><code>&gt;&gt;&gt; int(sum(jdcal.gcal2jd(dt.year, dt.month, dt.day)))
2456238
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To simplify the initial steps of abarnert's answer:</p>
<pre><code>from dateutil import parser
s = '2012.11.07'
dt = parser.parse(s)
</code></pre>
<p>then apply the rest of abanert's answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>This functionality (conversion of date strings to Julian date/time) is also present in the <a href="http://www.astropy.org/" rel="nofollow">astropy</a> module. Please refer to <a href="http://astropy.readthedocs.org/en/latest/time/" rel="nofollow">their documentation</a> for complete details. The astropy implementation is especially handy for easy conversions to Julian <em>time</em>, as opposed to just the Julian <em>date</em>.</p>
<p>Example solution for the original question:</p>
<pre><code>&gt;&gt;&gt; import astropy.time
&gt;&gt;&gt; import dateutil.parser

&gt;&gt;&gt; dt = dateutil.parser.parse('2012.11.07')
&gt;&gt;&gt; time = astropy.time.Time(dt)
&gt;&gt;&gt; time.jd
2456238.5
&gt;&gt;&gt; int(time.jd)
2456238
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For quick computations, you could find day of year and <em>Julian day number</em> using only stdlib <code>datetime</code> module:</p>
<pre><code>#!/usr/bin/env python3
from datetime import datetime, timedelta

DAY = timedelta(1)
JULIAN_EPOCH = datetime(2000, 1, 1, 12) # noon (the epoch name is unrelated)
J2000_JD = timedelta(2451545) # julian epoch in julian dates

dt = datetime.strptime("2012.11.07", "%Y.%m.%d") # get datetime object
day_of_year = (dt - datetime(dt.year, 1, 1)) // DAY + 1 # Jan the 1st is day 1
julian_day = (dt.replace(hour=12) - JULIAN_EPOCH + J2000_JD) // DAY
print(day_of_year, julian_day)
# 312 2456239
</code></pre>
<p>Another way to get <code>day_of_year</code>:</p>
<pre><code>import time

day_of_year = time.strptime("2012.11.07", "%Y.%m.%d").tm_yday
</code></pre>
<p><code>julian_day</code> in the code above is <a href="http://www.iers.org/nn_10910/IERS/EN/Science/Recommendations/resolutionB1.html" rel="nofollow noreferrer">"the Julian day number associated with the solar day -- the number assigned to a day in a continuous count of days beginning with the Julian day number 0 assigned to the day starting at Greenwich mean noon on 1 January 4713 BC, Julian proleptic calendar -4712"</a>.</p>
<p>The <a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer"><code>time</code> module documentation</a> uses the term <em>"Julian day"</em> differently:</p>
<blockquote>
<p><code>Jn</code> The Julian day n (1 &lt;= n &lt;= 365). Leap days are not counted, so in
  all years February 28 is day 59 and March 1 is day 60.<br/>
<code>n</code> The
  zero-based Julian day (0 &lt;= n &lt;= 365). Leap days are counted, and it
  is possible to refer to February 29.</p>
</blockquote>
<p>i.e., the zero-based Julian day is <code>day_of_year - 1</code> here. And the first one (<code>Jn</code>) is <code>day_of_year - (calendar.isleap(dt.year) and day_of_year &gt; 60)</code> -- the days starting with March 1 are shifted to exclude the leap day.</p>
<p>There is also a related term: <em>Julian date</em>.
<em>Julian day number</em> is an integer. <em>Julian date</em> is inherently fractional: <a href="http://www.iers.org/nn_10910/IERS/EN/Science/Recommendations/resolutionB1.html" rel="nofollow noreferrer">"The <em>Julian Date (JD)</em> of any instant is the <em>Julian day number</em> for the preceding noon plus the fraction of the day since that instant."</a></p>
<p>In general, to avoid handling edge cases yourself, use a library to compute Julian day as <a href="https://stackoverflow.com/a/13943108/4279">suggested by @abarnert</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get the Julian day, use the <code>datetime.date.toordinal</code> method and add a fixed offset.</p>
<p>The Julian day is the number of days since January 1, 4713 BC at 12:00 in the proleptic Julian calendar, or November 24, 4714 BC at 12:00 in the <a href="https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar" rel="nofollow">proleptic Gregorian calendar</a>. Note that each Julian day starts at noon, not midnight.</p>
<p>The <code>toordinal</code> function returns the number of days since December 31, 1 BC at 00:00 in the proleptic Gregorian calendar (in other words, January 1, 1 AD at 00:00 is the start of day 1, not day 0). Note that 1 BC directly precedes 1 AD, there was no year 0 since the number zero wasn't invented until many centuries later.</p>
<pre><code>import datetime

datetime.date(1,1,1).toordinal()
# 1
</code></pre>
<p>Simply add 1721424.5 to the result of <code>toordinal</code> to get the Julian day.</p>
<p>Another answer already explained how to parse the string you started with and turn it into a <code>datetime.date</code> object. So you can find the Julian day as follows:</p>
<pre><code>import datetime

my_date = datetime.date(2012,11,7)   # time = 00:00:00
my_date.toordinal() + 1721424.5
# 2456238.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the above examples, here is the one liner (non-Julian):</p>
<pre><code>import datetime

doy = datetime.datetime.strptime('2014-01-01', '%Y-%m-%d').timetuple().tm_yday
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def JulianDate_to_date(y, jd):
    month = 1
    while jd - calendar.monthrange(y,month)[1] &gt; 0 and month &lt;= 12:
        jd = jd - calendar.monthrange(y,month)[1]
        month += 1
    date = datetime.date(y,month,jd).strftime("%m/%d/%Y")
    return date
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="http://adsabs.harvard.edu/abs/1979ApJS...41..391V" rel="nofollow noreferrer">this article</a> there is an unpublished one-line formula created by Fliegel and Van Flandern to calculate an Gregorian Date to an Julian Date:</p>
<pre><code>JD = 367 * year - 7 * (year + (month + 9)/12)/4 - 3 * ((year + (month - 9)/7)/100 + 1)/4 + 275 * month/9 + day + 1721029
</code></pre>
<p>This was compacted by P. M. Muller and R. N. Wimberly of the Jet Propulsion Laboratory, Pasadena, California for dates after March of 1900 to:</p>
<pre><code>JD = 367 * year - 7 * (year + (month + 9)/12)/4 + 275 * month/9 + day + 1721014
</code></pre>
<p>These formulas are off by 0.5, so just subtract 0.5 from the formulas.</p>
<p>Use some string manupulation to actually extract the data and you will be good</p>
<pre><code>&gt;&gt;&gt; year, month, day = map(int,"2018.11.02".split("."))
&gt;&gt;&gt; 367 * year - 7 * (year + (month + 9)/12)/4 + 275 * month/9 + day + 1721014 - 0.5
2458424.5
</code></pre>
</div>
<span class="comment-copy">It's not called Julian Day if you just want the day number for the year. <a href="https://en.wikipedia.org/wiki/Ordinal_date" rel="nofollow noreferrer">en.wikipedia.org/wiki/Ordinal_date</a></span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/25831416/4279">julian <i>day</i> is an integer number</a>. gcal2jd() returns julian <i>date</i>.</span>
<span class="comment-copy">@J.F.Sebastian: Read the linked docs. "Julian dates are stored in two floating point numbers (double)." <code>jdcal</code> is returning fractional Julian days (assuming noon if given only a date). If you want to argue that these shouldn't be called Julian days but something else, take it up with the author of the module.</span>
<span class="comment-copy">it is your responsibility to make sure that the module <i>you</i> suggested returns what OP asks.</span>
<span class="comment-copy">@J.F.Sebastian: Fine, I've added the code to call <code>int</code>. But the point isn't to give the OP code that he can use without thinking, or to recommend a specific library; I used <code>gdcal</code> as an example of the kinds of libraries you can find with a quick google, PyPI, or ActiveState search; it's still up to the OP to do that search, evaluate the libraries, and pick the one he wants.</span>
<span class="comment-copy">it might be better to assume noon given a date instead of midnight of the previous day i.e., it should be 39 as in <a href="http://stackoverflow.com/a/25831416/4279">my answer</a>, not 38. Your point is valid but wouldn't it be nicer to provide the research results in the answer  if possible to avoid forcing people to duplicate it.</span>
<span class="comment-copy">which version of python is this? tm_yday is not there for me @ 2.7</span>
<span class="comment-copy">it is for me. Did you forget to convert to a timetuple? the dt object does not have a member tm_yday, while the time.struct_time object that you get from dt.timetuple() has that member.</span>
