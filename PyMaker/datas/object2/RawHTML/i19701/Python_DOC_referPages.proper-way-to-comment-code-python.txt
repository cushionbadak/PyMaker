<div class="post-text" itemprop="text">
<p>I was reading PEP8 and some questions on stackoverflow, but was wondering about spaces between comments:</p>
<p>lets say I have this code:</p>
<pre><code>class MyBrowser(QWebPage):
    ''' Settings for the browser.'''

    def __init__(self):
        QWebPage.__init__(self)
        # Specifies whether images are automatically loaded in web pages.
        self.settings().setAttribute(QWebSettings.AutoLoadImages, True)

    def userAgentForUrl(self, url):
        ''' Returns a User Agent that will be seen by the website. '''
        return "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.15 (KHTML, like Gecko) Chrome/24.0.1295.0 Safari/537.15"
</code></pre>
<p>What is the most pythonic way of putting blank lines between comments and the actual code? I want to show my program to some experts. And want my code look more professional.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know if this represents the "community standard" but here are <a href="https://google.github.io/styleguide/pyguide.html?showone=Comments#Comments" rel="nofollow">Google's Python style guides</a> (as they relate to comments).  Specifically classes:</p>
<pre><code>class SampleClass(object):
    """Summary of class here.

    Longer class information....
    Longer class information....

    Attributes:
        likes_spam: A boolean indicating if we like SPAM or not.
        eggs: An integer count of the eggs we have laid.
    """

    def __init__(self, likes_spam=False):
        """Inits SampleClass with blah."""
        self.likes_spam = likes_spam
        self.eggs = 0

    def public_method(self):
        """Performs operation blah."""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When in doubt, look at the standard library for a model.</p>
<p>Here's an excerpt from the <em>timeit</em> module (written by Guido van Rossum himself):</p>
<pre><code>def print_exc(self, file=None):
    """Helper to print a traceback from the timed code.

    Typical use:

        t = Timer(...)       # outside the try/except
        try:
            t.timeit(...)    # or t.repeat(...)
        except:
            t.print_exc()

    The advantage over the standard traceback is that source lines
    in the compiled template will be displayed.

    The optional file argument directs where the traceback is
    sent; it defaults to sys.stderr.
    """
    import linecache, traceback
    if self.src is not None:
        linecache.cache[dummy_src_name] = (len(self.src),
                                           None,
                                           self.src.split("\n"),
                                           dummy_src_name)
    # else the source is already stored somewhere else

    traceback.print_exc(file=file)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the Zen of Python: "Readability counts." Whatever <strong>your team</strong> finds to be most readable is what I would do.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of giving snippets look at the most used cpython using sphinx and compare the doc to the code.  <br/>
<a href="https://docs.python.org/3/library/difflib.html" rel="nofollow noreferrer">https://docs.python.org/3/library/difflib.html</a> <br/>
<a href="https://github.com/python/cpython/blob/3.7/Lib/difflib.py" rel="nofollow noreferrer">https://github.com/python/cpython/blob/3.7/Lib/difflib.py</a> <br/><br/>
The docs are never out of sync since the annotations sit right inside the code.</p>
</div>
<span class="comment-copy">i think your current spacing is fine ... also what constitutes experts?</span>
<span class="comment-copy">By experts, I mean hiring manager in some company</span>
<span class="comment-copy">they may not be experts.... often times employers are willing to mold you into what they want... what they want to see is that you have a grasp on python concepts and principals ... and that you are aware of some of the differences between compiled vs Interpreted etc.</span>
<span class="comment-copy">generally ,however sometimes its what the python populace(as opposed to you the individual) finds more readable  (I gave you +1 though since in general this is true)</span>
<span class="comment-copy">I often find my code less readable without comments, since I already know what it does, but I feel this doesn't mean I shouldn't include comments.</span>
<span class="comment-copy">I don't agree that what <i>you</i> prefer is best. I've worked with people who followed weird standards (three space indentation, for example). They loved their code. No one else in the group could stand to look at it.</span>
<span class="comment-copy">TBH I rarely include comments in my python ... I use self documenting variable/function names and that is often sufficient ... that said i probably would not showcase my commentless code ..</span>
<span class="comment-copy">Possibly...but how many of us <b>actually</b> have code that the python community at large has seen/will <b>ever</b> see? If I can read it and my coworkers aren't griping at me I find that to be sufficient. And yes, I've never met a programmer who didn't speak his mind to his coworkers :D</span>
