<div class="post-text" itemprop="text">
<p>I'm running pylint on some code, and receiving the error "Too few public methods (0/2)". What does this message mean? The <a href="http://docs.pylint.org/features.html#id22" rel="noreferrer">pylint docs</a> are not helpful: </p>
<blockquote>
<p>Used when class has too few public methods, so be sure it's really worth it.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The error basically says that classes aren't meant to <em>just</em> store data, as you're basically treating the class as a dictionary. Classes should have at least a few methods to operate on the data that they hold.</p>
<p>If your class looks like this:</p>
<pre><code>class MyClass(object):
    def __init__(self, foo, bar):
        self.foo = foo
        self.bar = bar
</code></pre>
<p>Consider using a dictionary or a <code>namedtuple</code> instead. Although if a class seems like the best choice, use it. pylint doesn't always know what's best.</p>
<p>Do note that <code>namedtuple</code> is immutable and the values assigned on instantiation cannot be modified later.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are extending a class, then my suggestion is to systematically disable this warning and move on, e.g., in the case of Celery tasks:</p>
<pre><code>class MyTask(celery.Task):  # pylint: disable=too-few-public-methods                                                                                   
    """base for My Celery tasks with common behaviors; extends celery.Task

    ...             
</code></pre>
<p>Even if you are only extending a single function, you definitely need a class to make this technique function, and extending is definitely better than hacking on the third-party classes!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is another case of <code>pylint</code>'s blind rules.</p>
<p>"Classes are not meant to store data" - this is a false statement. Dictionaries are not good for everything. A data member of a class is something meaningful, a dictionary item is something optional. Proof: you can do <code>dictionary.get('key', DEFAULT_VALUE)</code> to prevent a <code>KeyError</code>, but there is no simple <code>__getattr__</code> with default.</p>
<h1>EDIT - recommended ways for using structs</h1>
<p>I need to update my answer. Right now - if you need a <code>struct</code>, you have two great options:</p>
<h2>a) Just use <code>attrs</code></h2>
<p>These is a library for that:</p>
<p><a href="https://www.attrs.org/en/stable/" rel="nofollow noreferrer">https://www.attrs.org/en/stable/</a></p>
<pre><code>import attr

@attr.s
class MyClass(object):  # or just MyClass: for Python 3
    foo = attr.ib()
    bar = attr.ib()
</code></pre>
<p>What you get extra: not writing constructors, default values, validation, <code>__repr__</code>, read-only objects (to replace <code>namedtuples</code>, even in Python 2) and more.</p>
<h2>b) Use <code>dataclasses</code> (Py 3.7+)</h2>
<p>Following hwjp's comment, I also recommend <code>dataclasses</code>:</p>
<p><a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer">https://docs.python.org/3/library/dataclasses.html</a></p>
<p>This is almost as good as <code>attrs</code>, and is a standard library mechanism ("batteries included"), with no extra dependencies, except Python 3.7+.</p>
<h1>Rest of Previous answer</h1>
<p><code>NamedTuple</code> is not great - especially before python 3's <code>typing.NamedTuple</code>:
<a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html#typing.NamedTuple</a>
- you definitely should check out the "class derived from <code>NamedTuple</code>" pattern.
Python 2 - <code>namedtuples</code> created from string descriptions - is ugly, bad and "programming inside string literals" stupid.</p>
<p>I agree with the two current answers ("consider using something else, but pylint isn't always right" - the accepted one, and "use pylint suppressing comment"), but I have my own suggestion.</p>
<p>Let me point this out one more time: Some classes are meant <em>just</em> to store data.</p>
<p>Now the option to also <em>consider</em> - use <code>property</code>-ies.</p>
<pre><code>class MyClass(object):
    def __init__(self, foo, bar):
        self._foo = foo
        self._bar = bar

    @property
    def foo(self):
        return self._foo

    @property
    def bar(self):
        return self._bar
</code></pre>
<p>Above you have read-only properties, which is OK for Value Object (e.g. like those in Domain Driven Design), but you can also provide setters - this way your class will be able to take responsibility for the fields which you have - for example to do some validation etc. (if you have setters, you can assign using them in the constructor, i.e. <code>self.foo = foo</code> instead of direct <code>self._foo = foo</code>, but careful, the setters may assume other fields to be initialized already, and then you need custom validation in the constructor).</p>
</div>
<div class="post-text" itemprop="text">
<p>I added an extra method to my class</p>
<pre class="lang-py prettyprint-override"><code>def __str__(self):
    return self.__class__.__name__
</code></pre>
<p>problem solved</p>
</div>
<span class="comment-copy">What does your class look like? Does the class do anything other than store data?</span>
<span class="comment-copy">All the class does is store data.</span>
<span class="comment-copy">Well, there's your problem. Classes aren't meant to store data. That's what data structures like dictionaries and lists are for.</span>
<span class="comment-copy">Interesting, thanks! The pylint error message could be made more useful. Anyway, feel free to turn your comment into an answer and I'll approve.</span>
<span class="comment-copy">But where's the definition of "few"? I got exactly one method. That's the reason the class exists. How does pylint define "few"? More than 2? Why?</span>
<span class="comment-copy">+1 for "pylint doesn't know what's best" - use your own judgement but as a rule, if what you need is a "struct", use a <code>dict</code> or <code>namedtuple</code>. Use a class when you want to add some logic to your object (for example, you want stuff to happen when it is created, you need some special things to happen when its added, you want o perform some operations on it, control how its displayed, etc.)</span>
<span class="comment-copy">Thanks for the detailed responses! My use case is similar to what Burhan mentioned, I'm doing some processing on the data when its created.</span>
<span class="comment-copy">This error does not make sense if you have Meta (metaclass) inside you class definition.</span>
<span class="comment-copy"><code>namedtuple</code> sucks - on top of having ugly syntax, you can't document it or provide default values easily.</span>
<span class="comment-copy">Every time I've used <code>namedtuple</code> I've regretted the decision. It's inconsistent to allow both named access and indexed access attributes.</span>
<span class="comment-copy">Having this diable, pre-commit now gives me: Bad option value 'too-few-public-method' (bad-option-value)</span>
<span class="comment-copy">Did you include the 's' on methods?  Your bad-option-value message does not have it.</span>
<span class="comment-copy">Probably a better way to disable this is to set <code>min-public-methods=0</code> in the <code>[BASIC]</code> section of the config file. This lets you put it on a separate line from all your <code>disable=</code> stuff (in <code>[MESSAGE CONTROL]</code>) which I find makes easier adding detailed comments about why you enabled and disabled things along with the config change.</span>
<span class="comment-copy">In Python 3.7 and above, dataclasses provide a good solution, addressing some of the ugliness of namedtuples, and they're <i>perfect</i> for DDD Value Objects.</span>
<span class="comment-copy">I agree, and from 2020 on it's the standard way to go. To have a wide-version-range mechanism (2.7, 3.3+ if I remember) you could use the <code>attrs</code> library, which was actually the blueprint for creating the <code>dataclasses</code> module.</span>
