<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong><br/>
<a href="https://stackoverflow.com/questions/2988017/string-comparison-in-python-is-vs">String comparison in Python: is vs. ==</a> </p>
</blockquote>
<pre><code>algorithm = str(sys.argv[1])
print(algorithm)
print(algorithm is "first")
</code></pre>
<p>I'm running it from the command line with the argument <code>first</code>, so why does that code output:</p>
<pre><code>first
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://docs.python.org/3/reference/expressions.html#is" rel="noreferrer">the Python documentation</a>: </p>
<blockquote>
<p>The operators is and is not test for object identity: x is y is true if and only if x and y are the same object.</p>
</blockquote>
<p>This means it doesn't check if the values are the same, but rather checks if they are in the same memory location. For example:</p>
<pre><code>&gt;&gt;&gt; s1 = 'hello everybody'
&gt;&gt;&gt; s2 = 'hello everybody'
&gt;&gt;&gt; s3 = s1
</code></pre>
<p>Note the different memory locations:</p>
<pre><code>&gt;&gt;&gt; id(s1)
174699248
&gt;&gt;&gt; id(s2)
174699408
</code></pre>
<p>But since <code>s3</code> is equal to <code>s1</code>, the memory locations are the same:</p>
<pre><code>&gt;&gt;&gt; id(s3)
174699248
</code></pre>
<p>When you use the <code>is</code> statement:</p>
<pre><code>&gt;&gt;&gt; s1 is s2
False
&gt;&gt;&gt; s3 is s1
True
&gt;&gt;&gt; s3 is s2
False
</code></pre>
<p>But if you use the equality operator:</p>
<pre><code>&gt;&gt;&gt; s1 == s2
True
&gt;&gt;&gt; s2 == s3
True
&gt;&gt;&gt; s3 == s1
True
</code></pre>
<p><strong>Edit:</strong> just to be confusing, there is an optimisation (in CPython anyway, I'm not sure if it exists in other implementations) which allows short strings to be compared with <code>is</code>:</p>
<pre><code>&gt;&gt;&gt; s4 = 'hello'
&gt;&gt;&gt; s5 = 'hello'
&gt;&gt;&gt; id(s4)
173899104
&gt;&gt;&gt; id(s5)
173899104
&gt;&gt;&gt; s4 is s5
True
</code></pre>
<p>Obviously, this is not something you want to rely on. Use the appropriate statement for the job - <code>is</code> if you want to compare identities, and <code>==</code> if you want to compare values.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want:</p>
<pre><code>algorithm = str(sys.argv[1])
print(algorithm)
print(algorithm == "first")
</code></pre>
<p><code>is</code> checks for object identity (think memory address).
But in your case the the objects have the same "value", but are not the same objects.</p>
<p>Note that <code>==</code> is weaker than <code>is</code>.
This means that if <code>is</code> returns True, then <code>==</code> will also return True, but the reverse is not always true.</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically, <code>is</code> checks object's address (identity), not value,. For value comparison use <code>==</code> operator</p>
</div>
<span class="comment-copy">other duplicate: <a href="http://stackoverflow.com/questions/1504717/why-does-comparing-strings-in-python-using-either-or-is-sometimes-produce" title="why does comparing strings in python using either or is sometimes produce">stackoverflow.com/questions/1504717/â€¦</a></span>
<span class="comment-copy">That edit was really crucial, because I tested it and was thinking, wtf? Nice answer.</span>
<span class="comment-copy">Haha an upvote just brought me back to this question two years later and it's hard to believe how far I've come since then.</span>
<span class="comment-copy">What's the difference?</span>
<span class="comment-copy"><code>==</code> tests if the comparands have the same value, <code>is</code> tests if they have the same <code>id</code> (roughly equivalent to memory location).</span>
<span class="comment-copy">From a devil's advocate POV feel free to explain why <code>a = 'a'; b='a'; a is b"</code> is true</span>
<span class="comment-copy">In python ascii strings of size 1 (well and 0 of course) are stored internally and then shared among variables, like integers. So <code>a</code> and <code>b</code> are pointing to the same place in memory and therefore identical</span>
