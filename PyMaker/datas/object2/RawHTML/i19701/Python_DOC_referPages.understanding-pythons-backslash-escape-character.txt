<div class="post-text" itemprop="text">
<p>My script creates files to export by concatenating a file path with a file type suffix. For example,</p>
<pre><code>int = 3
print r"C:\Test\\" + str(int) + ".jpg"
</code></pre>
<p>This returns <code>C:\Test\\3.jpg</code></p>
<p>I thought that because I included the 'r' at the beginning, I wouldn't need a double backslash at the end, because it'd be treated as a raw string. But the following doesn't work:</p>
<pre><code>int = 3
print r"C:\Test\" + str(int) + ".jpg"
</code></pre>
<p>...presumably because Python is seeing an escape character before the end quote. So what's the point of the 'r' then? And while my files get saved in the right place when exported, I don't like that the print command gives me two backslashes after Test (eg C:\Test\3.jpg) when it just gives me one after C:</p>
<p>How can I get a single backslash in my file paths please?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't try and use string manipulation to build up file paths. Python has the <code>os.path</code> module for that:</p>
<pre><code>import os.path
i = 3
print os.path.join("C:\Test", str(i) + ".jpg")
</code></pre>
<p>This will ensure the path is constructed properly.</p>
<p>(Also, don't call an integer <code>int</code>, as it shadows the built-in <code>int()</code> function.)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Even in a raw string, string quotes can be escaped with a backslash, but the backslash remains in the string; for example, <code>r"\""</code> is a valid string literal consisting of two characters: a backslash and a double quote; <code>r"\"</code> is not a valid string literal (even a raw string cannot end in an odd number of backslashes). Specifically, <em>a raw string cannot end in a single backslash</em> (since the backslash would escape the following quote character). Note also that a single backslash followed by a newline is interpreted as those two characters as part of the string, <em>not</em> as a line continuation.</p>
</blockquote>
<p><a href="http://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals">Source</a>.</p>
<p>So, it wonâ€™t work like that. If you want to use a raw string, but have a trailing backslash, you need to add that separately afterwards:</p>
<pre><code>&gt;&gt;&gt; r'C:\Test' + '\\'
'C:\\Test\\'
</code></pre>
<p>Alternatively, in your case, you can also just use string formatting to insert your values:</p>
<pre><code>&gt;&gt;&gt; r'C:\Test\{0}.jpg'.format(i)
'C:\\Test\\1.jpg'
</code></pre>
<p>Or, you use <code>os.path.join</code> to build the path:</p>
<pre><code>&gt;&gt;&gt; os.path.join(r'C:\Test', str(i) +'.jpg')
'C:\\Test\\1.jpg'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>first, don't call an integer int, as it shadows the built-in int() function.<br/>
<strong>use os.path is a very clever way</strong>:</p>
<pre><code>import os.path
i = 3
print os.path.join("C:\Test", str(i) + ".jpg")
#C:\Test\3.jpg
</code></pre>
<p>OR U <strong>must</strong> use strings to  manipulation to build up file paths:</p>
<pre><code>_prefix = 'C:\Test'
i = 3
print _prefix + '\\' + str(i) + '.jpg'
#C:\Test\3.jpg
</code></pre>
</div>
<span class="comment-copy">Why not forward slashes?</span>
