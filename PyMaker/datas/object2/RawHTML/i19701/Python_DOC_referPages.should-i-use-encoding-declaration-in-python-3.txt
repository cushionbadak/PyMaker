<div class="post-text" itemprop="text">
<p>Python 3 uses UTF-8 encoding for source-code files by default. Should I still use the encoding declaration at the beginning of every source file? Like <code># -*- coding: utf-8 -*-</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Because the default <em>is</em> UTF-8, you only need to use that declaration when you deviate from the default, or if you rely on other tools (like your IDE or text editor) to make use of that information.</p>
<p>In other words, <em>as far as Python is concerned</em>, only when you want to use an encoding that differs do you have to use that declaration.</p>
<p>Other tools, such as your editor, can support similar syntax, which is why the <a href="https://www.python.org/dev/peps/pep-0263/" rel="noreferrer">PEP 263 specification</a> allows for considerable flexibility in the syntax (it must be a comment, the text <code>coding</code> must be there, followed by either a <code>:</code> or <code>=</code> character and optional whitespace, followed by a recognised codec).</p>
<p>Note that it only applies to how Python <em>reads the source code</em>. It doesn't apply to executing that code, so not to how printing, opening files, or any other I/O operations translate between bytes and Unicode. For more details on Python, Unicode, and encodings, I strongly urge you to read the <a href="http://docs.python.org/3/howto/unicode.html" rel="noreferrer">Python Unicode HOWTO</a>, or the  very thorough <a href="https://nedbatchelder.com/text/unipain.html" rel="noreferrer"><em>Pragmatic Unicode</em> talk</a> by Ned Batchelder.</p>
</div>
<div class="post-text" itemprop="text">
<h2>No, if:</h2>
<ul>
<li>entire project use only the <code>UTF-8</code>, which is a default.</li>
<li>and you're sure your IDE tool doesn't need that encoding declaration in each file.</li>
</ul>
<h2>Yes, if</h2>
<ul>
<li>your project relies on different encoding</li>
<li>or relies on many encodings.</li>
</ul>
<p>For multi-encodings projects:</p>
<blockquote>
<p>If some files are encoded in the <code>non-utf-8</code>, then even for these
  encoded in <code>UTF-8</code> you should add encoding declaration too, because
  the golden rule is <code>Explicit is better than implicit.</code></p>
</blockquote>
<h2>Reference:</h2>
<ul>
<li>PyCharm doesn't need that declaration:</li>
</ul>
<p><a href="https://www.jetbrains.com/help/pycharm/configuring-individual-file-encoding.html" rel="nofollow noreferrer">configuring encoding for specific file in pycharm</a></p>
<ul>
<li>vim doesn't need that declaration, but:</li>
</ul>
<blockquote>
<pre><code># vim: set fileencoding=&lt;encoding name&gt; :
</code></pre>
</blockquote>
</div>
<span class="comment-copy">By default <i>for what</i>?</span>
<span class="comment-copy">Assumptions python language.</span>
<span class="comment-copy">That's obvious. I mean, for what purpose do you think UTF-8 encoding is assumed? There are tons of places where the question of encoding arises: File I/O, networking, other I/O, source code, numerous in-memory data structure, etc.</span>
<span class="comment-copy">I mean just how Python reads the source code - @martijn-pieters explained it to me.</span>
<span class="comment-copy">Okay, I just wanted to make sure you're not confusing that with other places where encoding matters.</span>
<span class="comment-copy">The <code># -*- coding: utf-8 -*-</code> may still be useful for some editors to switch to the expected encoding when editing the source file.</span>
<span class="comment-copy">@pepr A Byte Order Mark could do the same, no?</span>
<span class="comment-copy">@endolith: the UTF-8 BOM is an abomination on this earth brought forth by Microsoft.. See <a href="https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8" rel="nofollow noreferrer">en.wikipedia.org/wiki/Byte_order_mark#UTF-8</a></span>
<span class="comment-copy">@MartijnPieters Your link doesn't seem to agree with you</span>
<span class="comment-copy">@endolith: no, the WP article only summarises the background, it is my own opinion that it is an abomination. The point of a BOM is to record the byte order (hence the name, Byte Order Mark). There is no byte order confusion in UTF-8, it only has that function in UTF-16 and UTF-32. The value is already a re-purposed zero-width no-break space character (handy, as accidental printing then ends up with entirely invisible output), re-using that to be a magic constant is wrong, in my view.</span>
