<div class="post-text" itemprop="text">
<p>So I am in the process of learning python and I ran into this code that is confusing me. </p>
<pre><code>var = 95
for items in range(0,100):
    if var &lt; 10:
        continue
    elif var == 10:
        print("hit")
    elif var &gt; 10:
        print("passed")
    var = var + 1
</code></pre>
<p>I don't understand why it doesn't just print "passed" 5 times... instead it prints it like 100 times.</p>
<p>What exactly is continue doing? If I change var to like (3) will it just "continue" to the next code block?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>continue</code> continues to the next loop iteration.  See <a href="http://docs.python.org/3/reference/simple_stmts.html#the-continue-statement">the documentation</a>.</p>
<p>However, in this case it doesn't matter, since the <code>oontinue</code> will never be reached.  <code>var</code> starts at 95 and can only increase, so it will never be less than 10.</p>
<p>This code is a bit strange because only the last <code>elif</code> will ever execute.  Perhaps you meant to use <code>var</code> somewhere in the loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>As BrenBarn says, <code>continue</code> just skips the rest of the loop and goes on to the next iteration.</p>
<p>But it doesn't matter when <code>var</code> starts at 95, because that code never gets reached. Let's trace through and see what happens:</p>
<pre><code>var = 95
First loop, items = 0:
   since var (95) &gt; 10:
       print("passed")
   var = var + 1 = 96
Next loop, items = 1
   since var (96) &gt; 10:
       print("passed")
   var = var + 1 = 97
...
100th loop, items = 99
   since var (194) &gt; 10:
       print("passed")
   var = var + 1 = 195
</code></pre>
<blockquote>
<p>If I change var to like (3) will it just "continue" to the next code block?</p>
</blockquote>
<p>No, it continues to the next iteration of the <code>while</code> loopâ€”meaning it skips over the <code>var = var + 1</code> part. If you want to break out of the loop and go to the next code block, that's <code>break</code> rather than <code>continue</code>.</p>
<p>Now, let's trace through what happens if you start with 3:</p>
<pre><code>var = 3
First loop, items = 0:
   since var (3) &lt; 10:
       continue # skips to the next loop iteration
Second loop, items = 1:
   since var (3) &lt; 10:
       continue # skips to the next loop iteration
...
Last loop, items = 99:
   since var (3) &lt; 10:
       continue # skips to the next loop iteration
</code></pre>
<p>Because of the <code>continue</code>, it never gets to the <code>var = var + 1</code>, so it just loops 100 times without doing anything.</p>
<p>Which means if you tried to test it with, say, a <code>print(var)</code> after the loop, it would look an awful lot like it just skipped to the next block of code. But if you put a <code>print(items)</code> there, you'll see that it's 99, not 0. Or, if you <code>print</code> something before <code>continue</code>, you'll see it happen 100 times.</p>
</div>
<div class="post-text" itemprop="text">
<p>This example is a little weird because you are using var and items differently.  Let me rewrite the example to be a little more clear.</p>
<pre><code>for i in range(0,100):

    # If i is less than 10, do nothing.
    if i &lt; 10:
        continue

    # If i equals 10, print "hit"
    if i == 10:
        print "hit"

    # If i is greater than 10, print "passed"
    if i &gt; 10:
        print "passed"
</code></pre>
<p>This will output:</p>
<pre><code>hit
passed
passed
... (repeat 87 more times)
</code></pre>
<p>The reason your example doesn't only run five times is because you aren't using the variable var in your for loop.  Because of the range(0, 100), your for loop is going to happen 100 times with the variable item being incremented each time.  </p>
<p>For it to happen five times as you would expect, you would need to use var in your range function as such:</p>
<pre><code>var = 95
for item in range(var, 100):
    if var &lt; 10:
        continue
    elif var == 10:
        print("hit")
    elif var &gt; 10:
        print("passed")
    var = var + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>continue</code> skips to the next iteration of the loop, without executing any other statements.</p>
<p>In this case, the <code>continue</code> statement won't be hit, since var starts at 95 and is only incremented.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suspect you meant to reset var to zero when it hit 100?</p>
</div>
<span class="comment-copy">did you mean to write <code>for items in range(var,100)</code>?</span>
<span class="comment-copy">@bamboon: That still wouldn't make much sense, since it would just be equivalent to <code>range(95, 100)</code>.  Modifying <code>var</code> inside the loop won't affect what it's set to when the <code>range</code> is initialized.</span>
<span class="comment-copy">@BrenBarn sure, but that would print "passed" 5 times.</span>
<span class="comment-copy">@bamboon: Heh, that is true.  I just mean the code would still be puzzling, since it would still include two unreachable conditions for no reason.</span>
<span class="comment-copy">I get what continue is doing now at least lol. I still dont understand why it doesn't print "passed" 5 times though. Is it not counting up from 95 to 100?</span>
<span class="comment-copy"><code>range(0,100)</code> is only 100 times, not 101. Also, it's not going to repeat 89 more times, but 87.</span>
<span class="comment-copy">You are correct on range(0,100) being 100, not 101.  For repeating 89 times I meant 89 total.  I changed it to read 87 more times to be more clear.</span>
