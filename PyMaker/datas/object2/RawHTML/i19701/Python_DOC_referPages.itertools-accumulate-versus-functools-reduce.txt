<div class="post-text" itemprop="text">
<p>In Python 3.3, <a href="http://docs.python.org/3.3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate()</code></a>, which normally repeatedly applies an addition operation to the supplied iterable, can now take a function argument as a parameter; this means it now overlaps with <a href="http://docs.python.org/3.3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code></a>. With a cursory look, the main differences between the two now would seem to be:</p>
<ol>
<li><code>accumulate()</code> defaults to summing but doesn't let you supply an extra initial condition explicitly while <code>reduce()</code> doesn't default to any method but does let you supply an initial condition for use with 1/0-element sequences, and</li>
<li><code>accumulate()</code> takes the iterable first while <code>reduce()</code> takes the function first.</li>
</ol>
<p>Are there any other differences between the two? Or is this just a matter of behavior of two functions with initially distinct uses beginning to converge over time?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that <code>accumulate</code> keeps the previous results, whereas <code>reduce</code> (which is known as fold in other languages) does not necessarily.</p>
<p>e.g. <code>list(accumulate([1,2,3], operator.plus))</code> would return <code>[1,3,6]</code> whereas a plain fold would return <code>6</code></p>
<p>Also (just for fun, don't do this) you can define <code>accumulate</code> in terms of <code>reduce</code></p>
<pre><code>def accumulate(xs, f):
    return reduce(lambda a, x: a + [f(a[-1], x)], xs[1:], [xs[0]]) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can see in the documentation what the difference is.  <code>reduce</code> returns a <em>single</em> result, the sum, product, etc., of the sequence.  <code>accumulate</code> returns an iterator over <em>all</em> the intermediate results.  Basically, <code>accumulate</code> returns an iterator over the results of each step of the <code>reduce</code> operation.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.accumulate</code>
 is like <code>reduce</code> but returns a generator* instead of a value. This generator can give you all the intermediate step values. So basically reduce gives you the last element of what accumulate will give you. </p>
<p>*A generator is like an iterator but can be iterated over only once. </p>
</div>
<span class="comment-copy">accumulate performs a scan <a href="https://en.wikipedia.org/wiki/Prefix_sum" rel="nofollow noreferrer">en.wikipedia.org/wiki/Prefix_sum</a> while reduce performs a fold <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)" rel="nofollow noreferrer">en.wikipedia.org/wiki/Fold_(higher-order_function)</a></span>
<span class="comment-copy">I guess you mean <code>operator.add</code>. Also, I don't know if the last snippet is really helpful: 1) it returns a list while <code>itertools.accumulate</code> returns an iterable, 2) it's terribly inefficient :)</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer">here</a> for a better implementation.</span>
