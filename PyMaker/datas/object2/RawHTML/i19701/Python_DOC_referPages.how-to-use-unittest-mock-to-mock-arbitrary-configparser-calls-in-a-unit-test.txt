<div class="post-text" itemprop="text">
<p>I'm trying to start using <a href="http://docs.python.org/3/library/unittest.mock.html" rel="nofollow">unittest.mock</a>'s action/assert pattern instead of <a href="https://code.google.com/p/pymox/wiki/MoxDocumentation" rel="nofollow">mox</a>'s record/replay/verify pattern.  </p>
<pre><code># foo.py
def op_1(param):
    pass

def op_2(param):
    pass

def do_stuff(param_1, param_2):
    global config
    global log
    try:
        op_1(param_1)
        if config.getboolean('section','option'):
            op_2(param_2)
    except:
         log.error("an error occured")
</code></pre>
<p>And, here's an example of what my unittest file looks like.</p>
<pre><code># test_foo.py
class TestFoo(unittest.TestCase):
    def test_do_stuff(self):
        param_1 = None
        param_2 = None
        foo.config = MagicMock()
        foo.config.getboolean('section','option', return_value = True)
        foo.op_1 = MagicMock()
        foo.op_2 = MagicMock()
        do_stuff(param_1, param_2)
        foo.op_1.assert_called_once_with(param_1)
        foo.op_2.assert_called_once_with(param_2)
        foo.config.getboolean.assert_called_once_with('section','option')
</code></pre>
<p>Does this test to verify the items below/am I using mock right?</p>
<ol>
<li>do_stuff call returned without error</li>
<li>op_1 was called with param_1</li>
<li>op_2 was called with param_2</li>
<li>config parser object had been used, but the specific calls don't matter</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>It turns out that I was using the <code>return_value</code> wrong.  </p>
<p>When I need a <code>mock.Mock</code> or <code>mock.MagicMock</code> object to return a value, it will need to always return that value, regardless of the arguments passed.  Though, it might be nice to give different behavior based on arguments passed (<em>possible feature request</em>).</p>
<p>The way I completed this was:</p>
<pre><code>foo.config.getboolean = mock.MagicMock(return_value = True)
</code></pre>
<p>And then I can do this:</p>
<pre><code>self.assertGreaterThan(len(foo.config.mock_calls), 0)
self.assertGreaterThan(len(foo.config.getboolean(str(),str())), 0)
</code></pre>
</div>
<span class="comment-copy">am glad <a href="http://meta.stackexchange.com/q/160401">this was reopened</a></span>
<span class="comment-copy">FWIW, if you set <code>side_effect</code> to a function, it will be invoked with the arguments to the mock. You can use that to provide different return values from different inputs. See the example for <code>side_effect</code> at the beginning of <a href="http://www.voidspace.org.uk/python/mock/#quick-guide" rel="nofollow noreferrer">voidspace.org.uk/python/mock/#quick-guide</a> for a good illustration.</span>
