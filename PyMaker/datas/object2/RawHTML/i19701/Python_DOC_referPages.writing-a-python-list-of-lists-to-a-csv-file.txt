<div class="post-text" itemprop="text">
<p>I have a long list of lists of the following form ---</p>
<pre><code>a = [[1.2,'abc',3],[1.2,'werew',4],........,[1.4,'qew',2]]
</code></pre>
<p>i.e. the values in the list are of different types -- float,int, strings.How do I write it into a csv file so that my output csv file looks like</p>
<pre><code>1.2,abc,3
1.2,werew,4
.
.
.
1.4,qew,2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's built-in <a href="http://docs.python.org/2/library/csv.html">CSV module</a> can handle this easily:</p>
<pre><code>import csv

with open("output.csv", "wb") as f:
    writer = csv.writer(f)
    writer.writerows(a)
</code></pre>
<p>This assumes your list is defined as <code>a</code>, as it is in your question. You can tweak the exact format of the output CSV via the various optional parameters to <code>csv.writer()</code> as documented in the library reference page linked above.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import csv
with open(file_path, 'a') as outcsv:   
    #configure writer to write standard csv file
    writer = csv.writer(outcsv, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
    writer.writerow(['number', 'text', 'number'])
    for item in list:
        #Write item to outcsv
        writer.writerow([item[0], item[1], item[2]])
</code></pre>
<p>official docs: <a href="http://docs.python.org/2/library/csv.html" rel="noreferrer">http://docs.python.org/2/library/csv.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>pandas</code>:</p>
<pre><code>In [1]: import pandas as pd

In [2]: a = [[1.2,'abc',3],[1.2,'werew',4],[1.4,'qew',2]]

In [3]: my_df = pd.DataFrame(a)

In [4]: my_df.to_csv('my_csv.csv', index=False, header=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using csv.writer in my very large list took quite a time. I decided to use pandas, it was faster and more easy to control and understand:</p>
<pre><code> import pandas

 yourlist = [[...],...,[...]]
 pd = pandas.DataFrame(yourlist)
 pd.to_csv("mylist.csv")
</code></pre>
<p>The good part you can change somethings to make a better csv file:</p>
<pre><code> yourlist = [[...],...,[...]]
 columns = ["abcd","bcde","cdef"] #a csv with 3 columns
 index = [i[0] for i in yourlist] #first element of every list in yourlist
 not_index_list = [i[1:] for i in yourlist]
 pd = pandas.DataFrame(not_index_list, columns = columns, index = index)

 #Now you have a csv with columns and index:
 pd.to_csv("mylist.csv")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If for whatever reason you wanted to do it manually (without using a module like <code>csv</code>,<code>pandas</code>,<code>numpy</code> etc.):</p>
<pre><code>with open('myfile.csv','w') as f:
    for sublist in mylist:
        for item in sublist:
            f.write(item + ',')
        f.write('\n')
</code></pre>
<p>Of course, rolling your own version can be error-prone and inefficient ... that's usually why there's a module for that. But sometimes writing your own can help you understand how they work, and sometimes it's just easier.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ambers's solution also works well for numpy arrays:</p>
<pre><code>from pylab import *
import csv

array_=arange(0,10,1)
list_=[array_,array_*2,array_*3]
with open("output.csv", "wb") as f:
    writer = csv.writer(f)
    writer.writerows(list_)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make sure to indicate <code>lineterinator='\n'</code> when create the writer; otherwise, an extra empty line might be written into file after each data line when data sources are from other csv file...</p>
<p>Here is my solution:</p>
<pre><code>with open('csvfile', 'a') as csvfile:
    spamwriter = csv.writer(csvfile, delimiter='    ',quotechar='|', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
for i in range(0, len(data)):
    spamwriter.writerow(data[i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about dumping the list of list into pickle and restoring it with <a href="https://www.quora.com/How-do-you-save-and-restore-lists-in-Python" rel="nofollow noreferrer">pickle module</a>? It's quite convenient. </p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; 
&gt;&gt;&gt; mylist = [1, 'foo', 'bar', {1, 2, 3}, [ [1,4,2,6], [3,6,0,10]]]
&gt;&gt;&gt; with open('mylist', 'wb') as f:
...     pickle.dump(mylist, f) 


&gt;&gt;&gt; with open('mylist', 'rb') as f:
...      mylist = pickle.load(f)
&gt;&gt;&gt; mylist
[1, 'foo', 'bar', {1, 2, 3}, [[1, 4, 2, 6], [3, 6, 0, 10]]]
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3345336/save-results-to-csv-file-with-python">Save results to csv file with Python</a></span>
<span class="comment-copy">For Python 3 compatibility, remove the "b" from "wb".</span>
<span class="comment-copy">With Python 3 - open('output.csv', 'w', newline=''). I get an extra line if I omit the newline parameter. <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.writer</a></span>
<span class="comment-copy">In python3 I had to use open('output.csv', 'w', newline="")</span>
<span class="comment-copy">WOW that python 3 error is very unhelpful. Thanks @vladV (a bytes-like object is required, not 'str'). It kinda makes sense in hindsight, but not informative of where to look at all.</span>
<span class="comment-copy">This would get my +1 if you could explain your answer with some comments.</span>
<span class="comment-copy"><code>writerow</code> does not take multiple arguments.</span>
<span class="comment-copy">@Amber <code>writerow</code> works fine with multiple arguments</span>
<span class="comment-copy">&gt;&gt;&gt; w.writerow("a", "b", "c") Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: writerow() takes exactly one argument (3 given)</span>
<span class="comment-copy">@Amber excuse me. i missed []</span>
<span class="comment-copy">I don't think should use <code>pandas</code> if built-in library <code>csv</code> can do it.</span>
<span class="comment-copy">i like pandas because its powerful</span>
