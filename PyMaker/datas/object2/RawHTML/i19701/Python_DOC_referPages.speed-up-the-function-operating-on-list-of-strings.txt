<div class="post-text" itemprop="text">
<p>I want to speed up the function from my code, which is called very frequently. This function receives as input list of strings (usually of length 4) and produce the list of strings in which corresponding entries substituted be capital letters in order which corresponds to the alphanumeric order of input string. Then this list is combined in one string.
Example: input list <code>['wwTv', 'NzkT', 'wwTv', 'JhXc']</code>, output string <code>'C,B,C,A'</code>. In real examples there are many duplicates in each list.</p>
<p>Could you propose more effective solution of this particular problem? Or my straightforward algorithm is good enough and cannot be significantly improved?</p>
<p>Below is a sample of my code (Python 3.2). Here the sample of input data is randomly created and passed to the function <code>f</code>.</p>
<pre><code>import timeit
import string, random

dumb_label_set = ['A', 'B', 'C', 'D', 'E']

def a(labels):
    uniq_labels = sorted(set(labels))
    dumb_labels = [dumb_label_set[uniq_labels.index(a)] for a in labels]
    s_name = ','.join(dumb_labels)
    return(s_name)

def b(labels):
    uniq_labels = {l: i for i, l in enumerate(sorted(set(labels)))}
    dumb_labels = [dumb_label_set[uniq_labels[a]] for a in labels]
    s_name = ','.join(dumb_labels)
    return(s_name)

labels = []
for i1 in range(100000):
    labels.append([''.join(random.choice(string.ascii_letters) for ii in range(random.randint(1,4))) for i2 in range(4)])

start = timeit.default_timer()
res_a = [a(l) for l in labels]
print(timeit.default_timer() - start)

start = timeit.default_timer()
res_b = [b(l) for l in labels]
print(timeit.default_timer() - start)

print(res_a == res_b)
</code></pre>
<p>Results:</p>
<pre><code>0.41835449560994675
0.4420497451417873
True
</code></pre>
<p>My function <code>a</code> is a little bit faster, then <code>b</code> proposed by Martijn Pieters</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd use a dictionary to map labels to indices:</p>
<pre><code>uniq_labels = {l: i for i, l in enumerate(sorted(set(labels)))}
dumb_labels = [dumb_label_set[uniq_labels[a]] for a in labels]
</code></pre>
<p>Using a smaller <code>labels</code> set to facilitate multiple passes in a more managable time gives:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; import string, random
&gt;&gt;&gt; dumb_label_set = ['A', 'B', 'C', 'D', 'E']
&gt;&gt;&gt; def f(labels):
...     uniq_labels = sorted(set(labels))
...     dumb_labels = [dumb_label_set[uniq_labels.index(a)] for a in labels]
...     s_name = ','.join(dumb_labels)
...     return(s_name)
... 
&gt;&gt;&gt; def f_dict(labels):
...     uniq_labels = {l: i for i, l in enumerate(sorted(set(labels)))}
...     dumb_labels = [dumb_label_set[uniq_labels[a]] for a in labels]
...     s_name = ','.join(dumb_labels)
...     return s_name
... 
&gt;&gt;&gt; labels = []
&gt;&gt;&gt; for i1 in range(100):
...     labels.append([''.join(random.choice(string.ascii_letters) for ii in range(random.randint(1,4))) for i2 in range(4)])
... 
&gt;&gt;&gt; timeit.timeit('[f(l) for l in labels]', 'from __main__ import f, labels', number=10000)
6.586822032928467
&gt;&gt;&gt; timeit.timeit('[f(l) for l in labels]', 'from __main__ import f_dict as f, labels', number=10000)
7.633307933807373
</code></pre>
<p>but as you can see, for your small input sets, your method is faster. It appears that setting up the mapping takes more time than up to 4 <code>.index()</code> look-ups.</p>
<p>If your label sequences consist of (much) more elements, my method would win:</p>
<pre><code>&gt;&gt;&gt; dumb_label_set = string.ascii_uppercase
&gt;&gt;&gt; labels = []
&gt;&gt;&gt; for i1 in range(100):
...     labels.append([''.join(random.choice(string.ascii_letters) for ii in range(random.randint(1,4))) for i2 in range(26)])
... 
&gt;&gt;&gt; timeit.timeit('[f(l) for l in labels]', 'from __main__ import f, labels', number=1000)
3.069930076599121
&gt;&gt;&gt; timeit.timeit('[f(l) for l in labels]', 'from __main__ import f_dict as f, labels', number=1000)
2.404794931411743
</code></pre>
<p>The most important lesson here is to use the <a href="http://docs.python.org/3/library/timeit.html" rel="nofollow"><code>timeit</code> module</a> to compare different methods. The <code>timeit</code> module uses the best timer for your platform, and compares <em>many</em> runs of the code-under-test to eliminate outside scheduling influences (disk I/O, other processes, etc).</p>
<p>Even when timing just one run, using <code>timeit.default_timer</code> is preferable over using <code>time.time</code>; it <em>may</em> be the same timer still, but then it'll be the most accurate clock for your platform.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want this to work quickly, have a look at cython too. Of course, do have a look at other proposed algorithms here, but once you select the fastest one, cython can still give it a good boost.</p>
<p>Currently taking your original methods <code>a</code> and <code>b</code>, I just moved them without changes to another module and compiled with cython and gcc (-O3). Without type information, I got the following times:</p>
<pre><code>a:          0.4449379859997862
b:          0.48829928699888114
a (cython): 0.29741462399942975
b (cython): 0.2461447869991389
</code></pre>
<p>I'm sure marking the types of variables could give it another boost.</p>
</div>
<span class="comment-copy">To make speed comparisons, use the <code>timeit</code> module. To measure even one run through, use <code>timeit.default_timer</code> instead of <code>time.time</code> for best accuracy on your platform.</span>
<span class="comment-copy">Thanks for advise, I changed the code in the question correspondingly.</span>
<span class="comment-copy">Good point! But in my case I expect only short lists of strings, up to 7 maybe.</span>
<span class="comment-copy">@DrDom: Make your own comparison based on those expectations, and see what wins. :-)</span>
<span class="comment-copy">I already made such comparison, see the updated question. And on short lists my code wins, unfortunately.</span>
<span class="comment-copy">@DrDom: Indeed, I already came to that conclusion too! My point was more that you need to measure to know this, and that <code>timeit</code> is the best way to do that. Running code just <i>once</i> and measuring clock time does not reflect performance very well, as the OS could well have scheduled <i>other</i> tasks during the test run. If there was a full disk flush or large memory paging operation, your timings will be <i>way</i> off.</span>
<span class="comment-copy">I appreciate your advise. Thanks!</span>
<span class="comment-copy">Thanks! I'll consider you advice. I thought about the creation of a little C-library to import the function into Python and make calculation. Now I switched on another project, but will return to this question soon.</span>
