<div class="post-text" itemprop="text">
<p>I have a few dictionaries containing similar data.</p>
<p>Most queries would be resolved in a single search of one dictionary.</p>
<p>So is it better performance wise to leave out preliminary checks for existence of a key in a dict and have a try at the next dict in an except clause catching key error?</p>
<p>Or maybe something like </p>
<pre><code># d1, d2, d3 = bunch of dictionaries

value = d1.get(key, d2.get(key, d3.get(key, 0)))
</code></pre>
<p>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Depends on the keys in the dictionaries.</p>
<p>If you predict with confidence that it is more common for keys to be missing use then use get.</p>
<p>If you predict with confidence that it is more common for keys to be there use try except.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems in almost all cases, using <code>get</code> would be faster. Here is my test run using <code>try..except</code> and get</p>
<pre><code>&gt;&gt;&gt; def foo1(n):
    spam = dict(zip(range(-99,100,n),[1]*200))
    s = 0
    for e in range(1,100):
        try:
            s += spam[e]
        except KeyError:
            try:
                s += spam[-e]
            except KeyError:
                s += 0
    return s

&gt;&gt;&gt; def foo2(n):
    spam = dict(zip(range(-99,100,n),[1]*200))
    s = 0
    for e in range(1,100):
        s += spam.get(e, spam.get(-e,0))
    return s


&gt;&gt;&gt; for i in range(1,201,10):
    res1 =  timeit.timeit('foo1({})'.format(i), setup = "from __main__ import foo1", number=1000)
    res2 =  timeit.timeit('foo2({})'.format(i), setup = "from __main__ import foo2", number=1000)
    print "{:^5}{:10.5}{:10.5}{:^10}{:^10}".format(i,res1,res2,foo1(i),foo2(i))


  1    0.075102  0.082862    99        99    
 11     0.25096  0.054272    9         9     
 21      0.2885  0.051398    10        10    
 31     0.26211  0.060171    7         7     
 41     0.26653  0.053595    5         5     
 51      0.2609  0.052511    4         4     
 61      0.2686  0.052792    4         4     
 71     0.26645  0.049901    3         3     
 81     0.26351  0.051275    3         3     
 91     0.26939  0.051192    3         3     
 101      0.264  0.049924    2         2     
 111     0.2648  0.049875    2         2     
 121    0.26644  0.049151    2         2     
 131    0.26417  0.048806    2         2     
 141    0.26418  0.050543    2         2     
 151    0.26585  0.049787    2         2     
 161    0.26663  0.051136    2         2     
 171    0.26549  0.048601    2         2     
 181    0.26425  0.050964    2         2     
 191     0.2648  0.048734    2         2     
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you say that most of the queries will be resolved by looking at the first dict, your <em>fastest</em> solution would be to do something like:</p>
<pre><code>try:
    item = d1[key]
except KeyError:
    try:
        item = d2[key]
    except KeyError:
        ...
</code></pre>
<p>However, that is certainly not the most maintainable of solutions and I don't recommend using it.  You could create a function:</p>
<pre><code>def get_from(item,dicts):
    for d in dicts:
        try:
           return d[item]
        except KeyError:
           pass
    else:
        raise KeyError("No item in dicts")
</code></pre>
<p>which you would call like:</p>
<pre><code>get_from(key,(d1,d2,d3))
</code></pre>
<p>(this is a simplified, slightly less clean, version of the already very simple Chained map recipe suggested by @MartijnPieters in the comments on the original question -- I would advocate using that over this code posted here.  This code is only to demonstrate the <em>concept</em> in a more simplified way.)</p>
<p>Finally, perhaps a hybrid solution would work best in practice.  Factor the first <code>try</code> out of the loop -- This is a little ugly, but it avoids the overhead of the <code>loop</code> <em>most of the time</em>.  Only if the first <code>try</code> raises a <code>KeyError</code> do you enter the loop type solution I suggested above on the remaining dicts.  e.g.:</p>
<pre><code>try:
   item = d1[key]
except KeyError:
   item = get_from(key,(d2,d3))
</code></pre>
<p><em>again, only do this if you can reliably demonstrate (think <code>timeit</code>) that it makes a measureable difference</em></p>
<hr/>
<p>The important thing to know is that in python, <code>try</code> is cheap, but <code>except</code> costs a decent amount of time.  If your code is expected to succeed, use <code>try</code>-<code>except</code>.  If it isn't expected to succeed, often it's best to use <code>try-except</code> anyway, but in that case, you should evaluate whether performance is really an issue and only if you can demonstrate that it is an issue should you resort to "looking before you leap".</p>
<p>One final note, If the dictionaries are relatively static, it might be worth combining them into 1 <code>dict</code>:</p>
<pre><code>d1.update(d2)
d1.update(d3)
</code></pre>
<p>Now you can just use <code>d1</code> -- It has all the information from <code>d2</code> and <code>d3</code>.  (of course, the order of the updates matters if the dicts have keys that are the same but have different values).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>try...except</code> usually takes longer than using <code>get</code> but it depends on a few things...</p>
<p>Try making use of the timeit module to test performance in your particular situation like so:</p>
<pre><code>def do_stuff():
    blah

timeit.timeit('testfunc()', 'from __main__ import do_stuff as testfunc')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could as well do</p>
<pre><code>sentinel = object()
values = (d.get(key, sentinel) for d in (d1, d2, d3))
value = next(v for v in values if v is not sentinel)
</code></pre>
<p>If none of the dicts contain the key, this raises a <code>StopIteration</code> rather than a <code>KeyError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The difference between checking the conditional</p>
<p><code>if 'key' in a_dict</code> 
or similarly,
 <code>if a_dct.get('key') == None</code></p>
<p>and handling the <code>KeyError</code> thrown when <code>not 'key' in a_dict</code> is generally considered trivial, and likely to depend upon the implementation of python you are using. </p>
<p>Using the conditional form is undoubtedly more pythonic, and is generally considered more expressive than catching the exception, often leading to cleaner code. However, if your dictionary may contain arbitrary data, and you cannot know that a value of <code>None</code>, or some other magic value indicates that your key is not found, using the conditional form will require two lookups, as you first check if the key is in the dictionary, and then retrieve the value. I.E.:</p>
<pre><code>if 'key': in a_dict:
   val = a_dcit['key']
</code></pre>
<p>Given the situation you describe, the code you have provided is the slowest possible option, as the <code>key</code> will be looked up in each of the dictionaries. A faster option is to guess the dictionary it will be in, and sequentially search through the other dictionaries:</p>
<pre><code>my_val = d1.get(key,None)

if my_val == None:
    my_val = d2.get(key,None)
    if my_val == None:
        my_val = d3.get(key,None)
        if my_val == None:
            return False #handle not found in any case
</code></pre>
<p>However, your particular use case sounds interesting and strange. Why are there multiple dictionaries with similar data? How are these dictionaries stored? If you already have a list or some other data structure holding these dictionaries, it would be even more expressive to loop through the dictionaries. </p>
<pre><code>dict_list = [{},{},{}] #pretend you have three dicts in a list

for d in dict_list:
   val = d.get('key',None)
   if val == None:
      break
#val is now either None, or found.
</code></pre>
</div>
<span class="comment-copy">Try it. Python has the great <code>timeit</code> module that allows you to asses what is the best, performance wise, comparatively. Do note that performance is far less important than readability, unless it's a proven bottleneck. Write it in the clearest way, then optimise if you need to. It's also worth noting that your first method (checking if the key exists), introduces a potential race condition.</span>
<span class="comment-copy">it really depends on your code as well. if the absence of a key in your dictionary is bad, then try:except is more logical, if the absence of a key is trivial then use get with a default <code>None</code>, checking if a value is in a dict is not something you really 'need' to do, you should always know what is in your dict, checking would mean you are receiving an unknown dict.</span>
<span class="comment-copy">You're string of <code>dict.get</code> will look to see if the key is in <code>d3</code>, <code>d2</code> and <code>d1</code> since to resolve the method call for <code>d1</code>, you need to know the arguments that are passed to <code>get</code></span>
<span class="comment-copy">You could use the <a href="http://code.activestate.com/recipes/305268/" rel="nofollow noreferrer">Chained map recipe</a>, or, on python 3.3, the  new <a href="http://docs.python.org/3/library/collections.html#chainmap-objects" rel="nofollow noreferrer"><code>ChainMap</code> type</a>.</span>
<span class="comment-copy">FWIW in my simple tests using new found wonder timeit the chained map was faster than the try:except blocks.</span>
<span class="comment-copy">Please provide supporting evidence for the changing behavior of a <code>dict</code> throwing a <code>KeyError</code> based upon the presence of a key or not.</span>
<span class="comment-copy">Please see my answer, the actual result looks different from your assumption</span>
<span class="comment-copy">I thought about this one too -- but the problem is that creating small generator expressions can be a bit expensive.  Then again, so can the for loop in my solution ... I'm not sure if there is any optimized way to really do this sort of thing.</span>
<span class="comment-copy">I don't think that conditional is more pythonic than catching exceptions. You have a race condition here, and using exceptions is EAFP rather than LBYL.</span>
<span class="comment-copy">Fair comment with respect to EAFP v.s. LBYL, given <a href="http://docs.python.org/2/glossary.html" rel="nofollow noreferrer">docs.python.org/2/glossary.html</a>. All of the solutions presented here suffer from race conditions. If threadsafety is an issue, using a lock on the list would suffice to prevent race conditions.</span>
