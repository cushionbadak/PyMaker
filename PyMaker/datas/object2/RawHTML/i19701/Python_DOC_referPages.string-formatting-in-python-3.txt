<div class="post-text" itemprop="text">
<pre><code>"(%d goals, $%d)" % (self.goals, self.penalties)
</code></pre>
<p>^ I know how to do this in Python 2</p>
<p>What is the Python 3 version of this?</p>
<p>I tried searching for examples online but I kept getting Python 2 versions</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are <a href="http://docs.python.org/2/library/string.html#format-string-syntax" rel="noreferrer">the docs</a> about the "new" format syntax. An example would be:</p>
<pre><code>"({:d} goals, ${:d})".format(self.goals, self.penalties)
</code></pre>
<p>If both <code>goals</code> and <code>penalties</code> are integers (i.e. their default format is ok), it could be shortened to:</p>
<pre><code>"({} goals, ${})".format(self.goals, self.penalties)
</code></pre>
<p>And since the parameters are fields of <code>self</code>, there's also a way of doing it using a single argument twice (as @Burhan Khalid noted in the comments):</p>
<pre><code>"({0.goals} goals, ${0.penalties})".format(self)
</code></pre>
<p>Explaining:</p>
<ul>
<li><code>{}</code> means just the next positional argument, with default format;</li>
<li><code>{0}</code> means the argument with index <code>0</code>, with default format;</li>
<li><code>{:d}</code> is the next positional argument, with decimal integer format;</li>
<li><code>{0:d}</code> is the argument with index <code>0</code>, with decimal integer format.</li>
</ul>
<p>There are many others things you can do when selecting an argument (using named arguments instead of positional ones, accessing fields, etc) and many format options as well (padding the number, using thousands separators, showing sign or not, etc). Some other examples:</p>
<pre><code>"({goals} goals, ${penalties})".format(goals=2, penalties=4)
"({goals} goals, ${penalties})".format(**self.__dict__)

"first goal: {0.goal_list[0]}".format(self)
"second goal: {.goal_list[1]}".format(self)

"conversion rate: {:.2f}".format(self.goals / self.shots) # '0.20'
"conversion rate: {:.2%}".format(self.goals / self.shots) # '20.45%'
"conversion rate: {:.0%}".format(self.goals / self.shots) # '20%'

"self: {!s}".format(self) # 'Player: Bob'
"self: {!r}".format(self) # '&lt;__main__.Player instance at 0x00BF7260&gt;'

"games: {:&gt;3}".format(player1.games)  # 'games: 123'
"games: {:&gt;3}".format(player2.games)  # 'games:   4'
"games: {:0&gt;3}".format(player2.games) # 'games: 004'
</code></pre>
<hr/>
<p><strong>Note:</strong> As others pointed out, the new format does not supersede the former, both are available both in Python 3 and the newer versions of Python 2 as well. Some may say it's a matter of preference, but IMHO the newer is much more expressive than the older, and should be used whenever writing new code (unless it's targeting older environments, of course).</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6 now supports shorthand literal string interpolation with <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">PEP 498</a>. For your use case, the new syntax is simply:</p>
<pre><code>f"({self.goals} goals, ${self.penalties})"
</code></pre>
<p>This is similar to the previous <code>.format</code> standard, but lets one easily do things <a href="https://www.python.org/dev/peps/pep-0498/#format-specifiers" rel="noreferrer">like</a>:</p>
<pre><code>&gt;&gt;&gt; width = 10
&gt;&gt;&gt; precision = 4
&gt;&gt;&gt; value = decimal.Decimal('12.34567')
&gt;&gt;&gt; f'result: {value:{width}.{precision}}'
'result:      12.35'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That line works as-is in Python 3.</p>
<pre><code>&gt;&gt;&gt; sys.version
'3.2 (r32:88445, Oct 20 2012, 14:09:29) \n[GCC 4.5.2]'
&gt;&gt;&gt; "(%d goals, $%d)" % (self.goals, self.penalties)
'(1 goals, $2)'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It was not deprecated; your code works fine. Read more <a href="http://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I like this approach</p>
<pre><code>my_hash = {}
my_hash["goals"] = 3 #to show number
my_hash["penalties"] = "5" #to show string
print("I scored %(goals)d goals and took %(penalties)s penalties" % my_hash)
</code></pre>
<p>Note the appended d and s to the brackets respectively.</p>
<p>output will be:</p>
<pre><code>I scored 3 goals and took 5 penalties
</code></pre>
</div>
<span class="comment-copy">Note for the casual reader: The dollar sign has no special meaning.  It is <i>just</i> a dollar sign here.  (Thanks Martijn Pieters)</span>
<span class="comment-copy"><a href="https://pyformat.info/" rel="nofollow noreferrer">pyformat.info</a> and <a href="http://www.python-course.eu/python3_formatted_output.php" rel="nofollow noreferrer">python-course.eu/python3_formatted_output.php</a> (Not my sites)</span>
<span class="comment-copy">The dollar sign made this very confusing..</span>
<span class="comment-copy">You can also do <code>"({0.goals} goals, ${0.penalties})".format(self)</code></span>
<span class="comment-copy">You need to take the '%' outside of the curly braces, e.g. {:.2f%} -&gt; {:.2f}%</span>
<span class="comment-copy">@SuperElectric you mean, in this line: <code>"conversion rate: {:.2%}".format(self.goals / self.shots)</code>? Works fine for me as it is... (Python 3.4) Note that there's no <code>f</code> in it, I'm asking to format as a percentage, not as a floating point number.</span>
<span class="comment-copy">You're right; it seems to work in Python 3.4, so that's fine since the OP was asking about Python3. I just found it didn't work with python 2.7.6. <code>"{:.2f}%".format(float_num)</code> works fine for both.</span>
<span class="comment-copy">@JohnSchmitt Yes, this example was supposed to give the same exact output as the code given in the question. The <code>$</code> has no special meaning here, neither in the old format syntax nor in the new, thus should be present in the generated string, unchanged.</span>
<span class="comment-copy">OK. COOL. After I posted the question, I was continuing my search and found that we have to do {%d} instead of just %d  is that correct, too? Or is the Python2 way the only way to do it?</span>
<span class="comment-copy">Python 3 introduces a new syntax - that's the curly braces - but you're not required to use it.  You can use either the old or the new.  But they are different; if you're using curlies, you don't use percent signs.</span>
