<div class="post-text" itemprop="text">
<p>What is a <strong>global statement</strong>? And how is it used?  I have read <a href="http://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="noreferrer">Python's official definition</a>;<br/>
however, it doesn't make a lot of sense to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>Every "variable" in python is limited to a certain scope.  The scope of a python "file" is the module-scope.  Consider the following:</p>
<pre><code>#file test.py
myvariable = 5  # myvariable has module-level scope

def func():
    x = 3       # x has "local" or function level scope.
</code></pre>
<p>Objects with local scope die as soon as the function exits and can never be retrieved (unless you <code>return</code> them), but within a function, you can access variables in the module level scope (or any containing scope):</p>
<pre><code>myvariable = 5
def func():
    print(myvariable)  # prints 5

def func2():
    x = 3
    def func3():
        print(x)       # will print 3 because it picks it up from `func2`'s scope

    func3()
</code></pre>
<p>However, you can't use assignment on that reference and expect that it will be propagated to an outer scope:</p>
<pre><code>myvariable = 5
def func():
    myvariable = 6     # creates a new "local" variable.  
                       # Doesn't affect the global version
    print(myvariable)  # prints 6

func()
print(myvariable)      # prints 5
</code></pre>
<p>Now, we're finally to <code>global</code>.  The <code>global</code> keyword is the way that you tell python that a particular variable in your function is defined at the global (module-level) scope.</p>
<pre><code>myvariable = 5
def func():
    global myvariable
    myvariable = 6    # changes `myvariable` at the global scope
    print(myvariable) # prints 6

func()
print(myvariable)  # prints 6 now because we were able 
                   # to modify the reference in the function
</code></pre>
<p>In other words, you can change the value of <code>myvariable</code> in the module-scope from within <code>func</code> if you use the <code>global</code> keyword.</p>
<hr/>
<p>As an aside, scopes can be nested arbitrarily deep:</p>
<pre><code>def func1():
    x = 3
    def func2():
        print("x=",x,"func2")
        y = 4
        def func3():
            nonlocal x  # try it with nonlocal commented out as well.  See the difference.
            print("x=",x,"func3")
            print("y=",y,"func3")
            z = 5
            print("z=",z,"func3")
            x = 10

        func3()

    func2()
    print("x=",x,"func1")

func1()
</code></pre>
<p>Now in this case, none of the variables are declared at the global scope, and in python2, there is no (easy/clean) way to change the value of <code>x</code> in the scope of <code>func1</code> from within <code>func3</code>.  That's why the <code>nonlocal</code> keyword was introduced in python3.x .  <code>nonlocal</code> is an extension of <code>global</code> that allows you to modify a variable that you picked up from another scope in whatever scope it was pulled from.</p>
</div>
<div class="post-text" itemprop="text">
<p>mgilson did a good job but I'd like to add some more.</p>
<pre><code>list1 = [1]
list2 = [1]

def main():
    list1.append(3)
    #list1 = [9]
    list2 = [222]

    print list1, list2


print "before main():", list1, list2
&gt;&gt;&gt; [1] [1]
main()
&gt;&gt;&gt; [1,3] [222]
print list1, list2    
&gt;&gt;&gt; [1, 3] [1]
</code></pre>
<p>Inside a function, Python assumes every variable as local variable
unless you declare it as global, or you are accessing a global variable. </p>
<pre><code>list1.append(2) 
</code></pre>
<p>was possible because you are accessing the 'list1' and lists are mutable. </p>
<pre><code>list2 = [222]
</code></pre>
<p>was possible because you are initializing a local variable.</p>
<p>However if you uncomment #list1 = [9], you will get</p>
<pre><code>UnboundLocalError: local variable 'list1' referenced before assignment
</code></pre>
<p>It means you are trying to initialize a new local variable 'list1' but it was already referenced before,
and you are out of the scope to reassign it.</p>
<p>To enter the scope, declare 'list1' as global.</p>
<p>I strongly recommend you to read <a href="http://www.python-course.eu/global_vs_local_variables.php" rel="nofollow">this</a> even though there is a typo in the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically it tells the interpreter that the variable its given should be modified or assigned at the global level, rather than the default local level.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = 1

def f():
    a = 2 # doesn't affect global a, this new definition hides it in local scope

a = 1

def f():
    global a
    a = 2 # affects global a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a global variable in other functions by declaring it as global in each function that modifies it</p>
<p>Python wants to make sure that you really know that's what you're playing with by explicitly requiring the global keyword.</p>
<p>See <a href="https://stackoverflow.com/a/423596/808255">this answer</a></p>
</div>
<span class="comment-copy">just a remark, 2.4 is an old version of python, the actual reference for <a href="http://docs.python.org/2/reference/simple_stmts.html#global" rel="nofollow noreferrer">python 2.X version is here</a></span>
<span class="comment-copy">Python 3 comes with new statement <code>nonlocal</code> along with <code>global</code>, see it too.</span>
<span class="comment-copy">@TahaJahangir -- That's a good point.  I've also added a little blurb on <code>nonlocal</code> in my answer because of your comment.  Thanks!</span>
<span class="comment-copy">+1 for a thorough explanation.  However, you may want to show the results of the print statements.</span>
<span class="comment-copy">@StevenRumbalski -- Done.  Good suggestion.</span>
<span class="comment-copy">Tested this myself after reading your answer and my understanding has vastly improved on this subject. Thank you very much!</span>
<span class="comment-copy">@user1901780 -- It's also worth pointing out that <b>most</b> of the time, sharing data via <code>global</code> is considered to be a bad idea as it makes it more difficult to encapsulate your logic.  The better way to have data persist between function calls is to use <code>class</code>es which is something you'll probably want to learn if you stick with <code>python</code> long enough :)</span>
