<div class="post-text" itemprop="text">
<p>I have a code such that:</p>
<pre><code>a = "\u0432"
b = u"\u0432"
c = b"\u0432"
d = c.decode('utf8')

print(type(a), a)
print(type(b), b)
print(type(c), c)
print(type(d), d)
</code></pre>
<p>And output:</p>
<pre><code>&lt;class 'str'&gt; в
&lt;class 'str'&gt; в
&lt;class 'bytes'&gt; b'\\u0432'
&lt;class 'str'&gt; \u0432
</code></pre>
<p>Why in the latter case I see a character code, instead of the character?
How I can transform Byte string to Unicode string that in case of an output I saw the character, instead of its code?</p>
</div>
<div class="post-text" itemprop="text">
<p>In strings (or Unicode objects in Python 2), <code>\u</code> has a special meaning, namely saying, "here comes a Unicode character specified by it's Unicode ID". Hence <code>u"\u0432"</code> will result in the character в.</p>
<p>The <code>b''</code> prefix tells you this is a sequence of 8-bit bytes, and bytes object has no Unicode characters, so the <code>\u</code> code has no special meaning. Hence, <code>b"\u0432"</code> is just the sequence of the bytes <code>\</code>,<code>u</code>,<code>0</code>,<code>4</code>,<code>3</code> and <code>2</code>.</p>
<p>Essentially you have an 8-bit string containing not a Unicode character, but the specification of a Unicode character.</p>
<p>You can convert this specification using the unicode escape encoder.</p>
<pre><code>&gt;&gt;&gt; c.decode('unicode_escape')
'в'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Loved Lennart's answer. It put me on the right track for solving the particular problem I had faced. What I added was the ability to produce html-compatible code for \u???? specifications in strings. Basically, only one line was needed:</p>
<pre><code>results = results.replace('\\u','&amp;#x')
</code></pre>
<p>This all came about from a need to convert JSON results to something that displays well in a browser. Here is some test code that is integrated with a cloud application:</p>
<pre><code># References:
# http://stackoverflow.com/questions/9746303/how-do-i-send-a-post-request-as-a-json
# https://docs.python.org/3/library/http.client.html
# http://docs.python-requests.org/en/v0.10.7/user/quickstart/#custom-headers
# http://stackoverflow.com/questions/606191/convert-bytes-to-a-python-string
# http://www.w3schools.com/charsets/ref_utf_punctuation.asp
# http://stackoverflow.com/questions/13837848/converting-byte-string-in-unicode-string

import urllib.request
import json

body = [ { "query": "co-development and language.name:English", "page": 1, "pageSize": 100 } ]
myurl = "https://core.ac.uk:443/api-v2/articles/search?metadata=true&amp;fulltext=false&amp;citations=false&amp;similar=false&amp;duplicate=false&amp;urls=true&amp;extractedUrls=false&amp;faithfulMetadata=false&amp;apiKey=SZYoqzk0Vx5QiEATgBPw1b842uypeXUv"
req = urllib.request.Request(myurl)
req.add_header('Content-Type', 'application/json; charset=utf-8')
jsondata = json.dumps(body)
jsondatabytes = jsondata.encode('utf-8') # needs to be bytes
req.add_header('Content-Length', len(jsondatabytes))
print ('\n', jsondatabytes, '\n')
response = urllib.request.urlopen(req, jsondatabytes)
results = response.read()
results = results.decode('utf-8')
results = results.replace('\\u','&amp;#x') # produces html hex version of \u???? unicode characters
print(results)
</code></pre>
</div>
<span class="comment-copy">This works fine for me. Thank you.</span>
<span class="comment-copy">faced this problem when working with redis sets and trying to convert them to json. Redis returns a set of byte data. using <code>unicode_escape</code> worked perfectly</span>
