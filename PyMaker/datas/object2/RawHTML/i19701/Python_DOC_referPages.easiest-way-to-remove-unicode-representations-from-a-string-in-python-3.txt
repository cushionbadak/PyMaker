<div class="post-text" itemprop="text">
<p>I have a string in python 3 that has several unicode representations in it, for example:</p>
<pre><code>t = 'R\\u00f3is\\u00edn'
</code></pre>
<p>and I want to convert t so that it has the proper representation when I print it, ie:</p>
<pre><code>&gt;&gt;&gt; print(t)
Róisín
</code></pre>
<p>However I just get the original string back. I've tried re.sub and some others, but I can't seem to find a way that will change these characters without having to iterate over each one.
What would be the easiest way to do so?</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use the built-in codec <code>unicode_escape</code>.</p>
<p>If <code>t</code> is already a <code>bytes</code> (an 8-bit string), it's as simple as this:</p>
<pre><code>&gt;&gt;&gt; print(t.decode('unicode_escape'))
Róisín
</code></pre>
<p>If <code>t</code> has already been decoded to Unicode, you can to encode it back to a <code>bytes</code> and then <code>decode</code> it this way. If you're sure that all of your Unicode characters have been escaped, it actually doesn't matter what codec you use to do the encode. Otherwise, you could try to get your original byte string back, but it's simpler, and probably safer, to just force any non-encoded characters to get encoded, and then they'll get decoded along with the already-encoded ones:</p>
<pre><code>&gt;&gt;&gt; print(t.encode('unicode_escape').decode('unicode_escape')
Róisín
</code></pre>
<p>In case you want to know how to do this kind of thing with regular expressions in the future, note that <a href="http://docs.python.org/3/library/re.html?highlight=unicode_escape#re.sub" rel="nofollow noreferrer"><code>sub</code></a> lets you pass a function instead of a pattern for the <code>repl</code>. And you can convert any hex string into an integer by calling <code>int(hexstring, 16)</code>, and any integer into the corresponding Unicode character with <code>chr</code> (note that this is the one bit that's different in Python 2—you need <code>unichr</code> instead). So:</p>
<pre><code>&gt;&gt;&gt; re.sub(r'(\\u[0-9A-Fa-f]+)', lambda matchobj: chr(int(matchobj.group(0)[2:], 16)), t)
Róisín
</code></pre>
<p>Or, making it a bit more clear:</p>
<pre><code>&gt;&gt;&gt; def unescapematch(matchobj):
...     escapesequence = matchobj.group(0)
...     digits = escapesequence[2:]
...     ordinal = int(digits, 16)
...     char = chr(ordinal)
...     return char
&gt;&gt;&gt; re.sub(r'(\\u[0-9A-Fa-f]+)', unescapematch, t)
Róisín
</code></pre>
<p>The <code>unicode_escape</code> codec actually handles <code>\U</code>, <code>\x</code>, <code>\X</code>, octal (<code>\066</code>), and special-character (<code>\n</code>) sequences as well as just <code>\u</code>, and it implements the proper rules for reading only the appropriate max number of digits (4 for <code>\u</code>, 8 for <code>\U</code>, etc., so <code>r'\\u22222'</code> decodes to <code>'∢2'</code> rather than <code>'𢈢'</code>), and probably more things I haven't thought of. But this should give you the idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, it is rather confused what you what to convert to.</p>
<p>Just imagine that you may want to convert to 'o' and 'i'. In this case you can just make a map:</p>
<pre><code>mp = {u'\u00f3':'o', u'\u00ed':'i'}
</code></pre>
<p>Than you may apply the replacement like:</p>
<pre><code>t = u'R\u00f3is\u00edn'
for i in range(len(t)):
    if t[i] in mp: t[i]=mp[t[i]]
print t
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I apologize for posting as a second answer, I don't have the reputation to comment on abarnert's solution.</p>
<p>After using his function to process approximately 50K android strings I noticed that there is yet another small improvement possible for certain use-cases.</p>
<p>I changed the + to {1,4} to deal with the case where valid hex characters follow a 4-digit escape. </p>
<p>I also changed int(escapesequence) to read int(digits)</p>
<pre><code>&gt;&gt;&gt; def unescapematch(matchobj):
...     escapesequence = matchobj.group(0)
...     digits = escapesequence[2:]
...     ordinal = int(digits, 16)
...     char = unichr(ordinal)
...     return char

&gt;&gt;&gt; print re.sub(r'(\\u[0-9A-Fa-f]{1,4})', unescapematch, "Wi\u2011Fi")
Wi‑Fi

&gt;&gt;&gt; print re.sub(r'(\\u[0-9A-Fa-f]+)', unescapematch, "Wi\u2011Fi")
Traceback (most recent call last):
  File "&lt;pyshell#102&gt;", line 1, in &lt;module&gt;
    print re.sub(r'(\\u[0-9A-Fa-f]+)', unescapematch, "Wi\u2011Fi")
  File "C:\Python27\lib\re.py", line 151, in sub
     return _compile(pattern, flags).sub(repl, string, count)
  File "&lt;pyshell#99&gt;", line 5, in unescapematch
    char = unichr(ordinal)
ValueError: unichr() arg not in range(0x10000) (narrow Python build)
</code></pre>
</div>
<span class="comment-copy">If you used the previous version that encoded to UTF-8, don't; see the updated version, which should be safer when you have only-partly-escaped strings.</span>
<span class="comment-copy">I knew about re.sub passing functions, but I didn't know how to convert the string, this is perfect, thanks :)</span>
<span class="comment-copy">@rptynan: Did you not know about <code>chr</code>, or the second parameter to <code>int</code>? I'll update the answer so anyone who comes along later doesn't have any questions…</span>
<span class="comment-copy">I used to, but I'm re-learning python now and I had forgotten about it.</span>
<span class="comment-copy">@rptynan: Well, <code>chr</code> isn't something you use every day, so it's not surprising you didn't remember it. (I code in Python regularly, and I still often find myself wasting 5 minutes trying to remember what happened to <code>unichr</code> in 3.x before remembering that it was merged with <code>chr</code>…)</span>
<span class="comment-copy">I'm pretty sure he wants to convert <i>any</i> Unicode escape sequence <code>u'\\uXXXX'</code> to the Unicode character <code>u'\uXXXX'</code>.</span>
<span class="comment-copy">Yes, and preferable sub it back into the original string, but I can take care of that myself if neeeded.</span>
<span class="comment-copy">okay, man, that is basically an escape issue</span>
<span class="comment-copy">@YunzhiMa: Exactly.</span>
