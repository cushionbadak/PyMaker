<div class="post-text" itemprop="text">
<p>At several occasions I stumbled upon C-style assignment in Python such as <code>a = b = 0</code>. By diligent Googling I found out that this is called chained assignment: [<a href="http://en.wikipedia.org/wiki/Assignment_%28computer_science%29#Chained_assignment" rel="nofollow noreferrer">1</a>],[<a href="https://stackoverflow.com/questions/11498441/what-is-this-kind-of-assignment-in-python-called-a-b-true">2</a>],[<a href="https://stackoverflow.com/questions/7601823/how-do-chained-assignments-work">3</a>]. However, it appears that this feature is not mentioned in the <a href="http://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">official documentation</a>.</p>
<p>Does this mean that chained assignment is still in experimental phase, or simply that the official documentation is slightly behind the development?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like the official documentation does mention it?</p>
<pre><code>assignment_stmt ::=  (target_list "=")+ (expression_list | yield_expression)
                                      ^ here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use chain assignment, but it is not Pythonic style.</p>
<p>From the The Zen of Python;;
"Flat is better than nested. "</p>
</div>
<span class="comment-copy">You're right, I missed the plus. Thanks!</span>
<span class="comment-copy">@ssegvic: as well as the narrative text below it: <i>and assigns the single resulting object to each of the target lists, from left to right.</i></span>
<span class="comment-copy">@Martin: You're right, thanks!</span>
<span class="comment-copy"><code>from left to right</code> is important! Notice that <code>ys=[None]; zs=[True]; xs=ys; xs=xs[0]=zs</code> has the effect of first doing <code>xs=zs</code> then making <code>xs</code> be a circular list whose first element is itself. The parallel syntax in C would instead do <code>xs[0]=zs</code>, and then rebind <code>xs</code> to <code>zs</code>. To achieve the C behavior in Python, you'd have to instead do <code>xs[0] = xs = zs</code>. The parallel syntax to <i>that</i> in C would fail. This can trip one up if converting between C and Python!</span>
<span class="comment-copy">This doesn't seem like an accurate application of this motto to me.</span>
<span class="comment-copy">There is another motto from python family for you Ned, we're all consenting adults here :)</span>
