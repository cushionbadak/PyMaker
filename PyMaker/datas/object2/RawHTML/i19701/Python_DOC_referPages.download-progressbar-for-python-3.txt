<div class="post-text" itemprop="text">
<p>I need a progress to show during file download for Python 3. 
I have seen a few topics on Stackoverflow, but considering that I'm a noob at programming and nobody posted a complete example, just fractions of it, or the one that I can make work on Python 3, none are good for me...</p>
<p>additional info:</p>
<p>ok, so i have this:</p>
<pre><code>from urllib.request import urlopen
import configparser
#checks for files which need to be downloaded
print('    Downloading...')
file = urlopen(file_url)
#progress bar here
output = open('downloaded_file.py','wb')
output.write(file.read())
output.close()
os.system('downloaded_file.py')
</code></pre>
<p>script is run through python command line</p>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="http://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve"><code>urlretrieve()</code></a> that downloads an url to a file and allows to specify a reporthook callback to report progess:</p>
<pre><code>#!/usr/bin/env python3
import sys
from urllib.request import urlretrieve

def reporthook(blocknum, blocksize, totalsize):
    readsofar = blocknum * blocksize
    if totalsize &gt; 0:
        percent = readsofar * 1e2 / totalsize
        s = "\r%5.1f%% %*d / %d" % (
            percent, len(str(totalsize)), readsofar, totalsize)
        sys.stderr.write(s)
        if readsofar &gt;= totalsize: # near the end
            sys.stderr.write("\n")
    else: # total size is unknown
        sys.stderr.write("read %d\n" % (readsofar,))

urlretrieve(url, 'downloaded_file.py', reporthook)
</code></pre>
<p>Here's a GUI progress bar:</p>
<pre><code>import sys
from threading import Event, Thread
from tkinter import Tk, ttk
from urllib.request import urlretrieve

def download(url, filename):
    root = progressbar = quit_id = None
    ready = Event()
    def reporthook(blocknum, blocksize, totalsize):
        nonlocal quit_id
        if blocknum == 0: # started downloading
            def guiloop():
                nonlocal root, progressbar
                root = Tk()
                root.withdraw() # hide
                progressbar = ttk.Progressbar(root, length=400)
                progressbar.grid()
                # show progress bar if the download takes more than .5 seconds
                root.after(500, root.deiconify)
                ready.set() # gui is ready
                root.mainloop()
            Thread(target=guiloop).start()
        ready.wait(1) # wait until gui is ready
        percent = blocknum * blocksize * 1e2 / totalsize # assume totalsize &gt; 0
        if quit_id is None:
            root.title('%%%.0f %s' % (percent, filename,))
            progressbar['value'] = percent # report progress
            if percent &gt;= 100:  # finishing download
                quit_id = root.after(0, root.destroy) # close GUI

    return urlretrieve(url, filename, reporthook)

download(url, 'downloaded_file.py')
</code></pre>
<p>On Python 3.3 <code>urlretrieve()</code> has different <code>reporthook</code> interface (<a href="http://bugs.python.org/issue16409">see issue 16409</a>). To workaround it, you could access the previous interface via <code>FancyURLopener</code>:</p>
<pre><code>from urllib.request import FancyURLopener
urlretrieve = FancyURLopener().retrieve
</code></pre>
<p>To update the progress bar within the same thread, you could inline <code>urlretrieve()</code> code:</p>
<pre><code>from tkinter import Tk, ttk
from urllib.request import urlopen

def download2(url, filename):
    response = urlopen(url)
    totalsize = int(response.headers['Content-Length']) # assume correct header
    outputfile = open(filename, 'wb')

    def download_chunk(readsofar=0, chunksize=1 &lt;&lt; 13):
        # report progress
        percent = readsofar * 1e2 / totalsize # assume totalsize &gt; 0
        root.title('%%%.0f %s' % (percent, filename,))
        progressbar['value'] = percent

        # download chunk
        data = response.read(chunksize)
        if not data: # finished downloading
            outputfile.close()
            root.destroy() # close GUI
        else:
            outputfile.write(data) # save to filename
            # schedule to download the next chunk
            root.after(0, download_chunk, readsofar + len(data), chunksize)

    # setup GUI to show progress
    root = Tk()
    root.withdraw() # hide
    progressbar = ttk.Progressbar(root, length=400)
    progressbar.grid()
    # show progress bar if the download takes more than .5 seconds
    root.after(500, root.deiconify)
    root.after(0, download_chunk)
    root.mainloop()

download2(url, 'downloaded_file.py')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this piece of code can help you. I'm not quite sure it's exactly what you want. At least  it should give you something to work on.</p>
<pre><code>import tkinter 
from tkinter import ttk
from urllib.request import urlopen


def download(event):
    file = urlopen('http://www.python.org/')
    output = open('downloaded_file.txt', 'wb')
    lines= file.readlines()
    i = len(lines)

    for line in lines:
        output.write(line)
        pbar.step(100/i)

    output.close()
    file.close()




root = tkinter.Tk()
root.title('Download bar')

pbar = ttk.Progressbar(root, length=300)
pbar.pack(padx=5, pady=5)

btn = tkinter.Button(root, text="Download")
# bind to left mouse button click
btn.bind("&lt;Button-1&gt;", download)
btn.pack(pady=10)

root.mainloop()
</code></pre>
<p>This works, I've tried it.</p>
</div>
<span class="comment-copy">This question is missing a lot of helpful information: Where do you want this progress bar? In the console? On a web page? In some desktop app? How are you downlading the file? etc etc</span>
<span class="comment-copy">(urllib2 in Python 2 is more or less the same as urllib in Python 3)</span>
<span class="comment-copy">i noticed that urllib.request in python 3 is what urllib2 is python 2... correct me if i'm wrong...</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/3173320/4279">Text Progress Bar in the Console</a></span>
<span class="comment-copy">@Cœur the link is useful (for those who need Python 2). You could move the link into the comments if you'd like¶ Python 3 code can be improved (and therefore it is not useful to prevent future answers).</span>
<span class="comment-copy">this is exactly what i've been looking for. thanks</span>
<span class="comment-copy">@Mirac7: I've added variant that shows GUI and download the file from within the same thread.</span>
<span class="comment-copy">Good and complete answer +1</span>
<span class="comment-copy">@J.F.Sebastian Is there a possible way to include download speed in a <code>reporthook</code>?</span>
<span class="comment-copy">@GughanRavikumar it could look like: <code>t = time.monotonic(); speed = blocksize / (t - last[0]); average_speed = readsofar / (t - start); last[0] = t</code></span>
<span class="comment-copy">I'm recieving error io.UnsupportedOperation: seek... Am I doing something wrong?</span>
<span class="comment-copy">I think seek() method doesn't work with urlopen().Remove the line file.seek(0) and see the results.</span>
<span class="comment-copy">already tried... it works fine, but when i click download, it simply creates empty script, and progressbar is empty.</span>
<span class="comment-copy">I've edited the answer. This code works.</span>
<span class="comment-copy">@doru To avoid opening the URL twice, why not assign <code>file.readlines()</code> to a variable?</span>
