<div class="post-text" itemprop="text">
<p>This question seems mind-boggling simple, yet I can't figure it out. I know you can check datatypes in python, but how can you set a conditional based on the datatype? For instance, if I have to write a code that sorts through a dictionary/list and adds up all the integers, how do I isolate the search to look for only integers? </p>
<p>I guess a quick example would look something like this:</p>
<pre><code>y = []
for x in somelist:
    if type(x) == &lt;type 'int'&gt;:  ### &lt;--- psuedo-code line
    y.append(x)
print sum(int(z) for z in y)
</code></pre>
<p>So for line 3, how would I set such a conditional?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about, </p>
<pre><code>if isinstance(x, int):
</code></pre>
<p>but a cleaner way would simply be</p>
<pre><code>sum(z for z in y if isinstance(z, int))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a really big "it depends" to type-checking in Python. There are many ways to deal with types, and all have their pros and cons. With Python3, several more have emerged.</p>
<ul>
<li><strong>Explicit type equality</strong></li>
</ul>
<p>Types are first-class objects, and you can treat them like any other value.
So if you want the type of something to be equal to <code>int</code>, just test for it:</p>
<pre><code>if type(x) == int:
</code></pre>
<p>This is the most restrictive type of testing: it requires <em>exact</em> type equality. Often, this is not what you want:</p>
<ul>
<li>It rules out substitute types: a <code>float</code> would not be valid, even though it behaves like an <code>int</code> for many purposes.</li>
<li>It rules out subclasses and abstract types: a pretty-printing <code>int</code> subclass or <code>enum</code> would be rejected, even though they are logically Integers.

<ul>
<li>This severely limits portability: Python2 Strings can be <em>either</em> <code>str</code> or <code>unicode</code>, and Integers can be <em>either</em> <code>int</code> or <code>long</code>.</li>
</ul></li>
</ul>
<p>Note that explicit type equality <em>has</em> its uses for low-level operations:</p>
<ul>
<li>Some types <em>cannot</em> be subclassed, such as <code>slice</code>. An explicit check is, well, more explicit here.</li>
<li>Some low-level operations, such as serialisation or C-APIs, require specific types.</li>
</ul>
<p><strong>Variants</strong></p>
<p>A comparison can also be performed against the <code>__class__</code> attribute:</p>
<pre><code>if x.__class__ == int:
</code></pre>
<p>Note if a class defines a <code>__class__</code> property, this is not the same as <code>type(x)</code>.</p>
<p>When there are several classes to check for, using a <code>dict</code> to dispatch actions is more extensible and can be faster (â‰¥5-10 types) than explicit checks.
This is especially useful for conversions and serialisation:</p>
<pre><code>dispatch_dict = {float: round, str: int, int: lambda x: x}
def convert(x):
    converter = self.dispatch_dict[type(x)]  # lookup callable based on type
    return converter(x)
</code></pre>
<ul>
<li><strong>Instance check on explicit types</strong></li>
</ul>
<p>The idiomatic type test uses the <code>isinstance</code> <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer">builtin</a>:</p>
<pre><code>if isinstance(x, int):
</code></pre>
<p>This check is both exact and performant. This is most often what people <em>want</em> for checking types:</p>
<ul>
<li>It handles subtypes properly. A pretty-printing <code>int</code> subclass would still pass this test.</li>
<li>It allows checking multiple types at once. In Python2, doing <code>isinstance(x, (int, long))</code> gets you all builtin integers.</li>
</ul>
<p>Most importantly, the downsides are negligible most of the time:</p>
<ul>
<li>It still accepts funky subclasses that behave in weird ways. Since <em>anything</em> can be made to behave in weird ways, this is futile to guard against.</li>
<li>It can easily be <em>too</em> restrictive: many people check for <code>isinstance(x, list)</code> when any sequence (e.g. <code>tuple</code>) or even iterable (e.g. a <code>generator</code>) would do as well. This is more of a concern for general purpose libraries than scripts or applications.</li>
</ul>
<p><strong>Variants</strong></p>
<p>If you already have a type, <code>issubclass</code> behaves the same:</p>
<pre><code>if issubclass(x_type, int):
</code></pre>
<ul>
<li><strong>Instance check on abstract type</strong></li>
</ul>
<p>Python has a concept of <a href="https://docs.python.org/3/glossary.html#term-abstract-base-class" rel="nofollow noreferrer">abstract base classes</a>. Loosely speaking, these express the meaning of types, not their hierarchy:</p>
<pre><code>if isinstance(x, numbers.Real):  # accept anything you can sum up like a number
</code></pre>
<p>In other words, type(x) does not necessarily <em>inherit</em> from <code>numbers.Real</code> but must <em>behave</em> like it.
Still, this is a very complex and difficult concept:</p>
<ul>
<li>It is often overkill if you are looking for basic types. An Integer is simply an <code>int</code> most of the time.</li>
<li>People coming from other languages often confuse its concepts.

<ul>
<li>Distinguishing it from e.g. C++, the emphasis is <em>abstract base</em> class as opposed to <em>abstract</em> base class.</li>
<li>ABCs can be used like Java interfaces, but may still have concrete functionality.</li>
</ul></li>
</ul>
<p>However, it is incredibly useful for generic libraries and abstractions.</p>
<ul>
<li>Many functions/algorithms do not need explicit types, just their behaviour.

<ul>
<li>If you just need to look up things by key, <code>dict</code> restricts you to a specific in-memory type. By contrast, <code>collections.abc.Mapping</code> also includes database wrappers, large disk-backed dictionaries, lazy containers, ... - and <code>dict</code>.</li>
</ul></li>
<li>It allows expressing partial type constraints.

<ul>
<li>There is no strict base type implementing iteration. But if you check objects against <code>collections.abc.Iterable</code>, they all work in a <code>for</code> loop.</li>
</ul></li>
<li>It allows creating separate, optimised implementations that appear as the same abstract type.</li>
</ul>
<p>While it is usually not needed for throwaway scripts, I would highly recommend using this for anything that lives beyond a few python releases.</p>
<ul>
<li><strong>Tentative conversion</strong></li>
</ul>
<p>The idiomatic way of handling types is not to test them, but to assume they are compatible. If you already expect some wrong types in your input, simply skip everything that is not compatible:</p>
<pre><code>try:
    ix = int(x)
except (ValueError, TypeError):
    continue  # not compatible with int, try the next one
else:
    a.append(ix)
</code></pre>
<p>This is not actually a type check, but usually serves the same intention.</p>
<ul>
<li>It <em>guarantees</em> you have the expected type in your output.</li>
<li>It has some limited leeway in converting wrong types, e.g. specialising <code>float</code> to <code>int</code>.</li>
<li>It works without you knowing which types conform to <code>int</code>.</li>
</ul>
<p>The major downside is that it is an explicit transformation.</p>
<ul>
<li>You can silently accept "wrong" values, e.g. converting a <code>str</code> containing a literal.</li>
<li>It needlessly converts even types that would be good enough, e.g. <code>float</code> to <code>int</code> when you just need numbers.</li>
</ul>
<p>Conversion is an effective tool for some specific use cases. It works best if you know roughly what your input is, and must make guarantees about your output.</p>
<ul>
<li><strong>Controlling the input</strong></li>
</ul>
<p>The best course of action is to ensure you never have to check for type in the first place. This is a bit of a meta-topic, as it depends strongly on the use case.</p>
<p>Here, the source of <code>somelist</code> should never have put non-numbers into it.</p>
</div>
<div class="post-text" itemprop="text">
<p>let me declare variable x of type int  </p>
<pre><code>x = 2
if type(x) == type(1) or isinstance(x, int):  
    # do something
</code></pre>
<p>Both works fine. </p>
</div>
<div class="post-text" itemprop="text">
<p>Easy - use types.</p>
<pre><code>import types
k = 5
if(type(k)==types.IntType):
   print "int"
</code></pre>
<p>Here's a quick dir(types):</p>
<pre><code>['BooleanType', 'BufferType', 'BuiltinFunctionType', 'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType', 'DictProxyType', 'DictType', 'DictionaryType', 'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType', 'GeneratorType', 'GetSetDescriptorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType', 'LongType', 'MemberDescriptorType', 'MethodType', 'ModuleType', 'NoneType', 'NotImplementedType', 'ObjectType', 'SliceType', 'StringType', 'StringTypes', 'TracebackType', 'TupleType', 'TypeType', 'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__', '__doc__', '__file__', '__name__', '__package__']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the type function on both sides of the operator. Like this:</p>
<pre><code>if type(x) == type(1):
</code></pre>
</div>
<span class="comment-copy">why does your list have integer and non-integer elements in it?  What's that about?</span>
<span class="comment-copy">@TokenMacGuy - there is nothing that requires all elements in a list to be the same type.</span>
<span class="comment-copy">@Paul McGuire: no, the language certainly doesn't enforce any particular feature on the members of a particular list, but on the other hand, mixing and matching types together into a common collection suggests maybe those objects aren't as closely related as putting them into the same list structure would suggest.  Could there be a better way to group those related elements than a single list?</span>
<span class="comment-copy">for further reading: <a href="http://stackoverflow.com/q/1549801/1025391">Differences between isinstance() and type() in python</a></span>
<span class="comment-copy">Yes, very good approach to what he wants to do. However, might be worthwhile pointing out the answer to his question is <code>if type(x) == int</code> but why that's a bad idea.</span>
<span class="comment-copy">No! This is a really bad idea for example <code>type(u"testing") == type("testing")</code> even though they are both strings.</span>
<span class="comment-copy">Whoa - can you explain why that is?  I'm a little confused as to your logic.  This isn't a production piece of code, merely an example of how to use a library.</span>
<span class="comment-copy">Comparing types won't handle subclasses, or even instances of custom classes or as the example shows, unicode vs string types, also it over complicates the situation</span>
<span class="comment-copy">Also, pretend all code is production code.</span>
<span class="comment-copy">@JakobBowyer: <code>type(u"") != type("")</code>.  You should check before you make claims like this.</span>
<span class="comment-copy">No! This is a really bad idea for example <code>type(u"testing") == type("testing")</code> even though they are both strings.</span>
