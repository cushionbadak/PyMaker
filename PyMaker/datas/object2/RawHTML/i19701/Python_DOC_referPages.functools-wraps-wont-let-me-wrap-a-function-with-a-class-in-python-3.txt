<div class="post-text" itemprop="text">
<p>I want to write a decorator for some functions that take file as the first argument. The decorator has to implement the <a href="http://docs.python.org/reference/datamodel.html#with-statement-context-managers" rel="nofollow">context manager protocol</a> (i.e. turn the wrapped function into a context manager), so I figured I needed to wrap the function with a class.</p>
<p>I'm not really experienced with the decorator pattern and have never implemented a context manager before, but what I wrote works in Python 2.7 and it also works in Python 3.3 if I comment out the <code>wraps</code> line.</p>
<pre><code>from functools import wraps
def _file_reader(func):
    """A decorator implementing the context manager protocol for functions
    that read files."""
#   @wraps(func)
    class CManager:
        def __init__(self, source, *args, **kwargs):
            self.source = source
            self.args = args
            self.kwargs = kwargs
            self.close = kwargs.get('close', True)

        def __enter__(self):
            # _file_obj is a little helper that opens the file for reading
            self.fsource = _file_obj(self.source, 'r') 
            return func(self.fsource, *self.args, **self.kwargs)

        def __exit__(self, exc_type, exc_value, traceback):
            if self.close:
                self.fsource.close()
            return False
    return CManager
</code></pre>
<p>The error I get when uncommenting the <code>wraps</code> line occurs inside <code>update_wrapper</code>:</p>
<pre><code>/usr/lib/python3.3/functools.py in update_wrapper(wrapper, wrapped, assigned, updated)
     54             setattr(wrapper, attr, value)
     55     for attr in updated:
---&gt; 56         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
     57     # Return the wrapper so this can be used as a decorator via partial()
     58     return wrapper

AttributeError: 'mappingproxy' object has no attribute 'update'
</code></pre>
<p>I know the docs don't say that I even can use <a href="http://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow"><code>functools.wraps</code></a> to wrap a function with a class like this, but then again, it just works in Python 2. Can someone please explain what exactly this traceback is telling me and what I should do to achieve the effects of <code>wraps</code> on both versions of Python?</p>
<hr/>
<p><strong>EDIT</strong>: I was mistaken. The code above does <strong>not</strong> do what I want it to. I want to be able to use the function both <em>with</em> and <em>without</em> <code>with</code>, like the builtin <code>open</code>.</p>
<p>The code above turns the decorated function into a context manager. I want to be able to do:</p>
<pre><code>reader = func('source.txt', arg)
for item in reader:
    pass
</code></pre>
<p>as well as</p>
<pre><code>with func('source.txt', arg) as reader:
    for item in reader:
        pass
</code></pre>
<p>So my version of the code should probably look approximately as follows:</p>
<pre><code>def _file_reader(func):
    """A decorator implementing the context manager protocol for functions
    that read files."""
    @wraps(func)
    class CManager:
        def __init__(self, source, *args, **kwargs):
            self.close = kwargs.get('close', True)
            self.fsource = _file_obj(source, 'r')
            self.reader = func(self.fsource, *args, **kwargs)

        def __enter__(self):
            return self.reader

        def __iter__(self):
            return self.reader

        def __next__(self):
            return next(self.reader)

        def __exit__(self, exc_type, exc_value, traceback):
            if self.close and not self.fsource.closed:
                self.fsource.close()
            return False
    return CManager
</code></pre>
<p>Feel free to comment about anything I have overlooked.</p>
<p><strong>Note</strong>: the class version by J.F. Sebastian seems to work then:</p>
<p>I basically removed the <code>wraps</code> from the class and changed <code>return CManager</code> to:</p>
<pre><code>@wraps(func)
def helper(*args, **kwargs):
    return CManager(*args, **kwargs)
return helper
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3.3/library/functools.html#functools.wraps" rel="nofollow"><code>functools.wraps()</code></a> is for wrapper functions:</p>
<pre><code>import contextlib
import functools

def file_reader(func):
    @functools.wraps(func)
    @contextlib.contextmanager
    def wrapper(file, *args, **kwargs):
        close = kwargs.pop('close', True) # remove `close` argument if present
        f = open(file)
        try:
            yield func(f, *args, **kwargs)
        finally:
            if close:
               f.close()
    return wrapper
</code></pre>
<h3>Example</h3>
<pre><code>@file_reader
def f(file):
    print(repr(file.read(10)))
    return file

with f('prog.py') as file:
    print(repr(file.read(10)))
</code></pre>
<p>If you want to use a class-based context manager then a workaround is:</p>
<pre><code>def file_reader(func):
    @functools.wraps(func)
    def helper(*args, **kwds):
        return File(func, *args, **kwds)
    return helper
</code></pre>
<p>To make it behave identically whether the decorated function is used directly or as a context manager you should return <code>self</code> in <code>__enter__()</code>:</p>
<pre><code>import sys

class File(object):

    def __init__(self, file, func, *args, **kwargs):
        self.close_file = kwargs.pop('close', True)
        # accept either filename or file-like object
        self.file = file if hasattr(file, 'read') else open(file)

        try:
            # func is responsible for self.file if it doesn't return it
            self.file = func(self.file, *args, **kwargs)
        except:  # clean up on any error
            self.__exit__(*sys.exc_info())
            raise

    # context manager support
    def __enter__(self):
        return self

    def __exit__(self, *args, **kwargs):
        if not self.close_file:
            return  # do nothing
        # clean up
        exit = getattr(self.file, '__exit__', None)
        if exit is not None:
            return exit(*args, **kwargs)
        else:
            exit = getattr(self.file, 'close', None)
            if exit is not None:
                exit()

    # iterator support
    def __iter__(self):
        return self

    def __next__(self):
        return next(self.file)

    next = __next__  # Python 2 support

    # delegate everything else to file object
    def __getattr__(self, attr):
        return getattr(self.file, attr)
</code></pre>
<h3><a href="http://ideone.com/RMhe4r" rel="nofollow">Example</a></h3>
<pre><code>file = f('prog.py')  # use as ordinary function
print(repr(file.read(20)))
file.seek(0)
for line in file:
    print(repr(line))
    break
file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although I don't know what the error <em>you're</em> seeing is from, it looks like you are probably doomed anyway:</p>
<pre><code>&gt;&gt;&gt; import functools
&gt;&gt;&gt; def foo():
...     pass
... 
&gt;&gt;&gt; class bar:
...     pass
... 
&gt;&gt;&gt; functools.wraps(foo)(bar)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib64/python3.2/functools.py", line 48, in update_wrapper
    setattr(wrapper, attr, value)
AttributeError: attribute '__doc__' of 'type' objects is not writable
&gt;&gt;&gt; bar.__doc__
&gt;&gt;&gt; bar.__doc__ = 'Yay'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: attribute '__doc__' of 'type' objects is not writable
</code></pre>
<p><strong>Edit:</strong> <a href="https://stackoverflow.com/a/14095585/65696">J.F. Sebastian</a> has the <em>solution</em>, but i'm leaving this bit as exposition on why it must be a function and not a class</p>
</div>
<span class="comment-copy">Can you try using the new style classes i.e. <code>CManager(object)</code> instead of just <code>CManager</code>? Just a hunch...</span>
<span class="comment-copy">@SanjayT.Sharma There are no old-style classes in Python 3, but I tried just to be sure. Same error.</span>
<span class="comment-copy">Is this equivalent to a full-blown custom context manager class? I looked at <code>contextlib.contextmanager</code> but I thought it just patched some stubs onto the function and wasn't really useful. Note that I want the function to work without <code>with</code>, too, pretty much like <code>open</code>.</span>
<span class="comment-copy">@LevLevitsky: yes, it implements full protocol. The difference (<code>close</code> is popped) from your class is intentional to make it more <code>open</code>-like.</span>
<span class="comment-copy">@LevLevitsky: I've added class-based workaround.</span>
<span class="comment-copy">I have a little trouble understanding what you meant by <code>yield func(f, *args, **kwargs)</code>. It works in a <code>with</code> statement, but gives <code>TypeError: GeneratorContextManager object is not an iterator</code> when I use it normally (try to access the iterator it returns).</span>
<span class="comment-copy">@LevLevitsky: file_reader() is a context manager, it is not an iterator. Read contextlib.contextmanager docs.</span>
<span class="comment-copy">Thanks for the observation and the workaround, I'll try it out tomorrow (or today, depending on your timezone). What I'd be interested in is the underlying difference between the Python versions.</span>
