<div class="post-text" itemprop="text">
<p>I recently switched a Django project from sqlite3 to postgres. I'd like to read db password from a module placed in a hidden directory.</p>
<pre><code>.secrets
    __init__.py
    db.py # DB_PASSWORD = 'mypassword'
</code></pre>
<p>How do I import DB_PASSWORD from the db module placed in the hidden .secrets directory? The following doesn't work (ImportError):</p>
<pre><code>from .secrets.db import DB_PASSWORD
</code></pre>
<p>Do I have to use the <code>__import__</code> trick? For code styling conventions I'd prefer to stay with the from/import pattern.</p>
</div>
<div class="post-text" itemprop="text">
<p>From PEP 328, <a href="http://www.python.org/dev/peps/pep-0328/#rationale-for-relative-imports" rel="nofollow">http://www.python.org/dev/peps/pep-0328/#rationale-for-relative-imports</a> you <strong>should actually avoid naming a python module starting with a "dot"</strong> because it means relative imports in Python.</p>
<p>If you really insist on doing so, you can but you will have to use the <code>imp</code> module.  </p>
<p>Example usage:-</p>
<pre><code>import imp
with open('.secret/__init__.py', 'rb') as fp:
    secret = imp.load_module('.secret', fp, '.secret/__init__.py', \
    ('.py', 'rb', imp.PY_SOURCE))  
</code></pre>
<p>So for your use case where you want to load in values from <code>db.py</code>, it would look something like this:-</p>
<pre><code>import imp
with open('.secret/db.py', 'rb') as fp:
    db = imp.load_module('.secret', fp, '.secret/db.py', \
    ('.py', 'rb', imp.PY_SOURCE))  

print db.DB_PASSWORD  # This will print out your DB_PASSWORD's value. Or use it whichever way you want.
</code></pre>
<p>Won't advise on it though.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, the <code>from .module import something</code> syntax is <a href="http://www.python.org/dev/peps/pep-0328/#guido-s-decision" rel="nofollow">for relative imports</a>.</p>
<p>So, if you try to use a leading dot in a package name, Python will get confused and attempt a relative import, which will fail.</p>
<p>On a related note, doing <code>import .module</code> is actually a <code>SyntaxError</code></p>
<hr/>
<p>I don't think this is so bad though. Just store your secret somewhere else and add that somewhere else to your path, or put it in a file that you can just open (like, a JSON configuration file, for instance).</p>
</div>
<div class="post-text" itemprop="text">
<p>You should make that <code>db.py</code> a configuration file and load it with <a href="http://docs.python.org/3/library/configparser.html" rel="nofollow">configparser</a>. Or you could store it as a JSON file and load it with <a href="http://docs.python.org/3/library/json.html" rel="nofollow">json</a>, or store it as YAML and load it with <a href="http://pyyaml.org/" rel="nofollow">PyYAML</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found a formal answer in the <a href="http://docs.python.org/2/reference/simple_stmts.html#the-import-statement" rel="nofollow">Python reference</a>.</p>
<p>The <code>from</code> forms are:</p>
<pre><code>"from" relative_module "import" identifier ["as" name] ( "," identifier ["as" name] )*
</code></pre>
<p>or</p>
<pre><code>"from" module "import" "*"
</code></pre>
<p>In the first form the dot has nothing to do with the wrong concept of "hidden packages", it refers to relative imports (as mentioned by Thomas Orozco). In the second form the module is defined as follow:</p>
<pre><code>module ::=  (identifier ".")* identifier
</code></pre>
<p>and identifier <a href="http://docs.python.org/2/reference/lexical_analysis.html#grammar-token-identifier" rel="nofollow"><strong>must</strong> start with a letter</a>.</p>
<p>As you suggested I'll use an external configuration file, not Python code.</p>
</div>
