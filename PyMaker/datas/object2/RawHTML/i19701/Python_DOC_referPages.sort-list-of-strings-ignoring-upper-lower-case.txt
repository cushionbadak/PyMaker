<div class="post-text" itemprop="text">
<p>I have a list which contains strings representing animal names. I need to sort the list. If I use <code>sorted(list)</code>, it will give the list output with uppercase strings first and then lowercase. </p>
<p>But I need the below output.</p>
<p>Input:</p>
<pre><code>var = ['ant','bat','cat','Bat','Lion','Goat','Cat','Ant']
</code></pre>
<p>Output:</p>
<pre><code>['ant', 'Ant', 'bat', 'Bat', 'cat', 'Cat', 'Goat', 'Lion']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>sort()</code> method and the <code>sorted()</code> function take a key argument:</p>
<pre><code>var.sort(key=lambda v: v.upper())
</code></pre>
<p>The function named in <code>key</code> is called for each value and the return value is used when sorting, without affecting the actual values:</p>
<pre><code>&gt;&gt;&gt; var=['ant','bat','cat','Bat','Lion','Goat','Cat','Ant']
&gt;&gt;&gt; sorted(var, key=lambda v: v.upper())
['ant', 'Ant', 'bat', 'Bat', 'cat', 'Cat', 'Goat', 'Lion']
</code></pre>
<p>To sort <code>Ant</code> before <code>ant</code>, you'd have to include a little more info in the key, so that otherwise equal values are sorted in a given order:</p>
<pre><code>&gt;&gt;&gt; sorted(var, key=lambda v: (v.upper(), v[0].islower()))
['Ant', 'ant', 'Bat', 'bat', 'Cat', 'cat', 'Goat', 'Lion']
</code></pre>
<p>The more complex key generates <code>('ANT', False)</code> for <code>Ant</code>, and <code>('ANT', True)</code> for <code>ant</code>; <code>True</code> is sorted after <code>False</code> and so uppercased words are sorted before their lowercase equivalent.</p>
<p>See the <a href="http://wiki.python.org/moin/HowTo/Sorting">Python sorting HOWTO</a> for more information.</p>
</div>
<div class="post-text" itemprop="text">
<p>New answer for Python 3, I'd like to add two points:</p>
<ol>
<li>Use <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow noreferrer"><code>str.casefold</code></a> for case-insensitive comparisons.</li>
<li>Use the method directly instead of inside of a lambda.</li>
</ol>
<p>That is:</p>
<pre><code>var = ['ant','bat','cat','Bat','Lion','Goat','Cat','Ant']

var.sort(key=str.casefold)
</code></pre>
<p>(which sorts in-place) and now:</p>
<pre><code>&gt;&gt;&gt; var
['ant', 'Ant', 'bat', 'Bat', 'cat', 'Cat', 'Goat', 'Lion']
</code></pre>
<p>Or, to return a new list, use <code>sorted</code></p>
<pre><code>&gt;&gt;&gt; var = ['ant','bat','cat','Bat','Lion','Goat','Cat','Ant']
&gt;&gt;&gt; sorted(var, key=str.casefold)
['ant', 'Ant', 'bat', 'Bat', 'cat', 'Cat', 'Goat', 'Lion']
</code></pre>
<p>Why is this different from <code>str.lower</code> or <code>str.upper</code>? <a href="https://docs.python.org/library/stdtypes.html#str.casefold" rel="nofollow noreferrer">According to the documentation:</a></p>
<blockquote>
<p>Casefolding is similar to lowercasing but more aggressive because it is intended to remove all case distinctions in a string. For example, the German lowercase letter <code>'ß'</code> is equivalent to <code>"ss"</code>. Since it is already lowercase, <code>str.lower()</code> would do nothing to <code>'ß'</code>; <code>casefold()</code> converts it to <code>"ss"</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>We can use the 'sorted' function according to Python Sorting HOW TO documentation.</p>
<pre><code>a = sorted(Input, key=str.lower)print("Output1: ",a)
</code></pre>
<p><strong>Output1:</strong> </p>
<pre><code>['ant', 'Ant', 'bat', 'Bat', 'cat', 'Cat', 'Goat', 'Lion']
</code></pre>
</div>
<span class="comment-copy">Thanks Martijin. Is ther way to get output also as ['Ant', 'ant', 'Bat', 'bat', 'Cat', 'cat', 'Goat', 'Lion']. I have tried var.sort(key=lambda v: v.lower()). It gives the same output</span>
<span class="comment-copy">@PSivachandran: You have to add a little info to the key to make <code>Ant</code> sort before <code>ant</code>. Use <code>lamda v: (v.upper(), v[0].islower())</code> for example, as <code>True</code> is sorted after <code>False</code>.</span>
<span class="comment-copy">Better use <code>sorted(var, key=lambda v: (v.upper(), v))</code></span>
<span class="comment-copy">@coldfix: that depends; is it a requirement that the lowercase version of a word comes before the same word with title caps even if their order in the original was swapped? Then yes, return a tuple.</span>
<span class="comment-copy">OFC, but I think it's a bit of a stretch that someone would want to sort case-insensitively on the whole word and use the case of the first letter for edge cases but then suddenly stop there and use stability for the rest:) If someone were to write <i>that code</i> I'd be 99% sure that they actually wanted the simpler solution from my comment above which makes the order of the output deterministic from the set of input elements independent of their initial order (so you could e.g. use this to sort on <code>set</code>s etc). This is fulfilled netiher by <code>key=str.upper</code> nor by your last suggestion.</span>
