<div class="post-text" itemprop="text">
<p>I am a bit confused regarding data structure in python; <code>()</code>,<code>[]</code>, and <code>{}</code>. I am trying to sort out a simple list, probably since I cannot identify the type of data I am failing to sort it.</p>
<p>My list is simple: <code>['Stem', 'constitute', 'Sedge', 'Eflux', 'Whim', 'Intrigue']</code> </p>
<p>My question is what type of data this is, and how to sort the words alphabetically?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>[]</code> denotes a <a href="http://docs.python.org/3/tutorial/introduction.html#lists" rel="noreferrer">list</a>, <code>()</code> denotes a <a href="http://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">tuple</a> and <code>{}</code> denotes a <a href="http://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="noreferrer">dictionary</a>. You should take a look at the <a href="http://docs.python.org/3/tutorial/index.html" rel="noreferrer">official Python tutorial</a> as these are the very basics of programming in Python.</p>
<p>What you have is a list of strings. You can sort it like this:</p>
<pre><code>In [1]: lst = ['Stem', 'constitute', 'Sedge', 'Eflux', 'Whim', 'Intrigue']

In [2]: sorted(lst)
Out[2]: ['Eflux', 'Intrigue', 'Sedge', 'Stem', 'Whim', 'constitute']
</code></pre>
<p>As you can see, words that start with an uppercase letter get preference over those starting with a lowercase letter. If you want to sort them independently, do this:</p>
<pre><code>In [4]: sorted(lst, key=str.lower)
Out[4]: ['constitute', 'Eflux', 'Intrigue', 'Sedge', 'Stem', 'Whim']
</code></pre>
<p>You can also sort the list in reverse order by doing this:</p>
<pre><code>In [12]: sorted(lst, reverse=True)
Out[12]: ['constitute', 'Whim', 'Stem', 'Sedge', 'Intrigue', 'Eflux']

In [13]: sorted(lst, key=str.lower, reverse=True)
Out[13]: ['Whim', 'Stem', 'Sedge', 'Intrigue', 'Eflux', 'constitute']
</code></pre>
<p><strong>Please note:</strong> If you work with Python 3, then <code>str</code> is the correct data type for every string that contains human-readable text. However, if you still need to work with Python 2, then you might deal with unicode strings which have the data type <code>unicode</code> in Python 2, and not <code>str</code>. In such a case, if you have a list of unicode strings, you must write <code>key=unicode.lower</code> instead of <code>key=str.lower</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a built-in function called <a href="http://docs.python.org/2/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a>, which will give you a sorted list from any iterable you feed it (such as a list (<code>[1,2,3]</code>); a dict (<code>{1:2,3:4}</code>, although it will just return a sorted list of the keys; a set (<code>{1,2,3,4</code>); or a tuple (<code>(1,2,3,4)</code>)).</p>
<pre><code>&gt;&gt;&gt; x = [3,2,1]
&gt;&gt;&gt; sorted(x)
[1, 2, 3]
&gt;&gt;&gt; x
[3, 2, 1]
</code></pre>
<p>Lists also have a <a href="http://docs.python.org/2/library/stdtypes.html#typesseq-mutable" rel="nofollow noreferrer"><code>sort</code></a> method that will perform the sort in-place (x.sort() returns None but changes the x object) .</p>
<pre><code>&gt;&gt;&gt; x = [3,2,1]
&gt;&gt;&gt; x.sort()
&gt;&gt;&gt; x
[1, 2, 3]
</code></pre>
<p>Both also take a <code>key</code> argument, which should be a callable (function/lambda) you can use to change what to sort by.<br/>
For example, to get a list of <code>(key,value)</code>-pairs from a dict which is sorted by value you can use the following code:</p>
<pre><code>&gt;&gt;&gt; x = {3:2,2:1,1:5}
&gt;&gt;&gt; sorted(x.items(), key=lambda kv: kv[1])  # Items returns a list of `(key,value)`-pairs
[(2, 1), (3, 2), (1, 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use built-in <code>sorted</code> function.</p>
<pre><code>print sorted(['Stem', 'constitute', 'Sedge', 'Eflux', 'Whim', 'Intrigue'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're dealing with a python list, and sorting it is as easy as doing this.</p>
<pre><code>my_list = ['Stem', 'constitute', 'Sedge', 'Eflux', 'Whim', 'Intrigue']
my_list.sort()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>ListName.sort()</code> will sort it alphabetically. You can add <code>reverse=False/True</code> in the brackets to reverse the order of items: <code>ListName.sort(reverse=False)</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a = ()
&gt;&gt;&gt; type(a)
&lt;type 'tuple'&gt;
&gt;&gt;&gt; a = []
&gt;&gt;&gt; type(a)
&lt;type 'list'&gt;
&gt;&gt;&gt; a = {}
&gt;&gt;&gt; type(a)
&lt;type 'dict'&gt;
&gt;&gt;&gt; a =  ['Stem', 'constitute', 'Sedge', 'Eflux', 'Whim', 'Intrigue'] 
&gt;&gt;&gt; a.sort()
&gt;&gt;&gt; a
['Eflux', 'Intrigue', 'Sedge', 'Stem', 'Whim', 'constitute']
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">If you want to sort your list then you can use "list=['Stem', 'constitute', 'Sedge', 'Eflux', 'Whim', 'Intrigue']  list.sort()  print list" .</span>
<span class="comment-copy"><code>[]</code> encloses the builtin datatype <code>list</code>, (see <a href="http://www.tutorialspoint.com/python/python_lists.htm" rel="nofollow noreferrer">tutorialspoint.com/python/python_lists.htm</a>). Lists are just groups of values (they can contain other iterable objects- i.e nested lists). <code>()</code> encloses the builtin <code>tuple</code>. They are immutable (cannot be changed). (see <a href="http://www.tutorialspoint.com/python/python_tuples.htm" rel="nofollow noreferrer">tutorialspoint.com/python/python_tuples.htm</a>). And <code>{}</code> encloses the builtin <code>dictionary</code>. Parallels with a dictionary (for words), where a 'key' would be the word and the 'value's is the definition. (see <a href="http://www.tutorialspoint.com/python/python_dictionary.htm" rel="nofollow noreferrer">tutorialspoint.com/python/python_dictionary.htm</a>).</span>
<span class="comment-copy">Using the second example on a pymongo <code>find_one()</code> result from a MongoDB database, I get error:  <code>descriptor 'lower' requires a 'str' object but received a 'unicode'</code>.  The result is an array of strings and implemented like this:  <code>results['keywords'] = sorted(keywords['keywords'], key=str.lower)</code>.  Does anybody know how to resolve this?</span>
<span class="comment-copy">@user1063287 Sorry for my late response. In your case, you need to write <code>key=unicode.lower</code> instead of <code>key=str.lower</code>. This is because you are dealing with unicode strings, not byte strings. Please refer to the official <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">Unicode HOWTO</a> for further information on this, especially for the respective differences between Python 2 and 3.</span>
<span class="comment-copy">@jwpat7, yeah. Better?</span>
<span class="comment-copy">Thanks for actually explaining how it worked. Very helpful.</span>
<span class="comment-copy">Is this a comment for Ruby?</span>
