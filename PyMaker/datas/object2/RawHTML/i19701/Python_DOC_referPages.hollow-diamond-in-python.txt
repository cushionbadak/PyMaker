<div class="post-text" itemprop="text">
<p>My goal is to create a hollow diamond using python.</p>
<p>Sample input:</p>
<pre><code>Input an odd Integer:
      9
</code></pre>
<p>Sample output:</p>
<pre><code>    *
   * *
  *   *
 *     *
*       *
 *     *
  *   *
   * *
    *
</code></pre>
<p>But so far, I have the following code that is not working right. Please help me to modify the code to achieve the goal above:</p>
<pre><code>a=int(input("Input an odd integer: "))

k=1
c=1

r=a

while k&lt;=r:
    while c&lt;=r:
        print "*"
        c+=1

    r-=1
    c=1

    while c&lt;=2*k-1:
        print "*"
        c+=1

    print "\n"
    k+=1

r=1
k=1
c=1

while k&lt;=a-1:
   while c&lt;=r:
       print " "
       c+=1

   r+=1
   c=1

   while c&lt;= 2*(a-k)-1:
       print ("*")
       c+=1

   print "\n"
   k+=1
</code></pre>
<p>The code above return a result that is very far from my goal.</p>
<pre><code>Input an odd integer: 7
*
*
*
*
*
*
*
*


*
*
*
*
*
*
*
*


*
*
*
*
*
*
*


*
*
*
*
*
*
*



*
*
*
*
*
*
*
*
*
*
*


*
*
*
*
*
*
*
*
*


*
*
*
*
*
* 
*


*
*
*
*
*


*
*
*





*
</code></pre>
<p>I am actually converting the code from this post: <a href="http://www.programmingsimplified.com/c/source-code/c-program-print-diamond-pattern" rel="nofollow">http://www.programmingsimplified.com/c/source-code/c-program-print-diamond-pattern</a>  written in C language and will modify later for the hollow one but I can't get it... There is something wrong with my conversion..</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you keep using <code>print</code>. The print statement (and the function in Python 3) will add a line-break after what you printed, unless you explicitely tell it not to. You can do that in Python 2 like this:</p>
<pre><code>print '*', # note the trailing comma
</code></pre>
<p>Or in Python 3 (with the print function) like this:</p>
<pre><code>print('*', end='')
</code></pre>
<h3>My solution</h3>
<p>I took my own take at the problem and came up with this solution:</p>
<pre><code># The diamond size
l = 9

# Initialize first row; this will create a list with a
# single element, the first row containing a single star
rows = ['*']

# Add half of the rows; we loop over the odd numbers from
# 1 to l, and then append a star followed by `i` spaces and
# again a star. Note that range will not include `l` itself.
for i in range(1, l, 2):
    rows.append('*' + ' ' * i + '*')

# Mirror the rows and append; we get all but the last row
# (the middle row) from the list, and inverse it (using
# `[::-1]`) and add that to the original list. Now we have
# all the rows we need. Print it to see what's inside.
rows += rows[:-1][::-1]

# center-align each row, and join them
# We first define a function that does nothing else than
# centering whatever it gets to `l` characters. This will
# add the spaces we need around the stars
align = lambda x: ('{:^%s}' % l).format(x)

# And then we apply that function to all rows using `map`
# and then join the rows by a line break.
diamond = '\n'.join(map(align, rows))

# and print
print(diamond)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A Hollow diamond is the solution to the equation</p>
<pre><code>|x|+|y| = N
</code></pre>
<p>on an integer grid. So Hollow diamond as a 1-liner:</p>
<pre><code>In [22]: N = 9//2; print('\n'.join([''.join([('*' if abs(x)+abs(y) == N else ' ') for x in range(-N, N+1)]) for y in range(-N, N+1)]))
    *    
   * *   
  *   *  
 *     * 
*       *
 *     * 
  *   *  
   * *   
    *    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def diamond(n, c='*'):
    for i in range(n):
        spc = i * 2 - 1
        if spc &gt;= n - 1:
            spc = n - spc % n - 4
        if spc &lt; 1:
            print(c.center(n))
        else:
            print((c + spc * ' ' + c).center(n))

if __name__ == '__main__':
    diamond(int(input("Input an odd integer: ")))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is not pretty, but its a function that does what you want: </p>
<pre><code>def make_diamond(size):
    if not size%2:
        raise ValueError('odd number required')
    r = [' ' * space + '*' + ' ' * (size-2-(space*2)) + '*' + ' ' * space for space in xrange((size-1)/2)]    
    r.append(' ' * ((size-1)/2) + '*' + ' ' * ((size-1)/2))
    return '\n'.join(r[-1:0:-1] + r)
</code></pre>
<ul>
<li>first i check to make sure its an odd number,</li>
<li>then i create a list of the lines from the center downwards.</li>
<li>then i create the last point.</li>
<li>then i return them as as a string, with a mirror of the bottom on top without the center line.</li>
</ul>
<p>output:</p>
<pre><code>&gt;&gt;&gt; print make_diamond(5)
  *  
 * * 
*   *
 * * 
  *  
&gt;&gt;&gt; print make_diamond(9)
    *    
   * *   
  *   *  
 *     * 
*       *
 *     * 
  *   *  
   * *   
    *   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Made it in one single loop ;) </p>
<pre><code>x = input("enter no of odd lines : ") #e.g. x=5
i = int(math.fabs(x/2)) # i=2 (loop for spaces before first star)
j = int(x-2) #j=3 # y &amp; j carry loops for spaces in between
y = int(x-3) #y=2 
print ( " " * i + "*" )
i = i-1 #i=1

while math.fabs(i) &lt;= math.fabs((x/2)-1): # i &lt;= 1
      b = int(j- math.fabs(y)) # b = (1, 3, 1) no of spaces in between stars
      a = int(math.fabs(i)) # a = (1, 0, 1) no of spaces before first star
      print (" "* a + "*" + " "*b + "*")
      y = y-2 # 2,0,-2
      i = i-1 # 1,0,-1, -2 (loop wont run for -2)

i = int(math.fabs(i)) # i = -2
print ( " " * i + "*")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The previous answer has got two corrections, which've been done here :</p>
<pre><code>import math
x = int(input("enter no of odd lines : ")) #e.g. x=5
i = int(math.fabs(x/2)) # i=2 (loop for spaces before first star)
j = int(x-2) #j=3 # y &amp; j carry loops for spaces in between
y = int(x-3) #y=2 
print ( " " * i + "*" )
i = i-1 #i=1

while math.fabs(i) &lt;= math.fabs((x/2)-1): # i &lt;= 1
    b = int(j- math.fabs(y)) # b = (1, 3, 1) no of spaces in between stars
    a = int(math.fabs(i)) # a = (1, 0, 1) no of spaces before first star
    print (" "* a + "*" + " "*b + "*")
    y = y-2 # 2,0,-2
    i = i-1 # 1,0,-1, -2 (loop wont run for -2)

i = int(math.fabs(i)) # i = -2
print ( " " * i + "*")
</code></pre>
<p>Note : Now this works for both python 2.5x and python 3.x
If you wish to know the difference in the two answers, then google it!</p>
</div>
<span class="comment-copy">Can you include the result from the current code? Seeing what it actually produces would make understanding and fixing it a little easier.</span>
<span class="comment-copy">ok.. I'll edit it...</span>
<span class="comment-copy">Note that <code>print</code> automatically adds a newline.  In order to suppress the automatic newline, you need a trailing comma in python2.x.  e.g. <code>print '*',</code> -- I don't think that will make your code start to work, but it's one step in the right direction.</span>
<span class="comment-copy">Why dont you think of your own algorithm doing this rather than converting C code?</span>
<span class="comment-copy">you should add a <code>,</code> after <code>print</code>s where you don't want a new line (just saw that mgilson made the same note)</span>
<span class="comment-copy">hi.. it really works.. but I don't really understand the code... :)  Thank you so much, I'll just research the syntax's meanings :)</span>
<span class="comment-copy">I added some more comments, hopefully it’s easier to understand now. If you have further questions, feel free to ask!</span>
<span class="comment-copy">yes.. thank you so much... :D</span>
<span class="comment-copy">Hi @poke, sorry to disturb again, I would like to ask what this line means: ('{:^%s}' % l).format(x)... I really don't get it... Thanks :)</span>
<span class="comment-copy">It’s basically two things at once: <code>'{:^%s}' % l</code> is using the <a href="http://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">%-formatting</a>; for <code>l=9</code> this basically results in <code>'{:^9}'</code>. Now that string is a <a href="http://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">format string</a> which, combined with <a href="http://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> basically just centeres whatever comes at the first argument to fit 9 (or <code>l</code>) characters. It pads both sides of the string equally with spaces.</span>
<span class="comment-copy">wow, a one liner. nice job man :) +1 mind=blown</span>
