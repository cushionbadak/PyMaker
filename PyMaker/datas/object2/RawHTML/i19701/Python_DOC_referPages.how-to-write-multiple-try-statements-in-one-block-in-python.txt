<div class="post-text" itemprop="text">
<p>I want to do:</p>
<pre><code>try:
    do()
except:
    do2()
except:
    do3()
except:
    do4()
</code></pre>
<p>If do() fails, execute do2(), if do2() fails too, exceute do3() and so on.</p>
<p>best Regards</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd write a quick wrapper function <code>first()</code> for this. </p>
<p><strong>usage</strong>: <code>value = first([f1, f2, f3, ..., fn], default='All failed')</code></p>
<pre><code>#!/usr/bin/env


def first(flist, default=None):

    """ Try each function in `flist` until one does not throw an exception, and
    return the return value of that function. If all functions throw exceptions,
    return `default` 

    Args: 
        flist - list of functions to try
        default - value to return if all functions fail

    Returns:
        return value of first function that does not throw exception, or
        `default` if all throw exceptions.

    TODO: Also accept a list of (f, (exceptions)) tuples, where f is the
    function as above and (exceptions) is a tuple of exceptions that f should
    expect. This allows you to still re-raise unexpected exceptions.
    """

    for f in flist:
        try:
            return f()
        except:
            continue
    else:
        return default

# Testing.

def f():
    raise TypeError

def g():
    raise IndexError

def h():
    return 1


# We skip two exception-throwing functions and return value of the last.
assert first([f, g, h]) == 1

assert first([f, g, f], default='monty') == 'monty'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really don't care about the exceptions, you could loop over cases until you succeed:</p>
<pre><code>for fn in (do, do2, do3, do4):
    try:
        fn()
        break
    except:
        continue
</code></pre>
<p>This at least avoids having to indent once for every case. If the different functions need different arguments you can use functools.partial to 'prime' them before the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like a really odd thing to want to do, but I would probably loop over the functions and break out when there were no exception raised:</p>
<pre><code>for func in [do, do2, do3]:
    try:
        func()
    except Exception:
        pass
    else:
        break 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should specify the type of the exception you are trying to catch each time.</p>
<pre><code>try:
    do()
except TypeError: #for example first one - TypeError
    do_2()
except KeyError: #for example second one - KeyError
    do_3()
</code></pre>
<p>and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the simplest way I found, just embed the try under the previous except.</p>
<pre><code>try:
    do()
except:
    try:
        do2()
    except:
        do3()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys

try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except OSError as err:
    print("OS error: {0}".format(err))
except ValueError:
    print("Could not convert data to an integer.")
except:
    print("Unexpected error:", sys.exc_info()[0])
    raise
</code></pre>
</div>
<span class="comment-copy">I have a feeling that describing your specific use case will lead to an answer with a more elegant solution...</span>
<span class="comment-copy"><code>pass</code> should be <code>continue</code> perhaps?  Works as written but <code>continue</code> is semantically clearer.</span>
<span class="comment-copy">@Triptych True, that does signal intent better. Edited answer.</span>
<span class="comment-copy">Creat, but what's else here for? it seem redundant here.</span>
<span class="comment-copy">The <code>else</code> will only execute when there isn't an exception. If there's an exception the for will continue whereas if there wasn't an exception the <code>break</code> will execute. :)  A lot of statements in Python takes an <code>else</code> with the intention of "if everything went well, then do this".   See the documentation for the <code>try</code> statement: <a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="nofollow noreferrer">docs.python.org/3/reference/compound_stmts.html#try</a></span>
<span class="comment-copy">If I don't know the type of the exception?</span>
<span class="comment-copy">@alwbic: If you don't know the type of the exception, you don't know how to handle the exception.</span>
<span class="comment-copy">@alwbic I am really sure that you must know what type(s) of exception(s) do you expect.</span>
<span class="comment-copy">I don't agree with you. I know that my statement will fail, but i don't know in which order they will fail. But I know what to do if it fails.</span>
<span class="comment-copy">@alwbic: It is just a bad practice "Do something if something fails", you don't now why it fails.</span>
<span class="comment-copy">This doesn't answer the question at all!</span>
