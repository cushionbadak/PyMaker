<div class="post-text" itemprop="text">
<p>I'm a beginner to programming and work with Python. At the moment I'm trying to understand some code from Jurafsky and Martin's 2008 book on Speech and Language Processing (exercise 13.1 on syntactic parsing). I'll copy it below (apart from the last 4 lines, I didn't write this code myself).</p>
<p>My question is quite simple: instead of printing grammar rules, I get output like this:</p>
<pre><code>set([&lt;__main__.Rule object at 0x011E1810&gt;, &lt;__main__.Rule object at 0x011E1790&gt;, &lt;__main__.Rule object at 0x011E15F0&gt;, ...)
</code></pre>
<p>I know I should do something with <strong>str</strong>(self), but I tried a few things and still don't get a normal output. I suspect the solution is quite simple, but I just don't know what to do. Any help is very much appreciated. Probably you don't need to read and understand all the code below to see what is not working.</p>
<p>Thanks a lot!</p>
<pre><code>def chomsky_normal_form(grammar):
    grammar = set(grammar)
    nonterminals = set(rule.head for rule in grammar)

    # remove single symbol nonterminal rules
    for rule, symbol in _unary_rules(grammar, nonterminals):
        grammar.discard(rule)
        for rule2 in _rules_headed_by(grammar, symbol):
            grammar.add(Rule(rule.head, tuple(rule2.symbols)))
        if all(symbol not in rule.symbols for rule in grammar):
            for rule2 in _rules_headed_by(grammar, symbol):
                grammar.discard(rule2)

    # move terminals to their own rules
    for rule in list(grammar):
        if len(rule.symbols) &gt;= 2:
            for i, symbol in enumerate(rule.symbols):
                if all(rule.head != symbol for rule in grammar):
                    rule = _new_symbol(grammar, rule, i, i + 1)

    # ensure there are only two nonterminals per rule
    for rule in _multi_symbol_rules(grammar):
        _new_symbol(grammar, rule, 0, 2)

    # return the grammar in CNF
    return grammar

# find A -&gt; B rules, allowing concurrent modifications
def _unary_rules(grammar, nonterminals):
    while True:
        g = ((rule, rule.symbols[0])
            for rule in grammar
            if len(rule.symbols) == 1
            if rule.symbols[0] in nonterminals)
        yield g.next()

# find all rules headed by the given symbol
def _rules_headed_by(grammar, symbol):
    return [rule for rule in grammar if rule.head == symbol]

# create a new symbol which derives the given span of symbols
def _new_symbol(grammar, rule, start, stop):
    symbols = rule.symbols
    new_head = '_'.join(symbols[start:stop]).upper()
    new_symbols = symbols[:start] + (new_head,) + symbols[stop:]
    new_rule = Rule(rule.head, new_symbols)
    grammar.discard(rule)
    grammar.add(new_rule)
    grammar.add(Rule(new_head, symbols[start:stop]))
    return new_rule

# find A -&gt; BCD... rules, allowing concurrent modifications
def _multi_symbol_rules(grammar):
    while True:
        g = (rule for rule in grammar if len(rule.symbols) &gt;= 3)
        yield g.next()

# representation of a rule A -&gt; B...C
class Rule(object):
    def __init__(self, head, symbols):
        self.head = head
        self.symbols = symbols
        self._key = head, symbols
    def __eq__(self, other):
        return self._key == other._key
    def __hash__(self):
        return hash(self._key)
    def __str__(self):
        rep = grammar_cnf
        return rep

# build a grammar from a string of lines like "X -&gt; YZ | b"
def get_grammar(string):
    grammar = set()
    for line in string.splitlines():
        head, symbols_str = line.split(' -&gt; ')
        for symbols_str in symbols_str.split(' | '):
            symbols = tuple(symbols_str.split())
            grammar.add(Rule(head, symbols))
    return grammar


grammar = get_grammar("""S -&gt; NP VP | Aux NP VP | VP
NP -&gt; Pronoun | Proper-Noun | Det Nominal
Nominal -&gt; Noun | Nominal Noun | Nominal PP
VP -&gt; Verb | Verb NP | Verb NP PP | Verb PP | VP PP
PP -&gt; Preposition NP
Det -&gt; that | this | a
Noun -&gt; book | flight | meal | money
Verb -&gt; book | include | prefer
Pronoun -&gt; I | she | me
Proper-Noun -&gt; Houston | TWA
Aux -&gt; does
Preposition -&gt; from | to | on | near | through""")

grammar_cnf = chomsky_normal_form(grammar)
print(grammar_cnf)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can implemetn <a href="http://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow"><code>__repr__</code></a> in your Rule class</p>
<p>you can use <code>__str__</code> for the informal representation, (if <strong>str</strong> isn't present it falls back to <strong>repr</strong></p>
<p>these are done something like:</p>
<pre><code>class Rule(object):

   def __init__(self, name):
     self.name = name

   def __repr__(self):
      return 'Rule({0})'.format(self.name)    

   def __str__(self):
     return self.name


rule = Rule('test')
print(rule) # test
</code></pre>
</div>
<span class="comment-copy">Thanks a lot! I can print a list of tuples now, although I was actually hoping to print rules in the form of A --&gt; b | CD. But I'll look into that and maybe come back. Thanks again!</span>
