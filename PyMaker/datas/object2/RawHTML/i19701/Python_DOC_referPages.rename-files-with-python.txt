<div class="post-text" itemprop="text">
<p>I am trying to use python to rename over 1000 files in a windows directory that have this naming convention:</p>
<pre><code>The.Woman.In.Black.2012.720p.BluRay.x264
</code></pre>
<p><strong>The desired naming convention is:</strong> <code>The Woman In Black {2012}</code></p>
<p>The only important things I need from the original name are the title and date....</p>
<p>I have tried using different variations of string manipulation and I am not getting anywhere. I need help getting started.</p>
<p>I understand I should use the os module to rename files, but what procedure should I try and use to do this task?</p>
<p>Any help would be greatly appreciated. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def change_filename(name):
    filename = name.split('.')
    wordlist = filename[:-4]
    extension = '.' + filename[-1]
    wordlist[-1] = '{' + wordlist[-1] + '}'
    os.rename(name, ' '.join(wordlist) + extension)
</code></pre>
<p>This function should do exactly what you want, you just need to feed it the names.</p>
<p>Note: you probably want to add a file extension on to the filename, otherwise it might go wonky and everything.</p>
<p>If you run this on the same file more than once, you'll get a file overloaded with braces, and you don't want that, so here's a reversal function:</p>
<pre><code>def filename_cleanup(name):
    filename = name.replace('{', '').replace('}', '')
    wordlist = filename.split(' ')
    extension = '.' + wordlist.pop()
    wordlist[-1] = '{' + wordlist[-1] + '}'
    os.rename(name, ' '.join(wordlist) + extension)
</code></pre>
<p>That should give you the proper filename again.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>filename = 'The.Woman.In.Black.2012.720p.BluRay.x264'

# using regular expressions
import re
title, year = re.match('(.*?)\.(\d{4})\.720p\.BluRay\.x264', filename).groups()

# simpler regular expression, matching any format specifiers
title, year = re.match('(.+)\.(\d{4})\.', filename).groups()

# using simple string manipulation if the suffix is always the same
title, year = filename[:-22], filename[-21:-17]

# normalize title
title = title.replace('.', ' ')

# build new filename
print('%s {%s}' % (title, year)) # The Woman In Black {2012}
</code></pre>
<p>To rename files, use <a href="http://docs.python.org/3/library/os.html#os.rename" rel="nofollow"><code>os.rename</code></a>; to iterate through a directory, use <a href="http://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow"><code>glob.glob</code></a> or <a href="http://docs.python.org/3/library/os.html#os.walk" rel="nofollow"><code>os.walk</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like the general format of your titles is:</p>
<pre><code>name.name.name.name.name.date.resolution.format.codec
</code></pre>
<p>in which case I would do this (not tested):</p>
<pre><code>import os

TARGET_DIR = r'/path/to/movies/'

for old_title in os.listdir(TARGET_DIR + '*'):
    words = old_title.split('.')
    date = words[-4]
    name = ' '.join(words[:-4])
    new_title = '%s {%s}' % (name, date)
    old_title = os.path.join(TARGET_DIR, old_title)
    new_title = os.path.join(TARGET_DIR, new_title)
    os.rename(old_title, new_title)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the original naming convention is consistent, you could <a href="http://www.tutorialspoint.com/python/string_split.htm" rel="nofollow noreferrer">split</a> the original filename string on the '.' character, and then look for a valid year, add the braces, and <a href="http://www.tutorialspoint.com/python/string_join.htm" rel="nofollow noreferrer">join</a> it with all the preceding tokens to form the new name.</p>
<p>See <a href="https://stackoverflow.com/questions/2491222/how-to-rename-a-file-using-python">this question</a> for how to rename a file using python.</p>
</div>
<span class="comment-copy">What have you attempted?</span>
<span class="comment-copy">What is your problem,  you want to know how to rename or you want the way to convert file name to your desired format?</span>
<span class="comment-copy">Do they all end with <code>YYYY.720p.BluRay.x264</code>?</span>
<span class="comment-copy">Advice: check your code <b>before</b> you rename all your files, a process like this is unlikely to work perfectly automatically in every case (I suspect there will be some corner cases). e.g. check <code>set(years)</code>...</span>
<span class="comment-copy">One more question... If I re-run the script multiple times, it keeps adding a layer of '{}' around the file name. For example... after testing and running the script many times, The files now are like so: {{{{{{{{Vacancy {2007} {mp4}}}}}}}}}. How can I prevent this behavior?</span>
<span class="comment-copy">If you run it on the same file over and over again, it'll stuff up. For example, if we feed <code>'The Woman In Black {2012}.mp4'</code> into the function, we split on every <code>'.'</code>, and <code>filename</code> becomes <code>['The Woman In Black {2012}', 'mp4'], then it puts braces around </code>'mp4'` and gets rid of the file extension. If you run it again there is no <code>'.'</code> to split the file into and so the braces will go around the whole file name.</span>
<span class="comment-copy">In this case, I am running it on the entire directory by putting the .py in the same directory and executing it.  I've botched all the names now, how would you recover from here?</span>
<span class="comment-copy">You'll probably have to get rid of all the braces, and then go from there. Do you need the code?</span>
<span class="comment-copy">I hate to admit it but... yea.</span>
<span class="comment-copy">The second re -- <code>'(.+)\.(\d{4})'</code> --  will fail if the resolution is four or more digits.</span>
<span class="comment-copy">@EthanFurman Good point, fixed by a subsequent dot.</span>
