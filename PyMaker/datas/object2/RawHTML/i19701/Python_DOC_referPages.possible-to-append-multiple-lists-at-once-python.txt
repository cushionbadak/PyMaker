<div class="post-text" itemprop="text">
<p>I have a bunch of lists I want to append to a single list that is sort of the "main" list in a program I'm trying to write. Is there a way to do this in one line of code rather than like 10? I'm a beginner so I have no idea...</p>
<p>For a better picture of my question, what if I had these lists:</p>
<pre><code>x = [1, 2, 3]
y = [4, 5, 6]
z = [7, 8, 9]
</code></pre>
<p>And want to append y and z to x. Instead of doing:</p>
<pre><code>x.append(y)
x.append(z)
</code></pre>
<p>Is there a way to do this in one line of code? I already tried:</p>
<pre><code>x.append(y, z)
</code></pre>
<p>And it wont work.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x.extend(y+z)
</code></pre>
<p>should do what you want</p>
<p>or </p>
<pre><code>x += y+z
</code></pre>
<p>or even</p>
<pre><code>x = x+y+z
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Extending my comment</p>
<pre><code>In [1]: x = [1, 2, 3]
In [2]: y = [4, 5, 6]
In [3]: z = [7, 8, 9]
In [4]: from itertools import chain
In [5]: print list(chain(x,y,z))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sum</code> function with start value (empty list) indicated:</p>
<pre><code>a = sum([x, y, z], [])
</code></pre>
<p>This is especially more suitable if you want to append an arbitrary number of lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>equivalent to above answer, but sufficiently different to be worth a mention:</p>
<pre><code>my_map = {
   'foo': ['a', 1, 2],
   'bar': ['b', '2', 'c'],
   'baz': ['d', 'e', 'f'],
} 
list(itertools.chain(*my_map.values()))
['d', 'e', 'f', 'a', 1, 2, 'b', '2', 'c']
</code></pre>
<p>in the above expression, * is important for groking result as args to chain, this is same as prior chain(x,y,z). Also, note the result is hash-ordered.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you prefer a slightly more functional approach, you could try:</p>
<pre><code>import functools as f

x = [1, 2, 3]
y = [4, 5, 6]
z = [7, 8, 9]

x = f.reduce(lambda x, y: x+y, [y, z], x)
</code></pre>
<p>This will enable you to concatenate any number of lists onto list <code>x</code>.</p>
<p>If you would just like to concatenate any number of lists together (i.e. not onto some base list), you can simplify to:</p>
<pre><code>import functools as f
from operator import add
big_list = f.reduce(add, list_of_lists)
</code></pre>
<p>Take note that our BFDL has his reservations with regard to lambdas, reduce, and friends: <a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">https://www.artima.com/weblogs/viewpost.jsp?thread=98196</a></p>
<p>To complete this answer, you can read more about reduce in the documentation: <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">https://docs.python.org/3/library/functools.html#functools.reduce</a></p>
<p>I quote: "Apply function of two arguments cumulatively to the items of sequence, from left to right, so as to reduce the sequence to a single value."</p>
<p>P.S. Using <code>sum()</code> as described in <a href="https://stackoverflow.com/a/41752487/532513">https://stackoverflow.com/a/41752487/532513</a> is super compact, it does seem to work with lists, and is really fast (see <a href="https://stackoverflow.com/a/33277438/532513">https://stackoverflow.com/a/33277438/532513</a> ) but <code>help(sum)</code> in Python 3.6 has the following to say:</p>
<blockquote>
<p>This function is intended specifically for use with numeric values and may reject non-numeric types.</p>
</blockquote>
<p>Although this is slightly worrying, I will probably keep it as my first option for concatenating lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>In one line , it can be done in following ways </p>
<pre><code>x.extend(y+z)
</code></pre>
<p>or </p>
<pre><code>x=x+y+z
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To exactly replicate the effect of append, try the following function, simple and effective:</p>
<pre><code>a=[]
def concats (lists):
    for i in lists:
        a==a.append(i)


concats ([x,y,z])
print(a)
</code></pre>
</div>
<span class="comment-copy">Do you really want <code>.append</code>, or <code>.extend</code>? Do you understand the difference?</span>
<span class="comment-copy">What output do you expect?</span>
<span class="comment-copy">No, I have never seen .extend before, what does it do?</span>
<span class="comment-copy">What do you think about itertools.<a href="http://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow noreferrer">chain</a> ?</span>
<span class="comment-copy"><code>.append</code> will add an element to the list. <code>.extend</code> will concatenate a list to a list.</span>
<span class="comment-copy">Note the last one is subtly different - you are creating a new list and assigning it to <code>x</code>, as opposed to changing <code>x</code> in place.</span>
<span class="comment-copy">I tried .extend and it worked perfectly. Thanks for the help.</span>
<span class="comment-copy">the extend method keeps returning None for me.</span>
<span class="comment-copy">it modifies ... it doesnt return anything ...</span>
<span class="comment-copy">Simple form of the itertools option which I found useful: <code>itertools.chain([1, 2, 3], [4, 5, 6], [7, 8, 9])</code> = <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code></span>
