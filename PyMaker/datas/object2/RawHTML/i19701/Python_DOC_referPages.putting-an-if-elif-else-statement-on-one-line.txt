<div class="post-text" itemprop="text">
<p>I have read the links below, but it doesn't address my question.<br/>
<a href="https://stackoverflow.com/questions/394809/python-ternary-operator">Does Python have a ternary conditional operator?</a> (the question is about  condensing if-else statement to one line)<br/></p>
<p>Is there an easier way of writing an if-elif-else statement so it fits on one line?<br/>
For example,</p>
<pre><code>if expression1:
   statement1
elif expression2:
   statement2
else:
   statement3
</code></pre>
<p><strong>[UPDATE]</strong></p>
<pre><code>if i&gt;100:
    x=2
elif i&lt;100:
    x=1
else:
    x=0
</code></pre>
<p>I just feel if the example above could be written the following way, it could look like more concise.</p>
<pre><code>x=2 if i&gt;100 elif i&lt;100 1 else 0 [WRONG]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, it's not possible (at least not with arbitrary statements), nor is it desirable. Fitting everything on one line would most likely violate <a href="http://www.python.org/dev/peps/pep-0008/">PEP-8</a> where it is mandated that lines should not exceed 80 characters in length.</p>
<p>It's also against the Zen of Python: "Readability counts". (Type <code>import this</code> at the Python prompt to read the whole thing).</p>
<p>You <em>can</em> use a ternary expression in Python, but only for expressions, not for statements:</p>
<pre><code>&gt;&gt;&gt; a = "Hello" if foo() else "Goodbye"
</code></pre>
<p><strong>Edit:</strong></p>
<p>Your revised question now shows that the three statements are identical except for the value being assigned. In that case, a chained ternary operator does work, but I still think that it's less readable:</p>
<pre><code>&gt;&gt;&gt; i=100
&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0
&gt;&gt;&gt; a
0
&gt;&gt;&gt; i=101
&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0
&gt;&gt;&gt; a
2
&gt;&gt;&gt; i=99
&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0
&gt;&gt;&gt; a
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you only need different expressions for different cases then this may work for you:</p>
<pre><code>expr1 if condition1 else expr2 if condition2 else expr
</code></pre>
<p>For example:</p>
<pre><code>a = "neg" if b&lt;0 else "pos" if b&gt;0 else "zero"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just nest another if clause in the else statement.  But that doesn't make it look any prettier.</p>
<pre><code>&gt;&gt;&gt; x=5
&gt;&gt;&gt; x if x&gt;0 else ("zero" if x==0 else "invalid value")
5
&gt;&gt;&gt; x = 0
&gt;&gt;&gt; x if x&gt;0 else ("zero" if x==0 else "invalid value")
'zero'
&gt;&gt;&gt; x = -1
&gt;&gt;&gt; x if x&gt;0 else ("zero" if x==0 else "invalid value")
'invalid value'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's an alternative that's quite unreadable in my opinion but I'll share anyway just as a curiosity:</p>
<pre><code>x = (i&gt;100 and 2) or (i&lt;100 and 1) or 0
</code></pre>
<p>More info here: <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can optionally actually use the <code>get</code> method of a <code>dict</code>:</p>
<pre><code>x = {i&lt;100: -1, -10&lt;=i&lt;=10: 0, i&gt;100: 1}.get(True, 2)
</code></pre>
<p>You don't need the <code>get</code> method if one of the keys is guaranteed to evaluate to <code>True</code>:</p>
<pre><code>x = {i&lt;0: -1, i==0: 0, i&gt;0: 1}[True]
</code></pre>
<p>At most one of the keys should ideally evaluate to <code>True</code>. If more than one key evaluates to <code>True</code>, the results could seem unpredictable.</p>
</div>
<div class="post-text" itemprop="text">
<p>It also depends  on teh nature of your expressions. The general advice on the other answers of "not doing it" is quite valid for generic statements and generic expressions.</p>
<p>But if all you need is a "dispacth" table, like, calling a different function depending on the value of a given option, you can put the functions to call inside a dictionary. </p>
<p>Something like:</p>
<pre><code>def save(): 
   ...
def edit():
   ...
options = {"save": save, "edit": edit, "remove": lambda : "Not Implemented"}

option = get_input()
result = options[option]()
</code></pre>
<p>(that  instead of</p>
<pre><code>if option=="save":
    save()
...
</code></pre>
<p>)</p>
</div>
<div class="post-text" itemprop="text">
<p>People have already mentioned ternary expressions. Sometimes with a simple conditional assignment as your example, it is possible to use a mathematical expression to perform the conditional assignment. This may not make your code very readable, but it does get it on one fairly short line. Your example could be written like this:</p>
<pre><code>x = 2*(i&gt;100) | 1*(i&lt;100)
</code></pre>
<p>The comparisons would be True or False, and when multiplying with numbers would then be either 1 or 0. One could use a + instead of an | in the middle.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if i &gt; 100:
    x = 2
elif i &lt; 100:
    x = 1
else:
    x = 0
</code></pre>
<p>If you want to use the above-mentioned code in one line, you can use the following:  </p>
<pre><code>x = 2 if i &gt; 100 else 1 if i &lt; 100 else 0
</code></pre>
<p>On doing so, x will be assigned 2 if i &gt; 100, 1 if i &lt; 100 and 0 if i = 100</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use nested ternary if statements.</p>
<pre><code># if-else ternary construct
country_code = 'USA'
is_USA = True if country_code == 'USA' else False
print('is_USA:', is_USA)

# if-elif-else ternary construct
# Create function to avoid repeating code.
def get_age_category_name(age):
    age_category_name = 'Young' if age &lt;= 40 else ('Middle Aged' if age &gt; 40 and age &lt;= 65 else 'Senior')
    return age_category_name

print(get_age_category_name(25))
print(get_age_category_name(50))
print(get_age_category_name(75))
</code></pre>
</div>
<span class="comment-copy">Why didn't the second expression return 0? <i>i</i> is above 100</span>
<span class="comment-copy">@AstralWolf: Yes, and the expression says <code>2 if i&gt;100</code>...</span>
<span class="comment-copy">Hmmh, read that as <code>if i&gt;100 else 0</code> nevermind get it now</span>
<span class="comment-copy">@AstralWolf: Thank you very much! This perfectly illustrates the point I was trying to make - a chained ternary expression is possible but less readable, and obviously easy to misunderstand.</span>
<span class="comment-copy">If you need it to be more readable, you could put brackets around it, like this: <code>a = 1 if i &lt; 100 else (2 if i &gt; 100 else 0)</code> (Untested, but I think it should work)</span>
<span class="comment-copy"><code>"pos"</code> is <i>not</i> a statement, it's an expression.</span>
<span class="comment-copy">@TimPietzcker Thank's, I updated the post to be more accurate.</span>
<span class="comment-copy">For me, this is much more readable than the accepted answer because it maintains the structure and concept of the first clause; just subjective matter.</span>
<span class="comment-copy">This looks like canonical javascript ;-)</span>
