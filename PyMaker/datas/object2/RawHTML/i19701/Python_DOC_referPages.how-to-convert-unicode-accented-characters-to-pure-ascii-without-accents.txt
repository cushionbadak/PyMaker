<div class="post-text" itemprop="text">
<p>I'm trying to download some content from a dictionary site like <a href="http://dictionary.reference.com/browse/apple?s=t" rel="noreferrer">http://dictionary.reference.com/browse/apple?s=t</a></p>
<p>The problem I'm having is that the original paragraph has all those squiggly lines, and reverse letters, and such, so when I read the local files I end up with those funny escape characters like \x85, \xa7, \x8d, etc. </p>
<p>My question is, is there any way i can convert all those escape characters into their respective UTF-8 characters, eg if there is an 'à' how do i convert that into a standard 'a' ?</p>
<p>Python calling code:</p>
<pre><code>import os
word = 'apple'
os.system(r'wget.lnk --directory-prefix=G:/projects/words/dictionary/urls/ --output-document=G:\projects\words\dictionary\urls/' + word + '-dict.html http://dictionary.reference.com/browse/' + word)
</code></pre>
<p>I'm using wget-1.11.4-1 on a Windows 7 system (don't kill me Linux people, it was a client requirement), and the wget exe is being fired off with a Python 2.6 script file.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>how do i convert all those escape characters into their respective characters like if there is an unicode <strong>à</strong>, how do i convert that into a standard <strong>a</strong>?</p>
</blockquote>
<p>Assume you have loaded your unicode into a variable called <code>my_unicode</code>... normalizing à into a is this simple...</p>
<pre><code>import unicodedata
output = unicodedata.normalize('NFD', my_unicode).encode('ascii', 'ignore')
</code></pre>
<p>Explicit example...</p>
<pre><code>&gt;&gt;&gt; myfoo = u'àà'
&gt;&gt;&gt; myfoo
u'\xe0\xe0'
&gt;&gt;&gt; unicodedata.normalize('NFD', myfoo).encode('ascii', 'ignore')
'aa'
&gt;&gt;&gt;
</code></pre>
<p><strong>How it works</strong><br/>
<code>unicodedata.normalize('NFD', "insert-unicode-text-here")</code> performs a <a href="http://unicode.org/reports/tr15/" rel="noreferrer">Canonical Decomposition (NFD)</a> of the unicode text; then we use <code>str.encode('ascii', 'ignore')</code> to transform the NFD mapped characters into ascii (ignoring errors).</p>
</div>
<div class="post-text" itemprop="text">
<p>I needed something like this but to <strong>remove only accented characters</strong>, ignoring special ones and I did this small function:</p>
<pre><code># ~*~ coding: utf-8 ~*~
import re

def remove_accents(string):
    if type(string) is not unicode:
        string = unicode(string, encoding='utf-8')

    string = re.sub(u"[àáâãäå]", 'a', string)
    string = re.sub(u"[èéêë]", 'e', string)
    string = re.sub(u"[ìíîï]", 'i', string)
    string = re.sub(u"[òóôõö]", 'o', string)
    string = re.sub(u"[ùúûü]", 'u', string)
    string = re.sub(u"[ýÿ]", 'y', string)

    return string
</code></pre>
<p>I like that function because you can customize it in case you need to ignore other characters </p>
</div>
<div class="post-text" itemprop="text">
<p>The given URL returns UTF-8 as the HTTP response clearly indicates:</p>
<pre><code>wget -S http://dictionary.reference.com/browse/apple?s=t
--2013-01-02 08:43:40--  http://dictionary.reference.com/browse/apple?s=t
Resolving dictionary.reference.com (dictionary.reference.com)... 23.14.94.26, 23.14.94.11
Connecting to dictionary.reference.com (dictionary.reference.com)|23.14.94.26|:80... connected.
HTTP request sent, awaiting response... 
  HTTP/1.1 200 OK
  Server: Apache
  Cache-Control: private
  Content-Type: text/html;charset=UTF-8
  Date: Wed, 02 Jan 2013 07:43:40 GMT
  Transfer-Encoding:  chunked
  Connection: keep-alive
  Connection: Transfer-Encoding
  Set-Cookie: sid=UOPlLC7t-zl20-k7; Domain=reference.com; Expires=Wed, 02-Jan-2013 08:13:40 GMT; Path=/
  Set-Cookie: cu.wz=0; Domain=.reference.com; Expires=Thu, 02-Jan-2014 07:43:40 GMT; Path=/
  Set-Cookie: recsrch=apple; Domain=reference.com; Expires=Tue, 02-Apr-2013 07:43:40 GMT; Path=/
  Set-Cookie: dcc=*~*~*~*~*~*~*~*~; Domain=reference.com; Expires=Thu, 02-Jan-2014 07:43:40 GMT; Path=/
  Set-Cookie: iv_dic=1-0; Domain=reference.com; Expires=Thu, 03-Jan-2013 07:43:40 GMT; Path=/
  Set-Cookie: accepting=1; Domain=.reference.com; Expires=Thu, 02-Jan-2014 07:43:40 GMT; Path=/
  Set-Cookie: bid=UOPlLC7t-zlrHXne; Domain=reference.com; Expires=Fri, 02-Jan-2015 07:43:40 GMT; Path=/
Length: unspecified [text/html]
</code></pre>
<p>Investigating the saved file using vim also reveals that the data is correctly utf-8 encoded...the same is true fetching the URL using Python.</p>
</div>
<span class="comment-copy">show your python codes please .</span>
<span class="comment-copy">Converting 'à' to 'a' is not like converting to UTF-8. <a href="http://en.wikipedia.org/wiki/UTF-8" rel="nofollow noreferrer">UTF-8</a> is in fact a text encoding designed to encode characters like 'à' which fall outside the <a href="http://en.wikipedia.org/wiki/ASCII" rel="nofollow noreferrer">basic ASCII character set</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/517923/what-is-the-best-way-to-remove-accents-in-a-python-unicode-string">What is the best way to remove accents in a Python unicode string?</a></span>
<span class="comment-copy">Thats great Mike. This may be a bit of a nooby python question, but, is it possible to insert a string, and for the unicodedata.norm function to find any unicode escape chars, and normalize them? or do i just have to regex the unicode out and normalize each one?</span>
<span class="comment-copy">When you call <code>unicodedata.normalize()</code> as I did above, it finds all unicode and normalizes them into ASCII.  All you need to do is read the unicode file into a string, call <code>unicodedata.normalize()</code> on that string, and save the output to a new filename.</span>
<span class="comment-copy">Actually, <code>unicodedata.normalize()</code> does not convert the string to ASCII; it performs the canonical decomposition (basically breaking multi-part characters into components); see <a href="https://docs.python.org/3.6/library/unicodedata.html#unicodedata.normalize" rel="nofollow noreferrer">docs (Python 3.6)</a>. The <code>str.encode('ascii', 'ignore')</code> function converts to ASCII, ignoring errors that would otherwise occur with non-ASCII characters. See docs on <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow noreferrer">str.encode</a> and <a href="https://docs.python.org/3/library/codecs.html#error-handlers" rel="nofollow noreferrer">error handlers</a>.</span>
<span class="comment-copy">Thank you for correcting my comment above.  I took the liberty of editing this information into my answer.</span>
<span class="comment-copy">SyntaxError: Non-ASCII character '\xc3' in file source.py on line 65, but no encoding declared; see <a href="http://www.python.org/peps/pep-0263.html" rel="nofollow noreferrer">python.org/peps/pep-0263.html</a> for details</span>
<span class="comment-copy">Need to ad to the beginning of file: # -<i>- coding: utf-8 -</i>-</span>
<span class="comment-copy">You're right, I updated the answer. Thanks</span>
