<div class="post-text" itemprop="text">
<p>I am looking for a Pythonic way (the less code possible) to unite the content of two dictionnaries :</p>
<pre><code>basket1 = {"ham":2,"eggs":3}
basket2 = {"eggs":4,"spam":1}
</code></pre>
<p>I want to get a third basket that is going to be the "sum" of the two other, basket 3 should be:</p>
<pre><code>basket3 --&gt; {"ham":2,"eggs":7,"spam":1}
</code></pre>
<p>If possible, doing this using <code>set</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I'd use a <code>Counter</code>, which is a kind of <code>defaultdict</code> with some nice properties:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; basket1 = {"ham":2,"eggs":3}
&gt;&gt;&gt; basket2 = {"eggs":4,"spam":1}
&gt;&gt;&gt; basket_sum = Counter(basket1) + Counter(basket2)
&gt;&gt;&gt; basket_sum
Counter({'eggs': 7, 'ham': 2, 'spam': 1})
</code></pre>
<p>which you could convert back into a pure <code>dict</code> if you wanted:</p>
<pre><code>&gt;&gt;&gt; dict(basket_sum)
{'eggs': 7, 'ham': 2, 'spam': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're trying to count the values, use <code>collections.Counter</code>:</p>
<pre><code>basket3 = collections.Counter(basket1)
basket3.update(basket2)
</code></pre>
<p>Or:</p>
<pre><code>basket3 = collections.Counter(basket1) + collections.Counter(basket2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [2]: basket1 = {"ham":2,"eggs":3}

In [3]: basket2 = {"eggs":4,"spam":1}

In [4]: baskets = [basket1, basket2]

In [5]: answer = collections.defaultdict(int)

In [6]: for basket in baskets:
   ...:     for item in basket:
   ...:         answer[item] += basket[item]
   ...:         

In [7]: answer
Out[7]: defaultdict(&lt;type 'int'&gt;, {'eggs': 7, 'ham': 2, 'spam': 1})

In [8]: dict(answer)
Out[8]: {'eggs': 7, 'ham': 2, 'spam': 1}
</code></pre>
</div>
<span class="comment-copy">+1, beat me to it. Also, the usual link <a href="http://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">to the reference</a>.</span>
<span class="comment-copy">+1. Didn't know about <code>Counter</code>. Nice.</span>
<span class="comment-copy">Interesting use of counter</span>
<span class="comment-copy">@Speccy: not directly.  But if you write a helper function to convert a list of <code>Food</code> instances to a dict, like <code>def basket_to_dict(basket): return {f.name: f.quantity for f in basket}</code>, then somethiing like <code>[Food(n,q) for n,q in (Counter(basket_to_dict(b1)) + Counter(basket_to_dict(b2))).iteritems()]</code> should work.  (Python &gt;= 2.7.)</span>
<span class="comment-copy">@Speccy: See the new version.</span>
<span class="comment-copy">+1 for showing the <code>update</code> method. It is useful to know that <code>update</code> behaves differently for <code>Counter</code> type dicts.</span>
<span class="comment-copy">Thanks, I will go for the most upvoted answer, which is basically the same as yours</span>
<span class="comment-copy">@Speccy: It's probably better than mine for future searchers, because it shows more detail, so it was the right one to accept.</span>
<span class="comment-copy">@abarnert, Would something like this work if I have for example a list of instances of the Food class (with properties name and quantity) and I wanted to remove the duplicate and update the total quantity for each unique instance of the Food class in the list?</span>
<span class="comment-copy">What is needed is the <i>sum</i> of the values for duplicate keys in the various dictionaries, not the number of dictionaries containing that particular key.</span>
<span class="comment-copy">I think this could be repaired by changing <code>answer[item] += 1</code> to <code>answer[item] += basket[item]</code>.</span>
<span class="comment-copy">That's what I meant to do. Fixed!</span>
<span class="comment-copy">Wait, how can you get <code>eggs</code> of 9?</span>
<span class="comment-copy">@DSM: That was a leaked <code>answer</code> from the previous trial. See updated</span>
