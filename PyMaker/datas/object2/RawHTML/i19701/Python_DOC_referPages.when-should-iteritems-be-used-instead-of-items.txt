<div class="post-text" itemprop="text">
<p>Is it legitimate to use <code>items()</code> instead of <code>iteritems()</code> in all places? Why was <code>iteritems()</code> removed from Python 3? Seems like a terrific and useful method. What's the reasoning behind it?</p>
<p><strong>Edit:</strong> To clarify, I want to know what is the correct idiom for iterating over a dictionary in a generator-like way (one item at a time, not all into memory) in a way that is compatible with both Python 2 and Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.x - <a href="https://docs.python.org/2/library/stdtypes.html#dict.items"><code>.items()</code></a> returned a list of (key, value) pairs. In Python 3.x, <a href="https://docs.python.org/3/library/stdtypes.html#dict.items"><code>.items()</code></a> is now an <code>itemview</code> object, which behaves different - so it <strong>has</strong> to be iterated over, or materialised... So, <code>list(dict.items())</code> is required for what was <code>dict.items()</code> in Python 2.x.</p>
<p>Python 2.7 also has a bit of a back-port for key handling, in that you have <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewkeys"><code>viewkeys</code></a>, <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewitems"><code>viewitems</code></a> and <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewvalues"><code>viewvalues</code></a> methods, the most useful being <code>viewkeys</code> which behaves more like a <code>set</code> (which you'd expect from a <code>dict</code>).</p>
<p>Simple example:</p>
<pre><code>common_keys = list(dict_a.viewkeys() &amp; dict_b.viewkeys())
</code></pre>
<p>Will give you a list of the common keys, but again, in Python 3.x - just use <code>.keys()</code> instead.</p>
<p>Python 3.x has generally been made to be more "lazy" - i.e. <a href="https://docs.python.org/3/library/functions.html#map"><code>map</code></a> is now effectively <a href="https://docs.python.org/2/library/itertools.html#itertools.imap"><code>itertools.imap</code></a>, <a href="https://docs.python.org/3/library/functions.html#zip"><code>zip</code></a> is <a href="https://docs.python.org/2/library/itertools.html#itertools.izip"><code>itertools.izip</code></a>, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict.iteritems</code> was removed because <code>dict.items</code> now does the thing <code>dict.iteritems</code> did in python 2.x and even improved it a bit by making it an <a href="http://docs.python.org/3.3/library/stdtypes.html#dict-views"><code>itemview</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pythonhosted.org/six/">The six library</a> helps with writing code that is compatible with both python 2.5+ and python 3. It has an iteritems method that will work in both python 2 and 3. Example:</p>
<pre><code>from __future__ import division, absolute_import, print_function, unicode_literals
import six

d = dict( foo=1, bar=2 )

for k, v in six.iteritems(d):
    print(k, v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the dictionary documentation for <a href="http://docs.python.org/2/library/stdtypes.html#dict" rel="noreferrer">python 2</a> and <a href="http://docs.python.org/3/library/stdtypes.html#dict" rel="noreferrer">python 3</a> would tell you, in python 2 <code>items</code> returns a list, while <code>iteritems</code> returns a iterator.</p>
<p>In python 3, <code>items</code> returns a <a href="http://docs.python.org/3/library/stdtypes.html#dict-views" rel="noreferrer">view</a>, which is pretty much the same as an iterator.</p>
<p>If you are using python 2, you may want to user <code>iteritems</code> if you are dealing with large dictionaries and all you want to do is iterate over the items (not necessarily copy them to a list)</p>
</div>
<div class="post-text" itemprop="text">
<p>Just as @Wessie noted, <code>dict.iteritems</code>, <code>dict.iterkeys</code> and <code>dict.itervalues</code> (which return an <strong>iterator</strong> in Python2.x) as well as <code>dict.viewitems</code>, <code>dict.viewkeys</code> and <code>dict.viewvalues</code> (which return <strong>view objects</strong> in Python2.x) were all removed in Python3.x</p>
<p>And <code>dict.items</code>, <code>dict.keys</code> and <code>dict.values</code> used to return a <strong>copy</strong> of the dictionary's list in Python2.x now return <strong>view objects</strong> in Python3.x, <em>but</em> they are still not the same as <strong>iterator</strong>.</p>
<p>If you want to return an <strong>iterator</strong> in Python3.x, use <a href="http://docs.python.org/3.3/library/stdtypes.html#dictionary-view-objects" rel="noreferrer"><code>iter(dictview)</code></a> :</p>
<pre><code>$ python3.3

&gt;&gt;&gt; d = {'one':'1', 'two':'2'}
&gt;&gt;&gt; type(d.items())
&lt;class 'dict_items'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; type(d.keys())
&lt;class 'dict_keys'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; ii = iter(d.items())
&gt;&gt;&gt; type(ii)
&lt;class 'dict_itemiterator'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; ik = iter(d.keys())
&gt;&gt;&gt; type(ik)
&lt;class 'dict_keyiterator'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can not use <code>items</code> instead <code>iteritems</code> in all places in Python. For example, the following code:</p>
<pre><code>class C:
  def __init__(self, a):
    self.a = a
  def __iter__(self):
    return self.a.iteritems()

&gt;&gt;&gt; c = C(dict(a=1, b=2, c=3))
&gt;&gt;&gt; [v for v in c]
[('a', 1), ('c', 3), ('b', 2)]
</code></pre>
<p>will break if you use <code>items</code>:</p>
<pre><code>class D:
  def __init__(self, a):
    self.a = a
  def __iter__(self):
    return self.a.items()

&gt;&gt;&gt; d = D(dict(a=1, b=2, c=3))
&gt;&gt;&gt; [v for v in d]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __iter__ returned non-iterator of type 'list'
</code></pre>
<p>The same is true for <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewitems" rel="noreferrer">viewitems</a>, which is available in Python 3.</p>
<p>Also, since <a href="https://docs.python.org/2/library/stdtypes.html#dict.items" rel="noreferrer">items</a> returns a copy of the dictionaryâ€™s list of <code>(key, value)</code> pairs, it is less efficient, unless you want to create a copy anyway.</p>
<p>In Python 2, it is best to use <code>iteritems</code> for iteration. The <code>2to3</code> tool can replace it with <code>items</code> if you ever decide to upgrade to Python 3.</p>
</div>
<span class="comment-copy">I understand that <code>iteritems</code> is an iterator, which is why it's so useful. I almost never want to iterate over a dictionary as a list. So what's the correct way to iterate over dictionary with something generator like in a way that is compatible with both Python 2 and 3?</span>
<span class="comment-copy">@user248237 <code>for key in some_dict</code> works on both - and the <code>2to3</code> tool will translate <code>iteritems()</code> to <code>items()</code> anyway...</span>
<span class="comment-copy">@JonClements: fair enough, though I always thought <code>for k in d: d[k]</code> is unnecessarily verbose/unpythonic</span>
<span class="comment-copy">Which is more efficient when one wants to do an inverse lookup? view objects or iterator?</span>
