<div class="post-text" itemprop="text">
<p>I have a little test.sh script that I run from the command line <code>./test.sh</code> and it will ask me for input to 2 questions that I enter, then it loops till I <code>ctrl-c</code> out of it. </p>
<p>I want to write a little python script that can run my <code>test.sh</code>, and enter the inputs to the script questions from variables, var1 and var2 that I set in python.</p>
<p>I also want to have another variable, var3, that loops for x long and runs my test.sh, and ends it then relaunches it every x minutes based on the value of var3</p>
<p>I wrote this code but it doesn't seem to pass the commands into my <code>test.sh</code> after it launches:</p>
<pre><code>import os
os.system('./test.sh arg1')
time.sleep(10)
sh('input answer 1')
time.sleep(5)
sh('input answer 2')
</code></pre>
<p>Currently my code has been updated based on this thread to look like this:</p>
<pre><code>#!/usr/bin/env python

import pexpect
import sys
import os
child = pexpect.spawn ('./test.sh -arg1')
child.expect ('some expected output from the .sh file')
child.expect ('more expected output from the .sh file')
child.expect ('(?i)Enter Username:')
child.sendline ('myusername')
child.expect ('(?i)Enter Password:')
child.sendline ('mypassword')
# sys.stdout.write (child.after)
# sys.stdout.flush()
time.sleep(30)
child.sendcontrol('c')
child.close()
print 'Goodbye'
</code></pre>
<p>--fixed-- Now the problem is my timeout or sleep is getting inturrupted, possibly by my .sh script's output. When I run this script with either timeout or time.sleep uncommented, it either has no affect and goes straight down the line to my child.close() and ends the program, or it hangs up the child.sendline ('mypassword') for some reason and I get stuck at my .sh script's password prompt... maybe it's not really stuck there because I can't interact with it. --fixed--</p>
<p>Once I get the script pausing for 30 seconds (or x) then all I will have left to do is make the whole thing loop x times. Finnaly I'll need to add error checking because the .SH responds with different strings of text that can indicate I need to run the script again right away.</p>
<p>Thanks for everyone's help so much! </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://www.noah.org/wiki/pexpect" rel="nofollow noreferrer"><code>pexpect</code></a>:</p>
<pre><code>import pexpect  # $ pip install pexpect

while var3:  # start ./test.sh again
    output = pexpect.run('./test.sh arg1', 
        timeout=x,  # terminate child process after x seconds
        events={r'(?i)question 1': var1,  # provide answers
                r'(?i)question 2': var2})  
</code></pre>
<p>Note: <code>subprocess</code>-based solution might be more complex due to buffering issues and it might require additionally <code>pty</code>, <code>select</code> modules, <a href="https://stackoverflow.com/a/12471855/4279">example</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import subprocess
p = subprocess.Popen('./test.sh arg1', stdin=subprocess.PIPE, stdout=subprocess.PIPE)

time.sleep(10)
p.stdin.write('input answer 1') #Probably adding \n is necessary
time.sleep(5)
p.stdin.write('input answer 2') #Probably adding \n is necessary

print p.stdout.readline() # To print one-line output of the shell script
</code></pre>
</div>
<span class="comment-copy">Read <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html</a> notably about <code>popen</code></span>
<span class="comment-copy">What does <i>"then it loops"</i> mean: it asks you 2 questions again or new input is not expected after the initial 2 questions? What does <i>"loops for x long"</i> mean: for <code>x</code> seconds or <code>x</code> times?</span>
<span class="comment-copy">Is there some reason you don't want to do this in Python?</span>
<span class="comment-copy">I just fixed the above code so that it now works! The problem with the time.sleep not working was the output I was streaming in from my sys.stdout.write (child.after) and/or sys.stdout.flush() statement. I commented the lines and now it works!!!</span>
<span class="comment-copy">pexpect worked for me. I wrote it a little different though, and it runs ok, but seems to crash out after a minute I'm looking into why. I used this code:      import pexpect x = 1 var3 = True var1 = 'mytext' var2 = 'myothertext' while var3:     child = pexpect.spawn ('./test.sh -arg1')     child.expect ('output from my test.sh...')     child.expect ('')     child.expect ('var1 input entry')     child.sendline ('var1')     child.expect ('var2 input entry')     child.sendline ('var2')</span>
<span class="comment-copy">@NodeTX: don't put the code into the comment; <a href="http://stackoverflow.com/posts/14024957/edit">update your question</a> instead. If you use <code>spawn()</code> instead of <code>run()</code> then you should handle TIMEOUT, EOF conditions and call <code>child.close()</code> yourself. Also you might want <code>.sendline(var1)</code> instead of <code>.sendline("var1")</code>. And <code>.expect("")</code> might be useless (empty string matches any input). <code>run()</code> is enough in your case.</span>
<span class="comment-copy">Thanks J.F Sebastian I was wondering why my code block wouldn't show up in the comment, that explains why!</span>
<span class="comment-copy">I think you mean <code>p.stdout.readline()</code> and <code>p.stdin.write()</code> ?</span>
<span class="comment-copy">There is no <code>popen</code>. It should be <code>Popen</code>. Also, see <a href="http://www.noah.org/wiki/Pexpect#Q:_Why_not_just_use_a_pipe_.28popen.28.29.29.3F" rel="nofollow noreferrer">Q: Why not just use a pipe (popen())?</a>. In addition your code might dead-lock if <code>./test.sh</code> generates enough output (see appropriate warning in <code>subprocess</code> docs).</span>
<span class="comment-copy">@jdi, Thank you very much, these are errors of typing answer in Stackoverflow's editor :)</span>
<span class="comment-copy">@J.F.Sebastian Thank you very much, yes It's not a perfect solution, but I think sometimes we need easy and quick solutions.</span>
<span class="comment-copy"><code>p.stdout.readline()</code> will block forever if <code>./tesh.sh</code> uses block-buffering for its output (default if stdout is a pipe). The reasons are explained <a href="http://www.noah.org/wiki/Pexpect#Q:_Why_not_just_use_a_pipe_.28popen.28.29.29.3F" rel="nofollow noreferrer">in the link I've provided</a>.</span>
