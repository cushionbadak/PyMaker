<div class="post-text" itemprop="text">
<p>I want to sort a graph object that I have read through networkx library in Python, in the increasing order of edgeweight. It seems that the <code>sort</code> command of python won't apply to graph objects. I am sure there is a easy way to sort this object, but I am not sure how. Any help will be appreciated.</p>
<p>For example, my first three edges are</p>
<pre><code>1 3 5250
1 4 74
1 5 3659
</code></pre>
<p>After sorting I would hope that their order is changed to</p>
<pre><code>1 4 74
1 5 3659
1 3 5250
</code></pre>
<p>Here is my code so far</p>
<pre><code>import networkx as nx
g=nx.read_weighted_edgelist(fname,nodetype=int)
</code></pre>
<p>I am trying to sort the object <code>g</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import networkx as nx
edgelist = [
    (1, 3, {'weight':5250}),
    (1, 4, {'weight': 74}),
    (1, 5, {'weight': 3659})]

G = nx.Graph(edgelist)
for a, b, data in sorted(G.edges(data=True), key=lambda x: x[2]['weight']):
    print('{a} {b} {w}'.format(a=a, b=b, w=data['weight']))
</code></pre>
<p>yields</p>
<pre><code>1 4 74
1 5 3659
1 3 5250
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The built-in <code>sort</code> function has a <code>key</code> parameter that takes a function. If it is specified, sort will sort the collection according to the order of the result of application of the key function to the original elements.</p>
<pre><code>&gt;&gt;&gt; sorted([1,2,3], key=lambda x:-x)
[3, 2, 1]
</code></pre>
<p>You can find more information <a href="http://wiki.python.org/moin/HowTo/Sorting#Key_Functions" rel="nofollow">here</a></p>
<p>In your particular case, if you need to sort by edge weight and you have a list of edges, you need to provide the function that maps an edge to its weight:</p>
<pre><code>sorted( list_of_edges, key= lambda edge: edge['weight'] ) 
</code></pre>
</div>
<span class="comment-copy">Could you be more specific about what you mean by "sort a graph object"?  Get a list of edges ordered by increasing edge weight?  Get a list of nodes ordered by increasing sum of edge weight over all edges?  By maximal edge weight?  Etc.</span>
<span class="comment-copy">I need to get the list of edges ordered by increasing edge weight. I will update the question accordingly.</span>
<span class="comment-copy">This does the sort, but now the object is no longer a graph object. Is it possible to retain the object as an graph object.</span>
<span class="comment-copy"><code>G</code> is still a <code>Graph</code> object. You can access the edges with <code>G[a][b]</code>.</span>
<span class="comment-copy">I have used a Direct Graph. The for loop seems to be giving a invalid syntax error in Python 3. Am I missing something?</span>
<span class="comment-copy">@Bonson: Thanks for the alert. In Python3, <a href="https://docs.python.org/3/whatsnew/3.0.html#removed-syntax" rel="nofollow noreferrer">tuple parameter unpacking</a> has been removed. I've updated the code above for Python3.</span>
<span class="comment-copy">It seems that the <code>sort</code> does not apply to graph object. When i tried <code>g.sort()</code> I got an error <code>'Graph' object has no attribute 'sort'</code></span>
<span class="comment-copy">@hardikudeshi indeed, it's not a function of <code>Graph</code>, though it is of some built-in types like <code>list</code>. You can still use the <code>sorted</code> function, though</span>
