<div class="post-text" itemprop="text">
<pre><code>def foo(a, b, c):
 print a+b+c

i = [1,2,3]
</code></pre>
<p>Is there a way to call foo(i) without explicit indexing on i?
Trying to avoid foo(i[0], i[1], i[2])</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, use <a href="http://docs.python.org/2.7/tutorial/controlflow.html#unpacking-argument-lists"><code>foo(*i)</code></a>:</p>
<pre><code>&gt;&gt;&gt; foo(*i)
6
</code></pre>
<p>You can also use <code>*</code> in function definition:
<code>def foo(*vargs)</code> puts all non-keyword arguments into a tuple called <code>vargs</code>.
and the use of <code>**</code>, for eg., <code>def foo(**kargs)</code>, will put all keyword arguments into a dictionary called <code>kargs</code>: </p>
<pre><code>&gt;&gt;&gt; def foo(*vargs, **kargs):
        print vargs
        print kargs

&gt;&gt;&gt; foo(1, 2, 3, a="A", b="B")
(1, 2, 3)
{'a': 'A', 'b': 'B'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's called <a href="http://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists">argument unpacking</a> and there's an operator for it.</p>
<pre><code>foo(*i)
</code></pre>
<p>By the way, it works with any iterable, not just with lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, Python supports that:</p>
<pre><code>foo(*i)
</code></pre>
<p>See the documentation on <a href="http://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">Unpacking Argument Lists</a>. Works with anything iterable. With two stars <code>**</code> it works for dicts and named arguments.</p>
<pre><code>def bar(a, b, c): 
    return a * b * c
j = {'a': 5, 'b': 3, 'c': 2}

bar(**j)
</code></pre>
</div>
<span class="comment-copy">Used in function definition many times, so why not use it when calling... Thanks for reverting my python head guys.</span>
<span class="comment-copy">+1 for dropping the name of the game. actually this what helps to google this thing for any language. Thanks a lot.</span>
