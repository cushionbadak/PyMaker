<div class="post-text" itemprop="text">
<p>I'm just getting started with python. Can somebody interpret line 2 of the following code snippet?  I don't understand the <code>`num`</code> bit. I tried to replace the backtick character with a single tick <code>'</code>, but then it broke. Just a detailed explanation of that line would be great.</p>
<pre><code>loop_count = 1000000
irn = ''.join([`num` for num in range(loop_count)])
number = int(irn[1]) * int(irn[10]) * int(irn[100]) * int(irn[1000]) * int(irn[10000]) * int(irn[100000]) * int(irn[1000000])
print number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Backticks are a deprecated alias for the <code>repr()</code> builtin function, so the second line is equivalent to the following:</p>
<pre><code>irn = ''.join([repr(num) for num in range(loop_count)])
</code></pre>
<p>This uses a list comprehension to create a list of strings representing numbers, and then uses <code>''.join()</code> to combine that list of strings into a single string, so this is equivalent to the following:</p>
<pre><code>irn = ''
for num in range(loop_count):
    irn += repr(num)
</code></pre>
<p>Note that I used <code>repr()</code> here to be consistent with the backticks, but you will usually see <code>str(num)</code> to get the string representation of an int (they happen to be equivalent).</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><code>for num in range(loop_count)</code> iterates over all numbers from zero up to and excluding 1,000,000</li>
<li><code>num</code> in backticks converts each number to string using the <a href="http://docs.python.org/2/library/functions.html#repr" rel="nofollow"><code>repr()</code></a> function.</li>
<li><code>''.join(...)</code> merges all those strings into one without any separators between them.</li>
<li><code>irn = ...</code> stores the result in <code>irn</code>.</li>
</ol>
</div>
<span class="comment-copy">the `` turns it into a string. without it, you get an array of ints, not an array of strings</span>
<span class="comment-copy">its equivalent to <code>str(num)</code>, I think</span>
<span class="comment-copy">Join: 'a'.join(['b','c'] -&gt; 'bac'</span>
<span class="comment-copy">Out of curiosity - was someone trying to solve an Euler problem?</span>
<span class="comment-copy">See <a href="http://docs.python.org/2/reference/expressions.html?highlight=expressions#string-conversions" rel="nofollow noreferrer">5.2.9. String conversions</a> in the documentation. They're also called reverse or backward quotes.</span>
<span class="comment-copy">Where/when were/are they deprecated?</span>
<span class="comment-copy">Backticks are a SyntaxError in Python 3, not sure exactly when it was decided to remove them, but 2.7 is the last Python version that allows them.</span>
<span class="comment-copy">I asked because there was no mention of it being deprecated in the 2.6 &amp; 2.7 documentation. In the <b>Removed Syntax</b> section of <a href="http://docs.python.org/3/whatsnew/3.0.html" rel="nofollow noreferrer"><i>What's New In Python 3.0</i></a> it says "Removed backticks (use <code>repr()</code> instead)", which I suppose could be called the ultimate act of disapproval...</span>
<span class="comment-copy">So it is the same as doing str(num)?</span>
<span class="comment-copy">@SamHeather yes</span>
<span class="comment-copy">@SamHeather: Here, yes.</span>
<span class="comment-copy">In this case, yes.  <code>repr</code> and <code>str</code> have slightly different purposes, and can produce different text depending on the type.</span>
