<div class="post-text" itemprop="text">
<p>here's the code:</p>
<pre><code>def findsort(something, alist):
    for item in alist:
        if item == something:
            return "found"
        else:
            return "not found"

def main():

    print(findsort(6, [3, 6, 1, 8, 11, 14]))

main()
</code></pre>
<p>for some reason, this doesn't work the way i thought it should work.</p>
<p>when i run this, it will say "not found."  however, if i change the value i want to find to the first item in the list, the 3, it comes back as "found."</p>
<p>i have tried this with strings, and i get the same results.</p>
<p>can someone please tell me what i am doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because if in the first iteration the item doesn't match, you go into the else branch returning "not found", thus exiting the loop.</p>
<p>Try this:</p>
<pre><code>def findsort(something, alist):
    for item in alist:
        if item == something:
            return "found"
    return "not found"
</code></pre>
<p>or simply:</p>
<pre><code>def findsort(something, alist):
    return "found" if something in alist else "not found"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/13852518/4279">@hyperboreus pointed out the cause of the error</a> (the <code>else</code> branch executing before all items are seen).</p>
<p>To find an item in a <strong>sorted</strong> ("ordered") list you could use <a href="http://docs.python.org/3/library/bisect.html#bisect.bisect" rel="nofollow noreferrer"><code>bisect</code> module</a> that performs binary search (<code>O(log(n)</code>) instead of linear search <code>item in alist</code> (<code>O(n)</code>) e.g., for a million items binary search would require around a couple dozen operations against a million operations for the linear search.</p>
<pre><code>from bisect import bisect

findsort = lambda x, L: "found" if L and L[bisect(L,x) - 1] == x else "not found"
</code></pre>
</div>
<span class="comment-copy">Just a suggestion, you could simplify that function to <code>return "found" if something in alist else "not found"</code></span>
<span class="comment-copy">@Dan D. Please do not truncate other users' posts due to personal preference of coding style. Do revise other users' posts in order to correct typos and the such.</span>
<span class="comment-copy">I agree with you that Dan should rather add comment. On the other hand, the answer goest to a beginner and the information dosage should use the correct size of drops. The removed code actually means: <i>Use this complicated way to give the name to the unnamed function.</i></span>
<span class="comment-copy">thank you for this information.  while i understand that this is not the most efficient way to code, this class was designed for the absolute beginner.  as you can tell, i still have a long way to go before fully understanding something as simple as a for loop.</span>
<span class="comment-copy">You are most welcome. Think about accepting any of these answers, so people stay motivated to answer your questions.</span>
<span class="comment-copy">+1 for bisect; this was a new one for me.</span>
<span class="comment-copy">True, but this assumes that the list is ordered.</span>
<span class="comment-copy">@John: <code>findsort</code> name suggests that the input is sorted but the example list in the question is not sorted. I've made it bold to avoid possible confusion.</span>
<span class="comment-copy">@J.F.Sebastian Yeah, it is an odd name. Still, +1 for binary search. And sorry, I meant to type "ordered ascending", but I must've spaced.</span>
<span class="comment-copy">thank you, but i am such novice with programming that i can't even begin to get my head 'round what you just wrote.  it looks pretty sweet though. :)</span>
