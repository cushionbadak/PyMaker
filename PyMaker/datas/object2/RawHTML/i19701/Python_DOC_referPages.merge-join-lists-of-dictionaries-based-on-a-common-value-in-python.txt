<div class="post-text" itemprop="text">
<p>I have two lists of dictionaries (returned as Django querysets). Each dictionary has an ID value. I'd like to merge the two into a single list of dictionaries, based on the ID value.</p>
<p>For example:</p>
<pre><code>list_a = [{'user__name': u'Joe', 'user__id': 1},
          {'user__name': u'Bob', 'user__id': 3}]
list_b = [{'hours_worked': 25, 'user__id': 3},
          {'hours_worked': 40, 'user__id': 1}]
</code></pre>
<p>and I want a function to yield:</p>
<pre><code>list_c = [{'user__name': u'Joe', 'user__id': 1, 'hours_worked': 40},
          {'user__name': u'Bob', 'user__id': 3, 'hours_worked': 25}]
</code></pre>
<p>Additional points to note:</p>
<ul>
<li>The IDs in the lists may not be in the same order (as with the example above).</li>
<li>The lists will <em>probably</em> have the same number of elements, but I want to account for the option if they're not but keeping all the values from list_a (essentially <code>list_a OUTER JOIN list_b USING user__id</code>).</li>
<li>I've tried doing this in SQL but it's not possible since some of the values are aggregates based on some exclusions.</li>
<li>It's safe to assume there will only be at most one dictionary with the same <code>user__id</code> in each list due to the database queries used.</li>
</ul>
<p>Many thanks for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd use <code>itertools.groupby</code> to group the elements:</p>
<pre><code>lst = sorted(itertools.chain(list_a,list_b), key=lambda x:x['user__id'])
list_c = []
for k,v in itertools.groupby(lst, key=lambda x:x['user__id']):
    d = {}
    for dct in v:
        d.update(dct)
    list_c.append(d)
    #could also do:
    #list_c.append( dict(itertools.chain.from_iterable(dct.items() for dct in v)) )
    #although that might be a little harder to read.
</code></pre>
<p>If you have an aversion to <code>lambda</code> functions, you can always use <code>operator.itemgetter('user__id')</code> instead.  (it's probably slightly more efficient too)</p>
<p>To demystify lambda/itemgetter a little bit, Note that:</p>
<pre><code>def foo(x):
    return x['user__id']
</code></pre>
<p>is the same thing* as either of the following:</p>
<pre><code>foo = operator.itemgetter('user__id')
foo = lambda x: x['user__id']
</code></pre>
<p>*There are a few differences, but they're not important for this problem</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import defaultdict
from itertools import chain

list_a = [{'user__name': u'Joe', 'user__id': 1},
      {'user__name': u'Bob', 'user__id': 3}]
list_b = [{'hours_worked': 25, 'user__id': 3},
      {'hours_worked': 40, 'user__id': 1}]

collector = defaultdict(dict)

for collectible in chain(list_a, list_b):
    collector[collectible['user__id']].update(collectible.iteritems())

list_c = list(collector.itervalues())
</code></pre>
<p>As you can see, this just uses another dict to merge the existing dicts. The trick with defaultdict is that it takes out the drudgery of creating a dict for a new entry.</p>
<p>There is no need to group or sort these inputs. The dict takes care of all of that.</p>
<p>A truly bulletproof solution would catch the potential key error in case the input does not have a 'user__id' key, or use a default value to collect up all of the dicts without such a key.</p>
</div>
<span class="comment-copy">Are you sure those are tuples? The <code>{}</code> syntax is for dictionaries...</span>
<span class="comment-copy">These are not tuples, and why don't you show us the code you have right now?</span>
<span class="comment-copy">Thanks. I've edited the question and replaced tuples with dictionaries.</span>
<span class="comment-copy">+1 was about to post the same solution.</span>
<span class="comment-copy"><a href="http://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter()</code></a> might be a good call here.</span>
<span class="comment-copy">@Lattyware -- Already updated :)</span>
<span class="comment-copy">one-liner <code>[dict(y for x in g for y in x.items()) for k,g in groupby(lis,key=lambda x:x['user__id'])]</code></span>
<span class="comment-copy">@sr2222 -- You're right, it will do that, but if that is a concern, then this isn't a well-posed problem (OP never said how that should be handled)  :)</span>
