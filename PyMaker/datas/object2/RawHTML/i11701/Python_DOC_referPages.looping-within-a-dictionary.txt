<div class="post-text" itemprop="text">
<p>I'm stuck on the last part of this coding and need help.</p>
<p>Here is my task</p>
<p>The part I need help with is the for/if statements on comparing just the age and returning the lowest value. I know that I want to loop through all the ages and only return the lowest using if &gt; than or &lt; than signs but don't know how to word it in coding. </p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this seems to do the trick.</p>
<pre><code>def youngest_at_inauguration(db):
    youngest = min((db[p][2] for p in db))
    return youngest, [key for key in db if db[key][2] == youngest]
</code></pre>
<p>You could do it by stepping through the dictionary and saving the key value if it is the minimum seen so far as well which may be more explicit if you intend for others to read your code later. This method is more of a test of Pythonic ways to do complex tasks in minimal space.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>key</code> argument of the <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow"><code>min()</code></a> function to tell it what it should use when comparing elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>To loop through the keys  and values of a dictionary, you use <code>.items()</code></p>
<pre><code>for president, data in p_db.items():
    ...
</code></pre>
<p>You can even automatically expand the value tuple like this:</p>
<pre><code>for president, (year, term, age, state, party) in p_db.items():
    ...
</code></pre>
<p>You only need to store two values, the minimum age, and a list of all presidents with the same minimum age.  You can do this with a single iteration through <code>p_db</code></p>
<pre><code>def func(p_db):
    min_age = None
    presidents = []

    for president, (year, term, age, state, party) in p_db.items():
        if min_age is None or age &lt; min_age:
            min_age = age
            presidents = [president]
        elif age == min_age:
            presidents.append(president)

    presidents.sort()
    return (min_age, presidents)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def youngestprez():
    sample_p_db =   {
    "Ronald Reagan":    (1981,  8,  69,"California","Republican"),
    "George Bush": (1989,   4,  64,"Texas","Republican"),
    "Bill   Clinton":   (1993,  8,  46,"Arkansas","Democrat")    }
    min_age = 100
    for prez in sample_p_db:
        if min_age &gt; sample_p_db[prez][2]:
            min_age = sample_p_db[prez][2]
            prez_name = prez

    return(prez_name, min_age)


youngestprez()
</code></pre>
</div>
<span class="comment-copy">what have you tried so far? even if it doesn't work as expected, you should add it your question</span>
<span class="comment-copy">edited into comments what I have so far</span>
<span class="comment-copy">Just do <code>presidents.sort()</code> before the return statement.</span>
<span class="comment-copy">@Jessica I updated the answer</span>
<span class="comment-copy">could you please tell me what switches when you want the max age?</span>
<span class="comment-copy">You should be able to figure it out</span>
<span class="comment-copy">i switched min_ages to max_age and switched the age&lt;min_age to max_age&lt;age. But still get all fails on my tests any fix?</span>
