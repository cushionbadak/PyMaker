<div class="post-text" itemprop="text">
<p>I have some problem with the "any" syntax. I have two lists.</p>
<pre><code>mainseq=["hali","hulu","habi"]
seq=["a","b","c","d"]
</code></pre>
<p>I want to find if elements in seq exist in mainseq.</p>
<pre><code>for each in seq:
    if any(each in halum for halum in mainseq):
        print each
</code></pre>
<p>This gives me "a" and "b" as expected. But when I remove the "any" syntax, I get all the values in seq, even though "c" and "d" is not there in mainseq.</p>
<pre><code>for each in seq:
    if (each in halum for halum in mainseq):
        print each
</code></pre>
<p>What is happening behind the scenes with and WITHOUT the "any" function? Please help.</p>
</div>
<div class="post-text" itemprop="text">
<p>To understand what is happening you could debug it by printing an equivalent list comprehension and the <code>boolean</code> representation and <code>any</code>:</p>
<pre><code>for each in seq:
    print(each)
    print([each in halum for halum in mainseq])
    print(any(each in halum for halum in mainseq))
    print(bool(each in halum for halum in mainseq)) 

# a
# [True, False, True] &lt;- contains more than one True element
# True                &lt;- so any returns True
# True                &lt;- boolean expression of a generator is always True

# b
# [False, False, True] &lt;- contains one True element
# True                 &lt;- so any returns True
# True                 &lt;- boolean expression of a generator is always True

# c
# [False, False, False] &lt;- no element is True
# False                 &lt;- so any returns False
# True                  &lt;- boolean expression of a generator is always True

# d
# [False, False, False] &lt;- no element is True
# False                 &lt;- so any returns False
# True                  &lt;- boolean expression of a generator is always True
</code></pre>
<p>But remember that a generator will always evaluate to <code>True</code> because a generator has no <em>explicit</em> boolean representation and doesn't have a <em>length</em> (see <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">Truth-value-testing in the official documentation</a>).</p>
<p><code>any</code> on the other hand consumes the generator and returns <code>True</code> only if <strong>any</strong> element is <code>True</code>. This is the case for <code>each == a</code> and <code>each == b</code>. So the <code>if</code> condition will not always be triggered.</p>
</div>
<div class="post-text" itemprop="text">
<p>any returns a boolean value True or False.</p>
<p>Your statement <code>(each in halum for halum in mainseq)</code> returns a generator which evaluates to truthy value, hence code always falls in the if block.
Here is a more verbose code explaining this: </p>
<h1><a href="http://ideone.com/AQ7dRs" rel="nofollow">http://ideone.com/AQ7dRs</a></h1>
<pre><code>mainseq=["hali","hulu","habi"]
seq=["a","b","c","d"]

print('Demo of any:\n')
for each in seq:
    boolFlag = any(each in halum for halum in mainseq)
    print('Any returned:{0}'.format(boolFlag)) 
    if boolFlag:
        print each


print('Demo of generator as truthy value:\n')

for each in seq:
    boolFlag = (each in halum for halum in mainseq)
    print('boolFlag is:{0}'.format(boolFlag))
    if boolFlag:
        print each
        print('{0} is Truthy'.format(boolFlag))
</code></pre>
<p>Outputs:</p>
<pre><code>Any returned:True
a
Any returned:True
b
Any returned:False
Any returned:False
Demo of generator as truthy value:

boolFlag is:&lt;generator object &lt;genexpr&gt; at 0xb7272bbc&gt;
a
&lt;generator object &lt;genexpr&gt; at 0xb7272bbc&gt; is Truthy
boolFlag is:&lt;generator object &lt;genexpr&gt; at 0xb7272be4&gt;
b
&lt;generator object &lt;genexpr&gt; at 0xb7272be4&gt; is Truthy
boolFlag is:&lt;generator object &lt;genexpr&gt; at 0xb7272bbc&gt;
c
&lt;generator object &lt;genexpr&gt; at 0xb7272bbc&gt; is Truthy
boolFlag is:&lt;generator object &lt;genexpr&gt; at 0xb7272be4&gt;
d
&lt;generator object &lt;genexpr&gt; at 0xb7272be4&gt; is Truthy
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>Any</code> returns true if the list given has at least 1 element in it. You can achieve what you want by doing this instead:</p>
<pre><code>for each in seq:
    for halum in mainseq:
        if each in halum:
            print each
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>(each in halum for halum in mainseq)</code> is a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow">generator expression</a>.  A generator expression is a <a href="https://docs.python.org/2.4/lib/truth.html" rel="nofollow">truthy value</a>.  Using just that in an <code>if</code> statement will always be <code>True</code>, so the suite will always be executed.  <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any()</code></a> searches an iterable for any value that is truthy.  Therefore, using it will execute the suite only if any of the results of that generator expression is <code>True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>any() returns True if any element of the iterable is true. If the iterable is empty, return False.</p>
<p>So <code>if any(each in halum for halum in mainseq):</code> looks at elements inside.
iterations where each is "a" or "b" contains those elements and therefore if statement is true. For cases of "c" and "d", iterable is empty, producing false.</p>
<p>When you remove any(), you are no longer looking inside the iterable but simply asking whether iterable itself is not true.</p>
<blockquote>
<p>if (each in halum for halum in mainseq): </p>
</blockquote>
<p>will always be true since it always will produce a valid generator object.</p>
</div>
<span class="comment-copy">Your example is confusing. First you consume the generator by <code>list</code> and then you try to use it with <code>any</code> and with <code>if</code> ... The generator is empty after the <code>list</code> casting.</span>
<span class="comment-copy">@MSeifert Sure, I would edit it, and post a better example.</span>
<span class="comment-copy">@DivineLight  Please accept the correct answer as well.</span>
<span class="comment-copy">Thanks! So, it was about the generator expression being a truthy value.</span>
<span class="comment-copy">Okay I get it, here the if is looking whether a valid generator is there which is "true" because "mainseq" is iterable. Thanks!</span>
