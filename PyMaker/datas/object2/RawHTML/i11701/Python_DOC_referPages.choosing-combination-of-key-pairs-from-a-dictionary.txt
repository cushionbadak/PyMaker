<div class="post-text" itemprop="text">
<p>I have a dictionary that contains the starting and ending coordinates of line segment. I want to compare all the possible combination of any two keys in the dictionary to check if the line segments have an intersection. How can I do that ?</p>
<pre><code>v = {1:[(2,3),(10,12)],2:[(22,25),(14,42)],3:[(-8,10),(3,21)]}
</code></pre>
<p>The function for determining whether there is a collision is like this</p>
<pre><code>def segment_intersect(line1, line2):
    i1 = [min(line1[0][0], line1[1][0]), max(line1[0][0], line1[1][0])]
    i2 = [min(line2[0][0], line2[1][0]), max(line2[0][0], line2[1][0])]
    ia = [max(i1[0], i2[0]), min(i1[1], i2[1])]
    if max(line1[0][0], line1[1][0]) &lt; min(line2[0][0], line2[1][0]):
        return False
    m1 = (line1[1][1] - line1[0][1]) * 1. / (line1[1][0] - line1[0][0]) * 1.
    m2 = (line2[1][1] - line2[0][1]) * 1. / (line2[1][0] - line2[0][0]) * 1.
    if m1 == m2:
        return False
    b1 = line1[0][1] - m1 * line1[0][0]
    b2 = line2[0][1] - m2 * line2[0][0]
    x1 = (b2 - b1) / (m1 - m2)
    if (x1 &lt; max(i1[0], i2[0])) or (x1 &gt; min(i1[1], i2[1])):
        return False
    return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just make nested loops for each of the pair elements. The following example does just this and tests the results with a plot.</p>
<pre><code>import matplotlib.pyplot as plt
v = {1:[(2,3),(10,12)],2:[(22,25),(14,42)],3:[(-8,10),(3,21)],4:[(10,3),(2,12)]}
keys = list(v.keys())
print(keys)
for i in range(len(keys)):
    for j in range(i+1,len(keys)):
        print(keys[i],keys[j],segment_intersect(v[keys[i]], v[keys[j]]))
    plt.plot(*v[keys[i]],label=str(keys[i]))
plt.legend()
plt.show()
</code></pre>
<p>, result is:</p>
<pre><code>[1, 2, 3, 4]
1 2 False
1 3 False
1 4 True
2 3 False
2 4 False
3 4 False
</code></pre>
<p>, and:</p>
<p><a href="https://i.stack.imgur.com/YqflM.png" rel="nofollow noreferrer"><img alt="lines and interceptions" src="https://i.stack.imgur.com/YqflM.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the standard <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.combinations</code></a> function to generate combinations. </p>
<p>Eg,</p>
<pre><code>from itertools import combinations

for k1, k2 in combinations(v, 2):
    print(k1, k2, segment_intersect(v[k1], v[k2]))
</code></pre>
<p>Using <code>itertools.combinations</code> is more efficient and more readable than using nested <code>for</code> loops, especially if you want combinations of length &gt; 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may write</p>
<pre><code>comb = ((v[x], v[y]) for x in v for y in v if x &lt; y)
</code></pre>
<p>The <code>if x &lt; y</code> part makes sure you only get <code>(1,2)</code> but not <code>(2,1)</code> which would be the same and not <code>(1,1)</code> which would not make sense.</p>
<p>You get an iterator with combinations and you can write:</p>
<pre><code>for line1, line2 in comb:
    segment_intersect(line1, line2)
</code></pre>
<p>Note you should use a <code>list</code> rather than a <code>dict</code> if the keys are 1, 2, 3,...</p>
</div>
<span class="comment-copy">If one of the answers below fixes your issue, you should accept it (click the check mark next to the appropriate answer). That does two things. It lets everyone know your issue has been resolved to your satisfaction, and it gives the person that helps you credit for the assist. See <a href="http://meta.stackexchange.com/a/5235">here</a> for a full explanation.</span>
<span class="comment-copy">Thanks for the reply @armatita. The graph explanation was really good.</span>
<span class="comment-copy">Your answer is solid and a perfectly valid alternative. I think you can avoid duplication if instead of != you use &lt; (in the comparison between x and y). Notice that sometimes the value of the answer does not depend on performance rather than pedagogical value. Your implementation is something a more advanced user wouldn't hesitate to use (besides iterable comprehension is currently very fashionable) :)</span>
<span class="comment-copy">@armatita Good point. I edited my answer to use <code>&lt;</code>. My answer might have a pedagogical interest but I think <code>itertools.combinations</code> is the way to go.</span>
<span class="comment-copy">Agreed. It does seem the most adequate.</span>
