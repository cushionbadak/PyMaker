<div class="post-text" itemprop="text">
<p>I want a simple way to get the repr() like string of a dict <strong>sorted</strong> by the keys.</p>
<pre><code>my_print(dict(a=1, b=2, c=3)) -&gt; "{'a': 1, 'b': 2, 'c': 3}"
</code></pre>
<p>My solution:</p>
<pre><code>import collections
print repr(collections.OrderedDict(sorted(dict(a=1, b=2, c=3).items())))
</code></pre>
<p>... does not work. Here the wrong output:</p>
<pre><code>OrderedDict([('a', 1), ('b', 2), ('c', 3)])
</code></pre>
<p>How to implement <code>my_print()</code>?</p>
<p>This is not a solution since dicts are not sorted in Python:</p>
<pre><code>print dict(a=1, b=2, c=3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, you can use JSON.</p>
<pre><code>import json
import collections
def my_print(x):
    return json.dumps(x)
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; my_print(collections.OrderedDict(sorted(dict(a=1, b=2, c=3).items())))
'{"a": 1, "b": 2, "c": 3}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>JSON will work only for simple types. Manually it could be done like that:</p>
<pre><code>print '{' + ', '.join('%r: %r' % i for i in od.iteritems()) + '}'
</code></pre>
<p>where <code>od</code> is <code>collections.OrderedDict</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard dictionary in Python 3.7 is <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="nofollow noreferrer">going to be ordered</a>, and in CPython 3.6, <code>dict</code> is <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict" rel="nofollow noreferrer">ordered due to an implementation detail</a>, so the following will work with Python 3.7, and probably with your Python 3.6 too:</p>
<pre><code>def sorted_dict_repr(d):
    return repr(dict(sorted(d.items())))
</code></pre>
</div>
<span class="comment-copy">What's "wrong" about this output exactly?</span>
<span class="comment-copy">@deceze the output should be <b>sorted</b>. repr(dict(..)) is not sorted.</span>
<span class="comment-copy">Because a <code>dict</code> has no ordering.</span>
<span class="comment-copy">Your "wrong" output sample looks very sorted to me...</span>
<span class="comment-copy">@deceze: There are two requirements: 1. Sorted 2. Like a dictionary.  OrderedDict is sorted, but is not like a dictionary.  A dictionary is like a dictionary, but not sorted.</span>
<span class="comment-copy">Then why not <code>json.dumps(dict(a=1, b=2, c=3), sort_keys=True)</code>? That way nested dictionaries will be key-sorted as well...</span>
