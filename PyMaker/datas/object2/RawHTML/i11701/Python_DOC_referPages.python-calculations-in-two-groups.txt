<div class="post-text" itemprop="text">
<p>I have the following two lists: </p>
<pre><code>          level = ["a","b","a","c"]
          Number = [1,2,1,2]
</code></pre>
<p>And i am just wondering if I could use Python calculate the sum Number for each element in list level. So the output would be two new lists x and y:</p>
<pre><code>          x = ["a", "b","c"]
          y = [2,2,2]  (e.g: the total Number for "a" is 1+1=2, etc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a> if you don't care about the order in <code>x</code>, although I'm sure there's a more practical way to do this </p>
<pre><code>from collections import defaultdict
defdic = defaultdict(int)
for letter, frequency in zip(level, frequency):
    defdic[letter] += frequency

x,y = list(defdic.keys()), list(defdic.values())

# or better yet as proposed by Bharel
x, y = zip(*defdic.items())
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>&gt;&gt;&gt; x 
['a', 'b', 'c']
&gt;&gt;&gt; y 
[2, 2, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way would be using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict
d = defaultdict(int)
for k,v in zip(level, frequency):
    d[k] += v
</code></pre>
<p>Another way would be using a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a>:</p>
<pre><code>from collections import Counter
import itertools
d = Counter(itertools.chain.from_iterable(map(itertools.repeat, level, frequency)))
</code></pre>
<p>In both ways you can unpack it into 2 lists like so:</p>
<pre><code>x, y = zip(*d.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to create key mapping for them.</p>
<p>Below code, I create dictionary with mapping. And check, if your <code>level</code> is not exist in <code>dict</code> then sum your <code>frequency</code> with <code>0</code> else sum with last calculated <code>frequency</code>.</p>
<pre><code>&gt;&gt;&gt; level = ["a","b","a","c"]
&gt;&gt;&gt; frequency = [1,2,1,2]
&gt;&gt;&gt; my_dict = {}
&gt;&gt;&gt; for (l, f) in zip(level, frequency):
...     my_dict[l] = my_dict.get(l, 0) + f
... 
&gt;&gt;&gt; print my_dict
{'a': 2, 'c': 2, 'b': 2}
&gt;&gt;&gt; print my_dict.values()
[2, 2, 2]
&gt;&gt;&gt; print my_dict.keys()
['a', 'c', 'b']
</code></pre>
</div>
<span class="comment-copy">You can use Python to do this, what have you tried?</span>
<span class="comment-copy">Should your <code>y</code> in this case be <code>[2, 1, 1]</code> ?</span>
<span class="comment-copy">please edit your question according to @SnehalShekatkar so that you won't confuse members who want to help you</span>
<span class="comment-copy">@SnehalShekatkar  thx for asking! actually it is [2,2,2] as they are the sum of number in the list frequency, it is a little bit confusing as they are not the actual "frequency" for each element in the list level, i am trying to group by numbers in list frequency.</span>
<span class="comment-copy">@BillalBEGUERADJ thx for the heads up! i just changed it to Number instead of "Frequency", i guess this is less confusing.</span>
<span class="comment-copy">thx! i dont care about the orders of X, actually i was testing ur code and x is in alphabetic orders automatically (i dont know why, ) but thx for the heads up!</span>
<span class="comment-copy"><code>x</code> <i>won't</i> be in order automatically, it will change as dictionaries do not maintain order, be aware.</span>
