<div class="post-text" itemprop="text">
<p>I have a .txt file with N lines. I want to read the line number 8, and the line number 16, which look like these:</p>
<pre><code>2016-04-01 04:27:30.6216 (2283721) (more text)

2016-04-01 04:59:20.3635 (2283721) (more text)
</code></pre>
<p>How can I recover the values  04:59:20.3635 and 04:27:30.6216 and substract them? I tried with opening and reading the file using</p>
<pre><code>txt = open(filename)
for line in txt:
    print line
</code></pre>
<p>But I don't know how to store each line in a variable, and then access the specific part of the line that I want to reach. I've tried some stuff, but I want to know which would be the most efficient way to handle this. Many thanks!!</p>
</div>
<div class="post-text" itemprop="text">
<p>The following is my approach. Hope it helps:</p>
<pre><code>import re
from datetime import datetime

def get_date_time (t):
    """
    t: date time string;
    parse date time string, and return datetime
    """
    time_string = re.findall('\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{4}', t)[0]
    return datetime.strptime(time_string, '%Y-%m-%d %H:%M:%S.%f')

if __name__ == '__main__':    
    with open('input.txt') as f:
        src = f.read().split('\n') # split into lines
        print get_date_time(src[7]) -  get_date_time(src[5]) # calculate difference
</code></pre>
<p>Output:</p>
<pre><code>0:31:49.741900
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could make an array of strings then have the file print each line into the array in a while loop. The while loop checks how much you read into the array or when to stop reading file. After, just simply use other methods to search through a specific line or array index to find what you need. There are plenty of other ways too depending on the task at hand.</p>
</div>
<div class="post-text" itemprop="text">
<p>python is good at manipulate string, so at your situation
just </p>
<pre><code>timestamps =[]
for line in fh:
    timestamps.append(line. split()[1])
print timestamps, timestamps[0]
</code></pre>
<p>you could even extract/ calculated the time delta by using the datetime or timedelta related build in libraries, but first, as other commented, you should go through the tutorial, believe me, it's short and worth reading if you think you would occasionally grasp some line the other day -- you need to know what python could do generally </p>
</div>
<span class="comment-copy">have you googled it yet?</span>
<span class="comment-copy">try similar post   <a href="http://stackoverflow.com/questions/30627810/how-to-parse-this-custom-log-file-in-python" title="how to parse this custom log file in python">stackoverflow.com/questions/30627810/â€¦</a></span>
<span class="comment-copy">Please read <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">The Python Tutorial</a>. It answers many of your questions. If you still have questions, come back and ask them.</span>
<span class="comment-copy">"<i>But I don't know how to store each line in a variable, and then access the specific part of the line that I want to reach.</i>" --&gt; have you tried actually learning a language before trying to use it? (Don't take it personally, a lot of people ask on SO instead of studying first, as if programming answers fell from the sky...wait, they do. Nevermind.)</span>
<span class="comment-copy">Thanks, that worked!! How can I convert your output to seconds? I'm trying with "strresult = str(result)" and then "print sum(int(x) * 60 ** i for i,x in enumerate(reversed(strresult.split(":"))))" but it gives me problems because of the miliseconds!</span>
<span class="comment-copy">To convert to seconds, you could: <code>delta = get_date_time(src[7]) -  get_date_time(src[5])</code>; and then <code>print delta.seconds + delta.microseconds/1E6</code>. The result is: <code>1909.7419</code></span>
<span class="comment-copy">In addition to providing a textual answer, please consider adding code. This will help future readers to get the most out of your answer.</span>
