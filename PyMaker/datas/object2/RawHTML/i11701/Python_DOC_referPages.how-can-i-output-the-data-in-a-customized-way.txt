<div class="post-text" itemprop="text">
<p>I am trying to output names of books along with their probabilities. This is what the current output looks like:</p>
<pre><code>Happy Journey, What a Good Life!, Far Far Away, Slow and Steady, The Meeting
(0.94, 0.56, 0.43, 0.24, 0.10)
</code></pre>
<p>What I am trying to achieve is to have the probabilities paired with the names:</p>
<pre><code>Happy Journey(0.94), What a Good Life!(0.56), Far Far Away(0.43), Slow and Steady(0.24), The Meeting(0.10)
</code></pre>
<p>This is what I have done till now:</p>
<pre><code>f.write("Top 5 Probable Books:")     

for item in w:
    f.write(d.get(int(item))) #gets the names of the book from a dictionary
    f.write(", ")             # w is a label in the dictionary 
f.write("\n")
</code></pre>
<p>This is what my prob5 looks like: <code>[[0.940021 0.561000 0.430012 0.241982 0.100134]]</code> which is why I am rounding it off to 4 decimal places and I need to extract the probabilties from this numpy array.</p>
<pre><code>for pk in prob5:
    jk=', '.join("%.4f" %b for b in pk) #picking out probabilities from a numpy array
    jk="("+jk+ ")" + "\t"
    f.write(jk)
</code></pre>
<p>I am getting a little confused as to how to run the two loops at the same time to achieve the desired output format.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know what kind of problems you encounter while manipulating a numpy array, but if <code>prob5</code> is as you described you could directly access its 0-th element as <code>prob5[0]</code>. As for printing 4 decimals, have a look at the syntax of <a href="https://docs.python.org/2/library/string.html#formatstrings" rel="nofollow"><code>.format()</code></a>.</p>
<p>Assuming that you are using Python 3:</p>
<pre><code>&gt;&gt;&gt; f.write(', '.join('{}({:.4f})'.format(string, number) for string, number in zip(w, prob5[0])))
Happy Journey(0.9400), What a Good Life!(0.5610), Far Far Away(0.4300), Slow and Steady(0.2420), The Meeting(0.1001)
</code></pre>
<p>If you use Python 2.x, use the <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow"><code>itertools</code></a> module and its <code>izip</code> function that has improved performance over the native <code>zip</code>. If the objects have a different number of elements, use <code>izip_longest</code> instead.</p>
<pre><code># example
import itertools
...
f.write(', '.join('{}({})'.format(string, number) for string, number in itertools.izip(w, prob5)))
#f.write(', '.join('{}({})'.format(string, number) for string, number in itertools.izip_longest(w, prob5))) # if w and prob5 have a different number of elements
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a> to combine the two lists and then itertools <a href="https://docs.python.org/3.5/library/itertools.html#itertools-recipes" rel="nofollow">grouper</a> to split into groups of two.</p>
<pre><code>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

for group in grouper(zip(w, prob5), 2):
    print(group)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean like this?</p>
<pre><code>names = ['Happy Journey', 'What a Good Life!', 'Far Far Away', 'Slow and Steady', 'The Meeting']
probabilities = (0.94, 0.56, 0.43, 0.24, 0.10)
myDesiredOutput = ['{}({})'.format(names[n],probabilities[n]) for n,v in enumerate(names)]

&gt;&gt;&gt;myDesiredOutput
['Happy Journey(0.94)',
 'What a Good Life!(0.56)',
 'Far Far Away(0.43)',
 'Slow and Steady(0.24)',
 'The Meeting(0.1)']
</code></pre>
<p>And to write the output directly to a file:</p>
<pre><code>with open('out.txt', 'w') as f:
    for item in ['{}({})\n'.format(names[n],probabilities[n]) for n,v in enumerate(names)]:
        f.write(item)
</code></pre>
<p>You can change <code>'\n'</code> with <code>','</code> if you want to write the output in one single line.</p>
</div>
<span class="comment-copy">Hi, but I can't use <b>prob5</b> directly since it is a numpy array. Updated the question to include some details about it. I need to extract the probabilities from it first which is why I was running an inner loop in prob5.</span>
<span class="comment-copy">@minks: I edited the answer. If the problem is still not solved, please be more specific about the problem with numpy.</span>
<span class="comment-copy">Hi, this works now. I was just wondering why doesnt the format apply to the first prob5 element. Only the next 4 are being reduced to 4 decimal places.</span>
<span class="comment-copy">@minks It was a matter of adding the <code>f</code> specifier: <code>...'{}({:.4})'...</code> -&gt; <code>...'{}({:.4f})'...</code></span>
<span class="comment-copy">Hi, I have updated the question to include details on <b>prob5</b>, the reason being that prob5 is a numpy array.. So i need to run an inner loop for it to extract the values..</span>
