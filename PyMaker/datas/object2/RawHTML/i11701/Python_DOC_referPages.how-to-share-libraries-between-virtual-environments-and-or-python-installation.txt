<div class="post-text" itemprop="text">
<p>There is 2 situation:</p>
<p>1) I was trying to install pygtk in my virtual environment. py2cairo caused errors so i couldn't install. Then i linked pygtk and py2cairo in my python installation to my virtual enviroment as offered in here &gt;&gt; <a href="https://stackoverflow.com/questions/12830662/python-package-installed-globally-but-not-in-a-virtualenv-pygtk">Python package installed globally, but not in a virtualenv (PyGTK)</a></p>
<p>2) I have many virtual environments for my django applications in my server. All have common django package in same version in nearly  all my virtual enviroments. And so in every virtual environment there is a django copy again and again.</p>
<p>For these 2 situation linking could work as charm but !</p>
<p><strong>Question</strong>: i still cant find any solution how to make pip to see these packages.</p>
<p><strong>PS</strong>: Or any better approach for this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that virtualenv created with <code>--system-site-packages</code> option will do the job. Docs <a href="https://virtualenv.pypa.io/en/latest/reference.html#cmdoption--system-site-packages" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">Thank you. But it is a partial answer. Sharing with other virtual environments and the main question still remains</span>
<span class="comment-copy">Can't you just install globally package which you want to share, eg. django?</span>
<span class="comment-copy">Yes i can. But what about 2 main django branch 1.6 and 1.8 with many apps depending on them? For example 20 virtual enviroment uses django 1.6 and 30 enviroment uses django 1.8. then?</span>
<span class="comment-copy">I see. I have an idea, but I'm not sure if it'll work correctly - you can set one venv with django 1.6, then create venv for particular app and modify <code>activate</code> script to force it to use django from first venv (<a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow noreferrer">PYTHONPATH</a> should do the job). But, as I said, I'm not sure if it'll work. Moreover, I'm not sure if it's good idea - it somewhat spoils the possibility of up-/downgrade of a particular library.</span>
<span class="comment-copy">I think it could be more messy :) linking is better than this except pip problem.</span>
