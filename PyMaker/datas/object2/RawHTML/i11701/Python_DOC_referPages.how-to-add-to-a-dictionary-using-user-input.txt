<div class="post-text" itemprop="text">
<p>I'm doing a project but there's one problem I've run into while using the dictionary, more specifically how to add an entry</p>
<pre><code>thing = {'a':1, 'b':2, 'c':3}
thing.update(input('add more'))
print(thing)
</code></pre>
<p>The problem I get when I try to add to this is:<code>ValueError: dictionary update sequence element #0 has length 1; 2 is required</code>. So what way do I have to put the information in so that the dictionary gets updated? So far I tried "<code>d [4]</code>", "<code>d 4</code>" and "<code>d:4</code>".</p>
</div>
<div class="post-text" itemprop="text">
<p>You must convert your input to be a dictionary by using the curly braces (<code>{ }</code>). You can split the input so that you have a string that contains your key and a string that contains your value.</p>
<p>For example if you wanted to add the string <code>input</code> which was assigned the value <code>d:4</code> you would use: </p>
<pre><code>key, val = your_input.split(':')
thing.update({key:val})
</code></pre>
<p>This is because the <code>dict.update</code> function requires a dictionary as a parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>You haven't described what is acceptable for the user to enter, however, you can do it with <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code></a>. This requires the user to enter a valid Python dictionary. </p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; thing = {'a':1, 'b':2, 'c':3}
&gt;&gt;&gt; thing.update(literal_eval(input('add more: ')))
add more: {'d':4, 'e':5, 'z':26}
&gt;&gt;&gt; thing
{'a': 1, 'c': 3, 'z': 26, 'd': 4, 'b': 2, 'e': 5}
</code></pre>
<p>The input is not very user friendly though.</p>
<p>You could just have the user enter space separated keys and values, e.g. <code>a 1 e 5 z 26</code>. Then convert that to a dict and perform the update:</p>
<pre><code>&gt;&gt;&gt; thing = {'a':1, 'b':2, 'c':3}
&gt;&gt;&gt; it = iter(input('add more: ').split())
add more: a 10 y 25
&gt;&gt;&gt; thing.update(dict(zip(it, it)))
&gt;&gt;&gt; thing
{'y': '25', 'c': 3, 'b': 2, 'a': '10'}
</code></pre>
<p>Or you could use <code>:</code> to separate keys and values, with space between each item:</p>
<pre><code>&gt;&gt;&gt; thing = {'a':1, 'b':2, 'c':3}
&gt;&gt;&gt; thing.update(dict(s.split(':') for s in input('add more: ').split()))
add more: a:10 z:26
&gt;&gt;&gt; thing
{'a': '10', 'c': 3, 'z': '26', 'b': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your goal is to add a single element, you can do something like this:</p>
<pre><code>thing['d'] = 4
</code></pre>
<p>Substitute the input in the suitable place.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>dictionary = {'Big brother':'Onii-chan', 'Big sister': 'Onee-sama', 'Hello': 'Konichiwa', 'Master': 'Sensei', 'Good Morning': 'Ohayo', 'Senior': 'Senpai', 'Ocean': 'Kaiyou/Umi','Darkness': 'Yami', 'Light': 'Hikari', 'Sky':'Sora','x':[1,2]}

keep_going = 'Y'


while keep_going == 'y' or keep_going == 'Y':

 print(dictionary.keys())

 x = input("Pick one out of the list to see the translation in japanese")

print(dictionary[x])

keep_going = input('would you like another one? (Y for Yes): ')
</code></pre>
</div>
<span class="comment-copy"><code>update</code> takes a dictionary as an argument, not a string.</span>
<span class="comment-copy">the quotations are there just to show that I've tried them exactly like that, when i entered them I did not include the quotes</span>
<span class="comment-copy">Just split the input and add it directly, e.g.: <code>k, v = input('add more').split(); thing[k] = int(v)</code>, then an input of <code>"d 4"</code> would result in <code>thing['d'] = 4</code>.</span>
<span class="comment-copy">@not_super_techy: Yes, but that has nothing to with what I said. :) <code>update</code> takes another dictionary as its argument, not a string. You can't expect to do <code>thing.update('foo')</code> and have it magically know what you want to do with it, it has to be in the right format. That format is a dictionary, which is the only parameter <code>update</code> accepts.</span>
<span class="comment-copy">@not_super_techy If you read the answers people are writing for you, you'll see colelemonz has already shown you how.</span>
<span class="comment-copy">How would that work? <code>{  }</code> is a for a dictionary literal and that doesn't take a string.</span>
<span class="comment-copy">@AChampion you are correct, I edited my answer accordingly</span>
<span class="comment-copy"><code>tuple</code> assignment is also quite useful: <code>key, val = input.split(':')</code> (though I wouldn't use a variable called <code>input</code>)</span>
<span class="comment-copy">the thing is I want to ask the user to add it in themselves</span>
<span class="comment-copy">Right. This is the syntax to do it (instead of extend), without knowing more about what you expect the user input to look like. You need to parse the user input (based on how you expect them to be typing it in) and then substitute the inputted key for <code>'d'</code> and the inputted value for <code>4</code>.</span>
