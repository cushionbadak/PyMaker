<div class="post-text" itemprop="text">
<p>I am currently working on a really simple encryption project algorithm to show basic understanding of how encryption works, and my encryption algorithm basically just uses the 'ord()' function for converting standard ASCII characters into integers that the algorithm can work on. </p>
<p>The problem I have run into is that I also need my program to be capable of encrypting, for example, the contents of a Windows executable (EXE) file. To do so, I need to convert all sorts of special characters (Not ASCII) into integers that I can operate off of.</p>
<p>I don't know a whole lot about encoding, but from what I understand, 'ord()' only works because there is a ASCII character map that has a corresponding number for each character. I couldn't seem to figure how to convert the special characters of an EXE file straight to integers, so I tried converting to bytes which seems a little more universal to me (please correct me if I am wrong).</p>
<p>At this point, I am just looking for a solution to be able to read an EXE file, and convert each character into a number specific to that character (for encryption/ decryption purposes).</p>
</div>
<div class="post-text" itemprop="text">
<p>You are confusing the meaning assigned to bytes (like the ASCII standard) with the bytes themselves. <code>ord()</code> just gives you the numerical value for a given byte. That Python interprets those bytes and shows you ASCII codepoints is neither here nor there.</p>
<p>In other words, <code>ord()</code> doesn't have to consult an ASCII table and can handle <em>any</em> byte value. All it has to do is take the already known byte value and give you a Python <code>int</code> object for it.</p>
<p>Read your data as binary (open the file with <code>b</code> added to the file mode), and use <code>ord()</code>. In Python 2, that'll result in <code>str</code> objects, and each character in such an object is really a byte value in the range 0 - 255.</p>
<p>Note that if you are using Python 3, reading from a file in binary mode results in a <code>bytes</code> object that makes it clearer still that these are integer values in a range:</p>
<pre><code>&gt;&gt;&gt; b'abc'
b'abc'
&gt;&gt;&gt; b'abc'[0]
97
</code></pre>
<p>Indexing to an individual point in a <code>bytes</code> object produces the integer value and no call to <code>ord()</code> is required.</p>
</div>
<span class="comment-copy">You can use python's <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> module for converting values to bytes.</span>
<span class="comment-copy"><code>struct</code> is overkill, they don't need to interpret bytes as multi-byte values representing numbers or a heterogenous mix of meanings in a binary stream.</span>
