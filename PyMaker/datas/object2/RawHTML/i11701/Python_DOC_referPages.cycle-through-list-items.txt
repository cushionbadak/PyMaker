<div class="post-text" itemprop="text">
<p>I have a list of items which I would like to periodically "cycle" through, accessing the first (0th) item and subsequently moving it to the back of the list. What is the best way to accomplish this? My desired syntax is shown below.</p>
<pre><code>items = ["Alex", "Bob", "Charlie", "Doug", "Eddie"]

display_next_item(items)
# Alex

display_next_item(items)
# Bob

# ...

display_next_item(items)
# Eddie

display_next_item(items)
# Alex
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle()</code></a>:</p>
<pre><code>from itertools import cycle

L = [10, 20, 30]
cycled_list = cycle(L)
</code></pre>
<p>Get 10 items:</p>
<pre><code>for x in range(10):
    print(next(cycled_list))
</code></pre>
<p>Output:</p>
<pre><code>10
20
30
10
20
30
10
20
30
10
</code></pre>
<p>Get the next item with <code>next(cycled_list)</code>.</p>
<p>Note <code>itertools.cycle()</code> makes a copy of your list. You can avoid this by 
writing your own cycle iterator function that works only with sequences but not with iterators:</p>
<pre><code>def my_cycle(seq):
    while seq:
        for element in seq:
            yield element

cycled_list = my_cycle(L)
for x in range(10):
    print(next(cycled_list))
</code></pre>
<p>Output:</p>
<pre><code>10
20
30
10
20
30
10
20
30
10
</code></pre>
<p>The second method should be the most performant because it does not copy
any part the list at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>.pop()</code> with <code>.append()</code>:</p>
<pre><code>items = [1, 2, 3, 4, 5]
item = items.pop(0)
items.append(item)
print(item) # 1
print(items) # [2, 3, 4, 5, 1]
</code></pre>
</div>
<span class="comment-copy">@TessellatingHeckler I seem to have incorrectly split my question and potential answer. Fixed - sorry about that.</span>
