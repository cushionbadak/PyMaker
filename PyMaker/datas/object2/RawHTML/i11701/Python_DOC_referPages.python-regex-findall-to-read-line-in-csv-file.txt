<div class="post-text" itemprop="text">
<p>I have a .csv file (or could happily be a .txt file) with some records in it:</p>
<pre><code>JB74XYZ Kerry   Katona  44  Mansion_House   LV10YFB
WL67IAM William Iam 34  The_Voice_Street    LN44HJU
</code></pre>
<p>etc etc</p>
<p>I have used python to open and read the file, then regex findall (and attempted a similar regex rule) to identify a match:</p>
<pre><code>import re
from re import findall

reg = "JB74XYZ"

with open("RegDD.txt","r")as file:
    data=file.read()
    search=findall(reg,data)

print (search)
</code></pre>
<p>which gives the resulting output:</p>
<pre><code>['JB74XYZ']
</code></pre>
<p>I have tested this out, and it seems I have the regex findall working, in that it is correctly identifying a 'match' and returning it.</p>
<ol>
<li>My question is, how do I get the remaining content of the 'matched' lines to be returned as well? (eventually I will get this written into a new file, but for now I just want to have the matching line printed).</li>
</ol>
<p>I have explored python dictionaries as one way of indexing things, but I hit a wall and got no further than the regex returning a positive result.</p>
<ol start="2">
<li>I guess from this a second question might be: am I choosing the wrong approach altogether?</li>
</ol>
<p>I hope I have been specific enough, first question here, and I have spent hours (not minutes) looking for specific solutions, and trying out a few ideas.
I'm guessing that this is not an especially tricky concept, but I could do with a few hints if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>A better way to handle this would be to use Python's <a href="https://docs.python.org/library/csv.html" rel="nofollow">csv</a> module. From the looks of your CSV, I'm guessing it's tab-delimited so I'm running off of that assumption.</p>
<pre><code>import csv

match = "JB74XYZ"

matched_row = None
with open("RegDD.txt", "r") as file:
    # Read file as a CSV delimited by tabs.
    reader = csv.reader(file, delimiter='\t')
    for row in reader:
        # Check the first (0-th) column.
        if row[0] == match:
            # Found the row we were looking for.
            matched_row = row
            break

print(matched_row)
</code></pre>
<p>This should then output the following from <code>matched_row</code>:</p>
<pre><code>['JB74XYZ', 'Kerry', 'Katona', '44', 'Mansion_House', 'LV10YFB']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use the <a href="https://docs.python.org/2/library/csv.html" rel="nofollow">csv module</a>, read in the file with the tab as delimiter, and then compare line by line. If there is a match in that line, append it to a results list. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to read all the values in .csv file and save them in a dictionary with key as <code>JB74XYZ</code> and the details related to this. Then you can read this file line by line and just use <code>split(" ")</code> to get the list. Then you can easily make dictionary by just removing the first element from list and making it key and saving the remaining list as value of the dictionary.
If you want to use regular expresssion, you should refer to this link:
<a href="https://docs.python.org/3/library/re.html" rel="nofollow">https://docs.python.org/3/library/re.html</a> for extraction of details from your file and saving it in tuples.</p>
</div>
<div class="post-text" itemprop="text">
<p>So, after looking at all the excellent replies, I ended up focusing (as advised by a few here) to look a csv module in a bit more detail. With some digging around I've ended up with this (and, tbh at this stage, I'm not sure how I did it exactly...):</p>
<pre><code>import csv

reg="TS74UIO"
reader = csv.reader(open('T3.csv'))
row=0
for row in reader:
if row[0] == reg:
    print (row)
else:
    row=+1
</code></pre>
<p>and this resulted in an output that I think I'll be able to write to another file:</p>
<pre><code>['TS74UIO', 'Kerry', 'Katona', '44', 'Mansion_House', 'LV10YFB']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try <code>re.search</code> or if you require it to be at the start, <code>re.match</code>. Both return a <code>MatchObject</code> with information about the operation, including access to the original string. For example, to get the remaining string:</p>
<p>import re</p>
<pre><code>reg = "(JB74XYZ)"

with open("RegDD.txt","r")as file:
    for line in file:
        line = line.strip()
        match = re.match(reg,line.strip())
        if match:
            print (line[match.end():])
</code></pre>
<p>Note that I had to change the regex to a group, in order to tell <code>re</code> that I want to track the position of what I matched.</p>
</div>
<span class="comment-copy">What's your goal? What do you want to index?</span>
<span class="comment-copy">My goal is to have a store of registration plate details with associated names and addresses. The registration plate will be identified in another part of the system, then I would like the other associated details to be written to another file. The broad idea is that a car can be automatically recognised, and the owner details be generated. (all hypothetical though, I'm not snooping etc..</span>
<span class="comment-copy">This is great. Many thanks. First time on here, it is amazing.</span>
<span class="comment-copy">@TomShaw Since you are new here, I'd recommend you read <a href="http://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a> because there were several answers given by different people to your question.</span>
<span class="comment-copy">The delimiter seems to be tab, not space.</span>
<span class="comment-copy">that depends on the type of input i suppose @Suzana_K</span>
<span class="comment-copy">The OP's example input is clearly tab-separated.</span>
<span class="comment-copy">Ok, so u right @Suzana_K</span>
<span class="comment-copy">Thank you all. Very useful.</span>
<span class="comment-copy">I couldnt get this to just return the matched line I need, instead it returns either all (search) or nothing (using match in the regex). Is there anything you could suggest for a refinement please?</span>
<span class="comment-copy">I've edited the example to check line by line instead. But after reading the other answers, I agree that it would be better to read the data with the 'csv' module as it would easy parsing the data.</span>
