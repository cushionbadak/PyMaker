<div class="post-text" itemprop="text">
<p>well I'm studying about unit test, and I faced a question about it using python, but I don't know the language very well. How could I do a unit test of this function? :</p>
<pre><code>#following from Python cookbook, #475186
def has_colours(stream):

    if not hasattr(stream, "isatty"):
        return False

    if not stream.isatty():
        return False  # auto color only on TTYs

    try:
        import curses
        curses.setupterm()
        return curses.tigetnum("colors") &gt; 2
    except:
        # guess false in case of error
        return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should/or it's best to cover all possible scenarios your function handles by sending appropriate input in each test case. Here is a stub for a test class to understand what i mean:</p>
<pre><code>import unittest


class TestHasColors(unittest):
    def test_has_colors_returns_false_when_stream_does_not_have_func_tty(self):
        # Call `has_colours` with stream that does not have it and verify return result is False
        stream = object()
        assert has_colours(stream) is False

    def test_has_colors_returns_false_when_stream_func_tty_returns_false(self):
        # TODO: Call `has_colours` with stream that has func tty and verify return result is False
        pass

    def test_has_colors_returns_false_when_curses_raises_error(self):
        # TODO: Call `has_colours` with stream that reaches up to `curses.tigetnum` and patch it to raise an error
        pass

    def test_has_colors_returns_false_when_curses_tigetnum_colors_less_than_three(self):
        # TODO: Call `has_colours` with stream that reaches up to `curses.tigetnum` and patch to return anything lte 2
        pass

    def test_has_colors_returns_true_when_curses_tigetnum_colors_greater_than_two(self):
        # TODO: Call `has_colours` with stream that reaches up to `curses.tigetnum` and patch to return anything gt 2
        pass
</code></pre>
<p>Note: The last 3 test cases require patching <code>curses.tigetnum</code>. The reason is so that you can control what it returns easily. You can even make it raise an error. Here are some examples in the docs:</p>
<p><a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow">https://docs.python.org/3/library/unittest.mock.html#patch</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Imagine each line of code doesn't exist, or has been changed to be wrong. Write a test which needs that line of code to exist.</p>
<pre><code>&gt;&gt;&gt; has_colours('hello')
False

&gt;&gt;&gt; has_colours(StringIO())
False
</code></pre>
<p>etc.</p>
<p>You probably need to pass in a fake curses instead of importing the real thing.</p>
</div>
