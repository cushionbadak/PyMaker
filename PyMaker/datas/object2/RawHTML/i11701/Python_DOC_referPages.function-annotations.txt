<div class="post-text" itemprop="text">
<p>I really do like function annotations, because they make my code a lot clearer.
But I have a question: How do you annotate a function that takes another function as an argument? Or returns one?</p>
<pre><code>def x(f: 'function') -&gt; 'function':
    def wrapper(*args, **kwargs):
        print("{}({}) has been called".format(f.__name__, ", ".join([repr(i) for i in args] + ["{}={}".format(key, value) for key, value in kwargs])))
        return f(*args, **kwargs)
    return wrapper
</code></pre>
<p>And I don't want to do <code>Function = type(lambda: None)</code> to use it in annotations.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the new <a href="https://docs.python.org/3/library/typing.html" rel="nofollow"><code>typing</code> type hinting support</a> added to Python 3.5; functions are <em>callables</em>, you don't need a function type, you want something that can be called:</p>
<pre><code>from typing import Callable, Any

def x(f: Callable[..., Any]) -&gt; Callable[..., Any]:
    def wrapper(*args, **kwargs):
        print("{}({}) has been called".format(f.__name__, ", ".join([repr(i) for i in args] + ["{}={}".format(key, value) for key, value in kwargs])))
        return f(*args, **kwargs)
    return wrapper
</code></pre>
<p>The above specifies that your <code>x</code> takes a callable object that accepts any arguments, and it's return type is <code>Any</code>, e.g. anything goes, it is a generic callable object. <code>x</code> then returns something that is just as generic.</p>
<p>You could express this with <code>x(f: Callable) -&gt; Callable:</code> too; a plain <code>Callable</code> is equivalent to <code>Callable[..., Any]</code>. Which one you pick is a style choice, I used the explicit option here as my personal preference.</p>
</div>
<span class="comment-copy">Are you using Python 3.5?</span>
<span class="comment-copy">Yes I do. I like the new "async def" syntax. (minimum amount of characters in comments? Really?)</span>
<span class="comment-copy">What's better about this than simply annotating with <code>Callable</code>?</span>
<span class="comment-copy">@CodingLambdas: it is.</span>
<span class="comment-copy">@timgeb: type inference tools can now make further assertions about anything using this decorator, an IDE can auto-complete based on the hints, etc.</span>
<span class="comment-copy">@timgeb: in this <i>specific</i> case, a decorator has to accept a very generic callable and can't make any further assertions about that callable, but in most code, the assertions will be a lot more specific.</span>
<span class="comment-copy">@timgeb: and yes, a plain <code>Callable</code> is equivalent to <code>Callable[..., Any]</code>. I just picked explicit over implicit here.</span>
