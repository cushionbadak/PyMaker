<div class="post-text" itemprop="text">
<p>Consider the following for loop:</p>
<pre><code>for x in range(0, 3):
    print "We're on time %d" % (x)
</code></pre>
<p>I can't seem to find the proper name of the <code>x</code> in the for loop. I know it is essentially a sort of arbitrary placeholder but I'd be interested in knowing the proper name if anyone does know.</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct name is "iteration variable", aka "iterating var" if you don't mind bad grammar.</p>
</div>
<div class="post-text" itemprop="text">
<p>The syntax in the python 2 <a href="https://docs.python.org/2/reference/compound_stmts.html" rel="nofollow">doc</a> gives:</p>
<pre><code>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</code></pre>
<p>and then:</p>
<p>"<em>The suite may assign to the variable(s) in the target list;</em>"</p>
<p>So <code>x</code> in your example is a variable.</p>
<p>The Python 3 <a href="https://docs.python.org/3.4/reference/compound_stmts.html" rel="nofollow">version</a> is worded slightly differently:</p>
<p>"<em>The for-loop makes assignments to the variables(s) in the target list.</em>"</p>
<p>But you can see that it still calls them variables. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>x</code> is a variable, or "iteration variable", if you will, which, for a python <code>for</code> loop is a placeholder for each individual member of an iterable (basically a container to hold an arbitrary number of a data type), and <code>range()</code> is an iterator (as oppposed to previous versions of python, where it was a list), which returns its unique iterable data type, which is, functionally speaking, like a list where every member is destroyed after its use to preserve memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's obvious that <code>x</code> is just a variable since it is varied in each iteration of for-loop. The range of its variation is in (0,3), and the value for each iteration is from 0 to 2. (local var / iteration var) </p>
</div>
<div class="post-text" itemprop="text">
<p>It is a variable, perhaps made easier to understand when you view the loop in generator format. </p>
<p><a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/_images/listComprehensions.gif" rel="nofollow">Generator image</a></p>
</div>
<span class="comment-copy">Don't understand exactly what you mean. X is a local variable, only accessible inside the for loop. "Index" may be??</span>
<span class="comment-copy">@Jorge The iteration variable is local to the <i>function</i>, and not just the loop.  It is accessible outside the loop also and could have been defined before the for loop.  The situation is different for comprehensions in 3.x.</span>
<span class="comment-copy"><code>x</code> is not an <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow noreferrer">iterator</a>.</span>
<span class="comment-copy">Iterator is complete different beast.</span>
<span class="comment-copy">Your edit isn't much of an answer, although it is certainly more correct.</span>
