<div class="post-text" itemprop="text">
<p>If I have a list that is already sorted and use the <strong>in</strong> keyword, for example:</p>
<pre><code>a = [1,2,5,6,8,9,10]
print 8 in a
</code></pre>
<p>I think this should do a sequential search but can I make it faster by doing binary search?
Is there a pythonic way to search in a sorted list?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a binary search for Python in the standard library, in module <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow"><code>bisect</code></a>. It does not support <code>in</code>/<code>contains</code> as is, but you can write a small function to handle it:</p>
<pre><code>from bisect import bisect_left
def contains(a, x):
    """returns true if sorted sequence `a` contains `x`"""
    i = bisect_left(a, x)
    return i != len(a) and a[i] == x
</code></pre>
<p>Then</p>
<pre><code>&gt;&gt;&gt; contains([1,2,3], 3)
True
&gt;&gt;&gt; contains([1,2,3], 4)
False
</code></pre>
<p><s>This is not going to be very speedy though, as <code>bisect</code> is written in Python, and not in C, so you'd probably find sequential <code>in</code> faster for quite a lot cases.</s> <code>bisect</code> has had an optional C acceleration in CPython  since Python 2.4.</p>
<p>It is hard to time the exact break-even point in CPython. This is because the code is written in C; if you check for a value that is greater to or less than any value in the sequence, then the CPU's branch prediction will play tricks on you, and you get:</p>
<pre><code>In [2]: a = list(range(100))
In [3]: %timeit contains(a, 101)
The slowest run took 8.09 times longer than the fastest. This could mean that an intermediate result is being cached 
1000000 loops, best of 3: 370 ns per loop
</code></pre>
<p>Here, the best of 3 is not representative of the <strong>true</strong> running time of the algorithm.</p>
<p>But tweaking tests, I've reached the conclusion that bisecting might be faster than <code>in</code> for lists having as few as 30 elements.</p>
<hr/>
<p>However, if you're doing really many <code>in</code> operations you ought to use a <code>set</code>; you can convert the list once into a set (it does not even be sorted) and the <code>in</code> operation will be asymptotically faster than any binary search ever would be:</p>
<pre><code>&gt;&gt;&gt; a = [10, 6, 8, 1, 2, 5, 9]
&gt;&gt;&gt; a_set = set(a)
&gt;&gt;&gt; 10 in a_set
True
</code></pre>
<p>On the other hand, <em>sorting</em> a list has <strong>greater</strong> time-complexity than building a set, so most of the time a set would be the way to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard library has the <a href="https://docs.python.org/2/library/bisect.html" rel="nofollow"><code>bisect</code></a> module which supports searching in sorted sequences.</p>
<p>However, for small lists, I would bet that the C implementation behind the <code>in</code> operator would beat out <code>bisect</code>.  You'd have to measure with a bunch of common cases to determine the real break-even point on your target hardware...</p>
<hr/>
<p>It's worth noting that if you can get away with an unordered iterable (i.e. a <code>set</code>), then you can do the lookup in <code>O(1)</code> time on average (using the <code>in</code> operator), compared to bisection on a sequence which is <code>O(logN)</code> and the <code>in</code> operator on a sequence which is <code>O(N)</code>.  And, with a set you also avoid the cost of sorting it in the first place :-).</p>
</div>
<span class="comment-copy">'I think this should do a sequential search'. Why do you think that is what is happening?</span>
<span class="comment-copy">convert it to a set and then use "in"</span>
<span class="comment-copy">@Lutz Because the interpreter cannot magically figure out that the list is sorted?</span>
<span class="comment-copy">@Lutz <code>def is_in(some_arr, val): return val in some_arr</code> - how do you think the interpreter should figure out whether <code>some_arr</code> is sorted or not. Clearly this is impossible so it can't do that. Well it could have an extra check in there to figure out if the list is sorted and then use a binary search - but since that requires to go through the whole list, that rather defeats the purpose.</span>
<span class="comment-copy">@Benjamin: conversion to a set is only helpful if you want to do multiple <code>in</code> tests. If the list is sorted, bisection (O(logN)) is going to beat conversion to a set (O(N)).</span>
<span class="comment-copy">I did some tests, the break-even point is quite small actually; about 30 integers in range 0-60, if half of the lookups would be misses.</span>
<span class="comment-copy">@AnttiHaapala -- That sounds pretty reasonable.  Thanks for doing that :-).  It gets really interesting doing these kinds of tests in compiled languages like C or Fortran.  Then <a href="http://stackoverflow.com/q/10524032/748858">cache locality and branch prediction</a> can start to really influence your runtime.</span>
