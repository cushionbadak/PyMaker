<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35439578/how-does-a-for-loop-evaluate-its-argument">How does a for loop evaluate its argument</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>Is foo() called in every repeat of the loop?</p>
<pre><code>for num in foo():
    # Do something
</code></pre>
<p>and if that would be inefficient, is this code better?</p>
<pre><code>l = foo()
for num in l:
    # Do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No. In both <code>foo()</code> is called only once. The former can be expected to be slightly faster than the latter. Also, <code>list</code> is a name of a built-in function/type, and you shouldn't use it as a variable name.</p>
<hr/>
<p>You can use Python bytecode disassembler <a href="https://docs.python.org/3/library/dis.html" rel="nofollow"><code>dis.dis</code></a> to find out what bytecode is produced by CPython:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile('for num in foo():pass', '', 'exec'))
  1           0 SETUP_LOOP              17 (to 20)
              3 LOAD_NAME                0 (foo)
              6 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              9 GET_ITER
        &gt;&gt;   10 FOR_ITER                 6 (to 19)
             13 STORE_NAME               1 (num)
             16 JUMP_ABSOLUTE           10
        &gt;&gt;   19 POP_BLOCK
        &gt;&gt;   20 LOAD_CONST               0 (None)
             23 RETURN_VALUE
</code></pre>
<p>In the bytecode above, the loop body starts at <code>10 FOR_ITER</code> and continues until <code>19 POP_BLOCK</code>. Compare with:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile('l = foo()\nfor num in list:pass', '', 'exec'))
  1           0 LOAD_NAME                0 (foo)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 STORE_NAME               1 (l)

  2           9 SETUP_LOOP              14 (to 26)
             12 LOAD_NAME                1 (l)
             15 GET_ITER
        &gt;&gt;   16 FOR_ITER                 6 (to 25)
             19 STORE_NAME               2 (num)
             22 JUMP_ABSOLUTE           16
        &gt;&gt;   25 POP_BLOCK
        &gt;&gt;   26 LOAD_CONST               0 (None)
             29 RETURN_VALUE
</code></pre>
<p>Here the loop body starts at position 16, and continues until 25. The bytecode for the loop body is identical; the only differences are the extra opcode <code>STORE_NAME</code> to store the return value of <code>foo()</code> into <code>list</code>, and extra <code>LOAD_NAME</code> to retrieve the value from <code>list</code>.</p>
</div>
<span class="comment-copy">In more detail: <i>If</i> <code>foo</code> was called every iteration in the first example, then the latter <i>would</i> be more efficient. As it is, the latter is less efficient by however long it takes to create and access a variable.</span>
<span class="comment-copy">Thank you for the detailed explanation!</span>
