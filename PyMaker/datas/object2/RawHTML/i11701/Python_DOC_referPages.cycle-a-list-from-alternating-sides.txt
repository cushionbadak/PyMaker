<div class="post-text" itemprop="text">
<p>Given a list</p>
<pre><code>a = [0,1,2,3,4,5,6,7,8,9]
</code></pre>
<p>how can I get</p>
<pre><code>b = [0,9,1,8,2,7,3,6,4,5]
</code></pre>
<p>That is, produce a new list in which each successive element is alternately taken from the two sides of the original list?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; [a[-i//2] if i % 2 else a[i//2] for i in range(len(a))]
[0, 9, 1, 8, 2, 7, 3, 6, 4, 5]
</code></pre>
<p><em>Explanation:</em><br/>
This code picks numbers from the beginning (<code>a[i//2]</code>) and from the end (<code>a[-i//2]</code>) of <code>a</code>, alternatingly (<code>if i%2 else</code>). A total of <code>len(a)</code> numbers are picked, so this produces no ill effects even if <code>len(a)</code> is odd.<br/>
<code>[-i//2 for i in range(len(a))]</code> yields <code>0, -1, -1, -2, -2, -3, -3, -4, -4, -5</code>,<br/>
<code>[ i//2 for i in range(len(a))]</code> yields <code>0,  0,  1,  1,  2,  2,  3,  3,  4,  4</code>,<br/>
and <code>i%2</code> alternates between <code>False</code> and <code>True</code>,<br/>
so the indices we extract from <code>a</code> are: <code>0, -1,  1, -2,  2, -3,  3, -4,  4, -5</code>.</p>
<p><em>My assessment of pythonicness:</em><br/>
The nice thing about this one-liner is that it's short and shows symmetry (<code>+i//2</code> and <code>-i//2</code>).<br/>
<strong>The bad thing, though, is that this symmetry is deceptive:</strong><br/>
One might think that <code>-i//2</code> were the same as <code>i//2</code> with the sign flipped. <a href="http://python-history.blogspot.de/2010/08/why-pythons-integer-division-floors.html" rel="noreferrer">But in Python, integer division returns the floor</a> of the result instead of truncating towards zero. So <code>-1//2 == -1</code>.<br/>
Also, I find accessing list elements by index less pythonic than iteration.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/dev/library/itertools.html#itertools.cycle"><code>cycle</code></a> between getting items from the forward <a href="https://docs.python.org/3.5/library/functions.html#iter"><code>iter</code></a> and the <a href="https://docs.python.org/3.5/library/functions.html#reversed"><code>reversed</code></a> one. Just make sure you stop at <code>len(a)</code> with <a href="https://docs.python.org/dev/library/itertools.html#itertools.islice"><code>islice</code></a>.</p>
<pre><code>from itertools import islice, cycle

iters = cycle((iter(a), reversed(a)))
b = [next(it) for it in islice(iters, len(a))]

&gt;&gt;&gt; b
[0, 9, 1, 8, 2, 7, 3, 6, 4, 5]
</code></pre>
<p>This can easily be put into a single line but then it becomes much more difficult to read:</p>
<pre><code>[next(it) for it in islice(cycle((iter(a),reversed(a))),len(a))]
</code></pre>
<p>Putting it in one line would also prevent you from using the other half of the iterators if you wanted to:</p>
<pre><code>&gt;&gt;&gt; iters = cycle((iter(a), reversed(a)))
&gt;&gt;&gt; [next(it) for it in islice(iters, len(a))]
[0, 9, 1, 8, 2, 7, 3, 6, 4, 5]
&gt;&gt;&gt; [next(it) for it in islice(iters, len(a))]
[5, 4, 6, 3, 7, 2, 8, 1, 9, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A very nice one-liner in Python 2.7:</p>
<pre><code>results = list(sum(zip(a, reversed(a))[:len(a)/2], ()))
&gt;&gt;&gt;&gt; [0, 9, 1, 8, 2, 7, 3, 6, 4, 5]
</code></pre>
<p>First you zip the list with its reverse, take <em>half</em> that list, sum the tuples to form one tuple, and <em>then</em> convert to list. </p>
<p>In Python 3, <code>zip</code> returns a generator, so you have have to use <code>islice</code> from <code>itertools</code>:</p>
<pre><code>from itertools import islice
results = list(sum(islice(zip(a, reversed(a)),0,int(len(a)/2)),()))
</code></pre>
<p><em>Edit</em>: It appears this only works perfectly for even-list lengths - odd-list lengths will omit the middle element :( A small correction for <code>int(len(a)/2)</code> to <code>int(len(a)/2) + 1</code> will give you a duplicate middle value, so be warned. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can just <code>pop</code> back and forth:</p>
<pre><code>b = [a.pop(-1 if i%2 else 0) for i in range(len(a))]
</code></pre>
<p>Note: This destroys the original list, <code>a</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the right <a href="https://toolz.readthedocs.org" rel="noreferrer">toolz</a>.</p>
<pre><code>from toolz import interleave, take

b = list(take(len(a), interleave((a, reversed(a)))))
</code></pre>
<p>First, I tried something similar to Raymond Hettinger's solution with itertools (Python 3).</p>
<pre><code>from itertools import chain, islice

interleaved = chain.from_iterable(zip(a, reversed(a)))
b = list(islice(interleaved, len(a)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not terribly different from some of the other answers, but it avoids a conditional expression for determining the sign of the index.</p>
<pre><code>a = range(10)
b = [a[i // (2*(-1)**(i&amp;1))] for i in a]
</code></pre>
<p><code>i &amp; 1</code> alternates between 0 and 1. This causes the exponent to alternate between 1 and -1. <em>This</em> causes the index divisor to alternate between 2 and -2, which causes the index to alternate from end to end as <code>i</code> increases. The sequence is <code>a[0]</code>, <code>a[-1]</code>, <code>a[1]</code>, <code>a[-2]</code>, <code>a[2]</code>, <code>a[-3]</code>, etc.</p>
<p>(I iterate <code>i</code> over <code>a</code> since in this case each value of <code>a</code> is equal to its index. In general, iterate over <code>range(len(a))</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The basic principle behind your question is a so-called roundrobin algorithm. The <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>itertools</code>-documentation-page</a> contains a possible implementation of it:</p>
<pre><code>from itertools import cycle, islice

def roundrobin(*iterables):
    """This function is taken from the python documentation!
    roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C
    Recipe credited to George Sakkis"""
    pending = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables) # next instead of __next__ for py2
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
</code></pre>
<p>so all you have to do is split your list into two sublists one starting from the left end and one from the right end:</p>
<pre><code>import math
mid = math.ceil(len(a)/2) # Just so that the next line doesn't need to calculate it twice

list(roundrobin(a[:mid], a[:mid-1:-1]))
# Gives you the desired result: [0, 9, 1, 8, 2, 7, 3, 6, 4, 5]
</code></pre>
<p>alternatively you could create a longer list (containing alternating items from sequence going from left to right and the items of the complete sequence going right to left) and only take the relevant elements:</p>
<pre><code>list(roundrobin(a, reversed(a)))[:len(a)]
</code></pre>
<p>or using it as explicit generator with <code>next</code>:</p>
<pre><code>rr = roundrobin(a, reversed(a))
[next(rr) for _ in range(len(a))]
</code></pre>
<p>or the <strong>speedy variant</strong> suggested by @Tadhg McDonald-Jensen (thank you!):</p>
<pre><code>list(islice(roundrobin(a,reversed(a)),len(a)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>mylist = [0,1,2,3,4,5,6,7,8,9]
result = []

for i in mylist:
    result += [i, mylist.pop()]
</code></pre>
<p><strong>Note:</strong></p>
<blockquote>
<p>Beware: Just like @Tadhg McDonald-Jensen has said (see the comment below)
  it'll destroy half of original list object.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Not sure, whether this can be written more compactly, but it is efficient as it only uses iterators / generators</p>
<pre><code>a = [0,1,2,3,4,5,6,7,8,9]

iter1 = iter(a)
iter2 = reversed(a)
b = [item for n, item in enumerate(
        next(iter) for _ in a for iter in (iter1, iter2)
    ) if n &lt; len(a)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For fun, here is an itertools variant:</p>
<pre><code>&gt;&gt;&gt; a = [0,1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; list(chain.from_iterable(izip(islice(a, len(a)//2), reversed(a))))
[0, 9, 1, 8, 2, 7, 3, 6, 4, 5]
</code></pre>
<p>This works where <code>len(a)</code> is even.  It would need a special code for odd-lengthened input.</p>
<p>Enjoy!</p>
</div>
<div class="post-text" itemprop="text">
<p>Not at all elegant, but it is a clumsy one-liner:</p>
<pre><code>a = range(10)
[val for pair in zip(a[:len(a)//2],a[-1:(len(a)//2-1):-1]) for val in pair]
</code></pre>
<p><strong>Note that it assumes you are doing this for a list of even length.</strong> If that breaks, then this breaks (it drops the middle term). Note that I got some of the idea from <a href="https://stackoverflow.com/questions/7946798/interleaving-two-lists-in-python">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Two versions not seen yet:</p>
<pre><code>b = list(sum(zip(a, a[::-1]), ())[:len(a)])
</code></pre>
<p>and</p>
<pre><code>import itertools as it

b = [a[j] for j in it.accumulate(i*(-1)**i for i in range(len(a)))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this for even-sized lists (inspired by <a href="https://stackoverflow.com/questions/7946798/interleaving-two-lists-in-python">this post</a>):</p>
<pre><code>a = range(10)

b = [val for pair in zip(a[:5], a[5:][::-1]) for val in pair]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do something like this</p>
<pre><code>a = [0,1,2,3,4,5,6,7,8,9]
b = []
i = 0
j = len(a) - 1
mid = (i + j) / 2
while i &lt;= j:
    if i == mid and len(a) % 2 == 1:
        b.append(a[i])
        break
    b.extend([a[i], a[j]])
    i = i + 1
    j = j - 1

print b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can partition the list into two parts about the middle, reverse the second half and zip the two partitions, like so:</p>
<pre><code>a = [0,1,2,3,4,5,6,7,8,9]
mid = len(a)//2
l = []
for x, y in zip(a[:mid], a[:mid-1:-1]):
    l.append(x)
    l.append(y)
# if the length is odd
if len(a) % 2 == 1:
    l.append(a[mid])
print(l)
</code></pre>
<p>Output:</p>
<pre><code>[0, 9, 1, 8, 2, 7, 3, 6, 4, 5]
</code></pre>
</div>
<span class="comment-copy">you may link to one or more answers you like in the question or comments but please do not restate answers in the question.</span>
<span class="comment-copy">why not deque?! <code>l1=list(range(10)); d1=deque(l1); [d1.pop() if i%2 else d1.popleft() for i,_ in enumerate(l1) if d1]</code></span>
<span class="comment-copy">You currently hold the record for only one liner that doesn't need a scroll bar and works with odd length lists, since the OP has <a href="http://stackoverflow.com/questions/36533553/how-to-elegantly-cycle-a-list-from-alternating-sides/36533868?noredirect=1#comment60671692_36533951">stated they like one liners</a> I'd be inclined to say this is the best answer (+1 btw)</span>
<span class="comment-copy">This is also one of the few answers that doesn't run into issues with odd-sized lists. Well done!</span>
<span class="comment-copy">It fails on the "elegantly" part though, as no one looking at that code can immediately understand what it does.</span>
<span class="comment-copy">@Matsemann Nah, I wouldn't say no one ;-) But I appreciate what you mean, and I agree. Tadhg's answer is now by far the most pythonic here, in my mind. For the record, I wouldn't mind in the least if OP unaccepted my answer to promote the spirit of true readability.</span>
<span class="comment-copy">Please add an explanation to your answer. Code-only answers are discouraged.</span>
<span class="comment-copy">Actually, I prefer the two-liner you made from @canaaerus' idea over the accepted answer. Seeing <code>i//2</code> I still have to think about why the index needs to be halved, but with <code>[next(iters[n%2]) for n in a]</code> I understand <i>immediately</i>. IMHO, that two-liner is the truest rendition of "Take numbers alternatingly from front and end of list." I feel it deserves a more prominent position than at the end of your answer.</span>
<span class="comment-copy">@norman I have since edited my post to use <code>itertools.cycle</code> which I am even more fond of then my previous version.</span>
<span class="comment-copy">Whoa nice :-) That <i>is</i> even better. Are there any limits to the readability of Python code!?</span>
<span class="comment-copy">TypeError: 'zip' object is not subscriptable</span>
<span class="comment-copy">@canaaerus This works in Python 2.7. Let me see what I can do in Python 3.</span>
<span class="comment-copy">@canaaerus <code>zip</code> returns a generator in 3.5, and list in 2.7. Use <code>itertools.islice</code>.</span>
<span class="comment-copy">this loses the middle value when the list has an odd number of elements.</span>
<span class="comment-copy">Using <code>sum()</code> to concatenate an iterable of lists or tuples is a mistake.  It uses quadratic runtime.  Use <code>itertools.chain.from_iterable()</code> or a nested list comprehension instead.</span>
<span class="comment-copy">the original list was <code>a</code> and this destroys the original list.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen: OP didn't ask for a non-destructive method.</span>
<span class="comment-copy">no but it is something you really want to mention in your answer.</span>
<span class="comment-copy">here is non-destructive alternative: <a href="http://stackoverflow.com/questions/36533553/how-to-elegantly-cycle-a-list-from-alternating-sides#comment60937040_36533553" title="how to elegantly cycle a list from alternating sides%23comment60937040_36533553">stackoverflow.com/questions/36533553/…</a></span>
<span class="comment-copy">Damn it, I was just fiddling around with power of -1 myself :-D</span>
<span class="comment-copy">Heh. Feel free to add this to your answer, and I'll delete; it might be slightly more efficient than a branch, but it is decidedly less readable :) As such, it's barely worth an extra answer.</span>
<span class="comment-copy">you might want to use <code>for i in range(len(a))</code> for any list other then the direct result of the <code>range</code> function.</span>
<span class="comment-copy">I tend to like this answer, although probably the most efficient use is <code>b = list(islice(roundrobin(a,reversed(a)),len(a)))</code> since <code>reversed</code> doesn't need to create a whole new list like <code>[::-1]</code> does and you might as well use <code>islice</code> to cut off the end since again, less list creation overhaul.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen I've included the <code>reversed</code> in the examples and included your suggestion (I hope properly attributed). Thank you for the comment.</span>
<span class="comment-copy">this destroys half the original list, are you sure you want to be doing that?</span>
<span class="comment-copy">@TadhgMcDonald-Jensen You're 100% right! However, we do not know what are the real OP aims.</span>
<span class="comment-copy">this loses the middle value when the list has an odd number of elements.</span>
<span class="comment-copy"><code>iters = iter(a), reversed(a) ; b = [next(iters[n%2]) for n in range(len(a))]</code> originally I posted that in my answer but have since figured out a version I like even more.</span>
<span class="comment-copy">this loses the middle value when the list has an odd number of elements.</span>
<span class="comment-copy">this loses the middle value when the list has an odd number of elements.</span>
<span class="comment-copy">As noted in my answer. :-) I was actually using this as an excuse to use zip, but you are correct, that usage definitely kills odd length lists.</span>
<span class="comment-copy">Using <code>accumulate</code> to get a sequence of indices <code>[0, -1, 1, -2, 2, -3, 3, -4, 4, -5]</code> is a great idea.</span>
<span class="comment-copy">Lol, that's exactly the same as my answer, with the sum and list omitted.</span>
<span class="comment-copy">In fact I wanted to accept your answer (got to love 1-liners) but if I apply it to <code>a = range(11)</code>, it loses the number '5'</span>
<span class="comment-copy">@pythonic, long one liners are not very pythonesque so your SO name is very misleading.</span>
<span class="comment-copy">Ha, you have a point. I am unclear which answer should I accept in fact</span>
<span class="comment-copy">@Pythonic Norman deserves accepted answer! Crown him king!</span>
<span class="comment-copy">this loses the middle value when the list has an odd number of elements.</span>
<span class="comment-copy">Yes @TadhgMcDonald-Jensen youre right, let me correct it</span>
