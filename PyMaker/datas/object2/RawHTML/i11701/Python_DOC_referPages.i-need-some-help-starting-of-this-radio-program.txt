<div class="post-text" itemprop="text">
<p>What I need help on is getting the stations to change to the next station in the list if the user presses 3. </p>
<pre><code>class Radio:
def __init__(self):
    self.stations=["STATIC","97.2", "99.6", "101.7", "105.3", "108.5"]
    self.stationStart=self.stations[0]
def seekNext(self):
    self.stationsStart
</code></pre>
<p>It starts at static but I want it to change every single one and then start over again. I tried something like this:</p>
<pre><code>stations=["STATIC","97.2", "99.6", "101.7", "105.3", "108.5"]
a =input("enter 3 to seek next")
while a !="0":
   if a =="3":
      print(stations[-1])
</code></pre>
<p>I only end up getting the last station cannot figure out how to list the rest of the stations.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of reasonable ways to do what you want.</p>
<p>The easiest would be to make your class store an index into your list, rather than an list item directly. That way you can increment the index and wrap it around using the <code>%</code> modulus operator:</p>
<pre><code>class Radio:
    def __init__(self):
        self.stations=["STATIC","97.2", "99.6", "101.7", "105.3", "108.5"]
        self.station_index = 0

    def seek(self):
        print("Currently tuned to", self.stations[self.station_index])
        print("Seeking...")
        self.station_index = (self.station_index + 1) % len(self.stations)
        print("Now tuned to", self.stations[self.station_index])
</code></pre>
<p>A "fancier", and possibly more Pythonic way to solve the problem would be to use the <code>cycle</code> generator from the <code>itertools</code> module in the Python standard library. It returns an iterator that yields the values from your list, starting over when it reaches the end. Though you usually only deal with iterators in <code>for</code> loops, it's easy to use the <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow">iterator protocol</a> by hand too. In our case, we just want to call <code>next</code> on the iterator to get the next value:</p>
<pre><code>import itertools

class Radio:
    def __init__(self):
        self.stations = itertools.cycle(["STATIC","97.2", "99.6", "101.7", "105.3", "108.5"])
        self.current_station = next(self.stations)

    def seek(self):
        print("Currently tuned to", self.current_station)
        print("Seeking...")
        self.current_station = next(self.stations)
        print("Now tuned to", self.current_station)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>index = 0

if a=="3":
    index = (index+1)%6
    print(stations[index])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Define a variable in init with the actual position "self.pos = 0", and call this function when you required</p>
<pre><code>def seekNext(self):
    if(self.pos == (len(self.stations)-1)):
        self.pos = 0
    else:
        self.pos += 1
    print(self.stations[self.pos])
</code></pre>
</div>
<span class="comment-copy">Using negative indices with lists operates on them in reverse order, so -1 is the last item, -2, second last and so on.</span>
<span class="comment-copy">Using <code>len(stations)</code> instead of just <code>6</code> would be more general.</span>
<span class="comment-copy">This increases the counter only in the case it reached the end.</span>
