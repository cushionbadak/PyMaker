<div class="post-text" itemprop="text">
<p>I want to merge 2 arrays in Python and add values based on a key</p>
<p>Example:</p>
<pre><code>Groceries = [] 
A = [{group: 'Fruit',
      item: 'Banana',
      quantity: 10},
     {group: 'Vegetable',
      item: 'Carrot',
      quantity: 1}]
for item in A:
    Groceries.append(item)
B = [{group: 'Fruit',
      item: 'Banana',
      quantity: 3},
     {group: 'Vegetable',
      item: 'Celery',
      quantity: 1}]
for item in B:
    Groceries.append(item)
</code></pre>
<p>print(Groceries) will return:</p>
<pre><code> [{group: 'Fruit',
   item: 'Banana',
   quantity: 10},
  {group: 'Vegetable',
   item: 'Carrot',
   quantity: 1},
  {group: 'Fruit',
   item: 'Banana',
   quantity: 3},
  {group: 'Vegetable',
   item: 'Celery',
   quantity: 1}]
</code></pre>
<p>Is there any way I can merge them in a way where the result would instead be:</p>
<pre><code>[{group: 'Fruit',
  item: 'Banana',
  quantity: 13},
 {group: 'Vegetable',
  item: 'Carrot',
  quantity: 1},
 {group: 'Vegetable',
  item: 'Celery',
  quantity: 1}]
</code></pre>
<p>(Note that it states 13 Bananas instead of 2 instances of Bananas)</p>
</div>
<div class="post-text" itemprop="text">
<p>For counting jobs, use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a>:</p>
<pre><code>from collections import Counter

c = Counter()
</code></pre>
<p>The counter needs proper keys to differentiate items, so form <code>(group, item)</code> tuples from your original dict format as keys, quantity as value:</p>
<pre><code>c.update({(d["group"], d["item"]): d["quantity"] for d in A})
c.update({(d["group"], d["item"]): d["quantity"] for d in B})
</code></pre>
<p>This method has a caveat though: if your list A or B contains multiple records for the same item, this will not work correctly as the dictionary comprehension will "remember" only the latest. If you know this is a possibility, you can revert to plain old for-looping and adding up:</p>
<pre><code>from operator import itemgetter
from itertools import chain

keymaster = itemgetter("group", "item")
for d in chain(A, B):
    c[keymaster(d)] += d["quantity"]
</code></pre>
<p>To get your original format back create a list of small dictionaries from counter's items:</p>
<pre><code>[{"group": k[0], "item": k[1], "quantity": v} for k, v in c.items()]

# results
[{'item': 'Carrot', 'group': 'Vegetable', 'quantity': 1},
 {'item': 'Celery', 'group': 'Vegetable', 'quantity': 1},
 {'item': 'Banana', 'group': 'Fruit', 'quantity': 13}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a support method to do the merging and use a dictionary to store the results. This will do what you want but it will loose the ordering of the list. I am not sure if you need that.</p>
<pre><code>Groceries = {}
A = [{'group': 'Fruit',
      'item': 'Banana',
      'quantity': 10},
     {'group': 'Vegetable',
      'item': 'Carrot',
      'quantity': 1}]

for item in A:
    Groceries[item['item']] = item

B = [{'group': 'Fruit',
      'item': 'Banana',
      'quantity': 3},
     {'group': 'Vegetable',
      'item': 'Celery',
      'quantity': 1}]

def add_item(d, other):
    key = other['item']
    if d[key] in d:
        d[key]['quantity'] += y['quantity']
    else:
        d[key] = y

for item in B:
    add_item(Groceries, item)

print(Groceries.values())
</code></pre>
<blockquote>
<p>[{'group': 'Fruit', 'quantity': 13, 'item': 'Banana'}, {'group':
  'Vegetable', 'quantity': 1, 'item': 'Celery'}, {'group': 'Vegetable',
  'quantity': 1, 'item': 'Carrot'}]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>    Groceries = []
A = [{'group': 'Fruit',
      'item': 'Banana',
      'quantity': 10},
     {'group': 'Vegetable',
      'item': 'Carrot',
      'quantity': 1}]
for item in A:
    Groceries.append(item)
B = [{'group': 'Fruit',
      'item': 'Banana',
      'quantity': 3},
     {'group': 'Vegetable',
      'item': 'Celery',
      'quantity': 1}]
for item in B:
    Groceries.append(item)
new_data = []
for i in Groceries:
    yes = False
    for s in new_data:
        if s['item'] == i['item']:
            s['quantity'] += i['quantity']
            yes = True
    if not yes:
        new_data.append(i)
print new_data
</code></pre>
<p>You can loop through the list and add the quantity if value exists. This may help</p>
</div>
<div class="post-text" itemprop="text">
<p>Am inefficient way would be to search the list for an existing dictionary, matching the <code>'group'</code> and <code>'item'</code>:</p>
<pre><code>for item in B:
    existing = next((existing for existing in Groceries
                     if existing['group'] == item['group'] and
                     existing['item'] == item['item']),
                    None)
    if existing:
        existing['quantity'] += item['quantity']
    else:
        Groceries.append(item)
</code></pre>
<p>This is inefficient because it uses <code>next</code> to do a linear search through all entries in Groceries. If you had millions of items it would become very slow.</p>
<p>If you restructure your data to be dictionary lookups based upon groups and items it will be much quicker. You need a dictionary of dictionaries. You can also use a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow"><strong><code>defaultdict</code></strong></a> to automatically have value 0 for missing items:</p>
<pre><code>from collections import defaultdict

defaultitems = lambda: defaultdict(int)
quantities = defaultdict(defaultitems)
</code></pre>
<p>This allows you to create groups and items with quantity <code>0</code>:</p>
<pre><code>&gt;&gt;&gt; quantities['Fruit']['Tomato']
0
</code></pre>
<p>First create using A:</p>
<pre><code>defaultitems = lambda: defaultdict(int)
quantities = defaultdict(defaultitems)

for item in A:
    quantities[item['group']][item['item']] = item['quantity']
</code></pre>
<p>Then add B:</p>
<pre><code>for item in B:
    quantities[item['group']][item['item']] += item['quantity']
</code></pre>
<p>However, because you get the default you could add A and B all in one loop, by chaining them together (using <a href="https://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow"><strong><code>chain</code></strong></a>):</p>
<pre><code>from itertool import chain

for item in chain(A, B):
    quantities[item['group']][item['item']] += item['quantity']
</code></pre>
</div>
<span class="comment-copy">If you want to perform this algorithm it would be better to structure your data differently.</span>
<span class="comment-copy">Also, a tomato is not a carrot.</span>
<span class="comment-copy">What would you recommend for structure? And you got me. I'll fix the veggies :)</span>
<span class="comment-copy">Are you forced to use a list of dicts for A and B or can you use something else?</span>
<span class="comment-copy">They're both pulled from a website in json format as shown, as dicts</span>
<span class="comment-copy">Can you expand on this answer? Specifically where I'm supposed to use   <code>defaultquantities = defaultdict(int)  defaultitems = defaultdict(defaultquantities)  defaultgroups = defaultdict(defaultitems)</code></span>
<span class="comment-copy">Apologies, I'd messed up the declaration of the default dict. That'll teach me to post code without testing it first.</span>
