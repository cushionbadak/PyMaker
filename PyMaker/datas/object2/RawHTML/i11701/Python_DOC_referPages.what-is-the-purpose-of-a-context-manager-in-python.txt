<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3693771/trying-to-understand-python-with-statement-and-context-managers">Trying to understand python with statement and context managers</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I'm reading <a href="http://eigenhombre.com/2013/04/20/introduction-to-context-managers/" rel="nofollow noreferrer">http://eigenhombre.com/2013/04/20/introduction-to-context-managers/</a> . </p>
<p>In it:</p>
<blockquote>
<p>Context managers are a way of allocating and releasing some sort of resource exactly where you need it. The simplest example is file access:</p>
</blockquote>
<pre><code>with file("/tmp/foo", "w") as foo:
    print &gt;&gt; foo, "Hello!"
</code></pre>
<blockquote>
<p>This is essentially equivalent to:</p>
</blockquote>
<pre><code>foo = file("/tmp/foo", "w")
try:
    print &gt;&gt; foo, "Hello!"
finally:
    foo.close()
</code></pre>
<p>The article goes on to more explanation , but I'm still not sure I understand in simple terms their purpose. Can someone clarify. Also what is the "context"?</p>
<p>I have looked at <a href="https://stackoverflow.com/questions/3693771/trying-to-understand-python-with-statement-and-context-managers">Trying to understand python with statement and context managers</a> ,  but again I'm not sure what the purpose of a context manager is? Is it just an alternative syntax for "try.. finally.." or is their some other purpose</p>
</div>
<div class="post-text" itemprop="text">
<h2>What are context managers?</h2>
<p>Context managers are there to aid with resources (although may be used for much more). The <em>context</em> is basically the resource. </p>
<p>Let's say you opened a file for writing:</p>
<pre><code>f = open(path, "w")
</code></pre>
<p>You now have an open file handle. During the handling of your file, no other program can write to it. In order to let other programs write to it, you must close the file handle:</p>
<pre><code>f.close()
</code></pre>
<p>But, before closing your file an error occured:</p>
<pre><code>f = open(path, "w")
data = 3/0  # Tried dividing by zero. Raised ZeroDivisionError
f.write(data)
f.close()
</code></pre>
<p>What will happen now is that the function or entire program will exit, while leaving your file with an open handle. (CPython cleans handles on termination and handles are freed together with a program but you shouldn't count on that)</p>
<p>A with statement ensures that as soon as you leave it's indentation, it will close the file handle:</p>
<pre><code>with open(path, "w") as f:
    data = 3/0  # Tried dividing by zero. Raised ZeroDivisionError
    f.write(data)
# Here, the file is already closed automatically, no matter what happened.
</code></pre>
<hr/>
<p><code>with</code> statements may be used for many more things. For example: <a href="https://docs.python.org/3/library/threading.html#threading.Lock" rel="nofollow noreferrer"><code>threading.Lock()</code></a></p>
<pre><code>lock = threading.Lock()
with lock:  # Lock is acquired
   do stuff...
# Lock is automatically released.
</code></pre>
<p><strong>Almost everything done with a context manager can be done with <code>try: ... finally: ...</code></strong> but context managers are nicer to use, more comfortable, more readable and by implementing <code>__enter__</code> and <code>__exit__</code> provide an easy to use interface.</p>
<hr/>
<h2>How are context managers implemented?</h2>
<p>or <strong>What are <code>__enter__</code> and <code>__exit__</code>?</strong></p>
<p>Creating context managers is done by implementing <a href="https://docs.python.org/3/reference/datamodel.html#object.__enter__" rel="nofollow noreferrer"><code>__enter__()</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__exit__" rel="nofollow noreferrer"><code>__exit__()</code></a> in a normal class.</p>
<p><code>__enter__()</code> tells what to do when a context manager starts and <code>__exit__()</code> when a context manager exists (giving the exception to the <code>__exit__()</code> method if an exception occurred)</p>
<p>A shortcut for creating context managers can be found in <strong><a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer">contextlib</a></strong>. It  wraps a generator as a context manager like so:</p>
<blockquote>
<pre><code>from contextlib import contextmanager

@contextmanager
def tag(name):
    print("&lt;%s&gt;" % name)
    yield
    print("&lt;/%s&gt;" % name)

&gt;&gt;&gt; with tag("h1"):
...    print("foo")
...
&lt;h1&gt;
foo
&lt;/h1&gt;
</code></pre>
</blockquote>
<p>Example taken from the Python docs.</p>
</div>
<span class="comment-copy">What is not clear?</span>
<span class="comment-copy">I've added more at the bottom of the question</span>
<span class="comment-copy">Thanks, that helps me. Can you say a little more about <b>enter</b> and <b>exit</b> methods?</span>
