<div class="post-text" itemprop="text">
<p>I have a string which has both Arabic and English sentences. What I want is to extract Arabic Sentences only.</p>
<pre><code>my_string="""
What is the reason
ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ
behind this?
ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ
"""
</code></pre>
<p><a href="http://jrgraphix.net/r/Unicode/0600-06FF" rel="nofollow">This Link</a> shows that the Unicode range for Arabic letters is <code>0600-06FF</code>. </p>
<p>So, very basic attempt came to my mind is:</p>
<pre><code>import re
print re.findall(r'[\u0600-\u06FF]+',my_string)
</code></pre>
<p>But, this fails miserably as it returns the following list.</p>
<pre><code>['What', 'is', 'the', 'reason', 'behind', 'this?']
</code></pre>
<p>As you can see, this is exactly opposite of what I want. What I am missing here?</p>
<p>N.B. </p>
<p>I know I can match the Arabic letters by using inverse matching like below:</p>
<pre><code>print re.findall(r'[^a-zA-Z\s0-9]+',my_string)
</code></pre>
<p>But, I don't want that.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a> to replace ascii characters with empty string.</p>
<pre><code>&gt;&gt;&gt; my_string="""
... What is the reason
... ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ
... behind this?
... ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ
... """
&gt;&gt;&gt; print(re.sub(r'[a-zA-Z?]', '', my_string).strip())
ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ

ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ
</code></pre>
<p>Your regex didn't work because you are using Python 2 and your string is <code>str</code> you need to convert <code>my_string</code> to unicode for it to work. However it did perfectly work on Python3.x</p>
<pre><code>&gt;&gt;&gt; print "".join(re.findall(ur'[\u0600-\u06FF]', unicode(my_string, "utf-8"), re.UNICODE))
ذَلِكَالْكِتَابُلَارَيْبَفِيهِهُدًىلِلْمُتَّقِينَذَلِكَالْكِتَابُلَارَيْبَفِيهِهُدًىلِلْمُتَّقِينَ
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your original code was correct, just needed to encode <code>my_string</code> with proper encoding, 'utf-8' and add <code>u</code> in your <code>re</code> pattern since you are working with Python2, </p>
<pre><code>&gt;&gt;&gt; for x in re.findall(ur'[\u0600-\u06FF]+', my_string.decode('utf-8')):
        print x


ذَلِكَ
الْكِتَابُ
لَا
رَيْبَ
فِيهِ
هُدًى
لِلْمُتَّقِينَ
ذَلِكَ
الْكِتَابُ
لَا
رَيْبَ
فِيهِ
هُدًى
لِلْمُتَّقِينَ
</code></pre>
<p>This will give you a list of matched unicode strings instead of single characters that you don't need to join them back with <code>''.join</code></p>
<p>If you were in Python3, you don't need any of encoding tweeking as default encoding is 'utf-8':</p>
<pre><code>&gt;&gt;&gt; for x in re.findall(r'[\u0600-\u06FF]+', my_string):
        print(x)


ذَلِكَ
الْكِتَابُ
لَا
رَيْبَ
فِيهِ
هُدًى
لِلْمُتَّقِينَ
ذَلِكَ
الْكِتَابُ
لَا
رَيْبَ
فِيهِ
هُدًى
لِلْمُتَّقِينَ
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is:</p>
<pre><code>print re.findall(r'[\u0600-\u06FF]+',my_string)
</code></pre>
<p>When matching a byte sequence, there is no such concept as Unicode code points. Therefore, the <code>\u</code> escape sequences in the regular expression don’t make any sense. They are not interpreted as you thought, but just mean <code>u</code>.</p>
<p>So when parsing the regular expression for bytes, it is equivalent to:</p>
<pre><code>print re.findall(r'[u0600-u06FF]+',my_string)
</code></pre>
<p>This character class is interpreted as “one of <code>u060</code>, or a byte in the range <code>0-u</code>, or one of <code>06FF</code>”. This, in turn, is equivalent to <code>[0-u]</code>, since all the other bytes are already included in this range.</p>
<pre><code>print re.findall(r'[0-u]+', my_string)
</code></pre>
<p>Demonstration:</p>
<pre><code>my_string = "What is thizz?"
print re.findall(r'[\u0600-\u06FF]+',my_string)
['What', 'is', 'thi', '?']
</code></pre>
<p>Note that the <code>zz</code> is not matched, since it comes behind <code>u</code> in the ASCII character set.</p>
</div>
<span class="comment-copy">Thanks  for your nice answer, +1 But why the above attempt don't work?</span>
<span class="comment-copy">I am Satisfied :)  Thank you</span>
<span class="comment-copy">This is the best explanation of the situation. I wish I could do +2. Thanks mate :)</span>
<span class="comment-copy">shouldn't this read:   “one of <b>u060</b>, or a byte in the range <i>0-u</i>, or one of <i>06FF</i>”</span>
<span class="comment-copy">Thank you very much for your careful reading. I have fixed it.</span>
