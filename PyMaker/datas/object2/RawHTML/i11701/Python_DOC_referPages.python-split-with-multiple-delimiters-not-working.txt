<div class="post-text" itemprop="text">
<p>I have a string:</p>
<p>feature.append(freq_and_feature(text, freq))</p>
<p>I want a list containing each word of the string, like [feature, append, freq, and, feature, text, freq], where each word is a string, of course.</p>
<p>These string are contained in a file called helper.txt, so I'm doing the following, as suggested by multiple SO posts, like the accepted answer for this one(<a href="https://stackoverflow.com/questions/4998629/python-split-string-with-multiple-delimiters">Python: Split string with multiple delimiters</a>):</p>
<pre><code>import re
with open("helper.txt", "r") as helper:
    for row in helper:

       print re.split('\' .,()_', row)
</code></pre>
<p>However, I get the following, which is not what I want.</p>
<pre><code>['    feature.append(freq_pain_feature(text, freq))\n']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<pre><code>re.split('\' .,()_', row)
</code></pre>
</blockquote>
<p>This looks for the string <code>' .,()_</code> to split on. You probably meant</p>
<pre><code>re.split('[\' .,()_]', row)
</code></pre>
<p><code>re.split</code> takes a <em>regular expression</em> as the first argument. To say "this OR that" in regular expressions, you can write <code>a|b</code> and it will match either <code>a</code> or <code>b</code>. If you wrote <code>ab</code>, it would only match <code>a</code> followed by <code>b</code>. Luckily, so we don't have to write <code>'| |.|,|(|...</code>, there's a nice form where you can use <code>[]</code>s to state that everything inside should be treated as "match one of these".</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems you want to split a string with non-word or underscore characters. Use</p>
<pre><code>import re
s = 'feature.append(freq_and_feature(text, freq))'
print([x for x in re.split(r'[\W_]+', s) if x])
# =&gt; ['feature', 'append', 'freq', 'and', 'feature', 'text', 'freq']
</code></pre>
<p>See the <a href="http://ideone.com/WpyPvU" rel="nofollow">IDEONE demo</a></p>
<p>The <code>[\W_]+</code> regex matches 1+ characters that are not word (<code>\W</code> = <code>[^a-zA-Z0-9_]</code>) or underscores.</p>
<p>You can get rid of the <code>if x</code> if you remove initial and trailing non-word characters from the input string, e.g. <code>re.sub(r'^[\W_]+|[\W_]+$', '', s)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h2>You can try this</h2>
<pre><code>str = re.split('[.(_,)]+', row, flags=re.IGNORECASE)
str.pop()
print str
</code></pre>
<p>This will result:</p>
<pre><code>['feature', 'append', 'freq', 'and', 'feature', 'text', ' freq']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you are trying to split on the basis of <code>non-word</code> characters. It should be</p>
<pre><code>re.split(r'[^A-Za-z0-9]+', s)
</code></pre>
<p><strong><code>[^A-Za-z0-9]</code> can be translated to --&gt; <code>[\W_]</code></strong></p>
<p><em>Python Code</em></p>
<pre><code>s = 'feature.append(freq_and_feature(text, freq))'
print([x for x in re.split(r'[^A-Za-z0-9]+', s) if x])
</code></pre>
<p>This will also work, indeed</p>
<pre><code>p = re.compile(r'[^\W_]+')
test_str = "feature.append(freq_and_feature(text, freq))"
print(re.findall(p, test_str))
</code></pre>
<p><strong><a href="http://ideone.com/vEvBnY" rel="nofollow">Ideone Demo</a></strong></p>
</div>
<span class="comment-copy">Probably because the string described by the pattern doesn't exist. read a tutorial before, ask after.</span>
<span class="comment-copy">The first argument to <code>re.split()</code> must be a correct <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">regular expression</a> that matches the delimiter.  It is not a string where any character is a single-character delimiter.</span>
<span class="comment-copy">Can I do this instead with the regular str.split(), then?</span>
<span class="comment-copy">Usually I just split by space characters so I'm not quite sure how to do this (split by multiple delimiters).</span>
<span class="comment-copy">Are you just going to split with non-word and non-underscore characters? Try <a href="http://ideone.com/WpyPvU" rel="nofollow noreferrer">this solution</a></span>
<span class="comment-copy">Okay, when I do what you suggested, I get the following: ['', '', '', '', 'feature', 'append', 'freq', 'and', 'feature', 'text', '', 'freq', '', '\n']</span>
<span class="comment-copy">this works, but needs a + added to prevent the empty strings in your results:[\' .,()_]+</span>
<span class="comment-copy">Oh I see. This indeed works and is what I ended up using. Thanks.</span>
<span class="comment-copy">@Jobs If this is what you used, perhaps you should accept it. But if another answer helped you more, please accept that.</span>
<span class="comment-copy">Accepting this one because this was the first answer and so what I ended up using. All of the answers are very informative - thanks.</span>
<span class="comment-copy">I think I misinterpreted the question. I updated the answer.</span>
<span class="comment-copy">I see. Thank you so much!</span>
<span class="comment-copy">Thanks! This works!</span>
<span class="comment-copy">@Jobs , you are most welcome :)</span>
<span class="comment-copy">This works too, Thanks!</span>
<span class="comment-copy">@Jobs You can use <code>re.findall()</code> too for this</span>
