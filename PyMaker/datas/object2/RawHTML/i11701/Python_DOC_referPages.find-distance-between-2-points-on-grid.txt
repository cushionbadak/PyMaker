<div class="post-text" itemprop="text">
<p>Im finding the distance between two points, given <code>departure = [x,y]</code> and <code>destination = [x,y]</code>. With x or y, one is always a float and the other an int, so its always on a line. You have to stay on the gridlines to get to the destination point, and there is no set incrementation. I havent seen any other posts on finding distance on a grid that deal with the mix of ints and floats so here I am.</p>
<p>This is my code:</p>
<pre><code>def perfectCity(departure, destination):
    return abs(destination[0]-departure[0]) + abs(destination[1]-departure[1]) 
</code></pre>
<p>An example would be <code>departure = [0.4, 1]</code> and <code>destination = [0.9, 3]</code>, it should equal 2.7, but I get 2.5</p>
<p>For example, you go from <code>[0.4, 1]</code> to <code>[1, 1]</code> to <code>[1, 3]</code> to <code>[0.9, 3]</code> for a total difference of 2.7. It's like calculating the Manhattan distance, but instead of starting and ending at lattice points, you might start and/or end half-way down a block.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you look at the different combinations, it seems like the naive Manhattan distance will work, <em>except</em> when your path takes on a "C" shape (as given in the example). This will happen if and only if your two float points are both x-coordinates or y-coordinates <strong>and</strong> have the same integer part.</p>
<p>An attempt might look like:</p>
<pre><code>def minimum_distance(p1, p2):

    i1, i2 = int(p1[0]), int(p2[0])

    # if both x-coordinates are floats and they have the same integer part
    if i1 != p1[0] and i2 != p2[0] and i1 == i2:

        # find the decimal parts
        d1, d2 = p1[0] - i1, p2[0] - i2

        # find the smaller "C"
        x = min(d1 + d2, (1-d1) + (1-d2))

        # add the y distance to the "C" distance
        return abs(p1[1] - p2[1]) + x

    # repeat with the "y-coordinates are floats" case
    i1, i2 = int(p1[1]), int(p2[1])
    if i1 != p1[1] and i2 != p2[1] and i1 == i2:
        d1, d2 = p1[1] - i1, p2[1] - i2
        y = min(d1 + d2, (1-d1) + (1-d2))
        return abs(p1[0] - p2[0]) + y

    # simple case, return the Manhattan distance
    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])


print(minimum_distance([0.4, 1], [0.9, 3]))
# 2.7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From each house take a short-range taxicab to a corner. You have two ways of doing so. Then -- take a long-range taxicab between the resulting corners. There are 2x2 = 4 possibilities, depending on the corners traveled to. Take the min:</p>
<pre><code>from math import ceil,floor

#as a helper function, vanilla taxicab:

def t(p,q):
    x,y = p
    z,w = q
    return abs(x-z)+abs(y-w)

#find the two corners closest to a point:

def corners(p):
    x,y = p
    if isinstance(x,float):
        return [(floor(x),y),(ceil(x),y)]
    else:
        return [(x,floor(y)), (x,ceil(y))]

#combine these:   

def dist(p,q):
    return min(t(p,c) + t(c,d) + t(d,q)  for c in corners(p) for d in corners(q))
</code></pre>
<p>For example,</p>
<pre><code>&gt;&gt;&gt; dist((.4,1),(.9,3))
2.7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not the mix of <code>int</code> and <code>float</code>, probably you are experiencing floating point error. <code>floats</code> are not exact, they are approximate, and can therefore be "off" by small amounts.</p>
<p>You could use <code>Decimal</code> objects provided by the <a href="https://docs.python.org/3/library/decimal.html#module-decimal" rel="nofollow"><code>decimal</code></a> module to work accurately with floating point values. Here's an example:</p>
<pre><code>&gt;&gt;&gt; 1.1 + 2.2        # will produce small error
3.3000000000000003
&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('1.1') + Decimal('2.2')
Decimal('3.3')
</code></pre>
<p>The final result will still be "off", but using <code>Decimal</code> will help to avoid cumulative rounding errors:</p>
<pre><code>&gt;&gt;&gt; 3.3 - (1.1 + 2.2)
-4.440892098500626e-16
&gt;&gt;&gt; Decimal(3.3) - (Decimal(1.1) + Decimal(2.2))
Decimal('-4.440892098500250464677810669E-16')
&gt;&gt;&gt; Decimal('3.3') - (Decimal('1.1') + Decimal('2.2'))
Decimal('0.0')
</code></pre>
</div>
<span class="comment-copy">Floats almost always have a bit of round-off error. Finite decimals expansions in base 10 are not always finite decimal expansions in base 2</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a></span>
<span class="comment-copy">I dont think its a duplicate, because you would have to know its a floating point error, in the other thread its explicit.</span>
<span class="comment-copy">There can only be one thread where the solution is floating point errors?</span>
<span class="comment-copy">Then -- that isn't Manhattan distance (which is definitely 2.5 rather than 2.7). There is something that you aren't telling us (perhaps that motion is restricted to gridlines which are at multiples of 1.0?). In this case the discrepancy between 2.5 and 2.7 has nothing to do with round-off error but is instead a clash between what the problem is asking for and what you are trying to compute. I'll retract my close vote, but you should edit your question to better communicate the actual problem.</span>
<span class="comment-copy">Good insight that the case where x is float in one point and int in the other reduces to simple taxicab.</span>
<span class="comment-copy">Very clean. It's not very efficient, so if it has to be used repeatedly, it might be worth optimizing.</span>
<span class="comment-copy">Timing could be interesting. It seems like no matter what you are going to need at least 3 cases, so I decided to just find all cases and let the min operator pick which one. Built-in operators are written in C, so it isn't clear that this route is slower than explicitly deciding which case to use. I suspect that my approach is quicker than yours in the hard cases but is definitely slower than yours in the easy case where it reduces to simple taxicab, so it is hard to say what the net result is.</span>
<span class="comment-copy">From some simple tests, my function appears to be 4x faster for the hard cases and even quicker for the easy cases. This seems natural since my function only calculates the Manhattan distance once rather than four times. While three cases need to be considered, they can be quickly eliminated without actually performing the "heavy" computations.</span>
<span class="comment-copy">Also, I'm not sure the justification that "built-in operators are written in C" is appropriate. For example, for two values, it's twice as quick to use <code>a if a &lt; b else b</code> than <code>min(a,b)</code>. Simple arithmetic is also pushed back to the C layer <i>and</i> it avoids a relatively expensive function call.</span>
<span class="comment-copy">@JaredGoguen You are right. With Python it is easy to write elegant code which is not particularly efficient. Arguably it is a feature of Python rather than a bug since (compared to say C) the goal is more to optimize developer time than CPU time. Still, efficiency often matters and the function call overheads in my code would make it a poor choice if the function needed to be applied to a large collection of points.</span>
<span class="comment-copy">Its off by more than one or two points, sometimes its off by say 0.2 - 0.6</span>
<span class="comment-copy">@JonnyDoeInWisco: yes, the error can accumulate with each floating point operation. Using <code>Decimal</code> objects should reduce the cumulative errors.</span>
<span class="comment-copy">@JonnyDoeInWisco I would be surprised if the error is that large for input of typical size. Perhaps you could edit your question and show an example of any error that you think can't be explained by rather minor round-off error.</span>
<span class="comment-copy">The down-vote was unfair since this was a good answer to the original question (not edited beyond recognition), so +1</span>
