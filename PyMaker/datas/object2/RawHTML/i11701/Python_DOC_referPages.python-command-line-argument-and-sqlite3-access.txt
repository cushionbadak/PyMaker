<div class="post-text" itemprop="text">
<p>I am trying to understand how to write a script that would first take a directory name as a command line argument, then discovers all files in the associated directory subtree. It stores the information in a Sqlite3 database, in a table named files containing 3 fields: (ext, path, fname), which represent the file extension (.cpp, .doc, etc.), the full path name of the directory (only) the file resides in, and the name of the file (e.g., foo.cpp).</p>
<p>The name of the SQLite database file should be the second command-line argument ().</p>
<p>This is a sample command line:</p>
<pre><code>python readfiles.py Stuff filesdb
</code></pre>
<p>Here is a sample of some of the entries in files:</p>
<pre><code>(u'ppt', u'Stuff/ACCU', u'ACCU-Templates.ppt')
(u'cpp', u'Stuff/ACCU/code/C01', u'Auto_ptr.cpp')
(u'cpp', u'Stuff/ACCU/code/C01', u'Autoexcp.cpp')
(u'cpp', u'Stuff/ACCU/code/C01', u'BadException.cpp')
(u'cpp', u'Stuff/ACCU/code/C01', u'Basexcpt.cpp')
(u'cpp', u'Stuff/ACCU/code/C01', u'Cleanup.cpp')
</code></pre>
<p>I am not very familiar with accessing databases in the first place and just need some suggestions on best ways this can be done. </p>
</div>
<div class="post-text" itemprop="text">
<p>To get the command line arguments you can use the <code>sys.argv</code> list. For your example command invocation:</p>
<pre><code>import sys

root = sys.argv[1]
db_name = sys.argv[2]
</code></pre>
<p>Executing that results in <code>root</code> being set to <code>'Stuff'</code> and <code>db_name</code> set to <code>'filesdb'</code>.</p>
<p>The other part of your question can be solved using <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow"><code>os.walk()</code></a> to traverse the file system.</p>
<pre><code>import os
import os.path
import sqlite3

with sqlite3.connect(db_name) as db:
    cursor = db.cursor()
    cursor.execute('create table if not exists files (ext text, path text, fname text)')

    for dirpath, dirnames, filenames in os.walk(root):
        for filename in filenames:
            ext = os.path.splitext(filename)[-1].replace('.', '')
            cursor.execute('insert into files (ext, path, fname) values (?, ?, ?)', (ext, dirpath, filename))
</code></pre>
<p>A potential performance improvement can be gained by using <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executemany" rel="nofollow"><code>cursor.executemany()</code></a> instead of a query per file. To do that you would build up a list of tuples containing <code>(ext, dirpath, filename)</code> and pass that to <code>executemany()</code>.</p>
</div>
