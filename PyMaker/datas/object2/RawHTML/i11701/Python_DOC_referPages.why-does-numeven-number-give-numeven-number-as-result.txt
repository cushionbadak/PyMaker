<div class="post-text" itemprop="text">
<p>This is something weird I noticed.</p>
<p>Any particular reason why -5**2 gives -25 and math.pow(-5,2) gives 25? The answer should be 25. So what is the reason for the -25 answer?</p>
<pre><code>&gt;&gt;&gt; -5**2
-25
&gt;&gt;&gt; -5**4
-625
&gt;&gt;&gt; 5**2
25
&gt;&gt;&gt; 5**4
625
&gt;&gt;&gt; import math
&gt;&gt;&gt; pow(-5,2)
25
&gt;&gt;&gt; pow(-5,4)
625
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/library/math.html#math.pow" rel="nofollow">documentation</a> for <code>math.pow</code> specifies that it raises <code>x</code> to the power of <code>y</code>. </p>
<p>So, <code>math.pow</code> calculates <code>(-5)**4</code>. whereas just writing <code>-5**4</code> is equivalent to <code>-1 * 5 **4</code>, since by operator precedence in Python the unary operator <code>-</code> has less precedence than the power operator <code>**</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python the <code>**</code> operator has <a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow">higher precedence</a> than the <code>-</code> operator, so in your expression <code>5 ** 2</code> is evaluated first, then negated.  You can apply negation first by using brackets:</p>
<pre><code>&gt;&gt;&gt; -5**2
-25
&gt;&gt;&gt; (-5)**2
25
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is all explained <a href="https://docs.python.org/2/reference/expressions.html#the-power-operator" rel="nofollow">in the documentation</a> </p>
<blockquote>
<p>The power operator binds more tightly than unary operators on its left; it binds less tightly than unary operators on its right. </p>
<p>Thus, in an unparenthesized sequence of power and unary operators, the operators are evaluated from right to left (this does not constrain the evaluation order for the operands): -1**2 results in -1.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This is because of the operator precedence in python.</p>
<p>If we look at the <a href="https://docs.python.org/2.7/reference/expressions.html#operator-precedence" rel="nofollow">operator precedence</a>, we see that the unary operator <code>-x</code> has lower precedence than the power operator <code>x**y</code>, so that the expression <code>-5**2</code> means to first apply the square to the 5 and then apply the negative sign to the result.  This first operation gives 25, which then gives -25.</p>
<p>The expression <code>math.pow(-5,2)</code> means to square the -5.  This is equivalent to <code>(-5)**2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because of that the precedence of <code>-</code> operator is lower than power operator <code>**</code>. In fact your expression will be calculated as following:</p>
<pre><code>&gt;&gt;&gt; -(5 ** 2)
</code></pre>
<p>Try the following to get the correct result:</p>
<pre><code>&gt;&gt;&gt; (-5) ** 2
25
</code></pre>
<p>For more information you can read the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">python Operator precedence</a>:</p>
<p>The following table summarizes the operator precedence in Python, from lowest precedence (least binding) to highest precedence (most binding). </p>
<p><a href="https://i.stack.imgur.com/rPCj0.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/rPCj0.png"/></a></p>
</div>
<span class="comment-copy">Simple answer: Order of operations</span>
<span class="comment-copy">Please don't post images as code, <a href="https://meta.stackoverflow.com/q/285551/3933332">See this meta post</a>.</span>
<span class="comment-copy">@BhargavRao - Will keep that in mind. Thank you.</span>
<span class="comment-copy">One quick note, you don't need to <code>import math</code>, <code>pow</code> is a built-in function.</span>
<span class="comment-copy">@BurhanKhalid - Thanks for the edit. And I'm new to Python. Hence, I didn't know that I needn't import the math module. Thanks for dropping in that note.</span>
