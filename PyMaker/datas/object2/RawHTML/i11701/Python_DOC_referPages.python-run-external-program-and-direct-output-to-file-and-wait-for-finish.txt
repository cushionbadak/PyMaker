<div class="post-text" itemprop="text">
<p>I want to run an external program from python, redirect output (lots of text) to a log file and wait for that program to finish. I know I can do it via bash:</p>
<pre><code>#! /bin/bash
my_external_program &gt; log_file 2&gt;&amp;1
echo "done"
</code></pre>
<p>But how can I do the same with python? Note that with the bash command, I can check the log_file while the program is running. I want this property in python as well.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/36620656/controlling-a-python-script-from-another-script/36621078#36621078">Controlling a python script from another script</a> </p>
<p>You can check the link above, it is indeed similar issue. Using Popen from subprocess or from os.popen it is possible to check real time.</p>
<p>With a simple os.system ("your script &gt; /tmp/mickey.log") will also run the script, but it will wait the execution of the command before.</p>
<p>Please let me know if this solve your issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">subprocess</a> module.</p>
<p>For <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow">example</a>:</p>
<pre><code>with open("log_file", "w") as log_file:
    subprocess.run(["my_external_program"], stdout=log_file, stderr=log_file)
print("done")
</code></pre>
</div>
<span class="comment-copy">How do I redirect stderr to the log file as well? When I try <i>os.system("my_script &amp;&gt; my_log")</i> it does not create any log file but throwing everything to the python terminal.</span>
<span class="comment-copy">In a bash script use   2&gt;&amp;1   will redirect sterr to stdout that your are sending to my log. So for instance:  script.py 2&gt;&amp;1 &gt; mickey.log     I think this will solve your query :-)</span>
<span class="comment-copy">+1. great solution with python subprocess, but I choose @Marco solution since it is shorter (though os.system is said to be deprecated).</span>
<span class="comment-copy">The, main, problem with <code>os.system()</code> is security. It is also, now, redundant with <code>subprocess.run('...', shell=True)</code>. The string passed to it is passed to a shell to interpret. (thus it is exactly the same as the bash script you posted)  If you hardcode the entire string that can be okay, but if you get data from somewhere to construct the string you could be executing code that you don't intend!  (just FYI)</span>
