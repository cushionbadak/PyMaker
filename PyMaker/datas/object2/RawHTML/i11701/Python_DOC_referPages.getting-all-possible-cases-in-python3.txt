<div class="post-text" itemprop="text">
<p>Say I have a list of n elements, and each element consists of list of 0 or more integers, I want to get all possible combinations. </p>
<p>This is my list:</p>
<pre><code>[[0], [1, 6], [2, 3], [2, 3], [], [4]]
</code></pre>
<p>This is expected output:</p>
<pre><code>[0, 1, 2, 2, 4]
[0, 1, 3, 2, 4]
...
[0, 6, 3, 3, 4]
</code></pre>
<p>List order should be kept. That is any combination should be started with 0.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for the <em>product</em> of the lists; use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code></a>, but do filter out empty lists first:</p>
<pre><code>from itertools import product

for combo in product(*filter(None, yourlist)):
    print(combo)
</code></pre>
<p><code>filter(None, ...)</code> removes any empty elements.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; yourlist = [[0], [1, 6], [2, 3], [2, 3], [], [4]]
&gt;&gt;&gt; for combo in product(*filter(None, yourlist)):
...     print(combo)
...
(0, 1, 2, 2, 4)
(0, 1, 2, 3, 4)
(0, 1, 3, 2, 4)
(0, 1, 3, 3, 4)
(0, 6, 2, 2, 4)
(0, 6, 2, 3, 4)
(0, 6, 3, 2, 4)
(0, 6, 3, 3, 4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Throw out any empty list and then apply <code>itertools.product</code>.</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; lst = [[0], [1, 6], [2, 3], [2, 3], [], [4]]
&gt;&gt;&gt; list(product(*[x for x in lst if x]))
[(0, 1, 2, 2, 4), (0, 1, 2, 3, 4), (0, 1, 3, 2, 4), (0, 1, 3, 3, 4), (0, 6, 2, 2, 4), (0, 6, 2, 3, 4), (0, 6, 3, 2, 4), (0, 6, 3, 3, 4)]
</code></pre>
<p><a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow">itertools.product</a> will compute the <a href="https://en.wikipedia.org/wiki/Cartesian_product" rel="nofollow">cartesian product</a> for the given iterables. If the iterables you provide are ordered (which is the case for your lists), the tuples which <code>product</code> creates will reflect that order, too.</p>
</div>
<span class="comment-copy">It would help if you defined what a "case" was, and included what you have tried so far.</span>
<span class="comment-copy">case is list of integer, according to my list.</span>
<span class="comment-copy">make a case using all item in my list. but order should be kept</span>
<span class="comment-copy">@LeeJaeng: that tells us nothing. I can <b>guess</b> what you mean, but 'according to your list' could be a manual arrangement, because you didn't describe the <i>rules</i> by which your output is produced.</span>
<span class="comment-copy">@MartijnPieters I see. my english skill is not enough describing all things.. T^T</span>
<span class="comment-copy">Thank you so much! but it filter out empty list.</span>
<span class="comment-copy">@LeeJaeng that's intended. A cartesian product with an empty iterable as argument can only produce the empty list.</span>
<span class="comment-copy">@LeeJaeng: what did you expect the empty list to contribute to the product? With empty lists in there, you'd get an <i>empty</i> product, which is why it needs to be filtered out.</span>
<span class="comment-copy">@LeeJaeng: see, the number of combinations produced is the same as the product of the lengths of the inputs. If you leave the empty list in, you get 1 x 2 x 2 x 0 x 4 == 0 outputs. Remove the empty list and you get 1 x 2 x 2 x 4 == 8 outputs.</span>
