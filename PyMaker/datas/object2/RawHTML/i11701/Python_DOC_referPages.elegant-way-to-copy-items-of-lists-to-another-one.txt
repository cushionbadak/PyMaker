<div class="post-text" itemprop="text">
<p>I want to copy the first two lists from a given nested <code>list</code>. I did the following:</p>
<pre><code>list = [[10,20],[30,40,50],[0,0],[1,2,3]]
sList = []
x = 0
for i in list:
    if x == 2:
        break
    sList.append(i)
    x+=1
print ("%s" % sList)
</code></pre>
<p>My question is: is there another elegant way? </p>
</div>
<div class="post-text" itemprop="text">
<p>Just use slicing to get the first two items from a list. Also, don't use list as it shadows the built-in <code>list</code>: </p>
<pre><code>list_ = [[10,20],[30,40,50],[0,0],[1,2,3]]

print(list_[:2])
</code></pre>
<p>Output:</p>
<pre><code>[[10, 20], [30, 40, 50]]
</code></pre>
<p>An easy way to think of slicing is as follows:</p>
<pre><code>list_[start:end:step]
</code></pre>
<p>Furthermore, as it was made clear to me, you are looking to actually extract this data in to a separate list. Therefore, you probably want to make use of the copy module, and use <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow">deecopy</a>. </p>
<p>Per the docs: </p>
<blockquote>
<p>For collections that are mutable or contain mutable items, a copy is
  sometimes needed so one can change one copy without changing the
  other.</p>
</blockquote>
<p>Therefore, your code can look like: </p>
<pre><code>from copy import deepcopy

sub_list = deepcopy(list_[:2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use slicing:</p>
<pre><code>sList = list[:2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, for your example, just</p>
<pre><code>sList = [oList[0], oList[1]]
</code></pre>
<p>or equivalently</p>
<pre><code>sList = oList[:2]
</code></pre>
<p>In your sample code sList refers to the same lists as the original (which definitely shouldn't be called <code>list</code>) - if you actually want copies, use</p>
<pre><code>sList = [list(e) for e in oList[:2]]
</code></pre>
<p>to duplicate the nested lists</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just take a list slice</p>
<pre><code>Slist = list[0:2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_list = [[10, 20], [30, 40, 50], [0, 0], [1, 2, 3]]

sliced_list = [sub_list[:] for sub_list in my_list[:2]]

&gt;&gt;&gt; sliced_list
 [[10, 20], [30, 40, 50]]
</code></pre>
<p>Note that <code>[:]</code> copies the list, so any change in either the first two elements of my_list or sliced_list will not be reflected in the other (unlike simple slicing).</p>
<p><code>my_list[:2]</code> selects the first two sub lists from your list.</p>
<p>Slicing refers to the actual sublist, not a copy, as this example demonstrates.</p>
<p><em>Copy with <code>[:]</code></em></p>
<pre><code>sliced_list[0].append(30)

&gt;&gt;&gt; sliced_list
[[10, 20, 30], [30, 40, 50]]

&gt;&gt;&gt; my_list
[[10, 20], [30, 40, 50], [0, 0], [1, 2, 3]]
</code></pre>
<p><em>Using slicing</em></p>
<pre><code>sliced_list = [sub_list for sub_list in my_list[:2]]
sliced_list[0].append(30)

&gt;&gt;&gt; my_list
[[10, 20, 30], [30, 40, 50], [0, 0], [1, 2, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt; list = [[10,20],[30,40,50],[0,0],[1,2,3]]
&gt;&gt; sList = list[:2]
&gt;&gt; print (sList)
[[10, 20], [30, 40, 50]]
</code></pre>
</div>
<span class="comment-copy">What is the output that you want?</span>
<span class="comment-copy">I want to get the first two lists <code>[10,20],[30,40,50]</code>. In other word, extracting the first two lists. My above method seems not elegant and I don't know how to make it better</span>
<span class="comment-copy">@FriddyJoe, do you want actual copies of the sublists or just the references to the sublists?</span>
<span class="comment-copy">You probably want <code>copy.deepcopy(l[:2])</code> if the OP actually wants a copy or <code>list(map(list, (l[:2])))</code></span>
<span class="comment-copy">You're right. I see now they are actually creating a new list. I thought they were printing it simply for some reason. I've updated @PadraicCunningham. Thanks again. You've suggested a few other good edits to other answers of mine. Really appreciate the revisions.</span>
<span class="comment-copy">This is REALLY elegant. I had a hunch that Python would include something elegant but since I am a beginner I couldn't get it. Thank you :)</span>
<span class="comment-copy">What is the point of <code>print ("%s" % sList)</code>. Why not just print <code>sList</code>?</span>
<span class="comment-copy">To make the code more similar to the original one.. The same reason I named the var <code>sList</code> instead of <code>sub_list</code></span>
<span class="comment-copy">Probably better not having it, or explaining why it is not needed. By just using it, you are implying that it is something that is necessary to print a list. It's a bit misleading based on how different your solution is from the code in the original question</span>
<span class="comment-copy">I edited the answer</span>
