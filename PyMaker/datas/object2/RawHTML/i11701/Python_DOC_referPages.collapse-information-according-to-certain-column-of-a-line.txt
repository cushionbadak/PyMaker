<div class="post-text" itemprop="text">
<p>For the matrix as below</p>
<pre><code>    A  20  200
    A  10  150
    B  60  200
    B  80  300
    C  90  400
    C  30  300
</code></pre>
<p>My purpose is trying to: for each category (labelled as A,B,C..in the 1st column), I'd like to find the minimum as well as maximum numbers (as biggest range). So expect to see:</p>
<pre><code>A  10  200
B  60  300
C  30  400
</code></pre>
<p>So how could I do using Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would start by:</p>
<pre><code>maxs, mins = {}, {}
for line in fd:
    category, small, big = line.split()
    if category not in maxs or big &gt; maxs[category]:
        maxs[category] = big
    if category not in mins or small &lt; mins[category]:
        mins[category] = small

# final printings
for category in maxs:
    print(category, mins[category], maxs[category], sep='\t')
</code></pre>
<p>This returns dicts, that can be merged using <code>{c: (mins[c], maxs[c]) for c in maxs}</code>.</p>
<p>This code assume that an iterable of lines is named <code>fd</code>. Could be an opened file containing the matrix in raw text.</p>
<p>If the order is important, a good solution is to use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a> instead of the regular dict for <code>mins</code> and <code>maxs</code>.</p>
</div>
<span class="comment-copy">Generally min/max algorithms work like this. You assign the max to the first value, then run a for loop that compares each value to the max, and , if it exceeds it, sets the max to that value.   If you can use <code>numpy</code>, there will be functions <code>np.max</code> <code>np.min</code> to do that for you. You may also need to use <code>transpose</code> on your data to get them into the right order. So why don't you provide the data in the shape that you have them as a Python variable?</span>
