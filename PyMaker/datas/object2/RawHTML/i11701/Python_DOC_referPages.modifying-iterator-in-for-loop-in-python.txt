<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15363138/scope-of-python-variable-in-for-loop">Scope of python variable in for loop</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<blockquote>
<p>@ Padraic Cunningham Let me know if you want me to delete the
  question.</p>
</blockquote>
<p>I am new to python. I want to skip some iterator values based on some condition. This is easy in C but in python I am having a hard time.</p>
<p>So please help me in understanding why the code here loops 100 times instead of 10.</p>
<pre><code> for i in range(100):
    print i
    i = i +10
</code></pre>
<p><strong>edit</strong>: I understand there is option to change step size of for loop. But I am interested in dynamically changing the iterator variable, like we can do in C. Okay, i get it, for loop is different in python than in C. Easy way to do is use the while loop, I did that in my code and it worked. Thank you community!</p>
</div>
<div class="post-text" itemprop="text">
<p>The for loop is walking through the iterable <code>range(100)</code>. </p>
<p>Modifying the current value does not affect what appears next in the iterable (and indeed, you could have any iterable; the next value might not be a number!).</p>
<p><strong>Option 1 <a href="https://stackoverflow.com/questions/15363138/scope-of-python-variable-in-for-loop">use a while loop</a>:</strong></p>
<pre><code>i = 0
while i &lt; 100:
    i += 4
</code></pre>
<p><strong><a href="https://stackoverflow.com/questions/2990121/how-do-i-loop-through-a-python-list-by-twos">Option 2</a>, use the built in step size argument of range:</strong></p>
<pre><code> for i in range(0,100,10):
       pass
</code></pre>
<hr/>
<p>This example may make it clearer why your method doesn't make much sense:</p>
<pre><code>for i in [1,2,3,4,5,'cat','fish']:
    i = i + i
    print i
</code></pre>
<p>This is entirely valid python code (string addition is defined); modifying the iterable would require something unintuitive.</p>
<p><a href="https://stackoverflow.com/questions/9884132/what-exactly-are-pythons-iterator-iterable-and-iteration-protocols">See here for more information on how iterables work, and how to modify them dynamically</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To do this use a while loop. Changing the iterator in a for loop will not change the amount if times it iterates Instead you can do</p>
<pre><code>i=0
while i &lt; 100:
    print i
    i = i +10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to modify an iterator, you can do something like that :</p>
<pre><code>iterator= iter(range(100))
for i in iterator:
    print (i)
    for k in range(9): next(iterator)
</code></pre>
<p>But no practical interest !</p>
</div>
<div class="post-text" itemprop="text">
<p>If you try this code it should work.</p>
<pre><code>for i in range(100)[::10]:
    print i
</code></pre>
<p>The [::10] works like string slicing. [first position to start at: position to stop at:number to steps to make in each loop]</p>
<p>I didn't use the first two values so these are set to the default of first position and last position. I just told it to make steps of 10.</p>
</div>
<span class="comment-copy">Even in C, it is <i>always</i> a bad idea to modify the iterating variable during a loop.</span>
<span class="comment-copy">Based on the code you have shown, you should read the docs on <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range</a>. Look at what <code>step</code> does.</span>
<span class="comment-copy">I understand I can change the step size to 10, but I want to change the step size arbitrarily during run time, lets say inside some 'if conditions'. I also understand it is a bad idea to change the iterating variable, but I still wish to do that.</span>
<span class="comment-copy">thank you the while loop worked for me. Will read more about the iterator concept in python.</span>
<span class="comment-copy">thank you while loop worked</span>
