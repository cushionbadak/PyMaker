<div class="post-text" itemprop="text">
<p>I want to dealing entities with python. Each entity has several Attribute-Value pairs and several types. For example, "iPhone" as an entity, it has AV pairs as:</p>
<pre><code>Developer, Apple Inc
CPU, Samsung
Manufacturer, Foxconn 
</code></pre>
<p>and it has types as:</p>
<pre><code>smartphone
mobilephone
telephone
</code></pre>
<p>I wish to define <code>class</code> for the entity. However, I need to store the information of a 2-dimension vector, <code>attribute-value pair</code> and a <code>type</code>. But the code below does not work. So how can I define a good data structure for this kind of entity (perhaps without <code>class</code>)?</p>
<pre><code>class entity:
def __init__(self, type, av[]):
    self.type=type
    self.av[]=av[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have a syntax error in your code - you don't need <code>[]</code> anywhere in your class.</p>
<p>Below is an example where you could use <code>list</code> for type information and <code>dict</code> for attributes:</p>
<pre><code>class Entity:

   def __init__(self, types, attributes):
       self.types = types
       self.attributes = attributes

iphone = Entity(
    types=['smartphone', 'mobilephone', 'telephone'],
    attributes={
        'Developer': ['Apple Inc'],
        'CPU': ['Samsung'],
        'Manufacturer': ['Foxconn', 'Pegatron'],
    },
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your indentation is messed up:</p>
<pre><code>class entity:
    def __init__(self, type, av[]):
        self.type=type
    self.av[]=av[]
</code></pre>
<p>Further; you should ideally create a class Entity and a subclass IPhone that inherits it. Every attribute should be a class attribute, and not just a value inside a list/dict. Something like this:</p>
<pre><code>class Entity(object):
    def __init__(self, type):
        self.type = type
    ... attributes and methods common to all entities

class IPhone(Entity):
    def __init__(self, developer, cpu, manufacturer):
        Entity.__init__(self, "smartphone")
        self.developer = developer
        self.cpu = cpu
        self.manufacturer = manufacturer
</code></pre>
</div>
<span class="comment-copy">Use a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a> which is a class that writes itself.</span>
<span class="comment-copy">for type u can use <code>*args</code></span>
<span class="comment-copy">@matino , thanks for your answer. I have a further question that, I use <code>dict</code> for attributes. However, if <code>iphone</code> have more than 2 attributes such as <code>Manufacturer, Foxconn</code> and <code>Manufacturer, Pegatron</code>, then I use <code>dict[attribute]=value</code>, I can only get one item.</span>
<span class="comment-copy">Well you can use <code>list</code> for the values and have as many as you like. I have modified my example.</span>
