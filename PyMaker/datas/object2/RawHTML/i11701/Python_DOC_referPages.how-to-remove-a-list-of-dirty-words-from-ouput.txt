<div class="post-text" itemprop="text">
<p>I have three text files that I have opened and read into my program. Each contain speeches that I am going to extract the n most words from. I have converted the words to lowercase and I am trying to get rid of dirty words that I have created a list for prior to exporting the words to excel spreadsheets for further analysis.</p>
<p>I have tried multiple options from several sites and I am stuck.</p>
<p>Here is what I have:</p>
<pre><code>hitList = ["am", "as", "is", "of", "the", "it", "or", "and", "to", "I", "a", "have", "you", "we", "they", "It's", "don't", "our", "so", "for", "-", ".", "but", "out"]

txt = file.read().lower()
words = txt.split()
x = {}
sumChars = len(words)
sumLines = txt.count("\n")
# Iterate through the words and append the list with new words
for i in words:
    if i in x:
        try:
            if x not in hitList:
                x[i] += 1
        except:
            print("Oops... A word could not be added to the list.")
            break
            killCall()
    else: x[i] = 1
lst = [(x[i], i) for i in x]
lst.sort()
lst.reverse()
sumWords = sum(x[i] for i in x)
strsumChars = str(sumChars)
strsumLines = str(sumLines)
strsumWords = str(sumWords)
# Convert the final list 'x' into lowercase values to ensure proper sorting
print(filename + " contains " + strsumChars + " characters.")
print(filename + " contains " + strsumLines + " lines.")
print(filename + " contains " + strsumWords + " words. \n\n")
print("The 30 most frequent words in " + filename + " are: ")
g = 1
for count, word in lst[:50]:
    op = print('%2s.  %4s %s' % (g, count, word))
    g+=1

if savesheet == "Cleveland_Aug62015":
    workbook = xlwt.Workbook()
    col2 = "Word Count"
    col3 = "Words"
    worksheet = workbook.add_sheet("Cleveland_Aug62015", cell_overwrite_ok = True)
    worksheet.write(0,0, col2)
    worksheet.write(0,1, col3)
    try:
        for h, l in enumerate(lst[:50], start = 1):
            for j, col in enumerate(l):
                worksheet.write(h, j, col)
        print("\n" + savesheet + " exported to Excel...")
    except: print("\n" + savesheet + " unable to be saved to Excel...")
    workbook.save(xlsfile + "_" + savesheet + ".xls")
</code></pre>
<p>All other variables, etc for the text file and other things are called, I just posted the issue areas here. I am still marking it up, so I haven't error-trapped everything, etc. </p>
<p>The main issue I am having is here:</p>
<pre><code># Iterate through the words and append the list with new words
for i in words:
    if i in x:
        try:
            if x not in hitList:
                x[i] += 1
        except:
            print("Oops... A word could not be added to the list.")
            break
            killCall()
    else: x[i] = 1
lst = [(x[i], i) for i in x]
lst.sort()
lst.reverse()
</code></pre>
<p>I am trying to remove the dirty words before creating the output list, but the dirty words keep showing up.</p>
<p>Any help is greatly appreciated</p>
<p>Brandon</p>
</div>
<div class="post-text" itemprop="text">
<p>In your if-else statement in the lower code snipped you provided, you're testing to see if the word in question is in the <code>hitList</code> in the <em><code>if</code></em> but not in the <em><code>else</code></em>. Therefore, each word you don't want to get added is getting added at least once.</p>
<p>Providing the same sort of protection in the <code>else</code> as you do in the <code>if</code> should help. Or, better yet, just wrap the whole if-else in the <code>if x not in hitList:</code>.</p>
<p>Also, as Andrea Corbellini pointed out, using a <code>Counter</code> would tremendously  simplify your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your program contains several errors, inefficiencies and misses out on several Python idioms.  Here's a rework of the first part of your program (which assumes Python3 print statements):</p>
<pre><code>from collections import Counter
from operator import itemgetter

# ...

MOST_FREQUENT = 30

hitList = {"am", "as", "is", "of", "the", "it", "or", "and", "to", "i", "a", "have", "you", "we", "they", "it's", "don't", "our", "so", "for", "-", ".", "but", "out"}

rawText = file.read().lower()

sumLines = rawText.count("\n")

words = rawText.split()

sumChars = sum(len(word) for word in words)  # includes hitList
# sumChars = sum(len(word) for word in words if word not in hitList)  # excludes hitList

wordCounts = Counter([word for word in words if word not in hitList])

sumWords = sum(wordCounts.values())

print(filename, "contains", sumChars, "characters.")
print(filename, "contains", sumLines, "lines.")
print(filename, "contains", sumWords, "words.", end="\n\n\n")

wordHistogram = wordCounts.most_common(MOST_FREQUENT)

print("The", MOST_FREQUENT, "most frequent words in", filename, "are:")

for g, (word, count) in enumerate(wordHistogram[:MOST_FREQUENT]):
    print('%2s.  %4s %s' % (g + 1, count, word))

# ...
</code></pre>
</div>
<span class="comment-copy">Your else statement doesn't check if the words are in <code>hitList</code> so at least the first instance of the word is getting added.</span>
<span class="comment-copy">I would use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>, remove the words from there using <code>pop()</code> and return the most common words using <code>most_common()</code></span>
<span class="comment-copy">Every word is added to <code>x</code> because the <code>if i in x</code> test will always fail the first time that word is processed.</span>
<span class="comment-copy">x[i] += 1 that is so wrong</span>
<span class="comment-copy">@taylangul Why? Sure it's not as good as using a Counter, or even a defaultdict, but it's ok.</span>
<span class="comment-copy">I tried wrapping the whole if..else in the hitList if, but and it ran, but it would not output the values, and showed 0 words in the word count output.</span>
<span class="comment-copy">I implemented your recommendations, and the code worked. However, the dirty words are still showing  up in the output. Any suggestions?</span>
<span class="comment-copy">@BTBean, I suggest you review the modified code I included as it's not showing any of the hit list words when I run it.  You must have missed something.  The list comprehension that's the argument to <code>Counter()</code> eliminates the hit list words.  Note my <code>hitList</code> is a set, not a list, and I lowercased the elements since that's what your and my code expect.</span>
