<div class="post-text" itemprop="text">
<p>I am trying to yield nodes in a tree with a generator using a preorder depth first search. The parents node can have any number of children and the children are stored in a list.</p>
<p>I figured this code would work, but it appears that the for loop is iterating over each child without actually going into the recursive call.</p>
<pre><code>def traverse_tree(t):
    yield t.label, t.val
    for child in t.children:
        traverse_tree(child)
</code></pre>
<p>Does anyone know how to handle this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the function, for each call, the <code>yield</code> expression only gets hit once.  So your generator will only yield one thing.  To get it to yield more than one thing, you need to yield from the children too:</p>
<pre><code>def traverse_tree(t):
    yield t.label, t.val
    for child in t.children:
        yield from traverse_tree(child)
</code></pre>
<p>This is python 3.3+ syntax (IIRC).  For earlier versions:</p>
<pre><code>def traverse_tree(t):
    yield t.label, t.val
    for child in t.children:
        for label, val in traverse_tree(child):
            yield label, val
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check out this answer <a href="https://stackoverflow.com/questions/8991840/recursion-using-yield">Recursion using yield</a>, and more specifically the <code>yield from</code> construction here: <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer">https://docs.python.org/3/whatsnew/3.3.html#pep-380</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you call the function that contains <code>yield</code>, the code in the body of the function does not run. Instead, it returns a generator object.</p>
<p>You can use a list to store the result instead:</p>
<pre><code>def traverse_tree(t, list):
    list.append((t.label, t.val))
    for child in t.children:
        traverse_tree(child, list)
</code></pre>
</div>
