<div class="post-text" itemprop="text">
<p>The code below looks at a list of <code>tuple</code>s (each with two elements) called pairs, and creates a bank of all the element names in the list. It then counts how many times any element appears in a <code>tuple</code> and divides that by a number of elements. I want the average number of interactions (times it appears in a tuple with another element) per element for the entire <code>list</code>. </p>
<pre><code>def average(pairs):
    intcount = 0
    bank = []
    for j,k in pairs:
        if not j in bank:
            bank.append(j)
        if not k in bank:
             bank.append(k)
        if j in bank:
            intcount += 1
        if k in bank:
            intcount += 1
    output = intcount/len(bank)
    return output
</code></pre>
<p>The code works well but is an eyesore. I'm trying to learn how to write more pythonic code, but every time I try to condense my code into fewer lines it becomes erroneous. An example of my abysmal attempt:</p>
<pre><code>def average(pairs):
    intcount = 0
    bank = []
    if not j or k in bank for j,k in pairs:
         bank.append(if not j in bank else k if not k in bank else ' ' for j, k in interactions)
    #then some kind of line streamlining how the intcount increments?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow"><code>set</code></a>.</p>
<pre><code>def average(pairs):
    bank, intcount = set(), 0
    for j, k in pairs:
        bank.update({j, k})
        intcount += 1 if j in bank or k in bank
    return intcount/len(bank)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try these <strong>two lines</strong></p>
<pre><code>pairs = [(1,2), (2,3), (3,4), (4,5)]
bank = set(i for pair in pairs for i in pair) # {1, 2, 3, 4, 5}
output = 2*len(pairs) / len(bank) # 1.6
In [288]: output
Out[288]: 1.6
In [289]: average(pairs) # your function
Out[289]: 1.6
</code></pre>
<p>See if it works for you.</p>
</div>
<span class="comment-copy">the code isn't that bad, but you can combine the 3rd and 4th if statements non-trivially, and there isn't any reason to define an output variable, just return the right side of that.</span>
<span class="comment-copy">How would the 3rd and 4th if statements look if combined? When I put j or k in an if statement with the intcount incrementing, it only counts the j unless I put k in it's own statement? (Sorry I couldn't figure out how to get the code to work in the comments....:/ )</span>
<span class="comment-copy">You probably don't understand operator precedence fully. My guess is you're doing something like this <code>if j or k in bank</code> Python is not english, and you can't treat it like english. That code tests if j is non-zero, or k is in bank, not if either j or k is in bank. You actually want something like `if j in bank or k in bank</span>
<span class="comment-copy"><code>1 if j in bank or k in bank else 0</code> can be simply <code>j in bank or k in bank</code>.</span>
<span class="comment-copy">Good point, thank you.</span>
<span class="comment-copy">Hmm this seems to return 1/2 of the average that is true. An example file I created should return the average as 4.2 but this code returns 2.1. Something about the increment of the intcount is funky?</span>
<span class="comment-copy">What makes you think it should be 4.2? Mind posting the file?</span>
