<div class="post-text" itemprop="text">
<pre><code>def find_duplicates(inputList, occurrences, errorMessage):
    '''find_duplicates(inputList, occurrences) -&gt; Finds and returns all duplicates in list l
    which occur at least 'occurrences' times
    If none are found then errorMessage is returned'''
    curr = 0
    prev = 0
    occurrencesFound = 0
    duplesFound = []
    inputList = sorted(inputList)
    print(inputList)
    for i in range(len(inputList)):
        prev = curr
        curr = inputList[i]
        occurrencesFound[curr] = 0
        if curr == prev and duplesFound.count(curr) == 0:
            occurrencesFound[curr] += 1
            if occurrencesFound[curr] == occurrences:
                duplesFound.append(curr)
                occurrencesFound = 0
    if duplesFound == []:
        duplesFound = errorMessage
    return duplesFound
</code></pre>
<p>This is Python 3 code I wrote to return all the values in a list that occur 'occurrences' times, and display a chosen error message if none were found. However, this is what I'm getting:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Python\Python Homework.py", line 68, in &lt;module&gt;
    print(find_trivial_taxicab_numbers(3))
  File "C:\Python\Python Homework.py", line 56, in find_trivial_taxicab_numbers
    while find_duplicates(intsFound, (n), "Error") == "Error":
  File "C:\Python\Python Homework.py", line 32, in find_duplicates
occurrencesFound[curr] = 0
TypeError: 'int' object does not support item assignment
</code></pre>
<p>I can somewhat tell what the error is, but I'm not sure. What I'm trying to do is to have a separate number of occurrences for each different value in the list. For example, if I had a list [2,2,5,7,7,7,7,8,8,8] I would want occurrencesFound[2] to end up as 2, occurrencesFound[5] to end up as 1, occurrencesFound[7] to end up as 4, and so on. </p>
<p>With that, the code would then check if any numbers occurred at least the number of times the user asked for, and then return all the numbers that did. The method I used didn't work great, though...</p>
<p>What I would like to know is why this is an error and how I might be able to fix it. I tried doing occurrencesFound(curr) instead, and that worked no better. That was answered in <a href="https://stackoverflow.com/questions/18232313/typeerror-function-object-does-not-support-item-assignment">"TypeError: 'function' object does not support item assignment"</a> however. Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have occurancesFound set to an integer data type at this line:</p>
<pre><code>occurrencesFound = 0
</code></pre>
<p>You cannot assign an item to it because it is an integer.</p>
<p>If you want to assign items to it, make it a dict:</p>
<pre><code>occurancesFound = {}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're setting <code>occurrencesFound</code> to an int (<code>0</code>) and then trying to use it as a list (<code>occurrencesFound[curr] = 0</code>). That is the problem. If you want to store occurences of different entities in <code>occurrencesFound</code>, use it as follows:</p>
<pre><code>occurrencesFound = {}
occurrencesFound[curr] = 0
</code></pre>
<p>This will create a dictionary of count (int) variables, where <code>curr</code> is the key.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have mentioned there's a serious inconsistency in your code: you are trying to use <code>occurrencesFound</code> both as an integer and a list.</p>
<p>The simple way to find groups of duplicate items in a list is to use the standard module function <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>. Your <code>find_duplicates</code> takes an <code>errorMessage</code> arg, but I advise that it's cleaner to do the error handling in the calling code rather than in the function that finds the groups.</p>
<p>My <code>find_duplicates</code> collects the groups in a <code>dict</code>, which is more flexible that using a <code>list</code>, since it can be used for various types of elements, not just integers. And even if you're just collecting groups of integers, a <code>dict</code> is still better than a <code>list</code>, unless those integers are guaranteed to be roughly contiguous, with the lowest integer near zero (and non-negative).</p>
<pre><code>from itertools import groupby

def find_duplicates(input_list, occurrences=2):
    input_list = sorted(input_list)
    groups = {}
    for k, g in groupby(input_list):
        # We have to convert iterator `g` to a list to get its length
        glen = len(list(g))
        if glen &gt;= occurrences:
            groups[k] = glen
    return groups

# Test
input_list = [7, 8, 7, 2, 8, 5, 7, 7, 8, 2]

groups = find_duplicates(input_list, 3)
if not groups:
    print('No groups found')
else:
    print(groups)
</code></pre>
<p><strong>output</strong></p>
<pre><code>{8: 3, 7: 4}
</code></pre>
</div>
<span class="comment-copy">I think you wanted to do <code>occurrencesFound = []</code> and not <code>occurrencesFound = 0</code>. Or maybe even <code>occurrencesFound = {}</code> if you want a dictionary.</span>
<span class="comment-copy">Why are you setting <code>occurrencesFound</code> to an int?</span>
<span class="comment-copy"><code>occurencesFound</code> is a int value, so <code>occurrencesFound[curr]</code> doesn't make sense</span>
<span class="comment-copy">FWIW, you can use itertools.groupby  to find dupes in a sorted list.</span>
