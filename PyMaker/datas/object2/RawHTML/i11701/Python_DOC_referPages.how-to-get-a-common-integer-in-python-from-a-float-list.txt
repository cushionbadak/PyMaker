<div class="post-text" itemprop="text">
<p>I have a list of floats </p>
<pre><code>l1 = [10.0, 50.0, 100.0]
l2 = [0.1, 0.5, 1.0]
l3 = [20.0, 100.0, 200.0]
</code></pre>
<p>All should return: </p>
<pre><code>i = [1, 5, 10]
</code></pre>
<p>What's the most effective way of getting ints with taking the smaller as the base there multiplier? or a multiples of them if it's not possible</p>
<p>Example: </p>
<pre><code>n1 = [0.2, 0.3, 0.6]
</code></pre>
<p>should return </p>
<pre><code>i = [2, 3, 6]
</code></pre>
<p>and</p>
<pre><code> n2 = [1424.56, 2136.84, 4985.96]
</code></pre>
<p>should return:</p>
<pre><code> i = [ 2, 3, 7] # 712.28 = 1
</code></pre>
<p>I'm using the <code>value / min(l1)</code> but it wont work for the second case and third case</p>
</div>
<div class="post-text" itemprop="text">
<p>You could convert all of the numbers to integers, then divide each by their <a href="https://docs.python.org/3/library/fractions.html#fractions.gcd" rel="nofollow">greatest common divisor (GCD)</a>. It's a good idea to avoid floating point numbers due to their inability to represent many decimals exactly. 
The <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow">fractions</a> module is perfect for this: it can handle both decimals and rational numbers like 1/3 and 2/7.</p>
<pre><code>#!/usr/bin/env python3

from fractions import Fraction, gcd
from functools import reduce

def lcm(a, b):
    return a * b // gcd(a, b)

def common_integer(*numbers):
    fractions = [Fraction(n).limit_denominator() for n in numbers]
    multiple  = reduce(lcm, [f.denominator for f in fractions])
    ints      = [f * multiple for f in fractions]
    divisor   = reduce(gcd, ints)
    return [int(n / divisor) for n in ints]
</code></pre>
<p>This converts each number to a rational <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow">fraction</a>, then multiplies them by the least common multiple (LCM) of their denominators. That effectively scales them up so they're all integers. Then it divides them by their collective GCD, scaling them down as much as possible.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; common_integer('0.2', '0.3', '0.6')
[2, 3, 6]
&gt;&gt;&gt; common_integer('1424.56', '2136.84', '4985.96')
[2, 3, 7]
&gt;&gt;&gt; common_integer('2/7', '18/42', '1/3')
[6, 9, 7]
</code></pre>
<p>(Using <code>limit_denominator()</code> allows floats to be passed in, even inexact ones. It's not entirely recommended, but you could omit the quotes and pass <code>0.2</code> in place of <code>'0.2'</code> or <code>1/3</code> in place of <code>'1/3'</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>In integers, you're looking for the greatest common divisor.  There are many algorithms to find it.  Then you need to transfer that logic over to floats, keeping in mind that floating point arithmetic means that something close to zero should probably be considered zero:</p>
<pre><code>#!/usr/local/bin/python3

from functools import reduce

def iszero(a):
    return abs(a)&lt;1e-9

def gcd(a,b):
    if iszero(b):
        return a
    return gcd(b,a%b)

def gcdarr(arr):
    return reduce(gcd,arr)

def correctratios(arr):
    arrgcd = gcdarr(arr)
    return [round(a/arrgcd) for a in arr]

l = [.2,.3,.6]
n2 = [1424.56, 2136.84, 4985.96]

print(correctratios(l))
print(correctratios(n2))
</code></pre>
<p>prints out:</p>
<pre><code>[2, 3, 6]
[2, 3, 7]
</code></pre>
<p>Python 3.5 introduced <a href="https://docs.python.org/3.5/library/math.html#math.isclose" rel="nofollow">math.isclose</a>, which you could use instead of <code>iszero</code>.  It also moved gcd from <a href="https://docs.python.org/3.5/library/fractions.html#fractions.gcd" rel="nofollow">fractions</a> to <a href="https://docs.python.org/3.5/library/math.html#math.gcd" rel="nofollow">math</a>.  The problem with the builtin gcd is that it doesn't account for floating points being close to zero, and everything blows up.</p>
</div>
<span class="comment-copy">Are you always multiplying by 10, so will <code>l = [0.1, 0.01, 0.001]</code> return <code>i = [1, 1, 1]</code> or <code>i = [1, 0, 0]</code> or <code>i = [1, 0.1, 0.01]</code>?</span>
<span class="comment-copy">the later one. But it's not always by 10 ...  <code>l = [1424.56, 2136.84, 4985.96]</code> should return <code>[2,3,7]</code></span>
<span class="comment-copy">I can't see a pattern here, could you please explain it in more detail - OK I see, you want all of the numbers divided by the smallest one?</span>
<span class="comment-copy">to the end result is a list of <i>INTEGERS</i> representing the proportions of each values. Imagine the input as cocktail ingredients in milliliters (or liquid oz) i.e 24.4 milliliters of whiskey and  36.6 milliliters lemon juice of then the output recipe should say: 2 parts of whiskey, 3 parts of lemon juice.</span>
<span class="comment-copy">@nicocesar, this is called common factor) lol <a href="https://www.mathsisfun.com/definitions/common-factor.html" rel="nofollow noreferrer">mathsisfun.com/definitions/common-factor.html</a></span>
<span class="comment-copy">but even using Decima,.    Decimal('1.5')  isn't an <code>int</code></span>
<span class="comment-copy">Updated my answer to use the fractions module, which can handle both decimals and fractions like <code>1/3</code> without any representational loss.</span>
<span class="comment-copy">Thanks, I like this solution!</span>
