<div class="post-text" itemprop="text">
<p>I am attempting to split a string of integers by every n character and then convert them to unicode. Unfortunately, I came across a problem... Since the leading 0s has been dropped from the string, it makes me confused about how to handle them. 
Here is an exampleï¼š</p>
<pre><code>print(num2txt(97097114103104))
</code></pre>
<p>Here the leading 97 is a valid number in the ASCII table and I can simple add a "0" before the string so that this whole string will be correctly split into something like this:</p>
<pre><code>['097', '097', '114', '103', '104']
</code></pre>
<p>However, what if the first three digits are actually valid in the ASCII table? 
Like this:</p>
<pre><code>100097114103
</code></pre>
<p>In this case I want it to be split into </p>
<pre><code>['100', '097', '114']
</code></pre>
<p>But how do I make sure this does not need a "0" anymore if something happens in my function?</p>
<p>My current code is below:</p>
<pre><code>def num2txt(num, k=3):

    line = str(num) 
    line = "0" + line
    line = [line[i:i+k] for i in range(0, len(line), k)]

    return line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just add leading zeros when necessary.</p>
<pre><code>def num2txt(num, k=3):

    line = str(num)
    padding = len(line)%k
    if padding:
        line = '0'*(k-padding) + line
    line = [line[i:i+k] for i in range(0, len(line), k)]

    return line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do this using <a href="https://docs.python.org/3.5/library/math.html#math.ceil" rel="nofollow"><code>math.ceil</code></a> to round up the length of my string to the multiple of <code>3</code> then <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>format</code></a> my string. From there to <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python">split my string what other better way than using a generator function?</a></p>
<pre><code>import math
def num2txt(num, k):
    num_str = "{:0&gt;{width}}".format(num, width=math.ceil(len(str(num))/k)*k)
    for n in range(0, len(num_str), k):
        yield num_str[n:n+k]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; list(num2txt(97097114103104, 3))
['097', '097', '114', '103', '104']
</code></pre>
</div>
<span class="comment-copy">To find out if you need to prepend a 0 you could check the result of len(str(line)) % 3</span>
<span class="comment-copy">Yeah I was thinking why there were two '0' in that padding. But thank you for the prompt response. I finally got it!</span>
<span class="comment-copy">One quick question... If I encouter something like this:     print(num2txt(65006600660065, k=4))  It would not properly split them. I want them to be thing s like 0065, 0066, 0065. But the code is giving me ['0650', '0660', '0660', '065']...Any ideas?</span>
<span class="comment-copy">Sorry for bothering you. I got it. I suggest you might want to edit the padding to switch the place of '00' and '0' which will correctly output when k=4. Thank you!</span>
<span class="comment-copy">@HarryLens - My apologies; I've fixed it for the general case (see edit).</span>
<span class="comment-copy">Thank you! I was trying to something similar.</span>
