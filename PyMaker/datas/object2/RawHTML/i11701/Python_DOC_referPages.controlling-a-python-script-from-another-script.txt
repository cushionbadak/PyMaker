<div class="post-text" itemprop="text">
<p>I am trying to learn how to write a script <code>control.py</code>, that runs another script <code>test.py</code> in a loop for a certain number of times, in each run, reads its output and halts it if some predefined output is printed (e.g. the text 'stop now'), and the loop continues its iteration (once <code>test.py</code> has finished, either on its own, or by force). So something along the lines:</p>
<pre><code>for i in range(n):
    os.system('test.py someargument')
    if output == 'stop now': #stop the current test.py process and continue with next iteration
    #output here is supposed to contain what test.py prints
</code></pre>
<ul>
<li>The problem with the above is that, it does not check the output of <code>test.py</code> as it is running, instead it waits until <code>test.py</code> process is finished on its own, right?</li>
<li>Basically trying to learn how I can use a python script to control another one, as it is running. (e.g. having access to what it prints and so on).</li>
<li>Finally, is it possible to run <code>test.py</code> in a new terminal (i.e. not in <code>control.py</code>'s terminal) and still achieve the above goals?</li>
</ul>
<hr/>
<p><strong>An attempt:</strong>
<code>test.py</code> is this:</p>
<pre><code>from itertools import permutations
import random as random


perms = [''.join(p) for p in permutations('stop')]

for i in range(1000000):
    rand_ind = random.randrange(0,len(perms))
    print perms[rand_ind]
</code></pre>
<p>And <code>control.py</code> is this: (following Marc's suggestion)</p>
<pre><code>import subprocess

command = ["python", "test.py"]
n = 10
for i in range(n):
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while True:
        output = p.stdout.readline().strip()
        print output
        #if output == '' and p.poll() is not None:
        #    break
        if output == 'stop':
            print 'sucess'
            p.kill()
            break
            #Do whatever you want
    #rc = p.poll() #Exit Code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you are hinting at in your comment to Marc Cabos' answer is <a href="https://docs.python.org/3/library/threading.html" rel="nofollow">Threading</a></p>
<p>There are several ways Python can use the functionality of other files. If the content of <code>test.py</code> can be encapsulated in a function or class, then you can <code>import</code> the relevant parts into your program, giving you greater access to the runnings of that code.</p>
<p>As described in other answers you can use the stdout of a script, running it in a subprocess. This could give you separate terminal outputs as you require.</p>
<p>However if you want to run the <code>test.py</code> <em>concurrently</em> and access variables as they are changed then you need to consider threading. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use subprocess module or also the os.popen </p>
<pre><code>os.popen(command[, mode[, bufsize]])
</code></pre>
<p>Open a pipe to or from command. The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is 'r' (default) or 'w'.</p>
<p>With subprocess I would suggest </p>
<pre><code>subprocess.call(['python.exe', command])
</code></pre>
<p>or the subprocess.Popen --&gt; that is similar to os.popen (for instance)</p>
<p>With popen you can read the connected object/file and check whether "Stop now" is there.</p>
<p>The os.system is not deprecated and you can use as well (but you won't get a object from that), you can just check if return at the end of execution.</p>
<p>From subprocess.call you can run it in a new terminal or if you want to call multiple times ONLY the test.py --&gt; than you can put your script in a def main() and run the main as much as you want till the "Stop now" is generated.</p>
<p>Hope this solve your query :-) otherwise comment again.</p>
<p>Looking at what you wrote above you can also redirect the output to a file directly from the OS call --&gt; os.system(test.py *args &gt;&gt; /tmp/mickey.txt) then you can check at each round the file. </p>
<p>As said the popen is an object file that you can access.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes you can use Python to control another program using stdin/stdout, but when using another process output often there is a problem of buffering, in other words the other process doesn't really output anything until it's done.</p>
<p>There are even cases in which the output is buffered or not depending on if the program is started from a terminal or not.</p>
<p>If you are the author of both programs then probably is better using another interprocess channel where the flushing is explicitly controlled by the code, like sockets.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the "subprocess" library for that.</p>
<pre><code>import subprocess

command = ["python", "test.py", "someargument"]

for i in range(n):
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while True:
        output = p.stdout.readline()
        if output == '' and p.poll() is not None:
            break
        if output == 'stop now':
            #Do whatever you want
    rc = p.poll() #Exit Code
</code></pre>
</div>
<span class="comment-copy"><code>os.system</code> is deprecated; you should be using the <code>subprocess</code> module</span>
<span class="comment-copy">to run test.py in a new terminal, you need to start that process, e.g. <code>subprocess.call(["xterm", "-e", "python", "test.py", "someargument"])</code></span>
<span class="comment-copy">You might be interested in <a href="https://pypi.python.org/pypi/pexpect/" rel="nofollow noreferrer">pexpect</a>.</span>
<span class="comment-copy">@zondo neat! would you be so kind to showcase an example here? using pexpect</span>
<span class="comment-copy"><a href="http://pastebin.com/eM63RzAy" rel="nofollow noreferrer">Here</a></span>
<span class="comment-copy">oh wow I'm learning so much. Indeed in this specific example I'm solely attempting to access the print outputs of <code>test.py</code> here.</span>
<span class="comment-copy">I added a failed attempt to my post, if you want to have a look</span>
<span class="comment-copy">Just have. Got it to work on my machine, but I am running py3 these days...</span>
<span class="comment-copy">Thanks Marco, I'm going to try a simple script and try this idea, I'll get back to you</span>
<span class="comment-copy">Exactly what you are looking are threads. This is what you need in the end :-) What I suggested above is a bit more easier, but threads are the correct answer I guess :-) Have a nice day.</span>
<span class="comment-copy">I added a first attempt to my post. it can do some of the things I wanted. Remains to call the subprocess in a new terminal (on ubuntu), any ideas?</span>
<span class="comment-copy">Not sure if the creation flag will help you in the Popen for this particular case. creationflags=CREATE_NEW_CONSOLE . You can also check the subprocess doc here: <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">docs.python.org/2/library/subprocess.html#subprocess.Popen</a> hope this is helping you :-)</span>
<span class="comment-copy">CREATE_NEW_CONSOLE is only for windows I think, I'm running ubuntu</span>
<span class="comment-copy">oh :(( bummer... do you see a way around this? (because I only care about what <code>test.py</code> prints and not the other things that it does, so that's why I thought if I run it in another terminal, then maybe I have a chance of reading the terminal itself to learn what <code>test.py</code> is printing)</span>
<span class="comment-copy">Hi, thanks for the suggestion. If I'm not mistaken, with this, answer, err are filled only once p has finished, right? I sort of want to read the subprocess' prints as it is running, and then stop that subprocess if among the prints, 'stop now' is printed. Is that achievable?</span>
<span class="comment-copy">Test if it works correctly... I can't check it now (just coded).</span>
<span class="comment-copy">Thanks a lot, gonna try it now. I guess you meant to write the <code>break</code> after the second condition, right?</span>
<span class="comment-copy">Made it work with some changes, see my post again</span>
<span class="comment-copy">If I have multiple subprocesses, so e.g. p, p2, p3, how can I make the while loop you suggested, but specifically for process p, I ask because you simply wrote <code>while True:</code> but now with multiple at hand, I want to do the same loop except for process p, so something like <code>while p==True:</code> but that doesn't work</span>
