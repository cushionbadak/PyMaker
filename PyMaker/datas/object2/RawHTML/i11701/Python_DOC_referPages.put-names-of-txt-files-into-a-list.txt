<div class="post-text" itemprop="text">
<p>This is my code, pinched from this site:</p>
<pre><code>import os
for file in os.listdir("C:\\"):
    if file.endswith(".txt"):
        file = file.strip(".txt")
        print(file)
</code></pre>
<p>It works great, but I want to be able to manipulate my results and store them into a list, and I'm not sure how to do that. It's probably super simple and missing me completely, I'm sort of a noob. Thanks :)</p>
<p>EDIT:</p>
<p>I removed the readlines part, that wasn't meant to be there.
What I am trying to do is get the names of every .txt file in the folder, in this case the folder is C:\</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably you want to have something like this:</p>
<pre><code>import os
allfiles = os.listdir('C:\\')
onlytxt = [x for x in allfiles if x.endswith('.txt')]
print onlytxt
</code></pre>
<p>if you don't want to have .txt in the list do this:</p>
<pre><code>onlytxt = [x[:-4] for x in allfiles if x.endswith('.txt')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A couple alternatives to incBrain's (perfectly fine) <a href="https://stackoverflow.com/a/36579910/364696">answer</a>.</p>
<p>First, to simplify your own code instead of reinventing the wheel, use <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow noreferrer"><code>glob.glob</code></a>:</p>
<pre><code>import glob

onlytxt = [file[:-4] for file in glob.glob('C:\\*.txt')]
</code></pre>
<p>Or to get higher performance on Python 3.5+ (or any version of Python using the <code>scandir</code> module from PyPI):</p>
<pre><code>import os  # Pre-3.5, you'd import and use the scandir module from PyPI

# Use file.path[:-4] to store the full path (sans .txt extension)
# where file.name[:-4] only gets the file name without the path or extension
onlytxt = [file.name[:-4] for file in os.scandir('C:\\') if file.name.endswith('.txt')]
</code></pre>
<p>Or for true ridiculousness, push more work to the C layer and avoid redundancy by splitting off the extension once, instead of one check for it, then another operation to strip it:</p>
<pre><code>import os
from operator import attrgetter

components = map(os.path.splitext, map(attrgetter('name'), os.scandir('C:\\')))
onlytxt = [root for root, ext in components if ext == 'txt']
</code></pre>
<p><code>os.scandir</code> doesn't do much for you in this case (you're not reading any attributes it might have checked for you), but in a largish directory, it means you aren't storing all entries at once (<code>os.listdir</code> and most other APIs read the complete contents of the directory into a <code>list</code> first before you have a chance to filter it), so peak memory usage is reduced when few files are matched.</p>
</div>
<span class="comment-copy">"Manipulate my results" you mean the <code>readlines()</code> or the <code>file</code>?</span>
<span class="comment-copy"><code>os.listdir("C:\\")</code> already returns a list of all the files in that directory</span>
<span class="comment-copy">And I don't think this code should work... <code>file.readlines()</code> should error with <code>AttributeError: 'str' object has no attribute 'readlines'</code></span>
<span class="comment-copy">Why don't you define an empty list and append the file names to it ?</span>
<span class="comment-copy">@Ian Forget the readlines part, it wasn't meant to be there! I mean I want to manipulate a list populated with the file names.</span>
<span class="comment-copy">Brilliant. Does exactly what I need, no fuss. Thank you :)</span>
