<div class="post-text" itemprop="text">
<p>I have to assert that value val1 &gt;= val2. That is in terms of Model checking, the witness(counterexample) has to assert that the val1 &gt;= val2. </p>
<p>I can do it easily in C (cbmc) by:</p>
<pre><code>C1 = True;

C1 = (C1 &amp;&amp; (val1 &gt;= val2));
__CPROVER_assert(!C1 ,"constraint sat");
</code></pre>
<p>Is there a way to do that in Python?</p>
<p><em>Update:</em></p>
<pre><code>C1  = True
C1 = C1 &amp;&amp; (val1 &gt;= val2)
assert not C1 
</code></pre>
<p>causing</p>
<pre><code> File "python_version.py", line 123, in main
    assert not  C1
AssertionError
</code></pre>
<p>But if I do </p>
<pre><code>C1  = True
C1 = C1 &amp;&amp; (val1 &gt;= val2)
assert C1
</code></pre>
<p>The result is the reverse of what I want (I want val2 &gt;= val1).
<em>Edit:</em></p>
<pre><code>import math 
from random import randint

def main():

C1 = True
z = randint(1,10)
r = randint(1,10)
x  = z + 2
y  = r + 2

C1 = C1 and (x &gt;= y)
assert  C1

print(x)
print(y)
</code></pre>
<p>Depending upon the value of z and r chosen, this will break or goes through and prints x , y. So this not working as __CPROVER_assert does, which finds a witness / interpretation that is valid / satisfied !</p>
<p>For example, my three different runs of same code resulted as:</p>
<pre><code>&gt;mokambo 11:16 PM ~/cost-allocation/Constraint_solving python checkPython.py 

Traceback (most recent call last):

  File "checkPython.py", line 23, in &lt;module&gt;
    main()

  File "checkPython.py", line 15, in main
    assert  C1
AssertionError

&gt;mokambo 11:16 PM ~/cost-allocation/Constraint_solving python checkPython.py 

7
4

&gt;mokambo 11:16 PM ~/cost-allocation/Constraint_solving python checkPython.py 

12
11
</code></pre>
<p>Is there any way to check satisfiability of a constraint in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>(Given the original post) With the following Python code, If <code>val1 &gt;= val2</code> is <code>True</code>, <code>C1</code> will be <code>False</code>, and there will be no <code>AssertionError</code>:</p>
<pre><code>C1 = True
C1 = C1 ^ (val1 &gt;= val2)
assert not C1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I still not sure if this is what you want, but if all you need is 2 random numbers x, y such that x&gt;=y all you need to do if force that condition, like this</p>
<pre><code>from random import randint

def myRandomTuple(ini,fin):
    x = randint(ini,fin)
    y = randint(ini,fin)
    return (max(x,y),min(x,y))
</code></pre>
<p>as we only want 2 numbers we can use the build-in function <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow"><code>max</code></a> and <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow"><code>min</code></a> to choose the order of those numbers</p>
<p>example of use:</p>
<pre><code>&gt;&gt;&gt; myRandomTuple(1,10)
(10, 2)
&gt;&gt;&gt; myRandomTuple(1,10)
(9, 3)
&gt;&gt;&gt; myRandomTuple(1,10)
(7, 1)
&gt;&gt;&gt; myRandomTuple(1,10)
(4, 4)
&gt;&gt;&gt; myRandomTuple(1,10)
(10, 3)
&gt;&gt;&gt; myRandomTuple(1,10)
(8, 1)
&gt;&gt;&gt; x,y = myRandomTuple(1,10)
&gt;&gt;&gt; x
10
&gt;&gt;&gt; y
6
</code></pre>
<p>this can be extended to any arbitrary size by returning a list instead, and if we want that that list be ordered as well we can use the build-in <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a> function</p>
<pre><code>def myRandomList(ini,fin,size,descending=True):
    return sorted( (randint(ini,fin) for _ in range(size)), reverse=descending)
</code></pre>
<p>here I use a <a href="https://docs.python.org/3/howto/functional.html?highlight=generator%20expression#generator-expressions-and-list-comprehensions" rel="nofollow">generator expression</a>, to well, generate as many number as asked for, pass that to <code>sorted</code> and let it do its job and with <code>descending</code> I control if it is descending order or not</p>
<p>example</p>
<pre><code>&gt;&gt;&gt; myRandomList(1,10,5)
[6, 6, 5, 4, 2]
&gt;&gt;&gt;
</code></pre>
<p>if the order is irrelevant, then a simple <a href="https://docs.python.org/3/howto/functional.html?highlight=generator%20expression#generator-expressions-and-list-comprehensions" rel="nofollow">list comprehension</a> is enough</p>
<pre><code>def myRandomList(ini,fin,size):
    return [ randint(ini,fin) for _ in range(size) ]
</code></pre>
<p>example</p>
<pre><code>&gt;&gt;&gt; myRandomList(1,10,5)
[6, 7, 5, 8, 1]
&gt;&gt;&gt;   
</code></pre>
</div>
<span class="comment-copy">Could you use an <a href="https://docs.python.org/2/reference/simple_stmts.html#the-assert-statement" rel="nofollow noreferrer"><code>assert</code></a> statement? e.g. <code>assert (C1 &amp;&amp; (val1 &gt;= val2))</code>. You can also follow this <a href="http://stackoverflow.com/questions/5142418/what-is-the-use-of-assert-in-python">stackoverflow post</a> for more details.</span>
<span class="comment-copy">@AKS assert is causing only one way. val2 i.e if i'm doing !(C1 &amp;&amp; (val1 &gt;= val2))) its coming fine. but using this val1 &gt;= val2 causing violation.</span>
<span class="comment-copy">Any specific reasons for downvoting ?</span>
<span class="comment-copy">why not just use assert val1 &gt;= val2?</span>
<span class="comment-copy">Are you asking for an <code>assert</code> function that works in that it tries every combination of values and asserts that it'll always be True? So like <code>x</code> and <code>y</code> would be any possible numbers and you're looking for an assert where <code>special_assert(x&gt;y)</code> would be true if x and y was any number ever?</span>
<span class="comment-copy">Phill i have to make sure that C1 is never Violated rather than C1 comes out to be False. That means i have make sure that val1 &gt;= val2  is the case.</span>
<span class="comment-copy">It appears your issue is not with how to use <code>assert</code>, but with why <code>val1</code> is less than <code>val2</code>, in which case more information is required.</span>
<span class="comment-copy">Okay I understood Now. Its working not like __CPROVER_assert there is no search for all thing by default. So how to check satisfiability in Python ? that there exist an interpretation that satisfies that there exists a value for val1 , val2 such that val1 &gt;= val2 .</span>
<span class="comment-copy">my apologies for not being completely clear.</span>
