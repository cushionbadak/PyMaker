<div class="post-text" itemprop="text">
<p>I am using regular expressions to parse through a log file to extract the different fields to basically make a dataset. The regular expression works fine:</p>
<pre><code>import re

example_line = '65.55.106.233 - - [03/Sep/2009:16:31:55 -0800] "GET /gallery/main.php?g2_view=core.DownloadItem&amp;g2_itemId=27492&amp;g2_serialNumber=2 HTTP/1.1" 200 4457 "-" "Mozilla/4.0"'



print re.match(regex, example_line).groups()
</code></pre>
<p>output: </p>
<pre><code>('65.55.106.233', '-', '-', '03/Sep/2009:16:31:55 -0800', 'GET /gallery/main.php?g2_view=core.DownloadItem&amp;g2_itemId=27492&amp;g2_serialNumber=2 HTTP/1.1', '200', '4457', '-', 'Mozilla/4.0')
</code></pre>
<p>However I was wondering if there was a way to group the matches to a single line separated by a single space instead of grouping the matches in a list. </p>
<p>So instead of the output shown above I would like to print this instead:</p>
<pre><code>65.55.106.233 - - 03/Sep/2009:16:31:55 -0800 GET /gallery/main.php?g2_view=core.DownloadItem&amp;g2_itemId=27492&amp;g2_serialNumber=2 HTTP/1.1 200 4457 - Mozilla/4.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print ' '.join(re.match(regex, example_line).groups())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>Python &lt; 3.0</h2>
</blockquote>
<p>I think the <strong><em>cleanest</em></strong> and most pythonic way to do this with pre-3.0 python is:  </p>
<pre><code>print ' '.join(map(str, re.match(regex, example_line).groups()))
</code></pre>
<p>To clean it up a little, you could save the re.match result in a variable:</p>
<pre><code>result = re.match(regex, example_line).groups()
print ' '.join(map(str, result))
</code></pre>
<p><strong>Example:</strong> </p>
<pre><code>&gt;&gt;&gt; result = [7, 8, 9, '10', 11, '12']
&gt;&gt;&gt; print ' '.join(map(str, result))
7 8 9 10 11 12
</code></pre>
<hr/>
<blockquote>
<h2>Python &gt;= 3.0</h2>
</blockquote>
<p>Of course, there's always a <em>nicer</em> option with Python 3.0+. If using Python 3 isn't an option, you may be able to use <code>from __future__ import print_function</code> in your Python 2.x code.</p>
<p>This is the nice Python 3 way of printing a list on one line without the commas:</p>
<pre><code>print( *re.match(regex, example_line).groups() )
</code></pre>
<p>And of course, saving the re.match in a variable makes the code very clean and understandable:</p>
<pre><code>result = re.match(regex, example_line).groups()
print( *result )
</code></pre>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt; result = [7, 8, 9, '10', 11, '12']
&gt;&gt;&gt; print(*result)
7 8 9 10 11 12
</code></pre>
</div>
<span class="comment-copy">Is python 3 an option?</span>
<span class="comment-copy">Why did you edit the question to remove the regex? It's not central to your question, but a rather odd change to make.</span>
<span class="comment-copy"><code>print ' '.join(re.match(regex, example_line).groups())</code></span>
<span class="comment-copy">@Tim007 - I meant <code>' '</code>. I thought I typed <code>' '</code>. Thanks for noticing.</span>
<span class="comment-copy">Maybe show how to add spaces in Py3k?</span>
<span class="comment-copy">@tripleee Py3k adds the spaces automatically.</span>
<span class="comment-copy">Yeah.  If you want a different separator in Python 3 <a href="https://docs.python.org/3/library/functions.html?highlight=print#print" rel="nofollow noreferrer"><code>print()</code></a>, the <code>sep=','</code> optional keyword does that.</span>
