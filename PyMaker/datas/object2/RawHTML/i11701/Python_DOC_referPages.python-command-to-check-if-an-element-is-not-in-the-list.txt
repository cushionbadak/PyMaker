<div class="post-text" itemprop="text">
<p>I have a list of tuples in <a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="noreferrer">Python</a>, and I have a conditional where I want to take the branch ONLY if the tuple is not in the list (if it is in the list, then I don't want to take the if branch)</p>
<pre><code>if curr_x -1 &gt; 0 and (curr_x-1 , curr_y) not in myList: 

    # Do Something
</code></pre>
<p>This is not really working for me though. What have I done wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The bug is probably somewhere else in your code, because it should work fine:</p>
<pre><code>&gt;&gt;&gt; 3 not in [2, 3, 4]
False
&gt;&gt;&gt; 3 not in [4, 5, 6]
True
</code></pre>
<p>Or with tuples:</p>
<pre><code>&gt;&gt;&gt; (2, 3) not in [(2, 3), (5, 6), (9, 1)]
False
&gt;&gt;&gt; (2, 3) not in [(2, 7), (7, 3), "hi"]
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h3>How do I check if something is (not) in a list in Python?</h3>
</blockquote>
<p>The cheapest and most readable solution is using the <a href="https://docs.python.org/3/reference/expressions.html#membership-test-operations" rel="nofollow noreferrer"><code>in</code></a> operator (or in your specific case, <code>not in</code>). As mentioned in the documentation,</p>
<blockquote>
<p>The operators <code>in</code> and <code>not in</code> test for membership. <code>x in s</code> evaluates to
  <code>True</code> if <code>x</code> is a member of <code>s</code>, and <code>False</code> otherwise. <code>x not in s</code> returns
  the negation of <code>x in s</code>.</p>
</blockquote>
<p>Additionally,</p>
<blockquote>
<p>The operator <code>not in</code> is defined to have the inverse true value of <code>in</code>.</p>
</blockquote>
<p><code>y not in x</code> is logically the same as <code>not y in x</code>.</p>
<p>Here are a few examples:</p>
<pre><code>'a' in [1, 2, 3]
# False

'c' in ['a', 'b', 'c']
# True

'a' not in [1, 2, 3]
# True

'c' not in ['a', 'b', 'c']
# False
</code></pre>
<p>This also works with tuples, since tuples are hashable (as a consequence of the fact that they are also immutable):</p>
<pre><code>(1, 2) in [(3, 4), (1, 2)]
#  True
</code></pre>
<p>If the object on the RHS defines a <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__()</code></a> method, <code>in</code> will internally call it, as noted in the last paragraph of the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=__contains__#comparisons" rel="nofollow noreferrer">Comparisons</a> section of the docs.</p>
<blockquote>
<p>... <code>in</code> and <code>not in</code>,
  are supported by types that are iterable or implement the
  <code>__contains__()</code> method. For example, you could (but shouldn't) do this:</p>
</blockquote>
<pre><code>[3, 2, 1].__contains__(1)
# True
</code></pre>
<p><code>in</code> short-circuits, so if your element is at the start of the list, <code>in</code> evaluates faster:</p>
<pre><code>lst = list(range(10001))
%timeit 1 in lst
%timeit 10000 in lst  # Expected to take longer time.

68.9 ns ± 0.613 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
178 µs ± 5.01 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<p>If you want to do more than just check whether an item is in a list, there are options:</p>
<ul>
<li><code>list.index</code> can be used to retrieve the index of an item. If that element does not exist, a <code>ValueError</code> is raised.</li>
<li><code>list.count</code> can be used if you want to count the occurrences.</li>
</ul>
<hr/>
<h3>The XY Problem: Have you considered <code>set</code>s?</h3>
<p>Ask yourself these questions:</p>
<ul>
<li>do you need to check whether an item is in a list more than once?</li>
<li>Is this check done inside a loop, or a function called repeatedly?</li>
<li>Are the items you're storing on your list hashable? IOW, can you call <code>hash</code> on them?</li>
</ul>
<p>If you answered "yes" to these questions, you should be using a <code>set</code> instead. An <code>in</code> membership test on <code>list</code>s is O(n) time complexity. This means that python has to do a linear scan of your list, visiting each element and comparing it against the search item. If you're doing this repeatedly, or if the lists are large, this operation will incur an overhead. </p>
<p><code>set</code> objects, on the other hand, hash their values for constant time membership check. The check is also done using <code>in</code>:</p>
<pre><code>1 in {1, 2, 3} 
# True

'a' not in {'a', 'b', 'c'}
# False

(1, 2) in {('a', 'c'), (1, 2)}
# True
</code></pre>
<p>If you're unfortunate enough that the element you're searching/not searching for is at the end of your list, python will have scanned the list upto the end. This is evident from the timings below:</p>
<pre><code>l = list(range(100001))
s = set(l)

%timeit 100000 in l
%timeit 100000 in s

2.58 ms ± 58.9 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
101 ns ± 9.53 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
</code></pre>
<p>As a reminder, this is a suitable option as long as the elements you're storing and looking up are hashable. IOW, they would either have to be immutable types, or objects that implement <code>__hash__</code>.</p>
</div>
<span class="comment-copy">Don't use <code>list</code> as a variable name. What is the error output here?</span>
<span class="comment-copy">Note that <code>3 -1 &gt; 0 and (4-1 , 5) not in []</code> ⤇ <code>True</code> therefore the error is not one of operator precedence.</span>
<span class="comment-copy">What do you mean by "not really working for me"? What do you expect to happen? What actually happens? What exact list contents trigger the problem?</span>
<span class="comment-copy">Why not try <code>myList.count((curr_x, curr_y))</code>, if <code>(curr_x, curr_y)</code> is not in <code>myList</code>, the result will be <code>0</code></span>
<span class="comment-copy"><a href="https://stackoverflow.com/a/54437309/4909087">Have you considered using sets instead?</a></span>
<span class="comment-copy">@Zack: if you didn't know about this, you could just do <code>if not ELEMENT in COLLECTION:</code></span>
<span class="comment-copy">@ninjagecko: depending on the container type that could be less efficient, or even incorrect. See for example <a href="http://en.wikipedia.org/wiki/Bloom_filter" rel="nofollow noreferrer">bloom filters</a>.</span>
<span class="comment-copy">@nightcracker: Indeed, I actually was implying <code>COLLECTION</code> as in lists and tuples, and sets and frozensets. Thank you for pointing out that some things like <code>ELEMENT in DICTIONARY</code> imply <code>in DICTIONARY.keys()</code>, etc.</span>
<span class="comment-copy">@nightcracker That makes no sense as <code>A not in B</code> is reduced to doing <code>not B.__contains__(A)</code> which is the same as what <code>not A in B</code> is reduced to which is <code>not B.__contains__(A)</code>.</span>
<span class="comment-copy">@std''OrgnlDave The only way that could happen is if <code>not</code> had higher precedence than <code>in</code> which it doesn't. Consider the result of <code>ast.dump(ast.parse("not A in B").body[0])</code> which results in <code>"Expr(value=UnaryOp(op=Not(), operand=Compare(left=Name(id='A', ctx=Load()), ops=[In()], comparators=[Name(id='B', ctx=Load())])))"</code> If <code>not</code> grouped tightly to A, one would have expected the result to be <code>"Expr(value=Compare(left=UnaryOp(op=Not(), operand=Name(id='A', ctx=Load())), ops=[In()], comparators=[Name(id='B', ctx=Load())]))"</code> which is the parse for <code>"(not A) in B"</code>.</span>
<span class="comment-copy">Sets are not always an option (for example, when having a list of mutable items). For large collections: building the set for a lookup is <i>O(n)</i> time anyway and can be doubling your memory usage. If you don't already have a lookup around, it's not always the best choice to make/maintain one.</span>
<span class="comment-copy">@wim You're right, thanks. Made the necessary edits to make that obvious.</span>
