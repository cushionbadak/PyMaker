<div class="post-text" itemprop="text">
<p>In python, when the user invokes Ctrl-C, what happens? Do I have the possibility to save the program state?</p>
<p>What about context-managers? Does the <code>__exit__()</code> section get executed?</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically, a <code>KeyboardInterrupt</code> exception is raised inside the main thread. So yes, you can handle it by catching it in try/except block and <code>__exit__()</code> sections are executed</p>
<p><a href="https://docs.python.org/2/library/exceptions.html#exceptions.KeyboardInterrupt" rel="noreferrer">https://docs.python.org/2/library/exceptions.html#exceptions.KeyboardInterrupt</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is what the <a href="https://docs.python.org/2/library/atexit.html" rel="nofollow">atexit</a> module is for. You can register multiple exit handlers. You can see it at work by running this program and observing that a message is displayed:</p>
<pre><code>import atexit

@atexit.register
def exithandler():
    print("Exit trapped!")

if __name__ == '__main__':
    while True:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'll just mention <a href="https://docs.python.org/3/library/signal.html" rel="nofollow">signal</a> which is also a built in that can handle <kbd>Ctrl</kbd>+<kbd>C</kbd> and many more signals such as <code>SIGHUP</code> etc.</p>
<pre><code>import signal

def signal_handler(signal, frame):
    # Do work
    # Thread cleanup
    # pickle program state
    # remove(pidfile) # as an example
    exit(0)

signal.signal(signal.SIGINT, signal_handler)
</code></pre>
<p>This is just a example of a broad framework that can handle numerous signals.<br/>
<a href="https://en.wikipedia.org/wiki/Unix_signal#Sending_signals" rel="nofollow">Here's a list</a> of some of the signals you could catch.</p>
</div>
