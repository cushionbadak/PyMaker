<div class="post-text" itemprop="text">
<p>I've got this simple code here running for project Euler question 31.</p>
<p>The Euler Q is not required; I just want to know, why my list values are getting mutated, i.e. this is printing a list of many lists of [2.0,2.0,2.0,2.0,2.0].</p>
<pre><code>coins = [0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1.0, 2.0]


perms = []
def check(c):
    if sum(c) == 2:
        print c, "lol", sum(c)
        perms.append(c)
    return perms

c = [0] * 5
for c[0] in coins:
    for c[1] in coins:
        for c[2] in coins:
            for c[3] in coins:
                for c[4] in coins:
                    check(c)

print perms
</code></pre>
<p>This doesn't work for some reason and the output is</p>
<pre><code>[[2.0, 2.0, 2.0, 2.0, 2.0], [2.0, 2.0, 2.0, 2.0, 2.0]...]

perms = []
for c1 in coins:
    for c2 in coins:
        for c3 in coins:
            for c4 in coins:
                for c5 in coins:
                    if c1+c2+c3+c4+c5 == 2:
                        print c1,c2,c3,c4,c5
                        perms.append([c1,c2,c3,c4,c5])


print perms
</code></pre>
<p>However, this one works, and the output is</p>
<pre><code>[[0.1, 0.2, 0.2, 0.5, 1.0], [0.1, 0.2, 0.2, 1.0, 0.5], [0.1, 0.2, 0.5, 0.2, 1.0],[0.1, 0.2, 0.5, 1.0, 0.2], [0.1, 0.2, 1.0, 0.2, 0.5], [0.1, 0.2, 1.0, 0.5, 0.2],[0.1, 0.5, 0.2, 0.2, 1.0], [0.1, 0.5, 0.2, 1.0, 0.2]...]
</code></pre>
<p>What is the difference between the two?</p>
<p>And also, how can I shorten my code, maybe a recursive function?
So that instead of doing c1 in coins, c2 in coins and so on, I just have one or two loops to do the same job.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>c</code> still gets modified <em>after</em> it has been added to <code>perms</code>. You can instead pass a copy to <code>check</code>, then it seems to work.</p>
<pre><code>c = [0] * 5
for c[0] in coins:
    for c[1] in coins:
        for c[2] in coins:
            for c[3] in coins:
                for c[4] in coins:
                    check(c[:]) # c[:] creates a copy of c
</code></pre>
<p>BTW, I didn't even know <code>for c[1] in coins</code> is valid Python syntax...</p>
<p>Also, you might want to have a look at <code>itertools</code>, particularly <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>product</code></a>, <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow"><code>permutations</code></a>, <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>combinations</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow"><code>combinations_with_replacement</code></a>.</p>
<hr/>
<p>A recursive function could look roughly like this:</p>
<pre><code>def comb(current, target):
    if sum(current) == target:
        yield current
    elif sum(current) &lt; target:
        for coin in coins:
            for solution in comb(current + [coin], target):
                yield solution
</code></pre>
<p>However, this, too, seems to be too slow for getting all the combinations of coins.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/users/1639625/tobias-k">@tobias_k</a> indicates, you can use in this case <code>combinations_with_replacement</code> with <code>permutations</code> from <code>itertools</code>: </p>
<pre><code>coins = [0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1.0, 2.0]
perms = set() # invariant no repeated elements, 

# return elements with length=5 repeat
combinations = combinations_with_replacement(coins,5)

for comb in combinations:
    for c1,c2,c3,c4,c5 in permutations(comb):
        if sum([c1,c2,c3,c4,c5]) == 2:
            perms.add((c1,c2,c3,c4,c5))
</code></pre>
<p><strong>NOTE:</strong> If you use a list in this case should be eliminated repeated or check in another way.</p>
</div>
<span class="comment-copy"><i>"maybe a recursive function?"</i> Yep, that would be better here.</span>
<span class="comment-copy">Thanks. And, any ideas on how to implement a recursive function to solve this same problem? I'm terrible at recursion tbh..</span>
<span class="comment-copy">Gah, generators + recursion really makes me go crazy D: Hopefully I'll understand this soon, but thanks though!</span>
