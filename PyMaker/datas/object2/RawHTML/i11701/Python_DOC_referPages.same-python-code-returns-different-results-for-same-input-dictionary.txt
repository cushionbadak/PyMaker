<div class="post-text" itemprop="text">
<p>I have a dictionary named dico containing these information:</p>
<pre><code>('libc6-i386', '1.06')  :  lib32tinfo5
('lib32c-dev', '')  :  lib32tinfo-dev
('libc6-x32', '2.16')  :  libx32tinfo5
('libc6-i386', '2.4')  :  lib32ncursesw5
('libc-dev', '')  :  libncursesw5-dev
('libncurses5-dev', '5.9+20150516-2ubuntu1')  :  libncurses5-dbg
('libc6-dev', '')  :  libncursesw5-dev
('libc6-dev-x32', '')  :  libx32tinfo-dev
('libc6-i386', '2.16')  :  lib32tinfo5
('libncursesw5-dev', '5.9+20150516-2ubuntu1')  :  libncursesw5-dbg
</code></pre>
<p>When I call comparePackages(dico) I keep getting different results for the same input such as :</p>
<pre><code>('lib32c-dev', 'Not Specified') lib32tinfo-dev
('libc6-dev', 'Not Specified') libncursesw5-dev
('libc-dev', 'Not Specified') libncursesw5-dev
('libc6-i386', '2.4') lib32ncursesw5
('libc6-x32', '2.16') libx32tinfo5
('libncurses5-dev', '5.9+20150516-2ubuntu1') libncurses5-dbg
('libc6-dev-x32', 'Not Specified') libx32tinfo-dev
('libc6-i386', '2.16') lib32tinfo5
('libncursesw5-dev', '5.9+20150516-2ubuntu1') libncursesw5-dbg
</code></pre>
<p>or</p>
<pre><code>('libncurses5-dev', '5.9+20150516-2ubuntu1') libncurses5-dbg
('libncursesw5-dev', '5.9+20150516-2ubuntu1') libncursesw5-dbg
('libc6-i386', '2.16') lib32tinfo5
('lib32c-dev', 'Not Specified') lib32tinfo-dev
('libc6-x32', '2.16') libx32tinfo5
('libc6-dev', 'Not Specified') libncursesw5-dev
('libc6-i386', '2.4') lib32ncursesw5
('libc-dev', 'Not Specified') libncursesw5-dev
</code></pre>
<p>or</p>
<pre><code>('libc6-i386', '2.4') lib32ncursesw5
('libc-dev', 'Not Specified') libncursesw5-dev
('libc6-i386', '1.06') lib32tinfo5
('lib32c-dev', 'Not Specified') lib32tinfo-dev
('libncurses5-dev', '5.9+20150516-2ubuntu1') libncurses5-dbg
('libncursesw5-dev', '5.9+20150516-2ubuntu1') libncursesw5-dbg
('libc6-i386', '2.16') lib32tinfo5
('libc6-dev', 'Not Specified') libncursesw5-dev
('libc6-x32', '2.16') libx32tinfo5
</code></pre>
<p>Here is my comparePackages function</p>
<pre><code>import apt_pkg
apt_pkg.init_system()

"""
    Function that compares package versions and keeps the most recent one.
    @param : dictionary
        package_dictionary :
            keys : tuple
            values : string
"""

def comparePackages(package_dictionary):
    if(type(package_dictionary) is dict):
        list_keys = list(package_dictionary.keys()) #list of tuples
        list_values = list(package_dictionary.values()) #list of strings
        #list_keys, list_values = list(package_dictionary.items())
        dic = {}

        for x,y in zip(range(0,len(list_keys)-1),range(0,len(list_values)-1)):
            #if 2 tuples have the same package name
            if(list_keys[x][0] == list_keys[x+1][0]):
                print("Start comparing")

                #second element of the tuple x
                a = str(list_keys[x][1])

                #second element of the tuple x+1
                b = str(list_keys[x+1][1])

                #compare versions
                vc = apt_pkg.version_compare(a,b)

                if vc &gt; 0:
                    #a&gt;b
                    print("a&gt;b")
                    max_version = a

                elif vc == 0:
                    #a==b
                    print("a==b")
                    max_version = a 

                elif vc &lt; 0:
                    #a&lt;b
                    print("a&lt;b")
                    max_version = b

                if(max_version is '') :
                    max_version = 'Not Specified'
                #create a dict that for each package name has the most recent version
                dic[(list_keys[x][0],max_version)] = list_values[y]

            else:
                version = list_keys[x][1]
                if(version is '') :
                    version = 'Not Specified'
                dic[(list_keys[x][0],version)] = list_values[y]

        for k,v in dic.items():
            print(k,v)

    else:
        raise TypeError("Argument of comparePackages must be a dictionary.")
</code></pre>
<p>Expected output :</p>
<pre><code>('lib32c-dev', 'Not Specified')  :  lib32tinfo-dev
('libc6-x32', '2.16')  :  libx32tinfo5
('libc-dev', 'Not Specified')  :  libncursesw5-dev
('libncurses5-dev', '5.9+20150516-2ubuntu1')  :  libncurses5-dbg
('libc6-dev', 'Not Specified')  :  libncursesw5-dev
('libc6-dev-x32', 'Not Specified')  :  libx32tinfo-dev
('libc6-i386', '2.16')  :  lib32tinfo5 (or lib32ncursesw5)
('libncursesw5-dev', '5.9+20150516-2ubuntu1')  :  libncursesw5-dbg
</code></pre>
<p>I would like to know why and how to correct it. At the end all I need is a dictionary that for each package present in the tuple has the latest version. Loosing 1 of 2 values for a same package isn't a problem. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not a direct answer to your problem BUT you need to fix that problem in order to get a working and reproductible behavior. (and i will not be shocked if your bug goes away after this fix)</p>
<p>In your code:</p>
<pre><code>for key, value in zip(dic.keys(), dic.values())
</code></pre>
<p>And:</p>
<pre><code>list_keys = list(package_dictionary.keys()) #list of tuples
list_values = list(package_dictionary.values()) #list of strings
</code></pre>
<p>This assume that keys and values are sorted in the same order. That's not necessarily true, and that's lead to differences of execution based on the returned order.
You should use <code>items</code> instead:</p>
<pre><code>for key, value in dict.item())
</code></pre>
<p>And:</p>
<pre><code>list_keys, list_values = list(package_dictionary.items())
</code></pre>
<p>So:</p>
<pre><code>for x,y in zip(range(0,len(list_keys)-1),range(0,len(list_values)-1))
</code></pre>
<p>Become:</p>
<pre><code>for idx, (x, y) in enumerate(zip(list_keys, list_values)):
</code></pre>
<p>Or, more pythonic:</p>
<pre><code>for k, v in package_dictionary.items():
</code></pre>
<p>Another solution could be to use an OrderedDict.</p>
</div>
<div class="post-text" itemprop="text">
<p>I got the answer</p>
<p>"""
    Function that compares package versions and keeps the most recent one.
    @param : dictionary
        package_dictionary :
            keys : tuple
            values : string
"""</p>
<pre><code>import apt_pkg
apt_pkg.init_system()

def compareVersion(x,l):
    if(type(l) is list):
        max_version = l[0]
        for e in range(1, len(l)-1):
            #vc = resultat de compare versions
            vc = apt_pkg.version_compare(l[e],l[e+1])

            if ((vc &gt; 0) and (apt_pkg.version_compare(l[e],max_version)) &gt; 0):  
                #a&gt;b
                max_version = l[e]

            elif ((vc == 0) and (apt_pkg.version_compare(l[e],max_version)) &gt; 0):
                #a==b
                max_version = l[e] 

            elif ((vc &lt; 0) and (apt_pkg.version_compare(max_version,l[e+1])) &lt; 0):
                #a&lt;b
                max_version = l[e+1]

        if(max_version is '') :
            max_version = 'Not Specified'
                #create a dict that for each package name has the most recent version
        #print(x,l,max_version)
        return max_version
    else:
        raise TypeError("Argument must be a list.")


def comparePackages(package_dictionary):
    if(type(package_dictionary) is dict):
        list_keys = list(package_dictionary.keys()) #list of tuples
        list_values = list(package_dictionary.values()) #list of strings

        dic = {}

        for x in list_keys: #for each element in the list
            l = []
            for h in list_keys:
                if x[0] == h[0]: #if nom package x == nom package h
                    a = str(x[1]) #a = version du package x
                    b = str(h[1]) #b = version du package y
                    if(l.count(a) == 0):
                        l.append(a)
                    if(l.count(b) == 0):
                        l.append(b)
            max_version = compareVersion(x,l)   
            dic[(x[0],max_version)] = list_values[list_keys.index(x)]

        return dic    
    else:
        raise TypeError("Argument of comparePackages must be a dictionary.")    
</code></pre>
</div>
<span class="comment-copy">You need to show us <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> - smallest dict literal that conforms your data format, expected result for this data and output currently returned by your code.</span>
<span class="comment-copy">Dictionaries are <b>unordered</b>, and each run of the Python interpreter a new random hash seed is produced to prevent a nasty class of DOS attacks (where an attacker easily overloads your Python process). As such comparing keys to a 'next' key won't work.</span>
<span class="comment-copy">@MartijnPieters - <i>... a new random hash seed is produced to prevent a nasty class of DOS attacks ...</i> I would like to understand this better. Could provide some resource link which explains this in detail?</span>
<span class="comment-copy">@JasonEstibeiro: See the boxed note in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">documentation for <code>object.__hash__()</code></a>.</span>
<span class="comment-copy">I noticed that I can never compare two keys, that's why I created a list of the keys and a list of the values. I must compare the version of a package that exists more than once in the dictionary keys.</span>
<span class="comment-copy">Thank you for your answer. I did what you suggested but when I did list_keys, list_values = list(package_dictionary.items()) I got a ValueError:too many values to unpack (expected 2).</span>
<span class="comment-copy">Keys and values <b>are</b> sorted in the same order, provided there are no edits to the dictionary. However, they are not going to be in the same order between runs of the interpreter.</span>
<span class="comment-copy">@Marc: do update your <code>for</code> loops as described in this answer. This answer will not, however, solve your issue; it <b>may</b> be that an <code>OrderedDict</code> can help you, provided you pass in entries into that in the same order each time.</span>
<span class="comment-copy">well actually I did a test to verify that the entries are ordered and they were. x and y have both the same value. But I did update my code with everything that @aluriak have suggested.</span>
<span class="comment-copy">for x,y in zip(range(0,len(list_keys)-1),range(0,len(list_values)-1)) must stay because I need access to the typle contents and to compare it with another tuple in the list</span>
