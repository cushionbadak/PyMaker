<div class="post-text" itemprop="text">
<p>I need to learn Python to do some data manipulation. When I read the documents, the documents out there are written in such a great skill so that I get very frustrated with some hidden message. For instance:</p>
<ol>
<li><p>in official Python Documents: 
<a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow"><code>random.sample(population, k)</code></a></p>
<p>What is population? What type of it? According to the following, it seems that it is a list? So, is it the only valid type that the functions receive?</p></li>
<li><p>in official Numpy Documents: 
<a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.random_sample.html#numpy.random.random_sample" rel="nofollow"><code>numpy.random.random_sample</code></a></p>
<p>The title is <code>numpy.random.random_sample(size=None)</code>, and the following paragraph said that </p>
<blockquote>
<p>size: int or tuple of ints, optional</p>
<p>Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn.</p>
</blockquote>
<p>What does it mean? So, there are actually 2 parameters, 1st one is size, and the 2nd one is the shape and it is optional? So if I want to pass in 2 parameters, should I write <code>random.random_sample(5,[m,n,k])</code> or <code>random.random_sample(5, m, n k)</code>?</p></li>
</ol>
<p>These documents are very brief and the author seems very shy to demo the usage of the library. It seems that they always try to hide something from us. I wonder if there are some Python customs that I should learn to understand all these magic? </p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>The type of the population being sampled is, roughly, "iterable". I assume the underlying implementation is doing reservoir sampling, which requires only that the data can be passed through once. You can pass in a tuple if you like.</p></li>
<li><p>The size parameter may be either an integer or a "shape" (3-tuple) conforming to the docs. The three components of the shape will be multiplied together to give the size. Thus, the function accepts only a single argument.</p></li>
</ol>
<p>Python is not statically typed, so there is no fixed type that a particular parameter "must" have, and the called function is free to treat different inputs differently.</p>
<p>There are two examples of calling the function present on the numpy documentation page you linked.</p>
<ol start="3">
<li>I don't see anything wrong with using a simple loop and a call to a random number generator. There's probably a library function, but that would only make the difference between two easy lines of your code and one. No big deal.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Consult the tutorial in the docs, these are basic things you have to be clear about before going further. </p>
<p>Q1. Get familiar with <strong>duck typing</strong>. It's one of the core things in dynamically typed languages like python, ruby etc. It's a duck as long as it quacks. So here the parameter can be <strong>any</strong> sequence or set.</p>
<p>Q2. As long as the receiving function can handle it, it's ok. So if you pass <code>int</code> it can handle it and it can also handle a <code>tuple</code>. So as far as semantics go, this is great.</p>
</div>
<span class="comment-copy">Python is dynamically typed, so there are several types (e.g. <code>list</code>, <code>tuple</code>, ...) that can be a <code>population</code> - as the docs say, <i>"sequence or set"</i>. And in your second example, you want <code>((m, n, k))</code>, otherwise you're clearly passing more than the single documented parameter; it's <i>"int <b>or</b> tuple of ints"</i>. I think this is mainly a reading comprehension problem, rather than hidden rules or magic.</span>
<span class="comment-copy">What jon said. Generally, good Python programmers write functions that will accept any type that makes sense. So <code>random.sample</code> will accept for <i>population</i> any sequence type, or indeed any iterable that has a well-defined length. So you can pass it a list, tuple, or even a set. Or your own custom object that can behave like an iterator with a well-defined length.</span>
<span class="comment-copy">Please don't get frustrated. Get Jupyter/IPython notebook instead! Use the internal help and try out things.</span>
<span class="comment-copy">FWIW, the iterable passed to <code>random.sample</code> needs to have a length, so you can't pass it a generator, or it raises <code>TypeError: object of type 'generator' has no len()</code>.</span>
<span class="comment-copy">The second one isn't duck typing; they're two different aquatic birds, it's more like polymorphism.</span>
<span class="comment-copy">@jonrsharpe Yeah. That's why I didn't copy/paste the first line."receiving function thinks it's a duck.." .Editing it. Thanks.</span>
<span class="comment-copy">@jonrsharpe I would call it bird typing or something.</span>
<span class="comment-copy">BTW, you should check out the <a href="http://chat.stackoverflow.com/rooms/6/python">SO Python chat room</a> some time...</span>
<span class="comment-copy">@CPanda <i>"waterfowl typing"</i></span>
