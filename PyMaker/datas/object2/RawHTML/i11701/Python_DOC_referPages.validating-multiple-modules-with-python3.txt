<div class="post-text" itemprop="text">
<p>I'm trying to validate multiple functions from separate files all with the same names in Python 3.</p>
<p>So, consider I have a directory of directories: <code>dir1</code> which has <code>s1</code>, <code>s2</code>, <code>s3</code>, ..., <code>sn</code> which all are directories and each contain a file called <code>submission.py</code>. I do not know what <code>s1</code> through <code>sn</code> are until run time.</p>
<p>In each <code>submission.py</code>, there's functions <code>f1</code> through <code>fm</code>. </p>
<p>I would like to create a script that executes <code>f1</code> through <code>fm</code> and prints their output for each <code>s1</code> through <code>sn</code>'s <code>submission.py</code> file.</p>
<p>I would like to think that I could import each <code>submission.py</code> file in each directory, but the problem is that each file has the same name. Also, <code>s1</code> through <code>sn</code> is not known until run time. Obviously, I can determine <code>s1</code> through <code>sn</code> using the <code>os.listdir()</code> function. </p>
<p>Any idea on how I can call <code>f1</code> from two different files after getting the names of the directories through <code>os.listdir()</code> and <code>os.path.isdir()</code>? </p>
<p>Another poster suggested this for 2.7:</p>
<blockquote>
<p>This is possible using <code>imp</code>.</p>
</blockquote>
<pre><code>import os, imp
dirs = os.listdir('.')
modules = {d: imp.load_source(d, d + '/submission.py') for d in dirs}
</code></pre>
<p>Then, to call a function <code>f3</code> in the <code>submission.py</code> module contained in subdirectory <code>s2</code> for example, it would be:
<code>modules['s2'].f3()</code>.</p>
<p>This would be a perfect solution. Can anyone suggest a similar solution in Python 3.4 or 3.5?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>importlib</code> doesn't support importing given a full pathname, but does support importing from packages.<br/>
You can make each sub-sirectory, <code>s1</code>, <code>s2</code> etc., a package by adding a blank <code>__init__.py</code> in the directory, and then use importlib.</p>
<p>So, in each directory, you have <code>__init__.py</code> and <code>submission.py</code></p>
<p>Then the following example code should work:</p>
<pre><code>import importlib
for pkg in ('s1','s2'):
    globals()['submission'] = importlib.import_module(pkg+'.submission',pkg)
    submission.f1()
    submission.f2()
    # etc...
</code></pre>
<p>Note that I'm on Python 2, which only has <code>importlib.import_module()</code>, Python 3 has more functionality, but I would expect the above to still work.</p>
<p>Not also that the directory which contains <code>s1</code> etc. must reside in your PYTHONPATH.</p>
</div>
<span class="comment-copy">Look at <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a></span>
<span class="comment-copy">Going to look sat that. Can you suggest how I would use it?</span>
<span class="comment-copy">The documentation I linked to its quite extensive. Why not just try it and see how you get on? The part about the modules all having the same name doesn't matter if they are being imported sequentially. Each subsequent import will simply overwrite the previous one in the Python Namespace.</span>
