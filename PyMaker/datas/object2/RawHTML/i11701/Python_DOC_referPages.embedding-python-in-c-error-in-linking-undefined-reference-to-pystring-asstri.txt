<div class="post-text" itemprop="text">
<p>I am trying to embed a python program inside a C program. My OS is Ubuntu 14.04</p>
<p>I try to embed python 2.7 and python 3.4 interpreter in the same C code base (as separate applications). The compilation and linking works when embedding python 2.7 but not for the python 3.4. It fails during the linker stage.</p>
<p>Here is my C code (just an example not real code)</p>
<p><strong>simple.c</strong></p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;Python.h&gt;

int main(int argc, char *argv[])
{
    PyObject *pName, *pModule, *pFunc, *pValue;
    char module[] = "get_version";
    char func[] = "get_version";
    char module_path[] = ".";

    Py_Initialize();
    PyObject *sys_path = PySys_GetObject("path");
    PyList_Append(sys_path, PyUnicode_FromString(module_path));

    pName = PyUnicode_FromString(module);
    pModule = PyImport_Import(pName);
    Py_DECREF(pName);

    if(pModule != NULL)
    {
        pFunc = PyObject_GetAttrString(pModule, func);
        if (pFunc &amp;&amp; PyCallable_Check(pFunc))
        {
            pValue = PyObject_CallObject(pFunc, NULL);
            if (pValue != NULL) {
                printf("Python version: %s\n", PyString_AsString(pValue));
                Py_DECREF(pValue);
            }
            else {
                Py_DECREF(pFunc);
                Py_DECREF(pModule);
                PyErr_Print();
                fprintf(stderr,"Call failed\n");
                return 1;
            }
        }
    }

    Py_Finalize();
    return 0;
}
</code></pre>
<p><strong>get_version.py</strong></p>
<pre><code>import sys

def get_version():
    version = '.'.join(str(v) for v in sys.version_info[:3])
    print("version: ", version)
    return version
</code></pre>
<p>I compile the program using gcc. First with compiling and linking flags set to python 2.7 I run the compilation and linking by using following command:</p>
<pre><code>gcc `python-config --cflags` simple.c `python-config --ldflags`
</code></pre>
<p>The flags expand as:</p>
<p><strong><em>python-config --cflags:</em></strong> <code>-I/usr/include/python2.7 -I/usr/include/x86_64-linux-gnu/python2.7  -fno-strict-aliasing -D_FORTIFY_SOURCE=2 -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security  -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes</code></p>
<p><strong><em>python-config --ldflags:</em></strong> <code>-L/usr/lib/python2.7/config-x86_64-linux-gnu -L/usr/lib -lpthread -ldl  -lutil -lm  -lpython2.7 -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions</code></p>
<p>It works fine without any issues. When I try to compile the same with python3.4 flags it fails:</p>
<pre><code>gcc `python3-config --cflags` simple.c `python3-config --ldflags`
</code></pre>
<p>The flags expand as:</p>
<p><strong><em>python-config --cflags:</em></strong> <code>-I/usr/include/python3.4m -I/usr/include/python3.4m  -Wno-unused-result -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes</code></p>
<p><strong><em>python-config --ldflags:</em></strong> <code>-L/usr/lib/python3.4/config-3.4m-x86_64-linux-gnu -L/usr/lib -lpython3.4m -lpthread -ldl  -lutil -lm  -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions</code></p>
<p><strong>Error message:</strong></p>
<pre><code>simple.c: In function ‘main’:
simple.c:27:17: warning: implicit declaration of function ‘PyString_AsString’ [-Wimplicit-function-declaration]
                 printf("Python version: %s\n", PyString_AsString(pValue));
                 ^
simple.c:27:17: warning: format ‘%s’ expects argument of type ‘char *’, but argument 2 has type ‘int’ [-Wformat=]
/tmp/ccaoMdTo.o: In function `main':
/home/vagrant/c_python_api/simple.c:27: undefined reference to `PyString_AsString'
collect2: error: ld returned 1 exit status
</code></pre>
<p>I tried by changing the order in which linker objects are specified. But no luck. Any idea why this would be the case?</p>
<p>Thanks for the help!!</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/howto/cporting.html#str-unicode-unification" rel="nofollow">Python 3 does not have <code>PyString_AsString</code> any more</a>; the Python 3 <code>str</code> correspond to Python 2 <code>unicode</code> objects; the names of the functions for handling <code>str</code> in Python 3 are <code>PyUnicode_</code>-prefixed in the C-API.</p>
<p>Thus this line:</p>
<pre><code>printf("Python version: %s\n", PyString_AsString(pValue));
</code></pre>
<p>could be changed to use <a href="https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8" rel="nofollow"><code>PyUnicode_AsUTF8</code></a> on Python 3:</p>
<pre><code>#if PY_MAJOR_VERSION &gt;= 3
printf("Python version: %s\n", PyUnicode_AsUTF8(pValue));
#else
printf("Python version: %s\n", PyString_AsString(pValue));
#endif
</code></pre>
<hr/>
<p>(Not that passing <code>NULL</code> to <code>printf</code> <code>%s</code> will have undefined behaviour, so you'd want to check that a non-NULL pointer was returned)</p>
</div>
<span class="comment-copy">Thank you for quick response. The solution provided by you worked. I knew that Python3 strings are unicode encoded by default, should have given a thought about it. However as said in your solution UTF8String  are PyObject and cannot be converted into native char. As described <a href="http://stackoverflow.com/a/16905726/4104863">here</a> the should be additional function call to PyBytes_AsString(). I will edit the answer to include this.</span>
<span class="comment-copy">Ah sorry :D I was writing the answer in haste: fixed</span>
<span class="comment-copy">@JahanBalasubramaniam should have been <code>PyUnicode_AsUTF8</code>; this returns a shared pointer to the string encoded as UTF-8, which is valid for as long as the <code>str</code> itself exists.</span>
<span class="comment-copy"><code>PyUnicode_AsUTF8</code> exists in Python 3.3 forward; it is easiest to not support Python 3.2 at all, since so many changes went to the C-API of <code>str</code> in Python 3.</span>
