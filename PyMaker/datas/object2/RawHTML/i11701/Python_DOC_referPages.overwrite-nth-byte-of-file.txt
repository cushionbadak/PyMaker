<div class="post-text" itemprop="text">
<p>In python, the normal way to edit the middle of a file usually involves taking the first part of the file, add in what you want, then add in the last half minus the bytes you edited. My question is is there any way in which you can open a file and only edit certain bytes without loading the entire file into memory, and also read bytes from a file without loading the entire file into memory. The files I will be editing will be very large so loading them into variables is slow and inefficent</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <code>seek</code> and then <code>write</code>, but often seeking and writing around is not that intuitive - especially if you need to <em>modify</em> values (add 1 to byte at 12345678); also <code>write</code>s, <code>read</code>s move pointer around, or that you need to actually make your byte value into <code>bytes([value])</code> for <code>write</code> and so on.</p>
<p>If you've got a 64-bit computer; 64-bit operating system and 64-bit Python - you could put all those bits into use and memory map your whole file into virtual memory with <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow noreferrer"><code>mmap</code></a> module; with <code>mmap</code> you can access your file as a <code>bytearray</code>-like object (Python 3):</p>
<pre><code>with open("big.data", "r+b") as f:
    # memory-map the file, size 0 means whole file
    mm = mmap.mmap(f.fileno(), 0)
    # write byte 42 to position 12345678
    mm[12345678] = 42
    # add 1 to byte at position 12345679
    mm[12345679] += 1
    mm.close()
</code></pre>
<p>(On Python 2, the elements are 8-bit strings of length 1, so you need to use <code>chr(42)</code> and so on)</p>
<hr/>
<p>On 32-bit computers the small virtual memory limits the maximum size of a file that can be manipulated in this way to a gigabyteish or even less; on  64-bit computer it can be assumed that you would not have a file too large to be mmapped. </p>
<p>P.S. <a href="https://stackoverflow.com/a/28644645/918959"><code>mmap</code> is also very nice for reading big data</a></p>
</div>
<span class="comment-copy">Sounds like a good match for <code>mmap</code>.</span>
<span class="comment-copy">@martineau updated to say that you need 64-bit computer, OS and Python.</span>
<span class="comment-copy">Great, but IMHO I don't think <code>f.seek(12345678)</code> is that much less intuitive than <code>mm[12345678]</code> — nor that the "small" virtual memory limit of 32-bit systems are that severe of a problem.</span>
<span class="comment-copy">@martineau it becomes a PITA if you need to say modify values (add 1 to byte at 12345678); and that writes, reads moves pointer around, or that you need to actually make your integer into <code>bytes</code> of 1 for <code>write</code> and so on.</span>
<span class="comment-copy">Of course you would have to <code>seek</code> again to the same position to write a changed byte value — which <i>is</i> a little more work than say <code>mm[offset] += 1</code> — but updating multi-byte values is somewhat awkward either way.</span>
<span class="comment-copy">With mmap you can also assign slices and so on.</span>
