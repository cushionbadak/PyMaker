<div class="post-text" itemprop="text">
<p>I have a given weather data from MetOffice. The sample is shown below:</p>
<p><strong>SAMPLE</strong></p>
<pre><code>OB_END_TIME,ID,ID_TYPE,OB_HOUR_COUNT,VERSION_NUM,MET_DOMAIN_NAME,SRC_ID,REC_ST_IND,PRCP_AMT,PRCP_DUR,PRCP_AMT_Q,PRCP_DUR_Q,METO_STMP_TIME,MIDAS_STMP_ETIME,PRCP_AMT_J
2016-01-01 00:00, 001586, RAIN, 1, 1, SREW, 315, 1011, 0, , 1, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 005349, RAIN, 1, 1, AWSHRLY, 310, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 008888, RAIN, 1, 1, AWSHRLY, 289, 1011, 0, , 1, , 2016-01-01 02:04, 0, ,
2016-01-01 00:00, 009182, CLBR, 1, 1, AWSHRLY, 57254, 1011, 0, , 1, , 2016-01-01 04:20, 0, ,
2016-01-01 00:00, 010990, RAIN, 1, 1, SREW, 16589, 1011, 0, , 1, , 2015-12-31 23:52, 0, ,
2016-01-01 00:00, 017221, RAIN, 1, 1, SREW, 30523, 1011, 0, , 1, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 024726, RAIN, 1, 1, AWSHRLY, 326, 1011, 0, , 1, , 2016-01-01 02:04, 0, ,
2016-01-01 00:00, 034592, RAIN, 1, 1, SREW, 17344, 1011, 0, , 1, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 036375, RAIN, 1, 1, SREW, 358, 1011, 0, , 1, , 2015-12-31 23:53, 0, ,
2016-01-01 00:00, 037240, RAIN, 1, 1, AWSHRLY, 360, 1011, 0, , 1, , 2015-12-31 23:53, 0, ,
2016-01-01 00:00, 038131, RAIN, 1, 1, SREW, 373, 1011, 0, , 1, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 038180, RAIN, 1, 1, AWSHRLY, 367, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 042647, RAIN, 1, 1, AWSHRLY, 56986, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 044287, RAIN, 1, 1, SREW, 370, 1011, 0, , 1, , 2015-12-31 23:52, 0, ,
2016-01-01 00:00, 047714, RAIN, 1, 1, AWSHRLY, 339, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 052426, RAIN, 1, 1, AWSHRLY, 30750, 1011, 0, , 1, , 2016-01-01 01:59, 0, ,
2016-01-01 00:00, 053903, RAIN, 1, 1, SREW, 17314, 1011, 0, , 1, , 2016-01-01 01:36, 0, ,
2016-01-01 00:00, 056005, RAIN, 1, 1, SREW, 16596, 1011, 0, , 1, , 2015-12-31 23:51, 0, ,
2016-01-01 00:00, 056349, RAIN, 1, 1, SREW, 342, 1011, 0, , 1, , 2016-01-01 01:49, 0, ,
2016-01-01 00:00, 057294, RAIN, 1, 1, SREW, 346, 1011, 0, , 1, , 2016-01-01 01:36, 0, ,
2016-01-01 00:00, 057936, RAIN, 1, 1, AWSHRLY, 25726, 1011, 0, , 1, , 2016-01-01 02:04, 0, ,
2016-01-01 00:00, 064286, RAIN, 1, 1, AWSHRLY, 534, 1011, 0, , 1, , 2015-12-31 23:55, 0, ,
2016-01-01 00:00, 075266, RAIN, 1, 1, SREW, 513, 1011, 0, , 10001, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 075633, RAIN, 1, 1, AWSHRLY, 516, 1011, 0, , 1, , 2016-01-01 02:02, 0, ,
2016-01-01 00:00, 082584, RAIN, 1, 1, AWSHRLY, 525, 1011, 0, , 1, , 2016-01-01 02:05, 0, ,
2016-01-01 00:00, 085160, RAIN, 1, 1, SREW, 56958, 1011, 0, , 1, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 087398, RAIN, 1, 1, AWSHRLY, 529, 1011, 0, , 1, , 2016-01-01 02:00, 0, ,
2016-01-01 00:00, 089543, RAIN, 1, 1, AWSHRLY, 622, 1011, 0, , 1, , 2015-12-31 23:57, 0, ,
2016-01-01 00:00, 095456, RAIN, 1, 1, AWSHRLY, 56424, 1011, 0, , 1, , 2015-12-31 23:58, 0, ,
2016-01-01 00:00, 096514, RAIN, 1, 1, SREW, 19187, 1011, 0, , 1, , 2015-12-31 23:52, 0, ,
2016-01-01 00:00, 099173, RAIN, 1, 1, AWSHRLY, 30529, 1011, 0, , 1, , 2015-12-31 23:59, 0, ,
2016-01-01 00:00, 100789, RAIN, 1, 1, AWSHRLY, 542, 1011, 0, , 1, , 2015-12-31 23:59, 0, ,
2016-01-01 00:00, 102844, RAIN, 1, 1, SREW, 30690, 1011, 0, , 1, , 2015-12-31 23:56, 0, ,
2016-01-01 00:00, 107737, CLBR, 1, 1, AWSHRLY, 61973, 1011, 0, , 1, , 2016-01-01 09:38, 13, ,
2016-01-01 00:00, 115901, RAIN, 1, 1, AWSHRLY, 554, 1011, 0, , 1, , 2016-01-01 02:06, 0, ,
2016-01-01 00:00, 117629, RAIN, 1, 1, SREW, 556, 1011, 0, , 1, , 2015-12-31 23:51, 0, ,
2016-01-01 00:00, 124664, RAIN, 1, 1, AWSHRLY, 19204, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 130062, RAIN, 1, 1, AWSHRLY, 382, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 138518, RAIN, 1, 1, SREW, 16725, 1011, 0, , 1, , 2015-12-31 23:52, 0, ,
2016-01-01 00:00, 142002, RAIN, 1, 1, SREW, 384, 1011, 0, , 1, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 142508, RAIN, 1, 1, SREW, 381, 1011, 0, , 1, , 2015-12-31 23:51, 0, ,
2016-01-01 00:00, 146128, RAIN, 1, 1, SREW, 393, 1011, 0, , 1, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 146453, RAIN, 1, 1, SREW, 386, 1011, 0, , 1, , 2016-01-01 01:36, 0, ,
2016-01-01 00:00, 157291, RAIN, 1, 1, SREW, 395, 1011, 0, , 1, , 2015-12-31 23:53, 0, ,
2016-01-01 00:00, 160108, RAIN, 1, 1, AWSHRLY, 578, 1011, 0, , 1, , 2016-01-01 02:05, 0, ,
2016-01-01 00:00, 164016, RAIN, 1, 1, SREW, 583, 1011, 0, , 1, , 2015-12-31 23:51, 0, ,
2016-01-01 00:00, 169350, RAIN, 1, 1, AWSHRLY, 57093, 1011, 0, , 1, , 2016-01-01 02:06, 0, ,
2016-01-01 00:00, 172604, RAIN, 1, 1, AWSHRLY, 458, 1011, 0, , 1, , 2015-12-31 23:53, 0, ,
2016-01-01 00:00, 174063, RAIN, 1, 1, SREW, 461, 1011, 0, , 1, , 2015-12-31 23:53, 0, ,
2016-01-01 00:00, 183798, RAIN, 1, 1, AWSHRLY, 455, 1011, 0, , 1, , 2015-12-31 23:59, 0, ,
2016-01-01 00:00, 186331, RAIN, 1, 1, AWSHRLY, 435, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 190541, RAIN, 1, 1, AWSHRLY, 413, 1011, 0, , 1, , 2016-01-01 02:00, 0, ,
2016-01-01 00:00, 193361, RAIN, 1, 1, SREW, 409, 1011, 0, , 1, , 2016-01-01 01:36, 0, ,
2016-01-01 00:00, 196391, RAIN, 1, 1, AWSHRLY, 456, 1011, 0, , 1, , 2016-01-01 02:06, 0, ,
2016-01-01 00:00, 200640, CLBR, 1, 1, AWSHRLY, 61843, 1011, , , 7000, , 2016-01-01 09:38, 13, ,
2016-01-01 00:00, 201424, RAIN, 1, 1, AWSHRLY, 30476, 1011, 0, , 1, , 2015-12-31 23:59, 0, ,
2016-01-01 00:00, 203770, RAIN, 1, 1, SREW, 421, 1011, 0, , 1, , 2015-12-31 23:59, 0, ,
2016-01-01 00:00, 203879, RAIN, 1, 1, AWSHRLY, 426, 1011, 0, , 1, , 2015-12-31 23:59, 0, ,
2016-01-01 00:00, 206102, RAIN, 1, 1, AWSHRLY, 61986, 1011, 0, , 1, , 2016-01-01 02:04, 0, ,
2016-01-01 00:00, 214288, RAIN, 1, 1, AWSHRLY, 4911, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 214511, CLBR, 1, 1, AWSHRLY, 61915, 1011, 0, , 1, , 2016-01-01 09:38, 13, ,
2016-01-01 00:00, 220392, RAIN, 1, 1, AWSHRLY, 442, 1011, 0, , 1, , 2016-01-01 02:01, 0, ,
2016-01-01 00:00, 221993, RAIN, 1, 1, SREW, 440, 1011, 0, , 1, , 2016-01-01 01:49, 0, ,
2016-01-01 00:00, 224244, RAIN, 1, 1, AWSHRLY, 436, 1011, 0, , 1, , 2016-01-01 00:00, 0, ,
2016-01-01 00:00, 232673, RAIN, 1, 1, AWSHRLY, 487, 1011, 0, , 1, , 2015-12-31 23:59, 0, ,
2016-01-01 00:00, 233754, RAIN, 1, 1, SREW, 19188, 1011, 0, , 1, , 2015-12-31 23:54, 0, ,
2016-01-01 00:00, 236429, RAIN, 1, 1, SREW, 498, 1011, 0, , 1, , 2015-12-31 23:52, 0, ,
</code></pre>
<p>The data updates hourly and is from <em>2016-01-01</em> to <em>2016-03-31</em> . i have tried to <strong>count Unique <code>SRC_ID</code> values</strong> per **Hour of <code>OB_END_TIME</code> ** The relevant code for the same is given below:</p>
<pre><code>import csv, collections
from datetime import datetime

#creating a dictionary to store the counter values
dd = collections.defaultdict((lambda: collections.defaultdict(int)))

with open('filename.csv') as fd:
    rd = csv.reader(fd)
    next(rd)
    for row in rd:
        hour = row[0][11:]  
        src_id = row[6]     
        dd[hour][src_id] += 1   

for hour in sorted(dd.keys()):                          
    for src_id in sorted(dd[hour].keys()):
        print hour, src_id, dd[hour][src_id]
</code></pre>
<p>I want to do three things here:</p>
<ol>
<li>for the <code>hour</code> variable i want to use <code>DateTime</code> module of python so that i can read the hour value in <code>OB_END_TIME</code> column. Here i have used string indexing to get the hour value but now i want it using the function.</li>
<li>for the <code>src_id</code> variable in the code i want to read the column by Name as an identifier not the as the position. That is, I want src_id variable to read the <code>SRC_ID</code> column without mentioning the [6] index.</li>
<li>for <code>dd = collections.defaultdict((lambda: collections.defaultdict(int)))</code> is there any efficient method to do the same. can we initialize a normal variable and do the same.</li>
</ol>
<p>i hope i am clear with my doubts. In case of concerns please let me know by the comments. I perfectly understand that some requirements of mine may be tricky but just wanted with an efficient code.</p>
<p>PS: I think <code>csv.DictReader</code> may solve my second query but i don't know how to implement it in this section.</p>
<p><strong>NOTE</strong> : I cannot use external modules such as Pandas, Numpy, SQLite, etc. i can just only use the modules that comes with Python Installer. My editor is Python IDLE.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could actually use csv.DictReader as follows:</p>
<pre><code>import csv

with open('filename', 'rb') as fcsv:
    fcsvrd = csv.DictReader(fcsv, delimiter=',')
    # `fcsvrd` would be an iterator 
    for row in fcsvrd:
        date = row['header_name1']
        scr_id = row['scr_id']
</code></pre>
<p>I hope this what you were looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to count the <strong>unique</strong> elements from a CSV. Ok, use a set:</p>
<pre><code>import csv

if __name__ == '__main___':
    data_from_csv = []
    with open('filename.csv') as fd:
        rd = csv.reader(fd)
        data_from_csv = list(rd[1:])

    unique_times = set()
    for d in data_from_csv:
        timestamp = d[0]
        time_as_object = datetime.datetime.strptime(timestamp)
        hour = time_as_object.hour
        if timestamp not in unique_times: 
            unique_times.add(hour)


    unique_timestamps = list(unique_times)
    print unique_timestamps
</code></pre>
<p>And Bob's your uncle!</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need csv reader for that. Just open the using context manager and read each line.</p>
<pre><code>With open(filename) as f:
     For row in f:
         Date_string = row.split(',')[0]
         Date_object = datetime.strptime('%Y-%m-%d %H:%M')
</code></pre>
<p>Operate on the date_object as much as u like</p>
</div>
<span class="comment-copy">why dont you use pandas here to be more efficient..</span>
<span class="comment-copy">@Anvesh i have some system restrictions. I cannot use Pandas or Numpy to do the same. I have to use it the generic base python way. i hope i was able to clear the situation.</span>
<span class="comment-copy">Import the data into an in-memory SQLite database and analyse it using the <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer"><code>sqlite3</code></a> module.</span>
<span class="comment-copy">let me edit the questions for further refrences. @LutzHorn i cannot use any explicit module to get the work. I have to use the base Python only. DateTime and other modules are to be used only. SQLite, Pandas, Numpy etc cannot be used.</span>
<span class="comment-copy"><code>sqlite3</code> <i>is</i> a module included in the Python standard library.</span>
<span class="comment-copy">It helped me somewhat. It solved my second query. I was thinking the same. :) thanks mate.</span>
<span class="comment-copy">There is no module named <code>set</code> !</span>
<span class="comment-copy">GAH!!! Silly me :(</span>
<span class="comment-copy">No output! but an brief description may work for me.</span>
<span class="comment-copy">Try that, you may need to make the output nicer-looking, but that will show you the list</span>
<span class="comment-copy">If my answer was helpful, would you kindly tick the green checkbox?</span>
