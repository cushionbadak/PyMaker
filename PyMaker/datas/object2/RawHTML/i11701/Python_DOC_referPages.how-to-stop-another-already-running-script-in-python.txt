<div class="post-text" itemprop="text">
<p>There is a way to start another script in python by doing this:</p>
<pre><code>import os

os.system("python [name of script].py")
</code></pre>
<p>So how can i stop another already running script? I would like to stop the script by using the name.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is more usual to <em>import</em> the other script and then invoke its functions and methods.</p>
<p>If that does not work for you, e.g. the other script is not written in such a way that is conducive to being imported, then you can use the <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module to start another process.</p>
<pre><code>import subprocess

p = subprocess.Popen(['python', 'script.py', 'arg1', 'arg2'])
# continue with your code then terminate the child
p.terminate()
</code></pre>
<p>There are many possible ways to control and interact with the child process, e.g. you can can capture its stdout and sterr, and send it input. See the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow"><code>Popen()</code></a> documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you start the script as per  mhawkes suggestion is it a better option but to answer your question of how to kill an already started script by name you can use <a href="http://linux.die.net/man/1/pkill" rel="nofollow">pkill</a> and <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_call" rel="nofollow">subprocess.check_call</a>:</p>
<pre><code>from subprocess import check_call
import sys

script = sys.argv[1]


check_call(["pkill", "-9", "-f", script])
</code></pre>
<p>Just pass the name to kill:</p>
<pre><code>padraic@home:~$ cat kill.py
from subprocess import check_call
import sys

script = sys.argv[1]


check_call(["pkill", "-9", "-f", script])


padraic@home:~$ cat test.py
from time import sleep

while True:
   sleep(1)
padraic@home:~$ python test.py &amp;
[60] 23361
padraic@home:~$ python kill.py test.py
[60]   Killed             python test.py
Killed
</code></pre>
<p>That kills the process with a <code>SIGKIll</code>, if you want to terminate remove the -9:</p>
<pre><code>padraic@home:~$ cat kill.py
from subprocess import check_call
import sys

script = sys.argv[1]

check_call(["pkill", "-f", script])


padraic@home:~$ python test.py &amp;
[61] 24062
padraic@home:~$ python kill.py test.py 
[61]   Terminated              python test.py
Terminated
</code></pre>
<p>That will send a <code>SIGTERM</code>. <a href="http://www.gnu.org/software/libc/manual/html_node/Termination-Signals.html" rel="nofollow">Termination-Signals</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Just put in the name of the program NOT the path to your script.
so it would be </p>
<pre><code>check_call(["pkill", "-f", "MotionDetector.py"])
</code></pre>
</div>
<span class="comment-copy">You can kill the script using the pid or name, can you add a little more context?</span>
<span class="comment-copy">@PadraicCunningham i would like to stop by using the name</span>
<span class="comment-copy">What OS are you using?</span>
<span class="comment-copy">@PadraicCunningham I am running the scripts on Raspberry Pi, the script I am trying to stop is written by myself.</span>
<span class="comment-copy">running   <code>pkill -9 -f script.py</code> will kill the script</span>
<span class="comment-copy">Hi @Padraic Cunningham, your script worked well for me. However, when I tried to tweak it a bit (replaced sys.argv[1] with the path to my script --&gt; 'home/pi/MotionDetector.py') it threw an error :"  CalledProcessError: Command '['pkill', '-9', '-f', '/home/pi/MotionDetector.py']' returned non-zero exit status 1"  Can you pls help?</span>
