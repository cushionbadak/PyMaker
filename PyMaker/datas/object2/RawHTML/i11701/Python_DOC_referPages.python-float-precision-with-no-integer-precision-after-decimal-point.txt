<div class="post-text" itemprop="text">
<p>While working with float precision, I stumbled across a strange fact. Why does python prints only the integer part when formatted with <code>"%.f"</code>. I am willing to know the mechanism behind this</p>
<pre><code> &gt;&gt;&gt; a = float(2.12345)
 &gt;&gt;&gt; a
 2.12345
 &gt;&gt;&gt; print "%.2f" % a
 2.12
 &gt;&gt;&gt; print "%.1f" % a
 2.1
 &gt;&gt;&gt; print "%f" % a
 2.123450
 &gt;&gt;&gt; print "%.f" % a
 2                   #why?
</code></pre>
<p>Thanks in advance for the explanation :)</p>
</div>
<div class="post-text" itemprop="text">
<p>It's been that way <a href="https://github.com/python/cpython/commit/7116ecb7b4f20aaf3503c9a6ba497217c9b3c7e3" rel="nofollow">ever since <code>%</code> formatting was added back in 1993</a>; if a <code>.</code> is not followed by a decimal number then <a href="https://github.com/python/cpython/blob/7116ecb7b4f20aaf3503c9a6ba497217c9b3c7e3/Objects/stringobject.c#L557" rel="nofollow">precision is taken as zero</a>.</p>
<p>This is undocumented, but is consistent with <a href="http://en.cppreference.com/w/cpp/io/c/fprintf" rel="nofollow"><code>printf</code></a>, which Python's <code>%</code> formatting was inspired by:</p>
<blockquote>
<p>(optional) <code>.</code> followed by integer number or <code>*</code>, or neither that specifies precision of the conversion. In the case when <code>*</code> is used, the precision is specified by an additional argument of type int. If the value of this argument is negative, it is ignored. If neither a number nor <code>*</code> is used, the precision is taken as zero.</p>
</blockquote>
<p>Interestingly, another undocumented feature also inspired by <code>printf</code> is that you can use <code>*</code> as precision, as above:</p>
<pre><code>&gt;&gt;&gt; "%6.*f" % (2, 1.234)
'  1.23'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The docs for precision <a href="https://docs.python.org/3/library/string.html#grammar-token-precision" rel="nofollow">here</a> don't mention a default if the precision is ommitted. I can only assume it just works this way because it does!</p>
<p>The docs give the default precision for a %f as 6 in the format specification mini language <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow">here</a>. Maybe by specifying a precision with the . and then by omitting an integer value, the interpreter assumes it should be zero?</p>
<p>This may even behave differently on different interpreters. Interesting find anyway :).</p>
<p>Interestingly, using str.format throws a nice ValueError in my 2.7 interpreter:</p>
<pre><code>&gt;&gt;&gt; f = 234.12345676
&gt;&gt;&gt; "{:.f}".format(f)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: Format specifier missing precision
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>%</code> operator has the following behavior, like you observed:</p>
<pre><code>&gt;&gt;&gt; "%.f" % 1.23
'1'
</code></pre>
<p>The parser goes through the format string, with the precision being <a href="https://github.com/python/cpython/blob/3.3/Objects/unicodeobject.c#L13548" rel="nofollow">undefined (<code>-1</code>) by default</a>. When it hits the <code>.</code>, the precision <a href="https://github.com/python/cpython/blob/3.3/Objects/unicodeobject.c#L13656" rel="nofollow">will be set to <code>0</code></a>. The arguments will be passed to the <a href="https://github.com/python/cpython/blob/3.3/Objects/unicodeobject.c#L13285" rel="nofollow">helper function <code>formatfloat</code></a> which uses the default precision <code>6</code> if no precision is given, and no <code>.</code> is used.</p>
<p>An interesting note is that <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow">str.format()</a> will actually <a href="https://github.com/python/cpython/blob/3.3/Python/formatter_unicode.c#L235" rel="nofollow">throw an exception</a> in this case, probably for easier implementation and not letting people rely on unspecified behavior:</p>
<pre><code>&gt;&gt;&gt; "{:.f}".format(1.23)
Traceback (most recent call last):
  File "&lt;ipython-input-6-677ba2e4a680&gt;", line 1, in &lt;module&gt;
    "{:.f}".format(1.23)
ValueError: Format specifier missing precision
</code></pre>
</div>
<span class="comment-copy">Because <code>"%.f"</code> is the same as <code>"%.0f"</code>?</span>
<span class="comment-copy">For the same reason that <code>1.0</code> is the same as <code>1.</code>, probably.</span>
<span class="comment-copy">This appears to be undefined behaviour. The optional precision is <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting-operations" rel="nofollow noreferrer">given as a <code>'.'</code> (dot) followed by the precision</a>. The <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">format specification mini-language documentation</a> similarly requires an argument for the precision. Since <code>int()</code> returns 0 it seems like a reasonable default, but undefined behaviour means exactly that.</span>
<span class="comment-copy">your answer seems logical to me. But I wonder why the string format raises value error as mentioned by srowland in his answer?</span>
<span class="comment-copy">@HiteshPaul <code>string.format</code> is a later API (introduced in PEP 3101) so it was possible to have it conform strictly to the specification; the undocumented behavior of <code>%</code> couldn't be removed without breaking backward compatibility.</span>
<span class="comment-copy">@HiteshPaul See my answer below :)</span>
<span class="comment-copy">It seems weird though, python raises ValueError for string format and none for '%'  format.</span>
<span class="comment-copy">Completely agree with you :). I guess format has a more rigorous implementation on this point.</span>
<span class="comment-copy">so does that mean the internal implementation differs for string format and % format?</span>
<span class="comment-copy">I don't think either result is more "rigorous".  As I said in a comment on the question, this is undefined behaviour. You might get a default of zero decimal points, you might get an exception, the Python interpreter might crash, or your machine might reboot. Some options seem better choices, but all are valid.</span>
<span class="comment-copy">Thanks @Chris - link fixed. And I agree this is just undefined. It is probably a little more user friendly that <code>format</code> gives a <code>ValueError</code> in my interpreter whereas <code>"%.f"</code> doesn't.</span>
