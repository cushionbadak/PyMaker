<div class="post-text" itemprop="text">
<p>I am working on a small application that I know will have 3 threads independent from the main thread, at some point, and I will need to identify a thread from another. Suppose threads are <code>A</code>, <code>B</code>, <code>C</code>. <code>A</code> will need to join with <code>C</code> if something happens. I am trying to add the threads to a dictionary before starting them, so I can identify thread <code>C</code> later:</p>
<pre><code>currentThreads['A'] = threading.Thread(target=func, args=[]]).
currentThreads['A'].start()
currentThreads['B'] = threading.Thread(target=func, args=[]).start()
currentThreads['B'].start()
</code></pre>
<p>The behavior is weird: sometimes both <code>currentThreads[key].start()</code> yield <code>AttributeError: 'NoneType' object has no attribute 'start'</code>, sometimes only <code>currentThreads['B'].start()</code> does.</p>
<p>Any clue why this might happen?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest to you, for keeping reference name to your threads, to actually give them names, like so:</p>
<pre><code>t = threading.Thread(name='my_service', target=func)
</code></pre>
<p>Then when you need to check for the name of the thread, just get it's name with <code>getName()</code>:</p>
<pre><code>current_thread_name =  threading.currentThread().getName() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because <a href="https://docs.python.org/3/library/threading.html#threading.Thread.start" rel="nofollow"><code>start</code></a> returns <code>None</code> so in:</p>
<pre><code>currentThreads['B'] = threading.Thread(target=func, args=[]).start()
</code></pre>
<p><code>currentThreads['B']</code> is <code>None</code> thus calling  <code>currentThreads['B'].start()</code> will raise <code>AttributeError</code></p>
</div>
<span class="comment-copy">Why you are starting <code>B</code> thread two times?</span>
<span class="comment-copy">Damn. No idea what I did there :\</span>
<span class="comment-copy">Yep, that works great. Thanks</span>
<span class="comment-copy">A suggestion, since someone else might be looking into how they can access other threads from within the current one. It's worth checking out <code>threading.enumerate</code> which will return a list of the threads currently alive - you can identify the one you need by the name you set above.</span>
<span class="comment-copy">@BujancaMihai .. Correct ..</span>
<span class="comment-copy">True, didn't notice I was calling <code>start</code> twice</span>
