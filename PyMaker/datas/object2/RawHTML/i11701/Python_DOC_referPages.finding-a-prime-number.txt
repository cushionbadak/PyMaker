<div class="post-text" itemprop="text">
<p>The problem is that you need to find the prime number after the number input, or if the number input is prime, return that. It works fine. It's just not working when the input is <code>print(brute_prime(1000))</code>. It returns 1001 not 1009. The full code is this:</p>
<pre><code>def brute_prime(n):
    for i in range(2, int(n**(0.5))):
        if n % i == 0:
            n += 1
    else:
        return n
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As Barmar suggests, you need to restart the loop each time you increment n. Your range also ends earlier than it should, as a range stops just before the second argument.</p>
<pre><code>def brute_prime(n):
    while True:
        for i in range(2, int(n**(0.5)) + 1):
            if n % i == 0:
                break
        else:
            return n
        n = n+1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>remember 2 is a prime number. again you can just check the division by 2 and skip all the even number division</p>
<pre><code> def brute_prime(n):
        while True:
            if n==2:return n
            elif n%2 ==0 or any(n % i==0 for i in range(3, int(n**(0.5)+1),2)):
                n += 1
            else:
                return n
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're not restarting the <code>for i</code> loop when you discover that a number is not prime and go to the next number. This has two problems: you don't check whether the next number is a multiple of any of the factors that you checked earlier, and you also don't increase the end of the range to <code>int(n ** 0.5)</code> with the new value of <code>n</code>.</p>
<pre><code>def brute_prime(n):
    while true:
        prime = true
        for i in range(2, int(n ** 0.5)+1):
            if n % i == 0:
                prime = false
                break
        if prime:
            return n
        n += 1
</code></pre>
<p><code>break</code> will exit the <code>for</code> loop, and <code>while true:</code> will restart it after <code>n</code> has been incremented.</p>
</div>
<div class="post-text" itemprop="text">
<p>as mention by Chris Martin the wise solution is define a <code>isPrime</code> function separately and use it to get your desire number.</p>
<p>for example like this</p>
<pre><code>def isPrime(n):
    #put here your favorite primality test

from itertools import count

def nextPrime(n):
    if isPrime(n):
        return n
    n += 1 if n%2==0 else 2
    for x in count(n,2):
        if isPrime(x):
            return x
</code></pre>
<p>if the given number is not prime, with <code>n += 1 if n%2==0 else 2</code> it move to the next odd number and with <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>count</code></a> check every odd number from that point forward.</p>
<p>for <code>isPrime</code> trial division is fine for small numbers, but if you want to use it with bigger numbers I recommend the <a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants_of_the_test" rel="nofollow">Miller-Rabin test (deterministic version)</a> or the <a href="https://en.wikipedia.org/wiki/Baillie%E2%80%93PSW_primality_test" rel="nofollow">Baille-PSW test</a>. You can find a python implementation of both version of the Miller test here: <a href="http://rosettacode.org/wiki/Miller%E2%80%93Rabin_primality_test#Python" rel="nofollow">http://rosettacode.org/wiki/Miller%E2%80%93Rabin_primality_test#Python</a></p>
</div>
<span class="comment-copy">You need to restart the <code>for i</code> loop whenever you increment <code>n</code>.</span>
<span class="comment-copy">This is a good example of why it's wise to break up functions into smaller functions. Refactor this so it uses a separate <code>is_prime</code> function, and in doing so you will fix your mistake entirely by accident.</span>
<span class="comment-copy">The <code>for</code> loop has to use <code>range(2, int(n**0.5)+1)</code> because <code>range</code> doesn't include the end number, and you need to test the square root itself. Otherwise you'll claim that the square of a prime is also prime.</span>
<span class="comment-copy"><code>n++</code> is not a valid python syntax, use <code>n+=1</code></span>
