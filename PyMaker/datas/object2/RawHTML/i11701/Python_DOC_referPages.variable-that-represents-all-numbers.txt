<div class="post-text" itemprop="text">
<p>I need to define a variable that contains all possible natural numbers, or at least all numbers from 1 to a million.</p>
<p>I don't want to use the <code>range</code> function because it is not applicable for my particular purpose. Is there any other way to define the variable so it can represent, or contain any number after 0?</p>
<p>EDIT:
If I use the <code>range</code> while defining the variable it will contain a list of numbers, but I am trying to avoid creating a list. </p>
<p>The program is giving me a number <code>X</code> and I don't know which number it is, but I need to have that number <code>X</code> represented with the variable <code>var</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.2 and higher, representing a container with all integers from 1 to a million is correctly done with <code>range</code>:</p>
<pre><code>&gt;&gt;&gt; positive_nums_to_1M = range(1, 1000001)
&gt;&gt;&gt; 1 in positive_nums_to_1M
True
&gt;&gt;&gt; 1000000 in positive_nums_to_1M
True
&gt;&gt;&gt; 0 in positive_nums_to_1M
False
</code></pre>
<p>It's extremely efficient; the numbers in the range aren't actually generated, instead the membership (or lack thereof) is computed mathematically.</p>
<p>If you need some equivalent object that supports any positive integer, or need it in Python 2.x, you'll have to write your own class, but it's not hard:</p>
<pre><code>from operator import index

class natural_num_range(object):
    def __init__(self, maxnum=None):
        if maxnum is not None:
            maxnum = index(maxnum)  # Ensure a true native int (or long)
        self.maxnum = maxnum

    def __contains__(self, x):
        try:
             x = index(x)
        except TypeError:
             return False
        return x &gt;= 1 and (self.maxnum is None or x &lt; self.maxnum)
</code></pre>
<p>That does something similar to <code>range</code>, but without supporting a <code>start</code> or <code>step</code>, and not requiring a <code>stop</code>, so you can do constant time membership tests:</p>
<pre><code>&gt;&gt;&gt; natural = natural_num_range()
&gt;&gt;&gt; all(i in natural for i in range(1, 10000000, 10000))
True
&gt;&gt;&gt; any(i in natural for i in range(-100000000, 0, 10000))
False
</code></pre>
</div>
<span class="comment-copy">What is your application? Why doesn't range work?</span>
<span class="comment-copy">It would help to provide some context. Can you give some example code, or provide a generic situation/requirements? If we had a good idea of what you were trying to do, perhaps we could provide a better answer/solution for you.</span>
<span class="comment-copy">What does it even <i>mean</i> for a variable to "contain all possible natural numbers"? Any variable can represent any number after 0 -- that is why they are called "variables"</span>
<span class="comment-copy">@NedzadGanic, you could start by explaining why you don't think <code>range</code> is a good fit. Next, what do you mean when you say "so if you ask if a number is in the variable the answer would be yes"? <code>if some_number in my_variable</code>? ShadowRanger's answer passes that test.</span>
<span class="comment-copy">@NedzadGanic, as ShadowRanger's answer says, in Python 3.2 and later <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer"><code>range</code></a> is very efficient. It does <i>not</i> return a list, but rather a range object. "The advantage of the <code>range</code> type over a regular <code>list</code> or <code>tuple</code> is that a <code>range</code> object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed)." His second example covers earlier versions of Python.</span>
