<div class="post-text" itemprop="text">
<p>Why does this regular expression:
<code>r'^(?P&lt;first_init&gt;\b\w\.\b)\s(?P&lt;mid_init&gt;\b\w\.\b)\s(?P&lt;last_name&gt;\b\w+\b)$'</code>
does not match <code>J. F. Kennedy</code>?</p>
<p>I  have to remove <code>\b</code> in groups <code>first_init</code> and <code>mid_init</code> to match the words.
I am using Python. And for testing i am using <a href="https://regex101.com/" rel="nofollow">https://regex101.com/</a></p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You are over-applying the <code>\b</code> <em>word breaks</em>.</p>
<p><code>\b</code> will <em>only</em> match if on one side there is a valid "word" character and on the other side not. Now you use this construction twice:</p>
<pre><code>\b\w\.\b\s
</code></pre>
<p>.. and, rightly so, it does not match because on the left side you have a not-word character (a single full stop) and on the other side you <em>also</em> have a not-word character (a space).</p>
<p>Removing the <code>\b</code> between the full stop and <code>\s</code> is enough to make it work.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>\b</code> matches the empty string only at the beginning or end of a word. A word is a sequence of alphanumeric or underscore characters. The dot (<code>.</code>) cannot comprise part of the word.</p>
<pre><code>&gt;&gt;&gt; import re
# does not match when \. is within word boundary
&gt;&gt;&gt; re.match(r'^(?P&lt;first_init&gt;\b\w\.\b)\s(?P&lt;mid_init&gt;\b\w\.\b)\s(?P&lt;last_name&gt;\b\w+\b)$', 'J. F. Kennedy')
# matches when \b is moved to left of \.
&gt;&gt;&gt; re.match(r'^(?P&lt;first_init&gt;\b\w\b\.)\s(?P&lt;mid_init&gt;\b\w\b\.)\s(?P&lt;last_name&gt;\b\w+\b)$', 'J. F. Kennedy')  # matches
</code></pre>
<p>The <code>.</code> is not part of the word in this sense. See the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">docs here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It does not match because of the <code>\.</code> (dot) character. A word boundary does not include the dot (it is not the same definition of <em>word</em> you perhaps would like). You can easily rewrite it without the need of <code>\b</code>. Read the <a href="https://docs.python.org/2/library/re.html" rel="nofollow">documentation</a> carefully.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just remove the second boundary:</p>
<pre><code>^(?P&lt;first_init&gt;\b\w\.)\s
(?P&lt;mid_init&gt;\b\w\.)\s
(?P&lt;last_name&gt;\b\w+\b)$
</code></pre>
<p>And see <a href="https://regex101.com/r/xM7cA5/2" rel="nofollow">a demo on regex101.com</a>.<br/>
<em>Background</em> is that the second <code>\b</code> is between a dot and a space, so it fails (remember that one of the sides needs to be a word character, ie one of <code>a-zA-Z0-9_</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>\b means border of a word.</p>
<p><code>Word</code> here is defined like so:</p>
<blockquote>
<p>A word ends, when there is a space character following it.</p>
</blockquote>
<p>"J.", "F." and "Kennedy" are the words here.</p>
<p>You're example is trying to search for a space between the letter and the dot and it is searching for <code>J . F . Kennedy</code>.</p>
</div>
<span class="comment-copy">Does <code>r"\b\w\.\b"</code> by itself  match anything in "J. F. Kennedy"?</span>
<span class="comment-copy">@PadraicCunningham. Thanks.  No it does not. But why  'J.'  does not match "word boundary -&gt; followed by a character -&gt; followed by a '.' ". Thats what the regex is asking to match. Right?</span>
<span class="comment-copy">It  is all in the doc <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">docs.python.org/2/library/re.html</a>, look at \b</span>
<span class="comment-copy">Thanks @Rad Lexus. Your explanation was very clear. Got it.</span>
<span class="comment-copy">Thanks, got it now. :)</span>
<span class="comment-copy">Thanks for the demo :)</span>
