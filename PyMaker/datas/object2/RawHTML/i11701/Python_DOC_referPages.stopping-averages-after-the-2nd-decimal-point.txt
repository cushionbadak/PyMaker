<div class="post-text" itemprop="text">
<p>I got this code to work but I wanted to get the part I print out to stop at the after 2 numbers after the decimal point (0.00) I don't know how to go about doing this could anyone give some insight of what command I would use to do this.
This is the code</p>
<pre><code>import csv

#turn csv files into a list of lists
with open('train.csv','rU') as csvfile:
     reader = csv.reader(csvfile)
     csv_data = list(reader)
with open ('train.csv', 'r') as f:
    numline = len(f.readlines())

# Create two lists to handle the patients
# And two more lists to collect the 'sum' of the columns
# The one that needs to hold the sum 'must' have 0 so we 
# can work with them more easily
iList = []
iList_sum = [0,0,0,0,0,0,0,0,0,0,0,0,0]
IPcounter = 0
hList = []
hList_sum = [0,0,0,0,0,0,0,0,0,0,0,0,0]
HPcounter = 0

# Only use one loop to make the process mega faster
for row in csv_data:
    # If row 13 is greater than 0, then place them as unhealthy
    if (row and int(row[13]) &gt; 0):
        # This appends the whole 'line'/'row' for storing :)
        # That's what you want (instead of saving only one cell at a time)
        iList.append(row)
        IPcounter += 1

    # If it failed the initial condition (greater than 0), then row 13
    # is either less than or equal to 0. That's simply the logical outcome
    else:
        hList.append(row)
        HPcounter += 1


# Loop through all the 'rows' of the ill patient 
for ill_data in iList:

    # Loop through the data within each row, and sum them up
    qmark_counter = 0
    for i in range(0,len(ill_data) - 1):
        if ill_data[i] == '?':
            val = 0

        else:
            val = ill_data[i]
        iList_sum[i] += float(val)



# Now repeat the process for healthy patient
# Loop through all the 'rows' of the healthy patient 
for healthy_data in hList:

    # Loop through the data within each row, and sum them up
    for i in range(0,len(healthy_data) - 1):
        hList_sum[i] += float(ill_data[i])


ill_avg = [ ill / len(iList) for ill in iList_sum]
hlt_avg = [ hlt / len(hList) for hlt in hList_sum]



print('Total number of lines ' + str(numline))
print("Total amount of healthy patients " + str(HPcounter))
print("Total amount of ill patients " + str(IPcounter))
print("Averages of healthy patients " + str(hlt_avg))
print("Averages of ill patients " + str(ill_avg))
</code></pre>
<p>This is the output</p>
<pre><code>    Total number of lines 303
Total amount of healthy patients 164
Total amount of ill patients 139
Averages of healthy patients [57.0, 0.0, 2.0, 130.0, 236.0, 0.0, 2.0, 174.0, 0.0, 0.0, 2.0, 1.0, 3.0]
Averages of ill patients [56.62589928057554, 0.8201438848920863, 3.5899280575539567, 134.568345323741, 251.4748201438849, 0.15827338129496402, 1.1726618705035972, 139.25899280575538, 0.5467625899280576, 1.5741007194244607, 1.8273381294964028, 1.129496402877698, 5.798561151079137]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow"><code>round(number, ndigits)</code></a> where <code>ndigits</code> is the number of decimal places.</p>
<p><strong>For example</strong></p>
<pre><code>&gt;&gt;&gt; number = 32.32434354
&gt;&gt;&gt; round(number, 2)
32.32
&gt;&gt;&gt; round(number, 5)
32.32434
</code></pre>
<p>An alternative is using Python's <a href="https://docs.python.org/3/library/string.html" rel="nofollow"><code>str.format()</code></a>.</p>
<p><strong>For example</strong></p>
<pre><code>&gt;&gt;&gt; '{:.2f}'.format(number)
'32.32'
&gt;&gt;&gt; '{:.5f}'.format(number)
'32.32434'
</code></pre>
<p>Where,</p>
<ul>
<li><p><code>{}</code> is <code>.format()</code>'s position to insert the number.</p></li>
<li><p>The <code>f</code> specifies the number will be a <code>float</code>.</p></li>
<li><p>The <code>.2</code> or <code>.5</code> means to round it to two or five decimal places.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>An alternative is to use the string <code>.format</code> method. Documentation for the specifiers <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow">is here</a>. The <code>{}</code> designate where a replacement will occur in the string, <code>f</code> says the replacement will be a float, and <code>.2</code> tells it to only show 2 digits after the decimal. </p>
<pre><code>print('{:.2f}'.format(32.32434))
# Prints 32.32
</code></pre>
<p>To print an array of numbers, with each formatted:</p>
<pre><code>num_list = [1.2345, 2.3456, 3.4567, 4.5678]
print('[' + ', '.join(['{:.2f}'.format(number) for number in num_list]) + ']')
# Prints [1.23, 2.35, 3.46, 4.57]
</code></pre>
</div>
<span class="comment-copy">ok so for me what I would use is change the print part and it would use   print("Averages of ill patients " + str('{:.2f}'.format(ill_avg)))</span>
<span class="comment-copy">I recommend instead when you make <code>ill_avg</code> here <code>ill_avg = [ ill / len(iList) for ill in iList_sum]</code>, you just do <code>round(ill/len(iList), 2)</code></span>
<span class="comment-copy">ok sweet thanks man I kinda had a idea of format but still new to it. I'll have to read up on it but I really appreciate the help.</span>
<span class="comment-copy">Of course! :) Happy Programming!</span>
<span class="comment-copy">Wait why <code>', '.join()</code> and add parentheses instead of just <code>[float('{:.2f}'.format(number)) for number in num_list]</code>?</span>
<span class="comment-copy">@Signal It seems silly to convert floats to strings, back to floats, then back to a string again. If I needed a list of rounded floats, I would do as you suggested and use <code>round</code>. Maybe that is overall a better approach.</span>
<span class="comment-copy">I think it is <i>even sillier</i> to use <code>str.join()</code> to add commas separating the numbers and then <i>manually add brackets</i> to make it <b>look</b> like a list rather than making it a list...</span>
<span class="comment-copy">@Signal Yes, I was adding the brackets simply to make it the same as the example output.</span>
