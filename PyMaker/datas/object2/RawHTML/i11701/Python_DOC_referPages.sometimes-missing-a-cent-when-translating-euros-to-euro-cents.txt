<div class="post-text" itemprop="text">
<p>I have to translate euro's (in a string) to euro cents (int):<br/>
Examples: </p>
<ul>
<li>'12,1' =&gt; 1210  </li>
<li>'14,51' =&gt; 1451</li>
</ul>
<p>I use this python function: </p>
<pre><code>int(round(float(amount.replace(',', '.')), 2) * 100)
</code></pre>
<p>But with this amount '1229,8<strong>4</strong>' the result is : 12298<strong>3</strong> </p>
<p><strong>Update</strong></p>
<p>I use the solution from Wim, bacause I use integers in both Python / Jinja and javascript for currency artitmetic. See also the answer from Chepner.</p>
<pre><code>int(round(100 * float(amout.replace(',', '.')), 2))
</code></pre>
<p>My questions was anwered by Mr. Me, who explained the above result.</p>
</div>
<div class="post-text" itemprop="text">
<h2>What the Docs Say, and a simple explanation</h2>
<p>I tried it out, and was surprised that this was happening. So I turned to the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">documentation</a>, and there is a little note in there that says.</p>
<blockquote>
<p><strong>Note</strong> The behavior of round() for floats can be surprising: for
  example, round(2.675, 2) gives 2.67 instead of the expected 2.68. This
  is not a bug: it’s a result of the fact that most decimal fractions
  can’t be represented exactly as a float. </p>
</blockquote>
<p>Now what does that mean, most decimal fractions can't be represented as a float. Well the documentations follows up with a great <a href="https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues" rel="nofollow noreferrer">link</a> at explains this, but since you probably didn't come here to read a nerdy technical document, let me summarize what is going on.</p>
<p>Python uses the IEEE-754 floating point standard to represent floats. This standard compromises accuracy for speed. Some numbers cannot be accurately represented. For example <code>.1</code> is actually represented as <code>0.1000000000000000055511151231257827021181583404541015625</code>. Interestingly, .1 in binary is actually an infinitely repeating number, just like 1/3 is an infinitely repeating .333333.</p>
<hr/>
<h2>An Under the Hood Case Study</h2>
<p>Now on to your particular case. This was pretty fun to look into, and this is what I discovered.</p>
<p>first lets simplify what you where trying to do</p>
<pre><code>&gt;&gt;&gt; amount = '1229,84'
&gt;&gt;&gt; int(round(float(amount.replace(',', '.')), 2) * 100)
&gt;&gt;&gt; 122983
</code></pre>
<p>to</p>
<pre><code>&gt;&gt;&gt;int(1229.84 * 100)
&gt;&gt;&gt; 122983
</code></pre>
<p>Sometimes Python<sup>1</sup> is unable to 100% accurately display binary floating point numbers, for the same reason we are unable to display the fraction 1/3 as a decimal. When this happens Python hides any extra digits. <code>.1</code> is actually stored as <code>-0.10000000000000009</code><sup>2</sup>, but Python will display it as .1 if you type it into the console. We can see those extra digits by doing <code>int(1.1) - 1.1</code><sup>3</sup>. we can apply this <code>int(myNum) - myNum</code> formula to most floating point numbers to see the extra hidden digits behind them.<sup>4</sup>. In your case we would do the following.</p>
<pre><code>&gt;&gt;&gt; int(1229.84) - 1229.84
-0.8399999999999181
</code></pre>
<p><code>1229.84</code> is actually <code>1229.8399999999999181</code>. Continuing on.<sup>5</sup></p>
<pre><code>&gt;&gt;&gt; 1229.84, 2) * 100
122983.99999999999 #there's all of our hidden digits showing up.
</code></pre>
<p>Now on to the last step. This is the part we are concerned about. Changing it back to an integer.</p>
<pre><code>&gt;&gt;&gt; int(122983.99999999999)
122983
</code></pre>
<p>It rounds downwards instead of upwards, however, if we never had multiplied it by 100, we would still have 2 more 9s at the end, and Python would round up.</p>
<pre><code>&gt;&gt;&gt; int(122983.9999999999999)
122984
</code></pre>
<p>??? Now what is going on. Why is Python rounding <code>122983.99999999999</code> down, but it rounds <code>122983.9999999999999</code> up? Well whenever Python turns a float into a integer it rounds down. However, you have to remember that to Python <code>122983.9999999999999</code> with the extra two 99s at the end is the same thing as <code>122984.0</code> For example.</p>
<pre><code>&gt;&gt;&gt; 122983.9999999999999
122984.0
&gt;&gt;&gt; a = 122983.9999999999999
&gt;&gt;&gt; int(a) - a
0.0
</code></pre>
<p>and without the two extra 99s on the end.</p>
<pre><code>&gt;&gt;&gt; 122983.99999999999
122983.99999999999
&gt;&gt;&gt; a=122983.99999999999
&gt;&gt;&gt; int(a) - a
-0.9999999999854481
</code></pre>
<p>Python is definitely treating <code>122983.9999999999999</code> as <code>122984.0</code> but not <code>122983.99999999999</code>. Now back to casting <code>122983.99999999999</code> to an integer. Because we have created ourselves a decimal portion that is less than <code>122984</code> that Python sees as being a seperate number from <code>122984</code>, and because casting to an integer always causes Python to round down, we get <code>122983</code> as a result.</p>
<p>Whew. That was a lot to go through, but I sure learned a lot writing this out, and I hope you did to. The solution to all of this is to use <a href="https://docs.python.org/3.5/library/decimal.html" rel="nofollow noreferrer">decimal</a> numbers instead of floats which compromises speed for accuracy.</p>
<p>What about rounding? The original problem had some rounding in it as well -- it's useless. See appendix item <sup>6</sup>.</p>
<hr/>
<h2>The Solution</h2>
<p>a) The easiest solution is to use the <a href="https://docs.python.org/3.5/library/decimal.html" rel="nofollow noreferrer">decimal module</a> instead of floating point numbers. This is the preferred way of doing things in any finance or accounting program.</p>
<p>The documentation also mentioned the following solutions which I've summarized.</p>
<p>b) The exact value can be expressed and retrieved in a hexadecimal form via <code>myFloat.hex()</code> and <code>float.fromhex(myHex)</code></p>
<p>c) The exact value can also be retrieved as a fraction through <code>myFloat.as_integer_ratio()</code></p>
<p>d) The documentation briefly mentions using SciPy for floating point arithmitic, however this <a href="https://stackoverflow.com/questions/16963956/difference-between-python-float-and-numpy-float32">SO question</a> mentions that SciPy's NumPy floats are nothing more than aliases to the built-in float type. The <a href="https://docs.python.org/3.5/library/decimal.html" rel="nofollow noreferrer">decimal module</a> would be a better solution.</p>
<hr/>
<h2>Appendix</h2>
<p><sup>1</sup> - Even though I will often refer to Python's behavior, the things I talk about are part of the IEEE-754 floating point standard which is what the major programming languages use for their floating point numbers.</p>
<p><sup>2</sup> - <code>int(1.1) - 1.1</code> gives me <code>-0.10000000000000009</code>, but according to the <a href="https://docs.python.org/3.5/tutorial/floatingpoint.html" rel="nofollow noreferrer">documentation</a> .1 is really <code>0.1000000000000000055511151231257827021181583404541015625</code></p>
<p><sup>3</sup> - We used <code>int(1.1) - 1.1</code> instead of <code>int(.1) - .1</code> because <code>int(.1) - .1</code> does not give us the hidden digits, but according to the documentation they should still be there for .1, hence I say <code>int(someNum) -someNum</code> works most of the time, but not all of the time.</p>
<p><sup>4</sup> - When we use the formula <code>int(myNum) - myNum</code> what is happening is that casting the number to an integer will round the number down so <code>int(3.9)</code> becomes 3, and when we minus <code>3</code> from <code>3.9</code> we are left with <code>-.9</code>. However, for some reason that I do not know, when we get rid of all the whole numbers, and we're just left with the decimal portion, Python decides to show us everything -- the whole mantissa.</p>
<p><sup>5</sup> - this does not really affect the outcome of our analysis, but when multiplying by 100, instead of the hidden digits being shifted over by 2 decimal places, they changed a little as well.</p>
<pre>
    &gt;&gt;&gt; a = 1229.84
    &gt;&gt;&gt; int(a) - a
    -0.8399999999999<b>181</b>
    &gt;&gt;&gt; a = round(1229.84, 2) * 100
    &gt;&gt;&gt; int(a) - a
    -0.9999999999<b>854481</b> #I expected -0.99999999999<b>18100</b>?
</pre>
<p><sup>6</sup> - It may seem like we can get rid of all those extra digits by rounding to two decimal places.</p>
<pre><code>&gt;&gt;&gt; round(1229.84, 2) # which is really round(1229.8399999999999181, 2)
1229.84
</code></pre>
<p>But when we use our <code>int(someNum) - someNum</code> formula to see the hidden digits, they are still there.</p>
<pre><code>&gt;&gt;&gt; a = round(1229.84, 2)
&gt;&gt;&gt; int(a) - a
-0.8399999999999181
</code></pre>
<p>This is because Python cannot store 1229.84 as a binary floating point number. It can't be done. So... rounding 1229.84 does absolutely nothing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use floating-point arithmetic for currency; rounding error for values that cannot be represented exactly will cause the type of loss you are seeing. Instead, convert the string representation to an integer number of cents, which you can convert to euros-and-cents for display as needed.</p>
<pre><code>euros, cents = '12,1'.split(',')     # '12,1' -&gt; ('12', '1')
cents = 100*int(euros) + int(cents * 10 if len(cents) == 1 else 1)  # ('12', '1') -&gt; 1210
</code></pre>
<p>(Notice you'll need a check to handle cents without a trailing 0.)</p>
<pre><code>display_str = '%d,%d' % divMod(cents, 100) # 1210 -&gt; (12, 10) -&gt; '12.10'
</code></pre>
<p>You can also use the <code>Decimal</code> class from the <code>decimal</code> module, which essentially encapsulates all the logic for using integers to represent fractional values.</p>
</div>
<div class="post-text" itemprop="text">
<p>As @wim mentions in a comment, use the <code>Decimal</code> type from the stdlib <code>decimal</code> module instead of the built in <code>float</code> type. <code>Decimal</code> objects do not have the binary rounding behavior that floats have and also have a precision that can be user defined.</p>
<p><code>Decimal</code> should be used anywhere you are doing financial calculations or anywhere you need floating point calculations that behave like the decimal math people learn in school (as opposed to the binary floating point behavior of the built in <code>float</code> type).</p>
</div>
<span class="comment-copy">Please use <code>Decimal</code> datatype when dealing with currencies!</span>
<span class="comment-copy">Multiply by 100 first, then round.</span>
<span class="comment-copy">I convert euros to cents to do the arithmetic with int cents. But what is going wrong here with '1229,84'. This number does not seem to have a rounding boundery problem. I cannot figure out what causes the problem with this amount.</span>
<span class="comment-copy"><code>0.84</code> cannot be represented exactly as the sum of (negative) powers of 2, so it is rounded to the next closest value.  0.84 can be rounded to something close enough that you won't immediately notice, but that's because you aren't "using up" the available bits to store an integer value. Try looking at <code>1229.84 * 100</code>. where the integer portion of the value consumes enough bits to make the error noticeable. Then look at <code>1229.875 * 100</code>, since <code>0.875 == 0.5 + 0.25 + 0.125</code> (1/2 + 1/4 + 1/8).</span>
<span class="comment-copy">"Don't use floating-point arithmetic for currency" is in the running for the most important programming advice of all time.</span>
