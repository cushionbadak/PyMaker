<div class="post-text" itemprop="text">
<p>There is a simple list, for example, </p>
<pre><code>my_list = ['a', 'b', 'b', 'c', 'c']
</code></pre>
<p>I want to run through <code>my_list[1:]</code> with <code>for</code> loop to get previous element value for each iteration:</p>
<pre><code>for i in my_list[1:]:
    print(my_list[my_list.index(i)-1])
</code></pre>
<p>I expected to see <code>a b b c</code> on output, but get <code>a a b b</code> instead.
I guess this is because <code>index()</code> method search only for first <code>i</code> <strong>value</strong>, ignoring the fact that there are two elements <code>"b"</code> as well as two <code>"c"</code>...</p>
<p>How to fix this code to get expected output?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>list.index()</code> method will return the index of first occurrence of its argument. And since you have multiple duplicate items in your list it doesn't give you the expected result. You can use a simple slicing to get your expected output:</p>
<pre><code>&gt;&gt;&gt; my_list = ['a', 'b', 'b', 'c', 'c']
&gt;&gt;&gt; 
&gt;&gt;&gt; my_list[:-1]
['a', 'b', 'b', 'c']
</code></pre>
<p>Or if you want to access these items through a loop you can use <code>zip()</code> function like following:</p>
<pre><code>&gt;&gt;&gt; for i, j in zip(my_list,my_list[1:]):
...     print(i, j)
... 
a b
b b
b c
c c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Matching elements with their predecessors or sucessors is a common use case for <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a>:</p>
<pre><code>In [13]: for i,prior in zip(my_list[1:], my_list[0:]):
    print (prior)
   ....:     
a
b
b
c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can always emulate the behaviour of C/Pascal/Perl/whatever 'for' instead of Python 'for' (which is actually more like foreach). Note that the range starts with 1 to avoid returning the last element on the first iteration.</p>
<pre><code>for i in range(1, len(my_list)):
    print(my_list[i], my_list[i-1])
</code></pre>
<p>Not very Pythonic, but this approach is sometimes more intuitive for people with background in other languages.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you noticed, using <code>index</code> does not work here, as it always finds the first position of the given element. Also, it is pretty wasteful, as in the worst case you have to search the entire list each time.</p>
<p>You could use <code>enumerate</code> with <code>start</code> parameter to get the element along with its index:</p>
<pre><code>start = 1
for i, x in enumerate(my_list[start:], start):
    print(i, x, my_list[i-1]) # index, current, last
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will do the trick:</p>
<pre><code>for i in range(len(my_list)+1):
    try: print(my_list[i-1])
    except: print 'it is 1st iteration'
</code></pre>
</div>
<span class="comment-copy">Is there a reason you want this? Why not just iterate over <code>my_list[:-1]</code></span>
<span class="comment-copy">Note: <code>my_list[0-1]</code> does not raise <code>IndexError</code>.</span>
<span class="comment-copy">If it's not pythonic, don't post it. Also, what Robáµ© said</span>
<span class="comment-copy">My bad, of course it doesn't raise IndexError, it returns the -1st, <i>ie</i> last element. Although that is also hardly what OP asked for. Edited the answer to reflect that.</span>
<span class="comment-copy"><code>my_list[-1]</code> does not raise an exception.</span>
