<div class="post-text" itemprop="text">
<p>So the goal is to use a file full of tweets, to find the most occurring hashtags(#) and rank them by frequency in another file
so far i have this </p>
<pre><code>import collections
with open("/Users/Adnan/Desktop/twitter_data.txt") as data:
    for line in data:
        for part in line.split():
            if "#" in part:
                print(part)
                print(collections.Counter(part).most_common())
</code></pre>
<p>and it prints out all the different hashtags in the file. how would i send that to another file ranked by the popularity of the hashtag based on the frequency of it appearing?</p>
<p>something else ive been trying to get to work </p>
<pre><code>import re
from collections import Counter
import collections
with open("/Users/Adnan/Desktop/twitter_data.txt") as file:
    for line in file:
        for part in line.split():
            if "#" in part:
                hashtag = (re.findall(r'(?i)\#\w+', line))
                print(collections.Counter(hashtag).most_common())
</code></pre>
<p>i got close to it working, but it continues to bug out, really desperate for some help so if anyone can thank you. </p>
<p>sample data: @stellargirl I loooooooovvvvvveee my Kindle2. Not that the DX is cool, but the 2 is fantastic in its own right.
Reading my kindle2...  Love it... Lee childs is good read.
Ok, first assesment of the #kindle2...it rocks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>collections</code> module and use <code>collections.Counter(list_of_hastags).most_common(# most common you want)</code> to return the most common occurences in your file.</p>
<p>Or if you don't want to limit you don't even need to pass the number of most common occurences.</p>
<p>Small example:</p>
<pre><code>import collections
#In your file this will likely be data.readlines() depending on how your file is struct.
#to get the list of hastags, you may need to split etc depending on structure
hashtags = ['#1', '#1', '#2', '#2', '#3', '#4', '#4']
print(collections.Counter(hashtags).most_common())
</code></pre>
<p>Result:</p>
<pre><code>[('#4', 2), ('#1', 2), ('#2', 2), ('#3', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you definitely are asking for behaviour defined in <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>, you can even insert the nested for loop as a generator expression for the argument:</p>
<pre><code>data="""
#1 hello #2
this is #2 a #3 test
#2 life is good #1""".split("\n")

import collections

hashtags = collections.Counter(part
                                for line in data
                                    for part in line.split()
                                        if "#" in part)

print(hashtags.most_common())
</code></pre>
<p>gives me this output:</p>
<pre><code>[('#2', 3), ('#1', 2), ('#3', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can calculate the frequencies of each hashtag by making use of the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a> datatype as follows:</p>
<pre><code>from collections import Counter

freq = Counter()
with open("twitter_data.txt") as data:
    for line in data:
        for part in line.split():
            if "#" in part:
                freq[part] += 1
print(freq.most_common())
</code></pre>
<p>Based on the question and the structure of the existing code, it appears that <code>twitter_data.txt</code> looks something like this (each tweet separated by newline):</p>
<pre><code>A tweeted about #tag1
B tweeted about #tag2
C tweeted about #tag3
A tweeted about #tag1
A tweeted about #tag1
B tweeted about #tag2
</code></pre>
<p>Running the code above on this sample file produces the following output:</p>
<pre><code>[('#tag1', 3), ('#tag2', 2), ('#tag3', 1)]
</code></pre>
</div>
<span class="comment-copy">i found this import re import collections from collections import Counter s = "this #is a #string with several #hashtags #hashtags" tag = (re.findall(r'(?i)\#\w+', s)) # will includes # print(collections.Counter(tag).most_common()) but cant figure out how to use this with the file always recieve an error</span>
<span class="comment-copy">Give us a sample of your data so we can help you figure out what's going wrong. Otherwise we have no idea what's going to work for you or not.</span>
<span class="comment-copy">well it needs to go from highest to lowest of all the different hashtags in the file</span>
<span class="comment-copy">check out <a href="https://docs.python.org/2/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer">the documentation on <code>most_common</code></a>, you can omit the number of most common to just get all of them.</span>
<span class="comment-copy">note that the source code actually just does <code>if n is None: return sorted(self.items(), key=operator.itemgetter(1), reverse=True)</code></span>
<span class="comment-copy">i added the counter and most common but for some reason keep only receiving one hashtag and not the full list</span>
<span class="comment-copy">thats not working for me, idk maybe i could be doing it wrong ill update it now and show what ive tried</span>
<span class="comment-copy">same thing happens here as the previous suggestion("bullying".....)</span>
<span class="comment-copy">when i tried this it only gave 1 hash tag (#'bullying'...)</span>
<span class="comment-copy">@Rashid based on your updated question, you are defining a new <code>Counter()</code> within each loop, and not saving the previous one anywhere. You should define <code>freq = collections.Counter()</code> at the top-level of your program, and then update that with each occurrence of a hashtag.</span>
<span class="comment-copy">im sorry i dont follow</span>
<span class="comment-copy">i tried what you posted above and came to a point where the program kept running nonstop adding each tag non stop, am i getting close? i feel like im just missing some tiny detail or something</span>
