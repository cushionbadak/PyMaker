<div class="post-text" itemprop="text">
<p>I am trying to loop through two list in python to get a output like this.</p>
<pre><code>list1 = [a, b, c]
list2 = [1, 2, 3]
</code></pre>
<p>So it should loop for each value of list1 over list 2. list1[a] will loop 3 times over list2 and so on till it reaches c. However, I am not getting the desired output.</p>
<pre><code>i=''
list1 = ['ABC ' + str(i)+ ' '+'1' + ' ' + '5', 'CDE '+ str(i)+ ' '+  '1'+ ' ' + '5']
list2=['123','234','456']
for c in list1:
         for i in list2:
               print c
</code></pre>
<p>Output:</p>
<pre><code>ABC  1 5
ABC  1 5
ABC  1 5
CDE  1 5
CDE  1 5
CDE  1 5
</code></pre>
<p>Desired out put should be like below: </p>
<pre><code>ABC 123 1 5
CDE 123 1 5
ABC 234 1 5
CDE 234 1 5
ABC 456 1 5
CDE 456 1 5
</code></pre>
<p>Please guide me what I am missing here, am new with this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to interpolate the <code>list2</code> value inside the loop. You could the <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code> function</a> instead of nesting your loops; do swap the order of the lists if you want the values of <code>list1</code> to alterate:</p>
<pre><code>from itertools import product

list1 = ['ABC {} 1 5', 'CDE {} 1 5']
list2 = ['123','234','456']
for l2, l1 in product(list2, list1):
    print l1.format(l2)
</code></pre>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>str.format()</code> method</a> fills the <code>{}</code> in the <code>list1</code> strings with your <code>l2</code> values, letting you avoid having to rebuild <code>list2</code> from scratch each time:</p>
<pre><code>&gt;&gt;&gt; for l2, l1 in product(list2, list1):
...     print(l1.format(l2))
...
ABC 123 1 5
CDE 123 1 5
ABC 234 1 5
CDE 234 1 5
ABC 456 1 5
CDE 456 1 5
</code></pre>
<p>Another alternative is for <code>list1</code> to contain <em>tuples</em> of values to be used, and only when printing you convert everything to one string by using <code>print()</code> as a function (Python 3, or a <code>from __future__</code> import in Python 2):</p>
<pre><code>from __future__ import print_function

list1 = [('ABC', 1, 5), ('CDE', 1, 5)]
list2 = ['123','234','456']
for l2, (a, b, c) in product(list2, list1):
    print(a, l2, b, c)
</code></pre>
<p>It depends on what else you want to do with the values produced.</p>
<p>Note that if the <code>1</code> and <code>5</code> numbers are otherwise unchanged between the values of <code>list1</code>, there is no need at all to do a complicated dance with string templates or tuples. You'd just reference those inside the loop:</p>
<pre><code>b, c = 1, 5
list1 = ['ABC', 'CDE']
list2 = ['123','234','456']
for l2, l1 in product(list2, list1):
    print '{} {} {} {}'.format(l1, l2, b, c)
</code></pre>
<p>I still used string formatting just to show another form of combining several values into one string.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to move the construction of <code>list1</code> into your for loop. Reorganize your lines as follows:</p>
<pre><code>list2 = ['123', '234', '456']

for i in list2:
    list1 = ['ABC ' + str(i) + ' ' + '1' + ' ' + '5',
             'CDE ' + str(i) + ' ' + '1' + ' ' + '5']
    for c in list1:
        print c
</code></pre>
<p>this will print</p>
<pre><code>ABC 123 1 5
CDE 123 1 5
ABC 234 1 5
CDE 234 1 5
ABC 456 1 5
CDE 456 1 5
</code></pre>
<p>That being said, this can be improved using <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow">string formatting</a>:</p>
<pre><code>for i in list2:
    list1 = ['ABC {0} 1 5', 'CDE {0} 1 5']
    for c in list1:
        print c.format(i)
</code></pre>
</div>
<span class="comment-copy">Why not use string templating?</span>
<span class="comment-copy">@MartijnPieters I just pointed out the error in OPs code for them to understand what was wrong with it. I was going to post an improved version but you already beat me to it.</span>
<span class="comment-copy">Do feel free to keep editing anyway! Future visitors would probably appreciate another perspective.</span>
