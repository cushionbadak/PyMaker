<div class="post-text" itemprop="text">
<p>I'm trying to use the heappq module in the python 3.5 standard library to make a priority queue of objects of the same type. I'd like to be able to heapify based on an attribute of the objects, then change the value of some of those attributes, then re-heapify based on the new values. I'm wondering how I go about doing this.</p>
<pre><code>import heappq
class multiNode:
    def __init__(self, keyValue):
        self.__key = keyValue
    def setKey(self, keyValue):
        self.__key = keyValue
    def getKey(self):
        return self.__key

queue = [multiNode(1), multiNode(2), multiNode(3)]
heapq.heapify(queue) #want to heapify by whatever getKey returns for each node
queue[0].setKey(1000)
heapq.heapify(queue) #re heapify with those new values
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a variety of ways of making your code work. For instance, you could make your items orderable by implementing some of the <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow">rich comparison operator methods</a> (and perhaps use <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow"><code>functools.total_ordering</code></a> to implement the rest):</p>
<pre><code>@functools.total_ordering
class multiNode:
    def __init__(self, keyValue):
        self.__key = keyValue
    def setKey(self, keyValue):
        self.__key = keyValue
    def getKey(self):
        return self.__key
    def __eq__(self, other):
        if not isinstance(other, multiNode):
            return NotImplemented
        return self.__key == other.__key
    def __lt__(self, other):
        if not isinstance(other, multiNode):
            return NotImplemented
        return self.__key &lt; other.__key
</code></pre>
<p>This will make your code work, but it may not be very efficient to reheapify your queue every time you make a change to a node within it, especially if there are a lot of nodes in the queue. A better approach might be to write some extra logic around the queue so that you can invalidate a queue entry without removing it or violating the heap property. Then when you have an item you need to update, you just invalidate it's old entry and add in a new one with the new priority.</p>
<p>Here's a quick and dirty implementation that uses a dictionary to map from a node instance to a <code>[pritority, node]</code> list. If the node is getting its priority updated, the dictionary is checked and the <code>node</code> part of the list gets set to <code>None</code>. Invalidated entries are ignored when popping nodes off the front of the queue.</p>
<pre><code>queue = []
queue_register = {}

def add_to_queue(node)
    item = [node.getKey(), node]
    queue.heappush(queue, item)
    queue_register[node] = item

def update_key_in_queue(node, new_key):
    queue_register[node][1] = None # invalidate old item
    node.setKey(new_key)
    add_to_queue(node)

def pop_from_queue():
    node = None
    while node is None:
        _, node = heapq.heappop(queue) # keep popping items until we find one that's valid
    del queue_register[node] # clean up our bookkeeping record
    return node
</code></pre>
<p>You may want to test this against reheapifying to see which is faster for your program's actual usage of the queue.</p>
<p>A few final notes about your <code>multiNode</code> class (unrelated to what you were asking about in your question):</p>
<p>There are a number of things you're doing in the class that are not very Pythonic. To start with, the most common naming convention for Python uses <code>CapitalizedNames</code> for classes, and <code>lower_case_names_with_underscores</code> for almost everything else (variables of all kinds, functions, modules).</p>
<p>Another issue using double leading underscores for <code>__key</code>. Double leading (and not trailing) undescrores invokes Python's name mangling system. This may seem like its intended as a way to make variables private, but it is not really. It's more intended to help prevent accidental name collisions, such as when you're setting an attribute in a proxy object (that otherwise mimics the attributes of some other object) or in a mixin class (which may be inherited by other types with unknown attributes). If code outside your class really wants to access the mangled attribute <code>__key</code> in your <code>multiNode</code> class, they can still do so by using <code>_multiNode__key</code>. To hint that something is <em>intended</em> to be a private attribute, you should just use a single underscore <code>_key</code>.</p>
<p>And that brings me right to my final issue, that <code>key</code> probably shouldn't be private at all. It is not very Pythonic to use <code>getX</code> and <code>setX</code> methods to modify a private instance variable. It's much more common to document that the attribute is part of the class's public API and let other code access it directly. If you later decide you need to do something fancy whenever the attribute is looked up or modified, you can use a <code>property</code> descriptor to automatically transform attribute access into calls to a getter and setter function. Other programming languages usually start with getters and setters rather than public attributes because there is no such way of changing implementation of an attribute API later on. So anyway, I'd make your class's <code>__init__</code> just set <code>self.key = keyValue</code> and get rid of <code>setKey</code> and <code>getKey</code> completely!</p>
</div>
<div class="post-text" itemprop="text">
<p>A crude way of doing what you're looking for would be to use <code>dicts</code> and Python's built in <code>id()</code> method. This method would basically allow you keep your heap as a heap of the <code>id</code>'s of the objects that you create and then update those objects by accessing them in the <code>dict</code> where their <code>id</code>'s are the keys. I tried this on my local machine and it seems to do what you're looking for:</p>
<pre><code>import heapq
class multiNode:
    def __init__(self, keyValue):
        self.__key = keyValue
    def setKey(self, keyValue):
        self.__key = keyValue
    def getKey(self):
        return self.__key

first_node = multiNode(1)
second_node = multiNode(2)
thrid_node = multiNode(3)
# add more nodes here
q = [id(first_node), id(second_node), id(third_node)]
mutilNode_dict = {
    id(first_node): first_node,
    id(second_node): second_node,
    id(third_node): third_node
}
heapq.heapify(q)
multiNode_dict[q[0]].setKey(1000)
heapq.heapify(q)
</code></pre>
<p><code>heapify()</code> won't really do too much here because the <code>id</code> of the object is going to be the same until it's deleted. It is more useful if you're adding new objects to the heap and taking objects out.</p>
</div>
<span class="comment-copy">Is there something wrong with what you've written currently?</span>
<span class="comment-copy">The types are unordrerable in the code provided. <code>heapq.heapify(queue)</code> just gives a type error, will not execute. I'm looking for a solution that will work as if the types were orderable</span>
<span class="comment-copy">Is there a reason not to make your class orderable, with e.g. <code>def __lt__(self, other): return self.__key &lt; other.__key</code>?</span>
<span class="comment-copy">You can set the keys of dicts to be objects? I didn't know you could do that. Pretty neat.</span>
<span class="comment-copy">Wow, very helpful post. That solved my problem and I wasn't aware of the logic behind the single and double underscores. So having the single underscore does nothing besides signal its intention to be private to anyone reading? Also I definitely appreciate the alternate implementation using the dictionary, and I see what you're saying about efficiency in that case.</span>
