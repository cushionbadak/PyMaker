<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>class Stat(list):
    def __init__(self, lst = []):
        self.s = list(lst)

    def __repr__(self):
        return "Stat({})".format(self.s)

    def add(self, item):
        self.s.append(item)

    def len(self):       
        return len(self.s)

...(more methods, but not necessary)
</code></pre>
<p>All of the methods work properly but <code>len()</code>. No matter the length of the <code>Stat</code> object, the returned length is always 0; I don't understand why.</p>
</div>
<div class="post-text" itemprop="text">
<p>it will return 0 always when you are using it like this:</p>
<pre><code>x = Stat([1,3,4,5])
print len(x)
</code></pre>
<p>if you want to override len function use this code:</p>
<pre><code>def __len__(self):       
    return len(self.s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>s = Stat([1, 2])
s.add(1)
s.add(2)
print s.len()
</code></pre>
<p>I have run your code, the result is correct in my environment.</p>
</div>
<div class="post-text" itemprop="text">
<p>Override the magic method <code>__len__(self)</code> to control the output of a call to <code>len(my_stat_object)</code>:</p>
<pre><code>class Stat(list):
    def __init__(self, lst = []):
        self.s = list(lst)

    def __repr__(self):
        return "Stat({})".format(self.s)

    def add(self, item):
        self.s.append(item)

    def __len__(self):       
        return len(self.s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If what you're trying to run is <code>len(stat)</code> and not <code>stat.len()</code>, your function <code>len</code> should be named <code>__len__</code> instead. Here's the docs: <a href="https://docs.python.org/3/reference/datamodel.html#object.__len__" rel="nofollow noreferrer">object.<strong>len</strong></a></p>
<pre><code>stat = Stat([1, 2])
len(s) # 0 if len, 2 if __len__
</code></pre>
<p>As a side note, you might want to replace <code>lst=[]</code> in your <code>init</code> definition, as it can cause some weird looking behaviours. Read about it here: <a href="https://stackoverflow.com/questions/1132941/least-astonishment-in-python-the-mutable-default-argument">mutable default argument</a></p>
</div>
<span class="comment-copy">How are you creating the Stat object and calling the <code>len</code> method?</span>
<span class="comment-copy">first add some item in 1st array</span>
<span class="comment-copy">You probably shouldn’t be inheriting from <code>list</code>.</span>
<span class="comment-copy">If you want to be able to do <code>len(Stat())</code>, the special method name is <code>__len__</code>. The right way to call the <code>len</code> method (as it’s just a method named <code>len</code>) on your current class is just <code>Stat().len()</code>. But you wouldn’t need to inherit from <code>list</code> to do either of these. Pick one of wrapping <code>list</code> (having <code>self.s</code>) or inheriting from it.</span>
<span class="comment-copy">On the note of not inheriting from list, further reading <a href="http://stackoverflow.com/questions/36688966/let-a-class-behave-like-its-a-list-in-python/36690145">here</a></span>
<span class="comment-copy">This solved it! Don't know why I didn't try this... Thanks!</span>
<span class="comment-copy">@Frank I think you inherited from <code>list</code> in order to be able to do <code>len(myobj)</code>. Seriously consider not inheriting from <code>list</code> now that you know that  <code>def __len__(self)</code> is the key to be able to do <code>len(myobj)</code>.</span>
<span class="comment-copy">When calling the length method it should be called as <code>len(object)</code></span>
<span class="comment-copy">@Frank You have to override <code>__len__</code> then</span>
