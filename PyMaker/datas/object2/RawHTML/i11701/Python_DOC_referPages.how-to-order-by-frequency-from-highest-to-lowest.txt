<div class="post-text" itemprop="text">
<p>So the goal is to open this twitter file with tweets and order the hashtags by frequency to tell the trending topics, i already asked this before but ive changed my code a bit and got to the point where it is printing the hashtags and the amount, but how would i order this and send it to another file called trending.txt </p>
<pre><code>counts ={}
with open("/Users/Adnan/Desktop/twitter_data.txt") as data:
    for tag in data:
        for line in data:
            for part in line.capitalize().split():
                if "#" in part:
                    counts[part] = counts.get(part,0) + 1

for w in counts:
    print((w+','+str(counts[w])+'/n'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><em>Counter</em></a> dict with <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow"><em>most_common</em></a> using the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">csv</a>  lib to write the data to your outfile:</p>
<pre><code>from collections import Counter
import csv


with open("/Users/Adnan/Desktop/twitter_data.txt") as data, open("trending.txt") as out:
    wr = csv.writer(out)
    counts = Counter(part for tag in map(str.capitalize, data)
                     for part in data.split()
                         if "#" in part)
    wr.writerows(counts.most_common())
</code></pre>
<p>Using <code>map(str.capitalize, data)</code> will map <code>str.capitalize</code> on all the lines which will be more efficient than repeatedly calling in your loop, writerows takes an iterable of iterables so it will write the  <code>tag, count</code> tuples returned from most_common to each line of your outfile. </p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than a dictionary, use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter()</code> object</a>; it is a specialised dictionary that contains your desired functionality out of the box:</p>
<pre><code>from collections import Counter

counts = Counter()
with open("/Users/Adnan/Desktop/twitter_data.txt") as data:
    for tag in data:
        for line in data:
            for part in line.capitalize().split():
                if "#" in part:
                    counts[part] += 1

with open('trending.txt') as trending:
    for hashtag, count in counts.most_common():
        print(hashtag, count, sep=',', file=trending)
</code></pre>
<p>The <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow"><code>Counter.most_common()</code> method</a> produces <code>(key, count)</code> values in sorted order, from most frequent to least. You can limit the number of entries returned by passing in an integer:</p>
<pre><code>with open('trending.txt') as trending:
    # The 10 most popular hashtags
    for hashtag, count in counts.most_common(10):
        print(hashtag, count, sep=',', file=trending)
</code></pre>
<p>Note that your <code>for tag in data</code> will only iterate <em>once</em>; it'll read the first line, after which <code>for line in data:</code> processes the rest of the  file. You could use <code>next(data, None)</code> instead of that loop:</p>
<pre><code>with open("/Users/Adnan/Desktop/twitter_data.txt") as data:
    tag = next(data, None)  # read the first line
    for line in data:
        for part in line.capitalize().split():
            if "#" in part:
                counts[part] += 1
</code></pre>
<p>Last but not least, if you are trying to produce a CSV file (comma-separated data), use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code> module</a>:</p>
<pre><code>import csv

with open('trending.txt') as trending:
    writer = csv.csvwriter(trending)
    writer.writerows(counts.most_common())
</code></pre>
<p>The above writes all counts, in sorted order, to the CSV file.</p>
</div>
<span class="comment-copy">@Smac89: this is sorting by <i>value</i>, in reverse order. Moreover, this comprises a counting operation..</span>
<span class="comment-copy">thank you this helped quick question though in some of the posts theyll have #BULLYING and #bullying how would i got about counting them as the same hashtag? idk if the .captalize() is working correctly</span>
<span class="comment-copy">never mind i think it just worked :D</span>
<span class="comment-copy">@Rashid, it should be working as is, if you add a sample of the file I will have a look</span>
<span class="comment-copy">@Rashid,  No worries.</span>
