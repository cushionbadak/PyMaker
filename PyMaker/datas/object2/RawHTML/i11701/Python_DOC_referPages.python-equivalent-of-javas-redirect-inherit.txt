<div class="post-text" itemprop="text">
<p>I am trying to replicate the following script written in Java in Python, but I am not seeing a equivalent of Redirect.INHERIT in Python. What would be the correct approach for porting this?</p>
<pre><code>import java.lang.ProcessBuilder;
import java.lang.ProcessBuilder.Redirect;

public class TestProcessBuilder {
    public static void main(String args[]) {
        try {
            ProcessBuilder builder = new ProcessBuilder("fairymax");
            builder.redirectInput(Redirect.INHERIT);
            builder.redirectOutput(Redirect.INHERIT);
            builder.redirectError(Redirect.INHERIT);

            Process subProcess = builder.start();
            subProcess.waitFor();
        }
        catch (Exception e) {
           e.printStackTrace();
        }
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>Redirect.INHERIT</code> is the default in Python. To emulated the Java code in Python:</p>
<pre><code>#!/usr/bin/env python
import subprocess

rc = subprocess.call("fairymax")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The subprocess's Popen.communicate() method does the same thing as the submitted block of code.</p>
<pre><code>import subprocess
p = subprocess.Popen("fairymax").communicate()
</code></pre>
<p>I have tested this and it works with Python but not Jython.</p>
</div>
<span class="comment-copy">The documentation of <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> has all you need.</span>
<span class="comment-copy">there is no need to call <code>.communicate()</code> unless you redirect stdin/stdout/stderr (if you don't see <code>subprocess.PIPE</code> in the code; do not call <code>.communicate()</code>).</span>
