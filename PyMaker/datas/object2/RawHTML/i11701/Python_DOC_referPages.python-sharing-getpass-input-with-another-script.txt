<div class="post-text" itemprop="text">
<p>I'm trying to make a script consisting of multiple modules, I need su/sudo for these scripts, but instead of having the user input their password every single time, I just want to ask for it once and be done with it. (I also don't want to store the password in plaintext because it's intended to be used on different machines with different users/passwords)</p>
<p>Okay, so this is what I've done so far but I keep getting errors. I'm not sure if any of it is correct, I am new to python.</p>
<p>in my file, main.py: </p>
<pre><code>import getpass 
import subprocess

suStart = getpass.getpass("please enter your password")
suPass = suStart
subprocess.Popen(['python', 'test.py'])
</code></pre>
<p>and in test.py:</p>
<pre><code>from manager import suPass
print suPass
</code></pre>
<p>when main calls test, it tries to run getpass again, and I get IOError Errno 5.</p>
<p>I guess what i need is how to save suStart as it's own string? I thought using suPass would do that, but it does not.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>suPass</code> is not defined in the scope of <code>test.py</code>, only <code>main.py</code>. In order for <code>test.py</code> to be aware of the variable <code>suPass</code> you need to pass it in as an argument when initializing the subprocess, so, pass it in along with the args and change <code>test.py</code> to reflect this:</p>
<pre><code>from sys import argv

suPass = argv[1]    # we use the second index of argv, as the first index
                    # is actually the name of the script, test.py

print suPass
</code></pre>
<p>Now, in your subprocess call, add <code>suPass</code> to your arguments:</p>
<pre><code>subprocess.Popen(['python', 'test.py', suPass])
</code></pre>
<hr/>
<p>Now, if you would like to somehow store this password securely, you could use <code>hashlib</code>, <code>binascii</code> and <code>os.urandom</code> to generate a password hash:</p>
<pre><code>import hashlib
import binascii
from os import urandom
import getpass

salt = os.urandom(64) # where 64 can be any number of bytes, this is just
                      # a random bytes object for making the hash more secure
                      # make sure to keep it when checking a user's password input
                      # or the generated hash will not match!
# get a new password, and convert it to the bytes type to make it easier later
new_password = bytes(getpass.getpass('Enter a password: '), encoding='UTF-8')

# this code generates a bytes object using hashlib.pbkdf2_hmac and
# converts it to hexadecimal format with binascii.hexlify
new_hash = binascii.hexlify(hashlib.pbkdf2_hmac('sha512', new_password, salt, 100000)

print(new_hash)
</code></pre>
<p><code>new_hash</code> and <code>salt</code> can be saved to a file (or database, or another storage medium), and you can encrypt the user's password entry at a later time in a new program, then compare the hash to what's stored in the file.</p>
<p>Here is the Python <a href="https://docs.python.org/3/library/hashlib.html#key-derivation" rel="nofollow">Docs Example</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple but effective approach: in order for <code>test.py</code> to be aware of the variable <code>suPass</code> you need to share this later one between the 2 modules.</p>
<p>From <a href="https://docs.python.org/2/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="nofollow"><em>How do I share global variables across modules?</em></a></p>
<blockquote>
<p>The canonical way to share information across modules within a single
  program is to create a special module (often called config or cfg).
  Just import the config module in all modules of your application; the
  module then becomes available as a global name. Because there is only
  one instance of each module, any changes made to the module object get
  reflected everywhere.</p>
</blockquote>
<p>Thus here are your modules:</p>
<p><strong>main.py</strong></p>
<pre><code>import getpass 
import subprocess

suStart = getpass.getpass("please enter your password")
suPass = suStart
</code></pre>
<p><strong>test.py</strong></p>
<pre><code>import main
print main.suPass
</code></pre>
<p>Note how <code>subPass</code> is accessed in <code>test.py</code>: calling the module <code>main.py</code> then the variable itself (<code>main.suPass</code>)</p>
</div>
<span class="comment-copy">1). Why are you attempting to execute python code via <code>subprocess</code>. Why not just encapsulate the code properly into functions, import the script(s) and call the functions? 2). Once you have the password how do you intend to use it? <code>su</code> / <code>sudo</code> don't allow you to submit the password as a variable, it <b>must</b> be given via a terminal, and you can't just pipe it to them.</span>
<span class="comment-copy">oh, what i am doing, is executing the script from terminal, then I'm creating a shell to run su commands</span>
<span class="comment-copy">Ok. It looks like I was mistaken: you <i>can</i> pass the password to <code>sudo</code> by using the <code>-S</code> option, as shown <a href="http://superuser.com/a/67766">here</a>. However, I think it'd be more secure (and easier) to just make a simple bash script that runs your Python scripts, and run that bash script with su or sudo.</span>
<span class="comment-copy">This worked great! Thanks!  Also, regarding the hash, would I be able to just use new_hash as my password inputs or would i have to decrypt it first?  Sorry, it sounds like it should be essential for my spec, but I have no idea how hashes work. :(</span>
<span class="comment-copy">Hashes are not decrypted, the presented algorithms are one-way. In order to compare the user input to the stored hash, you need to get the user input, encrypt it with <b><i>the same salt</i></b> you used to encrypt the first hash with, and the same number of iterations.</span>
<span class="comment-copy">Ah, I had a feeling that may be it, I'm just usually wrong  so I second guess myself. Thanks again!</span>
<span class="comment-copy">When I use this method, I get the same IOError message and it stops working :/, but spectre's answer worked great, but thanks for the suggestion :)</span>
