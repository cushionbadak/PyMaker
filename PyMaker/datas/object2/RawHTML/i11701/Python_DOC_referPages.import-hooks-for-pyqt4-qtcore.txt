<div class="post-text" itemprop="text">
<p>I'm am attempting to setup some <a href="https://docs.python.org/3/reference/import.html#import-hooks">import hooks</a> through <code>sys.meta_path</code>, in a somewhat similar approach to <a href="https://stackoverflow.com/questions/7268643/package-specific-import-hooks-in-python">this SO question</a>. For this, I need to define two functions <code>find_module</code> and <code>load_module</code> as explained in the link above. Here is my <code>load_module</code> function,</p>
<pre><code>import imp

def load_module(name, path):
    fp, pathname, description = imp.find_module(name, path)

    try:
        module = imp.load_module(name, fp, pathname, description)
    finally:
        if fp:
             fp.close()
    return module
</code></pre>
<p>which works fine for most modules, but fails for <code>PyQt4.QtCore</code> when using Python 2.7:</p>
<pre><code>name = "QtCore"
path = ['/usr/lib64/python2.7/site-packages/PyQt4']

mod = load_module(name, path)
</code></pre>
<p>which returns,</p>
<pre><code>Traceback (most recent call last):
   File "test.py", line 19, in &lt;module&gt;
   mod = load_module(name, path)
   File "test.py", line 13, in load_module
   module = imp.load_module(name, fp, pathname, description)
SystemError: dynamic module not initialized properly
</code></pre>
<p>The same code works fine with Python 3.4 (although <a href="https://docs.python.org/3.4/library/imp.html"><code>imp</code></a> is getting deprecated and <a href="https://docs.python.org/3.4/library/importlib.html#module-importlib"><code>importlib</code></a> should ideally be used instead there). </p>
<p>I suppose this has something to do with the SIP dynamic module initialization. Is there anything else I should try with Python 2.7?</p>
<p>Note: this applies both with <code>PyQt4</code> and <code>PyQt5</code>.</p>
<p><strong>Edit</strong>: this may be related to <a href="https://stackoverflow.com/questions/26856515/python-import-failed-for-pyqt4">this question</a> as indeed,</p>
<pre><code>cd /usr/lib64/python2.7/site-packages/PyQt4
python2 -c 'import QtCore'
</code></pre>
<p>fails with the same error. Still I'm not sure what would be a way around it...</p>
<p><strong>Edit2</strong>: following <strong>@Nikita</strong>'s request for a concrete use case example, what I am trying to do is to redirect the import, so when one does <code>import A</code>, what happens is <code>import B</code>. One could indeed think that for this it would be sufficient to do module renaming in <code>find_spec/find_module</code> and then use the default <code>load_module</code>. However, it is unclear where to find a default <code>load_module</code> implementation in Python 2. The closest implementation I have found of something similar is <a href="https://github.com/PythonCharmers/python-future/blob/master/src/future/standard_library/__init__.py#L232"><code>future.standard_library.RenameImport</code></a>. It does not look like there is a backport of the complete implementation of <code>importlib</code> from Python 3 to 2.</p>
<p>A minimal working example for the import hooks that reproduces this problem can be found in this <a href="https://gist.github.com/rth/69a5bbda069d1e735d57c1052c05e354">gist</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>UPD: This part in not really relevant after answer updates, so see UPD below.</em></strong></p>
<p>Why not just use <a href="https://docs.python.org/2/library/importlib.html?highlight=imp#importlib.import_module" rel="nofollow"><code>importlib.import_module</code></a>, which is available in both Python 2.7 and Python 3:</p>
<pre><code>#test.py

import importlib

mod = importlib.import_module('PyQt4.QtCore')
print(mod.__file__)
</code></pre>
<p>on Ubuntu 14.04:</p>
<pre><code>$ python2 test.py 
/usr/lib/python2.7/dist-packages/PyQt4/QtCore.so
</code></pre>
<p>Since it's a dynamic module, as said in the error (and the actual file is <code>QtCore.so</code>), may be also take a look at <a href="https://docs.python.org/2/library/imp.html?highlight=imp#imp.load_dynamic" rel="nofollow"><code>imp.load_dynamic</code></a>.</p>
<p>Another solution might be to force the execution of the module initialization code, but IMO it's too much of a hassle, so why not just use <code>importlib</code>.</p>
<p><strong>UPD</strong>: There are things in <code>pkgutil</code>, that might help. What I was talking about in my comment, try to modify your finder like this:</p>
<pre><code>import pkgutil

class RenameImportFinder(object):

    def find_module(self, fullname, path=None):
        """ This is the finder function that renames all imports like
             PyQt4.module or PySide.module into PyQt4.module """
        for backend_name in valid_backends:
            if fullname.startswith(backend_name):
                # just rename the import (That's what i thought about)
                name_new = fullname.replace(backend_name, redirect_to_backend)
                print('Renaming import:', fullname, '-&gt;', name_new, )
                print('   Path:', path)


                # (And here, don't create a custom loader, get one from the
                # system, either by using 'pkgutil.get_loader' as suggested
                # in PEP302, or instantiate 'pkgutil.ImpLoader').

                return pkgutil.get_loader(name_new) 

                #(Original return statement, probably 'pkgutil.ImpLoader'
                #instantiation should be inside 'RenameImportLoader' after
                #'find_module()' call.)
                #return RenameImportLoader(name_orig=fullname, path=path,
                #       name_new=name_new)

    return None
</code></pre>
<p>Can't test the code above now, so please try it yourself.</p>
<p>P.S. Note that <code>imp.load_module()</code>, which worked for you in Python 3 is <a href="https://docs.python.org/3.5/library/imp.html#imp.load_module" rel="nofollow">deprecated since Python 3.3</a>.</p>
<p>Another solution is not to use hooks at all, but instead wrap the <code>__import__</code>:</p>
<pre><code>print(__import__)

valid_backends = ['shelve']
redirect_to_backend = 'pickle'

# Using closure with parameters 
def import_wrapper(valid_backends, redirect_to_backend):
    def wrapper(import_orig):
        def import_mod(*args, **kwargs):
            fullname = args[0]
            for backend_name in valid_backends:
                if fullname.startswith(backend_name):
                    fullname = fullname.replace(backend_name, redirect_to_backend)
                    args = (fullname,) + args[1:]
            return import_orig(*args, **kwargs)
        return import_mod
    return wrapper

# Here it's important to assign to __import__ in __builtin__ and not
# local __import__, or it won't affect the import statement.
import __builtin__
__builtin__.__import__ = import_wrapper(valid_backends, 
                                        redirect_to_backend)(__builtin__.__import__)

print(__import__)

import shutil
import shelve
import re
import glob

print shutil.__file__
print shelve.__file__
print re.__file__
print glob.__file__
</code></pre>
<p>output:</p>
<pre><code>&lt;built-in function __import__&gt;
&lt;function import_mod at 0x02BBCAF0&gt;
C:\Python27\lib\shutil.pyc
C:\Python27\lib\pickle.pyc
C:\Python27\lib\re.pyc
C:\Python27\lib\glob.pyc
</code></pre>
<p><code>shelve</code> renamed to <code>pickle</code>, and <code>pickle</code> is imported by default machinery with the variable name <code>shelve</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When finding a module which is part of package like <code>PyQt4.QtCore</code>, you have to recursively find each part of the name without <code>.</code>. And <code>imp.load_module</code> requires its <code>name</code> parameter be full module name with <code>.</code> separating package and module name.  </p>
<p>Because <code>QtCore</code> is part of a package, you shoud do <code>python -c 'import PyQt4.QtCore'</code> instead. Here's the code to load a module.  </p>
<pre><code>import imp

def load_module(name):
    def _load_module(name, pkg=None, path=None):
        rest = None
        if '.' in name:
            name, rest = name.split('.', 1)
        find = imp.find_module(name, path)
        if pkg is not None:
            name = '{}.{}'.format(pkg, name)
        try:
            mod = imp.load_module(name, *find)
        finally:
            if find[0]:
                find[0].close()
        if rest is None:
            return mod 
        return _load_module(rest, name, mod.__path__)
    return _load_module(name)
</code></pre>
<p>Test;  </p>
<pre><code>print(load_module('PyQt4.QtCore').qVersion())  
4.8.6
</code></pre>
</div>
<span class="comment-copy">If it may be useful, to give some general context for what I'm trying to do, see the <a href="https://github.com/rth/SiQt" rel="nofollow noreferrer">SiQt</a> package, and this problem is discussed in <a href="https://github.com/rth/SiQt/issues/4" rel="nofollow noreferrer">this github issue</a>.</span>
<span class="comment-copy">i really don't understand your problem but what's wrong with <code>__import__('PyQt4.QtCore')</code>. does it lead to infinite recursion?</span>
<span class="comment-copy">@danidee Nothing is wrong with <code>__import__('A')</code>, but it is equivalent to using <code>import A</code>. What I want is to change what happens when you do that, and in particular run <code>import B</code>, when you <code>import A</code>. This can be done with import hooks in <code>sys.meta_path</code>, but they require lower level functions such as <code>imp.load_module</code>.</span>
<span class="comment-copy">@rth, indeed in the docs about <code>imporylib</code> in Python 2.7 it's written: <i>"This module is a minor subset of what is available in the more full-featured package of the same name from Python 3.1 that provides a complete implementation of import."</i>. There're thoughts about custom imports in <a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow noreferrer">PEP302</a>, I'll look at it and share my thoughts in the answer update.</span>
<span class="comment-copy">I agree with your two first ideas, unfortunately they do not work, I have tried it before. a) As far as I understand, <code>importlib.import_module</code> is too high level to put in a <code>sys.meta_path</code> import hooks. What happens is when you import a package it will look in <code>sys.meta_path</code>, and if the <code>load_module</code> function uses <code>importlib.import_module</code> it will look in <code>sys.meta_path</code> again where it will find the same <code>load_module</code> function etc, so you get an infinite recursion problem...  What is needed is something of lower lever such as <code>imp.find_module</code> or `importlib.machinery.SourceFileLoader</span>
<span class="comment-copy">b) I have tried <code>imp.load_dynamic</code>, it produces the same result (since it must be called by <code>imp.load_module</code> I suppose). c) Yes, I know I'd rather not initialize that module by hand.  What I don't understand is why I have to (i.e. what operation <code>importlib.import_module</code> does and <code>imp.load_module</code> doesn't, that make this necessary). The same is true for all PyQt4/PyQt4 submodules. What I'm trying to achieve is import <code>SiQt.QtCore</code> when <code>PyQt4.QtCore</code>is imported. I know this is possible since  python future.standard_library.RenameImport does it in PY2 (essentially it's just import renaming).</span>
<span class="comment-copy">@rth, by the link you provided about import hooks, it says that the meta path finder will call <code>find_spec</code>/<code>find_module</code> recursively for each part of the path. E.g. <code>mpf.find_spec("PyQt4", None, None)</code> and then one more <code>mpf.find_spec("PyQt4.QtCore", PyQt4.__path__, None)</code>. So if you're hooking in place of <code>find_spec</code> or in some other part of mpf, may be replace <code>PyQt4</code> with <code>SiQt</code> in the name string and then call the default machinery to let it load <code>SiQt</code> by itself. If I'm wrong, please, provide some code used for hooks to better understand what you are trying to accomplish.</span>
<span class="comment-copy">I agree that using the default  machinery for <code>load_module</code> would have been nice. See Edit2 in the question above.</span>
<span class="comment-copy">@rth, if hooks won't work, you can wrap the <code>__import__</code>, check out the answer update.</span>
