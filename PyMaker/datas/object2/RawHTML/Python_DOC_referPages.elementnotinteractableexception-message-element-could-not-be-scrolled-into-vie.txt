<div class="post-text" itemprop="text">
<p>I have this code:</p>
<pre><code>driver.switch_to.window(window_after)

try:
    myElem = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.NAME, '_eventId_confirmed')))
    print ("Page 2 is ready!")
except TimeoutException:
    print ("Loading took too much time!")

btn = driver.find_element_by_name('_eventId_confirmed')

btn.click()
</code></pre>
<p>as you can see I first switch window and then check for an element, get that element (a button) and finally try to click on said button. This works maybe 2 out of 3 times but ever so often does it fail with this error message</p>
<pre><code>selenium.common.exceptions.ElementNotInteractableException: Message: Element &lt;button class="btn" name="_eventId_confirmed"&gt; could not be scrolled into view
</code></pre>
<p>When visually looking at the flow when it is executing everything seems fine (my first guess was that the window switch didn't work as expected) and the browser ends up in the expected state where I am able to manually click this button. Interestingly enough, there is no timeout or similar when this error occurs, it happens instantly during execution.</p>
<p>Any ideas what's going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>This problem usually arises when the element you are trying to click is present on the page but it is not fully visible and the point where selenium tries to click is not visible.<br/>
In this case, you can use javascript to click on the element, which actually operates directly on the html structure of the page.<br/>
You can use it like:</p>
<pre><code>element = driver.find_element_by_name("_eventId_confirmed")
driver.execute_script("arguments[0].click();", element)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are the 2 options.</p>
<p><strong>Using selenium <code>location_once_scrolled_into_view</code> method:</strong></p>
<pre><code>btn.location_once_scrolled_into_view
</code></pre>
<p><strong>Using Javascript:</strong></p>
<pre><code>driver.execute_script("arguments[0].scrollIntoView();",btn)
</code></pre>
<p><strong>Sample Code:</strong></p>
<pre><code>url = "https://stackoverflow.com/questions/55228646/python-selenium-cant-sometimes-scroll-element-into-view/55228932?    noredirect=1#comment97192621_55228932"
driver.get(url)
element = driver.find_element_by_xpath("//a[.='Contact Us']")
element.location_once_scrolled_into_view
time.sleep(1)
driver.find_element_by_xpath("//p[.='active']").location_once_scrolled_into_view
driver.execute_script("arguments[0].scrollIntoView();",element)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As your final step is to invoke <code>click()</code> on the desired element, so instead of using the <a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions" rel="nofollow noreferrer">expected_conditions</a> as <code>presence_of_element_located()</code> you need to use <a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.element_to_be_clickable" rel="nofollow noreferrer"><code>element_to_be_clickable()</code></a> as follows:</p>
<pre><code>try:
    myElem = WebDriverWait(driver, delay).until(EC.element_to_be_clickable((By.NAME, '_eventId_confirmed')))
</code></pre>
</div>
<span class="comment-copy">Have you tried javascript <code>scrollIntoView</code> option? <code>driver.execute_script("arguments[0].scrollIntoView;",btn)</code> before click.</span>
<span class="comment-copy">sorry missed <code>()</code>. Here is the correct code. <code>driver.execute_script("arguments[0].scrollIntoView();",btn)</code></span>
<span class="comment-copy">Have added the answer for it, let me know if that helps</span>
<span class="comment-copy">Thank you. I think I understand the JS snippet but the Selenium example sounds very counterintutive?</span>
<span class="comment-copy">Hmm, IntelliJ/PyCharm displays a warning <code>Statement seems to have no effect less... (⌘F1)  Inspection info: This inspection detects statements without any effect.</code>?</span>
<span class="comment-copy">Not sure why you are getting that message. I am able to run the sample script without issue. Added the script in the answer above for your reference.</span>
<span class="comment-copy">I would strongly recommend the second solution. See the <a href="https://seleniumhq.github.io/selenium/docs/api/py/_modules/selenium/webdriver/remote/webelement.html#WebElement.location_once_scrolled_into_viewlocation_once_scrolled_into_view" rel="nofollow noreferrer">source code</a> for the first. For one thing, the first sentence of the comment describing the method reads: “THIS PROPERTY MAY CHANGE WITHOUT WARNING.” They don’t provide any more details than that and I’m not sure exactly what changes they are referring to but that doesn’t sound good. Second, all that function does is execute its own (more complicated) Javascript.</span>
<span class="comment-copy">Just a doubt, when the element is not clickable after opening the page, would the condition <code>element_to_be_clickable</code> make sense ? Because it would never be clickable if we don't scroll it into view and the condition <code>element_to_be_clickable</code> might give a timeout exception.</span>
<span class="comment-copy">Well, <i>element_to_be_clickable()</i> does scrolls by default by a certain limit. Let me know the execution status.</span>
<span class="comment-copy">Can't check the OP website but i have also got ElementNotClickable exception in the past and i solved it using javascript click. Not very sure that the selenium wait for element to be clickable would scroll the element.</span>
<span class="comment-copy">@SameerArora OP is using the <i>Python</i> clients, so jumping straight away to use  javascript <i>click()</i> would be against all best practices. You need to explore the <code>expected_conditions</code> properly. If you are <i>not very sure that the selenium wait for element to be clickable would scroll the element</i> you need to read the documentation properly once again.</span>
<span class="comment-copy">Yes, studied the code now, there is not scrolling involved in the method. The method and its subsequent methods are checking for its visibility by using <code>isDisplayed()</code></span>
