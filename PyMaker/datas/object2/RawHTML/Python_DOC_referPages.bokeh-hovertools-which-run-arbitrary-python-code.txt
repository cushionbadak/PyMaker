<div class="post-text" itemprop="text">
<p>I am using Bokeh to try and create a figure whose data points when 'hovered' over by the user will display another graph within the hover tool, showing  additional information about that data point (i.e., in the main figure data points are the mean of a time-series over a set interval, I want the hover tool to show all the data in that interval).  </p>
<p>The <a href="https://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#custom-tooltip" rel="nofollow noreferrer">user guide</a> (full code copied in below) provides one solution: use a custom HTML tooltip to reference figures on file. This would, however, require me creating all the figures on file (which could be up 10,000) to be referenced. This is too large a time overhead so I was hoping for a better solution. <em>Namely:</em> Is it possible for hover tools to run python code on the fly, such that they can display plots of the data interactively? </p>
<p>(Example image, take from user guide, below code)</p>
<p><strong>The below code was copied from the <a href="https://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#custom-tooltip" rel="nofollow noreferrer">bokeh user guide</a> on 19th March 2019.</strong></p>
<pre><code>from bokeh.plotting import figure, output_file, show, ColumnDataSource

output_file("toolbar.html")

source = ColumnDataSource(data=dict(
    x=[1, 2, 3, 4, 5],
    y=[2, 5, 8, 2, 7],
    desc=['A', 'b', 'C', 'd', 'E'],
imgs=[
    'https://bokeh.pydata.org/static/snake.jpg',
    'https://bokeh.pydata.org/static/snake2.png',
    'https://bokeh.pydata.org/static/snake3D.png',
    'https://bokeh.pydata.org/static/snake4_TheRevenge.png',
    'https://bokeh.pydata.org/static/snakebite.jpg'
],
fonts=[
    '&lt;i&gt;italics&lt;/i&gt;',
    '&lt;pre&gt;pre&lt;/pre&gt;',
    '&lt;b&gt;bold&lt;/b&gt;',
    '&lt;small&gt;small&lt;/small&gt;',
    '&lt;del&gt;del&lt;/del&gt;'
]
))

TOOLTIPS = """
&lt;div&gt;
    &lt;div&gt;
        &lt;img
            src="@imgs" height="42" alt="@imgs" width="42"
            style="float: left; margin: 0px 15px 15px 0px;"
            border="2"
        &gt;&lt;/img&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;span style="font-size: 17px; font-weight: bold;"&gt;@desc&lt;/span&gt;
        &lt;span style="font-size: 15px; color: #966;"&gt;[$index]&lt;/span&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;span&gt;@fonts{safe}&lt;/span&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;span style="font-size: 15px;"&gt;Location&lt;/span&gt;
        &lt;span style="font-size: 10px; color: #696;"&gt;($x, $y)&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
"""

p = figure(plot_width=400, plot_height=400, tooltips=TOOLTIPS,
       title="Mouse over the dots")

p.circle('x', 'y', size=20, source=source)

show(p)
</code></pre>
<p><a href="https://i.stack.imgur.com/T9d74.png" rel="nofollow noreferrer"><img alt="example_hover_tool" src="https://i.stack.imgur.com/T9d74.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use Python callback only in Bokeh server applications. It seems impossible to use Python callbacks for a HoverTool (it must be always a JS callback, or you get this error: <code>ValueError: expected an instance of type Callback, got &lt;function callback at 0x114fdbb90&gt; of type function</code>). </p>
<p>The following solution uses JS callback and it shows a small "tooltip plot" when hovering the circles on the main plot (works for Bokeh v1.0.4 and only if there are 2 plots in the Bokeh document):</p>
<pre><code>from bokeh.plotting import figure, show
from bokeh.layouts import gridplot, Row
from bokeh.models import ColumnDataSource, CDSView, BooleanFilter, CustomJS, BoxSelectTool, HoverTool
import pandas as pd

data = {'x': [1, 2, 3],
        'y':[1, 2, 3],
        'xs':[[9, 8, 7], [6, 5, 4], [3, 2, 1]],
        'ys':[[29, 28, 29], [27, 28, 27], [25, 25, 20]]}
source = ColumnDataSource(data)
plot = figure(title = 'PLOT IN HOVER TOOLTIP', tools = '')
circles = plot.circle('x', 'y', size = 20, source = source)

plot_tooltip = figure(name = 'plot_tooltip', plot_width = 200, plot_height = 200, x_axis_location = None, y_axis_location = None, title = None, tools = 'hover', tooltips = [("x", "@x"), ("y", "@y")], toolbar_location = None)
lines = plot_tooltip.line('x', 'y', source = ColumnDataSource({'x': [], 'y': []}))
circles2 = plot_tooltip.circle('x', 'y', source = ColumnDataSource({'x': [], 'y': []}))

code = """  
var indices = cb_data.index['1d'].indices;
if (indices.length &gt; 0){
    if(plot_tooltip.x_range.bounds == null)
    {
        Bokeh.documents[0].add_root(plot_tooltip)
    }
    const idx = indices[0]
    lines.data_source.data['x'] = source.data['xs'][idx]
    lines.data_source.data['y'] = source.data['ys'][idx]
    lines.data_source.change.emit();

    circles.data_source.data['x'] = source.data['xs'][idx]
    circles.data_source.data['y'] = source.data['ys'][idx]
    circles.data_source.change.emit();  

    div = document.getElementsByClassName('bk-root')[1];
    div.style = "position:absolute; left:" + cb_data.geometry['sx'] + "px; top:" + cb_data.geometry['sy'] + "px;";              
} """

callback = CustomJS(args = dict(source = source, lines = lines, circles = circles2, plot_tooltip = plot_tooltip), code = code)

hover = HoverTool()
hover.callback = callback
hover.tooltips = None
hover.renderers = [circles]
plot.add_tools(hover)

show(plot)
</code></pre>
<p>Result:</p>
<p><a href="https://i.stack.imgur.com/9CVBJ.gif" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/9CVBJ.gif"/></a></p>
</div>
<span class="comment-copy">Thanks for you answer Tony, I will accept it in due time if no other answer comes forward. I did fear such an implementation would be necessary. Its a shame it can't be easily done as hovering figure would look much cleaner in my code.</span>
<span class="comment-copy">This is nice, thanks! I'll implement it for some example datasets and compare to your previous suggestion (static figure next to main figure).  I will be working in tabs, with only two figures on this tab, so I might be able to make it work for my solution.</span>
<span class="comment-copy">On reflection, while this does have the desired functionality it requires use of a JavaScript callback, it would be nice if you could use Python in the callback. I will do some more research into callbacks as I've never done them...  <b>Edit:</b> It looks like fundamentally JS must be used on callbacks but there are some functions which may be of use: <a href="http://bokeh.pydata.org/en/0.11.1/docs/user_guide/interaction.html#customjs-with-a-python-function" rel="nofollow noreferrer">CustomJS.from_py_func</a></span>
<span class="comment-copy"><b>from_py_func()</b> can contain only simple JS code that can be easily translated onto BokehJS. It will not fulfil your requirements.</span>
