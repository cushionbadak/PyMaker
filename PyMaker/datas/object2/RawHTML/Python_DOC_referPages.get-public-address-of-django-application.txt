<div class="post-text" itemprop="text">
<p>I have a django application, listening to 127.0.0.1, and reachable via nginx.</p>
<p>What are my options in order to get information about the public IP (the ones clients are using) from within the django application?</p>
<p>Currently I am doing:</p>
<pre><code>def get_local_ip(request):
    """Return the local IP (where the application is listening to)"""
    # TODO: this should be the server IP as seen by the UI (the public IP, where nginx is listening)
    return request.META.get('HTTP_HOST') if request else None
</code></pre>
<p>But this returns <code>127.0.0.1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your nginx configuration needs to add that to the headers, not sure that's done by default. The <code>$server_addr</code> is the one you need to add to the headers, so in your nginx config you would need to add (assuming you're using reverse proxy):</p>
<pre class="lang-none prettyprint-override"><code>proxy_set_header X-Server-IP $server_addr;
</code></pre>
<p>And then in your <code>get_local_ip</code> method you'd be able to access that header with:</p>
<pre><code>return request.META.get('HTTP_X_SERVER_IP')
</code></pre>
<p>Note that if your nginx server is behind a load balancer, this still won't be the address your users "see", since they see the IP address of your load balancer. The address they see is:</p>
<pre><code>import socket
ip_address = socket.gethostbyname(request.META.get('SERVER_NAME'))
</code></pre>
<p>which just resolves your domain name using DNS (and may slow down your request, since a DNS lookup needs to be made, depending on the TTL you have set in your DNS records)</p>
</div>
