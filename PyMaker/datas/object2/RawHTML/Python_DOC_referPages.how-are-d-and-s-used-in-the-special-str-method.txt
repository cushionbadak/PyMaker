<div class="post-text" itemprop="text">
<p>What does <code>%s</code> mean in Python? And what does the following bit of code do?</p>
<p>For instance... </p>
<pre><code> if len(sys.argv) &lt; 2:
     sys.exit('Usage: %s database-name' % sys.argv[0])

 if not os.path.exists(sys.argv[1]):
     sys.exit('ERROR: Database %s was not found!' % sys.argv[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is a string formatting syntax (which it borrows from C).</p>
<p>Please see <a href="https://pyformat.info/" rel="noreferrer">"PyFormat"</a>:</p>
<blockquote>
<p>Python supports formatting values into
  strings. Although this can include
  very complicated expressions, the most
  basic usage is to insert values into a
  string with the <code>%s</code> placeholder.</p>
</blockquote>
<p><strong>Edit:</strong> Here is a really simple example:</p>
<pre><code>#Python2
name = raw_input("who are you?")
print "hello %s" % (name,)

#Python3+
name = raw_input("who are you?")
print("hello %s" % (name,))
</code></pre>
<p>The <code>%s</code> token allows me to insert (and potentially format) a string.  Notice that the <code>%s</code> token is replaced by whatever I pass to the string after the <code>%</code> symbol.  Notice also that I am using a tuple here as well (when you only have one string using a tuple is optional) to illustrate that multiple strings can be inserted and formatted in one statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>Andrew's answer is good.</p>
<p>And just to help you out a bit more, here's how you use multiple formatting in one string</p>
<pre><code>"Hello %s, my name is %s" % ('john', 'mike') # Hello john, my name is mike".
</code></pre>
<p>If you are using ints instead of string, use %d instead of %s.</p>
<pre><code>"My name is %s and i'm %d" % ('john', 12) #My name is john and i'm 12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>format</code> method was introduced in Python 2.6.  It is more capable and not much more difficult to use:</p>
<pre><code>&gt;&gt;&gt; "Hello {}, my name is {}".format('john', 'mike')
'Hello john, my name is mike'.

&gt;&gt;&gt; "{1}, {0}".format('world', 'Hello')
'Hello, world'

&gt;&gt;&gt; "{greeting}, {}".format('world', greeting='Hello')
'Hello, world'

&gt;&gt;&gt; '%s' % name
"{'s1': 'hello', 's2': 'sibal'}"
&gt;&gt;&gt; '%s' %name['s1']
'hello'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>%s</code> indicates a conversion type of <em>string</em> when using python's string formatting capabilities. More specifically, <code>%s</code> converts a specified value to a string using the <code>str()</code> function. Compare this with the <code>%r</code> conversion type that uses the <code>repr()</code> function for value conversion.</p>
<p>Take a look at the <a href="http://docs.python.org/library/stdtypes.html#string-formatting-operations" rel="nofollow noreferrer">docs for string formatting</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In answer to your second question:  What does this code do?...</p>
<p>This is fairly standard error-checking code for a Python script that accepts command-line arguments.</p>
<p>So the first <code>if</code> statement translates to:  if you haven't passed me an argument, I'm going to tell you how you should pass me an argument in the future, e.g. you'll see this on-screen:</p>
<pre><code>Usage: myscript.py database-name
</code></pre>
<p>The next <code>if</code> statement checks to see if the 'database-name' you passed to the script actually exists on the filesystem.  If not, you'll get a message like this:</p>
<pre><code>ERROR: Database database-name was not found!
</code></pre>
<p>From the <a href="http://docs.python.org/library/sys.html#sys.argv" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>argv[0] is the script name (it is
  operating system dependent whether
  this is a full pathname or not). If
  the command was executed using the -c
  command line option to the
  interpreter, argv[0] is set to the
  string '-c'. If no script name was
  passed to the Python interpreter,
  argv[0] is the empty string.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>%s</code>and <code>%d</code> are Format Specifiers or placeholders for formatting strings/decimals/floats etc. </p>
<p><strong>MOST</strong> common used Format specifier:</p>
<p><code>%s</code> : string</p>
<p><code>%d</code> : decimals</p>
<p><code>%f</code> : float</p>
<p>Self explanatory code:</p>
<pre><code>name = "Gandalf"
extendedName = "the Grey"
age = 84
IQ = 149.9
print('type(name):', type(name)) #type(name): &lt;class 'str'&gt;
print('type(age):', type(age))   #type(age): &lt;class 'int'&gt;   
print('type(IQ):', type(IQ))     #type(IQ): &lt;class 'float'&gt;   

print('%s %s\'s age is %d with incredible IQ of %f ' %(name, extendedName, age, IQ)) #Gandalf the Grey's age is 84 with incredible IQ of 149.900000 

#Same output can be printed in following ways:


print ('{0} {1}\'s age is {2} with incredible IQ of {3} '.format(name, extendedName, age, IQ))          # with help of older method
print ('{} {}\'s age is {} with incredible IQ of {} '.format(name, extendedName, age, IQ))          # with help of older method

print("Multiplication of %d and %f is %f" %(age, IQ, age*IQ)) #Multiplication of 84 and 149.900000 is 12591.600000          

#storing formattings in string

sub1 = "python string!"
sub2 = "an arg"

a = "i am a %s" % sub1
b = "i am a {0}".format(sub1)

c = "with %(kwarg)s!" % {'kwarg':sub2}
d = "with {kwarg}!".format(kwarg=sub2)

print(a)    # "i am a python string!"
print(b)   # "i am a python string!"
print(c)    # "with an arg!"
print(d)   # "with an arg!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a good example in Python3.</p>
<pre><code>  &gt;&gt;&gt; a = input("What is your name?")
  What is your name?Peter

  &gt;&gt;&gt; b = input("Where are you from?")
  Where are you from?DE

  &gt;&gt;&gt; print("So you are %s of %s" % (a, b))
  So you are Peter of DE
</code></pre>
</div>
<span class="comment-copy">The <code>%</code> operator is deprecated in favor of the more powerful <code>str.format</code> method, see <a href="http://docs.python.org/3.1/whatsnew/2.6.html#pep-3101" rel="nofollow noreferrer">PEP-3101</a>.</span>
<span class="comment-copy">Actually that PEP says "In Python 3.0, the % operator is supplemented by a more powerful string formatting method" and that it is backported to Python 2.6. Where I come from "supplemented" means added to, not replaced. The PEP does not say "supplanted" and in no part of the PEP does it say the % operator is deprecated (yet it does say other things are deprecated down the bottom). You might prefer str.format and that's fine, but until there's a PEP saying it is deprecated there's no sense in claiming it is when it isn't.</span>
<span class="comment-copy">Note that this kind of string interpolation is deprecated in favor of the more powerful <code>str.format</code> method.</span>
<span class="comment-copy">In python3 raw_input() is now just input() for those of you who are trying for yourself.</span>
<span class="comment-copy">nice.  %d saves you from casting str(int).  any idea what the %s and %d stand for?  i guess i'll remember them as string and digit.</span>
<span class="comment-copy">@user391339  stands for decimal :)  they're all here <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting-operations" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">This answer would be improved if it explained that the syntax in the question was formatting text and <i>then</i> demonstrated the newer method. That way it could stand on its own. Providing an example that was equivalent to the example in the question would also be a plus.</span>
<span class="comment-copy">may I know the format for a plain int?</span>
<span class="comment-copy">You can use <code>%d</code> as shown in answer.</span>
