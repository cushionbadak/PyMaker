<div class="post-text" itemprop="text">
<p>My input text looks like this:</p>
<blockquote>
<p><em>Put in 3 extenders but by the 4th floor it is weak on signal these don't piggy back of each other. ST -99. 5G DL 624.26 UP 168.20 4g DL 2
  Up .44</em></p>
</blockquote>
<p>I am having difficulty writing a regex that will match any instances of 4G/5G/4g/5g and give me all the corresponding measurements after the instances of these codes, which are numbers with decimals. </p>
<p>The output should be:</p>
<blockquote>
<p>5G 624.26 168.20 4g 2 .44</p>
</blockquote>
<p>Any thoughts how to achieve this? I am trying to do this analysis in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with the answers that say to use capture groups, but have a slightly different approach for the regex itself.  Be sure to use gi (global and case-insensitive) options to get the correct results.</p>
<pre><code>r"([45]G).*?([\d.]+).*?([\d.]+)"
</code></pre>
<p>I'm including the link to the <a href="https://regex101.com/r/bfiJgc/1/" rel="nofollow noreferrer">online regex tester and debugger</a> that I used because it explains the individual elements of the regex very well, and I've also copied in the sample python code it generated below.</p>
<pre><code>import re

regex = r"([45]G).*?([\d.]+).*?([\d.]+)"

test_str = "Put in 3 extenders but by the 4th floor it is weak on signal these don't piggy back of each other. ST -99. 5G DL 624.26 UP 168.20 4g DL 2 Up .44"

matches = re.finditer(regex, test_str, re.IGNORECASE)

for matchNum, match in enumerate(matches, start=1):

    print ("Match {matchNum} was found at {start}-{end}: {match}".format(matchNum = matchNum, start = match.start(), end = match.end(), match = match.group()))

    for groupNum in range(0, len(match.groups())):
        groupNum = groupNum + 1

        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = match.start(groupNum), end = match.end(groupNum), group = match.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would separate it in different capture group like this:</p>
<p><code>(?i)(?P&lt;g1&gt;5?4?G)\sDL\s(?P&lt;g2&gt;[^\s]*)\sUP\s(?P&lt;g3&gt;[^\s]*)</code></p>
<p><code>(?i)</code> makes the whole regex case insensitive</p>
<p><code>(?P&lt;g1&gt;5?4?G)</code> is the first group matching on either 4g, 5g, 4G or 5G.</p>
<p><code>(?P&lt;g2&gt;[^\s]*)</code> is the second and third group matching on everything that is not a space.</p>
<p>Then in Python you can do:</p>
<p><code>match = re.match('(?i)(?P&lt;g1&gt;5?4?G)\sDL\s(?P&lt;g2&gt;[^\s]*)\sUP\s(?P&lt;g3&gt;[^\s]*)', input)</code></p>
<p>And access each group like so:</p>
<p><code>match.group('g1')</code> etc.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>(5G|4G)\sDL\s(\d*[.]?\d*)\sUP\s(\d*[.]?\d*)
</code></pre>
<p>with gi flags (global, case insensitive) should work. You can modify the digit matching since I'm unsure if it's necessarily a decimal or not. </p>
</div>
<span class="comment-copy">From the expected output, it seems like you want all the words that start with a number. Is that right?</span>
<span class="comment-copy">Can you share what you have tried?</span>
<span class="comment-copy">have you tried <code>"[4-5][Gg]"</code>?  I don't see why that wouldn't work.</span>
<span class="comment-copy">When you ask a regex question, it always helps if you could supply at least a couple of passing and failing test cases. Unlike other stuff, regex really needs both the cases. More cases will get you a better matching regex.</span>
<span class="comment-copy">([\d.]+) will capture an arbitrary combination of digits and decimals so may be a better option in this case</span>
<span class="comment-copy">True, but at the same time it wouldn't be logical to have multiple decimal points in the same number. While <i>probably</i> a non-factor, it's unknown what could be in the body text.</span>
<span class="comment-copy">Hey, OP said all the digits and periods. That means all the digits and all the periods, right? :-)</span>
