<div class="post-text" itemprop="text">
<p><strong>Update : I re-worded and re-thought through this, and I think the question is better asked like this.</strong></p>
<p>So I've been hacking at this forever with no luck. Here is an example of what I am looking to do.</p>
<p>I am starting off with a dataframe:</p>
<pre><code>df = data.frame("one" = c(1,11), "two" = c(2,22), "three" = c(3,33))

one  two  three
1    2    3
11   22   33
</code></pre>
<p>I am attempting to turn the above, into this:</p>
<pre><code>one  new
1    c(2,3)
11    c(22,33)
</code></pre>
<p>I have tried a few things like nesting the 2 columns and trying to map over them, etc. Maybe there is something simple I am not seeing here. I'd preferably like to do this in R via the tidyverse, but at this point I'm open to whatever.</p>
<p>It has to be this way because when it gets converted to JSON the values under 'new' need to be in the form [1,2,3] &amp; [11,22,33]. Maybe its easier in Python?</p>
<p>I'm using the <em>jsonlite</em> package in R for converting to/from JSON.</p>
<p>Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this should just be a <code>Map</code> exercise:</p>
<pre><code>df$new &lt;- Map(c, df$two, df$three)
df
#  one two three    new
#1   1   2     3   2, 3
#2  11  22    33 22, 33

library(jsonlite)
toJSON(df[c("one","new")])
#[{"one":1,"new":[2,3]},{"one":11,"new":[22,33]}]
</code></pre>
<p>If you've got many variables, you can wrap it in <code>do.call</code> to get it done too:</p>
<pre><code>df$new &lt;- do.call(Map, c(c,df[2:3]))
</code></pre>
<p>If <em>tidyverse</em> is your preference, you can <em>purrr</em> it like:</p>
<pre><code>map2(df$two, df$three, c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python, using <code>pandas</code>:</p>
<pre><code>import pandas as pd

df = pd.DataFrame([[1,2,3],[11,22,33]], columns=["one", "two","three"])
   one  two  three
0    1    2      3
1   11   22     33

df['new'] = list(zip(df.two, df.three))

df[['one','new']].to_json(orient='records')
# '[{"one":1,"new":[2,3]},{"one":11,"new":[22,33]}]'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In R you can use <code>tidyr::nest()</code>, after you <code>group_by()</code>:</p>
<pre><code>library(dplyr)

nest_df &lt;- df %&gt;% 
  group_by(one) %&gt;% 
  tidyr::nest(c(two, three), .key="new")
# # A tibble: 2 x 2
# one new             
#   &lt;dbl&gt; &lt;list&gt;          
# 1     1 &lt;tibble [1 x 2]&gt;
# 2    11 &lt;tibble [1 x 2]&gt;
</code></pre>
<p>Now the column <code>new</code>, in each row is a <code>tibble()</code>.</p>
<pre><code>nest_df[1, ][[2]]
# # A tibble: 1 x 2
#     two three
#    &lt;dbl&gt; &lt;dbl&gt;
# 1     2     3
</code></pre>
<p><code>toJSON()</code>:</p>
<pre><code>df %&gt;% 
  group_by(one) %&gt;% 
  tidyr::nest(c(two, three), .key="new") %&gt;% 
  jsonlite::toJSON()
#[{"one":1,"new":[{"two":2,"three":3}]},{"one":11,"new":[{"two":22,"three":33}]}] 
</code></pre>
</div>
<span class="comment-copy">@thelatemail, thanks for the responses.. I edited the question.. hopefully its clearer now.</span>
