<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/37444002/overriding-enum-call-method">Overriding Enum __call__ method</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I can easily create a class like</p>
<pre><code>class MyEnum(enum.Enum):
  BOB = "bob"
  RALPH = "ralph"
  ETC = "etc"
</code></pre>
<p>Then I can assign variables by enum value:</p>
<p><code>a = MyEnum('bob')</code></p>
<p><strong>However</strong> -- I want to assign variables by things that could be the correct value.  I.e., I'd like to do</p>
<pre><code>a = MyEnum('bob')
b = MyEnum('Bob')
c = MyEnum('BOB')
</code></pre>
<p>and have them all work, and all map to the same enum value.</p>
<p>Is there a way of doing this without making a factory method?  I've currently defined a <code>create</code> method, so <code>a = MyEnum.create('Bob')</code> works, but I'd like things to be seamless.</p>
</div>
<div class="post-text" itemprop="text">
<p>The thing you are looking for is called <code>_missing_</code> and is available in the stdlib as of Python3.6, and in <code>aenum</code><sup>1</sup> as of 2.0.</p>
<pre><code>class MyEnum(Enum):

    BOB = "bob"
    RALPH = "ralph"
    ETC = "etc"

    @classmethod
    def _missing_(cls, value):
        for member in cls:
            if member.value == value.lower():
                return member
</code></pre>
<p>If <code>_missing_</code> fails to return a <code>MyEnum</code> member then <code>EnumMeta</code> will raise an exception (so <code>_missing_</code> doesn't have to worry about that part)<sup>2</sup>.</p>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
<p><sup>2</sup> Thanks, Aran-Fey, for bringing that up.</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be achieved by subclassing <a href="https://docs.python.org/3/library/enum.html#enum-classes" rel="nofollow noreferrer"><code>EnumMeta</code></a>, which is the <a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python">metaclass</a> responsible for defining the <a href="https://docs.python.org/3/reference/datamodel.html#object.__call__" rel="nofollow noreferrer"><code>__call__</code></a> method that's invoked by <code>MyEnum('Bob')</code>.</p>
<pre><code>import enum

class CaseInsensitiveEnum(enum.EnumMeta):
    def __call__(self, string):
        string = string.lower()  # convert the string to lowercase
        return super().__call__(string)

class MyEnum(enum.Enum, metaclass=CaseInsensitiveEnum):
  BOB = "bob"
  RALPH = "ralph"
  ETC = "etc"
</code></pre>
<p>(Keep in mind that all the enum values have to be lowercase; i.e. <code>BOB = 'Bob'</code> would not work.)</p>
<p>Demonstration:</p>
<pre><code>&gt;&gt;&gt; MyEnum('Bob')
&lt;MyEnum.BOB: 'bob'&gt;
&gt;&gt;&gt; MyEnum('Bob') is MyEnum.BOB
True
</code></pre>
</div>
<span class="comment-copy">You should probably raise a <code>ValueError</code> in <code>_missing_</code>, otherwise things like <code>MyEnum('a')</code> just return <code>None</code>.</span>
<span class="comment-copy">@Aran-Fey:  <code>EnumMeta</code> checks for that -- if the return value is not an instance of the Enum (<code>MyEnum</code> in this case) then an exception is raised automatically... <code>ValueError</code> IIRC).</span>
<span class="comment-copy">No exception is raised when I call <code>MyEnum('a')</code>. (Python 3.7 and stdlib <code>enum.Enum</code>)</span>
<span class="comment-copy">@Aran-Fey:  Huh.  It works correctly in <code>aenum</code>.   Would you like to file a bug report at bugs.python.org?</span>
<span class="comment-copy"><a href="https://bugs.python.org/issue34536" rel="nofollow noreferrer">Done.</a></span>
<span class="comment-copy">Subclassing <code>EnumMeta</code>  is dangerous -- see <a href="https://stackoverflow.com/q/43730305/208880"><code>When and where...</code></a>.</span>
