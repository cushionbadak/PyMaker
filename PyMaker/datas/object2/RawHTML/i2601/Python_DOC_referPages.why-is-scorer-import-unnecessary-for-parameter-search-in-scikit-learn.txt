<div class="post-text" itemprop="text">
<p>If I want to optimise the regularisation parameter for a logistic regression model (for example) based on area under the ROC curve, I can use <code>GridSearchCV</code> for a suitable range of parameters and set <code>scoring='roc_auc'</code>.</p>
<p>This can be done using <code>from sklearn.model_selection import GridSearchCV</code>, and there is <em>no need</em> to include <code>from sklearn.metrics import roc_auc_score</code>.</p>
<p>However, if I want to calculate the area under the ROC curve manually for a particular fitted dataset then I do need to include <code>from sklearn.metrics import roc_auc_score</code>.</p>
<ul>
<li>How does this work? I assume that by importing <code>GridSearchCV</code> we are somehow importing <code>roc_auc_score</code> behind the scenes? Unfortunately I can't seem to follow this through in the <a href="https://github.com/scikit-learn/scikit-learn/blob/ab9eebfa3a8d276de67b25ce42002a20298998b5/sklearn/model_selection/_search.py#L866" rel="nofollow noreferrer">source code</a> - I'd really appreciate an explanation.</li>
<li>If this is the case, does it also mean that by importing <code>GridSearchCV</code> we end up importing all possible scoring methods behind the scenes?</li>
<li>Why then can I not use <code>roc_auc_score</code> "manually" myself if I have imported <code>GridSearchCV</code> only and not <code>roc_auc_score</code> itself? Is it not implicitly "there" behind the scenes?</li>
</ul>
<p>I appreciate this may be a more general question about python importing and not specific to scikit-learn...</p>
</div>
<div class="post-text" itemprop="text">
<p>GridSearchCV extends BaseSearchCV class. This means that it will be using the <a href="https://github.com/scikit-learn/scikit-learn/blob/ab9eebfa3a8d276de67b25ce42002a20298998b5/sklearn/model_selection/_search.py#L617" rel="nofollow noreferrer"><code>fit()</code> function defined in BaseSearchCV</a>.</p>
<p>So now as you can see in <a href="https://github.com/scikit-learn/scikit-learn/blob/ab9eebfa3a8d276de67b25ce42002a20298998b5/sklearn/model_selection/_search.py#L617" rel="nofollow noreferrer">source code here</a>:</p>
<pre><code>    ...
    ...
    scorers, self.multimetric_ = _check_multimetric_scoring(
    self.estimator, scoring=self.scoring)
    ...
    ...
</code></pre>
<p>It checks all the parameters supplied during the construction of GridSearchCV here.
For <code>'scoring'</code> param, its calling a method <code>_check_multimetric_scoring()</code>. Now on top of this file, you will see many imports.</p>
<p>The method <code>_check_multimetric_scoring</code> points to <a href="https://github.com/scikit-learn/scikit-learn/blob/ab9eebfa3a8d276de67b25ce42002a20298998b5/sklearn/metrics/scorer.py" rel="nofollow noreferrer"><code>scorer.py</code> file</a>:</p>
<p>Similarly tracing the method calls, we <a href="https://github.com/scikit-learn/scikit-learn/blob/ab9eebfa3a8d276de67b25ce42002a20298998b5/sklearn/metrics/scorer.py#L499" rel="nofollow noreferrer">will reach here</a>:</p>
<pre><code>SCORERS = dict(explained_variance=explained_variance_scorer,
               r2=r2_scorer,
               neg_median_absolute_error=neg_median_absolute_error_scorer,
               neg_mean_absolute_error=neg_mean_absolute_error_scorer,
               neg_mean_squared_error=neg_mean_squared_error_scorer,
               neg_mean_squared_log_error=neg_mean_squared_log_error_scorer,
               accuracy=accuracy_scorer, roc_auc=roc_auc_scorer,
               ...
               ...
 ...
 ...
</code></pre>
<p>Looking at <code>roc_auc</code>, we will <a href="https://github.com/scikit-learn/scikit-learn/blob/ab9eebfa3a8d276de67b25ce42002a20298998b5/sklearn/metrics/scorer.py#L473" rel="nofollow noreferrer">reach here</a>:</p>
<pre><code>roc_auc_scorer = make_scorer(roc_auc_score, greater_is_better=True,
needs_threshold=True)
</code></pre>
<p>Now look at the parameters here, <code>roc_auc_score</code> is sent to <code>make_scorer</code>. So from where it is imported? Look at the top of this file and you will see this:</p>
<pre><code>from . import (r2_score, median_absolute_error, mean_absolute_error,
               mean_squared_error, mean_squared_log_error, accuracy_score,
               f1_score, roc_auc_score, average_precision_score,
               precision_score, recall_score, log_loss,
               balanced_accuracy_score, explained_variance_score,
               brier_score_loss)
</code></pre>
<p>So from here, the actual scoring object is returned to the GridSearchCV. </p>
<p>Now, the library is using relative and absolute imports, and as @Denziloe correctly said, those imports are local for that module, not the global imports. </p>
<p>See these answers for more information on import scope and namespaces:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/3106089/python-import-scope">Python "import" scope</a></li>
<li><a href="https://stackoverflow.com/questions/15890014/python-namespaces-with-module-imports">Python: Namespaces with Module Imports</a></li>
</ul>
<p>And <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">this python documentation page</a></p>
</div>
<span class="comment-copy">If I understand you correctly, you just need to read up on how Python does modules and imports. <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html</a> <code>roc_auc_score</code> may be imported by <code>GridSearchCV</code> but it will be local to that, not in the global namespace.</span>
<span class="comment-copy">Thanks for the link - if I am understanding it correctly I think that <code>roc_auc_score</code> is probably being imported somehow but not being added to my global symbol table - but would be good to have my understanding confirmed!</span>
<span class="comment-copy">This will make your path to understanding a lot easier: <code>dir()</code>.</span>
<span class="comment-copy">Thanks - this is very helpful. I assume that when you say "tracing the method calls...", the series of calls you are referring to is <code>_check_multimetric_scoring</code> -&gt; <code>check_scoring</code> -&gt; <code>get_scorer</code> -&gt; <code>SCORERS</code>. Also it took me a few minutes to realise that <code>from . import</code> can refer to other modules at the same level and that <code>roc_auc_score</code> is actually defined in the sibling module <code>ranking.py</code> (unless I totally misread the code)</span>
<span class="comment-copy">@Nick Yes, you are correct. Just like linux commands, <code>from . import</code> refers to files in same folder, and <code>from .. import</code> goes to root level.</span>
<span class="comment-copy">Yes, but actually methods within files in the same folder, which is what caught me out. Actually [note to future readers!] the links you provided to other questions were very helpful as it is not always easy to find this information without knowing the right terms to search on.</span>
<span class="comment-copy">No, I think you got it wrong. I think I explained it wrong. <code>from . import</code> will be only successful for imports declared in <code>__all__</code> under <code>_init_.py</code> file in the folder. All imports made in that file are available directly using <code>from . import</code>.</span>
<span class="comment-copy">In the previous comment I was explaining about relative imports of the type: <code>from .ranking import</code> and <code>from ..model_selection import</code> type of things. Sorry to confuse you.</span>
