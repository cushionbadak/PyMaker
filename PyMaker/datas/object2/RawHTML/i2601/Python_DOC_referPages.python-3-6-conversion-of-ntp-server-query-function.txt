<div class="post-text" itemprop="text">
<p>How would you convert Python 2.7 to Python 3.6.5? 
Here, I am trying to query a set of NTP time servers and determine which one is the outlier. </p>
<p>It is probably a few simple changes but I am unsure.. </p>
<pre><code>from contextlib import closing
from socket import socket, AF_INET, SOCK_DGRAM
import sys
import struct
import time

NTP_PACKET_FORMAT = "!12I"
NTP_DELTA = 2208988800L # 1970-01-01 00:00:00
NTP_QUERY = b'\x1b' + 47 * '\0'  

def ntp_time(host="pool.ntp.org", port=123):
    with closing(socket( AF_INET, SOCK_DGRAM)) as s:
        s.sendto(NTP_QUERY, (host, port))
        msg, address = s.recvfrom(1024)
    unpacked = struct.unpack(NTP_PACKET_FORMAT,
            msg[0:struct.calcsize(NTP_PACKET_FORMAT)])
    return unpacked[10] + float(unpacked[11]) / 2**32 - NTP_DELTA

if __name__ == "__main__":
    print time.ctime(ntp_time()).replace("  "," ")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a version of your code with minimal changes that runs correctly on Python 3.6. Apart from fixing the prints and that long integer literal, which I did automatically using 2to3, I also changed <code>NTP_QUERY</code> to a <code>bytes</code> string.</p>
<pre><code>from contextlib import closing
from socket import socket, AF_INET, SOCK_DGRAM
import sys
import struct
import time

NTP_PACKET_FORMAT = "!12I"
NTP_DELTA = 2208988800 # 1970-01-01 00:00:00
NTP_QUERY = b'\x1b' + bytes(47)

def ntp_time(host="pool.ntp.org", port=123):
    with closing(socket( AF_INET, SOCK_DGRAM)) as s:
        s.sendto(NTP_QUERY, (host, port))
        msg, address = s.recvfrom(1024)
    unpacked = struct.unpack(NTP_PACKET_FORMAT,
            msg[0:struct.calcsize(NTP_PACKET_FORMAT)])
    return unpacked[10] + unpacked[11] / 2**32 - NTP_DELTA

if __name__ == "__main__":
    print(time.ctime(ntp_time()).replace("  "," "))
</code></pre>
<p>There are a few more things that can be done to take advantage of Python 3 features. Here's a more streamlined version. We don't need <code>contextlib</code>, since a Python 3 socket can be used directly in a <code>with</code> statement. And we don't need <code>struct</code>, as a Python 3 <code>int</code> has a <code>from_bytes</code> method.</p>
<pre><code>from socket import socket, AF_INET, SOCK_DGRAM
import time

NTP_DELTA = 2208988800 # 1970-01-01 00:00:00
NTP_QUERY = b'\x1b' + bytes(47)

def ntp_time(host="pool.ntp.org", port=123):
    with socket( AF_INET, SOCK_DGRAM) as s:
        s.sendto(NTP_QUERY, (host, port))
        msg, _ = s.recvfrom(1024)
    return int.from_bytes(msg[-8:], 'big') / 2 ** 32 - NTP_DELTA

if __name__ == "__main__":
    print(time.ctime(ntp_time()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>L</code> is not present in python3, that is the first thing you need to change.  Convert <code>2208988800L</code> to <code>2208988800</code>
<a href="https://stackoverflow.com/questions/11764713/why-do-integers-in-database-row-tuple-have-an-l-suffix">read more here</a></p>
<p>Second, you should rewrite your <code>print</code> command in a <code>print()</code> function.
<a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow noreferrer">read more here</a></p>
</div>
<span class="comment-copy">Have you tried running your code on the 3.6.5 interpreter? If so what errors/warnings do you get. The question is much too broad to be answered by anyone on this site.</span>
<span class="comment-copy">IMHO this question isn't too broad, but you should also show us your attempt at a Python 3 version, and explain the errors that you get when you try to run it on Python 3.6. The 2to3 tool can help with the conversion, but this code will need a few more tweaks, due to the Python 3 way of handling bytes.</span>
<span class="comment-copy">I am getting a syntax error on 2208988800L</span>
<span class="comment-copy">Yes, that old long integer format doesn't exist in Python 3. You will need to learn the basic differences between Python 2 &amp; 3 to do this conversion correctly. The 2to3 program should be part of your Python installation, and it can convert stuff like that. You might have a couple of different versions of 2to3, so make sure you run the latest one!</span>
<span class="comment-copy">After I change print(), I get error, <i>TypeError: a byte-like object is required, not 'str'</i> on.. <code>s.sendto(NTP_QUERY, (host, port))</code> &amp; <code>print time.ctime(ntp_time()).replace("  "," ")</code></span>
