<div class="post-text" itemprop="text">
<p>I'm attempting to make a Python3.6 package, but have run into ModuleNotFound errors when importing from within the package. The package has the following structure:</p>
<pre><code>project/
    project/
        cache/
            default.py
            interface.py
        __init__.py
        handler.py
test.py
</code></pre>
<p>The <code>__init__.py</code> file contains the following:</p>
<pre><code>from .handler import Handler

def getHandler(access_token=None, **kwargs):
    return Handler(access_token, **kwargs)
</code></pre>
<p>And then within <code>handler.py</code>, I'm attempting to import from <code>cache</code> with the following:</p>
<pre><code>from .cache.default import DefaultCache
</code></pre>
<p>The goal is to allow the following by client code:</p>
<pre><code>import project

handler = project.getHandler()
</code></pre>
<p>That last import is failing, and I'm not clear why. Any ideas? TIA.</p>
<p>Not sure how relevant it is, but I'm testing this by running the following in the outer <code>project</code> directory:</p>
<pre><code>&gt; pip install .
&gt; python3 ../test.py
</code></pre>
<p>This returns the following traceback
<code>
(venv) Jamess-MacBook-Pro-2:project james$ python3 ../test.py 
Traceback (most recent call last):
  File "../test.py", line 1, in &lt;module&gt;
    import project
  File "/Users/james/Work/Project/project/venv/lib/python3.6/site-packages/project/__init__.py", line 1, in &lt;module&gt;
    from .handler import Handler
  File "/Users/james/Work/Project/project/venv/lib/python3.6/site-packages/project/handler.py", line 7, in &lt;module&gt;
    from .cache.default import DefaultCache
ModuleNotFoundError: No module named 'project.cache'
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>From your traceback:</p>
<pre><code>  File "/Users/james/Work/Project/project/venv/lib/python3.6/site-packages/project/handler.py", line 7, in &lt;module&gt;
    from cache.default import DefaultCache
</code></pre>
<p>That's not the same as the code you showed us here:</p>
<pre><code>from .cache.default import DefaultCache
</code></pre>
<p>The <code>.cache.default</code> is correctâ€”that's a relative path from within <code>project</code>, so it will find <code>project.cache.default</code> in <code>project/cache/default.py</code>.</p>
<p>The <code>cache.default</code> without the leading dot in your actual code is an absolute path, from any of the directories in <code>sys.path</code>. Since there is no file or directory named <code>cache</code> in any of those directories, it fails.</p>
<hr/>
<p>Meanwhile, your project directory structure doesn't seem to be the same thing you showed us either. Otherwise, <code>import project</code> should not find the installed version. By default (and I don't think you've done anything to change it), the first entry in <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer"><code>sys.path</code></a> "is the directory containing the script that was used to invoke the Python interpreter". Which, given the structure you posted here, means that <code>import project</code> should find the <code>project</code> subdirectory in the same directory as <code>test.py</code>, not the one in your venv's <code>site-packages</code>.</p>
</div>
<span class="comment-copy">remove starting <code>"."</code> from your import</span>
<span class="comment-copy">Hmm I did that and now get the following error:      from cache.default import DefaultCache     ModuleNotFoundError: No module named 'cache'  Also I've updated the original question to include info about how I'm testing.</span>
<span class="comment-copy">@mad_ Why? In Python 3, that would make it an absolute import, and there's nothing named <code>handler</code> directly under <code>sys.path</code>.</span>
<span class="comment-copy">I can't reproduce this with your example, either locally or <a href="https://repl.it/repls/KnownDeadlySection" rel="nofollow noreferrer">on repl.it</a>. Whether I run <code>python3 ../test.py</code> or <code>cd ..; python3 test.py</code>, the <code>import proejct</code>, <code>from .handler import Handler</code>, and <code>from .cache.default import DefaultCache</code> all work, and it exits without any errors.</span>
<span class="comment-copy">Try <code>print(sys.path)</code>, and you'll see that the path to the main script comes <i>before</i> your virtualenv's <code>site-packages</code> directory. Or at least that's the default behavior; see the <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer"><code>sys.path</code></a> docs and the links to <code>site</code> and <code>PYTHONPATH</code> from there.</span>
<span class="comment-copy">Ah, you're right, I copied the wrong traceback. That was one where I was trying out a different import path. It's updated. Looks like the issue was that since <code>project</code> is nested (<code>/project/project</code>), and <code>test.py</code> is was in the same directory as the outer <code>project</code> directory, it was looking in a different place than I assumed. Thanks very much for the help!</span>
