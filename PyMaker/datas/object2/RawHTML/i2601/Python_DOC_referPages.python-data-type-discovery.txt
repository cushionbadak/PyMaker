<div class="post-text" itemprop="text">
<p>I have a function that receives a str, that can represent any of the following:</p>
<pre><code>float &lt;-- eg: '1.5', '1.0'
int &lt;-- eg: '123','0'
datetime.date &lt;-- eg: if so, it'll always be in this format '30-AUG-18'
str &lt;-- eg: "value1", "01", "02"
NoneType &lt;-- eg: None
</code></pre>
<p>How can I gracefully discover and then cast the input to its appropriate type?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use python's typecasting to achieve this:</p>
<pre><code>float('2.3')
int('2')
datetime.strptime('2018-02-02', '%Y-%m-%d')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>. </p>
<pre><code>from ast import literal_eval
from datetime import datetime

def dataType(s):
    s = s.strip()
    try:
        t = literal_eval(s)
    except ValueError:
        try:
            return 'datetime.date', datetime.strptime(s.upper(), '%d-%b-%y')
        except ValueError:
            return 'str', s
    except SyntaxError:
        return 'str', s
    else:
        return type(t).__name__, t

for s in ['1.5', '1.0', '123', '0', '30-AUG-18', 'value1', '01', '02', 'None']:
    type_name, value = dataType(s)
    print(type_name, str(value))
</code></pre>
<p>Outputs:</p>
<blockquote>
<pre><code>float 1.5
float 1.0
int 123
int 0
datetime.date 2018-08-30 00:00:00
str value1
str 01
str 02
NoneType None
</code></pre>
</blockquote>
</div>
<span class="comment-copy">You can use a bunch of if statements: <code>if isinstance(x, float)</code></span>
<span class="comment-copy">btw <code>int('01') == 1</code></span>
<span class="comment-copy">Yes this 01 is tricky, i want '01', '02' to remain strs, but 1 or 2 should be int.</span>
<span class="comment-copy">Please accept an answer if it worked out for you! :)</span>
<span class="comment-copy">I also want '1.0' to be 1, ie, if return integer whenever i can without losing precision.</span>
