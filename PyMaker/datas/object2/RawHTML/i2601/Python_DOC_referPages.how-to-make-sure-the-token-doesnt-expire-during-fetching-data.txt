<div class="post-text" itemprop="text">
<p>This is my code:</p>
<pre><code>data = {"client_id": config.client_id, "client_secret": config.client_secret,
        "grant_type": "client_credentials", "scope": "PublicApi"}


def kAuth(self, data):
    urlAuth = 'http://...'
    try:
        response = requests.post(urlAuth, data=data, verify=False)
        return response
    except requests.exceptions.HTTPError as err:
        print (err)
    except requests.exceptions.Timeout:
        pass
    except requests.exceptions.TooManyRedirects:
        pass
    except requests.exceptions.RequestException as e:
        print (e)
        sys.exit(1)

def kData(self, data, auth_token,...):

    hed = {'Authorization': 'Bearer ' + auth_token, 'Accept': 'application/json'}
    urlApi = 'http://...'.format(apifolder,additional)
    responsedata = requests.get(urlApi, data=data, headers=hed, verify=False)
    if responsedata.ok:
        num_of_records = int(math.ceil(responsedata.json()['total']))
        if num_of_records == 0:
            print ("No new records to import.")
            return None

        ...


        with ThreadPoolExecutor(max_workers=num_of_workers) as executor:
            futh = [(executor.submit(self.getdata, page, hed, data)) for page in pages]
            for data in as_completed(futh):
                datarALL.extend(data.result())
        print ("Finished generateing data.")
        return datarALL

def getdata(self, page, hed, data, ...):
   ...
   responsedata = requests.get(url, data=data, headers=hed, verify=False)
   return  ...

response = my_lib.kAuth(data)
if response.ok:
    access_token = response.json()['access_token']
    token_type = response.json()['token_type']
    expires_in = response.json()['expires_in']
    response_k = my_lib.kData(data, access_token, apifolder)
</code></pre>
<p>I first perform authentication using the <code>kAuth</code> function. Then I make first get call to get the number of records to import, then I'm using threads to get the data (pages) using <code>self.getdata</code> function. when all threads finish I return the result. This works however there is a risk that the token will expire in the middle of the process.</p>
<p>My Question:
currently the code make authentication only once at the beginning then the <code>auth_token</code> is passed and used with in the <code>header</code>. How can I modify it to refresh the token if it expires ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would probably be optimistic and just try the request. If it fails, then re-authenticate and then retry the request:</p>
<pre><code>def getdata(self, page, hed, data, ...):
   ...
   responsedata = requests.get(url, data=data, headers=hed, verify=False)
   if responsedata.status_code == 401:
      hed['Authorization'] = 'Bearer ' + my_lib.kAuth(kauth_data).json()['access_token']
      responsedata = requests.get(url, data=data, headers=hed, verify=False)
   return  ...
</code></pre>
<p>Or, as Klaus D. suggests, check current time and refresh the token if <code>expires_in</code> has been reached.</p>
</div>
<span class="comment-copy">You refresh the token in time, there's an expiration information in it.</span>
<span class="comment-copy">@KlausD. I'm aware of it.. the question is how to refresh it and let the code continue from where it stopped.</span>
<span class="comment-copy">Hold the token globally and update it on time. Handing it over as argument will prevent you from updating it.</span>
<span class="comment-copy">@KlausD. I used Erik answer and modified getdata to update the token and moved the hed to be a class variable. However getdata is executed by threads.. I'm afraid that this is not thread safe solution.</span>
<span class="comment-copy">When you run several threads it will happen that the token expires in all threads at the same time and you will have many (or even all) threads refreshing the token at the same time. This is way I would use an extra threads that does nothing else then refreshing the token let's say a minute before it expires. An all threads rely on that token.</span>
<span class="comment-copy">I wanted to work with the expires_in but I'm not sure how. I thought maybe the library provide a way to handle it</span>
<span class="comment-copy">Which library? <code>requests</code>? It doesn't know how to get a token from your API, and will not start a dormant thread that wakes up when <code>expires_in</code> is approaching.</span>
<span class="comment-copy">You can rely on <code>expires_in</code>, but you'll still need to handle the case where your API decides to expire the token earlier than you anticipated.</span>
<span class="comment-copy">I think it's better that the first thread that encounter expired token will refresh it for all of them. I changed the header to be a class variable so all threads access the same variable. The problem is how to make the access &amp; update of this variable thread safe.</span>
<span class="comment-copy">If you want thread safety, then require callers to acquire a Lock before accessing or changing the token. See <a href="https://docs.python.org/3/library/threading.html#threading.Lock" rel="nofollow noreferrer">docs.python.org/3/library/threading.html#threading.Lock</a></span>
