<div class="post-text" itemprop="text">
<p>I need to build the following JSON structure dynamically.</p>
<pre><code>json = {
    "mainkey":"val1",
    "key2":[
   {"keya":"val1rec1","keyb":"val2rec1","keyc":"val3rec1"},
   {"keya":"val1rec2","keyb":"val2rec2","keyc":"val3rec2"},
   {"keya":"val1rec3","keyb":"val2rec3","keyc":"val3rec3"},
   {"keya":"val1rec4","keyb":"val2rec4","keyc":"val3rec4"},
   {"keya":"val1rec5","keyb":"val2rec5","keyc":"val3rec5"}
            ]
       }
</code></pre>
<p>only the "{"keya":"val1rec1","keyb":"val2rec1","keyc":"val3rec1"}," rows "iterate" - ie, reading values from a CSV file and then populating/creating the rows based on what is inside a CSV file.</p>
<p>So my pseudo code looks something like this:</p>
<pre><code>#create dict
path = 'somewhere\on\my\disk\file.csv'
json_file = {}
json_file['mainkey'] = "val1" 
#read from CSV file
df1 = pd.read_csv(path, header=None)
    #iterate through csv
for row,s in df1.iterrows():
    number = df1.loc[row,0]
    #I'm reading keyb and keyc values from CSV as well, but for brevity my substitution below is not showing that.... 
    json_file['key2'] = "'keya':'"+str(number)+"','keyb':'whatever','keyc':'whatever'"
print (json_file)
</code></pre>
<p>It obviously fails to produce what I'm looking for above - hence my post here for assistance.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're trying to construct a json-encoder manually, this is unecessary since there's a great <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json-encoder built into python</a>.</p>
<p>I'd recommend building up your dict using the native data structre and use the builtin json-utilites. This will both produce cleaner more maintainable code and is less error prone. </p>
<p>Like this:</p>
<pre><code>import json
# ... Other imports you may have such as pandas


path = "somewhere\on\my\disk\file.csv"
# Initialize dict
data = {"mainkey": "val1", "key2": list()}

# Parse CSV file
df1 = pd.read_csv(path, header=None)
# iterate through csv
for row,s in df1.iterrows():
    number = df1.loc[row,0]

    # I'm reading keyb and keyc values from CSV as well, 
    # but for brevity my substitution below is not showing that.... 
    data['key2'].append({
        "keya":number,
        "keyb":"whatever",
        "keyc":"whatever",
    })

# Print json to stdout/terminal
json_data = json.dumps(data)
print(json.dumps(data, sort_keys=True))

# Save json to file (data.json)
with open("data.json", "w") as output:
    json.dump(data, output, sort_keys=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are overwriting <code>key2</code> values while you should append them to the list:</p>
<pre><code>json_file['key2'] = []
for row,s in df1.iterrows():
    number = df1.loc[row,0]
    json_file['key2'].append({'keya': str(number), 'keyb': 'whatever', 'keyc': 'whatever'})
print (json_file)
</code></pre>
</div>
<span class="comment-copy">Could you provide the csv-file you're working with? At least a sample.</span>
<span class="comment-copy">After further looking through your code it looks like you try to build the json object structure manually for key2 but use proper dict-structure prior to that.  See my <a href="https://stackoverflow.com/a/52073824/274752">answer</a> for further details.</span>
<span class="comment-copy">Thanks, I think I understand your suggestion - however, when I do this, the json is not in the correct order - the "mainkey" is printed as the last key in the file?</span>
<span class="comment-copy">This shouldnâ€™t matter since hashmaps/dicts are unordered. However in Python 3.6+ dicts are sorted by default.</span>
<span class="comment-copy">Okay so I did a little bit more digging for you, if you want it ordered you can pass sorted_keys=True to json.dump(s). If using python 3.6/3.7 that should be enough, if you're using and earlier version you'll have to use an OrderedDict. You can also control indention with indent=X. See my updated answer for a sorted implementation.</span>
<span class="comment-copy">If this doens't work for you please provide which version of python you're using otherwise I won't be able to further help yo.</span>
<span class="comment-copy">Thank you. Also figured out that the order doesn't matter, so your solution works fine.</span>
