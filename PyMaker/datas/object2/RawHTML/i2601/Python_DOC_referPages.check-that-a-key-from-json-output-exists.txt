<div class="post-text" itemprop="text">
<p>I keep getting the following error when trying to parse some json:</p>
<pre><code>Traceback (most recent call last):
  File "/Users/batch/projects/kl-api/api/helpers.py", line 37, in collect_youtube_data
    keywords = channel_info_response_data['items'][0]['brandingSettings']['channel']['keywords']
KeyError: 'brandingSettings'
</code></pre>
<p>How do I make sure that I check my JSON output for a key before assigning it to a variable? If a key isn’t found, then I just want to assign a default value. Code below:</p>
<pre><code>try:
    channel_id = channel_id_response_data['items'][0]['id']
    channel_info_url = YOUTUBE_URL + '/channels/?key=' + YOUTUBE_API_KEY + '&amp;id=' + channel_id + '&amp;part=snippet,contentDetails,statistics,brandingSettings'
    print('Querying:', channel_info_url)
    channel_info_response = requests.get(channel_info_url)
    channel_info_response_data = json.loads(channel_info_response.content)
    no_of_videos = int(channel_info_response_data['items'][0]['statistics']['videoCount'])
    no_of_subscribers = int(channel_info_response_data['items'][0]['statistics']['subscriberCount'])
    no_of_views = int(channel_info_response_data['items'][0]['statistics']['viewCount'])
    avg_views = round(no_of_views / no_of_videos, 0)
    photo = channel_info_response_data['items'][0]['snippet']['thumbnails']['high']['url']
    description = channel_info_response_data['items'][0]['snippet']['description']
    start_date = channel_info_response_data['items'][0]['snippet']['publishedAt']
    title = channel_info_response_data['items'][0]['snippet']['title']
    keywords = channel_info_response_data['items'][0]['brandingSettings']['channel']['keywords']
except Exception as e:
    raise Exception(e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How do I make sure that I check my JSON output</p>
</blockquote>
<p>At this point your "JSON output" is just a plain native Python <code>dict</code></p>
<blockquote>
<p>for a key before assigning it to a variable? If a key isn’t found, then I just want to assign a default value</p>
</blockquote>
<p>Now you know you have a <code>dict</code>, browsing the official documention for <code>dict</code> methods should answer the question:</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#dict.get</a></p>
<blockquote>
<p><strong>get(key[, default])</strong></p>
<p>Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.</p>
</blockquote>
<p>so the general case is:</p>
<pre><code>var = data.get(key, default)
</code></pre>
<p>Now if you have deeply nested dicts/lists where any key or index could be missing, catching KeyErrors and IndexErrors can be simpler:</p>
<pre><code>try:
   var = data[key1][index1][key2][index2][keyN]
except (KeyError, IndexError):
   var = default
</code></pre>
<p>As a side note: your code snippet is filled with repeated <code>channel_info_response_data['items'][0]['statistics']</code> and <code>channel_info_response_data['items'][0]['snippet']</code> expressions. Using intermediate variables will make your code more readable, easier to maintain, AND a bit faster too:</p>
<pre><code># always set a timeout if you don't want the program to hang forever
channel_info_response = requests.get(channel_info_url, timeout=30)
# always check the response status - having a response doesn't
# mean you got what you expected. Here we use the `raise_for_status()`
# shortcut which will raise an exception if we have anything else than
# a 200 OK.
channel_info_response.raise_for_status()

# requests knows how to deal with json:
channel_info_response_data = channel_info_response.json()

# we assume that the response MUST have `['items'][0]`,
# and that this item MUST have "statistics" and "snippets"
item = channel_info_response_data['items'][0]
stats = item["statistics"] 
snippet = item["snippet"]

no_of_videos = int(stats.get('videoCount', 0))
no_of_subscribers = int(stats.get('subscriberCount', 0))
no_of_views = int(stats.get('viewCount', 0))
avg_views = round(no_of_views / no_of_videos, 0)

try:
   photo = snippet['thumbnails']['high']['url']
except KeyError:
   photo = None

description = snippet.get('description', "")
start_date = snippet.get('publishedAt', None)
title = snippet.get('title', "")
try:
   keywords = item['brandingSettings']['channel']['keywords']
except KeyError
   keywords = ""
</code></pre>
<p>You may also want to learn about string formatting (contatenating strings is quite error prone and barely readable), and <a href="http://docs.python-requests.org/en/master/user/quickstart/#passing-parameters-in-urls" rel="nofollow noreferrer">how to pass arguments to <code>requests.get()</code></a> </p>
</div>
<div class="post-text" itemprop="text">
<p>You can either wrap all your assignment in something like </p>
<pre><code>try:
    keywords = channel_info_response_data['items'][0]['brandingSettings']['channel']['keywords']
except KeyError as ignore:
    keywords = "default value"
</code></pre>
<p>or, let say, use <code>.has_key(...)</code>. IMHO In your case first solution is preferable</p>
</div>
<div class="post-text" itemprop="text">
<p>suppose you have a dict, you have two options to handle the key-not-exist situation:</p>
<p>1) get the key with default value, like</p>
<pre><code>d = {}
val = d.get('k', 10)
</code></pre>
<p><code>val</code> will be 10 since there is not a key named <code>k</code></p>
<p>2) try-except</p>
<pre><code>d = {}
try:
  val = d['k']
except KeyError:
  val = 10
</code></pre>
<p>This way is far more flexible since you can do anything in the <code>except</code> block, even ignore the error with a <code>pass</code> statement if you really don't care about it.</p>
</div>
<span class="comment-copy"><code>except Exception as e:     raise Exception(e)</code> This does nothing FYI except masking your error</span>
<span class="comment-copy">Thanks for pointing that out. How can I fix that?</span>
<span class="comment-copy">Depends what you want to do</span>
<span class="comment-copy">In this scenario I guess it wouldn’t hurt to just ignore the assignment of the variable instead of crashing out</span>
<span class="comment-copy">You just want to do if key in Whatever nested object: Do sth else: Create key with default value</span>
<span class="comment-copy">or <code>dict.get(key, default)</code> though in a long chain like this that will be easier when we have None coalescing operators <a href="https://www.python.org/dev/peps/pep-0505/" rel="nofollow noreferrer">python.org/dev/peps/pep-0505</a></span>
