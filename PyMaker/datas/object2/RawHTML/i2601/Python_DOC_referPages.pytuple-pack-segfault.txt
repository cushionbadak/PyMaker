<div class="post-text" itemprop="text">
<p>I have a function <code>foo</code> in a Python Extension Module that should return a tuple of ints to Python. This can be easily done using <code>Py_BuildValue</code>:</p>
<pre><code>static PyObject* 
foo(PyObject* self, PyObject* args)
{
    int a = 0;
    int b = 0;

    /* calculations and stuff */

    PyObject* out = Py_BuildValue("(iii)", a, b, a+b);
    Py_INCREF(out);

    return out;
}
</code></pre>
<p>Instead of <code>Py_BuildValue</code>, I want to use <code>PyTuple_Pack</code>, which ensures that the return value is indeed a tuple.</p>
<p>The <a href="https://docs.python.org/3.7/c-api/tuple.html#c.PyTuple_Pack" rel="nofollow noreferrer">Python C API documentation</a> says that <code>PyTuple_Pack(3, a, b, a+b)</code> is equivalent to <code>Py_BuildValue("(iii)", a, b, a+b)</code>. Both functions return a new reference of type <code>PyPbject*</code>.</p>
<p>Hence, given the code above,</p>
<pre><code>static PyObject* 
foo(PyObject* self, PyObject* args)
{
    /* ... */

    PyObject* out = PyTuple_Pack(3, a, b, a+b);
    Py_INCREF(out);

    return out;
}
</code></pre>
<p>should do the trick, which is does not. Instead I get a segfault.
What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>The difference is:</p>
<ul>
<li><code>Py_BuildValue("(ii)", a, b)</code> expects <code>a</code> and <code>b</code> to be simple C-int values.</li>
<li><code>PyTuple_Pack(2, a, b)</code> expects <code>a</code> and  <code>b</code> to be already <code>PyObject</code>s (and not C-ints).</li>
</ul>
<p>The <a href="https://docs.python.org/3.7/c-api/tuple.html#c.PyTuple_Pack" rel="nofollow noreferrer">documentation</a> says: </p>
<blockquote>
<p>The tuple values are initialized to the subsequent n C arguments pointing to <strong>Python objects</strong>. <code>PyTuple_Pack(2, a, b)</code> is equivalent to <code>Py_BuildValue("(OO)", a, b)</code>.</p>
</blockquote>
<p>In order to use <code>PyTuple_Pack</code> you need to convert the int-values to Python-Integers first. </p>
<p>It is simpler to use <code>Py_BuildValue()</code>. If you parenthesize your format string in <a href="https://docs.python.org/3/c-api/arg.html#c.Py_BuildValue" rel="nofollow noreferrer"><code>Py_BuildValue</code></a>, the result will be a tuple:</p>
<blockquote>
<p><code>Py_BuildValue()</code> does not always build a tuple. It builds a tuple only if its format string contains two or more format units. If the format string is empty, it returns None; if it contains exactly one format unit, it returns whatever object is described by that format unit. <strong>To force it to return a tuple of size 0 or one, parenthesize the format string</strong>.</p>
</blockquote>
<p>That means: there is nothing to worry about if you construct a tuple from at least two elements:</p>
<pre><code>Py_BuildValue("ii", a, b)   # returns a tuple
Py_BuildValue("(ii)", a, b) # returns a tuple
</code></pre>
<p>It is different if there is only one element:</p>
<pre><code>Py_BuildValue("i", a)    # returns an integer
# parenthesized:
Py_BuildValue("(i)", a)  # returns a tuple with an integer
</code></pre>
<p>or no elements at all:</p>
<pre><code>Py_BuildValue("")    # returns None
# parenthesized:
Py_BuildValue("()")  # returns an empty tuple.
</code></pre>
<p>So just make sure there are parenthesizes in the format string and the returned value will be a tuple.</p>
</div>
