<div class="post-text" itemprop="text">
<p>MATLAB has a function "<strong>fi</strong>" for representing fractions in fixed-point scheme. Its syntax is </p>
<pre><code>fi(fraction, sign, word_length, fraction_length).
</code></pre>
<p>For example, to represent -0.4 in fixed-point with 8-bit word_length and 7-bit fraction_length, it returns the following:</p>
<pre><code>fixed_number = fi(-0.4, 1, 8, 7) = -0.3984
fixed_number.int = -51
fixed_number.bin = 11001101
</code></pre>
<p><strong>Query</strong>: Can we do similar in Python? Is there any function for performing this?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pypi.org/project/rig/" rel="nofollow noreferrer">Python's rig library</a> is useful for this purpose. It supports both floating to fixed and fixed to floating point conversion. </p>
<p><a href="https://rig.readthedocs.io/en/stable/ten_lines/type_casts_doctest.html" rel="nofollow noreferrer">Example</a>:</p>
<pre><code>&gt;&gt;&gt; from rig.type_casts import float_to_fp, fp_to_float

&gt;&gt;&gt; # Create a function to convert a float to a signed fractional
&gt;&gt;&gt; # representation with 8 bits overall and 4 fractional bits (S3.4)
&gt;&gt;&gt; s34 = float_to_fp(signed=True, n_bits=8, n_frac=4)
&gt;&gt;&gt; hex(int(s34(0.5)))
'0x8'
&gt;&gt;&gt; hex(int(s34(-7.5)))
'-0x78'

&gt;&gt;&gt; # ...and make a function to convert back again!
&gt;&gt;&gt; f4 = fp_to_float(n_frac=4)
&gt;&gt;&gt; f4(0x08)
0.5
&gt;&gt;&gt; f4(-0x78)
-7.5
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal.Decimal</code></a> is python's (arguably more useful) fixed point number type.</span>
<span class="comment-copy">This answer would be better if it contained a link to the mentioned library and an example of usage.</span>
<span class="comment-copy">Thanks. I edited my previous reply.</span>
