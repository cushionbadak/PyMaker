<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4288973/whats-the-difference-between-s-and-d-in-python-string-formatting">What's the difference between %s and %d in Python string formatting?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>In python string formatting %s supports string, integer, and float</p>
<pre><code>&gt;&gt;&gt; '%s' % 'a'
'a'
&gt;&gt;&gt; '%s' % 1
'1'
&gt;&gt;&gt; '%s' % 1.1
'1.1'
</code></pre>
<p>where as %d accepts and formats only integer and %s accepts only %f</p>
<pre><code>&gt;&gt;&gt; '%d' % 1
'1'
&gt;&gt;&gt; '%d' % 'a'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: %d format: a number is required, not str
</code></pre>
<p>Why is that %s alone accepts all three and even more</p>
</div>
<div class="post-text" itemprop="text">
<p><code>%s</code> explicitly <em>converts the input to string</em>. <code>%s</code>, <code>%r</code> and <code>%a</code> are the only three placeholders that convert values. From the <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer"><code>printf</code>-style formatting documentation</a>:</p>
<blockquote>
<p><code>'s'</code><br/>
  String (converts any Python object using <code>str()</code>).</p>
</blockquote>
<p>So <code>%s</code> supports any object, as all Python objects support <code>str()</code> conversion. <code>%d</code> does not do any conversion.</p>
<p>The other placeholders only support specific types. You probably want to use the <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">new string formatting syntax</a> instead (via <code>str.format()</code> or <code>f</code>-strings), where conversion and formatting types have been separated. There <code>!s</code>, <code>!r</code> and <code>!a</code> can be added to first convert the value before formatting, keeping the syntax distinct and clearer that conversion takes place.</p>
<p>You still can't apply the <code>d</code> format to strings, of course, you'll have to explicitly convert non-integer input values to integers manually if you want to use a <code>d</code> field format.</p>
<p>The <code>%s</code> and <code>!s</code> string conversion is useful for types that do not otherwise have explicit formatting support. It allows you to accept <em>any</em> type of object and still give it some formatting in a template string, even if only to limit the field width or set a text alignment. And only string conversion is universally supported, you can't convert arbitrary objects to integers or floats, for example.</p>
</div>
<span class="comment-copy">%s stands for a string. Since a string can be any of those, it is possible. And for a %d, since a string value can be always taken as an integer, it is not possible.</span>
<span class="comment-copy">Just as a hint, newer python uses new string formatting <code>"{} {}".format('hello', 3)</code></span>
