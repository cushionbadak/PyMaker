<div class="post-text" itemprop="text">
<p>I am writing a code and i am not getting the desired output.It would be great if anyone can help me by pointing out what i am doing wrong.My code is:</p>
<pre><code>shift = input()

word_original = input()
corrected_word = ""

keyboard_characters = "qwertyuiopasdfghjkl;zxcvbnm,./"

if shift == "R":
    for i in range(len(shift)-1):
        ind = keyboard_characters.find(shift[i]) + 1
        corrected_word = corrected_word + keyboard_characters[ind]

else:
    for i in range(len(shift)-1):
        ind = keyboard_characters.find(shift[i]) - 1
        corrected_word = corrected_word + keyboard_characters[ind]


print(len(corrected_word))
</code></pre>
<p>Here according to me i am supposed to be getting the corrected_word but instead it is giving its length to be 0 ,i.e, it is just what i had defined it initially,i.e, empty string</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that your loop operates on <code>for i in range(len(shift)-1):</code> where you ment to use <code>for i in range(len(word_original )-1):</code>.</p>
<p>Iterating by index over a string is not needed here, you could simply go for </p>
<pre><code>for letter in word_original:
    substIdx = keyboard_characters.find(letter) + 1 
    [...]
</code></pre>
<p>But this will get you out of bounds error if your text contains <code>'/'</code> as your index is now outside of  <code>keyboard_characters</code> length. Also you do not handle non-existent mappings (f.e. space) for which find will return a value thats probably not correct.</p>
<p><em>Fix of your code:</em> </p>
<p>Strings are immutables. by using <code>s = s + "..."</code> you are creating lots of throw-away <code>strings</code> wich takes perfomance. Use a <code>list</code> instead and <code>''.join(mylist)</code> afterwards to get the string. </p>
<pre><code>shift = input() 
word_original = input()
corrected_word = []

keyboard_characters = "qwertyuiopasdfghjkl;zxcvbnm,./"
keyset = set(keyboard_characters) # tesint for 'in' faster on sets
lenk = len(keyboard_characters)   # compute once, use often

if shift == "R":
    for letter in word_original:
        if letter not in keyset: # no substitution? use as is
            corrected_word.append( letter )
            continue
        ind = keyboard_characters.find(letter) + 1

        if ind == lenk:
            ind = 0 # wrap around
        corrected_word.append(keyboard_characters[ind])

else:
    for letter in word_original:
        if letter not in keyset: # no substitution? use as is
            corrected_word.append( letter )
            continue
        ind = keyboard_characters.find(letter) - 1

        if ind &lt; 0:
            ind = lenk # wrap around
        corrected_word.append( keyboard_characters[ind] )

corrected_word_str = ''.join(corrected_word)

print(corrected_word_str)
</code></pre>
<hr/>
<p><em>Better way to solve this task:</em></p>
<p>What you try to code already has a solution using python - for replacing something, <code>dict</code>s are great as you mapp a key to a value. For strings there are even convenience functions that build the dict for you:</p>
<p>Readup:</p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer">str.translate()</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">str.maketrans()</a></li>
</ul>
<p>If a character is not present in the lookup, it is used as is (space f.e.)</p>
<pre><code>keyboard_characters = "qwertyuiopasdfghjkl;zxcvbnm,./"

# create replace dicts
# this mapps around - / is "before" q and q is "after" /
forward = str.maketrans(keyboard_characters,
                        keyboard_characters[1:] + keyboard_characters[0])

backward = str.maketrans(keyboard_characters,
                         keyboard_characters[-1] + keyboard_characters[:-1])

word_original = input()

forw = word_original.translate(forward)
back = word_original.translate(backward)

print(word_original, forw, back, sep="\n\n") 
</code></pre>
<p>Output:</p>
<pre><code># original text
some text with ;and / in it

# forward
dp,r yrcy eoyj zsmf q om oy

# backward
ainw rwzr qurg lpbs . ub ur
</code></pre>
</div>
<span class="comment-copy">You haven't specified what your code is supposed to do, but if <code>shift</code> is one character long, <code>range(len(shift)-1)</code> is empty, so your <code>for</code> loop will run zero times. You don't seem to be using your <code>word_original</code> string at all.</span>
