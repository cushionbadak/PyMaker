<div class="post-text" itemprop="text">
<p><strong>Issues</strong></p>
<p>I currently have a simple <strong>Python</strong> multithreaded server program, which will run forever with out manual interruption. I want to achieve that it can be terminated gracefully at some point. Once it is terminated, I want the server to output some stats. </p>
<p><strong>Solutions I have tried</strong></p>
<ol>
<li>Terminate the program by <code>kill</code>. The issue is that the server cannot output the stats because the HARD termination. </li>
<li>Create a control thread in the program, which listens the key input. And if key is pressed, then terminate the program and get stats. The issue with this approach is I need to do every step manually. E.g, SSH to the device, start the program, and press key at some point. </li>
</ol>
<p><strong>Question</strong></p>
<p>Is there a way that I can run some <strong>bash/or other program</strong> to stop the program gracefully with stats output?</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried to use <a href="https://docs.python.org/3/library/signal.html#signal.signal" rel="nofollow noreferrer">signal.signal()</a> to register a handler for e.g. <code>SIGTERM</code>? There you could implement this part of code that throws out the statistics and then just terminate the program.</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard approach is to either</p>
<ul>
<li>make threads sufficiently short-lived</li>
<li>at the stop signal, stop spawning new ones and <code>.join()</code> the active ones.</li>
</ul>
<p>or</p>
<ul>
<li>make threads periodically (e.g. after serving each request) check some shared stop flag and quit when it's set</li>
<li>at the stop signal, set the stop flag, then <code>.join()</code> the threads</li>
</ul>
<p>Some threads can be <code>.setDaemon(True)</code>, <a href="https://stackoverflow.com/questions/190010/daemon-threads-explanation">but only if they can be safely killed off</a> (there's no exception or anything raised in the thread, it's just stopped where it is).</p>
<p><a href="https://stackoverflow.com/questions/6359597/gracefully-terminating-python-threads">If a thread is in a blocking call</a>, it may be possible to unblock it by shutting down the facility that it is waiting on (close the socket or the stream).</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/5849484/how-to-exit-a-multithreaded-program">How to exit a multithreaded program?</a></span>
<span class="comment-copy">I don't think so. My point is I know how to stop all running threads in my Python program. I want the server be terminated by some external signals. Otherwise, I will let the server keep running.</span>
<span class="comment-copy">In that case, you can catch an external signal from within and then gracefully exit from the thread. Either way, for a graceful exit, you have to implement the exiting functionality in the thread itself, by reading some flag.</span>
