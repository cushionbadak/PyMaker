<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19330460/how-do-i-put-docstrings-on-enums">How do I put docstrings on Enums?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I understand that I can add a Python docstring to an enum type as I would any other class. But how do I add documentation to an element of that type?</p>
<p>As far as I can see there are three possibilities:</p>
<pre><code>class MyEnum(Enum):
    """
    This is my enum type.
    """

    """
    Variant 1
    """
    a = 0,  
    b = 1, # variant 2
    c = 2, """ variant 3 """
</code></pre>
<p>But none of them really work consistently.
If I call <code>print(inspect.getdoc(MyEnum.a))</code> in any of the variants, the docstring of the <code>MyEnum</code> type is returned ('This is my enum type'). Pycharm can show variant 3 in its Quick Documentation preview, but includes the quotes and longer comments that exceed the column wrap will not be shown correctly.</p>
<p>Is there a preferred way or convention on how to document Python enum elements?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the values themselves are not important, see <a href="https://stackoverflow.com/q/19330460/208880">How do I put docstrings on Enums?</a>.  If the values are important you can either customize that answer or use the <code>aenum</code><sup>1</sup> library:</p>
<pre><code>from aenum import Enum

class MyEnum(Enum):
    _init_ = 'value __doc__'
    a = 0, 'docstring for a'
    b = 1, 'another for b'
    c = 2, 'and one for c as well'
</code></pre>
<p>which results in:</p>
<pre><code>&gt;&gt;&gt; MyEnum.b.value
1
&gt;&gt;&gt; MyEnum.b.__doc__
'another for b'
</code></pre>
<p>However, I do not know which, if any, IDEs support using Enum member doc strings.</p>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<span class="comment-copy">You should be aware that tripe-quoted strings are still strings, and the commas after your values are causing them to be evaluated as tuples.  Your <code>MyEnum.a</code> has value <code>(0,)</code>, and <code>MyEnum.c</code> has value <code>(2, ' variant 3 ')</code>!</span>
<span class="comment-copy">Wow thank you Patrick, I hadn't even thought of that, although it's very obvious now that you pointed it out.</span>
<span class="comment-copy">What <code>inspect.getdoc()</code> is returning <b>is</b> the docstring of your <code>MyEnum</code> class, and is therefore correct due to how they are handled in Python. How you document the values is strictly how you want to do itâ€”so there's no "proper" way to do it.</span>
<span class="comment-copy">But I don't want the docstring of the type, I want that of the element.</span>
<span class="comment-copy">Why not name the enum variables themselves in a self-documenting way e.g. replacing <code>a</code> with <code>VARIANT_A</code>.</span>
<span class="comment-copy">Thank you Ethan! And thanks for marking the duplicate. Hadn't found the question and it definitely didn't show up in the suggestions when I formulated the question.</span>
<span class="comment-copy">@thrau:  No worries, happy to help.</span>
