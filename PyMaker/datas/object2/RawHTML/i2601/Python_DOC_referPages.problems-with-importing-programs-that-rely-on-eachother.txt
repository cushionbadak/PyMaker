<div class="post-text" itemprop="text">
<p>My program requires the usage of a hash table, and an sql database; currently I would like to put the hash table part of my program (add,get,delete etc) and database part of my program(same thing) into separate python files so that I can find and edit specific parts of my code easier, my hashing part relying on my database part as they work together. However my pycharm suggests that (when I import both python files separately) that my second database program will not be used.
For example</p>
<p>mainProgram  </p>
<pre><code>import hashProgam
import databaseProgram
main()
  do blah blah blah blah
  call function foo_bar()
run main()
</code></pre>
<p>hashProgram</p>
<pre><code>foo_bar()
  do blah blah
  call function boo_lah()
</code></pre>
<p>databaseProgram</p>
<pre><code>boo_lah()
  do blah blah
</code></pre>
<p>the problem occurs (I assume) when my hashProgram wants to call my database program, though I dont know why that would be, because I have imported them both?</p>
<p>Sorry if this doesnt make sense, but I dont really know how else to word it, thank you for any help :-)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>... tip on how to split up my program into smaller more manageable python files </p>
</blockquote>
<p>This is a fairly basic technique, just go over a simple  tutorial for that like one in <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">official documentation</a>. </p>
<blockquote>
<p>... when the main program is executed, (importing all of my side programs) hashKey is not "defined"</p>
</blockquote>
<p>Something like this setup should work:</p>
<p>foo.py</p>
<pre><code>hash_key = 1
</code></pre>
<p>main.py </p>
<pre><code>import foo
assert foo.hash_key == 1 
print(foo.hash_key) 
</code></pre>
<blockquote>
<p>... my hashing part relying on my database part as they work together.</p>
</blockquote>
<p>On a rare occasion when your modules import each other you can end up with a <a href="https://stackoverflow.com/a/746067/1758363">circular reference and need a smarter split of modules</a>. I'm not sure it is your case, perhaps you just not using proper import syntax yet.</p>
</div>
<span class="comment-copy">Your pseudocode style is a bit agressive (you can write in python conventionally), but one problem can be is circular reference (hard to judge). Can you post sctual error message. Is this a warning or really an error when you run the ptogram?</span>
<span class="comment-copy">A warning, I never tested it because it was late at night, and just wanted to get on with programming. I also thought that maybe someone would be able to provide a tip on how to split up my program into smaller more manageable python files</span>
<span class="comment-copy">It seems that any variables that are defined inside my main program are "not defined" in my imported programs...? For example, im using 3 variables for hashing : hashString = hashId % hashKey     hashId being defined in the separate program, and hashKey being defined in the main program. However when the main program is executed, (importing all of my side programs) hashKey is not "defined"</span>
<span class="comment-copy">would "proper import syntax" be: from x import * ???</span>
<span class="comment-copy">Technically, yes, you will be able to use everything from a module after <code>from &lt;module&gt; import * </code>, but this is considered a bad pattern. The reason you put somehting in a module is that there is something there that need to be importable, and something that does not. in a larger project you almost certainly do <code>import foo</code> and <code>foo.x</code> so that you keep track of where <code>x</code> came from. <code>from foo import *</code> is least desirable.</span>
<span class="comment-copy">okay, well say I just want to split up my program into more digestible pieces, what would I have to do?</span>
<span class="comment-copy">a) make sure you can import things from a module in python, 2) think of a program structure that is modular (few entry points, testable interface, good separation, etc), 3) implement. it comes with practice, but a good start may also be a well-written program in one file, then you may want to split it to modules.</span>
