<div class="post-text" itemprop="text">
<p>I noticed a strange behaviour when using the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer"><code>round()</code></a> function with a negative rounding factor (the parameter <code>ndigits</code>) and with the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> module.</p>
<p>I'm using <code>Python 3</code> (specifically <code>3.6.3</code>, but I don't know if the specific minor version matters for this case).</p>
<p>With <code>float</code> it looks normal:</p>
<pre><code>&gt;&gt;&gt; round(10000 / 3, 2)
3333.33
&gt;&gt;&gt; round(10000 / 3, 1)
3333.3
&gt;&gt;&gt; round(10000 / 3, 0)
3333.0
&gt;&gt;&gt; round(10000 / 3, -1)
3330.0
&gt;&gt;&gt; round(10000 / 3, -2)
3300.0
</code></pre>
<p>With <code>Decimal</code> the result is correct, but it changes to scientific notation when using a negative rounding factor:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; round(Decimal('10000') / 3, 2)
Decimal('3333.33')
&gt;&gt;&gt; round(Decimal('10000') / 3, 1)
Decimal('3333.3')
&gt;&gt;&gt; round(Decimal('10000') / 3, 0)
Decimal('3333')
&gt;&gt;&gt; round(Decimal('10000') / 3, -1)
Decimal('3.33E+3')
&gt;&gt;&gt; round(Decimal('10000') / 3, -2)
Decimal('3.3E+3')
</code></pre>
<p>My quick fix was to add <code>0</code> to the result, which restores the notation back to "normal" (non-scientific):</p>
<pre><code>&gt;&gt;&gt; round(Decimal('10000') / 3, -1) + 0
Decimal('3330')
&gt;&gt;&gt; round(Decimal('10000') / 3, -2) + 0
Decimal('3300')
</code></pre>
<p>I don't think this classifies as a bug, because only the notation and not the actual value is affected, but it is strange to me nonetheless.</p>
<p>Does anyone have an idea why I am seeing this behaviour? Do you know if it is intended or a minor bug?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is normal and intended. <code>Decimal</code> tracks significant digits, and the Decimal <code>repr</code> is intended to preserve significant digits. <code>Decimal('3.3E+3')</code> has two significant digits, while <code>Decimal('3300')</code> has four.</p>
</div>
<span class="comment-copy">Scientific notation shows sigfigs</span>
<span class="comment-copy">After your answer I went looking in the source code of the module, and indeed, the docstring in the method <a href="https://github.com/python/cpython/blob/3.6/Lib/_pydecimal.py#L1906" rel="nofollow noreferrer"><code>Decimal.__round__()</code></a> has an example for the case I have in my question, confirming that it is intentional.</span>
<span class="comment-copy">Thanks for clarifying it</span>
