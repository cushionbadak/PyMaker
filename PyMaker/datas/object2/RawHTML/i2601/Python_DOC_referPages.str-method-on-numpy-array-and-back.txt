<div class="post-text" itemprop="text">
<p>Is there any built-in method to get back <code>numpy</code> array after applying <code>str()</code> method, for example,</p>
<pre><code>import numpy as np
a = np.array([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]])
a_str = str(a)

#to get back a?
a = some_method(a_str).
</code></pre>
<p>Following two methods don't work:</p>
<pre><code>from ast import literal_eval
a = literal_eval(a_str)  # Error

import numpy as np
a = np.fromstring(a_str)  # Error
</code></pre>
<p>Update 1:
Unfortunatelly i have very big data already converted with <code>str()</code> method so I connot reconvert it with some other method.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main issues seem to be separators and newlines characters. You can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.array2string.html" rel="nofollow noreferrer"><code>np.array2string</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer"><code>str.splitlines</code></a> to resolve them:</p>
<pre><code>import numpy as np
from ast import literal_eval

a = np.array([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]])

a_str = ''.join(np.array2string(a, separator=',').splitlines())

# '[[ 1.1, 2.2, 3.3], [ 4.4, 5.5, 6.6]]'

b = np.array(literal_eval(a_str))

# array([[ 1.1,  2.2,  3.3],
#        [ 4.4,  5.5,  6.6]])
</code></pre>
<p>Note that <em>without</em> any arguments <code>np.array2string</code> behaves like <code>str</code>.</p>
<hr/>
<p>If your string is given and unavoidable, you can use this hacky method:</p>
<pre><code>a_str = str(a)
res = np.array(literal_eval(''.join(a_str.replace('\n', ' ').replace('  ', ','))))

array([[ 1.1,  2.2,  3.3],
       [ 4.4,  5.5,  6.6]])
</code></pre>
<hr/>
<p>As per @hpaulj's comment, one benefit of <code>np.array2string</code> is ability to specify <code>threshold</code>. For example, consider a string representation of <code>x = np.arange(10000)</code>.</p>
<ul>
<li><code>str(x)</code> will return ellipsis, e.g. <code>'[   0    1    2 ..., 9997 9998 9999]'</code></li>
<li><code>np.array2string(x, threshold=11e3)</code> will return the complete string</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can do that with <code>repr</code>:</p>
<pre><code>import numpy as np
a = np.array([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]])
a_str = repr(a)
b = eval("np." + repr(a))
print(repr(a))
print(repr(b))
</code></pre>
</div>
<span class="comment-copy">Really, you should avoid this where possible. But I have updated with a solution which reverses <code>str</code> output.</span>
<span class="comment-copy">Does that big data string include ellipsis (...)?</span>
<span class="comment-copy">The <code>threshhold</code> also limits the usefulness of <code>str</code>.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/51144127/numpy-array2string-applied-on-huge-array-skips-central-values-in-the-mid">numpy array2string applied on huge array, skips central values, ( â€¦ in the middle )</a></span>
<span class="comment-copy">Does this not work with (safer) <code>ast.literal_eval</code>?</span>
<span class="comment-copy">@jpp <code>ast.literal_eval</code> is too safe to be useful.</span>
<span class="comment-copy">@MaximEgorushkin @jpp i have updated the question, i cannot use <code>repr()</code> or other methods, question is specific by using only <code>str()</code> mehod.</span>
