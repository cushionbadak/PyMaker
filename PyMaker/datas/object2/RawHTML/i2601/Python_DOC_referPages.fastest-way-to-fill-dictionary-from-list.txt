<div class="post-text" itemprop="text">
<p>Here is my list:</p>
<pre><code>animallist=["bird","cow","chicken","horse"]
</code></pre>
<p>I want to create a dictionary, with these animals as keys and values determined by some_funtion. My script:</p>
<pre><code>def some_function(eachanimal):
    #do some stuff with the entry, for example:
    return eachanimal+"_value"

animallist=["bird","cow","chicken","horse"]
mydict={}
for eachanimal in animallist:
    mydict[eachanimal]=some_function(eachanimal)
</code></pre>
<p>This creates mydict, which is:</p>
<pre><code>{'bird': 'bird_value',
'cow': 'cow_value',
'chicken': 'chicken_value',
'horse': 'horse_value'}
</code></pre>
<p>How can I do this faster or more compactly?</p>
</div>
<div class="post-text" itemprop="text">
<p>I am pretty sure it is not faster, but I find it at least more elegant</p>
<pre><code>mydict = {x: some_function(x) for x in animallist}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could use a <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=comprehension#dictionaries" rel="nofollow noreferrer">dict-comprehension</a> to make it more compact:</p>
<pre><code>dct = {animal: animal+"_value" for animal in animallist}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>animallist=["bird","cow","chicken","horse"]
dict(zip(animallist,[s + "_value" for s in animallist]))
</code></pre>
<p>But I like Rakesh's answer !</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>dict</code></p>
<p><strong>Ex:</strong></p>
<pre><code>animallist=["bird","cow","chicken","horse"]
print( dict((i, i+"_value") for i in animallist) )
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{'chicken': 'chicken_value', 'horse': 'horse_value', 'bird': 'bird_value', 'cow': 'cow_value'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To make it more compact, dict comprehension -</p>
<pre><code>{eachanimal:some_function(eachanimal) for eachanimal in animallist}
</code></pre>
<p>Using <code>timeit</code> to time code bits -</p>
<pre><code>In [1]: s = """\
    ...: animallist=["bird","cow","chicken","horse"]
    ...: def some_function(eachanimal):
    ...:     return eachanimal+"_value"
    ...: animallist=["bird","cow","chicken","horse"]
    ...: mydict={}
    ...: for eachanimal in animallist:
    ...:     mydict[eachanimal]=some_function(eachanimal)
    ...: """

In [2]: min(timeit.repeat(s, repeat=5))
Out[3]: 0.9832079410552979

In [4]: s = """\
    ...: animallist=["bird","cow","chicken","horse"]
    ...: dict((eachanimal,eachanimal+'_value') for eachanimal in animallist)
    ...: """

In [5]: min(timeit.repeat(s, repeat=5))
Out[6]: 1.5261759757995605

In [7]: s = """\
    ...: animallist=["bird","cow","chicken","horse"]
    ...: def some_function(eachanimal):
    ...:     return eachanimal+"_value"
    ...: {eachanimal:some_function(eachanimal) for eachanimal in animallist}
    ...: """

In [8]: min(timeit.repeat(s, repeat=5))
Out[9]: 1.1118130683898926

In [10]: s = """\
    ...: animallist=["bird","cow","chicken","horse"]
    ...: dict(zip(animallist,[s + "_value" for s in animallist]))
    ...: """

In [11]: min(timeit.repeat(s, repeat=5))
Out[12]: 1.603926181793213

In [13]: s = """\
    ...: animallist=["bird","cow","chicken","horse"]
    ...: {eachanimal:eachanimal+'_value' for eachanimal in animallist}
    ...: """

In [14]: min(timeit.repeat(s, repeat=5))
Out[15]: 0.6992459297180176
</code></pre>
<p>So on my system which is <code>i5-3437U CPU @ 1.90GHz, 8GB RAM</code>, it looks like</p>
<pre><code>{eachanimal:eachanimal+'_value' for eachanimal in animallist}
</code></pre>
<p>is actually <strong>faster</strong> <em>and</em> <strong>compact</strong> than your version</p>
</div>
