<div class="post-text" itemprop="text">
<p>I am a beginner to python and was working on a random team generator. The issue I've run into is that I am not sure of how to make it generate even teams. The code is below as well as a sample output.</p>
<pre><code>import random


def main():
    run = True
    while run:

        try:
            print("Welcome to this group picker, follow the instructions and your groups will be picked.")
            groupnum = int(input("How many groups do you want?"))
            peoplenum = int(input("How many people are there?"))
            print("Okay, assign everyone a number from 0 to", peoplenum - 1, ".")
            nums = []
            for i in range(0, peoplenum):
                nums.append(i)

            for i in nums:
                print("Number", i, "is in group", random.randint(1, groupnum))

            break

        except:
            print("Error, please follow instructions and enter only numbers.")
            break


main()
</code></pre>
<p>Sample output:</p>
<pre><code> Welcome to this group picker, follow the instructions and your groups
 will be picked.
 How many groups do you want?2 
 How many people are there?8
 Okay, assign everyone a number from 0 to 7 . 
 Number 0 is in group 1 
 Number 1 is in group 2 
 Number 2 is in group 1 
 Number 3 is in group 2 
 Number 4 is in group 1 
 Number 5 is in group 1 
 Number 6 is in group 2 
 Number 7 is in group 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Solution</strong></p>
<pre><code>import random


def main():
    run = True
    while run:

            print("\nWelcome to this group picker, follow the" \
                "instructions and your groups will be picked.\n")

            group_amount = int(input("How many groups do you want?\n"))
            people_amount = int(input("How many people are there?\n"))

            print("\nOkay, assign everyone a number from 1 to " +
                str(people_amount) + " .\n")

            group = list(range(0, group_amount))
            person = list(range(0, people_amount))
            group_size = people_amount / group_amount


            if group_size % 2 != 0:
                reg_group_size = (people_amount - 1) / group_amount
                odd_group_size = ((people_amount - 1) / group_amount) + 1

            for i in group[0:-1]:
               group[i] = reg_group_size

            group[-1] = odd_group_size

            for p in person:
                r = random.randint(0, len(group)-1)
                while group[r] == 0:
                    r = random.randint(0, len(group)-1) 
                person[p] = r + 1
                group[r] -= 1
                print("Person " + str(p + 1) + " is in group " + 
                    str(person[p]) + ".")

main()
</code></pre>
<p><strong>Output</strong></p>
<blockquote>
<pre><code>(xenial)vash@localhost:~/pcc/12/alien_invasion_2$ python3 helping.py

Welcome to this group picker, follow theinstructions and your groups will be picked.

How many groups do you want?
3
How many people are there?
10

Okay, assign everyone a number from 1 to 10 .

Person 1 is in group 3.
Person 2 is in group 1.
Person 3 is in group 2.
Person 4 is in group 2.
Person 5 is in group 1.
Person 6 is in group 3.
Person 7 is in group 2.
Person 8 is in group 1.
Person 9 is in group 3.
Person 10 is in group 3.
</code></pre>
</blockquote>
<p><strong>Comments</strong></p>
<p>I agree with all said solutions, but I think most of them deviate pretty far from what your original code was.</p>
<p>I tried to remain true to your code while implementing the missing pieces needed to get it to function as you intended and preserving your original output.</p>
<p>The main issue was that the <code>random.randint</code> value doesn't account for the availability of space in each group shrinking once a person is assigned a group.</p>
<p>Step 1:</p>
<pre><code>        group = list(range(0, group_amount))
        person = list(range(0, people_amount))
        group_size = people_amount / group_amount
</code></pre>
<p>This creates a lists <code>group</code> and <code>person</code>, which are the size of their respective amounts. Also, let's create <code>group_size</code> which will give us the amount of <code>person</code>'s that can be in each <code>group</code>.</p>
<p>Step 2:</p>
<pre><code>        if group_size % 2 != 0:
            reg_group_size = (people_amount - 1) / group_amount
            odd_group_size = ((people_amount - 1) / group_amount) + 1

        for i in group[0:-1]:
           group[i] = reg_group_size

        group[-1] = odd_group_size
</code></pre>
<p>Here we address the problem if we have <code>group</code>'s of unequal size. This will create all evenly sized <code>group</code>'s with the last <code>group</code> being able to hold the left over <code>person</code></p>
<p>Step 3:</p>
<pre><code>        for p in person:
            r = random.randint(0, len(group)-1)
            while group[r] == 0:
                r = random.randint(0, len(group)-1) 
            person[p] = r + 1
            group[r] -= 1
            print("Person " + str(p + 1) + " is in group " + 
                str(person[p]) + ".")
</code></pre>
<p>Now the fun part! This loop will assign <code>person[p]</code> to a random <code>group</code> and then reduce the amount size of that <code>group</code> by 1.  </p>
<p>Lets break it down:</p>
<pre><code>        for p in person:
            r = random.randint(0, len(group)-1)
            while group[r] == 0:
                r = random.randint(0, len(group)-1)
</code></pre>
<p>We are going to loop through <code>person</code> for the entire population we assigned.
Then we select a random <code>group</code> to assign <code>person</code> to, but we want to make sure that <code>group[r]</code> has available space, <code>while group[r] == 0:</code> checks to make sure that there is space if not, a new <code>r</code> is generated until we find a random <code>group</code> that has space available.</p>
<pre><code>            person[p] = r + 1
            group[r] -= 1
            print("Person " + str(p + 1) + " is in group " + 
                str(person[p]) + ".")
</code></pre>
<p>Finally we assign <code>person[p] = r + 1</code> this gives <code>person[p]</code> a <code>group</code> number(using <code>r + 1</code> is so we can eliminate a "group 0" since lists start at 0, and for presentation we would like to start at 1). After that the <code>group[r]</code>'s value is reduced by 1, accounting for the availability of space decreasing. In the <code>print</code> statement again the <code>+ 1</code> just is so again we don't refer to anyone as "Person 0."</p>
<p>Hope this helped, I enjoyed working on this!</p>
</div>
<div class="post-text" itemprop="text">
<p>Using only the standard library, I would solve it like this:</p>
<pre><code>import random
from itertools import accumulate


def print_groups(n, g):
    # Prepare group separators
    size = n // g
    rem = n % g
    separators = list(accumulate([0] + [size+1] * rem + [size] * (g - rem)))

    # Make raw data
    items = list(range(n))
    random.shuffle(items)

    # Iterate and print
    for i, s in enumerate(zip(separators, separators[1:])):
        group = items[slice(*s)]
        print(f'Group {i+1}: {group} (size {len(group)})')
</code></pre>
<p>If your number of people is divisible by your number of groups, all groups will be the same size, otherwise the first <code>n % g</code> groups get one extra member.</p>
<p>Example 1:</p>
<pre><code>print_groups(12, 4)

Group 1: [6, 11, 10] (size 3)
Group 2: [7, 2, 5] (size 3)
Group 3: [3, 1, 9] (size 3)
Group 4: [4, 8, 0] (size 3)
</code></pre>
<p>Example 2:</p>
<pre><code>print_groups(14, 4)

Group 1: [8, 3, 4, 6] (size 4)
Group 2: [1, 11, 0, 12] (size 4)
Group 3: [7, 5, 9] (size 3)
Group 4: [13, 10, 2] (size 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is randomly picking a team for each player. As <a href="https://docs.python.org/3/library/random.html#random.randint" rel="nofollow noreferrer"><code>random.randint</code></a> produces equally distributed values, each player has the same chance of being assigned to any given team, so you can end up with everyone in the same team.</p>
<p>Instead you should consider iterating over the teams and assigning a random player to it.</p>
<p>A poor implementation of that idea would go like</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; 
&gt;&gt;&gt; groupnum = 2
&gt;&gt;&gt; peoplenum = 8
&gt;&gt;&gt; 
&gt;&gt;&gt; people = [i for i in range(peoplenum)]
&gt;&gt;&gt; 
&gt;&gt;&gt; for i in range(peoplenum):
...     group = i % groupnum
...     person = random.choice(people)
...     people.remove(person)
...     print('Number {} assigned to {}'.format(person, group))
... 
Number 6 assigned to 0
Number 7 assigned to 1
Number 4 assigned to 0
Number 3 assigned to 1
Number 2 assigned to 0
Number 5 assigned to 1
Number 1 assigned to 0
Number 0 assigned to 1
</code></pre>
<p>It will solve the problem, but it relies on calling <code>remove</code> to avoid repeating the team members. To avoid this you can shuffle the players list (making it random) and <a href="https://docs.python.org/3/library/functions.html?highlight=zip#zip" rel="nofollow noreferrer"><code>zip</code></a> the results with the teams list.</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt;
&gt;&gt;&gt; players = [i for i in range(peoplenum)]
&gt;&gt;&gt; teams = [i for i in range(groupnum)]
&gt;&gt;&gt; 
&gt;&gt;&gt; random.shuffle(players)
&gt;&gt;&gt; 
&gt;&gt;&gt; [x for x in zip(players, teams)]
[(7, 0), (5, 1)]
</code></pre>
<p>This clearly does not work. That is because zip will stop when the shortest iterator stops, in our case <code>groups</code>. What we want is to have it repeat while there are players. We can achieve such functionality with <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; 
&gt;&gt;&gt; players = [i for i in range(peoplenum)]
&gt;&gt;&gt; teams = itertools.cycle(range(groupnum))
&gt;&gt;&gt; 
&gt;&gt;&gt; random.shuffle(players)
&gt;&gt;&gt; 
&gt;&gt;&gt; [x for x in zip(players, teams)]
[(7, 0), (2, 1), (0, 0), (1, 1), (5, 0), (4, 1), (3, 0), (6, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adjust the probability of each group according to the number of groups. Use a while loop that continually assigns groups and only returns once the groups have equal sum.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do this using numpy.random.choice, with replace set to false.
<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.choice.html" rel="nofollow noreferrer">See relevant numpy documentation here</a></p>
<p>Try playing with this code:</p>
<pre><code>import numpy as np

def assign_people_to_teams(people_count = 8, team_count = 2):
    """
        selects people_count random numbers in the range 0 to people_count-1 without replacement
        then make a team assignment decision based on desired number of teams.
    """
    return [
        element % team_count for element in list(
            np.random.choice(
                people_count,
                people_count,
                replace=False
            )
        )
    ]

team_assignment = assign_people_to_teams()

print(team_assignment)
</code></pre>
<p>Result:</p>
<pre><code>[0, 0, 1, 0, 0, 1, 1, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will have to use a set for each group and then select the random group for the person. Once each group maxed out, then repeat until all groups are filled in.</p>
<pre><code>import random
import sys


def main():
    while True:

        try:
            print("Welcome to this group picker, follow the instructions and your groups will be picked.")
            groupnum = int(input("How many groups do you want?"))
            peoplenum = int(input("How many people are there?"))
            if groupnum == 'Q':
                sys.exit(0)
            print("Okay, assign everyone a number from 1 to", peoplenum, ".")

            nums = []
            for i in range(1, peoplenum+1):
                nums.append(i)

            ''' Validate number of people vs groups '''
            if peoplenum % groupnum:
                print("error: You have incorrect number of people to divide them equally")
                sys.exit(1)

            ''' People per team '''
            peoplePerTeam = int(peoplenum/groupnum)

            ''' Initialize the group'''
            group = {}
            for i in range(1,groupnum+1):
                group[i] = set()

            ''' Loop through the people'''
            for person in nums:
                while True:
                    ''' Find random team '''
                    randomGroup = random.randint(1,groupnum)

                    ''' If team is not filled up yet, then add otherwise find a new team'''
                    if len(group[randomGroup]) &lt; peoplePerTeam:
                        group[randomGroup].add(person)
                        break

            ''' Display the team info'''    
            for i in range(1,groupnum+1):
                print("Team %s members are %s" %(i, group[i]))

        except:
            print("Error, please follow instructions and enter only numbers.")
            break


main()
</code></pre>
<p>The sample run of this program's output is given below:</p>
<pre><code>Welcome to this group picker, follow the 
instructions and your groups will be picked.
How many groups do you want?2
How many people are there?8
Okay, assign everyone a number from 1 to 8 .
**Team 1 members are {1, 2, 5, 7}**
**Team 2 members are {8, 3, 4, 6}**
Welcome to this group picker, follow the 
instructions and your groups will be picked.
How many groups do you want?4
How many people are there?20
Okay, assign everyone a number from 1 to 20 .
**Team 1 members are {1, 18, 19, 20, 17}**
**Team 2 members are {16, 13, 11, 5, 7}**
**Team 3 members are {10, 9, 2, 3, 4}**
**Team 4 members are {8, 12, 15, 6, 14}**
Welcome to this group picker, follow the instructions and your groups will be picked.
</code></pre>
</div>
<span class="comment-copy">You can also use <code>divmod</code> to do <code>n % g</code> and <code>n // g</code> in a single line</span>
