<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly">List of lists changes reflected across sublists unexpectedly</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<pre><code>&gt;&gt;&gt; keys = [1, 2, 3]
&gt;&gt;&gt; d = dict(zip(keys, [[]]*len(keys)))
&gt;&gt;&gt; d
{1: [], 2: [], 3: []}
&gt;&gt;&gt; d[1].append(100)
&gt;&gt;&gt; d
{1: [100], 2: [100], 3: [100]}
</code></pre>
<p>even copied [] not works:</p>
<ul>
<li>dict(zip(keys, [[][:]]*len(keys)))</li>
<li>dict(zip(keys, [copy.deepcopy([])]*len(keys)))</li>
</ul>
<p>the <strong>{1: [100], 2: [], 3: []}</strong> is what I wanted exactly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>keys = [1, 2, 3]
d = dict(zip(keys, [[] for _ in keys]))
d[1].append(100)
</code></pre>
<p>As per abarnert's comment, you could make your code even simpler by using a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary comprehension</a>:</p>
<pre><code>keys = [1, 2, 3]
d = {key:[] for key in keys}
d[1].append(100)
</code></pre>
<p>Calling <code>d</code> with both options gives the following output:</p>
<p><code>{1: [100], 2: [], 3: []}</code></p>
</div>
<span class="comment-copy">The easiest would be one of the solutions <a href="https://repl.it/repls/JadedHeartfeltDeclaration" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">Maybe a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> would be useful: <code>d = defaultdict(lambda: [])</code>.</span>
<span class="comment-copy">Your attempts are all copying the list, and then making three references to that copy, which isn’t any better than just making three references to the original list. If you move the <code>deepcopy</code> <i>outside</i> the multiplication… but you’re still better off using a comprehension in the first place</span>
<span class="comment-copy">Why do this instead of just writing a dict comprehension?</span>
<span class="comment-copy">@abarnert good idea! I wanted to keep it as close to the OP's code as possible for some reason. Adding dict comprehension.</span>
