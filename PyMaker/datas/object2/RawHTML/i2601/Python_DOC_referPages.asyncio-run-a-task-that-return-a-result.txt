<div class="post-text" itemprop="text">
<p>I am coming from a C# background and Python's Asyncio library is confusing me.</p>
<p>I have read the following <a href="https://stackoverflow.com/questions/37278647/fire-and-forget-python-async-await/37345564#37345564">1</a> <a href="https://stackoverflow.com/questions/33357233/when-to-use-and-when-not-to-use-python-3-5-await/33399896#33399896">2</a>, yet the use of asyncio remains unclear to me.</p>
<p>I am trying to make a website scrapper in python that is asynchronous.</p>
<pre><code>async def requestPage(url):
    request = requests.get(url, headers=headers)
    soup = BeautifulSoup(request.content, 'html.parser')
    return soup


async def main():

    #****** How do I run an async task and store its result to use in another task?
    index_soup = asyncio.ensure_future(requestPage(index_url))
    res = asyncio.gather(index_soup)
    currency_urls = res.select('a[href^="/currencies"]')

    print(currency_urls)


loop = asyncio.get_event_loop()

try:

    loop.run_until_complete(main())
finally:
    loop.close() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the <strong>requests</strong> library is not asynchronous, you can use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer">run_in_executor</a> method, so it won't block the running thread. As the result, you can define <code>requestPage</code> as a regular function and call it in the <code>main</code> function like this:</p>
<p><code>res = await asyncio.gather(loop.run_in_executor(None, requestPage, url)</code></p>
<p>The blocking function will run in a separate executor, while the control will be returned to the event loop.</p>
<p>Or you can try to use async HTTP client library, like <a href="https://aiohttp.readthedocs.io/en/stable/" rel="nofollow noreferrer">aiohttp</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I think I found a basic solution.</p>
<pre><code>async def requestPage(url):
    request = requests.get(url, headers=headers)
    soup = BeautifulSoup(request.content, 'html.parser')
    return soup


async def getValueAsync(func, param):
    # Create new task
    task = asyncio.ensure_future(func(param))
    # Execute task. This returns a list of tasks
    await asyncio.gather(task)
    # Get result from task
    return task.result()

async def main():
    soup = await getValueAsync(requestPage, index_url)
    print(val.encode("utf-8"))


loop = asyncio.get_event_loop()

try:

    loop.run_until_complete(main())
finally:
    loop.close() 
</code></pre>
<p>I wrote a wrapper that that allows me to call the function asynchronously and store the result.</p>
</div>
<span class="comment-copy">This is never really going to be asynchronous because requests isnâ€™t asynchronous. You may want to consider using a library like <a href="https://docs.aiohttp.org/en/stable/index.html" rel="nofollow noreferrer">aiohttp</a> instead.</span>
<span class="comment-copy">This code effectively does <code>await gather(ensure_future(requestPage(url)))</code>. There is no difference between that and a simple <code>await requestPage(url)</code> - <code>gather</code> is meant to await <i>multiple</i> tasks. Also, you don't need an additional call to <code>task.result()</code>, <code>await</code> will return the result right away. Finally, to make the code actually asynchronous, you need to use a library like <code>aiohttp</code>, not <code>requests</code>. A rule of thumb is: if your <code>async def</code> doesn't await anything, it is not async and could (as far as behavior is concerned) as well be an ordinary <code>def</code>.</span>
<span class="comment-copy">@user4815162342 thank you for the feedback. I thought I first had to create a task and execute it. Can you explain to me then the use of ensure_future?</span>
<span class="comment-copy"><code>ensure_future</code> is useful when you need the actual future object, e.g. so you can call <code>add_done_callback</code> or similar. In your case you gain nothing by getting a task object, because you immediately await it.</span>
<span class="comment-copy">Ahhh. Would a fair comparison be that <code>ensure_future</code> is similar to javascript promises? As in, I can call the execution a task and then later decide how to handle the result?</span>
