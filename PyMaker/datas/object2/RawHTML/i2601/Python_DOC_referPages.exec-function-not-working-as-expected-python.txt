<div class="post-text" itemprop="text">
<p>Following code gives different output in <code>Python2</code> and in <code>Python3</code>:</p>
<pre><code>from sys import version

print(version)

def execute(a, st):
    b = 42
    exec("b = {}\nprint('b:', b)".format(st))
    print(b)
a = 1.
execute(a, "1.E6*a")
</code></pre>
<p><code>Python2</code> prints:</p>
<pre><code>2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)]
('b:', 1000000.0)
1000000.0
</code></pre>
<p><code>Python3</code> prints:</p>
<pre><code>3.2.3 (default, Apr 11 2012, 07:15:24) [MSC v.1500 32 bit (Intel)]
b: 1000000.0
42
</code></pre>
<p>Why does <code>Python2</code> bind the variable <code>b</code> inside the <code>execute</code> function to the values in the string of the <code>exec</code> function, while <code>Python3</code> doesn't do this? How can I achieve the behavior of <code>Python2</code> in <code>Python3</code>? I already tried to pass dictionaries for globals and locals to <code>exec</code> function in <code>Python3</code>, but nothing worked so far.</p>
<p><strong>--- EDIT ---</strong></p>
<p>After reading Martijns answer I further analyzed this with <code>Python3</code>. In following example I give the <code>locals()</code> dictionay as <code>d</code> to <code>exec</code>, but <code>d['b']</code> prints something else than just printing <code>b</code>.</p>
<pre><code>from sys import version

print(version)

def execute(a, st):
    b = 42
    d = locals()
    exec("b = {}\nprint('b:', b)".format(st), globals(), d)
    print(b)                     # This prints 42
    print(d['b'])                # This prints 1000000.0
    print(id(d) == id(locals())) # This prints True
a = 1.
execute(a, "1.E6*a")

3.2.3 (default, Apr 11 2012, 07:15:24) [MSC v.1500 32 bit (Intel)]
b: 1000000.0
42
1000000.0
True
</code></pre>
<p>The comparison of the ids of <code>d</code> and <code>locals()</code> shows that they are the same object. But under these conditions <code>b</code> should be the same as <code>d['b']</code>. What is wrong in my example?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a big difference between <code>exec</code> in Python 2 and <code>exec()</code> in Python 3. You are treating <code>exec</code> as a function, but it really is a <em>statement</em> in Python 2.</p>
<p>Because of this difference, you cannot change local variables in function scope in Python 3 using <code>exec</code>, even though it was possible in Python 2. Not even previously declared variables. </p>
<p><code>locals()</code> only reflects local variables in one direction. The following never worked in either 2 or 3:</p>
<pre><code>def foo():
    a = 'spam'
    locals()['a'] = 'ham'
    print(a)              # prints 'spam'
</code></pre>
<p>In Python 2, using the <code>exec</code> statement meant the compiler knew to switch off the local scope optimizations (switching from <code>LOAD_FAST</code> to <code>LOAD_NAME</code> for example, to look up variables in both the local and global scopes). With <code>exec()</code> being a function, that option is no longer available and function scopes are now <em>always</em> optimized.</p>
<p>Moreover, in Python 2, the <code>exec</code> statement explicitly copies all variables found in <code>locals()</code> back to the function locals using <code>PyFrame_LocalsToFast</code>, but only if no <em>globals</em> and <em>locals</em> parameters were supplied.</p>
<p>The proper work-around is to use a new namespace (a dictionary) for your <code>exec()</code> call:</p>
<pre><code>def execute(a, st):
    namespace = {}
    exec("b = {}\nprint('b:', b)".format(st), namespace)
    print(namespace['b'])
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec()</code> documentation</a> is very explicit about this limitation:</p>
<blockquote>
<p><strong>Note:</strong> The default <em>locals</em> act as described for function <code>locals()</code> below: modifications to the default <em>locals</em> dictionary should not be attempted. Pass an explicit <em>locals</em> dictionary if you need to see effects of the code on locals after function <code>exec()</code> returns. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I'd say it's a bug of python3.</p>
<pre><code>def u():
    exec("a=2")
    print(locals()['a'])
u()
</code></pre>
<p>prints "2".</p>
<pre><code>def u():
    exec("a=2")
    a=2
    print(a)
u()
</code></pre>
<p>prints "2".</p>
<p>But</p>
<pre><code>def u():
    exec("a=2")
    print(locals()['a'])
    a=2
u()
</code></pre>
<p>fails with</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in u
KeyError: 'a'
</code></pre>
<p>--- EDIT ---
Another interesting behaviour:</p>
<pre><code>def u():
    a=1
    l=locals()
    exec("a=2")
    print(l)
u()
def u():
    a=1
    l=locals()
    exec("a=2")
    locals()
    print(l)
u()
</code></pre>
<p>outputs</p>
<pre><code>{'l': {...}, 'a': 2}
{'l': {...}, 'a': 1}
</code></pre>
<p>And also</p>
<pre><code>def u():
    l=locals()
    exec("a=2")
    print(l)
    print(locals())
u()
def u():
    l=locals()
    exec("a=2")
    print(l)
    print(locals())
    a=1
u()
</code></pre>
<p>outputs</p>
<pre><code>{'l': {...}, 'a': 2}
{'l': {...}, 'a': 2}
{'l': {...}, 'a': 2}
{'l': {...}}
</code></pre>
<p>Apparently, the action of <code>exec</code> on locals is the following:</p>
<ul>
<li>If a variable is set within <code>exec</code> and this variable was a local variable, then <code>exec</code> modifies the internal dictionary (the one returned by <code>locals()</code>) and does not return it to its original state. A call to <code>locals()</code> updates the dictionary (as documented in section 2 of python documentation), and the value set within <code>exec</code> is forgotten.
The need of calling <code>locals()</code> to update the dictionary is not a bug of python3, because it is documented, but it is not intuitive. Moreover, the fact that modifications of locals within <code>exec</code> don't change the locals of the function is a documented difference with python2 (the documentation says "Pass an explicit locals dictionary if you need to see effects of the code on locals after function exec() returns"), and I prefer the behaviour of python2.</li>
<li>If a variable is set within <code>exec</code> and this variable did not exist before, then <code>exec</code> modifies the internal dictionary unless the variable is set afterwards. It seems that there is a bug in the way <code>locals()</code> updates the dictionary ; this bug gives access to the value set within <code>exec</code> by calling <code>locals()</code> after <code>exec</code>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>To sum it up:</p>
<ul>
<li>There is no bug in Python 2 nor in Python 3</li>
<li>The different behavior of <code>exec</code> stems from <code>exec</code> being a statement in Python 2, while it became a function in Python 3.</li>
</ul>
<blockquote>
<p>Please note:</p>
<p>I do not tell anything new here.  This is just an assembly of the truth
  out there found in all the other answers and comments.
  All I try here is to bring light to some of the more obscure details.</p>
</blockquote>
<p>The only difference between Python 2 and Python 3 is, that, indeed, <code>exec</code> is able to change the local scope of the enclosing function in Python 2 (because it is a statement and can access the current local scope) and cannot do this anymore in Python 3 (because it now is a function, so runs in it's own local scope).</p>
<p>The irritation, however, has nothing to do with the <code>exec</code> statement, it only stems from one special behavior detail:</p>
<p><code>locals()</code> returns something, which I want to call "a scope-wise mutable singleton which, after the call to <code>locals()</code>, always only references all variables in the local scope".</p>
<p>Please note that the behavior of <code>locals()</code> did not change between Python 2 and 3.  So, this behavior together with change of how <code>exec</code> works looks like being erratic, but isn't, as it just exposes some detail, which always was there.</p>
<p>What does "a scope-wise mutable singleton which references variables in local scope" mean?</p>
<ul>
<li>It is a <code>scope-wise singleton</code>, as regardless how often you call <code>locals()</code> in the same scope, the object returned is always the same.

<ul>
<li>Hence the observation, that <code>id(d) == id(locals())</code>, because <code>d</code> and <code>locals()</code> refer to the same object, the same singleton, as there can only be one (in a different scope you get a different object, but in the same scope you only see this single one).</li>
</ul></li>
<li>It is <code>mutable</code>, as it is a normal object, so you can alter it.

<ul>
<li><code>locals()</code> forces all entries in the object to reference the variables in the local scope again.</li>
<li>If you change something in the object (via <code>d</code>), this alters the object, as it is a normal mutable object.</li>
</ul></li>
<li><p>These changes of the singleton do not propagate back into the local scope, because all entries in the object are <code>references to the variables in the local scope</code>.  So if you alter entries, these changes the singleton object, and not the contents of where "the references pointed to before you change the reference" (hence you do not alter the local variable).</p>
<ul>
<li><p>In Python, Strings and Numbers are not mutable.  This means, if you assign something to an entry, you do not change the object where the entry points to, you introduce a new object and assign a reference to that to the entry.  Example:</p>
<pre><code>a = 1
d = locals()
d['a'] = 300
# d['a']==300
locals()
# d['a']==1
</code></pre></li>
</ul>
<p>Besides optimization this does:</p>
<ul>
<li>Create new object Number(1) - which is some other singleton, BTW.</li>
<li>store pointer to this Number(1) into <code>LOCALS['a']</code><br/>
(where <code>LOCALS</code> shall be the internal local scope)</li>
<li>If not already exist, create <code>SINGLETON</code> object</li>
<li>update <code>SINGLETON</code>, so it references all entries in <code>LOCALS</code></li>
<li>store pointer of the <code>SINGLETON</code> into <code>LOCALS['d']</code></li>
<li>Create Number(300), which is <em>not</em> a singleton, BTW.</li>
<li>store pointer to these Number(300) into <code>d['a']</code></li>
<li>hence the <code>SINGLETON</code> is updated, too.</li>
<li>but <code>LOCALS</code> is <strong>not</strong> updated,
so the local variable <code>a</code> or <code>LOCALS['a']</code> still is Number(1)</li>
<li>Now, <code>locals()</code> is called again, the <code>SINGLETON</code> is updated.</li>
<li>As <code>d</code> refers to <code>SINGLETON</code>, not <code>LOCALS</code>, <code>d</code> changes, too!</li>
</ul></li>
</ul>
<blockquote>
<p>For more on this surprising detail, why <code>1</code> is a singleton while <code>300</code> is not, see <a href="https://stackoverflow.com/a/306353">https://stackoverflow.com/a/306353</a></p>
<p>But please do not forget: Numbers are immutable, so if you try to change a number to another value, you effectively create another object.</p>
</blockquote>
<p>Conclusion:</p>
<p>You cannot bring back the <code>exec</code> behavior of Python 2 to Python 3 (except by changing your code), as there is no way to alter the local variables outside of the program flow anymore.</p>
<p>However, you can bring the behavior of Python 3 to Python 2, such that you, today, can write programs, which run the same, regardless if they run with Python 3 or Python 2.  This is because in (newer) Python 2 you can use <code>exec</code> with function like arguments as well (in fact, those is a 2- or 3-tuple), with allows to use the same syntax with the same semantics known from Python 3:</p>
<pre><code>exec "code"
</code></pre>
<p>(which only works in Python 2) becomes (which works for Python 2 and 3):</p>
<pre><code>exec("code", globals(), locals())
</code></pre>
<p>But beware, that <code>"code"</code> can no more alter the local enclosing scope this way.  See also <a href="https://docs.python.org/2/reference/simple_stmts.html#exec" rel="nofollow noreferrer">https://docs.python.org/2/reference/simple_stmts.html#exec</a></p>
<p>Some very last words:</p>
<p>The change of <code>exec</code> in Python 3 is good.  Because of optimization.</p>
<p>In Python 2 you were not able to optimize across <code>exec</code>, because the state of all local variables which contained immutable contents could change unpredictably.  This cannot happen anymore.  Now the usual rules of function invocations apply to <code>exec()</code> like to all other functions, too.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm afraid I can't explain it exactly, but it basically comes from the fact that b inside the function is local, and <code>exec()</code> appears to assign to the global b. You'll have to declare b to be global inside the function, <em>and</em> inside the exec statement. </p>
<p>Try this:</p>
<pre><code>from sys import version

print(version)

def execute1(a, st):
    b = 42
    exec("b = {}\nprint('b:', b)".format(st))
    print(b)

def execute2(a, st):
    global b
    b = 42
    exec("global b; b = {}\nprint('b:', b)".format(st))
    print(b)

a = 1.
execute1(a, "1.E6*a")
print()
execute2(a, "1.E6*a")
print()
b = 42
exec("b = {}\nprint('b:', b)".format('1.E6*a'))
print(b)
</code></pre>
<p>Which gives me</p>
<pre><code>3.3.0 (default, Oct  5 2012, 11:34:49) 
[GCC 4.4.5]
b: 1000000.0
42

b: 1000000.0
1000000.0

b: 1000000.0
1000000.0
</code></pre>
<p>You can see that outside the function, the global b is automatically picked up. Inside the function, you're printing the local b. </p>
<p>Note that I would have thought that <code>exec()</code> always uses the global b first, so that in <code>execute2()</code>, you don't need to declare it inside the <code>exec()</code> function. But I find that doesn't work (which is the part I can't explain exactly).</p>
</div>
<span class="comment-copy"><code>print</code> is a statement in Python 2</span>
<span class="comment-copy">@NiklasR: But that's not the question here. But so is <code>exec</code>, btw.</span>
<span class="comment-copy">But in 2.7.2 <code>exec</code> as a function seems to work. By now I found out that I can use <code>eval</code> to gain the result I want. But the question stays the same. I also tried this outside a function call. Then both versions do the same.</span>
<span class="comment-copy">@Holger: because the way you use it the parenthesis just group the expression, which means that in python 2 they are <i>ignored</i>.</span>
<span class="comment-copy">@Martijn: That would mean that <code>b</code> stays the same in <code>Python2</code>, right? But it is changed with the <code>exec</code> statement or function in <code>Python2</code> and not in <code>Python3</code>.</span>
<span class="comment-copy">Sorry Martjin, I already tried that before, but it doesn't work with 3. It still prints 42 for b.</span>
<span class="comment-copy">@Holger: Ah, my mistake, let's turn this around.</span>
<span class="comment-copy">@Holger: I get there in the end. I misread your question, I thought you wanted the Python 3 behaviour in Python 2 instead. I was a little too sure of what you were looking for. :-)</span>
<span class="comment-copy">Hello Martijn, I want it the way it is in <code>Python2</code>. Therefore, <code>b</code>should be 1000000.0 afterwards. See my edit of the question. I have no explanation for this behaviour.</span>
<span class="comment-copy">@Holger: Final, final answer. You cannot do it. My apologies for not being more rigorous in my testing and understanding. Python 3 closed the door or modifying local variables in the function scope.</span>
<span class="comment-copy">Can you please better explain which kind of bug is that?</span>
<span class="comment-copy">This seems to be just an optimization detail.  <code>locals()</code> returns a mutable object which references all the local variables.  <code>locals()</code> always returns the same object, regardless how often you call it.  Apparently the same object is used within <code>exec()</code>, hence <code>l</code> refers to the same object that <code>exec</code> uses, so it sees the modifications.  However, after calling <code>locals()</code> again, the (mutable) object is refreshed in-place.  Hence <code>l</code> still points to the same, now updated object.  Try it yourself:  <code>def u(): l=locals(); print(l); a=1; print(l); print(locals()); print(l)</code>.  Good find, BTW ;)</span>
<span class="comment-copy">No, Python 3 does not modify the globals, it uses a non-modifyable <code>locals()</code> instead.</span>
<span class="comment-copy">The OP is looking to modify locals instead, not globals. Your interpretation is, I am afraid, incorrect, nor is your solution.</span>
