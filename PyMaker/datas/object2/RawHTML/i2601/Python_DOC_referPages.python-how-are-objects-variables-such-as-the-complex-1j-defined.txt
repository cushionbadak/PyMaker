<div class="post-text" itemprop="text">
<p>And how can I define my own types of variables/objects to behave with the provided operations in python?</p>
<p>Can I do this without having to create my own object classes and operators as a <em>separate and distinct</em> entity? I dont mind having to create my own object class (thats a given), but I want it to integrate flawlessly with the already existing constructs. So emphasis on my wish to avoid "separate and distinct".</p>
<p>Im trying to create a quaternion object class.  I want to define a 1i and 1k that are distinct from 1j.</p>
<p>And yes, a package might already exist; this is purely academic and for my own programming practice and understanding.  Im trying to <em>extend</em> what is already there, and not build something that is distinct and separate.</p>
<p>I already do class objects but unfortunately they require a redefinition of the basic operations in order to make use of them, and even then I have to "declare" these objects before I can use them, quite unlike '1j'.</p>
<p>I hope I am clear with my intent.  The end result of a quaternion is not my intent; it is the types of methods and objects and generalizations Im trying to figure out how to do, to extend and make use of what is already built into python.</p>
<p>It seems to me whoever built numpy and cmath have already been able to achieve this endeavor.</p>
<hr/>
<p>Thanks to the commentary below. I now have the vocabulary to express my intent better.</p>
<p>Im trying to add new features to Pythons SYNTAX.</p>
<p>If anyone can offer resources on how to do this, Id appreciate it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I see two options for you here:</p>
<ol>
<li>Change the Python syntax (fork CPython), there's a surprising amount of articles about how to do that.</li>
<li>Build some kind of preprocessor like <a href="http://mypy-lang.org/" rel="nofollow noreferrer">Mypy</a>.</li>
</ol>
<p>Either way it seems like too much trouble just to have a new literal value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does <strong>not</strong> support custom operators nor custom literals.</p>
<p>A language that supports custom literals is C++ (since C++11 I believe), but it does not support custom operators.</p>
<p>A language that supports custom operators is, for example, Haskell.</p>
<p>If you want to add this feature to Python you'll have to take the Python sources, modify its grammar, modify the lexer/parser and more importantly the compiler.</p>
<p>However at that point you just create a new language, which means you broke compatibility with python.</p>
<p>The easiest solution would simply be to write a simple preprocessor that replaces some simple syntax with an expanded equivalent. For example:</p>
<pre><code>sed -i 's/(\d)+\+(\d+)i/MyComplex(\1, \2)/g' my_file.py
</code></pre>
<p>Then you can execute the preprocessor in the build step of your library/application.</p>
<p>This has the advantage of letting you write the code you want, but when you ship it/use it it is translated into normal python, keeping 100% compatibility with existing installations.</p>
<p>I believe using <a href="https://docs.python.org/3/reference/import.html#import-hooks" rel="nofollow noreferrer">import hooks</a> it would be possible to avoid having to ship the preprocessed version of your library... basically the preprocessor could be included in the import step and done on the fly. This would avoid having to deal with temporary preprocessed files.</p>
<p>The only requirement would be that people that need to use your library will have to install the import hook someway.</p>
</div>
<span class="comment-copy">What do you mean by "separate and distinct"? The built-in complex number class is already "separate and distinct" from other numeric types. If you want to create your own syntax, that's going to require you to fork the CPython source code, which is generally a much worse option than simply accepting that you're not going to be able to use <code>1i</code> and <code>1k</code> syntax.</span>
<span class="comment-copy">Are you asking if you can modify python <i>syntax</i> so that something like <code>1i</code> would be valid?  If so, then you'll basically need to write some sort of pre-processor that will transform your source code before you ever feed it to Python ...</span>
<span class="comment-copy">(Also, <code>1j</code> corresponds to complex <code>i</code>, not quaternion <code>j</code>, so defining <code>1i</code> and <code>1k</code> would cause confusion separate from the syntactical issues.)</span>
<span class="comment-copy">@CogitoErgoCogitoSum: It's not clear to me what you're asking - do you want to create a fork of Python that supports the syntax <code>1i</code>, <code>3.4k</code>, etc? (In which case other people wouldn't be able to make use of the new syntax unless they also adopted your fork of Python instead of the usual one.) Or do you want to try to persuade the Python core developers to change the language, so that e.g., your desired syntax is supported in Python 3.8, and is then available to everyone?</span>
<span class="comment-copy">@CogitoErgoCogitoSum: If you just want to change Python's syntax for your own amusement, and don't need to share the changes with others, then you might start with <a href="https://devguide.python.org/grammar/" rel="nofollow noreferrer">devguide.python.org/grammar</a>. It's a bit terse, but an internet search also turns up a couple of tutorials on extending Python's syntax.</span>
