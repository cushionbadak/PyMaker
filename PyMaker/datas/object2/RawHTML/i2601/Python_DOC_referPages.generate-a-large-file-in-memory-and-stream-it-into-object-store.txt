<div class="post-text" itemprop="text">
<p>I'm trying to do some load testing of an openstack swift object store and want to see transfer and fail rates of large files. How can I generate a big file of 0s and stream it somewhere as its generated?</p>
<p>In bash I would do something like </p>
<pre><code>dd if=/dev/zero | aws s3 cp - s3://destination/thing
</code></pre>
<p>Example of reading a file from disk </p>
<pre><code>with open("test.png", "rb") as f:
  client.put_object("default", "photos/my_copy_of_test.png", f.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.put_object" rel="nofollow noreferrer"><code>put_object</code></a> method requires either <code>bytes</code> or a file object.</p>
<p>In your existing code, for some reason, you're passing <code>f.read()</code> instead of <code>f</code>, meaning you're reading the whole file into memory and then passing the bytes. If that's acceptable with file data, surely it's acceptable with in-memory data, so you can just build a big <code>bytes</code> and pass that.</p>
<p>If you don't want to build the whole buffer in advance, what you need to do is create a file object that generates bytes on demand whenever the consumer calls one of the <code>read</code> functions.</p>
<p>In Python 3, the way to do that is to create a class that implements either <code>io.RawIOBase</code> or <code>io.BufferedIOBase</code>. As you can see from <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow noreferrer">the docs</a>, to do this, you only need to supply a couple of methods, and the rest get automatically generated for you.</p>
<hr/>
<p>Raw I/O is simpler. The main method you need to write is <a href="https://docs.python.org/3/library/io.html#io.RawIOBase.readinto" rel="nofollow noreferrer"><code>readinto</code></a>. You will be passed a <code>bytearray</code> (or other mutable <code>bytes</code>-like object), and expected to fill in as much of it as possible. So, your class could look like this:</p>
<pre><code>class StreamingFile(io.RawIOBase):
    def readinto(self, b):
        buf = generate_raw_bytes(len(b))
        b[:len(buf)] = buf
        return len(buf)
</code></pre>
<p>(Obviously if you can write that <code>generate_raw_bytes</code> function to generate the data directly in <code>b</code> instead of copying it over, it will be more efficient.)</p>
<p>The <code>put_object</code> method is probably actually going to call some other file method, like <code>read</code>, <code>readline</code>, readlines<code>,</code><strong>iter</strong><code>, etc., but that's fine;</code>RawIOBase<code>automatically gives you implementations of all of those methods in terms of your</code>readinto`.</p>
<hr/>
<p>What if you can't control exactly how many bytes you generate; you can only create a line at a time, and that could be anywhere from 1 byte to 300, even if you were only asked for 40? Then you want to use an internal buffer. You can still do that with <code>RawIOBase</code>, but it's probably better to implement <code>BufferedIOBase</code> instead, and define the <a href="https://docs.python.org/3/library/io.html#io.BufferedIOBase.read" rel="nofollow noreferrer"><code>read</code></a> and <a href="https://docs.python.org/3/library/io.html#io.BufferedIOBase.read" rel="nofollow noreferrer"><code>read1</code></a> methods.</p>
</div>
