<div class="post-text" itemprop="text">
<p>I have the following directory tree: </p>
<pre><code>project/
  A/
    __init__.py
    foo.py
  TestA/
    __init__.py
    testFoo.py
</code></pre>
<p>the content of testFoo is: </p>
<pre><code>import unittest
from A import foo
</code></pre>
<p>from the <code>project</code> directory I run <code>python testA/testFoo.py</code></p>
<p>I get a <code>ModuleNotFoundError No module named A</code></p>
<p>I have two question: how to improt and run A.foo from TestA.testFoo and why is it so difficult to grasp the import logic in Python? Isn't there any debug trick to solve this kind of issues rapidly, I'm sorry I have to bother you with such basics questions?  </p>
</div>
<div class="post-text" itemprop="text">
<p>When your are executing a file an environment variable called python path is generated, python import work with this variable to find your file to import, this path is generated with the path of the file you are executing and it will search in the current directory and sub directories containing an <code>__init__.py</code> file, if you want to import from a directory on the same level you need to modify your python path or change the architecture of your project so the file executed is always on top level.</p>
<p>you can include path to your python path like this :</p>
<pre><code>import sys
sys.path.insert(0, "/path/to/file.py")
</code></pre>
<p>You can read more on import system : <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a></p>
<p>The best way in my opinion is to not touch the python path and include your test directoy into the directory where tested files are:</p>
<pre><code>project/
  A/
    __init__.py
    foo.py
    TestA/
        __init__.py
        testFoo.py
</code></pre>
<p>Then run the <code>python -m unittest</code> command into your A or project directory, it will search into your current and sub directories for test and execute it.</p>
<p>More on unittest here : <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Can you try this ?</p>
<p>Create an empty file <code>__init__.py</code> in subdirectory <code>TestA</code>. And add at the begin of main code</p>
<pre><code>from __future__ import absolute_import
</code></pre>
<p>Then import as below :</p>
<pre><code>import A.foo as testfoo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add the folder <code>project/testA</code> to the system pythonpath first:</p>
<pre><code>import sys
sys.path.insert(0, "/path/to/pythonfile")
</code></pre>
<p>and try the import again.</p>
</div>
<div class="post-text" itemprop="text">
<p>The recommended way in py3 may be like below</p>
<pre><code>echo $pwd
$ /home/user/project
python -m testA.testFoo
</code></pre>
<p>The way of execute module <code>python -m</code> in python is a good way to replace relative references。</p>
</div>
<div class="post-text" itemprop="text">
<p>You definitely cannot find A because python need look from <code>sys.path</code>, <code>PYTHONPATH</code> to find the module.</p>
<p>And python will automatically add current <code>top level script</code> to <code>sys.path</code> not <code>currently directory</code> to <code>sys.path</code>. So if you add <code>print(sys.path)</code> in <code>testFoo.py</code>, you will see it only add <code>project/TestA</code> to the <code>sys.path</code>.</p>
<p>Another word, the <code>project</code> did not be included in <code>sys.path</code>, then how python can find the module <code>A</code>?</p>
<p>So you had to add the <code>project</code> folder to <code>sys.path</code> by yourself, and, this just needed in <code>top script</code>, something like follows:</p>
<pre><code>import unittest
import sys
import os
file_path = os.path.abspath(os.path.dirname(__file__)).replace('\\', '/')
lib_path = os.path.abspath(os.path.join(file_path, '..')).replace('\\', '/')
sys.path.append(lib_path)
</code></pre>
</div>
<span class="comment-copy">I didn't test, but have you tried <code>from . import A.foo</code>. Python 3 prevents relative imports with <code>from</code>. You can use <code>import A</code> and <code>A.foo</code> as well</span>
<span class="comment-copy">@Jean-FrançoisFabre thx for the suggestion. But I get invalid syntax at the dot separating A and foo</span>
<span class="comment-copy">sounds similar to my old question: <a href="https://stackoverflow.com/questions/38564382/importerror-on-python-3-worked-fine-on-python-2-7" title="importerror on python 3 worked fine on python 2 7">stackoverflow.com/questions/38564382/…</a>. So try <code>from .A import foo</code></span>
<span class="comment-copy">"no module named _ <i>main</i> <i>.NPL _ _main</i> _ is not a package"</span>
<span class="comment-copy">I like the "move your test directory where the tested files are" way. But in testFoo I now include with 'from ..foo import ...' and I get the infamous  "attempted relative import beyond top-level package" error.</span>
<span class="comment-copy">You should consider using python unittest standard library and run your test with <code>python -m unittest</code> into your A directory. <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.html</a>, also pytest is a realy good library for testing.</span>
<span class="comment-copy">Ran 18 tests in 0.002s \nOK.  thx :-)</span>
<span class="comment-copy">This works but sounds like a horrible hack. Isn't it?</span>
<span class="comment-copy">I think it is OK if you have to import something at runtime. If you want something more sophisticated or general, you should consider building your own package (which is a different question :) )</span>
