<div class="post-text" itemprop="text">
<p>Let's say you have a dataframe in a Jupyter notebook called MainNotebook.ipynb and you're passing this dataframe to an external python function called <code>testmath</code> in a python file called <code>testmath.py</code>:</p>
<pre><code>import pandas as pd
from testmath import testmath

sales = [{'account': 'Jones LLC', 'Jan': 150, 'Feb': 200, 'Mar': 140},
         {'account': 'Alpha Co',  'Jan': 200, 'Feb': 210, 'Mar': 215},
         {'account': 'Blue Inc',  'Jan': 50,  'Feb': 90,  'Mar': 95 }]

mydf = pd.DataFrame(sales)

testmath(mydf)
</code></pre>
<p>Here's the code for testmath.py:</p>
<pre><code>import pandas as pd

def testmath(inputdf):
    Feb = inputdf['Feb']
    inputdf['FebPesos'] = Feb * 12
    return inputdf, Feb
</code></pre>
<p>I'm trying to get the function to return BOTH the DataFrame <code>mydf</code> AND the variable <code>Feb</code> so that I can use them for later analysis.</p>
<p>However, what's weird is that when you run <code>testmath(mydf)</code> from <code>MainNotebook.ipynb</code>, while the DataFrame is returned with the new column added, the variable 'Feb' is not accessible.</p>
<p>By this I mean that if you run the following from MainNotebook:</p>
<pre><code>from importdebug import testmath
import pandas as pd

sales = [{'account': 'Jones LLC', 'Jan': 150, 'Feb': 200, 'Mar': 140},
         {'account': 'Alpha Co',  'Jan': 200, 'Feb': 210, 'Mar': 215},
         {'account': 'Blue Inc',  'Jan': 50,  'Feb': 90,  'Mar': 95 }]

mydf = pd.DataFrame(sales)

testmath(mydf)

print(Feb)
</code></pre>
<p>The command to <code>print(Feb)</code> returns the error:
    NameError: name 'Feb' is not defined</p>
<p>Is there any way to retrieve the variables generated inside the function? Especially if you have a lot of them? (I would prefer a method that doesn't involve global variables, gulp)</p>
<p>I've already tried deleting pycache, and restarting the kernel and clearing the outputs. I also updated all of the conda packages, but still no luck.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since your function returns a <code>tuple</code>, you can use <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">sequence unpacking</a>:</p>
<pre><code>mydf, Feb = testmath(mydf)
</code></pre>
<p>The right hand side returns a tuple of results, which are unpacked to variables <code>mydf</code> and <code>Feb</code>. These variables can then be accessed like any other variable.</p>
<p>Equivalently, with <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pipe.html" rel="nofollow noreferrer"><code>pd.DataFrame.pipe</code></a>:</p>
<pre><code>mydf, Feb = mydf.pipe(testmath)
</code></pre>
</div>
<span class="comment-copy">Why shouldn't you be able to reference it? In my experience this works fine.</span>
<span class="comment-copy">Could please post the error message ?</span>
<span class="comment-copy">Just added the error text.</span>
<span class="comment-copy">Your input variable to <code>getmydata</code> is <code>myjsonfile</code>, but internally, you read from a variable named <code>inputpath</code> (which I assume is defined somewhere in the notebook). This might be why when calling the function externally the dataframe is not found and therefore has no name 'apples'. Mind double checking with the different variables?</span>
<span class="comment-copy">Even though it may be a bit difficult for pandas in Jupyter (and several Notebooks), please try to provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, so that we know what error to tackle.</span>
