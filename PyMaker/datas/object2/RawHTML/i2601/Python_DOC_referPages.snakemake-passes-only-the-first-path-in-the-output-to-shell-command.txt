<div class="post-text" itemprop="text">
<p>I am trying to feed all of the paths at once in one variable to a <code>python</code> script in <code>snakemake</code> like that: </p>
<pre><code>rule neo4j:
  input:
      script = 'python/neo4j.py',
      path_to_cl = 'results/clusters/umap/{sample}_umap_clusters.csv',
      path_to_umap = 'results/umap/{sample}_umap.csv',
      path_to_mtx = 'data_files/normalized/{sample}.csv'
  output: 'results/neo4j/{sample}/cells.csv', 'results/neo4j/{sample}/genes.csv', 
      'results/neo4j/{sample}/cl_nodes.csv', 'results/neo4j/{sample}/cl_contains.csv',
      'results/neo4j/{sample}/cl_isin.csv', 'results/neo4j/{sample}/expr_by.csv',
      'results/neo4j/{sample}/expr_ess.csv'
  shell:
      "python {input.script} -path_to_cl {input.path_to_cl} -path_to_umap {input.path_to_umap} -path_to_mtx {input.path_to_mtx} -output {output}"
</code></pre>
<p>When I am accessing <code>output</code> parameter in the <code>python</code> script it sees only the first path: <code>'results/neo4j/{sample}/cells.csv'</code>. I have also tried naming each path, but it did not fix the issue. How to pass all paths in the <code>output</code> of the rule as an array or as dictionary to be able to access them later in <code>python</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly your issue, your problem is that the <code>neo4j.py</code> script doesn't accept more than one file for its <code>-output</code> argument: The shell command probably ends with the full list of files (check with the <code>-p</code> option of <code>snakemake</code>), but only the first one is taken into account by the script.</p>
<p>If that is indeed the case, a possibly cleaner approach would be to modify the interface of your <code>neo4j.py</code> script so that it uses one argument for each of its output files.</p>
<p>You would then modify your rule as follows:</p>
<pre><code>rule neo4j:
    input:
        script = 'python/neo4j.py',
        path_to_cl = 'results/clusters/umap/{sample}_umap_clusters.csv',
        path_to_umap = 'results/umap/{sample}_umap.csv',
        path_to_mtx = 'data_files/normalized/{sample}.csv'
    output:
        cells = 'results/neo4j/{sample}/cells.csv',
        genes = 'results/neo4j/{sample}/genes.csv',
        nodes = 'results/neo4j/{sample}/cl_nodes.csv',
        contains = 'results/neo4j/{sample}/cl_contains.csv',
        isin = 'results/neo4j/{sample}/cl_isin.csv',
        by = 'results/neo4j/{sample}/expr_by.csv',
        ess = 'results/neo4j/{sample}/expr_ess.csv'
    shell:
        """
        python {input.script} \\
            --path_to_cl {input.path_to_cl} \\
            --path_to_umap {input.path_to_umap} \\
            --path_to_mtx {input.path_to_mtx} \\
            --cells {output.cells} \\
            --genes {output.genes} \\
            --nodes {output.nodes} \\
            --contains {output.contains} \\
            --isin {output.isin} \\
            --by {output.by} \\
            --ess {output.ess}
        """
</code></pre>
<p>Some potentially useful python modules to set up the interface of your script:</p>
<ul>
<li><a href="https://github.com/docopt/docopt" rel="nofollow noreferrer">docopt</a></li>
<li><a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer">argparse</a></li>
</ul>
<hr/>
<h3>Edit</h3>
<p>If you don't want to pass each input file as an individual argument, you could simply pass the output directory, and let your script build the output paths from this single parameters. Given the file names you want, this seems possible:</p>
<pre><code>rule neo4j:
    input:
        script = 'python/neo4j.py',
        path_to_cl = 'results/clusters/umap/{sample}_umap_clusters.csv',
        path_to_umap = 'results/umap/{sample}_umap.csv',
        path_to_mtx = 'data_files/normalized/{sample}.csv'
    output:
        'results/neo4j/{sample}/cells.csv',
        'results/neo4j/{sample}/genes.csv',
        'results/neo4j/{sample}/cl_nodes.csv',
        'results/neo4j/{sample}/cl_contains.csv',
        'results/neo4j/{sample}/cl_isin.csv',
        'results/neo4j/{sample}/expr_by.csv',
        'results/neo4j/{sample}/expr_ess.csv'
    shell:
        """
        python {input.script} \\
            --path_to_cl {input.path_to_cl} \\
            --path_to_umap {input.path_to_umap} \\
            --path_to_mtx {input.path_to_mtx} \\
            --out_dir results/neo4j/{wildcards.sample}
        """
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>rule hello:
    output:
        "woot", "hoot"
    run:
        for f in output:
            print(f)
        print(output[1])
</code></pre>
<p>prints "woot", "hoot", "hoot".</p>
</div>
<span class="comment-copy">That's weird. I tested your code using snakemake <code>v5.2.2</code> on mac, and it works as expected listing all output files in shell command. What happens when you name each output file?</span>
<span class="comment-copy">It just takes in the first one in the <code>output</code>, same basically</span>
<span class="comment-copy">I mean, does snakemake produce error if second output file was called <code>b</code> and you refer to it in shell command as <code>{output.b}</code>? Which snakemake version and OS are you using? Did you try using <code>run</code> as suggested in answer section? This would show you if <code>output</code> does recognize all the files listed as part of <code>output</code>.</span>
<span class="comment-copy">I'm not clear on what you are trying to get to. Could you show us the resolved shell command created by snakemake using your current code and also the shell command that you want it to be?</span>
<span class="comment-copy">Snakemake can't do that on its own, but your python script can be used to achieve that - Use double quotes for output in shell command <code>"-output {output}"</code>, and in your python script, split them into list with space as delimiter. This should work assuming none of your output path has space character in them.</span>
<span class="comment-copy">Thatâ€™s how I am doing that and I just do not want it that way.</span>
<span class="comment-copy">@NikitaVlasenko What I tend to do in such cases is to only give the output directory to my script: <code>"python {input.script} &lt;input files&gt; -output results/neo4j/{wildcards.sample}"</code> (remember that you do not need to use <code>{output}</code> in the shell part)</span>
<span class="comment-copy">I see. Thank you!</span>
