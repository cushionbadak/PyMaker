<div class="post-text" itemprop="text">
<p>Here is my serializer:</p>
<pre><code>class MySerializer(serializers.Serializer): 
    amount1 = serializers.SerializerMethodField(read_only=True)
    amount2 = serializers.SerializerMethodField(read_only=True)
    amount3 = serializers.SerializerMethodField(read_only=True)
    total = serializers.SerializerMethodField(read_only=True)

    class Meta:
        model = Amount
        fields = "__all__"

    def get_amount1(self,obj):
        """very large calculation here"""
        return 5

    def get_amount2(self,obj):
        """very large calculation here"""
        return 10

    def get_amount3(self,obj):
        """very large calculation here"""
        return 15

    def get_total(self,obj):
        return self.get_amount1 +self.get_amount2+self.get_amount3
</code></pre>
<p>Now I want to show the sum of all three amounts in <code>total</code> field, but it is taking too much time because of a large calculation in above methods and they are calculating twice only for getting <code>total</code>.</p>
<p>How can I get the sum of <code>amount1</code>, <code>amount2</code>, <code>amount3</code> without calculating <code>get_amount1</code>, <code>get_amount2</code>, <code>get_amount3</code> twice?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>getattr</code> within single serializer instance:</p>
<pre><code>def get_amount1(self,obj):
    """very large calculation here"""
    if getattr(self, 'amount1', None):
        return self.amount1
    self.amount1 = 5
    return self.amount1

def get_amount2(self,obj):
    """very large calculation here"""
    if getattr(self, 'amount2', None):
        return self.amount2
    self.amount2 = 10
    return self.amount2

def get_amount3(self,obj):
    """very large calculation here"""
    if getattr(self, 'amount3', None):
        return self.amount3
    self.amount3 = 15
    return self.amount4

def get_total(self,obj):
    return self.get_amount1(obj) +self.get_amount2(obj)+self.get_amount3(obj)
</code></pre>
<p>Or as @Willem-Van-Onsem mentioned in comment <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>lru_cache</code></a> for more broad caching:</p>
<pre><code>@lru_cache
def get_amount1(self,obj):
    """very large calculation here"""
    return 5

@lru_cache
def get_amount2(self,obj):
    """very large calculation here"""
    return 10

@lru_cache
def get_amount3(self,obj):
    """very large calculation here"""
    return 15
</code></pre>
</div>
<span class="comment-copy">I think the problem is that the <code>obj</code> can be different in <i>every</i> call (by <i>reusing</i> the serializer). So you might want to use an <code>lru_cache</code> instead.</span>
<span class="comment-copy">@WillemVanOnsem you are right, <code>getattr</code> only helps within single serializer instance. <code>lru_cache</code> is more common solution.</span>
