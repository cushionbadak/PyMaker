<div class="post-text" itemprop="text">
<p>I am trying to convert the following data structure;</p>
<p><a href="https://i.stack.imgur.com/rqM1h.png" rel="nofollow noreferrer"><img alt="Original structure" src="https://i.stack.imgur.com/rqM1h.png"/></a></p>
<p>To the format below in python 3;</p>
<p><a href="https://i.stack.imgur.com/hxBkr.png" rel="nofollow noreferrer"><img alt="Output structure" src="https://i.stack.imgur.com/hxBkr.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>if your data looks like:</p>
<pre><code>array = [['PIN: 123 COD: 222 \n', 'LOA: 124 LOC: Sea \n'],
        ['PIN:456 COD:555 \n', 'LOA:678 LOC:Chi \n']]
</code></pre>
<p>You can do this:</p>
<p><strong>1 Step:</strong> use regular expressions to parse your data, because it is string. </p>
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">see more about reg-exp</a></p>
<pre><code>raws=list()
for index in range(0,len(array)):    
    raws.append(re.findall(r'(PIN|COD|LOA|LOC): ?(\w+)', str(array[index])))
</code></pre>
<p>Output:</p>
<pre><code>[[('PIN', '123'), ('COD', '222'), ('LOA', '124'), ('LOC', 'Sea')], [('PIN', '456'), ('COD', '555'), ('LOA', '678'), ('LOC', 'Chi')]]
</code></pre>
<p><strong>2 Step:</strong> extract raw values and column names.</p>
<pre><code>columns = np.array(raws)[0,:,0]
raws = np.array(raws)[:,:,1]
</code></pre>
<p>Output:</p>
<p>raws -</p>
<pre><code>[['123' '222' '124' 'Sea']
 ['456' '555' '678' 'Chi']]
</code></pre>
<p>columns - </p>
<pre><code>['PIN' 'COD' 'LOA' 'LOC']
</code></pre>
<p><strong>3 Step:</strong> Now we can just create df.</p>
<pre><code>df = pd.DataFrame(raws, columns=columns)
</code></pre>
<p>Output:</p>
<pre><code>   PIN  COD  LOA  LOC
0  123  222  124  Sea
1  456  555  678  Chi
</code></pre>
<p>Is it what you want?</p>
<p>I hope it helps, I'm not sure about your input format.</p>
<p>And don't forget import libraries! (I used pandas as pd, numpy as np, re).</p>
<p><strong>UPD: another way</strong> I have created log file like you have:</p>
<pre><code>array = open('example.log').readlines()
</code></pre>
<p>Output:</p>
<pre><code>['PIN: 123 COD: 222 \n',
 'LOA: 124 LOC: Sea \n',
 'PIN: 12 COD: 322 \n',
 'LOA: 14 LOC: Se \n']
</code></pre>
<p>Then split by ' ' , drop '\n' and reshape:</p>
<pre><code>raws = np.array([i.split(' ')[:-1] for i in array]).reshape(2, 4, 2)
</code></pre>
<p>In reshape, first number is raws count in your future dataframe, second - count of columns and last - you don't need to change. It won't works if you don't have whitespace between info and '\n' in each raw. If you don't, I will change an example.
Output:</p>
<pre><code>array([[['PIN:', '123'],
        ['COD:', '222'],
        ['LOA:', '124'],
        ['LOC:', 'Sea']],

       [['PIN:', '12'],
        ['COD:', '322'],
        ['LOA:', '14'],
        ['LOC:', 'Se']]], 
      dtype='|S4')
</code></pre>
<p>And then take raws and columns:</p>
<pre><code>columns = np.array(raws)[:,:,0][0]
raws = np.array(raws)[:,:,1]
</code></pre>
<p>Finally, create dataframe (and cat last symbol for columns):</p>
<pre><code>pd.DataFrame(raws, columns=[i[:-1] for i in columns])
</code></pre>
<p>Output:</p>
<pre><code>   PIN  COD  LOA  LOC
0  123  222  124  Sea
1   12  322   14   Se
</code></pre>
<p>If you have many log files, you can do that for each in for-loop, save each dataframe at array (example, array calls DF_array) and then use pd.concat to do one dataframe from array of dataframes. </p>
<pre><code>pd.concat(DF_array)
</code></pre>
<p>If you need I can add an example.</p>
<p><strong>UPD:</strong>
I have created a dir with log files and then make array with all files from PATH:</p>
<pre><code>PATH = "logs_data/"
files = [PATH + i for i in os.listdir(PATH)]
</code></pre>
<p>Then do for-loop like in last update:</p>
<pre><code>dfs = list()
for f in files:
    array = open(f).readlines()
    raws = np.array([i.split(' ')[:-1] for i in array]).reshape(len(array)/2, 4, 2)
    columns = np.array(raws)[:,:,0][0]
    raws = np.array(raws)[:,:,1]
    df = pd.DataFrame(raws, columns=[i[:-1] for i in columns])
    dfs.append(df)
result = pd.concat(dfs)
</code></pre>
<p>Output:</p>
<pre><code>     PIN   COD    LOA  LOC
0    123   222    124  Sea
1     12   322     14   Se
2      1    32      4  Ses
0  15673  2324  13464  Sss
1  12452  3122  11234   Se
2     11   132      4  Ses
0    123   222    124  Sea
1     12   322     14   Se
2      1    32      4  Ses
</code></pre>
</div>
<span class="comment-copy">Dont post images of code or dataframe</span>
<span class="comment-copy">What is the input ? Is it excel data? Python nested list?. It is very hard to debug from images</span>
<span class="comment-copy">@ mad_ it is a Python nested list.</span>
<span class="comment-copy">Hi Anna! This is exactly what I am looking for unfortunately, when I run the for-loop, I am getting empty lists....[[],[],[],...]. I am sure I am match pattern is right. Any thoughts on that?</span>
<span class="comment-copy">@EdM are you getting it in this example or on your real data with modifications? And what python version do you have?</span>
<span class="comment-copy">I have 3.6.4 &amp; I am getting the empty returns (sets) on my real data. I cross checked the data type and its a list just as the toy example you provided and the structures are exactly the same.</span>
<span class="comment-copy">@EdM Can you present a peace of real data?</span>
<span class="comment-copy">Its protected data so I can't. But I put it together from parsing a bunch of .log files resulting into the format I showed here. How different would you approach it assuming each list inside the list came from a single .log file? In other ways if you had multiple .log files looking like this: PIN: 123 COD: 222 \n LOA: 124 LOC: Sea \n.....how would you loop through them and collect the data into a dataframe?</span>
