<div class="post-text" itemprop="text">
<p>I have been trying to execute one code snippet to get to know how much time it takes to execute.
I had tried two alternatives to do that. One is using variable inside timeit.timeit function and check. And the other one is directly using the value and check.
The second approach is working fine but I am facing some scoping issue while using first one. Attached are the images for both scenarios.
<a href="https://i.stack.imgur.com/JneyA.png" rel="nofollow noreferrer"><img alt="Using Variable inside timeit function" src="https://i.stack.imgur.com/JneyA.png"/></a></p>
<p><a href="https://i.stack.imgur.com/XFROQ.png" rel="nofollow noreferrer"><img alt="Using Value inside timeit" src="https://i.stack.imgur.com/XFROQ.png"/></a></p>
<p>Can anyone help me in this regard? Any suggestions to the questions are highly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Others already addressed the main issue (the code you pass to <code>timeit()</code> is invalid), I just wanted to mention that with the commonly posted solution (adding a semi-colon between the two statements) you will end up benchmarking the total cost of both statements combined (creating the literal string <code>"Hello world"</code>, assigning it to a variable and calling <code>endswith('d')</code> on this variable). Assuming what you're actually interested in is the cost of the second statement only, you may want to use <code>timeit()</code> second's (optional) "setup" argument with is a piece of code to be executed <em>before</em> the execution of the tested code, ie:</p>
<pre><code>import timeit
timeit.timeit("s.endwith('d')", "s = 'Hello World'", number=10000)
</code></pre>
<p>which will execute both statements but only benchmark the first one.</p>
<p>This is also useful if you want to benchmark a function imported from a module:</p>
<pre><code>timeit.timeit("re.search(r'42', 'hello world')", "import re")
</code></pre>
<p>or from your current script or interactive shell session:</p>
<pre><code>$ python
Python 3.6.5 (default, Apr  1 2018, 05:46:30) 
[GCC 7.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def foo():
&gt;&gt;&gt;    return 42
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("foo()", "from __main__ import foo")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to guess you do not have that much experience programming in python, otherwise the SyntaxError would have been clear enough. The exception given states that the syntax (ie. lines of code) is invalid.</p>
<p><strong>Valid (<a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow noreferrer">Compound statement</a>) code. But harder to read so not advised:</strong></p>
<pre><code>s='Hello world'; s.endswith('d')
</code></pre>
<p><strong>Invalid code:</strong></p>
<pre><code>s='Hello world'  s.endswith('d')
</code></pre>
<p>The latter would raise an exception, which will try to highlight the exact location of where the exception is caused with an '^'.</p>
<pre><code>s='Hello world'  s.endswith('d')
  File "&lt;stdin&gt;", line 1
    s='Hello world'  s.endswith('d')
                     ^
SyntaxError: invalid syntax
</code></pre>
<p>For testing small bits of code with timeit, you could put the code into a function and call that. For example:</p>
<pre><code>import timeit

def test():
    s = 'Hello world'
    s.endswith('d')


if __name__ == '__main__':
    t = timeit.Timer('test()', setup='from __main__ import test')
    num_of_repeat = 1000
    runs = t.repeat(repeat=num_of_repeat, number=1)
    print('Fastest run of {3} repeats: {0}ms  Slowest: {1}ms  Average: {2}ms'.format(
        min(runs) * 1000, max(runs) * 1000, (sum(runs) / float(len(runs))) * 1000, num_of_repeat))
</code></pre>
<p>Put this into a file called mytest.py, and run it from commandline:</p>
<pre><code>python mytest.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run several statements you can simply use the triple quotes for your code. Example:</p>
<pre><code>import timeit
code = """
s = 'Hello world'
s.endswith('d')
"""
timeit.timeit(code, number=10000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that <code>s = 'Hello World'</code> and <code>s.endswith('d')</code></p>
<p>are two separate statements so either they have to be in different lines or they must me separated using a semi-colon</p>
<p>So change it to</p>
<pre><code>timeit.timein("s = 'Hello World'; s.endswith('d')",number=10000)
</code></pre>
</div>
<span class="comment-copy"><a href="//meta.stackoverflow.com/q/285551">Please don't post your code or exception as an image</a>. It's <a href="http://idownvotedbecau.se/imageofanexception/" rel="nofollow noreferrer">hard to read</a>, prevents text-based searching, and lowers the overall presentation of the post.</span>
<span class="comment-copy">You have 2 statements in your <code>timeit</code> call, you need to separate them either with a <code>;</code> or a newline <code>\n</code>.</span>
<span class="comment-copy">Since you're using Jupyter Notebook, you can just use cell magic. Putting <code>%%timeit</code> at the first line will benchmark that cell.</span>
<span class="comment-copy">It worked. Thanks a lot :)</span>
<span class="comment-copy">It works perfectly :) Thanks.</span>
