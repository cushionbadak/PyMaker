<div class="post-text" itemprop="text">
<p>I am doing python exercises from '<a href="https://www.w3resource.com/python-exercises/python-basic-exercise-150.php" rel="nofollow noreferrer">w3resource</a>'. The exercise is 'Write a Python function to find a distinct pair of numbers whose product is odd from a sequence of integer values.'.</p>
<p>The code is shown as followed. I don't understand the whole block of "if product &amp; 1". The sign '&amp;' seems set.intersection but not sure. Meanwhile, why do both 'return True' and 'return False' appear? Can anyone explain? Thanks.</p>
<pre><code>def product(lst):
    for i in range(len(lst)):
        for j in range(len(lst)):
            if i != j:
                product = lst[i] * lst[j]
                if product &amp; 1:
                    return True
                    return False

print(product([2, 4, 6, 8]))
print(product([1, 6, 4, 7, 8]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>product &amp; 1</code> means check whether product is odd, because the last digit of binary representation of an odd number always is 1 while for an even number is 0. </p>
<p>Seems like you don't really know the meaning of &amp;. &amp; is a bitwise operator. Here's how to calculate 5 &amp; 9:</p>
<p>1) transform 5 to binary representation (5)10 = (101)2</p>
<p>2) transform 9 to binary representation (9)10 = (1001)2</p>
<p>3) for every binary digit, &amp; with two 1 is 1 otherwise 0. So </p>
<pre><code>    ( 101)2 
  &amp; (1001)2
  = (0001)2
</code></pre>
</div>
<span class="comment-copy">This is bitwise <code>and</code>: <a href="https://docs.python.org/3/library/operator.html#mapping-operators-to-functions" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy"><code>product &amp; 1</code> is a cryptic way of checking if a number is even. It is best to be more explicit: <code>product % 2</code>. The second <code>return False</code> statment is unreachable, so it is totally pointless.</span>
<span class="comment-copy">thanks, Stephen &amp; Juanpa!</span>
