<div class="post-text" itemprop="text">
<p>I want to know that if Python strings are immutable then why does this piece of code works and how it works.</p>
<pre><code>a = input()
for i in a:
    if i.isupper():
        print(i.lower(), end='')
    else:
        print(i.upper(), end='')
</code></pre>
<p>This changes the characters in the string. Before as I knew that strings are immutable I used to convert it in list and then change it and join the list back to string. Now I think all the code I had written back then was worthless effort.</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings in Python  are immutable which means that once a string variable is assigned to a string (For eg <code>a ='Hello'</code>) the contents of the string cannot be changed unlike the list object.
In the code above you are in a way transforming your string and not changing  the contents of your string variable.</p>
<pre><code>a=input()
for i in a:
    if i.isupper():
        print (i.lower(),end='')
    else:
    print (i.upper(),end='')
print(a)
</code></pre>
<p>If you would run this code you will see that the value of a is the same which you entered. The strings methods lower() and upper() just returns a copy of the string.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str.lower</code>, <code>str.upper</code> and other string operations return copies. They do <em>not</em> work in place. You can check this yourself by reading the documentation; <a href="https://docs.python.org/3/library/stdtypes.html#str.lower" rel="nofollow noreferrer">for example</a>:</p>
<blockquote>
<p><code>str.lower()</code></p>
<p><strong>Return a copy</strong> of the string with all the cased characters converted to lowercase.</p>
</blockquote>
<p>A <strong>copy</strong> here implies a new string, not the old one mutated in place. You can additionally verify this by printing a string after mutating it:</p>
<pre><code>x = 'HELLO'
y = x.lower()
print(x)  # 'HELLO'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>They are immutable. Eg</p>
<pre><code>text = 'hello'
text.upper()
print(text) # hello
</code></pre>
<p>Though you have called <code>upper</code> on the <code>text</code> variable, it's value has not changed. Contrast with a list, which is mutable</p>
<pre><code>lst = [1,2,3]
lst.append(4)
print(lst) # [1,2,3,4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are right, strings are immutable. You have to understand how the methods that you call works. </p>
<pre><code>if i.isupper():
        print (i.lower(),end='')
    else:
        print (i.upper(),end='')
</code></pre>
<p>The method lower() returns a <strong><em>copy</em></strong> of the string in which all case-based characters have been lowercased. </p>
<p>So this methods returns a copy, not the original one. It will returns the original one only when the word used is all in lower case, and in this case it will return the original string. Not the new copy of it ( a new variable.) </p>
<p>For the upper is the same, they create a new variable. </p>
<p>Thanks to  bruno desthuilliers to add this <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">valuable link</a> to understand more 
about "Facts and myths about Python names and values"</p>
</div>
<span class="comment-copy">It doesn't chance the string, it returns a new one.</span>
<span class="comment-copy">Can you add the expected output?</span>
<span class="comment-copy">What do you think is being changed here? Both <code>i</code> and <code>a</code> will be unchanged.</span>
<span class="comment-copy">Immutable does not mean that you cannot get access to parts of the string and modify them. But this is a new object (a new string created) and the old object is still immutable and unchanged.</span>
<span class="comment-copy">"once a string variable is assigned to a string (For eg a ='Hello') the contents of the string cannot be changed" =&gt; this has nothing to do with "being assigned to" a variable - a string is immutable, <i>period</i>.</span>
<span class="comment-copy">Thanks for your help</span>
<span class="comment-copy">Your welcome. Happy learning</span>
<span class="comment-copy">Also appears the OP could just do <code>print(a.swapcase())</code>...</span>
<span class="comment-copy">@JonClements, Good point! I didn't even know of that one.</span>
<span class="comment-copy">Well... to be fair - in ~15 years of Python I don't think I've ever used it (just have known it's there but never found a practical need...)</span>
<span class="comment-copy">Thanks for your help</span>
<span class="comment-copy">"One of the way to change the value on a string is to save it in an array." =&gt; this is not going to "change the value on a string", whatever "save it in an array" might be supposed to mean (I assume you actually meant "build a list from it").</span>
<span class="comment-copy">If you create the string inside the array, instead of save it. It could works better.</span>
<span class="comment-copy">what you wrote in your comment makes even less sense than your answer.</span>
<span class="comment-copy">this might help: <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a> (should be part of the official doc actually).</span>
<span class="comment-copy">Oh and yes: there's nothing like a "primitive value" in Python. Strings are objects just like anything in Python (integers, lists, dicts, function, classes, modules, etc etc etc).</span>
