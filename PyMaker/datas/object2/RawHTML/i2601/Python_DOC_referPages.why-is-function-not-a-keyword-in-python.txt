<div class="post-text" itemprop="text">
<p>Classes like <code>str</code> or <code>type</code> </p>
<pre><code>&gt;&gt;&gt; type("pear")
&lt;class 'str'&gt;
&gt;&gt;&gt; type(str)
&lt;class 'type'&gt;
</code></pre>
<p>are accessible in Python:</p>
<pre><code>&gt;&gt;&gt; str
&lt;class 'str'&gt;
&gt;&gt;&gt; type
&lt;class 'type'&gt;
</code></pre>
<p>However, classes <code>function</code> and <code>builtin_function_or_method</code> are not. </p>
<pre><code>&gt;&gt;&gt; def foo(): pass
... 
&gt;&gt;&gt; type(foo)
&lt;class 'function'&gt;
&gt;&gt;&gt; type(print)
&lt;class 'builtin_function_or_method'&gt;
</code></pre>
<p>They appear as builtin classes but trying to access them throws name errors:</p>
<pre><code>&gt;&gt;&gt; function
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'function' is not defined
&gt;&gt;&gt; builtin_function_or_method
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'builtin_function_or_method' is not defined
</code></pre>
<p>What's special about <code>function</code> and <code>builtin_function_or_method</code> ? </p>
</div>
<div class="post-text" itemprop="text">
<p>What you are seeing is the <a href="https://docs.python.org/3/library/functions.html#repr" rel="noreferrer">representation</a> of the function type:</p>
<pre><code>&gt;&gt;&gt; from types import FunctionType
&gt;&gt;&gt; repr(FunctionType)
"&lt;class 'function'&gt;"
</code></pre>
<p>This is the "type" of a function defined with def or otherwise:</p>
<pre><code>&gt;&gt;&gt; def f():
...     pass
... 
&gt;&gt;&gt; type(f) is FunctionType
True
&gt;&gt;&gt; type(lambda: None) is FunctionType
True
</code></pre>
<p>"function" is not syntax itself, because it's easier to type "def".</p>
<p>A rhetorical question: if <code>def</code> was the name used to resolve to the function type, then <a href="https://docs.python.org/3/reference/grammar.html" rel="noreferrer">what syntax would you use</a> to actually <em>define</em> a function?</p>
</div>
<div class="post-text" itemprop="text">
<p>Classes and functions have an inherent name:</p>
<pre><code>&gt;&gt;&gt; def foo():
...     pass
...
&gt;&gt;&gt; foo
&lt;function foo at 0x10f951400&gt;
&gt;&gt;&gt; foo.__name__
'foo'
</code></pre>
<p>The name attached to the object is independent of the name you use to access the object, though when defining functions (and classes), they are the same.</p>
<pre><code>&gt;&gt;&gt; bar = foo
&gt;&gt;&gt; bar
&lt;function foo at 0x10f951400&gt;
</code></pre>
<p>You can even get rid of the variable you use to access the function, as long as you have a reference somewhere else:</p>
<pre><code>&gt;&gt;&gt; funcs = [foo]
&gt;&gt;&gt; funcs[0]
&lt;function foo at 0x10f951400&gt;
&gt;&gt;&gt; del foo
&gt;&gt;&gt; foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined
&gt;&gt;&gt; funcs[0]
&lt;function foo at 0x10f951400&gt;
&gt;&gt;&gt; funcs[0].__name__
'foo'
</code></pre>
<p>The built-in function type is like this: there is no variable that refers to it, but it still exists, and has a <code>__name__</code>:</p>
<pre><code>&gt;&gt;&gt; def foo(): pass
...
&gt;&gt;&gt; type(foo)
&lt;class 'function'&gt;
&gt;&gt;&gt; type(foo).__name__
'function'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <a href="https://docs.python.org/3/library/stdtypes.html#bltin-type-objects" rel="nofollow noreferrer"><code>Type Object</code></a> is returned from the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code></a> function (or <code>object.__class__</code>).</p>
<p>You can get a full list of these type objects <a href="https://docs.python.org/3/library/types.html#standard-interpreter-types" rel="nofollow noreferrer">here</a>.</p>
<p>But you can also create your own:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; types.new_class('my_made_up_type')
&lt;class 'types.my_made_up_type'&gt;
</code></pre>
<p>So it is a type object that certain objects (like built-in functions) return (namely: <a href="https://docs.python.org/3/library/types.html#types.BuiltinFunctionType" rel="nofollow noreferrer"><code>types.BuiltinFunctionType</code></a>) , but <strong>these type objects are not built-in classes, so it is no wonder they are not defined in the interpreter</strong>.</p>
</div>
<span class="comment-copy"><code>function</code> isn't a keyword for the same reason that <code>str</code>, <code>list</code>, and <code>type</code> aren't. (You probably meant to ask why that identifier isn't defined, but the distinction between keywords and globally-defined identifiers is a big one.)</span>
<span class="comment-copy">&gt; "function" is not syntax itself, because it's easier to type "def". Why is <code>type</code> syntax then when it's easy to create a type object using the <code>class</code> keyword? Let me guess. It's because <code>type</code> is also used to check the type of an object.</span>
<span class="comment-copy">That one probably predates the unification of types and classes in Python (classes were added to the language later)</span>
<span class="comment-copy">Lol. I was going to see how the class <code>FunctionType</code> is constructed in python and I come up with this: <code>def _f(): pass; FunctionType = type(_f)</code></span>
<span class="comment-copy">It's ironic. I guess that a function's properties as an object are not defined in the stdlib but as part of the C code in CPython's implementation. Is this correct?</span>
<span class="comment-copy">Yes.  You will find similar tautological definitions for things like <code>ModuleType</code>, <code>NoneType</code> ...</span>
