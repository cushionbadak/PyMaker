<div class="post-text" itemprop="text">
<p>I have a portion of a script that looks like something along the lines of this...</p>
<pre><code>import re, sys
print(sys.version) # so you can see my Python version

repl = (
    "use bravo\\api\\resources\\usersResource;\n"
    "use bravo\\api\\resources\\groupsResource;\n"
    "use bravo\\api\\resources\\bandsResource;\n"
    "use bravo\\api\\resources\\setlistsResource;\n"
    "use bravo\\api\\resources\\songsResource;"
)

pattern = r'\{\{\$use_table_resources\}\}'
string = "{{$use_table_resources}}"

re.sub(pattern, repl, string)
</code></pre>
<p>Whenever I run it, I get the following output and error:</p>
<pre><code>3.6.2 |Anaconda, Inc.| (default, Sep 19 2017, 08:03:39) [MSC v.1900 64 bit (AMD64)]
Traceback (most recent call last):
  File "test.py", line 15, in &lt;module&gt;
    re.sub(pattern, repl, string)
  File "C:\ProgramData\Anaconda3\lib\re.py", line 191, in sub
    return _compile(pattern, flags).sub(repl, string, count)
  File "C:\ProgramData\Anaconda3\lib\re.py", line 326, in _subx
    template = _compile_repl(template, pattern)
  File "C:\ProgramData\Anaconda3\lib\re.py", line 317, in _compile_repl
    return sre_parse.parse_template(repl, pattern)
  File "C:\ProgramData\Anaconda3\lib\sre_parse.py", line 904, in parse_template
    raise s.error("missing &lt;")
sre_constants.error: missing &lt; at position 64 (line 2, column 26)
</code></pre>
<p>This works sometimes when I make the <code>repl</code> replacement string shorter, but I really can't figure it out. As far as I can tell, I'm working within their constraints, according to the <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">re.sub(...) API</a></p>
<p>I know that this simple case would not justify the use of regex, but this snippet of code is taken out of a much larger piece of software. I don't need any answers telling me that regex is the wrong approach, because this is actually the simplest case I could produce that still reproduce the problem. There <strong><em>are</em></strong> more complicated instances where I need RegEx to actually do its job.</p>
<p>Either way, I think somehow the problem is in the contents of the replacement string, as odd as that sounds. when I use shorter replacement strings, I don't encounter this error.</p>
<p>Any pointers are greatly appreciated. This is probably something really tiny and stupid, but I've already come back to this a few times, and I can't find it.</p>
</div>
<div class="post-text" itemprop="text">
<p>there isn't enough escaping in your replacement string, so the backslashes are interpreted by regex engine as a start of captured group (like the classical <code>r"\1"</code> or <code>"\\1"</code> without raw prefix).</p>
<p>You could add the raw prefix before each string, but I'd rather use multi-line <em>raw</em> strings like this (easier to read):</p>
<pre><code>repl = r"""use bravo\\api\\resources\\usersResource;
use bravo\\api\\resources\\groupsResource;
use bravo\\api\\resources\\bandsResource;
use bravo\\api\\resources\\setlistsResource;
use bravo\\api\\resources\\songsResource;
"""
</code></pre>
<p>then the resulting replacement is </p>
<pre><code>use bravo\api\resources\usersResource;
use bravo\api\resources\groupsResource;
use bravo\api\resources\bandsResource;
use bravo\api\resources\setlistsResource;
use bravo\api\resources\songsResource;
</code></pre>
<p>Now, without changing the input:</p>
<p>using <code>re.escape</code> like <code>re.sub(pattern, re.escape(repl), string)</code> doesn't work that well because space and end of lines are also escaped</p>
<p>But you can do this since you know that the only problematic chars are the backslashes:</p>
<pre><code>re.sub(pattern, repl.replace("\\",r"\\"), string)
</code></pre>
<p>(it replaces the backslashes by double backslashes and the output is the same)</p>
</div>
<span class="comment-copy">Do you know of an easy way to escape the replacement? The replacement text in the rest of my program is generated from some another text source.</span>
<span class="comment-copy">see my edit. Yes it's possible</span>
<span class="comment-copy">Many thanks, sir! I've been chasing this rabbit for almost an entire day now</span>
<span class="comment-copy">you're welcome. That took me longer than expected myself. Damn regexes :)</span>
