<div class="post-text" itemprop="text">
<p>I have been trying to write a function which would execute a command passed to it thru a parameter using <code>POPEN</code> along with Context Managers. Unfortunately, I am unable to get it to work. Can someone please help?</p>
<pre><code>import os
import sys
import subprocess
import inspect    

def run_process(cmd_args):
    with subprocess.Popen(cmd_args, stdout=subprocess.PIPE) as proc:
        log.write(proc.stdout.read())

run_process("print('Hello')")
</code></pre>
<p>The output expected is <code>"Hello"</code>. Can someone please point out where I am going wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have done is right if you are running a bash command through the subprocess.</p>
<p>Inside the context manager "with ..." what you have done is to reading out the output from the terminal and storing them as byte(s) in "output" variable and trying to print out the bytes in ASCII after decoding it.</p>
<p>Try returning the value from the context manager and then decode it in the calling function:</p>
<pre><code>import os
import sys
import subprocess
import inspect    

def run_process(cmd_args):          # Below added shell=True' in parameters.
    with subprocess.Popen(cmd_args, stdout=subprocess.PIPE, shell=True) as proc: 
        return proc.stdout.read()  # returns the output 
                               # Optionally you can use the 'encoding='utf-8' argument 
                               # instead and just print(proc.stdout.read()).   
print(run_process().decode('utf-8')) 
</code></pre>
<p>I was having a similar issue while pipelining a process to another program and I did the decoding in the other program and surprisingly it worked. Hope it works for you as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Popen runs the command it receives as you would run something in your terminal (example: CMD on Windows or bash on Linux). So, it does not execute Python, but Bash code (on Linux for ex). The Python binary has a command, <code>-c</code> that does what you would need: executes a Python command right away. So you have to options: </p>
<ul>
<li>either use echo Hello (works on Windows or Linux too, echo it's both
in batch and in bash)</li>
<li>or you could use <code>python -c "print('Hello')</code> instead of just the print command.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Without making too many changes to your existing script, I have edited your script with the below comments indicating what I did to get it to work. I hope this helps.</p>
<pre><code>import os
import sys
import subprocess
import inspect    

def run_process(cmd_args):          # Below added shell=True' in parameters.
    with subprocess.Popen(cmd_args, stdout=subprocess.PIPE, shell=True) as proc: 
        output = proc.stdout.read()   # Reads the output from the process in bytes.
        print(output.decode('utf-8'))  # Converts bytes to UTF-8 format for readability. 
                                   # Optionally you can use the 'encoding='utf-8' argument 
                                   # instead and just print(proc.stdout.read()).   
run_process("echo Hello")  # To display the message in the prompt use 'echo' in your string like this.
</code></pre>
<blockquote>
<p>Note: Read the Security Considerations section before using shell=True.
  <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#security-considerations</a></p>
</blockquote>
</div>
<span class="comment-copy">Perhaps you are looking for the <code>multiprocessing</code> module? <code>subprocess</code> is for interfacing with external programs.</span>
<span class="comment-copy">I used ` p = subprocess.Popen(["echo", "hello world"], stdout=subprocess.PIPE) print p.communicate()` which works.. however how can i use a context manager with this ? if I use a context manager such as <code>with subprocess.Popen(["echo", "hello world"], stdout=subprocess.PIPE) as p: p.communicate()</code> it fails .. any help ?</span>
<span class="comment-copy">For me it works properly. The only thing I could see is that you forgot the print when using the context. The following two Python files output the same thing for me with Python 3.6.4: <code>import subprocess with subprocess.Popen(["echo", "hello world"], stdout=subprocess.PIPE) as p: 	print(p.communicate())</code>  and  <code>import subprocess p = subprocess.Popen(["echo", "hello world"], stdout=subprocess.PIPE) print(p.communicate())</code></span>
