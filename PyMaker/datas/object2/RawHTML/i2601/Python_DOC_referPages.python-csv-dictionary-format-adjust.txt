<div class="post-text" itemprop="text">
<pre><code>import os
from datetime import datetime, date
def convert_file(file_path):
    with open(file_path) as file:
        next(file) 
        weather={}
        for line in file:
            line = line.rstrip("\n") 
            x=line.split(",")
            a=x[3]
            b=[x[-2],x[-1],x[4]]
            weather[a]=b
        print(weather)
        file.close()

file_path=os.getcwd()+"/weatherdata.csv"
convert_file(file_path)
</code></pre>
<hr/>
<pre><code>{'"2010-07-03"': ['"68"', '"52"', '"0.00"'], '"1969-08-23"': ['"81"', '"54"', '"0.00"'], '"1983-07-10"': ['"69"', '"54"', '"0.00"'], '"1983-09-17"': ['"61"', '"49"', '"0.00"'], '"1964-04-22"': ['"50"', '"35"', '"0.33"']
</code></pre>
<p>How do I make my output look like the sample output below?:
    Output dictionary (weather):</p>
<pre><code>{datetime.date(2017, 12, 10): [49, 34, 0.0],
 datetime.date(2017, 12, 11): [49, 29, 0.0],
 datetime.date(2017, 12, 12): [46, 32, 0.0],
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider parsing the CSV file using the <code>csv</code> library -- real world CSVs can be surprisingly complicated.
<a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html</a></p>
<p>If you're going down the manual path, consider running each line through
<code>line.strip('"')</code> to remove the trailing/leading quotes and splitting with <code>line.split('","')</code> or similar to not include the quotes in the centre, assuming your CSV is nicely formatted (if not, <strong>use the library</strong>).</p>
<p>You can convert strings to numbers with <code>int(x)</code> and <code>float(x)</code>: something like <code>
b2 = [int(b[0]), int(b[1]), float(b[2])</code> ought to help.</p>
<p>You can convert date-text to datetime objects with <code>datetime.strptime(date_string, format)</code> -- see <a href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior</a> for more documentation, but you'll need <code>%Y-%m-%d</code> as your format string, I think.</p>
</div>
<div class="post-text" itemprop="text">
<p>Better to use CSV module to handle csv file.
But this should help...</p>
<pre><code>import os
import ast
from datetime import datetime


def convert_file(file_path):
    with open(file_path) as file:
        next(file) 
        weather={}
        for line in file:
            line = line.rstrip("\n") 
            x=line.split(",")
            a=x[3]
            b=[x[-2],x[-1],x[4]]
            weather[datetime.strptime(a, '"%Y-%m-%d"')]= [ast.literal_eval(i.replace('"', "")) for i in b]
        print(weather)
        file.close()

file_path=os.getcwd()+"/weatherdata.csv"
convert_file(file_path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension with <code>datetime.strptime</code>, <code>int</code> and <code>float</code>. You can remove the double quotes in your strings via string slicing.</p>
<pre><code>from datetime import datetime

d = {'"2010-07-03"': ['"68"', '"52"', '"0.00"'],
     '"1969-08-23"': ['"81"', '"54"', '"0.00"'],
     '"1983-07-10"': ['"69"', '"54"', '"0.00"'],
     '"1983-09-17"': ['"61"', '"49"', '"0.00"'],
     '"1964-04-22"': ['"50"', '"35"', '"0.33"']}

res = {datetime.strptime(k[1:-1], '%Y-%m-%d'): \
       [int(v[0][1:-1]), int(v[1][1:-1]), float(v[2][1:-1])] \
       for k, v in d.items()}
</code></pre>
<p><strong>Result</strong></p>
<pre><code>print(res)

{datetime.datetime(1964, 4, 22, 0, 0): [50, 35, 0.33],
 datetime.datetime(1969, 8, 23, 0, 0): [81, 54, 0.0],
 datetime.datetime(1983, 7, 10, 0, 0): [69, 54, 0.0],
 datetime.datetime(1983, 9, 17, 0, 0): [61, 49, 0.0],
 datetime.datetime(2010, 7, 3, 0, 0): [68, 52, 0.0]}
</code></pre>
</div>
<span class="comment-copy">what is your logic? and how did you try to do it?</span>
<span class="comment-copy">I tried datetime, int(), float(), but none of them worked, I guess its sth to do with the double qoutes.</span>
<span class="comment-copy">I tried:            b=[int(x[-2]),int(x[-1]),float(x[4])]</span>
