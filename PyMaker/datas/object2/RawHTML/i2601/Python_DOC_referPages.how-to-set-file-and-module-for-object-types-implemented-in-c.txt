<div class="post-text" itemprop="text">
<p>I have a few custom types defined in C code.</p>
<p>When developing Python code based on these, I sometimes encounter an error, which is compounded when Python's own <code>getfile()</code> function (inside <code>inspect.py</code>) raises its own exception:</p>
<p><code>TypeError('{!r} is a built-in class'.format(object))</code></p>
<p>Because I'd like to see the underlying original error instead of the above, I'm wondering, if I can add the <code>__module__</code> and the <code>__file__</code> attributes to my own types. How would one do that?</p>
<p>The <a href="https://docs.python.org/3/extending/newtypes.html#attribute-management" rel="nofollow noreferrer">documentation</a> seems to imply, attributes must be part of the object -- an obvious waste in the case like mine, when the values are exactly the same for all instances of the class -- how can I make them <em>static</em>?</p>
<p>If I try to implement <a href="https://docs.python.org/3/extending/newtypes.html#type-specific-attribute-management" rel="nofollow noreferrer">type-specific attribute management</a>, I suddenly lose access to the type's <em>methods</em> (because now they are treated as attributes).</p>
<p>Is it possible for such attributes to coexist with methods? How would I do that? My main target is Python-3.x...</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <code>tp_name</code> slot of your C-level type definition, write the fully-qualified name:</p>
<pre><code>"your_module.YourClass"
</code></pre>
<p>The <code>__module__</code> of the type object will be set based on <code>tp_name</code>. The <code>__file__</code> attribute of the module should already be handled automatically.</p>
</div>
<span class="comment-copy">Thanks! This solves my particular problem. Still, I wonder, how would one have custom <i>static</i> attributes without losing access to methods...</span>
<span class="comment-copy">@MikhailT.: <a href="https://stackoverflow.com/questions/2374334/static-variables-in-python-c-api" title="static variables in python c api">stackoverflow.com/questions/2374334/â€¦</a>, but it's the wrong thing to do for <code>__module__</code>.</span>
