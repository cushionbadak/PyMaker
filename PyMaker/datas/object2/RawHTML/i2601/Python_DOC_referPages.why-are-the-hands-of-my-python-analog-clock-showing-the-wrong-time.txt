<div class="post-text" itemprop="text">
<p>I'm making an analog clock program with pygame, datetime, and math, but the angles that the hands are at are all off, and the second hand goes way too quickly. Here's the code:</p>
<pre><code>import pygame
from datetime import datetime
from datetime import time
from datetime import timedelta
import math
import time

pygame.init()

white = (255, 255, 255)
black = (0, 0, 0)

display_width = 400
display_height = 400

gameDisplay = pygame.display.set_mode((display_width, display_height))
pygame.display.set_caption('Clock')

gameDisplay.fill(white)

clock = pygame.time.Clock()

clock_radius = 200
clock_center = int(display_width / 2), int(display_height / 2)


def main():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit()

    # Drawing the clock and its center.
    pygame.draw.circle(gameDisplay, black, clock_center, clock_radius, 5)
    pygame.draw.circle(gameDisplay, black, clock_center, 5, 0)
    pygame.display.update()

    # I move the hands by drawing a white line over the previous line
    # and then drawing the new line (which is a hand), so I need a
    # variable equal to the time one second ago (for the white line) as
    # well as the current time (for the current hand).
    now_hour = int(datetime.now().strftime('%I'))
    now_minute = int(datetime.now().strftime('%M'))
    now_second = int(datetime.now(). strftime('%S'))

    one_sec_ago_hour = int((datetime.now() - timedelta(seconds=1)).strftime('%I'))
    one_sec_ago_minute = int((datetime.now() - timedelta(seconds=1)).strftime('%M'))
    one_sec_ago_second = int((datetime.now() - timedelta(seconds=1)).strftime('%S'))

    # Drawing the lines/defining the endpoints with math.
    pygame.draw.line(gameDisplay, white, clock_center, ((clock_radius * (3 / 5)) * math.cos(90 - one_sec_ago_hour * 30) + 200, (clock_radius * (3 / 5)) * math.sin(90 - one_sec_ago_hour * 30) + 200), 10)
    pygame.draw.line(gameDisplay, white, clock_center, (clock_radius * (4 / 5) * math.cos(90 - one_sec_ago_minute * 6) + 200, clock_radius * (4 / 5) * math.sin(90 - one_sec_ago_minute * 6) + 200), 3)
    pygame.draw.line(gameDisplay, white, clock_center, (clock_radius * math.cos(90 - one_sec_ago_second * 6) + 200, clock_radius * math.sin(90 - one_sec_ago_second * 6) + 200), 1)
    pygame.display.update()

    pygame.draw.line(gameDisplay, black, clock_center, ((clock_radius * (3 / 5)) * math.cos(90 - now_hour * 30) + 200, (clock_radius * (3 / 5)) * math.sin(90 - now_hour * 30) + 200), 10)
    pygame.draw.line(gameDisplay, black, clock_center, (clock_radius * (4 / 5) * math.cos(90 - now_minute * 6) + 200, clock_radius * (4 / 5) * math.sin(90 - now_minute * 6) + 200), 3)
    pygame.draw.line(gameDisplay, black, clock_center, (clock_radius * math.cos(90 - now_second * 6) + 200, clock_radius * math.sin(90 - now_second * 6) + 200), 1)
    pygame.display.update()

    # Making the loop one second long.
    time.sleep(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two problems:</p>
<ol>
<li><p>The angles that you pass to <code>math.cos</code> and <code>math.sin</code> have to be in radians not degrees, so you have to convert them with <a href="https://docs.python.org/3/library/math.html#math.radians" rel="nofollow noreferrer"><code>math.radians</code></a>.</p>
<p><code>x = clock_radius * (3 / 5) * math.cos(math.radians(90 - now_hour * 30)) + 200</code></p></li>
<li><p>Pygame's y-axis is inverted, so pass the negative angle to <code>math.sin</code>.</p>
<p><code>y = clock_radius * (3 / 5) * math.sin(-math.radians(90 - now_hour * 30)) + 200</code></p></li>
</ol>
<hr/>
<p>You can also simplify the code by filling the screen with <code>white</code> each frame and redrawing the circles and hands, then you don't have to calculate the previous hands to erase them. Also, a <code>while</code> loop was missing. Here's the updated <code>main</code> function:</p>
<pre><code>def main():
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return

        now_hour = int(datetime.now().strftime('%I'))
        now_minute = int(datetime.now().strftime('%M'))
        now_second = int(datetime.now(). strftime('%S'))

        gameDisplay.fill(white)
        pygame.draw.circle(gameDisplay, black, clock_center, clock_radius, 5)
        pygame.draw.circle(gameDisplay, black, clock_center, 5, 0)
        # Hour hand.
        x = clock_radius * (3 / 5) * math.cos(math.radians(90 - now_hour * 30)) + 200
        y = clock_radius * (3 / 5) * math.sin(-math.radians(90 - now_hour * 30)) + 200
        pygame.draw.line(gameDisplay, black, clock_center, (x, y), 10)
        # Minute hand.
        x = clock_radius * (4 / 5) * math.cos(math.radians(90 - now_minute * 6)) + 200
        y = clock_radius * (4 / 5) * math.sin(-math.radians(90 - now_minute * 6)) + 200
        pygame.draw.line(gameDisplay, black, clock_center, (x, y), 3)
        # Second hand.
        x = clock_radius * math.cos(math.radians(90 - now_second * 6)) + 200
        y = clock_radius * math.sin(-math.radians(90 - now_second * 6)) + 200
        pygame.draw.line(gameDisplay, black, clock_center, (x, y), 1)

        pygame.display.update()
        # Making the loop one second long
        time.sleep(1)
</code></pre>
</div>
<span class="comment-copy">Worked perftectly!! Thanks!!</span>
