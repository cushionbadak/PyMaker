<div class="post-text" itemprop="text">
<p>I'm a little confused over the difference between iterators and iterables. I've done a lot of reading and have got this much:</p>
<p><strong>Iterator</strong>: An object that has <code>__next__</code> in itâ€™s class. You can call next() on it. All iterators are iterable.</p>
<p><strong>Iterable</strong>: An object that defines <code>__iter__</code> or <code>__getitem__</code> in it's class. Something is iterable if it can build an iterator using iter(). Not all iterables are iterators.</p>
<p>Is <code>some_dict.items()</code> an iterator? I know that <code>some_dict.iteritems()</code> would be in Python2 right?</p>
<p>I'm just checking because a course I'm doing says it is and I'm pretty sure it's just an iterable (not an iterator).</p>
<p>Thanks for your help :)</p>
</div>
<div class="post-text" itemprop="text">
<p>No, it isn't. It is an iterable view of the items in the dict:</p>
<pre><code>&gt;&gt;&gt; next({}.items())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'dict_items' object is not an iterator
&gt;&gt;&gt;
</code></pre>
<p>It's <code>__iter__</code> method returns a specialized iterator instance:</p>
<pre><code>&gt;&gt;&gt; iter({}.items())
&lt;dict_itemiterator object at 0x10478c1d8&gt;
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can test this directly:</p>
<pre><code>from collections import Iterator, Iterable

a = {}
print(isinstance(a, Iterator))  # -&gt; False
print(isinstance(a, Iterable))  # -&gt; True
print(isinstance(a.items(), Iterator))  # -&gt; False
print(isinstance(a.items(), Iterable))  # -&gt; True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dict.items</code> returns a <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow noreferrer">dict view</a>, according to the <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer">docs</a>:</p>
<pre><code>In [5]: d = {1: 2}

In [6]: next(d.items())
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-6-945b6258a834&gt; in &lt;module&gt;()
----&gt; 1 next(d.items())

TypeError: 'dict_items' object is not an iterator

In [7]: next(iter(d.items()))
Out[7]: (1, 2)
</code></pre>
<p>Answering your question, <code>dict.items</code> is not an iterator. It is an iterable object which supports <code>len</code>, <code>__contains__</code> and reflects changes made in the original dict:</p>
<pre><code>In [14]: d = {1: 2, 3: 4}

In [15]: it = iter(d.items())

In [16]: next(it)
Out[16]: (1, 2)

In [17]: d[3] = 5

In [18]: next(it)
Out[18]: (3, 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check it yourselves:</p>
<pre><code>d = {'a': 1, 'b': 2}

it = d.items()
print(next(it))
</code></pre>
<p>This results in <code>TypeError: 'dict_items' object is not an iterator</code>.</p>
<p>On the other hand, you can always iterate through <code>d.items()</code> as:</p>
<pre><code>d = {'a': 1, 'b': 2}

for k, v in d.items():
    print(k, v)
</code></pre>
<p>Or:</p>
<pre><code>d = {'a': 1, 'b': 2}

it = iter(d.items())
print(next(it))  # ('a', 1)
print(next(it))  # ('b', 2)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems">What is the difference between dict.items() and dict.iteritems()?</a></span>
<span class="comment-copy">@ytu not really a duplicate IMO, and anyway, the accepted answer <i>incorrectly</i> addresses the specifics of this one.</span>
<span class="comment-copy">@juanpa.arrivillaga I am aware of that the accepted answer is incorrect. Still discussions there covered pretty much and are enough to solve this question here.</span>
<span class="comment-copy">@zvone But you can't call <code>next()</code> on <code>items</code>, so surely it doesn't behave like an iterator? In regards to the duplication, I read that answer before and didn't feel it probably wasn't simple enough for me to understand :P Looking back now combined with the answers here I do get it, so am happy to accept duplication if that's the going consensus? (pretty new to stackoverflow)</span>
<span class="comment-copy">@E.Hazledine - true, but I am guessing that OP wanted to know whether it behaved like <code>items</code> from python 2 or like <code>iteritems</code>, in which case, all of the answers which are correct would lead to the wrong conclusion. Hence my simplified comment</span>
