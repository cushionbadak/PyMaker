<div class="post-text" itemprop="text">
<p>The script needs to read input from a text/csv file but as soon as I try and implement the functionality, everything breaks. </p>
<p>Here is my code:</p>
<pre><code>from collections import defaultdict
#from csv import reader

data = """Lions 3, Snakes 3
Tarantulas 1, FC Awesome 0
Lions 1, FC Awesome 1
Tarantulas 3, Snakes 1
Lions 4, Grouches 0"""

# with open('sample_input.csv') as data:
#     csv = reader(data)
#     list_csv = [line.rstrip('\n') for line in data]

data_list = data.splitlines()


def splitter(row):
    left_team, right_team = row.split(',')
    return {
        'left': left_team[:-2].strip(),
        'left_score': int(left_team[-2:].strip()),
        'right': right_team[:-2].strip(),
        'right_score': int(right_team[-2:].strip())
    }


data_dicts = [splitter(row) for row in data_list]


team_scores = defaultdict(int)
for game in data_dicts:
    if game['left_score'] == game['right_score']:
        team_scores[game['left']] += 1
        team_scores[game['right']] += 1
    elif game ['left_score'] &gt; game['right_score']:
        team_scores[game['left']] += 3
    else:
        team_scores[game['right']] += 3
    print(team_scores)

teams_sorted = sorted(team_scores.items(), key=lambda team: team[1], reverse=True)


# for line in teams_sorted:
#     print(line)
</code></pre>
<p>Also, the expected output that I need to have is:</p>
<pre><code>1. Tarantulas, 6 pts
2. Lions, 5 pts
3. FC Awesome, 1 pt
3. Snakes, 1 pt
4. Grouches, 0 pts
</code></pre>
<p>I just can't seem to figure out how to get to this step. I checked most parts of my code with print statements and it seems the dictionary is working correctly but it is not printing the last team and it's score (Grouches, 0 pts).</p>
<p>I am currently getting this output:</p>
<pre><code>('Tarantulas', 6)
('Lions', 5)
('Snakes', 1)
('FC Awesome', 1)
</code></pre>
<p>Any help would be greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>Well done for getting this far. You have managed to implement the logic, but have got stuck with a specific behaviour of <code>defaultdict</code>. There are 2 main points to note:</p>
<ol>
<li>If a key is not initialized with <code>defaultdict</code>, it won't be added to the dictionary. You can do this simply by adding 0 to a non-initialized key.</li>
<li>For the specific formatting you require, you can use <code>enumerate</code> in a loop after sorting.</li>
</ol>
<p>Putting these together, amend your loop as below:</p>
<pre><code>for game in data_dicts:
    if game['left_score'] == game['right_score']:
        team_scores[game['left']] += 1
        team_scores[game['right']] += 1
    elif game ['left_score'] &gt; game['right_score']:
        team_scores[game['left']] += 3
        team_scores[game['right']] += 0
    else:
        team_scores[game['left']] += 0
        team_scores[game['right']] += 3
</code></pre>
<p>Then use <code>enumerate</code> in a loop. You can use <code>operator.itemgetter</code> and f-strings (the latter in Python 3.6+) to make your logic cleaner:</p>
<pre><code>from operator import itemgetter

teams_sorted = sorted(team_scores.items(), key=itemgetter(1), reverse=True)

for idx, (team, score) in enumerate(teams_sorted, 1):
    print(f'{idx}. {team} {score} pts')

1. Tarantulas 6 pts
2. Lions 5 pts
3. Snakes 1 pts
4. FC Awesome 1 pts
5. Grouches 0 pts
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>have you tried the CSV python lib? Extracted from the doc (<a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html</a>): </p>
<pre><code>import csv
with open('data.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    for row in spamreader:
        print(', '.join(row))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To the code breaking on adding CSV. CSV reader does the <code>split(',')</code> for you. So your <code>left_team = row[0]</code> and <code>right_team = row[1]</code> </p>
<p>So your code changes to something like</p>
<pre><code>def spliter(row):
    left_team, right_team = row
    return {
        'left': left_team[:-2].strip(),
        'left_score': int(left_team[-2:].strip()),
        'right': right_team[:-2].strip(),
        'right_score': int(right_team[-2:].strip())
    }

with open('data.csv') as data_obj:
    reader = csv.reader(data_obj)
    data_dicts = [splitter(row) for row in reader]
</code></pre>
<p>You can go for plaintext reading if you want to manually <code>split(',')</code>.</p>
<pre><code>with open('data.csv') as data_obj:
    data_list = [line.rstrip('\n') for line in data_obj.readlines()]
</code></pre>
</div>
<span class="comment-copy">Please explain 'everything breaks'</span>
<span class="comment-copy">Sorry, what I mean is, when I implement the csv reader, then I get the error "AttributeError: '_io.TextIOWrapper' object has no attribute 'splitlines'"</span>
<span class="comment-copy">Have you tried using pandas package to read csv or txt files?</span>
<span class="comment-copy">I have tried using pandas but it's super confusing for me. Is there a way to just import the file with pandas without changing too much in the code?</span>
<span class="comment-copy"><code>splitlines</code> is a string function. You cannot apply it to a file object. <code>reader</code> gives you comma separted lines. So you don't need <code>row.split(',')</code>. If you want to use csv, you should change your logic a bit. If you don't want to change your code for some reason, you can use plaintext reading something like <code>data_list=data.readlines()</code></span>
<span class="comment-copy">Yes I have, but then my splitlines function does not work.</span>
