<div class="post-text" itemprop="text">
<p>I created an AI in python/pygame but even after spending hours of debugging, I could not find why the individuals(dots) are not getting mutated. After few generations, all the individuals just overlap each other and follow the same exact path. But after mutation they should move a little bit differently.</p>
<p>Here is what a population size of 10 looks like after every 2-3 generations..</p>
<p><a href="https://i.stack.imgur.com/vHyfw.png" rel="nofollow noreferrer">Image 1</a> <a href="https://i.stack.imgur.com/IX4W0.png" rel="nofollow noreferrer">Image 2</a> <a href="https://i.stack.imgur.com/5n5x6.png" rel="nofollow noreferrer">Image 3</a></p>
<p>As you can see, just after few generations they just overlap and all the individuals in the population move together, following exact same path! We need mutations!!!</p>
<p>I would be really grateful to you if you could find any mistake. Thank!</p>
<p>I saw the code from: <a href="https://www.youtube.com/watch?v=BOZfhUcNiqk&amp;t" rel="nofollow noreferrer">https://www.youtube.com/watch?v=BOZfhUcNiqk&amp;t</a>
and tried to make it in python. Here's my code</p>
<pre><code>import pygame, random
import numpy as np

pygame.init()
width = 800
height = 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("The Dots")

FPS = 30
clock = pygame.time.Clock()
gameExit = False

grey = [30, 30, 30]
white = [255, 255, 255]
black = [0, 0, 0]
red = [255, 0, 0]

goal = [400, 10]

class Dot():
    def __init__(self):
        self.x = int(width/2)
        self.y = int(height - 150)
        self.r = 3
        self.c = black
        self.xVel = self.yVel = 0
        self.xAcc = 0
        self.yAcc = 0
        self.dead = False
        self.steps = 0
        self.reached = False
        self.brain = Brain(200)

    def show(self):
        pygame.draw.circle(screen, self.c, [int(self.x), int(self.y)], self.r)

    def update(self):
        if (self.x &gt;= width or self.x &lt;= 0 or self.y &gt;= height or self.y &lt;= 0):
            self.dead = True
        elif (np.sqrt((self.x-goal[0])**2 + (self.y-goal[1])**2) &lt; 5):
            self.reached = True
        if not self.dead and not self.reached:
            if len(self.brain.directions) &gt; self.steps:
                self.xAcc = self.brain.directions[self.steps][0]
                self.yAcc = self.brain.directions[self.steps][1]
                self.steps += 1

                self.xVel += self.xAcc
                self.yVel += self.yAcc
                if self.xVel &gt; 5:
                    self.xVel = 5
                if self.yVel &gt; 5:
                    self.yVel = 5
                self.x += self.xVel
                self.y += self.yVel
            else: self.dead = True

    def calculateFitness(self):
        distToGoal = np.sqrt((self.x-goal[0])**2 + (self.y-goal[1])**2)
        self.fitness = 1/(distToGoal**2)
        return self.fitness

    def getChild(self):
        child = Dot()
        child.brain = self.brain
        return child

class Brain():
    def __init__(self, size):
        self.size = size
        self.directions = []
        self.randomize()

    def randomize(self):
        self.directions.append((np.random.normal(size=(self.size, 2))).tolist())
        self.directions = self.directions[0]

    def mutate(self):
        for i in self.directions:
            rand = random.random()
            if rand &lt; 1:
                i = np.random.normal(size=(1, 2)).tolist()[0]

class Population():
    def __init__(self, size):
        self.size = size
        self.dots = []
        self.fitnessSum = 0

        for i in range(self.size):
            self.dots.append(Dot())

    def show(self):
        for i in self.dots:
            i.show()

    def update(self):
        for i in self.dots:
            i.update()

    def calculateFitness(self):
        for i in self.dots:
            i.calculateFitness()

    def allDead(self):
        for i in self.dots:
            if not i.dead and not i.reached:
                return False
        return True

    def calculateFitnessSum(self):
        self.fitnessSum = 0
        for i in self.dots:
            self.fitnessSum += i.fitness

    def SelectParent(self):
        rand = random.uniform(0, self.fitnessSum)
        runningSum = 0
        for i in self.dots:
            runningSum += i.fitness
            if runningSum &gt; rand:
                return i

    def naturalSelection(self):
        newDots = []
        self.calculateFitnessSum()
        for i in self.dots:
            parent = self.SelectParent()
            newDots.append(parent.getChild())

        self.dots = newDots

    def mutate(self):
        for i in self.dots:
            i.brain.mutate()

test = Population(100)

while not gameExit:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gameExit = True
    screen.fill(white)

    if test.allDead():
        #Genetic Algorithm
        test.calculateFitness()
        test.naturalSelection()
        test.mutate()

    else:
        test.update()
        test.show()

    pygame.draw.circle(screen, red, goal, 4)
    clock.tick(FPS)
    pygame.display.update()
pygame.quit()
</code></pre>
<p>Thanks for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>I didn't go through the whole code, but over here</p>
<pre><code>def mutate(self):
    for i in self.directions:
        rand = random.random()
        if rand &lt; 1:
            i = np.random.normal(size=(1, 2)).tolist()[0]
</code></pre>
<p>you are trying to assign a new value to i (which is an iterater), so it won't change anything, which explains why you'r having trouble with the mutations.</p>
<p>You should have something like this:</p>
<pre><code>def mutate(self):
    for i in range(len(self.directions)):
        rand = random.random()
        if rand &lt; 1:
            self.directions[i] = np.random.normal(size=(1, 2)).tolist()[0]
</code></pre>
<p>or you can use list comprehensions 
<a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></p>
</div>
<span class="comment-copy">What do you mean they're not getting mutated? could you be more specific?</span>
<span class="comment-copy">Hey I just added few pictures and clarified my point. I would suggest you to test the code yourself to understand it better. Thanks!</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem. See this lovely <a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">debug</a> blog for help.</span>
