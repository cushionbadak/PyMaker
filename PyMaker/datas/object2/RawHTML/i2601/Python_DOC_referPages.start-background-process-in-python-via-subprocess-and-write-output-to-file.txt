<div class="post-text" itemprop="text">
<p>Dear stackoverflow users,</p>
<p>I'm looking for a solution for a probably quite easy problem. I want to automate some quantum chemical calculations and ran into a small problem.</p>
<p>Normally you start your quantum chemical programm (in my case it's called orca) with your input file (*.inp) on a remote server as a background process and pipe the output into an outputfile (*.out) via</p>
<pre><code>nohup orca H2.inp &gt;&amp; H2.out &amp;
</code></pre>
<p>or something similar.</p>
<p>Now I wanted to use a python script (with some templating) to write the input file automatically. At the end the script should start the calculation in a way that I could log out of the server without stopping orca. I tried that with</p>
<pre><code>subprocess.run(["orca", input_file], stdout=output_file)
</code></pre>
<p>but so far it did not work. How do I "emulate" the command given at the top with the subprocess module?</p>
<p>Regards</p>
<p><strong>Update</strong>
I have one file that is called <code>H2.xyz</code>. The script reads and splits the filename by the point and creates an input file name <code>H2.inp</code> and the output should be written into the file <code>H2.out</code>.</p>
<p><strong>Update 2</strong>
The input file is derived from the *xyz file via</p>
<pre><code>xyzfile = str(sys.argv[1])
input_file = xyzfile.split(".")[0] + ".inp"
output_file = xyzfile.split(".")[0] + ".out"
</code></pre>
<p>and is created within the script via templating. In the end I want to run the script in the following way:</p>
<pre><code>python3 script.py H2_0_1.xyz
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not simply:</p>
<pre><code>subprocess.Popen(f'orca {input_file} &gt;&amp; {output_file}',
                 shell=True, stdin=None, stdout=None, stderr=None, close_fds=True)
</code></pre>
<p>More info:
<a href="https://stackoverflow.com/questions/3516007/run-process-and-dont-wait">Run Process and Don't Wait</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Is the usage of subprocess important? If not, you could use <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a>.</p>
<p>The Python call would get really short, in your case</p>
<pre><code>os.system("nohup orca H2.inp &gt;&amp; H2.out &amp;")
</code></pre>
<p>should do the trick.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem not long ago.
Here is my solution:</p>
<pre><code>commandLineCode = "nohup orca H2.inp &gt;&amp; H2.out &amp;"
try:
    proc = subprocess.Popen(commandLineCode,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            cwd = workingDir)

except OSError:
    print("Windows Error occured")
    print(traceback.format_exc())

timeoutInSeconds = 100
try:
    outs, errs = proc.communicate(timeout = timeoutInSeconds)
except subprocess.TimeoutExpired:
    print("timeout")
    proc.kill()
    outs, errs = proc.communicate()

stdoutDecode = outs.decode("utf-8")
stderrDecode = errs.decode("utf-8")

for line in stdoutDecode.splitlines():
    # write line to outputFile
if stderrDecode:
    for line in stderrDecode.splitlines():
        # write line to error log
</code></pre>
<p>The OSError exception is pretty important since you never now what your OS might do wrong.</p>
<p>For more on the communicate() command which actually starts the process read: 
<a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For me (Windows, Python 2.7) the method <code>call</code> works very fine like this:</p>
<pre><code>with open('H2.out', 'a') as out :
    subprocess.call(['orca', infile], stdout=out,
                                      stderr=out,
                                      shell=True)   # Yes, I know. But It's Windows.
</code></pre>
<hr/>
<p>On Linux you maybe do not need <code>shell=True</code> for a list of arguments.</p>
</div>
<span class="comment-copy">try <code>subprocess.run</code> with <code>shell = True</code>.</span>
<span class="comment-copy">"If the shell is invoked explicitly, via shell=True, it is the application’s responsibility to ensure that all whitespace and metacharacters are quoted appropriately to avoid shell injection vulnerabilities" from <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">is <code>output_file</code> the path to a file (I don't think that will work) or a file-like object (like what you get from using the <code>open(output_file, 'w')</code> method?</span>
<span class="comment-copy">So far I did not get it to work, so I'm open to any solution.</span>
<span class="comment-copy">like I commented in the question shell=True is not secure, because of injection vulnerabilities. In my solution Python is taking care of that. But yes I might be over killing it xDDD</span>
