<div class="post-text" itemprop="text">
<p>I have two lists</p>
<pre><code>list1 = [1,a,2,b,3,c]
list2 = [5,d,6,e,7,f]
</code></pre>
<p>I tried to use <code>list(zip(list1, list2))</code></p>
<p>Then is what I got:</p>
<pre><code>[(1, 5), ('a', 'd'), (2, 6), ('b', 'e'), (3, 7), ('c', 'f')]
</code></pre>
<p>I want something like this to be my output:</p>
<pre><code>{1:a, 5:d, 2:b, 6:e, 3:c,7:f}
</code></pre>
<p>Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Via <code>iter</code> and <code>zip</code>:</p>
<pre><code>&gt;&gt;&gt; it = iter(list1 + list2)
&gt;&gt;&gt; dict(zip(it,it))
{1: 'a', 2: 'b', 3: 'c', 5: 'd', 6: 'e', 7: 'f'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd first add your two lists together</p>
<pre><code>&gt;&gt;&gt; values = list1 + list2
&gt;&gt;&gt; values
[1, 'a', 2, 'b', 3, 'c', 5, 'd', 6, 'e', 7, 'f']
</code></pre>
<p>Then use a <code>dict</code> comprehension to stride through the list by every other element, and zip that against the same stride but offset by one.</p>
<pre><code>&gt;&gt;&gt; {key:value for key,value in zip(values[::2], values[1::2])}
{1: 'a', 2: 'b', 3: 'c', 5: 'd', 6: 'e', 7: 'f'}
</code></pre>
</div>
<span class="comment-copy">there is a <i>hacky</i> quality to this answer which some might not be so fond of. But i am +1!</span>
<span class="comment-copy">I don't see the hack, it is similar to the 'grouper' recipe at <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html</a></span>
<span class="comment-copy">@Ev.Kounis It's not hacky IMO, I actually saw core CPython developer Raymond Hettinger use this kind of <code>zip()</code> on an iterator <a href="https://code.activestate.com/recipes/577916-fast-minmax-function/?in=user-178123" rel="nofollow noreferrer">code.activestate.com/recipes/577916-fast-minmax-function/…</a></span>
<span class="comment-copy">@SaiKumar <code>iter()</code> creates an iterator (read here if you're not familar: <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do" title="what does the yield keyword do">stackoverflow.com/questions/231767/…</a>). The iterator is consumed via <code>next()</code> calls (unlike say a list), thus <code>zip()</code> creates the correct pairs</span>
<span class="comment-copy">it returns an iterable (here called <code>it</code>) that will yield an item each time you call <code>next(it)</code>. You can try this out: <code>a = iter([1, 2, 3])</code> <code>next(a)</code> <code>next(a)</code> <code>next(a)</code> <code>next(a)</code></span>
