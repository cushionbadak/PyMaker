<div class="post-text" itemprop="text">
<p>I'm trying to get a list of datetime separators of a string in the same order that they occur int it. </p>
<p>Suppose I have the following datetime: <code>2015-03-25 12:22:21</code>; the output I intend to get from <code>set().intersection</code> is a list like this: <code>['-', ' ']</code></p>
<p>The problem is that it comes reversed. It seems random. Take a look at the following outputs:</p>
<pre><code>[IN]: list(set('/|.-T ').intersection('2015-03-25 12:22:21'))
[OUT]: [' ', '-']
</code></pre>
<p>Now, this one comes correct:</p>
<pre><code>[IN]: list(set('/|.-T ').intersection('2015-03-25T12:22:21'))`
[OUT]: ['-', 'T']
</code></pre>
<p>Why does the first one comes reversed with the space first? How can I approach this to get a consistent order?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a version that preserves the original order of the separators and doesn't output duplicate separators. When duplicates are present only the first one is included in the output.</p>
<pre><code>def date_separators(datestring, seps):
    out = []
    for s in datestring:
        if s in seps and s not in out:
            out.append(s)
    return out

# test

data = (
    '2015-03-25 12:22:21',
    '2015-03-25T12:22:23',
    '5/6/2016 12:22:25 ',
)

seps = frozenset('/|.-T ')
for s in data:
    print(s, date_separators(s, seps))
</code></pre>
<p><strong>output</strong></p>
<pre><code>2015-03-25 12:22:21 ['-', ' ']
2015-03-25T12:22:23 ['-', 'T']
5/6/2016 12:22:25  ['/', ' ']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a> does not maintain order, You have to achieve it by looping</p>
<pre><code>output = []
for i in '2015-03-25 12:22:21':
    if i not in output and i in '/|.-T ']:
        output.append(i)
</code></pre>
<p>Output:</p>
<pre><code>['-', ' ']
</code></pre>
</div>
<span class="comment-copy">It will be faster to do the <code>in</code> test against a set though. So you can do something like <code>seps = set('/|.-T ')</code> before the list comp. Do not put that <code>set</code> call inside the list comp, though, because that would get re-executed for each char in the input string.</span>
<span class="comment-copy">Id doesn't keep the list unique though.</span>
<span class="comment-copy">"It will be faster to do the <code>in</code> test against a set" that is technically not true. It will be faster for huge sets, since it has a constant computational complexity. But constant does not always mean lowest possible.</span>
<span class="comment-copy">@IliaGilmijarow Good point. I <i>think</i> 6 chars is enough for set to be faster. IIRC, it is for set vs list, but I can't remember the crossover point for set vs str.</span>
