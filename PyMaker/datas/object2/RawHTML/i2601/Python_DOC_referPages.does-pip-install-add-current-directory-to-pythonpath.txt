<div class="post-text" itemprop="text">
<p>If I have a python project that contains a <code>setup.py</code> file I can run <code>pip install --user -e .</code>. This will install all of the requirements listed in the setup file and add the current project to my pip list: </p>
<pre><code>$ pip show project-name                                                                                
Name: project-name                                                                                    
Version: 1.0.0                                                                             
Summary: None                                                                                                                             
Location: /path-to-project/                    
Requires: matplotlib, numpy, scipy, ...                                                    
Required-by:   
</code></pre>
<p>Will this by default add the <code>\path-to-project\</code> to the users PYTHONPATH, or do you have to do that manually, so you can import the code via <code>import project-name</code> from any location on the system?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>pip</code> does not alter the <code>PYTHONPATH</code> and you don't need to either. <code>pip</code> instead uses standard paths set by Python when you install the project. You don't need to make any changes, you already installed the package in a standard location when you ran <code>pip install --user</code>.</p>
<p>Projects installed with <code>-e</code> use an <em>egg link</em> file and are added to a <code>.pth</code> file in a standard location. The location shown is listed in a <code>project-name.egg-link</code> file (really just a piece of metadata to track packages) and the same path is added  to the <code>easy-install.pth</code> file in the same directory. Python automatically adds any paths listed in <code>.pth</code> files to the module search path on startup (this is handled by the <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer"><code>site</code> module</a>).</p>
<p>The same set of standard paths is also used to find the project again when you run <code>pip show</code>; that the command works shows that the project is <em>already</em> on the Python module search path, correctly installed.</p>
<p>You can verify the paths by running <code>python -m site</code>. Because you installed the package with the <code>--user</code> switch, the location <code>pip</code> uses is shown there as the <code>USER_SITE</code> path. Check that path to find the <code>*.egg-link</code> and <code>easy-install.pth</code> files.</p>
</div>
<span class="comment-copy">I'm not sure I understand your answer, I am not installing a package from PyPI using pip. I am installing a python project that contains a <code>setup.py</code>, so this will not install in site-packages for example, but instead to /path-to-project/ as shown in the <code>pip show</code> in my question. Will I then need to add  /path-to-project/ to my PYTHONPATH in order to import this project's code, or has pip done that automatically?</span>
<span class="comment-copy">@jw1294: sorry, my answer wasn't as complete as it could have been. I've added additional pointers to show how <code>-e</code> projects are handled.</span>
<span class="comment-copy">right that clears it up, so the egg file gets created in site-packages and that contains the location of the project?</span>
<span class="comment-copy">@jw1294: yes, but that's not how Python then finds the project. That's how <code>pip</code> and other tools knows that the project was installed by a tool and not by some manual editing. The path is also added to a <code>.pth</code> file (<code>easy_install.pth</code> here) and <i>that file</i> is used to add additional paths to <code>sys.modules</code>.</span>
<span class="comment-copy">@jw1294: so deleting the <code>.egg-link</code> file will not remove the project from the Python module search path, but editing <code>easy_install.pth</code> to remove the path will.</span>
