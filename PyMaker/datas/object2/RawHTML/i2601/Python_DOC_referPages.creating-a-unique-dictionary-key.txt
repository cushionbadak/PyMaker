<div class="post-text" itemprop="text">
<h1>The problem</h1>
<p>I am making an e-commerce in Django and the user can pick multiple items before adding them to the cart, I'm using the timestamp as an object id in the user's cart when add to cart button clicked.</p>
<p>When add to cart button clicked I have a dict of </p>
<pre><code>{"item_id":"qty"}
</code></pre>
<p>creating the cart object goes like</p>
<pre><code>{"timestamp":"item_id;qty"}
</code></pre>
<p>the timestamp serves as an unique id so i can give id to the rows of the cart if they need to be deleted, if so sends the id of the element of the cart in the back-end and deletes the same element from the user's cart object </p>
<p>The timestamp is not unique... The process is too fast that the timestamp stays the same and it does not make different keys any advice to have a different timestamp would be appreciated .</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>the timestamp serves as an unique id so i can give id to the rows of the cart if they need to be deleted</p>
</blockquote>
<p>You're barking up the wrong tree, trying to fix a problem in a solution not fit for the original problem; i.e. you have an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>.</p>
<p>The simplest solution: use a <code>list</code> instead of a <code>dict</code>. The <code>list</code> will have unique keys by definition. The only issue with a <code>list</code> is that in a web scenario, you may be handling two parallel or outdated requests, and the index may refer to a different element by the time it reaches your server.</p>
<p>So to use truly unique, unchanging ids, use the <a href="https://docs.python.org/3/library/uuid.html" rel="noreferrer"><code>uuid</code> module</a>:</p>
<pre><code>from uuid import uuid4

a = [1 ,2 ,3 , 4 , 5]
b = {}
for i in a:
    b[uuid4()] = i
</code></pre>
<p>There you go, guaranteed unique ids.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want your keys to be unique and somewhat time-based, just increment them manually:</p>
<pre><code>import time
key = time.time() * 1000
a = [1 ,2 ,3 , 4 , 5]
b = {}
for i in a:
    b[key] = i
    key += 1

print(b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using <code>datetime</code> module</p>
<pre><code>from datetime import datetime

for i in a:
    b[datetime.now()] = i
</code></pre>
<p>edit:</p>
<p>Perhaps a better way to make it unique will be to add a unique element to the timestamp. One way could be to add a UUID to the mix. </p>
<pre><code>import uuid

for i in a:
    b[timestamp() + uuid.uuid4()] = i
</code></pre>
<p>But I might be stretching it a bit. Just a suggestion. </p>
</div>
<span class="comment-copy">I'm confused - what problem are you trying to solve? <i>Must</i> you use a time stamp? Could you store values created at the same time in a list under said time stamp? This might be an example of <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">the XY problem</a>.</span>
<span class="comment-copy">Why are you rounding?</span>
<span class="comment-copy">Why, yes, timestamps are not unique, as you say. So you must be prepared for collisions to occur. Perhaps make each value a <i>list</i> of possible values?</span>
<span class="comment-copy">Because you still haven't bothered adding context for what these timestamps are supposed to be used for, and we're suspecting we're wasting our time on an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>.</span>
<span class="comment-copy">ü§¶‚Äç‚ôÇÔ∏è Sooo‚Ä¶ you just need a unique id‚ÄΩ You don‚Äôt seem to be particularly married to using a time stamp at all‚ÄΩ Why not use something appropriate then, like a UUID, or simply a <code>list</code> which will have unique indices?</span>
<span class="comment-copy">well this is a working solution why downvote? It's not off topic and it works, I'm not gonna use it but it can help someone in SO</span>
<span class="comment-copy">I see why I was being downvoted. it still doesn't solve the problem of making it unique.</span>
