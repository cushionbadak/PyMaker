<div class="post-text" itemprop="text">
<p>Let's say I have a string</p>
<pre><code>str = "some_var = \n {'LOL'}"
</code></pre>
<p>and I want to run a <code>re</code>-search on it...</p>
<pre><code>re.search(r'some_var =([.\s]+)\}', str)
</code></pre>
<p>To my knowledge, I should be searching any character (including newline characters) until hitting a <code>}</code> in the string and grouping everything between the <code>=</code> and it.</p>
<p>Why am I getting <code>None</code> as the result?</p>
</div>
<div class="post-text" itemprop="text">
<p>Inside a character class the dot matches a literal dot so your regex would match one or more times a dot or a whitespace character <code>([.\s]+)</code> in a capturing group.</p>
<p>You could match not a <code>}</code> using a negated character class:</p>
<p><code>some_var =([^}]+)}</code></p>
<p><a href="https://regex101.com/r/CCqpAv/2" rel="nofollow noreferrer">Regex demo</a></p>
<p><strong>Explanation</strong></p>
<ul>
<li><code>some_var =</code> Match literally</li>
<li><code>(</code> Capturing group

<ul>
<li><code>[^}]+</code> Match not a <code>}</code> one or more times using a negated character class (including newlines)</li>
</ul></li>
<li><code>)</code> Close capturing group</li>
<li><code>}</code> Match <code>}</code></li>
</ul>
<p><a href="http://rextester.com/IGMBG2658" rel="nofollow noreferrer">Demo</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>.</code> doesn't match any character including newline -- in fact it matches any character <em>except</em> newline. See:</p>
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a></p>
<p>You have to use <code>DOTALL</code> mode.</p>
<p>I'm not sure what your intention is with <code>[.\s]</code>. It looks like "any character plus whitespace". But whitespace is a character, so you can just say "any character". I think this probably suffices:</p>
<pre><code>re.search(r'some_var =(.+)\}', str, flags=re.DOTALL)
</code></pre>
<p>P.S. <code>str</code> is a built-in. Don't call variables <code>str</code>.</p>
</div>
<span class="comment-copy">I don't think your pattern will match their example. Can you include some working code?</span>
<span class="comment-copy">@Denziloe I have added a demo.</span>
<span class="comment-copy">Thanks. They didn't state output but I think the question would like everything after = in their grouping, including any newlines.</span>
<span class="comment-copy">@Denziloe Then negated character class also matches line break characters. The OP mentioned  "until hitting a } in the string and grouping everything between the = and it.". I am reading this as the content after the equals sign and before the closing curly.</span>
<span class="comment-copy">Thanks so much for this answer. It really helped understand the issue with my method (aka: dot in character brackets)... and presented the better / obvious solution...</span>
