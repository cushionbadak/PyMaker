<div class="post-text" itemprop="text">
<p>I'm having the following problem when I subclass a numpy array</p>
<p>for example:</p>
<pre><code>import numpy

class Example(numpy.ndarray):
   def __new__(cls, x, y):
       dt = [('x', 'float'), ('y', 'float')]
       buffer = numpy.array(zip(x, y),dtype=dt)
       obj = super(Example, cls).__new__(cls, buffer.shape, dtype=dt,
                                          buffer=buffer)
       obj.x = numpy.array(x, dtype='float')
       obj.y = numpy.array(y, dtype='float')
       return obj

   def __array_finalize__(self, obj):
        if obj is None: return
        self.x = getattr(obj, 'x', None)
        self.y = getattr(obj, 'y', None)
</code></pre>
<p>If I do operations with obj.x and obj['x'], one does not change the other. For example these operations will show different results</p>
<pre><code>x = [1,2,3,4]
y = [1,1,1,1]

obj = Example(x,y)
obj.x = obj.x / 2.
print obj.x, obj['x']
</code></pre>
<p>or</p>
<pre><code>obj = Example(x,y)
obj['x'] = obj['x'] / 2.
print obj.x, obj['x']
</code></pre>
<p>How can I make that whenever I do an operation with one of them (obj.x or obj['x']), the other also changes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>[('x', 'float'), ('y', 'float')]</code> as the datatype tells numpy to create a <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.rec.html" rel="nofollow noreferrer">structured array</a> with fields named <code>x</code> and <code>y</code>.
Those are accessed using brackets, as you've shown.
Now you've also added attributes (accessed using <code>obj.&lt;name&gt;</code>) to your class.
However, you've created new arrays for the attributes.
To fix the attribute notation you need to have the <code>x</code> and <code>y</code> attributes point to the array fields by those names, rather than separate arrays.
So change</p>
<pre><code>   obj.x = numpy.array(x, dtype='float')
   obj.y = numpy.array(y, dtype='float')
</code></pre>
<p>to</p>
<pre><code>   obj.x = obj['x']
   obj.y = obj['y']
</code></pre>
<p><strong>edit</strong> this fixes only the second test case in the question.  Assigning to <code>x</code> or <code>y</code> still assigns a new object as the attribute, rather than updating <code>x</code> or <code>y</code>.
To fix this it would be necessary to modify the <code>__setattr__</code> method of the class (see <a href="https://docs.python.org/3/reference/datamodel.html#customizing-attribute-access" rel="nofollow noreferrer">here</a>)</p>
<pre><code>def __setattr__(self, attr, value):
    if attr in ['x', 'y']:
         getattr(self, attr)[:] = attr
    else:
         setattr(self, attr, value)
</code></pre>
<p>However, Numpy already has an array type to allow accessing fields as attributes.
You can use it like this</p>
<pre><code>obj = np.array(np.r_[x, y], dtype=[('x', 'float'), ('y', 'float')]) 
obj = obj.view(np.recarray)  
</code></pre>
<p>So congratulations! You've effectively re-implemented <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html" rel="nofollow noreferrer">record arrays</a>(well, <code>np.recarray</code> won't allow accessing fields names matching attributes or functions <code>ndarray</code> has.  So names like <code>mean</code> or <code>ndim</code> are out, while your code would allow these).
It's always a good (and very frustrating) sign when you spend hours creating something numpy already has.</p>
</div>
<span class="comment-copy">Hi @user2699, thanks! The solution obj.x = obj['x'] will solve for      obj['x'] = obj['x'] / 2.     print obj.x, obj['x'] but not for:     obj.x = obj.x / 2.     print obj.x, obj['x']  I am aware of the existence of the record array. In the example I simplified the class to simplify the question, but there is many other methods and attributes that I am trying to add.  If I put obj = obj.view(np.recarray), my class type will be a recarray, and it gives me an error if I try to apply the extended methods. Now I am thinking if should I just subclass the recarray, instead of the ndarray?</span>
<span class="comment-copy">@bennu, thanks for pointing that out.  I've updated the answer to show how you can fix that.  I'd expect it to be easier to subclass <code>recarray</code>, but I don't know.</span>
<span class="comment-copy">Hi @user2699, I just sub-classed the record array actually, I thought that might be simpler. But very nice to see your solution, I might need this in some other time!</span>
