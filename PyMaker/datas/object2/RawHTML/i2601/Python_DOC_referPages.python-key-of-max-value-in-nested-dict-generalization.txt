<div class="post-text" itemprop="text">
<p>I would like to know how we can return the key value of nested dicts. The case of dict of dict (case 1) has already been answer elsewhere, but I do not manage to generalise</p>
<p>Case 1: dict of dict</p>
<pre><code>dict = {'key1': {'subkey1': value11, 'subkey2': value12, ...}
        'key2': {'subkey1': value21, 'subkey2': value22, ...}
        ...}
</code></pre>
<p>In order to get the key with the maximum 'subkey1' value I would do:</p>
<pre><code>max(dict, key=lambda x: dict[x].get('subkey1'))
</code></pre>
<p>Case 2:</p>
<pre><code>dict = {'key1': 
         {'subkey1': 
           {'subsubkey1': value111, 'subsubkey2': value112, ...}}
        'key2': 
          {'subkey2': 
            {'subsubkey1': value211, 'subsubkey2': value212, ...}}}
        ...}
</code></pre>
<p>So my questions are:</p>
<ul>
<li>How can we generalise the formula of case1? if I want the 'key' of a maximum 'subsubkey'?</li>
<li>In terms of performance, would another solution be more efficient than a 1-line formula?</li>
</ul>
<p>Thank you for your help and contribution</p>
</div>
<div class="post-text" itemprop="text">
<p>This answer assumes you know the path of the nested key. Then one possible view of case 2 is:</p>
<pre><code>((d.get(key)).get(subkey1)).get(subsubkey1)
</code></pre>
<p>You want to apply function <code>get</code> in a cumulative way, notice that <code>get</code> can be exchanged with the operator <code>[]</code>, so the above line can also be seen this way:</p>
<pre><code>((d[key])[subkey1])[subsubkey1]
</code></pre>
<p>This is what the function <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce</a> does, from the documentation:</p>
<blockquote>
<p>Apply function of two arguments cumulatively to the items of sequence,
  from left to right, so as to reduce the sequence to a single value.
  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
  ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value and
  the right argument, y, is the update value from the sequence.</p>
</blockquote>
<p>So you can nest your calls in the following way:</p>
<pre><code>from functools import reduce

d = {'key1': {'subkey1': {'subsubkey1': 1, 'subsubkey2': 2}},
     'key2': {'subkey1': {'subsubkey1': 2, 'subsubkey2': 3}}}


def value(first_key, di=None, path=None):
    lst = [di, first_key] + path
    return reduce(lambda x, y: x[y], lst)

p = ['subkey1', 'subsubkey1']

print(max(d, key=lambda k: value(k, d, p)))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>key2
</code></pre>
<p>The generalization of <code>key=</code> comes from the <code>value</code> function. Basically the functions receives a the top level key, the dictionary and the paths of keys, then using reduce applies the call in a cumulative way.</p>
<p><strong>UPDATE</strong></p>
<p>In a more generalized manner if you have different paths to the <code>'sub...subkey'</code> for each of the top keys <code>['key1', 'key2', ...]</code> you could use a dictionary of paths for each key in the following way:</p>
<pre><code>d = {'key1': {'subkey1': {'subsubkey1': 1, 'subsubkey2': 2}},
     'key2': {'subkey2': {'subsubkey1': 2, 'subsubkey2': 3}}}


paths = {
    'key1': ['subkey1', 'subsubkey1'],
    'key2': ['subkey2', 'subsubkey1']
}

print(max(d, key=lambda k: value(k, d, paths[k])))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>key2
</code></pre>
<p>Note that the <code>value</code> function remains the same only the path for each key is different. Also this solution gives you the added value of different path lengths for each top key.</p>
</div>
<span class="comment-copy">what is the result you expect?</span>
<span class="comment-copy">I would like the 'key' of the max subsubkey1. Let's say value111=111 and so on. In this example it would be key2</span>
<span class="comment-copy">Have you tried using recursion to get from <code>key &gt;&gt; subkey &gt;&gt; subsubkey</code> to an arbitrarily long nesting structure to <code>sub...subkey</code>? This way you get as deep as you need into the subdicts, and then return the 'root' key at the end</span>
<span class="comment-copy">Yes, the point would be to avoid recursion, if possible. But what about performance?</span>
<span class="comment-copy">thank you very much for this detailed answer, I really appreciate it. In order for the answer to be fully generalised, what you think would be a good solution if the subkey are different (like subkey1 and subkey2)?</span>
<span class="comment-copy">Thank you Daniel Mesejo, that's a really good answer !</span>
<span class="comment-copy">@Joseph If my answer helped to solve your problem, please consider <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work/5235#5235">marking it as accepted</a>. That's the customary way of indicating that your question is "resolved" and thanking the person who helped you.</span>
<span class="comment-copy">I did not know I had to mark a solution as accepted, I just voted for it. And I did thank you twice! Here is another one just for you: Thank you Daniel Mesejo</span>
