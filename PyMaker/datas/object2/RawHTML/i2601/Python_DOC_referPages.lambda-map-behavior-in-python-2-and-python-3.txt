<div class="post-text" itemprop="text">
<p>I came across some codes while looking at someone else's solution on LeetCode: </p>
<pre><code>def findLeaves(self, root):
    if not root: return []
    kids = map(self.findLeaves, (root.left, root.right))
    return map(lambda l, r: (l or []) + (r or []), *kids) + [[root.val]]
</code></pre>
<p>I found that it only works on Python 2 but not 3, so I did the following debugging:</p>
<p>Python 2:</p>
<pre><code>a = [[],[]]
b = map(lambda l, r: (l or []) + (r or []), *a) + [[4]]
c = map(lambda l, r: (l or []) + (r or []), *a) + [[5]]
d = map(lambda l, r: (l or []) + (r or []), *[b,c]) + [[2]]
e = [[3]]
f = map(lambda l, r: (l or []) + (r or []), *[d,e]) + [[1]]
print f
</code></pre>
<p>Python 3:</p>
<pre><code>a = [[],[]]
b = list(map(lambda l, r: (l or []) + (r or []), *a)) + [[4]]
c = list(map(lambda l, r: (l or []) + (r or []), *a)) + [[5]]
d = list(map(lambda l, r: (l or []) + (r or []), *[b,c])) + [[2]]
e = [[3]]
f = list(map(lambda l, r: (l or []) + (r or []), *[d,e])) + [[1]]
print(f)
</code></pre>
<p>The above code return <code>[[4, 5, 3], [2], [1]]</code> in Python 2 (which is correct) and <code>[[4, 5, 3], [1]]</code> in Python 3 (which is wrong).</p>
<p><code>*[d,e]</code> is <code>[[4,5], [2]] [[3]]</code>, in Python 2, when processing <code>[[2]]</code> it will auto assign <code>None</code> to r in the lambda expression. But in Python 3, it will skip the record.</p>
<p>I also found that in Python 2, if I changed <code>f</code> to <code>list(map(lambda l, r: (l or []) + (r or []), *itertools.zip_longest(d,e))) + [[1]]</code>, it will work. However, it will mess up the case for b and c.</p>
<p>Can anyone explain what is the right way to fix the code? Also, the way I debug is very dumb (I always use print), any better way to debug codes? I am new to Python and using the Jupyter notebook to run my codes.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> in python 3 doesn't pad with <code>None</code>, you'll need to do that yourself. You might want to use <code>zip_longest</code> and maybe starmap.</p>
<p><a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer">Python 2 docs for map</a></p>
<blockquote>
<p>map(function, iterable, ...) Apply function to every item of iterable
  and return a list of the results. If additional iterable arguments are
  passed, function must take that many arguments and is applied to the
  items from all iterables in parallel. If one iterable is shorter than
  another it is assumed to be extended with None items. If function is
  None, the identity function is assumed; if there are multiple
  arguments, map() returns a list consisting of tuples containing the
  corresponding items from all iterables (a kind of transpose
  operation). The iterable arguments may be a sequence or any iterable
  object; the result is always a list.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">Python 3 docs for map</a></p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable,
  yielding the results. If additional iterable arguments are passed,
  function must take that many arguments and is applied to the items
  from all iterables in parallel. With multiple iterables, the iterator
  stops when the shortest iterable is exhausted. For cases where the
  function inputs are already arranged into argument tuples, see
  itertools.starmap().</p>
</blockquote>
</div>
<span class="comment-copy">This code does not run in Python3. Furthermore, even after fixing the print, map is an iterator in Python3 and cannot be concatenated to a list. What did you run exactly?</span>
<span class="comment-copy">That's a very elaborate way to assign <code>[[4]]</code> to <code>b</code> and <code>[[5]]</code> to <code>c</code>...</span>
<span class="comment-copy">The link that you provide doesn't work for others. Please give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> which doesn't depend on linked code.</span>
<span class="comment-copy">@OlivierMelan√ßon Updated the question, sorry for the late response</span>
<span class="comment-copy">Of <code>a, b, c, d, e, f</code> -- which is the <i>first</i> in which you see a difference between Python 2 and Python 3? I suspect that your example is not minimal.</span>
