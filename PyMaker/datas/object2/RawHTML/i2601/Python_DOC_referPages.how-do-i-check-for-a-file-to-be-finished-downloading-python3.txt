<div class="post-text" itemprop="text">
<p>I am trying to figure out how to check if a download has been completed. Basically I want it to wait until the file is finished downloading then print: Download completed.</p>
<p>Here is my current code and what I am trying to do with it:</p>
<pre><code>from  urllib import request

print("Are you sure you want to download the newest file? y/n")
answer = input()

while True:
    if answer == 'y':
        print("Downloading file...")
        downloading = True
        request.urlretrieve("FILE_URL", "FILE_NAME")
    elif answer == 'n':
         exit()
    else:
         print("That is not a valid answer, please answer with y/n.")
         answer = input()

#I need some sort of function here that checks if the file is still being 
#downloaded

when downloading == False:
    print("Download Completed.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When <code>urlretrieve</code> returns, the file has already finished downloading.</p>
<p>See the usage example from the <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve" rel="nofollow noreferrer">docs</a>:</p>
<pre><code>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; local_filename, headers = urllib.request.urlretrieve('http://python.org/')
&gt;&gt;&gt; html = open(local_filename)
</code></pre>
<p>As can be seen, the file is opened immediately after the call to <code>urlretrieve</code>, as it was already created and the content was already written there.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use the  <code>urllib.request.urlretrieve</code> <code>reporthook</code> option, you can monitor the progress of the download, especially useful with large files, like so:</p>
<pre><code>import urllib.request

def Download_Progress(block_num, block_size, total_size):
    downloaded = block_num * block_size
    progress = int((downloaded/total_size)*100)
    print ("Download Progress",str(progress),"%")

url = "https://somesite/some.pdf"
urllib.request.urlretrieve(url, 'mycopy.pdf', reporthook=Download_Progress)
print ("Finished")
</code></pre>
<p>You can achieve something similar with the <code>requests</code> package as well.</p>
<pre><code>import requests
url = "https://somesite/some.pdf"

#Get the headers of the remote file
h = requests.head(url, allow_redirects=True)

#Get the size of the file
total_size = int(h.headers.get('content-length'))

#Request the file download with stream set to True
r = requests.get(url, stream=True)

#Open a local file for writing
localfile = open("mycopy.pdf", "wb")
chunks = 0

#Process the file as it arrives
for chunk in r.iter_content(chunk_size=512):
    if chunk:
        chunks += 1
        downloaded = chunks * 512
        # An approximation as the chunks don't have to be 512 bytes
        progress = int((downloaded/total_size)*100)
        print ("Download Progress",str(progress),"%")
        localfile.write(chunk)
print("Finished")
</code></pre>
</div>
<span class="comment-copy"><code>while answer is not 'y' or 'n':</code> doesn't do what you think it does. See <a href="//stackoverflow.com/q/15112125">How to test multiple variables against a value?</a>. I'll edit that out because it's not relevant to the question.</span>
<span class="comment-copy">It works though.</span>
<span class="comment-copy">By coincidence, yes. Actually, I just broke your code... hold on... there we go.</span>
<span class="comment-copy">You can edit my code? I was so confused lol, I went to edit it myself and it was different. I thought I clicked on a different question on accident.</span>
<span class="comment-copy">Why don't you just use the os module to check if the file exists ? Or you can use selenium webdriver too.</span>
<span class="comment-copy">So how do I implement this into my code? I need something that will change that 'downloading == True' to 'downloading == False'</span>
<span class="comment-copy">@NeverEndingCycle The point is that you don't need any of that. <i>The download is already finished.</i> Add <code>print("Download Completed.")</code> after the <code>urlretrieve(...)</code> call and you're done.</span>
