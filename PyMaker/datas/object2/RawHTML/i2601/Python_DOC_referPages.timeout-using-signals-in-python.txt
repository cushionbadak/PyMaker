<div class="post-text" itemprop="text">
<p>I'm trying to prevent my UDP client program from waiting forever in cases of a lost packet from the server. I want to use signals to implement this. My code is:</p>
<pre><code>def handler(signum):
    raise TimeoutException("Timeout occured!")

signal.signal(signal.SIGALRM, sig_alarm)
sock.sendto(data,serv)
signal.alarm(5)

try:
    received_time, servaddr = sock.recvfrom(size)
except TimeoutException:
    print "timeout"

signal.alarm(0)
</code></pre>
<p>When running this code in the instance in which the remote server is down, I get the following error:</p>
<pre><code>global name 'TimeoutException' is not defined
</code></pre>
<p>I assume the program does not "see" my handler. What may cause it?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no <code>TimeoutException</code> exception type in either the <a href="https://docs.python.org/2/library/exceptions.html" rel="nofollow noreferrer">Python 2</a> or <a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">Python 3</a> standard libraries. In Python 3.3 and newer, there is a <code>TimeoutError</code> type which is raised when an operating system call times out in the system (corresponding to <a href="http://man7.org/linux/man-pages/man3/errno.3.html" rel="nofollow noreferrer"><code>errno</code></a> being set to the <code>ETIMEDOUT</code> value). However, I do not recommend you raise this value yourself, due to its specific intent of being raised in response to timeouts returned by the operating system.</p>
<h1>Correct use of <code>signal.signal</code></h1>
<p>In your <a href="https://stackoverflow.com/questions/52135916/timeout-using-signals-in-python#comment91222908_52135916">comment</a>, after defining a custom timeout exception type, you indicate a further error arises: <code>handler() takes exactly 1 argument (2 given)</code>.</p>
<p>This occurs because your signal handler does not adhere to the definition of a signal handler function as expected by the <a href="https://docs.python.org/3/library/signal.html#signal.signal" rel="nofollow noreferrer"><code>signal</code> package</a> (those docs for Python 3, but identical to Python 2):</p>
<blockquote>
<p><code>signal.signal(signum, handler)</code></p>
<p>Set the handler for signal <em>signalnum</em> to the function <em>handler</em>... The handler is called with two arguments: the signal number and the current stack frame</p>
</blockquote>
<p>To remedy this, adjust the definition of your custom signal handler to receive the stack frame as the second argument. You need to accept this in the function call, as the standard library expects, but you don't need to do anything with the value passed in.</p>
<pre class="lang-py prettyprint-override"><code>def handler(signum, frame):
    raise TimeoutException("Timeout occurred!")
</code></pre>
<h1>Better way? Use <code>socket.settimeout</code></h1>
<p>There is built-in support in the <a href="https://docs.python.org/3/library/socket.html" rel="nofollow noreferrer"><code>socket</code> library</a> for what you are trying to accomplish: the <a href="https://docs.python.org/3/library/socket.html#socket.socket.settimeout" rel="nofollow noreferrer"><code>settimeout</code> method</a> of socket objects. I would recommend using this in your code, rather than attempting to reinvent the wheel; it declares intent while abstracting away the details of the implementation and has a built-in exception type (<code>socket.timeout</code>) you can catch to determine when timeouts occur.</p>
<p>Using this method, you would simply call <code>socket.settimeout(5)</code> on your socket prior to making blocking calls which may timeout. You can also set a default timeout on all sockets using <code>socket.setdefaulttimeout</code> before opening the first socket in the application.</p>
<hr/>
<h2>Where did <code>TimeoutException</code> come from originally?</h2>
<p>Obviously, your use of this may have originated from anywhere. However, I note there is a <a href="https://selenium-python.readthedocs.io/api.html#selenium.common.exceptions.TimeoutException" rel="nofollow noreferrer"><code>TimeoutException</code></a> in Selenium, which is a widely-used Python library used for automating browsers. It is widely used and examples/Q&amp;A associated with Selenium is common, so I would not be surprised if you had found documentation or examples which led you to believe this was an exception type present in the standard library whereas it is actually a type specific to that library. It does not appear that anything related to Selenium is applicable to your present usecase.</p>
</div>
<div class="post-text" itemprop="text">
<p>For this error : <code>global name 'TimeoutException' is not defined</code> that means u must declare your custom exception .. the simple way to do so is by adding this to your code : </p>
<p><code>class TimeoutException(Exception):
      pass</code></p>
<p>one thing to mention is that selenium has an exception named <code>TimeoutException</code> which is not an exception type present in the standard library but specific to the selenium library :  </p>
<p><code>from selenium.common.exceptions import TimeoutException</code></p>
<p>and finally you will run to an another error  ,because your signal handler must recieve the stack frame as the second argument (The handler is called with two arguments: the signal number and the current stack frame) :</p>
<p><code>def handler(signum, frame):
    raise TimeoutException("Timeout occurred!")</code></p>
<p>please read the following example from the docs <a href="https://docs.python.org/2/library/signal.html#example" rel="nofollow noreferrer">minimal example program</a></p>
</div>
<span class="comment-copy">Maybe I misunderstand something, the TimeoutException is a custom exception right? Did you declare a class for your TimeoutException? like here: <a href="https://stackoverflow.com/questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python" title="proper way to declare custom exceptions in modern python">stackoverflow.com/questions/1319615/â€¦</a></span>
<span class="comment-copy">Which version of Python are you expecting to be compatible with?</span>
