<div class="post-text" itemprop="text">
<p>While the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module makes handling C-like structures containing scalar values very simple, I don’t see how to sensibly handle structs which contain arrays.</p>
<p>For example, if I have the following C struct:</p>
<pre><code>struct my_struct {
    int a1[6];
    double a2[3];
    double d1;
    double d2;
    int i1;
    int i2;
    int a3[6];
    int i3;
};
</code></pre>
<p>and want to unpack its values and use the same variables (<code>a1</code>, <code>a2</code>, <code>a3</code>, <code>d1</code>, <code>d2</code>, <code>i1</code>, <code>i2</code>, <code>i3</code>) in Python, I run into the problem that <code>struct</code> just gives me every value in a tuple individually. All information about which values are supposed to be grouped in an array is lost:</p>
<pre><code># doesn’t work!
a1, a2, d1, d2, i1, i2, a3, i3 = struct.unpack(
    '6i3dddii6ii', b'abcdefghijklmnopqrstuvwxy' * 4
)
</code></pre>
<p>Instead, I have to slice and pull apart the tuple manually, which is a very tedious and error-prone procedure:</p>
<pre><code>t = struct.unpack('6i3dddii6ii', b'abcdefghijklmnopqrstuvwxy' * 4)
a1 = t[:6]
a2 = t[6:9]
d1, d2, i1, i2 = t[9:13]
a3 = t[13:19]
i3 = t[19]
</code></pre>
<p>Is there any better way of handling arrays with <code>struct</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://construct.readthedocs.io/en/latest" rel="nofollow noreferrer">construct library</a>, which is pretty much wraps <code>struct</code> module and makes parsing and building binary data more convenient.</p>
<p>Here is a basic example:</p>
<pre><code>import construct

my_struct = construct.Struct(
    "a1" / construct.Array(6, construct.Int32sl),
    "a2" / construct.Array(3, construct.Float64l),
    "d1" / construct.Float64l,
    "d2" / construct.Float64l,
    "i1" / construct.Int32sl,
    "i2" / construct.Int32sl,
    "a3" / construct.Array(6, construct.Int32sl),
    "i3" / construct.Int32sl
)



parsed_result = my_struct.parse(b'abcdefghijklmnopqrstuvwxy' * 4)

# now all struct attributes are available
print(parsed_result.a1)
print(parsed_result.a2)
print(parsed_result.i3)


assert 'a1' in parsed_result
assert 'i3' in parsed_result
</code></pre>
</div>
<span class="comment-copy">I guess you could use the <code>s</code> format specifier (which generates a single value) and re-unpack that value as integers/shorts/whatever. But I don't know if that qualifies as a "better" way though</span>
<span class="comment-copy">That’s too bad that there’s not a built-in way to do this.</span>
