<div class="post-text" itemprop="text">
<p>I am newbie in python programming and need your help.
I am running a python script using exec(open("./path to script/script.py").read()).
If I try to pass a argument then I always get the error the file doesnt exists, somehow the interpreter assumes that the string passed is the file name which is obviously not correct.</p>
<pre><code>&gt;&gt;&gt; exec(open("./path to script/script.py"  "hello").read())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 2] No such file or directory: './path to script/script.pyhello'
</code></pre>
<p>Anybody has any tip on how to resolve this.</p>
<p>Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you want to open a file and pass an argument as well, I'd advise you to use <code>os.system()</code> from the <code>os</code> module to achieve this as <code>exec()</code> does not provide you with that kind of functionality as you can only pass a string into it.
Example:</p>
<p><strong>Script.py:</strong></p>
<pre><code>arg = input()
print(arg)
</code></pre>
<p><strong>Call to the above Script:</strong></p>
<pre><code>import os

os.system('python3 home/pathtoscript/script.py Hello')
</code></pre>
<p>This will print the desired output for you on the terminal. But it also depends on what you  want to achieve further with it.</p>
<p><strong>Output:</strong></p>
<pre><code>Hello
</code></pre>
<p>I'd also suggest using <code>argparse</code> module for dealing with arguments as it provides great support if you are trying your hand at multiple arguments. <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer" title="Here">Here</a> is the official documentation for the same. </p>
<p>Good Luck and Happy Coding.</p>
</div>
<span class="comment-copy">Are you do really need to run scripts in such way? If so, read the documetation of <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">exec</a>. <code>exec</code> function is for running python code represented as a string not a file. With exec you can "pass" parameters to you code with <code>globals</code> and  <code>locals</code> but it is not command line arguments. I suggest you to try <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a>. Also check out this question: <a href="https://stackoverflow.com/questions/7974849/how-can-i-make-one-python-file-run-another" title="how can i make one python file run another">stackoverflow.com/questions/7974849/â€¦</a></span>
<span class="comment-copy">Just as a note: the <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">documentation of <code>os.system</code></a> discourages the use of this function in favour of the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module. Specifically, <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>subprocess.call</code></a> is <a href="https://docs.python.org/3/library/subprocess.html#replacing-os-system" rel="nofollow noreferrer">recommended as a replacement for <code>os.system</code></a></span>
<span class="comment-copy">Sure does. <code>Subprocess</code> is the thing to go for. But for a newbie, I'd suggest <code>os.system</code> as it is a simple call to something that pritns on the terminal. I majorly suggest <code>subprocess</code> if the code is complex and expects a return from the script to be executed. I know I can be wrong, but I just wanted him to have a simple way to go through this and not get discouraged while using <code>subprocess</code>, as understanding how it works sure is a tough job.</span>
<span class="comment-copy">I kind of disagree :) The fact that <code>os.system</code> only takes one argument does not make it simpler. You can use <code>subprocess.run</code> with a single string argument as well. In fact, <code>os.system</code> becomes more complicated once you go beyond simply fire &amp; forget one command. But it's your answer, so you do you. If any interested reader decides to opt for <code>os.system</code> its fine by me, I just wanted to give them the option to at least consider <code>subprocess.run</code> or <code>subprocess.call</code>, hence my comment :)</span>
<span class="comment-copy">@shmee Sir, you are absolutely correct. I'm just trying to help with the little knowledge I have, and this was the first answer that came to my mind. I'm subprocess has better calls and handles these scenarios better.</span>
<span class="comment-copy">@PythonNewbie This looks like your system has no clue which interpreter to use for your script. Either use <code>python /path/to/script.py</code> (or <code>python2</code> or <code>python3</code>) in your <code>os.system</code>, as suggested by @DevanshuMisra in the answer, or make the script executable and add a <a href="https://stackoverflow.com/a/19305076/4134674">shebang line</a> as the first line of your <code>script.py</code> file (assuming from the path you are on a Unix/Linux/Mac platform)</span>
