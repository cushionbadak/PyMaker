<div class="post-text" itemprop="text">
<p>I work for a Security MSSP and I am currently creating an script that pulls threat data from one of our vendors online console and stores the details in an SQLLite3 database for later use.</p>
<p>I have been able to query all of the threats from the console and upload them to the database but as we are dealing with over 3000 threats on our testing console, the script takes a very long time to run.</p>
<p>The basic outline of the script is as follows:</p>
<ol>
<li>Query the console API to get the total pages of threats. (They can only be queried in blocks of 200)</li>
<li>Loop through the pages and get all of the threat hashes on each page and store these in a list.</li>
<li>Loop through this list and use the API to query each hash to obtain the full details of the threat and store them into the SQL database.</li>
</ol>
<p>I am now facing a problem as I am attempting to optimize the script so that it runs quicker on successive runs.</p>
<p>I have attempted to implement a function, which queries the SQL database and pulls all of the currently stored hashes and adds them to a list, I then want to compare this list with the API list. If the hash appears in the SQL list, skip querying the API for this hash.</p>
<p>The problem I am having is when I attempt to compare the lists, every hash appears as if its not found in the SQL list, thus adding it to the final hash list, which is used to upload to the DB.</p>
<p>Function that queries the DB:</p>
<pre><code>def get_sql_threats():
sql_threats = []
c.execute("SELECT sha256 from threats")
r = c.fetchall()
for result in r:
    sql_threats.append(result)
return sql_threats
</code></pre>
<p>Function that get the threats and compares the lists:</p>
<pre><code>def get_threat_hashes():
page_num = 1
total_pages = get_total_pages()
temp_list = []
threat_hashes = []   
sql_threats = get_sql_threats() 
while page_num &lt;= total_pages:
    threat_list = get_threats(page_num)
    for y in threat_list:
        hash = y['sha256']
        temp_list.append(hash)
    for x in temp_list: 
        if x in sql_threats:
            print "skipping"
        elif x not in sql_threats:
            threat_hashes.append(x)
            print "Adding " + x

    page_num += 1
return threat_hashes
</code></pre>
<p>Can anybody see any problems with these functions?
Apologies for the wall of text but I wanted to provide as much information as possible.</p>
<p>Any help would be very much appreciated.</p>
<p>Thanks,
Craig</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>set</code>s and <code>set</code>-difference instead of creating lists and manually append them if/if not:</p>
<pre><code>threatsFromAPI = set(range(10))  # populate from API

sqlThreats = set(range(3,10,2))  # populate from Server: sqlThreats = set(c.fetchall())

getFromThreadApi = threatsFromAPI - sqlThreats  # calculate diff between API and Sql

print("In API: ", threatsFromAPI)
print("In SQL: ", sqlThreats)    
print("Get new ones: ", getFromThreadApi)
</code></pre>
<p>Output:</p>
<pre><code>In API:  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} 
In SQL:  {9, 3, 5, 7} 
Get new ones:  {0, 1, 2, 4, 6, 8}
</code></pre>
<p>Doku <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set()</a> &amp;&amp; <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">set() class</a>. There is also the immutable <code>frozenset()</code> which could be used if you can fill it in one go (you page through, so probably not).</p>
</div>
<span class="comment-copy">Thank you for this, it really helps. I have implemented it into a testing scenario and it does provide the functionality I need. I need to work on converting the results as the difference seems to be a bit off from what I would expect but this has definitely got me on the right track.</span>
