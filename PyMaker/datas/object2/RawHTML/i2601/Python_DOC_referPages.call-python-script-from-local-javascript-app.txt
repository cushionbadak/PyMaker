<div class="post-text" itemprop="text">
<p>so I've looked around quite a bit now and wasn't able to find quite the use case I think I am confronted with.</p>
<p>For some background:
I'm fairly new to JavaScript and have never had to call any other program/script from it. Now I did develop a Python script that pulls some data from online sources, formats it and dumps it into JSON files. In order to display this data in a proper way I figured I would use Electron.</p>
<p>While handling the JSON files is completely fine (would be quite sad if it wasn't I guess), I need to be able to call the Python script updating the data from my Electron UI. As everything is local, I hoped, that there would be an easier way, than setting up some server for the Python script to run on, just to be able to trigger its execution from my Desktop App. This is especially true, as I don't even need to get or process any returns, I just want to trigger the execution of that script.</p>
<p>So the question now is: is there such an "easy" way to execute Python scripts from an Electron/JavaScript based locally saved Desktop app?</p>
<p>Thanks in advance for any answers!</p>
</div>
<div class="post-text" itemprop="text">
<p>Like a previous commenter mentioned, you should be able to follow <a href="https://stackoverflow.com/questions/23450534/how-to-call-a-python-function-from-node-js">this SO answer</a> in Node.js (which is what Electron uses).</p>
<p>To expound upon that answer just a bit, I'd recommend using the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">built-in Python JSON utility</a> to dump JSON to the standard out (just printing out the JSON string), and the using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" rel="nofollow noreferrer">built-in Node.js JSON utility</a> to parse that JSON string into a javascript object for use in your application.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alright, so after being redirected to <a href="https://stackoverflow.com/questions/23450534/how-to-call-a-python-function-from-node-js">this thread</a>, which I can only recommend reading through if you have an interest in this issue, I took their solution and altered a little, which took me a bit of time, due to some confusion, which I now would like to spare you guys!</p>
<p>To re-introduce the issue: The goal is to call a python script from a JavaScipt/Electron based UI. The python script only needs to be executed, but it needs to happen onClick, as it is an update function.</p>
<p>Now this is the code I used:</p>
<pre><code>const exec = require("child_process").exec;

function triggerUpdateAndRefreshFooter() {
  exec('python relativePathToScript/update.py',
    function(error, stdout, stderr) {                    //callback function, receives script output
      refreshFooter();                                  //don't use the output, but I could here
    }
  )
}
</code></pre>
<p>I did have some issues figuring out all of that const stuff in the other thread, as well as having to guess IF I could just execute my script in a separate function. In the end this did work!</p>
<p>I hope this was helpful!</p>
</div>
<span class="comment-copy">Good question. It may be a duplicate of <a href="https://stackoverflow.com/questions/23450534/how-to-call-a-python-function-from-node-js">this</a> question on stackoverflow though since electron uses Node.js. Hopefully the answers there help.</span>
<span class="comment-copy">Thanks, this thread was quite useful. I did it in a slightly different way than detailed there and will outline that in an answer, for others to see.</span>
<span class="comment-copy">Thanks for the answer! The linked thread was very useful, although I did alter their solution a bit, which I will detail in an answer to this thread here.  Your recommendation is really nice, and I could solve my issue this way a bit faster and more performant (less file operations...), but I actually want to have the data in a JSON file anyways, so I can just dump it into the file, rather than the stdout.</span>
