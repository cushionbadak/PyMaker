<div class="post-text" itemprop="text">
<p>I wrote a code that eliminates duplicates from a list in Python. Here it is:</p>
<pre><code>List = [4, 2, 3, 1, 7, 4, 5, 6, 5]
NewList = []

for i in List:
    if List[i] not in NewList:
        NewList.append(i)

print ("Original List:", List)
print ("Reworked List:", NewList)
</code></pre>
<p>However the output is:</p>
<pre><code>Original List: [4, 2, 3, 1, 7, 4, 5, 6, 5]
Reworked List: [4, 2, 3, 7, 6]
</code></pre>
<p>Why is the <code>1</code> missing from the output?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>set()</code> kills the order. You can try this : </p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; NewList = list(OrderedDict.fromkeys(List))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You missunderstood how for loops in python work. If you write <code>for i in List:</code> i will have the values from the list one after another, so in your case 4, 2, 3 ... </p>
<p>I assume you thought it'd be counting up. </p>
<p>You have several different ways of removing duplicates from lists in python that you don't need to write yourself, like converting it to a set and back to a list. </p>
<pre><code>list(set(List))
</code></pre>
<p>Also you should read Pep8 and name your variables differently, but that just btw. </p>
<p>Also if you really want a loop with indices, you can use enumerate in python.</p>
<pre><code>for idx, value in enumerate(myList):
    print(idx)
    print(myList[idx])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is not doing what you think it does. Your problem are these two constructs:</p>
<pre><code>for i in List:  # 1
    if List[i]  # 2
</code></pre>
<ol>
<li>Here you are using <code>i</code> to represent the <em>elements</em> inside the list: 4, 2, 3, ...</li>
<li>Here you are using <code>i</code> to represent the <em>indices</em> of the List: 0, 1, 2, ...</li>
</ol>
<p>Obviously, 1. and 2. are not compatible. In short, your check is performed for a different element than the one you put in your list.</p>
<p>You can fix this by treating <code>i</code> consistently at both steps:</p>
<pre><code>for i in List:
    if i not in NewList:
         NewList.append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your method for iterating over lists is not correct. Your code currently iterates over elements, but then <em>does not use</em> that element in your logic. Your code doesn't error because the values of your list happen also to be valid list indices.</p>
<p>You have a few options:</p>
<h3>#1 Iterate over elements directly</h3>
<p>Use elements of a list as you iterate over them directly:</p>
<pre><code>NewList = []
for el in L:
    if el not in NewList:
        NewList.append(i)
</code></pre>
<h3>#2 Iterate over list index</h3>
<p>This is often considered anti-pattern, but is not invalid. You can iterate over the range of the size of the list and then use list indexing:</p>
<pre><code>NewList = []
for idx in range(len(L)):
    if L[idx] not in NewList:
        NewList.append(i)
</code></pre>
<p>In both cases, notice how we avoid naming variables after built-ins. Don't use <code>list</code> or <code>List</code>, you can use <code>L</code> instead.</p>
<h3>#3 unique_everseen</h3>
<p>It's more efficient to implement hashing for O(1) lookup complexity. There is a <code>unique_everseen</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">recipe</a> in the <code>itertools</code> docs, replicated in 3rd party <a href="https://toolz.readthedocs.io/en/latest/api.html#toolz.itertoolz.unique" rel="nofollow noreferrer"><code>toolz.unique</code></a>. This works by using a <code>seen</code> set and tracking items as you iterate.</p>
<pre><code>from toolz import unique

NewList = list(unique(L))
</code></pre>
</div>
<span class="comment-copy">better to use <code>set()</code> for deduplication</span>
<span class="comment-copy">Try printing <code>i</code> and <code>List[i]</code> inside your loop and see if you understand what is happening.</span>
<span class="comment-copy">Why are yo doing <code>List[i]</code> when <code>i</code> is your element, not index?</span>
<span class="comment-copy"><code>if i not in NewList:</code></span>
<span class="comment-copy">the problem is that you loop through the items in your list, which makes i first 4, then 2, then 3, but you check if the list on index 4, 2, 3 is in your list. this overcomplicates things and eventually leads to removal of 1!</span>
<span class="comment-copy">won't work for non-hashable objects though</span>
