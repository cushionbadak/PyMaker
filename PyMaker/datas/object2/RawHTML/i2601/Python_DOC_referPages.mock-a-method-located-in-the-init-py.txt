<div class="post-text" itemprop="text">
<p>I would like to mock a method which is in the <strong>init</strong>.py, but actually it is not working. </p>
<p>There is an example to demonstrate the issue and how I tried to write the unit test:</p>
<p>The code under test: src.main.myfile:</p>
<pre><code>from src.main.utils import a_plus_b

def method_under_test():
    a_plus_b()
</code></pre>
<p>The a_plus_b is in the __init__.py in the src.main.utils module:</p>
<pre><code>def a_plus_b():
    print("a + b")
</code></pre>
<p>The unittest:</p>
<pre><code>import src.main.utils
import unittest
from mock import patch
from src.main.myfile import method_under_test

class my_Test(unittest.TestCase):
    def a_plus_b_side_effect():
       print("a_plus_b_side_effect")

    @patch.object(utils, 'a_plus_b')
    def test(self, mock_a_plus_b):
        mock_a_plus_b.side_effect = self.a_plus_b_side_effect
        method_under_test()
</code></pre>
<p>The unit test prints the "a + b", and not the side effect. Could anyone help me out what I did wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The name you need to patch isn't <code>src.main.utils.a_plus_b</code>, but <code>src.main.myfile.a_plus_b</code>, since that is what <code>method_under_test</code> uses.</p>
<pre><code>@patch('src.main.myfile.a_plus_b')
def test(self, mock_a_plus_b):
    mock_a_plus_b.side_effect = self.a_plus_b_side_effect
    method_under_test()
</code></pre>
</div>
<span class="comment-copy">I was wondering why the method <code>src.main.utils.a_plus_b</code> could not be mocked. I allways patched the original methods, not the imported objects. Do you know any reason why can't I mock the <code>src.main.utils.a_plus_b</code>.  the other option for testing a_plus_b, if the method is passed as a keyword argument.  ` def method_under_test(_a_plus_b=a_plus_b):     _a_plus_b() `</span>
<span class="comment-copy">If the code under test had simply used <code>import src.main.utils</code>, then called <code>src.main.utils.a_plus_b</code>, then the fully qualified name would be the correct thing to patch. See <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html#where-to-patch</a>.</span>
