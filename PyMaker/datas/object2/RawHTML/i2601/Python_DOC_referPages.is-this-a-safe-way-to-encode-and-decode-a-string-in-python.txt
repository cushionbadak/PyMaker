<div class="post-text" itemprop="text">
<p>I created a VERY simple password manager--not GUI. Basically my Python program generates a string of characters and I encode that password and then store the encoded form into an encrypted txt file. Now the catch is that I can take that encoded form and put it into my python program and it returns the original password. How safe is this? Also for whatever reason after encoding the password this is added to the password: “b’&lt;--Password here--&gt;’.” Now I am asking how difficult it would be for a malicious hacker to take the encoded form of the original password and get the original.</p>
<p>Here is my encoding code:</p>
<pre><code>byte_pass = str.encode(password)
encoded = base64.b64encode(byte_pass)
</code></pre>
<p>Now all I have to do to return the original password is make the following:</p>
<pre><code>base64.b64decode(old_pass)
</code></pre>
<p>And if this is not safe how can I encrypt a string using a specific keyword--almost like a master password.</p>
<p>Thank you!</p>
<p>Note** Below are some examples of the before encoding and after:</p>
<pre><code># Generated Password    
2]+C!)5R@hwp\zebDjOlx&amp;xL}cRq”`n

# Encoded form of password above
b'Ml0rQyEpNVJAaHdwXHplYkRqT2x4JnhMfWNSceKAnWBu'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>And if this is not safe how can I encrypt a string using a specific keyword--almost like a master password.</p>
</blockquote>
<p>Below snippet extracted from Python's <a href="https://docs.python.org/3/library/hashlib.html#hash-algorithms" rel="nofollow noreferrer">hashlib</a>.</p>
<pre><code>from hashlib import blake2b
from hmac import compare_digest

SECRET_KEY = b'pseudorandomly generated server secret key'
AUTH_SIZE = 16 

def sign(cookie):
    h = blake2b(digest_size=AUTH_SIZE, key=SECRET_KEY)
    h.update(cookie)
    return h.hexdigest().encode('utf-8')

def verify(cookie, sig):
    good_sig = sign(cookie)
    return compare_digest(good_sig, sig)

cookie = b'user-alice'
sig = sign(cookie)
print("{0},{1}".format(cookie.decode('utf-8'), sig))

verify(cookie, sig)

verify(b'user-bob', sig)

verify(cookie, b'0102030405060708090a0b0c0d0e0f00')
</code></pre>
<p>Is this what you are looking for?</p>
</div>
<span class="comment-copy">FYI, it's not hashed, it's encoded.</span>
<span class="comment-copy">it's safe until somebody read your code and figure out how to decrypt any password generated by it.</span>
<span class="comment-copy">No. It's not safe.  Use salted, hashed passwords.</span>
<span class="comment-copy">Is there a way, then, to HASH and SALT a password and then get the original form back? Using SHA_256 Encryption?</span>
<span class="comment-copy">More specifically can I get the original form from this hash:                          hash_new = pbkdf2_sha256.hash(new_password)</span>
<span class="comment-copy">Oh okay that makes much more sense as to where the “b’  ‘“ came from. Thank you.</span>
<span class="comment-copy">b' ' is to denote that anything it contains is of byte type, not a string type. So if you need a string you need to convert it back.</span>
