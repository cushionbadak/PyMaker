<div class="post-text" itemprop="text">
<p>Below is the code</p>
<pre><code>import os

class ABC:
    def test(self,name):
        var = 5
        var2 = 10
        dic = {"Ada": "adada"}
        print "asdfdsadv"
        var1 = "Ada"
        var2 = "asada"

obj = ABC()
print obj.test("Ada").var1
</code></pre>
<p>I am looking for something like this. Can I achieve this in python</p>
<p>I know this is var variable in local to class. Is there someway by using global or something else to acheive this</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this would work. The <strong>init</strong>(self) behave like a constructor in other languages. So in effect I am constructing a class in a class, to make your last line work properly. But like other suggested that is not the way Python is supposed to be used.</p>
<pre><code>import os

class ABC(object):
    def __init__(self):
        pass

    class test(object):
        def __init__(self,name):
            self.var = 5
            self.var2 = 10
            self.dic = {"Ada": "adada"}
            print ("asdfdsadv")
            self.var1 = "Ada"
            self.var2 = "asada"

if __name__ == "__main__":
    obj = ABC()
    print (obj.test("Ada").var1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Forget about classes and consider functions in general.</p>
<p>When you define a function, any variables within its scope are <em>local</em> and only accessible from within the execution of that function. Once execution has finished, that's it, they are gone. This is fundamental; the only way of getting data from a function is by <code>return</code>ing it.</p>
<hr/>
<p>Although it is a hack, you could return <code>locals()</code> (a dictionary of local variables), but this is terrible practice.</p>
<pre><code>import os

class ABC:
    def test(self,name):
        var = 5
        var2 = 10
        dic = {"Ada": "adada"}
        print "asdfdsadv"
        var1 = "Ada"
        var2 = "asada"
        return locals()

obj = ABC()
print obj.test("Ada")["var1"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Accessing a variable from a class method is not possible, you have to set the variable at the class level like this:</p>
<pre><code>import os

class ABC:
    def test(self,name):
        var = 5
        var2 = 10
        dic = {"Ada": "adada"}
        print "asdfdsadv"
        self.var1 = "Ada"
        var2 = "asada"

obj = ABC()
obj.test('Ada')
print obj.var1
</code></pre>
<p>You could chain obj.test('Ada').var1 in the same line by returning self into your test method.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are looking for are the <code>class variable</code>, usually defined as <code>self.variable</code>. Here an example of your code:</p>
<pre><code>import os

class ABC:
    def __init__(self):
        self.var = 5
        self.var2 = 10
        self.dic = {"Ada": "adada"}
        self.var1 = "Ada"
    def test(self,name):
        print self.var
        print self.var2
        print self.var1 + " " + name

obj = ABC()
print obj.dic # {'Ada': 'adada'}
print obj.dic["Ada"] # adada
obj.test("wow") # 5, 10, Ada wow
obj.var1 = "Ede"
obj.test("wow") # 5, 10, Ede wow
</code></pre>
<p>but as suggested in other answers, you may want to take a step back and check what is the <a href="https://matthew-brett.github.io/teaching/global_scope.html" rel="nofollow noreferrer">scope</a> of python variables</p>
</div>
<div class="post-text" itemprop="text">
<p>If you return the object itself from the function and the variables are not local but instance variables it works.</p>
<pre><code>class ABC:
    def test(self, name):
        self.var1 = "My name is {}".format(name)
        return self

obj = ABC()
print obj.test('Ada').var1
</code></pre>
</div>
<span class="comment-copy">you need have a return function and call it; you can't call directly a variable</span>
<span class="comment-copy">That would be a poor design. I have a feeling you have an XY problem</span>
<span class="comment-copy">I suggest you to have a look on classes from <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">this</a> official python docs</span>
<span class="comment-copy">No, that is a local variable.</span>
<span class="comment-copy">Why negative marking for this question. I failed to understand sometimes. Negative marking should be done when the question is not clear. I have seen the pattern people giving negative rating just because they dont know the answer.</span>
<span class="comment-copy">That wasn't what the OP asked. <code>print</code> does not return the attribute</span>
<span class="comment-copy">I am not completely sure that the OP has the knowledge tu fully identify what he exactly need, so supposing an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a> I gave the answer that I think will mostly help him. Plus, if you read the answer, you'll notice that the metod <code>.test</code> is here only as an example, meanwhile the part that <i>returns the attribute</i> is <code>obj.dic["Ada"]</code>; the rest is to provide a fast introduction to <i>class variables</i></span>
