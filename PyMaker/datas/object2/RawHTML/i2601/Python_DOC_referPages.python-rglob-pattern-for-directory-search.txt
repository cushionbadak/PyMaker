<div class="post-text" itemprop="text">
<p>I try to get the name of subdirectories with Python3 script on Windows10.
Thus, I wrote code as follows:</p>
<pre><code>from pathlib2 import Path
p = "./path/to/target/dir"
[str(item) for item in Path(p).rglob(".")]
# obtained only subdirectories path names including target directory itself.
</code></pre>
<p>It is good for me to get this result, but I don't know why the pattern of rglob argument returns this reuslt.</p>
<p>Can someone explain this?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Every directory in a posix-style filesystem features two files from the get go: <code>..</code>, which refers to the parent directory, and <code>.</code>, which refers to the current directory:</p>
<pre><code>$ mkdir tmp; cd tmp
tmp$ ls -a
. ..
tmp$ cd .
tmp$  # &lt;-- still in the same directory
</code></pre>
<p>- with the notable exception of <code>/..</code>, which refers to the root itself since the root has not parent.</p>
<p>A <code>Path</code> object from python's <code>pathlib</code> is, when it is created, just a wrapper around a string that is assumed to point somewhere into the filesystem. It will only refer to something tangible when it is <em>resolved</em>:</p>
<pre><code>&gt;&gt;&gt; Path('.')
PosixPath('.')  # just a fancy string
&gt;&gt;&gt; Path('.').resolve()
PosixPath('/current/working/dir')  # an actual point in your filesystem
</code></pre>
<hr/>
<p>The bottom line is that</p>
<ul>
<li>the paths <code>/current/working/dir</code> and <code>/current/working/dir/.</code> are, from the filesystem's point of view, completely equivalent, and</li>
<li>a <code>pathlib.Path</code> will also reflect that as soon as it is resolved.</li>
</ul>
<p>By matching the <code>glob</code> call to <code>.</code>, you found all links pointing to the current directories below the initial directory. The results from <code>glob</code> get resolved on return, so the <code>.</code> doesn't appear in there any more.</p>
<p>As a source for this behavior, see <a href="https://www.python.org/dev/peps/pep-0428/#construction" rel="nofollow noreferrer">this section</a> of PEP428 (which serves as the specification for <code>pathlib</code>), where it briefly mentions path equivalence.</p>
</div>
<span class="comment-copy">Do you know what "glob" means, or what exactly is confusing about this result? <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob" rel="nofollow noreferrer">The python docs</a> explain the difference between <code>glob</code> and <code>rglob</code>, and <a href="https://en.wikipedia.org/wiki/Glob_(programming)" rel="nofollow noreferrer">wikipedia</a> explains glob patterns in general.</span>
<span class="comment-copy">Yes, I mean the latter of your comment, confused about this result. Though I usually use this method with wildcard, in this case, this pattern, in shortly, without wild and only one dot shows only directory path objects. What does the one-dot pattern (“.”) mean for glob?</span>
<span class="comment-copy">Ah, I think I know what you mean. I'll try to write an answer.</span>
<span class="comment-copy">Thank you very much!</span>
<span class="comment-copy">Thank you for your kind answer. I know <code>ls -a</code> command shows one and two dots, of course other files or directories, but I've never thought that much. Thank you for your time!</span>
<span class="comment-copy">You're welcome, happy to help!</span>
