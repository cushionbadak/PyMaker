<div class="post-text" itemprop="text">
<p>I am debugging a program named <code>a.py</code> using pdb</p>
<pre><code>def f(x) :
    x / x

def g(x) :
    try :
        f(x)
    except Exception as e :
        assert 0

g(0)
</code></pre>
<p>When I run the program using <code>python3 -m pdb a.py</code>, the program stops at <code>assert 0</code> line, and I get the following error information:</p>
<pre><code>Traceback (most recent call last):
  File "/tmp/a.py", line 6, in g
    f(x)
  File "/tmp/a.py", line 2, in f
    x / x
ZeroDivisionError: division by zero

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib64/python3.6/pdb.py", line 1667, in main
    pdb._runscript(mainpyfile)
  File "/usr/lib64/python3.6/pdb.py", line 1548, in _runscript
    self.run(statement)
  File "/usr/lib64/python3.6/bdb.py", line 434, in run
    exec(cmd, globals, locals)
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/tmp/a.py", line 11, in &lt;module&gt;
    g(0)
  File "/tmp/a.py", line 9, in g
    assert 0
AssertionError
</code></pre>
<p>and the stack is (shown using <code>bt</code> command):</p>
<pre><code>(Pdb) bt
  /usr/lib64/python3.6/pdb.py(1667)main()
-&gt; pdb._runscript(mainpyfile)
  /usr/lib64/python3.6/pdb.py(1548)_runscript()
-&gt; self.run(statement)
  /usr/lib64/python3.6/bdb.py(434)run()
-&gt; exec(cmd, globals, locals)
  &lt;string&gt;(1)&lt;module&gt;()-&gt;None
  /tmp/a.py(11)&lt;module&gt;()-&gt;None
-&gt; g(0)
&gt; /tmp/a.py(9)g()
-&gt; assert 0
(Pdb) 
</code></pre>
<p>The problem is, I cannot go to function f to debug <code>x / x</code> simply using <code>up</code> and <code>down</code>, because my stack ends at the g function. </p>
<p>How should I debug such exceptions within exceptions? What about exceptions within exceptions within exceptions ...?</p>
</div>
<div class="post-text" itemprop="text">
<p>As I see it, you have a few options then. You can either move your <code>try-except</code> into <code>f(x)</code>, print a descriptive error in your <code>g()</code> <code>try-except</code> and drop into pdb, or re-raise your exception after logging your friendly error message. I'm not a fan of relying on uncaught exceptions to debug (option 3), so here's what option 1 and 2 look like:</p>
<pre><code>'''Option 1'''
def f(x) :
    try:
        x / x
    except Exception as e:
        print('An error occurred, entering pdb shell')
        import pdb; pdb.set_trace()

def g(x) :
    f(x)

g(0)
</code></pre>
<p>Output:</p>
<pre><code>$ python throw.py 
An error occurred, entering pdb shell
--Return--
&gt; /home/wholevinski/so_test/throw.py(6)f()-&gt;None
-&gt; import pdb; pdb.set_trace()
(Pdb) x
0
</code></pre>
<p>or:</p>
<pre><code>'''Option 2'''
def f(x):
    x / x

def g(x):
    try:
        f(x)
    except Exception as e:
        print('f({}) raised with error "{}". Entering pdb shell.'.format(x, str(e)))
        import pdb; pdb.set_trace()

g(0)
</code></pre>
<p>Output:</p>
<pre><code>$ python throw.py 
f(0) raised with error division by zero. Entering pdb shell.
--Return--
&gt; /home/wholevinski/so_test/throw.py(9)g()-&gt;None
-&gt; import pdb; pdb.set_trace()
(Pdb) x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually re-raising the exception (option 3 in <a href="https://stackoverflow.com/users/769971/wholevinski">
wholevinski</a>'s <a href="https://stackoverflow.com/a/52095739/7709727">answer</a>) solves my problem, since it does not require me to modify function f. 
Here is the code:</p>
<pre><code>'''Option 3'''
def f(x) :
    x -= 1
    x / x

def g(x) :
    try :
        for i in range(x, 0, -1) :
            print(f(i))
    except Exception as e :
        raise e

g(10)
</code></pre>
<p>Pdb output of the stack:</p>
<pre><code>(Pdb) bt
  /usr/lib64/python3.6/pdb.py(1667)main()
-&gt; pdb._runscript(mainpyfile)
  /usr/lib64/python3.6/pdb.py(1548)_runscript()
-&gt; self.run(statement)
  /usr/lib64/python3.6/bdb.py(434)run()
-&gt; exec(cmd, globals, locals)
  &lt;string&gt;(1)&lt;module&gt;()-&gt;None
  /tmp/a.py(13)&lt;module&gt;()-&gt;None
-&gt; g(10)
  /tmp/a.py(11)g()
-&gt; raise e
  /tmp/a.py(9)g()
-&gt; print(f(i))
&gt; /tmp/a.py(4)f()
-&gt; x / x
(Pdb) 
</code></pre>
</div>
<span class="comment-copy">So, your <code>assert 0</code> is at the same call depth as <code>f(0)</code> which is why you can't jump back into it and debug it. Your <code>except</code> is catching the error raised by <code>f(0)</code> and then <code>pdb</code> is breaking on the <code>AssertionError</code> because it's uncaught. What's your end goal exactly? If you're trying to debug any uncaught exceptions with <code>pdb</code>, you've already caught the one being raised by <code>f(0)</code> so you're not going to be able to. You can place a <code>pdb.set_trace()</code> in your except block and inspect the raised exception though, or you can re-raise the exception in the <code>except</code> block.</span>
<span class="comment-copy">In my real program, <code>x / x</code> is the annoying part that I want to debug (e.g. I want to see the value of x using pdb), but I need try &amp; except in <code>g(x)</code> to print an user friendly message which shows that an error occurred (but not fixing the error). Thus, I have to use <code>pdb</code> to debug an <b>caught</b> error. Can you explain more on the <code>pdb.set_trace()</code> part? Providing an example will be appreciated.</span>
<span class="comment-copy">pdb.set_trace() allow you to set a breakpoint where you want in the code, if you put it before the x / x and run it, program will stop and you will be able to inspect all variable at this point. <a href="https://docs.python.org/3/library/pdb.html#pdb.set_trace" rel="nofollow noreferrer">docs.python.org/3/library/pdb.html#pdb.set_trace</a></span>
<span class="comment-copy">Putting pdb.set_trace() directly before <code>x / x</code> does not solve my problem. Suppose that function g calls <code>f(1000), f(999), f(998), ..., f(0)</code>, then I would have to debug one thousand times before finding the real error (if I do not know which value of x causes the error)</span>
<span class="comment-copy">Welp, good on you for proving out option 3 and going with it! Glad it worked out.</span>
