<div class="post-text" itemprop="text">
<p>I am scraping tweets from Twitter and saving the text data in a csv file (which is saving as bytes literal b). When looking through the data I have lots of unicode characters like (<code>\xe2\x80\x9c</code>). Is it possible to write a script that can go through the csv and decode all the unicode, or do I have to decode it as I download the messages? If it's possible to go through the csv and decode unicode how do I go about that?</p>
<p>Here's an example of the data:</p>
<pre><code>b'\xe2\x80\x9cSwitching Gears: Binance Phishing Scammers Pivot to EOS Airdrop Phishing Scam\xe2\x80\x9d by @satnam '
b'Go SMB! \xf0\x9f\x92\x95\xf0\x9f\x8d\xba'
b'@boogymaboi @SMB_DBN Trousers are too sick \xf0\x9f\x98\xa4'
</code></pre>
<p>EDIT: 
The text entries in the csv file appear as shown above when looking through the csv file itself, when printing them out it shows they are strings and show the same as above but in "b'\xe2\x80\x9cSwitching Gears: Binance Phishing Scammers Pivot to EOS". When creating the file I appended entries to an existing csv and wrote using x.writerow(text)</p>
<p>I am opening my file containing the strings, and then decoding and writing it into another file using the code below.</p>
<pre><code>with open('my.csv', 'wb') as file:

    with open('sec_tweet_dataset.csv') as f:
        for a in f:
            a = a.decode()
            data = a.rstrip()
            file.write(data)
            file.write('\n')
</code></pre>
<p>Ive tried various forms of this but none of them are able to show the string correctly.</p>
</div>
<div class="post-text" itemprop="text">
<p>To decode a <code>bytes</code> object into a string, use it's <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>decode</code></a> method:</p>
<pre><code>b'\xe2\x80\x9cSwitching Gears: Binance Phishing Scammers Pivot to EOS Airdrop Phishing Scam\xe2\x80\x9d by @satnam '.decode('utf-8')
b'Go SMB! \xf0\x9f\x92\x95\xf0\x9f\x8d\xba'.decode('utf-8')
b'@boogymaboi @SMB_DBN Trousers are too sick \xf0\x9f\x98\xa4'.decode('utf-8')
</code></pre>
<p>Alternatively, you can write the file in binary and read it back in as normal UTF-8 text:</p>
<pre><code>with open('my.csv', 'wb') as f:
    f.write(b'\xe2\x80\x9cSwitching Gears: Binance Phishing Scammers Pivot to EOS Airdrop Phishing Scam\xe2\x80\x9d by @satnam ')
    f.write(b'\n')
    f.write(b'Go SMB! \xf0\x9f\x92\x95\xf0\x9f\x8d\xba')
    f.write(b'\n')
    f.write(b'@boogymaboi @SMB_DBN Trousers are too sick \xf0\x9f\x98\xa4')

with open('my.csv') as f:
    data = [s.rstrip() for a in f]
</code></pre>
<p>Either way your three strings decode to</p>
<blockquote>
<p>‚ÄúSwitching Gears: Binance Phishing Scammers Pivot to EOS Airdrop Phishing Scam‚Äù by @satnam</p>
<p>Go SMB! üíïüç∫</p>
<p>@boogymaboi @SMB_DBN Trousers are too sick üò§</p>
</blockquote>
<p>The key is that your data comes in already in Unicode. You just have to tell python that. Both <code>decode</code> and the write/read do that. The former just reinterprets the bytes as UTF-8 encoding directly in memory. The latter writes the data literally to a file, then interprets it as UTF-8 when the file is read.</p>
<p>Just make sure that the <code>b</code> is in your file mode when you write it. Otherwise, the objects you write will end up getting converted to string using <code>str</code> instead of getting decoded properly, which is how you end up with a file containing a bunch of literal <code>b</code>s and escape characters.</p>
</div>
<span class="comment-copy">Yes it's possible. You can just open the file as text instead of binary.</span>
<span class="comment-copy">What encoding is your text in?</span>
<span class="comment-copy">Show how you save the file please.</span>
<span class="comment-copy">Is the sample data what you see in the file, or a printout of what you have in memory?</span>
<span class="comment-copy">Your edit doesn't help much, unfortunately. Please show actual code for at least A) how you open the file and B) how you write it. My answer contains all the information you need, but I can't tell you how to apply it (and you don't seem to be figuring it out yourself) without that information.</span>
<span class="comment-copy">Thank you for the comment, ive been trying to do this but it seems its saved in the csv as a string. So I have been trying to read the entry turn it into byte using a.encode() and then continue with rstrip but this doesnt seem to be working.</span>
<span class="comment-copy">Please respond to the comments I left under the question by editing the question itself. You haven't posted any actual code, which makes it very difficult to diagnose your issue.</span>
