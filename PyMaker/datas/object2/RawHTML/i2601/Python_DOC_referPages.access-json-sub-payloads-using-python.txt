<div class="post-text" itemprop="text">
<p>I have a class like that:</p>
<pre><code>class Payload(object):
   def __init__(self, payload__):
       self.__dict__ = json.loads(payload__)
</code></pre>
<p>I can read the JSON payloads like that:</p>
<pre><code>json = Payload('{"Test1":"Test2","Test3":{"Test4":true}}')
</code></pre>
<p>So I can access the value of <code>Test</code> like that:</p>
<pre><code>print(json.Test1) # result: Test2
</code></pre>
<p>but I can't access the value of <code>Test4</code> which is a sub of <code>Test3</code></p>
<pre><code>print(json.Test3.Test4) #result: AttributeError: 'dict' object has no attribute 'Test4'
</code></pre>
<p>So, the error is <code>AttributeError: 'dict' object has no attribute 'Test4'</code></p>
<p>Any help would be appreciated.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I've solved it!</p>
<p>Thanks to @Stack for linking to <a href="https://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute">Accessing dict keys like an attribute?</a> which had 2 different methods to solve my problem:</p>
<ol>
<li>Using <code>json.Test3['Test4']</code></li>
<li><p>Using the class:</p>
<pre><code>class AttributeDict(dict):
    def __getattr__(self, attr):
        return self[attr]
    def __setattr__(self, attr, value):
        self[attr] = value
</code></pre></li>
</ol>
<p>By the way, I find that the first method is more easier.</p>
<p>I can now access the value of <code>Test4</code> like that:</p>
<pre><code>print(json.Test3['Test4'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try using :</p>
<pre><code>print(json["Test3"]["Test4"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your are not disturbed by using the dict notation (using square brackets) instead of the dotted notation, you could simply avoid usage of the Payload class and access every data in you dict this way:</p>
<pre><code>payload = json.loads('{"Test1":"Test2","Test3":{"Test4":true}}')
print(payload['Test1'])  # "Test2
print(payload['Test3']['Test4']) # "True
</code></pre>
<hr/>
<p>But if you want to access every data using the dotted notation, you can use the <code>AttrDict</code> class from <a href="https://stackoverflow.com/a/14620633/2696355">this answer</a> and provide it to <a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow noreferrer">the <code>object_hook</code> parameter of the <code>json.loads</code> method</a>. This make the <code>json</code> module use the provided class instead of <code>dict</code> to map JSON objects to Python objects:</p>
<pre><code>import json


class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self


payload = json.loads(
    '{'
    '  "key_1": "pouet",'
    '  "key_2": {'
    '    "key_21": true,'
    '    "key_22": {'
    '      "key_221": "toto"'
    '    }'
    '  }'
    '}',
    object_hook=AttrDict)


print(payload.key_1)  # "pouet"
print(payload.key_2.key_21)  # True
print(payload.key_2.key_22.key_221) # "toto"
</code></pre>
<p>Note that again, the Payload class is useless.</p>
</div>
<span class="comment-copy">check this <a href="https://stackoverflow.com/q/4984647/8150371">stackoverflow.com/q/4984647/8150371</a></span>
<span class="comment-copy">@Stack - so I can access it like <code>print(json.Test3['Test4'])</code> ?</span>
<span class="comment-copy">yes you can do that also</span>
<span class="comment-copy">Although this code might solve the problem, a good answer requires an explanation how the problem is solved.</span>
