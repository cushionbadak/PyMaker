<div class="post-text" itemprop="text">
<pre><code>import os
from datetime import datetime, date
import datetime
test={datetime.date(1977, 6, 5): [81, 55, 0.0, False],
 datetime.date(2007, 11, 18): [45, 41, 0.02, True],
 datetime.date(2017, 11, 3): [43, 33, 0.3, True],
 datetime.date(2007, 2, 24): [44, 36, 0.36, True],
 datetime.date(2015, 2, 18): [54, 40, 0.0, False],
 datetime.date(2008, 11, 18): [51, 43, 0.01, True],
 datetime.date(1965, 12, 29): [43, 33, 0.27, True]}

sumtmax=0
year=[]
for k, v in test.items():
    year.append(k.year)
yearset=set(year)
print(yearset)

for i in yearset:
    for k, v in test.items():
        k=k.year
        if k==i:
            print(v[0])
</code></pre>
<p>I want to get the average of value[0] and the sum of value[3] for each year. How should I do this...</p>
</div>
<div class="post-text" itemprop="text">
<p>This will give you results in form of dict without external libraries:</p>
<pre><code>sum3 = {}

for k, v in test.items():
    sum3[k.year] = sum3.get(k.year, 0) + v[3]

avg0 = {}

for k, v in test.items():
    value = avg0.get(k.year, (0, 0))
    avg0[k.year] = (value[0] + v[0], value[1] + 1.0)

avg0 = {k: v[0]/v[1] for k, v in avg0.items()}

sum3
#{2017: 1, 1965: 1, 2007: 2, 2008: 1, 1977: 0, 2015: 0}
avg0
#{2017: 43.0, 1965: 43.0, 2007: 44.5, 2008: 51.0, 1977: 81.0, 2015: 54.0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are working with this kind of data I would definitely suggest to use a table representation using <a href="http://pandas.pydata.org/pandas-docs/stable/" rel="nofollow noreferrer">pandas</a>.</p>
<p>Here is an example:</p>
<pre><code>import pandas as pd

df = pd.DataFrame(test).T.astype(float)

df.index = pd.to_datetime(df.index, format='%Y-%m-%d')

avg0 = df.groupby(df.index.year)[0].mean()

Out[60]: 
1965    43.0
1977    81.0
2007    44.5
2008    51.0
2015    54.0
2017    43.0
Name: 0, dtype: float64

sum3 = df.groupby(df.index.year)[3].sum()

sum3
Out[61]: 
1965    1.0
1977    0.0
2007    2.0
2008    1.0
2015    0.0
2017    1.0
Name: 3, dtype: float64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use python builtin <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">sum</a> to get sum of value by year, to get average just divide the sum by the number of entry by year: </p>
<pre><code>import os
from datetime import datetime, date
import datetime


test = {
   datetime.date(1977, 6, 5): [81, 55, 0.0, False],
   datetime.date(2007, 11, 18): [45, 41, 0.02, True],
   datetime.date(2017, 11, 3): [43, 33, 0.3, True],
   datetime.date(2007, 2, 24): [44, 36, 0.36, True],
   datetime.date(2015, 2, 18): [54, 40, 0.0, False],
   datetime.date(2008, 11, 18): [51, 43, 0.01, True],
   datetime.date(1965, 12, 29): [43, 33, 0.27, True]
}

yearset = set([k.year for k in test.keys()])

for i in yearset:
    print(sum([v[0] for k, v in test.items() if k.year == i]) / len(list(filter(lambda x: x.year == i, test.keys()))))
    print(sum([v[3] for k, v in test.items() if k.year == i]))
</code></pre>
</div>
<span class="comment-copy">hi, zipa,can you explain this part: for k, v in test.items():     value = avg0.get(k.year, (0, 0))     avg0[k.year] = (value[0] + v[0], value[1] + 1.0)</span>
<span class="comment-copy">@KarenJiang You seem to understand the <code>get()</code> concept, so I'm just changing the default value to <code>(0, 0)</code> tuple as a starting point and adding new value to it as well as increasing counter by one. The <code>1.0</code> part is for the <code>2.x</code> users, otherwise you can user <code>1</code> in python <code>3.x</code>.</span>
<span class="comment-copy">not average and sum of all together, I want the result for each year....</span>
<span class="comment-copy">Ah, okay I misunderstood. I updated my answer</span>
<span class="comment-copy">why not <code>year = set()</code> and <code>year.add()</code> ?</span>
