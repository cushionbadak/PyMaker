<div class="post-text" itemprop="text">
<p>Let's suppose I have the following list of dicts:</p>
<pre><code>my_list = [
           {'a': 1, 'b': 3, 'c': 0}, 
           {'a': 1, 'b': 5, 'c': -10}, 
           {'a': 1, 'b': 1, 'c': 1}, 
           {'a': 2, 'b': 0, 'c': 0}, 
           {'a': 1, 'b': 5, 'c': 0}
]
</code></pre>
<p>I need to retrieve from this list two dicts where the key <code>a = 1</code></p>
<p>How I can reach the desired result?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> to avoid iterating through the whole input list after you've already found the two dicts you need</p>
<pre><code>from itertools import islice

a, b = islice((d for d in my_list if d.get('a') == 1), 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd go for a clear solution:</p>
<pre><code>def a_is_1(d):
    return d.get('a') == 1

dicts = filter(a_is_1, my_list)
</code></pre>
<p><em>Assuming</em> there are two dicts you can unpack them:</p>
<pre><code>a, b, *rest = dicts
</code></pre>
<p>Otherwise just take as many as there are:</p>
<pre><code>result = islice(dicts, 0, 2)
</code></pre>
<p>Each step does one thing and is very readable.</p>
<p>If you want this step for more keys and values you can use a closure:</p>
<pre><code>def kv_filter(k, v):
    def _(d):
        return d.get(k) == v
    return _
</code></pre>
<p>And then:</p>
<pre><code>dicts = filter(kv_filter('a', 1), my_list)
</code></pre>
<p>And the rest is the same.</p>
</div>
<span class="comment-copy"><code>filter(lambda d: d.get('a') == 1, my_list)</code></span>
<span class="comment-copy">+Reut Sharabani I need only two dicts! Your solution gives me all dicts where the values for key a = 1</span>
<span class="comment-copy">Wrap the result with <code>islice(result, 0, 2)</code></span>
<span class="comment-copy">Thanks a lot! Superb performance</span>
<span class="comment-copy">I can achieve the desired result but +Patrick Haugh solution is more legible. Thanks!</span>
