<div class="post-text" itemprop="text">
<p>I'm learning OOP and I have a few questions.
When the initiliazer is called, is the code automatically processed?
Cause if that's the case, I don't understand why my game isn't drawing the rectangle i ask it to draw in the <strong>init</strong> part of the player class.
I'm very new to OOP and as such I'm not sure of what I'm doing, to some extent.
Here's my code:</p>
<pre><code>import pygame

white = (255, 255, 255)
black = (0, 0, 0)

class Game():
    width = 800
    height = 600
    screen = pygame.display.set_mode((width, height))
    def __init__(self):
        pass
    def fill_screen(self, color):
        self.color = color
        self.screen.fill(self.color)

class Player(pygame.sprite.Sprite):
    lead_x = 800/2
    lead_y = 600/2
    velocity = 0.002
    block_size = 10
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.draw.rect(game.screen, black, [self.lead_x, self.lead_y, self.block_size, self.block_size])

    def move_player_x_left(self):
        self.lead_x += -self.velocity

    def move_player_x_right(self):
        self.lead_x += self.velocity

    def move_player_y_up(self):
        self.lead_y += -self.velocity

    def move_player_y_down(self):
        self.lead_y += self.velocity

game = Game()
player = Player()

exitGame = False
while not exitGame:
    game.fill_screen(white)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            exitGame = True
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_w:
                player.move_player_y_up()
            if event.key == pygame.K_s:
                player.move_player_y_down()
            if event.key == pygame.K_d:
                player.move_player_x_right()
            if event.key == pygame.K_a:
                player.move_player_x_left()
    pygame.display.update()
pygame.quit()
quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are constantly filling the screen with white in your mainloop. The <code>Player</code> class only draws on <code>__init__</code>. This means that the rect is drawn for a split second and then covered over by white.</p>
<p>Your assumption about the code in <code>__init__</code> automatically being called is correct. These methods with double underscores are called by python in special cases, they are called magic methods. You can find a list of them <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__init__#special-method-names" rel="nofollow noreferrer">here</a>. </p>
<pre><code>def __init__(self):
    pygame.sprite.Sprite.__init__(self)
    # The rect drawing part was moved from here.
def update(self):
    # You were previously assigning this to a variable, this wasn't necessary.
    pygame.draw.rect(game.screen, black, [self.lead_x, self.lead_y, self.block_size, self.block_size])
</code></pre>
<p>You will need to call the new update method in the mainloop after you fill the screen.</p>
<pre><code>while True:
    game.fill_screen(white)
    player.update()
</code></pre>
</div>
<span class="comment-copy">I understand why I'm constantly filling the screen with white, but I don't understand how to update it every iteration of the main loop.</span>
<span class="comment-copy">@LolLol Please check my answer again. :) I've added some more in-depth information.</span>
<span class="comment-copy">Thanks! a lot. I got it working and i understand it now!</span>
<span class="comment-copy">@LolLol Can you click the check mark next to my answer to mark it as accepted?</span>
