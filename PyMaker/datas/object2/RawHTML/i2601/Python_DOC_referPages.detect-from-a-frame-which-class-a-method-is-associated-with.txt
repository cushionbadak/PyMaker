<div class="post-text" itemprop="text">
<p>I'm writing an incredibly hackish piece of not-quite-production code in Python, and I need some way of detecting whether a <code>_XYZ__foo</code> attribute access was called from a method defined on a class called <code>/_*XYZ/</code>. It's not quite as easy as that, though, since I need to detect the <em>original</em> method access in case anything has overridden <code>__getattribute__</code> and called <code>super()</code>.</p>
<p>I'm bad at explaining, so... the rules are similar to Java's <code>private</code>, except I want to prevent cheating. (Yes, I know that this is counter to the Python philosophy; bear with me here.)</p>
<p>My current plan of attack is:</p>
<ol>
<li>Use <code>re.compile('_(?P&lt;class&gt;.*?)__(?P&lt;name&gt;.*)')</code> to detect the name of the class (with preceding <code>_</code>s stripped).</li>
<li>Climb the <code>super</code> chain with <code>sys._getframe(n)</code> to find out where the attribute access was.</li>
<li>Detect what class it was on... somehow. I'm stuck here.</li>
</ol>
<p>I might be able to do this by emulating <code>super</code>'s walking of the MRO, but I'd much rather rely on detection because checking what's been called by <code>super</code> and what's been called by user functions is hard.</p>
<p>So, to my actual question. Given a frame, how can I detect which class a method is associated with? If I had access to the function object I could do <code>f.__qualname__[:-1-len(f.__name__)]</code>, but I don't (or, at least, I don't <em>think</em> I do). As is, I have no idea how to do this!</p>
<p>Here's a simple example that demonstrates what I want to do:</p>
<pre><code>import sys
import re
import itertools
import builtins
from builtins import __build_class__

def build_class(func, name, *bases, metaclass=None, **kwds):
    if bases[-1] is object:
        bases = bases[:-1]
    bases += HackishClass, object
    if metaclass is None:
        return __build_class__(func, name, *bases, **kwds)
    return __build_class__(func, name, *bases, metaclass=metaclass, **kwds)

private_regex = re.compile('_(?P&lt;class&gt;.*?)__(?P&lt;name&gt;.*)')
class HackishClass:
    __slots__ = ()
    def __getattribute__(self, key):
        match = private_regex.match(key)
        if match is not None:
            for depth in itertools.count(1):
                frame = sys._getframe(depth)
                if ...:  # snip
                    # Check for the original attribute access here.
                    break
            class_name = ...  # HERE! MAGIC GOES HERE!
            if class_name != match['class']:
                raise AttributeError("This is private! Keep out.")
        return super().__getattribute__(key)

builtins.__build_class__ = build_class
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As far as I know, there's no way to obtain the method where the attribute access occurred directly from a frame object. We can, however, obtain that method's <a href="https://docs.python.org/3/library/types.html#types.CodeType" rel="nofollow noreferrer">code object</a>. We can then search the object's MRO until we find the method to which that code object belongs.</p>
<pre><code>private_regex = re.compile('_(?P&lt;class&gt;.*?)__(?P&lt;name&gt;.*)')
class HackishClass:
    __slots__ = ()

    def __getattribute__(self, key):
        match = private_regex.match(key)
        if match is None:
            # not a private attribute, no problem
            return super().__getattribute__(key)

        # obtain the code object of the calling function
        calling_codeobj = inspect.currentframe().f_back.f_code

        # iterate the MRO until we find a class with the name from `key`
        classname = match.group('class')
        for cls in type(self).mro():
            if cls.__name__ != classname:
                continue

            # check if the code object belongs to a method defined in this class
            for thing in vars(cls).values():
                if getattr(thing, '__code__', None) is calling_codeobj:
                    # found it! allow the attribute access
                    return super().__getattribute__(key)

        raise AttributeError("This is private! Keep out.")
</code></pre>
<p>A small demonstration:</p>
<pre><code>class Foo:
    def __init__(self):
        self.__foo = 5
        print(self.__foo)

f = Foo()           # prints 5
print(f._Foo__foo)  # throws AttributeError
</code></pre>
</div>
<span class="comment-copy">So all you know is the method's name, and that the method is currently on the call stack?</span>
<span class="comment-copy">An example of what you want to allow and prevent would probably be helpful.</span>
<span class="comment-copy">@Aran-Fey And the code of the method, and a few other things. It's a shame that there isn't a <a href="https://stackoverflow.com/questions/tagged/hackish">hackish</a> or something.</span>
<span class="comment-copy">@schwobaseggl I'm just trying to detect which class a method is associated with. The above is just context in case somebody spots an XY problem.</span>
<span class="comment-copy">Could you show an example of what you want to do? I feel like there's an interesting problem here, but I can't figure out what it is. All this talk about <code>super</code> and MRO is confusing, and I don't understand how it's related to your problem. Some code that demonstrates what you're trying to do would be a huge help.</span>
<span class="comment-copy">This is nowhere near as hackish as I expected the solution to be. In fact, I think this is the "one obvious way" to do it! :-D</span>
