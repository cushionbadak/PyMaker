<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2796855/python-closures-example-code">Python Closures Example Code</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>Suppose you have a decorator function that creates a dict to store already calculated results for performance reasons. E.g.:</p>
<pre><code>def memoize(func):

    cache = dict()

    def memoized_func(*args, **kwargs):
        if args in cache:
            return cache[args]

        result = func(*args)
        cache[args] = result
        return result

    return memoized_func
</code></pre>
<p>When I decorate a function with <code>myfunc = memoize(myfunc)</code>, I have a hard time understanding why this works.</p>
<p>I have initially thought that cache would get lost after returning the memoized function, as it goes out of scope. I would only return a reference to the decorated function. Obviously, this is not the case. </p>
<p>Can somebody tell me what is going on behind the scenes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Decorator function have self nonlocal scope where storing cache. This scope doesn't destroy after function call. More info there <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement</a></p>
</div>
<span class="comment-copy">That's what a <i>closure</i> is.</span>
<span class="comment-copy">The returned function as a reference to the variable, hence it is not garbage collected.</span>
