<div class="post-text" itemprop="text">
<p>I would like to create a file in real time and add the values corresponding to the columns to an existing file in real time in the corresponding <code>CSV</code> file.</p>
<p>How can I add each of the <code>CSV</code> files that I generate in that program?</p>
<p>I'll write down the code I'm using now.</p>
<pre><code>import csv

for i in range(10):
SD="Save datas(Angle)"+str(i)  ## 해당 각도별로 배열을 지정

SDArray1=str(SD)               ## 파일을 만들어준다

f=open(SDArray1+".csv","a+t")#  ## 이름을 만들어준 파일을 생성

csv_writer = csv.writer(f)
csv_writer.writerow([SD])
print("One loop has started")
f.close()#

for i in range(1,5):
    cdata=[i]
    f=open(SDArray1+".csv","a+t")

    csv_writer =csv.writer(f)
    csv_writer.writerow(cdata)

    print(cdata)
    f.close()#
    print("loop's finished!")
</code></pre>
<p>If you look at the code above, a certain file is created. I completed the next file, but I was wondering how to add columns to the file.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>csv.write_row()</code> takes a complete row of columns - if you need more, add them to your <code>cdata=[i]</code>- f.e. <code>cdata=[i,i*2,i*3,i*4]</code>.</p>
<p>You should <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">use <code>with open() as f:</code> for file manipulation</a>, it is more resilient against errors and autocloses the file when leaving the <code>with</code>-block.</p>
<p>Fixed:</p>
<pre><code>import csv

# do not use i here and down below, thats confusing, better names are a plus
for fileCount in range(10):
    filename = "filename{}.csv".format(fileCount) # creates filename0.csv ... filename9.csv 

    with open(filename,"w") as f:#  # create file new
        csv_writer = csv.writer(f)
        # write headers
        csv_writer.writerow(["data1","data2","data3"])
        # write 4 rows of data
        for i in range(1,5):
            cdata=[(fileCount*100000+i*1000+k) for k in range(3)] # create 3 datapoints
            # write one row of data [1000,1001,1002] up to [9004000,9004001,9004002] 
            # for last i and fileCount
            csv_writer.writerow(cdata)

# no file.close- leaving wiht open() scope autocloses
</code></pre>
<p>Check what we have written:</p>
<pre><code>import os
for d in sorted(os.listdir("./")):
    if d.endswith("csv"): 
        print(d,":") 
        print("*"*(len(d)+2)) 
        with open(d,"r") as f: 
            print(f.read()) 
        print("")
</code></pre>
<p>Output:</p>
<pre><code>filename0.csv :
***************
data1,data2,data3
1000,1001,1002
2000,2001,2002
3000,3001,3002
4000,4001,4002


filename1.csv :
***************
data1,data2,data3
101000,101001,101002
102000,102001,102002
103000,103001,103002
104000,104001,104002

filename2.csv :
***************
data1,data2,data3
201000,201001,201002
[...snip the rest - you get the idea ...]     

filename9.csv :
***************
data1,data2,data3
901000,901001,901002
902000,902001,902002
903000,903001,903002
904000,904001,904002
</code></pre>
<hr/>
<p>To add a new column to an existing file:</p>
<ul>
<li>open old file to read</li>
<li>open new file to write </li>
<li>read the old files header, add new column header and write it in new file</li>
<li>read all rows, add new columns value to each row and write it in new file</li>
</ul>
<p>Example:</p>
<p>Adding the sum of column values to the file and writing as new file:</p>
<pre><code>filename = "filename0.csv"
newfile =  "filename0new.csv"

# open one file to read, open other (new one) to write
with open(filename,"r") as r, open(newfile,"w") as w:
    reader = csv.reader(r)
    writer = csv.writer(w)

    newHeader = next(reader)   # read the header
    newHeader.append("Sum")    # append new column-header
    writer.writerow(newHeader) # write header

    # for each row: 
    for row in reader:
        row.append(sum(map(int,row)))   # read it, sum the converted int values
        writer.writerow(row)            # write it

# output the newly created file:
with open(newfile,"r") as n:
    print(n.read())
</code></pre>
<p>Output:  </p>
<pre><code>data1,data2,data3,Sum
1000,1001,1002,3003
2000,2001,2002,6003
3000,3001,3002,9003
4000,4001,4002,12003
</code></pre>
</div>
<span class="comment-copy">Why is it necessary to keep opening and closing the file within the loop?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/11070527/how-to-add-a-new-column-to-a-csv-file">How to add a new column to a CSV file?</a></span>
<span class="comment-copy">Thank you for your opinion.But what I want to know is how do I add Columns value to a newly created file when there is an existing file and a new one is created?</span>
<span class="comment-copy">This is how it works. But what I really want to do is measure data in real time and save it as a csv file and merge it into one and draw a graph.  What should I do?</span>
<span class="comment-copy">@임종훈  Writing, reading, adding to it, ... with files makes this IO-bound. Not a good idea, as IO is slow. Why not simply do it in memory and write your CSV after you took all measurements? how many datapoints are we talking about?</span>
<span class="comment-copy">I want to thank you for that. As I thought about the data size growing in the current job, I selected to create a file and combine the csv file using the pandas. Thank you for your time.</span>
