<div class="post-text" itemprop="text">
<p>I need to write a thread which:</p>
<ul>
<li>runs for <em>n</em> seconds and then does A (and exits)</li>
<li>except if it is told by its parent to stop earlier, in which case it does B (and exits)</li>
</ul>
<p>I wrote something which works but is really convoluted (I believe). It (mis)uses a <code>Lock()</code> as a flag :</p>
<pre><code>import threading
import time

def countdown(lock):
    t = 0
    while t &lt; 10:
        t += 1
        print(t)
        try:
            lock.release()
        except RuntimeError:
            # was not told to die (= lock is not set)
            pass
        else:
            # the parent notified to kill by setting the lock
            print("child: the lock has been set, means I die before timeout")
            return
        time.sleep(1)

    # executed when timeouting
    print("child: I timeouted on my own")
    return

lock = threading.Lock()
# with timeout
threading.Thread(target=countdown, args=(lock,)).start()
print("parent: sleeping 12 seconds, the thread should timeout in the meantime")
time.sleep(12)

lock = threading.Lock()
# without timeout
threading.Thread(target=countdown, args=(lock,)).start()
print("parent: sleeping 5 seconds, and then setting the flag")
time.sleep(5)
lock.acquire()
print("the counter should exit prematurely while I continue sleeping")
time.sleep(5)
</code></pre>
<p>It works correctly (I do not care about slight shifts in the time - 6 seconds vs 5 in that case, due to the co-running of the main thread and the spawned one):</p>
<pre><code>1
parent: sleeping 12 seconds, the thread should timeout in the meantime
2
3
4
5
6
7
8
9
10
child: I timeouted on my own
1
parent: sleeping 5 seconds, and then setting the flag
2
3
4
5
the counter should exit prematurely while I continue sleeping
6
child: the lock has been set, means I die before timeout
</code></pre>
<p>As I mentioned, this solution looks very convoluted to me. </p>
<p><strong>Is there a more pythonic construction which would run a timeout-ing thread, interruptible by its parent?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>If the extra thread is to be used only for counting down, and not to execute any other function in the mean time, the <code>threading.Timer()</code> object is made just for this.</p>
<p>If needed, the timer can be canceled ahead of time, using the <code>.cancel()</code> method. More information can be found in <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer">the official documentation</a>.</p>
<p>Rewriting the example from the question (slightly modified) gives code looking something like:</p>
<pre><code>import threading
import time

# with timeout
t = threading.Timer(10.0, lambda: print("I timed out"))
t.start()
print("Parent: Sleeping 12 seconds, the thread should timeout in the meantime")
time.sleep(12)
print("Done sleeping")

# without timeout
t = threading.Timer(10.0, lambda: print("I timed out"))
t.start()
print("Parent: Sleeping 6 seconds, and then cancel timers")
time.sleep(6)
t.cancel()
print("The counter is canceled while I continue sleeping")
time.sleep(6)
print("Done sleeping")
</code></pre>
</div>
<span class="comment-copy">Do you want your thread to do something during the <i>n</i> countdown seconds? Otherwise, why not use a <code>threading.Timer()</code> object. It can be then be canceled using the <code>.cancel()</code> method if needed.</span>
<span class="comment-copy">@JohanL: this is exactly what I was looking for, thank you. No idea how I could have missed it in the docs. Would you mind making this an answer?</span>
