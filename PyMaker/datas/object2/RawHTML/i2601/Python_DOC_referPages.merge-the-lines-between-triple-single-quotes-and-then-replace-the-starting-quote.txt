<div class="post-text" itemprop="text">
<pre><code>'''
Created on Mar 11, 2017

@author: XXZ
This file is to demonstrate the word frequency counter. This is a very 
important practical

'''
</code></pre>
<p>Required Output:</p>
<pre><code>#Created on Mar 11, 2017 @author: XXZ This file is to demonstrate the word frequency counter. This is a very important practical
</code></pre>
<p>(I want to count it as a comment)</p>
<p>My Code:
    import re</p>
<pre><code>START_PATTERN = "'''\n"
END_PATTERN = "'''\n"

with open('counter.py') as file:
    match = False
    newfile = None
for line in file:
    if re.match(START_PATTERN, line):
        match = True
        newfile = open('my_new_file.txt', 'w')
        continue
    elif re.match(END_PATTERN, line):
        match = False
        newfile.close()
        continue
    elif match:
        newfile.write(line)
        newfile.write('\n')
</code></pre>
<p>This just writes the last multilines comment in the file. Not all.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can read the whole file in and apply an <code>re.sub</code> in multiline mode.
Afterwards (or before, doesn't mater...) just crop those three <code>'</code> and add <code>#</code>:</p>
<pre><code>import re
with open('test.py', 'r') as f:
    txt = f.read()
    print('IN:\n', txt)
    txt = re.sub('\n', ' ', txt, flags=re.MULTILINE)
    txt = '#' + txt[3:-3]
    print('\nOUT:\n',txt)


IN:
 '''
Created on Mar 11, 2017

@author: XXZ
This file is to demonstrate the word frequency counter. This is a very 
important practical

'''

OUT:
 # Created on Mar 11, 2017  @author: XXZ This file is to demonstrate the word frequency counter. This is a very  important practical  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re.sub</code> to replace <em>one or more</em> new-lines (<code>\n</code>) with a singular space. Then strip the result (of any trailing and leading spaces) and concatenate that onto a <code>'#'</code>:</p>
<pre><code>import re
'#' + re.sub('\n+',' ',s).strip()
#'#Created on Mar 11, 2017 @author: XXZ This file is to demonstrate the word frequency counter. This is a very  important practical'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Replace <code>\n</code> with <code></code>. Here is a code:</p>
<pre><code>a = '''
Created on Mar 11, 2017

@author: XXZ
This file is to demonstrate the word frequency counter. This is a very 
important practical

'''

print("#"+a.replace("\n"," "))
</code></pre>
<p>Output:</p>
<pre><code># Created on Mar 11, 2017  @author: XXZ This file is to demonstrate the word frequency counter. This is a very  important practical  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>str.join</code></p>
<p><strong>Ex:</strong></p>
<pre><code>s = '''
Created on Mar 11, 2017

@author: XXZ
This file is to demonstrate the word frequency counter. This is a very 
important practical

'''
print("# "+ " ".join(i.strip() for i in s.split()) )
</code></pre>
<p><strong>Output:</strong></p>
<pre><code># Created on Mar 11, 2017 @author: XXZ This file is to demonstrate the word frequency counter. This is a very important practical
</code></pre>
</div>
<span class="comment-copy">What have you tried, and what are you stuck on?</span>
<span class="comment-copy">Why is the output expecting a split before the word frequency counter?</span>
<span class="comment-copy">Its not split, its supposed to be all in the same line.</span>
<span class="comment-copy">Why do you want to do this? Unlike docstrings, comments aren't available to <code>help</code> etc.</span>
<span class="comment-copy">They aren't just comments. They're docstrings. Maybe adding some real context to the question would help?</span>
<span class="comment-copy">Thanks it worked. Can you explain the "flags = re.MULTILINE"</span>
<span class="comment-copy">Normally <code>re</code> works on a line by line base, so you just can't match newlines. This mode makes <code>re</code> handle the complete text as one block. See also <a href="https://docs.python.org/3/library/re.html#re.MULTILINE" rel="nofollow noreferrer">docs.python.org/3/library/re.html#re.MULTILINE</a></span>
<span class="comment-copy">Correct, even if I'd replace <code>'\n'</code> by <code>'\s'</code>, so that two lines do not stick too close together...</span>
<span class="comment-copy">@SpghttCd My bad, I will update to use a regex</span>
<span class="comment-copy">It doesn't concatenate the lines in one line.</span>
<span class="comment-copy">@nehaj see the answer now; is it not exactly the same as your desired?</span>
<span class="comment-copy">it puts the '#' in front of each line. But doesn't concatenate the lines into one.</span>
