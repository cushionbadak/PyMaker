<div class="post-text" itemprop="text">
<p>I have several numpy arrays and I want to compare them and find the closest array for a given array. I could calculate the distance between these arrays using <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html" rel="nofollow noreferrer">https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html</a>. However, is there a way to find the two closest arrays out of several numpy arrays? </p>
<p>For the arrays I got <code>print(arr.shape)</code> gives <code>(300,)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>To find the two closest you'll need to compute the distance matrix, then find the minimum in this matrix to get the coordinates that are the closest from each other (using the matrix you'll get the indexes of the coordinates). </p>
<pre class="lang-py prettyprint-override"><code>from scipy.spatial import distance
import numpy as np 

coords = np.array([
  (35.0456, -85.2672),
  (35.1174, -89.9711),
  (35.9728, -83.9422),
  (36.1667, -86.7833)
])

distances = distance.cdist(coords, coords, 'euclidean')

# If you don't do that then the distance to self will always 
# be the min. distance in the matrix (always 0): 
np.fill_diagonal(distances, np.inf)

min_index = (np.argmin(distances))
closest = np.unravel_index(min_index, distances.shape)
</code></pre>
<p>Once you have <code>closest</code> indexes defined, you can have all the information you want about your pair of closest coordinates:</p>
<pre class="lang-py prettyprint-override"><code>print(f"The two closest are {closest}")
print(f"They are at distance {distances[closest]}")
print(f"Resp. coordinates {coords[closest[0]]} and {coords[closest[1]]}")
</code></pre>
<p>Outputs: </p>
<pre><code>The two closest are (0, 2)
They are at distance 1.6171965990565296
Resp. coordinates [ 35.0456 -85.2672] and [ 35.9728-83.9422]
</code></pre>
<p>Finally, note that all these input would work too:</p>
<pre class="lang-py prettyprint-override"><code>coords = np.array([ [35.0456, -85.2672], [35.1174, -89.9711] ])

arr1 = [35.0456, -85.2672]
arr2 = [35.1174, -89.9711]
coords = np.array([arr1, arr2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about writing a distance function and then using itertools to calculate the distance between pairs of lists?</p>
<p>For example:</p>
<pre><code>a_1 = [0,3,4,5]
a_2 = [4,7,8,9]
a_3 = [12, 34, 44]

from itertools import combinations

def distance(list1, list2):
    """Distance between two vectors."""
    squares = [(p-q) ** 2 for p, q in zip(list1, list2)]
    return sum(squares) ** .5

distances = []
for pair in combinations([a_1, a_2, a_3], 2):
    distances.append(pair)
    distances.append(distance(list(pair[0]), list(pair[1])))
</code></pre>
<p>Result:</p>
<pre><code> [([0, 3, 4, 5], [4, 7, 8, 9]), 8.0, ([0, 3, 4, 5], [12, 34, 44]), 52.009614495783374, ([4, 7, 8, 9], [12, 34, 44]), 45.70557952810576]
</code></pre>
</div>
<span class="comment-copy">As I understand, I think what you posted above is to find the two closest points in a given array. But what I need is to find the two closest arrays among many arrays (something like the answer by @Horbaje)</span>
<span class="comment-copy">What this does is it finds the closests coordinates (represented by arrays, or here tuples, but this is the same), in an array of coordinates. Therefore it finds the closest arrays in a list of arrays.</span>
<span class="comment-copy">I edited my answer and added the details for arrays of arrays instead of array of tuples.</span>
<span class="comment-copy">The numpy arrays I have are fasttext vector representations. I tried what you posted and for every distance I am getting 0.0. Why is that?</span>
<span class="comment-copy">The distance function assumes the elements in your vector to be integers. You should be able to make the conversion. For example with a list comprehension <code>a_1 = [ int(x) for x in a_1 ]</code></span>
<span class="comment-copy">Works fine. That was a fault by me.</span>
