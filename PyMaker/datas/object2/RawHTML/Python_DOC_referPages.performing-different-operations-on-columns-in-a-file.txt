<div class="post-text" itemprop="text">
<p>I am trying to write code that will handle my input file of numbers, and then perform various operations on them. For example, The first column is a name. The second is an hourly rate, and the third is hours. The File looks like this,</p>
<pre><code>John 15 8
Sam 10 4
Mike 16 10
John 19 15
</code></pre>
<p>I want to go through and if a name is a duplicate (John in the example) it will average the 2nd number (hourly rate), get the sum the 3rd number (hours), and delete the duplicate leaving 1 John with average wage and total hours. If not a duplicate it will just output the original entry.</p>
<p>I cannot figure out how to keep track of the duplicate, and then move on to the next line in the row. Is there any way to do this without using line.split()?</p>
</div>
<div class="post-text" itemprop="text">
<p>This problem is easier if you break it up into parts.</p>
<p>First, you want to read through the file and parse each line into three variables, the name, the hourly rate, and the hours.</p>
<p>Second, you need to handle the matching on the first value (the name). You need some kind of data structure to store values in; a <code>dict</code> is probably the right thing here.</p>
<p>Thirdly, you need to compute the average at the end (you can't compute it along the way because you need the count of values).</p>
<p>Putting it together, I would do something like this:</p>
<pre class="lang-py prettyprint-override"><code>class PersonRecord:
    def __init__(self, name):
        self.name = name
        self.hourly_rates = []
        self.total_hours = 0

    def add_record(self, hourly_rate, hours):
        self.hourly_rates.append(hourly_rate)
        self.total_hours += hours

    def get_average_hourly_rate(self):
        return sum(self.hourly_rates) / len(self.hourly_rates)


def compute_person_records(data_file_path):
    person_records = {}

    with open(data_file_path, 'r') as data_file:
        for line in data_file:
            parts = line.split(' ')
            name = parts[0]
            hourly_rate = int(parts[1])
            hours = int(parts[2])

            person_record = person_records.get(name)
            if person_record is None:
                person_record = PersonRecord(name)
                person_records[name] = person_record
            person_record.add_record(hourly_rate, hours)

    return person_records


def main():
    person_records = compute_person_records()

    for person_name, person_record in person_records.items():
        print('{name} {average_hourly_rate} {total_hours}'.format(
            name=person_name,
            average_hourly_rate=person_record.get_average_hourly_rate(),
            total_hours=person_record.total_hours))

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here we go. Just <code>groupby</code> the <code>name</code> and <code>aggregate</code> on the <code>rate</code> and <code>hours</code> taking the <code>mean</code> and <code>sum</code> as shown below.</p>
<pre><code>#assume d is the name of your DataFrame.
d.groupby(by =['name']).agg({'rate': "mean", 'hours':'sum'})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a version that's not particularly efficient. I wouldn't run it on lots of data, but it's easy to read and returns your data to its original form, which is apparently what you want...</p>
<pre><code>from statistics import mean

input = '''John 15 8
Sam 10 4
Mike 16 10
John 19 15'''

lines = input.splitlines()
data = [line.split(' ') for line in lines]
names = set([item[0] for item in data])
processed = [(name, str(mean([int(i[1]) for i in data if i[0] == name])), str(sum([int(i[2]) for i in data if i[0] == name]))) for name in names]
joined = [' '.join(p) for p in processed]
line_joined = '\n'.join(joined)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a=[] #list to store all the values
while(True): #infinite while loop to take any number of values given

    try:  #for giving any number of inputs u want 
        l=input().split()
        a.append(l)
    except(EOFError):
        break;
for i in a: 
    m=[i] #temperory list which will contain duplicate values
    for j in range(a.index(i)+1,len(a)): 
        if(i[0]==a[j][0]):
            m.append(a[j]) #appending duplicates
            a.pop(j) #popping duplicates from main list
    hr=0 #initializing hourly rate and hours with 0
    hrs=0
    if(len(m)&gt;1):
        for k in m:
            hr+=int(k[1])
            hrs+=int(k[2])# calculating total hourly rate and hours
        i[1]=hr/len(m)
        i[2]=hrs/len(m)#finding average
for i in a:
    print(i[0],i[1],i[2]) # printing the final list
</code></pre>
<p>Read comments in the code for code explanation</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>from collections import defaultdict

with open('file_name') as fd:
    data = fd.read().splitlines()

line_elems = []
for line in data:
    line_elems.append(line.split())

a_dict = defaultdict(list)
for e in line_elems:
    a_dict[e[0]].append((e[1], e[2]))

final_dict = {}
for key in a_dict:
    if len(a_dict[key]) &gt; 1:
        hour_rates = [float(x[0]) for x in a_dict[key]]
        hours = [float(x[1]) for x in a_dict[key]]

        ave_rate = sum(hour_rates) / len(hour_rates)
        total_hours = sum(hours)

        final_dict[key] = (ave_rate, total_hours)
    else:
        final_dict[key] = a_dict[key]
print(final_dict)
# write to file or do whatever
</code></pre>
</div>
<span class="comment-copy">Why do you not want to use <code>split()</code>? It sounds like exactly what you want.</span>
<span class="comment-copy">Because split puts the values into a list, but I need to output the numbers as they were originally (not separated by commas).</span>
<span class="comment-copy">After you convert it to a list using split(), you can always use " ".join(list) to reconvert it to its original format? (Check this out: <a href="https://www.programiz.com/python-programming/methods/string/join" rel="nofollow noreferrer">programiz.com/python-programming/methods/string/join</a>)</span>
