<div class="post-text" itemprop="text">
<p>I have an array of strings that looks something like this </p>
<pre><code>['a', 'b', 'c.1', 'c.2', 'c.3', 'c.4', 'd.1', 'd.2', 'd.3']
</code></pre>
<p>I want to break this into something like</p>
<pre><code>[['a', 'b', 'c.1'], ['a', 'b', 'c.2'], ['a', 'b', 'c.3'],
 ['a', 'b', 'd.1'], ['a', 'b', 'd.2'], ['a', 'b', 'd.3'],
 ['a', 'b', 'd.4']]
</code></pre>
<p>How do I go about doing this ? My Idea was to use groupby in itertools
to get something like </p>
<pre><code>['a', 'b', ['c.1', 'c.2', 'c.3'], ['d.1', 'd.2', 'd.3', 'd.4']]
</code></pre>
<p>and then probably something like</p>
<pre><code>result = []
for elem in nestedList:
    if isinstance(elem, list):
        temp = []
        for elem in nestedList:
            if not isinstance(elem, list):
                temp.append(elem):
        temp.append(elem)
    result.append(temp)
</code></pre>
<p>In order to do that I would need to access the next element in groupby      </p>
<pre><code>(Something like lambda x: '.' not in x and nextelement.split('.')[0] != x)
</code></pre>
<p>How do I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Youd don't need itertools.</p>
<p>You can simply use list comprehensions to filter strings with <code>'.'</code> or not, and combine them again in another list comprehension:</p>
<pre><code>data = ['a', 'b', 'c.1', 'c.2', 'c.3', 'c.4', 'd.1', 'd.2', 'd.3']

lone_letters = [x for x in data if '.' not in x]
combined_letters = [x for x in data if '.' in x]

print([lone_letters + [x] for x in combined_letters])
# [['a', 'b', 'c.1'], ['a', 'b', 'c.2'], ['a', 'b', 'c.3'], ['a', 'b', 'c.4'], ['a', 'b', 'd.1'], ['a', 'b', 'd.2'], ['a', 'b', 'd.3']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most simple approach:</p>
<pre><code>l = ['a', 'b', 'c.1', 'c.2', 'c.3', 'c.4', 'd.1', 'd.2', 'd.3']
result = [l[:2] + [i] for i in l[2:]]
print(result)
</code></pre>
<p>The output:</p>
<pre><code>[['a', 'b', 'c.1'], ['a', 'b', 'c.2'], ['a', 'b', 'c.3'], ['a', 'b', 'c.4'], ['a', 'b', 'd.1'], ['a', 'b', 'd.2'], ['a', 'b', 'd.3']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an interactive demonstration of a general approach.
First define input list:</p>
<pre><code>&gt;&gt;&gt; l = ["a", "b", "c.1", "c.2", "c.3", "c.4", "d.1", "d.2", "d.3"]
&gt;&gt;&gt; l
['a', 'b', 'c.1', 'c.2', 'c.3', 'c.4', 'd.1', 'd.2', 'd.3']
</code></pre>
<p>Gather common prefix elements:</p>
<pre><code>&gt;&gt;&gt; p = [e for e in l if "." not in e]
&gt;&gt;&gt; p
['a', 'b']
</code></pre>
<p>Compute rest of elements:</p>
<pre><code>&gt;&gt;&gt; r = [e for e in l if e not in p]
&gt;&gt;&gt; r
['c.1', 'c.2', 'c.3', 'c.4', 'd.1', 'd.2', 'd.3']
</code></pre>
<p>Compute product of prefix with each element of the rest:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; [x[0] + list(x)[1:] for x in product([p],r)]
[['a', 'b', 'c.1'], ['a', 'b', 'c.2'], ['a', 'b', 'c.3'], ['a', 'b', 'c.4'],
 ['a', 'b', 'd.1'], ['a', 'b', 'd.2'], ['a', 'b', 'd.3']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> like this:</p>
<pre><code>my_list = ['a', 'b', 'c.1', 'c.2', 'c.3', 'c.4', 'd.1', 'd.2', 'd.3']
res = [[my_list[0], my_list[1], item] for item in my_list[2:]]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt;
&gt;&gt;&gt; pprint(res)
[['a', 'b', 'c.1'],
 ['a', 'b', 'c.2'],
 ['a', 'b', 'c.3'],
 ['a', 'b', 'c.4'],
 ['a', 'b', 'd.1'],
 ['a', 'b', 'd.2'],
 ['a', 'b', 'd.3']]
</code></pre>
</div>
<span class="comment-copy">what is <code>c.1</code>? this is invalid syntax</span>
<span class="comment-copy"><code>c.1</code> isn't a correct Python syntax. Should it be a string? What's the logic? Why should <code>a</code> and <code>b</code> be treated differently?</span>
<span class="comment-copy">Are those supposed to be strings?</span>
<span class="comment-copy">Yep they are strings</span>
<span class="comment-copy">Thanks a lot ! learnt something new today</span>
