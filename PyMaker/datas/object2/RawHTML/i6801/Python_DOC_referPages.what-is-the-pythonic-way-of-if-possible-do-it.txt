<div class="post-text" itemprop="text">
<p>I wonder how it would be best/most pythonic to write the situation: if it can be done, do it. If not: just leave it.</p>
<p>Example:
I have a function that loads data from a database. If a writable destination is given the data is written to a file. Independent of the file being written or not, the data is always returned. I could ofcourse check whether there is a writable location and if so write the data to the file. It however seems a non-pythonic way and I think "it's better to ask for forgiveness than permission".</p>
<p>I implement this like such:</p>
<pre><code>def loadData(dest=False):
    data = someDBRequest()
    try:
        with open(dest, 'w') as fh:
            json.dump(data, fh)
    except:
        pass
    return data
</code></pre>
<p>This somehow feels bad because I implement a useless except, after all I expect dest to not always be set to a location because the function can be called without setting it. I also feel that it is not an error that should be logged or treated in some way.</p>
<p>Is this a correct way or would you suggest something better/more pythonic?</p>
</div>
<div class="post-text" itemprop="text">
<p>In this particular instance, I would default <code>dest</code> to <code>None</code>, and would explicitly check it for <code>None</code>.</p>
<p>If you also want to quietly fail if <code>dest</code> is given but is invalid, you could use your approach. However, I would advocate replacing the catch-all <code>except</code> clause with <code>except IOError</code>. Otherwise you're potentially catching things like <code>SyntaxError</code> etc.</p>
<pre><code>def loadData(dest=None):
    data = someDBRequest()
    if dest:
       try:
           with open(dest, 'w') as fh:
               json.dump(data, fh)
       except IOError:
           pass
    return data
</code></pre>
<p>In general, if you do rely on the "it's better to ask for forgiveness than permission" idiom, I think it's best to put as little code as possible inside the <code>try</code> block, and to catch as few exceptions as possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Starting with Python 3.4 there is a new tool <code>contextlib.suppress</code> that allows to write similar code without the <code>except Exception: pass</code> lines.</p>
<p>Small example quoted from the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer">docs</a>:</p>
<pre><code>from contextlib import suppress

with suppress(FileNotFoundError):
    os.remove('somefile.tmp')
</code></pre>
<p>Technically it is a context manager and this one is reentrant (explained <a href="https://docs.python.org/3/library/contextlib.html#reentrant-context-managers" rel="nofollow noreferrer">here</a>) and reusable. This means you don't have to create a new one each time, e.g.:</p>
<pre><code>os_errors_ignored = contextlib.suppress(OSError)

with os_errors_ignored:
    # do something

with os_errors_ignored:
    # do something else
</code></pre>
</div>
<span class="comment-copy">Another principle is "explicit is better than implicit". I also don't think the code you wrote here is very readable, and you don't like it yourself. Just do what feels best for you. Do you really not want to give an alert if dest is provided but not writable?</span>
