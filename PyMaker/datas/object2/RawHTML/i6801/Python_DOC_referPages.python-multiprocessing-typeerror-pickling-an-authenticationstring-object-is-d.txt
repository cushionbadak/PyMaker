<div class="post-text" itemprop="text">
<p>I'm having the following Problem. I want to implement a web crawler, so far this worked but it was so slow, that I tried to use multiprocessing for fetching the URLs.
Unfortunately I'm not very experienced at this field.
After some reading the easiest way seemed to me to use the <code>map</code> method from <code>multiprocessing.pool</code> for this.</p>
<p>But I constantly get the following error:</p>
<pre><code>TypeError: Pickling an AuthenticationString object is disallowed for security reasons
</code></pre>
<p>I found very few cases with the same error and they unfortunately did not help me.</p>
<p>I created a stripped version of my code which can reproduce the error:</p>
<pre><code>import multiprocessing

class TestCrawler:
    def __init__(self):
        self.m = multiprocessing.Manager()
        self.queue = self.m.Queue()
        for i in range(50):
            self.queue.put(str(i))
        self.pool = multiprocessing.Pool(6)



    def mainloop(self):
        self.process_next_url(self.queue)

        while True:
            self.pool.map(self.process_next_url, (self.queue,))                

    def process_next_url(self, queue):
        url = queue.get()
        print(url)


c = TestCrawler()
c.mainloop()
</code></pre>
<p>I would be very thankful about any help or suggestion!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>: But I constantly get the following error:</p>
</blockquote>
<p>The Error you'r getting is missleading, the reason are </p>
<pre><code>self.queue = self.m.Queue()
</code></pre>
<p>Move the <code>Queue</code> instantiation Outside the <code>class TestCrawler</code>.<br/>
This leads to another Error:</p>
<blockquote>
<p>NotImplementedError: pool objects cannot be passed between processes or pickled</p>
</blockquote>
<p>The reason are:</p>
<pre><code>self.pool = multiprocessing.Pool(6)
</code></pre>
<p>Both Errors are indicating that <code>pickle</code> can't find the <code>class Members</code>.</p>
<blockquote>
<p><strong>Note</strong>: Endless Loop!<br/>
  Your following <code>while</code> Loop leads to a Endless Loop!
  This will <strong>overload</strong> your System!<br/>
  Furthermore, your <code>pool.map(...</code> starts only <strong>one</strong> <code>Process</code> with <strong>one</strong> Task!</p>
<pre><code>    while True:
        self.pool.map(self.process_next_url, (self.queue,)) 
</code></pre>
</blockquote>
<p>I suggest reading <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">The Examples that demonstrates the use of a pool</a></p>
<hr/>
<p>Change to the following:</p>
<pre><code>class TestCrawler:
    def __init__(self, tasks):
        # Assign the Global task to class member
        self.queue = tasks
        for i in range(50):
            self.queue.put(str(i))

    def mainloop(self):
        # Instantiate the pool local
        pool = mp.Pool(6)
        for n in range(50):
            # .map requires a Parameter pass None
            pool.map(self.process_next_url, (None,))

    # None is passed
    def process_next_url(self, dummy):
        url = self.queue.get()
        print(url)

if __name__ == "__main__":
  # Create the Queue as Global
  tasks = mp.Manager().Queue()
  # Pass the Queue to your class TestCrawler
  c = TestCrawler(tasks)
  c.mainloop()
</code></pre>
<hr/>
<p>This Example starts 5 Processes each processing 10 Tasks(urls):</p>
<pre><code>class TestCrawler2:
    def __init__(self, tasks):
        self.tasks = tasks

    def start(self):
        pool = mp.Pool(5)
        pool.map(self.process_url, self.tasks)

    def process_url(self, url):
        print('self.process_url({})'.format(url))

if __name__ == "__main__":
    tasks = ['url{}'.format(n) for n in range(50)]
    TestCrawler2(tasks).start()
</code></pre>
<p><strong><em>Tested with Python: 3.4.2</em></strong></p>
</div>
<span class="comment-copy">Thank you very much for your answer! It worked for the short example, but somehow when I changed it in my program that way I still have the same problem. Could you maybe send me some resources which explain the pickling? When looking for this I mostly get texts about the pickle module.</span>
<span class="comment-copy">@blue: <a href="https://stackoverflow.com/posts/46101918/edit">Edit</a> your Question and show the <b>args=</b> you are using for <code>pool.map(...</code>, I assume you are still trying to pass a <code>muliprocessing</code> object which is impossible!</span>
<span class="comment-copy">this code works with 'map' method only and not with apply_async</span>
