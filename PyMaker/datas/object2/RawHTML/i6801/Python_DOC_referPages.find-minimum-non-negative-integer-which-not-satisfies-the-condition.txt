<div class="post-text" itemprop="text">
<p>I have function <code>f</code> that takes <code>int</code> and return <code>bool</code>. I want to find minimum non-negative integer <code>x</code>, for which <code>f(x)</code> is <code>False</code>. How can I do it in most pythonic way (ideally one line)?</p>
<hr/>
<p>Here is how I do it now:</p>
<pre><code>x = 0
while f(x):
    x += 1
print(x)
</code></pre>
<p>I want something like:</p>
<pre><code>x = &lt;perfect one line expression&gt;
print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here it is, using <code>next</code>:</p>
<pre><code>from itertools import count
x = next(i for i in count() if not f(i))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def f(x):
...     return (x - 42)**2
... 
&gt;&gt;&gt; next(i for i in count() if not f(i))
42
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A similar functional approach with <a href="https://docs.python.org/3/library/itertools.html#itertools.filterfalse" rel="nofollow noreferrer"><code>itertools.filterfalse</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> could be </p>
<pre><code>from itertools import filterfalse, count

x = next(filterfalse(f, count()))
</code></pre>
<hr/>
<p>Or you can swap out <code>filterfalse</code> with <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer"><code>dropwhile</code></a>, which while performantly similar maintains the same syntax across Python 2 and 3 (<em>thanks to <a href="https://stackoverflow.com/users/1566221/rici">rici</a></em>). </p>
<pre><code>from itertools import dropwhile, count
x = next(dropwhile(f, count()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you'd like a single line without imports, one way might be a list comprehension (Python 2.7 / PyPy):</p>
<pre><code>def f(x):
  return True if x == 5 else False

x = [g(0) for g in [lambda x: x if f(x) else g(x+1)]][0]

print(x)
</code></pre>
</div>
<span class="comment-copy">I'm not an expert what pythonic means, but your three line of code are what I would write and would be satisfied with.</span>
<span class="comment-copy">@VPfB, finally I use my three-lines solution instead of one-line solutions, but it is interesting to know how it can be done in one-line :)</span>
<span class="comment-copy">Or dropwhile, although 2.7 compatibility does not appear to be necessary.</span>
<span class="comment-copy">@rici Why bother with <code>dropwhile</code>? I think <code>itertools.ifilterfalse</code> and the exact same approach would work fine.</span>
<span class="comment-copy">I didn't mean to imply that dropwhile was better, but it doesn't seem to me to be worse, either. It's just an alternative which happens to have the same spelling in both Python versions.</span>
<span class="comment-copy">@rici My apologies, I sort of assumed you were using <code>dropwhile</code> in a different way than I see now you were suggesting. That's totally reasonable yeah, I added it as an alternative - thanks!</span>
