<div class="post-text" itemprop="text">
<p>I have two strings that contains values that should be joined together, that means value one in string1 with values two in string2. Here is the code that I have tried it:</p>
<pre><code>str1 = "John,Gabriel,Isaac,Albert"
str2 = "Cena,Heins,Newton,Einstein"
for x,y in str1.split(','),str2.split(','):
    print (x+y) 
</code></pre>
<p>I have got this error:</p>
<pre><code>Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>zip</code>, it returns an iterator (in Python 2 just a list) which spits out tuples with values combined from specified sources:</p>
<pre><code>str1 = 'John,Gabriel,Isaac,Albert'
str2 = 'Cena,Heins,Newton,Einstein'

for x, y in zip(str1.split(','), str2.split(',')):
    print(x + y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To address what the actual problem is, this line:</p>
<pre><code>for x,y in str1.split(','),str2.split(','):
</code></pre>
<p>Does not mean what you intend.</p>
<p>There are two things going on.</p>
<pre><code>for i in s:
</code></pre>
<p>Iterates over elements of <code>s</code>, assigning them to <code>i</code>. <code>s</code> in your case is:</p>
<pre><code>&gt;&gt;&gt; str1.split(','),str2.split(',')
(['John', 'Gabriel', 'Isaac', 'Albert'], ['Cena', 'Heins', 'Newton', 'Einstein'])
</code></pre>
<p>That is, a sequence of 2 elements, each being a list. So your loop would iterate twice with <code>i</code> being set to one of those lists each time.</p>
<p>On top of that, you're also trying to unpack <code>i</code>, effectively, trying to assign <code>x, y</code> with one of those lists, the same as this:</p>
<pre><code>&gt;&gt;&gt; x, y = ['John', 'Gabriel', 'Isaac', 'Albert']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack
</code></pre>
<p>This doesn't work because there are more values on the right, than names on the left.</p>
<p>The solution is to construct a new sequence that has pairs of values from each list, and iterate over that instead, as other have said, using <code>zip</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In case the number of fields in each string might be different you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest()</code></a> for Python 3, or <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>itertools.izip_longest()</code></a> in Python 2:</p>
<pre><code>from itertools import zip_longest

str1 = "John,Gabriel,Isaac,Albert,Aristotle"
str2 = "Cena,Heins,Newton,Einstein"

for firstname, surname in zip_longest(str1.split(','), str2.split(','), fillvalue=''):
    print('{}{}{}'.format(firstname, ' ' if firstname and surname else '', surname))
</code></pre>
<p>Output:</p>
<pre>
John Cena
Gabriel Heins
Isaac Newton
Albert Einstein
Aristotle
</pre>
<p>Otherwise, if you know for certain that the names are always paired, you can just use <code>zip()</code>.</p>
</div>
<span class="comment-copy">use <code>zip(str1.split(','),str2.split(','))</code></span>
<span class="comment-copy">Can the strings contain a different number of fields?</span>
<span class="comment-copy">in my case no, but in general yes they can have differnt number of fields</span>
