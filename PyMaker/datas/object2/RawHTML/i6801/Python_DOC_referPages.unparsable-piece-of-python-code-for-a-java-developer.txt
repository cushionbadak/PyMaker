<div class="post-text" itemprop="text">
<p>I am comming from the java world and I really have a hard time to understand the following piece of code.</p>
<pre><code>sortIx=['a2', 'a4', 'a1', 'a3', 'a5']
cItems=[sortIx]
print cItems
while len(cItems)&gt;0:
    cItems=[i[j:k] for i in cItems for j,k in ((0,len(i)/2), (len(i)/2,len(i))) if len(i)&gt;1] 
    print cItems
</code></pre>
<p>What exactly does this line do <code>cItems=[i[j:k] for i in cItems for j,k in ((0,len(i)/2), (len(i)/2,len(i))) if len(i)&gt;1]</code>? How would you write this in java (or scala or groovy)?</p>
<p><strong>EDIT</strong> </p>
<p>Thx to Reblochon Masque i was able to understand this! If one is interested, translated into groovy the statement would be something like this: </p>
<pre><code>cItems = cItems.findAll { it -&gt; it.size() &gt; 1}
               .collectMany { it -&gt; [it.subList(0, it.size().intDiv(2)), it.subList(it.size().intDiv(2), it.size())] }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What does this line do?</p>
<pre><code>cItems = [i[j:k] for i in cItems for j, k in ((0, len(i) / 2), (len(i) / 2, len(i))) if len(i) &gt; 1] 
</code></pre>
<p>It partitions each inner lists contained into <code>cItems</code> into two sublists of half the size (containing each half of the elements), except when the sublist contains only one element, then it is ignored.</p>
</div>
<span class="comment-copy">It's a list comprehension: <a href="http://www.secnetix.de/olli/Python/list_comprehensions.hawk" rel="nofollow noreferrer">secnetix.de/olli/Python/list_comprehensions.hawk</a></span>
<span class="comment-copy">It's a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. The things <code>(0,len(i)/2)</code> and <code>(len(i)/2,len(i)</code>, and the thing containing those two, are <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">tuples</a> (essentially lightweight lists).</span>
<span class="comment-copy">If this helps, try reading it out in your head and then re-coding it back into Python code. That's what I do with long list comprehensions.</span>
<span class="comment-copy">That is actually very poor code, it fails the principle of least surprise.</span>
