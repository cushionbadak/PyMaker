<div class="post-text" itemprop="text">
<p>my code is reading lines from csv files with corrupted text - mix of ascii and oct. And I'm trying to recover an original text in UTF-8 but I'm missing something obvious.</p>
<pre><code>line = "Tom\303\241\305\241 Vala" #Tomáš Vala
print(a)
TomÃ¡Å¡ Vala  #incorrect
</code></pre>
<p>If I type the line manually in command line the result is correct:</p>
<pre><code>&gt;&gt;&gt; a = b"Tom\303\241\305\241 Vala" 
&gt;&gt;&gt; a = a.decode("utf-8")
'Tomáš Vala'  # correct
</code></pre>
<p>But how to print the line as it is already in bytes?</p>
<pre><code>&gt;&gt;&gt; a = "Tom\303\241\305\241 Vala" 
&gt;&gt;&gt; print(a)
TomÃ¡Å¡ Vala  #incorrect

&gt;&gt;&gt; b = bytes(a, 'utf=8')
&gt;&gt;&gt; b.decode('utf=8')
'TomÃ¡Å¡ Vala' #incorrect
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to translate all literal backslash escape sequences. You could do this with a regular expression:</p>
<pre><code>import re

seq = re.compile(br'\\[0-8]{3}')
decode_seq = lambda m: bytes([int(m.group()[1:], 8)])
def repair(data):
    return seq.sub(decode_seq, data)
</code></pre>
<p>This decodes data in a <code>bytes</code> object:</p>
<pre><code>&gt;&gt;&gt; broken = rb"Tom\303\241\305\241 Vala"
&gt;&gt;&gt; repair(broken)
b'Tom\xc3\xa1\xc5\xa1 Vala'
&gt;&gt;&gt; repair(broken).decode('utf8')
'Tomáš Vala'
</code></pre>
<p>To wrap an existing file, you'd have to implement a <a href="https://docs.python.org/3/library/io.html#io.BufferedIOBase" rel="nofollow noreferrer"><code>io.BufferedIOBase</code> subclass</a> to translate bytes as you read:</p>
<pre><code>import re
from io import BufferedIOBase

class OctetEscapeDecodeWrapper(BufferedIOBase):
    def __init__(self, buffer):
        # we wrap a buffer, not a raw object, so don't use raw here.
        self._buffer = buffer
        self._remainder = b''

    def readable(self):
        return True

    def detach(self):
        result, self._buffer = self._buffer, None
        return result

    def _decode(self, data, 
                _seq=re.compile(br'\\[0-8]{3}'), 
                _decode=lambda m: bytes([int(m.group()[1:], 8)])):
        return _seq.sub(_decode, data)

    def read1(self, size=-1):
        self._remainder, data = b'', self._remainder + self._buffer.read1(size)
        trail = data.rfind(b'\\', -3)
        if trail &gt; -1 and all(48 &lt;= data[i] &lt;= 57 for i in range(trail + 1, len(data))):
            # data ends \dd or \d, retain until next read so we can decode then
            self._remainder, data = data[trail:], data[:trail]
        return self._decode(data)

    read = read1

    def readinto1(self, b):
        data = self.read1(len(b))
        b[:len(data)] = data
        return len(data)

    readinto = readinto1
</code></pre>
<p>This can be used to wrap an existing binary file to decode your data on the fly:</p>
<pre><code>import csv
from io import TextIOWrapper

with open(path_to_file, 'rb') as binary:
    text = TextIOWrapper(OctetEscapeDecodeWrapper(binary), encoding='utf8')
    reader = csv.reader(text)
    for row in reader:
        # ...
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from io import BytesIO, TextIOWrapper
&gt;&gt;&gt; sample = BytesIO(b'Tom\303\241\305\241 Vala, V\303\241lec, 1.1.1984,')
&gt;&gt;&gt; b = OctetEscapeDecodeWrapper(sample)
&gt;&gt;&gt; t = TextIOWrapper(b, encoding='utf8')
&gt;&gt;&gt; import csv
&gt;&gt;&gt; next(csv.reader(t))
['Tomáš Vala', ' Válec', ' 1.1.1984', '']
</code></pre>
</div>
<span class="comment-copy">Your <i>actual data</i> contains <code>\ddd</code> sequences? That's a literal backslash and three digits. That's not the same thing as using <code>\ddd</code> in a Python string literal, where those sequences have meaning. Can you give a sample of your actual data instead?</span>
<span class="comment-copy">Your data can be defined in a Python string literal as <code>r"Tom\303\241\305\241 Vala"</code>, note the <code>r</code> at the start, or by doubling the backslashes.</span>
<span class="comment-copy">The file contains lines in format: Tom\303\241\305\241 Vala, V\303\241lec, 1.1.1984,</span>
<span class="comment-copy">It works perfectly. But as I'm new to python and programming itself, I have to catch first what have you done here. Thx</span>
<span class="comment-copy">@Panther: I added a decoding wrapper to decode file data on the fly.</span>
<span class="comment-copy">Than you very much for your generous help. I learned something new today.</span>
