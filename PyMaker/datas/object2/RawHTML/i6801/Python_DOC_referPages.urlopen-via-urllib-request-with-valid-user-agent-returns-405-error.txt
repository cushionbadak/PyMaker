<div class="post-text" itemprop="text">
<p>My question is about the urllib module in python 3. The following piece of code</p>
<pre><code>import urllib.request
import urllib.parse

url = "https://google.com/search?q=stackoverflow"
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)'}

try:
    req = urllib.request.Request(url, headers=headers)
    resp = urllib.request.urlopen(req)
    file = open('googlesearch.txt.', 'w')
    file.write(str(resp.read()))
    file.close()

except Exception as e:
    print(str(e))
</code></pre>
<p>works as I expect and writes the content of the google search 'stackoverflow' in a file. We need to set a valid User-Agent, otherwise google does not allow the request and returns a 405 Invalid Method error.</p>
<p>I think the following piece of code</p>
<pre><code>import urllib.request
import urllib.parse

url = "https://google.com/search"
values = {'q': 'stackoverflow'}
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)'}

data = urllib.parse.urlencode(values)
data = data.encode('utf-8')

try:
    req = urllib.request.Request(url, data=data, headers=headers)
    resp = urllib.request.urlopen(req)
    file = open('googlesearch.txt.', 'w')
    file.write(str(resp.read()))
    file.close()

except Exception as e:
    print(str(e))
</code></pre>
<p>should produce the same output as the first one, as it is the same google search with the same User-Agent. However, this piece of code throws an exception with message: 'HTTP Error 405: Method Not Allowed'. </p>
<p>My question is: what is wrong with the second piece of code? Why does it not produce the same output as the first one?</p>
</div>
<div class="post-text" itemprop="text">
<p>You get the 405 response because you are sending a POST request instead of a GET request. <em>Method not allowed</em> should not have anything to do with your user-agent header. It's about sending a http request with a incorrect method (get, post, put, head, options, patch, delete).</p>
<p>Urllib sends a POST because you include the <code>data</code> argument in the Request constructor as is documented here:</p>
<p><a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.Request" rel="nofollow noreferrer">https://docs.python.org/3/library/urllib.request.html#urllib.request.Request</a></p>
<blockquote>
<p>method should be a string that indicates the HTTP request method that will be used (e.g. 'HEAD'). If provided, its value is stored in the method attribute and is used by get_method(). The default is 'GET' if data is None or 'POST' otherwise.</p>
</blockquote>
<p>It's highly recommended to use the requests library instead of urllib, because it has a much more sensible api. </p>
<pre><code>import requests
response = requests.get('https://google.com/search', {'q': 'stackoverflow'})
response.raise_for_status()  # raise exception if status code is 4xx or 5xx
with open('googlesearch.txt', 'w') as fp:
    fp.write(response.text) 
</code></pre>
<p><a href="https://github.com/requests/requests" rel="nofollow noreferrer">https://github.com/requests/requests</a></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.4/howto/urllib2.html#data" rel="nofollow noreferrer">https://docs.python.org/3.4/howto/urllib2.html#data</a></p>
<blockquote>
<p>If you do not pass the data argument, urllib uses a GET request. One
  way in which GET and POST requests differ is that POST requests often
  have “side-effects”: they change the state of the system in some way
  (for example by placing an order with the website for a hundredweight
  of tinned spam to be delivered to your door).</p>
</blockquote>
</div>
<span class="comment-copy">By using <code>data=</code> you're making it a POST request... you want to append the encoded values to the end of the URL...</span>
<span class="comment-copy">I see, thanks! I will use the requests library instead.</span>
