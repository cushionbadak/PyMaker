<div class="post-text" itemprop="text">
<p>I have the following structure for my Python modules:</p>
<pre><code>.
├── a
│   ├── __init__.py
│   ├── aa.py
│   └── b
│       ├── __init__.py
│       └── bb.py
└── root.py
</code></pre>
<h3>Contents of aa.py</h3>
<pre><code>from b.bb import hello_bb

def hello_aa():
    hello_bb()
    print("hello from aa.py")
</code></pre>
<h3>Contents of bb.py</h3>
<pre><code>def hello_bb():
    print("hello from bb.py")
</code></pre>
<h3>Contents of root.py</h3>
<pre><code>from a.aa import hello_aa

hello_aa()
</code></pre>
<p>With Python 3.5.1, executing <code>python root.py</code> gives the following error:</p>
<pre><code>Traceback (most recent call last):
  File "root.py", line 1, in &lt;module&gt;
    from a.aa import hello_aa
  File ".../a/aa.py", line 1, in &lt;module&gt;
    from b.bb import hello_bb
ImportError: No module named 'b'
</code></pre>
<p>Both the <code>__init__.py</code> are empty.</p>
<p>Anything else I am missing to make this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">relative import</a> inside a package (see <a href="https://www.python.org/dev/peps/pep-0328/#rationale-for-relative-imports" rel="nofollow noreferrer">PEP 328</a>)</p>
<h3>aa.py</h3>
<pre><code>from .b.bb import hello_bb
</code></pre>
<h3>root.py</h3>
<pre><code>from .a.aa import hello_aa
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the <code>aa.py</code> file you must import <code>hello_bb</code> like so:</p>
<pre><code>from .b.bb import hello_bb

def hello_aa():
    hello_bb()
    print("hello from aa.py")
</code></pre>
</div>
<span class="comment-copy">from .b.bb imort hello_bb (a dot before the b)</span>
<span class="comment-copy">I don't have to use relative import in <code>root.py</code>. Any ideas why it works there?</span>
<span class="comment-copy">@armundle, I think it is because there is no <code>__init__.py</code> in the directory of <code>root.py</code>. BTW this directory should not be considered as a package because of this. You have module <code>root.py</code> and package <code>a</code> with submodule <code>b</code>.</span>
