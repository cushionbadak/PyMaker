<div class="post-text" itemprop="text">
<p>Running</p>
<pre><code>def foo(bar: function):
    bar()

foo(lambda: print("Greetings from lambda."))
</code></pre>
<p>with Python 3.6.2 yields</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'function' is not defined
</code></pre>
<p>However, removing the type annotation works as expected.</p>
<p>PyCharm additionally gives the warning <code>'function' object is not callable</code> on line <code>bar()</code>.</p>
<hr/>
<p><strong>edit:</strong> As stated in my comment of Pietersâ€™ answer, this question raised, because</p>
<pre><code>def myfunction():
    pass

print(myfunction.__class__)
</code></pre>
<p>outputs <code>&lt;class 'function'&gt;</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no name <code>function</code> defined in Python, no. Annotations are still Python expressions and must reference valid names.</p>
<p>You can instead use type hinting to say <code>bar</code> is a <em>callable</em>; use <a href="https://docs.python.org/3/library/typing.html#typing.Callable" rel="noreferrer"><code>typing.Callable</code></a>:</p>
<pre><code>from typing import Callable

def foo(bar: Callable[[], Any]):
    bar()
</code></pre>
<p>This defines a callable type that takes no arguments and whose return value can be anything (we don't care).</p>
</div>
<span class="comment-copy">Thanks, I was expecting it to be valid, because checking a functions class, via <code>print(myfunction.__class__)</code> yields <code>&lt;class 'function'&gt;</code>.</span>
<span class="comment-copy">@qwertz: sure, but that  doesn't mean that there is a global name <code>function</code> referencing the type.</span>
