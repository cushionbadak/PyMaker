<div class="post-text" itemprop="text">
<p>My subprocess command is not working with quotes.</p>
<pre><code>tail = subprocess.Popen('tail -f -n 1 /mnt/syslog/**/*.log | egrep -v \'^$|mnt\'',\
            shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
</code></pre>
<p>When I execute python file.py I get a empty line:</p>
<pre><code># python main.py 
^CTraceback (most recent call last):
  File "main.py", line 18, in &lt;module&gt;
    main()
  File "main.py", line 12, in main
    line = tail.stdout.readline()
KeyboardInterrupt
</code></pre>
<p>It works fine in bash as you can see:</p>
<pre><code># tail -f -n 1 /mnt/syslog/**/*.log | egrep -v '^$|mnt'
Sep  9 22:44:07 x.x.x.x : %LINK-3-UPDOWN: Interface GigabitEthernet1/0/19, changed state to down
Sep  9 18:32:56 x.x.x.x : %LINK-5-CHANGED: Interface GigabitEthernet1/0/24, changed state to administratively down
</code></pre>
<p>What is wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think the problem is the quotes at all.</p>
<p>The command is doing tail -f, which by definition never terminates (it keeps tailing the file(s)). When you call it at the shell, you immediately see some output (maybe, depending on whether the grep matches). But it probably doesn't return to the prompt, because the tail is still running.</p>
<p>If you really want to be following the file, then you shouldn't be using communicate() as that expects a terminating process. You have to keep reading from stdout (and stderr, to be safe!) until the process dies.</p>
<p>But I suspect that all you need to do is to remove the -f on the tail:</p>
<pre><code>tail = subprocess.Popen('tail -n 1 /mnt/syslog/**/*.log | egrep -v \'^$|mnt\'',\
        shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
</code></pre>
<p>If you remove the -f, then communicate() is exactly the right call to use.</p>
<p>Or, you can just use the check_output helper:</p>
<pre><code>subprocess.check_output('tail...', shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to run communicate() on Popen instance. It should look like</p>
<pre><code>tail = subprocess.Popen('tail -f -n 1 /mnt/syslog/**/*.log | egrep -v \'^$|mnt\'',
                        shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
stdout, stderr = tail.communicate()
print(stdout)
</code></pre>
<p>If you need unicode string instead of bytes use <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer">decode()</a>:</p>
<pre><code>print(stdout.decode())
</code></pre>
<p><strong>Update:</strong>
Because of -f flag to tail you should get output live:</p>
<pre><code>tail = subprocess.Popen('tail -f -n 1 /mnt/syslog/**/*.log | egrep -v \'^$|mnt\'',
                        shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
for line in tail.stdout:
    print(line)
</code></pre>
<p>It's not best method, more you can find in <a href="https://stackoverflow.com/questions/18421757/live-output-from-subprocess-command">this topic</a>.</p>
</div>
<span class="comment-copy">What problem are you trying to solve? Is it that your script is hanging with no output at all (that's caused by the <code>-f</code> option, which is tricky to use with subprocess)? Or is it that you are getting an empty string in the <code>line</code> variable?</span>
<span class="comment-copy">The problem is that there is no output.. I suspect it's the quotes that is causing this.. If I were to remove the egret statement and input as  tail -f -n 1 /mnt/syslog/**/*.log, it works just fine.. I see output when running it through Python..</span>
<span class="comment-copy">I don't think it's a quoting issue. I think it's the combination of <code>-f</code> with the pipe with subprocess. For example, drop the <code>-f</code> and it will also work for you (at least it does for me). "Work" in the sense of giving some output.</span>
<span class="comment-copy">Hummm.. But it already works fine with the -f without the egrep? I get the expected output..</span>
<span class="comment-copy">One question is why do you think you need <code>egrep</code> at all. Let Python do that filtering.</span>
<span class="comment-copy">It doesn't work...</span>
<span class="comment-copy">Any error message? I don't have your logs, but simple <b>ls</b> working perfectly for me with python 3.6.</span>
<span class="comment-copy">No error messages.. Just no output.. Now if I drop the egrep portion, it works.. I suspect it's the quotes within the egrep that is not making it work..</span>
<span class="comment-copy">I've updated my answer and added link to another question about live output.</span>
