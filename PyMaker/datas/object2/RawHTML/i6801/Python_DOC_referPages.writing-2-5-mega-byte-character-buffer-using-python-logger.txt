<div class="post-text" itemprop="text">
<p>In a multithreaded application, I have a situation where I need to write a set of log messages (with upper limit of 50K log messages) together, as a block, rather than writing each one by one. </p>
<p>I do not want to use the thread locking here (to make my block logging as a critical section) as there are obvious side effects e.g. serialization, synchronization, which slows down the performance. </p>
<p>To avoid the synchronization, I am thinking of using a per thread buffer such that each thread will be using its own buffer. It will also clean it before or after using the buffer i.e. once the logs are written to the file. </p>
<p>I am thinking of first writing these logs into a buffer and then writing the buffer into the log file using python logger's log message API </p>
<pre><code>logger.info("Log message")
</code></pre>
<p>If I consider the size of the log message as about 50 bytes, the total size of this buffer comes out to be 2.5MBytes (50K x 50 bytes) </p>
<p>I want to understand how python's logger is going to work with this size of buffer? Whether it will affect the performance and in what way if it does?</p>
<p>Let me know if there are other python APIs available to support such kind of logging.  </p>
</div>
<div class="post-text" itemprop="text">
<p>No, python will have no problem writing 2.5MB buffers to file.</p>
<p>Issues like disk I/O, whether the write blocks your main thread, etc may affect performance, but generally python can easily dump a 2.5MB buffer to disk.</p>
</div>
<span class="comment-copy">Your performance question is difficult to answer - does the logger live in it's own thread or process? Does the write block? Is the destination a local file on an SSD drive, or are you using something like SMTPHandler?</span>
<span class="comment-copy">Although it doesn't answer your question, logging.QueueHandler and QueueListener where designed to solve the kind of problems you're talking about: <a href="https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Hi @DanielleM, the logger API is called by the same thread, which is going to have and write into its own buffer (it does not have its own process). Whether write blocks -- I think it would, as I am using "logging.handlers.RotatingFileHandler". Both threads are going to write into same log file. I am not using SSD.  My main concern right now, is how Python logger is going to react to the 2.5MB buffer. Is it going to write it successfully and if there are going to be any side effects.</span>
<span class="comment-copy">@DanielleM. I will try logging.QueueHandler and QueueListener, and will see if it solves my problem. Never thought about it.</span>
