<div class="post-text" itemprop="text">
<p>I'm going through the <a href="https://api.mongodb.com/python/current/tutorial.html" rel="nofollow noreferrer">PyMongo tutorial</a>  and there's one thing that I don't understand.</p>
<p>We are shown that we can create a database collection like this: </p>
<pre><code>&gt;&gt;&gt;client = MongoClient()   
&gt;&gt;&gt;print(client)

MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True) 

&gt;&gt;&gt;db = client.test_database
&gt;&gt;&gt;print(db)

Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True), 'test_database')

&gt;&gt;&gt;collection = db.test_collection #posts is the collection.
&gt;&gt;&gt;print(collection)

Collection(Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True), 'test_database'), 'test_collection')
</code></pre>
<p>My initial thought was: "Did they make sure to include a <code>test_database</code> attribute for the client and a <code>test_collection</code> attribute for the database just to make it work with the tutorial?" But further experimentation showed me that I could create databases and collections in this way with any "attribute name" I please! For example:</p>
<pre><code>&gt;&gt;&gt;client = MongoClient()
&gt;&gt;&gt;db = client.foo
&gt;&gt;&gt;print(db)

Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True), 'foo')

&gt;&gt;&gt;collection = db.bar
&gt;&gt;&gt;print(collection)

Collection(Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True), 'foo'), 'bar')
</code></pre>
<p>How does this work in Python? I've tried to understand it by reading the pymongo files in the GitHub repository but it's quite difficult for a newbie to understand.</p>
</div>
<div class="post-text" itemprop="text">
<p>MongoClient overrides a "magic" method, <code>__getattr__</code>. Whenever you access an attribute on a MongoClient object that isn't actually a property or attribute of the object, for example when you access "test_database", the Python interpreter calls:</p>
<pre><code>client.__getattr__("test_database")
</code></pre>
<p><a href="https://github.com/mongodb/mongo-python-driver/blob/3.5.1/pymongo/mongo_client.py#L1018" rel="nofollow noreferrer">The implementation of <code>MongoClient.__getattr__</code></a> then creates a Database object and returns it.</p>
<p>Database also overrides <code>__getattr__</code> to return a Collection with any name.</p>
<p>Both classes also override <code>__getitem__</code> so that bracketed access works:</p>
<pre><code>client["test_database"]
</code></pre>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">See the <code>__getattr__</code> docs here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to implement <code>__getattr__</code> method in your class to make it work.<br/>
Simply speaking - whenever you access an attribute that is not defined in the class, <code>__getattr__</code> method will be invoked (it's actually a little more complicated). See example below:</p>
<pre><code>class Database(object):

    def __init__(self, host):
        self.host = host

    def __getattr__(self, name):
        return Collection(name)

class Collection(object):

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return '&lt;Collection name={0}&gt;'.format(self.name)

&gt;&gt;&gt; db = Database('www.example.com')
&gt;&gt;&gt; db.host
'example.com'
&gt;&gt;&gt; db.foo
&lt;Collection name=foo&gt;
&gt;&gt;&gt; db.bar
&lt;Collection name=bar&gt;
</code></pre>
<p>You can read more about <code>__getattr__</code> here:
<a href="https://stackoverflow.com/questions/16237659/python-how-to-implement-getattr">Python: how to implement __getattr__()?</a></p>
</div>
