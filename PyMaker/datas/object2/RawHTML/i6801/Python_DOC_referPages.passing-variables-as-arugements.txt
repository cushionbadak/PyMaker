<div class="post-text" itemprop="text">
<p>Im passsing two varibales to another python file, in this manner. <br/></p>
<pre><code> os.system('"F:\Main.py" %s `%s' % (id, value))
</code></pre>
<p>Refer the above example:</p>
<h1>File 1.py</h1>
<pre><code>id="tester"
value="foo boo"
os.system('"F:\Main.py" %s %s' % (id, value))
</code></pre>
<h1>Main.py</h1>
<pre><code>argu1=sys.argv[1]
argu2=sys.argv[2]
print("Argument 1 is", argu1)
print("Argument 2 is", argu2)
</code></pre>
<p><b>It Prints</b></p>
<pre><code>Argument 1 is tester
Argument 1 is foo
</code></pre>
<p>As you may have noticed the <i>'boo'</i> part is missing. <br/>Why is it missing and how can i fix this?</p>
<p><b>PS.</b>
<br/>
The reason im using os.system instead of sub process is because i need <i>File 1.py</i> to continue its duty without have to waiting for <i>Main.py</i> to complete</p>
</div>
<div class="post-text" itemprop="text">
<p><code>"boo"</code> is <code>sys.argv[3]</code>, because you used string formatting with no escaping to build your command line string, resulting in the call</p>
<pre><code>os.system('"F:\\Main.py" tester foo boo')
</code></pre>
<p>Rather than using <code>os.system</code>, it's much safer to execute subprocesses with the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code> module</a>:</p>
<pre><code>import subprocess

subprocess.run(["F:\\Main.py", id, value])
</code></pre>
<p>but considering that the other program is also a Python program, it sounds like you're using separate scripts to organize your code when you should probably be using modules and functions, so launching separate processes with any tool is probably not how you should go about this.</p>
<p>If you don't want to wait for the worker to finish, you can use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen</code></a> instead of <code>subprocess.run</code>. <code>os.system</code> would never have given you that behavior; <code>os.system</code> also waits for the worker to finish. It may be better to use <code>threading</code> or <code>multiprocessing</code>, though.</p>
<p>Also, backslashes should be escaped, as in <code>"F:\\Main.py"</code>, not <code>"F:\Main.py"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This happens because OS split argument by space. For managed, it needs to put a variable in <code>"name boo"</code>. In your case:</p>
<pre><code>os.system('"F:\Main.py" "{}" "{}"'.format(id, value))
</code></pre>
</div>
<span class="comment-copy">This is why you shouldn't build command line strings for <code>os.system</code>.</span>
<span class="comment-copy">The reason im using os.system instead of sub process is because i need File 1.py to continue its duty without have to waiting for Main.py to complete</span>
<span class="comment-copy">@Elo97234c: <code>os.system</code> also waits for the other process to finish.</span>
<span class="comment-copy">No it does not. It starts the python file and that is it. Its not a sub process. Its a new process</span>
<span class="comment-copy">@Elo97234c: <code>os.system</code> returns the exit status of the new process; how do you imagine it would do that without waiting for the process to exit?</span>
<span class="comment-copy">Thanks for the info mate!</span>
<span class="comment-copy">My full file path would be, "F:\Program Test\Main.py" by trying out your code it get '''F:\Program' is not recognized as an internal or external command, operable program or batch file.</span>
<span class="comment-copy">The spacing between 'Program' and 'Tes't is causing the issue i tried replacing with ''\\" and added '@' to the begining still no luck</span>
