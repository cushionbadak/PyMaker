<div class="post-text" itemprop="text">
<p>I have the following code that takes a string biology_score and after splitting it, converts it into a string ('b'). The desired output is to produce what I have constructed manually below (a list of users with their corresponding scores)</p>
<p>I would be interested in the most efficient way to construct a for loop to achieve this with a list. Note: I am aware that the best way to approach this would be a dictionary, but these purposes I want to use a list. </p>
<p><strong>Code:</strong></p>
<pre><code>biology_score="user1,30,user2,60,user3,99"
print(biology_score[1]) #for testing purposes
b=biology_score.split(",")
print(b) #prints lists
print(b[2]) #prints element in index 2 in the list

#desired output
print(b[0],"scored",b[1])
print(b[2],"scored",b[3])
print(b[4],"scored",b[5])

#create a for loop to do the above
</code></pre>
<p><strong>Required answer</strong></p>
<ol>
<li><p>The most elegant solution (for loop to produce the above by looping through the list)</p></li>
<li><p>The easiest/quickest method to convert the string to a dictionary, using the least number of steps, and then achieving the same output (user: score)</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if this is what you're looking for:</p>
<pre><code>biology_score="user1,30,user2,60,user3,99"
print(biology_score[1]) #for testing purposes
b=biology_score.split(",")
biology_dict = {}

for i in range(0, len(b), 2):  #looks only at even indices
    print(b[i],"scored",b[i+1])
    biology_dict[b[i]] = b[i+1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If this is what you need.</p>
<pre><code>#create a for loop to do the above
for i in range(0,len(b)-1,2):
  print(b[i],"scored",b[i+1])
</code></pre>
<p>Note: Python versions &lt;3.6 does not support element orders. So, when you go with <code>dict</code>, the order might not be retained.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the options is to use dictionary</p>
<p>If the iterables are of uneven length, missing values are filled-in with fillvalue</p>
<pre><code>import itertools    
d = dict(itertools.zip_longest(*[iter(biology_score.split(","))] * 2, 
fillvalue=""))

for k, v in d.items():
    print(k,'scored', v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>grouper</code> recipe from the itertools module:</p>
<pre><code>import itertools
def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>Then:</p>
<pre><code>for user, score in grouper(b, 2):
    print(user, 'scored', score)
</code></pre>
<p>To make a dictionary:</p>
<pre><code>dictionary = dict(grouper(b, 2))
for user, score in dictionary.items():
    print(user, 'scored', score)
</code></pre>
<p>Or use an OrderedDict if the original order of the items should be preserverd.</p>
</div>
<div class="post-text" itemprop="text">
<p>Mostly a rewrite of @chngzm's answer, and it's probably unsuitable for your teaching purposes, but using a generator is quite nice:</p>
<pre><code>def user_scores(scores):
  s = scores.split(",")
  for idx in range(0, len(s), 2):
    yield s[idx], s[idx+1]

biology_score="user1,30,user2,60,user3,99"

for user, score in user_scores(biology_score):
  print("{0} scored {1}".format(user, score))

biology_dict = dict(s for s in user_scores(biology_score))
for user in biology_dict:
  print("{0} scored {1}".format(user, biology_dict[user]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One Pythonic way to get the desired result is to use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>biology_score = "user1,30,user2,60,user3,99"
values = biology_score.split(',')
print(dict(zip(values[::2], values[1::2])))
# {'user2': '60', 'user3': '99', 'user1': '30'}
</code></pre>
<p>If you want integer scores, you can use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>print(dict(zip(values[::2], map(int, values[1::2]))))
# {'user2': 60, 'user3': 99, 'user1': 30}
</code></pre>
</div>
<span class="comment-copy">Your second question is answered here: <a href="https://stackoverflow.com/questions/4576115/convert-a-list-to-a-dictionary-in-python" title="convert a list to a dictionary in python">stackoverflow.com/questions/4576115/â€¦</a></span>
<span class="comment-copy">Sorry, ignore previous comment - this is beautiful. works fine. Thank you!</span>
<span class="comment-copy">can you please clearly explain the line d = dict(itertools.zip_longest(*[iter(biology_score.split(","))] * 2,    Thanks!</span>
