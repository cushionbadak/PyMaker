<div class="post-text" itemprop="text">
<p>In C# I would this:</p>
<pre><code>string num1 = "15000";
string num2 = "800";

int a = num1.Length;
int b = num2.Length;
int required_space = a - b;

string input_space = new string(' ', required_space -1);

Console.WriteLine(num1);
Console.WriteLine("{0}{1}{2}", input_space, "+", num2);
</code></pre>
<p>And I would get :</p>
<pre><code>            15000
             +800
</code></pre>
<p>last digit aligned no matter the length of num1.  </p>
<p>How do I do that in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/stdtypes.html?highlight=rjust#str.rjust" rel="nofollow noreferrer"><code>string.rjust()</code></a> to right justify the second number using the width of <code>num1</code>:</p>
<pre><code>num1 = '15000'
num2 = '800'

print(num1)
print('+{}'.format(num2).rjust(len(num1)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>numbers = [1, 2, 3, 40, 50, 100, 9001, 10]
max_len = len(str(max(numbers)))

for number in numbers:
    print(f'And the number is: { number :&gt;{ max_len }} !')
</code></pre>
<p><code>f''</code> is a special string literal that supports most of formatting options described here: <a href="https://docs.python.org/3.4/library/string.html#formatspec" rel="nofollow noreferrer">https://docs.python.org/3.4/library/string.html#formatspec</a></p>
</div>
<span class="comment-copy">You can create a string with the right number of spaces using <code>' '*(required_space-1)</code> The rest is just standard <code>print</code> calls, which I'm sure you get from an introductory python tutorial.</span>
<span class="comment-copy">Yeah I got it, since it's double space I had to do    '    ' * (required_space-2 )'.  Thank you @AChampion</span>
<span class="comment-copy">Note: <code>f</code> strings are new in 3.6; you can't count on support being available everywhere yet.</span>
