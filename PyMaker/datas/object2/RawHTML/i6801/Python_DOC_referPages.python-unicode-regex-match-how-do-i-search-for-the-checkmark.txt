<div class="post-text" itemprop="text">
<p>I am trying to match against lines that contain a checkmark in them: ✓</p>
<p>I'm using python3.</p>
<p>The unicode encoding can be read about here: <a href="https://codepoints.net/U+2713?lang=en" rel="nofollow noreferrer">https://codepoints.net/U+2713?lang=en</a></p>
<p>The line I'm trying to match against looks like this:</p>
<pre><code>✓ Chrome on MAC - MySite.com - version-1
</code></pre>
<p><code>re.match("✓", line)</code> does not work.  <code>re.match("/u2713", line)</code> does not work either.</p>
<p>How can I determine if the <code>line</code> contains a ✓?</p>
<p>--- UPDATE ---</p>
<p><strong>solved</strong>: apparently there was an invisible character of some sort preceding the ✓ and this caused the <code>match</code> operator to fail.  Thanks to @NickT and @EricDuminil for clueing me in.  Also, the <code>in</code> operator appears to be easier and safer, so I'm marking that answer as correct.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't even need any regex. You could use the <a href="https://docs.python.org/3/reference/expressions.html#membership-test-details" rel="nofollow noreferrer"><code>in operator</code></a>:</p>
<pre><code>&gt;&gt;&gt; "✓" in "✓ Chrome on MAC - MySite.com - version-1"
True
&gt;&gt;&gt; "✓" in "Chrome on MAC - MySite.com - version-1"
False
</code></pre>
<p>If you want to display the lines with a checkmark inside <code>'marks.txt'</code>, you can write:</p>
<pre><code>with open('marks.txt') as f:
    for line in f:
        if "✓" in line:
            print(line, end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a fool-proof method, specify the character by name:</p>
<pre><code>&gt;&gt;&gt; line = '✓ Chrome on MAC - MySite.com - version-1'
&gt;&gt;&gt; re.match('\N{CHECK MARK}', line)
&lt;_sre.SRE_Match object; span=(0, 1), match='✓'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How can I determine if the line contains a ✓?</p>
</blockquote>
<p>Example:</p>
<pre><code>import re


text = '''
123 456 789
✓ 123 456 789
123 456 789
123 456 ✓ 789
123 456 789
'''

for m in re.finditer('^.*✓.*$', text, re.MULTILINE):
    print('line:', m.group(0))
</code></pre>
<p>Prints:</p>
<pre><code>line: ✓ 123 456 789
line: 123 456 ✓ 789
</code></pre>
</div>
<span class="comment-copy">You could try one of these <code>ur"\u2713"</code> or <code>ur"\x{2713}"</code> or <code>ur"\u{2713}"</code> or <code>ur"✓"</code></span>
<span class="comment-copy">Also, make sure the target string is encoded in Unicode, i.e. <code>target = ur"✓ Chrome on MAC - MySite.com - version-1"</code></span>
<span class="comment-copy">If you're using Python 3, <code>u</code>'s in front of strings are meaningless.</span>
<span class="comment-copy">Does the line <i>start with</i> the checkmark? <code>re.match</code> <b>only</b> matches from the start of the provided string, use <code>.search</code> to look anywhere in the string (or better yet, <code>in</code> if you don't need any wildcards).</span>
<span class="comment-copy">@NickT Good comment. I hate <code>re.match</code> with a passion. It's simple enough to add a <code>'^'</code> to <code>re.search</code>, I don't understand why <code>re.match</code> is even here. It's a perfect method if you want to spend an hour looking for a stupid bug.</span>
