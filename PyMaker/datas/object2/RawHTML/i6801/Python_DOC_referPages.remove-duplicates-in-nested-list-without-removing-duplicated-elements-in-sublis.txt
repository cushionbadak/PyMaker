<div class="post-text" itemprop="text">
<p>I am trying to remove duplicated sublists from a nested list that looks like this: </p>
<pre><code>result_set = [
    ['MEMS', 'MEMS', 'MEMS', 'MEMS'],
    ['Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics'],
    ['Microfabrication', 'Microfabrication', 'Microfabrication', 'Clean-Room Microfabrication', 'Microfabrication', 'Microfabrication'],
    ['Photolithography', 'Photolithography', 'Lithography', 'Photolithography'],
    ['MEMS', 'MEMS', 'MEMS', 'MEMS']
    ]
</code></pre>
<p>The output I would like is the following: </p>
<pre><code>result_set = [
    ['MEMS', 'MEMS', 'MEMS', 'MEMS'],
    ['Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics'],
    ['Microfabrication', 'Microfabrication', 'Microfabrication', 'Clean-Room Microfabrication', 'Microfabrication', 'Microfabrication'],
    ['Photolithography', 'Photolithography', 'Lithography', 'Photolithography']
    ]
</code></pre>
<p>Note that basically the last element ['MEMS', 'MEMS', 'MEMS', 'MEMS'] is no longer there. <a href="https://stackoverflow.com/questions/15037226/python-remove-duplicate-items-from-nested-list">Similar questions</a> have been asked and I adapted the following code from there: </p>
<pre><code>result_set = set(frozenset(x) for x in result)
lst = [list(x) for x in result_set]
</code></pre>
<p>My problem is that I get the following output: </p>
<pre><code> result_set = [['MEMS'], ['Microfluidics'], ['Microfabrication', 'Clean-Room Microfabrication'], ['Photolithography', 'Lithography']]
</code></pre>
<p>Notice it also removes the duplicated elements within the sublist. I do not want this because my goal afterwards is to plot a histogram. Say for instance -&gt; MEMS has 4 ocurrences. Therefore I want to keep track of the number of elements each sublist had initially.</p>
</div>
<div class="post-text" itemprop="text">
<p>If order does not matter, you can use a <code>set</code>:</p>
<pre><code>final_data = list(map(list, set(map(tuple, result_set))))
</code></pre>
<p>Output:</p>
<pre><code>[['Microfabrication', 'Microfabrication', 'Microfabrication', 'Clean-Room Microfabrication', 'Microfabrication', 'Microfabrication'], ['Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics'], ['Photolithography', 'Photolithography', 'Lithography', 'Photolithography'], ['MEMS', 'MEMS', 'MEMS', 'MEMS']]
</code></pre>
<p>If order does matter, you can try this:</p>
<pre><code>final_data = []
for result in result_set:
    if result not in final_data:
         final_data.append(result)
</code></pre>
<p>Output:</p>
<pre><code>[['MEMS', 'MEMS', 'MEMS', 'MEMS'], ['Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics', 'Microfluidics'], ['Microfabrication', 'Microfabrication', 'Microfabrication', 'Clean-Room Microfabrication', 'Microfabrication', 'Microfabrication'], ['Photolithography', 'Photolithography', 'Lithography', 'Photolithography']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>collections.OrderedDict</code> to retrain unique items <em>and</em> order.</p>
<pre><code>from collections import OrderedDict

out = list(
          map(
              list, OrderedDict.fromkeys(map(tuple, result_set)).keys()
            )
     )
print(out)

[['MEMS', 'MEMS', 'MEMS', 'MEMS'],
 ['Microfluidics',
  'Microfluidics',
  'Microfluidics',
  'Microfluidics',
  'Microfluidics',
  'Microfluidics',
  'Microfluidics'],
 ['Microfabrication',
  'Microfabrication',
  'Microfabrication',
  'Clean-Room Microfabrication',
  'Microfabrication',
  'Microfabrication'],
 ['Photolithography', 'Photolithography', 'Lithography', 'Photolithography']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sort the list then make a new list using the keys generated by <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby()</a>.</p>
<pre><code>import itertools
result_set.sort()
new_set = [k for k,g in itertools.groupby(result_set)]
</code></pre>
</div>
<span class="comment-copy">If your question was answered, you should <a href="https://stackoverflow.com/help/someone-answers">accept</a> the answer that helped most.</span>
