<div class="post-text" itemprop="text">
<p>The following code essentially does the following:</p>
<ol>
<li>Takes file contents and reads it into two lists (stripping and splitting)</li>
<li>Zips the two lists together into a dictionary</li>
<li>Uses the dictionary to create a "login" feature.</li>
</ol>
<p>My question is: is there an easier more efficient (quicker) method of creating the dictionary from the file contents:</p>
<p><strong>File:</strong></p>
<pre><code>user1,pass1
user2,pass2
</code></pre>
<p><strong>Code</strong></p>
<pre><code>def login():
    print("====Login====")

    usernames = []
    passwords = []
    with open("userinfo.txt", "r") as f:
        for line in f:
            fields = line.strip().split(",")
            usernames.append(fields[0])  # read all the usernames into list usernames
            passwords.append(fields[1])  # read all the passwords into passwords list

            # Use a zip command to zip together the usernames and passwords to create a dict
    userinfo = zip(usernames, passwords)  # this is a variable that contains the dictionary in the 2-tuple list form
    userinfo_dict = dict(userinfo)
    print(userinfo_dict)

    username = input("Enter username:")
    password = input("Enter password:")

    if username in userinfo_dict.keys() and userinfo_dict[username] == password:
        loggedin()
    else:
        print("Access Denied")
        main()
</code></pre>
<p>For your answers, please:</p>
<p>a) Use the existing function and code to adapt
b) provide explanations /comments (especially for the use of split/strip)
c) If with json/pickle, include all the necessary information for a beginner to access</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Just by using the <a href="https://docs.python.org/3/library/csv.html#module-contents" rel="nofollow noreferrer"><code>csv</code> module</a> :</p>
<pre><code>import csv

with  open("userinfo.txt") as file:
    list_id = csv.reader(file)
    userinfo_dict = {key:passw  for key, passw in list_id}

print(userinfo_dict)
&gt;&gt;&gt;{'user1': 'pass1', 'user2': 'pass2'}
</code></pre>
<p><code>with open()</code> is the same type of context manager you use to open the file, and handle the close.</p>
<p><code>csv.reader</code> is the method that loads the file, it returns an object you can iterate directly, like in a comprehension list.  But instead of using a comprehension list, this use a comprehension dict.</p>
<p>To build a dictionary with a comprehension style, you can use this syntax :</p>
<pre><code>new_dict = {key:value for key, value in list_values} 
# where list_values is a sequence of couple of values, like tuples: 
# [(a,b), (a1, b1), (a2,b2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use <code>csv</code> module you can simply do something like:</p>
<pre><code>userinfo_dict = dict() # prepare dictionary
with open("userinfo.txt","r") as f:
    for line in f: # for each line in your file
        (key, val) = line.strip().split(',')
        userinfo_dict[key] = val
# now userinfo_dict is ready to be used
</code></pre>
</div>
<span class="comment-copy">never keep passwords in cleartext, you should use some kind of hashing function e.g. <a href="https://passlib.readthedocs.io/" rel="nofollow noreferrer">passlib.readthedocs.io</a></span>
<span class="comment-copy">can you please explain, for beginners and teaching purposes, the key:passw for key part. could any variables be used there, I assume? Also could you comment to say what precisely it is doing (no that line I mean)</span>
<span class="comment-copy">MissComputing thanks for your feedback, keep in mind @endo.anaconda 's comment, next step is to replace the passwords by the some hash</span>
<span class="comment-copy">Also, beautiful - thank you!</span>
