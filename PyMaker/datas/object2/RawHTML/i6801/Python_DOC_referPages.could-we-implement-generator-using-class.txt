<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/42983569/how-to-write-a-generator-class">How to write a generator class?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>when we look at the Python documentation we could see that generators are always defined using yield statement, but in the Internet we could see that some people are trying to implement generators using classes (eg. here <a href="https://stackoverflow.com/questions/42983569/how-to-write-a-generator-class">How to write a generator class?</a>). </p>
<p>Here is example generator implementation using classes:</p>
<pre><code>from collections import Generator
class Fib(Generator):
    def __init__(self):
        self.a, self.b = 0, 1        
    def send(self, ignored_arg):
        return_value = self.a
        self.a, self.b = self.b, self.a+self.b
        return return_value
    def throw(self, type=None, value=None, traceback=None):
        raise StopIteration
</code></pre>
<p>When we execute it in repl we can see it is not the generator, but ordinary object. It only tries to behave like generator.</p>
<pre><code>&gt;&gt;&gt; x = Fib()
&gt;&gt;&gt; x
&lt;__main__.Fib object at 0x7f05a61eab70&gt;
</code></pre>
<p>When we look at PEP 342:</p>
<blockquote>
<ol start="4">
<li>Add a close() method for generator-iterators, which raises GeneratorExit at the point where the generator was paused.</li>
</ol>
</blockquote>
<p>I think it is not possible to meet that condition using own implementation with classes.</p>
<p>Am I wrong? Is it really possible to implement real generator using classes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Generators are simply a type of <em>iterator</em>. From the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">datamodel documentation</a>:</p>
<blockquote>
<p>Generator functions<br/>
  A function or method which uses the <code>yield</code> statement [...] is called a generator function. Such a function, when called, <strong>always returns an iterator object</strong> which can be used to execute the body of the function: calling the iterator’s <code>iterator.__next__()</code> method will cause the function to execute until it provides a value using the <code>yield</code> statement. When the function executes a return statement or falls off the end, a <code>StopIteration</code> exception is raised and the iterator will have reached the end of the set of values to be returned.</p>
</blockquote>
<p>You can't tell by the <code>repr()</code> output if something is a generator. Python looks for the <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">iterator methods</a>, and you can implement your own <code>send</code> and <code>throw</code> methods on top of those, as you have done.</p>
<p>As such, your implementation <em>works as designed</em>, it is valid iterator:</p>
<pre><code>&gt;&gt;&gt; x = Fib()
&gt;&gt;&gt; next(x)
0
&gt;&gt;&gt; next(x)
1
</code></pre>
<p>Without the <code>collections.abc.Generator</code> base, you can also implement your own <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__iter__" rel="nofollow noreferrer"><code>__iter__</code> method</a> (this <em>has</em> to return <code>self</code>), and a <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" rel="nofollow noreferrer"><code>__next__</code> method</a> that produces the next value when called or raises <code>StopIteration</code> when done.</p>
<p>The base <code>collections.abc.Generator</code> implementation defines the <code>__next__</code> method for you and supplies an <code>__iter__</code> method that simply calls <code>self.send(None)</code>.</p>
</div>
<span class="comment-copy">It's not acting like a generator. You printed an object. <a href="https://stackoverflow.com/questions/4932438/how-to-create-a-custom-string-representation-for-a-class-object" title="how to create a custom string representation for a class object">stackoverflow.com/questions/4932438/…</a></span>
<span class="comment-copy">The question is a using coroutine object</span>
<span class="comment-copy">@cricket_007: no it is not.</span>
<span class="comment-copy">@cricket_007: <i>Coroutines <b>also</b> have the methods listed below, which are <b>analogous to those of generators</b></i></span>
<span class="comment-copy">@Adam: that's a philosophical question. Is an object that has all the same methods as a list, really a list? Python <i>doesn't care</i>; as long as other code can use it <i>just like you can use a generator</i>, it's all fine. No, it's not a generator, but it walks and talks like one.</span>
<span class="comment-copy">@Adam: the <code>collections.abc</code> objects have two functions: letting you create objects that walk and talk like those types, <i>and</i> testing if for those types. If your goal is to produce an object that can stand in for a generator, then using <code>collections.abc.Generator</code> as a base is a great way of doing that.</span>
