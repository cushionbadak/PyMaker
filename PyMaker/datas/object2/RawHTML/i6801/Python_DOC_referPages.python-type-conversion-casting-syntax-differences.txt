<div class="post-text" itemprop="text">
<p>I'm wondering what the difference between the following two snippets of code is:</p>
<pre><code>float_var = 1234.5678
a = int(float_var)
b = (int)(float_var)
</code></pre>
<p>They both successfully convert the variable to an integer (at least in Python 3.6, I don't know if this behaviour is supported in 2.7) but there's an obvious difference in syntax. Furthermore, the following snippet fails:</p>
<pre><code>c = (int)float_var
</code></pre>
<p>Which leads me to believe that the variable name (or literal, as it may be) must be enclosed in parentheses.</p>
<p>From what I can gather the difference in the two examples is that the first one creates a new instance of a class by passing a parameter into its __init__ method. Whereas in the second example, since the int object defines a method __float__, it can "cast" any float to an instance of int.</p>
<p>Am I correct in thinking this? Also, why does the third example fail? I don't understand why parentheses are required to surround the value being "cast".</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no difference.</p>
<p>Python types are objects and can be called like functions. The <code>int(foo)</code> syntax may be shared by Python and C, but the similarities end there.</p>
<p>In your code, <code>int == (int) == ((int))</code> all are equal in the same way <code>1 + 1 == (1 + 1) == ((1 + 1))</code>. If you look at the bytecode, Python treats both identically:</p>
<pre><code>In [42]: dis.dis(lambda: (int)(a))
  1           0 LOAD_GLOBAL              0 (int)
              3 LOAD_GLOBAL              1 (a)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE

In [43]: dis.dis(lambda: int(a))
  1           0 LOAD_GLOBAL              0 (int)
              3 LOAD_GLOBAL              1 (a)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE
</code></pre>
<p>The third example fails because Python isn't C. You get a <code>SyntaxError</code> because it's not valid Python code.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Am I correct in thinking this? </p>
</blockquote>
<p>No. The parenthesis are throwing you off. The two methods are equivalent. This:</p>
<pre><code>(int)(float_var)
</code></pre>
<p>Is the same as this:</p>
<pre><code>int(float_var)
</code></pre>
<p>It's not some special "casting" syntax. It's just parenthesis around a name. <a href="https://docs.python.org/3/reference/grammar.html" rel="noreferrer">The Python grammar allows this</a>:</p>
<pre><code>atom: ('(' [yield_expr|testlist_comp] ')' |
       '[' [testlist_comp] ']' |
       '{' [dictorsetmaker] '}' |
       NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False')
testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
</code></pre>
<p>The parser returns an equivalent abstract syntax tree for each method:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.dump(ast.parse('(int)(float_var)'))
"Module(body=[Expr(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='float_var', ctx=Load())], keywords=[]))])"
&gt;&gt;&gt; ast.dump(ast.parse('int(float_var)'))
"Module(body=[Expr(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='float_var', ctx=Load())], keywords=[]))])"
</code></pre>
<p>However, the third method is not allowed by the Python grammar. As said above, parenthesis around a name is nothing special. It's translated to a function call either way. So while the parenthesis around <code>int</code> are optional, the parenthesis at the end are not.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no difference between a and b. Saying they are different is like saying <code>2</code> and <code>(2)</code> are different. The third example fails because a function cannot be called without parenthesis. For example, <code>int 5</code> will not work because there are no parenthesis surrounding the parameter.</p>
</div>
<span class="comment-copy">Also, is there any reason that the second example isn't used as widely as the first one? My guess is that it's not as clear, but I'm not sure.</span>
<span class="comment-copy"><code>a</code> and <code>b</code> are identical.</span>
<span class="comment-copy">It's likely the parenthesis around <code>int</code> simply do nothing. You could use the <code>dis</code> module to look at the the resultant bytecode it will be the same.</span>
