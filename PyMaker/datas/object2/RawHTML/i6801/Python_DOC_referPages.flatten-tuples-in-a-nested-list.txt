<div class="post-text" itemprop="text">
<p>is there a compact oneliner or python idiom to handle the following task?</p>
<p>I want to transform a list of list of tuples like this:</p>
<pre><code>input = [[(1,2,3),(4,5,6)],[(7,8,9),(10,11,12)]]
</code></pre>
<p>to this:</p>
<pre><code>output [[1,2,3,7,8,9], [4,5,6,10,11,12]]
</code></pre>
<p>Using map and flattening the list only gave me the follwing</p>
<pre><code>input_trans = map(list, zip(*input))
input_trans_flat = [item for sublist in input_trans for item in sublist]
Out: [(1, 2, 3), (7, 8, 9), (4, 5, 6), (10, 11, 12)]
</code></pre>
<p>Many Thanks in Advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd do:</p>
<pre><code>output = [list(a + b) for a, b in zip(*input)]
</code></pre>
<p>The <code>zip</code> part, as you already know, transposes the outer list of lists. Then I grab each pair of tuples and concatenate them, then turn the combined tuple into a list. If you don't care if you have a list of lists or a list of tuples in the end, you could get rid of the <code>list</code> call.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to generalise <a href="https://stackoverflow.com/a/46153039/4909087">Blckknght's answer</a> to any number of tuples inside a list, using <code>sum</code>.</p>
<pre><code>output = [list(sum(x, ())) for x in zip(*input)]
print(output)
</code></pre>
<hr/>
<pre><code>[[1, 2, 3, 7, 8, 9], [4, 5, 6, 10, 11, 12]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> like below:</p>
<pre><code>output = [[item for tup in (i, j) for item in tup] for i, j in zip(*input)]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; input = [[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]]
&gt;&gt;&gt;
&gt;&gt;&gt; output = [[item for tup in (i, j) for item in tup] for i, j in zip(*input)]
&gt;&gt;&gt; output
[[1, 2, 3, 7, 8, 9], [4, 5, 6, 10, 11, 12]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way.</p>
<pre><code>from itertools import chain
l = [[(1,2,3),(4,5,6)],[(7,8,9),(10,11,12)]]
[list(chain.from_iterable(s)) for s in l]
</code></pre>
<p>gives me</p>
<pre><code>[[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]
</code></pre>
</div>
<span class="comment-copy">next time, don't shadow  the <code>input()</code> function with your variable name</span>
<span class="comment-copy">Yes indeed I needed a generalised solution. I tested it in the meanwhile this solution:         [list(chain.from_iterable(_)) for _ in zip(*data)].  But yours was nearly twice as fast when measured with timeit. Thank you :)</span>
