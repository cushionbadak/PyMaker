<div class="post-text" itemprop="text">
<p>So far, I wrote my MLP, RNN and CNN in Keras, but now PyTorch is gaining popularity inside deep learning communities, and so I also started to learn this framework. I am a big fan of sequential models in Keras, which allow us to make simple models very fast. I also saw that PyTorch has this functionality, but I don't know how to code one. I tried this way</p>
<pre><code>import torch
import torch.nn as nn

net = nn.Sequential()
net.add(nn.Linear(3, 4))
net.add(nn.Sigmoid())
net.add(nn.Linear(4, 1))
net.add(nn.Sigmoid())
net.float()

print(net)
</code></pre>
<p>but it is giving this error</p>
<blockquote>
<p>AttributeError: 'Sequential' object has no attribute 'add'</p>
</blockquote>
<p>Also, if possible, can you give simple examples for RNN and CNN models in PyTorch sequential model?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Sequential</code> does not have an <code>add</code> method at the moment, though there is some <a href="https://github.com/pytorch/pytorch/issues/358" rel="noreferrer">debate</a> about adding this functionality. </p>
<p>As you can read in the <a href="http://pytorch.org/docs/master/nn.html#torch.nn.Sequential" rel="noreferrer">documentation</a> <code>nn.Sequential</code> takes as argument the layers separeted as sequence of arguments or an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>OrderedDict</code></a>. </p>
<p>If you have a model with lots of layers, you can create a list first and then use the <code>*</code> operator to expand the list into positional arguments, like this:</p>
<pre class="lang-py prettyprint-override"><code>layers = []
layers.append(nn.Linear(3, 4))
layers.append(nn.Sigmoid())
layers.append(nn.Linear(4, 1))
layers.append(nn.Sigmoid())

net = nn.Sequential(*layers)
</code></pre>
<p>This will result in a similar structure of your code, as adding directly.</p>
</div>
<div class="post-text" itemprop="text">
<p>As described by the correct answer, this is what it would look as a sequence of arguments:</p>
<pre><code>device = torch.device('cpu')
if torch.cuda.is_available():
    device = torch.device('cuda')

net = nn.Sequential(
      nn.Linear(3, 4),
      nn.Sigmoid(),
      nn.Linear(4, 1),
      nn.Sigmoid()
      ).to(device)


print(net)

Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): Sigmoid()
  (2): Linear(in_features=4, out_features=1, bias=True)
  (3): Sigmoid()
  )
</code></pre>
</div>
