<div class="post-text" itemprop="text">
<p>I have two python programs.
One is kind of data gathering program.
The other is for analysis and prediction using Tensorflow.</p>
<p>(on Windows OS. python3.5. local )</p>
<p>The data gathering program requires 32-bit env because of API it is using.
And as you know, the other program requires 64-bit env because of TensorFlow.</p>
<p>So</p>
<p>Q : I just need to send a <code>dict</code> data to TensorFlow and it sends one integer back  as a return.</p>
<p>What is the most simple way to send data each other?</p>
<p>thanks for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <em>simplest</em> way would be to have one program save the data into a file, and then have the other program read the file. The recommended way to do this is to use JSON, via the <a href="https://docs.python.org/3.6/library/json.html" rel="nofollow noreferrer"><code>json</code></a> module. </p>
<pre><code>import json

#Write
with open('file.txt', 'w') as file:
    file.write(json.dumps(myDict))

#Read
with open('file.txt') as file:
    myDict = json.load(json_data)
</code></pre>
<p>However, depending on your use case, it might not be the best way. Sockets are a common solution. <a href="https://docs.python.org/3.6/library/multiprocessing.html#managers" rel="nofollow noreferrer">Managers</a> are also very robust, but are overkill in my opinion.</p>
<p>For more information, I recommend checking out the <a href="https://docs.python.org/3/library/ipc.html" rel="nofollow noreferrer">list</a> that the Python team maintains, of mechanisms that you can use for communication between processes.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to connect both programs over the network, may I suggest you take a look at <a href="http://pyro4.readthedocs.io" rel="nofollow noreferrer">Pyro4</a>?    Basically what that does for you is enable you to do normal Python method calls, but over the network, to code running on another computer or in another Python process. You (almost) don't have to worry about low-level network details with it.</p>
</div>
<span class="comment-copy">What is in the list you send? Integers?</span>
<span class="comment-copy">@JohanL I mistaked. It is not list but dict. Items are all integers.</span>
<span class="comment-copy">The <i>easiest</i> is probably serializing the data (json / csv / pickle / whatever) and dumping it to a standard file on one hand, and reading the file and deserializing it on the other.  You could also explore more efficient solutions like sockets or shared memory.</span>
<span class="comment-copy">@jedwards I agree but there might be an issue with continuous data, to synchronize writes and reads. A slightly more complex solution would be to send the serialized data over a pipe (if that is available between 32 and 64 bit processes in Windows?) or through a socket. That still requires some kind of protocol to ensure all data is passed, though.</span>
