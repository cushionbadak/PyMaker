<div class="post-text" itemprop="text">
<p>I have a class that uses <code>__slots__</code> and makes them nearly immutable by overriding <code>__setattr__</code> to always raise an error:</p>
<pre><code>class A:
    __slots__ = ['a', 'b', '_x']

    def __init__(self, a, b):
        object.__setattr__(self, 'a', a)
        object.__setattr__(self, 'b', b)

    def __setattr__(self, attr, value):
        raise AttributeError('Immutable!')

    @property
    def x():
        return self._x

    @x.setter
    def x(value):
        object.__setattr__(self, '_x', value)
</code></pre>
<p>Here, the "private" attribute <code>_x</code> is a place-holder for a complex operation to interact with some custom hardware.</p>
<p>Since <code>x</code> is a property, I expect to be able to do something like</p>
<pre><code> inst = A(1, 2)
 inst.x = 3
</code></pre>
<p>Instead, I see my <code>AttributeError</code> with the message <code>Immutable!</code>.</p>
<p>There are a number of obvious workarounds here, such as to remove the custom <code>__setattr__</code> (which I do not want to do) or to rewrite it as</p>
<pre><code>def __setattr__(self, attr, value):
    if attr != 'x':
        raise AttributeError('Immutable!')
    super().__setattr__(attr, value)
</code></pre>
<p>This seems like an awkward method that has the potential to balloon out of proportion if I start adding more properties like that.</p>
<p>The real issue is that I do not understand why there is no conflict between <code>__slots__</code> and the property, but there is one between <code>__setattr__</code> and the property. What is happening with the lookup order, and is there another, more elegant workaround to this problem?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The real issue is that I do not understand why there is no conflict between <code>__slots__</code> and the property, but there is one between <code>__setattr__</code> and the property.</p>
</blockquote>
<p>Both <code>__slots__</code> and <code>property</code> implement attribute lookup by providing a <a href="https://docs.python.org/3/reference/datamodel.html#descriptors" rel="nofollow noreferrer">descriptor</a> for the corresponding attribute(s). The presence of <code>__slots__</code> prevents arbitrary instance attribute creation not by doing anything to <code>__setattr__</code>, but by preventing creation of a <code>__dict__</code>. <code>property</code> and other descriptors don't rely on an instance <code>__dict__</code>, so they're unaffected.</p>
<p>However, <code>__setattr__</code> handles <em>all</em> attribute assignment, meaning that descriptor invocation is <code>__setattr__</code>'s responsibility. If your <code>__setattr__</code> doesn't handle descriptors, descriptors won't be handled, and <code>property</code> setters won't be invoked.</p>
<blockquote>
<p>is there another, more elegant workaround to this problem?</p>
</blockquote>
<p>You could explicitly allow only properties:</p>
<pre><code>class A:
    ...
    def __setattr__(self, name, value):
        if not isinstance(getattr(type(self), name, None), property):
            raise AttributeError("Can't assign to attribute " + name)
        super().__setattr__(name, value)
</code></pre>
<p>or you could explicitly reject assignment to slots, and delegate other attribute assignment to <code>super().__setattr__</code>:</p>
<pre><code>class A:
    ...
    def __setattr__(self, name, value):
        if isinstance(getattr(type(self), name, None), _SlotDescriptorType):
            raise AttributeError("Can't assign to slot " + name)
        super().__setattr__(name, value)

# Seems to be the same as types.MemberDescriptorType,
# but the docs don't guarantee it.
_SlotDescriptorType = type(A.a)
</code></pre>
</div>
<span class="comment-copy">NVM, I understand when reading the answer...</span>
<span class="comment-copy">@juanpa.arrivillaga. I would be more than happy to change any phrasing you think I should.</span>
<span class="comment-copy">I think it's just too early...</span>
<span class="comment-copy">Both of these are exactly what I was looking for. I like the first one better for my particular application though.</span>
<span class="comment-copy">Is there any way to set a property on an instance? I.e., is <code>getattr(type(self), name, None)</code> necessary in the first case, or is <code>getattr(self, name, None)</code> OK?</span>
<span class="comment-copy">@MadPhysicist: <code>getattr(self, ...</code> would get the attribute value, not the descriptor that handles the attribute. (It's technically possible for <code>getattr(type(self), ...</code> to return something other than the descriptor even when there is a descriptor, but neither <code>property</code> nor slot descriptors do that.)</span>
<span class="comment-copy">And am I correct in assuming that the descriptor on <code>type(self)</code> is searched before <code>self.__dict__</code>, so even if there was a property named <code>x</code> and an item in <code>__dict__</code> named <code>x</code>, the property would be accessed in <code>self.x = value</code>?</span>
<span class="comment-copy">@MadPhysicist: Only "data" descriptors - ones whose type implements <code>__set__</code> or <code>__delete__</code> - take priority over entries in the instance dict. Properties and slots are data descriptors (even if you don't provide a property setter or deleter), so they override the instance dict, but not all descriptors would. (Of course, if you're using slots, you probably don't even have an instance dict.)</span>
