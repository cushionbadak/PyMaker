<div class="post-text" itemprop="text">
<p>From the <a href="https://google.github.io/styleguide/pyguide.html#Lexical_Scoping" rel="nofollow noreferrer">Google Style Guide</a> on lexical scoping:</p>
<blockquote>
<p>A nested Python function can refer to variables defined in enclosing
  functions, but can not assign to them.</p>
</blockquote>
<p>This specification can be seen here:</p>
<pre><code>def toplevel():
    a = 5
    def nested():
        # Tries to print local variable `a`, but `a` is created locally after,
        # so `a` is referenced before assignment.  You would need `nonlocal a`
        print(a + 2)
        a = 7
    nested()
    return a
toplevel()
# UnboundLocalError: local variable 'a' referenced before assignment
</code></pre>
<p>Reversing the order of the two statements in <code>nested</code> gets rid of this issue:</p>
<pre><code>def toplevel():
    a = 5
    def nested():
        # Two statements' order reversed, `a` is now locally assigned and can
        # be referenced
        a = 7
        print(a + 2)
    nested()
    return a
toplevel()
</code></pre>
<p>My question is, <em>what is it about Python's implementation</em> that tells the first function that <code>a</code> will be declared locally (after the print statement)?  My understanding is that Python is effectively interpreted line by line.  So, shouldn't it default to looking for a nonlocal <code>a</code> at that point in the code?</p>
<p>To elaborate, if I was to use <em>just</em> reference (no assignment),</p>
<pre><code>def toplevel():
    a = 5
    def nested():
        print(a + 2)
    nested()
    return a
toplevel()
</code></pre>
<p>somehow the print statement knows to reference the nonlocal <code>a</code> defined in the enclosing function.  But if I assign to a local <code>a</code> <em>after</em> that line, the function is almost too smart for its own good.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My understanding is that Python is effectively interpreted line by line.</p>
</blockquote>
<p>That's not the right mental model.</p>
<p>The body of the entire function is analysed to determine which names refer to local variables and which don't.</p>
<p>To simplify your example, the following also gives <code>UnboundLocalError</code>:</p>
<pre><code>def func():
  print(a)
  a = 2

func()
</code></pre>
<p>Here, <code>func()</code> compiles to the following bytecodes:</p>
<pre><code>  2           0 LOAD_FAST                0 (a)
              3 PRINT_ITEM
              4 PRINT_NEWLINE

  3           5 LOAD_CONST               1 (2)
              8 STORE_FAST               0 (a)
             11 LOAD_CONST               0 (None)
             14 RETURN_VALUE
</code></pre>
<p>Compare this with</p>
<pre><code>def gunc():
  print(a)
</code></pre>
<p>which compiles to</p>
<pre><code>  2           0 LOAD_GLOBAL              0 (a)
              3 PRINT_ITEM
              4 PRINT_NEWLINE
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE
</code></pre>
<p>Observe how the absence of assignment to <code>a</code> turns the reference from a local to a global one.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My understanding is that Python is effectively interpreted line by line</p>
</blockquote>
<p>That's where you're wrong. The whole file is compiled to bytecode before any interpretation begins.</p>
<p>Also, even if the bytecode compilation pass didn't exist, <code>print(a + 2)</code> wouldn't actually be executed before <code>a = 7</code> is seen, because it's in a function definition. Python would still know about the <code>a = 7</code> by the time it actually tries to execute <code>print(a + 2)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As per <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">document</a></p>
<blockquote>
<p>A special quirk of Python is that – if no <code>global</code> statement is in effect – assignments to names always go into the innermost scope. Assignments do not copy data — they just bind names to objects.</p>
</blockquote>
</div>
<span class="comment-copy">Maybe OP meant by the statement that byte codes are executed instruction-by-instruction which is right. Isn't it?</span>
<span class="comment-copy">@direprobs: It's not quite as right as you might think, since function calls (explicit, or implicit in something like <code>+</code>) will commonly lead to bytecode instructions executing in the middle of other bytecode instructions, but anyway, I think the questioner really did mean line by line.</span>
