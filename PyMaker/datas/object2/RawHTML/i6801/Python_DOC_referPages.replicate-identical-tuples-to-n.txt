<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/34007106/how-do-you-create-a-list-of-repeated-tuples-in-python">How do you create a list of repeated tuples in Python?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have identical tuples of (0, 1) assigned to define limits for 3 input values:</p>
<pre><code>bounds = ((0, 1), (0, 1), (0, 1))
</code></pre>
<p>Is there a Pythonic way to assign same tuples for N inputs? For example:</p>
<pre><code>bounds = ((0, 1), (0, 1), (0, 1), (0, 1), (0, 1), ...Nth(0, 1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can multiply a sequence to get N shallow copies of its contents:</p>
<pre><code>bounds = ((0, 1),) * n
</code></pre>
<p>This is fine for tuples of ints or other immutable data structures containing only immutable types, but will cause <a href="https://stackoverflow.com/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly">surprising behavior</a> if you use it for mutable data structures like lists - you get a sequence of n references to the same list, because it's a shallow copy. In that case, a comprehension is the most idiomatic way to create n independent objects:</p>
<pre><code>mutable_bounds = [[0, 1] for _ in range(n)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>bounds = ((0, 1),) * N
</code></pre>
<p>Works for any iterable, BTW: <code>'1111' == '1' * 4</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><strong>itertools.repeat()</strong></a> alternative:</p>
<pre><code>import itertools

n = 5    # coefficient
bounds = tuple(itertools.repeat((0,1), n))
print(bounds)
</code></pre>
<p>The output:</p>
<pre><code>((0, 1), (0, 1), (0, 1), (0, 1), (0, 1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the multiplication operator (<code>*</code>) on lists of tuples. For example:</p>
<pre><code>((0,1),) * 3 
</code></pre>
<p>yields:</p>
<pre><code>((0, 1), (0, 1), (0, 1))
</code></pre>
</div>
<span class="comment-copy">Thanks @Jean-François Fabre and jonrsharpe for your remarks. That question "How do you create a list of repeated tuples in Python?" is very hard to understand for my purpose. I'd like to keep this question as focused and specific as it is not a duplicate.</span>
<span class="comment-copy">it is a duplicate, but the answers given here are good &amp; upvoted, so use the ones here (Peter answer is very good). But it <i>is</i> a duplicate (maybe we can find better ones to add to the list)</span>
<span class="comment-copy">Thanks @Jean-François Fabre appreciate your input :)</span>
<span class="comment-copy">when closing as a duplicate, I feel the duty not to be too hard on users. This isn't a punishment (I even upvoted your question because it's much clearer than the "original" question), this is helping them / helping the site to avoid more answers to be posted. Peter's answer is excellent and was posted before closure: that's fine by me.</span>
<span class="comment-copy">Understood @Jean-François Fabre yes agree :) appreciate your help!</span>
<span class="comment-copy">Very elegant solution indeed @Peter DeGlopper! Thanks</span>
<span class="comment-copy">works <i>properly</i> for any <i>immutable</i> iterable. For mutable iterables, it repeats the same reference over again: not what anyone would want.</span>
<span class="comment-copy">For immutables as well, I presume, and every time you forbid someone to want something, god kills a smoothly running process. :(</span>
<span class="comment-copy">it repeats the references for tuples, yes, but you cannot change a tuple in the list without changing the reference: no risk of changing all elements by changing one. Try <code>x = [[]] * 10</code> then <code>x[0].append(1)</code> and see what I'm talking about (<a href="https://stackoverflow.com/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly" title="list of lists changes reflected across sublists unexpectedly">stackoverflow.com/questions/240178/…</a>)</span>
<span class="comment-copy">@Jean-FrançoisFabre Trust me I know what you're talking about, and IMO no language's legal semantics can be deemed unwantable by everyone.</span>
<span class="comment-copy">Thanks @leonardoandrade for your input.</span>
