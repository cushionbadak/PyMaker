<div class="post-text" itemprop="text">
<p>When I write following code:</p>
<pre><code>m = re.findall('\sf.*?\s','a f fast and friendly dog');
</code></pre>
<p>I get <strong>output</strong>: <code>[' f ', ' friendly ']</code></p>
<p>But when I provide extra space between f &amp; fast, I get following output which I expected from the previous one.
Code is as follows</p>
<pre><code>m = re.findall('\sf.*?\s','a f  fast and friendly dog');
</code></pre>
<p><strong>Output:</strong> </p>
<pre><code>[' f ', ' fast ', ' friendly ']
</code></pre>
<p>Can anyone tell me why I am not getting later output in first case (without inserting extra space between f &amp; fast)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because your pattern ends in <code>\s</code>. <strong><em>Regex matches are non-overlapping</em></strong>, so the first match <code>' f '</code> matches the trailing space, making the rest of the string begin with <code>'fast'</code> instead of <code>' fast'</code>. <code>'fast'</code> does not match a pattern starting with <code>\s</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The space is consumed by <code>' f '</code> after it is matched. Now the next search starts from <code>'fast and friendly dog'</code>. But now <code>fast</code> does not have a leading space and thus does not match.</p>
<p>If you want the space not be consumed then try a positive lookbehind search.</p>
</div>
<span class="comment-copy">What should be the regex then? Should it include parenthesis extraction?</span>
<span class="comment-copy">If the trailing space should exist, but not be consumed, you should use a <a href="https://docs.python.org/3/library/re.html?highlight=lookahead" rel="nofollow noreferrer">lookahead</a>. <code>/\sf.*?(?=\s)/</code></span>
<span class="comment-copy">I'm guessing what you're after is <code>\bf.*?\b</code> - <a href="https://regex101.com/r/Hh24xG/1" rel="nofollow noreferrer">illustrated here</a>.</span>
<span class="comment-copy">Would <code>f\w*</code> or <code>f[a-z]*</code> be more simpler?</span>
<span class="comment-copy">@kitman0804 <code>f\w*</code> would not match <code>' f123456 '</code> which OP's code will match. Certainly simpler, but also possibly less correct! :)</span>
