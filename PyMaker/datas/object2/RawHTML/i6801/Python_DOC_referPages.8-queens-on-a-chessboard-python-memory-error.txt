<div class="post-text" itemprop="text">
<p>I came across this question where 8 queens should be placed on a chessboard such that none can kill each other.This is how I tried to solve it:</p>
<pre><code>import itertools
def allAlive(position):
    qPosition=[]
    for i in range(8):
        qPosition.append(position[2*i:(2*i)+2])
    hDel=list(qPosition)     #Horizontal
    for i in range(8): 
        a=hDel[0]
        del hDel[0]
        l=len(hDel)
        for j in range(l):
            if a[:1]==hDel[j][:1]:
                return False
    vDel=list(qPosition)     #Vertical
    for i in range(8):
        a=vDel[0]
        l=len(vDel)
        for j in range(l):
            if a[1:2]==vDel[j][1:2]:
                return False
    cDel=list(qPosition)     #Cross
    for i in range(8):
        a=cDel[0]
        l=len(cDel)
        for j in range(l):
            if abs(ord(a[:1])-ord(cDel[j][:1]))==1 and abs(int(a[1:2])-int(cDel[j][1:2]))==1:
                return False
    return True
chessPositions=['A1','A2','A3','A4','A5','A6','A7','A8','B1','B2','B3','B4','B5','B6','B7','B8','C1','C2','C3','C4','C5','C6','C7','C8','D1','D2','D3','D4','D5','D6','D7','D8','E1','E2','E3','E4','E5','E6','E7','E8','F1','F2','F3','F4','F5','F6','F7','F8','G1','G2','G3','G4','G5','G6','G7','G8','H1','H2','H3','H4','H5','H6','H7','H8']
qPositions=[''.join(p) for p in itertools.combinations(chessPositions,8)]
for i in qPositions:
    if allAlive(i)==True:
        print(i)
</code></pre>
<blockquote>
<p>Traceback (most recent call last):</p>
<p>qPositions=[''.join(p) for p in itertools.combinations(chessPositions,8)]</p>
<p>MemoryError</p>
</blockquote>
<p>I'm still a newbie.How can I overcome this error?Or is there any better way to solve this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are trying to do is impossible ;)!</p>
<pre><code>qPositions=[''.join(p) for p in itertools.combinations(chessPositions,8)]
</code></pre>
<p>means that you will get a list with length <code>64 choose 8 = 4426165368</code>, since <code>len(chessPositions) = 64</code>, which you cannot store in memory. Why not? Combining what I stated in the comments and @augray in his answer, the result of above operation would be a list which would take</p>
<pre><code>(64 choose 8) * 2 * 8 bytes ~ 66GB
</code></pre>
<p>of RAM, since it will have <code>64 choose 8</code> elements, each element will have 8 substrings like <code>'A1'</code> and each substring like this consists of 2 character. One character takes 1 byte.</p>
<p>You have to find another way. I am not answering to that because that is your job. The <em>n-queens</em> problem falls into <strong>dynamic programming</strong>. I suggest you to google 'n queens problem python' and search for an answer. Then try to understand the code and dynamic programming.</p>
<hr/>
<p>I did searching for you, take a look at <a href="https://youtu.be/xouin83ebxE" rel="nofollow noreferrer">this video</a>. As suggested by @Jean Fran√ßois-Fabre, backtracking. Your job is now to watch the video once, twice,... as long as you don't understand the solution to problem. Then open up your favourite editor (mine is Vi :D) and code it down!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is one case where it's important to understand the "science" (or more accurately, math) part of computer science as much as it is important to understand the nuts and bolts of programming.</p>
<p>From the <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="noreferrer">documentation for <code>itertools.combinations</code></a>, we see that the number of items returned is <code>n! / r! / (n-r)!</code> where <code>n</code> is the length of the input collection (in your case the number of chess positions, 64) and <code>r</code> is the length of the subsequences you want returned (in your case 8). As @campovski has pointed out, this results in 4,426,165,368. Each returned subsequence will consist of 8*2 characters, each of which is a byte (not to mention the overhead of the other data structures to hold these and calculate the answer). Each character is 1 byte, so in total, just counting the memory consumption of the resulting subsequences gives <code>4,426,165,368*2*8=70818645888</code>. dividing this by 1024^3 gives the number of Gigs of memory held by these subsequences, about 66GB.</p>
<p>I'm assuming you don't have that much memory :-) . Calculating the answer to this question will require a well thought out algorithm, not just "brute force". I recommend doing some research on the problem- <a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle" rel="noreferrer">Wikipedia</a> looks like a good place to start.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the other answers stated you cant get every combination to fit in memory, and you shouldn't use brute force because the speed will be slow. However, if you want to use brute force, you could constrain the problem, and eliminate common rows and columns and check the diagonal</p>
<pre><code>from itertools import permutations
#All possible letters
letters = ['a','b','c','d','e','f','g','h']

#All possible numbers
numbers = [str(i) for i in range(1,len(letters)+1)]

#All possible permutations given rows != to eachother and columns != to eachother
r = [zip(letters, p) for p in permutations(numbers,8)]

#Formatted for your function
points = [''.join([''.join(z) for z in b]) for b in r]
</code></pre>
<hr/>
<p>Also as a note, this line of code attempts to first find all of the combinations, then feed your function, which is a waste of memory.</p>
<pre><code>qPositions=[''.join(p) for p in itertools.combinations(chessPositions,8)]
</code></pre>
<p>If you decided you do want to use a brute force method, it is possible. Just modify the code for itertools <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations</a>. Remove the <code>yield</code> and <code>return</code> and just feed your check function one at a time.</p>
</div>
<span class="comment-copy">it can be solved by trying and <i>backtracking</i> until a valid solution is found (implies recursion)</span>
<span class="comment-copy">Each string like <code>"A1"</code> is 2 bytes in size. 2 * 4426165368 &gt; 8Gb. Unless a guy has more 10GB of RAM or doesn't use some sort of swap in some peculiar way, he cannot calculate that array. Since he said he is new to Python, I assume he cannot do anything of described above. Of course it can be done by doing some sick programming stuff but I doubt that his course is about that ;)</span>
<span class="comment-copy">10GB or RAM and a lot of CPU power it is. 10GB of ram is common on enterprise servers, but the time to fill the array is just too much.</span>
<span class="comment-copy">Indeed. Although I dont think he is doing his homework on an enterprise server ;)</span>
<span class="comment-copy">In a nutshell: start of a solution: put one queen, then try to put the next one in the next column so they don't take each other. Continue (by recursive call) until you cannot put one queen or success. you need a good "can_take_each_other" function.</span>
<span class="comment-copy">I know I shouldn't comment about this, but very nice answer @augray. I always love it when someone shows the logic and math they use to come to a conclusion and explain an error. +1</span>
