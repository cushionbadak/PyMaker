<div class="post-text" itemprop="text">
<p>Currently I'm writing a unittest for my class function.</p>
<pre><code>def test_getitem(self):
    test1 = List(3)
    for i in range(3):
        test1.append(i)
    self.assertEqual(test1[2], 2)

    test1 = List(3)
    for i in range(3):
        test1.append(i)
    self.assertRaises(IndexError, test1[4])
</code></pre>
<p>the problem I'm having now is at the <code>self.assertRaises</code> part of my code. I'm not sure if that is how it's done but when I run the <code>unittest</code>, it produces an error <code>Index out of range</code>. By right, it should be "OK". </p>
<p><code>List</code> is my class and <code>List(3)</code> creates an array based list. so when i <code>test1.append(i)</code>, it is now <code>[0,1,2]</code>.</p>
<p><code>test1[2]</code> is a method of calling the <code>getitem</code> function in my class similar to <code>self[index]</code>. </p>
<p>I'm wondering if I'm assert raising correctly? <code>self.assertEqual</code> is fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use the <code>with</code> statement when you're asserting for exceptions being thrown</p>
<pre><code>def test_getitem(self):
    test1 = List(3)
    for i in range(3):
        test1.append(i)
    self.assertEqual(test1[2], 2)

    test1 = List(3)
    for i in range(3):
        test1.append(i)
    with self.assertRaises(IndexError):
        test1[4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Arguments are evaluated before the function is called, so when you use <code>test1[4]</code> it's executed before the <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises" rel="noreferrer"><code>self.assertRaises</code></a> is called. So it's not able to catch the exception.</p>
<p>That's also the reason why the 2-argument form has the signature <code>assertRaises(exception, msg=None)</code>, the second argument here is the "msg" to match, not the function that is to be called. So it wouldn't have done the correct thing in any case.</p>
<p>You could use the context manager:</p>
<pre><code>with self.assertRaises(IndexError):
    test1[4]
</code></pre>
<p>Or use the multiple argument form:</p>
<pre><code>self.assertRaises(IndexError, test1.__getitem__, 4)
</code></pre>
</div>
<span class="comment-copy">When you call <code>assertRaises()</code> like this you need to pass a callable as the second argument. So <code>self.assertRaises(IndexError, lambda: test1[4])</code> would work, but @AK47's answer is the recommended way to do it.</span>
