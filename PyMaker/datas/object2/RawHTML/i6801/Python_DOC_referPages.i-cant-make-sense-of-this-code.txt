<div class="post-text" itemprop="text">
<p>I am trying to get into working with 2 dimensional lists/tuples because I want to use them for an idea I have. I have always had trouble understanding the for instruction, it just doesn't make any sense to me, it doesn't feel intuitive. The problem is that I just don't understand the <code>for</code> instruction. I got this code that displays this simple tuple:</p>
<pre><code>m=((1,2),(3,4),(5,6))

for i in range(len(m)):
    for j in range(len(m[i])):
        print(m[i][j]," ",end="")
        print()
</code></pre>
<p>This displays:</p>
<pre><code>1 2
3 4
5 6
</code></pre>
<p>I don't really get what this parts of the code mean <code>(m[i])</code> and <code>m[i][j]</code> I know what <code>len</code> is for.</p>
<p>Also I tried to change the [] to () because they are supposed to be part of a tuple but I get an error that says:</p>
<blockquote>
<p>TypeError occurred   Message='tuple' object is not callable</p>
</blockquote>
<p>If I remove parts of the code the result is displayed with parenthesis, but this code somehow removes all the parentheses from the tuple:</p>
<pre><code>m=((1,2),(3,4),(5,6))

for i in range(len(m)):

    print(m[i])
    print()
</code></pre>
<p>For example this one displays basically the same result but with the parentheses:</p>
<pre><code>(1,2)
(3,4)
(5,6)
</code></pre>
<p>What is going on here?</p>
<p><strong>EDIT:</strong> </p>
<p><strong>BELOW IN THE ANSWERS I WROTE THE CODE THAT HELPED ME UNDERSTAND EVERYTHING I WASN'T UNDERSTANDING AND EXPLAINED IT, THANKS FOR ALL YOUR ANSWERS WOULDN'T BEEN ABLE TO DO THAT WITHOUT YOUR INPUT.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>The outer for loop iterates through each tuple in <code>m</code> <em>index-wise</em>:</p>
<pre><code>&gt;&gt;&gt; m = ((1,2),(3,4),(5,6))
&gt;&gt;&gt; for i in range(len(m)):
        print(m[i])


(1, 2)
(3, 4)
(5, 6)
</code></pre>
<p>The inner (nested) for loop iterates through each tuple accsed by <code>m[i]</code>, also <em>index-wise</em>, and print's it's content all on one line:</p>
<pre><code>&gt;&gt;&gt; m = ((1,2),(3,4),(5,6))
&gt;&gt;&gt; # loop through each tuple in `m` index-wise
&gt;&gt;&gt; for i in range(len(m)):
    # loop through each element in each tuple index-wise
        for j in range(len(m[i])):
        # print each element on a single line.
            print(m[i][j]," ",end="")
        # print a newline
        print()


1  2  
3  4  
5  6  
</code></pre>
<p>The reason this feels so awkward is because you're not using <code>for</code>-loops the way they were designed to be used, i.e <em>idiomatically</em>. Python <code>for</code>-loops are made to iterate over collections <em>element-wise</em>, not <em>index-wise</em>. There's no need to use <code>range</code> or <code>len</code> at all. Iterate directly over <code>m</code>, and each tuple in <code>m</code>:</p>
<pre><code>for tup in m:
    for num in tup:
        print(num," ",end="")
    print()
</code></pre>
<p>As you can see, the above is much cleaner to write and understand.</p>
</div>
<div class="post-text" itemprop="text">
<p>How to initialize 2d arrays and tuples:</p>
<p><code>myarr = [[1, 2], [3, 4]] # A 2d array
mytuple = ((5, 6), (7, 8)) # A 2d tuple</code></p>
<p>How to access 2d lists:</p>
<p><code>print(myarr[0]) # = [1, 2]
print(myarr[1][0]) #get the 1st element of the second array in myarr = 3</code></p>
<p>You access 2d tuples the same way:</p>
<p><code>print(mytuple[0]) # = (5, 6)
print(mytuple[1][0]) #get the 1st element of the second tuple in myarr = 7</code></p>
<p>Doing <code>mytuple(1)</code> is trying to call function 'mytuple', which obviously is a tuple and not a function, so there is an error.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all I will remove your confusion by clarify the different between tuple and List, how to access both of them:</p>
<p><strong>First</strong> List: also called sequence, Each element of a sequence is assigned a number - its position or index. The first index is zero, the second index is one, and so forth</p>
<p>And for accessing it's elements you should use <code>[index]</code> with the index(position of the element you want to get)</p>
<p><strong>Second</strong> Tuple: a sequence of <strong>immutable</strong> Python objects. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.</p>
<p>And for accessing it's values you also use <code>[index]</code> with the index(position of the element you want to get)</p>
<p>And your code is valid for both list and tuple:</p>
<pre><code> m = ((1,2),(3,4),(5,6))
 #loop through each tuple in `m` 
 for i in range(len(m)):
    #loop through each element in each tuple 
        for j in range(len(m[i])):
        #print each element on a single line.
            print(m[i][j]," ",end="")
        #print a newline
        print()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on all the information i got from you guys i wrote this:</p>
<pre><code>m=((1,2),(3,4),(5,6))


for i in range(len(m)):
    for j in range(len(m[i])):
        print(m[i][j]," ",end="")
    print()

print()
print(len(m))
print(len(m[i]))
print()

for tup in m:
    for elem in tup:
        print(elem, end=' ')
    print()

print()
print()

for tup2 in m:
    for num in tup2:
        print(num," ",end="")
    print()

print()
print()
print("333",end=" ")
print("4444",end=" ")
print("55555")
</code></pre>
<p>What was confusing me was that i didn't knew what were the values of "i" and "j" and then on top of that what the print was doing also was adding to this confusion, so i just printed the values of "i" and "j" and they were 3 and 2 and then after making sense of what the print was doing i got it.</p>
<p>-First is doing 3 loops, and 3 is from the len of the tuple</p>
<p>-After that it is doing 2 loops based on the len of the other 3 tuples which is 
 2</p>
<p>-Finally it is printing each element like this m[i][j] which means it will start with the element 0,0 then 0,1, then 1,0, then 1,1 then 2,0, then 2,1</p>
<p>This would be the "map" of the tuple:</p>
<p>(0,0) (0,1)</p>
<p>(1,0) (1,1)</p>
<p>(2,0) (2,1)</p>
<p>Each element has it's coordinates first element is 0,0 the second is 0,1 and so on.</p>
<p>And for this to be printed like this and not in a single line you use:</p>
<pre><code> print(m[i][j]," ",end="")
print()
</code></pre>
<p>What i understood about this was that " " is just an space, no matter, but end"") is making so the code doesn't break the line thus prints each loop on a single line and ends each line it prints with an space so it doesn't print the result one after the other, the other print() just adds a break line to make it more "readable".</p>
<p>All i got thanks to you guys because i was not seeing this before, why i got the error, why i wasn't understanding the for loops, why i could have done it in a simpler way.</p>
<p>Everything is clear now guys, thank you all.</p>
</div>
<span class="comment-copy">Tuples use <code>()</code> to store the data and essentially it helps to disambiguate them from lists (which use <code>[]</code>). But you still need to use <code>[]</code> to access the data.</span>
<span class="comment-copy">There is actually no reason whatsover to use loops over <code>range(len(...))</code>; that's just adding to the confusion here. You can just use <code>for tup in m:</code> and <code>for elem in tup:</code> then <code>print(elem, end=' ')</code> and be done with it.</span>
<span class="comment-copy">At any rate, all the <code>for .. in range(...)</code> code does is generate indices; integer numbers from 0 onwards, to then use those indices to just load the actual elements from the <code>m</code> tuple (all of them tuples too), and then the selected <code>m[i]</code> tuple (an element in the <code>m</code> tuple).</span>
<span class="comment-copy">Your <code>TypeError</code> indicates you probably lost a comma somewhere, a simple typo. We can't see what typo you made, as you didn't share the code that gives the error.</span>
<span class="comment-copy">The problem is that while it prints the that it doesn't print it like in a "matrix", it just displays all the data one after the other.</span>
<span class="comment-copy">Yeah it is indeed cleaner, call me dumb but i don't understand what it does... that is how bad i am at understanding the "for" instruction it just feels really akward to me.</span>
<span class="comment-copy">@Hagogs No worries. We all start somewhere. It takes time to learn. A good place to start is the "official" Python tutorial: <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">docs.python.org/3/tutorial</a>.</span>
<span class="comment-copy">Thank you, i got it now, below i wrote the code that help me understand everything i wasn't understanding, everything is clear now.</span>
<span class="comment-copy">Thanks, it makes sense about the error, python thinks im calling a funcion lols.</span>
<span class="comment-copy">don't conflate arrays and lists...</span>
