<div class="post-text" itemprop="text">
<p>Keywords <a href="https://mail.python.org/pipermail/python-dev/2012-March/117441.html" rel="noreferrer">have to</a> be strings</p>
<pre><code>&gt;&gt;&gt; def foo(**kwargs):
...     pass
... 
&gt;&gt;&gt; foo(**{0:0})
TypeError: foo() keywords must be strings
</code></pre>
<p>But by some black magic, namespaces are able to bypass that</p>
<pre><code>&gt;&gt;&gt; from types import SimpleNamespace
&gt;&gt;&gt; SimpleNamespace(**{0:0})
namespace()
</code></pre>
<p>Why?  And <em>how</em>?  <strong>Could you implement a Python function that can receive integers in the <code>kwargs</code> mapping?</strong></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Could you implement a Python function that can receive integers in the kwargs mapping?</p>
</blockquote>
<p>No, you can't. The Python evaluation loop handles calling functions defined in Python code differently from  calling a callable object defined in C code. The Python evaluation loop code that handles keyword argument expansion has firmly closed the door on non-string keyword arguments.</p>
<p>But <code>SimpleNamespace</code> is not a Python-defined callable, it is defined <a href="https://github.com/python/cpython/blob/v3.6.2/Objects/namespaceobject.c" rel="noreferrer">entirely in C code</a>. It accepts keyword arguments directly, without any validation, which is why you can pass in a dictionary with non-string keyword arguments.</p>
<p>That's perhaps a bug; you are supposed to use the <a href="https://docs.python.org/3/c-api/arg.html" rel="noreferrer">C-API argument parsing functions</a>, which all do guard against non-string keyword arguments. But <code>SimpleNamespace</code> was only designed to be the object holding <a href="https://docs.python.org/3/library/sys.html#sys.implementation" rel="noreferrer"><code>sys.implementation</code> data</a><sup>*</sup>, and wasn't really designed for other uses.</p>
<p>There might be other such exceptions, but they'll all be C-defined callables, not Python functions.</p>
<hr/>
<p><sup>*</sup> The <a href="https://docs.python.org/3/library/time.html#time.get_clock_info" rel="noreferrer"><code>time.get_clock_info()</code> method</a> also runs an instance of the <code>SimpleNamespace</code> class; it's the only other place that the type is currently used.</p>
</div>
<span class="comment-copy">More important question: why would you need to?</span>
<span class="comment-copy">So, in short: you can define a C-extension type that accepts keyword arguments and those are not restricted. But you can't define a Python function that does the same.</span>
<span class="comment-copy">Wonder if any other python distribution exhibits the same behaviour...</span>
