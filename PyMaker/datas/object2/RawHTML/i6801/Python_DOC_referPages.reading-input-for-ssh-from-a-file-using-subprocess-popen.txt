<div class="post-text" itemprop="text">
<p>I am attempting to call a handful of local bash scripts that I have written for health checking applications on remote servers. </p>
<pre><code>ssh -q &lt;servername&gt; "bash -s" -- &lt; ./path/to/local/script.bash
</code></pre>
<p>The above runs perfectly fine from the command line. However, when I wrap the call in python, I keep getting errors stating: </p>
<pre><code>bash: /path/to/file/script.bash: No such file or directory
</code></pre>
<p>As for my python, I am using the subprocess module.
Python:</p>
<pre><code>bashcmd="ssh -q %s \"bash -s\" -- &lt; ./%s" % (&lt;server&gt;,&lt;bashfilepath&gt;)
process=subprocess.Popen(bashcmd.split, stdout=subprocess.PIPE)
output, error = process.communicate()
</code></pre>
<p>Any help would be appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>Redirection in your first example is done by shell. Standard input for <code>ssh</code> read from the file <code>./path/to/local/script.bash</code>, which <code>ssh</code> passes to the process on remote machine.</p>
<p>You can not use shell redirections, because you are not running a command from shell. Instead you can use <code>stdin</code> and <code>stdout</code> arguments for <code>Popen()</code> to set the standard input and output for your process. You need to open the file and then pass the handle to <code>stdin</code>. This is explained in: <a href="https://stackoverflow.com/questions/15167603/using-files-as-stdin-and-stdout-for-subprocess"><em>Using files as stdin and stdout for subprocess</em></a>.</p>
<p>In python example, you pass <code>ssh -q &lt;server&gt; "bash -s" -- &lt; ./&lt;filepath&gt;</code> as 1st argument to <code>subprocess.Popen()</code>, which excepts a list of arguments, or a single string: the path to the <strong>executable</strong>. You get <code>No such file or directory</code> error because your string argument is not a path to an executable. Correct format following the standard convention would be <code>subprocess.Popen(["/path/to/executable", "arg1", "arg2", ...])</code>.</p>
<p>All this put together, your example should look something like:</p>
<pre><code>with open("./path/to/local/script.bash") as process_stdin:
    p = subprocess.Popen(["/usr/bin/ssh", "-q", server, "--", "bash", "-s"],
                         stdin=process_stdin, stdout=subprocess.PIPE)
    out, err = p.communicate()
</code></pre>
<p>This all is explained in Python documentation for <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer"><em>subprocess module</em></a>.</p>
</div>
<span class="comment-copy">Why have you put an explicit <code>./</code> in front of the <code>bashfilepath</code> value? Start by removing that and making sure your <code>bashfilepath</code> value is correct.</span>
<span class="comment-copy">@roima This question is really about how to set <code>stdin</code> with Python <code>subprocess.Popen()</code>. The question says that the example in shell works fine. The changes provided in my answer to the Python program solved the issue. The issue was not using Python API correctly. Help page about <a href="https://unix.stackexchange.com/help/on-topic">off-topic</a> says on programming questions other than shell scripting: "<i>If your question is a programming question, requiring knowledge of programming languages other than unix shell scripting languages, ask on Stack Overflow.</i>"</span>
<span class="comment-copy">So what exactly would I pass in as parameters?</span>
<span class="comment-copy">thanks!! Worked like a charm.</span>
<span class="comment-copy">How would i pass arguments with mentioned ./path/to/local/script.sh?</span>
<span class="comment-copy">Just as you would to pass them in your original example: after <code>"bash" "-s"</code>, eg. <code>"bash" "-s", "arg1", "arg2" ...</code>.</span>
