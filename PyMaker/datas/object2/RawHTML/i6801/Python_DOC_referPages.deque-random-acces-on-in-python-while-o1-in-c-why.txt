<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/45134139/why-is-deque-implemented-as-a-linked-list-instead-of-a-circular-array">Why is deque implemented as a linked list instead of a circular array?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>C++ <a href="http://en.cppreference.com/w/cpp/container/deque" rel="noreferrer">deque</a>:</p>
<blockquote>
<p>Random access - constant O(1)</p>
</blockquote>
<p>Python <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="noreferrer">deque</a>:</p>
<blockquote>
<p>Indexed access is O(1) at both ends but slows to O(n) in the middle.</p>
</blockquote>
<p>If I'm not missing anything, everything else is equally fast for deques in python and in C++, at least complexity-wise. Is there anything that makes python's deque better for some cases? If not, why don't they just switch to what C++ has?</p>
</div>
<div class="post-text" itemprop="text">
<p>Disclaimer: this answer is largely inspired from Jeff's comment and the answer already posted at <a href="https://stackoverflow.com/questions/45134139/why-is-deque-implemented-as-a-linked-list-instead-of-a-circular-array">Why is a deque implemented as a linked list instead of a circular array ?</a></p>
<p>Your question is different in nature but the title above is an answer in itself: in Python, the module collections.deque has a linear time complexity when accessing items in the middle because it is implemented using a linked list.</p>
<p>From the pydoc: </p>
<blockquote>
<p>A list-like sequence optimized for data accesses near its endpoints.</p>
</blockquote>
<p>Now if you're wondering <strong>why</strong> this implementation was chosen, the answer is already available in the post pointed out by Jeff.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because Deque is a data structed supposed to be used in a specific way, being accessed by the first or last element, 
But python sometimes do weird things with its data structures and add more functions to them, or use composed data structures</p>
<p>In this case python has the function </p>
<pre><code>remove(value)
#Remove the first occurrence of value. If not found, raises a ValueError.
</code></pre>
<p>this allow you to access the data structure elements on the middle of the deque it isn't a "core" operation of this data structure,</p>
<p>causing the  "but slows to O(n) in the middle. "</p>
<p>Because in this case it behaves like an array (checking values one by one)</p>
</div>
<span class="comment-copy">Implementation details. In both cases.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams Isn't that a tautology?</span>
<span class="comment-copy">@Sneftel What do you mean exactly by "tautology"? That everything is an inmplementation detail?</span>
<span class="comment-copy">Random access isn't the central concern of deques. Rather it's a side-effect of the method chosen to get fast push/pop on both ends. Python uses a linked list and C++ STLs tend to use a vector-of-chunks. Consequently, Python inserts are very nearly guaranteed constant time: memory allocation for a new list node plus value initialization. Unfortunately access to arbitrary elements of a linked list is O(n). The vector-of-chunks allows quick random access, but can require O(n) time to reorganize the map vector for any given insert (though n inserts require O(n) time).</span>
<span class="comment-copy">Related question <a href="https://stackoverflow.com/questions/45134139/why-is-deque-implemented-as-a-linked-list-instead-of-a-circular-array" title="why is deque implemented as a linked list instead of a circular array">stackoverflow.com/questions/45134139/â€¦</a></span>
