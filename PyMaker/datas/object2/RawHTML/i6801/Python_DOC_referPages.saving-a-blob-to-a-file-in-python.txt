<div class="post-text" itemprop="text">
<p>I am trying to save a blob sent via ajax, as a file in python. Had been through this before <a href="https://stackoverflow.com/questions/5305456/python-how-do-i-convert-from-binary-to-base-64-and-back">Python: How do I convert from binary to base 64 and back?</a> </p>
<pre><code>class SaveBlob(APIView):
    def post(self, request):
        vid = open("file.webm", "wb")
        video_stream = request.FILES['blob'].read()
        video_stream = struct.pack(video_stream).encode('base64')
        # vid.write(video_stream.decode('base64'))
        vid.write(video_stream)
        vid.close()
        return Response()
</code></pre>
<p>It results in <code>error: bad char in struct format</code></p>
<p>Simply using this <code>vid.write(video_stream.decode('base64'))
</code> without using<code>struct.pack</code> saves the file but when I open the video it results in could not determine type of stream. </p>
<p>The ajax call goes like this but it looks fine I guess.</p>
<pre><code>function call_ajax(request_type,request_url,request_data) {

    var data_vid = new FormData();
    console.log(request_url);
    data_vid.append('blob', request_data);
    console.log(request_data);

    var data= [];
    try{
        $.ajax({
            type: request_type,
            url: request_url,
            data:data_vid,
            cors:true,
            processData: false,
            contentType: false,
            async:false,
            beforeSend: function(xhr) {
                    xhr.setRequestHeader('X-CSRFToken',Cookies.get('csrftoken'))
             },

            success: function(response){
                data =response;
            }
        });
    }catch(error){
        console.log(error);
    }
    return data;
}
</code></pre>
<p>Any help with it will be appreciated. Any suggestions about any flaws or possible causes are welcome.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You could using Python's <a href="https://docs.python.org/2/library/base64.html?highlight=base64#module-base64" rel="nofollow noreferrer"><code>base64</code></a> library to encode and decode data in your <code>SaveBlob</code> class:</p>
<pre><code>import base64

video_stream = "hello"

with open('file.webm', 'wb') as f_vid:
    f_vid.write(base64.b64encode(video_stream))

with open('file.webm', 'rb') as f_vid:
    video_stream = base64.b64decode(f_vid.read())

print video_stream
</code></pre>
<p>Giving you back the original <code>video_stream</code>:</p>
<pre><code>hello
</code></pre>
<p>For this simple example, the saved file would appear as:</p>
<pre class="lang-none prettyprint-override"><code>aGVsbG8=
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first argument to <code>struct.pack</code> is a <a href="https://docs.python.org/3/library/struct.html#format-strings" rel="nofollow noreferrer">format string</a> that specifies the layout of the struct.  You are only passing the bytes that you want to pack, so this is interpreted as an invalid format:</p>
<pre><code>&gt;&gt;&gt; bs = b'\x01\x56\x56'
&gt;&gt;&gt; struct.pack(bs)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
struct.error: bad char in struct format
</code></pre>
<p>Constructing a valid format string fixes this (but note the you need to construct the format string based on your data and platform):</p>
<pre><code>&gt;&gt; n = len(bs)    # 3
&gt;&gt;&gt; fmt = '{:d}s'.format(n)    # '3s'
&gt;&gt;&gt; struct.pack(fmt, bs)
b'\x01VV'
</code></pre>
<p>It's unlikely to be necessary to pack<sup>*</sup> or base64-encode the data if it's just being written to disk; just write the bytes to file directly:</p>
<pre><code>class SaveBlob(APIView):
    def post(self, request):
        with open("file.webm", "wb") as vid:
            video_stream = request.FILES['blob'].read()
            vid.write(video_stream)
            return Response()
</code></pre>
<p>Your video player should be able to read the binary file and interpret it correctly.</p>
<p>Base64 encoding is really for transferring binary data when the transfer mechanism expects ascii-encoded data, so there's no benefit in applying this encoding just to write to a file.  If you really need to base64-encode your data, use the python's <a href="https://docs.python.org/3/library/base64.html" rel="nofollow noreferrer">base64</a> package as Martin Evans recommends in his answer..</p>
<p><sup>*</sup> It may be necessary to pack the data if it's being moved between platforms with different <a href="https://en.wikipedia.org/wiki/Endianness" rel="nofollow noreferrer">endianness</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other solutions were helpful where it would write the file to the disk still it would say incorrect file format or unable to play the file because of missing plugins. </p>
<p>It was something to do with JavaScript (which I'm not much comfortable with) where I had to have all meta data in FormData I guess. I'm not sure why this works. Had searched somewhere and found this which worked.</p>
<p>Would be great to know what went wrong above. Would accept any other answer explaining this. </p>
<pre><code>class SaveVideo(APIView):
    def post(self, request):
        filename = 'demo.mp4'
        with open(filename, 'wb+') as destination:
            for chunk in request.FILES['video-blob'].chunks():
                destination.write(chunk)
        return Response({"status":"ok"})
</code></pre>
<p>Javascript</p>
<pre><code>function xhr(url, data, callback) {
      var request = new XMLHttpRequest();
            request.onreadystatechange = function () {
                if (request.readyState == 4 &amp;&amp; request.status == 200) {
                   callback(request.responseText);
                }
            };

    request.open('POST', url);
    request.setRequestHeader('X-CSRFToken',Cookies.get('csrftoken'))
    request.send(data);
    }

    var fileType = 'video'; 


    var fileName = 'ABCDEF.webm'; 

    var formData = new FormData();
    formData.append(fileType , fileName);
    formData.append(fileType + '-blob', blob);
    xhr(url,formData,callback_function);
</code></pre>
</div>
<span class="comment-copy">Thanks for letting me know about the details behind struct.pack</span>
