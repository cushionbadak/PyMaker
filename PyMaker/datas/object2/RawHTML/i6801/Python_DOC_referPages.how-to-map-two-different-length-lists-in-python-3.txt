<div class="post-text" itemprop="text">
<p>I have two lists.</p>
<p>Say,</p>
<pre><code>letterList = [(1, 'a') (1, 'b')]
bigramList = [(2, 'ab'), (2, 'cd'), (2, 'ef')]
</code></pre>
<p>I would like to map the two lists together to get this output:</p>
<pre><code>print(myMap)
# [ ((1, a), (2, ab)), ((1, b), (2, cd)), (None, (2, ef)) ]
</code></pre>
<p>I am getting an output of something like this: <code>&lt;map object at 0x7f639461efd0&gt;</code></p>
<p>I know my problem lies in this line:</p>
<pre><code>myMap = (map(None, letterList, biGramList))
</code></pre>
<p>I think it's because of Python 3. Just not too sure how to fix it and get the output I want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest()</code></a>:</p>
<pre><code>&gt;&gt;&gt; letterList = [(1, 'a'), (1, 'b')]
&gt;&gt;&gt; bigramList = [(2, 'ab'), (2, 'cd'), (2, 'ef')]
&gt;&gt;&gt; list(itertools.zip_longest(letterList, bigramList))
[((1, 'a'), (2, 'ab')), ((1, 'b'), (2, 'cd')), (None, (2, 'ef'))]
</code></pre>
<p>Note that you don't necessarily need to coerce it to a list to use it, it's just convenient for printing.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are not allowed to import external modules, then this may help:</p>
<pre><code>result = list(zip(letterList,bigramList))
l1 = len(letterList)
l2 = len(bigramList)
if l1 &gt; l2:
    result += [(item, None) for item in letterList[l2:]]
else:
    result += [(None, item) for item in bigramList[l1:]]
#[((1, 'a'), (2, 'ab')), ((1, 'b'), (2, 'cd')), (None, (2, 'ef'))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>inline <code>if else</code> could work - but this relies on knowing the shorter list from the start</p>
<pre><code>lst = [(1, 'a'), (1, 'b')]
bst = [(2, 'ab'), (2, 'cd'), (2, 'ef')]

[(lst[i] if i &lt; len(lst) else None,
  bst[i])
 for i in range(len(bst))]

Out[30]: [((1, 'a'), (2, 'ab')), ((1, 'b'), (2, 'cd')), (None, (2, 'ef'))]
</code></pre>
<p>actually a 'one-liner' list comprehension but with line breaks in hope of improving readability</p>
<p><strong>edit:</strong> it can be generalized to treat the inputs symmetrically</p>
<pre><code>[(lst[i] if i &lt; len(lst) else None,
  bst[i] if i &lt; len(bst) else None)
 for i in range(max(len(lst), len(bst)))]
</code></pre>
</div>
<span class="comment-copy">"... how to fix it and get the output I want" - it would be helpful if you showed us what is the output you want. and also an example of input...</span>
<span class="comment-copy">If you know the problem is in <code>myMap = (map(None, letterList, biGramList))</code>, then post the sample values of <code>letterList</code> and <code>biGramList</code> and do <i>not</i> post everything else. we are not interested in seeing the irrelevant code.</span>
<span class="comment-copy">Input example: google Both Output: As the Format displays... [ ((LetterFreq1,Letter1), (BiGramFreq1,BiGram1)), ((LetterFreq2,Letter2), (BiGramFreq2,BiGram2)), (( , ), ( , )) etc... ]</span>
<span class="comment-copy">Further, please remove all the irrelevant code (~95% of the code you posted) and provide a <a href="https://stackoverflow.com/help/mcve">a Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy"><code>map(None, ...)</code>? Man, that's an old idiom. Pre-Python 2, even! <code>zip</code> has been a better way to express that since 2.0, and <code>list(zip(...))</code> if you need a list on Python 3.</span>
<span class="comment-copy">I'm not allowed to import anything besides regular expressions for this exercise.</span>
<span class="comment-copy">@John The first law of programming is: ignore all improper restrictions, because your bosses are always going to be dumber than you.</span>
<span class="comment-copy">@o11c The first law of taking a programming course: do not ignore the restrictions imposed by your professor.</span>
<span class="comment-copy">Hahaha -- it was a professor's rule, not a boss lol</span>
