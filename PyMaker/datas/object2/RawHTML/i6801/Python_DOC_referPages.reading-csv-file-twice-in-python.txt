<div class="post-text" itemprop="text">
<p>Here is my Python code:</p>
<pre><code>import csv

# Reading
ordersFile = open('orders.csv', 'rb')
ordersR = csv.reader(ordersFile, delimiter=',')

# Find order employeeID=5, shipCountry="Brazil"
print "Find order employeeID=5, shipCountry=\"Brazil\""
for order in ordersR:
    if order[2] == '5' and order[13] == 'Brazil':
        print order
# Find order employeeID=5
print "Find order employeeID=5"
for order in ordersR:
    if order[2] == '5':
        print order
ordersFile.close()
</code></pre>
<p>I can print something of "# Find order employeeID=5, shipCountry="Brazil"", but I got nothing for # Find order employeeID=5. I was thinking of how to reading(selecting) rows in the same csv files more than one time.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're just reading right through your CSV file, but if you want to work on the data in multiple passes, you should read the contents into a variable. Then you don't have to re-read the file every time you need to do stuff with it.</p>
<pre><code>import csv

# Read order rows into our list
# Here I use a context manager so that the file is automatically
# closed upon exit
with open('orders.csv') as orders_file:
    reader = csv.reader(orders_file, delimiter=',')
    orders = list(reader)

# Find order employeeID=5, shipCountry="Brazil"
print "Find order employeeID=5, shipCountry=\"Brazil\""
for order in orders:
    if order[2] == '5' and order[13] == 'Brazil':
        print order

# Find order employeeID=5
print "Find order employeeID=5"
for order in orders:
    if order[2] == '5':
        print order
</code></pre>
<p>If your CSV file is too huge to fit into memory (or you don't want to read it all into memory for some reason), then you'll need a different approach. If you need that, please leave a comment.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you can do is simply convert the reader object result into a list :</p>
<pre><code>with open('orders.csv', 'rb') as ordersFile:
    ordersR = list(csv.reader(ordersFile, delimiter=','))
</code></pre>
<p>The reader object is like a generator, once you have iterate the values, you cannot begin a second loop to read the values again.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you do not want to store all your data in a list, this is a pure generator-based approach to iterate over your csv file twice. using <a href="https://docs.python.org/3/library/itertools.html?itertools.tee#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee</code></a>:</p>
<pre><code>with open('orders.csv', 'r') as file:
    rows0, rows1 = tee(reader(file, delimiter=','))

    for row in rows0:
        print(row)  # search for something...

    print()

    for row in rows1:
        print(row)  # search for a different thing...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's better to read through files <em>once</em> because I/O is likely to be the slowest part of your program.</p>
<p>If you need to re-read the file, you can either close it and re-open it, or <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer"><code>seek()</code></a> to the beginning, i.e. add <code>ordersFile.seek(0)</code> between your loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>This a good case for using the pandas module (you need to install it: <code>pip install pandas</code>)</p>
<p>After that, you just read the file once, and perform any type of fitering easily </p>
<p>for instance, to read and filter the file more that once, follow this example: </p>
<pre><code>import pandas as pd 

# read csv into a dataframe 
df = pd.read_csv('orders.csv', delimiter=',') 

# get the data that has employeeID == 5
df1 = df[df["employeeID"] == 5]
print(df1) 

# get the data that has employeeID == 5 and  shipCountry=\"Brazil\"

df2 = df[(df["employeeID"] == 5)&amp; (df["shipCountry"] == "Brazil")]
print(df2) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @<strong>Nick T</strong> mentioned above, I/O is considered expensive comparing to RAM access, so if you need to iterate over your file more than once, it is better to save it to a variable.</p>
<p>You also can combine multiple conditions in a single for loop, so it performs faster (single iteration):</p>
<pre><code>with open('orders.csv', 'rb') as ordersFile:
    orders = list(csv.reader(ordersFile, delimiter=','))

# Find order employeeID=5, shipCountry="Brazil"
emp = []
country = []
for order in orders:
    if order[2] == '5':
        if order[13] == 'Brazil':
            country.append(order)
        else:
            emp.append(order)

 print 'emp id=5 and shippingcountry=Brazil: {}'.format(country)
 print 'emp id=5: {}'.format(emp)
</code></pre>
<p>Note that this isn't scalable, you probably don't want to add any more <code>if</code> logic in this block as it becomes not readable</p>
</div>
<span class="comment-copy">You cannot read the same open file twice. Either rewind it before reading for the second time, or close and open again. Better yet, count everything you need when you read the file for the first time.</span>
<span class="comment-copy">Have you tried <code>ordersFile.seek(0)</code>?</span>
<span class="comment-copy">Isn't <code>for row in reader:orders.extend(row)</code> just <code>orders=list(reader)</code>?</span>
<span class="comment-copy">@DYZ - yes, good call.</span>
<span class="comment-copy">@birryree Thanks, and could you share a different approach as well?</span>
<span class="comment-copy">@user6142261 - would you say all your stuff can be done in one pass (if so, other answers have that covered)? Do you not want to read everything into memory? Are you open to using third-party libs? Do you have <i>huge</i> CSV files?</span>
