<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5466451/how-can-i-print-literal-curly-brace-characters-in-python-string-and-also-use-fo">How can I print literal curly-brace characters in python string and also use .format on it?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/31859757/format-keyerror-when-using-curly-brackets-in-strings">Format: KeyError when using curly brackets in strings</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I am having problems using <code>format</code> with a string which looks like a Python dictionary.</p>
<p>I want to generate the following string: <code>{"one":1}</code>
If I try to do it as:</p>
<pre><code>'{"one":{}}'.format(1)
</code></pre>
<p>the interpreter throws a KeyError:</p>
<pre><code>&gt;&gt;&gt; a = '{"one":{}}'.format(1)
Traceback (most recent call last):
    File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: '"one"'
</code></pre>
<p>I understand that the issue probably revolves around the fact that the string contains <code>{</code>, which can be confused with <code>format</code>'s <code>{}</code>. Why is this happening exactly and how can it be solved?</p>
<p>I know of percentage formatting, but I'd like to find a solution that doesn't involve ditching <code>format()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The formatting of <code>'{"one": {}}'</code> is <a href="https://docs.python.org/3/library/string.html#grammar-token-field_name" rel="nofollow noreferrer">using an identifier as the <code>field_name</code></a> and will essentially try to look for a keyword argument that's been supplied to <code>.format</code> and has the name <code>'"one"'</code>.</p>
<p>As the docs state:</p>
<blockquote>
<p>The <code>field_name</code> itself begins with an <code>arg_name</code> that is either a number or a keyword. If it’s a number, it refers to a positional argument, and <em>if it’s a keyword, it refers to a named keyword argument.</em></p>
</blockquote>
<p><sub>(emphasis mine)</sub></p>
<p>That's why you get the <code>KeyError</code> exception; it tries to look for a key in the mapping of keyword arguments provided to <code>format</code>. (which, in this case, is empty, hence the error).</p>
<p>As a solution, just escape the outer curly braces:</p>
<pre><code>&gt;&gt;&gt; '{{"one":{}}}'.format(1)
'{"one":1}'
</code></pre>
<p>The same remedy applies if you decide on using <code>f</code>-strings in the future:</p>
<pre><code>&gt;&gt;&gt; f'{{"one": {1}}}'
'{"one": 1}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need doubled curly braces <code>{{</code> <code>}}</code> to escape curly braces in string formatting.</p>
<pre><code>a= '{{"one":{}}}'.format(1)
</code></pre>
<p>from <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">doc</a>:</p>
<blockquote>
<p>Format strings contain “replacement fields” surrounded by curly braces
  <code>{}</code>. Anything that is not contained in braces is considered literal
  text, which is copied unchanged to the output. If you need to include
  a brace character in the literal text, <strong>it can be escaped by doubling:
  <code>{{</code> and <code>}}</code></strong>.</p>
</blockquote>
<p>If you do not escape braces, <code>str.format()</code> will look for the value of key <code>'"one"'</code> to format the string. For example:</p>
<pre><code>b = '{"one"} foo'.format(**{'"one"':1})
print(b) # 1 foo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Braces can be escaped by using double braces, use:</p>
<pre><code>'{{"one":{}}}'.format(1)
</code></pre>
</div>
<span class="comment-copy">Keep in mind than percentage formatting is faster: format=0.7228269569986878, %=0.03355357599866693 ( result of <code>timeit.timeit</code>  on your example )</span>
<span class="comment-copy">@YaroslavSurzhikov Unless you're generating vast amounts of strings I don't think that really matters.</span>
<span class="comment-copy">If you want to make a string of a dictionary, consider <code>str({"one":1})</code>.</span>
<span class="comment-copy">Note: Even if the question isn't identical, if an answer explains the reason for something, <a href="https://stackoverflow.com/questions/41983180/is-the-empty-tuple-in-python-a-constant#comment71144721_41983180">it still qualifies</a>.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Good enough for me.</span>
<span class="comment-copy">Ah! I knew escaping was the problem, but I was using `` to escape, not double curly braces. Thanks!</span>
