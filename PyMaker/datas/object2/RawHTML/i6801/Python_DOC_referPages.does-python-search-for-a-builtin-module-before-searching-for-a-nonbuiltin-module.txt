<div class="post-text" itemprop="text">
<p><strong>Specific example:</strong></p>
<p>in <code>/tmp/test</code>, I create a file <code>itertools.py</code> with following content:</p>
<pre><code>def f():
    print("it is my own itertools.")
</code></pre>
<p>I know there is a builtin module named <code>itertools</code></p>
<p>Then I run <code>python3</code> from <code>/tmp/test</code>,</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; itertools.__dict__
{'_tee': &lt;class 'itertools._tee'&gt;, 'groupby': &lt;class 'itertools.groupby'&gt;, ...}
</code></pre>
<p>So I import the builtin module <code>itertools</code> instead of <code>/tmp/test/itertools.py</code>.</p>
<p>It seems that Python searches for a builtin module before searching for a nonbuiltin module. 
This is contrary to <a href="https://stackoverflow.com/questions/10501473/python-modules-with-identical-names-i-e-reusing-standard-module-names-in-pack">Python modules with identical names (i.e., reusing standard module names in packages)</a>. Why?</p>
<hr/>
<p><strong>General rules:</strong> </p>
<p>From Python in a Nutshell</p>
<blockquote>
<p>When a module is loaded,  <code>__import__</code> first checks whether the
  module is built-in. The  tuple  <code>sys.builtin_module_names</code>   names 
  all  built-in  modules,  but  rebinding that tuple does not affect
  module loading.<br/>
  The search for built-in modules also looks for modules in
  platform-specific loca‐ tions, such as the Registry in Windows.</p>
<p>If module  M  is not built-in,  <code>__import__</code> looks for  M ’s code as a file on the filesystem.
  <code>__import__</code>  looks at the strings, which are the items of list  <code>sys.path</code> , in order. </p>
</blockquote>
<p>From Learning Python</p>
<blockquote>
<p>In many cases, you can rely on the automatic nature of the module
  import search path and won’t need to configure this path at all. If
  you want to be able to import user- defined files across directory
  boundaries, though, you will need to know how the search path works in
  order to customize it. Roughly, Python’s module search path is
  composed of the concatenation of these major components, some of which
  are preset for you and some of which you can tailor to tell Python
  where to look:</p>
<ol>
<li>The home directory of the program</li>
<li>PYTHONPATH directories (if set)</li>
<li>Standard library directories</li>
<li>The contents of any .pth files (if present)</li>
<li>The site-packages home of third-party extensions</li>
</ol>
</blockquote>
<p>Are the five places in Learning Python stored in <code>sys.path</code>? </p>
<p>Are the five places in Learning Python  searched only after failing to find a builtin module in <code>sys.builtin_module_names</code>?</p>
<p>Is "3. Standard library directories" not including the builtin modules? Where are the builtin modules stored? What are the relations between "3. Standard library directories" and the builtin modules?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is only a partial answer but it may help clear up some concepts.</p>
<ul>
<li><p>Builtin modules are typically implemented in C (at least for CPython) and compiled. These are listed in <code>sys.builtin_module_names</code>. Examples of such modules are <code>sys</code>, <code>itertools</code> and <code>_collections</code> (note the leading underscore).</p></li>
<li><p>Then there are the standard library modules. These are normal Python files and on Windows located in a folder <code>lib</code> inside your Python installation. For example <code>collections</code> (without underscore) or <code>copy</code>...</p></li>
<li><p>Then there are installed extension modules. These can be compiled modules, normal Python files, etc. On Windows these are found in the <code>site_packages</code> folder inside the <code>lib</code> folder.</p></li>
</ul>
<p>If I look at my <code>sys.path</code>:</p>
<pre><code>['',                                           # current directory
 '...\\Python\\python35.zip',                  # no idea
 '...\\Python\\DLLs',                          # compiled modules (not builtins)
 '...\\Python\\lib',                           # standard library modules
 '...\\Python',                                # Python installation folder
 '...\\Python\\lib\\site-packages',            # installed modules
 ...]
</code></pre>
<p>It seems like 1, 3 and 5 are included in my <code>sys.path</code> so <em>maybe</em> 2 and 4 (if set) would be included in there as well. But that could also be something Windows specific.</p>
<p>As for your title question:</p>
<blockquote>
<p>Does Python search for a builtin module before searching for a nonbuiltin module?</p>
</blockquote>
<p>Yes! The builtins are searched first, before it progresses to look for a module in the current directory or the standard library (or in the installed modules).</p>
<p>For example if you have a <code>sys.py</code> a <code>copy.py</code> file in your current working directory and you try:</p>
<pre><code>&gt;&gt;&gt; import sys   # a builtin module
&gt;&gt;&gt; sys
&lt;module 'sys' (built-in)&gt;     ... not the one from the current working directory

&gt;&gt;&gt; import copy  # a standard library module
&gt;&gt;&gt; copy.__file__
... current working directory ... not the one from the standard library
</code></pre>
<p>If you're really interested in the specifics it would probably be a good idea to consult the <a href="https://docs.python.org/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a> documentation and the referred PEPs. Personally, I wouldn't go down that path just out of curiosity.</p>
</div>
<span class="comment-copy">You can sort most of this out by just printing both of these variables from a program. The reference docs are probably a more up-to-date place for that kind of detail - <a href="https://docs.python.org/3/library/index.html" rel="nofollow noreferrer">docs.python.org/3/library/index.html</a></span>
<span class="comment-copy">I know for a fact that the current directory is always searched first (before loading an installed package). That can provoke ugly bugs if you name a file just like a builtin module. However I would refer to the python documentation (yes, it's long) on the <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a> and all of it's references.</span>
<span class="comment-copy">@MSeifert I just added an example, which shows that a builtin module is searched for before a nonbuiltin module. I am puzzled...</span>
<span class="comment-copy">Sorry, I was thinking about installed packages, not builtins.</span>
<span class="comment-copy">@MSeifert are installed packages stored in "3. Standard library directories" , "5. The site-packages home of third-party extensions", or somewhere else?</span>
<span class="comment-copy">Thanks. Why is my example contrary to  <a href="https://stackoverflow.com/questions/10501473/python-modules-with-identical-names-i-e-reusing-standard-module-names-in-pack" title="python modules with identical names i e reusing standard module names in pack">stackoverflow.com/questions/10501473/…</a></span>
<span class="comment-copy">Because you're using python-3.x which uses absolute imports by default?</span>
