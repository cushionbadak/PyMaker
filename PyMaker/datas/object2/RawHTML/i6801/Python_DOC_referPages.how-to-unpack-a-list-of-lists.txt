<div class="post-text" itemprop="text">
<p>This may be a duplicate question, but I want to find out is there a way to unpack a list of lists and make a variable from an unpacked result? I have a data in the file  like: </p>
<pre><code>'[416213688, 422393399, 190690902, 81688],| [94925847, 61605626, 346027022],| [1035022, 1036527, 1038016]'
</code></pre>
<p>So I open a file and make it a list</p>
<pre><code>with open ('data.txt', "r") as f:
   a = f.read()
a = a.split("|")
print(*a)
</code></pre>
<p>Output: </p>
<p><code>[416213688, 422393399, 190690902, 81688],  [94925847, 61605626, 346027022],  [1035022, 1036527, 1038016]</code></p>
<p>This is the output I need for next step of my program. 
But I can't make this result <code>a</code> variable for using it further. It gives me a <code>SyntaxError: can't use starred expression here</code> if I try:</p>
<pre><code>a = (*a) 
</code></pre>
<p>I tried making it by using <code>zip</code>, but it gives me incorrect output, similar to what is described in the question <a href="https://stackoverflow.com/questions/19278084/zip-function-giving-incorrect-output"><strong>zip function giving incorrect output</strong></a>.</p>
<pre class="lang-none prettyprint-override"><code>&lt;zip object at 0x0000000001C86108&gt;
</code></pre>
<p>So is there any way to unpack a list of list and get an output like: </p>
<pre><code>[1st list of variables], [2nd  list of variables], [etc...]
</code></pre>
<p>if i use  itertools i get: </p>
<pre><code>   l = list(chain(*a))
   Out: ['[', '4', '1', '6', '2', '1', '3', '6'...
</code></pre>
<p>that is not required</p>
<p>So the working option is <a href="https://stackoverflow.com/a/46146432/8589220">https://stackoverflow.com/a/46146432/8589220</a>: </p>
<pre><code> row_strings = a.split(",| ")
 grid = [[int(s) for s in row[1:-1].split(", ")] for row in row_strings]
 print(",".join(map(str, grid)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a quick and dirty way to parse the string into a two-dimensional grid (i.e.: a list, which itself contains a list of integers):</p>
<pre><code>row_strings = a.split(",| ")
grid = [[int(s) for s in row[1:-1].split(", ")] for row in row_strings]
print("\n".join(map(str, grid)))
# Out:
# [416213688, 422393399, 190690902, 81688]
# [94925847, 61605626, 346027022]
# [1035022, 1036527, 1038016]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's start with the raw output (I'm just manually going to make the string, but this is equivalent to your read method)</p>
<pre><code>a = '[416213688, 422393399, 190690902, 81688],| [94925847, 61605626, 346027022],| [1035022, 1036527, 1038016]'
</code></pre>
<p>This is now just one long string. Let's make it a list of strings</p>
<pre><code>a = a.split(',|')
</code></pre>
<p>I did ',|' instead of just '|' because you'll want to get rid of the comma too.</p>
<p>Now a looks like this:</p>
<pre><code>&gt;&gt;&gt; ['[416213688, 422393399, 190690902, 81688]', ' [94925847, 61605626, 346027022]', ' [1035022, 1036527, 1038016]']
</code></pre>
<p>It's a list of strings that look like arrays. Let's turn those strings into arrays of integers. One way we can do that is with <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><strong>ast.literal_eval()</strong></a>. What it does is takes a string as the argument and attempts to interpret whatever is in that string as a Python literal. It doesn't like leading whitespace, so we remove that first with <code>.strip()</code>.</p>
<pre><code>import ast
a = [ast.literal_eval(arr.strip()) for arr in a]
</code></pre>
<p>What this does is it takes each string in <code>a</code>, <code>literal_eval</code>'s it, and puts those into a list.</p>
<p>This should return the code you want.</p>
<pre><code>[[416213688, 422393399, 190690902, 81688], [94925847, 61605626, 346027022], [1035022, 1036527, 1038016]]
</code></pre>
</div>
<span class="comment-copy">You can try list comprehensions like [x for l in list for x in l].</span>
<span class="comment-copy">Zip doesn't give 'incorrect output', you might be using it incorrectly. It's also not clear exactly what you're trying to accomplish - your data is in a variable and that variable contains a list of lists.</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>: <code>from itertools import chain; l = list(chain(*a))</code>.</span>
<span class="comment-copy">Are you looking for <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer"><code>json.loads</code></a>?</span>
<span class="comment-copy">What are you trying to do? <code>split()</code> returns a list. So calling <code>a = list(a)</code> is redundant. Does this unpacked variable need to be an iterable or a single line of strings/ints/chars?</span>
