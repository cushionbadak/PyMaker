<div class="post-text" itemprop="text">
<p>First I write a chatserver</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket, threading, time

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('127.0.0.1', 9999))

s.listen(3)
print('waiting for someone to chat with...')

def chatpro(sock, addr):
    print('Connection with %s:%s established!'%addr)
    sock.send(('Welcome: %s:%s'%addr).encode('utf-8'))
    while True:
        data = sock.recv(1024)
        if data.decode('utf-8') == 'exit':
            sock.send(('Bye: %s:%s' % addr).encode('utf-8'))
            break
        print('From %s:%s: \n'%addr, data.decode('utf-8'))
        print('Please say something：')
        smg = input()
        sock.send(smg.encode('utf-8'))
    sock.close()
    print('Connection closed!')


while True:
    sock, addr = s.accept()
    t = threading.Thread(target=chatpro, args=(sock, addr))
    t.start()
</code></pre>
<p>and then the client</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('127.0.0.1', 9999))
print(client.recv(1024).decode('utf-8'))
while True:
    print('please say something：')
    smg = input()
    client.send(smg.encode('utf-8'))
    re = client.recv(1024).decode('utf-8')
    print(re)
    if re[:3] == 'Bye':
        print('Connection closed')
        break
client.close()
</code></pre>
<p>The client will first say something to the server, and the server in turn say something to the client. This works fine.
But if I accidently typed an extra Enter or I didn't say something in turn, then the program will be blocked? Then I typed something in server and client and nothing happed, why?
Thanks!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>The logic in your server is essentially:</p>
<pre><code>1 send initial greeting
2 while True:
3    receive data from client
4    read line from terminal
5    send line to client
</code></pre>
<p>While the logic in your client is:</p>
<pre><code>1 receive initial greeting
2 while True:
3     read line from terminal
4     send line to server
5     receive data from server
</code></pre>
<blockquote>
<p>... I didn't say something in turn, then the program will be blocked</p>
</blockquote>
<p>The client will only pass line 5 and start again with line 3 if it has received data from the server. But the server will only sent data if the user has entered data at the terminal. This means that the client will block in line 5 if the user does not enter data at the server.</p>
<blockquote>
<p>... if I accidently typed an extra Enter ... then the program will be blocked</p>
</blockquote>
<p>The client and server use <code>input()</code> to read a single line from the terminal. If you type an extra Enter this means an additional line. This line will be buffered internally until the next <code>input()</code> which then immediately returns with this new line. Thus even if your client just received a message from the server in line 5 it will immediately pass line 3 and 4 again and wait again for data from the server in line 5. Even worse, the empty line returned by <code>input()</code> in line 3 means that no data were actually sent in line 4. This means that no the server is waiting for data from the client and the client is waiting from the server, i.e. a deadlock.</p>
<p>For a proper chat applications you need to handle receiving from the peer and input from the terminal independently from each other, i.e. not require that these happen always in a specific order like you currently do. A common way to this this is by using <a href="https://docs.python.org/3/library/select.html" rel="nofollow noreferrer">select</a>. And there are <a href="https://www.google.de/search?q=python+select+chat+server+client" rel="nofollow noreferrer">many examples on the internet which show how to do this</a>.</p>
</div>
<span class="comment-copy">Never use <code>socket</code> directly. Always use <code>twisted</code> or equivalent.</span>
