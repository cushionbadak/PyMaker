<div class="post-text" itemprop="text">
<pre><code>data_sets = [
    ['O'],
    ['X'],
    # These data sets put Sheet A in all possible locations and orientations
    # Data sets 2 - 9
    ['O', ['Sheet A', 'Location 1', 'Upright']],
    ['O', ['Sheet A', 'Location 2', 'Upright']],
    ['O', ['Sheet A', 'Location 3', 'Upright']],
    ['O', ['Sheet A', 'Location 4', 'Upright']],
    ['O', ['Sheet A', 'Location 1', 'Upside down']],
    ['O', ['Sheet A', 'Location 2', 'Upside down']],
    ['O', ['Sheet A', 'Location 3', 'Upside down']],
    ['O', ['Sheet A', 'Location 4', 'Upside down']]
    ]

for each in data_sets:
    if 'Sheet A' in each:
        print('1')
</code></pre>
<p>when i run this, it doesn't print anything because i dont think its going through all the sublists. how can i get this to work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a></p>
<pre><code>import itertools
for each in data_sets:
    if "Sheet A" in itertools.chain.from_iterable(eeach):
        print("1")

1
1
1
1
1
1
1
1
</code></pre>
<p>Here you have a <a href="https://repl.it/KvM1/0" rel="nofollow noreferrer">live example</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>in</code> is not recursive. It tries to find the item in the list itself. If the item is a <code>list</code>, <code>in</code> won't go down in the list to look for the string.</p>
<p>In your case, you could</p>
<ul>
<li>check if the list has at least 2 items</li>
<li>perform <code>in</code> on the second item</li>
</ul>
<p>like this:</p>
<pre><code>for each in data_sets:
    if len(each)&gt;1 and 'Sheet A' in each[1]:
        print('1')
</code></pre>
<p>of course if the structure is more complex/not fixed, you have to use a recursive approach which tests item type, like this: <a href="https://stackoverflow.com/questions/21662543/python-nested-list-recursion-search">Python nested list recursion search</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def listChecker(list_elems):
   for list_elem in list_elems:
      if "Sheet A" in list_elem:
         print "1"
      if any(isinstance(elem, list)  for elem in list_elem):
         listChecker(list_elem)

listChecker(data_sets)
</code></pre>
<p>you can also use this function. It will be helpful to print 1 in all cases of nested lists. Just pass your list object to this function.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can also check it by <code>count</code>. </p>
<pre><code>for each in data_sets:
    if len(each)&gt;1 and each[1].count("Sheet A"):
        print('1')
</code></pre>
<ul>
<li><code>len(each)&gt;1</code> checks the number of list item.</li>
<li><code>each[1]</code> is the second sublist of your given list. and <code>.count("Sheet A")</code> returns occurrence number of <code>Sheet A</code>.</li>
</ul>
</div>
<span class="comment-copy">You need to first check the length of your sublist then check for 'Sheet A' in possible sublists.</span>
<span class="comment-copy">Does the search look into comments? I would want to find this under "How to check items if in (inside) nested lists inside a list". Great tool, works.</span>
<span class="comment-copy">I believe the interable(eeach) is a typo. For me, similar works with interable(each), exactly as in the "for"-line.</span>
<span class="comment-copy">I was going to add this, if you didn't</span>
