<div class="post-text" itemprop="text">
<p>Below is my code. The goal is to convert a date input into a dashed format (e.g. 01-01-2001). After converting the date, it should print the date. However, if the date is unintelligible or not a valid input, it should print "Not a valid date" and return None. Right now, even for correct date inputs, it only returns None. The conversion script was used in a previous task and works fine, so I do believe the issue is in the 'try/except' chunk.</p>
<p>Testing inputs: </p>
<pre><code>print(date_conversion_robust('19/8/16'))---&gt; 19-08-2016

print(date_conversion_robust('1/12/1898'))---&gt; 01-12-1898

print(date_conversion_robust('16/3/18'))---&gt; 16-03-1918

print(date_conversion_robust('29/2/2017'))---&gt; Not a valid date. None

print(date_conversion_robust('131/2/1928'))---&gt; Not a valid date. None

print(date_conversion_robust(2))---&gt; Not a valid date. None
</code></pre>
<p>Thanks!</p>
<pre><code>#Convert date inputs
def convert_day(day_string):
    if int(day_string) &lt; 10:
        return (day_string).zfill(2)
    else:
        return day_string

def convert_month(month_string):
    if int(month_string) &lt; 10:
        return (month_string).zfill(2)
    else:
        return month_string

def convert_year(year_string):
    if int(year_string) &lt; 18:
        return('20'+(year_string))
    elif int(year_string) &lt; 99:
        if int(year_string) &gt;= 18:
            return('19'+(year_string))
    else:
        return year_string


#form date string 
def date_conversion(date_string):
    date_as_list = date_string.split('/')
    a = convert_day(date_as_list[0])
    b = convert_month(date_as_list[1])
    c = convert_year(date_as_list[2])
    try:
        L = [a, b, c]
        return('-'.join(L))
    except(AttributeError, SyntaxError, TypeError):
        print('Not a valid date.')
        return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're taking some extra steps, and you're skipping some steps.  Validating the date and/or dealing with different date formats is the tricky part, and you're not doing it: is the separator <code>/</code>, <code>-</code>, <code>.</code> ?  Is it dd-mm-yyyy or mm-dd-yyyy or one of the myriad other formats? (may not be a problem if you're pulling from a source with a known format, but certainly will be a problem if you're expecting human date input).  Your component conversion functions don't have to conditionally call <code>.zfill()</code>, that is <code>'12'.zfill(2)</code> is not an error - which means you don't really need functions for this at all.  Your try/except seems to be misplaced: it should really be around validating the input, once you have three elements it's not going to fail joining them to create the return. You could just as easily use string formatting.  And so on.</p>
<p>Using the module for date manipulation as noted above seems the way to go!</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has date parsing and date formatting functions included in the standard library. Why not just use those?</p>
<pre><code>import datetime

def date_conversion(date_string):
  try:
    dt = datetime.datetime.strptime(date_string, '%d/%m/%y')
  except ValueError:  # invalid input string
    return None
  if dt.year &gt;= 2018: 
    dt = dt.replace(year=dt.year - 100)  # change century
  return dt.strftime('%d-%m-%Y')
</code></pre>
<p>By using this you also can make sure that input that are not actual dates (35/01/78, for example) are rejected.</p>
<p>Usage of datetime format strings is documented here: <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For the except to work, it should be </p>
<pre><code>except ValueError: 
</code></pre>
<p>instead of</p>
<pre><code>except(AttributeError, SyntaxError, TypeError):
</code></pre>
<p>The function below should work fine:</p>
<pre><code># Convert date inputs
def convert_day(day_string):
    if int(day_string) &lt; 10:
        return (day_string).zfill(2)
    else:
        return day_string


def convert_month(month_string):
    if int(month_string) &lt; 10:
        return (month_string).zfill(2)
    else:
        return month_string


def convert_year(year_string):
    if int(year_string) &lt; 18:
        return('20'+(year_string))
    elif int(year_string) &lt; 99:
        if int(year_string) &gt;= 18:
            return('19'+(year_string))
    else:
        return year_string


# form date string

def date_conversion(date_string):
    try:
        date_as_list = date_string.split('/')
        a = convert_day(date_as_list[0])
        b = convert_month(date_as_list[1])
        c = convert_year(date_as_list[2])

        k = a + '-' + b + '-' + c
        print(k)

    except ValueError:
        print('Not a valid date.')
        # return None
# 2 Test cases
date_conversion('19/8/16')
date_conversion('asfsdfggdf')
</code></pre>
<p>The result of the code above will be </p>
<pre><code>19-08-2016
Not a valid date.

Process finished with exit code 0
</code></pre>
</div>
<span class="comment-copy">Why are you trying to except <code>SyntaxError</code>s?</span>
<span class="comment-copy"><code>except</code>s only catch errors within the corresponding <code>try</code> block - which is only two statements in your case, neither of which can fail except in extremely contrived circumstances.  If anything does go wrong in your code, it's likely to be during a call to one of the <code>convert_X</code> functions, which aren't protected.</span>
<span class="comment-copy">The best way to find out what an Exception is and is doing, is to <code>raise</code> instead of handling/catching it the way you are now. Replace <code>print('Not a valid date.')</code> with <code>raise</code> and you will learn more about what's happening</span>
<span class="comment-copy">Please review <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and show us what input you're using and what output you're getting/expect. Your program <a href="https://repl.it/LACD/0" rel="nofollow noreferrer">seems to run fine</a> on valid input. And to be clear: <code>try</code>/<code>except</code> cannot catch <code>SyntaxError</code>s</span>
<span class="comment-copy">SyntaxError is not an runtime exception you cannot catch it !...</span>
