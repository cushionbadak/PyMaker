<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2932887/possible-to-call-single-parameter-python-function-without-using-parentheses">Possible to call single-parameter Python function without using parentheses?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/18048728/python-write-to-a-file-returns-empty-file">Python write to a file returns empty file</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I am copying an example from a book with a piece of code to write and read a file that has already been created (using utf-8). The thing is that the code I have doesn't print anything when I run it:</p>
<pre><code>#encoding = utf-8
import io 


f = io.open("abc.txt", "wt", encoding = "utf-8")
texto = u"Writing with díférént chars"
f.write(texto)
f.close


text = io.open("abc.txt", encoding = "utf-8").read()
print(text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are missing parens in the call to <code>close</code>:</p>
<pre><code>f.close()
</code></pre>
<p>Adding that then it prints for me in both python2 and python3.</p>
<p>Writing to a buffered io (the default using <code>io.open</code>) may causes writes to be <em>deferred</em> -- especially when writing small amounts of data (less than the <a href="https://docs.python.org/3/library/io.html#io.DEFAULT_BUFFER_SIZE" rel="nofollow noreferrer">default buffer size</a>).  Since the file is never closed, the buffer is never flushed to disk causing subsequent reads to see the file as truncated (the initial state when the file gets opened for writing).</p>
<p>I'd strongly suggest using the contextmanager protocol instead (as you won't even have to think about closing files):</p>
<pre><code># encoding: utf-8
import io 


with io.open("abc.txt", "wt", encoding="utf-8") as f:
    texto = u"Writing with díférént chars"
    f.write(texto)


with io.open("abc.txt", encoding="utf-8") as f:
    print(f.read())
</code></pre>
</div>
<span class="comment-copy"><code>f.close</code> is not <code>f.close()</code> -- it doesn't actually close the file.</span>
<span class="comment-copy">Are you quite sure binary writes are unbuffered (that only files opened as text are subject to output buffering)? Could you point to documentation to that effect? (I'm also hesitant to say that the writes are deferred -- that sounds like an assertion that they <i>won't</i> be visible until flushed, as opposed to an assertion that they <i>may not</i> be visible until flushed, subject to the difference between write size and buffer size, the local standard C library's write buffering behavior, and other runtime details and configuration).</span>
<span class="comment-copy">I made no comment about binary writes, which are also buffered by default -- I see how you could pull that from my answer in it's current state so I'll update accordingly :)  The buffering also happens independently of the C library as it's <a href="https://docs.python.org/3/library/io.html#io.BufferedWriter" rel="nofollow noreferrer">implemented in python</a>.</span>
