<div class="post-text" itemprop="text">
<p>I am trying to make a dictionary of array values in python but since I am new to python I seem to be missing something simple. Someone kick me in the butt please.</p>
<p>So a data like</p>
<pre><code>col1, col2
asd, foo
asd, bar
dsa, baz
</code></pre>
<p>should become</p>
<pre><code>{
    asd: ['foo', 'bar'],
    dsa: ['baz']
}
</code></pre>
<p>But</p>
<pre><code>rows = run_query('SELECT * FROM query_datasets')

datasets = {}

for row in rows:

    if not datasets[row['col1']]:
        datasets[row['col1']] = []

    datasets[row['col1']].append(row['col2'])

return datasets
</code></pre>
<p>Gives <code>foo</code>.</p>
<p>I can see the rows if I print them so data is there.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your condition <code>if not datasets[row['col1']]:</code> is wrong. This would get the element of that key from the dict and check whether it's "truthy", but the dict might not have that key yet, thus raising an exception. Instead, it should probably be <code>if row['col1'] not in datasets:</code>:</p>
<pre><code>for row in rows:
    if row['col1'] not in datasets:
        datasets[row['col1']] = []
    datasets[row['col1']].append(row['col2'])
</code></pre>
<p>Alternatively, you could use <code>dict.setdefault</code> to set and return a default value in case the key is not yet in the <code>dict</code>.</p>
<pre><code>for row in rows:    
    datasets.setdefault(row['col1'], []).append(row['col2'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your original code should not run without raising an exception because you try to access non-existent keys on the <code>datasets</code> dict.</p>
<h3>Using a <code>defaultdict</code></h3>
<p>For your use case this is my preferred method.</p>
<p>You can simplify a lot using the <code>defaultdict</code> convenience collection.</p>
<pre><code>from collections import defaultdict

# Make datasets a defaultdict that automatically initializes
# an empty list for a key
datasets = defaultdict(list)

rows = run_query('SELECT * FROM query_datasets')

for row in rows:
    datasets[row['col1']].append(row['col2'])
</code></pre>
<h3>Using EAFP (easier to ask forgiveness than permission)</h3>
<p>Here we rely on catching the <code>KeyError</code> thrown when accessing a non-existent key in a dictionary, and then initializing that value in the dict when that happens. If it already exists, just append to the list we've already created.</p>
<pre><code>datasets = {}

rows = run_query('SELECT * FROM query_datasets')

for row in rows:
    try:
        datasets[row[0]].append(row[1])
    except KeyError:
        datasets[row[0]] = [row[1]]
</code></pre>
<h3>Using key existence check</h3>
<p>Here we check <code>if row[0] in datasets</code>. The logic is similar to the previous example.</p>
<pre><code>rows = run_query('SELECT * FROM query_datasets')

for row in rows:
    if row[0] in datasets:
        datasets[row[0]].append(row[1])
    else:
        datasets[row[0]] = [row[1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Close!
This should fix it.</p>
<pre><code>rows = run_query('SELECT * FROM query_datasets')

datasets = {}

for row in rows:
    key = row['col1']
    val = row['col2']
    if not datasets.get(key): # You can use .get() to see if a dict has a key
        datasets[key] = [val]
    else:
        datasets[key].append(val)

return datasets
</code></pre>
</div>
<span class="comment-copy"><code>if not datasets[row['col1']]</code> assumes that <code>datasets</code> already has an entry for <code>row['col1']</code>. Since <code>datasets</code> starts out empty, this should <code>KeyError</code> immediately.</span>
<span class="comment-copy">@user2357112 does it? It runs on my 2.7.  Isn't that sort of a null check? kinda like <code>if datasets[row['col1']] is not None</code>.</span>
<span class="comment-copy">Try <code>if row['col1'] not in datasets</code> instead</span>
<span class="comment-copy">@tobias_k That was exactly what I was looking for! Thanks! I can accept it if you can add it as an answer. Not sure what's the deal with people suggesting modules for such a basic thing.</span>
<span class="comment-copy">I went with the first one because setting the default of empty will mess with my code that comes later on. Thanks!</span>
<span class="comment-copy">@Achshar: <code>setdefault</code> doesn't mean that the dict now permanently has some default value for missing keys. (That's <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>.) <code>setdefault</code> means "get the value for this key, or if the key isn't present, insert this value and return it".</span>
<span class="comment-copy">@user2357112 Yup, I understand that, but the later code is relying on key existence checks. So if the dict suddenly returns true to all key checks then that's not a good thing.</span>
<span class="comment-copy">@Achshar: But it <i>won't</i> return true for all key checks.</span>
<span class="comment-copy">@user2357112 Won't it return <code>[]</code> for all <code>.get()</code> calls? Changing the default behavior of the dictionary doesn't seem like the right thing to do.</span>
<span class="comment-copy">This is more of an exercise. So using a library/module would beat the whole 'learning python' thing I have going here. I was looking for a solution to my own code.</span>
<span class="comment-copy"><code>defaultdict</code> is part of the standard library and can help you reduce boilerplate in certain cases, but if you want something more academic, I'll update my answer with some other Pythonic solutions.</span>
<span class="comment-copy">That just sets the value in the <code>if</code>'s body right? Don't I need an array there? I have to collect all the values in an array. Plus the else runs if the key was not found, so how can it append to a value that doesn't exist?</span>
<span class="comment-copy">I think <code>datasets[key] = val</code> should be <code>datasets[key] = [val]</code></span>
<span class="comment-copy">@tobias_k Yeah and a <code>not</code> in that <code>if</code> as well.</span>
