<div class="post-text" itemprop="text">
<p>For the attributes of a class:</p>
<ul>
<li>The attribute <code>__dict__</code> of a class or an instance doesn't include <code>__base__</code>, <code>__name__</code>. 
What attributes does <code>__dict__</code> of a class contain, and what doesn't?</li>
<li>How can I get all the attributes of a class?</li>
</ul>
<p>For the attributes of an instance:</p>
<ul>
<li>The attribute <code>__dict__</code> of   an instance doesn't include <code>__class__</code>.
What attributes does <code>__dict__</code> of an instance contain, and what doesn't?</li>
<li>How can I get all the attributes of an instance?</li>
</ul>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__dict__</code> excludes:</p>
<ul>
<li>Any attributes (or descriptors) defined on the type (or any type in the mro).</li>
<li>Any attributes declared as part of a type implemented in C.</li>
<li>Any attributes declared in <code>__slots__</code>.</li>
</ul>
<p>The best you can do for listing all attributes is <code>dir</code>, but it is often unreliable.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>dict</strong> is interesting. What you need to understand is how Python looks up attributes, methods, etc. Thing like <strong>name</strong> are stored in dir(instance), which is not part of the standard <strong>getattr</strong> of your class. Only explicitly defined attributes and methods are part of A.<strong>dict</strong>, the other stuff is part of a complex look-up system, the rest is looking at the class, at the subclasses, etc, until you get to 'object'.</p>
</div>
<span class="comment-copy">Look at the <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer"><code>dir</code></a> function. It includes parameters if super classes. More info <a href="https://stackoverflow.com/questions/6761106/inspect-getmembers-vs-dict-items-vs-dir">here</a></span>
<span class="comment-copy">It doesn't include most of the magic methods, anything defined in <code>__slots__</code>, among other things.</span>
<span class="comment-copy">@MadPhysicist Thanks. What does "magic methods" mean?</span>
<span class="comment-copy">@Ben. Anything starting and ending with double underscores: <code>__init__</code>, <code>__new__</code>, <code>__eq__</code>, etc. These methods serve a special purpose in Python, you should not make new ones up, and most of them are not set in <code>__dict__</code> as far as I am aware.</span>
<span class="comment-copy">Also, you can have an infinite number of accessible attributes via <code>__getattr__</code> and <code>__getattribute__</code>, mostly the latter.</span>
<span class="comment-copy">There are also, ways to override <code>__dict__</code> itself, and ways to override the overriding. I forget how this works.</span>
<span class="comment-copy">Both second questions are not answered; and plz check the format <code>__dict__</code> vs <b>dict</b></span>
