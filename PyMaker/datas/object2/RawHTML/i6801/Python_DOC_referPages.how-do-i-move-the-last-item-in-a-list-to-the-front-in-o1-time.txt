<div class="post-text" itemprop="text">
<p>My code looks like this, where <code>heap</code> is a <code>list</code>:</p>
<pre><code> heap[0] = heap.pop()
</code></pre>
<p>The problem is it does not work when popping the only item. According to python wiki, popping last element is O(1). (I also want to remove the last element)</p>
<p>So far what I've come up with:</p>
<pre><code>last_element = heap.pop()  # I don't want to catch potential IndexError here
try:
    heap[0] = last_element
except IndexError:
    heap.append(last_element)
</code></pre>
<p>which is a lot longer</p>
<p>or this</p>
<pre><code>if len(heap) != 1:
    heap[0] = heap.pop()
</code></pre>
<p>which should be slower. </p>
<p>Is there a more pythonic way to do this? Internally python maybe does not even resize the array.</p>
<p>UPDATE:
I need O(1) access to elements at given indeces (so it cannot be a linked list).</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you're implementing a heap, and this line is part of the implementation of the heap-pop operation. In context, it would look something like</p>
<pre><code>def heappop_wrong(heap):
    popped_value = heap[0]
    heap[0] = heap.pop()  # &lt;-- here
    sift_down(heap, 0)
    return popped_value
</code></pre>
<p>In that case, if the list has only one element, you shouldn't be moving the last element to the front at all. You should just remove and return the only element:</p>
<pre><code>def heappop(heap):
    if len(heap) == 1:
        return heap.pop()
    popped_value = heap[0]
    heap[0] = heap.pop()
    sift_down(heap, 0)
    return popped_value
</code></pre>
<p>As for the cost of the <code>if</code>, this cost is trivial and not at all something you should be worrying about.</p>
<hr/>
<p>For moving the last element of a list to the front <em>without</em> replacing the old front element, this is not possible in O(1) time. You'd have to use a different data structure, like a <code>collections.deque</code>, or implement your own resizeable <a href="https://en.wikipedia.org/wiki/Circular_buffer" rel="nofollow noreferrer">ring buffer</a>. That's not relevant for a heap use case, though.</p>
<p>For moving the last element of a list to the front, stomping over the old first element if there were multiple elements and leaving the list unchanged if there was only one, an <code>if</code> check would probably be clearest, but again, the "leave the list unchanged if there was only one element" behavior isn't actually useful for implementing a heap-pop.</p>
</div>
<div class="post-text" itemprop="text">
<p>An approach that works (without exceptions, so long as the <code>list</code> is non-empty) is to assign to a slice of the <code>list</code>:</p>
<pre><code>heap[:1] = (heap.pop(),)
</code></pre>
<p>That pops the final element and creates a length 1 <code>tuple</code>, which is then assigned to the <code>heap</code> such that it replaces the first element if it exists, or becomes the contents of the <code>list</code> if it's empty (as a result of the <code>pop</code>). It should remain <code>O(n)</code> because it's always replacing a single element with a single element; the higher indices are untouched.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> supports removing from and appending to both the front and the back in O(1).</p>
<p>See <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">https://wiki.python.org/moin/TimeComplexity</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can check if the list is empty before attempting pop.</p>
<pre><code>if len(a) &gt; 0:
  a.insert(0,a.pop())
</code></pre>
<p>By default, pop returns the last element from the list so you do not have to explicitly pass -1. And since it raises an error if the list is empty, we can check its length before attempting to pop.</p>
<p>But insert operation on list is O(n). For O(1) you will need to use dequeue. </p>
<pre><code>from collections import deque
a = deque()
a.append(10)
a.append(12)
if len(a) &gt; 0:
  a.appendleft(a.pop())
print a
</code></pre>
</div>
<span class="comment-copy">Does <code>heap[0] = heap.pop(-1)</code> even work for larger lists, though? For example, if <code>heap</code> is <code>[1,2,3]</code>, then you want it to become <code>[3,1,2]</code>, right? But <code>heap[0] = heap.pop(-1)</code> causes it to become <code>[3,2]</code>,.. Or is that what you want? Please clarify.</span>
<span class="comment-copy">A single <code>if</code> statement is not a cost you should be worrying about.</span>
<span class="comment-copy">Python documentation says that <code>list.pop()</code>, no argument, removes and returns the last item in the list.</span>
<span class="comment-copy">Are you sure you understand your requirements? <code>heap[0] = heap.pop(-1)</code> sounds like the kind of thing that would appear in a heap-pop routine immediately before the sift-down, but if you're popping the only element from a heap, you shouldn't be performing this part of the procedure at all; you should just remove and return the single element.</span>
<span class="comment-copy">@user2357112 yes it's before sift-down. You've just saved me from another debugging. So I might use the try except thing and don't bubble-down in that case.</span>
<span class="comment-copy">yes, sift-down doesn't make sense if the list is empty. Moreover my sift-down implementation would give me another <code>IndexError</code> if the list would be empty.</span>
<span class="comment-copy">If @ShadowRanger is really O(1), it is a solution for doing that <code>heap[0] = heap.pop()</code> anyway.</span>
<span class="comment-copy">To be clear, this is a little excessively magical. For real code, I'd probably go with something like <a href="https://stackoverflow.com/a/46184460/364696">user235112's answer</a>. Well, in <i>real</i> code, I'd use <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer">the <code>heapq</code> module</a>; if you weren't aware of it already, I'd suggest taking a look. Writing your own heap as a learning exercise is fine, but don't reinvent the wheel for production code.</span>
<span class="comment-copy">Actually I used the <code>heapq</code> module, but I found disappointing the lack of <code>decrease</code> function. I didn't like the workaround for this in the docs and as I'm having a Programming exam next week I wrote one. It a lot shorter (for what I need) and it's an object as opposed to the functions.</span>
<span class="comment-copy">I use the list as a binary heap priority queue, so I need direct access to indeces.</span>
<span class="comment-copy">You should be able to do that. It's just that <i>that</i> is O(n). You can't have it all.</span>
<span class="comment-copy">From the docs: <i>Indexed access is O(1) at both ends but slows to O(n) in the middle. For fast random access, use lists instead.</i></span>
<span class="comment-copy">Do you mean <code>if len(a) &gt; 1:</code> ? This would deal with zero and one length lists.</span>
<span class="comment-copy">Yes, doing &gt;1 is a slight optimization.</span>
<span class="comment-copy">This doesn't remove the leading element, and runs in <code>O(n)</code> time, so it doesn't meet the requirements.</span>
<span class="comment-copy">list.insert  is O(n) <a href="https://stackoverflow.com/questions/27073596/what-is-the-cost-complexity-of-insert-in-list-at-some-location" title="what is the cost complexity of insert in list at some location">stackoverflow.com/questions/27073596/â€¦</a></span>
<span class="comment-copy">@ShadowRanger I updated the answer to state that it is O(n) and gave example of deque</span>
