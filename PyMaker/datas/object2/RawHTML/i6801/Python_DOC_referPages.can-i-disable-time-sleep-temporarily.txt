<div class="post-text" itemprop="text">
<p>I'm making a program which contains uses a lot of <code>time.sleep()</code>... I was wondering if there was a way I could disable the<code>time.sleep()</code>s temporarily (for example, if a certain argument is passed, <code>time.sleep()</code>s don't run)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time
time.oldsleep = time.sleep
# Set or clear this flag to enable/disable sleep
time.cansleep = True
def mysleep(x):
  if time.cansleep:
    time.oldsleep(x)

time.sleep = mysleep
</code></pre>
<p>Edit: hogwash removed. modules are singletons. TIL.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your program does not need to use the time module for anything else you could make a new python file called time.py and just write one line in it that reads <code>pass</code>. Save and place that in the same directory as your other file. additionally if you made a variable and multiplied it to every time.sleep. eg: <code>time.sleep(100*x)</code> you could set the variable to zero and to remove the sleeps or to 1 to make them normal</p>
</div>
<div class="post-text" itemprop="text">
<p>I don’t see why you have to go through so much trouble. You can simply save the original <code>time.sleep</code>, override the <code>time.sleep</code> when you want to disable it. For certain places that you wanted <code>time.sleep</code> to take place no matter what,  just use the backup <code>time.sleep</code> instead. </p>
<pre><code>import time

org_sleep = time.sleep # save the original time.sleep

sleep = False # set sleep to false when doesn’t want to sleep

if sleep != True: # if sleep is false
    # override time.sleep to an empty function
    time.sleep = lambda x: None 

time.sleep(10) # does not sleep
print("didn’t sleep")

org_sleep(10) # will sleep regardless of sleep being set to true or false
print("slept for 10 seconds")
</code></pre>
<p>Furthermore, as Charles Duffy suggested, using pytest’s monkeypatch to mock <code>time.sleep</code> is the preferred way to go.</p>
</div>
<span class="comment-copy"><code>def foo(x): if x == 'sleep': time.sleep(100)</code></span>
<span class="comment-copy">Why or how would this possibly work?</span>
<span class="comment-copy">Consider googling for "Python mocking framework". In Python 3, <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code></a> is even part of the standard library. Patch in the mock object in place of the real one (which, again, any decent mocking framework will do for you with a context manager to <i>undo</i> the change later -- no need to do it by hand as the accepted answer does), and there you are.</span>
<span class="comment-copy">(See also pytest <a href="https://docs.pytest.org/en/latest/monkeypatch.html" rel="nofollow noreferrer"><code>monkeypatch</code></a>).</span>
<span class="comment-copy">For somebody who isn't experienced in Python, I wouldn't have found that, thus this question was asked.</span>
<span class="comment-copy">modules are singletons, you modify <code>seep</code> in the <code>time</code> module, so the change is visible everywhere, where you use <code>time.sleep</code>. Only exception is, when you use <code>from time import sleep</code> before you have done the patch.</span>
<span class="comment-copy">Philip: the part of this answer about needing to make the changes any place you <code>import</code> the module again is untrue—subsequent attempts to do the same thing would result in <code>time.oldsleep</code> being set to previous already overridden version of the function—which, although it would "work", would be completely unnecessary (as well as likely confusing to anyone who actually understands how Python handles the loading of modules).</span>
<span class="comment-copy">I edited the answer accordingly. Time to go back to Python 101.</span>
<span class="comment-copy">Despite what @Charles Duffy said, IMO there's little reason to use pytest's monkeypatch in this case because doing it yourself would be so trivial. See question <a href="https://stackoverflow.com/questions/5626193/what-is-a-monkey-patch"><i>What is a monkey patch?</i></a>.</span>
