<div class="post-text" itemprop="text">
<p>I've found this bit of code from a user here and edited it to get my game board:</p>
<pre><code>rows = [[f'{(n+1) + (i*7):4}' for n in range(7)] for i in range(7)]
rows = reversed([reversed(rows[i]) if i%2 else rows[i] for i in range(len(rows))])

for row in rows:
    print(' | '.join(row))
</code></pre>
<p>This makes a perfect game board for me, 7 by 7:</p>
<pre><code>  43 |   44 |   45 |   46 |   47 |   48 |   49
  42 |   41 |   40 |   39 |   38 |   37 |   36
  29 |   30 |   31 |   32 |   33 |   34 |   35
  28 |   27 |   26 |   25 |   24 |   23 |   22
  15 |   16 |   17 |   18 |   19 |   20 |   21
  14 |   13 |   12 |   11 |   10 |    9 |    8
   1 |    2 |    3 |    4 |    5 |    6 |    7
</code></pre>
<p>I can understand the code a little bit, I know that it uses a list generator and how it's reversing every other row.. </p>
<p>But I would like to also be able to print the player's locations on the board. For example if Player1 was on position 6 on the board, I want to print out a new board but just replace the number 6 with "P1". I am running into the error <code>"TypeError: 'list_reverseiterator' object is not subscriptable"</code></p>
<p>How can I do this with the above code? Do I need a different solution to draw the board? </p>
</div>
<div class="post-text" itemprop="text">
<p>The numbers are generated in the first list comprehension, in the <code>f'..'</code> string:</p>
<pre><code>f'{(n+1) + (i*7):4}'
</code></pre>
<p>This calculates the number as <code>(n + 1) + (i * 7)</code>, and formats it into a column of width 4. If you wanted to show something else here, you'd need to replace <em>that</em> with <code>P1</code>. That's easier if you first generate <em>just the numbers</em> with out any string formatting:</p>
<pre><code>playerpos = 6
numbers = (((n+1) + (i*7) for n in range(7)) for i in range(7))
rows = [[f'{"P1" if pos == playerpos else pos:&gt;4}' for pos in row] for row in numbers]
rows = reversed([reversed(rows[i]) if i%2 else rows[i] for i in range(len(rows))])
</code></pre>
<p><code>numbers</code> is then a generator of generators that produces the numbers, and the first <code>rows</code> expression then produces a list of lists from that, formatting each number <em>or</em> the string <code>P1</code> if the number matches the player position.</p>
<p>I added a <code>&gt;</code> to the formatting specification; numbers are right-aligned by default, but everything else is left-aligned. The <code>&gt;</code> overrides that and right-aligns everything, putting the <code>P1</code> in the same position as the digits would be.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; playerpos = 6
&gt;&gt;&gt; numbers = (((n+1) + (i*7) for n in range(7)) for i in range(7))
&gt;&gt;&gt; rows = [[f'{"P1" if pos == playerpos else pos:&gt;4}' for pos in row] for row in numbers]
&gt;&gt;&gt; rows = reversed([reversed(rows[i]) if i%2 else rows[i] for i in range(len(rows))])
&gt;&gt;&gt; for row in rows:
...     print(' | '.join(row))
...
  43 |   44 |   45 |   46 |   47 |   48 |   49
  42 |   41 |   40 |   39 |   38 |   37 |   36
  29 |   30 |   31 |   32 |   33 |   34 |   35
  28 |   27 |   26 |   25 |   24 |   23 |   22
  15 |   16 |   17 |   18 |   19 |   20 |   21
  14 |   13 |   12 |   11 |   10 |    9 |    8
   1 |    2 |    3 |    4 |    5 |   P1 |    7
</code></pre>
</div>
<span class="comment-copy">Please then include the code that produced the exception, so we can correct it.</span>
<span class="comment-copy">Excellent explanation and exactly what I was looking for. Can you also explain what the "f" is for in the expression f'...'?</span>
<span class="comment-copy">@user766559: it's a formatted string literal; see <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498</a></span>
