<div class="post-text" itemprop="text">
<p>First of all heres the code:</p>
<pre><code>import random
import asyncio
from aiohttp import ClientSession
import csv

headers =[]
def extractsites(file):
    sites = []
    readfile = open(file, "r")
    reader = csv.reader(readfile, delimiter=",")
    raw = list(reader)
    for a in raw:
        sites.append((a[1]))
    return sites

async def bound_fetch(sem, url):
    async with sem:
        print("doing request for "+ url)
        async with ClientSession() as session:
            async with session.get(url) as response:
                responseheader = await response.headers
                print(headers)


async def run():
    urls = extractsites("cisco-umbrella.csv")
    tasks = []
    sem = asyncio.Semaphore(100)
    for i in urls:
        task = asyncio.ensure_future(bound_fetch(sem, "http://"+i))
        tasks.append(task)
    headers = await asyncio.wait(*tasks)
    print(headers)


def main():
    loop = asyncio.get_event_loop()
    future = asyncio.ensure_future(run())
    loop.run_until_complete(future)

if __name__ == '__main__':
    main()
</code></pre>
<p>As per my last question I'm following this blog post:
<a href="https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html" rel="nofollow noreferrer">https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html</a></p>
<p>I tried to adapt my code as close as possible to the example implementation but this code is still not making any requests and printing the headers in <code>bound_headers</code> as I wish.</p>
<p>Can somebody spot whats wrong with this code ?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientResponse.headers" rel="nofollow noreferrer"><code>response.headers</code></a> is a regular property, no need to put await before the call</p>
<p><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait" rel="nofollow noreferrer"><code>asyncio.wait</code></a> on other hand accepts a list of futures and returns <code>(done, pending)</code> pair.
Looks like you should replace <code>await wait()</code> call with <code>await asyncio.gather(*tasks)</code> (<a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer">gather doc</a>)</p>
</div>
<span class="comment-copy">makes sense, can you explain in what scenario i should use <code>wait()</code> instead of <code>gather()</code> ?</span>
<span class="comment-copy">When you need collecting result with relative small timeout, processing ready answers and wait again for unprocessed yet results.</span>
