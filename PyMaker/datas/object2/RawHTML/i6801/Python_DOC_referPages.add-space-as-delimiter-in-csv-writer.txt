<div class="post-text" itemprop="text">
<p>I am trying to output a combination from my_list 1 &amp; 2</p>
<pre><code>import itertools
import csv

my_list1=["+Red"]
my_list2=["+Lip +Stick","+Magic"]

# Please note: Space is kept intentionally in "+Lip +Stick" above

combinations=itertools.product(my_list1,my_list2)
with open('Txt_of_Keywords.txt','w') as f1:
    writer=csv.writer(f1,lineterminator='\n',)
    for c in combinations:
        writer.writerow(c)
</code></pre>
<p>Output without delimiter:</p>
<pre><code>+Red,+Lip +Stick
+Red,+Magic
</code></pre>
<p><strong>I want to replace comma with space in the above output.</strong></p>
<p>I tried adding space using delimiter as below:</p>
<pre><code>writer=csv.writer(f1,delimiter=' ',lineterminator='\n',)
</code></pre>
<p>Output with delimiter:</p>
<pre><code>+Red "+Lip +Stick"
+Red +Magic
</code></pre>
<p>Above output incorrectly writes quotation marks. This is because "+Lip +Stick" has space in between while defining my_list2. Sadly, i want that space there.</p>
<p>Please help me to replace comma with space (as highlighted above in bold).</p>
</div>
<div class="post-text" itemprop="text">
<p>Why are the quotes 'incorrect'? You wrote a value containing a space, the writer uses quotes to make sure that space is not seen as a delimiter. </p>
<p>If you don't want to have quoting, you may as well just write your values directly to the file. If you use the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print()</code> function</a>, you'll get newlines and spaces for free:</p>
<pre><code>with open('Txt_of_Keywords.txt','w') as f1:
    for c in combinations:
        print(*c, file=f1)
</code></pre>
<p>You can't tell the <code>csv.writer()</code> object to ignore delimiters in values; your choices are between quoting, using an escape character, or if you disabled both, an error being raised. Your other option is to split your columns on the delimiter, but that's just more work just to make the <code>csv</code> module work, where <strong>you don't really need to use that module at all</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>you're trying to lure <code>csv</code> module into <em>not</em> quoting/escaping the space. Setting <code>quoting</code> to <code>csv.QUOTENONE</code> and/or <code>csv.quotechar</code> to "empty" doesn't work, raising exceptions like:</p>
<pre><code>quotechar must be set if quoting enabled
</code></pre>
<p>or</p>
<pre><code>need to escape, but no escapechar set
</code></pre>
<p><code>csv</code> has checks to ensure that it cannot happen, for reversibility reasons.</p>
<p>So the best way would be to split each value and flatten the list of the tokens obtained with this generator comprehension fed to <code>itertools.chain.from_iterable</code>:</p>
<pre><code>writer.writerow(list(itertools.chain.from_iterable(x.split() for x in c)))
</code></pre>
<p>full example:</p>
<pre><code>my_list1=["+Red"]
my_list2=["+Lip +Stick","+Magic"]

# Please note: Space is kept intentionally in "+Lip +Stick" above

combinations=itertools.product(my_list1,my_list2)
with open('Txt_of_Keywords.txt','w') as f1:
        writer=csv.writer(f1,lineterminator='\n',delimiter=" ")
        for c in combinations:
            writer.writerow(list(itertools.chain.from_iterable(x.split() for x in c)))
</code></pre>
<p>now I'm getting:</p>
<pre><code>+Red +Lip +Stick
+Red +Magic
</code></pre>
<p>You could also write your list without the <code>csv</code> module at this point, since the main point of <code>csv</code> is to easily escape chars that could interact with the delimiter and handle multi-line (see Martjin new answer for that).</p>
</div>
<span class="comment-copy">gosh, not a lot of upvotes for this... ppl get more upvotes for copying the documentation of some python module. A pity. Well, that was useful for me at least.</span>
<span class="comment-copy">That's... rather a lot of overkill.</span>
<span class="comment-copy">Seeing your answer, yeah I'm noticing :) (I wrote the last part before you posted yours, part of the thinking process I imagine). I still see some interest in that answer: if you don't need <code>csv</code> module then don't use it :)</span>
<span class="comment-copy">This is really a 'not everything is a nail' problem, they should put the CSV hammer down instead.</span>
<span class="comment-copy">wait until you see my "write to an <code>io.StringIO</code> object using <code>csv</code>, then tweak it afterwards to write to a file :)"</span>
