<div class="post-text" itemprop="text">
<p>if i have a simple list objects:</p>
<pre><code>shapes = [
  {
    'shape': 'square',
    'width': 40,
    'height': 40
  },
  {
    'shape': 'rectangle',
    'width': 30,
    'height': 40

  }
]
</code></pre>
<p>How can i quickly check if a <code>shape</code> with value <code>square</code> exists? I know I can use a <code>for</code> loop to check each object, but is there a faster way?</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>Look ma, no loop.</p>
<pre><code>import json
import re

if re.search('"shape": "square"', json.dumps(shapes), re.M):
    ... # "square" does exist
</code></pre>
<p>If you want to retrieve the index associated with <code>square</code>, you'd need to iterate over it using <code>for...else</code>:</p>
<pre><code>for i, d in enumerate(shapes):
    if d['shape'] == 'square':
        break
else:
    i = -1

print(i) 
</code></pre>
<hr/>
<p><strong>Performance</strong></p>
<pre><code>100000 loops, best of 3: 10.5 Âµs per loop   # regex
1000000 loops, best of 3: 341 ns per loop   # loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this in one line with the builtin function <code>any</code>: </p>
<pre class="lang-py prettyprint-override"><code>if any(obj['shape'] == 'square' for obj in shapes):
    print('There is a square')
</code></pre>
<p>This is equivalent to the for-loop approach, though.</p>
<hr/>
<p>If you need to get the index instead, then there is still a one-liner that can do this without sacrificing efficiency:</p>
<pre class="lang-py prettyprint-override"><code>index = next((i for i, obj in enumerate(shapes) if obj['shape'] == 'square'), -1)
</code></pre>
<p>However, this is complicated enough that it's probably better to just stick with a normal for loop.</p>
<pre class="lang-py prettyprint-override"><code>index = -1
for i, obj in enumerate(shapes):
    if obj['shape'] == 'square':
        index = i
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this, using <code>get</code> for a more robust solution:</p>
<pre><code>if any(i.get("shape", "none") == "square" for i in shapes):
    #do something
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> you can do:</p>
<pre><code>if [item for item in shapes if item['shape'] == 'square']:
    # do something
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter()</a>:</p>
<pre><code>if list(filter(lambda item: item['shape'] == 'square', shapes)):
    # do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Checking only if it exists:</p>
<pre><code>any(shape.get('shape') == 'square' for shape in shapes)
</code></pre>
<p>Getting first index (you will get StopIteration exception if it does not exist).</p>
<pre><code>next(i for i, shape in enumerate(shapes) if shape.get('shape') == 'square')
</code></pre>
<p>All indexes:</p>
<pre><code>[i for i, shape in enumerate(shapes) if shape.get('shape') == 'square']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import operator
shape = operator.itemgetter('shape')
shapez = map(shape, shapes)
print('square' in shapez)
</code></pre>
</div>
<span class="comment-copy"><code>any(shape.get('shape') == 'square' for shape in shapes)</code></span>
<span class="comment-copy">Why do you assume that a for loop is slow?</span>
<span class="comment-copy">How is the performance here ? Can you please provide performance comparison with the for loop solution</span>
<span class="comment-copy">@SarathSadasivanPillai Oh, there's absolutely no comparison. A loop is by far faster than a regex. I think OP accepted my answer because of the second part of my answer, not the first.</span>
<span class="comment-copy">Test mine, test mine - <code>'square' in map(operator.itemgetter('shape'), shapes)</code></span>
<span class="comment-copy">@wwii <code>1000000 loops, best of 3: 471 ns per loop</code> btw you could test it yourself you know...</span>
<span class="comment-copy">Although simple, this solution throws an error with any non-JSON serializable objects. Even when the objects are serializable, it can be hacked: <a href="https://repl.it/KtXT/0" rel="nofollow noreferrer">repl.it/KtXT/0</a></span>
<span class="comment-copy">perfect! following that approach, is there a way to quickly return the index of that shape as well?</span>
<span class="comment-copy">@TrungTran Yes, I've updated my answer.</span>
