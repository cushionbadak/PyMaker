<div class="post-text" itemprop="text">
<p>There are similar questions/answers on SO, but this refers to a specific error, and I have referred to the relevant SO topics to solve this, but with no luck.</p>
<p>The code I have seeks to retrieve lines from a text file and read them into a dictionary. It works, but as you can see below, not completely.</p>
<p><strong>File</strong></p>
<pre><code>"['a', 5]"
"['b', 2]"
"['c', 3]"
"['d', 0]"
</code></pre>
<p><strong>Code</strong></p>
<pre><code>def readfiletodict():

   with open("testfile.txt","r",newline="") as f:
     mydict={} #create a dictionary called mydict
     for line in f:
        (key,val) = line.split(",")
        mydict[key]=val
     print(mydict) #test
     for keys in mydict:
       print(keys) #test to see if the keys are being retrieved correctly


readfiletodict()     
</code></pre>
<p><strong>Desired output:</strong></p>
<p>I wish the <strong>dictionary</strong> to hold <strong>keys</strong>: a,b,c,d and corresponding values as shown in the file, without the unwanted character. Simiarly, I need the <strong>values</strong> to be stored correctly in the dictionary as <strong>integers</strong> (so that they can be worked with later)</p>
<p>For quick replication see: <a href="https://repl.it/KgQe/0" rel="nofollow noreferrer">https://repl.it/KgQe/0</a> for the whole code and problem</p>
<p><strong>Current (erroneous) output:</strong></p>
<pre><code>Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux

{'"[\'a\'': ' 5]"\r\n', '"[\'b\'': ' 2]"\r\n', '"[\'c\'': ' 3]"\r\n', '"[\'d\'': ' 0]"\r\n'}
"['a'
"['b'
"['c'
"['d'
</code></pre>
<p>The Stackoverflow answer I have used in my current code is from: <a href="https://stackoverflow.com/questions/4803999/python-file-to-dictionary">Python - file to dictionary?</a> but it doesn't quite work for me...</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code slightly modified - the key is to strip out all the chars that we don't care about (<a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer">[Python]: str.rstrip([chars])</a>):</p>
<pre><code>def readfiletodict():
    with open("testfile.txt", "r") as f:
        mydict = {} #create a dictionary called mydict
        for line in f:
            key, val = line.strip("\"\n[]").split(",")
            mydict[key.strip("'")] = val.strip()
    print(mydict) #test
    for key in mydict:
        print(key) #test to see if the keys are being retrieved correctly


readfiletodict()
</code></pre>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>(py35x64_test) c:\Work\Dev\StackOverflow\q46041167&gt;python a.py
{'d': '0', 'c': '3', 'a': '5', 'b': '2'}
d
c
a
b
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The efficient way to do this would be using python lists as suggested by @Tico.</p>
<p>However, if for some reason you can't, you can try this.</p>
<p><code>lineFormat = re.sub('[^A-Za-z0-9,]+', '', line)</code>
this will transform <code>"['a', 5]"</code> to <code>a,5</code>. Now you can apply your split function.</p>
<p><code>(key,val) = lineFormat.split(",")
 mydict[key]=val</code></p>
</div>
<div class="post-text" itemprop="text">
<p>It's much easier if you transform your string_list in a real python list, so you don't need parsing. Use json loads:</p>
<pre><code>import json 

...
  list_line = json.loads(line)
...
</code></pre>
<p>Hope it helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>regex</code> and a dict-comprehension to do that:</p>
<pre><code>#!/usr/bin/env python

import re

with open('file.txt', 'r') as f: l = f.read().splitlines()
d = {''.join(re.findall('[a-zA-Z]+',i)):int(''.join(re.findall('\d',i))) for i in l}
</code></pre>
<p>Result:</p>
<pre><code>{'a': 5, 'c': 3, 'b': 2, 'd': 0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using only a very basic knowledge of Python:</p>
<pre><code>&gt;&gt;&gt; mydict = {}
&gt;&gt;&gt; with open('temp.txt') as the_input:
...     for line in the_input:
...         values = line.replace('"', '').replace("'", '').replace(',', '').replace('[', '').replace(']', '').rstrip().split(' ')
...         mydict[values[0]] = int(values[1])
...         
&gt;&gt;&gt; mydict
{'a': 5, 'b': 2, 'c': 3, 'd': 0}
</code></pre>
<p>In other words, discard all of the punctuation, leaving only the blank between the two values needed for the dictionary. Split on that blank, then put the pieces from the split into the dictionary.</p>
<p>Edit: In a similar vein, using a regex. The <code>re.sub</code> looks for the various alternative characters given by its first argument and any that are found are replaced by its second argument, an empty string. The alternatives are delimited by the '|' character in a regex pattern. Some of the alternatives, such as the '[', must be escaped with an '\' because on their own they have special meanings within a regex expression.</p>
<pre><code>&gt;&gt;&gt; mydict = {}
&gt;&gt;&gt; with open('temp.txt') as the_input:
...     for line in the_input:
...         values = re.sub(r'"|\'|\,|\[|\]|,', '', line).split(' ')
...         mydict[values[0]] = int(values[1])
... 
&gt;&gt;&gt; mydict
{'a': 5, 'b': 2, 'c': 3, 'd': 0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were almost there, missing two things:</p>
<ul>
<li>stripping the keys</li>
<li>converting the values</li>
</ul>
<p>The following code does what you need (I think):</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

output = dict()

with open('input', 'r') as inputfile:
    for line in inputfile:
        line = line.strip('"[]\n')
        key, val = line.split(',')
        output[key.strip("'")] = int(val)
</code></pre>
<p>Be careful however, since this code is very brittle. It won't process any variations on the input format you have provided correctly. To build on top of this, I'd recommend to at least use <code>except ValueError</code> for the int conversion and to think about the stripping characters again.</p>
</div>
<span class="comment-copy">Since some, or most, of the answers depend in some way on discarding characters it's worth considering the following question and the answers to it: <a href="https://stackoverflow.com/questions/3939361/remove-specific-characters-from-a-string-in-python/21357173" title="remove specific characters from a string in python">stackoverflow.com/questions/3939361/â€¦</a>.</span>
<span class="comment-copy">Works and without any additions. Your answer is the closest to what I wanted, in terms of correcting my existing code. Useful comments and other answers upvoted noted. Thanks!</span>
<span class="comment-copy">Nice, unusual application of strip.</span>
<span class="comment-copy">One small note: now the values in the dictionary are still strings. If you want to convert them to ints, simply replace the line <code>mydict[key.strip("'")] = val.strip()</code> to <code>mydict[key.strip("'")] = int(val.strip())</code>. I didn't do it myself, so that the code (without extra handling) should support entries in the input file like <code>"['d', x]"</code>.</span>
<span class="comment-copy">Thanks, I do need this to be a dictionary for various reasons. Are there other methods to do this other than the use of regular expressions, that I was trying to avoid? I suppose I could also ensure that when it was written to file the additional characters aren't there...that's a whole new question!</span>
<span class="comment-copy">@MissComputing. Your last sentence sums up exactly the right way to solve your problem: i.e. make sure you write your files in a way that is easy to read.</span>
<span class="comment-copy">Thanks ekhumoro. Also Anusha - that works - perfect! Thank you - and can I just check that the values are integers, so could be worked with if I wanted to find an average. OR would I have to further strip the ' ...?</span>
<span class="comment-copy">Well, I can think of a more crude way. If you do <code>list(line)</code>. This will return <code>[ '[' , 'a' , ',', ' ', ,'5' ,']' ]</code>. If you are very sure this will be the format you will be using throughout your application, then try this. Otherwise, regex is a better bet.</span>
<span class="comment-copy">use <code>int('5')</code> to make sure you are saving values as an int</span>
<span class="comment-copy">Thanks, I need to do this without the use of json.</span>
<span class="comment-copy">@ekhumoro That's rude dude...   Anyway. I've tested it  json.loads('["a",2]') returns ['a',2]. Oh..  the quotes..  ok you need to replace that first.</span>
<span class="comment-copy">@Tico. Try it with <code>"['a', 5]"</code>, which is shown in the OP's question.</span>
<span class="comment-copy">Hey @MissComputing we regex suggested by anusha! Good answer there!</span>
<span class="comment-copy">@ekhumoro I switched the quotes. Ok..  You need one more step switching the quotes from strings. Anyway even I hadnt tested, that was really rude dude...   you shouln't do that...</span>
<span class="comment-copy">Thank you for this - it seems a bit cumbersome, but may well work. Just waiting on any other answers. I'd obviously like the simplest method</span>
<span class="comment-copy">I couldn't agree more. I have offered an alternative.</span>
<span class="comment-copy">Thank you Bill Bell - are you able to comment what precisely the regular expression handling is doing on line 4</span>
<span class="comment-copy">@MissComputing: Please see edit.</span>
