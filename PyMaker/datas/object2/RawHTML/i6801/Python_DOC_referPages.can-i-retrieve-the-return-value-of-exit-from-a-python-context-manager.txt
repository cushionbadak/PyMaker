<div class="post-text" itemprop="text">
<p>I use context manager in python. In want to get some logs back from my <code>__exit__</code> method. So my code logs something like this:</p>
<pre><code>class MyContextManager:
    def __init__(self, value1, value2)
        self.value1 = value1
        self.value2 = value2

    def __enter__(self)
        # Do some other stuff
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Do some tear down action, process some data that is 
        # created in __enter__ and log those results
        return my_results

with MyContextManager(value1=my_value1, value2=my_value2) as manager:
     # Do some stuff
</code></pre>
<p>So how could I access my_results which is returned from <code>__exit__</code> after (or at the end) of my with block. Is this even legit to return something other the True in the <code>__exit__</code> method?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is this even legit to return something other the True in the <code>__exit__</code> method?</p>
</blockquote>
<p>No, not really, but Python will just test for the <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">truth value</a>, so you can get away with it. In other words, if you return a truthy object here, any exceptions will be suppressed. If there was no exception, returning a truthy value is just a no-op. </p>
<blockquote>
<p>how could I access my_results which is returned from <code>__exit__</code> after (or at the end) of my with block.</p>
</blockquote>
<p>You can't. The <code>with</code> expression machinery consumed it. </p>
<p>You should make it available in some other way; set it as an attribute on the context manager object itself:</p>
<pre><code>class MyContextManager:
    def __init__(self, value1, value2)
        self.value1 = value1
        self.value2 = value2

    def __enter__(self)
        # Do some other stuff
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Do some tear down action, process some data that is 
        # created in __enter__ and log those results
        self.my_results = my_results
        # returning None, we don't want to suppress exceptions
        return None

with MyContextManager(value1=my_value1, value2=my_value2) as manager:
     # Do some stuff

results = manager.my_results
</code></pre>
<p>The <code>manager</code> name is available after the <code>with</code> block has completed.</p>
<p>This is how the <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises" rel="nofollow noreferrer"><code>unittest.TestCase.assertRaises()</code> context manager</a> shares the captured exception, for example.</p>
</div>
<span class="comment-copy">Thank you very much! Helpful information! :) I didn't know that the instance of MyContextManager is still alive after the with block.</span>
