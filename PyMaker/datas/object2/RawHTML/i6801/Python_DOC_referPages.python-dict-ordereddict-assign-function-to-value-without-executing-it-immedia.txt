<div class="post-text" itemprop="text">
<p>I have an OrderedDict whose values I would like to be functions, but have encountered unexpected behaviour. Initializing:</p>
<pre><code>from collections import OrderedDict

options_dict=OrderedDict(["A",call_func_A(arg1,arg2)],
                         ["B",call_func_B(arg1,arg3)],
                         ["C",call_func_C(arg1,arg4)]

# Select options
options=["A","C"]

# Execute
result={}
for opt in options:
    result[opt]=options_dict[opt]

# Return result (or whatever)
print result
</code></pre>
<p>Functions call_func_A, call_func_B and call_func_C turn out to be executed when options_dict is declared, rather than in the subsequent for loop over options.</p>
<p>I'd like the function calls to wait until the for loop.</p>
<p>What's going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>The functions are called before the dictionary is created. You made the call.</p>
<p>However, you can defer the function calls by nesting it within another function to be called later:</p>
<pre><code>options_dict = OrderedDict([("A", lambda: call_func_A(arg1,arg2)),
                            ("B", lambda: call_func_B(arg1,arg3)),
                            ("C", lambda: call_func_C(arg1,arg4))])

# Select options
options = ["A", "C"]

# Execute
result = {}
for opt in options:
    result[opt] = options_dict[opt]() # &lt;- call
</code></pre>
<p>The same effect can be achieved with <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>, with an extra <code>import</code> statement to execute.</p>
<p>On another note, since your function arguments are presumably <strong>invariant</strong>, I don't think when the calls are made is important here. You might as well keep your initial approach of having the functions called at the dict creation time.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, you are declaring the OrderedDict incorrectly. The constructor expects a list of tuples. Instead, you are giving it multiple lists. Do it like so:</p>
<pre><code>options_dict=OrderedDict([("A",call_func_A(arg1, arg2)),
                          ("B",call_func_B(arg1, arg3)),
                          ("C",call_func_C(arg1, arg4))])
</code></pre>
<p>Second, when you declare <code>options_dict</code>, you don't pass the functions as the values of the dict, but rather their results:</p>
<pre><code>options_dict=OrderedDict(["A",call_func_A(arg1,arg2)],
                         ["B",call_func_B(arg1,arg3)],
                         ["C",call_func_C(arg1,arg4)])
</code></pre>
<p>You are <em>calling them</em> by doing <code>call_func_A(arg1, arg2)</code>. One relatively simple way of avoiding that is by omitting the args:</p>
<pre><code>options_dict=OrderedDict([("A",call_func_A),
                         ("B",call_func_B),
                         ("C",call_func_C)])
</code></pre>
<p>You can store the args in a second OrderedDict:</p>
<pre><code>args_dict=OrderedDict([("A",[arg1, arg2]),
                      ("B",[arg3, arg4]),
                      ("C",[arg5, arg6])])
</code></pre>
<p>And then to call them:</p>
<pre><code>result={}
for opt in options:
    result[opt]=options_dict[opt](*args_dict[opt])
</code></pre>
</div>
<span class="comment-copy"><code>call_func_A</code> is the function, <code>call_func_A(arg1,arg2)</code> is calling the function</span>
<span class="comment-copy">The reason for deferring is that being relatively expensive I only want to call a subset (in order). Perhaps there is an easier way.</span>
<span class="comment-copy">At the moment I get TypeError: expected at most 1 arguments, got 3</span>
<span class="comment-copy">@jtlz2 The code Moses Koledoye has provided is correct. The problem is in how you create the OrderedDict. Check out the first part of my answer for the correct way.</span>
<span class="comment-copy">@jtlz2 That's coming from how you defined your <code>OrderedDict</code>. I have that fixed in my answer.</span>
<span class="comment-copy">Yep - thanks - that's now fixed</span>
