<div class="post-text" itemprop="text">
<p>I wonder how can I define a static class variable from C++ for Python? The equivalent Python code would be like:</p>
<pre><code>class foo:
    bar = int
</code></pre>
<p>I tried to use tp_getset field when defining the type, but it turns out it doesn't work and returns a <code>getset_descriptor</code> in Python, and it doesn't work when called on instances (AttributeError). Furthermore, Python doc says directly manipulating <code>tp_dict</code> with C API is unsafe. But it doesn't tell what to use instead. (see<a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict" rel="nofollow noreferrer"> here</a>)</p>
<p><em>I deliberately chose <code>int</code> in the example since I'm referencing some other class in it, if that matters.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>tp_getset</code> defines <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer"><em>descriptors</em></a> for a type; descriptors are bound to instances when accessed via the <code>__getattribute__</code> hook, so are not suitable to define class attributes.</p>
<p>You can add attributes to a class by setting them on the <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict" rel="nofollow noreferrer"><code>PyTypeObject.tp_dict</code> object</a> for the type; do so in the module's initialization function (<code>PyInit_&lt;modulename&gt;</code>), for example, after finalising the type with <a href="https://docs.python.org/3/c-api/type.html#c.PyType_Ready" rel="nofollow noreferrer"><code>PyType_Ready()</code></a> (which makes sure the <code>tp_dict</code> object exists):</p>
<pre class="lang-c prettyprint-override"><code>PyObject *d;
PyObject *bar;

d = PyFoo_Type.tp_dict;

bar = PyLong_FromLong(42);
if (bar == NULL || PyDict_SetItemString(d, "bar", bar) &lt; 0)
    return NULL;
Py_DECREF(bar);
</code></pre>
<p>This is untested C code; I'm not familiar enough with C++ to confidently provide you with a C++ version instead.</p>
<p>If you want to see a real-life example, see the <a href="https://github.com/python/cpython/blob/v3.6.2/Modules/_datetimemodule.c#L5650-L5775" rel="nofollow noreferrer"><code>datetime</code> module</a>, where the <code>datetime.min</code>, <code>datetime.max</code>, etc. class attributes are set.</p>
</div>
<span class="comment-copy">Maybe here you can find the answer <a href="https://stackoverflow.com/questions/68645/static-class-variables-in-python" title="static class variables in python">stackoverflow.com/questions/68645/â€¦</a></span>
<span class="comment-copy">@magicleon, Yes, that's what I want. But I meant from C++, in a library/module using C-API.</span>
<span class="comment-copy">See <a href="https://bugs.python.org/issue12719" rel="nofollow noreferrer">issue #12719</a> on why accessing <code>tp_dict</code> is unsafe.</span>
<span class="comment-copy">@myaut: setting class attributes <i>during module initialisation</i> is common practice however.</span>
<span class="comment-copy">Can I say that it's safe to modify <code>tp_dict</code> directly before I call <code>PyModule_AddObject</code>?</span>
<span class="comment-copy">@YiFei: I believe so; there is an interaction with <code>PyObject_SetAttrString()</code> that's not supported, but modifying <code>tp_dict</code> in module initialisers is used in multiple places in the Python codebase.</span>
<span class="comment-copy">@YiFei: for example, the <code>sys</code> module <i>deletes</i> entries from <code>tp_dict</code> objects for specific types (removing <code>__new__</code> methods to prevent new instances).</span>
