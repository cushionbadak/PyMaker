<div class="post-text" itemprop="text">
<p>What I'm trying to do is have a 2D array and for every coordinate in the array, ask all the other 8 coordinates around it if they have stored a 1 or a 0. Similar to a minesweeper looking for mines.</p>
<p>I used to have this:</p>
<pre><code>grid = []

for fila in range(10):
    grid.append([])
    for columna in range(10):
        grid[fila].append(0)

#edited
for fila in range (10):
    for columna in range (10):
        neighbour = 0
        for i in range 10:
            for j in range 10:

                if gird[fila + i][columna + j] == 1
                    neighbour += 1
</code></pre>
<p>But something didn't work well. I also had print statments to try to find the error that way but i still didnt understand why it only made half of the for loop. So I changed the second for loop to this:</p>
<pre><code>#edited
for fila in range (10):
    for columna in range (10):
        neighbour = 0

        if grid[fila - 1][columna - 1] == 1:
            neighbour += 1
        if grid[fila - 1][columna] == 1:
            neighbour += 1
        if grid[fila - 1][columna + 1] == 1:
            neighbour += 1
        if grid[fila][columna - 1] == 1:
            neighbour += 1
        if grid[fila][columna + 1] == 1:
            neighbour += 1
        if grid[fila + 1][columna - 1] == 1:
            neighbour += 1
        if grid[fila + 1][columna] == 1:
            neighbour += 1
        if grid[fila + 1][columna + 1] == 1:
            neighbour += 1
</code></pre>
<p>And got this error: </p>
<pre><code>    if grid[fila - 1][columna + 1] == 1:
IndexError: list index out of range
</code></pre>
<p>It seems like I can't add on the grid coordinates but I can subtract. Why is that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Valid indices in python are <code>-len(grid)</code> to <code>len(grid)-1</code>. the positive indices are accessing elements with offset from the front, the negative ones from the rear. adding gives a range error if the index is greater than <code>len(grid)-1</code> that is what you see. subtracting does not give you a range error unless you get an index value less than <code>-len(grid)</code>. although you do not check for the lower bound, which is 0 (zero) it seems to work for you as small negative indices return you values from the rear end. this is a silent error leading to wrong neighborhood results.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are computing offsets, you need to make sure your offsets are within the bounds of the lists you have. So if you have 10 elements, don't try to access the 11th element. </p>
<pre><code>import collections

grid_offset = collections.namedtuple('grid_offset', 'dr dc')

Grid = [[0 for c in range(10)] for r in range(10)]
Grid_height = len(Grid)
Grid_width = len(Grid[0])

Neighbors = [
        grid_offset(dr, dc)
            for dr in range(-1, 2)
            for dc in range(-1, 2)
            if not dr == dc == 0
    ]

def count_neighbors(row, col):
    count = 0
    for nb in Neighbors:
        r = row + nb.dr
        c = col + nb.dc
        if 0 &lt;= r &lt; Grid_height and 0 &lt;= c &lt; Grid_width:
            # Add the value, or just add one?
            count += Grid[r][c]

    return count


Grid[4][6] = 1
Grid[5][4] = 1
Grid[5][5] = 1

for row in range(10):
    for col in range(10):
        print(count_neighbors(row, col), "", end='')

    print()
</code></pre>
<p>Prints:</p>
<pre><code>$ python test.py
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 1 1 1 0 0
0 0 0 1 2 3 1 1 0 0
0 0 0 1 1 2 2 1 0 0
0 0 0 1 2 2 1 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error is exactly what it says, you need to check if the coordinates fit within the grid:</p>
<pre><code>0 &lt;= i &lt; 10 and 0 &lt;= j &lt; 10
</code></pre>
<p>Otherwise you're trying to access an element that doesn't exist in memory, or an element that's not the one you're actually thinking about - Python handles negative indexes, they're counted from the end.</p>
<p>E.g. <code>a[-1]</code> is the last element, exactly the same as <code>a[len(a) - 1]</code>.</p>
</div>
<span class="comment-copy">Do you check for borders? e.g. first row has no upper neighbors. You usually have additional <code>i&gt;0</code> and <code>i&lt;n-1</code> checks on the outside of those neighbor-checks (same for j).</span>
<span class="comment-copy">First off, if you want to create regular arrays like that, you should definitely switch to <code>numpy</code>. There your first double loop would be a single line: <code>grid=numpy.zeros((10,10))</code>. That said, I do not really follow the logic of your code. First you use <code>filea</code> and <code>columna</code> as loop indices and later as offsets for your array indexing -- I don't think that this is what you really want. The reason why you can subtract 1 from <code>filea</code> and <code>columna</code> is that after the initial loop they are both equal to <code>9</code>, with <code>9+1=10</code> being out of bounds.</span>
<span class="comment-copy">omg sry I forgot to write something in the question ill edit and will make more sense</span>
<span class="comment-copy">That would make sense if I had the error only on the borders of the array but what I had with the first for loop is that even in the middle, coordinates would only look the left, up and left up corner neighbor coordinates. Does it drag the error everywhere else?</span>
<span class="comment-copy">please post the complete code that shows the error.</span>
<span class="comment-copy">Sry but I'm fairly beginner and I don't know how to use <code>collections</code>. Could you explain how you use it there and what <code>grid_offset</code> does?</span>
<span class="comment-copy"><code>grid_offset</code> is a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a>. A named tuple is simple a tuple type that has named fields, instead of t[0], t[1]. This makes it easier to read the code. <code>Neighbors</code> is a collection of <code>grid_offset</code> tuples, like (-1, 0) or (0, 1) that define the eight possible neighbors of a cell.</span>
<span class="comment-copy">Thank you, and I didn't want to add anything to the grid itself just change the value to 1 or 0 based on it</span>
