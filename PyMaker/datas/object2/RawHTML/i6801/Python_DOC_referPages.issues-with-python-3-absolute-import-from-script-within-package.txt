<div class="post-text" itemprop="text">
<p>I feel that this is a rather basic issue, so I'm only more upset that I wasn't able to fix it for quite some time. Say I have the following folder structure:</p>
<pre><code>foo
|- first_module.py
|- __init__.py
|- bar
   |- second_module.py
   |- __init__.py
</code></pre>
<p>foo and bar being directories. In first_module.py I have an absolute import statement referring to second_module.py:</p>
<pre><code>import foo.bar.second_module
</code></pre>
<p>Now, if run first_module.py as a script (foo being the working directory), I get this error</p>
<pre><code>ModuleNotFoundError: No module named 'foo':
</code></pre>
<p>Please, can anyone explain to me why this is the case? I've checked that foo is in sys.path. I've read the <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">docs</a> and a bunch of other stackoverflow posts. I think it might have to do with the interpreter not knowing that first_module.py is part of the package foo. But how can I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that trying <code>import foo.bar.second_module</code> would require that your directory structure have a <code>foo</code> directory as a child of your current working directory, i.e.:</p>
<pre><code>foo
|- first_module.py
|- __init__.py
|- foo
   |- bar
      |- second_module.py  &lt;-- at foo.bar.second_module
      |- __init__.py
</code></pre>
<p>To keep your original directory structure and import successfully, simply change your <code>first_module</code> to use <code>import bar.second_module</code> instead.</p>
<blockquote>
<p>why this is the case?</p>
</blockquote>
<p>When <code>import</code>ing, you should think of the dots <code>.</code> as analogous to path separators. Thus, using the following sample layout:</p>
<pre><code>foo
|- first.py
|- bar
   |- second.py
   |- third.py
</code></pre>
<p>If you want to <code>import</code> module <code>second.py</code> from <code>first.py</code>, you must write <code>import bar.second</code>. If you want to import <code>third</code> from <code>second</code>, you can write <code>import third</code> because they're both in the same directory.</p>
<p>Note that you'd still need to write <code>import bar.third</code> if trying to import from <code>first</code>.</p>
</div>
<span class="comment-copy">Or you can add the parent directory of foo to sys.path</span>
<span class="comment-copy">Thanks @ray that solves the issue. I have a quick follow up: What I'm actually trying to do is write a small command line tool for natural language processing. In this use case, first_module is intended to be the script  which accesses all the back-end function.  Does this mean that, by design, I have to put the script outside the package?</span>
<span class="comment-copy">@buechel Not really. You can always add a sub-directory with the same name as the top-level directory, but I'd (personally) avoid having something like <code>foo/foo</code> layout. Instead, just be mindful of the <code>import</code> lines in the top-level module.</span>
