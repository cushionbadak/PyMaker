<div class="post-text" itemprop="text">
<p>The function my_func gets one argument, that could be integer or a class:</p>
<pre><code>class SomeClass:
    val = 0
    def __init__(self):
        self.val = 0
    def set(self, val):
        self.val = val
    def get(self):
        return self.val 
</code></pre>
<p>and I want to work with both types as one. 
Can I somehow explicitly tell Python, that evaluation of an object of type  <em>SomeClass</em>, should return the <em>val</em> field of the object, but not the object it selves.</p>
<p>That means to get the following code work (somehow):</p>
<pre><code>s = SomeClass()
s.set(3)
test = s # this line should assign value 3(int) to test
test # prints 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not really, no, not in the broad sense that you seem to ask for.  You can overload many operations, not assignment. That's because variables are <em>just references to objects</em> and have no type attached. At any given time there can be many references to your object. It matters <em>how you use the object</em>, not what you assigned it to.</p>
<p>Instead, I'd make your class convertible to an integer. You can do so with the <a href="https://docs.python.org/3/reference/datamodel.html#object.__int__" rel="nofollow noreferrer"><code>object.__int__</code> hook</a>; your setter would explicitly call <code>int()</code> on the object passed in:</p>
<pre><code>class SomeClass:
    val = 0
    def __init__(self):
        self.val = 0
    def set(self, val):
        self.val = int(val)
    def get(self):
        return self.val 
    def __int__(self):
        return self.val
</code></pre>
<p>If you always use these objects in integer arithmetic, you could add hooks for those operations, such as <a href="https://docs.python.org/3/reference/datamodel.html#object.__add__" rel="nofollow noreferrer"><code>object.__add__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__sub__" rel="nofollow noreferrer"><code>object.__sub__</code></a>; again, it is the context in which the object is used that matters.</p>
</div>
<span class="comment-copy">Thanks Martijn, it seems overriding <b>int</b> method is what I need.  If my arg1 could be or integer or SomeClass object with implemented <b>int</b> method, so if I do:  my_arg = int(arg1)  I'll get the integer value anyway and then I can operate with my_arg only.</span>
