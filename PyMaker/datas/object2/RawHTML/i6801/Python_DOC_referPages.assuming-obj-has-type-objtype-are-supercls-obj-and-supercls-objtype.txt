<div class="post-text" itemprop="text">
<p>In Python, assuming that <code>obj</code> has type <code>objtype</code>, are <code>super(cls,obj)</code> and <code>super(cls,objtype)</code> the same? </p>
<p>Is it correct that <code>super(cls,obj)</code> converts <code>obj</code> to another object whose class is a superclass of <code>objtype</code> which is after <code>cls</code> in the MRO of <code>objtype</code>?</p>
<p>What does <code>super(cls,objtype)</code> mean then?</p>
<hr/>
<p>For example, given an implementation of the Singleton design pattern:</p>
<pre><code>class Singleton(object):
    _singletons = {}
    def __new__(cls, *args, **kwds):
        if cls not in cls._singletons:
            cls._singletons[cls] = super(Singleton, cls).__new__(cls)
        return cls._singletons[cls]
</code></pre>
<p>any subclass of  <code>Singleton</code>  (that does not further override  <code>__new__</code> ) has exactly one instance.</p>
<p>What does <code>super(Singleton, cls)</code> mean, where <code>cls</code> is a class? What does it return?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">docs</a>, <code>super</code> </p>
<blockquote>
<p>Return a proxy object that delegates method calls to a parent or sibling class of type.</p>
</blockquote>
<p>So <code>super</code> returns an object which knows how to call the methods of other classes in the class hierarchy.</p>
<p>The second argument to <code>super</code> is the object to which <code>super</code> is bound; generally this is an instance of the class, but if <code>super</code> is being called in the context of a method that is a  classmethod or staticmethod then we want to call the method on the class object itself rather than an instance.</p>
<p>So calling <code>super(SomeClass, cls).some_method()</code> means call <code>some_method</code> on the <em>classes</em> that <code>SomeClass</code> descends from, rather than on <em>instances</em> of these classes.  Otherwise <code>super</code> calls behave just like a <code>super</code> call in an instance method. </p>
<p>The usage looks more natural in less complicated code:</p>
<pre><code>class C(SomeBaseClass):

    def method(self):
        # bind super to 'self'
        super(C, self).method()

    @classmethod
    def cmethod(cls):
        # no 'self' here -- bind to cls
        super(C, cls).cmethod()
</code></pre>
<p>Note that <code>super(C, cls)</code> is required in python2, but an empty <code>super()</code> is enough in python3.</p>
<p>In your singleton example, <code>super(Singleton, cls).__new__(cls)</code> returns the result of calling <code>object.__new__(cls)</code>, an instance of <code>Singleton</code>.  It's being created this way to avoid recursively calling <code>Singleton.__new__</code>.</p>
</div>
