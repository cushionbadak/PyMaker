<div class="post-text" itemprop="text">
<p>It seems to me <code>python -m myscript</code> and <code>python   myscript</code> do the same thing: running a script.</p>
<p>What is the purpose of using <code>-m</code>? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>In some cases, especially for very small projects, <code>python script.py</code> and <code>python -m script</code> will be pretty much the same.</p>
<p>The biggest difference is when your module lives in a package and has relative imports. If you have a script that import something like <code>from .module import some_name</code>, you will most likely get a <code>ModuleNotFoundError</code> when you run it with <code>python package/scripy.py</code>. On the other hand, <code>python -m package.script</code> will produce whatever output you expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can load modules and invoke them as script. The exact file name or path is not needed. Example:</p>
<pre><code>python -mjson.tool myfile.json
</code></pre>
<p>This will print a formatted version of <code>myfile.json</code>, and it loads the module <code>json.tool</code> for this. Python searches for this module automatically. You don't need to know the exact path.</p>
</div>
<span class="comment-copy">One is invoked as a module.</span>
<span class="comment-copy">Have you tried <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m" rel="nofollow noreferrer">reading the docs</a>?</span>
<span class="comment-copy"><code>python -m myscript</code> is <i>sometimes</i> similar to <code>python myscript.py</code>. Notice the <code>.py</code>. Also, <code>-m</code> allows you to run a module in a sub-package, which is not always viable when running as a script.</span>
