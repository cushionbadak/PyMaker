<div class="post-text" itemprop="text">
<p>I'm having an issue with running a python script in a python script that i simply do not understand:</p>
<p>Assume we have 2 files in the same directory: 'init.py' and 'text.py'</p>
<p>init.py:</p>
<pre><code>X = 5
print("init.py was run")
</code></pre>
<p>test.py:</p>
<pre><code>exec(open("./init.py").read())
print("X = %s" %X)
</code></pre>
<p>If I run test.py now, I get</p>
<blockquote>
<p>init.py was run</p>
<p>X = 5</p>
</blockquote>
<p>However, if I change test.py into:</p>
<pre><code>def func_call( filename):
  exec(open(filename).read())
  print("X = %s" %X)

func_call("./init.py")
</code></pre>
<p>I get:</p>
<blockquote>
<p>init.py was run </p>
<p>Traceback (most recent call last):  </p>
<p>File "test.py", line 5, in </p>
<pre><code>func_call("./init.py")   
</code></pre>
<p>File "test.py", line 3, in func_call</p>
<pre><code>print("X = %s" %X) 
</code></pre>
<p>NameError: name 'X' is not defined</p>
</blockquote>
<p>Can someone explain to me why this leads to different results?
Is there a workaround for this?
My goal is to initializes most of my variables by running a python script and accessing the variables set up in that python script.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">exec_documentation</a>:</p>
<blockquote>
<p>If exec gets two separate objects as globals and locals, the code will be executed as if it were embedded in a class definition.</p>
</blockquote>
<p>Inside method globals() and locals() are different objects:</p>
<pre><code>def method():
    print(globals() == locals())
    exec('X=10')
    print('Method execution =', X)

method()
</code></pre>
<p>output:</p>
<pre><code>False
NameError: name 'X' is not defined
</code></pre>
<p>In global level this objects are equal:</p>
<pre><code>print(globals() == locals())
exec('X=99')
print('Global exec =', X)
</code></pre>
<p>Output:</p>
<pre><code>True
Global exec = 99
</code></pre>
<p>So If you want to do it via method, you need to pass the same object to exec. For your code it would look like this:</p>
<pre><code>def func_call(filename):
  exec(open(filename).read(), globals(), globals())
  print("X = %s" %X)

func_call("./init.py")
</code></pre>
<p>Nevertheless, as I mentioned in comment, create file with consts and import it. Try to avoid using exec/eval at all costs, unless you are 100% sure what you are doing.</p>
</div>
<span class="comment-copy">Why don't you create file <code>const.py</code> and import it?</span>
<span class="comment-copy">That actually works and solves the issue, thank you!  However I still don't understand why this is happening....</span>
<span class="comment-copy">see also <a href="https://stackoverflow.com/a/20475760/3066295">NameError using execfile in python</a> and <a href="https://stackoverflow.com/questions/436198/what-is-an-alternative-to-execfile-in-python-3">What is an alternative to execfile in Python 3?</a></span>
