<div class="post-text" itemprop="text">
<p>I'm trying to implement a binary search and somehow my function doesn't return the value wanted</p>
<pre><code>import math
def binarySearch(a, l, r, v): 
    if l &gt;= r:
        return -1
    mid = math.floor((l + r)/ 2)

    if a[mid] == v:
        return mid
    elif(v &lt; mid):
        binarySearch(a,mid+1,r,v)
    else:
        binarySearch(a,l,mid-1,v)

a = [1,2,5,8,23,67,345]

print(binarySearch(a,0,6,5));
</code></pre>
<p>It keeps returning <code>-1</code> Can someone shed a light where I went wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have return in elif statement so your function can return only -1</p>
<pre><code>import math
def binarySearch(a, l, r, v): 
    if l &gt; r:
        return -1
    mid = math.floor((l + r)/ 2)

    if a[mid] == v:
        return mid
    elif(v &lt; a[mid]):
        return binarySearch(a,l,mid-1,v)
    else:
        return binarySearch(a,mid+1,r,v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>int binarySearch(int arr[], int l, int r, int x)
{
    if (r&gt;=l)
    {
        int mid = l + (r - l)/2;

        if (arr[mid] == x)
           return mid;

        if (arr[mid] &gt; x)
           return binarySearch(arr, l, mid-1, x);

        return binarySearch(arr, mid+1, r, x);
    }

    return -1;
}
</code></pre>
</div>
<span class="comment-copy">Don't you need to <code>return</code> the result from your recursive calls?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/bisect.html#bisect.bisect_left" rel="nofollow noreferrer">bisect.bisect_left</a> exists in the standard library for performing a binary search.</span>
<span class="comment-copy">That's not true. If <code>a[mid] == v</code> is false, the execution hits the end of the function after returning from the recursive calls and will return <code>None</code>.</span>
<span class="comment-copy">Nope, I still get -1</span>
<span class="comment-copy">I've edited the code, there was another mistake: if v &lt; mid then you should be searching for result in left part in your case you do the opposite: you search in right side.</span>
<span class="comment-copy">He had mistake in comparison too.</span>
<span class="comment-copy">There's still one error left: When the upper bound is inclusive, the empty range corresounds to the condition <code>l &gt; r</code>. A single-element range has ´l == r<code>, so the codition ´l &gt;= r</code> will miss out on every second element.</span>
