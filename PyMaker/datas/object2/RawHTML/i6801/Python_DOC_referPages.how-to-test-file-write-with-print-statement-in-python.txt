<div class="post-text" itemprop="text">
<p>I would like to test the following statement</p>
<pre><code>with open('test.txt', 'w') as f:
    print(['abc', 20], end='', file=f)
</code></pre>
<p>I tried </p>
<pre><code>  from __future__ import print_function                                              
  from mock import patch, mock_open                                                  


  def f():                                                                           
      with open('test.txt', 'w') as f:                                               

          # f.write(str(['abc', 20]))                                                 
          print(['abc', 20], end='', file=f)                                         


  @patch('__builtin__.open', new_callable=mock_open)                                 
  def test(mock_f):                                                                  
      f()                                                                            
      mock_f.assert_called_with('test.txt', 'w')                                     
      handle = mock_f()                                                              
      handle.write.assert_called_once_with(str(['abc', 20])) 
</code></pre>
<p>It complains that <code>write</code> is never called, which makes sense. In this case, what is the proper way to check the content for writing?</p>
<p>I also tried to use <code>f.write(str(['abc', 20]))</code> instead of the print statement, which passes the test. Is it just a bad idea to use <code>print</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6:</p>
<p>If you inspect the mock object you can see that the thing you are looking for is there.</p>
<pre><code>from unittest.mock import mock_open, patch

def f():                                                                           
    with open('test.txt', 'w') as f:                                               

        print(['abc', 20], end='', file=f)                                         

@patch('__main__.__builtins__.open', new_callable=mock_open)                                 
def test(mock_f):
    f()
    mock_f.assert_called_with('test.txt', 'w')
    print('calls to open:\n', mock_f.mock_calls, end ='\n\n')
    handle = mock_f()
    print('calls to the file:\n', handle.mock_calls, end ='\n\n')
    print('calls to write:\n', handle.write.mock_calls, end ='\n\n')
    handle.write.assert_called_once_with(str(['abc', 20]))

&gt;&gt;&gt; test()
calls to open:
 [call('test.txt', 'w'),
 call().__enter__(),
 call().write("['abc', 20]"),
 call().write(''),
 call().__exit__(None, None, None)]

calls to the file:
 [call.__enter__(),
 call.write("['abc', 20]"),
 call.write(''),
 call.__exit__(None, None, None)]

calls to write:
 [call("['abc', 20]"), call('')]

Traceback (most recent call last):
  File "&lt;pyshell#98&gt;", line 1, in &lt;module&gt;
    test()
  File "C:\Python36\lib\unittest\mock.py", line 1179, in patched
    return func(*args, **keywargs)
  File "C:/pyProjects33/test_tmp.py", line 30, in test
    handle.write.assert_called_once_with(str(['abc', 20]))
  File "C:\Python36\lib\unittest\mock.py", line 824, in assert_called_once_with
    raise AssertionError(msg)
AssertionError: Expected 'write' to be called once. Called 2 times.
&gt;&gt;&gt; 
</code></pre>
<p><code>.write()</code> is being called a second time with <code>''</code> because of the <code>end</code> argument you passed - you can verify this by playing around with that parameter.</p>
<p>How to test?  You could use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_any_call" rel="nofollow noreferrer"><code>assert_any_call()</code></a> :</p>
<pre><code>    handle.write.assert_any_call(str(['abc', 20]))
</code></pre>
<p>or, if you want to validate the <code>end</code> argument, <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls" rel="nofollow noreferrer"><code>assert_has_calls()</code></a>:</p>
<pre><code>from unittest.mock import call

....
        calls = [call(str(['abc', 20])), call('')]
        handle.write.assert_has_calls(calls)
</code></pre>
<hr/>
<p>You asked <code>Is it just a bad idea to use print?</code> | Maybe someone else can chime in but in my limited experience I have never consider using <code>print()</code> to write to a file.</p>
</div>
<span class="comment-copy">You could check that <code>f.tell()</code> is not zero; though it is a bit of a work-around</span>
<span class="comment-copy">@James Can you give more details?</span>
<span class="comment-copy">Seems like your mock <code>open</code> would need to emulate a context manager and return an instance of a mock file - then it would be the mock file that has the <code>.write</code> assertion(s).</span>
<span class="comment-copy">There is an example in t<a href="https://docs.python.org/3/library/unittest.mock.html#mock-open" rel="nofollow noreferrer">the docs</a> that looks like what you are trying to do.</span>
<span class="comment-copy">@wwii, I don't think that the example from docs, is what he wants. He is mocking the <code>open</code> method, and his assert is matching with <code>print</code> function. That is the error.</span>
<span class="comment-copy">Dammit! I was writing the answer, but took a break to lunch! It was pretty much similar to your answer. Good job!!</span>
