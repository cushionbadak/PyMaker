<div class="post-text" itemprop="text">
<p>Apologies for asking a question that have been asked a hundred times before, I'm new to Python and none of the solutions I've found seems to solve my problem.</p>
<p>I have a nested list from a csv file called diabetes, I read in the file and comma separate the elements like this</p>
<pre><code>for line in open("diabetes.csv"):
    lst=line.strip().split(",")
    print(lst)
</code></pre>
<p>which prints out the following</p>
<pre><code>['10', '101', '86', '37', '0', '45.6', '1.136', '38', '1']
['2', '108', '62', '32', '56', '25.2', '0.128', '21', '0']
['3', '122', '78', '0', '0', '23', '0.254', '40', '0']
</code></pre>
<p>Now my problem is </p>
<ol>
<li>I need to make a separate list containing only the third element of each list (lst[2])</li>
<li>I need to convert it into floats instead of strings. </li>
</ol>
<p>I'm using Python 3.6 and I'm pulling my hair out here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Suppose you have a list of lists of strings:</p>
<pre><code>LoL=[
   ['10', '101', '86', '37', '0', '45.6', '1.136', '38', '1'],
   ['2', '108', '62', '32', '56', '25.2', '0.128', '21', '0'],
   ['3', '122', '78', '0', '0', '23', '0.254', '40', '0'],
]
</code></pre>
<p>You can get the <code>nth</code> element of each sublist like so:</p>
<pre><code>&gt;&gt;&gt; [float(sl[2]) for sl in LoL]
[86.0, 62.0, 78.0]
</code></pre>
<p>If you have a csv file, use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv module</a> to do exactly the same thing:</p>
<p>(at the command prompt):</p>
<pre><code>$ cat file.csv
10,101,86,37,0,45.6,1.136,38,1
2,108,62,32,56,25.2,0.128,21,0
3,122,78,0,0,23,0.254,40,0
</code></pre>
<p>Python:</p>
<pre><code>import csv
with open('file.csv') as f:
  items=[float(row[2]) for row in csv.reader(f)]

&gt;&gt;&gt; items
[86.0, 62.0, 78.0]
</code></pre>
<p>So -- bottom line:</p>
<ol>
<li>Please use <code>csv</code> or <code>pandas</code> instead of <code>.split(',')</code> so that you can properly handle quoted csv and other particularities;</li>
<li>Use a <code>with</code> context manager so the file is automatically closed at the end of the block;</li>
<li>A <code>csv</code> file is very similar to a list of lists and can usually be handled the same way. </li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>pandas</code> module, which is pretty standard in data science:</p>
<pre><code>import pandas as pd

df = pd.read_csv("diabetes.csv", header=None, index_col=None)
df.iloc[:, 2] = pd.to_numeric(df.iloc[:, 2], downcast='float')
list = df.iloc[:, 2]
</code></pre>
<p><strong>EDIT</strong><br/>
Note, that the output type in here will be <code>Series</code></p>
</div>
<div class="post-text" itemprop="text">
<p>A very simple and naive one liner: </p>
<pre><code>result = [float(line.strip().split(",")[2]) for line in open("diabetes.csv")]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's what you can do:</p>
<pre><code>my_list = []

with open("diabetes.csv", 'rb') as csvfile:

    for line in csvfile.readlines():
        lst = line.split(',')
        my_list.append(float(lst[2]))
</code></pre>
</div>
<span class="comment-copy">Use a CSV reader like <code>pandas</code> or the standard library <code>csv</code> module. Try to avoid reinventing-the-wheel.</span>
<span class="comment-copy">you can declare an array outside <code>col3 = []</code> and <code>col3.append(float(lst[2]))</code> to it in every loop. Although I agree using the standard <code>csv</code> module may be better, a custom implementation does provide more flexibility.</span>
<span class="comment-copy">Naive is the key word. Interpreting CSV data via <code>split</code> is a bad practice. Use the <code>csv</code> library.</span>
<span class="comment-copy">No arguing there. Naive approaches can be very useful when learning though, it's good to not be buried in a pile of libraries when all you want to understand is a for loop.</span>
<span class="comment-copy">True. It's also helpful to teach a pattern that works in the general case so once learned it works forever. I think the "batteries included" lesson is especially important for Python.</span>
<span class="comment-copy">Your approach is naive and dangerous. Use the<code>csv</code> library. Interpreting the CSV lines and fields by yourself in this simplistic way will not deal with quotes and other subtleties of CSV syntax.</span>
<span class="comment-copy">@ChrisJohnson Is this better ?</span>
