<div class="post-text" itemprop="text">
<p>I am reading a file in my Python script which looks like this:</p>
<pre><code>#im a useless comment
this is important
</code></pre>
<p>I wrote a script to read and split the "this is important" part and ignore the comment lines that start with <code>#</code>.</p>
<p>I only need the first and the last word (In my case "this" and "important"). </p>
<p>Is there a way to tell Python that I don't need certain parts of a split?</p>
<p>In my example I have what I want and it works.</p>
<p>However if the string is longer and I have like 10 unused variables, I gues it is not like programmers would do it.</p>
<p>Here is my code:</p>
<pre><code>#!/usr/bin/python3

import re

filehandle = open("file")
for line in file:

    if re.search("#",line):
        break;
    else:
        a,b,c = line.split(" ")
        print(a)
        print(b)

filehandle.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another possibility would be:</p>
<pre><code>a, *_, b = line.split()
print(a, b)
# &lt;a&gt; &lt;b&gt;
</code></pre>
<p>If I recall correctly, <code>*_</code> is not backwards compatible, meaning you require Python 3.5/6 or above (would really have to look into the changelogs here).</p>
</div>
<div class="post-text" itemprop="text">
<p>On line 8, use the following instead of </p>
<pre><code>a,b,c = line.split(" ")
</code></pre>
<p>use:</p>
<pre><code>splitLines = line.split(" ")
a, b, c = splitLines[0], splitLines[1:-1], splitLines[-1]
</code></pre>
<p>Negative indexing in python, parses from the last. <a href="https://stackoverflow.com/a/11367936/3959965">More info</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>I think <code>python negative indexing</code> can solve your problem</p>
<pre><code>import re

filehandle = open("file")
for line in file:

    if re.search("#",line):
        break;
    else:
        split_word = line.split()
        print(split_word[0]) #First Word
        print(split_word[-1]) #Last Word

filehandle.close()
</code></pre>
<p>Read more about <a href="http://www.careerride.com/python-negative-index.aspx" rel="nofollow noreferrer">Python Negative Index</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can save the result to a list, and get the first and last elements:</p>
<pre><code>res = line.split(" ")
# res[0] and res[-1]
</code></pre>
<p>If you want to print each 3rd element, you can use:</p>
<pre><code>res[::3]
</code></pre>
<p>Otherwise, if you don't have a specific pattern, you'll need to manually extract elements by their index.</p>
<p>See the <a href="https://docs.python.org/3.6/library/stdtypes.html#str.split" rel="nofollow noreferrer">split</a> documentation for more details.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I've understood your question, you can try this:</p>
<pre><code>s = "this is a very very very veeeery foo bar bazzed looong string"
splitted = s.split() # splitted is a list
splitted[0] # first element
splitted[-1] # last element
</code></pre>
<p><a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a> returns a <code>list</code> of the words in the string, using sep as the delimiter string. ... If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.</p>
<p>In that way you can get the first and the last words of your string.</p>
</div>
<div class="post-text" itemprop="text">
<p>For multiline text (with <code>re.search()</code> function):</p>
<pre><code>import re

with open('yourfile.txt', 'r') as f:
    result = re.search(r'^(\w+).+?(\w+)$', f.read(), re.M)
    a,b = result.group(1), result.group(2)
    print(a,b)
</code></pre>
<p>The output:</p>
<pre><code>this important
</code></pre>
</div>
<span class="comment-copy">Maybe <code>x=line.split(); print(x[0],x[-1])</code> ?</span>
<span class="comment-copy"><code>a = line.split(' is ')</code></span>
<span class="comment-copy">@JJAACCEeEKK : if I split using "is", this also get split.</span>
<span class="comment-copy">For the case you are working on <code>line.split()</code> is superior to <code>line.split(" ")</code>.  Read more about str.split here <a href="https://docs.python.org/3/library/stdtypes.html?highlight=split#str.split" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>  "If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace."</span>
<span class="comment-copy">But if the string gets longer (for example 9 words) and i need the 1,4,7,9 Part?</span>
<span class="comment-copy">@Nico See my update.</span>
<span class="comment-copy">@MarounMaroun there is no need for the list comprehension. <code>res[::3]</code> should suffice.</span>
<span class="comment-copy">@DaveJ True, thanks.</span>
<span class="comment-copy">Fix last element to: <code>splitted[-1]</code>.</span>
