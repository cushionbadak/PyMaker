<div class="post-text" itemprop="text">
<p>If I want to share an object using <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a>, 
which of the following should I use depending on what circumstances?</p>
<ul>
<li><a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Value" rel="nofollow noreferrer">multiprocessing.Value</a> or <code>multiprocessing.Array</code></li>
<li>or <a href="https://docs.python.org/2/library/multiprocessing.html#managers" rel="nofollow noreferrer">multiprocessing.Manager</a></li>
</ul>
<p>it seems to me that:</p>
<ul>
<li><code>Value</code> only works for object of <code>ctypes</code> (but what's <code>ctypes</code>? are <code>numpy.ndarray</code> <code>ctypes</code> or <code>networkx.Graph</code>)</li>
<li><code>Manager</code> can be used for arbitrary Python object, but I need to wrap the object methods</li>
</ul>
<p>Please help correct my understanding. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Value</code> is scalar it can hold only one single data time. Therefore, if you want to share say <code>char</code>, <code>double</code>, <code>int</code>, or <code>float</code> between different processes you should use <code>Array</code>. Unlike <code>Value</code>, <code>Array</code> can hold multiple values. </p>
<p>For an extensive list of <code>ctypes</code> as defined in Python's <code>ctypes</code>: have a look at this documentation: <a href="https://docs.python.org/3/library/ctypes.html#fundamental-data-types" rel="nofollow noreferrer">Fundamental data types</a>. Therefore, <code>int</code>, <code>bool</code>, <code>long</code>, <code>short</code> and many others are datatypes in the C programming language. </p>
<p>For a <code>Manager</code> object, I think the documentation is extensive on that: </p>
<blockquote>
<p>Managers provide a way to create data which can be shared between different processes, including sharing over a network between processes running on different machines. A manager object controls a server process which manages shared objects. Other processes can access the shared objects by using proxies.</p>
</blockquote>
<p>You might be wondering what this is all about! You just have to play with code to see how all that fits together, its not that complicated. </p>
</div>
