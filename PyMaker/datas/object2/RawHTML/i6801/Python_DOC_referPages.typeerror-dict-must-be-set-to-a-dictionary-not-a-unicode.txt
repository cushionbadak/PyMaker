<div class="post-text" itemprop="text">
<p>I cloned a library from git and I just managed to use the <code>savePlayerDictionary</code> method.</p>
<p>I stored the json file and everything looks fine.</p>
<p>BUT</p>
<p>When I try to use the loadPlayerDictionary, I get the error:</p>
<pre><code>TypeError: __dict__ must be set to a dictionary, not a 'unicode'
</code></pre>
<p>My code:</p>
<pre><code>def savePlayerDictionary(playerDictionary, pathToFile):
    """
    Saves player dictionary to a JSON file
    """
    player_json = {name: player_data.to_json() for name, player_data in playerDictionary.items()}
    json.dump(player_json, open(pathToFile, 'wb'), indent=0)


def loadPlayerDictionary(pathToFile):
    """
    Loads previously saved player dictionary from a JSON file
    """
    result = {}
    with open(pathToFile, "r") as f:
        json_dict = json.load(f)
        for player_name in json_dict:
            parsed_player = Player(None,None,False)
            parsed_player.__dict__ = json_dict[player_name]
            result[player_name] = parsed_player
    return result
</code></pre>
<p>where <code>player_data.to_json()</code> is implemented as:</p>
<pre><code>def to_json(self):
    return json.dumps(self.__dict__)
</code></pre>
<p>The code I run is:</p>
<pre><code>get_ipython().magic(u'matplotlib inline')
import basketballCrawler as bc
import matplotlib.pyplot as plt

players = bc.loadPlayerDictionary("myJson.json")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are encoding your player data to JSON, then encoding the whole dictionary mapping names to that JSON data to JSON <em>again</em>, resulting in double-encoded JSON data for the values of that mapping.</p>
<p>When you decode, you only decoded the name-data mapping, not the data for each player. You'd need to decode that separately:</p>
<pre><code>parsed_player = Player(None,None,False)
parsed_player.__dict__ = json.loads(json_dict[player_name])
</code></pre>
<p>It'd be easier if you just not encoded in <code>to_json()</code>:</p>
<pre><code>def to_json(self):
    return vars(self)
</code></pre>
<p>(I used the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code> function</a> as a cleaner function to get the same dictionary).</p>
<p>If all you are doing is persisting your player data, then consider using the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code> module</a> instead; it is faster and more versatile, no need to have a separate song and dance with <code>__dict__</code> attributes. There is a wrapper module called <a href="https://docs.python.org/3/library/shelve.html" rel="nofollow noreferrer"><code>shelve</code></a> that builds on <code>pickle</code> to create a persisted dictionary for objects even.</p>
</div>
<span class="comment-copy">Why are you assigning to <code>__dict__</code> in the first place? I'd use <code>__dict__.update()</code>. But clearly <code>json_dict[player_name]</code> is not a dictionary.</span>
<span class="comment-copy">What does the <code>to_json()</code> method return?</span>
<span class="comment-copy">The to_json method is: def to_json(self):         return json.dumps(self.__dict__)</span>
<span class="comment-copy">Make a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.  Provide a <i>small</i> sample JSON file so the load operation reproduces the problem.  Delete unnecessary code such as the save, since it works and is unneeded if you provide the JSON file it generates.  Provide the full traceback so we can see how it fails.</span>
<span class="comment-copy">So you are encoding to JSON twice. Don't do that; return just the <code>__dict__</code>, or make sure to decode twice when loading.</span>
<span class="comment-copy">Sorry for the delay thank you! this helped a lot :)</span>
