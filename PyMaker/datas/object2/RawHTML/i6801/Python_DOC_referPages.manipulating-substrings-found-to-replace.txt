<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/45620436/python-regex-replace-with-ascii-value">Python regex replace with ASCII value</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I want the replacement to depend on what is found. ie. an example of what I'm after might be the following</p>
<pre><code>def f(x):
    return str(int(x) + 1)

print(re.sub(r"(\d)", f(r"\1"), "123"))

#print 234
</code></pre>
<p>However, that doesn't actually work of course. Is some way of doing what I intend without having to keep track of the position/length of the found string and then replacing it on the next line? ie. I'm looking for a way to do this in one go.</p>
<hr/>
<p>Note the actual example I'm working on isn't as simple. I'm making a function which interprets a mathematical calculation string input.</p>
<p>Eg. "2 + 4 * 6 / 3"</p>
<p>The idea would be for the function to replace "4 * 6" with 24, then "24 / 3" with 8, and finally "2 + 8" with 10. It will search for the appropriate pairs and follow BIDMAS using regex.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe it's simplistic, but you could build some simple evaluator by applying regexes first on multiply, then on add operators, using a replacement function:</p>
<pre><code>import re

s = "4 + 6 * 7"

def replfunc(m):
    a = int(m.group(1))
    b = int(m.group(3))
    op = m.group(2)
    if op=="*":
        return str(a*b)
    elif op=="+":
        return str(a+b)

for op in "*+":
    s = re.sub("(\d+)\s*({})\s*(\d+)".format(re.escape(op)),replfunc,s)
</code></pre>
<p>here, regex tries to match "number operator number" (with optional spaces in between) and calls the replacement function on match.</p>
<p>The replacement function acts accordignly, converting to integer, peforming the relevant operation, and returning back a string to be replaced.</p>
<p>Of course, this isn't designed to process parenthesized expressions and will never be, consider third-party evaluators instead, like <a href="https://pypi.python.org/pypi/simpleeval" rel="nofollow noreferrer">simpleeval</a> (searching in pypi gives dozens of results)</p>
</div>
<div class="post-text" itemprop="text">
<p>I know that this isn't the way that you are trying to do it, but have you considered using the <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">eval()</a> function?</p>
<pre><code>&gt;&gt;&gt; statement = input("Expression: ")
3 + 4 * (5 + 2)
&gt;&gt;&gt; eval(statement)
31
</code></pre>
<p>This is certainly easier than using RegEx.</p>
<blockquote>
<p>Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. - Jamie Zawinski</p>
</blockquote>
</div>
<span class="comment-copy">regex replacement can be a function: <a href="https://stackoverflow.com/questions/45620436/python-regex-replace-with-ascii-value/45620531?s=1|1.7344#45620531" title="python regex replace with ascii value">stackoverflow.com/questions/45620436/…</a>  but your evaluator may choke on parentheses and/or operator priorities.</span>
<span class="comment-copy">@Rightleg yeah, looks like it, but not as simple as the original question though. thanks for the upvote if it's you :) and thanks to the upvoter if not.</span>
<span class="comment-copy">@Jean-FrançoisFabre Yeah it was me ^^ Well, I'm currently (finally!) learning <code>re</code>, and I did not know of this possibility, so...</span>
<span class="comment-copy">@Rightleg this is not very well-know, but super-powerful.</span>
<span class="comment-copy">Yes I've considered <code>eval()</code> but it's user input.</span>
<span class="comment-copy">try <code>eval("__import__('os').system('clear')", {})</code> or <code>eval("__import__('os').system('clear')", {})</code>. The user can inject code into your system. No, don't use <code>eval</code></span>
<span class="comment-copy">eval is perfectly fine as long as you sanitize your data.</span>
<span class="comment-copy">For instance something along the line of <code>a = input("Calculation: ")</code> then <code>if re.match(r"[^\d+\-*/^()]", a):    print("Invalid!")    else:    print(eval(a))</code> This would work well for your needs.</span>
