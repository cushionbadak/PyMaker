<div class="post-text" itemprop="text">
<p>I have a package <code>awesomepkg</code> with <code>setup.py</code>. I'd like to install a binary executable <code>awesometool</code> to the command line along with the package itself when users run <code>pip install awesomepkg</code>. I have compiled different OS versions for <code>awesometool</code>, which lives in a <code>bin/</code> folder beside <code>setup.py</code>.  </p>
<p>However, I can't find a good way to configure <code>setup.py</code>. I have attempted the following:</p>
<ol>
<li><p>Use the <code>scripts=[]</code> keyword in <code>setup()</code>. Unfortunately, the "executable" must be a python script.</p></li>
<li><p>So I try to wrap the binary in a python script using <code>os.system('bin/awesometool')</code> to delegate. It also fails because the wrapper script is copied somewhere else by pip, so it doesn't know where the relative path <code>bin/awesometool</code> is. </p></li>
<li><p>Another potential solution is the <code>data_files</code> keyword. However, for some reason the data files are not copied over to <code>site_packages</code> installation dir, even though running <code>python setup.py bdist_wheel</code> says they have been copied.  </p></li>
</ol>
<p>Reference: <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer">https://docs.python.org/3/distutils/setupscript.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I just ran into this issue myself. My solution was three-fold.</p>
<ol>
<li><p>I added the program, e.g. <code>awesometool</code>, to my package structure so I could add it via the <code>package_data</code> keyword:
<code>package_data={'awesomepkg': ['awesometool']}</code>.
This causes it to actually be copied into the same folder as the main <strong>init</strong>.py during installation.</p></li>
<li><p>I made a python script similar to your step 2. However, instead of the relative path, I first import <code>awesomepkg</code> and use <code>awesomepkg.__path__</code> to get the absolute path to the installation folder for the package. This would look like:</p>
<pre><code>import awesomepkg
import subprocess as sp
import sys

path = awesomepkg.__path__[0]
command = path + "/awesometool"
sp.call([command] + sys.argv)
</code></pre>
<p>I also used subprocess instead of system, but the result should be the same.</p></li>
<li><p>I added this script to the <code>scripts</code> keyword of <code>setup()</code></p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>From <strong>within</strong> a package can use</p>
<pre><code>import os
command = os.path.join(os.path.dirname(__file__), "awesometool")
</code></pre>
</div>
<span class="comment-copy">Shortly speaking just to sum it up, you have made a Python wrapper script and added it to the <code>scripts</code> keyworkd of <code>setup()</code>.</span>
<span class="comment-copy">I ran into problem here, I get error <code>Permission denied</code> because of the ownership of the binary file. How can I tackle this problem?</span>
