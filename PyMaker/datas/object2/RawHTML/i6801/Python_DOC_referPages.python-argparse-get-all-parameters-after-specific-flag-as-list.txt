<div class="post-text" itemprop="text">
<p>I'm trying to make argparser like in gdb</p>
<pre><code>program.py --valid-arg1  value1  --valid-arg2  value2  --args binary --bin-arg1 bin_arg1_value --bin-arg2 bin_arg2_value...
</code></pre>
<p>The problem is I need treat all arguments after <code>--args</code> just as values, and get them as a list inside my program. How can I do that?</p>
<p>Thanks</p>
<p>P.S. Use all unrecognized arguments it's bad solution because python and binary args may have same signature.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using <code>sys.argv</code> instead of <code>argparse</code>? You can do something like that then:</p>
<pre><code>import sys

dict = {}
tmp = []
key = ''
for arg in sys.argv:
    if arg[0] == '-':
        if tmp != []:
            dict[key] = tmp
            tmp = []
        key = arg
        if key == '--args':
            dict[key] = sys.argv[sys.argv.find(key)+1:]
            break
        continue
    tmp.append(arg)
</code></pre>
<p>This basically constructs an argument dictionary with flags as keys and list of arguments to flags as values. You might want to check what <code>sys.argv</code> is. If you invoke your python script with</p>
<pre><code>python script.py -h yes -f yes no yes
</code></pre>
<p><code>sys.argv</code> might be <code>['python', 'script.py', '-h', ...]</code> but I am leaving that to you to find out. Then instead of <code>for arg in sys.argv</code> you want to do <code>for arg in sys.argv[2:]</code> or something you want.</p>
<hr/>
<p>So if we call</p>
<pre><code>program.py --valid-arg1  value1  --valid-arg2  value2  --args binary --bin-arg1 bin_arg1_value --bin-arg2 bin_arg2_value
</code></pre>
<p>the <code>dict</code> will look like this:</p>
<pre><code>dict = {
    '--valid-arg1': ['value1'],
    '--valid-arg2': ['value2'],
    'args': ['binary', '--bin-arg1', 'bin_arg1_value', '--bin-arg2', 'bin_arg2_value']
}
</code></pre>
<p>Now if you want to use what is the value for <code>--valid-arg1</code>, you can do something like</p>
<pre><code>try:
    if dict['--valid-arg1'] == some_value1:
        ...
    elif dict['--valid-arg1'] == some_value2:
        ...
except KeyError:
    # no flag --valid-arg1
    pass
</code></pre>
<p>With <code>args</code> you can do something like</p>
<pre><code>try:
    if something in dict['args']:
        ...
except KeyError:
    # no additional args were given
    pass
</code></pre>
</div>
<span class="comment-copy">Are you saying you want to be able to retrieve <code>args</code> as <code>['binary', '--bin-arg1', 'bin_arg1_value', '--bin-arg2', 'bin_arg2_value']</code>?</span>
<span class="comment-copy">Yes, exactly that is what he wants</span>
<span class="comment-copy">@AlexHall yes, something like that</span>
<span class="comment-copy">Can anybody explain why somebody downvoted this question?</span>
<span class="comment-copy">Check out <a href="https://docs.python.org/3/library/argparse.html#arguments-containing" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html#arguments-containing</a> - what do you think of using <code>--</code> instead of <code>--args</code>?</span>
<span class="comment-copy">May I know why and who downvoted this? Don't just downvote, comment why you don't like it...</span>
<span class="comment-copy">The question is about argparse, which is much easier to use than manually parsing argv and has many useful features.</span>
<span class="comment-copy">@AlexHall Much easier to use? Now let me see you use argparse to do what this guy wants...</span>
<span class="comment-copy">It works.  I can split sys.argv on two parts - before --args and after. First part can be parsed by argparse, and second can be used as is.  But it seems that all work can be done by argparse.</span>
