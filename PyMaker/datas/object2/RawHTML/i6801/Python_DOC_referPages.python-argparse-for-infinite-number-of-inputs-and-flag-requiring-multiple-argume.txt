<div class="post-text" itemprop="text">
<p>I have a Python library which users currently run via </p>
<pre><code>python main.py
</code></pre>
<p><code>main.py</code> will call other <code>*.py</code> scripts within the same directory, and the program runs to completion. </p>
<p>My problem is, users of this software should be able to input (in theory) an infinite number of "events", whereby users need to specific 4 pieces of information: "category" (string), "type" (string), "start_time" (integer), and "end_time" (integer). By default, if nothing is no flag is used, no "events" are schedule, and the program runs by default. Users must give each of the 4 arguments at once for each "event", or otherwise there's an error message. Users should be able to schedule as many "events" as need be. </p>
<p>At the moment, I'm not sure of the best way to allow users to pass in argument variables using <code>argparse</code>, whereby (1) they can pass in dozens of arguments at once and (2) 4 categories are required. Is this possible? What is the data structure used, a dicitionary via argparse? </p>
<p>For only one such input, the na√Øve approach could be to use argparse, and force users to use the following format</p>
<p>python main.py ---user_specify "category1", 1233, 1452, 1673</p>
<p>whereby in the <code>main.py</code> script I have something like</p>
<pre><code> import argparse
 parser = argparse.ArgumentParser()
 parser.add_argument("user_specify", action="store_true", default=False)
</code></pre>
<p>That's quite clumsy. The bigger problem is that it doesn't solve the issue of allowing users to pass through dozens of such arguments. </p>
<p>What is the correct pythonic way to do this? </p>
<p>Is it possible to pass through dictionaries? How does one would with multiple inputs using the same argparse flag though? </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [1]: import argparse
In [2]: parser = argparse.ArgumentParser()
In [3]: parser.add_argument('-e','--event',action='append',nargs=4)

In [5]: args = parser.parse_args('--event cetegory1 123 2 4 -e cat2 23 4 343'.split())
In [6]: args
Out[6]: Namespace(event=[['cetegory1', '123', '2', '4'], ['cat2', '23', '4', '343']])
</code></pre>
<p>Each <code>--event</code> flag marks a new list of 4 items.  Post parsing code could iterate through the sublists of <code>args.event</code> and convert the last 2 elements to integers.</p>
<p>Strings could also contain spaces if quoted.</p>
<p>For many such 'events' you could put them in a <code>@file</code> as described in</p>
<p><a href="https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars</a></p>
<p>If using the idea in <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.convert_arg_line_to_args" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.convert_arg_line_to_args</a></p>
<p>the file could look like</p>
<pre><code>--event cetegory1 123 2 4 
-e "cat 2" 23 4 343
--event foo bar 4 2
...
</code></pre>
<p>Data like that could also be read as a <code>csv</code> file.  Parsing a <code>json</code> string is also an option.  An <code>argparse</code> argument with a <code>type=json.loads</code> parameter can read such a string from the input or an <code>@file</code>.</p>
<pre><code>In [7]: import json
In [8]: parser.add_argument('-j',type=json.loads)
In [9]: argv = ['-j', '[["category1","123",3,4]]']
In [10]: parser.parse_args(argv)
Out[10]: Namespace(event=None, j=[['category1', '123', 3, 4]])
</code></pre>
</div>
<span class="comment-copy">I would define argument with a '--event' flag and <code>nargs=4</code>, and <code>action='append'</code>.  That will give you a nested list.  Parse the sublists into strings and integers as needed.</span>
<span class="comment-copy">Do you have an example of how this would work? Also, I think this solves the problem if there's only 1 "event". What if a user want to include 100s of events? That's 400 variables after one flag, right?  Maybe a JSON or dictionary would work better? I'm not sure what's the solution</span>
<span class="comment-copy">"Data like that could also be read as a csv file"  This is a pretty good idea. Users could pass a *csv with 4 columns. Any examples where this has been done previously?</span>
<span class="comment-copy">There are lots of SO questions about reading data from <code>csv</code> files with <code>numpy</code> (arrays) or <code>pandas</code> (dataframes).  There's also a <code>csv</code> module.  But it's also easy to read and parse such a file directly, especially if you aren't doing anything fancy.</span>
<span class="comment-copy">Ah, I think I've now put 2 and 2 together. It should be simple to read in the *csv file from the argument, of course.  Thanks for the help!</span>
