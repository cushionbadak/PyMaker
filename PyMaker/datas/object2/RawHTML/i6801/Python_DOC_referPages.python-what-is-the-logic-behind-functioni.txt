<div class="post-text" itemprop="text">
<p>In the following block of codes:</p>
<pre><code>print('My name is')
for i in range(5):
    print('Jimmy Five Times (' + str(i) + ')')
</code></pre>
<p>I understand that the code will run 5 times where i = 0 to 4. </p>
<p>However, I don't understand the logic behind the + operators added before and after the str() function.</p>
<p>How can this + function() + applied to other scenarios?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str(i)</code> is the string representation of <code>i</code>. <a href="https://docs.python.org/3/library/functions.html#func-str" rel="nofollow noreferrer">Documentation</a>:</p>
<blockquote>
<p>Return a str version of object.</p>
</blockquote>
<p>If <code>a</code>, <code>b</code> and <code>c</code> are strings, then <code>a + b + c</code> is the string resulting of their concatenation.</p>
<p>Therefore, with <code>i</code> being an <code>int</code> between <code>0</code> and <code>4</code>, say <code>3</code>, <code>'Jimmy Five Times (' + str(i) + ')'</code> is the folowing string:</p>
<pre><code>'Jimmy Five Times (3)'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python, <code>+</code> is used for string contate.
i.e:</p>
<pre><code>data1 = "Hello"
data2 = "World"

print(data1+data2)
</code></pre>
<p>The output will be :</p>
<pre><code>HelloWorld
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>str</code> is a function that returns a string representation of <code>i</code>, so:</p>
<pre><code>print('My name is')
for i in range(5):
    print('Jimmy Five Times (' + str(i) + ')')
# =&gt; 'Jimmy Fine Times (0)'
# =&gt; 'Jimmy Fine Times (1)'
# =&gt; 'Jimmy Fine Times (...
</code></pre>
<p>Calling a function that returns a string within a string concatenation <code>'A' + func() + 'B'</code>, will just use replace the function call with the string returned by the function (if no error or exceptions were raised), example:</p>
<pre><code>def getName():
  name=input('Enter name: ')
  return name

print('Hello '+getName()+', Welcome to StackOverflow.')

#In: Enter name:  Jack
#Out: Hello Jack, Welcome to StackOverflow.
</code></pre>
</div>
<span class="comment-copy">string concatenation</span>
<span class="comment-copy">Because <code>function()</code> always <i>evaluates to a value first</i>, and then the operators are applied. <code>str</code> will either return a <code>str</code> or throw an error. The <code>+</code> operator between strings <i>concatenates</i>. So try <code>"hello" + " world"</code></span>
<span class="comment-copy">I would add that this isn't the best way to format a string in python. This is a java-style bad way of writing it.</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre By the way, what do you think about Python 3.6's formatting? I personnally don't like it much, except for short strings, I find it rather dirty...</span>
<span class="comment-copy">the <code>f</code> strings? well, I dunno, we don't have this version at work. Stops at 3.5, with 2.7 compatibility required. So it'll take a while before I dig into it. But I adopted <code>str.format</code> all right and it's powerful enough.</span>
