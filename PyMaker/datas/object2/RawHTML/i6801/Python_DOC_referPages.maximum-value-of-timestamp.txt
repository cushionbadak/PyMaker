<div class="post-text" itemprop="text">
<p>I am using Python 3.6.0 on Windows 10 x64.</p>
<p>I just found that in <code>time.ctime(seconds)</code>, <code>seconds</code> parameter has an implicit maximum value, which is 32536799999, almost equals to <code>2^34.92135</code>.</p>
<p>Is that the maximum value?</p>
<p>The error message just says it's an invalid number.</p>
<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.ctime(32536799999)
&gt;&gt;&gt; 'Mon Jan 19 15:59:59 3001'
&gt;&gt;&gt; time.ctime(32536799999+1)
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OSError: [Errno 22] Invalid argument
</code></pre>
<p>I googled and looked on Python documentation, but I didn't find anything about it. And I'm going to check this problem on Ubuntu in my lab.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>time</code> documentation doesn't mention any limits, but the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code> documentation</a> does:</p>
<blockquote>
<p><code>fromtimestamp()</code> may raise <code>OverflowError</code>, if the timestamp is out of the range of values supported by the platform C <code>localtime()</code> or <code>gmtime()</code> functions, and <code>OSError</code> on <code>localtime()</code> or <code>gmtime()</code> failure.</p>
<p>[...]</p>
<p>Naive <code>datetime</code> instances are assumed to represent local time and this method relies on the platform C <code>mktime()</code> function to perform the conversion. Since <code>datetime</code> supports wider range of values than <code>mktime()</code> on many platforms, this method may raise <code>OverflowError</code> for times far in the past or far in the future.</p>
</blockquote>
<p>Then we head over to the <a href="https://msdn.microsoft.com/en-us/library/bf12f0hc.aspx" rel="nofollow noreferrer">Windows documentation</a>:</p>
<blockquote>
<p><code>_localtime64</code>, which uses the <code>__time64_t</code> structure, allows dates to be expressed up through 23:59:59, December 31, 3000, coordinated universal time (UTC), whereas <code>_localtime32</code> represents dates through 23:59:59 January 18, 2038, UTC.</p>
<p><code>localtime</code> is an inline function which evaluates to <code>_localtime64</code>, and <code>time_t</code> is equivalent to <code>__time64_t</code>. If you need to force the compiler to interpret <code>time_t</code> as the old 32-bit <code>time_t</code>, you can define <code>_USE_32BIT_TIME_T</code>. Doing this will cause <code>localtime</code> to evaluate to <code>_localtime32</code>. This is not recommended because your application may fail after January 18, 2038, and it is not allowed on 64-bit platforms.</p>
</blockquote>
<p>All the time-related functions (including <code>ctime</code>) work the same way. So the max date you can reliably convert between timestamps on Windows 10 is 3000-12-31T23:59:59Z.</p>
<p>Trying to get a platform-independent max timestamp <a href="https://stackoverflow.com/q/32045725/476716">is difficult</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm using 
<code>3.6.1 |Continuum Analytics, Inc.| (default, May 11 2017, 13:09:58) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]</code>
in a Ubuntu 16.04 VM running on a Windows 10 machine.</p>
<p>I broke apart your ctime call to its components, to investigate but I don't run into the same maximum.</p>
<pre><code>&gt;&gt;&gt; time.asctime(time.localtime(32536799999-1))
'Mon Jan 19 02:59:58 3001'
&gt;&gt;&gt; time.asctime(time.localtime(32536799999+1))
'Mon Jan 19 03:00:00 3001'
&gt;&gt;&gt; time.asctime(time.localtime(32536799999+10))
'Mon Jan 19 03:00:09 3001'
&gt;&gt;&gt; time.asctime(time.localtime(32536799999+10000))
'Mon Jan 19 05:46:39 3001'
&gt;&gt;&gt; time.asctime(time.localtime(32536799999+1000000))
'Fri Jan 30 16:46:39 3001'
&gt;&gt;&gt; time.asctime(time.localtime(32536799999+1000000000))
'Thu Sep 27 05:46:39 3032'
&gt;&gt;&gt; time.ctime(32536799999+1000000000)
'Thu Sep 27 05:46:39 3032'
&gt;&gt;&gt; time.asctime(time.gmtime(32536799999-1))
'Mon Jan 19 07:59:58 3001'
&gt;&gt;&gt; time.asctime(time.gmtime(32536799999+1))
'Mon Jan 19 08:00:00 3001'
&gt;&gt;&gt; time.asctime(time.gmtime(32536799999+1000000000))
'Thu Sep 27 09:46:39 3032'
</code></pre>
<p>Either something was fixed from 3.6.0 to 3.6.1, or you have some interesting issue specific to your machine.</p>
<p>I do see the following time related change in 3.6.1:
<a href="https://www.python.org/dev/peps/pep-0495/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0495/</a>
I wonder if the time you happened to be using happened to fall into a fold or a gap?  Could you try adding a little over 1 hour on your system and see if it becomes valid again?</p>
</div>
<div class="post-text" itemprop="text">
<p>This must be to do with your installation of Python, in version <code>3.5</code>, I never experience such an error:</p>
<pre><code>&gt;&gt;&gt; time.ctime(32536799999)
'Mon Jan 19 07:59:59 3001'
&gt;&gt;&gt; time.ctime(32536799999+1)
'Mon Jan 19 08:00:00 3001'
&gt;&gt;&gt; time.ctime(32536799999+9999999999999999)
'Thu Feb 13 01:46:38 316890386'
&gt;&gt;&gt; time.ctime(32536799999+99999999999999999)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OSError: [Errno 75] Value too large for defined data type
</code></pre>
<p>and even when I do with a gigantic number, it throws a different <code>error</code>.</p>
</div>
<span class="comment-copy"><code>time.ctime</code> just calls a few OS-provided functions. The docs say <code>time.localtime(s) == time.asctime(time.localtime(s))</code>, so I would see which one of those calls fails on Windows.</span>
<span class="comment-copy">Please don't post images of code or data.  Welcome to SO - please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">This is interesting, because according to Windows documentation, the maximum value shoud actually be already at <a href="https://msdn.microsoft.com/de-de/library/59w5xcdy.aspx#Anchor_1" rel="nofollow noreferrer">3000-12-31T23:59:59</a>.</span>
<span class="comment-copy">Hmm, <code>Python 3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:57:36) [MSC v.1900 64 bit (AMD64)] on win32</code> <code>&gt;&gt;&gt; time.ctime(32536799999)</code> <code>'Mon Jan 19 09:59:59 3001'</code>. Same on <code>Python 3.5.3 (default, Sep  9 2017, 23:18:15) [MSC v.1900 64 bit (AMD64)] on win32</code>.</span>
<span class="comment-copy">@wwii Thank you so much for letting me know, modified right away.</span>
<span class="comment-copy">Thanks so much! now I see its a problem about Windows platform.</span>
<span class="comment-copy">It seems this does not provide a promising answer since you are still investigating, you should put this in comments</span>
<span class="comment-copy">I cannot comment directly on questions until I have 50 reputation, and I think my details would not fit in a comment.  I did some non-trivial work to investigate and provided at least a partial answer, including a direction to take for further investigation, so I think I will leave it to hopefully provide some answer value for the asker, or others who might arrive here after a search.</span>
<span class="comment-copy">we had the same problem, we earned the privilege</span>
<span class="comment-copy">Indeed, I am participating in this process by answering.  Previous answers I have provided before have earned me a few points here and there (as well as thanks for the help).  I hope that my suggested answer, including link to documentation, and instructions on how to use that to test asker's particular setup, will help the asker confirm if my answer correctly identifies the problem.  If not, I believe I have provided useful information for anyone who ends up here via a search on a related question.</span>
<span class="comment-copy">You're running this on Ubuntu, not Windows.</span>
<span class="comment-copy">In 3.6, on Windows, <code>datetime.datetime.max.timestamp()</code> raises <code>OSError: [Errno 22] Invalid argument</code>. You get a different one because you're on 3.5.</span>
