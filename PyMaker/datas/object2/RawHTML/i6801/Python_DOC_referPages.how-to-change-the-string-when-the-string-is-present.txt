<div class="post-text" itemprop="text">
<p>I need some help with my code. I have a trouble with changing the strings.</p>
<p>I am checking with the strings if the variable <code>getTime3</code> have a string <code>30</code> then I want to replace it with <code>00</code>. On my code, it will find the string <code>30</code> to replace it with <code>0030</code> which is wrong. It should be <code>00</code>.</p>
<p>Here is the code:</p>
<pre><code>if getTime3 == '11:30PM':
   self.getControl(346).setLabel('12:00AM')
elif getTime3 == '12:30PM':
     self.getControl(346).setLabel('1:00AM')
else:
    ind = getTime3.find(':')
    if getTime3[ind+1:ind+3]=='30':
       getTime3 = getTime3[:ind]+':00'+getTime3[+2:]
       self.getControl(346).setLabel(getTime3)

    else: 
       getTime3 = str(int(getTime3[:ind])+1)+':30'+getTime3[+2:]
       self.getControl(346).setLabel(getTime3)
</code></pre>
<p>What I am expect for the two special cases, when the program finds the <code>:</code>, it will check if <code>30</code> is present then change the current hour to the next hour and make a new string with AM/PM label, example: change from <code>8</code> to <code>9</code> and replace <code>30</code> with <code>00</code> to make it to show <code>9:00PM</code>. If the ending is <code>00</code> then I want to change <code>00</code> to <code>30</code> instead. I want to add <code>30</code> in the minute section and again preserves the AM/PM part. If the <code>getTime3</code> have the string <code>11:30AM</code> then I want to change it to <code>12:00PM</code>.</p>
<p>Can you please help me with how to fix the <code>0030</code> to make it to show <code>00</code> instead and add the next hour?</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python, slice like <code>x[a:b]</code> in the slice starting at <code>a</code> (inclusive), and finishing at <code>b</code> (exclusive).</p>
<p>So: <code>getTime3[:ind]</code> is the slice from 0 to <em>ind</em> exclusive, which is the hours <strong>without</strong> the ":".</p>
<p>And indexes are absolute index, not relative. So <code>getTime3[+2:]</code> is the same as <code>getTime3[2:]</code>, which correspond to the substring starting at index 2.</p>
<p>What you want is:</p>
<pre><code>getTime3 = getTime3[:ind] + ':00' + getTime3[ind + 3:]
# or
getTime3 = getTime3[:ind + 1] + '00' + getTime3[ind + 3:]
</code></pre>
<p>Example:</p>
<pre><code>getTime3 = '08:30PM'
ind = getTime3.index(":")
getTime3[:ind] + ':00' + getTime3[ind + 3:]
# -&gt; '08:00PM'
</code></pre>
<p><strong>EDIT</strong></p>
<p>If you want to do some calculation on time, you can use the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code></a> module.</p>
<pre><code>time_fmt = '%I:%M%p'
</code></pre>
<p>Is the format used to represent time like '09:30PM', where:</p>
<ul>
<li>%I Hour (12-hour clock) as a zero-padded decimal number.</li>
<li>%M Minute as a zero-padded decimal number.</li>
<li>%p Locale’s equivalent of either AM or PM.</li>
</ul>
<p>How to add 30 min:</p>
<pre><code>import datetime

time3 = '09:30PM'
dt3 = datetime.datetime.strptime(time3, time_fmt)
dt3 += datetime.timedelta(minutes=30)
time3 = dt3.strftime(time_fmt)
</code></pre>
<p>If you want to set the minutes to 0, you can do:</p>
<pre><code>dt3 = datetime.datetime.strptime(time3, time_fmt)
dt3 = d3.replace(minute=0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please don't use the wrong tool for the task. You are manipulating times, yet using strings to do it. Start with this to turn 11:30PM into 12:00AM:</p>
<pre><code>import datetime
t3 = datetime.datetime.strptime(getTime3, '%I:%M%p')
t3 += datetime.timedelta(minutes=30)
print(t3.strftime('%I:%M%p'))
</code></pre>
<p>Adding <code>timedelta(minutes=30)</code> makes the intent perfectly clear. Some relevant documentation is at <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior</a></p>
</div>
<span class="comment-copy"><code>getTime3[+2:]</code> - don't you want <code>getTime3[ind+2:]</code>?</span>
<span class="comment-copy">That is used for <code>PM</code> which I need it.</span>
<span class="comment-copy">Right, but what exactly is <code>+2</code>?</span>
<span class="comment-copy">it show this <code>00PM</code></span>
<span class="comment-copy">Thank you very much for this, when I try this: <code>ind = getTime3.find(':')                                              if getTime3[ind+1:ind+3] == '30':                                                  getTime3 = str(int(getTime3[:ind]) + 1)+':00'+ getTime3[ind+2:]</code> it will show <code>10:000PM</code>. How I can make it to show <code>10:00PM</code> when my string show the time <code>9:30PM</code>?</span>
<span class="comment-copy">@DanielEzekiel: If you need to do calculation on date/time, you should consider using <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code></a> module.</span>
<span class="comment-copy">if I use datetime module, are they going to add the minute and day date automatically as if my time show <code>11:30PM</code> then it will add it to <code>12:00AM</code> to the next day, the same for the month and year?</span>
<span class="comment-copy">@DanielEzekiel Yes, a <code>datetime</code> object is the combination of a date and a time. So 11:30PM + 30min = 23:30 + 30 min = 0:00 (midnight the day after). To have relevant time you need to add a "real" date to your <code>datetime</code> object. Read the documentation…</span>
<span class="comment-copy">I have the datetime_strptime which show <code>time.struct_time(tm_year=2017, tm_mon=9, tm_mday=10, tm_hour=20, tm_min=30, tm_sec=0, tm_wday=6, tm_yday=253, tm_isdst=-1</code> when I am using <code>epg_time_1 = self.epg_time_1</code> to store time.struct_time in the list. How I can add 30 mins using with time.struct_time?</span>
<span class="comment-copy">You are showing <code>t3.timetuple()</code> results compatible with time.localtime(). Don't do that, just stick to the datetime module, adding a timedelta as I described.</span>
