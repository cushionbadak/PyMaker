<div class="post-text" itemprop="text">
<p>I'm currently scraping a website to pull store hours in the format like below:</p>
<pre><code>"""Hours
Monday 9:30 AM - 9:00 PM
Tuesday 9:30 AM - 9:00 PM
Wednesday 9:30 AM - 9:00 PM
Thursday 9:30 AM - 9:00 PM
Friday 9:30 AM - 11:00 PM
Saturday 9:30 AM - 11:00 PM
Sunday 11:00 AM - 6:00 PM
Holiday Hours
Thanksgiving Day 11:00 AM - 6:00 PM"""
</code></pre>
<p>And I'm wanting to process it to end up like so:</p>
<pre><code>"""Mon-Thu 9:30AM-9:00PM  
Fri-Sat 9:30AM-11:00PM
Sun &amp; Hol 11:00AM-6:00PM"""
</code></pre>
<p>I'm happy to take a proposed pseudo-code solution for the sake of learning and building myself. I'm just not able to wrap my head around any sort of solution here.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is a good use case for <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> - we can use it to group the <em>consecutive days</em> with the same time range. Something along these lines:</p>
<pre><code>from itertools import groupby
from operator import itemgetter
from pprint import pprint


data = """Hours
Monday 9:30 AM - 9:00 PM
Tuesday 9:30 AM - 9:00 PM
Wednesday 9:30 AM - 9:00 PM
Thursday 9:30 AM - 9:00 PM
Friday 9:30 AM - 11:00 PM
Saturday 9:30 AM - 11:00 PM
Sunday 11:00 AM - 6:00 PM
Holiday Hours
Thanksgiving Day 11:00 AM - 6:00 PM"""

# filter relevant rows with weekdays only
rows = [row.split(" ", 1) for row in data.splitlines()[1:-2]]

# group consecutive days by a time range
result = []
for time_range, group in groupby(rows, key=itemgetter(1)):
    days_in_group = [item[0] for item in group]

    first_day, last_day = days_in_group[0][:3], days_in_group[-1][:3]
    range_end = "-" + str(last_day) if first_day != last_day else ""

    result.append("{begin}{end} {time_range}".format(begin=first_day,
                                                     end=range_end,
                                                     time_range=time_range))

pprint(result)
</code></pre>
<p>Prints:</p>
<pre><code>['Mon-Thu 9:30 AM - 9:00 PM',
 'Fri-Sat 9:30 AM - 11:00 PM',
 'Sun 11:00 AM - 6:00 PM']
</code></pre>
<p>Note that this would even work if every single day has a different time range.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, first we need to parse (day - opening time - closing time) out of those text blocks. Regex anyone?</p>
<pre><code>^(\w*)\s(\d{1,2}):(\d{1,2})\s(\w{2})\s-\s(\d{1,2}):(\d{1,2})\s(\w{2})
</code></pre>
<p>Now, we need to group days with equal opening &amp; closing times together. defaultdict?</p>
<pre><code>d = defaultdict(list)
for line in input_block:
  # use regex to pull the components, inc day, opening time, closing time
  # concat all the opening and closing times into a single string, as you want
  d[opening_closing_time_str].append(day)
</code></pre>
<p>Here's my output from opening times only:</p>
<pre><code>{
'09:30:00': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], 
'11:00:00': ['Sunday']
}
</code></pre>
<p>Now you could iterate over <code>d</code> and group opening times by day, then maybe sort so Monday is always on top?. And you're done :)</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Create a class, like - 'WorkDay' or something. Use shorten day
name, like - Mon, etc, use day index - Monday 0, Sunday 6 </li>
<li>Convert your input to array of WorkDay items </li>
<li>Group the array items by the
starting and ending time </li>
<li>Using grouped array, display: lower_idx
Work Day - higher_idx Work Day and their start-end times</li>
</ol>
</div>
<span class="comment-copy">This doesn't have to do with beautifulsoup or requests, but rather just string processing in python. Please change your tags accordingly</span>
<span class="comment-copy">One day I will read the entire itertools documentation page. One day...</span>
