<div class="post-text" itemprop="text">
<p>I want to set the name of a class to one of the variables within the class so that when I print classes I get their names, I've tried setting <code>__name__</code> but it did not work.</p>
<p>this is my class</p>
<pre><code>class SNMPData(object):
    def __init__(self, device='', speed_down=0, speed_up=0, bgp_peer_state='', bgp_summary='', error=''):
        self.device = device
        self.speed_down = speed_down
        self.speed_up = speed_up
        self.bgp_peer_state = bgp_peer_state
        self.bgp_summary = bgp_summary
        self.error = error
        self.__name__ = device
</code></pre>
<p>I create a list of objects then try print them</p>
<pre><code>&gt;&gt;&gt; list = [SNMPData(device='dev_1',speed_down=1),SNMPData(device='dev_2',speed_down=2)]
&gt;&gt;&gt; print(list)
[&lt;SNMPData object at 0x7ff052a42ef0&gt;, &lt;SNMPData object at 0x7ff052a42b38&gt;]
&gt;&gt;&gt;
</code></pre>
<p>instead of SNMPData object at 0x.... is it possible to print </p>
<pre><code>['SNMPData dev_1','SNMPData dev_2']
</code></pre>
<p>instead?</p>
</div>
<div class="post-text" itemprop="text">
<p>Each class has a <code>__repr__</code> and <code>__str__</code> function which takes a single argument, <code>self</code>, representing the object itself. The <code>__repr__</code> function returns the true string representation of the object and the <code>__str__</code> function is used for <code>str(obj)</code> which is used for printing.</p>
<pre><code>class SNMPData(object):
    def __init__(self, device='', speed_down=0, speed_up=0, bgp_peer_state='', bgp_summary='', error=''):
        ...
    def __repr__(self):
        return '{} {}'.format(self.__class__.__name__, self.device)
</code></pre>
<p>You can do the same for <code>__str__(self)</code> if you want to observe this behaviour for printing.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking to define <code>__repr__</code> which should return a printable representation of the object. The <a href="https://docs.python.org/3/library/functions.html#repr" rel="noreferrer">official definition</a> of <code>__repr__</code></p>
<blockquote>
<p>repr(object):</p>
<p>Return a string containing a printable representation of an object.
  For many types, this function makes an attempt to return a string that
  would yield an object with the same value when passed to eval(),
  otherwise the representation is a string enclosed in angle brackets
  that contains the name of the type of the object together with
  additional information often including the name and address of the
  object. A class can control what this function returns for its
  instances by defining a <strong>repr</strong>() method.</p>
</blockquote>
<p>bottom line is that the output from <strong><code>__str__</code> is meant to be readable by human ** whereas the output from **<code>__repr__</code> is meant to be read by the Python interpreter.</strong>  so when you give the string to the interpreter, it should recreate the object. Also If an object doesn't have a <code>__str__</code> method then <code>__repr__</code> is used instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are able to change a text representation of your custom object by overriding <code>__repr__</code> and <code>__str__</code> methods:</p>
<pre><code>...
def __repr__(self):
    return self.__class__.__name__ + ' ' + self.device
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Define <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__(self)</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__(self)</code></a>.</p>
<p>The former is the "official" string representation. The latter is what is returned when you cast the object to a <code>str</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generalizing some of the other answers, you could do:</p>
<pre><code>def __str__(self):
    return '{self.__class__.__name__} {self.device}'.format(self=self)
</code></pre>
</div>
<span class="comment-copy">You are looking for <a href="https://stackoverflow.com/questions/1984162/purpose-of-pythons-repr"><code>__repr__</code></a></span>
<span class="comment-copy">If the description is "small enough", it's recommended to restate how to create the object again, e.g. <code>SNMPData(device='{device}')</code>, but if it's going to be very state heavy, just do something generic <code>&lt;SNMPData device={device} ...&gt;</code>.</span>
<span class="comment-copy">Thanks for the explanation, this is what I was after</span>
<span class="comment-copy">Note that you don't need to hardcode <code>SNMPData</code>: you can use <code>self.__class__.__name__</code>.</span>
<span class="comment-copy">@erip That's true, thanks.</span>
