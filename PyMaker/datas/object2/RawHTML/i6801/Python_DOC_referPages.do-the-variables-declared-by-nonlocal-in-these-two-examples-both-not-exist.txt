<div class="post-text" itemprop="text">
<p>In the following two examples, is it correct that the variables declared by <code>nonlocal</code> do not exist? </p>
<p>Then why is there an error in the first example, while there is no error in the second example? Thanks.</p>
<p>Example 1:</p>
<pre><code>count = 0

def make_counter():
    def counter():
        nonlocal count  # SyntaxError: no binding for nonlocal 'count' found
        count += 1
        return count
    return counter
</code></pre>
<p>Example 2:</p>
<pre><code>a = 5

def f():
    a=2
    class C1:
        a = 3
        def f1(self):
            nonlocal a  # refers to `a` local to `f`
            a = 4
        def f2(self):
            self.f1()
            print(self.a)
    print(a)

f()  # 2
print(a)  # 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Per python documentation: <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement</a></p>
<p><code>nonlocal</code> looks for the <em>nearest enclosing scope</em>. In Example 1, you have:</p>
<pre><code>count = 0 # global scope

def make_counter():
    # nonlocal scope
    def counter():
        # nonlocal scope, count references something in the global scope
        nonlocal count
        count += 1
        return count
    return counter
</code></pre>
<p><code>count</code> is two "scope levels" away and is also in the <code>global</code> scope, so <code>nonlocal</code> throws a syntax error since it is not in the <code>nonlocal</code> scope. </p>
<p>In Example 2:</p>
<pre><code>a = 5 # global scope

def f():
    # nonlocal scope
    a=2 # "a" referenced in nonlocal scope!
    class C1:
        # nonlocal scope
        a = 3 # "a" referenced in nonlocal scope!
        def f1(self):
            # local scope
            # "a" most recently referenced in nearest enclosing scope, no syntax error!
            nonlocal a
            a = 4
        def f2(self):
            self.f1()
            print(self.a)
    print(a)

f()  # 2
print(a)  # 5
</code></pre>
<p>Since <code>a</code> in example 2 was referenced in an adjacent <code>nonlocal</code> scope, it doesn't throw an error. </p>
</div>
<span class="comment-copy">Example 1 doesn't fail because <code>count</code> isn't in the immediately previous scope; it fails because it isn't found in any <i>nonglobal</i> scope. From the documentation: "The <code>nonlocal</code> statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope <i>excluding globals</i>." (emphasis mine)</span>
<span class="comment-copy">in #1 it throws because <code>count</code> is in the <b>global</b> scope, not because it is two scopes away, <code>nonlocal</code> works fine for closure-in-closure-in-closure(etc. etc.)</span>
<span class="comment-copy">Thanks for the clarification! The example given made me thing it was one scope previous.</span>
<span class="comment-copy">In example 2, in definition of method <code>f1</code>, <code>a</code> in <code>nonlocal a</code> doesn't refer to <code>C.a</code>, you need <code>C.a</code> instead of <code>a</code></span>
