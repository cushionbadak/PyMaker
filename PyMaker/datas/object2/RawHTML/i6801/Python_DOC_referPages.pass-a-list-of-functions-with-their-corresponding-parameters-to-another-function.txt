<div class="post-text" itemprop="text">
<p>I am struggling to pass a list of functions with a list of corresponding parameters. I also checked <a href="https://stackoverflow.com/questions/1496346/passing-a-list-of-kwargs">here</a>, but it wasn't very helpful. for example (a naive approach which doesn't work):</p>
<pre><code>def foo(data, functions_list, **kwarg):
    for func_i in functions_list:
        print func_i(data, **kwarg)

def func_1(data, par_1):
    return some_function_1(data, par_1)

def func_2(data, par_2_0, par_2_1):
    return some_function_2(data, par_2_0, par_2_1)

foo(data, [func_1, func_2], par_1='some_par', par_2_0=5, par_2_1=11)
</code></pre>
<p><strong>Importantly</strong>, <code>par_1</code> cannot be used in <code>func_2</code>, so each function consumes a unique set of parameters.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the function's name as the keyword arguments. When indexing <code>kwargs</code>, you'd use <code>func_i.__name__</code> as the key.</p>
<pre><code>def foo(data, function_list, **kwargs):
    for func_i in function_list:
        print(func_i(data, kwargs[func_i.__name__]))
</code></pre>
<p>And now,</p>
<pre><code>foo(data, [func_1, func_2], func_1='some_par', func_2=[5, 11])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer"><code>inspect.getargspec</code></a> (I assume you use Python 2, you shouldn't use that function in Python 3 because it has been deprecated) to find out which argument names a function has and build a new dictionary based on those:</p>
<pre><code>import inspect

def foo(data, functions_list, **kwargs):
    for func_i in functions_list:
        newkwargs = {name: kwargs[name] 
                     for name in inspect.getargspec(func_i).args 
                     if name in kwargs}
        print(func_i(data, **newkwargs))

def func_1(data, par_1):
    return data, par_1

def func_2(data, par_2_0, par_2_1):
    return data, par_2_0, par_2_1

&gt;&gt;&gt; data = 10
&gt;&gt;&gt; foo(data, [func_1, func_2], par_1='some_par', par_2_0=5, par_2_1=11)
(10, 'some_par')
(10, 5, 11)
</code></pre>
<p>But a better way would be to simply associate parameters with functions that doesn't rely on introspection.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to keep the <code>foo</code> function with that exact same declaration and you don't mind each function receiving the whole set of parameters you could do it like this:</p>
<p>You just need to add to each <code>'my_*'</code> function the <code>**kwargs</code> parameter.</p>
<pre><code>def foo(data, functions_list, **kwargs):
    for my_function in functions_list:
        print(my_function(data, **kwargs))


def my_sum(a, b, **kwargs):
    return a + b


def my_sub(a, c, **kwargs):
    return a - c


foo(0, [my_sum, my_sub], b=3, c=10)
</code></pre>
<p>Python automatically parses <code>kwargs</code> setting the <code>b and c</code> parameters where it has the value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another approach can be like this:</p>
<pre><code>def foo(data, function_list, **kwargs):
    function_dict = {
        "func_1": func_1,
        "func_2": func_2        
    }
    for func_i in function_list:
        print function_dict[func_i](data, **kwargs)

def func_1(data, **arg):
    filtered_argument = {key: value for key, value in arg.items() if key.startswith('par_1')}
    return list([data, filtered_argument])

def func_2(data, **arg):
    filtered_argument = {key: value for key, value in arg.items() if key.startswith('par_2_')}
    return list([data, filtered_argument])


data = [1,2,3]  
foo(data, ['func_1', 'func_2'], par_1='some_par', par_2_0=5, par_2_1=11)
</code></pre>
<p>Output:</p>
<pre><code>[[1, 2, 3], {'par_1': 'some_par'}]
[[1, 2, 3], {'par_2_0': 5, 'par_2_1': 11}]
</code></pre>
<p>I am sure that you can improvise your current code as it gets ugly in this way. </p>
</div>
<div class="post-text" itemprop="text">
<p>I like @COLDSPEED's approach, but want to present yet another solution. Pass always 3 values: function, args, keyword args:</p>
<p>Usage:</p>
<pre><code>foo(
    func_1, ('some_par',), {},
    func_2, (5, 11), {},
)
</code></pre>
<p>Implementation (Python3 syntax):</p>
<pre><code>def foo(*args3):
    while args3:
        func, args, kwargs, *args3 = args3
        func(*args, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An approach would be making the 3rd argument of <code>foo</code> a positional argument and pass in a list of args with functions list:</p>
<pre><code>def foo(data, functions_list, args):
    for func, arg in zip(functions_list, args):
        print(func(data, arg))


def func1(data, par_1):
    return 'func1 called with {}'.format(par_1)


def func2(data, par_2):
    return 'func2 called with {}'.format(par_2)

foo('some_data', [func1, func2],
    [
        {'par_1_1': 11, 'par_1_2': 12},
        {'par_2_1': 21, 'par_2_2': 22}
    ])
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> is used to map each function with the corresponding args.</p>
<p><strong>Output:</strong></p>
<pre><code>func1 called with {'par_1_1': 11, 'par_1_2': 12}
func2 called with {'par_2_1': 21, 'par_2_2': 22}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it something like that, "close" each parameters for function in a list item and then let "foo" split it backwards:</p>
<pre><code>def foo(data, functions_list, kwarg):
    for func_i, args in zip(functions_list, kwarg):
        func_i(data, **args)


def func_1(data, par_1):
    print("func_1 %s %s" % (data, par_1))


def func_2(data, par_2_0, par_2_1):
    print("func_2 %s "
          "%s %s" % (data, par_2_0, par_2_1))

data = "Some Data"

foo(data, [func_1, func_2], [{"par_1":'some_par'}, {"par_2_0":5, "par_2_1":11}])
</code></pre>
</div>
<span class="comment-copy">Each function takes only one argument or many?</span>
<span class="comment-copy">@ettanany, great question (see updated question). Any number (a list) of parameters.</span>
<span class="comment-copy">You have a typo in the code supplied. Line 1 you use **kwarg, line 3 you use **kwargs (note the addition of an 's' on line 3).</span>
<span class="comment-copy">Maybe I'm misunderstanding something, but this looks like a <i>terrible</i> idea to me. Why not properly pair the functions with their parameters, for example with <code>(function, args, kwargs)</code> tuples like <code>foo(data, [(func1, (), {"par_1": "some_par"}), (func2, (5, 11), {})])</code>?</span>
<span class="comment-copy">Can you give some background for what you are attempting to do? Right now, this only appears to attract gimmick-y solutions that may solve your specific requirement but will otherwise not improve your code quality because the initial situation is already odd. I don’t see why creating a wrapper function here wouldn’t work for example (e.g. <code>foo(data, foo_it(func_1, 'some_par'), foo_it(func_2, 5, 11))</code>). Where do those values come from, what are you trying to do?</span>
<span class="comment-copy">@COLDSPEED, wow, gonna try it.</span>
<span class="comment-copy">@ArnoldKlein Tried it with some dummy functions and this appears to work. But if you have multiple arguments for a function, please pass an iterable.</span>
<span class="comment-copy">@ArnoldKlein Also, note a couple of typos: <code>function_list/function_list</code>, <code>kwargs/kwarg</code>... make sure those are fixed.</span>
<span class="comment-copy">The problem with this method is that it does bring some extra work in case of several arguments shared with some but not all functions. The @Strinnityk solution is better in that regard.</span>
<span class="comment-copy">@NicolasDavid Yes but in addition to that flexibility, it imposes a tonne of constraints, such as variable names, and so on.</span>
<span class="comment-copy">in fact removing data from foo signature wood be even more coherent, it would then gives <code>foo([my_sum,my_sub], a=data, b=3, c=10)</code></span>
<span class="comment-copy">that's interesting! thanks for suggestion.</span>
