<div class="post-text" itemprop="text">
<p>A module holds a dictionary to keep track of itscontext, such as the names defined at some point of the execution. This dictionary can be accessed through <a href="https://docs.python.org/3/library/functions.html#vars" rel="noreferrer"><code>vars(module)</code></a> (or <code>module.__dict__</code>) if <code>module</code> was imported, or by a call to the <a href="https://docs.python.org/3/library/functions.html#locals" rel="noreferrer"><code>locals</code></a> built-in function in the module itself:</p>
<blockquote>
<p>Update and return a dictionary representing the current local symbol table.</p>
</blockquote>
<p>But I found myself a bit confused, when I tried accessing the locals dictionary from a function. The output of a script containing only the following is an empty dictionary:</p>
<pre><code>def list_locals():
    print(locals())

list_locals()
</code></pre>
<p>But on the other hand, if a script contains exclusively the following, the output is the expected dictionary, containing <code>__name__</code>, <code>__doc__</code> and the other module-level variables:</p>
<pre><code>print(locals())
</code></pre>
<p>So, when is the content of the locals dictionary set?
In addition, what does "update" mean in the definition of the <code>locals</code> function?</p>
</div>
<div class="post-text" itemprop="text">
<p>The namespace of a module is the <em>global</em> namespace, accessed through <a href="https://docs.python.org/3/library/functions.html#globals" rel="noreferrer"><code>globals()</code></a>. There is no separate locals namespace, so <code>locals()</code>, outside of functions, just returns the global namespace.</p>
<p>Only functions have a local namespace. Note that <code>locals()</code> is a one-way reflection of that namespace; the CPython implementation for functions is highly optimised and you can't add or alter local variables through the <code>locals()</code> dictionary. The dictionary returned by <code>locals()</code> is updated whenever the namespace has changed between calls to that function.</p>
<p>Note also that things like list / dict / set comprehensions, generator expressions and class bodies are in reality executed as functions too, albeit with different namespace rules. In such contexts <code>locals()</code> will also return the separate function local namespace.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you call <code>locals()</code> more than once during the same function call, it will return the same dictionary.</p>
<pre><code>&gt;&gt;&gt; def f():
...     d = locals()
...     assert 'd' not in d
...     locals()
...     assert 'd' in d
...     assert d is locals()
...     print(d)
... 
&gt;&gt;&gt; f()
{'d': {...}}
</code></pre>
<p>"Update" in this case means that the contents of this dictionary are updated to reflect the current scope of local variables that exist, but if you kept a reference to this dictionary then that dictionary will still be used.</p>
<p>Notice also that the locals dictionary doesn't contain a key for <code>'f'</code>, even though you could have accessed it during the course of the function. In case it's not obvious, that's a global, not a local.</p>
</div>
<span class="comment-copy">At the module level try <code>print(locals() is globals())</code></span>
<span class="comment-copy">@Chris_Rands Yep, that was part of my confusion.</span>
<span class="comment-copy">As usual, consice and clear, thanks!</span>
<span class="comment-copy">Thanks for that explanation about the meaning of "update". Although I obviously mixed up <code>locals</code> and <code>globals</code>, I'd say that the documentation is somewhat evasive about that behaviour. Thanks again for the clarification.</span>
