<div class="post-text" itemprop="text">
<pre><code>var_a = 8
var_b = 3

var_c = "hello my name is:",var_a,"and",var_b,"bye"
print(var_c)
</code></pre>
<p>When I run the program var_c gets printed out like this: ('hello my name is:', 8, 'and', 3, 'bye') but all the brackets etc get printed as well, why is this and is there a way to get rid of those symbols?</p>
<p>If I run the program like this:</p>
<pre><code>print("hello my name is:",var_a,"and",var_b,"bye")
</code></pre>
<p>I don't have that problem</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.6+ you can use the new f-strings (<a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="noreferrer">formatted string literals</a>):</p>
<pre><code>var_c = f"hello my name is: {var_a} and {var_b}, bye"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">format</a> your string to get your expected string output.</p>
<pre><code>var_c = "hello my name is: {} and {}, bye".format(var_a, var_b)
</code></pre>
<p>As commented, your existing output is due to the variable being returned as a tuple, whereas you want it as one string.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>var_c</code> is actually a tuple, so <code>print</code> interprets it like that and you get its representation printed.</p>
<pre><code>var_a = 8
var_b = 3
var_c = "hello my name is:", var_a, "and", var_b, "bye"
</code></pre>
<p>but you could just tell <code>print</code> to use the tuple as arguments with <code>*</code></p>
<pre><code>print(*var_c)
</code></pre>
<p>result:</p>
<pre><code>hello my name is: 8 and 3 bye
</code></pre>
<p>(of course this is theorical, it's better to use <code>str.format</code> as other answers said)</p>
</div>
<div class="post-text" itemprop="text">
<p>You should create var_c as a string, like this</p>
<pre><code>var_c = "hello my name is: %s and %s bye" % (var_a, var_b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>var_c = "hello my name is:",var_a,"and",var_b,"bye"
</code></pre>
<p>with this line, you are making var_c as tuple... to make it string make it like</p>
<pre><code>var_d = "hello my name is:%s and %s bye" % (var_a,var_b)
print(var_d)
</code></pre>
<p>and it will output</p>
<pre><code>hello my name is:8 and 3 bye
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your program is creating a tuple and you print the tuple:</p>
<pre><code>var_a = 8
var_b = 3

var_c = "hello my name is:", var_a, "and", var_b, "bye"
print(var_c)
</code></pre>
<p>output:</p>
<pre><code>('hello my name is:', 8, 'and', 3, 'bye') 
</code></pre>
<p>Alternatively print like this:</p>
<pre><code>for item in var_c:
    print(item+' ', end='')
</code></pre>
<p>output:</p>
<pre><code>hello my name is: 8 and 3 bye
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because you are using syntax to create a tuple!</p>
<pre><code>tup = "a", "b", "c", "d"
</code></pre>
<p>Refer this : <a href="https://www.tutorialspoint.com/python/python_tuples.htm" rel="nofollow noreferrer">https://www.tutorialspoint.com/python/python_tuples.htm</a>.</p>
<p>If you just want to concatenate these you can write:</p>
<pre><code>var_c = "hello my name is: " + str(var_a) + " and " + str(var_b) + " bye"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>var_a = 8
var_b = 3

var_c = "hello my name is:", var_a, "and", var_b, "bye"
print(var_c)
</code></pre>
<p>output:</p>
<pre><code>('hello my name is:', 8, 'and', 3, 'bye') 
</code></pre>
<p>Alternatively print like this:</p>
<pre><code>for item in var_c:
    print(item+' ', end='')
</code></pre>
<p>output:</p>
<pre><code>hello my name is: 8 and 3 bye
</code></pre>
</div>
<span class="comment-copy">Yes, that is how it works. <code>var_c</code> is a tuple.</span>
<span class="comment-copy">The quotes aren't balanced in the second version.</span>
<span class="comment-copy">Variables are not just manipulating the text your program was written in, it doesn't literally move the value assigned to it and evaluate with different context. The commas on the var_c assignment line create a tuple and the commas on the print line separate function arguments to the print function. Print (by default) prints all arguments on one line with a space in between. A tuple's string representation is the elements separated by commas wrapped by parens. What you want is string concatenation or string formatting.</span>
<span class="comment-copy">Did you just copy/paste @quamrana's answer ?!</span>
<span class="comment-copy">Please type code as <code>code-type</code>. You can make your post easy to see and explain using <code>tag</code>s.</span>
