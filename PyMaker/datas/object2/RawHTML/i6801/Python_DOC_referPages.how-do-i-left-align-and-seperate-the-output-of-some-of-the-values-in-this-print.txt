<div class="post-text" itemprop="text">
<p>I currently have the following code which produces the output shown below:</p>
<pre><code>MENU = [["Hawaiian", 8.50], ["Pepperoni", 8.50], ["Veg Trio", 8.50], ["Simply Cheese", 8.50], ["Meat Lovers", 8.50], ["Ham &amp; Cheese", 8.50], ["BBQ Italian Sausage", 8.50],
    ["Loaded Supreme", 13.50], ["Chicken Fajita", 13.50], ["Apricot Chicken", 13.50], ["Garlic Prawn", 13.50], ["Chicken Cranberry", 13.50]]

print("\nWe sell the following pizzas.")
for i, pizza in enumerate(MENU):
    print("{}: {}: ${:.2f}".format(str(i+1).zfill(2), MENU[i][0], MENU[i][1]))
</code></pre>
<p><em>Output</em>:</p>
<p><img alt="Output of this code" src="https://i.stack.imgur.com/3rCW5.jpg"/></p>
<p>How do I make it so that all of the prices are in their own "column" of sorts and are left aligned?  I have tried some methods in answers posted here to similar questions but I can't achieve what I'm wanting to achieve.</p>
<p>I've tried using methods I've found on here, but all that they do is extend the gap between the colon and the price by the same amount of each individual column, which of course won't make them all line up.</p>
<p>I'm only just learning, so any help would be greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can look for the Pizza with the longest name and then fill in spaces for the shorter names between the name and the price:</p>
<pre><code>MENU = [["Hawaiian", 8.50], ["Pepperoni", 8.50], ["Veg Trio", 8.50], ["Simply Cheese", 8.50], ["Meat Lovers", 8.50], ["Ham &amp; Cheese", 8.50], ["BBQ Italian Sausage", 8.50],
    ["Loaded Supreme", 13.50], ["Chicken Fajita", 13.50], ["Apricot Chicken", 13.50], ["Garlic Prawn", 13.50], ["Chicken Cranberry", 13.50]]

# Get a list of the lengths of the pizza names
menu_name_lengths = [len(k[0]) for k in MENU]

# Get the length of the longest name
max_length = max(menu_name_lengths)

# (max_length-len(pizza[0])) gives the number of spaces to fill in the gap
for i, pizza in enumerate(MENU):
    print("{} {}:{} ${:.2f}".format(str(i+1).zfill(2), pizza[0], " "*(max_length-len(pizza[0])), pizza[1]))
</code></pre>
<p>prints out:</p>
<pre><code>01 Hawaiian:            $8.50
02 Pepperoni:           $8.50
03 Veg Trio:            $8.50
04 Simply Cheese:       $8.50
05 Meat Lovers:         $8.50
06 Ham &amp; Cheese:        $8.50
07 BBQ Italian Sausage: $8.50
08 Loaded Supreme:      $13.50
09 Chicken Fajita:      $13.50
10 Apricot Chicken:     $13.50
11 Garlic Prawn:        $13.50
12 Chicken Cranberry:   $13.50
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use <code>str.format</code> to choose the spacing between each element of the line, which will create the columns you are looking for. The <code>{:&gt;15}</code> means tells the string to be displayed 15 spaces to the right. However, the right column will still not be aligned but I'm working on a solution for this, will edit this answer once I find it, but you can try this in the meatime.</p>
<pre><code>MENU = [["Hawaiian", 8.50], ["Pepperoni", 8.50], ["Veg Trio", 8.50], ["Simply Cheese", 8.50], ["Meat Lovers", 8.50], ["Ham &amp; Cheese", 8.50], ["BBQ Italian Sausage", 8.50],
    ["Loaded Supreme", 13.50], ["Chicken Fajita", 13.50], ["Apricot Chicken", 13.50], ["Garlic Prawn", 13.50], ["Chicken Cranberry", 13.50]]

print("\nWe sell the following pizzas.")
for i, pizza in enumerate(MENU):
    line = '{:&gt;12}  {:&gt;5}  {:&gt;15}'.format(str(i+1).zfill(2), MENU[i][0], MENU[i][1])
    print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of changes you can make to simplify things a bit.</p>
<p>Using a similar approach to @Igle, finding the maximum length is probably the best way forward but using the built in padding rather than manually adding spaces is clearer.</p>
<p>Pre Python 3.6</p>
<pre><code>MENU = [["Hawaiian", 8.50],
        ["Pepperoni", 8.50],
        ["Veg Trio", 8.50],
        ["Simply Cheese", 8.50],
        ["Meat Lovers", 8.50],
        ["Ham &amp; Cheese", 8.50],
        ["BBQ Italian Sausage", 8.50],
        ["Loaded Supreme", 13.50],
        ["Chicken Fajita", 13.50],
        ["Apricot Chicken", 13.50],
        ["Garlic Prawn", 13.50],
        ["Chicken Cranberry", 13.50]
    ]

print("\nWe sell the following pizzas.")

# Add 2 is optional but it makes the column a bit clearer.
mlen = max(len(p[0]) for p in MENU) + 2

for i, pizza in enumerate(MENU, 1): # Include the 1 to remove the +1 in the rest of the code
    print("{{:02d}}: {{:&lt;{}}} ${{:&gt;5.2f}}"
            .format(mlen) # Use multiple formats so that the padding is dynamic
            .format(i, pizza[0]+':', pizza[1]) # Use pizza rather than MENU[i]
    )
</code></pre>
<p>For Python3.6 with fstrings, everything gets a bit simpler as you can add dynamic formatting directly rather than using two steps</p>
<pre><code># ... same set up as above
for i, pizza in enumerate(MENU, 1):
    print(f"{i:02d}: {pizza[0]+':':&lt;{mlen}} ${pizza[1]:&gt;5.2f}")
</code></pre>
</div>
<span class="comment-copy">This will be quite painful and annoying to do with your print statement. But you can code an algorithm that calculates how much spaces you would need after the name so they can get aligned.</span>
<span class="comment-copy">Is there a way that I could modify my print statement so that it's easier to do?</span>
<span class="comment-copy">I dont think so, but even if there was you still have to code it yourself which brings you back to making an algorithm calculate how many spaces to insert after the name so the prices get aligned.</span>
<span class="comment-copy">Which python version are you using?</span>
<span class="comment-copy">Thank you! Worked perfectly :)</span>
<span class="comment-copy">It is a list comprehension, that iterates over every element k in the list MENU and takes the length of the first element of k and puts this into a new list called menu_name_lengths. See <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list-comprehensions</a> from the Python docs.</span>
<span class="comment-copy">Thanks for your help :)</span>
<span class="comment-copy">No problem man, I'm keen to find a working solution myself. As you can see on the output the spacing is constant between each element of the line, so I'm trying to find a way to make the last spacing "{:&gt;15}" change depending on the length of the previous elements</span>
