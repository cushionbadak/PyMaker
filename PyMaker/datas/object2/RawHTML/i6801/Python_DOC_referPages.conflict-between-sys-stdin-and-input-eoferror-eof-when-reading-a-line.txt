<div class="post-text" itemprop="text">
<p>I can't get the following script to work without throwing an EOFError exception:</p>
<pre><code>#!/usr/bin/env python3

import json
import sys

# usage:
# echo '[{"testname": "testval"}]' | python3 test.py

myjson = json.load(sys.stdin)
print(json.dumps(myjson))

answer = input("&gt; ")  # BUG: EOFError: EOF when reading a line
print(answer)
</code></pre>
<p>I've read this question which seems to be related: <a href="https://stackoverflow.com/questions/35018268/python-stdin-user-input-issue">Python STDIN User Input Issue</a></p>
<p>I think that tells me I need to clear the stdin buffer ? But I'm not sure how because <code>print(sys.stdin.readline())</code> just outputs a newline and the EOFError is still there.</p>
<p>I also tried using the <code>sys.stdin.flush()</code> method (found in this question: <a href="https://stackoverflow.com/questions/10019456/usage-of-sys-stdout-flush-method#10019605">Usage of sys.stdout.flush() method</a>) although I still don't understand what it does because I couldn't find it in the official documentation (3.6), the closest I found was this but it doesn't mention flush: <a href="https://docs.python.org/3/library/sys.html" rel="nofollow noreferrer">https://docs.python.org/3/library/sys.html</a></p>
<p>Please bear in mind that I'm not a programmer nor do I have a CS education or background. I just write scripts to automate parts of my, otherwise non-technical, work. So if you know any good beginner ressource on how stdin/stdout works in the shell with Python please do tell.</p>
</div>
<div class="post-text" itemprop="text">
<p>By piping input, Python is opening sys.stdin as a FIFO.  Otherwise, Python will open sys.stdin to <code>/dev/tty</code> or equivalent.</p>
<p>You can verify this with:</p>
<pre><code>import os,sys,stat
print("isatty():", sys.stdin.isatty())
print("isfifo():", stat.S_ISFIFO(os.fstat(0).st_mode))
</code></pre>
<p>Run this twice, once piping in data, once not.</p>
<p>I get:</p>
<pre><code>$ echo "Test" | ./test2.py
isatty(): False
isfifo(): True

$ ./test2.py
isatty(): True
isfifo(): False
</code></pre>
<p>So your EOF occurs because the FIFO sys.stdin is opened to <em>is</em> empty.</p>
<p>You can reopen sys.stdin to <code>/dev/tty</code>, however.</p>
<pre><code>j = json.load(sys.stdin)
print(j)

sys.stdin = open("/dev/tty")

answer = input("&gt; ")
print(answer)
</code></pre>
<p>Which would work fine:</p>
<pre><code>$ echo '{"key":"val"}' | python3 ./testjson.py
{'key': 'val'}
&gt; testing
testing
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't really "clear" the standard input (stdin).  It is there, available for reading and many input functions read until end of file (EOF, or the end of standard input).  The "flush" operation is for standard output.</p>
<p>In your case, the <code>json.load(sys.stdin)</code> operation will <strong>read the entire standard input</strong> (and then it will be closed).  At that point, no more input is available. </p>
<p>If you both want to read input data AND have interactive input from the user, consider reading your data from a file and using standard input only for interactive user input.</p>
</div>
<span class="comment-copy"><code>json.load(sys.stdin)</code> consumed all the data available on stdin. There's nothing left to read, hence EOF.</span>
<span class="comment-copy">Haha I should've put the "not a programmer" part in bold, there's a lot of things I'll have to research to understand what is happening but it works perfectly. Thanks a lot for the explanation and solution!</span>
<span class="comment-copy">Please don't worry about not getting this (really).  This sort of thing <i>rarely</i> comes up and when it does is incredibly confusing.</span>
<span class="comment-copy">Thank you for this thourough explanation! I'm writing a script that needs to be executed after a third-party program that exports a JSON string to stdout. And I can't change how this third-party program operates (by making it write the JSON to a file for example). But I also need the user to manually accept some JSON dicts and discard others. Is there no way to do something like that in Python?</span>
<span class="comment-copy">Perhaps you pipe the JSON output from the third-party script to a temporary file, and then give that file to your program.  You generally can't use standard input to BOTH read a file and read user input, in Python or any language.</span>
