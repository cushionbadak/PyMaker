<div class="post-text" itemprop="text">
<p>The script I am writing should exit back to the shell prompt with a helpful message if the data to be processed is not exactly right.  The user should fix the problems flagged until the script is happy and no longer exits with error messages.  I am developing the script with TTD, so I write a <code>pytest</code> test before I write the function.</p>
<p>The <a href="https://stackoverflow.com/questions/73663/terminating-a-python-script">most heavily up-voted answer here</a> suggests that scripts be edited by calling <code>sys.exit</code> or raising <code>SystemExit</code>.</p>
<p>The function:</p>
<pre><code>def istext(file_to_test):
    try:
        open(file_to_test).read(512)
    except UnicodeDecodeError:
        sys.exit('File {} must be encoded in UTF-8 (Unicode); try converting.'.format(file_to_test))
</code></pre>
<p>passes this test (where <code>_non-text.png</code> is a PNG file, i.e., not encoded in UTF-8):</p>
<pre><code>def test_istext():
    with pytest.raises(SystemExit):
        istext('_non-text.png')
</code></pre>
<p>However, the script continues to run, and statements placed after the <code>try/except</code> block execute.</p>
<p>I want the script to completely exit every time so that the user can debug the data until it is correct, and the script will do what it is supposed to do (which is to process a directory full of UTF-8 text files, not PNG, JPG, PPTX... files).</p>
<p><strong>Also tried:</strong></p>
<p>The following also passes the test above by raising an exception that is a sub-class of <code>SystemExit</code>, but it also does not exit the script:</p>
<pre><code>def istext(file_to_test):
    class NotUTF8Error(SystemExit): pass
    try:
        open(file_to_test).read(512)
    except UnicodeDecodeError:
        raise NotUTF8Error('File {} must be UTF-8.'.format(file_to_test))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>raise Exception from exception</code> syntax:</p>
<pre><code>class MyException(SystemExit):
    pass


def istext(file_to_test):
    try:
        open(file_to_test).read(512)
    except UnicodeDecodeError as exception:
        raise MyException(f'File {file_to_test} must be encoded in UTF-8 (Unicode); try converting.') \
            from exception 
</code></pre>
<p>I this case you doesn't change original error message and add your own message.</p>
</div>
<div class="post-text" itemprop="text">
<p>The try...except block is for catching an error and handling it internally. What you want to do is to re-raise the error. </p>
<pre><code>def istext(file_to_test):
try:
    open(file_to_test).read(512)
except UnicodeDecodeError:
    print(('File {} must be encoded in UTF-8 (Unicode); try converting.'.format(file_to_test)))
    raise
</code></pre>
<p>This will print your message, then automatically re-raise the error you've caught.</p>
<p>Instead of just re-raising the old error, you might want to change the error type as well. For this case, you specify raise further, e.g.:</p>
<pre><code>raise NameError('I'm the shown error message')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You problem is not how to exit a program (<code>sys.exit()</code> works fine). You problem is that your test scenario is not raising a <code>UnicodeDecodeError</code>.</p>
<p>Here's a simplified version of your example. It works as expected:</p>
<pre><code>import pytest
import sys

def foo(n):
    try:
        1/n
    except ZeroDivisionError as e:
        sys.exit('blah')

def test_foo():
    # Assertion passes.
    with pytest.raises(SystemExit):
        foo(0)
    # Assertion fails: "DID NOT RAISE &lt;type 'exceptions.SystemExit'&gt;"
    with pytest.raises(SystemExit):
        foo(9)
</code></pre>
<p>Add some diagnostic printing to your code to learn more. For example:</p>
<pre><code>def istext(file_to_test):
    try:
        content = open(file_to_test).read(512)
        # If you see this, no error occurred. Maybe your source
        # file needs different content to trigger UnicodeDecodeError.
        print('CONTENT len()', len(content))
    except UnicodeDecodeError:
        sys.exit('blah')
    except Exception as e:
        # Maybe some other type of error should also be handled?
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the end, what worked is similar to what @ADR proposed, with one difference: I was not able to get the formatted string syntax shown above to work correctly (<code>f'File {file_to_test} must...'</code>), nor could I find documentation of the <code>f</code> prefix for strings.</p>
<p>My slightly less elegant solution, then, for the (renamed) function:</p>
<pre><code>def is_utf8(file):
    class NotUTF8Error(SystemExit): pass
    try:
        open(file).read(512)
    except UnicodeDecodeError as e:
        raise NotUTF8Error('File {} not UTF-8: convert or delete, then retry.'.format(file)) from e
</code></pre>
<p>passes the pytest:</p>
<pre><code>def test_is_utf81():
    with pytest.raises(SystemExit):
        is_utf8('/Users/tbaker/github/tombaker/mklists/mklists/_non-text.png')
</code></pre>
</div>
<span class="comment-copy">Hmm, I could not get this example to work, even without the error message.</span>
<span class="comment-copy">After declaring the class <code>class NotUTF8Error(SystemExit): pass</code>, and after <code>except UnicodeDecodeError as exception:</code>, <code>raise NotUTF8Error from exception</code> gets a <code>SyntaxError</code>.</span>
<span class="comment-copy">Never mind - I got this to work, only now the pytest is failing with <code>NameError: name 'NotUTF8Error' is not defined</code>.</span>
<span class="comment-copy">Okay - even the pytest works now, but with <code>with pytest.raises(SystemExit)</code> and not, as I had expected with <code>with pytest.raises(NotUTF8Error)</code> - even though <code>NotUTF8Error</code> was declared with <code>class NotUTF8Error(SystemExit): pass</code>.  The test fails with <code>NameError: name 'NotUTF8Error' is not defined</code>.  Though I do not quite understand why, it all works now!</span>
<span class="comment-copy">I would like to upvote this answer, but I was not able to get it to work with the <code>'f'File {file_to_test}...'</code> syntax - only with <code>'File {}...'.format(file)</code>, and I could not find any documentation for strings prefixed with <code>f</code>.</span>
<span class="comment-copy">My first instinct had been to create a custom exception along the lines of <code>class NotUTF8Error(SystemExit):</code>.  So you are suggesting that after <code>except UnicodeDecodeError:</code>  I would <code>raise NotUTF8Error("Some message")</code>?</span>
<span class="comment-copy">Exactly. Or you specify in the definition of your error class already what the text is going to say, so that no re-raising is necessary.</span>
<span class="comment-copy">I tried the second suggestion (see amended question above), but like my original attempt, it passes the pytest but does not exit the script.  The first suggestion (re-raising <code>UnicodeDecodeError</code> after printing the message) passes a modified pytest but without exiting the script.</span>
<span class="comment-copy">In that case, it is most likely that either Python automatically detects the encoding as Unicode, or that the symbol you copied into it isn't actually unicode. To force Python to use a specific encoding in the open command, use: open("Filename",encoding="UTF-8") ; Now, to make sure your file has unicode in it, copy this symbol into it: âŽŒ</span>
<span class="comment-copy">Thank you, @Sudix, that's an interesting suggestion.  In this case, however, my intention is to ensure that every visible file in the working directory is a text file.  But since "text file" is hard to test for in a UTF-8 environment, I want to use the fact that <code>open(file).read(512)</code> will raise an exception for PNG, JPG, PPTX, DOCX... files as a simple test.</span>
<span class="comment-copy">This helpfully clarifies that pytest is not testing whether <code>1/0</code> raises <code>ZeroDivisionError</code>, but whether <code>sys.exit</code> raises <code>SystemExit</code>.  Thanks!</span>
<span class="comment-copy">Are you seriously? You don't like my solution anymore because I use one simple feature of Python 3.6? <a href="https://docs.python.org/3/whatsnew/3.6.html" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.6.html</a> <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">python.org/dev/peps/pep-0498</a></span>
<span class="comment-copy">@ADR thank you for the reference - My apologies - I looked for that feature but didn't find it; it didn't work for me because I have Python 3.5.2.  I'm removing the  acceptance and accepting your answer!</span>
