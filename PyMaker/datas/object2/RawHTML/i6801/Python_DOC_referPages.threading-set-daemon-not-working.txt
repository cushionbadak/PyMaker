<div class="post-text" itemprop="text">
<p>A very simple script.</p>
<p>test.py</p>
<pre><code>import temp
temp.start()
</code></pre>
<p>temp.py</p>
<pre><code>import threading, time
f=open("output.txt","w")
def temp():
    for i in range(5):
        f.write(str(i))
        time.sleep(5)
    f.close()
def start():
    t=threading.Thread(target=temp)
    t.setDaemon(True)
    t.start()
</code></pre>
<p>I expected Daemon thread to complete as main process <code>test.py</code> exits immediately.But the <code>daemon</code> thread exits with the main and does not act like a <code>daemon</code>.Am i missing something basic here?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is described in some detail in the python documentation at </p>
<p><a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html</a></p>
<p>The most relevant bits are:</p>
<blockquote>
<p>A thread can be flagged as a “daemon thread”. The significance of this
  flag is that the entire Python program exits when only daemon threads
  are left.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Daemon threads are abruptly stopped at shutdown. Their resources (such
  as open files, database transactions, etc.) may not be released
  properly.</p>
</blockquote>
<p>The overloading of the term 'daemon' and the negation contortions can make this a bit confusing but it what it boils down to is: A python program exits <em>only</em> after all of its threads complete, except for daemon threads which are simply terminated if no other non-daemon threads are left. In your case, that means the program exits killing your daemon thread before it has a chance to do anything (or, conversely, does not exit until your thread completes, if you <code>setDaemon(false)</code>). </p>
</div>
<span class="comment-copy">Why would the thread 'complete'? The docs seem pretty clear "Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signalling mechanism such as an Event."</span>
<span class="comment-copy">@martineau then the main process  waits for thread to complete</span>
<span class="comment-copy">no, it's the shutdown of the program. 'daemon thread' basically means 'don't take this thread into account when shutting down the python runtime'. It just gets tossed.</span>
<span class="comment-copy">No, again, I refer you to the docs which you should review at <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">docs.python.org/3/library/threading.html</a>  "A thread can be flagged as a “daemon thread”. The significance of this flag is that the entire Python program exits when only daemon threads are left. " If you have a non-daemon thread left, the program doesn't exit. It exits only when daemon (or no) threads are left.</span>
<span class="comment-copy">Since the docs say "...the daemonic property is inherited from the current thread" there's no need for the main thread to call <code>setDaemon(false)</code> in the OP's case. Besides <code>setDaemon()</code> is part of the <b>Old</b> getter/setter API, so just setting the property directly would the "modern" way to do it.</span>
<span class="comment-copy">@martineau generally, there is not but that's what the poster did so that's what the answer contains (I just noticed the poster deleted the comments with that bit but that's why we're going on about <code>setDaemon</code>)</span>
