<div class="post-text" itemprop="text">
<p>I have linux command like below:</p>
<pre><code> find /data/*/hr/ -printf "%f: %p: %u: %g %m (%M) \n"
</code></pre>
<p>How do i use in python subprocess check_output</p>
<p>I have tried like below but not working</p>
<pre><code> file_name = "/data/*/%s/" % (filename)
 get_perm = check_output(["find", file_name, "-printf", '\"%f: %p: %u: %g %m (%M) \n\"'])
</code></pre>
<p>Error I am getting:</p>
<pre class="lang-html prettyprint-override"><code>find: ‘/data/*/hr/’: No such file or directory
Traceback (most recent call last):
  File "handover.py", line 90, in &lt;module&gt;
    get_perm = check_output(["find", file_name, "-printf", '\"%f: %p: %u: %g %m (%M) \n\"'])
  File "/usr/lib64/python2.7/subprocess.py", line 573, in check_output
    raise CalledProcessError(retcode, cmd, output=output)
subprocess.CalledProcessError: Command '['find', '/data/*/hr/', '-printf', '"%f: %p: %u: %g %m (%M) \n"']' returned non-zero exit status 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Finally,</p>
<p>I found below method </p>
<pre><code>cmd = "find /data/*/{}/* -printf \"%f:%p:%u:%g:%m\n\"".format(filename)
info = subprocess.Popen(cmd,stdout=subprocess.PIPE,shell=True)
print info.stdout.read()
</code></pre>
<p>This solves my problem </p>
</div>
<div class="post-text" itemprop="text">
<p>Your shell will expand the <code>*</code> in <code>/data/*/hr/</code> when you call on the command line. Calling the function directly via <code>check_output</code> causes find to look for literally the directory <code>/data/*/hr/</code>. You could use the <code>glob</code> module to expand the path before passing to <code>find</code>:</p>
<pre><code>import glob

file_name = "/data/*/%s/" % (filename)
get_perm = check_output(["find"] + glob.glob(file_name) + ["-printf", '\"%f: %p: %u: %g %m (%M) \n\"'])
</code></pre>
<p><a href="https://docs.python.org/2/library/glob.html#glob.glob" rel="nofollow noreferrer"><code>glob.glob</code></a> simply produces an array of path names which match the given expression by expanding any <code>*</code>s and some other special characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are getting this error because the specified file does not exist. If you run the command directly in a shell, you will get the same response.</p>
<p>For example, the following works as expected:</p>
<pre><code>import subprocess
import os

file_name = os.path.join(os.getcwd(), 'test.txt')
with open(file_name, 'w') as f:
    f.write('hello world')

get_perm = subprocess.check_output([
    "find",
     file_name,
     "-printf",
    '"%f: %p: %u: %g %m (%M) \n"'
    ], shell=True)

print(get_perm)
os.remove(file_name)
</code></pre>
<p>According to the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer" title="docs">docs</a>:</p>
<blockquote>
<p>If the return code [from subprocess.check_output]  was non-zero it raises a CalledProcessError. The CalledProcessError object will have the return code in the returncode attribute and any output in the output attribute.</p>
</blockquote>
<p>I recommend you wrap your check_output call in a try..except, and catch the CalledProcessError.</p>
<p>Alternatively, if you really don't want to deal with the exception, you could instead execute the command:</p>
<p><code>x=$(find ~/data/*/hr/ -printf "%f: %p: %u: %g %m (%M) \n" 2&gt;/dev/null || true) &amp;&amp; echo $x</code></p>
<p>This will never return nonzero and will only ever contain output if the file exists.</p>
<p><strong>Edit</strong>
As Michael pointed out, the '*' is not getting expanded. However, if you set <code>shell=True</code>, it will. Try modifying your command as follows:</p>
<pre><code> file_name = "/data/*/%s/" % (filename)
 get_perm = check_output(["find", file_name, "-printf", '"%f: %p: %u: %g %m (%M) \n"'], shell=True)
</code></pre>
</div>
<span class="comment-copy">You're missing a comma after <code>-printf</code></span>
<span class="comment-copy">Do you get any output? Do you get an error (i.e. a <code>CalledProcessError</code>?). If it dumped because it didn't like the <code>-printf"%f: %p:...</code> argument, it should have raised something</span>
<span class="comment-copy">Python is also translating <code>\n</code> in the string into a literal newline, which might be strange when <code>find</code> gets it. You can also avoid escaping <code>"</code> chars by using <code>'</code> chars to wrap the string literal in.</span>
<span class="comment-copy">Edited Post and provide output</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4760215/running-shell-command-from-python-and-capturing-the-output">Running shell command from Python and capturing the output</a></span>
<span class="comment-copy">Hi Michael, It works fine.. But problem is filename "/data/*/fin/" . If fin does not exist. It will list other values. If fin does not exit. I  expect to get no such file or directory error</span>
<span class="comment-copy">@gopinara It will list other files because you have a trailing slash, which the <code>find</code> command interprets as you indicating you want to list all of the files/directories contained within /fin/. Try removing the trailing slash. You can also specify a type to find to limit the results to only files or directories, like, <code>find /data/*/fin -type f</code>. Also, the first argument to find is usually the directory which you want to search within for a file or directory. Maybe you want something like <code>find /data/*/fin -type f -name your_file_name.ext</code></span>
<span class="comment-copy">I tried removing slash and adding -type d..same result</span>
<span class="comment-copy">You may just want to check if <code>glob.glob(file_name)</code> produces an empty array and if so, don't run the command at all.</span>
<span class="comment-copy">While it's true that the file isn't found, the problem is likely that the <code>*</code> in the path should be expanded.</span>
<span class="comment-copy">@MichaelMior Good catch. If you set <code>shell=True</code>, it will expand that the splat.</span>
<span class="comment-copy">You're right. Adding <code>shell=True</code> is an easy solution :)</span>
