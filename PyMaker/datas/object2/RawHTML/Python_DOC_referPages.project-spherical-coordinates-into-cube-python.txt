<div class="post-text" itemprop="text">
<p>Given a sphere radius of 1 and center at (0,0,0,), I have a list of xyz points in spherical coordinates of the form:</p>
<pre><code>[-0.31828382 -0.6678262   0.67283251] # between -1 and 1
</code></pre>
<p>what would be the way to get their projected coordinates on a containing cube of same size?</p>
<p>Here is an example of generating the points:</p>
<pre><code>from matplotlib import colors
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import matplotlib.pyplot as plt
from scipy.spatial import SphericalVoronoi
from mpl_toolkits.mplot3d import proj3d
import random
import math
import numpy as np
#
def new_positions_spherical_coordinates(cell_num,radius):
    phi = random.uniform(0,2*math.pi)
    costheta = random.uniform(-1,1)
    theta = np.arccos(costheta)
    x = radius * np.sin(theta) * np.cos(phi)
    y = radius * np.sin(theta) * np.sin(phi)
    z = radius * np.cos(theta)
    return [x,y,z]
#
def generateCellsOnSphere(num_cells,radius):
    list_of_cells = []
    for i in range(num_cells):
        new_coords = new_positions_spherical_coordinates(num_cells,radius)
        list_of_cells.append(new_coords)
    return list_of_cells
#
center = np.array([0, 0, 0])
radius = 1
cells = generateCellsOnSphere(num_cells,radius)
points = np.array(cells)
# calculate spherical Voronoi diagram
sv = SphericalVoronoi(points, radius, center)
sv.sort_vertices_of_regions()

# plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')  
for region in sv.regions:
    random_color = colors.rgb2hex(np.random.rand(3))
    polygon = Poly3DCollection([sv.vertices[region]])
    polygon.set_color(random_color)
    ax.add_collection3d(polygon)
ax.set_aspect('equal')
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/EYg0Y.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/EYg0Y.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to project this vector until one of the components first intercepts the cube boundary.  Since your boundaries are -1 and +1, this is simple.</p>
<p>The component with the largest magnitude is the third one, 0.672...
Divide each component by that magnitude, and you have your interception point:</p>
<pre><code>[-0.31828382, -0.6678262, 0.67283251]
[-0.47305060, -0.9925594, 1.0]
</code></pre>
<p>Can you take it from there?</p>
</div>
<span class="comment-copy">I don't see how the added code enhances the question.  The method of generating the points doesn't affect the mathematical transformation.</span>
<span class="comment-copy">Thanks for your answer. I guess then the points coordinates would need to be transformed again to cartesian coordinates? I have updated my question with a bit more details on how I am creating the points</span>
<span class="comment-copy">I don't understand the problem; [x, y, z] coordinates <i>are</i> Cartesian.</span>
