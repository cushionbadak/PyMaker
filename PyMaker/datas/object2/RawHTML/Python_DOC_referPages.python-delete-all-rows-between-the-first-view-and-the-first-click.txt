<div class="post-text" itemprop="text">
<p>So I've been trying an failing and am hoping for some help. What I want to do is</p>
<ul>
<li>Group by users and sort by time stamp (which is the way the dataframe belowis set up)</li>
<li>Now I want to take every view prior to the first click, and group it into a single event with the earliest timestamp

<ul>
<li>Or alternatively, delete everything between the first view and the first click</li>
</ul></li>
<li>If they have no clicks, and only views, all rows should be flattened into a single row</li>
</ul>
<p>For some context, we are collecting data but due to an error in how views are counted, every new session creates a large number of extra views in the beginning of the session. </p>
<p>So for this reason, we want to get rid of all views before a click, except the very first view. If there is no click for a particular user, then the only thing remaining should be the very first view. After the first click though, views are collected correctly, so we want to leave these be.</p>
<p>So if the input is the following (using integers for timestamp to make it easier)</p>
<p>import pandas as pd</p>
<pre><code>in = {'id': [123, 123, 123, 123, 234, 234,234, 234, 234, 234, 456, 456, 456],
         'activity': ['view','view','click','click','view','view','view','click', 'view', 'click', 'view', 'view', 'view'] ,
         'timestamp': [1, 2,3,4,1,2,3,4,5,6,1,2,3]}

pd.DataFrame(in)
</code></pre>
<p>The output should be </p>
<pre><code>out = {'id': [123,  123, 123, 234, 234, 234, 234, 456],
     'activity': ['view','click','click','view','click','view', 'click', 'view'] ,
     'timestamp': [1, 3,4,1,4,5,6,1,]}

pd.DataFrame(out)
</code></pre>
<p>If anyone has any ideas how to go about this it would be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>Follow below steps </p>
<pre><code>s1=df.activity.eq('view').groupby(df['id']).transform('idxmax') 
# using idxmax find the first view
s2=df.activity.eq('click').groupby(df['id']).transform('idxmax') 
# same logic here find the index of first click 
out=df.loc[(df.index&lt;=s1)|(df.index&gt;=s2)].copy() 
# filter the original df by bool get from above
</code></pre>
<hr/>
<p>Here we do the adjust for the only id have view </p>
<pre><code>adjustonlyview=out.activity.eq('view').groupby(df['id']).transform('all') 
# find those id out 
idx_to_drop=out[adjustonlyview].duplicated('id') 
# using duplicate find the the row we do not want to keep 
idx_to_drop=idx_to_drop[idx_to_drop].index 
# get the index of the row we need to drop 
out.drop(idx_to_drop,axis=0,inplace=True) # drop it 
Out[286]: 
     id activity  timestamp
0   123     view          1
2   123    click          3
3   123    click          4
4   234     view          1
7   234    click          4
8   234     view          5
9   234    click          6
10  456     view          1
</code></pre>
</div>
<span class="comment-copy">Thank you, just tried this out and it works great! My next issue to tackle is to figure out how the session granularity works, where each user have activities grouped by session, but I thought it would be too much to put in a single request.</span>
<span class="comment-copy">Thanks again, I was able to figure out the answer to my other question using your code as base.</span>
