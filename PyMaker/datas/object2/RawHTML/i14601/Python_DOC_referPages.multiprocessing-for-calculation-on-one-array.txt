<div class="post-text" itemprop="text">
<p>This question following this one <a href="https://stackoverflow.com/questions/29767235/python-multi-processing-to-mount-an-array">[1]</a>. I have a big 3D array and i have to do some heavy calculations on it.
I would like to split a slice of my array in 4 parts and do calculations for each part with each 4 cores of my computer...
And do that for each slices of my 3D array...what is the best way to do that? </p>
<pre><code>import numpy

size = 8.
Y=(arange(2000))
X=(arange(2000))
(xx,yy)=meshgrid(X,Y)

array=zeros((Y.shape[0],X.shape[0],size))

array[:,:,0] = 0
array[:,:,1] = X+Y
array[:,:,2] = X*cos(X)+Y*sin(Y)
array[:,:,3] = X**3+sin(X)+X**2+Y**2+sin(Y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>Pool</code> from the <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow">multiprocessing</a> module:</p>
<pre><code>from multiprocessing import Pool

def f(num):
  return num * 2 # replace with heavy computation

lst = [1,2,3,4,5,6,7,8,9,10,11]
p = Pool(4)
print p.map(f, lst)
</code></pre>
<p>It will work equally well with a 3-dimensional numpy array:</p>
<pre><code>from multiprocessing import Pool
import numpy

def f(num):
  return num * 2 # replace with heavy computation

arr = numpy.array(
  [numpy.array([
    numpy.array([1,2,3]),
    numpy.array([4,5,6]),
    numpy.array([7,8,9])]),
   numpy.array([
     numpy.array([1,2,3]),
     numpy.array([4,5,6]),
     numpy.array([7,8,9])])])
p = Pool(4)
print p.map(f, arr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative to multiprocessing, you can use the <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures</a> module:</p>
<pre><code>import concurrent.futures

def f(num):
    return num * 2
arr = [â€¦]

with concurrent.futures.ProcessPoolExecutor() as exc:
    print(list(exc.map(f, arr)))
</code></pre>
</div>
<span class="comment-copy">Thanks for your help, but when i calculate the time with and without multiprocess...i find that without multiprocess i m faster :s</span>
<span class="comment-copy">@user3601754 How expensive is each call to <code>f</code>? If <code>f</code> doesn't take a significant amount of time to run, then <code>multiprocessing</code> isn't going to help, because the overhead of passing the array contents between processes will be greater than the benefit of running 4 instances of <code>f</code> simultaneously.</span>
<span class="comment-copy">Thanks for your help! I try that but when i print i get "&lt;generator object map at 0x7f0ef49496e0&gt;" and i dont find how to read my results :s</span>
<span class="comment-copy">See the doc on python generators: <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">wiki.python.org/moin/Generators</a>. You can iterate over the results of <code>exc.map()</code> with a for loop</span>
<span class="comment-copy">By far the simplest way to do "do something on every item of this array, do it in parallel". Worth mentioning that <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" rel="nofollow noreferrer">ProcessPoolExecutor() will default to the number of processors in the machine</a></span>
