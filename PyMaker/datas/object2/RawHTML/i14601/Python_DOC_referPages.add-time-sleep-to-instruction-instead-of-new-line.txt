<div class="post-text" itemprop="text">
<p>I have a lot of necessary <code>time.sleep()</code> in my script. I want to clean up the code and possibly append the wait/pause to the previous line instead of creating a new line. Example:</p>
<pre><code>call(['networksetup', '-setv4off', 'direct IP'])
time.sleep(5)
</code></pre>
<p>Is there any way of achieving this? (Python 3.4)</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you mean combine these two lines in one line, try:</p>
<pre><code>call(['networksetup', '-setv4off', 'direct IP']); time.sleep(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you unconditionally want to be able to sleep after a particular function (or group of functions), the easiest way of doing this that I'm aware of is to use a decorator.</p>
<pre><code>from functools import wraps
import time

def sleep_decorator(f, duration = 5.0):
    @wraps(f)
    def wrapper(*args, **kwargs):
        result = f(*args, **kwargs)
        time.sleep( duration )
        return result
    return wrapper

@sleep_decorator
def call(*args, **kwargs):
    return None

call(['networksetup', '-setv4off', 'direct IP'])
</code></pre>
<p>The issue with that solution is that the duration of the sleep can't be altered, and you can't enable and disable the sleep call on a case-by-case basis. </p>
<p>To enhance the solution you can add arguments to your decorator.</p>
<pre><code>from functools import wraps
import time

def sleep_decorator(duration = 5.0, active = True):
    def decorator(f):
        @wraps(f)
        def wrapper(*args, **kwargs):
            result = f(*args, **kwargs)
            sleep_duration = kwargs.get('duration', duration)
            sleep_active = kwargs.get('active', active)
            if sleep_active:
                time.sleep( sleep_duration )
            return result
        return wrapper
    return decorator
</code></pre>
<p>Which means you could now write you code as follows:</p>
<pre><code>@sleep_decorator(active = False, duration = 0.1)
def call(*args, **kwargs):
    return None

call(['networksetup', '-setv4off', 'direct IP'])
call(['networksetup', '-setv4off', 'direct IP'], active = True)
call(['networksetup', '-setv4off', 'direct IP'], active = True, duration = 1.0)
</code></pre>
<p>One other alternative that can let you inject code is to rewrite the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow">Abstract Syntax Tree</a> of your code at runtime. This would allow you to inject arbitrary function calls. Libraries like <a href="http://numba.pydata.org/" rel="nofollow">numba</a> and <a href="http://ponyorm.com/" rel="nofollow">pony</a> use tricks like this to transform Python code into something domain specific. </p>
</div>
<span class="comment-copy">Having one command per line is one of the basic principles that lead to special beauty of python code. You have the option o fusing the <code>;</code> as a divider but is dislike as "not pythonic". Format guidelines are defined in PEP 8, and they say clearly: no <code>;</code> and not single line <code>if</code>/<code>while</code>/<code>try</code>â€¦ expressions.</span>
<span class="comment-copy">I'm pretty sure that your <code>time.sleep()</code> calls are not in fact "necessary". If you have a lot of sleeps, it means that you're needing to wait for some other system before proceeding, and the correct way to do that is <b>not</b> to sleep, but to synchronize and wait on some kind of signal from the other system that it's ready to proceed. If you provide more information about your use case we can probably help you identify a better solution.</span>
<span class="comment-copy">@Daniel I am testing API curl latency times on three different carriers (AT&amp;T, Sprint, Verizon), which requires me to toggle on/off network hardware devices. For certain carriers, I haven't found a way to toggle the connection via network settings so I've set the connection manager  (AT&amp;T AllAccess) to connect automatically when the app is run. However, it takes over 25 seconds to actually connect after the app has been run. I can't run the <code>curl</code> until the connection has been established, hence the <code>time.sleep()</code>.</span>
<span class="comment-copy">@Eric: It sounds like the question you really want to ask is: "How can I detect when the network connection is ready?" Perhaps if you asked that question, you'd get a more helpful answer. As it stands, this looks like a pretty clear example of the <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">X-Y problem</a>.</span>
<span class="comment-copy">This is completely unnecessary, unpythonic, and ugly. There is almost <b>never</b> a good reason to do this.</span>
<span class="comment-copy">Sure it's ugly, but there a use case for it, at least from the command line: <code>python -c 'a=5; print a*a'</code></span>
<span class="comment-copy">lets not down vote a correct answer to the question!</span>
<span class="comment-copy">Which is why I said <i>almost</i>. If you're writing a program, which the OP is obviously doing, each statement should be on its own line. Please see <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> for details.</span>
