<div class="post-text" itemprop="text">
<p>How do I write a class to make this code work.</p>
<pre><code>class number:

    def double(self):
        return n*2

print(number(44).double)
&gt;&gt; 88
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, you could decorate the <em>number.double</em> method with <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow"><code>property</code></a>:</p>
<pre><code>class number:
    def __init__(self, number):
        self.number = number
    @property
    def double(self):
        return self.number * 2


print(number(42).double) # 84
</code></pre>
<p>If you know the type of your argument, it'd be better to inherit <code>number</code> from it. For example</p>
<pre><code>class number(int):
    @property
    def double(self):
        return type(self)(self * 2)

print(number(42).double) # 84
print(number(42).double.double) # 168
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here you are:    </p>
<pre><code>class Number(object):

    def __init__(self, n):
        self.n = n

    def double(self):
        return 2*self.n

print(Number(44).double())
</code></pre>
<p>A couple of notes:</p>
<ol>
<li>Since <code>double()</code> is a method of the class <code>Number</code> (and not an attribute), you need to use parentheses to call it.</li>
<li>In Python it's considered standard practice to give classes uppercase names.</li>
<li>If you want to define an instance variable (in this case <code>n</code>, or <code>44</code>, you must <code>def</code> the <code>__init__()</code> function which gives the interpreter instructions for how to create, or initialize an instance of your class.</li>
</ol>
<p>Hope this helps, and good luck!</p>
</div>
<span class="comment-copy">Don't know why you're subclassing int when they're seem to be trying to write a generic numeric class.</span>
<span class="comment-copy">@L3viathan fine</span>
<span class="comment-copy">@L3viathan <code>number('Too generic huh?').double</code></span>
<span class="comment-copy">behaviour seems fine by me! If you don't want that, check for <code>int</code>, <code>float</code>, <code>long</code>, and <code>complex</code>.</span>
<span class="comment-copy">I am making an exercise on codewars and I need to use the following syntaxe. I don't think I can use a method. Here is the test case. test.assert_equals(PrimeFactorizer(24).factor, {2: 3, 3: 1})</span>
<span class="comment-copy">Do you have the code or documentation for <code>test.assert_equals()</code>. I'm almost positive that <code>test.assert_equals()</code> takes the actual function as an argument (rather than the value returned by calling the function), so that it can call the function itself. If this is so, then <code>PrimeFactorizer.factor()</code> is really a method even though you don't use parentheses when using it that particular way.</span>
