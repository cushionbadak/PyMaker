<div class="post-text" itemprop="text">
<p>What does the following code do?</p>
<pre><code>a = lambda _:True
</code></pre>
<p>From what I read and tested in the interactive prompt, it seems to be a function that returns always <code>True</code>.</p>
<p>Am I understanding this correctly? I hope to understand why an underscore (<code>_</code>) was used as well. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>_</code> is variable name. Try it.
(This variable name is usually a name for an ignored variable. A placeholder so to speak.)</p>
<p>Python:</p>
<pre><code>&gt;&gt;&gt; l = lambda _: True
&gt;&gt;&gt; l()
&lt;lambda&gt;() missing 1 required positional argument: '_'

&gt;&gt;&gt; l("foo")
True
</code></pre>
<p>So this lambda <em>does require one argument</em>. If you want a lambda <em>with no argument</em> that always returns <code>True</code>, do this:</p>
<pre><code>&gt;&gt;&gt; m = lambda: True
&gt;&gt;&gt; m()
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Underscore is a Python convention to name an unused variable (e.g. static analysis tools does not report it as unused variable). In your case lambda argument is unused, but created object is single-argument function which always returns <code>True</code>. So your lambda is somewhat analogous to <a href="http://en.wikipedia.org/wiki/Constant_function" rel="noreferrer">Constant Function</a> in math.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>it seems to be a function that returns True regardless.</p>
</blockquote>
<p>Yes, it is a function (or lambda) that returns True. The <a href="https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python">underscore</a>, which is usually a placeholder for an ignored variable, is unnecessary in this case.</p>
<p>An example <em>use case</em> for such a function (that does almost nothing):</p>
<pre><code>dd = collections.defaultdict(lambda: True)
</code></pre>
<p>When used as the argument to a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a>, you can have <code>True</code> as a general default value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lambda means a function.
The above statement is same as writing </p>
<pre><code>def f(_):
    return True
</code></pre>
<p>For lambda a variable needs to be present. So you pass it a variable called <code>_</code>(Similarly you could pass <code>x</code>, <code>y</code>..)</p>
</div>
<div class="post-text" itemprop="text">
<p>Underscore <code>_</code> is a valid identifier and is used here as a variable name. It will always return <code>True</code> for the argument passed to the function.  </p>
<pre><code>&gt;&gt;&gt;a('123') 
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below is the line of code in question:  </p>
<pre><code>a = lambda _:True
</code></pre>
<p>It creates a function having one input parameter: <code>_</code>.  Underscore is a rather strange choice of variable name, but it is just a variable name. You can use <code>_</code> anywhere, even when not using lambda functions. For example, instead of....</p>
<pre><code>my_var = 5
print(my_var)
</code></pre>
<p>You could write:</p>
<pre><code>_ = 5
print(_)
</code></pre>
<p>However, there was a reason that <code>_</code> was used as the name of parameter name instead of something like <code>x</code> or <code>input</code>. We'll get to that in a moment.</p>
<p>First, we need to know that the lambda-keyword constructs a function, similar to <code>def</code>, but with different syntax. The definition of the lambda function, <code>a = lambda _:True</code>, is similar to writing:</p>
<pre><code>def a(_):
    return True
</code></pre>
<p>It creates a function named <code>a</code> with an input parameter <code>_</code>, and it returns <code>True</code>. One could have just as easily written <code>a = lambda x:True</code>, with an <code>x</code> instead of an underscore. However, the convention is to use <code>_</code> as a variable name when we do not intend to use that variable. Consider the following:</p>
<pre><code>for _ in range(1, 11):
    print('pear')
</code></pre>
<p>Notice that the loop index is never used inside of the loop-body. We simply want the loop to execute a specified number of times. As <code>winklerrr</code> has written, "the variable name <code>_</code> is [...] like a "throw-away-variable", just a placeholder which is of no use. "</p>
<p>Likewise, with ``a = lambda  x:True<code></code> the input parameter is not used inside the body of the function. It does not really matter what the input argument is, as long as there is one. The author of that lambda-function wrote <code>_</code> instead of something like <code>x</code>, to indicate that the variable would not be used.</p>
<p>Note that the lambda <strong>does</strong> have an argument; So, writing   </p>
<p><code>a()</code>, will raise an error.</p>
<p>If you want a lambda with no argument write something like this:</p>
<pre><code> bar = lambda: True
</code></pre>
<p>Now calling <code>bar()</code>, with no args, will work just fine.
A lambda which takes no arguments need not always return the same value:</p>
<pre><code>import random
process_fruit = lambda : random.random()
</code></pre>
<p>The lambda function above is more complex that just a something which always returns the same constant.</p>
<p>One reason that programmers sometimes us the <code>lambda</code> keyword instead of <code>def</code>  is for functions which are especially short and simple. Note that a <code>lambda</code> definition can usually fit all on one line, whereas, it is difficult to do the same with a def statement. Another reason to use <code>lambda</code> instead of <code>def</code> sf when the function will not be used again. If we don't want to call the function again later, then there is no need to give the function a name. For example consider the following code:</p>
<p>def apply_to_each(transform, in_container):
    out_container = list()
    for idx, item in enumerate(container, 0):
       out_container[idx] =  transform(item)
    return out_container</p>
<p>Now we make the following call:</p>
<pre><code>squares  = apply_to_each(lambda x: x**2 range(0, 101))
</code></pre>
<p>Notice that <code>lambda x: x**2</code> is not given a label. This is because we probably won't call it again later, it was just something short and simple we needed temporarily.</p>
<p>The fact that lambda functions need not be given a name is the source of another name to describe them: "anonymous functions."</p>
<p>Also note that lambda-statements are like a function-call in that they return a reference to the function they create. The following is illegal:</p>
<pre><code>apply_to_each(def foo(x): x**2 ,  range(0, 101))
</code></pre>
<p>Whereas, <code>apply_to_each(lambda x: x**2 range(0, 101))</code> is just fine.</p>
<p>So, we use <code>lambda</code> instead of <code>def</code> and <code>_</code> instead of a  long variable name when we want something short, sweet and probably won't want use again later.</p>
</div>
<span class="comment-copy">For those that what a parameterless lambda, the syntax is <code>lambda : True</code></span>
<span class="comment-copy">Something I dislike about this posting is that the question title talks about a  lambda function "with <b>NO</b> variables," but the question body, and almost all of the answers, give examples of a lambda functions having one variable/argument. That variable just happens to have a strange name <code>_</code>, instead of <code>x</code> or <code>a</code> or whatever. If anyone wants to know how to write a lambda function which takes <b>no</b> arguments; here's how:  Define it like this: <code>my_lambda = lambda : 255</code>. Call it like this: <code>x = my_lambda()</code> You can replace <code>255</code> with whatever return value you like.</span>
<span class="comment-copy">@ToothpickAnemone great reply!   i mostly use lambda with no variables for initialising defaultdicts these days. hope its useful to people reading this thread.  ht = {} ht = defaultdict(lambda:0, ht)</span>
<span class="comment-copy">doesnt work in python 3.6</span>
<span class="comment-copy">@dopatraman tested it with <code>Python 3.6.2</code> under <code>Mac OS 10.12</code> and it works.</span>
<span class="comment-copy">Maybe you could add the information that the variable name <code>_</code> is commonly used when the variable itself isn't really needed. It's like a "throw-away-variable", just a placeholder which is of no use.</span>
<span class="comment-copy">@dopatraman In Ipython, _ holds value returned by the last expression. I avoid using _ for this reason.  <a href="https://stackoverflow.com/questions/17580289/assigning-a-value-to-single-underscore-in-python-ipython-interpreter" title="assigning a value to single underscore in python ipython interpreter">stackoverflow.com/questions/17580289/â€¦</a></span>
<span class="comment-copy">not only python conversion, it's a language-agnostic and underscore is used to indicate that a variable is temporary or insignificant</span>
<span class="comment-copy">Hello, thanks for the quick reply. so its an anonymous function that always return true?</span>
<span class="comment-copy">@laycat; Yes. It will always return true.</span>
