<div class="post-text" itemprop="text">
<p>Lets take a standard Java for-loop</p>
<pre><code>for (int i = 0; i &lt; 10; i++) {
    System.out.println(i);
}
</code></pre>
<p>I can see exactly what's happening in this for loop. <code>i</code> is initialized to 0. The condition is checked and the increment takes place, every iteration.</p>
<p>Here's the Python version</p>
<pre><code>for i in range(0, 10):
    print(i)
</code></pre>
<p>What's happening in detail during this loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>Taking a look at the documentation for the <a href="https://docs.python.org/2/library/functions.html#range" rel="nofollow"><code>range()</code></a> built-in function, it is possible to see that this function "create lists containing arithmetic progressions". This list is the iterated over as if it was passed directly to the loop:</p>
<pre><code>for i in range(0, 10):
    print(i)
</code></pre>
<p>This code is essentially the same as </p>
<pre><code>for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
    print(i)
</code></pre>
<hr/>
<p>The <code>in</code> keyword is basically saying for each element in the supplied iteratable object - in this case, a list. "For each item in the list". The loop knows when to stop because the range function generates a finite list - this list has it's length and that is the stop condition. Internally, when the loop attempts to read an index that is out of range, a <a href="https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration" rel="nofollow"><code>StopIteration</code> exception</a> is generated and will trigger the termination condition.</p>
</div>
<div class="post-text" itemprop="text">
<p>The misconception is that these two loops are <em>not</em> similar.</p>
<p>Java's form is starting from some initial value, printing it out, and so long as the value is less than some terminal value, it will continue the loop.</p>
<p>Python is actually taking each element contained in whatever iterable you give it, and printing out the contents of it without any incrementation whatsoever.</p>
<p>Since in this case, the iterable is the result of <code>range</code>, the behavior of how you get the elements changes between versions.</p>
<ul>
<li><p>If you're using Python &lt; 3, <code>range</code> is a function that <em>eagerly</em> generates a list of elements for you to use.  The lazy, generated variant of this is <a href="https://docs.python.org/2/library/functions.html#xrange" rel="nofollow"><code>xrange</code></a>, in which the values are generated as needed.  In this scenario, since you're looping to completion over the entire collection, and the memory constraints aren't that high, you won't notice any difference between the two.</p></li>
<li><p>In Python &gt;= 3, <code>range</code> <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow">behaves similar to <code>xrange</code></a> in that it's another sequence type, which also generates the values that it requires on the fly.</p></li>
</ul>
<p>The key difference here is that the variable in a Python loop represents the <em>actual</em> value contained in the iterable, whereas Java is generating the value with a standard <code>for</code> loop.</p>
<p>If you were to use an <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14.2" rel="nofollow">enhanced-for loop</a> instead, then you'd get <em>closer</em> to how Python's loops work:</p>
<pre><code>int[] list = {1, 2, 3, 4, 5, 6, 7, 8, 9}
for(int i : list) {
    System.out.println(i);
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>range(0,10)</code> returns a list of the numbers from 0 to 9.
The loop loops over this list, each iteration assigning the next number in the list to <code>i</code></p>
</div>
<span class="comment-copy">So you're asking how Python is implemented.</span>
<span class="comment-copy">Yeah, I'm asking how python is implemented.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/9884132/understanding-pythons-iterator-iterable-and-iteration-protocols-what-exact">Understanding Python's iterator, iterable, and iteration protocols -- what exactly are they?</a></span>
<span class="comment-copy">What exactly is the <code>in</code> keyword doing. How does this for loop know when to stop?</span>
<span class="comment-copy">@Ogen - the loop knows when to stop because the range function generates a finite list - this list has it's length and that is the stop condition. Internally, when the loop attempts to read an index that is out of range, a <code>StopIteration</code> exception is generated and will trigger the termination condition.</span>
<span class="comment-copy">@Ogen The <code>in</code> keyword is basically saying for each element <b>in</b> the supplied iteratable object - in this case, a list. "For each item <b>in</b> the list".</span>
<span class="comment-copy">I see, so rather than checking a condition like in java, python checks an exception?</span>
<span class="comment-copy">You <i>could</i> look at it like that, but you rarely have to deal with the actual exception - as I said, this is (how I assume) it is handled internally. We as users just have to utilize the syntax of the loop and it will stop accordingly.</span>
