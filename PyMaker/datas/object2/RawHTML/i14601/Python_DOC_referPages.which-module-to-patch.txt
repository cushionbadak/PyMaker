<div class="post-text" itemprop="text">
<p>I have the following directory</p>
<pre><code>/root
  /app
      /api
          my_api.py
      /service
          my_service.py
  /tests
     test_api.py
</code></pre>
<p>my_api.py</p>
<pre><code>import app
def run_service():
     app.service.my_service.service_function()
</code></pre>
<p>test_api.py</p>
<pre><code>@patch('app.service.my_service.service_function')
test_run_service(self,mock_service):
     mock_service.return_value = 'Mock'
     response = self.client.get(url_for('api.run_service')
     self.assertTrue(response == expected_responce)
</code></pre>
<p>The above works. What I cant figure out, is which module I need to patch, in case I wanted to import <code>service_function</code> in my_apy.py like this:</p>
<pre><code>from app.service.my_service import service_function
</code></pre>
<p>If I do the import like above, mock stops working.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to patch out <code>app.api.my_api.service_function</code>, since that is the global name already bound to the imported object:</p>
<pre><code>@patch('app.api.my_api.service_function')
test_run_service(self, mock_service):
     mock_service.return_value = 'Mock'
     response = self.client.get(url_for('api.run_service')
     self.assertTrue(response == expected_responce)
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="noreferrer"><em>Where to patch</em> section</a>:</p>
<blockquote>
<p>The basic principle is that you patch where an object is <em>looked up</em>, which is not necessarily the same place as where it is defined.</p>
</blockquote>
</div>
<span class="comment-copy">I had read that before but now I think I can understand it better. Had to use app.my_api.service_function by the way. Thank you</span>
<span class="comment-copy">Ah, yes, include the package name here.</span>
