<div class="post-text" itemprop="text">
<p>So I'm making an API in a Django app and I have a class NodeID that follows the pattern:</p>
<pre><code>class NodeID(enum.IntEnum):
    EIGENVECTOR = 0
</code></pre>
<p>A simplified version of what I return in my view function is this:</p>
<pre><code>return json.dumps({'eigenvector': NodeID.EIGENVECTOR})
</code></pre>
<p>When I view the result of my API in a browser, it shows the value of 'eigenvector' to be NodeID.EIGENVECTOR as opposed to the integer 0.</p>
<pre><code>{"eigenvector": NodeID.EIGENVECTOR }
</code></pre>
<p>This makes it such that my front end can't handle it (it has no idea what NodeID is, obviously). How can I make it so that the call receives the value of NodeID.EIGENVECTOR instead of the variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>This has to do with Python's implementation of <code>enum</code>, which uses a custom metaclass that modifies access to its class properties:</p>
<ul>
<li><a href="https://docs.python.org/3/library/enum.html#functional-api" rel="nofollow noreferrer">https://docs.python.org/3/library/enum.html#functional-api</a></li>
</ul>
<p>Accessing only the value works like this:</p>
<pre><code>&gt;&gt;&gt; member = NodeID.EIGENVECTOR
&gt;&gt;&gt; member.value
0
</code></pre>
<p>So returning it from your simplified example would be like:</p>
<pre><code>return {'eigenvector': NodeID.EIGENVECTOR.value}
</code></pre>
<hr/>
<p>Update: if using Python 3.4 and targeting an output as <code>JSON</code>, Python's own <code>json.dumps()</code> natively expands the values into the serialized representation. (I found that on <a href="https://stackoverflow.com/a/24482131/870769">this answer</a>)</p>
<p><strong>Example w/ <code>json.dumps()</code>:</strong></p>
<pre><code>&gt;&gt;&gt; class Foo(IntEnum):
...     bam = 0
...     bar = 1
...
&gt;&gt;&gt; Foo.bam
&lt;Foo.bam: 0&gt;
&gt;&gt;&gt; json.dumps(Foo.bam)
'0'
</code></pre>
<p><strong>Example w/ nested structure:</strong></p>
<pre><code>&gt;&gt;&gt; something = {'a': Foo.bam, 'b': { 'c': Foo.bar}}
&gt;&gt;&gt; something 
{'a': &lt;Foo.bam: 0&gt;, 'b': {'c': &lt;Foo.bar: 1&gt;}}
&gt;&gt;&gt; json.dumps(something) 
'{"a": 0, "b": {"c": 1}}'
</code></pre>
</div>
<span class="comment-copy">The code you've shown here should be working as you want it to work.  Can you show the code that hasn't been simplified, or an executable sample that demonstrates the same problem?</span>
<span class="comment-copy">You are right, thanks! The problem is that I have a nested dict with values of this metaclass type. Is there a way to blanket apply the .value to everything returned in my view function? Or are my only choices a) making sure the .value is applied as I construct the return object or b) tree walking over the return object before I return?</span>
<span class="comment-copy">I updated the answer, because I think if your are eventually heading for an output as JSON then <code>json.dumps()</code> might already provide what you need. Everything else is hard to say /wo more information about your code. You could open a new question for that if necessary.</span>
<span class="comment-copy">I have been using json.dumps() and still having these problems. I'm hoping to find something in the documentation for it (currently reading). I recreated your example and did not get the behavior you stated. Instead I got:  <code>'{"a": Foo.bam, "b": {"c": Foo.bar}}'</code></span>
<span class="comment-copy">I should have put that I am using json.dumps() in the original question, but it slipped my mind because I have it hidden away in a view function decorator. Will update now.</span>
<span class="comment-copy">A user in <a href="http://stackoverflow.com/a/24482131/870769">these comments</a> states something similar for Python 3.2. Which Python version are you using? (if other than 3.4, from where do you import <code>enum</code>?)</span>
