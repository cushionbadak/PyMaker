<div class="post-text" itemprop="text">
<p>I would like to fetch <code>n</code> random values out of an array.
I can do it in Python using <code>x=random.sample(listName, numberOfValuesNeeded)</code></p>
<pre><code>[code]
#include &lt;iostream&gt;
#include &lt;ctime&gt;
#include &lt;cstdlib&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;

using namespace std;

int main()
{
    const int MAX_Name=100;

    srand((unsigned)time( NULL));

    // Names
    string PsDisp[MAX_Name]={"Alberto", "Bruno", "Carlo", "Dario", "Elio", "Francesco", "Giovanni", "Luca", "Marco", "Nicola", "Oreste", "Pietro",   "Rino", "Sandro", "Tonino", "Valerio", "Vittorio"};


    for(int x=1; x&lt;=6; x++)
    {
        random_shuffle(begin(PsDisp), end(PsDisp));

        cout &lt;&lt; x &lt;&lt; ": " &lt;&lt; endl; // snomething missing before endl
    }

    return 0;
}
</code></pre>
<p>I want to print on the screen:</p>
<blockquote>
<p>1: random name1<br/>
  2: random name3 ...<br/>
  6: random name6</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow"><code>random.sample</code></a> returns samples <em>without replacement</em>. That means you can't get the same element twice.</p>
<p>Your algorithm obviously doesn't do the same. If you reshuffle after getting each value, that's replacing the values. But there's an easy way to fix that: just shuffle once, outside the loop, instead of each time through the loop.</p>
<p>And that means the loop is dead-simple: you just want to print the first 6 numbers in the shuffled <code>dispNames</code>. So:</p>
<pre><code>random_shuffle(begin(dispNames), end(dispNames));
for (int x=1; x&lt;=6; x++) {
    cout &lt;&lt; x &lt;&lt; ": " &lt;&lt; dispNames[x-1] &lt;&lt; endl;
}
</code></pre>
<p>A few side notes:</p>
<ul>
<li><code>random_shuffle</code> is deprecated. And so is <code>shuffle</code> with the default PRNG. There's a good reason for that; even when you don't care about cryptographic randomness or anything fancy, you still want to use a specific PRNG, and the new version of <code>shuffle</code>, just to portably get a uniform distribution.</li>
<li>It's more normal to count from <code>0</code> to <code>&lt;6</code> than from <code>1</code> to <code>&lt;=6</code>. And that would mean you don't need the <code>x-1</code>.</li>
<li>It would be even better to use an iterator instead of indexing; then the same code would work even if you replaced <code>dispNames</code> with some other randomly-accessible type instead of an array.</li>
</ul>
<hr/>
<p>For picking 6 samples out of a list of 17, this is fine. (Well, it's fine as long as it's acceptable to destructively modify the array, which Python's <code>random.sample</code> doesn't do… but if that's a problem, it's not hard to replace this with a copying shuffle, or just a copy plus a destructive shuffle…)</p>
<p>But if your values get too much larger, you need to think about efficiency. Shuffling inherently takes O(N) time, because it has to shuffle most of the N values. But picking K values out of N shouldn't take that long. (And if you switch to a copying shuffle, you're also adding O(N) space, which isn't necessary either.)</p>
<p>I don't think there's an equivalent in the C++ stdlib, but that's OK; it's worth learning how to implement this yourself so you'll understand what it's doing. There are a few different choices: You can build it on top of a permutation generator (which C++ does have in the stdlib), or on top of a trivial linear congruential generator for the next prime bigger than the length of your list (throwing out values that are too large), or a partial Fisher-Yates shuffle instead of a complete one, or probably other things I haven't thought of. (And some that are dead-simple and dead-fast in specific situations, but not in general—e.g., just choosing with replacement and keeping track of previous picks works great if K is tiny, but it's horrible if K is a sizable chunk of N.)</p>
<p>Or, of course, you can <a href="https://hg.python.org/cpython/file/default/Lib/random.py#l280" rel="nofollow">read the CPython source</a>, which is a pretty good way to figure out how to write C++ code that will do exactly the same thing as Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're not concerned about repetitions you can generate 6 random indexes and print the corresponding values like so:</p>
<pre><code>for(int x=1; x&lt;=6; x++)
{
    cout &lt;&lt; x &lt;&lt; ": " &lt;&lt; dispNames[rand() % MAX_Name] &lt;&lt; endl;
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a technique called <a href="http://en.wikipedia.org/wiki/Reservoir_sampling" rel="nofollow">Reservoir Sampling</a>. It only iterates once over the input and thus needs O(n). Here's your sample code with a working C++11 reservoir sampling:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;random&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;
#include &lt;cassert&gt;


template&lt;class InputIt, class Generator&gt;
std::vector&lt;typename std::iterator_traits&lt;InputIt&gt;::value_type&gt; sample(InputIt first, InputIt last, size_t n, Generator&amp; engine) {
    assert(distance(first, last) &gt;= n);
    InputIt nth = next(first, n);
    std::vector&lt;typename std::iterator_traits&lt;InputIt&gt;::value_type&gt; result{first, nth};
    size_t k=n+1;
    for (InputIt it = nth; it != last; ++it, ++k) {
        size_t r = std::uniform_int_distribution&lt;size_t&gt;{0, k}(engine);
        if (r&lt;n)
            result[r] = *it;
    }
    return result;
}


using namespace std;

int main()
{

    string xs[] = {"Alberto", "Bruno", "Carlo", "Dario", "Elio", "Francesco", "Giovanni", "Luca", "Marco", "Nicola", "Oreste", "Pietro",   "Rino", "Sandro", "Tonino", "Valerio", "Vittorio"};

    mt19937 engine{random_device{}()};
    vector&lt;string&gt; ys = sample(begin(xs), end(xs), 5, engine);

    for (const string&amp; s : ys)
        cout &lt;&lt; s &lt;&lt; endl;

    return 0;
}
</code></pre>
</div>
<span class="comment-copy">Note that <code>std::random_shuffle</code> is not recommended, because its randomness may be very  poor. <a href="http://en.cppreference.com/w/cpp/algorithm/random_shuffle" rel="nofollow noreferrer"><code>std::shuffle</code></a> with an appropriate PRNG is better.</span>
<span class="comment-copy">Can the 1-6 contain repetitions? If not, just sort once and print the first 6. The way to access an element is just <code>dispNames[x]</code>. And make your loop condition start at 0: <code>for (int x=06; x&lt;6; ++x) ...</code>.</span>
<span class="comment-copy">This is a really inefficient (and unnecessarily destructive) way to do it in the first place—it would be like using <code>random.shuffle(n); return n[0]</code> instead of <code>return random.choice(n)</code> in Python.</span>
<span class="comment-copy">Also, <code>random.sample</code> gives you samples <i>without replacement</i>, but your algorithm gives you samples <i>with</i> replacement. If you want your code to work without replacement, you'd just shuffle once and pick the first 6 values from the result. (But again, don't use shuffle for sampling…)</span>
<span class="comment-copy">this solved the problem with some changes in the code: DELETE this line const int MAX_Name=100; CHANGE this line string PsDisp[MAX_Name]= in string PsDisp[17]= and then using your solution. With string PsDisp[MAX_Name]= the program, often, prints empty lines for names</span>
<span class="comment-copy">- a million for <code>rand()</code> (and using <code>%</code> on it). <a href="http://en.cppreference.com/w/cpp/numeric/random#Example" rel="nofollow noreferrer">C++ has proper facilities for PRNGs for a while now.</a>. <a href="http://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful" rel="nofollow noreferrer">See STL's presentation.</a></span>
<span class="comment-copy">@BoBTFish Thanks, I haven't had cause to use random generation in my own work for years. The premise would still stand wouldn't it? Just replace <code>rand</code> with the PRNG of your choice?</span>
<span class="comment-copy">Pretty much, as long as this has the behaviour OP is after (not clear from the question).</span>
<span class="comment-copy">Just replacing <code>rand</code> wouldn't help; using <code>%</code> will turn even a perfectly uniform distribution into a non-uniform one for no good reason.</span>
<span class="comment-copy">Ah ok, looks like I've got to go and do some reading before I next have to implement any randomness in a program then</span>
