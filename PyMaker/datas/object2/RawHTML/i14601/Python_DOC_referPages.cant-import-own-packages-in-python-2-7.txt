<div class="post-text" itemprop="text">
<p>I'm having some trouble importing own packages in my programs, and so I made a test folder to try and understand what I'm doing wrong.</p>
<p>It's the simplest of things, But I still can't get it to work.</p>
<p>This is my folder structure:</p>
<pre><code>test
&gt; pack1
  &gt; __init__.py
  &gt; mod1.py
&gt; pack2
  &gt; __init__.py
  &gt; mod2.py
</code></pre>
<p>Both <code>init</code>-files are empty.</p>
<p><code>mod1</code> looks like this:</p>
<pre><code>def foo():
    print "hello"
</code></pre>
<p>and <code>mod2</code> looks like this</p>
<pre><code>from pack1.mod1 import *

foo()
</code></pre>
<p>When running the code in PyCharm, everything works fine! But when trying to execute from cmd I get <code>ImportError: No module named pack1.mod1</code></p>
<p>Is <code>sys.path.insert(0, "../pack1")</code> my only option, or is there another reason why cmd will not cooperate?</p>
</div>
<div class="post-text" itemprop="text">
<p>Regardless of version, python has to know where to look for packages. Manipulating <code>sys.path</code> is a quick and dirty option, which will break sometimes in the future, if your code grows more complex. Try making a package and install it via <code>pip install -e</code> or <code>python setup.py develop</code></p>
<p>(Look for this at the nice <a href="https://docs.python.org/3/distutils/introduction.html" rel="nofollow">distutils introduction</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>In regular Python, there are only certain folders that are checked for importing packages and the <code>test</code> folder you have doesn't seem to be one of those files. To change this, edit <code>sys.path</code> in <code>mod2.py</code> and <em>then</em> import <code>pack1.mod1</code>.</p>
<p><code>mod2.py</code></p>
<pre><code>import sys
# Add test folder to sys.path
sys.path.append("../")

from pack1.mod1 import *
# Prints "hello"!
foo()</code></pre>
<p>Also, instead of editing <code>sys.path</code>, you could add the <code>pack1</code> folder into the <code>Lib</code> folder within your Python directory. This will work because this is, by default, one of the folders in <code>sys.path</code>.</p>
<pre><code>Python 2.7
  &gt; Lib
    &gt; pack1
      &gt; __init__.py
      &gt; mod1.py</code></pre>
<p><code>mod2.py</code></p>
<pre><code>from pack1.mod1 import *
# Prints "hello"!
foo()</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You say you execute it via: <code>(Documents)/test/pack2&gt; python mod2.py</code></p>
<p>Problem is that <code>pack2.mod2.py</code> doesn't know where <code>pack1</code> is.</p>
<p>Execute it as module:
<code>(Documents)/test&gt; python -m pack2.mod2</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If you do not want to modify scripts or directory layout you can use <code>PYTHONPATH</code> environmental variable.</p>
<p>Example</p>
<pre><code>vagrant@h:/tmp/test/pack2$ python mod2.py
Traceback (most recent call last):
  File "mod2.py", line 1, in &lt;module&gt;
    from pack1.mod1 import *
ImportError: No module named pack1.mod1
vagrant@h:/tmp/test/pack2$ export PYTHONPATH="${PYTHONPATH}:/tmp/test"
vagrant@h:/tmp/test/pack2$ python mod2.py
hello
vagrant@h:/tmp/test/pack2$
</code></pre>
<p>More about searching modules - <a href="https://docs.python.org/2/tutorial/modules.html#the-module-search-path" rel="nofollow">https://docs.python.org/2/tutorial/modules.html#the-module-search-path</a></p>
</div>
<span class="comment-copy">How exactly do you execute your code in command line?</span>
<span class="comment-copy">@Alik <code>(Documents)/test/pack2&gt; python mod2.py</code></span>
<span class="comment-copy">"Is sys.path.insert(0, "../pack1") my only option" No, you can also use <code>sys.path.apend("/path/to/pack1/)</code>. And first <code>import sys</code>, but that should be obvious.</span>
<span class="comment-copy">"Manipulating sys.path is a quick and dirty option" thumbs up for this, but during the development it can be handy for testing purposes.</span>
<span class="comment-copy">when you start adding code just to accomodate this, the day will come when exactly this additional code will bite you... been there, done that</span>
<span class="comment-copy">Isn't it just easier to add pack1 into the Lib folder, or is this also likely to bite someone back?</span>
<span class="comment-copy">@knitti I liked this one, except that I've never created a full package. Do you know of any good tutorials?</span>
<span class="comment-copy">@Noble Mushtak: using the Lib folder is like using undocumented features: it probably works, but you don't know if there are unintended consequences</span>
<span class="comment-copy">Did not know of <code>python -m</code>, that's handy! But I need this to work via imports; This is just a test to show my problem, but I need <code>import</code> to work correctly for a bigger project.</span>
<span class="comment-copy">For a bigger project I would create a package and install it via pip</span>
