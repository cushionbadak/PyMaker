<div class="post-text" itemprop="text">
<p>I have one weird problem. I have following code:</p>
<pre><code>class A:
    def f():
        return __class__()

class B(A):
    pass
a = A.f()
b = B.f()
print(a, b)
</code></pre>
<p>And output is something like this:</p>
<pre><code>&lt;__main__.A object at 0x01AF2630&gt; &lt;__main__.A object at 0x01B09B70&gt;
</code></pre>
<p>So how can I get <code>B</code> instead of second <code>A</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://stackoverflow.com/questions/19776056/the-difference-between-super-method-versus-superself-class-self-method/19776143#19776143">magic <code>__class__</code> closure</a> is set for the <em>method context</em> and only really meant for use by <code>super()</code>.</p>
<p>For methods you'd want to use <code>self.__class__</code> instead:</p>
<pre><code>return self.__class__()
</code></pre>
<p>or better still, use <code>type(self)</code>:</p>
<pre><code>return type(self)()
</code></pre>
<p>If you want to be able to call the method on a class, then use the <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow"><code>classmethod</code> decorator</a> to be handed a reference to the class object, rather than remain unbound:</p>
<pre><code>@classmethod
def f(cls):
    return cls()
</code></pre>
<p><code>classmethod</code>s are always bound to the class they are called on, so for <code>A.f()</code> that'd be <code>A</code>, for <code>B.f()</code> you get handed in <code>B</code>.</p>
</div>
<span class="comment-copy"><code>how can I get B instead of second A</code> - What do you mean by that? An instance of <code>B</code>?</span>
<span class="comment-copy">In printed text. What I meant is that <code>b</code> becomes instance of <code>B</code>.</span>
<span class="comment-copy">@thefourtheye: right, then using a <code>@classmethod</code> is the right way to go about it.</span>
<span class="comment-copy"><code>@classmethod</code> is excellent, I did't use <code>self.__class__()</code> because I couldn't use <code>self</code>. I always thought <code>@classmethod</code> use object not class.</span>
