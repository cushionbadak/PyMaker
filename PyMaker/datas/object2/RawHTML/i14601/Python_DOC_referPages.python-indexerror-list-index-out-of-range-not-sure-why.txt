<div class="post-text" itemprop="text">
<p>What I would like the program to do is to take sequences related to a certain barcode and perform the defined function (average length and standard deviation of sequences, minus the barcode and non-relevant txt, identified by the same barcode). I have written something similar and based it off the similar program but I keep getting an indexerror. The idea is that all the sequences with the first barcode will be processed as barcodeCounter = 0 and the second one as barcodeCounter = 1, etc. Hopefully that is enough info, sorry if it is messy.</p>
<p>Input:</p>
<pre><code>import sys
import math

def avsterr(x):
        ave = sum(x)/len(x)
        ssq = 0.0
        for y in x:
                ssq += (y-ave)*(y-ave)
        var = ssq / (len(x)-1)
        sdev = math.sqrt(var)
        stderr = sdev / math.sqrt(len(x))

        return (ave,stderr)

barcode = sys.argv[1]
sequence = sys.argv[2]
lengths = []
toprocess = []
b = open(barcode,"r")
barcodeCounter = 0
for barcode in b:
        barcodeCounter = barcodeCounter + 1
        barcode = barcode.strip()
        print "barcode: %s" %  barcode
        handle = open(sequence, "r")
        for line in handle:
                print line
                seq = line.split(' ',1)[-1].strip()
                print "seq: %s" % seq
                potential_barcode = seq[0:len(barcode)]
                print "something"
                if potential_barcode == barcode:
                        print "Checking sequences"
                        outseq = seq.replace(potential_barcode, "", 1)
                        outseq_length = [len(outseq)]
#                       toprocess.append("")
#                       toprocess[barcodeCounter] += outseq.strip
                        toprocess[barcodeCounter].extend(outseq.strip)   #IndexError/line40
#                       toprocess[barcodeCounter] = toprocess[barcodeCounter] + outseq.strip
                        print "outseq: %s" % outseq
                        print "Barcodes to be processed: %s" % toprocess[barcodeCounter]
                        print "BC: %i" % barcodeCounter
        handle.close()
b.close()
one = len(toprocess[0])
#two = lengths[2]
#three = lengths[3]
print one
#(av,st) = avsterr(lengths)
#print "%f +/- %f" % (av,st)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>barcode: ATTAG
S01 ATTAGAAAAAAA

seq: ATTAGAAAAAAA
something
Checking sequences
Traceback (most recent call last):
  File "./FinalProject.py", line 40, in &lt;module&gt;
    toprocess[barcodeCounter].extend(outseq.strip)
IndexError: list index out of range
</code></pre>
<p>This is the code I'm basing it on.</p>
<pre><code>sequenceCounter = -1
for line in handle:
        if line[0] == "&gt;":
                sequenceCounter = sequenceCounter + 1
#               print "seqid %s\n" % line
                seqidList.append(line)
                seqList.append("")
        if line[0] != "&gt;":
                seqList[sequenceCounter] = seqList[sequenceCounter] + line.strip()
</code></pre>
<p>EDIT:
Added the enumerate function and commented out barcodeCounter stuff.</p>
<pre><code>barcode = sys.argv[1]
sequence = sys.argv[2]
lengths = []
toprocess = []
b = open(barcode,"r")
#barcodeCounter = -1
for barcodeCounter, barcode in enumerate(b):
#       barcodeCounter = barcodeCounter + 1
        barcode = barcode.strip()
        print "barcode: %s" %  barcode
        handle = open(sequence, "r")
        for line in handle:
                print line
                seq = line.split(' ',1)[-1].strip()
                print "seq: %s" % seq
                potential_barcode = seq[0:len(barcode)]
                print "something"
                if potential_barcode == barcode:
                        print "Checking sequences"
                        outseq = seq.replace(potential_barcode, "", 1)
                        outseq_length = [len(outseq)]
                        toprocess.append("")
#                       toprocess[barcodeCounter] += outseq.strip
                        toprocess[barcodeCounter].append(outseq.strip) #AttributeError line 40
#                       toprocess[barcodeCounter] = toprocess[barcodeCounter] + outseq.strip
                        print "outseq: %s" % outseq
                        print "Barcodes to be processed: %s" % toprocess[barcodeCounter]
                        print "BC: %i" % barcodeCounter
        handle.close()
b.close()
</code></pre>
<p>New error:</p>
<pre class="lang-none prettyprint-override"><code>barcode: ATTAG
S01 ATTAGAAAAAAA

seq: ATTAGAAAAAAA
something
Checking sequences
Traceback (most recent call last):
  File "./FinalProject.py", line 40, in &lt;module&gt;
    toprocess[barcodeCounter].append(outseq.strip)
AttributeError: 'str' object has no attribute 'append'
</code></pre>
<p>Code without the issue:</p>
<pre><code>barcode = sys.argv[1]
sequence = sys.argv[2]
lengths = []
toprocess = []
b = open(barcode,"r")
#barcodeCounter = -1
for barcodeCounter, barcode in enumerate(b):
#       barcodeCounter = barcodeCounter + 1
        barcode = barcode.strip()
        print "barcode: \n%s\n" %  barcode
        handle = open(sequence, "r")
        for line in handle:
                print line
                seq = line.split(' ',1)[-1].strip()
                print "seq: %s" % seq
                potential_barcode = seq[0:len(barcode)]
#               print "something"
                if potential_barcode == barcode:
                        print "Checking sequences"
                        outseq = seq.replace(potential_barcode, "", 1)
                        outseq_length = [len(outseq)]
                        toprocess.append("")
                        toprocess[barcodeCounter] = toprocess[barcodeCounter] + outseq
</code></pre>
<p>@abarnert You were helpful, thank you. I'm not the brightest when it comes to programming sometimes(most the time). I had to also change the way I added the new sequences because they are <code>str</code> not <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You actually have two problems here.</p>
<hr/>
<p>First, you're counting from 1 instead of 0. You start <code>barcodeCounter</code> at <code>0</code>, then you increment it before using it. This means that if you have, say, 3 barcodes, you're trying to set <code>toprocess[1]</code>, then <code>toprocess[2]</code>, then <code>toprocess[3]</code>, and the last one is going to be an <code>IndexError</code>.</p>
<p>Notice that the code you based it on starts with <code>sequenceCounter = -1</code> rather than <code>0</code> to avoid this problem.</p>
<p>However, there's an even simpler solution to the problem: use <code>enumerate</code> to do the counting for you:</p>
<pre><code>for barcodeCounter, barcode in enumerate(b):
</code></pre>
<p>No need to remember whether to start at -1, 0, or 1, or where to do the incrementing, or any of that; it just automatically gets the numbers 0, 1, 2, etc. up to <code>len(b)-1</code>.</p>
<hr/>
<p>Second, even if you counted correctly, <code>toprocess</code> is not the same size as <code>b</code>. In fact, it's completely empty, so <code>toprocess[anything]</code> is <em>always</em> going to raise an exception.</p>
<p>To append a new value to the end of a <code>list</code>, you call the <code>append</code> method:</p>
<pre><code>toprocess.append(…)
</code></pre>
<p>Again, notice that the code you're basing it on always does a <code>seqList.append("")</code> before doing a <code>seqList[sequenceCounter] =</code>. (Notice that it's a bit tricky—sometimes it <code>append</code>s and increments <code>sequenceCounter</code>, sometimes it does neither, and assigns to <code>seqList[sequenceCounter]</code> using the previous value of <code>sequenceCounter</code>.) You have to do the equivalent.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code </p>
<pre><code>listVariable[indexNumber]
</code></pre>
<p>is used specifically to access something already existing in the list variable. The number you give it tells Python what part of the list you're looking for. Worth noting, the list starts counting from 0 and not 1. So the following code:</p>
<pre><code>list = ["a","b","c","d"]
print list[0]
print list[3]
print list[1]
print list[-1]
</code></pre>
<p>will result in printing</p>
<pre><code>a #index 0
d #index 3
b #index 1
d #index -1
</code></pre>
<p>(a minus index actually counts from the end, so -1 gives you d, and -2 would result in c)</p>
<p>An indexError is what happens when you give a number that the list has nothing stored for. If I tried to call list[4] I'd get an index error since it doesn't exist, just like if I tried to call a variable that doesn't exist.</p>
<p>Unlike with dictionaries, you can't set a list value by providing a non existing index. You need to use a method like append, or extend but not the way you did it where you're giving an index and then calling the extend function. Strictly speaking</p>
<pre><code>list[3].append("e")
</code></pre>
<p>is telling Python to take the value stored in list[3] and append an 'e' to that, not to the overall list itself.</p>
<pre><code>list.append("e")
</code></pre>
<p>That's what would actually add e to my list.</p>
</div>
<span class="comment-copy">Which is line 40?</span>
<span class="comment-copy">sorry, thought I inputted everything correctly, fixed it</span>
<span class="comment-copy">Sorry to be blunt, but you get an IndexError because you don't have any idea how lists work in python. You initialize <code>toprocess</code> as an empty list and then try to access its non-existing elements with <code>toprocess[barcodeCounter]</code>, before ever putting anything into the list. What exactly do you expect to happen?</span>
<span class="comment-copy">Blunt is fine, I don't quite understand how lists work. I'm expecting to add something to the list.</span>
<span class="comment-copy">You may want to read <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">Lists</a> in the tutorial, or something equivalent. And if that's not sufficient to fully understand the code you're basing your code on, read more, or ask questions. Don't try to write code that does the same thing as someone else's code until you actually understand that someone else's code.</span>
<span class="comment-copy">@l4mpi: He has both problems here. The code he's trying to copy appends values and then overwrites them, counting from 0. He's not appending first, and he's counting from 1, and he has to fix both of those problems or he'll get <code>IndexError</code>s; just fixing one won't do it.</span>
<span class="comment-copy">so using the     enumerate     function will eliminate the need for     barcodeCounter = barcodeCounter + 1    and setting barcodeCounter equal to -1?</span>
<span class="comment-copy">@slick1092: Yes, exactly. But, again, you need to solve the second problem as well as the first one—and once you solve the second problem, you probably don't even <i>need</i> <code>barcodeCounter</code> anymore…</span>
<span class="comment-copy">I added the <code>enumerate</code> function as you suggested. I have used  <code>.append</code> before but I get a attribute error, which is why I tried  <code>.extend</code>. I believe I still need the <code>barcodeCounter</code> because I need to be able to identify the sequences based on which barcode was entered.</span>
