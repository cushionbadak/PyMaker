<div class="post-text" itemprop="text">
<p>How do I read all data from a python socket? There doesn't seem to be a "sendall" (like <code>Socket#read</code> in ruby) counterpart for reading and concatenating buffers seem fairly low-level for a what's supposed to be a higher level language. If I do have to resort to that  (concatenating buffers that is), is there an optimal buffer size I should choose assuming that I'm dealing with UNIX sockets?</p>
</div>
<div class="post-text" itemprop="text">
<p>The higher level of abstraction you want is in <a href="https://docs.python.org/3/library/io.html#io.RawIOBase.readall" rel="nofollow"><code>io</code></a>, which can be fitted atop a socket with <a href="https://docs.python.org/3/library/socket.html#socket.socket.makefile" rel="nofollow"><code>makefile</code></a>:</p>
<pre><code>s = socket.socket(...)
...
all_data = s.makefile().read(-1)  # or, equivalently, readall()
s.close()
</code></pre>
</div>
<span class="comment-copy">Wait, you mean like: <a href="https://docs.python.org/2/library/socket.html#socket.socket.sendall" rel="nofollow noreferrer">docs.python.org/2/library/socket.html#socket.socket.sendall</a></span>
<span class="comment-copy">Oh, I may have misunderstood what you were saying.  You want a <code>receiveall</code> function, right?</span>
<span class="comment-copy">Yes. Read all data until the connection is closed.</span>
<span class="comment-copy">I've usually used a buffer size like <code>2048</code> by convention but you'll have to use a busy while loop to continually grab data as you probably suspect.  Python does have higher level libraries for this kind of thing, but if you are dealing with sockets, it is going to be a little lower-level-ugly, yes.</span>
<span class="comment-copy"><code>SocketServer</code> has subclasses for Unix sockets which should be a little higher-level but I'm actually a little surprised after searching, that there are no high-level networking modules for python beyond this in the standard library.</span>
