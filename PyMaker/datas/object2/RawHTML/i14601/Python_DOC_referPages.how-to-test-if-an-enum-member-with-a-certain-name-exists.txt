<div class="post-text" itemprop="text">
<p>Using Python 3.4 I want to test whether an Enum class contains a member with a certain name.</p>
<p>Example:</p>
<pre><code>class Constants(Enum):
    One = 1
    Two = 2
    Three = 3

print(Constants['One'])
print(Constants['Four'])
</code></pre>
<p>gives:</p>
<pre><code>Constants.One
  File "C:\Python34\lib\enum.py", line 258, in __getitem__
    return cls._member_map_[name]
KeyError: 'Four'
</code></pre>
<p>I could catch the <code>KeyError</code> and take the exception as indication of existence but maybe there is a more elegant way?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>Enum.__members__</code> - <a href="https://docs.python.org/3/library/enum.html#iteration"><em>an ordered dictionary mapping names to members</em></a>:</p>
<pre><code>In [12]: 'One' in Constants.__members__
Out[12]: True

In [13]: 'Four' in Constants.__members__
Out[13]: False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would say this falls under <a href="https://docs.python.org/2/glossary.html#term-eafp" rel="noreferrer">EAFP</a> (Easier to ask for forgiveness than permission), a concept that is relatively unique to Python. </p>
<blockquote>
<p>Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C.</p>
</blockquote>
<p>This contrasts with <a href="https://docs.python.org/2/glossary.html#term-lbyl" rel="noreferrer">LBYL</a> (Look before you leap), which is what I think you want when you say you are looking for "a more elegant way."</p>
<blockquote>
<p>Look before you leap. This coding style explicitly tests for pre-conditions before making calls or lookups. This style contrasts with the EAFP approach and is characterized by the presence of many if statements.</p>
<p>In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key] can fail if another thread removes key from mapping after the test, but before the lookup. This issue can be solved with locks or by using the EAFP approach.</p>
</blockquote>
<p>Therefore based on the documentation, it is actually better to use <code>try</code>/<code>except</code> blocks for your problem.</p>
<h3>TL;DR</h3>
<p>Use <code>try</code>/<code>except</code> blocks to catch the <code>KeyError</code> exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>Could use the following to test if the name exists:</p>
<pre><code>if any(x for x in Constants if x.name == "One"):
  # Exists
else:
  # Doesn't Exist
</code></pre>
<p>Of use x.value to test for the enum value:</p>
<pre><code>if any(x for x in Constants if x.value == 1):
  # Exists
else:
  # Doesn't Exist
</code></pre>
</div>
<span class="comment-copy">Note that <code>__members__</code> is a mapping of names to members: <code>mappingproxy(OrderedDict([('One', &lt;Constants.One: 1&gt;), ('Two', &lt;Constants.Two: 2&gt;), ('Three', &lt;Constants.Three: 3&gt;)]))</code>.</span>
<span class="comment-copy"><code>__members__</code> is actually all I need. Thanks.</span>
<span class="comment-copy">Thanks for highlighting that <code>try/except</code> blocks are actually valid programming strategies in Python. I upvoted this answer too, but accepted the other because of personal taste. I rather do LBYL.</span>
<span class="comment-copy">There are many cases where EAFP is the proper way to go, but I don't think this is one of them.  The <code>in</code> operator exists precisely for the case of wanting to check <code>if item in some_container</code>.</span>
<span class="comment-copy">@EthanFurman Enum's <code>in</code> works on values, not names.</span>
<span class="comment-copy">@MisterMiyagi:  True.  In this case the container is the <code>__members__</code> attribute.</span>
