<div class="post-text" itemprop="text">
<p>I'm writing a Python script to search a folder (passed as a command line argument) for files that have the same MD5 checksum (meaning that these files are equal) and print them on screen.</p>
<p>I have used the <a href="https://docs.python.org/2/library/os.html#os.walk" rel="nofollow"><code>os.walk()</code></a> function to scan the folder and wrote a function to calculate the MD5 sum. But now I can't figure out how to search for the files with the same MD5 checksum. Could you please help me with this?</p>
<pre><code>#/usr/bin/env python3
import sys
import hashlib
import os
import operator
###############################################
def md5checksum (filepath):
    with open(filepath, "rb") as afile:
        m=hashlib.md5()
        data = afile.read()
        m.update(data)
        return m.hexdigest()
################################################
if __name__=="__main__":
    dir1 = sys.argv[1]
    info={}
    stampa=[]
    for path, dirname, filenames in os.walk(dir1):
        for filename in filenames:
            info[str(path)+filename]=md5checksum(str(path)+'/'+filename)
</code></pre>
<p>Now I want to search for and print the elements that have the same MD5 checksum.</p>
</div>
<div class="post-text" itemprop="text">
<p>You were nearly there. The key is that you have to invert the structure of your dictionary: In order to easily search for files with the same checksum, you can use the MD5 sum as the <strong>key</strong>, and a <strong>list of paths</strong> that have that checksum as the value:</p>
<pre><code>{'6d4840fa80a877c234895ba45229d939': ['./search.py'],
 '7dac6bd007fce17b0325a693fdb62c68': ['./foo/foo1/f.txt', './foo/foo1/f2.txt'],
 'e7b39e258d9b15300d1732bfce9d89bd': ['./foo/foo1/f3.txt']}
</code></pre>
<p>The check then simply comes down to: Does a particular checksum have more than one entry in its list of paths? If yes, those files have the same checksum.</p>
<p>In this code I used a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a> that defaults to a list to avoid having to check whether a checksum is already in the dictionary.</p>
<pre><code>#!/usr/bin/env python3
from collections import defaultdict
import hashlib
import os
import sys


def md5checksum(filepath):
    with open(filepath, "rb") as afile:
        m = hashlib.md5()
        data = afile.read()
        m.update(data)
    return m.hexdigest()


def calculate_checksums(search_dir):
    checksums = defaultdict(list)

    for root, dirs, files in os.walk(search_dir):
        for filename in files:
            path = os.path.join(root, filename)
            checksum = md5checksum(path)
            checksums[checksum].append(path)
    return checksums


def display_equal_files(checksums):
    for checksum, paths in checksums.items():
        if len(paths) &gt; 1:
            print("MD5 sum: {}".format(checksum))
            for path in paths:
                print("    {}".format(path))


if __name__ == "__main__":
    search_dir = sys.argv[1]
    checksums = calculate_checksums(search_dir)
    display_equal_files(checksums)
</code></pre>
<p>Example Output:</p>
<pre><code>MD5 sum: 8863775ebac6399b538c852e5ee03559
    ./bar/bar.txt
    ./baz/bar2.txt
MD5 sum: 7dac6bd007fce17b0325a693fdb62c68
    ./foo/foo1/f.txt
    ./foo/foo1/f2.txt
</code></pre>
<hr/>
<p>A couple notes:</p>
<ul>
<li>Your shebang was wrong. It should start with <code>#!/</code> instead of <code>#/</code></li>
<li>The indentation in your <code>md5checksums()</code> function was wrong. Indentation is very important in Python, make sure you pay close attention to it.</li>
<li>Use <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow"><code>os.path.join</code></a> to join file paths.</li>
<li>Try to follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8 style guide</a>, it makes your code much more readable </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You need to keep track of the colliding filenames for each hash (i.e. a mapping from hashes to filenames of files with that hash). Easiest way to do that is usinga a <a href="https://docs.python.org/3.4/library/collections.html" rel="nofollow"><code>defaultdict</code></a>.</p>
<p>The following code gives you a dictionary <code>hashes</code>, which contains as keys the MD5 checksums, and as values a list of files with that checksum. You can then easily filter the values for list with more than one item (i.e. two or more files with the same hash).</p>
<pre><code>#/usr/bin/env python3
import sys
import hashlib
import os
import operator
from collections import defaultdict
###############################################
def md5checksum (filepath):
    with open(filepath, "rb") as afile:
        m=hashlib.md5()
        data = afile.read()
        m.update(data)
    return m.hexdigest()
################################################
if __name__=="__main__":
    dir1 = sys.argv[1]
    info={}
    hashes = defaultdict(list)
    for path, dirname, filenames in os.walk(dir1):
        for filename in filenames:
            md5 = md5checksum(os.path.join(path, filename))
            info[str(path)+filename] = md5
            hashes[md5] += [os.path.join(path, filename)]
</code></pre>
</div>
<span class="comment-copy">+ don't use <code>'/'</code> to join path names ;-)</span>
<span class="comment-copy">Thanks, fixed it in the original code as well.</span>
<span class="comment-copy">The <code>info</code> dictionary in your code is unused ;-) (And so is the <code>operator</code> import)</span>
<span class="comment-copy">Thanks for help!=)</span>
