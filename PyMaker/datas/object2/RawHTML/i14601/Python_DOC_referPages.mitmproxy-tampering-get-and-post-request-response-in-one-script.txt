<div class="post-text" itemprop="text">
<p>A POST request to a certain url(<a href="http://test.com" rel="nofollow">http://test.com</a>) is like: </p>
<pre><code>{

"messageType": "OK",
"city": {
    "Name": "Paris",
    "Views": {
        "1231": {
            "id": 4234,
             "enableView": false
        },
    },
    "Views": [5447, 8457],
    "messages": [{
        "id": "message_6443",
        "eTag": 756754338
    }]
},
"client": {
    "Id": 53,
    "email": "test@test.us",
    "firstName": "test",
    "lastName": "test",
    "id": 52352352,
    "uuid": "5631f-grdeh4",
    "isAdmin": false,
</code></pre>
<p>I need to intercept that and change "isAdmin" to true.</p>
<p>And a GET request to a certain url (<a href="https://test.com/profiles/" rel="nofollow">https://test.com/profiles/</a>{Random_Numbers}/id})
has a 'response' 
[decoded gzip] JSON</p>
<pre><code>{
"id": 0, 
"Code": "Admin", 
"display": "RRRR"
}
</code></pre>
<p>I need to change "id" value to 5.</p>
<p>So Basically I need to write one script that will do these two.</p>
<p>So far I have tried to take help of the example codes in Github, but I have had no expected result.
(I'm a complete noob :\ ) and hoping someone here can help me get started.
Thanks in advance!</p>
<p>Edit:
As per the example codes in Github, modify_response_body.py :</p>
<pre><code>from libmproxy.protocol.http import decoded

def start(context, argv):
  if len(argv) != 3:
   raise ValueError('Usage: -s "modify-response-body.py old new"')
    context.old, context.new = argv[1], argv[2]


def response(context, flow):
    with decoded(flow.response):  # automatically decode gzipped responses.
      flow.response.content = flow.response.content.replace(context.old, context.new)`
</code></pre>
<p>How do I implement this for my senario? </p>
<p>Probably using the libmproxy to get http-request and response would be a better idea, maybe.</p>
</div>
<div class="post-text" itemprop="text">
<p>The script you posted and Python's JSON module should get you pretty far:</p>
<pre><code>def response(context, flow):
    if flow.request.url == "...": # optionally filter based on some criteria...
        with decoded(flow.response):  # automatically decode gzipped responses.
            data = json.loads(flow.response.content)
            data["foo"] = "bar"
            flow.response.content = json.dumps(data)
</code></pre>
</div>
<span class="comment-copy">You should show your failed attempts, code, and results for the basis of your question.</span>
<span class="comment-copy">Why not parse this with the json module instead of using regex?</span>
<span class="comment-copy">@VasiliSyrakis Yea! parsing with  json module instead of regex sounds a lot better.</span>
<span class="comment-copy">Then get to it <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">docs.python.org/3/library/json.html</a> experience is your teacher</span>
<span class="comment-copy">I used this solution but it does not work for me ... I can see the response function triggered in the event logs, but the if statement seems to never success ... Any idea ?</span>
