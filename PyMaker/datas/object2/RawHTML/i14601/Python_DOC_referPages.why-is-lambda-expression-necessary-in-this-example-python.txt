<div class="post-text" itemprop="text">
<p>I'm learning a little bit of Tkinter in Python, creating interactive windows.     The window I'm currently making is one that, given a dict of contacts and their respective contact info, creates a button for each contact which, when pressed, displays their contact info. </p>
<p>The two sample contacts I have are named 'Marvin' and 'Minsky', and their info is stored in a dict named <code>book</code>:</p>
<pre><code>import Tkinter as tkinter

# 'Phonebook' with contact info for two people.
book = {"Marvin": {"Mobile": "1234567890", "Email": "marvin@gmail.com"}, 
"Minsky": {"Mobile": "9087865342", "Email": "minsky@yahoo.com"}} 

window = tkinter.Tk() # Make window object

def showinfo(name):
  # Displays info for person whose button was clicked

  # Displays info by configuring labels named 'mobile' and 'email', 
  # using values in 'book'
  mobile.configure(text = book[name]["Mobile"])
  email.configure(text = book[name]["Email"])
</code></pre>
<p><strong>Here's the important part.</strong> Instead of the buttons simply using <code>command = showinfo(name)</code> to call <code>showinfo()</code>, as I first tried, a lambda expression is used:</p>
<pre><code>for name in sorted(phonedict.book.keys()): 
  # Create button for each alphabetically sorted name
  btn = tkinter.Button(text = name, command = lambda arg = name: showinfo(arg))
  btn.pack()
</code></pre>
<p>And the rest of the code is just the labels that <code>showinfo()</code> modifies:</p>
<pre><code># Window section where contact info is displayed via labels
mobile_lbl = tkinter.Label(text = "Mobile:")
mobile_lbl.pack()
mobile = tkinter.Label(text = "")
mobile.pack()
email_lbl = tkinter.Label(text = "Email:")
email_lbl.pack()
email = tkinter.Label(text = "")
email.pack()

# Display window
window.mainloop()
</code></pre>
<p>When run, this program does exactly what I want it to do, modifying the labels correctly when each button is clicked. </p>
<p>If <code>command = showinfo(name)</code> is used in place of the lambda, however, <code>NameError: global name 'mobile' is not defined</code> is thrown because (I think) it tries to execute the button's command <em>when the button is created</em> instead of when it is <em>pressed</em>. </p>
<p>Why would the use of a lambda expression in the button's command keep the command from executing until the button is clicked? What functional purpose is it serving?</p>
</div>
<div class="post-text" itemprop="text">
<p>Like you guessed, when you use <code>command = showinfo(name)</code> you are asking python to <em>immediately</em> call <code>showinfo(name)</code>, and then assign the result of that to the <code>command</code> attribute. </p>
<p>The <code>command</code> attribute must be given a <em>reference</em> to a function. <code>lambda</code> is a convenient way to create an anonymous function and return the reference, which gets assigned to the attribute. Inside that anonymous function you can call any other function you want, and that inner code isn't executed until the anonymous function is executed.</p>
<p>The functional purpose of <code>lambda</code> is to create a temporary, unnamed function that can be passed to other functions or stored as an attribute. It is a convenient way (but not the only way<sup>1</sup>) to create a wrapper around a callback that requires an argument. </p>
<p><sup>1</sup>Another way to accomplish the same thing is with <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow">functools.partial</a>. Another method would be to write your own <a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/" rel="nofollow">decorator</a>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>A callback is simply a function that you pass around to other functions so those functions can call it. <code>showinfo(name)</code> is not a callback because the function is called immediately before the <code>Button</code> is constructed and the return value of <code>showinfo</code> seems to be <code>None</code> (if a function doesn't return anything it returns <code>None</code> by default in Python). </p>
<p><code>showinfo</code> by itself, <em>could</em> be a callback because it's a function, however the problem is that it requires a positional argument. In Python, positional arguments are required:</p>
<pre><code>def f1(callback): callback()
def f2(arg1): pass

f1(f2) # TypeError: f2() takes exactly 1 argument (0 given)
</code></pre>
<p>The way your code solves this is with a lambda expression that takes a default parameter that we define on-the-fly to be name. So what we are saying is, here is a function that by has a keyword argument <code>arg</code> that by default is  set to <code>name</code>, when this function is called, call showinfo with that default argument:</p>
<pre><code>btn = tkinter.Button(text = name, command=lambda arg=name: showinfo(arg))
</code></pre>
<p><em>But why do we need to use default arguments? Isn't that a complicated way of doing things?</em> <s>Yes, yes it is. You can simply do this instead:</s></p>
<pre><code>btn = tkinter.Button(text = name, command=lambda: showinfo(name))
</code></pre>
<p>This is a lambda that takes no arguments and is a perfectly valid equivalent to what you're doing. This is because <code>showinfo</code> and <code>name</code> are part of the closure of the lambda you're creating, so they can be accessed by the lambda itself even after the lambda function has been passed to another function.</p></div>
<span class="comment-copy">Have you ever used lambdas in a non-Tkinter project? Some experimentation may shed light on their behavior.</span>
<span class="comment-copy">This is basically the opposite question to: <a href="http://stackoverflow.com/q/8269096/3001761">stackoverflow.com/q/8269096/3001761</a></span>
<span class="comment-copy">+1 for the concise explaination of the lambda.  Can you elaborate a little on the "but not the only way" comment in your answer?  Just a curious noob trying to learn everything!  Thanks!</span>
<span class="comment-copy">@ChristopherPearson: I've added a brief mention of functools.partial and decorators to my answer.</span>
<span class="comment-copy">Great explanation, thank you.</span>
<span class="comment-copy">Thanks! One problem I just found with the last suggestion of omitting <code>arg=name</code> and just having <code>showinfo(name)</code>, is that this will result in all the callbacks simply referencing the variable instead of attaching the <i>current value</i> of the variable to the callback for each loop iteration. The result is that without <code>arg=name</code>, every button created in the loop will just use the <i>current value</i> of <code>name</code> at the time the button is clicked.</span>
<span class="comment-copy">@ZachW Noted! I have made an edit to the answer that goes over this. Good call, pun intended. :)</span>
