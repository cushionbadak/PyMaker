<div class="post-text" itemprop="text">
<p>I'm trying to input a range of values to an equation, and then return the input value for which the <em>equation</em> is closest to zero.  Currently I have:</p>
<pre><code>def function():
    bestNumber = 10000000000 #an obscenely large number to start from
    for input in range(15):
        pos = 2 * (10**10.5)/(10**10.5+10**input)
        neg = 2 * (10**3.86)/(10**3.86+10**input)
        finalNumber = pos - neg
        if finalNumber &lt; bestNumber:
            bestNumber = finalNumber
    print (bestNumber)
    print (input)
function()

&gt;&gt;&gt;0.0002760
&gt;&gt;&gt;14
</code></pre>
<p>Of course, this function will always print a number pretty close to <code>0</code>, but simply prints the last value in the loop.</p>
<p>I am really struggling to find a way to to return the <code>input</code> value that results in the <em>lowest</em> value of <code>bestNumber</code>.  I feel like I am pretty close but am missing some key knowledge of loops. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>First:</strong> just have your function to calculate your value for you, given the input -</p>
<pre><code>def function(input):
    pos = 2 * (10**10.5)/(10**10.5+10**input)
    neg = 2 * (10**3.86)/(10**3.86+10**input)
    return pos - neg
</code></pre>
<p><strong>Second:</strong> you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> (technically a generator expression, here) to generate your values, and pass that to the builtin <code>min</code> function -</p>
<pre><code>bestNumber, input = min((function(i), i) for i in range(15))
# (0.00027603868572034784, 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just add another variable that keeps track of the associated best input:</p>
<pre><code>def function():
    bestNumber = 10000000000 #an obscenely large number to start from
    bestInput = 0
    for input in range(0,15):
        pos = 2 * (10**10.5)/(10**10.5+10**input)
        neg = 2 * (10**3.86)/(10**3.86+10**input)
        finalNumber = pos - neg
        if finalNumber &lt; bestNumber:
            bestNumber = finalNumber
            bestInput = input
    return (bestInput, bestNumber)

bestIn, bestNum = function()
print(bestIn)
print(bestNum)

&gt;&gt;&gt;0
&gt;&gt;&gt;0.00027603868572034784
</code></pre>
<p>EDIT:
This doesn't check decimal numbers, range returns a list of integers. You could do something like this:</p>
<pre><code>def function():
    bestNumber = 10000000000 #an obscenely large number to start from
    bestInput = 0
    input = 0
    while (input &lt; 15):
        pos = 2 * (10**10.5)/(10**10.5+10**input)
        neg = 2 * (10**3.86)/(10**3.86+10**input)
        finalNumber = pos - neg
        if finalNumber &lt; bestNumber:
            bestNumber = finalNumber
            bestInput = input
        input = input + 0.1
    return (bestInput, bestNumber)

bestIn, bestNum = function()
print(bestIn)
print(bestNum)

&gt;&gt;&gt;14.999999999999963
&gt;&gt;&gt;6.324353877789737e-05
</code></pre>
<p>Check a graph of your function, the minimum values are near 0 or 15.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of starting with a huge <code>bestNumber</code> value, you could store the first <code>finalNumber</code> value during the first iteration of the loop. </p>
<p>Then use that <code>bestNumber</code> to compare for the following iterations:</p>
<pre><code>def function():
    for input in range(15):
        pos = 2 * (10**10.5)/(10**10.5+10**input)
        neg = 2 * (10**3.86)/(10**3.86+10**input)
        finalNumber = pos - neg
        if input==0:  
            bestNumber=finalNumber         #store bestNumber for the first iteration
        elif finalNumber &lt; bestNumber:     #compare bestNumber for following iterations
            bestNumber = finalNumber
    print (bestNumber)
    print (input)
function()
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; 
0.00027603868572
14
</code></pre>
</div>
<span class="comment-copy">This looks very promising, but the best input is not 0, it's ~6.8, so something isn't quite right.  In this code, bestInput seems to simply be taking the smallest value in the range</span>
<span class="comment-copy">@rgadra - List comprehensions use extra memory because they create the whole list beforehand, but generator expressions <b>do not.</b> And in this case, my formulation is about 8x faster than yours according to <code>timeit</code>; please don't make incorrect and untested assertions about performance.</span>
