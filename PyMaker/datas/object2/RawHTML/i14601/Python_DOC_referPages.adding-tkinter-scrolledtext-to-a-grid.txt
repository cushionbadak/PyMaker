<div class="post-text" itemprop="text">
<p>So, I have a basic layout that is created with the following code (written here for brevity):</p>
<pre><code>class ClientUI(tk.Frame):
    def __init(self, master, client, queue, send_command):
        self.master = master
        self.master.grid()
        tk.Grid.rowconfigure(self.master, 0, weight=1)
        tk.Grid.columnconfigure(self.master, 0, weight=1)
        self.create_widgets()

        # This is just to figure out what's going on
        pprint(vars(master))
        self.output_panel = master.children['output']

    def create_widgets(self):
        output = ScrolledText(self.master, name="output", state=tk.DISABLED)
        output.grid(row=0, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
</code></pre>
<p>Which I had hoped would add the <code>ScrolledText</code> to the grid. This did work when I was using just a <code>Text</code> widget.</p>
<p>However, I get a <code>KeyError</code> because <code>output</code> is not in the children list. Here is the output of the <code>pprint</code> statement (again, cut to show pertinent portion):</p>
<pre><code>'children': {'34864544': &lt;client.clientui.ClientUI object at 0x000000000213FDA0&gt;,
          '46887376': &lt;tkinter.Frame object at 0x0000000002CB71D0&gt;,
          '46890008': &lt;tkinter.Menu object at 0x0000000002CB7C18&gt;,
          'input': &lt;tkinter.Entry object at 0x0000000002CB76A0&gt;}
</code></pre>
<p>As you can see, there is a named <code>input</code> child that was added in code not shown. However, the <code>output</code> named widget doesn't appear to be added. Why does <code>output.grid(row=0, column=0, sticky=tk.N+tk.S+tk.E+tk.W)</code> not add it as expected?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like creating a <a href="https://docs.python.org/3/library/tkinter.scrolledtext.html#module-tkinter.scrolledtext" rel="nofollow"><code>ScrolledText</code></a> actually creates a <code>Frame</code> wrapping the actual <code>ScrolledText</code> widget together with a <code>ScrollBar</code>, and the <code>name</code> you assign to the <code>ScrolledText</code> is not assigned to the <code>Frame</code>, but to the wrapped <code>ScrolledText</code>.</p>
<p>Thus, <code>master.children</code> does indeed not contain a child with name <code>'output'</code>, but the <code>Frame</code>. The <code>'output'</code> widget can then be found among the children of that <code>Frame</code>.</p>
<pre><code>&gt;&gt;&gt; pprint(master.children)
{'140447721418704': &lt;tkinter.Frame object at 0x7fbc888b6fd0&gt;}
&gt;&gt;&gt; pprint([c.children for c in master.children.values()])
[{'140447721417696': &lt;tkinter.Scrollbar object at 0x7fbc888b6be0&gt;,
  'output': &lt;tkinter.scrolledtext.ScrolledText object at 0x7fbc888b6f98&gt;}]
</code></pre>
<p>So if you want to get a reference to the <code>ScrolledText</code> widget you have to get if from the <code>Frame</code>, but instead it might be much easier to just bind it to <code>self</code> when you create it, i.e.</p>
<pre><code>self.output = ScrolledText(self.master, name="output")
</code></pre>
<p>This is indeed the same object as the one you would get from the <code>Frame</code>'s children:</p>
<pre><code>self.output_panel = next(c.children["output"] for c in master.children.values() if "output" in c.children)
print(repr(self.output_panel))
print(self.output_panel is self.output)
</code></pre>
<p>Output:</p>
<pre><code>&lt;tkinter.scrolledtext.ScrolledText object at 0x7f3e02bf6f98&gt;
True
</code></pre>
</div>
<span class="comment-copy">If <code>self</code> is a <code>Frame</code>, shouldn't you add the widgets to <code>self</code> instead of <code>master</code>?</span>
<span class="comment-copy">I agree with tobias_k why don't you just do <code>output = ScrolledText(self, ...</code> ?</span>
<span class="comment-copy">@tobias_k Despite that being probably a good idea. The question remains that adding a <code>Text</code> widget to <code>self.master</code> did work. Is there something different about <code>ScrolledText</code>? Maybe because it is in a <code>Frame</code> itself?</span>
<span class="comment-copy">Setting the property <code>self.output</code> in the <code>createWidgets</code> method causes PyCharm to whine. I am unsure of the reasoning, since self gets passed around anyway. For that receive assigning it to <code>self.output</code> was originally avoided. Find that the <code>ScrolledText</code> is wrapped in a <code>Frame</code> like my comment mentioned makes perfect sense.</span>
<span class="comment-copy">@ToothlessRebel Probably PyCharm is complaining about adding more <code>self.something</code> attributes outside of <code>__init__</code>, but I guess looking up children by their name is much worse. I suggest that either, you "inline" the content of <code>create_widgets</code> into <code>__init__</code> or make it return the widgets that were created.</span>
