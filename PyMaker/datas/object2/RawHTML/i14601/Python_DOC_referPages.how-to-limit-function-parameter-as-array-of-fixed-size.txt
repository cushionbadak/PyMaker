<div class="post-text" itemprop="text">
<p>How can I limit python function parameter to accept only arrays of some fixed-size?</p>
<p>I tried this but it doesn't compile:</p>
<pre><code>def func(a : array[2]):
</code></pre>
<p>with </p>
<pre><code>TypeError: 'module' object is not subscriptable
</code></pre>
<p><em>I'm new to this language.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>What about checking the length inside of the function? Here I just raised an error, but you could do anything.</p>
<pre><code>def func(array):
    if len(array) != 2:
        raise ValueError("array with length 2 was expected")
    # code here runs if len(array) == 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>1st way (you'll most probably want to use this)</strong></p>
<p>You can just check for all the criteria inside your function by using <code>if</code> statements:</p>
<pre><code>def func(a):
    if not isinstance(a, collections.abc.Sequence):
        raise TypeError("The variable has a wrong type")
    elif len(a) != 2:
        raise ValueError("Wrong length given for list")
    # rest of the code goes here
</code></pre>
<p><strong>2nd way (only for debugging)</strong></p>
<p>You can use <code>assert</code> as a workaround solution (meant for debugging):</p>
<pre><code>def func(a):
    assert isinstance(a, collections.abc.Sequence) and len(a) == 2, "Wrong input given."
    # rest of the code goes here
</code></pre>
<p>So this will check if both criteria are met, otherwise an <code>assertion error</code> will be raised with the message <em>Wrong Input Type</em>.</p>
</div>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">Type Hints</a> are expected to be shipped with Python 3.5, which is not ready yet.</span>
<span class="comment-copy">My recommendation would be more closely related to what specifically you're trying to accomplish. Why only <code>list</code>s? Wouldn't other sequences be acceptable? And why exactly two elements? What do they represent? Why do you want them in a <code>list</code> as opposed to being passed as two separate arguments?</span>
<span class="comment-copy">@myaut Will those type hints check at compile time or run-time? Also will it be supported directly by Python or external software will be required? Because as I see it - it's kinda too abstract and optional.</span>
<span class="comment-copy">If you speak about <b>CPython</b> ("default" Python interpreter, but there are PyPy, Jython, and more), there is no such thing as compile time (code compiled as it called from other places because Python is dynamic), and that PEP will be implemented in <b>CPython</b>. And yes, using type hinting will be optional (actually just a sugar for Totem answer).</span>
<span class="comment-copy">I see. So we won't be able for example to override functions by parameter type?</span>
<span class="comment-copy"><code>raise ValueError</code> would be better.</span>
<span class="comment-copy">agreed. Thanks.</span>
<span class="comment-copy">No, don't use <code>assert</code> for things that may happen in production (i.e. outside of test cases): it will only raise an exception if <code>__debug__</code> is falsey. <a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" rel="nofollow noreferrer">See the documentation.</a></span>
<span class="comment-copy">Ok, I've updated the answer.</span>
<span class="comment-copy">You shouldn't check for list; check for <code>collections.abc.Sequence</code>.  Type checking, if you ever do it, should also use <code>isinstance</code>, rather than <code>type</code>.  So you want something like <code>if not isinstance(a, collections.abc.Sequence):</code></span>
