<div class="post-text" itemprop="text">
<p>In a linux terminal typing </p>
<pre><code>python script.py 
</code></pre>
<p>Will run run <code>script.py</code> and exit the python console, but what if I just want to run a part of the script and leave the console open? For example,  run <code>script.py</code> until line 15 and leave the console open for further scripting. How would I do this?  </p>
<p>Let's say it's possible, then with the console still open and <code>script.py</code> run until line 15, can I then from inside the console call line fragments from other py files? </p>
<p>...something like </p>
<pre><code>python script.py 15 #(opens script and runs lines 1-15 and leaves console open)
</code></pre>
<p>Then having the console open, I would like to run lines 25-42 from <code>anotherscript.py</code></p>
<pre><code>&gt;15 lines of python code run from script.py 
&gt; run('anotherscript.py', lines = 25-42)
&gt; print "I'm so happy the console is still open so I can script some  more")
I'm so happy the console is still open so I can script some  more
&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your best bet might be <code>pdb</code>, the <a href="https://docs.python.org/3/library/pdb.html">Python debugger</a>. You can start you script under <code>pdb</code>, set a breakpoint on line 15, and then run your script.</p>
<pre><code>python -m pdb script.py
b 15                       # &lt;-- Set breakpoint on line 15
c                          # "continue" -&gt; run your program
# will break on line 15
</code></pre>
<p>You can then inspect your variables and call functions. Since Python 3.2, you can also use the <code>interact</code> command inside <code>pdb</code> to get a regular Python shell at the current execution point!</p>
<p>If that fits your bill and you also like IPython, you can check out <a href="https://pypi.python.org/pypi/ipdb">IPdb</a>, which is a bit nicer than normal pdb, and drops you into an IPython shell with <code>interact</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you want to run <code>script.py</code> from line <code>a</code> to line <code>b</code>, simply use this bash snippet:</p>
<pre><code>cat script.py|head -{a+b}|tail -{b-a}|python -i
</code></pre>
<p>replace <code>{a+b}</code> and <code>{b-a}</code> with their values</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>python -i</code> option to leave the console open at the end of the script. </p>
<p>It lets your script run until it exits, and you can then examine variables, call any function and any Python code, including importing and using other modules. </p>
<p>Of course your script needs to exit first, either at the end or, if your goal is to debug that part of the script, you could add a sys.exit() or os._exit() call where you want it to stop (such as your line 15). </p>
<p>For instance:</p>
<pre><code>import os
print "Script starting"
a=1
def f(x):
    return x

print "Exiting on line 8"
os._exit(0) # to avoid the standard SystemExit exception 

print "Code continuing"
</code></pre>
<p>Usage example:</p>
<pre><code>python -i test_exit.py
Scrit starting
Exiting on line 8
&gt;&gt;&gt; print a
1
&gt;&gt;&gt; f(4)
4
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot do that directly but you can do something similar from inside Python console (or IDLE) with <code>exec</code> :</p>
<ul>
<li>just open you favorite Python console</li>
<li><p>load wanted lines into a string and exec them :</p>
<pre><code>script = 'script.py'
txt = ''
with open(script) as sc:
    for i, line in enumerate(sc):
        if i &gt;= begline and i&lt;= endline:
        txt = txt + line
exec(txt)
</code></pre></li>
</ul>
<p>You can even write your own partial script runner based on that code ...</p>
<p>EDIT</p>
<p>I must admit that above answer alone really deserved to be downvoted. It is technically correct and probably the one that most closely meet what you asked for. But I should have warned you that it is bad pratice. Relying on line numbers to load pieces of source files is error prone and you should avoid it unless you really know what you are doing and why you do it that way. Python debugger at least allows you to control what are the lines you are about to execute.</p>
<p>If you really have to use this solution be sure to always print and double check the lines that you are about to execute. IMHO it is always both simpler and safer to copy and past lines in an IDE like IDLE that is packaged into any standard Python installation.</p>
</div>
<span class="comment-copy">Why do you want to do this?</span>
<span class="comment-copy">Well That's a dangerous Idea (y)</span>
<span class="comment-copy">Define "15". Does that include lines in Python functions defined either by you or in a module?</span>
<span class="comment-copy">I am imagining you have a bunch of statements in global scope ( unindented ) in script.py, and you want to stop, inspect some values and continue? you should consider defining each "step" in where you want to look at as a function, and then you can use things along the lines of "from script import step1, step2, step3" elsewhere</span>
<span class="comment-copy">@jonrsharpe : I cannot know why OP wants to do it but I often paste pieces of scripts in my IDE when doing tests or using Python IDLE as a medium level shell to interactively process data - but I must admit I would never rely on line numbers ...</span>
<span class="comment-copy">why the vote down ?</span>
<span class="comment-copy">Don't know either ... but your solution will close python interpreter when there's a requirement to keep it opened.</span>
<span class="comment-copy">fixed it, added the <code>-i</code></span>
<span class="comment-copy">Thanks for the comment, this was what I asked for. Seems harsh with the vote down, but I guess this is to demotivate noobs like me developing bad practice.</span>
<span class="comment-copy">Executing "from line <code>a</code> to line <code>b</code>" is bad practice indeed. It would only make sense if the file is actually a "scratchpad" and the <code>encoding:</code> line isn't in play.</span>
<span class="comment-copy"><i>"if your goal is to debug that part of the script..."</i> - with <code>.exit</code>, they won't be able to execute the script further other than by copy-pasting, so the advice doesn't further the goal it claims to. The <code>python -i</code> part <i>is</i> useful if the file is some initialization for the interactive session instead. (the 1st part thus warrants an upvote and the 2nd - downvote, so I do neither)</span>
<span class="comment-copy">Looks like this is not seen as a good idea by the community :-( ... I honestly thought it was not so far from what OP asked for, as he even asked the possibility to read (from <code>anotherscript.py</code>) lines in the middle of file (starting at 25) what is allowed with this solution and not with upvoted one. Can someone tell me what is wrong ?</span>
<span class="comment-copy">A discussion on meta let me think that even if that solution is technically correct, it is dangerous. <i>Caveat emptor</i> !</span>
