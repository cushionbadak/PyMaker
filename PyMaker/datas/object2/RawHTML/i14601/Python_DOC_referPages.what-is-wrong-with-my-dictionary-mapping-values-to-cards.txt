<div class="post-text" itemprop="text">
<p>So the game is Blackjack and I have snippets of code to make a deck and make a hand. From the deck, that is a list, I'm trying to build a dictionary so that each card (a tuple from the deck) will have a value mapped to it, as per the rules of Blackjack.</p>
<pre><code>from random import randint

def make_deck():
    deck = []
    for suit in suits:
        for rank in ranks:
            deck.append((suit,rank))
    return deck

suits = ['spades','hearts','diamonds','clubs']
ranks = ['ace','two','three','four','five','six','seven','eight','nine','ten','jack','queen','king']

deck = make_deck()

def make_hand():
    hand = []
    for k in range(2):
        card = deck.pop(randint(0,51))
        hand.append(card)
    return hand

hand = make_hand()

values = {} #empty dictionary
for card in deck:
    rank = [card[1] for card in deck]
    if rank == 'ace':
        values[card] = 1
    elif rank == 'two':
        values[card] = 2
    elif rank == 'three':
        values[card] = 3
    elif rank == 'four':
        values[card] = 4
    elif rank == 'five':
        values[card] = 5
    elif rank == 'six':
        values[card] = 6
    elif rank == 'seven':
        values[card] = 7
    elif rank == 'eight':
        values[card] = 8
    elif rank == 'nine':
        values[card] = 9
    elif rank == 'ten' or 'jack' or 'queen' or 'king':
        values[card] = 10
 print values
</code></pre>
<p>Obviously, this is very much creating the dictionary by brute force and lacks any elegance so any pointers into a more efficient manner would be appreciated. The real issue is that I can't identify what is wrong with my code that <code>print values</code> returns just one tuple mapped to its value rather the entire dictionary. If I move the list comprehension for <code>rank</code> outside of the loop, I just get a dictionary where everything is mapped to the value 10.</p>
<p>Also, I just realized that my <code>make_hand()</code> function sometimes results in an error where "the pop index is out of range," so advice on things to try so that it will work all the time would also be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Replace the line:</p>
<pre><code>rank = [card[1] for card in deck]
</code></pre>
<p>with:</p>
<pre><code>rank = card[1]
</code></pre>
<p>And yes, you can do it more efficiently (and elegantly) by creating a dictionary that maps values to scores:</p>
<pre><code>mapper = {'ace': 1, 'two': 2, ...}
</code></pre>
<p>and then you don't need the if/elif...else:</p>
<pre><code>for card in deck:
    values[card] = mapper[card[1]]
</code></pre>
</div>
<span class="comment-copy">Maybe make the items in <code>ranks</code> (rank, value) tuples. Then you could use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> to retrieve the value out rank.</span>
<span class="comment-copy">In the list comprehension, the program realizes to look at the deck for the cards. If I remove the list comprehension, won't card no longer be defined?</span>
<span class="comment-copy">@ChartererSling I'm not sure I understand what you're saying, did you try my first suggestion ? it should take you 2 secs to try it!</span>
<span class="comment-copy">I tried the more efficient way you suggested and it works like a gem, thank you! I'm just wondering in reference to when you said to replace with <code>rank = card[1]</code>, I received an error where card isn't defined.</span>
<span class="comment-copy">@ChartererSling the line <code>rank = [card[1] for card in deck]</code> creates a list which is assigned to <code>rank</code> and later you're trying to compare <code>rank == 'ace'</code> (for example). This cannot work since a list is not equal to a string. So in the beginning of the answer I wrote to replace this line: <code>rank = [card[1] for card in deck]</code>  with this: <code>rank = card[1]</code>. I hope that this is clearer now.</span>
<span class="comment-copy">Actually, for most efficiency don't use strings at all: strings are for humansl computers use numbers. Use numbers to represent cards, then just convert to strings on input and output.</span>
