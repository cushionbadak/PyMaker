<div class="post-text" itemprop="text">
<p>I am using biopython package and I would like to save result like tsv file. This output from print to tsv.</p>
<pre><code>for record in SeqIO.parse("/home/fil/Desktop/420_2_03_074.fastq", "fastq"):
    print ("%s %s %s" % (record.id,record.seq, record.format("qual")))
</code></pre>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>That is fairly simple , instead of printing it you need to write that to a file.</p>
<pre><code>with open("records.tsv", "w") as record_file:
    for record in SeqIO.parse("/home/fil/Desktop/420_2_03_074.fastq", "fastq"):
        record_file.write("%s %s %s\n" % (record.id,record.seq, record.format("qual")))
</code></pre>
<p>And if you want to name the various columns in the file then you can use:</p>
<pre><code>record_file.write("Record_Id    Record_Seq    Record_Qal\n")
</code></pre>
<p>So the complete code may look like:</p>
<pre><code>with open("records.tsv", "w") as record_file:
    record_file.write("Record_Id    Record_Seq    Record_Qal\n")
    for record in SeqIO.parse("/home/fil/Desktop/420_2_03_074.fastq", "fastq"):
        record_file.write(str(record.id)+"  "+str(record.seq)+"  "+ str(record.format("qual"))+"\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My preferred solution is to use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">CSV</a> module.  It's a standard module, so:</p>
<ul>
<li>Somebody else has already done all the heavy lifting.</li>
<li>It allows you to leverage all the functionality of the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">CSV</a> module.</li>
<li>You can be fairly confident it will function as expected (not always the case when I write it myself).</li>
<li>You're not going to have to reinvent the wheel, either when you write the file or when you read it back in on the other end (I don't know your record format, but if one of your records contains a <kbd>TAB</kbd>,  <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">CSV</a> will escape it correctly for you).</li>
<li>It will be easier to support when the next person has to go in to update the code 5 years after you've left the company.</li>
</ul>
<p>The following code snippet should do the trick for you:</p>
<pre><code>#! /bin/env python3
import csv
with open('records.tsv', 'w') as tsvfile:
    writer = csv.writer(tsvfile, delimiter='\t', newline='\n')
    for record in SeqIO.parse("/home/fil/Desktop/420_2_03_074.fastq", "fastq"):
        writer.writerow([record.id, record.seq, record.format("qual")])
</code></pre>
<p>Note that this is for Python 3.x.  If you're using 2.x, the <code>open</code> and <code>writer = ...</code> will be slightly different.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use the <code>.tsv</code> to label your word embeddings in TensorBoard, use the following snippet. It uses the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">CSV</a> module (see <a href="https://stackoverflow.com/a/29896136/6853900">Doug's answer</a>).</p>
<pre><code># /bin/env python3
import csv

def save_vocabulary():
    label_file = "word2context/labels.tsv"
    with open(label_file, 'w', encoding='utf8', newline='') as tsv_file:
        tsv_writer = csv.writer(tsv_file, delimiter='\t', lineterminator='\n')
        tsv_writer.writerow(["Word", "Count"])
        for word, count in word_count:
            tsv_writer.writerow([word, count])
</code></pre>
<p><code>word_count</code> is a list of tuples like this:</p>
<pre><code>[('the', 222594), ('to', 61479), ('in', 52540), ('of', 48064) ... ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following snippet:</p>
<pre><code>from __future__ import print_function
with open("output.tsv", "w") as f:
  print ("%s\t%s\t%s" % ("asd", "sdf", "dfg"), file=f)
  print ("%s\t%s\t%s" % ("sdf", "dfg", "fgh"), file=f)
</code></pre>
<p>Yields a file <code>output.tsv</code> containing </p>
<pre><code>asd    sdf    dfg
sdf    dfg    fgh
</code></pre>
<p>So, in your case:</p>
<pre><code>from __future__ import print_function
with open("output.tsv", "w") as f:
  for record in SeqIO.parse("/home/fil/Desktop/420_2_03_074.fastq", "fastq"):
    print ("%s %s %s" % (record.id,record.seq, record.format("qual")), file=f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer using <code>join()</code> in this type of code:</p>
<pre><code>for record in SeqIO.parse("/home/fil/Desktop/420_2_03_074.fastq", "fastq"):
    print ( '\t'.join((str(record.id), str(record.seq), str(record.format("qual"))) )
</code></pre>
<p>The 'tab' character is <code>\t</code> and the join function takes the (3) arguments and prints them with a tab in between.</p>
</div>
<span class="comment-copy">In Python 2.7, replace the <code>newline</code> keyword with <code>lineterminator</code>: <a href="https://docs.python.org/2/library/csv.html#csv.Dialect.lineterminator" rel="nofollow noreferrer">docs.python.org/2/library/csv.html#csv.Dialect.lineterminator</a></span>
<span class="comment-copy">The question is about writing the contents to a file.</span>
