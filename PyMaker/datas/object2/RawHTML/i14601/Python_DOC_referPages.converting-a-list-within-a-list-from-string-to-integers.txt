<div class="post-text" itemprop="text">
<p>After approximately eight hours of searching and attempting to implement solutions, I am still vexed by this problem.</p>
<p>I am attempting to make a dinky ANOVA package that can read data from a text file, count the number of participants based on lines within said file, and then run an ANOVA after a few simple calculations.</p>
<p>However, the one thing that's keeping me from finishing this project is converting everything into a calculable format--from string values to integer values.</p>
<p>Here's what I have so far:</p>
<pre><code>def cond1():
    cond1file=open("condition1.txt","r")
    c1resplist=[]
    line=cond1file.readline()
    while line !='':
        line=line.split()
        c1resplist.append(line)
        line=(cond1file.readline())
    cond1file.close()
    participants=0
    with open("condition1.txt","r") as f:
        for line in f:
            participants+=1
</code></pre>
<p>And here's the text from the data file it's reading:</p>
<blockquote>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
<p>1 2 3 1 2 3</p>
</blockquote>
<p>Here's the output generated by the readline portion:</p>
<pre><code>[['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3'], ['1', '2', '3', '1', '2', '3']]
</code></pre>
<p>I'd really appreciate any and all guidance. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>map</code> to convert the strings to ints.</p>
<p>(You seem to have an extra iteration to find the number of participants which can be counted during the first loop) </p>
<pre><code>def cond1_a():
    c1resplist=[]
    participants=0
    with open("condition1.txt","r") as f:
        for line in f:
            c1resplist.append(list(map(int, line.split())))
            participants+=1
    return c1resplist, participants

print(cond1_a())
# ([[1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3]], 10)
</code></pre>
<p>You can also use a list comprehension:</p>
<pre><code>def cond1_b():
    with open("condition1.txt","r") as f:
        c1resplist = [list(map(int, line.split())) for line in f]
    return c1resplist, len(c1resplist)

print(cond1_b())
# ([[1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3]], 10)
</code></pre>
<p>Or instead of map, use a nested list comprehension:</p>
<pre><code>def cond1_c():
    with open("condition1.txt","r") as f:
        c1resplist = [[int(x) for x in line.split()] for line in f]
    return c1resplist, len(c1resplist)
print cond1_c()
# ([[1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3]], 10)
</code></pre>
<hr/>
<p><em>edit:</em>
As @Padraic Cunningham mentions, python 3 requires using <code>list(map(fn, it))</code> since <code>map</code> returns <code>map objects</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of this:</p>
<pre><code>c1resplist.append(line)
</code></pre>
<p>use this instead:</p>
<pre><code>c1resplist.append([int(x) for x in line])
</code></pre>
<p>This <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> iterates over each item in the <code>line</code> list, and changes it to an <code>int</code>. The new list is then appended to your existing <code>c1resplist</code> list.</p>
<hr/>
<p>There are plenty of ways to improve your current code (for example, you are opening and iterating over the file twice), but this should at least get you the data you're looking for.</p>
</div>
<span class="comment-copy">use the <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int()</code></a> function</span>
<span class="comment-copy">Where? I'm not seeing how to implement this, especially when throwing int() into it will only try to change the break into an integer, also. Will this work if I attempt to strip the break? Where would that be accomplished?</span>
<span class="comment-copy">What "break" are you talking about?</span>
<span class="comment-copy">See my answer below. You call <code>int</code> on each item in the list, not the raw line...</span>
<span class="comment-copy">why are you opening and iterating correctly when you open the second file but using a while loop for the first? Also why open the file twice instead of incrementing  participants when you open the first time?</span>
<span class="comment-copy">You need <code>list(map</code> for python3</span>
<span class="comment-copy">Ahh didn't see the tag. Will update. Thanks.</span>
<span class="comment-copy">That did the trick! Thanks a lot! The refining will come--just trying to get this in a working format at the moment.</span>
