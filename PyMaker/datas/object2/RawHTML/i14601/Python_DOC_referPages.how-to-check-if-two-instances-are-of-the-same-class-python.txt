<div class="post-text" itemprop="text">
<p>So in my pygame game, I have created a list of objects to make things like updating them all and collision checking easier. So when I'm collision checking, I have to check if the current object is the same as the object we are collision checking with. Here is my current code:</p>
<pre><code>def placeMeeting(self, object1, object2):

    # Define positioning variables
    object1Rect = pygame.Rect(object1.x, object1.y, object1.width, object1.height)

    # Weather or not they collided
    coll = False

    # Loop through all walls to check for possible collision
    for i in range(len(self.instances)):

        # First check if it's the right object
        if (self.instances[i] == object2):
            print "yep"
            object2Rect = pygame.Rect(self.instances[i].x, self.instances[i].y, self.instances[i].width, self.instances[i].height)

            # Check for collision with current wall -- Horizontal
            if (object1Rect.colliderect(object2Rect)):
                coll = True

    # Return the final collision result
    return coll
</code></pre>
<p>(All objects in the list/array are a child to the su)</p>
</div>
<div class="post-text" itemprop="text">
<p>Apart from <code>type</code> way in previous answer, I think you can use <code>isinstance</code>. <a href="https://docs.python.org/2/library/functions.html#isinstance" rel="nofollow">https://docs.python.org/2/library/functions.html#isinstance</a></p>
<p>Operator <code>is</code> can be used for object checking such as <code>a is b</code> if a and b are same objects. Remember <code>is</code> checks only objects and not their values. Or, I havenot seen anyone do this, I guess <code>id(obj1) == id(obj)</code> would work as well when you need to check if two objects are same.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple, yet powerful =&gt;  <code>type(a) is type(b)</code></p>
<pre><code>&gt;&gt;&gt; class A:
...     pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = A()
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a == b
False
&gt;&gt;&gt; type(a)
&lt;class '__main__.A'&gt;
&gt;&gt;&gt; type(b)
&lt;class '__main__.A'&gt;
&gt;&gt;&gt; type(a) is type(b)
True
&gt;&gt;&gt; type(a) == type(b)
True
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can check to see the type of a variable using the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code></a> function. So your code would read as below:</p>
<pre><code>if(type(self.instances[i]) is MyCustomType):
</code></pre>
<p>This would check to see if <code>instance[i]</code> is of type <code>MyCustomType</code>. You can replace this with inbuilt types such as <code>dict</code>, <code>list</code>, <code>int</code>, <code>str</code> etc. or it can be custom types/objects you have declared.</p>
<p>It is important to note that it will only check the object type and not the object's values. So it will not see if two objects hold identical values.</p>
<p>It is also a bit tricky when we come to inheritance, so there are more examples in this answer <a href="https://stackoverflow.com/questions/2225038/python-determine-the-type-of-an-object">Determine the type of an object?</a></p>
<p>Also take note from the comments to this answer, as if you are using Python 2.x and not inheriting from <code>object</code> when declaring custom Classes this solution may not work.</p>
<hr/>
<p>If you want to know if two instances of a class hold the same value you will have to implement the <code>__eq__</code> function/method into the class definition. See SO answer <a href="https://stackoverflow.com/questions/6423814/is-there-a-way-to-check-if-two-object-contain-the-same-values-in-each-of-their-v">Is there a way to check if two object contain the same values in each of their variables in python?</a> for more details.</p>
</div>
<span class="comment-copy">Do you need to know if they're of the same class, or if they're actually the same object?</span>
<span class="comment-copy">Is this Python 2 or Python 3?</span>
<span class="comment-copy">Alright, I'll give it a try tomorrow. (It's late here.) Thanks for the response mate.</span>
<span class="comment-copy">I think that for this to work in Python 2.7, the classes need to inherit from <code>object</code> type because if you don't do so, then <code>type(instance_name)</code> will give you <code>&lt;type 'instance'&gt;</code>. Inheriting from <code>object</code> will make them behave more like Python 3 classes. Another (dubious) way to do it is <code>obj1.__class__.__name__ ==  obj2.__class__.__name__</code>. This works for Python 2 classes by default.</span>
<span class="comment-copy">This is true, when a class it is defined in python 2.x it should inherit from the object. So when defining your class make sure it looks as follows: <code>class MyCustomType(object):</code> not just <code>class MyCustomType:</code></span>
