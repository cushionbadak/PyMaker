<div class="post-text" itemprop="text">
<p>To clarify the reason for this question:</p>
<ol>
<li><p>It is confusing to use two modules with the same name. What do they represent that makes them distinct?</p></li>
<li><p>What task(s) can one solve that the other can't and vice-versa?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/asyncio-task.html#future"><code>asyncio</code> documentation</a> covers the differences:</p>
<blockquote>
<p>class <code>asyncio.Future(*, loop=None)</code></p>
<p>This class is almost compatible with <code>concurrent.futures.Future</code>.</p>
<p>Differences:</p>
<ul>
<li><code>result()</code> and <code>exception()</code> do not take a timeout argument and raise an exception when the future isn’t done yet.</li>
<li>Callbacks registered with <code>add_done_callback()</code> are always called via the event loop’s <code>call_soon_threadsafe()</code>.</li>
<li>This class is not compatible with the <code>wait()</code> and <code>as_completed()</code> functions in the <code>concurrent.futures</code> package.</li>
</ul>
<p>This class is not thread safe.</p>
</blockquote>
<p>Basically, if you're using <code>ThreadPoolExecutor</code> or <code>ProcessPoolExecutor</code>, or want to use a <code>Future</code> directly for thread-based or process-based concurrency, use <code>concurrent.futures.Future</code>. If you're using <code>asyncio</code>, use <code>asyncio.Future</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/asyncio.html#module-asyncio" rel="nofollow">docs</a>:</p>
<blockquote>
<p>[<code>asyncio</code> provides a] Future class that mimics the one in the concurrent.futures module, but adapted for use with the event loop; </p>
</blockquote>
</div>
<span class="comment-copy">So it isn't thread safe, unless you use  <code>add_done_callback()</code>?</span>
<span class="comment-copy"><code>asyncio.Future</code> isn't thread-safe at all - it's only designed to be used in a single-threaded, <code>asyncio</code>-based application. If you want to call a method on <code>asyncio.Future</code> from a thread outside of the event loop thread, you'd need to use <code>loop.call_soon_threadsafe</code>.</span>
<span class="comment-copy">Does that mean they have duplicated functionality?</span>
<span class="comment-copy">Yes; please refer to the docstring for <code>asyncio.futures.Future</code>.</span>
<span class="comment-copy">Thanks, the more I read the docstrings, the clearer the difference gets.</span>
