<div class="post-text" itemprop="text">
<p>I can get the function to work regularly but when I do it recursively, it repeats infintely and I have to 'Ctrl C'to end it in the shell. </p>
<p>Non recursive</p>
<pre><code>def convert_10_to_16(n):
  hexlist =[]
  x = n // 16
  if x &lt; 10:
    hexlist.append(x)
  elif (x == 10):
    hexlist.append('A')
  elif (x == 11):
    hexlist.append('B')
  elif (x == 12):
    hexlist.append('C')
  elif (x == 13):
    hexlist.append('D')
  elif (x == 14):
    hexlist.append('E')
  elif (x == 15):
    hexlist.append('F')

  y = n % 16
  if y &lt; 10:
    hexlist.append(y)
  elif (y == 10):
    hexlist.append('A')
  elif (y == 11):
    hexlist.append('B')
  elif (y == 12):
    hexlist.append('C')
  elif (y == 13):
    hexlist.append('D')
  elif (y == 14):
    hexlist.append('E')
  elif (y == 15):
    hexlist.append('F')
  return ''.join(hexlist)
</code></pre>
<p>Recursive</p>
<pre><code>def convert_10_to_16(n):
  hexlist =[]
  x = n // 16
  if x &lt; 10:
    hexlist.append(x)
  elif (x == 10):
    hexlist.append('A')
  elif (x == 11):
    hexlist.append('B')
  elif (x == 12):
    hexlist.append('C')
  elif (x == 13):
    hexlist.append('D')
  elif (x == 14):
    hexlist.append('E')
  elif (x == 15):
    hexlist.append('F')

  y = n % 16
  if y &lt; 10:
    hexlist.append(y)
  elif y &gt;= 10:
    z = y 
    convert_10_to_16(z)
</code></pre>
<p>I'm not sure how I can get it to work recursively so any help is greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a recursive case and a base case.</p>
<p>But more important than that is to use variable names that <strong>have meaning</strong>.</p>
<pre><code>def convert_digit_to_hex(x):
    if x &lt; 10:
        return str(x)
    elif (x == 10):
        return 'A'
    elif (x == 11):
        return 'B'
    elif (x == 12):
        return 'C'
    elif (x == 13):
        return 'D'
    elif (x == 14):
        return 'E'
    elif (x == 15):
        return 'F'

def convert_number_to_hex(n):
    remaining_digits = n // 16
    last_digit       = n % 16

    if remaining_digits == 0:
        return convert_digit_to_hex(first_digit)
    else:
        return convert_number_to_hex(remaining_digits) + convert_digit_to_hex(last_digit)
</code></pre>
</div>
<span class="comment-copy">the indentation is off</span>
<span class="comment-copy">yeah its correct in my python shell. didnt copy over correctly i guess</span>
<span class="comment-copy">You know you can do <code>assert 'A' == hex(10).upper()[-1]</code>, right? <code>hex</code> is a built-in function with <a href="https://docs.python.org/3/library/functions.html#hex" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">we cant use built in python functions :/</span>
<span class="comment-copy">Why can't you use built in functions? Your manager is insane. I would complain to human resources.</span>
<span class="comment-copy">meaning, like "first_digit" which is the last digit? ;) and you switched the two, so you have a bug.</span>
<span class="comment-copy">your code still returns an infinite loop</span>
<span class="comment-copy">@KarolyHorvath: That I did.</span>
