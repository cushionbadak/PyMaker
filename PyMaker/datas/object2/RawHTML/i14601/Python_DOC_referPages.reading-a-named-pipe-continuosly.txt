<div class="post-text" itemprop="text">
<p>What is the best way to read a named pipe continuously in Python? </p>
<p>This is my current code: </p>
<pre><code>def read_commands():
    try:
        print "Creating read pipe..."
        os.mkfifo(pipe_cmd)    # Create pipe
        print "Pipe created!"
    except:
        print "Pipe already exists"

    with open(pipe_cmd, "r") as pipecmd:
        while True:
            try:
                line = pipecmd.readline()
            except:
                print "Could not read cmd pipe"

            if line != "":
                print line

        #time.sleep(1)
</code></pre>
<p>However, when I run this code it seems to be taking a lot of resources from my CPU (One of them will go to 100%). It works fine with the sleep of 1 second. However, I need to read the pipe continuously to make sure if there is <strong>new data</strong>. Is there a better way to accomplish this?</p>
<p>This is what I am sending to the pipe in C++:</p>
<pre><code>void write_pipe(){
    ofstream pipe("/tmp/okccmd");  // Open the pipe
    string data = "Hi";
    pipe &lt;&lt; data &lt;&lt; endl;
    pipe.flush();
}
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>select.poll works fine (at least for Linux, not sure if Windows supports this; select.select ist afaik available, however). Just have a look at the documentation, the module is in the standard library and well documented (there is no need to know how the OS select() function actually works).</p>
<p>Documentation:
<a href="https://docs.python.org/3/library/select.html" rel="nofollow">https://docs.python.org/3/library/select.html</a></p>
<p>Note: poll() returns a list of file descriptors, not file-objects. So, you should have a dict which maps file descriptors to the corresponding object (I would have this also if I just poll one file.</p>
<pre><code>pollobj = select.poll()
polled_files = dict()

# the following two lines are reuired for every file
pollobj.register(my_file_obj, &lt;EVENTMASK&gt;)
polled_files[my_file_obj.fileno()] = my_file_obj

for fd, evt in pollobj.poll():
    fileobj = polled_files[fd]
    ... process event for fileobj
</code></pre>
</div>
<span class="comment-copy">look into the <code>select</code> module</span>
<span class="comment-copy">Do you know of any good tutorial I should look into?</span>
<span class="comment-copy">Is there always data to read from the other end of the pipe? The <code>readline</code> call should block if there's nothing to read, so I'm surprised you're seeing a CPU spike unless it's actually continuously reading.</span>
<span class="comment-copy">That's what I thought too... No there shouldn't be data always. Unless my C++ program is treating it as a regular file. How should I now if this is the case? I have posted the c++ code.</span>
<span class="comment-copy">@dano I just confirmed it... The readline is not blocking anything! The while loop still continues. Any idea of why this could be the case?</span>
<span class="comment-copy">How would this work in an interleaved fashion? I'd like to poll, but on an extra condition.</span>
<span class="comment-copy">What do you mean with "interleaved" in this context? And what condition? There are no conditions beyond what you can find in the documenation of <code>poll()</code>. If you have another question, please open a new one, comments are not for extended discussion of follow-up questions (see <a href="https://stackoverflow.com/tour">tour</a> ff). Just do reasonable research <b>before</b> asking, see <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>, it's most likely your question has already been asked, mayybe under a different premise (using the standard terms also enhances the chance to find it yourself).</span>
