<div class="post-text" itemprop="text">
<p>I know the sorted() function in Python can operate on a number list or dictionaries, and it returns a list of sorted number or keys. For example:</p>
<pre><code>w = [1,4,6,8,2,0,3,2]
sorted(w)
</code></pre>
<p>Then we can obtain the re-arranged sorted number list as [0,1,2,2,3,4,6,8]</p>
<p>My question is that: does sorted() function have any other functionality? I hope you guys could give me some simple examples. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <code>sorted</code> takes in any iterable (<code>list</code>, <code>dict</code>, <code>tuple</code>), e.g.,</p>
<pre><code>&gt;&gt;&gt; sorted([3,4,2,5]) # list
[2, 3, 4, 5]
&gt;&gt;&gt; sorted({1: 'hello', 2: 'there', 4: 'foo', 3: 'bar'}) # dict
[1, 2, 3, 4]
&gt;&gt;&gt; sorted(('Foo', 'Bar', 'Baz')) # tuple
</code></pre>
<p>Also, it can optionally take in a <code>key</code>, which means you can sort by some characteristic. For example, you could sort a string alphabetically or lexicographically:</p>
<pre><code>&gt;&gt;&gt; sorted(['hello', 'foo', 'bar'], key=str.lower)
['bar', 'foo', 'hello']
&gt;&gt;&gt; sorted(['hello', 'foo', 'bar'], key=len)
['foo', 'bar', 'hello']
</code></pre>
<p>A cool feature of sorting using a given <code>key</code> means you can also provide a <code>lambda</code> expression, so, as in the following example, you can sort by the length of a dictionary value (list):</p>
<pre><code>&gt;&gt;&gt; x = { 1: ['a', 'b', 'c'], 2: ['d'], 3: ['e', 'f'] }
&gt;&gt;&gt; sorted( x, key=lambda k: len(x[k]) )
[2, 3, 1]
</code></pre>
<p>This also works with tuples:</p>
<pre><code>&gt;&gt;&gt; x = [('foo', 3, 2), ('bar', 1, 4), ('baz', 4, 1)]
&gt;&gt;&gt; sorted(x, key=lambda k: k[1])
[('bar', 1, 4), ('foo', 3, 2), ('baz', 4, 1)]
</code></pre>
<p>Note that when sorting nested <code>list</code>s or <code>tuple</code>s (or other iterables), it will sort first by the first inner index and then by the subsequent inner indices.</p>
<p>You can also specify how you want to sort a class:</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, name, age):
...         self.name = name
...         self.age = age
...     def __repr__(self): # this will help us recognize our objs after we've sorted
...         return "&lt;name: {name}, age: {age}&gt;".format(name=self.name, age=self.age)
&gt;&gt;&gt; f = Foo('Bar', 3)
&gt;&gt;&gt; g = Foo('Baz', 4)
&gt;&gt;&gt; def byAge(foo): return foo.age
&gt;&gt;&gt; sorted([f, g], key=byAge)
[&lt;name: Bar, age: 3&gt;, &lt;name: Baz, age: 4&gt;]
</code></pre>
<p>You can also use <code>attrgetter</code> to get an object's attribute to dictate what you want to sort on:</p>
<pre><code>&gt;&gt;&gt; from operator import attrgetter
&gt;&gt;&gt; sorted([f, g], key=attrgetter('age'))
[&lt;name: Bar, age: 3&gt;, &lt;name: Baz, age: 4&gt;]
</code></pre>
<p>Furthermore, with <code>key</code>, you can have a function that combines multiple keys, e.g.,</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, name, age, years_programming):
...         self.name = name
...         self.age = age
...         self.years_programming = years_programming
...     def __repr__(self): # this will help us recognize our objs after we've sorted
...         return "&lt;name: {name}, age: {age}, years_prog: {years}&gt;".format(name=self.name, age=self.age, years=self.years_programming)
&gt;&gt;&gt; f = Foo('Bar', 3, 1)
&gt;&gt;&gt; g = Foo('Baz', 4, 3)
&gt;&gt;&gt; h = Foo('John', 10, 0)
&gt;&gt;&gt; def by_years_experience(foo):
...     return foo.age * foo.years_programming
&gt;&gt;&gt; sorted([f, g, h], key=by_years_experience)
[&lt;name: John, age: 10, years_prog: 0&gt;, &lt;name: Bar, age: 3, years_prog: 1&gt;, &lt;name: Baz, age: 4, years_prog: 3&gt;]
</code></pre>
<p>Next, you can specify whether or not you want a reverse sort:</p>
<pre><code>&gt;&gt;&gt; sorted([3,4,7,2,1], reverse=True)
[7, 4, 3, 2, 1]
</code></pre>
<p><code>sorted</code> also works with lists of multiple types (only in Python 2):</p>
<pre><code>&gt;&gt;&gt; a = [('hello', 1, 2), ['foo', 5, 3], {0: 'bar', 1: 'baz'}]
&gt;&gt;&gt; sorted(a)
[{0: 'bar', 1: 'baz'}, ['foo', 5, 3], ('hello', 1, 2)]
&gt;&gt;&gt; sorted(a, key=lambda x: x[1])
[('hello', 1, 2), ['foo', 5, 3], {0: 'bar', 1: 'baz'}]
&gt;&gt;&gt; b = ['hello', 1, 3]
&gt;&gt;&gt; sorted(b)
[1, 3, 'hello']
</code></pre>
<p>Note: sorting among multiple types does <em>not</em> work in Python 3. You'll get a <code>TypeError</code>.</p>
<p>Lastly and for historical reasons, Python's <code>sorted</code> allows for a <code>cmp</code>, or comparison function. For example:</p>
<pre><code>&gt;&gt;&gt; def reverse_numeric(x, y):
...     return y - x
&gt;&gt;&gt; sorted([3,4,7,2,1], cmp=reverse_numeric)
[7, 4, 3, 2, 1]
</code></pre>
<p>It should be noted, too, that Python's <code>sorted</code> uses <a href="http://en.wikipedia.org/wiki/Timsort" rel="nofollow">Timsort</a> as its sorting algorithm, which is a <a href="http://en.wikipedia.org/wiki/Category:Stable_sorts" rel="nofollow">stable sort</a>. This means that if there are multiple of the same element (or field), the original order will be preserved.</p>
<p>Sources:</p>
<ul>
<li><p><a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow">https://docs.python.org/2/library/functions.html#sorted</a></p></li>
<li><p><a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow">https://docs.python.org/3/howto/sorting.html</a></p></li>
<li><p><a href="https://wiki.python.org/moin/HowTo/Sorting" rel="nofollow">https://wiki.python.org/moin/HowTo/Sorting</a></p></li>
<li><p><a href="http://www.thegeekstuff.com/2014/06/python-sorted/" rel="nofollow">http://www.thegeekstuff.com/2014/06/python-sorted/</a></p></li>
<li><p><a href="http://www.peterbe.com/plog/sorting-mixed-type-lists-in-python-3" rel="nofollow">http://www.peterbe.com/plog/sorting-mixed-type-lists-in-python-3</a></p></li>
</ul>
</div>
<span class="comment-copy">did you checkout <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow noreferrer">the documentation</a> ?</span>
<span class="comment-copy">Yes, but sometimes I was confused about the words in the documentation. I want to see more examples.</span>
<span class="comment-copy">You are awesome!</span>
<span class="comment-copy">Hope this helps -- I know documentation can be confusing at times or lacking examples, so hopefully this will give you a good (high-level) foundation going forward. :)</span>
<span class="comment-copy">I do not know why somebody give me adverse score about my topic,  I just want to get some examples.</span>
