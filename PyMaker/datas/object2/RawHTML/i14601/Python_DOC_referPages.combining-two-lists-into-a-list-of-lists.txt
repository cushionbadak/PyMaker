<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<pre><code>a = ['1', '2']
b = ['11', '22', '33', '44']
</code></pre>
<p>And I to combine them to create a list like the one below: </p>
<pre><code>op = [('1', '11'), ('2', '22'), ('', '33'), ('', '44')]
</code></pre>
<p>How could I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You want <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow">itertools.zip_longest</a> with a <code>fillvalue</code> of an empty string:</p>
<pre><code>a = ['1', '2']
b = ['11', '22', '33', '44']

from itertools import zip_longest # izip_longest for python2

print(list(zip_longest(a,b, fillvalue="")))
[('1', '11'), ('2', '22'), ('', '33'), ('', '44')]
</code></pre>
<p>For python2 it is <strong>izip_longest</strong>:</p>
<pre><code>from itertools import izip_longest 

print(list(izip_longest(a,b, fillvalue="")))
[('1', '11'), ('2', '22'), ('', '33'), ('', '44')]
</code></pre>
<p>If you just want to use the values you can iterate over the the izip object:</p>
<pre><code>for i,j  in izip_longest(a,b, fillvalue=""):
   # do whatever
</code></pre>
<p>Some timings vs using map:</p>
<pre><code>In [51]: a = a * 10000

In [52]: b = b * 9000

In [53]: timeit list(izip_longest(a,b,fillvalue=""))
100 loops, best of 3: 1.91 ms per loop

In [54]: timeit [('', i[1]) if i[0] == None else i  for i in map(None, a, b)]
100 loops, best of 3: 6.98 ms per loop
</code></pre>
<p><code>map</code> also creates another list using python2 so for large lists or if you have memory restrictions it is best avoided.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.7: another way to do this:</p>
<pre><code>[('', i[1]) if i[0] == None else i for i in map(None, a, b)]
</code></pre>
<p>For the example lists given in the question, this way is faster than using using izip_longest: </p>
<pre><code>&gt;&gt;&gt; timeit.timeit("[('', i[1]) if i[0] == None else i  for i in map(None, a, b)]", 'from __main__ import a, b')
1.3226220607757568

&gt;&gt;&gt; timeit.timeit("list(itertools.izip_longest(a, b, fillvalue=''))", 'from __main__ import a, b')
1.629504919052124
</code></pre>
<p>If the lists are longer and the non-existing value is to be filled with <code>''</code> then <code>izip_longest</code> is significantly faster. </p>
<p>However, if you are content for the resulting list to be creating with a <code>None</code> rather than a <code>''</code>, you don't need the list comprehension or the conditional: just <code>map(None, a, b)</code>. Then the speed can be similar to that of <code>izip_ilongest</code> for longer lists.</p>
<p>Note that when lists of unequal length are to be combined it is not necessarily the case  that the result should take the length of the longer one. If you want a zip type function to always take the length of the first argument then the answers to the SO question "<a href="https://stackoverflow.com/questions/13341224/is-there-a-middle-ground-between-zip-and-zip-longest">Is there a middle ground between `zip` and `zip_longest`</a>" are illuminating.</p>
</div>
<span class="comment-copy">it says cannot import name zip_longest</span>
<span class="comment-copy"><code>izip_longest for python2</code></span>
<span class="comment-copy">I am using python 2.7</span>
<span class="comment-copy">how can i get solution for 2.7?</span>
