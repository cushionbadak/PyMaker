<div class="post-text" itemprop="text">
<p>I don't know why I'm just not getting this, but I want to use mock in Python to test that my functions are calling functions in ftplib.FTP correctly. I've simplified everything down and still am not wrapping my head around how it works. Here is a simple example:</p>
<pre><code>import unittest
import ftplib
from unittest.mock import patch

def download_file(hostname, file_path, file_name):
    ftp = ftplib.FTP(hostname)
    ftp.login()
    ftp.cwd(file_path)

class TestDownloader(unittest.TestCase):

    @patch('ftplib.FTP')
    def test_download_file(self, mock_ftp):
        download_file('ftp.server.local', 'pub/files', 'wanted_file.txt')

        mock_ftp.cwd.assert_called_with('pub/files')
</code></pre>
<p>When I run this, I get:</p>
<pre><code>AssertionError: Expected call: cwd('pub/files')
Not called
</code></pre>
<p>I know it must be using the mock object since that is a fake server name, and when run without patching, it throws a "socket.gaierror" exception.</p>
<p>How do I get the actual object the fuction is running? The long term goal is not having the "download_file" function in the same file, but calling it from a separate module file.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do <code>patch(ftplib.FTP)</code> you are patching <code>FTP</code> constructor. <code>dowload_file()</code> use it to <em>build</em> <code>ftp</code> object so your <code>ftp</code> object on which you call <code>login()</code> and <code>cmd()</code> will be <code>mock_ftp.return_value</code> instead of <code>mock_ftp</code>.</p>
<p>Your test code should be follow:</p>
<pre><code>class TestDownloader(unittest.TestCase):

    @patch('ftplib.FTP', autospec=True)
    def test_download_file(self, mock_ftp_constructor):
        mock_ftp = mock_ftp_constructor.return_value
        download_file('ftp.server.local', 'pub/files', 'wanted_file.txt')
        mock_ftp_constructor.assert_called_with('ftp.server.local')
        self.assertTrue(mock_ftp.login.called)
        mock_ftp.cwd.assert_called_with('pub/files')
</code></pre>
<p>I added all checks and <code>autospec=True</code> just because is a <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing">good practice</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest using <strong>pytest</strong> and <strong>pytest-mock</strong>. </p>
<pre><code>from pytest_mock import mocker


def test_download_file(mocker):
    ftp_constructor_mock = mocker.patch('ftplib.FTP')
    ftp_mock = ftp_constructor_mock.return_value

    download_file('ftp.server.local', 'pub/files', 'wanted_file.txt')

    ftp_constructor_mock.assert_called_with('ftp.server.local')
    assert ftp_mock.login.called
    ftp_mock.cwd.assert_called_with('pub/files')
</code></pre>
</div>
<span class="comment-copy">This didn't quite work for me, but <a href="https://stackoverflow.com/questions/28850070/python-mocking-a-context-manager">this question</a> helped.  I had to change the line <code>mock_ftp = mock_ftp_constructor.return_value</code> to <code>mock_ftp = mock_ftp_constructor.return_value.__enter__.return_value</code>.</span>
