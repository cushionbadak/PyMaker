<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4198906/list-comprehension-rebinds-names-even-after-scope-of-comprehension-is-this-righ">List comprehension rebinds names even after scope of comprehension. Is this right?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I can't find anywhere that defines this behaviour:</p>
<pre><code>if [x for x in [0, 1, -1] if x &gt; 0]:
    val = x
</code></pre>
<p>How safe is this code? Will <code>val</code> always be assigned to the last element in the list if any element in the list is greater than 0? </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.x, variables defined inside list comprehensions leak into their enclosing scope, so yes, <code>val</code> will always be bound to the last value bound to <code>x</code> during the list comprehension (as long as the result of the comprehension is a non-empty, and therefore "truthy", list).</p>
<p>However, in Python 3.x, this is no longer the case:</p>
<pre><code>&gt;&gt;&gt; x = 'foo'
&gt;&gt;&gt; if [x for x in [0, 1, -1] if x &gt; 0]:
...     val = x
... 
&gt;&gt;&gt; val
'foo'
</code></pre>
<p>The behaviour is (just barely) documented <a href="https://docs.python.org/2/reference/expressions.html#id20" rel="nofollow">here</a>:</p>
<blockquote>
<p>In Python 2.3 and later releases, a list comprehension “leaks” the control variables of each <code>for</code> it contains into the containing scope. However, this behavior is deprecated, and relying on it will not work in Python 3.</p>
</blockquote>
<p>... with the change in Python 3.x documented <a href="https://docs.python.org/3/whatsnew/3.0.html#changed-syntax" rel="nofollow">here</a>:</p>
<blockquote>
<p><em>[...]</em> note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow"><code>list()</code></a> constructor, and in particular the loop control variables are no longer leaked into the surrounding scope.</p>
</blockquote>
<p>It would appear that the 2.x behaviour wasn't something anyone was particularly proud of, and in fact Guido van Rossum refers to it as 'one of Python's "dirty little secrets"' in a <a href="http://python-history.blogspot.com/2010/06/from-list-comprehensions-to-generator.html" rel="nofollow">blog post</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is it not easier like that?</p>
<pre><code>for x in [0, 1, -1]:
    if x &gt; 0:
        val = x
</code></pre>
</div>
<span class="comment-copy">I tried this out (on python 2.6.6, but I guess it is not much difference), and to me it gave -1 as result. I guess it has to do with how the list comprehension works. I <i>think</i> that first the value is substituted, and then checked against the if clause. (Btw., I'm a bit surprised that x is in scope outside of the comprehension...)</span>
<span class="comment-copy">Thanks, I made a typo in the question, val seems to always equal -1 at the end of the loop I assume that if there is a list returned then x will always remain equal to the last element in the list, or at least that's how it seems. I too was surprised that x is still in the scope.</span>
<span class="comment-copy">@MatthewTodd val does seem to equal the last element in the list when I used the code above and added more elements to the list. On a side note, <code>print [x for x in [0, 1, -1] if x&gt;0]</code> prints <code>[1]</code>. That said, it doesn't work in python 3.</span>
<span class="comment-copy">Can you explain it?</span>
<span class="comment-copy">This does not give the same result. The code in my question will assign var to be the final element in the list if any element of the list is greater than 0 where as yours will return the last element in the list that is greater than 0.</span>
