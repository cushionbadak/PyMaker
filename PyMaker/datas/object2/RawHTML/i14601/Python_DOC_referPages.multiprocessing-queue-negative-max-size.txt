<div class="post-text" itemprop="text">
<p>There are some examples of code that specify a negative number for the <code>maxsize</code> of a <code>multiprocessing.Queue</code> like so</p>
<pre><code>import multiprocessing
queue = multiprocessing.Queue(-1)
</code></pre>
<p>I could not find anything in the documentation that specifies what a negative value means so I looked at the <code>multiprocessing.Queue</code> source code.</p>
<pre><code>class Queue(object):

    def __init__(self, maxsize=0):
        if maxsize &lt;= 0:
            maxsize = _multiprocessing.SemLock.SEM_VALUE_MAX
        self._maxsize = maxsize
        ...
</code></pre>
<p>I can't seem to find the value for <code>_multiprocessing.SemLock.SEM_VALUE_MAX</code>. Does a negative number create the biggest Queue possible supported by the OS? Is there any documentation that clarifies this magic value?</p>
</div>
<div class="post-text" itemprop="text">
<p>The docs for <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue" rel="nofollow"><code>multiprocessing.Queue</code></a> apparently don't say this directly, but it's strongly implied in two  places.</p>
<p>First, the <code>Queue</code> docs say:</p>
<blockquote>
<p><code>Queue</code> implements all the methods of <a href="https://docs.python.org/3/library/queue.html#queue.Queue" rel="nofollow"><code>queue.Queue</code></a> except for <code>task_done()</code> and <code>join()</code>.</p>
</blockquote>
<p>And earlier, in <a href="https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow">Exchanging objects between processes</a>:</p>
<blockquote>
<p>The <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue" rel="nofollow"><code>Queue</code></a> class is a near clone of <a href="https://docs.python.org/3/library/queue.html#queue.Queue" rel="nofollow"><code>queue.Queue</code></a>.</p>
</blockquote>
<p>And, if you follow the link:</p>
<blockquote>
<p>Constructor for a FIFO queue. <em>maxsize</em> is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If <em>maxsize</em> is less than or equal to zero, the queue size is infinite.</p>
</blockquote>
<p>So, yes, -1 is documented to mean infiniteâ€¦ although maybe not in the most direct way possible.</p>
<p>You could file a doc bug on this. Maybe all of the classes should explicitly say "The interface is exactly like <code>&lt;relevant other class, with link</code>&gt; except as specified below", instead of leaving you to find that information elsewhere in the docs?</p>
<hr/>
<p>Since you actually asked two questions, not one, here's where <code>SEM_VALUE_MAX</code> is defined:</p>
<p>In <a href="https://hg.python.org/cpython/file/bd656916586f/Modules/_multiprocessing/multiprocessing.c#l156" rel="nofollow"><code>PyInit__multiprocessing</code></a>, the top-level code for the <code>_multiprocessing</code> module, it's added dynamically to the <code>__dict__</code> of the <code>SemLock</code> type.</p>
<p>The value it gets set to is platform-specific, but it's generally going to be your platform's <code>SEM_VALUE_MAX</code> or <code>INT_MAX</code>. The former is defined in <a href="http://pubs.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html" rel="nofollow">POSIX 2004</a> as part of <code>limits.h</code>, and just specifies:</p>
<blockquote>
<p>The maximum value a semaphore may have.</p>
</blockquote>
<p>The source comments may be a bit confusing.</p>
<p>I don't know about NetBSD, but IIRC, old FreeBSD did the same: the value is provided as a signed integer (actually, it's just a <code>#define</code> preprocessor macro, but that makes it an <code>int</code>-typed constant), but the APIs that use it take unsigned values. In C, you can just pass <code>-1</code> to a function that takes an <code>unsigned int</code> and it's the same as passing <code>UINT_MAX</code> (4294967295). Python doesn't have those casting rules, so the module just converts a -1 to <code>INT_MAX</code> (2147483647), which is safer, and you're not going to have more than 2.1 billion semaphores. I believe current FreeBSD and its descendants, like OS X, just give you <code>USHORT_MAX</code> (32767), which makes this unnecessary, but there may be other OS's that do the same.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I can't seem to find the value for _multiprocessing.SemLock.SEM_VALUE_MAX</p>
</blockquote>
<p>Try this:</p>
<p><code>python -c "import _multiprocessing; import platform; print platform.platform(),  _multiprocessing.SemLock.SEM_VALUE_MAX"</code></p>
<p>Specific values found so far (please edit and update accordingly):</p>
<pre><code># OSX 10.9.5
Darwin-13.4.0-x86_64-i386-64bit 32767 
# Linux Mint Qiana
Linux-3.13.0-24-generic-x86_64-with-LinuxMint-17-qiana 2147483647
# Fedora
Linux-3.10.0-123.20.1.el7.x86_64-x86_64-with-fedora-21-Twenty_One 2147483647
# Ubuntu Trusty
Linux-3.13.0-45-generic-x86_64-with-Ubuntu-14.04-trusty 2147483647
# Debian 8
Linux-2.6.32.46-i686-with-debian-8.0 2147483647
</code></pre>
<p>This may be a good case to <a href="https://docs.python.org/2/bugs.html" rel="nofollow">suggest</a> an improvement to the documentation. If you would be so kind.</p>
<p><strong>Documentation hints</strong></p>
<blockquote>
<p>I could not find anything in the documentation that specifies what a negative value means </p>
</blockquote>
<p>It is actually platform dependent, use the above command the get the actual value.</p>
<p>While there does not seem to be documentation on <code>maxsize</code> specific to <code>multiprocessing</code>, the standard library's <a href="https://docs.python.org/2/library/queue.html?highlight=maxsize" rel="nofollow">Queue</a> documentation has this to offer:</p>
<blockquote>
<p>If maxsize is less than or equal to zero, the queue size is infinite.</p>
</blockquote>
<p>and <a href="https://docs.python.org/2/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow">multiprocessing's guide</a> states that</p>
<blockquote>
<p>The Queue class is a near clone of Queue.Queue.</p>
</blockquote>
<p>Hence I suppose it is fair to assume that your interpretation is correct, i.e. <em>create the biggest Queue possible supported by the OS</em>. Actually, we don't have to revert to assumptions, it's a fact:</p>
<p><strong>The gory details</strong></p>
<p>If you want the gory details of how <code>_multiprocessing.SemLock.SEM_VALUE_MAX</code> is determined at compile time, read on.  </p>
<blockquote>
<p>Is there any documentation that clarifies this magic value?</p>
</blockquote>
<p>No -- If you really want to know, you have to follow the code... For CPython there are these #include files <a href="https://github.com/python/cpython/blob/c7688b44387d116522ff53c0927169db45969f0e/Modules/_multiprocessing/multiprocessing.h" rel="nofollow">multiprocessing.h</a> and the platform C library's <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html" rel="nofollow">limits.h</a>, the latter eventually being included by <a href="https://github.com/python/cpython/blob/7dfc33ed686644a3b177744d5353b5c79f509d12/Include/Python.h" rel="nofollow">Python.h</a>. In other words, <code>SEM_VALUE_MAX</code> is set depending on the host platform. </p>
<p>As per Open Group's documentation on limits.h It is is defined as </p>
<blockquote>
<p>The maximum value a semaphore may have. Minimum Acceptable Value: _POSIX_SEM_VALUE_MAX </p>
</blockquote>
<p>So <code>_POSIX_SEM_VALUE_MAX</code> is the <em>minimum</em> which in turn is defined as:</p>
<blockquote>
<p>The maximum value a semaphore may have. Value: 32 767 </p>
</blockquote>
</div>
<span class="comment-copy">Also, the documentation of <code>multiprocessing.Queue</code> says: <code>Queue</code> implements all the methods of <code>queue.Queue</code> except for <code>task_done()</code> and <code>join()</code>.</span>
<span class="comment-copy">@EllaShar: I suppose that's just as good a statement as "near clone"; neither one counts as directly guaranteeing the semantics, but they both imply it pretty strongly. Edited the answer; thanks.</span>
