<div class="post-text" itemprop="text">
<p>Seems as though</p>
<pre><code>if not mylist[1]:
    return False
</code></pre>
<p>Doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You just have to check if the index you want is in the range of <code>0</code> and the length of the list, like this</p>
<pre><code>if 0 &lt;= index &lt; len(list):
</code></pre>
<p>it is actually internally evaluated as</p>
<pre><code>if (0 &lt;= index) and (index &lt; len(list)):
</code></pre>
<p>So, that condition checks if the index is within the range [0, length of list).</p>
<p><strong>Note:</strong> Python supports negative indexing. Quoting Python <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations">documentation</a>,</p>
<blockquote>
<p>If <code>i</code> or <code>j</code> is negative, the index is relative to the end of the string: <code>len(s) + i</code> or <code>len(s) + j</code> is substituted. But note that -0 is still 0.</p>
</blockquote>
<p>It means that whenever you use negative indexing, the value will be added to the length of the list and the result will be used. So, <code>list[-1]</code> would be giving you the element <code>list[-1 + len(list)]</code>.</p>
<p>So, if you want to allow negative indexes, then you can simply check if the index doesn't exceed the length of the list, like this</p>
<pre><code>if index &lt; len(list):
</code></pre>
<hr/>
<p>Another way to do this is, excepting <code>IndexError</code>, like this</p>
<pre><code>a = []
try:
    a[0]
except IndexError:
    return False
return True
</code></pre>
<p>When you are trying to access an element at an invalid index, an <code>IndexError</code> is raised. So, this method works.</p>
<hr/>
<p><strong>Note:</strong> The method you mentioned in the question has a problem.</p>
<pre><code>if not mylist[1]:
</code></pre>
<p>Lets say <code>1</code> is a valid index for <code>mylist</code>, and if it returns a <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing">Falsy value</a>. Then <code>not</code> will negate it so the <code>if</code> condition would be evaluated to be Truthy. So, it will return <code>False</code>, even though an element actually present in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <a href="https://docs.python.org/2/glossary.html#term-eafp" rel="noreferrer">EAFP</a> style of Python:</p>
<pre><code>try:
    mylist[1]
except IndexError:
    print "Index doesn't exist!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the case of integer-indexed lists, I'd simply do</p>
<pre><code>if 1 &lt; len(mylist):
  ...
</code></pre>
<p>For dicts, you can of course do</p>
<pre><code>if key in mydict:
  ...
</code></pre>
</div>
<span class="comment-copy"><code>mylist[1]</code> will return the element at index 1. Say that this element is the value <code>False</code>, how would you consider it?</span>
<span class="comment-copy">Yeah, my code is dreadful. What I tried to do seems like a very unpythonic way of doing it if it worked.</span>
<span class="comment-copy">Where do you get the value <code>1</code> from?</span>
<span class="comment-copy">If the negative index is too low you will get an <code>IndexError</code> for being out of range, so you might want to check <code>index &gt;= -len(list)</code> if you are supporting that.</span>
<span class="comment-copy">Another drawback to the first method is that Python allows non sequential indexes via .insert</span>
