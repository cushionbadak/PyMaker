<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof([])
32
&gt;&gt;&gt; sys.getsizeof([1])
36
&gt;&gt;&gt; sys.getsizeof('')
25
&gt;&gt;&gt; sys.getsizeof('a')
26
&gt;&gt;&gt; sys.getsizeof('cam')
28
</code></pre>
<p>I've a vague idea of  referential and compact arrays.</p>
<p>In Python, lists are referential arrays,so they use more memory for storing the memory locations of the referred elements.</p>
<p>I could only infer from above examples that an integar in a list occupies an extra 4 bytes(32+4).
Strings are array of characters.A unicode character should occupy 2 bits.</p>
<p>Why is an empty string occupying 25 bytes?</p>
<p>why is an empty list occupying 32 bytes?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I could only infer from above examples that an integar in a list occupies an extra 4 bytes(32+4).</p>
</blockquote>
<p>No, you're thinking about this wrong.</p>
<p><code>getsizeof</code> is not recursive. In particular, the size of a list is just the size of the list "header" plus the array of references to its members. (In the usual CPython implementation, those references are <code>PyObject *</code> pointers) It makes no difference what kind of objects you have in the list, just how many there are.</p>
<p>(Also, remember that lists usually have slack at the end. So, a list of 3 elements might actually have an array of 4 references, with the last one being a null pointer.)</p>
<p>Meanwhile, the number <code>1</code> itself probably doesn't take <em>any</em> storage. Most Python implementations intern small integers, so there's a <code>1</code> object that's built into Python, and no matter how many references you create to the number <code>1</code>, they're all just references to the same object; you never create another 4 bytes.</p>
<blockquote>
<p>Why is an empty string occupying 25 bytes?</p>
</blockquote>
<p>An string is, similarly to a list, a string "header", plus an array—just an array of characters, not of references to objects. Because they're immutable, there's no need for slack, which makes it easier to predict the size. If an empty string is 25 bytes on your system, that means a string header is 25 bytes, so <code>'abc'</code> will be 28 bytes, and <code>'abcde'</code> will be 30, and so on. (I'm assuming either Python 2.x or Python 3.3+ here; if you're on 3.0-3.2, each character is actually 2 or 4 bytes. Although things are actually a bit more complicated for strings in Python 3.3+; read the source if you really want to know.)</p>
<blockquote>
<p>why is an empty list occupying 32 bytes?</p>
</blockquote>
<p>Because that's how big a list header is.</p>
<hr/>
<p>If you want to see what's actually in these headers, you need to look at the source for your implementation. Assuming you're using CPython, you can find it <a href="https://hg.python.org/cpython/file/default/Include/" rel="nofollow">here</a>. (That points to the latest trunk version, 3.5alpha at this point; you can replace the <code>default</code> in the URL with <code>2.7</code> or <code>3.3</code> or whatever version you care about.)</p>
<p>For example, lists are of type <a href="https://docs.python.org/3/c-api/list.html" rel="nofollow"><code>PyListObject</code></a> in the C API. You can either search the source, or guess that <code>listobject.h</code> is probably the file that defines <code>PyUnicodeObject</code>. And <a href="https://hg.python.org/cpython/file/default/Include/listobject.h#l23" rel="nofollow">there</a>, you will see the C struct that defines the type. Summarizing the members, there's a general header with information needed for all types (like a refcount), a pointer to the actual array, and an allocated count.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow">Read the docs</a>:</p>
<blockquote>
<p><code>getsizeof()</code> calls the object’s <code>__sizeof__</code> method and <strong>adds an additional garbage collector overhead</strong> if the object is managed by the garbage collector.</p>
</blockquote>
<p>(emphasis is mine)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>A unicode character should occupy 2 bits. Why is an empty string
  occupying 25 bits?</p>
</blockquote>
<p>Because a Python string (bytes or unicode) is an object, not a unicode character. </p>
<pre><code>&gt;&gt;&gt; s = "a"
&gt;&gt;&gt; type(s)
&lt;type 'str'&gt;
&gt;&gt;&gt; dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">If you can read C, you may be interested in looking at the <a href="http://svn.python.org/projects/python/trunk/Objects/listobject.c" rel="nofollow noreferrer">List object  source code</a></span>
<span class="comment-copy">BTW, those numbers returned by <code>sys.getsizeof()</code> are <i>bytes</i> not <i>bits</i>. And a Unicode character needs more than 2 bits. :)</span>
<span class="comment-copy">If this is Python 2, <code>'a'</code> is not a Unicode string.</span>
<span class="comment-copy">@PM2Ring Thanks..</span>
<span class="comment-copy">Also, a Unicode character shouldn't occupy 2 bytes. There are a bit over 1 million Unicode characters, so to represent all of them as a single code unit, your code units have to be 32 bits. (This is the UTF-32 representation.) Of course you can use UTF-16, but in that case, some characters will be 2 bytes and some will be 4. Or you can use UTF-8, or any other encoding, or clever tricks like Python 3.3 uses, or…</span>
<span class="comment-copy">It's probably worth noting that, as <a href="http://stackoverflow.com/a/29673799/908494">Tichodroma points out</a>, a class can define its <code>__sizeof__</code> to be anything it wants, what I've described above is really the "default" meaning of <code>__sizeof__</code>, and only actually <i>guaranteed</i> for builtin types.</span>
<span class="comment-copy">Good point that it's really up to the type itself what it wants to do in <code>__sizeof__</code>. In this case, he happens to be asking about builtin types, which (at least in 3.x) guarantee a specific meaning. But in general, anything is possible.</span>
