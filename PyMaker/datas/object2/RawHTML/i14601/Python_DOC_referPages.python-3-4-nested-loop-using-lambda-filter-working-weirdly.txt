<div class="post-text" itemprop="text">
<p>I am trying to use NLTK's texttiling code (<a href="https://github.com/nltk/nltk/blob/develop/nltk/tokenize/texttiling.py" rel="nofollow">https://github.com/nltk/nltk/blob/develop/nltk/tokenize/texttiling.py</a>).</p>
<p>It's a code that segments a document input into a few tiles based on its contents. I noticed that tiling doesn't work at all for some of the documents by returning the entire text as one tile, and spotted that this portion of the code is working weird.  </p>
<pre><code>    depth_tuples = sorted(zip(depth_scores, range(len(depth_scores))))
    depth_tuples.reverse()
    hp = filter(lambda x:x[0]&gt;cutoff, depth_tuples)

    for dt in hp:
        boundaries[dt[1]] = 1
        for dt2 in hp: #undo if there is a boundary close already
            if dt[1] != dt2[1] and abs(dt2[1]-dt[1]) &lt; 4 \
                   and boundaries[dt2[1]] == 1:
                boundaries[dt[1]] = 0
    return boundaries
</code></pre>
<p>Depth_tuple is a list that contains a list of tuples [(score, index)] and hp is a filtered result whose score is bigger than some cut-off value. </p>
<p>Using the nested-loop, it iterates over hp separately twice for each entry of hp. In other words, for each entry of hp, it should check something for all entry of hp. But I noticed the second loop (for dt2 in hp) is not executed after the first iteration. It's like dt2 pointer reaches at the end of hp for the first dt, and it doesn't get initialized for the new iteration. </p>
<p>To give you a simplified example of this phenomenon, 
say x = [(0.6,3),(0.2,1),(0.5,2),(0.4,3)] </p>
<p>if the cut-off was 0.3, hp contains [(0.6,3), (0.5, 2), (0.4, 3)]</p>
<p>so the loop should go like</p>
<p>when x = (0.6, 3), the second loop checks [(0.6,3), (0.5, 2), (0.4, 3)]</p>
<p>when x = (0.5, 2), the second loop again checks [(0.6,3), (0.5, 2), (0.4, 3)]</p>
<p>but it only does that when x=(0.6, 3), and for the rest of x, the second loop doesn't run. </p>
<p>I initially suspected that the iterator has reached the end of hp at the second loop, but it wouldn't explain how the iterator in hp of the first loop can still go... </p>
<p>Could you explain why this happens? Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>You are using Python 3, and the recipe was written for Python 2. In <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow">Python 2</a>, <code>filter</code> returns a <code>list</code>, which obviously can be iterated over many times with <code>for</code> (the inner <code>for dt2 in hp</code>).</p>
<p>However in Python 3, <code>hp</code> will be <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow">a one-pass iterator</a>; now, the outer <code>for</code> would consume the first element, and the inner <code>for</code> would consume all the remaining elements; when the inner loop exits, the outer loop finds an empty iterator and exits too.</p>
<p>Or, as the Python 2 and 3 documentation says, in Python 2 <code>filter(function, iterable)</code> is equivalent to the list comprehension</p>
<pre><code>[item for item in iterable if function(item)]
</code></pre>
<p>and in Python 3, it is equivalent to the generator expression</p>
<pre><code>(item for item in iterable if function(item))
</code></pre>
<hr/>
<p>As the simplest fix, make the iterator returned by <code>filter</code> into a <code>list</code>:</p>
<pre><code>hp = list(filter(lambda x: x[0] &gt; cutoff, depth_tuples))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know why Dan D. deleted <a href="https://stackoverflow.com/a/29904148/908494">his answer</a>. Maybe it didn't completely explain the problem, but it did give the right solution and the crucial piece of information you're missing.</p>
<p>Assuming this is Python 3, <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> returns an <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow noreferrer">iterator</a>, not a sequence. Iterators can only be iterated once. An iterator knows its "current position", and produces the values lazily as you ask for them; once you've asked for all the values, there are no more values to give. So, for example:</p>
<pre><code>&gt;&gt;&gt; hp = iter([1,2,3])
&gt;&gt;&gt; for dt in hp:
...     print(dt)
1
2
3
&gt;&gt;&gt; for dt in hp:
...     print(dt)
</code></pre>
<p>The second time, it prints nothing, because you've already used all the values.</p>
<p>And the same thing happens in a nested loop:</p>
<pre><code>&gt;&gt;&gt; for dt in hp:
...     print(dt)
...     for dt in hp:
...         print('&gt;', dt)
1
&gt; 2
&gt; 3
</code></pre>
<p>In the first iteration through the outer loop, <code>dt</code> gets the first value. Then the nested inner loop gets all the rest of the values, so the outer loop is done.</p>
<p>If you want to iterate over something repeatedly, the simplest thing to do is to convert it to a sequence:</p>
<pre><code>hp = list(hp)
</code></pre>
<p>In some cases, it can be more efficient and/or conceptually cleaner to use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>tee</code></a>, but that doesn't apply here. Your code is designed to treat <code>hp</code> as a sequence, so just make it a sequence.</p>
</div>
<span class="comment-copy">A couple side notes: First, <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> takes a <code>reverse=True</code> keyword argument, so you don't need to sort, then reverse, in separate steps. Next, if you have the data sorted by your key, it makes more sense to use <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>takewhile</code></a> than <code>filter</code>. After all, as soon as the first one fails, all the rest are going to fail, so there's no reason to keep checking them all.</span>
<span class="comment-copy">Meanwhile, please try to reorganize this into a <a href="http://stackoverflow.com/help/mcve">minimal, complete, verifiable example</a>, which includes the sample input (e.g., hardcoded into a variable, like <code>depth_tuple = [(1, 4), (7, 3), (3, 2)]</code>) that demonstrates the problem.</span>
<span class="comment-copy">Also, which Python version is this?</span>
<span class="comment-copy">Finally, when you say "the second loop is not executed after the first iteration", does that mean you get into the second iteration of the outer loop (and set <code>boundaries[dt] = 1</code>), but the inner loop is empty? Or does the first loop end as well?</span>
<span class="comment-copy">@abarnert updated the example and added the python version! I meant that the inner loop was empty.</span>
