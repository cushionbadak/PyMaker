<div class="post-text" itemprop="text">
<pre><code>import re
file=input("What is the name of your file? ")



def words_from_file(filename):
    try:
        f = open(filename, "r")
        words = re.split(r"[,.;:?\s]+", f.read())
        f.close()
        return [word for word in words if word]
    except IOError:
        print("Error opening %s for reading. Quitting" % (filename))
        exit()

dictionary_file=words_from_file("big_word_list.txt")
newfile=words_from_file(file)

def dictionary_check(scores, dictionary_file, full_text):
    count=0
    for item in full_text:
        if item in dictionary_file:
            count+=1
    scores.append(count)


def decoder(item,shiftval):
    decoded = ""
    for c in item:
        c=c.upper()
        if c in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
        num = ord(c)
        num += shiftval
        if num &gt; ord("Z"):     
            num=num-26
        elif num &lt; ord("A"):
            num=num+26
        decoded+=chr(num)
    else:
        decoded = decoded + c
    return decoded


shiftval=0
scores=[]
while shiftval&lt;=26:
    full_text=[]
    for item in newfile:
        result=decoder(item,shiftval)
        full_text.append(result)
    shiftval+=1
    print(full_text)
    dictionary_check(scores, dictionary_file, full_text)


highest_so_far=0
for i in range(len(scores)):
    if scores[i]&gt;highest_so_far:
        i=highest_so_far
        i+=1
    else:
        i+=1

fully_decoded=""
for item in newfile:
    test=decoder(item,highest_so_far)
    fully_decoded+=test
print(fully_decoded)
</code></pre>
<p>Hey everybody.</p>
<p>I have this assignment where I had to make a program that decodes a shift cipher. Right now it works, but it's incredibly slow. I suspect it's probably because of the nested loops. I'm not really sure where to go from this point.</p>
<p>Some explanation of the code: The program reads in an encrypted file where each letter is shifted by a certain amount (i.e With a shift of 5, every A would now be an F. This would be done for every letter). The program reads in a dictionary file as well. There are only 26 possible shifts so for each shift it will decode the file. The program will take the file for each possible shift and compare it to the dictionary file. The one that has the most in common with the dictionary file will be reprinted as the final decrypted file.</p>
<p>Thank you everybody!</p>
<p><a href="https://drive.google.com/file/d/0B3bXyam-ubR2U2Z6dU1Ed3oxN1k/view?usp=sharing" rel="nofollow">https://drive.google.com/file/d/0B3bXyam-ubR2U2Z6dU1Ed3oxN1k/view?usp=sharing</a></p>
<p>^ There is a link to the program, dictionary, encrypted and decrypted files.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just change line 16 :</p>
<pre><code>dictionary_file=set(words_from_file("big_word_list.txt"))
</code></pre>
<p>So the <code>if item in dictionary_file:</code> is executed in constant time instead of linear time. The program runs now in 4 seconds, disabling print statements,
and changing <code>i=highest_so_far</code> in <code>highest_so_far=i</code>, and capitalizing dictionary.</p>
</div>
<span class="comment-copy">To test your suspicion that the nested loops are slowing it down, use <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">cProfile</a>.</span>
<span class="comment-copy">Before you make any assumptions about where your program's bottleneck is, you should take a look at the <a href="https://docs.python.org/2/library/profile.html" rel="nofollow noreferrer">Python Profilers</a> and confirm it. It is ALWAYS a good idea to profile before you optimize, because the issue often isn't where you think it is.</span>
<span class="comment-copy">Most of your loops look unnecessary. For example, the one that sets <code>highest_so_far</code> (aside from needlessly incrementing <code>i</code> manually) can be replaced by a single function call, <code>highest_so_far = max(scores)</code>.</span>
<span class="comment-copy">Wow, thank you so much! Such a simple change made a huge difference!</span>
