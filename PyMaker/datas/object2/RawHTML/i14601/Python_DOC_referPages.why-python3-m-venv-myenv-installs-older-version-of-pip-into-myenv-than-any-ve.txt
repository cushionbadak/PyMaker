<div class="post-text" itemprop="text">
<p>This is not causing me any problem that I can't solve by activating the virtual environment and running <code>pip install -U pip</code>, but I always wonder where the older version of pip is coming from.</p>
<p>I'm using OS X 10.7.5.  When I create a virtual environment using either <code>pyvenv-3.4 myenv</code> or <code>python3 -m venv myenv</code>, the version of pip that is installed inside the virtual environment is 6.0.8, but I have upgraded my global pip to 6.1.1.</p>
<p>Here is a terminal session demonstrating what I mean:</p>
<pre><code>$ python3 -m venv myenv
$ myenv/bin/pip -V
pip 6.0.8 from /Users/dust/Desktop/myenv/lib/python3.4/site-packages (python 3.4)
</code></pre>
<p>Here is what I would like to occur:</p>
<pre><code>$ source myenv/bin/activate
(myenv)$ pip -V
UPDATED SYSTEM VERSION HERE WOULD BE NICE
</code></pre>
<p>I can't find a pip 6.0.8 anywhere else, other than what is created inside virtual environments.</p>
<p>Here are the outputs of various commands that I have use to try and figure this out:</p>
<pre><code>$ which pip
/Library/Frameworks/Python.framework/Versions/3.4/bin/pip

$ which pip3
/Library/Frameworks/Python.framework/Versions/3.4/bin/pip3

$ pip -V
pip 6.1.1 from /Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages (python 3.4)

$ pip3 -V
pip 6.1.1 from /Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages (python 3.4)
</code></pre>
<p>I even tried using find:</p>
<pre><code>$ find / -type f -name pip 2&gt;&amp;1 | awk '! /^f.*$/'
/Library/Frameworks/Python.framework/Versions/3.4/bin/pip
/usr/local/bin/pip

$ find / -type f -name pip3 2&gt;&amp;1 | awk '! /^f.*$/'
/Library/Frameworks/Python.framework/Versions/3.4/bin/pip3
</code></pre>
<p>I thought maybe that the <code>/usr/local/bin/pip</code> might have been the culprit, but no:</p>
<pre><code>$ /usr/local/bin/pip -V
pip 6.1.1 from /Library/Python/2.7/site-packages/pip-6.1.1-py2.7.egg (python 2.7)
</code></pre>
<p>Hmm.  Perhaps the OS X python has it?</p>
<pre><code>$ /usr/bin/python
&gt;&gt;&gt; import pip
&gt;&gt;&gt; pip.__version__
'6.1.1'
</code></pre>
<p>6.1.1 is reported no matter which distribution of python I ask, whether it be OS X's 2.7.1, python.org's 2.7.9, or python.org's 3.4.3.</p>
<p>Is it possible (or advisable) to update the version of pip that gets put into a virtual environment? </p>
</div>
<div class="post-text" itemprop="text">
<p>I face the same issue, running <code>OSX 10.10.2</code> and <code>python 3.4.2</code>. Most recently I created a virtual environment in a <code>debian wheezy</code> machine with <code>python 3.4.3</code> and also ended up with an older version of <code>pip</code> than available. had to upgrade <code>pip</code>.</p>
<p>I've been upgrading <code>pip</code> within the virtual environment to <code>6.1.1</code> from <code>6.0.8</code> manually, because I'm o.c.d about software library versions that way - and yes, I am upgrading my <code>python 3</code> version to <code>3.4.3</code> right now. Anyway, my system's <code>python3-pip</code> is the latest version <code>6.1.1</code>, so I've also wondered why <code>pyvenv</code> creates a new virtual environment and loads it with old <code>pip</code>.</p>
<p>I haven't noticed anything bad happen in any of the virtual environments due to upgrading <code>pip</code>, (but on the flip side, I haven't noticed anything good either) Apparently the new pip is faster -- didn't notice, and outputs less junk on successful installs because user's don't care -- also didn't notice, probably because i'm one of those that don't care, and also comes with a state-of-the art coffee machine capable of latte art to boot!!! -- still waiting on <code>sudo pip install latte</code> to finish :(</p>
<p>So, to answer your question, it is definitely possible, and probably advisable to upgrade, because apparently the new <code>pip</code> fixes some bugs and goes faster, but I guess the speed up isn't that major, and the bug fixes don't affect all that many people (I've never faced a bug with my usage of the old <code>pip</code>).</p>
<p>You <strong>can</strong> link to system site-packages using the flag --system-site-packages when you create a new virtual environment, like this</p>
<pre><code>pyvenv myenv --system-site-packages
</code></pre>
<p>This will link to your system wide version of pip, and would remove the annoyance that is manually upgrading pip on every virtual environment, but if you do this, then is your virtual environment all that virtual?</p>
<p>update: following my rant above, I went into the <code>venv</code> package's source to dig. <code>pip</code> is set up by a method called <code>_setup_pip</code> in the file <code>__init__.py</code>, line 248</p>
<pre><code>def _setup_pip(self, context):
        """Installs or upgrades pip in a virtual environment"""
        # We run ensurepip in isolated mode to avoid side effects from
        # environment vars, the current directory and anything else
        # intended for the global Python environment
        cmd = [context.env_exe, '-Im', 'ensurepip', '--upgrade',
                                                    '--default-pip']
        subprocess.check_output(cmd, stderr=subprocess.STDOUT)
</code></pre>
<p>So, venv seems to be calling <code>ensurepip</code> from the shell using the <code>subprocess</code> module.</p>
<p>One more minute of google-fu gave me this from the <a href="https://docs.python.org/3/library/ensurepip.html" rel="nofollow">documentation for ensurepip</a>. </p>
<blockquote>
<p>ensurepip.version()</p>
<p>Returns a string specifying the bundled version of pip that will be installed when bootstrapping an environment.</p>
</blockquote>
<p>So, from the command line, the following code:</p>
<pre><code>$ python3 -c 'import ensurepip; print(ensurepip.version())' 
6.0.8
</code></pre>
<p>displays my current <code>pip</code> that will be bootstrapped with <code>ensurepip</code>.</p>
<p>I guess we're stuck with the old version of <code>pip</code> for every new install until <code>ensurepip</code> gets upgraded, as I can't find a way to upgrade the version of pip that comes with <code>ensurepip</code></p>
</div>
<div class="post-text" itemprop="text">
<h1>Newer</h1>
<p>If you want to "hotpatch" your installed python, just modify the versions listed in <code>ensurepip/__init__.py</code> and replace the two files in <code>ensurepip/_bundled</code>. You can find this location by running <code>find * | grep ensurepip</code> from the directory where python is installed. On macOS with Homebrew, this is the location: <code>/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ensurepip</code></p>
<p>You will also want to delete the <code>ensurepip/__pycache__</code> directory that contains the <code>.pyc</code> files.</p>
<h1>My older, build-time fix:</h1>
<p>You are able to update the bundled versions of pip and setuptools by patching Python before building it from source. The following patch will update the bundled versions of pip and setuptools to the current available today. You will want to invoke <code>configure</code> with the following option: <code>--with-ensurepip=upgrade</code></p>
<p>Those <code>whl</code> files are downloaded from PYPI here:</p>
<p><a href="https://pypi.org/project/pip/#files" rel="nofollow noreferrer">https://pypi.org/project/pip/#files</a></p>
<p><a href="https://pypi.org/project/setuptools/#files" rel="nofollow noreferrer">https://pypi.org/project/setuptools/#files</a></p>
<pre><code>diff -ru Python-3.7.1/Lib/ensurepip/__init__.py Python-3.7.1.new/Lib/ensurepip/__init__.py
--- Python-3.7.1/Lib/ensurepip/__init__.py  2018-10-20 06:04:19.000000000 +0000
+++ Python-3.7.1.new/Lib/ensurepip/__init__.py  2018-11-27 02:36:19.301655008 +0000
@@ -8,9 +8,9 @@
 __all__ = ["version", "bootstrap"]


-_SETUPTOOLS_VERSION = "39.0.1"
+_SETUPTOOLS_VERSION = "40.6.2"

-_PIP_VERSION = "10.0.1"
+_PIP_VERSION = "18.1"

 _PROJECTS = [
     ("setuptools", _SETUPTOOLS_VERSION),
Only in Python-3.7.1/Lib/ensurepip/_bundled: pip-10.0.1-py2.py3-none-any.whl
Only in Python-3.7.1.new/Lib/ensurepip/_bundled: pip-18.1-py2.py3-none-any.whl
Only in Python-3.7.1/Lib/ensurepip/_bundled: setuptools-39.0.1-py2.py3-none-any.whl
Only in Python-3.7.1.new/Lib/ensurepip/_bundled: setuptools-40.6.2-py2.py3-none-any.whl
</code></pre>
</div>
<span class="comment-copy">Throw me that checkmark for my answer. I think it's more complete than the current answer.</span>
<span class="comment-copy">Oh!  I forgot about <code>ensurepip</code>!   After I read the ensurepip documentation you referenced, where I was sent to PEP-453 for more information, <a href="https://www.python.org/dev/peps/pep-0453/#updating-the-private-copy-of-pip" rel="nofollow noreferrer">this part in PEP 453</a>  gave me some understanding that there are reasons for the behavior, so I'm no longer afraid that I had a botched python install.</span>
<span class="comment-copy">Hi! I have the answer below. Includes how to upgrade <code>ensurepip</code></span>
