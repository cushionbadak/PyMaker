<div class="post-text" itemprop="text">
<p>I would like change my dict values to dict, not tuple like they are now. I have function which returns <code>i</code> elements of the combination n on k-places.</p>
<pre><code>from itertools import combinations

def comb(n,k,i):
    if i &lt;= 0 or i &gt; n:
        return None
    d = dict((enumerate(combinations(range(1,n+1),k))))
    return d[i-1]

print(comb(5,3,1))
</code></pre>
<p>OUTPUT = <code>(1, 2, 3)</code></p>
<p>EXPECTED = <code>{1,2,3}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Your expected output is a <em>set</em>, not a dictionary; just use <code>set()</code> on the result:</p>
<pre><code>return set(d[i-1])
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; def comb(n,k,i):
...     if i &lt;= 0 or i &gt; n:
...         return None
...     d = dict((enumerate(combinations(range(1,n+1),k))))
...     return set(d[i-1])
... 
&gt;&gt;&gt; print(comb(5,3,1))
{1, 2, 3}
</code></pre>
<p>To get a specific iteration of a iterable object, you could use an <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice()</code> call</a>, rather than produce a dictionary with all results:</p>
<pre><code>from itertools import combinations, islice

def comb(n, k, i):
    if not (0 &gt; i &gt;= n):
        return None
    d = combinations(range(1, n + 1), k)
    ith_item = next(islice(d, i - 1, None))
    return set(ith_item)
</code></pre>
<p>but there are probably more efficient ways of calculating a specific combination of n out of k than brute-forcing.</p>
</div>
<span class="comment-copy">your expected output is not a valid python dict.</span>
<span class="comment-copy">A dict is composed of keys and values your expected output is nonsense</span>
<span class="comment-copy">You mean you want a <b>set</b>?</span>
<span class="comment-copy">Thank you so much :)....</span>
