<div class="post-text" itemprop="text">
<p>The tuples inside the file:</p>
<pre><code> ('Wanna', 'O')
 ('be', 'O')
 ('like', 'O')
 ('Alexander', 'B')
 ('Coughan', 'I')
 ('?', 'O')
</code></pre>
<p>My question is, how to join two strings from the different tuples but in the same index with a condition? </p>
<p>For example in my case, i want to join string in [0] if [1] equal to 'B' and followed by 'I'</p>
<p>So the output will be like:</p>
<pre><code>  Alexander Coughan
</code></pre>
<p>This is my code but the output is not like i want which is it just printed
"NONE":</p>
<pre><code>   readF = read_file ("a.txt")
   def jointuples(sentt, i):
        word= sentt[i][0]
        wordj = sentt[i-1][0]
        nameq = sentt[i][1]

        if nameq =='I':
           temp= ' '.join (word + wordj)
           return temp

   def join2features(sentt):
        return [jointuples(sentt, i) for i in range(len(sentt))]

   c_joint = [join2features(s) for s in readF]

   c_joint
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's how I'd write this:</p>
<pre><code>from ast import literal_eval
from itertools import tee

def pairwise(iterable): # from itertools recipes
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

with open("a.txt") as f:
    for p0, p1 in pairwise(map(literal_eval, f)):
        if p0[1] == 'B' and p1[1] == 'I':
            print(' '.join(p0[0], p1[0]))
            break
</code></pre>
<hr/>
<p>Here's why:</p>
<p>Your file consists of what appear to be <code>repr</code>s of Python tuples of two strings. That's a really bad format, and if you can change the way you've stored your data, you should. But if it's too late and you have to parse it, <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>literal_eval</code></a> is the best answer.</p>
<p>So, we turn each line in the file into a tuple by <code>map</code>ping <code>literal_eval</code> over the file.</p>
<p>Then we use <code>pairwise</code> from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>itertools</code> recipes</a> to convert the iterable of tuples into an iterable of adjacent pairs of tuples.</p>
<p>So, now, inside the loop, <code>p0</code> and <code>p1</code> will be the tuples from adjacent lines, and you can just write exactly what you described: if <code>p0[1]</code> is <code>'B'</code> and it's followed by (that is, <code>p1[1]</code> is) <code>'I'</code>, <code>join</code> the two <code>[0]</code>s.</p>
<p>I'm not sure what you wanted to do with the joined string, so I just printed it out. I'm also not sure if you want to handle multiple values or just the first, so I put in a <code>break</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll extend the input data to include more <code>'B' + 'I'</code> examples.</p>
<pre><code>phrases = [('Wanna', 'O'),
    ('be', 'O'),
    ('like', 'O'),
    ('Alexander', 'B'),
    ('Coughan', 'I'),
    ('One', 'B'),
    ('Two', 'I'),
    ('Three', 'B')]

length = len(phrases)
res = ['%s %s' % (phrases[i][0], phrases[i + 1][0])
    for i in range(length)
    if i &lt; length - 1 and phrases[i][1] == 'B' and phrases[i + 1][1] == 'I']
print(res)
</code></pre>
<p>The result is:</p>
<pre><code>['Alexander Coughan', 'One Two']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here's a one line solution</p>
<pre><code>&gt;&gt;&gt; t = [ ('wanna', 'o'),
... ('be', 'o'),
... ('like', 'o'),
... ('Alexander', 'B'),
... ('Coughan', 'I'),
... ('?', 'o')]
&gt;&gt;&gt; x = [B[0] for B in t if B[1]=='B'][0] + ' ' + [I[0] for I in t if I[1]=='I'][0]
&gt;&gt;&gt; print x
Alexander Coughan
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hadn't seen @MykhayloKopytonenko's solution when I went to write mine, so mine is similar:</p>
<pre><code>tuples = [('Wanna', 'O'),
          ('be', 'O'),
          ('like', 'O'),
          ('Alexander', 'B'),
          ('Coughan', 'I'),
          ('?', 'O'),
          ('foo', 'B'),
          ('bar', 'I'),
          ('baz', 'B'),]
results = [(t0[0], t1[0]) for t0, t1 in zip(tuples[:-1], tuples[1:])
                          if t0[1] == 'B' and t1[1] == 'I']
for r in results:
    print("%s %s" % r)
</code></pre>
<p>This outputs:</p>
<pre><code>Alexander Coughan
foo bar
&gt;&gt;&gt; 
</code></pre>
<p>If you absolutely <strong>must</strong> have the result returned as a string, change the list comprehension to:</p>
<pre><code> results = ["%s %s" % (t0, t1) for t0, t1 in zip(tuples[:-1], tuples[1:])
                               if t0[1] == 'B' and t1[1] == 'I']
</code></pre>
<p>This takes advantage of the fact that, based on your criteria, the <strong>last</strong> element of your list of tuples will <strong>never</strong> be returned as the first element of the result set.  As a result, the <code>zip</code> effectively steps you through <code>(tuples[n], tuples[n + 1])</code> so that you can easily examine the values.</p>
</div>
<span class="comment-copy">What does "the output is bad" mean?</span>
<span class="comment-copy">Please include some more samples: What pairs would be joined because of what?</span>
<span class="comment-copy">I mean the output is not like I want which is it just printed  NONE</span>
<span class="comment-copy">Despite not being exactly clear on the criteria - you have a <code>if nameq =='I-NP'</code> there... what do you expect that to do?</span>
<span class="comment-copy">the pairs would be join are the string in the index[0] if the strings in index [1] is equal to "B" and follow by "I". For my case i want the output print   Alexander Coughan  @Tichodroma</span>
<span class="comment-copy">thanks..i learned something new from you</span>
<span class="comment-copy">Thanks for the extra help</span>
