<div class="post-text" itemprop="text">
<p>I am trying to execute a IronPython Script from Python 3.4.
I Have function in IronPython script which returns a dictionary and I want to get that dictionary into python 3.4 area.</p>
<p>I am using Subprocess.call to run IronPy script from Python 3.4</p>
<p>So, I want to know that is there any way to get return value of external (IronPy) program into python 3.4 area.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't directly return an object from a subprocess. The "return value" of a process is just a number from 0-127 (the number you pass to <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow"><code>sys.exit</code></a>, or 0 if you just fall off the end of the program), which isn't very useful.</p>
<p>However, subprocesses <em>are</em> connected by pipes: if you just run the child with <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>check_output</code></a> instead of <code>call</code>, whatever bytes it writes to <code>stdout</code>, you can read.</p>
<p>So, if you can convert your data into a stream of bytes and back, then it's easy.</p>
<ul>
<li><p>If the data in the dict are all simple types (NoneType, bool, int, float, str, list, dict), encode it with <code>json</code>.</p></li>
<li><p>Or, if they're all builtin/stdlib types and types defined in .py files that you share between CPython and IronPython, encode it with <code>pickle</code>.</p></li>
<li><p>Or, if they're something you can represent as fixed C-like structures, you can use the <code>struct</code> or <code>ctypes</code> modules.</p></li>
<li><p>etc.</p></li>
</ul>
<hr/>
<p>For example:</p>
<pre><code># parent.py
import json
import subprocess

result = subprocess.check_output(['ironpython.exe', 'myironscript.py'],
                                 universal_newlines=True)
result_dict = json.loads(result)
print(result_dict["key"])
</code></pre>
<p>And:</p>
<pre><code># child.py
import json

def do_the_work():
    return {'key': 'value', 'other': 'stuff'}

result = do_the_work()
print json.dumps(result)
</code></pre>
<p>When you run this, it'll print out <code>value</code>.</p>
<p>(Because <code>json.dumps</code> defaults to escaping anything that's not pure ASCII, you can safely pass it as text rather than bytes. For most other formats, you'll want to use <code>sys.stdout.write</code> in the child instead of <code>print</code>, and leave the <code>universal_newlines=True</code> off the parent.)</p>
</div>
<span class="comment-copy">IronPython <i>is</i> Python. Why do you need to call out to a separate process?</span>
<span class="comment-copy">@DanielRoseman: I'd assume he wants to call some .NET code, but he also wants to do some 3.x-specific stuff, and since there is no 3.x IronPythonâ€¦</span>
<span class="comment-copy">Right Perfectly said.</span>
