<div class="post-text" itemprop="text">
<p>I am cross referencing two data sources which share 6 common fields. The idea is the the marketing costs in file 1 are split out over the sales transactions in file 2. I've written a way to build a data structure from the first file so that the second one can access it quickly, but it seems un-pythonic to me. I'm interested to get some input and opinions on whether anyone thinks it could be written in a better way.</p>
<pre><code>cost_matrix = {}
for line in marketing_costs:
    line_date_object = time.strptime(line['date'], "%d/%m/%Y")
    period = '%04d_%02d' % (line_date_object.tm_year, line_date_object.tm_mon)
    territory = line['territory'].lower()
    salesperson=line['salesperson'].lower()
    customer_type = line['customer_type'].lower()
    affiliate=line['affiliate'].lower()
    product_group = line['product_group'].lower()
    line_mktg_cost=line['mktg_cost']
    try:
        cost_matrix[period]
    except KeyError:
        cost_matrix[period]={}
    try:
        cost_matrix[period][territory]
    except KeyError:
        cost_matrix[period][territory]={}
    try:
        cost_matrix[period][territory][salesperson]
    except KeyError:
        cost_matrix[period][territory][salesperson]={}
    try:
        cost_matrix[period][territory][salesperson][customer_type]
    except KeyError:
        cost_matrix[period][territory][salesperson][customer_type]={}
    try:
        cost_matrix[period][territory][salesperson][customer_type][affiliate]
    except KeyError:
        cost_matrix[period][territory][salesperson][customer_type][affiliate]={}
    try:
        cost_matrix[period][territory][salesperson][customer_type][affiliate][product_group]
    except KeyError:
        cost_matrix[period][territory][salesperson][customer_type][affiliate][product_group]={}
        cost_matrix[period][territory][salesperson][customer_type][affiliate][product_group]['mktg_cost']=0
    cost_matrix[period][territory][salesperson][customer_type][affiliate][product_group]['mktg_cost']+=Decimal(line_mktg_cost)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Every one of those 4-line <code>try</code>/<code>except</code> blocks can be replaced by a 1-liner using <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>setdefault</code></a>:</p>
<blockquote>
<p><code>setdefault(key[, default])</code></p>
<ul>
<li>If <em>key</em> is in the dictionary, return its value. If not, insert <em>key</em> with a value of <em>default</em> and return <em>default</em>. <em>default</em> defaults to <code>None</code>.</li>
</ul>
</blockquote>
<p>So this:</p>
<pre><code>cost_matrix[period].setdefault(territory, {})
</code></pre>
<p>… is equivalent to:</p>
<pre><code>try:
    cost_matrix[period][territory]
except KeyError:
    cost_matrix[period][territory]={}
</code></pre>
<p>Except that you can use it in a larger expression, which means in theory you can turn the whole thing into one giant expression if you want to, although I'm not sure I'd do that.</p>
<hr/>
<p>You can simplify things even further by using a recursive <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a>. A <code>defaultdict</code> is basically just a <code>dict</code> that handles missing keys by set-defaulting automatically, and a recursive one does so with another <code>defaultdict</code> instead of a plain <code>dict</code>. (You do still need one <code>setdefault</code> or just plain key assignment at the end to handle the default of <code>0</code> instead of yet another dict…)</p>
<p>Like this:</p>
<pre><code>_make_defaultdict = lambda: defaultdict(_make_defaultdict)
recursive_defaultdict = defaultdict(_make_defaultdict)

cost_matrix = recursive_defaultdict()
cost_matrix[period][territory][salesperson][customer_type][
    affiliate][product_group]['mktg_cost'] = 0
cost_matrix[period][territory][salesperson][customer_type][
    affiliate][product_group]['mktg_cost'] += Decimal(line_mktg_cost)
</code></pre>
<p>However, be aware that this means you'll never get a <code>KeyError</code> anywhere else in your code either. If that's not acceptable, then stick with <code>setdefault</code>. (Although if you're basically building the dict up, then using it, you can "freeze" it into a normal <code>dict</code> just by recursively copying it…)</p>
</div>
<span class="comment-copy">@TimPietzcker: Thanks for catching and fixing the typo.</span>
<span class="comment-copy">Thank you this is great! i will use the setdefault because other parts of the script depend on KeyError exceptions.</span>
<span class="comment-copy">@TommyGaboreau: There's also a recipe on ActiveState somewhere for a recursive defaultdict that you can freeze and unfreeze on the fly, if you want to search for that. (I used it once just because it's such a neat idea, but I've never used it again in real code because I've never had a good use for it… but maybe you do.)</span>
<span class="comment-copy">it's good to know that such a thing exists but for now your setdefault solution is perfect. Thank You.</span>
