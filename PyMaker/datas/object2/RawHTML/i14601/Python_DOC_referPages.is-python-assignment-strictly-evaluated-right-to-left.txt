<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/27112647/is-the-right-hand-side-of-an-assignment-always-evaluated-before-the-assignment">Is the right-hand side of an assignment always evaluated before the assignment?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>In other words is</p>
<pre><code>d = {}
d["key"] = len(d)
</code></pre>
<p>safe in Python?</p>
<p>I know this is <a href="https://stackoverflow.com/questions/3457967/what-belongs-in-an-educational-tool-to-demonstrate-the-unwarranted-assumptions-p/3458842#3458842">undefined behaviour in C++</a>; where the program might get a reference to the element before computing the value it's going to assign to it. Is this similar in Python or is <code>len(d)</code> always computed before <code>d.__getitem__("key")</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, in Python it is safe: the evaluation order of an <em>expression</em> is from left to right, but in an <em>assignment statement</em> the right side is evaluated before the assignment happens. Also an arithmetic expression is evaluated in the arithmetic order of their suffixes.</p>
<p><a href="https://docs.python.org/2/reference/expressions.html#evaluation-order" rel="nofollow">5.14. Evaluation order</a></p>
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while
  evaluating an assignment, the right-hand side is evaluated before the
  left-hand side.</p>
<p>In the following lines, expressions will be evaluated in the
  arithmetic order of their suffixes: </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Yes, the RHS of an assignment is evaluated before the LHS; this is the case whether the LHS is an attribute reference, a subscription or a slicing.</p>
<p>From <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow">https://docs.python.org/3/reference/simple_stmts.html#assignment-statements</a>:</p>
<blockquote>
<p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p>
</blockquote>
<p>The succeeding language in the section discusses how assignment to different target syntaxes are defined, but does so from the standpoint that the expression list has already been evaluated to yield an object.</p>
<p>Indeed, the order of evaluation within the LHS is also defined; the container is evaluated before the subscript:</p>
<blockquote>
<ul>
<li>If the target is a subscription: The primary expression in the reference is evaluated. It should yield either a mutable sequence object (such as a list) or a mapping object (such as a dictionary). Next, the subscript expression is evaluated.</li>
</ul>
</blockquote>
</div>
<span class="comment-copy">If you mean is there a chance you will see 1 as the value then no. It is also well documented</span>
<span class="comment-copy">Yes, this is safe in python</span>
<span class="comment-copy">Note that your question is not phrased in a way that means what you intend, if your audience is Python programmers.  In Python, you can do <code>a, b, c = f(x), f(y), f(z)</code> and evaluation of <code>f(x)</code> happens <i>before</i> evaluation of <code>f(z)</code>.  (This is relevant if the function has side-effects.)  So evaluation <i>of the right-hand side</i> is <b>left-to-right</b>.  But the RHS is always evaluated before binding anything to the LHS.</span>
