<div class="post-text" itemprop="text">
<p>I have this list of dictionaries:</p>
<pre><code>list_of_ds = [
    {'a': [1, 2], 'b': [4, 5], 'c': [6, 7]},
    {'a': [4], 'b': [56], 'c': [46]},
    {'a': [92], 'b': [65], 'c': [43]}
]
</code></pre>
<p>and I want this as output:</p>
<pre><code>{'a': [1, 2, 4, 92], 'b': [4, 5, 56, 65], 'c': [6, 7, 46, 43]}
</code></pre>
<p>Until now ...</p>
<p>I tried</p>
<pre><code>d_of_ds = reduce(lambda d1, d2: d1.update(d2), list_of_ds)
</code></pre>
<p>gives: <code>AttributeError: 'NoneType' object has no attribute 'update'</code></p>
<p>I tried</p>
<pre><code>d_of_ds = reduce(lambda d1, d2: d1.update(d2) or d1, list_of_ds, {})
</code></pre>
<p>Overwrites each iteration: <code>{'a': [92], 'b': [65], 'c': [43]}</code></p>
<p>I tried</p>
<pre><code>d_of_ds = {k: v for d in list_of_ds for k, v in d.items()}
</code></pre>
<p>Overwrites each iteration: <code>{'a': [92], 'b': [65], 'c': [43]}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>reduce</code> is not a good idea in this case.Also your lambda function has a wrong logic at all, because you are trying to update the whole of dictionaries together, not their elements see the following :</p>
<pre><code>&gt;&gt;&gt; a={'a':[1,2], 'b':[4,5],'c':[6,7]}
&gt;&gt;&gt; a.update({'a':[4], 'b':[56],'c':[46]})
&gt;&gt;&gt; a
{'a': [4], 'c': [46], 'b': [56]}
</code></pre>
<p>But as a more efficient way you can use <a href="https://docs.python.org/2/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>dict.setdefault</code></a> method :</p>
<pre><code>&gt;&gt;&gt; new={}
&gt;&gt;&gt; for d in list_of_ds:
...    for i,j in d.items():
...       new.setdefault(i,[]).extend(j)
... 
&gt;&gt;&gt; new
{'a': [1, 2, 4, 92], 'c': [6, 7, 46, 43], 'b': [4, 5, 56, 65]}
</code></pre>
<p>Also you can use <code>collections.defaultdict</code> :</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d=defaultdict(list)
&gt;&gt;&gt; for sub in list_of_ds:
...    for i,j in sub.items():
...       d[i].extend(j)
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'a': [1, 2, 4, 92], 'c': [6, 7, 46, 43], 'b': [4, 5, 56, 65]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not-so-efficient but pretty <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>reduce</code></a> solution:</p>
<pre><code>def f(x, y):
    return {k: x.get(k, []) + y.get(k, []) for k in set(x).union(y)}

from functools import reduce
reduce(f, list_of_ds) # {'b': [4, 5, 56, 65], 'a': [1, 2, 4, 92], 'c': [6, 7, 46, 43]}
</code></pre>
<p>Not-so-pretty but efficient solution using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

def f(list_of_ds):
    new = defaultdict(list)
    for d in list_of_ds:
        for k, v in d.items():
            new[k].extend(v)
    return new # or dict(new), to obtain a 'dict' object

f(list_of_ds) # {'a': [1, 2, 4, 92], 'b': [4, 5, 56, 65], 'c': [6, 7, 46, 43]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>without importing any library </p>
<pre><code>&gt;&gt;&gt; new_dict = {}
&gt;&gt;&gt; new_dict
{}
&gt;&gt;&gt; for dct in list_of_ds:
        for key,val in dct.items():
            if key not in new_dict.keys(): new_dict[key] = val
            else: new_dict[key].extend(val)


&gt;&gt;&gt; new_dict
{'a': [1, 2, 4, 92], 'c': [6, 7, 46, 43], 'b': [4, 5, 56, 65]}
</code></pre>
</div>
<span class="comment-copy">Why are you trying these crazy one liners? Go for a simple loop based solution.</span>
<span class="comment-copy">@vaultah You can read the source to find that <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#reduce</a></span>
<span class="comment-copy">@vaultah There is no thing wrong with source :) but its not efficient to <code>Apply function of two arguments cumulatively to the items of iterable</code> when we could use a linear solution like <code>defaultdict</code> or <code>setdefault</code>!</span>
<span class="comment-copy">@vaultah Reduce is a bad idea because it's counterintuitive to use on non-associative or side-effecting code and is algorithmically slow if side-effects are avoided. Further, it's slower and less clear than a simple loop.</span>
