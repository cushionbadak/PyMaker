<div class="post-text" itemprop="text">
<p>I need from string</p>
<pre><code>i = "1,'Test','items (one, two, etc.)',1,'long, list'"
</code></pre>
<p>extract array of next strings:</p>
<pre><code>['1', "'Test'", "'items (one, two, etc.)'", '1', "'long, list'"]
</code></pre>
<p>with help of regexpress</p>
<pre><code>r=re.split(r',+(?=[^()]*(?:\(|$))', i)
</code></pre>
<p>I receive next result only:</p>
<pre><code>['1', "'Test'", "'items (one, two, etc.)'", '1', "'long", " list'"]
</code></pre>
<p><strong>UPD1</strong></p>
<p><strong>NULL</strong> should be supported</p>
<pre><code>i = "1,'Test',NULL,'items (one, two, etc.)',1,'long, list'"
['1', "'Test'", 'NULL', "'items (one, two, etc.)'", '1', "'long, list'"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <code>re.split</code> in this case.you can use <code>re.findall</code> within a list comprehension :</p>
<pre><code>&gt;&gt;&gt; [k for j in re.findall(r"(\d)|'([^']*)'",i) for k in j if k]
['1', 'Test', 'items (one, two, etc.)', '1', 'long, list']
</code></pre>
<p>The preceding regex will match any thing between one quote <code>'([^']*)'</code> or any digit (<code>\d</code>).</p>
<p>Or as a more efficient way in this case you can use <code>ast.literal_eval</code> :</p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval(i)
(1, 'Test', 'items (one, two, etc.)', 1, 'long, list')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a task for the <code>csv</code> module:</p>
<pre><code>import csv
from StringIO import StringIO
line = "1,'Test','items (one, two, etc.)',1,'long, list'"
reader = csv.reader(StringIO(line), quotechar="'")
row = next(reader)

# row == ['1', 'Test', 'items (one, two, etc.)', '1', 'long, list']
</code></pre>
<p>The key here is to create a CSV reader, specifying single quote as the quote character.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can split on single quotes:</p>
<pre><code>i = "1,'Test','items (one, two, etc.)',1,'long, list'"



print([ele.strip(" ,") for ele in i.split("'") if ele.strip(",")])
['1', 'Test', 'items (one, two, etc.)', '1', 'long, list']
</code></pre>
<p>Or use it with map:</p>
<pre><code>print([ele for ele in map(lambda x:  x.strip(", "), i.split("'")) if ele])
</code></pre>
<p>Using map with python 3 is pretty efficient:</p>
<pre><code>In [7]: i = "1,'Test','items (one, two, etc.)',1,'long, list'"

In [8]: timeit [ele for ele in map(lambda x:  x.strip(", "), i.split("'")) if ele]
1000000 loops, best of 3: 1.5 µs per loop

In [9]: r = re.compile(r"(\d)|'([^']*)'") 

In [10]: timeit [k for j in r.findall(i) for k in j if k]
100000 loops, best of 3: 3.92 µs per loop
</code></pre>
<p>Better using python2 and <code>itertools.imap</code>:</p>
<pre><code>In [9]: from itertools  import imap   
In [10]: timeit [ele for ele in imap(lambda x:  x.strip(", "), i.split("'")) if ele]
1000000 loops, best of 3: 871 ns per loop  

In [11]: r = re.compile(r"(\d)|'([^']*)'")
In [12]: timeit [k for j in r.findall(i) for k in j if k]
100000 loops, best of 3: 4.27 µs per loop

In [17]: from ast import literal_eval
In [18]: timeit literal_eval(i)
100000 loops, best of 3: 16.2 µs per loop
</code></pre>
<p>All of which return the same output bar literal_eval as it evaluates the numbers as ints:</p>
<pre><code>In [19]: literal_eval(i)
Out[19]: (1, 'Test', 'items (one, two, etc.)', 1, 'long, list')

In [20]: [k for j in r.findall(i) for k in j if k]
Out[20]: ['1', 'Test', 'items (one, two, etc.)', '1', 'long, list']

In [21]: [ele for ele in imap(lambda x:  x.strip(", "), i.split("'")) if ele]Out[21]: ['1', 'Test', 'items (one, two, etc.)', '1', 'long, list']
</code></pre>
<p>There is nothing different with the NUll line:</p>
<pre><code>i = "1,'Test',NULL,'items (one, two, etc.)',1,'long, list'"



print([ele for ele in map(lambda x:  x.strip(", "), i.split("'")) if ele])

['1', 'Test', 'NULL', 'items (one, two, etc.)', '1', 'long, list']
</code></pre>
</div>
<span class="comment-copy">why doesnt <code>i.split(',')</code> work as a solution?</span>
<span class="comment-copy">@letsc It will also split <code>one, two, etc.</code> and <code>'long, list'</code> in quotes.</span>
<span class="comment-copy">Although it's not quite what you asked for, you may actually want the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> module instead of regexes (see also <a href="http://stackoverflow.com/questions/11805535/transform-comma-separated-string-into-a-list-but-ignore-comma-in-quotes">this</a> question).</span>
<span class="comment-copy">@alcedine I did not read your comment until now. My solution is the same as the one you suggest, but I did not copy from it :-)</span>
<span class="comment-copy">What's with <b>NULL</b>? It is just another string in Python</span>
<span class="comment-copy">in line "i = "1,'Test',NULL,'items (one, two, etc.)',1,'long, list'""  NULL ignored. How to update suggested code to support NULL too?</span>
<span class="comment-copy">@constructor If your problem is just <code>NULL</code> use <code>&gt;&gt;&gt; [k for j in re.findall(r"(\d)|'([^']*)'|(NULL)",i) for k in j if k]</code></span>
<span class="comment-copy">@tommy.carstensen I parse SQL file and have a problems. I am sure that I am not first. Solution of part of problems found and implemented in my code. I cannot solution (regexp) the published sample.</span>
