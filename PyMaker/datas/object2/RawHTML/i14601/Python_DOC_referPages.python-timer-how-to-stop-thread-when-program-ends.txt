<div class="post-text" itemprop="text">
<p>I have a function I'm calling every 5 seconds like such:</p>
<pre><code>def check_buzz(super_buzz_words):
    print 'Checking buzz'
    t = Timer(5.0, check_buzz, args=(super_buzz_words,))
    t.dameon = True
    t.start()
    buzz_word = get_buzz_word()
    if buzz_word is not 'fail':
        super_buzz_words.put(buzz_word)

main()
 check_buzz()
</code></pre>
<p>I'm exiting the script by either catching a KeyboardInterrupt or by catching a System exit and calling this:</p>
<pre><code>sys.exit('\nShutting Down\n')
</code></pre>
<p>I'm also restarting the program every so often by calling:</p>
<pre><code>execv(sys.executable, [sys.executable] + sys.argv)
</code></pre>
<p>My question is, how do I get that timer thread to shut off? If I keyboard interrupt, the timer keeps going. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from atexit import register

def all_done():
    if t.is_alive():
        # do something that will close your thread gracefully

register(all_done)
</code></pre>
<p>Basically when your code is about to exit, it will fire one last function and this is where you will check if your thread is still running. If it is, do something that will either cancel the transaction or otherwise exit gracefully. In general, it's best to let threads finish by themselves, but if it's not doing anything <strong>important</strong> (please note the emphasis) than you can just do <code>t.cancel()</code>. Design your code so that threads will finish on their own if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way would be to use the Queue() module to send and recieve info from a thread using the .put() outside the thread and the .get() inside the thread.
What you can also do is create a txt file and make program write to it when you exit And put an if statement in the thread function to check it after each iteration (this is not a really good solution but it also works) 
I would have put a code exemple but i am writing from mobile sorry</p>
</div>
<span class="comment-copy">Where are you able to catch the KeyboardInterrupt?  Can you call t.cancel() when you catch it?  Could you set a flag to check to see if you should exit rather than invoking another timer instance?</span>
<span class="comment-copy">Perhaps make a function with <a href="https://docs.python.org/3/library/atexit.html#atexit.register" rel="nofollow noreferrer"><code>atexit</code></a> that calls <code>t.cancel()</code>?</span>
<span class="comment-copy"><code>sys.exit()</code> takes an integer error code. And you can call <code>t.cancel()</code>.</span>
<span class="comment-copy">I'm not too familiar with <code>Timer</code> obj, but considering the thread is a <code>dameon</code> wouldn't it shut down with the rest of the script?</span>
<span class="comment-copy">You say the timer (and thus the script) keeps executing when you call <code>sys.exit</code>? <code>sys.exit</code> just raises <code>SystemExit</code> so if you are also catching <code>SystemExit</code> you may have a problem with that handler. The script and the timer should be gone when you call exit.</span>
<span class="comment-copy">How can I call t.cancel() if I have no access to t oustide the function? It seems like based on Python's Timer class you have to set this up recursively and therefore can't access the timer object?</span>
<span class="comment-copy">Then create a reference to it outside the function. One thing that comes to mind would be for <code>check_buzz()</code> to <code>return t</code> this way you can store it in a global variable and/or pass is to other functions.</span>
