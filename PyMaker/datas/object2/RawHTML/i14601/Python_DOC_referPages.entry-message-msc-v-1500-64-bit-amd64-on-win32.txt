<div class="post-text" itemprop="text">
<p>I was wondering in, when I start python I get the following message:</p>
<pre><code>Python 2.7.9 (default, Dec 10 2014, 12:28:03) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
<p>I am using 64 bit python but why does it mention win32 as opposed to win64?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>win32</code> is the general name for the Windows NT/95 API, whether you are on a 32-bit or 64-bit OS (or even using Win32s on a 16-bit OS).<sup>*</sup></p>
<p>The <code>64 bit (AMD64)</code> tells you that it is a 64-bit Python, built for a 64-bit Win32 OS, so everything is good.</p>
<p>The <code>win32</code> is the same string that you see in <a href="https://docs.python.org/2/library/sys.html#sys.platform" rel="noreferrer"><code>sys.platform</code></a>, which documents the strings you should see for each supported platform.</p>
<p>The <code>[MSC v.1500 64 bit (AMD64)]</code> identifies the compiler. On other platforms, Python doesn't cram the platform information into the compiler-name field.<sup>**</sup> But I guess they decided it was important, and there was nowhere else for it to go. :)</p>
<p>Anyway, the safe way to get this information is not to try to parse it out of the banner, but to use <code>sys.maxsize.bit_length() &gt; 32</code> on Python 3.x, or <code>sys.maxsize &gt; 2**32</code> on Python 2.x. (Note that <a href="https://docs.python.org/3/library/platform.html" rel="noreferrer"><code>platform.architecture</code></a> specifically suggests that.)</p>
<hr/>
<p><sub>* Why? Who knows. Some documentation does talk about "the Win32/Win64 API", although in most of the current docs they avoid that and say "the Windows API". This may be related to the fact that they have trademarks on "Win32", "Windows", and "Windows API", but not "Win64", "Win32 API", or "Win64 API"â€¦</sub></p>
<p><sub>** Partly because it can't know that at compile time, if Python could be built as a universal binary for multiple architectures. For example, Python 2.7.6 on my Mac has both x86 and x86_64 code; it's 32-bit if I run the former, 64-bit if I run the latter. So the compiler just says <code>[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)]</code>.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>It just means for the windows platform, not that your architecture is 32 bit . The <code>MSC v.1500 64 bit (AMD64)</code> means it is compiled as a 64 bit application.  </p>
</div>
<span class="comment-copy">PS, thanks for this question; I was just trying to remember what the compiler string looks like on Windows yesterday, and my Windows VM is out of disk space. :)</span>
<span class="comment-copy">that's interesting since on Linux I get the following:[GCC 4.7.1 20120720 (Red Hat 4.7.1-5)] on linux2 it says linux 2 which probably means the linux 2 api?</span>
<span class="comment-copy">@Har: Yeah, to switch on platform/uname you always have to test  <code>u.startswith('linux')</code> (and <code>u.lower()=='cygwin'</code>, for extra fun), as opposed to just <code>u=='win32'</code> and <code>u=='darwin'</code>.</span>
<span class="comment-copy">Although I think <code>linux2</code> originally meant any linux kernel with glibc 2.3+, as opposed to <code>linux</code>, which was linux with glibc 2.2. Then at some point it changed to be <code>linux2</code> or <code>linux3</code> depending on the kernel (based on whatever <code>uname -s</code> plus <code>uname -r</code> returns), then always <code>linux2</code> no matter what, and eventually they decided (in 3.3+) to just call all of them <code>linux</code>.</span>
