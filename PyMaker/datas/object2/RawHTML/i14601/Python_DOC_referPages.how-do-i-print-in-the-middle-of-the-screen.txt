<div class="post-text" itemprop="text">
<p>For example, </p>
<pre><code>print "hello world"
</code></pre>
<p>in the middle of screen instead of beginning? Sample output would be like:</p>
<pre><code>                                   hello world
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 offers <a href="https://docs.python.org/3/library/shutil.html#shutil.get_terminal_size" rel="nofollow"><code>shutil.get_terminal_size()</code></a>, and you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.center" rel="nofollow"><code>str.center</code></a> to center using spaces:</p>
<pre><code>import shutil

columns = shutil.get_terminal_size().columns
print("hello world".center(columns))
</code></pre>
<p><del>If you’re not using Python 3, use <a href="https://docs.python.org/3/library/os.html#os.get_terminal_size" rel="nofollow"><code>os.get_terminal_size()</code></a> instead.</del></p>
<p>As @br1ckb0t mentions, this isn’t available conveniently in Python 2. Rather than using a less convenient way, though, I’d suggest switching to Python 3 instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>If this is a terminal window, do exactly what you did. If you want consistency, you can try use tab tokens (<code>\t</code>) to keep everything in line. Otherwise, follow Hurkyl's answer about using the <code>curses</code> module.</p>
<pre><code>&gt;&gt;&gt; print "\t\t\t Hello World!"
             Hello World! # Output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The same way you did it by hand: add extra spaces.</p>
<p>If you mean to actually know something about the geometry of the display, you'll have to appeal to a library for such things. e.g. the <a href="https://docs.python.org/2/library/curses.html" rel="nofollow"><code>curses</code></a> module.</p>
<blockquote>
<p>The curses module provides an interface to the curses library, the de-facto standard for portable advanced terminal handling.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>See @minitech's answer for a good way to do this on Python 3, but on Python 2, this can be done with <code>subprocess</code> (at least on OS X):</p>
<pre><code>import subprocess

def print_centered(s):
    terminal_width = int(subprocess.check_output(['stty', 'size']).split()[1])
    print s.center(terminal_width)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This way you can print leading spaces:</p>
<pre><code>   print ' '*5, 'hello'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>center()</code> to put text in the middle. </p>
<p>For example: </p>
<pre><code>str = "Hello World";
print str.center(20)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd create a helper function:</p>
<pre><code>import operator

SCREEN_WIDTH = 80
centered = operator.methodcaller('center', SCREEN_WIDTH)

print(centered("hello world"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A version of get_termial_size that should work for python2, tested but not  extensively on ubuntu:</p>
<pre><code>from collections import namedtuple

def get_terminal_size():
    import struct
    from fcntl import ioctl
    from termios import TIOCGWINSZ
    Res = namedtuple("terminal_sizes", field_names=["columns","lines"])
    try:
        term = struct.unpack('hhhh', ioctl(0, TIOCGWINSZ, '\000' * 8))
    except IOError:
        return Res(24, 80)
    return Res(term[0], term[1])



In [23]: print("Hello world".center(get_terminal_size().columns))
                              Hello world                                   
</code></pre>
</div>
<span class="comment-copy">Is this on a terminal, or on a GUI window?</span>
<span class="comment-copy">@br1ckb0t terminal</span>
<span class="comment-copy">Wow, never heard of that. Looks neat. :)</span>
<span class="comment-copy">@minitech as far as I can tell, <code>os.get_terminal_size()</code> is Python 3.0+, and <code>shutil.get_terminal_size()</code> is 3.3+, so this wouldn't work in Python 2</span>
<span class="comment-copy">@br1ckb0t: Oops, you’re right. Thanks.</span>
<span class="comment-copy">@minitech no problem. Only thing - you can do this easily in Python 2 with subprocess: <code>subprocess.check_output(['stty', 'size']).split()[1]</code>. No need to switch to Python 3.</span>
<span class="comment-copy">@br1ckb0t: That’s not really portable, though; you’d have to wrap it in an equivalent to <code>get_terminal_size</code>. Possible, but not really convenient.</span>
<span class="comment-copy">Note: curses also allows cursor positioning; with a curses-based approach one doesn't need to pad with spaces.</span>
