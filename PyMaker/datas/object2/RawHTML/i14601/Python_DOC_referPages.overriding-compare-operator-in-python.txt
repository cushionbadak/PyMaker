<div class="post-text" itemprop="text">
<p>The following piece of code</p>
<pre><code>class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def dispc(self):
        return ('(' + str(self.x) + ',' + str(self.y) + ')')

    def __cmp__(self, other):
        return ((self.x &gt; other.x) and (self.y &gt; other.y))
</code></pre>
<p>works fine in Python 2, but in Python 3 I get an error:</p>
<pre><code>&gt;&gt;&gt; p=point(2,3)
&gt;&gt;&gt; q=point(3,4)
&gt;&gt;&gt; p&gt;q
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: point() &gt; point()
</code></pre>
<hr/>
<p>It only works for <code>==</code> and <code>!=</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to provide the rich comparison methods for ordering in Python 3, which are  <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="noreferrer"><code>__lt__</code></a>, <a href="https://docs.python.org/3/reference/datamodel.html#object.__gt__" rel="noreferrer"><code>__gt__</code></a>, <a href="https://docs.python.org/3/reference/datamodel.html#object.__le__" rel="noreferrer"><code>__le__</code></a>, <a href="https://docs.python.org/3/reference/datamodel.html#object.__ge__" rel="noreferrer"><code>__ge__</code></a>, <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="noreferrer"><code>__eq__</code></a>, and <a href="https://docs.python.org/3/reference/datamodel.html#object.__ne__" rel="noreferrer"><code>__ne__</code></a>. See also: <a href="https://www.python.org/dev/peps/pep-0207/" rel="noreferrer">PEP 207 -- Rich Comparisons</a>.</p>
<p><code>__cmp__</code> is <strong>no</strong> longer used.</p>
<hr/>
<p>More specifically, <code>__lt__</code> takes <code>self</code> and <code>other</code> as arguments, and needs to return whether <code>self</code> is less than <code>other</code>. For example:</p>
<pre><code>class Point(object):
    ...
    def __lt__(self, other):
        return ((self.x &lt; other.x) and (self.y &lt; other.y))
</code></pre>
<p>(This isn't a sensible comparison implementation, but it's hard to tell what you were going for.)</p>
<p>So if you have the following situation:</p>
<pre><code>p1 = Point(1, 2)
p2 = Point(3, 4)

p1 &lt; p2
</code></pre>
<p>This will be equivalent to:</p>
<pre><code>p1.__lt__(p2)
</code></pre>
<p>which would return <code>True</code>. </p>
<p><code>__eq__</code> would return <code>True</code> if the points are equal and <code>False</code> otherwise. The other methods work analogously.</p>
<hr/>
<p>If you use the <a href="https://docs.python.org/3.5/library/functools.html#functools.total_ordering" rel="noreferrer"><code>functools.total_ordering</code></a> decorator, you only need to implement e.g. the <code>__lt__</code> and <code>__eq__</code> methods:</p>
<pre><code>from functools import total_ordering

@total_ordering
class Point(object):
    def __lt__(self, other):
        ...

    def __eq__(self, other):
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This was a major and deliberate change in Python 3.  See <a href="http://docs.python.org/py3k/whatsnew/3.0.html#ordering-comparisons" rel="nofollow noreferrer">here</a> for more details.</p>
<blockquote>
<ul>
<li>The ordering comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) raise a <code>TypeError</code> exception when the operands don’t have a meaningful natural ordering. Thus, expressions like <code>1 &lt; ''</code>, <code>0 &gt; None</code> or <code>len &lt;= len</code> are no longer valid, and e.g. <code>None &lt; None</code> raises <code>TypeError</code> instead of returning <code>False</code>. A corollary is that sorting a heterogeneous list no longer makes sense – all the elements must be comparable to each other. Note that this does not apply to the <code>==</code> and <code>!=</code> operators: objects of different incomparable types always compare unequal to each other.</li>
<li><code>builtin.sorted()</code> and <code>list.sort()</code> no longer accept the <code>cmp</code> argument providing a comparison function. Use the <code>key</code> argument instead. N.B. the <code>key</code> and <code>reverse</code> arguments are now “keyword-only”.</li>
<li>The <code>cmp()</code> function should be treated as gone, and the <code>__cmp__()</code> special method is no longer supported. Use <code>__lt__()</code> for sorting, <code>__eq__()</code> with <code>__hash__()</code>, and other rich comparisons as needed. (If you really need the <code>cmp()</code> functionality, you could use the expression <code>(a &gt; b) - (a &lt; b)</code> as the equivalent for <code>cmp(a, b)</code>.)</li>
</ul>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In Python3 the six rich comparison operators</p>
<pre><code>__lt__(self, other) 
__le__(self, other) 
__eq__(self, other) 
__ne__(self, other) 
__gt__(self, other) 
__ge__(self, other) 
</code></pre>
<p>must be provided individually. This can be abbreviated by using <code>functools.total_ordering</code>. </p>
<p>This however turns out rather unreadable and unpractical most of the time. Still you have to put similar code pieces in 2 funcs - or use a further helper func.</p>
<p>So mostly I prefer to use the mixin class <code>PY3__cmp__</code> shown below. This reestablishes the single <code>__cmp__</code> method framework, which was and is quite clear and practical in most cases. One can still override selected rich comparisons.</p>
<p>Your example would just become:</p>
<pre><code> class point(PY3__cmp__):
      ... 
      # unchanged code
</code></pre>
<h1>The PY3__cmp__ mixin class:</h1>
<pre><code>PY3 = sys.version_info[0] &gt;= 3
if PY3:
    def cmp(a, b):
        return (a &gt; b) - (a &lt; b)
    # mixin class for Python3 supporting __cmp__
    class PY3__cmp__:   
        def __eq__(self, other):
            return self.__cmp__(other) == 0
        def __ne__(self, other):
            return self.__cmp__(other) != 0
        def __gt__(self, other):
            return self.__cmp__(other) &gt; 0
        def __lt__(self, other):
            return self.__cmp__(other) &lt; 0
        def __ge__(self, other):
            return self.__cmp__(other) &gt;= 0
        def __le__(self, other):
            return self.__cmp__(other) &lt;= 0
else:
    class PY3__cmp__:
        pass
</code></pre>
</div>
<span class="comment-copy">That <code>__cmp__</code> was broken in Python 2 already.</span>
<span class="comment-copy">Now you need to define <code>__hash__</code> to use your object in a set or as a dict key.</span>
<span class="comment-copy">I liked the way you wrote the operators. However, please explain this statement (a &gt; b) - (a &lt; b). It took me a while to understand this.</span>
<span class="comment-copy">@theBuzzyCoder <code>bool</code> is just a subclass of <code>int</code>, so <code>True</code> and <code>False</code> are basically 1 and 0, respectively. Since <code>cmp</code> returns a negative value if its first argument is less than its second argument, zero if the arguments are equal, or a positive value otherwise, you can see that <code>False - False == 0</code>, <code>True - False == 1</code>, and <code>False - True == -1</code> provide the correct return values for <code>cmp</code>.</span>
