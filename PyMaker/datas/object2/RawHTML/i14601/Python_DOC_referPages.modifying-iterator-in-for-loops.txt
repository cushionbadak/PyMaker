<div class="post-text" itemprop="text">
<p>Is it possible to modify your iterator in for loops?</p>
<p>My code isn't running as expected (printing 0-9). 
I can do it with a while loop but looking for a for loop solution.</p>
<pre><code>for r in range(0,10):
    if(r==0):
        print (0)
        print (1)
        print (2)
        r = r+3
    else:
        print(r)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Doing:</p>
<pre><code>r = r+3
</code></pre>
<p>will not work as expected because <code>r</code> is assigned to the value just returned by the iterator, not the iterator itself.  To advance the iterator, you need to call <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next</code></a> on it.  </p>
<p>You can do this by first saving the iterator in a variable and looping over that:</p>
<pre><code>it = iter(range(0,10))
for r in it:
</code></pre>
<p>This will allow you to then call <code>next</code> on it inside the loop:</p>
<pre><code>it = iter(range(0,10))
for r in it:
    if(r==0):
        print (0)
        print (1)
        print (2)
        for _ in range(3): # Advance the iterator by 3.
            next(it)
    else:
        print(r)
</code></pre>
<p>Note however that, as @StevenRumbalski said, calling <code>next</code> on an empty iterator will raise a <code>StopIteration</code> exception.  Sometimes this behavior  is desirable, but if not, you can specify a default value to return:</p>
<pre><code>next(it, None)
</code></pre>
<p>This will effectively make the line a no-op.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assigning to the loop variable will simply be overwritten by the next iteration of the loop.  The loop variable is an assignment like anything else.  This PyCon 2015 talk might help explain the details:  <a href="http://nedbatchelder.com/text/names1.html" rel="nofollow">Python Names and Values</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for r in range(10):
    print r
</code></pre>
<p>I guess... assuming i understood ...</p>
<p>[edit] Oh i finally figured out what you meant ... the answer is not really r is reasigned each loop</p>
<p>you could however affect the iterator</p>
<pre><code>my_iter = xrange(10)
for value in my_iter:
   if value == 0:
      print "A",value
      print "B",next(my_iter)
      print "C",next(my_iter)
   else:
      print value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>for r in range(0, 10)</code> assigns to <code>r</code> each iteration.  This means that assignments to the loop variable will not persist to the next iteration.</p>
<p>Your for-loop is equivalent to:</p>
<pre><code>it = iter(range(0, 10))
while True:
    try:
        r = next(it)
    except StopIteration:
        break
    if(r==0):
        print (0)
        print (1)
        print (2)
        r = r+3
    else:
        print(r)
</code></pre>
<p>That <code>r = next(it)</code> clobbers any assignment you made to the name <code>r</code> in previous iterations.  The same thing happens implicitly in your for-loop.</p>
<p>If your end goal is to advance your iterator by a certain number of steps, call <code>next(it)</code> the number of times you wish to advance it (as per iCodez's answer).  </p>
</div>
<span class="comment-copy">why would you not expect 0 - 13?</span>
<span class="comment-copy">what do you actually expect as output?</span>
<span class="comment-copy">0-9, but printing 0-9 is not the issue, modifying the iterator is.</span>
<span class="comment-copy">thanks a lot. but for _ in range(2) is working properly.</span>
<span class="comment-copy">you figured out what the question was before I did :P (+1)</span>
<span class="comment-copy">thank you very much!</span>
<span class="comment-copy">no, sorry but you didn't. This is a simple example, the thing is not to print numbers from 0 to 10, it is modifying your iterator.</span>
