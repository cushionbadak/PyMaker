<div class="post-text" itemprop="text">
<p>I have been able to write a batch file to find files and put the file paths into a CSV. I haven't been able to figure out how to read the file locations from the CSV and then move the files to a different storage device with the same folder structure using python.  This is what I'd like to do.</p>
<p>I wish I had some code to show you but none of it has worked.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a quick and dirty solution. (I haven't tested it yet, YMMV!)</p>
<pre><code>import csv
import os
import shutil
import sys


def main(argv):
  # TODO: this should do some error checking or maybe use optparse
  csv_file, existing_path_prefix, new_path_prefix = argv[1:]

  with open(csv_file, 'rb') as f:
    reader = csv.reader(f)
    for row in reader:
      # Assuming the column in the CSV file we want is the first one
      filename = row[0]

      if filename.startswith(existing_path_prefix):
        filename = filename[len(existing_path_prefix):]

      new_filename = os.path.join(new_path_prefix, filename)

      print ('Copying %s to %s...' % filename, new_filename),
      shutil.copy(filename, new_filename)
      print 'done.'
  print 'All done!'


if __name__ == '__main__':
  main(sys.argv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding to Daniel's post, since he did warn he hadn't tested it :), I think you'll need to make a couple small changes. Basically, I think the issue in the suggested code is that <code>filename</code> is assumed to be the full path. But then that creates a problem when you get to the <code>os.path.join</code> command for <code>new_filename</code> because you're adding a new path to a full path and name. </p>
<p>I would suggest including a <code>filepath</code> and <code>filename</code> in your csv to make the code run. The changes appear to work when I testd it, although I didn't run as a function (and I used <code>print()</code> statements for Python 3.4 syntax):</p>
<pre><code>with open(csv_file, 'rb') as f:
    reader = csv.reader(f)
    for row in reader:
      # Assuming the columns in the CSV file we want are the first two  // Changed
      filename = row[0]
      filepath = row[1]   #Changed

     '''Changed: I skipped over this next part, didn't need it, but should be
     easy enough to figure out
     if filename.startswith(existing_path_prefix):
       filename = filename[len(existing_path_prefix):]
     '''

     new_filename = os.path.join(new_path_prefix, filename)

     print ('Copying %s to %s...' % filepath, new_filename)  #Changed
     shutil.copy(filepath, new_filename)   #Changed
     print 'done.'
print 'All done!'
</code></pre>
</div>
<span class="comment-copy">Check out <code>shutil.copy</code></span>
<span class="comment-copy">Read the file locations using the <a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow noreferrer">csv</a> module. Strip each file path down to just the filename using <a href="https://docs.python.org/3/library/os.path.html#module-os.path" rel="nofollow noreferrer">os.path</a>, then use it again to join the destination folder path to the filename. At that point, all you have to do is copy the file from it's original location to the target location.</span>
<span class="comment-copy">even if it doesn't work exactly as you'd like, it's always good to post the code you've produced so far, as well as the input it takes (here, the CSV file).  also post its current output and how this differs from your desired output.  (in your case, which and whether files are moved.)</span>
