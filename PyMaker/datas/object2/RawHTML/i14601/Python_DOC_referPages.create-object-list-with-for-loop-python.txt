<div class="post-text" itemprop="text">
<p>The following code:</p>
<pre><code>#!/usr/bin/python

class TestClass:
    container = []

testList = []

for i in range(2) :
    testList.append(TestClass())
    for j in range(4) :
        testList[i].container.append(j)

for i in range(2):
    print testList[i].container
</code></pre>
<p>returns the following:</p>
<pre><code>[0, 1, 2, 3, 0, 1, 2, 3]
[0, 1, 2, 3, 0, 1, 2, 3]
</code></pre>
<p>I'm puzzled as to why... I would expect it to be:</p>
<pre><code>[0, 1, 2, 3]
[0, 1, 2, 3]
</code></pre>
<p>Can someone help me what I'm missing here? I'm new to python I have a C/C++ background. Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>That's not how you do members in Python.</p>
<p>Or, rather, it's how you do it when you want a <em>class attribute</em>: Instead of each <code>TestClass</code> instance having its own separate <code>container</code> member, they all share a single one. (Since you mentioned your C++ background, this is similar to a <code>static</code> member in C++, although not quite identical, so don't try to take that analogy too far.)</p>
<p>That's not what you want here; you want an <em>instance attribute</em>. The normal way to do that is to just create one in the <code>__init__</code> method (which is like the C++ constructor—although, again, not exactly like it):</p>
<pre><code>class TestClass:
    def __init__(self):
        self.container = []
</code></pre>
<p>And yes, this means that if you really want to, you can create two different <code>TestClass</code> instances that, despite being the same type, have completely different members.</p>
<p>While we're at it, in Python 2.x, you never* want to write <code>class TestClass:</code>. Use <code>class TestClass(object):</code> instead.</p>
<p>You probably want to read through the <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow">Classes</a> chapter of the official tutorial, or some equivalent explanation elsewhere. Python classes are very different from C++ classes in a lot of ways.</p>
<hr/>
<p><sub>* There are some exceptions where you at least arguably want it, but you don't want to learn about those now.</sub></p>
</div>
<span class="comment-copy">The reason is that TestClass.container is a class attribute, not an instance attribute. Define container in the constructor.</span>
<span class="comment-copy">Thanks that worked!</span>
