<div class="post-text" itemprop="text">
<p>Hypothetically speaking, my function <em>returns a value</em> and <em>has lot of print statements</em> (maybe 100 or more). </p>
<p>Is there a way to run <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow"><code>doctest</code></a> such that all the other printing work can be ignored/skipped (I am familiar with the <code>+SKIP</code> directive, which is for skipping <code>doctest</code> examples), i.e. when I execute my function (or run my module as a script) with <code>doctest</code>s:</p>
<pre><code>python mymodule.py
</code></pre>
<p>Or: </p>
<pre><code>python -m doctest mymodule.py
</code></pre>
<p>I should get:</p>
<ul>
<li>nothing, in case of success; or</li>
<li>error messages in case any test example fails;</li>
</ul>
<p>and nothing else. Running <code>doctest</code> should not give me a terminal window full of outputs / text from those <code>print</code> function calls.</p>
<p>Please don't suggest using unit testing (e.g. <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow"><code>unittest</code></a>) as it'll kill the essence of the question.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>doctest</code> uses <code>stdout</code>, <strong>not</strong> <code>stderr</code>, to show messages from any failing tests. Therefore you cannot patch out <code>stdout</code> as this answer originally suggested - this will suppress your <code>print</code> calls <strong>and</strong> any messages from <code>doctest</code>.</p>
<hr/>
<p>One option is to define functions that <code>print</code> with an additional <code>verbose</code> parameter, so that you can suppress this when necessary.</p>
<pre><code>def foo(verbose=True):
    """Does whatever.

        &gt;&gt;&gt; foo(verbose=False)

    """
    if verbose:
        print('Hello world')
</code></pre>
<p>Although you have to change the functions, this also gives you useful options when not testing.</p>
<hr/>
<p>Another is to explicitly supply the appropriate <code>print</code> function to the functions that use it, allowing you to pass a NOOP at runtime:</p>
<pre><code>def bar(print=print):
    """Does whatever.

        &gt;&gt;&gt; bar(print=lambda *args, **kwargs: None)

    """
    print('Hello world')
</code></pre>
<p>This also requires changes to function definitions, but at least avoids changes in the <em>bodies</em> of those functions.</p>
<hr/>
<p>A third option is to patch out <code>print</code> for the whole module under test, for example:</p>
<pre><code>def baz():
    """Does whatever.

        &gt;&gt;&gt; baz()

    """
    print('Hello world')

if __name__ == '__main__':

    import doctest

    print = lambda *args, **kwargs: None

    doctest.testmod()
</code></pre>
<p>Note that this affects the outputs that <code>doctest</code> sees, too, so you don't include any of the <code>print</code> output in the docstring (I assume this is good news!) It won't work with <code>python -m doctest mymodule.py</code>, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>in addition to <a href="https://stackoverflow.com/users/3001761/jonrsharpe">jonrsharpe</a>'s excellent answer, there is one more way, that <em>does</em> work with the <code>python3 -m doctest module.py</code> construct.</p>
<pre><code>#!/usr/bin/python3 -OO
'''
Some ideas for adding additional verbosity during doctest, and for
reducing verbosity and startup delays during doctest or pydoc.
'''
from __future__ import print_function  # for compatibility with python2
import sys, os, logging
logging.basicConfig(level = logging.DEBUG if __debug__ else logging.INFO)
COMMAND = os.path.splitext(os.path.basename(sys.argv[0]))[0]
if COMMAND in ['doctest', 'pydoc']:
    NONDOCTESTPRINT = lambda *args, **kwargs: None
    DOCTESTDEBUG = logging.debug
else:
    NONDOCTESTPRINT = print
    DOCTESTDEBUG = lambda *args, **kwargs: None
    # You can also use this `else` block to import things not needed during
    # doctest, especially slow-loading modules like `requests`,
    # or to do some other verbose or slow initialization.

def test(string):
    '''
    print string after lead-in

    &gt;&gt;&gt; test("I'm in love with you!")
    Listen!
    I'm in love with you!
    '''
    DOCTESTDEBUG("If this works, you shouldn't see anything but this")
    print('Listen!')
    NONDOCTESTPRINT('Do you want to know a secret?')
    NONDOCTESTPRINT('Do you promise not to tell? Whoa, oh...')
    NONDOCTESTPRINT('Closer...')
    NONDOCTESTPRINT('Let me whisper in your ear...')
    NONDOCTESTPRINT('Say the words you long to hear...')
    print(string)

if __name__ == '__main__':
    test(' '.join(sys.argv[1:]) or 'Taxation is theft.')
</code></pre>
<p>Here is what the output looks like, depending on how it's called.</p>
<pre><code>jcomeau@aspire:/tmp$ python3 -m doctest doctesttest.py 
DEBUG:root:If this works, you shouldn't see anything but this
jcomeau@aspire:/tmp$ python3 doctesttest.py This is a test!
Listen!
Do you want to know a secret?
Do you promise not to tell? Whoa, oh...
Closer...
Let me whisper in your ear...
Say the words you long to hear...
This is a test!
</code></pre>
<p>and for <code>pydoc doctesttest</code>:</p>
<p><a href="https://i.stack.imgur.com/wnDtr.png" rel="nofollow noreferrer"><img alt="pydoc output of above script" src="https://i.stack.imgur.com/wnDtr.png"/></a></p>
</div>
<span class="comment-copy">very good. for that last case, how about <code>COMMAND = os.path.splitext(os.path.basename(sys.argv[0]))[0]; print = (lambda *args, **kwargs: None) if COMMAND == 'doctest' else print</code> ... ?</span>
<span class="comment-copy">@jcomeau_ictx I'd guard the reassignment rather than use a ternary expression, but that would work if you need that edge case.</span>
<span class="comment-copy">yeah I would too if I weren't trying to type it in a comment box :smile:</span>
<span class="comment-copy">'Taxation is theft.' is politics, should be pop songs or Monty Python references. Since you were looking to be discovered.</span>
