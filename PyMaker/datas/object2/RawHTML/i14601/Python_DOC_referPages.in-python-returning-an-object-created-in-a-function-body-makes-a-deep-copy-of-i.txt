<div class="post-text" itemprop="text">
<p>I'll try to clarify:</p>
<p>For example, I make a function that locally creates a list, and return it. How does Python create the returned list that exist outside the function body ? Does it use "deepcopy" (or something similar) ?</p>
<pre><code>In [50]: def create_list():
    ...:     sublist1 = [1,2,3]
    ...:     sublist2 = [4,5,6]
    ...:     list_of_lists=[sublist1,sublist1,sublist2]
    ...:     return list_of_lists
    ...: 

In [51]: l=create_list()

In [52]: l
Out[52]: [[1, 2, 3], [1, 2, 3], [4, 5, 6]]

In [53]: l[0].append(4)

In [54]: l
Out[54]: [[1, 2, 3, 4], [1, 2, 3, 4], [4, 5, 6]]
</code></pre>
<p>Here, the returned list <code>l</code> still contains the sublists. And <code>l[0]</code> and <code>l[1]</code> still reference the same sublist (which is normal Python behavior). So the list and its structure were copied.</p>
<p>And if I call once again <code>create_list()</code> :</p>
<pre><code>In [55]: l2=create_list()

In [56]: l2
Out[56]: [[1, 2, 3], [1, 2, 3], [4, 5, 6]]

In [57]: l
Out[57]: [[1, 2, 3, 4], [1, 2, 3, 4], [4, 5, 6]]
</code></pre>
<p>A new list <code>l2</code> has been created, but <code>l</code> is unaffected, which means it does exist outside the function, and its sublists are its own, not references to sublists that would still exist in the function body.</p>
<p>So my question : does Python used deepcopy or something similar to make <code>l</code> ?
Not matter what kind of object I return with a function, it will be unaffected by subsequent call to this function ?
(as long as the object was created locally in the function)</p>
<p>Do not hesitate to tell me if I'm not clear enough.
Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>When you run the function the second time, the entire function is rerun - it has no memory along the lines of <em>"last time, <code>sublist1</code> was <code>[1, 2, 3]</code>"</em>.</p>
<p>You haven't <em>copied</em> the list <code>[1, 2, 3]</code>. You've <em>created</em> it twice.</p>
<hr/>
<p>Note that if you use a caching decorator like <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow"><code>@functools.lru_cache</code></a>, you'll get surprising results:</p>
<pre><code>&gt;&gt;&gt; @lru_cache()
... def create_list():
...     sublist1 = [1,2,3]
...     sublist2 = [4,5,6]
...     list_of_lists=[sublist1,sublist1,sublist2]
...     return list_of_lists
...
&gt;&gt;&gt; l = create_list(); l
[[1, 2, 3], [1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; l[0].append(4); l
[[1, 2, 3, 4], [1, 2, 3, 4], [4, 5, 6]]
&gt;&gt;&gt; create_list()
[[1, 2, 3, 4], [1, 2, 3, 4], [4, 5, 6]]
</code></pre>
<p>Because in this case, python does have a memory of the previous result, and returns the same object</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>This might not directly answer this question but should help clarify related concept.</strong> </p>
<p>If you create a nested object inside a function and return it, the object will continue to exist. It would not go out of scope even though the function ended. </p>
<p><strong>Example Code</strong> </p>
<pre><code>class Some_Class (object):
    prop_x = None
    def __init__(self, prop_x ):
        self.prop_x = prop_x
    def __repr__(self):
        return "prop_x = "+repr (self.prop_x)

def fx ():
    dict_x = { "k1" : "v1" }
    print hex ( id (dict_x) )
    obj1 = Some_Class ( prop_x = dict_x )
    print hex ( id (obj1.prop_x) )
    print "obj1 is "+repr( obj1 )
    return obj1

recv_obj = fx ()

print "recv_obj is "+repr( recv_obj ) 
print hex ( id (recv_obj.prop_x) ) 
</code></pre>
<p><strong>Output</strong> </p>
<pre><code>0xdfaae0
0xdfaae0
obj1 is prop_x = {'k1': 'v1'}
recv_obj is prop_x = {'k1': 'v1'}
0xdfaae0 
</code></pre>
<p>A dict, <code>dict_x</code>, is assigned to <code>prop_x</code> variable of a Class object <code>obj1</code>. The dict is not created again in memory but a <code>soft copy</code> takes place. <code>prop_x</code> points to the memory location of <code>dict_x</code>. </p>
<p>When you return object <code>obj1</code> at the end of this function, <code>dict_x</code> goes out of scope but the memory address used by it, <code>0xdfaae0</code>, is still pointed by <code>prop_x</code> in the returned object <code>recv_obj</code>. So, the dict values <code>{ "k1" : "v1" }</code> are preserved in memory. </p>
</div>
<div class="post-text" itemprop="text">
<p>Variables in Python are pointers to objects. So a function would return a pointer to an object created in the function, obviating the need for copying return values.</p>
</div>
<span class="comment-copy">No but python does create new objects each time you run a function bar you pass a mutable default arg.</span>
<span class="comment-copy">I thought it might have memory of previous time, since something like <code>def f(l=[]):</code> keeps track between different calls to <code>f</code>. So the default parameters are constructed only once when the function is defined, but its local values are only constructed when it is called (and are thus different for each call) ?</span>
<span class="comment-copy">@Yann: Bingo. Local values are constructed at function <i>call</i> time, default arguments are constructed at function <i>definition/declaration</i> time</span>
<span class="comment-copy">About your example with <code>@lru_cache()</code>, I understand that it caches previous function calls, so during the second call, it sees that a first call was made with the same arguments (i.e. none), so simply return the value of the first call (which was modified in between by  <code>l[0].append(4)</code>) ? I just want to make sure I understand.</span>
<span class="comment-copy">@Yann: Again, correct. Note the arguments were the empty tuple, <code>()</code>, not <code>None</code>.</span>
<span class="comment-copy"><code>dict_x</code> address was <code>0x2ff5540</code>, <code>prop_x</code> address is <code>0x35c5540 </code>. How do you say <code>prop_x</code> points to the same object as <code>dict_x</code> <i>(in the heap)</i>? Can you please explain it, may be I am missing something..</span>
<span class="comment-copy">@Shaharyar There was a typo in the memory address. The answer holds good. I have taken a fresh output of the same code and updated my answer. Thanks for pointing out the typo.</span>
<span class="comment-copy">Oh, I was actually sure I am being dumb to not understand it :) thanks anyway. Great example</span>
<span class="comment-copy">I know, what I was wondering was if it returns a pointer to an object, why does it point to different things for different runs ? I thought that when a function was defined, its local variables were also defined (since it's the case for default arguments), meaning that <code>sublist</code> was always at the same address in the memory, but it was not the case.</span>
