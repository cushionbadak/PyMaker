<div class="post-text" itemprop="text">
<p>I have queried a huge table where majority of the rows in each columns are null (<code>None</code>) for each single <code>id</code> (there are multiple rows for each <code>id</code>). I want to squash these so I'll have one row per <code>id</code></p>
<p>I'll provide a mock example of the input:</p>
<pre><code>    id  var1  var2
0   1  None  None
1   1  None     x
2   2  None     k
3   3  None  None
4   1  None  None
5   1     y   NOT
6   3     p  None
7   2    ss  None
8   2  None  None
</code></pre>
<p>And here would be the mock example of the output:</p>
<pre><code>    id var1  var2
0   1    y     x
1   2   ss     k
2   3    p  None
</code></pre>
<p>Note how <code>"NOT"</code> from <code>var2</code> column did not make it, because it's the second non-null value for <code>id==1</code>. </p>
<p>The following snippet works if there are only one value for each id:</p>
<pre><code>df = df.set_index('id')
cs = [df[col].dropna() for col in df]
pd.concat(cs, axis=1)
</code></pre>
<p>But if there are multiple values (such as <code>NOT</code> in the example), this throw an error.</p>
<p>Is there an easy way to aggregate the first not null value for each column for each <code>id</code>? Thanks.</p>
<p>Here's the mock example pandas dataframe, I'll have a lot more columns and rows for the real dataframe:</p>
<pre><code>df = pd.DataFrame([[1, None, None],[1, None, "x"],[2, None, "k"],[3,None, None], [1, None, None], [1, "y", "NOT"], [3, "p", None], [2, "ss", None], [2, None, None]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>idColumnName = 'id' # Define id column name
def funcGroup(x): # Define grouping function
    columns = [x for x in x.columns if x!=idColumnName] # Get columns that are not id column
    dictValues = {} # Init a dictionary
    for col_ in columns: # For each column ...
        nonNullValues = x.loc[~x[col_].isnull(), col_] # Get non null values
        firstNonNullValue = np.nan # Init result value as null
        if nonNullValues.shape[0]&gt;0: firstNonNullValue = nonNullValues.iloc[0] # If there are not null values return first
        dictValues[col_] = firstNonNullValue # Fill the dictionary
    return pd.Series(dictValues, columns) # Return a pandas Serie

df.groupby([idColumnName]).apply(funcGroup).reset_index() # Group by your id column and apply defined function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can check with <code>first</code> <code>: first not null value will be returned</code> </p>
<pre><code>df.groupby(0).first().reset_index()
Out[582]: 
   0     1     2
0  1  None  None
1  2  None     k
2  3  None  None
</code></pre>
</div>
<span class="comment-copy"><code>df.groupby('id', as_index=False).first(skipna=True)</code> looks like you forgot the <code>skipna</code> kwargs</span>
<span class="comment-copy"><code>first</code> doesn't seem to skip null, <code>skipna</code> is not a param of the <code>first</code> function apparently.</span>
