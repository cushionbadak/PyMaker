<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35904584/python-strip-unexpected-behavior">Python strip unexpected behavior</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p><code>value = div.xpath('normalize-space(.)').extract()[0].strip('{}:'.format(key)).strip()</code></p>
<p>The code above sometimes strips the last character from the word. After removing the code after <code>extract()</code> all the data came back fine but in a list.</p>
<p>Example :</p>
<ul>
<li><code>Unknown</code> from <code>Duration: Unknown</code> turns into <code>unknow</code></li>
<li><code>Movie</code> from <code>Type: Movie</code> turns into <code>Movi</code></li>
</ul>
<p>Why does this happen?</p>
<p>I tried this in Python shell and it also strips the last characters</p>
<pre><code>&gt;&gt;&gt; value = ['Type: Movie']
&gt;&gt;&gt; value[0].strip('{}:'.format('Type')).strip()
'Movi'
</code></pre>
<p>I expect it to return <code>Movie</code> instead of <code>e</code> getting stripped.</p>
<p>It seems that this <code>.strip('{}:'.format('Type'))</code> is responsible. I removed the last strip() it only return data with spaces.</p>
<p>Edit: It seems that <code>strip()</code> takes characters in inputted string and remove them instead of removing exact strings. That is why the data came out broken. I think a string split then slice is good.</p>
<p>Edit 2:
Seems like answers by Austin and Pankaj Singhal is good and bug free for my use case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>split</code> on <code>'Type: '</code> and take the second item:</p>
<pre><code>value = ['Type: Movie']
print(value[0].split('Type: ')[1])
# Movie
</code></pre>
<p>Talking about your code, <code>strip</code> is not meant for what you are trying to do. <code>strip</code> only removes characters from at the ends.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/library/string.html#string.lstrip" rel="nofollow noreferrer"><code>lstrip</code></a> (which returns a copy of the string with only leading characters removed), instead of <a href="https://docs.python.org/2/library/string.html#string.strip" rel="nofollow noreferrer"><code>strip</code></a> (which returns a copy of the string with leading and trailing characters removed):</p>
<pre><code>&gt;&gt;&gt; 'Type: Movie'.lstrip("Type:").strip()
'Movie'
&gt;&gt;&gt; 'Type: Something with Type'.lstrip("Type:").strip()
'Something with Type'
&gt;&gt;&gt; 'Type: Something with Type:'.lstrip("Type:").strip()
'Something with Type:'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>OR:</p>
<pre><code>&gt;&gt;&gt; value = ['Type: Movie']
&gt;&gt;&gt; value[0][value[0].find(':')+2:]
'Movie'
&gt;&gt;&gt; 
</code></pre>
<p>And of course, this is another option similar to the first one, just using <code>lstrip</code>:</p>
<pre><code>&gt;&gt;&gt; value[0][value[0].find(':')+1:].lstrip()
'Movie'
&gt;&gt;&gt; 
</code></pre>
<p>OR:</p>
<pre><code>&gt;&gt;&gt; value[0].lstrip(value[0][:value[0].find(':')+2])
'Movie'
</code></pre>
<p>Note: here <code>find</code> can be replaced with <code>index</code></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip</code></a> does not strip that exact string, but each character <em>in</em> that string, i.e. <code>strip("Type:")</code> will remove each <code>T</code>, <code>y</code>, <code>p</code>, etc. from the beginning and end of the string.</p>
<p>Instead, you could use a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expression</a> with the <code>^</code> anchor to only match substrings at the beginning of the string.</p>
<pre><code>&gt;&gt;&gt; value = ['Type: Movie with Type: in its name']
&gt;&gt;&gt; key = "Type"
&gt;&gt;&gt; re.sub(r"^{}: ".format(key), "", value[0])
'Movie with Type: in its name'
</code></pre>
</div>
<span class="comment-copy">What do you expect to happen?</span>
<span class="comment-copy">Do you understand what the different parts of the code are doing, i.e. <code>[0]</code>, <code>strip</code> or <code>format</code>? What is <code>key</code>? <code>strip(string)</code> will remove all the characters in <code>string</code> from the start and end of the word.</span>
<span class="comment-copy">Can show the data source?</span>
<span class="comment-copy">Edited. Check the post again!</span>
<span class="comment-copy"><code>strip</code> does NOT do what you think it does.</span>
<span class="comment-copy">This will introduce a bug. I only want "key" value + : to be stripped not anything with :</span>
<span class="comment-copy">I'm not stripping anything here. I used <code>split</code> function. Could you check it again?</span>
<span class="comment-copy">What I meant is that if you use this method, it will split anything with a ': ' in it. This include the data that I want to collect. For example, if the value is <code>Title: Alien: The Beginning</code>, it will return The Beginning instead of Alien only. Of course you could just get everything after the first but what I want to know is why strip removes the last character on some fields but does not for others when they are in the same format.</span>
<span class="comment-copy">I think I will use your method except that I will get everything after index 0. What do you think? Also a typo, I didn't really want just <code>Alien</code> but rather <code>Alien: The Beginning</code></span>
<span class="comment-copy">Nice, accepted.</span>
<span class="comment-copy">Won't work for <code>"Type: Something with Type:"</code></span>
<span class="comment-copy">@tobias_k It's working</span>
<span class="comment-copy">That also reminds me to make sure this does not happen. Thanks @tobias_k</span>
<span class="comment-copy">@PankajSinghal I think what he meant is that it will remove the final Type: too instead of just first one.</span>
<span class="comment-copy">As @tobias_k said, you would end up replacing all <code>Type:</code> throughout the sentence. You could use <code>startswith</code> here before replacing</span>
<span class="comment-copy">imo that's crazy long. Not very readable, but I rarely use find and lstrip</span>
<span class="comment-copy">@KuoChongYii <code>find</code> can actually be changed to <code>index</code></span>
<span class="comment-copy">That make sense and is more readable because we are not really finding the word but rather what the index is instead of the position of the word.</span>
<span class="comment-copy">@KuoChongYii Edited mine (with a more unreadable one), Also you have enough reputation to upvote so you can do it if you want</span>
<span class="comment-copy">But then it will remove the Type: in the middle. I think a simple string split then slice is good enough for this. Avoids the bugs when you replacing or subsituting characters.</span>
<span class="comment-copy">@KuoChongYii No, it does not. That's exactly what the <code>^</code> is there for. (Just realized that I changed the input without updating the output, maybe that was confusing.)</span>
<span class="comment-copy">Oh so it just subsitute the beginning of the string and thats it?</span>
<span class="comment-copy">@KuoChongYii Exactly, <code>^x</code> means that <code>x</code> has to appear at the very beginning of the string.</span>
<span class="comment-copy">I should learn it but I always get bored on it and there isn't much project I can do with it.</span>
