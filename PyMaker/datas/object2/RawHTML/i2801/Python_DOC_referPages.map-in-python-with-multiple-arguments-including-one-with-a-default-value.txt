<div class="post-text" itemprop="text">
<p>I am using Python3.6 and am trying to figure out ways in which we can use <code>map</code> with multiple arguments.</p>
<p>When I run, </p>
<pre><code>def multiply(x, y, z):
    return x * y * z

products = map(multiply, [3,6], [1,8], [3,5])
</code></pre>
<p><code>list(products)</code> returns <code>[9, 240]</code> as expected</p>
<p>However, when I specify a default value for z,</p>
<pre><code>def multiply(x, y, z = [3,5]):
    return x * y * z

products = map(multiply, [3,6], [1,8])
</code></pre>
<p><code>list(product)</code> returns</p>
<pre><code>[[3, 5, 3, 5, 3, 5],
 [3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5,
  3,
  5]]
</code></pre>
<p>Why does Python differ in the way it runs <code>map</code> in the two scenarios?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you set the default value of z during execution with map this happens:</p>
<pre><code>3 * 1 * [3,5]
6 * 8 * [3,5]
</code></pre>
<p>Therefore your output, for map to work as you intend you should explicitly give the list as one of it arguments and in your case the default value of z is not a direct argument of map. Hope this makes sense. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>l=iter([3,5])
def multiply(x, y, z = l):
    return x * y * next(z)

products = map(multiply, [3,6], [1,8])
</code></pre>
<p>Then <code>list(products)</code> would be: <code>[9, 240]</code></p>
<p><strong>Explanation:</strong></p>
<p>Your code doesn't work because you're multiplying a number with a list (so basically it will be a list repeated n times), you need to get always the next value, so do <code>next</code> to the <code>iter</code> of the list</p>
<p>See: <a href="https://stackoverflow.com/questions/1733004/python-next-function">Python: next() function</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think it should use <code>reduce</code> rather than <code>map</code>.<a href="https://stackoverflow.com/questions/49934992/main-difference-between-map-and-reduce">This link explain difference between <code>reduce</code> and <code>map</code></a>.Using <code>reduce</code> it should be</p>
<pre><code>import functools
expected=functools.reduce(lambda acc,current:[acc[0]*current[0],acc[1]*current[1]],([3,6], [1,8], [3,5]))
print(expected) # [9, 240]
</code></pre>
<p>According to this <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">doc</a>.<code>reduce</code> is roughly equivalent to:</p>
<pre><code>def reduce(function, iterable, initializer=None):
    it = iter(iterable)
    if initializer is None:
        value = next(it)
    else:
        value = initializer
    for element in it:
        value = function(value, element)
    return value
</code></pre>
</div>
<span class="comment-copy">Because <code>z</code> is a list..</span>
<span class="comment-copy">Sure, But isn't <code>z</code> a list in both scenarios?</span>
<span class="comment-copy">Okay, i'll edit</span>
<span class="comment-copy">@Isaac no, it's <i>not</i> a list in both scenarios. It get's passed the elements <i>inside the list</i> when you use <code>map</code>.</span>
<span class="comment-copy">This works. Although do you know why the code multiplies <code>z' to </code>x*y` when z does not have a default value, and repeats <code>z</code> <code>x*y</code> times when z has a default value?</span>
<span class="comment-copy">@Isaac i don't fully understand what you mean, but as you know in the function you're doing something to a <b>list</b> not a <b>int</b>  so it basically is <code>x*y*[3,5]</code></span>
<span class="comment-copy">I agree, but if I were to use reduce, I think this might be cleaner:  <code>expected = functools. reduce(lambda x, y : [z[0]*z[1] for z in zip(x,y)] , ([3,6], [1,8], [3,5]))</code>  Thanks for the idea.</span>
