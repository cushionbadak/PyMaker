<div class="post-text" itemprop="text">
<p>I have read a paper that seems to say that meta-programming of Lisp, Scheme, and Lisp-like macros happens at compile time: <a href="http://tratt.net/laurie/research/pubs/html/tratt__compile-time_meta-programming_in_a_dynamically_typed_oo_language/" rel="nofollow noreferrer">http://tratt.net/laurie/research/pubs/html/tratt__compile-time_meta-programming_in_a_dynamically_typed_oo_language/</a>. </p>
<p>It also seems to state that dynamic languages such as Python do not use much of compile-time metaprogramming. I know that in a way Java can do compile-time metaprogramming using class loaders. In Python metaprogramming with Metaclasses and decorators as well as reflection using methods such as type(), isInstance(), etc...is this all metaprogramming at runtime or is there more behind it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The short version is: yes, decorators, metaclasses, etc. are mainly something that happens at runtime.</p>
<p>This also means that SmallTalk is in general a better reference point than Lisp for understanding metaprogramming in Python.<sup>1</sup></p>
<hr/>
<p>The long version is a bit involved.</p>
<p>"Compile time" in Python is about compiling the bodies of function definitions, class definitions, and modules themselves to bytecode. "Runtime" involves interpreting those bodies.<sup>2</sup></p>
<p>In particular, things like <code>def</code> and <code>class</code> statements are (compiled to) runtime code that gets executed like any other.</p>
<hr/>
<p>For example, consider this module:</p>
<pre><code>@spam
def eggs():
    print(3)
</code></pre>
<p>The <code>print(3)</code> body gets compiled into some bytecode that, when executed, looks up <code>print</code> and calls it with the argument <code>3</code>. That bytecode can then be treated as a constant.</p>
<p>Then the module body gets compiled into something kind of like this pseudocode:</p>
<pre><code>eggs = spam(FunctionType('eggs', eggs_bytecode_constant, (), other_stuff))
</code></pre>
<p>And when you <code>import</code> the module (or run it as a script), that compiled code gets executed at runtime. So, that's when the decorator is called.</p>
<hr/>
<p>And similarly, consider this:</p>
<pre><code>class Spam(metaclass=MetaSpam):
    def eggs(self):
        pass
</code></pre>
<p>First, that <code>pass</code> is compiled into bytecode that does nothing but return <code>None</code>, which can be treated as a constant.</p>
<p>Next, that class body is compiled into bytecode. Since the class body just has the <code>def</code> statement, the bytecode does the equivalent of this:</p>
<pre><code>eggs = FunctionType('eggs', eggs_bytecode_constant, ('self',), other_stuff))
</code></pre>
<p>Next, that <code>class</code> statement is compiled into bytecode that does something like this:</p>
<pre><code>_namespace = {}
exec(Spam_bytecode_constant, _namespace)
Spam = MetaSpam('Spam', (object,), _namespace)
</code></pre>
<p>Then, when you <code>import</code> the module (or run it as a script), that bytecode gets executed. So, that's when the metaclass is called, creating the class object.</p>
<hr/>
<p>What this means is that you can almost ignore the issue of what happens at compile time.<sup>3</sup></p>
<p>It you want to call <code>type</code> (or a custom metaclass) directly, you get the exact same effect as a <code>class</code> statement. You can even construct function objects out of bytecode objects manually, and you get the exact same effect as a <code>def</code> statement or <code>lambda</code> expression. And you can modify a function or class after it was created—e.g., adding new methods to a class via <code>Spam.cheese = cheese</code> ends up no different than if you'd defined them directly in the <code>class</code> statement.<sup>4</sup></p>
<p>This also means that reflection is nothing magical in Python. Objects carry their type information around with them in public attributes, and the stuff the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module does is pretty much the same stuff the interpreter is doing with the same attributes.</p>
<p>But, on the other hand, it means that some things that are easy to do with Lisp macros—like taking the AST of an expression rather than the expression's value as an argument—are not possible with Python metaprogramming.</p>
<hr/>
<p>Well, I say it's not possible, but… if you want to do Lisp-style metaprogramming in Python, you actually can do that as well. It just means writing and installing <a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow noreferrer">import hooks</a>.<sup>5</sup></p>
<p>Normally, in Python, an <code>import</code> finds the source file, decodes it as text with <code>bytes.decode</code>, tokenizes it with the <code>tokenize</code> module, parses the tokens with <code>ast.parse</code>, and compiles the result with <code>compile</code>. All of these pieces are exposed to Python code, and (in 3.4+) the entire import system is itself written in Python using the same modules you can use yourself. </p>
<p>So, an import hook can install a custom loader that will, e.g., decode, tokenize, and parse like the default loader, then modify the AST the same way a Lisp-style macro would, then compile and return the result like the default loader.</p>
<p>If you're at all interested in doing this, you should look at <a href="https://pypi.org/project/macropy3/" rel="nofollow noreferrer">MacroPy</a>.</p>
<hr/>
<p><sub>1. In fact, IIRC, the first edition of Forman and Danforth's SmallTalk book <em>Putting Metaclasses to Work</em> and another paper by Danforth were the main influences on Python's metaprogramming design.</sub></p>
<p><sub>2. In interactive mode, Python compiles and then executes one statement at a time, mixing things up a bit, but the ideas aren't that much different.</sub></p>
<p><sub>3. In fact, different implementations can choose to do more or less at compile time than CPython, as long as the semantics end up the same.</sub></p>
<p><sub>4. Except for some subtle issues with, e.g., the way the <code>def</code> statements are executed inside that <code>_namespace</code> above vs. inside <code>globals()</code>, which can affect things like <code>super()</code>.</sub></p>
<p><sub>5. The original PEP does a good job covering the history and rationale, but not covering the way to write and install hooks in modern Python. For that, read the reference docs on <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">the import system</a> and follow the links to the <code>importlib</code> package.</sub></p>
</div>
<span class="comment-copy">Python doesn't have "compile time" the same way that many other languages do.  Everything happens at run time.  Could you be a little more clear as to the scope of your question?</span>
