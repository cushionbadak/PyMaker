<div class="post-text" itemprop="text">
<p>I have an django app route that will run a pytest.main() command if some conditions are met: </p>
<pre><code>def run_single_test(request, single_test_name):
    # get dict of test names, test paths
    test_dict = get_single_test_names()
    # check to see if test is in the dict
    if single_test_name in test_dict:
        for test_name,test_path in test_dict.items():
            # if testname is valid run associated test
            if test_name == single_test_name:
                os.chdir('/lib/tests/')
                run_test = pytest.main(['-v', '--json-report', test_path])
    else:
        return 'The requested test could not be found.'
</code></pre>
<p>I would like to include a unit test that validates <code>run_test</code> has been executed. </p>
<p>What is the best approach to doing this? Mock and unittest are new to me.</p>
<p>I tried messing around with stdout:</p>
<pre><code>def test_run_single_test_flow_control(self):
        mock_get = patch('test_automation_app.views.get_single_test_names')
        mock_get = mock_get.start()
        mock_get.return_value = {'test_search': 'folder/test_file.py::TestClass::test'}

        results = run_single_test('this-request', 'test_search')
        output = sys.stdout
        self.assertEqual(output, '-v --json-report folder/test_file.py::TestClass::test')
</code></pre>
<p>but this returns: </p>
<pre><code>&lt;_pytest.capture.EncodedFile object at XXXXXXXXXXXXXX&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are two example tests that verify that <code>pytest.main</code> is invoked when a valid test name is passed and not invoked otherwise. I also added some different invocations of <code>mock_pytest_main.assert_called</code> as an example; they all do pretty much the same, with extra check for args that were passed on function call. Hope this helps you to write more complex tests!</p>
<pre><code>from unittest.mock import patch
from test_automation_app.views import run_single_test


def test_pytest_invoked_when_test_name_valid():
    with patch('pytest.main') as mock_pytest_main, patch('test_automation_app.views.get_single_test_names') as mock_get:
        mock_get.return_value = {'test_search': 'folder/test_file.py::TestClass::test'}
        results = run_single_test('this-request', 'test_search')
        mock_pytest_main.assert_called()
        mock_pytest_main.assert_called_with(['-v', '--json-report', 'folder/test_file.py::TestClass::test'])
        mock_pytest_main.assert_called_once()
        mock_pytest_main.assert_called_once_with(['-v', '--json-report', 'folder/test_file.py::TestClass::test'])


def test_pytest_not_invoked_when_test_name_invalid():
    with patch('pytest.main') as mock_pytest_main, patch('test_automation_app.views.get_single_test_names') as mock_get:
        mock_get.return_value = {'test_search': 'folder/test_file.py::TestClass::test'}
        results = run_single_test('this-request', 'test_non_existent')
        mock_pytest_main.assert_not_called()
</code></pre>
</div>
<span class="comment-copy">You can mock <code>pytest.main</code> and verify it was called with <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called" rel="nofollow noreferrer"><code>Mock.assert_called</code></a> afterwards.</span>
<span class="comment-copy">I'll give that a shot, thank you.</span>
<span class="comment-copy">I do not think I am doing this correctly. I created mock_pytest = patch('pytest.main') and then towards the added mock_get.assert_called. This will always pass so I must be implementing incorrectly.</span>
<span class="comment-copy">When calling <code>mock_get.assert_called()</code>, you check that <code>get_single_test_names()</code> was called in the test; you need to use the correct mock to check whether <code>pytest.main</code> was invoked. I have added an answer that should give you an example of mocking and asserting the mock was invoked.</span>
<span class="comment-copy">Thanks very much, this makes sense now. Appreciate the help!</span>
<span class="comment-copy">Nice, glad I could help!</span>
