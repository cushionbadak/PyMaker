<div class="post-text" itemprop="text">
<p>Doing simple multiplication seem that <code>lambda</code> is faster; why?</p>
<pre><code>import numpy as np
import time

def mult(x=None, y=None): return x*y

x = np.random.rand(10000,10000)

f = lambda z, g: z*g

start = []
end = []

for i in xrange(100):
    start.append(time.time())
    x*5
    end.append(time.time())

start = np.array(start)
end = np.array(end)

print np.sum(end-start)/len(end)

start = []
end = []

for i in xrange(100):

    start.append(time.time())
    f(x, 5)
    end.append(time.time())

start = np.array(start)
end = np.array(end)

print np.sum(end-start)/len(end)

start = []
end = []

for i in xrange(100):

    start.append(time.time())
    mult(x, 5)
    end.append(time.time())

start = np.array(start)
end = np.array(end)

print np.sum(end-start)/len(end)
</code></pre>
<p>I get:</p>
<pre><code>0.487183141708
0.482636857033
0.483230319023
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://kite.com/python/docs/timeit" rel="nofollow noreferrer"><code>timeit</code></a> module:</p>
<pre><code>import numpy as np

def mult(x=None, y=None):
    return x*y
x = np.random.rand(1000, 1000)
f = lambda z, g: z*g


if __name__ == '__main__':
    import timeit
    setup_str = "from __main__ import x, f, mult"
    print(timeit.timeit('x*5', number=100, setup=setup_str))
    print(timeit.timeit('f(x, 5)', number=100, setup=setup_str))
    print(timeit.timeit('mult(x, 5)', number=100, setup=setup_str))
</code></pre>
<p>Output</p>
<blockquote>
<p>0.3345440280099865</p>
<p>0.42724098000326194</p>
<p>0.3455269880068954</p>
</blockquote>
</div>
<span class="comment-copy">You should use <code>timeit</code> to benchmark your code: <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">docs.python.org/3/library/timeit.html</a></span>
<span class="comment-copy">you should use <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">docs.python.org/3/library/timeit.html</a> to measure the performance and then paste the difference.</span>
<span class="comment-copy">I get <code>x * 5</code> <i>454 ms ± 4.86 ms per loop</i>, <code>f(x, 5)</code> <i>472 ms ± 17.3 ms per loop</i> and <code>mult(f, 5)</code> <i>458 ms ± 5 ms per loop</i>...</span>
<span class="comment-copy">Those differences are statistically insignificant</span>
<span class="comment-copy">So one single run, on one particular machine, in one particular order, gives a time for <code>lambda</code> that's marginally smaller than the two other times. That doesn't constitute good evidence that <code>lambda</code> is faster. I'd suggest running several times, and also varying the order in which the three timings are performed within the script. You can then do a statistical test to discover whether any difference you see is significant. If <code>lambda</code> is <i>consistently</i> faster across hundreds of runs, regardless of the ordering, then there may be something worth investigating.</span>
<span class="comment-copy">Seems like lambda is slowest.</span>
