<div class="post-text" itemprop="text">
<p>I'd like to raise a <code>NotImplementedError</code> when trying to set an attribute in a child class. Here's the code for the parent class:</p>
<pre><code>class Parent():

    def __init__(self):
        self._attribute = 1

    @property
    def attribute(self):
        return self._attribute

    @attribute.setter
    def attribute(self, value):
        self._attribute = value
</code></pre>
<p>I see that I can define a <code>Child</code> which overwrites' <code>Parent</code>'s attribute setter directly by doing any of the following:</p>
<pre><code>class ChildA(Parent):

    @Parent.attribute.setter
    def attribute(self, value):
        raise NotImplementedError('Not implemented.')


class ChildB(Parent):

    @property
    def attribute(self):
        return self._attribute

    @attribute.setter
    def attribute(self, value):
        raise NotImplementedError('Not implemented.')
</code></pre>
<p>Is there a difference between any of the above?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no difference between those two solutions.</p>
<p>In fact, the <code>@property.getter</code>, <code>@property.setter</code> and <code>@property.deleter</code> decorators have been carefully designed with this exact use case in mind. From <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>A property object has <code>getter</code>, <code>setter</code>, and <code>deleter</code> methods usable as
  decorators <strong>that create a copy of the property</strong> with the corresponding
  accessor function set to the decorated function.</p>
</blockquote>
<p>(Emphasis mine.)</p>
<p>So no, using <code>@Parent.attribute.setter</code> won't affect the behavior of the <code>Parent</code> class.</p>
<p>Overall, it's better to use the <code>@Parent.attribute.setter</code> solution because it reduces code duplication - copy-pasting the parent class's getter into the child class is nothing but a potential source of bugs.</p>
<hr/>
<p>Related questions:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/51244348/use-of-propertys-getter-in-python/51244516#51244516">Use of property's getter in python</a></li>
<li><a href="https://stackoverflow.com/questions/15785982/python-overriding-getter-without-setter">Python overriding getter without setter</a></li>
<li><a href="https://stackoverflow.com/questions/7019643/overriding-properties-in-python">Overriding properties in python</a></li>
</ul>
</div>
<span class="comment-copy">one question per ticket pls</span>
<span class="comment-copy">Aren't the questions way too related to merit 2 different threads?</span>
<span class="comment-copy">They don't look very related to me. You're essentially asking us to explain <code>property</code> <i>and</i> <code>super</code> to you. That's two questions.</span>
<span class="comment-copy">Alright. fixed.</span>
<span class="comment-copy">Not sure what to do with this question now... We have boatloads of related questions that have been answered with the <code>@Parent.attribute.setter</code> solution, but I can't find a question that has asked if there's a difference between these two solutions. Should I just post an answer that says "No, there's no difference" and link to a few related questions?</span>
