<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/22444/my-regex-is-matching-too-much-how-do-i-make-it-stop">My regex is matching too much. How do I make it stop?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I'd like to use a python regular expression to extract the substring between two different characters, &gt; and &lt;.</p>
<p>Here are my example strings:</p>
<ol>
<li><code>&lt;h4 id="Foobar:"&gt;Foobar:&lt;/h4&gt;</code></li>
<li><code>&lt;h1 id="Monty"&gt;Python&lt;a href="https://..."&gt;&lt;/a&gt;&lt;/h1&gt;</code></li>
</ol>
<p>My current regular expression is <code>\&gt;(.*)\&lt;</code> and matches:</p>
<ol>
<li><code>Foobar</code></li>
<li><code>Python&lt;a href="https://..."&gt;&lt;/a&gt;</code></li>
</ol>
<p>My re matches the first example correctly but not the second one. I want it to return "Python". What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use expression:</p>
<pre><code>(?&lt;=&gt;)[^&lt;:]+(?=:?&lt;)
</code></pre>
<ul>
<li><code>(?&lt;=&gt;)</code> Positive lookbehind for <code>&gt;</code>.</li>
<li><code>[^&lt;:]+</code> Match anything other than <code>&lt;</code> or <code>:</code>.</li>
<li><code>(?=:?&lt;)</code> Positive lookahead for optional colon <code>:</code>, and <code>&lt;</code>.</li>
</ul>
<p>You can try the expression live <a href="https://regex101.com/r/fLHT9f/3" rel="nofollow noreferrer">here</a>.</p>
<p>In Python:</p>
<pre><code>import re
first_string = '&lt;h4 id="Foobar:"&gt;Foobar:&lt;/h4&gt;'
second_string = '&lt;h1 id="Monty"&gt;Python&lt;a href="https://..."&gt;&lt;/a&gt;&lt;/h1&gt;'

print(re.findall(r'(?&lt;=&gt;)[^&lt;:]+(?=:?&lt;)',first_string)[0])
print(re.findall(r'(?&lt;=&gt;)[^&lt;:]+(?=:?&lt;)',second_string)[0])
</code></pre>
<p>Prints:</p>
<pre><code>Foobar
Python
</code></pre>
<hr/>
<p>Alternatively you could use expression:</p>
<pre><code>(?&lt;=&gt;)[a-zA-Z]+(?=\W*&lt;)
</code></pre>
<ul>
<li><code>(?&lt;=&gt;)</code> Positive lookbehind for <code>&gt;</code>.</li>
<li><code>[a-zA-Z]+</code> Lower and upper case letters.</li>
<li><code>(?=\W*&lt;)</code> Positive lookahead for any non word characters followed by <code>&lt;</code>.</li>
</ul>
<p>You can test this expression <a href="https://regex101.com/r/fLHT9f/4" rel="nofollow noreferrer">here</a>.</p>
<pre><code>print(re.findall(r'(?&lt;=&gt;)[a-zA-Z]+(?=\W*&lt;)',first_string)[0])
print(re.findall(r'(?&lt;=&gt;)[a-zA-Z]+(?=\W*&lt;)',second_string)[0])
</code></pre>
<p>Prints:</p>
<pre><code>Foobar
Python
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are missing the greediness of <code>*</code> quantifier - with <code>.</code> it matches as many characters as it can. To switch this quantifier to non-greedy mode add <code>?</code>:  </p>
<pre><code>\&gt;(.*?)\&lt;  
</code></pre>
<p>You can read more in the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">documentation</a> in the section <code>*?, +?, ??</code>.  </p>
</div>
<span class="comment-copy">You could try with this: <code>\&gt;(.*[^&gt;])\&lt;</code>. Though if you are trying to parse html code, then I would recommend using an html-parsing library instead, like <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow noreferrer"><code>bs4</code></a> ...</span>
<span class="comment-copy">This is incorrect. The <code>:</code> is matched after the <code>Foobar</code> substring. It's also matching <code>&gt;&lt;</code> too.</span>
<span class="comment-copy">Therefore your solution will not get the desired output, see <a href="https://regex101.com/r/oTPv8q/1" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@UnbearableLightness the author set his task very clearly in the first sentence - to extract the substring between <code>&gt;</code> and <code>&lt;</code>, which my solution helps to do in a way the author wanted. So either he made a mistake in the first sentence or in the desired output of the first test input.</span>
<span class="comment-copy">Your code is still incorrect. <code>print(re.findall(r'\&gt;(.*?)\&lt;','&lt;h1 id="Monty"&gt;Python&lt;a href="https://..."&gt;&lt;/a&gt;&lt;/h1&gt;'))</code> prints <code>['Python', '', '']</code>, hence my comment regarding the matching of empty strings.</span>
<span class="comment-copy">@UnbearableLightness the author provided his code, I pointed out why it did not work as he was expecting. Dealing with empty strings was not in the question.</span>
