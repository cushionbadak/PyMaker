<div class="post-text" itemprop="text">
<p>I am working with large nested dictionaries, and am trying to delete nested subdictionaries.  I am wondering why the following behavior occurs. </p>
<p>When I set a reference to dictionary d (called ref), then I change ref and print d, it shows an updated version of d with the third element added. </p>
<pre><code>input:
d={"a":1,"b":2}
ref=d
ref["c"]=3
print(d)

output:
{'a': 1, 'b': 2, 'c': 3}
</code></pre>
<p>Given this behavior, I was expecting to be able to delete the dictionary by delete</p>
<pre><code>input:
d={"a":1,"b":2}
ref=d
del ref
print(d)

output:
{'a': 1, 'b': 2}
</code></pre>
<p>I am wondering if there is a way to delete the original object when I delete the reference (meaning that the output of the second program would be an error because d was deleted.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2.0/ref/del.html" rel="nofollow noreferrer"><code>del</code> statement</a> behaves differently depending on what is being deleted. Paraphrasing slightly:</p>
<blockquote>
<p>Deletion of a name removes the binding of that name from the local or global namespace</p>
</blockquote>
<p>That is the second case presented. You've got two references to the same object. The name <code>ref</code> has been deleted, but the name <code>d</code> still exists and points to the same object is always did.</p>
<p>However, attributes, subscriptions, and slicings have different behaviour:</p>
<blockquote>
<p>Deletion of attribute references, subscriptions and slicings is passed to the primary object involved</p>
</blockquote>
<p>That is more like the first case - deleting an element from either name will be reflected in the other:</p>
<pre><code>input:
d = {"a":1, "b":2}
ref = d
del ref["a"]
print(d)

output:
{'b': 2}
</code></pre>
<p>So, wrapping the references inside a dictionary (or other container), will allow deletion by any reference.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>del</code> doesn't actually handle any de-allocation of memory, it merely <a href="https://docs.python.org/3/tutorial/datastructures.html#the-del-statement" rel="nofollow noreferrer">unbinds a value from a name</a>, and then decrements the reference count of that object by one. There is no way to systematically unbind all names from an object given a single reference.</p>
<p>An object is not garbage collected until some point after the reference count drops to 0. You can see an object's reference count by using the <a href="https://docs.python.org/3/library/sys.html#sys.getrefcount" rel="nofollow noreferrer"><code>sys.getrefcount</code></a> method (which is typically one higher than it actually is because of the temporary reference within the method itself).</p>
<p>We can demonstrate <code>del</code> in practice using this method and the <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow noreferrer"><code>__del__</code></a> method (which is called only when the reference count for the object is decremented to 0):</p>
<pre><code>&gt;&gt;&gt; # print something when refcount == 0 and object is about to be collected
&gt;&gt;&gt; class Deleted:
...     def __del__(self):
...         print("actually deleted")
...
&gt;&gt;&gt; a = Deleted()
&gt;&gt;&gt; # just a
&gt;&gt;&gt; sys.getrefcount(a) - 1
1
&gt;&gt;&gt; b = a
&gt;&gt;&gt; # a and b
&gt;&gt;&gt; sys.getrefcount(a) - 1
2
&gt;&gt;&gt; del a
&gt;&gt;&gt; # now it's just b
&gt;&gt;&gt; sys.getrefcount(b) - 1
1
&gt;&gt;&gt; del b
actually deleted
</code></pre>
<p>If you're curious to read more about how all of this works internally, check out the <a href="https://docs.python.org/3.7/c-api/refcounting.html" rel="nofollow noreferrer"><code>C</code> API</a> documentation on the internal calls for reference counting, and check out the <a href="https://docs.python.org/3.7/library/gc.html?highlight=gc#module-gc" rel="nofollow noreferrer"><code>gc</code> module</a>, which is the high level python interface for introspecting the garbage collection sub-system.</p>
<p>Given your specific problem, since you are working with dictionaries which are mutable types, you could just <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer"><code>clear</code></a> the dictionary:</p>
<pre><code>&gt;&gt;&gt; a = {"a": 1}
&gt;&gt;&gt; b = a
&gt;&gt;&gt; # will clear the dict that both a and b are referencing
&gt;&gt;&gt; b.clear()
&gt;&gt;&gt; a
{}
</code></pre>
<p>Alternatively you can use the equivalent <code>range</code> syntax to clear the dictionary <code>del a[:]</code>.</p>
</div>
<span class="comment-copy">You <i>cannot</i> delete objects in Python - all you can do is delete references, and the object will automatically go away after all references to it are gone.</span>
<span class="comment-copy">You are deleting the name. If there are no more names for an object, Python may or may not garbage collect it.</span>
<span class="comment-copy">@PeterWood I believe CPython <i>will immediately reclaim</i> an object who's refcount goes to 0. This, of course, is not guaranteed by the language, and indeed, does not work this way in, say, Jython.</span>
<span class="comment-copy">this isn't relevant to the question at hand, which is about why calling <code>del</code> on an object with a refcount of 2 doesn't actually del the object.</span>
<span class="comment-copy">I agree that reference counting is at the heart of it. This explanation is aiming for why this behavior exists, and not how Python is dealing with it. The difference is around modifications of subscriptions, as originally highlighted with  <code>ref["c"]=3</code>. The asker has found something similar to what is required, and by deleting part of a dictionary it may be close enough to expected behavior to be useful.</span>
<span class="comment-copy">The <code>gc</code> module doesn't affect the "normal" reference counting system <i>per se</i>, instead, it lets you control aspects of the cyclic garbage collector, which is what cleans up unreachable reference cycles.</span>
<span class="comment-copy">I didn't say it controlled the system, merely that it is an interface for introspecting it.</span>
<span class="comment-copy">Sure, but I think this should be more clear in your post. There are tons of questions that essentially boil down to people not understanding that <code>gc.enable</code> and <code>gc.disable</code> will actually affect</span>
<span class="comment-copy">Happy to make or accept an edit. What would you find more clear?</span>
