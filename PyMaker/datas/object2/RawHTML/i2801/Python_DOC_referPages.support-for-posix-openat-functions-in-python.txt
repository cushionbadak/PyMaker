<div class="post-text" itemprop="text">
<p>There is a <a href="https://bugs.python.org/issue4761" rel="nofollow noreferrer">patch</a> to add support for the POSIX <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html" rel="nofollow noreferrer"><code>openat</code></a> functions (and other <code>*at</code> functions like <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fstatat.html" rel="nofollow noreferrer"><code>fstatat</code></a>) to the python standard library that is marked as <code>closed</code> with resolution <code>fixed</code>, but the <code>os</code>, <code>posix</code> and <code>platform</code> modules do not currently include any of these methods.</p>
<p>These methods are the standard way of solving problems like <a href="https://stackoverflow.com/questions/51851986/ioerror-errno-2-no-such-file-or-directory-but-the-files-are-there">this</a> in <code>C</code> and other languages efficiently and without race conditions.</p>
<p>Are these included in the standard library currently somewhere? And if not, are there plans to include this in the future.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is supported by passing <a href="https://docs.python.org/3/library/os.html#dir-fd" rel="nofollow noreferrer">the <code>dir_fd</code> argument</a> to various functions in the standard <code>os</code> module.  See for example <a href="https://docs.python.org/3/library/os.html#os.open" rel="nofollow noreferrer"><code>os.open()</code></a>:</p>
<blockquote>
<p>Open the file path and set various flags [...]</p>
<p><strong>This function can support paths relative to directory descriptors with the dir_fd parameter.</strong></p>
</blockquote>
<p>If you want to use high-level file objects such as those returned by the <em>builtin</em> <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open()</code></a> function, that function's documentation provides example code showing how to do this using the <code>opener</code> parameter to that function.  Note that <code>open()</code> and <code>os.open()</code> are entirely different functions and should not be confused.  Alternatively, you could open the file with <code>os.open()</code> and then pass the file descriptor number to <a href="https://docs.python.org/3/library/os.html#os.fdopen" rel="nofollow noreferrer"><code>os.fdopen()</code></a> or to <code>open()</code>.</p>
<p>It should also be noted that this currently only works on Unix; the portable and future-proof way to check for <code>dir_fd</code> support is to write code such as the following:</p>
<pre><code>if os.open in os.supports_dir_fd:
    # Use dir_fd.
else:
    # Don't.
</code></pre>
<p>On the other hand, I'm not entirely sure Windows even allows opening a directory in the first place.  You certainly can't do it with <a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/open-wopen" rel="nofollow noreferrer"><code>_open()</code>/<code>_wopen()</code></a>, which are documented to fail if "the given path is a directory."  To be safe, I recommend only trying to open the directory after you check for <code>dir_fd</code> support.</p>
</div>
<span class="comment-copy">Neat. Thanks for the insight!</span>
<span class="comment-copy">I have paid it forward: <a href="https://stackoverflow.com/a/51852833/5458214">stackoverflow.com/a/51852833/5458214</a></span>
