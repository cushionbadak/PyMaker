<div class="post-text" itemprop="text">
<p>i have the following situation which i don't understand maybe you can point me to the answer or explain it to me.</p>
<p>I have the following python file structure structure:</p>
<p><code>
project/
 -folder_a/
   -File_a
 -folder_b/
   -File_b
</code></p>
<p>File_a is importing File_b. File_a is the main file but i can only run it from the project folder if i call it like this.</p>
<p><code>python &lt; folder_a/File_a</code></p>
<p>Otherwise i get an import error that the File_b can not be imported. I know that the "&lt;" symbol is a rediret of the stdin but what is it doing to the python interpreter and why is it only working this way.</p>
<p>Thanks a lot,
make-ing</p>
</div>
<div class="post-text" itemprop="text">
<p>Python can run code a few different ways: you can give it a script to run, or a module with <code>-m</code>, or a command with <code>-c</code>. But if you don't give it any of those, it reads standard input and executes one statement at a time until EOF.</p>
<p>You're used to seeing this with the interactive interpreter:</p>
<pre><code>$ python
Python 2.7.10 (default, Oct  6 2017, 22:29:07)
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print('hello')
hello
&gt;&gt;&gt; ^D
$
</code></pre>
<p>It read that <code>print('hello')</code> off standard input and executed it. Then it read the ctrl-D as an EOF and exited.</p>
<p>If standard input isn't an interactive console (effectively, <code>if not sys.stdin.isatty():</code>), it doesn't print the banner, show the <code>&gt;&gt;&gt;</code> prompts, enable <code>readline</code> command-line editing, etc. But it still reads and executes statements one by one until EOF.</p>
<p>When you do <code>python &lt; something.py</code>, your shell is piping the file <code>something.py</code> into Python's standard input. Since that file isn't an interactive console, Python doesn't do all the interactive stuff; it just reads and executes statements out of the script.</p>
<hr/>
<p>This is similar to running <code>python something.py</code>, but not identical. </p>
<p>The biggest difference is that Python has no idea what script you're giving it; it can only see the <em>contents</em> of the file, not the filename or anything else, and it can't even tell they're coming from a file rather than being, e.g., piped from another program.</p>
<p>If you look at how <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer"><code>sys.path</code></a> works:</p>
<blockquote>
<p>As initialized upon program startup, the first item of this list, <code>path[0]</code>, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), <code>path[0]</code> is the empty string, which directs Python to search modules in the current directory first.</p>
</blockquote>
<p>So, in effect, <code>python folder_a/File_a.py</code> puts <code>./folder_a</code> on <code>sys.path</code>, but <code>python &lt; folder_a/File_a.py</code> puts <code>.</code> on <code>sys.path</code>.</p>
<p>This is really not a good solution to your problem, but it doesn't explain why things are mostly working.</p>
<hr/>
<p>A better solution is to reorganize your code so that you have packages full of modules you want to import, and then any top-level scripts that you want to run outside of those packages. Like this:</p>
<pre><code>project/
 script.py
 -pkg_a/
   -__init__.py
   -module_a.py
 -pkg_b/
   -__init__.py
   -module_b.py
</code></pre>
<p>Those <code>__init__.py</code> files aren't actually necessary in Python 3, but they signal (both to the Python interpreter, and to your reader) that these are "ordinary packages" (as opposed to namespace packages, or directories that aren't packages at all).</p>
<p>Now, <code>script.py</code> can <code>import</code> and run the code from <code>module_a.py</code> the same as any other Python code. For example, instead of this:</p>
<pre><code># pkg_a/module_a.py
print('hello')
</code></pre>
<p>… do this:</p>
<pre><code># pkg_a/module_a.py
def run():
    print('hello')

# script.py
from pkg_a.module_a import run
run()
</code></pre>
<p>If you plan to use <code>setuptools</code> to make your code installable via <code>pip</code>, you can go even farther—specify <code>pkg_a.module_a.run</code> as an "entry point", and <code>pip</code> will create that <code>script.py</code> for you, make sure it executable, set up the shbang line for the user's particular Python, get it installed somewhere on the user's path, etc.</p>
<hr/>
<p>If something about your design makes it impossible or not appropriate to move the "script" code out of your module and into a separate script, you can always just run it as a module, the same way you do with the ones in the stdlib:</p>
<pre><code>$ python -m pip install spam
&lt;installs the spam package&gt;
$ echo '[{"dense":"json"}]' | python -m json.tool
[
    {
        "dense": "json"
    }
]
$ python -m pkg_a.module_a
&lt;runs the code in pkg_a/module_a.py as a module&gt;
</code></pre>
</div>
<span class="comment-copy">Is <code>project</code> a package with sub-packages or are <code>folder_a</code> and <code>folder_b</code> different packages? Do you have <code>__init__.py</code> files anywhere?</span>
<span class="comment-copy">What you're doing is telling Python to interpret its standard input as the main script, and then passing the contents of <code>folder_a/file_a</code> as that input.</span>
<span class="comment-copy">What you probably <i>want</i> to do is either (1) create a proper Python project with two packages and a top-level script that does something like <code>from folder_a.File_a import run; run()</code>, or (2) run the module as a module with <code>python -m folder_a.File_a</code> rather than tricking Python into thinking it's a script.</span>
<span class="comment-copy">Thank you very much. This explains a lot to me. I will see what i (we) can change to make it work the normal way.</span>
