<div class="post-text" itemprop="text">
<p>Tricky to word the title well.
I want to create a list of values that correspond to the variables of a list of objects. It can be inelegently done like this;</p>
<pre><code>class Example:
    def __init__(self, x):
        self.x = x
objlist = [ Example(i) for i in range(10) ]
DESIRED_OUTCOME = [ obj.x for obj in objlist ]
</code></pre>
<p>But this seems unpythonic and cumbersome, so I was wondering if there is a way of indexing all the the values out at one time. </p>
<p>Im wondering if there is a syntax that allows me to take all the variables out at once, like pulling a first axis array from a 2d array;</p>
<pre><code>ex = example2darray[:,1] #2d array syntax
OUTCOME = objlist[:, objlist.x] #Is there something like this that exists?
&gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>I hope this question makes sense </p>
</div>
<div class="post-text" itemprop="text">
<p>Nothing <em>unpythonic</em> about that, IMO, but if you really want to iterate over the <code>x</code> values of your instances 'directly' instead of obtaining them from the object itself, you can map them to <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow noreferrer"><code>operator.attrgetter</code></a>:</p>
<pre><code>import operator

objlist = [Example(i) for i in range(10)]

DESIRED_OUTCOME = map(operator.attrgetter("x"), objlist)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Beware that on Python 3.x <code>map()</code> returns an iterator so if you want the a <code>list</code> result make sure to turn it into one. Also, unless you construct <code>Example</code> in a special way, pretty much anything will be slower than the good old list comprehension loop which you consider 'inelegant'. </p>
</div>
<span class="comment-copy">What do you think is cumbersome and unpythonic? The second pass of the list?</span>
<span class="comment-copy">Looks pretty pythonic to me.</span>
<span class="comment-copy">Why don't you combine both as <code>DESIRED_OUTCOME = [ Example(i).x for i in range(10)]</code>? <code>objlist</code> is just redundant</span>
<span class="comment-copy">What is the relation between your <code>class</code> and <code>example2darray</code>? Your question is unclear at the moment. Provide a sample output plz</span>
<span class="comment-copy">@Bazingaa because i use it to run for scientific data analysis so i cant initialise them like in the simple example. I might have to cycle through a lot of processes that use values that they all share. If the function only uses one of their values then list comprehension is concise enough, but if i need to access many values at one time, it becomes bulky or i have to define a whole load of temporary lists first.</span>
<span class="comment-copy">Interesting, why would mapping <code>operator.attrgetter</code> be slower than a list comprehension with dot syntax?</span>
<span class="comment-copy">Ah ok, perhaps im being too fussy! thanks</span>
<span class="comment-copy">@sundance - because <code>operator.attrgetter</code> essentially creates a proxy function to obtain the attribute on the passed object so you have at least one more function call between the iteration and the <code>__getattr__()</code> call on the object itself, for each element in the list. You can get some edge, performance vise, If you use slots on your objects and, especially, keep an internal list of their values and map instance property values to its indices - but for general objects nothing (that I know of) will beat plain old list comprehension and value extraction.</span>
