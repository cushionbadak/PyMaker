<div class="post-text" itemprop="text">
<p>Is there an easy way to execute time delay (like <code>time.sleep(3)</code>) between every statement of Python code without having to explicitly write between every statement?</p>
<p>Like in the below Python Script which performs certain action on SAP GUI window. Sometimes, the script continues to the next statement before the previous statement is complete. So, I had to add a time delay between every statement so that it executes correctly. It is working with time delay, but I end up adding <code>time.sleep(3)</code> between every line. Just wondering if there is a better way? </p>
<pre><code>import win32com.client
import time

sapgui = win32com.client.GetObject("SAPGUI").GetScriptingEngine
session = sapgui.FindById("ses[0]")

def add_record(employee_num, start_date, comp_code):
    try:
        time.sleep(3)
        session.findById("wnd[0]/tbar[0]/okcd").text = "/npa40"
        time.sleep(3)
        session.findById("wnd[0]").sendVKey(0)
        time.sleep(3)
        session.findById("wnd[0]/usr/ctxtRP50G-PERNR").text = employee_num
        time.sleep(3)
        session.findById("wnd[0]").sendVKey(0)
        time.sleep(3)
        session.findById("wnd[0]/usr/ctxtRP50G-EINDA").text = start_date
        time.sleep(3)
        session.findById("wnd[0]/usr/tblSAPMP50ATC_MENU_EVENT/ctxtRP50G-WERKS[1,0]").text = comp_code
        time.sleep(3)
        session.findById("wnd[0]/usr/tblSAPMP50ATC_MENU_EVENT/ctxtRP50G-PERSG[2,0]").text = "1"
        time.sleep(3)
        session.findById("wnd[0]/usr/tblSAPMP50ATC_MENU_EVENT/ctxtRP50G-PERSK[3,0]").text = "U1"
        time.sleep(3)
        session.findById("wnd[0]/usr/tblSAPMP50ATC_MENU_EVENT").getAbsoluteRow(0).selected = True
        time.sleep(3)
        return "Pass"
    except:
        return "failed"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The right way to do what you asked for is almost certainly to use the debugger, <code>pdb</code>.</p>
<p>The right way to do what you <em>want</em> is probably something completely different: find some signal that tells you that the step is done, and wait for that signal. With problems like this, almost any time you pick will be way, way too long 99% of the time, but still too short 1% of the time. That signal may be <code>join</code>ing a thread, or <code>wait</code>ing on a (<code>threading</code> or <code>multiprocessing</code>) <code>Condition</code>, or <code>get</code>ting from a queue, or <code>await</code>ing a coroutine or future, or setting the <code>sync</code> flag on an AppleEvent, or… It really depends on what you're doing.</p>
<hr/>
<p>But if you really want to do this, you can use <a href="https://docs.python.org/3/library/sys.html#sys.settrace" rel="nofollow noreferrer"><code>settrace</code></a>:</p>
<pre><code>def sleeper(frame, event, arg):
    if event == 'line':
        time.sleep(2)
    return sleeper

sys.settrace(sleeper)
</code></pre>
<hr/>
<p>One small problem is that the notion of line used by the interpreter may well <em>not</em> be what you want. Briefly, a <code>'line'</code> trace event is triggered whenever the ceval loop jumps to a different <code>lnotab</code> entry (see <a href="https://github.com/python/cpython/blob/master/Objects/lnotab_notes.txt" rel="nofollow noreferrer"><code>lnotab_notes.txt</code></a> in the source to understand what that means—and you'll probably need at least a passing understanding of how bytecode is interpreted, at least from reading over the <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><code>dis</code></a> docs, to understand that). So, for example, a multiline expression is a single line; the line of a <code>with</code> statement may appear twice, etc.<sup>1</sup></p>
<hr/>
<p>And there's probably an even bigger problem.</p>
<blockquote>
<p>Sometimes, the script continues to next step before the previous step is fully complete.</p>
</blockquote>
<p>I don't know what those steps are, but if you put the whole thread to sleep for 2 seconds, there's a good chance the step you're waiting for won't make any progress, because the thread is asleep. (For example, you're not looping through any async or GUI event loops, because you're doing nothing at all.) If so, then after 2 seconds, it'll still be just as incomplete as it was before, and you'll have wasted 2 seconds for nothing.</p>
<hr/>
<p><sub>1. If your notion of "line" is closer to what's described in <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow noreferrer">the reference docs on lexing and parsing Python</a>, you could create an import hook that walks the AST and adds an expression statement with a <code>Call</code> to <code>time.sleep(2)</code> after each list element in each <code>body</code> with a module, definition, or compound statement (and then compiles and execs the result as usual).</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Anything you want to happen in a program has to be explicitly stated - this is the nature of programming. This is like asking if you can print <code>hello world</code> without calling <code>print("hello world")</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think the best advice to give you here is: don't think in terms of "lines", but think in term of functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>use debugging mode and watch each and every line executing line by line.</p>
</div>
<span class="comment-copy">What do you consider to be a "step"?</span>
<span class="comment-copy">corrected, every line of code</span>
<span class="comment-copy">You would be surprised how many steps that would actually be just for something that looks very simple on the surface like an assignment.</span>
<span class="comment-copy">Thank you for telling us the X of your X Y problem. There should be a better way to do that. Please show us some of your troubling code!</span>
<span class="comment-copy">Also, @chundu: Could you <a href="https://stackoverflow.com/posts/51865326/edit">edit</a> the information from your most recent comment into your question? Without it, the question is easily misunderstood, and most of the answers you've received so far aren't really addressing your real problem as a result.</span>
<span class="comment-copy">Based on the comments, it's clear that the questioner doesn't want an interactive debugging solution, they just want to wait at each step for the previous step to be complete.</span>
<span class="comment-copy">@DanielPryden But they have no idea <i>how</i> to wait at each step, and the way they want to solve that (which is not a good solution, of course) is to sleep after each one. And this shows how to do exactly that without an interactive debugging session, while also (hopefully) explaining why it isn't a great idea.</span>
<span class="comment-copy">This is true, but the reality in a language like Python is that <i>lots</i> of things happen without being explicitly stated. In fact, it's possible in CPython to use <code>sys.settrace()</code> to register a function which will get called for every line of code. You probably <i>shouldn't</i> do such a thing (let a debugger do that for you), but you <i>can</i>.</span>
<span class="comment-copy">Based on the comments, it's clear that the questioner doesn't want an interactive debugging solution, they just want to wait at each step for the previous step to be complete.</span>
<span class="comment-copy">There's a Python debugger called pdb just for doing that!</span>
<span class="comment-copy">Solutions dependent on the method of compiling used are considered inferior for a reason @SlahuddinChaudhary</span>
