<div class="post-text" itemprop="text">
<h2>Description of the problem:</h2>
<p>I have an array-like structure in a dataframe column as a string (I read the dataframe from a csv file).</p>
<p>One string element of this column looks like this:</p>
<pre><code>In  [1]: df.iloc[0]['points']    
Out [2]: '[(-0.0426, -0.7231, -0.4207), (0.2116, -0.1733, -0.1013), (...)]'
</code></pre>
<p>so it's really an array-like structure, which looks 'ready for numpy' to me. </p>
<p><code>numpy.fromstring()</code> doesn't help as it doesn't like brackets:<br/>
<a href="https://stackoverflow.com/questions/38886641/convert-string-representation-of-array-to-numpy-array-in-python">convert string representation of array to numpy array in python</a></p>
<p>A simple <code>numpy.array()</code> on the string itself, if I copy and paste it in the <code>array()</code> function is returning me a numpy array.<br/>
But if I fill the <code>array()</code> function with the variable containing the string like that: <code>np.array(df.iloc[0]['points'])</code> it does not work, giving me a <code>ValueError: could not convert string to float</code> </p>
<p><a href="https://stackoverflow.com/questions/28207743/convert-string-to-numpy-array">Convert string to numpy array</a></p>
<h2>The question:</h2>
<p>Is there any function to do that in a simple way (without replacing or regex-ing the brackets)?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ast.literal_eval</code> before passing to <code>numpy.array</code>:</p>
<pre><code>from ast import literal_eval
import numpy as np

x = '[(-0.0426, -0.7231, -0.4207), (0.2116, -0.1733, -0.1013)]'

res = np.array(literal_eval(x))

print(res)

array([[-0.0426, -0.7231, -0.4207],
       [ 0.2116, -0.1733, -0.1013]])
</code></pre>
<p>You can do the equivalent with strings in a Pandas series, but it's not clear if you need to aggregate across rows. If this is the case, you can combine a list of NumPy arrays derived using the above logic.</p>
<p>The docs explain types acceptable to <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>literal_eval</code></a>:</p>
<blockquote>
<p>Safely evaluate an expression node or a string containing a Python
  literal or container display. The string or node provided may only
  consist of the following Python literal structures: strings, bytes,
  numbers, tuples, lists, dicts, sets, booleans, and <code>None</code>.</p>
</blockquote>
<p>So we are effectively converting a string to a list of tuples, which <code>np.array</code> can then convert to a NumPy array.</p>
</div>
<span class="comment-copy">The first question is: where did this data come from? Is it something you’re generating? Or something generated by some program or library? If you can fix things so that the data get created in a form that’s actually meant to be parsed, or at least find an explanation of exactly what the format is and how you’re supposed to use it, that will be a lot better than reverse engineering by guessing so you can write a hacky parser.</span>
<span class="comment-copy">Anyway, this looks like someone wrote the repr of a list of tuples to a file. That’s a really bad idea, but if you can’t change that, you may be able to reverse it by calling <code>ast.literal_eval</code> on each string. That will work with the example you posted, but no guarantee that it will work with all of your data, or that you won’t get float rounding problems that wouldn’t be there with properly serialized data. It’s a hack, not a solution.</span>
<span class="comment-copy">The string (print) representation of a <code>structured</code> array is a list of tuples.  The <code>repr</code> string will include <code>dtype</code> information.  But since this is a cell in a DataFrame, there may be other possibilites.  Did you load this <code>df</code> from a <code>csv</code> file?  Are there quote strings like this in that file?</span>
<span class="comment-copy">Wonderful! I didn't know this module!</span>
<span class="comment-copy"><code>literal_eval</code> is parsing the string that looks like a list of tuples.  It handles basic Python structures.  <code>JSON</code> does something similar, but for a more restricted syntax.</span>
