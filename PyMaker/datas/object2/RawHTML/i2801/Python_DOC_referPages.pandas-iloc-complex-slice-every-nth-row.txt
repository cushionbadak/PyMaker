<div class="post-text" itemprop="text">
<p>I have a dataframe with a periodicity in the rows of 14 i.e. there are 14 lines of data per record (means, sdev etc.) and I want to extract the 2nd, 4th, 7th and 9th line, repeatedly for every record (14 lines). My code is:</p>
<p><code>Mean_df = df.iloc[[1,3,6,8]::14,:].copy()</code></p>
<p>which does not work </p>
<p><code>TypeError: cannot do slice indexing on &lt;class 'pandas.core.indexes.range.RangeIndex'&gt; with these indexers [[1, 3, 6, 8]] of &lt;class 'list'&gt;</code></p>
<p>I got help with the code from here, which has been useful, but not on the multi-row selections -- 
<a href="https://stackoverflow.com/questions/25055712/pandas-every-nth-row">Pandas every nth row</a></p>
<p>I can extract as several different slices and combine, but it feels like there may be a more elegant solution.</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using:</p>
<pre><code>df[np.isin(np.arange(len(df))%14,np.array([1,3,6,8]))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a tuple comprehension with <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> and <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.r_.html" rel="nofollow noreferrer"><code>np.r_</code></a>:</p>
<pre><code>arr = np.arange(14*3)
slices = tuple(slice(i, len(arr), 14) for i in (1, 3, 6, 8))

res = np.r_[slices]

print(res)

array([ 1, 15, 29,  3, 17, 31,  6, 20, 34,  8, 22, 36])
</code></pre>
<p>In this example, indexing dataframe rows with <code>1::14</code> is equivalent to indexing with <code>slice(1, df.shape[0], 14)</code>.</p>
<p>This is fairly generic, you can define any tuple of slice objects and pass to <code>np.r_</code>.</p>
</div>
<span class="comment-copy">Cheers, that does it nicely, and will absolutely be using that again in future.</span>
<span class="comment-copy">Thanks! This is neat for providing the indexes - used as <code>df.iloc[res,:]</code> works very nicely and the list comp is very pythonic. I dont know if it's as readable/elegant as Wen's answer though.</span>
<span class="comment-copy">@DrBAC, For what it's worth, I think Wen's solution is better for your specific example. While my solution is more generic.</span>
