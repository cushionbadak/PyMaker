<div class="post-text" itemprop="text">
<p>I'm going crazy here. The internet and <a href="https://stackoverflow.com/questions/37048761/coding-utf-8-on-python3">this SO question</a> tell me that in python 3.x, the default encoding is UTF-8. In addition to that, my system's default encoding is UTF-8. In addition to that, I have <code># -*- coding: utf-8 -*-</code> at the top of my python 3.5 file.</p>
<p>Still, python is using ascii:</p>
<pre><code># -*- coding: utf-8 -*-
mystring = "Ⓐ"
print(mystring)
</code></pre>
<p>Greets me with:</p>
<pre><code>SyntaxError: 'ascii' codec can't decode byte 0xe2 in position 7: ordinal not in range(128)
</code></pre>
<p>I've also tried this: <code>print(mystring.encode("utf-8"))</code> and <code>.decode("utf-8")</code> - Same thing.</p>
<p>What am I missing here? How do I force python to stop using ascii encoding?</p>
<hr/>
<p>Edit: I know that it seems weird to complain about <code>position 7</code> with a one character string, but this is my actual MCVE and the exact output I'm getting. The above is using python shell, the below is in a script. Both use <code>python 3.5.2</code>.</p>
<hr/>
<p>Edit: Since I figured it might be relevant: The string I'm getting comes from an external application and is not hardcoded, so I need a way to get that utf-8 string and save it into a file. The above is just a minimalized and generalized example. Here is my real-life code:</p>
<pre><code># the variables being a string that might contain unicode characters
mystring = "username: " + fromuser + " | printname: " + fromname
with open("myfile.txt", "a") as myfile:
  myfile.write(mystring + "\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python3 all strings are unicode, so the problem you're having is likely due to your locale settings not being correct.  The Python3 interpreter looks to use the locale environment variables and if it cannot find them it emulates basic ASCII</p>
<p>From locale.py:</p>
<pre><code>except ImportError:

    # Locale emulation

    CHAR_MAX = 127
    LC_ALL = 6
    LC_COLLATE = 3
    LC_CTYPE = 0
    LC_MESSAGES = 5
    LC_MONETARY = 4
    LC_NUMERIC = 1
    LC_TIME = 2
    Error = ValueError
</code></pre>
<p><a href="https://www.cyberciti.biz/faq/how-to-set-locales-i18n-on-a-linux-unix/" rel="nofollow noreferrer">Double check the locale on your shell from which you are executing</a>.  Here are a few work arounds you can try to see if they get you working before you go through the task of getting your env setup correctly.</p>
<p>1) Validate UTF-8 locale or language files are installed (see link above)</p>
<p>2) Try adding this to the top of your script</p>
<pre><code>#!/usr/bin/env LC_ALL=en_US.UTF-8 /usr/local/bin/python3
print('カタカナ')
</code></pre>
<p>or </p>
<pre><code>#!/usr/bin/env LANG=en_US.UTF-8 /usr/local/bin/python3
print('カタカナ')
</code></pre>
<p>Or export shell variables before executing the Python interpreter</p>
<pre><code>export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
python3
&gt;&gt;&gt; print('カタカナ')
</code></pre>
<p>Sorry I cannot be more specific, as these settings are platform and OS specific.  You can forcefully attempt to <a href="https://docs.python.org/3/library/locale.html" rel="nofollow noreferrer">set the locale in Python directly using the locale module</a>, but I don't recommend that, and it won't help if they are not installed.</p>
<p>Hope that helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>What's new in Python 3.0 says:</p>
<blockquote>
<p>All text is Unicode; however encoded Unicode is represented as binary
  data</p>
</blockquote>
<p>If you want to try outputting utf-8, here's an example:</p>
<pre><code>b'\x41'.decode("utf-8", "strict")
</code></pre>
<p>If you'd like to use unicode in a string literal, use the unicode escape and its coded representation. For your example:</p>
<pre><code>print("\u24B6")
</code></pre>
</div>
<span class="comment-copy">Are you <i>sure</i> you're running your script with python3?</span>
<span class="comment-copy">Your error message doesn't make sense.  If on Python 3 <code>mystring</code> is a len 1 Unicode string.  There is no way to for <code>.decode</code> to be called (Unicode strings are encoded, not decoded) and <code>position 7</code> is impossible for a length 1 string.  Provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">If you want to write a file using UTF-8 encoding, use <code>with open('myfile.txt','a',encoding='utf8') as myfile:</code>.</span>
<span class="comment-copy">How are you calling your Python script? Is there a shell pipeline into or out of Python?</span>
<span class="comment-copy">@MarkTolonen I thought the same, but this is my MCVE and I did exactly what I provided. It says "position 7" on a one character string, yes. As for writing to a file with utf8, shouldn't it be the default? Everything on my system uses utf8 and so should python.</span>
<span class="comment-copy">First <code>print</code> command gives <code>UnicodeEncodeError: 'ascii' codec can't encode character '\xe2' in position 0: ordinal not in range(128)</code> - In a python 3.5.2 shell. Second command works, the last 3 don't.</span>
<span class="comment-copy">I think I found the issue thanks to you, my <code>locale</code> output reports nothing but <code>POSIX</code> - I'm going to add the proper locales and try again. If that was the cause I'll accept your answer.</span>
<span class="comment-copy">Got it. The issue was indeed my <code>locale</code> settings. I've had UTF-8 selected as default system-wide locale, however it wasn't installed at all. I'll accept your answer, do you mind adding in some more information about changing the locale or something that will be of help for others with the same problem in the future?</span>
<span class="comment-copy">Glad you got it :) I'll update the answer accordingly</span>
<span class="comment-copy">That gives me <code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte</code>, and is also not quite what I need. I have a string that contains unicode characters, and I simply want to print them (and write them to a file later).</span>
<span class="comment-copy">My apologies. See the edit with the example, try using the unicode escape sequence and its numerical code.</span>
<span class="comment-copy">That works now as example, but I need a better solution than that. I'm getting the string containing those unicode characters from an external application, they are not hardcoded. My ultimate goal is to save that string into a file, with utf-8 encoding.</span>
<span class="comment-copy">Can you specify an encoding from your source? For example, using io: &gt;&gt;&gt;import io &gt;&gt;&gt;f = io.open("test", mode="r", encoding="utf-8")</span>
<span class="comment-copy">It works now, the issue was that my system had utf-8 as locale set but it wasn't installed properly. Re-generating my locales fixed the issues.</span>
