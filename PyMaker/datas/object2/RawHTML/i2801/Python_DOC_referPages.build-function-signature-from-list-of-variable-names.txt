<div class="post-text" itemprop="text">
<p>I have a list of variable names: </p>
<pre><code>var_names = ['x','y']
</code></pre>
<p>and a function that takes vector input, e.g.</p>
<pre><code>def f(vec):
   return vec[0]+vec[1]
</code></pre>
<p>I want to build a function that creates a multi-input function that does the same thing as f, e.g.</p>
<pre><code>def g(x,y):
   return f([x,y])
</code></pre>
<p>Does anybody know how to create a function like g in an automated way? I tried this </p>
<pre><code>def _create_multiInput_fcn(vector_fcn,var_list):
    def g(*var_list):
        out = vector_fcn(var_list)
        return out
    return g

g = _create_multiInput_fcn(f,var_list)
</code></pre>
<p>but that just gave me something with a signature like this:</p>
<pre><code>&lt;function __main__._create_multiInput_fcn.&lt;locals&gt;.f(*var_list)&gt;
</code></pre>
<p>when I really want this:</p>
<pre><code>&lt;function __main__._create_multiInput_fcn.&lt;locals&gt;.f(x,y)&gt;
</code></pre>
<p>I appreciate any help/advice that someone can give me. Thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in function <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a> to define a function dynamically:</p>
<pre><code>def _create_multiInput_fcn(vector_fcn,var_list):
    exec('''
def g({0}):
    return vector_fcn([{0}])
'''.format(','.join(var_list)), globals(), locals())
    return g
g = _create_multiInput_fcn(f,var_list)
</code></pre>
</div>
<span class="comment-copy">Hey, how did you get those 'signatures'? I am trying something that might work but I am not sure how to check it</span>
<span class="comment-copy">in ipython, i type the function name at the command line, e.g. #:] f</span>
<span class="comment-copy">you will need <code>exec</code>, function definition statements are not expressions, and <code>eval</code> requires expressions.</span>
<span class="comment-copy">Thanks for the correction. I did mean <code>exec</code> (I even linked to <code>exec</code>'s documentation) but somehow mistakenly wrote <code>eval</code> in the code.</span>
<span class="comment-copy">Thank you for the help. When I run the code you posted it tells me that g does not exist. Here's what I'm doing     <code>var_list = ['x','y']  def f(vec):    return vec[0]+vec[1]  def _create_multiInput_fcn(vector_fcn,var_list):     exec(''' def g({0}):     return vector_fcn([{0}]) '''.format(','.join(var_list)), {'vector_fcn': vector_fcn})     return g  g = _create_multiInput_fcn(f,var_list)  g(2,3)</code></span>
<span class="comment-copy">@lab_rat Oops I forgot that you have to pass <code>globals()</code> instead to <code>exec</code> in order for new variables/functions to reflect in the caller's namespace. I've updated my answer accordingly.</span>
<span class="comment-copy">It's still telling me g does not exist. Here's the way I'm running your code: <code>var_list = ['x','y']  def f(vec):    return vec[0]+vec[1]  def _create_multiInput_fcn(vector_fcn,var_list):     exec(''' def g({0}):     return vector_fcn([{0}]) '''.format(','.join(var_list)), globals(), locals())     return g  g = _create_multiInput_fcn(f,var_list)  print(f([2,3])) print(g(2,3))</code></span>
