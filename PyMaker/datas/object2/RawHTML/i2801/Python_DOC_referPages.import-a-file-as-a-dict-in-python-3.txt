<div class="post-text" itemprop="text">
<p>I have a file I was playing around with to see if I can import it and convert it to a Python dictionary. </p>
<p>It is the default <code>pyenv.cfg</code> file in <code>venv</code>. It reads:</p>
<pre><code>home = C:\Users\nope\AppData\Local\Continuum\anaconda3
include-system-site-packages = false
version = 3.6.4
</code></pre>
<p>I tried using:</p>
<pre><code>with open(file, mode='r', encoding='utf-8') as f:
    new_f = f.read().replace('=', ':')
    d = dict(new_f)
</code></pre>
<p>This tells me I don't have enough arguments for dict(). It expects 2. I'm familiar with using <code>dict(zip(list_1, list_2))</code> to create a dictionary. I'm not familiar with opening a file and creating one.</p>
<p>I'm looking for a very simply way to do this. I did some research with <code>re</code> and it isn't turning out. Withing the <code>with</code> block, I ran <code>a = f.read().replace(' = ', '\',\'')</code> which returns:</p>
<pre><code>home','C:\Users\nope\AppData\Local\Continuum\anaconda3
include-system-site-packages','false
version','3.6.4
</code></pre>
<p>Now I need to add a <code>'</code> at the beginning and end of each line. Then I think I can use <code>f.readlines()</code> to create a list I can slice into keys and values. I know how to do this with <code>vim</code> or <code>sed</code> in Linux, but I'm trying to stay within Python. </p>
<p>Please help. Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>I can suggest you an alternative one-line style solution using dict comprehension:  </p>
<pre><code>with open('pyenv.cfg') as f:
    d = {k:v for line in f for k,v in [line.strip().split(' = ')]}

print(d)
# {'home': 'C:\\Users\\nope\\AppData\\Local\\Continuum\\anaconda3',
#  'include-system-site-packages': 'false',
#  'version': '3.6.4'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest taking a look at the builtin <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">configparser</a> library which will return a dictionary like object.</p>
<p>Alternatively you can simply split the lines on <code>=</code></p>
<pre><code>my_dict = {}
for line in open(file_path).readlines():
    key, val = line.strip().split('=')  # Remove \n and split on =
    my_dict[key.strip()] = val.strip()  # Remove trailing leading spaces use
    # Note that vals will all be strings you may need to convert type for some
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just treat it as normal data, don't try to convert it to python or you will end-up going down the horrible <code>eval</code> road.  </p>
<pre><code>d = {}
file = 'pyenv.cfg'

with open(file) as f:
    for line in f:
        k, v = line.rstrip().split(' = ')
        d[k] = v

import pprint
pprint.pprint(d)
</code></pre>
<p>Gives:</p>
<pre><code>{'home': 'C:\\Users\\nope\\AppData\\Local\\Continuum\\anaconda3',
 'include-system-site-packages': 'false',
 'version': '3.6.4'}
</code></pre>
</div>
<span class="comment-copy">you are throwing <i>text</i> at the dict generator <code>dict</code>. It does not work like that.. <code>print</code> the <code>new_f</code> that you are passing and you will see. Being a file or not is not significant here.</span>
<span class="comment-copy">It turns out <code>new_f</code> is a string and that doesn't work unless I pass another argument. Further down, I was able to get a list from <code>readlines()</code>  but need to add a <code>'</code> at the beginning and end of each line. Have any ideas for that or do you have a better idea for what I'm trying to do overall?</span>
<span class="comment-copy">it is a string that looks like a dict. You have to split it into key,value pairs and feed those to the dict constructor.</span>
<span class="comment-copy">Oh that's right <code>split()</code> does the job.</span>
<span class="comment-copy">In your case, you need a add a dummy section header to satisfy the configparser requirement.</span>
<span class="comment-copy">I would suggest not using the keyword <code>file</code> as a variable. There also might be problems if the number of spaces round <code>=</code> is not exactly 1 each side.</span>
<span class="comment-copy">@SteveBarnes:  <code>file</code> is not a keyword (see <code>keyword.kwlist</code>).  It used to be an alias for <code>open</code> in the old python 2, but we have gone past that a long time ago.  I tend to avoid it myself, but the OP used it.</span>
