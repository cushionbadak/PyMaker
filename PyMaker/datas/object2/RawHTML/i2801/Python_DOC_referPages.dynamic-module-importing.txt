<div class="post-text" itemprop="text">
<p>I have several custom python modules that perform specific functions (data parsing, computations, etc...). I then have json configurations that describe a module (i.e. module name, arguments, functions, etc...). Finally, I am creating a driver script that I want to drive these modules. The configurations more or less are passed to the driver which commands the module to run certain functions based on this config. What I want to do is based on these configurations I would like to dynamically import these modules and run through the list of tests that is provided based on the configs. The number of configs can be anywhere from 1 to N. The list of tests would be either hardcoded because the modules are created based on a template or provided via the config. </p>
<p>i.e.
JsonFile:</p>
<pre><code>{ &lt;module_name&gt;: {
    kw:&lt;module&gt;,
    kw:&lt;arg1&gt;,
    kw:&lt;argN&gt;
    }
 }
</code></pre>
<p>Code: </p>
<pre><code>&lt;parse json code&gt;
for key,val in jsonCfg.items():
    lst.append(key)
    for dctKey, itm in val.items():
        if 'IMPORT' in dctkey:
            importlib.import_module(itm)
</code></pre>
<p>That is the basics of what I have so far... I am getting stuck now on how to command python to call that modules code.  I was hoping to have something like a standard import...</p>
<pre><code>import &lt;module&gt; as &lt;module_name&gt;
</code></pre>
<p>Where module would be the itm and module_name would be the key. This way I can iterate through my keys for as many as I have and call the standard functions of those modules.</p>
<p>i.e. It should function like this... </p>
<pre><code>import moduleX as MX
MX.execute
import moduleY as MY
MY.execute
</code></pre>
<p>But be coded like...(pseudo-code)  </p>
<pre><code>&lt;parse json code&gt;
for key,val in jsonCfg.items():
    lst.append(key)
    for dctKey, itm in val.items():
        if 'IMPORT' in dctkey:
            importlib.import_module(itm) as key
for mod in lst.items()
   mod.execute()
</code></pre>
<p>I hope this makes sense and if not just comment so I can make clarify as needed.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>importlib.import_module</code> returns a reference the imported module object, you just have to create a new variable and store it to be able to access the members:</p>
<pre><code>x = importlib.import_module(module_name)
x.some_func()
</code></pre>
<p>If you have multiple names you can store the imported modules in some structure, a list or dict, whatever makes sense for you:</p>
<pre><code>dynamods = {}
for key, val in jsonCfg.items():
    for dctKey, itm in val.items():
        if 'IMPORT' in dctkey:
            dynamods[key] = importlib.import_module(itm) 
</code></pre>
<p>Then you can use it to call a function:</p>
<pre><code>for mod in dynamods
    dynamods[mod].execute()
</code></pre>
</div>
<span class="comment-copy">Isn't each script executed on importing it if it hasn't got anything like <code>if __name__ == '__main__'</code> anyway?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>import_module()</code></a> returns a module object, so what's the problem with <code>mod = importlib.import_module(itm)</code> and then later call whatever function of the module you like using <code>mod.func(...)</code>?</span>
<span class="comment-copy">Thanks you. This worked</span>
