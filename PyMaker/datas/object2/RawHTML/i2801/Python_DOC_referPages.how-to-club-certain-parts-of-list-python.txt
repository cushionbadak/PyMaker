<div class="post-text" itemprop="text">
<p>I have a sample list of strings:</p>
<pre><code>my_list = ['hello','this','is','a','sample','list', 'thanks', 'for', 'help']
</code></pre>
<p>And I want to club every three elements together, like:</p>
<pre><code>new_list = ['hello this is', 'a sample list', 'thanks for help']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just split into chunks and join:</p>
<pre><code>[' '.join(my_list[i:i+3]) for i in range(0, len(my_list), 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this by iterating using a step, in this case 3 steps, and adding the individual strings under each step, i.e., <code>my_list[i]</code>, <code>my_list[i+1]</code>. <code>my_list[i+2 ]</code>. Note that you need to add a space after each first and second string. This piece of code does that:</p>
<pre><code>new_list = []
for i in range(0, len(my_list), 3):
    if i + 2 &lt; len(my_list):
        new_list.append(my_list[i] + ' ' + my_list[i+1] + ' ' + my_list[i+2])
print(new_list)
</code></pre>
<p>The output is as expected: </p>
<pre><code>['hello this is', 'a sample list', 'thanks for help']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A couple of solutions using <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> are possible.</p>
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a>:</p>
<pre><code>[' '.join(x[1] for x in g) for _, g in groupby(enumerate(my_list), lambda x: x[0] // 3)]
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>tee</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">zip_longest</a>:</p>
<pre><code>a, b = tee(my_list)
next(b)
b, c = tee(b)
next(c)
[' '.join(items) for items in zip_longest(a, b, c, fillvalue='')]
</code></pre>
<p>Using just <code>zip_longest</code>:</p>
<pre><code>[' '.join(g) for g in zip_longest(*[iter(my_list)] * 3, fillvalue='')]
</code></pre>
<p>The last two are adapted from the <code>pairwise</code> and <code>grouper</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">recipes</a> in the documentation. Only the first option won't add extra spaces at the end of your last group if the aren't a multiple of 3 words.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Option 1: This solution drop elements if <code>my_list</code> length is not divisible by 3</h2>
<p>input string: <code>['hello','this','is','a','sample','list', 'thanks', 'for', 'help', 'foo']</code></p>
<pre><code>[" ".join(i) for i in zip(*[iter(my_list)]*3)]
</code></pre>
<p>result: <code>['hello this is', 'a sample list', 'thanks for help']</code></p>
<p>how python iter trick works: <a href="https://stackoverflow.com/questions/2233204/how-does-zipitersn-work-in-python">How does zip(*[iter(s)]*n) work in Python?</a></p>
<h2>Option 2: keep extra element with <code>zip_longest</code></h2>
<p>input string: <code>['hello','this','is','a','sample','list', 'thanks', 'for', 'help', 'foo']</code></p>
<pre><code>[" ".join(i) for i in zip_longest(*[iter(my_list)]*3, fillvalue='')]
</code></pre>
<p>result: <code>['hello this is', 'a sample list', 'thanks for help', 'foo  ']</code></p>
</div>
<span class="comment-copy">Note, this approach will leave off anything at the end if the length of the list isn't divisible by 3. This may or may not be a problem, but it is probably worth noting</span>
