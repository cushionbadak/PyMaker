<div class="post-text" itemprop="text">
<p>I have a text file as mentioned below:</p>
<pre><code>KEY,NAME,RANK,BOOKNAME,SCORE,AUTHER
123,ABCD,500,FREEDOM1,15200,PXYZ
133,EFGH,400,FREEDOM2,15300.5,XTYZ
nan,SYGH,700,FREEDOM3,15400,RYYZ
143,LKMN,800,FREEDOM4,15500.5,XYCZ
</code></pre>
<p>I want read this text file and create a nested dictionary which will be used in my subsequent program.</p>
<pre><code>dict = {
123:{'NAME':'ABCD','RANK':500,'BOOKNAME':'FREEDOM1', 'SCORE':15200, 'AUTHER':'PXYZ'},
133:{'NAME':'EFGH','RANK':400,'BOOKNAME':'FREEDOM2', 'SCORE':15300.5, 'AUTHER':'XTYZ'},
143:{'NAME':'LKMN','RANK':800,'BOOKNAME':'FREEDOM4', 'SCORE':15500.5, 'AUTHER':'XYCZ'}
}
</code></pre>
<p>Note: Code should remove the rows with 'nan' KEY values</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>csv.DictReader</code> to create a list of OrderedDicts from your data file. Then you can rearrange and transform your data to make the nested dictionary to meet your requirements. Here is an example using dictionary comprehension. </p>
<pre><code>import csv

with open('text.csv') as f:
    reader = csv.DictReader(f)
    result = {
        int(d['KEY']):{k: int(v) if v.isdigit() else v for k, v in d.items() if k != 'KEY'}
        for d in reader if d['KEY'].isdigit()}
    print(result)
</code></pre>
<p>EDIT: If all you need is the <code>string</code> values as posted in Tanmay's solution then this does the same with a lot less code. </p>
<pre><code>import csv
from pprint import pprint

with open('text.csv') as f:
    results = {d.pop('KEY'): dict(d) for d in csv.DictReader(f)}
pprint(results)
</code></pre>
<p>EDIT 2: casting values</p>
<pre><code>import csv
from pprint import pprint
import re


def cast_dict(d: dict):
    def cast_value(value: str):
        if value.isdigit():
            return int(value)
        elif re.match(r'^\d+\.\d+$', value):
            return float(value)
        return value
    return {k: cast_value(v) for k, v in d.items()}


with open('text.csv') as f:
    results = {int(d.pop('KEY')): cast_dict(d) for d in csv.DictReader(f) if d.get['KEY'].isdigit()}
</code></pre>
<p>pprint(results)
    pprint(results)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://kite.com/python/docs/csv" rel="nofollow noreferrer"><code>csv</code></a> module like this. If you need to check if KEY value is number, create corresponding function:</p>
<pre><code>import csv

def is_float(s):
    try:
        float(s)
    except ValueError:
        return  False
    return True


with open('input.csv') as f:
    reader = csv.DictReader(f)
    rows = list(dict(a) for a in iter(reader) if is_float(a['KEY']))

print(rows)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>things that you will need to do to achieve your goal are</p>
<p>first you need to how to open file(assuming its .txt file containing comma separated values)</p>
<pre><code>filename = "csv_data.txt"
file = open(filename, "r") #opening in read mode
line_list = []
for line in file:
   print(line) #line_list.append(line.strip().split(','))
</code></pre>
<p>then you would want to split string(<em>line</em>) using ',' as delimiters for that you would have to do <code>line.split(',')</code> this will give you list.</p>
<pre><code>line_list[0] 
</code></pre>
<p>here you will find list of all the strings in line 1 of your text file.</p>
<p>okay I have decided to add code but please <strong>don't copy paste</strong> try to understand it google or go to python docs look what each inbuilt function do.</p>
<pre><code>from collections import defaultdict

filename = "csv_data.txt"
file = open(filename, "r") #opening in read mode
line_list = []
output_dict = defaultdict(dict) #read about defualtdict vs dict

for line in file:
    #print(line,end='')
    line_list.append(line.strip().split(','))


key_names = line_list[0] #remember firstline in our file contains name of keys

#read about slicing
for line in line_list[1:]:
    #print(line)
    this_key = line[0]
    if this_key == 'nan':
        continue #we don't want to add this to our dict

    else:
        this_key = int(this_key)
        output_dict[this_key]= defaultdict(dict)

        # read about enumerate
        for i,word in enumerate(line[1:], start = 1):

            this_key_dict =  output_dict[this_key]   
            if key_names[i] == 'SCORE' or key_names[i] == 'RANK':
                try:
                   word = int(word)

                except ValueError:
                   word = float(word)  

            this_key_dict[key_names[i]] = word




def nice_print(dict_d):

    for i,v in dict_d.items():
        print(i,v)


nice_print(output_dict)


&gt;&gt;&gt; word = '7.8'
&gt;&gt;&gt; float(word) if '.' in  word else int(word)
7.8
&gt;&gt;&gt; word = '7'
&gt;&gt;&gt; float(word) if '.' in  word else int(word)
7
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">usually stackoverflow works best if you have made an effort to solve this yourself first, and share that effort with us</span>
<span class="comment-copy">please add the code that you have written so far</span>
<span class="comment-copy">Sir, I am very new to Python. I am unable to split the column name. kindly help.</span>
<span class="comment-copy">Looks like a <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>csv.DictReader</code></a> will be useful.</span>
<span class="comment-copy">What do you mean by "split the column name"? Please tell us the step where you are stuck: reading the file, reading the first row, splitting that row into column names (is this what you mean?), reading the other rows, splitting those rows into values, creating the nested dictionary, or something else? If your problem is splitting the first row, show us your code before that point and as much as possible after that point.</span>
<span class="comment-copy">Thanks Sir, This is working.</span>
<span class="comment-copy">I don't have enough rep points to comment on Tanmay's solution, so I'll comment here... While it uses some simpler logic it is what most would be considered as "unpythonic". Also it doesn't meet your design conditions because it doesn't convert string digits to ints. If all you need is string then the "pythonic" solution is even easier. See the edit in the above answer.</span>
<span class="comment-copy">Sir, Your solution best suite my condition. But I am now facing problem with few rows where I have floats which is also marked as string. I want Int() as integer and float() as float.  Can you help me on this.</span>
<span class="comment-copy">You need to supply some sample data...</span>
<span class="comment-copy">Sample Data where I have few Score as float: KEY,NAME,RANK,BOOKNAME,SCORE,AUTHER 123,ABCD,500,FREEDOM1,15200,PXYZ 133,EFGH,400,FREEDOM2,15300.5,XTYZ nan,SYGH,700,FREEDOM3,15400,RYYZ 143,LKMN,800,FREEDOM4,15500.5,XYCZ</span>
<span class="comment-copy">Thanks Sir. Understood the Logic.</span>
<span class="comment-copy">@Pravat if you were having problem with float then now it should work btw you should have mentioned that key can be float</span>
<span class="comment-copy">No Sir, KEY and RANK are int. But SCORE can be float.</span>
<span class="comment-copy">ohh sorry didn't pay attention</span>
