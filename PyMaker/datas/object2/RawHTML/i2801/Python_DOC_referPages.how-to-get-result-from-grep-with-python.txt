<div class="post-text" itemprop="text">
<p>I am trying to get output from grep with wildcard</p>
<pre><code>proc = subprocess.Popen(['grep', '002HQV', 'test.*'], stdout=subprocess.PIPE,  
shell=True)
res = proc.stdout.readlines()
print(res)
</code></pre>
<p>but get the following error</p>
<pre><code>2.4.3 (#1, Jun 11 2009, 14:09:37)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)]
Usage: grep [OPTION]... PATTERN [FILE]...  
Try `grep --help' for more information.
[]
</code></pre>
<p>Is it wrong with my grep syntax?</p>
<p>The following works</p>
<pre><code>proc = subprocess.Popen(['ls', '*'], stdout = subprocess.PIPE, shell=True)
</code></pre>
<p>and</p>
<pre><code>os.system("grep 02HQV test.*")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When using <code>shell=True</code> your should use a string, see <a href="https://stackoverflow.com/questions/15109665/subprocess-call-using-string-vs-using-list">subprocess.call using string vs using list</a></p>
<p>You can avoid using a shell and still use a list by using the <code>glob</code> standard library module:</p>
<pre><code>import subprocess
import glob

command = ['grep', '002HQV']
command.extend(glob.glob('test.*'))
proc = subprocess.Popen(command, stdout=subprocess.PIPE)
res = proc.stdout.readlines()
print(res)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In general I'd try to avoid launching subprocesses for things that are simple string manipulation and straightforward file I/O.  That's especially true when you start getting into actively dangerous things like <code>subprocess.call(shell=True)</code>.  You can use the <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob module</a> to do the filename expansion and then loop through the files.</p>
<p>Here's one example:</p>
<pre><code>import glob
res = []
for fn in glob.glob('test.*'):
    with open(fn, 'r') as f:
        for line in f:
          if '002HQV' in line:
              res.append(line)
print(res)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/9393425/python-how-to-execute-shell-commands-with-pipe">Python - how to execute shell commands with pipe?</a></span>
<span class="comment-copy">but how to explain <code>proc = subprocess.Popen(['ls', '*'], stdout = subprocess.PIPE, shell=True)</code>  works?</span>
<span class="comment-copy">@HsingYi - the <code>*</code> gets ignored, it is the same as <code>subprocess.Popen(['ls'], stdout = subprocess.PIPE, shell=True)</code>.  The default for <code>ls</code> is the current directory <code>.</code>, the <code>*</code> shell expansion is all the file names in the current directory, which is what you get on both.</span>
