<div class="post-text" itemprop="text">
<p>I have the following class which I made:</p>
<pre><code>  import math

    class Point:
        """Two-Dimensional Point(x, y)"""
        def __init__(self, x=0, y=0):
            # Initialize the Point instance
            self.x = x
            self.y = y

        def __iter__(self):
             yield self.x
             yield self.y

        def __add__(self, other):
            addedx = self.x + other.x
            addedy = self.y + other.y
            return Point(addedx, addedy)

        def __mul__(self, other):
            mulx = self.x * other
            muly = self.y * other
            return Point(mulx, muly)

        def __rmul__(self, other):
            mulx = self.x * other
            muly = self.y * other
            return Point(mulx, muly)

        @classmethod
        def from_tuple(cls, tup):
            x, y = tup
            return cls(x, y)

        def loc_from_tuple(self, tup):
            self.x, self.y = tup

        @property
        def magnitude(self):
            # """Return the magnitude of vector from (0,0) to self."""
            return math.sqrt(self.x ** 2 + self.y ** 2)

        def distance(self, self2):
             return math.sqrt((self2.x - self.x) ** 2 + (self2.y - self.y) ** 2)

        def __str__(self):
            return 'Point at ({}, {})'.format(self.x, self.y)

        def __repr__(self):
            return "Point(x={},y={})".format(self.x, self.y)
</code></pre>
<p>I don't exactly know how to explain it but I basically want to be able to maintain a points id despite mathematical operations. For example:</p>
<pre><code>    point1 = Point(2, 3)
    point2 = Point(4, 5)
    id1 = id(point1)
    point1 += point2
    print(point1)
        Point(x=6, y=8)
    print(id1 == id(point1))
        True
    print(point2)
        Point(x=4, y=5)
</code></pre>
<p>Is there a reason this doesn't happen in my code. It says False during the id part in mine. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>id</code> is basically the memory address. If you make a new object, it will probably have a different id. If you want a mutable Point object for some reason consider the <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__iadd__#object.__iadd__" rel="nofollow noreferrer"><code>__iadd__</code> (and friends) methods</a> instead, which can do the update in-place.</p>
</div>
<span class="comment-copy">What is the ultimate goal of keeping the id? You could achieve this by modifying your <code>__add__</code> to just modify <code>self.x</code> and <code>self.y</code> instead of returning a new <code>Point</code> object but I'm not sure why you want the id to remain the same.</span>
<span class="comment-copy">You are returning new <code>Point</code> objects from those methods  This is probably a <i>good</i> thing, why don't you want this?</span>
<span class="comment-copy">The ID is there because the math operations are supposed to return new point objects without modifying the original point. This is why point1 is assigned the ID.</span>
<span class="comment-copy">I modified my function to just        return self.x + other.x, self.y + other.y. This still however returns false.</span>
<span class="comment-copy"><code>return self.x + other.x, self.y + other.y</code> returns an <i>int</i>, so obviously it won't have the same I'd. Again, <b>why</b> do you want this? I do t really understand the rest of what you posted. You say that "the math operations are supposed to return new point objects without modifying the original point." That's what they are doing. That is <i>why you don't get the same id</i>.</span>
