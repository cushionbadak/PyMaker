<div class="post-text" itemprop="text">
<p>I am finding it difficult to understand how the following code works:</p>
<pre><code>mylist = [1,2,3,4,5]
print(sum(i for i in mylist))
</code></pre>
<p>the code above gives a correct result of 15, but shouldn't "i" be used after it is declared and not before?</p>
</div>
<div class="post-text" itemprop="text">
<p>Read the documentation on <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">generator expressions</a>.</p>
<p>You will see that you are (effectively) creating a mini generator equivalent to:</p>
<pre><code>def iter_list(lst):
    for i in lst:
        yield i

myList = [1,2,3,4,5]
print(sum(iter_list(myList)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python is an untyped language.
That means you do not need to declare the variables such as <code>i</code>.</p>
<p>You can give a bit more clarity to compiler , and your understanding by doing the edit:</p>
<pre><code>mylist = [1,2,3,4,5]
print(sum(int(i) for i in mylist ))
</code></pre>
<p>So, Python is just very smart in giving type to variables, and flexible too as compared to static C code.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this particular case (<a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list-compherensions</a>) the syntax allows to do so</p>
</div>
<div class="post-text" itemprop="text">
<p>Because of the Syntax of sum() ... iterable and a start position</p>
<p><code>sum(i, start)</code></p>
<p>You can take an look with examples there --&gt; <a href="https://www.programiz.com/python-programming/methods/built-in/sum" rel="nofollow noreferrer">https://www.programiz.com/python-programming/methods/built-in/sum</a></p>
</div>
<span class="comment-copy">What you see is — despite the name <code>for</code> — not a for loop, but a (generator) comprehension. Like some other special expressions (e.g. ternary if: <code>x = 3 if foo=bar else 5</code>) it has this "weird" order, because that's how you would say it in English.</span>
<span class="comment-copy">@RobJan Nit-picking here, but: No, that's not a list comprehension</span>
<span class="comment-copy">@L3viathan I admit that this is way to create generator.</span>
