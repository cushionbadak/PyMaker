<div class="post-text" itemprop="text">
<p>So I defined a blank dictionary called <strong>library</strong> globally. I already know how to save a dictionary to a txt file.</p>
<p>The output of the txt file looks like this this (it's called <strong>bookList0.txt</strong>):</p>
<pre><code>{'Hobbit': {'author': 'J.R.R.Tolkien', 'year': '1937', 'genre': 'fantasy'}}
</code></pre>
<p>I made a function to load this file:</p>
<pre><code> library = {}
 def load():
    print("Loading library..")
    f = open("bookList0.txt", "r")
    library = eval(f.readline())
    if len(library) &gt; 0:
        print("Library successfully loaded!")
    else:
        print("Library didn't load!")
</code></pre>
<p>If i use this function it says "Library successfully loaded!". But when i type <code>print(library)</code> in the console it only shows <code>{}</code>.</p>
<p>However, if i type <code>f = open(str("bookList0.txt"), "r")</code> then <code>library = eval(f.readline())</code> in the console and then again <code>print(library)</code> in the console it gives me the dictionary that is in the file. So that way it works.</p>
<p>And i don't know why is this not working in a function, but works in the console. Thanks for the help!</p>
<p><strong>Update:</strong> I tried loading with the json module but still it doesn't load anything. Here's the code that i wrote for json:</p>
<pre><code>json_file = open("bookList.json")
json_str = str(json_file.read())
json_data = json.loads(json_str)
library = json_data
</code></pre>
<p><strong>Problem solved!</strong> This is the code that seems to be working: </p>
<pre><code>def load():
    print("Loading library..")
    json_file = open("bookList.json")
    json_str = str(json_file.read())
    json_data = json.loads(json_str)
    library.update(json_data)
    if len(library) &gt; 0:
        print("Library successfully loaded!")
    else:
        print("Library didn't load!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems to me that you have not a clear understanding of Python's <a href="https://docs.python.org/3.7/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">name scopes</a>.</p>
<p>I have written a little script where I have (<em>mutatis mutandis</em>, i.e., no external files involved...) two different <code>load</code> definitions, <code>load_01</code> that, like in your code, has no <code>return</code> statement and <code>load_02</code> that has a <code>return</code> statement, and where I have invoked in different ways these two functions, i.e., without or with a corresponding assignment, and in each of these four cases the script prints its idea of the value of <code>library</code>.</p>
<pre><code>$ cat delendo.py
library = {}
data = '''{
    'Hobbit': 
        {'author': 'J.R.R.Tolkien', 'year': '1937', 'genre': 'fantasy'}}'''

def load_01(s):
    library = eval(s)
    print('Loaded 01')

def load_02(s):
    library = eval(s)
    print('Loaded 02')
    return library

print('='*64)
print('Initial value of _library_')
print(library)

print('='*64)
print('No return, no assignment')
load_01(data) ; print(library)
print('No return, assignment')
library = load_01(data) ; print(library)

print('='*64)
print('Reset value of _library_')
library = {}
print(library)

print('='*64)
print('Return, no assignment')
load_02(data) ; print(library)
print('Return, assignment')
library = load_02(data) ; print(library)
</code></pre>
<p>Here I have the results of executing the script that I have prepared</p>
<pre><code>$ python delendo.py 
================================================================
Initial value of _library_
{}
================================================================
No return, no assignment
Loaded 01
{}
No return, assignment
Loaded 01
None
================================================================
Reset value of _library_
{}
================================================================
Return, no assignment
Loaded 02
{}
Return, assignment
Loaded 02
{'Hobbit': {'author': 'J.R.R.Tolkien', 'year': '1937', 'genre': 'fantasy'}}
$ 
</code></pre>
<p>I hope that, studying the code and confronting with the output, you could get a better understanding of name scopes in Python.</p>
<hr/>
<p>ps, all that was told in comments, about the use of <code>eval</code> and the opportunity of using the <code>json</code> module stands on its own and you should try to incorporate the suggestions you've received in your code.</p>
<p>My example is only addressed to one side  of the problems you're facing, namely the one that puzzles you at the moment...</p>
</div>
<span class="comment-copy">You shouldn't use <code>eval</code>, have a look at <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">the json module</a></span>
<span class="comment-copy"><a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, please. (i.e. show us where you put that <code>print(library)</code> that you claim produces incorrect output)</span>
<span class="comment-copy">@ThierryLathuille in this case given the quoting - <code>ast.literal_eval</code> is probably better...</span>
<span class="comment-copy">You should use the JSON module with <code>loads</code> and <code>dumps</code> function to handle encoding/decoding dicts</span>
<span class="comment-copy">@Barnistic Ok, but your <code>load</code> function doesn't return anything, so <code>print(library)</code> should throw a NameError in the console. Unless you've previously defined a global variable named <code>library</code>. So I repeat my request for a MCVE.</span>
