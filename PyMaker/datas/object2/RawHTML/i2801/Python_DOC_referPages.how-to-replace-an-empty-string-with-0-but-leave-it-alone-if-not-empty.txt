<div class="post-text" itemprop="text">
<p>Python's behavior seems inconsistent when replacing values in the case shown below (using python 3.6.5)</p>
<pre><code>    &gt;&gt;&gt; emptyString = '    '
    &gt;&gt;&gt; emptyString.strip().replace('','0') #produces expected results
    '0'
    &gt;&gt;&gt; notEmptyString = ' 50 '
    &gt;&gt;&gt; notEmptyString.strip().replace('','0') #expected '50'
    '05000'
    &gt;&gt;&gt; shortString = notEmptyString.strip()
    &gt;&gt;&gt; shortString  #results as expected
    '50'
    &gt;&gt;&gt; shortString.replace('','0') #unexpected results - expected '50'
    '05000'
</code></pre>
<p>This is what I'd like to see:</p>
<blockquote>
<ul>
<li>if string has a value, just strip() the leading and trailing spaces.</li>
<li>if string is empty (i.e. "") or string is just blank characters (i.e. "    ") then strip it to be "" and replace "" with '0'</li>
</ul>
<p>Example #1...  string  = " 10 "....  then just strip leading and
  trailing spaces<br/>
  Example #2...  string  = '   ' .... then convert to
  '0'</p>
</blockquote>
<p>I can get the results I want by other means, but I wondered if anybody understands why python produces these results.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>s</code> is a string, then:</p>
<pre><code>s.replace(old, new)
</code></pre>
<p>returns a copy of <code>s</code> with every occurrence of the string <code>old</code> replaced with <code>new</code>, so for example:</p>
<pre><code>In [7]: "abracadabra".replace("a","4")
Out[7]: '4br4c4d4br4'
</code></pre>
<p>As a special case, if <code>old</code> is the empty string, it inserts <code>new</code> at the start and end of the string and between every pairs of characters:</p>
<pre><code>In [8]: "12345678".replace("","_")
Out[8]: '_1_2_3_4_5_6_7_8_'
</code></pre>
<p>The rationale is that there's a "empty string" before the first character, between each pair of characters, and after the last character, and that's what's being replaced.</p>
<p>So, <code>replace</code> isn't doing what you were thinking.</p>
<p>To do what you what, you can use one of the solutions already proposed, or something like this if you're feeling clever:</p>
<pre><code>s.strip() or "0"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is related to how <code>replace</code> works.</p>
<p>Think of it as looking through every index of the string, and creating a substring starting from each index. Then it checks if any of the substrings start with the string to look for. It then records the index of the substrings that start with the string to look for, removes the your string to look for, and inserts your replacement string at those indices.</p>
<p>For <code>''</code>, there is only one index to look through, and the substring starting from that index is <code>''</code>, which starts with <code>''</code>, so a 0 is inserted.</p>
<p>For <code>50</code>, there are 3 indices to look through. The substrings starting from the indices are:</p>
<pre><code>'50'
'0'
''
</code></pre>
<p>All of these substrings start with <code>''</code>, so a 0 is inserted in all the indices, creating <code>'05000'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h1>How <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a> works</h1>
<p>You interpret the method <code>str.replace</code> as if it replaced the whole string by the new value. This is not the case.</p>
<p>What it does is replace <em>every occurence</em> of the first argument by the second argument within the string.</p>
<pre><code>'ababc'.replace('ab', 'x') # 'xxc'
</code></pre>
<p>What may be confusing here is that you are replacing every occurence of the <em>empty string</em>. It turns out the empty string is present everywhere, between every two character is an empty string.</p>
<p>If that does not make sense to you just consider that the following is indeed <code>True</code></p>
<pre><code>'' + '5' + '' + '0' + '' == '50'
</code></pre>
<p>So doing this...</p>
<pre><code>s.replace('', '0')
</code></pre>
<p>Is equivalent to inserting <code>'0'</code> between all characters. It is equivalent to the following.</p>
<pre><code>'0'.join(s.split())
</code></pre>
<h1>How to default an empty string to a value</h1>
<p>What you want to do is strip your string and make it <code>'0'</code> if it is empty, here are a few ways to do this.</p>
<pre><code># 1)
s = emptyString.strip()
s = s if s else '0'

# 2)
s = emptyString.strip() or '0'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @coldspeed suggested in comment, You need:</p>
<pre><code>def myfunc(string): return string if string.strip() else '0'


print(myfunc(' 050  '))
print(myfunc('   '))
print(myfunc(''))
print(myfunc('abcd'))
</code></pre>
<p>Output:</p>
<pre><code> 050  
0
0
abcd
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Another way of doing this:</strong></p>
<pre><code>def f(s):
    return {'':'0'}.get(s.strip(),s)
print(f('   '))
print(f(' a '))
</code></pre>
<p>Output:</p>
<pre><code>0
 a
</code></pre>
<p><strong>Explanation (for str.replace):</strong></p>
<ol>
<li>str.replace(..) replaces first arg with second arg</li>
<li>also <code>""</code> is always in a string (to see what i mean <code>'ab'.count('')</code> returns 3)</li>
</ol>
<p><strong>Explanation (for my example):</strong></p>
<ol>
<li>I create a def (function)</li>
<li>Then i make a dict</li>
<li>Then i do <code>dict.get</code> for checking</li>
</ol>
</div>
<span class="comment-copy">Perhaps you want to define a function that does something like <code>def myreplace(string): return string if string.strip() else '0'</code></span>
<span class="comment-copy">I think the OP can already solve their problem. they just doesn't understand why <code>replace</code> behaves like this.</span>
