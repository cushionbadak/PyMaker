<div class="post-text" itemprop="text">
<p>My project has the following structure:</p>
<pre><code>.
└── mylib
    ├── __init__.py
    ├── fun1.py
    ├── fun2.py
    └── test.py
</code></pre>
<p>Suppose <code>test.py</code> imports functions from modules <code>fun1.py</code> and <code>fun2.py</code>, so it contains</p>
<pre><code>from fun1 import funA
from fun2 import funB
</code></pre>
<p>However, when I try to import <code>test.py</code> outside my project directory I get the following error:</p>
<pre><code>ModuleNotFoundError: No module named 'fun1'
</code></pre>
<p>I can fix this by specifying the whole path to <code>fun1.py</code> and <code>fun2.py</code> in my imports.</p>
<pre><code>from mylib.fun1 import funA
from mylib.fun2 import funB
</code></pre>
<p>But again, suppose I don't have only to import <code>funA()</code> and <code>funB</code> + I have a whole bunch of modules other than <code>test.py</code> that also imports functions from each other. So it would take a huge amount of time specify the path for every import (more than 200 imports made like this).</p>
<p>Is there a cleaner way to make these imports besides specifying the whole path for all of them?</p>
<p>I tried making these imports on my <code>__init__.py</code>, but due to my inexperience, I'm still unable to make it work.</p>
<h1>FILES</h1>
<h2>fun1.py</h2>
<pre><code>def funA():
    return True
</code></pre>
<h2>fun2.py</h2>
<pre><code>from fun1 import funA

def funB():
    return True
</code></pre>
<h2>test.py</h2>
<pre><code>from fun1 import funA
from fun2 import funB
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, you want to have a file outside mylib that looks like</p>
<pre><code>from mylib import funA
</code></pre>
<p>First, it seems that you need the relative imports everywhere inside mylib. Second, you need to use your __init__.py to import everything from the local directory and make it available in the directory above. I would change (minimally) your files as follows, adding some more files to test the imports.</p>
<h2>Directory structure:</h2>
<pre><code>.
├── mylib
│   ├── fun1.py
│   ├── fun2.py
│   ├── __init__.py
│   └── test.py
├── scriptA.py
├── scriptB.py
└── script_test.py
</code></pre>
<h2>fun2.py</h2>
<pre><code>from .fun1 import funA

def funB():
    return True
</code></pre>
<h2>__init__.py</h2>
<pre><code>from .fun1 import funA
from .fun2 import funB
</code></pre>
<h2>test.py</h2>
<pre><code>from . import funA, funB
</code></pre>
<h2>scriptA.py</h2>
<pre><code>from mylib import funA
</code></pre>
<h2>scriptB.py</h2>
<pre><code>from mylib import funB
</code></pre>
<h2>script_test.py</h2>
<pre><code>from mylib import test

test.funA()
</code></pre>
<p>You can now use script A, B, or _test as your needs require. This pattern extends to deeper directory structures as you continue to use the relative import with <code>.</code> in the __init__.py at each directory level.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to import modules/functions where you need them. There is no magic way for python to know that you have imported something. There are different ways to import needed modules/functions (<a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a>), but what I've found most useful is to import modules and then later use module name with dot syntax to call functions, so something like:</p>
<pre><code>from . import func1
from . import func2

def test():
    func1.funA()
    func2.funB()
</code></pre>
<p>just an example. But you can see a general idea. (<code>from . import func1</code> will import func1 from current directory/module)</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on my understanding, you are trying to import modules that are in some other project location. Try this and replace path with the location from where you want to import modules. </p>
<pre><code>sys.path.insert(0, path)
</code></pre>
<p>Please let me know if I misunderstood your question.</p>
</div>
<span class="comment-copy">@palivek If you reproduce my directory with the files I provided and import <code>test.py</code> outside the project directory you will get an error. To solve this error I have to change the import path for each module. My question is how I can do this without writing the full path for every function (probably a solution using <code>__init__.py</code>)</span>
<span class="comment-copy"><code>import .func1</code> is not valid syntax; relative imports go like <code>from . import func1</code>.</span>
<span class="comment-copy">@PerunSS is right. This is a good approach.  You can always try to use * to import anything, like <code>from pytmp.test import *</code> but that will make debugging harder as you can accidentally create functions with the same name in different modules.</span>
<span class="comment-copy">my bad for imports, changing them to absolute ones</span>
<span class="comment-copy">This introduces a good practice, but my problem still exists because my imports would be huge (e.g. <code>from mylib.dir.subdir.subsubdir import func1</code> ) etc. Maybe relative imports would be the way to go, but still looking.</span>
