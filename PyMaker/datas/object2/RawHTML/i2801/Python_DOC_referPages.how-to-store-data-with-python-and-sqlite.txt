<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/22488763/sqlite-insert-query-not-working-with-python">Sqlite insert query not working with python?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>The following code should be a simple user registration.</p>
<p>database.db</p>
<pre><code>import sqlite3

conn = sqlite3.connect('database.db')
conn.execute('CREATE TABLE accounts (username TEXT, password TEXT)')
conn.close()
</code></pre>
<p>views.py</p>
<pre><code>import sqlite3    

DATABASE = '../FlaskWebProject/database.db'
with app.app_context():

                username = request.form['username'];                  
                password = request.form['password'];


                query_db("insert into accounts (username, password) values (username, password)")


                def get_db():
                db = getattr(g, '_database', None)
                if db is None:
                    db = g._database = sqlite3.connect(DATABASE)
                return db

            def query_db(query, args=(), one=False):
                cur = get_db().execute(query, args)
                rv = cur.fetchall()
                cur.close()
                return (rv[0] if rv else None) if one else rv
</code></pre>
<p>Error:</p>
<p>sqlite3.OperationalError: no such table: accounts</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sqlite3</code> library implicitly carries out transaction management when the <code>isolation_level</code> isn't configured. The default being that statements that modify the database are implicitly managed in a transaction.
In this mode, you need to commit modifications to the database after executing an operation.</p>
<pre><code>conn.execute('CREATE TABLE accounts (username TEXT, password TEXT)')
conn.commit()
</code></pre>
<blockquote>
<p><strong><a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit" rel="nofollow noreferrer">commit</a></strong></p>
<p>This method commits the current transaction. If you don’t call this method, anything you did since the last call to commit() is not visible from other database connections. If you wonder why you don’t see the data you’ve written to the database, please check you didn’t forget to call this method.</p>
</blockquote>
<p>If you want to turn off this behaviour and have data written immediately an operation is executed, you can set <code>isolation_level</code> to <code>None</code> when establishing a connection to the database.</p>
<pre><code>conn = sqlite3.connect('sample.sqlite', isolation_level=None)
</code></pre>
<p>There is some <a href="https://docs.python.org/3/library/sqlite3.html#controlling-transactions" rel="nofollow noreferrer">documentation on the available options to controlling transactions</a>.</p>
<p><strong>Note that</strong> while (<code>connection.execute</code> works)[<a href="https://docs.python.org/3/library/sqlite3.html#using-shortcut-methods]" rel="nofollow noreferrer">https://docs.python.org/3/library/sqlite3.html#using-shortcut-methods]</a> as a shortcut to execute operations in the database, it creates a cursor implicitly. I tend to prefer explicitly making a cursor from the connection and using it for database operations.</p>
<pre><code>cur = conn.cursor()
cur.execute('CREATE TABLE accounts (username TEXT, password TEXT)')
conn.commit()
conn.close()
</code></pre>
</div>
<span class="comment-copy">The code that creates the table is never executed? I don't see where you're calling it.</span>
<span class="comment-copy">And if it is executed, are you sure it is referencing database.db in the same directory as ../FlaskWebProject/?</span>
<span class="comment-copy">yes, it is in the same directory</span>
<span class="comment-copy">As a side note, once you fix this, you're just going to get a different error, because you're trying to insert the SQL values <code>username</code> and <code>password</code> as the username and password, when what you actually want to insert is the values of your Python variables <code>username</code> and <code>password</code>. To solve that, do <code>query_db(insert into accounts (username, password) values(?, ?)</code>, args=(username, password))`.</span>
<span class="comment-copy">And when you fix <i>that</i>, you're going to try calling <code>fetchall</code> after a SQL query that doesn't return any results, which is also illegal (although you may not get an error for it). You want to change <code>query_db</code> to take some additional flag—it's not just "one row" or "all rows", it's "one row" or "all rows" or "don't do a fetch at all". (Also, when you want one row, you should just call <code>fetch</code>, not call <code>fetchall</code> and then throw away all the other rows, but that's just a performance issue, not a correctness one.)</span>
