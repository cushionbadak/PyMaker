<div class="post-text" itemprop="text">
<p>Im parsed list of crew witch one looks like:</p>
<blockquote>
<p>20;mechanic;0;68</p>
<p>21;cook;0;43</p>
<p>22;scientist;0;79</p>
<p>23;manager;1;65</p>
<p>24;mechanic;1;41</p>
<p>etc</p>
</blockquote>
<p>And now I'm trying to figure out how to count number of workers who have 60 or more stamina( the last element in each employee )</p>
<p>There is my code:</p>
<pre><code>with open('employee.txt', 'r') as employee_list:
    count = 0
    for employee in employee_list.readlines():
        employee_data = employee.rstrip().split(';')
        if int(employee_data[3]) &gt;= 60:
            count += 1
        print(count)
</code></pre>
<p>Print from terminal:</p>
<blockquote>
<p>1  </p>
<p>2  </p>
<p>3  </p>
<p>...</p>
<p>90</p>
</blockquote>
<p>And there is the right answer I think, but is there anyway to get only one 'total' count, not a 90ty strings ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just print one line after the loop is done.</p>
<pre><code>with open('employee.txt', 'r') as employee_list:
    count = 0
    for employee in employee_list.readlines():
        employee_data = employee.rstrip().split(';')
        if int(employee_data[3]) &gt;= 60:
            count += 1
    print(count)
</code></pre>
<p>But I would also recommend using <code>pandas</code> for data manipulation. For example:</p>
<pre><code>df = pd.read_csv('employee.txt', sep=';')
df.columns = ['col1', 'col2', 'col3', 'stamina']
</code></pre>
<p>Then just filter and get the size:</p>
<pre><code>df[df.stamina &gt;= 60].size
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So after a day of thinking I wrote this and get right answer ( maybe someone will find this helpful):</p>
<p>def total_resist_count():</p>
<pre><code>    # with open('employee.txt', 'r') as employee_list:
    employee_list = [input() for i in range(120)]

    candidates = []

    for employee in employee_list:
        employee_data = employee.rstrip().split(';')
        if int(employee_data[3]) &gt;= 60:
            candidates.append(employee_data)
    return candidates


required_professionals = {
    'computers specialist': 5,
    'cook': 3,
    'doctor': 5,
    'electrical engineer': 4,
    'manager': 1,
    'mechanic': 8,
    'scientist': 14
}

expedition_total = 40
female_min = 21
male_min = 12


def validate_solution(cur_team, num_females, num_males):
    global expedition_total, female_min, male_min
    if sum(cur_team) != expedition_total or num_females &lt; female_min or num_males &lt; male_min:
        return False
    num_of_free_vacancies = 0
    for k in required_professionals:
        num_of_free_vacancies += required_professionals[k]
    if num_of_free_vacancies &gt; 0:
        return False
    return True


TEAM = None


def backtrack(candidates, cur_team, num_females, num_males):
    global required_professionals, expedition_total, TEAM
    if sum(cur_team) &gt; expedition_total or TEAM is not None:
        return
    if validate_solution(cur_team, num_females, num_males):
        team = []
        for i, used in enumerate(cur_team):
            if used == 1:
                team.append(candidates[i])
        TEAM = team
        return

    for i in range(len(candidates)):
        if cur_team[i] == 0 and required_professionals[candidates[i][1]] &gt; 0:
            cur_team[i] = 1
            required_professionals[candidates[i][1]] -= 1
            if candidates[i][2] == '1':
                backtrack(candidates, cur_team, num_females, num_males + 1)
            else:
                backtrack(candidates, cur_team, num_females + 1, num_males)
            required_professionals[candidates[i][1]] += 1
            cur_team[i] = 0


if __name__ == '__main__':
    ec = decode_fcc_message()
    candidates = total_resist_count(ec)
    cur_team = [0] * len(candidates)
    backtrack(candidates, cur_team, 0, 0)
    s = ""
    for t in TEAM:
        s += str(t[0]) + ';'
    print(s)
</code></pre>
</div>
<span class="comment-copy">Put the <code>print</code> <i>after</i> the loop?</span>
<span class="comment-copy">Put the <code>print</code> out of the <code>for</code> loop so that it does not print in each step, but only after the whole thing is done.</span>
<span class="comment-copy">@RafaelC  Yeah, that was the problem, post is like answer please so I can close it</span>
<span class="comment-copy">Take a look at the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module, especially the <code>DictReader</code> class.  You'll be able to reason about data in this format much more easily.</span>
<span class="comment-copy">@PatrickHaugh Thanks for advice I will look at it, right now it trying to learn how to do it with native methods</span>
