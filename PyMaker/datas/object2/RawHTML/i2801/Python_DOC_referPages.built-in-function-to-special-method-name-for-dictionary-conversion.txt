<div class="post-text" itemprop="text">
<p>I've been delving into operator overloading and special methods within Python classes, and I noticed that many built-in functions have their equivalent special method names:</p>
<ul>
<li><code>int(x)</code> calls <code>x.__int__()</code></li>
<li><code>next(x)</code> calls <code>x.__next__()</code> or <code>x.next()</code> in Python 2</li>
</ul>
<p>However, a couple functions, namely <code>tuple()</code> and <code>dict()</code>, do not have any equivalent. I am aware that the need has not arised yet for such special methods, but in some cases, a method for <code>dict()</code> conversion called on a class may be useful. How might I implement this? Or, what would you remark on someone attempting to use this kind of logic?</p>
<pre><code># I think this is quite interesting, so I shall post my own implementation of it as well
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Option 1: <code>__iter__</code></h2>
<p>Casting to <code>tuple</code> or <code>dict</code>, or any type that takes an iterable, relies on the <code>__iter__</code> method.</p>
<pre><code>class ListOfKeys():
    def __init__(self, lst):
        self.lst = lst

    def __iter__(self):
        for k in self.lst:
            yield (k, None)

lok = ListOfKeys([1, 2, 3])
d = dict(lok)

print(d) # {1: None, 2: None, 3: None}
</code></pre>
<p>The same will work for tuples.</p>
<pre><code>t = tuple(lok)

print(t) # ((1, None), (2, None), (3, None))
</code></pre>
<h2>Option 2: <code>keys</code> and <code>__getitem__</code></h2>
<p>Alternatively, to cast to a <code>dict</code>, you can implement both <code>keys</code> and <code>__getitem__</code>.</p>
<pre><code>class ListOfKeys():
    def __init__(self, lst):
        self.lst = lst

    def keys(self):
        yield from self.lst

    def __getitem__(self, item):
        return None

lok = ListOfKeys([1, 2, 3])
d = dict(lok)

print(d) # {1: None, 2: None, 3: None}
</code></pre>
<h2>Option 3: Both for supporting multiple types</h2>
<p>Finally, if you want your class to have different behaviour for casting to a <code>dict</code> and a <code>tuple</code>, the following example demonstrates that <code>dict</code> will prioritize the <code>keys</code> and <code>__getitem__</code> solution.</p>
<pre><code>class Foo:
    def __iter__(self):
        yield 1

    def keys(self):
        yield 2

    def __getitem__(self, item):
        return 3

print(dict(Foo())) # {2: 3}
print(tuple(Foo())) # (1,)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In it's simplest form, I could try and retrieve <code>obj.__dict__</code>. I've also created a method, called <code>obj.__dictionary__</code> that returns a <code>dict</code>, but can customise what values are returned and how. I implemented a small function that tries to call <code>obj.__dictionary__</code> and other successive attempts at other methods:</p>
<pre><code>def dct(obj=None, *args, **kwargs):
    if obj:
        try:
            r = obj.__dictionary__()
        except AttributeError:
            try:
                r = dict(obj)
            except TypeError:
                try:
                    r = obj.__dict__
                except AttributeError as e:
                    raise AttributeError(e) from None
                else:
                    return r
            else:
                return r
        else:
            return r
    else:
        return dict(*args, **kwargs)
</code></pre>
<p>For demonstration, a little class which encapsulates a <code>'Person'</code>:</p>
<pre><code>class Person:
    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

    def __dictionary__(self):
        return {'name': self.name,
                'age': self.age,
                'job': self.job,
                'title': '{} {}'.format(self.job, self.name)}

p = Person('bob', 42, 'farmer')
</code></pre>
<p>Now consider calling my custom <code>dct</code> function on a few objects to test it out:</p>
<pre><code>&gt;&gt;&gt; dct(p)
{'name': 'bob', 'age': 42, 'job': 'farmer', 'title': 'farmer bob'}

&gt;&gt;&gt; dct(item='apple', quantity=5)
{'item': 'apple', 'quantity': 5}

&gt;&gt;&gt; dct([('username', 'admin'), ('password', '123')])
{'username': 'admin', 'password': '123'}

&gt;&gt;&gt; dct({'a': 1, 'b': 2})
{'a': 1, 'b': 2}
</code></pre>
<p>As you can see, it seems to work in a decent way. I know that for my simple <code>Person</code> class demonstration, I could have simply returned <code>p.__dict__</code>, but I added an extra <code>p.title</code> attribute which only exists in <code>dict</code> form to show that this enables extra customisation. In addition, if I defined the <code>Person</code> class with <code>__slots__</code>, then the <code>dct(p)</code> call would fail with</p>
<pre><code>AttributeError: 'Person' object has no attribute '__dict__'
</code></pre>
<p>Obviously, I could extend the <code>try/except</code> blocks to attempt to access <code>__slots__</code> as well, but this is not the point I am trying to get across: If I defined the following in the custom <code>__dictionary__</code> method, the code would
work as expected:</p>
<pre><code>def __dictionary__(self):
    return {name: getattr(self, name, None)
            for name in self.__slots__}
</code></pre>
</div>
<span class="comment-copy"><code>dict</code> accepts <i>any iterable of pairs</i></span>
<span class="comment-copy"><code>__iter__</code> or <code>__getitem__</code> to be precise.</span>
<span class="comment-copy">That seems like the most pythonic way to do it. It's definitely cleaner than mine. Just a small comment though: What if one wanted to have different behaviour for dict(), tuple() and iter() alike? Say, iteration would only yield the values, not the pairs of values.</span>
<span class="comment-copy">@NChauhan your approach is the correct one in this case, just get rid of the dunder naming! <code>.to_dict</code>, <code>.to_tuple</code></span>
<span class="comment-copy">@NChauhan dict actually prioritize the keys-getitem solution, see updated answer</span>
<span class="comment-copy">What's the point of pretending that the language implements some hook that it doesnt? The <code>dict</code> constructor doesn't support it, so why not just simply a <code>to_dict</code> method?</span>
<span class="comment-copy">For ease, I could call <code>dict()</code> on anything and not need to worry whether it has its own <code>to_dict</code> method</span>
<span class="comment-copy">Then wrap it in <code>try: return obj.to_dict() except AttributeError: return obj.__dict__</code>... my main point is you shouldn't be adding your "own special" dunder methods. In fact, this is specifically proscribed in <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">PEP8</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer">Any use of <code>__*__</code> names, in any context, that does not follow explicitly documented use, is subject to breakage without warning.</a></span>
