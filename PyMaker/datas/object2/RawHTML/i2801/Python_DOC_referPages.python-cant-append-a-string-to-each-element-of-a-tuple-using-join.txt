<div class="post-text" itemprop="text">
<p>I tried to append a string to each element string in a tuple using join,</p>
<pre><code>str_tup = ('country', 'town')
fields = ('_outlier'.join(key) for key in str_tup)

for key in fields:
    print(key)
</code></pre>
<p>I got</p>
<pre><code>c_outliero_outlieru_outliern_outliert_outlierr_outliery
t_outliero_outlierw_outliern
</code></pre>
<p>instead of </p>
<pre><code>country_outlier
town_outlier
</code></pre>
<p>I am wondering how to resolve the issue, using a generator here trying to save memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>join(x)</code> function concatenates an iterable(e.g. a list) of items, placing <code>x</code> in between every item. What you are looking for is simple concatenation:</p>
<pre><code>str_tup = ('country', 'town')
fields = (key + '_outlier' for key in str_tup)

for key in fields:
    print(key)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python 3.6+, I suggest you to use <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-strings</a> to build the generator, which are very beautiful and optimized. They really deserve to be known and widely used. Here is my proposal:  </p>
<pre><code>str_tup = ('country', 'town')
fields = (f'{s}_outlier' for s in str_tup)

for key in fields:
    print(key)
# country_outlier
# town_outlier
</code></pre>
</div>
<span class="comment-copy">sry, I have modified the op to clarify the misunderstandings.</span>
<span class="comment-copy">@jpp correct, I will update my answer.</span>
