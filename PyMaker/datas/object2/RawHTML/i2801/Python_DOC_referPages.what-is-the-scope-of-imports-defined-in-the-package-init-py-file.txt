<div class="post-text" itemprop="text">
<p>For a project I had to switch from C++ to python but I'm having some trouble fully understanding the <code>__init__.py</code> file. I found the following documentation on the <code>__init__.py</code> file:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html</a></li>
<li><a href="https://www.pythoncentral.io/how-to-create-a-python-package/" rel="nofollow noreferrer">https://www.pythoncentral.io/how-to-create-a-python-package/</a></li>
<li><a href="http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html" rel="nofollow noreferrer">http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html</a></li>
</ul>
<p>To get more familiar with the way the <code>__init__.py</code> file works I did some tests in both python 2.7 and 3.6.5. I used the "PythonCentral" test pacakge (see link 2) for this:</p>
<p><a href="https://i.stack.imgur.com/MOWLS.png" rel="nofollow noreferrer"><img alt="package overview" src="https://i.stack.imgur.com/MOWLS.png"/></a></p>
<p>Now I understand the following about the <code>__init__.py</code> file:</p>
<ul>
<li>The <code>__init__.py</code> file executes when a module or subpackage module is imported.</li>
<li>The <code>__init__.py</code> can be used to overload the package <code>__all__</code> method.</li>
<li>The <code>__init__.py</code> can be used to define the import order</li>
<li>The <code>__init__.py</code> can be used to make classes available on package and subpackage level.</li>
</ul>
<p>Using the different modules and classes from the scope of my main file seems to go as explained in the documentation. However when trying to use a class that is defined in another subpackage module I run into troubles. In python 2.7 created the following <code>__init__.py</code> file in the subanimals subpackage:</p>
<pre><code>from Mammals import Mammals

print "subpackage __init__.py executed"
</code></pre>
<p>Following I created the following code inside the Bird.py module:</p>
<pre><code>class Birds:
    def __init__(self):
        ''' Constructor for this class. '''
        # Create some member animals
        self.members = ['Sparrow', 'Robin', 'Duck']


    def printMembers(self):
        print('Printing members of the Birds class')
        for member in self.members:
           print('\t%s ' % member)

        test = Mammals()
        test.printMembers
</code></pre>
<p>When running the main following main script:</p>
<pre><code>    from animals.subanimals import Birds

test = Birds()
test.printMembers()
</code></pre>
<p>I keep getting the global name Mammals not defined. I can solve this in python 2.7 by adding from Mammals import Mammals to the top of the Birds.py.</p>
<p>Does the <code>__init__.py</code> only import packages and classes on the scope level of the main script and therefore not inside the Birds.py module or am I doing something else wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Answer to my question can be found in @jonrsharpe 's comment.</p>
<blockquote>
<p>Each individual file must be valid on its own, defining all
  appropriate imports. <strong>init</strong>.py is for aggregating multiple files in
  a directory into a single module; think of it as grouping and passing
  attributes up to the parent, not down to the other files in that
  directory.</p>
</blockquote>
</div>
<span class="comment-copy">Each individual file must be valid on its own, defining all appropriate imports. <code>__init__.py</code> is for aggregating multiple files in a directory into a single module; think of it as grouping and passing attributes <i>up</i> to the parent, not <i>down</i> to the other files in that directory.</span>
<span class="comment-copy">I don't see where you are importing Mammals, add from Mammals import Mammals into Birds.py, also please avoid naming file the same way into subdirs, this just adds confusion and unwanted behaviors.</span>
<span class="comment-copy">@jonrsharpe Ah So if I understand you correctly the <b>init</b>.py file is only for the functions I described above and can not be used in a similar way as C++ header files are used? In python I therfore have to define all my imports in all my py files?</span>
<span class="comment-copy">@simoneZandara Yea I tried that and that solved the error but I was wondering if it was possible to use the _<i>init_</i>.py as some kind of header file (equivalent to C++) in which i can specify all my package imports. Judging from your and jonrscharpe 's comment it looks that that is not possible.</span>
<span class="comment-copy">@jonrsharpe Also thanks a lot for enhancing the formatting of my question I will use your style in other questions I ask.</span>
