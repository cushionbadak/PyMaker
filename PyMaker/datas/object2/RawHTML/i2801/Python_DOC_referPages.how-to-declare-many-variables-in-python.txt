<div class="post-text" itemprop="text">
<p>Here is the letters: </p>
<pre><code>letters='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
</code></pre>
<p>I made a list of it with this:</p>
<pre><code>chars=[]
for i in letters:
  chars.append(i)
</code></pre>
<p>So I have a chars list.</p>
<p>I need to all variables=0 each one to declare.And I wrote that:</p>
<pre><code>for i in chars:
  chars[i]=0;
</code></pre>
<p>But there is an error message, like this:</p>
<pre><code>Traceback (most recent call last):
  File "python", line 15, in &lt;module&gt;
TypeError: list indices must be integers or slices, not str
</code></pre>
<p>The question: how to declare these multiple variables?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use either a list of <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">tuples</a> or a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dict</a>. A simple solution to do it:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; letters = string.ascii_uppercase + string.ascii_lowercase + string.digits
&gt;&gt;&gt; chars = dict.fromkeys(letters , 0)
&gt;&gt;&gt; chars
&gt;&gt;&gt; {...'a': 0, 'b': 0 ....}
</code></pre>
<p>To use list of tuples:</p>
<pre><code>&gt;&gt;&gt; list(chars.items())
&gt;&gt;&gt; [...('a',0), ('b', 0)...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>The Solution</h2>
<p>So, in short, what you want is a dictionary (mapping) of <code>character -&gt; 0</code> for each character in the input.</p>
<p>This is the way to do it:</p>
<pre><code>letters='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
chars = {char: 0 for char in letters}
</code></pre>
<h2>The Problem</h2>
<p>The problem with the original code was that there, <code>chars</code> was a <code>list</code> (because it was created as a list here: <code>chars=[]</code>), and characters were used as its indices.</p>
<p>So, the first time <code>chars[i]=0;</code> was executed (BTW, <code>;</code> is not needed here), <code>i</code> was <code>'A'</code> and <code>chars['A']=0</code> produces the error.</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative to <code>list</code> comprehensions is to use <code>map</code></p>
<pre><code>In [841]: letters='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

In [842]: chars = list(map(lambda l: 0, letters))
</code></pre>
<p>Or if you want a <code>dict</code> like the other answers are suggesting</p>
<pre><code>In [844]: dict(map(lambda l: (l, 0), letters))
</code></pre>
<p>I generally find <code>list</code>/<code>dict</code> comprehensions to both be faster and more readable (to me at least). This is just a different approach</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to create <code>0</code>-list with the length of string <code>letters</code>.</p>
<pre><code>letters='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
chars = [0 for _ in range(len(letters))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you mean this: </p>
<pre><code>letters='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

# dict comprehension
dd = { x:0 for x in list(letters)}; dd
{'A': 0,
 'B': 0,
 'C': 0,
 'D': 0,
 'E': 0,
 'F': 0,
 'G': 0,
 'H': 0,
 'I': 0,
 'J': 0,
 'K': 0,
 'L': 0,
 'M': 0,
 'N': 0,
 'O': 0,
 'P': 0,
 'Q': 0,
 'R': 0,
 'S': 0,
 'T': 0,
 'U': 0,
 'V': 0,
 'W': 0,
 'X': 0,
 'Y': 0,
 'Z': 0,
 'a': 0,
 'b': 0,
 'c': 0,
 'd': 0,
 'e': 0,
 'f': 0,
 'g': 0,
 'h': 0,
 'i': 0,
 'j': 0,
 'k': 0,
 'l': 0,
 'm': 0,
 'n': 0,
 'o': 0,
 'p': 0,
 'q': 0,
 'r': 0,
 's': 0,
 't': 0,
 'u': 0,
 'v': 0,
 'w': 0,
 'x': 0,
 'y': 0,
 'z': 0,
 '0': 0,
 '1': 0,
 '2': 0,
 '3': 0,
 '4': 0,
 '5': 0,
 '6': 0,
 '7': 0,
 '8': 0,
 '9': 0}
</code></pre>
<p>update: </p>
<pre><code>dd['A'] = 13
dd
dd{'A': 13,
 'B': 0,
 'C': 0,
 'D': 0,
 'E': 0,
 'F': 0,
 'G': 0,
 'H': 0,
 'I': 0,
</code></pre>
<p>Or, </p>
<pre><code>list(letters) 
['A',
 'B',
 'C',
 'D',
 'E',
 'F',
 'G',
 'H',
 'I',
 'J',
 'K',
 'L',
 'M',
 'N',
 'O',
 'P',
 'Q',
 'R',
 'S',
 'T',
 'U',
 'V',
 'W',
 'X',
 'Y',
 'Z',
 'a',
 'b',
 'c',
 'd',
 'e',
 'f',
 'g',
 'h',
 'i',
 'j',
 'k',
 'l',
 'm',
 'n',
 'o',
 'p',
 'q',
 'r',
 's',
 't',
 'u',
 'v',
 'w',
 'x',
 'y',
 'z',
 '0',
 '1',
 '2',
 '3',
 '4',
 '5',
 '6',
 '7',
 '8',
 '9']
</code></pre>
</div>
<span class="comment-copy"><code>for i in chars</code>, loops through the <i>items</i> in the list, not the indices, which causes you to index a list with a letter, not an integer.  You probably want, <code>for i, e in enumerate(chars)</code></span>
<span class="comment-copy">I think the root problem here is that you want a dict, not a list. Like this: <code>chars = {}</code>. Then <code>for i in letters: chars[i] = 0</code>.</span>
<span class="comment-copy">Or, if your goal is to count up something per letter, maybe you just wanted <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>chars = collections.Counter()</code></a>. Or, even better, you might even be able to let the <code>Counter</code> do all the counting, like <code>chars = collections.Counter(input_string)</code>.</span>
<span class="comment-copy">I suggest that you work through one or two more tutorials on aggregate data types: list, dict, and string in particular.  I'm not clear on what you want to do, but the way you've tried to do it suggests that things will be <i>much</i> easier with a different data structure.</span>
<span class="comment-copy">Why are you trying to set 62 variables to 0?  What is the final program supposed to do?</span>
<span class="comment-copy">[ 0 for x in letters ]</span>
