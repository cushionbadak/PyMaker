<div class="post-text" itemprop="text">
<p>I faced with this problem in my work code, so I can't show it. But I wrote some short example, which exactly reproduce error and cuts off redundant logic. </p>
<p>Example have two files: <code>Example.py</code> &amp; <code>ImportedExample.py</code>.</p>
<p><strong>Example.py</strong></p>
<pre><code>from multiprocessing import Process
from ImportedExample import Imported

class Example:
    def __init__(self, number):
        self.imported = Imported(number)

def func(example: Example):
    print(example)

if __name__ == "__main__":
    ex = Example(3)

    p = Process(target=func, args=(ex,))
    p.start()
</code></pre>
<p><strong>ImportedExample.py</strong></p>
<pre><code>class Imported:
    def __init__(self, number):
        self.number = number
        self.ref = self.__private_method

    def __private_method(self):
        print(self.number)
</code></pre>
<p>And Traceback looks like this:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File"C:\Python\Python36\lib\multiprocessing\spawn.py", line 105, in spawn_main 
exitcode = _main(fd)
  File "C:\Python\Python36\lib\multiprocessing\spawn.py", line 115, in _main
self = reduction.pickle.load(from_parent)
AttributeError: 'Imported' object has no attribute '__private_method'
</code></pre>
<p>The main detail is that when I make <code>__private_method()</code> non-private (renaming to <code>private_method()</code>), all works fine.</p>
<p>I don't understand why this happens. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>multiprocessing</code> module uses <code>pickle</code> for transferring object between processes.</p>
<p>For an object to be <em>pickable</em>, it has to be accessible by name. Thanks to <a href="https://docs.python.org/3/reference/expressions.html#atom-identifiers" rel="nofollow noreferrer">private name mangling</a>, referenced private methods don’t fall in that category.</p>
<p>I suggest making the method <em>protected</em> – that is naming the method with only one leading underscore. From a global point of view, protected methods shoud be treated just as private methods, but they are not subject of name mangling.</p>
</div>
<span class="comment-copy">There seems to be some issues with pickling.</span>
<span class="comment-copy">Thanks to @pacholik for detailed answer. His explanation cleared everething up for me and his suggestion solved my problem</span>
