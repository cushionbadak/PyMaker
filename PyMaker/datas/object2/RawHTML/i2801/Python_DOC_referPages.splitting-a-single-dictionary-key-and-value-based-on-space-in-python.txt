<div class="post-text" itemprop="text">
<p>I am fairly new to Python and not really sure where to start on this, so please forgive the poor directions. </p>
<p>Say I've got a dictionary: </p>
<pre><code>Dict = {'Name': 'Dr. John Smith'}
</code></pre>
<p>How would I go about splitting that to create:</p>
<pre><code>Dict = {'Title': 'Dr.'
        'First': 'John'
        'Last': 'Smith'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, make sure you don't shadow built-in class names. Here you're using a capital <code>D</code>, but it's close enough to be confusing.</p>
<p>There are various ways to approach the problem, but each will involve splitting your string value in your input dictionary.</p>
<p>You can extract the only value, split it via <code>str.split</code>, then use <code>dict</code> + <code>zip</code> to link a list of keys with values:</p>
<pre><code>d = {'Name': 'Dr. John Smith'}
L = ['Title', 'First', 'Last']

split = next(iter(d.values())).split()
res = dict(zip(L, split))

print(res)

{'Title': 'Dr.', 'First': 'John', 'Last': 'Smith'}
</code></pre>
<p>There are other ways, e.g. via explicitly defining dictionary keys within the <code>{}</code> constructor, or via a dictionary comprehension. The above solution is generic and minimises repeated references.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you want to do this for more than one person, you could store each person as a dictionary like <code>Dicts</code> in a list. This function should do the splitting by spaces and also allows for cases where someone doesn't have a title, i.e., just a first and last name.</p>
<pre><code>def split_names(dict_list):
    l = []
    for dict_i in dict_list:
        new_list = list(dict_i.values())[0].split()
        if len(new_list) == 2:
            l.append(
                {'First': new_list[0],
                 'Last': new_list[1]}
            )
        else:
            l.append(
                {'Title': new_list[0],
                 'First': new_list[1],
                 'Last': new_list[2]}
            )

    return l
</code></pre>
<p>Then,</p>
<pre><code>Dicts = {'Name': 'Dr. John Smith'}
split_names(Dicts)

[{'Title': 'Dr.', 'First': 'John', 'Last': 'Smith'}]
</code></pre>
<p>Or more generally:</p>
<pre><code>Dicts = [{'Name': 'Dr. John Smith'}, {'Name': 'Mr. Mike Jones'}, {'Name': 'John Doe'}]
split_names(Dicts)

[{'Title': 'Dr.', 'First': 'John', 'Last': 'Smith'},
 {'Title': 'Mr.', 'First': 'Mike', 'Last': 'Jones'},
 {'First': 'John', 'Last': 'Doe'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's about splitting a string, not a dictionary key itself. The key's value is of the type string. So this can be done with <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">str.split()</a>.</p>
<pre><code>title, first, last = Dict['Name'].split()
new_dict = {"Title": title, "First": first, "Last": last}
</code></pre>
<p>But you will run into trouble if you cannot split it to three parts, then you have to go deeper and write your own function which also handles more or less spaces in the text (see also update at the end).</p>
<p>But this should serve as a starting point as requested. Also interesting could be <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow noreferrer">str.partition()</a> or using a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a>.</p>
<p><strong>Update:</strong></p>
<p>Here is a solution if you have either 3 name parts or 2 or even 1 without getting into trouble if you have names without title or without title and first name:</p>
<p><a href="https://stackoverflow.com/q/51878354/2648551">zip()-like built-in function filling unequal lengths from left with None value</a></p>
<p>It's not the ultimate solution to all name variants (extra name parts, other permutation etc.) which would be very hard to solve without false positives.</p>
</div>
<span class="comment-copy">This or a similar approach is what a meant by saying <code>But you will run into trouble if you cannot split it to three parts, then you have to go deeper and write your own function which also handles more or less spaces in the text.</code> in <a href="https://stackoverflow.com/a/51867234/2648551">my answer</a>. Thanks for the addition. I think it's helpful to see one approach to this.</span>
<span class="comment-copy">Yes, I after I posted I saw your answer and thought "good timing." The only thing a function like this won't do is return a single dictionary for the case of a single person, as you can see in my first output. I went with list of dictionaries as a better generalization since this would be the easiest way to store it in say JSON format. I was assuming there would be more than one coming in at a time, but if it was just a single dictionary at a time, this would turn it into it's own list which makes adding it to an arbitrary stored list easier.</span>
