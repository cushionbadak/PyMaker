<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33747234/accessing-values-in-nested-dictionary">Accessing values in nested dictionary</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have a huge dictionary called Menu. Here's a snippet of it:</p>
<pre><code>Menu= {
  'Salad': {
    'salad': {
      'PLU': '32',
      'NAME': 'salad',
    }
  },
  'Dessert': {
    'cookie': {
      'PLU': '334',
      'NAME': 'cookie ',
    }
  },
  'Appetizer': {
    'extra sauce': {
      'PLU': '61',
      'NAME': 'extra sauce',
    },
    "French Fries": {
      'PLU': '23',
      'NAME': "french fries",
    },
    'breadsticks': {
      'PLU': '59',
      'NAME': 'breadsticks',
    }

  }
}
</code></pre>
<p>I am trying to get the value of the key by looking for PLU
For example:
If I want 'PLU:59'. I want 'breadsticks' and 'Appetizer' to show up.
So far I can only try fetching the data by manually searching for it.
that is by</p>
<pre><code>print(menu['Salad']['salad']['PLU'])
</code></pre>
<p>Any suggestions will help!
Please feel free to ask me to clarify anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>recursion</code> with a generator to find the path of keys leading to the desired <code>'PLU'</code> value:</p>
<pre><code>menu = {'Salad': {'salad': {'PLU': '32', 'NAME': 'salad'}}, 'Dessert': {'cookie': {'PLU': '334', 'NAME': 'cookie '}}, 'Appetizer': {'French Fries': {'PLU': '23', 'NAME': 'french fries'}, 'breadsticks': {'PLU': '59', 'NAME': 'breadsticks'}, 'extra sauce': {'PLU': '61', 'NAME': 'extra sauce'}}}
def val_exists(d, _target):
  if isinstance(d, dict):
    return any(a == 'PLU' and b == _target if not isinstance(b, dict) else val_exists(b, _target) for a, b in d.items())

def get_values(d, target, level = 0, flag = False):
  if isinstance(d, dict):
    for a, b in d.items():
      if not level and val_exists(b, target):
        yield a
        yield from get_values(b, target, level+1, flag)
      elif a == 'PLU' and b == target:
        flag = True
      elif flag and a == 'NAME':
        yield b
      else:
        yield from get_values(b, target, level, flag)

 print(list(get_values(menu, '59')))
</code></pre>
<p>Output:</p>
<pre><code>['Appetizer', 'breadsticks']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a strictly python solution with your dictionary, you can iterate over all the courses and search for a specific value</p>
<pre><code>from typing import Tuple 

def search_plu(menu: dict, plu: int) -&gt; Tuple[str, str]:
    for course, entries in menu.items():
       for entry, entities in entries.items():
           if entities['PLU'] == plu:
               return entities['NAME'], course
</code></pre>
<p>Note that this solution uses python's <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>type hints</code></a>. You can remove them if you are not using them. </p>
</div>
<div class="post-text" itemprop="text">
<p>Data structures are everything.  You want to eventually have this:</p>
<pre><code>products['59']
</code></pre>
<p>Give you this:</p>
<pre><code>('breaksticks', 'Appetizer')
</code></pre>
<p>So you should make a single pass through your original data structure to create a new one like so:</p>
<pre><code>products = {
    '59': ('breaksticks', 'Appetizer'),
    # and so on
}
</code></pre>
<p>Then you will have efficient lookup by PLU.</p>
</div>
<div class="post-text" itemprop="text">
<p>Solution from <code>pandas</code> </p>
<pre><code>pd.DataFrame(Menu).stack().apply(pd.Series).loc[lambda x : x['PLU']=='59']
Out[143]: 
                              NAME PLU
breadsticks Appetizer  breadsticks  59
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def name_by_plu(menu, PLU):
    for category in menu:
        for item in menu[category]:
            if menu[category][item]['PLU'] == PLU:
                return menu[category][item]['NAME']
    return None

name_by_plu(menu, '59')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Loop through the keys down recursively until you find the right PLU value.</p>
<pre><code>def find_plu(menu, plu):
    for type in menu:
        for dish in type:
            if menu[dish][type]['PLU'] == plu:  return dish, type
</code></pre>
<p>Generally, if you are searching for data in a data structure, you want to loop through it. Access the key directly when you know the path to the key.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may be overkill for this problem, but you could define a recursive function for filtering a nested dictionary for certain key/value pairs and return the segment of the dict that contains them.</p>
<pre><code>def filter_dict(d, key, value):
    if isinstance(d, dict):
        if key in d and d[key] == value:
            return d
        else:
            return {k: fd for k, fd in ((k, filter_dict(v, key, value)) 
                                        for k, v in d.items()) if fd}

res = filter_dict(Menu, "PLU", "59")
# {'Appetizer': {'breadsticks': {'PLU': '59', 'NAME': 'breadsticks'}}}
</code></pre>
<p>This works with arbitrarily nested dicts and with arbitrary keys, and will also handle multiple matches, e.g., if you changed another of the PLU values to <code>59</code>, the result will be</p>
<pre><code>{'Dessert': {'cookie': {'PLU': '59', 'NAME': 'cookie '}},
 'Appetizer': {'breadsticks': {'PLU': '59', 'NAME': 'breadsticks'}}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'll add another <em>general</em> recursive solution to this problem which will work for arbitrary key-value pairs in the data structure you presented.</p>
<pre><code>def getBreadcrumb(node, key, value):
    if key in node:
        if node[key] == value:
            return [key]
        return []
    else:
        for other_key in node:
            result = getBreadcrumb(node[other_key], key, value)
            if result:
                result.append(other_key)
                return result
        return []
</code></pre>
<p>By calling:</p>
<pre><code>result = getBreadcrumb(Menu, 'PLU', '59')
</code></pre>
<p>You'll get the following result:</p>
<pre><code>['PLU', 'breadsticks', 'Appetizer']
</code></pre>
<p>The variable <em>result</em> contains the "breadcrumb" for the answer (the ancestors and the key that contains the value 59). To only get the "ancestors" of "PLU" and display them in the order you asked for, you can do the following:</p>
<pre><code>result = getBreadcrumb(Menu, 'PLU', '59')[1:]
result.reverse()
</code></pre>
<p>Which will give you:</p>
<pre><code>['Appetizer', 'breadsticks']
</code></pre>
</div>
<span class="comment-copy">Do you accept pandas solution</span>
<span class="comment-copy">If you need to look up your data by PLU, why do you store it in this format? The simplest answer would be to have PLU as the first level in your dictionary, and the values be lists of items that have that PLU - do you also need to look up items by category, for example?</span>
<span class="comment-copy">breadsticks is repeated as key &amp; value. What a strange format</span>
<span class="comment-copy">I don't think it's a duplicate of that</span>
<span class="comment-copy">Well I have a lot of code prior to this. I basically get this data by converting a xml file. I wish I could change the format. Thank you for the suggestion tho :) @SpoonMeiser</span>
<span class="comment-copy">agreed - if OP wants a scalable native python solution then better data structure is key.</span>
