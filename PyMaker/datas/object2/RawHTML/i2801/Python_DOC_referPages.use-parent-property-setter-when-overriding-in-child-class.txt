<div class="post-text" itemprop="text">
<p>I have a situation where I am overriding just the setter on a property:</p>
<pre><code>class Parent:
    @property
    def x(self):
        return self.__dict__['x']
    @x.setter
    def x(self, val):
        self.__dict__['x'] = f'P{val}'

class Child(Parent):
    @Parent.x.setter
    def x(self, val):
         super().x = val
         print('all set')
</code></pre>
<p>Here, the print statement represents the processing I want to do after invoking the parent's setter. You can just ignore it. <code>super().x = y</code> is my native attempt at invoking said setter. It fails with</p>
<pre><code>Attribute error: 'super' object has no attribute 'x'
</code></pre>
<p>What is the correct way to use the property setter from the parent class in the child?</p>
<p>I'd prefer to avoid the following, even though it works just fine, since it involves explicitly calling dunder methods:</p>
<pre><code>Parent.x.__set__(self, val)
</code></pre>
<p>As a bonus, is there any way to use <code>super()</code> in the body of the child's setter?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the property's <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">fset</a> function:</p>
<pre><code>class Child(Parent):
    @Parent.x.setter
    def x(self, val):
        Parent.x.fset(self, val)
        print('all set')
</code></pre>
</div>
<span class="comment-copy">One quick way out of this is to define a separate method which the setter actually calls, and then subclasses override that method.</span>
<span class="comment-copy">@metatoaster. That's a good idea. If you draft an answer I'll at least upvote it.</span>
<span class="comment-copy">You could also just manually call the setter out of the parent property, but that’s probably not as understandable as metatoaster’s solution, and won’t automatically handle multiple inheritance the way <code>super</code> does, etc.</span>
<span class="comment-copy">Why not <code>super().__dict__['x'] = val</code>?</span>
<span class="comment-copy">@khachik. The whole point is to avoid re-implementing the parent setter.</span>
