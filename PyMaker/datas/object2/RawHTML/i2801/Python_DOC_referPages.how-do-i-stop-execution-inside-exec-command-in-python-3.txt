<div class="post-text" itemprop="text">
<p>I have a following code:</p>
<pre><code>code = """
print("foo")

if True: 
    return

print("bar")
"""

exec(code)
print('This should still be executed')
</code></pre>
<p>If I run it I get:</p>
<pre><code>Traceback (most recent call last):
  File "untitled.py", line 10, in &lt;module&gt;
    exec(code)
  File "&lt;string&gt;", line 5
SyntaxError: 'return' outside function
</code></pre>
<p>How to force <code>exec</code> stop without errors? Probably I should replace <code>return</code> with something? Also I want the interpreter work after <code>exec</code> call.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here, just do something like this:</p>
<pre><code>class ExecInterrupt(Exception):
    pass

def Exec(source, globals=None, locals=None):
    try:
        exec(source, globals, locals)
    except ExecInterrupt:
        pass

Exec("""
print("foo")

if True: 
    raise ExecInterrupt

print("bar")
""")
print('This should still be executed')
</code></pre>
<p>If your worry is readability, functions are your first line of defense.</p>
</div>
<div class="post-text" itemprop="text">
<p>This will work, return only works from within a defined function:</p>
<pre><code>code = """
print("foo")

if not True:
    print("bar")
"""
exec(code)
print('This should still be executed')
</code></pre>
<p>but if you want to use return, you must do something like:</p>
<pre><code>code = """
def func():
    print("foo")

    if True: 
        return

    print("bar")

func()    
"""
exec(code)
print('This should still be executed')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no built-in mechanism that allows you to abort execution of an <code>exec</code> call. The closest thing we have is <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow noreferrer"><code>sys.exit()</code></a>, but that exits the whole program, not just the <code>exec</code>. Fortunately, this can be worked around with a minor amount of exception handling boilerplate:</p>
<pre><code>my_code = """
import sys

print("foo")

if True: 
    sys.exit()

print("bar")
"""

try:
    exec(my_code)
except SystemExit:
    pass
print('This is still executed')

# output:
# foo
# This is still executed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun, here's another way:</p>
<pre><code>def breakable_exec(code):
    exec('for _ in [0]:' + '\n'.join("    " + line for line in code.splitlines()))

code = """
print("foo")

if True: 
    break

print("bar")
"""

breakable_exec(code)
# =&gt; foo
</code></pre>
</div>
<span class="comment-copy">why are you using <code>exec</code> in the first place?</span>
<span class="comment-copy">Why don't you want to use exceptions?</span>
<span class="comment-copy">I don't want to use exceptions because I want to have an opportunity to keep the generated code readable.</span>
<span class="comment-copy">@Fomalhaut well, unfortunately, this is what one would naturally use. What isn't readable about <code>raise SomeException</code>. Just wrap the whole thing in a function to keep things readable. Exceptions are idiomatic in Python.</span>
