<div class="post-text" itemprop="text">
<p>I'm using Pandas in my code and while manipulating some data frame using the code below:</p>
<pre><code>def exit(exitCode, errorMsg=None, monitor_thread=None):
   if exitCode is not None:
       logger.error(errorMsg)
       logger.error(traceback.format_exc())
   sys.exit(exitCode)

try:
    results['name'] = results['name'].astype(float).astype(int)
except Exception as e:  # catch *all* exceptions
    exit("Failed to convert name" + str(e), 8)
</code></pre>
<p>I get this error:</p>
<blockquote>
<p>Traceback (most recent call last):</p>
<p>File "DIST\FDmanInfo.py", line 206, in </p>
<p>File "DIST\FDmanInfo.py", line 191, in main</p>
<p>File "\local\Python\lib\site-packages\pandas\core\generic.py", line
  3054, in astype
      raise_on_error=raise_on_error, **kwargs)</p>
<p>File "\local\Python\lib\site-packages\pandas\core\internals.py",
  line 3189, in astype</p>
<p>return self.apply('astype', dtype=dtype, **kwargs)</p>
<p>File "\local\Python\lib\site-packages\pandas\core\internals.py",
  line 3056, in apply
      applied = getattr(b, f)(**kwargs)</p>
<p>File "\local\Python\lib\site-packages\pandas\core\internals.py",
  line 461, in astype
      values=values, **kwargs)</p>
<p>File "\local\Python\lib\site-packages\pandas\core\internals.py",
  line 504, in _astype
      values = _astype_nansafe(values.ravel(), dtype, copy=True)</p>
<p>File "\local\Python\lib\site-packages\pandas\types\cast.py", line
  531, in _astype_nansafe
      raise ValueError('Cannot convert NA to integer') ValueError: Cannot convert NA to integer</p>
</blockquote>
<p>and I want to know which row is doing the problem, but I can't find out anywhere how on exception to print it (the row) to log, like it the input dataframe is:</p>
<blockquote>
<pre><code>name
</code></pre>
<p>0  1.0</p>
<p>1  NaN</p>
<p>2  3.0</p>
<p>3  4.0</p>
</blockquote>
<p>I want it to print on the row it fails on, in this case "1  NaN",
is it even possible?</p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use inbuilt python library, <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow noreferrer">traceback</a></p>
<pre><code>import traceback
try:
    results['name'] = results['name'].astype(float).astype(int)
except Exception as e:  # catch *all* exceptions
    tb = traceback.format_exc()
    print(tb)
    exit("Failed to convert name" + str(e), 8)

def exit(exitCode, errorMsg=None, monitor_thread=None):
   if exitCode is not None:
       logger.error(errorMsg)
       logger.error(traceback.format_exc())
   sys.exit(exitCode)
</code></pre>
<p><strong>UPDATE</strong>
Simple example to check how <em>traceback</em> works :</p>
<pre><code>import traceback

try:
    a = [] + None
except Exception as e:
    tb = traceback.format_exc()
    print(tb)
    exit("Failed to convert name" + str(e))


def exit(exitCode):
    print(exitCode)
    print(traceback.format_exc())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/51916311/9209546">@argo's answer</a> suggests how you can adapt your current code.</p>
<p>With Pandas, however, you can simply list values which are non-converted. The trick is to use <code>pd.to_numeric</code>, which has additional options, rather than <code>pd.Series.astype</code>.</p>
<p>For example:</p>
<pre><code>s = pd.to_numeric(results['name'], errors='coerce').astype(int)
failed = results['name'].loc[s.isnull()]
</code></pre>
</div>
<span class="comment-copy">Hi, first of, thank you for your help! I edited my Q, please check it. I already previously used format_exc() in the exit func, if I'll use it the way you did it should I expect the results I what? thanks</span>
<span class="comment-copy">When you are using the <code>traceback.format_exc()</code> as per your format then you can see the error is not propagated. I have updated the answer. Check the difference</span>
<span class="comment-copy">You are absolutely current, in my code the exit definition comes <i>before</i> the try catch, that's why it worked for me..</span>
<span class="comment-copy">Great tip! I'll add it to my code, thanks :)</span>
