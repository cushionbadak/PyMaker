<div class="post-text" itemprop="text">
<p>I am exporting a script I have made in Python that sends commands to IP Addresses of projectors to shut them down. The functionality of the code works, and the projectors will shut down. The list of projectors is stored in a dictionary in a different file to the script to allow it to be edited and accessed by other scripts.</p>
<p>Once I export my script to an exe using Pyinstaller v3.3.1 for Python 3.5.1, the .exe file no longer updates from the .py file that contains the dictionary, and instead has a version already stored in memory that I cannot update.</p>
<p>How can I make the executable file still read from the dictionary and update every time it is run?</p>
<p>Thanks,
Josh</p>
<p>Code:
dictonaryfile.py (reduced for security, but format shown). </p>
<pre><code>projectors = {
    '1': '192.168.0.1'
}
</code></pre>
<p>Script that performs shutdown</p>
<pre><code>from pypjlink import Projector
from file3 import projectors

for item in projectors:
    try:
        myProjector = Projector.from_address(projectors[item])
        myProjector.authenticate('PASSWORD REMOVED FOR SECURITY')
        state = myProjector.get_power()
        try:
            if state == 'on':
                myProjector.set_power('off')
                print('Successfully powered off: ', item)
        except:
            print('The projector in ', item, ', raised an error, shutdown 
may not have occurred')
            continue
    except:
        print(item, 'did not respond to state request, it is likely powered 
off at the wall.')
        continue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you noticed, once an exe is made, you can't update it. A workaround for a problem like this is ask for the location of <code>dictonaryfile.py</code> in your code-</p>
<pre><code>from pypjlink import Projector

projector_location = input('Enter projector file location')
with open(projector_location) as f:
    for line in f:
        # extract data from f
        ....
</code></pre>
<p>For applications like these, it's a good idea to take a configuration file(.ini) and python has <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">Configparser</a> to read from config files. You could create your config file as -</p>
<pre><code>[Projectors]
1 = '192.168.0.1'
2 = '192.168.0.45' # ..and so on
</code></pre>
<p>And read projectors from this file with <code>Configparser</code> - </p>
<pre><code>config = configparser.ConfigParser()
config.read(projector_location)
projectors = config['PROJECTORS']
for k, v in projectors.items():
    # your code here
</code></pre>
</div>
<span class="comment-copy">Do not include that kind of files in the .exe.</span>
