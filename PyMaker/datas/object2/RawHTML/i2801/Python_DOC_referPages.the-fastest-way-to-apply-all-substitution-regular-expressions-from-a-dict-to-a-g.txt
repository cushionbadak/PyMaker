<div class="post-text" itemprop="text">
<p>I have a dict in the form (regexp, substitution_string) and I want to apply all regular expressions from this dict to the text (the order of operations doesn't matter). Now I have something along these lines:</p>
<pre><code>EMOTICON_REGEXPS = {
   r'(:D|;D|:-D|;-D|&lt;3|:\*)': ' EMOJIPOS ',
   r'[:|;]?(\))\1+': ' EMOJIPOS ',
   r'[:|;]?(\()\1+': ' EMOJINEG ',
}

def replace_emoticons(text):
    text_no_emoticons = text
    for (regexp, emoticon) in EMOTICON_REGEXPS_:
        text_no_emoticons = re.sub(regexp, emoticon, text_no_emoticons)
    return text_no_emoticons
</code></pre>
<p>Is there any faster/shorter way to do the same thing? I also know about</p>
<pre><code>reduce(lambda t, (regex, emoticon): re.sub(regex, emoticon, t), 
       EMOTICON_REGEXPS, text)
</code></pre>
<p>but that doesn't appear to be any faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can merge all your regexps in one and do all the replacements in one call to <code>re.sub</code> (with a <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">function</a> as replacement) instead of several times in a loop:</p>
<pre><code>import re
EMOTICON_REGEXPS = {
   r':D|;D|:-D|;-D|&lt;3|:\*': ' EMOJIPOS ',
   r'[:|;]?\)+': ' EMOJIPOS ',
   r'[:|;]?\(+': ' EMOJINEG ',
}
emojis = EMOTICON_REGEXPS.values()
def replace_emoticons(text):
    def replace(m):
        for i in range(len(emojis)):
            if m.group(i + 1):
                return emojis(i)
    return re.sub('|'.join('({})'.format(r) for r in EMOTICON_REGEXPS), replace, text)
</code></pre>
</div>
<span class="comment-copy">Could you please elaborate more on your code -- why do you pass function as a second argument to re.sub and what does m.group(I + 1) operation mean? Is there any simpler way to do the same like it's done in this code <a href="https://gist.github.com/carlsmith/b2e6ba538ca6f58689b4c18f46fef11c" rel="nofollow noreferrer">gist.github.com/carlsmith/b2e6ba538ca6f58689b4c18f46fef11c</a> ?</span>
<span class="comment-copy">You need a function as a second argument to <code>re.sub</code> because the replacement string depends on what's matched. The code you link to does the same, but it uses a dict for replacement lookup. You can't use a dict for replacement lookup because you have a pattern of variable length (that matches arbitrarily long string of <code>)</code>s for example).</span>
<span class="comment-copy">I measured the time, your method was slightly slower.</span>
<span class="comment-copy">There's an overhead in calling the replacement function, so my solution is suitable if you have a large number of patterns, such that the number of iterations in your loop would cost more than the overhead in my solution. As it is, you only have 3 different patterns, so the overhead of my solution may not be worth the cost.</span>
