<div class="post-text" itemprop="text">
<p>I'm a beginner Python coder and I'm very unsure on how to create a simple shell program that accepts commands (ex. printrecipes, printinventory, load etc.)</p>
<p>The input should look like:</p>
<p>$ loadrecipes </p>
<p>$ printmoney()</p>
<p>20</p>
<p>For this shell, I'm trying to use a while loop so it continues through the program without crashing even if they input a command that is acceptable.</p>
<pre class="lang-py prettyprint-override"><code>def handle_commands():
    keep_going=True
    command=input("$" + " ")
    while keep_going:
        if command == '$ quit':
            keep_going = False
            break
        elif command == "$ loadrecipefile(recipe_file)"
            j
        elif command == "$ printrecipes":
            printrecipes()
        elif command == "$ printiinventory":
            printiinventory()
        elif command == "$ printmoney":
            printmoney()
        elif command == "$ buyingredient":
</code></pre>
<p>I have no idea what to go from here. 
The commands are that loadrecipes(recipe_file) takes in one argument, all print commands don't take an argument, buyingredient(ingredient_name, number:int) takes in 2 arguments (the ingredient name and how many of those ingredients).</p>
<p>So, for each command I have created a function in correspondence. Such as for printiinventory() I have:</p>
<pre class="lang-py prettyprint-override"><code>def printiinventory():
  print(iinventory['apple'],iinventory['beets'],iinventory['carrots'])
</code></pre>
<p>so if the command is:</p>
<p>$ printiinventory</p>
<p>0 4 3</p>
<p>it should come out to be like this</p>
</div>
<div class="post-text" itemprop="text">
<p>So your flow should look like this:</p>
<pre><code>while True:
    command = input("$ ")
    if command is ...
    elif ...:
</code></pre>
<p>Very similar to what you have, with the difference that you don't need to expect <code>$</code> into the user's input. Input function prints the argument passed and returns SOLELY the user's input, not the rest of the content in the same line. So you should check for commands like <code>command == "printrecipes"</code>, etc.</p>
<p>Explanation:</p>
<p>This piece of code:</p>
<pre><code>x = input(str)
</code></pre>
<p>Is equivalent to:</p>
<pre><code>print(str); x = input(str)
</code></pre>
<p>with the only difference that print() creates a new line, so the input will be taken from the line just below the printed content.</p>
<p>You could emulate this behaviour (the printing in the same line, that is) with the IO low-level Python modules, but there is no need when you can do just that.</p>
<h3>Edit</h3>
<p>In order to parse the commands, you can opt for the classical command line interface syntax, that separates command name and argument with spaces, or you could make your own parser. In case you go for the first, you could use Python's built-in <code>argparse</code> module. In case you'd rather use the second (which is more of a headache, especially if you are a starter), you have to write your own parser from scratch. Is not that big of a deal if you know regex, but I'm afraid that's a different question you should ask in the site. I would recommend you to take a look at some tutorials. Just googling: "make my own command parser python" gives you thousands of results, even though most of them will go for classic command line parsing syntax.</p>
<h3>Edit 2</h3>
<p>I've noticed you use some sort of flag to check if you need to keep going inside the loop. That is useless in the piece of code you use; just use <code>break</code> command and you're good to go.</p>
<h3>Edit 3</h3>
<p>Taking a close look at the OP's comments, I see you are trying to write Python code to be executed by a Python script. You can for sure do that; you've got the <code>eval</code> and <code>exec</code> modules, BUT note that this is a very risky practice, code can very easily be injected into your program, causing huge security holes. It is highly discouraged to do that. You have to separate command parsing from task executing. The user cannot ever have direct access to the control flow of the program.</p>
</div>
<span class="comment-copy">You might find the <a href="https://docs.python.org/3/library/cmd.html" rel="nofollow noreferrer">cmd</a> library a good starting point for this.</span>
<span class="comment-copy">Note that, as I explained in the last edit to my answer, it is not recommended to intend to evaluate raw Python code from a user interface tool. You should separate the parsing part from the execution part. As mentioned by @DavidMaze and other users, you have several tools to build command line interfaces, such as <code>cmd</code></span>
<span class="comment-copy">Okay so if the command is buyingredients for example and that has two arguments, the user should be able to input: buyingredients('apples',5) would that still work in this example. And for each command I have a function with it, so if they put in loadrecipes, the loadrecipes function should be called/run</span>
<span class="comment-copy">Usually command line interfaces do not require that kind of syntax, but rather separating arguments with spaces amongst them and to the main command name. You can still parse your code like that with regex, but if you do it as I tell you, you have Python built-in command line parsers. Let me look for them.</span>
<span class="comment-copy">@J.C.Rocamonde perhaps <a href="https://docs.python.org/3/library/cmd.html" rel="nofollow noreferrer">docs.python.org/3/library/cmd.html</a> - that's designed to allow you to customise an interface to the interpreter...</span>
<span class="comment-copy">@JonClements I was not aware of that tool - thank you for sharing :)</span>
<span class="comment-copy">Pretty much overkill for a lot of things but occasionally useful... The OP here could adapt the turtle shown for example for their own functions and still utilise the ability to use the syntax (or close to it) they'd like.</span>
