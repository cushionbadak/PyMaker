<div class="post-text" itemprop="text">
<p>I have this pyhton script which works with no problem on ubuntu 16.04
But it wont get data in ubuntu 18.04, any idea what the problem could be?
No errors.</p>
<pre><code>    try:
        exchrate=float(json.loads(requests.get("http://api.coindesk.com/v1/bpi/currentprice.json").read())['bpi'][currency]['rate_float'])
        print exchrate
    except:
            try:
                print("Can not get data from coindesk.com")
                print("Trying to get data from coinbase.com")
                exchrate=float(json.loads(urllib2.urlopen("https://api.coinbase.com/v2/exchange-rates?currency=BTC").read())["data"]["rates"][currency])
                print exchrate
            except:
                try:
                    print("Can not get data from coinbase.com")
                    print("Trying to get data from blockchain.info")
                    exchrate=float(json.loads(urllib2.urlopen("https://blockchain.info/ticker").read())[currency]["last"])
                    print exchrate
                except:
                    print("Can not get data from blockchain.info")
                    print("Failed to get BTC exchange rate")
                    sys.exit()
</code></pre>
<p>Output:</p>
<pre><code>Can not get data from coindesk.com
Trying to get data from coinbase.com
Can not get data from coinbase.com
Trying to get data from blockchain.info
Can not get data from blockchain.info
Failed to get BTC exchange rate
</code></pre>
<p>Full code is here : <a href="https://github.com/papampi/nvOC_by_fullzero_Community_Release/blob/Dual-cuda/WTM_SWITCHER" rel="nofollow noreferrer">https://github.com/papampi/nvOC_by_fullzero_Community_Release/blob/Dual-cuda/WTM_SWITCHER</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using the Requests library, you should use it on each API. Requests provides a method to extract JSON, so you don't need to call the <code>json</code> module yourself.</p>
<p>When multiple things can go wrong, it's not a good idea to bundle them all together in one line. Do them in stages so you can see exactly where the error occurred, and deal it with it appropriately. Also, using unnamed <code>except</code> blocks is rarely a good idea: you might catch something that you don't know how to handle.</p>
<p>Here's a re-organized version of your code.</p>
<pre><code>import requests

currency = "USD"

apis = [
    {
        "name": "coindesk.com",
        "url": "https://api.coindesk.com/v1/bpi/currentprice.json",
        "keys": ("bpi", currency, "rate_float"),
    },
    {
        "name": "coinbase.com",
        "url": "https://api.coinbase.com/v2/exchange-rates?currency=BTC",
        "keys": ("data", "rates", currency),
    },
    {
        "name": "blockchain.info",
        "url": "https://blockchain.info/ticker",
        "keys": (currency, "last"),
    },
]

for d in apis:
    name, url, keys = d["name"], d["url"], d["keys"]
    print("Trying", name)
    try:
        req = requests.get(url)
        req.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(e)
        print("Cannot get data from", name)
        continue

    try:
        # Extract the exchange rate
        data = req.json()
        for k in keys:
            data = data[k]
    except KeyError as e:
        print("Bad key!:", e)
        continue

    try:
        # Convert the exchange rate to a float.
        # Some APIs return it as a float, but coinbase.com returns
        # a string. This code also handles None, which in JSON is null
        # If you just want to print the rate, this conversion is not needed.
        rate = float(data) 
        print("Rate", rate)
        break
    except (ValueError, TypeError) as e:
        print("Invalid exchange rate data", data, type(data))
else:
    print("Failed to get BTC exchange rate")
</code></pre>
<p><strong>typical output</strong></p>
<pre><code>Trying coindesk.com
Rate 6440.64
</code></pre>
<p><strong>Update:</strong> I've improved the error-handling of this code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Requests is able to <a href="http://docs.python-requests.org/en/master/user/quickstart/#json-response-content" rel="nofollow noreferrer">parse the JSON for you</a>. Try this:</p>
<pre><code>response = requests.get("http://api.coindesk.com/v1/bpi/currentprice.json")
rate_float = response.json()['bpi']["USD"]['rate_float']
print(rate_float)
</code></pre>
<p>Output:</p>
<pre><code>6366.6563
</code></pre>
<p><strong>Edit:</strong></p>
<blockquote>
<p>No errors...</p>
</blockquote>
<p>You silently swallow any error thrown. That's a bad idea, especially when you try to debug. Don't do this:</p>
<pre><code>try:
    this_breaks()
except:
    try_other_thing()
</code></pre>
<p>You will never know <strong>why</strong> <code>this_breaks()</code> broke exactly. Either don't use <code>try/except</code> and let the exception appear, or at least print it:</p>
<pre><code>try:
    this_breaks()
except Error as e:
    print("error: ", e)
    try_other_thing()
</code></pre>
<p>See <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html#handling-exceptions</a></p>
</div>
<span class="comment-copy">currency is read from cfg file, its usually USD</span>
<span class="comment-copy">Thanks. it looks nice, but give some errors when a link is not responding.</span>
<span class="comment-copy">@papampi It should print an error message if a link doesn't respond and then try the next URL. If you don't want to see that error message, just delete or comment-out the <code>print(e)</code> line. But I recommend printing info like that while you're still working on the script. It's almost always better to have some superfluous debugging info than not enough debugging info. I spent a few minutes testing this code (eg, with malformed URLs), but you should probably do more extensive tests to make sure that it can handle all possible error conditions.</span>
<span class="comment-copy">It just exits on some errors, for example try a broken link like: 1api.coindesk.com instead of api.coindesk.com ...</span>
<span class="comment-copy">@papampi That's weird. On my system it doesn't "just exit" on that bad URL, it prints a whole bunch of Exception messages. Anyway, I've fixed that by using the generic Requests exception that all Requests exceptions inherit from. I've also added some error handling that should cope with any bad exchange rate data.</span>
<span class="comment-copy">@papampi That's cool, but when you use other people's code verbatim you should give them attribution (mention their name). The bottom of every Stack Overflow page says "user contributions licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/" rel="nofollow noreferrer">cc by-sa 3.0</a> with attribution required". At a minimum, that means you're supposed to mention the code author's name, and Stack Overflow. Please see <a href="https://stackoverflow.blog/2009/06/25/attribution-required/">Attribution Required</a> and <a href="https://stackoverflow.com/legal/terms-of-service#licensing">legal</a> for further details.</span>
