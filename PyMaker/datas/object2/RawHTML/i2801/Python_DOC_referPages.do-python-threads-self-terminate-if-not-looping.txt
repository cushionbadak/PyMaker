<div class="post-text" itemprop="text">
<p>Do threads in python self terminate if they are not looping? </p>
<p>My google-foo is garbage today apparently. But basically: I have a little thermal printer running on a pi, which is also hosting a webhook for an alexa service. the printer needs to run at the same time the alexa is speaking. Each time the launch function is called it fires off the thread and does its thing. i don't want to block the main program, but is this going to spawn a bunch of forever threads? Or do they just finish their task and then stop? Also this is super brute force. </p>
<pre><code>def printFortune():
    fortune = makeFortune()
    print("printFortune!",fortune)
    printer.println(fortune[0])
    printer.println()
    printer.println(fortune[1])
    printer.println()
    printer.println(fortune[2])
    printer.println()
    printer.feed(3)
    printer.setDefault()

### APP THINGS #####################

@app.route('/',methods=['GET','POST'])
def index():
    return "hello! This is an alexa test."

### ALEXA THINGS #####################

@ask.on_session_started
def new_session():
    log.info('new session started')
    log.info(request.locale)
    beep = request.locale
    print(beep)

@ask.launch
def launch():
    t = Thread(target=printFortune)
    t.start()
    to_say = "This is a very long response that is not the response that's being printed" 
    return statement(to_say)


@ask.intent('AMAZON.HelpIntent')
def help():
    return question("helping").reprompt("helping")

@ask.intent('AMAZON.StopIntent')
def stop():
    return statement("stopping")

@ask.intent('AMAZON.CancelIntent')
def cancel():
    return statement("canceling")

@ask.session_ended
def session_ended():
    log.debug("Session Ended")
    print("session ended")
    return "{}", 200

if __name__ == '__main__':
    app.config['ASK_VERIFY_REQUESTS'] = False
    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation:  </p>
<blockquote>
<p>Once the thread’s activity is started, the thread is considered
  ‘alive’. It stops being alive when its run() method [or target method]
  terminates – either normally, or by raising an unhandled exception.</p>
</blockquote>
<p>See:  <a href="https://docs.python.org/3.7/library/threading.html#threading.Thread.run" rel="nofollow noreferrer">https://docs.python.org/3.7/library/threading.html#threading.Thread.run</a></p>
<p>In the context of your example, each thread you create will terminate when the <code>printFortune()</code> method for that thread completes (or throws an exception). </p>
</div>
<div class="post-text" itemprop="text">
<p>From the official documentation on <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer">Threading</a>:</p>
<blockquote>
<p>Once the thread’s activity is started, the thread is considered ‘alive’. It stops being alive when its run() method terminates – either normally, or by raising an unhandled exception. The is_alive() method tests whether the thread is alive.</p>
</blockquote>
<p>So to answer your question, your Thread objects will terminate when their corresponding <code>run()</code> methods terminate. You can use <code>threading.Thread.is_alive()</code> to determine if the thread's <code>run()</code> method has completed. </p>
<p>The documentation goes on to discuss the differences between normal threads and Daemon threads (which do have a difference in termination strategies) but that doesn't seem applicable with the example you posted.</p>
</div>
<span class="comment-copy">Be aware of the <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">global interpreter lock</a>. Unless you need the two components to communicate somehow, you're almost certainly better off just segregating the two components into separate processes. (And segregation is something to strongly consider even if they do need to communicate.)</span>
<span class="comment-copy">Your example code is missing all of its imports, making it difficult to tell what functions and objects are coming from where. <code>app</code> is not initialized anywhere. Please don't post broken code samples.</span>
