<div class="post-text" itemprop="text">
<p>When I create a string containing backslashes, they get duplicated:</p>
<pre><code>&gt;&gt;&gt; my_string = "why\does\it\happen?"
&gt;&gt;&gt; my_string
'why\\does\\it\\happen?'
</code></pre>
<p>Why?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are seeing is the <em>representation</em> of <code>my_string</code> created by its <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="noreferrer"><code>__repr__()</code></a> method. If you print it, you can see that you've actually got single backslashes, just as you intended:</p>
<pre><code>&gt;&gt;&gt; print(my_string)
why\does\it\happen?
</code></pre>
<p>The string below has <em>three</em> characters in it, not four:</p>
<pre><code>&gt;&gt;&gt; 'a\\b'
'a\\b'
&gt;&gt;&gt; len('a\\b')
3
</code></pre>
<p>You can get the standard representation of a string (or any other object) with the <a href="https://docs.python.org/3/library/functions.html#repr" rel="noreferrer"><code>repr()</code></a> built-in function:</p>
<pre><code>&gt;&gt;&gt; print(repr(my_string))
'why\\does\\it\\happen?'
</code></pre>
<p>Python represents backslashes in strings as <code>\\</code> because the backslash is an escape character - for instance, <code>\n</code> represents a newline, and <code>\t</code> represents a tab.</p>
<p>This can sometimes get you into trouble:</p>
<pre><code>&gt;&gt;&gt; print("this\text\is\not\what\it\seems")
this    ext\is
ot\what\it\seems
</code></pre>
<p>Because of this, there needs to be a way to tell Python you <em>really</em> want the two characters <code>\n</code> rather than a newline, and you do that by escaping the backslash itself, with another one:</p>
<pre><code>&gt;&gt;&gt; print("this\\text\is\what\you\\need")
this\text\is\what\you\need
</code></pre>
<p>When Python returns the representation of a string, it plays safe, escaping all backslashes (even if they wouldn't otherwise be part of an escape sequence), and that's what you're seeing. However, the string itself contains only single backslashes.</p>
<p><em>More information about Python's string literals can be found at: <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer">String and Bytes literals</a> in the Python documentation.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/a/24085681/908494">Zero Piraeus's answer</a> explains, using single backslashes like this (outside of <a href="http://stackoverflow.com/questions/2081640">raw string literals</a>) is a bad idea.</p>
<p>But there's an additional problem: in the future, it will be an error to use an undefined escape sequence like <code>\d</code>, instead of meaning a literal backslash followed by a <code>d</code>. So, instead of just getting lucky that your string happened to use <code>\d</code> instead of <code>\t</code> so it did what you probably wanted, it will definitely not do what you want.</p>
<p>As of 3.6, it already raises a <code>DeprecationWarning</code>, although most people don't see those. It will become a <code>SyntaxError</code> in some future version.</p>
<hr/>
<p>In many other languages, including C, using a backslash that doesn't start an escape sequence means the backslash is ignored.</p>
<p>In a few languages, including Python, a backslash that doesn't start an escape sequence is a literal backslash.</p>
<p>In some languages, to avoid confusion about whether the language is C-like or Python-like, and to avoid the problem with <code>\Foo</code> working but <code>\foo</code> not working, a backslash that doesn't start an escape sequence is illegal.</p>
</div>
<span class="comment-copy">I've tried to keep this answer focussed specifically on the "double backslash" misunderstanding, but it's also useful to know about <a href="http://stackoverflow.com/questions/2081640">raw string literals</a>.</span>
