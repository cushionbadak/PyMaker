<div class="post-text" itemprop="text">
<p>Redirecting the output of normal logging works fine:</p>
<pre><code>import contextlib
import io
import logging

std_out_capture = io.StringIO()
with contextlib.redirect_stderr(std_out_capture):
    logging.error('Hi.')

output = std_out_capture.getvalue()
print(f'output: {output}')
</code></pre>
<p>output:</p>
<pre><code>output: ERROR:root:Hi.
</code></pre>
<p>However when changing the log format using <code>logging.basicConfig</code></p>
<pre><code>import contextlib
import io
import logging

log_format = '[%(threadName)s] [%(levelname)s] %(message)s'
logging.basicConfig(format=log_format)

std_out_capture = io.StringIO()
with contextlib.redirect_stderr(std_out_capture):
    logging.error('Hi.')

output = std_out_capture.getvalue()
print(f'output: {output}')
</code></pre>
<p>the output is:</p>
<pre><code>output: 
[MainThread] [ERROR] Hi.
</code></pre>
<p>So the output is not captured any more.</p>
<p>My guess is this is because</p>
<blockquote>
<p>logging.basicConfig(**kwargs): Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger.</p>
</blockquote>
<p>(<a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="nofollow noreferrer">https://docs.python.org/3/library/logging.html#logging.basicConfig</a>)</p>
<p>and <code>StreamHandler</code> is working in a separate thread, so it's output is not captured.</p>
<p>For unit testing I would like to capture it anyways. How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll have to pull the logging configuration into the <code>with</code> statement-body so <code>StreamHandler</code> already gets initialized with the altered <code>stderr</code>: </p>
<pre><code>import contextlib
import io
import logging

std_out_capture = io.StringIO()
with contextlib.redirect_stderr(std_out_capture):
    log_format = '[%(threadName)s] [%(levelname)s] %(message)s'
    logging.basicConfig(format=log_format)
    logging.error('Hi.')

output = std_out_capture.getvalue()
print(f'output: {output}')
# output: [MainThread] [ERROR] Hi.
</code></pre>
</div>
