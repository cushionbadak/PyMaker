<div class="post-text" itemprop="text">
<p>I have a column with dates in object type</p>
<p><code>&gt; df['created_at_first']</code></p>
<p>Thats the result</p>
<pre><code>created_at_first
2018-07-01 02:08:06
2018-06-05 01:39:30
2018-05-16 21:18:48
</code></pre>
<p>I would like to create new columns for year, month, day, hour.
So I get something like that:</p>
<pre><code>year  month  day  hour 
2018   07    01   02
2018   06    05   01
2018   05    16   21
</code></pre>
<p>How can I manage it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try using <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.strftime.html#pandas-series-dt-strftime" rel="nofollow noreferrer"><code>strftime</code></a> and then to split on <code>'-'</code> as given inside <code>strftime('%Y-%m-%d-%H')</code> function. The code: </p>
<pre><code>created_at_first=["2018-07-01 02:08:06","2018-06-05 01:39:30","2018-05-16 21:18:48"]
df=pd.DataFrame({'ColumnName':created_at_first})
df['ColumnName']= pd.to_datetime(df['ColumnName'])

df2 = pd.DataFrame(df.ColumnName.dt.strftime('%Y-%m-%d-%H').str.split('-').tolist(),
                   columns=['Year','Month','Day','Hour'],dtype=int)
df2
    Year Month Day Hour
0   2018    07  01   02
1   2018    06  05   01
2   2018    05  16   21
</code></pre>
<p>If you want all the columns in a single dataframe use <code>pd.concat()</code> along <code>axis=1</code>.</p>
<pre><code>pd.concat((df,df2),axis=1)
    ColumnName          Year Month Day Hour
0   2018-07-01 02:08:06 2018    07  01   02
1   2018-06-05 01:39:30 2018    06  05   01
2   2018-05-16 21:18:48 2018    05  16   21
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe:</p>
<pre><code>df['created_at_first'] = pd.to_datetime(df['created_at_first'])
df['year'] = df['created_at_first'].dt.year
df['month'] = df['created_at_first'].dt.month
df['day'] = df['created_at_first'].dt.day
df['hour'] = df['created_at_first'].dt.hour
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One flexible approach is to use <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow noreferrer"><code>operator.attrgetter</code></a> with <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="nofollow noreferrer"><code>pd.concat</code></a>. Such an approach enables you to specify an arbitrary list of properties, which are then extracted via the <a href="https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.Series.dt.html" rel="nofollow noreferrer"><code>pd.Series.dt</code></a> accessor.</p>
<pre><code>fields = ['year', 'month', 'day', 'hour']

res = pd.concat(attrgetter(*fields)(df['dates'].dt), axis=1, keys=fields)

print(res)

   year  month  day  hour
0  2018      7    1     2
1  2018      6    5     1
2  2018      5   16    21
</code></pre>
<p><strong>Setup</strong></p>
<pre><code>import pandas as pd
from operator import attrgetter

df = pd.DataFrame({'dates': ['2018-07-01 02:08:06',
                             '2018-06-05 01:39:30',
                             '2018-05-16 21:18:48']})

df['dates'] = pd.to_datetime(df['dates'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>DatetimeIndex</code> will be helpful to get required result</p>
<pre><code>created_at_first=["2018-07-01 02:08:06","2018-06-05 01:39:30","2018-05-16 21:18:48"]
import pandas as pd 
df=pd.DataFrame({'ColumnName':created_at_first})
df['year'] = pd.DatetimeIndex(df['ColumnName']).year
df['month'] = pd.DatetimeIndex(df['ColumnName']).month
df['day'] = pd.DatetimeIndex(df['ColumnName']).day
df['hour'] = pd.DatetimeIndex(df['ColumnName']).hour
</code></pre>
<p>official Document: <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DatetimeIndex.html" rel="nofollow noreferrer">https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DatetimeIndex.html</a></p>
<p>output:</p>
<pre><code>            columnName  year  month  day  hour
0  2018-07-01 02:08:06  2018      7    1     2
1  2018-06-05 01:39:30  2018      6    5     1
2  2018-05-16 21:18:48  2018      5   16    21
</code></pre>
</div>
<span class="comment-copy">I will try this next time, thanks!</span>
<span class="comment-copy">I wouldn't recommend this method as your split series will be of dtype <code>object</code>, generally inefficient in Pandas. You could convert back to <code>int</code>, but that raises the question why go from <code>datetime</code> -&gt; <code>str</code> -&gt; <code>int</code>?</span>
<span class="comment-copy">@jpp I accept that it is not the best solution, but initially when I answered the other solutions were breaking down each element manually. So thought why not break them all at once (DateTime elements). Also, I forgot that <code>strftime</code> gives output as <code>object</code> datatype added <code>dtype=int</code>. I appreciate your time and knowledge to write the comment. Thank you.</span>
<span class="comment-copy">while executing the first line I am getting this error: KeyError: 'created_at_first'</span>
<span class="comment-copy">@Michel Remember to put the column in the dataframe, hope that helps</span>
<span class="comment-copy">@Michel And the column has to have the right name</span>
<span class="comment-copy">Maybe becuase created_at_first is a object.</span>
<span class="comment-copy">It worked! Many thanks :).</span>
<span class="comment-copy">I will check it, thanks!</span>
