<div class="post-text" itemprop="text">
<p>I've just installed Python 3.7 and faced an error with dir() in <code>inspect</code> module. Please consider this minimum example.</p>
<p>1) Create a module <code>testdir</code> that has one line:</p>
<pre><code>__dir__ = 'bla'
</code></pre>
<p>2) in python:</p>
<pre><code>import testdir
dir(testdir)
</code></pre>
<p>results in this error in Python 3.7</p>
<pre><code>Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
</code></pre>
<p>and runs normally in Python 3.6:</p>
<pre><code>['__builtins__', '__cached__', '__dir__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']
</code></pre>
<p>I understand that dir() expects <code>__dir__</code> to be a function but in <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer">the docs</a> this is not a must but rather a condition and the docs provide no difference in respect to 3.x vs 3.7. Why the behaviour is different? Is it a bug or a feature?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The relevant PEP (<a href="https://www.python.org/dev/peps/pep-0562/" rel="nofollow noreferrer">PEP 562</a>) actually contains the specification:</p>
<blockquote>
<p>The <code>__dir__</code> function should accept no arguments, and return a list of strings that represents the names accessible on module:</p>
<pre><code>def __dir__() -&gt; List[str]: ...
</code></pre>
<p>If present, this function overrides the standard dir() search on a module.</p>
</blockquote>
<p>The difference is that <code>__dir__</code> in a module was simply ignored until Python 3.7. Given that double underscore names <strong>must</strong> be used according to Pythons specification it's not necessary to include a deprecation (for the changed behavior) there because <code>__dir__</code> as string was simply not according to the specification.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.7 now also allows <a href="https://docs.python.org/3/whatsnew/3.7.html#pep-562-customization-of-access-to-module-attributes" rel="nofollow noreferrer"><code>__dir__</code> to be defined on modules</a>. Previously it was simply ignored. The conditional part is that <em>if</em> <code>__dir__</code> is defined, it <em>must</em> be a callable, but it is <em>not required to be defined</em>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/whatsnew/3.7.html#pep-562-customization-of-access-to-module-attributes" rel="nofollow noreferrer">docs.python.org/3/whatsnew/â€¦</a></span>
<span class="comment-copy">deceze: thanks for the link! It explains. The implementation of that PEP 562 should check if <code>__dir__</code> is callable, but its too late now, I have to work on this 'improvement'.</span>
<span class="comment-copy">still, the implementation could have checked if <code>__dir__</code> is callable</span>
