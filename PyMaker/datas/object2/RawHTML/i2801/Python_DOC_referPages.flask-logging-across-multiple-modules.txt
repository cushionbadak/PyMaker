<div class="post-text" itemprop="text">
<p>I have the following directory structure in Flask and I am trying to add logging to this system. My APIs are defined in <code>main.py</code> and <code>backend.py</code> provides some backend logic to the APIs.</p>
<pre><code>├── README.md
├── __init__.py
├── main.py
├── module
│   ├── __init__.py
│   └── backend.py
</code></pre>
<p>My APIs are defined in <code>main.py</code> and logging related components in the file are as below:</p>
<pre><code>from logging.config import dictConfig
import logging
from module import backend

log_level = "DEBUG"
LOGFILENAME = "flask.log"
dictConfig({
    'version': 1,
    'formatters': {'default': {
        'format': '[%(asctime)s] {%(pathname)s:%(funcName)s:%(lineno)d} %(levelname)s - %(message)s',
    }},
    'handlers': {'default': {
                'level': 'DEBUG',
                'formatter': 'default',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': LOGFILENAME,
                'maxBytes': 5000000,
                'backupCount': 10
            }},
    'root': {
        'level': log_level,
        'handlers': ['default']
    }
})

app = Flask(__name__)
logger = logging.getLogger(__name__)

@app.route('/')
def hello():
    logger.debug("DEBUG: Inside the home function")
    logger.info("INFO: Inside the home function")
    backend.test()
    return "Welcome"
</code></pre>
<p>Logging works as expected in main.py. Depending on the <code>log_level</code>, logs get written to <code>LOGFILENAME</code>.</p>
<p>Problems occur when I try to enable logging via the below steps inside of backend.py.</p>
<pre><code>import logging
logger = logging.getLogger(__name__)

def test():
    logger.info("info test")
    logger.debug("debug test")
</code></pre>
<p>I do not see any logs from <code>backend.py</code> getting written to <code>flask.log</code>. I sense I am missing something but do not understand what. Any help appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your library does have a different logger name. For both you need to have the same logger name. See for example <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-logging-in-multiple-modules" rel="nofollow noreferrer">the logging cookbook</a>.</p>
<p>The best practice is that you create your own logging hierarchy, for example "myapp" in main.py (<code>logger = logging.getLogger("myapp")</code>) and attach to this in backend.py with for example <code>myapp.backend</code> (<code>logger = logging.getLogger(".".join("myapp", __name__))</code>. </p>
<p>Find below a slightly modified version of your main.py and backend.py. I have removed the Flask part. I guess this does not affect the logging mechanics.</p>
<h3>main.py</h3>
<pre><code>import logging.config

from module import backend

dict_config = {
    'version': 1,
    'formatters': {
        'default': {
            'format': '[%(asctime)s] {%(pathname)s:%(funcName)s:%(lineno)d} %(levelname)s - %(message)s',
        }
    },
    'handlers': {'default': {
        'level': 'DEBUG',
        'formatter': 'default',
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': "test.log",
        'maxBytes': 5000000,
        'backupCount': 10
    },
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',
            'formatter': 'default',
        },
    },
    'loggers': {
        'myapp': {
            'handlers': ["default"],
            'level': 'DEBUG',
        },
    },
    'root': {
        'handlers': ["console"],
        'level': 'DEBUG',
    },
}

print(__name__)
logger = logging.getLogger("myapp")
logging.config.dictConfig(dict_config)


def hello():
    logger.debug("DEBUG: Inside the home function")
    logger.info("INFO: Inside the home function")
    backend.test()
    return "Welcome"


print(hello())
</code></pre>
<h3>backend.py</h3>
<pre><code>import logging
logger = logging.getLogger("myapp")

def test():
    logger.info("info test")
    logger.debug("debug test")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think I found the fix to my problem. Given below is my updated <code>main.py</code> and <code>backend.py</code> and is comfirmed working</p>
<p><strong>main.py</strong></p>
<pre><code>import logging
from module import backend

log_level = "DEBUG"
LOGFILENAME = "flask.log"
class LoggerConfig:
    dictConfig = {
        'version': 1,
        'formatters': {'default': {
            'format': '[%(asctime)s] {%(pathname)s:%(funcName)s:%(lineno)d} %(levelname)s - %(message)s',
        }},
        'handlers': {'default': {
                    'level': 'DEBUG',
                    'formatter': 'default',
                    'class': 'logging.handlers.RotatingFileHandler',
                    'filename': LOGFILENAME,
                    'maxBytes': 5000000,
                    'backupCount': 10
                }},
        'root': {
            'level': log_level,
            'handlers': ['default']
        },
    }

app = Flask(__name__)

logging.config.dictConfig(LoggerConfig.dictConfig)

@app.route('/')
def hello():
    app.logger.debug("DEBUG: Inside the home function")
    app.logger.info("INFO: Inside the home function")
    backend.test()
    return "Welcome"
</code></pre>
<p><strong>backend.py</strong></p>
<pre><code>import logging
logger = logging.getLogger()

def test():
    logger.info("info test")
    logger.debug("debug test")
</code></pre>
<p>If you notice, the second line of <code>backend.py</code> is basically <code>logging.getLogger()</code> without a name. This did the trick on the <code>backend side</code>.</p>
<p>Also, <code>app.logger</code> on the API side (<code>main.py</code> side) helped.</p>
<p>Overall, I was able to get both the <code>main.py</code> and <code>backend.py</code> to write to the same file given in <code>dictConfig</code>.</p>
</div>
<span class="comment-copy">How do you run <code>backend.py</code>?</span>
<span class="comment-copy"><code>backend.py</code> is run by the APIs on <code>main.py</code> as <code>from module import backend</code> <code>backend.test()</code></span>
<span class="comment-copy">have you tried calling backend.test from the hello method?</span>
<span class="comment-copy">Yes, sorry in trying to simplify the issue, I did not reflect this step above. Still no logs from <code>backend.py</code></span>
<span class="comment-copy">Does not seem to work. The moment I change to <code>logger = logging.getLogger("myapp")</code> on <code>main.py</code>, I dont see the logs from the API. Earlier when I used <code>logger = logging.getLogger(__name__)</code>, I was able to view this.</span>
<span class="comment-copy">sorry about that. Give me a minute, I'll check that out.</span>
<span class="comment-copy">I think your logging dict is missing the <code>loggers</code> key, see <a href="https://docs.python.org/3/howto/logging-cookbook.html#an-example-dictionary-based-configuration" rel="nofollow noreferrer">docs.python.org/3/howto/…</a>. All loggers not listed there get disabled. So you will have to put your logger name, the desired handlers and log level into the <code>loggers</code> section</span>
<span class="comment-copy">Adding the loggers does not seem to make a difference.</span>
