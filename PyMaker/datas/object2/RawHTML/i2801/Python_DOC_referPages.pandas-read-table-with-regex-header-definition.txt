<div class="post-text" itemprop="text">
<p>For the data file formated like this:</p>
<pre><code>("Time Step" "courantnumber_max" "courantnumber_avg" "flow-time")
0 0.55432343242 0.34323443432242 0.00001
</code></pre>
<p>I can use <code>pd.read_table(filename, sep=' ', header=0)</code> and it will get everything correct <em>except</em> for the very first header, <code>"Time Step"</code>.</p>
<p>Is there a way to specify a regex string for <code>read_table()</code> to use to parse out the header names? </p>
<p>I know a way to solve the issue is to just use regex to create a list of names for the <code>read_table()</code> function to use, but I figured there might/should be a way to directly express that in the import itself.</p>
<p>Edit: Here's what it returns as headers: </p>
<pre><code>['("Time', 'Step"', 'courantnumber_max', 'courantnumber_avg', 'flow-time']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So it doesn't appear to be actually possible to do this inside the <code>pandas.read_table()</code> function. Below is posted the actual solution I ended up using to fix the problem:</p>
<pre><code>import re

def get_headers(file, headerline, regexstring, exclude):
    # Get string of selected headerline
    with file.open() as f:
        for i, line in enumerate(f):
            if i == headerline-1:
                headerstring = line
            elif i &gt; headerline-1:
                break

    # Parse headerstring
    reglist = re.split(regexstring, headerstring)

    # Filter entries in reglist
        #filter out blank strs
    filteredlist = list(filter(None, reglist)) 

        #filter out items in exclude list
    headerslist = []
    if exclude:
        for entry in filteredlist:
            if not entry in exclude:
                headerslist.append(entry)
    return headerslist

get_headers(filename, 3, r'(?:" ")|["\)\(]', ['\n'])
</code></pre>
<h2>Code explanation:</h2>
<p><code>get_headers()</code>:</p>
<hr/>
<p>Arguments, <code>file</code> is a file object that contains the header. <code>headerline</code> is the line number (starting at 1) that the header names exist. <code>regexstring</code> is the pattern that will be fed into <code>re.split()</code>. Highly recommended that you prepend a <code>r</code> to the regex pattern. <code>exclude</code> is a list of miscellaneous strings that you want to be removed from the headerlist.</p>
<p>The regex pattern I used:</p>
<hr/>
<p>First up we have the pipe (<code>|</code>) symbol. This was done to separate both the "normal" split method (which is the <code>" "</code>) and the other stuff that needs to be rid of (namely the parenthesis). </p>
<p>Starting with the first group: <code>(?:" ")</code>. We have the <code>(...)</code> since we want to match those characters in order. The <code>" "</code> is what we want to match as the stuff to split around. The <code>?:</code> basically says to <em>not</em> capture the contents of the group. This is important/useful as otherwise <code>re.split()</code> will keep any groups as a separate item. See <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split()</code></a> in documentation.</p>
<p>The second group is simply the other characters. Without them, the first and last items would be <code>'("Time Step'</code> and <code>'flow-time)\n'</code>. Note that this causes <code>\n</code> to be treated as a separate entry to the list. This is why we use the <code>exclude</code> argument to fix that up after the fact.</p>
</div>
<span class="comment-copy">Do you mean "it will get everything right" rather than "write"? Also it seems your separator could be '" "' (double quote - space - double quote) rather than simply " " (space), if the header line is really written as you made it. I faced similar situations with weird headings. In general, I would capture only the heading with the normal python file I/O, do some regex and other untangling to produce a list with the header names and then directly pass this list in read_csv, ignore the 0th line. I would invite you to do the same.</span>
<span class="comment-copy">Yeah, I mean "right" instead of "write". I've corrected it. And wouldn't changing the separator also change how the data itself is parsed? Otherwise, what you suggested would work fine. Regardless, I'm currently working on an external regex solution right now.</span>
<span class="comment-copy">Assuming you haven't change the defaults for <code>quotechar='"', quoting=0</code> it should work as expected.</span>
<span class="comment-copy">@gyx-hh After running it again with the <code>quotechar='"', quoting=0</code> specified, I get the same issue. I think the leading parentheses is the issue. See the edit for clarification on what exactly went wrong in the header name parsing.</span>
<span class="comment-copy">Ahh yes you're right - sorry when i copied the example i excluded the brackets. I dont think there's a way to do this in <code>pd.read_table</code> tbh</span>
