<div class="post-text" itemprop="text">
<p>I am trying to understand the usefulness of the method register of abc.ABCMeta.
To my understanding, after reading <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">https://docs.python.org/3/library/abc.html</a>:</p>
<p>the following code:</p>
<pre><code>class MyFoo(Complex): ...
    MyFoo.register(Real)
</code></pre>
<p>will create the class MyFoo which implements the Complex abstract class.
After registering the MyFoo with Real, the isinstance and issubclass will return as if MyFoo was derived from Real.
What I don't understand is why the Real, doesn't get added to the mro.</p>
<p>I am asking since the following code will not behave as I would have expected:</p>
<pre><code>def trunc(inst):
    if isinstance(inst, Real):
        return inst.__trunc__() #this should generate error since Complex doesn't have the __trunc__ attr
    else:
        return NotImplemented

trunc(MyFoo())
</code></pre>
<p>Shouldn't I have as a given that when isinstance returns true, then the underlying object should have all the characteristics of the class that it's checked against?</p>
<p>Note, if it's not obvious, i quite new to the language so please bear with me.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Using <code>isinstance</code> to examine properties of an object</h2>
<p>The idea of <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">Abstract Base Classes (or ABC)</a> is to provide a way to override behaviour of <code>isinstance</code> for types which one cannot control.</p>
<p>For example, you may want to use <code>isinstance</code> to check whether an object supports addition (i.e. it is allowed to do <code>a + b</code> for <code>a</code> and <code>b</code> which satisfy the check).</p>
<p>For that, you could implement a base class and some subclasses:</p>
<pre><code>class TypeWithAddition:
    def __add__(self, other):
        raise NotImplementedError("Override __add__ in the subclass")


class MyClass(TypeWithAddition):
    def __init__(self, value):
        self.value = value

    def __add__(self, other):
        return MyClass(self.value + other.value)
</code></pre>
<p>Then, you could check <code>isinstance</code> before attempting to sum any two objects.
For example:</p>
<pre><code>a = MyClass(7)
b = MyClass(8)
if isinstance(a, TypeWithAddition) and isinstance(b, TypeWithAddition):
    c = a + b
    print(c.value)
else:
    print('Cannot calculate a+b')
</code></pre>
<h2>Using <code>ABC</code> to extend <code>isinstance</code> for existing classes</h2>
<p>The problem with this approach is that it does not work for types which already exist and support addition, but are not inherited from your base class:</p>
<pre><code>&gt;&gt;&gt; isinstance(7, TypeWithAddition)
False
</code></pre>
<p><strong>This is where ABC kicks in.</strong> One can inherit the base (<em>"interface"</em>) class from <code>ABC</code> and then register any existing class with it.</p>
<pre><code>class TypeWithAddition(abc.ABC):
    def __add__(self, other):
        raise NotImplementedError("Override __add__ in the subclass")

TypeWithAddition.register(int)
</code></pre>
<p>And now it looks like <code>int</code> is inherited from <code>TypeWithAddition</code>:</p>
<pre><code>&gt;&gt;&gt; isinstance(7, TypeWithAddition)
True
</code></pre>
<p>But of course, <code>int</code> does not really inherit from <code>TypeWithAddition</code>! And there is really no check that it supports everything that you would expect from <code>TypeWithAddition</code>. It is your (programmer's) job to make sure it does before writing <code>TypeWithAddition.register(int)</code>.</p>
<p><strong>An error:</strong></p>
<p>You can easily do this, and it won't work well, of course:</p>
<pre><code>class Foo:
    pass

TypeWithAddition.register(Foo)
</code></pre>
<p>It will now seem that <code>Foo</code> supports addition, but it does not:</p>
<pre><code>&gt;&gt;&gt; Foo() + Foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'Foo' and 'Foo'
</code></pre>
<p>It does not work because it was wrong to register <code>Foo</code> as a <code>TypeWithAddition</code> in the first place.</p>
<p>I hope this make things at least a bit clearer.</p>
</div>
<span class="comment-copy">thanks, now i can  even see that my question is badly written :)</span>
