<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7784148/understanding-repr-function-in-python">Understanding repr( ) function in Python</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/1482649/in-python-interpreter-return-without">In Python interpreter, return without “ ' ”</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p><strong>EDIT: SOLUTION!!!</strong></p>
<p>As it turns out, all I needed to do for this to work was <code>df.query('{}'.format(eval(queryStr)))</code> and Python treated <code>queryStr</code> as if it were the same as <code>print(queryStr)</code>. I don't recommend using <code>eval</code> all of the time, but in this case it was the best solution for me that I could figure out so far.</p>
<p><strong>ORIGINAL PROBLEM:</strong></p>
<p>I have a string (<code>queryStr</code>):</p>
<pre><code>&gt;&gt;&gt; queryStr
"'(1522000002801&lt;=TIMESTAMP&lt;=1522000034174 or
1522000048441&lt;=TIMESTAMP&lt;=1522000074589) and (RESOURCE==\\'GTEX\\' or
RESOURCE==\\'MOD_FLYBASE\\') and (ACTIVITY==\\'REQ_RESOURCE\\')'"
</code></pre>
<p>(Note the backslashes--there are 2)</p>
<p>When I print it <code>queryStr</code>, I get:</p>
<pre><code>&gt;&gt;&gt; print(queryStr)
'(1522000002801&lt;=TIMESTAMP&lt;=1522000034174 or
1522000048441&lt;=TIMESTAMP&lt;=1522000074589) and (RESOURCE==\'GTEX\' or
RESOURCE==\'MOD_FLYBASE\') and (ACTIVITY==\'REQ_RESOURCE\')'
</code></pre>
<p>Which 1 backslash-- EXACTLY what I want to pass to <code>df.query()</code>. </p>
<p>Because when I run <code>df.query(queryStr)</code> </p>
<p>(running <code>df.query()</code> with two backslashes), I get an error. But when I run:</p>
<p><code>df.query('(1522000002801&lt;=TIMESTAMP&lt;=1522000034174 or 1522000048441&lt;=TIMESTAMP&lt;=1522000074589) and (RESOURCE==\'GTEX\' or RESOURCE==\'MOD_FLYBASE\') and (ACTIVITY==\'REQ_RESOURCE\')')</code> </p>
<p>(<code>df.query()</code> with 1 backslash)</p>
<p>I get exactly what I want:</p>
<pre><code>       TIMESTAMP  NODE  ID  REFID  USER      ACTIVITY     RESOURCE
1  1522000016966     1   3      3     6  REQ_RESOURCE  MOD_FLYBASE
4  1522000024848     1   6      6    10  REQ_RESOURCE         GTEX
</code></pre>
<p><strong>So, my question is:</strong></p>
<p>How can I capture the 'output' of <code>print(queryStr)</code> and pass it to <code>df.query()</code>, exactly as it is printed? </p>
<p><em>I know that I can pass the output of <code>print</code> to a file, and then bring in those lines, but I feel like that's extremely inefficient.</em> </p>
<p>Thank you!!</p>
<p><strong>EDIT:</strong></p>
<p>Please note that <code>queryStr</code> is NOT the <code>.__repr__()</code> of the string--because then there would be backslashes in front of the first and last quotes. Hence, using solutions involving <code>.__repr__()</code> or <code>.__str__()</code> have not worked. I quite literally need to somehow 'grab' the output of <code>print</code>. </p>
<p>Thank you again!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you prefix the string with 'r', it will indicate to Python that it's a "raw string" and will pass the string <em>exactly</em> as you specify it:</p>
<pre><code>df.query(r"your \query")
</code></pre>
<p>This will pass the string 'y', 'o', 'u', 'r', ' ', '\', 'q', 'u', 'e', 'r', 'y' -- with the one backslash exactly as you specfiy it.</p>
<p>From the Python docs:  <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html</a></p>
<blockquote>
<p>Both string and bytes literals may optionally be prefixed with a
  letter 'r' or 'R'; such strings are called raw strings and treat
  backslashes as literal characters.</p>
</blockquote>
</div>
<span class="comment-copy">Your string doesn't actually have those double backslashes in it, so the problem you're trying to solve doesn't exist. You're just being confused because the <i>repr</i> of the string—the thing that Python shows you when you evaluate the string at the interactive prompt—adds quotes around it and backslash escapes within it. But those aren't part of the string, they're just added by <code>repr</code>.</span>
<span class="comment-copy">When you do <code>print(s)</code>, the <code>print</code> function just calls <code>str</code> on each argument, so if you want to get the exact same string that <code>print</code> is printing, you can use <code>str(s)</code>. But if <code>s</code> is already a string, there's no point in doing this—<code>str(s)</code> just returns <code>s</code> in that case, so you can just use <code>s</code> as-is.</span>
<span class="comment-copy">The actual problem here is that your <code>queryStr</code> is <i>already</i> the repr of an actual string. You don't want even <i>single</i> backslashes, and you don't want quotes around it. Somewhere, you did something wrong in creating that string, and <i>that</i> is what you need to fix, not the code that uses that string later.</span>
<span class="comment-copy">Also @abarnert df.query(str()) is not supported.</span>
<span class="comment-copy">What do you mean by that? <code>df.query(str())</code> is just querying an empty string. But <code>df.query(str(something))</code> is fine. It's not often <i>useful</i>, because <code>something</code> is usually already a string (as it is in your case), but it's certainly <i>supported</i>.</span>
<span class="comment-copy">Thank you for your input. Unfortunately, there are two problems: The first is that I'm using python 2.**, not python 3.  The second is that  <code>&gt;&gt;&gt; df.query(r'{}'.format(queryStr))</code>  treats it as <code>(1522000002801&lt;=TIMESTAMP&lt;=1522000034174 or 1522000048441&lt;=TIMESTAMP&lt;=1522000074589) and (RESOURCE=='GTEX' or RESOURCE=='MOD_FLYBASE') and (ACTIVITY=='REQ_RESOURCE')</code>  (NO Backslashes) and throws an error.  Thoughts?</span>
<span class="comment-copy">Raw strings are in Python 2:  <a href="https://docs.python.org/2/reference/lexical_analysis.html" rel="nofollow noreferrer">docs.python.org/2/reference/lexical_analysis.html</a></span>
