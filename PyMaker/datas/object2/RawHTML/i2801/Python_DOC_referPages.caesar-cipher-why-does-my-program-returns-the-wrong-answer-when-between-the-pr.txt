<div class="post-text" itemprop="text">
<p>I was trying to code a function which goal is to decrypt a message encrypted using Caesar cipher, this function is named <code>decrypt_message</code>. The function returns the wrong answer, but among the printed values there is the correct one. </p>
<p>Example:
In the following picture you can see that among the printed values there is <code>hi how are you</code> which is the correct answer, but the function returned the wrong one.
<a href="https://i.stack.imgur.com/UDvDG.png" rel="nofollow noreferrer"><img alt="Input and output." src="https://i.stack.imgur.com/UDvDG.png"/></a></p>
<p>You can find here the file called 'words.txt' used in the program and its antivirus scansion:</p>
<p><a href="https://www.dropbox.com/s/jyeos4kdy50yseh/words.txt?dl=0" rel="nofollow noreferrer">https://www.dropbox.com/s/jyeos4kdy50yseh/words.txt?dl=0</a>;</p>
<p><a href="https://www.virustotal.com/#/file/1fcb398331cfbad0f335a51aed5028e57fd9639701137c9cdddc2f54a8a32a54/detection" rel="nofollow noreferrer">https://www.virustotal.com/#/file/1fcb398331cfbad0f335a51aed5028e57fd9639701137c9cdddc2f54a8a32a54/detection</a>.</p>
<p>This is my code (written in Python 3):</p>
<pre><code>import string
def build_shift_dict(shift):
        '''
        Creates a dictionary that can be used to apply a cipher to a letter.
        The dictionary maps every uppercase and lowercase letter to a
        character shifted down the alphabet by the input shift. The dictionary
        should have 52 keys of all the uppercase letters and all the lowercase
        letters only.        

        shift (integer): the amount by which to shift every letter of the 
        alphabet. 0 &lt;= shift &lt; 26

        Returns: a dictionary mapping a letter (string) to 
                 another letter (string). 
        '''
        d = {}
        s_lower = string.ascii_lowercase * 27
        s_upper = string.ascii_uppercase * 27
        for i in range(27):
            d[s_lower[i]] = s_lower[i+shift]
            d[s_upper[i]] = s_upper[i + shift]
        return d
def apply_shift(shift, message_text):
        '''
        Applies the Caesar Cipher to message_text with the input shift.
        Creates a new string that is message_text shifted down the
        alphabet by some number of characters determined by the input shift        

        shift (integer): the shift with which to encrypt the message.
        0 &lt;= shift &lt; 26

        Returns: the message text (string) in which every character is shifted
             down the alphabet by the input shift
        '''
        d = build_shift_dict(shift)
        r = ""
        for e in message_text:
            if e in string.punctuation or e in string.whitespace or e in "0123456789":
                r += e
            else:
                r += d[e]
        return r
def decrypt_message(message_text):
        '''
        Decrypt message_text by trying every possible shift value
        and find the "best" one. We will define "best" as the shift that
        creates the maximum number of real words when we use apply_shift(shift)
        on the message text. If shift is the original shift value used to encrypt
        the message, then we would expect 26 - shift to be the best shift value 
        for decrypting it.

        Note: if multiple shifts are  equally good such that they all create 
        the maximum number of you may choose any of those shifts (and their
        corresponding decrypted messages) to return

        Returns: a tuple of the best shift value used to decrypt the message
        and the decrypted message text using that shift value
        '''
        word_list = load_words('words.txt')
        best_shift = 0
        s = ""
        mostValidWords = 0
        for i in range(1,27):
            validWordsCounter = 0
            s = apply_shift(i, message_text)
            print(s)
            for e in s.split(" "):
                if is_word(word_list, e) == True:
                    validWordsCounter += 1
            if validWordsCounter &gt; mostValidWords:
                best_shift = i
        return (best_shift, apply_shift(26 - best_shift, message_text))
def load_words(file_name):
    '''
    file_name (string): the name of the file containing 
    the list of words to load    

    Returns: a list of valid words. Words are strings of lowercase letters.

    Depending on the size of the word list, this function may
    take a while to finish.
    '''
    print('Loading word list from file...')
    # inFile: file
    in_file = open(file_name, 'r')
    # line: string
    line = in_file.readline()
    # word_list: list of strings
    word_list = line.split()
    print('  ', len(word_list), 'words loaded.')
    in_file.close()
    return word_list

def is_word(word_list, word):
    '''
    Determines if word is a valid word, ignoring
    capitalization and punctuation

    word_list (list): list of words in the dictionary.
    word (string): a possible word.

    Returns: True if word is in word_list, False otherwise

    Example:
    &gt;&gt;&gt; is_word(word_list, 'bat') returns
    True
    &gt;&gt;&gt; is_word(word_list, 'asdf') returns
    False
    '''
    word = word.lower()
    word = word.strip(" !@#$%^&amp;*()-_+={}[]|\:;'&lt;&gt;?,./\"")
    return word in word_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have (at least) three distinct issues in your code:</p>
<ol>
<li>Your word list reading code only works if all the words are on a single line.  (Of course, if your word list really <em>does</em> consist of a single long line, then it's OK.  But most word lists have just one word per line.)</li>
<li>You never assign anything but 0 to <code>mostValidWords</code>.</li>
<li>As pointed out by N Chauhan, you're looking for the best shift amount <em>S</em> for decrypting the input, but then shifting the input by 26 âˆ’ <em>S</em> instead of <em>S</em> when returning the result.</li>
</ol>
<p>In any case, you would've probably caught these issues yourself if you'd either stepped through your code in a debugger (learn to use one! it's really useful!) or used a more detailed debug print statement instead of just <code>print(s)</code>.</p>
<p>In particular, something like this (placed e.g. at the end of the loop) would tell you a lot more about what's going on in your code:</p>
<pre><code>print("shift {}: '{}' ({} valid words), best shift {} ({} valid words)"
    .format(i, s, validWordsCounter, best_shift, mostValidWords))
</code></pre>
<p>Anyway, with those issues fixed, <a href="https://tio.run/##jVdtc9w0EP5@v2K5Aj43xklT2sLRCzApZZhh@MB06Ic03OhsXazWtlxJzuUa8tvD6sWybF@g9yGxpd3Vvjz7rNzsVcHrp/f3rGq4UCCVYPXVLKdb2LSszNeyYFu1zlmmFuYxXs7A/aIo8s/nghJFJRDQoozXROxBFURBRmrYUGglzUFxIE1T7lEsY01BhVmBkipFReqNvSloaKYijQR6TfGxbRoqMiIpkDqHku/cm7VgrHkrWUEEyfSycRyPz/muRqdQuWwKsqEKNnvzzuqmVVYsHZ3uzcmCt2UOBbmm8OwUPtC9BL5FU6Ux0XtmfZHGw27Xe@rNdVK8LvdptzgLTkNfYMFqRa@oiJfW7Yq3tXF6V7Cs0OFaOZsclwR0Sgt7U12wKZzAy5XTeAmnz/vT/qSqFbVcDsuHeW8QDL5AsLDoiPXBXtf/SM2VLulIOIWDgMlhBbd3fbxrkyJctGopkRlj677Cj@H0RSBt0j2W7mswkN5yAQxrDILUV3Rx@iLAsHHlwp1@wS4vtc3u7cjk6nIibM7xwu4NjmAkLkxWITfdZHBvu8k2UgIVlZJc0bWiNw@11c@oxbCtdEHPCZVEwLlvnFAfdkwVEywfaM@a7lzSbHsyObQz7pUJjDT8JK8o1G21sXDznSYhp/ivYjVamPbWZ8LcLpqAPM5pnYl9o8y@87eP7v9xHaiBCdNDGWFhD7E91JMGJsblYgj1zyGRBxH/AKf2kEGZ@XyAXG14UKIheNnWSrhGaNo6Uy3RLQydstvCMBECDcmo35mfPDl9@u2z5y@@@36@nHS0gKMV0MEyLSV9QDC/oBPoCwP9nJrarV0Qi8/A/SurMoSmzrPYa@TaWjVcSrYpO8Bck7IN4Irsu2X4R5dmvqFSzZFraQpvKUILaRk9Q5h2W0QG0NON0Y8R1zoGQuSGVW0VQB83S9hxkUuEEUUsmUk37fa@xLyeoDGF37buaGYP4oJdsRpNB6H5Eep6wVsMzCX6xXixM9OK3jQ0U9gT8E0XG9fTWKvowAf2B7BzRdPZZkgkfu8PruhSo65qS8WaLvtILYIiPj62OPL2cMV5DrLVvatJBo/bm1lokwlD1ydJ3fMWV3Uzcm5G/d4ONf3iTlsQW1om@kJxIRDfvM61085/zJhLjTRjywLz4ORTrY7GTc9JcrrkO7th0geY0@uTsy3ntNKz7iHEhvjXiFqXDH1Y4d2B5GsDsUV03EpxLJGj6LGmj2OzHPXg0m5b2KHiSU@zQ1qpuFR/kZLlbw1wQ8nRrHySTKbltVc817cRM4VPBhLaYtgAbDTqBsKe4mQqcdapxRzm8ZRiEHBMmiwsfG4SoDGsVvBGtAdI6bCvSFRPxvw5lTobpWhqfZLCiZGJyqA2bLDdIEFj5Hbz9m4J0e1dBIvbO2vWEkychKjEvfH@fHJkitmtiKmATKYuJoFPySikOB6T@SIUDus7MBIWOjb0H@B3y0q6rklFXYU7yPt1P5ftyDZLriO1DPZ4rQirdR/NOv4wbYJCloWxRfWB/TUj6PBOMkgazgOjptnLHm1u9eMvC@kY8BVtqOUXR@OSffIeaoNggakKJPKtnsV6ECOXWW/JB2Qzfd/AUNBRHEBMFukgFRYK0e8Ygz7G24St4JVJQpqmruMfYd@8xpWlWTdLrF6bRK2Ao6d9whOIhNcqcfAtu0@9Md1c2Cmu@1LL6dZ0RpcH6An7SUu53o3DEDCmBNNX9w2LCI5slXSJaN7F4eynWYkM74w40HndmcHSAQ7QjyM4veouoVK3t0kh03ffvu4JsKua@/gz0jCFm5/sxUnzeHCRmo1ytDCxLEfAYxYQ/fdT6tUCVJP@1qJ30hFGNZWFPrMgAwm8Jnj9AvOVtWP4LWl0f7khVdMV5@zs7FCOog1RUexyKo2kPuk/VYjMtyMdc/4g08bPlQ3F9IyrXriuY2@Q1r/46dGXX/399eNF/M36aHV7d3H5z7vlD9HLsx@T9PjdfD6p@yD62cyR5K9cLefJ5FIZvf8A7z/inUHhB@vHXRTH9/f/Ag" rel="nofollow noreferrer" title="Try it online!">your code works.</a>  You could make it more efficient by converting <code>word_list</code> into a <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">set</a> (e.g. just by replacing <code>return word_list</code> in <code>load_words</code> with <code>return set(word_list)</code>), but for a short message like yours, it's not absolutely necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your error seems to be here:</p>
<pre><code>return (best_shift, apply_shift(26 - best_shift, message_text)
</code></pre>
<p>As in your demonstration output, the correct decode is on output 24, therefore you should just do:</p>
<pre><code>return (best_shift, apply_shift(best_shift, message_text)
</code></pre>
<p>As <code>26 - best_shift</code> will return pass <code>shift = 2</code> into <code>apply_shift</code> instead of 24 which you correctly printed out at the end - <code>(24, 'lm lsa evi csy')</code> - but had passed in the wrong shift number</p>
</div>
<span class="comment-copy">always use <code>condition is True</code> when comparing to a singleton.</span>
<span class="comment-copy">I'm pretty sure it'll work correctly if you change <code>26 - best_shift</code> to <code>best_shift</code>.</span>
<span class="comment-copy">Also consider using <code>shift % 26</code> to keep the shift in the 26 range and stop you from having to creating an alphabet list that wraps around back to 'a', as in: <code>abcd...xyzabcde...</code></span>
<span class="comment-copy">The most obvious problem in your code is that you never assign any value other than 0 to <code>mostValidWords</code>.  Fix that, and it will probably work.</span>
<span class="comment-copy">I followed your advice, but sometimes the program still returns the wrong answer, like in when the input is: decrypt_message('Xyxcoxco gybnc: mobdksxdi mywwkxn nsz dbkxcvkdsyx wobmi nodksv ohdoxn qbkwwkdsmkv mrysmo crkvvyg kxcgob pebxscr cod dyy bksco woxn usxq lecr gsdryed onemkdsyx dbkfov cdoov cdoob mywzvsmkdsyx cswzvsmsdi qbkxn bszo myxdoxd coo drewl god wybxsxq ysv kddoxn wynocd')</span>
<span class="comment-copy">What is the output supposed to be for this input?</span>
<span class="comment-copy">This is the correct output:Nonsense words: certainty command dip translation mercy detail extend grammatical choice shallow answer furnish set too raise mend king bush without education travel steel steer complication simplicity grand ripe content see thumb wet morning oil attend modest</span>
<span class="comment-copy">What does the program output as the <code>shift</code> value? It should be 16 for <code>X -&gt; N</code></span>
<span class="comment-copy">It's 26. I think there is a problem with that value. In some test cases it suggests that the best_shift value found is 0, but the correct one it's 26.</span>
