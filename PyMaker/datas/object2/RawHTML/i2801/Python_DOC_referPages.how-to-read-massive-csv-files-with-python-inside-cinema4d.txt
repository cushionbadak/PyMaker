<div class="post-text" itemprop="text">
<p>I have a bunch of csv files where each column holds a value representing the angle of each of the Canadarm2's 7 segments. The largest file contains values for every second of a 5 hour mission and is 30 megs!</p>
<p>I've written this python script below in C4D's Script Manager that reads data from the csv and creates keyframes every second where the segments are rotated according to the angle data. </p>
<p>The script works well on small files up to about 1 meg in size but I get the dreaded "Cinema4D has stopped responding" alert or it just sits there silently with apparently nothing happening when I try to process larger files.</p>
<p>Has anyone had any experience with something like this? Might more memory than my 12 gigs help? If I could process say 30 minutes of data at a time inside C4D I'd have a winner.</p>
<pre><code>memLog=''
record = 0
frame=0
path='/Users/...'
filename = path + '30minutes_3meg.csv'
fileobj = open(filename, 'r')

rowcount=0    
for row in fileobj:
    rowcount=rowcount+1
    if rowcount&gt;1:
        ar = row.split(',')
        colcount=0
        for angle in ar:
            if colcount == 0:
                log=angle
                if log==memLog:
                    record=0
                else:
                    record=1
                    print log
                    frame=frame+1

                memLog=log

            if colcount == 2:
                if record==1:
                    rotate(frame,'SR','r',angle)
            elif colcount == 4:
                 if record==1:
                    rotate(frame,'SY','r',angle)
            elif colcount == 6:
                 if record==1:
                    rotate(frame,'SP','r',angle)
            elif colcount == 8:
                if record==1:
                    rotate(frame,'EP','h',angle)  
            elif colcount == 10:
                if record==1:
                    rotate(frame,'WP','h',angle)  
            elif colcount == 12:
                if record==1:
                    rotate(frame,'WY','h',angle)  
            elif colcount == 14:
                if record==1:
                    rotate(frame,'WR','h',angle)  

            colcount=colcount+1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a> which might make things easier.</p>
<p>If you're running into memory problems, I'd suggest doing a forced garbage collection. You do <code>import gc</code> and then in the loop, a <code>gc.collect()</code>. It's probably not required every loop, and would even slow things down if done too frequently. You could keep a counter variable (<code>rowcount</code> would do) and do it less frequently (every 10,000 loops, say. Experiment.). Consider adding a print statement indicating the collection happening and the row number. That way you can tell if the script is still running or if it has locked up.</p>
<pre><code>if rowcount % 10000 == 0:
    print 'collecting', rowcount
    gc.collect()
</code></pre>
<p>If you can install external Python modules, you could also try using <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html#pandas.read_csv" rel="nofollow noreferrer">Pandas to load the csv file</a>. It probably performs better for very large files, but you might have to specify a chunksize if you're still running out of memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, the easiest way to use the file opener for parsing is <a href="https://www.pythonforbeginners.com/files/reading-and-writing-files-in-python" rel="nofollow noreferrer">with</a> :</p>
<pre><code>with open(filename, 'r') as fileobj:
</code></pre>
<p>Next, Python has a native library for <a href="https://code.tutsplus.com/tutorials/how-to-read-and-write-csv-files-in-python--cms-29907" rel="nofollow noreferrer">csv (called csv)</a>:</p>
<p>So to put it together (adapted from the link above and from <a href="https://stackoverflow.com/a/11310549/1449249">mgilson</a>):</p>
<pre><code>import csv

with open(filename, 'r') as fileobj:

    filereader = csv.reader(fileobj, delimiter=',')
    colcount = len(next(filereader)) #Reads the first line and gets length
    if colcount == 0:
        record = 0
    else:
        record = 1 
    for row in filereader: 
        ar = row.split(',') #Split the row
        print (ar2) #prints out all of the rows 
        frame = colcount + 1 #Warning this will make an even column an odd number
        memLog = ar[colcount - 1]
        angle = ar[colcount - 1]
        if colcount == 2:
            if record==1:
                rotate(frame,'SR','r',angle)
        elif colcount == 4:
             if record==1:
                rotate(frame,'SY','r',angle)
        elif colcount == 6:
             if record==1:
                rotate(frame,'SP','r',angle)
        elif colcount == 8:
            if record==1:
                rotate(frame,'EP','h',angle)  
        elif colcount == 10:
            if record==1:
                rotate(frame,'WP','h',angle)  
        elif colcount == 12:
            if record==1:
                rotate(frame,'WY','h',angle)  
        elif colcount == 14:
            if record==1:
                rotate(frame,'WR','h',angle)  
</code></pre>
<p>Sidenote: If you find out that you're doing this alot, may I suggest <a href="https://pandas.pydata.org/" rel="nofollow noreferrer">pandas</a>?  It will simplify the process and it can handle a lot of data.</p>
<hr/>
</div>
<span class="comment-copy">Garbage collection allows me to now process and hour long animation without running out of memory. That's plenty. Thanks</span>
<span class="comment-copy">Thanks for all your help. I'll study it carefully.</span>
