<div class="post-text" itemprop="text">
<p>This is a follow up question to this question:</p>
<p><a href="https://stackoverflow.com/questions/40143289/why-do-most-asyncio-examples-use-loop-run-until-complete">Why do most asyncio examples use loop.run_until_complete()?</a></p>
<p>I'm trying to figure out how asynchronous programming work in python. There's something very basic which I'm still not sure about..</p>
<p>when having this line code: <code>asyncio.ensure_future(someTask)</code> , will this line ALONE actually enqueue the <code>Future</code> returned in the default event loop and start the task? Or do I ALSO need to call <code>loop.run_until_complete(someTask)</code> (or some other kind of run) before that in order to get the event loop up and running? </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><code>asyncio.ensure_future(someTask)</code>
  will this line ALONE actually enqueue the Future returned in the default event loop and start the task?</p>
</blockquote>
<p>It will schedule the coroutine, but it won’t run it. You still need to run the loop to do that. You can do that with </p>
<pre><code>loop.run_forever()
</code></pre>
<p>If you want the loop to run until <code>someTask</code> is done rather than forever, use</p>
<pre><code>future = asyncio.ensure_future(someTask)
loop.run_until_complete(future)
</code></pre>
<p>Don’t call both <code>asyncio.ensure_future(someTask)</code> and <code>loop.run_until_complete(someTask)</code> or you’ll end up with a <code>RuntimeError</code> since <code>someTask</code> will have already been scheduled. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>when having this line code: <code>asyncio.ensure_future(someTask)</code>, will this line ALONE actually enqueue the Future returned in the default event loop and start the task?</p>
</blockquote>
<p>That depends on when the line is executed. If it executes from some coroutine while the event loop is running, then you truly <strong>don't</strong> need to do anything else - the task will appear to magically run "in the background".</p>
<p>If the event loop isn't running yet, then you need to spin up the event loop for <strong>any</strong> task to run, not just the freshly added one. <code>loop.run_until_complete(some_specific_task)</code> is just one option, other is <code>loop.run_forever()</code>, meaning "run the event loop until someone calls <code>loop.stop()</code>".</p>
<p>Note that <code>ensure_future(task)</code> is a no-op because if you already have a <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task" rel="nofollow noreferrer"><code>Task</code></a>, it will just be returned unchanged. <code>ensure_future(some_coroutine())</code> will wrap the coroutine into a <code>Task</code>, schedule it in the event loop, and return it, effectively calling <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_task" rel="nofollow noreferrer"><code>loop.create_task()</code></a> for you. When the argument is known to be a coroutine, it is <a href="https://github.com/python/asyncio/issues/477#issuecomment-268709555" rel="nofollow noreferrer">recommended</a> to call <code>create_task</code> directly.</p>
</div>
