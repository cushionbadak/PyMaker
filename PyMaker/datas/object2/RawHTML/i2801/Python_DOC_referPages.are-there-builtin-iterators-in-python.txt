<div class="post-text" itemprop="text">
<p>We have builtin iterables like lists, tuples, and dictionaries to name a few. We can also create our own iterable objects by implementing an <code>__iter__</code> method in the class. We can also do that iterator objects by implementing an <code>__iter__</code> and a <code>__next__</code> method, but are there builtin iterators like there are builtin iterables?</p>
</div>
<div class="post-text" itemprop="text">
<p>The following <code>builtin</code>s <em>return</em> iterators in Python 3: <code>enumerate()</code>, <code>filter()</code>, <code>iter()</code> (of course), <code>map()</code>, <code>reversed()</code> and <code>zip()</code>.</p>
<p>In Python there are also a lot of native python methods that <em>return</em> iterators, for example checkout the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code> module</a> (the hint is in the name!). </p>
<p>However, to pedantically answer your question, no there are not <code>builtins</code> that <em>are</em> iterators (I can't think of a good use case for this), but as <a href="https://stackoverflow.com/users/1639625/tobias-k">tobias_k</a> says <code>list()</code> and others are not iterables either and merely <em>return</em> then.</p>
<hr/>
<p>Testing that iterator <em>classes</em> (not objects) exist in <code>builtins</code> (thanks to <a href="https://stackoverflow.com/users/4819449/fhtmitchell">FHTMitchell</a>):</p>
<pre><code>import builtins
import collections.abc

def isiteratorclass(obj):
    if not isinstance(obj, type):
        return False
    return issubclass(obj, collections.abc.Iterator)


[key for key, value in vars(builtins).items() if isiteratorclass(value)]
# --&gt; ['enumerate', 'filter', 'map', 'reversed', 'zip']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>File handles, for example, implement the iterator protocol:</p>
<pre><code>f = open('file.txt')
next(f)
# first line
next(f)
# second line
</code></pre>
</div>
<span class="comment-copy">Also, by your "pedantic" reasoning, neither is <code>list</code>, <code>tuple</code>, etc. an iterable; they are <i>functions</i> that return iterables, but IMHO that's besides the point.</span>
<span class="comment-copy">@tobias_k  Agreed, have deleted the code snippet, it wasn't that relevant anyway</span>
<span class="comment-copy">@tobias_k If we're going full pedant, <code>list</code> and <code>tuple</code> are classes whose instances are iterables ;)</span>
<span class="comment-copy">Actually, I don't think your <code>is_iterator</code> test was pointless, you just applied it to the wrong arguments, e.g. <code>is_iterator([1,2,3])</code> or <code>is_iterator(range(5))</code> are false, whereas <code>is_iterator(map(abs,[1,2,3]))</code> is true.</span>
<span class="comment-copy">@FHTMitchell Yes I think the OP just used the wrong semantics and that has led us down a rather irrelevant diversion, I have edited the answer</span>
