<div class="post-text" itemprop="text">
<p>I have a large number of files in one folder (about 2 million files), I would like to combine every 50 files into one. the code below combines all into one. I can't come about a way to combine every 50 files into one and also ensure that any number over the multiplication of 50 is also combined into one file. For example, if the number of files is 2,000,034 then I end up with many files of 50 combined files and one file that has the last 34 files. </p>
<pre><code>from glob import iglob
import shutil
import os

PATH = r'C:\Test'

destination = open('allcontents.sh', 'wb')
for file in iglob(os.path.join(PATH, '*.sh')):
    shutil.copyfileobj(open(file, 'rb'), destination)
destination.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use a list instead of an iterator because a list is easier to manipulate:</p>
<pre><code>filelist = glob(os.path.join(PATH, '*.sh'))
</code></pre>
<p>Chop the list into 50-item slices and copy the files from each slice into one file. The name of the output file contains the number of the first file in the slice:</p>
<pre><code>BLOCK = 50
for i in range(0, len(filelist) + BLOCK, BLOCK):
    with open('contents-{}.sh'.format(i), 'wb') as destination:
        for filename in filelist[i:i+BLOCK]:
            with open(filename, 'rb') as infile:
                shutil.copyfileobj(infile, destination)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You almost have this. I haven't tested the code below, but it will give you the idea:</p>
<pre><code>from glob import iglob
import shutil
import os

PATH = r'C:\Test'

filecounter = 1
fiftycounter = 0
destination = open('fifties1.sh', 'wb')
for file in iglob(os.path.join(PATH, '*.sh')):
    shutil.copyfileobj(open(file, 'rb'), destination)
    fiftycounter += 1
    if 50 == fiftycounter:
        fiftycounter = 0
        destination.close()
        filecounter += 1
        destination = open('fifties' + str(filecounter) + '.sh', 'wb')
destination.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a> in the standard library documentation include this recipe (quoted verbatim):</p>
<pre><code>from itertools import zip_longest
def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>You can use that to wrap your <code>iglob()</code> call to bring back chunks of 50 elements (the last one will have extra <code>None</code> at the end) and then iterate through that list.</p>
<pre><code>i_files = iglob(os.path.join(PATH, '*.sh'))
i_grouped = grouper(i_files, 50)
for (n, group) in enumerate(i_grouped):
  destination_fn = 'allcontents_{}.sh'.format(n)
  with open(destination_fn, 'w') as f:
    for input_fn in group:
      ...
</code></pre>
</div>
