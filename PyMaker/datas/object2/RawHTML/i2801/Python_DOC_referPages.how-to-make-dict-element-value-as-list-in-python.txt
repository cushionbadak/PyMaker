<div class="post-text" itemprop="text">
<p>I have a list. Let's say <code>[3,4,2,3,4,2,1,4,5]</code>. </p>
<p>I need to create a dictionary from the indexes of the elements.</p>
<p>Here in this case, I need to create a dict as follows:</p>
<pre><code>{
   '3':[0,3],
   '4':[1,4,7],
   '2':[2,5],
   '1':[6],
   '5':[8]
}
</code></pre>
<p>where the element values are the indexes of the keys in list provided.</p>
<p>I've tried. But was able to change the values as integers only. But unable to make them as list.</p>
<p>Is there any way to do this with just 1 for loop?</p>
<p>The code I've tried:</p>
<pre><code>d=dict()
ll=[1,2,1,2,1,2,3,4,5,5,4,2,4,6,5,6,78,3,2,4,5,7,8,9,4,4,2,2,34,5,6,3]
for i,j in enumerate(ll):
    d[j].append(i)
print(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>set</code>:</p>
<pre><code>d = [3,4,2,3,4,2,1,4,5]
new_d = {i:[c for c, a in enumerate(d) if i == a] for i in set(d)}
</code></pre>
<p>Output:</p>
<pre><code>{1: [6], 2: [2, 5], 3: [0, 3], 4: [1, 4, 7], 5: [8]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> for an O(n) solution:</p>
<pre><code>from collections import defaultdict

d = defaultdict(list)

A = [3,4,2,3,4,2,1,4,5]

for idx, val in enumerate(A):
    d[val].append(idx)

print(d)

defaultdict(list, {1: [6], 2: [2, 5], 3: [0, 3], 4: [1, 4, 7], 5: [8]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will work, the key thing you're looking for is the enumerate() function:</p>
<pre><code>list_to_convert = [3,4,2,3,4,2,1,4,5]
out_dict = {}

for idx, val in enumerate(list_to_convert):
    if val in out_dict:
        out_dict[val].append(idx)
    else:
        out_dict[val] = [idx,]

print (out_dict)
</code></pre>
<p>Gives: </p>
<pre><code>{3: [0, 3], 4: [1, 4, 7], 2: [2, 5], 1: [6], 5: [8]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>mylist = [3, 4, 2, 3, 4, 2, 1, 4, 5]
d = {}
for index, item in enumerate(mylist):
    d.setdefault(item, []).append(index)
</code></pre>
<p>results in</p>
<pre><code>{3: [0, 3], 4: [1, 4, 7], 2: [2, 5], 1: [6], 5: [8]}
</code></pre>
<p>Why? Well, we iterate over the list, and for each item, we first make sure that there is a list in the dictionary mapped to by this item. Then we append the respective index to that list. What results is a dictionary which maps each seen item to a list of indexes it was found at.</p>
<p>The solution is similar to jpp's solution, except of the part with <code>.setdefault()</code>, which creates an empty list in every loop run, while the <code>defaultdict</code> approach only creates new lists if needed.</p>
<p>Another approach could be a <code>dict</code> subclass which implements <a href="https://docs.python.org/3.1/whatsnew/2.5.html?highlight=__missing__#other-language-changes" rel="nofollow noreferrer"><code>__missing__</code></a>. This is called whenever a key isn't present.</p>
<pre><code>class ListDict(dict):
    def __missing__(self, key):
        l = []
        self[key] = l
        return l
</code></pre>
<p>and then just do <code>d[item].append(index)</code>. Now, whenever a key is not found, <code>__missing__()</code> is called which "fixes" the problem. See also <a href="https://stackoverflow.com/q/34884402/296974">How can I call __missing__ from dict</a> for this.</p>
</div>
<span class="comment-copy">Yes there is a way using only one loop. What have you tried?</span>
<span class="comment-copy">@Sukumar edit it into your question, don't post code in comments</span>
<span class="comment-copy">Ah, that would work if the default value for a dictionary entry was an empty list. See @jpp's solution.</span>
<span class="comment-copy">Should the keys really be <code>str</code>, or <code>int</code>?</span>
<span class="comment-copy">Nice one-liner, but even with a <code>set</code> this is O(nÂ²).</span>
<span class="comment-copy">@Ajax1234 Your solution one looks awesome :-)</span>
<span class="comment-copy">I've come across this solution. But I'm wondering if there is any way to do that without importing anything.</span>
<span class="comment-copy">@Sukumar What is the problem with importing anything?</span>
<span class="comment-copy">Yes, was looking for <code>setdefault</code> there, too early in the morning :P</span>
