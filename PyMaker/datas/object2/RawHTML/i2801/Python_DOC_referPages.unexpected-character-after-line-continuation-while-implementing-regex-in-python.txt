<div class="post-text" itemprop="text">
<p>I am trying to search a file in a folder using regex, but when i try to pass the regex in a variable like</p>
<pre><code>file_to_search = re.search('Weekly' +(\d{2})[/.-](\d{2})[/.-](\d{4})$ + 'Scores.xlsx')
</code></pre>
<p>The file pattern I am trying to search is</p>
<p>Weekly 02.28.2018 Scores.xlsx</p>
<p>Weekly 03.05.2018 Scores.xlsx</p>
<p>As of now I dont care if the file is:</p>
<p>Weekly 99.99.9999 Scores.xlsx</p>
<p>But I get the below error pointing at the end of the line.</p>
<pre><code>SyntaxError: unexpected character after line continuation character.
</code></pre>
<p>file_to_search = re.search('Weekly' +\d{2}\d{2}\d{4}+ 'Scores.xlsx')</p>
<pre><code>                                                          ^
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p><code>re.search</code> needs a pattern and a text. You left one of them out.</p></li>
<li><p>Python does not have a literal syntax for regular expressions, which means all regular expressions in Python need to be strings.</p></li>
<li><p>You probably didn't mean <code>.xlsx</code>.</p></li>
<li><p>You need to escape the extension dot. (You do not need to escape the dot in the date, since it is inside square brackets, a character class.)</p></li>
<li><p>You need to account for space. A literal space works okay here; if it's possible it might be a tab or something <code>\s</code> would be preferable.</p></li>
<li><p>I use raw string literal <code>r'...'</code> so I can write <code>\d</code> instead of <code>\\d</code> etc.</p></li>
</ul>
<p>All together now:</p>
<pre><code>match = re.search(r'^Weekly \d{2}[/.-]\d{2}[/.-]\d{4} Scores\.xslx$', file_to_test)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make your life simpler:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; matcher = re.compile( r'Weekly \d\d\.\d\d\.\d\d\d\d Scores.xlsx' )
&gt;&gt;&gt; a = '''The file pattern I am trying to search is
... 
... Weekly 02.28.2018 Scores.xlsx
... 
... Weekly 03.05.2018 Scores.xlsx
... 
... As of now I dont care if the file is:
... 
... Weekly 99.99.9999 Scores.xlsx
... 
... But I get the below error pointing at the end of the line.'''
&gt;&gt;&gt; matcher.findall( a )
['Weekly 02.28.2018 Scores.xlsx', 'Weekly 03.05.2018 Scores.xlsx', 'Weekly 99.99.9999 Scores.xlsx']
&gt;&gt;&gt;
</code></pre>
<p>I hope this answers your question =)</p>
<p>Of if you want to work with files:</p>
<pre><code>&gt;&gt;&gt; filenames = matcher.findall( a )
&gt;&gt;&gt; filenames.append( 'somefile.txt' )
&gt;&gt;&gt; for f in filenames : print f, matcher.match( f ) is not None
... 
Weekly 02.28.2018 Scores.xlsx True
Weekly 03.05.2018 Scores.xlsx True
Weekly 99.99.9999 Scores.xlsx True
somefile.txt False
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy"><code>(\d{2})[/.-](\d{2})[/.-](\d{4})$</code> is not a valid expression. Regular expressions are written as strings in Python. You specifically left it out of your string.</span>
<span class="comment-copy">waht about <code>startswith()</code> and <code>endswith()</code> ?</span>
<span class="comment-copy">What is the second argument file_to_test????</span>
<span class="comment-copy">"<code>re.search</code> needs a pattern and a text.". So, it is the string where you are hoping to find the pattern. EDIT: You said "I am trying to search a file in a folder using regex", and that, in conjunction with your comment just now, worries me that you might not know what regexps do. They find text in strings. They don't find files on your disk. To find files, you might use <code>os.listdir</code>, <code>os.walk</code>, <code>glob</code> module, and I'm sure I'm leaving some things out; once you have a list of potential candidates you can use regex to filter them out more precisely.</span>
<span class="comment-copy">So the way I am implementing this is , defining a variable something like this   file_to_search = re.search(r'^Weekly \d{2}[/.-]\d{2}[/.-]\d{4} Scores\.xlsx$')           def search_file():         for file in os.listdir(source):                 if fnmatch.fnmatch(file, file_to_search):                         return True         return False if search_file():         print('File exists') else:         print('File not found')</span>
<span class="comment-copy">Comments are superbad for more than one line of code, and that goes double for Python which has indent syntax. <code>fnmatch</code> matching and <code>regexp</code> matching are two different kinds of matching - you can't give <code>fnmatch</code> a regular expression, if that's what you were trying to do. And even so, compiled regular expressions are created by <code>needle = re.compile(regex_string)</code>, then you can use it as <code>needle.search(haystack)</code>; <code>re.search(regex_string, haystack)</code> is a shortcut that does this together.</span>
<span class="comment-copy">In your example, <code>for file in os.listdir(...)</code> is correct; after that, you can do <code>if re.search(regex_string, file):</code>, <i>or</i> you can do <code>fnmatch.fnmatch(fnmatch_string, file)</code> (in which case you don't need <code>re.search</code>). The patterns of <code>fnmatch</code> are described at the top of the <a href="https://docs.python.org/3/library/fnmatch.html" rel="nofollow noreferrer">corresponding doc page</a>, and are <i>not related to regular expressions at all</i> (except by the fact that they are both used for text matching).</span>
