<div class="post-text" itemprop="text">
<p>We have a partially working code and 2 examples with different types of custom steps. The example 2 (Int) is working, while the example 1 is not, as it is rounding up instead of down.</p>
<pre><code>import math

def step_size_to_precision(ss):
    return ss.find('1') - 1

def format_value(val, step_size_str):
    precision = step_size_to_precision(step_size_str)
    if precision &gt; 0:
        return "{:0.0{}f}".format(val, precision)
    return math.floor(int(val))


###########################

# # example 1
step_size = "0.00000100"
quantity = 0.00725562
print(quantity)
print(format_value(quantity, step_size))

# 0.00725562
# 0.007256  &lt;= Is rounding up instead of down. Should be 0.007255 

###########################

# # example 2
# step_size = "1"
# quantity = 3.00725562
# print(quantity)
# print(format_value(quantity, step_size))

# returns 3 &lt;= This is correct

###########################
</code></pre>
<p>How do we fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Another approach is outlined in <a href="https://stackoverflow.com/a/17610905/2402281">this SO answer</a>:</p>
<blockquote>
<p>If you want to round down <em>always</em> (instead of rounding to the nearest
  precision), then do so, explicitly, with the <a href="http://docs.python.org/2/library/math.html#math.floor" rel="nofollow noreferrer"><code>math.floor()</code>
  function</a>:</p>
<pre><code>from math import floor

def floored_percentage(val, digits):
    val *= 10 ** (digits + 2)
    return '{1:.{0}f}%'.format(digits, floor(val) / 10 ** digits)

print floored_percentage(0.995, 1)
 Demo:

&gt;&gt;&gt; from math import floor
&gt;&gt;&gt; def floored_percentage(val, digits):
...     val *= 10 ** (digits + 2)
...     return '{1:.{0}f}%'.format(digits, floor(val) / 10 ** digits)
... 
&gt;&gt;&gt; floored_percentage(0.995, 1)
'99.5%'
&gt;&gt;&gt; floored_percentage(0.995, 2)
'99.50%'
&gt;&gt;&gt; floored_percentage(0.99987, 2)
'99.98%'
</code></pre>
</blockquote>
<p>For your example:</p>
<pre><code>import math

def step_size_to_precision(ss):
    return max(ss.find('1'), 1) - 1

def format_value(val, step_size):
    digits = step_size_to_precision(step_size)
    val *= 10 ** digits
    return '{1:.{0}f}'.format(digits, math.floor(val) / 10 ** digits)


step_size = "0.00000100"
quantity = 0.00725562
print(quantity)
print(format_value(quantity, step_size))

# prints out: 0.007255
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll want to use <code>Decimal</code> objects to for precise decimal numbers to begin with.</p>
<p>Then, use <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal.quantize" rel="nofollow noreferrer"><code>Decimal.quantize()</code></a> in the <a href="https://docs.python.org/3/library/decimal.html#rounding-modes" rel="nofollow noreferrer"><code>ROUND_DOWN</code> mode</a>.</p>
<pre><code>from decimal import Decimal, ROUND_DOWN

quantity = 0.00725562

step_size = Decimal("0.000001")
print(Decimal(quantity).quantize(step_size, ROUND_DOWN))
</code></pre>
<p>prints out</p>
<pre><code>0.007255
</code></pre>
</div>
<span class="comment-copy">The thing is that the step_size comes in a number, not in digits amount.</span>
<span class="comment-copy">@FrankC Fixed it for you with my edit.</span>
<span class="comment-copy">Cool, now it works for example 1, but the example 2 is not working. I get: ValueError: Format specifier missing precision</span>
<span class="comment-copy">Ah yes, this is mainly due to your <code>step_size_to_precision</code> function. I'll fix it for the sake of completeness!</span>
<span class="comment-copy">I found an exception where AKX answer doesn't work (where stepsize = "1.0" and the quantity is for example 14.55. Returns 14.5 instead of 14) Your solution on the other hand works perfectly.. Thank you very much.</span>
