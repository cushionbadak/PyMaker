<div class="post-text" itemprop="text">
<p>I wrote a function which could output three things:</p>
<pre><code>def getStatus():
    if   condition1:
        return "NormalStatus"
    elif condition2:
        return "ServerCompromised"
    elif condition3:
        return "UnknownStatus"
</code></pre>
<p>If I were writing C++ code, I would use <code>#define</code> to make some status constants which were just ints, so that the function isn't returning strings each time. Is there a Pythonic equivalent to avoid using string like this?</p>
<p>I intend to call this function several million times, so doing a string comparison on the output might be much slower than comparing a constant int. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can define your own mapping in a dictionary like <code>{1: "NormalStatus", 2: "ServerCompromised"}</code> and so on. Then you can return Integers and only have to lookup these integers in the dict (if necessary).</p>
<p>An alternative was already mentioned in a comment: You can also use the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum module</a> for this. Maybe the most similar way to <code>#define</code> is declaring (global) variables like this:</p>
<pre><code>NORMAL_STATUS = 1
SERVER_COMPROMISED = 2
...
</code></pre>
<p>But as mentioned in the module documentation of the enum module</p>
<blockquote>
<p>An enumeration is a set of symbolic names (members) bound to unique, constant values.</p>
</blockquote>
<p>this could also be seen as the most similar way of getting C++'s <code>#define</code> into Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="https://kite.com/python/docs/enum" rel="nofollow noreferrer">enum</a> module for that. If you need to compare values to integers it's good to subclass from <a href="https://kite.com/python/docs/enum.IntEnum" rel="nofollow noreferrer">enum.IntEnum</a></p>
</div>
<span class="comment-copy">If you're using Python 3.4 or later, try the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum</code> module</a>. Otherwise, just define constants using all-uppercase letters and underscores between words.</span>
<span class="comment-copy">Excellent, thank you! I'll look into this.</span>
<span class="comment-copy">If the keys are numbers, wouldn't a list be easier?</span>
<span class="comment-copy">It depends on the usecase. A dict is more flexibel and fast in lookup and there you can have a clear visible mapping between numbers and text.</span>
<span class="comment-copy">I think <code>enum</code> is the closest to what I'm looking for here.</span>
<span class="comment-copy">Thx @Reubend for pointing that out. I've updated my answer.</span>
<span class="comment-copy">It's basically what I've said, but you focused on using enum module with a little bit more information (subclassing). Enough for me to upvote.</span>
