<div class="post-text" itemprop="text">
<p>I'm new to Python from the R world, and I'm working on big text files, structured in data columns (this is LiDaR data, so generally 60 million + records).</p>
<p>Is it possible to change the field separator (eg from tab-delimited to comma-delimited) of such a big file without having to read the file and do a <code>for</code> loop on the lines?</p>
</div>
<div class="post-text" itemprop="text">
<p>No. </p>
<ul>
<li>Read the file in</li>
<li>Change separators for each line</li>
<li>Write each line back</li>
</ul>
<p>This is easily doable with just a few lines of Python (not tested but the general approach works):</p>
<pre><code># Python - it's so readable, the code basically just writes itself ;-)
#
with open('infile') as infile:
  with open('outfile', 'w') as outfile:
    for line in infile:
      fields = line.split('\t')
      outfile.write(','.join(fields))
</code></pre>
<p>I'm not familiar with R, but if it has a library function for this it's probably doing exactly the same thing.</p>
<p>Note that this code only reads one line at a time from the file, so the file can be larger than the physical RAM - it's never wholly loaded in.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://www.cyberciti.biz/faq/how-to-use-linux-unix-tr-command/" rel="nofollow">the linux tr command</a> to replace any character with any other character.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually lets say yes, you can do it without loops eg:</p>
<pre><code>with open('in') as infile:
  with open('out', 'w') as outfile:
      map(lambda line: outfile.write(','.join(line.split('\n'))), infile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cant, but i strongly advise you to check generators.</p>
<p>Point is that you can make faster and well structured program without need to write and store data in memory in order to process it.</p>
<p>For instance</p>
<pre><code>file = open("bigfile","w")
j = (i.split("\t") for i in file)
s = (","join(i) for i in j)
#and now magic happens
for i in s:
     some_other_file.write(i)
</code></pre>
<p>This code spends memory for holding only single line. </p>
</div>
<span class="comment-copy">For what it's worth, if you're on a Linux/UNIX system, this sort of thing may be more easily accomplished with sed: <code>sed -i 's/\t/,/g' file.csv</code> (or something like that - don't use this without testing it on a small sample file first).</span>
<span class="comment-copy">@David - Something like %$#"! and then -&gt; please do not use this whitout testing.</span>
<span class="comment-copy">You might need to escape any actual <code>,</code> characters in the input lines.</span>
<span class="comment-copy">@intuited: Agreed, but it would be even better to use the writing capabilities of the standard <code>csv</code> module. My answer is simplistic because the OP's question is simplistic</span>
<span class="comment-copy">R would load the whole file into RAM, thus my concern about efficiency here. Cheers,</span>
<span class="comment-copy">@Pierre: no concern, then ;-)</span>
<span class="comment-copy">Your code has no effect. <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> returns an iterator and you don't consume it anywhere.</span>
<span class="comment-copy">because I dont need to consume it, are you familiar with map function at all not only in Python world?</span>
<span class="comment-copy">Yes, I am, but for example: <code>map(lambda x: print(x), [0, 1])</code> is no-op.</span>
<span class="comment-copy">Yes, and in python 2.x its invalid syntax, or not working because seems print is not a function, anyway there is another question <a href="https://stackoverflow.com/questions/7731213/print-doesnt-print-when-its-in-map-python" title="print doesnt print when its in map python">stackoverflow.com/questions/7731213/â€¦</a></span>
<span class="comment-copy">Exactly, glad you found the link. You can fix your code then.</span>
<span class="comment-copy">Is there any reason why <code>some_other_file.write(",".join(i.split("\t") for i in file))</code> would be worse ? - Also, you must end with <code>file.close()</code>. And better to avoid name of a builtin-in identifier <i>file</i></span>
