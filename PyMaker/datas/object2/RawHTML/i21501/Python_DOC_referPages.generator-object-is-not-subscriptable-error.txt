<div class="post-text" itemprop="text">
<p>Why am I getting this error, from line 5 of my code, when attempting to solve Project Euler Problem 11?</p>
<pre class="lang-python prettyprint-override"><code>for x in matrix:
    p = 0
    for y in x:
        if p &lt; 17:
            currentProduct = int(y) * int(x[p + 1]) * int(x[p + 2]) * int(x[p + 3])
            if currentProduct &gt; highestProduct:
                print(currentProduct)
                highestProduct = currentProduct
        else:
                break
            p += 1
</code></pre>
<pre class="lang-none prettyprint-override"><code>'generator' object is not subscriptable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>x</code> value is is a generator object, which is an <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterator" rel="nofollow noreferrer"><code>Iterator</code></a>: it generates values in order, as they are requested by a <code>for</code> loop or by calling <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next(x)</code></a>.</p>
<p>You are trying to access it as though it were a list or other <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow noreferrer"><code>Sequence</code></a> type, which let you access arbitrary elements by index as <code>x[p + 1]</code>.</p>
<p>If you want to look up values from your generator's output by index, you may want to convert it to a list:</p>
<pre><code>x = list(x)
</code></pre>
<p>This solves your problem, and is suitable in most cases. However, this requires generating and saving all of the values at once, so it can fail if you're dealing with an extremely long or infinite list of values, or the values are extremely large.</p>
<p>If you just needed a single value from the generator, you could instead use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice(x, p)</code></a> to discard the first <code>p</code> values, then <code>next(...)</code> to take the one you need. This eliminate the need to hold multiple items in memory or compute values beyond the one you're looking for.</p>
<pre><code>import itertools

result = next(itertools.islice(x, p))
</code></pre>
</div>
<span class="comment-copy">Python's "lists" <i>are</i> closer to arrays than to what most other languages would call a list. They're automatically-resizing arrays (which many language call "vectors" or even simply "arrays"). They're not linked lists, and they support constant-type lookup of any element, not just the head, unlike "lists" in most languages.</span>
