<div class="post-text" itemprop="text">
<p>So I am running a Python script within which I am calling Python's debugger, PDB by writing:</p>
<pre><code>import ipdb; ipdb.set_trace()
</code></pre>
<p>(iPython's version of PDB, though for the matter I don't think it makes a difference; I use it for the colored output only).</p>
<p>Now, when I get to the debugger I want to execute a multi-line statement such as an if clause or a for loop but as soon as I type</p>
<pre><code>if condition:
</code></pre>
<p>and hit the return key, I get the error message <code>*** SyntaxError: invalid syntax (&lt;stdin&gt;, line 1)</code></p>
<p>How can one execute multi-line statements within PDB? If not possible is there a way around this to still executing an if clause or a for loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do this while in pdb to launch a temporary interactive Python session with all the local variables available:</p>
<pre><code>(pdb) !import code; code.interact(local=vars())
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
&gt;&gt;&gt; 
</code></pre>
<p>When you're done, use Ctrl-D to return to the regular pdb prompt.</p>
<p>Just don't hit Ctrl-C, that will terminate the entire pdb session.</p>
</div>
<div class="post-text" itemprop="text">
<p>Inside the Python (2.7.1) interpreter or debugger (import pdb), you can execute a multi-line statement with the following syntax.</p>
<pre><code>for i in range(5): print("Hello"); print("World"); print(i)
</code></pre>
<p>Note: When I'm inside the interpreter, I have to hit return twice before the code will execute.  Inside the debugger, however, I only have to hit return once.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3 <code>ipdb</code> (and <code>pdb</code>) have a command called <a href="https://docs.python.org/3/library/pdb.html#pdbcommand-interact" rel="noreferrer">interact</a>. It can be used to: </p>
<blockquote>
<p>Start an interactive interpreter (using the <a href="https://docs.python.org/3/library/code.html#module-code" rel="noreferrer">code</a> module) whose global namespace contains all the (global and local) names found in the current scope.</p>
</blockquote>
<p>To use it, simply enter <code>interact</code> at the pdb prompt. Among other things, it's useful for applying code spanning multiple lines, and also for avoiding accidental triggering of other pdb commands.</p>
</div>
<div class="post-text" itemprop="text">
<p>My recommendation is to use IPython embedding.</p>
<pre><code>python
ipdb&gt; from IPython import embed; embed()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is the special case if you want a couple of commands be executed when hitting a break point. Then there is the debugger command <code>commands</code>. It allows you to enter multiple lines of commands and then end the whole sequence with the <code>end</code> key word. More with <code>(pdb) help commands</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know if you can do this, that'd be a great feature for ipdb though. You can use list comprehensions of course, and execute simple multi-line expressions like:</p>
<pre><code>if y == 3: print y; print y; print y;
</code></pre>
<p>You could also write some functions beforehand to do whatever it is you need done that would normally take multiple lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>Write your code in a text editor, then paste it into the debugger:</p>
<pre><code>if True:
    print('a')
</code></pre>
<p>It is a silly solution, but also dirty quick and work. It works on Linux terminal, but I am not sure if it will work on Windows console.</p>
</div>
<span class="comment-copy">brilliant, thanks for the tip</span>
<span class="comment-copy">It seems the same can be achieved using the pdb <code>interact</code> command (<a href="http://bugs.python.org/msg215963" rel="nofollow noreferrer">as I learned from this bug tracker message</a>).</span>
<span class="comment-copy">Why is the <code>!</code> needed in the <code>import</code> statement?</span>
<span class="comment-copy">It's probably not needed, but I have a habit of prefixing all Python statements in pdb with <code>!</code>, to avoid accidents.  E.g. <code>c = 42</code> in pdb would <i>continue</i> execution instead of assigning to variable <code>c</code>.</span>
<span class="comment-copy">@MariusGedminas the most frustrating thing with PDB! Would be nice if <i>their</i> commands had to be prefixed...</span>
<span class="comment-copy">It doesn't allow running anything deeper than one level.</span>
<span class="comment-copy">It gives me "NameError: name 'interact' is not defined" when doing that.</span>
<span class="comment-copy">@jason version 3.2 or higher</span>
<span class="comment-copy">That explains. I was in python 2.7.</span>
<span class="comment-copy">Careful this actually threw an error that interact could is not defined and exited the process</span>
<span class="comment-copy">Avoid the <code>interact</code> command.  It just puts you in a regular Python REPL.  I would use iPython embedding as suggested in this answer: <a href="https://stackoverflow.com/a/49624002/1175053">stackoverflow.com/a/49624002/1175053</a></span>
<span class="comment-copy">This is actually the best answer by far here currently.</span>
<span class="comment-copy">If you're having value is not defined error in list comprehension, try to use from IPython <code>import embed; embed(user_ns=locals())</code>.</span>
<span class="comment-copy">Honestly, I wouldn't say that calling an external program, writing, copying and pasting is <i>quick</i>, just dirty :P</span>
