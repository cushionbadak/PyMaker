<div class="post-text" itemprop="text">
<p>I have an enum Nationality:</p>
<pre><code>class Nationality:
        Poland='PL'
        Germany='DE'
        France='FR'
</code></pre>
<p>How can I convert this some enum to int in this or similar way: </p>
<pre><code>position_of_enum = int(Nationality.Poland)  # here I want to get 0
</code></pre>
<p>I know that I can do it if I had code by:</p>
<pre><code>counter=0
for member in dir(Nationality):
    if getattr(Nationality, member) == code:
        lookFor = member
        counter += 1
return counter
</code></pre>
<p>but I don't have, and this way looks too big for python. I'm sure that there is something much simpler .</p>
</div>
<div class="post-text" itemprop="text">
<p>There are better (and more "Pythonic") ways of doing what you want.</p>
<p>Either use a tuple (or list if it needs to be modified), where the order will be preserved:</p>
<pre><code>code_lookup = ('PL', 'DE', 'FR')
return code_lookup.index('PL') 
</code></pre>
<p>Or use a dictionary along the lines of: </p>
<pre><code>code_lookup = {'PL':0, 'FR':2, 'DE':3}
return code_lookup['PL']  
</code></pre>
<p>The latter is preferable, in my opinion, as it's more readable and explicit.</p>
<p>A <code>namedtuple</code> might also be useful, in your specific case, though it's probably overkill:</p>
<pre><code>import collections
Nationalities = collections.namedtuple('Nationalities', 
                                       ['Poland', 'France', 'Germany'])
nat = Nationalities('PL', 'FR', 'DE')
print nat.Poland
print nat.index(nat.Germany)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using either the <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer"><code>enum34</code> backport</a> or <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">aenum</a><sup>1</sup> 
you can create a specialized <code>Enum</code>:</p>
<pre><code># using enum34
from enum import Enum

class Nationality(Enum):

    PL = 0, 'Poland'
    DE = 1, 'Germany'
    FR = 2, 'France'

    def __new__(cls, value, name):
        member = object.__new__(cls)
        member._value_ = value
        member.fullname = name
        return member

    def __int__(self):
        return self.value
</code></pre>
<p>and in use:</p>
<pre><code>&gt;&gt;&gt; print(Nationality.PL)
Nationality.PL
&gt;&gt;&gt; print(int(Nationality.PL))
0
&gt;&gt;&gt; print(Nationality.PL.fullname)
'Poland'
</code></pre>
<p>The above is more easily written using <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer"><code>aenum</code></a><sup>1</sup>:</p>
<pre><code># using aenum
from aenum import Enum, MultiValue

class Nationality(Enum):
    _init_ = 'value fullname'
    _settings_ = MultiValue

    PL = 0, 'Poland'
    DE = 1, 'Germany'
    FR = 2, 'France'

    def __int__(self):
        return self.value
</code></pre>
<p>which has the added functionality of:</p>
<pre><code>&gt;&gt;&gt; Nationality('Poland')
&lt;Nationality.PL: 0&gt;
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<div class="post-text" itemprop="text">
<p>please use IntEnum</p>
<pre><code>from enum import IntEnum

class loggertype(IntEnum):
    Info = 0
    Warning = 1
    Error = 2
    Fetal = 3

int(loggertype.Info)
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't. Python does not store the order of class elements and <code>dir()</code> will return them in any order.</p>
<p>Seeing from your comment that you really do require a mapping from strings to integers, you should in fact do exactly that:</p>
<pre><code>code_lookup = {
    'PL': ("Poland", 0), 
    'DE': ("Germany", 1), 
    'FR': ("France", 2), 
    ... 
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you just define the values as numbers instead of strings:</p>
<pre><code>class Nationality:
    POLAND = 0
    GERMANY = 1
    FRANCE = 2
</code></pre>
<p>If you need to access the two-letter names, you can simply provide a table that maps them.  (Or a dictionary that maps the other way, etc.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I have seen something like:</p>
<pre><code>PL, FR, DE = range(3)
</code></pre>
<p>Wrap it in a class and <em>viola</em>, you have a namespace for the enumeration.</p>
</div>
<span class="comment-copy">A class is not an enum. Therefor you can't compare.</span>
<span class="comment-copy">you miss names of nationality. I must have them</span>
<span class="comment-copy">@user278618 - I left them out for brevity. The idea was that you'd use a lookup table of some sort somewhere in your <code>Nationality</code> class. You could just as easily substitute in your class attributes, instead of strings.</span>
<span class="comment-copy">Works great. Thanks a lot!</span>
<span class="comment-copy">Please explain your answer.</span>
<span class="comment-copy">This is what I needed, thanks</span>
<span class="comment-copy">I'm using this enum to set value of select which is at few sites with different css and language, and only value property is at each site the same. From this select I must select nationality, and values of options are 0,1,2. I use this casting in c#, so this is from I took this idea.</span>
