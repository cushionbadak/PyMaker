<div class="post-text" itemprop="text">
<p>How to check if a function is a method of some object?</p>
<p>For example:</p>
<pre><code>def check_method(f):
    ...

check_method(lambda x: x + 1)           # &gt;&gt;&gt; False
check_method(SomeClass().some_method)  # &gt;&gt;&gt; True
</code></pre>
<p>There are some special attributes in methods in my 'helloworld' example (e.g. 'im_self', '__self__' etc).  Can I rely on them or there is some nicer way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/library/inspect.html#inspect.ismethod" rel="noreferrer"><code>inspect.ismethod()</code></a>.</p>
<p>The documentation states:</p>
<blockquote>
<p>Return true if the object is a bound method written in Python.</p>
</blockquote>
<p>This means that it will work as you intend for classes that you define in Python. However, for methods of built-in classes like <code>list</code> or classes implemented in extension modules it will return <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is also possible to check against the types defined in the built in <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow">types library</a>:</p>
<pre><code>import types
isinstance(obj.method, types.MethodType) # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A twist to the question involves asking to check if some function <em>name</em> would be available as a method. Since duck typing is considered pythonic there should be a simple</p>
<pre><code>hasmethod(obj, 'some_method')
</code></pre>
<p>but it seems, there isn't.</p>
<p>Duck typing seems to be best done by just trying:</p>
<pre><code>try:
  obj.some_method()
except:
  # try something else
</code></pre>
<p>If someone wants a function to check programmatically if an object has a method with a certain variable name, then the following function has been mentioned:</p>
<pre><code>def hasmethod(obj, method_name):
  return hasattr(obj, method_name) and callable(getattr(obj, method_name))
</code></pre>
<p>But for Python 3 and 3.1 at least you need to get callable() back which was removed. A discussion of the want of bringing it back can be found <a href="http://bugs.python.org/issue10518" rel="nofollow noreferrer">in a python bug entry</a>
Resurrect callable with e.g.:</p>
<pre><code>def callable(obj):
    return isinstance(obj, collections.Callable) 
</code></pre>
<p>This is straight from the above mentioned python bugtracker. 
Other <a href="https://stackoverflow.com/questions/111234/what-is-a-callable-in-python/115349#115349">sources on stackoverflow</a> mention</p>
<pre><code>callable = lambda o: hasattr(o, '__call__') or isinstance(o, collections.Callable)
</code></pre>
<p>which adds the hasattr to the call.
Both work fine in my use case</p>
<pre><code>&gt;&gt;&gt; bstr = b'spam'
&gt;&gt;&gt; str = 'eggs'
&gt;&gt;&gt; hasmethod(str, 'decode')
False
&gt;&gt;&gt; hasmethod(bstr, 'decode')
True
</code></pre>
<p>For more details look at the already cited <a href="https://stackoverflow.com/q/111234/923794">other question</a></p>
</div>
