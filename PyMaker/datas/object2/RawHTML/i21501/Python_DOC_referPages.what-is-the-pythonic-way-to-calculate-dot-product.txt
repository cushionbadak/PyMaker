<div class="post-text" itemprop="text">
<p>I have two lists, one is named as A, another is named as B. Each element in A is a triple, and each element in B is just an number. I would like to calculate the result defined as :</p>
<p>result = A[0][0] * B[0] + A[1][0] * B[1] + ... + A[n-1][0] * B[n-1]</p>
<p>I know the logic is easy but how to write in pythonic way?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy
result = numpy.dot( numpy.array(A)[:,0], B)
</code></pre>
<p><a href="http://docs.scipy.org/doc/numpy/reference/" rel="noreferrer">http://docs.scipy.org/doc/numpy/reference/</a></p>
<p>If you want to do it without numpy, try</p>
<pre><code>sum( [a[i][0]*b[i] for i in range(len(b))] )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.5 has an explicit operator <code>@</code> for the dot product, 
so you can write</p>
<pre><code>a = A @ B
</code></pre>
<p>instead of</p>
<pre><code>a = numpy.dot(A,B)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My favorite Pythonic dot product is:
</p>
<pre><code>sum([i*j for (i, j) in zip(list1, list2)])
</code></pre>
<p><br/>
So for your case we could do:</p>
<pre><code>sum([i*j for (i, j) in zip([K[0] for K in A], B)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from operator import mul

sum(map(mul, A, B))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the operator and the itertools modules:</p>
<pre><code>from operator import mul
from itertools import imap

sum(imap(mul, A, B))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably the most Pythonic way for this kind of thing is to use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html" rel="nofollow">numpy</a>. ;-)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; X = [2,3,5,7,11]
&gt;&gt;&gt; Y = [13,17,19,23,29]
&gt;&gt;&gt; dot = lambda X, Y: sum(map(lambda x, y: x * y, X, Y))
&gt;&gt;&gt; dot(X, Y)
652
</code></pre>
<p>And that's it.</p>
</div>
<div class="post-text" itemprop="text">
<p>This might be repeated solution, however:</p>
<pre><code>&gt;&gt;&gt; u = [(1, 2, 3), (4, 5, 6)]
&gt;&gt;&gt; v = [3, 7]
</code></pre>
<p>In plain <code>Python</code>:</p>
<pre><code>&gt;&gt;&gt; sum([x*y for (x, *x2), y in zip(u,v)])
31
</code></pre>
<p>Or using <code>numpy</code> (as described in <a href="https://stackoverflow.com/a/5919541/2839786">user57368</a>'s answer) :</p>
<pre><code>import numpy as np
&gt;&gt;&gt; np.dot(np.array(u)[:,0], v)
31
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All above answers are correct, but in my opinion the most pythonic way to calculate dot product is:</p>
<pre><code>&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; b=[4,5,6]
&gt;&gt;&gt; sum(map(lambda pair:pair[0]*pair[1],zip(a,b)))
32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a>, a third-party library that implements the <code>dotproduct</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipe</a>:</p>
<pre><code>import more_itertools as mit


a = [1, 2, 3]
b = [7, 8, 9]

mit.dotproduct(a, b)
# 50
</code></pre>
</div>
<span class="comment-copy">The way <code>A</code> is structured, it's a 2D list/matrix.</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/45443562/is-there-really-an-operator-in-python-to-calculate-dot-product" title="is there really an operator in python to calculate dot product">stackoverflow.com/questions/45443562/â€¦</a> for a caveat</span>
