<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong> <br/>
<a href="https://stackoverflow.com/questions/667540/full-command-line-as-it-was-typed">Full command line as it was typed</a></p>
</blockquote>
<p><code>sys.argv</code> is already a parsed array, losing double quotes, double spaces and maybe even tab characters (it all depends on the OS/shell, of course).</p>
<p>How can I access the original string before parsing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Shortly, you don't.</p>
<p>Long: on Unix command line is parsed by the calling program and by the time python starts you already have the command line parsed.</p>
<p>PS. On Windows it is possible, but I suppose you are looking for a general response.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do that explicitly because, this is how a shell passes the arguments to a program.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>sys.argv</code> is all Python got. The shell processed the filename generation (globs), parameter (variable) expansion, quotes, and word splitting before passing the arguments to the Python process (in Unix; in Windows it's the startup actually parsing it, but for portability, you can't rely on that).</p>
<p>However, remember that POSIX shell quoting rules allow passing any characters you may want (except NUL bytes that terminate strings).</p>
<p>Compare starting a process from Python using <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess.call</a> with or without the <code>shell</code> argument set. With <code>shell=False</code> the list of strings is what comes up in the <code>sys.argv</code> in the started process (starting with the script path; parameters processed by Python itself are removed) while with <code>shell=True</code> the string is passed to the shell which interprets it according to its own rules.</p>
</div>
<span class="comment-copy">None of the answers provided so far address the original question: On unix, the origianl command line arguments are in sys.argv. They are what you've got, however, on windows, you have a command line string, where each application is expected to do it's own parsing. (Backwards: I know.)  An answer to this question should suggest how to get the original command line string, whenever applicable.</span>
<span class="comment-copy"><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms683156%28v=vs.85%29.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/windows/desktop/â€¦</a></span>
<span class="comment-copy">"The sys.argv is exactly what you got" is not true. The CPython executable parses the command line and populates <code>sys.argv</code>, according to certain rules. For instance <code>python -c cmd</code>: <code>cmd</code> will not be in <code>sys.argv</code>.</span>
<span class="comment-copy">@Jan-PhilipGehrcke: Formally, you are correct. But I don't think it is relevant here. For script, it will be what you've got (with the script name expanded) and command-line commands are not very useful due to how it's almost impossible to cram python on single line.</span>
<span class="comment-copy">You are right, but I use every opportunity to stress that command line arguments are so full of encoding/decoding, interpretation and re-interpretation, and all kinds of conversion on different levels, that I cannot really like a statement such as "is exactly what you got" :-). Found my down-vote a little too harsh now, but cannot remove it anymore, sorry.</span>
<span class="comment-copy">@Jan-PhilipGehrcke: Ok, I rewrote it not to be so categorical and added some more information (note: edits allow voting again)</span>
