<div class="post-text" itemprop="text">
<p>I am working on a series of unit tests in Python, some of which depend on the value of a configuration variable. These variables are stored in a global Python config file and are used in other modules. I would like to write unit tests for different values of the configuration variables but have not yet found a way to do this.</p>
<p>I do not have the possibility to rewrite the signatures of the methods I'm testing.</p>
<p>This is what I would like to achieve:</p>
<pre><code>from my_module import my_function_with_global_var

class TestSomething(self.unittest):

    def test_first_case(self):
         from config import MY_CONFIG_VARIABLE
         MY_CONFIG_VARIABLE = True
         self.assertEqual(my_function_with_global_var(), "First result")

    def test_second_case(self):
         from config import MY_CONFIG_VARIABLE
         MY_CONFIG_VARIABLE = False
         self.assertEqual(my_function_with_global_var(), "Second result")
</code></pre>
<p>Thanks.</p>
<p>Edit: Made the example code more explicite.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>unittest.mock.patch</code> as in <a href="https://stackoverflow.com/a/34631010/78845">@Flimm's answer</a>, if that's available to you.</p>
<hr/>
<h3>Original Answer</h3>
<p>Don't do this:</p>
<pre><code>from my_module import my_function_with_global_var
</code></pre>
<p>But this:</p>
<pre><code>import my_module
</code></pre>
<p>And then you can inject <code>MY_CONFIG_VARIABLE</code> into the imported <code>my_module</code>, without changing the system under test like so:</p>
<pre><code>class TestSomething(unittest.TestCase): # Fixed that for you!

    def test_first_case(self):
         my_module.MY_CONFIG_VARIABLE = True
         self.assertEqual(my_module.my_function_with_global_var(), "First result")

    def test_second_case(self):
         my_module.MY_CONFIG_VARIABLE = False
         self.assertEqual(my_module.my_function_with_global_var(), "Second result")
</code></pre>
<p>I did something similar in <a href="https://stackoverflow.com/questions/6271947/pyunit-simulating-input-to-stdin/6271995#6271995">my answer to</a> <a href="https://stackoverflow.com/q/6271947/78845">How can I simulate input to stdin for pyunit?</a> .</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably want to mock those global variables instead. The advantage of this is that the globals get reset once you're done. Python ships with a mocking module that lets you do this.</p>
<p><a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="noreferrer"><code>unittest.mock.patch</code></a> be used as a decorator:</p>
<pre><code>class TestSomething(self.unittest):

    @patch('config.MY_CONFIG_VARIABLE', True)
    def test_first_case(self):
         self.assertEqual(my_function_with_global_var(), "First result")
</code></pre>
<p>You can also use it as a context manager:</p>
<pre><code>    def test_first_case(self):
        with patch('config.MY_CONFIG_VARIABLE', True):
            self.assertEqual(my_function_with_global_var(), "First result")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You code imports <code>MY_CONFIG_VARIABLE</code> into the local scope and then immediately overwrites the name with a different object.  That won't change the value in the <code>config</code> module.  Try</p>
<pre><code>import config
config.MY_CONFIG_VARIABLE = False
</code></pre>
<p>instead.</p>
</div>
<span class="comment-copy">Awesome. This is indeed working.</span>
<span class="comment-copy">@badzil: Excellent. Now that you have unit-test coverage, you can remove the (need for the) global variable ;-)</span>
<span class="comment-copy">I wish I could.</span>
<span class="comment-copy">This approach opens you up to a subtle bug, because the value of <code>my_module.MY_CONFIG_VARIABLE</code> isn't reset when the test completes. If subsequent tests run in the same process use <code>MY_CONFIG_VARIABLE</code> without expecting it to be changed, your tests may fail or pass based on the order they're executed.</span>
<span class="comment-copy">You're right. This is subtle but major drawback and is not the way I'd do things in 2017. I'm not sure mock.patch even shipped with Python in 2011 when I wrote this answer.</span>
<span class="comment-copy">Fantastic approach: simple and effective. Thanks for sharing. Specially useful with @Michele 's edit.</span>
<span class="comment-copy">In my case I didn't care about the initial value, but needed to verify the global was written to. That's possible using <code>with patch('config') as mock_config</code> and <code>self.assertEqual(True, mock_config.MY_CONFIG_VARIABLE)</code></span>
<span class="comment-copy">Is it possible to follow a similar approach to patch a local variable in an instance method?</span>
<span class="comment-copy">This does not seem to work when the global variable is used as a function's default parameter value, e.g. <code>def my_function_with_global_var(s=MY_CONFIG_VARIABLE)</code>.</span>
<span class="comment-copy">Maybe I forgot to mention something else. The functions I'm testing are in a separate module and therefore have already imported the global variable I need to modify. Your proposed modification only modifies the global variable in the test file.</span>
<span class="comment-copy">@badzil: Probably the best option is not to use <code>from config import MY_CONFIG_VARIABLE</code> in the modules you are testing, but rather <code>import config</code> and access the variables as <code>config.MY_CONFIG_VARIABLE</code>.</span>
<span class="comment-copy">Thanks. This works although I was looking to not modify the module I am testing. I'm guessing that as the module to test uses the import ... from ... directive, there is no way to change the value of the global variable after the import.</span>
<span class="comment-copy">@badzil: If the value is immutable (like the <code>bool</code> in the example), than you can't change it.  That's somehow the nature of immutable objects. -- Another option is to <code>reload()</code> and reimport all modules after changing the value in <code>config</code>.</span>
