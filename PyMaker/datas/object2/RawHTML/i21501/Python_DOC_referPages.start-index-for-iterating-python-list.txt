<div class="post-text" itemprop="text">
<p>What is the best way to set a start index when iterating a list in Python. For example, I have a list of the days of the week - Sunday, Monday, Tuesday, ... Saturday - but I want to iterate through the list starting at Monday. What is the best practice for doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation">slicing</a>:</p>
<pre><code>for item in some_list[2:]:
    # do stuff
</code></pre>
<p>This will start at the third element and iterate to the end.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="noreferrer"><code>islice</code></a> has the advantage that it doesn't need to copy part of the list</p>
<pre><code>from itertools import islice
for day in islice(days, 1, None):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can always loop using an index counter the conventional C style looping:</p>
<pre><code>for i in range(len(l)-1):
    print l[i+1]
</code></pre>
<p>It is always better to follow the "loop on every element" style because that's the normal thing to do, but if it gets in your way, just remember the conventional style is also supported, always.</p>
</div>
<div class="post-text" itemprop="text">
<p>stdlib will hook you up son! </p>
<p><a href="http://docs.python.org/2/library/collections.html?highlight=deque#collections.deque.rotate" rel="noreferrer"><code>deque.rotate()</code></a>:</p>
<pre><code>#!/usr/local/bin/python2.7

from collections import deque

a = deque('Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' '))
a.rotate(3)
deque(['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a rotation generator which doesn't need to make a warped copy of the input sequence ... may be useful if the input sequence is much larger than 7 items.</p>
<pre><code>&gt;&gt;&gt; def rotated_sequence(seq, start_index):
...     n = len(seq)
...     for i in xrange(n):
...         yield seq[(i + start_index) % n]
...
&gt;&gt;&gt; s = 'su m tu w th f sa'.split()
&gt;&gt;&gt; list(rotated_sequence(s, s.index('m')))
['m', 'tu', 'w', 'th', 'f', 'sa', 'su']
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you want is to print from <code>Monday</code> onwards, you can use <code>list</code>'s <code>index</code> method to find the position where "Monday" is in the list, and iterate from there as explained in other posts. Using <code>list.index</code> saves you hard-coding the index for "Monday", which is a potential source of error:</p>
<pre><code>days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
for d in days[days.index('Monday'):] :
   print d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to "wrap around" and effectively rotate the list to start with Monday (rather than just chop off the items prior to Monday):</p>
<pre><code>dayNames = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 
            'Friday', 'Saturday',  ]

startDayName = 'Monday'

startIndex = dayNames.index( startDayName )
print ( startIndex )

rotatedDayNames = dayNames[ startIndex: ] + dayNames [ :startIndex ]

for x in rotatedDayNames:
    print ( x )
</code></pre>
</div>
<span class="comment-copy">Do you just want to loop until Saturday, or do you want it to wrap around and print Sunday last?</span>
<span class="comment-copy">I just wanted to loop until Saturday. I hadn't realized until now that you can use slicing in Python lists.</span>
<span class="comment-copy">is there a solution that deals with generators/iterables too and not only lists? Or really large lists?</span>
<span class="comment-copy">This is exactly what I was looking for. Thanks!</span>
<span class="comment-copy">Isn't this inefficient for large lists? I believe this slice operation has to copy the list elements that are being referenced into a new list.</span>
<span class="comment-copy">Yes this is inefficient for large lists. See gnibblers answer below for a solution that doesn't copy.</span>
<span class="comment-copy">Also works on array. Thanks.</span>
<span class="comment-copy">how do u do this though if u are looping using a generators/iterables?</span>
<span class="comment-copy">Yes - and would be easy to extend to generate an infinite recurring sequence.</span>
<span class="comment-copy">can't help thanking @JohnMachin: great work for someone dead these 264 years</span>
