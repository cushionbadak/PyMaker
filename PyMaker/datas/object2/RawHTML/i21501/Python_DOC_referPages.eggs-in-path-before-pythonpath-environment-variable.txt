<div class="post-text" itemprop="text">
<p>If I have packages installed from <em>easy_install</em>, the eggs are prepended to <code>sys.path</code> before the items in the <code>PYTHONPATH</code> variable.</p>
<p>For example, if I have an egg package called <em>foo</em> installed as well as a package called <em>foo</em> in the current directory, and then do this:</p>
<pre><code>PYTHONPATH="." python
&gt;&gt;&gt; import foo
</code></pre>
<p>This will use the egg version of <code>foo</code> instead of the local directory. Inspecting <code>sys.path</code> shows that eggs are placed <strong>before</strong> items from <code>PYTHONPATH</code>. This seems broken. Is there any way to override this behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately this is done with a hard-coded template deep inside <code>setuptools/command/easy_install.py</code>.  You could create a patched setuptools with an edited template, but I've found no clean way to extend easy_install from the outside.</p>
<p>Each time easy_install runs it will regenerate the file <code>easy_install.pth</code>. Here is a quick script which you can run after easy_install, to remove the header and footer from <code>easy_install.pth</code>. You could create a wrapper shell script to run this immediately after <code>easy_install</code>:</p>
<pre><code>#!/usr/bin/env python
import sys
path = sys.argv[1]
lines = open(path, 'rb').readlines()
if lines and 'import sys' in lines[0]:
    open(path, 'wb').write(''.join(lines[1:-1]) + '\n')
</code></pre>
<p>Example:</p>
<pre><code>% easy_install gdata
% PYTHONPATH=xyz python -c 'import sys; print sys.path[:2]'
['', '/Users/pat/virt/lib/python2.6/site-packages/gdata-2.0.14-py2.6.egg']

% ./fix_path ~/virt/lib/python2.6/site-packages/easy_install.pth
% PYTHONPATH=xyz python -c 'import sys; print sys.path[:2]'
['', '/Users/pat/xyz']
</code></pre>
<p>For more clarification, here is the format of <code>easy-install.pth</code>:</p>
<pre><code>import sys; sys.__plen = len(sys.path)
./gdata-2.0.14-py2.6.egg
import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)
</code></pre>
<p>The two <code>import sys</code> lines are the culprit causing the eggs to appear at the start of the path. My script just removes those <code>sys.path</code>-munging lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using the <code>-S</code> command-line option to suppress <code>*.pth</code> processing:</p>
<pre><code>python -c 'import sys; print("\n".join(sys.path))'
python -S -c 'import sys; print("\n".join(sys.path))'
</code></pre>
<p><a href="https://docs.python.org/3/library/site.html#site.main" rel="nofollow noreferrer">https://docs.python.org/3/library/site.html#site.main</a></p>
<p>You can also use <code>-S</code> with <code>site.main()</code> to delay <code>*.pth</code> processing until runtime, say to capture the original sys.path for appending:</p>
<pre><code>export PYTHONPATH=$(
  PYTHONPATH='' \
  python -c 'import sys; \
    sys.path.extend(sys.argv[1:]); old=list(sys.path); \
    import site; site.main(); \
    [ old.append(p) for p in sys.path if p not in old ]; \
    sys.path=old; \
    print ":".join(sys.path)' \
  $EXTRA_PATH $ANOTHER_PATH)

python -S ... # using explicit PYTHONPATH
</code></pre>
<ul>
<li>Start from explicit empty <code>PYTHONPATH</code></li>
<li>Append to sys.path explicitly with extend</li>
<li>Import site and call <code>site.main()</code></li>
<li>Append new paths to old path and then install it in sys.path</li>
<li>Print with ":" for <code>PYTHONPATH</code></li>
<li><code>python -S</code> is desirable for later runs only using <code>$PYTHONPATH</code></li>
<li><code>python -S</code> may or may not be desirable while setting <code>PYTHONPATH</code> (depending on if you need sys.path expanded before extending)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I have done something like the following to prepend to the system path when running a top-level python executable file:</p>
<pre><code>import sys
sys.path = ["&lt;your python path&gt;"] + sys.path
</code></pre>
<p>Often, the <code>"&lt;your python path&gt;"</code> for me involves use of the <code>__file__</code> attribute to do relative look up for a path that includes the top-level module for my project.  This is not recommended for use in producing, eggs, though I don't seem to mind the consequences.  There may be another alternative to <code>__file__</code>.</p>
</div>
<span class="comment-copy">Are you sure it won't pick up a package from the current directory? Normally the first entry in <code>sys.path</code> should always be the empty string i.e. it'll look in the current directory first.</span>
<span class="comment-copy">No, because the egg loader <i>prepends</i> its path, so it ends up before the current directory.</span>
<span class="comment-copy">It prepends before the other <i>site</i> packages, but the first entry in <code>sys.path</code> is always <code>''</code> when running interactively, see <a href="http://docs.python.org/2/library/sys.html?highlight=sys.path#sys.path" rel="nofollow noreferrer">the docs</a>. That's the case for me whatever the <code>PYTHONPATH</code>.</span>
<span class="comment-copy">It's really irritating that the user site doesn't have priority when paths/eggs are added to <code>sys.path</code>. On a machine where I don't have sudo I haven't found any way to override system-wide installed packages with user-installed ones. That looks like a pretty serious flaw in the way <code>sys.path</code> is assembled.</span>
<span class="comment-copy">I don't have enough rep to comment on the answer by samplebias, but here's a link to a bug report that gives the specific patch suggested by samplebias to fix this issue in setuptools: <a href="https://bugs.launchpad.net/ubuntu/+source/distribute/+bug/821000" rel="nofollow noreferrer">bugs.launchpad.net/ubuntu/+source/distribute/+bug/821000</a></span>
