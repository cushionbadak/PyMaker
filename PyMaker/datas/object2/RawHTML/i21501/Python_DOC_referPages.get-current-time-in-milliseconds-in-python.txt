<div class="post-text" itemprop="text">
<p>How can I get the current time in milliseconds in Python? </p>
</div>
<div class="post-text" itemprop="text">
<p>For what I needed, here's what I did, based on @samplebias' comment above:</p>
<pre><code>import time
millis = int(round(time.time() * 1000))
print millis
</code></pre>
<p>Quick'n'easy. Thanks all, sorry for the brain fart.</p>
<p>For reuse:</p>
<pre><code>import time

current_milli_time = lambda: int(round(time.time() * 1000))
</code></pre>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; current_milli_time()
1378761833768
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/time.html#time.time" rel="noreferrer"><code>time.time()</code></a> may only give resolution to the second, the preferred approach for milliseconds is <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime" rel="noreferrer"><code>datetime</code></a>.</p>
<pre><code>from datetime import datetime
dt = datetime.now()
dt.microsecond
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def TimestampMillisec64():
    return int((datetime.datetime.utcnow() - datetime.datetime(1970, 1, 1)).total_seconds() * 1000) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>another solution is the function you can embed into your own utils.py</p>
<pre><code>import time as time_ #make sure we don't override time
def millis():
    return int(round(time_.time() * 1000))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a simple method in your code that returns the milliseconds with datetime:</p>
<pre><code>from datetime import datetime
from datetime import timedelta

start_time = datetime.now()

# returns the elapsed milliseconds since the start of the program
def millis():
   dt = datetime.now() - start_time
   ms = (dt.days * 24 * 60 * 60 + dt.seconds) * 1000 + dt.microseconds / 1000.0
   return ms
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just sample code:</p>
<pre><code>import time
timestamp = int(time.time()*1000.0)
</code></pre>
<p>Output:
1534343781311</p>
</div>
<div class="post-text" itemprop="text">
<p>The simpliest way I've found to get the current UTC time in milliseconds is:</p>
<pre class="lang-py prettyprint-override"><code># timeutil.py
import datetime


def get_epochtime_ms():
    return round(datetime.datetime.utcnow().timestamp() * 1000)

# sample.py
import timeutil


timeutil.get_epochtime_ms()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Microseconds is 1/1000000 seconds, milliseconds is 1/1000 seconds so</p>
<p>dt.microseconds/1000.0 should be dt.microseconds/1000000.0</p>
</div>
<div class="post-text" itemprop="text">
<pre>
    from datetime import datetime
    d = datetime.now()
    print d.microsecond/1000 + d.second*1000 
</pre>
</div>
<span class="comment-copy"><code>import time; ms = time.time()*1000.0</code></span>
<span class="comment-copy">@samplebias: <code>time.time()</code> may provide worse precision than <code>datetime.utcnow()</code> on some platforms and python versions.</span>
<span class="comment-copy">In milliseconds since <i>when</i>? If you mean since the epoch (midnight 1 January 1970 UTC), see this: <a href="http://stackoverflow.com/questions/18169099/python-get-milliseconds-since-epoch-millisecond-accuracy-not-seconds1000" title="python get milliseconds since epoch millisecond accuracy not seconds1000">stackoverflow.com/questions/18169099/…</a></span>
<span class="comment-copy">For true microsecond-resolution milliseconds time stamps see here: <a href="http://stackoverflow.com/questions/38319606/how-to-get-millisecond-and-microsecond-resolution-timestamps-in-python" title="how to get millisecond and microsecond resolution timestamps in python">stackoverflow.com/questions/38319606/…</a></span>
<span class="comment-copy">This may not give the correct answer.  According to the docs, "Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second"</span>
<span class="comment-copy">I am wondering, why do you need to <code>round</code>? It seems <code>int(time.time() * 1000)</code> is enough?</span>
<span class="comment-copy">@MaximVladimirsky Python's <code>int</code> method actually <code>floor</code>s values, it doesn't round them. Thus, <code>round()</code>ing <code>25.7</code> will give us <code>26</code> as expected, but just sending it to <code>int()</code> will give us <code>25</code>. Weird, but that's just the way things work. Interesting.</span>
<span class="comment-copy">IMO I'd use floor and not round, but that's just me. If someone asks what the hour is, and it's 7:32, the number they probably want is 7, not 8.</span>
<span class="comment-copy">@davr, we're talking about rounding microseconds to milliseconds...</span>
<span class="comment-copy">not quite useful - this only gives you the microseconds <b>within</b> the dt's second. see <a href="http://stackoverflow.com/a/1905423/74632">stackoverflow.com/a/1905423/74632</a></span>
<span class="comment-copy">+1 because this is the official way to get a reliable timestamp from the system.</span>
<span class="comment-copy">@Jan: On old CPython versions on some systems, <a href="http://stackoverflow.com/a/28574340/4279"><code>datetime.utcnow()</code> could have provided a better resolution than <code>time.time()</code></a>. Though on most systems or in <a href="http://stackoverflow.com/a/27835769/4279">the current CPython, both <code>time.time()</code></a> and <code>datetime.utcnow()</code> use the same underlying OS API to get the time. <a href="http://stackoverflow.com/a/21858377/4279">@user3324131 shows how to get milliseconds from <code>datetime.utcnow()</code></a>.</span>
<span class="comment-copy">-1. this is an incorrect answer to this question. as @Boris commented, this does not give "the time in microseconds", e.g. does not include days, hours, seconds in number of microseconds.</span>
<span class="comment-copy">+1 This gives a correct value and arithmetic can be assumed to work because math. If the user needs the current time in milliseconds/microseconds, simple arithmetic will get them there. If a time delta is needed--which is not asked for--arithmetic, again, saves the day.</span>
<span class="comment-copy">you could inline the formula for <code>.total_seconds()</code> to produce (possibly) better precision: <a href="http://stackoverflow.com/a/8778548/4279"><code>(td.microseconds + (td.seconds + td.days * 86400) * 10**6) / 10**3</code> (with true division enabled)</a> Or if you want to truncate the milliseconds then use <code>// 10**3</code>.</span>
<span class="comment-copy">This seems to be the best answer if using datetime</span>
<span class="comment-copy">this is the difference between two times in milliseconds, combining your method with @Jason s answer gives the current timestamp in milliseconds... Thinking about it, the UNIX timestamp would be your method with <code>start_time</code> = datetime(1970,1,1)</span>
<span class="comment-copy">local time may be ambiguous and non-monotonous (due to DST transitions or other reasons to change the local utc offset). Use <code>.utcnow()</code> instead or if you don't need the absolute time then you could use <code>time.monotonous()</code>. Note: there is a subtle difference due to floating-point arithmetics between <code>some_int + dt.microseconds/ 1000.0</code> and the formula <code>( ) / 10**3</code> with true division enabled. See <a href="http://stackoverflow.com/q/8777753/4279">the explicit formula and the link for <code>total_seconds()</code> in the related answer</a></span>
<span class="comment-copy">Please <a href="http://stackoverflow.com/help/formatting">format</a> your answer to improve its readability.  Also, you haven't actually answered the first part of the question "How can get the current time?".</span>
