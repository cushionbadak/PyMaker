<div class="post-text" itemprop="text">
<p>I want to do subprocess.call, and get the output of the call into a string. Can I do this directly, or do I need to pipe it to a file, and then read from it? </p>
<p>In other words, can I somehow redirect stdout and stderr into a string? </p>
</div>
<div class="post-text" itemprop="text">
<p>No, you can't read the output of subprocess.call() directly into a string. </p>
<p>In order to read the output of a command into a string, you need to use subprocess.Popen(), e.g.:</p>
<pre><code>&gt;&gt;&gt; cmd = subprocess.Popen('ls', stdout=subprocess.PIPE)
&gt;&gt;&gt; cmd_out, cmd_err = cmd.communicate()
</code></pre>
<p>cmd_out will have the string with the output of the command.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>subprocess</code> module provides a method <code>check_output()</code> that runs the provided command with arguments (if any), and returns its output as a byte string.</p>
<pre><code>output = subprocess.check_output(["echo", "hello world"])
print output
</code></pre>
<p>The code above will print <code>hello world</code></p>
<p>See docs: <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="noreferrer">https://docs.python.org/2/library/subprocess.html#subprocess.check_output</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is an extension of mantazer's answer to python3. You can still use the <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>subprocess.check_output</code></a> command in python3:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(["echo", "hello world"])
b'hello world\n'
</code></pre>
<p>however now it gives us a byte string. To get a real python string we need to use decode:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(["echo", "hello world"]).decode(sys.stdout.encoding)
'hello world\n'
</code></pre>
<p>Using <code>sys.stdout.encoding</code> as the encoding rather than just the default <code>UTF-8</code> should make this work on any OS (at least in theory).</p>
<p>The trailing newline (and any other extra whitespace) can be easily removed using <code>.strip()</code>, so the final command is:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(["echo", "hello world"]
                            ).decode(sys.stdout.encoding).strip()
'hello world'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess.call()</code> takes the same arguments as <code>subprocess.Popen()</code>, which includes the <code>stdout</code> and <code>stderr</code> arguments. See the docs for details.</p>
</div>
<span class="comment-copy">maybe the same as <a href="http://stackoverflow.com/questions/2502833/python-store-output-of-subprocess-call-in-a-string" title="python store output of subprocess call in a string">stackoverflow.com/questions/2502833/â€¦</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2502833/store-output-of-subprocess-popen-call-in-a-string">Store output of subprocess.Popen call in a string</a></span>
<span class="comment-copy">How to write the output to a file? I tried passing the file name in command itself using redirect '&gt;' but when next line in the python code tries to see the contents it's empty</span>
<span class="comment-copy">How to write the output to a file? I tried passing the file name in command itself using redirect '&gt;' but when next line in the python code tries to see the contents it's empty</span>
<span class="comment-copy">@SanjeevkumarM Use the <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">stdout</a> argument, give it a file <i>object</i> to write to (e.g. as created by <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">open</a>, make sure you close it afterwards).</span>
<span class="comment-copy">Looking through docs online isn't very clear to me, could you provide an example, like the other answer using Popen. Or post link with a clear example of how to get stdout value when stdout=subprocess.PIPE for example. Is the answer the same as the Popen answer?</span>
<span class="comment-copy">It is in fact the same, since both functions take the same arguments.</span>
