<div class="post-text" itemprop="text">
<p>My models.py:</p>
<pre><code>SHOP1_CHOICES = (
    ('Food Court', 'Food Court'),
    ('KFC', 'KFC'),

)

SHOP2_CHOICES = (
    ('Sports Arena', 'Sports Arena'),
    ('Disco D', 'Disco D'),

)

SHOP3_CHOICES = (
    ('Bowling Arena', 'Bowling Arena'),
    ('Cinemax', 'Cinemax'),

)

class Feed(models.Model):
  gender = models.CharField(max_length=5, choices=GENDER_CHOICES, default='girl')
  name =models.CharField(max_length=25)
  shop=models.CharField(max_length=20)
  location=models.CharField(max_length=25, choices=SHOP1_CHOICES)
</code></pre>
<p>Here if <code>Feed.shop == 'shop1'</code> I want to load <code>SHOP1_CHOICES</code> on <code>Feed.location</code>. Currently irrespective of what shop, it just displays the <code>SHOP1_CHOICES</code> (no surprise).How can I implement it? I am stuck, please help.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is my approach:</p>
<p>I use lazy for lazy load:</p>
<pre><code>from django.utils.functional import lazy
</code></pre>
<p>Here, a helper to chose options:</p>
<pre><code>def help_SHOP_CHOICES():
    SHOP1_CHOICES = [
        ('Food Court', 'Food Court'),
        ('KFC', 'KFC'),
      ]
    SHOP3_CHOICES = [
        ('Bowling Arena', 'Bowling Arena'),
        ('Cinemax', 'Cinemax'),
      ]
    return random.choice( SHOP1_CHOICES + SHOP3_CHOICES )   # choose one
</code></pre>
<p>Finally the model with dynamic choices:</p>
<pre><code>class Feed(models.Model):
  ...
  location=models.CharField(max_length=25, choices=SHOP1_CHOICES)

  def __init__(self, *args, **kwargs):
     super(Feed, self).__init__(*args, **kwargs)
     self._meta.get_field('location').choices = \
                        lazy(help_SHOP_CHOICES,list)()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the Django docs: <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#choices" rel="noreferrer">http://docs.djangoproject.com/en/dev/ref/models/fields/#choices</a></p>
<blockquote>
<p>Finally, note that choices can be any iterable object -- not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking choices to be dynamic, you're probably better off using a proper database table with a ForeignKey. choices is meant for static data that doesn't change much, if ever.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you should do this on the model, form is a better place. Or you should rethink your models. For example:</p>
<pre><code>class Location(models.Model):
    pass

class Shop(models.Model):
    location = models.ForeignKey(Location)

class Feed(models.Model):
     shop = models.ForeignKey()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use some Ajax functionality. There's no way that I know where you can do it in standard django admin interface without hacking the admin CSS, templates etc.</p>
<p>I would recommend you to use some kind of cascading library, to implement this functionality in your own custom views using ModelForms.</p>
<p>I have done the same with jquery plugin Cascade in a few cases.There are better implementations, but this also works fine. See link below</p>
<p><a href="http://plugins.jquery.com/project/cascade" rel="nofollow">http://plugins.jquery.com/project/cascade</a></p>
</div>
<span class="comment-copy">Where does choice() come from?</span>
<span class="comment-copy">Where does choice come from? choice( SHOP1_CHOICES, SHOP3_CHOICES )</span>
<span class="comment-copy">ok, this is just a sample. Choice <a href="http://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer">comes from random</a>. You should implement your own logic for your project! Not tested but perhaps you can send <code>self</code> as <code>help_SHOP_CHOICES</code> parameter. @Harry, is this you are talking about?</span>
<span class="comment-copy">Well no they fixed the syntax at least on the tuple, but yeah choice is undefined.</span>
<span class="comment-copy">In Django 1.11, the get_field_by_name() is deprecated. To do this in Django 1.1, you replace it with: <code>self._meta.get_field('location').choices = lazy(help_SHOP_CHOICES, list)()</code> where help_SHOP_CHOICES would be a normal tuple iterable you make for a choice field</span>
