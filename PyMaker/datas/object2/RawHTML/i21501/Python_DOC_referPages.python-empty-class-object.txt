<div class="post-text" itemprop="text">
<p>I'm teaching a python class on Object Oriented Programming and as I'm brushing up on how to explain Classes, I saw an empty class definition:</p>
<pre><code>class Employee:
    pass
</code></pre>
<p>the example then goes on to define a name and other attributes for an object of this class:</p>
<pre><code>john = Employee()
john.full_name = "john doe"
</code></pre>
<p>interesting!</p>
<p>I'm wondering if there's a way to dynamically define a function for an instance of a class like this? something like:</p>
<pre><code>john.greet() = print 'hello world!'
</code></pre>
<p>this doesn't work in my python interpreter but is there another way of doing it?</p>
</div>
<div class="post-text" itemprop="text">
<p>A class is more or less a fancy wrapper for a <code>dict</code> of attributes to objects. When you instantiate a class you can assign to its attributes, and those will be stored in <code>foo.__dict__</code>; likewise, you can look in <code>foo.__dict__</code> for any attributes you have already written.</p>
<p>This means you can do some neat dynamic things like:</p>
<pre><code>class Employee: pass
def foo(self): pass
Employee.foo = foo
</code></pre>
<p>as well as assigning to a particular instance. (EDIT: added <code>self</code> parameter)</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with <code>lambda</code>:</p>
<pre><code>john.greet = lambda : print( 'hello world!' )
</code></pre>
<p>The you'll be able to do:</p>
<pre><code>john.greet()
</code></pre>
<hr/>
<p><strong>EDIT</strong>: Thanks <em>Thomas K</em> for the note - this works on <code>Python 3.2</code> and not for Python2, where <code>print</code> appeared to be <code>statement</code>. But this will work for <code>lambda</code>s, without <em>statements</em> (right? Sorry, I know only <code>python3.2</code> (: )</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use AttrDict</p>
<pre><code>&gt;&gt;&gt; from attrdict import AttrDict
&gt;&gt;&gt; my_object = AttrDict()
&gt;&gt;&gt; my_object.my_attribute = 'blah'
&gt;&gt;&gt; print my_object.my_attribute
blah
&gt;&gt;&gt; 
</code></pre>
<p>Install attrdict from PyPI: </p>
<pre><code>pip install attrdict 
</code></pre>
<p>It's useful in other situations too - like when you need attribute access to dict keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also use "named tuples" from the <code>collection</code> standard module. Named tuples work like "ordinary" tuples but the elements have names and you can access the elements using the "dot syntax". From the <a href="https://docs.python.org/3/library/collections.html?highlight=named%20tuple#collections.namedtuple" rel="nofollow">collection docs</a>:</p>
<pre><code>&gt;&gt;&gt; # Basic example
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; p = Point(11, y=22)     # instantiate with positional or keyword arguments
&gt;&gt;&gt; p[0] + p[1]             # indexable like the plain tuple (11, 22)
33
&gt;&gt;&gt; x, y = p                # unpack like a regular tuple
&gt;&gt;&gt; x, y
(11, 22)
&gt;&gt;&gt; p.x + p.y               # fields also accessible by name
33
&gt;&gt;&gt; p                       # readable __repr__ with a name=value style
Point(x=11, y=22)
</code></pre>
</div>
<span class="comment-copy">Possible? Yes. A good idea? Rarely (outside of some metaprogramming, of course).</span>
<span class="comment-copy">The shortest empty class definition I've seen is from <a href="http://www.gossamer-threads.com/lists/python/python/832915#832915" rel="nofollow noreferrer">gossamer-threads.com/lists/python/python/832915#832915</a>: <code>Employee=type('Employee',(),{})</code> and then <code>john=Employee()</code> etc.</span>
<span class="comment-copy">Your example won't work as intended: <code>john.foo()</code> will raise a <code>TypeError</code>, because there is no <code>self</code> parameter<code>. Putting a function on a class turns it to a method, so it needs to take a </code>self<code>. On the other hand, if you assign a function to a instance, it remains a function and has no access to the instance </code>self`, which is usually not useful.</span>
<span class="comment-copy">@Jochen: you are of course correct. Ta! To the OP: it will probably help if you understand what went wrong and why this fixes it!</span>
<span class="comment-copy">@Jochen, thanks for adding some color to this. how important/useful is access to a <code>self</code> if the function being defined is only object specific (i think). In other words, this function is not being defined for all objects of type Employee (unless you use @katrielalex's example and define it using ClassName), but only for the instance of the class (as in my "john" example in the OP)</span>
<span class="comment-copy">@Ramy: you should never do that unless you have a <b>really really REALLY</b> good reason. Dynamically changing instances without modifying their base class will cause you all sorts of headaches, because all sorts of assumptions that should hold will be violated. (For instance, if you overwrite a method in the base class with a subtly different one only for <code>john</code>, the bug will be a royal PITA to track down) Instead, just put all the methods on the base class.</span>
<span class="comment-copy">This doesn't actually work: lambdas can't contain statements.</span>
<span class="comment-copy">@katrielalex - Works perfect on my python 3.2 (with added parentheses for <code>print</code>, of course). What statemets?</span>
<span class="comment-copy">doesn't work in PRE python 3.x aparently</span>
<span class="comment-copy">@Kirii: In Python 2, <code>print</code> is a statement. You're adding brackets because in Python 3, it became a function.</span>
<span class="comment-copy">Since the OP wanted to dynamically define a function, perhaps the <code>print</code> example wasn't the best. +1</span>
