<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1781571/how-to-concatenate-two-dictionaries-to-create-a-new-one-in-python">how to concatenate two dictionaries to create a new one in Python? [duplicate]</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I have two dictionaries and I'd like to be able to make them one:</p>
<p>Something like this pseudo-Python would be nice:</p>
<pre><code>dic0 = {'dic0': 0}
dic1 = {'dic1': 1}

ndic = dic0 + dic1
# ndic would equal {'dic0': 0, 'dic1': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're interested in creating a new dict without using intermediary storage: (this is faster, and in my opinion, cleaner than using dict.items())</p>
<pre><code>dic2 = dict(dic0, **dic1)
</code></pre>
<p>Or if you're happy to use one of the existing dicts:</p>
<pre><code>dic0.update(dic1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; dic0 = {'dic0':0}
&gt;&gt;&gt; dic1 = {'dic1':1}
&gt;&gt;&gt; ndic = dict(dic0.items() + dic1.items())
&gt;&gt;&gt; ndic
{'dic0': 0, 'dic1': 1}
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for the <a href="http://docs.python.org/library/stdtypes.html#mapping-types-dict" rel="noreferrer">update method</a></p>
<pre><code>dic0.update( dic1 )
print( dic0 ) 
</code></pre>
<p>gives</p>
<pre><code>{'dic0': 0, 'dic1': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are quite a few ways to add dictionaries.</p>
<p>You can use Python3's dictionary unpacking feature.</p>
<pre><code>ndic = {**dic0, **dic1}
</code></pre>
<p>Or create a new dict by adding both items.</p>
<pre><code>ndic = dict(dic0.items() + dic1.items())
</code></pre>
<p>If your ok to modify <code>dic0</code></p>
<pre><code>dic0.update(dic1)
</code></pre>
<p>If your <strong>NOT</strong> ok to modify <code>dic0</code></p>
<pre><code>ndic = dic0.copy()
ndic.update(dic1)
</code></pre>
<p>If all the keys in one dict are ensured to be strings (<code>dic1</code> in this case, of course args can be swapped)</p>
<pre><code>ndic = dict(dic0, **dic1)
</code></pre>
<p>In some cases it may be handy to use dict comprehensions (Python 2.7 or newer),<br/>Especially if you want to filter out or transform some keys/values at the same time.</p>
<pre><code>ndic = {k: v for d in (dic0, dic1) for k, v in d.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>dic0.update(dic1)
</code></pre>
<p>Note this doesn't actually return the combined dictionary, it just mutates <code>dic0</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Please search the site before asking questions next time: <a href="https://stackoverflow.com/questions/1781571/how-to-concatenate-two-dictionaries-to-create-a-new-one-in-python">how to concatenate two dictionaries to create a new one in Python?</a></p>
<p>The easiest way to do it is to simply use your example code, but using the items() member of each dictionary. So, the code would be:</p>
<pre><code>dic0 = {'dic0': 0}
dic1 = {'dic1': 1}
dic2 = dict(dic0.items() + dic1.items())
</code></pre>
<p>I tested this in IDLE and it works fine. 
However, the previous question on this topic states that this method is slow and chews up memory. There are several other ways recommended there, so please see that if memory usage is important.</p>
</div>
<span class="comment-copy">I'd love to know <i>why</i> Python doesn't allow this. It seems logical to me that it would perform a non-commutative operation that results in a new dict instance. But I'm probably missing something obvious...</span>
<span class="comment-copy">@Sam Possible problem: {'dic0':0} + {'dic0':1}. What to do?</span>
<span class="comment-copy">@palsch {'dic0':0} + {'dic0':1} should be equivalent to d={'dic0':0}; d.update({'dic0':1}) ?</span>
<span class="comment-copy">good answer, but so non-intuitive. i wish '+' was implemented...</span>
<span class="comment-copy">Not very reliable: <a href="http://stackoverflow.com/a/2799082/1959808">stackoverflow.com/a/2799082/1959808</a></span>
<span class="comment-copy">The first line fails if the keys are anything other than strings.</span>
<span class="comment-copy">@BerryTsakala The problem with <code>+</code> is what happens in case of conflicts ? <code>.update()</code> is properly asymmetric.</span>
<span class="comment-copy">Note that the equivalent syntax for this in Python 3.x is <code>ndic = list(dict(dic0.items()) + list(dic1.items()))</code> since <code>.items()</code> not longer returns a list, but a (iterable)view</span>
<span class="comment-copy">@BryceGuinta I assume you meant <code>ndic = dict(list(dic0.items()) + list(dic1.items()))</code></span>
<span class="comment-copy">@dimo414 Yes, my bad. I can't change it now however. I use <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow noreferrer">ChainMap</a> from <code>collections</code> to achieve this functionality now via <code>dict(ChainMap(dic1, dic0))</code>. However I have had to grab the source code from <a href="https://pypi.python.org/pypi/chainmap/1.0.2" rel="nofollow noreferrer">the chainmap pypi package</a> for Python2.7. Notice how I switched the order of the dicts. In the Vijay's example the rightmost keys' values overwrite the leftmost while ChainMap gets it right and the leftmost keys' values have precedence over the right.</span>
<span class="comment-copy">Nice, although it modifies dic0. I'm not sure if that is acceptable to the original poster.</span>
<span class="comment-copy">Your dict comp is, as I like to say, Money!</span>
<span class="comment-copy">FYI, this creates a list of tuples, you'd need to run <code>dict(dic0.items() + dic1.items())</code></span>
