<div class="post-text" itemprop="text">
<p>I have a config file as follows:</p>
<pre><code>[job]
mailto=bob
logFile=blahDeBlah.txt
</code></pre>
<p>I want to read the options using <code>SafeConfigParser</code>:</p>
<pre><code>values = {} 
config = ConfigParser.SafeConfigParser()
try:
    config.read(configFile)
    jobSection = 'job'

    values['mailto'] = config.get( jobSection, 'mailto' )
    values['logFile'] = config.get( jobSection, 'logFile' )
    # it is not there
    values['nothingThere'] = config.get( jobSection, 'nothingThere' )
.... # rest of code
</code></pre>
<p>The last line of course will throw an error.  How can I specify a default value for the <code>config.get()</code> method?</p>
<p>Then again, if I have an options file as follows:</p>
<pre><code>[job1]
mailto=bob
logFile=blahDeBlah.txt

[job2]
mailto=bob
logFile=blahDeBlah.txt
</code></pre>
<p>There seems to be no way to specify default options for <code>job1</code> different from the default options in section <code>job2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>defaults</code> parameter to the constructor:</p>
<pre><code># class ConfigParser.SafeConfigParser([defaults[, dict_type]]) 
#
config = ConfigParser.SafeConfigParser({'nothingThere': 'lalalalala'})
...
...
# If the job section has no "nothingThere", "lalalalala" will be returned
# 
config.get(jobSection, 'nothingThere')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use a default ".ini" file and read it before your actual config file.</p>
<p>default.ini:</p>
<pre><code>[job1]
mailto=jack
logfile=default.log

[job2]
mailto=john
logfile=default.log
</code></pre>
<p>config.ini:</p>
<pre><code>[job1]
mailto=sparrow
logfile=blah.log

[job2]
logfile=blah2.log
</code></pre>
<p>parsing:</p>
<pre><code>config = ConfigParser.SafeConfigParser()
config.read('default.ini')
config.read('config.ini')

print config.get('job1', 'mailto')
# -&gt; sparrow (from config.ini)

print config.get('job1', 'logfile')
# -&gt; blah.log (from config.ini)

print config.get('job2', 'mailto')
# -&gt; john (from default.ini)

print config.get('job2', 'logfile')
# -&gt; blah2.log (from config.ini)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the  [DEFAULT] section to set default values for the properties you haven't defined in any other section(s).</p>
<p>E.g.</p>
<pre><code>[DEFAULT]
checkout_root: /data/workspace

[pingpong]
name: Ping Pong App
checkout_root: /home/pingpong
src: %(checkout_root)s/src

[dingdong]
name: Ding Dong App
src: %(checkout_root)s/dingdong_src
</code></pre>
<p>For the ding ding app, the value of <code>src</code> will be <code>/data/workspace/dingdong_src</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 you can provide a fallback value to the get() method as follows:</p>
<pre><code>values['nothingThere'] = config.get('job', 'nothingThere', fallback=0)
print(values['nothingThere'])
# -&gt; 0
</code></pre>
</div>
<span class="comment-copy">These are actually two separate questions.</span>
<span class="comment-copy">Todah, I was confused that there seems to be no way to specify the [section] name for the default.  I'll try it today.</span>
<span class="comment-copy">I do not understand how this answers the question. What if defaults should be different for job1 and job2?</span>
<span class="comment-copy">This won't actually work because "nothingThere" automatically gets lowercased to "nothingthere".  If you want option names to be case-sensitive you need to do config.optionxform=str, then config.set('DEFAULT', 'nothingThere', 'lalalalala')</span>
<span class="comment-copy">I think this is the best answer to the OP question</span>
<span class="comment-copy">This answer is the answer to the second question of OP.</span>
<span class="comment-copy">The default value is already provided by the second argument, and I have never seen a <code>fallback</code> argument. Can you point to some documentation?</span>
<span class="comment-copy">Note that this is the parser-level get method, not the section's get method, hence the second argument is the key, not a default value. Documentation here - <a href="https://docs.python.org/3/library/configparser.html#fallback-values" rel="nofollow noreferrer">docs.python.org/3/library/configparser.html#fallback-values</a></span>
<span class="comment-copy">@MadPhysicist It depends how you use the ConfigParser. You can either call it with <code>config["my_section"].get("my_option", "fallback_value")</code> (and here, indeed the second argument "fallback_value" will be the default value) or with <code>config.get("my_section", "my_option", fallback="fallback_value")</code> (and here the two first arguments are to specify which option of which section you want to get)</span>
