<div class="post-text" itemprop="text">
<p>I have a Python generator that can call itself to get more elements to yield.  It looks like this:</p>
<pre><code>def gen(list):
    # ...
    if list:
        for x in gen(list[1:]):
            yield x
</code></pre>
<p>My question is about the last two lines: is there a more concise way to express this?  I am hoping for something like this (understanding this isn't valid Python as-is):</p>
<pre><code>def gen(list):
    # ...
    if list:
        yield each in gen(list[1:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.3 <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer">added the <code>yield from</code> keyword</a>.  Here's a comparison between what you currently have and code using the new keyword:</p>
<p><code>yield_from_test.py</code>:</p>
<pre><code>def gen_for(a_list):
    if a_list:
        yield a_list[0]
        for x in gen_for(a_list[1:]):
            yield x

def gen_yield(a_list):
    if a_list:
        yield a_list[0]
        yield from gen_yield(a_list[1:])

if __name__ == '__main__':
    assert list(gen_for([1,2,3])) == list(gen_yield([1,2,3]))
    print(list(gen_yield([1,2,3])))
</code></pre>
<p><code>Â» python3 yield_from_test.py 
[1, 2, 3]
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There's been some call for a <code>yield from</code> or the like that "passes through" all the values returned by a subgenerator. See <a href="http://www.python.org/dev/peps/pep-0380/" rel="noreferrer">PEP 380</a> for some ideas that have been bounced around. However, nothing has been implemented yet. Your first example is correct.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code sample is very idiomatic and concise, no need and no real chance for further improvements and especially not when it comes at readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your first example is the proper solution.</p>
</div>
<span class="comment-copy">I don't quite get what this is supposed to do, I originally thought it was just a naive way of converting a list to a generator but I was mistaken.  Could you enlighten me?</span>
<span class="comment-copy">Correct me if I'm wrong, but that code looks like it would always return an empty list. I assume there must be other yields in the comment?</span>
<span class="comment-copy">@Dunes: yes, there are other yields in the comment.</span>
<span class="comment-copy">@Davy8: it's not a wrapper or converter, it's a custom generator I wrote.  It takes a list of things and generates another list, which may contain some of the same things, or not.  A "filter" of sorts.</span>
<span class="comment-copy">Note: Python 3.3 has been released, along with PEP 380 (yield from).</span>
<span class="comment-copy">Now that's conscientious!</span>
<span class="comment-copy">...but not in Python 2.x</span>
<span class="comment-copy">Node generators have <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield%2A" rel="nofollow noreferrer">a syntax</a> for delegating generation to another generator: <code>yield* my_generator(...)</code>.  I personally find that more concise.  And things become idiomatic with a PEP and adoption...</span>
