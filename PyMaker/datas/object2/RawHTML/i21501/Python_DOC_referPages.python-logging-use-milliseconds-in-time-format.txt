<div class="post-text" itemprop="text">
<p>By default <code>logging.Formatter('%(asctime)s')</code> prints with the following format:</p>
<pre><code>2011-06-09 10:54:40,638
</code></pre>
<p>where 638 is the millisecond. I need to change the comma to a dot:</p>
<pre><code>2011-06-09 10:54:40.638
</code></pre>
<p>To format the time I can use:</p>
<pre><code>logging.Formatter(fmt='%(asctime)s',datestr=date_format_str)
</code></pre>
<p>however the <a href="http://docs.python.org/library/time.html#time.strftime" rel="noreferrer">documentation</a> doesn't specify how to format milliseconds. I've found <a href="https://stackoverflow.com/questions/698223/how-can-i-parse-a-time-string-containing-milliseconds-in-it-with-python">this SO question</a> which talks about microseconds, but a) I would prefer milliseconds and b) the following doesn't work on Python 2.6 (which I'm working on) due to the <code>%f</code>:</p>
<pre><code>logging.Formatter(fmt='%(asctime)s',datefmt='%Y-%m-%d,%H:%M:%S.%f')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Please note <a href="https://stackoverflow.com/a/7517430/190597">Craig McDaniel's solution</a> is clearly better.</strong></p>
<hr/>
<p>logging.Formatter's <code>formatTime</code> method looks like this:</p>
<pre><code>def formatTime(self, record, datefmt=None):
    ct = self.converter(record.created)
    if datefmt:
        s = time.strftime(datefmt, ct)
    else:
        t = time.strftime("%Y-%m-%d %H:%M:%S", ct)
        s = "%s,%03d" % (t, record.msecs)
    return s
</code></pre>
<p>Notice the comma in <code>"%s,%03d"</code>. This can not be fixed by specifying a <code>datefmt</code> because <code>ct</code> is a <code>time.struct_time</code> and these objects do not record milliseconds. </p>
<p>If we change the definition of <code>ct</code> to make it a <code>datetime</code> object instead of a <code>struct_time</code>, then (at least with modern versions of Python) we can call <code>ct.strftime</code> and then we can use <code>%f</code> to format microseconds:</p>
<pre><code>import logging
import datetime as dt

class MyFormatter(logging.Formatter):
    converter=dt.datetime.fromtimestamp
    def formatTime(self, record, datefmt=None):
        ct = self.converter(record.created)
        if datefmt:
            s = ct.strftime(datefmt)
        else:
            t = ct.strftime("%Y-%m-%d %H:%M:%S")
            s = "%s,%03d" % (t, record.msecs)
        return s

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

console = logging.StreamHandler()
logger.addHandler(console)

formatter = MyFormatter(fmt='%(asctime)s %(message)s',datefmt='%Y-%m-%d,%H:%M:%S.%f')
console.setFormatter(formatter)

logger.debug('Jackdaws love my big sphinx of quartz.')
# 2011-06-09,07:12:36.553554 Jackdaws love my big sphinx of quartz.
</code></pre>
<hr/>
<p>Or, to get milliseconds, change the comma to a decimal point, and omit the <code>datefmt</code> argument:</p>
<pre><code>class MyFormatter(logging.Formatter):
    converter=dt.datetime.fromtimestamp
    def formatTime(self, record, datefmt=None):
        ct = self.converter(record.created)
        if datefmt:
            s = ct.strftime(datefmt)
        else:
            t = ct.strftime("%Y-%m-%d %H:%M:%S")
            s = "%s.%03d" % (t, record.msecs)
        return s

...
formatter = MyFormatter(fmt='%(asctime)s %(message)s')
...
logger.debug('Jackdaws love my big sphinx of quartz.')
# 2011-06-09 08:14:38.343 Jackdaws love my big sphinx of quartz.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work too: </p>
<pre><code>logging.Formatter(fmt='%(asctime)s.%(msecs)03d',datefmt='%Y-%m-%d,%H:%M:%S')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way I found was to override default_msec_format:</p>
<pre><code>formatter = logging.Formatter('%(asctime)s')
formatter.default_msec_format = '%s.%03d'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding msecs was the better option, Thanks.
Here is my amendment using this with Python 3.5.3 in Blender</p>
<pre><code>import logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s.%(msecs)03d %(levelname)s:\t%(message)s', datefmt='%Y-%m-%d %H:%M:%S')
log = logging.getLogger(__name__)
log.info("Logging Info")
log.debug("Logging Debug")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After instantiating a <code>Formatter</code> I usually set <code>formatter.converter = gmtime</code>. So in order for @unutbu's answer to work in this case you'll need:</p>
<pre><code>class MyFormatter(logging.Formatter):
    def formatTime(self, record, datefmt=None):
        ct = self.converter(record.created)
        if datefmt:
            s = time.strftime(datefmt, ct)
        else:
            t = time.strftime("%Y-%m-%d %H:%M:%S", ct)
            s = "%s.%03d" % (t, record.msecs)
        return s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple expansion that doesn't require the <code>datetime</code> module and isn't handicapped like some other solutions is to use simple string replacement like so:</p>
<pre><code>import logging
import time

class MyFormatter(logging.Formatter):
    def formatTime(self, record, datefmt=None):
    ct = self.converter(record.created)
    if datefmt:
        if "%F" in datefmt:
            msec = "%03d" % record.msecs
            datefmt = datefmt.replace("%F", msec)
        s = time.strftime(datefmt, ct)
    else:
        t = time.strftime("%Y-%m-%d %H:%M:%S", ct)
        s = "%s,%03d" % (t, record.msecs)
    return s
</code></pre>
<p>This way a date format can be written however you want, even allowing for region differences, by using <code>%F</code> for milliseconds. For example:</p>
<pre><code>log = logging.getLogger(__name__)
log.setLevel(logging.INFO)

sh = logging.StreamHandler()
log.addHandler(sh)

fm = MyFormatter(fmt='%(asctime)s-%(levelname)s-%(message)s',datefmt='%H:%M:%S.%F')
sh.setFormatter(fm)

log.info("Foo, Bar, Baz")
# 03:26:33.757-INFO-Foo, Bar, Baz
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using <a href="https://github.com/crsmithdev/arrow" rel="nofollow noreferrer">arrow</a> or if you don't mind using arrow. You can substitute python's time formatting for arrow's one.</p>
<pre><code>import logging

from arrow.arrow import Arrow


class ArrowTimeFormatter(logging.Formatter):

    def formatTime(self, record, datefmt=None):
        arrow_time = Arrow.fromtimestamp(record.created)

        if datefmt:
            arrow_time = arrow_time.format(datefmt)

        return str(arrow_time)


logger = logging.getLogger(__name__)

default_handler = logging.StreamHandler()
default_handler.setFormatter(ArrowTimeFormatter(
    fmt='%(asctime)s',
    datefmt='YYYY-MM-DD HH:mm:ss.SSS'
))

logger.setLevel(logging.DEBUG)
logger.addHandler(default_handler)
</code></pre>
<p>Now you can use all of <a href="http://arrow.readthedocs.io/en/latest/#tokens" rel="nofollow noreferrer">arrow's time formatting</a> in <code>datefmt</code> attribute.</p>
</div>
<span class="comment-copy">Maybe changing the locale could help?</span>
<span class="comment-copy">@ pajton - in the following link it says "Locale information is not used by asctime()" - <a href="http://docs.python.org/library/time.html#time.asctime" rel="nofollow noreferrer">docs.python.org/library/time.html#time.asctime</a></span>
<span class="comment-copy"><code>%f</code> doesn't work on python 2.7.9 or 3.5.1 either</span>
<span class="comment-copy">Good conversation here. I came here because <code>logging</code> claims its default time format follows ISO 8601. It doesn't. It uses space, not "T" to separate time and comma for fractional seconds, not decimal point. How could they be so wrong?</span>
<span class="comment-copy">so %f would actually give microseconds, not milliseconds, right?</span>
<span class="comment-copy">@Jonathan: oops, you are right, <code>%f</code> gives microseconds. I suppose the easiest way to get milliseconds is to change the comma to a decimal point (see edit above).</span>
<span class="comment-copy">I would +1 you again if I could, thanks for your update :)</span>
<span class="comment-copy">I actually think this is the best answer due to the fact that it gets you right back to being able to use STANDARD formatting options.  I actually wanted microseconds, and this was the only option that could do it!</span>
<span class="comment-copy">Thanks: Here are the docs for these: <a href="https://docs.python.org/2/library/logging.html#logrecord-attributes" rel="nofollow noreferrer">docs.python.org/2/library/logging.html#logrecord-attributes</a> <a href="https://docs.python.org/3/library/logging.html#logrecord-attributes" rel="nofollow noreferrer">docs.python.org/3/library/logging.html#logrecord-attributes</a> .. Is there a way to still include the timezone (%z)? ... ISO8601 format times in Python logs (, -&gt; .) would be great.</span>
<span class="comment-copy">This solution is handicapped, because if you have <code>%z</code> or <code>%Z</code> in your <code>datefmt</code> you want that to appear AFTER the msecs, not before.</span>
<span class="comment-copy">And also if you are using a 12 hour clock which has <code>AM</code> or <code>PM</code></span>
<span class="comment-copy">@wim it's a workaround, but use UTC rather than local time by doing <code>logging.Formatter.converter = time.gmtime</code> then you don't need to use <code>%z</code> or <code>%Z</code>.  Alternatively you could probably change the <code>default_msec_format</code> attribute of your <code>logging.Formatter</code> object to %s,%03d%z or %s,%03d%Z</span>
<span class="comment-copy">@wim as a follow up to my previous comment (couldn't edit anymore...), here is what I've done:  <code>from time import gmtime</code> - <code># Use UTC rather than local date/time</code> - <code>logging.Formatter.converter = gmtime</code> - <code>logging.basicConfig(datefmt='%Y-%m-%dT%H:%M:%S', format='%(name)s | %(asctime)s.%(msecs)03dZ | %(message)s', level=log_level)</code></span>
<span class="comment-copy">Interesting, thanks. But this didn't work for me in Python 2.7. It may only work in Python 3.x for some value of x.</span>
<span class="comment-copy">@nealmcb this isn't available until Python 3.3 per the <a href="https://docs.python.org/3.7/library/logging.html#logging.Formatter.formatTime" rel="nofollow noreferrer">docs</a></span>
