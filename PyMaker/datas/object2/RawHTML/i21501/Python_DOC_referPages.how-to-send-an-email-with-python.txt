<div class="post-text" itemprop="text">
<p>This code works and sends me an email just fine:  </p>
<pre><code>import smtplib
#SERVER = "localhost"

FROM = 'monty@python.com'

TO = ["jon@mycompany.com"] # must be a list

SUBJECT = "Hello!"

TEXT = "This message was sent with Python's smtplib."

# Prepare actual message

message = """\
From: %s
To: %s
Subject: %s

%s
""" % (FROM, ", ".join(TO), SUBJECT, TEXT)

# Send the mail

server = smtplib.SMTP('myserver')
server.sendmail(FROM, TO, message)
server.quit()
</code></pre>
<p>However if I try to wrap it in a function like this:</p>
<pre><code>def sendMail(FROM,TO,SUBJECT,TEXT,SERVER):
    import smtplib
    """this is some test documentation in the function"""
    message = """\
        From: %s
        To: %s
        Subject: %s
        %s
        """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
    # Send the mail
    server = smtplib.SMTP(SERVER)
    server.sendmail(FROM, TO, message)
    server.quit()
</code></pre>
<p>and call it I get the following errors:  </p>
<pre><code> Traceback (most recent call last):
  File "C:/Python31/mailtest1.py", line 8, in &lt;module&gt;
    sendmail.sendMail(sender,recipients,subject,body,server)
  File "C:/Python31\sendmail.py", line 13, in sendMail
    server.sendmail(FROM, TO, message)
  File "C:\Python31\lib\smtplib.py", line 720, in sendmail
    self.rset()
  File "C:\Python31\lib\smtplib.py", line 444, in rset
    return self.docmd("rset")
  File "C:\Python31\lib\smtplib.py", line 368, in docmd
    return self.getreply()
  File "C:\Python31\lib\smtplib.py", line 345, in getreply
    raise SMTPServerDisconnected("Connection unexpectedly closed")
smtplib.SMTPServerDisconnected: Connection unexpectedly closed
</code></pre>
<p>Can anyone help me understand why?  </p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend that you use the standard packages <a href="https://docs.python.org/3/library/email.html" rel="noreferrer"><code>email</code></a> and <a href="https://docs.python.org/3/library/smtplib.html" rel="noreferrer"><code>smtplib</code></a> together to send email. Please look at the following example (reproduced from the <a href="https://docs.python.org/3/library/email.examples.html" rel="noreferrer">Python documentation</a>). Notice that if you follow this approach, the "simple" task is indeed simple, and the more complex tasks (like attaching binary objects or sending plain/HTML multipart messages) are accomplished very rapidly.</p>
<pre><code># Import smtplib for the actual sending function
import smtplib

# Import the email modules we'll need
from email.mime.text import MIMEText

# Open a plain text file for reading.  For this example, assume that
# the text file contains only ASCII characters.
with open(textfile, 'rb') as fp:
    # Create a text/plain message
    msg = MIMEText(fp.read())

# me == the sender's email address
# you == the recipient's email address
msg['Subject'] = 'The contents of %s' % textfile
msg['From'] = me
msg['To'] = you

# Send the message via our own SMTP server, but don't include the
# envelope header.
s = smtplib.SMTP('localhost')
s.sendmail(me, [you], msg.as_string())
s.quit()
</code></pre>
<p>For sending email to multiple destinations, you can also follow the example in the <a href="https://docs.python.org/3/library/email.examples.html" rel="noreferrer">Python documentation</a>:</p>
<pre><code># Import smtplib for the actual sending function
import smtplib

# Here are the email package modules we'll need
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart

# Create the container (outer) email message.
msg = MIMEMultipart()
msg['Subject'] = 'Our family reunion'
# me == the sender's email address
# family = the list of all recipients' email addresses
msg['From'] = me
msg['To'] = ', '.join(family)
msg.preamble = 'Our family reunion'

# Assume we know that the image files are all in PNG format
for file in pngfiles:
    # Open the files in binary mode.  Let the MIMEImage class automatically
    # guess the specific image type.
    with open(file, 'rb') as fp:
        img = MIMEImage(fp.read())
    msg.attach(img)

# Send the email via our own SMTP server.
s = smtplib.SMTP('localhost')
s.sendmail(me, family, msg.as_string())
s.quit()
</code></pre>
<p>As you can see, the header <code>To</code> in the <code>MIMEText</code> object must be a string consisting of email addresses separated by commas. On the other hand, the second argument to the <code>sendmail</code> function must be a list of strings (each string is an email address).</p>
<p>So, if you have three email addresses: <code>person1@example.com</code>, <code>person2@example.com</code>, and <code>person3@example.com</code>, you can do as follows (obvious sections omitted):</p>
<pre><code>to = ["person1@example.com", "person2@example.com", "person3@example.com"]
msg['To'] = ",".join(to)
s.sendmail(me, to, msg.as_string())
</code></pre>
<p>the <code>"","".join(to)</code> part makes a single string out of the list, separated by commas.</p>
<p>From your questions I gather that you have not gone through <a href="https://docs.python.org/3/tutorial/index.html" rel="noreferrer">the Python tutorial</a> - it is a MUST if you want to get anywhere in Python - the documentation is mostly excellent for the standard library.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, you want to have an answer that is up-to-date and modern.</p>
<p>Here is my answer:</p>
<p>When I need to mail in python, I use the <a href="http://www.mailgun.com" rel="noreferrer">mailgun</a> API wich get's a lot of the headaches with sending mails sorted out. They have a wonderfull app/api that allows you to send 10,000 emails per month for free.</p>
<p>Sending an email would be like this:</p>
<pre><code>def send_simple_message():
    return requests.post(
        "https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages",
        auth=("api", "YOUR_API_KEY"),
        data={"from": "Excited User &lt;mailgun@YOUR_DOMAIN_NAME&gt;",
              "to": ["bar@example.com", "YOU@YOUR_DOMAIN_NAME"],
              "subject": "Hello",
              "text": "Testing some Mailgun awesomness!"})
</code></pre>
<p>You can also track events and lots more, see <a href="https://documentation.mailgun.com/quickstart.html" rel="noreferrer">the quickstart guide</a>.</p>
<p>I hope you find this useful!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd like to help you with sending emails by advising the yagmail package (I'm the maintainer, sorry for the advertising, but I feel it can really help!). </p>
<p>The whole code for you would be:</p>
<pre><code>import yagmail
yag = yagmail.SMTP(FROM, 'pass')
yag.send(TO, SUBJECT, TEXT)
</code></pre>
<p>Note that I provide defaults for all arguments, for example if you want to send to yourself, you can omit <code>TO</code>, if you don't want a subject, you can omit it also.</p>
<p>Furthermore, the goal is also to make it really easy to attach html code or images (and other files).</p>
<p>Where you put contents you can do something like:</p>
<pre><code>contents = ['Body text, and here is an embedded image:', 'http://somedomain/image.png',
            'You can also find an audio file attached.', '/local/path/song.mp3']
</code></pre>
<p>Wow, how easy it is to send attachments! This would take like 20 lines without yagmail ;)</p>
<p>Also, if you set it up once, you'll never have to enter the password again (and have it safely stored). In your case you can do something like:</p>
<pre><code>import yagmail
yagmail.SMTP().send(contents = contents)
</code></pre>
<p>which is much more concise!</p>
<p>I'd invite you to have a look at the <a href="https://github.com/kootenpv/yagmail">github</a> or install it directly with <code>pip install yagmail</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is indentation problem. The code below will work:</p>
<pre><code>import textwrap

def sendMail(FROM,TO,SUBJECT,TEXT,SERVER):
    import smtplib
    """this is some test documentation in the function"""
    message = textwrap.dedent("""\
        From: %s
        To: %s
        Subject: %s
        %s
        """ % (FROM, ", ".join(TO), SUBJECT, TEXT))
    # Send the mail
    server = smtplib.SMTP(SERVER)
    server.sendmail(FROM, TO, message)
    server.quit()
</code></pre>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def sendMail(FROM,TO,SUBJECT,TEXT,SERVER):
    import smtplib
    """this is some test documentation in the function"""
    message = """\
        From: %s
        To: %s
        Subject: %s
        %s
        """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
    # Send the mail
    server = smtplib.SMTP(SERVER)
    "New part"
    server.starttls()
    server.login('username', 'password')
    server.sendmail(FROM, TO, message)
    server.quit()
</code></pre>
<p>It works for smtp.gmail.com</p>
</div>
<div class="post-text" itemprop="text">
<p>While indenting your code in the function (which is ok), you did also indent the lines of the raw message string. But leading white space implies folding (concatenation) of the header lines, as described in sections 2.2.3 and 3.2.3 of <a href="https://tools.ietf.org/html/rfc2822" rel="nofollow">RFC 2822 - Internet Message Format</a>:</p>
<blockquote>
<p>Each header field is logically a single line of characters comprising
  the field name, the colon, and the field body.  For convenience
  however, and to deal with the 998/78 character limitations per line,
  the field body portion of a header field can be split into a multiple
  line representation; this is called "folding".</p>
</blockquote>
<p>In the function form of your <code>sendmail</code> call, all lines are starting with white space and so are "unfolded" (concatenated) and you are trying to send</p>
<pre class="lang-none prettyprint-override"><code>From: monty@python.com    To: jon@mycompany.com    Subject: Hello!    This message was sent with Python's smtplib.
</code></pre>
<p>Other than our mind suggests, <code>smtplib</code> will not understand the <code>To:</code> and <code>Subject:</code> headers any longer, because these names are only recognized at the beginning of a line. Instead <code>smtplib</code> will assume a very long sender email address: </p>
<pre class="lang-none prettyprint-override"><code>monty@python.com    To: jon@mycompany.com    Subject: Hello!    This message was sent with Python's smtplib.
</code></pre>
<p>This won't work and so comes your Exception.</p>
<p>The solution is simple: Just preserve the <code>message</code> string as it was before.  This can be done by a function (as Zeeshan suggested) or right away in the source code:</p>
<pre><code>import smtplib

def sendMail(FROM,TO,SUBJECT,TEXT,SERVER):
    """this is some test documentation in the function"""
    message = """\
From: %s
To: %s
Subject: %s

%s
""" % (FROM, ", ".join(TO), SUBJECT, TEXT)
    # Send the mail
    server = smtplib.SMTP(SERVER)
    server.sendmail(FROM, TO, message)
    server.quit()
</code></pre>
<p>Now the unfolding does not occur and you send</p>
<pre class="lang-none prettyprint-override"><code>From: monty@python.com
To: jon@mycompany.com
Subject: Hello!

This message was sent with Python's smtplib.
</code></pre>
<p>which is what works and what was done by your old code.</p>
<p>Note that I was also preserving the empty line between headers and body to accommodate section 3.5 of <a href="https://tools.ietf.org/html/rfc2822" rel="nofollow">the RFC</a> (which is required) and put the include outside the function according to the Python style guide <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow">PEP-0008</a> (which is optional).</p>
</div>
<div class="post-text" itemprop="text">
<p>It's probably putting tabs into your message. Print out message before you pass it to sendMail.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example on Python <code>3.x</code>, much simpler than <code>2.x</code>:</p>
<pre><code>import smtplib
from email.message import EmailMessage
def send_mail(to_email, subject, message, server='smtp.example.cn',
              from_email='xx@example.com'):
    # import smtplib
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = from_email
    msg['To'] = ', '.join(to_email)
    msg.set_content(message)
    print(msg)
    server = smtplib.SMTP(server)
    server.set_debuglevel(1)
    server.login(from_email, 'password')  # user &amp; password
    server.send_message(msg)
    server.quit()
    print('successfully sent the mail.')
</code></pre>
<p>call this function:</p>
<pre><code>send_mail(to_email=['12345@qq.com', '12345@126.com'],
          subject='hello', message='Your analysis has done!')
</code></pre>
<h3>below may only for Chinese user:</h3>
<p>If you use 126/163, 网易邮箱, you need to set"客户端授权密码", like below:</p>
<p><a href="https://i.stack.imgur.com/mUMOQ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/mUMOQ.png"/></a></p>
<p>ref: <a href="https://stackoverflow.com/a/41470149/2803344">https://stackoverflow.com/a/41470149/2803344</a>
<a href="https://docs.python.org/3/library/email.examples.html#email-examples" rel="nofollow noreferrer">https://docs.python.org/3/library/email.examples.html#email-examples</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Make sure you have granted permission for both Sender and Receiver to send email and receive email from Unknown sources(External Sources) in Email Account.</strong></p>
<pre><code>import smtplib

#Ports 465 and 587 are intended for email client to email server communication - sending email
server = smtplib.SMTP('smtp.gmail.com', 587)

#starttls() is a way to take an existing insecure connection and upgrade it to a secure connection using SSL/TLS.
server.starttls()

#Next, log in to the server
server.login("#email", "#password")

msg = "Hello! This Message was sent by the help of Python"

#Send the mail
server.sendmail("#Sender", "#Reciever", msg)
</code></pre>
<p><a href="https://i.stack.imgur.com/43w6d.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/43w6d.jpg"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>As far your code is concerned, there doesn't seem to be anything fundamentally wrong with it except that, it is unclear how you're actually calling that function. All I can think of is that when your server is not responding then you will get this SMTPServerDisconnected error. If you lookup the getreply() function in smtplib (excerpt below), you will get an idea.</p>
<pre><code>def getreply(self):
    """Get a reply from the server.

    Returns a tuple consisting of:

      - server response code (e.g. '250', or such, if all goes well)
        Note: returns -1 if it can't read response code.

      - server response string corresponding to response code (multiline
        responses are converted to a single, multiline string).

    Raises SMTPServerDisconnected if end-of-file is reached.
    """
</code></pre>
<p>check an example at <a href="https://github.com/rreddy80/sendEmails/blob/master/sendEmailAttachments.py" rel="nofollow">https://github.com/rreddy80/sendEmails/blob/master/sendEmailAttachments.py</a> that also uses a function call to send an email, if that's what you're trying to do (DRY approach).</p>
</div>
<div class="post-text" itemprop="text">
<p>Thought I'd put in my two bits here since I have just figured out how this works. </p>
<p>It appears that you don't have the port specified on your SERVER connection settings, this effected me a little bit when I was trying to connect to my SMTP server that isn't using the default port: 25. </p>
<p>According to the smtplib.SMTP docs, your ehlo or helo request/response should automatically be taken care of, so you shouldn't have to worry about this (but might be something to confirm if all else fails).</p>
<p>Another thing to ask yourself is have you allowed SMTP connections on your SMTP server itself? For some sites like GMAIL and ZOHO you have to actually go in and activate the IMAP connections within the email account. Your mail server might not allow SMTP connections that don't come from 'localhost' perhaps? Something to look into. </p>
<p>The final thing is you might want to try and initiate the connection on TLS. Most servers now require this type of authentication.</p>
<p>You'll see I've jammed two TO fields into my email. The msg['TO'] and msg['FROM'] msg dictionary items allows the correct information to show up in the headers of the email itself, which one sees on the receiving end of the email in the To/From fields (you might even be able to add a Reply To field in here. The TO and FROM fields themselves are what the server requires. I know I've heard of some email servers rejecting emails if they don't have the proper email headers in place. </p>
<p>This is the code I've used, in a function, that works for me to email the content of a *.txt file using my local computer and a remote SMTP server (ZOHO as shown): </p>
<pre><code>def emailResults(folder, filename):

    # body of the message
    doc = folder + filename + '.txt'
    with open(doc, 'r') as readText:
        msg = MIMEText(readText.read())

    # headers
    TO = 'to_user@domain.com'
    msg['To'] = TO
    FROM = 'from_user@domain.com'
    msg['From'] = FROM
    msg['Subject'] = 'email subject |' + filename

    # SMTP
    send = smtplib.SMTP('smtp.zoho.com', 587)
    send.starttls()
    send.login('from_user@domain.com', 'password')
    send.sendmail(FROM, TO, msg.as_string())
    send.quit()
</code></pre>
</div>
<span class="comment-copy">how do you call the function?</span>
<span class="comment-copy">Is the indentation you posted the same as you have in your file?</span>
<span class="comment-copy">@g.d.d.c  no I made sure to indent properly, that is just the way I pasted it in.</span>
<span class="comment-copy">I call the function by importing it into my main module and passing the parameters which I have defined into it.</span>
<span class="comment-copy">Although @Arrieta's suggestion to use the email package is the best way to solve this, your approach can work.  The differences between your two versions are in the string: (1) as @NickODell points out, you have leading whitespace in the function version.  Headers should have no leading space (unless they are wrapped).  (2) unless TEXT includes a leading blank line, you've lost the separator between headers and body.</span>
<span class="comment-copy">Thank you this works very nicely from within a function, however how can I send to multiple recipients? Since msg[to] looks like it's a dictionary key, I tried seperating the msg[to] with a semicolon but that does not seem to work.</span>
<span class="comment-copy">@cloud311 exactly as you have it in your code. It wants a string delimited with commas:  <code>", ".join(["a@example.com", "b@example.net"])</code></span>
<span class="comment-copy">Thanks again, this should do the trick. I appreciate the help, I am relatively new to Python/Programming in general.</span>
<span class="comment-copy">Note also that the To: header has different semantics than the envelope recipient.  For example, you can use '"Tony Meyer" &lt;tony.meyer@gmail.com&gt;' as an address in the To: header, but the envelope recipient must be only "tony.meyer@gmail.com".  To build a 'nice' To: address, use email.utils.formataddr, like email.utils.formataddr("Tony Meyer", "tony.meyer@gmail.com").</span>
<span class="comment-copy">Small improvement: the file should be opened using <code>with</code>: <code>with open(textfile, 'rb') as fp:</code>. The explicit close can be dropped, as the <code>with</code> block will close the file even if an error occurs inside it.</span>
<span class="comment-copy">This is indeed much more "of this date". Though it uses an external API. I'd personally use something like <a href="https://github.com/kootenpv/yagmail" rel="nofollow noreferrer">yagmail</a> for keeping it internal.</span>
<span class="comment-copy">@PascalvKooten Absolutely amusing to follow your constant advertising for yagmail (yes, Sir, I will consider it next time, Sir ;). But I find it very confusing that almost no one seems to care for OPs issue, but rather suggests much different solutions. It's as if I am asking how to change bulbs in my 2009 smart and the answer is: Buy a real Mercedes...</span>
<span class="comment-copy">Great that my mission has some amusement value to some.</span>
<span class="comment-copy">@flaschbier The reason no one cares about the OPs issue is because the title is wrong. "How to send an email with Python?" is the actual reason people come to look when they click that question, and they'd expect an answer that <a href="https://github.com/kootenpv/yagmail" rel="nofollow noreferrer">yagmail</a> can provide: nice and short. There you go. More yagmail advertisement.</span>
<span class="comment-copy">Just to say that for Mailgun customers, sending mail by webservices is considerably more bandwidth-friendly than via SMTP (especially if using any attachments).</span>
<span class="comment-copy">Good work. Saves lot of time +1</span>
<span class="comment-copy">this should be the top solution.</span>
<span class="comment-copy">OMG, that's a sweet, <b>SIMPLE</b> email module. Thanks!</span>
<span class="comment-copy">Can I use <code>yagmail</code> other than gmail? I am trying to use for my own SMTP server.</span>
<span class="comment-copy">@dtgq Thanks for your concern. Personally, I don't see the attack vector. If someone is going to change the file under the path you want to send, then it doesn't matter if you have an <code>Attachment</code> class; it's still the same thing. If they can change your code, then they can do anything they want anyway (with/without root, that's the same w.r.t. email sending). This seems to me like the typical "it is convenient/magical so it must be less secure". I'm curious what real threat you see?</span>
<span class="comment-copy">Don't understand how this is supposed to work without user credentials..</span>
<span class="comment-copy">@geotheory the <code>SERVER</code> variable that is passed into the function is the user credentials.</span>
<span class="comment-copy">Email sends ok, but ends up garbled with no message or subject. Nice profile name btw</span>
<span class="comment-copy">This doesn't work. you need to use textwrap as Zeeshan is showing.</span>
