<div class="post-text" itemprop="text">
<p><code>[]</code> = empty <code>list</code></p>
<p><code>()</code> = empty <code>tuple</code></p>
<p><code>{}</code> = empty <code>dict</code></p>
<p>Is there a similar notation for an empty <code>set</code>?
Or do I have to write <code>set()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there's no literal syntax for the empty set. You have to write <code>set()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to extend the accepted answer:</p>
<p>From version <code>2.7</code> and <code>3.1</code> python has got <code>set</code> literal <code>{}</code> in form of usage <code>{1,2,3}</code>, but <code>{}</code> itself still used for empty dict.</p>
<p>Python 2.7 (first line is invalid in Python &lt;2.7)</p>
<pre><code>&gt;&gt;&gt; {1,2,3}.__class__
&lt;type 'set'&gt;
&gt;&gt;&gt; {}.__class__
&lt;type 'dict'&gt;
</code></pre>
<p>Python 3.x</p>
<pre><code>&gt;&gt;&gt; {1,4,5}.__class__
&lt;class 'set'&gt;
&gt;&gt;&gt; {}.__class__
&lt;type 'dict'&gt;
</code></pre>
<p>More here: <a href="https://docs.python.org/3/whatsnew/2.7.html#other-language-changes" rel="noreferrer">https://docs.python.org/3/whatsnew/2.7.html#other-language-changes</a></p>
</div>
<div class="post-text" itemprop="text">
<p>By all means, <em>please use</em> <code>set()</code> to create an empty set. </p>
<p>But, if you want to impress people, tell them that you can create an empty set using literals and <code>*</code> with Python &gt;= 3.5 (<a href="https://www.python.org/dev/peps/pep-0448/" rel="noreferrer">see PEP 448</a>) by doing:</p>
<pre><code>&gt;&gt;&gt; s = {*()}  # or {*{}} or {*[]}
&gt;&gt;&gt; print(s)
set()
</code></pre>
<p>this is basically a more condensed way of doing <code>{_ for _ in ()}</code>, but, don't do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on if you want the literal for a comparison, or for assignment.</p>
<p>If you want to make an existing set empty, you can use the <code>.clear()</code> metod, especially if you want to avoid creating a new object.  If you want to do a comparison, use <code>set()</code> or check if the length is 0.</p>
<p>example:</p>
<pre><code>#create a new set    
a=set([1,2,3,'foo','bar'])
#or, using a literal:
a={1,2,3,'foo','bar'}

#create an empty set
a=set()
#or, use the clear method
a.clear()

#comparison to a new blank set
if a==set():
    #do something

#length-checking comparison
if len(a)==0:
    #do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding to the crazy ideas: with Python 3 accepting unicode identifiers, you could declare a variable <code>ϕ = frozenset()</code> (ϕ is U+03D5) and use it instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you want to initialize empty set then apply below code. this one is works perfectly for me in python 3:</p>
<pre><code>object = set([])
object = object.union([1,2,3,4]) #set operation.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use it like this
<code>a = set</code></p>
<p>or</p>
<p><code>a = {0,1}</code></p>
</div>
<span class="comment-copy">you don't accept {i for i in []}, didn't you?</span>
<span class="comment-copy">Just want to show nearly anything is possible with python. If you want to create a set without using to set(), you can.</span>
<span class="comment-copy">Yeah, you can do pretty much everything in a hundred convulted ways. I don't add <code>map(lambda x: x)</code> to my code examples just to show you it works either. It's not a set literal as well, it's just a set comprehension.</span>
<span class="comment-copy">A dumb way which works would be <code>{0}-{0}</code>.  It's not as clear as <code>set()</code>, but it does have the advantage of looking like a funny pair of eyes.</span>
<span class="comment-copy">@Chris <code>{}</code> is a dictionary. <code>{0}</code> is a set. <code>{0} - {0}</code> is the difference between a set and itself, which is the empty set.</span>
<span class="comment-copy">You mean there is no literal syntax for the empty set? Or for sets in general?</span>
<span class="comment-copy">There are set literals, but only in Python 3.x. There isn't a literal for empty sets either way.</span>
<span class="comment-copy">@user763305: The language manual is pretty clear on this point.  <a href="http://docs.python.org/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">docs.python.org/library/stdtypes.html#set-types-set-frozenset</a> says "non-empty sets ... can be created by placing a comma-separated list of elements within braces"</span>
<span class="comment-copy">Actually, set literals have been backported to Python 2.7, so they are not only available strictly in Python 3.</span>
<span class="comment-copy">@andy That's not an empty set - that's a set containing the number 1. You don't need the trailing comma by the way - that's only required for tuples.</span>
<span class="comment-copy">This answer is wrong. There is still no literal syntax to represent an empty set. <code>{}.__class__</code> would still give <code>dict</code></span>
<span class="comment-copy">@Ninja420 try to read first before comment, i have noticed that</span>
<span class="comment-copy">The accepted answer is still correct, and is not outdated. There is not a literal syntax for <i>the empty set</i>, there is however one for the empty dictionary.</span>
<span class="comment-copy">@AndreasBjørn for an empty yes, however for non empty you will get PEP8 exception and suggestion to use set literal.</span>
<span class="comment-copy">This answer is exactly what I was looking for. +1</span>
<span class="comment-copy">Why?! Performance is almost identical: <code>$ python3.7 -m timeit 'set()'     2000000 loops, best of 5: 177 nsec per loop     $ python3.7 -m timeit '{*()}'     2000000 loops, best of 5: 171 nsec per loop</code></span>
<span class="comment-copy"><code>a=set()</code> does not <i>empty the set</i>, but creates a new set and assigns it to <code>a</code>, overwriting any previous value.</span>
<span class="comment-copy">Indeed.  That's why I said that if you want to avoid creating a new object, you should use clear().  I suppose my comment should have been worded slightly differently.</span>
<span class="comment-copy">It also appears using the <code>a.clear()</code> method is slightly faster than <code>a=set()</code>, and checking <code>len(a)==0</code> is slightly faster than checking for equality to <code>a==set()</code></span>
<span class="comment-copy">Instead of <code>if len(a)==0:</code> it suffices (and is more Pythonic) to write just <code>if a:</code>  (edit: or rather, <code>if not a:</code> to match the polarity of the condition).</span>
<span class="comment-copy">Problem is, <code>set</code> objects are mutable, so you're putting yourself at risk with <code>spam = ϕ; spam.add("eggs")</code>.</span>
<span class="comment-copy">@drdaeman Ok, sure, <code>ϕ = frozenset()</code> would fix that. :-)</span>
<span class="comment-copy">if <code>ϕ</code> is a frozenset, then <code>spam.add("eggs")</code> fails, because the frozenset  object doesn't have any <code>add</code> method.</span>
<span class="comment-copy">@BrianMinton: But that is the intended behavior. Note that when someone writes <code>span = ϕ</code> both <code>span</code> and <code>ϕ</code> will point to the same object, i.e. <code>id(span) == id(ϕ)</code>. Hence, if <code>spam.add("eggs")</code> would work, the <code>ϕ</code> object would not be an empty set anymore, and we will come back to the original problem as pointed by drdaeman</span>
<span class="comment-copy">@RenatoGarcia Compare with the empty dict literal: <code>&gt;&gt;&gt; a={} &gt;&gt;&gt; a['foo']='bar' &gt;&gt;&gt; a {'foo': 'bar'} </code></span>
<span class="comment-copy">Why union instead of add?</span>
<span class="comment-copy">whatever operations you like. it also works perfectly.</span>
<span class="comment-copy">Also, you don't need the square brackets when initializing a set.</span>
<span class="comment-copy">a = set gives you a set class/type exactly as the set keyword  (obviously as you just did a = set, so you get exactly what you asked for). {0,1} is not an empty set as the question requires in the title and body, obviously. So, I think you haven't actually read the question. If I were you I'd check if it is possible to delete this answer.</span>
