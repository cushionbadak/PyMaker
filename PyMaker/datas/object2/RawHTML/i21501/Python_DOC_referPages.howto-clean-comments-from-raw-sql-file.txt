<div class="post-text" itemprop="text">
<p>I have problem with cleaning comments and empty lines from already existing sql file.
The file has over 10k lines so cleaning it manually is not an option.</p>
<p>I have a little python script, but I have no idea how to handle comments inside multi line inserts.</p>
<h3> Code: </h3>
<pre><code>f = file( 'file.sql', 'r' )
t = filter( lambda x: not x.startswith('--') \
            and not x.isspace() 
  , f.readlines() )
f.close()
t #&lt;- here the cleaned data should be
</code></pre>
<h3> How it should work: </h3>
<p>This should be cleaned:</p>
<pre><code>-- normal sql comment
</code></pre>
<p>This should stay as it is:</p>
<pre><code>CREATE FUNCTION func1(a integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
        -- comment
       [...]
END;
$$;

INSERT INTO public.texts (multilinetext) VALUES ('
and more lines here \'
-- part of text 
\'
[...]

');
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the <a href="http://code.google.com/p/python-sqlparse/" rel="nofollow">sqlparse</a> module.</p>
<p>Updated example: <strong>leaving comments inside insert values, and comments within CREATE FUNCTION blocks</strong>. You can tweak further to tune the behavior:</p>
<pre><code>import sqlparse
from sqlparse import tokens

queries = '''
CREATE FUNCTION func1(a integer) RETURNS void
    LANGUAGE plpgsql
        AS $$
        BEGIN
                -- comment
       END;
       $$;
SELECT -- comment
* FROM -- comment
TABLE foo;
-- comment
INSERT INTO foo VALUES ('a -- foo bar');
INSERT INTO foo
VALUES ('
a 
-- foo bar'
);

'''

IGNORE = set(['CREATE FUNCTION',])  # extend this

def _filter(stmt, allow=0):
    ddl = [t for t in stmt.tokens if t.ttype in (tokens.DDL, tokens.Keyword)]
    start = ' '.join(d.value for d in ddl[:2])
    if ddl and start in IGNORE:
        allow = 1
    for tok in stmt.tokens:
        if allow or not isinstance(tok, sqlparse.sql.Comment):
            yield tok

for stmt in sqlparse.split(queries):
    sql = sqlparse.parse(stmt)[0]
    print sqlparse.sql.TokenList([t for t in _filter(sql)])
</code></pre>
<p>Output:</p>
<pre><code>CREATE FUNCTION func1(a integer) RETURNS void
    LANGUAGE plpgsql
        AS $$
        BEGIN
                -- comment
       END;
       $$;

SELECT * FROM TABLE foo;

INSERT INTO foo VALUES ('a -- foo bar');

INSERT INTO foo
VALUES ('
a
-- foo bar'
);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an extend of samplebias answer that work with your example :</p>
<pre><code>import sqlparse

sql_example = """--comment
SELECT * from test;
INSERT INTO test VALUES ('
-- test
a
');
"""

new_sql = []

for statement in sqlparse.parse(sql_example):
    new_tockens = [stm for stm in statement.tokens 
                   if not isinstance(stm, sqlparse.sql.Comment)]

    new_statement = sqlparse.sql.TokenList(new_tockens)
    new_sql.append(new_statement.to_unicode())

print sqlparse.format("\n".join(new_sql))
</code></pre>
<p>Output:</p>
<pre><code>SELECT * from test;

INSERT INTO test VALUES ('
-- test
a
');
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding an updated answer :)</p>
<pre><code>import sqlparse

sql_example = """--comment
SELECT * from test;
INSERT INTO test VALUES ('
-- test
a
');
 """
print sqlparse.format(sql_example, strip_comments=True).strip()
</code></pre>
<p>Output:</p>
<p>SELECT * from test;</p>
<p>INSERT INTO test VALUES ('
   -- test
a
');</p>
<p>It achieves the same result but also covers all other corner cases and more concise </p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to do it with regular expressions. First you have to split the file by strings and after this you can split the file by comments. The following Perl program does it:</p>
<pre><code>#! /usr/bin/perl -w

# Read hole file.
my $file = join ('', &lt;&gt;);

# Split by strings including the strings.
my @major_parts = split (/('(?:[^'\\]++|\\.)*+')/, $file);

foreach my $part (@major_parts) {
    if ($part =~ /^'/) {
        # Print the part if it is a string.
        print $part; 
    }
    else {
        # Split by comments removing the comments
        my @minor_parts = split (/^--.*$/m, $part);
        # Print the remaining parts.
        print join ('', @minor_parts);
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># Remove comments i.e. lines beginning with whitespace and '--' (using multi-line flag)
re.sub('^\s*--.*\n?', '', query, flags=re.MULTILINE)
</code></pre>
<p>Regex string explained:</p>
<ul>
<li>^ start of line</li>
<li>\s whitespace</li>
<li>\s* zero or more whitespace characters</li>
<li>-- two hypens (static string pattern)</li>
<li>.* zero or more of any characters (i.e. the rest of the line)</li>
<li>\n newline character</li>
<li>? end of string</li>
<li>flags = re.M is the multiline modifier</li>
</ul>
<blockquote>
<p>"When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline)"</p>
</blockquote>
<p>See the Python regular expressions documentation for more details:</p>
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a></p>
</div>
<span class="comment-copy">Can you keep track of how many non-escaped quotes you've passed? An odd number means the comment is part of a string and thus should not be removed.</span>
<span class="comment-copy">but it will still remove comments from stored procedures</span>
<span class="comment-copy">I'm slightly off topic, but maybe your real problem is that your SQL file is 10K lines. Or that you're not using version control. Or both.  Something like our process might help you. See my answer for <a href="http://stackoverflow.com/questions/5330065/sql-where-should-the-primary-key-be-defined" title="sql where should the primary key be defined">stackoverflow.com/questions/5330065/â€¦</a></span>
<span class="comment-copy">@Catcall I have both, the file is produced from several smaller files, but for production environment deployment the comments are not needed (they take around 60% of file)</span>
<span class="comment-copy">It might be easier to change the makefile. It's certainly easier to skip removing comments from functions and stored procedures--just don't add the "remove comments" code to the part of the make that builds the functions (or the file full of functions).</span>
<span class="comment-copy">thanks for a tip, but this is also stripping comments from inside functions, is there a way to prevent it ?</span>
<span class="comment-copy">@Szymon Lukaszczyk : i was just living the same comment for @samplebias :) , look at my answer if you want something that work with your example.</span>
<span class="comment-copy">@Szymon updated to show the raw tokens, which you can filter by iterating over them.</span>
<span class="comment-copy">almost, still fails on the INSERT from my example</span>
<span class="comment-copy">@Szymon I updated it to handle that case. This should provide enough of a baseline which you can extend and modify.</span>
<span class="comment-copy"><code>print(sqlparse.format("\n".join(new_sql)))</code> returns <code>u'\n'</code> after coming the example to python</span>
<span class="comment-copy">@Szymon Lukaszczyk: i pasted the code above directly from a script that produced the same output as in my answer weird ??!! :)</span>
<span class="comment-copy">got (&lt;Statement '--comm...' at 0x8d6009c&gt;,     &lt;Statement ' INSER...' at 0x8d6002c&gt;,     &lt;Statement ' ' at 0x8d6017c&gt;)  after parse instead of proper objects. Don`t know why.</span>
<span class="comment-copy">I have installed sqlparse from debian sid repo, (ver 0.1.2-2)</span>
<span class="comment-copy">@Szymon Lukaszczyk: i have the same version in my ubuntu machine, and the output that you said that you are getting is the return value of <code>sqlparse.parse(sql_example)</code> weird !!??</span>
<span class="comment-copy">he's looking to leave comments inside functions/procedures intact, filtering out the rest.</span>
<span class="comment-copy">add some explanation please</span>
<span class="comment-copy">It'd be nice to have this include /* */ comments too, though I'm guessing this would be tricky to accomodate with the -- ones potentially overlapping or lines starting with -- and ending with */ and you missing the closing part.</span>
