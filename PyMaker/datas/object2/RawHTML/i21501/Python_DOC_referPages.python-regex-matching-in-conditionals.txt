<div class="post-text" itemprop="text">
<p>I am parsing file and I want to check each line against a few complicated regexs.  Something like this</p>
<pre><code>if re.match(regex1, line): do stuff
elif re.match(regex2, line): do other stuff
elif re.match(regex3, line): do still more stuff
...
</code></pre>
<p>Of course, to do the stuff, I need the match objects.  I can only think of three possibilities, each of which leaves something to be desired.</p>
<pre><code>if re.match(regex1, line): 
    m = re.match(regex1, line)
    do stuff
elif re.match(regex2, line):
    m = re.match(regex2, line)
    do other stuff
...
</code></pre>
<p>which requires doing the complicated matching twice (these are long files and long regex :/) </p>
<pre><code>m = re.match(regex1, line)
if m: do stuff
else:
    m = re.match(regex2, line)
    if m: do other stuff
    else:
       ...
</code></pre>
<p>which gets terrible as I indent further and further.</p>
<pre><code>while True:
    m = re.match(regex1, line)
    if m:
        do stuff
        break
    m = re.match(regex2, line)
    if m:
        do other stuff
        break
    ...
</code></pre>
<p>which just looks weird.</p>
<p>What's the right way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could define a function for the action required by each regex and do something like</p>
<pre><code>def dostuff():
    stuff

def dootherstuff():
    otherstuff

def doevenmorestuff():
    evenmorestuff

actions = ((regex1, dostuff), (regex2, dootherstuff), (regex3, doevenmorestuff))

for regex, action in actions:
    m = re.match(regex, line)
    if m: 
        action()
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for patt in (regex1, regex2, regex3):
    match = patt.match(line)
    if match:
        if patt == regex1:
            # some handling
        elif patt == regex2:
            # more
        elif patt == regex3:
            # more
        break
</code></pre>
<p>I like Tim's answer because it separates out the per-regex matching code to keep things simple. For my answer, I wouldn't put more than a line or two of code for each match, and if you need more, call a separate method.</p>
</div>
<div class="post-text" itemprop="text">
<p>First off, do you really need to use regexps for your matching?  Where I would use regexps in, e.g., perl, I'll often use string functions in python (find, startswith, etc).</p>
<p>If you really need to use regexps, you can make a simple search function that does the search, and if the match is returned, sets a store object to keep your match around before returning True.</p>
<p>e.g.,</p>
<pre><code>def search(pattern, s, store):
    match = re.search(pattern, s)
    store.match = match
    return match is not None

class MatchStore(object):
    pass   # irrelevant, any object with a 'match' attr would do

where = MatchStore()
if search(pattern1, s, where):
    pattern1 matched, matchobj in where.match
elif search(pattern2, s, where):
    pattern2 matched, matchobj in where.match
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this particular case there appears to be no convenient way to do this in python.
if python would accept the syntax: </p>
<pre><code>if (m = re.match(pattern,string)):
    text = m.group(1)
</code></pre>
<p>then all would be fine, but apparently you
cannot do that</p>
</div>
<div class="post-text" itemprop="text">
<p>Your last suggestion is slightly more Pythonic when wrapped up in a function:</p>
<pre><code>def parse_line():
    m = re.match(regex1, line)
    if m:
        do stuff
        return
    m = re.match(regex2, line)
    if m:
        do other stuff
        return
    ...
</code></pre>
<p>That said, you can get closer to what you want using a simple container class with some operator overloading class:</p>
<pre><code>class ValueCache():
    """A simple container with a returning assignment operator."""
    def __init__(self, value=None):
        self.value = value
    def __repr__(self):
        return "ValueCache({})".format(self.value)
    def set(self, value):
        self.value = value
        return value
    def __call__(self):
        return self.value
    def __lshift__(self, value):
        return self.set(value)
    def __rrshift__(self, value):
        return self.set(value)

match = ValueCache()
if (match &lt;&lt; re.match(regex1, line)):
    do stuff with match()
elif (match &lt;&lt; re.match(regex2, line)):
    do other stuff with match()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would break your regex up into smaller components and search for simple first with longer matches later. </p>
<p>something like:</p>
<pre><code>if re.match(simplepart,line):
      if re.match(complexregex, line):
          do stuff
elif re.match(othersimple, line):
      if re.match(complexother, line):
          do other stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a dictionnary/switch statement ?</p>
<pre><code>def action1(stuff):
    do the stuff 1
def action2(stuff):
    do the stuff 2

regex_action_dict = {regex1 : action1, regex2 : action2}
for regex, action in regex_action_dict.iteritems():
    match_object = re.match(regex, line):
    if match_object:
        action(match_object, line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>FWIW, I've stressed over the same thing, and I usually settle for the 2nd form (nested <code>else</code>s) or some variation. I don't think you'll find anything much better in general, if you're looking to optimize readability (many of these answers seem significantly less readable than your candidates to me).</p>
<p>Sometimes if you're in an outer loop or a short function, you can use a variation of your 3rd form (the one with <code>break</code> statements) where you either <code>continue</code> or <code>return</code>, and that's readable enough, but I definitely wouldn't create a <code>while True</code> block just to avoid the "ugliness" of the other candidates.</p>
</div>
<div class="post-text" itemprop="text">
<p>My solution with an exemple; there is only one <code>re.search()</code> that is performed:</p>
<pre><code>text = '''\
koala + image @ wolf - snow
Good evening, ladies and gentlemen
An uninteresting line
There were 152 ravens on a branch
sea mountain sun ocean ice hot desert river'''

import re
regx3 = re.compile('hot[ \t]+([^ ]+)')
regx2 = re.compile('(\d+|ev.+?ng)')
regx1 = re.compile('([%~#`\@+=\d]+)')
regx  = re.compile('|'.join((regx3.pattern,regx2.pattern,regx1.pattern)))

def one_func(line):
    print 'I am one_func on : '+line

def other_func(line):
    print 'I am other_func on : '+line

def another_func(line):
    print 'I am another_func on : '+line

tupl_funcs = (one_func, other_func, another_func) 


for line in text.splitlines():
    print line
    m = regx.search(line)
    if m:
        print 'm.groups() : ',m.groups()
        group_number = (i for i,m in enumerate(m.groups()) if m).next()
        print "group_number : ",group_number
        tupl_funcs[group_number](line)
    else:
        print 'No match'
        print 'No treatment'
    print
</code></pre>
<p>result</p>
<pre><code>koala + image @ wolf - snow
m.groups() :  (None, None, '+')
group_number :  2
I am another_func on : koala + image @ wolf - snow

Good evening, ladies and gentlemen
m.groups() :  (None, 'evening', None)
group_number :  1
I am other_func on : Good evening, ladies and gentlemen

An uninteresting line
No match
No treatment

There were 152 ravens on a branch
m.groups() :  (None, '152', None)
group_number :  1
I am other_func on : There were 152 ravens on a branch

sea mountain sun ocean ice hot desert river
m.groups() :  ('desert', None, None)
group_number :  0
I am one_func on : sea mountain sun ocean ice hot desert river
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make a class with the match as state. Instantiate it before conditional, this should store the string that you are matching against as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define a local function that accepts a regex, tests it against your input, and stores the result to a closure-scoped variable:</p>
<pre><code>match = None

def matches(pattern):
    nonlocal match, line
    match = re.match(pattern, line)
    return match

if matches(regex1):
    # do stuff with `match`

elif matches(regex2):
    # do other stuff with `match`
</code></pre>
<p>I'm not sure how Pythonic that approach is, but it's the cleanest way I've found to do regex matching in an if-elif-else chain and preserve the match objects.</p>
<p>Note that this approach will only work in Python 3.0+ as it requires the <a href="https://www.python.org/dev/peps/pep-3104/" rel="nofollow noreferrer">PEP 3104</a> <code>nonlocal</code> statement. In earlier Python versions <a href="https://stackoverflow.com/questions/4851463/python-closure-write-to-variable-in-parent-scope">there's no clean way for a function to assign to a variable in a non-global parent scope</a>.</p>
<p>It's also worth noting that if you have a big enough file that you're worried about running a regex twice for each line you should also be pre-compiling them with <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.compile</code></a> and passing the resulting regex object to your check function instead of the raw string.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define a class wrapping the match object with a call method to perform the match:</p>
<pre><code>class ReMatcher(object):
    match = None

    def __call__(self, pattern, string):
        self.match = re.match(pattern, string)
        return self.match

    def __getattr__(self, name):
        return getattr(self.match, name)
</code></pre>
<p>Then call it in your conditions and use it as if it was a match object in the resulting blocks:</p>
<pre><code>match = ReMatcher()

if match(regex1, line):
    print(match.group(1))

elif match(regex2, line):
    print(match.group(1))
</code></pre>
<p>This should work in nearly any Python version, with slight adjustments in versions before new-style classes. As in my other answer, you should use <code>re.compile</code> if you're concerned about regex performance.</p>
</div>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy">Duplicate of <a href="http://stackoverflow.com/questions/2554185/match-groups-in-python" title="match groups in python">stackoverflow.com/questions/2554185/match-groups-in-python</a></span>
<span class="comment-copy">to be more explicit, you can use the tuple extraction like this <code>for regex, action in actions:</code></span>
<span class="comment-copy">@Cédric: Excellent idea. Will edit my answer.</span>
<span class="comment-copy">This is not really well suited to be used in a way where the action is an instance method. Is there a solution for that?</span>
<span class="comment-copy">This will be the case with Python 3.8 and <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">PEP 572</a>, but using <code>:=</code> instead of <code>=</code>.</span>
<span class="comment-copy">I first thought about using a dict, too, but then order would not be preserved, and in his code example, the order is relevant.</span>
<span class="comment-copy">if you're in python3, you could use the collections.OrderedDict or in earlier python the <a href="http://pypi.python.org/pypi/ordereddict/" rel="nofollow noreferrer">pypi.python.org/pypi/ordereddict</a></span>
