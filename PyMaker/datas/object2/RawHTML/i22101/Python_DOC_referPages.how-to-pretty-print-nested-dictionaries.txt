<div class="post-text" itemprop="text">
<p>How can I pretty print a dictionary with depth of ~4 in Python? I tried pretty printing with <code>pprint()</code>, but it did not work:</p>
<pre><code>import pprint 
pp = pprint.PrettyPrinter(indent=4)
pp.pprint(mydict)
</code></pre>
<p>I simply want an indentation (<code>"\t"</code>) for each nesting, so that I get something like this:</p>
<pre><code>key1
    value1
    value2
    key2
       value1
       value2
</code></pre>
<p>etc. </p>
<p>How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure how exactly you want the formatting to look like, but you could start with a function like this:</p>
<pre><code>def pretty(d, indent=0):
   for key, value in d.items():
      print('\t' * indent + str(key))
      if isinstance(value, dict):
         pretty(value, indent+1)
      else:
         print('\t' * (indent+1) + str(value))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My first thought was that the JSON serializer is probably pretty good at nested dictionaries, so I'd cheat and use that:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; print json.dumps({'a':2, 'b':{'x':3, 'y':{'t1': 4, 't2':5}}},
...                  sort_keys=True, indent=4)
{
    "a": 2,
    "b": {
        "x": 3,
        "y": {
            "t1": 4,
            "t2": 5
        }
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try <a href="http://yaml.org">YAML</a> via <a href="https://bitbucket.org/xi/pyyaml">PyYAML</a>.  Its output can be fine-tuned.  I'd suggest starting with the following:</p>
<p><code>print yaml.dump(data, allow_unicode=True, default_flow_style=False)</code></p>
<p>The result is <em>very</em> readable; it can be also parsed back to Python if needed.</p>
<p><strong>Edit:</strong></p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; import yaml
&gt;&gt;&gt; data = {'a':2, 'b':{'x':3, 'y':{'t1': 4, 't2':5}}}
&gt;&gt;&gt; print yaml.dump(data, default_flow_style=False)
a: 2
b:
  x: 3
  y:
    t1: 4
    t2: 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of what have been done, I don't see any pretty printer that at least mimics the output of the python interpreter with very simple formatting so here's mine :</p>
<pre><code>class Formatter(object):
    def __init__(self):
        self.types = {}
        self.htchar = '\t'
        self.lfchar = '\n'
        self.indent = 0
        self.set_formater(object, self.__class__.format_object)
        self.set_formater(dict, self.__class__.format_dict)
        self.set_formater(list, self.__class__.format_list)
        self.set_formater(tuple, self.__class__.format_tuple)

    def set_formater(self, obj, callback):
        self.types[obj] = callback

    def __call__(self, value, **args):
        for key in args:
            setattr(self, key, args[key])
        formater = self.types[type(value) if type(value) in self.types else object]
        return formater(self, value, self.indent)

    def format_object(self, value, indent):
        return repr(value)

    def format_dict(self, value, indent):
        items = [
            self.lfchar + self.htchar * (indent + 1) + repr(key) + ': ' +
            (self.types[type(value[key]) if type(value[key]) in self.types else object])(self, value[key], indent + 1)
            for key in value
        ]
        return '{%s}' % (','.join(items) + self.lfchar + self.htchar * indent)

    def format_list(self, value, indent):
        items = [
            self.lfchar + self.htchar * (indent + 1) + (self.types[type(item) if type(item) in self.types else object])(self, item, indent + 1)
            for item in value
        ]
        return '[%s]' % (','.join(items) + self.lfchar + self.htchar * indent)

    def format_tuple(self, value, indent):
        items = [
            self.lfchar + self.htchar * (indent + 1) + (self.types[type(item) if type(item) in self.types else object])(self, item, indent + 1)
            for item in value
        ]
        return '(%s)' % (','.join(items) + self.lfchar + self.htchar * indent)
</code></pre>
<p>To initialize it :</p>
<pre><code>pretty = Formatter()
</code></pre>
<p>It can support the addition of formatters for defined types, you simply need to make a function for that like this one and bind it to the type you want with set_formater :</p>
<pre><code>from collections import OrderedDict

def format_ordereddict(self, value, indent):
    items = [
        self.lfchar + self.htchar * (indent + 1) +
        "(" + repr(key) + ', ' + (self.types[
            type(value[key]) if type(value[key]) in self.types else object
        ])(self, value[key], indent + 1) + ")"
        for key in value
    ]
    return 'OrderedDict([%s])' % (','.join(items) +
           self.lfchar + self.htchar * indent)
pretty.set_formater(OrderedDict, format_ordereddict)
</code></pre>
<p>For historical reasons, I keep the previous pretty printer which was a function instead of a class, but they both can be used the same way, the class version simply permit much more :</p>
<pre><code>def pretty(value, htchar='\t', lfchar='\n', indent=0):
    nlch = lfchar + htchar * (indent + 1)
    if type(value) is dict:
        items = [
            nlch + repr(key) + ': ' + pretty(value[key], htchar, lfchar, indent + 1)
            for key in value
        ]
        return '{%s}' % (','.join(items) + lfchar + htchar * indent)
    elif type(value) is list:
        items = [
            nlch + pretty(item, htchar, lfchar, indent + 1)
            for item in value
        ]
        return '[%s]' % (','.join(items) + lfchar + htchar * indent)
    elif type(value) is tuple:
        items = [
            nlch + pretty(item, htchar, lfchar, indent + 1)
            for item in value
        ]
        return '(%s)' % (','.join(items) + lfchar + htchar * indent)
    else:
        return repr(value)
</code></pre>
<p>To use it :</p>
<pre><code>&gt;&gt;&gt; a = {'list':['a','b',1,2],'dict':{'a':1,2:'b'},'tuple':('a','b',1,2),'function':pretty,'unicode':u'\xa7',("tuple","key"):"valid"}
&gt;&gt;&gt; a
{'function': &lt;function pretty at 0x7fdf555809b0&gt;, 'tuple': ('a', 'b', 1, 2), 'list': ['a', 'b', 1, 2], 'dict': {'a': 1, 2: 'b'}, 'unicode': u'\xa7', ('tuple', 'key'): 'valid'}
&gt;&gt;&gt; print(pretty(a))
{
    'function': &lt;function pretty at 0x7fdf555809b0&gt;,
    'tuple': (
        'a',
        'b',
        1,
        2
    ),
    'list': [
        'a',
        'b',
        1,
        2
    ],
    'dict': {
        'a': 1,
        2: 'b'
    },
    'unicode': u'\xa7',
    ('tuple', 'key'): 'valid'
}
</code></pre>
<p>Compared to other versions :</p>
<ul>
<li>This solution looks directly for object type, so you can pretty print almost everything, not only list or dict.</li>
<li>Doesn't have any dependancy.</li>
<li>Everything is put inside a string, so you can do whatever you want with it.</li>
<li>The class and the function has been tested and works with Python 2.7 and 3.4.</li>
<li>You can have all type of objects inside, this is their representations and not theirs contents that being put in the result (so string have quotes, Unicode string are fully represented ...).</li>
<li>With the class version, you can add formatting for every object type you want or change them for already defined ones.</li>
<li>key can be of any valid type.</li>
<li>Indent and Newline character can be changed for everything we'd like.</li>
<li>Dict, List and Tuples are pretty printed.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Another option with <a href="https://github.com/google/yapf" rel="noreferrer"><code>yapf</code></a>:  </p>
<pre><code>from pprint import pformat
from yapf.yapflib.yapf_api import FormatCode

dict_example = {'1': '1', '2': '2', '3': [1, 2, 3, 4, 5], '4': {'1': '1', '2': '2', '3': [1, 2, 3, 4, 5]}}
dict_string = pformat(dict_example)
formatted_code, _ = FormatCode(dict_string)

print(formatted_code)
</code></pre>
<p>Output:</p>
<pre><code>{
    '1': '1',
    '2': '2',
    '3': [1, 2, 3, 4, 5],
    '4': {
        '1': '1',
        '2': '2',
        '3': [1, 2, 3, 4, 5]
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As others have posted, you can use recursion/dfs to print the nested dictionary data and call recursively if it is a dictionary; otherwise print the data.</p>
<pre><code>def print_json(data):
    if type(data) == dict:
            for k, v in data.items():
                    print k
                    print_json(v)
    else:
            print data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I took <a href="https://stackoverflow.com/a/3229493/1480817">sth's answer</a> and modified it slightly to fit my needs of a nested dictionaries and lists:</p>
<pre><code>def pretty(d, indent=0):
    if isinstance(d, dict):
        for key, value in d.iteritems():
            print '\t' * indent + str(key)
            if isinstance(value, dict) or isinstance(value, list):
                pretty(value, indent+1)
            else:
                print '\t' * (indent+1) + str(value)
    elif isinstance(d, list):
        for item in d:
            if isinstance(item, dict) or isinstance(item, list):
                pretty(item, indent+1)
            else:
                print '\t' * (indent+1) + str(item)
    else:
        pass
</code></pre>
<p>Which then gives me output like:</p>
<pre><code>&gt;&gt;&gt; 
xs:schema
    @xmlns:xs
        http://www.w3.org/2001/XMLSchema
    xs:redefine
        @schemaLocation
            base.xsd
        xs:complexType
            @name
                Extension
            xs:complexContent
                xs:restriction
                    @base
                        Extension
                    xs:sequence
                        xs:element
                            @name
                                Policy
                            @minOccurs
                                1
                            xs:complexType
                                xs:sequence
                                    xs:element
                                            ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sth, i sink that's pretty ;)</p>
<pre><code>def pretty(d, indent=0):
    for key, value in d.iteritems():
        if isinstance(value, dict):
            print '\t' * indent + (("%30s: {\n") % str(key).upper())
            pretty(value, indent+1)
            print '\t' * indent + ' ' * 32 + ('} # end of %s #\n' % str(key).upper())
        elif isinstance(value, list):
            for val in value:
                print '\t' * indent + (("%30s: [\n") % str(key).upper())
                pretty(val, indent+1)
                print '\t' * indent + ' ' * 32 + ('] # end of %s #\n' % str(key).upper())
        else:
            print '\t' * indent + (("%30s: %s") % (str(key).upper(),str(value)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>This class prints out a complex nested dictionary with sub dictionaries and sub lists.  
##
## Recursive class to parse and print complex nested dictionary
##

class NestedDictionary(object):
    def __init__(self,value):
        self.value=value

    def print(self,depth):
        spacer="--------------------"
        if type(self.value)==type(dict()):
            for kk, vv in self.value.items():
                if (type(vv)==type(dict())):
                    print(spacer[:depth],kk)
                    vvv=(NestedDictionary(vv))
                    depth=depth+3
                    vvv.print(depth)
                    depth=depth-3
                else:
                    if (type(vv)==type(list())):
                        for i in vv:
                            vvv=(NestedDictionary(i))
                            depth=depth+3
                            vvv.print(depth)
                            depth=depth-3
                    else:
                        print(spacer[:depth],kk,vv) 

##
## Instatiate and execute - this prints complex nested dictionaries
## with sub dictionaries and sub lists
## 'something' is a complex nested dictionary

MyNest=NestedDictionary(weather_com_result)
MyNest.print(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wrote this simple code to print the general structure of a json object in Python. </p>
<pre><code>def getstructure(data, tab = 0):
    if type(data) is dict:
        print ' '*tab + '{' 
        for key in data:
            print ' '*tab + '  ' + key + ':'
            getstructure(data[key], tab+4)
        print ' '*tab + '}'         
    elif type(data) is list and len(data) &gt; 0:
        print ' '*tab + '['
        getstructure(data[0], tab+4)
        print ' '*tab + '  ...'
        print ' '*tab + ']'
</code></pre>
<p>the result for the following data</p>
<pre><code>a = {'list':['a','b',1,2],'dict':{'a':1,2:'b'},'tuple':('a','b',1,2),'function':'p','unicode':u'\xa7',("tuple","key"):"valid"}
getstructure(a)
</code></pre>
<p>is very compact and looks like this:</p>
<pre><code>{
  function:
  tuple:
  list:
    [
      ...
    ]
  dict:
    {
      a:
      2:
    }
  unicode:
  ('tuple', 'key'):
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/Jaymon/pout" rel="nofollow noreferrer">pout</a> can pretty print anything you throw at it, for example (borrowing <code>data</code> from another answer):</p>
<pre><code>data = {'a':2, 'b':{'x':3, 'y':{'t1': 4, 't2':5}}}
pout.vs(data)
</code></pre>
<p>would result in output printed to the screen like:</p>
<pre><code>{
    'a': 2,
    'b':
    {
        'y':
        {
            't2': 5,
            't1': 4
        },
        'x': 3
    }
}
</code></pre>
<p>or you can return the formatted string output of your object:</p>
<pre><code>v = pout.s(data)
</code></pre>
<p>Its primary use case is for debugging so it doesn't choke on object instances or anything and it handles unicode output as you would expect, works in python 2.7 and 3.</p>
<p><strong>disclosure</strong>: I'm the author and maintainer of pout.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's something that will print any sort of nested dictionary, while keeping track of the "parent" dictionaries along the way. </p>
<pre><code>dicList = list()

def prettierPrint(dic, dicList):
count = 0
for key, value in dic.iteritems():
    count+=1
    if str(value) == 'OrderedDict()':
        value = None
    if not isinstance(value, dict):
        print str(key) + ": " + str(value)
        print str(key) + ' was found in the following path:',
        print dicList
        print '\n'
    elif isinstance(value, dict):
        dicList.append(key)
        prettierPrint(value, dicList)
    if dicList:
         if count == len(dic):
             dicList.pop()
             count = 0

prettierPrint(dicExample, dicList)
</code></pre>
<p>This is a <strong>good starting point</strong> for printing according to different formats, like the one specified in OP. All you really need to do is operations around the <em>Print</em> blocks. Note that it looks to see if the value is 'OrderedDict()'. Depending on whether you're using something from <a href="https://docs.python.org/3/library/collections.html" rel="nofollow">Container datatypes Collections</a>, you should make these sort of fail-safes so the <em>elif</em> block doesn't see it as an additional dictionary due to its name. As of now, an example dictionary like </p>
<pre><code>example_dict = {'key1': 'value1',
            'key2': 'value2',
            'key3': {'key3a': 'value3a'},
            'key4': {'key4a': {'key4aa': 'value4aa',
                               'key4ab': 'value4ab',
                               'key4ac': 'value4ac'},
                     'key4b': 'value4b'}
</code></pre>
<p>will print</p>
<pre><code>key3a: value3a
key3a was found in the following path: ['key3']

key2: value2
key2 was found in the following path: []

key1: value1
key1 was found in the following path: []

key4ab: value4ab
key4ab was found in the following path: ['key4', 'key4a']

key4ac: value4ac
key4ac was found in the following path: ['key4', 'key4a']

key4aa: value4aa
key4aa was found in the following path: ['key4', 'key4a']

key4b: value4b
key4b was found in the following path: ['key4']
</code></pre>
<h2>~altering code to fit the question's format~</h2>
<pre><code>lastDict = list()
dicList = list()
def prettierPrint(dic, dicList):
    global lastDict
    count = 0
    for key, value in dic.iteritems():
        count+=1
        if str(value) == 'OrderedDict()':
            value = None
        if not isinstance(value, dict):
            if lastDict == dicList:
                sameParents = True
            else:
                sameParents = False

            if dicList and sameParents is not True:
                spacing = ' ' * len(str(dicList))
                print dicList
                print spacing,
                print str(value)

            if dicList and sameParents is True:
                print spacing,
                print str(value)
            lastDict = list(dicList)

        elif isinstance(value, dict):
            dicList.append(key)
            prettierPrint(value, dicList)

        if dicList:
             if count == len(dic):
                 dicList.pop()
                 count = 0
</code></pre>
<p>Using the same example code, it will print the following: </p>
<pre><code>['key3']
         value3a
['key4', 'key4a']
                  value4ab
                  value4ac
                  value4aa
['key4']
         value4b
</code></pre>
<p>This isn't <em>exactly</em> what is requested in OP. The difference is that a parent^n is still printed, instead of being absent and replaced with white-space. To get to OP's format, you'll need to do something like the following: iteratively compare <em>dicList</em> with the <em>lastDict</em>. You can do this by making a new dictionary and copying dicList's content to it, checking if <em>i</em> in the copied dictionary is the same as <em>i</em> in lastDict, and -- if it is -- writing whitespace to that <em>i</em> position using the string multiplier function.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://code.activestate.com/recipes/327142-print-a-dictionary-in-a-structural-way/" rel="nofollow noreferrer">this link</a>:</p>
<pre><code>def prnDict(aDict, br='\n', html=0,
            keyAlign='l',   sortKey=0,
            keyPrefix='',   keySuffix='',
            valuePrefix='', valueSuffix='',
            leftMargin=0,   indent=1 ):
    '''
return a string representive of aDict in the following format:
    {
     key1: value1,
     key2: value2,
     ...
     }

Spaces will be added to the keys to make them have same width.

sortKey: set to 1 if want keys sorted;
keyAlign: either 'l' or 'r', for left, right align, respectively.
keyPrefix, keySuffix, valuePrefix, valueSuffix: The prefix and
   suffix to wrap the keys or values. Good for formatting them
   for html document(for example, keyPrefix='&lt;b&gt;', keySuffix='&lt;/b&gt;'). 
   Note: The keys will be padded with spaces to have them
         equally-wide. The pre- and suffix will be added OUTSIDE
         the entire width.
html: if set to 1, all spaces will be replaced with '&amp;nbsp;', and
      the entire output will be wrapped with '&lt;code&gt;' and '&lt;/code&gt;'.
br: determine the carriage return. If html, it is suggested to set
    br to '&lt;br&gt;'. If you want the html source code eazy to read,
    set br to '&lt;br&gt;\n'

version: 04b52
author : Runsun Pan
require: odict() # an ordered dict, if you want the keys sorted.
         Dave Benjamin 
         http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/161403
    '''

    if aDict:

        #------------------------------ sort key
        if sortKey:
            dic = aDict.copy()
            keys = dic.keys()
            keys.sort()
            aDict = odict()
            for k in keys:
                aDict[k] = dic[k]

        #------------------- wrap keys with ' ' (quotes) if str
        tmp = ['{']
        ks = [type(x)==str and "'%s'"%x or x for x in aDict.keys()]

        #------------------- wrap values with ' ' (quotes) if str
        vs = [type(x)==str and "'%s'"%x or x for x in aDict.values()] 

        maxKeyLen = max([len(str(x)) for x in ks])

        for i in range(len(ks)):

            #-------------------------- Adjust key width
            k = {1            : str(ks[i]).ljust(maxKeyLen),
                 keyAlign=='r': str(ks[i]).rjust(maxKeyLen) }[1]

            v = vs[i]        
            tmp.append(' '* indent+ '%s%s%s:%s%s%s,' %(
                        keyPrefix, k, keySuffix,
                        valuePrefix,v,valueSuffix))

        tmp[-1] = tmp[-1][:-1] # remove the ',' in the last item
        tmp.append('}')

        if leftMargin:
          tmp = [ ' '*leftMargin + x for x in tmp ]

        if html:
            return '&lt;code&gt;%s&lt;/code&gt;' %br.join(tmp).replace(' ','&amp;nbsp;')
        else:
            return br.join(tmp)     
    else:
        return '{}'

'''
Example:

&gt;&gt;&gt; a={'C': 2, 'B': 1, 'E': 4, (3, 5): 0}

&gt;&gt;&gt; print prnDict(a)
{
 'C'   :2,
 'B'   :1,
 'E'   :4,
 (3, 5):0
}

&gt;&gt;&gt; print prnDict(a, sortKey=1)
{
 'B'   :1,
 'C'   :2,
 'E'   :4,
 (3, 5):0
}

&gt;&gt;&gt; print prnDict(a, keyPrefix="&lt;b&gt;", keySuffix="&lt;/b&gt;")
{
 &lt;b&gt;'C'   &lt;/b&gt;:2,
 &lt;b&gt;'B'   &lt;/b&gt;:1,
 &lt;b&gt;'E'   &lt;/b&gt;:4,
 &lt;b&gt;(3, 5)&lt;/b&gt;:0
}

&gt;&gt;&gt; print prnDict(a, html=1)
&lt;code&gt;{
&amp;nbsp;'C'&amp;nbsp;&amp;nbsp;&amp;nbsp;:2,
&amp;nbsp;'B'&amp;nbsp;&amp;nbsp;&amp;nbsp;:1,
&amp;nbsp;'E'&amp;nbsp;&amp;nbsp;&amp;nbsp;:4,
&amp;nbsp;(3,&amp;nbsp;5):0
}&lt;/code&gt;

&gt;&gt;&gt; b={'car': [6, 6, 12], 'about': [15, 9, 6], 'bookKeeper': [9, 9, 15]}

&gt;&gt;&gt; print prnDict(b, sortKey=1)
{
 'about'     :[15, 9, 6],
 'bookKeeper':[9, 9, 15],
 'car'       :[6, 6, 12]
}

&gt;&gt;&gt; print prnDict(b, keyAlign="r")
{
        'car':[6, 6, 12],
      'about':[15, 9, 6],
 'bookKeeper':[9, 9, 15]
}
'''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm just returning to this question after taking <a href="https://stackoverflow.com/a/3229493/3986879">sth</a>'s answer and making a small but very useful modification. This function prints all <strong>keys in the JSON tree</strong> as well as the <strong>size of leaf nodes</strong> in that tree.</p>
<pre><code>def print_JSON_tree(d, indent=0):
    for key, value in d.iteritems():
        print '    ' * indent + unicode(key),
        if isinstance(value, dict):
            print; print_JSON_tree(value, indent+1)
        else:
            print ":", str(type(d[key])).split("'")[1], "-", str(len(unicode(d[key])))
</code></pre>
<p>It's really nice when you have large JSON objects and want to figure out where the meat is. <strong>Example</strong>:</p>
<pre><code>&gt;&gt;&gt; print_JSON_tree(JSON_object)
key1
    value1 : int - 5
    value2 : str - 16
    key2
       value1 : str - 34
       value2 : list - 5623456
</code></pre>
<p>This would tell you that most of the data you care about is probably inside <code>JSON_object['key1']['key2']['value2']</code> because the length of that value formatted as a string is very large.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm a relative python newbie myself but I've been working with nested dictionaries for the past couple weeks and this is what I had came up with.</p>
<p>You should try using a stack. Make the keys from the root dictionary into a list of a list:</p>
<pre><code>stack = [ root.keys() ]     # Result: [ [root keys] ]
</code></pre>
<p>Going in reverse order from last to first, lookup each key in the dictionary to see if its value is (also) a dictionary. If not, print the key then delete it. However if the value for the key <em>is</em> a dictionary, print the key then append the keys for that value to the end of the stack, and start processing that list in the same way, repeating recursively for each new list of keys.</p>
<p>If the value for the second key in each list were a dictionary you would have something like this after several rounds:</p>
<pre><code>[['key 1','key 2'],['key 2.1','key 2.2'],['key 2.2.1','key 2.2.2'],[`etc.`]]
</code></pre>
<p>The upside to this approach is that the indent is just <code>\t</code> times the length of the stack:</p>
<pre><code>indent = "\t" * len(stack)
</code></pre>
<p>The downside is that in order to check each key you need to hash through to the relevant sub-dictionary, though this can be handled easily with a list comprehension and a simple <code>for</code> loop:</p>
<pre><code>path = [li[-1] for li in stack]
# The last key of every list of keys in the stack

sub = root
for p in path:
    sub = sub[p]


if type(sub) == dict:
    stack.append(sub.keys()) # And so on
</code></pre>
<p>Be aware that this approach will require you to cleanup trailing empty lists, <em>and</em> to delete the last key in any list followed by an empty list (which of course may create another empty list, and so on).</p>
<p>There are other ways to implement this approach but hopefully this gives you a basic idea of how to do it.</p>
<p>EDIT: If you don't want to go through all that, the <code>pprint</code> module prints nested dictionaries in a nice format.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a function I wrote based on what sth's comment. It's works the same as json.dumps with indent, but I'm using tabs instead of space for indents. In Python 3.2+ you can specify indent to be a '\t' directly, but not in 2.7.</p>
<pre><code>def pretty_dict(d):
    def pretty(d, indent):
        for i, (key, value) in enumerate(d.iteritems()):
            if isinstance(value, dict):
                print '{0}"{1}": {{'.format( '\t' * indent, str(key))
                pretty(value, indent+1)
                if i == len(d)-1:
                    print '{0}}}'.format( '\t' * indent)
                else:
                    print '{0}}},'.format( '\t' * indent)
            else:
                if i == len(d)-1:
                    print '{0}"{1}": "{2}"'.format( '\t' * indent, str(key), value)
                else:
                    print '{0}"{1}": "{2}",'.format( '\t' * indent, str(key), value)
    print '{'
    pretty(d,indent=1)
    print '}'
</code></pre>
<p>Ex:</p>
<pre><code>&gt;&gt;&gt; dict_var = {'a':2, 'b':{'x':3, 'y':{'t1': 4, 't2':5}}}
&gt;&gt;&gt; pretty_dict(dict_var)
{
    "a": "2",
    "b": {
        "y": {
            "t2": "5",
            "t1": "4"
        },
        "x": "3"
    }
}
</code></pre>
</div>
<span class="comment-copy">What does "did not work" mean?  Please specify very precisely how pprint "did not work".</span>
<span class="comment-copy">I have now used 3 of these answers (each good in a specific scenario): <a href="http://stackoverflow.com/a/3314411/52074">@Ken's json answer</a> is good but fails sometimes when the object can't be json serializable (throws exception). if @Ken's json answer doesn't work try <a href="http://stackoverflow.com/a/14892136/52074">@Andy's yaml answer</a> and it should work but the string output is a little less human readable. [@sth's answer] is the most generic (should work for any object and doesn't use any libs).</span>
<span class="comment-copy">U know @Ken's conventional answer is much better than this. Json already handles everything and this can give errors such: <b>UnicodeEncodeError: 'ascii' codec can't encode character u'\xf3' in position 50: ordinal not in range(128)</b></span>
<span class="comment-copy">I can't make it works with the nested dict of my solution, because it gave me a UnicodeEncodeError, also it don't print dict key, don't go inside list and tuples and don't keep a python valid syntax.</span>
<span class="comment-copy">For Python3, change d.iteritems() to d.items(), and add brackets to the print statement to turn it into a function.</span>
<span class="comment-copy">This answer worked like a charm for me, however I posted a new question <a href="https://stackoverflow.com/questions/36972225/pretty-print-nested-dictionary-with-a-limit" title="pretty print nested dictionary with a limit">stackoverflow.com/questions/36972225/…</a> which sets a limit to how many values should be printed.</span>
<span class="comment-copy">Pretty good. If you've got nested lists like in the OP's question, you need to add some handling for that. If you're having issues in Py2, it's cause it can't handle Unicode properly without hacks like <code>__future__</code> that the answer now mentions, so you have to employ those wherever needed (or update to 3 already).</span>
<span class="comment-copy">This is cool, but doesn't print all dictionaries well. print json.dumps(myObject.__dict__, sort_keys=True, indent=4) #TypeError: &lt;object at 0x0000000002E6A748&gt; is not JSON serializable</span>
<span class="comment-copy">+1, great idea - even works with nested <code>defaultdicts</code>.</span>
<span class="comment-copy">While this looks useful, it's output is not what the OP wanted.</span>
<span class="comment-copy">@martineau: The OP's requested output doesn't make sense, dictionaries need keys per value.</span>
<span class="comment-copy">json.dumps takes a conversion function as an optional argument, so with json.dumps(myObject.__dict__, sort_keys=True, indent=4, deault=str) you can at least use an objects implementation of <b>repr</b> to print itself and get round the 'not JSON serializable' TypeError</span>
<span class="comment-copy">Using yaml is very interesting because it keep data type over it's format, the only thing I can say against it is that it don't produce a valid python string, but can almost be converted back in python.</span>
<span class="comment-copy">yaml doesn't like Numpy's version of scalar types... I wasn't surprised that is doesn't support numpy arrays, but I would have expected the same output for a <code>float</code> and a <code>numpy.float64</code></span>
<span class="comment-copy">This should definitely be the accepted solution - the lack of a dependency on JSON is huge.</span>
<span class="comment-copy">it would be cool if it could do objects by converting them to dicts and setting their key to be the object type</span>
<span class="comment-copy">You can basically replace the format_object method internaly or externaly to do that.</span>
<span class="comment-copy">-1: Doesn't handle <code>list</code> values that aren't <code>dict</code> instances, i.e. <code>pretty({'key': [1, 2, 3]}, indent=4)</code> ==&gt; <code>AttributeError: 'int' object has no attribute 'iteritems'</code>. I also don't like it uppercasing keys.</span>
<span class="comment-copy">Your solution consider that there can't be a dict inside a list inside the root dict. Also it consider that we don't want to prettyprint a list or a tuple. Finally don't capitalize keys, the result for {'a':0,'A':1} would not be correct.</span>
<span class="comment-copy">I can't make it works with the nested dict of my solution, because it gave me a UnicodeEncodeError, also items and keys are all converted in strings, what if we use numbers or tuples that contains lists and dicts ? Finnaly your solution take in account that our object we want to pretty print must be a dict.</span>
<span class="comment-copy">I was not trying to write a generic print function for a python dict. The top rated comments already demonstrate how to pretty print a dict. My contribution was to write an alternative to json.dumps with '\t' for indenting instead of tabs in python 2.7.</span>
<span class="comment-copy">I agree with you about writing an alternative to json.dumps, for me the same problems as of json.dumps applies. Also, you could use a simple regex to change the indentation type, making your code simplier.</span>
