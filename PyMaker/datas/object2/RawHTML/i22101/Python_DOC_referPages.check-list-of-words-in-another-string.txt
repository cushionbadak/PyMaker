<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3389574/check-if-multiple-strings-exist-in-another-string">Check if multiple strings exist in another string</a>
<span class="question-originals-answer-count">
                    13 answers
                </span>
</li>
</ul>
</div>
<p>I can do such thing in python:</p>
<pre><code>l = ['one', 'two', 'three']
if 'some word' in l:
   ...
</code></pre>
<p>This will check if 'some word' exists in the list. But can I do reverse thing?</p>
<pre><code>l = ['one', 'two', 'three']
if l in 'some one long two phrase three':
    ...
</code></pre>
<p>I have to check whether some words from array are in the string. I can do this using cycle but this way has more lines of code.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if any(word in 'some one long two phrase three' for word in list_):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your list of words is of substantial length, and you need to do this test many times, it may be worth converting the list to a set and using set intersection to test (with the added benefit that you wil get the actual words that are in both lists):</p>
<pre><code>&gt;&gt;&gt; long_word_list = 'some one long two phrase three about above along after against'
&gt;&gt;&gt; long_word_set = set(long_word_list.split())
&gt;&gt;&gt; set('word along river'.split()) &amp; long_word_set
set(['along'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are a couple of alternative ways of doing it, that may be faster or more suitable than KennyTM's answer, depending on the context.</p>
<p>1) use a regular expression:</p>
<pre><code>import re
words_re = re.compile("|".join(list_of_words))

if words_re.search('some one long two phrase three'):
   # do logic you want to perform
</code></pre>
<p>2) You could use sets if you want to match whole words, e.g. you do not want to find the word "the" in the phrase "them theorems are theoretical":</p>
<pre><code>word_set = set(list_of_words)
phrase_set = set('some one long two phrase three'.split())
if word_set.intersection(phrase_set):
    # do stuff
</code></pre>
<p>Of course you can also do whole word matches with regex using the "\b" token.</p>
<p>The performance of these and Kenny's solution are going to depend on several factors, such as how long the word list and phrase string are, and how often they change.  If performance is not an issue then go for the simplest, which is probably Kenny's.</p>
</div>
<div class="post-text" itemprop="text">
<p>Easiest and Simplest method of solving this problem is using <strong>re</strong></p>
<pre><code>import re

search_list = ['one', 'two', 'there']
long_string = 'some one long two phrase three'
if re.compile('|'.join(search_list),re.IGNORECASE).search(long_string): #re.IGNORECASE is used to ignore case
    # Do Something if word is present
else:
    # Do Something else if word is not present
</code></pre>
</div>
<span class="comment-copy">Using "list" as a variable name will get you into trouble, as it hides the python "list"</span>
<span class="comment-copy">@Fabian, yeah, sure. It's just for sample.</span>
<span class="comment-copy">It's better to prefer readability over number of lines of code. In this case <code>any</code> is a perfect fit, but sometimes using more lines is better than a one liner</span>
<span class="comment-copy">@Ockonal: and if you want to check that <b>all</b> words from that list are inside the string, just replace <code>any()</code> above with <code>all()</code></span>
<span class="comment-copy">Note that if 'me' is in <code>list_</code>, it will count as a match, since 'me' is in 'some'. If you want to match whole words only, you'll need to change to <code>any(word in 'some one long two phrase three'.split() for word in list_)</code>, as I did when creating the sets in my answer.</span>
<span class="comment-copy">@VedGupta, use <code>len</code> instead of <code>any</code>? :) <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#len</a></span>
<span class="comment-copy">This only worked for me when I used a list comprehension: <code>any([word in 'some one long two phrase three' for word in list_])</code> which is what I would expect - not sure how it worked without that.</span>
<span class="comment-copy">@nlogn: <code>words = [word for word in list_ if word in 'long phrase']</code> (or use <code>filter</code>).</span>
<span class="comment-copy">That won't be the same as it just checks if space separated words match the words you are looking for. You won't be able to find <code>foo</code> within <code>foobar</code> for example.</span>
<span class="comment-copy">@poke - True. It's not clear to me whether the OP wants such partial/embedded word matches or not. As often as not, people write code testing for a word within a larger string of words, assuming they are doing word matching but in fact are doing string matching. This method checks whole words against a set of whole words, without looking for any embedded matches (such as matching 'out' in 'about').</span>
<span class="comment-copy">Yeah sure, I just thought it might be important to mention that your solution (which is a good one btw.) does not behave the same as the <code>in</code> operator.</span>
<span class="comment-copy">Thanks Paul, exactly what I was looking for!</span>
<span class="comment-copy">Thanks for such answer. And, please, add quote after <code>list_of_words</code> at second line.</span>
<span class="comment-copy">just tried the last one in python 3.3 I had to use <code>if word_set.intersection(phrase_set):</code></span>
<span class="comment-copy">@dave which is a more efficient way if my list of words is going to be 30-50 words long, and my strings will be upto 300 words. And i have to do upwards of 100k such comparisons?</span>
<span class="comment-copy">@ketanbhatt It will depend on a number of factors.  Do you need to match whole words?  Will a large proportion of strings have no matches?  Will some words in the list appear more often than others?    You need to time each of the alternatives on a representative subset of the strings to see which one performs best.</span>
<span class="comment-copy">for the whole word matches  with the "\b" token: <code>words_re = re.compile(r"\b" + r"\b|".join(list_of_words)+r"\b")</code></span>
