<div class="post-text" itemprop="text">
<p>I completed my first proper project in Python and now my task is to write tests for it.</p>
<p>Since this is the first time I did a project, this is the first time I would be writing tests for it.</p>
<p>The question is, <em>how</em> do I start? I have absolutely no idea. Can anyone point me to some documentation/ tutorial/ link/ book that I can use to start with writing tests (and I guess unit testing in particular)</p>
<p>Any advice will be welcomed on this topic. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you're brand new to using unittests, the simplest approach to learn is often the best. On that basis along I recommend using <a href="https://docs.pytest.org/en/latest/" rel="noreferrer"><code>py.test</code></a> rather than <a href="https://docs.python.org/3/library/unittest.html" rel="noreferrer">the default <code>unittest</code> module</a>.</p>
<p>Consider these two examples, which do the same thing:</p>
<p>Example 1 (unittest):</p>
<pre class="lang-python prettyprint-override"><code>import unittest

class LearningCase(unittest.TestCase):
    def test_starting_out(self):
        self.assertEqual(1, 1)

def main():
    unittest.main()

if __name__ == "__main__":
    main()
</code></pre>
<p>Example 2 (pytest):</p>
<pre class="lang-python prettyprint-override"><code>def test_starting_out():
    assert 1 == 1
</code></pre>
<p>Assuming that both files are named <code>test_unittesting.py</code>, how do we run the tests?</p>
<p>Example 1 (unittest):</p>
<pre class="lang-bash prettyprint-override"><code>cd /path/to/dir/
python test_unittesting.py
</code></pre>
<p>Example 2 (pytest):</p>
<pre class="lang-bash prettyprint-override"><code>cd /path/to/dir/
py.test
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The free Python book <a href="https://www.diveinto.org/python3/" rel="nofollow noreferrer">Dive Into Python</a> has a <a href="https://www.diveinto.org/python3/unit-testing.html" rel="nofollow noreferrer">chapter on unit testing</a> that you might find useful.</p>
<p>If you follow modern practices you should probably write the tests while you are writing your project, and not wait until your project is nearly finished.</p>
<p>Bit late now, but now you know for next time. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>There are, in my opinion, three great python testing frameworks that are good to check out.<br/>
<strong><a href="http://pythontesting.net/framework/unittest/unittest-introduction/">unittest</a></strong> - module comes standard with all python distributions<br/>
<strong><a href="http://pythontesting.net/framework/nose/nose-introduction/">nose</a></strong> - can run unittest tests, and has less boilerplate.<br/>
<strong><a href="http://pythontesting.net/framework/pytest/pytest-introduction/">pytest</a></strong> - also runs unittest tests, has less boilerplate, better reporting, lots of cool extra features</p>
<p>To get a good comparison of all of these, read through the introductions to each at <a href="http://pythontesting.net/start-here/">http://pythontesting.net/start-here</a>.<br/>
There's also extended articles on fixtures, and more there.</p>
</div>
<div class="post-text" itemprop="text">
<p>The docs for <a href="http://docs.python.org/library/unittest.html" rel="noreferrer">unittest</a> would be a good place to start.</p>
<p>Also, it is a bit late now, but in the future please consider writing unit tests before or during the project itself. That way you can use them to test as you go along, and (in theory) you can use them as regression tests, to verify that your code changes have not broken any existing code. This would give you the full benefit of writing test cases :)</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>unittest</strong> comes with the standard library, but I would recomend you <strong><a href="https://nose.readthedocs.org/en/latest/" rel="noreferrer">nosetests</a></strong>.</p>
<p>"<em>nose extends unittest to make testing easier.</em>"</p>
<p>I would also recomend you <strong><a href="http://www.logilab.org/857" rel="noreferrer">pylint</a></strong></p>
<p>"<em>analyzes Python source code looking for bugs and signs of poor quality.</em>"</p>
</div>
<div class="post-text" itemprop="text">
<p>As others already replied, it's late to write unit tests, but not too late. The question is whether your code is <strong>testable</strong> or not. Indeed, it's not easy to put existing code under test, there is even a book about this: <a href="https://rads.stackoverflow.com/amzn/click/com/0131177052" rel="nofollow noreferrer"><strong>Working Effectively with Legacy Code</strong></a> (see <a href="https://softwareengineering.stackexchange.com/questions/122014/what-are-the-key-points-of-working-effectively-with-legacy-code">key points</a> or <a href="http://www.netobjectives.com/system/files/WorkingEffectivelyWithLegacyCode.pdf" rel="nofollow noreferrer">precursor PDF</a>). </p>
<p>Now writing the unit tests or not is your call. You just need to be aware that it could be a tedious task. You might tackle this to learn unit-testing or consider writing acceptance (end-to-end) tests first, and start writing unit tests when you'll change the code or add new feature to the project. </p>
</div>
<div class="post-text" itemprop="text">
<p>nosetests is brilliant solution for unit-testing in python. It supports both unittest based testcases and doctests, and gets you started with it with just simple config file.</p>
</div>
<span class="comment-copy">It's never too late to write tests if that's you're intention. Better to have some than none for all that complain...</span>
<span class="comment-copy">Here's a good test-driven development book that's out for free online: <a href="http://chimera.labs.oreilly.com/books/1234000000754/index.html" rel="nofollow noreferrer">chimera.labs.oreilly.com/books/1234000000754/index.html</a></span>
<span class="comment-copy">good resource I stumbled upon <a href="https://www.jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/" rel="nofollow noreferrer">https://www.jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/</a>. As a newbie to python, I found it understandable.</span>
<span class="comment-copy">The Hitchhiker's Guide to Python has a brief overview of tools for unit testing: <a href="http://python-guide-pt-br.readthedocs.io/en/latest/writing/tests/" rel="nofollow noreferrer">python-guide-pt-br.readthedocs.io/en/latest/writing/tests</a></span>
<span class="comment-copy">The previous comment should be rated higher, since the guide also has an example code repository on <a href="https://github.com/kennethreitz/samplemod" rel="nofollow noreferrer">github.com/kennethreitz/samplemod</a> which is a great place to get started, too.</span>
<span class="comment-copy">I have heard about the simplicity of py.test at multiple places (<a href="http://docs.python-guide.org/en/latest/writing/tests/#py-test" rel="nofollow noreferrer">docs.python-guide.org/en/latest/writing/tests/#py-test</a>, <a href="https://docs.python.org/3.5/library/unittest.html#module-unittest" rel="nofollow noreferrer">docs.python.org/3.5/library/unittest.html#module-unittest</a>, <a href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/" rel="nofollow noreferrer">jeffknupp.com/blog/2013/12/09/…</a>) Why is <code>unit-test</code> still included in the standard library, if <code>py.test</code> and <code>nose</code> provide the same functionality with much simpler interface? Is it just to provide backward compatibility, or does <code>unittest</code> have some advantages that <code>py.test</code> and <code>nosetest</code> can't provide?</span>
<span class="comment-copy">@alpha_989 The standard python library is not intended to contain the best tools available. That's what PyPI is for. The standard <code>unittest</code> package is still good enough. It is <i>standard</i> which means that it's kind of guaranteed to work well. Finally, anyone who uses your code doesn't need to install extra packages.</span>
<span class="comment-copy">I'd still say that if you want to refactor code that doesn't have unit tests, you should first write unit tests for it</span>
<span class="comment-copy">Yeah, a lot of people who come to unittests for the first time hear what sounds like "well, it's kind of too late for your current project" from old hands: even if that's not what they actually meant to say, that's what newbies hear. It's like the Chinese proverb about planting a tree: the best time to start tests is at the beginning of a project; the second-best time to start tests is now!</span>
<span class="comment-copy">Dive into Python link is broken... :-(</span>
<span class="comment-copy">Dive into python domain seems to have expired, but web.archive.org to the rescue: <a href="https://web.archive.org/web/20171218185744/http://www.diveintopython.net/unit_testing/index.html" rel="nofollow noreferrer">web.archive.org/web/20171218185744/http://…</a></span>
<span class="comment-copy">Aah! I had no idea that it was to be done along the project. I will take care in future. Thanks for the link though.</span>
<span class="comment-copy">That's if you want test-driven development, which is not a bad thing to have. In my case, I'm looking at existing code and trying to understand it by writing and tweaking tests to pass, and that got me started on <code>unittest</code>. Once I get the hang of things, I'll be using it more for development, as well as increasing the number of test cases for each unit.</span>
<span class="comment-copy">+1 for "Working Effectivly with Legacy Code". It's all about code that don't have tests.</span>
<span class="comment-copy">Your nosetests link is obsolete. It seems the new location is: nose.readthedocs.org/en/latest</span>
<span class="comment-copy">As per the documentation on github and the nosetest website, <code>nose</code> and <code>nose2</code> are in maintanance mode. Its better to start with <code>py.test</code> as it has a lot more support</span>
