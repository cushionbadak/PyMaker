<div class="post-text" itemprop="text">
<p>I need to produce a time string that matches the iso format <code>yyyy-mm-ddThh:mm:ss.ssssss-ZO:NE</code>.  The <code>now()</code> and <code>utcnow()</code> class methods almost do what I want.</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; #time adjusted for current timezone
&gt;&gt;&gt; datetime.datetime.now().isoformat()
'2010-08-03T03:00:00.000000'
&gt;&gt;&gt; #unadjusted UTC time
&gt;&gt;&gt; datetime.datetime.utcnow().isoformat()
'2010-08-03T10:00:00.000000'
&gt;&gt;&gt;
&gt;&gt;&gt; #How can I do this?
&gt;&gt;&gt; datetime.datetime.magic()
'2010-08-03T10:00:00.000000-07:00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like the following example. Note I'm in Eastern Australia (UTC + 10 hours at the moment). </p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dtnow = datetime.datetime.now();dtutcnow = datetime.datetime.utcnow()
&gt;&gt;&gt; dtnow
datetime.datetime(2010, 8, 4, 9, 33, 9, 890000)
&gt;&gt;&gt; dtutcnow
datetime.datetime(2010, 8, 3, 23, 33, 9, 890000)
&gt;&gt;&gt; delta = dtnow - dtutcnow
&gt;&gt;&gt; delta
datetime.timedelta(0, 36000)
&gt;&gt;&gt; hh,mm = divmod((delta.days * 24*60*60 + delta.seconds + 30) // 60, 60)
&gt;&gt;&gt; hh,mm
(10, 0)
&gt;&gt;&gt; "%s%+02d:%02d" % (dtnow.isoformat(), hh, mm)
'2010-08-04T09:33:09.890000+10:00'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get the current time in UTC in Python 3.2+:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime, timezone
&gt;&gt;&gt; datetime.now(timezone.utc).isoformat()
'2015-01-27T05:57:31.399861+00:00'
</code></pre>
<p>To get local time in Python 3.3+:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime, timezone
&gt;&gt;&gt; datetime.now(timezone.utc).astimezone().isoformat()
'2015-01-27T06:59:17.125448+01:00'
</code></pre>
<p>Explanation: <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.now" rel="noreferrer"><code>datetime.now(timezone.utc)</code></a> produces a timezone aware <code>datetime</code> object in UTC time. <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="noreferrer"><code>astimezone()</code></a> then changes the timezone of the <code>datetime</code> object, to the system's locale timezone if called with no arguments. Timezone aware <code>datetime</code> objects then produce the correct ISO format automatically.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to make your datetime objects timezone aware. from the <a href="http://docs.python.org/library/datetime.html#module-datetime" rel="noreferrer">datetime docs</a>:</p>
<blockquote>
<p>There are two kinds of date and time objects: “naive” and “aware”. This distinction refers to whether the object has any notion of time zone, daylight saving time, or other kind of algorithmic or political time adjustment. Whether a naive datetime object represents Coordinated Universal Time (UTC), local time, or time in some other timezone is purely up to the program, just like it’s up to the program whether a particular number represents metres, miles, or mass. Naive datetime objects are easy to understand and to work with, at the cost of ignoring some aspects of reality.</p>
</blockquote>
<p>When you have an aware datetime object, you can use isoformat() and get the output you need.</p>
<p>To make your datetime objects aware, you'll need to <a href="http://docs.python.org/library/datetime.html#datetime.datetime.strftime" rel="noreferrer">subclass tzinfo, like the second example in here</a>, or simpler - use a package that does it for you, like <a href="http://pytz.sourceforge.net/" rel="noreferrer">pytz</a> or <a href="http://labix.org/python-dateutil" rel="noreferrer">python-dateutil</a></p>
<p>Using pytz, this would look like:</p>
<pre><code>import datetime, pytz
datetime.datetime.now(pytz.timezone('US/Central')).isoformat()
</code></pre>
<p>You can also control the output format, if you use strftime with the <a href="http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">'%z' format directive</a> like</p>
<pre><code>datetime.datetime.now(pytz.timezone('US/Central')).strftime('%Y-%m-%dT%H:%M:%S.%f%z')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://arrow.readthedocs.org/en/latest/">arrow</a>:</p>
<pre><code>&gt;&gt;&gt; import arrow
&gt;&gt;&gt; arrow.now().isoformat()
'2015-04-17T06:36:49.463207-05:00'
&gt;&gt;&gt; arrow.utcnow().isoformat()
'2015-04-17T11:37:17.042330+00:00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it in Python 2.7+ with <code>python-dateutil</code> (which is insalled on Mac by default):</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; from dateutil.tz import tzlocal
&gt;&gt;&gt; datetime.now(tzlocal()).isoformat()
'2016-10-22T12:45:45.353489-03:00'
</code></pre>
<p>Or you if you want to convert from an existed stored string:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; from dateutil.tz import tzlocal
&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse("2016-10-21T16:33:27.696173").replace(tzinfo=tzlocal()).isoformat()
'2016-10-21T16:33:27.696173-03:00' &lt;-- Atlantic Daylight Time (ADT) 
&gt;&gt;&gt; parse("2016-01-21T16:33:27.696173").replace(tzinfo=tzlocal()).isoformat()
'2016-01-21T16:33:27.696173-04:00' &lt;-- Atlantic Standard Time (AST)
</code></pre>
</div>
<span class="comment-copy">Small fix for formatting: "%s%+03d:%02d" % (dtnow.isoformat(), hh, mm)</span>
<span class="comment-copy">Using subtraction to determine the difference between your own timezone and any other is fraught with dangers.  Much better are the solutions where you provide the timezone.</span>
<span class="comment-copy">I agree: don't use this solution. Don't reinvent the wheel.</span>
<span class="comment-copy">This should not be the accepted answer, see the other answers.</span>
<span class="comment-copy">This is hardly a "correct" answer for most cases.</span>
<span class="comment-copy">As of Python 3.6, the <code>astimezone()</code> method can now be called on naive instances that are presumed to represent system local time.</span>
<span class="comment-copy">@A-B-B even on Python 3.6, one should use aware datetime objects that work even if the current local time is ambiguous (e.g., during a DST transition).</span>
<span class="comment-copy">Not entirely correct: the %z format directive prints the time zone offset without a colon, the ISO format however separates hours and minutes in the TZ specifier with a colon. However, calling the isoformat() method on a timezone-aware datetime will work!</span>
<span class="comment-copy">A timezone aware datetime will format correctly with .isoformat().</span>
<span class="comment-copy">To expand on the comment from @DavidK.Hess , the <code>strftime</code> in your second example is overly complicated.  The following works and (imo) is cleaner: <code>datetime.now().replace(tzinfo=pytz.timezone("US/Eastern")).isoformat()</code></span>
<span class="comment-copy">Thanks @jedwards and David - I added that to the answer.</span>
<span class="comment-copy">@jedwards: do not use <code>datetime.replace()</code> with a pytz timezone that might have multiple UTC offsets (at different times).</span>
