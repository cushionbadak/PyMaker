<div class="post-text" itemprop="text">
<p>I have one process who's reading from a file (using <code>file.read()</code>) and one process who's writing to the same file (<code>file.write()</code>). The problem is it doesn't work - I get no errors but they can't operate at the same time. I've tried making the read and write operations none-blocking and then flushing the stream, as follows:</p>
<pre><code>fcntl.fcntl(file, fcntl.F_SETFL, os.O_NONBLOCK)
file.write(msg)
file.flush()
</code></pre>
<p>Am I completely misunderstanding it? How should one accomplish writing and reading to one file from different processes?</p>
</div>
<div class="post-text" itemprop="text">
<p>test1.py</p>
<pre><code>import os
f = open('txt.txt', 'a', os.O_NONBLOCK)
while 1:
        f.write('asd')
        f.flush()
</code></pre>
<p>test2.py</p>
<pre><code>import os
f = open('txt.txt', 'r', os.O_NONBLOCK)
while 1:
    print f.read(3)
</code></pre>
<p>This works fine for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is there a reason to use a common file? Inter-process communication is probably much easier using <a href="http://docs.python.org/library/socket.html#example" rel="noreferrer">sockets</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at this <em>Read-Write Lock</em> class:</p>
<ul>
<li><a href="http://code.activestate.com/recipes/502283-read-write-lock-class-rlock-like/" rel="nofollow noreferrer">http://code.activestate.com/recipes/502283-read-write-lock-class-rlock-like/</a></li>
</ul>
<p>and at this articles about locking and threading:</p>
<ul>
<li><a href="http://effbot.org/zone/thread-synchronization.htm" rel="nofollow noreferrer">http://effbot.org/zone/thread-synchronization.htm</a></li>
<li><a href="http://linuxgazette.net/107/pai.html" rel="nofollow noreferrer">http://linuxgazette.net/107/pai.html</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Another great way to do this is to use a pipe</p>
<p><a href="https://www.python-course.eu/pipes.php" rel="nofollow noreferrer">This example</a> instantiates a pipe, which returns a reader and a writer object. Then one process writes to the pipe using the writer and the other reads from it using the reader.</p>
<p>Python os.pipe(): <a href="https://docs.python.org/3/library/os.html#os.pipe" rel="nofollow noreferrer">https://docs.python.org/3/library/os.html#os.pipe</a></p>
</div>
<span class="comment-copy">Yes, this worked fine for me too, thanks.</span>
<span class="comment-copy">Note that os.O_NONBLOCK is not available under Windows.</span>
<span class="comment-copy">You certainly got a point. I initially thought of this way of doing it, but changed my mind and went for file i/o, and once I encountered the problem and started wrestling with it, I sort of came to the point where I want to solve it :P. Thanks for the answer still.</span>
