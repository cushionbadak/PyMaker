<div class="post-text" itemprop="text">
<blockquote>
<h3>id(object)</h3>
<p>This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. </p>
</blockquote>
<p>Can you explain this output? Why does <code>j</code>'s id change?</p>
<pre><code>&gt;&gt;&gt; i=10  
&gt;&gt;&gt; id(i)  
6337824  
&gt;&gt;&gt; j=10  
&gt;&gt;&gt; id(j)  
6337824  
&gt;&gt;&gt; j=j+1  
&gt;&gt;&gt; id(j)  
6337800  
&gt;&gt;&gt; id(i)  
6337824  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because integers are immutable, each integer value is a distinct object with a unique id. The integer <code>10</code> has a different id from <code>11</code>. Doing <code>j=j+1</code> doesn't change the value of an existing integer object, rather it changes <code>j</code> to point to the object for <code>11</code>.</p>
<p>Check out what happens when we independently create a new variable <code>k</code> and assign it the value <code>11</code>:</p>
<pre><code>&gt;&gt;&gt; j=10
&gt;&gt;&gt; id(j)
8402204
&gt;&gt;&gt; j=j+1
&gt;&gt;&gt; id(j)
8402192
&gt;&gt;&gt; k=11
&gt;&gt;&gt; id(k)
8402192
</code></pre>
<p>Note that it is not always the case that every integer has one and only one corresponding object. This only happens for small integers that Python decides to cache. It does not happen for large integers:</p>
<pre><code>&gt;&gt;&gt; x = 123456789
&gt;&gt;&gt; id(x)
8404568
&gt;&gt;&gt; y = 123456789
&gt;&gt;&gt; id(y)
8404604
</code></pre>
<p>See <a href="https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong" rel="nofollow noreferrer">https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong</a>:</p>
<blockquote>
<p>The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This is why <code>2**8 is 2**8 == True</code>, and <code>2**9 is 2**9 == False</code>.</p>
<p>Values between -5 and 256 are preallocated. </p>
</div>
<div class="post-text" itemprop="text">
<p>The same <code>id</code> for different variables is a product of how Python creates variables. </p>
<p><code>id</code> is a hash of the the location of an object in memory. Python variables are <em>references</em> to an object, not new objects. If several variables reference the same object, they have the same `id.</p>
</div>
<div class="post-text" itemprop="text">
<p>In CPython, <code>id</code> is generally derived from the <code>Py_Object</code>'s pointer value, that is its location in memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python caches immutable objects(read integers and tuples..) - which is why they are immutable
and saves memory if u reference the same immutable in many
places. So <code>small</code> integers, empty tuples and such are actually
cached in Python runtime, so you keep getting back the same object
and hence the same id.</p>
<p>Try this for the list, you don't get the same id.</p>
</div>
<div class="post-text" itemprop="text">
<p>These are primitive types, so I'm guessing each value gets its own ID.  Try creating a true object and I think you'll see the functionality you expect.</p>
<p>If you need an id for a primitive, you could create an object with just one member of that type.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>j</code>'s id changes because the object named by <code>j</code> changes. First you initialize <code>j</code> to 10, so when you call <code>id(j)</code> you get the id of <code>10</code>. Then you set <code>j</code> to 11, so after that when you call <code>id(j)</code> you get the id of <code>11</code>.</p>
</div>
<span class="comment-copy">is it like i and j are object references to the same object initially.. but when j changes, they start referring to different objects?</span>
<span class="comment-copy">For why they're initially the same, see [ Python “is” operator behaves unexpectedly with integers ](<a href="http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers" title="python is operator behaves unexpectedly with integers">stackoverflow.com/questions/306313/…</a>).  Bascially, ints are immutable objects, but small ones are all kept interned as an optimization.</span>
<span class="comment-copy">Fixed the link.</span>
<span class="comment-copy">Up for that interesting test!</span>
<span class="comment-copy">Python doesn't cache all immutable objects.  In fact, it doesn't even cache all integers.  See <a href="http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers/306353#306353">this answer</a>.</span>
<span class="comment-copy">why down vote......?</span>
<span class="comment-copy">every thing is an object in python,there is no such thing as primitive types in python as in java</span>
