<div class="post-text" itemprop="text">
<p>In Python, the built-in functions <a href="http://docs.python.org/library/functions.html#all" rel="noreferrer"><code>all</code></a> and <a href="http://docs.python.org/library/functions.html#any" rel="noreferrer"><code>any</code></a> return <code>True</code> and <code>False</code> respectively for empty iterables. I realise that if it were the other way around, this question could still be asked. But I'd like to know why <em>that specific</em> behaviour was chosen. Was it arbitrary, ie. could it just as easily have been the other way, or is there an underlying reason?</p>
<p>(The reason I ask is simply because I never remember which is which, and if I knew the rationale behind it then I might. Also, curiosity.)</p>
</div>
<div class="post-text" itemprop="text">
<p>How about some analogies...</p>
<p>You have a sock drawer, but it is currently empty. Does it contain any black sock? No - you don't have any socks at all so you certainly don't have a black one. Clearly <code>any([])</code> must return false - if it returned true this would be counter-intuitive.</p>
<p>The case for <code>all([])</code> is slightly more difficult. See the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Vacuous_truth" rel="noreferrer">vacuous truth</a>. Another analogy: If there are no people in a room then everyone in that room can speak French.</p>
<p>Mathematically <code>all([])</code> can be written:</p>
<blockquote>
<p><img src="https://upload.wikimedia.org/math/e/b/6/eb6ff3d273962bfadb292ad2a3c9fbd8.png"/> where the set A is empty.</p>
</blockquote>
<p>There is considerable debate about whether vacuous statements should be considered true or not, but from a logical viewpoint it makes the most sense:</p>
<blockquote>
<p>The main argument that all vacuously true statements are true is as follows: As explained in the article on <a href="http://en.wikipedia.org/wiki/Logical_conditional" rel="noreferrer">logical conditionals</a>, the axioms of propositional logic entail that if P is false, then P =&gt; Q is true. That is, if we accept those axioms, we must accept that vacuously true statements are indeed true.</p>
</blockquote>
<p>Also from the article:</p>
<blockquote>
<p>There seems to be no direct reason to pick true; it’s just that things blow up in our face if we don’t.</p>
</blockquote>
<p>Defining a "vacuously true" statement to return false in Python would violate the <a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="noreferrer">principle of least astonishment</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One property of <code>any</code> is its recursive definition</p>
<pre><code>any([x,y,z,...]) == (x or any([y,z,...]))
</code></pre>
<p>That means</p>
<pre><code>x == any([x]) == (x or any([]))
</code></pre>
<p>The equality is correct for any <code>x</code> if and only if <code>any([])</code> is defined to be False. Similar for <code>all</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe <code>all([])==True</code> is generally harder to grasp, so here are a collection of examples where I think that behaviour is obviously correct:</p>
<ul>
<li>A movie is suitable for the hard of hearing if <em>all</em> the dialog in the film is captioned. A movie without dialog is still suitable for the hard of hearing.</li>
<li>A windowless room is dark when <em>all</em> the lights inside are turned off. When there are no lights inside, it is dark.</li>
<li>You can pass through airport security when <em>all</em> your liquids are contained in 100ml bottles. If you have no liquids you can still pass through security.</li>
<li>You can fit a soft bag through a narrow slot if <em>all</em> the items in the bag are narrower than the slot. If the bag is empty, it still fits through the slot.</li>
<li>A task is ready to start when <em>all</em> its prerequisites have been met. If a task has no prerequisites, it's ready to start.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Perl 6 also takes the position that <code>all()</code> and <code>any()</code> on empty lists should serve as sane base-cases for their respective reduction operators, and therefore <code>all()</code> is true and <code>any()</code> is false.</p>
<p>That is to say, <code>all(a, b, c)</code> is equivalent to <code>[&amp;] a, b, c</code>, which is equivalent to <code>a &amp; b &amp; c</code> (reduction on the "junctive and" operator, but you can ignore junctions and consider it a logical and for this post), and <code>any(a, b, c)</code> is equivalent to <code>[|] a, b, c</code>, which is equivalent to <code>a | b | c</code> (reduction on the "junctive or" operator -- again, you can pretend it's the same as logical or without missing anything).</p>
<p>Any operator which can have reduction applied to it needs to have a defined behavior when reducing 0 terms, and usually this is done by having a natural identity element -- for instance, <code>[+]()</code> (reduction of addition across zero terms) is 0 because 0 is the additive identity; adding zero to any expression leaves it unchanged. <code>[*]()</code> is likewise 1 because 1 is the multiplicative identity. We've already said that <code>all</code> is equivalent to <code>[&amp;]</code> and <code>any</code> is equivalent to <code>[|]</code> -- well, truth is the <em>and</em>-identity, and falsity is the <em>or</em>-identity -- <em>x and True</em> is x, and <em>x or False</em> is x. This makes it inevitable that <code>all()</code> should be true and <code>any()</code> should be false.</p>
<p>To put it in an entirely different (but practical) perspective, <code>any</code> is a latch that starts off false and becomes true whenever it sees something true; <code>all</code> is a latch that starts off true and becomes false whenever it sees something false. Giving them no arguments means giving them no chance to change state, so you're simply asking them what their "default" state is. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think of them as being implemented this way</p>
<pre><code>def all(seq):
    for item in seq:
        if not item:
            return False
    return True

def any(seq):
    for item in seq:
        if item:
            return True
    return False
</code></pre>
<p>not sure they <em>are</em> implemented that way though</p>
</div>
<div class="post-text" itemprop="text">
<p>For general interest, here's the <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">blog post</a> in which GvR proposes any/all with a sample implementation like gnibbler's and references quanifiers in ABC.  </p>
</div>
<div class="post-text" itemprop="text">
<p><code>any</code> and <code>all</code> have the same meaning in python as everywhere else:</p>
<ul>
<li><code>any</code> is true if at least one is true</li>
<li><code>all</code> is not true if at least one is not true</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is really more of a comment, but code in comments doesn't work very well.</p>
<p>In addition to the other logical bases for why <code>any()</code> and <code>all()</code> work as they do, they have to have opposite "base" cases so that this relationship holds true:</p>
<pre><code>all(x for x in iterable) == not any(not x for x in iterable)
</code></pre>
<p>If <code>iterable</code> is zero-length, the above still should hold true.  Therefore</p>
<pre><code>all(x for x in []) == not any(not x for x in [])
</code></pre>
<p>which is equivalent to</p>
<pre><code>all([]) == not any([])
</code></pre>
<p>And it would be very surprising if <code>any([])</code> were the one that is true.</p>
</div>
<div class="post-text" itemprop="text">
<p>The official reason is unclear, but from the docs (confirming @John La Rooy's post):</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all(iterable)</code></a></p>
<p>Return <code>True</code> if all elements of the iterable are true (or if the iterable is empty). 
   Equivalent to:</p>
<pre><code>   def all(iterable):
       for element in iterable:
           if not element:
               return False
      return True
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any(iterable)</code></a></p>
<p>Return <code>True</code> if any element of the iterable is true. If the iterable is empty, return <code>False</code>. Equivalent to:</p>
<pre><code>   def any(iterable):
       for element in iterable:
           if element:
               return True
       return False
</code></pre>
</blockquote>
<p>See also the <a href="https://github.com/python/cpython/blob/9dfa0fe587eae3626ffc973680c6a17f35de3864/Python/bltinmodule.c#L317" rel="nofollow noreferrer">CPython-implementation and comments</a>.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><code>all([]) == True</code>: zero out of zero - check</li>
<li><code>any([]) == False</code>: anyone? nobody - fail</li>
</ul>
</div>
<span class="comment-copy">Clearly Python needs a <code>FileNotFound</code> value for just these situations.</span>
<span class="comment-copy">Also there not any person in the room that can speak French.</span>
<span class="comment-copy">nicely put by a man with more than the average number of arms</span>
<span class="comment-copy">I understand the concept, but all this says is that it's arbitrary. I was wondering whether there was an authoritative reason why the choice was made the way it was.</span>
<span class="comment-copy">"Are <i>all</i> eleven-legged cats vampires? Yes -- <i>all</i> 0 of them." "Is there <i>any</i> eleven-legged vampire cat? No, there are isn't <i>any</i>."</span>
<span class="comment-copy">That's really elegant and memorable.</span>
<span class="comment-copy">I like these! Especially the first and last.</span>
<span class="comment-copy">Those definitions are sort of "after the fact" though...</span>
<span class="comment-copy">@detly On the contrary, what I wrote is pure logic, much older than any programming language. The implementation comes after the logic.</span>
<span class="comment-copy">@detly Real-file example: Are there <b>any</b> black cats on Mars? No, because there are no cats there. Are <b>all</b> cats on Mars black? Yes, every cat on Mars is black.</span>
<span class="comment-copy">Okay, I see what you mean now.</span>
