<div class="post-text" itemprop="text">
<p>I have two zip files, both of them open well with Windows Explorer and 7-zip. </p>
<p>However when i open them with Python's zipfile module [ zipfile.ZipFile("filex.zip") ], one of them gets opened but the other one gives error "<code>BadZipfile: File is not a zip file</code>".</p>
<p>I've made sure that the latter one is a valid Zip File by opening it with 7-Zip and looking at its properties (says 7Zip.ZIP). When I open the file with a text editor, the first two characters are "PK", showing that it is indeed a zip file.</p>
<p>I'm using Python 2.5 and really don't have any clue how to go about for this. I've tried it both with Windows as well as Ubuntu and problem exists on both platforms.</p>
<p><strong>Update:</strong> Traceback from Python 2.5.4 on Windows:</p>
<pre><code>Traceback (most recent call last):
File "&lt;module1&gt;", line 5, in &lt;module&gt;
    zipfile.ZipFile("c:/temp/test.zip")
File "C:\Python25\lib\zipfile.py", line 346, in init
    self._GetContents()
File "C:\Python25\lib\zipfile.py", line 366, in _GetContents
    self._RealGetContents()
File "C:\Python25\lib\zipfile.py", line 378, in _RealGetContents
    raise BadZipfile, "File is not a zip file"
BadZipfile: File is not a zip file
</code></pre>
<p>Basically when the <code>_EndRecData</code> function is called for getting data from End of Central Directory" record, the comment length checkout fails [ endrec[7] == len(comment) ]. </p>
<p>The values of locals in the <code>_EndRecData</code> function are as following:</p>
<pre><code> END_BLOCK: 4096,
 comment: '\x00',
 data: '\xd6\xf6\x03\x00\x88,N8?&lt;e\xf0q\xa8\x1cwK\x87\x0c(\x82a\xee\xc61N\'1qN\x0b\x16K-\x9d\xd57w\x0f\xa31n\xf3dN\x9e\xb1s\xffu\xd1\.....', (truncated)
 endrec: ['PK\x05\x06', 0, 0, 4, 4, 268, 199515, 0],
 filesize: 199806L,
 fpin: &lt;open file 'c:/temp/test.zip', mode 'rb' at 0x045D4F98&gt;,
 start: 4073
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>files named file can confuse python - try naming it something else. if it <strong>STILL</strong> wont work, try this code:</p>
<pre><code>def fixBadZipfile(zipFile):  
 f = open(zipFile, 'r+b')  
 data = f.read()  
 pos = data.find('\x50\x4b\x05\x06') # End of central directory signature  
 if (pos &gt; 0):  
     self._log("Trancating file at location " + str(pos + 22)+ ".")  
     f.seek(pos + 22)   # size of 'ZIP end of central directory record' 
     f.truncate()  
     f.close()  
 else:  
     # raise error, file is truncated  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>astronautlevel's solution works for most cases, but the compressed data and CRCs in the Zip can also contain the same 4 bytes. You should do an <code>rfind</code> (not <code>find</code>), seek to pos+20 and then add write <code>\x00\x00</code> to the end of the file (tell zip applications that the length of the 'comments' section is 0 bytes long).</p>
<pre><code>
    # HACK: See http://bugs.python.org/issue10694
    # The zip file generated is correct, but because of extra data after the 'central directory' section,
    # Some version of python (and some zip applications) can't read the file. By removing the extra data,
    # we ensure that all applications can read the zip without issue.
    # The ZIP format: http://www.pkware.com/documents/APPNOTE/APPNOTE-6.3.0.TXT
    # Finding the end of the central directory:
    #   http://stackoverflow.com/questions/8593904/how-to-find-the-position-of-central-directory-in-a-zip-file
    #   http://stackoverflow.com/questions/20276105/why-cant-python-execute-a-zip-archive-passed-via-stdin
    #       This second link is only losely related, but echos the first, "processing a ZIP archive often requires backwards seeking"
    content = zipFileContainer.read()
    pos = content.rfind('\x50\x4b\x05\x06') # reverse find: this string of bytes is the end of the zip's central directory.
    if pos&gt;0:
        zipFileContainer.seek(pos+20) # +20: see secion V.I in 'ZIP format' link above.
        zipFileContainer.truncate()
        zipFileContainer.write('\x00\x00') # Zip file comment length: 0 byte length; tell zip applications to stop reading.
        zipFileContainer.seek(0)

    return zipFileContainer</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I run into the same issue. My problem was that it was a gzip instead of a zip file. I switched to the class <code>gzip.GzipFile</code> and it worked like a charm.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem and was able to solve this issue for my files, see my answer at 
<a href="https://stackoverflow.com/questions/4923142/zipfile-cant-handle-some-type-of-zip-data">zipfile cant handle some type of zip data?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Show the full traceback that you got from Python -- this may give a hint as to what the specific problem is. <strong>Unanswered:</strong> What software produced the bad file, and on what platform?</p>
<p>Update: Traceback indicates having problem detecting the "End of Central Directory" record in the file -- see function _EndRecData starting at line 128 of C:\Python25\Lib\zipfile.py</p>
<p>Suggestions:<br/>
(1) Trace through the above function<br/>
(2) Try it on the latest Python<br/>
(3) Answer the question above.<br/>
(4) Read <a href="http://www.velocityreviews.com/forums/t658579-badzipfile-file-is-not-a-zip-file.html" rel="nofollow noreferrer">this</a> and anything else found by <code>google("BadZipfile: File is not a zip file")</code> that appears to be relevant</p>
</div>
<div class="post-text" itemprop="text">
<p>Sometime there are zip file which contain corrupted files and upon unzipping the zip gives badzipfile error. but there are tools like 7zip winrar which ignores these errors and successfully unzip the zip file. you can create a sub process and use this code to unzip your zip file without getting BadZipFile Error.</p>
<pre><code>import subprocess
ziploc = "C:/Program Files/7-Zip/7z.exe" #location where 7zip is installed
cmd = [ziploc, 'e',your_Zip_file.zip ,'-o'+ OutputDirectory ,'-r' ] 
sp = subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried a newer python, or if that is too much trouble, simply a newer zipfile.py? I have successfully used a copy of zipfile.py from Python 2.6.2 (latest at the time) with Python 2.5 in order to open some zip files that weren't supported by Py2.5s zipfile module.</p>
</div>
<span class="comment-copy">Try to run the unix <code>file</code> command on both of your files. May be it will give you some clue.</span>
<span class="comment-copy">For both files it says: Zip archive data, at least v2.0 to extract</span>
<span class="comment-copy">bad news. I hoped it will say something different. Does all your files gets uncompressed by 7zip w/o any errors? Are they both can be uncompressed with unix' <code>unzip</code> command as well? Did you updated your python libzip bindings to latest version?</span>
<span class="comment-copy">Yes, both files get uncompressed by 7-zip as well as unzip without any errors.  I haven't tried updating the libzip bindings to latest version. How do I do that?</span>
<span class="comment-copy">Could it be this: <a href="http://bugs.python.org/issue1757072" rel="nofollow noreferrer">bugs.python.org/issue1757072</a> ?</span>
<span class="comment-copy">Impressed with the signature thing</span>
<span class="comment-copy">how to extract using <code>GzipFile </code></span>
<span class="comment-copy">Read <a href="https://docs.python.org/3/library/gzip.html#module-gzip" rel="nofollow noreferrer">documentation</a></span>
<span class="comment-copy">Windows, Python 2.5.2:  Traceback (most recent call last):   File "&lt;module1&gt;", line 5, in &lt;module&gt;     zipfile.ZipFile("c:/temp/test.zip")   File "C:\Python25\lib\zipfile.py", line 346, in <b>init</b>     self._GetContents()   File "C:\Python25\lib\zipfile.py", line 366, in _GetContents     self._RealGetContents()   File "C:\Python25\lib\zipfile.py", line 378, in _RealGetContents     raise BadZipfile, "File is not a zip file" BadZipfile: File is not a zip file</span>
<span class="comment-copy">Here's the formatted version of traceback: <a href="http://dpaste.de/X0Pb/" rel="nofollow noreferrer">dpaste.de/X0Pb</a></span>
<span class="comment-copy">Thanks for the link. I've already gone through it but that didn't help.  Tested on Python 2.5.4, 2.6.5 on Windows and Python 2.5.2 on Ubuntu 64-bit.</span>
<span class="comment-copy">Yes I've tried it with 2.6.5 as well. Problem persists :(</span>
