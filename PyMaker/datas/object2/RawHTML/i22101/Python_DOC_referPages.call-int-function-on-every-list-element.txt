<div class="post-text" itemprop="text">
<p>I have a list with numeric strings, like so:</p>
<pre><code>numbers = ['1', '5', '10', '8'];
</code></pre>
<p>I would like to convert every list element to integer, so it would look like this:</p>
<pre><code>numbers = [1, 5, 10, 8];
</code></pre>
<p>I could do it using a loop, like so:</p>
<pre><code>new_numbers = [];
for n in numbers:
    new_numbers.append(int(n));
numbers = new_numbers;
</code></pre>
<p>Does it have to be so ugly? I'm sure there is a more pythonic way to do this in a one line of code. Please help me out.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehensions</a> are for:</p>
<pre><code>numbers = [ int(x) for x in numbers ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.x another approach is to use <a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map</code></a>:</p>
<pre><code>numbers = map(int, numbers)
</code></pre>
<p>Note: in Python 3.x <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map</code></a> returns a map object which you can convert to a list if you want:</p>
<pre><code>numbers = list(map(int, numbers))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>just a point,</p>
<pre><code>numbers = [int(x) for x in numbers]
</code></pre>
<p>the list comprehension is more natural, while</p>
<pre><code>numbers = map(int, numbers)
</code></pre>
<p>is faster. </p>
<p><em>Probably this will not matter in most cases</em></p>
<p>Useful read: <a href="https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map">LP vs map</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you are intending on passing those integers to a function or method, consider this example:</p>
<pre><code>sum(int(x) for x in numbers)
</code></pre>
<p>This construction is intentionally remarkably similar to list comprehensions mentioned by adamk. Without the square brackets, it's called a <em>generator expression</em>, and is a very memory-efficient way of passing a list of arguments to a method. A good discussion is available here: <a href="https://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension">Generator Expressions vs. List Comprehension</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Another way,</p>
<pre><code>for i, v in enumerate(numbers): numbers[i] = int(v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to make it in Python 3:</p>
<p><code>numbers = [*map(int, numbers)]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Thought I'd consolidate the answers and show some <code>timeit</code> results.</p>
<p>Python 2 sucks pretty bad at this, but <code>map</code> is a bit faster than comprehension.</p>
<pre><code>Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC v.1500 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup = """import random
random.seed(10)
l = [str(random.randint(0, 99)) for i in range(100)]"""
&gt;&gt;&gt; timeit.timeit('[int(v) for v in l]', setup)
116.25092001434314
&gt;&gt;&gt; timeit.timeit('map(int, l)', setup)
106.66044823117454
</code></pre>
<p>Python 3 is over 4x faster by itself, but converting the <code>map</code> generator object to a list is still faster than comprehension, and creating the list by unpacking the <code>map</code> generator (thanks Artem!) is slightly faster still.</p>
<pre><code>Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup = """import random
random.seed(10)
l = [str(random.randint(0, 99)) for i in range(100)]"""
&gt;&gt;&gt; timeit.timeit('[int(v) for v in l]', setup)
25.133059591551955
&gt;&gt;&gt; timeit.timeit('list(map(int, l))', setup)
19.705547827217515
&gt;&gt;&gt; timeit.timeit('[*map(int, l)]', setup)
19.45838406513076
</code></pre>
<p>Note: In Python 3, 4 elements seems to be the crossover point (3 in Python 2) where comprehension is slightly faster, though unpacking the generator is still faster than either for lists with more than 1 element.</p>
</div>
<span class="comment-copy">What version of Python are you using?</span>
<span class="comment-copy">I use python 2.6, thank you</span>
<span class="comment-copy">Shows invalid syntax to me</span>
<span class="comment-copy">In Python 3.x, <code>map</code> returns an iterator instead of a list, so it needs to be written as <code>list(map(int, numbers))</code> if a list is needed.</span>
<span class="comment-copy">I think currently the list comprehension approach is a bit more favored.</span>
<span class="comment-copy">@extraneon: Yeah... or perhaps consider using a generator instead of a list, depending on what you will use it for. The advantage of a generator is that if you might not need to look at all elements then you won't have to waste time calculating them in advance.</span>
<span class="comment-copy">Measured with timeit under Python 2.7.2: LC: 3.578153133392334, map: 4.9065070152282715</span>
<span class="comment-copy">@AJJ: <code>map</code> has higher setup overhead, but on the reference interpreter, if the transform function is a Python built-in function implemented in C, it has a lower per item cost. Testing on an input of only four values will not provide useful information on scaling. That said, in my own tests (on Py2.7.12 and Py3.5.2, the latter with <code>list()</code> wrapping), Py2 with <code>map</code> won even for four element inputs, and loses by only a tiny margin on Py3; I suspect your tests were warped in favor of listcomps.</span>
<span class="comment-copy">Shouldn't it be number = map(int, number)?</span>
<span class="comment-copy">OP said <i>pythonic</i></span>
<span class="comment-copy">no, he said "... more pythonic"</span>
<span class="comment-copy">This way is very useful if you wish to execute the operation only on some of the elements in the list. This isn't relevant for the question in this thread but there can be cases when it's helpful</span>
<span class="comment-copy">Can you explain this? I'm not familiar with that syntax. Thanks!</span>
<span class="comment-copy">I am using unpacking arguments list (<a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a>)</span>
<span class="comment-copy">Aha, a python 3 thing. Seems strange to have <code>[]</code> take an argument list. And, I didn't know you could pass an iterator as an argument list. I would have thought to do <code>number = list(map(int, numbers))</code>. But thanks for the explanation!</span>
