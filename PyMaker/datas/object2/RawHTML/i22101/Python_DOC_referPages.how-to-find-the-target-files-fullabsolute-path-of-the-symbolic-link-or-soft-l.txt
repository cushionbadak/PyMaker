<div class="post-text" itemprop="text">
<p>when i give 
ls -l /etc/fonts/conf.d/70-yes-bitmaps.conf </p>
<pre><code>lrwxrwxrwx &lt;snip&gt; /etc/fonts/conf.d/70-yes-bitmaps.conf -&gt; ../conf.avail/70-yes-bitmaps.conf
</code></pre>
<p>so for a symbolic link or soft link, how to find the target file's full(absolute path) in python,</p>
<p>If i use </p>
<p><code>os.readlink('/etc/fonts/conf.d/70-yes-bitmaps.conf')</code></p>
<p>it outputs </p>
<p><code>../conf.avail/70-yes-bitmaps.conf</code></p>
<p>but i need the absolute path not the relative path, so my desired output must be,</p>
<p><code>/etc/fonts/conf.avail/70-yes-bitmaps.conf</code></p>
<p>how to replace the <code>..</code> with the actual full path of the parent directory of the symbolic link or soft link file.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>os.path.realpath(path)
</code></pre>
<p><a href="http://docs.python.org/library/os.path.html#os.path.realpath" rel="noreferrer">os.path.realpath</a> returns the canonical path of the specified filename, eliminating any symbolic links encountered in the path.</p>
</div>
<div class="post-text" itemprop="text">
<p>As unutbu says, <code>os.path.realpath(path)</code> should be the right answer, returning the canonical path of the specified filename, resolving any symbolic links to their targets.  But it's broken under Windows.</p>
<p>I've created a patch for Python 3.2 to fix this bug, and uploaded it to:</p>
<p><a href="http://bugs.python.org/issue9949" rel="nofollow noreferrer">http://bugs.python.org/issue9949</a></p>
<p>It fixes the <code>realpath()</code> function in <code>Python32\Lib\ntpath.py</code></p>
<p>I've also put it on my server, here:</p>
<p><a href="http://www.burtonsys.com/ntpath_fix_issue9949.zip" rel="nofollow noreferrer">http://www.burtonsys.com/ntpath_fix_issue9949.zip</a></p>
<p>Unfortunately, the bug is present in Python 2.x, too, and I know of no fix for it there.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/os.path.html#os.path.abspath" rel="noreferrer">http://docs.python.org/library/os.path.html#os.path.abspath</a></p>
<p>also joinpath and normpath, depending on whether you're in the current working directory, or you're working with things elsewhere. <strong>normpath</strong> might be more direct for you.</p>
<p>Update:</p>
<p>specifically:</p>
<pre><code>os.path.normpath( 
  os.path.join( 
    os.path.dirname( '/etc/fonts/conf.d/70-yes-bitmaps.conf' ), 
    os.readlink('/etc/fonts/conf.d/70-yes-bitmaps.conf') 
  ) 
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/os.html#os.readlink" rel="nofollow noreferrer">documentation</a> says to use <code>os.path.join()</code>:</p>
<blockquote>
<p>The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using <code>os.path.join(os.path.dirname(path), result)</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>On windows 10, python 3.5, <code>os.readlink("C:\\Users\PP")</code> where "C:\Users\PP" is a symbolic link (not a junction link) works.</p>
<p>It returns the absolute path to the directory.</p>
<p>This works on Ubuntu 16.04, python 3.5 as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend to use <a href="https://docs.python.org/3/librar/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> library for filesystem operations.</p>
<pre><code>import pathlib

x = pathlib.Path('lol/lol/path)
x.resolve()
</code></pre>
<p><strong>Documentation</strong> for <code>Path.resolve(strict=False)</code>: make the path absolute, resolving any symlinks. A new path object is returned.</p>
</div>
<span class="comment-copy"><code>os.readlink</code> should work on ubuntu/windows, python 3.5. Just tested it: <a href="https://stackoverflow.com/a/49590179/4752883">stackoverflow.com/a/49590179/4752883</a></span>
<span class="comment-copy">os.path.realpath doesn't eliminate symbolic links in Python 3.2 under Windows 7.  (A bug?)</span>
<span class="comment-copy">Hmmm... I see that this has been an open bug for 1.5 years: <a href="http://bugs.python.org/issue9949" rel="nofollow noreferrer">bugs.python.org/issue9949</a></span>
<span class="comment-copy">Yup getting this same problem, 3 years later :c</span>
<span class="comment-copy">in Python3, if you're using a <code>Path</code> object, you can do the same thing by doing <code>path.resolve()</code></span>
<span class="comment-copy">If <code>C:\\Users\\PP</code> is a symlink to another directory, in Windows 10 using python 3.5, <code>os.path.realpath("C:\\Users\PP")</code>basically returns the symlink path, not the real path.</span>
<span class="comment-copy">Be warned though: should you pass a path which is not a symlink to readlink it will get angry and give the following exception: <code>OSError: [Errno 22] Invalid argument: 'your-path'</code></span>
