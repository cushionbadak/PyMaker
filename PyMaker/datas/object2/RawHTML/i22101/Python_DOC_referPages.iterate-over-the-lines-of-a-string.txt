<div class="post-text" itemprop="text">
<p>I have a multi-line string defined like this:</p>
<pre><code>foo = """
this is 
a multi-line string.
"""
</code></pre>
<p>This string we used as test-input for a parser I am writing. The parser-function receives a <code>file</code>-object as input and iterates over it. It does also call the <code>next()</code> method directly to skip lines, so I really need an iterator as input, not an iterable.
I need an iterator that iterates over the individual lines of that string like a <code>file</code>-object would over the lines of a text-file. I could of course do it like this:</p>
<pre><code>lineiterator = iter(foo.splitlines())
</code></pre>
<p>Is there a more direct way of doing this? In this scenario the string has to traversed once for the splitting, and then again by the parser. It doesn't matter in my test-case, since the string is very short there, I am just asking out of curiosity. Python has so many useful and efficient built-ins for such stuff, but I could find nothing that suits this need.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are three possibilities:</p>
<pre><code>foo = """
this is 
a multi-line string.
"""

def f1(foo=foo): return iter(foo.splitlines())

def f2(foo=foo):
    retval = ''
    for char in foo:
        retval += char if not char == '\n' else ''
        if char == '\n':
            yield retval
            retval = ''
    if retval:
        yield retval

def f3(foo=foo):
    prevnl = -1
    while True:
      nextnl = foo.find('\n', prevnl + 1)
      if nextnl &lt; 0: break
      yield foo[prevnl + 1:nextnl]
      prevnl = nextnl

if __name__ == '__main__':
  for f in f1, f2, f3:
    print list(f())
</code></pre>
<p>Running this as the main script confirms the three functions are equivalent. With <code>timeit</code> (and a <code>* 100</code> for <code>foo</code> to get substantial strings for more precise measurement):</p>
<pre><code>$ python -mtimeit -s'import asp' 'list(asp.f3())'
1000 loops, best of 3: 370 usec per loop
$ python -mtimeit -s'import asp' 'list(asp.f2())'
1000 loops, best of 3: 1.36 msec per loop
$ python -mtimeit -s'import asp' 'list(asp.f1())'
10000 loops, best of 3: 61.5 usec per loop
</code></pre>
<p>Note we need the <code>list()</code> call to ensure the iterators are traversed, not just built.</p>
<p>IOW, the naive implementation is so much faster it isn't even funny: 6 times faster than my attempt with <code>find</code> calls, which in turn is 4 times faster than a lower-level approach.</p>
<p>Lessons to retain: measurement is always a good thing (but must be accurate); string methods like <code>splitlines</code> are implemented in very fast ways; putting strings together by programming at a very low level (esp. by loops of <code>+=</code> of very small pieces) can be quite slow.</p>
<p><strong>Edit</strong>: added @Jacob's proposal, slightly modified to give the same results as the others (trailing blanks on a line are kept), i.e.:</p>
<pre><code>from cStringIO import StringIO

def f4(foo=foo):
    stri = StringIO(foo)
    while True:
        nl = stri.readline()
        if nl != '':
            yield nl.strip('\n')
        else:
            raise StopIteration
</code></pre>
<p>Measuring gives:</p>
<pre><code>$ python -mtimeit -s'import asp' 'list(asp.f4())'
1000 loops, best of 3: 406 usec per loop
</code></pre>
<p>not quite as good as the <code>.find</code> based approach -- still, worth keeping in mind because it might be less prone to small off-by-one bugs (any loop where you see occurrences of +1 and -1, like my <code>f3</code> above, should automatically trigger off-by-one suspicions -- and so should many loops which lack such tweaks and should have them -- though I believe my code is also right since I was able to check its output with other functions').</p>
<p>But the split-based approach still rules.</p>
<p>An aside: possibly better style for <code>f4</code> would be:</p>
<pre><code>from cStringIO import StringIO

def f4(foo=foo):
    stri = StringIO(foo)
    while True:
        nl = stri.readline()
        if nl == '': break
        yield nl.strip('\n')
</code></pre>
<p>at least, it's a bit less verbose.  The need to strip trailing <code>\n</code>s unfortunately prohibits the clearer and faster replacement of the <code>while</code> loop with <code>return iter(stri)</code> (the <code>iter</code> part whereof is redundant in modern versions of Python, I believe since 2.3 or 2.4, but it's also innocuous).  Maybe worth trying, also:</p>
<pre><code>    return itertools.imap(lambda s: s.strip('\n'), stri)
</code></pre>
<p>or variations thereof -- but I'm stopping here since it's pretty much a theoretical exercise wrt the <code>strip</code> based, simplest and fastest, one.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what you mean by "then again by the parser".  After the splitting has been done, there's no further traversal of the <em>string</em>, only a traversal of the <em>list</em> of split strings.  This will probably actually be the fastest way to accomplish this, so long as the size of your string isn't absolutely huge.  The fact that python uses immutable strings means that you <em>must</em> always create a new string, so this has to be done at some point anyway.</p>
<p>If your string is very large, the disadvantage is in memory usage: you'll have the original string and a list of split strings in memory at the same time, doubling the memory required.  An iterator approach can save you this, building a string as needed, though it still pays the "splitting" penalty.  However, if your string is that large, you generally want to avoid even the <strong>unsplit</strong> string being in memory.  It would be better just to read the string from a file, which already allows you to iterate through it as lines.</p>
<p>However if you do have a huge string in memory already, one approach would be to use StringIO, which presents a file-like interface to a string, including allowing iterating by line (internally using .find to find the next newline).  You then get:</p>
<pre><code>import StringIO
s = StringIO.StringIO(myString)
for line in s:
    do_something_with(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I read <code>Modules/cStringIO.c</code> correctly, this should be quite efficient (although somewhat verbose):</p>
<pre><code>from cStringIO import StringIO

def iterbuf(buf):
    stri = StringIO(buf)
    while True:
        nl = stri.readline()
        if nl != '':
            yield nl.strip()
        else:
            raise StopIteration
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regex-based searching is sometimes faster than generator approach:</p>
<pre><code>RRR = re.compile(r'(.*)\n')
def f4(arg):
    return (i.group(1) for i in RRR.finditer(arg))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suppose you could roll your own:</p>
<pre><code>def parse(string):
    retval = ''
    for char in string:
        retval += char if not char == '\n' else ''
        if char == '\n':
            yield retval
            retval = ''
    if retval:
        yield retval
</code></pre>
<p>I'm not sure how efficient this implementation is, but that will only iterate over your string once.</p>
<p>Mmm, generators.</p>
<p>Edit:</p>
<p>Of course you'll also want to add in whatever type of parsing actions you want to take, but that's pretty simple.</p>
</div>
<span class="comment-copy">you're aware that you can iterate over <code>foo.splitlines()</code> right?</span>
<span class="comment-copy">What do you mean by "again by the parser"?</span>
<span class="comment-copy">@SilentGhost: I think the point is to not iterate the string twice. Once it is iterated by <code>splitlines()</code> and a second time by iterating over the result of this method.</span>
<span class="comment-copy">Also, <code>(line[:-1] for line in cStringIO.StringIO(foo))</code> is pretty fast; almost as fast as the naive implementation, but not quite.</span>
<span class="comment-copy">Thank you for this great answer. I guess the main lesson here (as I am new to python) is to make using <code>timeit</code> a habit.</span>
<span class="comment-copy">@Space, yep, timeit is good, any time you care about performance (be sure to use it carefully, e.g. in this case see my note about needing a <code>list</code> call to actually time all the relevant parts!-).</span>
<span class="comment-copy">What about memory consumption? <code>split()</code> clearly trades memory for performance, holding a copy of all sections in addition to the list's structures.</span>
<span class="comment-copy">I was really confused by your remarks at first because you listed the timing results in the opposite order of their implementation and numbering. =P</span>
<span class="comment-copy">This is what I search exactly.</span>
<span class="comment-copy">Note: for python 3 you have to use the <code>io</code> package for this, e.g. use <code>io.StringIO</code> instead of <code>StringIO.StringIO</code>. See <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">docs.python.org/3/library/io.html</a></span>
<span class="comment-copy">This question is about a specific scenario, so it would helpful to show a simple benchmark, like the top-scoring answer has done.</span>
<span class="comment-copy">Pretty inefficient for long lines (the <code>+=</code> part has worst-case <code>O(N squared)</code> performance, though several implementation tricks try to lower that when feasible).</span>
<span class="comment-copy">Yeah - I've just been learning about that recently. Would it be faster to append to a list of chars and then ''.join(chars) them? Or is that an experiment I should undertake myself? ;)</span>
<span class="comment-copy">please do measure yourself, it's instructive -- and be sure to try both short lines like in the OP's example, and long ones!-)</span>
<span class="comment-copy">For short strings ( &lt; ~40 chars) the += is actually quicker, but hits worst case quickly. For longer strings, the <code>.join</code> method actually looks like O(N) complexity. Since I couldn't find the particular comparison made on SO yet, I started a question <a href="http://stackoverflow.com/questions/3055477/how-slow-is-pythons-string-concatenation-vs-str-join" title="how slow is pythons string concatenation vs str join">stackoverflow.com/questions/3055477/…</a> (that surprisingly received more answers than just my own!)</span>
