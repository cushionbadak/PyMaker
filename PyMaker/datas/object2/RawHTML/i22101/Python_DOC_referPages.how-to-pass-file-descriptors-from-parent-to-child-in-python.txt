<div class="post-text" itemprop="text">
<p>I am using multiprocessing module, and using pools to start multiple workers. But the file descriptors which are opened at the parent process are closed in the worker processes. I want them to be open..! Is there any way to pass file descriptors to be shared across parent and children?</p>
</div>
<div class="post-text" itemprop="text">
<p>There isn't a way that I know of to share file descriptors between processes.
If a way exists, it is most likely OS specific.</p>
<p>My guess is that you need to share data on another level.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 2 and Python 3, functions for sending and receiving  file descriptors exist in <code>multiprocessing.reduction</code> module.</p>
<p>Example code (Python 2 and Python 3):</p>
<pre><code>import multiprocessing
import os

# Before fork
child_pipe, parent_pipe = multiprocessing.Pipe(duplex=True)

child_pid = os.fork()

if child_pid:
    # Inside parent process
    import multiprocessing.reduction
    import socket
    # has socket_to_pass socket object which want to pass to the child
    socket_to_pass = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    socket_to_pass.connect("/dev/log")
    # child_pid argument to send_handle() can be arbitrary on Unix,
    # on Windows it has to be child PID
    multiprocessing.reduction.send_handle(parent_pipe, socket_to_pass.fileno(), child_pid)
    socket_to_pass.send("hello from the parent process\n".encode())
else:
    # Inside child process
    import multiprocessing.reduction
    import socket
    import os
    fd = multiprocessing.reduction.recv_handle(child_pipe)
    # rebuild the socket object from fd
    received_socket = socket.fromfd(fd, socket.AF_INET, socket.SOCK_STREAM)
    # socket.fromfd() duplicates fd, so we can close the received one
    os.close(fd)
    # and now you can communicate using the received socket
    received_socket.send("hello from the child process\n".encode())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is also a fork of <code>multiprocessing</code> called <code>multiprocess</code>, which replaces <code>pickle</code> with <code>dill</code>.  <code>dill</code> can pickle file descriptors, and thus <code>multiprocess</code> can easily pass them between processes.</p>
<pre><code>&gt;&gt;&gt; f = open('test.txt', 'w')
&gt;&gt;&gt; _ = map(f.write, 'hello world')
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; import multiprocess as mp
&gt;&gt;&gt; p = mp.Pool()
&gt;&gt;&gt; f = open('test.txt', 'r')
&gt;&gt;&gt; p.apply(lambda x:x, f)
'hello world'
&gt;&gt;&gt; f.read()
'hello world'
&gt;&gt;&gt; f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>multiprocessing</code> itself has helper methods for transferring file descriptors between processes on Windows and Unix platforms that support sending file descriptors over Unix domain sockets in <code>multiprocessing.reduction</code>: <code>send_handle</code> and <code>recv_handle</code>. These are not documented but are in the module's <code>__all__</code> so it may be safe to assume they are part of the public API. From the source it looks like these have been available since at least 2.6+ and 3.3+.</p>
<p>All platforms have the same interface:</p>
<ul>
<li><code>send_handle(conn, handle, destination_pid)</code></li>
<li><code>recv_handle(conn)</code></li>
</ul>
<p>Where:</p>
<ul>
<li><code>conn</code> (<a href="https://docs.python.org/3/library/multiprocessing.html?#multiprocessing.connection.Connection" rel="nofollow noreferrer"><code>multiprocessing.Connection</code></a>): connection over which to send the file descriptor</li>
<li><code>handle</code> (<code>int</code>): integer referring to file descriptor/handle</li>
<li><code>destination_pid</code> (<code>int</code>): integer pid of the process that is receiving the file descriptor - this is currently only used on Windows</li>
</ul>
</div>
<span class="comment-copy">As mentioned, you'll need to use OS-specific features. Which platforms are you interested in supporting?</span>
<span class="comment-copy">I need to support Windows and linux so I dont want to use any OS specific features. In Linux , file handles are shared by default and windows also has an option to share the file handles during CreateProcess()... I dont know why multiprocessing modules doesn't have an extra options to share file handles.</span>
<span class="comment-copy">As Windows &amp; Linux differ in semantics of passing file handles, you're probably going to <i>have</i> to use OS specific features. No problem there though, it's easy to tell the difference from <code>sys.platform</code> and just call an OS-specific "make it work for this OS" function. I suggest reading through the multiprocessing module's code to see if there's an easy work-around.</span>
<span class="comment-copy">Can you please explain how did you figured out they are closed? From what I've been read passing file descriptors among processes simply isn't working (I've not found closer explanation) how do you know that descriptor is closed and e.g. not passed or something else? Thank you</span>
<span class="comment-copy">Agreed. There are OS-specific ways though.</span>
<span class="comment-copy">Yeah, I know that fork() for example will duplicate file descriptors, but is there an easy way to do it <i>after</i> the processes have started?</span>
<span class="comment-copy">Yep: <a href="http://stackoverflow.com/questions/909064/portable-way-to-pass-file-descriptor-between-different-processes" title="portable way to pass file descriptor between different processes">stackoverflow.com/questions/909064/â€¦</a></span>
<span class="comment-copy">Cool, I didn't know about that.</span>
<span class="comment-copy"><code>multiprocessing</code> itself has functions that handle the OS-specific details, see <a href="https://stackoverflow.com/a/54047120/1698058">here</a>.</span>
<span class="comment-copy">Doesn't work in Python 3.</span>
<span class="comment-copy">@ChrisHunt: I added a code working on Python 3.</span>
<span class="comment-copy"><code>send_handle</code> and <code>recv_handle</code> also exist in Python 2 as I mention in my answer <a href="https://stackoverflow.com/a/54047120/1698058">here</a>, no real need to distinguish between the two. Also, I would not use sending a socket as an example since <code>multiprocessing</code> registers <code>socket.socket</code> with their custom Pickler - a <code>socket.socket</code> object can be sent over a <code>Connection</code> directly without any of the code above but if left as-is then someone might copy it into their own code base.</span>
<span class="comment-copy">OK, I see that it was backported to Python 2 as well. As for sending <code>socket.socket</code> without  additional code, it doesn't seem to work on arbitrary pipes/sockets, only on those created with the whole <code>multiprocessing.Manager</code> machinery.</span>
<span class="comment-copy">it did not work and tried</span>
<span class="comment-copy">@user765443: maybe your install of <code>multiprocess</code> is bad? are you on windows, and don't have a C compiler?</span>
