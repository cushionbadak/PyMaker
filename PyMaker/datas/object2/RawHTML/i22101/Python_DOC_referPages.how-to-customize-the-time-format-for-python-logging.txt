<div class="post-text" itemprop="text">
<p>I am new to Python's logging package and plan to use it for my project. I would like to customize the time format to my taste. Here is a short code I copied from a tutorial:</p>
<pre><code>import logging

# create logger
logger = logging.getLogger("logging_tryout2")
logger.setLevel(logging.DEBUG)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

# create formatter
formatter = logging.Formatter("%(asctime)s;%(levelname)s;%(message)s")

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

# "application" code
logger.debug("debug message")
logger.info("info message")
logger.warn("warn message")
logger.error("error message")
logger.critical("critical message")
</code></pre>
<p>And here is the output:</p>
<pre><code>2010-07-10 10:46:28,811;DEBUG;debug message
2010-07-10 10:46:28,812;INFO;info message
2010-07-10 10:46:28,812;WARNING;warn message
2010-07-10 10:46:28,812;ERROR;error message
2010-07-10 10:46:28,813;CRITICAL;critical message
</code></pre>
<p>I would like to shorten the time format to just: '<code>2010-07-10 10:46:28</code>', dropping the mili-second suffix. I looked at the Formatter.formatTime, but confused. I appreciate your help to achieve my goal. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://docs.python.org/2/library/logging.html#logging.Formatter" rel="noreferrer">official documentation</a> regarding the Formatter class:</p>
<blockquote>
<p>The constructor takes two optional arguments: a message format string and a date format string.</p>
</blockquote>
<p>So change</p>
<pre><code># create formatter
formatter = logging.Formatter("%(asctime)s;%(levelname)s;%(message)s")
</code></pre>
<p>to</p>
<pre><code># create formatter
formatter = logging.Formatter("%(asctime)s;%(levelname)s;%(message)s",
                              "%Y-%m-%d %H:%M:%S")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>logging.basicConfig</code>, the following example works for me:</p>
<pre><code>logging.basicConfig(
    filename='HISTORYlistener.log',
    level=logging.DEBUG,
    format='%(asctime)s.%(msecs)03d %(levelname)s %(module)s - %(funcName)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)
</code></pre>
<p>This allows you to format &amp; config all in one line. A resulting log record looks as follows:</p>
<pre><code>2014-05-26 12:22:52.376 CRITICAL historylistener - main: History log failed to start
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if using logging.config.fileConfig with a configuration file use something like:</p>
<pre><code>[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To add to the other answers, here are the <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="noreferrer">variable list</a> from Python Documentation.</p>
<pre><code>Directive   Meaning Notes

%a  Locale’s abbreviated weekday name.   
%A  Locale’s full weekday name.  
%b  Locale’s abbreviated month name.     
%B  Locale’s full month name.    
%c  Locale’s appropriate date and time representation.   
%d  Day of the month as a decimal number [01,31].    
%H  Hour (24-hour clock) as a decimal number [00,23].    
%I  Hour (12-hour clock) as a decimal number [01,12].    
%j  Day of the year as a decimal number [001,366].   
%m  Month as a decimal number [01,12].   
%M  Minute as a decimal number [00,59].  
%p  Locale’s equivalent of either AM or PM. (1)
%S  Second as a decimal number [00,61]. (2)
%U  Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0.    (3)
%w  Weekday as a decimal number [0(Sunday),6].   
%W  Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.    (3)
%x  Locale’s appropriate date representation.    
%X  Locale’s appropriate time representation.    
%y  Year without century as a decimal number [00,99].    
%Y  Year with century as a decimal number.   
%z  Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59].  
%Z  Time zone name (no characters if no time zone exists).   
%%  A literal '%' character.     
</code></pre>
</div>
<span class="comment-copy">Note that if you're using the dictConfig method of configuring logging (e.g. if you're using Django), you can set this using the 'datefmt' dict key for a formatter. See: <a href="http://docs.djangoproject.com/en/dev/topics/logging/#configuring-logging" rel="nofollow noreferrer">Django Logging Configuration</a> , <a href="http://docs.python.org/2/library/logging.config.html#dictionary-schema-details" rel="nofollow noreferrer">logging module: Dictionary Schema Details</a></span>
<span class="comment-copy">Also, if your configuring logging with basicConfig, it takes a named parameter called datefmt</span>
<span class="comment-copy">In 1.9, if you are using a LOGGING setting, you can include a 'datefmt' entry like this ... <code>'formatters': {     'default': {         'format': '%(asctime)s | %(levelname)s | %(module)s | %(message)s',         'datefmt': '%Y-%m-%d %H:%M',     },</code></span>
<span class="comment-copy">what will be the time zone ?</span>
<span class="comment-copy">@Luv33preet its '%z'</span>
<span class="comment-copy">I've added zero-padded formatting for the msecs field. Otherwise, msecs values less than 100 appear incorrectly.</span>
<span class="comment-copy">That said, the OP doesn't want msecs to appear at all!</span>
