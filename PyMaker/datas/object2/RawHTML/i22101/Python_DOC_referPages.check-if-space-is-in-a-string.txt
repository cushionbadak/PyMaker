<div class="post-text" itemprop="text">
<pre><code>' ' in word == True
</code></pre>
<p>I'm writing a program that checks whether the string is a single word. Why doesn't this work and is there any better way to check if a string has no spaces/is a single word..</p>
</div>
<div class="post-text" itemprop="text">
<p><code>==</code> takes precedence over <code>in</code>, so you're actually testing <code>word == True</code>.</p>
<pre><code>&gt;&gt;&gt; w = 'ab c'
&gt;&gt;&gt; ' ' in w == True
1: False
&gt;&gt;&gt; (' ' in w) == True
2: True
</code></pre>
<p>But you don't need <code>== True</code> at all. <code>if</code> requires [something that evalutes to True or False] and <code>' ' in word</code> will evalute to true or false. So, <code>if ' ' in word: ...</code> is just fine:</p>
<pre><code>&gt;&gt;&gt; ' ' in w
3: True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Write <code>if " " in word:</code> instead of <code>if " " in word == True:</code>.</p>
<p>Explanation:</p>
<ul>
<li>In Python, for example <code>a &lt; b &lt; c</code> is equivalent to <code>(a &lt; b) and (b &lt; c)</code>.</li>
<li>The same holds for any chain of comparison operators, which include <code>in</code>!</li>
<li>Therefore <code>' ' in w == True</code> is equivalent to <code>(' ' in w) and (w == True)</code> which is <em>not</em> what you want.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>There are a lot of ways to do that :</p>
<pre><code>t = s.split(" ")
if len(t) &gt; 1:
  print "several tokens"
</code></pre>
<p>To be sure it matches every kind of space, you can use re module : </p>
<pre><code>import re
if re.search(r"\s", your_string):
  print "several words"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this, and if it will find any space it will return the position where the first space is.</p>
<pre><code>if mystring.find(' ') != -1:
    print True
else:
    print False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can say <code>word.strip(" ")</code> to remove any leading/trailing spaces from the string - you should do that before your <code>if</code> statement. That way if someone enters input such as <code>" test "</code> your program will still work.</p>
<p>That said, <code>if " " in word:</code> will determine if a string contains any spaces. If that does not working, can you please provide more information?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>word = ' '
while True:
    if ' ' in word:
        word = raw_input("Please enter a single word: ")
    else:
        print "Thanks"
        break
</code></pre>
<p>This is more idiomatic python - comparison against True or False is not necessary - just use the value returned by the expression <code>' ' in word</code>. </p>
<p>Also, you don't need to use pastebin for such a small snippet of code - just copy the code into your post and use the little 1s and 0s button to make your code look like code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this:</p>
<pre><code>word = raw_input("Please enter a single word : ")
while True:
    if " " in word:
        word = raw_input("Please enter a single word : ")
    else:
        print "Thanks"
        break
</code></pre>
</div>
<span class="comment-copy">What do you mean it doesn't work? Do you get syntax error? Do you get no errors at all?</span>
<span class="comment-copy">Also, it's ok to paste code in your comment, just make sure you format it.</span>
<span class="comment-copy"><i>Never</i> use <code>expression == True</code> to test for truth. Just use <code>expression</code>!</span>
<span class="comment-copy">It won't match all kinds of spaces : \n, \r, ' ', ... If he needs to match them, it's better to use re module, with the match method on \s. It will do a better tokenizer.</span>
<span class="comment-copy">Programming pet peeve: <code>... == True</code> or <code>... != False</code>, or any variant thereof.</span>
<span class="comment-copy">Jukka Suomela's explanation is a little more correct than mine, by the way. By my explanation, you'd be testing <code>word==True</code> then <code>' ' in True</code>, which doesn't make sense.</span>
<span class="comment-copy">Wow. I knew that <code>&lt;</code> and <code>==</code> worked the way you described, but I didn't realize <code>in</code> did, too. I had assumed combining them would be seen as <code>a in (b == c)</code> or <code>(a in b) == c</code>. To see that it's really interpreted as Jukka says, you can try <code>'a' in 'abc' == 'abc'</code>. It's <code>True</code>, but it would be <code>False</code> if it were interpreted in either of the other ways I suggested.</span>
<span class="comment-copy">You don't need regex to check for every kind of space, simply omit the <code>" "</code> you are passing to <code>s.split()</code>, as the default includes all whitespace: <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.split</a></span>
<span class="comment-copy"><code>mystring.find(' ') != -1</code> <b>is</b> boolean.</span>
<span class="comment-copy">I.e., this can be shortened to <code>print mystring.find(' ') != -1</code></span>
