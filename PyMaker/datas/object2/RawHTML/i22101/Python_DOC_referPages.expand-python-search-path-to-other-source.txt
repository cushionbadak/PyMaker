<div class="post-text" itemprop="text">
<p>I have just joined a project with a rather large existing code base. We develop in linux and do not use and IDE. We run through the command line. I'm trying to figure out how to get python to search for the right path when I run project modules. For instance, when I run something like:</p>
<pre><code>python someprojectfile.py
</code></pre>
<p>I get</p>
<pre><code>ImportError: no module named core.'somemodule'
</code></pre>
<p>I get this for all of my imports to I assume it's an issue with the path.</p>
<p>TLDR:</p>
<p>How do I get Python to search <code>~/codez/project/</code> and all the files and folders for *.py files during import statements.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a few possible ways to do this:</p>
<ul>
<li>Set the environment variable <code>PYTHONPATH</code> to a colon-separated list of directories to search for imported modules.</li>
<li>In your program, use <code>sys.path.append('/path/to/search')</code> to add the names of directories you want Python to search for imported modules. <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer"><code>sys.path</code></a> is just the list of directories Python searches every time it gets asked to import a module, and you can alter it as needed (although I wouldn't recommend removing any of the standard directories!). Any directories you put in the environment variable <code>PYTHONPATH</code> will be inserted into <code>sys.path</code> when Python starts up.</li>
<li>Use <a href="https://docs.python.org/3/library/site.html#site.addsitedir" rel="nofollow noreferrer"><code>site.addsitedir</code></a> to add a directory to <code>sys.path</code>. The difference between this and just plain appending is that when you use <code>addsitedir</code>, it also looks for <code>.pth</code> files within that directory and uses them to possibly add additional directories to <code>sys.path</code> based on the contents of the files. See the documentation for more detail.</li>
</ul>
<p>Which one of these you want to use depends on your situation. Remember that when you distribute your project to other users, they typically install it in such a manner that the Python code files will be automatically detected by Python's importer (i.e. packages are usually installed in the <code>site-packages</code> directory), so if you mess with <code>sys.path</code> in your code, that may be unnecessary and might even have adverse effects when that code runs on another computer. For development, I would venture a guess that setting <code>PYTHONPATH</code> is usually the best way to go.</p>
<p>However, when you're using something that just runs on your own computer (or when you have nonstandard setups, e.g. sometimes in web app frameworks), it's not entirely uncommon to do something like</p>
<pre><code>from os.path import dirname
sys.path.append(dirname(__file__))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should also read about python packages here: <a href="http://docs.python.org/tutorial/modules.html" rel="nofollow noreferrer">http://docs.python.org/tutorial/modules.html</a>.</p>
<p>From your example, I would guess that you really have a package at <code>~/codez/project</code>.  The file <code>__init__.py</code> in a python directory maps a directory into a namespace.  If your subdirectories all have an <code>__init__.py</code> file, then you only need to add the base directory to your <code>PYTHONPATH</code>. For example:</p>
<blockquote>
<p>PYTHONPATH=$PYTHONPATH:$HOME/adaifotis/project</p>
</blockquote>
<p>In addition to testing your PYTHONPATH environment variable, as David explains, you can test it in python like this:</p>
<pre><code>$ python
&gt;&gt;&gt; import project                      # should work if PYTHONPATH set
&gt;&gt;&gt; import sys
&gt;&gt;&gt; for line in sys.path: print line    # print current python path
</code></pre>
<p>...</p>
</div>
<div class="post-text" itemprop="text">
<p>I know this thread is a bit old, but it took me some time to get to the heart of this, so I wanted to share.</p>
<p>In my project, I had the main script in a parent directory, and, to differentiate the modules, I put all the supporting modules in a sub-folder called "modules".  In my main script, I import these modules like this (for a module called report.py):</p>
<pre><code>from modules.report import report, reportError
</code></pre>
<p>If I call my main script, this works.  HOWEVER, I wanted to test each module by including a <code>main()</code> in each, and calling each directly, as:</p>
<pre><code>python modules/report.py
</code></pre>
<p>Now Python complains that it can't find "a module called modules".  The key here is that, by default, Python includes the folder of the script in its search path, BUT NOT THE CWD.  So what this error says, really, is "I can't find a modules subfolder".  The is because there is no "modules" subdirectory from the directory where the report.py module resides.</p>
<p>I find that the neatest solution to this is to append the CWD in Python search path by including this at the top:</p>
<pre><code>import sys

sys.path.append(".")
</code></pre>
<p>Now Python searches the CWD (current directory), finds the "modules" sub-folder, and all is well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I read this question looking for an answer, and didn't like any of them.</p>
<p>So I wrote a quick and dirty solution. Just put this somewhere on your sys.path, and it'll add any directory under <code>folder</code> (from the current working directory), or under <code>abspath</code>:</p>
<pre><code>#using.py

import sys, os.path

def all_from(folder='', abspath=None):
    """add all dirs under `folder` to sys.path if any .py files are found.
    Use an abspath if you'd rather do it that way.

    Uses the current working directory as the location of using.py. 
    Keep in mind that os.walk goes *all the way* down the directory tree.
    With that, try not to use this on something too close to '/'

    """
    add = set(sys.path)
    if abspath is None:
        cwd = os.path.abspath(os.path.curdir)
        abspath = os.path.join(cwd, folder)
    for root, dirs, files in os.walk(abspath):
        for f in files:
            if f[-3:] in '.py':
                add.add(root)
                break
    for i in add: sys.path.append(i)

&gt;&gt;&gt; import using, sys, pprint
&gt;&gt;&gt; using.all_from('py') #if in ~, /home/user/py/
&gt;&gt;&gt; pprint.pprint(sys.path)
[
#that was easy
]
</code></pre>
<p>And I like it because I can have a folder for some random tools and not have them be a part of packages or anything, and still get access to some (or all) of them in a couple lines of code.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way I find is to create a file "any_name.pth" and put it in your folder "\Lib\site-packages". You should find that folder wherever python is installed.</p>
<p>In that file, put a list of directories where you want to keep modules for importing. For instance, make a line in that file like this:</p>
<p>C:\Users\example...\example</p>
<p>You will be able to tell it works by running this in python:</p>
<pre><code>import sys
for line in sys: print line
</code></pre>
<p>You will see your directory printed out, amongst others from where you can also import. Now you can import a "mymodule.py" file that sits in that directory as easily as:</p>
<pre><code>import mymodule
</code></pre>
<p>This will not import subfolders. For that you could imagine creating a python script to create a .pth file containing all sub folders of a folder you define. Have it run at startup perhaps.</p>
</div>
<span class="comment-copy">So if I had like say 15 subdirectories, I would have to individually add each one?</span>
<span class="comment-copy">and could you give an example of a command line argument to change PYTHONPATH?</span>
<span class="comment-copy">To set <code>PYTHONPATH</code>: in <code>.bashrc</code> or whatever startup file your shell uses (if it's not Bash), write <code>export PYTHONPATH=$PYTHONPATH:$HOME/codez/project</code>. But if you have a bunch of subdirectories, I'd make a <code>.pth</code> file and use <code>site.addsitedir</code>. You can create a module <code>sitecustomize</code> that can call the function for you; try putting it at <code>~/.local/lib/python2.6/sitecustomize.py</code> (substitute your Python version) so it hopefully gets automatically imported.</span>
<span class="comment-copy">I put the following in my .bashrc file and I'm still having no luck with those imports. Any ideas? How would I make a .pth file anyway?  export PYTHONPATH=$PYTHONPATH:$HOME/adaifotis/codez/ export PYTHONPATH=$PYTHONPATH:$HOME/adaifotis/codez/project export PYTHONPATH=$PYTHONPATH:$HOME/adaifotis/codez/project/core export PYTHONPATH=$PYTHONPATH:$HOME/adaifotis/codez/project/proxies export PYTHONPATH=$PYTHONPATH:$HOME/adaifotis/codez/project/conf</span>
<span class="comment-copy">Try opening up a terminal and running <code>echo $PYTHONPATH</code>. If the environment variable has been set properly, you should see a colon-separated list of directories. For information about <code>.pth</code> files, see the documentation for the <code>site</code> module which I linked to in my answer. It tells you what the contents should be and how to use them.</span>
<span class="comment-copy">You may want to put your <code>__init__.py</code> in backticks to make it clear you really mean <code>__init__.py</code>, as opposed to <code>init.py</code>. Just to avoid confusing newbies. :)</span>
