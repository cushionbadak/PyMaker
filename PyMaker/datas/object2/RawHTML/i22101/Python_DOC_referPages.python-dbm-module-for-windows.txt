<div class="post-text" itemprop="text">
<p>I would like to use the dbm module on my Windows machine, but it is currently only supported on Unix. <a href="http://docs.python.org/library/dbm.html" rel="nofollow noreferrer">http://docs.python.org/library/dbm.html</a></p>
<p>Does anyone know of a similar module with similar syntax or a workaround to get dmb functional on windows? Being able to access a database written to the hard drive much like how I code to access a dictionary would be great. Thank you for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, after more googling around, I found this:</p>
<p><a href="http://docs.python.org/library/anydbm.html#module-anydbm" rel="nofollow noreferrer">http://docs.python.org/library/anydbm.html#module-anydbm</a></p>
<p>I've tried this on windows and it seems to be working fine =)</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on the following test on a Windows 7 system using Python 2.7.2 it appears that dbhash is supported on Windows instalations.</p>
<pre><code>import os

import anydbm

import whichdb

file = os.curdir + '/testdbm'   # define a test file name in the current directory

d = anydbm.open(file, 'c')      # create a new database using the test file name

db_type = whichdb.whichdb(file) # get the dbm database type

print(db_type)                  # display the result

'dbhash'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If Python 3 is of relevance, I'd go for an external k-v solution, as <a href="https://docs.python.org/3/library/dbm.html" rel="nofollow noreferrer">dumbdbm</a> is no joy. </p>
<p>Some pure Python options: </p>
<ul>
<li><p><a href="https://github.com/jamesls/semidbm" rel="nofollow noreferrer">semidbm</a> - A faster alternative to dumbdbm, Python standard library only, pip and go. The one I'd go for if I want to ensure portability and availability to users.</p></li>
<li><p><a href="https://github.com/patx/pickledb" rel="nofollow noreferrer">PickleDB</a> - Uses json to serialize data. Standrad library only, I haven't benchmarked but I suspect it's slower than semidbm because of the serialization overhead.</p></li>
<li><p><a href="https://github.com/h5rdly/Petite-DB" rel="nofollow noreferrer">Petite DB</a> - My own simple workaround using Python's zipfile module. Basic testing in the books but it's not production ready.</p></li>
</ul>
<p>There are also Python wrappers to <a href="https://github.com/dw/py-lmdb" rel="nofollow noreferrer">LMDB</a>, <a href="https://github.com/coleifer/unqlite-python" rel="nofollow noreferrer">UnQLite</a> and <a href="https://github.com/coleifer/python-lsm-db" rel="nofollow noreferrer">SQLite4 LSM</a>, all of which support Windows, though the SQLite4 bindings weren't tested. </p>
<p>The latter two are by Charles Leifer, who is both savvy with <a href="http://charlesleifer.com/blog/tags/nosql/" rel="nofollow noreferrer">k-v stores</a> and an avid Python developer (see <a href="https://github.com/coleifer/peewee" rel="nofollow noreferrer">Peewee</a>).</p>
<p>As far as LMDB, I've tried it for a while. No complaints, but it uses a transactional model, where you can't use it dictionary-style like with other dbm's, unless you subclass/compose/submit a pull request etc. 
Also, it explicitly <a href="https://banksco.de/p/lmdb-the-leveldb-killer.html" rel="nofollow noreferrer">doesn't utilize compression</a> (see <a href="https://symas.com/understanding-lmdb-database-file-sizes-and-memory-utilization/" rel="nofollow noreferrer">also</a>) which was something I was interested in.</p>
<p>So LMDB just didn't quite fit my specific needs. It does seem to be highly capable, the bindings worked fine, and installing them was untroublesome (pip worked for me, had no need to install LMDB seperately or any nuisance to that effect). </p>
</div>
<div class="post-text" itemprop="text">
<p>I think anydbm on Windows will only load dumbdbm, since all the other modules appear to be Unix only. According to the Python documentation...</p>
<blockquote>
<p>"The dumbdbm module is intended as a last resort fallback for the
  anydbm module when no more robust module is available. The dumbdbm
  module is not written for speed and is not nearly as heavily used as
  the other database modules."</p>
</blockquote>
</div>
<span class="comment-copy">Are you using cpython on Windows?</span>
<span class="comment-copy">If you're benchmarking with Python 2 on Windows, you're in for a treat when you switch to Python 3, as dbm falls back to <a href="https://docs.python.org/3/library/dbm.html#module-dbm.dumb" rel="nofollow noreferrer">dumbdbm</a>, which is Python's own self-proclaimedly lame dbm implementation, whereas on Python 2 it supports the much faster <a href="https://docs.python.org/2/library/dbhash.html" rel="nofollow noreferrer">Berkeley DB</a>.  To avoid dumbdbm on Py3/Win, I've used both <a href="https://github.com/dw/py-lmdb" rel="nofollow noreferrer">LMDB</a> and <a href="https://github.com/jamesls/semidbm" rel="nofollow noreferrer">semidbm</a>, and ended up writing my own workaround, <a href="https://github.com/h5rdly/Petite-DB" rel="nofollow noreferrer">Petite</a></span>
