<div class="post-text" itemprop="text">
<p>I want a script to start a new process, such that the new process continues running after the initial script exits. I expected that I could use <code>multiprocessing.Process</code> to start a new process, and set <code>daemon=True</code> so that the main script may exit while the created process continues running. </p>
<p>But it seems that the second process is silently terminated when the main script exits. Is this expected behavior, or am I doing something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the Python docs:</p>
<blockquote>
<p>When a process exits, it attempts to
  terminate all of its daemonic child
  processes.</p>
</blockquote>
<p>This is the expected behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are on a unix system, you could use <a href="http://docs.python.org/library/os.html#os.fork" rel="noreferrer">os.fork</a>:</p>
<pre><code>import os
import time

pid=os.fork()
if pid:
    # parent
    while True:
        print("I'm the parent")
        time.sleep(0.5)    
else:
    # child
    while True:
        print("I'm just a child")
        time.sleep(0.5)
</code></pre>
<p>Running this creates two processes. You can kill the parent without killing the child.
For example, when you run script you'll see something like:</p>
<pre><code>% script.py
I'm the parent
I'm just a child
I'm the parent
I'm just a child
...
</code></pre>
<p>Stop the script with ctrl-Z:</p>
<pre><code>^Z
[1]+  Stopped                 script.py
</code></pre>
<p>Find the process ID number for the parent. It will be the smaller of the two process ID numbers since the parent came first:</p>
<pre><code>% ps axuw | grep script.py
unutbu    6826  0.1  0.1  33792  6388 pts/24   T    15:09   0:00 python /home/unutbu/pybin/script.py
unutbu    6827  0.0  0.1  33792  4352 pts/24   T    15:09   0:00 python /home/unutbu/pybin/script.py
unutbu    6832  0.0  0.0  17472   952 pts/24   S+   15:09   0:00 grep --color=auto script.py
</code></pre>
<p>Kill the parent process:</p>
<pre><code>% kill 6826
</code></pre>
<p>Restore script.py to the foreground:</p>
<pre><code>% fg
script.py
Terminated
</code></pre>
<p>You'll see the child process is still running:</p>
<pre><code>% I'm just a child
I'm just a child
I'm just a child
...
</code></pre>
<p>Kill the child (in a new terminal) with </p>
<pre><code>% kill 6827
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply use the <code>subprocess</code> module:</p>
<pre><code>import subprocess
subprocess.Popen(["sleep", "60"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a related question on SO, where one of the answers gives a nice solution to this problem:</p>
<p><a href="https://stackoverflow.com/questions/972362/spawning-process-from-python/972383#972383">"spawning process from python"</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you are on a unix system (<a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">using docs</a>):</p>
<pre><code>#!/usr/bin/env python3
import os
import sys
import time
import subprocess
import multiprocessing
from multiprocessing import Process

def to_use_in_separate_process(*args):
    print(args)

    #check args before using them:
    if len(args)&gt;1:
        subprocess.call((args[0], args[1]))
        print('subprocess called')

def main(apathtofile):
    print('checking os')
    if os.name == 'posix':
        print('os is posix')
        multiprocessing.get_context('fork')
        p = Process(target=to_use_in_separate_process, args=('xdg-open', apathtofile))
        p.run()
    print('exiting def main')

if __name__ == '__main__':
    #parameter [1] must be some file that can be opened by xdg-open that this
    #program uses.
    if len(sys.argv)&gt;1:
        main(sys.argv[1])
        print('we can exit now.')
    else:
        print('no parameters...')
    print('mother program will end now!')
    sys.exit(0)
</code></pre>
</div>
<span class="comment-copy">Thanks, apparently I didn't RTFM close enough.</span>
<span class="comment-copy">"You can kill the parent without killing the child.". How?</span>
<span class="comment-copy">@MartinThoma: I added details on how to do that from the terminal above. Many OSes have a GUI process monitor which can make this even easier, but those details would be OS/GUI specific.</span>
