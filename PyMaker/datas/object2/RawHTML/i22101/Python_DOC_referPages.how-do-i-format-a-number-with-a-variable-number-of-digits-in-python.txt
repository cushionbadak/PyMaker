<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4302166/format-string-dynamically">Format string dynamically</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Say I wanted to display the number 123 with a variable number of padded zeroes on the front.</p>
<p>For example, if I wanted to display it in 5 digits I would have digits = 5 giving me:</p>
<pre><code>00123
</code></pre>
<p>If I wanted to display it in 6 digits I would have digits = 6 giving: </p>
<pre><code>000123
</code></pre>
<p>How would I do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a string method called zfill:</p>
<pre><code>&gt;&gt;&gt; '12344'.zfill(10)
0000012344
</code></pre>
<p>It will pad the left side of the string with zeros to make the string length N (10 in this case).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using it in a formatted string with the <code>format()</code> method which is preferred over the older style <code>''%</code> formatting</p>
<pre><code>&gt;&gt;&gt; 'One hundred and twenty three with three leading zeros {0:06}.'.format(123)
'One hundred and twenty three with three leading zeros 000123.'
</code></pre>
<p>See<br/>
<a href="http://docs.python.org/library/stdtypes.html#str.format" rel="noreferrer">http://docs.python.org/library/stdtypes.html#str.format</a><br/>
<a href="http://docs.python.org/library/string.html#formatstrings" rel="noreferrer">http://docs.python.org/library/string.html#formatstrings</a></p>
<p>Here is an example with variable width</p>
<pre><code>&gt;&gt;&gt; '{num:0{width}}'.format(num=123, width=6)
'000123'
</code></pre>
<p>You can even specify the fill char as a variable</p>
<pre><code>&gt;&gt;&gt; '{num:{fill}{width}}'.format(num=123, fill='0', width=6)
'000123'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>'%0*d' % (5, 123)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print "%03d" % (43)
</code></pre>
<p>Prints </p>
<blockquote>
<p>043</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="noreferrer">the introduction of formatted string literals</a> ("f-strings" for short) in Python 3.6, it is now possible to access previously defined variables with a briefer syntax:</p>
<pre><code>&gt;&gt;&gt; name = "Fred"
&gt;&gt;&gt; f"He said his name is {name}."
'He said his name is Fred.'
</code></pre>
<p>The examples given by John La Rooy can be written as</p>
<pre><code>In [1]: num=123
   ...: fill='0'
   ...: width=6
   ...: f'{num:{fill}{width}}'

Out[1]: '000123'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use string formatting</p>
<pre><code>print '%(#)03d' % {'#': 2}
002
print '%(#)06d' % {'#': 123}
000123
</code></pre>
<p>More info here: <a href="http://docs.python.org/release/2.4.4/lib/typesseq-strings.html" rel="nofollow noreferrer">link text</a></p>
</div>
<span class="comment-copy">Related to: <a href="https://stackoverflow.com/questions/3228865/how-do-i-format-a-number-with-a-variable-number-of-digits-in-python">Format string dynamically</a></span>
<span class="comment-copy">This is exactly what I'm looking for, I just do '123'.zfill(m) which allows me to use a variable instead of having a predetermined number of digits.  Thanks!</span>
<span class="comment-copy">+1 for mentioning the new format method. It's taking a bit to get used to, but I actually feel it's a bit cleaner than the old <code>%</code> style, which feels ironic to me because I used to feel that the <code>%</code> style was the cleanest method.</span>
<span class="comment-copy">Unnamed placefolders are also supported (at least in Python 3.4): <code>"{:{}{}}".format(123, 0, 6)</code>.</span>
<span class="comment-copy">@CoDEmanX The unnamed placeholders also work in python 2.7 - thanks.</span>
<span class="comment-copy">With the introduction of f-strings in Python 3.6, it is now possible to access previously defined variables without the need for <code>.format</code>. Simply prepend an <code>f</code> to the string: <code>f'{num:{fill}{width}}'</code>. I added an answer with this info.</span>
<span class="comment-copy">This is also quite useful for more general cases. This is the old style of formatting isn't it? It's a shame that the old style is being phased out</span>
<span class="comment-copy">What does <code>*</code> in <code>%0*d</code> mean? I check Python documents. <code>*</code> is not in the <code>format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]</code>.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">"Minimum field width (optional). If specified as an '*' (asterisk), the actual width is read from the next element of the tuple in values, and the object to convert comes after the minimum field width and optional precision."</a></span>
