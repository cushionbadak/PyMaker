<div class="post-text" itemprop="text">
<p>I am downloading a file from the net, and it fails even though I am doing:</p>
<p>for p in query:</p>
<pre><code>try:

except IOError as e:
   print e;
</code></pre>
<p>If there is an error, I want to log it, and then continue on with the next file.</p>
<p><strong>In this loop, I am trying to download an image, if for some reason the filename was bad, or the website was down, etc., I want to continue with the next item in the for loop.</strong></p>
<p>Is there a more generic error that won't fail and continue processing?</p>
<p>Also, how can I log errors to a file?</p>
</div>
<div class="post-text" itemprop="text">
<p>As pointed out by Lott, if a download is failing, unless the problem is fixed upstream (or with your download address), the best you can do is to try again. However, if the situation is that you have a list of downloads, and simply want to skip over failed downloads instead of exiting, then:</p>
<pre><code>logf = open("download.log", "w")
for download in download_list:
    try:
        # code to process download here
    except Exception as e:     # most generic exception you can catch
        logf.write("Failed to download {0}: {1}\n".format(str(download), str(e)))
        # optional: delete local version of failed download
    finally:
        # optional clean up code
        pass
</code></pre>
<p>Things to note:</p>
<p>(1) Use of the "<code>logging</code>" module, as suggested by ~unutbu, gives you much more flexibility and power with your logging output, including time stamp, simultaneously writing to different channels (e.g., stderr, file) depending on error levels, etc. etc. </p>
<p>(2) You might consider implementing the above logic using the "<code>with</code>" construct.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="http://docs.python.org/library/logging.html#module-logging" rel="noreferrer">logging module</a>:</p>
<pre><code>import logging
logging.basicConfig(filename='/tmp/myapp.log', level=logging.DEBUG, 
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
logger=logging.getLogger(__name__)

try:
    1/0
except ZeroDivisionError as err:
    logger.error(err)
</code></pre>
<p>Running the script writes in /tmp/myapp.log: </p>
<pre><code>% cat /tmp/myapp.log 
2010-08-01 17:50:45,960 ERROR __main__ integer division or modulo by zero
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This catches everything.
But it is much, much better to catch the exact exception.
python &lt;= 2.7</p>
<pre><code>while True
  try:
    doStuff()
  except Exception, e:
    f = open('log.txt', 'w')
    f.write('An exceptional thing happed - %s' % e)
    f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will write your error to a log file and continue to run the code.</p>
<pre><code>import traceback

#This line opens a log file
log = open("log.txt", "w")

try:
    # some code
    # Below line will print any print to log file as well.
    print("Creating DB Connection", file = log)
except Exception:
    traceback.print_exc(file=log)
    continue
</code></pre>
</div>
<span class="comment-copy">Once the error occurs, you cannot continue -- the download is broken.  What specific error are you getting?</span>
<span class="comment-copy">I have this in a for loop, why can't I catch the error, then continue and try the next file?</span>
<span class="comment-copy">@Blankman: Since you didn't provide any code, it's impossible to guess why you can't "catch the error, then continue and try the next file".</span>
<span class="comment-copy">@S.Lott your right my bad, I updated the question.</span>
<span class="comment-copy">@Blankman: Since you still didn't provide enough code, we still can't determine why your loop doesn't work.</span>
<span class="comment-copy">what is logf, can't find it anywhere when searching for 'python logf' in google.</span>
<span class="comment-copy">ah, its just a variable thought it was using logging sorry.</span>
<span class="comment-copy">Nice.  But the download is still broken.  This won't magically make it "[not] fail and continue processing".</span>
<span class="comment-copy">Why do I have to manually write the error to the log file. In batch script you could set it up such that all errors automatically get written to the Log file. You do that by putting your error prone code or your entire code within brackets and redirecting the error stream to a log file. Is there no way to implement this in Python, such that all errors automatically get written in a log file.</span>
<span class="comment-copy">@Ghos3t: You might be looking for how to <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow noreferrer">redirect stderr</a> or how to <a href="https://stackoverflow.com/q/6234405/190597">log uncaught exceptions</a>. If that is not what you are looking for, please ask a new question with all the details.</span>
