<div class="post-text" itemprop="text">
<p>Are there situations in which <code>sys.stdout.write()</code> is preferable to <code>print</code>? </p>
<p>(<strong>Examples:</strong> better performance; code that makes more sense)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> is just a thin wrapper that formats the inputs (modifiable, but by default with a space between args and newline at the end) and calls the write function of a given object. By default this object is <code>sys.stdout</code>, but you can pass a file using the "chevron" form. For example:</p>
<pre><code>print &gt;&gt; open('file.txt', 'w'), 'Hello', 'World', 2+3
</code></pre>
<p>See: <a href="https://docs.python.org/2/reference/simple_stmts.html?highlight=print#the-print-statement" rel="noreferrer">https://docs.python.org/2/reference/simple_stmts.html?highlight=print#the-print-statement</a></p>
<hr/>
<p>In Python 3.x, <code>print</code> becomes a function, but it is still possible to pass something else than <code>sys.stdout</code> thanks to the <code>file</code>argument.</p>
<pre><code>print('Hello', 'World', 2+3, file=open('file.txt', 'w'))
</code></pre>
<p>See <a href="https://docs.python.org/3/library/functions.html#print" rel="noreferrer">https://docs.python.org/3/library/functions.html#print</a></p>
<hr/>
<p>In Python 2.6+, <code>print</code> is still a statement, but it can be used as a function with</p>
<pre><code>from __future__ import print_function
</code></pre>
<hr/>
<p>Update: There is a little difference between the print function and the print statement (and more generally between a function and a statement) pointed by Bakuriu in comments.</p>
<p>In case of error when evaluating arguments:</p>
<pre><code>print "something", 1/0, "other" #prints only something because 1/0 raise an Exception

print("something", 1/0, "other") #doesn't print anything. The func is not called
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> first converts the object to a string (if it is not already a string). It will also put a space before the object if it is not the start of a line and a newline character at the end.</p>
<p>When using <code>stdout</code>, you need to convert the object to a string yourself (by calling "str", for example) and there is no newline character.</p>
<p>So</p>
<pre><code>print 99
</code></pre>
<p>is equivalent to:</p>
<pre><code>import sys
sys.stdout.write(str(99) + '\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My question is whether or not there
  are situations in which
  <code>sys.stdout.write()</code> is preferable to
  <code>print</code></p>
</blockquote>
<p>After finishing developing a script the other day, I uploaded it to a unix server. All my debug messages used <code>print</code> statements, and these <strong>do not</strong> appear on a server log. </p>
<p>This is a case where you may need <code>sys.stdout.write</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's some sample code based on the book <em>Learning Python</em> by Mark Lutz that addresses your question:</p>
<pre><code>import sys
temp = sys.stdout                 # store original stdout object for later
sys.stdout = open('log.txt', 'w') # redirect all prints to this log file
print("testing123")               # nothing appears at interactive prompt
print("another line")             # again nothing appears. it's written to log file instead
sys.stdout.close()                # ordinary file object
sys.stdout = temp                 # restore print commands to interactive prompt
print("back to normal")           # this shows up in the interactive prompt
</code></pre>
<p>Opening log.txt in a text editor will reveal the following:</p>
<pre><code>testing123
another line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's at least one situation in which you want <code>sys.stdout</code> instead of print.</p>
<p>When you want to overwrite a line without going to the next line, for instance <strong>while drawing a progress bar or a status message</strong>, you need to loop over something like</p>
<pre><code>Note carriage return-&gt; "\rMy Status Message: %s" % progress
</code></pre>
<p>And since print adds a newline, you are better off using <code>sys.stdout</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My question is whether or not there are situations in which <code>sys.stdout.write()</code> is preferable to <code>print</code></p>
</blockquote>
<p>If you're writing a command line application that can write to both files and stdout then it is handy.  You can do things like:</p>
<pre><code>def myfunc(outfile=None):
    if outfile is None:
        out = sys.stdout
    else:
        out = open(outfile, 'w')
    try:
        # do some stuff
        out.write(mytext + '\n')
        # ...
    finally:
        if outfile is not None:
            out.close()
</code></pre>
<p>It does mean you can't use the <code>with open(outfile, 'w') as out:</code> pattern, but sometimes it is worth it.</p>
</div>
<div class="post-text" itemprop="text">
<p>In 2.x, the <code>print</code> statement preprocesses what you give it, turning it into strings along the way, handling separators and newlines, and allowing redirection to a file. 3.x turns it into a function, but it still has the same responsibilities.</p>
<p><code>sys.stdout</code> is a file or file-like that has methods for writing to it which take strings or something along that line.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Are there situations in which sys.stdout.write() is preferable to
  print?</p>
</blockquote>
<p>For example I'm working on small function which prints stars in pyramid format upon passing the number as argument, although you can accomplish this using <strong><em>end=""</em></strong> to print in a separate line, I used <strong><em>sys.stdout.write</em></strong> in co-ordination with <strong><em>print</em></strong> to make this work. To elaborate on this <em>stdout.write</em> prints in the same line where as <em>print</em> always prints its contents in a separate line.</p>
<pre><code>import sys

def printstars(count):

    if count &gt;= 1:
        i = 1
        while (i &lt;= count):
            x=0
            while(x&lt;i):
                sys.stdout.write('*')
                x = x+1
            print('')
            i=i+1

printstars(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Are there situations in which sys.stdout.write() is preferable to print? </p>
</blockquote>
<p>I have found that stdout works better than print in a multithreading situation.  I use Queue (FIFO) to store the lines to print and I hold all threads before the print line until my print Q is empty.  Even so, using print I sometimes lose the final \n on the debug I/O (using wing pro IDE).</p>
<p>When I use std.out with \n in the string the debug I/O formats correctly and the \n's are accurately displayed. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 there is valid reason to use print over <code>sys.stdout.write</code>, but this reason can also be turned into a reason to use <code>sys.stdout.write</code> instead.</p>
<p>This reason is that, now print is a function in Python 3, you can override this. So you can use print everywhere in a simple script and decide those print statements need to write to <code>stderr</code> instead. You can now just redefine the print function, you could even change the print function global by changing it using the builtins module. Off course with <code>file.write</code> you can specify what file is, but with overwriting print you can also redefine the line separator, or argument separator. </p>
<p>The other way around is. Maybe you are absolutely certain you write to <code>stdout</code>, but also know you are going to change print to something else, you can decide to use <code>sys.stdout.write</code>, and use print for error log or something else. </p>
<p>So, what you use depends on how you intend to use it. <code>print</code> is more flexible, but that can be a reason to use and to not use it. I would still opt for flexibility instead, and choose print. Another reason to use <code>print</code> instead is familiarity. More people will now what you mean by print and less know <code>sys.stdout.write</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>it is preferable when dynamic printing is useful, for instance, to give information in a long process:</p>
<pre><code>import time, sys
Iterations = 555
for k in range(Iterations+1):
    # some code to execute here ...
    percentage = k / Iterations
    time_msg = "\rRunning Progress at {0:.2%} ".format(percentage)
    sys.stdout.write(time_msg)
    sys.stdout.flush()
    time.sleep(0.01)
</code></pre>
</div>
<span class="comment-copy">Which version of Python? 2.x or 3.x?</span>
<span class="comment-copy">Honestly I'd like to know for both, although I have no experience with Python 3. Updated the question.</span>
<span class="comment-copy">@S.Lott : asking for the basic differences between <code>sys.stdout.write()</code> and <code>print</code> (and/or why Python has both) is a perfectly reasonable question and does not need examples. OP did not say the command syntax was confusing.</span>
<span class="comment-copy">It's also worth noting that <code>print</code> also appends a newline to whatever you write which doesn't happen with <code>sys.stdout.write</code>.</span>
<span class="comment-copy">Also <code>sys.stdout.write</code> is more universal if you ever need to write dual-version code (e.g. code that works simultaneously with Python 2.x as well as Python 3.x).</span>
<span class="comment-copy">@MichaelMior You can suppress the newline that <code>print</code> appends with a trailing comma: <code>print "this",; print "on the same line as this"</code></span>
<span class="comment-copy">@bjd2385 The <code>&gt;&gt;</code> is not the rshift operator here but a specific "chevron" form of the <code>print</code> statement. See <a href="https://docs.python.org/2/reference/simple_stmts.html?highlight=print#the-print-statement" rel="nofollow noreferrer">docs.python.org/2/reference/…</a></span>
<span class="comment-copy"><code>sys.stdout.write()</code> also buffers the input and might not flush the input to the fd immediately. in order to make sure that it behaves like the print function, you should add:  <code>sys.stdout.flush()</code></span>
<span class="comment-copy">+1 for mentioning the newline character!  This is the main difference between <code>print</code> and <code>.write()</code>, I'd say.</span>
<span class="comment-copy">NOTE: <code>print</code> can be made to omit the newline. In Python 2.x, put a comma at the end, and a space character will be output, but no newline. E.g. <code>print 99,</code> In Python 3, <code>print(..., end='')</code> will avoid adding newline (and also avoid adding space, unless you do <code>end=' '</code>.</span>
<span class="comment-copy">@EOL How funny is that, that someone named EOL makes a comment about '\n'... It made me laugh. I have no life. Kill me.</span>
<span class="comment-copy">that's NOT true, <code>print</code> operation behaves slightly different in signal handlers in python2.X, i.e. print can not be replaced with sys.stdout in example: <a href="http://stackoverflow.com/questions/10777610/why-print-operation-within-signal-handler-may-change-deadlock-situation" title="why print operation within signal handler may change deadlock situation">stackoverflow.com/questions/10777610/…</a></span>
<span class="comment-copy">huh? Are you sure this is a difference between <code>print()</code> and <code>sys.stdout.write()</code>, as opposed to the difference between <code>stdout</code> and <code>stderr</code>? For debugging, you should use the <code>logging</code> module, which prints messages to <code>stderr</code>.</span>
<span class="comment-copy">Ya. Same is true with using <code>nohup</code> and redirecting to a <code>.out</code> file.</span>
<span class="comment-copy">use of sys.stdout.flush() would help.</span>
<span class="comment-copy">If you use <code>nohup</code>, by default all writing to <code>stdout</code> and <code>stderr</code> will be re-directed to <code>nohup.out</code>, disregarding whether you use <code>print</code> or <code>stdout.write</code>.</span>
<span class="comment-copy">Is there any way so that I can print to screen as well as write to the file?</span>
<span class="comment-copy">@DeveshSaini: Yes, just overwrite sys.stdout with a proxy class that has at least a write() and flush() function. I wrote an example snippet <a href="http://hastebin.com/owijihizus.py" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">Strictly speaking, you <i>can</i> use <code>with</code> -- <code>def process(output): # ...</code> / <code>if outfile is None: process(sys.stdout) else: with open(outfile, 'w') as out: process(out)</code> (adding newlines where necessary of course). It's definitely not very clean, though, that's for sure.</span>
<span class="comment-copy">Do you know any reason why stdout should work better than print in this case, or is this anecdotal? Could you provide a minimal working example where this happens?</span>
<span class="comment-copy">My thinking is that stdout works at a lower level than print.   I definitely had thread corruption as two print routines were fighting to feed through stdout.  Writing to stdout one from each thread removed the corruption for me.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/7877850/python-2-7-print-thread-safe?noredirect=1&amp;lq=1" title="python 2 7 print thread safe">stackoverflow.com/questions/7877850/…</a></span>
