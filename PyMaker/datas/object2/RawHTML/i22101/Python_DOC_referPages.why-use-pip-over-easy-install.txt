<div class="post-text" itemprop="text">
<p>A <a href="http://twitter.com/jperras/statuses/18160589493" rel="noreferrer">tweet</a> reads: </p>
<blockquote>
<p>Don't use easy_install, unless you
  like stabbing yourself in the face.
  Use pip.</p>
</blockquote>
<p>Why use pip over easy_install? Doesn't the <a href="http://mail.python.org/pipermail/catalog-sig/2010-June/002985.html" rel="noreferrer">fault lie with PyPI and package authors mostly</a>? If an author uploads crap source tarball (eg: missing files, no setup.py) to PyPI, then both pip and easy_install will fail. Other than cosmetic differences, why do Python people (like in the above tweet) seem to <strong>strongly</strong> favor pip over easy_install?</p>
<p>(Let's assume that we're talking about easy_install from the Distribute package, that is maintained by the community)</p>
</div>
<div class="post-text" itemprop="text">
<p>Many of the answers here are out of date for 2015 (although <a href="https://stackoverflow.com/a/3220572/908494">the initially accepted one from Daniel Roseman</a> is not). Here's the current state of things:</p>
<ul>
<li>Binary packages are now distributed as wheels (<code>.whl</code> files)—not just on PyPI, but in third-party repositories like <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">Christoph Gohlke's Extension Packages for Windows</a>. <code>pip</code> can handle wheels; <code>easy_install</code> cannot.</li>
<li>Virtual environments (which come built-in with 3.4, or can be added to 2.6+/3.1+ with <a href="https://pypi.python.org/pypi/virtualenv" rel="noreferrer"><code>virtualenv</code></a>) have become a very important and prominent tool (and recommended in <a href="https://docs.python.org/3/installing/index.html" rel="noreferrer">the official docs</a>); they include <code>pip</code> out of the box, but don't even work properly with <code>easy_install</code>.</li>
<li>The <code>distribute</code> package that included <code>easy_install</code> is no longer maintained. Its improvements over <code>setuptools</code> got merged back into <code>setuptools</code>. Trying to install <code>distribute</code> will just install <code>setuptools</code> instead.</li>
<li><code>easy_install</code> itself is only quasi-maintained.</li>
<li>All of the cases where <code>pip</code> used to be inferior to <code>easy_install</code>—installing from an unpacked source tree, from a DVCS repo, etc.—are long-gone; you can <code>pip install .</code>, <code>pip install git+https://</code>.</li>
<li><code>pip</code> comes with the official Python 2.7 and 3.4+ packages from python.org, and a <code>pip</code> bootstrap is included by default if you build from source.</li>
<li>The various incomplete bits of documentation on installing, using, and building packages have been replaced by the <a href="https://packaging.python.org/" rel="noreferrer">Python Packaging User Guide</a>. Python's own documentation on <a href="https://docs.python.org/3/installing/index.html" rel="noreferrer">Installing Python Modules</a> now defers to this user guide, and explicitly calls out <code>pip</code> as "the preferred installer program".</li>
<li>Other new features have been added to <code>pip</code> over the years that will never be in <code>easy_install</code>. For example, <code>pip</code> makes it easy to clone your site-packages by building a requirements file and then installing it with a single command on each side. Or to convert your requirements file to a local repo to use for in-house development. And so on.</li>
</ul>
<p>The only good reason that I know of to use <code>easy_install</code> in 2015 is the special case of using Apple's pre-installed Python versions with OS X 10.5-10.8. Since 10.5, Apple has included <code>easy_install</code>, but as of 10.10 they still don't include <code>pip</code>. With 10.9+, you should still just use <code>get-pip.py</code>, but for 10.5-10.8, this has some problems, so it's easier to <code>sudo easy_install pip</code>. (In general, <code>easy_install pip</code> is a bad idea; it's only for OS X 10.5-10.8 that you want to do this.) Also, 10.5-10.8 include <code>readline</code> in a way that <code>easy_install</code> knows how to kludge around but <code>pip</code> doesn't, so you also want to <code>sudo easy_install readline</code> if you want to upgrade that.</p>
</div>
<div class="post-text" itemprop="text">
<p>From Ian Bicking's own <a href="https://pip.readthedocs.org/en/1.1/other-tools.html#pip-compared-to-easy-install" rel="noreferrer">introduction to pip</a>:</p>
<blockquote>
<p>pip was originally written to improve on easy_install in the following ways</p>
<ul>
<li>All packages are downloaded before installation. Partially-completed installation doesn’t occur as a result.</li>
<li>Care is taken to present useful output on the console.</li>
<li>The reasons for actions are kept track of. For instance, if a package is being installed, pip keeps track of why that package was required.</li>
<li>Error messages should be useful.</li>
<li>The code is relatively concise and cohesive, making it easier to use programmatically.</li>
<li>Packages don’t have to be installed as egg archives, they can be installed flat (while keeping the egg metadata).</li>
<li>Native support for other version control systems (Git, Mercurial and Bazaar)</li>
<li>Uninstallation of packages.</li>
<li>Simple to define fixed sets of requirements and reliably reproduce a set of packages.</li>
</ul>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Another—as of yet unmentioned—reason for favoring <a href="http://pip.openplans.org/" rel="nofollow noreferrer">pip</a> is because it is the new hotness and will continue to be used in the future. </p>
<p>The infographic below—from the <a href="https://the-hitchhikers-guide-to-packaging.readthedocs.io/en/latest/introduction.html#current-state-of-packaging" rel="nofollow noreferrer">Current State of Packaging</a> section in the <a href="https://the-hitchhikers-guide-to-packaging.readthedocs.io/en/latest/index.html" rel="nofollow noreferrer">The Hitchhiker's Guide to Packaging v1.0</a>—shows that setuptools/easy_install will go away in the future.</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/2icn1.jpg"/></p>
<p>Here's another infographic from <a href="http://pythonhosted.org/distribute/" rel="nofollow noreferrer">distribute's documentation</a> showing that <a href="http://pythonhosted.org/setuptools/" rel="nofollow noreferrer">Setuptools</a> and easy_install will be replaced by the new hotness—<a href="http://pythonhosted.org/distribute/" rel="nofollow noreferrer">distribute</a> and <a href="http://pip.openplans.org/" rel="nofollow noreferrer">pip</a>. While <a href="http://pip.openplans.org/" rel="nofollow noreferrer">pip</a> is still the new hotness, <a href="http://pythonhosted.org/distribute/" rel="nofollow noreferrer">Distribute</a> merged with <a href="http://pythonhosted.org/setuptools/" rel="nofollow noreferrer">Setuptools</a> in 2013 with the release of <a href="http://pythonhosted.org/setuptools/" rel="nofollow noreferrer">Setuptools</a> v0.7.</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/RdBpi.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Two reasons, there may be more:</p>
<ol>
<li><p>pip provides an <code>uninstall</code> command</p></li>
<li><p>if an installation fails in the middle, pip will leave you in a clean state.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>REQUIREMENTS files.</p>
<p>Seriously, I use this in conjunction with virtualenv every day.</p>
<hr/>
<p><strong>QUICK DEPENDENCY MANAGEMENT TUTORIAL, FOLKS</strong></p>
<p>Requirements files allow you to create a snapshot of all packages that have been installed through pip.  By encapsulating those packages in a virtualenvironment, you can have your codebase work off a very specific set of packages and share that codebase with others.</p>
<p>From Heroku's documentation <a href="https://devcenter.heroku.com/articles/python" rel="nofollow noreferrer">https://devcenter.heroku.com/articles/python</a></p>
<p>You create a virtual environment, and set your shell to use it. (bash/*nix instructions)</p>
<pre><code>virtualenv env
source env/bin/activate
</code></pre>
<p>Now all python scripts run with this shell will use this environment's packages and configuration.  Now you can install a package locally to this environment without needing to install it globally on your machine.</p>
<pre><code>pip install flask
</code></pre>
<p>Now you can dump the info about which packages are installed with</p>
<pre><code>pip freeze &gt; requirements.txt
</code></pre>
<p>If you checked that file into version control, when someone else gets your code, they can setup their own virtual environment and install all the dependencies with:</p>
<pre><code>pip install -r requirements.txt
</code></pre>
<p>Any time you can automate tedium like this is awesome.</p>
</div>
<div class="post-text" itemprop="text">
<p>pip won't install binary packages and isn't well tested on Windows.</p>
<p>As Windows doesn't come with a compiler by default pip often <em>can't</em> be used there. easy_install <em>can</em> install binary packages for Windows.</p>
</div>
<div class="post-text" itemprop="text">
<p>UPDATE: <code>setuptools</code> has absorbed <code>distribute</code> as opposed to the other way around, as some thought. <code>setuptools</code> is up-to-date with the latest <code>distutils</code> changes and the wheel format. Hence, <code>easy_install</code> and <code>pip</code> are more or less on  equal footing now.</p>
<p>Source: <a href="http://pythonhosted.org/setuptools/merge-faq.html#why-setuptools-and-not-distribute-or-another-name">http://pythonhosted.org/setuptools/merge-faq.html#why-setuptools-and-not-distribute-or-another-name</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As an addition to fuzzyman's reply:</p>
<blockquote>
<p>pip won't install binary packages and isn't well tested on Windows.</p>
<p>As Windows doesn't come with a compiler by default pip often can't be
  used there. easy_install can install binary packages for Windows.</p>
</blockquote>
<p>Here is a trick on Windows:</p>
<ul>
<li><p>you can use <code>easy_install &lt;package&gt;</code> to install binary packages to avoid building a binary</p></li>
<li><p>you can use  <code>pip uninstall &lt;package&gt;</code> even if you used easy_install.</p></li>
</ul>
<p>This is just a work-around that works for me on windows.
Actually I always use pip if no binaries are involved.</p>
<p>See the current pip doku: <a href="http://www.pip-installer.org/en/latest/other-tools.html#pip-compared-to-easy-install" rel="nofollow">http://www.pip-installer.org/en/latest/other-tools.html#pip-compared-to-easy-install</a></p>
<blockquote>
<p>I will ask on the mailing list what is planned for that.</p>
</blockquote>
<p>Here is the latest update:</p>
<p>The new supported way to install binaries is going to be <code>wheel</code>!
It is not yet in the standard, but almost. Current version is still an alpha: 1.0.0a1</p>
<p><a href="https://pypi.python.org/pypi/wheel" rel="nofollow">https://pypi.python.org/pypi/wheel</a></p>
<p><a href="http://wheel.readthedocs.org/en/latest/" rel="nofollow">http://wheel.readthedocs.org/en/latest/</a></p>
<p>I will test <code>wheel</code> by creating an OS X installer for <code>PySide</code> using <code>wheel</code> instead of eggs. Will get back and report about this.</p>
<p>cheers - Chris</p>
<h2>A quick update:</h2>
<p>The transition to <code>wheel</code> is almost over. Most packages are supporting <code>wheel</code>.</p>
<p>I promised to build wheels for <code>PySide</code>, and I did that last summer. Works great!</p>
<p>HINT:
A few developers failed so far to support the wheel format, simply because they forget to
replace <code>distutils</code> by <code>setuptools</code>.
Often, it is easy to convert such packages by replacing this single word in <code>setup.py</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just met one special case that I had to use <code>easy_install</code> instead of <code>pip</code>, or I have to pull the source codes directly.</p>
<p>For the package <code>GitPython</code>, the version in <code>pip</code> is too old, which is <code>0.1.7</code>, while the one from <code>easy_install</code> is the latest which is <code>0.3.2.rc1</code>.</p>
<p>I'm using <code>Python 2.7.8</code>. I'm not sure about the underlay mechanism of <code>easy_install</code> and <code>pip</code>, but at least the versions of some packages may be different from each other, and sometimes <code>easy_install</code> is the one with newer version.</p>
<pre><code>easy_install GitPython
</code></pre>
</div>
<span class="comment-copy">Before I saw this question I answered an unrelated one by saying "don't use easy_install, use pip". Now I'm wondering why I said that...</span>
<span class="comment-copy">I still run into packages that cause pip to fail but easy_install handles just fine, so I'm curious about this as well.</span>
<span class="comment-copy">pyobjc-core is an example of a package that works with easy_install but not with pip.</span>
<span class="comment-copy">Coming back to python four years later the state of packaging is beyond messed up. It's 2014 and it only got worse. From what I understand setuptools <a href="http://pythonhosted.org/setuptools/merge-faq.html#why-setuptools-and-not-distribute-or-another-name" rel="nofollow noreferrer">absorbed</a> distutils, even though official python docs are <a href="https://docs.python.org/2/distutils/introduction.html" rel="nofollow noreferrer">oblivious</a> to this, but neither is <a href="https://python-packaging-user-guide.readthedocs.org/en/latest/future.html" rel="nofollow noreferrer">going to be part of python 3</a>, and pip is hanging around like a third wheel (pun intended).</span>
<span class="comment-copy">@drozzy: You happened to come back at the worst possible time—right after a group of core devs decided things had become such a mess that they had to get involved in solving the problem. <code>setuptools</code> isn't part of Python 3 because <code>pip</code> is, and that's the only part end-users need. (And developers who want to distribute on PyPI can obviously <code>pip install setuptools</code>, and everything else they might want.)</span>
<span class="comment-copy">@drozzy: Maybe. But consider that in another 5 years, my answer will be as out of date as all the others, while Daniel Roseman's is timeless. Also, my answer wouldn't be as good if it couldn't rely on pointing at a 5-year-old accepted answer that demonstrates <i>why</i> the Python community got behind <code>pip</code> in the intervening time.</span>
<span class="comment-copy">It's worth noting that some packaged versions of pip were buggy, and pip failed to upgrade itself. Whether you consider it ironic or not, in those cases the easiest solution is to do <code>easy_install -U pip</code> or <code>easy_install3 -U pip</code>.</span>
<span class="comment-copy">"but don't even work properly with <code>easy_install</code>" This was not my experience, although I haven't tried in a while since wheels now dominate. But Christoph Gohlke's binaries used to be distributed as executable eggs. Calling <code>easy_install</code> on them was the <i>only</i> way I could get those packages installed to a virtual environment, and it never gave me any heartburn. In what way does <code>easy_install</code> no longer work with virtual envs?</span>
<span class="comment-copy">The "error messages" advantage is huge, especially for newer users. Easy-install is famous for spitting out dozens of what look like fatal errors, only to have wound up doing the install successfully anyway, which makes it difficult to use until you learn to ignore most everything it says.  Pip simply omits saying those things in the first place.</span>
<span class="comment-copy">@Glyph is there an advantage using <code>easy_install pip</code> over <code>sudo apt-get install python-pip</code>?</span>
<span class="comment-copy">Do not use easy_install outside of a virtualenv on package-based distributions: <a href="http://workaround.org/easy-install-debian" rel="nofollow noreferrer">workaround.org/easy-install-debian</a></span>
<span class="comment-copy">@Dennis: When using <code>sudo apt-get</code> Ubuntu/Debian will install Python packages in <code>/usr/lib/python/dist-packages</code> whereas <code>sudo pip</code> or <code>sudo easy_install</code> will install in <code>/local/lib/python/site-packages</code> and unfortunately the Debian/Ubuntu packages often have different names that pip isn't familiar with. The best solution IMHO is to use virtualenv and <code>pip</code> intall your packages there.</span>
<span class="comment-copy">This needs an update.</span>
<span class="comment-copy">Infographics FTW</span>
<span class="comment-copy">OTOH, the second graphic has been outdated for a year.  distribute will reach end-of-life and be superseded by distutils2 (which will also be in the Python standard library starting with 3.3).  A basic installer named pysetup is provided as part or distutils2, and pip will continue to provide additional features on top of distutils2 in the future.</span>
<span class="comment-copy">omg thank you so much.  i have been confused by python packaging for years and it is heartening to see a semi-authoritative path forward.</span>
<span class="comment-copy">As of March 2013 <a href="http://mail.python.org/pipermail/distutils-sig/2013-March/020126.html" rel="nofollow noreferrer"><code>distribute</code> is merging back with <code>setuptools</code></a>. <code>pip</code> works. <a href="https://distlib.readthedocs.org/en/latest/overview.html#what-was-the-problem-with-packaging" rel="nofollow noreferrer"><code>packaging</code> (<code>distutils2</code>) is <i>not</i> included in Python 3.3</a>.</span>
<span class="comment-copy">This "answer" is so out of date and just wrong it's not even funny.</span>
<span class="comment-copy">So does setuptoools now. Erm... kind-of. <a href="http://pythonhosted.org/setuptools/easy_install.html#uninstalling-packages" rel="nofollow noreferrer">pythonhosted.org/setuptools/…</a></span>
<span class="comment-copy">This seems to be part of setuptools now as well: <a href="http://pythonhosted.org/setuptools/setuptools.html#declaring-dependencies" rel="nofollow noreferrer">pythonhosted.org/setuptools/…</a></span>
<span class="comment-copy">Interesting, I never thought of that. pip also doesn't support the setuptools "extras" features that is used by the Zope folks at least.</span>
<span class="comment-copy">Is that an indication of needing a gcc environment on windows, rather than insisting pip installs pre-built binaries?</span>
<span class="comment-copy">The "right" compiler to use for Windows is Visual Studio (2008 i believe for recent versions of Python). Installing this, even the free version, is a hassle. The <i>normal</i> way of installing C extensions on Windows is from pre-compiled binaries. easy_install supports this, pip doesn't.</span>
<span class="comment-copy">This is the primary reasons why I still use easy_install.</span>
<span class="comment-copy">In the years since the above answer was given, it's now no longer true that pip can't install binary packages, on Windows or on other platforms.  The <code>wheel</code> binary distribution format makes that possible.  Many third-party packages with C extension modules are now also being distributed as wheels built for various platforms and pip can automatically install them.  See, for instance, <a href="http://pythonwheels.com" rel="nofollow noreferrer">pythonwheels.com</a></span>
<span class="comment-copy">Why isn't this upvoted more? The answers are so outdated!</span>
<span class="comment-copy">yeah, the top answers are extreamly outdated</span>
<span class="comment-copy"><i>Hence, easy_install and pip are more or less on equal footing now</i> This is nonsense. <code>easy_install</code> still is what it's been for a long time and pip improves upon it tremendously.  <code>easy_install</code> is just part of <code>setuptools</code> and arguably one of the worst ones which is why pip aims to replace it.</span>
<span class="comment-copy">updated above - I think the waiting is almost over ;-)</span>
<span class="comment-copy">I should update this, again, because wheel has become the standard in spring 2014. Actually, I think such old threads should not be changed ad infinitum, because - the old answers were quite good - it is easy to replace everything when reality changes. But is it fair, when the original reason for a question is gone?</span>
<span class="comment-copy">Very useful answer for windows users.</span>
<span class="comment-copy">I checked this right now (see time stamp), and it is no longer true: Both pip and easy_install worked the same, resulting in GitPython 0.3.5 today. (Tested on OS X Yosemite, only). What is your platform? Please update your entry because it is now misleading.</span>
