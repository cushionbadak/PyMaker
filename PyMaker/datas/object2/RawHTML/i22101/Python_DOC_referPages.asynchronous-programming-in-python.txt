<div class="post-text" itemprop="text">
<p>Is there a generic notion of asynchronous programming in python? Could I assign a callback to a function, execute it and return to the main program flow immediately, no matter how long the execution of that function would take?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look here:</p>
<p><a href="http://xph.us/2009/12/10/asynchronous-programming-in-python.html" rel="noreferrer">Asynchronous Programming in Python</a></p>
<p><a href="http://krondo.com/blog/?p=1247" rel="noreferrer">An Introduction to Asynchronous Programming and Twisted</a></p>
<p>Worth checking out:</p>
<p><a href="https://plus.google.com/103282573189025907018/posts/6gLX8Nhk5WM" rel="noreferrer">asyncio (previously Tulip) has been checked into the Python default branch</a></p>
<h3>Edited on 14-Mar-2018</h3>
<p>Today Python has <a href="https://docs.python.org/3/library/asyncio.html" rel="noreferrer">asyncIO — Asynchronous I/O, event loop, coroutines and tasks</a> built in.</p>
<p>Description taken from the link above:</p>
<blockquote>
<p>The <strong>asyncIO</strong> module provides infrastructure for writing single-threaded
  concurrent code using coroutines, multiplexing I/O access over sockets
  and other resources, running network clients and servers, and other
  related primitives. Here is a more detailed list of the package
  contents:</p>
<ol>
<li>a pluggable event loop with various system-specific implementations;</li>
<li>transport and protocol abstractions (similar to those in Twisted);</li>
<li>concrete support for TCP, UDP, SSL, subprocess pipes, delayed calls,
  and others (some may be system-dependent);</li>
<li>a Future class that mimics the one in the concurrent.futures module, but adapted for use with the event loop;</li>
<li>coroutines and tasks based on yield from (PEP 380), to
  help write concurrent code in a sequential fashion;</li>
<li>cancellation support for Futures and coroutines;</li>
<li>synchronization primitives for use
  between coroutines in a single thread, mimicking those in the
  threading module;</li>
<li>an interface for passing work off to a threadpool,
  for times when you absolutely, positively have to use a library that
  makes blocking I/O calls.</li>
</ol>
<p>Asynchronous programming is more complex
  than classical “sequential” programming: see the <a href="https://docs.python.org/3/library/asyncio-dev.html#asyncio-dev" rel="noreferrer">Develop with asyncio
  page</a> which lists common traps and explains how to avoid them. Enable
  the debug mode during development to detect common issues.</p>
</blockquote>
<p>Also worth checking out:</p>
<p><a href="https://medium.freecodecamp.org/a-guide-to-asynchronous-programming-in-python-with-asyncio-232e2afa44f6" rel="noreferrer">A guide to asynchronous programming in Python with asyncIO</a></p>
</div>
<div class="post-text" itemprop="text">
<p>What you describe (the main program flow resuming immediately while another function executes) is not what's normally called "asynchronous" (AKA "event-driven") programming, but rather "multitasking" (AKA "multithreading" or "multiprocessing").  You can get what you described with the standard library modules <code>threading</code> and <code>multiprocessing</code> (the latter allows actual concurrent execution on multi-core machines).</p>
<p>Asynchronous (event-driven) programming is supported in the standard Python library in the <code>asyncore</code> and <code>asynchat</code> modules, which are very oriented to networking tasks (indeed they internally use the <code>select</code> module, which, on Windows, only supports sockets -- though on Unixy OSs it can also support any file descriptor).</p>
<p>For a more general (though also mostly networking oriented, but not <em>limited</em> to that) support for asynchronous (event-driven) programming, check out the <a href="http://twistedmatrix.com/trac/" rel="noreferrer">twisted</a> third-party package.</p>
</div>
<div class="post-text" itemprop="text">
<p>Good news everyone!</p>
<p><strong>Python 3.4 would include brand new ambitious asynchronous programming <a href="http://www.slideshare.net/megafeihong/tulip-24190096">implementation</a>!</strong> </p>
<p>It is currently called <a href="https://code.google.com/p/tulip/source/list">tulip</a> and already has an <a href="https://groups.google.com/forum/?fromgroups#!forum/python-tulip">active following</a>.</p>
<p>As described in <a href="http://www.python.org/dev/peps/pep-3153/">PEP 3153: Asynchronous IO support</a> and <a href="http://www.python.org/dev/peps/pep-3156/">PEP 3156: Asynchronous IO Support Rebooted</a>: </p>
<blockquote>
<p>People who want to write asynchronous code in Python right now have a few options:</p>
<ul>
<li>asyncore and asynchat;</li>
<li>something bespoke, most likely based on the select module;</li>
<li>using a third party library, such as <a href="http://www.twistedmatrix.com/">Twisted</a> or <a href="http://www.gevent.org/">gevent</a>.</li>
</ul>
<p>Unfortunately, each of these options has its downsides, which this PEP tries to address.</p>
<p>Despite having been part of the Python standard library for a long time, the asyncore module suffers from fundamental flaws following from an inflexible API that does not stand up to the expectations of a modern asynchronous networking module.</p>
<p>Moreover, its approach is too simplistic to provide developers with all the tools they need in order to fully exploit the potential of asynchronous networking.</p>
<p>The most popular solution right now used in production involves the use of third party libraries. These often provide satisfactory solutions, but there is a lack of compatibility between these libraries, which tends to make codebases very tightly coupled to the library they use.</p>
<p>This current lack of portability between different asynchronous IO libraries causes a lot of duplicated effort for third party library developers. A sufficiently powerful abstraction could mean that asynchronous code gets written once, but used everywhere.</p>
</blockquote>
<p>Here is the <a href="http://www.slideshare.net/megafeihong/tulip-24190096">brief overview</a> of it's abilities.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other respondents are pointing you to Twisted, which is a great and very comprehensive framework but in my opinion it has a very un-pythonic design. Also, AFAICT, you have to use the Twisted main loop, which may be a problem for you if you're already using something else that provides its own loop.</p>
<p>Here is a contrived example that would demonstrate using the <code>threading</code> module:</p>
<pre><code>from threading import Thread

def background_stuff():
  while True:
    print "I am doing some stuff"

t = Thread(target=background_stuff)
t.start()

# Continue doing some other stuff now
</code></pre>
<p>However, in pretty much every useful case, you will want to communicate between threads. You should look into <a href="http://en.wikipedia.org/wiki/Synchronization_primitive" rel="noreferrer">synchronization primitives</a>, and become familiar with the concept of <a href="http://en.wikipedia.org/wiki/Concurrency_%28computer_science%29" rel="noreferrer">concurrency</a> and the related issues.</p>
<p>The <code>threading</code> module provides many such primitives for you to use, if you know how to use them.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may well want to checkout the Twisted library for Python. They provide many useful tools.</p>
<ol>
<li><a href="http://jessenoller.com/2009/02/11/twisted-hello-asynchronous-programming/1." rel="nofollow noreferrer">A little primer</a></li>
<li><a href="http://twistedmatrix.com/documents/current/core/howto/defer.html" rel="nofollow noreferrer">Defer and Related stuff</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You may see my Python Asynchronous Programming tool: <a href="http://www.ideawu.com/blog/2010/08/delegate-in-pythonpython-asynchronous-programming.html" rel="nofollow noreferrer">http://www.ideawu.com/blog/2010/08/delegate-in-pythonpython-asynchronous-programming.html</a></p>
<pre>
import time, random, sys
from delegate import *

def proc(a):
    time.sleep(random.random())
    return str(a)

def proc_callback(handle, args=None):
    ret = d.end(handle)

d = Delegate()
d.init(2) # number of workers

handle = d.begin(proc, '12345', proc_callback, 'test')
sys.stdin.readline()

d.free()
</pre>
</div>
<span class="comment-copy">related <a href="http://nichol.as/asynchronous-servers-in-python" rel="nofollow noreferrer">nichol.as/asynchronous-servers-in-python</a></span>
<span class="comment-copy">There are quite exciting <a href="http://stackoverflow.com/questions/3221314/asynchronous-programming-in-python/18099524#answer-18099524">new developments in the field</a>.</span>
<span class="comment-copy">That's not really an answer.</span>
<span class="comment-copy">@SteveBennettㄹ updated with recent advancements.</span>
<span class="comment-copy">Which part of that answers the question "Could I assign a callback to a function, execute it and return to the main program flow immediately, no matter how long the execution of that function would take?"</span>
<span class="comment-copy">+1 , nobody else noticed he was thinking of threading/forking .</span>
<span class="comment-copy">Sounds crazy that someone actually wants to implement a useful way to do async programming in Python.</span>
<span class="comment-copy">@PavelŠimerda: why?</span>
<span class="comment-copy">@MestreLion: This area has been ignored for such a long time.</span>
<span class="comment-copy">@PavelŠimerda: what area has been ignored? async io implementation in python or async io as a concept/pattern in general programming?</span>
<span class="comment-copy">I live in the context of Python, C and Linux. In that context, I believe async io has been neglected in general but even more so in Python. But I'm not talking about creating an async library, I'm talking about a general way to do implementation-agnostic async logic in Python application. The PEP above seems to be the first serious progress. We're getting a bit chatty, though, and I don't think our discussion makes a great addition to this SO answer. Feel free to find me on Freenode as pavlix.</span>
<span class="comment-copy">While multiprocessing (and multithreading) is useful, that doesn't mean it's a solution for everything, nor it does mean that it's always a good substitute for event-driven programming using a main loop.</span>
