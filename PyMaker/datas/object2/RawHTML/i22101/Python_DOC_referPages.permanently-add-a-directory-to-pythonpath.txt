<div class="post-text" itemprop="text">
<p>Whenever I use <code>sys.path.append</code>, the new directory will be added. However, once I close python, the list will revert to the previous (default?) values. How do I permanently add a directory to <code>PYTHONPATH</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add your new directory to the environment variable <code>PYTHONPATH</code>, separated by a colon from previous contents thereof.  In any form of Unix, you can do that in a startup script appropriate to whatever shell you're using (<code>.profile</code> or whatever, depending on your favorite shell) with a command which, again, depends on the shell in question; in Windows, you can do it through the system GUI for the purpose.</p>
<p><code>superuser.com</code> may be a better place to ask further, i.e. for more details if you need specifics about how to enrich an environment variable in your chosen platform and shell, since it's not really a programming question per se.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using bash (on a Mac or GNU/Linux distro), add this to your <code>~/.bashrc</code></p>
<pre><code>export PYTHONPATH="${PYTHONPATH}:/my/other/path"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of manipulating <code>PYTHONPATH</code> you can also create a <a href="http://docs.python.org/library/site.html">path configuration file</a>. First find out in which directory Python searches for this information:</p>
<pre><code>python -m site --user-site
</code></pre>
<p>For some reason this doesn't seem to work in Python 2.7. There you can use:</p>
<pre><code>python -c 'import site; site._script()' --user-site
</code></pre>
<p>Then create a <code>.pth</code> file in that directory containing the path you want to add (create the directory if it doesn't exist).</p>
<p>For example:</p>
<pre><code># find directory
SITEDIR=$(python -m site --user-site)

# create if it doesn't exist
mkdir -p "$SITEDIR"

# create new .pth file with our path
echo "$HOME/foo/bar" &gt; "$SITEDIR/somelib.pth"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works on Windows</p>
<ol>
<li>On Windows, with Python 2.7 go to the Python setup folder.</li>
<li>Open Lib/site-packages.</li>
<li>Add an example.pth empty file to this folder.</li>
<li>Add the required path to the file, one per each line.</li>
</ol>
<p>Then you'll be able to see all modules within those paths from your scripts.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could add the path via your pythonrc file, which defaults to ~/.pythonrc on linux. ie.</p>
<pre><code>import sys
sys.path.append('/path/to/dir')
</code></pre>
<p>You could also set the <code>PYTHONPATH</code> environment variable, in a global rc file, such <code>~/.profile</code> on mac or linux, or via Control Panel -&gt; System -&gt; Advanced tab -&gt; Environment Variables on windows.</p>
</div>
<div class="post-text" itemprop="text">
<p>In case anyone is still confused - if you are on a Mac, do the following:</p>
<ol>
<li>Open up Terminal</li>
<li>Type <code>open .bash_profile</code></li>
<li>In the text file that pops up, add this line at the end: 
<code>export PYTHONPATH=$PYTHONPATH:foo/bar</code></li>
<li>Save the file, restart the Terminal, and you're done</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>To give a bit more explanation, Python will automatically construct its search paths (as mentioned <a href="https://stackoverflow.com/a/12311321/436794">above</a> and <a href="https://superuser.com/a/247649/74173">here</a>) using the <code>site.py</code> script (typically located in sys.prefix + <code>lib/python&lt;version&gt;/site-packages</code> as well as <code>lib/site-python</code>). One can obtain the value of sys.prefix:</p>
<pre><code>python -c 'import sys; print(sys.prefix)'
</code></pre>
<p>The site.py script then adds a number of directories, dependent upon the platform, such as <code>/usr/{lib,share}/python&lt;version&gt;/dist-packages</code>, <code>/usr/local/lib/python&lt;version&gt;/dist-packages</code> to the search path <strong>and also</strong> searches these paths for <code>&lt;package&gt;.pth</code> config files which contain specific additional search paths. For example <em>easy-install</em> maintains its collection of installed packages which are added to a system specific file e.g on Ubuntu it's <code>/usr/local/lib/python2.7/dist-packages/easy-install.pth</code>. On a typical system there are a bunch of these .pth files around which can explain some unexpected paths in sys.path:</p>
<pre><code>python -c 'import sys; print(sys.path)'
</code></pre>
<p>So one can create a .pth file and put in any of these directories (including the sitedir as mentioned <a href="https://stackoverflow.com/a/12311321/436794">above</a>). This seems to be the way most packages get added to the sys.path as opposed to using the PYTHONPATH.</p>
<p>Note: On OSX there's a special additional search path added by site.py for 'framework builds' (but seems to work for normal command line use of python): <code>/Library/Python/&lt;version&gt;/site-packages</code> (e.g. for Python2.7: <code>/Library/Python/2.7/site-packages/</code>) which is where 3rd party packages are supposed to be installed (see the README in that dir). So one can add a path configuration file in there containing additional search paths e.g. create a file called <code>/Library/Python/2.7/site-packages/pip-usr-local.pth</code> which contains <code>/usr/local/lib/python2.7/site-packages/</code> and then the system python will add that search path.</p>
</div>
<div class="post-text" itemprop="text">
<p>On linux you can create a symbolic link from your package to a directory of the PYTHONPATH without having to deal with the environment variables. Something like:</p>
<pre><code>ln -s /your/path /usr/lib/pymodules/python2.7/
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For me it worked when I changed the <code>.bash_profile</code> file. Just changing <code>.bashrc</code> file worked only till I restarted the shell.</p>
<p>For python 2.7 it should look like:</p>
<pre><code>export PYTHONPATH="$PYTHONPATH:/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python"
</code></pre>
<p>at the end of the <code>.bash_profile</code> file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding <code>export PYTHONPATH="${PYTHONPATH}:/my/other/path"</code> to the ~/.bashrc might not work if <code>PYTHONPATH</code> does not currently exist (because of the <code>:</code>).</p>
<pre><code>export PYTHONPATH="/my/other/path1"
export PYTHONPATH="${PYTHONPATH}:/my/other/path2"
</code></pre>
<p>Adding the above to my ~/.bashrc did the trick for me on Ubuntu 16.04</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to add on awesomo's answer, you can also add that line into your <code>~/.bash_profile</code> or <code>~/.profile</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I added permanently in Windows Vista, Python 3.5</p>
<p>System &gt; Control Panel &gt; Advanced system settings &gt; Advanced (tap) Environment Variables &gt; System variables &gt; (if you don't see PYTHONPATH in Variable column) (click) New &gt; Variable name: PYTHONPATH &gt; Variable value: </p>
<p>Please, write the directory in the Variable value. It is details of Blue Peppers' answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>The add a new path to PYTHONPATH is doing in manually by:</p>
<p>adding the path to your ~/.bashrc profile, in terminal by:</p>
<pre><code>vim ~/.bashrc
</code></pre>
<p>paste the following to your profile</p>
<pre><code>export PYTHONPATH="${PYTHONPATH}:/User/johndoe/pythonModule"
</code></pre>
<p>then, make sure to source your bashrc profile when ever you run your code in terminal:</p>
<pre><code>source ~/.bashrc 
</code></pre>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>On MacOS, Instead of giving path to a specific library. Giving full path to the root project folder in </p>
<pre><code>~./bash_profile 
</code></pre>
<p>made my day, for example: </p>
<pre><code>export PYTHONPATH="${PYTHONPATH}:/Users/&lt;myuser&gt;/project_root_folder_path"
</code></pre>
<p>after this do: </p>
<pre><code>source ~./bash_profile
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.6.4 you can persist sys.path across python sessions like this:</p>
<pre><code>import sys
import os

print(str(sys.path))

dir_path = os.path.dirname(os.path.realpath(__file__))
print(f"current working dir: {dir_path}")

root_dir = dir_path.replace("/util", '', 1)
print(f"root dir: {root_dir}")

sys.path.insert(0, root_dir)

print(str(sys.path))
</code></pre>
<p>I strongly suggest you use virtualenv and virtualenvwrapper otherwise you will clutter your path</p>
</div>
<div class="post-text" itemprop="text">
<p>The script below works on all platforms as it's pure Python. It makes use of the pathlib Path, documented here <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">https://docs.python.org/3/library/pathlib.html</a>, to make it work cross-platform. You run it once, restart the kernel and that's it. Inspired by <a href="https://medium.com/@arnaud.bertrand/modifying-python-s-search-path-with-pth-files-2a41a4143574" rel="nofollow noreferrer">https://medium.com/@arnaud.bertrand/modifying-python-s-search-path-with-pth-files-2a41a4143574</a>.</p>
<pre><code>from pathlib import Path
to_add=Path(path_of_directory_to_add)
from sys import path

if str(to_add) not in path:
    minLen=999999
    for index,directory in enumerate(path):
        if 'site-packages' in directory and len(directory)&lt;=minLen:
            minLen=len(directory)
            stpi=index

    pathSitePckgs=Path(path[stpi])
    with open(str(pathSitePckgs/'current_machine_paths.pth'),'w') as pth_file:
        pth_file.write(str(to_add))
</code></pre>
</div>
<span class="comment-copy">Errata: separator on windows would a semicolon. If you need to override system paths on windows, setting via the GUI as a user environment variable may not be sufficient, as user variables are appended to system variables. In these cases, you'll need to resort to a startup script that makes the necessary adjustments.</span>
<span class="comment-copy">@Nathan, tx for the reminder on semicolon, but (if you're an admin of course) you <i>can</i> set <b>system</b> env.vars on windows (plus, the OP is not asking how to <b>override</b> the path, just how to <b>append</b> to it, so, a user env.var will also be fine for that!-).</span>
<span class="comment-copy">unfortunately I'm not an admin on my work PC, so I have to resort to such measures. :(</span>
<span class="comment-copy">This worked perfectly for me, but make sure the directory you point to has at the topmost <b>init</b>.py file in your directory structure. This wasn't perfectly clear for me at first. For example, I tried <b>export PYTHONPATH=$PYTHONPATH:/Users/joey/repos</b> but it did not work because my repos directory did not have _<i>init_</i>.py. Going down one directory further: <b>/Users/joey/repos/specificRepo</b> did the trick. Now python can traverse any downward directory connected to the specificRepo directory that contains a <b>init</b>.py !</span>
<span class="comment-copy">this worked for me but could you explain where this PYTHONPATH variable is located? and how does "export PYTHONPATH" know to locate that exact file?</span>
<span class="comment-copy">remember after you edit <code>~/.bashrc</code> then run <code>source ~/.bashrc</code> see <a href="http://stackoverflow.com/questions/2518127/how-do-i-reload-bashrc-without-logging-out-and-back-in" title="how do i reload bashrc without logging out and back in">stackoverflow.com/questions/2518127/…</a></span>
<span class="comment-copy">I think it's a bad idea to put <code>sudo su</code> at the start of your .bashrc file. <a href="http://askubuntu.com/questions/34530/executing-a-super-user-command-through-bashrc">This post</a> agrees with me. On my system, at least, it's not even necessary.</span>
<span class="comment-copy">It did not work for me :( Using Ubuntu 14.04</span>
<span class="comment-copy">I've tried this using Python 2.6 and it doesn't seem to work for me</span>
<span class="comment-copy">I just symlinked this directory to my own library directory and store all my scripts there. Worked fine.</span>
<span class="comment-copy">Resolved to try it again after finding this topic again and managed to get it working as above this time! Upvoted and contrite apologies :)</span>
<span class="comment-copy">This works just perfectly, I was on the right track but the <b><code>python -m site --user-site</code></b> and <b><code>(create the directory if it doesn't exist)</code></b> parts were what I was missing to get it working.</span>
<span class="comment-copy">in <code>2.7.4</code> this <code>python -m site --user-site</code> prints nothing to the screen</span>
<span class="comment-copy">IMO, this is the best solution, since it does not depend on choice of shell or working environment. Works on linux as well, where the default python path is "/usr/local/lib/pythonX.Y/site-packages". If that doesn't work, try putting your .pth file to dist-packages directory instead.</span>
<span class="comment-copy">Windows 7, Python 3.6.5. This is the answer. As auserdude wrote: Create the "example.pth" in Python's Lib/site-packages folder and then add your path like so: C:\somefolder\anotherfolder\targetfolder</span>
<span class="comment-copy">excellent answer, also works with python 3.7 on windows 10, my windows 10 path is: "C:\Users\{usrName}\AppData\Local\Programs\Python\Python37-32\Lib"</span>
<span class="comment-copy">sys.path.append('/path/to/dir') does not permanently add the entry.</span>
<span class="comment-copy">Anyone wondering how to see path of python, use: <b>which python</b></span>
<span class="comment-copy">pretty sure you need to reload terminal too</span>
<span class="comment-copy">This is the best answer of all the solutions that I found. Please rise up.</span>
<span class="comment-copy">If I understand correctly this will export the variable for Python sessions launched via the terminal only right?</span>
<span class="comment-copy">@jxramos - yes!</span>
<span class="comment-copy">I did <code>echo PYTHONPATH</code> and nothing showed up! that means this PYTHONPATH haven't been initilised, so I just paste this line<code>export PYTHONPATH=$PYTHONPATH:&lt;PATH_TO_TF&gt;/TensorFlow/models/research/object_detection</code> in my <code>~/.bashrc</code> file and <code>source ~/.bashrc </code> it. Later, when I did ` echo $PYTHONPATH` it gave me <code>:&lt;PATH_TO_TF&gt;/TensorFlow/models/research/object_detection</code>, Any suggestion on if I have done something wrong?</span>
<span class="comment-copy"><code>export PYTHONPATH=&lt;PATH_TO_TF&gt;/TensorFlow/models/research/object_detection</code>,  when you are exporting PYTHONPATH for the first time you have to do it without the <code>${PYTHONPATH}:</code> part</span>
<span class="comment-copy">Thanks, but whenever I reboot my computer the python path is getting reset to the one I set the 1st i.e <code>:&lt;PATH_TO_TF&gt;/TensorFlow/models/research/object_detection</code> and removes the 2nd <code>export PYTHONPATH=$PYTHONPATH:/TensorFlow/models/research/slim</code>. any suggestions on that, how to fix it?</span>
<span class="comment-copy">Add to <code>.bash_profile</code> if you use login shell, otherwise use <code>.profile</code></span>
<span class="comment-copy">Thanks, also works in Windows 10</span>
