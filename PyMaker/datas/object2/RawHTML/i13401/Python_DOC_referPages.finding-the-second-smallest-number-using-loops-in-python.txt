<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/26779618/python-find-second-smallest-number">Python - Find second smallest number</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>I was wondering how to find the <strong>second smallest number</strong> from a user-input list with def functions. Also, <strong>WITHOUT</strong> using any sorting functions, imported modules, and min() and max() functions, how would I find the numbers by using just loops and relational operators?</p>
<p>Here's my following code (I only have finding the smallest number so far...):</p>
<pre><code>def second_smallest():
    smallest = second_smallest[0]
    for i in second_smallest[1:]:
        if smallest &gt; i:
            smallest = i
    return smallest
</code></pre>
<p>Examples of following tests are shown:</p>
<pre><code>print(second_smallest([5, 7, 2, 1, 3]))
2
print(second_smallest([100, 51, 31, 5, 10]))
10
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; def second_smallest(lst):
...     first = second = float("inf")
...     for num in lst:
...         if num &lt; first:
...             second, first = first, num
...         elif first &lt; num &lt; second:
...             second = num
...     return second
</code></pre>
<p>Please note that this returns <code>float('inf')</code> <em>(initial value)</em> for lists with <code>len(lst) &lt;= 1</code> as there is no second item in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>SO Isn't really for homework, but it sounds like you have had a think about this. There are two situations to consider and both require knowledge of the smallest:</p>
<ol>
<li>the second smallest is seen <strong>before</strong> the smallest is seen, in which case the second smallest will be the value that smallest held before it held its final value.</li>
<li>The second smallest is seen <strong>after</strong> the smallest is seen, in which case the second smallest will be bigger than it, but smallest won't be smaller than it OR equal to it</li>
</ol>
<p>I've expressed this in the code below. We've had to keep the existing smallest tracking and add to it.</p>
<pre><code>def second_smallest():
    smallest = float("inf")
    second_smallest = float("inf")
    for i in second_smallest:
        if smallest &gt; i:
            second_smallest = smallest
            smallest = i
        elif second_smallest &gt; i and not smallest == i:
            second_smallest = i
    return second_smallest
</code></pre>
<p>Note, technically there might not be a second smallest, if you provide a list of the same numbers. e.g. <code>[4,4,4,4]</code>. The code above will return 4, but really, it's an error case that should be considered and dealt with.</p>
<p>This is a simple approach that would break down for a question like "what is the nth smallest?" At which point you have basically created a sorting algorithm.</p>
</div>
<span class="comment-copy"><code>second_smallest</code> is both a function and a list? I guess you need to edit your code sample in the question.</span>
<span class="comment-copy">Yes. That will cause some problems for you.</span>
<span class="comment-copy">What is the expected output of <code>print(second_smallest([-1, 1, 2, 3, 0, -1]))</code>. Is it <code>-1</code> or <code>0</code>?</span>
<span class="comment-copy">For people who find this who aren't asking SO to do their homework, the correct answer is: <a href="https://docs.python.org/3/library/heapq.html#heapq.nsmallest" rel="nofollow noreferrer"><code>heapq.nsmallest(2, mylist)[1]</code></a> (Note: This will raise an <code>IndexError</code> if the list in question is less than two elements long, handling that would be dependent on desired behavior)</span>
<span class="comment-copy">You should be looping over <code>smallest[2:]</code>.</span>
<span class="comment-copy">not sure about that!</span>
<span class="comment-copy">Nevermind, your updated logic is more complex but takes care of it.</span>
<span class="comment-copy">indeed, editors, voters and commenters were fast off the mark ;)</span>
<span class="comment-copy">Also, you could scale this pretty easily by using a list to retain the n smallest elements.</span>
