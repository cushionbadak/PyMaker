<div class="post-text" itemprop="text">
<p>I can't read the word Curaçao from a text file.  What am I doing wrong?</p>
<p>I have written a text file that contains the word "Curaçao".  The encoding on the editor (vim) is latin1.</p>
<p>This python program reads the file:</p>
<pre><code>import sys

with open ('foo.txt', 'r', encoding='latin1') as f:
    print('f:', f.encoding)
    print('stdout:', sys.stdout.encoding)
    for i in f:
        print(i)
</code></pre>
<p>And when I run it I get this...</p>
<pre><code>sundev19:/home/jgalloway12/code/wdPhone $ python3 CountryFix.py
f: latin1
stdout: 646
Traceback (most recent call last):
  File "CountryFix.py", line 11, in &lt;module&gt;
    print(i)
UnicodeEncodeError: 'ascii' codec can't encode character '\xe7' in position 4: ordinal not in range(128)
</code></pre>
<p>Here is the file's contents in binary.</p>
<pre><code>0000000: 4375 7261 e761 6f0a                      Cura.ao.
</code></pre>
<p>EDIT: The "real" problem I am trying to solve here is reading an Excel 2010 exported CSV which contains country names.</p>
<p>Fixed the file to be encoded in Latin1.  Program now prints locale.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here isn't the file, but the output stream.</p>
<p>For whatever reason, python has detected your stdout encoding as US-ASCII when you really want something more (utf-8, latin1, etc.).</p>
<p>Your options are:</p>
<p>Trick it into believing a different encoding (on linux you can do this with <code>LANG=en_US.UTF-8</code>, however I assume you're on windows and I don't recall how to trick python on windows in this way :)).</p>
<p>Write your response to a file:</p>
<pre><code>with open('output.txt', 'w', encoding='latin1') as f:
    ...
</code></pre>
<p>Or write to the stdout bytestream:</p>
<pre><code>import sys
sys.stdout.buffer.write(i.encode('latin1'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you are printing the lines and python <code>print</code> function doesn't use of the encoding of <code>open()</code> function it tries to encode your string with it's default encoding which is ASCII. So you need to define a costume encoding for your unicode when you want to print it. </p>
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow"><code>str.encode()</code></a> method with a proper encocding for print.</p>
</div>
<span class="comment-copy">Open it as UTF-8</span>
<span class="comment-copy">@BobDylan UnicodeEncodeError: 'ascii' codec can't encode character '\xe7' in position 4: ordinal not in range(128)</span>
<span class="comment-copy">try <code>print(i.encode('latin1'))</code>, or even better - 'utf-8'</span>
<span class="comment-copy">There should be hundreds of cases of this error here. Have you tried searching the web for the error message?</span>
<span class="comment-copy">Note that your hexdump shows the <i>UTF-8</i> encoding of <code>Curaçao</code>. <code>binascii.hexlify(u'Curaçao'.encode('utf8'))</code> gives <code>43757261c3a7616f</code>; <code>binascii.hexlify(u'Curaçao'.encode('latin1'))</code> gives <code>43757261e7616f</code>.</span>
<span class="comment-copy">I'm on Solaris!  Putty is set for remote character set UTF-8 and echo $LANG returns <code>C</code>.</span>
<span class="comment-copy">I think in your case if you invoke as <code>LANG=en_US.latin1 python3.4</code> (if your file is actually latin1) should work</span>
<span class="comment-copy"><code>LC_ALL=en_US</code> worked for me.  Thanks!</span>
<span class="comment-copy"><code>.encode</code> won't help you with print: &gt;&gt;&gt; print('\u2603'.encode('utf-8')) b'\xe2\x98\x83'</span>
<span class="comment-copy">Based on what is that character and what is its proper encoding and what is your default encoding the result will have a lot of possibility!</span>
<span class="comment-copy">print() only accepts text in python3, you're probably thinking of the python2 behaviour</span>
<span class="comment-copy">No i mean this :<code>&gt;&gt;&gt; print('\u2603'.encode('utf-8')) b'\xe2\x98\x83' &gt;&gt;&gt; print('\u2603'.encode('utf-16')) b'\xff\xfe\x03&amp;' &gt;&gt;&gt; print('\u2603'.encode('utf-32')) b'\xff\xfe\x00\x00\x03&amp;\x00\x00' </code></span>
<span class="comment-copy">sure, but writing a python repr to a csv file is pretty useless :)</span>
