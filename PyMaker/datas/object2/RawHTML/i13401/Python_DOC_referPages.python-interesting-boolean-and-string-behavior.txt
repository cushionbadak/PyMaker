<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17794948/is-short-circuiting-in-assignment-statements-considered-good-style">Is short-circuiting in assignment statements considered good style?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I was reading through an API's documentation when I came across a curious little set of statements:</p>
<pre><code>self.use_ssl = kwargs.get('use_ssl', True)
self.scheme = self.use_ssl and 'https://' or 'http://'
</code></pre>
<p>After doing some personal testing, I found that if <code>self.use_ssl</code> was set to <code>True</code>, <code>self.scheme</code> would be set to use HTTPS, and HTTP if <code>self.use_ssl</code> was <code>False</code>. Awesomely pythonic, and I'll definitely be stealing this.</p>
<p>Can somebody explain exactly how this works? </p>
</div>
<div class="post-text" itemprop="text">
<p>In python, an empty string is equivalent to False, a non empty string is equivalent to True</p>
<pre><code>&gt;&gt;&gt; bool('')
False
&gt;&gt;&gt; bool('foo')
True
</code></pre>
<p>The behavior of a boolean expression is described <a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow">in the python 2 documentation</a>, and is the same for <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow">python 3</a>. </p>
<blockquote>
<p>The expression x and y first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.</p>
<p>The expression x or y first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.</p>
</blockquote>
<p>That's why you get the string 'https://' or 'http://' depending on the value of 'self.use_ssl'</p>
<p>Some examples, from the python console:</p>
<pre><code>&gt;&gt;&gt; True or ''
True
&gt;&gt;&gt; True or 'foo'
True
&gt;&gt;&gt; False or ''
''
&gt;&gt;&gt; False or 'foo'
'foo'
&gt;&gt;&gt; '' or True
True
&gt;&gt;&gt; '' or False
False
&gt;&gt;&gt; 'bar' or True
'bar'
&gt;&gt;&gt; 'bar' or False
'bar'
&gt;&gt;&gt; True and ''
''
&gt;&gt;&gt; True and 'foo'
'foo'
&gt;&gt;&gt; False and ''
False
&gt;&gt;&gt; False and 'foo'
False
&gt;&gt;&gt; '' and True
''
&gt;&gt;&gt; '' and False
''
&gt;&gt;&gt; 'bar' and True
True
&gt;&gt;&gt; 'bar' and False
False
</code></pre>
<p>You can always convert a boolean expression to a real boolean value using bool()</p>
<pre><code>&gt;&gt;&gt; 1 and 'bar'
'bar'
&gt;&gt;&gt; bool(1 and 'bar')
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This trick, <code>a and b or c</code>, only works when <code>b</code> itself is a "truthy" value. Consider <code>True and "" or "foo"</code>. You might expect it to produce the empty string, but it will produce <code>foo</code>, because <code>True and ""</code> results in the empty string, which is considered <code>False</code> when evaluating <code>"" or "foo"</code>. The correct way would be to wrap <code>b</code> and <code>c</code> in a list to guarantee that the second argument to <code>and</code> is truthy (and that the overall result is a list in either case), then extract the first value of that list:</p>
<pre><code>(a and [b] or [c])[0]
</code></pre>
<p>To avoid the clunkiness (and inefficiency) of creating and indexing a temporary list, Python introduced the conditional expression:</p>
<pre><code>b if a else c
</code></pre>
<p>which does not rely on <code>b</code> having any particular boolean value.</p>
</div>
<div class="post-text" itemprop="text">
<p>it works like this:</p>
<p>when python interapt this it first checks the <code>self.use_ssl</code> if it is True
it continues in the <code>AND</code> chain to see if the next statement is True.
since the next statement is a string (and not an empty one) it is True
so there is no need to continue to the or since this statement is definetly True already, so the last value is used witch was 'https'</p>
<p>if use_ssl was false then there is no need to evaluate the and part of the condition since the first part is already false so python "skip" it and continue to the <code>or</code> part to check if that is True, since it is again a non empty string it is true, and again the last value used is "returned"</p>
</div>
<span class="comment-copy">More pythonic (and readable) would be <code>'https://' if self.use_ssl else 'http://'</code> imo</span>
<span class="comment-copy">Agreed with @TimCastelijns, I read it as <code>self.use_ssl and ('https://' or 'http://')</code> at first, which makes no sense.</span>
<span class="comment-copy"><code>self.scheme = 'https://' if kwargs.get('use_ssl', True) else 'http://'</code></span>
<span class="comment-copy">@TimCastelijns that's pretty good, too! Though personally I like putting if-else statements on different lines. Besides, I really am curious as to why this works in Python, instead of setting <code>self.scheme</code> to True or something</span>
<span class="comment-copy">It's not considered pythonic anymore. Tim's suggestion isn't an <code>if</code> statement; it's Python's conditional expression, introduced specifically to avoid the use of <code>and</code>/<code>or</code> shown here.</span>
<span class="comment-copy">thats how python works, to make an easier example <code>x = 1 or 0</code> will make x=1 since it doesnt need to continue to the or part but <code>x = 1 and 0</code> will make x=0. if you think of it, it is not much diffrent that saying <code>x = True or False</code> and <code>x = True and False</code>, the same logic applies here</span>
<span class="comment-copy">I can follow, but it seems to me that <code>x = True and False</code> would result in <code>x = False</code>, since <code>True and False</code> evaluates to <code>False</code></span>
<span class="comment-copy">yea <code>x = True and False</code> will be False ,that's what will happend,(python will check the first statement and it is true, since it is an <code>and</code> it will continue to the next statement witch is False, so it will stop and return False),  <code>x = True or False</code> will be True</span>
<span class="comment-copy">Then why does it store the value that made it evaluate to False in the variable, instead of an actual <code>False</code> value?</span>
<span class="comment-copy">@TimCastelijns <code>and</code> and <code>or</code> don't produce <code>boolean</code> values. Each only considers its first operand in a boolean context in order to decide whether to produce its first or second operand as the result.</span>
