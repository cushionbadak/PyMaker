<div class="post-text" itemprop="text">
<p>In my PyQt5 program, I have tabs and use one function for creating the same tab multiple times. In PyQt, to run code when a button is clicked you need to connect it to another function. In the createATab function, I have a QLineEdit which needs to be edited when a button is clicked. Here's an example of what I am trying to do:</p>
<pre><code>class Example(QWidget, QWindow):
    def __init__(self):
        super().__init__()

        self.initUI()
    def runThisWhenButtonClicked(self):
        getText = editThisLine.text()
        editThisLine.clear() # edits variable in other function except other function is run multiple times
    def addTheTab(self, username):
        addingTab = QWidget()
        aButton = QPushButton("Stuff")
        editThisLine = QLineEdit()
        aButton.clicked.connect(self.runThisWhenButtonClicked)
        tabGrid = QGridLayout(addingTab)
        tabGrid.addWidget(editThisLine, 3, 1, 4, 2)
        tabGrid.addWidget(aButton, 3, 3, 4, 3)
        tab_widget.addTab(addingTab, str(username))    

    def initUI(self):
        global tab_widget
        tab_widget = QTabWidget()
        listwidget = QListWidget()
        listwidget.itemDoubleClicked.connect(self.addTheTab)
        splitterrr = QSplitter()
        splitterrr.addWidget(listwidget)
        splitterrr.addWidget(tab_widget)
        QListWidgetItem("Test1", listwidget)
        QListWidgetItem("Test2", listwidget)
        mainLayout = QHBoxLayout()
        mainLayout.addWidget(splitterrr)
        self.setLayout(mainLayout)
        self.setGeometry(300, 300, 300, 300)
        self.setWindowTitle('Test')
        self.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())
</code></pre>
<p><a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">How do I pass a variable by reference?</a></p>
<p>I have read through this and although it does explain a lot, it doesn't explain how to solve this issue.</p>
<p><a href="https://stackoverflow.com/questions/6160815/pyqt4-button-click-handler">pyqt4 button click handler</a></p>
<p>This explains how you are only passing the function, not calling it. So, passing variables to the runThisWhenButtonClicked function is not possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>The concept you are missing is <a href="https://en.wikipedia.org/wiki/Closure_%28computer_programming%29" rel="nofollow">closure</a>. A closure wraps up a scope with a function, so that code in the function can access variables within that associated scope. The simplest way to utilise closures when connecting signals is with a <code>lambda</code> (although some people prefer to use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow">functools.partial</a>).</p>
<p>In your example, this would mean connecting the signal like this:</p>
<pre><code>    aButton.clicked.connect(lambda: self.runThisWhenButtonClicked(editThisLine))
    ...

def runThisWhenButtonClicked(self, editThisLine):
    print(editThisLine.text())
</code></pre>
<p>However, I think this may be "papering over the cracks" in your code, and is possibly not the best solution. A better solution would be to make proper use of the namespaces that classes provide. The <code>addTheTab</code> and <code>runThisWhenButtonClicked</code> should be refactored into a <code>Tab</code> class which has all its child widgets as attributes:</p>
<pre><code>class Tab(QWidget):
    def __init__(self, parent=None):
        super(Tab, self).__init__(parent)
        self.editThisLine = QLineEdit()
        self.aButton = QPushButton("Stuff")
        self.aButton.clicked.connect(self.runThisWhenButtonClicked)
        ...

    def runThisWhenButtonClicked(self):
        print(self.editThisLine.text())
</code></pre>
<p>This would completely eliminate the need for closures in your example.</p>
</div>
<span class="comment-copy">Short version: use <code>self.editThisLine</code>. Longer version: <a href="https://www.jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/" rel="nofollow noreferrer">read up on classes, instances, and instance properties</a>.</span>
<span class="comment-copy">About the short version - returned an error: "'Example' object has no attribute 'editThisLine'. About the longer version - thanks for the link!</span>
<span class="comment-copy">You have to use <code>self.editThisLine</code> everywhere -- first to set it, and then to reference it. Instead of creating a variable that's local to one function, you're creating an instance attribute. That link should help explain what's going on.</span>
<span class="comment-copy">I added self. in front of all editThisLine,it now edits the other tab instead of the tab the button was clicked. I'll read more of the article once I get more time soon.</span>
