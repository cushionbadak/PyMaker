<div class="post-text" itemprop="text">
<p>On the <a href="https://docs.python.org/3/glossary.html" rel="nofollow">Glossary-Page</a> under the section <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow">"<em>hashable</em>"</a> of the official Python Documentation visitors can read that</p>
<blockquote>
<p>An object is hashable if it has a hash value which never changes during its lifetime ... </p>
<p><strong><em>All</em> of Python’s <em>immutable built-in objects</em> are hashable</strong>, while no mutable containers (such as lists or dictionaries) are not...</p>
</blockquote>
<p>This means that passing an object of the</p>
<ul>
<li><code>int</code>, <code>float</code>, <code>long</code>, <code>complex</code>,</li>
<li><code>str</code>,</li>
<li><code>bytes</code>,</li>
<li><code>tuple</code> or</li>
<li><code>frozenset</code></li>
</ul>
<p>class to the build-in <code>hash()</code> method <strong>must return the supposed hash-value</strong>.</p>
<p>The problem is that <strong>tuples can contain unhashable objects</strong> (such as <code>list</code>s) and therefor <strong>some tuples are not hashable</strong>:</p>
<ol>
<li><p>Create (valid) tuple consisting of hashable (<code>int</code>s and <code>string</code>) and unhashable (<code>list</code>) data types.</p>
<pre><code>&gt;&gt;&gt; tuple([1, 2, [3, "4"]])  
    (1, 2, [3, '4'])
</code></pre></li>
<li><p>Hashing this tuple fails ...</p>
<pre><code>&gt;&gt;&gt; hash((1, 2, [3, '4'])) 
    Traceback (most recent call last):
        hash((1, 2, [3, '4']))
    TypeError: unhashable type: 'list'
</code></pre></li>
<li><p>... although the object to hash is an immutable built-in type </p>
<pre><code>&gt;&gt;&gt; type((1, 2, [3, '4']))
    &lt;class 'tuple'&gt;
</code></pre></li>
</ol>
<p><em>So, why does the Python Docs state now that "<strong>all</strong> immutable built-in objects are hashable", although especially the <code>tuple</code> type <strong>can contain unhashable types</strong>?</em></p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know too much about Python's hashing, but to me it looks like you're just nitpicking the text.</p>
<blockquote>
<p>All of Python’s immutable built-in objects are hashable</p>
</blockquote>
<p>That's what they stated and that's true: you can hash a tuple such as <code>(3, 3, 2)</code> just fine, <strong>tuples are hashable</strong>.</p>
<p>However, if you put an unhashable list into a tuple, it can no longer be hashed <em>because it contains an unhashable object</em>. This doesn't mean that tuples are unhashable, but lists are, and thus the tuple which contains a list can no longer be hashed.</p>
<p>Placing non-compostable garbage into a compostable garbage bag doesn't make the bag non-compostable.</p>
</div>
<span class="comment-copy">I'm voting to close this question as off-topic because one should only ask practical, answerable questions based on actual problems that one faces. This post poses no practical question.</span>
<span class="comment-copy">even the TypeError points to the unhashable list (which is part of the tuple), it doesn't say unhashable type: 'tuple'</span>
<span class="comment-copy">Pretty sure that this is wrong (both gramatically and semantically): <code>while no mutable containers (such as lists or dictionaries) are not...</code></span>
<span class="comment-copy">Maybe the OP could consider a patch to the Python docs to say something like "All data structures consisting entirely of Python's immutable built-in objects are hashable".</span>
