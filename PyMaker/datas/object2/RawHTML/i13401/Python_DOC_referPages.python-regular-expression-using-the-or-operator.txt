<div class="post-text" itemprop="text">
<p>I am trying to parse a large sample of text files with regular expressions (RE). I am trying to extract from these files the part of the text which contains <i>'vu'</i> and ends with a newline <i>'\n'</i>. </p>
<p>Patterns differ from one file to another, so I tried to look for combinations of RE in my files using the <i>OR</i> operator. However, I did not find a way to automate my code so that the <i>re.findall()</i> function looks for a combination of RE.</p>
<p>Here is an example of how I tried to tackle this issue, but apparently I still can not evaluate both my regular expressions and the OR operator in <i>re.findall()</i>:</p>
<pre><code>import re

def series2string(myserie) :
    myserie2 = ' or '.join(serie for serie in myserie)
    return myserie2

def expression(pattern, mystring) : 
    x = re.findall(pattern, mystring)
    if len(x)&gt;0:
        return 1
    else:
        return 0

#text example
text = "\n\n    (troisième chambre)\n    i - vu la requête, enregistrée le 28 février 1997 sous le n° 97nc00465, présentée pour m. z... farinez, demeurant ... à dommartin-aux-bois (vosges), par me y..., avocat ;\n"

#expressions to look out
pattern1 = '^\s*vu.*\n'
pattern2 = '^\s*\(\w*\s*\w*\)\s*.*?vu.*\n'

pattern = [pattern1, pattern2]
pattern = series2string(pattern)

expression(pattern, text)
</code></pre>
<p><i>Note</i> : I circumvented this problem by looking for each pattern in a <i>for loop</i> but my code would run  faster if I could just use <i>re.findall()</i> once.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python regular expressions uses the <code>|</code> operator for alternation.</p>
<pre><code>def series2string(myserie) :
    myserie2 = '|'.join(serie for serie in myserie)
    myserie2 = '(' + myserie2 + ')'
    return myserie2
</code></pre>
<p>More information: <a href="https://docs.python.org/3/library/re.html" rel="nofollow">https://docs.python.org/3/library/re.html</a></p>
<hr/>
<p>The individual patterns look really messy, so I don't know what is a mistake, and what is intentional. I am guessing you are looking for the word "vu" in a few different contexts.</p>
<ol>
<li>Always use Python raw strings for regular expressions, prefixed with <code>r</code> (<code>r'pattern here'</code>). It allows you to use <code>\</code> in a pattern without python trying to interpret it as a string escape. It is passed directly to the regex engine. <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">(ref)</a></li>
<li>Use <code>\s</code> to match white-space (spaces and line-breaks).</li>
<li>Since you already have several alternative patterns, don't make <code>(</code> and <code>)</code> optional. It can result in catastrophic backtracking, which can make matching large strings really slow.<br/>
<code>\(?</code> → <code>\(</code><br/>
<code>\)?</code> → <code>\)</code></li>
<li><code>{1}</code> doesn't do anything. It just repeats the previous sub-pattern once, which is the same as not specifying anything.</li>
<li><code>\br</code> is invalid. It is interpreted as <code>\b</code> (ASCII bell-character) + the letter <code>r</code>.</li>
<li>You have a quote character (<code>'</code>) at the beginning of your text-string. Either you intend <code>^</code> to match the start of any line, or the <code>'</code> is a copy/paste error.</li>
<li><p>Some errors when combining the patterns:</p>
<pre><code>pattern = [pattern1, pattern2, pattern3, pattern4]
pattern = series2string(pattern)

expression(re.compile(pattern), text)
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Thank you for your tips. My regular expressions were a little clumsy in my first post (I changed them hoping the question would be more understandable). I managed to capture the <i>OR</i> operator '<code>|</code>' thanks to '<code>re.compile</code>' and the code works fine!</p>
<pre><code>import re

def series2string(myserie) :
    myserie2 = '|'.join(serie for serie in myserie)
    return myserie2

def expression(pattern, mystring) : 
    x = re.findall(pattern, mystring)
    if len(x)&gt;0:
        return 1
    else:
        return 0

#text example
text = "\n\n    (troisième chambre)\n    i - vu la requête, enregistrée le 28 février 1997 sous le n° 97nc00465, présentée pour m. z... farinez, demeurant ... à dommartin-aux-bois (vosges), par me y..., avocat ;\n"

#expressions to look out
pattern1 = r'^\s*vu.*\n'
pattern2 = r'^\s*\(\w*\s*\w*\)\s*.*?vu.*\n'

pattern = [pattern1, pattern2]
pattern = series2string(pattern)

expression(re.compile(pattern), text)
</code></pre>
</div>
<span class="comment-copy">Could you update your question to include the corrected code? Keep the original code there for context, otherwise this answer won't make good sense.</span>
<span class="comment-copy">What is it that you want to match? How did you get your patterns?</span>
