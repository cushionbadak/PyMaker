<div class="post-text" itemprop="text">
<p>I am writting some tests for our application and am not sure I am testing the correct thing here. This is my test.</p>
<pre><code>def test_ReservationExtensionFalseWrongResource(self):
        'does not create a reservation that is an extension if different resource'
        try:
            reservation1 = Reservation.objects.create(user=self.regularUser1, resource=self.resource1, modality=self.modality, timeFrom=datetime(2015, 6, 11, 20, tzinfo=pytz.utc), timeTo=datetime(2015, 6, 11, 21, tzinfo=pytz.utc), count=1, notes=None, extendedReservation=None)
            reservation = create_reservation(self.regularUser2, self.regularUser2, None, self.resource2, self.modality, datetime(2015, 6, 11, 20, tzinfo=pytz.utc), datetime(2015, 6, 11, 21, tzinfo=pytz.utc), 1, reservation1.uuid)
            self.assertTrue(False, "Should not create reservation")
        except Exception, e:
            self.assertTrue(True, "Not authorized")
</code></pre>
<p>I want to be sure that a reservation extension cannot be created if it is of a different resource, so this line should fail in the try block:</p>
<pre><code> reservation = create_reservation(self.regularUser2, self.regularUser2, None, self.resource2, self.modality, datetime(2015, 6, 11, 20, tzinfo=pytz.utc), datetime(2015, 6, 11, 21, tzinfo=pytz.utc), 1, reservation1.uuid)
</code></pre>
<p>Does this:</p>
<pre><code>self.assertTrue(False, "Should not create reservation")
</code></pre>
<p>Assert that the reservation creation resulted in a False value? Or am I understanding the assert matchers incorrectly. I have tried going over the documentation but I could not see any analogous example of something like this in a try catch block that was obvious to me.</p>
<p>Help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Function signature from python docs</p>
<pre><code> assertTrue(expr, msg=None)
</code></pre>
<p>Check if given <code>expr</code> is <code>True</code>. In case that <code>expr</code> is <code>False</code>, it will raise an error using the provided message (<code>msg</code>)</p>
<pre><code>self.assertTrue(True, "Not authorized") # Is always True 

self.assertTrue(False, "Should not create reservation")  # Is always False and it will throw an error saying "Should not create reservation"
</code></pre>
<p>So within your try block, if any exception is not raised, <code>self.assertTrue(False, "Should not create reservation")</code> will throw an error because <code>False</code> is not <code>True</code></p>
<p>If an exception is raised, then your code will enter into <code>Except block</code> and 
<code>self.assertTrue(True, "Not authorized")</code> will not raise any error, because True is True. </p>
<p>So, if you want to throw an exception, if any exception occurs, move <code>self.assertTrue(False, "Should not create reservation")</code> to Except block</p>
<pre><code>except Exception, e:
    self.assertTrue(False, "Should not create reservation")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Though not a direct answer to the title, this should answer your actual problem.</p>
<ol>
<li><p>You should never catch <code>Exception</code> (unless you re-reraise it after).</p>
<pre><code>except Exception, e:
</code></pre>
<p>When you handle exceptions, you must specify the exact error you want to catch. For instance, the code that calls <code>create_reservation</code> might catch a <code>ReservationError</code> exception, that you defined.</p>
<p>If you want this code to work, you must then test and make sure that <code>create_reservation</code> raises the <strong>correct</strong> error. So even in the test, you still must use the correct error.</p></li>
<li><p>If you need to test some code raises an exception, use the appropriate assertion, which is <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises" rel="nofollow">assertRaises</a>. It can be used in two ways. Either as a call:</p>
<pre><code>self.assertRaises(ReservationError, create_reservation, self.regularUser2, .........)
</code></pre>
<p>or you may use it as a context manager, using the <code>with</code> keyword (requires python 2.7 or python 3.1 or newer):</p>
<pre><code>with self.assertRaises(ReservationError):
    create_reservation(self.regularUser2, ...........)
</code></pre>
<p>Both example will run <code>create_reservation</code>, check that it raises an exception, pass if it does <strong>and</strong> it is of the correct type, fail otherwise.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I probably wouldn't set up my test like that. What you want to do is determine what exactly is the behaviour of your method and test accordingly.</p>
<p>So, if you are testing a failure case, and let us say for example, your method returns something like "reservation failed" if it fails, then you should do something like this instead:</p>
<pre><code># where msg is the response of your call
self.assertEqual(msg, "reservation failed", "assertion failed")
</code></pre>
</div>
<span class="comment-copy">@Gocht not, assertTrue does not working like that</span>
<span class="comment-copy">Oh I was thinking in AsserEqual</span>
