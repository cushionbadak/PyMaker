<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a>
<span class="question-originals-answer-count">
                    57 answers
                </span>
</li>
</ul>
</div>
<p>I have a list with letters:</p>
<pre><code>list1 = [abcdefghijk]
</code></pre>
<p>I have <code>num = 3</code> and want to break <code>list1</code> in parts of 3, i.e:</p>
<pre><code>[[abc], [def], [ghi], [jk]]
</code></pre>
<p>My code is:</p>
<pre><code>for i in range(0, len(list1), num):
    chunks = [list1[i:i+num]]
</code></pre>
<p>I get wrong output:</p>
<pre><code>chunks = ['k']
</code></pre>
<p>But I expect:</p>
<pre><code>chunks = [[abc],[def],[ghi],[jk]]
</code></pre>
<p>I have gone through all the available solutions here. But they did not help. How should I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; list2 = 'abcdefghijk'
&gt;&gt;&gt; [list2[i:i+num] for i in range(0, len(list2), num)]
['abc', 'def', 'ghi', 'jk']
</code></pre>
<h3>How it works</h3>
<p><code>i:i+num</code> is a slice: it selects starting at index <code>i</code> and continuing up to but not including index <code>i+num</code>.  For example:</p>
<pre><code>&gt;&gt;&gt; list2[6 : 6+3]
'ghi'
</code></pre>
<p>We want to perform slices every three characters.  To get the <code>i</code> values that we need, we use the <code>range</code> function:</p>
<pre><code>&gt;&gt;&gt; range(0, len(list2), num)
[0, 3, 6, 9]
</code></pre>
<p>Now, we want to slice list at each of the indices supplied by <code>range</code>.  Thus:</p>
<pre><code>&gt;&gt;&gt; [ list2[i:i+num] for i in range(0, len(list2), num) ]
['abc', 'def', 'ghi', 'jk']
</code></pre>
<p>This form is called <em>list comprehension</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all you don't need to put the string in a list since it's an iterable, and if it's so you can get it out and out the string in a variable and use python grouper function from <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>itertools-recipes</code></a> to grouping your string with chunks and then use a list comprehension to join them :</p>
<pre><code>from itertools import izip_longest
def grouper(iterable, n, fillvalue=''):
    args = [iter(iterable)] * n
    return izip_longest(*args, fillvalue=fillvalue)

[''.join(i) for i in grouper(list1,3)]
</code></pre>
<p>produces</p>
<pre><code>['abc', 'def', 'ghi', 'jk']
</code></pre>
<p><strong>Note</strong>: for python 3 use <code>zip_longest</code> instead</p>
</div>
<div class="post-text" itemprop="text">
<p>You overwrite the value stored in the variable <code>chunks</code> in every iteration of your loop. Therefore your solution is not working, this could be solved to adjust your code in the following way:</p>
<pre><code>list1 = 'abcdefghijk'
chunks = []
for i in range(0, len(list1), num):
    chunks.append( list1[i:i+num] )
</code></pre>
<p>A more pythonic way of solving your problem is the following one-liner:</p>
<pre><code>[list1[i:i+num] for i in range(0, len(list1), num)]
</code></pre>
<p>This is called <a href="https://www.google.nl/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=list%20comprehension%20python" rel="nofollow">list comprehension</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']
num = 3
chunks = []
for i in range(0,len(list1), num):
      chunks.append([list1[i:i+num]])
print chunks
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution, with no indexes and one pass only</p>
<pre><code>list1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']
num = 3
chunks = []
chunk = ''

for pos, el in enumerate(list1, 1):
    chunk += el
    if not pos % num:
        chunks.append(chunk)
        chunk = ''
chunks.append(chunk)

print chunks
</code></pre>
<p>produces</p>
<pre><code>['abc', 'def', 'ghi', 'jk']
</code></pre>
</div>
<span class="comment-copy">you should put letters in quotes, otherwise it is not a legal structure in python</span>
<span class="comment-copy">Any ideas why the downvote?</span>
<span class="comment-copy">You should probably pass the <code>fillvalue</code> when you call grouper and leave <code>fillvalue=fillvalue</code></span>
<span class="comment-copy">@PadraicCunningham Indeed thanks ;-)</span>
<span class="comment-copy">pure genius to use the very same iterator repeatedly. I have learnt something today. Thank you!</span>
<span class="comment-copy">please avoid naming lists <code>list</code>, it will shadow the built-in name. BTW, aren't your solutions present among the answers already?</span>
<span class="comment-copy">the other answers lack any explanation, but good point</span>
