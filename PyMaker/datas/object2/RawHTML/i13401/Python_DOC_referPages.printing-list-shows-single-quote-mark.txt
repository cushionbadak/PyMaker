<div class="post-text" itemprop="text">
<p>I have the following python code snippet:</p>
<pre><code>LL=[]
for i in range(3):
    LL.append("a"+str(i))
print LL
</code></pre>
<p>The output comes as:</p>
<pre><code>['a0', 'a1', 'a2']
</code></pre>
<p>How can I print as (using <code>print LL</code>):</p>
<pre><code>[a0, a1, a2]
</code></pre>
<p>i.e. without the quote mark?
If I use the following code:</p>
<pre><code>print "[",
for i in range (len(LL)-1):
    print LL[i] + ", ",
print LL[i+1]+"]"
</code></pre>
<p>This prints <code>[a0, a1, a2]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You are printing the <code>repr</code> format of the list. Use <a href="https://docs.python.org/3/library/stdtypes.html#str.join"><code>join</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.format"><code>format</code></a>  instead</p>
<pre><code>&gt;&gt;&gt; print "[{}]".format(', '.join(LL))
[a0, a1, a2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one utility function that worked for me:</p>
<pre><code>def printList(L):
    # print list of objects using string representation
    if (len(L) == 0):
        print "[]"
        return
    s = "["
    for i in range (len(L)-1):
        s += str(L[i]) + ", "
    s += str(L[i+1]) + "]"
    print s
</code></pre>
<p>This works ok for list of any object, for example, if we have a point class as below:</p>
<pre><code>class Point:
    def __init__(self, x_crd, y_crd):
        self.x = x_crd
        self.y = y_crd
    def __str__(self):
        return "(" + str(self.x) + "," + str(self.y) + ")"
</code></pre>
<p>And have a list of Point objects:</p>
<pre><code>L = []
for i in range(5):
    L.append(Point(i,i))
printList(L)
</code></pre>
<p>And the output comes as:</p>
<pre><code>[(0,0), (1,1), (2,2), (3,3), (4,4)]
</code></pre>
<p>And, it served my purpose. 
Thanks.</p>
</div>
<span class="comment-copy">By formatting the output. <code>'[{}]'.format(', '.join(LL))</code>. The <code>str()</code> conversion of containers is not meant for end-user use, it is a debugging tool, and not something that is meant to be configurable.</span>
<span class="comment-copy">Don't understand why I am downvoted, my basic intention is to have a clearer output, for example, say, I have a Point class having it's string representation shown as (2,3) and I would like oprint list of Points as: [(2,3), (4,5)], am I wrong in asking that?</span>
<span class="comment-copy">If the numbers are strings, the representation shows it for you with additional quotes, of course.</span>
<span class="comment-copy">I cannot give you better advice than already given by Bhargav Rao</span>
<span class="comment-copy">@Dr.DebasishJana From your comments, I think you may misunderstand. The <code>'</code> only appears when the list member is a string, or another class where the <code>'</code> character is expicitly included in the <code>__repr__()</code> for the class. It is not "obvious" when parantheses are used - you only get the <code>'</code> to denote string values rather than some other sort.  To use your <code>Point</code> class example - if you define <code>__repr__()</code> to not display a <code>'</code>, then it won't. This is better (less surprising) than altering the built in way that lists are displayed.  See for example <a href="http://dpaste.com/2QWH266" rel="nofollow noreferrer">dpaste.com/2QWH266</a> where I implement that.</span>
<span class="comment-copy">Is there any other way while printing the individual elements? For example, if I use as:print "[", for i in range (len(LL)-1):     print LL[i] + ", ", print LL[i+1]+"]" This prints [a0, a1, a2]</span>
<span class="comment-copy">@Dr.DebasishJana Not sure about what you are asking. But this is the preferred way. Yes, your technique also prints it as required but using string functions are evidently better and cleaner way of writing code.</span>
<span class="comment-copy">Concatenating strings in a loop is <i>very</i> inefficient in Python. Remember that Python strings are immutable, so every time you add a new string to <code>s</code> in your <code>for</code> loop a new string object is allocated, the substrings are copied to it, and the old string object that was bound to <code>s</code> is destroyed. The string <code>.join</code> method (as used in Bhargav Rao's answer) operates at C speed, which is much faster than an explicit Python loop, and it can allocate a single destination string object, since it knows how large the destination needs to be, so it bypasses all that inefficiency.</span>
<span class="comment-copy">@PM2Ring, please check this post, <a href="http://stackoverflow.com/questions/10043636/any-reason-not-to-use-to-concatenate-two-strings" title="any reason not to use to concatenate two strings">stackoverflow.com/questions/10043636/â€¦</a>, one answer says, There is nothing wrong in concatenating two strings with +. Indeed it's easier to read than ''.join(a, b).</span>
<span class="comment-copy">I agree with (most of) the information on that linked page. Concatenating two strings with <code>+</code> is perfectly ok. In fact, building a list from two strings and then calling <code>.join</code> on that list is certainly less efficient than simply using <code>+</code>. The problem is when you use <code>+</code> to build a string from several _ substrings. If the number of substrings is <i>guaranteed</i> to be small, then go ahead and use <code>+</code>. But as the number of substrings increases using <code>+</code> becomes more &amp; more inefficient. So doing it in a function with a loop of arbitrary size is a bad idea.</span>
<span class="comment-copy">Ok. I've just run some speed tests using <code>timeit</code>. It appears that some of my information is out of date: <code>s += a</code> and <code>s = s + a</code> (where <code>s</code> and <code>a</code> are strings) have been optimized in recent versions of CPython (standard Python). So <code>s += a</code> in a loop <b>is</b> <i>faster</i> than using <code>append</code> in a loop and then calling <code>.join</code> on the resulting list. However, using <code>.join</code> in a list comprehension is still faster than the <code>s += a</code> loop. And calling <code>.join</code> on an existing loop is even faster. However, see <a href="http://stackoverflow.com/a/1350289/4014959">this answer</a> by Python developer Alex Martelli.</span>
