<div class="post-text" itemprop="text">
<p>My aim is build a log parser which will copy selected lined between keywords I want and write to a file. Since I would have to search between multiple keywords in single file hence I thought of writing a function and using it multiple times in my script.</p>
<p>However I am unable to achieve this with following script and getting an error:</p>
<pre><code>import re

def myfunc (infile ,outfile, search1 , search2):

    fi =  infile.readlines()
    fo =  open(outfile, 'w')

    write1 = False
    for line in fi:
     if re.findall('search1' , str(line)):
        write1 = True
     elif re.findall('search2', str(line)):
        write1 = False
     elif write1:
        fo.write(line)

    fo.close()
    fi.close()

    return;

text_file = open(input("name of inputfile : "))
resultfile =  input("name of outputfile : ")

search1 = "teen"
search2 = "eight"
myfunc (text_file , resultfile , search1 , search2)
</code></pre>
<p>I am getting following error:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/zoro/PycharmProjects/text-parsing/write selected test 2 sets.py", line 38, in &lt;module&gt;
    myfunc (text_file , resultfile , search1 , search2)
  File "C:/Users/zoro/PycharmProjects/text-parsing/write selected test 2 sets.py", line 28, in myfunc
    fi.close()
AttributeError: 'list' object has no attribute 'close'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>fi = infile.readlines()
</code></pre>
<p>This makes <code>fi</code> a list of lines in the file <code>infile</code>. So when you later call <code>fi.close()</code>, you are trying to close a list, which of course does not work.</p>
<p>Instead, you need to close the file, i.e. <code>infile</code>:</p>
<pre><code>infile.close()
</code></pre>
<p>In general, it’s a good idea to change the variable names in a way so it’s obvious what they contain. <code>infile</code> is a file object which you read from, so that’s okay. <code>outfile</code> is a <em>file name</em> of the file you want to write to, so you should name it <code>outFileName</code> or something instead. <code>fi</code> is a list of lines in the <code>infile</code>, so you should call it maybe <code>inFileLines</code>.</p>
<p>You should also avoid having to close file objects manually; instead, use the <code>with</code> statement to make sure that they are closed automatically:</p>
<pre><code>with open(outfile, 'w') as fo:
    fo.write('stuff')
    # no need to manually close it
</code></pre>
<p>Finally, there is another issue with your code: <code>re.findall('search1' , str(line))</code> This will search for the string <code>'search1'</code> in the line; it will not respect the values that are being passed to the function and are stored in the <code>search1</code> (and <code>search2</code>) variables. So you need to remove the quotes there: <code>re.findall(search1, line)</code> (you also don’t need to convert the line to a string).</p>
<p>Also, using <code>re.findall()</code> if you only evaluate its truth-value is not really the best way. Instead, use <code>re.search</code> which only returns the first result (so for <em>really long lines</em>, you wouldn’t keep searching if you already found a result). And if <code>search1</code> and <code>search2</code> won’t contain actual regular expressions but just strings you want to find in the line, then you should also just use the <code>in</code> operator:</p>
<pre><code>if search1 in line:
    write1 = True
</code></pre>
<hr/>
<p>One final note: File handles should always be closed from the same level they are opened from. So if you open a file handle inside a function, then <em>that</em> function should also close it. If you open a file on the outside of the function, then the function should not close it. It is the opener’s responsibility to close the file, and for other instances to close files may result in wrong behavior, so you shouldn’t do it (unless it’s explicitly documented, e.g. a function <code>doSomethingAndClose</code> may close the file).</p>
<p>Using the <code>with</code> statement generally avoids this, as you never call <code>file.close()</code> manually, and the <code>with</code> statement already makes sure that the file is correctly closed.</p>
<p>If you want to consume a file multiple times, then you would have to <a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="nofollow">seek to the beginning</a> in order to be able to read from it again. In your case, since you are using <code>infile.readlines()</code> to read the whole file into memory, it’s a better idea to just read the lines <em>once</em> from the file and then reuse it for multiple function calls:</p>
<pre><code>text_file = input("name of inputfile : ")
with open(text_file) as infile:
    fi = infile.readlines() # read the lines *once*

    myfunc(fi, …)
    myfunc(fi, …)
    myfunc(fi, …)
</code></pre>
</div>
<span class="comment-copy">Poke has shown how to fix your function. You don't need to use regex for this: you can use <code>if search1 in line:</code>, which is much faster. Also, if you want to call the function multiple times &amp; save all the results to the same output file then you will need to open the file in <code>'a'</code> append mode instead of <code>'w'</code> write mode.</span>
<span class="comment-copy">Thanks a lot ....It worked well with your suggestion. However still got few queries.  1. When I had used the same script without function then "fi.close()" had worked and not gave any error.    2.  I opened the outfile as "with open(outfile, 'a') as fo:" inside function however when I called this function twice in my script with different search strings , it didn't append the results from next search. It appeared as if second time the function didn't work at all. Now when I removed the first function call from script the other function returned the desired results</span>
<span class="comment-copy">(1) That can only work if the variable names were different before. If <code>fi</code> was the result of <code>readlines()</code>, then it could not have worked. (2) This is likely because you are closing the <code>infile</code> inside of the function. So when you run the function a second time, the file is closed, so you cannot read from it. You should either open the file also inside the function, or not close it inside. File handles should always be closed by the same instance that opened them. Note that if you keep it open for multiple function calls, you need to seek to the beginning to be able to read again from it.</span>
<span class="comment-copy">Initially I didn't close the file inside function and still it didnt append the results. Now when I specified to open this file and later close within fucntion, its not working  ------------------------------------------------------    filein = open (infile , "r")    fi =  filein.readlines()    in the last of the fucntion     infile.close()</span>
<span class="comment-copy">Can you open a new question with your current code? It’s a bit difficult to follow what you are doing. Please also see the last part I added to my answer, maybe that helps further.</span>
<span class="comment-copy">Sure, will open a new question ... thanks ! :)</span>
