<div class="post-text" itemprop="text">
<p>Trying to get this to post the following 3 lines as a result.  Nothing more, nothing less.</p>
<ol>
<li><p>The product of the numbers <code>1</code> through <code>10</code> is: <code>3628800</code></p></li>
<li><p>The product of the first <code>3</code> numbers divisible by <code>3</code> is: <code>162</code></p></li>
<li><p>The product of the numbers <code>0</code> through <code>-100</code> is: <code>0</code></p></li>
</ol>
<p>Start is where the sequence starts, number is where it ends, and space is the space between the numbers (<code>1</code> is every number, <code>2</code> is even numbers only, etc).</p>
<p>I am a beginner to this, and need some assistance</p>
<p>This is what I have s far, but I'm not sure what to define findproduct as.  I was thinking something along the lines of making a loop and setting <code>n =</code> to <code>n+1</code> but I still have no idea where to take this:</p>
<pre><code>def findproduct(start, number, space):
    # code here
    pass

product1 = findproduct(1, 10, 1)
print("The product of the numbers 1 through 10 is:", product1)

product2 = findproduct (2.0, 5, 2)
print("The product of the first 5 even numbers is:", product2)

product3 = findproduct (3, 3, 3)
print("The product of the first 3 numbers divisible by 3 is:", product3)

product4 = findproduct (0.0, 100, -1)
print("The product of the numbers -1 through -100 is:", product4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>range</code> gets you the numbers you need given the <code>start</code>, <code>stop</code> and <code>step</code>. Your <code>stop</code>s appear to be inclusive (where <code>range</code> is exclusive on <code>stop</code>) so you'd need to adjust, but that's not too hard:</p>
<pre><code>def inclusive_range(start, stop, step):
    if step &lt; 0:
        stop -= 1
    else:
        stop += 1
    return range(start, stop, step)
</code></pre>
<p>That gets you the set of numbers you want the product of. You can do this the obvious way with an accumulator loop:</p>
<pre><code>def find_product(start, stop, step):
    prod = 1
    for i in inclusive_range(start, stop, step):
        prod *= i
    return prod
</code></pre>
<p>or get clever with built-ins to one-line it (ignoring imports at the top of the file):</p>
<pre><code> from functools import reduce
 from operator import mul

def find_product(start, stop, step):
    return reduce(mul, inclusive_range(start, stop, step), 1)
</code></pre>
<p>The spelled out loop has some mild advantages; you could add a test to it for <code>prod == 0</code> and break out of the loop early should that occur; if a zero appears anywhere in the input, you're not going to end up with a non-zero product anyway. Of course, in Python 3, where <code>range</code> is a more powerful object, you could pre-check for 0 in the <code>range</code> and avoid the work even more efficiently:</p>
<pre><code>def find_product(start, stop, step):
    values = inclusive_range(start, stop, step)        
    if 0 in values:
        return 0
    return reduce(mul, values, 1)
</code></pre>
</div>
<span class="comment-copy">Is this a homework?</span>
<span class="comment-copy">Look up the <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range function</a>. It will give you what you want.</span>
<span class="comment-copy">it's not a homework, I'm just trying to get comfortable with python.  We've learned how to define stuff, and I just wanna try to get something of my own to work.  one could say it's my own homework</span>
<span class="comment-copy">@solarc I have that written down in my notes, but I'm not exactly how to incorporate it into what I want</span>
