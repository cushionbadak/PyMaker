<div class="post-text" itemprop="text">
<p>I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a <code>+</code> operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:</p>
<pre><code>var long_string = 'some text not important. just garbage to' +
                  'illustrate my example';
</code></pre>
<p>I tried doing something similar in Python, but it didn't work, so I used <code>\</code> to split the long string. However, I'm not sure if this is the only/best/pythonicest way of doing it. It looks awkward. 
Actual code:</p>
<pre><code>query = 'SELECT action.descr as "action", '\
    'role.id as role_id,'\
    'role.descr as role'\
    'FROM '\
    'public.role_action_def,'\
    'public.role,'\
    'public.record_def, '\
    'public.action'\
    'WHERE role.id = role_action_def.role_id AND'\
    'record_def.id = role_action_def.def_id AND'\
    'action.id = role_action_def.action_id AND'\
    'role_action_def.account_id = ' + account_id + ' AND'\
    'record_def.account_id=' + account_id + ' AND'\
    'def_id=' + def_id
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you talking about multi-line strings? Easy, use triple quotes to start and end them.</p>
<pre><code>s = """ this is a very
        long string if I had the
        energy to type more and more ..."""
</code></pre>
<p>You can use single quotes too (3 of them of course at start and end) and treat the resulting string <code>s</code> just like any other string.</p>
<p><strong>NOTE</strong>: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines.</p>
<p>I.e.,:</p>
<pre><code>' this is a very\n        long string if I had the\n        energy to type more and more ...'
</code></pre>
<p>Finally, one can also construct long lines in Python like this:</p>
<pre><code> s = ("this is a very"
      "long string too"
      "for sure ..."
     )
</code></pre>
<p>which will <strong>not</strong> include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in):</p>
<pre><code>'this is a verylong string toofor sure ...'
</code></pre>
<p>No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want a multiline string but just have a long single line string, you can use parentheses, just make sure you don't include commas between the string segments, then it will be a tuple.</p>
<pre><code>query = ('SELECT   action.descr as "action", '
         'role.id as role_id,'
         'role.descr as role'
         ' FROM '
         'public.role_action_def,'
         'public.role,'
         'public.record_def, '
         'public.action'
         ' WHERE role.id = role_action_def.role_id AND'
         ' record_def.id = role_action_def.def_id AND'
         ' action.id = role_action_def.action_id AND'
         ' role_action_def.account_id = '+account_id+' AND'
         ' record_def.account_id='+account_id+' AND'
         ' def_id='+def_id)
</code></pre>
<p>In a SQL statement like what you're constructing, multiline strings would also be fine.  But if the extra whitespace a multiline string would contain would be a problem, then this would be a good way to achieve what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Breaking lines by <code>\</code> works for me.  Here is an example:</p>
<pre><code>longStr = "This is a very long string " \
        "that I wrote to help somebody " \
        "who had a question about " \
        "writing long strings in Python"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found myself happy with this one:</p>
<pre><code>string = """This is a
very long string,
containing commas,
that I split up
for readability""".replace('\n',' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I find that when building long strings, you are usually doing something like building an SQL query, in which case this is best:</p>
<pre><code>query = ' '.join((  # note double parens, join() takes an iterable
    "SELECT foo",
    "FROM bar",
    "WHERE baz",
))
</code></pre>
<p>What Levon suggested is good, but might be vulnerable to mistakes:</p>
<pre><code>query = (
    "SELECT foo"
    "FROM bar"
    "WHERE baz"
)

query == "SELECT fooFROM barWHERE baz"  # probably not what you want
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also concatenate variables in when using """ notation:</p>
<pre><code>foo = '1234'

long_string = """fosdl a sdlfklaskdf as
as df ajsdfj asdfa sld
a sdf alsdfl alsdfl """ +  foo + """ aks
asdkfkasdk fak"""
</code></pre>
<p>EDIT: Found a better way, with named params and .format():</p>
<pre><code>body = """
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt;Lorem ipsum.&lt;/p&gt;
    &lt;dl&gt;
        &lt;dt&gt;Asdf:&lt;/dt&gt;     &lt;dd&gt;&lt;a href="{link}"&gt;{name}&lt;/a&gt;&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;/body&gt;
&lt;/html&gt;
""".format(
    link='http://www.asdf.com',
    name='Asdf',
)

print(body)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python &gt;= 3.6 you can use <a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings" rel="noreferrer">Formatted string literals (f string)</a></p>
<pre><code>query= f'''SELECT   action.descr as "action"
    role.id as role_id,
    role.descr as role
    FROM
    public.role_action_def,
    public.role,
    public.record_def,
    public.action
    WHERE role.id = role_action_def.role_id AND
    record_def.id = role_action_def.def_id AND
    action.id = role_action_def.action_id AND
    role_action_def.account_id = {account_id} AND
    record_def.account_id = {account_id} AND
    def_id = {def_id}'''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This approach uses:</p>
<ul>
<li><s>just one backslash to avoid an initial linefeed</s></li>
<li>almost no internal punctuation by using a triple quoted string</li>
<li>strips away local indentation using the <s>textwrap</s> <code>inspect</code> module</li>
<li>uses python 3.6 formatted string interpolation ('f') for the <code>account_id</code> and <code>def_id</code> variables. </li>
</ul>
<p>This way looks the most pythonic to me.</p>
<pre><code># import textwrap  # See update to answer below
import inspect

# query = textwrap.dedent(f'''\
query = inspect.cleandoc(f'''
    SELECT action.descr as "action", 
    role.id as role_id,
    role.descr as role
    FROM 
    public.role_action_def,
    public.role,
    public.record_def, 
    public.action
    WHERE role.id = role_action_def.role_id AND
    record_def.id = role_action_def.def_id AND
    action.id = role_action_def.action_id AND
    role_action_def.account_id = {account_id} AND
    record_def.account_id={account_id} AND
    def_id={def_id}'''
)
</code></pre>
<p><strong>Update</strong>: 1/29/2019 Incorporate @ShadowRanger's suggestion to use <code>inspect.cleandoc</code> instead of <code>textwrap.dedent</code></p>
</div>
<div class="post-text" itemprop="text">
<p>For example:</p>
<pre><code>sql = ("select field1, field2, field3, field4 "
       "from table "
       "where condition1={} "
       "and condition2={}").format(1, 2)

Output: 'select field1, field2, field3, field4 from table 
         where condition1=1 and condition2=2'
</code></pre>
<p>if the value of condition should be a string, you can do like this:</p>
<pre><code>sql = ("select field1, field2, field3, field4 "
       "from table "
       "where condition1='{0}' "
       "and condition2='{1}'").format('2016-10-12', '2017-10-12')

Output: "select field1, field2, field3, field4 from table where
         condition1='2016-10-12' and condition2='2017-10-12'"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I find <a href="https://docs.python.org/2/library/textwrap.html" rel="noreferrer"><code>textwrap.dedent</code></a> the best for long strings as described <a href="https://amir.rachum.com/blog/2018/06/23/python-multiline-idioms/" rel="noreferrer">here</a>:</p>
<pre><code>def create_snippet():
    code_snippet = textwrap.dedent("""\
        int main(int argc, char* argv[]) {
            return 0;
        }
    """)
    do_something(code_snippet)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I personally find the following to be the best (simple, safe and Pythonic) way to write raw SQL queries in Python, especially when using <a href="https://docs.python.org/3/library/sqlite3.html" rel="noreferrer">Python's sqlite3 module</a>:</p>
<pre><code>query = '''
    SELECT
        action.descr as action,
        role.id as role_id,
        role.descr as role
    FROM
        public.role_action_def,
        public.role,
        public.record_def,
        public.action
    WHERE
        role.id = role_action_def.role_id
        AND record_def.id = role_action_def.def_id
        AND action.id = role_action_def.action_id
        AND role_action_def.account_id = ?
        AND record_def.account_id = ?
        AND def_id = ?
'''
vars = (account_id, account_id, def_id)   # a tuple of query variables
cursor.execute(query, vars)   # using Python's sqlite3 module
</code></pre>
<h3>Pros</h3>
<ul>
<li>Neat and simple code (Pythonic!)</li>
<li><strong>Safe from SQL injection</strong></li>
<li>Compatible with both Python 2 and Python 3 (it's Pythonic after all)</li>
<li>No string concatenation required</li>
<li>No need to ensure that the right-most character of each line is a space</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Since variables in the query are replaced by the <code>?</code> placeholder, it may become a little difficult to keep track of which <code>?</code> is to be substituted by which Python variable when there are lots of them in the query.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Your actual code shouldn't work, you are missing whitespaces at the end of "lines" (eg: <code>role.descr as roleFROM...</code>)</p>
<p>There is triplequotes for multiline string:</p>
<pre><code>string = """line
  line2
  line3"""
</code></pre>
<p>It will contain the line breaks and extra spaces, but for SQL that's not a problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>I usually use something like this:</p>
<pre><code>text = '''
    This string was typed to be a demo
    on how could we write a multi-line
    text in Python.
'''
</code></pre>
<p>If you want to remove annoying blank spaces in each line, you could do as follows:</p>
<pre><code>text = '\n'.join(line.lstrip() for line in text.splitlines())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also place the sql-statement in a seperate file <code>action.sql</code> and load it in the py file with</p>
<pre><code>with open('action.sql') as f:
   query = f.read()
</code></pre>
<p>So the sql-statements will be separated from the python code. If there are parameters in the sql statement which needs to be filled from python, you can use string formating (like %s or {field})</p>
</div>
<div class="post-text" itemprop="text">
<p>"À la" <em>Scala</em> way (but I think is the most pythonic way as OQ demands):</p>
<pre><code>description = """
            | The intention of this module is to provide a method to 
            | pass meta information in markdown_ header files for 
            | using it in jinja_ templates. 
            | 
            | Also, to provide a method to use markdown files as jinja 
            | templates. Maybe you prefer to see the code than 
            | to install it.""".replace('\n            | \n','\n').replace('            | ',' ')
</code></pre>
<p>If you want final str without jump lines, just put <code>\n</code> at the start of the first argument of the second replace:</p>
<pre><code>.replace('\n            | ',' ')`.
</code></pre>
<p>Note: the white line between "...templates." and "Also, ..." requires a whitespace after the <code>|</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use a recursive function to build complex SQL Queries. This technique can generally be used to build large strings while maintaining code readability.</p>
<pre><code># Utility function to recursively resolve SQL statements.
# CAUTION: Use this function carefully, Pass correct SQL parameters {},
# TODO: This should never happen but check for infinite loops
def resolveSQL(sql_seed, sqlparams):
    sql = sql_seed % (sqlparams)
    if sql == sql_seed:
        return ' '.join([x.strip() for x in sql.split()])
    else:
        return resolveSQL(sql, sqlparams)
</code></pre>
<p>P.S: Have a look at the awesome python-sqlparse library to pretty print SQL queries if needed.
<a href="http://sqlparse.readthedocs.org/en/latest/api/#sqlparse.format" rel="nofollow">http://sqlparse.readthedocs.org/en/latest/api/#sqlparse.format</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Another option that I think is more readable when the code (e.g variable) is indented and the output string should be a one liner (no newlines):</p>
<pre><code>def some_method():

    long_string = """
a presumptuous long string 
which looks a bit nicer 
in a text editor when
written over multiple lines
""".strip('\n').replace('\n', ' ')

    return long_string 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like this approach because it privileges reading. In cases where we have long strings there is no way! Depending on the level of indentation you are in and still limited to 80 characters per line... Well... No need to say anything else. In my view the python style guides are still very vague. I took the @Eero Aaltonen approach because it privileges reading and common sense. I understand that style guides should help us and not make our lives a mess. Thanks! </p>
<pre><code>class ClassName():
    def method_name():
        if condition_0:
            if condition_1:
                if condition_2:
                    some_variable_0 =\
"""
some_js_func_call(
    undefined, 
    {
        'some_attr_0': 'value_0', 
        'some_attr_1': 'value_1', 
        'some_attr_2': '""" + some_variable_1 + """'
    }, 
    undefined, 
    undefined, 
    true
)
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generally, I use <code>list</code> and <code>join</code> for multi-line comments/string.</p>
<pre><code>lines = list()
lines.append('SELECT action.enter code here descr as "action", ')
lines.append('role.id as role_id,')
lines.append('role.descr as role')
lines.append('FROM ')
lines.append('public.role_action_def,')
lines.append('public.role,')
lines.append('public.record_def, ')
lines.append('public.action')
query = " ".join(lines)
</code></pre>
<p>you can use any string to join all this list element like '<code>\n</code>'(newline) or '<code>,</code>'(comma) or '<code></code>'(space)</p>
<p>Cheers..!!</p>
</div>
<span class="comment-copy">Since your example looks like a SQL block just waiting for an injection attack, another suggestion is to look into a higher level SQL library like SQLAlchemy or something to steer clear of hacking together raw SQL like this.  (Perhaps off-topic, but you did ask for "Any suggestions". ;)</span>
<span class="comment-copy">This is "Pythonic way to create <b>multi-line code</b> for a long string"  To create a string <b>containing newlines</b> see <a href="http://stackoverflow.com/a/2504454/673991">textwrap.dedent</a>.</span>
<span class="comment-copy">This is a school example of <a href="https://en.wikipedia.org/wiki/XY_problem" rel="nofollow noreferrer">XY problem</a>. The OP asks: <b>"How to create a multi-line string?"</b>, but actually needs to know <b>"How to write an SQL query?"</b>. Emphasis should be put on SQL injection.</span>
<span class="comment-copy">@cezar I wrote this question more than five years ago, but I remember it arose from not knowing how to properly put the long sql query in several lines. I agree I was doing stupid things with that long string, but that was not my question and I wasn't smart enough to look for a better example to illustrate it that didn't include some sql injection concerns.</span>
<span class="comment-copy">@cezar no, this is not a XY problem, the query would be best formatted in multiple lines in any case. SQLi is unrelated to the question at hand. Big bold warnings however are totally justified :)</span>
<span class="comment-copy">For method 2 and unicode strings: you only have to mark the first string as unicode i.e. u'a'\n'b'\n'c' =&gt; u'abc'.</span>
<span class="comment-copy">I prefer to use explicitly the "+" operator for the second method. Not much an hassle and improves readability.</span>
<span class="comment-copy">@LucasMalor The adjacent strings are a compile-time concatenation.  Doesn't using the <code>+</code> operator make the concatenation happen at runtime?</span>
<span class="comment-copy">For reference, here are the official docs to this phenomenon: <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow noreferrer">docs.python.org/2/reference/…</a> (python 2) and <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow noreferrer">docs.python.org/3/reference/…</a> (python 3)</span>
<span class="comment-copy">Your example is good, but I wish it had included demonstrating how to safely and securely embed variable data into the query.   Both the OP and @jessee example code show how NOT to do it correctly (they're invitations to SQL attacks).  See also: <a href="https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html" rel="nofollow noreferrer">dev.mysql.com/doc/connector-python/en/…</a></span>
<span class="comment-copy">@Pablo you can even add comments after the <code>,</code></span>
<span class="comment-copy">Another way to format this string would be to add <code>.format(...)</code> after the closing parenthesis. <code>%</code> formating notation must work too but I haven't tried it</span>
<span class="comment-copy">Note that each line must end with a string constant, so <code>' foo '+variable</code> won't work, but <code>' foo '+variable+''</code> will.</span>
<span class="comment-copy">Oh man, you have a nasty way of building SQL queries...</span>
<span class="comment-copy">This example is an open door to SQL injection attacks. Please, no one use this on any public-facing application. See the MySQL docs for how to use 'placeholders': <a href="https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html" rel="nofollow noreferrer">dev.mysql.com/doc/connector-python/en/…</a></span>
<span class="comment-copy">Thanks. Useful for someone coming from a C background!</span>
<span class="comment-copy">I would prefer either the triple quote notation or wrapping inside () to the \  character</span>
<span class="comment-copy">I strongly advise to put the spaces at the beginning of the following lines instead of at the ending of the followed lines.  This way an accidentally missing one is way more obvious (and thus is less likely to happen).</span>
<span class="comment-copy">Great answer. Made my day it really kudos to the interpreter such nuances are build upon from the beginning.</span>
<span class="comment-copy">Disagree. What if the first line ("string = ...") is heavily indented? One would have to de-dent the following lines to zero indentation, which looks ugly in the middle of an otherwise indented block.</span>
<span class="comment-copy">Well, the majority of my lengthy strings occur at the module level, where this fits nicely. In your case though this would obviously not be the best solution.</span>
<span class="comment-copy">I like this approach because it privileges reading. In cases where we have long strings there is no way... Depending on the level of indentation you are in and still limited to 80 characters per line... Well... No need to say anything else. In my view the python style guides are still very vague. Thanks!</span>
<span class="comment-copy">+1 Relieves code-reviewer from having to assiduously check the right end of every line for <b>inadequate whitespace</b>.  The OP committed this mistake several times, as noted by @KarolyHorvath.</span>
<span class="comment-copy">When reviewing multiline strings coded in similar fashion, I require adequate whitespace on the <i>left</i> end of every line for easy confirmation.</span>
<span class="comment-copy">@BobStein-VisiBone Code reviews should not be about syntax errors or small bugs like this, they should be about substance. If somebody is putting code up for review that has syntax errors (and thus won't run either at all or in certain situations) then something is seriously wrong. It's not hard to run lint before you commit. If the person hasn't noticed their program doesn't run correctly because they made such an obvious mistake, they shouldn't be committing.</span>
<span class="comment-copy">Agreed @CharlesAddis, code reviews should come after automated methods, e.g. lint, syntax highlighting, etc. However some white-space-missing bugs may not be caught that way. Avail yourself of all reasonable advantages in guarding against bugs, I suggest.</span>
<span class="comment-copy">How would an f-string work if I wanted to log the result of a multi-line string and not have the left-side tabs/spaces shown?</span>
<span class="comment-copy">Still vulnerable to SQL injection</span>
<span class="comment-copy">Note: <a href="https://docs.python.org/3/library/inspect.html#inspect.cleandoc" rel="nofollow noreferrer"><code>inspect.cleandoc</code> is slightly nicer</a> than <code>textwrap.dedent</code>, as it doesn't require the first line to be empty with a line continuation character at the end.</span>
<span class="comment-copy">@ShadowRanger Wow I never used cleandoc before. I updated my answer and will in future use <code>inspect.cleandoc</code> for this.</span>
<span class="comment-copy">This is exactly what I was looking for, a way to combine .format() and multiple string lines.</span>
<span class="comment-copy">Note, I haven't tested this, but you can probably avoid the question mark confusion by replacing them with "{0} {1} {2}" in the relevant places and then changing the last line to <code>cursor.execute(query.format(vars))</code>. That should take care of your only "con" (I hope).</span>
<span class="comment-copy">Yes, using <code>format</code> would be nice but I'm not sure whether the query string formatted that way would be safe from SQL injection.</span>
<span class="comment-copy">Yeah, that's a fair point and it could certainly get a bit tricky. Perhaps testing it on something entirely expendable would be wise ... no doubt a Comp. Sci. undergrad will wander past soon enough.  ;)</span>
<span class="comment-copy">@Ben if you do <code>cursor.execute(query.format(vars))</code> you do not profit from prepared statements anymore so you are vulnerable to many kind of problems, starting with the fact that if the parameters are not just numbers you need to double quote them in the SQL query.</span>
<span class="comment-copy">Look into Python's <a href="https://github.com/python/cpython/blob/master/Lib/textwrap.py#L414" rel="nofollow noreferrer"><code>textwrap.dedent</code></a> function, which is in the standard library, it has the functionality you need.</span>
<span class="comment-copy">"recursive function" is not that called lambda?</span>
<span class="comment-copy">Why wouldn't you at least use an array literal?</span>
<span class="comment-copy">Arrays are represented by class list. <a href="https://stackoverflow.com/questions/1514553/how-to-declare-an-array-in-python">check out another discussion regarding the array literals</a></span>
<span class="comment-copy">I don't understand, whats your point?</span>
<span class="comment-copy">ugly and dirty  way....</span>
