<div class="post-text" itemprop="text">
<p>I have 2 lists:</p>
<pre><code>first_lst = [('-2.50', 0.49, 0.52), ('-2.00', 0.52, 0.50)]
second_lst = [('-2.50', '1.91', '2.03'), ('-2.00', '1.83', '2.08')]
</code></pre>
<p>I want to do the following math to it:</p>
<p>Multiply <code>0.49</code> by <code>1.91</code> (the corresponding values from <code>first_lst</code> and <code>second_lst</code>), and multiply <code>0.52</code> by <code>2.03</code> (corresponding values also). I want to do that under condition that values at position <code>0</code> in each corresponding tuple is idential so <code>-2.50</code> == <code>-2.50</code> etc. Obviously, we do the same math for remaning tuples as well. </p>
<p>My code:</p>
<pre><code>[((fir[0], float(fir[1])*float(sec[1]), float(fir[2])*float(sec[2])) for fir in first_lst) for sec in second_lst if fir[0] == sec[0]]
</code></pre>
<p>Generates however some object:</p>
<pre><code>[&lt;generator object &lt;genexpr&gt; at 0x0223E2B0&gt;]
</code></pre>
<p>Can you help me fix the code?  </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <code>tuple()</code> or <code>list()</code> to convert that generator expression to a <code>list</code> or <code>tuple</code>:</p>
<pre><code>[tuple((fir[0], fir[1]*sec[1], fir[2]*sec[2]) for fir in first_lst)\
                               for sec in second_lst if fir[0] == sec[0]]
</code></pre>
<p>Working version of your code:</p>
<pre><code>&gt;&gt;&gt; first_lst = [tuple(float(y) for y in x) for x in first_lst]
&gt;&gt;&gt; second_lst = [tuple(float(y) for y in x) for x in second_lst]

&gt;&gt;&gt; [((fir[0],) + tuple(x*y for x, y in zip(fir[1:], sec[1:]))) \
                  for fir in first_lst for sec in second_lst if fir[0]==sec[0]]
[(-2.5, 0.9359, 1.0555999999999999), (-2.0, 0.9516000000000001, 1.04)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Considering that your <code>first_lst</code> and <code>second_lst</code> are defined as follows.</p>
<pre><code>&gt;&gt;&gt; first_lst = [('-2.50', '0.49', '0.52'), ('-2.00', '0.52', '0.50')]
&gt;&gt;&gt; second_lst = [('-2.50', '1.91', '2.03'), ('-2.00', '1.83', '2.08')]
</code></pre>
<p>The following list comprehension may be useful.</p>
<pre><code>&gt;&gt;&gt; [tuple((float(elem[0][0]), float(elem[0][1])*float(elem[1][1]), float(elem[0][2])*float(elem[1][2]))) for elem in zip(first_lst, second_lst) if elem[0][0]==elem[1][0]]
[(-2.5, 0.9359, 1.0555999999999999), (-2.0, 0.9516000000000001, 1.04)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are 2 issues to look at.</p>
<p>The original code will generate the error:</p>
<pre><code>&gt;&gt;&gt; first_lst = [('-2.50', 0.49, 0.52), ('-2.00', 0.52, 0.50)]
&gt;&gt;&gt; second_lst = [('-2.50', '1.91', '2.03'), ('-2.00', '1.83', '2.08')]
&gt;&gt;&gt; [((fir[0], float(fir[1])*float(sec[1]), float(fir[2])*float(sec[2])) for fir in first_lst) for sec in second_lst if fir[0] == sec[0]]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;listcomp&gt;
NameError: name 'fir' is not defined
&gt;&gt;&gt;
</code></pre>
<p>and <code>&lt;generator object &lt;genexpr&gt;</code> message is mentioned.     </p>
<p>1) Let's fix the the code with minimum amount of changes by creating <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=list%20comprehension#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; first_lst = [('-2.50', 0.49, 0.52), ('-2.00', 0.52, 0.50)]
&gt;&gt;&gt; second_lst = [('-2.50', '1.91', '2.03'), ('-2.00', '1.83', '2.08')]
&gt;&gt;&gt; [(fir[0],fir[1]*float(sec[1]),fir[2]*float(sec[2])) for fir in first_lst for sec in second_lst if fir[0] == sec[0]] # list comprehension
[('-2.50', 0.9359, 1.0555999999999999), ('-2.00', 0.9516000000000001, 1.04)]
&gt;&gt;&gt;
</code></pre>
<p>2) In the original code, the bracket after <code>first_lst</code> <code>)</code> is misplaced. 
If we place that bracket after the <code>sec[0]</code> instead of list comprehension we get <a href="https://docs.python.org/3/howto/functional.html?highlight=generator%20expression#generator-expressions-and-list-comprehensions" rel="nofollow noreferrer">generator expression</a>. And that will cause the <code>&lt;generator object &lt;genexpr&gt;</code> message: </p>
<pre><code>&gt;&gt;&gt; [((fir[0],fir[1]*float(sec[1]),fir[2]*float(sec[2])) for fir in first_lst for sec in second_lst if fir[0] == sec[0])]  # generator object
[&lt;generator object &lt;genexpr&gt; at 0x00000184EEDE29E8&gt;]
</code></pre>
<p>In terms of syntax, the only difference is that one uses parenthesis instead of square brackets.</p>
<p>Note: If needed, there are two ways to convert a generator object to the list:</p>
<p>2a) Use asterisk (*) operator to unpack object to the list</p>
<pre><code>&gt;&gt;&gt; [*((fir[0],fir[1]*float(sec[1]),fir[2]*float(sec[2])) for fir in first_lst for sec in second_lst if fir[0] == sec[0])]
[('-2.50', 0.9359, 1.0555999999999999), ('-2.00', 0.9516000000000001, 1.04)]
&gt;&gt;&gt;
</code></pre>
<p>2b) Use explicitly <code>list()</code> </p>
<pre><code>&gt;&gt;&gt; list((fir[0],fir[1]*float(sec[1]),fir[2]*float(sec[2])) for fir in first_lst for sec in second_lst if fir[0] == sec[0])
[('-2.50', 0.9359, 1.0555999999999999), ('-2.00', 0.9516000000000001, 1.04)]
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Your tuples have mismatching types of <code>string</code> and <code>float</code>. Is that intentional or just an error? Your LC would fail if you have these as your tuples. Since <code>float</code> cannot be multiplied to a <code>string</code>. See my answer to fix that error.</span>
<span class="comment-copy">I had written this code before I realized I needed to convert everything to float. Will edit it now not to confuse  anyone. Thanks for pointing it out.</span>
<span class="comment-copy">Well Ashwini's answer solves the problem. Generally when you are using list comprehensions, you have to typecast/store the final result into either a list or a tuple.</span>
<span class="comment-copy">Ah so simple, thanks. I thought that simply <code>()</code> will do.</span>
<span class="comment-copy">Strangely though, this code gives a <code>fir is not defined.</code> error. Is that a problem on my side?</span>
<span class="comment-copy">@SukritKalra the names used in this LC are different from what OP posted.</span>
<span class="comment-copy">His comprehension gives the same error instead of creating a generator object.</span>
<span class="comment-copy">@SukritKalra You must be using <code>first_lst</code>  and <code>second_lst</code> as the variables names for your tuples.</span>
<span class="comment-copy">btw. why if I wanted to add <code>else</code> statement at the end would raise an error <code>invalid syntax</code>. like this: <code>if elem[0][0]==elem[1][0] else pass]</code> It's not at odds with python docs I checked it up now.</span>
<span class="comment-copy"><code>zip</code> will only work for elements on the same index, and If I am not wrong then OP is trying to multiply any two tuple whole first elements are same.</span>
<span class="comment-copy">He says each corresponding tuple, so I thought he wanted to work on those with same index.</span>
<span class="comment-copy">To answer OP's question, you can do that just put the <code>for</code> statement in the end. Like so. <code>[tuple((float(elem[0][0]), float(elem[0][1])*float(elem[1][1]), float(elem[0][2])*float(elem[1][2]))) if elem[0][0]==elem[1][0] else '' for elem in zip(first_lst, second_lst)]</code> For some reason <code>pass</code> and <code>continue</code> don't work, but you won't need them anyways, if you're trying to skip, the LC will do it anyway.</span>
