<div class="post-text" itemprop="text">
<p>I have an input file,</p>
<pre><code>10N06_64  sc635516  93.93   100.0
10N06_64  sc711028  93.99   100.0
10N06_64  sc255425  93.46   95.8
10N06_64  sc115511  87.5    93.0
116F19_238  sc121016    91.30   12.1
116F19_238  sc1132492   90.94   6.1
116F19_238  sc513573    87.38   6.1
116F19_238  sc68511 75.93   10.5
</code></pre>
<p>I need to group and iterate inside each line[0],and print the 3 lines choosing the ones that have highest values in line[3] and line[2] so that my output file looks like this:</p>
<pre><code>10N06_64  sc635516  93.93   100.0
10N06_64  sc711028  93.99   100.0
10N06_64  sc255425  93.46   95.8
116F19_238  sc121016    91.30   12.1
116F19_238  sc68511 75.93   10.5
116F19_238  sc1132492   90.94   6.1
</code></pre>
<p>This is my try, but it prints me only one best line, how to modify it to print me 3 best hits?</p>
<pre><code>import csv
from itertools import groupby
from operator import itemgetter
with open('myfile','rb') as f1:
    with open('outfile', 'wb') as f2:
        reader = csv.reader(f1, delimiter='\t')
        writer1 = csv.writer(f2, delimiter='\t')
        for group, rows in groupby(reader, itemgetter(0)):
            best = max(rows, key=lambda r: (float(r[3]), float(r[2])))
            writer1.writerow(best)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using <a href="https://stackoverflow.com/questions/4233476/sort-a-list-by-multiple-attributes">sorted method </a> to your code </p>
<p><strong>Input:</strong></p>
<pre><code>10N06_64    sc635516    93.93   100.0
10N06_64    sc711028    93.99   100.0
10N06_64    sc255425    93.46   95.8
10N06_64    sc115511    87.5    93.0
116F19_238  sc121016    91.30   12.1
116F19_238  sc1132492   90.94   6.1
116F19_238  sc513573    87.38   6.1
116F19_238  sc68511 75.93   10.5
</code></pre>
<p><strong>Code:</strong></p>
<pre><code>import csv
from itertools import groupby
from operator import itemgetter
with open('word.txt','rb') as f1:
        reader = csv.reader(f1, delimiter='\t')
        for group, rows in groupby(reader, itemgetter(0)):
            best = sorted(rows, key=lambda r: (float(r[3]), float(r[2])),reverse=True)[:3]
            for a in best:
                print a
            print "\n"
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['10N06_64', 'sc711028', '93.99', '100.0']
['10N06_64', 'sc635516', '93.93', '100.0']
['10N06_64', 'sc255425', '93.46', '95.8']


['116F19_238', 'sc121016', '91.30', '12.1']
['116F19_238', 'sc68511', '75.93', '10.5']
['116F19_238', 'sc1132492', '90.94', '6.1']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow"><code>heapq.nlargest()</code></a> to get the lines with highest values:</p>
<pre><code>#!/usr/bin/env python
import csv
import sys
from heapq import nlargest
from itertools import groupby

writerows = csv.writer(sys.stdout, delimiter='\t').writerows
for _, rows in groupby(csv.reader(sys.stdin, delimiter='\t'), key=lambda r: r[0]):
    writerows(nlargest(3, rows, key=lambda row: (float(row[3]), float(row[2]))))
</code></pre>
<p>Example:</p>
<pre><code>$ &lt;input.csv ./your-script &gt;output.csv
</code></pre>
<h3>Output</h3>
<pre><code>10N06_64    sc711028    93.99   100.0
10N06_64    sc635516    93.93   100.0
10N06_64    sc255425    93.46   95.8
116F19_238  sc121016    91.30   12.1
116F19_238  sc68511 75.93   10.5
116F19_238  sc1132492   90.94   6.1
</code></pre>
<p><code>nlargest()</code> allows to avoid loading the input groups into memory. If number of rows is always small then you could also use <code>sorted(iterable, key=key, reverse=True)[:n]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>import csv
from itertools import groupby
from operator import itemgetter

take = 3

with open('myfile','rb') as f1:
    with open('outfile', 'wb') as f2:
        reader = csv.reader(f1, delimiter='\t')
        writer1 = csv.writer(f2, delimiter='\t')
        for group, rows in groupby(reader, itemgetter(0)):
            sorted_items = sorted(rows, key=lambda r: (float(r[3]), float(r[2])), reverse=True)
            for item in sorted_items[:take]:
                writer1.writerow(item)
</code></pre>
<p>The <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow">sorted</a> function acts like the max and orders items by a key you provide to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>#you need use if to identfy the 3 best hits, for example:</p>
<pre><code>for x  in table:
    if x &gt; number1
        number1 = x
    elif x &gt; number2
        number2 = x
    elif x &gt; number3
        number3 = x
</code></pre>
<p>print number1, number2, number3</p>
</div>
<span class="comment-copy">Looks like we came to the same solution ;)</span>
<span class="comment-copy">@avenet yeah that too almost at the same time :)</span>
<span class="comment-copy">@avenet <a href="http://budapestbeacon.com/wp-content/uploads/2015/02/there-can-be-only-one.jpg" rel="nofollow noreferrer">budapestbeacon.com/wp-content/uploads/2015/02/â€¦</a></span>
<span class="comment-copy">it prints me the last 3 lines, with the lowest values...</span>
<span class="comment-copy">ok,I just added the reverse=True line there as well, thanks!</span>
