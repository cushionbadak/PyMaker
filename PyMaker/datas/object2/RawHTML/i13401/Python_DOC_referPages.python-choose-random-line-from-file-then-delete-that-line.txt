<div class="post-text" itemprop="text">
<p>I'm new to Python (in that I learned it through a CodeAcademy course) and could use some help with figuring this out.</p>
<p>I have a file, 'TestingDeleteLines.txt', that's about 300 lines of text. Right now, I'm trying to get it to print me 10 random lines from that file, then delete those lines. </p>
<p>So if my file has 10 lines:</p>
<p>Carrot</p>
<p>Banana</p>
<p>Strawberry</p>
<p>Canteloupe</p>
<p>Blueberry</p>
<p>Snacks</p>
<p>Apple</p>
<p>Raspberry</p>
<p>Papaya</p>
<p>Watermelon</p>
<p>I need it to randomly pick out from those lines, tell me it's randomly picked blueberry, carrot, watermelon, and banana, and then delete those lines.</p>
<p>The issue is, when Python reads a file, it reads that file and once it gets to the end, it won't go back and delete the lines. My current thinking was that I could write the lines to a list, then reopen the file, match the list to the text file, and if it finds a match, delete the lines. </p>
<p>My current problem is twofold:</p>
<ol>
<li>It's duplicating the random elements. If it picks a line, I need it to not pick that same line again. However, using random.sample doesn't seem to work, as I need those lines separated out when I later use each line to append to a URL.</li>
<li><p>I don't feel like my logic (write to array-&gt;find matches in text file-&gt;delete) is the most ideal logic. Is there a better way to write this?</p>
<pre><code>import webbrowser
import random

"""url= 'http://www.google.com'
webbrowser.open_new_tab(url+myline)""" Eventually, I need a base URL + my 10 random lines opening in each new tab

def ShowMeTheRandoms():
    x=1
    DeleteList= []
    lines=open('TestingDeleteLines.txt').read().splitlines()
for x in range(0,10):
    myline=random.choice(lines)
    print(myline) """debugging, remove later"""
    DeleteList.append(myline)
    x=x+1
    print DeleteList """debugging, remove later"""
ShowMeTheRandoms()
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I have a file, 'TestingDeleteLines.txt', that's about 300 lines of text. Right now, I'm trying to get it to print me 10 random lines from that file, then delete those lines.</p>
</blockquote>
<pre><code>#!/usr/bin/env python
import random

k = 10
filename = 'TestingDeleteLines.txt'
with open(filename) as file:
    lines = file.read().splitlines()

if len(lines) &gt; k:
    random_lines = random.sample(lines, k)
    print("\n".join(random_lines)) # print random lines

    with open(filename, 'w') as output_file:
        output_file.writelines(line + "\n"
                               for line in lines if line not in random_lines)
elif lines: # file is too small
    print("\n".join(lines)) # print all lines
    with open(filename, 'wb', 0): # empty the file
        pass
</code></pre>
<p>It is <code>O(n**2)</code> algorithm that <a href="https://stackoverflow.com/a/32792504/4279">can be improved</a> if necessary (you don't need it for a tiny file such as your input)</p>
</div>
<div class="post-text" itemprop="text">
<p>Point is: you dont "delete" from a file, but rewrite the whole file (or another one) with new content. The canonical way is to read the original file line by line, write back the lines you want to keep to a temporary file, then replace the old file with the new one.</p>
<pre><code>with open("/path/to/source.txt") as src, open("/path/to/temp.txt", "w") as dest:
    for line in src:
        if should_we_keep_this_line(line):
            dest.write(line)
os.rename("/path/to/temp.txt", "/path/to/source.txt")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about list.pop - it gives you the item and update the list in one step.</p>
<pre><code>lines = readlines()
deleted = []

indices_to_delete = random.sample(xrange(len(lines)), 10)

# sort to delete biggest index first 
indices_to_delete.sort(reverse=True)

for i in indices_to_delete:
    # lines.pop(i) delete item at index i and return the item
    # do you need it or its index in the original file than
    deleted.append((i, lines.pop(i)))

# write the updated *lines* back to the file or new file ?!
# and you have everything in deleted if you need it again
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To choose a random line from a file, you could use a space efficient single-pass <a href="https://stackoverflow.com/a/448019/4279">reservoir-sampling algorithm</a>. To delete that line, you could print everything except the chosen line:</p>
<pre><code>#!/usr/bin/env python3
import fileinput

with open(filename) as file:
    k = select_random_it(enumerate(file), default=[-1])[0]

if k &gt;= 0: # file is not empty
    with fileinput.FileInput(filename, inplace=True, backup='.bak') as file:
        for i, line in enumerate(file):
            if i != k: # keep line
                print(line, end='') # stdout is redirected to filename
</code></pre>
<p>where <a href="https://askubuntu.com/a/527778/3712"><code>select_random_it()</code> implements the reservoir-sampling algorithm</a>:</p>
<pre><code>import random

def select_random_it(iterator, default=None, randrange=random.randrange):
    """Return a random element from iterator.

    Return default if iterator is empty.
    iterator is exhausted.
    O(n)-time, O(1)-space algorithm.
    """
    # from https://stackoverflow.com/a/1456750/4279
    # select 1st item with probability 100% (if input is one item, return it)
    # select 2nd item with probability 50% (or 50% the selection stays the 1st)
    # select 3rd item with probability 33.(3)%
    # select nth item with probability 1/n
    selection = default
    for i, item in enumerate(iterator, start=1):
        if randrange(i) == 0: # random [0..i)
            selection = item
    return selection
</code></pre>
<hr/>
<p>To print <code>k</code> random lines from a file and delete them:</p>
<pre><code>#!/usr/bin/env python3
import random
import sys

k = 10
filename = 'TestingDeleteLines.txt'
with open(filename) as file:
    random_lines = reservoir_sample(file, k) # get k random lines

if not random_lines: # file is empty
    sys.exit() # do nothing, exit immediately

print("\n".join(map(str.strip, random_lines))) # print random lines
delete_lines(filename, random_lines) # delete them from the file
</code></pre>
<p>where <code>reservoir_sample()</code> uses the same algorithm as <code>select_random_it()</code> but allows to choose <code>k</code> items instead of one:</p>
<pre><code>import random

def reservoir_sample(iterable, k,
                     randrange=random.randrange, shuffle=random.shuffle):
    """Select *k* random elements from *iterable*.

    Use O(n) Algorithm R https://en.wikipedia.org/wiki/Reservoir_sampling

    If number of items less then *k* then return all items in random order.
    """
    it = iter(iterable)
    if not (k &gt; 0):
        raise ValueError("sample size must be positive")

    sample = list(islice(it, k)) # fill the reservoir
    shuffle(sample)
    for i, item in enumerate(it, start=k+1):
        j = randrange(i) # random [0..i)
        if j &lt; k:
            sample[j] = item # replace item with gradually decreasing probability
    return sample
</code></pre>
<p>and <code>delete_lines()</code> utility function deletes chosen random lines from the file:</p>
<pre><code>import fileinput
import os

def delete_lines(filename, lines):
    """Delete *lines* from *filename*."""
    lines = set(lines) # for amortized O(1) lookup
    with fileinput.FileInput(filename, inplace=True, backup='.bak') as file:
        for line in file:
            if line not in lines:
                print(line, end='')
    os.unlink(filename + '.bak') # remove backup if there is no exception
</code></pre>
<p><code>reservoir_sample()</code>, <code>delete_lines()</code> funciton do not load the whole file into memory and therefore they can work for arbitrary large files.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lets assume you have a list of lines from your file stored in <code>items</code></p>
<pre><code>&gt;&gt;&gt; items = ['a', 'b', 'c', 'd', 'e', 'f']
&gt;&gt;&gt; choices = random.sample(items, 2)  # select 2 items
&gt;&gt;&gt; choices  # here are the two
['b', 'c']
&gt;&gt;&gt; for i in choices:
...   items.remove(i)
...
&gt;&gt;&gt; items  # tee daa, no more b or c
['a', 'd', 'e', 'f']
</code></pre>
<p>From here you would overwrite your previous text file with the contents of <code>items</code> joining with your preferred line ending \r\n or \n. <code>readlines()</code> does not strip line endings so if you use that method, you do not need to add your own line endings.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you could try generating 10 random numbers from 0 to 300 using </p>
<pre><code>deleteLineNums = random.sample(xrange(len(lines)), 10)
</code></pre>
<p>and then delete from the lines array by making a copy with list comprehensions:</p>
<pre><code>linesCopy = [line for idx, line in enumerate(lines) if idx not in deleteLineNums]
lines[:] = linesCopy
</code></pre>
<p>And then writing lines back to 'TestingDeleteLines.txt'.</p>
<p>To see why the copy code above works, this post might be helpful:</p>
<p><a href="https://stackoverflow.com/questions/1207406/remove-items-from-a-list-while-iterating-in-python">Remove items from a list while iterating</a></p>
<p><strong>EDIT</strong>: To get the lines at the randomly generated indices, simply do:</p>
<pre><code>actualLines = []
for n in deleteLineNums:
    actualLines.append(lines[n])
</code></pre>
<p>Then actualLines contians the actual line text of the randomly generated line indices.</p>
<p><strong>EDIT:</strong> Or even better, use a list comrehension:</p>
<pre><code>actualLines = [lines[n] for n in deleteLineNums]
</code></pre>
</div>
<span class="comment-copy">The way to do this is to open the file, read in all the lines with <code>readlines()</code>, close the file, then rewrite the entire file.</span>
<span class="comment-copy">How do I tell it to just delete the random lines though?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/io.html#io.TextIOBase.seek" rel="nofollow noreferrer"><code>file_object.seek(0)</code></a> should let you start iterating from the begining again.  In your example, <code>lines</code> looks like it is a <i>file_object</i>.</span>
<span class="comment-copy">As a beginner coder, this was super easy to read and understand, so I thank you very much. :)  Now, the issue I'm having is that it's throwing a syntax error on the elif line if I put it into a function. Do you have any ideas as to why that might be?</span>
<span class="comment-copy">@SamW: my guess, you broke the code indentation (make sure you don't mix tabs and spaces for indentation, use either or, not both) but I can't be sure if you don't show the <i>exact</i> code: <a href="http://stackoverflow.com/help/mcve">create a minimal but complete code example</a> that demonstrates the issue and add it to your question (or ask a new one if you think the error might be interesting to somebody else).</span>
<span class="comment-copy">Oh my god, duh! Thank you SO much, this was insanely helpful, and I learned a lot. :) I really sincerely appreciate you taking the time to write that out.</span>
<span class="comment-copy">So instead of writing the random lines to an array, I should write all the other non-random lines to the array and create a new file?</span>
<span class="comment-copy">Why use an array (FWIW in Python it's a <code>list</code> not <code>array</code>) at all ? Read a line from the source, decide if you want to keep it, if yes write it to the temp file, lather rince repeat.</span>
<span class="comment-copy">My initial question wasn't as precise as maybe it should have been. I need it to randomly choose lines from a file, tell me what those lines say, and then delete the lines.</span>
<span class="comment-copy">@SamW The deleted lines are in the variable <code>deleted</code>, and the remaining lines are still in <code>lines</code>.  What else do you need?</span>
<span class="comment-copy">why do you need to sort indices here? (<code>line.pop(i)</code> is <code>O(n)</code> either way)</span>
<span class="comment-copy">@J.F.Sebastian just to prevent an IndexError: pop index out of range</span>
<span class="comment-copy">that makes sense. I might have been thinking about <code>for i in choices:  items.remove(i)</code> from <a href="http://stackoverflow.com/a/32788895/4279">@Josh Trii Johnston's answer</a></span>
<span class="comment-copy">"joining with your preferred line ending \r\n or \n" is wrong, because readlines list items contain newline at the end ...it would add extra blank lines</span>
<span class="comment-copy">@rebeling oversight on my part. I will edit accordingly.</span>
<span class="comment-copy">How am I connecting that to my original random lines?      'for x in range(0,10): 	    	myline=random.choice(lines) 		    print(myline)'  So say that pulls out "carrots, banana, apple". I want to now delete those exact same lines.  If I add deleteLineNums = random.sample(xrange(len(lines)), 10), that just gives me a list of numbers, but those numbers don't correspond with the random lines I pulled already. Am I misunderstanding something?</span>
<span class="comment-copy">So in this case you would be identifying random line indices to delete, not lines themselves. Note that since the lines are being selected at random in both cases, the two approaches are equivalent in identifying 10 random lines from the file. EDIT: (So you would be doing this in place of selecting the actual lines at random, and that replacement gives you logically the same result) Does that make sense?</span>
<span class="comment-copy">Ah, that does clarify things. The thing is, I need the actual text from the lines, because later I'm using the text from those lines to add to the end of a URL string. So I need to know what line is at that index, then delete it.</span>
<span class="comment-copy">Have a look at the edits I made</span>
