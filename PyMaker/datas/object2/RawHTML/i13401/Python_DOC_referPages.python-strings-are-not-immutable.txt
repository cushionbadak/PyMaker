<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20753364/why-is-the-id-of-a-python-class-not-unique-when-called-quickly">Why is the id of a Python class not unique when called quickly?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>till now I belived that Python strings are immutable but when I tried this I got confused</p>
<pre><code>&gt;&gt;&gt; a
'hello world !'
&gt;&gt;&gt; id(a)
140521043795728
&gt;&gt;&gt; a+="d"
&gt;&gt;&gt; id(a)
140521043795728
&gt;&gt;&gt; a+="d"
&gt;&gt;&gt; id(a)
140521043795728
&gt;&gt;&gt; a
'hello world !dd'
</code></pre>
<p>if I use <code>+=</code> operator, it doesn't change the object id although string has changed.  what is happening in this case?</p>
<p>now this is bit different? <a href="https://ideone.com/eg1SIN" rel="nofollow">https://ideone.com/eg1SIN</a></p>
<p>can somebody explain what is happening here?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#id" rel="noreferrer"><code>id</code></a> returns an integer value that is unique to the object you pass it. If <code>a</code> is the only reference to the string <code>'hello world !'</code>, then doing <code>a += "b"</code> may end the lifetime of the string <code>'hello world !'</code> before the string <code>'hello world !b'</code> is created, so the ID of the old string is reused (which is perfectly valid behavior).</p>
<p>Adding another reference to the string <code>'hello world !'</code> (for example, by doing <code>b = a</code> before modifying <code>a</code>) should cause the IDs to diverge.</p>
</div>
<div class="post-text" itemprop="text">
<p>The string objects themselves are immutable, however, according to the <a href="https://docs.python.org/2/library/functions.html" rel="nofollow">Python documentation</a> objects with non-overlapping lifetimes may have the same id() value.</p>
</div>
<span class="comment-copy">Try adding <code>b = a</code> before appending, leaving <code>b</code> unchanged, and printing both the id's of <code>a</code> and <code>b</code>.</span>
<span class="comment-copy">@ColonelThirtyTwo: <a href="https://ideone.com/eg1SIN" rel="nofollow noreferrer">ideone.com/eg1SIN</a>  what is with this?</span>
<span class="comment-copy">@William_Wilson: yeah i have seen but thats bit different observation.</span>
<span class="comment-copy">Python simply reused the ID, but the phenomenon of immutable strings and variables is exactly the same. I do however see the use in expanding the information found in the link I posted.</span>
<span class="comment-copy">That is the memory address, you no longer use the original <code>a</code> object so python is free to reuse the address. As Colonel commented, keep a reference to <code>a</code> and you will see different behaviour.</span>
<span class="comment-copy">So what is the logic/algo of creating/assigning <code>id</code> to python objects? how python interpreter assign/generate id? any source for this?</span>
<span class="comment-copy">The cpython interpreter simply returns the address of the object, but that's an implementation detail. The only guarentees are that for as long as an object is live, it has a unique ID that never changes.</span>
<span class="comment-copy">According to the Python documentation, two objects with non-overlapping lifetimes may have the same id() value. I corrected my answer to reflect this.</span>
<span class="comment-copy">The <i>object</i> is a memory address</span>
<span class="comment-copy">This is correct.  As the builtin help puts it: <code>id(obj, /)     Return the identity of an object.  This is guaranteed to be unique among simultaneously existing objects.     (CPython uses the object's memory address.)</code> So it's unique for as long as it exists, but memory addresses can be reallocated during a session.</span>
