<div class="post-text" itemprop="text">
<p>So, I have been making a Xs and Os game, as a side project in Python 3.4, and I have encountered an issue. Whilst, it works, it does not save the board, since I have to define the slots in the <code>def game():</code></p>
<p>If I define the slots outside of the <code>def game():</code>, even if I globalize them, it comes up with the error, <code>slot 1</code> (etc.) <code>referenced before definition</code> or whatever.
This is my code so far, and since I want a loop of turns, I have to put the game in a <code>def game():</code></p>
<pre><code>from time import sleep


gameboard = """
[1]
   [2]
      [3]
[4]
   [5]
      [6]
[7]
   [8]
      [9]
"""
print ("Welcome to Noughts and Crosses")
print ("The gameboard looks like this")
print (gameboard)


turn = (0)

def globalvar():
    global slot1
    global slot2
    global slot3
    global slot4
    global slot5
    global slot6
    global slot7
    global slot8
    global slot9
    global slotkeeper
    global slotkeeper1

globalvar()


global slotkeeper1
slotkeeper = (1)

def game():
    print ("Turn" ,turn + 1)
    xturn = input("X, please type a number where you want to place your marker")
    if xturn == ("1"):
        slot1 = """
[X]
    """
    elif xturn == ("2"):
        slot2 = """
    [X]
    """
    elif xturn == ("3"):
        slot3 = """
        [X]
    """
    elif xturn == ("4"):
        slot4 = """
[X]
"""
    elif xturn == ("5"):
        slot5 = """
    [X]
    """
    elif xturn == ("6"):
        slot6 = """
        [X]
    """
    elif xturn == ("7"):
        slot7 = """
[X]
    """
    elif xturn == ("8"):
        slot8 = """
    [X]
    """
    elif xturn == ("9"):
        slot9 = """
        [X]
    """
    oturn = input("O, please type a number where you want to place your marker")
    if oturn == ("1"):
        slot1 = """
[O]
    """
    elif oturn == ("2"):
        slot2 = """
    [O]
    """
    elif oturn == ("3"):
        slot3 = """
        [O]
    """
    elif oturn == ("4"):
        slot4 = """
[O]
    """
    elif oturn == ("5"):
        slot5 = """
    [O]
    """
    elif oturn == ("6"):
        slot6 = """
        [O]
    """
    elif oturn == ("7"):
        slot7 = """
[O]
    """
    elif oturn == ("8"):
        slot8 = """
    [O]
    """
    elif oturn == ("9"):
        slot9 = """
        [O]
    """

    while slotkeeper == (1):
        slot1 = """
[1]
"""
        slot2 = """
    [2]
"""
        slot3 = """
         [3]
"""
        slot4 = """
[4]
"""
        slot5 = """
    [5]
"""
        slot6 = """
         [6]
"""
        slot7 = """
[7]
"""
        slot8 = """
    [8]
"""
        slot9 = """
         [9]
"""
        slotkeeper = (0)

    sleep (0.6)    
    print (slot1, slot2, slot3)
    print (slot4, slot5, slot6)
    print (slot7, slot8, slot9)



def game2():
    sleep (0.6)
    slotkeeper = (0)
    game()

def gamefinal():
    game()
    game2()


gamefinal() 
</code></pre>
<p>If you run it, you'll see what my problem is, since I need to make a <code>while</code> loop, inside the main defining of <code>game()</code> that is <code>while cond1 == (1)</code>
so basically, the slots remain that way whilst a condition is true, otherwise it will not save the board between turns, and I can't define the <code>cond1</code> outside of the main <code>def game():</code> or, even the slots without the error referenced before defining, even if I globalize them. </p>
<p>If I put the main defining of the slots outside of the <code>def game():</code> </p>
<pre><code>       slot1 = """
[1]
"""
        slot2 = """
    [2]
"""
        slot3 = """
         [3]
"""
        slot4 = """
[4]
"""
        slot5 = """
    [5]
"""
        slot6 = """
         [6]
"""
        slot7 = """
[7]
"""
        slot8 = """
    [8]
"""
        slot9 = """
         [9]
"""
</code></pre>
<p>when it prints the slots, to show the current state of the gameboard, it goes to the error variable referenced before defining, like I said even if I globalize them, even without globalizing them in the <code>def globalvar():</code>, just normally, I still get this problem! If I define the slots at the start of the <code>def game():</code> It doesn't save the board (because it redefines the slots as those, obviously) and if I put the while loop on it at the start, it just stops, and stays as it is, after <code>print (gameboard)</code>, it does nothing, and apparently the program is still running, since it is, because the while loop needs to be true, or have an <code>else</code> statement after it, which doesn't work, and just breaks it! </p>
<p>EDIT: I tried using quotes around the <code>slotkeeper = ("1")</code>, inside the brackets, and changing <code>while slotkeeper == (1):</code> to <code>while slotkeeper == ("1")</code>, still no change. D:
EDITING THE EDIT: It does make a difference, but instead of getting an error message, it just gets stuck, even though I have globalized the variable, <code>slotkeeper</code> and set it to <code>("1")</code>, and in the <code>def game2():</code> I set it to <code>("0")</code>afterwards!</p>
</div>
<div class="post-text" itemprop="text">
<p>You're badly misunderstanding how Python's <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow"><code>global</code></a> statement works. You don't use it to declare a global variable. There's no need to declare anything, any assignment made at the top level of your module creates a global variable.</p>
<p>Rather, you use it in a function where you want to be able to modify a variable defined outside the function. So, move the <code>global</code> statements you currently have in your <code>globalvar</code> function (where they don't do anything useful) into your <code>game</code> function. This will let your code in <code>game</code> modify the global variables (and avoid the exceptions you're getting).</p>
<p>Note that using global variables is usually a symptom of poor design. This is especially true when you have a whole lot of them, as you do  in your program now. As a start towards a better design, I'd strongly suggest using a list or other data structure to hold your board data, rather than a bunch of separate variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>We use <code>global</code> keyword to access a global variable, not to declare it. Python is a dynamic language, declaration of variables don't make much sense anyway. </p>
<p>Secondly, why do you need so many global variables anyway. I'm sure you could figure out some other elegant way.</p>
<p>Thirdly, please don't use so many if/elif statements, use a dict instead, that would be much more pythonic -</p>
<pre><code>slot_options = {
     "1": """
     [X]
     """,
     "2": """
         [X]
     """
     ...
}

slots = {}
slots[xturn] = slot_options[xturn]
</code></pre>
<p>something on these lines.</p>
<p>Fourthly, what's with all this "Drawings" representing 'X' position.</p>
<p>I recommend, checking out code of some current implementations and then craft your own. It might give you some pointers. You can check this one out - <a href="https://gist.github.com/SudhagarS/3942029" rel="nofollow">Sample tic tac toe gist</a></p>
</div>
<span class="comment-copy">The <code>globalvar</code> function doesn't do what you probably think. It's useless, you might as well remove it.</span>
<span class="comment-copy">@CristianCiupitu  tried using it without the <code>globalvar()</code> but it still doesn't make a difference, I did say that at the end! (No offence), I tried to globalize it without and it doesn't make a difference, so I tried defining it with <code>globalvar</code>, and can't be bothered to remove it! :P</span>
<span class="comment-copy">Ick this is a scary way to try and organize this. I'd look up some other tic-tac-toe implementations in Python and mimic that!</span>
<span class="comment-copy">@AdamSmith I did... and they all print the board vertically, so I thought I would solve this, by making my own.. I'm stuck :(</span>
<span class="comment-copy">@ClownBrains strongly consider wrapping your "slots" as a 2d list named <code>boards</code>. Consult <a href="https://gist.github.com/NotTheEconomist/19503d04810e038a3d0c" rel="nofollow noreferrer">this gist</a> I threw together quickly and didn't test! :)</span>
<span class="comment-copy">THANK YOU! However, how come It could access the <code>turn</code> variable, but not the others from outside the <code>game</code> function?</span>
<span class="comment-copy">You can always <i>access</i> global variables. It's only if you also want to assign to them from within a function that you need a <code>global</code> statement. You can read more about variables and their scopes in the <a href="https://docs.python.org/2/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">Python tutorial</a>.</span>
<span class="comment-copy">THANK YOU SO MUCH! However, after running it I get a buttload of errors saying that it was defined before becoming global .... Wait.. nope.. still getting stuck :(</span>
<span class="comment-copy">Umm (Commenting on your edit) They need to be seperate, so they can be interacted with properly, when making the X and O press the numbers to choose their slot.</span>
