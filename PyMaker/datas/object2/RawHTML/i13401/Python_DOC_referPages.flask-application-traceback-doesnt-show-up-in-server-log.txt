<div class="post-text" itemprop="text">
<p>I'm running my Flask application with uWSGI and nginx.  There's a 500 error, but the traceback doesn't appear in the browser or the logs.  How do I log the traceback from Flask?</p>
<pre class="lang-none prettyprint-override"><code>uwsgi --http-socket 127.0.0.1:9000 --wsgi-file /var/webapps/magicws/service.py --module service:app --uid www-data --gid www-data --logto /var/log/magicws/magicapp.log
</code></pre>
<p>The uWSGI log only shows the 500 status code, not the traceback.  There's also nothing in the nginx log.</p>
<pre class="lang-none prettyprint-override"><code>[pid: 18343|app: 0|req: 1/1] 127.0.0.1 () {34 vars in 642 bytes} 
[Tue Sep 22 15:50:52 2015] 
GET /getinfo?color=White =&gt; generated 291 bytes in 64 msecs (HTTP/1.0 500) 
2 headers in 84 bytes (1 switches on core 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Run in development mode by setting the <code>FLASK_ENV</code> environment variable to <code>development</code>. Unhandled errors will show a stack trace in the terminal and the browser instead of a generic 500 error page.</p>
<pre><code>export FLASK_ENV=development  # use `set` on Windows
flask run
</code></pre>
<p>Prior to Flask 1.0, use <code>FLASK_DEBUG=1</code> instead.</p>
<p>If you're still using <code>app.run</code> (no longer recommended in Flask 0.11), pass <code>debug=True</code>.</p>
<pre><code>if __name__ == '__main__':
    app.run(debug=True)
</code></pre>
<hr/>
<p>In production, you don't want to run your app in debug mode. Instead you should log the errors to a file.</p>
<p>Flask uses the standard Python logging library can be configured to log errors. Insert the the following to have send Flask's log messages to a file.</p>
<pre><code>import logging
handler = logging.FileHandler('/path/to/app.log')  # errors logged to this file
handler.setLevel(logging.ERROR)  # only log errors and above
app.logger.addHandler(handler)  # attach the handler to the app's logger
</code></pre>
<p>Read more about the Python <a href="https://docs.python.org/3/library/logging.config.html" rel="nofollow noreferrer">logging</a> module. In particular you may want to change where errors are logged, or change the level to record more than just errors.</p>
<p>Flask has documentation for <a href="http://flask.pocoo.org/docs/logging/" rel="nofollow noreferrer">configuring logging</a> and <a href="http://flask.pocoo.org/docs/errorhandling/" rel="nofollow noreferrer">handling errors</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can set the <code>FLASK_DEBUG=1</code> environment variable when running the app as a service. Only do this temporarily, and note that enabling debug mode on a production server is a security issue.</p>
<p>Upstart (default in Ubuntu 14.04)</p>
<pre><code># /etc/init/uwsgiapp.conf
env FLASK_DEBUG=1
script
  // upstart exec section
end script
</code></pre>
<p>Systemd (default in Ubuntu 16.04, Arch)  </p>
<pre><code>[Service]
Environment="FLASK_DEBUG=1"
# other parts
</code></pre>
<p>Supervisord</p>
<pre><code>[program:flask]
environment=FLASK_DEBUG=1
</code></pre>
<p>Typically the logs will be somewhere in <code>/var/log/</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to check the user and group permission in your code. You can see it using "top" command. </p>
</div>
