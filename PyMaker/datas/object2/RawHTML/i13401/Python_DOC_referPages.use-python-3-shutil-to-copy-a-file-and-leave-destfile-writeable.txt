<div class="post-text" itemprop="text">
<p>Is there a way to use Python 3 <a href="https://docs.python.org/3/library/shutil.html" rel="nofollow" title="shutil">shutil</a> to copy a read-only file so that the destination file does NOT receive the source file's read-only mode?</p>
<p>I'm successfully using <em>shutil</em> to create a working copy of a file:</p>
<pre><code>import os, stat

inputfile = 'inputfile.json'    # A read-only file
outputfile = 'outputfile.json'  # A file I want to keep writeable
os.chmod(outputfile, stat.S_IWRITE)    # If outputfile exists, ensure it's writeable
shutil.copy(inputfile, outputfile)  # Rats! -- shutil included read-only attributes in copy operation
</code></pre>
<p>But <em>shutil</em> has also copied the input file's read-only attribute along with the file contents. I don't want that.</p>
<p>Obviously I can repeat the <em>os.chmod</em> command after the copy operation. And I know how to create a writeable copy without using <em>shutil</em>. But is it possible to use <em>shutil</em> to copy a file's contents without also copying its attributes(?)</p>
</div>
<div class="post-text" itemprop="text">
<p>Open the files however you like and use <a href="https://docs.python.org/2/library/shutil.html#shutil.copyfileobj" rel="nofollow"><code>shutil.copyfileobj()</code></a> to copy just the file contents from one to the other.</p>
</div>
<div class="post-text" itemprop="text">
<p>On my linux box with python 2.7 &amp; python3 <code>shutil.copyfile(inputfile, outputfile)</code> seems to work as well.</p>
</div>
<span class="comment-copy">The two answers given immediately below by Ignacio Vazquez-Abrams and Rolf of Saxony both work: Both shutil.copyfileobj() and shutil.copyfile() seem to be copying the file contents while leaving the destination file writeable. Not sure what I was doing wrong earlier that made me conclude they were making my destination file read-only...</span>
