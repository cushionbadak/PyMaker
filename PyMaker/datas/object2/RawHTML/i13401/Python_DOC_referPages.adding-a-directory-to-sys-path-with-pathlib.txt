<div class="post-text" itemprop="text">
<p>I'm trying to add a directory to PATH wit code like this:</p>
<pre><code>PROJECT_DIR = Path(__file__).parents[2]
sys.path.append(
    PROJECT_DIR / 'apps'
)
</code></pre>
<p>It doesn't work. If I do print <code>sys.path</code> I see something like this:</p>
<pre><code>[..., PosixPath('/opt/project/apps')]
</code></pre>
<p>How should I fix this code? Is it normal to write <code>str(PROJECT_DIR / 'apps')</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>you need to append the path as a string to <code>sys.path</code>:</p>
<pre><code>PROJECT_DIR = Path(__file__).parents[2]
sys.path.append(
    str(PROJECT_DIR / 'apps')
)
</code></pre>
<p><code>PROJECT_DIR</code> is instance of <code>PosixPath</code> which has all the goodies like <code>/</code> and <code>parents</code> etc. but you need to convert it to a regular string if you want to use is somewhere a string is expected - like <code>sys.path</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>project_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)),"..","..")
sys.path.append(os.path.join(project_dir,"apps"))
#or maybe you need it at the start of the path
sys.path.insert(0,os.path.join(project_dir,"apps"))
</code></pre>
<p>why are you using this weird pathlib library instead of pythons perfectly good path utils?</p>
</div>
<span class="comment-copy">why would you want to avoid using <code>str</code>?</span>
<span class="comment-copy">I don't want to avoid this. I just ask what the proper way to use pathlib.</span>
<span class="comment-copy">re. you second question (since it's not covered in answers): yes, it's normal. Documentation mentions <code>str</code>: <a href="https://docs.python.org/3/library/pathlib.html#operators" rel="nofollow noreferrer">The string representation of a path is the raw filesystem path itself (in native form, e.g. with backslashes under Windows), which you can pass to any function taking a file path as a string.</a></span>
<span class="comment-copy">You may want to <code>resolve()</code> the Path before adding it to sys.path.  That makes it absolute -- <b>file</b> isnt't always absolute.</span>
<span class="comment-copy">@florisla as this is done at runtime there is no need for that (as long as you do not move the modules before they are imported).</span>
<span class="comment-copy">may be a matter of taste - pathlib is pretty nice!</span>
<span class="comment-copy">This does not answer the question.</span>
<span class="comment-copy">I guess you miss this part <code>.parents[2]</code> in your answer</span>
<span class="comment-copy">@Joran Beasley: by all means leave the answer! <code>os.path</code> is a perfectly fine library indeed! and for python &lt;3 none of the <code>pathlib</code> stuff will work.</span>
<span class="comment-copy">python love! (and: pathlib is builtin in python &gt;3 and evidently backported to python 2.* [as mentioned by  kharandziuk]).</span>
