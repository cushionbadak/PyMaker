<div class="post-text" itemprop="text">
<p>I created a function to modify a global variable, which adds 1 each time. Then I create 10 threads to call this function; each thread will call the function 10 times. However, the variable's final value is not the same as if I call function 100 times in one thread. Is anything wrong with how I use <code>threading.lock</code>? Below is my code:</p>
<pre><code>num=0
lockOne=threading.Lock()
def subPro():
    global num
    lockOne.acquire()
    num+=1
    lockOne.release()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are probably not waiting for threads to complete. You have to use <a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow">Thread.join</a>:</p>
<pre><code>import threading

num=0
lockOne=threading.Lock()
def subPro():
    global num
    lockOne.acquire()
    num+=1
    lockOne.release()

def run():
    for i in range(10):
        subPro()

# Start all threads
threads = [threading.Thread(target=run) for x in range(10)]
for thread in threads:
    thread.start()
# Wait for completion
for thread in threads:
    thread.join()
print(num)
</code></pre>
</div>
<span class="comment-copy">Why not post some minimal code which is complete enough to run as-posted and which shows the problem?</span>
