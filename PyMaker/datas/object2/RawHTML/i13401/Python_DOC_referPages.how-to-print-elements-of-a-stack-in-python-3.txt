<div class="post-text" itemprop="text">
<p>I have to print elements in a stack using classes and all:</p>
<pre><code>class Stack:

    def __init__(self):
        self.stack = []

    def push(self,element):
        self.stack.append(element)

    def pop(self):
        return self.stack.pop()

def st(n):

    s = Stack()
    for i in range(n,0,-1):
        s.push(i)

    #this is updated version now I want to print outside of the loop and 
    #it gives me this error : __main__.Stack instance at 0x7fe40d261710&gt; 
    print s
if __name__ == '__main__':

   st(4)
</code></pre>
<p>for some reason instead of printing [4,3,2,1]
it print None</p>
</div>
<div class="post-text" itemprop="text">
<p>Your class does not define <code>__str__</code> or <code>__repr__</code> method, so <code>print</code> uses the default representation.  If you want instances of <code>Stack</code> to be printed as lists, add the following definition to your class:</p>
<pre><code>def __str__(self):
    return str(self.stack)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Stask class using built-ins</h2>
<p>Using lists as stack <a href="https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks</a></p>
<blockquote>
<p>The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”). To add an item to the top of the stack, use append(). To retrieve an item from the top of the stack, use pop() without an explicit index</p>
</blockquote>
<p>If you have to provide custom interface for adding elements in stack you can add single method like this:</p>
<pre><code>class Stack(list):
    def push(self, *args, **kwargs):
        self.append(*args, **kwargs)
</code></pre>
<h2>Printing objects</h2>
<p><strong>How <code>print</code> function behave?</strong></p>
<p>Lets look at documentation about <code>print</code> function <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#print</a></p>
<blockquote>
<p>All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end.</p>
</blockquote>
<p><strong>What <code>str()</code> function really does?</strong></p>
<blockquote>
<p>If neither encoding nor errors is given, str(object) returns <code>object.__str__()</code>, which is the <strong>“informal”</strong> or nicely printable string representation of object. For string objects, this is the string itself. If object does not have a <code>__str__()</code> method, then str() falls back to returning <code>repr(object)</code>.</p>
</blockquote>
<p>This means that you <code>Stack</code> have to support <code>__str__()</code> method, and if it has no such <code>__repr__()</code> will be used. </p>
<p>Look at <code>repr(object)</code> docs if you didn't believe my words <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#repr</a></p>
<blockquote>
<p>A class can control what this function returns for its instances by defining a <strong>repr</strong>() method.</p>
</blockquote>
<p>Also read this answers, which describe my thoughts in different manner:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python#answer-1436756">Difference between __str__ and __repr__ in Python</a> will explain practical use cases</li>
<li><a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python#answer-2626364">Difference between __str__ and __repr__ in Python</a> will explain meaning of each method</li>
</ul>
<h2>Summary</h2>
<pre><code>class Stack(list):
    """
    Implaments stack interface to access data by inheriting buil-in list
    object.

    Note: all parent methods will be accessable in stack instance.
    """
    def push(self, *args, **kwargs):
        """
        Delegate behaviour to parrent class.
        """
        self.append(*args, **kwargs)

    def __str__(self):
        """
        Because of using list as parent class for stack, our last element will
        be first for stack, according to FIFO principle. So, if we will use
        parent's implementation of str(), we will get reversed order of
        elements.
        """
        #: You can reverse elements and use supper `__str__` method, or 
        #: implement it's behavior by yourself.
        #: I choose to add 'stack' in the begging in order to differ list and
        #: stack instances.
        return 'stack [{}]'.format(', '.join(reversed(self)))


def example_of_usage():
    #: Here we just using parent's list initialization functionality to init
    #: stack from iterable (in our case - list).
    s = Stack(['last', 'first'])
    #: output&gt; stack ['fist', 'last']
    print(s)
    s.push('very first')
    #: output&gt; stack ['very first', 'fist', 'last']
    print(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print s.push(i)
</code></pre>
<p>See the line, <code>s.push()</code> append the value and  returns <code>None</code>. So you end up printing <code>None</code></p>
<p>Your <code>pop()</code> works, because unlike <code>append()</code>, it returns a value.</p>
<p>So, change the function definition like that:</p>
<pre><code>def push(self,element):
    self.stack.append(element)
    return self.stack 
</code></pre>
</div>
<span class="comment-copy">You should try to format your code properly and explain what you are trying to achieve and what you have tried, etc... Please refer to:<a href="http://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a></span>
<span class="comment-copy">since your push method returns None you see it print None ...</span>
<span class="comment-copy">@pokolo, code segment in comment is unreadable. It's better to update your question.</span>
