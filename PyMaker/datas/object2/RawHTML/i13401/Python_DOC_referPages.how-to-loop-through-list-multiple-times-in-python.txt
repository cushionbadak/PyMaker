<div class="post-text" itemprop="text">
<p>Can you loop through list (using range that has a step in it) over and over again until all the elements in the list are accessed by the loop?</p>
<p>I have the following lists:</p>
<pre><code>result = []
list = ['ba', 'cb', 'dc', 'ed', 'gf', 'jh']
</code></pre>
<p>i want the outcome (result) to be:</p>
<pre><code>result = ['dc', 'cb', 'ba', 'jh', 'gf', 'ed']
</code></pre>
<p>How do i make it loop through the first list, and appending each element to result list, starting from the third element and using 5 as a step, until all the elements are in the results list?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the step and the length of the list are coprime, you can do:</p>
<pre><code>result = []
list = ['ba', 'cb', 'dc', 'ed', 'gf', 'jh']
start = 2
step = 5
end = start + step*len(list)
for i in range(start, end, step):
    result.append(list[i%len(list)])
print result
</code></pre>
<p>Result:</p>
<pre><code>['dc', 'cb', 'ba', 'jh', 'gf', 'ed']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no need to loop through a list multiple times.As a more pythonic way You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>islice</code></a> :</p>
<pre><code>&gt;&gt;&gt; from itertools import cycle,islice
&gt;&gt;&gt; li= ['ba', 'cb', 'dc', 'ed', 'gf', 'jh']
&gt;&gt;&gt; sl=islice(cycle(li),2,None,4)
&gt;&gt;&gt; [next(sl) for _ in range(len(li))]
['dc', 'ba', 'gf', 'dc', 'ba', 'gf']
</code></pre>
<p>Note that in your expected output the step is 5 not 4.So if you use 5 as slice step you'll get your expected output :</p>
<pre><code>&gt;&gt;&gt; sl=islice(cycle(li),2,None,5)
&gt;&gt;&gt; [next(sl) for _ in range(len(li))]
['dc', 'cb', 'ba', 'jh', 'gf', 'ed']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A very simple solution was posted earlier, not sure why it was removed:</p>
<pre><code>&gt;&gt;&gt; a = ['ba', 'cb', 'dc', 'ed', 'gf', 'jh']
&gt;&gt;&gt; result = [a[n] for n in range(2, -4, -1)]
&gt;&gt;&gt; result
['dc', 'cb', 'ba', 'jh', 'gf', 'ed']
</code></pre>
</div>
<span class="comment-copy">why the output contains <code>'hj'</code> but not <code>'jh'</code>?</span>
<span class="comment-copy">I'm not quite sure of the algorithm you're after. You want to treat the list as circular? Starting at index 2 (the 'dc') and a step of 5 rather than 4, by the results. Do you want to not add duplicates and keep cycling around until you hit the unique ones?</span>
<span class="comment-copy">It's a bit unclear what you try to do; how does the result you show use a step of 4? Also, what have you tried? In the general case, using modulo indexing and item removal would let you consume any list with any step, but this is a very unusual thing to do. Without removal you need a second strategy to access all elements when the step is not relatively prime with the list length.</span>
<span class="comment-copy">your example uses 5 as an increment. and it works because 5 and 6 are prime with each other</span>
<span class="comment-copy">I must commend you on the one answer so far that does iterate through the list multitple times, as in the question's title. It still has the coprime requirement though, as the example output shows by not producing all elements.</span>
<span class="comment-copy">@YannVernier There is no need to loop through a list multiple times when you can use another pythonic way.</span>
<span class="comment-copy">I agree, but the question looks like an exercise in doing odd things, not efficient or obvious ones.</span>
