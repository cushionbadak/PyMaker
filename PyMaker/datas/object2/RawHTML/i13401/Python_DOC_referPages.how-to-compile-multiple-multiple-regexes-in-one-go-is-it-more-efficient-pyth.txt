<div class="post-text" itemprop="text">
<p>Let's say I have a code as such:</p>
<pre><code>import re
docid_re = re.compile(r'&lt;DOCID&gt;([^&gt;]+)&lt;/DOCID&gt;')
doctype_re = re.compile(r'&lt;DOCTYPE SOURCE="[^"]+"&gt;([^&gt;]+)&lt;/DOCTYPE&gt;')
datetime_re = re.compile(r'&lt;DATETIME&gt;([^&gt;]+)&lt;/DATETIME&gt;')
</code></pre>
<p>I could also do this:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; docid_re = r'&lt;DOCID&gt;([^&gt;]+)&lt;/DOCID&gt;'
&gt;&gt;&gt; doctype_re = r'&lt;DOCTYPE SOURCE="[^"]+"&gt;([^&gt;]+)&lt;/DOCTYPE&gt;'
&gt;&gt;&gt; datetime_re = r'&lt;DATETIME&gt;([^&gt;]+)&lt;/DATETIME&gt;'
&gt;&gt;&gt; docid_re, doctype_re, datetime_re = map(re.compile, [docid_re, doctype_re, datetime_re])
&gt;&gt;&gt; docid_re
&lt;_sre.SRE_Pattern object at 0x7f0314eee438&gt;
</code></pre>
<p><strong>But is there any real gain in speed or memory when I use the <code>map()</code>?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Do not listen anybody - just measure it! You can use <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow">timeit</a> module for it. But remember, that "<a href="http://c2.com/cgi/wiki?PrematureOptimization" rel="nofollow">premature optimization is the root of all evil</a>" (c) Donald Knuth.</p>
<p>Btw, answer on your question "No, it doesn't help at all".</p>
</div>
<div class="post-text" itemprop="text">
<p>If you were compiling a <em>lot</em> of regexes, <code>map</code> might help by avoiding lookup costs involved in finding <code>re</code>, then getting its <code>compile</code> attribute each call; with <code>map</code>, you look up <code>map</code> once and <code>re.compile</code> once, and then it gets used over and over without further lookups. Of course, when you need to construct a <code>list</code> to use it, you eat into that savings. Practically speaking, you'd need an awful lot of regexes to reach the point where <code>map</code> would be worth your while; for three, it's probably a loss.</p>
<p>Even when it did help, it would be the tiniest of microoptimizations. I would do it if it made the code cleaner, performance is a tertiary concern here at best. There are cases (say, parsing a huge text file of integers into <code>int</code>s) where <code>map</code> can be a big win because the overhead of starting it up is compensated for by the reduced lookup and Python byte code execution overhead. But this is not one of those cases, and those cases are so rare as to not be worth worrying about 99.99% of the time.</p>
</div>
<span class="comment-copy">Are you parsing xml with regex?</span>
<span class="comment-copy">It sure seems that way.</span>
<span class="comment-copy">Have you tried measuring it?</span>
<span class="comment-copy">Actually, the <code>timeit</code> module is going to deceive you in this case. <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.compile</code> caches the compiled forms of the regexes it compiles</a>, so you might see perf improvements as a substantial benefit relative to total cost, when in fact, in real code where the compiled regex won't already be in the cache, and the savings are microscopic compared the the expense of compilation in the first place. You'd need to explicitly <code>re.purge()</code> the cache on every loop (but of course, that adds a different sort of confounding overhead).</span>
<span class="comment-copy">@alvas, automatically - ShadowRanger already put a <a href="https://docs.python.org/2/library/re.html#re.compile" rel="nofollow noreferrer">link</a> to official documentation about it. You can read it in <code>Note</code> part.</span>
<span class="comment-copy">The main difference between explicit compiles and implicit compiles is that the explicit compile means you get a <code>regex</code> object back that can be used directly; if the object is local or on a class instance, it's cheaper to look up than <code>re</code> imported into the global namespace (thanks to <a href="https://blog.mozilla.org/webdev/2011/01/31/python-scoping-understanding-legb/" rel="nofollow noreferrer"><code>LEGB</code></a> search). When you use the module level functions, it still has to look up the pattern in the cache to find the <code>regex</code>, the <code>regex</code> may have aged out if you used a bunch of other <code>regex</code>, etc. Explicit <code>compile</code> avoids that.</span>
<span class="comment-copy">Frankly, my favorite thing about compiling a regex is that it lets you use many <code>regex</code> methods with one argument, which means it can be easily used w/functional methods like <code>map</code>, <code>filter</code> (and similar methods on <code>multiprocessing.Pool</code>); <code>map</code> and <code>filter</code> are normally slower than an equivalent list comprehension (Py2) or generator expression (Py3), but for largish iterables, when the mapping function/filter predicate is implemented in <code>C</code> (<code>regex</code> methods mostly are), <code>map</code> and <code>filter</code> are faster as they avoid lookup costs and push all execution to the C layer (in CPython only of course).</span>
<span class="comment-copy">@Jimilian: For the record, I do agree that premature optimization is the root of all evil. The only reason I'm geeking out is that this is one of those cases where I have previously used <code>timeit</code> (via <code>ipython</code>'s <code>%timeit</code> magic) to investigate the performance of stuff like this, so I have enough experience to say "Yes, it can go faster, but no, the speedup will never be meaningful".</span>
