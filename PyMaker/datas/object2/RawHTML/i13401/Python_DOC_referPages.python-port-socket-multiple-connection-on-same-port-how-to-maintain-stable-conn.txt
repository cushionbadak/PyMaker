<div class="post-text" itemprop="text">
<p><strong>Logic:</strong></p>
<p><strong>Client &lt;-----connection-----&gt;  Server Port Listening Script in Python ( e.g. TCP port 11112)</strong></p>
<ul>
<li>Every Client Device (e.g. GPS device) connected to server port and establish successful connection.</li>
<li>Once connected, we need to keep the connection active and stable for that particular device.</li>
<li>In Parallel we need to accept connection from other devices in same port. </li>
<li>We achieved this using Multi Threading concept in python. One thread will have a dedicated connection with one device. </li>
<li>Once there is no data for certain time, Thread will be closed.</li>
</ul>
<p>This logic is working fine as of now for 20 parallel connected devices.</p>
<p>We are expecting that we will be in connection with 1 million devices soon. <strong>What are the best solutions possible in python to handle this huge number of active connection between device and Server ?</strong></p>
<p><strong>Note</strong>: We can set up multiple ports and make sure load shared between ports but the active connection limit ( Alternate for Threading)  must be our focus.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is usually referred as the <a href="https://en.wikipedia.org/wiki/C10k_problem" rel="nofollow">c10K problem</a>. In general, threads or processes introduce too big overhead in order to handle such number of connections.</p>
<p>The available solutions are too many to list, from switching to a more concurrent friendly language such as Go or Erlang to adopt specific Python frameworks focused on solving this issue.</p>
<p>For Python you can take a look at the following libraries:</p>
<p><a href="https://twistedmatrix.com/trac/" rel="nofollow">https://twistedmatrix.com/trac/</a></p>
<p><a href="http://www.gevent.org/" rel="nofollow">http://www.gevent.org/</a></p>
<p><a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">https://docs.python.org/3/library/asyncio.html</a></p>
</div>
<span class="comment-copy">you should absolutely use <code>asyncio</code> or similar framework.</span>
<span class="comment-copy">Even TCP has too much state per connection memory overhead when you get to that number of connections. <a href="http://www.cs.cornell.edu/~ashieh/trickles/" rel="nofollow noreferrer">Trickles</a> was proposed as a solution for that as it is stateless for the server.</span>
