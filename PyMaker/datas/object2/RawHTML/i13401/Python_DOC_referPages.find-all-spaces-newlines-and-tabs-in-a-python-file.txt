<div class="post-text" itemprop="text">
<pre><code>def count_spaces(filename): 
    input_file = open(filename,'r') 
    file_contents = input_file.read() 
    space = 0 
    tabs = 0 
    newline = 0 
    for line in file_contents == " ": 
        space +=1 
        return space
    for line in file_contents == '\t': 
        tabs += 1 
        return tabs 
    for line in file_contents == '\n': 
        newline += 1
        return newline 
    input_file.close()
</code></pre>
<p>I'm trying to write a function which takes a filename as a parameter and returns the total number of all spaces, newlines and also tab characters in the file. I want to try use a basic for loop and if statement but I'm struggling at the moment :/ any help would be great thanks. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>C=Counter(open(afile).read())
C[' ']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your current code doesn't work because you're combining loop syntax (<code>for x in y</code>) with a conditional  test (<code>x == y</code>) in a single muddled statement. You need to separate those.</p>
<p>You also need to use just a single <code>return</code> statement, as otherwise the first one you reach will stop the function from running and the other values will never be returned.</p>
<p>Try:</p>
<pre><code>for character in file_contents:
    if character == " ":
        space +=1
    elif character == '\t': 
        tabs += 1
    elif character == '\n': 
        newline += 1
return space, tabs, newline
</code></pre>
<p>The code in Joran Beasley's answer is a more Pythonic approach to the problem. Rather than having separate conditions for each kind of character, you can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">the <code>collections.Counter</code> class</a> to count the occurrences of all characters in the file, and just extract the counts of the whitespace characters at the end. A <code>Counter</code> works much like a dictionary.</p>
<pre><code>from collections import Counter

def count_spaces(filename):
    with open(filename) as in_f:
        text = in_f.read()
    count = Counter(text)
    return count[" "], count["\t"], count["\n"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To support large files, you could read a fixed number of bytes at a time:</p>
<pre><code>#!/usr/bin/env python
from collections import namedtuple

Count = namedtuple('Count', 'nspaces ntabs nnewlines')

def count_spaces(filename, chunk_size=1 &lt;&lt; 13):
    """Count number of spaces, tabs, and newlines in the file."""
    nspaces = ntabs = nnewlines = 0
    # assume ascii-based encoding and b'\n' newline
    with open(filename, 'rb') as file:
        chunk = file.read(chunk_size)
        while chunk:
            nspaces   += chunk.count(b' ')
            ntabs     += chunk.count(b'\t')
            nnewlines += chunk.count(b'\n')
            chunk = file.read(chunk_size)
    return Count(nspaces, ntabs, nnewlines)

if __name__ == "__main__":
    print(count_spaces(__file__))
</code></pre>
<h3>Output</h3>
<pre><code>Count(nspaces=150, ntabs=0, nnewlines=20)
</code></pre>
<hr/>
<p><a href="https://docs.python.org/3/library/mmap.html" rel="nofollow"><code>mmap</code></a> allows you to treat a file as a bytestring without actually loading the whole file into memory e.g., you could search for a regex pattern in it:</p>
<pre><code>#!/usr/bin/env python3
import mmap
import re
from collections import Counter, namedtuple

Count = namedtuple('Count', 'nspaces ntabs nnewlines')

def count_spaces(filename, chunk_size=1 &lt;&lt; 13):
    """Count number of spaces, tabs, and newlines in the file."""
    nspaces = ntabs = nnewlines = 0
    # assume ascii-based encoding and b'\n' newline
    with open(filename, 'rb', 0) as file, \
         mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ) as s:
        c = Counter(m.group() for m in re.finditer(br'[ \t\n]', s))
        return Count(c[b' '], c[b'\t'], c[b'\n'])

if __name__ == "__main__":
    print(count_spaces(__file__))
</code></pre>
<h3>Output</h3>
<pre><code>Count(nspaces=107, ntabs=0, nnewlines=18)
</code></pre>
</div>
<span class="comment-copy">What are you "struggling" with? Can you show your code and ask a specific question about it? If you're getting an exception, post the full traceback. We can't help you if you don't show us what's going wrong.</span>
<span class="comment-copy">def count_num_of_spaces(filename):      input_file = open(filename,'r')      file_contents = input_file.read()      space = 0      tabs = 0      newline = 0      for line in file_contents == " ":          space +=1          return space     for line in file_contents == '\t':          tabs += 1          return tabs      for line in file_contents == '\n':          newline += 1         return newline      input_file.close()</span>
<span class="comment-copy">how do i add code ?? I'm new here</span>
<span class="comment-copy">do i just write that or can i use it in a for loop or if statement ??</span>
<span class="comment-copy">because ive never used the counter function yet thats why :P</span>
<span class="comment-copy">Read the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter documentation</a> for more info.</span>
<span class="comment-copy">thanks it worked  ! legend !</span>
