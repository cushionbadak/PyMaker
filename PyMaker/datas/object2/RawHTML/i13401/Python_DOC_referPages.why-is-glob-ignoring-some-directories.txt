<div class="post-text" itemprop="text">
<p>I'm trying to find all <code>*.txt</code> files in a directory with <code>glob()</code>. In some cases, <code>glob.glob('some\path\*.txt')</code> gives an empty string, despite existing files in the given directories. This is especially true, if <code>path</code> is all lower-case or numeric. 
As a minimal example I have two folders <code>a</code> and <code>A</code> on my <code>C:</code> drive both holding one <code>Test.txt</code> file.</p>
<pre><code>import glob
files1 = glob.glob('C:\a\*.txt')
files2 = glob.glob('C:\A\*.txt')
</code></pre>
<p>yields </p>
<pre><code>files1 = []
files2 = ['C:\\A\\Test.txt']
</code></pre>
<p>If this is by design, is there any other directory name, that leads to such unexpected behaviour?</p>
<p>(I'm working on win 7, with Python 2.7.10 (32bit))</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>\a</code> has a special meaning in string literals (bell char).</p>
<p>Just double backslashes when inserting paths in string literals (i.e. use <code>"C:\\a\\*.txt"</code>).</p>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">Python is different from C</a> because when you use backslash with a character that doesn't have a special meaning (e.g. <code>"\s"</code>) Python keeps both the backslash and the letter (in C instead you would get just the <code>"s"</code>).</p>
<p>This sometimes hides the issue because things just work anyway even with a single backslash (depending on what is the first letter of the directory name) ...</p>
</div>
<div class="post-text" itemprop="text">
<p>I personally avoid using double-backslashes in Windows and just use Python's handy raw-string format. Just change your code to the following and you won't have to escape the backslashes:</p>
<pre><code>import glob
files1 = glob.glob(r'C:\a\*.txt')
files2 = glob.glob(r'C:\A\*.txt')
</code></pre>
<p>Notice the <code>r</code> at the beginning of the string.</p>
<p>As already mentioned, the <code>\a</code> is a special character in Python. Here's a link to a list of Python's string literals:</p>
<ul>
<li><a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literals" rel="nofollow">https://docs.python.org/2/reference/lexical_analysis.html#string-literals</a></li>
</ul>
</div>
<span class="comment-copy">So, to be safe, I double every backslash! Great, solved it. Is there a list of special characters?</span>
<span class="comment-copy">When using string pathnames under Windows, it is best to use <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literals" rel="nofollow noreferrer">raw string literals</a> and not remember which escapes are needed. For example, using <code>r'c:\a\*.txt'</code> is stored as <code>'c:\\a\\*.txt'</code>. You might even find it useful to use forward slashes <code>'c:/a/*.txt'</code>; I think that Windows accepts forward slashes except in CMD.EXE</span>
<span class="comment-copy">@Dschoni: I've added a link to Python documentation page about string literals. That page includes a table of all recognized escape sequences.</span>
<span class="comment-copy">@msw, except a raw string literal can't end on a backslash, so it doesn't work for the root directory, e.g. <code>'C:\\'</code>. Generally the Win32 API will translate forward slashes to backslashes. However, the NT kernel's object namespace only recognizes backslash as a path separator, so you have to use backslashes when using the <code>\\?\</code> prefix. (This prefix bypasses Win32 path processing to allow using fully-qualified NT paths that can have up to 32768 characters.)</span>
