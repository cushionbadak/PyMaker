<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1867861/dictionaries-how-to-keep-keys-values-in-same-order-as-declared">Dictionaries: How to keep keys/values in same order as declared?</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>I have a dictionary that I keep updating buy using .update to add a new value and key, adding new keys as it goes through a loop. I want the dictionary to print out the values in the order that I add them. Is that possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a>  rather than a standard dictionary. It will maintain the order, but otherwise acts like a normal dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>To do that, you can <strong>use an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow"><code>OrderedDict</code></a></strong> as it remembers the order in which its contents are added. Its a subclass of normal Python dictionary so will have access to all the functions of a dictionary.</p>
<p><strong>Example:</strong></p>
<pre><code>In [1]: import collections

In [2]: normal_dict = {}

In [3]: normal_dict['key1'] = 1 # insert key1

In [4]: normal_dict['key2'] = 2 # insert key2

In [5]: normal_dict['key3'] = 3 # insert key3

In [6]: for k,v in normal_dict.items(): # print the dictionary
   ...:     print k,v
   ...:     
key3 3 # order of insertion is not maintained
key2 2
key1 1

In [7]: ordered_dict = collections.OrderedDict()

In [8]: ordered_dict['key1'] = 1 # insert key1

In [9]: ordered_dict['key2'] = 2 # insert key2

In [10]: ordered_dict['key3'] = 3 # insert key3

In [11]: for k,v in ordered_dict.items(): # print the dictionary
             print k,v
   ....:     
key1 1 # order of insertion is maintained
key2 2
key3 3
</code></pre>
</div>
<span class="comment-copy">The standard dictionary does not take the order in account. Use <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> instead. Btw, this has been discussed several times here on SO: <a href="http://stackoverflow.com/questions/25480089/initializing-an-ordereddict-using-its-constructor">1</a>, <a href="http://stackoverflow.com/questions/15711755/converting-dict-to-ordereddict">2</a>, <a href="http://stackoverflow.com/questions/15733558/python-ordereddict-not-keeping-element-order">3</a>, <a href="http://stackoverflow.com/questions/719744/what-is-the-best-ordered-dict-implementation-in-python">4</a>, ...</span>
