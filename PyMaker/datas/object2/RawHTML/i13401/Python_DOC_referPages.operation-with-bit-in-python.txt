<div class="post-text" itemprop="text">
<p>I have the formula: (short) (0xF800 | (N &amp; 0x7ff)). With the help of C/CPP/C# I changed the sign of the eight-bit numbers (eg 1202 numbers to -846). In Python this trick is not working. How do I get the same result?</p>
</div>
<div class="post-text" itemprop="text">
<p>Integers in Python have an infinite length. To make a negative number you need to set the top bit, but there's no "top" with Python - you can't do this with bit manipulation. What you <em>can</em> do is convert a positive number to negative with subtraction.</p>
<pre><code>bits = 0xf800 | (N &amp; 0x7ff)
if bits &amp; 0x8000:
    bits -= 0x10000
</code></pre>
<p>Since you already know the top bit is set, this simplifies:</p>
<pre><code>bits = (0xf800 | (N &amp; 0x7ff)) - 0x10000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>maybe someone will need:</p>
<p>From ctypes import c_short
C_short (0xF800 | (N &amp; 0x7ff)). Value</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to work with C(++) types you will need to use the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow">struct</a> or <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow">ctypes</a> modules</p>
<p>This method uses struct to pack the integer into a byte string, then unpack it as a different type.</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; N = 1202
&gt;&gt;&gt; struct.unpack('h', struct.pack('H',0xf800|(N &amp; 0x7ff)))[0]
-846
</code></pre>
<p>This method uses ctypes which has an internal representation similar to what you'd have in C(++)</p>
<pre><code>&gt;&gt;&gt; from ctypes import c_short
&gt;&gt;&gt; N = 1202
&gt;&gt;&gt; c_short(0xf800|(N &amp; 0x7ff)).value
-846
</code></pre>
</div>
<span class="comment-copy">the number is not eight-bit, it is eleven bit! typo</span>
<span class="comment-copy">What are you trying to actually accomplish? Why do you need to set the upper five bits to 1? Do you realize that with a short, 0xF800 | (N &amp; 0x7FF) == 0xF800 | N?</span>
<span class="comment-copy">what is faster ? ctypes or struct ?</span>
<span class="comment-copy">performance is probably not the important issue here so much as what you're going to do with the data once you've got it. If you're just converting  one value at a time, and don't need to write out the raw byte strings then ctypes will be fine. Otherwise you probably want struct.</span>
