<div class="post-text" itemprop="text">
<p>Let me introduce the goal of the application I'm building: I am creating a front-end GUI using PySide (Qt) for a fortran based application used in the framework of CFD. The fortran application is compiled as a *.exe file, and, when executed, it continuously provides the simulated lapse of time and other output details (when I launch it from the console, these data continously appear until it finishes). </p>
<p>For example, if I executed the external code from the console I would get</p>
<pre><code>&gt;&gt; myCFDapplication.exe
   Initializing...
   Simulation start...
   Time is 0.2
   Time is 0.4
   Time is 0.6
   Time is 0.8
   Time is 1.0
   Simulation finished
&gt;&gt;
</code></pre>
<p>With quite a long lapse of time between "Time is .." and the next line.</p>
<p>The objective of the GUI is to generate the initialization files for the external application, to launch the external application and finally to provide  the user the computation output information in real time (as plane text).
From other similar topics in this site, I have been able to launch my external application from Python using the following code</p>
<pre><code>import os, sys
import subprocess

procExe = subprocess.Popen("pru", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

while procExe.poll() is None:
line = procExe.stdout.readline()
print("Print:" + line)
</code></pre>
<p>but the output is only displayed when the execution finishes, and moreover, the whole GUI freezes until that moment.</p>
<p>I would like to know how to launch my external application using Python, getting the output in real time and passing it to the GUI instantaneously, if possible. The idea would be to print the output in different lines inside a "TextEdit" dialog using the function "append(each_output_line)".</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out <a href="https://stackoverflow.com/questions/11457931/running-an-interactive-command-from-within-python/13458449">Non-blocking read on a subprocess.PIPE in python</a> and look at the use of Queues to do a non-blocking read of the subprocess. The biggest change for your Qt application is that you are probably going to have to use <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow noreferrer">multiprocessing</a> since, as you have observed, anything blocking in your application is going to freeze the GUI.</p>
</div>
<span class="comment-copy">Don't know whether this will work in your particular case, but try running the process <i>after</i> the application's event loop has started, and then periodically call <code>qApp.processEvents()</code> inside the polling loop.</span>
<span class="comment-copy">Thanks for your answer! Anyway, I do not manage to make it work by using <code>QCoreApplication.processevent()</code>. I have included it in the following way inside my function  <code>def startSimulation(self):      procExe = subprocess.Popen("pru", shell=True,      stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)        while procExe.poll() is None:   QCoreApplication.processEvents()   line = procExe.stdout.readline()   self.console.append(line)</code>  Did you mean so?</span>
<span class="comment-copy">I assume that "do not manage to make it work" means that it still blocks? If so, you will probably have to move the processing to a separate thread and then emit a custom signal from the thread whenever there is new output (there are dozens of questions on SO that show how to do that in PyQt/PySide). However, there is no guarantee that that will work, either - in which case, you will need to try <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow noreferrer">multiprocessing</a>.</span>
<span class="comment-copy">Yes, it is still blocking. Thanks, I will read on that... as you see, I am new in this and I am still getting to know python and GUI programming.</span>
