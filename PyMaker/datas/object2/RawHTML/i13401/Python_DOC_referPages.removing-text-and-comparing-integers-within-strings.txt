<div class="post-text" itemprop="text">
<p>Due to my original post being filled with flamers assuming that I'm asking them to write my code for me and refusing to answer me at all, I'm reposting my question.</p>
<p>I stress the fact that I am a total BEGINNER at Python, and that I am NOT here to ask people to write it for me, I'm simply trying to ascertain the METHOD and some GUIDANCE on how to approach the problem, because I'm having real difficulty approaching it, and everyone seems to think I'm asking them to give me all the code I need, and I'm not.</p>
<p>So, on to my original question.</p>
<p>My problem is as follows, I have made a mathematics quiz, that outputs the name and score to a text file. In this program, I plan to add some code at the beginning, which will run a list of options to compare and order the results from the text file. The program imports the entries into a list, and the format is as follows:</p>
<p>['John : 6', 'Bob : 9', 'Billy : 2', 'Matthew : 7', 'Jimmy : 2', 'Amy: 9', 'Jenny : 10', 'Michael : 8']</p>
<p>Python recognizes this list as 8 items, perfect. It has their name, and then their score. The problem is that the specification I'm working to requires me to be able to:</p>
<p>Sort in alphabetical order with each student's highest score for the tests.</p>
<p>Also, by the highest score, and finally by the average score. I've tried for many hours in order to find some code that can compare the integers within these strings to each other to find the highest score, and only print that one, but I've had no luck. I feel like I will also struggle with the other 2 tasks, and wish for some guidance.</p>
<p>I thought about possibly using slices in order to take the integer into a separate value in order to compare them, but felt that this could make the code messy very quickly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try to split the strings on the " : " and then convert the number to int with <code>int("2")</code>.</p>
<p>The result can then be put in an dictionary:</p>
<pre><code>d = {}
d['John'] = 6
</code></pre>
<p>If you already have an item (<code>if x in d:</code>), you could compare the old value and the new value.</p>
</div>
<div class="post-text" itemprop="text">
<p>convert your list to  tuples and then it will be easy to sort
<a href="https://docs.python.org/3.6/howto/sorting.html?highlight=sorting" rel="nofollow">sorting</a></p>
<pre><code>from operator import itemgetter

st = [('John',6), ('Bob',9), ('Billy', 8), ('Matthew',7),
      ('Jimmy',2), ('Amy', 9), ('Jenny',10),('Michael',8)]


print(sorted(st, key=itemgetter(1),reverse=True))

[('Jenny', 10), ('Bob', 9), ('Amy', 9), ('Billy', 8), ('Michael', 8), ('Matthew', 7), ('John', 6), ('Jimmy', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A list of key/value strings is not the appropriate data structure to address your problem, as it requires string manipulation to extract the values. You should probably parse your data into a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">Dictionary</a> or list of tuples instead.</p>
<p><strong>using a dictionary</strong></p>
<pre><code>d = {'John': 6, 'Bob': 9, 'Billy': 2, 
     'Matthew': 7, 'Jimmy': 2, 'Amy': 9, 
     'Jenny': 10, 'Michael': 8}
</code></pre>
<p>you could then do</p>
<pre><code># highest score
hs_name = max(d, key=d.get) 
hs = d.get(hs_name)

output = "The winner is {} ({} Points)".format(hs_name, hs)
print(output)
</code></pre>
<p>Dictionaries do not have an order in memory but you can get a sorted representation of them:</p>
<pre class="lang-py prettyprint-override"><code># print ordered
import operator
sorted_d = sorted(d.items(), key=operator.itemgetter(1))

print(sorted_d)
</code></pre>
<p>If you want to store a dictionary in memory in an ordered way, you may consider using <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a>. </p>
<p>You could also consider using a list of key/value pairs as your data structure:</p>
<p><strong>using a list of tuples</strong></p>
<pre><code>lt = [('John', 6), ('Bob', 9), ('Billy', 2), 
      ('Matthew', 7), ('Jimmy', 2), ('Amy', 9), 
      ('Jenny', 10), ('Michael', 8)]

# print ordered
sorted_lt = sorted(lt, key=lambda x: x[1], reverse=True)
print(sorted_lt)

# highest score
hs_name = sorted_lt[0][0]
hs = sorted_lt[0][1]

output = "The winner is {} ({} Points)".format(hs_name, hs)
print(output)
</code></pre>
<p>I have no idea what your specific requirements are and what average you want to sort by (there is only one value per student after all) but this should give you an idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is probably not the most pythonic way to do this (I left comments in the code, I hope you understand, if not just ask):</p>
<pre><code>#Your input list (changed so you can check your requirements when there's two scores for the same person)
input_list = ['John : 6', 'Bob : 10', 'Bob : 9', 'Billy : 2', 'Matthew : 7', 'Jimmy : 2', 'Amy: 9', 'Jenny : 10', 'Michael : 8']

#Transform into a List of tuples
scores = [(item.split(":")[0].strip(), item.split(":")[1].strip()) for item in input_list]

"""CASE 1 - Order alphabetically, and if there is 2 entries for the same person it should only print the highest of the entries for that student"""

print("Entering Case 1")

#create a dictionary with names and delete duplicates (save only the highest score for a given student)
dictionary_by_names = dict()

for item in scores:
    if item[0] not in dictionary_by_names:
        dictionary_by_names[item[0]] = item[1]
    else:
        dictionary_by_names[item[0]] = max(int(item[1]), int(dictionary_by_names[item[0]]))

#order by name (List of tuples)
list_by_names = sorted([(key,value) for key, value in dictionary_by_names.items()])

print(list_by_names)

"""CASE 2 - Order by score, taking their highest and ignoring other entries"""
print("Entering Case 2")

#invert dictionary_by_names, since we only want the highest score of a given duplicate
dictionary_by_scores = [(int(value), key) for key, value in dictionary_by_names.items()]

#Sort the list formed from the dictionary (cast the score to int so we can perform sort of int instead of string, because '10' &lt; '2'  (strings) and 10 &gt; 2 (int))
list_by_score = sorted([(key,value) for key, value in dictionary_by_scores])
#Cast to string again so we can have it in the "original format"
list_by_score = [(str(item[0]), item[1]) for item in list_by_score]
#Invert tuples order so we can have it in the "original format"
list_by_score = [(item[1], item[0]) for item in list_by_score]

print(list_by_score)


"""CASE 3 - If more than one entry for the same student, calculate the average of their scores, and then order the average of each student high to low"""
print("Entering Case 3")

#create a dictionary with names and averages for students
dictionary_by_avg = dict()

for item in scores:
    if item[0] not in dictionary_by_avg:
        dictionary_by_avg[item[0]] = float(item[1])
    else:
        dictionary_by_avg[item[0]] = sum([float(item[1]), float(dictionary_by_avg[item[0]])])/2

list_by_avg = sorted([(value,key) for key, value in dictionary_by_avg.items()])
#Invert tuples order so we can have it in the "original format"
list_by_avg = [(item[1], item[0]) for item in list_by_avg]

print(list_by_avg)
</code></pre>
<p>Output:</p>
<pre><code>Entering Case 1
[('Amy', '9'), ('Billy', '2'), ('Bob', 10), ('Jenny', '10'), ('Jimmy', '2'), ('John', '6'), ('Matthew', '7'), ('Michael', '8')]
Entering Case 2
[('Billy', '2'), ('Jimmy', '2'), ('John', '6'), ('Matthew', '7'), ('Michael', '8'), ('Amy', '9'), ('Bob', '10'), ('Jenny', '10')]
Entering Case 3
[('Billy', 2.0), ('Jimmy', 2.0), ('John', 6.0), ('Matthew', 7.0), ('Michael', 8.0), ('Amy', 9.0), ('Bob', 9.5), ('Jenny', 10.0)]
</code></pre>
<p>Hope this is what you were trying to achieve, next time subdivide your problem and post chunks of code that you have tried I admit this problem is not linear, but you could have done parts of it.</p>
<p>Hope this helps.</p>
<p>BTW check some of the documentation that would have helped you:</p>
<p><a href="https://docs.python.org/2/tutorial/datastructures.html" rel="nofollow">Data Structures</a></p>
<p><a href="https://docs.python.org/2/tutorial/controlflow.html" rel="nofollow">Control Flow Tools</a></p>
<p>I bet you could have built a solution of your own if you had read it. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using a dictionary instead of your list.  Dictionaries work by pairing a key and a value.  For example:</p>
<pre><code>d = {}
d = {'key':'value'}
</code></pre>
<p>To convert your list, you could split the strings for key and value using <code>:</code> as the point to split.  For example:</p>
<pre><code>test = ('John : 2')
print (test.split(" : "))
</code></pre>
<p>returns:</p>
<pre><code>['John', '2']
</code></pre>
<p>Putting it all together, here's a sample of code pulling in your list and converting it to dictionary and then sorting by name:</p>
<pre><code>import operator

data = ['John : 6', 'Bob : 9', 'Billy : 2', 'Matthew : 7', 'Jimmy : 2', 'Amy : 9', 'Jenny : 10', 'Michael : 8']

new_data = {}
for i in range(len(data)):
    split_data = data[i].split(" : ")
    new_data[split_data[0]] = split_data[1]

new_data = sorted(new_data.items(), key=operator.itemgetter(0))
print (new_data)
</code></pre>
</div>
<span class="comment-copy">The lists can have students with the same name?</span>
<span class="comment-copy">Yes, it can, it must be able to recognize the entry with the highest integer.</span>
<span class="comment-copy">So what you want is 1) Order by name, then by score (if two or more elements have the same name;  2) Order by score;  3 ) This is what I don't get, you want to get the average score of all scores?</span>
<span class="comment-copy">Order alphabetically, and if there is 2 entries for the same person it should only print the highest of the entries for that student 2) Order by score, taking their highest and ignoring other entries 3) If more than one entry for the same student, calculate the average of their scores, and then order the average of each student high to low</span>
<span class="comment-copy">Does that make more sense?</span>
<span class="comment-copy">Never use <code>has_key</code>; Python <code>dict</code>s have supported syntax based checks for membership for ages, and <code>has_key</code> has been deprecated the whole time (it's gone in Python 3).  <code>if d.has_key(x):</code> can be expressed canonically (and more efficiently to boot) as <code>if x in d:</code>.</span>
<span class="comment-copy">Firstly, I'd like to thank you - exactly the kind of answer and guidance I was looking for, and the guidance provided has enabled me to understand where to approach from, I'll certainly go and practice dictionaries.</span>
<span class="comment-copy">Sorry for the d.has_key (really stupid...), edited.</span>
<span class="comment-copy">The only thing I'm now lost on is separating the integer from the string, and how I can add the name and integer to the dictionary even after the integer has been separated from the string, if that makes sense..</span>
<span class="comment-copy">As you are learning, I would recommend you to google. For example: from my answer you could Ctrl+c Ctrl-v the "split the strings" and add "python" to the end and google will show you the answer.</span>
<span class="comment-copy">This seems like a highly efficient way of doing it, can you possibly explain to me exactly how this code works, or possibly point me somewhere I might read up on it to better understand what you've written?</span>
<span class="comment-copy">Also, how might I go about converting the list?</span>
<span class="comment-copy">I'll certainly be sure to investigate this and see what I come up with, thanks so much for the answer.</span>
<span class="comment-copy">This is exactly what I wanted to achieve.. I cannot express enough thanks to you, although I would've benefitted from writing it myself. Thank you so much.</span>
<span class="comment-copy">The only thing is, on Case 2 and 3, how might I order the scores high to low instead of low to high?</span>
<span class="comment-copy">Well I'll let you find out that :) I think is a good exercise for you to understand this code and to change it. If you don't understand anything please do ask. =)</span>
<span class="comment-copy">Okay, I absolutely understand that! I would've liked to write it myself, so I may possibly rewrite using your code as a foundation, I cannot thank you enough for your help and time - it's incredibly valuable to a beginner such as myself.</span>
<span class="comment-copy">I made a new value before you inverted the tuples, with .reverse() and it then successfully worked, thank you so much!</span>
<span class="comment-copy">So.. how would I get it to split all the items in the list, convert them all and append to a dict?.. Seems like I'm asking too much but an example would be highly appreciated if possible</span>
<span class="comment-copy">Forgot about the sorting by name... added that.</span>
