<div class="post-text" itemprop="text">
<p>How do I make an array of complex numbers in Python?</p>
<p>In C++ STL we can write the following code:</p>
<pre><code>class Complex {

      public:
      int re, 
          im;

      float getModule() {

            return sqrt(re * re + im * im);
      } 
};

vector&lt; Complex &gt; vec;
</code></pre>
<p>but in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Extremely simple: </p>
<p>Python's has both a native list and a native complex type, so:</p>
<pre><code>c = complex(real,imag)
</code></pre>
<p>or just</p>
<pre><code>c = 1 + 2j
</code></pre>
<p>does the trick of creating one;</p>
<pre><code>complexes = [ complex(i, i) for i in range(100) ] 
</code></pre>
<p>creates thousand complex values in a list complexes.</p>
<p>You might want to have a look at numpy:</p>
<pre><code>import numpy
arr = numpy.ndarray(1000, dtype=numpy.complex128)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has built-in support for complex numbers. You can just enter them like that:</p>
<pre><code>&gt;&gt;&gt; a = 2 + 3j # or: complex(2,3)
&gt;&gt;&gt; a
(2+3j)
&gt;&gt;&gt; type(a)
&lt;type 'complex'&gt;
&gt;&gt;&gt; a.real
2.0
&gt;&gt;&gt; a.imag
3.0
&gt;&gt;&gt; 
</code></pre>
<p>As for the container, in Python you can start with a <a href="https://docs.python.org/2/tutorial/datastructures.html" rel="nofollow">list</a>:</p>
<pre><code>&gt;&gt;&gt; complex_nums_list = [2+3j, 3+4j, 4+5j]
&gt;&gt;&gt; complex_nums_list
[(2+3j), (3+4j), (4+5j)]
</code></pre>
<p>Or you can use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html" rel="nofollow">numpy.array</a>, which would be more suited for numerical applications.</p>
</div>
<div class="post-text" itemprop="text">
<p>You just create the list of values:</p>
<pre><code>vec = [1+2j, 3+4j]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <a href="https://docs.python.org/3/library/functions.html#complex" rel="nofollow">complex</a> class.</p>
<p>Or just use a complex literal: Python uses <code>j</code> for the imaginary unit.</p>
<pre><code>z = complex(3, 4)
print(z, z.real, z.imag)

z = 3 + 4j
print(z)
</code></pre>
<p><strong>output</strong></p>
<pre><code>(3+4j) 3.0 4.0
(3+4j)
</code></pre>
<p>The complex constructor also takes keyword arguments, so you can do</p>
<pre><code>z = complex(real=3, imag=4)
</code></pre>
<p>with the args in either order. And that also means that you can even pass the args in a <code>dict</code>, if you want:</p>
<pre><code>d = {'real': 3, 'imag': 4}
z = complex(**d)
</code></pre>
<p>There's also a built-in <a href="https://docs.python.org/3/library/cmath.html" rel="nofollow">cmath</a> module for mathematical functions of complex arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, I want to sort numbers complex according to their module. This is my turn.</p>
<pre class="lang-py prettyprint-override"><code>import math

class Complex:
  def __init__( self, a, b ): 
      self.a = a
      self.b = b

  def getModule( self ):
      return math.sqrt( self.a**2 + self.b**2 )

  def __str__( self ):
  ''' Returns complex number as a string '''
      return '(%s + i %s)' % (self.a, self.b)

  def add(self, x, y):
      return Complex(self.a + x, self.b + y) 

  def sub(self, x, y):
      return Complex(self.a - x, self.b - y) 


  #input = [[2, 7],[5, 4],[9, 2],[9, 3],[7, 8], [2, 2], [1, 1]]

  # Read the input from a given file complex.in, 
  # in fact is a matrix with Nx2 dimensions
  # first  line re1 im1 
  # second line re2 im2
  # ...
  #Example complex.in
  #5
  #2 7
  #5 4
  #9 2
  #9 3
  #7 8

  f = open('complex.in','r')

  input = [map(int, line.split(' ')) for line in f]

  del input[0]

  num = len( input )

  complexes = [ Complex( i[ 0 ], i[ 1 ] ) for i in input ]

  def swapp(c, a, b):

      c[ a ], c[ b ] = c[ b ], c[ a ] 

  def sort( c ):

      swapped = 1

      for i in range(num - 1, 0, -1):

      swapped = 1

      for j in range(0, i):

          if c[ j ].getModule() &gt; c[ j + 1 ].getModule():

             swapped = 0

             swapp(c, j, j + 1)

      if swapped:

         break   

  sort( complexes )

  f = open('complex.out','w')

  for c in complexes:

      f.write('%s\n' % c)     
      print c 
</code></pre>
</div>
<span class="comment-copy">You can put anything you like in a list: <code>[1+2j]</code>. Or do you mean an <a href="https://docs.python.org/2/library/array.html#array.array" rel="nofollow noreferrer"><code>array.array</code></a>?</span>
<span class="comment-copy">Lika any other array. <a href="https://docs.python.org/2/library/cmath.html" rel="nofollow noreferrer">Complex numbers in Python</a></span>
<span class="comment-copy">by the way, C++ <b>does have a proper complex type, don't use your own</b>.</span>
<span class="comment-copy">PLEASE. Properly format code. It would have been one click on the "format as code" button. Can't be that hard.</span>
<span class="comment-copy">also, what you call module is called "absolute value" for most people. And sorting is easy: <code>list_of_complexes = [1+2j, 2, -10+0.5j]; sorted_list = sorted(list_of_complexes, cmp=abs)</code></span>
<span class="comment-copy">don't implement a complex class in languages that already have one -- you won't be able to use their feature-rich standard libraries for complex math on your own type. This goes for both python and C++.</span>
