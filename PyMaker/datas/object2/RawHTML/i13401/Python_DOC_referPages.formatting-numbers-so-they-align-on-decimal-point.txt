<div class="post-text" itemprop="text">
<p>In Python, I need to format numbers so they align on the decimal point, like so:</p>
<pre><code>  4.8
 49.723
456.781
-72.18
  5
 13
</code></pre>
<p>Is there a straighforward way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't <em>think</em> there's a straight-forward way to do it, since you need to know the position of the decimal point in all the numbers before you start printing them. (I just had a look at Caramiriel's link, and some of the links from that page, but I couldn't find anything particularly applicable to this case). </p>
<p>So it looks like you have to do some string-based inspection &amp; manipulation of the numbers in the list. Eg,</p>
<pre><code>def dot_aligned(seq):
    snums = [str(n) for n in seq]
    dots = [s.find('.') for s in snums]
    m = max(dots)
    return [' '*(m - d) + s for s, d in zip(snums, dots)]

nums = [4.8, 49.723, 456.781, -72.18]

for s in dot_aligned(nums):
    print(s)
</code></pre>
<p><strong>output</strong></p>
<pre><code>  4.8
 49.723
456.781
-72.18
</code></pre>
<hr/>
<p>If you want to handle a list of <code>float</code>s with some plain <code>int</code>s mixed in, then this approach gets a bit messier.</p>
<pre><code>def dot_aligned(seq):
    snums = [str(n) for n in seq]
    dots = []
    for s in snums:
        p = s.find('.')
        if p == -1:
            p = len(s)
        dots.append(p)
    m = max(dots)
    return [' '*(m - d) + s for s, d in zip(snums, dots)]

nums = [4.8, 49.723, 456.781, -72.18, 5, 13]

for s in dot_aligned(nums):
    print(s)
</code></pre>
<p><strong>output</strong></p>
<pre><code>  4.8
 49.723
456.781
-72.18
  5
 13
</code></pre>
<hr/>
<p><strong>update</strong></p>
<p>As Mark Ransom notes in the comments, we can simplify handling <code>int</code>s by using <code>.split</code>:</p>
<pre><code>def dot_aligned(seq):
    snums = [str(n) for n in seq]
    dots = [len(s.split('.', 1)[0]) for s in snums]
    m = max(dots)
    return [' '*(m - d) + s for s, d in zip(snums, dots)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you know the precision (digits after the decimal point) that you need, and you don't mind having some trailing zeros when whole numbers are used, you could use the new <code>f-string</code> in Python 3.6 (<a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP498</a>):</p>
<pre><code>numbers = [4.8, 49.723, 456.781, -72.18, 5, 13]

for number in numbers:
    print(f'{number:9.4f}')
</code></pre>
<p><strong>Prints:</strong></p>
<pre><code>  4.8000
 49.7230
456.7810
-72.1800
  5.0000
 13.0000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fix for decimal places</p>
<pre><code>import decimal

numbers = [4.8, 49.723, 456.781, 50, -72.18, 12345.12345, 5000000000000]

dp = abs(min([decimal.Decimal(str(number)).as_tuple().exponent for number in numbers]))
width = max([len(str(int(number))) for number in numbers]) + dp + 1 #including .

for number in numbers:
    number = ("{:"+str(width)+"."+str(dp)+"f}").format(number)
    print number.rstrip('0').rstrip('.') if '.' in number else number
</code></pre>
<hr/>
<p>Corrected to take width into account on request:</p>
<pre><code>numbers = [4.8, 49.723, 456.781, 50, -72.18]
width = max([len(str(number)) for number in numbers]) + 1
for number in numbers:
    number = ("{:"+str(width)+".4f}").format(number)
    print number.rstrip('0').rstrip('.') if '.' in number else number
</code></pre>
<hr/>
<p>EDIT: If you want to include integers</p>
<pre><code>numbers = [4.8, 49.723, 456.781, 50, -72.18]

for number in numbers:
    number = "{:10.4f}".format(number)
    print number.rstrip('0').rstrip('.') if '.' in number else number
</code></pre>
<hr/>
<pre><code>numbers = [4.8, 49.723, 456.781, -72.18]

for number in numbers:
    print "{:10.4f}".format(number).rstrip('0')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can accept some leading zero you can use this:</p>
<pre><code>numbers = [ 4.8,  49.723, 456.781, -72.18]
    for x in numbers:
    print "{:10.3f}".format(x)
</code></pre>
<p>If you prefer without leading zero you could use regular expression this way:</p>
<p><a href="https://stackoverflow.com/questions/1025379/decimal-alignment-formatting-in-python">Decimal alignment formatting in Python</a></p>
<p>However the best solution should be to format separately the string before and after the decimal point (the <code>numstring</code> assignment):</p>
<pre><code>numbers = [ 4.8,  49.723, 456.781, -72.18]
nn = [str(X) for X in numbers]

for i in range(len(nn)):
    numstring = "{value[0]:&gt;6}.{value[1]:&lt;6}"
    print numstring.format(value=nn[i].split('.') if '.' in nn[i] else (nn[i], '0'))
</code></pre>
<p>Then we can split the string at the decimal point as the whole and decimal part. If the the decimal part is missing we assign it to <code>0</code>.</p>
<p>Note: with this solution there is need to convert the number to string before the format operation.</p>
<p>This is the output:</p>
<pre><code>  4.8
 49.723 
456.781 
-72.18  
</code></pre>
<p>EDIT: I think the <a href="https://stackoverflow.com/a/32808918/5306152">solution</a> of FeebleOldMan is better than mine, you should choose that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the recipe in Python documentation: <a href="https://docs.python.org/2/library/decimal.html#recipes" rel="nofollow">https://docs.python.org/2/library/decimal.html#recipes</a></p>
<pre><code>from decimal import Decimal


def moneyfmt(value, places=3, curr='', sep=',', dp='.',
             pos='', neg='-', trailneg=''):
    [...]

numbers = [4.8, 49.723, 456.781, -72.18]
for x in numbers:
    value = moneyfmt(Decimal(x), places=2, pos=" ")
    print("{0:&gt;10s}".format(value))
</code></pre>
<p>You'll obtain:</p>
<pre><code>  4.800
 49.723
456.781
-72.180
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's how I did it!</p>
<pre><code>def alignDots(number):
    try:
        whole, dec = str(number).split('.')
        numWholeSpaces = 5 - len(whole) # Where 5 is number of spaces you want to theleft
        numDecSpaces   = 3 - len(dec)   # 3 is number of spaces to the right of the dot
        thousands = ' '*numWholeSpaces + whole
        decimals  = dec + '0'*numDecSpaces
        print thousands + '.' + decimals  
        return thousands + '.' + decimals  
    except:
        print "Failed to align dots of ",number
        return ' '*5+'ERROR'
</code></pre>
<p>I like the other solutions, but needed something specific and thought why not share!</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use the Python <code>[decimal][1]</code> type.</p>
<p>There is a <a href="https://docs.python.org/2/library/decimal.html#recipes" rel="nofollow">recipe</a> used to format monetary values.</p>
<p>Why <code>decimal</code> type: avoid rounding problems, handle signifiant digits correctly...</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm terribly late to this, but you can also use math, specifically the properties of logarithms, to figure out the amount of spaces you need to pad all numbers to the proper decimal position.</p>
<pre><code>from math import log10

nums = [4.8, 49.723, 456.781, -72.18, 5, 13]

def pre_spaces(nums):
    absmax = max([abs(max(nums)), abs(min(nums))])
    max_predot = int(log10(absmax))
    spaces = [' '*(max_predot-int(log10(abs(num))) - (1 if num&lt;0 else 0)) for num in nums]
    return spaces

for s,n in zip(pre_spaces(nums), nums):
    print('{}{}'.format(s,n))
</code></pre>
<p>The result is:</p>
<pre><code>  4.8
 49.723
456.781
-72.18
  5
 13
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes there are many direct ways by which you can align floating point figures about decimal point. Below given 2 line code is one example</p>
<p>`In [20]: floating=([.022,12.645,544.5645,.54646,-554.56,-.2215,-546.5446])</p>
<p>In [21]: for xxx in floating: print "{0: 10.4f}".format(xxx)
`</p>
<p>Here in {0: 10.4f} 0 is the dimension of each floating point entries. After colon the space is for the optional minus sign. 10 is for number of places before decimal and 4 is for number of places after decimal.
Here is my out put as a JPG <a href="https://i.stack.imgur.com/yPNgf.png" rel="nofollow noreferrer">result</a></p>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/1025379/decimal-alignment-formatting-in-python" title="decimal alignment formatting in python">stackoverflow.com/questions/1025379/â€¦</a></span>
<span class="comment-copy">Instead of <code>s.find('.')</code> you can use <code>len(s.split('.')[0])</code>, that works with <code>int</code> too.</span>
<span class="comment-copy">@MarkRansom: Now why didn't <i>I</i> think of that? :) Thanks!</span>
<span class="comment-copy">Note that this method also requires the (maximum given the range of possible numbers) prefix-length to be specified in the format expression.</span>
<span class="comment-copy">This is an excellent light-weight solution for when you don't care about an offset on the left.</span>
<span class="comment-copy">@coding4fun I've edited the code to take left offset into account.</span>
<span class="comment-copy">There is a bug in your most recent version. Try it with <code>numbers = [4.8, 49.723, 456.781, 50, -72.18, 12345.12345]</code>. Thanks.</span>
<span class="comment-copy">@coding4fun Ok I think I've fixed it.</span>
<span class="comment-copy">Hmm, this code does not work for me as is - Python 3.4.3. <i>TypeError: non-empty format string passed to object.__format__</i></span>
<span class="comment-copy">If you use Py3, see the Py3 documentation: <a href="https://docs.python.org/3/library/decimal.html#recipes" rel="nofollow noreferrer">docs.python.org/3/library/decimal.html#recipes</a></span>
<span class="comment-copy">Can you show an example related to this question? I haven't understand how to properly format a list of numbers aligned to decimal point using decimal type.</span>
<span class="comment-copy">Yes I can (and I will), but have you read the recipe?</span>
<span class="comment-copy">I understood there was a need to avoid leading zero. In any case I think you should avoid multiple answers, as described <a href="http://meta.stackoverflow.com/questions/251070/are-multiple-answers-by-the-same-user-acceptable?rq=1">here</a>.</span>
