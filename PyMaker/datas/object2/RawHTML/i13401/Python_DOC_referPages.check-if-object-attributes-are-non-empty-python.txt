<div class="post-text" itemprop="text">
<p>I can check if python list or dictionary are empty or not like this</p>
<pre><code>lis1, dict1 = [], {}
# similar thing can be done for dict1
if lis1:
    # Do stuff
else:
    print "List is empty"
</code></pre>
<p>If I try to do this with my class object, i.e checking if my object attributes are non-empty by typing <code>if my_object:</code> this always evaluate to <code>True</code></p>
<pre><code>&gt;&gt;&gt; class my_class(object):
...   def __init__(self):
...     self.lis1 = []
...     self.dict1 = {}
... 
&gt;&gt;&gt; obj1 = my_class()
&gt;&gt;&gt; obj1
&lt;__main__.my_class object at 0x10c793250&gt;
&gt;&gt;&gt; if obj1:
...   print "yes"
... 
yes
</code></pre>
<p>I can write a function specifically to check if my object attributes are non-empty and then call <code>if obj1.is_attributes_empty():</code>, but I am more interested in knowing how <code>if</code> evaluates the <code>standard data-types</code> like <code>list</code> and <code>dict</code> to <code>True</code> or <code>False</code> depending on the items they contain or are empty. </p>
<p>If I want to achieve this functionality with my class object, what methods do I need to override or make changes to?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to implement the <code>__nonzero__</code> method (or <code>__bool__</code> for Python3)</p>
<p><a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow">https://docs.python.org/2/reference/datamodel.html#object.<strong>nonzero</strong></a></p>
<pre><code>class my_class(object):
    def __init__(self):
        self.lis1 = []
        self.dict1 = {}

    def __nonzero__(self):
        return bool(self.lis1 or self.dict1)

obj = my_class()
if obj:
    print "Available"
else:
    print "Not available"
</code></pre>
<p>Python also checks the <code>__len__</code> method for truthiness, but that doesn't seem to make sense for your example.</p>
<p>If you have a lot of attributes to check you may prefer to</p>
<pre><code>return any((self.lis1, self.dict1, ...))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is given in the documentation of <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">Truth value testing for Python 2.x</a> - </p>
<blockquote>
<p>instances of user-defined classes, if the class defines a <code>__nonzero__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value False.</p>
</blockquote>
<p>For <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow">Python 3.x -</a></p>
<blockquote>
<p>instances of user-defined classes, if the class defines a <code>__bool__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value False.</p>
</blockquote>
<p>According to the definition of your class, if maybe meaningful to define <code>__len__()</code> method, which returns the sum of length of the list as well as the dict.Then this method would be called to determine whether to interpret the object as <code>True</code> or <code>False</code> in boolean context. Example -</p>
<pre><code>class my_class(object):
    def __init__(self):
        self.lis1 = []
        self.dict1 = {}
    def __len__(self):
        print("In len")
        return len(self.lis1) + len(self.dict1)
</code></pre>
<p>Demo -</p>
<pre><code>&gt;&gt;&gt; class my_class(object):
...     def __init__(self):
...         self.lis1 = []
...         self.dict1 = {}
...     def __len__(self):
...         print("In len")
...         return len(self.lis1) + len(self.dict1)
...
&gt;&gt;&gt; obj = my_class()
&gt;&gt;&gt; if obj:
...     print("yes")
...
In len
&gt;&gt;&gt; obj.lis1.append(1)
&gt;&gt;&gt;
&gt;&gt;&gt; if obj:
...     print("yes")
...
In len
yes
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your class defines (on Py2) <a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow"><code>__nonzero__</code></a>, (on Py3) <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow"><code>__bool__</code></a> or (on either) <a href="https://docs.python.org/3/reference/datamodel.html#object.__len__" rel="nofollow"><code>__len__</code></a>, then that will be used to evaluate the "truthiness" of objects of that class (if only <code>__len__</code> is defined, an instance is truthy when it returns non-zero, and falsy when it returns zero). So, for example, to make your class simply report if it's attributes are non-empty in either Py2 or Py3, you'd add:</p>
<pre><code> def __bool__(self):
     return bool(self.lis1 or self.dict1)
 __nonzero__ = __bool__ # To make it work on Py2 too
</code></pre>
<p>Alternatively, if your class instances have meaningful lengths, you define:</p>
<pre><code> def __len__(self):
     return len(self.lis1) + len(self.dict1)  # For example; I doubt the length is meaningful in terms of both
</code></pre>
<p>and get boolean behavior by side-effect of supporting <code>len(myobject)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Combining the answers for using <code>any()</code> and <code>__bool__(self)</code>, the following code will allow you to check for all of the attributes using list comprehension.</p>
<pre><code>class my_class(object):
    def __init__(self):
        self.list1 = []
        self.dict1 = {}

    def __bool__(self):
        check = any([self.__dict__[attr] for attr in self.__dict__.keys()])

        return check

obj1 = my_class()

if obj1:
    print('yes')
</code></pre>
<p>This code snippet will print nothing as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>As many answers and duplicate votes suggest, you need to override the <code>__nonzero__</code> method. However, from your comment, you also want to avoid enumerating the attributes explicitly. This can be done with a trick like this:</p>
<pre><code>class Example(object):
    def __init__(self):
        self._values = {}
        self.attr1 = []
        self.attr2 = {}

    def __setattr__(self, name, value):
        self.__dict__[name] = value
        if not name.startswith('_'):
            self._values[name] = value  # keep track of the assigned attributes

    def __nonzero__(self):
        return any(self._values.itervalues())
</code></pre>
<p>This handles all public attributes that are assigned or modified later on:</p>
<pre><code>&gt;&gt;&gt; ex = Example()
&gt;&gt;&gt; bool(ex)
False
&gt;&gt;&gt; ex.attr1.append('data')
&gt;&gt;&gt; bool(ex)
True
&gt;&gt;&gt; ex.attr1.pop()
&gt;&gt;&gt; ex.attr3 = 42
bool(ex)
&gt;&gt;&gt; False
</code></pre>
<p>Attribute deletion is not handled properly, for that you need to override <code>__delattr__</code>.</p>
</div>
<span class="comment-copy">Try this:  <code>if obj1.lis1: print "yes"</code></span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/1452489/evaluation-of-boolean-expressions-in-python">Evaluation of boolean expressions in Python</a></span>
<span class="comment-copy">Yes I can.... but If their are many attributes ..... it can still be achieved by writing if obj1.attr1 and obj1.attr2 .... and so on.... but I want to avoid this.... I am more interested in knowing how if evaluates standard data-types of python ....</span>
<span class="comment-copy">Wouldlove to hear what is wrong/bad about this answer, that is the only way I can improve the answer.</span>
<span class="comment-copy">It's not inaccurate, but it's possible that the downvoter is evaluating based on usefulness and doesn't think that answers on a duplicate question are useful.</span>
