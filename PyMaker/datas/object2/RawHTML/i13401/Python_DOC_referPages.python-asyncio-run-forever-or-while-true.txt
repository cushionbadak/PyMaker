<div class="post-text" itemprop="text">
<p>Should I replace <code>while True</code> in my code (without asyncio) or should I use asyncio event loop to accomplish the same result.</p>
<p>Currently I work on some kind "worker" that is connected to zeromq, receive some data and then performs some request (http) to external tool(server). Everything is written in <em>normal</em> blocking IO. Does it makes sense to use asyncio event loop to get rid of <code>while True: ...</code>?</p>
<p>In future it might be rewritten fully in asyncio, but now I'm afraid to start with asyncio.</p>
<p>i'm new with asyncio and not all part of this library are clear for me :)</p>
<p>Thx :)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to start writing asyncio code with a library that doesn't support it, you can use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="noreferrer">BaseEventLoop.run_in_executor</a>. </p>
<p>This allows you to submit a callable to a <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="noreferrer">ThreadPoolExecutor</a> or a <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" rel="noreferrer">ProcessPoolExecutor</a> and get the result asynchronously. The default executor is a thread pool of 5 threads. </p>
<p>Example:</p>
<pre><code># Python 3.4
@asyncio.coroutine
def some_coroutine(*some_args, loop=None):
    while True:
        [...]
        result = yield from loop.run_in_executor(
            None,  # Use the default executor
            some_blocking_io_call, 
            *some_args)
        [...]

# Python 3.5
async def some_coroutine(*some_args, loop=None):
    while True:
        [...]
        result = await loop.run_in_executor(
            None,  # Use the default executor
            some_blocking_io_call, 
            *some_args)
        [...]

loop = asyncio.get_event_loop()
coro = some_coroutine(*some_arguments, loop=loop)
loop.run_until_complete(coro)
</code></pre>
</div>
<span class="comment-copy">If you're going to try to use <code>asyncio</code>, you should just completely rewrite the program using <code>aiozmq</code> and other <code>asyncio</code>-friendly libraries. Trying to mix blocking libraries with the asyncio event loop, especially if you're just doing it to remove a <code>while True:</code> loop, it usually not a good idea.</span>
<span class="comment-copy">How would You change the code to run <code>some_coroutine</code> forever? You would go with simple <code>while True:</code> or with other maybe asyncio way?</span>
<span class="comment-copy">@qwetty Having a <code>while True</code> inside a coroutine is perfectly fine, as long as you perform an asynchronous call inside. Check the <a href="https://github.com/python/asyncio/tree/master/examples" rel="nofollow noreferrer">examples</a> out, <a href="https://github.com/python/asyncio/blob/master/examples/hello_coroutine.py" rel="nofollow noreferrer">hello_coroutine</a> for instance.</span>
<span class="comment-copy">Thank You. That's what I need. Confirmation about while :)</span>
