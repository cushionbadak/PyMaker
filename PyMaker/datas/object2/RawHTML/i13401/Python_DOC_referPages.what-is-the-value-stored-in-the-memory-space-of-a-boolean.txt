<div class="post-text" itemprop="text">
<p>I don't know a great deal about memory space allotment. For every variable there will be a memory space allotted, so in the case of boolean variables in Python what value will be stored in the memory space of that variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>Note: The following description applies to the CPython reference interpreter for Python. The implementation details will vary in other interpreters, e.g. PyPy, Jython, IronPython, etc.</p>
<p>Python's <code>bool</code> objects are singletons. So if you say:</p>
<pre><code>a = True
b = bool('nonzerolen')
</code></pre>
<p>Then what you have is two references (named <code>a</code> and <code>b</code>) to the singleton instance of <code>True</code>; aside from the pointer used to hold each reference, no additional memory is allocated. </p>
<p>For the instance itself, as it happens, <code>bool</code> is a subclass of <code>int</code>, so the instance has the same layout as a Python <code>int</code> with a value of 0 or 1. The object itself differs slightly from Python 2 to Python 3, but it's basically the standard Python object header (including a reference to the class type and a reference count), plus a 0 or a 1 (as a signed <code>size_t</code> in Python 2, or a single element array of 16 or 32 bit values in Python 3).</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#bltin-boolean-values" rel="nofollow">"Boolean values are the two constant objects False and True"</a> i.e., <code>True is True</code> and <code>False is False</code> and it is true for any Python 3 program (for any implementation, not just CPython).</p>
<p>There are only two boolean objects, no matter how many names may refer to them in a Python program.</p>
<p>The size of an object may depend on implementation e.g., here's a result on my machine:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(True)
28
&gt;&gt;&gt; sys.getsizeof(False)
24
</code></pre>
<p>where <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow"><code>sys.getsizeof()</code></a> returns the size of object in bytes.</p>
<blockquote>
<p>in the case of boolean variables in Python what value will be stored in the memory space of that variable?</p>
</blockquote>
<p>You could look at the memory on CPython:</p>
<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; bytearray((ctypes.c_ubyte * sys.getsizeof(False)).from_address(id(False)))                            
bytearray(b'I\x02\x00\x00\x00\x00\x00\x00@V\x9e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
&gt;&gt;&gt; bytearray((ctypes.c_ubyte * sys.getsizeof(True)).from_address(id(True)))
bytearray(b'9\x02\x00\x00\x00\x00\x00\x00@V\x9e\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00')
</code></pre>
<p>Here are the corresponding <a href="https://github.com/python/cpython/blob/d0e38b30b42b13559b009b19171889442598d004/Objects/boolobject.c#L174-L184" rel="nofollow">definitions in CPython</a>. <code>bool</code> is an <code>int</code> subclass; here's <a href="https://github.com/python/cpython/blob/d0e38b30b42b13559b009b19171889442598d004/Include/longintrepr.h#L11-L92" rel="nofollow">how <code>int</code> is represented in CPython</a>.</p>
</div>
<span class="comment-copy">Python abstracts memory management away, so don't worry about it! It has <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">names</a> rather than variables, too.</span>
<span class="comment-copy">You can play around with <code>sys.getsizeof()</code> but as @jonrsharpe you shouldn't need to concern yourself with that, unless you have specific reason to</span>
<span class="comment-copy">If you're <i>really</i> interested, though, look at <a href="https://hg.python.org/cpython/file/tip/Objects/boolobject.c" rel="nofollow noreferrer"><code>boolobject.c</code></a>, which is the under-the-hood implementation of booleans for CPython.</span>
<span class="comment-copy"><code>True is True</code> and therefore all <code>True</code> values may be the same object</span>
<span class="comment-copy">@jonrsharpe: Technically, the definition of the per-<code>bool</code> structure is found in the <a href="https://hg.python.org/cpython/file/tip/Include/longintrepr.h" rel="nofollow noreferrer">definition of a <code>PyLong</code>'s <code>struct _longobject</code></a> in Py3 (<code>PyLong</code> is the C name for an <code>int</code> in Py3), so <code>boolobject.c</code> doesn't actually describe the instance layout.</span>
<span class="comment-copy">if <code>a is b</code> then <code>a</code> and <code>b</code> are two names that refer to the same object. It does not depend on Python implementation.</span>
<span class="comment-copy">Yeah, and since <code>bool</code>s are singletons in CPython, two names referencing <code>True</code> will always be the same <code>True</code> (and all references to <code>False</code> reference the same <code>False</code>).</span>
