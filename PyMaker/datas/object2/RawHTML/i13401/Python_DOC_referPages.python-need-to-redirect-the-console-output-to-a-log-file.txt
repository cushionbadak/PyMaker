<div class="post-text" itemprop="text">
<p>I am executing multiple "make" files from my python script. A sample script is as follows :</p>
<pre><code>print("Calling make file")

call(["make"])
</code></pre>
<p>and the output will be :</p>
<blockquote>
<p>Calling make file</p>
<p>Starting make</p>
<p>cd src &amp;&amp; make distclean</p>
<p>make[1]: Entering directory
  '/home/tejas/WLANrepo/src/3rdparty/redis-stable/src' rm -rf
  redis-server redis-sentinel redis-cli redis-benchmark redis-check-dump
  redis-check-aof *.o *.gcda *.gcno *.gcov redis.info lcov-html (cd
  ../deps &amp;&amp; make distclean)'</p>
</blockquote>
<p>I want the entire output to be redirected to a log file. I tried :</p>
<pre><code>class Logger(object):

    def __init__(self):
        self.terminal = sys.stdout
        self.log = open("Buildexec_logfile.log", "a")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)
</code></pre>
<p>but this will redirect only those statements that are under "print". But the output of the make file that gets called is not getting redirected.</p>
<p>Python: python 2.7, OS: CentOS</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to redirect output of processes executed by python (in your case, <code>make</code>). See documentation for <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">subprocess module</a> and specifically, the redirection parameters (<code>stdin=...</code>, <code>stdout=...</code>, <code>stderr=...</code>) of its methods. Depending on your needs you may completely discard subprocess output (<code>DEVNULL</code>), or collect it to a variable inside python process (<code>PIPE</code>) or send it to another stream.</p>
</div>
<div class="post-text" itemprop="text">
<p>To capture regular output of the command we can use the <code>subprocess.check_output()</code> function. 
The synchronization is forced because the function must wait for the output 
of the called sub-process, however if it fails (returns the error message you want to capture) you will need to handle the <code>CalledProcessError</code> that is raised. Fortunately the <code>CalledProcessError</code> exception has an <code>output</code> attribute that stored the error message. </p>
<pre><code>import subprocess
with open('logfile.log','w') as log:
    for makefile in multiple_makefiles:
        log.write("calling {}".format(makefile)
        try:
            log_info = subprocess.check_output(["make",makefile],stderr=STDOUT)
        except subprocess.CalledProcessError as e:
            log_info = e.output
        log.write(log_info)
</code></pre>
<p>The <code>try</code> will give log_info the output when the make instance exits cleanly 
and the <code>except</code> catches the error when it does not. Either way you cant move on until the <code>log_info</code> is written to the <code>log</code> file, so there should be no issues with synchronization </p>
<p>I would also add that if you are writing this script for utility reasons like: </p>
<blockquote>
<p>Dang. I really need this compiled now and the makefiles that shipped with it aren't working I need to gather the output to debug this
   Then go ahead and get it finished in whatever way is most useful or the quickest for you </p>
</blockquote>
<p><em>BUT</em></p>
<p>If you are really doing something more like:</p>
<blockquote>
<p>I need a setup script to automate building my software, and I will ship it with the software for the foreseeable future </p>
</blockquote>
<p>Then stop, don't re-invent the wheel you are looking for <a href="http://cmake.org" rel="nofollow">cmake</a>. (and will log output for you as well)</p>
</div>
<span class="comment-copy">I just tried it and there is a strange (maybe not so strange, the module is called subprocess, so they are probably running in different threads) thing happening - I have print before call, though in log file messages are not in this order. Do you think there's a simple way to arrange them the way they should be?</span>
<span class="comment-copy">Well, I just could propose the following explanation: when you run a process, it's run asynchronously and output from bother processes goes to the console completely independently. You could first collect all of a subprocess output waiting its termination, and then send everything to console in an order you need. I could discess the subject more specifically, but I need a code to observe.</span>
<span class="comment-copy">I used <code>stdout</code> itself to call the above mentioned class.                              <code>from conf.script_logging import Logger sys.stdout = Logger()</code>                                                                                               A log file is created but only print statements are printed.</span>
<span class="comment-copy">Hi Ajay, my bad, should have been more clear. I am executing and installing a host of other scripts as well along with make files. I'll try out the first option.</span>
<span class="comment-copy">@Tejas ahh I see, well in that case the general format of this code should be able to help out!</span>
<span class="comment-copy">in the first piece of code, could you please explain the for loop? Why are you creating a list multiple_makefiles?</span>
