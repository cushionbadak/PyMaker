<div class="post-text" itemprop="text">
<p>I have been looking at similar questions regarding how to generate random numbers in python. Example: <a href="https://stackoverflow.com/questions/2823316/generate-a-random-letter-in-python">Similar Question</a> - but i do not have the problem that the randomfunction returns same values every time. </p>
<p>My random generator works fine, the problem is that it returns the same value when calling the function at, what I think, the same second which is undesireable. </p>
<p>My code looks like this</p>
<pre><code>def getRandomID():
    token = ''
    letters = "abcdefghiklmnopqrstuvwwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
    for i in range(1,36):
        token = token + random.choice(letters)
    return token
</code></pre>
<p>As I mentioned this function returns different values when being called at on different times but returns the same value when calling the function at the same time. How do I avoid this problem? </p>
<p>I use this function in a back-end-server to generate unique IDs for users in front-end to insert in a database so I cannot control the time intervals when this happens. I must have random tokens to map the users in the database to be able to insert them correctly with queuenumbers in the database.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could possibly improve matters by using <code>random.SystemRandom()</code> as follows:</p>
<pre><code>import random

sys_random = random.SystemRandom()

def getRandomID():
    token = ''
    letters = "abcdefghiklmnopqrstuvwwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
    for i in range(1, 36):
        token = token + sys_random.choice(letters)
    return token

print(getRandomID())
</code></pre>
<p>This attempts to use the <code>os.urandom()</code> function which generates random numbers from sources provided by the operating system. The <a href="https://docs.python.org/3/library/random.html?highlight=random%20sample#random.choices" rel="nofollow noreferrer"><code>.choices()</code></a> function could also be used to return a list of choices in a single call, avoiding the string concatenation:</p>
<pre><code>import random

sys_random = random.SystemRandom()

def getRandomID():
    letters = "abcdefghiklmnopqrstuvwwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
    return ''.join(sys_random.choices(letters, k=35))

print(getRandomID())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def getRandomID(n):

    import datetime
    import random

    random.seed(datetime.datetime.now())

    letters = "abcdefghiklmnopqrstuvwwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"

    idList = [ ''.join([random.choice(letters) for j in range(1,36)]) for i in range(n)]

    return idList
</code></pre>
<p><strong>this script in the 3rd test of 10 million ids again have made them all unique</strong></p>
<p>changing for loop to list comprehension did speedup quite a bit. </p>
<pre><code>&gt;&gt;&gt; listt = getRandomID(10000000)
&gt;&gt;&gt; print(len(listt))
10000000

&gt;&gt;&gt; sofIds = set(listt)
&gt;&gt;&gt; print(len(sofIds))
10000000
</code></pre>
<p>this script uses permutations with repetition: 62 choose 36,
to theoretically total number of ids is quite big it is pow(62,36)</p>
<pre><code>59720078628458064562952815512525677808980550940333281573339136
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option would be to update the seed with the previous result to get a pseudorandom sequence. An option would be old_seed XOR result or just the result.</p>
</div>
<span class="comment-copy">like it return same id when called by two user at same time??</span>
<span class="comment-copy">I'd suggest using <code>uuid</code> to generate random user ids.</span>
<span class="comment-copy">Hackaholic - exactly, it returns the same "token" which is the same string of randomletters when being called at by two users.</span>
<span class="comment-copy">How do you call the function multiple times at the same time? Spawning threads, multiprocessing, something like that?</span>
<span class="comment-copy">Yes. Python defaults to seeding the random number generator from the system time, while SystemRandom requests random data from the operating system. The usual compromise is to seed the default random number generator from system random sources, for instance <code>random.seed(random.SystemRandom().random())</code>.</span>
<span class="comment-copy">I think this solved the problem at first sight. I will try to perform a bigger-scale-test where I can confirm that the solution works!</span>
<span class="comment-copy">Please consider editing your post to add more explanation about what your code does and why it will solve the problem. An answer that mostly just contains code (even if it's working) usually wont help the OP to understand their problem. From what I can see, this is redundant though as this is what (I believe) Python normally uses as the basis for its seed. And even if it's not, this will still provide the same seed at the same time resulting in the same output.</span>
<span class="comment-copy">You don't want to call <code>random.seed</code> from within the routine that generates the random numbers. You will (occasionally, non-deterministically) end up with the same value coming back from <code>datetime.now</code> on subsequent calls, which will cause <code>random.choice</code> to return identical sequences.</span>
