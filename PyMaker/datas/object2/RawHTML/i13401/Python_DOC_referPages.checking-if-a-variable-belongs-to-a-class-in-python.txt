<div class="post-text" itemprop="text">
<p>I have a small class which is as follows :</p>
<pre><code>class Gender(object):
    MALE = 'M'
    FEMALE = 'F'
</code></pre>
<p>I have a parameter variable which can be only <strong>M</strong> or <strong>F</strong>.To ensure it is only that, I do the following :</p>
<pre><code>&gt;&gt;&gt; parameter = 'M'
&gt;&gt;&gt; if parameter not in (Gender.MALE, Gender.FEMALE)
...     print "Invalid parameter"
...
Invalid parameter
&gt;&gt;&gt;
</code></pre>
<p>Now I have a class which contains all the States in USA as follows:</p>
<pre><code>class States(object):
    ALABAMA = 'AL'
    ALASKA = 'AK'
    ARIZONA = 'AZ'
    ARKANSAS = 'AR'
    CALIFORNIA = 'CA'
    COLORADO = 'CO'
    CONNECTICUT = 'CT'
    DELAWARE = 'DE'
    DISTRICTOFCOLUMBIA = 'DC'
    ....
....
</code></pre>
<p>Like the example above,my parameter now is <strong>AL</strong>.However, since there are 50 states in the USA,I cannot practically use the tuple with 50 variables like I used above.Is there a better way of doing this ? I did read about isinstance but it did not give me the expected results.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>__dict__</code> property which composes a class, for example:</p>
<pre><code>In [1]: class Foo(object):
   ...:     bar = "b"
   ...:     zulu = "z"
   ...:     
In [2]: "bar"  in Foo.__dict__
Out[2]: True
</code></pre>
<p>Or as you're searching for the values use <code>__dict__.values()</code>:</p>
<pre><code>In [3]: "b" in Foo.__dict__.values()
Out[3]: True
</code></pre>
<p>As Peter Wood points out, the <a href="https://docs.python.org/2/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code></a> built-in can also be used to retrieve the <code>__dict__</code>:</p>
<pre><code>In [12]: "b" in vars(Foo).values()
Out[12]: True
</code></pre>
<hr/>
<p>The <code>__dict__</code> property is used as a <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">namespace for classes</a> and so will return all methods, <a href="http://www.rafekettler.com/magicmethods.html" rel="nofollow noreferrer">magic methods</a> and private properties on the class as well, so for robustness you might want to modify your search slightly to compensate.</p>
<p>In your case, you might want to use a <code>classmethod</code>,  such as:</p>
<pre><code>class States(object):
    ALABAMA = "AL"
    FLORIDA = "FL"

    @classmethod
    def is_state(cls, to_find):
        print(vars(cls))
        states = [val for key, val in vars(cls).items()
                  if not key.startswith("__")
                  and isinstance(val, str)]
        return to_find in states

States.is_state("AL") # True
States.is_state("FL") # True
States.is_state("is_state") # False
States.is_state("__module__") # False
</code></pre>
<hr/>
<p><strong>Update</strong>
This clearly answer's the OPs question, but readers may also be interested in the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>Enum</code></a> library in Python 3, which would quite possibly be a better container for data such as this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you use a dictionary? Its a lot simpler and lookups will be easier as well.</p>
<pre><code>states = {'AL': 'Alabama', 'AK': 'Alaska' ... }
test_state = 'Foo'

if test_state not in states.keys():
    print('{} is not valid input'.format(test_state))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using Enum to define both <code>Gender</code> and <code>States</code>.<br/>
<a href="https://docs.python.org/3/library/enum.html" rel="nofollow">Enum</a> if part of the standard library on <code>Python 3</code>. If you are on <code>Python 2</code> use <a href="https://pypi.python.org/pypi/enum34" rel="nofollow">enum34</a>, install with <code>pip install enum34</code>.  </p>
<pre><code>from enum import Enum
class States(Enum):
    ALABAMA = 'AL'
    ALASKA = 'AK'
    ARIZONA = 'AZ'
    ARKANSAS = 'AR'
    CALIFORNIA = 'CA'
    COLORADO = 'CO'
    CONNECTICUT = 'CT'
    DELAWARE = 'DE'
    DISTRICTOFCOLUMBIA = 'DC'
    ...
</code></pre>
<p>Then you can check if a variable is one of the states by  </p>
<pre><code>isinstance(variable, States)
</code></pre>
</div>
<span class="comment-copy">If you're using Python 3, take a look at <a href="https://docs.python.org/dev/library/enum.html" rel="nofollow noreferrer">enum</a></span>
<span class="comment-copy">you should use an <a href="https://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python">Enum</a></span>
<span class="comment-copy">And IIRC there should be a Python 2 recipe for enums somewhere.</span>
<span class="comment-copy">@AndreaCorbellini I'm sure there are numerous enum recipes.</span>
<span class="comment-copy">There you go: <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer">Python 3.4 Enum backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a></span>
<span class="comment-copy">Be careful, this will return false positives if there is a method that matches the key as well.</span>
<span class="comment-copy">No methods in my class so this should suffice..thanks</span>
<span class="comment-copy">Note that this won't work with <code>__slots__</code>, a better way is to use <code>hasattr</code>, but it is different from looking up in class dictionary as it will look up everywhere in the inheritance tree.</span>
<span class="comment-copy">You can access <code>__dict__</code> using <code>vars(Foo)</code></span>
<span class="comment-copy">@AshwiniChaudhary <code>hasattr()</code> would be great if OP was asking to find <code>bar</code>, but he's trying to find <code>"b"</code></span>
<span class="comment-copy">You don't even need to use <code>.keys()</code>, since <code>in</code> checks against the keys anyway. <code>if test_state not in states:</code>.</span>
<span class="comment-copy">You are right - I just have a habit of using <code>.keys()</code>.</span>
<span class="comment-copy">If you use the <code>dict</code> constructor you can use keyword arguments instead of creating strings. e.g. <code>dict(AL='Alabama', AK='Alaska')</code></span>
<span class="comment-copy">@Burhan..the states class is already defined for some other purpose ..it would be duplication on my part if i re-created the same content in a different format.. and hence I was specifically looking for information to access the static variable in a class</span>
<span class="comment-copy">this looks great..however..i am still on 2.7..</span>
<span class="comment-copy">@Amistad I will update the answer for python 2.7.</span>
<span class="comment-copy">@Amistad it's updated now.</span>
