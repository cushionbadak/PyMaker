<div class="post-text" itemprop="text">
<p>I'm running into a problem using the subprocess module to open completely independent processes through Python. I need the process spawned by the python script to live on even if the python program dies. I've noticed that subprocess creates a child process and nohup is not keeping it alive. It needs to work both on Windows and Linux, so I'm not sure if os.fork will work.</p>
<p>The structure I am aiming for is a main program running at all times that calls other programs, and if the main program dies I want the spawned programs to live on.</p>
<p>Main program</p>
<pre><code>import subprocess
import time

subprocess.Popen(["/usr/bin/python", "/home/jchoinski/Desktop/Sentinel1.1/programTest.py"], stdin=subprocess.PIPE, stdout=PIPE, stderr=PIPE)
while True:
   time.sleep(1)
</code></pre>
<p>Spawned Program</p>
<pre><code>import time

l = 1
while l &lt; 100000:
    l += 1
    print(l)
    time.sleep(1)
</code></pre>
<p>The process tree looks like this:</p>
<p>MainProgram<br/>
|_CalledProgram</p>
<p>and I want it to look like:  </p>
<p>MainProgram<br/>
CalledProgram</p>
<p>Any ideas? Should I even use subprocess for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I couldn't find a true universal way to start the program independently as it's own process. I managed to get what I want by checking to see if it is a *nix OS and appending 'nohup' to the beginning if true. Windows does not kill child processes so it worked out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow">Multiprocessing</a> library instead and run the process as <code>daemon</code>.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/8947711/call-a-python-subprocess-as-daemon-and-exit" title="call a python subprocess as daemon and exit">stackoverflow.com/questions/8947711/…</a></span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/13592219/launch-a-totally-independent-process-from-python?rq=1" title="launch a totally independent process from python">stackoverflow.com/questions/13592219/…</a></span>
<span class="comment-copy">Consider improving your question, the code indentation make it difficult to read and other pieces of code seems not be include in code block...</span>
<span class="comment-copy">The first link does not spawn an independent process and the second link does not work for *nix systems.</span>
<span class="comment-copy">Not sure how to do it platform independent, but <a href="https://en.wikipedia.org/wiki/Nohup" rel="nofollow noreferrer">en.wikipedia.org/wiki/Nohup</a> and this <a href="http://stackoverflow.com/questions/285015/linux-prevent-a-background-process-from-being-stopped-after-closing-ssh-client" title="linux prevent a background process from being stopped after closing ssh client">stackoverflow.com/questions/285015/…</a> have some general clues.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/6011235/4279"><code>nohup</code> is not enough</a>, you might need <code>preexec_fn=os.setpgrp</code> too (and perhaps <a href="https://www.python.org/dev/peps/pep-3143/#correct-daemon-behaviour" rel="nofollow noreferrer">other points from Unix daemon list</a>). There are no process trees on Windows. There are  "Job Objects" on Windows and <a href="http://stackoverflow.com/q/53208/4279">the default behavior is not to kill child processes</a></span>
<span class="comment-copy">here's <a href="http://stackoverflow.com/a/27549535/4279">code example that shows how to emulate <code>nohup</code> in pure Python</a></span>
<span class="comment-copy">it is the opposite of what OP wants. If the main process exits then all its  daemonic child processes are killed. Note: <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.daemon" rel="nofollow noreferrer">daemon process in <code>multiprocessing</code></a> has a <i>different</i> meaning from <a href="https://www.python.org/dev/peps/pep-3143/#correct-daemon-behaviour" rel="nofollow noreferrer">Unix daemon</a></span>
