<div class="post-text" itemprop="text">
<p>The python code below fails with the error <code>pickle.PicklingError: Can't pickle &lt;class '__main__.SpecialName'&gt;: it's not found as __main__.SpecialName</code></p>
<pre><code>import pickle
from collections import namedtuple

different_SpecialName = namedtuple('SpecialName', 'foo bar')
def save():
    foo = different_SpecialName(1, 2)
    with open('foosave.pkl', 'w') as f:
        pickle.dump(foo, f)

if __name__ == '__main__':
    save()
</code></pre>
<p>This seems like bad behaviour of the <code>pickle</code> module, as it depends on the correctness of a <i>variable name</i>. Changing <code>different_SpecialName</code> to <code>SpecialName</code> and re-running the code allows it to complete successfully. Changing the code to the below, where a variable with <code>SpecialName</code> is instantiated to be the same value as <code>different_SpecialName</code>, also lets the code run successfully</p>
<pre><code>import pickle
from collections import namedtuple

different_SpecialName = namedtuple('SpecialName', 'foo bar')

## create new variable with 'correct' name
SpecialName = different_SpecialName

def save():
    # foo = different_SpecialName(1, 2)
    foo = SpecialName(1, 2)
    with open('foosave.pkl', 'w') as f:
        pickle.dump(foo, f)

if __name__ == '__main__':
    save()
</code></pre>
<p>My questions: is this fundamentally a <code>pickle</code> (and <code>cPickle</code>) bug? It seems like <code>pickle</code> shouldn't be looking up the class definition by using the name of the variable (although, I'm not sure what else it could do). Or, instead, is this an issue with the <code>namedtuple</code> API? I browsed the <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code> documentation</a> and couldn't find anything that explicitly told me to name my  <code>namedtuple</code> variables the same as my <code>typename</code> argument (the first argument to the <code>namedtuple()</code> function)</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not a bug. <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow"><code>pickle</code> requires</a> that</p>
<blockquote>
<p>the class definition must be importable and live in the same module as when the object was stored.</p>
</blockquote>
<p>From the perspective of the <code>namedtuple</code>'s <code>__reduce__</code> method, the type name is <code>SpecialName</code> (that's what you passed it after all). So when unpickling, it will try to import the module it was declared in and look for <code>SpecialName</code>. But since you didn't save it as <code>SpecialName</code>, it can't find it.</p>
<p>Without resorting to <code>namedtuple</code>s, you can produce the exact same problem with:</p>
<pre><code>class Foo:
    pass
Bar = Foo
del Foo
</code></pre>
<p>and trying to pickle and unpickle a <code>Bar()</code>; under the hood, you've effectively done the same thing with your mismatched names for a <code>namedtuple</code>.</p>
</div>
<span class="comment-copy">great, so it's the <code>namedtuple</code> documentation failing to warn the user that mismatching names can result in errors.</span>
<span class="comment-copy">Well, every example given matches the <code>typename</code> argument with the name the result is assigned to, and the very first line notes that the class returned uses the <code>typename</code> argument. Adding a warning for every non-standard usage would clutter the docs quite a bit.</span>
<span class="comment-copy">I disagree, it would take a brief one line to comment on the quite nonstandard requirement that the two names must match exactly.</span>
