<div class="post-text" itemprop="text">
<p>I have Directory structure like this</p>
<pre><code>projectfolder/fold1/fold2/fold3/script.py
</code></pre>
<p>now I'm giving script.py a path as commandline argument of a file which is there in </p>
<pre><code>fold1/fold_temp/myfile.txt
</code></pre>
<p>So basically I want to be able to give path in this way </p>
<pre><code>../../fold_temp/myfile.txt 

&gt;&gt;python somepath/pythonfile.py -input ../../fold_temp/myfile.txt
</code></pre>
<p>Here problem is that I might be given full path or relative path so I should be able to decide and based on that I should be able to create absolute path.</p>
<p>I already have knowledge of functions related to path. </p>
<p><a href="https://stackoverflow.com/questions/918154/relative-paths-in-python">Question 1</a></p>
<p><a href="https://stackoverflow.com/questions/1270951/python-how-to-refer-to-relative-paths-of-resources-when-working-with-code-repo">Question 2</a></p>
<p>Reference questions are giving partial answer but I don't know how to build full path using the functions provided in them. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
dir = os.path.dirname(__file__)
path = raw_input()
if os.path.isabs(path):
    print "input path is absolute"
else:
    path = os.path.join(dir, path)
    print "absolute path is %s" % path
</code></pre>
<p>Use os.path.isabs to judge if input path is absolute or relative, if it is relative, then use os.path.join to convert it to absolute</p>
</div>
<div class="post-text" itemprop="text">
<p>try  <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow noreferrer">os.path.abspath</a>, it should do what you want ;)</p>
<p>Basically it converts any given path to an absolute path you can work with, so you do not need to distinguish between relative and absolute paths, just normalize any of them with this function.</p>
<p>Example:</p>
<pre class="lang-python prettyprint-override"><code>from os.path import abspath
filename = abspath('../../fold_temp/myfile.txt')
print(filename)
</code></pre>
<p>It will output the absolute path to your file.</p>
<p><strong>EDIT:</strong></p>
<p>If you are using Python 3.4 or newer you may also use the <a href="https://docs.python.org/3.7/library/pathlib.html#pathlib.Path.resolve" rel="nofollow noreferrer">resolve()</a> method of <a href="https://docs.python.org/3.7/library/pathlib.html#pathlib.Path" rel="nofollow noreferrer">pathlib.Path</a>. Be aware that this will return a Path object and not a string. If you need a string you can still use <code>str()</code> to convert it to a string.</p>
<p>Example:</p>
<pre class="lang-python prettyprint-override"><code>from pathlib import Path
filename = Path('../../fold_temp/myfile.txt').resolve()
print(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python3, you can use pathlib's <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve" rel="nofollow noreferrer">resolve</a> functionality to resolve symlinks and <code>..</code> components.</p>
<p>You need to have a Path object however it is very simple to do convert between str and Path.</p>
<p>I recommend for anyone using Python3 to drop <code>os.path</code> and its messy long function names and stick to <code>pathlib</code> Path objects.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>A practical example:</strong></p>
<p><code>sys.argv[0]</code> gives you the name of the current script</p>
<p><code>os.path.dirname()</code> gives you the relative directory name</p>
<p>thus, the next line, gives you the absolute working directory of the current executing file. </p>
<p><code>cwd = os.path.abspath(os.path.dirname(sys.argv[0]))</code></p>
<p>Personally, I always use this instead of <code>os.getcwd()</code> since it gives me the script absolute path, independent of the directory from where the script was called.</p>
</div>
<span class="comment-copy">If the user passed in a correct path, why do you care whether it is absolute or relative?  Python certainly doesn't care, and your user probably doesn't care.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/51520/how-to-get-an-absolute-file-path-in-python">How to get an absolute file path in Python</a></span>
<span class="comment-copy">This doesn't work as a solution as in dir path you will have  a path for script file where as according to question I don't want to give that as a path..</span>
<span class="comment-copy">Similer solution is there in links provided in question... it is perfectly fine if your input file is in same directory or in some subdirectory having same parent</span>
<span class="comment-copy"><code>os.path.join(dir, path)</code> is already equal to <code>path</code>, if <code>path</code> is absolute (tested on Pyhon 3.6).</span>
<span class="comment-copy">provide a small example ... it is better than a link; otherwise, a good answer and would be up-voted...</span>
