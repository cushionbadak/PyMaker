<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import time

async def foo():
  await time.sleep(1)

foo()
</code></pre>
<p>I couldn't make this dead simple example to run:</p>
<pre><code>RuntimeWarning: coroutine 'foo' was never awaited foo()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Running coroutines requires an <em>event loop</em>. Use the <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer"><code>asyncio()</code> library</a> to create one:</p>
<pre><code>import asyncio

# Python 3.7+
asyncio.run(foo())
</code></pre>
<p>or</p>
<pre><code># Python 3.6 and older
loop = asyncio.get_event_loop()
loop.run_until_complete(foo())
</code></pre>
<p>Also see the <a href="https://docs.python.org/3.5/library/asyncio-task.html" rel="nofollow noreferrer"><em>Tasks and Coroutines</em> chapter of the <code>asyncio</code> documentation</a>. If you already have a loop running, you'd want to run additional coroutines concurrently by creating a task (<code>asyncio.create_task(...)</code> in Python 3.7+, <code>asyncio.ensure_future(...)</code> in older versions).</p>
<p>Note however that <code>time.sleep()</code> is <em>not</em> an awaitable object. It returns <code>None</code> so you get an exception after 1 second:</p>
<pre><code>&gt;&gt;&gt; asyncio.run(foo())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/.../lib/python3.7/asyncio/runners.py", line 43, in run
    return loop.run_until_complete(main)
  File "/.../lib/python3.7/asyncio/base_events.py", line 573, in run_until_complete
    return future.result()
  File "&lt;stdin&gt;", line 2, in foo
TypeError: object NoneType can't be used in 'await' expression
</code></pre>
<p>In this case you should use the <a href="https://docs.python.org/3.5/library/asyncio-task.html#asyncio.sleep" rel="nofollow noreferrer"><code>asyncio.sleep()</code> coroutine</a> instead:</p>
<pre><code>async def foo():
    await asyncio.sleep(1)
</code></pre>
<p>which is cooperates with the loop to enable other tasks to run. For blocking code from third-party libraries that do not have asyncio equivalents, you could run that code in an <a href="https://docs.python.org/3/library/asyncio-eventloop.html#executing-code-in-thread-or-process-pools" rel="nofollow noreferrer">executor pool</a>. See <a href="https://docs.python.org/3/library/asyncio-dev.html#running-blocking-code" rel="nofollow noreferrer"><em>Running Blocking Code</em></a> in the asyncio development guide.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you already have a loop running (with some other tasks), you can add new tasks with:</p>
<pre><code>asyncio.ensure_future(foo())
</code></pre>
<p>otherwise you might get</p>
<pre><code>The event loop is already running
</code></pre>
<p>error.</p>
</div>
<span class="comment-copy">If foo() is function from one library, is it possible to encapsulate (without modify the source code) to meet <code>await</code> requirement?</span>
<span class="comment-copy">@northtree: You can <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer">run blocking code in a threadpool executor</a> to free the asyncio event loop thread though.</span>
