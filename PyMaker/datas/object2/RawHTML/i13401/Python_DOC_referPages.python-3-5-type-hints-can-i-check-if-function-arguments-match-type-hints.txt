<div class="post-text" itemprop="text">
<p>does python 3.5 provide functions that allow to test whether a given
argument would fit the type hints given in the function declaration?</p>
<p>if i have e.g. this function:</p>
<pre><code>def f(name: List[str]):
    pass
</code></pre>
<p>is there a python method that can check whether</p>
<pre><code>name = ['a', 'b']
name = [0, 1]
name = []
name = None
...
</code></pre>
<p>fit the type hints?</p>
<p>i know that 'no type checking happens at runtime' but can i still check the
validity of these arguments by hand in python?</p>
<p>or if python does not provide that functionality itself: what is the tool i'd
need to use?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python itself doesn't provide such functions, you can read more about it <a href="https://stackoverflow.com/questions/32667403/is-it-possible-to-make-python-throw-errors-if-the-type-of-the-argument-passed-to">here</a>:</p>
<hr/>
<p>I wrote a decorator for that. This is the code of my decorator:</p>
<pre><code>from typing import get_type_hints

def strict_types(function):
    def type_checker(*args, **kwargs):
        hints = get_type_hints(function)

        all_args = kwargs.copy()
        all_args.update(dict(zip(function.__code__.co_varnames, args)))

        for argument, argument_type in ((i, type(j)) for i, j in all_args.items()):
            if argument in hints:
                if not issubclass(argument_type, hints[argument]):
                    raise TypeError('Type of {} is {} and not {}'.format(argument, argument_type, hints[argument]))

        result = function(*args, **kwargs)

        if 'return' in hints:
            if type(result) != hints['return']:
                raise TypeError('Type of result is {} and not {}'.format(type(result), hints['return']))

        return result

    return type_checker
</code></pre>
<p>You can use it like that:</p>
<pre><code>@strict_types
def repeat_str(mystr: str, times: int):
    return mystr * times
</code></pre>
<p>Though it's not very pythonic to restrict your function to accept only one type. Though you can use <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">abc</a> (abstract base classes) like <code>number</code> (or custom abc) as type-hints and restrict your functions to accept not only one type, but whatever combination of types you want.</p>
<hr/>
<p>Added a github <a href="https://github.com/ipeterov/strict_types" rel="nofollow noreferrer">repo</a> for it, if anybody wants to use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an old question, but there is a tool I've written for doing run time type checking based on type hints: <a href="https://pypi.org/project/typeguard/" rel="noreferrer">https://pypi.org/project/typeguard/</a></p>
</div>
<span class="comment-copy"><i>"does python 3.5 provide functions that allow to test whether a given argument would fit the type hints given in the function declaration?"</i> - no (but it's <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">getting closer</a>). <i>"what is the tool i'd need to use?"</i> - recommendations are off-topic (but see MyPy, <a href="http://andreacensi.github.io/contracts/" rel="nofollow noreferrer">contracts</a>, etc.)</span>
<span class="comment-copy">this looks nice. <code>f.__code__</code> should be <code>function.__code__</code>; the arguments of the first <code>TypeError</code> should also be adapted. i tried your <code>repeat_str</code> function and got an (unexpected) error message: <code>TypeError: Type of mystr is &lt;class 'str'&gt; and not &lt;class 'str'&gt;</code>. but then maybe i introduced a bug into your code...</span>
<span class="comment-copy">@hiroprotagonist, I'm sorry, I gave you the wrong, not debugged code. I edited my answer, now it probably works as it should.</span>
<span class="comment-copy">will have a look at it.. thanks!</span>
<span class="comment-copy"><code>typeguard</code> looks really nice. Handles <code>List</code>, <code>Union</code>, <code>Typevar</code> etc. which the proof-of-concept accepted answer won't do. It would be interesting to see what the performance hit is from running it though, although I guess this could be mitigated by e.g. running only in debug.</span>
