<div class="post-text" itemprop="text">
<p>Despite the many related questions, I can't find any that match my problem.  I'd like to change a binary string (for example, <code>"0110100001101001"</code>) into a byte array (same example, <code>b"hi"</code>).</p>
<p>I tried this:  </p>
<pre><code>bytes([int(i) for i in "0110100001101001"])
</code></pre>
<p>but I got:</p>
<pre><code>b'\x00\x01\x01\x00\x01' #... and so on
</code></pre>
<p>What's the correct way to do this in Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example of doing it the first way that Patrick mentioned: convert the bitstring to an int and take 8 bits at a time. The natural way to do that generates the bytes in reverse order. To get the bytes back into the proper order I use extended slice notation on the bytearray with a step of -1: <code>b[::-1]</code>.</p>
<pre><code>def bitstring_to_bytes(s):
    v = int(s, 2)
    b = bytearray()
    while v:
        b.append(v &amp; 0xff)
        v &gt;&gt;= 8
    return bytes(b[::-1])

s = "0110100001101001"
print(bitstring_to_bytes(s))
</code></pre>
<p>Clearly, Patrick's second way is more compact. :)</p>
<p>However, there's a better way to do this in Python 3: use the <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="noreferrer">int.to_bytes</a> method:</p>
<pre><code>def bitstring_to_bytes(s):
    return int(s, 2).to_bytes(len(s) // 8, byteorder='big')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; zero_one_string = "0110100001101001"
&gt;&gt;&gt; int(zero_one_string, 2).to_bytes((len(zero_one_string) + 7) // 8, 'big')
b'hi'
</code></pre>
<p>It returns <code>bytes</code> object that is an immutable sequence of bytes. If you want to get a <code>bytearray</code> -- a mutable sequence of bytes -- then just call <code>bytearray(b'hi')</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to either convert it to an int and take 8 bits at a time, or chop it into 8 byte long strings and then convert each of them into ints.  In Python 3, as PM 2Ring and J.F Sebastian's answers show, the <code>to_bytes()</code> method of <code>int</code> allows you to do the first method very efficiently.  This is not available in Python 2, so for people stuck with that, the second method may be more efficient.  Here is an example:</p>
<pre><code>&gt;&gt;&gt; s = "0110100001101001"
&gt;&gt;&gt; bytes(int(s[i : i + 8], 2) for i in range(0, len(s), 8))
b'hi'
</code></pre>
<p>To break this down, the range statement starts at index 0, and gives us indices into the source string, but advances 8 indices at a time.  Since <code>s</code> is 16 characters long, it will give us two indices:</p>
<pre><code>&gt;&gt;&gt; list(range(0, 50, 8))
[0, 8, 16, 24, 32, 40, 48]
&gt;&gt;&gt; list(range(0, len(s), 8))
[0, 8]
</code></pre>
<p>(We use <code>list()</code> here to show the values that will be retrieved from the range iterator in Python 3.)</p>
<p>We can then build on this to break the string apart by taking slices of it that are 8 characters long:</p>
<pre><code>&gt;&gt;&gt; [s[i : i + 8] for i in range(0, len(s), 8)]
['01101000', '01101001']
</code></pre>
<p>Then we can convert each of those into integers, base 2:</p>
<pre><code>&gt;&gt;&gt; list(int(s[i : i + 8], 2) for i in range(0, len(s), 8))
[104, 105]
</code></pre>
<p>And finally, we wrap the whole thing in <code>bytes()</code> to get the answer:</p>
<pre><code>&gt;&gt;&gt; bytes(int(s[i : i + 8], 2) for i in range(0, len(s), 8))
b'hi'
</code></pre>
</div>
<span class="comment-copy">@ReblochonMasque One of my first attempts was something like <code>bytes([int(i) for i in "0110100001101001"]]</code> but that gave me <code>b'\x00\x01\x01\x00...'</code>. (That's from memory, as I don't have access to the code at the moment, so it might be wrong. In any case, it didn't work!)</span>
<span class="comment-copy">@Numeri: It's <b>always</b> a good idea to put some relevant code into your question: it helps readers know what you've tried, and how advanced your Python skills are. Questions without code are <i>very</i> likely to attract down-votes.</span>
<span class="comment-copy">@PM2Ring Ok, thanks for the advice.  I didn't add it in this time, because my approach was clearly far from being right, and didn't just need a little tweaking.</span>
<span class="comment-copy">Understood, but that's not the way SO works. We don't expect the code in your question to function properly - otherwise you wouldn't be asking a question. :) Also, it's often much easier for us to debug code that we can see, rather than for us to come up with something from scratch, hoping that it'll be appropriate for your needs.</span>
<span class="comment-copy">@PM2Ring OK. I'm always willing to learn :) (whether how to ask a good question or how to program, or anything else!) :D At this point, would it significantly improve the functionality of SO if I edited that in?</span>
<span class="comment-copy"><code>len(s) // 8</code> may fail, <a href="http://stackoverflow.com/a/32683047/4279">use <code>(len(s) + 7) // 8</code> instead</a>.</span>
<span class="comment-copy">int.to_bytes is essentially the first method -- just done more efficiently in C rather than python.</span>
<span class="comment-copy">@J.F.Sebastian: Good point; your code is more robust, mine assumes that the input bitstring has been constructed correctly. Another way to calculate the correct size for bitstrings with a length that's not a whole multiple of 8 is to use the "ceiling division" trick:  <code>-(-len(s) // 8)</code>.</span>
<span class="comment-copy"><code>'1001'</code> that corresponds to <code>b'\t'</code> is as correct as other bitstrings. The division trick works but it is less readable (some languages round towards zero, some towards negative infinity).</span>
<span class="comment-copy">Thank you for your answer! StackOverflow is an amazing resource.  This would have taken me a much longer time to work out using docs (and I probably wouldn't have stumbled on the right function). :)</span>
<span class="comment-copy">Thank you! This is (probably) the safest of all three answers, and most clearly addressed to python3.</span>
<span class="comment-copy">This is interesting, but how does this work? :)</span>
<span class="comment-copy">@KevinGuan Explanation added.  If it meets your needs, please accept the answer.</span>
<span class="comment-copy">Well, I'm not OP. So I can only upvote :P</span>
<span class="comment-copy">@KevinGuan  Sorry, wasn't paying attention!  :-)</span>
<span class="comment-copy">No problem, thanks for the explanation :)</span>
