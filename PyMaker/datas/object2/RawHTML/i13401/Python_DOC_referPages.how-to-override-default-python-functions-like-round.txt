<div class="post-text" itemprop="text">
<p>I Want to override default round() function of python because I have to convert the result of round() function into integer. By default round() returns value in float.
The code given below is returning error message.</p>
<p><strong>RuntimeError: maximum recursion depth exceeded while calling a Python object.</strong></p>
<pre><code>def round(number):
     if type(number) is float: return int(round(number))
     return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue with your current code is that after you have overwritten the built-in <code>round()</code> method, when you call <code>round()</code> inside your own <code>round()</code> , you are recursively calling your own function, not the built-in <code>round</code> function.</p>
<p>For Python 3.x, you can use <a href="https://docs.python.org/3/library/builtins.html"><code>builtins</code></a> module to access the <code>round()</code> built-in function -</p>
<pre><code>import builtins
def round(number):
    if type(number) is float: return int(builtins.round(number))
    return None
</code></pre>
<p>For Python 2.x , it would be <a href="https://docs.python.org/2/library/__builtin__.html"><code>__builtin__</code></a> module -</p>
<pre><code>import __builtin__
def round(number):
    if type(number) is float: return int(__builtin__.round(number))
    return None
</code></pre>
<p>Though I would really suggest not doing this, rather use a new name for your round function, maybe something like <code>round_int</code> or so.</p>
<p>Please note, another thing is that your code would return the rounded number for <code>float</code> type, for all other types, it would return <code>None</code> , I am not sure if this is intentional or not, but I am guessing you would want to return back the <code>number</code> for other types (atleast <code>int</code>?) .</p>
</div>
<div class="post-text" itemprop="text">
<p>As already pointed out, round refers to your function not to the builtin function as you have shadowed the function and as python looks in the <em>local, enclosing, global scope</em>  and finally <em>builtins</em> in that order it see round refers to your function so your function essentially keeps calling itself until you hit a recursion limit.</p>
<p>I would avoid shadowing the round function at all but a much simpler approach would be a <code>try/except</code> adding .5 to the number passed in and catching a TypeError:</p>
<pre><code>def round(number):
    try:
        return int(number + .5)
    except TypeError:
        return None
</code></pre>
<p>If you were going to check types, you should use <code>issinstance</code>, you can combine it with <code>numbers.Number</code> to check for any numeric type:</p>
<pre><code>from numbers import Number
def round(number):
    if isinstance(number, Number):
        return int(number+.5)
    return None
</code></pre>
<p>If you just wanted to check for a float type:</p>
<pre><code>def round(number):
    if isinstance(number, float):
        return int(number+.5)
    return None
</code></pre>
</div>
<span class="comment-copy">Why not just define a new function with a separate name?</span>
<span class="comment-copy">You have infinite recursion, because you are calling the same round() function you declared inside your if condition - infinitely!</span>
<span class="comment-copy">He's calling round(number) before int() ... the <code>number</code> will always be the original param passed</span>
<span class="comment-copy">You are correct, my mistake.</span>
<span class="comment-copy">why are you returning None and why not just call <code>int(round(numer))</code>, why would you be passing something other than a number to a round function?</span>
<span class="comment-copy">It is intentional to accept only float numbers. I want to convert decimals into integer by rounding off the number.</span>
<span class="comment-copy">Thanks @anand s kumar.</span>
<span class="comment-copy"><i><code>I would avoid shadowing</code></i> - as I do. Isn't it more consistent then to use another name for the examples?</span>
<span class="comment-copy">@Wolf, I said <i>I would avoid shadowing the round function at all but ...</i>, as in but if you are going to. The code provided lets the OP shadow round without the need to use builtins at all.</span>
