<div class="post-text" itemprop="text">
<p>I have the following function, which includes a function inside it:</p>
<pre><code>def function():
    previously_parsed_tv_urls = set()

    def _get_all_related(tv_urls):

        api_urls = [self._build_api_url_from_store_url(url)
                    for url in tv_urls not in previously_parsed_tv_urls]
        previously_parsed_tv_urls = tv_urls.union(api_urls)


    function()
</code></pre>
<p>However, I don't have access to <code>previously_parsed_tv_urls</code>. How would I access that from within the <code>_get_all_related</code> function?</p>
<p>Here is the error I currently get:</p>
<pre><code>UnboundLocalError: local variable 'previously_parsed_tv_urls' referenced before assignment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to reference an earlier defined name, even in a "higher" scope, Python is generally fine with it. This grants you all sorts of power, especially when you're just messing around in an interpreter.</p>
<p><strong>However</strong>, Python is also pretty generous at trying to stop you from doing things that can bite you or cause nasty, difficult to debug problems. This is where <code>UnboundLocalError</code> comes in.</p>
<p>As soon as you redefine a name in a particular scope, Python marks it as local to that scope (only), and will not look higher to provide a value. This keeps you from accidentally mucking up higher scopes without explicitly requesting it.</p>
<p>As Andrea Corbellini mentioned, Python 3 adds the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow">nonlocal keyword</a> to permit you to make just such an explicit request. <a href="https://www.python.org/dev/peps/pep-3104/" rel="nofollow">PEP 3104</a> pretty exhaustively describes the change in scoping rules this permits, comparing both to Python without <code>nonlocal</code> as well as other common languages of its kind.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're assigning to <code>previously_parsed_tv_urls</code> inside the inner function. When you do that, Python always makes it a local name throughout the function; so your earlier access of the value will fail with the error you see.</p>
<p>However in this case there doesn't seem to be any reason to reassign the name. Instead, you can update the existing set:</p>
<pre><code>all_urls = tv_urls.union(api_urls)
previously_parsed_tv_urls.update(all_urls)
</code></pre>
</div>
<span class="comment-copy">Why do you think you don't have access to <code>previously_parsed_tv_urls</code> ? Certainly seems like you should.</span>
<span class="comment-copy">The code you posted cannot produce that error.</span>
<span class="comment-copy">@coderhacker it's called a closure. It's a pretty common design pattern.</span>
<span class="comment-copy">@David542 well right now you're calling <code>function</code> inside <code>function</code> and the error message reads <code>'previously_requested_tv_urls'</code> not <code>'previously_parsed_tv_urls'</code>, so I'm willing to bet you have other issues too. Can you please triple-check your posted code to make sure that it matches your actual code?</span>
<span class="comment-copy">@David542 Venturing a guess: Python is fine with accessing things higher in scope (all the way out to global) as long as they are not redeclared. If you redeclare that name in the function you make it local and Python will raise the <code>UnboundLocalError</code> complaint.</span>
