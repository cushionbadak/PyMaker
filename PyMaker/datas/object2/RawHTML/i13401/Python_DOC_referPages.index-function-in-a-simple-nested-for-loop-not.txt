<div class="post-text" itemprop="text">
<p>So here is the pretty basic code i am working with, it is a function that takes a grid in the form of a tuple of tuples. In the loop I have tried to make i the rows and q the columns for the grid. </p>
<pre><code>def myfunc(grid):  
    for i in (grid): 
        for q in i: 
            print("i.index(q): ", i.index(q), " grid.index(i)", grid.index(i))

    return True

myfunc(((1, 0, 0, 1, 0),
        (0, 1, 0, 0, 0),
        (0, 0, 1, 0, 1),
        (1, 0, 0, 0, 0),
        (0, 0, 1, 0, 0)))
</code></pre>
<p>Here is what I get:</p>
<pre><code>i.index(q):  0  grid.index(i) 0
i.index(q):  1  grid.index(i) 0
i.index(q):  1  grid.index(i) 0
i.index(q):  0  grid.index(i) 0
i.index(q):  1  grid.index(i) 0
i.index(q):  0  grid.index(i) 1
i.index(q):  1  grid.index(i) 1
i.index(q):  0  grid.index(i) 1
i.index(q):  0  grid.index(i) 1
i.index(q):  0  grid.index(i) 1
i.index(q):  0  grid.index(i) 2
i.index(q):  0  grid.index(i) 2
</code></pre>
<p>and so on.</p>
<p>I expecting and want to get 0, 1, 2, 4, 5, ... for <code>i.index(q)</code>, am I not using this function correctly? This seems odd as <code>grid.index(i)</code> is working fine and when I printed q in the <code>for q in i:</code> loop I got the right values.     </p>
<p>Any help appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>tuple.index</code> returns index of <strong>first occurrence</strong> of the given element:</p>
<pre><code>In [1]: tuple.index?
Docstring:
T.index(value, [start, [stop]]) -&gt; integer -- return first index of value.
Raises ValueError if the value is not present.
Type:      method_descriptor
</code></pre>
<p>In order to iterate over elements along with their indices, you should use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a> function:</p>
<pre><code>In [2]: def myfunc(grid):
   ...:     for i, row in enumerate(grid):
   ...:         for j, elem in enumerate(row):
   ...:             print('Row #{}, elem #{}, value: {}'.format(i, j, elem))

In [3]: myfunc(((1, 0, 0, 1, 0),
   ...:         (0, 1, 0, 0, 0),
   ...:         (0, 0, 1, 0, 1),
   ...:         (1, 0, 0, 0, 0),
   ...:         (0, 0, 1, 0, 0)))
Row #0, elem #0, value: 1
Row #0, elem #1, value: 0
Row #0, elem #2, value: 0
Row #0, elem #3, value: 1
Row #0, elem #4, value: 0
Row #1, elem #0, value: 0
Row #1, elem #1, value: 1
Row #1, elem #2, value: 0
Row #1, elem #3, value: 0
Row #1, elem #4, value: 0
Row #2, elem #0, value: 0
Row #2, elem #1, value: 0
Row #2, elem #2, value: 1
Row #2, elem #3, value: 0
Row #2, elem #4, value: 1
Row #3, elem #0, value: 1
Row #3, elem #1, value: 0
Row #3, elem #2, value: 0
Row #3, elem #3, value: 0
Row #3, elem #4, value: 0
Row #4, elem #0, value: 0
Row #4, elem #1, value: 0
Row #4, elem #2, value: 1
Row #4, elem #3, value: 0
Row #4, elem #4, value: 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're using them perfectly. But they're not what you want to use.</p>
<pre><code>def myfunc(grid):  
    for (i, row) in enumerate(grid): 
        for (j, el) in enumerate(row): 
            print('{},{}'.format(i, j))
</code></pre>
</div>
<span class="comment-copy">Thanks very much!</span>
<span class="comment-copy">@C.Dow, do not forget to accept answer using the tick under the post's score buttons, this will help users with same problem.</span>
