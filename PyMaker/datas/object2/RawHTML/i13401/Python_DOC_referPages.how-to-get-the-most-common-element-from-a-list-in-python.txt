<div class="post-text" itemprop="text">
<p>I'm having a list as shown here.    <code>a=[1936,2401,2916,4761,9216,9216,9604,9801]</code>
I want to get the value which have more duplicates. In here it is '9216' how can i get this value? Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>collections.Counter</code> for this:</p>
<pre><code>from collections import Counter

a = [1936, 2401, 2916, 4761, 9216, 9216, 9604, 9801] 

c = Counter(a)

print(c.most_common(1)) # the one most common element... 2 would mean the 2 most common
[(9216, 2)] # a set containing the element, and it's count in 'a'
</code></pre>
<p><strong>From the docs:</strong></p>
<p><a href="https://i.stack.imgur.com/bukcv.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/bukcv.png"/></a>
<a href="https://i.stack.imgur.com/qyAOr.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/qyAOr.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2.7/library/collections.html#counter" rel="nofollow">https://docs.python.org/2.7/library/collections.html#counter</a></p>
<p>from collections import Counter
Counter(a).most_common(1)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another one not using counter</p>
<pre><code>a=[1936,2401,2916,4761,9216,9216,9604,9801]
frequency = {}
for element in a:
    frequency[element] = frequency.get(element, 0) + 1
# create a list of keys and sort the list
# all words are lower case already
keyList = frequency.keys()
keyList.sort()
print "Frequency of each word in the word list (sorted):"
for keyElement in keyList:
    print "%-10s %d" % (keyElement, frequency[keyElement])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's two standard library ways to do this:</p>
<p><a href="https://docs.python.org/3/library/statistics.html#statistics.mode" rel="nofollow noreferrer"><code>statistics.mode</code></a>:</p>
<pre class="lang-py prettyprint-override"><code>from statistics import mode
most_common = mode([3, 2, 2, 2, 1])  # 2
most_common = mode([3, 2])  # StatisticsError: no unique mode
</code></pre>
<p><a href="https://docs.python.org/3.6/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>collections.Counter.most_common</code></a>:</p>
<pre class="lang-py prettyprint-override"><code>from collections import Counter
most_common, count = Counter([3, 2, 2, 2, 1]).most_common(1)[0]  # 2, 3
most_common, count = Counter([3, 2]).most_common(1)[0]  # 3, 1
</code></pre>
<p>Both are identical in terms of performance, but the first raises an exception when there is no unique most common element and the second returns the frequency as well.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/3594514/how-to-find-most-common-elements-of-a-list">How to find most common elements of a list?</a></span>
