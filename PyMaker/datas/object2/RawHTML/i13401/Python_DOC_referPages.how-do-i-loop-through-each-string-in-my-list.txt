<div class="post-text" itemprop="text">
<p>I tried this piece of code, but it only performs the function on the first string in the list:</p>
<h1>returns the first and last 2 characters of the given list of strings</h1>
<pre><code>def both_ends(list):
    finalList = []
    for s in list:
        if s &gt; 2:
            return s[0] + s[1] + s[-2] + s[-1]
        else:
            return s

    finalList.append(s)
    return finalList

list = ('apple', 'pizza', 'x', 'joke')
print both_ends(string)
</code></pre>
<p>How would I make this function run through all of the strings in the list?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, that is because you are returning the result directly , so it returns after you go through the first string itself. Instead you should put the result in the <code>finalList</code> you create and return the result at the end.</p>
<p>And some other things -</p>
<ol>
<li><p>As said in the other answer, you want to check the length of the string.</p></li>
<li><p>The length of the string should be greater than 4 , otherwise, you would end up adding some characters multiple times.</p></li>
<li><p>Do not use names like <code>list</code> for variables, it ends up shadowing the builtin functions and so you would not be able to use <code>list()</code> to create list after that.</p></li>
<li><p>Last issue is you should call you function with your list, not <code>string</code> .</p></li>
</ol>
<p>Example -</p>
<pre><code>def both_ends(list):
    finalList = []
    for s in list:
        if len(s) &gt; 4:
            finalList.append(s[:2] + s[-2:])
        else:
            finalList.append(s)
    return finalList
</code></pre>
<hr/>
<p>An easier way to do this -</p>
<pre><code>def both_ends(s):
    return s[:2] + s[-2:] if len(s) &gt; 4 else s

lst = ('apple', 'pizza', 'x', 'joke')
print map(both_ends, lst)          #You would need `list(map(...))` for Python 3.x
</code></pre>
<p>Demo -</p>
<pre><code>&gt;&gt;&gt; def both_ends(s):
...     return s[:2] + s[-2:] if len(s) &gt; 4 else s
... 
&gt;&gt;&gt; lst = ('apple', 'pizza', 'x', 'joke')
&gt;&gt;&gt; print map(both_ends, lst) 
['aple', 'piza', 'x', 'joke']
</code></pre>
<p>Or even list comprehension , though to me that makes it a bit less readable -</p>
<pre><code>[s[:2] + s[-2:] if len(s) &gt; 4 else s for s in lst]
</code></pre>
<p>Demo -</p>
<pre><code>&gt;&gt;&gt; lst = ('apple', 'pizza', 'x', 'joke')
&gt;&gt;&gt; [s[:2] + s[-2:] if len(s) &gt; 4 else s for s in lst]
['aple', 'piza', 'x', 'joke']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want to check the length of the string, not the string itself. Hence, doing <code>s &gt; 2</code> doesn't do what you want it to do:</p>
<pre><code>def both_ends(lst):
    finalList = []
    for s in lst:
        if len(s) &gt; 2:
            finalList.append(s[0] + s[1] + s[-2] + s[-1])
        else:
            finalList.append(s)
    return finalList

lst = ['apple', 'pizza', 'x', 'joke']
print both_ends(lst)
</code></pre>
<p>Few other things:</p>
<ul>
<li>Don't name variables <code>list</code>. It will override the built-in type.</li>
<li>You have a tuple <code>(..., ...)</code>. A list is with square brackets.</li>
<li>You have <code>print both_ends(string)</code>, and not putting in your list.</li>
</ul>
<p>And finally, you can probably shorten up your code:</p>
<pre><code>print [s[:2] + s[-2:] if len(s) &gt; 2 else s for s in lst]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are some issues that caught my eye.</p>
<ul>
<li>You are returning immediately after the first iteration, so getting only the first element.</li>
<li>I think you want to compare if the length is greater than 4, so do <code>len(s)&gt;4</code></li>
<li>Don't use a datatype name as a variable name. Use used <code>list</code>, don't use that. </li>
</ul>
<p>Don't return immediately, rather append to the list.</p>
<pre><code> def both_ends(lst):
    finalList = []
    for s in lst:
        if len(s) &gt; 4:
           finalList.append( s[0] + s[1] + s[-2] + s[-1])
        else:
           finalList.append(s)


    return finalList

lst = ['apple', 'pizza', 'x', 'joke']
print both_ends(lst)
</code></pre>
<p>Output:</p>
<pre><code>['aple', 'piza', 'x', 'joke']
</code></pre>
</div>
<span class="comment-copy">That's what <code>map</code> function is for!</span>
<span class="comment-copy"><code>print both_ends(string)</code>? Do you mean <code>print both_ends(list)</code>?</span>
<span class="comment-copy">And of course the so called <code>list</code>is not a list but a <code>tuple</code>. So this code manages to overwrite the built-in <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer"><code>list</code></a> function while at the same time bedazzling the user by a misleading variable name.</span>
<span class="comment-copy">Oh no, my and your's answer is almost identical. Should I delete it?</span>
<span class="comment-copy">Its upto you, I do not mind either way.</span>
<span class="comment-copy">Your implementation will print <code>'aple'</code> and not exercise any of the other strings in <code>lst</code>.</span>
<span class="comment-copy">@BillLynch It prints each string for me</span>
<span class="comment-copy"><a href="http://ideone.com/8GS1vg" rel="nofollow noreferrer">ideone.com/8GS1vg</a></span>
<span class="comment-copy">@BillLynch Oo sorry I was looking at the list comprehension not the actual function. Fixed</span>
