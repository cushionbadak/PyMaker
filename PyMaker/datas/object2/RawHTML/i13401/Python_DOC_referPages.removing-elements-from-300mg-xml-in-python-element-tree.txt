<div class="post-text" itemprop="text">
<p>I'm trying to parse a 300MB XML in ElementTree, based on advise like <a href="https://stackoverflow.com/questions/3707155/can-python-xml-elementtree-parse-a-very-large-xml-file">Can Python xml ElementTree parse a very large xml file?</a> </p>
<pre><code>from xml.etree import ElementTree as Et

for event, elem in Et.iterparse('C:\...path...\desc2015.xml'):  
    if elem.tag == 'DescriptorRecord':
        for e in elem._children:
            if str(e.tag) in ['DateCreated', 'Year', 'Month', 'TreeNumber', 'HistoryNote', 'PreviousIndexing']:
                e.clear()
                elem.remove(e)
                print 'removed %s' % e
</code></pre>
<p>giving...</p>
<pre><code>removed &lt;Element 'HistoryNote' at 0x557cc7f0&gt;
removed &lt;Element 'DateCreated' at 0x557fa990&gt;
removed &lt;Element 'HistoryNote' at 0x55809af0&gt;
removed &lt;Element 'DateCreated' at 0x5580f5d0&gt;
</code></pre>
<p>However, this just keeps going, the file isn't getting any smaller, and on inspection the elements are still there.  Tried either e.clear() or elem.remove(e), but the same results.  Regards  </p>
<h2>UPDATE</h2>
<p>Error code from my first comment on @alexanderlukanin13 s answer:</p>
<p>Traceback (most recent call last): File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\pydevd.py", line 1570, in trace_dispatch Traceback (most recent call last): File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\pydevd.py", line 2278, in globals = debugger.run(setup['file'], None, None) File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\pydevd.py", line 1704, in run pydev_imports.execfile(file, globals, locals) # execute the script File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\runfiles.py", line 234, in main() File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\runfiles.py", line 78, in main return pydev_runfiles.main(configuration) # Note: still doesn't return a proper value. File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\pydev_runfiles.py", line 835, in main PydevTestRunner(configuration).run_tests() File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\pydev_runfiles.py", line 762, in run_tests file_and_modules_and_module_name = self.find_modules_from_files(files) File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\pydev_runfiles.py", line 517, in find_modules_from_files mod = self.__get_module_from_str(import_str, print_exception, pyfile) File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\pydev_runfiles.py", line 476, in __get_module_from_str buf_err = pydevd_io.StartRedirect(keep_original_redirection=True, std='stderr') File "C:\Users\Eddie\Downloads\eclipse\plugins\org.python.pydev_4.0.0.201504132356\pysrc\pydevd_io.py", line 72, in StartRedirect import sys MemoryError</p>
</div>
<div class="post-text" itemprop="text">
<p>The main problem in your script is that you don't save altered XML back to disk. You need to store reference to root element and then call <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write" rel="nofollow">ElementTree.write</a>:</p>
<pre><code>from xml.etree import ElementTree as Et

context = Et.iterparse('input.xml')
root = None
for event, elem in context:
    if elem.tag == 'DescriptorRecord':
        for e in list(elem.getchildren()):  # Don't use _children, it's a private field
            if e.tag in ['DateCreated', 'Year', 'Month', 'TreeNumber', 'HistoryNote', 'PreviousIndexing']:
                elem.remove(e)  # You need remove(), not clear()
    root = elem

with open('output.xml', 'wb') as file:
    Et.ElementTree(root).write(file, encoding='utf-8', xml_declaration=True)
</code></pre>
<p>Note: here I use an awkward (and probably unsafe) way to get a root element - I assume that it's always the last element in <code>iterparse</code> output. If anyone knows a better way, please tell.</p>
</div>
<span class="comment-copy"><i>"the file isn't getting any smaller"</i> - why would it? You're altering the object in memory, that doesn't change the file. Also 300MB isn't all that large.</span>
<span class="comment-copy">Many thanks @alexanderlukanin13.  This is what I was after.  Tried it twice from Eclipse: first took 20m &amp; gave a memory error (below), second crashed Python.  Desktop is a 16GB Quad-core 3.4GHz.  Any more insights are much appreciated.</span>
<span class="comment-copy">@user2422819 DOM parsing is doomed to eat a lot of memory and to fail eventually on some XML size. But frankly I didn't expect failure on 300MB. 1) Try running it from command line, maybe Eclipse+debugger is interfering 2) Consider moving to <a href="https://docs.python.org/3/library/xml.sax.html" rel="nofollow noreferrer">xml.sax</a>, which has low memory requirements. You can start with <a href="https://gist.github.com/alexanderlukanin13/d7e65849d94006fceadb" rel="nofollow noreferrer">this example</a> and customize it to support nested elements logic.</span>
