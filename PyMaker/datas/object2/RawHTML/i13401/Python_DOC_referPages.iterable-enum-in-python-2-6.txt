<div class="post-text" itemprop="text">
<p>As I am using Python 2.6 I am trying to create custom Enum class. What I need is to store string with the enum object. Something like:</p>
<pre><code>class Enum(object):
    def __init__(self, value):
        self.value = value[0]
        self.msg = value[1]

class Parameters(Enum):
    SERVER_LISTEN_ADDRESS = (0, "http://blabla.com")
    SERVER_LISTEN_PORT = (1, "7001")
    SERVER_SSL_LISTEN_PORT = (2, "7002")
    (...) # many parameters more 
    SERVER_NAME = (X, "name")
</code></pre>
<p>The problem is that my 'Parameters' class is not iterable...
From another file I need to be able to iterate among PARAMs:</p>
<pre><code>import Parameters

for param in Parameters:
    # do sth
</code></pre>
<p>Unfortunately, for my solution I have error: <code>for param in Parameters:
TypeError: 'type' object is not iterable</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for param in Parameters:
   #
</code></pre>
<p>Above will not work because <code>Parameters</code> is class and it is not iterable.</p>
<pre><code>class Parameters(Enum):
    PARAM1 = (0, "some msg 1")
    PARAM2 = (1, "some msg 2")
</code></pre>
<p><code>PARAM1</code> and <code>PARAM2</code> are <strong>class variables</strong> in above case.</p>
<hr/>
<p>We have to do something like this:</p>
<pre><code>class Enum(object):
    def __init__(self, value):
        self.value = value[0]
        self.msg = value[1]

class Parameters(Enum):
    def _init__(self, value):
        super.__init__(value)

PARAM1 = (0, "some msg 1")
PARAM2 = (1, "some msg 2")
for param in [PARAM1, PARAM2]:
    print Parameters(param)
</code></pre>
<p><strong>[Edit 1]</strong>:</p>
<p>Create number of objects by for loop with range function </p>
<p><strong>code</strong>:</p>
<pre><code>for i in range(100):
    param = (i, "some mesg %s"%i)
    print Parameters(param)
</code></pre>
<p><strong>[Edit 2]</strong>:</p>
<p>Get values from the User by <code>raw_input</code> function and type conversion from the string to integer</p>
<p><strong>Demo</strong>: </p>
<pre><code>&gt;&gt;&gt; no = raw_input("Enter Number of objects you want to create(Give only number): ")
Enter Number of objects you want to create(Give only number): 33
&gt;&gt;&gt; no
'33'
&gt;&gt;&gt; type(no)
&lt;type 'str'&gt;
&gt;&gt;&gt; no_int = int(no)
&gt;&gt;&gt; type(no_int)
&lt;type 'int'&gt;
</code></pre>
<p><strong>Note</strong>:</p>
<p>use <code>raw_input()</code> in <strong>Python 2.x</strong></p>
<p>use <code>input()</code> in <strong>Python 3.x</strong></p>
<p><strong>[Edit 3]</strong>: Hardcode values by <strong>Instance variables method</strong>.</p>
<p>Define class in <code>hardcoded_values.py</code> file </p>
<pre><code>class Hardcodes():
    def __init__(self,):
        self.para1 = (1, "some msg 1")
        self.para2 = (2, "some msg 2")
        self.para3 = (3, "some msg 3")
        self.para4 = (4, "some msg 4")
</code></pre>
<p>Import <code>Hardcodes</code> class in <code>test.py</code> file</p>
<pre><code>#- Create Object(instance) 
from hardcoded_values import Hardcodes
obj = Hardcodes()
hardcode_values = obj.__dict__
for i in hardcode_values.iteritems():
    print i
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>$ python test.py 

('para3', (3, 'some msg 3'))
('para2', (2, 'some msg 2'))
('para1', (1, 'some msg 1'))
('para4', (4, 'some msg 4'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the backported <a href="https://pypi.python.org/pypi/enum34" rel="nofollow"><code>enum</code></a> module (<a href="https://docs.python.org/3/library/enum.html" rel="nofollow">documentation</a>):</p>
<pre><code>from enum import Enum


class Parameters(Enum):
    PARAM1 = (0, "some msg 1")
    PARAM2 = (1, "some msg 2")

for i in Parameters:
    print(i, '=', i.value)
</code></pre>
<p>which prints:</p>
<blockquote>
<p>Parameters.PARAM1 = (0, 'some msg 1')</p>
<p>Parameters.PARAM2 = (1, 'some msg 2')</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Check out the <code>myo.utils.enum.Enumeration</code> class: <a href="https://github.com/NiklasRosenstein/myo-python/blob/9335663d00df762b29e0c0f12550d8d73aa097b6/myo/utils/enum.py" rel="nofollow">https://github.com/NiklasRosenstein/myo-python/blob/9335663d00df762b29e0c0f12550d8d73aa097b6/myo/utils/enum.py</a></p>
</div>
<span class="comment-copy">Thanks! Is there any way to make: 'for param in [PARAM1, PARAM2]' independent from PARAMs names?</span>
<span class="comment-copy">means I am not getting. <code>PARAM1</code> and <code>PARAM2</code> are variables of <code>tuple</code> types. You means you have to generate more variable like <code>PARAM1</code> ?</span>
<span class="comment-copy">I mean that I can have a lot of PARAMs (f.g PARAM1 - ... - PARAM101) and I would like to be able to iterate on every PARAM without knowing its name</span>
<span class="comment-copy">ok, I will update answer.</span>
<span class="comment-copy">@Konrad: updated answer, can you check</span>
<span class="comment-copy">Hey Joschua! But I'm using Python 2.6</span>
<span class="comment-copy">Hi, I think it's also available for Python 2.6. I'm curious though, why do you use Python 2.6 instead of Python 2.7. Aren't they compatible (i.e. you could replace the older version with the newer one without any ramifications)? btw. Are you on Windows or Linux?</span>
<span class="comment-copy">Unfortunately I cannot change the environment that I'm working on :&lt; It needs to be compatible with many machines in our network and there I have only Python 2.6. I am on Linux</span>
<span class="comment-copy">It's backported down to 2.4, so this would be the best solution.</span>
<span class="comment-copy">@Konrad Then you should be able to install it with <code>sudo pip install enum34</code>. And <a href="http://stackoverflow.com/questions/24294467/how-to-install-pip-for-python-2-6">here</a>'s how to install pip if it isn't.</span>
