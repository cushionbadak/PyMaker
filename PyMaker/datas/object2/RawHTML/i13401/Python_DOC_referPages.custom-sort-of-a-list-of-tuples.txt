<div class="post-text" itemprop="text">
<p>I only started learning Python few days ago, and I wanted to implement my little project in it. I need to sort a list of <code>(string, integer)</code> in a descending order by the number value, but alphabetically if the number is the same for more than one tuple. So I have a list, say:</p>
<pre><code>tuples = [('ggg', 5), ('aaa', 5), ('bbb', 6), ('zzz', 6)]
tuples.sort(key=lambda score: score[1], reverse=True)
</code></pre>
<p>This returns:</p>
<pre><code>[('bbb', 6), ('zzz', 6), ('ggg', 5), ('aaa', 5)]
</code></pre>
<p>But what I want to get is:</p>
<pre><code>[('bbb', 6), ('zzz', 6), ('aaa', 5), ('ggg', 5)]
</code></pre>
<p>In Java I just implemented a comparator for a custom tuple:</p>
<pre><code>class Pair {
    public final String s;
    public final Integer i;

    public Pair(String s, Integer i) {
        this.s = s;
        this.i = i;
    }
}

class PairComparator implements Comparator&lt;Pair&gt; {

    @Override
    public int compare(Pair p1, Pair p2) {
        int c = p1.i.compareTo(p2.i);
        return (c == 0) ? p1.s.compareTo(p2.s) : c * (-1);
    }
}
</code></pre>
<p>But I'm not sure how to go about doing that in a <code>lambda</code> expression in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps the simplest way would be have <code>key</code> return a tuple and multiply the score by -1. For example:</p>
<pre><code>&gt;&gt;&gt; tuples.sort(key=lambda x: (-x[1], x[0]))
&gt;&gt;&gt; tuples
[('bbb', 6), ('zzz', 6), ('aaa', 5), ('ggg', 5)]
</code></pre>
<p>This will sort the integers in descending order and then the strings in ascending order.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just sort based on negative shape of the number and don't use the <code>reverse=True</code> :</p>
<pre><code>&gt;&gt;&gt; &gt;&gt;&gt; tuples.sort(key=lambda x:(-x[1],x[0]))
&gt;&gt;&gt; tuples
[('bbb', 6), ('zzz', 6), ('aaa', 5), ('ggg', 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option is to sort them twice using operator module function <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter()</code></a>. We first sort by the first element in ascending order and then sort by the second element in descending order(though this is less efficient).</p>
<pre><code>In [1]: from operator import itemgetter

In [2]: tuples = [('ggg', 5), ('aaa', 5), ('bbb', 6), ('zzz', 6)]

In [3]: tuples.sort(key=itemgetter(0)) # [('aaa', 5), ('bbb', 6), ('ggg', 5), ('zzz', 6)]

In [4]: tuples.sort(key=itemgetter(1), reverse=True) # sort by 2nd element in descending order

In [5]: tuples
Out[5]: [('bbb', 6), ('zzz', 6), ('aaa', 5), ('ggg', 5)]
</code></pre>
</div>
<span class="comment-copy">So you want descending on the number &amp; then ascending on the letters?</span>
<span class="comment-copy">FWIW, Python 2 allows a custom comparison function argument for <code>sort</code> (and <code>max</code> &amp; <code>min</code>), but that's been phased out in Python 3, since it's less efficient: a custom key function only needs to be called once for each key, but a custom comparison function gets called on <i>every</i> comparison.</span>
<span class="comment-copy">It <i>is</i> possible to implement custom comparison in Python 3: create a class that implements the <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer">rich comparison</a> methods. OTOH, Python's built-in <code>sort</code> (aka Timsort) is stable, so it may be adequate to just sort the list multiple times with different keys, rather than using a custom comparison when you have a complex sorting requirement.</span>
<span class="comment-copy">I should've known I'd get ninja'd if I posted a comment. :)</span>
<span class="comment-copy">It's happened to me more times than I can count :-)</span>
<span class="comment-copy">If you don't specify <code>x[0]</code> in the key <i>it will be ignored</i> and since Timsort is stable, the ordering of items based on <code>x[0]</code> won't change. Try your code on <code>[('bbb', 6), ('zzz', 6), ('aaa', 5), ('xxx', 5), ('ggg', 5)]</code>.</span>
<span class="comment-copy">@PM2Ring oh yeah I missed the <code>lambda</code>, thanks for reminding.</span>
