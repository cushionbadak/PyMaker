<div class="post-text" itemprop="text">
<p>While I read just about every post related to timezone conversions I'm still having some issues and my converted time is incorrect</p>
<p><strong>settings.py</strong></p>
<pre><code>TIME_ZONE = 'UTC'
USE_TZ = True
</code></pre>
<p><strong>views.py</strong></p>
<pre><code>utc = datetime.utcnow()
instance_time_zone = pytz.timezone(instance.timezone) # 'US/Pacific'
start_date = instance_time_zone.localize(datetime.utcnow(), is_dst=None)
</code></pre>
<p><strong>template.html</strong></p>
<pre><code>utc: Oct. 2, 2015, 5:32 p.m. #correct time
start_date: Oct. 3, 2015, 1:32 a.m. #incorrect time
</code></pre>
<p>For some reason, the converted time is wrong and 15 hours ahead of the Pacific Time and 8 hours ahead of the UTC time.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>timezone.localize()</code> should be used for <em>naive</em> <code>datetime</code> objects (objects with no timezone of their own). The timezone is attached to that <code>datetime</code> as if the date and time are correct <em>for that timezone</em>. So in your case you 'localised' UTC as if it is your local time without DST, shifting it 8 hours in the wrong direction.</p>
<p>You used a UTC timestamp however, so you need to attach the UTC timezone to that, then <em>move</em> the timestamp to the desired timezone:</p>
<pre><code>utc = pytz.utc.localize(datetime.utcnow())
instance_time_zone = pytz.timezone(instance.timezone) # 'US/Pacific'
start_date = utc.astimezone(instance_time_zone)
</code></pre>
<p>Note that the <code>utc</code> value is now a <code>datetime</code> object with timezone, so you can then use the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="nofollow noreferrer"><code>datetime.astimezone()</code> method</a> to produce a value in the desired target timezone from it.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; utc = pytz.utc.localize(datetime.utcnow())
&gt;&gt;&gt; utc
datetime.datetime(2015, 10, 2, 17, 58, 10, 168575, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; instance_time_zone = pytz.timezone('US/Pacific')
&gt;&gt;&gt; utc.astimezone(instance_time_zone)
datetime.datetime(2015, 10, 2, 10, 58, 10, 168575, tzinfo=&lt;DstTzInfo 'US/Pacific' PDT-1 day, 17:00:00 DST&gt;)
</code></pre>
<p>Now the produced <code>datetime</code> is properly 5 hours removed from UTC.</p>
<p>If you are outputting these values into a Django template, however, note that Django will <em>also transform the timezone</em>. See the <a href="https://docs.djangoproject.com/en/stable/topics/i18n/timezones/" rel="nofollow noreferrer">Django timezone documentation</a>, specifically the <a href="https://docs.djangoproject.com/en/stable/topics/i18n/timezones/#time-zone-aware-output-in-templates" rel="nofollow noreferrer">section on using aware datetime objects in templates</a>:</p>
<blockquote>
<p>When you enable time zone support, Django converts aware datetime objects to the <a href="https://docs.djangoproject.com/en/stable/topics/i18n/timezones/#default-current-time-zone" rel="nofollow noreferrer">current time zone</a> when they’re rendered in templates. This behaves very much like format localization.</p>
</blockquote>
<p>and from the <a href="https://docs.djangoproject.com/en/stable/topics/i18n/timezones/#default-current-time-zone" rel="nofollow noreferrer"><em>current time zone</em> section</a>:</p>
<blockquote>
<p>You should set the current time zone to the end user’s actual time zone with <a href="https://docs.djangoproject.com/en/stable/ref/utils/#django.utils.timezone.activate" rel="nofollow noreferrer"><code>activate()</code></a>. Otherwise, the default time zone is used.</p>
</blockquote>
<p>It then doesn't matter what timezone you moved the <code>datetime</code> object to; it'll use whatever is the current timezone to display the value. You generally want to use aware <code>datetime</code> objects in the UTC timezone, then use <code>activate()</code> to switch what timezone everything is displayed in.</p>
<p>So in <em>Django</em>, just use <a href="https://docs.djangoproject.com/en/stable/ref/utils/#django.utils.timezone.now" rel="nofollow noreferrer"><code>timezone.now()</code></a> everywhere, and let the templating system worry about converting that to a given timezone.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get the current time in django, use <a href="https://docs.djangoproject.com/en/1.8/topics/i18n/timezones/" rel="nofollow noreferrer"><code>timezone.now()</code></a>:</p>
<pre><code>from django.utils import timezone

start_date = timezone.now()
</code></pre>
<p>If <code>instance.timezone</code> refers to the same timezone as <a href="https://docs.djangoproject.com/en/1.8/ref/utils/#django.utils.timezone.get_current_timezone" rel="nofollow noreferrer"><code>timezone.get_current_timezone()</code> (default is <code>TIME_ZONE</code>)</a> then it is all you need (<code>timezone.now()</code> returns an aware datetime object in UTC (if <code>USE_TZ=True</code>) that is converted during rendering to the current time zone).</p>
<p>Otherwise, you could call <a href="https://docs.djangoproject.com/en/1.8/ref/utils/#django.utils.timezone.activate" rel="nofollow noreferrer"><code>timezone.activate(instance.timezone)</code></a> to set the current time zone.</p>
<p>If you want (you don't need to) you can convert the timezones explicitly:</p>
<pre><code>import pytz
from django.utils import timezone

now = timezone.localtime(timezone.now(), pytz.timezone(instance.timezone))
</code></pre>
<p>Outside django code, you could get the current time in a given timezone by passing the tzinfo explicitly:</p>
<pre><code>from datetime import datetime
import pytz

start_date = datetime.now(pytz.timezone('America/Los_Angeles'))
</code></pre>
<p><a href="https://stackoverflow.com/q/31886808/4279">It works even during ambiguous local times.</a></p>
<p>To convert an existing naive datetime object that represents time in a given pytz timezone:</p>
<pre><code>start_date = instance_time_zone.localize(datetime_in_instance_time_zone,
                                         is_dst=None)
</code></pre>
<p>This code raises an exception for ambiguous/non-existing times in instance time zone (e.g. during DST transitions). If it is ok to return an imprecise result in some cases instead of an exception then don't pass <code>is_dst=None</code>:</p>
<pre><code>tz = instance_time_zone
start_date = tz.normalize(tz.localize(datetime_in_instance_time_zone))
</code></pre>
<p>For more details about <code>is_dst</code>, see <a href="https://stackoverflow.com/a/32727761/4279">"Can I just always set is_dst=True?" section</a>.</p>
</div>
<span class="comment-copy">Thank you for the feedback! For some reason when I run your code I do get Oct. 2, 2015, 6:03 p.m.. Any suggestions?</span>
<span class="comment-copy">@WayBehind: is your PC timezone correctly configured?</span>
<span class="comment-copy">@WayBehind: Your <code>datetime.utcnow</code> output certainly looked correct though, so I'm not sure what is going on on your system, to be honest. Does the <code>utc</code> output match mine (or at least a few minutes later)? If you get Oct. 2, 2015, 6:03 p.m., is that the UTC output or the <code>start_date</code> output? It <i>is</i> 6:10 p.m. UTC now, after all.</span>
<span class="comment-copy">Yes, thats what I get. 6:03 pm Even my server is showing wrong time. Any ideas?</span>
<span class="comment-copy">That's the UTC time. How certain are you that the <code>instance.timezone</code> is indeed <code>US/Pacific</code>, and that you are not accidentally using the <code>utc</code> value and not the return value of <code>utc.astimezone()</code>?</span>
<span class="comment-copy">Thanks for the feedback!</span>
