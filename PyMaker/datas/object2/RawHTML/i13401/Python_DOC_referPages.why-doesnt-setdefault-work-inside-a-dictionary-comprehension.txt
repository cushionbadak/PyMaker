<div class="post-text" itemprop="text">
<p>Why does setdefault not increment by 1 for every occurrence in <code>a</code> inside a dictionary comprehension, but it does in a loop? What's going on here? </p>
<p>Alternative solutions are great. I'm mostly interested in understanding why this doesn't work. </p>
<h2>A loop with setdefault works</h2>
<pre><code>a = [1,1,2,2,2,3,3]

b = {}

for x in a:
    b[x] = b.setdefault(x, 0) + 1

b

Out[4]: {1: 2, 2: 3, 3: 2}
</code></pre>
<h2>A dictionary comprehension with setdefault doesn't work</h2>
<pre><code>b = {k: b.setdefault(k, 0) + 1 for k in a}

b

Out[7]: {1: 1, 2: 1, 3: 1}
</code></pre>
<h2>Update</h2>
<p>Thanks for the answers, I wanted to try timing the solutions.</p>
<pre><code>def using_get(a):
    b = {}
    for x in a:
        b[x] = b.get(x, 0) + 1
    return b


def using_setdefault(a):
    b = {}
    for x in a:
        b[x] = b.setdefault(x, 0) + 1
    return b


timeit.timeit(lambda: Counter(a), number=1000000)
Out[3]: 15.19974103783569

timeit.timeit(lambda: using_get(a), number=1000000)
Out[4]: 3.1597984457950474

timeit.timeit(lambda: using_setdefault(a), number=1000000)
Out[5]: 3.231248461129759
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is <em>no dictionary yet</em> inside the dict comprehension. You are building a completely new dictionary, <strong>replacing</strong> whatever <code>b</code> was bound to before.</p>
<p>In other words, in your dictionary comprehension, <code>b.setdefault()</code> is a totally different dictionary, it has nothing to do with the object being built by the comprehension.</p>
<p>In fact, your dictionary comprehension only works if <code>b</code> was bound to an object with a <code>.setdefault()</code> method before you run the expression. If <code>b</code> is not yet defined, or not bound to an object with such a method, it simply fails with an exception:</p>
<pre><code>&gt;&gt;&gt; a = [1,1,2,2,2,3,3]
&gt;&gt;&gt; b = {k: b.setdefault(k, 0) + 1 for k in a}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;dictcomp&gt;
NameError: global name 'b' is not defined
&gt;&gt;&gt; b = 42
&gt;&gt;&gt; b = {k: b.setdefault(k, 0) + 1 for k in a}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;dictcomp&gt;
AttributeError: 'int' object has no attribute 'setdefault'
</code></pre>
<p>You cannot do what you want with a dictionary comprehension, unless you group your numbers, which requires sorting and <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby()</code></a>; this is <em>not</em> an efficient approach (requiring O(NlogN) steps rather than O(N)):</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; {k: sum(1 for _ in group) for k, group in groupby(sorted(a))}
{1: 2, 2: 3, 3: 2}
</code></pre>
<p>Note that the standard library already comes with a tool to do counting; see the <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter()</code> object</a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(a)
Counter({2: 3, 1: 2, 3: 2})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually, your second snippet raises a <code>NameError</code> if you try it in a clean namespace (one where there's no prior definition of <code>b</code>):</p>
<pre><code>bruno@bigb:~/Work/playground$ python
Python 2.7.3 (default, Jun 22 2015, 19:33:41) 
&gt;&gt;&gt; a = [1,1,2,2,2,3,3]
&gt;&gt;&gt; b = {k: b.setdefault(k, 0) + 1 for k in a}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;dictcomp&gt;
NameError: global name 'b' is not defined
</code></pre>
<p>Which should give you a hint at what went wrong.</p>
<p>The statement:</p>
<pre><code>b = {k: b.setdefault(k, 0) + 1 for k in a}
</code></pre>
<p><em>first</em> evaluates (well, actually tries to...) the right-hand side expression <code>{k: b.setdefault(k, 0) + 1 for k in a}</code>, and <em>then</em> binds the result to name <code>b</code>. </p>
<p>If <code>b</code> is not defined when the expression is eval'd, you get the above exception (of course). If it's defined and bound to a dict (or whatever have a  <code>setdefault(x, y)</code> method FWIW) you get the result of calling <code>setdefault()</code> on whathever <code>b</code> is bound to at this point.</p>
</div>
<div class="post-text" itemprop="text">
<p>This does not work because <code>b</code> is not defined before the dictionary comprehension is completed. Normally, you should get a <code>NameError</code> for this; if not, then because you already defined <code>b</code> before, but this will be a different dictionary.</p>
<p>Having said that: It seems that you can just use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> for this.</p>
<pre><code>&gt;&gt;&gt; a = [1,1,2,2,2,3,3]
&gt;&gt;&gt; collections.Counter(a)
Counter({2: 3, 1: 2, 3: 2})
</code></pre>
</div>
<span class="comment-copy">Because <code>b</code> is not defined at the time the comprehension is executed. BTW, have you tried <code>b = collections.Counter(a)</code>?</span>
<span class="comment-copy"><code>dict.setdefault</code> is an odd way to do this anyway - you'd usually use it with a mutable value, not an immutable one (e.g. <code>d.setdefault[x, []].append(...)</code>) . I would have written that <code>b[x] = b.get(x, 0) + 1</code>.</span>
<span class="comment-copy"><i>doesn't work</i>. Actually this works perfectly. If <code>b = {}</code>. initially, you will get a new dictionary (freshly assigned to <code>b</code>) with values for all keys for <code>a</code> and all values <code>= 0 + 1</code>. The original <code>b</code> is, however, gone. That's probably not what you expected, though. If <code>b</code> wasn't defined before the comprehension, you get <code>NameError</code>.</span>
