<div class="post-text" itemprop="text">
<p>Example:</p>
<pre><code>class Planet(Enum):

    MERCURY = (mass: 3.303e+23, radius: 2.4397e6)

    def __init__(self, mass, radius):
        self.mass = mass       # in kilograms
        self.radius = radius   # in meters
</code></pre>
<p>Ref: <a href="https://docs.python.org/3/library/enum.html#planet" rel="noreferrer">https://docs.python.org/3/library/enum.html#planet</a></p>
<p>Why do I want to do this?  If there are a few primitive types (int, bool) in the constructor list, it would be nice to used named arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>While you can't use named arguments the way you describe with enums, you can get a similar effect with a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"><code>namedtuple</code></a> mixin:</p>
<pre><code>from collections import namedtuple
from enum import Enum

Body = namedtuple("Body", ["mass", "radius"])

class Planet(Body, Enum):

    MERCURY = Body(mass=3.303e+23, radius=2.4397e6)
    VENUS   = Body(mass=4.869e+24, radius=6.0518e6)
    EARTH   = Body(mass=5.976e+24, radius=3.3972e6)
    # ... etc.
</code></pre>
<p>... which to my mind is cleaner, since you don't have to write an <code>__init__</code> method.</p>
<p>Example use:</p>
<pre><code>&gt;&gt;&gt; Planet.MERCURY
&lt;Planet.MERCURY: Body(mass=3.303e+23, radius=2439700.0)&gt;
&gt;&gt;&gt; Planet.EARTH.mass
5.976e+24
&gt;&gt;&gt; Planet.VENUS.radius
6051800.0
</code></pre>
<p>Note that, as per <a href="https://docs.python.org/3/library/enum.html#others">the docs</a>, "mix-in types must appear before <code>Enum</code> itself in the sequence of bases".</p>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer by @zero-piraeus can be slightly extended to allow default arguments as well.  This is very handy when you have a large enum with most entries having the same value for an element.</p>
<pre><code>class Body(namedtuple('Body', "mass radius moons")):
    def __new__(cls, mass, radius, moons=0):
        return super().__new__(cls, mass, radius, moons)
    def __getnewargs__(self):
        return (self.mass, self.radius, self.moons)

class Planet(Body, Enum):

    MERCURY = Body(mass=3.303e+23, radius=2.4397e6)
    VENUS   = Body(mass=4.869e+24, radius=6.0518e6)
    EARTH   = Body(5.976e+24, 3.3972e6, moons=1)
</code></pre>
<p>Beware pickling will not work without the <code>__getnewargs__</code>.</p>
<pre><code>class Foo:
    def __init__(self):
        self.planet = Planet.EARTH  # pickle error in deepcopy

from copy import deepcopy

f1 = Foo()
f2 = deepcopy(f1)  # pickle error here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If going beyond the <code>namedtuple</code> mix-in check out the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum</code></a> library<sup>1</sup>.  Besides having a few extra bells and whistles for <code>Enum</code> it also supports <code>NamedConstant</code> and a metaclass-based <code>NamedTuple</code>.</p>
<p>Using <code>aenum.Enum</code> the above code could look like:</p>
<pre><code>from aenum import Enum, enum, _reduce_ex_by_name

class Planet(Enum, init='mass radius'):
    MERCURY = enum(mass=3.303e+23, radius=2.4397e6)
    VENUS   = enum(mass=4.869e+24, radius=6.0518e6)
    EARTH   = enum(mass=5.976e+24, radius=3.3972e6)
    # replace __reduce_ex__ so pickling works
    __reduce_ex__ = _reduce_ex_by_name
</code></pre>
<p>and in use:</p>
<pre><code>--&gt; for p in Planet:
...     print(repr(p))
&lt;Planet.MERCURY: enum(radius=2439700.0, mass=3.3030000000000001e+23)&gt;
&lt;Planet.EARTH: enum(radius=3397200.0, mass=5.9760000000000004e+24)&gt;
&lt;Planet.VENUS: enum(radius=6051800.0, mass=4.8690000000000001e+24)&gt;

--&gt; print(Planet.VENUS.mass)
4.869e+24
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.6.1+ the <a href="https://docs.python.org/3.6/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer">typing.NamedTuple</a> can be used, which also allows for setting default values, which leads to prettier code. The example by @shao.lo then looks like this:</p>
<pre><code>from enum import Enum
from typing import NamedTuple


class Body(NamedTuple):
    mass: float
    radius: float
    moons: int=0


class Planet(Body, Enum):
    MERCURY = Body(mass=3.303e+23, radius=2.4397e6)
    VENUS   = Body(mass=4.869e+24, radius=6.0518e6)
    EARTH   = Body(5.976e+24, 3.3972e6, moons=1)
</code></pre>
<p>This also supports pickling. The typing.Any can be used if you don't want to specify the type. </p>
<p>Credit to @monk-time, who's answer <a href="https://stackoverflow.com/a/43157792/5693369">here</a> inspired this solution.</p>
</div>
<span class="comment-copy">Very cool.  I never considered solving the problem with a mixin.</span>
<span class="comment-copy">Ingenious.  Have an up-vote.  :)</span>
<span class="comment-copy">@ZeroPiraeus:  I added an answer, but not for the bounty -- just hoping for some up-votes (long way to go for my [python-3.x] gold badge! ;) .</span>
<span class="comment-copy">That's a nice tweak on the original idea, thanks!</span>
<span class="comment-copy">Good extension!  Have an up-vote.  :)</span>
<span class="comment-copy">@zero-piraeus Thank you sir!</span>
