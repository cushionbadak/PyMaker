<div class="post-text" itemprop="text">
<p>Very simple question from a Python newbie:</p>
<p>My understanding is that the keys in a dict are able to be just about any immutable data type. Is it possible to pass an immutable object (e.g., a member of an enum class) as a key in the **kwargs dictionary for a function or a class? I have tried it and the answer seems to be "no":</p>
<pre><code>from enum import Enum
class MyEnum(Enum):
    X= 'X'
    Y= 'Y'
def func(*args,**kwargs):
    pass
func(MyEnum.X = 1)
</code></pre>
<p>Output:</p>
<pre><code>"SyntaxError: keyword can't be an expression"
</code></pre>
<p>However, there may be something I am missing.</p>
<p>EDIT: Note that I am not trying to make the key equal to <code>MyEnum.X.value</code> (which is a string in this case); I want the key to be the actual <code>Enum</code> object, e.g. <code>MyEnum.X</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're doing:</p>
<pre><code>func(MyEnum.X = 1)
</code></pre>
<p>Here, the problem is <code>MyEnum.X = 1</code> -- Your keyword (<code>MyEnum.X</code>) is actually an expression (<code>getattr(MyEnum, 'X')</code>), and expressions can't be used as keywords in function calls.  In fact, only <a href="https://docs.python.org/2/glossary.html#term-argument" rel="nofollow"><em>identifiers</em></a> can be used as keywords.</p>
<p>To get your call to work, you'll need to use dictionary unpacking like this:</p>
<pre><code>func(**{MyEnum.X.name: 1})
</code></pre>
<hr/>
<p>Note, to get the name of the attribute, I needed to do <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow"><code>MyEnum.X.name</code></a> or <code>MyEnum.X.value</code>, depending on how you set up your enum -- In your case, I they are the same thing.</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class Foo(Enum):
...   X = 'X'
... 
&gt;&gt;&gt; Foo.X.value
'X'
&gt;&gt;&gt; Foo.X.name
'X'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This won't work, because of the way keyword arguments are being processed. <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow">The documentation</a> says:</p>
<blockquote>
<p>[...] Next, for each keyword argument, the identifier is used to determine the corresponding slot (if the identifier is the same as the first formal parameter name, the first slot is used, and so on) [...]</p>
</blockquote>
<p>So there must be a way to match the key from the dictionary to the formal parameter name. The exception:</p>
<blockquote>
<p>keywords must be strings</p>
</blockquote>
<p>when you try to pass something that's not a string:</p>
<pre><code>func(**{MyEnum.X: 1})
</code></pre>
<p>suggest the simplest case is required: keys must be strings.</p>
<p>A possible workaround is to make implicit things explicit: just create a class that contains all the necessary information you want to pass in its attributes and pass it. The code will surely be more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer to my original question is indeed "no". However, thanks to the input from mgilson and BartoszKP and others, the following work around I came up with is not a bad solution, and solves my current problem. I offer it for others to look at who are trying to do something similar: </p>
<pre><code>from enum import Enum
class MyEnum(Enum):
    X= 'X'
    Y= 'Y'

def func(*args,**kwargs):
    #replace kwargs with kwargsNew
    kwargsNew = {}
    for kwkey, kwvalue in kwargs.items():
        try: kwargsNew[MyEnum(kwkey)] = kwvalue
        except ValueError: kwargsNew[kwkey] = kwvalue
    doStuffWithKwargs(kwargsNew)

def doStuffWithKwargs(k):
    for K in k:
        print(K)

#Pass the name X or Y as the key; 
#all other keys not found in `MyEnum` are treated normally
func(X = 1, Y = 2, Z = 3)
</code></pre>
<p>Output:</p>
<pre><code>Z
MyEnum.X
MyEnum.Y
</code></pre>
<p>(no errors)</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you actually want to create an instnace of MyEnum?</p>
<pre><code> myenum = MyEnum()
 func(myenum.X = 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One alternative I have found is to pass a dict into <code>*args</code> instead of <code>**kwargs</code>, or to assign a dict to <code>kwargs[0]</code> directly: </p>
<pre><code>func({MyEnum.X: 1})
func(kwargs = {MyEnum.X: 1})
</code></pre>
<p>(No errors produced)</p>
<p>However, I really don't like either of these methods. </p>
<p>EDIT: See <a href="https://stackoverflow.com/questions/26615451/use-an-object-e-g-an-enum-as-a-key-in-kwargs/26616503#26616503">my second answer</a> for a much better solution. </p>
</div>
<span class="comment-copy">The key in a dict can be any (hashable) object, but keyword arguments in a function call can only be plain names, not expressions.  (They can still be any hashable object; this is a syntactic restriction, not a restriction on what kinds of values can be used.)</span>
<span class="comment-copy">You should also be getting an error resulting from your <code>import</code> statement; I think you mean <code>from enum import Enum</code> instead.</span>
<span class="comment-copy">What are you trying to do? <code>MyEnum.X</code> is already a value, so what would it mean to assign 1 to a value? You seem to be confusing passing a dictionary as an argument to a function with the fact that arbitrary keyword arguments are passed <i>using</i> a dictionary.</span>
<span class="comment-copy">What keyword argument do you actually want to be passed?  Do you want the effect of <code>func(X=1)</code> (using the string value of the Enum), or do you actually want the Enum object <code>MyEnum.X</code> to be passed as the key (which isn't possible in Python 3)?</span>
<span class="comment-copy">I wanted to pass the actual Enum object. If it isn't possible, it isn't possible. I can probably do things differently.</span>
<span class="comment-copy"><code>func(**{MyEnum.X:1})</code> / <code>TypeError: func() keywords must be strings</code>, at least on 3.4.0.</span>
<span class="comment-copy">That solution will only work if the key is actually a string, which is generally not the case with <code>enum</code>.</span>
<span class="comment-copy">@Robáµ© -- Thanks, My impression was that MyEnum.X would be <code>X</code>.  I suppose I should work more with Enums.</span>
<span class="comment-copy"><code>MyEnum.X</code> is of type <code>MyEnum</code>, not string. <code>MyEnum.X.value</code> is a string (in this case).</span>
<span class="comment-copy">@RickTeachey -- thanks, that's what I needed to find the correct docs.</span>
<span class="comment-copy">No. This is just a simplified example. I was wanting to populate my enum with valid keys, and then be able to iterate through the keys in a class definition. I could do the same with a dictionary instead of enum, but I'd still have the same "can't be an expression" problem.</span>
<span class="comment-copy">Actually, on second thought, perhaps not. I'm sure there are times you'd want to be able to use an enum as a key though.</span>
