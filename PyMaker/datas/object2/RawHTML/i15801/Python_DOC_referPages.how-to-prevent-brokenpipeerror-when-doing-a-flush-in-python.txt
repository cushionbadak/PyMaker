<div class="post-text" itemprop="text">
<p>Question: Is there a way to use <code>flush=True</code> for the <code>print()</code> function without getting the <a href="https://docs.python.org/3/library/exceptions.html#BrokenPipeError" rel="noreferrer"><code>BrokenPipeError</code></a>?</p>
<p>I have a script <code>pipe.py</code>:</p>
<pre><code>for i in range(4000):
    print(i)
</code></pre>
<p>I call it like this from a Unix command line:</p>
<pre><code>python3 pipe.py | head -n3000
</code></pre>
<p>And it returns:</p>
<pre><code>0
1
2
</code></pre>
<p>So does this script:</p>
<pre><code>import sys
for i in range(4000):
    print(i)
    sys.stdout.flush()
</code></pre>
<p>However, when I run this script and pipe it to <code>head -n3000</code>:</p>
<pre><code>for i in range(4000):
    print(i, flush=True)
</code></pre>
<p>Then I get this error:</p>
<pre><code>    print(i, flush=True)
BrokenPipeError: [Errno 32] Broken pipe
Exception BrokenPipeError: BrokenPipeError(32, 'Broken pipe') in &lt;_io.TextIOWrapper name='&lt;stdout&gt;' mode='w' encoding='UTF-8'&gt; ignored
</code></pre>
<p>I have also tried the solution below, but I still get the <code>BrokenPipeError</code>:</p>
<pre><code>import sys
for i in range(4000):
    try:
        print(i, flush=True)
    except BrokenPipeError:
        sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>BrokenPipeError</code> is normal as said phantom because the reading process (head) terminates and closes its end of the pipe while the writing process (python) still tries to write.</p>
<p>Is <strong>is</strong> an abnormal condition, and the python scripts receives a <code>BrokenPipeError</code> - more exactly, the Python interpreter receives a system SIGPIPE signal that it catches and raises the <code>BrokenPipeError</code> to allow the script to process the error.</p>
<p>And you effectively can process the error, because in your last example, you only see a message saying that the exception was ignored - ok it is not true, but seems related to this <a href="http://bugs.python.org/issue11380,#msg153320">open issue</a> in Python : Python developpers think important to warn user of the abnormal condition.</p>
<p>What really happens is that AFAIK the python interpreter always signals this on stderr, even if you catch the exception. But you just have to close stderr before exiting to get rid of the message.</p>
<p>I slightly changed your script to :</p>
<ul>
<li>catch the error as you did in your last example</li>
<li>catch either IOError (that I get in Python34 on Windows64) or BrokenPipeError (in Python 33 on FreeBSD 9.0) - and display a message for that</li>
<li>display a custom <em>Done</em> message on stderr (stdout is closed due to the broken pipe)</li>
<li><strong>close stderr</strong> before exiting to get rid of the message</li>
</ul>
<p>Here is the script I used : </p>
<pre><code>import sys

try:
    for i in range(4000):
            print(i, flush=True)
except (BrokenPipeError, IOError):
    print ('BrokenPipeError caught', file = sys.stderr)

print ('Done', file=sys.stderr)
sys.stderr.close()
</code></pre>
<p>and here the result of <code>python3.3 pipe.py | head -10</code> :</p>
<pre class="lang-none prettyprint-override"><code>0
1
2
3
4
5
6
7
8
9
BrokenPipeError caught
Done
</code></pre>
<p>If you do not want the extraneous messages just use :</p>
<pre><code>import sys

try:
    for i in range(4000):
            print(i, flush=True)
except (BrokenPipeError, IOError):
    pass

sys.stderr.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the Python documentation, this is thrown when:</p>
<blockquote>
<p>trying to write on a pipe while the other end has been closed</p>
</blockquote>
<p>This is due to the fact that the head utility reads from <code>stdout</code>, <em>then promptly closes it</em>.</p>
<p>As you can see, it can be worked around by merely adding a <code>sys.stdout.flush()</code> after every <code>print()</code>.  Note that this sometimes does not work in Python 3.</p>
<p>You can alternatively pipe it to <code>awk</code> like this to get the same result as <code>head -3</code>:</p>
<pre><code>python3 0to3.py | awk 'NR &gt;= 4 {exit} 1'
</code></pre>
<p>Hope this helped, good luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>As you can see in the output that you had posted the last exception is raised in the destructor phase : that is why you have <code>ignored</code> at the end </p>
<pre><code>Exception BrokenPipeError: BrokenPipeError(32, 'Broken pipe') in &lt;_io.TextIOWrapper name='&lt;stdout&gt;' mode='w' encoding='UTF-8'&gt; ignored
</code></pre>
<p>A simple example to understand what's up in that context is the follow:</p>
<pre><code>&gt;&gt; class A():
...     def __del__(self):
...         raise Exception("It will be ignored!!!")
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; del a
Exception Exception: Exception('It will be ignored!!!',) in &lt;bound method A.__del__ of &lt;__builtin__.A instance at 0x7ff1d5c06d88&gt;&gt; ignored
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stderr.close()
&gt;&gt;&gt; del a
</code></pre>
<p>Every exception that is triggered while the object is destroyed will cause a standard error output that explain the exception occurred and ignored (that is because python will inform you that something could not be correctly handle in destroy phase). Anyway, that kind of exceptions cannot be cached and so you can just remove the calls that can generate it or close <code>stderr</code>.</p>
<p>Come back to the question. That exception is not a real problem (as say it is ignored) but if you don't want print it you must override the the function that can be called when the object will be destroyed or close <code>stderr</code> as @SergeBallesta correctly suggested : in you case you can <em>shutdown</em> <code>write</code> and <code>flush</code> function and no exception will be triggered in destroy context</p>
<p>That is an example of how you can do it:</p>
<pre><code>import sys
def _void_f(*args,**kwargs):
    pass

for i in range(4000):
    try:
        print(i,flush=True)
    except (BrokenPipeError, IOError):
        sys.stdout.write = _void_f
        sys.stdout.flush = _void_f
        sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Ignore SIGPPIE temporarily</strong></p>
<p>I'm not sure how bad an idea this is, but it works:</p>
<pre><code>#!/usr/bin/env python3

import signal
import sys

sigpipe_old = signal.getsignal(signal.SIGPIPE)
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
for i in range(4000):
    print(i, flush=True)
signal.signal(signal.SIGPIPE, sigpipe_old)
</code></pre>
</div>
<span class="comment-copy">I can't reproduce it on OS X 10.10, trying centOS 6.6 now.</span>
<span class="comment-copy">I just tried on OS X 10.9.4 and I was not able to reproduce it. I got the error on Ubuntu 12.04.2 LTS. I will try on Linux Mint Qiana.</span>
<span class="comment-copy">All of your scripts break for me, except the first one...</span>
<span class="comment-copy">x86 Kali 1.0.9a</span>
<span class="comment-copy">I am unable to reproduce the exception by running your script in Python 3.4.1. Which Python version are you using?</span>
<span class="comment-copy">Absolutely very cool :) Thank you! Also didn't know you can put exceptions in a tuple. Thanks for showing me that as well. This works for 3.3.2 and 3.4.0 on Mac OS X 10.9.4 and Ubuntu 12.04.2 LTS (all 4 combinations). It seems to work with both BrokenPipeError and IOError on their own; both part of OSError in &lt;a href="<a href='https://docs.python.org/3/library/exceptions.html#exception-hierarchy"&gt;the' rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> exception hierarchy&lt;/a&gt;.</span>
<span class="comment-copy">Thanks for this. Unfortunately the awk workaround is not an option. I don't know how many lines the real output produces. I'll leave the question unanswered for a few days, if you don't mind. Thanks again.</span>
<span class="comment-copy">@tommy.carstensen Does <code>sys.stdout.flush()</code> not work?  Also, with <code>head</code> don't you also have to know how many lines it will be anyway?</span>
<span class="comment-copy">@tommy.carstensen It is impossible to do what you are asking.  There is no workaround to enable <code>head</code> to work with your program in this manner.</span>
<span class="comment-copy">@tommy.carstensen It wouldn't be, because it's different depending on the program you pipe the output into.  The reason this error occurs is because when the program you pipe output into closes before your python script, it closes the output pipe, e.g. stdout.  You are better off either manually piping with <code>subprocess</code> or using python's regex capabilities instead of <code>grep</code>.</span>
<span class="comment-copy">@tommy.carstensen I am focusing on it.  I'm telling you it's not possible.  I quote <code>The reason this error occurs is because when the program you pipe output into closes before your python script, it closes the output pipe, e.g. stdout.</code></span>
<span class="comment-copy">This is not a solution.  He wants to be able to use it with <code>flush=True</code> with <code>print</code>.</span>
<span class="comment-copy">As I write i tested it on python 3.2... now I adapt it to python 3.4</span>
<span class="comment-copy">@phantom That is the version for <code>flush=True</code> in <code>print</code>... That is a solution isn't it?</span>
<span class="comment-copy">This also works. Thank you very much! I chose the answer from @serge-ballesta, because he replied slightly faster and avoided definition of a new function. Thank you both. I have much to learn about exceptions, which I have never sat down and read about.</span>
<span class="comment-copy">@tommy.carstensen Anyway I understand your choice because the Sarge Balestra answer is well written and that give a simple way to take a solution.</span>
