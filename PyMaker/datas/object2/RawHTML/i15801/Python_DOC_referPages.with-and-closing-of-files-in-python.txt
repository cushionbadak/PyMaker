<div class="post-text" itemprop="text">
<p>I have read, that file opened like this is closed automatically when leaving the with block:</p>
<pre><code>with open("x.txt") as f:
    data = f.read()
    do something with data
</code></pre>
<p>yet when opening from web, I need this:</p>
<pre><code>from contextlib import closing
from urllib.request import urlopen

with closing(urlopen('http://www.python.org')) as page:
    for line in page:
        print(line)
</code></pre>
<p>why and what is the difference? (I am using Python3)</p>
</div>
<div class="post-text" itemprop="text">
<p>The details get a little technical, so let's start with the simple version:</p>
<p>Some types know how to be used in a <code>with</code> statement. File objects, like what you get back from <code>open</code>, are an example of such a type. As it turns out, the objects that you get back from <code>urllib.request.urlopen</code>, are <em>also</em> an example of such a type, so your second example could be written the same way as the first.</p>
<p>But some types don't know how to be used in a <code>with</code> statement. The <code>closing</code> function is designed to wrap such types—as long as they have a <code>close</code> method, it will call their <code>close</code> method when you exit the <code>with</code> statement.</p>
<p>Of course some types don't know how to be used in a <code>with</code> statement, and also can't be used with <code>closing</code> because their cleanup method isn't named <code>close</code> (or because cleaning them up is more complicated than just closing them). In that case, you need to write a custom context manager. But even that isn't usually that hard.</p>
<hr/>
<p>In technical terms:</p>
<p>A <code>with</code> statement requires a <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="noreferrer">context manager</a>, an object with <code>__enter__</code> and <code>__exit__</code> methods. It will call the <code>__enter__</code> method, and give you the value returned by that method in the <code>as</code> clause, and it will then call the <code>__exit__</code> method at the end of the <code>with</code> statement.</p>
<p>File objects inherit from <a href="https://docs.python.org/3/library/io.html#i-o-base-classes" rel="noreferrer"><code>io.IOBase</code></a>, which is a context manager whose <code>__enter__</code> method returns itself, and whose <code>__exit__</code> calls <code>self.close()</code>.</p>
<p>The object returned by <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen" rel="noreferrer"><code>urlopen</code></a> is (assuming an <code>http</code> or <code>https</code> URL) an <a href="https://docs.python.org/3/library/http.client.html#httpresponse-objects" rel="noreferrer"><code>HTTPResponse</code></a>, which, as the docs say, "can be used with a <code>with</code> statement".</p>
<p>The <a href="https://docs.python.org/3/library/contextlib.html#contextlib.closing" rel="noreferrer"><code>closing</code></a> function:</p>
<blockquote>
<p>Return a context manager that closes thing upon completion of the block. This is basically equivalent to:</p>
</blockquote>
<pre><code>@contextmanager
def closing(thing):
    try:
        yield thing
    finally:
        thing.close()
</code></pre>
<hr/>
<p>It's not always 100% clear in the docs which types are context managers and which types aren't. Especially since there's been a major drive since 3.1 to make everything that could be a context manager into one (and, for that matter, to make everything that's mostly-file-like into an actual <code>IOBase</code> if it makes sense), but it's still not 100% complete as of 3.4.</p>
<p>You can always just try it and see. If you get an <code>AttributeError: __exit__</code>, then the object isn't usable as a context manager. If you think it should be, file a bug suggesting the change. If you don't get that error, but the docs don't mention that it's legal, file a bug suggesting the docs be updated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't. <code>urlopen('http://www.python.org')</code> returns a context manager too:</p>
<pre><code>with urlopen('http://www.python.org') as page:
</code></pre>
<p>This is documented on the <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen" rel="nofollow"><code>urllib.request.urlopen()</code> page</a>:</p>
<blockquote>
<p>For ftp, file, and data urls and requests explicity handled by legacy <code>URLopener</code> and <code>FancyURLopener</code> classes, this function returns a <code>urllib.response.addinfourl</code> object <strong>which can work as context manager</strong> [...].</p>
</blockquote>
<p>Emphasis mine. For HTTP responses, <a href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse" rel="nofollow"><code>http.client.HTTPResponse()</code> object</a> is returned, which also is a context manager:</p>
<blockquote>
<p>The response is an iterable object and <strong>can be used in a with statement</strong>.</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/library/urllib.request.html#examples" rel="nofollow"><em>Examples</em> section</a> also uses the object as a context manager:</p>
<blockquote>
<p>As the python.org website uses utf-8 encoding as specified in it’s meta tag, we will use the same for decoding the bytes object.</p>
<pre><code>&gt;&gt;&gt; with urllib.request.urlopen('http://www.python.org/') as f:
...     print(f.read(100).decode('utf-8'))
...
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtm
</code></pre>
</blockquote>
<p>Objects returned by <code>open()</code> are <a href="https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers" rel="nofollow">context managers</a> too; they implement the special methods <a href="https://docs.python.org/3/reference/datamodel.html#object.__enter__" rel="nofollow"><code>object.__enter__()</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__exit__" rel="nofollow"><code>object.__exit__()</code></a>.</p>
<p>The <a href="https://docs.python.org/3/library/contextlib.html#contextlib.closing" rel="nofollow"><code>contextlib.closing()</code> documentation</a> uses an example with <code>urlopen()</code> that is out of date; in Python 2 the predecessor for <code>urllib.request.urlopen()</code> did not produce a context manager and you needed to use that tool to auto-close the connection with a context manager. This was fixed with issues <a href="http://bugs.python.org/issue5418" rel="nofollow">5418</a> and <a href="http://bugs.python.org/issue12365" rel="nofollow">12365</a>, but that example was not updated. I created <a href="http://bugs.python.org/issue22755" rel="nofollow">issue 22755</a> asking for a different example.</p>
</div>
<span class="comment-copy">I was about to suggest that someone should file a docs bug on <code>contextlib</code> for this, and that if it's not you whoever it is should credit you… but before I could finish, Martijn already filed the bug, with the link back here. :)</span>
<span class="comment-copy">thanks for the detailed explanation!</span>
<span class="comment-copy">I was just about to write this :-).  the key is that the docs say that it returns a "file-like" object.  If it can't be used as a context manager, it's not actually file-like.</span>
<span class="comment-copy">but why is this example in the python docs, then? <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer">docs.python.org/3/library/contextlib.html</a></span>
<span class="comment-copy">@nekomimi: a holdover from Python 2 probably, where the object was not a context manager.</span>
<span class="comment-copy">The quoted docs aren't the relevant part. He's got an <code>http</code> url, which doesn't return an <code>addinfourl</code>, it returns an <code>HTTPResponse</code>. Of course those can <i>also</i> be used as context managers.</span>
<span class="comment-copy">@abarnert: as always, it is a little more complex. Thanks for correcting me, updated.</span>
