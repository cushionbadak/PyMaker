<div class="post-text" itemprop="text">
<p>I am currently working on a little pong game, I am wondering on how to add sound to my game so that when the ball bounces off of one of the paddles, it will make the sound I want. </p>
<p>This is my code, and my sound file that i have is called "blop.wav".</p>
<pre><code>import pygame
from pygame.locals import *
from sys import exit
import random

pygame.init()

screen=pygame.display.set_mode((640,480),0,32)
pygame.display.set_caption("Pong Pong!")

#Creating 2 bars, a ball and background.
back = pygame.Surface((640,480))
background = back.convert()
background.fill((0,0,0))
bar = pygame.Surface((10,50))
bar1 = bar.convert()
bar1.fill((0,0,255))
bar2 = bar.convert()
bar2.fill((255,0,0))
circ_sur = pygame.Surface((15,15))
circ = pygame.draw.circle(circ_sur,(0,255,0),(15/2,15/2),15/2)
circle = circ_sur.convert()
circle.set_colorkey((0,0,0))

# some definitions
bar1_x, bar2_x = 10. , 620.
bar1_y, bar2_y = 215. , 215.
circle_x, circle_y = 307.5, 232.5
bar1_move, bar2_move = 0. , 0.
speed_x, speed_y, speed_circ = 250., 250., 250.
bar1_score, bar2_score = 0,0
#clock and font objects
clock = pygame.time.Clock()
font = pygame.font.SysFont("calibri",40)

while True:

    for event in pygame.event.get():
        if event.type == QUIT:
            exit()
        if event.type == KEYDOWN:
            if event.key == K_UP:
                bar1_move = -ai_speed
            elif event.key == K_DOWN:
                bar1_move = ai_speed
        elif event.type == KEYUP:
            if event.key == K_UP:
                bar1_move = 0.
            elif event.key == K_DOWN:
                bar1_move = 0.

    score1 = font.render(str(bar1_score), True,(255,255,255))
    score2 = font.render(str(bar2_score), True,(255,255,255))

    screen.blit(background,(0,0))
    frame = pygame.draw.rect(screen,(255,255,255),Rect((5,5),(630,470)),2)
    middle_line = pygame.draw.aaline(screen,(255,255,255),(330,5),(330,475))
    screen.blit(bar1,(bar1_x,bar1_y))
    screen.blit(bar2,(bar2_x,bar2_y))
    screen.blit(circle,(circle_x,circle_y))
    screen.blit(score1,(250.,210.))
    screen.blit(score2,(380.,210.))

    bar1_y += bar1_move

# movement of circle
    time_passed = clock.tick(30)
    time_sec = time_passed / 1000.0

    circle_x += speed_x * time_sec
    circle_y += speed_y * time_sec
    ai_speed = speed_circ * time_sec
#AI of the computer.
    if circle_x &gt;= 305.:
        if not bar2_y == circle_y + 7.5:
            if bar2_y &lt; circle_y + 7.5:
                bar2_y += ai_speed
            if  bar2_y &gt; circle_y - 42.5:
                bar2_y -= ai_speed
        else:
            bar2_y == circle_y + 7.5

    if bar1_y &gt;= 420.: bar1_y = 420.
    elif bar1_y &lt;= 10. : bar1_y = 10.
    if bar2_y &gt;= 420.: bar2_y = 420.
    elif bar2_y &lt;= 10.: bar2_y = 10.
#since i don't know anything about collision, ball hitting bars goes like this.
    if circle_x &lt;= bar1_x + 10.:
        if circle_y &gt;= bar1_y - 7.5 and circle_y &lt;= bar1_y + 42.5:
            circle_x = 20.
            speed_x = -speed_x
    if circle_x &gt;= bar2_x - 15.:
        if circle_y &gt;= bar2_y - 7.5 and circle_y &lt;= bar2_y + 42.5:
            circle_x = 605.
            speed_x = -speed_x
    if circle_x &lt; 5.:
        bar2_score += 1
        circle_x, circle_y = 320., 232.5
        bar1_y,bar_2_y = 215., 215.
    elif circle_x &gt; 620.:
        bar1_score += 1
        circle_x, circle_y = 307.5, 232.5
        bar1_y, bar2_y = 215., 215.
    if circle_y &lt;= 10.:
        speed_y = -speed_y
        circle_y = 10.
    elif circle_y &gt;= 457.5:
        speed_y = -speed_y
        circle_y = 457.5



    pygame.display.update()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're specifically doing this in PyGame, you want to use <a href="http://www.pygame.org/docs/ref/mixer.html" rel="nofollow"><code>pygame.mixer</code></a>.</p>
<p>See the docs, and linked examples, for full details, but basically, the key points are:</p>
<ul>
<li>Call <code>pygame.mixer.init()</code></li>
<li>Construct a <code>pygame.mixer.Sound(file=path_to_wavfile)</code> for each wavfile.</li>
<li>Every time you want to play a sound, just call <code>thesound.play()</code>.</li>
</ul>
<p>By default, this will get you 8 channels; if you try to play 9 simultaneous sounds, one of them will fail to play. If you want to do things like, say, stop a background loop temporarily to free up its channel for a sound effect, you can handle it manually, or you can reserve some of the channels for different purposes, etc. But usually, the basics are good enough.</p>
<p>Which formats <code>pygame.mixer.Sound</code> can handle depend on which libraries were compiled into your PyGame/SDL build. The <code>.wav</code> format <em>should</em> always be there, but if you don't want to rely on that, you can always use the stdlib's <a href="https://docs.python.org/3/library/wave.html" rel="nofollow"><code>wave</code></a> module to read the file, then the <code>Sound(buffer=…)</code> constructor.</p>
</div>
<span class="comment-copy">Check out the recommendations here <a href="http://stackoverflow.com/questions/260738/play-audio-with-python">stackoverflow.com/questions/260738/play-audio-with-python</a></span>
<span class="comment-copy">Don't forget about google! <a href="https://www.google.com/search?q=pygame+add+sound&amp;oq=pygame+add+sound&amp;aqs=chrome..69i57.5003j0j7&amp;sourceid=chrome&amp;es_sm=122&amp;ie=UTF-8" rel="nofollow noreferrer">google.com/…</a></span>
