<div class="post-text" itemprop="text">
<p>I have a Python-script where I want to run two methods simultaneously. I tried the following, but unfortunately, threads/processes only run simultaneously if there is no argument. So how can I solve this problem?</p>
<pre><code>from multiprocessing import Process
def download_from_file(filename):
    if os.path.exists(filename):
        links = [line.strip() for line in open(filename)]

        for link in links:
            Process(target = standard_download(link)).start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>but unfortunately, threads/processes only run simultaneously if there is no argument.</p>
</blockquote>
<p>Nope, that's not the problem.</p>
<p>The problem is that you're calling <code>standard_download(link)</code>, then passing the result of that call as the <code>target</code> argument. That's not what you want; you want to pass the function itself, and the arguments, to the <code>Process</code> object so that it can call them. That's exactly what the <code>args</code> parameter is for, as shown in <a href="https://docs.python.org/3/library/multiprocessing.html#the-process-class" rel="nofollow">most of the examples for <code>multiprocessing</code></a>. In your case:</p>
<pre><code>Process(target=standard_download, args=(link,)).start()
</code></pre>
<p>Or, you can always build a zero-argument function with <code>lambda</code> or <code>partial</code>, of course:</p>
<pre><code>Process(target=functools.partial(standard_download, link)).start()
</code></pre>
<p>As a side note, just creating, starting, and leaking a bunch of child processes is a bad idea. You probably want to store them all in a list, and then <code>join</code> them all (whether immediately, or later). For example:</p>
<pre><code>def download_from_file(filename):
    if os.path.exists(filename):
        links = [line.strip() for line in open(filename)]

        for link in links:
            p = Process(target=standard_download, args=(link,))
            p.start()
            yield p

processes = list(download_from_file(filename))
# later, when we need to wait until we're done with all the downloads
for process in processes:
    process.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want the args keyword argument:</p>
<pre><code>Process(target = standard_download, args=(link,)).start()
</code></pre>
</div>
<span class="comment-copy">Thank you very much! Worked out for me :)</span>
