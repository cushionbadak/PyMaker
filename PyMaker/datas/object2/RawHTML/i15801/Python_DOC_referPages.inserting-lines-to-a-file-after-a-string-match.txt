<div class="post-text" itemprop="text">
<p>I'm trying to search for a substring within lines of a file and insert similar lines immediately after the found line. Although there were similar solutions using the <code>fileinput</code> method, I could not figure out how to use it in my case.</p>
<p>Here is what I have tried:</p>
<pre><code>list = ["abc", "pqr", "xyz"]

inputfile = open (somefile.txt, 'a+')
for line in &lt;inputfile&gt;:    
    if 'stringstosearch' in line:
       for &lt;item&gt; in list:
               new_line = "new_line with %s" %(item)        
               inputfile.write(new_line + "\n") 
    break
inputfile.close()
</code></pre>
<p>for example if the text file is:</p>
<blockquote>
<p>Torquent scelerisque aptent hac rhoncus vel<br/>
  Turpis vestibulum tellus laoreet mollis conubia facilisis tempor nec semper<br/>
  In mi mauris etiam quisque sem congue est velit lacus convallis amet ante ad<br/>
  Integer maecenas semper quisque nisi hendrerit, libero feugiat cursus euismod accumsan<br/>
  Dui sed magna vivamus augue ac quisque ac mauris torquent eros taciti<br/>
  Conubia curae vel himenaeos dictumst sed at  </p>
</blockquote>
<pre><code>string to search = "mauris etiam quisque"
list = ["abc", "pqr", "xyz" ]
</code></pre>
<p>Expected output after file write:</p>
<blockquote>
<p>Torquent scelerisque aptent hac rhoncus vel<br/>
  Turpis vestibulum tellus laoreet mollis conubia facilisis tempor nec semper<br/>
  In mi mauris etiam quisque sem congue est velit lacus convallis amet ante ad<br/>
  new_line with abc<br/>
  new_line with pqr<br/>
  new_line with xyz<br/>
  Integer maecenas semper quisque nisi hendrerit, libero feugiat cursus euismod accumsan<br/>
  Dui sed magna vivamus augue ac quisque ac mauris torquent eros taciti<br/>
  Conubia curae vel himenaeos dictumst sed at</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>you cant just insert in middle of file,so 1st read the file entirely, for small files. then open the same file in write mode and append when you find the string.</p>
<pre><code>list = ["abc", "pqr", "xyz"]

inputfile = open('somefile.txt', 'r').readlines()
write_file = open('somefile.txt','w')
for line in inputfile:
    write_file.write(line)
    if 'stringstosearch' in line:
       for item in list:
            new_line = "new_line with %s" %(item)        
            write_file.write(new_line + "\n") 
write_file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't generally insert into the middle of a file.*</p>
<p>The generic solution to this is to copy to a new file, inserting in the midst of copying, and then move the new file on top of the old one. For example:</p>
<pre><code>with tempfile.NamedTemporaryFile('w', delete=False) as outfile:
    with open(inpath) as infile, 
        for line in infile:
            outfile.write(line)
            if needs_inserting_after(line):
                outfile.write(stuff_to_insert_after(line))
os.replace(outfile.name, inpath)
</code></pre>
<p>Note that <a href="https://docs.python.org/3/library/os.html#os.replace" rel="nofollow"><code>os.replace</code></a> doesn't exist in Python 2.7. If you don't care about Windows, you can use <a href="https://docs.python.org/2/library/os.html#os.rename" rel="nofollow"><code>os.rename</code></a> instead. If you do, I'd strongly suggest looking for a backport of <code>os.replace</code> on PyPI; there are at least two of them. Otherwise, you have to learn about the whole mess with exclusive locks and atomic moves on Windows.</p>
<p>There are also some higher-level libraries that wrap the whole thing up for you. (I wrote one called <a href="https://github.com/abarnert/fatomic/" rel="nofollow"><code>fatomic</code></a> that I think serves as nice sample code, but I'm not sure I'd trust it for production code without a lot more testing. I'm sure if you search PyPI you can find other alternatives.)</p>
<hr/>
<p>Of course there are alternatives:</p>
<p>You can move the original file to a backup path, then copy it into a new file at the normal path, instead of copying to a new file at a temporary path and then moving after the fact. This has the disadvantage of leaving you with half a file if you fail in the middle, but the advantage of not needing to deal with the exclusive-locks-on-Windows problem. This is effectively what <a href="https://docs.python.org/3/library/fileinput.html#fileinput.FileInput" rel="nofollow"><code>fileinput.FileInput</code></a> with <code>inplace=True</code> automates for you.</p>
<p>You can read the whole file into memory, process it in-memory, then write the whole file back out. This has the advantage of being dead simple, not needing any extra files, and meaning that if anyone has a file handle to your file (rather than a pathname) they see the new version once you're done. But the last of those can be a disadvantage. And of course this means that you need enough memory to hold all your data at once.</p>
<p>Finally, you can always shift the whole file from the current position up by N bytes before writing N bytes. This has most of the advantages of both of the above, but it's also messy and slow.</p>
<hr/>
<p><sub>* Why did I say "generally" there? Well, ultimately, the filesystem has to have some way of inserting a new block in the middle of a file. And some filesystems will expose this to the user level. Some older platforms used to have user-level features built on top of this, like "random access text files" on Apple ][ ProDOS or the thingy I forget in VMS. So, it's not literally true that you can't ever insert into the middle of a file. It's just true in every case you care about.</sub></p>
</div>
<span class="comment-copy">What if <code>mauris etiam quisque</code> repeats? Or does this only deal with the first occurrence and should <code>break</code> after?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/12044927/pythonic-way-of-inserting-lines-to-a-file">Pythonic way of inserting lines to a file</a></span>
<span class="comment-copy">Why couldn't you figure out how to use <code>fileinput</code> in your case? What did you try, and how did it fail?</span>
