<div class="post-text" itemprop="text">
<p>I have a file that has 3 values on each line.  It is a fairly random file, and any of these values can be str or int.</p>
<pre><code>George, 34s, Nikon

42, absent, Alan

apple, 111, 41

marked, 15, never

...
</code></pre>
<p>So, I read in the line, and using split I get the first value:</p>
<pre><code>theFile = r"C:\... "

tDC = open(theFile, "r")

for theLine in tDC:

        a, b, c = theLine.split(',')
</code></pre>
<p>So far so good.</p>
<p>Where I'm stuck is when I try to deal with variable <code>a</code>.  I need to deal with it differently if it is a str or if it is an int.  I tried setting <code>a = int(a)</code>, but if it is a string (e.g., 'George') then I get an error.  I tried <code>if type(a) = int</code> or <code>if isinstance(a,int)</code>, but neither work because all the values come in as a string!</p>
<p>So, how do I evaluate the value NOT looking at its assigned 'type'?  Specifically, I want to read all the <code>a</code>'s and find the maximum value of all the numbers (they'll be integers, but could be large -- six digits, perhaps).  </p>
<p>Is there a way to read in the line so that numbers come in as numbers and strings come in as strings, or perhaps there is a way to evaluate the value itself without looking at the type?</p>
</div>
<div class="post-text" itemprop="text">
<p>The first point is that you need some rule that tells you which values are integers and which ones aren't. In a data set that includes things like <code>32s</code>, I'm not sure it makes sense to just treat anything that could be an integer as if it were.</p>
<p>But, for simplicity, let's assume that <em>is</em> the rule you want: anything that could be an integer is. So, <code>int(a)</code> is already pretty close; the only issue is that it can fail. What do you do with that?</p>
<p>Python is designed around <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a>: it's Easier to Ask Forgiveness than Permission. Try something, and then deal with the fact that it might fail. As <a href="https://stackoverflow.com/users/2296458/cyber">Cyber</a> suggests, with a <code>try</code> statement:</p>
<pre><code>try:
    intvalue = int(a)
except ValueError:
    # Oops, it wasn't an int, and that's fine
    pass
else:
    # It was an int, and now we have the int value
    maxvalue = max(maxvalue, intvalue)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>values = theLine.split(',')
for value in values:
    try:
        number = int(value)
        # process as number
    except ValueError:
        # process value as string
</code></pre>
</div>
<span class="comment-copy">You could use a <code>try</code>/<code>except</code> block, using the <code>ValueError</code> in the <code>except</code>.</span>
<span class="comment-copy">How do you know whether some column <code>42</code> represents the int <code>42</code> or the string <code>"42"</code>? After all, data that can have string values like <code>"32s"</code> can probably also have string values like <code>"42"</code>.</span>
<span class="comment-copy">As a side note, you may want to consider using the <code>csv</code> library instead of manually calling <code>split</code>. I have no idea where your data come from or what they mean, but I wouldn't be too surprised it you ran into a column like <code>"Smith, John"</code>, which your code will treat that as two columns instead of one, which would be hard to fix, while with <code>csv</code> it will either just work, or be a trivial matter of setting a dialect parameter to fix it.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/5626815/how-can-i-avoid-type-checking-a-python-object-if-its-attributes-arent-used" title="how can i avoid type checking a python object if its attributes arent used">stackoverflow.com/questions/5626815/â€¦</a></span>
<span class="comment-copy">if type(a) = int does not test for equality. To test for equality you use ==(double equals). A single = is for assignment.</span>
<span class="comment-copy">@PadraicCunningham: If "any of these values can be str or int", <code>float(a)</code> seems like a bad idea. Of course if the desired rule is "anything that can be interpreted as a float should be parsed as a float and then truncated" (or rounded or whatever) that's different, but that seems a lot less likely than "anything that can be interpreted as an int should be parsed as an int".</span>
<span class="comment-copy">@PadraicCunningham: Yes, <code>"2.0"</code> will raise a <code>ValueError</code> and be skipped. So will <code>"34s"</code>, which we know is in his input. And so will <code>"2 + 3*4"</code>, and <code>"0xcab"</code>, and <code>"two"</code> and <code>"0'"</code> and <code>"4/1"</code>, and all kinds of other things that could be considered representations of integers. And if you don't understand how making the ints floats could affect the sum, try adding <code>12345678901234567890 + 1 + -12345678901234567890</code> after converting everything to floats.</span>
<span class="comment-copy">@PadraicCunningham: Who cares how large the cutoff is before it becomes an issue, when there's no reason to create the issue in the first place? And if the rule is "everything is <code>int</code> or <code>str</code>", as the OP said, then <code>"2.0"</code> is just as not-an-<code>int</code> as <code>"two"</code>.</span>
<span class="comment-copy">That worked, thanks!</span>
<span class="comment-copy">this will return some strange results as you are going to be iterating over the substrings</span>
<span class="comment-copy">@PadraicCunningham Good catch! Thanks. I missed the comma separator in asker's question. Corrected with <code>split(',')</code>.</span>
<span class="comment-copy">I think the OP also just wants column a also</span>
<span class="comment-copy">@PadraicCunningham That was unclear. All the OP's examples use the first column, but the text described the other values/columns too, so I interpreted the question as desiring to process all the values.</span>
