<div class="post-text" itemprop="text">
<p>Is it pythonic to use <code>or</code>, similar to how PHP would use <code>or die()</code>?</p>
<p>I have been using<br/>
<code>quiet or print(stuff)</code><br/>
instead of<br/>
<code>if verbose:
    print(stuff)</code><br/>
lately. </p>
<p>I think it looks nicer, they do the same thing, and it saves on a line. Would one be better than the other in terms of performance?</p>
<p>The bytecode for both look pretty much the same to me, but I don't really know what I'm looking at...</p>
<p><code>or</code></p>
<pre><code>  
  2           0 LOAD_FAST                0 (quiet)
              3 JUMP_IF_TRUE_OR_POP     15
              6 LOAD_GLOBAL              0 (print)
              9 LOAD_CONST               1 ('foo')
             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
        &gt;&gt;   15 POP_TOP
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</code></pre>
<p>vs <code>if</code></p>
<pre><code>
  2           0 LOAD_FAST                0 (verbose)
              3 POP_JUMP_IF_FALSE       19

  3           6 LOAD_GLOBAL              0 (print)
              9 LOAD_CONST               1 ('bar')
             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             15 POP_TOP
             16 JUMP_FORWARD             0 (to 19)
        &gt;&gt;   19 LOAD_CONST               0 (None)
             22 RETURN_VALUE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, this is definitely not Pythonic. Many of the decision made along the way have been specifically to discourage this kind of coding.</p>
<hr/>
<p>The right way to write this is the obvious way:</p>
<pre><code>if verbose:
    print(stuff)
</code></pre>
<p>Or, if computing <code>stuff</code> in itself isn't expensive/dangerous/irrevocable, just wrap <code>print</code> in a function that checks the flag:</p>
<pre><code>def printv(*args, **kwargs):
    if verbose:
        print(*args, **kwargs)
</code></pre>
<p>… so you can just do this, which is about as concise as you're going to get:</p>
<pre><code>printv(stuff)
</code></pre>
<p>Or, even better, use the <a href="http://docs.python.org/3/library/logging.html" rel="nofollow"><code>logging</code></a> module instead of reinventing the wheel.</p>
<hr/>
<p>But what if <code>stuff</code> is expensive, and you really want to save a line?</p>
<p>Well, you probably don't really need to save a line, and doing so is always sacrificing readability for brevity; "Readability Counts" is a key part of <a href="http://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow">the Zen of Python</a>. But Python does allow you to put a one-line suite on the same line as the condition:</p>
<pre><code>if verbose: print(stuff)
</code></pre>
<p>As <a href="http://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow">PEP 8</a> puts it, "sometimes it's okay", but it's "generally discouraged". As Guido put it in an email on the ideas mailing list, "If you must save a line, use a one-line if statement rather than something 'clever'. But if you must save a line, I probably don't want to read your code."</p>
<p>If you want this in an expression (which you shouldn't, as I'll explain below), or you want to <em>technically</em> follow PEP 8 to the letter while blatantly violating the spirit:</p>
<pre><code>print(stuff) if verbose else None
</code></pre>
<hr/>
<p>So, what's not Pythonic about it?</p>
<p>For one thing, you're using the result of <code>print</code> in an expression, even though <code>print</code> has no useful result, and is only called for its side effects. This is misleading.</p>
<p>And in general, Python has only one side effect per line, and it happens as far to the left as possible, which makes it easy to skim code and see what's changing. This is reinforced by the strong divide between statements and expressions (and, e.g., assignments being statements), by methods with side effects idiomatically returning <code>None</code> instead of <code>self</code>, and so on.</p>
<p>But even ignoring all that, using <code>and</code> and <code>or</code> just for short-circuiting, rather than for their results, is potentially confusing and, at least in some people's minds, ugly. That's why the ternary expression (<code>spam if eggs else beans</code>) was added: to stop people from writing <code>eggs and spam or beans</code>. Why is it confusing? For one thing, it doesn't really read like English at all, unless you've been reading more Perl code than actual English. For another, it's very easy to accidentally use a valid value that happens to be falsey; you know not to do that, and to check for that, when you see an <code>if</code>, but you don't here. Also note that the <code>print(stuff) if verbose else None</code> makes it explicit that you are creating a value which you then do nothing with; explicit is always better than implicit, but especially so when you're doing something uncommon.</p>
<hr/>
<p>Finally, as for performance: (a) who cares, and (b) why not measure it instead of try to guess by reading bytecode you don't understand?</p>
<pre><code>In [511]: quiet = True
In [512]: %timeit quiet or None
10000000 loops, best of 3: 48.2 ns per loop
In [513]: verbose=False
In [514]: %timeit if verbose: pass
10000000 loops, best of 3: 38.5 ns per loop
</code></pre>
<p>So there you go, in the fast-pass case, the <code>if</code> statement is actually about 20% <em>faster</em>, not slower—and they're both so fast that it's unlikely to ever affect your program anyway. If you're doing this a billion times in a tight loop and need to squeeze out that performance, you're going to want to lift the rest out of the loop, even if that means repeating yourself with two near-clones of the same code (especially considering that a loop without the <code>print</code>s is more likely to fit into cache, etc.).</p>
<p>If you want to know why, well, you'd have to look at the implementation of those bytecodes on the particular version of the particular implementation that you care about… but most likely, needing to do an extra <code>POP_TOP</code> instead of having one merged into the previous operation is part of the difference.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think this is pythonic. ("Explicit is better than implicit").</p>
<p>You <em>can</em> write</p>
<pre><code>if verbose: print(stuff)
</code></pre>
<p>so if you desperately need to keep your line count down, you can. </p>
<p>The most pythonic way ("Readability counts.") would still be to use</p>
<pre><code>if verbose:
    print(stuff)
</code></pre>
</div>
<span class="comment-copy">Please don't do this.</span>
<span class="comment-copy">Good think you asked :)</span>
<span class="comment-copy">It doesn't look nicer to anyone who isn't a PHP programmer.  As far as saving a line goes, is there a line shortage where you live?  We've got extra.</span>
<span class="comment-copy">It doesn't even look nice to PHP programmers.</span>
<span class="comment-copy">@lxg: Maybe not PHP programmers, but I know plenty of Perl programmers, and a few Ruby, who love the <code>or</code> trick, and also insist that not having postfix conditions in a language forces you to use the <code>or</code> trick even more than you'd want because there are no other conscionable alternatives, so…</span>
<span class="comment-copy"><code>if verbose: print(stuff)</code> is so not pythonic, check PEP8</span>
<span class="comment-copy">@ErlVolton: It's far <i>more</i> Pythonic than what the question is doing.</span>
<span class="comment-copy">No it's not!! It's just as bad as his example</span>
<span class="comment-copy">@ErlVolton: The answer already <i>does</i> tell him to use the if statement with two lines. It also explains that, if he doesn't want to for some reason, there are still better ways to do it than what he's attempting. I'm not going to remove that.</span>
<span class="comment-copy">Also, <a href="http://legacy.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow noreferrer">PEP 8</a> as mentioned above would be the go to resource as a Python style guide.</span>
<span class="comment-copy">I'm not sure this falls under "explicit is better than implicit", at least directly. But it definitely falls under "readability counts"! (I was trying to think of which parts of the zen to reference, and I missed the most obvious one. :))</span>
<span class="comment-copy">@abarnert: Yes, readability does play a bigger role here. By "implicit" I was referring to Python's (possibly non-obvious) design choice to only evaluate an expression if the boolean condition hasn't already been fulfilled. People might wonder why <code>print()</code> isn't always called if they don't know about this feature.</span>
