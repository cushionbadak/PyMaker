<div class="post-text" itemprop="text">
<p>Does Python have a function to neatly build a string that looks like this:</p>
<pre><code>Bob 100 Employee Hourly
</code></pre>
<p>Without building a string like this:</p>
<pre><code>EmployeeName + ' ' + EmployeeNumber + ' ' + UserType + ' ' + SalaryType
</code></pre>
<p>The function I'm looking for might be called a StringBuilder, and look something like this:</p>
<pre><code>stringbuilder(%s,%s,%s,%s, EmployeeName, EmployeeNumber, UserType, SalaryType, \n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Normally you would be looking for <code>str.join</code>. It takes an argument of an iterable containing what you want to chain together and applies it to a separator:</p>
<pre><code>&gt;&gt;&gt; ' '.join((EmployeeName, str(EmployeeNumber), UserType, SalaryType))
'Bob 100 Employee Hourly'
</code></pre>
<hr/>
<p>However, seeing as you know exactly what parts the string will be composed of, and not all of the parts are native strings, you are probably better of using <code>format</code>:</p>
<pre><code>&gt;&gt;&gt; '{0} {1} {2} {3}'.format(EmployeeName, str(EmployeeNumber), UserType, SalaryType)
'Bob 100 Employee Hourly'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have two options here:</p>
<ul>
<li>Use the string <code>.join()</code> method: <code>" ".join(["This", "is", "a", "test"])</code></li>
<li>Use the percent operator to replace parts of a string: <code>"%s, %s!" % ("Hello", "world")</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>As <code>EmployeeNumber</code> is a int object , or may you have may int amount your variables you can use <code>str</code> function to convert them to string for refuse of <code>TypeError</code> !  </p>
<pre><code>&gt;&gt;&gt; ' '.join(map(str,[EmployeeName, EmployeeNumber,UserType , SalaryType]))
'Bob 100 Employee Hourly'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has two simple ways of constructing strings:</p>
<p>string formatting as explained here: <a href="https://docs.python.org/2/library/string.html" rel="nofollow">https://docs.python.org/2/library/string.html</a></p>
<pre><code>&gt;&gt;&gt; '{0}, {1}, {2}'.format('a', 'b', 'c')
'a, b, c'
</code></pre>
<p>and  the old style % operator 
<a href="https://docs.python.org/2.7/library/stdtypes.html#string-formatting" rel="nofollow">https://docs.python.org/2.7/library/stdtypes.html#string-formatting</a></p>
<pre><code>&gt;&gt;&gt; print '%(language)s has %(number)03d quote types.' % \
...       {"language": "Python", "number": 2}
Python has 002 quote types.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your question is about Python 2.7, but it is worth note that from Python 3.6 onward we can use <strong><a href="https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-strings</a></strong>:</p>
<pre class="lang-python prettyprint-override"><code>place = 'world'
f'hallo {place}'
</code></pre>
<blockquote>
<p>'hallo world'</p>
</blockquote>
<p>This <code>f</code> prefix, called a <em>formatted string literal</em> or <em>f-string</em>, is described in the documentation on <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">lexical analysis</a></p>
</div>
<span class="comment-copy">The only way it can fail if any of the fields, like <code>EmployeeNumber</code>, is not a string, then one needs an explicit <code>str(EmployeeNumber)</code></span>
<span class="comment-copy">@bereal True. I've updated the answer.</span>
