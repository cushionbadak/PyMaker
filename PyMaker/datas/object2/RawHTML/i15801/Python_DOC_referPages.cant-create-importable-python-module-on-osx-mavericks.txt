<div class="post-text" itemprop="text">
<p>I wrote a custom python module. It consists of several functions divided thematically between 3 .py files, which are all in the same directory called <code>microbiome</code> in my home directory. So the whole path to my custom module directory is:</p>
<pre><code>/Users/drosophila/microbiome
</code></pre>
<p>I'm working on OsX Mavericks. I want to import this module in python scripts which I run from a different directory. </p>
<p>I tried adding the <code>microbiome</code> directory to the path by editing <code>/etc/paths</code>:</p>
<pre><code>sudo nano /etc/paths
</code></pre>
<p>Then in <code>/etc/paths</code> I write:</p>
<pre><code>/usr/bin
/bin
/usr/sbin
/sbin
/usr/local/bin
/Users/drosophila/blast-2.2.22/bin
/Users/drosophila/blast-2.2.22/
/Users/drosophila/microbiome
</code></pre>
<p>I also tried editing <code>.bash_profile</code> as follows:</p>
<pre><code>export PATH="/Users/drosophila/microbiome:/Users/drosophila/anaconda/bin:$PATH"
</code></pre>
<p>It seems that the 'microbiome' directory is added to the path successfully, since <code>echo $PATH</code> shows the directory is in there:</p>
<pre><code>/Users/drosophilq/anaconda/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usearch:/Users/drosophila/blast-2.2.22/bin:/Users/drosophila/blast-2.2.22/:/Users/drosophila/microbiome:/opt/X11/bin:/usr/texbin
</code></pre>
<p>However, when I try to import the microbiome module in python, it insists that such a module doesn't exist. I have Python 3.4.1 |Anaconda 2.0.1 </p>
<p>The 'microbiome' directory contains an empty <code>__init__.py</code> file.</p>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <em>right</em> way to do this, as explained in the <a href="https://packaging.python.org/en/latest/" rel="nofollow">Python Packaging User Guide</a>, is to create a <code>setup.py</code>-based project.</p>
<p>Then, you can just install your code for any particular Python installation (or virtual environment) by using, e.g., <code>pip3 install .</code> from the root directory of the project. That makes sure everything gets copied, with the proper layout, into some appropriate site-packages directory, where it will be available for that Python installation to import.</p>
<p>Trying to do what the standard tools do yourself is just making things harder on yourself.</p>
<hr/>
<p>That being said, if you really, really want to, the key is that you need to get your new directory into the <code>sys.path</code> for the Python installation you want. Modifying <code>PATH</code> or <code>/etc/paths</code> won't do that. Modifying <code>PYTHONPATH</code> will, but it will affect <em>every</em> installation. The way to do this is to add a <code>.pth</code> file and/or a <code>sitecustomize.py</code> file, as described in the docs for the <a href="https://docs.python.org/3/library/site.html" rel="nofollow"><code>site</code></a> module.</p>
<p>I don't know where your Anaconda site-packages is (you can find out by <code>import sys; print(sys.path)</code> from within Python), but let's say it's <code>/usr/local/anaconda/lib/python3.4/site-packages</code>. So, you can create a <code>microbiome.pth</code> file in that directory, with the absolute path to your <code>/Users/drosophilia/microbiome</code> directory. Then, every time you start Python, that directory will be added to <code>sys.path</code>, and your import will work.</p>
<hr/>
<p>It's also worth noting that if you just want to reuse a directory as if it were part of a handful of different projects, and you don't want to even think about "installation" or anything like that, there are even simpler ways to do it: Symlink the directory into your different projects. Or, if you're using version control, create a git submodule. Or various other similar equivalents. Then, it looks like each project just includes <code>microbiome</code> as part of that project, and you don't have to worry about paths or anything else.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you've discovered, <code>/etc/paths</code> affects <code>$PATH</code>. But <code>$PATH</code> does not affect where Python looks for modules. Try <code>$PYTHONPATH</code> instead. See <code>man python</code> for details.</p>
</div>
<span class="comment-copy">If you are using <code>microbiome</code> as a package the folder must contain a <code>__init__.py</code> (empty) file.</span>
<span class="comment-copy">It does contain <b>init</b>.py, even though it's not required in python 3, I think.</span>
<span class="comment-copy"><code>init.py</code> doesn't work. It has to be exactly <code>__init__.py</code> with two _ before and after init.</span>
<span class="comment-copy">@dreyescat: You're getting tripped up by Markdown. Double underscores around normal text embolden it.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams I see what you mean ;). Drosophila was trying to write <code>__init__.py</code> but it resulted in a bolded init. Thanks</span>
<span class="comment-copy">I don't agree that every little project has to be a <code>setup.py</code> install. For a small project that will most likely not be reused outside of the context of that folder, it's more than enough to put it in a nice package locally (without install). You can always do <code>sys.path.append()</code>.</span>
<span class="comment-copy">@greschd: Then you have to do <code>sys.path.append()</code> in every project that's going to use it, and every time you fire up the interactive interpreter. Besides, my answer explains how to get the package onto <code>sys.path</code> <i>without</i> a <code>setup.py</code> install. But, most importantly, writing a trivial <code>setup.py</code> is less work than the other options, so why <i>not</i> do it, and get all the advantages for free?</span>
<span class="comment-copy">Personally, I like limiting the <code>install</code>s to as few as possible. Also, it's worth noting that he'll have to re-install after every modification to the package (which you usually don't want during development). But given @Drosophila's original idea, maybe your answer is more along the lines of what he had in mind.</span>
<span class="comment-copy">Also, I agree that simlinks and git submodules are a great idea. It really depends on what kind of project this is and from where he imports it. For tests and examples (which will always be in the same place relative to the package), <code>sys.path.append()</code> does it, if you're using the package in many different places, use simlink and git.</span>
<span class="comment-copy">I ended up using <code>sys.path.append()</code>, it seemed like the quickest solution for initial testing of the scripts. Those were all good suggestions, thanks!</span>
