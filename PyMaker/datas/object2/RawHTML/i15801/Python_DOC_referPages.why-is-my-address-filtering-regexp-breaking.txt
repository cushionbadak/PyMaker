<div class="post-text" itemprop="text">
<p>I am very new in <code>regex</code> manipulation. I am using Python 3.3 in filtering addresses with the module <code>re</code>.</p>
<p>I am wondering why the following <code>regex</code> :</p>
<pre><code>m3 = re.search("[ ,]*[0-9]{1,3}\s{0,1}(/|-|bt.)\s{0,1}[0-9]{1,3} ",Row[3]);
</code></pre>
<p>matches string like:</p>
<blockquote>
<p>rue de l’hotel des monnaies 49-51 1060Bxl<br/>
  av Charles Woeste309 bte2 -Bxl<br/>
  Rue d'Anethan 46 bte 6<br/>
  Avenue Defré 269/6</p>
</blockquote>
<p>but does not match string like (<code>m3 is None</code>):</p>
<blockquote>
<p>Avenue Guillaume de Greef,418 bte 343<br/>
  Joseph Cuylits,24 bte5 Rue Louis<br/>
  Ernotte 64 bte 3<br/>
  Rue Saint-Martin 51 bte 7</p>
</blockquote>
<p>This really looks like strange to me.
All explanation are welcome.
Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like the trailing space " " at the end of your regex was unintentional and is breaking things: <code>"[ ,]*[0-9]{1,3}\s{0,1}(/|-|bt.)\s{0,1}[0-9]{1,3} "</code></p>
<p>The regex which re.search is looking for means the following (recommend you <a href="https://docs.python.org/3/howto/regex.html#using-re-verbose" rel="nofollow">use the <code>re.VERBOSE/re.X</code> flag to allow you to put comments inside a regex</a>, so it doesn't quickly become read-only ;-). Note that using multiline string """ with re.VERBOSE now means we can't even insert that " " character (you'd have to use [ ] or else \s)</p>
<pre><code>import re

addr_pat = re.compile("""
    [ ,]*       # zero or more optional leading space or commas
    [0-9]{1,3}  # 1-3 consecutive digits
    \s{0,1}     # one optional whitespace (instead you could just write \s?)
    (/|-|bt.)   # either forward-slash, minus or "bt[any character]" e.g. "bte"
    \s{0,1}     # one optional whitespace
    [0-9]{1,3}  # 1-3 consecutive digits
                # we omitted the trailing " " whitespace you inadvertently had
""", re.VERBOSE)

m3 = addr_pat.search("Rue Saint-Martin 51 bte 7 ")
</code></pre>
<p>The requirement for a trailing space is why each of the following fail to match:</p>
<pre><code>Avenue Guillaume de Greef,418 bte 343
Joseph Cuylits,24 bte5 Rue Louis
Ernotte 64 bte 3
Rue Saint-Martin 51 bte 7
</code></pre>
</div>
<span class="comment-copy">What is the regular pattern the addresses follow?</span>
<span class="comment-copy">Welcome to Python. No need to put semicolons after your statements, unless you want to be identified as a convert from Java/C/Javascript ;-)</span>
<span class="comment-copy">Yes this is what I intended to do. The first and the two last strings will not match because the lack of trailing space, thanks for pointing out this this mistake. But why did the second not match, it looks like it must?</span>
<span class="comment-copy">The inadvertent requirement for trailing space is breaking all four of these. Just remove it from the regex!</span>
<span class="comment-copy">But there is a trailing space in 'Joseph Cuylits,24 bte5*Rue Louis'</span>
<span class="comment-copy">Do you mean " " equals [ ]$ ?</span>
<span class="comment-copy">"bte5 Rue Louis " matches <code>\s{0,1}</code> (0/1 internal whitespaces) but then does not have any subsequent 1-3 digit number <code>[0-9]{1,3}</code> followed by trailing space ` `.</span>
