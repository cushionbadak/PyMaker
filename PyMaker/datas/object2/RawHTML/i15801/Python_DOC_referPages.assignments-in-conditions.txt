<div class="post-text" itemprop="text">
<p>In C-like languages, we can write a loop like that:</p>
<pre><code>while ( a = func(x) ){
    // use a
}
</code></pre>
<p>Is there any syntax in Python to do the same thing?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no direct equivalent because <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-assignment_stmt" rel="nofollow">assignments are statements</a> in Python, not expressions like in C.</p>
<p>Instead, you can do either this:</p>
<pre><code>a = func(x)      # Assign a
while a:         # Loop while a is True
    # use a
    a = func(x)  # Re-evaluate a
</code></pre>
<p>or this:</p>
<pre><code>while True:      # Loop continuously
    a = func(x)  # Assign a
    if not a:    # Check if a is True
        break    # Break if not
    # use a
</code></pre>
<p>The first solution is less code, but I personally prefer the second because it keeps you from duplicating the <code>a = func(x)</code> line.</p>
</div>
<div class="post-text" itemprop="text">
<p>No python does not have this because you open yourself up to bugs like</p>
<pre><code>if usr = 'adminsitrator':
    # do some action only administrators can do
</code></pre>
<p>Where you really meant <code>==</code> and not <code>=</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't allow assignments in the place of boolean expressions. The "pythonic" way to do this would be:</p>
<pre><code>def func(x):
    if goodStuff:
        return somethingTruthy
    else:
        return somethingFalsey

a = func(x)
while a:
    # use a
    a = func(x)
</code></pre>
</div>
