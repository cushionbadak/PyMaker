<div class="post-text" itemprop="text">
<p>This:</p>
<pre><code>import sys, re

# List of file names to exclude from analysis
excludes = map(re.compile, [
    '/\.svn/',
    '/\.hg/', ])


def regmatch(pathName):
    # Print the argument then any regular expressions that match it
    sys.stdout.write("::" + pathName + "\n")
    for pattern in excludes:
        sys.stdout.write("\t" + str(re.search(pattern, pathName)) + "\n")

regmatch("one/.hg/one")
regmatch("two/.hg/two")
regmatch("thr/.hg/thr")
</code></pre>
<p>in Python2.7 produces the expected result, i.e., for each call it prints the argument, followed by the list of results of matching against each re.  However, in Python3 the output is:</p>
<pre><code>::one/.hg/one
        None
        &lt;_sre.SRE_Match object at 0xb74bb870&gt;
::two/.hg/two
::thr/.hg/thr
</code></pre>
<p>i.e., it seems to forget the contents of <code>excludes</code> after the first call.  What?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because, in Python 3.x, <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> <em>doesn't return a list, but an iterator</em>.</p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable, yielding the results. </p>
</blockquote>
<p>So, once the iterator is exhausted, it cannot be used again. In your first call to <code>regmatch</code>, the <code>excludes</code> iterator is exhausted. So, further iteration with <code>for</code> loop, in the subsequent <code>regmatch</code> calls, will exit immediately.</p>
<p>To fix this, you can explicitly create a list, like this</p>
<pre><code>excludes = list(map(re.compile, ['/\.svn/', '/\.hg/']))
</code></pre>
<p>Or you can use list comprehension, like this</p>
<pre><code>excludes = [re.compile(item) for item in ('/\.svn/', '/\.hg/')]
</code></pre>
</div>
