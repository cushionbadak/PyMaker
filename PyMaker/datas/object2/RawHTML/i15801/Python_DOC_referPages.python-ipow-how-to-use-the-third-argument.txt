<div class="post-text" itemprop="text">
<p>In the official python documentation in the Data model section, the <a href="https://docs.python.org/3/reference/datamodel.html#object.__ipow__" rel="nofollow"><code>__ipow__</code> method</a> is defined as:</p>
<pre><code>object.__ipow__(self, other[, modulo])
</code></pre>
<p>Then, the documentation explains that <em>These methods are called to implement the augmented arithmetic assignments</em> (<code>**=</code> for <code>__ipow__</code>)</p>
<p>But what is the syntax of <code>**=</code> that allows to use the <code>modulo</code> argument ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The third argument is there just for symmetry with <code>__pow__</code>.</p>
<p>The argument was included in the original <a href="https://hg.python.org/cpython/diff/52fd496d3532/Objects/abstract.c" rel="nofollow">'add in-place operator equivalents' commit</a> but there is no support to use it from Python code, other than calling the <code>__ipow__</code> method <em>directly</em>.</p>
<p>For example, the <code>INPLACE_POWER</code> opcode handling <a href="https://hg.python.org/cpython/file/3f13f1620d70/Python/ceval.c#l1483" rel="nofollow">passes in <code>None</code></a> as the third argument:</p>
<pre class="lang-c prettyprint-override"><code>case INPLACE_POWER:
    w = POP();
    v = TOP();
    x = PyNumber_InPlacePower(v, w, Py_None);
    Py_DECREF(v);
    Py_DECREF(w);
    SET_TOP(x);
    if (x != NULL) continue;
    break;
</code></pre>
<p>Most likely it is there to make implementing <code>__ipow__</code> as an alias for <code>__pow__</code> trivial even from C code.</p>
</div>
<span class="comment-copy">This isn't specific to Python 3, so I removed the tag.</span>
<span class="comment-copy">This works for <code>__pow__</code>, but my question is for <code>__ipow__</code></span>
<span class="comment-copy">@Xoff: yes, sorry, missed that.</span>
<span class="comment-copy">This is a strange choice of design. It would be simpler to just remove the third argument from the doc, but anyway, thanks for your clear answer !</span>
