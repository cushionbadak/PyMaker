<div class="post-text" itemprop="text">
<p>Python newbie here. </p>
<p>In learning about Python I have come across some very nice, succinct bits of code such as:</p>
<pre><code>[d[k] for k in d]
</code></pre>
<p>I can see immediately that there are lots of possibilities for these kinds of expressions ("these kinds" meaning contained inside a <code>[]</code>).</p>
<p>I'm unsure of what this kind of expression is <em>called</em>, and so I am having trouble searching for information on how to use it. Would be great for some knowledgeable folks to direct me toward the part of the Python docs, or other resources, that discusses these, and perhaps provide some suggestions of how to effectively use them.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code you posted is an <em>expression</em>, not a statement.</p>
<p>It is commonly called a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> and its basic structure is:</p>
<pre><code>[item for item in iterable if condition]
</code></pre>
<p>where the <code>if condition</code> clause is optional.  The result is a new list object created from the items in <code>iterable</code> (possibly filtered by <code>if condition</code>):</p>
<pre><code>&gt;&gt;&gt; [x for x in (1, 2, 3)]  # Get all items in the tuple (1, 2, 3).
[1, 2, 3]
&gt;&gt;&gt; [x for x in (1, 2, 3) if x % 2]  # Only get the items where x % 2 is True.
[1, 3]
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>In addition, there are <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">dictionary comprehensions</a>:</p>
<pre><code>{key:value for key, value in iterable if condition}
</code></pre>
<p>and <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow">set comprehensions</a>:</p>
<pre><code>{item for item in iterable if condition}
</code></pre>
<p>which each do the same thing as the list comprehension, but produce dictionaries or sets respectively.  </p>
<p>Note however that you need Python 2.6 or greater to use these constructs.</p>
<hr/>
<p>A final tool that you should be aware of is a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expression</a>:</p>
<pre><code>(item for item in iterable if condition)
</code></pre>
<p>Similar to the list comprehension, it creates a generator object which produces its items lazily (one at a time as they are needed):</p>
<pre><code>&gt;&gt;&gt; (x for x in (1, 2, 3))
&lt;generator object &lt;genexpr&gt; at 0x02811A80&gt;
&gt;&gt;&gt; gen = (x for x in (1, 2, 3))
&gt;&gt;&gt; next(gen)  # Advance the generator 1 position.
1
&gt;&gt;&gt; next(gen)  # Advance the generator 1 position.
2
&gt;&gt;&gt; next(gen)  # Advance the generator 1 position.
3
&gt;&gt;&gt; next(gen)  # StopIteration is raised when there are no more items.
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Technically, this is called an "expression statement."</span>
<span class="comment-copy">Requests for examples are <i>by their nature</i> broad and don't have canonical answers, making them a poor fit for StackOverflow.</span>
<span class="comment-copy">I think it's obvious that my primary request is for what the expressions are called. The examples are only a bonus. I have changed the title to reflect this, and the request to "suggestions" instead.</span>
<span class="comment-copy">Do you omitted generators by chance or deliberately?</span>
<span class="comment-copy">@gboffi - Actually, I was just getting to those. :)</span>
<span class="comment-copy">@RickTeachey Comprehensions are usually faster and are persistent (generators are eventually exhausted and irrecoverable). Use cases for generators that I know of are bounded memory (no need to store a list in memory, no need to reclaim memory when you're done) and access to slow resources (imagine getting a sequence of items from a web server, using list comprehensions you have to get all the items before you can process the first).</span>
