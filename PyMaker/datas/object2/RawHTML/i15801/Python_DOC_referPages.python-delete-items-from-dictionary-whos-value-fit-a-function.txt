<div class="post-text" itemprop="text">
<p>Naivelly I would use:</p>
<pre><code>for k, v in dictionary.items():
    if foo(v):
        del dictionary[k]
</code></pre>
<p>However this will cause an iterator exception as I edit the dictionary size while iterating over it. So how could I do this? - and especially, <strong>without making a copy of the dictionary</strong>, the copy approach:</p>
<pre><code>copydict = dict(dictionary)
for k, v in copydict.items():
    if foo(v):
        del dictionary[k]
</code></pre>
<p>I wish to see how python would do such in place editing without actually using explicit iterators.</p>
</div>
<div class="post-text" itemprop="text">
<p>Find all the keys to remove then delete after:</p>
<pre><code>d = {1: 2, 3: 4, 5: 6}
remove = [k for k  in d if foo(d[k])]
for k in remove:
    del d[k]


In [38]: %%timeit
   ....: d = {1: 2, 3: 4, 5: 6}
   ....: matching_items = ((k, v) for k, v in list(d.items()) if v &gt; 2)
   ....: d.clear()
   ....: d.update(matching_items)
   ....: 
100000 loops, best of 3: 2.85 Âµs per loop

In [40]: %%timeit
        d = {1: 2, 3: 4, 5: 6}
        remove =[k for k  in d if d[k]&gt; 2]
        for k in remove:
           del d[k]
   ....: 
1000000 loops, best of 3: 873 ns per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an answer from a previous Stack Overflow question: <a href="https://stackoverflow.com/questions/6777485/modifying-a-python-dict-while-iterating-over-it">Modifying a Python dict while iterating over it</a></p>
<p><code>dictionary.items()</code> returns a view which can't be modified
But if you iterate over <code>list(dictionary.items())</code> you can modify the dictionary without the risk of iterator exception.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for k, v in dictionary.viewkeys():
     if f(dictionary[k]):
         del dictionary[k]
</code></pre>
</div>
<span class="comment-copy">As an aside... <code>copydict = dictionary.copy()</code> is preferred... (it has its own <code>.copy</code> for a reason)</span>
<span class="comment-copy">Why again the downvoting?</span>
<span class="comment-copy">I suspected mine was a bad idea, but you'd already nicked the good idea... was experimenting... thanks for the timeit's - have a +1 :)</span>
<span class="comment-copy">All links in that answer lead to python 2.x.. In python 3 iteritems deprecated, and items() was changed to act like iteritems (from what I understand). So is this advice still true for 3.3?</span>
<span class="comment-copy">items is an iterator in python 3</span>
<span class="comment-copy">@PadraicCunningham Don't you mean this answer is incorrect then for python 3?</span>
<span class="comment-copy">you are right: here is the python 3 docs: <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#dict-views</a></span>
<span class="comment-copy">@paul23,yes you cannot iterate over dict.items in python 3 and delete a key</span>
<span class="comment-copy">viewitems doesn't allocate memory for an actual copy?</span>
<span class="comment-copy">In fact only keys are needed, so viewkeys is suffice.</span>
<span class="comment-copy">again I guess this is for python 2.x? And not working with python's 3.x's new view objects?</span>
<span class="comment-copy">@paul23 you just use <code>.keys()</code> in 3.x</span>
