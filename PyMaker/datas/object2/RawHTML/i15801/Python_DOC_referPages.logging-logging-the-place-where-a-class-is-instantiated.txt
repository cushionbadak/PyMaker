<div class="post-text" itemprop="text">
<p>I wnat to log all file write operations across scripts, and I want the info of which method/class made the write operation. For example, I have this code  </p>
<pre><code>import logging

logger = logging.getLogger('root')
#FORMAT = "[%(filename)s:%(funcName)20s() ] %(message)s"
#logging.basicConfig(format=FORMAT)
logger.setLevel(logging.DEBUG)


class FileWrite:
    def __init__(self,filename):
        self.filename = filename
        self.f = open(filename,'w')

    def __enter__(self):
        return self.f

    def __exit__(self):
        self.f.close()
        logger.debug("Write to: {}".format(self.filename))
</code></pre>
<p>I want to be able to also log which method made the write operation, when I run code like this</p>
<pre><code>class A:
    def a():
        with FileWrite("file.txt") as f:
            f.write("something")
</code></pre>
<p>It should be logged that "file.txt" was written by method <code>A.a</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This is one of those things that you <em>normally</em> shouldn't do… but occasionally it makes sense. I'm not sure whether your case qualifies or not, but I'll show you how to do it.</p>
<p>What you're looking for is information about the function that called the current frame. <a href="https://docs.python.org/3/library/inspect.html#the-interpreter-stack" rel="nofollow">The interpreter stack</a> in the <code>inspect</code> docs shows how you can get this information:</p>
<pre><code>frame = inspect.currentframe()
caller = frame.f_back
name = caller.f_code.co_name
</code></pre>
<p>A few things to notice:</p>
<ul>
<li>This gives you the name of the code object, which is the name used as <code>def</code> time, which may not be the same as the name the function was called as. Importantly, in your case, at <code>def</code> time this is just a function, <code>a</code>, not a method, <code>A.a</code>, so you're not going to get the latter. (Notice that tracebacks print bare function names the same way—that's because they have the same information you have here.)</li>
<li>You can also get things like the filename and line number (again, those will be as of the <code>def</code> statement), and armed with that info the <code>inspect</code> module can get even more information.</li>
<li>In some cases, the "frame record" returned by <code>inspect.stack(1)[1]</code> might have more "run-time-y" rather than define-time information, but not in general. (Much of the info is pulled straight from the frame attributes, but some of it is overridden by information pulled out of the source, if available. See <a href="https://hg.python.org/cpython/file/default/Lib/inspect.py#l1278" rel="nofollow"><code>getframeinfo</code></a> for details.) For example, you could look at <code>inspect.stack(1)[2][4]</code> to get the source line <code>my_A_instance.a()</code>, which you might find interesting.</li>
<li>This requires Python 3.4. If you're using 3.3 or earlier, as long as you only care about CPython, <code>caller = sys._getframe(1)</code> can effectively replace the first two lines.</li>
<li>If your app is multithreaded (or green-threaded), you may want to explicitly <code>del</code> or <code>.clear()</code> the frame objects before calling anything slow/blocking, like <code>logger.debug</code>.</li>
</ul>
</div>
<span class="comment-copy">Still, this <a href="http://stackoverflow.com/questions/5067604/determine-function-name-from-within-that-function-without-using-traceback" title="determine function name from within that function without using traceback">stackoverflow.com/questions/5067604/…</a> might help you.</span>
