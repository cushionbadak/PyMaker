<div class="post-text" itemprop="text">
<p>I have got 10 parameters to initialize. Following a convention, they are named as a_true, b_true etc. They are <em>not</em> a list or array but independent variables.They need to be initialized from an array of length 1X10.</p>
<p>I intend to do something like this which I know has got its shortcomings:</p>
<pre><code>param=[34,65,...,234] # Contains initialization values
var=['a','b','c','d','e','f','g','h','i','j']
gvalues=[] # Array intended to contain variable names
k=0
for i in var:
    gvalues.append(var[k]+'_true')
    k+=1
</code></pre>
<p>This creates an array of elements like a_true, b_true etc. I want to take them as variables rather than as elements of an array and finally initialize them with the values from param.
Any possibilities?
Sorry from a newbie if it seems trivial.</p>
<p>Output_intended:</p>
<pre><code>[a_true, b_true, ..., j_true]=[34, 65, ... , 234]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow"><code>locals()</code></a> and <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow"><code>globals()</code></a> to dynamically assign variables.</p>
<pre><code>&gt;&gt;&gt; param = range(10)
&gt;&gt;&gt; var = 'abcdefghij'
&gt;&gt;&gt; locals().update({'{}_true'.format(k): v for k, v in zip(var, param)})
&gt;&gt;&gt; c_true
2
&gt;&gt;&gt; f_true
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It was already discussed here:</p>
<p><a href="https://stackoverflow.com/questions/11553721/using-a-string-variable-as-a-variable-name">Using a string variable as a variable name</a></p>
<p>In particular, something like this should work:</p>
<pre class="lang-py prettyprint-override"><code>for k, v in zip(gvalues, params):
    exec('%s = %s' % (k, v))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try using a dictionary, with the keys being a_true, ect and the values being the numbers.</p>
<p>dict={}</p>
<p>dict['a_true']=35</p>
<p>etc</p>
<p>or you can do the whole thing in a loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can through list of letters and concatenate every letter with '_true'</p>
<pre><code>import string

gvalues =[x+'_true' for x in string.ascii_lowercase]
print gvalues
</code></pre>
<p>Output: </p>
<pre><code>['a_true', 'b_true', 'c_true', 'd_true', 'e_true', 'f_true', 'g_true', 'h_true', 'i_true', 'j_true', 'k_true', 'l_true', 'm_true', 'n_true', 'o_true', 'p_true', 'q_true', 'r_true', 's_true', 't_true', 'u_true', 'v_true', 'w_true', 'x_true', 'y_true', 'z_true']
</code></pre>
<p>In case you need to concatenate it with all letter (Upper case + Lower case.)</p>
<pre><code>import string

gvalues =[x+'_true' for x in string.ascii_letters]
print gvalues
</code></pre>
<p>That would give you: </p>
<pre><code>['a_true', 'b_true', 'c_true', 'd_true', 'e_true', 'f_true', 'g_true', 'h_true', 'i_true', 'j_true', 'k_true', 'l_true', 'm_true', 'n_true', 'o_true', 'p_true', 'q_true', 'r_true', 's_true', 't_true', 'u_true', 'v_true', 'w_true', 'x_true', 'y_true', 'z_true', 'A_true', 'B_true', 'C_true', 'D_true', 'E_true', 'F_true', 'G_true', 'H_true', 'I_true', 'J_true', 'K_true', 'L_true', 'M_true', 'N_true', 'O_true', 'P_true', 'Q_true', 'R_true', 'S_true', 'T_true', 'U_true', 'V_true', 'W_true', 'X_true', 'Y_true', 'Z_true']
</code></pre>
<p><strong>UPDATE</strong></p>
<p>If you wanna create variable with name 'a_true'. This is not the best to do it. However, you can use Dictionaries. 
It's a way to map variable using <code>keys</code> to get <code>values</code>. </p>
<p>In this example. 
we add 'a_true' as a key, to get a value. </p>
<pre><code>d= {'a_true':1, 'b_true':2, 'c_true':3, 'd_true':3}

print d['a_true']
</code></pre>
<p>would give you: <code>1</code> </p>
<pre><code>print d['b_true']
</code></pre>
<p>would give you: <code>2</code> </p>
</div>
<span class="comment-copy">in for loop <code>vari</code> should be <code>var</code> !!?</span>
<span class="comment-copy">Oh thanks, corrected</span>
<span class="comment-copy">@user3440489 show the output what you want. you are not clear yet. Better use <code>i+'_true</code>' in for loop remove <code>k</code>.</span>
<span class="comment-copy">Just a note: You are probably better off making them into a list or dict or other structure, instead of using separate variables.</span>
<span class="comment-copy">Thanks, it works exactly how I wanted it to!</span>
<span class="comment-copy">Why did you downmark me?</span>
<span class="comment-copy">Thanks for help. But this array of variable names is created using for loop as well using append (though this more elegant). Now what if I want to use these elements as variables and initialize them like a_true=45?</span>
<span class="comment-copy">check the  update</span>
<span class="comment-copy">why u gave (-1) for all other answers. This solution solve the problem, but it's not the best. it should be ranked (0) in case u don't like it, (-x) for really unrelated soltion (which is not the case for this one or any of the others)</span>
