<div class="post-text" itemprop="text">
<p>I've found that python doesn't like it when you operate on lambda equations.</p>
<pre><code>y = lambda x: exp(2*x)
m = lambda x: 2*y - x
</code></pre>
<p>yields the error:</p>
<pre><code>TypeError: unsupported operand type(s) for *: 'int' and 'function'
</code></pre>
<p>I'm currently working on really long equations where I need to substitute a lot of equations, but  Python won't let me operate on lambda equations.
Are there any ways around this in python? </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-lambda_expr" rel="nofollow"><code>lambda</code></a> creates an anonymous <em>function</em>.  Hence, you need to call it as one:</p>
<pre><code>m = lambda x: 2*y(x) - x
#                ^^^
</code></pre>
<p>See a demonstration below:</p>
<pre><code>&gt;&gt;&gt; lamb = lambda x: x * 2
&gt;&gt;&gt; lamb
&lt;function &lt;lambda&gt; at 0x0227D108&gt;
&gt;&gt;&gt; lamb(4)
8
&gt;&gt;&gt;
</code></pre>
<p>Or, in simple terms, doing this:</p>
<pre><code>y = lambda x: exp(2*x)
</code></pre>
<p>is the same as doing this:</p>
<pre><code>def y(x):
    return exp(2*x)
</code></pre>
<p>Note however that PEP 0008, the official style guide for Python code, <strong>condemns</strong> the practice of naming lambdas and using them in place of normal functions:</p>
<blockquote>
<p>Always use a <code>def</code> statement instead of an assignment statement that
  binds a <code>lambda</code> expression directly to an identifier.</p>
<p>Yes:</p>
<p><code>def f(x): return 2*x</code></p>
<p>No:</p>
<p><code>f = lambda x: 2*x</code></p>
<p>The first form means that the name of the resulting function object is
  specifically <code>f</code> instead of the generic <code>&lt;lambda&gt;</code>. This is more
  useful for tracebacks and string representations in general. The use
  of the assignment statement eliminates the sole benefit a <code>lambda</code>
  expression can offer over an explicit <code>def</code> statement (i.e. that it can
  be embedded inside a larger expression)</p>
</blockquote>
<p>Source: <a href="http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow">http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations</a></p>
</div>
<span class="comment-copy">what is <code>exp</code> here???</span>
<span class="comment-copy">What do you expect the result of this to be? If you "expand out" <code>y</code> in your second line, what would it look like?</span>
<span class="comment-copy">i luv u ... it works</span>
<span class="comment-copy">@user3065619 Just try to think through <i>why</i> it works: you can't use the lambda to include the expression in your second line, you can only use it to include the <i>result</i> of that expression.</span>
<span class="comment-copy">why <i>name</i> an <i>anonymous</i> function? Use the def statement</span>
<span class="comment-copy">@JBernardo - I agree.  In fact, PEP 0008 condemns the practice.  See my edit for details.</span>
<span class="comment-copy">I'm using the lambda because I'm going to be integrating the resulting expressions. These equations are reallllllly long so I needed someway of breaking them apart. The def function makes it feel like the function has some important property or contribution to merit its own name but really they are just fragments of a super long equation.</span>
