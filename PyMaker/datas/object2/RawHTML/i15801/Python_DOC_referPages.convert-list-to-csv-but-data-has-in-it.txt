<div class="post-text" itemprop="text">
<p>I want to convert a list to csv but some data hava ',' in them. So when I write</p>
<pre><code>with open('out.csv', 'w') as fp:
    writer = csv.writer(fp,delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
    writer.writerows(elements)
</code></pre>
<p>elements being my list name, the data which contains a "," is sent to the next column, but it is a part of a single name. For Eg. <code>Smith, CA. SO</code> the CA moves to the next column.
What can I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you should be opening the file using the <code>newline=''</code> parameter (read the docs for the <a href="http://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code> module</a>).</p>
<p>Then, choose <code>"</code> as your quote character so other CSV tools (Excel?) that expect quotes can react correctly to your file:</p>
<pre><code>with open('out.csv', 'w', newline='') as fp:
    writer = csv.writer(fp, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
    writer.writerows(elements)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <code>csv.QUOTE_ALL</code>.</p>
<p>from the <a href="https://docs.python.org/2/library/csv.html#csv.QUOTE_ALL" rel="nofollow">documentation</a></p>
<pre><code>csv.QUOTE_ALL
Instructs writer objects to quote all fields.
</code></pre>
<p>If you are using a special quote char, the application you are using to read the csv needs to be configured to use it as the quote char</p>
</div>
<div class="post-text" itemprop="text">
<p>The values that have to be quoted will be quoted, automatically. For example, if you use <code>,</code> as delimiter, the value "Smith, CA" has to be quoted since it contains a <code>,</code>.</p>
<p>Your question does not say anything about how the <code>elements</code> variable looks, so I'm making a guess here. If you have elements in an iterable and each element looks something like <code>['Smith, CA', 1, someothervalue]</code>, the code you posted works just fine. I completed your code example as follows:</p>
<pre><code>import csv

elements = [['Smith, CA', 1, 'salad'], ['Doe, NY', 2, 'soup']]

with open('out.csv', 'w') as fp:
    writer = csv.writer(fp, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
    writer.writerows(elements)
</code></pre>
<p>It will produce the following output:</p>
<pre><code>|Smith, CA|,1,salad
|Doe, NY|,2,soup
</code></pre>
<p>Note 1: Since you are using <code>quoting=csv.QUOTE_MINIMAL</code>, it is only values that <em>need</em> to be quoted that will be. Other values like <code>1</code> or <code>'salad'</code> are not quoted.</p>
<p>Note 2: Using <code>|</code> as a quotechar is not very common, as @TimPietzcker just noted. But it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a working example, but note this won't be readable in Excel as someone commented.</p>
<pre><code>import csv

elements = [['Last1, First1','City, State',12345,'111-22-3333','Embedded|Quote'],
            ['Last2, First2','City, State',12345,'111-22-3333','Embedded|Quote'],
            ['Last3, First3','City, State',12345,'111-22-3333','Embedded|Quote'],
            ['Last4, First4','City, State',12345,'111-22-3333','Embedded|Quote']]

with open('out.csv', 'w', newline='') as fp:
    writer = csv.writer(fp,delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
    writer.writerows(elements)

with open('out.csv') as fp:
    print(fp.read())

with open('out.csv', 'r', newline='') as fp:
    reader = csv.reader(fp, quotechar='|')
    for line in reader:
        print(line)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>|Last1, First1|,|City, State|,12345,111-22-3333,|Embedded||Quote|
|Last2, First2|,|City, State|,12345,111-22-3333,|Embedded||Quote|
|Last3, First3|,|City, State|,12345,111-22-3333,|Embedded||Quote|
|Last4, First4|,|City, State|,12345,111-22-3333,|Embedded||Quote|

['Last1, First1', 'City, State', '12345', '111-22-3333', 'Embedded|Quote']
['Last2, First2', 'City, State', '12345', '111-22-3333', 'Embedded|Quote']
['Last3, First3', 'City, State', '12345', '111-22-3333', 'Embedded|Quote']
['Last4, First4', 'City, State', '12345', '111-22-3333', 'Embedded|Quote']
</code></pre>
<p>If you actually want to open the <code>.csv</code> file in Excel, use the default <code>dialect</code> parameter. Also you <code>encoding='utf-8-sig'</code> to support non-ASCII characters and also provide the byte order mark (BOM) signature that Excel requires to read the .csv properly:</p>
<pre><code>#! coding=utf8
import csv

elements = [['Last1, First1','City, State',12345,'111-22-3333','Embedded"Quote'],
            ['多路能, 马克','City, State',12345,'111-22-3333','Embedded"Quote'],
            ['Last3, First3','City, State',12345,'111-22-3333','Embedded"Quote'],
            ['Last4, First4','City, State',12345,'111-22-3333','Embedded"Quote']]

with open('out.csv', 'w', encoding='utf-8-sig', newline='') as fp:
    writer = csv.writer(fp)
    writer.writerows(elements)

with open('out.csv','rb') as fp:
    print(fp.read().decode())

with open('out.csv', 'r', encoding='utf-8-sig', newline='') as fp:
    reader = csv.reader(fp)
    for line in reader:
        print(line)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>"Last1, First1","City, State",12345,111-22-3333,"Embedded""Quote"
"多路能, 马克","City, State",12345,111-22-3333,"Embedded""Quote"
"Last3, First3","City, State",12345,111-22-3333,"Embedded""Quote"
"Last4, First4","City, State",12345,111-22-3333,"Embedded""Quote"

['Last1, First1', 'City, State', '12345', '111-22-3333', 'Embedded"Quote']
['多路能, 马克', 'City, State', '12345', '111-22-3333', 'Embedded"Quote']
['Last3, First3', 'City, State', '12345', '111-22-3333', 'Embedded"Quote']
['Last4, First4', 'City, State', '12345', '111-22-3333', 'Embedded"Quote']
</code></pre>
</div>
<span class="comment-copy">set the quotechar to the quoting mechanism your application uses - most likely the default <code>"</code>.</span>
<span class="comment-copy">Can you give an example?  Using your code with the list <code>[['a', 'b,c', 'd'],[1,2,3]]</code> with delimiter <code>','</code> and <code>QUOTE_MINIMAL</code>, it works perfectly for me.  Why doesn't it for you?</span>
<span class="comment-copy">@RayToal Open the file in MS Excel afterwards, you'll see that b and c are on different columns. Then try with Tim Pietzcker's solution (Tested on MS Excel 2007).</span>
<span class="comment-copy">If you want to open it in Excel, best to use the default dialect of <code>'excel'</code>.</span>
<span class="comment-copy">Okay but the question didn't say anything specific about Excel.  As a Python script, the OP's code was just fine.  Not being able to open in Excel is a completely different question. :)</span>
<span class="comment-copy"><code>QUOTE_ALL</code> is unnecessary. <code>QUOTE_MINIMAL</code> already quotes all the fields where that's needed.</span>
