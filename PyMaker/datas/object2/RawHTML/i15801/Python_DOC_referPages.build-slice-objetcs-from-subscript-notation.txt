<div class="post-text" itemprop="text">
<p>I would like to get slice objects from subscript notation. So far, I have used a hacky trick to exploit Python built-in subscript to slice conversion features:</p>
<pre><code>class Slice:
    def __getitem__(self, item):
        return item
</code></pre>
<p>For example, <code>Slice()[1:2]</code> will return <code>slice(1,2,None)</code>.</p>
<p>Does anyone know of a more straightforward way?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you <em>must</em> use subscript notation, then your current solution is the most compact besides maybe a dynamic class created with <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow"><code>type</code></a>:</p>
<pre><code>&gt;&gt;&gt; Slice = type('', (), {'__getitem__': lambda _, x: x})()
&gt;&gt;&gt; Slice[1:2]
slice(1, 2, None)
&gt;&gt;&gt; Slice[1:2:3]
slice(1, 2, 3)
&gt;&gt;&gt;
</code></pre>
<p>But code like this is usually hard to understand/maintain/extend/etc.  </p>
<p>Instead, I would recommend that you use <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow"><code>slice</code></a>, which allows you to create slice objects directly:</p>
<pre><code>&gt;&gt;&gt; slice(1, 2)
slice(1, 2, None)
&gt;&gt;&gt; slice(1, 2, 3)
slice(1, 2, 3)
&gt;&gt;&gt;
</code></pre>
<p>The built-in was made specifically for this purpose (well, that and a few others such as type-checking with <code>isinstance</code>) and is therefore very portable as well as pythonic.</p>
</div>
<span class="comment-copy">Can you elaborate? Python has a built in slice function, what exactly are you trying to slice?</span>
<span class="comment-copy">Why does it have to be from subscript notation?  Python has a built-in <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> function that lets you construct slice objects directly:  <code>my_slice = slice(1, 2)</code>.</span>
<span class="comment-copy">I doesn't <i>have</i> to be in subscript notation. I like that because it allows you to construct many slices from a compact notation.</span>
