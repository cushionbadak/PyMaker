<div class="post-text" itemprop="text">
<p>Say you call the "filter" function on a list, and you use this to find all elements that satisfy a certain property.  Are the elements in the output list guaranteed to be in the same order that they were in the input list?</p>
</div>
<div class="post-text" itemprop="text">
<p>The simple answer is yes. Lists are ordered iterables, and the <code>filter</code> generator reads each item in, one at a time in that order. Therefore, it will yield output in order.</p>
<pre><code>&gt;&gt;&gt; example = list(range(10))
&gt;&gt;&gt; list(filter(lambda n: n % 2, example))
[1, 3, 5, 7, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/functions.html#filter" rel="noreferrer">docs</a> for <code>filter</code>:</p>
<blockquote>
<p>Note that <code>filter(function, iterable)</code> is equivalent to the generator expression <code>(item for item in iterable if function(item))</code></p>
</blockquote>
<p>As the equivalent generator expression would preserve order, <code>filter</code> is guaranteed to preserve it as well.</p>
</div>
<span class="comment-copy">Thanks Alex!  Which other data structures count as "ordered iterables?"  I know hash tables probably don't.  Are lists the only ones?</span>
<span class="comment-copy">@Jessica Tuples, strings, OrderedDict, Queue, deque, and everything that implements <code>collections.abcs.Sequence</code>.</span>
<span class="comment-copy">Lists, strings, tuples etc. Unordered ones include dictionaries or sets, which are in arbitrary order, or iterators such as <code>range</code> because we don't have the full thing in memory at one time.</span>
<span class="comment-copy">Thanks, that was very helpful.</span>
<span class="comment-copy">Thanks for the quick answer!  I looked at those docs but I didn't know how generators worked so I didn't realize they preserved order.</span>
<span class="comment-copy">@Jessica Yeah, it's a bit of a rabbit hole; in the end, <code>filter</code>, generator expressions, list comprehensions, etc. rely on the <code>__iter__</code> method of an object, which iterates through each element in order, if the object is ordered like e.g. a <code>list</code> or <code>tuple</code>.</span>
<span class="comment-copy">Good to know :)</span>
