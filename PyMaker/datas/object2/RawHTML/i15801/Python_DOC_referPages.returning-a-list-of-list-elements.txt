<div class="post-text" itemprop="text">
<p>I need help writing a function that will take a single list and return a different list where every element in the list is in its own original list.</p>
<p>I know that I'll have to iterate through the original list that I pass through and then append the value depending on whether or not the value is already in my list or create a sublist and add that sublist to the final list.</p>
<p>an example would be:</p>
<pre><code>input:[1, 2, 2, 2, 3, 1, 1, 3]

Output:[[1,1,1], [2,2,2], [3,3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd do this in two steps:</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; inputs = [1, 2, 2, 2, 3, 1, 1, 3]
&gt;&gt;&gt; counts = collections.Counter(inputs)
&gt;&gt;&gt; counts
Counter({1: 3, 2: 3, 3: 2})
&gt;&gt;&gt; outputs = [[key] * count for key, count in counts.items()]
&gt;&gt;&gt; outputs
[[1, 1, 1], [2, 2, 2], [3, 3]]
</code></pre>
<p>(The fact that these happen to be in sorted numerical order, and also in the order of first appearance, is just a coincidence here. Counters, like normal dictionaries, store their keys in arbitrary order, and you should assume that <code>[[3, 3], [1, 1, 1], [2, 2, 2]]</code> would be just as possible a result. If that's not acceptable, you need a bit more work.)</p>
<hr/>
<p>So, how does it work?</p>
<p>The first step creates a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a>, which is just a special subclass of <code>dict</code> made for counting occurrences of each key. One of the many nifty things about it is that you can just pass it any iterable (like a <code>list</code>) and it will count up how many times each element appears. It's a trivial one-liner, it's obvious and readable once you know how <code>Counter</code> works, and it's even about as efficient as anything could possibly be.*</p>
<p>But that isn't the output format you wanted. How do we get that? Well, we have to get back from <code>1: 3</code> (meaning "3 copies of <code>1</code>") to <code>[1, 1, 1]</code>). You can write that as <code>[key] * count</code>.** And the rest is just a bog-standard list comprehension.</p>
<hr/>
<p>If you look at the docs for the <code>collections</code> module, they start with a link to <a href="https://hg.python.org/cpython/file/default/Lib/collections/__init__.py#l416" rel="nofollow">the source</a>. Many modules in the stdlib are like this, because they're meant to serve as source code for learning from as well as usable code. So, you should be able to figure out how the <code>Counter</code> constructor works. (It's basically just calling that <code>_count_elements</code> function.) Since that's the only part of <code>Counter</code> you're actually using beyond a basic <code>dict</code>, you could just write that part yourself. (But really, once you've understood how it works, there's no good reason not to use it, right?)</p>
<hr/>
<p><sub>* For each element, it's just doing a hash table lookup (and insert if needed) and a <code>+= 1</code>. And in CPython, it all happens in <a href="https://hg.python.org/cpython/file/default/Modules/_collectionsmodule.c#l1796" rel="nofollow">reasonably-optimized C</a>.</sub></p>
<p><sub>** Note that we don't have to worry about whether to use <code>[key] * count</code> vs. <code>[key for _ in range(count)]</code> here, because the values have to be immutable, or at least of an "equality is as good as identity" type, or they wouldn't be usable as keys.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>The most time efficient would be to use a dictionary:</p>
<pre><code>collector = {}
for elem in inputlist:
    collector.setdefault(elem, []).append(elem)

output = collector.values()
</code></pre>
<p>The other, more costly option is to sort, then group using <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby()</code></a>:</p>
<pre><code>from itertools import groupby

output = [list(g) for k, g in groupby(sorted(inputlist))]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; inputlist = [1, 2, 2, 2, 3, 1, 1, 3]
&gt;&gt;&gt; collector = {}
&gt;&gt;&gt; for elem in inputlist:
...     collector.setdefault(elem, []).append(elem)
... 
&gt;&gt;&gt; collector.values()
[[1, 1, 1], [2, 2, 2], [3, 3]]
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [list(g) for k, g in groupby(sorted(inputlist))]
[[1, 1, 1], [2, 2, 2], [3, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about this, as you said you wanted a function:</p>
<pre><code>def makeList(user_list):
    user_list.sort()
    x = user_list[0]
    output = [[]]
    for i in user_list:
        if i == x:
            output[-1].append(i)
        else:
            output.append([i])
        x = i

    return output

&gt;&gt;&gt; print makeList([1, 2, 2, 2, 3, 1, 1, 3])
[[1, 1, 1], [2, 2, 2], [3, 3]]
</code></pre>
</div>
<span class="comment-copy">Will the values in the original list always be integers, or at least hashable?</span>
<span class="comment-copy">They will always be integers. Not hashable</span>
<span class="comment-copy">Hashability is a characteristic of a value, not a type.  Integers are hashable.</span>
<span class="comment-copy">Ah alright, I miss understood what you have meant.</span>
<span class="comment-copy">Although that would work for my code, unfortunately I have not learned about collections yet and would probably not be wise to use code I am unfamiliar with.</span>
<span class="comment-copy">@JohnnyBoy: If you look at the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections</code></a> docs, they start with a link to <a href="https://hg.python.org/cpython/file/default/Lib/collections/__init__.py#l416" rel="nofollow noreferrer">the source</a>. Many modules in the stdlib are like this, because they're meant to serve as source code for learning from as well as usable code. Can you understand how the <code>Counter</code> constructor works? If so, you can build it yourself (or just feel comfortable using it).</span>
<span class="comment-copy">@MartijnPieters: No it isn't. Besides being an iterator instead of a list, it's also flat—it just gives you back <code>1, 1, 1, 2, 2, 2, 3, 3</code>, which is the same thing you started with in the first place.</span>
<span class="comment-copy">@abarnert: ick, I misread and assumed flat output...</span>
<span class="comment-copy">@abarnert I agree with you that once I know how it works I should be able to use it, however my professor might not agree with this.</span>
<span class="comment-copy">There's no sorted requirement in the OP.  The fact that the output is sorted could be a side-effect of the input in the example, if the intended behavior is for the output to be in order of first occurance, or if order doesn't matter.</span>
<span class="comment-copy">You're doing extra work to flatten the output after nesting it, which defeats the purpose of the question (which was to nest the data).</span>
<span class="comment-copy">@abarnert: yeah, already corrected.</span>
<span class="comment-copy">That last line reminds me: I wish there were a <code>yield from (list(g) for k, g in groupby(iterable, keyfunc))</code> in the stdlib, or at least in <code>more-itertools</code>, or at least a meaningful name I could think of and use consistently…</span>
