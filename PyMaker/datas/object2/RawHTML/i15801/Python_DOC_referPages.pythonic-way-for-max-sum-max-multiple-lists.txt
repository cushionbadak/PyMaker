<div class="post-text" itemprop="text">
<p>I have 3 lists:</p>
<pre><code>a1 = range(10)
a2 = range(10,20)
a3 = range(20,30)
</code></pre>
<p>I need to do the following:</p>
<p>For each list, get max of every 5 element blocks, so hypothetically:</p>
<pre><code>a1_maxes = [max1_a1, max2_a1]
a2_maxes = [max1_a2, max2_a2]
a3_maxes = [max1_a3, max2_a3]
</code></pre>
<p>Sum each "maxes" list, so:</p>
<pre><code>for each i:
    sum_i = sum(ai_maxes)
</code></pre>
<p>Take the max of these 3 sums, so:</p>
<pre><code>max(sum_1, sum_2, sum_3)
</code></pre>
<p>I could not get myself to use <code>map()</code> here. What would be the most Pythonic (concise) way to do this? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a1 = range(10)
a2 = range(10,20)
a3 = range(20,30)

print(max(sum(x[i:i+5]) for x in (a1,a2,a3) for i in xrange(0,len(a1),5)))
135
</code></pre>
<p>Just get the <code>sum</code>of each chunk <code>x[i:i+5]</code></p>
<p>To make it more obvious, the lists become split into the following chucks:</p>
<pre><code>print(list(x[i:i+5]) for x in [a1,a2,a3] for i in xrange(0,len(a1),5))

[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24], [25, 26, 27, 28, 29]]
</code></pre>
<p>Then max just gets the largest sum:</p>
<p>If you want the highest two elements from each check:</p>
<pre><code>mx_pair = max(sorted(x[i:i+5])[-2:] for x in (a1,a2,a3) for i in xrange(0,len(a1),5))
print(sum(mx_pair))
57
</code></pre>
<p>If the answer should be 53:</p>
<pre><code>from itertools import izip,imap
def chunks(l):
    for i in xrange(0,len(l), 5):
        yield l[i:i+5]

sums = (max(izip(*ele)) for ele in imap(chunks,(a1,a2,a3)))
print(sum(max(sums)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's break this into pieces.</p>
<p>The first point is that you probably don't want separate <code>a1</code>, <code>a2</code>, and a3` variables; if you're going to have to do the exact same thing repeatedly to multiple values, and then iterate over those values, they probably belong in a list. So:</p>
<pre><code>a = [a1, a2, a3]
</code></pre>
<p>Now, how do you split an iterable into 5-element pieces? There are a number of ways to do it, from <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">the <code>grouper</code> function in the <code>itertools</code> recipes</a> to zipping slices to iterating over slices. I'll use <code>grouper</code>:</p>
<pre><code>grouped = [grouper(sublist, 5) for sublist in a]
</code></pre>
<p>Now we just want the max value of each group, so:</p>
<pre><code>maxes = [[max(group) for group in sublist] for sublist in a]
</code></pre>
<p>And now, we want to sum up each sublist:</p>
<pre><code>sums = [sum(sublist) for sublist in maxes]
</code></pre>
<p>And finally, we want to take the max of these sums:</p>
<pre><code>maxsum = max(sums)
</code></pre>
<p>Now, given that each of these list comprehensions is only being used as a one-shot iterable, we might as well turn them into generator expressions. And if you want to, you can merge some of the steps together:</p>
<pre><code>maxsum = max(sum(max(group) for group in grouper(sublist, 5)) for sublist in a)
</code></pre>
<p>And, having done that, you don't actually need <code>a</code> to be created explicitly, because it only appears once:</p>
<pre><code>maxsum = max(sum(max(group) for group in grouper(sublist, 5)) 
             for sublist in a1, a2, a3)
</code></pre>
</div>
<span class="comment-copy">When you say "get max of every 5 element blocks", do you mean that for <code>a1 = [1 2 3 4 5 6]</code>, <code>a1_maxes = [5 6]</code>?</span>
<span class="comment-copy">@LukeYeager Yes</span>
<span class="comment-copy">Why not use <code>numpy.array</code>?</span>
<span class="comment-copy">downvote for exactly?</span>
<span class="comment-copy">I think the output should be 53 not 135.</span>
<span class="comment-copy">@AshwiniChaudhary, do you mean 57?</span>
<span class="comment-copy">Nop 53, 24 + 29 from a3.</span>
<span class="comment-copy">@DarrenRinger, well I have covered pretty much every possibility</span>
<span class="comment-copy">Couple of issues: <code>grouped = [grouper(sublist, 5) for sublist in a] </code>, <code>[[max(group) for group in sublist] for sublist in grouped]</code>,  <code>sums = [sum(sublist) for sublist in maxes]</code>...</span>
<span class="comment-copy">I am looking for a Python 2.7 solution. <code>grouper</code> is Python &gt;= 3 I believe.</span>
<span class="comment-copy">@SandeepY Grouper recipe is present in Python 2.7 as well: <a href="https://docs.python.org/2.7/library/itertools.html#recipes" rel="nofollow noreferrer">docs.python.org/2.7/library/itertools.html#recipes</a></span>
<span class="comment-copy">@SandeepY: Why would you just assume that something doesn't exist in 2.7 without just looking at the docs to see? Or trying it? Especially since this is code in a recipe, so it doesn't even <i>matter</i> if the recipe is in the 2.7 docs; if you copy the 3.x recipe into a Python 2.7 interpreter or script it works just fine.</span>
