<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">Python 3 mock objects</a> support being queried for arguments to their calls, is it possible to also query them for the  values returned by their calls?</p>
<p>My particular scenario is that I mock tempfile.mkdtemp, but as a side effect call the real mkdtemp. I'd like to get hold of the created temporary directory in my test.</p>
<pre><code>from unittest import mock
import shutil
import tempfile

from app import production_function


def mkdtemp(*args, **kwargs):
    dtemp = orig_mkdtemp(*args, **kwargs)
    return dtemp


orig_mkdtemp = tempfile.mkdtemp
patcher = mock.patch('tempfile.mkdtemp', name='tempfile.mkdtemp')
the_mock = patcher.start()
the_mock.side_effect = mkdtemp

# Call function under test
production_function()

assert the_mock.called
# Now, how to get the return value from the call to the_mock?

patcher.stop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately <code>mock</code> module don't store return value (I took a look by debugguer and there isn't any trace of it). You must store it before return the value of <code>side_effect</code>.</p>
<p>You can use an object to take care of the <em>dirty work</em>. For instance a very base implementation can be something like that:</p>
<pre><code>class SideEffect():
    def __init__(self, n):
        self.values = iter(range(n))
        self.return_value = None

    def __call__(self):
        self.return_value = next(self.values)
        return self.return_value


a = Mock()
se = SideEffect(10)
a.side_effect = se

for x in range(10):
    v = a()
    assert v == se.return_value
    print("a()={}  return_value={}".format(v, se.return_value))
</code></pre>
<p>If you want a more sophisticated <code>side_effect</code> that wrap a function and take care of arguments and exception an example could be:</p>
<pre><code>class GenericSideEffect():
    def __init__(self, f, *args, **kwargs):
        self.v_function = f
        self.args = args
        self.kwargs = kwargs
        self._return_value = Exception("Never Called")

    def __call__(self):
        try:
            self._return_value = self.v_function(*self.args, **self.kwargs)
            return self._return_value
        except Exception as e:
            self.return_value = e
            raise e

    @property
    def return_value(self):
        if isinstance(self._return_value, Exception):
            raise self._return_value
        return self._return_value
</code></pre>
<p>Of course you can write it as decorator and preserve the signature, but I think that part is out of scope in that answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>if the comportment is deterministic and state less you can get the list of call done to your mock and call again the nested call you  are interested in to catch the result. Else I suppose you can do something like:</p>
<pre><code>def mkdtemp_wrapper(result_storage):
    def mkdtemp(*args, **kwargs):
        dtemp = orig_mkdtemp(*args, **kwargs)
        result_storage.append(((*args,**kwargs),dtemp))
        return dtemp
    return mkdtemp
</code></pre>
<p>And modify the mock this way:</p>
<pre><code>results_values = []
the_mocks.side_effect = mkdtemp_wrapper(result_values)
</code></pre>
<p>And then you'll have in result values a list of couple arguments, results.</p>
<p>Hope it helps.</p>
</div>
<span class="comment-copy">I don't quite understand your question, why not just call it?</span>
<span class="comment-copy">See my updated question for the scenario.</span>
<span class="comment-copy">No, I took  look to the mock object by debugger and I don't found any references to the real return value. You must log it in side_effect callable and point it by call_count value</span>
<span class="comment-copy">I don't think this answer helps, because it doesn't say if/how the mock object itself supports querying return values.</span>
<span class="comment-copy">Don't understand your comment, and don't see the problem. but anyway, it seems that Michele D'Amico have solved your problem</span>
