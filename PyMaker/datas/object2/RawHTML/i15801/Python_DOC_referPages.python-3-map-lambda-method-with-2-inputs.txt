<div class="post-text" itemprop="text">
<p>I have a dictionary like the following in python 3: </p>
<pre><code>ss = {'a':'2', 'b','3'}
</code></pre>
<p>I want to convert all he values to int using <code>map</code> function, and I wrote something like this:</p>
<pre><code>list(map(lambda key,val: int(val), ss.items())))
</code></pre>
<p>but the python complains:</p>
<blockquote>
<p>TypeError: () missing 1 required positional argument: 'val'</p>
</blockquote>
<p>My question is how can I write a <code>lambda</code> function with two inputs (E.g. key and val)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ss.items()</code> will give an iterable, which gives tuples on every iteration. In your <code>lambda</code> function, you have defined it to accept two parameters, but the tuple will be treated as a single argument. So there is no value to be passed to the second parameter.</p>
<ol>
<li><p>You can fix it like this</p>
<pre><code>print(list(map(lambda args: int(args[1]), ss.items())))
# [3, 2]
</code></pre></li>
<li><p>If you are ignoring the keys anyway, simply use <code>ss.values()</code> like this</p>
<pre><code>print(list(map(int, ss.values())))
# [3, 2]
</code></pre></li>
<li><p>Otherwise, <a href="https://stackoverflow.com/questions/26543349/python-3-map-lamda-method-with-2-inputs/26543472#comment41710823_26543349">as suggested by Ashwini Chaudhary</a>, using <a href="https://docs.python.org/3.5/library/itertools.html#itertools.starmap" rel="noreferrer"><code>itertools.starmap</code></a>,</p>
<pre><code>from itertools import starmap
print(list(starmap(lambda key, value: int(value), ss.items())))
# [3, 2]
</code></pre></li>
<li><p>I would prefer the List comprehension way</p>
<pre><code>print([int(value) for value in ss.values()])
# [3, 2]
</code></pre></li>
</ol>
<p>In Python 2.x, you could have done that like this</p>
<pre><code>print map(lambda (key, value): int(value), ss.items())
</code></pre>
<p>This feature is called <em>Tuple parameter unpacking</em>. But this is removed in Python 3.x. Read more about it in <a href="http://legacy.python.org/dev/peps/pep-3113/" rel="noreferrer">PEP-3113</a></p>
</div>
<span class="comment-copy">You've written it with two parameters just fine, but the problem is it is only being called with a single argument, a tuple <code>(key, val)</code>.</span>
<span class="comment-copy">If you don't want to do anything with the keys, why don't you just map on <code>ss.values()</code>?</span>
<span class="comment-copy">You need to use <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a> instead of plain <code>map</code> as it unpacks the arguments for us(but only if you're using both keys and values, otherwise it's unnecessary as BrenBarn pointed out). In Python 2 it was possible using simple tuple argument unpacking: <code>lambda (key, val): int(val)</code>.</span>
<span class="comment-copy">Have you considered dict comprehension: <code>{k: int(v) for k, v in ss.items()}</code> Or if you want to modify the dict inplace: <code>for k, v in ss.items(): ss[k] = int(v)</code></span>
<span class="comment-copy">If you need only values then: <code>values = map(int, ss.values())</code></span>
<span class="comment-copy">Any other ways you fancy mentioning? :p</span>
<span class="comment-copy">Option zero is to call <code>ss.values()</code>: <code>result = map(int, ss.values())</code></span>
<span class="comment-copy">Thank you for the holistic response. also thanks Ashwini for starmaps. I didnt know that difference in python 2 and 3. which was my main problem.</span>
