<div class="post-text" itemprop="text">
<p>Taking <code>zip</code> for example.
I just want to know is it an <code>Iterable</code> or <code>Iterator</code> or <code>Generator</code> .</p>
<p>so I put this:</p>
<pre><code>zip(x,y).__class__ 
</code></pre>
<p>it prints: zip<br/>
Why class name are lowercase?</p>
<pre><code>import inspect
inspect.getmro(zip) 
zip.__base__ 
</code></pre>
<p>It prints: (zip, object)<br/>
That's impossible. Python doc says <code>zip</code> returns an <code>iterator</code> (or <code>generator</code>?), but <code>zip</code> apparently is not inherited from Iterator or alikes according what <code>getmro</code> prints.</p>
<p>So the two questions ,thanks for help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nothing in Python inherits from <code>Iterator</code> or <code>Iterable</code>, as they embody a <em>protocol</em>. Python looks for the <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow"><code>__iter__</code> and <code>__next__</code> methods</a>, not for a specific base class. Any object can be an iterable or iterator, simply by implementing those methods.</p>
<p><code>zip()</code> is a built-in function defined in C code, and it follows the naming convention for all built-ins; these are always in lowercase; the type it returns is not all that relevant here and follows the function name.</p>
<p>The <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable" rel="nofollow"><code>collections.abc.Iterable</code></a> and <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable" rel="nofollow"><code>collections.abc.Iterator</code></a> classes are <em>abstract base classes</em>; they implement <a href="https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks" rel="nofollow">special hooks</a> that essentially return <code>True</code> if the instance or subclass against which you are test implement the required methods.</p>
<p><code>zip()</code> is both an iterable (it has an <code>__iter__</code> method) and an iterator (<code>__iter__</code> returns the object itself and it has a <code>__next__</code> method):</p>
<pre><code>&gt;&gt;&gt; from collections.abc import Iterator, Iterable
&gt;&gt;&gt; zip_instance = zip('')
&gt;&gt;&gt; type(zip_instance)
&lt;class 'zip'&gt;
&gt;&gt;&gt; isinstance(zip_instance, Iterator)
True
&gt;&gt;&gt; isinstance((zip_instance, Iterable)
True
&gt;&gt;&gt; zip_instance.__iter__
&lt;method-wrapper '__iter__' of zip object at 0x10f2d8348&gt;
&gt;&gt;&gt; zip_instance.__iter__() is zip_instance
True
&gt;&gt;&gt; zip_instance.__next__
&lt;method-wrapper '__next__' of zip object at 0x10f2d8348&gt;
</code></pre>
<p><code>zip()</code> is not a generator, as it doesn't have any of the <a href="https://docs.python.org/3/reference/expressions.html#generator-iterator-methods" rel="nofollow">special generator methods</a>:</p>
<pre><code>&gt;&gt;&gt; hasattr(zip_instance, 'send')
False
&gt;&gt;&gt; hasattr(zip_instance, 'throw')
False
&gt;&gt;&gt; hasattr(zip_instance, 'close')
False
</code></pre>
</div>
<span class="comment-copy">They're ABC's, they don't appear in the MRO of a builtin object...</span>
<span class="comment-copy">Anything can be an iterator. It doesn't have to inherit from any particular base type; it just has to provide the right methods.</span>
<span class="comment-copy">Python places much less emphasis on what type an object is, it cares about what the object can do.</span>
<span class="comment-copy">A note on <code>zip</code> instead of <code>Zip</code>: that's just how a lot of built-in types work; Python and the standard library only conform to PEP8 to a certain degree.</span>
<span class="comment-copy">@chepner: PEP8 states that the current conventions of the project should be honoured, and in CPython all built-ins are lowercase. So <code>zip()</code> is lowercase for that reason, mostly.</span>
<span class="comment-copy">More importantly, the actual type of the thing returned by zip() is irrelevant.  No one ever looks at that class.  zip() is lower-case because it is used as a function.</span>
<span class="comment-copy">@NedBatchelder: clarified the remark a little to add that.</span>
<span class="comment-copy">@WeiChing: you are confusing the Python expression with the verb. <code>zip()</code> <i>yields</i> (verb), but it doesn't use a <i><code>yield</code> expression</i> to do so. You use the latter to <i>yield</i> (verb), which creates a generator function, but not all iterators that <i>yield</i> (verb) values use the expression.</span>
