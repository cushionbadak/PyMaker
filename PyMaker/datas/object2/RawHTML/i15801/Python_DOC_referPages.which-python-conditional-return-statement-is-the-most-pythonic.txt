<div class="post-text" itemprop="text">
<p>Which of the following is the proper way to return something with Python when using conditionals? Does it matter? And why?</p>
<pre><code># OPTION 1
if conditional:
    return a
else:
    return b


# OPTION 2
if conditional:
    return a
return b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <em>proper</em> Python way would be:</p>
<pre><code>return conditional
</code></pre>
<p><a href="http://legacy.python.org/dev/peps/pep-0020/" rel="noreferrer">"Simple is better than complex"</a> remember? :)</p>
<hr/>
<p>Regarding your edited question, I would use <code># OPTION 2</code> because <a href="http://legacy.python.org/dev/peps/pep-0020/" rel="noreferrer">"Flat is better than nested."</a> and this solution saves an indentation level.  You'll appreciate this when:</p>
<pre><code>return b
</code></pre>
<p>is actually something like:</p>
<pre><code>return very_long_and_unwieldy_name_that_you_cannot_change
</code></pre>
<p>Besides, the <code>else:</code> in this case is unnecessary (both syntactically as well as visually) and redundant; it simply wastes space.</p>
<p>That said, you may want to consider using a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer">conditional expression</a> instead:</p>
<pre><code>return a if conditional else b
</code></pre>
<p>This is a very concise and elegant alternative when <code>a</code>, <code>conditional</code>, and <code>b</code> are all nice and short.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this may be a trick question. The first one is <em>not</em> syntactically correct:</p>
<pre><code>if conditional:
    return True
else
    return False
</code></pre>
<p>In Python, an <code>else</code> clause, like anything else that introduces a suite, has to end in a <code>:</code> character.</p>
<p>If you fix that, then they're both syntactically valid, and both semantically meaningful. In fact, they mean the same thing. They'll even compile to almost the same code, except that the first one might cause Python to generate some extra code for a third "fall off the end of the function" case that never gets called.</p>
<p>But, as <a href="https://stackoverflow.com/a/26725294/908494">iCodez's answer</a> explains, both of these are an anti-pattern; just <code>return conditional</code>, or <code>return bool(conditional)</code>, as appropriate.</p>
<p>Note that even in the case where evaluating <code>conditional</code> raises an exception, the different possibilities are <em>still</em> all equivalent (up to the contents of the traceback)â€”they'll all just raise that exception.</p>
</div>
<span class="comment-copy">the else is redundant</span>
<span class="comment-copy">Im not sure you understand what syntactically correct means .. or your teacher may not</span>
<span class="comment-copy">Technically they are both syntactically valid.</span>
<span class="comment-copy">Both are perfectly valid and likely to produce indentical p-code. If <code>conditional</code> is a real boolean expression (not just one of different type interpreted as boolean), then <code>return condition</code> would be clearer, though probably also identical output.</span>
<span class="comment-copy">I fixed the Question title, I meant which is the most Pythonic, or the best practice way of doing it.</span>
<span class="comment-copy">+10000000000000 if I could ... this is an awful pattern(in OP) that I see all the time</span>
<span class="comment-copy">If <code>conditional</code> doesn't yield a strict Boolean value and you want that, then <code>return bool(conditional)</code></span>
<span class="comment-copy">Assumes that <code>conditional</code> is a boolean expression. If it's an expression that returns a non-boolean value that will be interpreted as boolean, then the OP's construction (either of them) is necessary.</span>
<span class="comment-copy">@kindall Why return <i>less</i> information?</span>
<span class="comment-copy">@Sneftel: If you explicitly want less information, you should return less information. You might as well ask why <code>bool</code> itself throws away that information. kindall's comment is just pointing out that you have the choice of doing it if you want to, without any need to extra complexity as in the OP's code.</span>
