<div class="post-text" itemprop="text">
<p>The function below takes password from user. I need to test this using Unit testing/(mocks).</p>
<pre><code>def create_auth():
    username = '{user}'.format(user=getpass.getuser())
    pwd = getpass.getpass()
    auth_string = '{username}:{pwd}'.format(username=username, pwd=pwd)
    return auth_string
</code></pre>
<p>i am new to python, any hint would be helpful</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow"><code>mock.patch</code></a>:</p>
<pre><code>class TestCreateAuth(unittest.TestCase):
    @mock.patch('getpass.getpass')
    @mock.patch('getpass.getuser')
    def test_create_auth(self, getuser, getpw):
        getuser.return_value = 'user'
        getpw.return_value = 'pass'
        self.assertEqual(create_auth(), 'user:pass')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generally speaking, you should <strong>always separate user input from program / business logic</strong>.</p>
<pre><code>def create_auth_interactive():
    return create_auth(getpass.getuser(), getpass.getpass())

def create_auth(user, pwd):
    username = '{user}'.format(user=user) # do you really need this line??
    auth_string = '{username}:{pwd}'.format(username=username, pwd=pwd)
    return auth_string
</code></pre>
<p>This makes your code more maintainable:</p>
<ul>
<li>your core logic is separate from user input, so you can easily switch where that input comes from in the future (maybe you want to expose your program on a HTTP or a RPC server? Or get input from a GUI instead of a CLI)</li>
<li><p>You can unit test without mocking. Mocking is very useful, but if you find that you're needing to mock more and more things as time goes on, it's a good indication that your code is not following <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">separation of concerns</a>. Take a look on <a href="https://en.wikipedia.org/wiki/Dependency_injection" rel="nofollow noreferrer">dependency injection</a></p></li>
<li><p>It's much easier to construct multiple test cases using a list of input values (but some people prefer to have multiple independent tests, check with your team/project)</p></li>
</ul>
</div>
<span class="comment-copy">Thanks. It helped</span>
<span class="comment-copy">I wish I could upvote a hundred times!</span>
