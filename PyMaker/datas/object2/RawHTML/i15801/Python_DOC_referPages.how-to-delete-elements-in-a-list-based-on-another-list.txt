<div class="post-text" itemprop="text">
<p>Suppose I have a list called icecream_flavours, and two lists called new_flavours and unavailable. I want to remove the elements in flavours that appear in 'unavailable', and add those in new_flavours to the original one. I wrote the following program: </p>
<pre><code>for i in unavailable:
    icecream_flavours.remove(i)

for j in new_flavours:
    icecream_flavours.append(j)
</code></pre>
<p>the append one is fine, but it keeps showing 'ValueError: list.remove(x): x not in list' for the first part of the program. What's the problem? </p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two possibilities here.</p>
<p>First, maybe there should never be anything in <code>unavailable</code> that wasn't in <code>icecream_flavours</code>, but, because of some bug <em>elsewhere</em> in your program, that isn't true. In that case, you're going to need to debug where things first go wrong, whether by running under the debugger or by adding <code>print</code> calls all over the code. At any rate, since the problem is most likely in code that you haven't shown us here, we can't help if that's the problem.</p>
<p>Alternatively, maybe it's completely reasonable for something to appear in <code>unavailable</code> even though it's not in <code>icecream_flavours</code>, and in that case you just want to ignore it.</p>
<p>That's easy to do, you just need to write the code that does it. As the docs for <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow"><code>list.remove</code></a> explain, it:</p>
<blockquote>
<p>raises <code>ValueError</code> when <code>x</code> is not found in <code>s</code>.</p>
</blockquote>
<p>So, if you want to ignore cases when <code>i</code> is not found in <code>icecream_flavours</code>, just use a <code>try</code>/<code>except</code>:</p>
<pre><code>for i in unavailable:
    try:
        icecream_flavours.remove(i)
    except ValueError:
        # We already didn't have that one... which is fine
        pass
</code></pre>
<hr/>
<p>That being said, there are better ways to organize your code.</p>
<p>First, using the right data structure always makes things easier. Assuming you don't want duplicate flavors, and the order of flavors doesn't matter, what you really want here is sets, not lists. And if you had sets, this would be trivial:</p>
<pre><code>icecream_flavours -= unavailable
icecream_flavours |= new_flavours
</code></pre>
<p>Even if you can't do that, it's usually simpler to create a new list than to mutate one in-place:</p>
<pre><code>icecream_flavours = [flavour for flavour in icecream_flavours 
                     if flavour not in set(unavailable)]
</code></pre>
<p>(Notice that I converted <code>unavailable</code> to a set, so we don't have to brute-force search for each flavor in a list.)</p>
<p>Either one of these changes makes the code shorter, and makes it more efficient. But, more importantly, they both make the code easier to reason about, and eliminate the possibility of bugs like the one you're trying to fix.</p>
</div>
<div class="post-text" itemprop="text">
<p>To add all the <code>new_flavours</code> that are not <code>unavailable</code>, you can use a list comprehension, then use the <code>+=</code> operator to add it to the existing flavors.</p>
<pre><code>icecream_flavours += [i for i in new_flavours if i not in unavailable]
</code></pre>
<p>If there are already flavors in the original list you want to remove, you can remove them in the same way</p>
<pre><code>icecream_flavours = [i for i in icecream_flavours if i not in unavailable]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you first want to remove all the unavailable flavours from <code>icecream_flavours</code> and then add the new flavours, you can use this list comprehension:</p>
<pre><code>icecream_flavours = [i for i in icecream_flavours if i not in unavailable] + new_flavours
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your error is caused because <code>unavailable</code> contains flavours that are not in <code>icecream_flavours</code>.</p>
<p>Unless order is important, you could use <code>set</code> instead of <code>list</code> as they have operations for differences and unions and you don't need to worry about duplicates</p>
<p>If you must use lists, a list comprehension is a better way to filter the list</p>
<pre><code>icecream_flavours = [x for x in icecream_flavours if x not in unavaiable]
</code></pre>
<p>You can extend the list of flavours like this</p>
<pre><code>icecream_flavours += new_flavours
</code></pre>
<p>assuming there are no duplicates.</p>
</div>
<span class="comment-copy">Are you sure that all of the <code>unavailable</code>s were in <code>icecream_flavours</code>? If it's reasonable that some of them weren't, this is exactly what you should expect, as <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">the docs</a> explain. If it's <i>not</i> reasonable, then you have to figure out why you're getting values in <code>unavailable</code> that shouldn't be there.</span>
<span class="comment-copy">Also, is there a reason you're using lists instead of sets here? Because I doubt you want to all duplicates of any flavor, and it seems at least plausible, and maybe likely, that the order of flavors doesn't matter. And if you used sets, this would be simpler (and shorter code, and faster).</span>
<span class="comment-copy">@Cyber: No there isn't. He's not iterating through <code>icecream_flavours</code>.</span>
<span class="comment-copy">@abarnert, it's still an O(n) operation every time you remove one item, so shouldn't be recommended</span>
<span class="comment-copy">@gnibbler: Of course it is, but that has nothing to do with Cyber's comment.</span>
