<div class="post-text" itemprop="text">
<p>I've read that it is possible to add a method to an existing object (i.e., not in the class definition) in Python. </p>
<p>I understand that it's not always good to do so. But how might one do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, there is a difference between functions and bound methods.</p>
<pre><code>&gt;&gt;&gt; def foo():
...     print "foo"
...
&gt;&gt;&gt; class A:
...     def bar( self ):
...         print "bar"
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; foo
&lt;function foo at 0x00A98D70&gt;
&gt;&gt;&gt; a.bar
&lt;bound method A.bar of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt;
</code></pre>
<p>Bound methods have been "bound" (how descriptive) to an instance, and that instance will be passed as the first argument whenever the method is called.</p>
<p>Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:</p>
<pre><code>&gt;&gt;&gt; def fooFighters( self ):
...     print "fooFighters"
...
&gt;&gt;&gt; A.fooFighters = fooFighters
&gt;&gt;&gt; a2 = A()
&gt;&gt;&gt; a2.fooFighters
&lt;bound method A.fooFighters of &lt;__main__.A instance at 0x00A9BEB8&gt;&gt;
&gt;&gt;&gt; a2.fooFighters()
fooFighters
</code></pre>
<p>Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):</p>
<pre><code>&gt;&gt;&gt; a.fooFighters()
fooFighters
</code></pre>
<p>The problem comes when you want to attach a method to a single instance:</p>
<pre><code>&gt;&gt;&gt; def barFighters( self ):
...     print "barFighters"
...
&gt;&gt;&gt; a.barFighters = barFighters
&gt;&gt;&gt; a.barFighters()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: barFighters() takes exactly 1 argument (0 given)
</code></pre>
<p>The function is not automatically bound when it's attached directly to an instance:</p>
<pre><code>&gt;&gt;&gt; a.barFighters
&lt;function barFighters at 0x00A98EF0&gt;
</code></pre>
<p>To bind it, we can use the <a href="http://docs.python.org/library/types.html?highlight=methodtype#module-types" rel="noreferrer">MethodType function in the types module</a>:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; a.barFighters = types.MethodType( barFighters, a )
&gt;&gt;&gt; a.barFighters
&lt;bound method ?.barFighters of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt; a.barFighters()
barFighters
</code></pre>
<p>This time other instances of the class have not been affected:</p>
<pre><code>&gt;&gt;&gt; a2.barFighters()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: A instance has no attribute 'barFighters'
</code></pre>
<p>More information can be found by reading about <a href="http://users.rcn.com/python/download/Descriptor.htm" rel="noreferrer">descriptors</a> and <a href="http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html" rel="noreferrer">metaclass</a> <a href="http://www.gnosis.cx/publish/programming/metaclass_2.html" rel="noreferrer">programming</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Module <strong>new</strong> is deprecated since python 2.6 and removed in 3.0, use <strong>types</strong></p>
<p>see <a href="http://docs.python.org/library/new.html" rel="noreferrer">http://docs.python.org/library/new.html</a></p>
<p>In the example below I've deliberately removed return value from <code>patch_me()</code> function.
I think that giving return value may make one believe that patch returns a new object, which is not true - it modifies the incoming one. Probably this can facilitate a more disciplined use of monkeypatching.</p>
<pre><code>import types

class A(object):#but seems to work for old style objects too
    pass

def patch_me(target):
    def method(target,x):
        print "x=",x
        print "called from", target
    target.method = types.MethodType(method,target)
    #add more if needed

a = A()
print a
#out: &lt;__main__.A object at 0x2b73ac88bfd0&gt;  
patch_me(a)    #patch instance
a.method(5)
#out: x= 5
#out: called from &lt;__main__.A object at 0x2b73ac88bfd0&gt;
patch_me(A)
A.method(6)        #can patch class too
#out: x= 6
#out: called from &lt;class '__main__.A'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Preface - a note on compatibility: other answers may only work in Python 2 - this answer should work perfectly well in Python 2 and 3. If writing Python 3 only, you might leave out explicitly inheriting from <code>object</code>, but otherwise the code should remain the same.</p>
<blockquote>
<h1>Adding a Method to an Existing Object Instance</h1>
<p>I've read that it is possible to add a method to an existing object (e.g. not in the class definition) in Python. </p>
<p>I understand that it's not always a good decision to do so. <strong>But, how might one do this?</strong></p>
</blockquote>
<h2>Yes, it is possible - But not recommended</h2>
<p>I don't recommend this. This is a bad idea. Don't do it. </p>
<p>Here's a couple of reasons:</p>
<ul>
<li>You'll add a bound object to every instance you do this to. If you do this a lot, you'll probably waste a lot of memory. Bound methods are typically only created for the short duration of their call, and they then cease to exist when automatically garbage collected. If you do this manually, you'll have a name binding referencing the bound method - which will prevent its garbage collection on usage.</li>
<li>Object instances of a given type generally have its methods on all objects of that type. If you add methods elsewhere, some instances will have those methods and others will not. Programmers will not expect this, and you risk violating the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="noreferrer">rule of least surprise</a>.</li>
<li>Since there are other really good reasons not to do this, you'll additionally give yourself a poor reputation if you do it.</li>
</ul>
<p>Thus, I suggest that you not do this unless you have a really good reason. <strong>It is far better to define the correct method in the class definition</strong> or <em>less</em> preferably to monkey-patch the class directly, like this:</p>
<pre><code>Foo.sample_method = sample_method
</code></pre>
<p>Since it's instructive, however, I'm going to show you some ways of doing this.</p>
<h2>How it can be done</h2>
<p>Here's some setup code. We need a class definition. It could be imported, but it really doesn't matter.</p>
<pre><code>class Foo(object):
    '''An empty class to demonstrate adding a method to an instance'''
</code></pre>
<p>Create an instance:</p>
<pre><code>foo = Foo()
</code></pre>
<p>Create a method to add to it:</p>
<pre><code>def sample_method(self, bar, baz):
    print(bar + baz)
</code></pre>
<h3>Method nought (0) - use the descriptor method, <code>__get__</code></h3>
<p>Dotted lookups on functions call the <code>__get__</code> method of the function with the instance, binding the object to the method and thus creating a "bound method."</p>
<pre><code>foo.sample_method = sample_method.__get__(foo)
</code></pre>
<p>and now:</p>
<pre><code>&gt;&gt;&gt; foo.sample_method(1,2)
3
</code></pre>
<h3>Method one - types.MethodType</h3>
<p>First, import types, from which we'll get the method constructor:</p>
<pre><code>import types
</code></pre>
<p>Now we add the method to the instance. To do this, we require the MethodType constructor from the <code>types</code> module (which we imported above).</p>
<p>The argument signature for types.MethodType is <code>(function, instance, class)</code>:</p>
<pre><code>foo.sample_method = types.MethodType(sample_method, foo, Foo)
</code></pre>
<p>and usage: </p>
<pre><code>&gt;&gt;&gt; foo.sample_method(1,2)
3
</code></pre>
<h3>Method two: lexical binding</h3>
<p>First, we create a wrapper function that binds the method to the instance:</p>
<pre><code>def bind(instance, method):
    def binding_scope_fn(*args, **kwargs): 
        return method(instance, *args, **kwargs)
    return binding_scope_fn
</code></pre>
<p>usage:</p>
<pre><code>&gt;&gt;&gt; foo.sample_method = bind(foo, sample_method)    
&gt;&gt;&gt; foo.sample_method(1,2)
3
</code></pre>
<h3>Method three: functools.partial</h3>
<p>A partial function applies the first argument(s) to a function (and optionally keyword arguments), and can later be called with the remaining arguments (and overriding keyword arguments). Thus:</p>
<pre><code>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; foo.sample_method = partial(sample_method, foo)
&gt;&gt;&gt; foo.sample_method(1,2)
3    
</code></pre>
<p>This makes sense when you consider that bound methods are partial functions of the instance.</p>
<h2>Unbound function as an object attribute - why this doesn't work:</h2>
<p>If we try to add the sample_method in the same way as we might add it to the class, it is unbound from the instance, and doesn't take the implicit self as the first argument.</p>
<pre><code>&gt;&gt;&gt; foo.sample_method = sample_method
&gt;&gt;&gt; foo.sample_method(1,2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sample_method() takes exactly 3 arguments (2 given)
</code></pre>
<p>We can make the unbound function work by explicitly passing the instance (or anything, since this method doesn't actually use the <code>self</code> argument variable), but it would not be consistent with the expected signature of other instances (if we're monkey-patching this instance):</p>
<pre><code>&gt;&gt;&gt; foo.sample_method(foo, 1, 2)
3
</code></pre>
<h2>Conclusion</h2>
<p>You now know several ways you <em>could</em> do this, but in all seriousness - don't do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that the above answers missed the key point. </p>
<p>Let's have a class with a method:</p>
<pre><code>class A(object):
    def m(self):
        pass
</code></pre>
<p>Now, let's play with it in ipython:</p>
<pre><code>In [2]: A.m
Out[2]: &lt;unbound method A.m&gt;
</code></pre>
<p>Ok, so <em>m()</em> somehow becomes an unbound method of <em>A</em>. But is it really like that?</p>
<pre><code>In [5]: A.__dict__['m']
Out[5]: &lt;function m at 0xa66b8b4&gt;
</code></pre>
<p>It turns out that <em>m()</em> is just a function, reference to which is added to <em>A</em> class dictionary - there's no magic. Then why <em>A.m</em> gives us an unbound method? It's because the dot is not translated to a simple dictionary lookup. It's de facto a call of A.__class__.__getattribute__(A, 'm'):</p>
<pre><code>In [11]: class MetaA(type):
   ....:     def __getattribute__(self, attr_name):
   ....:         print str(self), '-', attr_name

In [12]: class A(object):
   ....:     __metaclass__ = MetaA

In [23]: A.m
&lt;class '__main__.A'&gt; - m
&lt;class '__main__.A'&gt; - m
</code></pre>
<p>Now, I'm not sure out of the top of my head why the last line is printed twice, but still it's clear what's going on there.</p>
<p>Now, what the default __getattribute__ does is that it checks if the attribute is a so-called <a href="http://docs.python.org/reference/datamodel.html#implementing-descriptors" rel="noreferrer">descriptor</a> or not, i.e. if it implements a special __get__ method. If it implements that method, then what is returned is the result of calling that __get__ method. Going back to the first version of our <em>A</em> class, this is what we have:</p>
<pre><code>In [28]: A.__dict__['m'].__get__(None, A)
Out[28]: &lt;unbound method A.m&gt;
</code></pre>
<p>And because Python functions implement the descriptor protocol, if they are called on behalf of an object, they bind themselves to that object in their __get__ method.</p>
<p>Ok, so how to add a method to an existing object? Assuming you don't mind patching class, it's as simple as:</p>
<pre><code>B.m = m
</code></pre>
<p>Then <em>B.m</em> "becomes" an unbound method, thanks to the descriptor magic.</p>
<p>And if you want to add a method just to a single object, then you have to emulate the machinery yourself, by using types.MethodType:</p>
<pre><code>b.m = types.MethodType(m, b)
</code></pre>
<p>By the way:</p>
<pre><code>In [2]: A.m
Out[2]: &lt;unbound method A.m&gt;

In [59]: type(A.m)
Out[59]: &lt;type 'instancemethod'&gt;

In [60]: type(b.m)
Out[60]: &lt;type 'instancemethod'&gt;

In [61]: types.MethodType
Out[61]: &lt;type 'instancemethod'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python monkey patching generally works by overwriting a class or functions signature with your own. Below is an example from the <a href="http://wiki.zope.org/zope2/MonkeyPatch" rel="nofollow noreferrer">Zope Wiki</a>:</p>
<pre><code>from SomeOtherProduct.SomeModule import SomeClass
def speak(self):
   return "ook ook eee eee eee!"
SomeClass.speak = speak
</code></pre>
<p>That code will overwrite/create a method called speak on the class. In Jeff Atwood's <a href="https://blog.codinghorror.com/monkeypatching-for-humans/" rel="nofollow noreferrer">recent post on monkey patching</a>. He shows an example in C# 3.0 which is the current language I use for work.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are at least two ways for attach a method to an instance without <code>types.MethodType</code>:</p>
<pre><code>&gt;&gt;&gt; class A:
...  def m(self):
...   print 'im m, invoked with: ', self

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.m()
im m, invoked with:  &lt;__main__.A instance at 0x973ec6c&gt;
&gt;&gt;&gt; a.m
&lt;bound method A.m of &lt;__main__.A instance at 0x973ec6c&gt;&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; def foo(firstargument):
...  print 'im foo, invoked with: ', firstargument

&gt;&gt;&gt; foo
&lt;function foo at 0x978548c&gt;
</code></pre>
<p>1:</p>
<pre><code>&gt;&gt;&gt; a.foo = foo.__get__(a, A) # or foo.__get__(a, type(a))
&gt;&gt;&gt; a.foo()
im foo, invoked with:  &lt;__main__.A instance at 0x973ec6c&gt;
&gt;&gt;&gt; a.foo
&lt;bound method A.foo of &lt;__main__.A instance at 0x973ec6c&gt;&gt;
</code></pre>
<p>2:</p>
<pre><code>&gt;&gt;&gt; instancemethod = type(A.m)
&gt;&gt;&gt; instancemethod
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; a.foo2 = instancemethod(foo, a, type(a))
&gt;&gt;&gt; a.foo2()
im foo, invoked with:  &lt;__main__.A instance at 0x973ec6c&gt;
&gt;&gt;&gt; a.foo2
&lt;bound method instance.foo of &lt;__main__.A instance at 0x973ec6c&gt;&gt;
</code></pre>
<p>Useful links:<br/>
<a href="http://docs.python.org/2/reference/datamodel.html#invoking-descriptors" rel="noreferrer">Data model - invoking descriptors</a><br/>
<a href="http://docs.python.org/2.7/howto/descriptor.html#invoking-descriptors" rel="noreferrer">Descriptor HowTo Guide - invoking descriptors</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use lambda to bind a method to an instance:</p>
<pre><code>def run(self):
    print self._instanceString

class A(object):
    def __init__(self):
        self._instanceString = "This is instance string"

a = A()
a.run = lambda: run(a)
a.run()
</code></pre>
<p>This is instance string</p>
<p>Process finished with exit code 0</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're looking for is <code>setattr</code> I believe.
Use this to set an attribute on an object.</p>
<pre><code>&gt;&gt;&gt; def printme(s): print repr(s)
&gt;&gt;&gt; class A: pass
&gt;&gt;&gt; setattr(A,'printme',printme)
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.printme() # s becomes the implicit 'self' variable
&lt; __ main __ . A instance at 0xABCDEFG&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since this question asked for non-Python versions, here's JavaScript:</p>
<pre><code>a.methodname = function () { console.log("Yay, a new method!") }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consolidating Jason Pratt's and the community wiki answers, with a look at the results of different methods of binding:</p>
<p>Especially note how adding the binding function as a class method <em>works</em>, but the referencing scope is incorrect.</p>
<pre><code>#!/usr/bin/python -u
import types
import inspect

## dynamically adding methods to a unique instance of a class


# get a list of a class's method type attributes
def listattr(c):
    for m in [(n, v) for n, v in inspect.getmembers(c, inspect.ismethod) if isinstance(v,types.MethodType)]:
        print m[0], m[1]

# externally bind a function as a method of an instance of a class
def ADDMETHOD(c, method, name):
    c.__dict__[name] = types.MethodType(method, c)

class C():
    r = 10 # class attribute variable to test bound scope

    def __init__(self):
        pass

    #internally bind a function as a method of self's class -- note that this one has issues!
    def addmethod(self, method, name):
        self.__dict__[name] = types.MethodType( method, self.__class__ )

    # predfined function to compare with
    def f0(self, x):
        print 'f0\tx = %d\tr = %d' % ( x, self.r)

a = C() # created before modified instnace
b = C() # modified instnace


def f1(self, x): # bind internally
    print 'f1\tx = %d\tr = %d' % ( x, self.r )
def f2( self, x): # add to class instance's .__dict__ as method type
    print 'f2\tx = %d\tr = %d' % ( x, self.r )
def f3( self, x): # assign to class as method type
    print 'f3\tx = %d\tr = %d' % ( x, self.r )
def f4( self, x): # add to class instance's .__dict__ using a general function
    print 'f4\tx = %d\tr = %d' % ( x, self.r )


b.addmethod(f1, 'f1')
b.__dict__['f2'] = types.MethodType( f2, b)
b.f3 = types.MethodType( f3, b)
ADDMETHOD(b, f4, 'f4')


b.f0(0) # OUT: f0   x = 0   r = 10
b.f1(1) # OUT: f1   x = 1   r = 10
b.f2(2) # OUT: f2   x = 2   r = 10
b.f3(3) # OUT: f3   x = 3   r = 10
b.f4(4) # OUT: f4   x = 4   r = 10


k = 2
print 'changing b.r from {0} to {1}'.format(b.r, k)
b.r = k
print 'new b.r = {0}'.format(b.r)

b.f0(0) # OUT: f0   x = 0   r = 2
b.f1(1) # OUT: f1   x = 1   r = 10  !!!!!!!!!
b.f2(2) # OUT: f2   x = 2   r = 2
b.f3(3) # OUT: f3   x = 3   r = 2
b.f4(4) # OUT: f4   x = 4   r = 2

c = C() # created after modifying instance

# let's have a look at each instance's method type attributes
print '\nattributes of a:'
listattr(a)
# OUT:
# attributes of a:
# __init__ &lt;bound method C.__init__ of &lt;__main__.C instance at 0x000000000230FD88&gt;&gt;
# addmethod &lt;bound method C.addmethod of &lt;__main__.C instance at 0x000000000230FD88&gt;&gt;
# f0 &lt;bound method C.f0 of &lt;__main__.C instance at 0x000000000230FD88&gt;&gt;

print '\nattributes of b:'
listattr(b)
# OUT:
# attributes of b:
# __init__ &lt;bound method C.__init__ of &lt;__main__.C instance at 0x000000000230FE08&gt;&gt;
# addmethod &lt;bound method C.addmethod of &lt;__main__.C instance at 0x000000000230FE08&gt;&gt;
# f0 &lt;bound method C.f0 of &lt;__main__.C instance at 0x000000000230FE08&gt;&gt;
# f1 &lt;bound method ?.f1 of &lt;class __main__.C at 0x000000000237AB28&gt;&gt;
# f2 &lt;bound method ?.f2 of &lt;__main__.C instance at 0x000000000230FE08&gt;&gt;
# f3 &lt;bound method ?.f3 of &lt;__main__.C instance at 0x000000000230FE08&gt;&gt;
# f4 &lt;bound method ?.f4 of &lt;__main__.C instance at 0x000000000230FE08&gt;&gt;

print '\nattributes of c:'
listattr(c)
# OUT:
# attributes of c:
# __init__ &lt;bound method C.__init__ of &lt;__main__.C instance at 0x0000000002313108&gt;&gt;
# addmethod &lt;bound method C.addmethod of &lt;__main__.C instance at 0x0000000002313108&gt;&gt;
# f0 &lt;bound method C.f0 of &lt;__main__.C instance at 0x0000000002313108&gt;&gt;
</code></pre>
<p>Personally, I prefer the external ADDMETHOD function route, as it allows me to dynamically assign new method names within an iterator as well.</p>
<pre><code>def y(self, x):
    pass
d = C()
for i in range(1,5):
    ADDMETHOD(d, y, 'f%d' % i)
print '\nattributes of d:'
listattr(d)
# OUT:
# attributes of d:
# __init__ &lt;bound method C.__init__ of &lt;__main__.C instance at 0x0000000002303508&gt;&gt;
# addmethod &lt;bound method C.addmethod of &lt;__main__.C instance at 0x0000000002303508&gt;&gt;
# f0 &lt;bound method C.f0 of &lt;__main__.C instance at 0x0000000002303508&gt;&gt;
# f1 &lt;bound method ?.y of &lt;__main__.C instance at 0x0000000002303508&gt;&gt;
# f2 &lt;bound method ?.y of &lt;__main__.C instance at 0x0000000002303508&gt;&gt;
# f3 &lt;bound method ?.y of &lt;__main__.C instance at 0x0000000002303508&gt;&gt;
# f4 &lt;bound method ?.y of &lt;__main__.C instance at 0x0000000002303508&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You guys should really look at <a href="http://github.com/clarete/forbiddenfruit" rel="noreferrer">forbidden fruit</a>, it's a python library that provides support to monkey patching ANY python class, even strings.</p>
</div>
<div class="post-text" itemprop="text">
<h1>This is actually an addon to the answer of "Jason Pratt"</h1>
<p>Although Jasons answer works, it does only work if one wants to add a function to a class. 
It did not work for me when I tried to reload an already existing method from the .py source code file.</p>
<p>It took me for ages to find a workaround, but the trick seems simple...
1.st import the code from the source code file
2.nd force a reload
3.rd use types.FunctionType(...) to convert the imported and bound method to a function
you can also pass on the current global variables, as the reloaded method would be in a different namespace
4.th now you can continue as suggested by "Jason Pratt" 
  using the types.MethodType(...)</p>
<p>Example:</p>
<pre><code># this class resides inside ReloadCodeDemo.py
class A:
    def bar( self ):
        print "bar1"

    def reloadCode(self, methodName):
        ''' use this function to reload any function of class A'''
        import types
        import ReloadCodeDemo as ReloadMod # import the code as module
        reload (ReloadMod) # force a reload of the module
        myM = getattr(ReloadMod.A,methodName) #get reloaded Method
        myTempFunc = types.FunctionType(# convert the method to a simple function
                                myM.im_func.func_code, #the methods code
                                globals(), # globals to use
                                argdefs=myM.im_func.func_defaults # default values for variables if any
                                ) 
        myNewM = types.MethodType(myTempFunc,self,self.__class__) #convert the function to a method
        setattr(self,methodName,myNewM) # add the method to the function

if __name__ == '__main__':
    a = A()
    a.bar()
    # now change your code and save the file
    a.reloadCode('bar') # reloads the file
    a.bar() # now executes the reloaded code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What Jason Pratt posted is correct.</p>
<pre><code>&gt;&gt;&gt; class Test(object):
...   def a(self):
...     pass
... 
&gt;&gt;&gt; def b(self):
...   pass
... 
&gt;&gt;&gt; Test.b = b
&gt;&gt;&gt; type(b)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(Test.a)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; type(Test.b)
&lt;type 'instancemethod'&gt;
</code></pre>
<p>As you can see, Python doesn't consider b() any different than a(). In Python all methods are just variables that happen to be functions. </p>
</div>
<div class="post-text" itemprop="text">
<p>If it can be of any help, I recently released a Python library named Gorilla to make the process of monkey patching more convenient.</p>
<p>Using a function <code>needle()</code> to patch a module named <code>guineapig</code> goes as follows:</p>
<pre><code>import gorilla
import guineapig
@gorilla.patch(guineapig)
def needle():
    print("awesome")
</code></pre>
<p>But it also takes care of more interesting use cases as shown in the <a href="http://gorilla.readthedocs.org/en/latest/faq.html" rel="nofollow">FAQ</a> from the <a href="http://gorilla.readthedocs.org/" rel="nofollow">documentation</a>.</p>
<p>The code is available on <a href="https://github.com/christophercrouzet/gorilla" rel="nofollow">GitHub</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This question was opened years ago, but hey, there's an easy way to simulate the binding of a function to a class instance using decorators:</p>
<pre><code>def binder (function, instance):
  copy_of_function = type (function) (function.func_code, {})
  copy_of_function.__bind_to__ = instance
  def bound_function (*args, **kwargs):
    return copy_of_function (copy_of_function.__bind_to__, *args, **kwargs)
  return bound_function


class SupaClass (object):
  def __init__ (self):
    self.supaAttribute = 42


def new_method (self):
  print self.supaAttribute


supaInstance = SupaClass ()
supaInstance.supMethod = binder (new_method, supaInstance)

otherInstance = SupaClass ()
otherInstance.supaAttribute = 72
otherInstance.supMethod = binder (new_method, otherInstance)

otherInstance.supMethod ()
supaInstance.supMethod ()
</code></pre>
<p>There, when you pass the function and the instance to the binder decorator, it will create a new function, with the same code object as the first one. Then, the given instance of the class is stored in an attribute of the newly created function. The decorator return a (third) function calling automatically the copied function, giving the instance as the first parameter.
  <br>
<br>
In conclusion you get a function simulating it's binding to the class instance. Letting the original function unchanged.</br></br></p>
</div>
<div class="post-text" itemprop="text">
<p>I find it strange that nobody mentioned that all of the methods listed above creates a cycle reference between the added method and the instance, causing the object to be persistent till garbage collection. There was an old trick adding a descriptor by extending the class of the object:</p>
<pre><code>def addmethod(obj, name, func):
    klass = obj.__class__
    subclass = type(klass.__name__, (klass,), {})
    setattr(subclass, name, func)
    obj.__class__ = subclass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from types import MethodType

def method(self):
   print 'hi!'


setattr( targetObj, method.__name__, MethodType(method, targetObj, type(method)) )
</code></pre>
<p>With this, you can use the self pointer</p>
</div>
<span class="comment-copy">Rather than manually create a <code>MethodType</code>, invoke the <a href="https://docs.python.org/2/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a> manually and have the function produce your instance: <code>barFighters.__get__(a)</code> produces a bound method for <code>barFighters</code> bound to <code>a</code>.</span>
<span class="comment-copy">@MartijnPieters any advantages of using the <code>descriptor protocol</code> vs creating a <code>MethodType</code> aside of maybe being a little more readable.</span>
<span class="comment-copy">@EndermanAPM: Several: it's more likely to continue to work exactly the same as what accessing the attribute on an instance does. It'll work for <code>classmethod</code> and <code>staticmethod</code> and other descriptors too. It avoids cluttering the namespace with yet another import.</span>
<span class="comment-copy">Are bound methods in Python similar to extensions methods in C#?</span>
<span class="comment-copy">The full code for the suggested descriptor approach is <code>a.barFighters = barFighters.__get__(a)</code></span>
<span class="comment-copy">The <i>Disclaimer</i> is what I was wondering about. Methods definition are simply functions nested within the class definition.</span>
<span class="comment-copy">@Atcold I have expanded on reasons to avoid doing this in the introduction.</span>
<span class="comment-copy">The <code>__get__</code> method also needs the class as the next parameter: <code>sample_method.__get__(foo, Foo)</code>.</span>
<span class="comment-copy">@AidasBendoraitis I wouldn't say it "needs" it, it's an optional parameter that is supplied when applying the descriptor protocol - but python functions do not use the argument: <a href="https://github.com/python/cpython/blob/master/Objects/funcobject.c#L581" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Objects/funcobject.c#L581</a></span>
<span class="comment-copy">My comment was based on this reference: <a href="http://python-reference.readthedocs.io/en/latest/docs/dunderdsc/get.html" rel="nofollow noreferrer">python-reference.readthedocs.io/en/latest/docs/dunderdsc/…</a>  What I now see from official docs, it's optional: <a href="https://docs.python.org/3/howto/descriptor.html#descriptor-protocol" rel="nofollow noreferrer">docs.python.org/3/howto/descriptor.html#descriptor-protocol</a></span>
<span class="comment-copy">But it influences <i>all</i> instances of the class, not just one.</span>
<span class="comment-copy">This is patching the class <code>A</code>, not the instance <code>a</code>.</span>
<span class="comment-copy">Is there a reason to use <code>setattr(A,'printme',printme)</code> instead of simply <code>A.printme = printme</code>?</span>
<span class="comment-copy">It makes sense if one constructs method name at runtime.</span>
<span class="comment-copy"><code>addmethod</code> rewritten in the following way <code>def addmethod(self, method, name):  self.__dict__[name] = types.MethodType( method, self )</code> solves the problem</span>
<span class="comment-copy">Generally, links to a tool or library <a href="http://meta.stackoverflow.com/a/251605">should be accompanied by usage notes or some sample code</a>, or if possible both. However, this does at least meet the minimum standard in the linked post by including a specific explanation of how the linked resource is applicable to the problem.</span>
<span class="comment-copy">You are patching the class <code>Test</code>, not an instance of it.</span>
