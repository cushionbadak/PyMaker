<div class="post-text" itemprop="text">
<p>I have two lists:<br/>
<code>list = ["a","b","c","d"]</code><br/>
<code>i_to_skip = [0,2]</code></p>
<p>I'd like to print everything in <code>list</code> except for the indices in <code>i_to_skip</code>. I've tried the following, which just returns a generator object:  </p>
<p><code>print(x for x in list if x not in i_to_skip)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The reason your comprehension does work is that <code>x</code> is the <em>value</em>, like <code>"a"</code>, not the <em>index</em>, like <code>0</code>, and of course <code>"a"</code> is not in <code>[0, 2]</code>.</p>
<p>To get the index along with the value, you need <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a>. Then you can do this:</p>
<pre><code>print([x for i, x in enumerate(list) if i not in i_to_skip])
</code></pre>
<p>Also, note that printing a generator expression (as you did) is just going to print something like <code>&lt;generator object &lt;genexpr&gt; at 0x1055fd8b8&gt;</code>; that's why I converted your code to printing out a list comprehension, so you get <code>['b', 'd']</code> instead.</p>
<hr/>
<p>If you instead wanted to print, say, one line at a time, you could loop over the generator expression:</p>
<pre><code>for x in (x for i, x in enumerate(list) if i not in i_to_skip):
    print(x)
</code></pre>
<p>But really, it's easier to just collapse that into a single loop:</p>
<pre><code>for i, x in emumerate(list):
    if i not in i_to_skip:
        print(x)
</code></pre>
<p>Or, even simpler, format the whole thing in a single expression, maybe like this:</p>
<pre><code>print('\n'.join(x for i, x in enumerate(list) if i not in i_to_skip))
</code></pre>
<p>… or even let <code>print</code> do it for you:</p>
<pre><code>print(*(x for i, x in enumerate(list) if i not in i_to_skip), sep='\n')
</code></pre>
<hr/>
<p>Finally, as a side note, calling your list <code>list</code> is a bad idea; it hides the type/constructor function, which may want to use later on, and it also makes your code misleading.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>mylist = ["a","b","c","d"]
print([x for i,x in enumerate(mylist) if i not in i_to_skip])
</code></pre>
<p>You shouldn't call your list <code>list</code> or you're hiding the <code>list</code> type itself.</p>
<p><a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate" rel="nofollow"><code>enumerate</code></a> will give you the indexes and corresponding elements of the list.</p>
<p>Putting the comprehension in square brackets makes it into a list, which is easier to print than a generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your print result is a <strong>generator</strong> , you need to put your list comprehension in a list sign (<code>[]</code>) or use <code>list()</code> function,
also you need to check the indices not the values , so you can figure it out with <a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate" rel="nofollow"><code>enumerate()</code></a> :</p>
<pre><code>&gt;&gt;&gt; print ([j for i,j in enumerate(list) if i not in i_to_skip] )
['b', 'd']
</code></pre>
</div>
<span class="comment-copy">How do you want the output formatted.  One item per line?</span>
<span class="comment-copy">Thanks! And thanks for all of the additional information. And no worries, my list isn't actually called <code>list</code>, that was just for this example</span>
<span class="comment-copy">As I was reading this, I kept thinking "This answer really should also mention ____", only to scroll down a little and see it mentioned. Bravo.</span>
<span class="comment-copy">@KarlKnechtel: I was probably editing just fast enough to keep up with your reading. :)</span>
<span class="comment-copy">@Adam_G: It's arguably even worse to use in examples. In your real code, at least you can know whether or not your real code needs to use the actual <code>list</code> constructor; in an example, people have to worry about whether it's possibly affecting your problem in some way…</span>
<span class="comment-copy">joining a list would be more efficient.</span>
