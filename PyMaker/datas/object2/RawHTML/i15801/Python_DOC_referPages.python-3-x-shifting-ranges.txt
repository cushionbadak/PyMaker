<div class="post-text" itemprop="text">
<p>suppose I have a range like this:</p>
<pre><code>x = range(10)
</code></pre>
<p>which would have the following values as a list:</p>
<pre><code>list(x)      # Prints [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>I would like to shift this range (possibly multiple times)
and iterate over the results e.g.</p>
<pre><code>             #        [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]
</code></pre>
<p>Creating an equivalent list is not a problem. But I'd like
to know if it is possible to create something like this as
a range to save some space in memory and of course it would 
be nice if the solution could be about as performant as:</p>
<pre><code>for i in range(1000000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can wrap the range in a generator expression, applying the shift and modulo on the fly:</p>
<pre><code>def shifted_range(rangeob, shift):
    size, shift = rangeob.stop, shift * rangeob.step
    return ((i + shift) % size for i in rangeob)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def shifted_range(rangeob, shift):
...     size, shift = rangeob.stop, shift * rangeobj.step
...     return ((i + shift) % size for i in rangeob)
... 
&gt;&gt;&gt; range_10 = range(10)
&gt;&gt;&gt; list(shifted_range(range_10, 3))
[3, 4, 5, 6, 7, 8, 9, 0, 1, 2]
&gt;&gt;&gt; list(shifted_range(range_10, 7))
[7, 8, 9, 0, 1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; range_10_2 = range(0, 10, 2)
&gt;&gt;&gt; list(shifted_range(range_10_2, 4))
[8, 0, 2, 4, 6]
</code></pre>
<p>You could make this a wrapper object as well:</p>
<pre><code>class RangeShift:
    def __init__(self, rangeob, shift):
        self._range = rangeob
        self.shift = shift

    @property
    def start(self):
        r = self._range
        return (r.start + self.shift * r.step) % r.stop

    @property
    def stop(self):
        r = self._range
        return (r.stop + self.shift * r.step) % r.stop

    def index(self, value):
        idx = self._range.index(value)
        return (idx - self.shift) % len(self._range)

    def __getattr__(self, attr):
        return getattr(self._range, attr)

    def __getitem__(self, index):
        r = self._range
        return (r[index] + self.shift * r.step) % r.stop

    def __len__(self):
        return len(self._range)

    def __iter__(self):
        size, shift = self._range.stop, self.shift * self._range.step
        return ((i + shift) % size for i in self._range)
</code></pre>
<p>This will behave just like the original range, but applying a shift to all values produced. It even lets you alter the shift!</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; range_10 = range(10)
&gt;&gt;&gt; shifted = RangeShift(range_10, 7)
&gt;&gt;&gt; len(shifted)
10
&gt;&gt;&gt; shifted.start
7
&gt;&gt;&gt; shifted.stop
7
&gt;&gt;&gt; shifted.step
1
&gt;&gt;&gt; shifted[3]
0
&gt;&gt;&gt; shifted[8]
5
&gt;&gt;&gt; list(shifted)
[7, 8, 9, 0, 1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; shifted.shift = 3
&gt;&gt;&gt; list(shifted)
[3, 4, 5, 6, 7, 8, 9, 0, 1, 2]
&gt;&gt;&gt; range_10_2 = range(0, 10, 2)
&gt;&gt;&gt; shifted_10_2 = RangeShift(range_10_2, 4)
&gt;&gt;&gt; list(shifted_10_2)
[8, 0, 2, 4, 6]
</code></pre>
<p>Best trick this wrapper now supports: reversing the shifted range:</p>
<pre><code>&gt;&gt;&gt; list(reversed(shifted))
[2, 1, 0, 9, 8, 7, 6, 5, 4, 3]
&gt;&gt;&gt; list(reversed(shifted_10_2))
[6, 4, 2, 0, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess the simplest way is to <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>chain</code></a> two ranges:</p>
<pre><code>from itertools import chain

shifted = chain(range(7, 10), range(7))
for x in shifted:
    print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use itertools to chain two ranges. This code works even if the ranges have step &gt; 1.</p>
<pre><code>import itertools

def shift_range(r, s):
    return itertools.chain(range(r.start + s*r.step, r.stop, r.step), 
                           range(r.start, r.start + s*r.step, r.step))
</code></pre>
<p>Testing:</p>
<pre><code>&gt;&gt;&gt; list(shift_range(range(10), 5))
[5, 6, 7, 8, 9, 0, 1, 2, 3, 4]
&gt;&gt;&gt; list(shift_range(range(3, 30, 3), 5))
[18, 21, 24, 27, 3, 6, 9, 12, 15]
</code></pre>
</div>
<span class="comment-copy">Thanks for this detailed answer. (I guess at least one comment containing a thanks is allowed without being dismissed as spam) :P</span>
