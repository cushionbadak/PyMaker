<div class="post-text" itemprop="text">
<p>Here's the original list:</p>
<pre><code>['name', 'value', 'name', 'value', 'name', 'value']
</code></pre>
<p>And so on. I need to extract the name/value pairs into a dictionary:</p>
<pre><code>{'name': 'value', 'name': 'value', 'name': 'value'}
</code></pre>
<p>Can someone elaborate on the easiest way to do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>L</code> is your original list, You can use <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip(*[iter(L)]*2)</code></a> to group the items into pairs. The <a href="https://docs.python.org/2/library/stdtypes.html#dict" rel="nofollow">dict constructor</a> can take an iterable of such pairs directly</p>
<pre><code>&gt;&gt;&gt; L = ['name1', 'value1', 'name2', 'value2', 'name3', 'value3']
&gt;&gt;&gt; dict(zip(*[iter(L)]*2))
{'name1': 'value1', 'name2': 'value2', 'name3': 'value3'}
</code></pre>
<p>I'm not sure what you mean by simpler (simpler to understand?). It's hard to guess you think is simpler as I don't know what level you're at. Here's a way without using <code>iter</code> or <code>zip</code>. If you don't know what <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a> does yet, you should look it up.</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for i, item in enumerate(L):
...     if i % 2 == 0:
...         key = item
...     else:
...         d[key] = item
... 
&gt;&gt;&gt; d
{'name1': 'value1', 'name2': 'value2', 'name3': 'value3'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not to take away from anyone. I think this might be a little simpler to understand:</p>
<pre><code>dict (zip (L[::2] , L[1::2] ))
</code></pre>
<p>Though this is less efficient for large list than gnibbler's answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a function to group a sequence into fixed-length chunks. Unfortunately, this is lacking from the Python core. You could use <code>partition</code> from the <a href="https://pypi.python.org/pypi/funcy" rel="nofollow noreferrer">funcy</a> library. (Side note: In other languages this is called <a href="http://hackage.haskell.org/package/split-0.2.2/docs/Data-List-Split.html#v:chunksOf" rel="nofollow noreferrer">chunksOf</a> or <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.Iterator" rel="nofollow noreferrer">grouped</a>).</p>
<p>The <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools</a> documentation suggests this function:</p>
<pre><code>from itertools import zip_longest

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>And the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> documentation suggests a different way to accomplish the same thing (given in <a href="https://stackoverflow.com/a/26600442/402884">gnibbler's answer</a>):</p>
<pre><code>def grouper(iterable, n):
    return zip(*[iter(iterable)]*n)
</code></pre>
<p>Once that's available, the rest of the job is trivial.</p>
<pre><code>&gt;&gt;&gt; dict(grouper(range(8), 2))
{0: 1, 2: 3, 4: 5, 6: 7}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this</p>
<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd', 'e', 'f']
&gt;&gt;&gt; dict(zip([x for x in a[::2]], [x for x in a[1::2]]))
{'a': 'b', 'c': 'd', 'e': 'f'}
</code></pre>
<p><code>a[::2]</code> will get all second element from list start from <code>0th</code> element. </p>
<p><code>a[1::2]</code> will get all second element from list start from <code>1st</code> element.</p>
</div>
<span class="comment-copy">Thanks. Would it be a bit simpler if it was known how many key/value pairs there were?</span>
<span class="comment-copy">@JoshuaGilman, Knowing the length doesn't really help. I added another (longwinded) way to my answer. Is that they type of thing you mean?</span>
<span class="comment-copy">Isn't this dependant on the internal implementation of zip? i.e that it tries to read one item at a time from each iterator instead of getting the first and second list eagerly?</span>
<span class="comment-copy">@Maxaon3000, yes of course. It's <a href="https://docs.python.org/2/library/functions.html?highlight=zip#zip" rel="nofollow noreferrer">documented behaviour</a></span>
<span class="comment-copy">You're right this specific pattern is right there in the docs. You should probably add the link to your answer. Upvoted.</span>
