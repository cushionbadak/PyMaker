<div class="post-text" itemprop="text">
<p>In my level editing program, I have the following code, which removes game pieces that have moved out of the playable area:</p>
<pre><code>x, y = theobj.pos
if x not in range(0,79):
    level.remove_obj(theobj)
if y not in range(0,29):
    level.remove_obj(theobj)
</code></pre>
<p>Is there any efficient way I can simplify this to a single if statement? I've considered using list comprehension to generate a list of all valid position tuples, but that seems a little bit bloated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use:</p>
<pre><code>if not (0 &lt;= x &lt;= 78 and 0 &lt;= y &lt;= 28):
    level.remove_obj(theobj)
</code></pre>
<p>This uses <a href="https://docs.python.org/3/reference/expressions.html#not-in" rel="nofollow">chained comparisons</a> to test against two boundaries for both <code>x</code> and <code>y</code>.</p>
<p>I'd not create <code>range()</code> objects here; you are creating a new object for each test.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; x, y = 10, 10
&gt;&gt;&gt; (0 &lt;= x &lt;= 78 and 0 &lt;= y &lt;= 28)
True
&gt;&gt;&gt; x, y = 10, 42
&gt;&gt;&gt; (0 &lt;= x &lt;= 78 and 0 &lt;= y &lt;= 28)
False
&gt;&gt;&gt; x, y = 81, 10
&gt;&gt;&gt; (0 &lt;= x &lt;= 78 and 0 &lt;= y &lt;= 28)
False
</code></pre>
</div>
<span class="comment-copy">That's much nicer - though I do still have to unpack the tuple.</span>
<span class="comment-copy">@Schilcote: you'll still have to unpack, or inline. <code>if not (0 &lt;= theobj.pos[0] &lt;= 78 and 0 &lt;= theobj.pos[1] &lt;= 28):</code> is not too bad.</span>
<span class="comment-copy">or use a lambda</span>
<span class="comment-copy">@Dabrion: use a lambda <i>how</i>? To encapsulate the range check? That's still an extra line to define the lambda.</span>
<span class="comment-copy">it is unclear if he want to code-golf it or if he wants a more efficient way. best way to filter a collection is to use itertools or list comprehensions. in both cases lambdas are handy.</span>
