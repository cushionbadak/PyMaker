<div class="post-text" itemprop="text">
<p>Is it possible to make python count from 1 to infinity without using assignment operator of any kind (<code>=</code>,<code>=+</code>, etc)? Also of can't import or call any code that contains assignment operator.</p>
<p>I managed to find a solution but it works on IDLE only because it uses <code>_</code>:</p>
<pre><code>if 1:
    1
    while 1:
        for x in range(_+1, _*3):
        x
</code></pre>
<p>Can you think of a solution that would always work? (It is without using <code>_</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one possible solution:</p>
<pre><code>for x in [0]:
   while 1:
       for x in [x+1]:
           print x
</code></pre>
<p>It works because:</p>
<pre><code>for var in [value]: pass  
</code></pre>
<p>Is the same as</p>
<pre><code>var = val
</code></pre>
<p>Therefore you can write everything you want without using <code>=</code> operator! But remember that python is obviously performing assignment behind the scenes. </p>
<pre><code>name = raw_input('Whats your name?') #With = operator

for name in [raw_input('Whats your name?')]: pass  #Without = operator
</code></pre>
<p>You can use this function as well:</p>
<pre><code>def assign(lval, val):
     globals().update({lval:val})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like a terrible definition of assignment. Everything is stored in memory somewhere, so everything has to be assigned somewhere, even if its to a register on the CPU. If it's literally that you can't use an operator with <code>=</code> in it then <code>locals().__setitem__("varname", varname+1)</code> works or <code>locals().update({"varname": varname+1})</code> if <code>__setitem__</code> is out. And on some level the following is storing a number that is counting up to infinity, we just can't access it.</p>
<pre><code>def ones():
    while True:
        yield 1

sum(ones())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>count = bytearray()
unit = ord(b'|')
while len(count) &lt; 10:  # replace with True to continue indefinitely
    print("Decimal: {}; Unary: {}".format(len(count), count.decode()))
    count.append(unit)
</code></pre>
<p>prints</p>
<pre><code>Decimal: 0; Unary: 
Decimal: 1; Unary: |
Decimal: 2; Unary: ||
Decimal: 3; Unary: |||
Decimal: 4; Unary: ||||
Decimal: 5; Unary: |||||
Decimal: 6; Unary: ||||||
Decimal: 7; Unary: |||||||
Decimal: 8; Unary: ||||||||
Decimal: 9; Unary: |||||||||
</code></pre>
</div>
<span class="comment-copy">Sorry but I refuse to help with modern version of torture.</span>
<span class="comment-copy">Using recursion?</span>
<span class="comment-copy">@5gon12eder, infinite recursion? :D</span>
<span class="comment-copy">@kroolik the difference between infinite recursion and infinite loop is that one ends, which is good.</span>
<span class="comment-copy">belongs on code golf and programming puzzles. This is not a practical programming question.</span>
<span class="comment-copy">Or <code>lis.__setitem__(0, lis[0] + 1)</code></span>
<span class="comment-copy">-1: <code>for</code> loop implies assignment in Python. Defining a function with <code>def</code> implies assignment in Python. Calling <i>any</i> function with parameters implies assignment in Python. If you think that only <code>=</code> counts as an assignment then you could use <code>for x in itertools.count(1): print(x)</code> because <code>count()</code> is implemented in C therefore there is no Python code to contain <code>=</code> assignment. Read <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">Naming and binding</a></span>
<span class="comment-copy">@J.F.Sebastian have you read the question properly? OP asks for code without assignment OPERATOR. First of all you cant solve the problem without using assignment of any form. The value that is printed on the screen IS stored somewhere in a memory address so the value has to be ASSIGNED to that memory address. From my answer: "But remember that python is obviously performing assignment behind the scenes."</span>
<span class="comment-copy">Read the link that I've provided: <code>=</code> in Python is different from <code>=</code> in C. The question may have many different answers depending on how <code>=</code> is defined in the question. If you consider that <code>from itertools import count</code> contains <code>=</code> then your answer also contains <code>=</code>.</span>
<span class="comment-copy">If count is implemented in C then it would be a valid answer as well. As you can see the person that asked the question is happy with my answer, I really dont understand your problem. = is very clearly defined in the question. I really cant think of a better answer to this question. If you have one then please post it.</span>
