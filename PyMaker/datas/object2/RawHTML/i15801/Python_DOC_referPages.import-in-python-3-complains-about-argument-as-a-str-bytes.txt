<div class="post-text" itemprop="text">
<p>I've being <a href="https://github.com/moble/numpy_quaternion" rel="nofollow noreferrer">updating a quaternions package</a> for integration with numpy, so that it can be used in both python 2 and python 3.  Unfortunately, the basic import step fails miserably with 3.x, though it has never failed with python 2.7.  (I use python2.7 to compile the 2.7 version, and python3.x to compile the 3.x versions.  It's a really simple distutils thing.)  The error message doesn't even appear in google's results, and I just have no idea where to go from here.</p>
<p>Here is the complete output from a simple attempt to import the package:</p>
<pre><code>&gt; python -c 'import quaternion'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/Users/mynamehere/.continuum/anaconda/envs/py3k/lib/python3.4/site-packages/quaternion/__init__.py", line 3, in &lt;module&gt;
    from .numpy_quaternion import quaternion
TypeError: __import__() argument 1 must be str, not bytes
</code></pre>
<p>As the error message says, there is a line in <code>__init__.py</code> saying</p>
<pre><code>from .numpy_quaternion import quaternion
</code></pre>
<p>But why should that be problematic?  There is a file <code>numpy_quaternion.so</code> in the same directory as the <code>__init__.py</code> file, which seems to contain the relevant symbols.  <a href="https://travis-ci.org/moble/numpy_quaternion" rel="nofollow noreferrer">Travis-CI</a> shows that it works just fine in 2.7 (and the other tests pass), but fails in 3.2 and 3.4.  So it's not just something wrong with my python installation.  I tried to remove the <code>.</code> for the relative import, but python couldn't find the <code>numpy_quaternion</code> from which to import (not surprising).  I tried changing it to <code>from quaternion.numpy_quaternion</code>, but I get the same error.</p>
<p>I see that <a href="https://stackoverflow.com/questions/12172791/changes-in-import-statement-python3">there have been changes to the import system in python 3</a>, but if anything, I would have guessed that this would be <em>more</em> py3k-compliant than other ways of doing it.  What's going wrong?  How can I get this to work?</p>
<p>Just to clarify, my hierarchy looks like this:</p>
<pre><code>.../site-packages/
    quaternion/
        __init__.py
        numpy_quaternion.so
</code></pre>
<p>and the only thing that comes before the problematic line is <code>import numpy as np</code>, which generally succeeds with no problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>The python-list people got back to me right away with excellent suggestions.  Turns out I was importing something within <code>numpy_quaternion.so</code> (using the c-api), but the argument I was giving to that function was wrong.  I was (basically) using code from <a href="https://github.com/moble/numpy-dtypes/blob/master/npytypes/rational/rational.c" rel="nofollow">a similar package</a>:</p>
<pre><code>PyObject* numpy_str = PyString_FromString("numpy");
PyObject* numpy = PyImport_Import(numpy_str);
</code></pre>
<p>I fixed it by using</p>
<pre><code>PyObject* numpy = PyImport_ImportModule("numpy");
</code></pre>
<p>And as J. F. Sebastian points out in the comments, the reason that was going wrong for me was because that <code>PyString_FromString</code> was just a <code>#define</code> for the wrong function when I was using python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since it is easy, I would first try an absolute import, though if my guesses below are correct, this will not work.</p>
<pre><code>from quaternion.numpy_quaternion import quaternion
</code></pre>
<p>From your post, I am guessing that your hierarchy looks like</p>
<pre><code>.../Libe/site-packages
    quaternion
    __init__.py
    numpy_quaternion.so
        quaternion  # a symbol in .so, not a .py
</code></pre>
<p>and that quaterion is a module, rather than a function or class.  I am guessing this because I cannot imagine 'numpy_quaternion' becoming bytes, while the .so must return 'quaternion' as bytes for 2.7 to work, so maybe it is doing the same with 3.x.  My unix experience predates Python.  But my impression is that separate .so are needed for 2.x and 3.x.  Or if not, certain compile flags might be needed.  If I am correct, you need to add 'numpy_quaternion_3x.so to your package and switch the import on sys.version[0].</p>
<p>If you do not get more response here, try python-list, easily accessed at news.gmane.com as newsgroup mirror gmane.comp.python.general.  The regular responders include some savvy linux users.</p>
</div>
<span class="comment-copy">Note: <a href="https://docs.python.org/3/howto/cporting.html" rel="nofollow noreferrer">Porting Extension Modules to Python 3</a> : <i>"Python 3's <code>PyString_*</code> functions in C are equivalent to Python 2's <code>PyUnicode_*</code>"</i>. Use <code>PyString</code> for Unicode text, <code>PyBytes</code> for binary data. The TypeError in your question suggests that you use PyBytes on Python 3 somehow instead of PyString.</span>
<span class="comment-copy">Aha!  Not directly, but I <i>do</i> include <code>npy_3kcompat.h</code>, which does <code>#define PyString_FromString PyBytes_FromString</code>.  So it looked right to me, but it wasn't; in fact <code>PyString_FromString</code> isn't even defined in python3.</span>
<span class="comment-copy">Yeah, I've tried the absolute import.  (Mentioned in my post, but I didn't make it clear.)  Also, there are separate <code>lib</code> directories for py2.7 and py3.x, and each is used to compile for its own directory, so they do get their own <code>.so</code> files.  (py3.x doesn't even know py2.7 exists.)  I'll try on the python-list, though.  Thanks!</span>
