<div class="post-text" itemprop="text">
<p>I'm trying to build a truly non-blocking HTTPS server in Python. The following minimal code works just fine if everyone is playing nice:</p>
<pre><code>import BaseHTTPServer
import SimpleHTTPServer
import SocketServer
import ssl 

class ThreadedHTTPServer(SocketServer.ThreadingMixIn, BaseHTTPServer.HTTPServer):
    pass

httpd = ThreadedHTTPServer(('localhost', 4443), SimpleHTTPServer.SimpleHTTPRequestHandler)
httpd.socket = ssl.wrap_socket(httpd.socket, keyfile="localhost.key", certfile="localhost.pem", server_side=True)
httpd.serve_forever()
</code></pre>
<p>However, the problem is that this server blocks at least during the TLS handshake.</p>
<p>Test with:</p>
<pre><code>$ nc localhost 4443  # leave this open
</code></pre>
<p>And then (in another terminal):</p>
<pre><code>$ wget --no-check-certificate https://localhost:4443/
--2014-10-23 16:55:54--  https://localhost:4443/
Resolving localhost (localhost)... 127.0.0.1
Connecting to localhost (localhost)|127.0.0.1|:4443... connected.
</code></pre>
<p>The wget process blocks, indicating that something is blocked in the server. Once I close the nc process, wget continues. This is obviously not practical at all.</p>
<p>How do I get a truly non-blocking HTTPS server in Python, preferably without additional third-party software?</p>
<p>I should mention that the very same code works as expected without TLS (i.e., without the  wrap_socket line).</p>
<hr/>
<p>Steffen Ullrich pointed out how to do it: pass <code>do_handshake_on_connect=False</code> to <code>wrap_socket</code>, then do the handshake yourself. In this case, subclass <code>BaseHTTPServer.HTTPServer</code>, override <code>handle</code>, and then do the handshake as shown in the Python docs (the socket is called <code>self.request</code>) followed by calling the super method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to do a non-blocking SSL accept by calling <code>ssl.wrap_socket</code> with <code>do_handshake_on_connect=False</code> and later calling <code>do_handshake</code> yourself until it succeeds. See <a href="https://docs.python.org/3/library/ssl.html#notes-on-non-blocking-sockets">https://docs.python.org/3/library/ssl.html#notes-on-non-blocking-sockets</a>.</p>
<p>You might also simply use <a href="http://www.tornadoweb.org/">Tornado</a> which is a web server written in python and which also does fully non-blocking SSL handling. Even if you don't want to use it yourself you might have a look at the source code to see how this is done (search for <code>do_handshake</code>).</p>
</div>
<span class="comment-copy">Thank you! I incorporated the solution into my question.</span>
