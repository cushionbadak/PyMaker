<div class="post-text" itemprop="text">
<p>I want to define a function in "a.py" which uses multiprocessing for parallelization, then import it in "b.py" as a library function. For example, in "a.py":</p>
<pre><code>import multiprocessing as mp, queue

def MPWorker(input, i):
    input.put(i)


def MPTest(MaxMPNum):
    jobs = []
    BatchResult = queue.Queue()
    for i in range(MaxMPNum):
        p = mp.Process(target=MPWorker, args=(BatchResult, i + 1))
        p.start()
        print("this is", i)
        jobs.append(p)
    for i in range(MaxMPNum):
        print("getting", i)
        result = BatchResult.get()
        print(result)
</code></pre>
<p>Then in "b.py":</p>
<pre><code>import a
a.MPTest(10)
</code></pre>
<p>However, it won't work, I will always get error:_pickle.PicklingError: Can't pickle : attribute lookup lock on _thread failed. 
So, is it possible to use multiprocessing of python this way or am I missing anything?</p>
<p>The entire traceback, slightly edited (Python 3.x, Windows):</p>
<pre><code>Traceback (most recent call last):
  File "F:/b.py", line 72, in &lt;module&gt;
    a.MPTest(5)
  File "F:\a.py", line 566, in MPTest
    p.start()
  File "C:\Python34\lib\multiprocessing\process.py", line 105, in start
    self._popen = self._Popen(self)
  File "C:\Python34\lib\multiprocessing\context.py", line 212, in _Popen
    return _default_context.get_context().Process._Popen(process_obj)
  File "C:\Python34\lib\multiprocessing\context.py", line 313, in _Popen
    return Popen(process_obj)
  File "C:\Python34\lib\multiprocessing\popen_spawn_win32.py", line 66, in __init__
    reduction.dump(process_obj, to_child)
  File "C:\Python34\lib\multiprocessing\reduction.py", line 59, in dump
    ForkingPickler(file, protocol).dump(obj)
_pickle.PicklingError: Can't pickle &lt;class '_thread.lock'&gt;: attribute lookup lock on _thread failed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're using <a href="https://docs.python.org/3/library/queue.html" rel="nofollow"><code>queue.Queue</code></a>, which only works between threads in the same process, instead of <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue" rel="nofollow"><code>multiprocessing.Queue</code></a>, which works between processes.</p>
<p>Depending on your platform, and the way you use it, this will fail in different ways. In your case, because you're trying to pass the queue as an argument to the <code>Process</code> constructor, and you're on Windows, you get the nicest error: you try to pickle the queue itself, and that fails.* On Unix, you may actually successfully pass the queue to the child processes, but it will probably either lose most of your values (OS X) or deadlock (most other systems) when you use it.</p>
<p>As <a href="https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow">the docs</a> explain, <code>multiprocessing.Queue</code> "is a near clone of <code>queue.Queue</code>", except that it's "thread and process safe" instead of just thread safe.</p>
<hr/>
<p>If you thought you <em>were</em> using <code>multiprocessing.Queue</code>, your mistake is in this line:</p>
<pre><code>import multiprocessing as mp, queue
</code></pre>
<p>This doesn't import <code>multiprocessing</code> as both <code>mp</code> and <code>queue</code>, it imports <code>multiprocessing</code> as <code>mp</code>, and imports <code>queue</code> as itself. See the reference on <a href="https://docs.python.org/3/reference/simple_stmts.html#import" rel="nofollow"><code>import</code></a> for details.</p>
<p>The fact that this is ambiguous to a human (even though it's not ambiguous to the parser) is one of the reasons multi-import statements are discouraged in Python. For example, <a href="http://legacy.python.org/dev/peps/pep-0008/#imports" rel="nofollow">PEP 8</a> says "Imports should usually be on separate lines".</p>
<hr/>
<p><sub>* It might be nicer if the queue itself raised an exception when you pickled it, instead of relying on the fact that it uses some unpicklable threading synchronization objects, because it's not entirely obvious that pickling a <code>_thread.lock</code> was caused by pickling a <code>queue.Queue</code>.</sub></p>
</div>
<span class="comment-copy">Please show the entire traceback, not just a summary of it. It's hard to guess which line failed here.</span>
<span class="comment-copy">@abarnet : queue.Queue vs multiprocessing.Queue, this is really the thing I don't know.</span>
