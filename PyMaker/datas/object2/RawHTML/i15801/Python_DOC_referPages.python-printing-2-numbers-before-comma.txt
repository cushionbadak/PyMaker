<div class="post-text" itemprop="text">
<p>I want to print numbers with precision to 2 digits before dot and 3 after.  </p>
<p>Example:  </p>
<pre><code>1232.352232  
9.1  
</code></pre>
<p>will show:  </p>
<pre><code>32.352  
09.100  
</code></pre>
<p>I know that </p>
<pre><code>print "%.3f" % 32.352
</code></pre>
<p>will show me 3 digits after dot but how to get 2 digits before dot with 0 if that is shorter than 2 digits?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can specify a total width for the output; if you include a leading 0 then the number will be padded with zeros to match that minimum width:</p>
<pre><code>"%06.3f" % float_number
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; for float_number in (1232.352232, 9.1):
...     print "%06.3f" % float_number
... 
1232.352
09.100
</code></pre>
<p>Note that the number is a <strong>minimum</strong> width! If you need to truncate the floating point number itself, you'll need to use slicing:</p>
<pre><code>("%06.3f" % float_number)[-6:]
</code></pre>
<p>This will truncate string to remove characters from the start if longer than 6:</p>
<pre><code>&gt;&gt;&gt; for float_number in (1232.352232, 9.1):
...     print ("%06.3f" % float_number)[-6:]
... 
32.352
09.100
</code></pre>
<p>You may want to look at the <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code> function</a> too; this function lets you apply the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">same formatting syntax</a> as the <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer"><code>str.format()</code> formatting method</a> and <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">formatted string literals</a>; the syntax is basically the same for floats:</p>
<pre><code>&gt;&gt;&gt; for float_number in (1232.352232, 9.1):
...     formatted = format(float_number, '06.3f')
...     print(formatted[-6:], formatted)
...
32.352 1232.352
09.100 09.100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = "9,1"

def displayNum(num):
    f,s = num.strip().split(',')
    f = '0'*(2-len(f))+f if len(f) &lt; 2 else f[-2:]
    s = s + '0'*(3-len(s)) if len(s) &lt; 3 else s[:3]
    return ",".join([f,s])

print(displayNum(x))

09,100
</code></pre>
</div>
<span class="comment-copy">Surely the first one would be <code>1200,352</code> if we're talking about precision?</span>
<span class="comment-copy">Python uses a <i>decimal dot</i>, not a comma, in floating point numbers.</span>
<span class="comment-copy">There is <i>no <code>lf</code> format</i>. Did you mean just <code>f</code>?</span>
<span class="comment-copy">sorry guys, i made a mistake with this comma, I meaned decimal dot.</span>
<span class="comment-copy">Also <a href="http://stackoverflow.com/questions/8885663/how-to-format-a-floating-number-to-fixed-width-in-python" title="how to format a floating number to fixed width in python">stackoverflow.com/questions/8885663/â€¦</a></span>
<span class="comment-copy">I tried to put "%02.3f" %1.1234 and it doesn't return me 01,123</span>
<span class="comment-copy">@SebastianB: that's because the first number must be set to the <i>total</i> width. Include the decimals! <code>"%06.3f" % 1.1234</code> works.</span>
<span class="comment-copy">wow, thanks it work!!! It really helped me to understand it :) +1 fully deserved. :)</span>
<span class="comment-copy">Is there a concise way to save this to a string variable?</span>
<span class="comment-copy">@Aaronrobeson: I'm not sure what you mean. The <code>str % ...</code> operation returns a new string object, just assign that new object to a variable.</span>
