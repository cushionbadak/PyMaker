<div class="post-text" itemprop="text">
<p>Uploading a file in Django (1.7) using Python 3:</p>
<pre><code>f = form.files['file']
f.__repr__()
</code></pre>
<p>outputs</p>
<pre><code>&lt;InMemoryUploadedFile: index.html (text/html)&gt;
</code></pre>
<p>If I call <code>f.readline()</code> I get bytes back.
Normally that would be okay, I could just read the file and decode it, however in this case I'm passing the file on to another function that expects to call <code>readline()</code> on the parameter it receives, and <code>readline()</code> needs to return unicode rather than bytes.</p>
<p>Is it possible to set encoding or such on an instance of <code>InMemoryUploadedFile</code>, so readline would return unicode rather than bytes? Or do I have to use <code>StringIO</code> to first read in the entire file and then pass the instance of <code>StringIO</code> to my function?</p>
</div>
<div class="post-text" itemprop="text">
<p>The general way to handle this may be to <a href="https://docs.djangoproject.com/en/1.7/ref/files/uploads/#writing-custom-upload-handlers" rel="noreferrer">write a custom upload handler</a> and <a href="https://docs.djangoproject.com/en/dev/ref/settings/#file-upload-handlers" rel="noreferrer">tell Django to use it</a>. But I've never done this, so I'm not sure.</p>
<p>But a simple approach would be to just wrap the underlying file object. (If you use <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="noreferrer"><code>TextIOWrapper</code></a> instead of <code>StringIO</code> you shouldn't need to worry about the overhead.)</p>
<pre><code>from io import TextIOWrapper

f = form.files['file']
text_f = TextIOWrapper(f.file, encoding='utf-8')
</code></pre>
</div>
<span class="comment-copy">Django stores the underlying built-in file object under <code>f.file</code> - would that help in any way? Perhaps not, as <code>f.readline</code> is just a proxy for <code>f.file.readline</code>...</span>
<span class="comment-copy">Excellent! Thank you.</span>
