<div class="post-text" itemprop="text">
<p>I am trying to split a path to get the name of the file, the last part of the string, and I am dealing with a problem that I am not being able to solve:</p>
<p>My string: <code>te = 'C:\Users\Desktop\TEST\Excel_Reports\1837.xlsx'</code></p>
<p>I have done this:</p>
<pre><code>&gt;&gt;&gt; te.split('\\')
['C:', 'Users', 'Desktop', 'TEST', 'Excel_Reports\x01837.xlsx']

&gt;&gt;&gt; te.split('\\')[-1]
'Excel_Reports\x01837.xlsx'
</code></pre>
<p>I do not know what is the problem with <code>\0</code> or <code>\number</code>....is it any special Python character??</p>
<p>Here is what I would like to get:</p>
<pre><code>['C:', 'Users', 'Desktop', 'TEST', 'Excel_Reports', '1837.xlsx']
</code></pre>
<p>But I can't get exactly this.</p>
<p>PD: is not a valid solution something like file_name = te[-5:-1] because the name of the excel file can be different anytime, always numbers though.</p>
<p><strong>EDIT:</strong> <strong>Showing how I am getting <code>te</code></strong></p>
<pre><code>folder = QtGui.QFileDialog.getExistingDirectory(None, "Load excel")

for f in os.listdir(folder):
    if f.endswith(".xlsx"):
        te= os.path.join(str(folder),str(f))
        #bla, bla, bla,......
</code></pre>
<p><strong>EDIT:</strong> </p>
<p>Thanks for all the answers and comments, they pointed me on the right direction.</p>
<p>However, I solved the issue just by replacing this line:</p>
<pre><code>te= os.path.join(str(folder),str(f))
</code></pre>
<p>for this one:</p>
<pre><code>te = os.path.join(folder,f)
</code></pre>
<p>And then, this works:</p>
<pre><code>te.split('\\')[-1].split('.')[0]
</code></pre>
<p>Gives the name (number) of the file without the extension <code>xlsx</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to make the literal for <code>te</code> a raw string</p>
<pre><code>&gt;&gt;&gt; te = r'C:\Users\Desktop\TEST\Excel_Reports\1837.xlsx'
&gt;&gt;&gt; import os
&gt;&gt;&gt; te.split("\\") # can't use os.path.sep as my repl is on linux
['C:', 'Users', 'Desktop', 'TEST', 'Excel_Reports', '1837.xlsx']
</code></pre>
<p>This is due to the syntax for python literal strings. <code>\g</code>, <code>\n</code>, <code>\t</code> etc would also cause problems. The other slashes don't <em>need</em> to be escaped since the character following isn't a valid escape sequence - but it's confusing as hell. Better to use the raw string syntax</p>
<p>If you're getting <code>te</code> from some place other than a source file eg an ini file or a database (as you should), you wouldn't even see this problem. </p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have a <em>correct</em> path, then:</p>
<pre><code>import os

# Note that we're using the **r** prefix to make it a raw string - backslashes don't escape  
path = r'C:\Users\Desktop\TEST\Excel_Reports\1837.xlsx'
print os.path.split(path)[1]
# 1837.xlsx
</code></pre>
<p>You could also then further split to just get the base of the filename, eg:</p>
<pre><code>print os.path.splitext(os.path.split(path)[1])[0]
# 1837
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can avoid <code>str.split</code> at all, using only <code>os.path</code> functions:</p>
<pre><code>te = r'C:\Users\Desktop\TEST\Excel_Reports\1837.xlsx'
print os.path.splitext(os.path.basename(te))[0]
</code></pre>
<p>If you know in an advance that you are parsing Windows path, it is best to use <code>npath</code> - windows flavour of <code>os.path</code> module, so your code does it's job even if run on Linux:</p>
<pre><code>print ntpath.splitext(ntpath.basename(te))[0]
</code></pre>
</div>
<span class="comment-copy">You should use raw strings <code>r'...'</code> when dealing with \ as the \ can escape certain characters, for example <code>\n</code> is "new-line".</span>
<span class="comment-copy">You know forward slashes work ok in windows and sidesteps those issues.</span>
<span class="comment-copy">thanks Ffisegydd...I do not know what you mean by "raw strings"...but I will investigate. Thanks for pointing it out</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a> is the docs which may help.</span>
<span class="comment-copy">Thanks for the answer and the explanation!</span>
<span class="comment-copy">you can use <code>ntpath</code> to manipulate windows paths on Linux ;)</span>
<span class="comment-copy">thanks for the answer Jon!!</span>
