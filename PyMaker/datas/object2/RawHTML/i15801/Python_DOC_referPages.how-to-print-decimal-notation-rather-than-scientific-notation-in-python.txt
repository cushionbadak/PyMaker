<div class="post-text" itemprop="text">
<p>Assume to have this number:</p>
<pre><code>p=0.00001
</code></pre>
<p>Now, if we print this variable we get <code>1e-05</code> (i.e., that number in scientific notation). How can I print exactly <code>0.00001</code> (i.e., in decimal notation)? Ok, I know I can use <code>format(p, '.5f')</code>, but the fact is that I don't know in advance the number of decimal digits (e.g., I may have <code>0.01</code> or <code>0.0000001</code>, etc.). Therefore, I could count the number of decimal digits and use that in the <code>format</code> function. In doing so, I have a related problem... is there any way to count the decimal digits of a decimal number without using <code>Decimal</code>?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>p = 0.0000000000000000000001

s = str(p)

print(format(p, "." + s.split("e")[-1][1:]+"f")) if "e" in s else print(p)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>... is there any way to count the decimal digits of a float number without using <code>Decimal</code>?</p>
</blockquote>
<p>Nope. And there isn't any way to do it using <code>Decimal</code> either. Floating point numbers that aren't an exact sum of powers of 1/2 don't have an exact number of decimal places. The best you can do is perform some sort of guesstimate based on the leftmost non-zero digit and some arbitrary count of digits.</p>
</div>
<div class="post-text" itemprop="text">
<p>In general you can't count the number of decimal digits, but you can compute the minimum precision and use it with <code>f</code> format specification in <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow">str.format</a> or equivalent function:</p>
<pre><code>from math import ceil, log10
p = 0.00001
precision = int(ceil(abs(log10(abs(p))))) if p != 0 else 1
'{:.{}f}'.format(p, precision)
</code></pre>
<p>You'll need to increase precision if you want to display more than one significant digit. Also you might need a slightly different logic for numbers &gt; 1.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/658763/how-do-i-suppress-scientific-notation-in-python">How do I suppress scientific notation in Python?</a></span>
<span class="comment-copy">@Celeo: Sorry, but I don't think it's a duplicate of that. I specified I know how to format in that way, but what I'm asking is how to print the exact number of digits, so I cannot use <code>format</code> with a prefixed <code>.xf</code> like in other questions in stack.</span>
<span class="comment-copy">@PadraicCunningham: I'm not sure what the <code>split</code> is there for, but… try that with his example; since <code>str(p)</code> is <code>1e-05</code>, what are you going to get useful out of the length of any part of that?</span>
<span class="comment-copy">@PadraicCunningham: that does not work because <code>str(p)</code> is <code>1e-05</code>, so there is not any <code>.</code></span>
<span class="comment-copy">Your problem here isn't really answerable, because it's based a misapprehension. <code>p</code> is a Python <code>float</code>, which means it's a binary fraction, not a decimal fraction, which means that asking how many decimal digits it has makes no sense. For <i>some</i> values, of course, there is a binary fraction that fits into an IEEE double that exactly matches the decimal value you started with, but that's not true in general.</span>
<span class="comment-copy">This prints exactly one significant digit for <code>p &lt; 1e-5</code>, and a whole mess of useless digits for <code>p &gt; 1e5</code>. Try it with, say, <code>4.56e-5</code>. It just happens to work for the three examples—but if you only want to work for those 3 examples there are easier and less hackier ways to do that.</span>
<span class="comment-copy">No it isn't. Did you miss the difference between <code>-</code> and <code>+</code>? For <code>1e-5</code>he wants <code>0.00001</code>; this works. For 4.56e-5 he presumably wants <code>0.0000465</code>, but you're going to print <code>0.00005</code>, so this doesn't work. In fact, there's a very limited set of values for which this <i>does</i> work. If he only cares about the three specific examples in the question, he might as well just map those examples to whatever string he wants. If he wants something that actually does what he asks for more than those examples, this doesn't do it.</span>
<span class="comment-copy">You seriously think those 3 examples are the only things he cares about?</span>
<span class="comment-copy">No, it won't work for any value from 0.1 to 1e-140. It won't work for <code>0.011</code>, for example. It will "count the decimal digits" as 2, instead of 3, because it's not actually counting the decimal digits, it's just counting the leading zeroes.</span>
<span class="comment-copy">OK, sorry, yes, because that one isn't small enough to use exponential notation, so it's not even running your code. You could try any of the examples I gave earlier—like 0.0000465, which prints <code>0.00005</code>. The explanation is the same: your code is counting leading zeroes, not counting decimal digits.</span>
<span class="comment-copy">Well, you can count the decimal digits of the shortest decimal fraction that rounds to a particular binary fraction, which is often what you want. But the easiest way to do that in Python 3.x is to just format it as a string and get the length, because the algorithm is already built in…</span>
<span class="comment-copy">There's a way for my case... I may use this: <code>p = decimal.Decimal('0.00001')</code> and <code>abs(p.as_tuple().exponent)</code>, but I'd like to know if there's any way without using <code>Decimal</code>.</span>
<span class="comment-copy">@f_ficarola: That works because <code>Decimal('0.00001')</code> is starting with an exact decimal fraction and never constructing a <code>float</code> in the first place. I'm pretty sure Ignacio was saying that you can't use <code>Decimal</code> to get the number of decimal places of a <code>float</code>, because you can't.</span>
<span class="comment-copy">Yes, you're right... maybe I didn't explain my problem in the best way. I don't care about other floats. I have a set of my own floats (e.g., <code>0.000001</code>, <code>0.00001</code>, <code>0.00000001</code>, etc.) and I want them to be printed as they are processed. For instance, in a <code>for</code> loop I get <code>0.000001</code> in the first iteration, then <code>0.00000001</code> and so on, how can I print them?</span>
<span class="comment-copy">To avoid misunderstandings, maybe I should say "a set of decimal numbers", not floats.</span>
