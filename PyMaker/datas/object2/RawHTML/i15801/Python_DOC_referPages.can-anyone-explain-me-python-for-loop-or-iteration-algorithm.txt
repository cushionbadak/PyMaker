<div class="post-text" itemprop="text">
<p>I am learning python from Coursera . I have written one program , According to that when I click on the screen , it draws circle . See the program below  --</p>
<pre><code># Dots

# importing
import simplegui
import math

width = 600
height = 600
ball_list = []
radius = 20
colour = "Yellow"

# position ditector
def distance(p,q) :
    return math.sqrt((p[0]-q[0])**2 + (p[1]-q[1])**2)



# Mouse click -- Change the position
def click(pos) :
    ball_list.append(pos)
#    global position
#   global colour
#    if  distance(pos, position) &lt; radius :
#        colour = "Blue"
#    else :
#        position = list(pos)
#        colour = "Yellow"


# Drawing the ball
def draw(canvas) :
    for position in ball_list :
        canvas.draw_circle(position , radius , 2, "Black" , colour)

# Creating the frame
frame = simplegui.create_frame("Dots" , 600,600)
frame.set_canvas_background("White")

frame.set_draw_handler(draw)

# mouse click 
frame.set_mouseclick_handler(click)


# Start
frame.start()
</code></pre>
<p>But my doubt is in def draw(canvas), <code>for position in ball_list</code> , I have not defined any position . I made <code>position = list(pos)</code> as comment . Then what is the value of position in <code>position in ball_list</code> , How can for loop work without any value ? What is iteration ? What is the difference between for loop and iteration ? </p>
<p>If above code doesn't work in your IDE, please go to <a href="http://www.codeskulptor.org/#user38_VSZ0jZ0uTh_0.py" rel="nofollow">http://www.codeskulptor.org/#user38_VSZ0jZ0uTh_0.py</a>
and run it .</p>
</div>
<div class="post-text" itemprop="text">
<p><code>for</code> loop in python is little bit different compared to other languages. I'll try explaining with code you have written.Every time you call the <code>click</code> function then you are appending the <code>pos</code> to the list called <code>ball_list</code> which you need to draw the circle.</p>
<pre><code>def click(pos) :
    ball_list.append(pos) ## appends the pos to ball_list
</code></pre>
<p>Now after you have list with <code>pos</code> then you call the following function. </p>
<pre><code>def draw(canvas) :
    for position in ball_list :
        canvas.draw_circle(position , radius , 2, "Black" , colour)
</code></pre>
<p>Here the variable <code>position</code> iterates through all the <code>pos</code> that you have appended to the list <code>ball_list</code> starting from first till last value.
And if you are wondering how and what is the value of <code>position</code> variable then print it's value and see it for yourself like the following:</p>
<pre><code>def draw(canvas) :
        for position in ball_list :
            print position  ## prints one pos value in the ball_list for each iteration.
            canvas.draw_circle(position , radius , 2, "Black" , colour)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a_list = [1, 2, 3, 4, 5, 6, 7]

for x in [10, 20, 30, 40, 50]:
    print x
</code></pre>
<p>10
20
30
40
50</p>
<pre><code>for x in a_list:
   print x
</code></pre>
<p>1
2
3
4
5
6
7</p>
<pre><code>for i in range(10):
    print i
</code></pre>
<p>1
2
3
4
5
6
7
8
9
10</p>
</div>
<div class="post-text" itemprop="text">
<p>Say you have your own class that you want it to be iterable:</p>
<pre><code> class MyRange(object):
     def __init__(self, low, high):
         self.low = low
         self.high = high

     def __iter__(self):
         low = self.low
         while self.high &gt;= low:
             yield low
             low += 1
</code></pre>
<p>Now you can:</p>
<pre><code>r = MyRange(1, 10)
for number in r:
    print number,
</code></pre>
<p><code>number</code> now have the value returned from <code>__iter__</code> in each iteration. That's how things work in Python, and in your case, you have a <code>list</code>, which has it's own <code>__iter__</code> and used in a similar way.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, <code>for x in y:</code> iterates through every item in <code>y</code>, and assigns the value of the current iteration to the variable <code>x</code> so that you can reference that value inside the body of the for loop. <a href="https://eval.in/209259" rel="nofollow noreferrer">Here's an eval.in</a> that might help you see how it works.</p>
<p><img alt="Screenshot of the eval.in" src="https://i.stack.imgur.com/exdRJ.png"/></p>
<p>Here's a brief comparison to Java, assuming that the variable "arrayList" is an <code>ArrayList</code> (Java) or <code>list</code> (Python) of things, and you want to call the method <code>do_something_with()</code> on each value in the list.</p>
<p>Python:</p>
<pre><code>for x in arrayList:
    do_something_with(x)
</code></pre>
<p>Java:</p>
<pre><code>for (int i = 0; i &lt; arrayList.size(); i++) {
    do_something_with(arrayList.get(i));
}
</code></pre>
<p>Fundamentally, you COULD write Python that looks more like the Java:</p>
<pre><code>for x in range(0, len(arrayList)):
    do_something_with(arrayList[x])
</code></pre>
<p>This code would do the exact same thing. However, Python realized that this is a common enough task that there was value in providing a level of abstraction for it (often called <a href="http://en.wikipedia.org/wiki/Syntactic_sugar" rel="nofollow noreferrer">"syntactic sugar"</a> in programming languages). You can read more about Python iterators, and how different kinds of data get iterated, in the <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">python documentation</a>.</p>
</div>
<span class="comment-copy">Because it's an iterator.</span>
<span class="comment-copy">Can you explain me How</span>
<span class="comment-copy">I suggest you go through the excellent Python tutorial (<a href="https://docs.python.org/2/tutorial/" rel="nofollow noreferrer">docs.python.org/2/tutorial</a>). From start to finish it does not take too much of your time and is definitely worth it.</span>
<span class="comment-copy">Can you explain me with some simple example</span>
<span class="comment-copy">Do you know any other programming languages? Perhaps it would be easier to compare to one of those. There's also <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">a section in the python documentation</a> that will show you how different kinds of python data are iterated.</span>
<span class="comment-copy">I have some Java experience . Can't go to that link ---  403 Forbidden  Request forbidden by administrative rules.</span>
<span class="comment-copy">There's also --- a section in the python documentation --- that will , that "a section in the python documentation" link , I am in India , In my country I think I can't access that :(</span>
<span class="comment-copy">It's just the official Python Documentation. Maybe try <a href="http://python.readthedocs.org/en/latest/tutorial/classes.html#iterators" rel="nofollow noreferrer">this link</a> instead?</span>
