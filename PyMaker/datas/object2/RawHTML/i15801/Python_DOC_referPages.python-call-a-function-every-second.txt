<div class="post-text" itemprop="text">
<p>I have a game that I've written for my first project and I'd like to have a system where I can play and pause the game. When you click the unpause button, I want it to call a function every 1 second that advances the date. Time.sleep stops the whole program so it's not useful to me and I cant seem to restart threads after I've started one. Here's the advancing day function.</p>
<pre><code>def time():
    global timer
    timer = threading.Timer(1.0, time)
    timer.start()
    thirtyonemonths = [1, 3, 5, 7, 8, 10, 12]
    thirtymonths = [4, 6, 9, 11]
    globalvars.day = globalvars.day + 1
    for self in thirtyonemonths:
        if self == globalvars.month:
            print "hi"
            if globalvars.day == 32:
                globalvars.day = 1
                globalvars.month = globalvars.month + 1
    for self in thirtymonths:
        if self == globalvars.month:
            print "hi"
            if globalvars.day == 31:
                globalvars.day = 1
                globalvars.month = globalvars.month + 1
    if globalvars.month == 2:
        print "hi"
        if globalvars.day == 29:
            globalvars.day = 1
            globalvars.month = globalvars.month + 1
    if globalvars.month == 13:
        globalvars.month = 1
        globalvars.year = globalvars.year + 1
    threading.Thread.time(self)
timer = threading.Timer(1.0, time)
</code></pre>
<p>Later I have the code for when the button is clicked that checks if it's paused or not</p>
<pre><code>if b.collidepoint(pos):
    if globalvars.ispaused == 1:
        globalvars.ispaused = 0
        timer.start()
        break
    if globalvars.ispaused == 0:
        globalvars.ispaused = 1
        timer.cancel()
        break
</code></pre>
<p>Everything works perfectly up until I press the button a third time. Does anyone know a way I can restart the thread or maybe use a different method to do what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>Without seeing the rest of your code, it's hard to be sure where the problem is, but my guess would be that sometimes, when you click the button, <code>ispaused</code> is <code>1</code>, but <code>timer</code> is an expired timer rather than a paused one. Calling <code>start</code> on an expired timer has no effect.</p>
<p>While that could be fixed, there are easier ways to do this.</p>
<p>For one thing, it looks like you're using some kind of GUI or game framework here. I have no idea which one you're using, but pretty much every one of them has a function to do timers (in the main event loop, as opposed to in a separate thread, but that's not the key thing here) that are more powerful than <code>threading.Thread</code>—in particular, that can automatically recur every second until canceled. That would obviously make your life easier.</p>
<p>If not, it's pretty easy to write your own repeating <code>Timer</code>, or to just <a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=timer&amp;submit=search" rel="nofollow">find one on PyPI</a>. Notice that the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow"><code>threading</code></a> docs start with a link to <a href="https://hg.python.org/cpython/file/default/Lib/threading.py" rel="nofollow">the source code</a>. That's because, like many modules in the stdlib, <code>threading</code> is written to be simple and easy to understand, to serve as sample code on top of being useful in its own right. In particular, <a href="https://hg.python.org/cpython/file/default/Lib/threading.py#l1165" rel="nofollow"><code>Timer</code></a> is dead simple, and it should be pretty obvious how to extend it: Just put a loop around the <code>run</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>At the start of your function you've set up a new global each time and a timer:</p>
<pre><code>global timer
timer = threading.Timer(1.0, time)
timer.start()
</code></pre>
<p>Then at the end of the function you have <code>threading.Thread.time(self)</code> which isn't needed and needs to be removed. Then after the function declaration you have <code>timer = threading.Timer(1.0, time)</code> which may be an error because when it is first called, the global timer may not have been created yet.  Replace that last line of code with <code>time()</code> to just call the function immediately the first time. Changing these two lines will probably fix your code good enough.</p>
<p>Also, you have your for loops like this:</p>
<pre><code>for self in thirtyonemonths:
</code></pre>
<p>and the problem with this would be the use of the keyword <code>self</code> . If this function is defined inside a class, then this use of <code>self</code> may be interpreted as a reference to the object.  It is usually better not to use keywords such as <code>self</code> as iterators.  Replace all uses of self with something else, like m to improve your code.</p>
</div>
<span class="comment-copy">@Apero: He <i>is</i> using threading. That's what <code>threading.Timer</code> is.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/8600161/executing-periodic-actions-in-python" title="executing periodic actions in python">stackoverflow.com/questions/8600161/…</a></span>
<span class="comment-copy">Also have a look to this: <a href="https://docs.python.org/2/library/sched.html" rel="nofollow noreferrer">docs.python.org/2/library/sched.html</a></span>
<span class="comment-copy">Please try to rewrite this as a <a href="http://stackoverflow.com/help/mcve">minimal, complete, valid example</a>. The way you're doing the GUI is probably relevant here. If it's not, try to reproduce the problem without any GUI stuff, and it'll be even easier for someone to solve.</span>
<span class="comment-copy">Thank you very much for the response. I was in the process of extending Timer when another person offered a more simple solution.  I ended up just stopping the contents of my time() function unless the unpaused variable was equal to 1. That way I dont need to start and stop the thread.</span>
<span class="comment-copy">Although for future reference, when you say "extend Timer" you mean taking the source for the original class within the threading library and editing it? Would I copy the class and paste it into my source code? I've never really edited the libraries that come with python. I'm assuming that I'd rename it and import the threading library as well right? Unless you meant something completely different. I'm a noob :p</span>
<span class="comment-copy">That or you can <a href="http://stackoverflow.com/a/2706023/786020">extend the class</a>. So something like <code>class MyTimer(threading.Timer): def run(self): while (True): threading.Timer.run(self)</code>. But not quite that, likely.</span>
<span class="comment-copy">@Taegis: Usually you'd call what you're suggesting "forking the class", and sometimes it's perfectly viable. But, while "extending" is admittedly a vague term, I think it usually implies subclassing if possible (as Poil described), falling back to either forking or monkeypatching if the class wasn't designed in a way that makes that feasible.</span>
<span class="comment-copy">Ahh ok thank you. I got rid of the piece of code at the end and also fixed the use of "self".  I ended up just stopping the contents of my time() function unless the unpaused variable was equal to 1. That way I dont need to start and stop the thread.</span>
