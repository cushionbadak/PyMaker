<div class="post-text" itemprop="text">
<p>I have a list, which contains the names of several text files, like this:</p>
<pre><code>["catfile.txt", "order_2014_11_11_11", "santa.txt", "order_2013_10_20"]    
</code></pre>
<p>How can I check AND return these elements of the list, that start with "order_" or any other given sequence?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; data = ["catfile.txt", "order_2014_11_11_11", "santa.txt", "order_2013_10_20"]    
&gt;&gt;&gt; [ x for x in data if x.startswith('order_')]
['order_2014_11_11_11', 'order_2013_10_20']
</code></pre>
<h3>Explanation:</h3>
<p>A list comprehension typically looks something like:</p>
<pre><code>[somefunction(x) for x in data if some_condition]
</code></pre>
<p>In our case, we only want to select items from data, not manipulate them.  So, <code>somefunction</code> is not needed and the expression simplifies to:</p>
<pre><code>[x for x in data if some_condition]
</code></pre>
<p>In our case, the condition is that the string starts with <code>order_</code>.  Python has a handy string method to test just for this.  It is called, naturally enough, <code>startswith</code>.  So, the final form is:</p>
<pre><code>[ x for x in data if x.startswith('order_')]
</code></pre>
<p>If you ever have need for it, there is an analogous string method to test the end of a string.  For example:</p>
<pre><code>&gt;&gt;&gt; [ x for x in data if x.endswith('txt')]
['catfile.txt', 'santa.txt']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> to filter the list with <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow"><code>str.startswith</code></a>:</p>
<pre><code>&gt;&gt;&gt; lst = ["catfile.txt", "order_2014_11_11_11", "santa.txt", "order_2013_10_20"]
&gt;&gt;&gt; [x for x in lst if x.startswith('order_')]
['order_2014_11_11_11', 'order_2013_10_20']
&gt;&gt;&gt;
</code></pre>
<p>You can even make this an in-place operation by using <code>[:]</code>:</p>
<pre><code>&gt;&gt;&gt; lst = ["catfile.txt", "order_2014_11_11_11", "santa.txt", "order_2013_10_20"]
&gt;&gt;&gt; lst[:] = [x for x in lst if x.startswith('order_')]
&gt;&gt;&gt; lst
['order_2014_11_11_11', 'order_2013_10_20']
&gt;&gt;&gt;
</code></pre>
<p>Finally, it should be noted that <code>str.startswith</code> allows you to specify a tuple of prefixes to search for:</p>
<pre><code>&gt;&gt;&gt; lst = ["catfile.txt", "order_2014_11_11_11", "santa.txt", "order_2013_10_20"]
&gt;&gt;&gt; [x for x in lst if x.startswith(('order_', 'cat'))]
['catfile.txt', 'order_2014_11_11_11', 'order_2013_10_20']
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [92]: L = ["catfile.txt", "order_2014_11_11_11", "santa.txt", "order_2013_10_20"]

In [93]: answer = []

In [94]: for elem in L:
   ....:     if elem.startswith("order_"):
   ....:         answer.append(elem)
   ....:         

In [95]: answer
Out[95]: ['order_2014_11_11_11', 'order_2013_10_20']
</code></pre>
<p>As a function:</p>
<pre><code>In [96]: def returnOrders(L):
   ....:     answer = []
   ....:     for elem in L:
   ....:         if elem.startswith("order_"):
   ....:             answer.append(elem)
   ....:     return answer
   ....: 

In [97]: L
Out[97]: ['catfile.txt', 'order_2014_11_11_11', 'santa.txt', 'order_2013_10_20']

In [98]: returnOrders(L)
Out[98]: ['order_2014_11_11_11', 'order_2013_10_20']
</code></pre>
<p>More generally:</p>
<pre><code>In [99]: def returnStarters(L, prefix):
   ....:     answer = []
   ....:     for elem in L:
   ....:         if elem.startswith(prefix):
   ....:             answer.append(elem)
   ....:     return answer
   ....: 

In [100]: L
Out[100]: ['catfile.txt', 'order_2014_11_11_11', 'santa.txt', 'order_2013_10_20']

In [101]: returnStarters(L, "order_")
Out[101]: ['order_2014_11_11_11', 'order_2013_10_20']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this code:</p>
<pre><code>l1 = ["catfile.txt", "order_2014_11_11_11", "santa.txt", "order_2013_10_20"]
l2 = []

for i in l1:
    if i.startswith("order"):
        l2.append(i)
</code></pre>
<p>Samples and output</p>
<pre><code>print l1
['catfile.txt', 'order_2014_11_11_11', 'santa.txt', 'order_2013_10_20']

print l2
['order_2014_11_11_11', 'order_2013_10_20']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>seq = "order_"
results = [item for item in list if item.startswith(seq)]
</code></pre>
</div>
<span class="comment-copy"><code>seq = order_</code> is still not right</span>
<span class="comment-copy">Oh wow, dumb mistake on my part, thanks, fixed. I was wondering why the downvotes appeared.</span>
<span class="comment-copy">Submission time were almost same but your initial answer was totally different. You were using <code>in</code> not <code>.startswith()</code> in original answer, that update came way later.</span>
<span class="comment-copy">Yes, I realized I misread the question, so I fixed my answer. What's the issue?</span>
