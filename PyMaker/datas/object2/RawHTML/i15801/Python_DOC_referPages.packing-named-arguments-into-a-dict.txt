<div class="post-text" itemprop="text">
<p>I know I can turn function arguments into a dictionary if the function takes in <code>**kwargs</code>.</p>
<pre><code>def bar(**kwargs):
    return kwargs

print bar(a=1, b=2)
{'a': 1, 'b': 2}
</code></pre>
<p>However, is the opposite true? Can I <strong>pack</strong> named arguments into a dictionary and return them? The hand-coded version looks like this:</p>
<pre><code>def foo(a, b):
    return {'a': a, 'b': b}
</code></pre>
<p>But it seems like there must be a better way. Note that i am trying to avoid using <code>**kwargs</code> in the function (named arguments work better for an IDE with code completion).</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you are looking for <a href="https://docs.python.org/3/library/functions.html#locals" rel="noreferrer"><code>locals</code></a>:</p>
<pre><code>&gt;&gt;&gt; def foo(a, b):
...     return locals()
...
&gt;&gt;&gt; foo(1, 2)
{'b': 2, 'a': 1}
&gt;&gt;&gt; def foo(a, b, c, d, e):
...     return locals()
...
&gt;&gt;&gt; foo(1, 2, 3, 4, 5)
{'c': 3, 'b': 2, 'a': 1, 'e': 5, 'd': 4}
&gt;&gt;&gt;
</code></pre>
<p>Note however that this will return a dictionary of <em>all</em> names that are within the scope of <code>foo</code>:</p>
<pre><code>&gt;&gt;&gt; def foo(a, b):
...     x = 3
...     return locals()
...
&gt;&gt;&gt; foo(1, 2)
{'b': 2, 'a': 1, 'x': 3}
&gt;&gt;&gt;
</code></pre>
<p>This shouldn't be a problem if your functions are like that given in your question.  If it is however, you can use <a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="noreferrer"><code>inspect.getfullargspec</code></a> and a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="noreferrer">dictionary comprehension</a> to filter <code>locals()</code>:</p>
<pre><code>&gt;&gt;&gt; def foo(a, b):
...     import inspect # 'inspect' is a local name
...     x = 3          # 'x' is another local name
...     args = inspect.getfullargspec(foo).args
...     return {k:v for k,v in locals().items() if k in args}
...
&gt;&gt;&gt; foo(1, 2) # Only the argument names are returned
{'b': 2, 'a': 1}
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy"><code>return locals()</code> once you don't have any other variables in your code</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/582206/432913">this</a> answer to the same question has a comment underneath linking to <a href="http://kbyanc.blogspot.co.uk/2007/07/python-aggregating-function-arguments.html" rel="nofollow noreferrer">this</a> blog post, which does what you want, and takes care or an edge cases which iCodez's answer misses.</span>
<span class="comment-copy">Thanks for the disclaimer; I am looking for this functionality within a class, so I'm making the method static.</span>
