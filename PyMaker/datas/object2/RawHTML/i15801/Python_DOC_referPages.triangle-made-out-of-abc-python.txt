<div class="post-text" itemprop="text">
<p>i have a problem with this code, what it is supposed to do is:</p>
<pre><code>    a
   b c
  a b c
 a b c a
b c a b c
</code></pre>
<p>I want to create a function pyramid(n), where n is number of rows. And I want to make it out of 'abc'. I can create triangle looking like this, but without a changing letter. I was thinking of some for loop from 1 to 3, but can't come up with something where it wouldn't be doing this:</p>
<pre><code>    a
   b b
  c c c
 a a a a
b b b b b
</code></pre>
<p>Or printing thinks multiple times (as it would be for loop (for rows) in for loop (from 1 to 3, for changing the letter)).</p>
<p>Those are my attempts:</p>
<pre><code>def pyramid(n):
    word = 'abc'
    for i in range(1, n+1):
        print (" "*(n-i), " ".join(word[1]*i))

    """ Just for help, to see how it works, if I can't come up with something
    while looking at it. (n-1) would be (n-i) in loop.

    print(" "*(n-1),'a')
    print(" "*(n-2),'b','c')
    print(" "*(n-3),'a','b','c')
    print(" "*(n-4),'a','b','c','a')
    print(" "*(n-5),'b','c','a','b','c')

    """

""" Corectly looking solution, but just for one number.    
def pyramid(n):
    for i in range(1, n+1):
        print (" "*(n-i), " ".join(str(n)*i))
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way to do it using <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle</code></a>, <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice</code></a> and <a href="https://docs.python.org/3.4/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a>:</p>
<pre><code>from itertools import cycle, islice
from functools import partial

def pyramid(n):
    c = cycle("abc")       #cycle returns items in cycle
    max_width = (2*n) - 1  #determine the max width(bottom row)
    f = partial("{:^{width}}".format, width=max_width)
    for i in range(1, n+1):
        print (f(" ".join(islice(c, i))))
</code></pre>
<p>If you don't want to import anything then you'll have to keep a global counter that will be incremented each time you print a character and so you'll have to use <code>counter % 3</code> to access the next character from <code>"abc"</code>:</p>
<pre><code>def pyramid(n):
    word = "abc"
    counter = 0
    for i in range(1, n+1):
        print (" "*(n-i), end="")
        for j in range(i):
            print (word[counter%len(word)], end=" ")
            counter += 1
        print()
</code></pre>
</div>
<span class="comment-copy">Thank you, for your answer. However, "print f(" ".join(islice(c, i)))" throws an error invalid syntax (f is outside of that print, but if i put it inside it will print it as a string). Also I would like to as what does the "partial" and "islice" do ?</span>
<span class="comment-copy">The second one is awesome ! Just one more question, is the word[counter%len(word)] similar to word[counter:len(word)] or is it something else ?</span>
<span class="comment-copy">@Matis It is something else. Suppose we have printed the first three characters <code>"abc"</code> and the <code>counter</code> is at 3, now we want to print "a" again, so <code>3 % 3</code> will be 0, hence <code>word[0]</code> will be printed and this process continues.</span>
<span class="comment-copy">Oh, damn it :D It is a modulo, i thought it is something more complex :D</span>
<span class="comment-copy">@Matis <code>islice(c, i)</code> means return the next <code>i</code> items from <code>c</code>.</span>
