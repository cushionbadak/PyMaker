<div class="post-text" itemprop="text">
<p>I am trying wait for any of multiple multiprocessing events at the same time, so I came up with code like this:</p>
<pre><code>if e1.wait(timeout) or e2.wait(timeout):
    # this part will be reached if either of both
    # events is set or the wait timed out
</code></pre>
<p>It works like the comment says. But how does this work? Is the <code>if</code> polling bot methods all the time? Or is it called as soon as one event gets set?</p>
<p>Bonus question: Is there some clever way to adjust the code to wait for any number of events, i.e. a list of events? <code>if True in [e1.wait(timeout),e2.wait(timeout)]</code> does not work as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>It only waits for the first one. This is due to python's support of <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow">short circuiting</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Wait on a thread or process is blocking, so it will block the current thread for going future until the timeout or the thread has finished. The semantics of <code>if</code> in Python is short circuit, which means that if the first one returns true, then the second one will not be called - simonzack said.</p>
<p>Waiting on a number of threads would be kinda hard to implement and maintain for a variety of threads. I would suggest you to use Message passing, and get each process to send a message to a Queue when it is finished. This way you could just check if the queue was of ´len(n)´, where ´n´ is the number of threads/processes. see more here <a href="http://pymotw.com/2/multiprocessing/communication.html" rel="nofollow">Queues in multiprocessing</a></p>
</div>
<span class="comment-copy">This makes it unusable then. ok, I'll try some other approach that was postet <a href="https://stackoverflow.com/questions/12317940/python-threading-can-i-sleep-on-two-threading-events-simultaneously">here</a>. I just though I was smarter than that ;)</span>
<span class="comment-copy">The thing I don't get about this short circuting is that the first call does evaluate to <code>False</code> until it either times out or gets true, so the second wait-part should get checked anyways - am I missing something?</span>
<span class="comment-copy">It evalutes the first call, if it's <code>true</code> it stops, otherwise it evaluates the second call.</span>
