<div class="post-text" itemprop="text">
<p>I have a list with two items and I want <code>c</code> to equal the opposite of <code>b</code>?</p>
<pre><code>a = ['rzz2', 'rzz3']
b = 'rzz2'
</code></pre>
<p>How can I get <code>c</code> to hold <code>'rzz3'</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because the list only has two items, a simple <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">conditional expression</a> will work fine:</p>
<pre><code>&gt;&gt;&gt; a = ['rzz2', 'rzz3']
&gt;&gt;&gt; b = 'rzz2'
&gt;&gt;&gt; c = a[0] if a[0] != b else a[1]
&gt;&gt;&gt; c
'rzz3'
&gt;&gt;&gt;
</code></pre>
<p>Performance-wise, this is the fastest solution:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; a = ['rzz2', 'rzz3']
&gt;&gt;&gt; b = 'rzz2'
&gt;&gt;&gt; timeit('a[0] if a[0] != b else a[1]', 'from __main__ import a, b')
0.45458095931186787
&gt;&gt;&gt; timeit('a[1 - a.index(b)]', 'from __main__ import a, b')
1.0331033692829674
&gt;&gt;&gt; timeit('{b}.symmetric_difference(a)', 'from __main__ import a, b')
0.9464230789108647
&gt;&gt;&gt; timeit('[i for i in a if i!=b][0]', 'from __main__ import a, b')
2.0873136110874384
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd be tempted to go for a set here, which may return zero or more results...</p>
<pre><code>a = ['rzz2', 'rzz3']
b = 'rzz2'
print {b}.symmetric_difference(a)
# set(['rzz3'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>c = a[1 - a.index(b)]
</code></pre>
<p>if its always a list of two ... </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [201]: a = ['rzz2', 'rzz3']

In [202]: b = 'rzz2'

In [203]: c = [i for i in a if i!=b][0]

In [204]: c
Out[204]: 'rzz3'

In [205]: c = a[1]

In [206]: c
Out[206]: 'rzz3'
</code></pre>
</div>
<span class="comment-copy">there's no such concept as opposite in the context you're providing</span>
<span class="comment-copy">you want a complement, but is not the same at all</span>
<span class="comment-copy">If your objective is just to remove the appearance of b in list a you can use a.remove(b). This removes only the first appearance of b in a.</span>
<span class="comment-copy">what exactly is the opposite of <code>'rzz2'</code>?</span>
<span class="comment-copy">+1 for the timeits... just out of curiosity, would you mind throwing in <code>dict(zip(a, reversed(a)))[b]</code>? Just curious as to how that compares</span>
<span class="comment-copy">Never mind... it's slooooooooooooooooooooooooooooooooooooow... just a crazy idea...</span>
<span class="comment-copy">@JonClements - (Sorry for the delay -- I was out).  Interestingly, a huge factor in that is the call to <code>reversed</code>.  Replacing that with <code>[::-1]</code> increased the performance substantially, going from <code>6.102846311472548</code> to <code>3.988217217551391</code> on my system.</span>
<span class="comment-copy">It was a crazy idea anyway... just something that occurred to me... very good point about using <code>[::-1]</code> though - but even with that, it's still a dead snail. Thanks for your time.</span>
<span class="comment-copy">what if b is not in a?</span>
<span class="comment-copy">then the opposite of None is Error , I quess.?</span>
<span class="comment-copy">I am still figuring out the opposite of <code>'rzz2'</code></span>
<span class="comment-copy">perfecto, thank you!</span>
