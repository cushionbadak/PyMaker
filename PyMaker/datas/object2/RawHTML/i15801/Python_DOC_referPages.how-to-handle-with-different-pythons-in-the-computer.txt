<div class="post-text" itemprop="text">
<p>I'm working wit a Windows 7 machine, and I'm a little confuse about how to handle with the different pythons inside my computer. I have at least four different python's installed in my computer: one in the root path (c:/), one inside the Anaconda distribution, another inside the ArcGis and another in the QuantumGis Distribution.</p>
<p>I'm trying to install the liblas package (libLAS-1.6.0.win32.exe (md5)), but while installing it just sees the ArcGis python, but I would like to use it with Anaconda python...</p>
<p>Any idea about how to handle this? Is it possible to use just one python distribution for those softwares?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Anaconda, <code>conda</code> is a better alternative to virtualenv, as it manages conda packages, which are not limited to just Python packages.  Create a conda environment like</p>
<pre><code>conda create -n py3k python=3 anaconda
</code></pre>
<p>(this will create an environment with Python 3 and all the packages that come with the Anaconda installer).</p>
<p>The <code>activate</code> and <code>deactivate</code> scripts that come with conda will help manage your PATH in the shell. </p>
<p>Typically, to manage things like ArcGis, you want to install those into a conda environment, if possible. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>virtualenv</code> is a good solution, as mentioned by @jonrsharpe, but an alternative is to have shortcuts connected to .bat files.  This is only viable if you know which python you wish to use at any given time.</p>
<p>Create a .bat file for each version of python.  I call mine <code>runpythonxxx.bat</code>, where <code>xxx</code> is some unique identifier.  Here is a sample .bat file (I call this <code>runpython34_64.bat</code>):</p>
<pre><code>@SET PATH=%PATH%;"C:\Python34_64";C:\Python34_64\Scripts;C:\Python34_64\Tools\Scripts
@SET PYTHONPATH=C:\Python34_64\Lib

@ASSOC .py=Python.File
@ASSOC .pyc=Python.CompiledFile
@ASSOC .pyo=Python.CompiledFile
@ASSOC .pyw=Python.NoConFile

@FTYPE Python.CompiledFile="C:\Python34_64\python.exe" "%%1" %%*
@FTYPE Python.File="C:\Python34_64\python.exe" "%%1" %%*
@FTYPE Python.NoConFile="C:\Python34_64\pythonw.exe" "%%1" %%*
@SET PATHEXT=.py;%PATHEXT%
</code></pre>
<p>The shortcut for this file has the following target:</p>
<pre><code>%comspec% /k "C:/mydir/runpython34_64.bat"
</code></pre>
<p>Beware that the <code>.py</code> file extension association only supports one version at a time - it is a limitation of file association (it is why UNIX #! line is more powerful).</p>
</div>
<span class="comment-copy">You should look into using <code>virtualenv</code> to manage different installations.</span>
<span class="comment-copy">1. <a href="https://docs.python.org/3/using/windows.html#launcher" rel="nofollow noreferrer">Use <code>py</code> (Python launcher), to run python scripts</a>. It can choose the correct python executable depending on the shebang line at the top of a script, command-line options, its configuration. 2. Anaconda distribution has <a href="http://conda.pydata.org/docs/" rel="nofollow noreferrer"><code>conda</code> command</a> that allows you to install packages.</span>
<span class="comment-copy">It's worth noting that on windows, the file association stuff is best replaced by the <code>py</code> launcher application, which comes with Python 3.x - it allows you to specifiy the version you want e.g: <code>py -3 somescript.py</code> or <code>py -2.6 someoldscript.py</code>.</span>
