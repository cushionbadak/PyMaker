<div class="post-text" itemprop="text">
<p>I have the following Python code:</p>
<pre><code>if bedrooms: # bedrooms exists
    .....
else: #  BEDROOMS DOES NOT EXIST 
    bn = "BEDROOMS DOES NOT EXIST"
</code></pre>
<p>I was stepping through it in my debugger and noticed that even though <code>bedroom == 0</code> , the flow jumps to the <code>else</code> statement.</p>
<p>To test this I tried:</p>
<pre><code>&gt;&gt;&gt; bedrooms
0.0
&gt;&gt;&gt; type(bedrooms)
&lt;type 'float'&gt;
</code></pre>
<p>Can someone explain what is going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>0</code> always evaluates to <code>False</code> in Python:</p>
<pre><code>&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(0.0)
False
&gt;&gt;&gt; not 0
True
&gt;&gt;&gt;
</code></pre>
<p>Consequentially, doing this:</p>
<pre><code>if 0:
    ...
else:
    ...
</code></pre>
<p>will always cause the <code>else</code> block to be executed.</p>
<p>For a complete list of what evaluates to <code>False</code>, see <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow">Truth Value Testing</a> in the Python docs.</p>
<hr/>
<p>If you want to check if <code>bedrooms</code> is defined, then you could use a <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow"><code>try/except</code></a> block and catch for a <code>NameError</code> (which is raised when you use a nonexistent name):</p>
<pre><code>try:
    bedrooms
except NameError:
    # bedrooms is not defined
</code></pre>
<p>But this begs the question of why you need to do this in the first place.  If it involves dynamic variable names, then I would like to say that those are considered a bad practice by most Python programmers and should be avoided.  They can quickly lead to maintenance problems and it is very easy to lose track of the names that were created.</p>
</div>
<span class="comment-copy"><code>0</code> is a falsy value, i.e. if you convert <code>0</code> to a Boolean, the result is <code>False</code>.</span>
<span class="comment-copy"><code>if bedrooms</code> <b>does not</b> test whether <code>bedrooms</code> <i>exists</i> - if it doesn't, you'll get a <code>NameError</code>. It checks whether the object assigned to that name evaluates truth-y or false-y.</span>
<span class="comment-copy">Thank you, I didn't understand that</span>
<span class="comment-copy">Thanks for the explanation, I'm going to modify the function that returns bedrooms to return the string "INVALID" when no bedroom number is found , and I'll check for that- Bill</span>
<span class="comment-copy">@user61629 - Note that the idiomatic way to represent "no bedroom number" would be to return <code>None</code>.  You can then use <code>if bedrooms is None:</code> to check for it.</span>
<span class="comment-copy">Thank you very much! I used None instead.</span>
