<div class="post-text" itemprop="text">
<p>I was trying to convert a string to a datetime object.
The string I got from a news feed is in the following format:
"Thu, 16 Oct 2014 01:16:17 EDT"</p>
<p>I tried using datetime.strptime() to convert it.
i.e.,</p>
<pre><code>datetime.strptime('Thu, 16 Oct 2014 01:16:17 EDT','%a, %d %b %Y %H:%M:%S %Z')
</code></pre>
<p>And got the following error:</p>
<blockquote>
<p>Traceback (most recent call last):<br/>
      File "", line 1, in 
      datetime.strptime('Thu, 16 Oct 2014 01:16:17 EDT','%a, %d %b %Y %H:%M:%S %Z')<br/>
      File "C:\Anaconda\lib_strptime.py", line 325, in _strptime
      (data_string, format))<br/>
  ValueError: time data 'Thu, 16 Oct 2014 01:16:17 EDT' does not match
  format '%a, %d %b %Y %H:%M:%S %Z'</p>
</blockquote>
<p>However, if I tried the string without "EDT", it worked.
i.e.,</p>
<pre><code>datetime.strptime('Thu, 16 Oct 2014 01:16:17','%a, %d %b %Y %H:%M:%S')
</code></pre>
<p>Does anyone know how to parse that "EDT" part?</p>
</div>
<div class="post-text" itemprop="text">
<p>To parse the date in <a href="https://tools.ietf.org/html/rfc5322#section-3.3" rel="nofollow noreferrer">RFC 2822 format</a>, you could use <code>email</code> package:</p>
<pre><code>from datetime import datetime, timedelta
from email.utils import parsedate_tz, mktime_tz

timestamp = mktime_tz(parsedate_tz("Thu, 16 Oct 2014 01:16:17 EDT"))
# -&gt; 1413436577
utc_dt = datetime(1970, 1, 1) + timedelta(seconds=timestamp)
# -&gt; datetime.datetime(2014, 10, 16, 5, 16, 17)
</code></pre>
<p>Note: <code>parsedate_tz()</code> assumes that EDT corresponds to <code>-0400</code> UTC offset but it might be incorrect in Australia where EDT is <code>+1100</code> (AEDT is used by <code>pytz</code> in this case) i.e., a timezone abbreviation may be ambiguous. See <a href="https://stackoverflow.com/q/1703546/4279">Parsing date/time string with timezone abbreviated name in Python?</a></p>
<p>Related Python bug: <a href="http://bugs.python.org/issue22377" rel="nofollow noreferrer">%Z in strptime doesn't match EST and others</a>.</p>
<p>If your computer uses POSIX timestamps (likely), and you are sure the input date is within an acceptable range for your system (not too far into the future/past), and you don't need to preserve the microsecond precision then you could use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp" rel="nofollow noreferrer"><code>datetime.utcfromtimestamp</code></a>:</p>
<pre><code>from datetime import datetime
from email.utils import parsedate_tz, mktime_tz

timestamp = mktime_tz(parsedate_tz("Thu, 16 Oct 2014 01:16:17 EDT"))
# -&gt; 1413436577
utc_dt = datetime.utcfromtimestamp(timestamp)
# -&gt; datetime.datetime(2014, 10, 16, 5, 16, 17)
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/1790795/4279">Python: parsing date with timezone from an email</a>.</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/1471987/4279">How do I parse an HTTP date-string in Python?</a></span>
<span class="comment-copy">Thanks for help!</span>
<span class="comment-copy">@user2629723 if the answer helped solve your problem, please indicate as such by selecting the check mark next to it. Doing this shows that your issue has been resolved, and also awards reputation to both you and the answerer. See "<a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">How does accepting an answer work?</a>" for more info.</span>
<span class="comment-copy">from python3.3 onwards you can use <a href="https://docs.python.org/3.6/library/datetime.html#datetime.datetime.utcfromtimestamp" rel="nofollow noreferrer">docs.python.org/3.6/library/…</a> so you don't need to add the offset to make it a little easier</span>
<span class="comment-copy">@amohr 1- utcfromtimestamp() is available forever (long before Python 3.3) 2- datetime + timedelta may have a more portable date range and it shows the relationship between POSIX timestamp and UTC time explicitly. Though in most case, both methods are interchangeable and the usage of utcfromtimestamp() has less moving parts (and therefore it is more preferable).</span>
<span class="comment-copy">@jfs whoops misread docs, thanks for clarification</span>
