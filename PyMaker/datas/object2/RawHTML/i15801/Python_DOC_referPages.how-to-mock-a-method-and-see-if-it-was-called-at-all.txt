<div class="post-text" itemprop="text">
<p>I have a method that ends like this:</p>
<pre><code>def compute(self, is_send_emails, test_email_address):
    ...
    if is_send_emails:
          self.sendEmails(uniq_email_pids=uniq_email_pids,
                                    test_email_address=test_email_address)
    else:
          logging.debug("send_emails = False - No emails were sent out.")
</code></pre>
<p>How should I unit test this case, where <code>is_send_emails</code> parameter is false and I have to assert that <code>sendEmails()</code> was not called.</p>
<p>I thought I should mock <code>self.sendEmails()</code> to see if it was called at all.</p>
<pre><code>def test_x(self):
    with mock.patch('apps.dbank.x.sendEmails') as sendEmails_mock:
</code></pre>
<p>But now I am stuck, how to check that.  This <a href="http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.assert_called_with" rel="nofollow">site</a> explains the different asserts I could use, but none of them seems appropriate. Should I use <code>assert_called_with</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>To test that your mock was <strong>not</strong> called, just test the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.called" rel="nofollow"><code>called</code> attribute</a> is <code>False</code>:</p>
<pre><code>self.assertFalse(sendEmails_mock.called)
</code></pre>
</div>
