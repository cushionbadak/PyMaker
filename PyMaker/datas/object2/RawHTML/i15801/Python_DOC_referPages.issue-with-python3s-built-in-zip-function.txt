<div class="post-text" itemprop="text">
<pre><code>Python 3.4.2 (default, Oct  8 2014, 13:44:52) 
[GCC 4.9.1 20140903 (prerelease)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; gen = (x for x in range(10)) ## Need to wrap range into ()'s to create a generator, next(range(10)) is invalid
&gt;&gt;&gt; list(zip(gen, [1,2,3])) ## zip will "eat up" the number 3
[(0, 1), (1, 2), (2, 3)]
&gt;&gt;&gt; next(gen) ## Here i need next to return 3
4
&gt;&gt;&gt; 
</code></pre>
<p>The problem is that I'm losing a value after the zip call. This would be a bigger issue had it not been for the fact that gen is pure code.</p>
<p>I don't know whether or not it would be possible to create a function that behaves like this, it's definitely possible if only one of the arguments to the zip function is a generator and the rest are "normal" iterators where all the values are known, and stored in memory. If that were the case you could just check the generator last.</p>
<p>Basically what I am wondering is if there is any function in the python standard library that will act like I need it to in this case.</p>
<p>Of course, in <strong>some</strong> cases one could just do something like</p>
<pre><code>xs = list(gen)
</code></pre>
<p>Then you only have to deal with a list.</p>
<p>I could also add, that getting the last value that zip got from gen would also be a solution to this problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there are no built-in functions that avoid this behaviour.</p>
<p>What happens is that the <code>zip()</code> function tries to get the next value for all inputs, so that it can produce the next tuple. It has to do this in <em>a</em> order, and it is only logical that that order is the same as the arguments passed in. In fact, the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">order is guaranteed by the documentation</a>:</p>
<blockquote>
<p>The left-to-right evaluation order of the iterables is guaranteed</p>
</blockquote>
<p>Because the function needs to support arbitrary iterables, <code>zip()</code> does not make any attempts at determining the length of all parameters. It <em>doesn't know</em> that your second parameter only has 3 elements. It simply tries to get the next value for each of the parameters, builds a tuple and returns that. If any of the parameters cannot produce a next value, the <code>zip()</code> iterator is done. But that <em>does</em> mean that it'll ask your generator for the next element first before asking the list.</p>
<p>Apart from altering the order of your inputs, you can build your own <code>zip()</code> function instead, that <em>does</em> try to take length into account, where available:</p>
<pre><code>def limited_zip(*iterables):
    minlength = float('inf')
    for it in iterables:
        try:
            if len(it) &lt; minlength:
                minlength = len(it)
        except TypeError:
            pass
    iterators = [iter(it) for it in iterables]
    count = 0
    while iterators and count &lt; minlength:
        yield tuple(map(next, iterators))
        count += 1
</code></pre>
<p>So this version of the <code>zip()</code> function tries to get a bead on the minimal length of any sequences you passed in. This does <em>not</em> protect you from using a shorter iterable in the mix, but does work for your test case:</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; gen = iter(range(10))
&gt;&gt;&gt; list(limited_zip(gen, [1, 2, 3]))
[(0, 1), (1, 2), (2, 3)]
&gt;&gt;&gt; next(gen)
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Problem is that <code>zip(gen,[1,2,3])</code> generates 0,1,2, <strong>and 3 also</strong> but finds that second argument is of length three only. So if you do it in reverse, you can generate 3 in <strong>next(gen)</strong> code line:</p>
<pre><code>&gt;&gt;&gt; gen = (x for x in range(10))
&gt;&gt;&gt; list(zip([1,2,3],gen))
[(1, 0), (2, 1), (3, 2)]
&gt;&gt;&gt; next(gen)
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that when <code>zip</code> reaches <code>StopIteration</code> on one of its iterables, it forgets the values returned from the preceding iterables.</p>
<p>Here's a solution using <code>zip_longest</code> and <code>groupby</code> from <code>itertools</code> to partition the zip sequence into before and after the shortest iterable terminates:</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest, groupby
&gt;&gt;&gt; sentinel = object()
&gt;&gt;&gt; gen = (x for x in range(10))
&gt;&gt;&gt; g = iter(groupby(zip_longest(gen, [1,2,3], fillvalue=sentinel),
...                  lambda t: sentinel not in t))
&gt;&gt;&gt; _, before = next(g)
&gt;&gt;&gt; list(before)
[(0, 1), (1, 2), (2, 3)]
&gt;&gt;&gt; _, after = next(g)
&gt;&gt;&gt; next(after)
(3, &lt;object object at 0x7fad64cbf080&gt;)
&gt;&gt;&gt; next(gen)
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a wrapper class around your generator to give you access to the most recent element. I took most of this code from the Python Wiki at <a href="https://wiki.python.org/moin/Generators" rel="nofollow">https://wiki.python.org/moin/Generators</a>.</p>
<pre><code>class gen_wrap(object):
    def __init__(self, gen):
        self.gen = gen
        self.current = None

    def __iter__(self):
        return self

    # Python 3 compatibility
    def __next__(self):
        return self.next()

    def next(self):
        self.current = next(self.gen)
        return self.current

    def last(self):
        return self.current

&gt;&gt;&gt; gen = gen_wrap(x for x in range(10))
&gt;&gt;&gt; list(zip(gen, [1,2,3]))
[(0, 1), (1, 2), (2, 3)]
&gt;&gt;&gt; gen.last()
3
</code></pre>
</div>
<span class="comment-copy">Rather than produce a generator expression, just use <code>iter(range(10))</code>.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/11210300/why-does-zip-drop-the-values-of-my-generator">Why does zip() drop the values of my generator?</a></span>
<span class="comment-copy">@StephaneRolland not a duplicate, since that question asks why it does that and this one asks how to work around it.</span>
<span class="comment-copy">Giving the generator as the second argument to zip seems to work for my case. Since it will go from left to right in the argument list.</span>
<span class="comment-copy">@Yoanar: sure, but I couldn't assume that changing the order is a workable solution for everyone.</span>
