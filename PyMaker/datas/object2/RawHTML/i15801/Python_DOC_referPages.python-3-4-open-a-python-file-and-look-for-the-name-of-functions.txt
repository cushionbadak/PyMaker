<div class="post-text" itemprop="text">
<p>When a Python file is open for reading via</p>
<pre><code>read_file = open(input_file, "r"))
</code></pre>
<p>how can we find the name of functions from the open python file and print them?</p>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow"><code>dir()</code></a>:</p>
<blockquote>
<p>Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; read_file = open('test.txt', 'r')
&gt;&gt;&gt; dir(read_file)
['__class__', '__delattr__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'closed', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'mode', 'name', 'newlines', 'next', 'read', 'readinto', 'readline', 'readlines', 'seek', 'softspace', 'tell', 'truncate', 'write', 'writelines', 'xreadlines']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>ast</code> to the rescue!</p>
<pre><code>import ast

with open('somefile.py', 'r') as fin:
    source = fin.read()

tree = ast.parse(source)

class FuncFinder(ast.NodeVisitor):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.function_names = []


    def visit_FunctionDef(self, node):
        self.function_names.append(node.name)
        self.generic_visit(node)

finder = FuncFinder()
finder.visit(tree)
print(finder.function_names)
</code></pre>
<p>Copy/paste-able working demo:</p>
<pre><code>source = """
def foo():
  pass

def bar():
  pass

class FooBar(object):
  def __init__(self):
    pass
"""

import ast

tree = ast.parse(source)

class FuncFinder(ast.NodeVisitor):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.function_names = []


    def visit_FunctionDef(self, node):
        self.function_names.append(node.name)
        self.generic_visit(node)

finder = FuncFinder()
finder.visit(tree)
print(finder.function_names)  # ['foo', 'bar', '__init__']
</code></pre>
<p>Note that we get <strong>all</strong> the function names (including those in classes, nested inside of other functions, etc).  You could easily skip those by adding <code>def visit_ClassDef(self, node): pass</code> ...</p>
</div>
<span class="comment-copy">Um, that's printing the attributes of the <code>read_file</code> file object, not the functions defined in 'test.txt', which for the purposes of the question should be a Python source file.</span>
<span class="comment-copy">That was some fast coding.</span>
<span class="comment-copy">@simonzack -- Thanks.  It was <i>almost</i> right.  Turns out that <code>NodeVisitor.visit</code> doesn't return <code>self</code> (and for whatever reason, I always want it to).</span>
