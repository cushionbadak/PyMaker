<div class="post-text" itemprop="text">
<p>I have the following folder structure.</p>
<p><code>application/app/folder/file.py</code></p>
<p>and I want to import some functions from <strong><em>file.py</em></strong> in another Python file which resides in</p>
<p><code>application/app2/some_folder/some_file.py</code></p>
<p>I've tried</p>
<p><code>from application.app.folder.file import func_name</code></p>
<p>and some other various attempts but so far I couldn't manage to import properly. How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>By default, you can't. When importing a file, Python only searches the current directory, the directory that the entry-point script is running from, and <code>sys.path</code> which includes locations such as the package installation directory (it's actually a little more complex than this, but this covers most cases).</p>
<p>However, you can add to the Python path at runtime:</p>
<pre><code># some_file.py
import sys
sys.path.insert(0, '/path/to/application/app/folder')

import file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nothing wrong with:</p>
<pre><code>from application.app.folder.file import func_name
</code></pre>
<p>Just make sure <code>folder</code> also contains an <code>__init__.py</code>, this allows it to be included as a package. Not sure why the other answers talk about <code>PYTHONPATH</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When modules are in parallel locations, as in the question:</p>
<pre><code>application/app2/some_folder/some_file.py
application/app2/another_folder/another_file.py
</code></pre>
<p>This shorthand makes one module visible to the other:</p>
<pre><code>import sys
sys.path.append('../')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think an ad-hoc way would be to use <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="noreferrer">the environment variable <code>PYTHONPATH</code></a> as described in the documentation: <a href="http://docs.python.org/2/tutorial/modules.html#the-module-search-path" rel="noreferrer" title="Python 2">Python2</a>, <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="noreferrer" title="Python 3">Python3</a></p>
<pre><code># Linux &amp; OSX
export PYTHONPATH=$HOME/dirWithScripts/:$PYTHONPATH

# Windows
set PYTHONPATH=C:\path\to\dirWithScripts\;%PYTHONPATH%
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>The answers here are lacking in clarity, this is tested on Python 3.6</strong></p>
<p>With this folder structure:</p>
<pre><code>main.py
|
---- myfolder/myfile.py
</code></pre>
<p>Where <code>myfile.py</code> has the content:</p>
<pre><code>def myfunc():
    print('hello')
</code></pre>
<p>The import statement in <code>main.py</code> is:</p>
<pre><code>from myfolder.myfile import myfunc
myfunc()
</code></pre>
<p>and this will print <em>hello</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that Python is looking in the Python directory for this file and not finding it. You must specify that you are talking about the directory that you are in and not the Python one.</p>
<p>To do this you change this:</p>
<p><code>from application.app.folder.file import func_name</code></p>
<p>to this:</p>
<pre><code>from .application.app.folder.file import func_name
</code></pre>
<p>By adding the dot you are saying look in this folder for the application folder instead of looking in the Python directory.</p>
</div>
<div class="post-text" itemprop="text">
<p>From what I know,  add an <code>__init__.py</code> file directly in the folder of the functions you want  to  import  will do  the job.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>First</strong> import sys</p>
<pre><code> import sys
</code></pre>
<p><strong>Second</strong> append the folder path </p>
<pre><code>sys.path.insert(0, '/the/folder/path/name-folder/')
</code></pre>
<p><strong>Third</strong> Make a blank file called __ init __.py in your subdirectory (this tells Python it is a module)</p>
<ul>
<li>name-file.py

<ul>
<li>name-folder

<ul>
<li>__ init __.py</li>
<li>name-module.py</li>
</ul></li>
</ul></li>
</ul>
<p><strong>Fourth</strong> import the module inside the folder</p>
<pre><code>from name-folder import name-module
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Considering <code>application</code> as the root directory for your python project, create an empty <code>__init__.py</code> file in <code>application</code>, <code>app</code> and <code>folder</code> folders. Then in your <code>some_file.py</code> make changes as follows to get the definition of func_name:</p>
<pre><code>import sys
sys.path.insert(0, r'/from/root/directory/application')

from application.app.folder.file import func_name ## You can also use '*' wildcard to import all the functions in file.py file.
func_name()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Worked for me in python3 on linux</p>
<pre><code>import sys  
sys.path.append(pathToFolderContainingScripts)  
from scriptName import functionName #scriptName without .py extension  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works for me on windows </p>
<pre><code># some_file.py on mainApp/app2 
import sys
sys.path.insert(0, sys.path[0]+'\\app2')

import some_file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try Python's relative imports:</p>
<pre><code>from ...app.folder.file import func_name
</code></pre>
<p>Every leading dot is another higher level in the hierarchy beginning with the current directory.</p>
<hr/>
<p>Problems? If this isn't working for you then you probably are getting bit by the many gotcha's relative imports has.
Read answers and comments for more details: 
<a href="https://stackoverflow.com/questions/11536764/how-to-fix-attempted-relative-import-in-non-package-even-with-init-py">How to fix "Attempted relative import in non-package" even with __init__.py</a></p>
<p>Hint: have <code>__init__.py</code> at every directory level. You might need <code>python -m application.app2.some_folder.some_file</code> (leaving off .py) which you run from the top level directory or have that top level directory in your PYTHONPATH. <em>Phew!</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Using sys.path.append with an absolute path is not ideal when moving the application to other environments. Using a relative path won't always work because the current working directory depends on how the script was invoked.</p>
<p>Since the application folder structure is fixed, we can use os.path to get the full path of the module we wish to import. For example, if this is the structure:</p>
<pre><code>/home/me/application/app2/some_folder/vanilla.py
/home/me/application/app2/another_folder/mango.py
</code></pre>
<p>And let's say that you want to import the "mango" module. You could do the following in vanilla.py:</p>
<pre><code>import sys, os.path
mango_dir = (os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
+ '/another_folder/')
sys.path.append(mango_dir)
import mango
</code></pre>
<p>Of course, you don't need the mango_dir variable.</p>
<p>To understand how this works look at this interactive session example:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; mydir = '/home/me/application/app2/some_folder'
&gt;&gt;&gt; newdir = os.path.abspath(os.path.join(mydir, '..'))
&gt;&gt;&gt; newdir
    '/home/me/application/app2'
&gt;&gt;&gt; newdir = os.path.abspath(os.path.join(mydir, '..')) + '/another_folder'
&gt;&gt;&gt; 
&gt;&gt;&gt; newdir
'/home/me/application/app2/another_folder'
&gt;&gt;&gt; 
</code></pre>
<p>And check the <a href="https://docs.python.org/3/library/os.path.html" rel="noreferrer">os.path</a> documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was faced with the same challenge, especially when importing multiple files, this is how I managed to overcome it.</p>
<pre><code>import os, sys

from os.path import dirname, join, abspath
sys.path.insert(0, abspath(join(dirname(__file__), '..')))

from root_folder import file_name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm quite special : I use Python with Windows !</p>
<p>I just complete information : for both Windows and Linux, both relative and absolute path work into <code>sys.path</code> (I need relative paths because I use my scripts on the several PCs and under different main directories).  </p>
<p>And when using Windows both <code>\</code> and <code>/</code> can be used as separator for file names and of course you must double <code>\</code> into Python strings,<br/>
some valid examples :</p>
<pre><code>sys.path.append('c:\\tools\\mydir')
sys.path.append('..\\mytools')
sys.path.append('c:/tools/mydir')
sys.path.append('../mytools')
</code></pre>
<p>(note : I think that <code>/</code> is more convenient than <code>\</code>, event if it is less 'Windows-native' because it is Linux-compatible and simpler to write and copy to Windows explorer)</p>
</div>
<div class="post-text" itemprop="text">
<p>If the purpose of loading a module from a specific path is to assist you during the development of a custom module, you can create a symbolic link in the same folder of the test script that points to the root of the custom module. This module reference will take precedence over any other modules installed of the same name for any script run in that folder.</p>
<p>I tested this on Linux but it should work in any modern OS that supports symbolic links.</p>
<p>One advantage to this approach is that you can you can point to a module that's sitting in your own local SVC branch working copy which can greatly simplify the development cycle time and reduce failure modes of managing different versions of the module.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4 and later, you can <a href="https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly" rel="noreferrer">import from a source file directly (link to documentation)</a>.</p>
<p>Here is an example. First, the file to be imported, named <code>foo.py</code>:</p>
<pre><code>def announce():
    print("Imported!")
</code></pre>
<p>The code that imports the file above, inspired heavily by the example in the documentation:</p>
<pre><code>import importlib, importlib.util, os.path

def module_from_file(module_name, file_path):
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

foo = module_from_file("foo", "/path/to/foo.py")

if __name__ == "__main__":
    print(foo)
    print(dir(foo))
    foo.announce()
</code></pre>
<p>The output:</p>
<pre><code>&lt;module 'foo' from '/path/to/foo.py'&gt;
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'announce']
Imported!
</code></pre>
<p>Note that the variable name, the module name, and the filename need not match. This code still works:</p>
<pre><code>import importlib, importlib.util, os.path

def module_from_file(module_name, file_path):
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

baz = module_from_file("bar", "/path/to/foo.py")

if __name__ == "__main__":
    print(baz)
    print(dir(baz))
    baz.announce()
</code></pre>
<p>The output:</p>
<pre><code>&lt;module 'bar' from '/path/to/foo.py'&gt;
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'announce']
Imported!
</code></pre>
<p>Programmatically importing modules was introduced in Python 3.1 and gives you more control over how modules are imported. Refer to the documentation for more information.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can refresh the Python shell by pressing f5, or go to Run-&gt; Run Module. This way you don't have to change the directory to read something from the file. Python will automatically change the directory. But if you want to work with different files from different directory in the Python Shell, then you can change the directory in sys, <a href="https://stackoverflow.com/a/4383597/3982001">as Cameron said</a> earlier. </p>
</div>
<div class="post-text" itemprop="text">
<p>In my case I had a class to import.  My file looked like this:</p>
<pre><code># /opt/path/to/code/log_helper.py
class LogHelper:
    # stuff here
</code></pre>
<p>In my main file I included the code via:</p>
<pre><code>path.append("/opt/path/to/code/")
from log_helper import LogHelper
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So I had just right clicked on my IDE, and added a new <code>folder</code> and was wondering why I wasn't able to import from it. Later I realized I have to right click and create a Python Package, and not a classic file system folder. Or a post-mortem method being adding an <code>__init__.py</code> (which makes python treat the file system folder as a package) as mentioned in other answers. Adding this answer here just in case someone went this route.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>sys.path.insert(0, '/path/to/application/app/folder')
</code></pre>
</div>
<span class="comment-copy">Related:  <a href="http://stackoverflow.com/q/43476403/674039">stackoverflow.com/q/43476403/674039</a></span>
<span class="comment-copy"><code>sys.path.append('/path/to/application/app/folder')</code> is cleaner imo</span>
<span class="comment-copy">@pseudosudo: Yep, it is, but inserting it at the beginning has the benefit of guaranteeing that the path is searched before others (even built-in ones) in the case of naming conflicts.</span>
<span class="comment-copy">@kreativitea - <code>sys.path</code> returns a <code>list</code>, not a <code>deque</code>, and it'd be silly to convert the <code>list</code> to a <code>deque</code> and back.</span>
<span class="comment-copy">Is it considered as a pythonic way to manage .py files in folders? I'm wondering... why it's not supported by default? it doesn't make sense to maintain all .py files in a single directory..</span>
<span class="comment-copy">@Ofir: No, this isn't a nice clean pythonic solution. In general, you should be using packages (which are based on directory trees). This answer was specific to the question asked, and for some reason continues to accrue a large number upvotes.</span>
<span class="comment-copy">Because this doesn't cover the cases where modifying <code>PYTHONPATH</code> is necessary. Say you have two folders on the same level: <code>A</code> and <code>B</code>. <code>A</code> has an <code>__init.py__</code>. Try importing something from <code>B</code> within <code>A</code>.</span>
<span class="comment-copy">What's inside the <code>init.py</code> or <code>__init__.py</code> file?</span>
<span class="comment-copy">@Xinyang It can be an empty file. Its very existence tells Python to treat the directory as a package.</span>
<span class="comment-copy">Of course this answer assumes that <code>application</code> and <code>app</code> are packages already (i.e. you already have <code>__init__.py</code> in both of them). As the result of adding <code>__init__.py</code> also to <code>folder</code>, <code>application.app.folder</code> becomes a (sub) <i>package</i>, from which you can access the <i>module</i> <code>application.app.folder.file</code>, whose symbol <code>func_name</code> can now be imported</span>
<span class="comment-copy">Whatever I try, this won't work. I want to import from a "sibling" directory, so one up one down. All have __ init __.py's, including parent. Is this python 3 -specific?</span>
<span class="comment-copy">As a caveat: This works so long as the importing script is run from its containing directory. Otherwise the parent directory of whatever other directory the script is run from will be appended to the path and the import will fail.</span>
<span class="comment-copy">To avoid that, we can get the parent directory of file <code>sys.path.append(os.path.dirname(os.path.abspath(__file__)))</code></span>
<span class="comment-copy">Wait, would I replace myScripts with the filename?</span>
<span class="comment-copy">no, with the path of the directory to your .py file</span>
<span class="comment-copy">This worked for me on Windows, but not on linux</span>
<span class="comment-copy">adding an <b>init</b>.py (empty) configuration file in myfolder worked for me on linux (y)</span>
<span class="comment-copy">@Vincent did you mean <code>__init__.py</code>?</span>
<span class="comment-copy">@mrgloom indeed</span>
<span class="comment-copy">For some reason adding <code>__init__.py</code> doesn't work for me. I'm using Py 3.6.5 on Ubuntu 18. It works on Pycharm but not from terminal</span>
<span class="comment-copy">this is what fixed me</span>
<span class="comment-copy">only if the script that wants to include that other directory is already in the sys.path</span>
<span class="comment-copy">I used <code>sys.path.append(tools_dir)</code> on Windows and I don't need to add a <code>__init__.py' file in my directory </code>tools_dir`</span>
<span class="comment-copy">With name-folder being right below name-file.py, this should work even without the <code>sys.path.insert</code>-command. As such, the answer leaves the question, if this solution works even when name-folder is located in an arbitrary location.</span>
<span class="comment-copy">Worked perfectly.</span>
<span class="comment-copy">should be: sys.path.insert(0, r'/from/root/directory')</span>
<span class="comment-copy"><code>sys.path.append("/home/linux/folder/")</code> —  Make sure do not use a shortcut e.g. <code>"~/folder/"</code></span>
<span class="comment-copy">i tried this it worked for me thnx</span>
<span class="comment-copy">os.path.join('tools', 'mydir')</span>
<span class="comment-copy">Thanks @CoreyGoldberg, it's better and simpler by your way !</span>
<span class="comment-copy">I don't know if anyone even tried to understand this, but I think that it's too complicated.</span>
<span class="comment-copy">This is not different from the top answer and several other answers.</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.</span>
