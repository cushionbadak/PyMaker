<div class="post-text" itemprop="text">
<p>I have a question regarding function-calls using if-statements and recursion.
I am a bit confused because python seems to jump into the if statements block even if my function returns "False"</p>
<p>Here is an example:</p>
<pre><code>1    def function_1(#param):
2       if function_2(#param):
3           #do something
4           if x&lt;y:
5               function_1(#different parameters)
6           if x&gt;y:
7               function_1(#different parameters)
</code></pre>
<p>My function_2 returns "False" but python continues the code on line 5 for example. Can anyone explain this behavior? Thanks in advance for any answers.</p>
<p>edit: Sorry, forgot the brackets </p>
<p>concrete example:</p>
<pre><code>1    def findExit(field, x, y, step):
2        if(isFieldFree(field, x, y)):
3            field[y][x] = filledMarker
4            findExit(field, x + 1, y, step+1)
5            findExit(field, x - 1, y, step+1)
6            findExit(field, x, y + 1, step+1)
7            findExit(field, x, y - 1, step+1)
8        elif(isFieldEscape(field, x, y)):
9            way.append(copy.deepcopy(field))
10            wayStep.append(step+1)

    def isFieldFree(field, x, y):
        if field[y][x] == emptyMarker:
            return True
        else:
            return False

    def isFieldEscape(field, x, y):
        if field[y][x] == escapeMarker:
            return True
        else:
            return False
</code></pre>
<p>After both functions "isFieldFree" and "isFieldEscape" return False python continues the code in line 5 sometimes in line 6.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may misunderstand how recursion works, yes it continues at line 5 or 6 because the recursion has ended at a lower level in the call stack, so it continues at a higher-level in the call stack. Here's a sample call stack, note the next operation after <code>False</code> is the next <code>findExit()</code> at the higher call stack:</p>
<pre><code>1 findExit(...):
2    True:
3        field assignment
4.1      findExit(x+1) 
  2          True
  3              field assignment
  4.1            findExit(x+1):
    2                False  # Does not jump to line 5 in current call stack.
  5.1            findExit(x-1):
    .                ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short answer:</strong></p>
<p>That's because you're not actually calling the function. You can call the function by using the parenthesis.</p>
<pre><code>if function2():
    ...
</code></pre>
<p><strong>Long answer:</strong></p>
<p>Functions in Python are a first class citizen (functional paradigm), and so it is completely valid to refer to a function just by its name. The following is valid syntax:</p>
<pre><code>def hello():
    print("Hello")

hello_sayer = hello
hello_sayer() # print "Hello"
</code></pre>
<p>The next concept in play is truth-ness of non-Boolean variables.
In Python, the following are considered False-y</p>
<ul>
<li>None </li>
<li>False </li>
<li>zero of any numeric type, for example, 0, 0L, 0.0, 0j. </li>
<li>any empty sequence, for example, '', (), []. </li>
<li>any empty mapping, for example, {}. instances of user-defined classes, if the class defines</li>
<li>a <strong>nonzero</strong>() or <strong>len</strong>() method, when that method returns the
integer zero or bool value False.</li>
</ul>
<p>Everything else is True-ish. Since a function name falls under none of the above categories, it is considered True-ish when tested in a conditional context.</p>
<p>Reference: <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#truth-value-testing</a></p>
<p><strong>Edit</strong>: The earlier question was incomplete, and did not have a function call. For the new question, AChampion's answer is the correct one.</p>
</div>
<span class="comment-copy"><code>if function_2:</code> Are you sure this is what you meant? is function_2 is a function?</span>
<span class="comment-copy">Without a more concrete example, can't really help. From above if <code>function_2()</code> returns <code>False</code> then the recursion ends.</span>
<span class="comment-copy">@AChampion Thank you for your reply, added a concrete example. It is an example for solving a maze using recursive function calls.</span>
<span class="comment-copy">Updated so the documentation link uses Python 3. Python 2.4 is way too old to reference.</span>
<span class="comment-copy">Note: OP updated question and this doesn't address his actual issue.</span>
