<div class="post-text" itemprop="text">
<p>I know that dicts and sets aren't ordered, so equal sets or dicts may print differently (all tests with Python 3.6.1):</p>
<pre><code>&gt;&gt;&gt; for obj in {0, 8}, {8, 0}, {0:0, 8:8}, {8:8, 0:0}:
        print(obj)

{0, 8}
{8, 0}
{0: 0, 8: 8}
{8: 8, 0: 0}
</code></pre>
<p>And I just realized that <a href="https://docs.python.org/3/library/pprint.html" rel="noreferrer"><code>pprint</code></a> (“pretty-print”) sorts dicts but not sets:</p>
<pre><code>&gt;&gt;&gt; for obj in {0, 8}, {8, 0}, {0:0, 8:8}, {8:8, 0:0}:
        pprint.pprint(obj)

{0, 8}
{8, 0}
{0: 0, 8: 8}
{0: 0, 8: 8}
</code></pre>
<p>It's documentation also says <em>"Dictionaries are sorted by key before the display is computed"</em>. But why doesn't it also sort sets? Doesn't seem pretty to me. And is there a way to <em>make it</em> sort sets? Also inside nested structures, as that's a main purpose of <code>pprint</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This was raised in <a href="http://www.psf.upfronthosting.co.za/issue27495" rel="nofollow noreferrer">issue 27495</a> and it is a bug, rather than just a design choice, but apparently has not yet been resolved.</p>
<p>Here is another example from the issue that illustrates perhaps more obviously the behavior you identify in Python 3:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; import string, pprint
&gt;&gt;&gt; pprint.pprint(set(string.digits))
{'7', '1', '9', '8', '3', '0', '2', '5', '6', '4'}
</code></pre>
</blockquote>
<p>The same applies for <code>frozenset()</code> too, but note that multi-line <code>pprint</code> outputs <em>are</em> sorted in Python 3, for example:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; pprint.pprint(set(string.digits), width=1)
{'0',
 '1',
 '2',
 '3',
 '4',
 '5',
 '6',
 '7',
 '8',
 '9'}
</code></pre>
</blockquote>
<p>However, in Python 2, the output from the same original code is sorted:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; pprint.pprint(set(string.digits))
set(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])
</code></pre>
</blockquote>
<p>I think it is the inconsistency between Python 3 and Python 2, and between the single-line multi-line behavior, that makes this a bug. </p>
<p>For <code>dict</code>s, a similar example, illustrates as you note, that the output is sorted in either Python 3 or 2, as it should be:</p>
<pre><code>&gt;&gt;&gt; pprint.pprint({i:None for i in set(string.digits)})
{'0': None,
 '1': None,
 '2': None,
 '3': None,
 '4': None,
 '5': None,
 '6': None,
 '7': None,
 '8': None,
 '9': None}
</code></pre>
<p>However, for Python 3.6, it could be considered surprising that <code>pprint</code> sorts <code>dict</code>s since they <a href="https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6"><em>are</em> ordered now</a>. However, since this is just an implementation detail (for now) I guess there is no obligation for <code>pprint</code> to maintain the insertion order (yet), and doing so would break <code>pprint</code>'s own consistency across Python versions of always sorting <code>dict</code>s.</p>
</div>
<span class="comment-copy">I guess it doesn't support sets, but you could subclass <code>pprint.PrettyPrinter</code> and override <code>pformat</code> to handle sets if you wanted...</span>
<span class="comment-copy">No, they are not ordered now, that is a implementation detail of cPython, other implementations can implement dicts as unordered and still be conforming to the spec, that only mandates that mappings used in some cases (PEP468, PEP520) are order preserving. A different implementation could choose to handle those cases specially and keep an unordered dict implementation. Until this is officially part of the specification, dicts should not be treated as order preserving, and even then doing so would destroy backward compatibility.</span>
<span class="comment-copy">@mata Yes, already I said it was an implementation detail</span>
<span class="comment-copy">Thanks. Maybe I should've looked for and found that issue report myself. Really strange how it sorts some things but not others. Good point about ordered dicts. If that does become guaranteed, I guess pprint really must not sort them anymore, which would be somewhat sad because less pretty.</span>
<span class="comment-copy">But the way <code>pprint</code> works isn't an implementation detail, that's what makes this a bug in the first place. <code>pprint</code> can only rely on the existing dict order if that is a defined in the language specification. As long as it isn't, the options would only be to sort, not to sort or to explicitly check if  we're on cPython &gt;= 3.6.</span>
<span class="comment-copy">Or... hmm... maybe they'll just make <code>OrderedDict</code> be exactly the same as <code>dict</code> except with an order guarantee (instead of an extra implementation like it is now). I mean, as far as I understand, the order in the new <code>dict</code> implementation is a side effect, and the actual goal was to make it more efficient. Maybe someone will come up with an even more efficient <code>dict</code> implementation that doesn't keep order. And then with an order guarantee, they couldn't use it (without breaking things). So there's reason to not guarantee it.</span>
