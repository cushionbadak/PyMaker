<div class="post-text" itemprop="text">
<p>I can get RAM size okay with <code>ctypes</code> and <code>MEMORYSTATUSEX()</code>, but I'm having trouble finding anything for total disk size (not space available, but total capacity in general).</p>
</div>
<div class="post-text" itemprop="text">
<p>ActiveState has a <a href="http://code.activestate.com/recipes/577972-disk-usage/" rel="nofollow noreferrer">recipe</a> for this that uses the Windows <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa364937(v=vs.85).aspx" rel="nofollow noreferrer"><code>GetDiskFreeSpaceEx</code></a> function. It appeared to work when I did some limited testing, however it's has a number of potential issues, so here's a greatly improved and much more bullet-proof version that works in at least Python 2.7+ through 3.x) and uses only built-in modules. </p>
<p>@eryksun deserves most of the credit/blame for the enhancements, since (s)he's obviously an expert on the topic of using <code>ctypes</code>.</p>
<pre><code>import os
import collections
import ctypes
import sys

import locale
locale.setlocale(locale.LC_ALL, '')  # set locale to default to get thousands separators

PULARGE_INTEGER = ctypes.POINTER(ctypes.c_ulonglong)  # Pointer to large unsigned integer
kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
kernel32.GetDiskFreeSpaceExW.argtypes = (ctypes.c_wchar_p,) + (PULARGE_INTEGER,) * 3

class UsageTuple(collections.namedtuple('UsageTuple', 'total, used, free')):
    def __str__(self):
        # Add thousands separator to numbers displayed
        return self.__class__.__name__ + '(total={:n}, used={:n}, free={:n})'.format(*self)

def disk_usage(path):
    if sys.version_info &lt; (3,):  # Python 2?
        saved_conversion_mode = ctypes.set_conversion_mode('mbcs', 'strict')
    else:
        try:
            path = os.fsdecode(path)  # allows str or bytes (or os.PathLike in Python 3.6+)
        except AttributeError:  # fsdecode() not added until Python 3.2
            pass

    # Define variables to receive results when passed as "by reference" arguments
    _, total, free = ctypes.c_ulonglong(), ctypes.c_ulonglong(), ctypes.c_ulonglong()

    success = kernel32.GetDiskFreeSpaceExW(
                            path, ctypes.byref(_), ctypes.byref(total), ctypes.byref(free))
    if not success:
        error_code = ctypes.get_last_error()

    if sys.version_info &lt; (3,):  # Python 2?
        ctypes.set_conversion_mode(*saved_conversion_mode)  # restore conversion mode

    if not success:
        windows_error_message = ctypes.FormatError(error_code)
        raise ctypes.WinError(error_code, '{} {!r}'.format(windows_error_message, path))

    used = total.value - free.value
    return UsageTuple(total.value, used, free.value)

if __name__ == '__main__':
    print(disk_usage('C:/'))
</code></pre>
<p>Sample output:</p>
<pre class="lang-none prettyprint-override"><code>UsageTuple(total=102,025,392,128, used=66,308,366,336, free=35,717,025,792)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Then you should use this code.</p>
<pre><code>import win32com.client as com


def TotalSize(drive):
    """ Return the TotalSize of a shared drive [GB]"""
    try:
        fso = com.Dispatch("Scripting.FileSystemObject")
        drv = fso.GetDrive(drive)
        return drv.TotalSize/2**30
    except:
        return 0

def FreeSpace(drive):
    """ Return the FreeSape of a shared drive [GB]"""
    try:
        fso = com.Dispatch("Scripting.FileSystemObject")
        drv = fso.GetDrive(drive)
        return drv.FreeSpace/2**30
    except:
        return 0

drive = r'C:'
print 'TotalSize of %s = %d GB' % (drive, TotalSize(drive))
print 'FreeSapce on %s = %d GB' % (drive, FreeSapce(drive))
</code></pre>
<p><a href="https://i.stack.imgur.com/bR8cn.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/bR8cn.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>you can use psutil, If you want to find total size of your C: drive or any other drive then just provide the path inside disk_usage() function and convert into GB. Here I have found total disk size of C: Drive.</p>
<pre><code>import psutil
totalsize = psutil.disk_usage('C:').total / 2**30
print('totalsize: ',totalsize, ' GB')
</code></pre>
</div>
<span class="comment-copy">i think you can find answer <a href="https://stackoverflow.com/a/276934/5805982">here</a></span>
<span class="comment-copy">@LexHobbit That is for RAM (Memory), not disk.</span>
<span class="comment-copy">Oh, sorry U wrote about this already =)</span>
<span class="comment-copy">You can call <a href="https://docs.python.org/3/library/shutil.html#shutil.disk_usage" rel="nofollow noreferrer"><code>shutil.disk.usage</code></a> in Python 3.3+. If you need it for Python 2, you can use ctypes.</span>
<span class="comment-copy">Returns 0 on Python3</span>
