<div class="post-text" itemprop="text">
<p>My Python app needs to receive an array of 16-bit integer tuples from a C++ application.</p>
<p>The data consists of an array of 32-bit unsigned integers, where each integer represents an IQ complex number. I and Q are each signed 16-bit numbers.</p>
<p>The array size is constant (6000).</p>
<p>The apps run on similar architectures so I donâ€™t need to worry about endianness.</p>
<p>Please suggest a Python code snippet to read the data from a socket into a list of IQ tuples.  (I know how to create and connect a socket).</p>
<p>Best regards</p>
<p>David</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has several options to process binary data; in this case, you start out by reading from a socket, producing an immutable bytes buffer (<code>bytes</code> in Python 3, <code>str</code> in Python 2). This can be parsed as 16-bit words using either <a href="https://docs.python.org/3/library/struct.html#struct.unpack" rel="nofollow noreferrer"><code>struct.unpack</code></a> or <a href="https://docs.python.org/3/library/array.html#module-array" rel="nofollow noreferrer"><code>array.array</code></a>:</p>
<pre><code>tuple_of_ints = struct.unpack('=12000h', data)
array_of_s16s = array.array('h', data)
</code></pre>
<p>From there, you still have only a one-dimensional structure, where odd and even items are your I and Q values. If using <a href="https://docs.scipy.org/doc/numpy/" rel="nofollow noreferrer">numpy</a>, you could use ndarray.fromstring or ndarray.frombuffer to create a similar array, then reshape it. </p>
<p>We could also convert items individually, which is a bit slower:</p>
<pre><code>list_of_complex_numbers = [complex(*struct.unpack('hh',data[i:i+4]))
    for i in range(0,len(data),4)]
</code></pre>
<p>numpy is also capable of reading from file, so with a file-like socket you might be able to use <code>numpy.fromfile(socket, numpy.int16, 2*6000)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <strong>struct</strong> library in python is you have incoming data as hexadecimal bytes.</p>
<p>Or if they are simple hexadecimal numbers then conversion is direct.</p>
<p>It would be really helpful if you can tell the data type you receive from C++ and the required format in python.</p>
</div>
<span class="comment-copy">Thanks very much. That's very helpful.</span>
<span class="comment-copy">Please will you explain the fmt: '=12000h' ?</span>
<span class="comment-copy">If you follow the link to the documentation for <code>struct</code>, you'll find that <code>=</code> means native byte order, <code>12000</code> is the number of items and <code>h</code> (mnemonic: half word) is for 16-bit signed integers. <code>hh</code> could equally be written <code>2h</code>.</span>
<span class="comment-copy">Thanks for your reply.</span>
<span class="comment-copy">The array is a packed array of  pairs of 16-bit two's complement integers.  Each successive pair of 16-bit integers should be assigned to a Python tuple of integers (ideally also 16-bit in case I need to do bit manipulation on them).</span>
<span class="comment-copy">struct has nothing to do with hexadecimal representations; it processes binary data.</span>
<span class="comment-copy">You can use ctypes in python for restrictng the size of integer to 16 bit. The unpacking and conversion of variables is possible by struct library.</span>
