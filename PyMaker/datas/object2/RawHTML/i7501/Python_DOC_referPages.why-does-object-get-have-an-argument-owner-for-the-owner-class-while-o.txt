<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#implementing-descriptors</a></p>
<blockquote>
<pre><code>object.__get__(self, instance, owner)
</code></pre>
<p>Called to get the attribute of the owner class (class attribute
  access) or of an instance of that class (instance attribute access).
  owner is always the owner class, while instance is the instance that
  the attribute was accessed through, or None when the attribute is
  accessed through the owner. This method should return the (computed)
  attribute value or raise an AttributeError exception.</p>
<pre><code>object.__set__(self, instance, value)
</code></pre>
<p>Called to set the attribute on an instance instance of the owner class
  to a new value, value.</p>
</blockquote>
<p>Why does <code>object.__get__</code> have an argument <code>owner</code> for the owner class, while <code>object.__set__</code> doesn't?</p>
<p>Does that mean that when the descriptor's class supplies both <code>__get__</code> and <code>__set__</code>,  </p>
<ul>
<li><p>we can get the descriptor attribute, no matter whether the attribute is an attribute of the owner class or of an instance of that class, </p></li>
<li><p>we can set the descriptor attribute, when the attribute is an attribute of an instance of the owner class, but not when the attribute is an attribute  of the owner class?</p></li>
</ul>
<p>My question is actually part of <a href="https://stackoverflow.com/questions/44937897/what-is-the-lookup-procedure-when-setting-an-attribute-from-a-class-or-from-an-i">What is the lookup procedure when setting an attribute from a class or from an instance?</a></p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>owner</code> mostly exists for getting the attribute on the class itself, rather than an instance. When you're retrieving the attribute on an instance, the <code>owner</code> argument is redundant, since it's just <code>type(instance)</code>.</p>
<p><code>__set__</code> doesn't apply to setting the attribute on the class itself, so it has no use for <code>owner</code>.</p>
</div>
<span class="comment-copy">Thanks. My question is actually part of <a href="https://stackoverflow.com/questions/44937897/what-is-the-lookup-procedure-when-setting-an-attribute-from-a-class-or-from-an-i" title="what is the lookup procedure when setting an attribute from a class or from an i">stackoverflow.com/questions/44937897/â€¦</a></span>
<span class="comment-copy">Thanks. Why "<code>__set__</code> doesn't apply to setting the attribute on the class itself", while <code>__get__</code> applies to getting the attribute on either a class or an instance of a class?</span>
<span class="comment-copy">@Tim: That's how the language was designed. They probably didn't have enough of a use case for making <code>__set__</code> apply to the class. If you want to see the actual rationale, you'd have to search the Python mailing lists.</span>
