<div class="post-text" itemprop="text">
<p>I have a number of variables in python that I want to use to generate a unique ID for those variables (yet have that ID always produce for those same matching variables).</p>
<p>I have used <code>.encode('hex','strict')</code> to produce an ID which <em>seems</em> to work, however the output value is very long.  Is there a way to produce a <em>shorter</em> ID using variables?</p>
<pre><code>myname = 'Midavalo'
mydate = '5 July 2017'
mytime = '8:19am'

codec = 'hex'

print "{}{}{}".format(myname, mydate, mytime).encode(codec,'strict')
</code></pre>
<p>This outputs </p>
<pre><code>4d69646176616c6f35204a756c792032303137383a3139616d
</code></pre>
<p>I realise with <code>hex</code> it is probably dependant on the length of the three variables, so I'm wondering if there is another codec that can/will produce shorter values without excluding any of the variables?  </p>
<p>So far I have tested <code>base64</code>, <code>bz2</code>, <code>hex</code>, <code>quopri</code>, <code>uu</code>, <code>zip</code> from <a href="https://docs.python.org/2/library/codecs.html#python-specific-encodings" rel="nofollow noreferrer">7.8.4. Python Specific Encodings</a>, but I'm unsure how to get any of these to produce shorter values without removing variables.</p>
<p>Is there another codec I could use, or a way to shorten the values from any of them without removing the uniqueness, or even a completely different way to produce what I require?</p>
<p>All I am trying to do is produce an ID so I can identify those rows when loading them into a database.  If the same value already exists it will not create a new row in the database.  There is no security requirement, just a unique ID.  The values are generated elsewhere into python, so I can't just use a database issued ID for these values.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use some hashing algorithm from the hashlib package: <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer">https://docs.python.org/3/library/hashlib.html</a> or for python 2: <a href="https://docs.python.org/2.7/library/hashlib.html" rel="nofollow noreferrer">https://docs.python.org/2.7/library/hashlib.html</a></p>
<pre><code>import hashlib
s = "some string"
hash = hashlib.sha1(str.encode(s)).hexdigest() # you need to encode the strings into bytes here
</code></pre>
<p>This hash would be the same for the same string.
Your choice of algorithm depends of the number of chars you want and the risk of collision(two different strings yielding the same hash).</p>
</div>
<span class="comment-copy">Asking for recommendations to an off-site resource is banned on Stack Overflow.  Try searching on "unique hashing function".  Many of the algorithms have a parameter so you can specify the output length.</span>
<span class="comment-copy">You definitely don't need 17 (or more) bytes to represent a timestamp (let alone only with a 1 minute resolution).</span>
<span class="comment-copy">@Prune I don't follow - what recommendations to which off-site resources are you talking about?  I just want to create an ID from my values</span>
<span class="comment-copy">You asked for another <code>codec</code> or algorithm.  It's a perfectly good question for the algorithms group or somewhere else on StackExchange.</span>
<span class="comment-copy">@Prune Perhaps "codec" is the wrong term?  The things like <code>base64</code>, <code>hex</code> etc. that I found on the Python docs</span>
