<div class="post-text" itemprop="text">
<p>Sorry, this is definitely a duplicate, but I can't find the answer. I'm working in Python 3 and this is the structure of my app:</p>
<pre><code>/home
  common.py
  australia/
    new-south-wales/
      fetch.py
</code></pre>
<p>I am in the <code>home/</code> directory, running <code>fetch.py</code>. How can I import functions from <code>common.py</code> in that script?</p>
<p>I've set up <code>fetch.py</code> as follows:</p>
<pre><code>from common import writeFile
</code></pre>
<p>But I get the following error:</p>
<pre><code>File "australia/new-south-wales/fetch.py", line 8, in &lt;module&gt;
    from common import writeFile
ModuleNotFoundError: No module named 'common'
</code></pre>
<p>If I just do <code>python -c "from common import writeFile"</code> I don't see an error. </p>
<p>Shouldn't the interpreter <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">look in the current directory for modules</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>before import your directories that need to be imported must have file <code>__init__.py</code> in that folder</p>
<p><strong>#solution 1</strong> (import in runtime)</p>
<p>To import a specific Python file at 'runtime' with a known name:</p>
<pre><code>import os
import sys
script_dir = "/path/to/your/code/directory"

# Add the absolute directory  path containing your
# module to the Python path

sys.path.append(os.path.abspath(script_dir))

import filename
</code></pre>
<p><strong>#solution 2</strong>(add files to one of python libraries)</p>
<p>also as you have a common library for you can run </p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.path
</code></pre>
<p>and see what directories you can put your code and use in every project.you can move your common package to one of this directories and treat it like a normal package.for example for common.py if you put it in one root directory of one of this directory you can import like  <code>import common</code></p>
<p><strong>#solution 3</strong>(use relative import)</p>
<pre><code># from two parent above current directory import common
# every dot for one parent directory
from ... import common 
</code></pre>
<p>and then go to parent directory and run</p>
<pre><code>python -m home.australia.new-south-wales.fetch
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the description I'm assuming you're not running this as complete python package, just as separate files.</p>
<p>What you can do is use complete modules. This means adding empty <code>__init__.py</code> to directories with your code. You'll also have to change the name of <code>new-south-wales</code> to <code>new_south_wales</code>, since it needs to be a valid module name.</p>
<p>Assuming <code>home</code> is the name of your app, you should end up with:</p>
<pre><code>home/
  __init__.py
  common.py
  australia/
    __init__.py
    new_south_wales/
      __init__.py
      fetch.py
</code></pre>
<p>Next, you'll need a startup script for your app - this means either something simple like:</p>
<pre><code>#!/usr/bin/env python
from australia.new_south_wales import fetch
fetch.your_main_function()
</code></pre>
<p>Or you can add a <code>setup.py</code> with a full package description. If you specify <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation" rel="nofollow noreferrer">entry points</a> and the script will be automatically created.</p>
<p>Now that you're starting your code in context of a package, your <code>fetch.py</code> can do:</p>
<pre><code>from ..common import writeFile
</code></pre>
</div>
<span class="comment-copy">You're missing an <code>__init__.py</code> for your module. <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#packages</a></span>
<span class="comment-copy">Thanks.This seems pretty inelegant - is there a better way to share common functions between scripts in different sub-directories? (Also, I guess you mean <code>__init__.py</code>?)</span>
<span class="comment-copy">I've added an empty <code>__init__.py</code> file in <code>home/</code>, and I've added  <code>scriptpath = "../../common.py"</code> followed by <code>import common</code> in <code>fetch.py</code>. I still get an error trying to run <code>fetch.py</code> from <code>home/</code>.</span>
<span class="comment-copy">yes i mean <code>__init__.py</code>;i use this way too;change scriptpath to <code>"../../"</code></span>
<span class="comment-copy">Thanks, changed as you suggest but still get <code>ModuleNotFoundError: No module named 'common'</code>,</span>
<span class="comment-copy">This also isn't PEP8-compliant - surely there must be a better way?</span>
