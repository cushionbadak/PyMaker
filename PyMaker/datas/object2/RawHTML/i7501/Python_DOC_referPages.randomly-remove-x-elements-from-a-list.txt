<div class="post-text" itemprop="text">
<p>I'd like to randomly remove a fraction of elements from a list without changing the order of the list.</p>
<p>Say I had some data and I wanted to remove 1/4 of them:</p>
<pre><code>data = [1,2,3,4,5,6,7,8,9,10]
n    = len(data) / 4
</code></pre>
<p>I'm thinking I need a loop to run through the data and delete a random element 'n' times? So something like:</p>
<pre><code>for i in xrange(n):
    random = np.randint(1,len(data))
    del data[random]
</code></pre>
<p>My question is, is this the most 'pythonic' way of doing this? My list will be ~5000 elements long and I want to do this multiple times with different values of 'n'.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer">random.sample</a> like this:</p>
<pre><code>import random

a = [1,2,3,4,5,6,7,8,9,10]

no_elements_to_delete = len(a) // 4
no_elements_to_keep = len(a) - no_elements_to_delete
b = set(random.sample(a, no_elements_to_keep))  # the `if i in b` on the next line would benefit from b being a set for large lists
b = [i for i in a if i in b]  # you need this to restore the order
print(len(a))  # 10
print(b)       # [1, 2, 3, 4, 5, 8, 9, 10]
print(len(b))  # 8
</code></pre>
<p>Two notes on the above.</p>
<ol>
<li>You are not modifying the original list in place but you could.</li>
<li>You are not actually deleting elements but rather keeping elements but it is the same thing (you just have to adjust the ratios)</li>
<li>The drawback is the list-comprehension that restores the order of the elements</li>
</ol>
<hr/>
<p>As @koalo says in the comments the above <strong>will not work properly if the elements in the original list are not unique</strong>. I could easily fix that but then my answer would be identical to the one posted by@JohnColeman. So if that might be the case just use his instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sequential deleting is a bad idea since deletion in a list is <code>O(n)</code>. Instead do something like this:</p>
<pre><code>def delete_rand_items(items,n):
    to_delete = set(random.sample(range(len(items)),n))
    return [x for i,x in enumerate(items) if not i in to_delete]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is the order meaningful? 
if not you can do something like: </p>
<pre><code>shuffle(data)
data=data[:len(data)-n]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest using numpy indexing as in</p>
<pre><code>import numpy as np
data = np.array([1,2,3,4,5,6,7,8,9,10])
n = len(data)/4
indices = sorted(np.random.choice(len(data),len(data)-n,replace=False))
result = data[indices]
</code></pre>
</div>
<span class="comment-copy">Thanks! I actually want to keep what's left in 'a' and not what was removed</span>
<span class="comment-copy">@RichardHall See the update</span>
<span class="comment-copy">This does not work if an element occurs several time in the array!</span>
<span class="comment-copy">This is great! Thanks :)</span>
<span class="comment-copy">This is also great, thanks :)</span>
