<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/30264699/shared-state-in-multiprocessing-processes">Shared state in multiprocessing Processes</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>Let's say that I have a lot of instances of a class. This class has a <code>run</code> function, which I am running through a Process in order to spread out work over multiple cores. The class also has an attribute <code>c</code> that I am accessing in the <code>run</code> function. The problem is, when I change one of the instance's <code>c</code>, it is not seen as updated in the output of the <code>run</code> function.</p>
<p>Demonstration:</p>
<pre><code>import multiprocessing
class Test:
    def __init__(self):
        self.c = 0
    def run(self):
        while True:
            print self.c
test1 = Test()
p = Process(target = test1.run, args=())
p.start()
test1.c = 5
</code></pre>
<p>Expected output:</p>
<pre><code>5
5
5
5
</code></pre>
<p>Actual output:</p>
<pre><code>0
0
0
0
</code></pre>
<p>What's the best way to make sure that the variable is synced correctly among processes? (My actual code is a lot more complex - including many more objects, classes, and variables)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.5/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> provides an API for easily spawning subprocesses, not threads. This isn't just semantics; the reason you aren't getting your expected results is that separate processes do not share memory spaces (where threads do).</p>
<p><a href="https://repl.it/JLyH" rel="nofollow noreferrer">Here</a> is a quick example to demonstrate. The thread is the one that prints the 5, whereas the subprocess prints the 0.</p>
<p><a href="https://docs.python.org/3.5/library/threading.html" rel="nofollow noreferrer">Here</a> is the documentation for the threading library, which I believe is what you're looking for.</p>
</div>
<span class="comment-copy">Sharing state using <code>multiprocessing</code> is non-trivial</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/30264699/shared-state-in-python-multiprocessing-processes">here</a>. But think about it, you are working with multiple <i>processes</i>. The variables are never "synced". You have to <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">implement that yourself</a>. As the docs say, though, you want to avoid sharing state as much as possible.</span>
<span class="comment-copy">@juanpa.arrivillaga I think <b>share memory</b> in multiprocessing is a better way for OP, not the dup. For instance, <a href="https://docs.python.org/3.5/library/multiprocessing.html#multiprocessing.Value" rel="nofollow noreferrer"><code>multiprocessing.Value</code></a>.</span>
<span class="comment-copy">Nope. You can use <code>threading</code> in a different Python implementation that lacks a GIL, though. E.g. Jython, IronPython...</span>
<span class="comment-copy">@acer the availability of libraries might be an issue. But for just plain Python, they should work. Although, it seems they might only support up to Python 2.7</span>
<span class="comment-copy">Is there any way to use the threading library and spread the processing over multiple cores? One of the reasons I was leaning towards multiprocessing was that it played well with multi-core systems.</span>
<span class="comment-copy">As mentioned in some of the comments on the question, I think any interpreter that does not implement a <a href="https://docs.python.org/3.5/glossary.html#term-global-interpreter-lock" rel="nofollow noreferrer">global interpreter lock</a> should let threads and multi-core CPUs to play nice together. Also see <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">the wiki</a></span>
