<div class="post-text" itemprop="text">
<p>When I logging an error in a decorator, the logging <code>pathname</code> is not what I want.</p>
<p>logging.conf:</p>
<pre><code>[loggers]
keys=root
[handlers]
keys=console
[formatters]
keys=console
[logger_root]
...
[handler_console]
...
[formatter_console]
format=%(levelname)s - File "%(pathname)s", line %(lineno)s, %(funcName)s: %(message)s
</code></pre>
<p>Nomally, logging an error in file <code>/home/lizs/test/app.py</code>:</p>
<pre><code>def app():
    try:
        a   # error, on line 12
    except Exception, err:
        logging.getLogger().error(str(err))
</code></pre>
<p>Debug message on console:</p>
<pre><code>ERROR - File "/home/lizs/test/app.py", line 12, app: global name 'a' is not defined
</code></pre>
<p>The above logging <code>pathname</code>(/home/lizs/test/app.py) is what I want. But when I use a decorator:</p>
<p><code>/home/lizs/test/app.py</code>:</p>
<pre><code>from decorators import logging_decorator


@logging_decorator
def app():
   a
</code></pre>
<p><code>/home/lizs/test/decorators.py</code>:</p>
<pre><code>def logging_decorator(func):
    def error_log():
        try:
            func()  # on line 10
        except Exception, err:
            logging.getLogger().error(str(err))
    return error_log
</code></pre>
<p>The debug message:</p>
<pre><code>ERROR - File "/home/lizs/test/decorators.py", line 10, error_log: global name 'a' is not defined
</code></pre>
<p>Now, the logging <code>pathname</code> is a pathname of the decorator (/home/lizs/test/decorators.py).</p>
<p>How to set the logging <code>pathname</code> to <code>/home/lizs/test/app.py</code> when I use decorator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that your exception handler is one level upper than where the exception was initially raised, so you will have to examine the stacktrace and manually build a LogRecord with the correct file/line information:</p>
<pre><code>def logging_decorator(func):
    def error_log():
        try:
            func()  # on line 10
        except Exception, err:
            tb = sys.exc_info()[2]     # extract the current exception info
            exc_tup = traceback.extract_tb(tb)[-1]  # extract the deeper stack frame
            logger = logging.getLogger()
            # manually build a LogRecord from that stack frame
            lr = logger.makeRecord(logger.name,
                                   logging.ERROR, exc_tup[0], exc_tup[1],
                                   str(err), {}, None, exc_tup[2])
            logger.handle(lr)     # and ask the logging system to process it
    return error_log
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Solution:</h2>
<p>Try this:</p>
<p><strong>app.py:</strong></p>
<pre><code>from decorators import logging_decorator

@logging_decorator
def app():
    a

app()
</code></pre>
<p><strong>decorators.py:</strong></p>
<pre><code>import logging
import inspect

#   init logger
logger = logging.getLogger()
formatter = logging.Formatter('%(levelname)s - File %(real_pathname)s,'
                              ' line %(real_lineno)s, %(real_funcName)s: %(message)s')
console_handle = logging.StreamHandler()
console_handle.setFormatter(formatter)
logger.addHandler(console_handle)


def logging_decorator(func):
    def error_log():
        try:
            func()
        except Exception as err:
            logger.error(err, extra={'real_pathname': inspect.getsourcefile(func),  # path to source file
                                     'real_lineno': inspect.trace()[-1][2],         # line number from trace
                                     'real_funcName': func.__name__})               # function name

    return error_log
</code></pre>
<h2>Explanation:</h2>
<p>According to <a href="https://docs.python.org/3/library/logging.html#logging.Logger.debug" rel="nofollow noreferrer">docs here</a> you can pass a dictionary as <code>extra</code> argument <em>to populate the <code>__dict__</code> of the <code>LogRecord</code> created for the logging event with user-defined attributes. These custom attributes can then be used as you like</em>.</p>
<p>Thus, <a href="https://stackoverflow.com/questions/40862192/why-is-it-forbidden-to-override-log-record-attributes">because we can't modify <code>pathname</code> directly</a>, this approach with <code>real_pathname</code> is most straight possible.</p>
<h2>Links:</h2>
<ul>
<li><a href="https://docs.python.org/3/library/inspect.html#inspect.getsourcefile" rel="nofollow noreferrer"><code>inspect.getsourcefile</code></a></li>
<li><a href="https://docs.python.org/3/library/inspect.html#inspect.trace" rel="nofollow noreferrer"><code>inspect.trace</code></a></li>
<li><a href="https://docs.python.org/3/library/logging.html#logging.Logger.debug" rel="nofollow noreferrer"><code>logging.message</code></a></li>
</ul>
</div>
<span class="comment-copy">According to <a href="https://docs.python.org/3/library/inspect.html#inspect.getsourcefile" rel="nofollow noreferrer">docs here</a>,<code>inspect.getsourcefile </code> return the name of the Python source file in which an object was defined. BUT this will fail with a TypeError if the object is a built-in module, class, or function. Is there any solution for  a built-in function?</span>
<span class="comment-copy">@yi xiao, built-ins (e.g. <code>print</code>) are implemented in C, hence they're, as far as I know, unreachable with vanilla <code>Python</code>. Maybe someone with <code>CPython</code> background can answer your question.</span>
<span class="comment-copy">How about using <code>os.path.abspath(func.__module__)</code> to get the <code>real_pathname </code>?</span>
