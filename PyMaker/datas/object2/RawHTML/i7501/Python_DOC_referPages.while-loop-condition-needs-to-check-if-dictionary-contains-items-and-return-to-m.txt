<div class="post-text" itemprop="text">
<p>I have the following code:
<a href="https://repl.it/JRi4/2" rel="nofollow noreferrer">https://repl.it/JRi4/2</a>
in which I am trying to implement a while loop in the searchplayer() sub. </p>
<p>Basically, I need to check to see if the dictionary player_info is full, and only then continue with the search. If it is empty (no items in player_info) then it needs to print "Add player details" and return to the mainmenu()</p>
<p><strong>The code in question is here:</strong></p>
<pre><code>def searchplayer():  
   print("===============SEARCH by player: Calculate average goals==================")
   name = input("Player name : ")
   if name in player_info.keys():
     #print student_info
      print ("Average player goals : ", str(sum(player_info[name].values())/3.0))
   else:
      print("Please enter a valid player name:")
   print()
   mainmenu()

main()
</code></pre>
<p>I have tried the following, that does not work:</p>
<pre><code>def searchplayer():  
   print("===============SEARCH by player: Calculate average goals==================")
   name = input("Player name : ")
   while player_info:
     if name in player_info.keys():
     #print student_info
      print ("Average player goals : ", str(sum(player_info[name].values())/3.0))
   else:
      print("Please enter a valid player name:")
   print()
   print("Nothing in player_info")
   mainmenu()

main()
</code></pre>
<p><strong>Error</strong></p>
<pre><code>player_info not defined
</code></pre>
<p>The error suggests player_info is not defined, but it has been declared as a global variable</p>
</div>
<div class="post-text" itemprop="text">
<p>After trying your entire code, what I advise you to do here is switch your <code>SearchPlayer</code> with this one:</p>
<pre><code>def searchplayer():  
    print("===============SEARCH by player: Calculate average goals==================")

    if len(player_info.keys())==0:
        print("you have no players registered")
    else:
        name = input("Player name : ")
        while name not in player_info.keys():
            print("Please enter a valid player name:")
            name = input("Player name: ")
        #print student_info
        print ("Average player goals : ", str(sum(player_info[name].values())/3.0))

    print()
    mainmenu()
</code></pre>
<p>one more thing, you didn't ask about it but you should add a checker for the type of input when asking from user to make decisions by <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">handling exceptions</a> as follows:</p>
<pre><code>try:
    choice=int(input("Enter choice:"))
except:
    print("Input must be int from 1-5")
    mainmenu()
</code></pre>
<p>it is useful to prevent your app from crashing by mistake when i input strings instead of int.</p>
<p>if you don't want to use recursion you could do this:</p>
<pre><code>proceed = True

def main():
    while proceed:
        mainmenu()
</code></pre>
<p>and change:</p>
<pre><code>sys.exit()
</code></pre>
<p>with:</p>
<pre><code>proceed = False
</code></pre>
<p>( i just chose  to take off <code>sys.exit()</code> from the code because it was generating some warning )</p>
<p>and take off <code>mainmenu()</code> for all your methods. that should do it nicely</p>
<p>so your entire code should be like this (I'm not familiar with repl.it sorry):</p>
<pre><code>#SOLUTION==================FOOTBALL COACH app

#The program allows a user to enter a number of students (their names and test 
#scores) and then search for a student, returning their average score for the 
#three tests

#1------Create a similar program for a football coach (he wants to store player 
#names + goals for 3 matches)
#2 -----main menu that allows for 1. Adding players + goals and 2. Search by 
#Player 3. Quit
#3-----When complete, go back and add additional menu options for "View all     
#players" and Update". This allows the coach to update the number of goals for     
#any given player as well as view all

import sys #note the sys.exit() command will not work without this

player_info={}
proceed = True

def main():
    while proceed:
       mainmenu()


def mainmenu():
    global proceed
    print("=====WELCOME to the MAIN MENU=============")
    print("""
  1..........Add New Players &amp; Goals
  2..........Search by Players (return average goals)
  3----------Update Player Goals
  4----------View All players
  5..........Quit

  =========================================
  """)
    try:
        choice=int(input("Enter choice:"))
    except:
        print("Input must be int from 1-5")
        mainmenu()

    if choice==1:
        playerinfo=addplayers()
    elif choice==2:
        searchplayer()
    elif choice==3:
        update()
    elif choice==4:
        viewall()
    elif choice==5:
        proceed = False
    else:
        print("You must make a valid choice - 1, 2 or 3")


def viewall():

    for keys, values in player_info.items():
        print(keys, values)
    print()

def update():
    playername=input("Which player's goals do you wish to update?:")
    m1=int(input("Match 1 new entry:"))
    m2=int(input("Match 2 new entry:"))
    m3=int(input("Match 3 new entry:"))
    if playername in player_info:
        #myDict["A"] = "Application"
        player_info[playername]="Boo"
        player_info[playername]={"Match 1 goals":m1,"Match 2 goals":m2,"Match 3 goals":m3}


def addplayers():
    global player_info #this needs to be declared as a global variable so it can be used by searchplayer()
    player_info= {} #create a dictionary that stores the player name: player goals
    num_players = int(input("Please enter number of players you wish to enter:"))
    print ("You are entering %s players" %num_players)
    player_data = ['Match 1 goals : ', 'Match 2 goals : ', 'Match 3 goals : ']
    for i in range(0,num_players):
        player_name = input("Enter Player Name :")
        player_info[player_name] = {}
        for entry in player_data:
            player_info[player_name][entry] = int(input(entry)) #storing the marks entered as integers to perform arithmetic operations later on.
        print()





def searchplayer():  
    print("===============SEARCH by player: Calculate average goals==================")
    if not player_info:
        print("you have no players registered")
    else:
        name = input("Player name : ")
        while name not in player_info.keys():
            print("Please enter a valid player name:")
            name = input("Player name: ")
        #print student_info
        print ("Average player goals : ", str(sum(player_info[name].values())/3.0))

    print()

main()
</code></pre>
<p>Hope that helped</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your <code>player_info</code> really is defined globally, here's a code to loop until a name is entered which exists in the <code>player_info</code> dictionary, or to fail with explanation if <code>player_info</code> is empty initially:</p>
<pre><code>def searchplayer():  
   print("===============SEARCH by player: Calculate average goals==================")
   while len(player_info) &gt; 0:
       print("Please enter a valid player name:")
       name = input("Player name : ")
       if name in player_info.keys():
           print ("Average player goals : ", str(sum(player_info[name].values())/3.0))
           break
   else:
       print("No players found. Please add some first.")
   print()
   mainmenu()
</code></pre>
<p><strong>Update.</strong> To remove recursion you must wrap your menu with an infinite loop (you're exiting with <code>sys.exit</code>, or simply with <code>break</code>, if this is called directly from <code>main</code>):</p>
<pre><code>def mainmenu():
    while True:
        choice = int(input("Enter choice:"))
        if choice == 1:
            addplayers()
        elif choice == 2:
            searchplayer()
        elif choice == 3:
            update()
        elif choice == 4:
            viewall()
        elif choice == 5:
            sys.exit()
        else:
            print("You must make a valid choice - 1, 2 or 3")
</code></pre>
<p>Now you can simply remove all occurrences of calls to <code>mainmenu()</code> from choice handling functions (last line in <code>viewall</code>, <code>update</code>, <code>addplayers</code> and <code>searchplayer</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>your code will work perfectly if your code execute <code>addplayers function first</code> because here is <code>global</code> variable declared. If you want to access other function first than it will sure show you and <code>error</code>. so better you declare the <code>global</code> variable first. I mean in <code>main()</code> as your code described.</p>
<p><strong>Update</strong>: as your below comment.</p>
<p>as your first question <code>global</code> variable worked fine from any sub but <code>python</code> has to know the variable is declared <code>global</code>.</p>
<p>Example from your code: when your program run your just give the choice <code>2</code> for executing <code>searchplayer()</code>. It will run and enter input as you instructed and when time to come access the <code>global player_info</code> it will show an error. Because <code>python</code> has not get yet any <code>global variable</code>. </p>
<pre><code>=====WELCOME to the MAIN MENU=============
1..........Add New Players &amp; Goals
2..........Search by Players (return average goals)
3----------Update Player Goals
4----------View All players
5..........Quit

=========================================

Enter choice: 2
===============SEARCH by player: Calculate average goals==================
Player name :  messi
Traceback (most recent call last):
  File "python", line 91, in &lt;module&gt;
  File "python", line 11, in main
  File "python", line 30, in mainmenu
  File "python", line 83, in searchplayer
NameError: name 'player_info' is not defined
</code></pre>
<p>and I am again saying <code>global</code> variable can access from any sub but <code>python</code> has to know this variable is <code>global</code>. If <code>python</code> know any how the variable is <code>global</code> then you can <code>operate</code> it any where. That's why I was suggesting you to declare the variable as <code>global</code> in the <code>main</code> function. You can declare it anywhere or any function but execute the function first that's why python know the variable is <code>global</code>. I also mentioned that <code>your code will work perfectly</code> and explained it why.</p>
</div>
<span class="comment-copy">"The error suggests player_info is not defined" =&gt; in the code you linked to it is not defined anywhere. "but it has been declared as a global variable"  =&gt; where ?</span>
<span class="comment-copy">It is a global variable in addplayer() and note that it works in searchplayer() perfectly fine ....the problem, as far as I can see, is with the structure of the while loop. I also need it to return to the mainmenu after completing the search AND if the dictionary is empty</span>
<span class="comment-copy">Indeed, I missed it. Note that it still WONT be defined until <code>addplayers()</code> is called (and that <code>addplayers()</code> will overwrite it each time it's called too).</span>
<span class="comment-copy">Thank you - but just cut and paste your searchplayer() and it does not work. <a href="https://repl.it/JRi4/4" rel="nofollow noreferrer">repl.it/JRi4/4</a></span>
<span class="comment-copy">if that's still not is give me a sec, optimizing</span>
<span class="comment-copy">Thanks - I've upvoted and accepted. Would be interested however, if you could extend your answer to also comment on the mainmenu recursive call. What's another method to avoid recursion?</span>
<span class="comment-copy">Thanks - with regard to your suggestion for the loop, I can't make out how it works. Can you edit this and post a repl.it in the comment. Thank you! <a href="https://repl.it/JRi4/2" rel="nofollow noreferrer">repl.it/JRi4/2</a> The idea is that all subs return to mainmenu without a mainmenu call</span>
<span class="comment-copy">"if len(player_info.keys())==0:" is a very complicated (and not specially optmized) way to write "if player_info:" - an empty dict has a false value in a boolean test.</span>
<span class="comment-copy">Will have a look - but please look at the repl.it link in my question. player_info is global in addplayers()</span>
<span class="comment-copy">also is there a way to get it to return to the main menu without the recursive call at the end?</span>
<span class="comment-copy">I tried your solution for searchplayer() and it does not work. Note that player_info is defined as global in addplayer() and it works perfectly fine when used by this same function, when the while loop is not there. <a href="https://repl.it/JRi4/3" rel="nofollow noreferrer">repl.it/JRi4/3</a></span>
<span class="comment-copy">Yes, you can remove <code>mainmenu()</code> call if you insert a <code>while True</code> loop in <code>mainmenu</code> function (wrapping all calls to selection handlers).</span>
<span class="comment-copy">Are you able to post an answer showing how please? <a href="https://repl.it/JRi4/5" rel="nofollow noreferrer">repl.it/JRi4/5</a>  ..on selecting option 2 in this, it NEARLY works, but doesn't print "You need to add player_info" and returns the user to the main menu()</span>
<span class="comment-copy">Isn't a global variable declared in ANY sub, global throughout the program? Are you suggesting it needs to be declared in main()? This cannot be right, as it works fine in searchplayer() without declaring it main. It is only the while loop that I added that seems to skew things and cause this error</span>
<span class="comment-copy">@MissComputing Please check my updated answer for your comment question. Hope this will help.</span>
<span class="comment-copy">Thank you - but it would also work if you simply declared the global variable without the key word "global" outside all the subs right?</span>
<span class="comment-copy">yes but be conscious about redeclaring <code>player_info</code> in scope <code>addplayer</code>. It causes you get empty dictionary in the others scope :)</span>
