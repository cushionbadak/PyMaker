<div class="post-text" itemprop="text">
<p>I am trying to loop through a dict that I received via json and save the results to a database via sqlalchemy. I've kept the field names the same as the key names from the dict. It seems repetitive to list each field and dict over and over. But when I try to use something like c.keys() it does not work. If that were the case I could do:
    for key in c.keys():
        customer.key = c[key]</p>
<p>But that does not work. My current code is:</p>
<pre><code>for c in response['Customers']:
    customer = Customer()
    customer.ID = c['ID']
    customer.Name = c['Name']
    customer.Currency = c['Currency']
    customer.PaymentTerm = c['PaymentTerm']
    customer.Discount = c['Discount']
    customer.TaxRule = c['TaxRule']
    customer.Carrier = c['Carrier']
    session.add(customer)
session.commit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use Python's <a href="https://docs.python.org/2/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a> function, which as per the <a href="https://docs.python.org/2/library/functions.html#setattr" rel="nofollow noreferrer">document</a>:</p>
<blockquote>
<p><strong>setattr(object, name, value)</strong></p>
<p>The arguments are an object, a string and an arbitrary value. The string
  may name an existing attribute or a new attribute. The function
  assigns the value to the attribute, provided the object allows it. </p>
<p>For example, <code>setattr(x, 'foobar', 123)</code> is equivalent to <code>x.foobar = 123</code>.</p>
</blockquote>
<p>Hence you may write your code as:</p>
<pre><code>for c in response['Customers']:
    customer = Customer()
    for key, value in c.items(): 
        setattr(customer, key, value)
        # ^ usage of `setattr(...)` here
    session.add(customer)

session.commit()
</code></pre>
<p>where I am assuming that you have all the properties defined in your class corresponding to the keys present in your <code>dict</code> object <code>c</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpack your dictionaries as arguments</a> to <code>__init__</code>, given that you've not overridden the <a href="http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/api.html#sqlalchemy.ext.declarative.declarative_base.params.constructor" rel="nofollow noreferrer">default constructor provided by Declarative</a> that does exactly what the other answer does; it sets the attributes from the keyword arguments:</p>
<pre><code>for c in response['Customers']:
    session.add(Customer(**c))

session.commit()
</code></pre>
</div>
<span class="comment-copy">what error happens with <code>c.keys() </code> ?</span>
<span class="comment-copy">You should be able to go the other way: <code>for key in c.keys(): setattr(customer, key, c[key])</code>, something like that... or try <code>dir(customer)</code>, that may give you more than you wanted though...</span>
<span class="comment-copy">also, it looks like if you really want the keys, i can't guarantee this is stable, but <code>customer._sa_instance_state.attrs.keys()</code> looks like it will give them to you as well....</span>
<span class="comment-copy">Corley using <code>for key in c.keys(): setattr(customer, key, c[key])</code> worked perfectly thanks!</span>
