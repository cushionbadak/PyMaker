<div class="post-text" itemprop="text">
<p>I would like to get a percentage from initial values based on results, but only for result greater than 100, otherwise return initial value. At the moment there is a check for both results <code>if all(results) &gt;= 100</code> and if I add a filter to generator expression <code>(i*percent/100 for i in results if i &gt;= 100)</code>, variable assignment will fail. In summary, it should skip calculation if result is less than 100 but run otherwise, so if results are (500, 0) function should return (250, 75). What would be the pythonic way to do this?</p>
<pre><code>total = 150
user_total = 75

def test01(results=(500, 0)):
    if all(results) &gt;= 100:
        percent = 50
        total, user_total = (i*percent/100 for i in results)
    return (total, user_total)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> function returns a Boolean value, so <code>all(results) &gt;= 100</code> doesn't do what you want. As <code>bool</code> is a subclass of <code>int</code> in Python, the comparison won't raise an exception in either Python 2 or Python 3.</p>
<p>The proper way would be to use a generator expression as an argument to <code>all()</code>. Also, you could make <code>total</code>  and <code>user_total</code> keyword arguments if they're only used in the function:</p>
<pre><code>def test01(results=(500, 0), total=150, user_total=75):
    if all(x &gt;= 100 for x in results):
        percent = 50
        total, user_total = (i*percent/100 for i in results)
    return total, user_total
</code></pre>
<p><strong>Update</strong>: if you want to skip calculation if a result is less than 100, you could use a generator with a ternary operator:</p>
<pre><code>def test01(results=(500, 0), defaults=(150, 75)):
    percent = 50
    total, user_total = (results[i]*percent/100 if results[i] &gt;= 100 
                         else defaults[i] for i in [0, 1])
</code></pre>
<p>Or with <code>zip()</code>:</p>
<pre><code>def test01(results=(500, 0), defaults=(150, 75)):
    percent = 50
    total, user_total = (r*percent/100 if r &gt;= 100 else d
                         for r, d in zip(results, defaults))
</code></pre>
</div>
<span class="comment-copy"><code>all(results) &gt;= 100</code> does not do what you think it does.</span>
<span class="comment-copy">Thanks, that was my bad but I would like to actually skip percentage calculation and return initial value for <code>total</code> or <code>user_total</code> if result is equal to zero.</span>
<span class="comment-copy">It looks like I didn't explain this well. It should skip calculation if result is less than 100 but run otherwise, so if results are (500, 0) function should return (250, 75).</span>
<span class="comment-copy">@HTF: does the updated version do what you want to achieve?</span>
<span class="comment-copy">That's perfect, I just added <code>enumerate()</code> - <code>else item for i, item in enumerate(defaults)</code></span>
<span class="comment-copy">Cool. BTW, you can also use <code>zip()</code> in the generator expression.</span>
