<div class="post-text" itemprop="text">
<p>In the documentation on <a href="https://docs.python.org/3/library/constants.html" rel="nofollow noreferrer">built-in constants</a> (excluding <code>site</code> constants) it's stated that:</p>
<blockquote>
<p>Note: The names <code>None</code>, <code>False</code>, <code>True</code> and <code>__debug__</code> cannot be reassigned (assignments to them, even as an attribute name, raise <code>SyntaxError</code>), so they can be considered “true” constants.</p>
</blockquote>
<p>If I'm not mistaken, <code>True</code> and <code>False</code> became "true" contants in Python 3. (As also described in the duplicate.)</p>
<p>Question is, why aren't the other two (<code>Ellipsis</code>, <code>NotImplemented</code>) "true" contants? Is there a use case for re-assigning these (<code>numpy</code> with <code>Ellipsis</code> perhaps?) that has exempted them from this limitation?</p>
<p>Exacerbating my confusion, in the documentation for <a href="https://docs.python.org/3/library/stdtypes.html#the-null-object" rel="nofollow noreferrer">standard library types</a>, both the <code>Ellipsis</code> and <code>NotImplemented</code> types are, behaviorally, identical to the <code>None</code> type. Namely:</p>
<ul>
<li>They are singletons</li>
<li>They don't support special operations.</li>
</ul>
<hr/>
<p>This question is not related to the proposed duplicate: <a href="https://stackoverflow.com/questions/18050815/why-were-true-and-false-changed-to-keywords-in-python-3">Why were True and False changed to keywords in Python 3</a>. It asks something completely different, namely, why <code>Ellipsis</code> and <code>NotImplemented</code> <em>are not "true" constants</em> and <em>not</em> why <code>True</code> and <code>False</code> where changed into ones.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can assign to any valid identifier that is not a keyword. What is special about <code>True</code>, <code>False</code>, <code>None</code> is that they are <em>both</em> keywords and identifiers. You can read about the reasoning for that in this question: </p>
<p><a href="https://stackoverflow.com/questions/18050815/why-were-true-and-false-changed-to-keywords-in-python-3">Why were True and False changed to keywords in Python 3</a></p>
<p>Builtins such as <code>NotImplemented</code> or <code>Ellipsis</code> are not special cases, and neither are <code>int</code>, <code>list</code>, <code>type</code> and so on. Assigning to <code>NotImplemented</code> doesn't change the builtin constant. Instead you bind the name <code>Ellipsis</code> to a different value in the current scope. The original <code>Ellipsis</code> is not changed.</p>
<p>Assigning to a keyword is a SyntaxError. </p>
<p>You can see the list of keywords by importing the <code>keywords</code> module.</p>
<pre><code>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.kwlist

['False',
 'None',
 'True',
 'and',
 'as',
 'assert',
 'break',
 'class',
 'continue',
 'def',
 'del',
 'elif',
 'else',
 'except',
 'finally',
 'for',
 'from',
 'global',
 'if',
 'import',
 'in',
 'is',
 'lambda',
 'nonlocal',
 'not',
 'or',
 'pass',
 'raise',
 'return',
 'try',
 'while',
 'with',
 'yield']
</code></pre>
<p>There are lots of builtin identifiers that are not in this list, and you can assign new values to <code>int</code>, <code>Ellipsis</code> etc. </p>
<p><code>...</code> is a special case, since it's not a valid identifier name in the first place, so it would be impossible to assign to. </p>
<p>Python keeps the list of reserved keywords quite short, compared to many other languages. One reason is probably to keep backwards compatibility with code that for some reason used identifiers such as <code>Ellipsis</code> before it became part of the language.</p>
</div>
<span class="comment-copy">So here's my opinion: there is definitely no use case for overwriting <b>any</b> builtin object. Any such code should be treated as dangerous. On the other hand making them all keywords would make it harder to maintain (on the C side). So I guess its a matter of the evolution of Python. Also <code>None</code>, <code>False</code> and <code>True</code> are used all the time so there's a special focus on them.</span>
<span class="comment-copy">Funny enough, <code>Ellipsis = 2</code> is alright, but <code>... = 2</code> raises <code>SyntaxError: can't assign to Ellipsis</code>.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/constants.html" rel="nofollow noreferrer">Python Built-in Constants</a></span>
<span class="comment-copy">@AChampion You are wrong. <code>True</code>, <code>False</code> and <code>None</code> are <b>keywords</b> in Python3+. That's why it's a <b>SyntaxError</b> when trying to assign to them. There is no concept of constantness in Python. It's a meaningless word in Python.</span>
<span class="comment-copy">@freakish those are just words and don't mean anything - or you would also accept: <a href="https://docs.python.org/3.5/library/constants.html" rel="nofollow noreferrer">docs.python.org/3.5/library/constants.html</a>, <code>a = True</code> is meaningful as in <code>True</code> has a value - in fact a constant value.</span>
<span class="comment-copy">I understand that assigning to keywords is not allowed. The question isn't about why it is an error to assign to <code>True</code>, rather, it's why <code>Ellipsis</code> and <code>NotImplemented</code> are specified as "constants" when they are assignable. Backwards compatibility is an issue, of course, but the transition from 2 to 3 would allow such a change, as was done with <code>True</code> and <code>False</code>.</span>
<span class="comment-copy">Yes, I understand how binding works too. This still does not answer <i>why</i> you can re-bind (assign to) the aforementioned names.</span>
<span class="comment-copy">Because there's nothing special about those names. There just like any other non-keyword identifier in Python.</span>
<span class="comment-copy">@BobHolver: You can consider <code>True</code> and <code>False</code> to have changed from constants to boolean literals.</span>
<span class="comment-copy">@BobHolver I think your answer is in the last paragraph - "Python keeps the list of reserved keywords quite short". Things are only made into keywords when there is a compelling reason to do so.</span>
