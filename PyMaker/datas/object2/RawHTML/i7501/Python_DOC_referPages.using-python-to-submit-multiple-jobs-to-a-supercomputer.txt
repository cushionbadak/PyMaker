<div class="post-text" itemprop="text">
<p>I am currently using a supercomputer for various quantum mechanical calculations. There are a large number of files I need to submit at any given time (280 separate submisions).  I am trying to use python to automate this process but have little experience with using python to run a separate submission script.  The submission script I am using (named subOrca_mpi.sh) is:</p>
<pre><code>#!/bin/bash
string=".inp"
root="${1%$string}"

#if [ -z $1 ]
#then
#  echo 'Usage: subGamess.sh &lt;jobinput&gt;'
#  exit 1
#fi

#if [ ! -f ./$root.inp ]
#then
#  echo '&lt;jobinput&gt; does not look like an Orca input \(*.inp\)'
#  exit 1
#fi

if [ -f $root.slurm ]
then
   rm $root.slurm
fi

echo '#!/bin/bash'&gt;&gt;$root.slurm
echo '#SBATCH --job-name='$root&gt;&gt;$root.slurm
echo '#SBATCH --output='$root'.out'&gt;&gt;$root.slurm
echo '#SBATCH --nodes=1'&gt;&gt;$root.slurm
echo '#SBATCH --ntasks-per-node=12 '&gt;&gt;$root.slurm
echo '#SBATCH --time=0-48:00:00 '&gt;&gt;$root.slurm
echo '#SBATCH --cluster=smp'&gt;&gt;$root.slurm

echo 'cd $SBATCH_O_WORKDIR'&gt;&gt;$root.slurm
echo 'module purge'&gt;&gt;$root.slurm
echo 'module load orca/3.0.3'&gt;&gt;$root.slurm

echo 'files=('&gt;&gt;$root.slurm
echo  $root'.inp'&gt;&gt;$root.slurm
echo ')'&gt;&gt;$root.slurm
echo 'for i in ${files[@]}; do'&gt;&gt;$root.slurm
echo '     sbcast $SLURM_SUBMIT_DIR/$i $SLURM_SCRATCH/$i'&gt;&gt;$root.slurm
echo 'done'&gt;&gt;$root.slurm

echo 'export LD_LIBRARY_PATH=/usr/lib64/openmpi-
1.10/lib:$LD_LIBRARY_PATH'&gt;&gt;$root.slurm
echo 'export PATH=/usr/lib64/openmpi-1.10/bin:$PATH'&gt;&gt;$root.slurm

echo 'cd $SLURM_SCRATCH'&gt;&gt;$root.slurm

echo '$(which orca) '$root'.inp'&gt;&gt;$root.slurm
echo 'cp $SLURM_SCRATCH/*.{gbw,prop} $SLURM_SUBMIT_DIR'&gt;&gt;$root.slurm

sbatch $root.slurm

exit
</code></pre>
<p>From what I've been told, I will need to import os, but I'm essentially lost from there. The only code I have thus far is:</p>
<pre><code>import os
import glob
def orcasubmit():
    for filename in glob.glob('*.inp'):
        #execute subOrca_mpi.sh for all input files in given folder

orcasubmit()
</code></pre>
<p>Any input would be incredibly helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>You've two alternatives here. The first one, as you've probably guessed, is using <a href="https://docs.python.org/2/library/os.html#os.system" rel="nofollow noreferrer"><code>os.system</code></a>. You can do that like this:</p>
<pre><code>for filename in glob.glob('*.inp'):
    os.system('./' + filename) # assuming these files lie in the same directory
</code></pre>
<p>Alternatively, you may use the <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen</code></a> module, and I recommend this one. </p>
<pre><code>from subprocess import Popen
for filename in glob.glob('*.inp'):
    process = Popen(['/bin/bash', filename])
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html</a> This is the module you need.</span>
<span class="comment-copy">Thank you. I'll take a look at this.</span>
<span class="comment-copy"><code>subprocess.check_output()</code> is probably enough for the OP and somewhat easier to grasp/use.</span>
<span class="comment-copy">@Anthon Won't that block till the command runs? OP would want this to dispatch in the background. This would do nicely.</span>
<span class="comment-copy">I'm going to give the first option a try and see how that works. Thank you</span>
<span class="comment-copy">@celani99 Sure, if it helps/doesn't, let me know. Thanks.</span>
<span class="comment-copy">@coldspeed, I will.</span>
