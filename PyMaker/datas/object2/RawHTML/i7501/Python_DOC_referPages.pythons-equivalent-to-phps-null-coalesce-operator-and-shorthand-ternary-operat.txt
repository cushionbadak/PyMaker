<div class="post-text" itemprop="text">
<p>I was looking here and couldn't find anything: <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer">https://docs.python.org/3/library/operator.html</a></p>
<p>Two examples of PHP that come in handy a lot:</p>
<pre class="lang-php prettyprint-override"><code>echo $count ?: 10; //prints $count if $count is not empty string, null, false or 0, otherwise prints 10.

echo $a ?? $b ?? 7; //prints $a if $a is defined and not null, otherwise will print $b, otherwise 7
</code></pre>
<p>Are there equivalent operators in Python? Note:</p>
<pre><code>a if condition else b
</code></pre>
<p>does not really replace the shorthand ternary operator, because condition and return value are specified in one element in PHP in the shorthand version.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>or</code> operator returns the first truth-y value. </p>
<pre><code>a = 0
b = None
c = 'yep'

print(a or 'nope')
print(b or 'nope')
print(c or 'nope')
print(b or c or 'nope')
&gt; nope
&gt; nope
&gt; yep
&gt; yep
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python there is a way to do ternary operations:</p>
<pre><code>print((b, a)[a])  # if a: prints a; otherwise prints b
</code></pre>
<h3>Explanation</h3>
<p>The options are in a tuple : <code>(b, a)</code> the [condition] will determine either we call element at rank 0 (condition is false) or 1 in the tuple (condition is true).</p>
<h3>Examples</h3>
<pre><code>a = False
b = "youpi"
print((b, a)[a])
# youpi

condition = "Thirsty"
print(("Foo" , "Bar")[condition == "Thirsty"])
# Bar
</code></pre>
</div>
<span class="comment-copy"><code>a or b</code> evaluates to <code>a</code> if <code>a</code> is truthy, <code>b</code> otherwise. Not exactly the same but effective in many cases.</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0505/" rel="nofollow noreferrer">python.org/dev/peps/pep-0505</a></span>
<span class="comment-copy">@Toskan: Asking for something that works with undefined variables… it's just not going to happen. In Python, using an undefined variable will raise an exception. If you want to avoid that, somehow, you're going to need to write a bunch of boilerplate.  Or you could just initialize your variables to <code>None</code>.</span>
<span class="comment-copy">@Toskan: It’s an error in other languages too—just try to use the null coalescing operator in C#, Swift, or Kotlin and you'll find that it simply doesn't work with undefined variables. Python works the same way, it's simply not designed to make it easy to work with undefined variables, if you want a null value use <code>None</code> instead of undefined.</span>
<span class="comment-copy">If I'm going to be perfectly honest here, Python seems to be doing a pretty good job of doing exactly what you want to do (use <code>.get()</code> or whatever), but your primary complaint seems to be that Python doesn't work the same way PHP does, which isn't really an actionable complaint.</span>
<span class="comment-copy">@Toskan: Yes it does. If <code>a</code> is undefined, <code>True or a</code> is still <code>True</code>. But using undefined variables in Python is not very idiomatic, so you will run into issues elsewhere.</span>
<span class="comment-copy">which probably is better any way. Even though there are exceptions. It's not a common thing or a good thing in php anyway. But there are use cases when reusing templates in different work flows where you don't want to refactor all calls to the template itself. Then I guess that or operator comes in handy</span>
<span class="comment-copy">actually no, undefined will still throw an error in this case. Which would make you force to check <code>a</code> for existence and if not, setting None to it. Waste of time and I consider hand holding the programming language... unless I am overlooking something</span>
<span class="comment-copy">Also, <code>!a</code> isn't even valid Python...</span>
<span class="comment-copy">Although, <code>(a,b)[not a]</code> works very well</span>
<span class="comment-copy">can you give a simple example? a complete one! with strings for example</span>
<span class="comment-copy">edited to suit your wishes</span>
<span class="comment-copy">@tobias_k it is 69% (9/13*100) shorter so yes it looses in readability. Besides, i don't see your point concerning repeating a, don't you ?</span>
