<div class="post-text" itemprop="text">
<p>From what I understand in order to initialize a array you would call something like this:</p>
<pre><code>from array import *
array_example = array([type of some sort],[entries into the array])
</code></pre>
<p>where <strong>type of some sort</strong> could be anything such as an integer. My question is if there is any way for me use a data structure I have defined(Letter) and use that type when initializing an array.</p>
<p>Here is what I tried:</p>
<pre><code>x = Letter('A')
i = type(x)
array = array(i,[x])
</code></pre>
<p>where I then get the following error:</p>
<p><em>builtins.TypeError: array() argument 1 must be a unicode character, not type</em></p>
<p>Sorry if it's a stupid question</p>
<pre><code>class Letter:

    def __init__(self, letter):
        """
        -------------------------------------------------------
        Initialize a Letter object.
        Use: l = Letter(char)
        -------------------------------------------------------
        Preconditions:
            letter - an single uppercase letter of the alphabet (str)
        Postconditions:
            Letter values are set.
        -------------------------------------------------------
        """
        assert letter.isalpha() and letter.isupper(), "Invalid letter"

        self.letter = letter
        self.count = 0
        self.comparisons = 0
        return

    def __str__(self):
        """
        -------------------------------------------------------
        Creates a formatted string of Letter data.
        Use: print(m)
        Use: s = str(m)
        -------------------------------------------------------
        Postconditions:
            returns:
            the value of self.letter (str)
        -------------------------------------------------------
        """
        return "{}: {}, {}".format(self.letter, self.count, self.comparisons)

    def __eq__(self, rs):
        """
        -------------------------------------------------------
        Compares this Letter against another Letter for equality.
        Use: l == rs
        -------------------------------------------------------
        Preconditions:
            rs - [right side] Letter to compare to (Letter)
        Postconditions:
            returns:
            result - True if name and origin match, False otherwise (boolean)
        -------------------------------------------------------
        """
        self.count += 1
        self.comparisons += 1
        result = self.letter == rs.letter
        return result

    def __lt__(self, rs):
        """
        -------------------------------------------------------
        Determines if this Letter comes before another.
        Use: f &lt; rs
        -------------------------------------------------------
        Preconditions:
            rs - [right side] Letter to compare to (Letter)
        Postconditions:
            returns:
            result - True if Letter precedes rs, False otherwise (boolean)
        -------------------------------------------------------
        """
        self.comparisons += 1
        result = self.letter &lt; rs.letter
        return result

    def __le__(self, rs):
        """
        -------------------------------------------------------
        Determines if this Letter precedes or is or equal to another.
        Use: f &lt;= rs
        -------------------------------------------------------
        Preconditions:
            rs - [right side] Letter to compare to (Letter)
        Postconditions:
            returns:
            result - True if this Letter precedes or is equal to rs,
              False otherwise (boolean)
        -------------------------------------------------------
        """
        self.comparisons += 1
        result = self.letter &lt;= rs.letter
        return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the documentation shows, an array can only contain basic types - integers, bytes, etc.</p>
<p>But there doesn't seem to be any reason why you can't just use a list here.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you can see in the <a href="https://docs.python.org/2/library/array.html" rel="nofollow noreferrer">docs</a> a python <code>array</code> can only hold numerical values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>array</code>s can be used with a limited set of predefined types. You cannot use them with custom types. The first argument is indeed a single character, and it specifies which of the allowed types the array will contain. See <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As pointed out by in the other answers, the <code>array</code> only works with certain pre-defined types. That means you cannot use it for types/classes you define yourself. Most of the time, there is no reason for using an array, but if you feel that you absolutely need it, you can use a <code>numpy.array</code>:</p>
<pre><code>import numpy as np

x = Letter('A')
my_array = np.array([x]) # array is a bad name
</code></pre>
<p>This of course requires <code>numpy</code> to be installed and all your elements will be stored as general <code>object</code>s in the array.</p>
</div>
