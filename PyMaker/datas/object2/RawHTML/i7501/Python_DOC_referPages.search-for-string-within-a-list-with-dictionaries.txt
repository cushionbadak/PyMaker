<div class="post-text" itemprop="text">
<p>-- EDIT:</p>
<p>Okay thanks to you guys, and especially randomir I adjusted the loop as follows:</p>
<pre><code>while buy_active &gt; 0 or balance_available &gt; 0 or i &lt;= 0:
        print('Selling {0} {1} for {2:.8f} {3}. Volume: {4} It {5}'.format(balance_available, currency, coinprice_sell, trade, coinvolume, i))
        api.selllimit(market, balance_available, coinprice_sell)

        open_order = api.getopenorders(market)
        buy_active = len(list(filter(partial(eq, "LIMIT_BUY"),
                                map(itemgetter("OrderType"), open_order)))) &gt; 0

        coinbalance = api.getbalance(currency)
        balance_available = coinbalance['Available']  # You still have some coins available
        coinsummary = api.getmarketsummary(market)
        coinprice = coinsummary[0]['Last']
        coinvolume = coinsummary[0]['Volume'] * coinprice
        i += 1
else:
        print('No open Buy order or remaining quantity')
</code></pre>
<p>Now this codes runs almost all the time perfectly but once in a while I receive an error (which I do not know how to replicate, since it probably depends on what the API transmits to the program.</p>
<p>The error says: </p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 76, in &lt;module&gt;
    while buy_active &gt; 0 or balance_available &gt; 0 or i &lt;= 0:
TypeError: '&gt;' not supported between instances of 'NoneType' and 'int'
</code></pre>
<p>So I interpret the error that sometimes the variable buy_active has no type and hence cannot be interpreted with "&gt;". However, I do not see how this can happen. It probably has something to do with the len(list(filter(... approach. I also tried to define buy_active = 1 so it enters the loop at least once. But this does not solve the problem. Hence I guess this operator sometimes deliveres a NoneType character.</p>
<p>Does anybody has a suggestion what the problem could be?</p>
<p>Best
SaltyJ</p>
<hr/>
<p>Original:</p>
<p>I just started programming in python 2.7 (for this particular code I would like to stay on 2.7) where I encountered a problem. Since I am very new to programming, I cannot figure out how to solve my problem. I hope you can help.</p>
<p>I want to handle some input from an API about my open orders at an online exchange.</p>
<p>Over the API I receive a list with nested dictionnaries. One Example (for 2 orders is below).</p>
<pre><code>{
    "success" : true,
    "message" : "",
    "result" : [{
            "Uuid" : null,
            "OrderUuid" : "09aa5bb6-8232-41aa-9b78-a5a1093e0211",
            "Exchange" : "BTC-LTC",
            "OrderType" : "LIMIT_SELL",
            "Quantity" : 5.00000000,
            "QuantityRemaining" : 5.00000000,
            "Limit" : 2.00000000,
            "CommissionPaid" : 0.00000000,
            "Price" : 0.00000000,
            "PricePerUnit" : null,
            "Opened" : "2014-07-09T03:55:48.77",
            "Closed" : null,
            "CancelInitiated" : false,
            "ImmediateOrCancel" : false,
            "IsConditional" : false,
            "Condition" : null,
            "ConditionTarget" : null
        }, {
            "Uuid" : null,
            "OrderUuid" : "8925d746-bc9f-4684-b1aa-e507467aaa99",
            "Exchange" : "BTC-LTC",
            "OrderType" : "LIMIT_BUY",
            "Quantity" : 100000.00000000,
            "QuantityRemaining" : 100000.00000000,
            "Limit" : 0.00000001,
            "CommissionPaid" : 0.00000000,
            "Price" : 0.00000000,
            "PricePerUnit" : null,
            "Opened" : "2014-07-09T03:55:48.583",
            "Closed" : null,
            "CancelInitiated" : false,
            "ImmediateOrCancel" : false,
            "IsConditional" : false,
            "Condition" : null,
            "ConditionTarget" : null
        }
    ]
}
</code></pre>
<p>The API produces a list with one dictionnary for every open order. </p>
<p>Now I want to basically make my code go through all dic. looking for the string "LIMIT_BUY".</p>
<p>My current code does this for up to 2 orders. But it is probably highly inefficient and also cannot cope with orders &gt; 2:</p>
<p>At the end of the loop the buy_active variable should  be "1" if there is any buy order or 0 if there is no order or only selling orders.</p>
<pre><code>if len(open_order) == 2:
            order_type_1 = open_order[0]['OrderType']
            order_type_2 = open_order[1]['OrderType']
            if order_type_1 == 'LIMIT_BUY' or order_type_2 == 'LIMIT_BUY':
                buy_active = 1
            else:
                buy_active = 0

        elif len(open_order) == 1:
            order_type_1 = open_order[0]['OrderType']
            if order_type_1 == 'LIMIT_BUY':
                buy_active = 1
            else:
                buy_active = 0
        else:
            buy_active = 0
</code></pre>
<p>What I would like is a most efficient (in terms of time) code to look through the list with any number of entries.</p>
<p>Can somebody help me?:)</p>
<p>Thanks alot! I just started coding 4 days ago, so please be nice :)</p>
<p>Best
SaltyJ</p>
</div>
<div class="post-text" itemprop="text">
<p>Welcome to the wonderful art of coding!</p>
<p>You've encountered your first repetitive task so it seems. This might be the time to look into <a href="https://docs.python.org/2/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">for-loops</a> or <a href="https://docs.python.org/2/reference/compound_stmts.html#while" rel="nofollow noreferrer">while-loops</a>. They allow you to repeat tasks.</p>
<p>For example, though greatly simplified:</p>
<pre><code>mylist = [1,2,3]
# Your way:
print mylist[0]
print mylist[1]
print mylist[2]
# This works, but gets tedious if your list grows.

# This is way more concise:
for i in mylist:
    print i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer">any()</a> function and list comprehension (to filter the list).
The list comprehension, creates a new list of True values, when  "OrderType" equals "LIMIT_SELL".</p>
<pre><code>import json
data = json.loads("""{
    "success" : true,
    "message" : "",
    "result" : [{
            "Uuid" : null,
            "OrderUuid" : "09aa5bb6-8232-41aa-9b78-a5a1093e0211",
            "Exchange" : "BTC-LTC",
            "OrderType" : "LIMIT_SELL",
            ....
""")

buy_active = any([True for item in data['result'] if item['OrderType'] == 'LIMIT_BUY' ])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This would be the <strong>imperative programming</strong> approach, simply looping over values in <code>open_order</code> list:</p>
<pre><code>buy_active = False
for order in open_order:
    if order.get("OrderType") == "LIMIT_BUY":
        buy_active = True
        break
</code></pre>
<p>We use a <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer"><code>for</code> loop</a> to iterate over items in the list, and then we <a href="https://docs.python.org/2/library/stdtypes.html#dict.get" rel="nofollow noreferrer">safely inspect</a> each item (which is a dictionary) - to see if it contains a key <code>OrderType</code>, and if does, is it equal to <code>LIMIT_BUY</code>. When we find the first such item, we set <code>buy_active</code> to <code>True</code>, and abort any further processing (we know there is at least one item, so no point in looping over other items).</p>
<p>And this would be the <strong>functional programming</strong> approach:</p>
<pre><code>from operator import itemgetter, eq
from functools import partial

buy_active = len(filter(partial(eq, "LIMIT_BUY"),
                        map(itemgetter("OrderType"), open_order))) &gt; 0
</code></pre>
<p>The boolean variable <code>buy_active</code> will be <code>True</code> if at least one <code>LIMIT_BUY</code> was found as a value for <code>OrderType</code>, same as in previous approach.</p>
<p>Here we use the built-in function called <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> to evaluate function <code>itemgetter("OrderType")</code> over each item in <code>open_order</code> collection of dictionaries. The <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter</code></a> will extract <code>"OrderType"</code> from each dictionary, and the result of the mapping will be a list of all <code>OrderType</code>s, like this: <code>["LIMIT_SELL", "LIMIT_BUY", ...]</code>.</p>
<p>We now apply <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> on that list, and with <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="nofollow noreferrer">partially</a> applied <a href="https://docs.python.org/2/library/operator.html#operator.eq" rel="nofollow noreferrer"><code>eq</code></a> operator we check if any of the items is equal to <code>"LIMIT_BUY"</code>. That filters-out all that are not, producing a list: <code>["LIMIT_BUY", ...]</code>.</p>
<p>After that, we simply check the length of the list, and declare <code>buy_active</code> is <code>True</code> if the list is not empty.</p>
</div>
<span class="comment-copy"><code>if len(open_order) == 2:</code> can be changed to <code>if len(open_order)</code> to cover all dictionaries.   further, you can use a <code>loop</code> to go over every dictionary and store the result in a <code>list</code></span>
<span class="comment-copy">thank you very much!</span>
<span class="comment-copy">Thank you, I implemented the approach of Randomir. Do you think the code you provided is more efficient in computing time?</span>
<span class="comment-copy">It's just a one-liner :) As long as you don't have millions of orders it doesn't matter much in terms of speed.</span>
<span class="comment-copy">Great, this works perfectly! Thank you, I learned alot following your logic!</span>
<span class="comment-copy">You're welcome, I'm glad to hear that.</span>
<span class="comment-copy">I just switched the code to python 3.6 (from 2.7) and now I receive an error code Traceback (most recent call last):   File "test.py", line 75, in &lt;module&gt;     map(itemgetter("OrderType"), open_order))) &gt; 0 TypeError: object of type 'filter' has no len()</span>
<span class="comment-copy">That's because in Python 3, <code>filter</code>, <code>map</code>, etc. return an iterator, instead of list. You can expand it to a list with <code>list</code>, like this: <code>list(filter(...))</code>.</span>
<span class="comment-copy">thank you! I am sorry for being so incompetent but now the code "buy_active = len(list(filter(partial(eq, "LIMIT_BUY"))," returns the following error : buy_active = len(list(filter(partial(eq, "LIMIT_BUY")), TypeError: filter expected 2 arguments, got 1 .</span>
