<div class="post-text" itemprop="text">
<p>When I try to do what question is about using:</p>
<pre><code>parser.add_argument("--blah", type=func, help="Whatever", action='store_true')
</code></pre>
<p>...I get this error:</p>
<pre><code>TypeError: __init__() got an unexpected keyword argument 'type'
</code></pre>
<p>All I really want is to run a function named func (specified as argument type above) when this flag is used on commandline like so:</p>
<pre><code>python3 script.py --blah
</code></pre>
<p>Is that possible somehow? Please let me know if I need to be more detailed with my question.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can call your function after parsing arguments</p>
<p><code>parser.add_argument("--blah", help="Whatever", action='store_true')</code></p>
<p><code>args = parser.parse_args()</code></p>
<p>and then check for flag value and call function appropriately</p>
<pre><code>if args.blah:
     func()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>type</code> parameter is meant to be a function that is tests and/or converts the commandline argument into something that will be stored in the <code>args</code> namespace.</p>
<pre><code>parser.parse_args('--foo', type=int)  # default store action
</code></pre>
<p>will convert <code>['--foo','123']</code> into <code>Namespace(foo=123)</code>, as opposed to <code>foo='123'</code>.</p>
<p>But <code>action='store_true'</code> creates a True/False argument.  It doesn't take an argument after the flag.  So it's meaningless to give it a <code>type</code> parameter.    Admittedly the error message could be clearer, but this sort of error doesn't come up that often.  And it's a development problem, not a runtime one.</p>
<p>As others have pointed out, you can use the <code>True/False</code> value of <code>args.blah</code> to conditionally run your <code>func</code> after parsing. </p>
<p>When do you want <code>func</code> to be run?  After it's parsed all of the commandline?  Or while it is still parsing?  I prefer to separate parsing from running.  Use <code>argparse</code> to figure out what your user wants; use your own code to perform the action(s) after.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import argparse

def func():
    pass

def main(args):

    ############### Parsed command line arguments to initialize variables ######################

    blah = args.blah
    if blah:
        func()

def get_parser():

    ### Command line input parsing here. ###########
    parser = argparse.ArgumentParser(prog='python ' + sys.argv[0], description='This program does blah!')
    parser.add_argument("-blah", , help='Run func',default= False, action='store_true')

if __name__ == "__main__":

    parser = get_parser() 
    args = parser.parse_args()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way to do that:</p>
<pre><code>from argparse import Action

class CleanUpAction(Action):
    '''
    @summary: Clean up the arguments
    '''

    def __call__(self, parser, args, values, option_string=None):
        if values.startswith('\'') and values.endswith('\''):
            values = values[1:-1]
        setattr(args, self.dest, values)

parser.add_argument('-blah', '--blah', type=str, action=CleanUpAction, help='clean up the argument')
</code></pre>
<p>This way it gets stored after the cleanup execution</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html#type</a> It seems <code>action</code> and <code>type</code> are conflicting arguments to this function.</span>
<span class="comment-copy">@Coldspeed So, what's the alternative?</span>
<span class="comment-copy">You could do this: <code>parser.add_argument("--blah",  help="Whatever", action='store_true') ; args = parser.parse('...'); if args.blah: func()</code> Similar to what @SunnyAggarwal posted.</span>
<span class="comment-copy"><code>if args['blah']:</code> -- I doubt that's a valid syntax. Did you mean <code>if args == 'blah'</code>?</span>
<span class="comment-copy">Ya, my bad arguments can be accessed by attribute type access using dot</span>
<span class="comment-copy">Thanks, I think your answer solves my problem.</span>
<span class="comment-copy">Thanks for such an insightful answer. As for the questions you asked -- I want to run <code>func</code> like so from command line: <code>python script.py --blah</code> i.e. after parsing is done.</span>
<span class="comment-copy">I don't understand what you mean by clean up the arguments. Can you explain a bit?</span>
<span class="comment-copy">that was just a sample function to demonstrate</span>
