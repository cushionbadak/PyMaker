<div class="post-text" itemprop="text">
<p>So I am currently learning about looping in strings, using "for".</p>
<p>I am trying to make a censoring function (sansur), which will turn all "m"s in a word into "*"s.</p>
<pre><code>word = "Programming is fun!"


def sansur(hmm):
    for harf in hmm:
        if harf == "m":
            harf = "*"



deneme = sansur(word)
print deneme
</code></pre>
<p>If I do it like this, it just prints "none", but if I do it manually without a function like this, it works.</p>
<pre><code>for harf in word:
    if harf == "m":
        harf = "*"

    print harf    
</code></pre>
<p>I think my problem is because of the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>def sansur(hmm):
    return hmm.replace('m','*')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable in Python. That means you can not change it, but you have to create a new one!</p>
<p>So, you would have to rewrite it like this:</p>
<pre><code>def process(msg):
    result = ""
    for ch in msg:
        if ch == "m":
            result += "*"
        else:
            result += ch
    return result
</code></pre>
<p>It inefficient, but close to your original. To test it:</p>
<pre><code>&gt;&gt;&gt; process("Programming is fun!")
'Progra**ing is fun!'
</code></pre>
<p>However, when you wish to "map" each element of a sequence to a new one, like we're doing above, you can use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>&gt;&gt;&gt; word = "Programming is fun!"
&gt;&gt;&gt; "".join(map(lambda c: "*" if c == "m" else c, word))
'Progra**ing is fun!'
</code></pre>
<p>Or, in a function:</p>
<pre><code>def process(msg):
    return "".join(map(lambda c: "*" if c == "m" else c, msg))
</code></pre>
<p>But, for a simple character translation like this, it's much better to use <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace()</code></a>:</p>
<pre><code>&gt;&gt;&gt; word.replace("m", "*")
'Progra**ing is fun!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>More in line with your original code:</p>
<pre><code>word = "Programming is fun!"

def sansur(hmm):
    x = []
    for harf in hmm:
        if harf == "m":
            x.append("*")
        else:
            x.append(harf)
    return ''.join(x)


deneme = sansur(word)
print(deneme)
</code></pre>
<p>Basically, strings are immutable, so you aren't changing anything. Instead, I just appended the appropriate character to a new list based on your test, and then converted that list back to a string and returned it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main problem in your program is that you're not returning anything from that function.  Functions that complete without a return statement have a return value of <code>None</code>.  </p>
<p>Even if you corrected that, it would not work.  The problem now is that you you're replacing the <code>for</code> variable, and not the actual position on the string.  When you do <code>for harf in hmm:</code>, harf becomes a copy of each  character on the string.  You then replace that copy, which gets lost on the next iteration.</p>
<p>You could change your implementation to put the <code>print</code> call right after the <code>if</code>:</p>
<pre><code>def sansur(hmm):
    for harf in hmm:
        if harf == "m":
            harf = "*"
        print harf
</code></pre>
<p>However, as you're studying loops for strings, what you probably want is to aggregate the characters in a return variable, and then return it.</p>
<p>Here's a reimplementation:</p>
<pre><code>#!/usr/bin/env python

word = "Programming is fun!"

def sansur(hmm):
    ret = ""
    for harf in hmm:
        if harf == "m":
            ret += "*"
        else:
            ret += harf
    return ret

deneme = sansur(word)
print deneme
</code></pre>
<p>Which prints</p>
<p>Progra**ing is fun!</p>
</div>
<div class="post-text" itemprop="text">
<p>the best way to do this is to use str.replace, like this:</p>
<pre><code>def sansur(hmm):
    return hmm.replace('m','*')
</code></pre>
<p>Also, the reason that it prints 'None' with your function is because the function does not return anything. when you say</p>
<pre><code>word='Programming is fun!'
print sansur(word)
</code></pre>
<p>you are printing the <strong>value</strong> of sansur(word), and a function's value is what it returns. Since your function returns nothing, it has no value; it will print 'None'. </p>
</div>
<span class="comment-copy">It doesn't work because <code>harf</code> is simply a temporary local variable which is first assigned the value of each character in the string, and then immediately overwritten with <code>*</code> if its value is <code>m</code>. The original string is not modified in any way, nor do you produce a new string which you return.</span>
<span class="comment-copy">thanks for the info! can you tell me how can I edit the original letters in the "word" variable by using the function?</span>
<span class="comment-copy">Unfortunately (or fortunately, perhaps), you can't! You need to incrementally produce a new string by starting from an empty string in a local variable, and on each iteration replace it with its old value appended with the current character, or, if the current character is <code>m</code>, <code>*</code>. You can also do fancy things like comprehensions etc. but I would lay off those until you're rock solid on the fundamentals.</span>
<span class="comment-copy">If you feel like peeking at the answer: <a href="http://ideone.com/sNxMLy" rel="nofollow noreferrer">ideone.com/sNxMLy</a></span>
<span class="comment-copy">This does not provide an answer to the question. Once you have sufficient <a href="https://stackoverflow.com/help/whats-reputation">reputation</a> you will be able to <a href="https://stackoverflow.com/help/privileges/comment">comment on any post</a>; instead, <a href="https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead">provide answers that don't require clarification from the asker</a>. - <a href="/review/low-quality-posts/16879706">From Review</a></span>
<span class="comment-copy">@Torbj√∂rn - it does, it may not be a very well written answer (and I don't know the subject well enough to know if it is a <b>correct</b> answer), but it is still an answer.</span>
