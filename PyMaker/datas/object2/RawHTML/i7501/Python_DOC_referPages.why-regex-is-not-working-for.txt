<div class="post-text" itemprop="text">
<p>I need a regex that matches the below link patterns as follows.</p>
<ol>
<li><code>'https://website/1/extension1'</code> -&gt; <code>True</code></li>
<li><code>'https://website/1.1/extension1'</code> -&gt; <code>False</code></li>
<li><code>'https://website/1/#extension1'</code> -&gt; <code>False</code></li>
</ol>
<p>My regex is</p>
<pre><code>regex = re.compile('https://website/1[^\.]/*[^#]')
</code></pre>
<p>It works find for the case two. But I wonder why this doesn't return <code>False</code> in case of occurrence of <code>#</code> in link.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your regex matches the <code>https://website/1/</code> prefix, and nothing more. It doesn't matter that the string contains more text beyond that <code>/</code> after the version number.</p>
<p>You need to include <em>anchors</em>, to make sure you are not just matching a substring. Use <code>^</code> and <code>$</code> to anchor to the start and end of a string, so there is no room left for other strings. You need to match paths that don't include any <code>#</code> characters:</p>
<pre><code>^https://docs\.python\.org/\d/[^#]*$
</code></pre>
<p>I also escaped the dots in the hostname, you don't want to match 'any' character, you want to match literal <code>'.'</code> characters. <code>\d</code> matches one digit (so <code>2</code> and <code>3</code> for major Python versions, but no more).</p>
<p>Online demo: <a href="https://regex101.com/r/gL7X7o/3" rel="nofollow noreferrer">https://regex101.com/r/gL7X7o/3</a></p>
<p>Python demo using Python documentation URLs:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(r'^https://docs\.python\.org/3/[^#]*$')
&gt;&gt;&gt; links = [
...     'https://docs.python.org/3/library/re.html#regular-expression-syntax',
...     'https://docs.python.org/3/library/re.html',
...     'https://docs.python.org/3.6/library/re.html',
...     'https://docs.python.org/2/library/re.html',
... ]
&gt;&gt;&gt; for link in links:
...     print('{!r} -&gt; {}'.format(link, bool(pattern.search(link)))
...
'https://docs.python.org/3/library/re.html#regular-expression-syntax' -&gt; False
'https://docs.python.org/3/library/re.html' -&gt; True
'https://docs.python.org/3.6/library/re.html' -&gt; False
'https://docs.python.org/2/library/re.html' -&gt; True
</code></pre>
</div>
<span class="comment-copy">Because <code>https://docs.python.org/3/</code> matches your expression. It doesn't matter there are more characters beyond that point.</span>
<span class="comment-copy">Also, you are matching zero or more <code>/</code> slashes there, is that what you wanted?</span>
<span class="comment-copy">I want to skip all links containing '#' and the links like <a href="https://website/1.1/something" rel="nofollow noreferrer">website/1.1/something</a> or <a href="https://website/1.2/something.html" rel="nofollow noreferrer">website/1.2/something.html</a></span>
<span class="comment-copy">Are you looking for <a href="https://regex101.com/r/3pb9J8/1" rel="nofollow noreferrer"><code>re.compile('https://website/\d+/\w+')</code></a> ?</span>
<span class="comment-copy">Not exactly, I want to search website with 1 digit only /d+ will allow all integers. Similarly, I just want to avoid links ending with named anchors like 'http://....#something'</span>
