<div class="post-text" itemprop="text">
<p>I have a dictionary with 2 keys. Only one key can have value 1. If both keys have value 1, it should give the error message.</p>
<p>Here is the working code which I tried, but want to know if there is any way to optimize the same?</p>
<pre><code>&gt;&gt;&gt; trmode_data = {'continuous': 1, 'fixed': 1}

&gt;&gt;&gt; new = []
&gt;&gt;&gt; for k, v in trmode_data.items():
...  if v == 1:
...   new.append(k)

&gt;&gt;&gt; if len(new) &gt; 1:
...  print "unexpected"
...
unexpected
</code></pre>
<p>Whichever key has value 1, that key is to be used further. So basically above code is needed to verify that the dictionary has expected values for the keys or not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you know your dict has exactly 2 items, you can use <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> in combination with a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehension</a>:</p>
<pre><code>if all(val==1 for val in trmode_data.values()):
    print('unexpected')
</code></pre>
<hr/>
<p>Alternatively, a more generic approach would be to use <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>:</p>
<pre><code>if sum(val==1 for val in trmode_data.values()) &gt; 1:
    print('unexpected')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>if trmode_data.values().count(1) == 2:
    print "unexpected"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given your statement:</p>
<blockquote>
<p>Whichever key has value 1, that key is to be used further.</p>
</blockquote>
<p>It sounds like you want to continue using your dictionary, just w/o the dup key(s) with the value of <code>1</code>.  (And I'm going to assume you want uniqueness for all values, not just <code>1</code>.)</p>
<p>You can achive this by inverting the dictionary.  Example:</p>
<pre><code>x = {'a':1, 'b':1, 'c':2}

x_ = {v:k for k,v in x.items()}
x = {v:k for k,v in x_.items()}

print x
</code></pre>
<p>Run:</p>
<pre><code>$ python test2.py 
{'c': 2, 'b': 1}
</code></pre>
<p>BTW, you almost certainty want to use an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> when reading in from wherever you're reading from, otherwise which key "wins" will be effectively random.  But with some sort of ordered dictionary implementation, the last will always win, which is what you specified.</p>
<p>Good luck!</p>
</div>
<span class="comment-copy"><code>if  len([v for v in trmode_data.values() if v ==1]) &gt; 1</code></span>
<span class="comment-copy">@ Rawing, perfect answer! Worked like a charm. Thanks much!</span>
<span class="comment-copy">the first approach also works for more than 2 items right?</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre The <code>all</code> solution will have a different behavior if there are more than 2 items - because it checks if <i>all</i> values are 1, not if there's <i>more than one</i> 1.</span>
<span class="comment-copy">right! in that case <code>all</code> may be slightly overkill. but solutions with <code>or</code> aren't better.</span>
<span class="comment-copy">@Rawing You're right. My bad. I forgot it returned a list in Py2</span>
