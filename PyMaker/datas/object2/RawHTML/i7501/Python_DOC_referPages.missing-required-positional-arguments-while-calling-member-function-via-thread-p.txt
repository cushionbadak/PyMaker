<div class="post-text" itemprop="text">
<p>I wrote the following two methods, trying to benefit from multithreading:</p>
<pre><code>class Data:

    def read_single_image(self, resample_size, index, image_directory_path):
        file_name = self.file_names[index]
        file_path = os.path.join(image_directory_path, file_name + '.*')
        files = glob.glob(file_path)
        if len(files) != 1:
            raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), file_path)
        image = misc.imread(file_path, mode='RGB')
        zoom = image.shape
        # image = interpolation.zoom(image_directory_path)
        zoom = (resample_size[0] / zoom[0], resample_size[1] / zoom[1], 1)
        image = interpolation.zoom(image, zoom)
        return image


    def read_images(self, resample_size, indice=None, image_directory_path=train_jpeg_directory_path):

        if indice is None:
            indice = self.shuffled_indice

        # reading all images into list
        images = []
        # for i in indice:
        #     image = self.read_single_image(resample_size, i, image_directory_path)
        #     images.append(image)
        with ThreadPoolExecutor(cpu_count()) as pool:
            for image in pool.map(self.read_single_image, [(resample_size, i, image_directory_path) for i in indice]):
                images.append(image)

        return np.stack(images)
</code></pre>
<p>Unfortunately, it doesn't work with error message:</p>
<pre><code>TypeError: read_single_image() missing 2 required positional arguments: 'index' and 'image_directory_path'
</code></pre>
<p>Why?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map" rel="nofollow noreferrer"><code>Executor.map()</code></a> (and consequently <code>ThreadPoolExecutor.map()</code>) takes an iterable and sends it over the enclosed pool one item per worker. This means that your <code>Data.read_single_image()</code> method gets called as: <code>self.read_single_image((resample_size, i, image_directory_path))</code> i.e. gets a <code>tuple</code> of all the arguments as the first argument (after the implied <code>self</code>) so it complains that it didn't receive the last two positional arguments.</p>
<p>You can remedy that by simply changing your <code>Data.read_single_image()</code> signature to: <code>Data.read_single_image(self, args)</code> and then read from the <code>args</code> tuple <code>resample_size</code> as <code>args[0]</code>, <code>index</code> as <code>args[1]</code> and <code>image_directory_path</code> as <code>args[2]</code>.</p>
<p>If you want to keep the signature as it is, you can write a proxy expander as:</p>
<pre><code>def _read_single_image(self, args):
    return self.read_single_image(*args)
</code></pre>
<p>And call the <code>_read_single_image()</code> method from your <code>ThreadPoolExecutor.map()</code> instead (i.e. <code>pool.map(self._read_single_image, [(resample_size, i, image_directory_path) for i in indice])</code>)</p>
<p>Keep in mind that if you're going to perform some serious processing, you're much better off with the <code>multiprocessing</code> module, <code>ThreadPoolExecutor</code> is still somewhat limited by the dreaded GIL.</p>
</div>
