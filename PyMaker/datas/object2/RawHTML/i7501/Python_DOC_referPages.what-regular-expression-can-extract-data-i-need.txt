<div class="post-text" itemprop="text">
<p>I have a string </p>
<pre><code>url = '//item.taobao.com/item.htm?id\u003d528341191030\u0026ns\u003d1\u0026abbucket\u003d0#detail'
</code></pre>
<p>I like to extract the number <code>528341191030</code> between the first two <code>\u</code>. I tried this,</p>
<pre><code>m = re.search('\?id\u\d+d(\d+?)\u', url)
if m:
  print m.group(1)
</code></pre>
<p>But it doesn't work. What is wrong with my solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you sure you need regex?
Here is a solution using <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow noreferrer">split</a>:</p>
<pre><code>url.split("\u")[1].split("d")[-1]
'528341191030'
</code></pre>
<p>In terms of what is wrong with your regex, "\" is a special character, so you should use "\\" for backslash (so " \\\u" instead of "\u"):</p>
<pre><code>m = re.search('\?id\\\u\d+d(\d+?)\\\u', url)
if m:
  print m.group(1)
</code></pre>
<p>Gives: 528341191030</p>
<p><a href="https://docs.python.org/3/library/re.html#module-re" rel="nofollow noreferrer">Docs</a>:</p>
<blockquote>
<p>Regular expressions use the backslash character ('\') to indicate
  special forms or to allow special characters to be used without
  invoking their special meaning. This collides with Pythonâ€™s usage of
  the same character for the same purpose in string literals; for
  example, to match a literal backslash, one might have to write '\\'
  as the pattern string, because the regular expression must be \, and
  each backslash must be expressed as \ inside a regular Python string
  literal.</p>
</blockquote>
<p>Or,use <strong><a href="https://docs.python.org/2/library/re.html#raw-string-notation" rel="nofollow noreferrer">Raw String Notation</a></strong></p>
<pre><code>m = re.search(r"\?id\\u\d+d(\d+?)\\u", url)
if m:
    print m.group(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, you could always try this (not super elegant but works):</p>
<pre><code>first = url.find('\u') + 2
prev = 'u'
m = ""
for i in range(first, len(url)):
    if prev == '\' and url[i] == 'u':
         break
    else:
        m += url[i]
    if url[i] == 'd':
        m = ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Better way is to parseurl and get the query string values</p>
<pre><code>url = '//item.taobao.com/item.htm?id\u003d528341191030\u0026ns\u003d1\u0026abbucket\u003d0#detail'
import urllib.parse as urlparse
print ( urlparse.parse_qs(urlparse.urlparse(url).query) )
print ( urlparse.parse_qs(urlparse.urlparse(url).query)['id'] )
</code></pre>
<p>Output:</p>
<pre><code>{'id': ['528341191030'], 'ns': ['1'], 'abbucket': ['0']}
['528341191030']
</code></pre>
</div>
<span class="comment-copy">Can you tell us what the output was, whether that was an error or the incorrect output</span>
<span class="comment-copy">Since search returns None, so it won't output anything. There isn't any error.</span>
<span class="comment-copy">@yi xiao: Thanks for the edit on raw string notation :)</span>
<span class="comment-copy">Actually I tried to escape '\'  like this,  url = '//item.taobao.com/item.htm?id\u003d528341191030\u0026ns\u003d1\u0026abbucket\u003d0#detail' m = re.search('\?id\\u\d+d(\d+?)\\u', url)       if m:          print m.group(1)  but it still doesn't work</span>
<span class="comment-copy">You should add 3 "\" before "u". Please try copy-pasting the code sample and let me know</span>
<span class="comment-copy">Yes! But why should I add 3 '\' before 'u'? Thanks.</span>
<span class="comment-copy">In general I would suggest raw string notation. Without r'', if you try this: re.match("\\\u", "\u") you see that 3 "\" is the way to go.</span>
