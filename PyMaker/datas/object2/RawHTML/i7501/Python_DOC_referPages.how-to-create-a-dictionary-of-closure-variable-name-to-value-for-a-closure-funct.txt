<div class="post-text" itemprop="text">
<p>With a python module like:</p>
<pre><code>def mult(n):
    a = n-1
    def multn(x):
        b = a
        print (n*x)
    return multn

f = mult(3)
f(4)

print (f.__closure__)
for c in f.__closure__:
    print (c.cell_contents)

print (f.__code__.co_freevars)
</code></pre>
<p>The output is:</p>
<pre><code>12
(&lt;cell at 0x10fd20360: int object at 0x7f8f9bc0b760&gt;, &lt;cell at 0x10fd20398: int object at 0x7f8f9bc0b748&gt;)
2
3
('a', 'n')
</code></pre>
<p>Is there an easier way or package existing out there, where it creates a dictionary of <code>clo_var_name</code> to <code>clo_val</code>?  </p>
<p>So <code>{'a': 2, 'n': 3}</code></p>
<p>Thank you all in advanced.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/inspect.html#inspect.getclosurevars" rel="nofollow noreferrer">inspect.getclosurevars</a> will give you a dict of closure-referenced variables.</p>
<pre><code>import inspect

inspect.getclosurevars(f)

# returns:

ClosureVars(nonlocals={'a': 2, 'n': 3}, globals={}, builtins={'print': &lt;built-in function print&gt;}, unbound=set())
</code></pre>
</div>
<span class="comment-copy">You should look at <code>inspect.getclosurevars</code>.</span>
<span class="comment-copy">Hmm... they seem to have made a bit of a design mistake with that function. It doesn't have any check for empty closure cells, and it doesn't have a good way to indicate that a closure variable is unbound.</span>
