<div class="post-text" itemprop="text">
<p>I have put the following in my <code>config.py</code>:</p>
<pre><code>import time
import logging
#logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%Y-%m-%d %H:%M:%S', level=logging.INFO)
logFormatter = logging.Formatter('%(asctime)s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
rootLogger = logging.getLogger()
rootLogger.setLevel(logging.INFO)

fileHandler = logging.FileHandler("{0}.log".format(time.strftime('%Y%m%d%H%M%S')))
fileHandler.setFormatter(logFormatter)
rootLogger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
rootLogger.addHandler(consoleHandler)
</code></pre>
<p>and then I am doing </p>
<pre><code>from config import *
</code></pre>
<p>in all of my scripts and imported files.</p>
<p>Unfortunately, this causes multiple log files created.</p>
<p>How to fix this? I wan't centralized <code>config.py</code> with logging configured both to console and file.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Case 1: Independent Scripts / Programs</strong></p>
<p>In case we are talking about multiple, independent scripts, that should have logging set up in the same way: I would say, each independent application should have its own log. If you definitively do not want this, you would have to </p>
<ul>
<li>make sure that all applications have the same log file name (e.g. create a function in config.py, with a parameter "timestamp", which is provided by your script(s)</li>
<li>specify the <code>append</code> <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">filemode for the fileHandler</a></li>
<li>make sure that <code>config.py</code> is not called twice somewhere, as you would add the log handlers twice, which would result in each log message being printed twice.</li>
</ul>
<p><strong>Case 2: One big application consisting of modules</strong></p>
<p>In case we are talking about one big application, consisting of modules, you could adopt a structure like the following:</p>
<p>config.py:</p>
<pre><code>def set_up_logging():
    # your logging setup code
</code></pre>
<p>module example (some_module.py):</p>
<pre><code>import logging

def some_function():
    logger = logging.getLogger(__name__)

    [...]

    logger.info('sample log')

    [...]
</code></pre>
<p>main example (main.py)</p>
<pre><code>import logging
from config import set_up_logging
from some_module import some_function

def main():
    set_up_logging()

    logger = logging.getLogger(__name__)
    logger.info('Executing some function')

    some_function()

    logger.info('Finished')

if __name__ == '__main__':
    main()
</code></pre>
<p>Explanation:</p>
<ul>
<li>With the call to <code>set_up_logging()</code> in main() you configure your applications root logger</li>
<li>each module is called from main(), and get its logger via <code>logger = logging.getLogger(__name__)</code>. As the modules logger are in the hierarchy below the root logger, those loggings get "propagated up" to the root logger and handled by the handlers of the root logger.</li>
</ul>
<p>For more information see <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">Pythons logging module doc</a> and/or the <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook" rel="nofollow noreferrer">logging cookbook</a></p>
</div>
<span class="comment-copy">You can manually log them to a txt file using <code>with open('log.txt','a') as f: f.write(logging part)</code> and do this for all the scripts with the same log.txt file. And for console, you can use print statements.</span>
<span class="comment-copy">I would like to print timestamp, with print it will require repetitive coding.</span>
<span class="comment-copy">@Dims make it a function?</span>
<span class="comment-copy">you can use datetime.datetime.now() as one of the parameters in the print. So, since you have to print the log anyway, you can print it with the timestamp.</span>
<span class="comment-copy">How does the overall application look like? Is there kind of a "main" file that runs all modules? Or put differently: is this one application consisting of different parts (scripts), or are these (besides logging) independent scripts that run independently?</span>
