<div class="post-text" itemprop="text">
<p>I want to implement the following function in python:</p>
<p><a href="https://i.stack.imgur.com/MJfQu.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/MJfQu.png"/></a></p>
<p>I will write the code using 2-loops:</p>
<pre><code>for i in range(5):
     for j in range(5):
          sum += f(i, j) 
</code></pre>
<p>But the issue is that I have 20 such sigmas, so I will have to write 20 nested for loops. It makes the code unreadable. In my case, all i and j variables take same range (0 to 4). Is there some better of coding it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to get cartesian product (of indexes for your cases):</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for i, j, k in itertools.product(range(1, 3), repeat=3):
...     print(i, j, k)
... 
1 1 1
1 1 2
1 2 1
1 2 2
2 1 1
2 1 2
2 2 1
2 2 2
</code></pre>
<hr/>
<pre><code>import itertools

total = 0
for indexes in itertools.product(range(5), repeat=20):
    total += f(*indexes)
</code></pre>
<ul>
<li>You should use <code>range(1,6)</code> instead of <code>range(5)</code> to mean <code>1</code> to <code>5</code>. (unless you meant indexes)</li>
<li>Do not use <code>sum</code> as a variable name, it shadows builtin function <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Create Arrays by using Numpy .</p>
<pre><code>    import numpy as np 

    i = np.asarray([i for i in range(5)])
    j = np.asarray([i for i in range(5)])
    res = np.sum(f(i,j)) 
</code></pre>
<p>so you can avoide all loops. Important to note is that the function f needs to be able to work with array (a so called ufunc). If your f is more complicated and i doesnt allow arrays you can use numpys  vectorize functions. Not as fast as a ufunc but better that nested loops : </p>
<pre><code>    from numpy import vectorize 

    f_vec = vectorize(f)
</code></pre>
<p>If you want to stay with plain python because you don't want arrays but lists or the types don't match for an array, there is always list comprehension which speeds up the loop. Say I and J are the iterable for i and j respectively then:  </p>
<pre><code>    ij = [f(i,j) for i in I for j in J ]
    res = sum(ij) 
</code></pre>
</div>
