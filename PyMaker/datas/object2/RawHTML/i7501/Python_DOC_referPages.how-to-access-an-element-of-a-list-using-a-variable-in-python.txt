<div class="post-text" itemprop="text">
<p>Given that I have a target location for a multi-dimensional list. I.e. an index stored in a variable.</p>
<pre><code>list = [[1,2,3,4,5],
        [10,20,30,40,50],
        [5,4,3,2,1],
        [50,40,30,20,10]]
target = [3][4]
</code></pre>
<p>How do I access list[target]?</p>
<pre><code>  &gt;&gt;&gt; list[target]
    10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If <code>target</code> is given as a list of indices like <code>[3, 4, 1]</code>, you can use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a>:</p>
<pre><code>from functools import reduce # not required in py2

result = reduce(list.__getitem__, target, my_list)
</code></pre>
<p>Note that this won't work if you've used <code>list</code> as a name for your variable. Never use the names of builtins for your variables. Name it <code>my_list</code> or something more descriptive.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do this directly because list[variable] will become an entry of the list; the variable must be an index.</p>
<p>So what you need is some way to get list[variable][variable][variable]</p>
<p>This can't be done with a simple variable sadly, even though it would be really cool.</p>
<p>The best way to do it would be to make a recursive function to do it, which takes your list <code>target=[3,4,1]</code> and returns the value, as so.</p>
<pre><code>def target_value(my_list, place):
    if len(place) == 1:
        return my_list[place[0]]
    return target_value(my_list[place[0]],place[1:])
</code></pre>
<p>Then you would call it as a normal function, giving your list and target (<code>target = [3,4,1]</code>) as parameters.</p>
</div>
<span class="comment-copy"><code>list[3][4][1]</code>?</span>
<span class="comment-copy">What is <code>list[target]</code> supposed to mean?</span>
<span class="comment-copy">What is <code>target = [3][4][1]</code> supposed to mean?</span>
<span class="comment-copy">I think he wants to store the indexes into one variable and pass that variable in as "keys" to access the value</span>
<span class="comment-copy">What is target exactly? This isn't a valid data structure. Is it a 1D list with 3 elements? Is it a list of lists?</span>
<span class="comment-copy">It was really simple, thank you.</span>
<span class="comment-copy">Thank you, that's what I was looking for.</span>
<span class="comment-copy">Rawing's version is more simple if you want to import outside functions, or this recursive one will work if you want it to be part of your program.</span>
