<div class="post-text" itemprop="text">
<p>I've just finished adding some nice formatting to my logging console where based on the message type the prefix of the message is coloured differently:</p>
<p><a href="https://i.stack.imgur.com/qSPut.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/qSPut.png"/></a></p>
<p>In order to do that I used tags (<code>tag_config()</code>) along with <code>Font()</code> to make things bold:</p>
<pre><code>from tkinter import font, Tk, END
from tkinter.scrolledtext import ScrolledText


def log_info(msg, widget):
  log(msg, "info", widget)

def log_error(msg, widget):
  log(msg, "error", widget)

def log_warn(msg, widget):
  log(msg, "warn", widget)

def log(msg, type, widget):
  msg_prefix = font.Font(widget, widget.cget("font"))
  msg_prefix.configure(weight="bold")
  if type == "info":
    widget.insert(END, "INFO: ", "info")
    widget.insert(END, msg + "\n")
  elif type == "error":
    widget.insert(END, "ERROR: ", "error")
    widget.insert(END, msg + "\n")
  elif type == "warn":
    widget.insert(END, "WARNING: ", "warn")
    widget.insert(END, msg + "\n")
  else:
    print("Unknown type of log message. Available types are 'info', 'error' and 'warn'")

  widget.tag_config("info", font=msg_prefix)
  widget.tag_config("error", foreground="red", font=msg_prefix)
  widget.tag_config("warn", foreground="orange", font=msg_prefix)

window = Tk()
window.geometry('970x45')
box = ScrolledText(window, width=70, height=7)
box.pack()
log_info("This is an information log message", box)
log_error("This is an error log message", box)
log_warn("This is a warning log message", box)

window.mainloop()
</code></pre>
<p>However I am struggling to add a similar feature to the tab where this console is. Every time an error log message is logged in the console the tab where it is located gets updated to show the number of errors that are currently logged:</p>
<p><a href="https://i.stack.imgur.com/C1UAD.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/C1UAD.png"/></a></p>
<p>However I would like to make the <code>(4)</code> (from the screenshot above) coloured with red. I was unable to find font formatting for the tab label:</p>
<p><a href="https://i.stack.imgur.com/oKd0s.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/oKd0s.png"/></a></p>
<p><em>Reason:</em> I've discovered that the logging console gets ignored quite often since the other tab in my widget is where the interaction happens. Since I want to keep things separated in order to prevent clustering too many things on the screen at the same time I'm trying to notify the user in an non-intrusive way that an error has occurred (other types of log messages are not that important).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using the ttk.Notebook, the answer is that you can only configure the tab text style for all tabs using styling. So you can make ALL tabs foreground red...</p>
<pre><code>nb = ttk.Notebook(master, style='TNotebook')
...
style = ttk.Style()
# This will change the foreground color of ALL tabs to red.
style.configure('TNotebook.Tab', foreground='red')
</code></pre>
<p>You could also use the tab <code>compound</code> option, which enables you to place both text and an image on the tab. You can change the text or image on a given tab separately. But to do what you are asking, your '(4)' would have to be an image, meaning you'd have to have a lot of pre-existing images waiting to be loaded depending on how many errors you anticipate.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Short answer:</h2>
<p>No, it's not possible from the scratch, and since appereance of ttk widgets heavily depends on theme in use and/or platform - it's hard to implement without jump to <code>tk</code> environment/hard to keep desired layout.</p>
<p>But your question is really interested, so I tried to implement this feature by myself.</p>
<h2>Long Answer:</h2>
<p>First of all, you need to know, that each widget has the <a href="https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.layout" rel="nofollow noreferrer">layout structure</a>, that represented by hierarchy of elements.</p>
<p>On my <code>Win</code> machine default theme is <code>vista</code> and layout for <code>Tab</code> is:</p>
<pre><code>&gt;&gt;&gt; s = ttk.Style()
&gt;&gt;&gt; print(s.layout('TNotebook.Tab'))

#   formatted result, actual result is one-line string
[('Notebook.tab', {
    'children': [(
        'Notebook.padding', {
            'children': [(
                'Notebook.focus', {
                    'children': [(
                        'Notebook.label', {
                            'sticky': '',
                            'side': 'top'
                        })],
                    'sticky': 'nswe',
                    'side': 'top'
                })],
            'sticky': 'nswe',
            'side': 'top'
        })],
    'sticky': 'nswe'
})]
</code></pre>
<p>As you can see - there's a <code>Notebook.label</code> element. And this elements handles all that options:</p>
<pre><code>&gt;&gt;&gt; print(s.element_options('Notebook.label'))
('-compound', '-space', '-text', '-font', '-foreground', '-underline', '-width', '-anchor', '-justify', '-wraplength', '-embossed', '-image', '-stipple', '-background')
</code></pre>
<p>So that's it - you can't do partially formatting text within label, because  <code>-font</code> or <code>-foreground</code> options applies to entire string.</p>
<p>But what if we change this layout structure with additional label/text?
It's looks like a good idea, that we can use first text for tab title and second for counter!</p>
<pre><code>s = ttk.Style()
s.configure('SOExample.TNotebook')
s.layout('SOExample.TNotebook.Tab', [('Notebook.tab', {
    'sticky': 'nswe',
    'children': [(
        'Notebook.padding', {
            'sticky': 'nswe',
            'children': [(
                'Notebook.focus', {
                    'sticky': 'nswe',
                    'children': [(
                        'Notebook.label', {
                            'sticky': '',
                            'side': 'left'
                        }), (
                        'Notebook.text', {
                            'sticky': '',
                            'side': 'right'
                        })],
                    'side': 'top'
                })],
            'side': 'top'
        })]})])
</code></pre>
<p>Unfortunately and obviously, it's not gonna work, because both elements react on the same options (<code>text</code>, <code>font</code>, et cetera)</p>
<p>According to docs <a href="https://www.tcl.tk/man/tcl/TkCmd/ttk_intro.htm" rel="nofollow noreferrer">here</a>:</p>
<blockquote>
<p>The value of an element option is taken from:</p>
<ul>
<li><p>an option of the same name and type in the widget containing the
  element;</p></li>
<li><p>a dynamic setting specified by style map and the current state;</p></li>
<li><p>the default setting specified by style configure; or</p></li>
<li><p>the element's built-in default value for the option.</p></li>
</ul>
</blockquote>
<p>However, I think it's possible to "map" second <code>text</code> option as <code>text2</code> for Tab, but with Python on it's own, it's looks like impossible task!</p>
<h2>Conclusion:</h2>
<p>Long answer is attempt to implement such a feature, that leads to another question of "how to add options to custom class widget and bind them to element options". The more straitght solution there would be to use <code>compound</code> behaviour of a label, since you can convert any <code>int</code> to image/64encoded image-string, but this option is already mentioned.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would declare your log windows as instances of a LogWindow class. This may not quite be perfect Python but you get the idea. You can probably move the <code>tag_config</code> commands too. <code>__log</code> becomes a private method and thus doesn't need as strict data checking.</p>
<pre class="lang-python prettyprint-override"><code>class LogWindow:
  def __init__(self):
    window = Tk()
    window.geometry('970x45')
    self.widget = ScrolledText(window, width=70, height=7)
    self.widget.pack()

  def info(msg):
    self.widget.insert(END, "INFO: ", "info")
    __log(msg, "info")

  def error(msg, widget):
    self.widget.insert(END, "ERROR: ", "error")
    __log(msg, "error")

  def warn(msg):
    self.widget.insert(END, "WARNING: ", "warn")
    __log(msg, "warn")

  def __log(msg, type):
    msg_prefix = font.Font(self.widget, widget.cget("font"))
    msg_prefix.configure(weight="bold")
    self.widget.insert(END, msg + "\n")
    self.widget.tag_config("info", font=msg_prefix)
    self.widget.tag_config("error", foreground="red", font=msg_prefix)
    self.widget.tag_config("warn", foreground="orange", font=msg_prefix)

log = LogWindow();

log.info("This is an information log message")
log.error("This is an error log message")
</code></pre>
</div>
<span class="comment-copy">I know about styles but as you said it affects <i>all tabs</i>. I'm looking for a tab-per-tab behaviour here. Thanks for the answer though!</span>
<span class="comment-copy">Ahm, this is not an answer. :P I just gave an example how I solved the problem with the @ScrolledText@ and asked if something similar is present for the tabs of a @Notebook@. I don't have problem formatting the contents of the @ScrolledText@ at all. ;)</span>
