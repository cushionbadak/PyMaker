<div class="post-text" itemprop="text">
<p>I want to find the first float that appears in a string using Python 3.</p>
<p>I looked at other similar questions but I couldn't understand them and when I tried to implement them they didn't work for my case.</p>
<p>An example string would be</p>
<p><code>I would like 1.5 cookies please</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm pretty sure there's more elegant solution, but this one works for your specific case:</p>
<pre><code>s = 'I would like 1.5 cookies please'

for i in s.split():
    try:
        #trying to convert i to float
        result = float(i)
        #break the loop if i is the first string that's successfully converted
        break
    except:
        continue

print(result) #1.5
</code></pre>
<p>Hope it helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can find this using <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a>, notice this pattern will only return the substring if it's already in <code>float</code> type, i.e. decimal fomatting, so something like this:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; matches = re.findall("[+-]?\d+\.\d+", "I would like 1.5 cookies please")
</code></pre>
<p>As you say you want only the first one:</p>
<pre><code>&gt;&gt;&gt; matches[0]
'1.5'
</code></pre>
<p>Edit: Added <code>[+-]?</code> to the pattern for it to recognize negative floats, as pistache recommended!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you expect whitespace separated decimal floats, using <code>str</code> methods and removing <code>-+.</code>:</p>
<pre><code>s = 'I would like 1.5 cookies please'
results = [t for t in s.split() 
           if t.lstrip('+-').replace('.', '', 1).isdigit()]
print(results[0])  #1.5
</code></pre>
<p><code>lstrip</code> is used to remove the sign only on the lefthand side of the text, and the third argument to <code>replace</code> is used to replace only one dot in the text. The exact implementation depends on the how you expect floats to be formatted (support whitespace between sign, etc).</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a regex. below also checks for negative values.</p>
<pre><code>import re

stringToSearch = 'I would like 1.5 cookies please'
searchPattern = re.compile(".*(-?[0-9]\.[0-9]).*")
searchMatch = searchPattern.search(stringToSearch)

if searchMatch:
    floatValue = searchMatch.group(1)
else:
    raise Exception('float not found')
</code></pre>
<p>You can use <a href="http://www.pyregex.com/?id=eyJyZWdleCI6Ii4qKC0%2FWzAtOV1cXC5bMC05XSkuKiIsImZsYWdzIjowLCJtYXRjaF90eXBlIjoibWF0Y2giLCJ0ZXN0X3N0cmluZyI6Ikkgd291bGQgbGlrZSAxLjUgY29va2llcyBwbGVhc2UifQ%3D%3D" rel="nofollow noreferrer">PyRegex</a> to check the regex.</p>
</div>
<span class="comment-copy">Really good answer!! Not requiring <code>regex</code> and also recognises negative and non-decimal formatted numbers (+1)</span>
<span class="comment-copy">This answers the question perfectly, but might be a bit too broad for the user's definition of "float". Try it with <code>s = "Infinity is better with 3 cookies."</code> for example :)</span>
<span class="comment-copy">@pistache yes, perfect observation, same for <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer"><code>nan</code></a>. I found very good answers for the user's question <a href="https://stackoverflow.com/questions/4703390/how-to-extract-a-floating-number-from-a-string">here</a> and <a href="https://stackoverflow.com/questions/385558/extract-float-double-value">here</a>, they address lots of issues.</span>
<span class="comment-copy">The only thing I'd add is <code>[+-]?</code> to also capture the sign.</span>
<span class="comment-copy">@pistache thanks! I added that to the answer =)</span>
<span class="comment-copy">This is very inefficient, why would you include the rest of the string in the search pattern, to then fetch a capture group ? <code>re.search("\d+\.\d+", s)</code> works fine, does not copy the whole input string, and is much faster (especially as the input string size grows).</span>
