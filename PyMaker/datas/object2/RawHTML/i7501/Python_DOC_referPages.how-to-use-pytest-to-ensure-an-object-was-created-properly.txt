<div class="post-text" itemprop="text">
<p>I have a file that is saved in a particular format, and a class that will create an object based on the data in the file.</p>
<p>I want to ensure that all values in the file/string were extracted correctly by testing each attribute in the object.</p>
<p>Here is a simplified version of what I'm doing:</p>
<p><em>classlist.py</em></p>
<pre><code>import re

class ClassList:
    def __init__(self, data):
        values = re.findall('name=(.*?)\$age=(.*?)\$', data)

        self.students = [Student(name, int(age)) for name, age in values]

class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
</code></pre>
<p><em>test_classlist.py</em></p>
<pre><code>import pytest
from classlist import ClassList

def single_data():
    text = 'name=alex$age=20$'
    return ClassList(text)

def double_data():
    text = 'name=taylor$age=23$' \
           'name=morgan$age=25$' 
    return ClassList(text)


@pytest.mark.parametrize('classinfo, expected', [
        (single_data(), ['alex']),
        (double_data(), ['taylor', 'morgan'])
])
def test_name(classinfo, expected):
    result = [student.name for student in classinfo.students]

    assert result == expected

@pytest.mark.parametrize('classinfo, expected', [
        (single_data(), [20]),
        (double_data(), [23, 25])
])
def test_age(classinfo, expected):
    result = [student.age for student in classinfo.students]

    assert result == expected
</code></pre>
<p>I want to create objects based on different data and use them as a parametrized value.</p>
<p>My current setup <em>works</em>, although there is the unnecessary overheard of creating the object for each test. I'd want them to be created once.</p>
<p>If I try doing the following:</p>
<pre><code>...
@pytest.fixture(scope='module') # fixture added
def double_data():
    text = 'name=taylor$age=23$' \
           'name=morgan$age=25$' 
    return ClassList(text)


@pytest.mark.parametrize('classinfo, expected', [
        (single_data, ['alex']),
        (double_data, ['taylor', 'morgan']) # () removed
])
def test_name(classinfo, expected):
    result = [student.name for student in classinfo.students]

    assert result == expected
...
</code></pre>
<p><code>AttributeError: 'function' object has no attribute 'students'</code></p>
<p>...it doesn't work as it references the function rather than the fixture.</p>
<p>Furthermore, the code in <code>test_name</code> and <code>test_age</code> is almost identical. In my actual code, I'm doing this for about 12 attributes. Should/can this be merged into a single function? How?</p>
<p>How can I clean up my test code?</p>
<p>Thanks!</p>
<p>Edit:</p>
<p>I feel this is relevant, but I'm unsure how make it work for my situation: <a href="https://stackoverflow.com/questions/13925366/can-params-passed-to-pytest-fixture-be-passed-in-as-a-variable">Can params passed to pytest fixture be passed in as a variable?</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<blockquote>
<p>My current setup works, although there is the unnecessary overheard of creating the object for each test. I'd want them to be created once. </p>
</blockquote>
</blockquote>
<p>This smells like unnecessary pre-optimization to me, but if you care about this, then run the functions that create your data to test at module level, so they only run once.</p>
<p>For example:</p>
<pre><code>...
def single_data():
    text = 'name=alex$age=20$'
    return ClassList(text)

def double_data():
    text = 'name=taylor$age=23$' \
           'name=morgan$age=25$' 
    return ClassList(text)


double_data_object = double_data()

single_data_object = single_data()


@pytest.mark.parametrize('classinfo, expected', [
        (single_data_object, ['alex']),
        (double_data_object, ['taylor', 'morgan'])
])
def test_name(classinfo, expected):
    result = [student.name for student in classinfo.students]

    assert result == expected

@pytest.mark.parametrize('classinfo, expected', [
        (single_data_object, [20]),
        (double_data_object, [23, 25])
])
def test_age(classinfo, expected):
...
</code></pre>
<blockquote>
<p>Furthermore, the code in test_name and test_age is almost identical.
  In my actual code, I'm doing this for about 12 attributes. Should/can
  this be merged into a single function? How?</p>
<p>How can I clean up my test code?</p>
</blockquote>
<p>A couple of ways to do this, but from your example, provide an <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer">equality magic method</a> to the <code>Student</code> class and use that to test your code (also add a <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><strong>repr</strong></a> for sane representation of your object):</p>
<pre><code>class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __eq__(self, other):
        return (self.name, self.age) == (other.name, other.age)

    def __repr__(self):
        return 'Student(name={}, age={})'.format(self.name, self.age)
</code></pre>
<p>Then your test can look like this:</p>
<pre><code>@pytest.mark.parametrize('classinfo, expected', [
        (single_data(), [Student('alex', 20)]),
        (double_data(), [Student('taylor', 23), Student('morgan', 25)]),
])
def test_student(classinfo, expected):
    assert classinfo.students == expected
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can add one <code>fixture</code> which returns object of that class and call that fixture before every test. I have done some changes and create a fixture <code>get_object</code> in <code>test_classlist.py</code> while <code>classlist.py</code> is as it is.</p>
<p><code>get_object</code> will give you an object of that class and you can use that object in test function via <code>request</code> module. I have assigned that class object in <code>request.instance.cobj</code>. The same you can access in test function.</p>
<p>What I am getting from your description is you want to create object of <code>ClassList</code>. If i am not getting wrong ,the below solution should work for you. Try this. </p>
<pre><code>import pytest
from classlist import ClassList

def single_data():
    text = 'name=alex$age=20$'
    print text
    return ClassList(text)

def double_data():
    text = 'name=taylor$age=23$' \
           'name=morgan$age=25$'
    return ClassList(text)

@pytest.fixture
def get_object(request):
    classobj= request.getfuncargvalue('classinfo')()
    request.instance.cobj = classobj


class Test_clist:

    @pytest.mark.parametrize('classinfo, expected', [
            (single_data, ['alex']),
            (double_data, ['taylor', 'morgan']) # () removed
    ])
    @pytest.mark.usefixtures('get_object')
    def test_name(self,classinfo,expected,request):
        result = [student.name for student in request.instance.cobj.students]
        print result
        print expected
        assert result == expected
</code></pre>
</div>
<span class="comment-copy">I've tried using the equality magic method, but in my actual code, there are about 12 attributes (some of which are quite lengthy), so I find that it becomes difficult to compare them both and determine exactly where the issue is. Should I just improve the formatting? Or is there a better way?</span>
<span class="comment-copy">@jake is the problem creating the equality method or the unit test? sounds like you are using the class to store data, look into a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a> or the <a href="https://pypi.python.org/pypi/attrs/17.2.0" rel="nofollow noreferrer">attrs</a> module, as it provides these methods for free and it fits these use case better.</span>
<span class="comment-copy">Nice. This is sort of what I was after.  Two followup questions: 1. It's not necessary to add a scope to the fixture? 2. Why do the tests have to be inside a class for this to work?</span>
<span class="comment-copy">1.If you dont' define scope of fixture, default scope would be <code>function</code>.. 2.By putting method into class, scope of the test would also be <code>function</code>. To use <code>request</code> scope of both test and fixture must be same.</span>
