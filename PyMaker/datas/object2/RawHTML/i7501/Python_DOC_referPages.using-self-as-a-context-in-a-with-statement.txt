<div class="post-text" itemprop="text">
<p>I often see code that uses <code>self</code> to manage a context. For example</p>
<pre><code>with self:
    self.x = 4
    self.y = 6
</code></pre>
<p>What's going on here? What does using <code>self</code> as a context allow?</p>
</div>
<div class="post-text" itemprop="text">
<p>Code that uses <code>with self:</code> suggests that whatever class you're using provides <code>__enter__</code> and <code>__exit__</code> methods.  These methods create context.  They can be convenient for setup / teardown in testing, etc.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What's going on here? What does using self as a context allow?</p>
</blockquote>
<p>As long as the class has implemented the necessary "hooks" that a context manager should, Python allows it to be used like a normal context manager. <a href="https://docs.python.org/3/library/stdtypes.html#context-manager-types" rel="nofollow noreferrer">Here is an excerpt from the docs which helps clear things up here</a>:</p>
<blockquote>
<p>Pythonâ€™s with statement supports the concept of a runtime context defined by a context manager. This is implemented using a pair of methods that allow user-defined classes to define a runtime context that is entered before the statement body is executed and exited when the statement ends:</p>
<ul>
<li><p><code>contextmanager.__enter__()</code>
  Enter the runtime context and return either this object or another object related to the runtime context. The value returned by this method is bound to the identifier in the as clause of with statements using this context manager.
  [...]</p></li>
<li><p><code>contextmanager.__exit__(exc_type, exc_val, exc_tb)</code>
  Exit the runtime context and return a Boolean flag indicating if any exception that occurred should be suppressed. If an exception occurred while executing the body of the with statement, the arguments contain the exception type, value and traceback information. Otherwise, all three arguments are None.
  [...]</p></li>
</ul>
</blockquote>
<p>As stated above, when you implement the necessary <code>__enter__</code> and <code>__exit__</code> magic methods for your class, Python allows you to treat it as a context manager.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>self</code> is a context manager (i.e. has <code>__enter__</code> and <code>__exit__</code> methods) this will simply invoke that functionality, the same as it would if the instance were used in a <code>with</code> block outside the class.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's nothing special happening here. <code>self</code> behaves the same way in a <code>with</code> block that anything else would. It calls <code>__enter__</code> when you enter the scope and <code>__exit__</code> when you leave the scope through any means. I can't imagine what using <code>self</code> here would accomplish, but if you can come up with some examples of where you've seen that, we might be able to provide a better answer.</p>
</div>
<span class="comment-copy">Where do you "often see code" like that? I assume <code>self</code> has to be <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">a context manager</a> for that to work.</span>
<span class="comment-copy">If the class overloads the necessary hooks - <code>__enter__</code> and <code>__exit__</code>, then it can be used as a normal context manager.</span>
<span class="comment-copy">The gap in my knowledge was understanding how <code>self</code> would be used in this way. I now understand that <code>self</code> is literally the class itself and not actually that magical.</span>
<span class="comment-copy">@Seanny123 Correct. I agree, it seems a little weird at first. But it's the same as making an instance of your class and using the instance in a <code>with</code> statement.</span>
<span class="comment-copy">@seanny123 <code>self</code> is NOT the class, it is the instance.</span>
<span class="comment-copy"><i>"I can't imagine what using self here would accomplish"</i> - Using the context mangers can be convenient for setup/teardown logic.</span>
<span class="comment-copy">@ChristianDean What's unusual is that setup/teardown are usually associated with creating the object and finishing using it, like <code>with open(...) as file:</code>. It's harder to imagine a class where you would disconnect them.</span>
<span class="comment-copy">@Barmar I agree, that is a fair. But we really can't be sure unless the OP shows us specifically what code he pulled this from. (BTW, I didn't downvote).</span>
<span class="comment-copy">I know what context managers are used for. It's just that the most common use case I see is for a file or something that needs to be "closed". Usually, after "closing" an object, it's left in a mostly invalid state, which would beg the question why <code>self</code> would be used for that, since clearly you would find yourself still inside of <code>self</code>'s scope after invalidating its state and closing its handle</span>
