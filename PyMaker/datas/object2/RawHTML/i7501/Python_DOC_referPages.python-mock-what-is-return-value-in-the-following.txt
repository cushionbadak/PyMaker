<div class="post-text" itemprop="text">
<p>i am very new to python mock and so just trying to understand the same. In the below code what is the difference between 1 and 2 statements indicated below,because in the end i can set <code>mock_response.status_code</code> with either of the statements</p>
<pre><code>   import requests

    def get_data():
        response = requests.get('https://www.somesite.com')
        return response.status_code

    if __name__ == '__main__':
        print get_data()
</code></pre>
<p>Now what is the difference between the following codes,</p>
<pre><code>    from call import get_data
    import unittest
    from mock import Mock,patch
    import requests

    class TestCall(unittest.TestCase):
        def test_get_data(self):
            with patch.object(requests,'get') as get_mock:
                1.get_mock.return_value = mock_response = Mock()
                  # OR 
                2.mock_response = get_mock.return_value
                mock_response.status_code = 200
                assert get_data() == 200

    unittest.main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the <a href="https://docs.python.org/3/library/unittest.mock.html#the-mock-class):" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>return_value: The value returned when the mock is called. By default this is a new Mock (created on first access). See the return_value attribute.</p>
</blockquote>
<p>You are mocking the <code>get</code> function of the <code>requests</code> module. The <code>get</code> method is supposed to return a <code>response</code> object which later you assert its <code>status_code</code>. Therefore you're telling the <code>get</code> mock function to return a mock <code>response</code>. According to the docs, <code>return_value</code> by default returns a <code>Mock</code> object, hence there should be no difference between 1 and 2 except that 1 is explicitly creating a <code>Mock</code> and 2 uses the default behavior.</p>
<p>As a side note, that unit test is testing nothing because you set the <code>status_code</code> on the <code>Mock</code> object and then assert it. It's like:</p>
<pre><code>status_code = 200
assert status_code == 200
</code></pre>
</div>
