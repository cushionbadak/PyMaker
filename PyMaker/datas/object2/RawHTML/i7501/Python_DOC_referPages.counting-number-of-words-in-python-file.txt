<div class="post-text" itemprop="text">
<p>I'm trying to count the number of instances several words appear in a file.</p>
<p>Here is my code:</p>
<pre><code>#!/usr/bin/env python

file = open('my_output', 'r')

word1 = 'wordA'
print('wordA', file.read().split().count(word1))
word2 = 'wordB'
print('wordB', file.read().split().count(word2))
word3 = 'wordC'
print('wordC', file.read().split().count(word3))
</code></pre>
<p>The issue in the code is that it only counts the number of instances of word1. How can this code be fixed to count word2 and word3?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The main problem is that <code>file.read()</code> consumes the file. Thus the second time you search you end up searching an empty file. The simplest solution is to read the file once (if it is not too large) and then just search the previously read text:</p>
<pre><code>#!/usr/bin/env python

with  open('my_output', 'r') as file:
    text =  file.read()

word1 = 'wordA'
print('wordA', text.split().count(word1))
word2 = 'wordB'
print('wordB', text.split().count(word2))
word3 = 'wordC'
print('wordC', text.split().count(word3))
</code></pre>
<p>To improve performance it is also possible to split only once:</p>
<pre><code>#!/usr/bin/env python

with  open('my_output', 'r') as file:
    split_text =  file.read().split()

word1 = 'wordA'
print('wordA', split_text.count(word1))
word2 = 'wordB'
print('wordB', split_text.count(word2))
word3 = 'wordC'
print('wordC', split_text.count(word3))
</code></pre>
<p>Using <code>with</code> will also ensure that the file closes correctly after being read.</p>
</div>
<div class="post-text" itemprop="text">
<p>i think instead of continuously reading and splitting the file , this code would work better if you did : [ this way you could find the term frequency of any number of words you find in the file ]</p>
<pre><code> file=open('my_output' , 'r')
 s=file.read()
 s=s.split()
 w=set(s)
 tf={}
 for i in s:
     tf[i]=s.count(i)
 print(tf)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Can you try this:  </p>
<pre><code>file = open('my_output', 'r')

splitFile = file.read().split()

lst = ['wordA','wordB','wordC']

for wrd in lst:
    print(wrd, splitFile.count(wrd))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short solution using <code>collections.Counter</code> object:</p>
<pre><code>import collections

with open('my_output', 'r') as f:    
    wordnames = ('wordA', 'wordB', 'wordC')
    counts = (i for i in collections.Counter(f.read().split()).items() if i[0] in wordnames)
    for c in counts:
        print(c[0], c[1])
</code></pre>
<hr/>
<p>For the following sample text line:</p>
<pre><code>'wordA some dfasd asdasdword B wordA sdfsd sdasdasdddasd wordB wordC wordC sdfsdfsdf wordA'
</code></pre>
<p>we would obtain the output:</p>
<pre><code>wordB 1
wordC 2
wordA 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in your code the file is consumed (exhausted) in the first line so the next lines will not return anything to count: the first <code>file.read()</code> reads the whole contents of the file and returns it as a string. the second <code>file.read()</code> has nothing left to read and just returns an empty string <code>''</code> - as does the third <code>file.read()</code> .</p>
<hr/>
<p>this is a version that should do what you want:</p>
<pre><code>from collections import Counter

counter = Counter()

with open('my_output', 'r') as file:
    for line in file:
        counter.update(line.split())
print(counter)
</code></pre>
<p>you may have to do some preprocessing (in order to get rid of special characters and <code>,</code> and <code>.</code> and what not).</p>
<p><a href="https://docs.python.org/3/library/collections.html#collections.Counterl" rel="nofollow noreferrer"><code>Counter</code></a> is in the python standard library and is very useful for exactly that kind of thing.</p>
<p>note that this way you iterate once over the file only and you do not have to store the whole file in memory at any time.</p>
<hr/>
<p>if you only want to keep track of certain words you could select only them instead of passing the whole line to a counter:</p>
<pre><code>from collections import Counter
import string

counter = Counter()

words = ('wordA', 'wordB', 'wordC')
chars_to_remove = str.maketrans('', '', string.punctuation)

with open('my_output', 'r') as file:
    for line in file:
        line = line.translate(chars_to_remove)
        w = (word for word in line.split() if word in words)
        counter.update(w)
print(counter)
</code></pre>
<p>i also included an example of what i meant with preprocessing: <a href="https://docs.python.org/3/library/string.html#string.punctuation" rel="nofollow noreferrer"><code>punctuation</code></a> will be removed before counting.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter

#Create a empty word_list which stores each of the words from a line.
word_list=[]

#file_handle to refer to the file object
file_handle=open(r'my_file.txt' , 'r+')

#read all the lines in a file
for line in file_handle.readlines():

    #get each line, 
    #split each line into list of words
    #extend those returned words into the word_list

    word_list.extend(line.split())

# close the file object
file_handle.close()

#Pass the word_list to Counter() and get the dictionary of the words
dictionary_of_words=Counter(word_list)

print dictionary_of_words
</code></pre>
</div>
<span class="comment-copy">Please consider augmenting your answer with some explanations, rather than code only, for future readers</span>
<span class="comment-copy">@etov, Good suggestion. Included the steps for each steps</span>
