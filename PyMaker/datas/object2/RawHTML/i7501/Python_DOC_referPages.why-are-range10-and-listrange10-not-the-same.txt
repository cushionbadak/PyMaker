<div class="post-text" itemprop="text">
<p>Why are <code>[range(10)]</code> and <code>list(range(10))</code> different in Python 3?</p>
<p>Output is as follows:</p>
<pre><code>&gt;&gt;&gt; print([range(10)])
[range(0, 10)]
&gt;&gt;&gt; print(list(range(10)))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Quoting <a href="https://docs.python.org/3/library/stdtypes.html#lists" rel="nofollow noreferrer">the docs</a>, "lists may be constructed in several ways":</p>
<pre><code>[range(10)]
</code></pre>
<p>builds a list of 1 item, the <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range object</a>. In general a comma separated list of items enclosed in square brackets constructs a list of said items.</p>
<pre><code>list(range(10))
</code></pre>
<p>passes the <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range object</a> as an argument to the <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list constructor</a>: </p>
<blockquote>
<p><code>class list([iterable])</code></p>
<p>The constructor builds a list whose items are the same and in the same order as <em>iterable‘s</em> items. <em>iterable</em> may be either a sequence, a container that supports iteration, or an iterator object. If <em>iterable</em> is already a list, a copy is made and returned, similar to <code>iterable[:]</code>. For example, <code>list('abc')</code> returns <code>['a', 'b', 'c']</code> and <code>list( (1, 2, 3) )</code> returns <code>[1, 2, 3]</code>. If no argument is given, the constructor creates a new empty list, <code>[]</code>.</p>
</blockquote>
<p>A range in Python 3 <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow noreferrer">represents an immutable sequence of numbers</a>, so in your case the resulting list is a list of numbers from the range.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>[x]</code> means "make a list whose one element is <code>x</code>".</p>
<p><code>list(x)</code> means "make a list whose elements are the <em>elements of</em> <code>x</code>".</p>
<p><code>range(10)</code> returns an object that prints as <code>range(0, 10)</code> (since it shows the starting value when it prints) and whose elements are the integers from 0 to 9, so <code>[range(10)]</code> gives the one-element list <code>[range(0, 10)]</code> and <code>list(range(10))</code> gives the 10-element list <code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your first example you are simply creating a list object using square bracket notation, and placing a <code>range()</code> object inside. On the other hand, in your second example, you use the <code>list()</code> builtin to <em>convert</em> the <code>range()</code> object to a list.</p>
<p>The difference, is that using <code>[]</code> simply creates a list. It does nothing to the contents passed in. <code>list()</code> on the other hand, will either return an empty list if you pass nothing in, or attempt to convert what you passed in to a list object.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">The documentation for <code>list()</code> notes this</a>:</p>
<blockquote>
<p>The constructor builds a list whose items are the same and in the same order as iterable‘s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a list, a copy is made and returned, similar to iterable[:]. For example, list('abc') returns ['a', 'b', 'c'] and list( (1, 2, 3) ) returns [1, 2, 3]. If no argument is given, the constructor creates a new empty list, [].</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>range()</code> function in python 3.x is similar to the <code>xrange()</code> function in python 2.x.In Python 2.x <code>range()</code> produced a list, and <code>xrange()</code> returned an iterator - a sequence object</p>
<p><strong>In python 2.x</strong></p>
<pre><code>&gt;&gt;&gt; range(1)
[0]
&gt;&gt;&gt; type(range(1))
&lt;type 'list'&gt;
</code></pre>
<p><strong>In python 3.x</strong></p>
<pre><code>&gt;&gt;&gt; range(1)
range(0, 1)
&gt;&gt;&gt; type(range(1))
&lt;class 'range'&gt;
</code></pre>
<p>And to get a list, you can pass the generator in <code>list()</code></p>
<pre><code>&gt;&gt;&gt; print (list(range(10)))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>For further reference , read <a href="http://pythoncentral.io/pythons-range-function-explained/" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">I know this has been asked before, but I can't find a dupe target. Google isn't turning up anything relevant.</span>
<span class="comment-copy">@JanHudec Thanks for replying, but can you expand more on what you mean by that?</span>
<span class="comment-copy">@user2357112 Yes I tried to look it up as well and just decided to ask even if I got down votes, since it's better to learn than worry about points</span>
<span class="comment-copy">@ChristianDean: No, that one won't do. That question is about how to construct an empty list or dict, and the answers focus on timing. It doesn't cover the semantics of using <code>[]</code> or <code>list</code> to create a list with elements.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/23703109/difference-between-using-and-list-in-python">This one</a> looks better, but I think the dict in that question is too distracting for that question to serve as a good []-vs-list dupe target.</span>
