<div class="post-text" itemprop="text">
<pre><code>def f(x):
    return x &lt;5
[x for x in filter(lambda x: f(x), ls)]  #[0,1,2,3,4]
def g(x):
    return lambda: x&lt;5
[x for x in filter(lambda x: g(x), ls)]  # [0,1,2,3,4,5,6,7,8,9]
def h(x):
    return lambda x=x: x&lt;5
[x for x in filter(lambda x: h(x), ls)]  # [0,1,2,3,4,5,6,7,8,9]
</code></pre>
<p>Can anyone explain why g and h are not equivalent to f? 
I think they should be equivalent because x in g and h should bind to the x in the environment that they are defined in (see this <a href="https://stackoverflow.com/questions/233673/lexical-closures-in-python">question on closures</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here <code>g</code> and <code>h</code> return function object, but <code>filter</code> waits an function which returns a boolean or <a href="https://docs.python.org/3.6/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">object wich will convert as boolean</a> . With <code>f</code> it is correct for your expected output, but for <code>g</code> and <code>h</code>, the condition is always <code>true</code> because <code>bool(function object)</code> is always <code>true</code> see <a href="https://docs.python.org/2/library/functions.html#callable" rel="nofollow noreferrer">here</a>, a python function is a callable object.</p>
<p>Take:</p>
<pre><code>def f(x):
    return x &lt; 5

def g(x):
    return lambda: x &lt; 5

def h(x):
    return lambda x=x: x &lt; 5
</code></pre>
<p>I advise to do:</p>
<pre><code>ls = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print([x for x in ls if f(x)]) # list comprehension
# is equivalent to filter(lambda x: x &lt; 5, ls) iterator
# To get list :
# [x for x in filter(lambda x: x &lt; 5, ls)]
# is equivalent to list(filter(lambda x: x &lt; 5, ls))
</code></pre>
<p>Output:</p>
<pre><code>[0,1,2,3,4]
</code></pre>
<p>To call <code>g</code> to do:</p>
<pre><code>g(1)() # True
</code></pre>
<p>Do:</p>
<pre><code> print([x for x in ls if g(x)()])
</code></pre>
<p>Output:</p>
<pre><code>[0,1,2,3,4]
</code></pre>
<p>To call <code>h</code> to do:</p>
<pre><code>h(1)() # True
</code></pre>
<p>or </p>
<pre><code>h(1)(5) # False the second argument overrides the first one
</code></pre>
<p>Do:</p>
<pre><code>print([x for x in ls if h(x)(x)])
# or print([x for x in ls if h(x)()])
</code></pre>
<p>Output:</p>
<pre><code>[0,1,2,3,4]
</code></pre>
<p>See <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">documentation</a> to use <strong>filter</strong>:</p>
<blockquote>
<p>Construct a list from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.</p>
<p>Note that <code>filter(function, iterable)</code> is equivalent to <code>[item for item in iterable if function(item)]</code> if function is not <code>None</code> and <code>[item for item in iterable if item]</code> if function is <code>None</code>.</p>
</blockquote>
<p>See <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">documentation</a> to use <strong>lambda expression</strong>:</p>
<p><code>lambda arguments: expression</code> with :</p>
<pre><code>def &lt;lambda&gt;(arguments):
    return expression
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>g(x)</code> and <code>h(x)</code> are returning the <code>lambda</code> function itself (<code>&lt;function __main__.&lt;lambda&gt;&gt;</code>), but not executing it.</p>
<p>Try for example: <code>g(3)()</code> that will return the desired value.</p>
<p>Therefore running <code>g(x)()</code> or <code>h(x)()</code> will work:</p>
<pre><code>[x for x in filter(lambda x: g(x)(), ls)]  # [0,1,2,3,4]
[x for x in filter(lambda x: h(x)(), ls)]  # [0,1,2,3,4]
</code></pre>
<p>While running only <code>g(x)</code> or <code>h(x)</code> will return the <code>lambda</code> function itself per each value, which is equivalent to <code>True</code> statement in <code>filter</code> function, and therefore no value is filtered.</p>
<hr/>
<p>and of course, in this case you can just run:</p>
<pre><code>filter(lambda x: x&lt;5, ls)
</code></pre>
<p>or even a <a href="https://stackoverflow.com/questions/3013449/list-filtering-list-comprehension-vs-lambda-filter">better list comprehension approach</a>:</p>
<pre><code>[x for x in ls if x&lt;5]
</code></pre>
</div>
<span class="comment-copy"><code>f</code> returns a boolean. <code>g</code> and <code>h</code> return functions. Why would they be equivalent?</span>
<span class="comment-copy">a function in a conditional statement always considered as true.</span>
<span class="comment-copy">I updated the post to clarify this point thx ;)</span>
