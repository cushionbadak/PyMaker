<div class="post-text" itemprop="text">
<p>I have this code in Python</p>
<pre><code>def receipt(array):
  sum = 0.0
  for i in range(len(array)):
    sum = sum + array[i]
  return sum

array = []

while True:
  print("Calculating Price")
  n = input("Enter a price: ")
  if n == "":
    print("Goodbye")
    break
  array.append(n)
  totalCost = receipt(n)
  print("The total cost is " + str(totalCost))
</code></pre>
<p>And I'm wondering why this code won't work. There seems to be some error in the fourth line</p>
<pre><code>sum = sum + array[i]
</code></pre>
<p>But I can't figure out which part of it is wrong. I believe I used the array[i] component correctly. Perhaps it's a string issue?</p>
<blockquote>
<p><strong>Question:</strong></p>
</blockquote>
<ol>
<li>Which part of the code doesn't work?</li>
<li>What is my error?</li>
</ol>
<p>I'm relatively new to computer science in general. Thanks for the help. Anything is appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have some problems, I will comment one by one:</p>
<p>First, you had some indentation problems, be careful with that.
The rest are comments in the code</p>
<blockquote>
<p>update</p>
</blockquote>
<pre><code>def receipt(array):
  sum = 0.0
  for i in range(len(array)):
    sum = sum + array[i]
  return sum
array = []
while True:
  print("Calculating Price")
  n = input("Enter a price: ") #If you convert the str into float here it will cause an error in the if
  if n == "": #here, when you hit enter, it sends the "" (empty string)
    print("Goodbye")
    break
  array.append(float(n)) #So an option is transform the string here
  totalCost = receipt(array) #and here, you gave to receipt() function the wrong param, you gave "n" and it was waiting for an array 
  print("The total cost is " + str(totalCost))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I ran your code and got this error:</p>
<pre><code>$ python test.py
Calculating Price
Enter a price: 24
Traceback (most recent call last):
  File "test.py", line 14, in &lt;module&gt;
    totalCost = receipt(n)
  File "test.py", line 4, in receipt
    sum = sum + array[i]
TypeError: unsupported operand type(s) for +: 'float' and 'str'
</code></pre>
<p>This means that in your <code>sum = sum + array[i]</code> line, the types don't match up. You need to wrap <code>array[i]</code> in a <code>float()</code> function to match <code>array[i]</code> to the type of <code>sum</code>, which is a float since you initialized it to <code>0.0</code>. The docs say the <code>input()</code> function returns a string, and since you're appending <code>n</code> to <code>array</code>, you are trying to sum a string with a float. The line should look like this:</p>
<pre><code>  sum = sum + float(array[i])
</code></pre>
<p>Try running it again and the code works. <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer">Here</a> is the documentation for <code>input()</code></p>
<p>Edit: now to fix the issues were were having with the sum.</p>
<p>Here is a version of your code I have revised with corrections to do the addition the way you want.</p>
<pre><code>  1 def receipt(sumvar, n):
  2   sumvar = sumvar + float(n)
  3   return sumvar
  4
  5 array = []
  6 sumvar = 0.0
  7
  8 while True:
  9   print("Calculating Price")
 10   n = input("Enter a price: ")
 11   if n == "":
 12     print("Goodbye")
 13     break
 14   totalCost = receipt(sumvar, n)
 15   sumvar = totalCost
 16   print("The total cost is " + str(totalCost))
</code></pre>
<p>As mentioned by others, <code>sum</code> isn't a great variable name so I've renamed it <code>sumvar</code>. Notice the <code>sumvar</code> declaration that is outside the function. When you initialize <code>sumvar</code> inside <code>receipt()</code> like you did, you will always be adding <code>n</code> to <code>0.0</code>. I doubt this is what you want. Instead, you want to keep a running total of the item count, which needs to be passed into the function. I've also eliminated the loop from your function. This loop was actually iterating over the characters in <code>array</code>, not the elements as you expected it to.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of there are several things wrong. I will explain each and everything.
Here is your complete working code:</p>
<pre><code>def receipt(array):
  total = 0.0
  for i in array:
    total = total + i
  return total

array = []

while True:
  print("Calculating Price")
  n = input("Enter a price: ")
  if n=="":
    print("Goodbye")
    break
  array.append(float(n))
  totalCost = receipt(array)
  print("The total cost is " + str(totalCost))
</code></pre>
<h1>Your Mistakes:</h1>
<p>1)<code>array.append(n)</code> - First one. Pretty common for beginner. </p>
<p><code>input()</code> in python gets user input as <strong>string</strong>. So your <code>n</code> is a <strong>String</strong>.</p>
<p>See there are <a href="https://en.wikibooks.org/wiki/Python_Programming/Data_Types" rel="nofollow noreferrer">data types</a> in all languages. And Python is a <strong>Strongly typed language</strong> while <strong>perl is not</strong>. How to say if a language is strongly typed or weakly typed ? Simple. Try this in your interpreter.</p>
<pre><code>&gt;&gt;&gt; a=5
&gt;&gt;&gt; b='9'
&gt;&gt;&gt; a+b
Traceback (most recent call last):
  File "&lt;pyshell#5&gt;", line 1, in &lt;module&gt;
    a+b
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</code></pre>
<p>See the error now try this,</p>
<pre><code>&gt;&gt;&gt; a=5
&gt;&gt;&gt; b='9'
&gt;&gt;&gt; a+int(b)
14
</code></pre>
<p>Works perfectly fine right. Python doesn't allow just <code>a+b</code> while some languages do example <em>perl</em>. Read more about it. So you can't add them you have to <strong>typecast</strong>. So change that into</p>
<pre><code>array.append(int(n)) 
</code></pre>
<p>or</p>
<pre><code>array.append(float(n))
</code></pre>
<p>If you are going to work with float values.</p>
<p>2) <code>totalCost = receipt(n)</code> See you are passing <code>n</code> to the function. But your function definition has <code>def receipt(array):</code>. What actually happens here is</p>
<pre><code>receipt(n) ----&gt; (calls) ----&gt;def receipt(array):
</code></pre>
<p>Where <code>n ------&gt; array</code> So your <code>array</code> is nothing but <code>n</code>. What you should do intead is</p>
<pre><code>totalCost = receipt(array)
</code></pre>
<p>3) <code>sum = 0.0</code> <strong>NEVER</strong> I said never use built-in or keyword names (ex ample : sum,min,max,int,str etc) as variable names. Read more about naming in <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a></p>
<p>So maybe rename <code>sum</code> to <code>sum_</code> (it's the convention to be followed) However why can't you just rename <code>sum</code> to <code>total</code> much simpler right?</p>
<p>4) And <strong>finally</strong></p>
<pre><code>for i in range(len(array)):
    sum = sum + array[i]
</code></pre>
<p>Why <code>range(len(array))</code> when you can simply do <code>for i in array:</code></p>
<p>Can't understand this take a look at this example:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; for i in a:
    print(i)


1
2
3
</code></pre>
<p>See <code>for item in something</code> would just take <strong>each and every item</strong> from a group of something ( iterable (list,tuple,set etc..))</p>
<p>So just change those lines to</p>
<pre><code>  for i in array:
    total = total + i
</code></pre>
<p>And <strong>voila</strong> you got what you wanted,</p>
<p>Output:</p>
<pre><code>Calculating Price
Enter a price: 10
The total cost is 10.0
Calculating Price
Enter a price: 20
The total cost is 30.0
Calculating Price
Enter a price: 15
The total cost is 45.0
Calculating Price
Enter a price: 
Goodbye
</code></pre>
<p><strong>UPDATE:</strong></p>
<p>As mentioned in comments you need to learn more about <strong>indentation</strong>. Check out the link in the comments.</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't use <code>sum</code> as a variable, since it's a built-in in Python, besides, convert your <code>array[i]</code> to a float type when adding it to another float, also notice you never use your initialized <code>array</code>, you are missing that when calculating <code>totalCost</code>:</p>
<pre><code>def receipt(array):
    summ = 0.0
    for i in range(len(array)):
        summ = summ + float(array[i])
    return summ

array = []
while True:
    print("Calculating Price")
    n = input("Enter a price: ")
    if n == "":
        print("Goodbye")
        break
    array.append(n)
    totalCost = receipt(array)
    print("The total cost is " + str(totalCost))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have corrected what is causing your issue, you are in fact passing in 'n' into receipt instead of 'array'. </p>
<pre><code>def receipt(array):
    sum = 0.0
    for i in range(len(array)):
        sum = sum + array[i]
    return sum

array = []
while True:
    print('Calculating Price')
    n = input("Enter a price: ")
    if n == "":
        print("Goodbye")
        break
    array.append(n)
    totalCost = receipt(array)  #receipt takes a list as a parameter (what you call array)
    print("The total cost is " + str(totalCost))
</code></pre>
<p>Additional issues are:</p>
<ul>
<li>indentation (I suspect that was just copy paste)</li>
<li>input will also give you errors the way you are using it, take a look at <a href="https://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response">this</a> to solve that issue</li>
<li>Consider also making your loop based on the value of n as while true is generally unsafe</li>
<li>or at least changing your if statement to be 'not n' as point out <a href="https://stackoverflow.com/questions/26226489/how-do-you-get-python-to-detect-for-no-input">here</a> is more pythonic. Also in the future make sure to note the version of python you are using.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Dont use <code>sum</code> as a variable name, it is a Python <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">built-in</a>.</p>
<p>Fixed:</p>
<pre><code>def receipt(array):
    total = 0.00 # avoiding 'sum'
    for price in array:
        total += float(price) # equivalent to 'total = total + float(price)'
    return total

array = []
print ("Calculating Price...") # outside 'while' to not reprint each time!

while True:
    price = input("Enter a price: ")
    if not price: # equivalent to 'if price is False, or 0 in CompSci speak
        print ("Goodbye!")
        break
    array.append(price)
    total = receipt(array)
    print("The current total cost is", total) # no need to convert to str()
</code></pre>
<p>Some words of advice:</p>
<ul>
<li>When writing a function, its better to be explicit rather than
implicit. So use variables that make sense!</li>
<li>We can use the same variable names because Python uses the <a href="https://stackoverflow.com/questions/291978/short-description-of-the-scoping-rules/292502#292502">LEBG
rule</a>
for variable scope.</li>
<li>When calculating a price (which we know usually ends in 2 decimals)
its better to use integers rather than floats as you will run into
the [problem](
<a href="https://stackoverflow.com/questions/455612/limiting-floats-to-two-decimal-points">Limiting floats to two decimal points</a>)
with floating point numbers.</li>
</ul>
</div>
<span class="comment-copy">For starters, your indentation on your <code>def</code> is wrong. Cannot tell what belongs to what here.</span>
<span class="comment-copy">Make sure your indentation is correct, because Python is sensitive to how things are indented. After the first line, you need to indent everything that's part of the <code>receipt</code> function.</span>
<span class="comment-copy">@McGlothlin Oops, in my program, I had it all indented correctly. I'll go ahead and edit that in regardless though.</span>
<span class="comment-copy">@Crescendo I hope you are learning python, but your solution is kind of inefficient for long arrays. you are passing the entire array in the function and performing sum over its elements. You can use the technique of memoization so that you add only new element to the result rather than recomputing the entire result</span>
<span class="comment-copy">@YamanJain Yes, I'm learning Python. What is this "memorization" technique that you said?</span>
<span class="comment-copy">@I tried that, and Python said that it could not transform string to float. Any ideas on what is wrong still? I made the changes.</span>
<span class="comment-copy">@Crescendo that's odd, it worked for me, which python are you using?</span>
<span class="comment-copy">@Crescendo try change to <code>n = float(eval(input("Enter a price: ")))</code></span>
<span class="comment-copy">I have the latest version available. Python 3.6 I believe. If I add the eval(), I get "unexpected EOF while parsing" error.</span>
<span class="comment-copy">@Crescendo to avoid this error, you should just replace the line with <code>array.append(float(n))</code>, and let your input be as the original one: <code>n = input("Enter a price: ")</code>, this way you avoid the error when trying to stop inserting values. Or simply convert to float inside the function, as my answer suggests.</span>
<span class="comment-copy">Is a very good way to do it, thanks for the comments, and this is a great answer, is a plus one :)</span>
<span class="comment-copy">One more thing you forgot to mention; his indention is wonky. <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow noreferrer">The PEP8 standard is to indent the code by four spaces</a>.</span>
<span class="comment-copy">@ChristianDean updated and mentioned about it. The code I saw was indented. Probably someone edited it perhaps.</span>
<span class="comment-copy">Nice answer! very complete, is a plus one :)</span>
<span class="comment-copy">you are amazing buddy @DamianLattenero :)</span>
<span class="comment-copy">thanks for the comments, this is a very good answer too :), and is a plus one</span>
<span class="comment-copy"><i>"while true is generally unsafe"</i> - Meh, not really. As long as you make sure you have a break condition, it's perfectly fine to use a <code>while True</code> loop. It's really no less safe than recursion. I like the rest of your answer, but this part just bugs me a bit :P</span>
<span class="comment-copy">It bugs me too. <code>while True</code> or <code>while condition</code>--&gt; would equally be <code>while true</code> as long as condition is true .so both are almost same as long as you have a <code>break</code> based on some condition inside <code>while</code> .</span>
