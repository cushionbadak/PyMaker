<div class="post-text" itemprop="text">
<p>I want to use the Python 3 module <a href="https://docs.python.org/3/library/urllib.html" rel="nofollow noreferrer">urllib</a> to access an Elasticsearch database at <code>localhost:9200</code>. My script gets a valid request (generated by Kibana) piped to STDIN in JSON format.</p>
<p>Here is what I did:</p>
<pre><code>import json
import sys
import urllib.parse
import urllib.request

er = json.load(sys.stdin)
data = urllib.parse.urlencode(er)
data = data.encode('ascii')
uri = urllib.request.Request('http://localhost:9200/_search', data)
with urllib.request.urlopen(uri) as repsonse:
    response.read()
</code></pre>
<p>(I understand that my <code>repsonse.read()</code> doesn't make much sense by itself but I just wanted to keep it simple.)</p>
<p>When I execute the script, I get an</p>
<pre><code>HTTP Error 400: Bad request
</code></pre>
<p>I am very sure that the JSON data I'm piping to the script is correct, since I had it printed and fed it via <code>curl</code> to Elasticsearch, and got back the documents I expected to get back.</p>
<p>Any ideas where I went wrong? Am I using <code>urllib</code> correctly? Do I maybe mess up the JSON data in the <code>urlencode</code> line? Am I querying Elasticsearch correctly?</p>
<p>Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>With requests you can do one of two things</p>
<p>1) Either you create the string representation of the json object yourself and send it off like so:</p>
<pre><code>payload = {'param': 'value'}
response = requests.post(url, data=json.dumps(payload))
</code></pre>
<p>2) Or you have requests do it for you like so:</p>
<pre><code>payload = {'param': 'value'}
response = requests.post(url, json = payload)
</code></pre>
<p>So depending on what actually comes out of the sys.stdin call (probably - as Kibana would be sending that if the target was ElasticSearch - a string representation of a json object == equivalent of doing json.dumps on a dictionary), but you might have to adjust a bit depending on the output of sys.stdin.</p>
<p>My guess is that your code could work by just doing so:</p>
<pre><code>import sys
import requests
payload  = sys.stdin
response = requests.post('http://localhost:9200/_search', data=payload)
</code></pre>
<p>And if you then want to do some work with it in Python, requests has a built in support for this too. You just call this:</p>
<pre><code>json_response = response.json()
</code></pre>
<p>Hope this helps you on the right track. For further reading om json.dumps/loads - <a href="https://stackoverflow.com/questions/32911336/what-is-the-difference-between-json-dumps-and-json-load/32911421">this answer</a> has some good stuff on it.</p>
</div>
<div class="post-text" itemprop="text">
<p>For anyone who doesn't want to use requests (for example if you're using IronPython where its not supported):</p>
<pre><code>import urllib2
import json
req = urllib2.Request(url, json.dumps(data), headers={'Content-Type': 'application/json'})
response = urllib2.urlopen(req)
</code></pre>
<p>Where 'url' can be something like this (example below is search in index):</p>
<pre><code>http://&lt;elasticsearch-ip&gt;:9200/&lt;index-name&gt;/_search/
</code></pre>
</div>
<span class="comment-copy">you probably need to specify a content type... see here: <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.Request" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> .. if you don't specify a content-type, it will default to application/x-www-form-urlencoded , which isn't what you sent. If you don't mind using an external library, requests (<a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer">docs.python-requests.org/en/master</a>) makes this a little easier...</span>
<span class="comment-copy">Could you provide an example of the data object, that you pass to ElasticSearch? Btw I use the requests library for query to ES. It's super straightforward. Just curious - why use Kibana to create the payload (data) and what do you intend to do with the response once you get pass the 400?</span>
<span class="comment-copy">@CorleyBrigman: I wish I could use the request library. Unfortunately, I am working in high security environment and they are very reluctant to install anything more then what is strictly needed.</span>
<span class="comment-copy">@jlaur: The data is normally not created with Kibana, I just did it for testing purposes. And I don't know what they plan to do with the extracted data (my goal is to simple extract it from shell via this script, process it a little further, and that's it).</span>
<span class="comment-copy">I would start with adding <code>headers={'Content-Type': 'application/json'}</code> to your request then... I think the error is just that you are passing json, but because you passed data with no header, it assigns the content type to 'application/x-www-form-urlencoded' instead, and it doesn't match.</span>
<span class="comment-copy">Thanks! If I fail to get my script working with urllib, I will try to convince them to install requests. But I'm very sceptical that they will follow this suggestion.</span>
<span class="comment-copy">Aaah. Check out this SO question on how to do a POST request with json payload using urllib then: <a href="https://stackoverflow.com/a/4998300/8240959">stackoverflow.com/a/4998300/8240959</a> and this one <a href="https://stackoverflow.com/a/9746432/8240959">stackoverflow.com/a/9746432/8240959</a></span>
