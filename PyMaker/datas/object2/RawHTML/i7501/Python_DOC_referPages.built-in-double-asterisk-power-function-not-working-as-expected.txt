<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/23759202/calculation-error-with-pow-operator">Calculation error with pow operator</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>This prints -2.4:</p>
<pre><code>print(-3**0.8)
</code></pre>
<p>But this prints an imaginary number...?</p>
<pre><code>a = -3
b = 0.8
print(a**b)
</code></pre>
<p>I can't figure out what is causing this and this problem is breaking my program. How do you make it so that the second statement outputs the same as the first in a general case that works for positive and negative values for <code>a</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/reference/expressions.html#the-power-operator" rel="nofollow noreferrer">the Python 3.6 documentation</a>: </p>
<blockquote>
<h2>6.5. The power operator</h2>
<p>The power operator binds more tightly than unary operators on its left; it binds less tightly than unary operators on its right. The syntax is:</p>
<pre><code>power ::=  ( await_expr | primary ) ["**" u_expr]
</code></pre>
<p>Thus, in an unparenthesized sequence of power and unary operators, the operators are evaluated from right to left (this does not constrain the evaluation order for the operands): <code>-1**2</code> results in <code>-1</code>.</p>
</blockquote>
<p>Thus, in the first example:</p>
<pre><code>&gt;&gt;&gt; -3 ** 0.8
-2.4082246852806923
</code></pre>
<p>It's evaluated <em>right to left</em> as <code>**</code> has higher precedence than unary <code>-</code>, binding tighter -- so here, <code>3 ** 0.8</code> is evaluated first, then the unary <code>-</code> operator is applied for a negative value. In the second example however, the expression is equivalent <code>(-3) ** 0.8</code> as <code>-3</code> is stored in a name, and evaluation results is an imaginary number:</p>
<pre><code>&gt;&gt;&gt; a = -3
&gt;&gt;&gt; b = 0.8
&gt;&gt;&gt; a ** b
(-1.9482946966653392+1.4155189542146738j)
</code></pre>
<p>A solution would be to calculate the result without unary operators, <em>then applying a sign as necessary</em>, per <a href="https://stackoverflow.com/a/44992633/5647260">Shakar Bhattarai's answer</a>:</p>
<pre><code>&gt;&gt;&gt; int(a / abs(a)) * (abs(a) ** b)
-2.4082246852806923
</code></pre>
<p>The first part, <code>int(a / abs(a))</code> evaluates to either <code>-1.0</code> or <code>1.0</code> depending on if <code>a</code> is negative or not, basically applying the sign. It then multiplies that by the result of <code>a ** b</code> regardless of <code>a</code>'s sign. That will first compute <code>a ** b</code> disregarding it's sign, then applying the sign as necessary. This will get rid of the discrepancy. You could apply the same concept with <a href="https://docs.python.org/3.6/library/math.html#math.copysign" rel="nofollow noreferrer"><code>math.copysign</code></a>:</p>
<pre><code>&gt;&gt;&gt; math.copysign(1, a) * (abs(a) ** b)
-2.4082246852806923
</code></pre>
<p>This will just copy the sign from <code>a</code> to <code>1</code>, which will give <code>-1.0</code> or <code>1.0</code> based on negativity.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because of the precedence of the power operator. The power operator binds tighter than unary operators. So:</p>
<pre><code>-3 ** 0.8
</code></pre>
<p>is evaluated as</p>
<pre><code>-(3 * 0.8)
</code></pre>
<p>You can see how Python parses your code using the <code>ast</code> module:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.dump(ast.parse('-3 ** 0.8'))
'Module(body=[Expr(value=UnaryOp(op=USub(), operand=BinOp(left=Num(n=3), op=Pow(), right=Num(n=0.8))))])'
&gt;&gt;&gt; 
</code></pre>
<p>In the above, the <code>3 ** 0.8</code> is treated as one expression with <code>**</code> being the operator. The unary minus is then applied to the value of the inner expression.</p>
<p>However, in your second example the values are stored in variables, so the precedence does not affect the expression. So <code>a ** b</code> is equivlent to <code>(-3) ** 0.8</code></p>
<p>The solution is to bind the unary minus to the three using parenthesis:</p>
<pre><code>&gt;&gt;&gt; (-3) ** 0.8
(-1.94829469666534+1.4155189542146727j)
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The ** operator has the highest precedence over all other operators. Hence when you use</p>
<pre><code>print(-3**0.8)
</code></pre>
<p>python first evaluates the exponential and then negates it.</p>
<p>But when you run</p>
<pre><code>a = -3
b = 0.8
print(a**b)
</code></pre>
<p>a has implicitly been negated first. Hence the result is effectively a imaginary number (a negative number raised to a fractional exponent)</p>
<p>To solve your issue, you could do something like</p>
<pre><code> print (int(a/abs(a))*(abs(a)**b))
</code></pre>
</div>
