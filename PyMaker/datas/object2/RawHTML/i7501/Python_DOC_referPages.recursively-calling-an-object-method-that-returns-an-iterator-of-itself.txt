<div class="post-text" itemprop="text">
<p>I'm currently writing a project that requires third party code that uses a method that returns an iterator of itself, an example of how this would look in my code:</p>
<pre><code>def generate():
    for x in obj.children():
        for y in x.children():
            for z in y.children():
                yield z.thing
</code></pre>
<p>Currently this simply clutters my code, and becomes hard to read after 3 levels. Ideally I'd get it to do something like this:</p>
<pre><code>x = recursive(obj, method="children", repeat=3).thing
</code></pre>
<p>Is there a built in way to do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Starting from python3.3, you can use the <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator" rel="noreferrer"><code>yield from</code></a> syntax to yield an entire generator expression. </p>
<p>So, you can modify your function a bit, to take a couple of parameters:</p>
<pre><code>def generate(obj, n):
    if n == 1:
        for x in obj.children():
            yield x.thing
    else:
        for x in obj.children():
            yield from generate(x, n - 1)
</code></pre>
<p>The <code>yield from</code> expression will yield the entire generator expression of the recursive call.</p>
<p>Call your function like this:</p>
<pre><code>x = generate(obj, 3)
</code></pre>
<p>Note that this returns you a generator of <code>x.things</code>.</p>
<hr/>
<p>Based on your particular requirement, here's a more generic version using <a href="https://docs.python.org/3/library/functions.html#getattr" rel="noreferrer"><code>getattr</code></a> that works with arbitrary attributes.</p>
<pre><code>def generate(obj, iterable_attr, attr_to_yield, n):
    if n == 1:
        for x in getattr(obj, iterable_attr):
            yield getattr(x, attr_to_yield)
    else:
        for x in getattr(obj, iterable_attr):
            yield from generate(x, iterable_attr, attr_to_yield, n - 1)
</code></pre>
<p>And now, call your function as: </p>
<pre><code>x = generate(obj, 'children', 'thing', 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>yield from</code> example above is good, but I seriously doubt the level/depth param is needed.  A simpler / more generic solution that works for any tree:</p>
<pre><code>class Node(object):
  def __init__(self, thing, children=None):
    self.thing = thing
    self._children = children
  def children(self):
    return self._children if self._children else []

def generate(node):
  if node.thing:
    yield node.thing
  for child in node.children():
    yield from generate(child)

node = Node('mr.', [Node('derek', [Node('curtis')]), Node('anderson')])
print(list(generate(node)))
</code></pre>
<p>Returns:</p>
<pre><code>$ python3 test.py
['mr.', 'derek', 'curtis', 'anderson']
</code></pre>
<p>Note this will return the current node's <code>thing</code> before any of its children's.  (IE it expresses itself on the way down the walk.)  If you'd prefer it to express itself on the way back up the walk, swap the <code>if</code> and the <code>for</code> statements.  (DFS vs BFS)  But likely doesn't matter in your case (where I suspect a node has either a <code>thing</code> or children, never both).</p>
</div>
<div class="post-text" itemprop="text">
<p>If using Python 2.7 you need to keep your own stack of iterables and do the looping:</p>
<pre><code>from operator import methodcaller

def recursive(obj, iterater, yielder, depth):
    iterate = methodcaller(iterater)
    xs = [iterate(obj)]
    while xs:
        try:
            x = xs[-1].next()
            if len(xs) != depth:
                xs.append(iterate(x))
            else:
                yield getattr(x, yielder)
        except StopIteration:
            xs.pop()
</code></pre>
<p>This a specialized case of a more general recursive ichain from iterable function:</p>
<pre><code>def recursive_ichain(iterable_tree):
    xs = [iter(iterable_tree)]
    while [xs]:
        try:
            x = xs[-1].next()
            if isinstance(x, collections.Iterable):
                xs.append(iter(x))
            else:
                yield x
        except StopIteration:
            xs.pop()
</code></pre>
<p>And some test objects:</p>
<pre><code>class Thing(object):
    def __init__(self, thing):
        self.thing = thing

class Parent(object):
    def __init__(self, *kids):
        self.kids = kids

    def children(self):
        return iter(self.kids)

test_obj = Parent(
    Parent(
        Parent(Thing('one'), Thing('two'), Thing('three')),
        Parent(Thing('four')),
        Parent(Thing('five'), Thing('six')),
    ),
    Parent(
        Parent(Thing('seven'), Thing('eight')),
        Parent(),
        Parent(Thing('nine'), Thing('ten')),
    )
)
</code></pre>
<p>And testing it:</p>
<pre><code>&gt;&gt;&gt;for t in recursive(test_obj, 'children', 'thing', 3):
&gt;&gt;&gt;    print t
one
two
three
four
five
six
seven
eight
nine
ten
</code></pre>
<p>Personnaly I'd be inclined to change the <code>yield getattr(x, yielder)</code> to <code>yield x</code> to access the leaf objects themselves and explicitly access the thing. i.e.</p>
<pre><code>for leaf in recursive(test_obj, 'children', 3):
    print leaf.thing
</code></pre>
</div>
<span class="comment-copy">How about a generic solution though, this might work in this instance but isn't there a built in way to do this already?</span>
<span class="comment-copy">I meant more as in calling <code>children</code> and <code>x.thing</code> dynamically</span>
<span class="comment-copy">@Paradoxis You sure can. Assuming <code>children</code> returns an iterable. Let me modify my answer.</span>
