<div class="post-text" itemprop="text">
<p>I'm importing from a .txt file containing some David Foster Wallace that I copy-pasted from a PDF. Some words ran off the page and so come in the form of </p>
<pre><code>"interr- upted"
</code></pre>
<p>I was going to sanitize it by using something like:</p>
<pre><code>with open(text, "r", 0) as bookFile:
    bookString = bookFile.read().replace("- ", "")
</code></pre>
<p>Except... the man also uses some weird constructions in his writing. Things like:</p>
<pre><code>"R - - d©"
</code></pre>
<p>for the brand name bug spray Raid©. I'm left with "R d©" obviously, but is there a way to make it .replace() instances of "- " but not instances of " - "? Or do I need to turn everything into lists and do operations to everything that way? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a regular expression with a negative lookbehind assertion to check the previous character, and <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> to replace matches with an empty string.</p>
<p><code>'(?&lt;! )- '</code> is a regular expression, matching all instances of <code>'- '</code>, <em>not</em> preceded by a single space character (refer to <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">this</a> section for the syntax). <code>re.sub('(?&lt;! )- ', '', input_string)</code> will replace all occurrences of the <code>'(?&lt;! )- '</code> pattern in <code>input_string</code> with <code>''</code> (empty string) and return the result.</p>
<p>Examples:</p>
<pre><code>In [1]: import re

In [2]: re.sub('(?&lt;! )- ', '', 'interr- upted')
Out[2]: 'interrupted'

In [3]: re.sub('(?&lt;! )- ', '', 'R - - d©')
Out[3]: 'R - - d©'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use lookbehinds and lookaheads to make sure you substitute only the occurrences that need to be substituted:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex_pattern = '(?&lt;=[a-z])(- )(?=[a-z])'
&gt;&gt;&gt; re.sub(regex_pattern, '', "interr- upted", re.I)
'interrupted'
</code></pre>
<p>And,</p>
<pre><code>&gt;&gt;&gt; re.sub(regex_pattern, '', "R - - d©")
'R - - d©'
</code></pre>
<p>The latter is not affected.</p>
</div>
<div class="post-text" itemprop="text">
<p>is this what you need?</p>
<pre><code>In [23]: import re
In [24]: re.sub(r'- ', '', '"R - - d"')
Out[24]: '"R d"'
</code></pre>
<p><a href="https://stackoverflow.com/questions/31697043/replace-exact-substring-in-python">This</a> link can help you.</p>
<p>HTH</p>
</div>
<span class="comment-copy">How would you define this condition? Is it only if there are one or more letters, hyphen, space, one or more letters?</span>
<span class="comment-copy">Good point. I want the case to be more general, so that when I do the same to future books any instance of "a - - b" won't get thrown away, but similar run-off words in the form of "ab- c" will get turned into "abc".</span>
<span class="comment-copy">This worked perfectly - my input was just the entire text file as one string, and it truncated every instance of "- " without destroying "R - - d©" or "f - - k" or any regular hyphenated words. Is there any chance you could explain what's going on in the re.sub() args you chose? The documentation is a little confusing, never used regular expressions before.</span>
<span class="comment-copy">@LukeMcPuke I tried to explain it better, check the updated answer. For the complete explanation of that regular expression see the linked documentation and <a href="https://regex101.com/r/5HNEha/1" rel="nofollow noreferrer">this</a> page</span>
<span class="comment-copy">No, OP very clearly mentioned this is not what they need.</span>
