<div class="post-text" itemprop="text">
<p>I have bunch of lists containing strings, I wanna remove some string dates such as  '2017-09-11', '2017-09-17', '2015-09-11' from these dictionaries. How can I do it?</p>
<pre><code>WNT5 = ['RBPMS', 'TRIM2', 'GPM6A', 'TACC1', '2017-09-06', 'PARVA', 'RPS28', 'MAN1C1', 'LOXL2', 'PTPRB', 'STAG2', 'SFRS15', 'PDS5B', 'SWAP70', 'ZMIZ2', 'TPD52', 'OGT', 'RSU1', 'TGFBR3', 'NFAT5', 'ANGPT1', 'SLC25A36', 'NFIB', 'FBXO9', 'N4BP2L2', 'CCDC69', 'MYH11', 'LPP', 'USP34', 'ITIH5', 'GLS', 'SORBS2', 'TMEM43', 'ANK3', 'PSIP1', 'SYNPO2', 'C9orf5', 'BCL2', 'NSMAF', 'MLXIP', 'PDE8B', 'RABGAP1', 'RPS15A', 'NLRP12', 'AKAP1', 'PLK1S1', 'SLC4A4', 'COBLL1', 'ARHGEF7', 'CD47', 'TMEM132A', 'TNK2', 'WWC1', 'RPL22', 'NMT2', 'TNXB', 'SCPEP1', 'TTLL5', 'MAGI1', 'GOLGA2B', 'TIMELESS', 'ITPR1', 'ALMS1', 'TLE2', 'MAPT', 'DIP2A', 'PCGF3', 'CYP3A4', 'RALGPS1', 'N4BP2L1', 'DIO2', 'PPP1R3C', 'LRIG1', 'NSMCE4A', 'GPX2', 'SETBP1', 'SLC6A16', 'ARL5A']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, you will get a new list without date string:</p>
<pre><code>&gt;&gt;&gt; def is_date_string(s):
...     # return re.search(r'^\d{4}-\d{2}-\d{2}$')
...     return '-' in s and s[:4].isdigit()  # NOTE not perfect, change as you need
... 
&gt;&gt;&gt; [s for s in WNT5 if not is_date_string(s)]
['RBPMS', 'TRIM2', 'GPM6A', 'TACC1', 'PARVA', 'RPS28',
 'MAN1C1', 'LOXL2', 'PTPRB', 'STAG2', 'SFRS15', 'PDS5B', 'SWAP70',
 'ZMIZ2', 'TPD52', 'OGT', 'RSU1', 'TGFBR3', 'NFAT5', 'ANGPT1',
 'SLC25A36', 'NFIB', 'FBXO9', 'N4BP2L2', 'CCDC69', 'MYH11', 'LPP',
 'USP34', 'ITIH5', 'GLS', 'SORBS2', 'TMEM43', 'ANK3', 'PSIP1',
 'SYNPO2', 'C9orf5', 'BCL2', 'NSMAF', 'MLXIP', 'PDE8B', 'RABGAP1',
 'RPS15A', 'NLRP12', 'AKAP1', 'PLK1S1', 'SLC4A4', 'COBLL1', 'ARHGEF7',
 'CD47', 'TMEM132A', 'TNK2', 'WWC1', 'RPL22', 'NMT2', 'TNXB',
 'SCPEP1', 'TTLL5', 'MAGI1', 'GOLGA2B', 'TIMELESS', 'ITPR1', 'ALMS1',
 'TLE2', 'MAPT', 'DIP2A', 'PCGF3', 'CYP3A4', 'RALGPS1', 'N4BP2L1',
 'DIO2', 'PPP1R3C', 'LRIG1', 'NSMCE4A', 'GPX2', 'SETBP1', 'SLC6A16',
 'ARL5A']
</code></pre>
<p>To replace the <code>WNT5</code>, assign back the list comprehension:</p>
<pre><code>WNT5 = [s for s in WNT5 if not is_date_string(s)]
</code></pre>
<p>or using slice (to replace items in-place):</p>
<pre><code>WNT5[:] = [s for s in WNT5 if not is_date_string(s)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To remove from list, you can use the remove statement like so:</p>
<pre><code>WNT5.remove('b')
</code></pre>
<p>This will delete the first occurrence of that element ('b'). To delete all elements, you can use list comprehension.</p>
<pre><code>&gt;&gt;&gt; WNT5 = [x for x in WNT5 if len(x) != 10]
&gt;&gt;&gt; print(WNT5)
</code></pre>
<p>This assumes the only strings of length 10 are the date strings.</p>
<p>Hope it helps!</p>
<p><strong>EDIT</strong></p>
<p>I answered a little late, and everyone had better answers, but I also stumbled accross this function on another <a href="https://stackoverflow.com/questions/25341945/check-if-string-has-date-any-format">SO question</a> that might be useful:</p>
<pre><code>from dateutil.parser import parse
def is_date(string):
    try: 
        parse(string)
        return True
    except ValueError:
        return False
</code></pre>
<p>Then you have a function you can run with to make sure that the strings you are excluding are only dates (in any format)</p>
<p>EX:</p>
<pre><code>&gt;&gt;&gt; is_date("1990-12-1")
    True
&gt;&gt;&gt; is_date("xyznotadate")
    False
&gt;&gt;&gt; WNT5 = [x for x in WNT5 if not is_date(x)]
&gt;&gt;&gt; print(WNT5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterating the list (as others pointed out) is not the best option while calling <code>remove()</code>. So you can do the following:</p>
<p><strong>Iterate a copy using list(original_list):</strong></p>
<pre><code># makes a copy of the list to iterate rather than original
for item in list(WNT5):
    # assumes dates are yyyy-mm-dd and all contain the '-'
    # split() returns a list object
    # it will only split the '-' if its there, wont error
    if (len(item) == 10) and (len(item.split('-')) == 3):
        WNT5.remove(item)
</code></pre>
<p><strong>Make a filtered list through list comprehension:</strong></p>
<pre><code>def is_not_date(WNT5):
    for item in WNT5:
        if not ((len(item) == 10) and (len(item.split('-')) == 3)):
            yield item    

new_WNT5 = [x for x in is_not_date(WNT5)]
</code></pre>
<p>There could be a more pythonic way of doing this (maybe with <code>datetime</code>?)</p>
<p>Really need some more information to provide a solution honestly:</p>
<ul>
<li>Are they all the same format?</li>
<li>Are they all strings?</li>
<li>Whats the scope of the problem?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The question is not completely specified, but I think it might suffice to explain how to manipulate a dictionary like a list, even though you specified a list in your question.</p>
<pre><code>mydict = {'2017-04-11':22, '2017-04-12':23, '2017-04-13': 128}
newkeys = list(mydict.keys())
newkeys.remove('2017-04-12')
newvals = [mydict[keptkey] for keptkey in newkeys]
newdict = dict(zip(newkeys, newvals))
</code></pre>
<p>Once you have the newkeys list, you can truncate elements from it any way you'd like. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime
nwnt = len(WNT5)
for k, s in enumerate(reversed(WNT5)):
    try:
        datetime.datetime.strptime(s, '%Y-%m-%d') # adjust format to your liking
        del WNT5[nwnt - k - 1]
    except ValueError:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try regular expressions approach also:</p>
<pre><code>import re
result_list = [element for element in WNT5 if re.search("[0-9]{4}\-[0-9]{2}\-[0-9]{2}", element) is None]
</code></pre>
<p>You can add more patterns of date if you want with this approach.</p>
</div>
<span class="comment-copy">Are they dictionaries or lists? The example you provide is a list of strings, not a dictionary.</span>
<span class="comment-copy">Edited, thanks a lot.</span>
<span class="comment-copy">The 5th element of your output is a date string, so I'm going to venture to say something might be a bit off</span>
<span class="comment-copy">@BradSolomon, I pasted wrong output. I fixed it. Thank you for your feedback.</span>
<span class="comment-copy">better to assign it to a list slice. read here: <a href="https://stackoverflow.com/a/1208792/4385319">stackoverflow.com/a/1208792/4385319</a></span>
<span class="comment-copy">@falsetru I think the list comprehension looks good otherwise, although will this work for mm-dd-yyyy format?</span>
<span class="comment-copy">@Nguyen, list comprehension does not change the list, but returns a new list. You should assign the result back to <code>link</code>. <code>link = [s for s in link if not is_date_string(s)]</code> or <code>link[:] = [s for s in link if not is_date_string(s)]</code></span>
<span class="comment-copy">Removing item of list while iterating the list does not work well.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/1207406/remove-items-from-a-list-while-iterating" title="remove items from a list while iterating">stackoverflow.com/questions/1207406/â€¦</a></span>
<span class="comment-copy">Instead  of splitting, you can use count; <code>item.count('-') == 2</code></span>
<span class="comment-copy">@falsetru fixed</span>
<span class="comment-copy">@falsetru What is a wrong version? Neither of those iterate over a changing list.</span>
