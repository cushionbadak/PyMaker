<div class="post-text" itemprop="text">
<p>Given the following enum:</p>
<pre><code>class MyEnum(IntEnum):

    A = 0
    B = 1
    C = 2
</code></pre>
<p>How can I specify a default value. I want to be able to do:</p>
<pre><code>my_val = MyEnum()
</code></pre>
<p>and have<code>my_val</code> be <code>&lt;MyEnum.A: 0&gt;</code></p>
<p>Is this possible? I've tried customizing <code>__new__</code>, <code>__init__</code>, <code>__call__</code> but I can't get it to work.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>MyEnum(..)</code> is handled by <a href="https://github.com/python/cpython/blob/504b95047a8ada06ab630abce55ac2f85566ca37/Lib/enum.py#L265" rel="noreferrer"><code>EnumMeta.__call__</code></a>. You need to override that method:</p>
<pre><code>from enum import EnumMeta, IntEnum


class DefaultEnumMeta(EnumMeta):
    default = object()

    def __call__(cls, value=default, *args, **kwargs):
        if value is DefaultEnumMeta.default:
            # Assume the first enum is default
            return next(iter(cls))
        return super().__call__(value, *args, **kwargs)
        # return super(DefaultEnumMeta, cls).__call__(value, *args, **kwargs) # PY2


class MyEnum(IntEnum, metaclass=DefaultEnumMeta):
    # __metaclass__ = DefaultEnumMeta  # PY2 with enum34
    A = 0
    B = 1
    C = 2


assert MyEnum() is MyEnum.A
assert MyEnum(0) is MyEnum.A
assert MyEnum(1) is not MyEnum.A
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why donâ€™t you just use the <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow noreferrer">standard syntax</a>?</p>
<pre><code>my_val = MyEnum.A
</code></pre>
<hr/>
<p>If you really want to do this, you may have to write your own enum meta override class.  You can see this example for the <a href="https://github.com/python/cpython/blob/master/Lib/enum.py" rel="nofollow noreferrer">implementation in cpython</a> so that you assign a default value equal to the first value in the value map for the enum.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you do not control the <code>Enum</code>s, then do:</p>
<pre><code>my_val = list(MyEnum)[0]
</code></pre>
<p>or, if the <code>Enum</code> might be empty:</p>
<pre><code>my_val = len(MyEnum) and list(MyEnum)[0] or None
</code></pre>
<p>If you do control the <code>Enum</code>s, then add a <code>get_default</code> method:</p>
<pre><code>class MyEnum(Enum):
    def get_default(self):
        return self.A
</code></pre>
<p>or, even simpler, make <code>default</code> be an alias:</p>
<pre><code>class MyEnum(Enum):
    A = 0
    B = 1
    C = 2
    default = A
</code></pre>
<p>You could also wrap the first method in to a function:</p>
<pre><code>def default_member(enum):
    return list(enum)[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/44867597/is-there-a-way-to-specify-a-default-value-for-python-enums/44867928#44867928">falsetru's answer</a> would be the way to go if 0 argument case needs to be catered.</p>
<p>If it is only about returning default when given value does not exist, we can override <code>_missing_</code> hook in Enum class (Since <a href="https://docs.python.org/3.6/library/enum.html#supported-sunder-names" rel="nofollow noreferrer">Python 3.6</a>):</p>
<pre><code>from enum import IntEnum


class MyEnum(IntEnum):
    A = 0
    B = 1
    C = 2

    @classmethod
    def _missing_(cls, value):
        return MyEnum.A

assert MyEnum(0) is MyEnum.A
assert MyEnum(1) is MyEnum.B
assert MyEnum(-1) is MyEnum.A
assert MyEnum(None) is MyEnum.A
</code></pre>
</div>
<span class="comment-copy">You want <code>my_val</code> to be the enum value <code>A</code>? Don't you want <code>my_val</code> to be an instance of <code>MyEnum</code>?</span>
<span class="comment-copy">@ChristianDean I want to do <code>my_val = MyEnum()</code> and have the result be the same as doing <code>my_val = MyEnum(0)</code></span>
<span class="comment-copy">Do you want something like this? <a href="http://ideone.com/mKk5nF" rel="nofollow noreferrer">ideone.com/mKk5nF</a> or <a href="http://ideone.com/mfW9Jr" rel="nofollow noreferrer">ideone.com/mfW9Jr</a></span>
<span class="comment-copy">@falsetru Yup, that second link is exactly what I needed.</span>
<span class="comment-copy">Seems like serious overkill for such a simple problem.</span>
<span class="comment-copy">@EthanFurman, Yes, it is. But I couldn't come up with a solution that satisfy <code>MyEnum() is MyEnum.A</code></span>
<span class="comment-copy">It is the only solution that solves that exact criterion.</span>
<span class="comment-copy">@EthanFurman I agree that this seems like serious overkill to solve this, but for my use-case, this is <b>way</b> cleaner than the alternative.</span>
<span class="comment-copy">I'm doing code generation in a metaclass and it would make things quite a bit simpler if I didn't have to know anything about the enum in order to make an instance of it.</span>
<span class="comment-copy">@Stephen But wouldn't doing <code>MyEnum(default_value)</code> work? If you don't anything about the enum ahead of time, just get a default value from it.</span>
<span class="comment-copy">@ChristianDean I want the author of the enum to specify the default. The metaclass won't know ahead of time what the default is.</span>
<span class="comment-copy">There are also some other reasons why being able to call the Enum class without arguments will make things cleaner, hence my question.</span>
<span class="comment-copy">@Stephen Can you post the code for your metaclass or an <a href="https://stackoverflow.com/help/mcve">MCVE</a> if the code cannot be  taken out of context? If so, I think we can show you how to accomplish what your asking.</span>
<span class="comment-copy">I'm familiar with the Enum API. I can see why you are suggesting these, but this doesn't actually answer my question does it ...</span>
<span class="comment-copy">@Stephen:  falsetru already answered your exact question.  I'm offering alternative ways to get what you said you needed (a default member).</span>
<span class="comment-copy">My bad. When I looked at this, I thought you had answered before falsetru. Your suggestions are valid if you are looking for ways set Enums to default values for cases where you don't need to call the Enum class without arguments.</span>
<span class="comment-copy">@Stephen:  Thank you.  <code>falsetru</code>'s answer is the only way to solve your exact question; just be careful using/modifying metaclasses in general, and the <code>Enum</code> metaclass specifically;  I have it doing a lot behind the scenes to make everything work and I've seen casual modifications break resulting <code>Enum</code>s more than once.</span>
<span class="comment-copy">Thanks for mentioning the <code>_missing_</code> method. Unfortunately this does not solve the problem. <code>MyEnum()</code> still results in a <code>TypeError</code>. The goal was to be able to make an instance of <code>MyEnum</code> <i>without</i> providing a parameter.</span>
<span class="comment-copy">Since EnumMeta <code>__call__</code> must take a positional argument, only way in that case is to define your metaclass, like what falsetru did.</span>
