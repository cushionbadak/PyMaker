<div class="post-text" itemprop="text">
<p>I'm currently trying to write a script that will create a unique ID for a user relying on a number of variables, like birthdate, name, hometown, etc. This creates a very long number that is completely unique to that user, however, to try to make the number <em>even more</em> unique, I want to change a random number in the string. This is what I have so far:</p>
<pre><code>rand = randint(1,15)
tempid = id / 10**rand
if randint(1,2) == 1:
    tempid = tempid + randint(2,10000)
else:
    tempid = tempid - randint(5,7500)
print(id)
id = tempid * (10**rand)
print(str(id))
</code></pre>
<p>The code is fairly simple. It makes the number much smaller by dividing it by a large multiple of 10, adds or subtracts a random number, and multiplies it back to it's original length, with some changed numbers in the middle. The only problem is, because it must be an integer to be able to do any math with it, Python shortens it to 1.[something]e+[something]. This isn't helpful at all, becasue now it's not an ID. Is there anyway I can change it back to its original form, where it's just a long string, or perhaps change the code so it never becomes e? Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Unless this is a specific exercise, you do not want to generate unique IDs the way you do. It <em>will</em> fail. Use the <a href="https://docs.python.org/3/library/uuid.html" rel="nofollow noreferrer">uuid</a> module instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that <code>id</code> when you print it refers to a large <code>float</code> value, which is then printed in exponential notation. If it were an integer value, no <code>e</code> would be in the printout. The float value comes from your line</p>
<pre><code>tempid = id / 10**rand
</code></pre>
<p>which, in Python 3.x, stores a float value in <code>tempid</code>. You later execute</p>
<pre><code>id = tempid * (10**rand)
</code></pre>
<p>which multiplies a float by an integer, resulting in a float, and that float is what is printed in the next line</p>
<p>You can avoid this in several ways. You can keep all the calculations in integers by replacing your division line with</p>
<pre><code>tempid = id // 10**rand
</code></pre>
<p>That extra slash mark means integer division, so <code>tempid</code> here and <code>id</code> later are integers. However, this may change the resulting values. So a better way is allow <code>tempid</code> to be a float but ensure that <code>id</code> is always an integer, using</p>
<pre><code>id = int(tempid * (10**rand))
</code></pre>
<p>This should keep all your values the same and give you the print you want.</p>
<hr/>
<p>That answers your actual question. However, I agree with @user2722968 that if your purpose is to create a unique ID you should use module meant for that purpose, such as <a href="https://docs.python.org/3/library/uuid.html" rel="nofollow noreferrer">uuid</a>. The history of computing shows that randomizing a part of a string to get a random value does poorly, and getting actual random or unique values is difficult to get right. You should do it the way others have shown to work well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I also agree with the other answers; as far as best practice goes, you should not do it this way at all. You will almost certainly make a worse than optimal solution. However, to solve the actual problem you pose, I would want to approach it in a different manner.</p>
<p>The problem is, as stated, that your division will not leave you with an integer result, which makes Python automatically convert to a float. This is not what you want if you want to keep your value unique. You want to do all your calculations on integers only. To achieve that, the simplest way is to multiply your modifiers, instead of dividing your original number. That way you will never leave the integer domain, and there is no need to convert you value back to an integer:</p>
<pre><code>print(id)
rand = randint(1,15)
multiplier = 10**rand
if randint(1,2) == 1:
    id += multiplier * randint(2,10000)
else:
    id -= multiplier * randint(5,7500)
print(id)
</code></pre>
<p>In addition I have used a bit of syntactic sugar, that I find rather nice, namely <code>+=</code> and <code>-=</code>. They add and subtract a value from your variables respectively: <code>a = a + 3</code> &lt;=&gt; <code>a += 3</code>. </p>
</div>
<span class="comment-copy">I'm note sure I understand what your problem is, but look up hashing algorithms. That seems to be what you're going for here.</span>
<span class="comment-copy">"...even more unique...". I like that. It was perfect before, now it will be <i>even more</i> perfect.</span>
<span class="comment-copy">Thanks, that's just what I was looking for, and a lot simpler than what I was trying to do.... Thank you!</span>
