<div class="post-text" itemprop="text">
<p>I have a set of code which runs in an infinite loop, cancelled through terminal with control C. In this code I use the code <code>json.dumps(dictionary,outfile)</code></p>
<p>I have noticed that this does not actually put the data into the file until I have used control C to terminate the process. Why does the file not update until after the program has terminated?</p>
</div>
<div class="post-text" itemprop="text">
<p>Anthony Rossi is basically right, you need to flush the data using <code>outfile.flush()</code>. But why is that so? </p>
<p><code>json.dump</code> expects a "a .write()-supporting file-like object", see <a href="https://docs.python.org/3/library/json.html#json.dump" rel="nofollow noreferrer">here</a>. Somewhere in your code, you have used <code>open</code> to get your <code>outfile</code>. If we have a look at the documentation for <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open</code></a>, we can read the following:</p>
<blockquote>
<p>buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer &gt; 1 to indicate the size in bytes of a fixed-size chunk buffer. When no buffering argument is given, the default buffering policy works as follows:</p>
<ul>
<li><p>Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device’s “block size” and falling back on io.DEFAULT_BUFFER_SIZE. On many systems, the buffer will typically be 4096 or 8192 bytes long.</p></li>
<li><p>“Interactive” text files (files for which isatty() returns True) use line buffering. Other text files use the policy described above for binary files.</p></li>
</ul>
</blockquote>
<p>I guess you haven't specified the <code>buffering</code> parameter and your data is smaller than 4 / 8 kb. Therefore, the write is buffered and not directly written to the file.</p>
<p>When you kill your program using <code>Ctrl+C</code>, the <code>outfile</code> is closed and flushes the data to your file.</p>
<p>To fix this, simply put <code>outfile.flush()</code> after your <code>json.dump()</code> as Anthony Rossi suggested.</p>
</div>
<span class="comment-copy">I think we need a bit more code to give you a precise answer.  I can however tell you that most modification are cached before being written to disk in bulk, to save a lot of I/O time. You can force the flush by calling <code>outfile.flush()</code> usually</span>
<span class="comment-copy">Ok thank you, yeah I had not specified a buffering parameter and as such it only flushed the data once I terminated the program.</span>
