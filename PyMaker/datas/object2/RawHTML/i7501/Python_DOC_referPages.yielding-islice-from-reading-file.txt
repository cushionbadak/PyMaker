<div class="post-text" itemprop="text">
<p>Hoping that someone can help me understand the following. Writing a small program to read a csv file in K line chunks. I've seen the other stack questions about this an that's not what I'm asking here. I'm trying to understand why one program terminates and the other never does. </p>
<p>This code never terminates:</p>
<pre><code>from __future__ import print_function
from itertools import islice
import time
import csv
def gen_csv1(input_file, chunk_size=50):
    try:
        with open(input_file) as in_file:
            csv_reader = csv.reader(in_file)
            while True:
                yield islice(csv_reader, chunk_size)
    except StopIteration:
        pass

gen1 = gen_csv1('./test100.csv')

for chunk in gen1:
    print(list(chunk))
    time.sleep(1)
</code></pre>
<p>While this works fine. With the only difference being the <code>islice</code> outside the <code>yield</code> from the generator. </p>
<pre><code>def gen_csv(input_file):
    try: 
        with open(input_file) as in_file:
            csv_reader = csv.reader(in_file)
            while True:
                yield next(csv_reader)
    except StopIteration:
        pass


gen = gen_csv('./test100.csv')
for chunk in gen:
    rows = islice(gen, 50)
    print(list(rows))
    time.sleep(1)
</code></pre>
<p>I'm stumped. Any guidance is hugely appreciated. This is more out of curiosity than for work reasons. </p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">the docs</a>, </p>
<blockquote>
<p>[islice] works like a slice() on a list but returns an iterator.</p>
</blockquote>
<p>When you slice an empty list, an empty list is returned:</p>
<pre><code>In [118]: [][:3]
Out[118]: []
</code></pre>
<p>Similarly, when you <code>islice</code> an empty iterator, an empty iterator is returned.
In contrast, calling <code>next</code> on an empty iterator raises <code>StopIteration</code>:</p>
<pre><code>In [98]: from itertools import islice
In [114]: reader = iter([])

In [115]: list(islice(reader, 3))
Out[115]: []

In [116]: next(reader)
StopIteration: 
</code></pre>
<p>Since <code>islice</code> never raises a <code>StopIteration</code> exception, the first version of the code never terminates. </p>
</div>
<span class="comment-copy">With the help of <a href="https://stackoverflow.com/questions/1915170/split-a-generator-iterable-every-n-items-in-python-splitevery" title="split a generator iterable every n items in python splitevery">stackoverflow.com/questions/1915170/â€¦</a> I found a working solution but would still like to understand what's going on here.</span>
<span class="comment-copy">Makes sense - thank you.</span>
<span class="comment-copy">@ubuntu - would this also imply that <code>islice</code> is not using <code>next</code> internally?</span>
<span class="comment-copy">@mistertee: The top level Python docs only specify what the behavior of the Python language should be. The implementation details depend on the flavor of Python. Conceivably, <code>islice</code> could call <code>next</code> inside a <code>try..except</code> statement, and handle any <code>StopIteration</code> exception that arises. But in the most common flavor of Python, CPython, <code>islice</code> is <a href="https://github.com/python/cpython/blob/master/Modules/itertoolsmodule.c#L1502" rel="nofollow noreferrer">implemented in C</a>. It doesn't call the <code>next</code> (Python) function; the case of an empty iterator is handled at a lower level.</span>
<span class="comment-copy">@ubuntu - thank you again. And thanks for the link to the itertools source. Very interesting.</span>
<span class="comment-copy">sorry I misspelled your name. Must be muscle memory.</span>
