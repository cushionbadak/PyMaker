<div class="post-text" itemprop="text">
<p>I have this piece of code to set my logger in Python:</p>
<pre><code>  #Configure logging
  logging.basicConfig(format = '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                      datefmt='%m-%d %H:%M',
                      filename= "log.txt",
                      level = logging.getLevelName('DEBUG'))


  print(logging.getLogger().getEffectiveLevel())
</code></pre>
<p>But the output from the print statement sometimes is this:</p>
<pre><code>30
</code></pre>
<p>And other times is this (which is correct):</p>
<pre><code>10
</code></pre>
<p>But often even when the the logging level is set to the correct number, it is not logging anything to the file, but other times it works. What do I need to do to make sure my logging level is set correctly?</p>
<p>*Edit: Below is my solution based off the recommendation of @randomir.
**Edit: I had to make a second change where I set the level after I call <code>logging.basicConfig()</code> or else the logging level still was not getting called consistently. The line `logging.getLogger().setLevel(...) now seems to work.  </p>
<p>I created a new class: Logger.py.     </p>
<pre><code>import logging

class Logger(object):
   def __init__(self):
     logging.basicConfig(format = '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                      datefmt='%m-%d %H:%M',
                      filename= "log.txt")

     logging.getLogger().setLevel(logging.getLevelName("DEBUG"))

     print(logging.getLogger().getEffectiveLevel())
</code></pre>
<p>And now instead of configuring the basic config directly in my startup class I just instantiate the logger class once:</p>
<pre><code>from Logger import Logger
import logging

class LaunchPython(object):
  #Configure Logging
  Logger()

  logging.info("Application has started")
</code></pre>
<p>On all subsequent classes that call the logger I just put <code>import logging</code> on the top and then do <code>logging.info(...)</code> or <code>logging.debug(....)</code>. There is no need to import the Logger.py class and reinstantiate it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="nofollow noreferrer"><code>logging.basicConfig()</code></a> creates a root logger for you application (that's a logger with the name <code>root</code>, you can get it with <code>logging.getLogger('root')</code>, or <code>logging.getLogger()</code>).</p>
<p>The trick is that the <code>root</code> logger gets created with defaults (like <code>level=30</code>) on the first call to any logging function (like <code>logging.info()</code>) if it doesn't exist already. So, make sure you call your <code>basicConfig()</code> before any logging in any other part of the application.</p>
<p>You can do that by extracting your logger config to a separate module, like <code>logger.py</code>, and then import that module in each of your modules. Or, if your application has a central entry point, just do the configuration there. Note that the 3rd party functions you call will also create the <code>root</code> logger if it doesn't exist.</p>
<p>Also note, if you application is multi-threaded:</p>
<blockquote>
<p><strong>Note</strong>
  This function should be called from the main thread before other threads are started. In versions of Python prior to 2.7.1 and 3.2, if this function is called from multiple threads, it is possible (in rare circumstances) that a handler will be added to the root logger more than once, leading to unexpected results such as messages being duplicated in the log. </p>
</blockquote>
</div>
<span class="comment-copy">Do you have more context? If I simply copy/paste your code sample and run it, I reliably get 10.</span>
<span class="comment-copy">Are you using the same logger everywhere ? is it declared once, and then imported in all your module ?</span>
<span class="comment-copy">@Finch_Powers Usually it outputs the right debug number the first time I run the app from a new QT console, but if I run it subsequently it starts to mostly output 30.</span>
<span class="comment-copy">@PRMoureu I am using the default logger everywhere (<code>logging.info(...)</code>). Sometimes everything works perfectly and the log files is written to appropriately, but other times it is only written to in parts, but more annoying is that the debug level does not stay the same.</span>
<span class="comment-copy">You may have a race condition where, sometimes, your logger gets created before the call to <code>logging.basicConfig</code>.</span>
<span class="comment-copy">Yes creating a separate Logger.py class worked liked a charm. I added in a solution I created based off your suggestion.</span>
<span class="comment-copy">Great, I'm glad you made it work.</span>
