<div class="post-text" itemprop="text">
<p>I'm a python noob, and I want to assign a value to a variable with a name wgich is concatenated. I tried searching and do trial and error. This is one of my attempts.</p>
<pre><code>b = 'sometext'
(b + "a") = somevalue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Non-Recommended Method #1</h2>
<p>Using <code>globals()</code>.</p>
<pre><code>&gt;&gt;&gt; b = 'sometext'
&gt;&gt;&gt; globals()[b + 'a'] = 123
&gt;&gt;&gt; sometexta
123
</code></pre>
<p>The <code>globals()</code> function returns a dictionary of all variables available to you in global namespace. If you wish to do the same thing inside a function, you can do the same thing with <code>locals()</code> instead.</p>
<p>Note that there is no way to even access these variables if you don't know what names they could have at runtime. </p>
<hr/>
<h2>Non-Recommended Method #2</h2>
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a> builtin function:</p>
<pre><code>&gt;&gt;&gt; b = 'sometext'
&gt;&gt;&gt; exec("%sa = 123" %b)
&gt;&gt;&gt; sometexta
123
</code></pre>
<p>If you want to access this variable, you'd need to use <code>exec</code> again, since you're working with variable named variables.</p>
<p><code>exec</code> and its sister function <code>eval</code> will execute any valid python code passed to it. Just remember to never allow <em>any</em> user input to be executed by them, as it would pose a serious security threat.</p>
<hr/>
<h2>The Recommended Method</h2>
<p>Using a <code>dict</code> to store your "variable" names variables. Use the first two methods only if you know what you are doing. In all other instances, a dictionary is the safest route to take:</p>
<pre><code>&gt;&gt;&gt; b = 'sometext'
&gt;&gt;&gt; variables = {}
&gt;&gt;&gt; variables[b + 'a'] = 123
&gt;&gt;&gt; variables[b + 'a']
123
&gt;&gt;&gt; variables['sometexta'] # is the same thing as the above
123
</code></pre>
<p>With the first two methods, creating the variables is easy enough. But accessing them at runtime if you don't know how they were created can be a pain.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is the built-in type of a <code>dict</code> (dictionary) that handles dynamic keys (names). It is also used internally for all kind of stuff, like all the variables and attributes, so you should try it as well:</p>
<pre><code>b = {}  # creates a dictionary
b['a'] = 1 # puts the key 'a' with value 1 into the dictionary
print(b['a'])   # prints the value of 'a' (1)
</code></pre>
<p>You can also build keys dynamically:</p>
<pre><code>b['a' + '1'] = 1
</code></pre>
<p>will create a key b['a1'].</p>
<p>See more features at <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#mapping-types-dict</a> .</p>
</div>
<span class="comment-copy"><code>b = 'sometext' (newline) b = b + 'a'</code></span>
<span class="comment-copy">So you want a variable called <code>sometexta</code>?</span>
<span class="comment-copy">yes i want to have a variable called sometexta</span>
<span class="comment-copy">@Infinity You can also do <code>b = 'sometext'; b += somevalue</code> (Don't have to be a new line)</span>
<span class="comment-copy">Why would you do that? There is no practical use of such construct and i am almost sure it is impossible. One do such things by using some collections or binding variables to objects. For example use map. Then you can  treat the keys as your "names"</span>
<span class="comment-copy">Nice, thought i would never recommend anything like this to a beginner...</span>
<span class="comment-copy">This is very, very bad advice.</span>
<span class="comment-copy">If you want variable variables, then you actually want a dict.  Screwing around with globals or exec is just going to cause more pain later on.  How will you access these variables?</span>
<span class="comment-copy">Alright. Please stop down voting my post. I've edited it.</span>
