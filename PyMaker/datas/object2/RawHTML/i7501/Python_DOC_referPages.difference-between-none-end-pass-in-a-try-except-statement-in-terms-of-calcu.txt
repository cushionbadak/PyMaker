<div class="post-text" itemprop="text">
<p>I'm using and try/except statement in python inside a very long loop. If the exception is raised, it should do nothing.</p>
<pre><code>try :
  *Some Code*
except :
  pass
</code></pre>
<p>If i use this first proposition, the total time of calculation for the loop is about <strong>10 minutes</strong>.</p>
<pre><code>try :
  *Some Code*
except :
  None
</code></pre>
<p>If i use this second propositon, the total time of calculation for the loop is about <strong>2 minutes</strong>.</p>
<p>Why is it so different, and why is the second one faster as, logically for me, <em>pass</em> is a better solution than <em>None</em> ?</p>
<p>The exact code is :</p>
<pre><code>try:
 indexes = peakutils.peak.interpolate(self.list_height, input_1, ind=indexes, width=self.gauss_width)
except:
 None / Pass
</code></pre>
<p>I made several tests with both propisitons and it's always the same.</p>
<p>How time is calculated : </p>
<pre><code>start = default_timer()
im.get_events() #The loop where the try/except statement appears
finish = default_timer()
print('ELAPSED TIME : %s'%(finish - start))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given two functions:</p>
<pre><code>def func_none():
  return None

def func_pass():
  pass
</code></pre>
<p>They are doing exactly the same thing, the proof using <a href="https://docs.python.org/3/library/dis.html#module-dis" rel="nofollow noreferrer"><code>dis</code></a>:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(func_none)
# 0 LOAD_CONST               0 (None)
# 3 RETURN_VALUE

&gt;&gt;&gt; dis.dis(func_pass)
# 0 LOAD_CONST               0 (None)
# 3 RETURN_VALUE
</code></pre>
<p>Indeed, here is the definition of <a href="https://docs.python.org/3/reference/simple_stmts.html#the-pass-statement" rel="nofollow noreferrer">pass</a>:</p>
<blockquote>
<p>pass is a null operation â€” when it is executed, nothing happens. It is
  useful as a placeholder when a statement is required syntactically,
  but no code needs to be executed, for example:</p>
</blockquote>
<p><strong>Conclusion</strong>: <code>pass</code> statement is as fast as <code>None</code><em>in theory</em>.</p>
<p><strong>Edit</strong>: why it <em>may</em> be a slower time using <code>None</code> instead of <code>return None</code> (like in OP example).</p>
<p>Given two functions:</p>
<pre><code>def func_none():
  try:
    1/0
  except:
    None

def func_pass():
  try:
    1/0
  except:
    pass
</code></pre>
<p>The difference using dis:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(func_none)
# Skip to expect part

  18 LOAD_CONST               0 (None)
  21 POP_TOP             
  22 JUMP_FORWARD             1 (to 26)
  25 END_FINALLY         
  26 LOAD_CONST               0 (None)
  29 RETURN_VALUE  

dis.dis(func_pass)

# Skip to expect part

  18 JUMP_FORWARD             1 (to 22)
  21 END_FINALLY         
  22 LOAD_CONST               0 (None)
  25 RETURN_VALUE 
</code></pre>
<p>So it is clear that using <code>None</code> instead of <code>pass</code> will add two extra operation <code>LOAD_CONST</code> and <code>POP_TOP</code>. It shouldnt add 8 minutes though, so I'm sure this isn't the real reason.</p>
</div>
<span class="comment-copy">Could you show us the code you're using to benchmark both code snippets?</span>
<span class="comment-copy">What is <i>Some Code</i>, how and how often did you time it and is every calculation in <i>Some Code</i> static in the sense that computational effort does not change between executions?</span>
<span class="comment-copy">cannot reproduce with a simple loop benchmark. Using <code>None</code> yields to slower results, actually...</span>
<span class="comment-copy"><i>Some Code</i> must be changing between the first and 2nd snippet or your timing method is off, show both</span>
<span class="comment-copy">@Dedi that isn't your code, show your code in the original post</span>
<span class="comment-copy">This isn't exactly the same thing as the OP's code.  A function implicitly returns <code>None</code> if there is no return statement, and <code>pass</code> does not compile to any code, which is why the two functions have the same disassembly on CPython.  Adding <code>None</code> as a separate statement will add some code to load the constant, though, so it is actually slower than <code>pass</code>.</span>
<span class="comment-copy">Thanks for the aswer. Even if it does not explain the reason, i am assured that it <i>should</i> be identical.</span>
<span class="comment-copy">You could simply have changed the code of the <code>func_none()</code> to just <code>None</code> instead of <code>return None</code>, and you would have seen the same difference.  This is not specific to try/except;  it'st just how expression statements are compiled in CPython.</span>
<span class="comment-copy">@Dedi, you are right, I edited my answer to add extra informations. It still does not explain the issue though.</span>
<span class="comment-copy">@Dedi, yes I understand. this is a total legitimate question and I'm sorry I can't explain the reason of such a big gap between your 2 pieces of code.</span>
