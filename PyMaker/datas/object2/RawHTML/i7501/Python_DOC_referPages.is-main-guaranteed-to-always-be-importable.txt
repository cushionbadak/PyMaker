<div class="post-text" itemprop="text">
<p>Is there any case where doing:</p>
<pre><code>import __main__
</code></pre>
<p>might lead to an <code>ImportError</code>? All cases I've tried seem to indicate that this always works. The docs on <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer"><code>__main__</code></a> don't seems to state anything on the matter.  </p>
<p>To give some context: I am trying to inject some names in <code>__main__.__dict__</code> using the <code>usersitecustomize</code> hook in order to (mainly) have them available when the REPL fires up. </p>
<p>Granted that no redefinitions of <code>__import__</code> occur (as a comment stated), this essentially boils down to if I need to wrap it in a <code>try-except</code> or not.</p>
</div>
<div class="post-text" itemprop="text">
<p>It probably is. Python initializes <code>__main__</code> in this file:
<a href="https://github.com/python/cpython/blob/master/Python/pylifecycle.c#L1327" rel="nofollow noreferrer">https://github.com/python/cpython/blob/master/Python/pylifecycle.c#L1327</a></p>
<p>However please note that modules like <code>runpy</code> and <code>IPython</code> replace the <code>__main__</code> module with their own dynamically created ones to prevent collisions with their own launch scripts and to provide expected behaviour in case of runpy.</p>
<p>runpy itself is part of the Python Standard Library and provides the implementation of the <code>-m</code> flag which allows arbitrary modules to be executed as script.</p>
<p>An alternative is IPython which offers the feature to execute code at the launch of a new REPL.</p>
<p>For more details, see here: <a href="http://ipython.readthedocs.io/en/stable/config/intro.html?highlight=exec_lines" rel="nofollow noreferrer">http://ipython.readthedocs.io/en/stable/config/intro.html?highlight=exec_lines</a></p>
</div>
<span class="comment-copy">Sure, for example if you <a href="http://ideone.com/gFuzwp" rel="nofollow noreferrer">replace <code>__import__</code></a>, but I doubt that's the kind of thing you're looking for. What specific failure types are you interested in?</span>
<span class="comment-copy">Try printing <code>__main__</code> in A.py and then importing A in B.py.</span>
<span class="comment-copy">What are you guys talking about? <code>__main__</code> isn't always the current module; it's the namespace in which the main script executes, or in which interactive code executes in interactive mode.</span>
<span class="comment-copy">@user2357112 After looking back at the docs, I agree. My previous comment was erroneous. I'll remove it.</span>
<span class="comment-copy">@user2357112 granted that no sneaky stuff like that occur. I'm looking to inject some names in <code>__main__.__dict__</code> during start-up (<code>usersitecustomize</code>) to have them available without the need to import them. I'm not sure if I should wrap it in a try or not.</span>
