<div class="post-text" itemprop="text">
<p>Write down the chatting program code base with SSL/TLS and MultiThreading.</p>
<p>there's a 3 things to follow.</p>
<p>1.when client connected client's ID and IP or Network interface information, network information.</p>
<p>2.when client send message you have to follow this form([Client ID@connect IP] Message ) everytime.</p>
<p>3.you have to show and explain flowchart with client and server program.</p>
<p>it's my final exam of network programing. but it's too hard for me. i couldn't write down the code. so i have to submit the paper with nothing. i don't know how to do. someone can explain how to code the program?</p>
<p>my code is </p>
<p>server.py</p>
<pre><code>import socket   
import thread

print '---python chatting program---'

host = ''    
port = 27332

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.bind((host, port))

s.listen(1)

users = []

def service(conn):

    try:

        name = conn.recv(1024)

        str = '*' + name + ' is entered.*'

        while conn:

            print str

            for each in users:

                each.send(str)

            str = name + ' : ' + conn.recv(1024)

    except:

        users.remove(conn)

        str = '*' + name + ' is out.*'

        print str

        if users:

            for each in users: each.send(str)

# thread.start_new_thread(service, ())

while 1:

    conn, addr = s.accept()

    global users

    users.append(conn)

    thread.start_new_thread(service, (conn, ))

    pass
</code></pre>
<p>client.py</p>
<pre><code>import socket  
import thread

def handle(socket):

    while 1:

        data = socket.recv(1024)

        if not data:

            continue

        print data

    print 'handler is end.'


host = '127.0.0.1'    
port = 27332  

print 'enter your name.'

name = raw_input()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.connect((host, port))

s.send(name)

thread.start_new_thread(handle, (s, ))

while 1:

    msg = raw_input()

    if not msg:

        continue

    s.send(msg)

s.close()

print '---chatting program is end---'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The official Python documentation provides an example of how to use Python's native <code>socket</code> package to implement a simple echo server and client. The example itself contains essentially no real functionality (since the goal here is to demo the use of <code>socket</code>): the server echoes back everything it receives from the client. However, you can use this code as a basis, adding the functionality as required. If you use Python 3, you'll find the documentation <a href="https://docs.python.org/3/library/socket.html#example" rel="nofollow noreferrer">here</a>, for Python 2 <a href="https://docs.python.org/2/library/socket.html#example" rel="nofollow noreferrer">see here</a>. </p>
<p>Now for the SSL/TLS part. Python has a native module <code>ssl</code> which is a TLS/SSL wrapper for socket objects; to cite the official Python documentation: the module "<em>provides access to Transport Layer Security (often known as “Secure Sockets Layer”) encryption and peer authentication facilities for network sockets</em>". If you use Python 3, you can find the documentation for the <code>ssl</code> module <a href="https://docs.python.org/3/library/ssl.html?highlight=tls#module-ssl" rel="nofollow noreferrer">here</a>, for Python 2 <a href="https://docs.python.org/2/library/ssl.html?highlight=ssl#module-ssl" rel="nofollow noreferrer">see here</a>.</p>
<p>The <code>ssl</code> module provides the class <code>ssl.SSLSocket</code>, which is derived from the socket.socket type, and provides a socket-like wrapper that also encrypts and decrypts the data going over the socket with SSL. The official documentation also contains example code (snippets) you can use to implement your exercise (<a href="https://docs.python.org/3/library/ssl.html?highlight=tls#examples" rel="nofollow noreferrer">see e.g. here</a> for how to do SSL/TLS using <code>ssl</code> module in Python 3).</p>
</div>
