<div class="post-text" itemprop="text">
<p>Inside my <code>async</code> handler I want to wait until task's state is changed. For now, I just check the state in an endless loop and wait. Here is an example, the <code>wait_until_done</code> function:</p>
<pre><code>import asyncio


class LongTask:
    state = 'PENDING'

my_task = LongTask()


def done():
    my_task.state = 'DONE'

async def wait_until_done():
    while True:
        if my_task.state == 'PENDING':
            await asyncio.sleep(2)
        else:
            break
    print("Finally, the task is done")


def main(loop, *args, **kwargs):
    asyncio.ensure_future(wait_until_done())
    loop.call_later(delay=5, callback=done)

loop = asyncio.get_event_loop()
main(loop)
loop.run_forever()
</code></pre>
<p>Is there a better way for doing that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to avoid confusion: I guess you are not talking about <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task" rel="noreferrer">asyncio.Task</a>, but some variable state instead, right?</p>
<p>In this case you have <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Future" rel="noreferrer">Future</a> and <a href="https://docs.python.org/3/library/asyncio-sync.html#synchronization-primitives" rel="noreferrer">synchronization primitives</a> that allows you to wait some thing changed asynchronously. </p>
<p>If you need to switch between two states, <a href="https://docs.python.org/3/library/asyncio-sync.html#asyncio.Event" rel="noreferrer">asyncio.Event</a> is probably what you want. Here's little examle:</p>
<pre><code>import asyncio


my_task = asyncio.Event()


def done():
    my_task.set()



async def wait_until_done():
    await my_task.wait()  # await until event would be .set()
    print("Finally, the task is done")


async def main():
    loop.call_later(delay=5, callback=done)
    await wait_until_done()


loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(main())
finally:
    loop.run_until_complete(loop.shutdown_asyncgens())
    loop.close()
</code></pre>
<p><strong>Upd:</strong></p>
<p>More complex example that keeps <code>LongTask</code> interface:</p>
<pre><code>import asyncio



class LongTask:
    _event = asyncio.Event()

    @property
    def state(self):
        return 'PENDING' if not type(self)._event.is_set() else 'DONE'

    @state.setter
    def state(self, val):
        if val == 'PENDING':
            type(self)._event.clear()
        elif val == 'DONE':
            type(self)._event.set()
        else:
            raise ValueError('Bad state value.')

    async def is_done(self):
        return (await type(self)._event.wait())

my_task = LongTask()


def done():
    my_task.state = 'DONE'



async def wait_until_done():
    await my_task.is_done()
    print("Finally, the task is done")


async def main():
    loop.call_later(delay=5, callback=done)
    await wait_until_done()


loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(main())
finally:
    loop.run_until_complete(loop.shutdown_asyncgens())
    loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Isn't it an example of <a href="https://en.wikipedia.org/wiki/Observer_pattern" rel="nofollow noreferrer">Observer</a> design pattern? I think the Observer pattern can solve this problem. In this design pattern, we don't need to iterate infinitey to detect the change rather the task itself will inform if it has committed any change. A simple implementation could be:</p>
<pre><code>class ObservableTask:
    def __init__(self):
        self.subscribers = set()
        self.state = 'PENDING'

    def subscribe(self, who):
        self.subscribers.add(who)

    def unsubscribe(self, who):
        self.subscribers.discard(who)

    def dispatch(self, message):
        for subscriber in self.subscribers:
            subscriber.update(message)

    def random_change(self):
        for count in range(1, 10):
            if count % 5 == 0:
                print('Inside task:\tDivisible by 5')
                self.state = 'DONE'
                self.dispatch('state: DONE')


class Observer:
    def __init__(self):
        pass

    def update(self, message):
        print('Task is changed!\t' + message)


# Test:
task = ObservableTask()
observer = Observer()

task.subscribe(observer)
task.random_change()
</code></pre>
<p>Output:</p>
<pre><code>Inside task:    Divisible by 5
Task is changed!    state: DONE
</code></pre>
</div>
<span class="comment-copy">Observer pattern is probably what you want to use. Make the object "observable" you then register a handler as an observer to your object so when the state change it will call what ever method you want. <a href="https://stackoverflow.com/questions/1904351/python-observer-pattern-examples-tips" title="python observer pattern examples tips">stackoverflow.com/questions/1904351/â€¦</a></span>
<span class="comment-copy">Yes, the task is a regular object, not asyncio.Task. I thought about the Event(), but your solution is not suitable: long story short, I can not touch the <code>done</code> func, it should just change state of the task.</span>
<span class="comment-copy">@SergeyBelash, I added another example that keeps <code>done</code> func unchanged.</span>
<span class="comment-copy">Your code has nothing to do with asyncio and especially with waiting for state changing -- it was the main question for the topic.</span>
