<div class="post-text" itemprop="text">
<p>In python3 lets say i need to have 3 empty lists.I can assign empty lists separately in 3 separate lines. But the when i declared them in the same line as shown below </p>
<p><strong><code>s1 , s2 , s3 = [[]]*3</code></strong></p>
<p>After doing this whenever i append an element to any <strong>one</strong> of these lists the same element gets appended to all the lists. Its the same with all operations and whenever i pop an item in one list , all the three lists s1 , s2 , s3 pop an item . I can't seam to understand this behaviour</p>
</div>
<div class="post-text" itemprop="text">
<p>No one actually answered the OP, which was <strong>why</strong> the OP's original syntax (i.e. <code>s1 , s2 , s3 = [[]]*3</code>) would treat them all as the same list (i.e. changing one of the lists will change all of them).</p>
<h1>Why are they the same list?</h1>
<p>This happens because python lists just make references to things they contain, so the list of a list <code>[[]]</code> just points to an empty list. But, when you multiply it by 3, it takes <strong>that same empty list</strong> and refers to it 3 times.</p>
<h2>A Sensible Example</h2>
<p>Consider a situation where this would make more intuitive sense. Suppose we already had a list and we <strong>wanted</strong> to repeat that list 3 times:</p>
<pre><code>myList = ['me', 'myself', 'Irene']
three_myList = [myList] * 3
three_myList
</code></pre>
<p>then you get:</p>
<pre><code>[['me', 'myself', 'Irene'],['me', 'myself', 'Irene'],['me', 'myself',
'Irene']]
</code></pre>
<p>but then, if you change a value in the list:</p>
<pre><code>myList[2] = 'Tim'
three_myList
</code></pre>
<p>you get:</p>
<pre><code>[['me', 'myself', 'Tim'], ['me', 'myself', 'Tim'], ['me', 'myself', 'Tim']]
</code></pre>
<p>This makes sense because <code>three_myList</code> just references <code>myList</code> 3 times over (with a pointer) and <code>myList</code> changed. In effect, <code>three_list</code> asks for the value of <code>myList</code> 3 times, so all 3 references change together.</p>
<h2>Conclusion</h2>
<p>In your case, you don't want <code>s1</code>, <code>s2</code>, and <code>s3</code> to refer to the same list, but they do because on the right side of the assignment, you constructed a list that uses the same list three times.  </p>
<h1>Different for simple list</h1>
<p>But, it's still confusing because a very similar process will cause a different result. Suppose you take a simple list (not nested) and triple it, then it won't update:</p>
<pre><code>triple_myList = myList * 3
triple_myList
</code></pre>
<p>gives:</p>
<pre><code>['me', 'myself', 'Tim', 'me', 'myself', 'Tim', 'me', 'myself', 'Tim']
</code></pre>
<p>but, when you update:    </p>
<pre><code>myList[2] = 'Irene'
triple_myList
</code></pre>
<p>The long version doesn't:</p>
<pre><code>['me', 'myself', 'Tim', 'me', 'myself', 'Tim', 'me', 'myself', 'Tim']
</code></pre>
<p>This is because to triple a simple list we had to smash its contents together three times to get another simple (not nested) list. Evaluating this forces a computation that makes a new list. So, <code>triple_myList</code> is a new thing that doesn't actually contain <code>myList</code> (as an element) and hence doesn't make any references to <code>myList</code>.</p>
<h1>Other Commentary</h1>
<p>Nick Chapman's answer is actually just another syntax to the get the OP's result in one line, not an explanation of why the OP's syntax works the way it does.</p>
<p>Stan Zeez's comment on the OP explained how to get a different result (3 separate lists that update separately), but he used too many brackets so it creates 3 double-nested lists:</p>
<pre><code>s1, s2, s3 = [[[]] for i in range(3)]
s1                     
# [[]]
</code></pre>
<p>This would create 3 simple lists like the OP did (but these are actually independent, unlike the OP):</p>
<pre><code>s1, s2, s3 = [[] for i in range(3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok assuming that you meant:</p>
<pre><code>s1 = s2 = s3 = [[]]
</code></pre>
<p>The reason that appending to one of them appends to all of the others is because all of them are pointing at the same object. <code>s2</code> and <code>s3</code> are really just aliases for <code>s1</code>. If you want to make deep copies of things then consider looking into the <code>copy</code> module: <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">https://docs.python.org/3/library/copy.html</a></p>
</div>
<span class="comment-copy">That is invalid syntax</span>
<span class="comment-copy">it is not work for me (ValueError: need more than 1 value to unpack ), python3.4</span>
<span class="comment-copy">Maybe you mean something like <code>s1=s2=s3=[]</code> , where you've created one list with three names.</span>
<span class="comment-copy">maybe you meant <code>s1, s2, s3 = [[]]*3</code> ? anyway, almost certainly you have created only 1 list</span>
<span class="comment-copy">s1, s2, s3 = [[[]] for i in range(3)] for inline initialization your lists</span>
<span class="comment-copy">nice explaination thanks</span>
<span class="comment-copy">or just Ã—<code>s1 = [[]]; s2 = [[]]; s3 = [[]]</code>, which is much more readable (actually each statement should be on a distinct line to be pep08 compliant).</span>
<span class="comment-copy">@brunodesthuilliers yes that is how you would declare 3 separate blank instances. If you want to copy an instance with anything in it, you will need to use some form of copying whether it's from the <code>copy</code> module or you use language builtins like <code>a = b[:]</code>.</span>
