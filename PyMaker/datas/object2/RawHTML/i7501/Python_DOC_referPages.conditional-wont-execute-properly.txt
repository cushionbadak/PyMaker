<div class="post-text" itemprop="text">
<p>I wonder if you could help me with the code below:</p>
<pre><code>min = None
max = None
while True:
    input = raw_input("Please enter number: ")
    if input == "done":
        break
    else:
        try:
            input = float(input)
        except:
            continue



    if max &lt; input:
        max = input
    elif min &gt; input:
        min = input

    print min
    print max
</code></pre>
<p>It looks right to me, but the elif statement which gives a value to min always prints <code>None</code>. Could you please explain why?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>None &gt; number</code> is never true, because Python 2 sorts <code>None</code> before any other type. Don't compare numbers with <code>None</code>.</p>
<p>Either test for <code>None</code> explicitly, or replace <code>None</code> with an infinity value.</p>
<p>Testing for <code>None</code>:</p>
<pre><code>if max is None or max &lt; input:
    max = input
elif min is None or min &gt; input:
    min = input
</code></pre>
<p>Setting the values to positive or negative infinity:</p>
<pre><code>min = float('inf')
max = float('-inf')
</code></pre>
<p>By setting <code>min</code> to positive infinity, <em>any other number</em> is guaranteed to be smaller; the same applies to <code>max</code> negative infinity.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>min &gt; input</code> is always going to be false if <code>min</code> is <code>None</code>, hence why it never gets set.</p>
<p>Also you don't want the <code>elif</code>.  The first number is both the min and the max.</p>
<p>Fixed:</p>
<pre><code>min = None
max = None
while True:
    input = raw_input("Please enter number: ")
    if input == "done":
        break
    else:
        try:
            input = float(input)
        except:
            continue



    if max is None or max &lt; input:
        max = input
    if min is None or min &gt; input:
        min = input

    print min
    print max
</code></pre>
<p>Good luck!</p>
</div>
<span class="comment-copy">You never assign a value to <code>max</code>.</span>
<span class="comment-copy">Why would you even compare numbers to <code>None</code> in the first place?</span>
<span class="comment-copy">By the way, by assigning values to <code>min</code>, <code>max</code> and <code>input</code>, you overwrite three builtin functions.</span>
<span class="comment-copy">It should also be noted that both <code>min</code> and <code>max</code> are reserved names in Python, and should avoid being used as variable names.</span>
<span class="comment-copy">@ChristianDean: they are <b>not</b> reserved. There are built-in functions that are masked by using the names, but that's not disallowed.</span>
<span class="comment-copy">I know that. When I said "reserved", I meant "reserved" as in <i>"reserved for specific values"</i>, not that it's disallowed to use them. But I agree, my wording was confusing. I'll use builtin instead.</span>
<span class="comment-copy">@ChristianDean: 'reserved' is usually used for <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">keywords</a>, of which there thankfully are not many.</span>
