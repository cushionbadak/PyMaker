<div class="post-text" itemprop="text">
<p>I have an empty array.</p>
<p>I want to assign a value like this: <code>array[key][subkey] = 'value'</code></p>
<p>This produces a <em>KeyError</em> as array[key] does not exist yet.</p>
<p>What do I do? I tried the following...</p>
<pre><code>array['key'] = None
array['key']['subkey'] = 'value'
</code></pre>
<blockquote>
<p>TypeError: 'NoneType' object does not support item assignment</p>
</blockquote>
<p>I tried:</p>
<pre><code>array['key'] = []
array['key']['subkey'] = 'value'
</code></pre>
<blockquote>
<p>TypeError: list indices must be integers, not str</p>
</blockquote>
<p>I tried:</p>
<pre><code>array['key'] = ['subkey']
array['key']['subkey'] = 'value'
</code></pre>
<blockquote>
<p>TypeError: list indices must be integers, not str</p>
</blockquote>
<p>So what do I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a>, passing the <em>default factory</em> as <code>dict</code>:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(dict)
&gt;&gt;&gt; d['key']['subkey'] = 'value'
&gt;&gt;&gt; d
defaultdict(&lt;type 'dict'&gt;, {'key': {'subkey': 'value'}})
</code></pre>
<p>To apply further levels of nesting, you can create a <code>defaultdict</code> that returns <code>defaultdict</code>s to a <em>n-th</em> depth of nesting, using a function, preferably anonymous, to return the nested default dict(s):</p>
<pre><code>&gt;&gt;&gt; d = defaultdict(lambda: defaultdict(dict))
&gt;&gt;&gt; d['key']['subkey']['subsubkey'] = 'value'
&gt;&gt;&gt; d
defaultdict(&lt;function &lt;lambda&gt; at 0x104082398&gt;, {'key': defaultdict(&lt;type 'dict'&gt;, {'subkey': {'subsubkey': 'value'}})})
</code></pre>
<p><sub>Example shows nesting up to depth <code>n=1</code></sub></p>
</div>
<div class="post-text" itemprop="text">
<p>You are using a <code>[]</code> list literal not a <code>{}</code> dict literal:</p>
<pre><code>array['key'] = {}
array['key']['subkey'] = 'value'
</code></pre>
<p>But this isn't very useful in a loop.<br/>
In a loop you could test if <code>'key'</code> is not in <code>array</code> - which is a cheap operation (<code>O(1)</code> lookup):</p>
<pre><code>if 'key' not in array:
    array['key'] = {}
array['key']['subkey'] = 'value'
</code></pre>
<p>But you can use <code>setdefault()</code> to do the same thing and give <code>key</code> a default value if it doesn't already have a value, e.g.:</p>
<pre><code>array.setdefault('key', {})['subkey'] = 'value'
</code></pre>
<p>And if this looks ugly, then you can always use <a href="https://docs.python.org/3.7/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collection.defaultdict</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have used this alternative way before (edit: although I preferred Moses Koledoye answer):</p>
<pre><code>array = {}

try:
    array[key][subkey] = 'value'
except KeyError:
    array[key] = {}
    array[key][subkey] = 'value'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a nested <code>defaultdict</code> like this, goes arbitrarily deep automatically:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def ndd():
        return defaultdict(ndd)

&gt;&gt;&gt; array = ndd()
&gt;&gt;&gt; array['key']['subkey']['subsubkey'] = 'value'
&gt;&gt;&gt; array
defaultdict(&lt;function ndd at 0x041AC270&gt;,
            {'key': defaultdict(&lt;function ndd at 0x041AC270&gt;,
                                {'subkey': defaultdict(&lt;function ndd at 0x041AC270&gt;,
                                                       {'subsubkey': 'value'})})})
</code></pre>
<p>(I indented the output for readability.)</p>
<p>Originally saw that <a href="https://discuss.leetcode.com/topic/14216/tree-solutions-18-20-lines/5" rel="nofollow noreferrer">from severb</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can the below codes be used as a different method?</p>
<pre><code>&gt;&gt;&gt; array = {}
&gt;&gt;&gt; array["key"] = {"subkey": "value"}
&gt;&gt;&gt; array
{'key': {'subkey': 'value'}}
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Nested dictionaries you meant?</span>
<span class="comment-copy">@MosesKoledoye Yes</span>
<span class="comment-copy">Where I have used it (creating dictionaries inside loops) this is not an option as it does not "fill" the dictionary but rather creates a new one.</span>
