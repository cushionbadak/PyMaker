<div class="post-text" itemprop="text">
<p>I know my question might be confusing, it's hard to ask something you don't know what it is exactly (I'm going to call it <em>'hint'</em>), so my apologies for that. Having that said, here it is what I mean (<em>the text in the white box</em>):
<a href="https://i.stack.imgur.com/rU2pE.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/rU2pE.png"/></a></p>
<p><strong>My questions are:</strong> </p>
<ul>
<li>How can I make my own hint (and customize it) text when calling a function?</li>
<li>What is it exactly? </li>
<li>What does the text in this example mean?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>IDLE calls the popup a 'calltip'.  For a module defined in python code with a def statement, it shows the signature on the first line and the first line of the doc string on the second.  They are intended to work correctly for any type of callable invoked with parentheses.</p>
<p>If you type '('  the box pops up unless you are typing fast.  After it closes, to bring it back, you position the cursor between '(' and ')' and either select Edit on the top menu and 'Show call tip', or type the shortcut key shown on the menu.  For more, <a href="https://docs.python.org/3/library/idle.html#calltips" rel="nofollow noreferrer">see the doc.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You are in fact correct about the textbox being called hint, so no quotation needed. What you are seeing is a type hint. It is supported by the <code>typing</code> module inside Python. Refer to the example below:</p>
<pre><code>def add(a: int, b: int) -&gt; int:
    return a + b
</code></pre>
<p>Then when you try to call the function you will see a textbox very similar to the one you showed. I encourage you to read the <code>typing</code> module <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">page</a> if you want to learn more about it.</p>
<p>That said, in most cases you will not be needing that type hint because doc strings ("""<em>info about my function</em>""") are usually sought after more.</p>
</div>
<div class="post-text" itemprop="text">
<p>For future reference:</p>
<ul>
<li><strong>How can I make my own hint [...] when calling a function?</strong></li>
</ul>
<p>First, there are 2 types of '<em>hints</em>' as I called them:</p>
<blockquote>
<p><strong><a href="https://docs.python.org/3/tutorial/controlflow.html#documentation-strings" rel="nofollow noreferrer">4.7.6. Documentation Strings:</a></strong><br/>
  Here are some conventions about the content and formatting of documentation strings.</p>
<p>The first line should always be a short, concise summary of the object’s purpose. <strong>[...]</strong> This line should begin with a capital letter and end with a period.</p>
<p>If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description. The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc. <strong>[...]</strong></p>
<p>Here is an example of a multi-line docstring:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; def my_function():
...     """Do nothing, but document it.
...
...     No, really, it doesn't do anything.
...     """
...     pass
...
&gt;&gt;&gt; print(my_function.__doc__)
Do nothing, but document it.

    No, really, it doesn't do anything.
</code></pre>
<p>And the one <a href="https://python-future.org/func_annotations.html" rel="nofollow noreferrer">introduced in Python 3.0</a>:</p>
<blockquote>
<p><strong><a href="https://docs.python.org/3/tutorial/controlflow.html#function-annotations" rel="nofollow noreferrer">4.7.7. Function Annotations:</a></strong>
    Function annotations are completely optional metadata information about the types used 
    by user-defined functions (see PEP 3107 and PEP 484 for more information).</p>
<p>Annotations are stored in the <strong>annotations</strong> attribute of the function as a dictionary and have no effect on any other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal -&gt;, followed by an expression, between the parameter list and the colon denoting the end of the def statement. The following example has a positional argument, a keyword argument, and the return value annotated:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; def f(ham: str, eggs: str = 'eggs') -&gt; str:
...     print("Annotations:", f.__annotations__)
...     print("Arguments:", ham, eggs)
...     return ham + ' and ' + eggs
...
&gt;&gt;&gt; f('spam')
Annotations: {'ham': &lt;class 'str'&gt;, 'return': &lt;class 'str'&gt;, 'eggs': &lt;class 'str'&gt;}
Arguments: spam eggs
'spam and eggs'
</code></pre>
<hr/>
<ul>
<li><strong>What is it exactly?</strong></li>
</ul>
<p>With what is written above and what <a href="https://stackoverflow.com/questions/44981747/how-can-i-create-my-own-hint-when-calling-a-function-in-idle/44982756#44982756">Terry Jan Reedy</a> answered:</p>
<blockquote>
<p>IDLE calls the popup a 'calltip'. For a module defined in python code with a def statement, it shows the signature on the first line and the first line of the doc string on the second. They are intended to work correctly for any type of callable invoked with parentheses.</p>
<p>If you type '(' the box pops up unless you are typing fast. After it closes, to bring it back, you position the cursor between '(' and ')' and either select Edit on the top menu and 'Show call tip', or type the shortcut key shown on the menu. For more, <a href="https://docs.python.org/3/library/idle.html#calltips" rel="nofollow noreferrer">see the doc</a>.</p>
</blockquote>
<hr/>
<ul>
<li><strong>What does the text in this example mean?</strong></li>
</ul>
<p>Sadly, because I'm not working on with what I was at the moment and I never had the need to understand it, I have not found what the syntax for each <em>calltip</em> is.</p>
</div>
<span class="comment-copy">That "hint" is showing you <code>sum</code>'s parameters. I think the closest you can get to making your own hint is <code>def</code>ing a function <code>tmp(x, y, z):</code> and seeing if you then get a "hint" when you type in <code>&gt;&gt;&gt; tmp(</code>....</span>
<span class="comment-copy">I forgot to mention that I also wanted to customize it, like even adding what it does or something in the function's hint. But thanks anyway for the help!</span>
<span class="comment-copy">That may not be possible. That's not a feature of the Python language, but rather of the IDE you're using to edit your code.</span>
<span class="comment-copy">That part that you added in the edit, could you move it to a separate answer?</span>
<span class="comment-copy">It seems you are correct, and thanks for the help, but apparently this is only for python versions over 2.7. Sadly that doesn't work with what I have.</span>
<span class="comment-copy">Calltips existed long before the typing module and work fine on 2.7).</span>
