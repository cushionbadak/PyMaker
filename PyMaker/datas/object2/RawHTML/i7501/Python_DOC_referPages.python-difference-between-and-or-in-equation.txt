<div class="post-text" itemprop="text">
<p>all.
I'm running a simple python program and I found when I use <code>followees = self.followee.get(userId, set()) | set([userId])</code>, it passed the test. However, if I use <code>followees = self.followee.get(userId, set()) or set([userId])</code>, it didn't.</p>
<p>So, apparently, there are some differences between these two operators in equations. Does anyone have some idea what's going on?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>For sets (which are your operands here), <code>|</code> returns the union of both sets (the operands), while the <code>or</code> operator returns the first <em>truthy</em> operand (a non-empty set) or the last, if all of the operands are <em>falsy</em> — making <code>or</code> a short-circuit operator.</p>
<p>Consider the following examples:</p>
<pre><code>&gt;&gt;&gt; set([1,2,3]) | set([4])
set([1, 2, 3, 4])
&gt;&gt;&gt; set([1,2,3]) or set([4])
set([1, 2, 3])
&gt;&gt;&gt; set([1,2,3]) or set([])
set([1, 2, 3])
&gt;&gt;&gt; set([1,2,3]) | set([])
set([1, 2, 3])
</code></pre>
<p><sub>Notice that with two operands, if at least one of the operands is <em>falsy</em>, both <code>|</code> and <code>or</code> give the same results.</sub></p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer"><code>or</code></a>'s behaviour is consistent for all objects, while <code>|</code> would behave differently depending on how the operands implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__or__" rel="nofollow noreferrer"><code>__or__</code></a> or <a href="https://docs.python.org/3/reference/datamodel.html#object.__ror__" rel="nofollow noreferrer"><code>__ror__</code></a> magic methods e.g. acts as the bitwise <em>or</em> for integer types and <em>[max-]union</em> for <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> objects.</p>
</div>
<span class="comment-copy"><code>|</code> is the union operation for sets.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ oh, I see. It doesn't mention that in the python documentation. It just says l is like OR operator :(. Does l means union for dict too? List?</span>
<span class="comment-copy"><code>|</code> is the bit-wise OR (for <code>set</code> it acts as union) and <code>or</code> is the logical OR.</span>
<span class="comment-copy">@ztlevi they define an <code>__or__</code> implementation for sets, which is called when you do set 1 | set 2, it's actually set 1.__or__(set 2)</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ so it's not for "or", just l?</span>
<span class="comment-copy">it is also like <code>bitwise or</code> with integers, correct</span>
