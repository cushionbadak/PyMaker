<div class="post-text" itemprop="text">
<p>I have this dictionary:</p>
<pre><code>db= {'www.baurom.ro':
                     {0: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                     },
    'slbz2':
            {0: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }
</code></pre>
<p>And a list:</p>
<pre><code>lista=['www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.listafirme.ro', 'www.romanian-companies.eu', 'www.risco.ro']
</code></pre>
<p>What am i doing now is this:</p>
<pre><code>for x in lista:
     if x in db:
        db[x][0][lista.index(x)]+=1
</code></pre>
<p>In other words i want to count how many times each site appears in the list and on which position. This works but in the given example it will return something like:</p>
<pre><code>{0: [7, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</code></pre>
<p>while i would want it to be:</p>
<pre><code>{0: [1, 1, 1, 1, 1, 1, 1, 0, 0, 0]
</code></pre>
<p>How can i achieve this? I can use a variable, initiate it with var=0 and then +=1 and use it as an artificial index but is there a more "pythonic" way of doing it?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I rightly understand your question, you already have <code>db</code> dictionary and you're seeking <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> operator.</p>
<p>And your code will be like below:</p>
<pre><code>for index, element in enumerate(lista):
    if element in db:
        db[element][0][index] = 1 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>for entry in db:
    db[entry][0] = [int(x == entry) for x in lista]
print(db)  # {'slbz2': {0: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, 'www.baurom.ro': {0: [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], 1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}
</code></pre>
<p>You essentially replace your <code>dictionary</code> values with a list-comprehension that compares the <code>dictionary</code> entry to the <code>lista</code> entry. If the result of the comparison is <code>True</code> you convert that <code>bool</code>ean value to an <code>int</code>eger (<code>True -&gt; 1</code>, <code>False -&gt; 0</code>).</p>
<hr/>
<p>If the items in <code>lista</code> are very limited in comparison to the <code>dictionary</code> keys you can do this instead:</p>
<pre><code>for entry in set(x for x in lista if x in db):
    # rest stays the same
</code></pre>
<p>This way, you loop and edit <strong>only</strong> those <code>key</code>s in your <code>dictionary</code> that appear in your <code>lista</code>. Also notice that you loop over a <code>set</code> constructed from the elements of <code>lista</code> to ignore its duplicates (<code>'www.baurom.ro'</code> <code>key</code> is edited once, not as many times as it appears on <code>lista</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your problem correctly, you could just iterate over <code>lista</code> and create <code>db</code> as needed :</p>
<pre><code>urls = ['www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.listafirme.ro', 'www.romanian-companies.eu', 'www.risco.ro']
n = len(urls)
db = {}

for i, url in enumerate(urls):
    if not db.get(url):
        db[url] = {0: [0] * n} # NOTE: Use numpy for large arrays
    db[url][0][i] = 1

print(db)
# {'www.romanian-companies.eu': {0: [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, 'www.risco.ro': {0: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]}, 'www.listafirme.ro': {0: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, 'www.baurom.ro': {0: [1, 1, 1, 1, 1, 1, 1, 0, 0, 0]}}
</code></pre>
<p>It requires only one pass over <code>lista</code> and should be really fast.</p>
<p>If you have a list of interesting urls, you could use this variant:</p>
<pre><code>from collections import defaultdict

urls = ['www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.baurom.ro', 'www.listafirme.ro', 'www.romanian-companies.eu', 'www.risco.ro']

interesting_urls = set(['www.baurom.ro', 'slbz2'])

n = len(urls)

def url_array():
    return {0: [0] * n, 1: [0] * n}

db = defaultdict(url_array)

for i, url in enumerate(urls):
    if url in interesting_urls:
        db[url][0][i] = 1

print(db)
# defaultdict(&lt;function url_array at 0x7fe8a95b87d0&gt;, {'www.baurom.ro': {0: [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], 1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}) 
</code></pre>
</div>
<span class="comment-copy">I understand that this loops over all keys in the db, and the db may and will contain 20k website names for example, it's not efficient to loop over all of them.</span>
<span class="comment-copy">@Mike see update</span>
