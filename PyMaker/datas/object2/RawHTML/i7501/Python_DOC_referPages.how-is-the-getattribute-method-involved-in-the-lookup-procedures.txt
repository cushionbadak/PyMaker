<div class="post-text" itemprop="text">
<p>Python in a Nutshell describes:</p>
<ul>
<li><p>the lookup procedure when getting an attribute from a class, e.g. <code>cls.name</code> (see the first part in <a href="https://stackoverflow.com/q/44938264/156458">Why are the lookup procedures for getting an attribute from a class and from an instance different?</a>)</p></li>
<li><p><a href="https://stackoverflow.com/questions/44913505/look-up-an-attribute-from-an-instance">the lookup procedure when getting an attribute from an instance, e.g. <code>obj.name</code></a></p></li>
</ul>
<p>How is the <code>__getattribute__</code> method involved in the above lookup procedures?</p>
<ul>
<li><p>Is the <code>__getattribute__</code> method called somewhere in the lookup procedures?</p></li>
<li><p>Or, are the lookup procedures started by calling <code>__getattribute__</code>, which then does all the work in the two links?</p></li>
</ul>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TLDR:</strong> Attribute lookup starts with calling <code>__getattribute__</code> and it does all the work mentioned in the links. Based on the type of the object either <code>object.__getattribute__</code> or <code>type.__getattribute__</code> is called.</p>
<hr/>
<p>Any attribute lookup results in <code>LOAD_ATTR</code> bytecode internally.</p>
<pre><code>&gt;&gt;&gt; import dis    
&gt;&gt;&gt; dis.dis(lambda: foo.x)
  1           0 LOAD_GLOBAL              0 (foo)
              2 LOAD_ATTR                1 (x)
              4 RETURN_VALUE
</code></pre>
<p><a href="https://github.com/python/cpython/blob/master/Python/ceval.c#L2796" rel="nofollow noreferrer"><code>LOAD_ATTR</code></a> then calls <a href="https://docs.python.org/3.6/c-api/object.html#c.PyObject_GetAttr" rel="nofollow noreferrer"><code>PyObject_GetAttr</code></a>.</p>
<p><code>PyObject_GetAttr</code> now looks for either <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getattro" rel="nofollow noreferrer"><code>tp_getattro</code></a> or <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getattr" rel="nofollow noreferrer"><code>tp_getattr</code>(deprecated)</a> slot on the object's type. </p>
<pre><code>PyObject *

PyObject_GetAttr(PyObject *v, PyObject *name)
{
    PyTypeObject *tp = Py_TYPE(v);
    ...
    if (tp-&gt;tp_getattro != NULL)
        return (*tp-&gt;tp_getattro)(v, name);
    if (tp-&gt;tp_getattr != NULL) {
        const char *name_str = PyUnicode_AsUTF8(name);
        if (name_str == NULL)
            return NULL;
        return (*tp-&gt;tp_getattr)(v, (char *)name_str);
    }
    ...
}
</code></pre>
<p>Now if an object has its own implementation of <code>__getattribute__</code> then that is used else it falls back to  either <code>object.__getattribute__</code> or <code>type.__getattribute__</code> based on the type. <a href="https://github.com/python/cpython/blob/master/Objects/typeobject.c#L4605" rel="nofollow noreferrer"><code>tp_getattro</code> slot</a> in case of <code>object</code> points to <a href="https://github.com/python/cpython/blob/master/Objects/object.c#L1207" rel="nofollow noreferrer"><code>PyObject_GenericGetAttr</code></a> and for <a href="https://github.com/python/cpython/blob/master/Objects/typeobject.c#L3438" rel="nofollow noreferrer"><code>type</code></a> it points to <a href="https://github.com/python/cpython/blob/master/Objects/typeobject.c#L3033" rel="nofollow noreferrer"><code>type_getattro</code></a>.</p>
<p><code>PyObject_GenericGetAttr</code> and <code>type_getattro</code> basically do all the work of checking for descriptors, dictionary, slots etc(based on the type) and try to return a value. If they fail to find it even after everything then <code>AttributeError</code> is raised and if the object's type defined <code>__getattr__</code> then it will be invoked.</p>
</div>
<span class="comment-copy">With all these attribute lookup questions you've been asking, I figured you'd want to hear about this part eventually.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/39043912/python-3-getattribute-vs-dot-access-behaviour">Relevant</a>, though with a focus on different details than the ones you're looking at.</span>
