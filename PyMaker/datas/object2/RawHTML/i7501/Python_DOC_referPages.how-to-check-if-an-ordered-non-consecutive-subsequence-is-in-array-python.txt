<div class="post-text" itemprop="text">
<p>I'd be surprised if this hasn't been asked yet.</p>
<p>Let's say I have an array <code>[5,6,7,29,34]</code> and I want to check if the sequence <code>5,6,7</code> appears in it (which it does). Order does matter.</p>
<p>How would I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun, here is a quick (very quick) and dirty (very dirty) solution (that is somewhat flawed, so don't really use this):</p>
<pre><code>&gt;&gt;&gt; str([5,6,7]).strip('[]') in str([5,6,7,29,34])
True
</code></pre>
<p>The RightWayâ„¢ is likely to use <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer"><em>list.index()</em></a> to find candidate matches for the first element and then verify the full match with slicing and list equality:</p>
<pre><code>&gt;&gt;&gt; def issubsequence(sub, seq):
        i = -1
        while True:
            try:
                i = seq.index(sub[0], i+1)  # locate first character
            except ValueError:
                return False
            if seq[i : i+len(sub)] == sub:  # verify full match
                return True         

&gt;&gt;&gt; issubsequence([5, 6, 7], [5,6,7,29,34])
True
&gt;&gt;&gt; issubsequence([5, 20, 7], [5,6,7,29,34])
False
</code></pre>
<p>Edit: The OP clarified in a comment that the subsequence must be in order but need not be in consecutive positions.  That has a different and much more complicated solution which was already answered here:  <a href="https://stackoverflow.com/questions/33174985/how-do-you-check-if-one-array-is-a-subsequence-of-another">How do you check if one array is a subsequence of another?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a good solution: </p>
<pre><code>def is_sublist(a, b):
    if not a: return True
    if not b: return False
    return b[:len(a)] == a or is_sublist(a, b[1:])
</code></pre>
<p>As mentioned by Stefan Pochmann this can be rewritten as:</p>
<pre><code>def is_sublist(a, b):
    return b[:len(a)] == a or bool(b) and is_sublist(a, b[1:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution that works (efficiently!) on any pair of iterable objects:</p>
<pre><code>import collections
import itertools

def consume(iterator, n=None):
    """Advance the iterator n-steps ahead. If n is none, consume entirely."""
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)

def is_slice(seq, subseq):
    """Returns whether subseq is a contiguous subsequence of seq."""
    subseq = tuple(subseq)  # len(subseq) is needed so we make it a tuple.
    seq_window = itertools.tee(seq, n=len(subseq))
    for steps, it in enumerate(seq_window):
        # advance each iterator to point to subsequent values in seq.
        consume(it, n=steps)
    return any(subseq == seq_slice for seq_slice in izip(*seq_window))
</code></pre>
<p><code>consume</code> comes from <a href="https://docs.python.org/2/library/itertools.html#recipes" rel="nofollow noreferrer">itertools recipes</a>.</p>
</div>
<span class="comment-copy">Like substring or like subsequence?</span>
<span class="comment-copy">I assume order matters? eg. <code>[1, 2]</code> matches <code>[1, 2, 3, 4]</code> but not <code>[3, 2, 1, 4]</code>.</span>
<span class="comment-copy">@ChristianDean yes, order matters.</span>
<span class="comment-copy">Do you consider <code>[5,7,29]</code> a "subarray" of <code>[5,6,7,29,34]</code>? It <b>is</b> a subsequence.</span>
<span class="comment-copy">@RaymondHettinger <b>You</b> don't know the difference between substring and subsequence? I'm surprised.</span>
<span class="comment-copy">Meh, that also says <code>True</code> for <code>str([5,6,7]).strip('[]') in str([55,6,7,29,34])</code>.</span>
<span class="comment-copy">And your added solution fails <code>issubsequence([1, 3], [1, 2, 3])</code>. It says <code>False</code> instead of the correct <code>True</code>.</span>
<span class="comment-copy">@StefanPochmann No it doesn't. I'm getting <code>False</code> as the output.</span>
<span class="comment-copy">@ChristianDean Exactly. Which is wrong.</span>
<span class="comment-copy">@ChristianDean Yeah, apparently so many people don't know the definitions that Wikipedia's articles for substring and subsequence each right away reference the other and warn that one shouldn't confuse them :-)</span>
<span class="comment-copy">"Beautiful" solution... you're so sure of yourself :) ... More seriously, you could even do <code>if not a: return True; if not b: return False</code>...</span>
<span class="comment-copy">Perfect, you could probably lambda-ify that if one wanted to as well.</span>
<span class="comment-copy">If you're going to use this, just keep in mind that it hits the recursion limit fairly quickly. A 1000 element list is a no-go.</span>
<span class="comment-copy">Could just do <code>return b[:len(a)] == a or bool(b) and is_sublist(a, b[1:])</code>. Your two ifs don't really help.</span>
