<div class="post-text" itemprop="text">
<p>From <a href="https://wiki.python.org/moin/TupleSyntax" rel="nofollow noreferrer">python wiki</a></p>
<blockquote>
<p><strong>Multiple Element Tuples</strong></p>
<p>In Python, multiple-element tuples look like:</p>
<p><code>1,2,3</code></p>
<p>...</p>
<p>but again, it is the commas, not the parentheses, that define the tuple.</p>
</blockquote>
<p>Oh, really?!</p>
<p>Then why:</p>
<pre><code>&gt;&gt;&gt; tuple((((((1, 2, 3)))))) # creates a valid tuple
# (1, 2, 3)
&gt;&gt;&gt; tuple(1, 2, 3, ) # But not here
# TypeError: tuple() takes at most 1 argument (3 given)
</code></pre>
<p>More seriously, I don't get why the parenthesis was not chosen over the commas?</p>
<p>Because I think it would create a paradox when:</p>
<pre><code>&gt;&gt;&gt; 1, # is a valid tuple
# (1,)
&gt;&gt;&gt; tuple([1]) # Or this
# (1,)
&gt;&gt;&gt; tuple(1) # But not this one
# TypeError: 'int' object is not iterable
</code></pre>
<p>However, if you consider that parenthesis were <strong>always</strong> in charge of instantiating  a <code>tuple</code>, all of the problems with instantiating  <code>tuple</code> with multiple items are gone.</p>
<p>e.g. in my imaginary world:</p>
<pre><code>&gt;&gt;&gt; (1, 2, 3) # stay valid
# (1, 2, 3)
&gt;&gt;&gt; (1) # is newly valid
# (1)
&gt;&gt;&gt; () # stay valid
# ()
&gt;&gt;&gt; 1, 
# TypeError: int() takes exactly 1 argument (2 given) 
</code></pre>
<p>I know this is a well-known feature and I'm already sorry if it a duplicate. I have found lots of similar topics about how tuple worked, but none explaining in details why this feature was created like that.</p>
<p>I am also aware that this topic could be closed as opinion-based, but I am mostly interested in <em>technical reasons</em> (if any), or at least <em>historical reasons</em>.</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an artifact of the <a href="https://github.com/python/cpython/blob/master/Grammar/Grammar" rel="nofollow noreferrer">grammar</a>.  </p>
<p>The terms separated by commas are a building block for tuples, lists, and sets depending on whether they are wrapped by square brackets, curly braces, or nothing at all.</p>
<p>The chief challenge when specifying a grammar is balancing multiple competing uses of the same characters.  Commas separate parts of lists, tuples, dicts, and sets.  Commas also separate arguments in function calls.  Trailing commas are allowed for both uses (and are required for tuples of length one). Likewise, parentheses have multiple uses including function calls and grouping for arithmetic expressions.  The period serves as a decimal point and for the getattribute operator.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason why <code>tuple(..)</code> does <em>not</em> take multiple arguments, is because there can be confusion between (1) a single element with an iterable that should be converted to a tuple, and (2) multiple arguments.</p>
<p>Say you call tuple with a single iterable element, then there can be confusion whether Python should construct a tuple with <em>one</em> element: the iterable; or a tuple that is constructed based on the given iterable. The designers of Python chose the latter. As is specified in the <a href="https://docs.python.org/3/library/stdtypes.html#tuple" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p><strong><code>tuple(iterable)</code></strong></p>
</blockquote>
<p>This is reasonable since then one can write:</p>
<pre><code>tuple(x*x for x in somelist if x%2)
</code></pre>
<p>For instance to construct a tuple with squares of odd elements of the <code>somelist</code>.</p>
<p>In your first example:</p>
<pre><code>tuple((((((1, 2, 3))))))
</code></pre>
<p>You have constructed a tuple <code>(1, 2, 3)</code>. Now you pass that tuple to the tuple constructor as the only parameter. Since a tuple is an iterable, you thus construct a tuple based on the only iterable you pass.</p>
<p>Your expression:</p>
<pre><code>tuple(1, 2, 3, )
</code></pre>
<p>However raises an error, since you provide more elements than the only one that you <em>can</em> and <em>should</em> pass.</p>
<p>Next you have the <em>tuple <strong>literal</strong></em></p></div>
<div class="post-text" itemprop="text">
<p>Usually, parens do not serve anything more than grouping, but when they appear after a callable, they have a different connotation than just grouping expressions; Python unlike, say Haskell, requires those parens to make the call.</p>
<p>In the following example, the outer pair of parens are bound to the function call (language construct), while the nested ones group the inner expression (the function arguments(s)) as a tuple:</p>
<pre><code>&gt;&gt;&gt; tuple((1, 2, 3))
(1, 2, 3)
</code></pre>
<p>Essentially, the tuple is created by the comma(s).</p>
</div>
<span class="comment-copy">This only "creates a paradox" if you assume that tuple literals work the same way as the <code>tuple</code> function, but <code>tuple</code> <b>doesn't work the same way as tuple literals</b>. A tuple literal, can be thought of as saying "make a tuple with the elements a and b and c": <code>a,b,c</code>. The <code>tuple</code> function takes <i>any iterable as an argument</i> and creates a tuple <i>from the elements in the iterable.</i></span>
<span class="comment-copy">Furthermore, there are cases where a parenthesis <i>are required</i>, e.g. if you want to pass a tuple as an argument to a function.</span>
<span class="comment-copy">So you want <code>2 * (3 + 4)</code> to result in the tuple <code>(7, 7)</code> instead of the number <code>14</code>?</span>
<span class="comment-copy">@juanpa.arrivillaga, I agree, but in this case, why parenthesis are not <b>always</b> required? <code>1, </code> will automatically be casted into <code>tuple</code> for no reasons whatsoever.</span>
<span class="comment-copy">@StefanPochmann, very good point actually...</span>
<span class="comment-copy">That's true, both parentheses and commas have multiple uses. Thanks for the link. And  I'm sorry if the question sounded arrogant.</span>
<span class="comment-copy">@MaxChr√©tien I thought it was a perfectly reasonable question.</span>
<span class="comment-copy">Thanks for providing extra examples.</span>
