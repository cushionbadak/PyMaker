<div class="post-text" itemprop="text">
<p>What is the best way to put  variables in python for multiple scripts?</p>
<p>I have the following scripts:</p>
<ul>
<li><p><code>main.py</code>: This script to declare  common variables for <code>one.py</code>, <code>two.py</code>, and <code>three.py</code>. Also takes input from the user in interactive way and from the defined input file.</p></li>
<li><p><code>config.py</code>: This script has all three scripts configurations inputs like ip-adress, ports details. etc.</p></li>
<li><p><code>one.py</code>: I have written this script with class and it take inputs from <code>main.py</code> and <code>config.py</code>.</p></li>
<li><p><code>two.py</code>: I have written this script with class and it take inputs from <code>main.py</code> and <code>config.py</code>.</p></li>
<li><p><code>three.py</code>: I have written this script with class and it take inputs from <code>main.py</code> and <code>config.py</code>.</p></li>
<li><p><code>run.py</code>: This script loads class objects for the <code>one.py</code>, <code>two.py</code>, and <code>three.py</code> and calls the functions defined in them.</p></li>
</ul>
<h1><code>main.py</code></h1>
<pre><code>list1 = []
a = "common for one.py,two.py and three.py"
</code></pre>
<h1><code>one.py</code></h1>
<pre><code>import main
main.list1.append("1")
</code></pre>
<h1><code>two.py</code></h1>
<pre><code>import main
main.list1.append("2")
</code></pre>
<h1><code>three.py</code></h1>
<pre><code>import main
main.list1.append("3")
</code></pre>
<p>Running script:</p>
<h1><code>run.py</code></h1>
<pre><code>import main
import one
import two
import three
# start performing
#call  one script functions
#call  two script functions
#call  three script functions
</code></pre>
<p>I need some suggestions from you.</p>
<ol>
<li><p>Am I am doing it in right way?</p></li>
<li><p>Will my scripts be easy for future maintenance?</p></li>
<li><p>Since I am putting variable <code>list1</code> in <code>main.py</code>. It will first
appending some value in <code>one.py</code> and then <code>two.py</code> is going to access it.
My doubt is <code>two.py</code> is importing <code>main.py</code> in this case it does not
overwrite with empty list value? I have tested it, and it  works fine.
But I still want to take your suggestions for best practices.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Yes, I think what you're doing is basically OK. I would rename a couple of the scripts to better indicate their roles: I would rename <code>run.py</code> and make it <code>main.py</code>, and make what you called <code>main.py</code> something like <code>common.py</code>. However, for the sake of discussion, I'll use the script names you have in your question.</p>
<p>You don't have to worry about what's in your <code>main.py</code> reinitializing <code>list1</code> variable every time it's <code>imported</code>. That's because the results of <code>import</code>ing  modules are "cached" in <code>sys.modules</code> and the top-level code in them only executes the first time they're <code>import</code>ed. If another script <code>import</code>s one of them again, the results of the first time saved in cached version is used. You can think of loaded modules as <a href="https://en.wikipedia.org/wiki/Singleton_pattern" rel="nofollow noreferrer">"singleton"</a> instances of a <code>module</code> class (which in fact they are, see <a href="https://docs.python.org/3/library/types.html#types.ModuleType" rel="nofollow noreferrer"><code>types.ModuleType</code></a>).</p>
<p>If there's a dependency in your <code>run.py</code> that the modules <code>one</code>, <code>two</code>, and <code>three</code> are imported in a certain order, then I would <code>import</code> them all in your <code>main</code> module, so other scripts don't have to worry about it (the ordering). That way other scripts can just <code>import</code> whichever ones they want to use.</p>
<p>The above is not to say your design couldn't be improved. It looks like you're basically using global variables, which have long been considered a "bad thing" for a number of reasons (see <a href="http://wiki.c2.com/?GlobalVariablesAreBad" rel="nofollow noreferrer"><strong><em>Global Variables Are Bad</em></strong></a>). To avoid that, the direct use of <code>list1</code> would need to be replaced with an instance of some new custom <code>class</code> with it's lifetime and access to it handled indirectly via methods defined in the class after explicitly creating an instance of it. This instance would then need to be passed as argument to any function or method that needed use or otherwise do something with or to the instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't look easy to maintain, since the values appended to the list only happen upon calling the import in main. Import them in the wrong order, or forget to import one of them, and you will get unexpected results.</p>
<p>In general, it is fine to share variables between scripts, but the various modules should not edit the values of the shared variables, rather, each module should be solely responsible for the values of its variables.</p>
</div>
<span class="comment-copy">maybe use a config file for the variables if they arent being dynamically changed</span>
<span class="comment-copy">thanks for reply pyjg, list1 values are dynamically changing  and two.py is depend on one.py append list1 values</span>
<span class="comment-copy">in that case, as @Gavi has mentioned in his answer, each script should be responsible for the variable.</span>
<span class="comment-copy">so list1 has to declare in one.py and then need to access in two.py right ?</span>
<span class="comment-copy">you can just declare different variables in the different scripts and then import them in the <code>run.py</code> file unless I am missing something.</span>
<span class="comment-copy">Hi Gavi, Thanks a lot for your response. In this case how do i have to decale list1? The thing is one.py has to run first and then two,py will run. two.py is dependent on list1 value that is appended by one.py</span>
<span class="comment-copy">I would declare lists in each module, and treat their content as consatnt in the other modules. For instance, main.py would have a variable mainSharedList = [], one.py would have a variable oneSharedList = main.mainSharedList + ["1"], two.py would then have twoSharedList = one.oneSharedList + ["2"] etc.  This way, it is clear in each module what is the content of the list is, since the shared values are always constant.</span>
