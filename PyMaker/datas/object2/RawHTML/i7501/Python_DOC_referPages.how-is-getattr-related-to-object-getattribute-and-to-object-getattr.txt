<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3.6/library/functions.html#getattr" rel="nofollow noreferrer">https://docs.python.org/3.6/library/functions.html#getattr</a></p>
<blockquote>
<pre><code>getattr(object, name[, default])
</code></pre>
<p>Return the value of the named attribute of <code>object</code>. name must be a
  string. If the string is the name of one of the objectâ€™s attributes,
  the result is the value of that attribute. For example, <code>getattr(x,
  'foobar')</code> is equivalent to <code>x.foobar</code>. If the named attribute does
  not exist, <code>default</code> is returned if provided, otherwise
  <code>AttributeError</code> is raised.</p>
</blockquote>
<p>How is <code>getattr</code> related to <code>object.__getattribute__</code> and to <code>object.__getattr__</code>?</p>
<p>Does <code>getattr</code> call <code>object.__getattribute__</code> or <code>object.__getattr__</code>? I would guess the former? </p>
</div>
<div class="post-text" itemprop="text">
<h1>Summary Answer</h1>
<p>In general, a dotted lookup invokes __getattribute__.</p>
<p>If the code in <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer">__getattribute__</a> doesn't find the attribute, it looks to see if <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">__getattr__</a> is defined.  If so, it is called.  Otherwise, <em>AttributeError</em> is raised.</p>
<p>The <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">getattr()</a> function is just an alternative way to call the above methods.  For example <code>getattr(a, 'x')</code> is equivalent to <code>a.x</code>.  </p>
<p>The <em>getattr()</em> function is mainly useful when you don't know the name of an attribute in advance (i.e. when it is stored in a variable).  For example, <code>k = 'x'; getattr(a, k)</code> is equivalent to <code>a.x</code>.</p>
<h1>Analogy and high level point-of-view</h1>
<p>The best way to think of it is that __getattribute__ is the first called primary method and __getattr__ is the fallback which is called when attributes are missing.  In this way, it is very much like the relationship between <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">__getitem__</a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__missing__" rel="nofollow noreferrer">__missing__</a> for square bracket lookups in dictionaries.</p>
<h1>Demonstration code</h1>
<p>Here is a worked-out example:</p>
<pre><code>&gt;&gt;&gt; class A(object):
    x = 10
    def __getattribute__(self, attr):
        print(f'Looking up {attr!r}')
        return object.__getattribute__(self, attr)
    def __getattr__(self, attr):
        print(f'Invoked the fallback method for missing {attr!r}')
        return 42

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.x
Looking up 'x'
10
&gt;&gt;&gt; a.y
Looking up 'y'
Invoked the fallback method for missing 'y'
42

&gt;&gt;&gt; # Equivalent calls with getattr()
&gt;&gt;&gt; getattr(a, 'x')
Looking up 'x'
10
&gt;&gt;&gt; getattr(a, 'y')
Looking up 'y'
Invoked the fallback method for missing 'y'
42
</code></pre>
<h1>Official Documentation</h1>
<p>Here are the relevant parts of the docs:</p>
<blockquote>
<p>object.__getattr__(self, name) Called when an attribute lookup has
  not found the attribute in the usual places (i.e. it is not an
  instance attribute nor is it found in the class tree for self). name
  is the attribute name. This method should return the (computed)
  attribute value or raise an AttributeError exception.</p>
<p>Note that if the attribute is found through the normal mechanism,
  __getattr__() is not called. (This is an intentional asymmetry between __getattr__() and __setattr__().) This is done both for efficiency reasons and because otherwise __getattr__() would have no way to
  access other attributes of the instance. Note that at least for
  instance variables, you can fake total control by not inserting any
  values in the instance attribute dictionary (but instead inserting
  them in another object). See the __getattribute__() method below for a
  way to actually get total control over attribute access.</p>
<p>object.__getattribute__(self, name) Called unconditionally to
  implement attribute accesses for instances of the class. If the class
  also defines __getattr__(), the latter will not be called unless
  __getattribute__() either calls it explicitly or raises an <em>AttributeError</em>. This method should return the (computed) attribute
  value or raise an <em>AttributeError</em> exception. In order to avoid infinite
  recursion in this method, its implementation should always call the
  base class method with the same name to access any attributes it
  needs, for example, object.__getattribute__(self, name).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>getattr(foo, 'bar')</code>(which is basically <code>foo.bar</code>) calls <code>__getattribute__</code> and from there <code>__getattr__</code> can be called(if it exists) when:</p>
<ol>
<li><code>AttributeError</code> is raised by <code>__getattribute__</code></li>
<li><code>__getattribute__</code> calls it explicitly</li>
</ol>
<p>From <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>If the class also defines <code>__getattr__()</code>, the latter will not be called
  unless <code>__getattribute__()</code> either calls it explicitly or raises an
  <code>AttributeError</code>.</p>
</blockquote>
<p>Defining <code>__getattr__</code> can be useful if you don't want to throw attribute errors on random attribute access. <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">Mock library</a> is great example of that.</p>
<pre><code>&gt;&gt;&gt; from unittest.mock import Mock
&gt;&gt;&gt; m = Mock()
&gt;&gt;&gt; m.foo.bar.spam
&lt;Mock name='mock.foo.bar.spam' id='4367274280'&gt;
</code></pre>
<p>If you don't want to define <code>__getattr__</code> all the time nor want to handle <code>AttributeError</code> all the time then you could either use the 3 argument form of <code>getattr()</code> to return default value if attribute wasn't found or use <code>hasattr</code> to check for its existence.</p>
<pre><code>&gt;&gt; getattr([], 'foo')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-60-f1834c32d3ce&gt; in &lt;module&gt;()
----&gt; 1 getattr([], 'foo')

AttributeError: 'list' object has no attribute 'foo'
&gt;&gt;&gt; getattr([], 'foo', 'default')
'default'
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>class A:
    def __getattr__(self, attr):
        print('Inside A.__getattr__')
        return 'eggs'

print(A().foo)
</code></pre>
<p><strong>outputs:</strong></p>
<pre><code>Inside A.__getattr__
eggs
</code></pre>
<hr/>
<p>Note that the data model documentation points it out as <code>object.__getattr__</code>, but that doesn't mean they exists on builtin <code>object</code> type. Instead they can exist on any object in general. And object in this case is a type as dunder methods are looked up on an object's type.</p>
</div>
<span class="comment-copy">All these <code>__getattr__</code> questions are mindnumbing...</span>
<span class="comment-copy">Thanks. Is <code>__getattr__</code> a method of <code>object</code>?  So everything has <code>__getattr__</code> by default, because everything inherits <code>object</code>?</span>
<span class="comment-copy">@Tim <code>object.__getattr__</code> doesn't exist(probably because there's no point in having <code>__geattr__</code> there, <code>AttributeError</code> is all we need) , but a user defined class can have a custom defined <code>__getattr__</code> to handle attribute errors. <code>__getattr__</code> exists in old-style classes in Python 2.</span>
<span class="comment-copy"><code>object.__getattr__</code>   exists <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__getattr__</a></span>
<span class="comment-copy">@Tim It can exist on an object, it doesn't mean the builtin <code>object</code> type.</span>
<span class="comment-copy">@Tim You can see this for yourself by doing: <code>hasattr(object, '__getattr__')</code>.</span>
