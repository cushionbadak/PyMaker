<div class="post-text" itemprop="text">
<p>In Python, every integer seems to have a 10-digit id which starts from 438. I was trying to find a number that is the same as it’s id. I wrote a simple code to find the number:</p>
<pre><code>for i in range(4380000000,4390000000):
    if i==id(i):
        print(i)
    else:
        pass
</code></pre>
<p>When I ran this for the first time I got no such number. Then I ran it for the second time and still I got no number. </p>
<p>When I ran it for the third time, I got a number: 4384404848 </p>
<p>Then I checked if <code>id(4384404848)==4384404848</code> and I got <code>False</code>.</p>
<p>Why did Python return a number that is not equal to it’s id? Or did the same number had different id’s when the program was running and when it had stopped?</p>
<p>(EDIT: The assumption “ every integer seems to have a 10-digit id which starts from 438” is wrong.)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/functions.html#id" rel="nofollow noreferrer">https://docs.python.org/2/library/functions.html#id</a></p>
<blockquote>
<p>is guaranteed to be unique and constant for this object during its lifetime. </p>
</blockquote>
<p>Consider id to be a unique identifier or "hash" calculated for this object. It may (and most likely will) be different each time you run your program.</p>
<p>Edit: Just to add, if you're using the CPython implementation (which is the most popular), then it is the address of the object in memory. That should clarify why it was not the same in different runs of the same program.</p>
<p>As a separate note, you should never rely on the value of the id() on any object other than its uniqueness for that given run. </p>
<blockquote>
<p>every integer seems to have a 10-digit id which starts from 438</p>
</blockquote>
<p>is an incorrect assumption. On my machine:</p>
<pre><code>&gt;&gt;&gt; x = 5
&gt;&gt;&gt; id(x)
38888712L
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>NO</h1>
<p><strong>It doesn't always start with</strong> <code>438</code></p>
<p>You should think of it like a Unique Register number number for a college student or employee id number (but for Python objects)</p>
<p>Look at what the docs say</p>
<blockquote>
<p><strong>id(object)</strong></p>
<p>Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.</p>
<p>CPython implementation detail: This is the address of the object in memory.</p>
</blockquote>
<p>To make things clear. I <strong>assume</strong> you know that no matter how many variables you create if they hold the <strong>same value</strong> then in Python they are all the same. (<strong>Aliases</strong>)</p>
<p>Look at the interpreter.</p>
<pre><code>&gt;&gt;&gt; a=10
&gt;&gt;&gt; id(10)
26775680
&gt;&gt;&gt; b=20
&gt;&gt;&gt; id(20)
26775440
</code></pre>
<p>Unique right. Now look,</p>
<pre><code>&gt;&gt;&gt; a=10
&gt;&gt;&gt; b=10
&gt;&gt;&gt; id(a)
26775680
&gt;&gt;&gt; id(b)
26775680
</code></pre>
<p>Also look,</p>
<pre><code>&gt;&gt;&gt; a=10
&gt;&gt;&gt; id(a)
26775680
&gt;&gt;&gt; a=20
&gt;&gt;&gt; b=a
&gt;&gt;&gt; id(a)
26775440
&gt;&gt;&gt; id(b)
26775440
</code></pre>
<p>So every <strong>value</strong> (objects) are assigned a unique value. And that value is nothing but your <strong>id()</strong>. </p>
<p><strong>Since OP asked!</strong></p>
<h1>Implementations of Python.</h1>
<p>Meaning:</p>
<blockquote>
<p>An "implementation" of Python should be taken to mean a program or environment which provides support for the execution of programs written in the Python language, as represented by the CPython reference implementation. </p>
</blockquote>
<p>So what that means is Cpython is tha <strong>language engine</strong> which runs Python code (the language). Why it is named Cpython? To differentiate Python (the language) from Cpython (the implementation).</p>
<p>So basically Cpython is the one which the most common Python implementation (CPython: written in C, often referred to as simply ‘Python’) <strong>The one you download from python.org is this one</strong></p>
<p>You need to distinguish between a language and an implementation. Python is a language.</p>
<p>According to Wikipedia, </p>
<blockquote>
<p>"A programming language is a notation for writing programs, which are specifications of a computation or algorithm". </p>
</blockquote>
<p>This means that it's simply the rules and syntax for writing code. Separately we have a </p>
<blockquote>
<p>programming language implementation 
  which in most cases, is the actual interpreter or compiler.</p>
</blockquote>
<p><strong>So CPython - Implementation in C</strong></p>
<p><strong>There's Jython - Implementation in Java</strong></p>
<p><strong>IronPython - Implementation in C#</strong></p>
<p>And some more. Take a look at them here <a href="https://www.python.org/download/alternatives/" rel="nofollow noreferrer">Implementations</a>. Download and mess with them to know more.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the official doc : </p>
<blockquote>
<p>Return the “identity” of an object. This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.</p>
</blockquote>
<p>So, in essence, the id of any <em>object</em> in Python is a hash value which is <em>unique for it's lifetime</em>. </p>
<blockquote>
<p>Why did Python return a number that is not equal to it’s id? Or did the same number had different id’s when the program was running and when it had stopped?</p>
</blockquote>
<p>You found the hash value of 'i' to be 4384404848, but are comparing it to the hash value of the literal '4384404848'. They have to be different by definition. </p>
</div>
<span class="comment-copy">I don’t think that that’s true. If I type in <code>id(2)</code>, I get <code>4297636384</code>. Now if I quit Python and again type in <code>id(2)</code>, I get the same number.</span>
<span class="comment-copy">@AaryanDewan That's because small integers in CPython - specifically in the range <code>-5</code> to <code>256</code> - are cached. So the id for <code>2</code> thought every program will point to the same <code>2</code> CPython created before the program started time.</span>
<span class="comment-copy">Here's some more information if you are curious: <a href="https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong" rel="nofollow noreferrer">Python 3 Docs</a>.  Notice the part that mentions: <code>The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object</code></span>
<span class="comment-copy">Here's a snippet regarding this that I copied from the source code itself about a year ago, <a href="https://gist.github.com/pzp1997/5d7f788bb0f3006d9228e557b7197fba" rel="nofollow noreferrer">gist.github.com/pzp1997/5d7f788bb0f3006d9228e557b7197fba</a>.</span>
<span class="comment-copy">Thanks! Could you please tell me what is “CPython implementation"?</span>
<span class="comment-copy">@AaryanDewan CPython is the default implementation of Python written in the C programming language. It's what you get when you download Python from <a href="https://www.python.org/" rel="nofollow noreferrer">python.org</a>. We say "CPython", because its not the only implementation of Python. There are ones such as <a href="https://pypy.org/" rel="nofollow noreferrer">PyPy</a> or <a href="http://ironpython.net/" rel="nofollow noreferrer">IronPython</a>. When we say "implementation", we mean an interpreter written in some language, which can execute valid Python code.</span>
