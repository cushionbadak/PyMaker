<div class="post-text" itemprop="text">
<p>I'm trying to create an asynchronous function that reads the constantly updating log file and gets every line of it. That's what I have for now:</p>
<pre><code>async def log_reader():
    with open(LOG_PATH, "r", encoding='utf-8', errors='ignore') as logfile:
        logfile.seek(0, os.SEEK_END)
        while TRUE:
            line = logfile.readline()
            if not line:
                await asyncio.sleep(0.2)
                continue;
            &lt;do stuff&gt;
</code></pre>
<p>It works fine until the file is restarted. I was thinking about checking whether the file's size became smaller than it was, that would mean that it was refreshed, but I feel there must be a better option for that.</p>
<p>Any tips are welcome.</p>
</div>
<div class="post-text" itemprop="text">
<p>For refreshing the file, you can check it's inode. Get it from the path using <a href="https://docs.python.org/3/library/os.html#os.stat" rel="nofollow noreferrer">os.stat</a> and then extract the <a href="https://docs.python.org/3/library/stat.html#stat.ST_INO" rel="nofollow noreferrer">inode number</a>. If the inode you get is different than the previous one, you'll have to reopen the file. (so doing this using a <code>with</code> block may not be easy)</p>
<p>To optimise it a bit so you don't query the file all the time, you could implement some timeout which you can easily accept, but which is higher than the usual delay between the log lines.</p>
<p>This will work if the file has been replaced, which is the usual method of rotating logfiles. It will not work if the file has only been truncated.</p>
</div>
<span class="comment-copy">I've tried your version:  <code>with open(LOG_PATH, "r", encoding='utf-8', errors='ignore') as logfile:          inodenum = os.stat(LOG_PATH)[ST_INO]         logfile.seek(0, os.SEEK_END)         while not client.is_closed:             if inodenum != os.stat(LOG_PATH)[ST_INO]:                 inodenum = os.stat(LOG_PATH)[ST_INO]                 logfile.seek(0, os.SEEK_END)</code> But it seems it doesn't work for me: the inode number doesn't change</span>
<span class="comment-copy">@degranon If the inode changes you can't just rollback, because it's a new file. You need to close the current one and open the same path again. But maybe your log rotation just truncates the file. (Then the file size is the only indicator) You'll have to figure that one out.</span>
