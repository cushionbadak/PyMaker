<div class="post-text" itemprop="text">
<p>At the top of the code I want to test I have an import like:</p>
<pre><code>from resources import RESOURCES
</code></pre>
<p>where <code>RESOURCES</code> is a dictionary of values.</p>
<p>How can I mock it in the test?</p>
<p>What I would like to is, no matter what is in the real module, return a well known dictionary.</p>
<p>For example in one test I want <code>RESOURCES</code> to be:</p>
<pre><code>{
  'foo': 'bar'
}
</code></pre>
<p>while in another test I want it to be:</p>
<pre><code>{
  'something': 'else'
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock" rel="nofollow noreferrer">unittest.mock.patch.object</a>.  I think that it will meet your needs. </p>
</div>
<div class="post-text" itemprop="text">
<p>The way I made it to <code>patch</code> the <code>RESOURCE</code> object is using:</p>
<pre><code>from default import RESOURCES
from mock import patch

with patch.dict(RESOURCES, {'foo': 'bar'}, clear=True):
    assert(RESOUCES['foo'], 'bar')
</code></pre>
<p>Note that you'll need to import the dictionary you want to patch in the test suite</p>
<p>It's also possible to use the decorator syntax:</p>
<pre><code>from default import RESOURCES
from mock import patch

@patch.dict(RESOURCES, {'foo': 'bar'}, clear=True)
def test(self):
    self.assert(RESOUCES['foo'], 'bar')
</code></pre>
</div>
<span class="comment-copy">What exactly do you mean by "mock it"?</span>
<span class="comment-copy">How well do you need to "mock" it. Do you need to test the module is there, do you need to fake the module is there? Do you just need a <code>RESOURCES</code> definition, or do you need a fake entry in <code>sys.modules</code>?</span>
<span class="comment-copy">You can add a local (that is same directory) module <code>resources.py</code> which contains your mock <code>RESOURCES</code> dictionary. Or you can place that module somewhere else and prepend the corresponding path to <code>sys.path</code>: <code>sys.path.insert(0, '/path/to/resources/')</code>.</span>
<span class="comment-copy">there isn't any way to achieve it with <code>unittest.mock</code>?</span>
