<div class="post-text" itemprop="text">
<p>I'm trying to check if a string is a number, so the regex "\d+" seemed good. However that regex also fits "78.46.92.168:8000" for some reason, which I do not want, a little bit of code:</p>
<pre><code>class Foo():
    _rex = re.compile("\d+")
    def bar(self, string):
         m = _rex.match(string)
         if m != None:
             doStuff()
</code></pre>
<p>And doStuff() is called when the ip adress is entered. I'm kind of confused, how does "." or ":" match "\d"?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>\d+</code> matches any positive number of digits <strong>within</strong> your string, so it matches the first <code>78</code> and succeeds.</p>
<p>Use <code>^\d+$</code>.</p>
<p>Or, even better: <code>"78.46.92.168:8000".isdigit()</code></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/re.html#re.match" rel="noreferrer"><code>re.match()</code></a> always matches from the start of the string (unlike <a href="http://docs.python.org/2/library/re.html#re.search" rel="noreferrer"><code>re.search()</code></a>) but allows the match to end before the end of the string.</p>
<p>Therefore, you need an anchor: <code>_rex.match(r"\d+$")</code> would work.</p>
<p>To be more explicit, you could also use <code>_rex.match(r"^\d+$")</code> (which is redundant) or just drop <code>re.match()</code> altogether and just use <code>_rex.search(r"^\d+$")</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>\Z</code> matches the end of the string while <code>$</code> matches the end of the string or just before the newline at the end of the string, and exhibits different behaviour in <code>re.MULTILINE</code>. See <a href="http://docs.python.org/2/library/re.html#regular-expression-syntax" rel="noreferrer">the syntax documentation</a> for detailed information.</p>
<pre><code>&gt;&gt;&gt; s="1234\n"
&gt;&gt;&gt; re.search("^\d+\Z",s)
&gt;&gt;&gt; s="1234"
&gt;&gt;&gt; re.search("^\d+\Z",s)
&lt;_sre.SRE_Match object at 0xb762ed40&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change it from <code>\d+</code> to <code>^\d+$</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of options in Python to match an entire input with a regex.</p>
<h1>Python 2</h1>
<p>In Python 2.x, you may use</p>
<pre><code>re.match(r'\d+$') # re.match anchors the match at the start of the string, so $ is what remains to add
</code></pre>
<p>or - to avoid matching before the final <code>\n</code> in the string:</p>
<pre><code>re.match(r'\d+\Z') # \Z will only match at the very end of the string
</code></pre>
<p>Or the same as above with <code>re.search</code> method requiring the use of <code>^</code> / <code>\A</code> start-of-string anchor as it does not anchor the match at the start of the string:</p>
<pre><code>re.search(r'^\d+$')
re.search(r'\A\d+\Z')
</code></pre>
<p>Note that <code>\A</code> is an unambiguous string start anchor, its behavior cannot be redefined with any modifiers (<code>re.M</code> / <code>re.MULTILINE</code> can only redefine the <code>^</code>  and <code>$</code> behavior).</p>
<h1>Python 3</h1>
<p>All those cases described in the Python 2 section and one more useful method, <a href="https://docs.python.org/3/library/re.html#re.fullmatch" rel="noreferrer"><code>re.fullmatch</code></a> (also present in the <a href="https://pypi.python.org/pypi/regex/" rel="noreferrer">PyPi <code>regex</code> module</a>):</p>
<blockquote>
<p>If the whole <em>string</em> matches the regular expression <em>pattern</em>, return a corresponding match object. Return <code>None</code> if the string does not match the pattern; note that this is different from a zero-length match.</p>
</blockquote>
<p>So, after you compile the regex, just use the appropriate method:</p>
<pre><code>_rex = re.compile("\d+")
if _rex.fullmatch(s):
    doStuff()
</code></pre>
</div>
<span class="comment-copy">+1. Avoid regexps if you can.</span>
<span class="comment-copy"><code>\d+$</code> should be sufficient with match</span>
<span class="comment-copy"><code>$</code> doesn't work in the case of a trailing newline. See <code>re.match(r'^\d+$', '4\n')</code> for example.</span>
