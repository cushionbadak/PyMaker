<div class="post-text" itemprop="text">
<p>Working with the Python library <code>import threading</code> I came across the <code>threading.active_count()</code> function which returns the number of active threads. But the <code>threading.activeCount()</code> function, which returns the exact same thing. </p>
<p>Even their help string are exactly the same.</p>
<p>So my question is, what is the difference?</p>
<p>If they <strong>are</strong> exactly the same, doesn't this go against PEP 20, The Zen of Python, where it says:</p>
<pre><code>There should be one-- and preferably only one --obvious way to do it.
</code></pre>
<p>Could this be a backward compatibility issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python basically cloned the Java API for the threading interface, and so it keeps two versions of names: those using Python's preferred underscores, and those in camelCase for backwards compatibility. The <a href="https://github.com/python/cpython/blob/master/Lib/threading.py#L16" rel="nofollow noreferrer">comments</a> in the threading module say:</p>
<blockquote>
<p>Note regarding PEP 8 compliant names. This threading model was originally inspired by Java, and inherited the convention of camelCase function and method names from that language. Those original names are not in any imminent danger of being deprecated (even for Py3k),so this module provides them as an alias for the PEP 8 compliant names. Note that using the new PEP 8 compliant names facilitates substitution with the multiprocessing module, which doesn't provide the old Java inspired names.</p>
</blockquote>
<p>You can see they are just <a href="https://github.com/python/cpython/blob/master/Lib/threading.py#L1256" rel="nofollow noreferrer">aliases</a> for each other:</p>
<pre><code>def active_count():
    """Return the number of Thread objects currently alive.
    The returned count is equal to the length of the list returned by
    enumerate().
    """
    with _active_limbo_lock:
        return len(_active) + len(_limbo)

activeCount = active_count
</code></pre>
<p>At one <a href="https://github.com/python/cpython/commit/672b8031a803fa420cac91cdaab02130c1f8bed0#diff-c6d1ff08161bb1723530cd49e8004c88" rel="nofollow noreferrer">commit</a>, the CPython implementation actually removed the old functions, however, they <a href="https://github.com/python/cpython/commit/f0923f521077d3592fb49edded540289686cfd68#diff-c6d1ff08161bb1723530cd49e8004c88R803" rel="nofollow noreferrer">reintroduced</a> and temporarily <a href="https://github.com/python/cpython/commit/b3085c9e2610943a2c7c038ff7e25639300463fd" rel="nofollow noreferrer">deprecated</a> them to avoid backwards compatibility issues. You should not use the camelCase functions for new code. Although they are not visibly deprecated right now, the camelCase functions are not <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">explicitly documented</a> and you should prefer the PEP8 versions.</p>
</div>
<span class="comment-copy">Note though that other non-PEP8 names have been deprecated and removed over time, so it could always happen with <code>threading</code>. The cleanup from Py2 to Py3 removed several of those old names, and left it up to the <code>2to3</code> converter script to fix up older scripts. If you're writing new code, I'd strongly recommend the PEP8 lowercase-with-underscores names, as they fit Python style better and are more likely to be preserved long term.</span>
<span class="comment-copy">I was in the right direction, but in reverse gear. +1</span>
