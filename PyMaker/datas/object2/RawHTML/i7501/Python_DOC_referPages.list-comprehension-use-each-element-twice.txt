<div class="post-text" itemprop="text">
<p>I have two lists as follows:</p>
<pre><code>first = [1, 2, 3] # integers
second = ["A", "B"]
</code></pre>
<p>I want to produce the following list, with alternating A and B. Notice that the resulting iterable is longer than the input iterables:</p>
<pre><code>["1A", "1B", "2A", "2B", "3A", "3B"]
</code></pre>
<p>I am currently using <code>itertools</code>:</p>
<pre><code>[str(x1) + x2 for x1, x2 in itertools.product(first, second)]
</code></pre>
<p>But is this the "nicest" way? Is there a solution which doesn't require an import?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try</p>
<pre><code>&gt;&gt;&gt; first = [1, 2, 3]
&gt;&gt;&gt; second = ['A', 'B']
&gt;&gt;&gt; ["{}{}".format(f, s) for s in second for f in first]
['1A', '2A', '3A', '1B', '2B', '3B']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best way is using a nested loop or use <code>itertools.product()</code> but if you want a functional approach you can use <code>itertools.starmap</code>, <code>operator.add</code> and some built-in functions such as <code>map()</code> and <code>list()</code> as following:</p>
<pre><code>&gt;&gt;&gt; from itertools import product, starmap
&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; 
&gt;&gt;&gt; list(starmap(add, product(map(str, first), second)))
['1A', '1B', '2A', '2B', '3A', '3B']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regarding the alternative to <code>itertools.product</code>, check <a href="https://stackoverflow.com/a/45009627/7051394">Arount's answer</a>.</p>
<p>About the string formatting now, it's not very Pythonic (and not scalable at all) to use <code>str(x) + y</code>.
Instead, use the <a href="https://docs.python.org/3.6/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>format</code></a> string method, or even better, Python 3.6's <a href="https://www.python.org/dev/peps/pep-0498/#specification" rel="nofollow noreferrer">f-strings</a>:</p>
<pre><code>&gt;&gt;&gt; "{}{}".format(x, y)
&gt;&gt;&gt; "{firstValue}{secondValue}".format(firstValue=x, secondValue=y)
&gt;&gt;&gt; f"{x}{y}"
</code></pre>
<p>Here is a link to the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting documentation</a>.</p>
</div>
<span class="comment-copy"><code>itertools.product</code> is a native tool</span>
<span class="comment-copy"><code>itertools.product</code> is a native function. If by that you mean built-in the answer is just a nested loop but there's no specific function for that task.</span>
<span class="comment-copy">Why do you think <code>itertools</code> is not a "native" solution?</span>
<span class="comment-copy">@DeepSpace I think I meant "a solution which doesn't require an import". That's what I think of as native. I'm willing to have my vocabulary updated here!</span>
<span class="comment-copy">Why do you want to avoid an import? This seems like a very arbitrary constraint? You should use <code>itertools</code> IMO</span>
<span class="comment-copy">I'd use <code>itertools.product</code> just for the sake of scalability: <code>print(["{}{}".format(f, s) for f, s in product(first, second)])</code></span>
<span class="comment-copy">@DeepSpace But the question is, if I got it right, to find an alternative to <code>itertools.product</code>.</span>
<span class="comment-copy">Small change to get the elements in the same order as given in the question: <code>["{}{}".format(f, s) for f in first for s in second]</code></span>
<span class="comment-copy">@Rightleg OP edited their question.</span>
<span class="comment-copy">"Is there a solution which doesn't require an import?" (arbitrary I know)- your solution is to use multiple imports instead?</span>
<span class="comment-copy">@Chris_Rands I missed the edit, at first if was native solution. But I'll still leave it for the sake of educational purposes ;)</span>
