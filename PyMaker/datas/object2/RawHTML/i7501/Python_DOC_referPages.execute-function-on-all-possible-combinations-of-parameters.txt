<div class="post-text" itemprop="text">
<p>I have sets of values that I want to apply as parameters to a function:</p>
<pre><code>params = {
    'a': [1, 2, 3],
    'b': [5, 6, 7],
    'x': [None, 'eleven', 'f'],
    # et cetera
}
</code></pre>
<p>I want to run <code>myfunc()</code> with all possible combinations, so <code>myfunc(a=1, b=5, x=None ...)</code>, <code>myfunc(a=2, b=5, x=None ...)</code> ... <code>myfunc(a=3, b=7, x='f' ...)</code>. Is there something (for example in <code>itertools</code>) that can help? I thought about using <code>itertools.product()</code> but that doesn't keep the names of the parameters and just gives me tuples of the combinations.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer"><code>itertools.product</code></a> to get all combinations of arguments:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for xs in itertools.product([1,2], [5,6], ['eleven', 'f']):
...     print(xs)
... 
(1, 5, 'eleven')
(1, 5, 'f')
(1, 6, 'eleven')
(1, 6, 'f')
(2, 5, 'eleven')
(2, 5, 'f')
(2, 6, 'eleven')
(2, 6, 'f')
</code></pre>
<p>With <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="noreferrer">Argument list unpacking</a>, you can call <code>myfunc</code> with all combinations of keyword arguments:</p>
<pre><code>params = {
    'a': [1, 2, 3],
    'b': [5, 6, 7],
    'x': [None, 'eleven', 'f'],
}

def myfunc(**args):
    print(args)

import itertools
keys = list(params)
for values in itertools.product(*map(params.get, keys)):
    myfunc(**dict(zip(keys, values)))
</code></pre>
<p>output:</p>
<pre><code>{'a': 1, 'x': None, 'b': 5}
{'a': 1, 'x': None, 'b': 6}
{'a': 1, 'x': None, 'b': 7}
{'a': 1, 'x': 'eleven', 'b': 5}
{'a': 1, 'x': 'eleven', 'b': 6}
{'a': 1, 'x': 'eleven', 'b': 7}
{'a': 1, 'x': 'f', 'b': 5}
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ordering of <code>.keys</code> and <code>.values</code> are <strong>guaranteed</strong> across all Python versions (unless dict is altered which does not happen here), so this might be a bit trivial:</p>
<pre><code>from itertools import product

for vals in product(*params.values()):
    myfunc(**dict(zip(params, vals)))
</code></pre>
<p>You can find the gurantee in the <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>If keys, values and items views are iterated over with no intervening
  modifications to the dictionary, the order of items will directly
  correspond.</p>
</blockquote>
<hr/>
<p><strong>Demo</strong>:</p>
<pre><code>for vals in product(*params.values()):
    print(dict(zip(params, vals)))
</code></pre>
<hr/>
<pre><code>{'a': 1, 'x': None, 'b': 5}
{'a': 1, 'x': None, 'b': 6}
{'a': 1, 'x': None, 'b': 7}
{'a': 1, 'x': 'eleven', 'b': 5}
{'a': 1, 'x': 'eleven', 'b': 6}
{'a': 1, 'x': 'eleven', 'b': 7}
{'a': 1, 'x': 'f', 'b': 5}
{'a': 1, 'x': 'f', 'b': 6}
{'a': 1, 'x': 'f', 'b': 7}
...
</code></pre>
</div>
<span class="comment-copy">That's very neat! I'm concerned about the order being off though, since dicts are unordered (right?). That could mean that <code>itertools.product()</code> returns the parameters in a different order than you have the keys, which would lead to a mismatch.</span>
<span class="comment-copy">@Bluefire, <code>myfunc(a=1, b=2, c=3)</code> , <code>myfunc(b=2, c=3, a=1)</code> both okay.</span>
<span class="comment-copy"><code>map(params.get, keys)</code> is a needlessly verbose way of writing <code>params.values()</code> here; it's guaranteed that <code>.keys()</code> and <code>.values()</code> will align unless the dictionary is modified.</span>
<span class="comment-copy">@falsetru I understand that, my concern is a mismatch where you pass the value of <code>a</code> into <code>b</code> and vice versa.</span>
<span class="comment-copy">@Bluefire, I could go agressive (?) like other answer or DSM's comment. But I'm not sure whether it's guaranteed or just CPython implementation details.</span>
<span class="comment-copy">Maybe add a link to the <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">guarantee</a>?</span>
<span class="comment-copy">@DSM Yes sir, included. Thanks.</span>
