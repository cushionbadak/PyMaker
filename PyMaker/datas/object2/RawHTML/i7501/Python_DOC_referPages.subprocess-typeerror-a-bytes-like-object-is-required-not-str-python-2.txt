<div class="post-text" itemprop="text">
<p>I'm using this code from <a href="https://stackoverflow.com/a/3844467/7879716">a previously asked question a few years ago</a>, however, I believe this is outdated. Trying to run the code, I receive the error above. I'm still a novice in Python, so I could not get much clarification from similar questions. Does anyone know why this is happening?</p>
<pre><code>import subprocess

def getLength(filename):
  result = subprocess.Popen(["ffprobe", filename],
    stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
  return [x for x in result.stdout.readlines() if "Duration" in x]

print(getLength('bell.mp4'))
</code></pre>
<p>Traceback</p>
<pre><code>Traceback (most recent call last):
  File "B:\Program Files\ffmpeg\bin\test3.py", line 7, in &lt;module&gt;
    print(getLength('bell.mp4'))
  File "B:\Program Files\ffmpeg\bin\test3.py", line 6, in getLength
    return [x for x in result.stdout.readlines() if "Duration" in x]
  File "B:\Program Files\ffmpeg\bin\test3.py", line 6, in &lt;listcomp&gt;
    return [x for x in result.stdout.readlines() if "Duration" in x]
TypeError: a bytes-like object is required, not 'str'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess</code> returns <code>bytes</code> objects for stdout or stderr streams by default. That means you also need to use <code>bytes</code> objects in operations against these objects. <code>"Duration" in x</code> uses <code>str</code> object. Use a bytes literal (note the <code>b</code> prefix):</p>
<pre><code>return [x for x in result.stdout.readlines() if b"Duration" in x]
</code></pre>
<p>or decode your data first, if you know the encoding used (usually, the locale default, but you could <a href="https://www.gnu.org/software/gettext/manual/html_node/Locale-Environment-Variables.html#Locale-Environment-Variables" rel="nofollow noreferrer">set <code>LC_ALL</code> or more specific locale environment variables</a> for the subprocess):</p>
<pre><code>return [x for x in result.stdout.read().decode(encoding).splitlines(True)
        if "Duration" in x]
</code></pre>
<p>The alternative is to tell <code>subprocess.Popen()</code> to decode the data to Unicode strings by setting the <code>encoding</code> argument to a suitable codec:</p>
<pre><code>result = subprocess.Popen(
    ["ffprobe", filename],
    stdout=subprocess.PIPE, stderr = subprocess.STDOUT,
    encoding='utf8'
)
</code></pre>
<p>If you set <code>text=True</code> (Python 3.7 and up, in previous versions this version is called <code>universal_newlines</code>) you also enable decoding, using your <a href="https://docs.python.org/3/library/locale.html#locale.getpreferredencoding" rel="nofollow noreferrer">system default codec</a>, the same one that is used for <code>open()</code> calls. In this mode, the pipes are line buffered by default. </p>
</div>
<div class="post-text" itemprop="text">
<p>Like the errror says, "Duration" is a string. Whereas, the X is a byte like object as <code>results.stdout.readlines()</code> reads the lines in the output as bytecode and not string.</p>
<p>Hence store "Duration" in a variable, say str_var and encode it into a byte array object using <code>str_var.encode('utf-8')</code>.</p>
<p>Refer to [this][1].</p>
<p>[1] : <a href="https://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3">Best way to convert string to bytes in Python 3?</a></p>
</div>
<span class="comment-copy">Maybe point out the <code>universal_newlines=True</code> aka <code>text=True</code> in Python 3.7+ which causes Python to decode the output as text in the system's default encoding and return a string.</span>
<span class="comment-copy">@tripleee: added.</span>
<span class="comment-copy">The encoding argument of Popen is available from Python 3.6, in previous version (Python 3.5 in my case), you must precise the encoding when doing byte conversion (<code>bytes("Duration", encoding='utf8')</code>)</span>
<span class="comment-copy">It's just a literal, just prefix it with <code>b</code>. You don't need to store the string in a variable to be able to encode it either, <code>"Duration".encode('utf-8')</code> works too (but is a waste of computer cycles if you can just make it a bytes object to begin with).</span>
<span class="comment-copy">Well, if he wants to use it for multiple files, it's better to store it in a variable. Now, mind explaining why a downvote for that?</span>
<span class="comment-copy">Why? A string literal is stored as a constant with the code object anyway, and where are they mentioning multiple files?</span>
<span class="comment-copy">Note that the test is done in a loop, using a literal is <i>better there</i> because that loads a constant, rather than having to look up a variable each time.</span>
<span class="comment-copy">Fair enough but still doesn't explain the downvote. It's not a wrong answer.</span>
