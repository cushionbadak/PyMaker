<div class="post-text" itemprop="text">
<p>can someone help me writing <strong>single</strong> regex to get module(s) from python source line?</p>
<pre><code>from abc.lmn import pqr
from abc.lmn import pqr as xyz
import abc
import abc as xyz
</code></pre>
<p>it has 3 sub parts in it</p>
<pre><code>[from(\s)&lt;module&gt;(\s)] --&gt; get module if this part exist
import(\s)&lt;module&gt;     --&gt; get module
[(\s)as(\s)&lt;alias&gt;]    --&gt; ignore if this part exist
</code></pre>
<p>something like this</p>
<pre><code>:?[from(\s)&lt;module&gt;(\s)]import(\s)&lt;module&gt;:?[(\s)as(\s)&lt;alias&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you could make the <em>from</em> optional and the <em>import</em> required at<br/>
the same time ignoring the <em>as</em>.   </p>
<p><code>(?m)^(?:from[ ]+(\S+)[ ]+)?import[ ]+(\S+)[ ]*$</code> </p>
<p><a href="https://regex101.com/r/fmoAuh/1" rel="nofollow noreferrer">https://regex101.com/r/fmoAuh/1</a> </p>
<p>Explained  </p>
<pre><code> (?m)                          # Modifiers: multi-line
 ^                             # Beginning of line
 (?:                           # Optional from
      from [ ]+ 
      ( \S+ )                       # (1), from &lt;module&gt;
      [ ]+ 
 )?

 import [ ]+                   # Required import
 ( \S+ )                       # (2), import &lt;module&gt;
 [ ]* 
 $                             # End of line
</code></pre>
<hr/>
<p>Or, if you want to match the <em>as</em> but do not want to capture anything, use this.  </p>
<p><code>(?m)^(?:from[ ]+(\S+)[ ]+)?import[ ]+(\S+)(?:[ ]+as[ ]+\S+)?[ ]*$</code> </p>
<p><a href="https://regex101.com/r/xFtey5/1" rel="nofollow noreferrer">https://regex101.com/r/xFtey5/1</a></p>
<p>Expanded  </p>
<pre><code> (?m)                          # Modifiers: multi-line
 ^                             # Beginning of line
 (?:                           # Optional from
      from [ ]+ 
      ( \S+ )                       # (1), from &lt;module&gt;
      [ ]+ 
 )?

 import [ ]+                   # Required import
 ( \S+ )                       # (2), import &lt;module&gt;

 (?:                           # Optional as
      [ ]+ 
      as [ ]+ 
      \S+                          # &lt;alias&gt;
 )?
 [ ]* 
 $ 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using a regex, using the built in python library ast might be a better approach.  <a href="https://docs.python.org/2/library/ast.html" rel="noreferrer">https://docs.python.org/2/library/ast.html</a>  You can use it to parse python syntax.</p>
<pre><code>import ast

import_string = """from abc.lmn import pqr
from abc.lmn import pqr as xyz
import abc
import abc as xyz"""

modules = []
for node in ast.iter_child_nodes(ast.parse(import_string)):
    if isinstance(node, ast.ImportFrom):
        if not node.names[0].asname:  # excluding the 'as' part of import
            modules.append(node.module)
    elif isinstance(node, ast.Import): # excluding the 'as' part of import
        if not node.names[0].asname:
            modules.append(node.names[0].name)
</code></pre>
<p>that will give you ['abc.lmn', 'abc'] and it is fairly easy to tweak if you want to pull other information. </p>
</div>
<span class="comment-copy">You should base it on <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">the grammar</a>.</span>
<span class="comment-copy">Thanks for clear explanation!</span>
<span class="comment-copy">You're welcome !</span>
<span class="comment-copy">Might be a good idea to use <code>ast.walk</code> if you want to find import statements not at the toplevel.</span>
