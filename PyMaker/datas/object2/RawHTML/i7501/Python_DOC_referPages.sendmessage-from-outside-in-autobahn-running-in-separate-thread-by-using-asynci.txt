<div class="post-text" itemprop="text">
<p>I want to call sendMessage method from outside of MyServerProtocol class and send a message to the server.
The answare is <strong>very</strong> similar to <a href="https://stackoverflow.com/questions/28799754/sendmessage-from-outside-in-autobahn-running-in-separate-thread">this</a> <strong>but i need to use asyncio instead of twisted</strong>.</p>
<p>Cane someone suggest me a solution? An example derived from <a href="https://stackoverflow.com/questions/28799754/sendmessage-from-outside-in-autobahn-running-in-separate-thread">this</a> would also be appreciated
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.call_soon_threadsafe" rel="nofollow noreferrer"><code>call_soon_threadsafe</code></a> function of event loop is meant for this. </p>
<pre><code>from autobahn.asyncio.websocket import WebSocketServerProtocol, \
    WebSocketServerFactory


class MyServerProtocol(WebSocketServerProtocol):

    loop = None

    def onConnect(self, request):
        print("Client connecting: {0}".format(request.peer))

    def onOpen(self):
        print("WebSocket connection open.")

    def onMessage(self, payload, isBinary):
        if isBinary:
            print("Binary message received: {0} bytes".format(len(payload)))
        else:
            print("Text message received: {0}".format(payload.decode('utf8')))

    def onClose(self, wasClean, code, reason):
        print("WebSocket connection closed: {0}".format(reason))

    @classmethod
    def broadcast_message(cls, data):
        payload = json.dumps(data, ensure_ascii = False).encode('utf8')
        for c in set(cls.connections):
            self.loop.call_soon_threadsafe(cls.sendMessage, c, payload)


factory = WebSocketServerFactory(u"ws://127.0.0.1:9000")
factory.protocol = MyServerProtocol

loop = asyncio.get_event_loop()
MyServerProtocol.loop = loop
coro = loop.create_server(factory, '0.0.0.0', 9000)
server = loop.run_until_complete(coro)

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        server.close()
loop.close()
</code></pre>
<p>And then from the other thread simply invoke</p>
<pre><code>MyServerProtocol.broadcast_message(payload)
</code></pre>
</div>
