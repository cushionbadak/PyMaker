<div class="post-text" itemprop="text">
<p>Consider the following code below:</p>
<pre><code>list1 = ['1x', '2x']
list2 = ['x18', 'x74']
list3 = [('100p1', '100p2'), ('300p1', '300p2')]

gen_list = [[a,b] for a in list1 for b in list2]

for new_list in gen_list:
    for c in list3:
        print(new_list.extend(c))
</code></pre>
<p>My target result is like this:</p>
<pre><code>[['1x','x18, '100p1', '100p2'],
 ['1x','x74, '100p1', '100p2'],
 ['1x','x18, '300p1', '300p2'],
 ['1x','x74, '300p1', '300p2'],
 ['2x','x18, '100p1', '100p2'],   
 ['2x','x74, '100p1', '100p2'],
 ['2x','x18, '300p1', '300p2'],
 ['2x','x74, '300p1', '300p2']]
</code></pre>
<p>but the result of the above code is this:</p>
<pre><code>None
None
None
None
None
None
None
None
</code></pre>
<p>What necessary correction do I need to apply on my code? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>using itertools.product, unpacking and a list comprehension</p>
<pre><code>[[l[0], l[2], *l[1]] for l in itertools.product(list1, list3, list2)]
</code></pre>
<p>or</p>
<pre><code>[[l1, l2, *l3] for l1, l3, l2 in itertools.product(list1, list3, list2)]
</code></pre>
<h1>before Python 3.5</h1>
<p>For versions before Python 3.5 you could do something like this</p>
<pre><code>[[l1, l2] + list(l3) for l1, l3, l2 in itertools.product(list1, list3, list2)]
</code></pre>
<p>If you know l3 only contains 2 elements you can use nested unpacking, as mentioned by @ShadowRanger</p>
<pre><code>[[a, b, c1, c2] for a, (c1, c2), b in itertools.product(list1, list3, list2)]
</code></pre>
</div>
<span class="comment-copy"><code>print(new_list.extend(c))</code> prints <code>None</code> because <code>extends</code> returns <code>None</code>. Just print <code>new_list</code>after the loops.</span>
<span class="comment-copy">I tried this line here but still returns an syntax error like this:   <code>Syntax Error: can use starred expression only as assignment target</code>   My system is in python 3.4. I don't really know why this is a syntax error.</span>
<span class="comment-copy">It's a new feature in 3.5 <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="nofollow noreferrer">docs.python.org/3/whatsnew/…</a> I 'll see for a way that works in 3.4 when I'm at my pc</span>
<span class="comment-copy">@MaartenFabré: Note: To get the exact ordering desired by the OP, you need to change the argument ordering for <code>itertools.product</code> from <code>list1, list2, list3</code> to <code>list1, list3, list2</code>, so that the value derived from <code>list2</code> is alternating most rapidly; similarly, you'd change <code>l1, l2, l3</code> to <code>l1, l3, l2</code> so unpacking matches. <a href="https://tio.run/##RY5NCgMhDEb3niK7KJUyaqFloCcZXPWHClbFScGe3qrT0kBIeA@@JL3pEYOp1T1TzASObpli9Ctj3q2k4AwLqoISUBe0A@oBizp1Wo6HLzYdc1TTlFQ3fdEoJHA0P2Y2Zhm7xwxeSfCmtQYX/qf3Kcfr60J8fNB0D9@GFjODVim7QHwZAdrCbkjujRC1fgA" rel="nofollow noreferrer" title="Try It Online">Demo (w/plain loop to match OP's code)</a></span>
<span class="comment-copy">@MaartenFabré: Also, given <code>list3</code> is a <code>list</code> of fixed length <code>tuple</code>s, even pre-3.5 you can avoid creating/concatenating temporary <code>list</code>s by using nested unpacking syntax; it's faster, as it avoids the generic function call lookup and dispatch required by the <code>list</code> constructor: <code>[[a, b, c1, c2] for a, (c1, c2), b in itertools.product(list1, list3, list2)]</code> (<a href="https://tio.run/##Rc7NCsIwDADge58it3RQxtoKevFJSg9uKhbmWroI9elrfxQPIckXSBLe9PCbztk9g48Ejm6RvF93ASFEtxFjq9tJwhkMyoQCUCW0DVXDJE9V0/HwZV2Zo5ymIOukFgoHARz1z3Q3y1i/MvbEjbkImAUssoSycPcRivDelx0zuO3/5Biiv74W4u1HAe18T2qwQ84f" rel="nofollow noreferrer">Try it online!</a>)</span>
<span class="comment-copy">Thanks for the effort. I actually used the one suggested by @ShadowRanger as it is simple and straightforward, not worrying about  using the * or + operators for I am not well-trained to use those techniques.  Though the explanations are good and informative. I might as well include it on my personal knowledge base.   Thanks everyone!</span>
