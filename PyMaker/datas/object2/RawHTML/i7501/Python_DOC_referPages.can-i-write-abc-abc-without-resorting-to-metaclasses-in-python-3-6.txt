<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/whatsnew/3.6.html" rel="nofollow noreferrer">Python 3.6</a> added <a href="https://www.python.org/dev/peps/pep-0487/" rel="nofollow noreferrer">PEP 487</a>, which adds an <code>__init_subclass__</code> method among other things.  Is it possible to write a version of <a href="https://docs.python.org/3.6/library/abc.html#abc.ABC" rel="nofollow noreferrer"><code>ABC</code></a> that doesn't use a metaclass?</p>
</div>
<div class="post-text" itemprop="text">
<p>If all you care about is the check for abstract methods, then yes. Just move the <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/abc.py#L134-L143" rel="nofollow noreferrer">abstract method set computation</a> to the <code>__init_subclass__</code> method:</p>
<pre><code>def __init_subclass__(cls, **kwargs):
    super().__init_subclass__(**kwargs)
    # Compute set of abstract method names
    abstracts = {name
                 for name, value in vars(cls).items()
                 if getattr(value, "__isabstractmethod__", False)}
    for base in cls.__bases__:
        for name in getattr(base, "__abstractmethods__", set()):
            value = getattr(cls, name, None)
            if getattr(value, "__isabstractmethod__", False):
                abstracts.add(name)
    cls.__abstractmethods__ = frozenset(abstracts)
</code></pre>
<p>The base <a href="https://github.com/python/cpython/blob/v3.6.1/Objects/typeobject.c#L3476-L3519" rel="nofollow noreferrer"><code>object.__new__</code> implementation</a> then uses an non-empty <code>__abstractmethods__</code> set to prevent instantiation. </p>
<p>But ABCs also support <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.register" rel="nofollow noreferrer">virtual subclass registration</a>; the <a href="https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks" rel="nofollow noreferrer">two hook methods this requires</a> <strong>have</strong> to be implemented on the metaclass.</p>
</div>
<span class="comment-copy">If all you care about is the check for abstract methods, then yes. But abcs also support <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.register" rel="nofollow noreferrer">virtual subclass registration</a>.</span>
<span class="comment-copy">@MartijnPieters Yes, I meant to specify that all I care about is the check for abstract methods.</span>
<span class="comment-copy">Not sure why this question is downvoted…</span>
<span class="comment-copy">Is this about writing an alternative to the standard library <code>ABC</code>, or about how to use the existing <code>ABC</code>?</span>
<span class="comment-copy">@HåkenLid An alternative.  The problem with metaclasses in Python is that as soon as I have more than one in my inheritance tree, I have to start composing the metaclasses, which is annoying.  However, I would like to use the abstractmethod functionality.</span>
<span class="comment-copy">How do I implement the check for abstract methods?</span>
<span class="comment-copy">okay, and then can you block instantiation in <code>__new__</code> if there are leftover abstract methods without using a metaclass?</span>
<span class="comment-copy">@NeilG: sorry, the base <code>object.__new__</code> implementation does this already.</span>
