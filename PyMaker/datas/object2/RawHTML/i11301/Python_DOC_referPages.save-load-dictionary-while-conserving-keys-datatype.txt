<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1450957/pythons-json-module-converts-int-dictionary-keys-to-strings">Python's json module, converts int dictionary keys to strings</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I would like to save a dictionary that contains both string and integer keys and multiple datatype values.  For example:</p>
<pre><code>dData = {
    'a': ['c','d'],
    1: [5.1, 3.1]
}
</code></pre>
<p>To save and load it I used <code>json.dump</code> and <code>json.load</code>, however, my integer keys are converted to strings upon loading it.</p>
<p>I don't want to change the way the dictionary is created, since it is incredibly convenient for me to keep those keys as integers.</p>
<p>How can I save the dictionary to file and then load it again while conserving type?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest using the <a href="https://docs.python.org/3/library/shelve.html#module-shelve" rel="nofollow"><strong><em>shelve</em></strong></a> module for that.</p>
<p><em>Shelve</em> allows you to store a dictionary of arbitrary python objects inside an on-disk file.</p>
<p>An example from their docs:</p>
<pre><code>with shelve.open('spam') as db:
    db['eggs'] = 'eggs'
</code></pre>
<p>It does not answer your case of integer keys, for which you can either create a subclass of shelve that will convert ints to strings or use pickle altogether.</p>
<p>Here is a subclass example:</p>
<pre><code>from shelve import DbfilenameShelf

class IntShelf(DbfilenameShelf):

    def __getitem__(self, key):
        # Not isinstance as we wish to be specific
        if type(key) == int:
            key = "i" + str(key)
        elif type(key) == str:
            key = "s" + key
        else:
            raise TypeError

        return super().__getitem__(key)

    def __setitem__(self, key, value):
        if type(key) == int:
            key = "i" + str(key)
        elif type(key) == str:
            key = "s" + key
        else:
            raise TypeError

        return super().__setitem__(key, value)
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; db = IntShelf("testdb")
&gt;&gt;&gt; db["123"] = "foo"
&gt;&gt;&gt; db[123] = ["bar", "bar", "bar"]
&gt;&gt;&gt; db["123"]
'foo'
&gt;&gt;&gt; db[123]
['bar', 'bar', 'bar']
</code></pre>
<hr/>
<p>Keep in mind that using pickle instead of shelve to store the dictionary has numerous drawbacks:</p>
<ol>
<li>You need to load the entire dictionary at once, consuming a vast amount of memory in case of large datasets.</li>
<li>Changing a single value, requires re-writing the entire dictionary.</li>
<li>Shelve has a cleaner interface than using pickles all over the place, and has an internal cache for maximum efficiency.</li>
<li>In case the program crashes in the middle, you will loose the DB if you didn't wrap the whole thing with a <code>finally</code> clause, whereas in shelve the database is saved on-demand.</li>
</ol>
<p>Remember, disk access is one of the slowest parts of the program so you wish to minimize it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the pointers to the other question etc, though nowhere is the exceedingly simple answer of <strong>use picke</strong> (Why is that; am I missing a detail?).  </p>
<pre><code>sTestDataPath = "/path/to/data/test_data.p"
import pickle


with open(sTestDataPath, 'w') as f:
    pickle.dump(dInputData, f)

with open(sTestDataPath, 'r') as f:
    dInputData = pickle.load(f)
</code></pre>
</div>
<span class="comment-copy">@glls that question explains why using json isn't a good fit for his problem, but as shown by the answers, there are other ways to meet the OP's question ("How can I save the dictionary to file and load it again...") without having to use json</span>
<span class="comment-copy">shelve is a just a Pickle wrapper. This does not answer the JSON question IMHO?</span>
<span class="comment-copy">@PhilippeOmbredanne He did not look for a JSON-specific way. He looked for a way to store a dictionary on disk with the added integer keys. The OP thought JSON might help but I believe shelve is a better, more general, and more efficient solution.</span>
<span class="comment-copy">good point! And for a pure Python to Python this works fine</span>
<span class="comment-copy">I wrote that you can use pickle on my answer but it has a few faults, major one is that you need to load the entire dictionary at once, consuming a vast amount of memory in case of large datasets. A second major fault is that if you wish to change a single value, you re-write the entire dictionary. Remember - disk access is one of the slowest parts of a program so you want it to be efficient. If pickle would be the better choice for disk-based dictionaries, shelve wouldn't exist in the standard library :-)</span>
<span class="comment-copy">@Bharel I see, thanks for the explanation.  Efficiency is not a major necessity in my specific case.  But now I have your answer for future reference :)</span>
<span class="comment-copy">Sure. It's also safer due to saving on-demand but as you seek. Good luck! :-)</span>
