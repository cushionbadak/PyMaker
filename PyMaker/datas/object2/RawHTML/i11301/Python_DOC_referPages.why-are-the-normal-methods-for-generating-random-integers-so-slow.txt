<div class="post-text" itemprop="text">
<p>Not a maths major or a cs major, I just fool around with python (usually making scripts for simulations/theorycrafting on video games) and I discovered just how bad random.randint is performance wise. It's got me wondering why random.randint or random.randrange are used/made the way they are. I made a function that produces (for all intents and actual purposes) identical results to random.randint:</p>
<pre><code>big_bleeping_float= (2**64 - 2)/(2**64 - 2)
def fastrandint(start, stop):
  return start + int(random.random() * (stop - start + big_bleeping_float))
</code></pre>
<p>There is a massive 180% speed boost using that to generate an integer in the range (inclusive) 0-65 compared to random.randrange(0, 66), the next fastest method.</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('random.randint(0, 66)', setup='from numpy import random', number=10000)
0.03165552873121058

&gt;&gt;&gt; timeit.timeit('random.randint(0, 65)', setup='import random', number=10000)
0.022374771118336412

&gt;&gt;&gt; timeit.timeit('random.randrange(0, 66)', setup='import random', number=10000)
0.01937231027605435

&gt;&gt;&gt; timeit.timeit('fastrandint(0, 65)', setup='import random; from fasterthanrandomrandom import fastrandint', number=10000)
0.0067909916844523755
</code></pre>
<p>Furthermore, the adaptation of this function as an alternative to random.choice is 75% faster, and I'm sure adding larger-than-one stepped ranges would be faster (although I didn't test that). For almost double the speed boost as using the fastrandint function you can simply write it inline:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('int(random.random() * (65 + big_bleeping_float))', setup='import random; big_bleeping_float= (2**64 - 2)/(2**64 - 2)', number=10000)
0.0037642723021917845
</code></pre>
<p>So in summary, why am I wrong that my function is a better, why is it faster if it is better, and is there a yet even faster way to do what I'm doing?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://hg.python.org/cpython/file/3.5/Lib/random.py#l214" rel="nofollow"><code>randint</code></a> calls <a href="https://hg.python.org/cpython/file/3.5/Lib/random.py#l170" rel="nofollow"><code>randrange</code></a> which does a bunch of range/type checks and conversions and then uses <a href="https://hg.python.org/cpython/file/3.5/Lib/random.py#l220" rel="nofollow"><code>_randbelow</code></a> to generate a random int. <code>_randbelow</code> again does some range checks and finally uses <a href="https://hg.python.org/cpython/file/3.5/Lib/random.py#l647" rel="nofollow"><code>random</code></a>.</p>
<p>So if you remove all the checks for edge cases and some function call overhead, it's no surprise your <code>fastrandint</code> is quicker.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>random.randint()</code> and others are calling into <code>random.getrandbits()</code> which may be less efficient that direct calls to <code>random()</code>, but for good reason. </p>
<p>It is actually more correct to use a <code>randint</code> that calls into <code>random.getrandbits()</code>, as it can be done in an unbiased manner.</p>
<p>You can see that using random.random to generate values in a range ends up being biased since there are only M floating point values between 0 and 1 (for M pretty large). Take an N that doesn't divide into M, then if we write M = k N + r for <code>0&lt;r&lt;N</code>. At best, using <code>random.random() * (N+1)</code>
we'll get <code>r</code> numbers coming out with probability (k+1)/M and <code>N-r</code> numbers coming out with probability <code>k/M</code>. (This is <em>at best</em>, using the pigeon hole principle - in practice I'd expect the bias to be even worse).</p>
<p>Note that this bias is only noticeable for</p>
<ul>
<li>A large number of sampling</li>
<li>where N is a large fraction of M the number of floats in (0,1]</li>
</ul>
<p>So it probably won't matter to you, unless you know you need unbiased values - such as for scientific computing etc.</p>
<p>In contrast, a value from <code>randint(0,N)</code> can be unbiased by using rejection sampling from repeated calls to <code>random.getrandbits()</code>. Of course managing this can introduce additional overhead.</p>
<p><strong>Aside</strong></p>
<p>If you end up using a custom random implementation then </p>
<p>From the <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">python 3 docs</a></p>
<blockquote>
<p>Almost all module functions depend on the basic function random(), which 
  generates a random float uniformly in the semi-open range [0.0, 1.0).</p>
</blockquote>
<p>This suggests that <code>randint</code> and others may be implemented using <code>random.random</code>. If this is the case I would expect them to be slower,
incurring at least one addition function call overhead per call.</p>
<p>Looking at the code referenced in <a href="https://stackoverflow.com/a/37540577/221955">https://stackoverflow.com/a/37540577/221955</a> you can see that this will happen if the random implementation doesn't provide a <code>getrandbits()</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is probably rarely a problem but <code>randint(0,10**1000)</code> works while <code>fastrandint(0,10**1000)</code> crashes. The slower time is probably the price you need to pay to have a function that works for all possible cases...</p>
</div>
<span class="comment-copy">Isn't (2 ** 64 - 2)/(2 ** 64 - 2) just 1? Why are you adding it?</span>
<span class="comment-copy">The +1 masquerading as big_bleeping_float is actually required, since <code>random()*N</code> generates values from <code>(0,N]</code> and applying int to this rounds down, giving ints in (0,N-1)</span>
<span class="comment-copy">@Michael Anderson: yes but why not adding simply 1?</span>
<span class="comment-copy">Oh, I have no idea why it's not just written as +1, or why it's called <code>big_bleeping_float</code> - just that it is actually required for the values to be correct.</span>
<span class="comment-copy">Actually <code>_randbelow</code> doesn't (usually) call <code>random</code>, it calls <code>getrandbits()</code> and loops to remove (reduce) bias.</span>
