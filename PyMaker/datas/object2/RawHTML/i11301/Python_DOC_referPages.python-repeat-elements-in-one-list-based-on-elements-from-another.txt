<div class="post-text" itemprop="text">
<p>Given the following lists:</p>
<pre><code>a = [0, 5, 1]
b = [1, 2, 1]
</code></pre>
<p>I'd like to repeat each element of [a] by the number of its corresponding position in [b] to produce this:</p>
<pre><code>[0, 5, 5, 1]
</code></pre>
<p>i.e. 0 occurs 1 time, 5 occurs 2 times, and 1 occurs 1 time.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [7]: a = [0, 5, 1]

In [8]: b = [1, 2, 1]

In [9]: list(itertools.chain(*(itertools.repeat(elem, n) for elem, n in zip(a, b))))
Out[9]: [0, 5, 5, 1]

In [10]: b = [2, 3, 4]

In [11]: list(itertools.chain(*(itertools.repeat(elem, n) for elem, n in zip(a, b))))
Out[11]: [0, 0, 5, 5, 5, 1, 1, 1, 1]
</code></pre>
<p>The pieces here are as follows:</p>
<ul>
<li><code>itertools.repeat(elem, n)</code> - repeat elem n times</li>
<li><code>zip(a, b)</code> Make a list of 2-tuples out of the two lists, pairing each element with the corresponding element in the other list. This gives you exactly what you need to pass to <code>itertools.repeat</code> in your use case.</li>
<li><code>itertools.chain</code> - flattens the resulting list of iterators into a single list of values. You can either <code>chain(*iterable)</code> as I have done or <code>chain.from_iterable(iterable)</code> as Martijn Peters does.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code> function</a> with <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow"><code>itertools.repeat()</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable()</code></a>:</p>
<pre><code>try:
    # use iterator zip on Python 2 too
    from future_builtins import zip
except ImportError:
    pass
from itertools import repeat, chain

list(chain.from_iterable(repeat(value, count) for value, count in zip(a, b)))
</code></pre>
<p>(I added a <a href="https://docs.python.org/2/library/future_builtins.html#future_builtins.zip" rel="nofollow">Python 2 forward-compatible import</a> for those that can't switch to Python 3 yet).</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import repeat, chain
&gt;&gt;&gt; a = [0, 5, 1]
&gt;&gt;&gt; b = [1, 2, 1]
&gt;&gt;&gt; list(chain.from_iterable(repeat(value, count) for value, count in zip(a, b)))
[0, 5, 5, 1]
</code></pre>
<p>An alternative approach would be to use a list comprehension; this is slower as repeating elements is done in bytecode instead of C:</p>
<pre><code>[value for value, count in zip(a, b) for _ in range(count)]
</code></pre>
</div>
<span class="comment-copy">It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on their own. A good way to demonstrate this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (console output, stack traces, compiler errors - whatever is applicable). The more detail you provide, the more answers you are likely to receive.</span>
<span class="comment-copy">What an incredible ride this has been. First, I was beaten into newb submission for not submitting better post (duly noted), then a flurry of great responses.</span>
<span class="comment-copy">Wow, great minds... xD</span>
<span class="comment-copy">@Two-BitAlchemist: hehe; I am on a train and I feared I would be too late as I was waiting for connectivity to return!</span>
<span class="comment-copy">I upvoted this because you found a bug in my code</span>
