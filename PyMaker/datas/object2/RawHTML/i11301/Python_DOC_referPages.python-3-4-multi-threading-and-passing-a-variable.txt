<div class="post-text" itemprop="text">
<p>So I've never been really good with multi threading and today I'm bumping into a problem I've been trying to dodge for quite some time.</p>
<p>I want to pass a variable to a function that I execute in multiple threads but I have no clue how to do that in a functional manner.</p>
<p>Here is what I made : </p>
<pre><code>       # This is the thread starter
    a = 0
    while a &lt; threads :
        a +=1
        print("[" + str(a) + "/" + str(threads)+ "] Thread started")
        thread = myThread(payload=payload) # payload is the variable I'd like to pass
        thread.start()
</code></pre>
<p>And this is the class : </p>
<pre><code> class myThread (threading.Thread):
 def __init__(self):
     threading.Thread.__init__(self)
 def run (self, payload) :
     Checker(payload)
</code></pre>
<p>And this is the error I'm getting : </p>
<pre><code>TypeError: __init__() got an unexpected keyword argument 'payload'
</code></pre>
<p>I'd be glad if someone couldn't enlighten me on what I'm doing wrong. Thanks in advance guys!</p>
</div>
<div class="post-text" itemprop="text">
<p>You should read more about the <code>Classes</code> in python.</p>
<p>You forgot to define the <code>payload</code> parameter in the constructor of your <code>Thread</code> implementation.
It's just simple as this:</p>
<pre><code>class myThread (threading.Thread):
    def __init__(self, payload):  # you have to define the constructor parameter here
        threading.Thread.__init__(self)
        self.payload = payload
    def run (self):
        Checker(self.payload)
</code></pre>
<p>And if you do not need some extra stuff in your own <code>Thread</code> implementation you could simply do this:</p>
<pre><code>a = 0
while a &lt; threads:
    a +=1
    print("[{0!s}/{1!s}] Thread started".format(a, threads))
    thread = Thread(target=Checker, args=(payload,))
    thread.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>TryToSolveItSimple's answer is correct, but it's worth noting that this is a very common pattern for which there is already a primitive:</p>
<pre><code>from multiprocessing.pool import ThreadPool
from contextlib import closing

def Checker(a):
    print(a)

threads = 4
with closing(ThreadPool(threads)) as pool:
    pool.map(Checker, range(threads))
</code></pre>
<p>This will print the numbers 0 to 3 in parallel. </p>
<p>The <code>with closing</code> part isn't strictly necessary for this to work, but like a file, a pool should be closed when you're done with it.</p>
</div>
<span class="comment-copy"><code>threading.Thread(target=your_function, args=function_args).start()</code></span>
<span class="comment-copy">You need to put payload in the init: <code>def __init__(self, payload):</code></span>
<span class="comment-copy">That should be <code>args=(payload,)</code>, parens around a single item just group, you need a trailing comma to make it a proper <code>tuple</code> of arguments.</span>
<span class="comment-copy">Works perfectly, thank you! And you're definitely right I'll take a deeper look at how classes work. Thanks again for your help!</span>
<span class="comment-copy">@ShadowRanger thanks for the note! i fixed it.</span>
<span class="comment-copy">@tazetotero do not forget the trailing comma ;-) - i edited the post as ShadowRanger mentioned</span>
<span class="comment-copy">In Python 3.3 and higher (and the OP's title says it's 3.4, so this applies), you can skip the <code>closing</code>, while still using the <code>with</code> statement, just <code>with ThreadPool(threads) as pool:</code>; <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.join" rel="nofollow noreferrer">Pools support context manager protocol natively (calling <code>terminate</code> when the <code>with</code> block is exited)</a>.</span>
<span class="comment-copy">@ShadowRanger good to know, I was annoyed when I tried this in 2.7 and it wasn't there.</span>
<span class="comment-copy">Thank you for the additionnal input, I must admit I'm new to multithreading, I'll make sure to take a deeper look at what's going on in your code!</span>
