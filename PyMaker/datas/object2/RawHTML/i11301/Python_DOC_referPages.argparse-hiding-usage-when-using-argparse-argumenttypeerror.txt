<div class="post-text" itemprop="text">
<p>Whenever a user doesn't provide suitable parameters to arguments in my script, I raise argparse.ArgumentTypeError with the error string I provided. My problem is that argparse also prints the usage, while it seems irrelevant to me to tell the user how to use my script when he just got a parameter wrong.</p>
<p>Is there a way for certain cases of raising argparse.ArgumentTypeError to suppress the usage printout? Will I need to use a custom usage function? Or maybe I shouldn't be using this exception at all?</p>
</div>
<div class="post-text" itemprop="text">
<p>Where are you raising the <code>ArgumentTypeError</code>?  In a <code>type</code> function?</p>
<p>The definition of <code>ArgumentTypeError</code> is just <code>pass</code>; it doesn't do anything except subclass <code>Exception</code>.</p>
<p>It is referenced in <code>_get_value</code>, which calls the <code>type</code> function on your argument string.  That method treats <code>TypeError</code> and <code>ValueError</code> in the same way.  It recasts the error as <code>ArgumentError</code>, which adds the argument <code>dest</code> (name) to the message.  <code>parse_known_args</code> ends up converting that to a call to <code>parser.error</code>.</p>
<p>It's the <code>parser.error</code> method that adds the <code>print_usage</code>.</p>
<p>So simply changing that method might be the solution to your problem.</p>
<p><a href="https://docs.python.org/3/library/argparse.html#exiting-methods" rel="nofollow">https://docs.python.org/3/library/argparse.html#exiting-methods</a></p>
<p>I'm not sure what happens if your <code>type</code> function returns some other error - it might bubble all the way to the top.</p>
<p>The formal way to change the <code>parser.error</code> method is to subclass <code>ArgumentParser</code>, but you can kludge a one time change with:</p>
<pre><code>In [269]: parser=argparse.ArgumentParser()

In [270]: def myerror(message):
   .....:     print(message)

In [271]: parser.error=myerror

In [272]: parser.add_argument('foo')
Out[272]: _StoreAction(option_strings=[], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)

In [273]: parser.parse_args([])
the following arguments are required: foo
Out[273]: Namespace(foo=None)
</code></pre>
<p>This just showed the message, and did not exit.  If I'd stuck closer to the original it would have exited as well.</p>
</div>
<span class="comment-copy">Have you tried something like parser.add_argument('--foo', help=argparse.SUPPRESS), it's in the documentation. It suppress usage of that command. Read the help section. <a href="https://docs.python.org/2/library/argparse.html#help" rel="nofollow noreferrer">docs.python.org/2/library/argparse.html#help</a></span>
<span class="comment-copy">It suppresses mention of <i>that one argument</i> from the usage message, @Reticentroot. I interpret this question to be about suppressing the <i>entire</i> usage message.</span>
<span class="comment-copy">So then you just add that argument to all of the input arguments resulting in global suppression  @RobKennedy</span>
<span class="comment-copy">That makes for a lousy message when you actually <i>want</i> the usage message, though, @Reticentroot, such as when the user gives a nonexistent argument, or requests <code>--help</code>. The suppression case is only when a known argument receives an invalid parameter, such as in the documentation where we use <code>parser.add_argument('foo', type=perfect_square)</code>, and the user doesn't provide a number that's a perfect square. In that example, we see that the program prints the usage statement <i>and</i> the error message. Gabe wants only the error message.</span>
