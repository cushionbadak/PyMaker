<div class="post-text" itemprop="text">
<p>I am trying to read from rockyou wordlist and write all words that are &gt;= 8 chars to a new file.</p>
<p>Here is the code - </p>
<pre><code>def main():
    with open("rockyou.txt", encoding="utf8") as in_file, open('rockout.txt', 'w') as out_file:
        for line in in_file:
            if len(line.rstrip()) &lt; 8:
                continue
            print(line, file = out_file, end = '')
        print("done")

if __name__ == '__main__':
    main()
</code></pre>
<p>Some words are not utf-8.</p>
<p><code>Traceback (most recent call last):
  File "wpa_rock.py", line 10, in &lt;module&gt;
    main()
  File "wpa_rock.py", line 6, in main
    print(line, file = out_file, end = '')
  File "C:\Python\lib\encodings\cp1252.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_table)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u0e45' in position
0: character maps to &lt;undefined&gt;</code></p>
<p><strong>Update</strong></p>
<pre><code>def main():
with open("rockyou.txt", encoding="utf8") as in_file, open('rockout.txt', 'w', encoding="utf8") as out_file:
    for line in in_file:
        if len(line.rstrip()) &lt; 8:
            continue
        out_file.write(line)
    print("done")

if __name__ == '__main__':
    main()```
</code></pre>
<p><code>Traceback (most recent call last):
  File "wpa_rock.py", line 10, in &lt;module&gt;
    main()
  File "wpa_rock.py", line 3, in main
    for line in in_file:
  File "C:\Python\lib\codecs.py", line 321, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 933: invali
d continuation byte</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>UnicodeEncodeError: 'charmap'</code> error occurs during <em>writing</em> to <code>out_file</code> (in <code>print()</code>).</p>
<p>By default, <code>open()</code> uses <code>locale.getpreferredencoding()</code> that is ANSI codepage on Windows (such as <code>cp1252</code>) that can't represent all Unicode characters and <code>'\u0e45'</code> character in particular. <code>cp1252</code> is a one-byte encoding that can represent at most <code>256</code> different characters but there are a million (<code>1114111</code>) Unicode characters. It can't represent them all.</p>
<p>Pass <code>encoding</code> that can represent all the desired data e.g., <code>encoding='utf-8'</code> must work (as <a href="https://stackoverflow.com/questions/37633927/unicodeencodeerror-when-reading-a-file?noredirect=1#comment62750292_37633927">@robyschek suggested</a>)—if your code reads <code>utf-8</code> data without any errors then the code should be able to write the data using <code>utf-8</code> too. </p>
<hr/>
<p>Your <code>UnicodeDecodeError: 'utf-8'</code> error occurs during reading <code>in_file</code> (<code>for line in in_file</code>). Not all byte sequences are valid utf-8 e.g., <code>os.urandom(100).decode('utf-8')</code> may fail. What to do depends on the application.</p>
<p>If you expect the file to be encoded as utf-8; you could pass <code>errors="ignore"</code> <code>open()</code> parameter, to ignore occasional invalid byte sequences. Or you could use <a href="https://docs.python.org/3/library/codecs.html#error-handlers" rel="nofollow noreferrer">some other error handlers depending on your application</a>.</p>
<p>If the actual character encoding used in the file is different then you should pass the actual character encoding. <code>bytes</code> by themselves do not have any encoding—that metadata should come from another source (though <a href="https://stackoverflow.com/q/33100182/4279">some encodings are more likely than others: <code>chardet</code> can <em>guess</em></a>) e.g., if the file content is an http body then see <a href="https://stackoverflow.com/q/14592762/4279">A good way to get the charset/encoding of an HTTP response in Python</a> </p>
<p>Sometimes a broken software can generate mostly utf-8 byte sequences with some bytes in a different encoding. <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#inconsistent-encodings" rel="nofollow noreferrer"><code>bs4.BeautifulSoup</code> can handle some special cases</a>. You could also <a href="https://ftfy.readthedocs.io/en/latest/#command-line-tool" rel="nofollow noreferrer">try <code>ftfy</code> utility/library</a> and see if it helps in your case e.g., <a href="https://ftfy.readthedocs.io/en/latest/#module-ftfy.bad_codecs.utf8_variants" rel="nofollow noreferrer"><code>ftfy</code> may fix some utf-8 variations</a>.</p>
</div>
<span class="comment-copy">It's a typo. It should be <code>utf-8</code> instead of <code>utf8</code></span>
<span class="comment-copy">I don't know if it is. Using either results into same error.</span>
<span class="comment-copy">You must have an invalid character at that position. You should show the file you are attempting to read.</span>
<span class="comment-copy">@Arpan: no, it isn't. Either <code>'utf8'</code> or <code>'utf-8'</code> works, one is an alias for the other.</span>
<span class="comment-copy">@MarkEvans have you tried to add <code>encoding="utf8"</code> when opening the output file. I have no windows machine  now, so I can't check.</span>
<span class="comment-copy">Updated the question.</span>
