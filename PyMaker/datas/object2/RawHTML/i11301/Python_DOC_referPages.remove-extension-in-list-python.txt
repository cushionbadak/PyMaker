<div class="post-text" itemprop="text">
<p>I have the following code whereby I would like to find all files in a certain folder (this folder contains .TIF files), then store these names in a .txt file which works so far. However, I don't want the extensions, of anything that would be in the folder.</p>
<pre><code>import os, sys

f = [] 
b = os.walk('C:\\Users\\username\\Desktop\\FOLDER')
for(dirpath, dirnames, filenames) in b:
    f.extend(filenames)
    break

def save_to_file(text):
    for name in f:
        with open('C:\\Users\\username\\Desktop\\FOLDER\\test2.txt', mode='wt', encoding='utf-8') as myfile:
            myfile.write('\n'.join(text))
            myfile.write('\n')

save_to_file(f)
</code></pre>
<p>After comments, especially thanks to ShadowRanger, I changed it to the following which produced the same effect. Thank you everyone!:</p>
<pre><code>import os

f = [e.name for e in os.scandir(r'C:\\Users\\user\\Desktop\\FOLDER') if e.is_file()]
print('Saving file...')

def save_to_file(text):
    for name in f:
        with open('C:\\Users\\user\\Desktop\\FOLDER\\test5.txt', mode='wt', encoding='utf-8') as myfile:
            myfile.write('\n'.join(text))
            myfile.write('\n')

save_to_file(f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Remove the extension in a generator expression when you get the filenames with <a href="https://docs.python.org/3/library/os.path.html#os.path.splitext" rel="nofollow"><code>os.path.splitext</code></a>. Change:</p>
<pre><code>f.extend(filenames)
</code></pre>
<p>to:</p>
<pre><code>f.extend(os.path.splitext(name)[0] for name in filenames)
</code></pre>
<p><strong>Update:</strong> It looks like you're abusing <code>os.walk</code> to do file from directory separation (since you <code>break</code> in the first loop, so you're not actually walking a tree at all), when there are more direct ways to do this. You can replace all of this:</p>
<pre><code>f = [] 
b = os.walk('C:\\Users\\username\\Desktop\\FOLDER')
for(dirpath, dirnames, filenames) in b:
    f.extend(filenames)
    break
</code></pre>
<p>on Python 3.5+ (or any version of Python after installing <a href="https://pypi.python.org/pypi/scandir" rel="nofollow">the third party <code>scandir</code> package</a> using <code>scandir.scandir</code> instead of <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow"><code>os.scandir</code></a>), with the more succinct and somewhat faster:</p>
<pre><code>f = [os.path.splitext(e.name)[0] for e in os.scandir(r'C:\Users\username\Desktop\FOLDER')
     if e.is_file()]
</code></pre>
<p>which describes what you really want, and by using <code>os.scandir</code>, guarantees you don't have to individually <code>stat</code> each entry in the directory listing to check if it's a file.</p>
<p>If you're on older Python, and can't use the <code>scandir</code> package, at the cost of a <code>stat</code> (which <code>os.walk</code> would pay anyway on older Python), you can do:</p>
<pre><code>f = [os.path.splitext(x)[0] for x in os.listdir(r'C:\Users\username\Desktop\FOLDER')
     if os.path.isfile(os.path.join(r'C:\Users\username\Desktop\FOLDER', x))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Replace this line:</p>
<pre><code>f.extend(filenames)
</code></pre>
<p>with something like this:</p>
<pre><code>filenames_stripped = [os.path.splitext(file)[0] for file in filenames]
f.extend(filenames_stripped)
</code></pre>
<p>or even simpler: </p>
<pre><code>f.extend([os.path.splitext(file)[0] for file in filenames]
</code></pre>
<p>More info on what <a href="https://docs.python.org/2/library/os.path.html#os.path.splitext" rel="nofollow"><code>os.path.splitext</code></a> but it essentially splits the filename into 2 pieces. The first is the root, which is what you want.</p>
</div>
<span class="comment-copy">Side-note: Why are you using <code>os.walk</code> when the loop is broken after the first loop? Why not just replace loop with <code>f = [x for x in os.listdir(r'C:\Users\username\Desktop\FOLDER') if os.path.isfile(os.path.join(r'C:\Users\username\Desktop\FOLDER', x))]</code>, or if you're on 3.5+, use <code>os.scandir</code> to save the per file <code>stat</code>, <code>f = [e.name for e in os.scandir(r'C:\Users\username\Desktop\FOLDER') if e.is_file()]</code>?</span>
<span class="comment-copy">Not strictly related to your question (answers already below), but you should open file first and then start loop instead of opening/closing file N times inside loop.</span>
<span class="comment-copy">Thanks guys. I'm quite new to Python, so I'm not used to writing Pythonic yet..but this forum is really helpful :). I will try to implement your comments!</span>
<span class="comment-copy">Can you remove your answer from your <i>question</i>? If the answer you came up is significantly different from the existing suggestions, you can always add it as an alternative answer.</span>
<span class="comment-copy">I should've known..you're awesome thanks for helping!</span>
<span class="comment-copy">Ah thank you very much, but I saw the answer by ShadowRanger first. You're also very awesome for helping :D</span>
