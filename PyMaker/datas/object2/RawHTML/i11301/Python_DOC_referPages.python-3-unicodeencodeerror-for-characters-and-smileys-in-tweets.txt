<div class="post-text" itemprop="text">
<p>I'm making a Twitter API, I get tweets about a specific word (right now it's 'flafel'). Everything is fine except this tweet</p>
<blockquote>
<p>b'And when I\'m thinking about getting the chili sauce on my flafel
  and the waitress, a Pinay, tells me not to get it cos "hindi yan
  masarap."\xf0\x9f\x98\x82'</p>
</blockquote>
<p>I use <code>print ("Tweet info: {}".format(str(tweet.text).encode('utf-8').decode('utf-8')))</code> to see tweets, but this one gives me UnicodeEncodeError every time and if I erase <code>decode()</code> from that line like <code>print ("Tweet info: {}".format(str(tweet.text).encode('utf-8'))</code> I can see the actual tweet like above, but I want to convert that <code>\xf0\x9f\x98\x82</code> part to a str. I tried everyting, every version of decodes-encodes etc. How can I solve this problem?</p>
<p><strong>Edit</strong>: Well I just went to that user's Twitter account to see what is that non-ASCII part, and it turns out it's a smile:</p>
<p><a href="https://i.stack.imgur.com/AY6Fw.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/AY6Fw.jpg"/></a></p>
<p>Is it possible to convert that smiley?</p>
<p><strong>Edit2</strong>: The codes are;</p>
<pre><code>...
...
api = tweepy.API(auth)
for tweet in tweepy.Cursor(api.search,
                           q = "flafel",
                           result_type = "recent",
                           include_entities = True,
                           lang = "en").items():

    print ("Tweet info: {}".format(str(tweet.text).encode('utf-8').decode('utf-8')))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem could arise at the moment you try to use the unicode character <code>\U0001f602</code> on Windows. Python-3 is fine for converting it from utf-8 to full unicode an back again, but windows is not able to display it.</p>
<p>I tried this piece of code in different ways on a Windows 7 box:</p>
<pre><code>&gt;&gt;&gt; b = b'And when I\'m thinking about getting the chili sauce on my flafel and the waitress, a Pinay, tells me not to get it cos "hindi yan masarap."\xf0\x9f\x98\x82'
&gt;&gt;&gt; u = b.decode('utf8')
&gt;&gt;&gt; u
'And when I\'m thinking about getting the chili sauce on my flafel and the waitress, a Pinay, tells me not to get it cos "hindi yan masarap."\U0001f602'
&gt;&gt;&gt; print(u)
</code></pre>
<p>Are here is what happened:</p>
<ul>
<li>in IDLE (Python GUI interpretor based on Tk), I got this error:</li>
</ul>
<blockquote>
<p>UnicodeEncodeError: 'UCS-2' codec can't encode characters in position 139-139: Non-BMP character not supported in Tk</p>
</blockquote>
<ul>
<li>in a console using a non unicode codepage I got this error:</li>
</ul>
<blockquote>
<p>UnicodeEncodeError: 'charmap' codec can't encode character '\U0001f602' in position 139: character maps to &lt;undefined&gt;</p>
</blockquote>
<p>(for the attentive reader BMP means here <em>Basic Multilingual Plane</em>)</p>
<ul>
<li><p>in a console using utf-8 codepage (chcp 65001) I got no error but a weird display:</p>
<pre><code>&gt;&gt;&gt; u
'And when I\'m thinking about getting the chili sauce on my flafel and the waitr
ess, a Pinay, tells me not to get it cos "hindi yan masarap."ðŸ˜‚'
&gt;&gt;&gt; print(u)
And when I'm thinking about getting the chili sauce on my flafel and the waitres
s, a Pinay, tells me not to get it cos "hindi yan masarap."ðŸ˜‚
&gt;&gt;&gt;
</code></pre></li>
</ul>
<p>My conclusion is that the error in not in the conversion utf-8 &lt;-&gt; unicode. But it looks that Window Tk version does not support this character, nor any console code page (except for 65001 that simply tries to display the individual utf8 bytes!)</p>
<p>TL/DR: The problem is not in core Python processing nor in the UTF-8 converter, but only at the system conversion that is used to display the character <code>'\U0001f602'</code></p>
<p>But hopefully, as core Python has no problem in it, you can easily change the offending <code>'\U0001f602'</code> with a <code>':D'</code> for example with a mere <code>string.replace</code> (after the code shows above):</p>
<pre><code>&gt;&gt;&gt; print (u.replace(U'\U0001f602', ':D'))
</code></pre>
<pre class="lang-none prettyprint-override"><code>And when I'm thinking about getting the chili sauce on my flafel and the waitress, a Pinay, tells me not to get it cos "hindi yan masarap.":D
</code></pre>
<hr/>
<p>If you want a special processing for all characters outside the BMP, it is enough to know that the highest code for it is <code>0xFFFF</code>. So you could use code like that:</p>
<pre><code>def convert(t):
    with io.StringIO() as fd:
        for c in t:  # replace all chars outside BMP with a !
            dummy = fd.write(c if ord(c) &lt; 0x10000 else '!')
        return fd.getvalue()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I mentioned in the comments, you can get the names of Unicode codepoints using the standard <a href="https://docs.python.org/3/library/unicodedata.html#module-unicodedata" rel="nofollow">unicodedata</a> module. Here's a small demo:</p>
<pre><code>import unicodedata as ud

test = ('And when I\'m thinking about getting the chili sauce on my flafel and the '
    'waitress, a Pinay, tells me not to get it cos "hindi yan masarap."\U0001F602')

def convert_special(c):
    if c &gt; '\uffff':
        c = ':{}:'.format(ud.name(c).lower().replace(' ', '_')) 
    return c

def convert_string(s):
    return ''.join([convert_special(c) for c in s])

for s in (test, 'Some special symbols \U0001F30C, ©, ®, ™, \U0001F40D, \u2323'): 
    print('{}\n{}\n'.format(s.encode('unicode-escape'), convert_string(s)))
</code></pre>
<p><strong>output</strong></p>
<pre class="lang-none prettyprint-override"><code>b'And when I\'m thinking about getting the chili sauce on my flafel and the waitress, a Pinay, tells me not to get it cos "hindi yan masarap."\\U0001f602'
And when I'm thinking about getting the chili sauce on my flafel and the waitress, a Pinay, tells me not to get it cos "hindi yan masarap.":face_with_tears_of_joy:

b'Some special symbols \\U0001f30c, \\xa9, \\xae, \\u2122, \\U0001f40d, \\u2323'
Some special symbols :milky_way:, ©, ®, ™, :snake:, ⌣
</code></pre>
<p>Another option is to test if a character is in the Unicode <a href="http://www.fileformat.info/info/unicode/category/So/list.htm" rel="nofollow">"Symbol_Other"</a> category. We can do that by replacing the </p>
<pre><code>if c &gt; '\uffff':
</code></pre>
<p>test in <code>convert_special</code> with </p>
<pre><code>if ud.category(c) == 'So':
</code></pre>
<p>When we do that, we get this output:</p>
<pre class="lang-none prettyprint-override"><code>b'And when I\'m thinking about getting the chili sauce on my flafel and the waitress, a Pinay, tells me not to get it cos "hindi yan masarap."\\U0001f602'
And when I'm thinking about getting the chili sauce on my flafel and the waitress, a Pinay, tells me not to get it cos "hindi yan masarap.":face_with_tears_of_joy:

b'Some special symbols \\U0001f30c, \\xa9, \\xae, \\u2122, \\U0001f40d, \\u2323'
Some special symbols :milky_way:, :copyright_sign:, :registered_sign:, :trade_mark_sign:, :snake:, :smile:
</code></pre>
</div>
<span class="comment-copy">Have you tried <code>print ("Tweet info: {}".format(tweet.text.decode('utf-8')))</code>? Considering <code>tweet.text</code> is returning the bytes object you've posted in the question.</span>
<span class="comment-copy">@AshwiniChaudhary All tweets are returns in str type. I tried your suggestion and: AttributeError: 'str' object has no attribute 'decode'</span>
<span class="comment-copy">@AshwiniChaudhary The problem is, there are more tweets has non-ascii characters but decode() convert them nicely, except this tweet. ❤❤ ☀  for example some tweets has these characters, but they are converted.</span>
<span class="comment-copy">@AshwiniChaudhary I edited my question</span>
<span class="comment-copy">Can you post the actual content of <code>tweet.text</code> in the question body, because what you've posted in the question is a bytes object.</span>
<span class="comment-copy">I see, well is there a way to convert parts like <code>\xf0\x9f\x98\x82</code> to ':D' at least? It'll be much better than bytes.</span>
<span class="comment-copy">@GLHF: of course, see my edit</span>
<span class="comment-copy">I know that I mean is there a way to find that not-convertable part and convert it to for example ':D', since I can't define all bytes and meanings of them... There must be a way to find auto</span>
<span class="comment-copy">@GLHF: see my edit...</span>
