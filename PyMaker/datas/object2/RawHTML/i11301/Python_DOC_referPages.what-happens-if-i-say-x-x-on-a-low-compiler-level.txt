<div class="post-text" itemprop="text">
<p>In Python (more specifically Python 3.x), what happens if I say <code>x = x</code>, where <code>x</code> is either a reference to a mutable (like <code>list</code>) or a reference to an immutable (like <code>int</code>) on the low-level? Does the compiler simply ignore such nonsense?</p>
<p>More specifically, what does the compiler do if we have the following case:</p>
<pre><code>class A:
    def __init__(self):
        self.a = self.init_a()

    def init_a(self):
        self.a = some_value
        """
        do stuff with self.a here
        """
        return self.a
</code></pre>
<p>For those who haven't noticed, <code>self.a</code> effectively gets assigned to itself through the function, <code>init_a(self)</code>. </p>
<p>I know this case with <code>class A</code> above seems silly, but I am trying to keep my code clean and readable by clearly initializing all my member variables inside the <code>__init__(self)</code> function (in a different class that I am implementing for real). I just want to know for interest's sake whether the compiler optimizes that step away, or whether it does some operations in any case, even though the statement does not result in anything (I'm guessing it gets optimized away, but I want to be sure - you never know).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from dis import dis

def foo():
    x = 1
    x = x

dis(foo)
</code></pre>
<p>Result:</p>
<pre><code>  4           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (x)

  5           6 LOAD_FAST                0 (x)
              9 STORE_FAST               0 (x)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE 
</code></pre>
<p>This shows that even in the most trivial case, <code>x = x</code> is NOT optimised away (in CPython, which is what <code>dis</code> is for).</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I just want to know for interest's sake whether the compiler optimizes that step away, or whether it does some operations in any case, even though the statement does not result in anything.</p>
</blockquote>
<p>Unless the Python Language Reference says something about it<sup>1</sup>, then any optimization or lack of it is <em>implementation specific</em><sup>2</sup>.  You can investigate what a particular Python implementation does with this, but you <em>cannot</em> generalize to all Python implementations.</p>
<hr/>
<p><sup>1 - My cursory search of <a href="http://marvin.cs.uidaho.edu/Teaching/CS515/pythonReference.pdf" rel="nofollow">this copy</a> of the spec does not real any relevant discussion of optimization.  Ergo, my reading would be that valid optimizations are permitted but not required.  (A valid optimization would be one that does not alter any observable behavior of a valid Python program that is clearly required by the spec.)</sup></p>
<p><sup>2 - Indeed the spec says this: <em>"Each of these implementations [listed above in the spec] varies in some way from the language as documented in this manual, or introduces
specific information beyond what’s covered in the standard Python documentation. Please refer to the implementation-
specific documentation to determine what else you need to know about the specific implementation you’re using."</em></sup></p>
</div>
<div class="post-text" itemprop="text">
<p>This may seem very strange, but it is not actually possible to implement the optimization you suggested, as python is far too dynamic.</p>
<p>Consider the following code:</p>
<pre><code>[Definition of your A class]
@property
def sneaky(self):
    return self._a
@sneaky.setter
def sneaky(self, value):
    self._a = value * 2
A.a = sneaky
a = A()
</code></pre>
<p>The <code>self.a =</code> in the <code>__init__</code> method suddenly starts having an effect! It doubles the value of a. Python is very dynamic indeed.</p>
</div>
<span class="comment-copy">You should just call it <code>a</code> inside <code>init_a</code> and only attach it to <code>self</code> in <code>__init__</code>. Otherwise you contradict your goal or "clearly initializing all my member variables inside the <code>__init__(self)</code> function".</span>
<span class="comment-copy">Yes, that's probably a better idea, but I was wondering about the case above in any case</span>
<span class="comment-copy">Wow, did not expect that. Thanks for showing the actual code on how to obtain that bytecode - know now what library to use for that (and that there is a library for that)</span>
<span class="comment-copy">Agreed - it did cross my mind that it might be implementation specific too, since there seems to be quite a few distinct Python interpreters. Since both Anaconda and Winpython interpreters give the same bytecode output as <a href="http://stackoverflow.com/a/37504798/4475902">Alex Hall's answer</a>, CPython 3.x probably does not optimise this away (assuming Anaconda and WinPython use CPython, which is probably the case)</span>
<span class="comment-copy">Yes ... but what happens when the bytecodes are compiled to native code?  For instance on a JVM platform, I would <i>expect</i> the JIT compiler to optimize away any redundant assignments.</span>
<span class="comment-copy">I am reading in <a href="http://stackoverflow.com/a/1644742/4475902">this</a> answer and <a href="http://stackoverflow.com/a/6889798/4475902">this</a> answer that CPython interprets its bytecode, which means that it reads it instruction by instruction (i.e. no optimizations are done further) if I am correct. But it seems that PyPy does compile the bytecode, as <a href="http://stackoverflow.com/a/6889798/4475902">this</a> answer indicates, so it is possible that PyPy might do such optimizations? (it is too late for me to read through the documentation of Cpython and PyPy to confirm this - I will trust those answerers this time</span>
<span class="comment-copy">Very true. I actually thought of descriptors a while after I asked this question. For example if we have a descriptor, with getter and setter defined for <code>A</code>'s member <code>a</code>, then <code>A_obj.a = A_obj.a</code> first calls the getter then the setter, so it cannot be optimized away, as you say. As I understand it, descriptors form the basis of a lot of Python's functionality, since <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">here</a> they state "Learning about descriptors...creates a deeper understanding of how Python works and an appreciation for the elegance of its design." (continued below)</span>
<span class="comment-copy">So the getter and setter thing as described above probably happens quite often when using Python, unawares to the programmer.</span>
<span class="comment-copy">But it is an interesting example you posted above - very sneaky indeed!</span>
