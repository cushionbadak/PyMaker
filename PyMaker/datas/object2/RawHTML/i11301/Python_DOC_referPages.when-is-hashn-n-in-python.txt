<div class="post-text" itemprop="text">
<p>I've been playing with Python's <a href="https://docs.python.org/3/library/functions.html#hash" rel="nofollow noreferrer">hash function</a>. For small integers, it appears <code>hash(n) == n</code> always. However this does not extend to large numbers:</p>
<pre><code>&gt;&gt;&gt; hash(2**100) == 2**100
False
</code></pre>
<p>I'm not surprised, I understand hash takes a finite range of values. What is that range?</p>
<p>I tried using <a href="http://codejamhelpers.readthedocs.io/en/latest/#codejamhelpers.binary_search" rel="nofollow noreferrer">binary search</a> to find the smallest number <code>hash(n) != n</code></p>
<pre><code>&gt;&gt;&gt; import codejamhelpers # pip install codejamhelpers
&gt;&gt;&gt; help(codejamhelpers.binary_search)
Help on function binary_search in module codejamhelpers.binary_search:

binary_search(f, t)
    Given an increasing function :math:`f`, find the greatest non-negative integer :math:`n` such that :math:`f(n) \le t`. If :math:`f(n) &gt; t` for all :math:`n \ge 0`, return None.

&gt;&gt;&gt; f = lambda n: int(hash(n) != n)
&gt;&gt;&gt; n = codejamhelpers.binary_search(f, 0)
&gt;&gt;&gt; hash(n)
2305843009213693950
&gt;&gt;&gt; hash(n+1)
0
</code></pre>
<p>What's special about 2305843009213693951? I note it's less than <code>sys.maxsize == 9223372036854775807</code></p>
<p>Edit: I'm using Python 3. I ran the same binary search on Python 2 and got a different result 2147483648, which I note is <code>sys.maxint+1</code></p>
<p>I also played with <code>[hash(random.random()) for i in range(10**6)]</code> to estimate the range of hash function. The max is consistently below n above. Comparing the min, it seems Python 3's hash is always positively valued, whereas Python 2's hash can take negative values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on python documentation in <a href="https://github.com/python/cpython/blob/master/Python/pyhash.c"><code>pyhash.c</code></a> file:</p>
<blockquote>
<p>For numeric types, the hash of a number x is based on the reduction
     of x modulo the prime <code>P = 2**_PyHASH_BITS - 1</code>.  It's designed so that
     <code>hash(x) == hash(y)</code> whenever x and y are numerically equal, even if
     x and y have different types.</p>
</blockquote>
<p>So for a 64/32 bit machine, the reduction would be 2 <sup>_PyHASH_BITS </sup> - 1, but what is <code>_PyHASH_BITS</code>?</p>
<p>You can find it in <a href="https://github.com/python/cpython/blob/master/Include/pyhash.h"><code>pyhash.h</code></a> header file which for a 64 bit machine has been defined as 61 (you can read more explanation in <code>pyconfig.h</code> file).</p>
<pre><code>#if SIZEOF_VOID_P &gt;= 8
#  define _PyHASH_BITS 61
#else
#  define _PyHASH_BITS 31
#endif
</code></pre>
<p>So first off all it's based on your platform for example in my 64bit Linux platform the reduction is 2<sup>61</sup>-1, which is <code>2305843009213693951</code>:</p>
<pre><code>&gt;&gt;&gt; 2**61 - 1
2305843009213693951
</code></pre>
<p>Also You can use <code>math.frexp</code> in order to get the mantissa and exponent of <code>sys.maxint</code> which for a 64 bit machine shows that max int is 2<sup>63</sup>: </p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.frexp(sys.maxint)
(0.5, 64)
</code></pre>
<p>And you can see the difference by a simple test:</p>
<pre><code>&gt;&gt;&gt; hash(2**62) == 2**62
True
&gt;&gt;&gt; hash(2**63) == 2**63
False
</code></pre>
<p>Read the complete documentation about python hashing algorithm <a href="https://github.com/python/cpython/blob/master/Python/pyhash.c#L34">https://github.com/python/cpython/blob/master/Python/pyhash.c#L34</a></p>
<p>As mentioned in comment you can use <code>sys.hash_info</code> (in python 3.X) which will give you a struct sequence of parameters used for computing
hashes.</p>
<pre><code>&gt;&gt;&gt; sys.hash_info
sys.hash_info(width=64, modulus=2305843009213693951, inf=314159, nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, seed_bits=128, cutoff=0)
&gt;&gt;&gt; 
</code></pre>
<p>Alongside the modulus that I've described in preceding lines, you can also get the <code>inf</code> value as following:</p>
<pre><code>&gt;&gt;&gt; hash(float('inf'))
314159
&gt;&gt;&gt; sys.hash_info.inf
314159
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>2305843009213693951</code> is <code>2^61 - 1</code>. It's the largest Mersenne prime that fits into 64 bits.</p>
<p>If you have to make a hash just by taking the value mod some number, then a large Mersenne prime is a good choice -- it's easy to compute and ensures an even distribution of possibilities. (Although I personally would never make a hash this way)</p>
<p>It's especially convenient to compute the modulus for floating point numbers.  They have an exponential component that multiplies the whole number by <code>2^x</code>.  Since <code>2^61 = 1 mod 2^61-1</code>, you only need to consider the <code>(exponent) mod 61</code>.</p>
<p>See: <a href="https://en.wikipedia.org/wiki/Mersenne_prime">https://en.wikipedia.org/wiki/Mersenne_prime</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Hash function returns <strong>plain int</strong> that means that returned value is greater than <code>-sys.maxint</code> and lower than <code>sys.maxint</code>, which means if you pass <code>sys.maxint + x</code> to it result would be <code>-sys.maxint + (x - 2)</code>.</p>
<pre><code>hash(sys.maxint + 1) == sys.maxint + 1 # False
hash(sys.maxint + 1) == - sys.maxint -1 # True
hash(sys.maxint + sys.maxint) == -sys.maxint + sys.maxint - 2 # True
</code></pre>
<p>Meanwhile <code>2**200</code> is a <code>n</code> times greater than <code>sys.maxint</code> -  my guess is that hash would go over range <code>-sys.maxint..+sys.maxint</code> n times until it stops on plain integer in that range, like in code snippets above..</p>
<p>So generally, for any <strong>n &lt;= sys.maxint</strong>:</p>
<pre><code>hash(sys.maxint*n) == -sys.maxint*(n%2) +  2*(n%2)*sys.maxint - n/2 - (n + 1)%2 ## True
</code></pre>
<p><strong>Note:</strong> this is true for python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://hg.python.org/cpython/file/c6880edaf6f3/Objects/intobject.c#l448" rel="nofollow">implementation for the int type in cpython can be found here.</a> </p>
<p>It just returns the value, except for <code>-1</code>, than it returns <code>-2</code>:</p>
<pre class="lang-c prettyprint-override"><code>static long
int_hash(PyIntObject *v)
{
    /* XXX If this is changed, you also need to change the way
       Python's long, float and complex types are hashed. */
    long x = v -&gt; ob_ival;
    if (x == -1)
        x = -2;
    return x;
}
</code></pre>
</div>
<span class="comment-copy">Have you checked the number's binary representation?</span>
<span class="comment-copy">'0b1111111111111111111111111111111111111111111111111111111111111' curious! So  <code>n+1 == 2**61-1</code></span>
<span class="comment-copy">seems to be system dependent. With my python, the hash is <code>n</code> for the whole 64bit int range.</span>
<span class="comment-copy">Note the stated purpose of the hash value: <i>They are used to quickly compare dictionary keys during a dictionary lookup.</i> In other words, implementation-defined, and by virtue of being shorter than many values that can have hash values, may very well have collisions even in reasonable input spaces.</span>
<span class="comment-copy">Um, isn't <code>2147483647</code> equal to <code>sys.maxint</code> (not <code>sys.maxint+1</code>), and if 'n = 0b1111111111111111111111111111111111111111111111111111111111111'  then isn't <code>n+1 == 2**61</code> or <code>n == 2**61-1</code> (not <code>n+1 == 2**61-1</code>)?</span>
<span class="comment-copy">It would be nice to mention <code>sys.hash_info</code>, for completeness.</span>
<span class="comment-copy">@MarkDickinson Thanks for comment, just updated.</span>
<span class="comment-copy">You say you would never make a hash this way. Do you have alternative suggestions for how it could be done in a way that makes it reasonably efficient to compute for ints, floats, Decimals, Fractions <i>and</i> ensures that <code>x == y</code> guarantees <code>hash(x) == hash(y)</code> across types? (Numbers like <code>Decimal('1e99999999')</code> are especially problematic, for example: you don't want to have to expand them out to the corresponding integer before hashing.)</span>
<span class="comment-copy">@MarkDickinson I suspect he's trying to draw a distinction between this simple lightening fast hash, and cryptographic hashes that also care about making the output look random.</span>
<span class="comment-copy">@MarkDickinson The modulus is a good start, but I would then mix it up some more, especially mixing some of the high bits into the low.  It's not uncommon to see sequences of integers divisible by powers of 2.  It's also not uncommon to see hash tables with capacities that are powers of 2.  In Java, for example, if you have a sequence of integers that are divisible by 16, and you use them as keys in a HashMap, you will only use 1/16th of the buckets (at least in the version of the source I'm looking at)!  I think hashes ought to be at least a little bit random-looking to avoid these problerms</span>
<span class="comment-copy">Yes, bit-mixing style hashes are far superior to the math inspired ones. Bit-mixing instructions are so cheap that you can have many at the same cost. Also, real world data seems to not have patterns that do <i>not</i> work well with bit mixing. But there are patterns that are horrible for modulus.</span>
<span class="comment-copy">@usr: Sure, but a bit-mixing hash is infeasible here: the requirement that the hash work for <code>int</code>, <code>float</code>, <code>Decimal</code> and <code>Fraction</code> objects and that <code>x == y</code> implies <code>hash(x) == hash(y)</code> even when <code>x</code> and <code>y</code> have different types imposes some rather severe constraints. If it were just a matter of writing a hash function for integers, without worrying about the other types, it would be an entirely different matter.</span>
<span class="comment-copy">This may be true for Python 2, but definitely not for Python 3 (which doesn't have <code>sys.maxint</code>, and which uses a different hash function).</span>
<span class="comment-copy">This doesn't include large values, which are implemented by <code>PyLong</code> rather than <code>PyInt</code>.</span>
