<div class="post-text" itemprop="text">
<p>I loop over files and for each of these files, I compute a list of 4000+ (fixed number) features on it. These features are computed by a function and returned as <code>numpy.array</code></p>
<p>I want to write a CSV file with one line per file (each line is one <code>numpy.array</code>with 4000+ elements).</p>
<p>I'm currently using the <code>csv</code>library of Python and even if my array is rounded (thanks to <code>np.around</code>), the CSV file contains numbers with a lot of digits, e.g. <code>0,302499999999999</code>instead of <code>0,3025</code></p>
<p>I know this may come from <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow">floating points limitations</a> in Python, but i wanted to know if there is any way to avoid this (by writing it as a string?) in the output file.</p>
<p>Sample of code below to reproduce the issue :</p>
<pre><code>import numpy as np
import csv

for i in range(10) :
    row = np.around(np.random.random(4000), decimals=5)

    with open('output.csv', "ab") as fp:
        wr = csv.writer(fp, dialect='excel')
        wr.writerow(row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html#numpy.savetxt" rel="nofollow" title="`numpy.savetxt()`"><code>numpy.savetxt()</code></a> like this:</p>
<pre><code>import numpy as np

with open('output.csv', 'w') as fh:
    for i in range(10):  # loop over features
        row = np.random.random(4000)
        np.savetxt(fh, row.reshape(1, -1), fmt='%.5e', delimiter=',')
</code></pre>
</div>
<span class="comment-copy">Thanks, and is there a <code>'a'</code> mode for <code>np.savetxt</code> ? Using your alternative i can only see the last <code>row</code> in the CSV. The CSV is written as if i've used the <code>'w'</code> mode in the <code>csv</code> library</span>
<span class="comment-copy">Finally solved it using <code>with open('output.csv', "ab") as fp:         np.savetxt(fp, row.reshape(1, row.shape[0]), fmt='%.5e', delimiter=',')</code>. Thanks !</span>
<span class="comment-copy">@Julian: I updated my answer to better fit to your use-case</span>
