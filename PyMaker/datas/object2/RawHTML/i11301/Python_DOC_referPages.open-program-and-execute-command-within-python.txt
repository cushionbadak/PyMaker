<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/89228/calling-an-external-command-in-python">Calling an external command in Python</a>
<span class="question-originals-answer-count">
                    56 answers
                </span>
</li>
</ul>
</div>
<p>I am having problem with logic and syntax in Python for opening program and executing program.</p>
<p>For an example, I have figured out how to open a program with python code by doing so:</p>
<pre><code>import os 
os.system("start c:/test/sqlite3 test.db3)
</code></pre>
<p>With this example code I am opening an sqlite3 (I know there is an sqlite3 library in Python - I am trying to understand OS right now.)</p>
<p>How could execute following command with this open file?</p>
<pre><code>.read test.sql
</code></pre>
<p>I would appreciate if you would explain a logic to me in brief. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, <code>os.system</code> is no longer recommended. Use the <code>subprocess</code> module instead.</p>
<p>To open a programm with <code>subprocess</code> use:</p>
<pre><code>import subprocess

p = subprocess.Popen(['command', 'arguments'])
</code></pre>
<p>With <code>Popen</code> you can also use <code>PIPE</code> to communicate with the process via <code>stdin</code>. E.g.:</p>
<pre><code>p = subprocess.Popen(['command', 'args'], stdin=subprocess.PIPE)

result = p.communicate(b"Any input that goes to stdin")

# do whatever you want to do with the result
</code></pre>
<p>Documentation about <a href="https://docs.python.org/2/library/subprocess.html#popen-constructor" rel="nofollow">Popen</a>, <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow">subprocess module</a> and <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow">communicate</a>.</p>
</div>
<span class="comment-copy">If you are trying to understand OS then stick to OS related commands. You will get much better use out of the sqlite library when doing work with your sqlite databases. You'll just confuse yourself and pick up bad practices if you mix and match libraries</span>
<span class="comment-copy">No, like i said, this is just a test. I don't intend to use mixed libraries, i am trying to figure out how to manipulate with OS.</span>
<span class="comment-copy">os.system() is basically the same as opening up a command prompt and typing commands in. You could chain multiple OS.system() calls to write a script, but this is just bad practice and complete misuse of the libraries.. os.system('cd ../'), os.system('dir'), os.system('cd ../'), os.system('dir') for example will run them 4 commands one after the other..</span>
<span class="comment-copy">Likewise, if you open up a command prompt and type in 5 commands to execute some database related work, if you copy all them inside a os.system(), it should do the exact same thing</span>
<span class="comment-copy">Take a look at the subprocess module <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html</a> .. this supersedes the os library. Some examples: <a href="http://www.cyberciti.biz/faq/python-run-external-command-and-get-output/" rel="nofollow noreferrer">cyberciti.biz/faq/python-run-external-command-and-get-output</a></span>
