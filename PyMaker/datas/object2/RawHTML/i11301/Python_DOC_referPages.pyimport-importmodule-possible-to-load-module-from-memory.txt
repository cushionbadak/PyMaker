<div class="post-text" itemprop="text">
<p>I embedded python in my C++ program.</p>
<p>I use PyImport_ImportModule to load my module written in a .py file.
But how can I load it from memory? Let's say my .py file is encrypted, so I need to first decrypt it and feed the code to python to execute. </p>
<p>Moreover, it'd be nice if I could bypass/intercept or modify the import mechanism, so that doesn't load modules from the filesystem but my own memory blocks, how/can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The following example shows how to define a module from a C string:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;Python.h&gt;
int main(int argc, char *argv[])
{
    Py_Initialize();
    PyRun_SimpleString("print('hello from python')");

    // fake module
    char *source = "__version__ = '2.0'";
    char *filename = "test_module.py";

    // perform module load
    PyObject *builtins = PyEval_GetBuiltins();
    PyObject *compile = PyDict_GetItemString(builtins, "compile");
    PyObject *code = PyObject_CallFunction(compile, "sss", source, filename, "exec");
    PyObject *module = PyImport_ExecCodeModule("test_module", code);

    PyRun_SimpleString("import test_module; print(test_module.__version__)");

    Py_Finalize();
    return 0;
}
</code></pre>
<p>output:</p>
<pre><code>hello from python
version: 2.0
</code></pre>
<p>You can read about <a href="https://docs.python.org/3/reference/import.html" rel="noreferrer">import hooks</a> in the docs.  You will need to define a class with <code>find_module</code> and <code>load_module</code> methods.  Something like the following should work:</p>
<pre><code>PyObject* find_module(PyObject* self, PyObject* args) {
    // ... lookup args in available special modules ...
    return Py_BuildValue("B", found);
}

PyObject* load_module(PyObject* self, PyObject* args) {
    // ... convert args into filname, source ...
    PyObject *builtins = PyEval_GetBuiltins();
    PyObject *compile = PyDict_GetItemString(builtins, "compile");
    PyObject *code = PyObject_CallFunction(compile, "sss", source, filename, "exec");
    PyObject *module = PyImport_ExecCodeModule("test_module", code);
    return Py_BuildValue("O", module);
}

static struct PyMethodDef methods[] = {
    { "find_module", find_module, METH_VARARGS, "Returns module_loader if this is an encrypted module"},
    { "load_module", load_module, METH_VARARGS, "Load an encrypted module" },
    { NULL, NULL, 0, NULL }
};

static struct PyModuleDef modDef = {
    PyModuleDef_HEAD_INIT, "embedded", NULL, -1, methods, 
    NULL, NULL, NULL, NULL
};

static PyObject* PyInit_embedded(void)
{
    return PyModule_Create(&amp;modDef);
}

int main() {
    ...
    PyImport_AppendInittab("embedded", &amp;PyInit_embedded);
    PyRun_SimpleString("\
import embedded, sys\n\
class Importer:\n\
    def find_module(self, fullpath):\n\
        return self if embedded.find_module(fullpath) else None\n\
    def load_module(self, fullpath):\n\
        return embedded.load_module(fullpath)\n\
sys.path_hooks.insert(0, Importer())\n\
");
    ...
}
</code></pre>
</div>
<span class="comment-copy">Thanks! The first example works perfectly!</span>
