<div class="post-text" itemprop="text">
<p>I have a list of integers, say <code>[2, 4, 9]</code>, then I need to create a csv file like this:</p>
<pre><code>1,0
2,1
3,0
4,1
5,0
6,0
7,0
8,0
9,1
</code></pre>
<p>Basically, for each integer, I need to check if the integer is in the list, if it is I write <code>1</code>, otherwise <code>0</code>.</p>
<p>I could create a double list, do a for loop, check if the integer is in the list, and then append the <code>(i,0)</code> or <code>(i,1)</code> depending on whether <code>i</code> is in the list, but I am sure there is a far more efficient way to do this. These lists are big, a billion integers or so.
I looked if there was something in numpy to help me, but could not find anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a> to create your data and use the module <a href="https://docs.python.org/2/library/csv.html" rel="nofollow">csv</a> to write to a csv file.</p>
<pre><code>s = set([2, 4, 9])
lists = [(i, 1) if i in s else (i, 0) for i in range(1, 10)]

# write to a csv file
import csv
with open('test.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerows(lists)
</code></pre>
<hr/>
<p>Since your data size is quite big, it is better to write to a file while creating, as shown below.</p>
<pre><code>import csv

s = set([2, 4, 9])
with open('test.csv', 'w') as f:
    writer = csv.writer(f)

    for i in range(1, 10000000):
        t = (i, 1) if i in s else (i, 0)
        writer.writerow(t)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A linear time solution would be to simply check if the current number is literally "in" a list of integers.</p>
<p><em>example:</em></p>
<pre><code>sample_list = [2,4,9]
for i in range(5):
    if (i in sample_list):
        print("%d,1"%i)
    else:
        print("%d,0"%i)
</code></pre>
<p><em>Output:</em></p>
<pre><code> 0,0
 1,0
 2,1
 3,0
 4,1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the list is sorted, you can use a generator function, which might be quite efficient.</p>
<pre><code>def bitstream(sorted_list_of_integers):
    index = 0
    for number in sorted_list_of_integers:
        while number &gt; index:
             yield (index, 0)
             index += 1
        yield (index, 1)
        index += 1

stream = bitstream([3,4,7,9])
list(stream)
</code></pre>
<p>output: </p>
<pre><code>[(0,0),(1,0),(2,0),(3,1),(4,1),(5,0),(6,0),(7,1),(8,0),(9,1)]
</code></pre>
<p>You should also be able to pass in another generator, as long as the output is incremental. So you can do <code>bitstream(range(0, 10**8, 9**3))</code> or something like that.</p>
<p>To write to a file, just loop over the bitstream:</p>
<pre><code>with open('numbers.data') as fp:
    for item in bitstream(range(0,500000,1000)):
        fp.write('%i,%i\n' % item)
</code></pre>
<p>Using a generator could potentially save a lot of memory compared to some alternative implementations.</p>
</div>
<span class="comment-copy">Create a <code>set</code> from your <code>list</code>. It will make the lookups very fast.</span>
<span class="comment-copy">That doesn't seem like an optimal to save this. Why not just save it as binary data? It's just a bunch of zeroes an ones, anyway?</span>
<span class="comment-copy">Can you explain a bit more about your input? There's a big difference between handling a list of 3 integers and a list of a billion integers. Are these lists sorted? Are they numpy arrays or python lists?</span>
<span class="comment-copy">Yes, the list is sorted. Right now they are python lists.</span>
