<div class="post-text" itemprop="text">
<p>I've got a class definition as follows:</p>
<pre><code>class myClass(object):
    @lru_cache(maxsize=None)
    def f1(self):
        return 1

    def f2(self):
        return 2
</code></pre>
<p>What I want to know is, does the <code>@lru_cache</code> decorator apply to all functions beneath until it hits another decorator, or just the following function?</p>
<p>If I want to decorate <code>f2</code>, do I need to repeat <code>@lru_cache</code> above it as well?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can easily test this out yourself, by definining a decorator that will tell you whether you decorated something. For example this one:</p>
<pre><code>def myDecorator (f):
    print('Decorated {0}'.format(f.__name__))
    return f
</code></pre>
<p>Then, when used with your class:</p>
<pre><code>class MyClass:
    @myDecorator
    def f1 (self):
        return 1

    def f2 (self):
        return 2
</code></pre>
<p>… you get the following output:</p>
<pre class="lang-none prettyprint-override"><code>Decorated f1
</code></pre>
<p>So the decorator is only applied to the function it is directly decorating. And if you think about it, this makes a lot of sense, since there is no syntax to <em>undecorate</em> a function. And since you can apply multiple decorators to single functions, there’s also no concept of overwriting a decorator.</p>
<p>And finally, as per <a href="https://www.python.org/dev/peps/pep-0020/">the zen of Python</a>, <em>“explicit is better than implicit”</em>. So we rather want to explicitly list the decorator for every single function it should apply to instead of implicitly having rules that applies it in some magic way because it syntactically appeared before.</p>
</div>
<div class="post-text" itemprop="text">
<p>Decorators only apply to the function following it, if it was the other way, what would happen if i didn't want to decorate the function? so they only apply to the following function.</p>
<p>So you have to use <code>@lru_cahce</code> on the <code>f2</code> function if you want to cache it.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to poke's answer: how about looking at the formal syntax of function's definition?</p>
<p>See <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow">https://docs.python.org/3/reference/compound_stmts.html#function-definitions</a>.</p>
<pre><code>funcdef ::=  [decorators] "def" funcname "(" [parameter_list] ")" ["-&gt;" expression] ":" suite
</code></pre>
<p>So any decorators modifying a function have to be listed directly before the line that starts with <em>def</em>. No other code can jump in between.</p>
</div>
<span class="comment-copy">Short  answer: It only decorates the following function and you need to repeat <code>@lru_cache</code> again</span>
