<div class="post-text" itemprop="text">
<p>I got the following un-normalized list of tuples as result from a SQL-query. </p>
<pre><code>data = [(...) {u'timestamp': datetime.datetime(2016, 5, 25, 23, 55, 33), u'sensor': u'GP_PRES', u'value': u'96587'}, {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_NO2', u'value': u'0.221'}, {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_TC', u'value': u'14.600'}, {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_HUM', u'value': u'83.94'}, (...) ]
</code></pre>
<p>These are Sensor-Data from several sensors but with the same timestamp. </p>
<p>I would like to group all the sensor values with the same timestamp. So that I have a list of tuples for every equal timestamp. </p>
<pre><code>grouped_data = [... {u'timestamp': datetime.datetime(2016, 5, 25, 23, 55, 33), [{u'sensor': u'GP_PRES', u'value': u'96587'}, { u'sensor': u'GP_NO2', u'value': u'0.221'}, {u'sensor': u'GP_TC', u'value': u'14.600'}, {u'sensor': u'GP_HUM', u'value': u'83.94'}]}, ... ]
</code></pre>
<p>I understood that I can use the groupby()-function from the itertools. I do not understand what kind of Key function I need in order to group by the equal 'timestamp'.</p>
<pre><code>data2 = sorted(data, key= operator.attrgetter('timestamp'))
    for k, g in groupby(data2, keyfunc):
            groups.append(list(g))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your code, <code>operator.attrgetter('timestamp')</code> raises the error <code>AttributeError: 'dict' object has no attribute 'timestamp'</code>. </p>
<p>Replace it with <code>key=lambda d:d['timestamp']</code>, as shown below.</p>
<pre><code>#!/usr/bin/env python 
# -*- coding: utf-8 -*-

import itertools
import operator
import datetime

data = [{u'timestamp': datetime.datetime(2016, 5, 25, 23, 55, 33), u'sensor': u'GP_PRES', u'value': u'96587'}, 
        {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_NO2', u'value': u'0.221'}, 
        {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_TC', u'value': u'14.600'}, 
        {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_HUM', u'value': u'83.94'}]

groups = list()
data2 = sorted(data, key=lambda d:d['timestamp'])
for k, g in itertools.groupby(data2, key=lambda d:d['timestamp']):
    groups.append(list(g))

print(groups)   # 2 groups
[[  {u'timestamp': datetime.datetime(2016, 5, 25, 23, 55, 33), u'sensor': u'GP_PRES', u'value': u'96587'}], 
 [  {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_NO2', u'value': u'0.221'}, 
    {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_TC', u'value': u'14.600'}, 
    {u'timestamp': datetime.datetime(2016, 5, 25, 23, 56, 33), u'sensor': u'GP_HUM', u'value': u'83.94'}]]
</code></pre>
</div>
<span class="comment-copy">Thanks. Would you mind to explain the used lamda-function?</span>
<span class="comment-copy">@Maus, <code>Lambda</code> expressions are used to create anonymous functions. The expression lambda arguments: expression yields a function object.  Refer to <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">here</a> for the detailed description.</span>
