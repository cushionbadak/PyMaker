<div class="post-text" itemprop="text">
<p>I can't figure out how to import modules from sibling directories in Python 3 using absolute imports.</p>
<ol>
<li>modify the <code>sys.path</code>.</li>
<li>turn the directory into a pip installable package via <code>__init__.py</code> and <code>setup.py</code>.</li>
</ol>
<p>For option 1. I figured out how to import modules from sibling directories by modifying the <code>sys.path</code>, but this method seems a little hackey to me. Also, I've read that it is not preferred. Why? Is there something inherently wrong or dangerous about modifying the <code>sys.path</code>?</p>
<p>For option 2. What exactly do I need to do make my package pip installable? I've alreay created my <code>__init__.py</code> file, but it seems that I need to create and configure a <code>setup.py</code> script to prepare my package for distribution? I'm still in the development mode, so is this really the best/pythonic method? If it is, then do I just type <code>python setup.py install</code> into my terminal after creating the <code>setup.py</code>?</p>
<p><em>Edit: I'm now trying to figure this out using absolute imports as python 3 does support relative imports.</em></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>From what I've read, Python 3 does not support relative imports</p>
</blockquote>
<p>It does.</p>
<p>To import <code>myproject/foo/__init__.py</code> from <code>myproject/bar/baz.py</code>, you can use this:</p>
<pre><code>from .. import foo
</code></pre>
<p>Or if you want to import an object/module in <code>foo</code>:</p>
<pre><code>from ..foo import object
</code></pre>
<p>This requires <code>myproject</code> to be a package, so <code>myproject/__init__.py</code> has to exist.</p>
</div>
<span class="comment-copy">Thanks. I'll try this out when I'm at home. What about absolute imports? Is it possible to import modules across different directories using absolute imports without modifying the sys.path?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/importlib.html#importlib.find_loader" rel="nofollow noreferrer">docs.python.org/3/library/importlib.html#importlib.find_loader</a></span>
<span class="comment-copy">The "relative imports" that are not supported by Python 3 are the implicit ones: <a href="https://docs.python.org/2/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">docs.python.org/2/tutorial/â€¦</a></span>
