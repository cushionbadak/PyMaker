<div class="post-text" itemprop="text">
<p>For example I have this pandas simple data frame:</p>
<pre><code>&gt;&gt; print(file)
       Name
    0  ['junior','senior']
    1  freshgrad
</code></pre>
<p>when I tried using :</p>
<pre><code>&gt;&gt; len(file[0])
2
</code></pre>
<p>but for the second one</p>
<pre><code>&gt;&gt; len(file[1])
9
</code></pre>
<p>But I want the second one to calculate as <code>1</code> how to differentiate between these two? </p>
<ol>
<li>I have tried using <code>.join()</code> but it still calculate as <code>9</code></li>
<li>I have tried <code>list.count</code> but I got an error</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>freshgrad is a string<br/>
so len(file[1]) means that you are calculate the length of this string.It is 9.<br/>
if file[1] is a list containing freshgrad like['freshgrad'],len(file[1]) will be 1.<br/></p>
</div>
<div class="post-text" itemprop="text">
<p>The best way to do what you want is to check the data type of the item in question.  You can use:</p>
<pre><code>if isinstance(item, list):
    ...
</code></pre>
<p>And:</p>
<pre><code>if isinstance(item, str):
    ...
</code></pre>
<p>In the case of a string, you can then use 1 for the length if you wish.  Note that it's better to use <code>isinstance(item, dtype)</code> than <code>type(item) == dtype</code> because it will automatically work on subclassed types.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>np.size</code>:</p>
<pre><code>In [301]: file = pd.Series([['junior','senior'], 'freshgrad'])

In [302]: file.apply(np.size)
Out[302]: 
0    2
1    1
dtype: int64

In [327]: np.size(file[0])
Out[327]: 2

In [328]: np.size(file[1])
Out[328]: 1
</code></pre>
<p>But to some extent this might just be delaying your agony.  When the objects in
a Series (or any kind sequence) have different types, the code tends require type-checking or <code>try..except</code>s to handle the various types differently. (In fact, this is what <code>np.size</code> is doing. Under the hood <code>np.size</code> is using <code>try..except</code> to handle the exceptional case.)</p>
<p>Life is usually simpler (and therefore better) when all the objects in a sequence have the same type. So it is preferable to build a Series whose elements are all lists:</p>
<pre><code>In [301]: file = pd.Series([['junior','senior'], ['freshgrad']])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could define your own length function, which uses the type to determine how to calculate the length:</p>
<pre><code>def mylen(data):
    return len(data) if isinstance(data,list) else 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python Doc say about function len</p>
<p>Return the length (the number of items) of an object. The argument may be a sequence <strong>(such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set)</strong>.</p>
<p>See <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow">https://docs.python.org/3/library/functions.html#len</a></p>
<p>In other words</p>
<pre><code>&gt;&gt;&gt; len('freshgrad') 9 because returns the size of string
&gt;&gt;&gt; len(['freshgrad']) 1 because returns the size of array
</code></pre>
</div>
<span class="comment-copy">If you want to calculate the number of values, you need to make sure that single values are stored as length-1 lists.</span>
<span class="comment-copy">freshgrad is a string and not an array. If you had <code>1 ['freshgrad']</code> you would get <code>len(file[1])=1</code></span>
<span class="comment-copy">@EliSadoff So, for the 'freshgrad' I need to change it from array to string?</span>
<span class="comment-copy">No, <code>freshgrad</code> is currently a string, and you want it to be an array.</span>
<span class="comment-copy">@EliSadoff oh yes! I was a bit confused. thank you.</span>
