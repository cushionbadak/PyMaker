<div class="post-text" itemprop="text">
<p>When I'm reading docs or examples, I often see the idea come up that you can assign an anonymous function to a variable. Why would I ever actually do this rather than just define a new function?</p>
<p>Some examples:</p>
<blockquote>
<p>Clojure/Lisp</p>
</blockquote>
<pre><code>(def add2
    (fn [a] (+ 2 a))
(add2 4) ;; =&gt; 6
</code></pre>
<blockquote>
<p>Python</p>
</blockquote>
<pre><code>add2 = lambda e: e + 2
add2(3) # =&gt; 5
</code></pre>
<blockquote>
<p>Scala</p>
</blockquote>
<pre><code>val add2 = (x: Int) =&gt; x + 2
add2(5) /* =&gt; 7 */
</code></pre>
<p>Obviously, these are trivial examples, but in production code, I usually think of an anonymous function being a <em>one off</em> function that I need for a specific use case (think higher kinded types and the like).</p>
<p>Can anyone explain why I would assign an anonymous function to a variable? Is it a runtime/compile time thing? Are there certain performance characteristics that make this favorable?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the way it is presented is more so the reader truly understands that functions are first class in said languages. Had they only used them as arguments to other functions, perhaps the point might be lost. But using them in a very value like way, as the right hand of an assignment, or calling a method on the lambda itself etc drives home the point that these are quite similar to numbers, strings, maps or any other value in the language.</p>
<p>Personally, I don't use this pattern because as other comments have mentioned, it makes code harder to read and debug, as well as in some me cases not having the full power of proper function declaration (Python).</p>
<p>However, when one is writing code which actually makes use of function arguments, one is more or less doing just that. Only the assignment happens more indirectly than the usage of the operator.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow">Python Docs</a>:</p>
<blockquote>
<p>Semantically, they are just syntactic sugar for a normal function definition.</p>
</blockquote>
<p>afaik,  there are no special performance characteristics for <code>lambda</code> that makes it favourable. If you are thinking of using lambdas for complex tasks, think again, use functions.</p>
<p>Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.</p>
<p><strong>Edit</strong>: Added StefanS' suggestion</p>
</div>
<div class="post-text" itemprop="text">
<p>In Clojure, the reason is so you can use the function in more than one place. In fact</p>
<pre><code>(defn add2 [x] (+ x 2)
</code></pre>
<p>is just shorthand for</p>
<pre><code>(def add2 (fn [x] (+ x 2))
</code></pre>
</div>
<span class="comment-copy">This is really primarily opinion based / matter of style. But using lambdas like that in <b>Python</b> serve no other "purpose" except making debugging harder.</span>
<span class="comment-copy">I sometimes assign a name to a lambda function when I need a <code>key</code>-function (e.g. for <code>sort</code>) and when I think defining the function in the same line where I use it as an argument feels too terse but defining a regular function feels too verbose.</span>
<span class="comment-copy">I actually did this this morning. I was testing 2 higher order functions that had different implementations, but should have identical input/output. I bound the function being passed in in a <code>let</code>, then used it in the body. I could have defined it as a concrete function, but this was sufficient for a quick test.</span>
<span class="comment-copy">You should add "Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier. " from <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python.org/dev/peps/pep-0008</a> . The real use of lambda functions is that you can use small functions inside other things like list comprehensions or map/filter, like the examples in <a href="http://docs.python-guide.org/en/latest/writing/style/#short-ways-to-manipulate-lists" rel="nofollow noreferrer">docs.python-guide.org/en/latest/writing/style/â€¦</a> .</span>
<span class="comment-copy">@STefanS Ok, will add that :)</span>
