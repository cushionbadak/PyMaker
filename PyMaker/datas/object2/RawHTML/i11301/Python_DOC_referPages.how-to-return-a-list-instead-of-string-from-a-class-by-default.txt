<div class="post-text" itemprop="text">
<pre><code>class A:
    def __init__(self, message):
        self.message = message

    def __repr__(self):
        return self.message

print A("Hello")
</code></pre>
<p>The above code prints prints "Hello", as a string is returned.
But I want to return a list by default. Like if I write :</p>
<pre><code>class A:
    def __init__(self, message):
        self.message = message

    def __repr__(self):
        mylist = [self.message]
        return mylist

print A("Hello")
</code></pre>
<p>The above code gives an error <strong>TypeError: __str__ returned non-string (type list)</strong></p>
<p>I <strong>cannot create an object of the class</strong>, as i need to handle this as an <strong>exception</strong>. like:</p>
<pre><code>try:
    #some code which passes parameters to constructor of A if this fails.
except A as e:
    #here I want e as a list instead of string.
</code></pre>
<p>Is there any way to return a list ?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow"><code>__str__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow"><code>__repr__</code></a> methods must return strings. You have to make a custom getter function.</p>
<p>For instance:  </p>
<pre><code>class A:
    def __init__(self, message):
        self.message = message

    def get_message_as_list(self):
        return [self.message]

my_object = A("Hello")
print(my_object.get_message_as_list())
</code></pre>
<p>As jonrsharpe said, you can't really use a magic (double underscored) method for this.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a bad idea. <code>__repr__</code> should always return a str because it gets used by lots of internals (like you see here in <code>print</code>). For info read on: <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow">https://docs.python.org/3/reference/datamodel.html#object.<strong>repr</strong></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an idea just for fun. I am using the <strong>call</strong> for returning a non-string output. In the example below, a tuple.</p>
<pre><code>class MyClass:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __add__(self, other):
        new_x = self.x + other.x
        new_y = self.y + other.y
        return MyClass(new_x, new_y)
    def __repr__(self):
        return "({},{})".format(self.x, self.y)
    def __call__(self):
        return (self.x, self.y)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; m1 = MyClass(10, 20)
&gt;&gt;&gt; m1
(10,20)
&gt;&gt;&gt; m1()
(10, 20)
&gt;&gt;&gt; type(m1())
&lt;type 'tuple'&gt;
</code></pre>
</div>
<span class="comment-copy">You can do <code>mylist = []</code> and then <code>mylist.append(self.message)</code></span>
<span class="comment-copy"><code>__repr__</code> and <code>__str__</code> are supposed to return strings. What are you trying to do that requires you to return something other than a string from <code>__repr__</code>?</span>
<span class="comment-copy">That's what I wanted to ask, how do I write that custom getter function ?</span>
<span class="comment-copy">See my edited answer</span>
<span class="comment-copy">Please see my edited question.</span>
<span class="comment-copy">@user3787291 You cannot create an instance of that class, since the <b>repr</b> magic method does not return a string. Maybe I did not understand your question?</span>
<span class="comment-copy">I am aware that <code>__repr__</code> should return string only. So, is there an alternative of <code>__repr__</code> which can return list ?</span>
<span class="comment-copy">@user3787291 you can write <b>literally any method you like</b> and make it return a list, but if you're using <code>__magicmethods__</code> stick to the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">documented interfaces</a>. As there aren't that many cases where you'd want any arbitrary class to become a list, there's no <code>__list__</code> method. If you want <code>A</code> to <i>"quack like"</i> a list, see <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow noreferrer"><code>Sequence</code></a>.</span>
