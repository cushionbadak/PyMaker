<div class="post-text" itemprop="text">
<p>I am trying to read a file with lines that look like this:</p>
<pre><code>1A11:A,GSEKMSTAISVLLAQAVFLLLTSQR,0.724,0,0,1,0,0,1.000,225.000,0.004,0.915
</code></pre>
<p>With this code:</p>
<pre><code>for line in datafile:
    line = line.split(',')
    for element in line:
        line[count] = eval(element)
</code></pre>
<p>And I get the following error: </p>
<pre><code>    "/Users/Auyer/CODING/PycharmProjects/INSERTGenerator/InsertGen.py", line 10, in fileSplitter
line[count] = eval(element)
File "&lt;string&gt;", line 1
1A11:A
   ^
SyntaxError: invalid syntax
</code></pre>
<p>The program works perfectly when it evaluates a number, but won't work when it does with a Punctuated String.</p>
<p>EDIT 1: The desired output was to have the numeric strings stored as numbers, and the strings as strings.
Example: the list 'Line' would now look like this:</p>
<pre><code>['1AFP:A', 'KYKKDNIKQSGKICKYVKKPRDAKFSYKGKYC', -1.494, 0, 1, 0, 0, 0, 9.000, 105.000, 0.021, 0.242]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I mentioned in my comment above, using <code>eval()</code> is a pretty awful idea, and lots of people much smarter and more experienced than me agree, so I go with it, and you should too.</p>
<p>First, we are assuming that each line has the same structure and the same number of elements with the same transformation requirements (string, int, float). How much work you put into parsing these lines depends on what you need to do with the results. If you don't mind values like <code>0</code> and <code>1</code> being floats, the parsing is easy:</p>
<pre><code>for line in inputfile:
    data = line.split(",") # make list
    newdata = data[0:2] + [float(item) for item in data[2:]] 
    # pull in 1st two elements, which are strings
    # then call float() on the rest of them, and add them to new list
</code></pre>
<p>You are now free to use <code>newdata</code> as you wish.</p>
<p>If the <code>0, 0, 1, 0, 0</code> values in the middle of the list need to remain integers, the parsing takes two more lines, but is still straightforward:</p>
<pre><code>for line in inputfile:
    data = line.split(",")
    newdata = data[0:2] + [float(data[2])]
    newdata += [int(item) for item in data[3:8]]
    newdata += [float(item) for item in data[8:]]
</code></pre>
<p>Here we're using list comprehensions to tackle slices of the <code>data</code> list - add the first two strings, then call <code>float()</code> on the 3rd item, then call <code>int()</code> on the 4th through 7th, then <code>float()</code> again on the rest.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>eval(string)</code> evaluates an expression. So the string that you pass in has to evaluate to a value. When Python tries to evaluate <code>1A11:A</code> it hits an error as expected. To both Python and human readers that string looks like junk. An acceptable input string would be something like <code>x+1</code> where <code>x</code> is already defined previously in the script.</p>
<p>An example using <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow">eval</a>:</p>
<pre><code>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; eval('x + 1')
2 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>eval()</code> returns the evaluated result of whatever string is passed to it.</p>
<p>In your case "1A11:A" can't be evaluated to a values. Even if you remove that element what about the second element is it a variable? else that also would return an error.</p>
</div>
<div class="post-text" itemprop="text">
<p>I used eval in a unit test program. I wanted to pass a tuple (96,6,6,x) to an object. When x was set equal to '\"'+'9:30'+'\"', the equivalent to a hard-coded (96,6,6,"9:30"), it would never pass that value through. But without changing anything else, passing (96,6,6,(eval x)) worked. All I'm trying to do is run my unit test to exercise the object that will actually be used in a production program. I didn't want to spend a long time figuring out why the unit test itself was broken, although the object is working fine for its actual real-world scenario. And so is the unit test, if I code it that way.</p>
<p>I think if you consider eval as a "rhs" tool, you will have no problem. Meaning, you cannot write eval("x=7") and expect eval to create the variable x and set it to 7. Any characters like that '=' could stray outside what it can do.</p>
<p>P.S. To other newbies. Think before you post on Stack Overflow. Check what eval is supposed to do before you think you are stumped. In this case, a quick
direct python interpreter session, i.e.:</p>
<blockquote>
<blockquote>
<blockquote>
<p>eval("1A11:A")
      Traceback (most recent call last):
        File "", line 1, in 
        File "", line 1
          1A11:A
             ^
      SyntaxError: invalid syntax</p>
</blockquote>
</blockquote>
</blockquote>
</div>
<span class="comment-copy">What are you trying to do? What is the desired output? Where is <code>count</code> variable coming from?</span>
<span class="comment-copy">Why are you using <code>eval()</code>? What are you trying to do?</span>
<span class="comment-copy">Before you go on coding, <b><i>STOP AND <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">READ THIS</a></i></b>. There is almost <b>never</b> a good time to use <code>eval()</code>. There are much safer alternatives available, like <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a>.</span>
<span class="comment-copy">Desired Output added to the question. Thanks</span>
<span class="comment-copy">This is really good, but I want to be able to read other files as well, with different structures. Like [String, float, string, string, int]. Thats why I wanted the program to find out what data type it was looking at.</span>
<span class="comment-copy">@RafaelAuyer You can't do that. Python can't take an arbitrary string and automatically determine what type it should be cast to, if any. <code>"1"</code> is a perfect example - in your case, it could be cast to int or float successfully. Without a structure, a program can't just guess and know which one is required for this particular circumstance. You need additional logic someplace.</span>
<span class="comment-copy">Also remember you can use try: except: blocks if the data are in a sane domain. If it's numbers with the occasional 1A11:A, you can handle the exception. Be rigorous and put the exact exception type, and check if it's always in the first delimited group of characters on the line, etc.</span>
