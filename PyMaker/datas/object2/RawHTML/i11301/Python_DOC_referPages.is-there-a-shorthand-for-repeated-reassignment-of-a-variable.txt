<div class="post-text" itemprop="text">
<p>Consider the example:</p>
<pre><code>x = 27
x = sqr(x)
x += 2
x = x * 0.1
</code></pre>
<p>This could trivially be reduced to</p>
<pre><code>x = 0.1 * (sqr(27) + 2)
</code></pre>
<p>Now, consider (x as an OrderedDict)</p>
<pre><code>x = {k: bubble_sort(v) for k, v in x.items()}

x = {k: rename(k) for k, v in x.items()}

x = {k: abs(k) for k, v in x.items()}
</code></pre>
<p>Is there a shorthand trick to avoid repeating the variable assignment? For example, is there a function such that:</p>
<pre><code>def pipeline(x, function_handles):
    ....
    for f in function_handles:
        x.apply(f) #in place
return x
</code></pre>
<p>or</p>
<pre><code>def pipeline(x, expression):
    ....
    for ex in expression:
        ex(x) #in place
return x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the <code>operator</code> module there is the <a href="https://docs.python.org/3/library/operator.html#operator.methodcaller" rel="nofollow"><code>operator.methodcaller</code></a> function. It works like <code>itemgetter</code>, which is the one you are most likely to have already seen: given a <em>name,</em> the return value of <code>methodcaller</code> is partial function that calls the named method of its argument.</p>
<p>That is, given:</p>
<pre><code>x = SomeObjectType()
f = operator.methodcaller('amethod', 'arg1', arg2=100)
f(x)
</code></pre>
<p>Is the same as saying:</p>
<pre><code>x = SomeObjectType()
x.amethod('arg1', arg2=100)
</code></pre>
<p>You could use this along with simple <code>lambda</code> expressions and/or <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a> or <code>partial_method</code> to construct a list of functions/methods to be applied. Then, as @cricket_007 suggested, you could use or write code to automatically apply them.</p>
<p>Also of note is <code>functools.reduce</code>. You can write or construct a caller function, and then use <code>reduce</code> to supply it with a list of functions to call.</p>
<p>Here's some code to reduce a list of functions against a list of data (py3, but works in 2.7):</p>
<pre><code>#!python3
import functools
import itertools
import operator

data = [8, 6, 7, 5, 3, 0, 9]

def apply(val, fn):
    print("F=",fn, "val=",val)
    return fn(val)


from functools import reduce

fns = [sorted,
        max,
        str,
    ]

print(reduce(apply, fns, data))
</code></pre>
</div>
<span class="comment-copy"><code>map(func, iterable)</code>?</span>
<span class="comment-copy">The most working stuff I can think of is the tuple assignment, but I have no guarantee that you can do stuff like <code>x, x, x = e, f(x), g(x)</code>, being <code>e</code> an expression, and <code>f</code> and <code>g</code> arbitrary functions.</span>
<span class="comment-copy">Did you mean for <code>my_ordered_dict.items()</code> to be replaced by <code>x.items()</code> in the dictionary paragraph?</span>
<span class="comment-copy">Is it really the <i>variable assignment</i> that you're worried about repeating in the second example? Not the 3 highly-repetitive dict comprehensions?</span>
<span class="comment-copy">@cricket_007 Great!</span>
