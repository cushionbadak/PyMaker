<div class="post-text" itemprop="text">
<p>How can I redefine the syntax level <code>lambda</code> operator in python?</p>
<p>For example, I want to be able to do this:</p>
<pre><code>位 = lambda
squared = 位 x: x*x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As some other users have noted, <code>lambda</code> is a reserved keyword in Python, and so cannot be aliased or overridden in the same way that you would a function or variable without changing the grammar of the Python language. However, you can define a function which itself defines and returns a new lambda function from a string expression using the <code>exec</code> keyword. This changes the styling somewhat, but the top level behavior is similar. </p>
<p>That is:</p>
<pre><code>def 位(expression):

    local_dictionary = locals()

    exec("new_lambda = lambda %s" % (expression), globals(), local_dictionary)

    return local_dictionary["new_lambda"]

# Returns the square of x.
y = 位("x : x ** 2") 

# Prints 2 ^ 2 = 4.
print(y(2)) 
</code></pre>
<p>Which is comparable to:</p>
<pre><code># Returns the square of x.
y = lambda x : x ** 2 

# Prints 2 ^ 2 = 4.
print(y(2)) 
</code></pre>
</div>
<span class="comment-copy">I want to make a mathematical looking python just for aesthetical reasons. I like this Vim plugin: <a href="https://github.com/ehamberg/vim-cute-python" rel="nofollow noreferrer">github.com/ehamberg/vim-cute-python</a>, but wanted to see if I could take it further.</span>
<span class="comment-copy">You can do this in your text-editor, but not in Python itself because it is a keyword.</span>
<span class="comment-copy">If you are using emacs, you can use <code>pretty-lambda-mode</code></span>
<span class="comment-copy">As mentioned earlier, I already use a Vim plugin which superficially changes this. I want to change the language itself though.</span>
<span class="comment-copy">@therealtypon Change the basic grammar as per the instructions given here: <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">docs.python.org/3/reference/grammar.html</a> For example currently it's possible to assign keywords like True, False, None in Python 3.</span>
