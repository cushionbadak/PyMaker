<div class="post-text" itemprop="text">
<p>I want to change all values in dictionary to different ones.
For example, in a dictionary</p>
<pre><code>dic = {'a': 1, 'b':2, 'c':3, 'd':4, 'e': 5, 'f':6}
lst = [100, 200, 300, 400, 500, 600]
</code></pre>
<p>I want to change <code>dic</code>'s values to numbers in <code>lst</code> like
<code>dic = {'a': 100 ,'b': 200  ... }</code>.</p>
<p>Is there any way to change all the values without using the name of the keys? The length of my actual dictionary is about 100.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to multiply each number in the <code>dict</code> by 100, you could iterate through all the values at once by using a <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow">dict comprehension</a>.</p>
<pre><code>dic = {'a': 1, 'b':2, 'c':3, 'd':4, 'e': 5, 'f':6}
dic = {k: v*100 for k, v in dic.items()}
</code></pre>
<p>If you want the numbers of the list specifically to be assigned to letters in the alphabet (in the same order), <a href="https://docs.python.org/3.5/library/functions.html#zip" rel="nofollow">you can zip your list with small caps letters</a>, and use this <code>list</code> to build your <code>dict</code>:</p>
<pre><code>from string import ascii_lowercase

# you can do this with a dict comprehension
dic = {k: v for (k, v) in zip(ascii_lowercase, lst)}

# or equivalently, call the dict() built-in function
dic = dict(zip(ascii_lowercase, lst))
</code></pre>
<p>In this last example, the order of your list will be reflected by the order of the alphabet's letters. So that <code>a</code> will be <code>100</code>, <code>b</code> will be <code>200</code>, etc.</p>
<p>But you can't make a <code>dict</code> remember it's "order". There's no order in a <code>dict</code>, you can just pick the values and set them individually, not iterate through them with a guaranteed order (as stated in another answer, you'd need OrderedDict for that).</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: No, dictionaries are not ordered in python, so there's no easy way to match up values. </p>
<p>Longer answer: Sort of, you can used Ordered Dictionaries. </p>
<pre><code>dic={'a': 1, 'b':2, 'c':3, 'd':4, 'e': 5, 'f':6}
o_dic = OrderedDict(sorted(dic.items(), key=lambda t: t[0]))
lst=[100,200,300,400,500,600]

for index, key in enumerate(o_dic.keys()):
    o_dic[key] = lst[index]
</code></pre>
</div>
<span class="comment-copy">Since dictionaries don't have an order, how do you want to connect "b" with 200?  Would you be okay with the keys in sorted order, or do you not care about the assignment order at all?  (E.g. you'd be okay with <code>{"b": 100, "a": 200}</code>.)</span>
<span class="comment-copy">I want to keep in order. in my actual work, 'a' means the 1st, 'b' means the 2nd and etc.</span>
<span class="comment-copy">Dictionaries don't have an order to maintain.  That won't be a problem if you want to perform an operation on the values independent of the order (which doesn't exist), like multiplying them by 100, but it will be a problem if you have a separate list you've built.</span>
<span class="comment-copy">You need to use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> for there to be any order to begin with!</span>
<span class="comment-copy">Thank you very much for your answer!!!! But in my original work, the values are not 100,200,300,400,500,600... actually they are 23.554, 35.124, 35.222 like those. No pattern. Think it's my mistake posting a question</span>
<span class="comment-copy">@SunwooLim That's really the problem here as alluded to in the previous comments.  Dicts do not maintain order, so it really works only if the function is constant across all values.  Otherwise you're going to get different results each time you run it.</span>
<span class="comment-copy">@Chris <code>dic = {k: v for (k, v) in zip(ascii_lowercase, lst)}</code> gives the same results each time - only they're displayed in a different order, but <code>dic['a']</code> will always be equal to <code>100</code> (in the OP's example)</span>
<span class="comment-copy">@SunwooLim indeed I misunderstood your question. See my edit.</span>
<span class="comment-copy">No need for the dictcomp there: <code>dict(zip(ascii_lowercase, lst))</code> works too.  I might use <code>dict(zip(sorted(dic), lst))</code> instead, which at least gives a consistent result, but unless the OP specifies exactly what order he's imagining we're only guessing.</span>
