<div class="post-text" itemprop="text">
<p>Why in the methods <code>len( )</code>, the placement of variables different from the others, for example the<code>upper( )</code></p>
<pre><code># with len()
len(variable_name)

# with upper()
variable_name.upper()
</code></pre>
<p>Things may be trivial , it makes me uncomfortable if do not know it ... thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>variable_name.upper()</code> is calling a method of the <code>variable_name</code> class or an inherited class.</p>
<p><code>len(variable_name)</code> is calling Python's built-in <code>len</code> function on a <code>variable_name</code> object for which the <code>len</code> function determines the length depending on the type of object, be it a <code>str</code> or <code>list</code> for example.</p>
<p>So the placement of the <code>variable_name</code> tells you if you are calling a class attribute (<code>variable_name</code> in front) OR you are passing a variable into a method which is not an attribute of the <code>variable_name</code> class (<code>variable_name</code> in the brackets).</p>
</div>
<span class="comment-copy"><code>len</code> is a Python <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">"built-in <i>function</i>"</a> that is a general operation that works for sequences; strings can be thought of a sequence of characters. There are only a few such built-in functions, selected largely due to their general usefulness. <code>str.upper</code> is a string-specific <i>method</i>; as is <a href="http://stackoverflow.com/questions/237128/is-there-a-reason-python-strings-dont-have-a-string-length-method"><code>str.__len__</code> which implements the "__len__ protocol" required for <code>len</code></a>.</span>
