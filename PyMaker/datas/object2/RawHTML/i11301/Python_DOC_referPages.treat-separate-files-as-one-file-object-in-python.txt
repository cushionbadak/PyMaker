<div class="post-text" itemprop="text">
<p>I have a splitted file (lets say name.a0, name.a1, name.a2, ...)</p>
<p>Is there a way to have one readable file-like object, that will be a concatenation of those, without using a temporary file and without loading them all to the memory?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow">fileinput</a> module in the python standard library is used for exactly this purpose.</p>
<pre><code>import fileinput
with fileinput.input(files=('name.a0', 'name.a1', 'name.a2')) as f:
    for line in f:
        process(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can always create a proxy object that treats a series of files as one. You need to implement just enough of the <a href="https://docs.python.org/2/library/stdtypes.html#file-objects" rel="nofollow">file object interface</a> to satisfy your program's needs.</p>
<p>For example, if all you do is iterate over the lines in all these files, the following object would suffice for Python 2:</p>
<pre><code>class MultiFile(object):
    def __init__(self, *filenames, mode='r'):
        self._filenames = reversed(filenames) # reversed iterable
        self._mode = mode
        sef._openfile = open(next(self._filenames), self._mode)

    def __enter__(self):
        return self

    def __exit__(self, *exception_info):
        self._openfile.close()

    __del__ = __exit__

    def __iter__(self):
        return self

    def __next__(self):
        try:
            return next(self._openfile)
        except StopIteration:
            # find next file to yield from, raises StopIteration
            # when self._filenames has run out
            while True:
                self._opefile.close()
                self._openfile = next(self._filenames)
                try:
                    return next(self._openfile, self._mode)
                except StopIteration:
                    continue
</code></pre>
<p>This lets you read through a <em>series</em> of files as if it was one, reading lines as you go (so never everything into memory):</p>
<pre><code>import glob

for line in MultiFile(glob.glob('name.a?')):
    # ...
</code></pre>
<p>Note that in Python 3 (or when using he <a href="https://docs.python.org/2/library/io.html" rel="nofollow"><code>io</code> library</a> in Python 2) you'll need to implement one of the appropriate <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow">base classes</a> for the file mode (raw, buffered or text).</p>
</div>
<span class="comment-copy">What do you intend to do if the underlying files are modified (and particularly if they change size)?  If for example you're halfway through <code>name.a1</code> and <code>name.a0</code> gets bigger, should the object automagically adjust its offset to ensure you are still halfway  through <code>name.a1</code>?</span>
<span class="comment-copy">I don't care. they will not change in my case</span>
<span class="comment-copy">Ick, how could I forget about <code>fileinput</code>. That module essentially creates a proxy like I describe in my answer.</span>
<span class="comment-copy">It looks great, but there is one problem. My files are binary files and not text files, and it seems fileinput implements only reading lines, and not all of the functions of a file</span>
<span class="comment-copy">Using <code>mode='br'</code> doesn't work?</span>
<span class="comment-copy">Also, if this wasn't what you wanted then the question was under-qualified and did not provide enough information to give you the answer you wanted, since both myself and @MartijnPieters answered the question for how to read line-by line.</span>
<span class="comment-copy">Thank you for your answer. I know I can implement something like this myself, but I was looking for a built-in implementation.</span>
<span class="comment-copy">@BugaleBugalit: as you note, <code>fileinput</code> only handles iteration (successive <code>file.readline()</code> calls). If you need reading binary files with <code>file.read()</code> calls there is no implementation in the standard library.</span>
