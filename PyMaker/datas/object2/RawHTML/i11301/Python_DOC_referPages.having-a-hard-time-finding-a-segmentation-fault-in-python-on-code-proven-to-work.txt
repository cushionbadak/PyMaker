<div class="post-text" itemprop="text">
<p>Edit: literally as soon as I posted it I found a way for it to work on my this PC. I had to do all my calculations individually like this:</p>
<pre><code>    self.vel.x += self.acc.x
    self.pos.x += self.vel.x + (0.5 * self.acc.x)

    self.vel.y += ........
</code></pre>
<p>keeping the question up in case someone else has the same issue of functioning on other PC's but throwing errors.</p>
<hr/>
<p>I've run into an issue. I've been working on a small personal project and so far my code is running on other computers; however not on this one. Basically I'm trying my hand a small (very basic) platormer game and I can get my character to move; however, once I add in vectors for more realistic movement I get these this error:</p>
<pre><code>Fatal Python error: (pygame parachute) Segmentation Fault

This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.
</code></pre>
<p>Here's my code:</p>
<p>PROBLEM FILE(?)</p>
<pre><code># contains sprites
import pygame as pg
from settings import *
vec = pg.math.Vector2

class Player(pg.sprite.Sprite):
    def __init__(self):
        pg.sprite.Sprite.__init__(self)
        # create a sprite
        self.image = pg.Surface((30,40))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH / 2, HEIGHT / 2)
        self.pos = vec(WIDTH / 2, HEIGHT / 2)
        self.vel = vec(0, 0)
        self.acc = vec(0, 0)

    def update(self):
        self.acc = vec(0, 0)
        keys = pg.key.get_pressed()
        if keys[pg.K_LEFT]:
            self.acc.x = -0.5 # Move the character left
        if keys[pg.K_RIGHT]:
            self.acc.x = 0.5 # Move character right

        self.vel += self.acc
        self.pos += self.vel + (0.5 * self.acc)

        self.rect.center = self.pos
</code></pre>
<p>Here's the Settings</p>
<pre><code># Game Options
WIDTH = 800
HEIGHT = 600
FPS = 60

# Colors
WHITE = (255,255,255)
BLACK = (0,0,0)
RED = (255,0,0)
BLUE = (0,255,0)
GREEN = (0,0,255)
SKY = (102,178,255)
LEAF_GREEN = (0, 153, 0)
</code></pre>
<p>And here's the main file:</p>
<pre><code>import pygame as pg
import random
from settings import *
from sprites import *


class Game:
    def __init__(self):
        # Initialize the the game window, etc
        pg.init()
        pg.mixer.init()
        self.screen = pg.display.set_mode((WIDTH, HEIGHT))
        pg.display.set_caption("Platformer Pygame")
        self.clock = pg.time.Clock()
        self.running = True

    def new(self):
        # Resets game in case of loss
        self.all_sprites = pg.sprite.Group()
        self.player = Player()
        self.all_sprites.add(self.player)
        self.run()

    def run(self):
        # Runs the actual game
        self.playing = True

        while self.playing:
            self.clock.tick(FPS)
            self.events()
            self.update()
            self.draw()

    def update(self):
        # Updates the game
        self.all_sprites.update()

    def events(self):
        # Event handling
        for event in pg.event.get():
            if event.type == pg.QUIT:
                if self.playing:
                    self.playing = False
                self.running = False
            # movement


    def draw(self):
        # Rendering
        self.screen.fill(SKY)
        self.all_sprites.draw(self.screen)
        # flip display after rendering
        pg.display.flip()

    def show_start_screen(self):
        # Game spash/start screen
        pass

    def show_go_screen(self):
        # Game over/continue
        pass

g = Game()

g.show_start_screen()

while g.running:
    g.new()
    g.show_start_screen()

pg.quit()
</code></pre>
<p>Any help is greatly appreciated, I've just never encountered this spoecific error before and a lot of online digging hasn't really found an answer that works for my situation. If it matters I'm running on a computer with 16GB of Ram and 8 cores@4.5Ghz. Windows 10 x64</p>
</div>
<div class="post-text" itemprop="text">
<p>My guess would be that there's a reference to a Vector2 object that isn't being counted. The key is in how the <a href="https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements" rel="nofollow"><code>+=</code> augmented assignment</a> behaves; it isn't guaranteed to operate in-place (it only does if the object implements <a href="https://docs.python.org/3/reference/datamodel.html#object.__iadd__" rel="nofollow"><code>__iadd__</code></a>), meaning the sum vectors for <code>pos</code> and <code>vel</code> might be new ones. If the base type <code>pygame.sprite.Sprite</code> can do multithreaded access to them, for instance, the replacement might be done uncleanly. This would most likely be a bug in pygame, but it's the sort of thing that would explain the behaviour you described. This is the sort of hazard that can hide behind the simple statement <a href="http://www.pygame.org/docs/ref/sprite.html" rel="nofollow">"Sprites are not thread safe. So lock them yourself if using threads."</a> and I for one would have appreciated if that also had a hint of <em>how</em> to lock them. </p>
</div>
