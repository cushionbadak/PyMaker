<div class="post-text" itemprop="text">
<p>I attempted to include <code>try:</code> and <code>except:</code> in this program to catch text string exceptions, but unable to figure out how to implement. How can I include <code>try:</code> and <code>except:</code> for exception handling?</p>
<pre><code>#!/usr/bin/python2.7

h = float(raw_input('Enter Hours: '))
r = float(raw_input('Enter Rate: '))
if h &gt; 40 :
    p = h * r + (h - 40) * r * 0.5
else :
    p = h * r
print 'Pay:', p
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/python2.7

def calc_pay(h, r) :
    if h &lt;= 0 or r &lt;= 0 :
        return None
    elif h &gt; 40 :
        return (h * r + (h - 40) * r * 0.5)
    else :
        return (h * r)

try :
    h = float(raw_input('Enter Hours: '))
    r = float(raw_input('Enter Rate: '))
    p = calc_pay(h, r)
    print 'Pay:', p
except :
    print "Enter Numeric Data"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You just need to use a try except pair</p>
<pre><code>def num(s):
    try:
        return float(s)
    except :
        return None
h = num(raw_input('Enter Hours: '))
</code></pre>
<p>Now you need to ask for a valid response. for example.</p>
<pre><code>h = None
p = None
while (h is None):
    h = num(raw_input('Enter Hours: '))
while (p is None):
    p = num(raw_input('Enter Price: '))
</code></pre>
<p>This depends on how you want to handle the rest of the processing. Some might prefer to return a 0 if it is an invalid entry since 0 price or 0 hours would also be invalid so test for &gt; 0</p>
<pre><code>def num(s):
    try:
        return float(s)
    except :
        return 0.0
h = num(raw_input('Enter Hours: '))

h = 0.0
p = 0.0
while (h &lt;= 0.0):
    h = num(raw_input('Enter Hours: '))
while (p &lt;= 0.0):
    p = num(raw_input('Enter Price: '))
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">Error handling in python docs</a></span>
<span class="comment-copy">Since <code>raw_input</code> is where I would trigger an error message (for example, if I were to enter a text string at a prompt) the calculation function was not included within the <code>try</code> clause.</span>
<span class="comment-copy">Returning <code>None</code> just pushed the problem elsewhere.</span>
<span class="comment-copy">@Holloway The point is that after you return the None, you need to do a if test (or a while) to handle the error</span>
<span class="comment-copy">exactly. If you're going to do a check on the return value anyway, you might as well have handled the problem where it happened.</span>
<span class="comment-copy">@Holloway Yes but in this way, you do not need to repeat the try except pair for the price as well.</span>
<span class="comment-copy">You should use <code>is</code> when comparing to <code>None</code>.</span>
