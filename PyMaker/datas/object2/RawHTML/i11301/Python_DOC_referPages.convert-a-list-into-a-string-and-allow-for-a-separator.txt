<div class="post-text" itemprop="text">
<p>please be aware, im new to python:
i'm trying to create a defined function that can convert a list into a string, and allows me to put a separator in. The separator has to be ', '.
My current thought process is to add each item from a list to an empty string variable, and then I'm trying to make use of the range function to add a separator in. I'm only wanting to use str() and range().</p>
<pre><code>def list2Str(lisConv, sep = ', '):
    var = ''
    for i in lisConv:
        var = var + str(i)
        #test line
        print(var, "test line")
    var1 = int(var)
    for a in range(var1):
        print(str(var1)[a],  sep = ', ')

list1 = [2,0,1,6]        

result = list2Str(list1, ', ')
print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list=['asdf', '123', 'more items...']
print ', '.join([str(x) for x in list])
</code></pre>
<p>If you wanted to create your own function to convert you could do the following.</p>
<pre><code>def convert(list, sep):
    n_str = ''
    for index, I in enumerate(list): #enumerate(list) returns (current position, list[current position]) so if we need to know the current position we use enumerate
        if index != len(list)-1:
            n_str += str(i) + sep #we don't apply the seperator if we're at the end of the list
        else:
            n_str += str(i)
    return n_str
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First you need to convert the list of int to a list of string.</p>
<p>You can use list comprehension : <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">https://docs.python.org/3/tutorial/datastructures.html</a></p>
<pre><code>str_list = [str(x) for x in list1]
</code></pre>
<p>Then, join the list of string with the separator you want.</p>
<pre><code>sep = ', '
print(sep.join(str_list))
</code></pre>
<p>In a more concise way:</p>
<pre><code>print(', '.join([str(x) for x in [1, 2, 3]))
</code></pre>
<p>More information about join here: <a href="http://www.diveintopython.net/native_data_types/joining_lists.html" rel="nofollow">http://www.diveintopython.net/native_data_types/joining_lists.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If no string methods (like <code>join</code>) are allowed, <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow"><code>reduce</code></a> should offer the shortest solution:</p>
<pre><code>def list2Str(lisConv, sep = ', '):
    return reduce(lambda x, y: str(x) + sep + str(y), lisConv)

print(list2Str([2, 0, 1, 6], ', '))
# 2, 0, 1, 6
</code></pre>
</div>
<span class="comment-copy">what if the items in the list aren't strings?</span>
<span class="comment-copy">the list i'm looking to manipulate is not necessarily a string which is why i've included code to try and create a string, and then want to include the separator. FYI this is for homework, and we're not allowed to use string methods</span>
<span class="comment-copy">Ok. The post was already edited to include a function that converts a list to a string, separating each item in the list with a sep.</span>
<span class="comment-copy">that second explanation is more what i was looking for :) in regards to my code (for learning purposes) is it that the code is over the top and trying to do too much and wasn't kept simple?</span>
<span class="comment-copy">The reason I rewrote your function is because it was trying to do too much (i.e. your debugging statements and variables were cluttering the function) if you wanted to print the result you could <code>print(convert(list, ', '))</code></span>
<span class="comment-copy">Or even more concise: <code>sep.join(map(str, the_list))</code></span>
<span class="comment-copy">Yep, map function is great but i heard it is advised to use list comprehension instead =) <a href="http://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map" title="python list comprehension vs map">stackoverflow.com/questions/1247486/â€¦</a></span>
