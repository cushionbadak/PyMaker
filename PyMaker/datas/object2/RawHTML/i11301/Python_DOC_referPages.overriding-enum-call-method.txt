<div class="post-text" itemprop="text">
<p>I have an <code>Enum</code> like so:</p>
<pre><code>from enum import Enum

class Animal(Enum):

     cat = 'meow'
     dog = 'woof'
     never_heard_of = None

     def talk(self):
         print(self.value)
</code></pre>
<p>I would like to override the <code>__call__</code> method so that a call like          <code>Animal('hee-haw')</code> returns <code>Animals.never_heard_of</code> or <code>None</code> instead of raising <code>ValueError</code>. I would rather avoid a <code>try</code> statement everytime I call the <code>Animal</code>. </p>
<p>What would be a pure Python equivalent of <code>Enum.__call__</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update 2017-03-30</strong></p>
<p>With Python 3.6 (and <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum 2.0</code></a><sup>1</sup>) you can specify a <code>_missing_</code> method that will be called to give your class one last chance before raising <code>ValueError</code>.  So now you can do:</p>
<pre><code>    @classmethod
    def _missing_(cls, name):
        return cls.never_heard_of
</code></pre>
<hr/>
<p><em>Original Answer</em></p>
<p>To be clear: you want the <code>__call__</code> that is associated with <code>Animal()</code> which is actually on the metaclass (<code>EnumMeta</code> in <code>enum.py</code>).</p>
<p>This is a bag of worms you don't want to get in to, as it is very easy to break things.</p>
<p>See <a href="https://stackoverflow.com/a/24107853/208880">this answer</a> for more details, but the simple solution is to create a <code>get</code> method for your <code>Animal</code> enum:</p>
<pre><code>    @classmethod
    def get(cls, name):
        try:
            return cls[name]
        except KeyError:
            return cls.never_heard_of
</code></pre>
<p>and then <code>Animal.get('wolf')</code> will return <code>Animal.never_heard_of</code>.</p>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<span class="comment-copy">Why don't you just use e.g. <code>dict(cat='meow', dog='woof').get(whatever)</code>? This seems like a weird use of an enumerator.</span>
<span class="comment-copy">@jonrsharpe: I was after an immutable set of constants. If a constant is not defined it returns None. I can have logic gates into my program to tell me about which spreadsheet software I will interact with.</span>
<span class="comment-copy">Please give some context, otherwise this is likely an <a href="http://meta.stackexchange.com/q/66377/248731">XY problem</a>.</span>
<span class="comment-copy">That sounds a bit like Pandora's box but without Hope at the end... Thanks for this useful piece of advice.</span>
