<div class="post-text" itemprop="text">
<p>How do I export the output of my code to it's own text file? When I run my code I get a large set of data from it.  How do I export this so that I can read all lines of data in it's own text file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can write file in python like</p>
<pre><code>with open("out.txt", "w") as f:
    f.write("OUTPUT")
</code></pre>
<p>Or you can use io redirection to redirect output to a file</p>
<pre><code>$ python code.py &gt; out.txt
</code></pre>
<hr/>
<ol>
<li><a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects">https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects</a></li>
<li><a href="https://en.wikipedia.org/wiki/Redirection_(computing)">https://en.wikipedia.org/wiki/Redirection_(computing)</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you will read the results in another application, you can use <a href="https://en.wikipedia.org/wiki/Redirection_(computing)" rel="nofollow">redirections</a>, usually something like this:</p>
<pre><code>./myprogram &gt;results.txt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to take a look at <a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow">file objects</a>, which would allow you to write all the data you want to a file.</p>
<p>For example :</p>
<pre><code>file = open('output.txt', 'w')
file.write('Here is some data')
file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do it is this:</p>
<pre><code>import csv

with open("name_of_file_to_be_created") as f:
    writer = csv.writer(f)
    for i in range(n):
        writer.writerow('stuff to write')
# writes a single line in each iteration, e.g. assuming you are computing something inside the loop
</code></pre>
<p>Another way to do this is:</p>
<pre><code>with open("name_of_file_to_be_created") as f:
    print("here you can type freely", file = f)
    # or
    f.write('whatever it is that you have to write')
</code></pre>
</div>
<span class="comment-copy">I would also tell about "a" mode. :D</span>
<span class="comment-copy">Doing the redirect (second method using '&gt;') is preferable. Then the invoker can choose what filename to use, whether to redirect to a file, pipe into another command, or send to /dev/null, etc.</span>
<span class="comment-copy">This is the simplest and most useful answer. Then the filename isn't hard-coded inside the Python file, so the invoker could choose to write to a different filename if they wanted, or to pipe into another command instead, etc. That is why writing to standard out and redirecting on the command-line is a common UNIX paradigm and should always be used by default - because it is the best solution.</span>
<span class="comment-copy">@JonathanHartley, well, for the writing results to output file within python application case, the name could be passed as a command line parameter</span>
<span class="comment-copy">It could be, but that isn't a common convention, because it isn't as useful. If you structure your programs that way, they cannot pipe their output into another process.</span>
<span class="comment-copy">Plus, users would have to learn the correct command line parameter to use for every different program they use - many of which will omit to implement this feature, or will implement it in erroneous or idiocyncratic ways. OR, you could just use the shell redirection to do it, which always works the same way, and works 100% of the time.</span>
<span class="comment-copy">redirecting on the command-line is a better - and simpler - solution.</span>
<span class="comment-copy">Indeed, but this assumes the program is called from command line, which is not mentioned in the question.</span>
<span class="comment-copy">Hmmm. Isn't everything just a wrapper around "calling on the command line"?</span>
<span class="comment-copy">redirecting on the command line is a better - and simpler - solution.</span>
