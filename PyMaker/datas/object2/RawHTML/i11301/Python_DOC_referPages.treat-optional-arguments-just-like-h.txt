<div class="post-text" itemprop="text">
<p>How can I tell <code>argparse</code> to treat optional arguments just like <code>-h</code>, <code>--help</code>?</p>
<p><strong>test.py</strong></p>
<pre><code>def test():
    print '## This is my test'

import argparse
parser = argparse.ArgumentParser(prog='test.py')
parser.add_argument('-t', '--test', action='store_true',
                    help='Should work just like "-h", "--help"')
parser.add_argument('req',
                    help='Otherwise required')

args = parser.parse_args()

if args.test:
    test()

if args.req:
    print '## Found "req"'
</code></pre>
<p><strong># python test.py -h</strong></p>
<pre><code>usage: test.py [-h] [-t] req

positional arguments:
  req         Otherwise required

optional arguments:
  -h, --help  show this help message and exit
  -t, --test  Should work just like "-h", "--help"
</code></pre>
<p><strong># python test.py -t</strong></p>
<pre><code>usage: test.py [-h] [-t] req
test.py: error: too few arguments
</code></pre>
<p><strong># python test.py -t test</strong></p>
<pre><code>## This is my test
## Found "req"
</code></pre>
<p><strong># python test.py test</strong></p>
<pre><code>## Found "req"
</code></pre>
<p>I want, that if <code>-t</code>, <code>--test</code> is specified, <code>argparse</code> stop here, just like it does with <code>-h</code>, <code>--help</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Exiting funcitonality of help is defined in <code>argparse._HelpAction</code> <code>__call__</code> method.</p>
<pre><code>class _HelpAction(Action):
    def __init__(self,
                 option_strings,
                 dest=SUPPRESS,
                 default=SUPPRESS,
                 help=None):
        super(_HelpAction, self).__init__(
            option_strings=option_strings,
            dest=dest,
            default=default,
            nargs=0,
            help=help)

    def __call__(self, parser, namespace, values, option_string=None):
        parser.print_help()
        parser.exit()  # it exists here
</code></pre>
<p>You either have to use <code>help</code> action:</p>
<pre><code>parser.add_argument('-t', '--test', action='help',
                    help='Should work just like "-h", "--help"')
</code></pre>
<p>Or create custom argparse action.</p>
<pre><code>class MyCustomAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        print("argument found, I should exit")
        self.exit()

parser.add_argument('-t', '--test', action= MyCustomAction,
                    help='Should work just like "-h", "--help"')
</code></pre>
<p>For details on creating a custom action you may refer to <a href="https://docs.python.org/3/library/argparse.html#action" rel="nofollow">docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The parameters of the last positional argument is not initialized correctly to achieve what you want.</p>
<pre><code>parser.add_argument('req', nargs='?', default="truc", help='Otherwise required')
</code></pre>
<p>Please have a look to Python documentation for further details. But basically, the <code>nargs='?'</code> provides the possibility to have optional positional arguments. But you need to provide a default value.</p>
<p><strong>#python test.py  -t</strong></p>
<pre><code>## This is my test
## Found "req"
</code></pre>
<p>Z.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simpler solution, define <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow">nargs</a>:</p>
<pre><code>parser.add_argument('req', nargs='?',
                    help='Otherwise required')
</code></pre>
<p><code>?</code> means 0 or more. </p>
<p>And then exit after runing your test:</p>
<pre><code>import sys

if args.test:
    test()
    sys.exit()
</code></pre>
<p>The complete code:</p>
<pre><code>import sys

def test():
    print '## This is my test'

import argparse
parser = argparse.ArgumentParser(prog='test.py')
parser.add_argument('-t', '--test', action='store_true',
                    help='Should work just like "-h", "--help"')
parser.add_argument('req', nargs='?',
                    help='Otherwise required')

args = parser.parse_args()

if args.test:
    test()
    sys.exit()

if args.req:
    print '## Found "req"'
</code></pre>
<p>This outputs:</p>
<pre><code>[8] oz123@laptop-oz:~ $ python bla.py -t
## This is my test
[9] oz123@laptop-oz:~ $ python bla.py -h
usage: test.py [-h] [-t] [req]

positional arguments:
  req         Otherwise required

optional arguments:
  -h, --help  show this help message and exit
  -t, --test  Should work just like "-h", "--help"
[10] oz123@laptop-oz:~ $ python bla.py bla
## Found "req"
</code></pre>
<h2>update, without sys.exit</h2>
<p>If you remove <code>sys.exit()</code>, then the output is like your wished behavior. </p>
<pre><code>[12] oz123@laptop-oz:~ $ python bla.py -t bla
## This is my test
## Found "req"
[13] oz123@laptop-oz:~ $ python bla.py -t 
## This is my test
</code></pre>
</div>
<span class="comment-copy">To clarify: it sounds like you don't want -t to work "just like -h" in that it prints a help message and exits. You want test.py to require a positional argument unless -t is passed. So <code>test.py</code> throws an exception, but <code>test.py foo</code> and <code>test.py -t</code> and <code>test.py -t foo</code> don't. Correct?</span>
<span class="comment-copy">What behavior of <code>-h</code> is important?  Printing help?  Exiting right a way?  Ignoring all other arguments?</span>
<span class="comment-copy">Yes, ignoring all other arguments, thus if <code>-t</code>, <code>--test</code> is specified, <code>argparse</code> should stop here, regardless if there were 1 or more positional/required arguments added to the <code>parser</code>.</span>
<span class="comment-copy">Cool solution, but why not use the official api?</span>
<span class="comment-copy">@Oz123 Action class is public, and custom action class is part of docs I've linked. So while <code>_HelpAction</code> is not a public API, creating custom ones is.</span>
<span class="comment-copy">I tried to avoid subclassing and writing nearly as much code as the whole program/script, just to support not too special treatment of the argument, though thank you for your opinion.</span>
<span class="comment-copy">If you are afraid to subclass to achieve special behaviors you are missing half the power of Python.</span>
<span class="comment-copy">The down side of this method is that required arguments now are listed in the square brackets - <code>[req]</code>. Though they still appear in the <code>positional arguments</code> list, which indicates that they are required...</span>
<span class="comment-copy">Anything is square brackets is indeed optional. You question specified <code>treat optional like -h</code>. So, This solution makes <code>req</code> indeed option, but also <code>-t</code>. As <code>-h</code> exists, I also added the exit. If this is not something you wish, just remove that line.</span>
