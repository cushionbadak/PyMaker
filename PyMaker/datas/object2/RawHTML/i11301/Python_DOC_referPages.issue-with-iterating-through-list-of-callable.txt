<div class="post-text" itemprop="text">
<p>I am having an issue with iterating over a list of callables in python. The callables are supposed to be called on a generator of strings. The current behaviour is that the last callable in the list is called as many times as there are callables in the list. My current code:</p>
<pre><code>for m in list_of_callables:
    strings = (m(s) for s in strings)
</code></pre>
<p>In the above code strings is initially of type 'Generator'. I have also tried the following:</p>
<pre><code>for i in range(len(list_of_callables)):
    strings = (list__of_callables[i](s) for s in strings)
</code></pre>
<p>This has not worked either, but when I don't loop over the callables and simply call them it works just fine:</p>
<pre><code>strings = (list_of_callables[0](s) for s in strings)
strings = (list_of_callables[1](s) for s in strings)
</code></pre>
<p>This seems strange to me as the above should be equivalent to the for loop.</p>
<p>Thanks in advance for your help and suggestions :).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>strings = (m(s) for s in strings)
</code></pre>
<p>This doesn't actually call your callable. It creates a generator expression that will call <code>m</code> later, <em>using whatever <code>m</code> happens to be later</em>.</p>
<p>After the loop, <code>m</code> is the final callable. When you try to retrieve an element from <code>strings</code>, all those nested genexps look up <code>m</code> to compute a value, and they all find the last callable.</p>
<p>You could fix this by using <code>itertools.imap</code> instead of a genexp:</p>
<pre><code>strings = itertools.imap(m, strings)
</code></pre>
</div>
<span class="comment-copy">This sounds like an episode of <a href="http://docs.python-guide.org/en/latest/writing/gotchas/#late-binding-closures" rel="nofollow noreferrer">late binding closures</a></span>
<span class="comment-copy">do you know what <code>generator</code> means? I think you want to use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> instead of a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>.</span>
<span class="comment-copy">What is the expected behavior here? I'm confused by your reuse of the  indentifier <code>strings</code> both inside and outside the generator. That makes it very hard to understand the reasoning behind your code.</span>
<span class="comment-copy">@Two-BitAlchemist Yup, it sure was. Thank you for your help :).</span>
<span class="comment-copy">@HÃ¥kenLid The expected behaviour was to modify the strings by using the callback functions (ie. append stuff to them, etc.).</span>
<span class="comment-copy">Thanks so much for your help :)</span>
