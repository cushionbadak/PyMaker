<div class="post-text" itemprop="text">
<p>I want to use generator yield and async functions. I read <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">this topic</a>, and wrote next code:</p>
<pre><code>import asyncio

async def createGenerator():
    mylist = range(3)
    for i in mylist:
        await asyncio.sleep(1)
        yield i*i

async def start():
    mygenerator = await createGenerator()
    for i in mygenerator:
        print(i)

loop = asyncio.get_event_loop()

try:
    loop.run_until_complete(start())

except KeyboardInterrupt:
    loop.stop()
    pass
</code></pre>
<p>But i got the error: </p>
<p>SyntaxError: 'yield' inside async function</p>
<p>How to use yield generator in async function?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Upd:</strong></p>
<p>Starting with Python 3.6 we have <a href="https://www.python.org/dev/peps/pep-0525/" rel="nofollow noreferrer">asynchronous generators</a> and able to use <code>yield</code> directly inside coroutines.</p>
<pre><code>import asyncio


async def async_generator():
    for i in range(3):
        await asyncio.sleep(1)
        yield i*i


async def main():
    async for i in async_generator():
        print(i)


loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(main())
finally:
    loop.run_until_complete(loop.shutdown_asyncgens())  # see: https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.shutdown_asyncgens
    loop.close()
</code></pre>
<p><strong>Old answer for Python 3.5:</strong></p>
<p>You can't <code>yield</code> inside coroutines. Only way is to implement <a href="https://www.python.org/dev/peps/pep-0492/#asynchronous-iterators-and-async-for" rel="nofollow noreferrer">Asynchronous Iterator</a> manually using <code>__aiter__</code>/<code>__anext__</code> magic methods. In your case:</p>
<pre><code>import asyncio


class async_generator:
    def __init__(self, stop):
        self.i = 0
        self.stop = stop

    async def __aiter__(self):
        return self

    async def __anext__(self):
        i = self.i
        self.i += 1
        if self.i &lt;= self.stop:
            await asyncio.sleep(1)
            return i * i
        else:
            raise StopAsyncIteration


async def main():
    async for i in async_generator(3):
        print(i)


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
</code></pre>
<p>Output:</p>
<pre><code>0
1
4
</code></pre>
<p>Here're two more examples: <a href="https://stackoverflow.com/a/36094436/1113207">1</a>, <a href="https://stackoverflow.com/a/37286577/1113207">2</a></p>
</div>
<div class="post-text" itemprop="text">
<p>New Python 3.6 comes with support for asynchronous generators.</p>
<p><a href="https://www.python.org/dev/peps/pep-0525/" rel="noreferrer">PEP 0525</a></p>
<p><a href="https://docs.python.org/3.6/whatsnew/3.6.html" rel="noreferrer">What's new in Python 3.6</a></p>
<p>PS: On the moment of writing Python 3.6 is still beta. If you are on GNU/Linux or OS X and you cannot wait you can try new Python with <a href="https://github.com/yyuu/pyenv" rel="noreferrer">pyenv</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work with python 3.6 (tested with 3.6.0b1):</p>
<pre><code>import asyncio

async def createGenerator():
    mylist = range(3)
    for i in mylist:
        await asyncio.sleep(1)
        yield i*i

async def start():
    async for i in createGenerator():
        print(i)

loop = asyncio.get_event_loop()

try:
    loop.run_until_complete(start())

except KeyboardInterrupt:
    loop.stop()
    pass
</code></pre>
</div>
<span class="comment-copy">Is that possible? It seems like two opposing designs. Generators are made not to produce value unless needed, it means they in principle need to handle having a <i>state</i>. <code>async</code> on the other hand would suggest that the called function cannot depend on it state. Otherwise you will have data races. It seems really cumbersome to support async generators, they would need to be wrapped with locking mechanisms. So probably answer to your question is somewhere in this direction.</span>
<span class="comment-copy">can you return a Future object and then yield that object when you want it's data.   I've never used asyncio, but that's how it's done with Tornado.</span>
<span class="comment-copy">I don't think that an asyncrounus generator makes any sense. You should be able to return a generator from an async function. Is there something you want to achieve or are you just trying things out?</span>
<span class="comment-copy">May be use Event? createGenerator will be set event, and start will be wait event. I wrote <a href="http://pastebin.com/raw/087Ai2Lw" rel="nofollow noreferrer">this solution</a>. It's work, but i want more nice code.</span>
<span class="comment-copy">@Ильдар did you see second answer? What you think about it? Looks like it works.</span>
<span class="comment-copy">Based on your Python 3.6 code I made an example for using <code>matlibplot</code> for if anyone is interested: <a href="https://stackoverflow.com/questions/44163601/asyncio-matplotlib-show-still-freezes-program/44175558#44175558" title="asyncio matplotlib show still freezes program">stackoverflow.com/questions/44163601/…</a></span>
<span class="comment-copy">Still waiting for this in C# :(</span>
