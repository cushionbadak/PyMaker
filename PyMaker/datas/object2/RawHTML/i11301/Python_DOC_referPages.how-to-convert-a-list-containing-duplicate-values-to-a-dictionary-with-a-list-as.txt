<div class="post-text" itemprop="text">
<p>Let's say I have two lists generated by another function:</p>
<pre><code>test = [[0, 1], [0, 2], [1, 5], [1,6], [2, 0], [3, 99], [3, 89], [3, 79]]
test2 = [[1, 4], [4, 1]]
</code></pre>
<p>I want to convert them to associative arrays for quick lookup like so:</p>
<pre><code>test: {0: [1, 2], 1: [5,6], 2: [0], 3: [99, 98, 97]}
test2: {1: [4], 4: [1]}
</code></pre>
<p>I can do it like this:</p>
<pre><code>def list_to_dict(my_list):
    last_val = my_list[0][0]
    temp = []
    my_dict = {}

    for i in my_list:
        if last_val == i[0]:
            temp.append(i[1])
        else:
            #add the values to this key
            my_dict[last_val] = temp
            #reset the list
            temp = []
            temp.append(i[1])

        last_val = i[0]
    my_dict[last_val] = temp
    return my_dict
</code></pre>
<p>But, that isn't very Pythonic.  Is there a more Pythonic way to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict"><code>collections.defaultdict</code></a>:</p>
<pre><code>&gt;&gt;&gt; test = [[0, 1], [0, 2], [1, 5], [1,6], [2, 0], [3, 99], [3, 89], [3, 79]]
&gt;&gt;&gt; 
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; 
&gt;&gt;&gt; for i, j in test:
...     d[i].append(j)
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {0: [1, 2], 1: [5, 6], 2: [0], 3: [99, 89, 79]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also do this by dictionary grouping, something like this:</p>
<pre><code>    def list_to_dict(my_list):
        d = {}

        for pair in my_list:
            first = pair[0]
            second = pair[1]
            if first not in d:
                d[first] = []
            d[first].append(second)
        return d
</code></pre>
<p>Or you could use setdefault(), if the key is not available:</p>
<pre><code>    def list_to_dict(my_list):
        d = {}
        for pair in my_list:
            d.setdefault(pair[0], []).append(pair[1])
        return d

    # Output 

    {0: [1, 2], 1: [5, 6], 2: [0], 3: [99, 89, 79]}
</code></pre>
<p>These can easily be manipulated to use defaultdict to if you want to.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems like a perfect use case for <code>itertools.groupby</code>:</p>
<pre><code>test = [[0, 1], [0, 2], [1, 5], [1,6], [2, 0], [3, 99], [3, 89], [3, 79]]

import itertools
d = {k:[t[1] for t in g] for k,g in itertools.groupby(test, key=lambda t: t[0])}

print(d)
</code></pre>
<p>Note that <code>groupby</code> works on iterables, and that it returns a <code>grouper</code> object by default. Results are:</p>
<pre><code>{0: [1, 2], 1: [5, 6], 2: [0], 3: [99, 89, 79]}
</code></pre>
</div>
