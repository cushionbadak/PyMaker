<div class="post-text" itemprop="text">
<p>Per default, Python's <a href="https://docs.python.org/2/library/httplib.html" rel="nofollow">httplib</a>.HTTPSConnection is using the system's trust store to validate a HTTPS certificate. (How) is it possible to set a different CA list to do the validation, replacing the default one?</p>
<p>I tried to set the <a href="https://docs.python.org/2.7/library/ssl.html#ssl-contexts" rel="nofollow">SSLContext</a> used by httplib (see below), but this only adds the certs from the given file; it does not stop the validator from loading more certs from the system's store if needed.</p>
<pre><code>c = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
c.load_verify_locations(cafile='mozillacerts.pem', capath=None)

conn = httplib.HTTPSConnection(domain, port, context=c)
</code></pre>
<p>To be clear: I want the validation to fail if it is not possible to validate the trust path with the certs in the given file.</p>
<p>(I am using Python 2.7.11 on Debian 8 for this.)</p>
</div>
<div class="post-text" itemprop="text">
<p>As it seems this is not really possible, we 'solved' the problem by using Python-<a href="http://docs.python-requests.org/en/master/" rel="nofollow">requests</a>, since it allows us to set the CA bundle.</p>
<pre><code>requests.get('https://' + domain, verify='mozillacerts.pem')
</code></pre>
<p>See also: <a href="http://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification" rel="nofollow">Requests documentation: SSL Cert Verification</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Stefan, I do see two problems with your attempt: You should use <a href="https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_SSLv23" rel="nofollow"><code>ssl.PROTOCOL_SSLv23</code></a> and not the TLSv1 which is already outdated. Do not be confused by the name of the variable, read the linked documentation to understand that's the right value to use.</p>
<p>You don't need to override the default certificate store, instead just generate proper SSL certificates that are recognised by default.</p>
<p>You can get free SSL certificates from <a href="https://letsencrypt.org" rel="nofollow">https://letsencrypt.org</a> -- I can assure you that they are recognised by default by all browsers, Python and JAVA applications too. </p>
<p>No need to play with the certificate stores, which is something risky and that depends on each platforms. Not to add that it has a high change of breaking even on minor updates.</p>
</div>
<span class="comment-copy">Hi sorin, thanks for your answer! First, thanks for the remark about the protocol constant, I was indeed misled by its name here. Second, I am aware of Let's Encrypt, but I need to simulate the behaviour of a specific browser and therefore need to control which CAs are used. It has nothing to do with getting a site I admin to validate or so.</span>
