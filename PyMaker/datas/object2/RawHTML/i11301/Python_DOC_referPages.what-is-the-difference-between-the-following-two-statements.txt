<div class="post-text" itemprop="text">
<pre><code>x = func(*(xa,) + args)
y = func(*((xc,) + args)) 
</code></pre>
<p>where args is an array and function definition is:</p>
<pre><code>def func(lamb, data):
    # statements
</code></pre>
<p>I learnt about <code>*args</code>, but I couldn't find the exact difference between these lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only difference is the extra set of brackets and one uses <code>xa</code> while the other uses <code>xc</code>, but even that doesn't make much of a difference <a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="nofollow">to the byte code</a>, take a look:</p>
<pre><code># python 2 needs to use dis.dis(compile("func(*(xa,)+args)","","eval"))
# to get same result, see http://stackoverflow.com/questions/12673074/how-should-i-understand-the-output-of-dis-dis
&gt;&gt;&gt; dis.dis("func(*(xa,)+args)")
  1           0 LOAD_NAME                0 (func)
              3 LOAD_NAME                1 (xa)
              6 BUILD_TUPLE              1
              9 LOAD_NAME                2 (args)
             12 BINARY_ADD
             13 CALL_FUNCTION_VAR        0 (0 positional, 0 keyword pair)
             16 RETURN_VALUE
&gt;&gt;&gt; dis.dis("func(*((xc,)+args))")
  1           0 LOAD_NAME                0 (func)
              3 LOAD_NAME                1 (xc)
              6 BUILD_TUPLE              1
              9 LOAD_NAME                2 (args)
             12 BINARY_ADD
             13 CALL_FUNCTION_VAR        0 (0 positional, 0 keyword pair)
             16 RETURN_VALUE
</code></pre>
<p>This is a simple matter of <a href="https://en.wikipedia.org/wiki/Precedence" rel="nofollow">precedence</a>, the addition takes priority over the <code>*</code> unpacking (CALL_FUNCTION_VAR is the exact bytecode used) so adding brackets doesn't change anything, much like here:</p>
<pre><code>3 * 5 + 1
</code></pre>
<p>The multiplication will happen first so adding brackets around it:</p>
<pre><code>(3 * 5) + 1
</code></pre>
<p>Doesn't change what is going to happen.</p>
<hr/>
<p>Also note that you don't have to add tuples together when unpacking arguments, you can just as easily do:</p>
<pre><code>func(xa, *args)
</code></pre>
<p>to accomplish the same result without having to add tuples together (and this will work when <code>args</code> is something other then a tuple where as your version would raise a TypeError)</p>
</div>
<span class="comment-copy">an extra set of brackets.  Thats it, there is no difference in execution, the byte code is identical: <code>dis.dis("func(*(xa,) + args)")</code> gives the exact same operations as <code>dis.dis("func(*((xc,) + args))")</code></span>
<span class="comment-copy">also the first uses <code>xa</code> while the second uses  <code>xc</code> ;)</span>
<span class="comment-copy">If the function you are trying to call takes two arguments and you want to pass it two arguments why are you using the <code>*args</code> mechanic at all? Don't you want to just do <code>func(xa, args)</code> ?</span>
<span class="comment-copy">I am pretty new to Python. I amn't writing, just trying to understand a source code @TadhgMcDonald-Jensen</span>
