<div class="post-text" itemprop="text">
<p>Python 3 can easily handle printing a lot of text:</p>
<pre><code>text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vitae odio quis felis consectetur blandit. Etiam mattis vehicula ex id sodales. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris fermentum semper nisi vel aliquam. Ut nec facilisis lectus. Maecenas auctor blandit condimentum. Donec finibus orci ac imperdiet congue. Pellentesque sem leo, commodo non metus ac, posuere maximus lorem. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. "
print(text)
</code></pre>
<p>The problem is that this text is printed like this:</p>
<p><a href="https://i.stack.imgur.com/V7bxu.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/V7bxu.png"/></a></p>
<p>This is of course not very good for readability of the text. Going through all of the text by hand to insert white lines makes for quite a hassle. <a href="https://stackoverflow.com/questions/14184948/">I have seen this question</a>, but I'm wondering if there's an option to do this automatically.</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the comments, <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow"><code>pprint</code></a> and <a href="https://docs.python.org/3/library/textwrap.html" rel="nofollow"><code>textwrap</code></a> can be used to align output to a given width. Given that, the only trick is determining the width to use. You could just use 78 or 80 and assume the window is that large, but that means bad wrapping if the terminal is smaller, and wasted space if it's larger.</p>
<p>To check the actual width for use with <code>pprint</code>/<code>textwrap</code>, if you're on Python 3.3 or higher, you can use <a href="https://docs.python.org/3/library/shutil.html#shutil.get_terminal_size" rel="nofollow"><code>shutil.get_terminal_size</code></a>:</p>
<pre><code>import shutil

def get_terminal_columns():
    return shutil.get_terminal_size().columns
</code></pre>
<p>If you can't use 3.3+, you can use <a href="https://docs.python.org/3/library/curses.html" rel="nofollow">the <code>curses</code> module</a> to determine the size in a somewhat more complicated way:</p>
<pre><code>import curses

def get_terminal_columns():
    try:
        # Initialize curses for terminal and check dimensions
        rows, cols = curses.initscr().getmaxyx()
    finally:
        # Unload curses to release control of terminal so it behaves normally
        curses.endwin()
    return cols
</code></pre>
<p>Using one of these functions, you can then define:</p>
<pre><code>from __future__ import print_function  # Only needed on Py2
import textwrap

def print_autobreak(*args, sep=' '):
    width = get_terminal_columns()  # Check size once to avoid rechecks per "paragraph"
    # Convert all args to strings, join with separator, then split on any newlines,
    # preserving line endings, so each "paragraph" wrapped separately
    for line in sep.join(map(str, args)).splitlines(True):
        # Py3's print function makes it easy to print textwrap.wrap's result as one-liner
        print(*textwrap.wrap(line, width), sep="\n")
</code></pre>
<p>This automatically performs line breaking between words based on the terminal size, preserves existing "hard" newlines and spaces, and (partially) matches the behavior of <code>print</code> by allowing multiple arguments with an optional separator. It needs to completely realize the output string before printing (the original <code>print</code> can print one-by-one, reducing memory usage a bit for huge outputs), but that's a side-effect of performing appropriate global wrapping.</p>
<p>If you need more complete line breaking handling (so two prints can occur without newlines, yet the second one accounts for the length of the first), you'll need a more stateful printer (to remember used characters on a line) or invent something a tad more complex with full <code>curses</code> functionality. I'll leave that as an exercise.</p>
</div>
<div class="post-text" itemprop="text">
<p>The hard part will be to get the size of the console (Windows world) or terminal (Unix), because I know no portable way to get it. It involves (as shown in the <a href="https://gist.github.com/jtriley/1108174" rel="nofollow">Gist</a> proposed by @MaximeB):</p>
<ul>
<li>the use of <code>GetConsoleScreenBufferInfo</code> from windows API for Windows (via <code>ctypes.windll</code></li>
<li>the use of <code>fcntl.ioctl</code> on Linux or other Unixes</li>
</ul>
<p>not speaking of possible corner cases... But the Gist could be enough for your requirements if you only use Windows.</p>
<p>Once you have found the width, of if you can accept a static width of 72 or 80 or any other value, the texwrap module can do the trick:</p>
<pre><code>for i in textwrap.wrap(text, 72):
    print i
</code></pre>
<p>gives:</p>
<pre class="lang-none prettyprint-override"><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vitae
odio quis felis consectetur blandit. Etiam mattis vehicula ex id
sodales. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris
fermentum semper nisi vel aliquam. Ut nec facilisis lectus. Maecenas
auctor blandit condimentum. Donec finibus orci ac imperdiet congue.
Pellentesque sem leo, commodo non metus ac, posuere maximus lorem. Class
aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might have a look at this <a href="https://gist.github.com/jtriley/1108174" rel="nofollow">Gist</a>.</p>
<p>Then using the returned values to split the string in subsequent <code>print</code> calls accordingly.</p>
<p><strong>IDLE shell</strong>: </p>
<p>Width can be retrieved with sys.stdout.shell.width and that will raise an AttributeError on any other environment (in which case you would use the gist)</p>
</div>
<span class="comment-copy">Have you tried <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer">docs.python.org/3/library/pprint.html</a> or <a href="https://docs.python.org/3/library/textwrap.html" rel="nofollow noreferrer">docs.python.org/3/library/textwrap.html</a>?</span>
<span class="comment-copy">To add: the width of the IDLE shell can be retrieved with <code>sys.stdout.shell.width</code> and that will raise an <code>AttributeError</code> on any other environment (in which case you would use the gist)</span>
<span class="comment-copy">Edited :), thanks.</span>
<span class="comment-copy">not sure the edit added anything as my commend is directly below but better formatted...</span>
<span class="comment-copy">Sorry about that, took your To add headline as an edit suggestion :/</span>
