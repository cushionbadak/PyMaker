<div class="post-text" itemprop="text">
<p>I have a value formatter</p>
<pre><code>def formatter(value):
    return '{:.8f}'.format(value)
</code></pre>
<p>but instead of always returning to 8 decimal places I want to return to max of 8 decimal places so.</p>
<pre><code>input                 |     desired_output
100                   |          100
100.01                |         100.01
3.1232342341312323434 |       3.12323423
</code></pre>
<p>How do I do that?
this is for applying to a large array of numbers. That then gets sucked up into a sql server at the moment the numbers keep overflowing the limits that the dba has set. </p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Answering your question:</strong></p>
<p>Just use float presentation type <code>'{:g}'</code> instead <code>'{:f}'</code> as described in the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">Format Specification Mini-Language</a>. This discards trailing zeros automatically. Additionally it switches to exponential notation if required.</p>
<pre><code>def formatter(value):
    return "{:^14.8g}".format(value)

l = [100, 100.01, 3.1232342341312323434,
     0.000000000000123, 1234567899.999]

for x in l:
    print(formatter(x))
</code></pre>
<p>Output:</p>
<pre><code>     100      
    100.01    
  3.1232342   
   1.23e-13   
1.2345679e+09 
</code></pre>
<hr/>
<p><strong>Some probably useful extension of your formatter function</strong></p>
<p>Changing the formatter function a little to allow you to set precision and width of the printed field when calling it:</p>
<pre><code>def formatter(value, precision, width):
    return "{{:^{}.{}g}}".format(width, precision).format(value)

l = [100, 100.01, 3.1232342341312323434,
     0.000000000000123, 1234567899.999]

for x in l:
    print(formatter(x, 5, 20))
</code></pre>
<p>Output:</p>
<pre><code>             100              
            100.01            
            3.1232            
           1.23e-13           
          1.2346e+09          
</code></pre>
<p>I found the nested format() function on this page about <a href="https://blog.henryhhammond.com/pandas-formatting-snippets/" rel="nofollow noreferrer">Pandas Formatting Snippets</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like this:</p>
<pre><code>'{:^&lt;stringwidth&gt;.8f}'.format(value).rstrip('0').rstrip('.')
</code></pre>
<p>where stringwidth is the width of your desired output wherein the value should be centered.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first solution doesn't work if the <code>stringwidth</code> is greater than the number of characters that makes your numbers, because it adds spaces around the string and the <code>rstrip</code> doesn't have any effect.</p>
<p>For it to work, first you should round it (and strip, if necessary), and then, as the second step - center it. Thus, we have:</p>
<pre><code>numbers = [100, 100.01, 3.1232342341312323434]

for number in numbers:
    rounded_number = '{:.8f}'.format(i).rstrip('0').rstrip('.')
    centered_number = '{:^14}'.format(rounded_number)  # substitute 14 with the desired width
    print (centered_number)

    # Or, as a one-liner
    # print ('{:^14}'.format('{:.8f}'.format(i).rstrip('0').rstrip('.')))
</code></pre>
<p>Output:</p>
<pre><code>     100      
    100.01    
  3.12323423  
</code></pre>
</div>
<span class="comment-copy"><code>round(3.1232342341312323434, 8)</code> might be more suitable for rounding floating point numbers for passing to a fixed precision numeric.</span>
<span class="comment-copy">Dear KillerSnail, did my solution helped solve your problem?</span>
