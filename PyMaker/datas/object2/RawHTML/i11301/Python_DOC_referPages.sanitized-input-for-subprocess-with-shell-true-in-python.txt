<div class="post-text" itemprop="text">
<p>I have python script, which has code.</p>
<pre><code>...
...
p = subprocess.Popen(cmd,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE,
                     shell=True)
output, error = p.communicate()
...
...
</code></pre>
<p>When I run <a href="https://github.com/openstack/bandit" rel="nofollow"><code>bandit</code></a> it gives error.</p>
<pre><code>&gt;&gt; Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
   Severity: High   Confidence: High
   Location: mypackage/myfile.py:123
123                                          stderr=subprocess.PIPE,
124                                          shell=True)
125                     output, error = p.communicate()
</code></pre>
<p>Then I do some google, and found that, I have to sanitized my input and with <a href="https://docs.python.org/3/library/shlex.html#shlex.split" rel="nofollow"><code>shlex.split</code></a> and <a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow"><code>shlex.quote</code></a> I can sanitize it.</p>
<p>I changed my code to.</p>
<pre><code>...
...
p = subprocess.Popen(shlex.split(shlex.quote(cmd)),
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE,
                     shell=True)
output, error = p.communicate()
...
...
</code></pre>
<p>But still I get same error, is there any way to remove this error when run <code>bandit -r mypackage/myfile.py</code> </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So, user enter command which he want to run</p>
</blockquote>
<p>If the user already may run any command including <code>bash</code> then the <code>bandit</code> 's warning about <code>shell=True</code> is not applicable.</p>
<p>The warning would make sense if the user were allowed only to choose some parameters for a fixed command e.g.,  a search query for a <code>grep</code> command:</p>
<pre><code>rc = call(['grep', '-e', query, path])
</code></pre>
<p>whatever user-specified <code>query</code> is; it won't make it to run some other command (only <code>grep</code> is run).</p>
<p>Compare it with <code>shell=True</code>:</p>
<pre><code>rc = call("grep -e '%s' '%s'" % (query, path), shell=True) #XXX don't do it
</code></pre>
<p>A user could pass <code>query = "a' /dev/null; rm -rf '"</code> that would produce  <code>grep -e 'a' /dev/null; rm -rf '' 'path'</code> command. </p>
<p><code>shell=True</code> allows a user to run an arbitrary command in this case even if it is not intended. It is called a shell injection.</p>
<p>You could call <code>pipes.quote(query)</code>, to avoid naive attacks but it may fail in the general case that is why <code>shell=True</code> should be avoided if the input is not from a trusted source.</p>
</div>
<span class="comment-copy"><code>bandit</code> cannot determine whether the command argument is sufficiently sanitized; it can only detect that you are using <code>Popen</code> in a way that <i>could</i> be a security issue. You are probably better off leaving <code>shell=False</code> and preparing <code>cmd</code> yourself in a way that can be used directly by <code>exec</code>.</span>
<span class="comment-copy">An analyser can't tell if a command you're running is a command you <i>want</i> to run. Depending on what you are doing, sandboxing the intepreter (for example with <a href="https://github.com/edx/codejail" rel="nofollow noreferrer">codejail</a>) might be appropriate or necessary. This involves a combination of input sanitisation and tightly-controlled operating system permissions.</span>
<span class="comment-copy">@chepner, <code>exec</code> means, <code>subprocess.exec</code> ?</span>
<span class="comment-copy"><code>exec</code> meaning whatever underlying system call is actually used to execute the command. Using a list with <code>shell=False</code> is safer because nothing interprets the arguments; the strings are passed as-is.</span>
<span class="comment-copy">whether or not it is safe to use <code>shell=True</code> depends on the source for <code>cmd</code> (do you use a user input to construct it?). It is pointless and wrong to call <code>shlex.quote()</code>, <code>shlex.split()</code> here.</span>
<span class="comment-copy">Thanks Sebastian, I will try to figure out something to remove <code>shell=True</code> but after making <code>shell=False</code>, still <code>bandit</code> raise error for that. It change <code>Severity</code> level from <code>Hight</code> to <code>Low</code>, there is no way to remove this also ?</span>
<span class="comment-copy">@Lafada 1- the point of my answer is that it is likely pointless to remove <code>shell=True</code> in your case—it won't make your code safer. 2- how to disable the bandit's warning is a valid but different question. You should ask it as a separate question.</span>
<span class="comment-copy">here my new question <a href="http://stackoverflow.com/questions/37661695/remove-bandit-notify-for-paramiko-and-subprocess-popen" title="remove bandit notify for paramiko and subprocess popen">stackoverflow.com/questions/37661695/…</a> :)</span>
