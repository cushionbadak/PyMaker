<div class="post-text" itemprop="text">
<p>I have a Python dictionary of objects from a class that I have created in one file. It is of the form <code>{string : object}</code>, with several key, value pairs.</p>
<p>My goal is to do something in a method in a separate file that changes an attribute of certain objects in the dictionary and to save those changes to those objects while keeping them within the dictionary.</p>
<p>I've tried using pickle, but it doesn't seem to save the changes to the objects within the dictionary.</p>
<p>Basic Idea of what I'm doing right now and what is wrong with it:</p>
<p><strong>File #1:</strong></p>
<pre><code>class A:    
    def __init__(self):
        self.value = 0

a = A()
dict = {"Test" : a}
pickle.dump(dict, open("save.p", "wb"))
</code></pre>
<p><strong>File #2:</strong></p>
<pre><code>dict = pickle.load(open("save.p", "rb"))
dict["Test"].value += 1
print(dict["Test"].value)
pickle.dump(dict, open("save.p", "wb"))
</code></pre>
<p>So when I run File #2 the first time, it should print <code>1</code>, and it does
but when I run File #2 the second time, I want it to print <code>2</code>, but it prints <code>1</code> again because the change to the value was not saved.</p>
<p>It could be that I am using pickle incorrectly...</p>
<p>Any help would be appreciated! Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">pickle documentation</a>:</p>
<blockquote>
<p>Note that none of the classâ€™s code or data is pickled</p>
</blockquote>
<p>See <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances" rel="nofollow">pickling class instances</a> for the right way to do it.</p>
<p>Also <code>class A</code> does not exist in the unpickling environment, that can't be a good thing, class are unpickeled by name if I read the doc right.</p>
<p>BTW I'd use <code>json</code> over <code>pickle</code> so you can open the file between two runs and inspect it yourself to understand what happen. There's a few advantages to use <code>json</code> over <code>pickle</code>, and a few to use <code>pickle</code> over <code>json</code>, here's a <a href="https://docs.python.org/3/library/pickle.html#comparison-with-json" rel="nofollow">comparison between pickle and json</a>.</p>
<p>Oh, and, avoid naming your variables <code>dict</code> or any existing builtins, it shadows them and can lead to very strange behaviors.</p>
</div>
