<div class="post-text" itemprop="text">
<p>Just wanted to know the difference between reverse() and [::-1] in terms of references. </p>
<p>For example</p>
<pre><code>p = [1,2,3] 
x = p[::-1] 
print(x) 
print(p) 

p.reverse() 
print(p ==p[::-1]) 
print(p == x) 
</code></pre>
<p>so outputs are </p>
<pre><code>[3,2,1]
[1,2,3] 
False
True 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>reverse</code> reverses the list <strong>in-place</strong>, see <a href="https://docs.python.org/3/tutorial/datastructures.html">the manual</a>, while <code>[::-1]</code> gives a new list in reversed order.</p>
<p>Try <code>print(p)</code> after calling <code>p.reverse()</code>, you'll see the difference.</p>
</div>
<span class="comment-copy"><code>reverse()</code> reverses the list in-place, <code>[::-1]</code> clones it in reversed order.</span>
<span class="comment-copy">Doesn't your output there demonstrate the difference?</span>
<span class="comment-copy">Note that if you don't actually need a list with the values in the reverse order (just an iterable), using the <code>reversed</code> builtin function can be more efficient. Something like <code>for value in reversed(p)</code> doesn't add a significant amount of overhead (when compared with any other iteration). <code>p[::-1]</code> and <code>p.reverse()</code> are both <code>O(N)</code>, but <code>reversed(p)</code> is <code>O(1)</code>. Of course iterating on it is <code>O(N)</code>, but so is iterating on <code>p</code> without reversing.</span>
<span class="comment-copy">@M.Jones If you feel this answer helped solved your issue, please mark it as 'accepted' by clicking the green check mark. This will help the community to keep the focus on unanswered questions.</span>
