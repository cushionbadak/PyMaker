<div class="post-text" itemprop="text">
<p>I have a tuple, and a tuple of tuples.</p>
<pre><code>import numpy as np
a = ("Control", "Group1")
b = (("Control", "Group1"), ("Control", "Group1", "Group2))
</code></pre>
<p>How can I tell that <code>a</code> is fundamentally different from <code>b</code>? Both</p>
<pre><code>print(len(a))
print(np.shape(a))
print(len(np.shape(a)))
</code></pre>
<p>and </p>
<pre><code>print(len(b))
print(np.shape(b))
print(len(np.shape(b)))
</code></pre>
<p>produce the same output:</p>
<pre><code>2
(2,)
1
</code></pre>
<p>Thanks in advance again!</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot, because they are not fundamentally different.</p>
<p>What should happen for the following?</p>
<pre><code>c = (("Foo", "bar"), "baz")
</code></pre>
<p>It’s also a tuple, and it contains both "bare" values as well as another tuple.</p>
<p>If you need to detect tuples which only consist of tuples, use:</p>
<pre><code>if all(isinstance(element, tuple) for element in a)
</code></pre>
<p>If you need to detect tuples which only consist of non-tuples, use:</p>
<pre><code>if not any(isinstance(element, tuple) for element in a)
</code></pre>
<p>Both of the above are have a time complexity of <em>O(n)</em> (with <em>n</em> being the number of elements in <code>a</code>), which may not be desirable depending from where your data is coming. It is however unavoidable, unless you are willing to take the risk not actually having tuples of tuples.</p>
<p>Depending on what you’re doing with your data, you might actually want to check for a sequence of sequences. In that case, you should use the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow">Sequence ABC</a> (<a href="https://docs.python.org/2/library/collections.html#collections.Sequence" rel="nofollow">Python 2</a>):</p>
<pre><code>import collections.abc
if all(isinstance(element, collections.abc.Sequence) for element in a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the equality operator, <code>==</code>:</p>
<pre><code>&gt;&gt;&gt; a = ("Control", "Group1")
&gt;&gt;&gt; b = (("Control", "Group1"), ("Control", "Group1", "Group2"))
&gt;&gt;&gt; a == b
False
</code></pre>
<p>If you just want a vague idea of the general structure, and the string elements won't contain parentheses, you can count the parentheses:</p>
<pre><code>&gt;&gt;&gt; str(a).count('(')
1
&gt;&gt;&gt; str(b).count('(')
3
</code></pre>
</div>
