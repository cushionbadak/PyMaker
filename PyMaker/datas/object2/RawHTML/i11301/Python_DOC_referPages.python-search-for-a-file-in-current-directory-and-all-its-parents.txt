<div class="post-text" itemprop="text">
<p>Is there an inbuilt module to search for a file in the current directory, as well as all the super-directories?</p>
<p>Without the module, I'll have to list all the files in the current directory, search for the file in question, and recursively move up if the file isn't present. Is there an easier way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well this is not so well implemented, but will work</p>
<p>use <code>listdir</code> to get list of files/folders in current directory and then in the list search for you file. </p>
<p>If it exists loop breaks but if it doesn't it goes to parent directory using <code>os.path.dirname</code> and <code>listdir</code>.</p>
<p>if <code>cur_dir == '/'</code> the parent dir for <code>"/"</code> is returned as <code>"/"</code> so if <code>cur_dir == parent_dir</code> it breaks the loop</p>
<pre><code>import os
import os.path

file_name = "test.txt" #file to be searched
cur_dir = os.getcwd() # Dir from where search starts can be replaced with any path

while True:
    file_list = os.listdir(cur_dir)
    parent_dir = os.path.dirname(cur_dir)
    if file_name in file_list:
        print "File Exists in: ", cur_dir
        break
    else:
        if cur_dir == parent_dir: #if dir is root dir
            print "File not found"
            break
        else:
            cur_dir = parent_dir
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>import glob</code> and use <code>glob.glob('your_pattern_or_name_of_file')</code>
You can see documentation on glob here
<a href="https://docs.python.org/2/library/glob.html" rel="nofollow">https://docs.python.org/2/library/glob.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example that will find all the .csv files in a specified directory "path" and all its root directories and print them:</p>
<pre><code>    import os
    for root, dirs, files in os.walk(path):
        for file in files:
            if file.endswith(".csv"):
                path_file = os.path.join(root,file)
                print(path_file)
</code></pre>
<p>If you want to start at one directory and work your way through the parents then this would work for finding all the .csv files (for example):</p>
<pre><code>import os
import glob
last_dir = ''
dir = r'c:\temp\starting_dir'

os.chdir(dir)
while last_dir != dir:
    dir = os.getcwd()
    print(glob.glob('*.csv'))
    os.chdir('..')
    last_dir = os.getcwd()   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would say you could use <code>glob.glob()</code> to find for all the files you are looking for.The <a href="https://docs.python.org/3/library/glob.html" rel="nofollow">glob</a> module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell, although results are returned in arbitrary order. From the docs -</p>
<blockquote>
<p>glob.glob(pathname, *, recursive=False) </p>
<p>Return a <strong>possibly-empty list</strong>
  of path names that match pathname, which must be a string containing a
  path specification. pathname can be either <strong>absolute (like
  /usr/src/Python-1.5/Makefile) or relative (like ../../Tools/*/*.gif)</strong>,
  and can contain shell-style wildcards. Broken symlinks are included in
  the results (as in the shell).</p>
</blockquote>
<p>Say, our objective is to find all text files from a directory, its sub -directories and its parent directory.Use <code>os.walk()</code> or <code>os.chdir()</code> to get to the directory you want to work with. So I went to my current working directory and from there could access <strong>ALL</strong> text files with  this code snippet - </p>
<pre><code>import glob
arr=glob.glob('*\*\*.txt') 

'''....thesis/tweets is the path I walked to which
   has further sub directories, tweets\LDA on tweets\test file for main reults ,
tweets\LDA on tweets\paris_tweet ,tweets\LDA on tweets\hurricane_patricia\ '''

count=0
for filename in arr:
    print (filename)
    count+=1
print("ran successfulyy!!!! count = ",count)
</code></pre>
<p>I get all text files(54) from all the subdirectories. This output just shows a few - </p>
<pre><code>LDA on tweets\paris_tweet\ldaparisresults.txt
LDA on tweets\paris_tweet\ldaparisresults1.txt
LDA on tweets\hurricane_patricia\80,xldahurricaneresults.txt
LDA on tweets\hurricane_patricia\entitieshurricane.txt
LDA on tweets\test file for main reults\80,10ldamainresults.txt
LDA on tweets\test file for main reults\80,30ldamainresults.txt
</code></pre>
<p>To get text files from parent directory(and its immediate sub directories) simply change this to <code>arr=glob.glob('..\*\*.txt')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Just wrote this to find the "images" directory, note '/' is Linux style</p>
<pre><code>dir = os.getcwd()
    while dir != '/' and not glob.glob( dir + '/images' ):
        dir = os.path.dirname(dir)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The parent question was to walk <em>parent</em> directories (not descend into children like the <code>find</code> command):</p>
<pre><code># walk PARENT directories looking for `filename`:

f = 'filename'
d = os.getcwd()

while d != "/" and f not in os.listdir(d):
    d = os.path.abspath(d + "/../")

if os.path.isfile(os.path.join(d,f)):
    do_something(f)
</code></pre>
<p>Here's a version that uses shell globbing to match multiple files:</p>
<pre><code># walk PARENT directories looking for any *.csv files,
# stopping when a directory that contains any:

f = '*.csv'
d = os.getcwd()

while d != "/" and not glob.glob(os.path.join(d, f)):
    d = os.path.abspath(d + "/../")

files = glob.glob(os.path.join(d,f))

for filename in files:
    do_something(filename)
</code></pre>
</div>
<span class="comment-copy">I guess there is no module for searching file. Best thing to do is use <code>listdir</code> and <code>getcwd</code> and search in file in the list</span>
<span class="comment-copy">I think you can use <code>os.walk</code> for iterating the directory and <code>pardir</code> to refer to the parent directory.</span>
<span class="comment-copy">The <code>pathlib</code> module added in Python 3.4 is well-suited to this task.</span>
<span class="comment-copy">shouldn't it be <code>if cur_dir== '/' : break</code> ? or <code>os.sep</code> to be generic?</span>
<span class="comment-copy">it is for all operating systems, if <code>cur_dir == '/'</code> the parent dir for <code>"/"</code> is returned as <code>"/"</code> so if <code>cur_dir == parent_dir</code> it breaks the loop</span>
<span class="comment-copy">yeah, you are right. <code>os.path.dirname("/")</code> returns <code>/</code></span>
<span class="comment-copy">You should check whether reported file is really a file (or a symlink): <code>os.path.isfile(os.path.join(cur_dir, file_name))</code>. It also implies that file is on <code>file_list</code>, so you don't have to check it on the list.</span>
<span class="comment-copy">Thank you. I start from the current directory and move up a folder every time I don't find it. Since <code>os.walk</code> traverses the entire directory tree, I would have to provide '/' as the top, right?</span>
<span class="comment-copy">but I want the files present in current and all it's parent directories to be searched.</span>
<span class="comment-copy">Thanks, I realized that I left off a line. I fixed it so it should work now.</span>
<span class="comment-copy">@JamiesonBecker, did you read the second part of my answer? I think that answers the question.</span>
<span class="comment-copy">@sparrow you're right, sorry for not reading more carefully!</span>
<span class="comment-copy">I am unsure about which of my parent directory would have the required file. If <code>/a/b/c/d/e</code> is my current directory, then the required file can be in <code>/</code>,<code>/a</code>,<code>/a/b</code>,... etc</span>
<span class="comment-copy">I would suggest maybe using @sparrow 's method. It seems cleaner and may be the solution you are looking for. Don't forget to upvote all the same. :)</span>
