<div class="post-text" itemprop="text">
<p>Lets say I have something like</p>
<pre><code>for user in users:
     send_email(user)
</code></pre>
<p>But since I want to reduce congestion, I want something like</p>
<pre><code>for user in rate_limit(per_min=50, users):
     send_email(user)
</code></pre>
<p>Where the <code>rate_limit</code> function simply sleeps and starts yielding from <code>users</code> again once the rate limit as been reached.</p>
<pre><code># something like this, where it just sleeps (until next min/sec cycle) 
# once the number of iterations per_min or per_sec have been achieved.

def rate_limit(per_min=None, per_sec=None, objects):
    ???
</code></pre>
<p>Problem is I have no clue how to preserve state (in the sense of time elapsed/emails sent) in this form. </p>
<p>Does anyone have any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're probably looking for <a href="https://docs.python.org/3/library/time.html#time.sleep" rel="nofollow"><code>time.sleep()</code></a>:</p>
<ol>
<li>Yield an object</li>
<li>Sleep</li>
<li>Repeat from step 1</li>
</ol>
<p>For example:</p>
<pre><code>import time

def rate_limit(objects, per_min=None):
    sleep_time = 60 / per_min if per_min else 0
    for obj in objects:
        yield obj
        time.sleep(sleep_time)
</code></pre>
<hr/>
<blockquote>
<p>Problem is I have no clue how to preserve state (in the sense of time elapsed/emails sent) in this form.</p>
</blockquote>
<p>This will automatically preserver the state, as <code>yield</code> simply pauses the function and continues after the function is called again. If you want to know the spent time and number of mails sent, you can simply add a counter:</p>
<pre><code>def rate_limit(objects, per_min=None):
    sleep_time = 60 / per_min if per_min else 0
    for count, obj in enumerate(objects):
        yield obj
        print('Sent email {0} at {1} seconds.'.format(count, count * sleep_time))
        time.sleep(sleep_time)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="https://docs.python.org/2/library/time.html#time.sleep" rel="nofollow"><code>time.sleep</code></a> this will suspend the current thread for a given number of seconds.</p>
</div>
<span class="comment-copy">to avoid unnecessary delays, you could <a href="http://stackoverflow.com/a/33224087/4279">use <code>RatedSemaphore(50, 60)</code></a></span>
<span class="comment-copy">@J.F.Sebastian I have never seen semaphores used outside multiprocessing/multi-threading situations. Will it work in my situation? Excuse my ignorance</span>
<span class="comment-copy">yes. The first code example in the answer I've linked doesn't create its own new threads (though there is a background thread created by the semaphore, to generate tokens). In your case, it could look like: <code>for user in users: with rate_limit: send_email(user)</code>. If <code>rate_limit = RatedSemaphore(50, 60)</code> then it guarantees that the loop won't send more than 50 emails per minute.</span>
<span class="comment-copy">Thanks for your help. Ill just follow your example</span>
