<div class="post-text" itemprop="text">
<p>I have a dictionary</p>
<pre><code>{ 'a': 1.0,
  'b': 1.1,
  'c': 0.9,
  # ...
  'z': 0.97
}
</code></pre>
<p>I have a list of items say <code>['a', 'b', 'c']</code>. I want to find the average of the values of this list from the dictionary. Of course I can iterate through my list, finding and summing the values, but is there a way in which I can get this without the for loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>have</em> to have a loop. You can hide the loop however.</p>
<p>You could use a <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter()</code> object</a> to do this for you, for example:</p>
<pre><code>from operator import itemgetter

average = sum(itemgetter(*list_of_keys)(your_dictionary)) / len(list_of_keys)
</code></pre>
<p>To be absolutely explicit: the <code>itemgetter()</code> now loops over your list of keys and produces a tuple with the corresponding values.</p>
<p>Another 'hidden' loop is the <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map()</code> function</a>; use either <code>dict.get()</code> or <code>dict.__getitem__()</code> as the function to map to, and <code>map()</code> again does all the looping for you:</p>
<pre><code>avegare = sum(map(your_dictionary.__getitem__, list_of_keys)) / len(list_of_keys)
</code></pre>
<p>The difference between <code>dict.get</code> and <code>dict.__getitem__</code> here is what excepetion you get when a key is missing; the first will lead to a <code>TypeError</code> as you end up trying to sum <code>None</code> and a number, the other will give you a <code>KeyError</code>.</p>
<p>Otherwise, just use a loop in a generator expression:</p>
<pre><code>average = sum(your_dictionary[k] for k in list_of_keys) / len(list_of_keys)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; d = {'a': 1.0, 'z': 0.97, 'c': 0.9, 'b': 1.1}
&gt;&gt;&gt; selected = ['a', 'b', 'c']
&gt;&gt;&gt; sum(itemgetter(*selected)(d)) / len(selected)
1.0
&gt;&gt;&gt; sum(map(d.__getitem__, selected)) / len(selected)
1.0
&gt;&gt;&gt; sum(d[k] for k in selected) / len(selected)
1.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using python3 you could use <em>statistics.mean:</em></p>
<pre><code>d = { "a": 1.0,
  "b": 1.1,
  "c": 0.9,

  "z": 0.97
}

lst = ["a", "b", "c"]
from statistics import mean


print(mean(map(d.get, lst)))
</code></pre>
<p>Or just using sum:</p>
<pre><code>print(sum(map(d.get, lst)) / len(lst))
</code></pre>
<p>That presumes all the items in lst are in the dict, if not you would get an error adding a float and a NoneType.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your dict is called <code>values</code> and your list is called <code>items</code>, there's a very short solution:</p>
<pre><code>arithmetic_mean_inexact = sum(values[i] for i in items) / len(items)
</code></pre>
<p>Note that this doesn't support an empty <code>items</code> list, as this will result in a <code>ZeroDivisionError</code>.  This is fine, because the average of an empty sequence is not really meaningful.</p>
<p>While this solution shows that computing the average is possible without an <em>explicit</em> for loop, it has the problem that summing a big list of floats and dividing it by a big number can result in numerical precision loss.  Fixing that is non-trivial and requires a much longer solution.  Fortunately Python 3.4 (or newer) ships the statistics module for this, so you should use <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow"><code>statistics.mean()</code></a> (as was already proposed by another answer).  For example:</p>
<pre><code>from statistics import mean
arithmetic_mean = mean([values[i] for i in items])
</code></pre>
<p>Depending on your concrete problem, other functions in this function might be more appropriate.  You will find more information in the <a href="https://docs.python.org/3/library/statistics.html#averages-and-measures-of-central-location" rel="nofollow">documentation of the statistics module</a>.</p>
</div>
<span class="comment-copy">You could use recursion rather than a loop. Would that suffice?</span>
<span class="comment-copy">Do note that <code>map()</code> does a loop too! :-)</span>
<span class="comment-copy">@MartijnPieters,  I think no matter what you do there is a loop somewhere ;)</span>
<span class="comment-copy">Exactly, but it is the root of the question.</span>
