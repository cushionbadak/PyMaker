<div class="post-text" itemprop="text">
<p>i am currently trying to do a regex on python that should match multiline.</p>
<pre><code>([0-9]{2}\.[0-9]{2}\.[0-9]{4}\s[0-9]{2}:[0-9]{2}:[0-9]{2}).*?\r\n-{1,}\sFG\s{3,}?4
</code></pre>
<p>is my regular expression, this is my python call</p>
<pre><code>re.findall("([0-9]{2}\.[0-9]{2}\.[0-9]{4}\s[0-9]{2}:[0-9]{2}:[0-9]{2}).*?\r\n-{1,}\sFG\s{3,}?4.*?", content, flags=re.M)
</code></pre>
<p>However when I use the Regex for example in Notepad++ it provides me with the proper matches whereas in python it does not match anything at all (here is an example string that is matched in npp but not in python)</p>
<p>19.04.2016 01:59:18  ASDF</p>
<p>---- FG 3</p>
<pre><code> --------------- ASDF
</code></pre>
<p>19.04.2016 01:59:21  ASDF</p>
<p>---- FG 4</p>
<pre><code> --------------- ASDF
</code></pre>
<p>19.04.2016 01:59:22  ASDF</p>
<p>---- FG 4</p>
<pre><code> --------------- ASDF
</code></pre>
<p>I am also sure that there in fact is a \r\n since npp provides me with matches.</p>
<p>Since I am using the multiline flag I have absolutely no idea why my regex won't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that in the corrected input shown, the part <code>FG\s{3,}?4</code>of the pattern avoids a match as a single space does not match between <code>FG</code>and the <code>4</code>.</p>
<pre><code>#! /usr/bin/env python
from __future__ import print_function
import re    

content = "19.04.2016 05:31:03 ASDFASDF\r\n---- FG 4 "
pattern = (r'([0-9]{2}\.[0-9]{2}\.[0-9]{4}\s[0-9]{2}:[0-9]{2}:[0-9]{2}).*?'
           r'\r\n-{1,}\sFG\s{1,}?4.*?')
print(re.findall(pattern, content, flags=re.M))
</code></pre>
<p>gives me (unmodified with python 2.7.11 and 3.5.1):</p>
<pre><code>['19.04.2016 05:31:03']
</code></pre>
<p><strong>Edit</strong>: Here a version for the updated amended input samples as transcribed by @poke:</p>
<pre><code>#! /usr/bin/env python
from __future__ import print_function
import re

content = ("19.04.2016 05:31:03  ASDFASDF\r\n---- FG   4"
           "\r\n19.04.2016 05:31:03  ASDFASDF\r\n---- FG   4"
           "\r\n19.04.2016 05:31:03  ASDFASDF\r\n---- FG   4"
           "\r\n19.04.2016 05:31:03  ASDFASDF\r\n---- FG   4"
           "\r\n19.04.2016 05:31:03  ASDFASDF\r\n---- FG   4")
pattern = (r'([0-9]{2}\.[0-9]{2}\.[0-9]{4}\s[0-9]{2}:[0-9]{2}:[0-9]{2}).*?'
           r'\r\n-{1,}\sFG\s{1,}?4.*?')
print(re.findall(pattern, content, flags=re.M))
</code></pre>
<p>Gives (as to be expected):</p>
<pre><code>['19.04.2016 05:31:03', '19.04.2016 05:31:03', '19.04.2016 05:31:03', '19.04.2016 05:31:03', '19.04.2016 05:31:03']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your input contains a line break with \r\n and you correct the spacing after the 'FG' part, this should work:</p>
<p><code>([0-9]{2}\.[0-9]{2}\.[0-9]{4}\s[0-9]{2}:[0-9]{2}:[0-9]{2}).*?\r\n-{1,}\sFG\s+?4</code></p>
<p>Tested here (with \n only for the line break):
<a href="https://regex101.com/r/iT1rF2/2" rel="nofollow">https://regex101.com/r/iT1rF2/2</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Works for me:</p>
<pre><code>&gt;&gt;&gt; content = '''19.04.2016 05:31:03  ASDFASDF\r
---- FG   4\r
19.04.2016 05:31:03  ASDFASDF\r
---- FG   4\r
19.04.2016 05:31:03  ASDFASDF\r
---- FG   4\r
19.04.2016 05:31:03  ASDFASDF\r
---- FG   4\r
19.04.2016 05:31:03  ASDFASDF\r
---- FG   4'''
&gt;&gt;&gt; re.findall("([0-9]{2}\.[0-9]{2}\.[0-9]{4}\s[0-9]{2}:[0-9]{2}:[0-9]{2}).*?\r\n-{1,}\sFG\s{3,}?4.*?", content, flags=re.M)
['19.04.2016 05:31:03', '19.04.2016 05:31:03', '19.04.2016 05:31:03', '19.04.2016 05:31:03', '19.04.2016 05:31:03']
</code></pre>
<p>Note that I had to add explicit <code>\r</code> at the end of each line. You say that your text contains actual <code>\r\n</code> but please make sure that’s the case.</p>
<p>If you are reading the content from a file, note that Python performs a newline normalization <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow">when you open a file</a>. So you likely end up with only <code>\n</code> although the file originally contained <code>\r\n</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that you could re-write your regex with shortcuts so that your pattern:</p>
<pre><code>([0-9]{2}\.[0-9]{2}\.[0-9]{4}\s[0-9]{2}:[0-9]{2}:[0-9]{2}).*?\r\n-{1,}\sFG\s{3,}?4
</code></pre>
<p>becomes (shortcut and corrections):</p>
<pre><code>(\d{2}\.\d{2}\.\d{4}\s\d{2}:\d{2}:\d{2}).*?\r\n-+\sFG\s+?4
</code></pre>
</div>
<span class="comment-copy">Could you provide a clearer example of the input ?</span>
<span class="comment-copy">Please provide more examples of your string content, because like this—with a single line—it’s not really helpful. And it also doesn’t match.</span>
<span class="comment-copy">Did not work for me.</span>
<span class="comment-copy">@poke The site I linked is testing a python expression</span>
<span class="comment-copy">@AlexGarcia Oh, didn’t see that. Nevermind me then.</span>
<span class="comment-copy">Good point! Readability counts esp. in embedded "languages" of the more cryptic kind ... and there is still a wild jungle to discover in "regex land". Example: Matching a time stamp and not accepting too many invalid entries is a lengthy construct in itself. In our question's pattern  months like 99 and hours like 42 etc. are being accepted.</span>
