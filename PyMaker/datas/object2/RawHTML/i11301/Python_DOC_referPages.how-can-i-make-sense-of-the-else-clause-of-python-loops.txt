<div class="post-text" itemprop="text">
<p>Many Python programmers are probably unaware that the syntax of <code>while</code> loops and <code>for</code> loops includes an optional <code>else:</code> clause:</p>
<pre><code>for val in iterable:
    do_something(val)
else:
    clean_up()
</code></pre>
<p>The body of the <code>else</code> clause is a good place for certain kinds of clean-up actions, and is executed on normal termination of the loop: I.e., exiting the loop with <code>return</code> or <code>break</code> skips the <code>else</code> clause; exiting after a <code>continue</code> executes it. I know this only because I just <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="noreferrer">looked it up</a> (yet again), because  I can never remember <em>when</em> the <code>else</code> clause is executed.</p>
<p>Always? On "failure" of the loop, as the name suggests? On regular termination? Even if the loop is exited with <code>return</code>? I can never be entirely sure without looking it up.</p>
<p>I blame my persisting uncertainty on the choice of keyword: I find <code>else</code> incredibly unmnemonic for this semantics. My question is not "why is this keyword used for this purpose" (which I would probably vote to close, though only after reading the answers and comments), but <strong>how can I think about the <code>else</code> keyword so that its semantics make sense, and I can therefore remember it?</strong></p>
<p>I'm sure there was a fair amount of discussion about this, and I can imagine that the choice was made for consistency with the <code>try</code> statement's <code>else:</code> clause (which I also have to look up), and with the goal of not adding to the list of Python's reserved words. Perhaps the reasons for choosing <code>else</code> will clarify its function and make it more memorable, but I'm after connecting name to function, not after historical explanation per se.</p>
<p>The answers to <a href="https://stackoverflow.com/q/9979970/699305">this question</a>, which my question was briefly closed as a duplicate of, contain a lot of interesting back story. My question has a different focus (how to connect the specific semantics of <code>else</code> with the keyword choice), but I feel there should be a link to this question somewhere.</p>
</div>
<div class="post-text" itemprop="text">
<p>(This is inspired by @Mark Tolonen's answer.)</p>
<p>An <code>if</code> statement runs its <code>else</code> clause if its condition evaluates to false.
Identically, a <code>while</code> loop runs the else clause if its condition evaluates to false.</p>
<p>This rule matches the behavior you described:</p>
<ul>
<li>In normal execution, the while loop repeatedly runs until the condition evaluates to false, and therefore naturally exiting the loop runs the else clause.</li>
<li>When you execute a <code>break</code> statement, you exit out of the loop without evaluating the condition, so the condition cannot evaluate to false and you never run the else clause.</li>
<li>When you execute a <code>continue</code> statement, you evaluate the condition again, and do exactly what you normally would at the beginning of a loop iteration.
So, if the condition is true, you keep looping, but if it is false you run the else clause.</li>
<li>Other methods of exiting the loop, such as <code>return</code>, do not evaluate the condition and therefore do not run the else clause.</li>
</ul>
<p><code>for</code> loops behave the same way. Just consider the condition as true if the iterator has more elements, or false otherwise.</p>
</div>
<div class="post-text" itemprop="text">
<p>Better to think of it this way: The <code>else</code> block will <strong>always</strong> be executed if everything goes <em>right</em> in the preceding <code>for</code> block such that it reaches exhaustion. </p>
<p><em>Right</em> in this context will mean no <code>exception</code>, no <code>break</code>, no <code>return</code>. Any statement that hijacks control from <code>for</code> will cause the <code>else</code> block to be bypassed.</p>
<hr/>
<p>A common use case is found when searching for an item in an <code>iterable</code>, for which the search is either called off when the item is found or a <code>"not found"</code> flag is raised/printed via the following <code>else</code> block:</p>
<pre><code>for items in basket:
    if isinstance(item, Egg):
        break
else:
    print("No eggs in basket")  
</code></pre>
<p>A <code>continue</code> does not hijack control from <code>for</code>, so control will proceed to the <code>else</code> after the <code>for</code> is exhausted.</p>
</div>
<div class="post-text" itemprop="text">
<p>When does an <code>if</code> execute an <code>else</code>? When its condition is false. It is exactly the same for the <code>while</code>/<code>else</code>.  So you can think of <code>while</code>/<code>else</code> as just an <code>if</code> that keeps running its true condition until it evaluates false.  A <code>break</code> doesn't change that.  It just jumps of of the containing loop with no evaluation.  The <code>else</code> is only executed if <em>evaluating</em> the <code>if</code>/<code>while</code> condition is false.</p>
<p>The <code>for</code> is similar, except its false condition is exhausting its iterator. </p>
<p><code>continue</code> and <code>break</code> don't execute <code>else</code>.  That isn't their function.  The <code>break</code> exits the containing loop.  The <code>continue</code> goes back to the top of the containing loop, where the loop condition is evaluated.  It is the act of evaluating <code>if</code>/<code>while</code> to false (or <code>for</code> has no more items) that executes <code>else</code> and no other way.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what it essentially means:</p>
<pre><code>for/while ...:
    if ...:
        break
if there was a break:
    pass
else:
    ...
</code></pre>
<p>It's a nicer way of writing of this common pattern:</p>
<pre><code>found = False
for/while ...:
    if ...:
        found = True
        break
if not found:
    ...
</code></pre>
<p>The <code>else</code> clause will not be executed if there is a <code>return</code> because <code>return</code> leaves the function, as it is meant to. The only exception to that which you may be thinking of is <code>finally</code>, whose purpose is to be sure that it is always executed.</p>
<p><code>continue</code> has nothing special to do with this matter. It causes the current iteration of the loop to end which may happen to end the entire loop, and clearly in that case the loop wasn't ended by a <code>break</code>.</p>
<p><code>try/else</code> is similar:</p>
<pre><code>try:
    ...
except:
    ...
if there was an exception:
    pass
else:
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you think of your loops as a structure similar to this (somewhat pseudo-code):</p>
<pre><code>loop:
if condition then

   ... //execute body
   goto loop
else
   ...
</code></pre>
<p>it might make a little bit more sense. A loop is essentially just an <code>if</code> statement that is repeated until the condition is <code>false</code>. And this is the important point. The loop checks its condition and sees that it's <code>false</code>, thus executes the <code>else</code> (just like a normal <code>if/else</code>) and then the loop is done.</p>
<p>So notice that the <code>else</code> <strong>only get's executed when the condition is checked</strong>. That means that if you exit the body of the loop in the middle of execution with for example a <code>return</code> or a <code>break</code>, since the condition is not checked again, the <code>else</code> case won't be executed.</p>
<p>A <code>continue</code> on the other hand stops the current execution and then jumps back to check the condition of the loop again, which is why the <code>else</code> can be reached in this scenario.</p>
</div>
<div class="post-text" itemprop="text">
<p>My gotcha moment with the loop's <code>else</code> clause was when I was watching a talk by <a href="https://stackoverflow.com/users/1001643/raymond-hettinger">Raymond Hettinger</a>, who told a story about how he thought it should have been called <code>nobreak</code>. Take a look at the following code, what do you think it would do?</p>
<pre><code>for i in range(10):
    if test(i):
        break
    # ... work with i
nobreak:
    print('Loop completed')
</code></pre>
<p>What would you guess it does? Well, the part that says <code>nobreak</code> would only be executed if a <code>break</code> statement wasn't hit in the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Usually I tend to think of a loop structure like this:</p>
<pre><code>for item in my_sequence:
    if logic(item):
        do_something(item)
        break
</code></pre>
<p>To be a lot like a variable number of <code>if/elif</code> statements:</p>
<pre><code>if logic(my_seq[0]):
    do_something(my_seq[0])
elif logic(my_seq[1]):
    do_something(my_seq[1])
elif logic(my_seq[2]):
    do_something(my_seq[2])
....
elif logic(my_seq[-1]):
    do_something(my_seq[-1])
</code></pre>
<p>In this case the <code>else</code> statement on the for loop works exactly like the <code>else</code> statement on the chain of <code>elif</code>s, it only executes if none of the conditions before it evaluate to True. (or break execution with <code>return</code> or an exception)  If my loop does not fit this specification usually I choose to opt out of using <code>for: else</code> for the exact reason you posted this question: it is non-intuitive.</p>
</div>
<div class="post-text" itemprop="text">
<p>Others have already explained the mechanics of <code>while/for...else</code>, and the <a href="https://docs.python.org/3/reference/" rel="noreferrer">Python 3 language reference</a> has the authoritative definition (see <a href="https://docs.python.org/3/reference/compound_stmts.html#the-while-statement" rel="noreferrer">while</a> and <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="noreferrer">for</a>), but here is my personal mnemonic, FWIW. I guess the key for me has been to break this down into two parts: one for understanding the meaning of the <code>else</code> in relation to the loop conditional, and one for understanding loop control.</p>
<p>I find it's easiest to start by understanding <code>while...else</code>:</p>
<blockquote>
<p><em><code>while</code> you have more items, do stuff, <code>else</code> if you run out, do this</em></p>
</blockquote>
<p>The <code>for...else</code> mnemonic is basically the same:</p>
<blockquote>
<p><em><code>for</code> every item, do stuff, but <code>else</code> if you run out, do this</em></p>
</blockquote>
<p>In both cases, the <code>else</code> part is only reached once there are no more items to process, and the last item has been processed in a regular manner (i.e. no <code>break</code> or <code>return</code>). A <code>continue</code> just goes back and sees if there are any more items. My mnemonic for these rules applies to both <code>while</code> and <code>for</code>:</p>
<blockquote>
<p><em>when <code>break</code>ing or <code>return</code>ing, there's nothing <code>else</code> to do,<br/>
  and when I say <code>continue</code>, that's "loop back to start" for you</em></p>
</blockquote>
<p>– with "loop back to start" meaning, obviously, the start of the loop where we check whether there are any more items in the iterable, so as far as the <code>else</code> is concerned, <code>continue</code> really plays no role at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>In <a href="http://en.wikipedia.org/wiki/Test-driven_development" rel="nofollow">Test-driven development</a> (TDD), when using the <a href="https://en.wikipedia.org/wiki/Transformation_Priority_Premise" rel="nofollow">Transformation Priority Premise</a> paradigm, you treat loops as a generalization of conditional statements.</p>
<p>This approach combines well with this syntax, if you consider only simple <code>if/else</code> (no <code>elif</code>) statements:</p>
<pre><code>if cond:
    # 1
else:
    # 2
</code></pre>
<p>generalizes to:</p>
<pre><code>while cond:  # &lt;-- generalization
    # 1
else:
    # 2
</code></pre>
<p>nicely.</p>
<p>In other languages, TDD steps from a single case to cases with collections require more refactoring.</p>
<hr/>
<p>Here is an example from <a href="https://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html" rel="nofollow">8thlight blog</a>:</p>
<p>In the linked article at 8thlight blog, the Word Wrap kata is considered: adding line breaks to strings (the <code>s</code> variable in the snippets below) to make them fit a given width (the <code>length</code> variable in the snippets below). At one point the implementation looks as follows (Java):</p>
<pre><code>String result = "";
if (s.length() &gt; length) {
    result = s.substring(0, length) + "\n" + s.substring(length);
} else {
    result = s;
}
return result;
</code></pre>
<p>and the next test, that currently fails is:</p>
<pre><code>@Test
public void WordLongerThanTwiceLengthShouldBreakTwice() throws Exception {
    assertThat(wrap("verylongword", 4), is("very\nlong\nword"));
    }
</code></pre>
<p>So we have code that works conditionally: when a particular condition is met, a line break is added. We want to improve the code to handle multiple line breaks. The solution presented in the article proposes to apply the <em>(if-&gt;while)</em> transformation, however the author makes a comment that:</p>
<blockquote>
<p>While loops can’t have <code>else</code> clauses, so we need to eliminate the <code>else</code> path by doing less in the <code>if</code> path. Again, this is a refactoring.</p>
</blockquote>
<p>which forces to do more changes to the code in the context of one failing test:</p>
<pre><code>String result = "";
while (s.length() &gt; length) {
    result += s.substring(0, length) + "\n";
    s = s.substring(length);
}
result += s;
</code></pre>
<p>In TDD we want to write as less code as possible to make tests pass. Thanks to Python's syntax the following transformation is possible:</p>
<p>from:</p>
<pre><code>result = ""
if len(s) &gt; length:
    result = s[0:length] + "\n"
    s = s[length:]
else:
    result += s
</code></pre>
<p>to:</p>
<pre><code>result = ""
while len(s) &gt; length:
    result += s[0:length] + "\n"
    s = s[length:]
else:
    result += s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The way I see it, <code>else:</code> fires when you iterate past the end of the loop.</p>
<p>If you <code>break</code> or <code>return</code> or <code>raise</code> you don't iterate past the end of loop, you stop immeadiately, and thus the <code>else:</code> block won't run. If you <code>continue</code> you still iterate past the end of loop, since continue just skips to the next iteration. It doesn't stop the loop. </p>
</div>
<div class="post-text" itemprop="text">
<p>Think of the <code>else</code> clause as being part of the loop construct; <code>break</code> breaks out of the loop construct entirely, and thus skips the <code>else</code> clause.</p>
<p>But really, my mental mapping is simply that it's the 'structured' version of the pattern C/C++ pattern:</p>
<pre><code>  for (...) {
    ...
    if (test) { goto done; }
    ...
  }
  ...
done:
  ...
</code></pre>
<p>So when I encounter <code>for...else</code> or write it myself, rather than understand it <em>directly</em>, I mentally translate it into the above understanding of the pattern and then work out which parts of the python syntax map to which parts of the pattern.</p>
<p>(I put 'structured' in scare quotes because the difference is not whether the code is structured or unstructured, but merely whether there are keywords and grammar dedicated to the particular structure)</p>
</div>
<div class="post-text" itemprop="text">
<p>The way I think about it, the key is to consider the meaning of <code>continue</code> rather than <code>else</code>.</p>
<p>The other keywords you mention break out of the loop (exit abnormally) whilst <code>continue</code> does not, it just skips the remainder of the code block inside the loop. The fact that it can precede loop termination is incidental: the termination is actually done in the normal way by evaluation of the loop conditional expression.</p>
<p>Then you just need to remember that the <code>else</code> clause is executed after normal loop termination.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you try to pair <code>else</code> with <code>for</code> in your mind, it could be confusing. I don't think the keyword <code>else</code> was a great choice for this syntax, But if you pair <code>else</code> with <code>break</code>, you can see it actually makes sense.</p>
<p>Let me demonstrate it in human language.</p>
<blockquote>
<p><code>for</code> each person in a group of suspects <code>if</code> anyone is the criminal
  <code>break</code> the investigation. <code>else</code> report failure.</p>
</blockquote>
<p><br/>
<code>else</code> is barely useful if there weren't <code>break</code> in the <code>for</code> loop anyway.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># tested in Python 3.6.4
def buy_fruit(fruits):
    '''I translate the 'else' below into 'if no break' from for loop '''
    for fruit in fruits:
        if 'rotten' in fruit:
            print(f'do not want to buy {fruit}')
            break
    else:  #if no break
        print(f'ready to buy {fruits}')


if __name__ == '__main__':
    a_bag_of_apples = ['golden delicious', 'honeycrisp', 'rotten mcintosh']
    b_bag_of_apples = ['granny smith', 'red delicious', 'honeycrisp', 'gala', 'fuji']
    buy_fruit(a_bag_of_apples)
    buy_fruit(b_bag_of_apples)

'''
do not want to buy rotten mcintosh
ready to buy ['granny smith', 'red delicious', 'honeycrisp', 'gala', 'fuji']
'''
</code></pre>
</div>
<span class="comment-copy">How about "if there is something left to iterate... else"</span>
<span class="comment-copy">I think you can remember it now after writing this question :)</span>
<span class="comment-copy">the <code>else</code> means basically, "if the continuation condition fails". In a traditional for loop, the continuation condition is typically <code>i &lt; 42</code>, in which case, you can view that part as <code>if i &lt; 42; execute the loop body; else; do that other thing</code></span>
<span class="comment-copy">This is all true, and I especially like drawoc's answer, but another thing to consider is that <b>else</b> is an available keyword that also makes somewhat good sense syntaxically.  You may know try/except and perhaps try/except/finally, but it also has <b>else</b> - run <i>this code</i> if no exception happened.  Which is btw, not the same thing as shoving <i>this code</i> under the try clause - exception handling is best used when narrowly targeted.  So, while it makes conceptual sense - as per a number of answers here - I think it's keyword reuse at play too - <i>run this under certain conditions</i>.</span>
<span class="comment-copy">@Falanwe, there is a difference when the code is exited by <code>break</code>. The canonical use case is when the loop searches for something, and breaks when it finds it. The <code>else</code> is executed only if nothing is found.</span>
<span class="comment-copy">This is a most excellent answer. Treat your loops like a series of elif statements and the else behaviour will expose its natural logic.</span>
<span class="comment-copy">I also like this answer, but it is not drawing an analogy with a series of <code>elif</code> statements. There's <a href="http://stackoverflow.com/a/37643965/699305">an answer</a> that does, and it has one net upvote.</span>
<span class="comment-copy">well not exactly, a while loop could have the condition meet False right before it <code>break</code>s, in which case the <code>else</code> would not run but the condition is False.  Similarly with <code>for</code> loops it can <code>break</code> on the last element.</span>
<span class="comment-copy">Sounds very nice... but then you'd expect an <code>else</code> clause to be executed when things <i>don't</i> go right, wouldn't you? I'm already getting confused again...</span>
<span class="comment-copy">I have to disagree with you on "Technically, It isn't [semantically similar to every other <code>else</code>]", since the <code>else</code> is run when none of the conditions in the for loop evaluate to True, as I demonstrate in <a href="http://stackoverflow.com/a/37643965/5827215">my answer</a></span>
<span class="comment-copy">@TadhgMcDonald-Jensen You can also break the loop on a <code>False</code>. So the question of how the <code>for</code> is <i>broken</i> depends on the use case.</span>
<span class="comment-copy">That's right, I am asking for a way to somehow relate what happens to the English meaning of "else" (which is indeed reflected in other uses of <code>else</code> in python). You provide a good intuitive summary of what <code>else</code> does, @Moses, but not of how we could associate this behavior with "else". If a different keyword was used (e.g., <code>nobreak</code> as mentioned in <a href="http://stackoverflow.com/a/23748240/699305">this answer</a> to a related question), it would be easier to make sense of.</span>
<span class="comment-copy">It really has nothing to do with "things going right".  The else is purely executed when the <code>if</code>/<code>while</code> condition evaluates to false or <code>for</code> is out of items.  <code>break</code> exists the containing loop (after the <code>else</code>).  <code>continue</code> goes back and evaluates the loop condition again.</span>
<span class="comment-copy">What you say sounds very sensible, but lumping the three termination conditions together, "until [the condition] is False or breaks/continues", is wrong: Crucially, the <code>else</code> clause is executed if the loop is exited with <code>continue</code> (or normally), but <b>not</b> if we exit with <code>break</code>. These subtleties are why I'm trying to really grok what <code>else</code> catches and what it does not.</span>
<span class="comment-copy">@alexis yes I needed to clarify there. Edited. continue doesn't execute the else, but does return to the top of the loop which may then evaluate to false.</span>
<span class="comment-copy">I pretty much like this answer, but you can simplify: Omit the <code>end</code> label and just put the <code>goto loop</code> inside the <code>if</code> body. Maybe even outdent by putting the <code>if</code> on the same line as the label, and it suddenly looks very much like the orignal.</span>
<span class="comment-copy">@Bergi Yes, I think that makes it a bit clearer, thanks.</span>
<span class="comment-copy">Right. But a loop runs multiple times, so it's a little unclear how you mean to apply this to a for-loop. Can you clarify?</span>
<span class="comment-copy">@alexis I have redone my answer, I think it is a lot clearer now.</span>
<span class="comment-copy">I 'd suggest that it could be enhanced by saying that the usual purpose of a for/else loop is to examine items <i>until you've found what you're looking for and want to stop</i>, or you run out of items.  The "else" exists to handle the "you run out of items (without having found what you were looking for)" part.</span>
<span class="comment-copy">@supercat: Could be, but I don't know what the most common uses are out there. The <code>else</code> could also be used to do something when you're simply finished with all the items. Examples include writing a log entry, updating a user interface, or signaling some other process that you're done. Anything, really. Also, some pieces of code has the "successful" case end with a <code>break</code> inside the loop, and the <code>else</code> is used to handle the "error" case where you didn't find any suitable item during the iteration (maybe that was what you were thinking of?).</span>
<span class="comment-copy">The case I was thinking of was <i>precisely</i> the case where the successful case ends with a "break", and the "else" handles a lack of success.  If there's no "break" within a loop, the "else" code may as well simply follow the loop as part of the enclosing block.</span>
<span class="comment-copy">Unless you need to distinguish between the case where the loop went through all the iterable items without interruption (and that was a successful case) and the case where it didn't. Then you have to put the "finalising" code in the loop's <code>else</code> block, or keep track of the result using other means. I basically agree, I'm just saying I don't know how people use this feature and therefore I'd like to avoid making assumptions of whether the "<code>else</code> handles successful case" scenario or the "<code>else</code> handles unsuccessful case" scenario is more common. But you have a good point, so comment upvoted!</span>
<span class="comment-copy">I can't tell if this holds any water, because I am not familiar with the TPP paradigm and even after clicking through to the wikipedia page, there's too much material to absorb. How about you spell out how a loop becomes a generalization of a conditional statement, and what that means exactly?</span>
<span class="comment-copy">@alexis I've added one example. I'm trying to formulate another one, to show an example of single case -&gt; collection of cases.</span>
<span class="comment-copy">@meiamsome Right, thanks! Fixed :-)</span>
<span class="comment-copy">I like that, I think you're on to something. It ties in a little with how looping used to be implemented in the bad old days before loop keywords. (Namely: the check was placed at the <i>bottom</i> of the loop, with a <code>goto</code> the top on success.) But it's a shorter version of the top-voted answer...</span>
<span class="comment-copy">@alexis, subjective, but I find my way of expressing it easier to think about.</span>
<span class="comment-copy">actually I agree. If only because it's pithier.</span>
<span class="comment-copy">Where is the <code>else</code>? If you meant the <code>done:</code> label to stand proxy or <code>else:</code>, I believe you have it exactly backwards.</span>
<span class="comment-copy">@alexis The 'else' code would fill in the '...' <i>immediately before</i> the <code>done:</code> label.  The overall correspondence is, maybe, best said thus: Python has the <code>else</code>-on-loop construct so that you can express this control flow pattern without <code>goto</code>.</span>
<span class="comment-copy">There are other ways to execute this control flow pattern, e.g. by setting a flag. That's what the <code>else</code> avoids.</span>
