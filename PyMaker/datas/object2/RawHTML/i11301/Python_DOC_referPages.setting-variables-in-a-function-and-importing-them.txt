<div class="post-text" itemprop="text">
<p>I'm writing an adventure game, and I'm writing functions in different files, such as the <code>saveGame</code> function and <code>read</code> function. There are 4 main files, all interconnected. The main one is <code>agMain.py</code>. My issue is that I've imported one of my other files <code>agRead.py</code>, and call the function within that called <code>read()</code>. Here is the data for the <code>agRead.py</code>:</p>
<pre><code>import os
import operator
import sys
import agSave
import agCreation
def read():
    while True:
        try:
            file = open("agData.txt", "r")
        except:
            exec(open("agCreation.py").read())
            break
        break
    file = open("agData.txt", "r")
    data = file.readlines(0)
    encrypFName = data[0]
    encrypSName = data[1]
    encrypAge = data[2]
    encrypGender = data[3]
    encrypHealth = data[4]
    encrypMaxHealth = data[5]
    encrypArmour = data[6]
    encrypMaxArmour = data[7]
    encrypHealthPotions = data[8]
    encrypExp = data[9]
    encrypMaxExp = data[10]
    encrypLevel = data[11]
    encrypGold = data[12]
    encrypMaxGold = data[13]
    encrypPowerLevel = data[14]
    encrypMaxPowerExp = data[15]
    encrypPowerExp = data[16]
    encrypStage = data[17]
    fName = encrypFName.strip()
    sName = encrypSName.strip()
    age = encrypAge.strip()
    gender = encrypGender.strip()
    health = encrypHealth.strip()
    maxHealth = encrypMaxHealth.strip()
    armour = encrypArmour.strip()
    maxArmour = encrypArmour.strip()
    healthPotions = encrypHealthPotions.strip()
    exp = encrypExp.strip()
    maxExp = encrypMaxExp.strip()
    level = encrypLevel.strip()
    gold = encrypGold.strip()
    maxGold = encrypMaxGold.strip()
    powerLevel = encrypPowerLevel.strip()
    maxPowerExp = encrypMaxPowerExp.strip()
    powerExp = encrypPowerExp.strip()
    stage = encrypStage.strip()
</code></pre>
<p>As you can see, it sets variables such as <code>stage</code> and <code>level</code>. My <code>agMain</code> files however:</p>
<pre><code>import os
import operator
import sys
import agSave
import agRead
while True:
    agRead.read()
    if (stage == 1):
        exec(open("agStage1.py").read())
    elif (stage == 2):
        exec(open("agStage2.py").read())
    elif (stage == 3):
        exec(open("agStage3.py").read())
    elif (stage == 4):
        exec(open("agStage4.py").read())
    elif (stage == 5):
        exec(open("agStage5.py").read())
    elif (stage == 6):
        exec(open("agStage6.py").read())
    elif (stage == 7):
        exec(open("agStage7.py").read())
    elif (stage == 8):
        exec(open("ageStage8.py").read())
    elif (stage == 9):
        exec(open("agStage9.py").read())
    elif (stage == 10):
        exec(open("agStage10.py").read())
    elif (stage &gt; 10):
        for i in range(100):
            print("Game over!")
        print("****************")
        print("Well done, you have completed the game!")
        exit()
    else:
        print("An error has occured.")
        continue
</code></pre>
<p>As you can see here, it uses the <code>stage</code> when it from the function in the code. But it can't. If I run this, it says stage is not defined, like I hadn't run the function. Is it possible to set variables in a function, use the function, and use the variables in creates in a different file?</p>
<p>EDIT</p>
<p>At the time I made this, I had no knowledge of classes, so I apologise. Everyone who is having a similar problem (sharing variables between functions) just make a class with the functions you want as methods. It saves a lot of hassle!</p>
</div>
<div class="post-text" itemprop="text">
<p>The variables are only visible from inside <code>read</code>.</p>
<p>Contain the variables you want to use by doing something like this.</p>
<p><code>agRead.py</code></p>
<pre><code>class Conf(object):
    pass


def read():
    while True:
        try:
            file = open("agData.txt", "r")
        except:
            exec(open("agCreation.py").read())
            break
        break
    file = open("agData.txt", "r")
    data = file.readlines(0)
    encrypFName = data[0]
    encrypSName = data[1]
    encrypAge = data[2]
    encrypGender = data[3]
    encrypHealth = data[4]
    encrypMaxHealth = data[5]
    encrypArmour = data[6]
    encrypMaxArmour = data[7]
    encrypHealthPotions = data[8]
    encrypExp = data[9]
    encrypMaxExp = data[10]
    encrypLevel = data[11]
    encrypGold = data[12]
    encrypMaxGold = data[13]
    encrypPowerLevel = data[14]
    encrypMaxPowerExp = data[15]
    encrypPowerExp = data[16]
    encrypStage = data[17]

    conf = Conf()

    conf.fName = encrypFName.strip()
    conf.sName = encrypSName.strip()
    conf.age = encrypAge.strip()
    conf.gender = encrypGender.strip()
    conf.health = encrypHealth.strip()
    conf.maxHealth = encrypMaxHealth.strip()
    conf.armour = encrypArmour.strip()
    conf.maxArmour = encrypArmour.strip()
    conf.healthPotions = encrypHealthPotions.strip()
    conf.exp = encrypExp.strip()
    conf.maxExp = encrypMaxExp.strip()
    conf.level = encrypLevel.strip()
    conf.gold = encrypGold.strip()
    conf.maxGold = encrypMaxGold.strip()
    conf.powerLevel = encrypPowerLevel.strip()
    conf.maxPowerExp = encrypMaxPowerExp.strip()
    conf.powerExp = encrypPowerExp.strip()
    conf.stage = encrypStage.strip()
    return conf
</code></pre>
<p>and <code>agMain.py</code></p>
<pre><code>import agRead
while True:
    conf = agRead.read()
    if conf.stage == 1:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow">https://docs.python.org/3/tutorial/controlflow.html#defining-functions</a>:</p>
<blockquote>
<p>More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a <a href="https://docs.python.org/3/reference/simple_stmts.html#global" rel="nofollow">global</a> statement), although they may be referenced.</p>
</blockquote>
<p>Assigning to a variable in a function implicitly creates a local variable in that function, unless you've declared it as <code>global</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>By using chaining, you can reduce the number of lines used and increase readability.   </p>
<pre><code>  class Conf(object):
        pass

def read():
    while True:
        try:
            file = open("agData.txt", "r")
        except:
            exec(open("agCreation.py").read())
            break
        break
    file = open("agData.txt", "r")
    data = file.readlines(0)

    conf = Conf()

    conf.fName     = data[0].strip()
    conf.sName     = data[1].strip()
    conf.age       = data[2].strip()
    conf.gender    = data[3].strip()
    conf.health    = data[4].strip()
    conf.maxHealth = data[5].strip()
    conf.armour    = data[6].strip()
    conf.maxArmour = data[7].strip()
    conf.healthPotions = data[8].strip()
    conf.exp       = data[9].strip()
    conf.maxExp    = data[10].strip()
    conf.level     = data[11].strip()
    conf.gold      = data[12].strip()
    conf.maxGold   = data[13].strip()
    conf.powerLevel = data[14].strip()
    conf.maxPowerExp =data[15].strip()
    conf.powerExp  = data[16].strip()
    conf.stage     = data[17].strip()
    return conf
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to understand a little more about <a href="http://python-textbok.readthedocs.io/en/latest/Variables_and_Scope.html" rel="nofollow"><em>scoping</em></a>. Inside a function, names that are bound by an assignment statement are created in the <em>local namespace</em> of the function call. This namespace is created when the function call is made and initialised with the values of the parameters bound to their names. When the function returns (or raises an exception) the namespace is deleted, and the names are no longer available.</p>
<p>Since you want to read lots of different values, consider creating an instance of a class. Instances also have a namespace, and names bound in that namespace will continue to be available until deleted or until the object is garbage collected.</p>
<p>After @Merlin published his helpful answer I decided to update this answer to include a data-driven version, reproduced below (but not tested). Thinking about this might lead you to a function that can create/initialise several different types of object.</p>
<p>Since execution speed is unlikely to be an issue I preferred an approach that was more generalised.</p>
<pre><code>class Conf(object):
    pass

def read():
    while True:
        try:
            file = open("agData.txt", "r")
        except:
            exec(open("agCreation.py").read())
            break
        break
    file = open("agData.txt", "r")

    conf = Conf()

    names = ["fName", "sName", "age", "gender", "health", "maxHealth",
         "armour", "maxArmour", "healthPotions", "exp", "maxExp",
         "level", "gold", "maxGold", "powerLevel", "maxPowerExp",
         "powerExp", "stage"]
    for name in names:
        setattr(conf, name, next(file).strip()
    return conf
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes it's possible, but variable would be available only after function execution:</p>
<pre><code>### file agRead.py ###
def read():
    # some code there
    read.my_super_var = 'value'

### file agMain.py ###
import agRead

agRead.read()
print(agRead.read.my_super_var) # value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Okay, so I have worked this out. Thanks to everyone who answered, but holdenweb and nightcrawler especially. I have created a class in the agRead.py, and put all of the variables as a  part of that class, before returning the class. Here is my agRead.py now:</p>
<pre><code>import os
import operator
import sys
import agSave
import agCreation
class Conf(object):
    pass

# READ FUNCTION
def read():
    try:
        open("agData.txt", "r")
    except:
        exec(open("agCreation.py").read())
    file = open("agData.txt", "r")
    data = file.readlines(0)
    encrypFName = data[0]
    encrypSName = data[1]
    encrypAge = data[2]
    encrypGender = data[3]
    encrypHealth = data[4]
    encrypMaxHealth = data[5]
    encrypArmour = data[6]
    encrypMaxArmour = data[7]
    encrypHealthPotions = data[8]
    encrypExp = data[9]
    encrypMaxExp = data[10]
    encrypLevel = data[11]
    encrypGold = data[12]
    encrypMaxGold = data[13]
    encrypPowerLevel = data[14]
    encrypMaxPowerExp = data[15]
    encrypPowerExp = data[16]
    encrypStage = data[17]

    conf = Conf()

    conf.fName = encrypFName.strip()
    conf.sName = encrypSName.strip()
    conf.age = encrypAge.strip()
    conf.gender = encrypGender.strip()
    conf.health = encrypHealth.strip()
    conf.maxHealth = encrypMaxHealth.strip()
    conf.armour = encrypArmour.strip()
    conf.maxArmour = encrypArmour.strip()
    conf.healthPotions = encrypHealthPotions.strip()
    conf.exp = encrypExp.strip()
    conf.maxExp = encrypMaxExp.strip()
    conf.level = encrypLevel.strip()
    conf.gold = encrypGold.strip()
    conf.maxGold = encrypMaxGold.strip()
    conf.powerLevel = encrypPowerLevel.strip()
    conf.maxPowerExp = encrypMaxPowerExp.strip()
    conf.powerExp = encrypPowerExp.strip()
    conf.stage = encrypStage.strip()
    return conf
</code></pre>
<p>and my agMain.py:</p>
<pre><code> # Main
    # Will open a stage depending on the stage the user is at.
    import os
    import operator
    import sys
    import agSave
    import agRead
    #Read the file
    while True:
        agRead.read()
        if (conf.stage == 1):
            exec(open("agStage1.py").read())
        elif (conf.stage == 2):
            exec(open("agStage2.py").read())
        elif (conf.stage == 3):
            exec(open("agStage3.py").read())
        elif (conf.stage == 4):
            exec(open("agStage4.py").read())
        elif (conf.stage == 5):
            exec(open("agStage5.py").read())
        elif (conf.stage == 6):
            exec(open("agStage6.py").read())
        elif (conf.stage == 7):
            exec(open("agStage7.py").read())
        elif (conf.stage == 8):
            exec(open("ageStage8.py").read())
        elif (conf.stage == 9):
            exec(open("agStage9.py").read())
        elif (conf.stage == 10):
            exec(open("agStage10.py").read())
        elif (conf.stage &gt; 10):
            for i in range(100):
                print("Game over!")
            print("****************")
            print("Well done, you have completed the game!")
            exit()
        else:
            print("An error has occured.")
            continue
</code></pre>
<p>And this works perfectly, thank you everyone! This is an amazing community, and I hope to become a real member of it! Thanks again!</p>
</div>
<span class="comment-copy">You should remove all those <code>exec</code>'s.  You can just as easily import those stages and call a function for them.</span>
<span class="comment-copy"><code>exec(open("agStage%d.py"%stage).read())</code></span>
<span class="comment-copy">Nice idea gboffi, I would use that but I only want it to go up to a certain stage, so it wouldn't make a massive difference. Thanks though!</span>
<span class="comment-copy">This is entirely true Brendan Abel, I will do that! xD</span>
<span class="comment-copy">as a beginner line up "=" signs  so you easily debug code and  fName = data[0].strip()</span>
<span class="comment-copy">Awesome, this makes sense, I'll try it out. Thanks for the reply!</span>
<span class="comment-copy">I hope I don't sound too stupid, but I don't have a lot of experience with coding in Javascript or C/C+/C++. Could you explain to me how I would go about making my function global so that my other classes could use the variables set inside?</span>
<span class="comment-copy">Not the function; the variable.</span>
<span class="comment-copy">Ah, okay, that makes sense. I'll try this out</span>
