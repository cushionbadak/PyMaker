<div class="post-text" itemprop="text">
<p>The following [incomplete] code is designed to take in an <em>n</em> to <em>x</em> number, of length <em>x-n</em>, and return the value of the next pandigital number. The code identifies which number between <em>n</em> and <em>x</em> is missing from the number passed in as an argument to the function, and returns (for the time being, until the function is further developed), two lists, the original number itself with its individual digits as members of a list, and a list, with the numbers <em>n</em> to <em>x</em> as members, with those numbers which are present in the original number of length <em>x-n</em> being replaced by the Boolean value <em>True</em>.</p>
<pre><code>def nextPandigital(n,lower,upper):
    digits = []
    requiredDigits = []

    #Completed loop
    for digit in str(n):
    digits.append(int(digit))

    #Completed loop
    for num in range(lower,upper+1):
    requiredDigits.append(num)

    for number in requiredDigits:
        if str(number) in str(digits):
            x = requiredDigits.index(number)
            #requiredDigits[x] = 'True'
            requiredDigits[x] = True
    return digits, requiredDigits
</code></pre>
<p>Although, for the input parameters of <em><code>nextPandigital(1023456789,0,9)</code></em> in Enthought Canopy, the second list returned should read <em><code>[True,True,True,True,True,True,True,True,True,True]</code></em>, the value of the second list returned is, in fact <em><code>[True,1,True,True,True,True,True,True,True,True]</code></em>, with the 1 from the original <em><code>requiredDigits</code></em> list not being replaced by <em><code>True</code></em>.</p>
<p>I know that there is no issue with the loop, or the general flow of the code, for when the <em><code>requiredDigits[x] = True</code></em> line of code is commented, and the currently commented code is uncommented, the code works as it is intended to, with all digits in <em><code>requiredDigits</code></em> being replaced by the String value '<code>True.</code>'</p>
<p>I have attempted to resolve this issue. However, I am not able to pinpoint its source. I have considered to fact that <em><code>True == 1</code></em> returns True. However, when the value True is replaced by False, in the line <em><code>requiredDigits[x] = True</code></em>, the code still works as it is intended to.</p>
<p><strong>Any answer/help/suggestion/advice on this matter would be highly appreciated. Thank you in advance.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is with using <code>index</code> to find where to assign to. Since <code>True</code> is equal to 1, you're mistakenly thinking that the <code>True</code> you entered for <code>0</code> is the <code>1</code> you want to replace next.</p>
<p>A solution would be to use <code>enumerate</code> to get indexes as you iterate over your list, rather than needing to find them later using <code>index</code>:</p>
<pre><code>for x, number in enumerate(requiredDigits):
    if str(number) in str(digits):
        requiredDigits[x] = True
</code></pre>
<p>A better solution in general would be to use a list comprehension to create the list in one go, rather than starting with numbers and replacing some of them later:</p>
<pre><code>requiredDigits = [True if num in digits else num for num in range(lower,upper+1)]
</code></pre>
<p>I'm also getting rid of the unnecessary calls to <code>str</code> in the membership test against <code>digits</code>. You were doing substring testing, rather than testing if the numbers themselves were in the list. That probably wasn't going to cause errors, since the numbers you care about are all one digit long, and the string representation of a list doesn't have any extraneous digits. But in general, its not a good idea to use string operations when you don't need to.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are checking the same list that you are updating and that is <strong>always</strong> dangerous. </p>
<p>At the second iteration your variables are:</p>
<pre><code>number=1
requiredDigits = [True, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>So when you are doing <code>requiredDigits.index(1)</code> there is a match but it does not reach the <code>1</code> since it happens in <code>True==1</code> so it returns that the index <code>0</code></p>
<p>But in general, this implementation is not much pythonic, better check <a href="https://stackoverflow.com/a/37524936/1345165">Blckknght's answer</a></p>
</div>
<span class="comment-copy">I should probably clarify: An <i>n</i> to <i>x</i> number means that the number is question contains all the digits from the given number <i>n</i> to the given number <i>x</i>.</span>
<span class="comment-copy">Thanks for the answer. It really helped. However, I am not able to understand the exact purpose of <i>enumerate</i>. Does it simply assign a place value, similar to an index value, for each member of a list, or does it do something more?</span>
<span class="comment-copy">The builtin function <code>enumerate</code> works on any kind of iterable. It turns the iterable's individual values into <code>index, value</code> 2-tuples. You can read <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">its documentation</a>, or <a href="http://www.python.org/peps/pep-0279.html" rel="nofollow noreferrer">PEP 279</a>, which proposed its addition to Python back in version 2.3.</span>
<span class="comment-copy">So, essentially, <i>x, number</i> are the variables representing the two values of the tuple.</span>
<span class="comment-copy">Yes, the two values are unpacked by the <code>for</code> loop, just like you can unpack a tuple with an assignment: <code>x, number = two_tuple</code></span>
<span class="comment-copy">This answer helped me understand the root issue with my code, and helped me understand Blckknght's answer. Thanks!</span>
