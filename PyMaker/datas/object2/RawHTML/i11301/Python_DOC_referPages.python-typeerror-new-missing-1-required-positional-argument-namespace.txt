<div class="post-text" itemprop="text">
<p>I try to initialize class using</p>
<p><code>tsf = TimeSeriesFeature(cut_avg, interval)</code></p>
<p>but I got TypeError: __new__() missing 1 required positional argument: 'namespace'. </p>
<p>The init code of TimeSeriesFeature is below:</p>
<pre><code>class TimeSeriesFeature(BasicFeature):
    def __init__(self, cut_avg, interval):
        super().__init__()
        self.cut_avg = cut_avg
        self.interval = interval
        self.get_avg()
</code></pre>
<p>and BasicFeature init code:</p>
<pre><code>class BasicFeature(ABCMeta):
    def __init__(self):
        self.times = {}
        self.avg = {}
</code></pre>
<p>and I'm using python3.5. Is there any mistake?</p>
</div>
<div class="post-text" itemprop="text">
<p>The error you're getting is from the fact that instantiation of metaclass does not use it's <code>__init__</code> method, but rather it's <code>__new__</code> method which (excluding self) expects 3 arguments, last being said <em>namespace</em>.</p>
<p>As it stands now your class inherits from <code>ABCMeta</code> (which is <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta" rel="noreferrer">a metaclass</a>), therefore it is also a metaclass:</p>
<pre><code>class BasicFeature(ABCMeta):
    ...
</code></pre>
<p>but I think you'd rather set <code>ABCMeta</code> as a metaclass of your class:</p>
<pre><code>class BasicFeature(metaclass=ABCMeta):
    ...
</code></pre>
<p>That way your class becomes an ordinary class, with <code>ABCMeta</code> as it's metaclass.</p>
<p>If you'd like <code>BasicFeature</code> to be a abstract (in other words impossible to initialize) class, add an abstract method to it, like this:</p>
<pre><code>class BasicFeature(metaclass=ABCMeta):

    @abstractmethod
    def get_avg():
        pass
</code></pre>
<p>and overload it in subclass without the <code>@abstractmethod</code> decorator:</p>
<pre><code>class TimeSeriesFeature(BasicFeature):

    def get_avg():
        # ... some code
        # ... some code
</code></pre>
<p>Then, users who attempt to instantiate <code>BasicFeature</code> will get an error about <code>get_avg()</code> being abstract, but users who instantiate <code>TimeSeriesFeature</code> will not. More details available in <a href="https://docs.python.org/3/library/abc.html#abc.abstractmethod" rel="noreferrer">the documentation</a></p>
</div>
<span class="comment-copy">Why do you inherit from <code>ABCMeta</code>? It's a metaclass.</span>
<span class="comment-copy">I don't want others to initialize BasicFeature, so I inherit from ABCMeta. So is there any good way to prevent it?</span>
<span class="comment-copy">I've extended my answer to also address question in your comment. Without more extensive code sample I don't know what method would be a good candidate to be the <code>@abstractmethod</code>, but I hope that the example above is clear.</span>
