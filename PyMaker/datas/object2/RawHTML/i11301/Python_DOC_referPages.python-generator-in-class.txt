<div class="post-text" itemprop="text">
<p>I am learning generator from this <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">thread</a>. This is really a good example for generator. But I am confused by one of the example code.</p>
<pre><code>&gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs
...    crisis = False
...    def create_atm(self):
...        while not self.crisis:
...            yield "$100"
&gt;&gt;&gt; hsbc = Bank() # when everything's ok the ATM gives you as much as you want
&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()
&gt;&gt;&gt; print(corner_street_atm.next())  
$100  
&gt;&gt;&gt; print(corner_street_atm.next())  
$100  
&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])  
['$100', '$100', '$100', '$100', '$100']  
&gt;&gt;&gt; hsbc.crisis = True # crisis is coming, no more money!  
&gt;&gt;&gt; print(corner_street_atm.next())  
&lt;type 'exceptions.StopIteration'&gt;   
&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # it's even true for new ATMs  
&gt;&gt;&gt; print(wall_street_atm.next())  
&lt;type 'exceptions.StopIteration'&gt;  

&gt;&gt;&gt; hsbc.crisis = False # trouble is, even post-crisis the ATM remains empty
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;

&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # build a new one to get back in business
&gt;&gt;&gt; for cash in brand_new_atm:
...    print cash
$100
$100
$100
$100
$100
$100
$100
$100
$100
...
</code></pre>
<p>When <strong>hsbc.crisis</strong> is reset to <strong>False</strong>, the <strong>corner_steet_atm</strong> can not yield anything but StopIteration.
Why does this happen. I think the corner_street_atm is not empty after crisis.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is coming from the fact that when you say</p>
<pre><code>corner_street_atm = hsbc.create_atm()
</code></pre>
<p>You are calling the function once, and that is all the times it will be called.  Thus, let's keep a view of what is happening</p>
<pre><code>  def create_atm(self):
        # Called right away, when you say the above line and only then
        print("Called function") 

        # Loops while crisis = False
        while not self.crisis: 
            yield "$100"
</code></pre>
<p>Now, we can ask the question of where our method is looking when crisis is True, and we find that it is point at the spot shown below:</p>
<pre><code>  def create_atm(self):
        # Called right away, when you say the above line and only then
        print("Called function") 

        # Loops while crisis = False
        while not self.crisis: 
            yield "$100"
            #&lt;------ Where you function points after you set crisis to false and get the next
</code></pre>
<p>Well, there is nothing there, so you get an error.</p>
<p>What you are really looking for appears to be an infinite loop in atm.  Something like this:</p>
<pre><code>class Bank():
    crisis = False

    def create_atm(self):
        print("Called function")
        while True:
            if not self.crisis:
                yield "$100"
            else:
                yield "$0"
</code></pre>
<p>Careful with this, as your final call </p>
<pre><code>for cash in brand_new_atm:
    print(cash)
</code></pre>
<p>will loop forever because you currently don't see how much cash is in the atm (So as long as there isn't a crisis it will just spew out dollar bills.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally it is due to that you called the <code>corner_street_atm.next()</code> after you set the <code>hsbc.crisis=True</code>. If you do it like this, you would have no problem:</p>
<pre><code>hsbc.crisis=False

corner_street_atm = hsbc.create_atm()

hsbc.crisis=True

hsbc.crisis=False

corner_street_atm.next()
Out[54]: '$100'
</code></pre>
<p>The reason is the the <code>corner_street_atm</code> is a generator(iterator) object, and once The generator created in this case will call o with no arguments for each call to its next() method; if the value returned is equal to sentinel, <code>StopIteration</code> will be raised, otherwise the value will be returned<sup><a href="https://docs.python.org/2/library/functions.html#iter" rel="nofollow">[1]</a></sup>.</p>
<p>The thing is once you call the <code>corner_street_atm.next()</code> after the <code>hsbc.crisis=True</code>, the Exception will be raised. And once the exception is raised, there is not way to loop this object any more and unless you create a new object!</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that your generator (which is a type of iterator) has been exhausted. Once it has been exhausted, an iterator should not flip back and forth between yielding values and raising the <code>StopIteration</code> (in other words your example is behaving as it should even though it isn't what you want it to do). Here is some more about the iterator protocol:</p>
<p><a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow">https://docs.python.org/3/tutorial/classes.html#iterators</a></p>
<p>The reason the generator stops yielding values in this particular case is that once you exit the <code>while</code> loop (which happens as soon as <code>next</code> is called when <code>'crisis'</code> is True), there is no way to re enter the loop. </p>
<p>What you most likely want to be doing is using the <code>__iter__</code> magic method on a separate <code>ATM</code> object. More about that here:</p>
<p><a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow">https://docs.python.org/3/library/functions.html#iter</a></p>
<p>It might look something like this: </p>
<pre><code>class ATM():
    def __init__(self, owner):
        self.owner = owner
    def __iter__(self):
        yield "$100"
    def __call__(self):
        if self.owner.crisis is True:
            return 'crisis!'

class Bank(): # let's create a bank, building ATMs
    crisis = False
    def create_atm(self):
        return ATM(self)
</code></pre>
<p>You'll want to get an atm iterator this way: </p>
<pre><code>&gt;&gt;&gt; hsbc = Bank() 
&gt;&gt;&gt; corner_street_atm = hsbc.create_atm() # this way
&gt;&gt;&gt; corner_street_atm = ATM(hsbc) # or this way
&gt;&gt;&gt; corner_street_atm_iterator = iter(corner_street_atm, 'crisis!')
</code></pre>
<p>The last line uses an optional form of the <code>iter</code> function since a second argument is supplied. The iterator returned by this second form raises <code>StopIteration</code> if <code>corner_street_atm.__call__()</code> returns the sentinel value that was supplied to <code>iter</code>. In this case the sentinel is <code>'crisis!'</code>. </p>
<p>And iterate through it like this:</p>
<pre><code>&gt;&gt;&gt; print(corner_street_atm_iterator.next())  
$100  
</code></pre>
<p>NOTE: an <code>ATM</code> object never runs out of money if you don't use <code>iter</code> with the <code>'crisis!'</code> sentinel argument! </p>
<pre><code>infinite_atm_iterator = iter(ATM(some_bank))
</code></pre>
</div>
