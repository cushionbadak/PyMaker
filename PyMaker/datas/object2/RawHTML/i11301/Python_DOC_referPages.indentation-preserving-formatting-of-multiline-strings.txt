<div class="post-text" itemprop="text">
<p>I generate bits of (C++) code using format strings such as</p>
<pre><code>memfn_declaration = '''\
  {doc}
  {static}auto {fun}({formals}){const}
    -&gt; {result};
'''
</code></pre>
<p>Format strings are nice for this, but is there a way to make them keep the indentation level for <code>{doc}</code> here?  It's typically multiline.</p>
<p>I know I can just indent the string corresponding to <code>doc</code> by two spaces, I know there are plenty of functions to this end, but that's not what I'm asking: I'm looking for something that would work without tweaking the strings I pass.</p>
</div>
<div class="post-text" itemprop="text">
<p>Now that you've posted your own answer and clarified at little more about what you want. I think it would be slightly better to implement it by defining your own <code>str</code> subclass that extends the way strings can be formatted by supporting a new conversion type, <code>'i'</code>, which must be followed by a decimal number representing the level of indentation desired.</p>
<p>Here's an implementation that works in both Python 2 &amp; 3:</p>
<pre><code>import re
from textwrap import dedent
try:
    from textwrap import indent
except ImportError:
    def indent(s, prefix):
        return prefix + prefix.join(s.splitlines(True))

class Indentable(str):
    indent_format_spec = re.compile(r'''i([0-9]+)''')

    def __format__(self, format_spec):
        matches = self.indent_format_spec.search(format_spec)
        if matches:
            level = int(matches.group(1))
            first, sep, text = dedent(self).strip().partition('\n')
            return first + sep + indent(text, ' ' * level)

        return super(Indentable, self).__format__(format_spec)

sample_format_string = '''\
  {doc:i2}
  {static}auto {fun}({formals}){const}
    -&gt; {result};
'''

specs = {
    'doc': Indentable('''
        // Convert a string to a float.
        // Quite obsolete.
        // Use something better instead.
    '''),
    'static': '',
    'fun': 'atof',
    'formals': 'const char*',
    'const': '',
    'result': 'float',
}

print(sample_format_string.format(**specs))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>  // Convert a string to a float.
  // Quite obsolete.
  // Use something better instead.
  auto atof(const char*)
    -&gt; float;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue is this:</p>
<pre><code>'''\
</code></pre>
<p>The backslash will ignore all whitespaces up to the next character. Remove the backslash.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm looking for something which is light-weight on the caller site.  I can live with the following compromise: I use the fact that format strings are allowed to query for attributes (<code>0.foo</code>) or items (<code>0['foo']</code>) to pass the indentation level in the format string.</p>
<pre><code>import textwrap

class Indent(str):
    def __new__(cls, *args, **kwargs):
        return super(Indent, cls).__new__(cls, *args, **kwargs)

    def __getitem__(self, level):
        first, _, text = textwrap.dedent(self).strip().partition('\n')
        text = textwrap.indent(text, ' ' * level)
        return first + '\n' + text

def indent_doc(d):
    res = dict(d)
    res['doc'] = Indent(d['doc'])
    return res

format = '''
  {doc[2]}
  {static}auto {fun}({formals}){const}
    -&gt; {result};
'''

specs = {
    'doc': '''
    // Convert a string to a float.
    // Quite obsolete.
    // Use something better instead.
    ''',
    'static': '',
    'fun': 'atof',
    'formals': 'const char*',
    'const': '',
    'result': 'float',
}
print(format.format_map(indent_doc(specs)))
</code></pre>
<p>that gives:</p>
<pre><code>$ python /tmp/foo.py

  // Convert a string to a float.
  // Quite obsolete.
  // Use something better instead.
  auto atof(const char*)
    -&gt; float;
</code></pre>
<p>I'd be happy to read opinions about that.</p>
</div>
<span class="comment-copy">Please show sample doc input string and desired result.</span>
<span class="comment-copy">This is nice, indeed, thanks a lot!  Originally I was looking for a means <i>not</i> to specify the indentation level, just deducing it from the format string, but that seems way more tricky.</span>
<span class="comment-copy">Why did you import <code>string</code>?  It seems useless.</span>
<span class="comment-copy">You're right, 'import string` wasn't needed â€” it was just a leftover from some experimental code involving <code>string.Formatter</code>.</span>
<span class="comment-copy">You've left some code out. The last line raises an <code>AttributeError: 'str' object has no attribute 'format_map'</code>.</span>
<span class="comment-copy">Actually that's probably more a problem of version of Python: it appeared in Python 3.2.  <a href="https://docs.python.org/3/library/stdtypes.html#str.format_map" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.format_map</a></span>
