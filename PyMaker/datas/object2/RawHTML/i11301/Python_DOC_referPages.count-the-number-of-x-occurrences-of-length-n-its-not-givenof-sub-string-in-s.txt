<div class="post-text" itemprop="text">
<p>I'm not able to get the number of occurrences of a substring that has n-lenght in a string. For example if the string is</p>
<pre><code>CCCATGGTtaGGTaTGCCCGAGGT
</code></pre>
<p>and n is </p>
<pre><code>3
</code></pre>
<p>The output must be something like :</p>
<pre><code>'CCC' : 2, 'GGT' :3
</code></pre>
<p>The input is a list of lists so I get evry string of list but Im not able to go ahead and the output is the dic of all strings</p>
<p>Code:</p>
<pre><code>def get_all_n_repeats(n,sq_list):
    reps={}
    for i in sq_list:
        if not i:
            continue
        else:   
            for j in i:
                ........#Here the code I want to do#......                  
return reps
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter</a></p>
<pre><code>from collections import Counter

def count_occurrences(input, n):
    candidates = []
    for i, c in enumerate(st):
        try:
            candidates.append('{}{}{}'.format(st[i], st[i+1], st[i+2]))
        except IndexError:
            continue

    output = {}
    for k,v in Counter(candidates).items():
        if v &gt; 1:
            output[k] = v

st = "CCCATGGTtaGGTaTGCCCGAGGT"
n = 3

count_occurrences(st, n)
# {'GGT': 3, 'CCC': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A really simple solution:</p>
<pre><code>from collections import Counter

st = "CCCATGGTtaGGTaTGCCCGAGGT"
n = 3

tokens = Counter(st[i:i+n] for i in range(len(st) - n + 1))
print tokens.most_common(2)
</code></pre>
<p>After it is up to you to make it a helper function.</p>
</div>
<div class="post-text" itemprop="text">
<p>A very explicit solution:</p>
<pre><code>s = 'CCCATGGTtaGGTaTGCCCGAGGT'
n = 3
# All possible n-length strings
l = [s[i:i + n] for i in range(len(s) - (n - 1))]
# Count their distribution
d = {}
for e in l:
    d[e] = d.get(e, 0) + 1
print(d)
</code></pre>
</div>
<span class="comment-copy">Why is it <code>GGT</code> and not <code>GTt</code>?</span>
<span class="comment-copy">You need to at least show something you have tried.</span>
<span class="comment-copy">Your output and your input don't make sense. If you split your input string into three letter strings, you get <code>['CCC', 'ATG', 'GTt', 'aGG', 'TaT', 'GCC', 'CGA', 'GGT']</code> so I don't know where you got <code>GGT</code> in your output.</span>
<span class="comment-copy">What is so unclear about this question? It makes perfect sense.</span>
<span class="comment-copy">@BurhanKhalid I think his candidates are <code>['CCC', 'CCA', 'CAT', 'ATG', 'TGG', 'GGT', 'GTt', 'Tta', 'taG', 'aGG', 'GGT', 'GTa', 'TaT', 'aTG', 'TGC', 'GCC', 'CCC', 'CCG', 'CGA', 'GAG', 'AGG', 'GGT']</code>.</span>
<span class="comment-copy"><code>Counter(candidates).most_common()</code></span>
