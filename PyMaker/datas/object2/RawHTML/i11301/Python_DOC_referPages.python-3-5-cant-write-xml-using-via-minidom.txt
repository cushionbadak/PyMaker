<div class="post-text" itemprop="text">
<p>I'm a newb with python and xml parsing, so I've spent a good amount of time (over 20 hours) rummaging through forums to find how to achieve what I'm after. Most of the threads I've seen had solutions for my problem, but they are dated and the python version is different so I can't use them; they didn't work when I tried.</p>
<p>What I want to do:</p>
<ul>
<li>parse an xml</li>
<li>alter its contents based on certain conditions</li>
<li>rewrite out the entire xml with those changes as a new xml formatting retained</li>
</ul>
<p>What I'm using:</p>
<ul>
<li>python 3.5</li>
<li>minidom and tkinter modules</li>
</ul>
<p>Here is the error I'm getting when trying to write out the new xml:</p>
<p>this_xml.write(ofile)<br/>
AttributeError: 'Document' object has no attribute 'write'</p>
<p>I've tried ElementTree and lxml, but I've made the most progress with minidom so I would prefer to use it.</p>
<p>Here (I think) is the pertinent code:</p>
<pre><code>import tkinter
from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
from xml.dom.minidom import parse
import xml
import os
import xml.dom.minidom

root = Tk()
root.withdraw()
file_path = filedialog.askopenfilename(filetypes=[("XML",".xml")])
filename, file_extension = os.path.splitext(os.path.basename(file_path))

if file_extension ==".xml":
    OutputFileName = filename[:-2] + "VS_" + filename[-2:] + "_NEW" + file_extension
    this_xml = xml.dom.minidom.parse(file_path)
    xml_contents = this_xml.documentElement

    #do stuff

    ofile = open(OutputFileName, 'wb')
    this_xml.write(ofile)  
    #xml_contents.write(ofile)
</code></pre>
<p>I'm sure there're tons of stupid calls I'm doing here. In the #do stuff part I'm reading certain node data, changing it, and printing the result.  The prints are looking good, but now I just can't get those changes to take form.</p>
<p>Before I revert back to python 2.7 (on which most of the walkthroughs/tutorials/examples I've seen are based) I would greatly appreciate any help.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You're getting this error because <code>this_xml</code> is a <code>Document</code>, and <code>Document</code> objects don't have a <code>write()</code> method. Take a look at the <a href="https://docs.python.org/3/library/xml.dom.minidom.html" rel="nofollow">documentation</a>. <code>xml.dom.minidom.parse()</code> returns a <code>Document</code>, which is a subclass of <code>Node</code>. You'll probably want to use one of the methods listed <a href="https://docs.python.org/3/library/xml.dom.minidom.html#dom-objects" rel="nofollow">here</a> to write the XML to a file -- either <code>toxml()</code> or <code>toprettyxml()</code> to turn the <code>Document</code> into a string that you can write to a file, or <code>writexml()</code> to write the XML directly:</p>
<pre><code>with open("myfile.xml", "w") as xml_file:
    this_xml.writexml(xml_file)
</code></pre>
<p>Note also that you shouldn't use a capitalized camelcase name like <code>OutputFileName</code> for a regular variable. That name format is reserved for class names. The idiomatic way to write this variable name in Python would be <code>output_file_name</code>.</p>
</div>
<span class="comment-copy">Firstly, you can install Python 2 along with Python 3. So, if examples are written for Python 2, there's no excuse not to try them with Python 2. Then,  a minimal but complete example is missing, making your question off-topic. You shouldn't ever have to write "Here (I think) is ...", after extracting the minimal example you are supposed to know and anyone that cares should be able to take the code and reproduce it.</span>
<span class="comment-copy">Thank you for the extremely detailed response, Ben!  I fixed all the camelcased names, and will get into the habit of avoiding them.    Copy-pasting your code, replacing "myfile.xml" with output_file_name, I get no more errors.  However, I can't locate the file ( I searched the whole drive for the string output_file_name; I did print(output_file_name) and searched for that. )     Ideally I'd like to use toprettyxml to fix the formatting, but first I'd like to see what that outputted xml looks like. Should I open a new thread?  After all, the error is indeed fixed, thanks to you!</span>
<span class="comment-copy">Interesting.  So I did this instead and the xml showed up all nice-like:     full_file_path = filedialog.askopenfilename(filetypes=[("XML",".xml")])     file_path = os.path.dirname(full_file_path) + "/"     with open(output_file_name, "w") as xml_file:     this_xml.writexml(xml_file)  I didn't even have to prettyprint it, which is a good thing because I was getting expat errors, and it looks perfect.</span>
<span class="comment-copy">Happy to help! Since your code creates a relative path for the output file, not an absolute path (i.e., <code>foo.xml</code> rather than <code>/bar/baz/foo.xml</code>), the file should be written to your current working directory, i.e., the directory from which you ran the program.</span>
<span class="comment-copy">Thank you good sir. You were in fact correct. It was sitting under my nose the whole time.  (Never thought to look there because I was running everything in dos.)</span>
