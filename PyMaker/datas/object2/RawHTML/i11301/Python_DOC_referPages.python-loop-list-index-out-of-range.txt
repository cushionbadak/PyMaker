<div class="post-text" itemprop="text">
<p>Given the following list</p>
<pre><code>a = [0, 1, 2, 3]
</code></pre>
<p>I'd like to create a new list <code>b</code>, which consists of elements for which the current and next value of <code>a</code> are summed. It will contain <strong>1</strong> less element than <code>a</code>.</p>
<p>Like this:</p>
<pre><code>b = [1, 3, 5]
</code></pre>
<p>(from 0+1, 1+2, and 2+3)</p>
<p>Here's what I've tried:</p>
<pre><code>b = []
for i in a:
   b.append(a[i + 1] - a[i])
b
</code></pre>
<p>The trouble is I keep getting this error:</p>
<pre><code>IndexError: list index out of range
</code></pre>
<p>I'm pretty sure it occurs because by the time I get the the last element of a (3), I can't add it to anything because doing so goes outside of the value of it (there is no value after 3 to add). So I need to tell the code to stop at 2 while still referring to 3 for the calculation.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>In your <code>for</code> loop, you're iterating through the elements of a list <code>a</code>. But in the body of the loop, you're using those items to index that list, when you actually want indexes.<br/>
Imagine if the list <code>a</code> would contain 5 items, a number 100 would be among them and the for loop would reach it. You will essentially attempt to retrieve the 100th element of the list <code>a</code>, which obviously is not there. This will give you an <code>IndexError</code>.  </li>
</ol>
<p>We can fix this issue by iterating over a range of indexes instead:</p>
<pre><code>for i in range(len(a))
</code></pre>
<p>and access the <code>a</code>'s items like that: <code>a[i]</code>. This won't give any errors.</p>
<ol start="2">
<li>In the loop's body, you're indexing not only <code>a[i]</code>, but also <code>a[i+1]</code>. This is also a place for a potential error. If your list contains 5 items and you're iterating over it like I've shown in the point 1, you'll get an <code>IndexError</code>. Why? Because <code>range(5)</code> is essentially <code>0 1 2 3 4</code>, so when the loop reaches 4, you will attempt to get the <code>a[5]</code> item. Since indexing in Python starts with 0 and your list contains 5 items, the last item would have an index 4, so getting the <code>a[5]</code> would mean getting the sixth element which does not exist.</li>
</ol>
<p>To fix that, you should subtract 1 from <code>len(a)</code> in order to get a range sequence <code>0 1 2 3</code>. Since you're using an index <code>i+1</code>, you'll still get the last element, but this way you will avoid the error.</p>
<ol start="3">
<li>There are many different ways to accomplish what you're trying to do here. Some of them are quite elegant and more "pythonic", like list comprehensions:</li>
</ol>
<p><code>b = [a[i] + a[i+1] for i in range(len(a) - 1)]</code></p>
<p>This does the job in only one line.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>for i in a:</code>, you are getting the actual elements, not the indexes.  When we reach the last element, that is <code>3</code>, <code>b.append(a[i+1]-a[i])</code> looks for <code>a[4]</code>, doesn't find one and then fails.  Instead, try iterating over the indexes while stopping just short of the last one, like </p>
<p><code>for i in range(0, len(a)-1): Do something</code></p>
<p>Your current code won't work yet for the do something part though ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>You are accessing the list elements and then using them to attempt to index your list. This is not a good idea. You already have an answer showing how you could use indexing to get your sum list, but another option would be to <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> the list with a slice of itself such that you can sum the pairs. </p>
<pre><code>b = [i + j for i, j in zip(a, a[1:])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try reducing the range of the for loop to <code>range(len(a)-1)</code>:</p>
<pre><code>a = [0,1,2,3]
b = []

for i in range(len(a)-1):
    b.append(a[i]+a[i+1])

print(b)
</code></pre>
<p>This can also be written as a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>b = [a[i] + a[i+1] for i in range(len(a)-1)]
print(b)
</code></pre>
</div>
<span class="comment-copy">First of all, where is the closing bracket in the line where you append? This should give you a <code>SyntaxError</code></span>
