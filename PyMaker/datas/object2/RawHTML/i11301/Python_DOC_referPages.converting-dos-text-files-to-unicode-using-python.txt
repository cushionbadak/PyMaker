<div class="post-text" itemprop="text">
<p>I am trying to write a Python application for converting old DOS code page text files to their Unicode equivalent. Now, I have done this before using Turbo Pascal by creating a look-up table and I'm sure the same can be done using a Python dictionary. My question is: <em>How do I index into the dictionary to find the character I want to convert and send the equivalent Unicode to a Unicode output file?</em></p>
<p>I realize that this may be a repeat of a similar question but nothing I searched for here quite matches my question.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has the codecs to do the conversions:</p>
<pre><code>#!python3

# Test file with bytes 0-255.
with open('dos.txt','wb') as f:
    f.write(bytes(range(256)))

# Read the file and decode using code page 437 (DOS OEM-US).
# Write the file as UTF-8 encoding ("Unicode" is not an encoding)
# UTF-8, UTF-16, UTF-32 are encodings that support all Unicode codepoints.

with open('dos.txt',encoding='cp437') as infile:
    with open('unicode.txt','w',encoding='utf8') as outfile:
        outfile.write(infile.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use standard buildin <code>decode</code> method of <code>bytes</code> objects:</p>
<pre><code>with open('dos.txt', 'r', encoding='cp437') as infile, \
        open('unicode.txt', 'w', encoding='utf8') as outfile:
    for line in infile:
        outfile.write(line)
</code></pre>
</div>
<span class="comment-copy">Actually, you didn't post a question. You posted a problem.  SO is more about answering questions. To get a response, I suggest trying something and if it doesn't work, post your code and ask for advice.</span>
<span class="comment-copy">Do you really want to to the lookup yourself? Python has lots of build in encodings: <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">docs.python.org/3/library/codecs.html#standard-encodings</a></span>
<span class="comment-copy">In Python 2 the default encoding for <code>unicode.txt</code> will be <code>ascii</code> and in Python 3 it will be <code>locale.getpreferredencoding()</code> (On US Windows, <code>cp1252</code>).  So this won't work unless you use Python 3 and an OS that defaults to UTF-8, for example.  Neither support the full range of cp437 characters.</span>
