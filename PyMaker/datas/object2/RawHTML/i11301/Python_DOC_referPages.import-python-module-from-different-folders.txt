<div class="post-text" itemprop="text">
<p>I see the question I am going to ask is a very trivial one and has been asked and consequently answered by many. I have looked through the solution provided for the problem, however I don't see the solution to work in my case.</p>
<p>I have the following directory hierarchy.</p>
<pre><code>----a
-------__init__.py
--------------aa
------------------aa.py
------------------__init__.py
--------------bb
------------------bb.py
------------------__init__.py
-------a.py
</code></pre>
<p>I would like to do the following.</p>
<ol>
<li>To import bb.py and aa.py from the file a.py-- accomplished by using __init__.py in each folder directory</li>
<li>TO import bb.py from aa.py  (Doesn't work)</li>
<li>TO import a.py from aa.py   (Doesn't work)</li>
</ol>
<p>By looking at many solutions I have placed the <code>__init__.py</code> file inside every folder directory.</p>
<p>I  used:</p>
<pre><code>import imp

foo = imp.load_source('module.name', 'path to the file') 
</code></pre>
<p>This worked, but since the path has to be hard-coded I am not sure if this will be a viable solution in my case</p>
<p>Currently I am doing the imports by adding the path to the sys directories. I'd like a solution that's more dynamic.</p>
<p>The folder hierarchy of my project goes deep to 6-7 levels sub-directories and I need a solution to import a module at level 1 from level 7.</p>
<p>I'll be glad if somebody could point out what I am missing.</p>
</div>
<div class="post-text" itemprop="text">
<p>What's the entry point of your application? If, for example, you start from command line the <code>aa.py</code> file, you are not lucky.</p>
<p>"Guido views running scripts within a package as an anti-pattern" (rejected
<a href="http://www.python.org/dev/peps/pep-3122/" rel="nofollow">PEP-3122</a>)</p>
<p>The entry point of you package should be somewhere in the root of the package. In your case it's a file <code>a.py</code>. From out there you import some internal modules as usual:</p>
<pre><code># contents of a.py
from aa import a
</code></pre>
<p>Now about the imports from within your package.</p>
<p>Let's say there is one more file <code>aa1.py</code> in the same directory as <code>aa.py</code>. To import it from <code>aa.py</code> you can use relative import feature</p>
<pre><code># contents of aa.py
from . import aa1
</code></pre>
<p>Here <code>.</code> means "in the same directory".</p>
<p>Other examples:</p>
<pre><code># contents of aa.py
from .. import a  # here .. means "one level above"
from ..bb import bb  # this will import your bb.py module
</code></pre>
<p>Please note, that all that imports will fail if for example you run from command line directly <code>aa.py</code>!</p>
<p>UPDATE:</p>
<p><code>.</code> and <code>..</code> in above examples are NOT names of directories. This is python syntax to say "same level", "one level above", etc. If you need to import from 3 levels above you should write:</p>
<pre><code>from .... import my_module
</code></pre>
</div>
<span class="comment-copy">You probably want to name your init files <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer"><code>__init__.py</code></a>.</span>
<span class="comment-copy">"The folder hierarchy of my project goes deep to 6-7 levels sub-directories". Simplistic judgement, but that's just bad; you may want to rethink your structure.</span>
<span class="comment-copy">The init files are named correctly. I dont know while I type __ with init, the __ gets removed automatically</span>
<span class="comment-copy">The project is huge with lots and lots of reusable components, If I try to structure in differently, I may end up creating a mess</span>
<span class="comment-copy">Hi Lesnik, Thanks for the Answer. However, the solution here will work for this case in particular. How do I go about, when I have to import a file at level 1 from a file thats at level 4 or 5</span>
<span class="comment-copy">Since the project is not yet released, I have to debug some modules. Therefore the entry point could be at any point.</span>
<span class="comment-copy">Entry point must be on root level. I think there is a reason why this is a must. F.e. you start from aa.py and import some module aa1 which is on the same level as aa. Name of the module would be "aa1". Now you import some module from above (a.py), that module again imports you aa1.py. Now it's name would be aa.aa1. It's not good. All your modules within a package should have persistent names. Naming scheme used in python is: package_name.subdir1.subdir2.module_file_name. You need to import a module from 4 levels above: write "from ..... import my_module"</span>
<span class="comment-copy">And even if you need to debug some module deep inside you package you need to start importing from the root level. For exactly same purpose I used to use a "test.py" file on top level. Much better approach is to use python unittests: your tests would import the modules to test starting from top-level: "from a.aa import aa" or something like that.</span>
<span class="comment-copy">Oh Okay,,  I guess, I will have to use the test and debugging modules in the top of the hierarchy. Thank you so much..</span>
