<div class="post-text" itemprop="text">
<p>Using python I need to find the next IP address given a range of IP addresses I've already used. So if I have a list of IP address like...</p>
<pre><code>IPs = ['10.220.1.1','10.220.1.2','10.220.1.3','10.220.1.5']
</code></pre>
<p>When I ask for the next IP address I need it to return '10.220.1.4'. The next request would return '10.220.1.6' and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.3 (or newer), you can use the <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow"><code>ipaddress</code></a> module.  Example for all hosts in the subnet <code>10.220.1.0/24</code> except for those in <code>reserved</code>:</p>
<pre><code>from ipaddress import IPv4Network

network = IPv4Network('10.220.1.0/24')
reserved = {'10.220.1.1', '10.220.1.2', '10.220.1.3', '10.220.1.5'}

hosts_iterator = (host for host in network.hosts() if str(host) not in reserved)

# Using hosts_iterator:
print(next(hosts_iterator))  # prints 10.220.1.4
print(next(hosts_iterator))  # prints 10.220.1.6
print(next(hosts_iterator))  # prints 10.220.1.7

# Or you can iterate over hosts_iterator:
for host in hosts_iterator:
    print(host)
</code></pre>
<p>So basically this can be done in a single line (+ imports and definition of network and reserved addresses).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3 you could use <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow"><code>ipaddress</code></a> with generator:</p>
<pre><code>import ipaddress

def gen_ip(start, reserved):
    start = int(ipaddress.IPv4Address(start))
    for i in range(start + 1, int(2 ** 32) + 1):
        ip = str(ipaddress.IPv4Address(i))
        if ip not in reserved:
            yield ip

IPs = ['10.220.1.1','10.220.1.2','10.220.1.3','10.220.1.5']
j = 0
for ip in gen_ip(min(IPs), set(IPs)):
    print(ip)
    j += 1
    if j == 5:
        break
</code></pre>
<p>Output:</p>
<pre><code>10.220.1.4
10.220.1.6
10.220.1.7
10.220.1.8
10.220.1.9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use an generator using the <a href="https://pypi.python.org/pypi/ipaddress" rel="nofollow">ipaddress</a> module which is a bultin from python &gt;= 3.3 or you can install with pip for  earlier versions:</p>
<pre><code>In [20]: from ipaddress import ip_network

In [21]: IPs = {'10.220.1.1','10.220.1.2','10.220.1.3','10.220.1.5'}

In [22]: net = ip_network(u"10.220.1.0/24")

In [23]: avail =(str(ip) for ip in net.hosts() if str(ip) not in IPs
   ....: )

In [24]: next(avail)
Out[24]: '10.220.1.4'

In [25]: next(avail)
Out[25]: '10.220.1.6'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Convert your list to a set, for performance:</p>
<pre><code>used_ips = set(IPs)
</code></pre>
<p>Now generate your IP#'s however you would like, and check if they are contained in the set:</p>
<pre><code>for next_ip in generate_ip_numbers():
    if next_ip in used_ips:
        continue

    print("Next ip address is:", next_ip)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a basic ip object to hold a record of your current ip and to get the next ip</p>
<pre><code>class IPObj(object):
    def __init__(self, list_of_ips):
        self.position = 0
        self.ips = list_of_ips
        self.current_ip = self.ips[self.position]

    def next_ip(self, stop_iteration=False):
        '''
            return the next ip in the list
            '''

        if self.position &gt;= len(self.ips)-1:
            self.position = 0 # By default next_ip will do nothing when it reaches the end but it will throw an exception if stop_iteration==True
            if stop_iteration:
                raise StopIteration
        self.position += 1
        self.current_ip = self.ips[self.position]
        return self.current_ip

    def __repr__(self):
        return repr(self.current_ip)


#Testing    
ips = IPObj(['10.220.1.1','10.220.1.2','10.220.1.3','10.220.1.5'])

print ips

while True:
    print ips.next_ip(True),
</code></pre>
<p>Output:
10.220.1.1,
 10.220.1.2,
 10.220.1.3,
 10.220.1.5,</p>
<blockquote>
<p>Traceback (most recent call last):</p>
<p>File "C:\Users\J10ey\workspace\SO_Help\src\ip's.py", line 32, in 
     print ips.next_ip(True)
   File "C:\Users\J10ey\workspace\SO_Help\src\ip's.py", line 21, in next_ip
     raise StopIteration
  StopIteration</p>
</blockquote>
</div>
<span class="comment-copy">Do you want to have a loop that produces all ip's in a certain range (<code>10.220.1.x</code>)?</span>
<span class="comment-copy">convert (and keep) the IPs into the other legitimate representation: integers. then the search for a gap is a trivial thing.</span>
<span class="comment-copy">Yes @BubbleHacker it would need to match the range of 10.220.1.x</span>
<span class="comment-copy">@Serge what would you do to convert the IP addresses into integers and then back again? Is there a preferred pythony way?</span>
<span class="comment-copy">Apart from the standard-compliant implementation of functions working with IPv4 addresses should treat 10.220.1.4, 10.220.260, 10.14418180 and 182190340 equally, you could calc it yourself for any w.x.y.z address: ((w*256+x)*256+y)*256+z</span>
<span class="comment-copy">Thanks but not using python 3...has to be for 2.x</span>
<span class="comment-copy">Actually I imported the ipaddress module and got this to work. Because I'm on python 2.7.x I had to pass the network range as a unicode object instead of a string .... <code>network = IPv4Network(u'10.220.1.0/24')</code></span>
<span class="comment-copy">Thanks but unfortunately not using python 3...need it to work with 2.x</span>
<span class="comment-copy">This is not what OP is asking.</span>
