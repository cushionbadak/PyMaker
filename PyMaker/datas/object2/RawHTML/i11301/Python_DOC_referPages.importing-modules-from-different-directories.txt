<div class="post-text" itemprop="text">
<p>What is the pythonic way for absolute importing modules located in different directories in Python 3? I am able to import modules by modifying the <code>sys.path</code> but that method is hackey.</p>
<p>The alternative method, from what I've read, is to turn the project into a pip installable package. This is method beyond me, can someone elaborate on this process and logic? After writing a <code>setup.py</code> script, do I just <code>python setup.py install</code>, then all my modules and packages are in the right path and will work? </p>
</div>
<div class="post-text" itemprop="text">
<h2>Loading a script dynamically from anywhere via a given path</h2>
<pre><code>import importlib.machinery
import imp
import os.path

path = '/home/user/testscript' # without .py
fname = os.path.basename(path)

namespace = fname.replace(' ', '_').strip('\\/;,. ') 

loader = importlib.machinery.SourceFileLoader(namespace, os.path.abspath(path+'.py'))
handle = loader.load_module(namespace)
imp.reload(handle)

ret = handle.mainFunction()
</code></pre>
<p><code>handle</code> being your library name. I just call it handle because I use it in a one shot test library myself so it gets deleted anyway in every iteration of the loop. </p>
<p>Sorry for syntax issues, wrote it on the phone. I'll correct any syntax issues or indentation issues in a few min.</p>
<h2>Minimalistic example would be:</h2>
<pre><code>import importlib.machinery

# Register the "mylib" namespace as "test.py"
loader = importlib.machinery.SourceFileLoader("mylib", r'C:\Users\OpenWindows\Desktop\test.py')
# And load that namespace
mylib = loader.load_module("mylib")

# And now we can call it whenever we want.
ret = mylib.someFunction()
</code></pre>
<h2>Traditional approach (not absolute path friendly)</h2>
<p>Would be to just create a folder structure that looks like this:</p>
<pre><code>|- main.py
|-- mylib /
|--        __init__.py
|--        mylib.py
</code></pre>
<p>And in the <code>__init__.py</code> file create something that looks like:</p>
<pre><code>from mylib.mylib import *
</code></pre>
<p>That way, any function or class in <code>mylib.py</code> would be imported as if it resided in <code>main.py</code>. However, again this is heavily dependant on the subfolder residing in the same folder as the script you're executing. But it's also a traditional way of shipping/adding functionality to a application.</p>
<p>There's some other stuff you can do in the <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow"><code>__init__.py</code></a> file that might be useful. Have a look at the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>I struggled with this problem for a long time, and found the best method to create the <code>setup.py</code> file as you mentioned - don't worry, it's very easy. The basic one looks like this (<a href="https://docs.python.org/2/distutils/introduction.html#distutils-simple-example" rel="nofollow">taken from python documentation</a>):</p>
<pre><code>from distutils.core import setup
setup(name='foo',
  version='1.0',
  py_modules=['foo'],
  )
</code></pre>
<p>And then install it with pip using <code>-e</code> option:</p>
<pre><code> pip install -e &lt;path-to-your-project&gt;
</code></pre>
<p>This way you tell python to look for the module in your projects directory.</p>
</div>
<span class="comment-copy">Nice one, +1! But are there syntax issues?</span>
<span class="comment-copy">@linusg - not sure, can't run it on my phone to test : /</span>
<span class="comment-copy">thanks. I'll try it when I get to a computer. Is this the best way to import modules from different directories? It seems a little complex.</span>
<span class="comment-copy">@MichaelB I'm sure there's better alternatives. For instance placing the libraries (modules) in a subdirectory and creating a <code>__init__.py</code> file. But that won't give you absolute import paths.</span>
