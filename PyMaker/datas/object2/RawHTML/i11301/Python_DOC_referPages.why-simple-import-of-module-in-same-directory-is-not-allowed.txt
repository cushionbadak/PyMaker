<div class="post-text" itemprop="text">
<p>I've created two modules in the same directory:</p>
<pre><code>.
├── mod1.py
├── mod2.py
</code></pre>
<p>There is no <code>__init__.py</code>, I don't want to create this as a package, I'm just creating a simple script which I have modularized by breaking into different modules.</p>
<p>My intention is to run <code>mod1.py</code> using <code>python mod1.py</code></p>
<pre><code>~/junk/imports$ cat mod1.py 
from . import mod2

print(mod2.some_expr)


$ cat mod2.py
some_expr = 'hello world!'
</code></pre>
<p>Although I know that directly using <code>import mod1</code> will work, but I'm deliberately not using it so that my module name doesn't clash with built in modules (which I felt is a good practice)</p>
<p>I'm getting the following errors with <code>python2</code> and <code>python3</code></p>
<pre><code>~/junk/imports$ python3 --version
Python 3.4.3
kartik@kartik-lappy:~/junk/imports$ python3 mod1.py 
Traceback (most recent call last):
  File "mod1.py", line 1, in &lt;module&gt;
    from . import mod2
SystemError: Parent module '' not loaded, cannot perform relative import


~/junk/imports$ python2 --version
Python 2.7.11
~/junk/imports$ python2 mod1.py 
Traceback (most recent call last):
  File "mod1.py", line 1, in &lt;module&gt;
    from . import mod2
ValueError: Attempted relative import in non-package
</code></pre>
<p>Most of the questions like this on StackOverflow deal with packages, but I'm not using packages. I just want to run it as a simple script.</p>
<p>My question is not about how to do it, but I want to know the reason behind the above not working. </p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't use relative, but absolute import:</p>
<pre><code>import mod2
print(mod2.some_expr)
</code></pre>
<p>The <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">documentation</a> is pretty good, and this <a href="https://stackoverflow.com/a/2349998/3077939">SO answers</a> gives an alternative using <code>importlib</code>.</p>
<p>If a handmade module clash with a builtin module, the proper way to go is probably to rename it, eventually through addition of a {pre,suf}fix.
Another is to use <code>importlib</code>.</p>
<p>The motivation underlying these limitation can be found in the <a href="https://www.python.org/dev/peps/pep-0328/#rationale-for-relative-imports" rel="nofollow noreferrer">PEP 328</a>, and comes mainly from BDFL preferences, over all other solutions.</p>
</div>
<span class="comment-copy">Why are you not using an <b>init</b>.py file? Wouldn't this mean that when python checks the . directory, it realises theres no init file and will throw an exception? i.e attempted relative import in non-package</span>
<span class="comment-copy">I'm not using <code>__init__.py</code> because I don't want to create a package. I'm just creating simple scripts. I want to understand the reason behind not allowing "explicit" relative imports.</span>
<span class="comment-copy">I know I should, but here I'm using explicit relative import. Is there a reason why it is not recommended?</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0328" rel="nofollow noreferrer">PEP 328</a> gives informations about imports. As far as i know, relative imports are generally not recommended, and only available inside packages. From the PEP: <i>all import statements be absolute by default (searching sys.path only) with special syntax (leading dots) for accessing package-relative imports.</i></span>
<span class="comment-copy">I meant to import <code>mod2</code> only. I've corrected the question!</span>
<span class="comment-copy">I have updated the answer.</span>
<span class="comment-copy">I can see the rationale for using absolute imports with package. But what about non-packages, for simple scripts, I thought relative imports should work.</span>
