<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1215208/how-might-i-remove-duplicate-lines-from-a-file">How might I remove duplicate lines from a file?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to have my function go through sorted text on Insults.txt and determine if there are duplicates and return false if there are, but I cannot seem to get it working. I am only trying to detect duplicates, not remove them! Does anybody know what I am doing wrong?</p>
<pre><code>def checkInsultsFile(numInsults=1000, file="Insults.txt"):
    filename = open(file,'r').readlines()
    for i in range(0, numInsults):
        if [i] == [i+1]:
            return False
        else:
            return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this, I am not sure why you are having numInsults</p>
<pre><code>def checkInsultsFile(numInsults=1000, file="Insults.txt"):
    lines = open(file, 'r').readlines()

    dict = {}

    for line in lines:
            dict[line] = dict.get(line,0) + 1

    for k,v in dict.iteritems():
            if v &gt; 1:
                    return True
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Mine's a lazier approach, as its execution will stop as soon as it finds a duplicate.</p>
<pre><code>def checkInsultsFile(filename):
    with open(filename, 'r') as file:
        s = set()
        for line in file:
            if line in s:
                 return True
            s.add(line)
        return False
    except IOError:
        handleExceptionFromFileError()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure why you are limiting the numInsults either, if you want to check the whole file, if the number of lines is greater than 1K. </p>
<pre><code>def checkInsultsFile(file):
    with open(file, 'r') as f:
        lines = [line.strip() for line in f] #puts whole file into list if it's not too large for your RAM
    check = set(lines)
    if len(lines) == len(check):
         return False
    elif len(check) &lt; len(lines):
         return True

checkInsultsFile("Insults.txt")
</code></pre>
<p>Alternative (run through file line by line):</p>
<pre><code>def checkInsultsFile(file):
    lines = []
    with open(file, 'r') as f:
        for line in f:
             lines.append(line.strip()) 

    check = set(lines)
    if len(lines) == len(check):
         return False
    elif len(check) &lt; len(lines):
         return True

checkInsultsFile("Insults.txt")
</code></pre>
<p>This function will take all the lines in Insults.txt into a list. 'Check' is a set, which will only keep unique items in the 'lines' list. If the lines list is equal to the check list, there are no duplicates, and return False. If the check list is smaller than the lines list, you know there were duplicates, and will return True. </p>
<p>Alternatively, you can use bash (don't know your OS). Just to point out there are faster/simpler ways to do this, unless your python script will utilize the unique list of insults from the file in other ways: </p>
<p>sort Insults.txt | uniq -c</p>
<p>This is similar to what you can do with Counter from collections in Python, which will give you a count of all the lines in the file. </p>
</div>
<div class="post-text" itemprop="text">
<h2>What is happening</h2>
<blockquote>
<pre><code>if [i] == [i+1]:
    return False
else:
    return True
</code></pre>
</blockquote>
<p>Initially, <code>i</code> is <code>0</code>.  Is a one-element list that contains <code>0</code> equal to a one-element list that contains <code>1</code>?  Clearly not.  So execution goes to the <code>else</code> clause, and the function returns <code>True</code>.</p>
<p>It doesn't even care about the length or the contents of the file, as long as it exists and is readable.</p>
<h2>A working solution</h2>
<p>Take a cue from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>itertools</code> recipe</a> for <code>pairwise(<em>iterable</em>)</code>, which produces pairs <code>(line1, line2)</code>, <code>(line2, line3)</code>, <code>(line3, line4)</code>, etc.</p>
<p>Also, use the <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any()</code></a> function to simplify the inner loop.</p>
<pre><code>from itertools import tee

def any_consecutive_duplicate_lines(file='Insults.txt'):
    """Return True if the file contains any two consecutive equal lines."""
    with open(file) as f:
        a, b = tee(f)
        next(b, None)
        return any(a_line == b_line for a_line, b_line in zip(a, b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to return if there are any dupes we can take your function and  simplify a little bit:</p>
<pre><code>def checkdup(file = "insults.txt")
  lines = open(file, 'r').readlines()
  return len(lines) != len(set(lines))
</code></pre>
<p>Basically we do two things: take all lines in txt and make them a list, check that the number of items in that list </p>
<pre><code>len(lines) #the number of insults in your file.
</code></pre>
<p>are the same as the number of items in a collection of unique elements of that list</p>
<pre><code>len(set(lines)) # the number of unique elements of our list, or unique insults
</code></pre>
<p>If they're not the same, there must be dupes!</p>
</div>
<span class="comment-copy">This needs a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. What does "Not working" mean?</span>
<span class="comment-copy">Good point Morgan - when I run the code, returns True even if there are duplicates in the file.</span>
<span class="comment-copy">Well, right now, as soon as it checks the first line, it returns. So it's only checking the first line.</span>
<span class="comment-copy">It is not even checking anything from file here [i] == [i+1] is always false. and it would return in the first check itself.</span>
<span class="comment-copy">Thanks a lot for the feedback guys - do you know how I could navigate around this? As for the other post, I saw that but I am not trying to replace or remove duplicate lines, I am trying to detect them!!</span>
<span class="comment-copy">This answer has some potential, I think, but isn't quite there imo. Why are you noting what can be done with bash in a python question? Any links about that counter stuff? Is it really neccessary to preallocate the whole file when its iterable? The file is sorted... does that help? Why do you need that last elsif, is there any chance the set is <i>larger</i> than the list? Maybe you don't need to address although those pedantic things (or even most), but a few more details would be nice</span>
