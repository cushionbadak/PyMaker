<div class="post-text" itemprop="text">
<p>I'm trying to convert this code which is written in python 2 to python 3</p>
<pre><code>nums = ["30", "31"]
num.sort(cmp=lambda x, y: cmp(y + x, x + y))
</code></pre>
<p>Not sure how to do that in python 3 since cmp is removed (I believed)</p>
<p>The result should be <code>["31", "30"]</code> instead of <code>["30", "31"]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This is one of the rare cases where a comparator is much cleaner than a key function. I'd actually just reimplement <code>cmp</code>:</p>
<pre><code>try:
    cmp
except NameError:
    def cmp(x, y):
        if x &lt; y:
            return -1
        elif x &gt; y:
           return 1
        else:
            return 0
</code></pre>
<p>and then use <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow"><code>functools.cmp_to_key</code></a> to convert the comparator to a Python 3 style key function:</p>
<pre><code>nums.sort(key=functools.cmp_to_key(lambda x, y: cmp(y+x, x+y)))
</code></pre>
<p>For anyone wondering what this weird sort actually does, it finds the order in which to concatenate the input strings to produce the lexicographically greatest output string. When all the strings are sequences of digits, the output has the highest possible numeric value.</p>
</div>
<span class="comment-copy">@Pythonista: This isn't sorting in reverse order. It's a lot subtler than that, and converting the comparator to a key function is actually pretty tricky.</span>
<span class="comment-copy"><a href="https://docs.python.org/3.5/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer">docs.python.org/3.5/library/functools.html#functools.cmp_to_key</a></span>
<span class="comment-copy">Can you provide test data which fails with <code>sort(reverse=True)</code>?</span>
<span class="comment-copy">@PeterWood: <code>["3", "31"]</code>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/30043067/python3-style-sorting-old-cmp-method-functionality-in-new-key-mechanism">Python3 style sorting -- old cmp method functionality in new key mechanism?</a></span>
<span class="comment-copy">Or <code>def cmp(x, y): return (x &gt; y) - (x &lt; y)</code></span>
