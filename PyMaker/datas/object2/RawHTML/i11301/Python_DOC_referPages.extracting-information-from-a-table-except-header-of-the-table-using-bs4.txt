<div class="post-text" itemprop="text">
<p>I am trying to extracting information from a table using bs4 and python.
when I am using the following code to extract information from header of the table: </p>
<pre><code>    tr_header=table.findAll("tr")[0]
    tds_in_header = [td.get_text()  for td in tr_header.findAll("td")]
    header_items= [data.encode('utf-8')  for data in tds_in_header]
    len_table_header = len (header_items)
</code></pre>
<p>It works, but for the following codes that I am trying to extract information from the first row to the end of the table: </p>
<pre><code>    tr_all=table.findAll("tr")[1:]
    tds_all = [td.get_text()  for td in tr_all.findAll("td")]
    table_info= [data.encode('utf-8')  for data in tds_all]
</code></pre>
<p>There is the following error: </p>
<pre><code>AttributeError: 'list' object has no attribute 'findAll'
</code></pre>
<p>Can anyone help me to edit it. </p>
<p>This is table information:</p>
<pre><code>    &lt;table class="codes"&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Code&lt;/b&gt;
&lt;/td&gt;&lt;td&gt;&lt;b&gt;Display&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Definition&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;active&lt;a name="active"&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Active&lt;/td&gt;&lt;td&gt;This account is active and may be used.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;inactive&lt;a name="inactive"&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Inactive&lt;/td&gt;&lt;td&gt;This account is inactive
 and should not be used to track financial information.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</code></pre>
<p>This is the output for tr_all:</p>
<pre><code>[&lt;tr&gt;&lt;td&gt;&lt;b&gt;Code&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Display&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Definition&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;, &lt;tr&gt;&lt;td&gt;active&lt;a name="active"&gt; &lt;/a&gt;&lt;/td&gt;&lt;td&gt;Active&lt;/td&gt;&lt;td&gt;This account is active and may be used.&lt;/td&gt;&lt;/tr&gt;, &lt;tr&gt;&lt;td&gt;inactive&lt;a name="inactive"&gt; &lt;/a&gt;&lt;/td&gt;&lt;td&gt;Inactive&lt;/td&gt;&lt;td&gt;This account is inactive and should not be used to track financial information.&lt;/td&gt;&lt;/tr&gt;] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Your first question,</p>
<pre><code>import bs4

text = """
&lt;table class="codes"&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Code&lt;/b&gt;
&lt;/td&gt;&lt;td&gt;&lt;b&gt;Display&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Definition&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;active&lt;a name="active"&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Active&lt;/td&gt;&lt;td&gt;This account is active and may be used.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;inactive&lt;a name="inactive"&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Inactive&lt;/td&gt;&lt;td&gt;This account is inactive
 and should not be used to track financial information.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"""

table = bs4.BeautifulSoup(text)
tr_all = table.findAll("tr")[1:]
tds_all = []
for tr in tr_all:
    tds_all.append([td.get_text() for td in tr.findAll("td")])
    # if You prefer double list comprefension instead...
table_info = [data[i].encode('utf-8') for data in tds_all
                                      for i in range(len(tds_all))]
print(table_info)
</code></pre>
<p>yields</p>
<pre><code>['active ', 'Active', 'inactive ', 'Inactive']
</code></pre>
<p>And regarding Your second question</p>
<blockquote>
<p>tr_header=table.findAll("tr")[0] i do not get a list</p>
</blockquote>
<p>True, <code>[]</code> is indexing operation, which selects first element from list, thus You get single element. <code>[1:]</code> is slicing operator (take a look at nice <a href="https://docs.python.org/3/tutorial/introduction.html" rel="nofollow">tutorial</a> if You need more information). </p>
<p>Actually, You get list two times, for each call of table.findAll("tr") - for header and rest of rows. Sure, this is quite redundant.
If You want to separate tokens from header and rest, I think You likely want something like this</p>
<pre><code>tr_all = table.findAll("tr")
header = tr_all[0]
tr_rest = tr_all[1:] 
tds_rest = []
header_data = [td.get_text().encode('utf-8') for td in header]

for tr in tr_rest:
     tds_rest.append([td.get_text() for td in tr.findAll("td")])
</code></pre>
<p>and regarding third question</p>
<blockquote>
<p>Is it possible to edit this code to add table information from the first row to the end of the table?</p>
</blockquote>
<p>Given Your desired output in comments below:</p>
<pre><code>rows_all = table.findAll("tr")
header = rows_all[0]
rows = rows_all[1:]

data = []
for row in rows:
    for td in row:
        try:
            data.append(td.get_text())
        except AttributeError:
            continue
print(data)

# or more or less same as above, oneline
data = [td.get_text() for row in rows for td in row.findAll("td")]
</code></pre>
<p>yields</p>
<pre><code>[u'active', u'Active', u'This account is active and may be used.', u'inactive', u'Inactive', u'This account is inactive and should not be used to track financial information.']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>JustMe answered this question correctly.
Another equivalent variant would be:</p>
<pre><code>import bs4

text = """
&lt;table class="codes"&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Code&lt;/b&gt;
&lt;/td&gt;&lt;td&gt;&lt;b&gt;Display&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Definition&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;active&lt;a name="active"&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Active&lt;/td&gt;&lt;td&gt;This account is active and may be used.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;inactive&lt;a name="inactive"&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Inactive&lt;/td&gt;&lt;td&gt;This account is inactive
 and should not be used to track financial information.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"""

table = bs4.BeautifulSoup(text)
tr_all = table.findAll("tr")[1:]
# critical line:
tds_all = [ td.get_text() for each_tr in tr_all for td in each_tr.findAll("td")]
# and after that unchanged:
table_info= [data.encode('utf-8')  for data in tds_all]

# for control:
print(table_info)
</code></pre>
<p>This strange construction in the critical line serves as flattening of the list of list 'tds_all'. lambda z: [x for y in z for x in y] flattens the list of list z. I replaced x and y and z according to this specific situation.</p>
<p>Actually I came to it, because I had as an inbetween-step as the critical line:
tds_all = [[td.get_text()  for td in each_tr.findAll("td")] for each_tr in tr_all ]
which generates a list of lists for tds_all:
[[u'active ', u'Active', u'This account is active and may be used.'], [u'inactive ', u'Inactive', u'This account is inactive\n and should not be used to track financial information.']]
To flatten this, one needs this [x for y in z for x in y] composition.
But then I thought, why not apply this structure right to the critical line and flatten it thereby?</p>
<p>z is the list of bs4-objects (tr_all). In this 'for ... in ...'-construct, each_tr (a bs4-object) is taken from the list 'tr_all', and the each_tr object generates in the behind 'for-in'-construct a list of all 'td' matches, by the expression each_tr.findAll("td") from which every match "td" is isolated by this behind 'for ... in ...'-loop, and at the very beginning of this listexpession stands what should be then collected in the final list:
the text isolated from this object("td.get_text()"). And this resulting final list is assigned to td_all.</p>
<p>The result of this code is this result list:</p>
<pre><code>['active ', 'Active', 'This account is active and may be used.', 'inactive ', 'Inactive', 'This account is inactive\n and should not be used to track financial information.']
</code></pre>
<p>The two longer elements were missing in the example is of JustMe. I think, Mary, you want to have them included, isn't it?</p>
</div>
<span class="comment-copy">You should probably post html code You are trying to parse. Moreover, since <code>tr_header</code>  is single bs4 element You can call findAll on it. But for list of rows (and that is what You probably get from <code>tr_all</code>) You need to call findAll on each element not on whole list (using double list comprehension or better - separate for loop - for readability)</span>
<span class="comment-copy">@JustMe, thank you ! Even for this code tr_all=table.findAll("tr") I still get a list, but for this one:  tr_header=table.findAll("tr")[0] I do not get a list. I am totally confused. I have another question. Is it possible to edit this code to add table information from the first row to the end of the table: table_information = [td.get_text()  for td in table.findAll("td")]. Thanks !</span>
<span class="comment-copy">thank you ! my desired output is this: [u'active ', u'Active', u'This account is active and may be used.', u'inactive ', u'Inactive', u'This account is inactive and should not be used to track financial information.']</span>
<span class="comment-copy">The output of your code just include ['active ', 'Active', 'inactive ', 'Inactive']</span>
<span class="comment-copy">Perfect code ! I highly appreciate your time</span>
