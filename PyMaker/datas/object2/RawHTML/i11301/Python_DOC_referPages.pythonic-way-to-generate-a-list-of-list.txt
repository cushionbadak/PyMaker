<div class="post-text" itemprop="text">
<p>What would be the most pythonic way of achieving the transformation from the following input:</p>
<pre><code> input = [('a', 1), ('a', 10), ('b', 244), ('c', 31) , ('c',45)]
</code></pre>
<p>to the desired output: </p>
<pre><code>output = [[('a',1),('a',10)],[('c',31),('c',45)]]
</code></pre>
<p>where I have grouped in lists the tuples which have the same first element.</p>
<p>Feeling that Python has a strong potential (I'm new with it) in writing complicated things on one line, I have decided to use comprehensive lists. My initial try is something like: </p>
<pre><code>output = [x for x in input if [k[0] for f in input].count(x[0])&gt;1] 
</code></pre>
<p>giving me a nice list of all my "pseudo" duplicates : </p>
<pre><code>output = [('a',1),('a',10),('c',31),('c',45)]
</code></pre>
<p>which I further process to obtain my result.</p>
<p>My question is: is there a way to achieve this result in one line using comprehensive lists instead of two (ugly) steps?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>groupby</code> from <code>itertools</code> and list comprehension. This will give you a simple one liner:  </p>
<pre><code>from itertools import groupby

filter(lambda x: len(x)&gt;1, [list(g) for i,g in groupby(input, key=lambda x: x[0])])
[[('a', 1), ('a', 10)], [('c', 31), ('c', 45)]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a 1-liner list comprehension:  </p>
<pre><code>&gt;&gt;&gt; L=[('a', 1), ('a', 10), ('b', 244), ('c', 31) , ('c',45)]
&gt;&gt;&gt; [list(filter(lambda x:x[0]==i, L)) for i in set(map(lambda x:x[0], L)) if len(list(filter(lambda x:x[0]==i, L)))&gt;1]
[[('a', 1), ('a', 10)], [('c', 31), ('c', 45)]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>. My solution is not one-liner, but more readable.</p>
<pre><code>import itertools

lists_in = [('a', 1), ('a', 10), ('b', 244), ('c', 31) , ('c',45)]

lists_out = list()
for name, group in itertools.groupby(lists_in, key=lambda x:x[0]):
    l = list(group)
    if len(l) == 2:
        lists_out.extend(l)

print(lists_out)
# Output
[('a', 1), ('a', 10), ('c', 31), ('c', 45)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one solution:</p>
<pre><code>&gt;&gt;&gt; input_list = [('a', 1), ('a', 10), ('b', 244), ('c', 31) , ('c',45)]
&gt;&gt;&gt; [[x for x in input_list if x[0]==a] for a in {x[0] for x in input_list if [k[0] for k in input].count(x[0])&gt;1}]
</code></pre>
<p>will print</p>
<pre><code>&gt;&gt;&gt; [[('a', 1), ('a', 10)], [('c', 31), ('c', 45)]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is nothing wrong with the following:</p>
<pre><code>input = [('a', 1), ('a', 10), ('b', 244), ('c', 31) , ('c',45)]

d = {}
for i in input:
  if i[0] in d:
    d[i[0]].append(i)
  else:
    d[i[0]] = [i]

print([d[k] for k in d if len(d[k]) &gt; 1])
</code></pre>
<p>Don't forget, you have to mantain a balance between readability and cleverness.</p>
<p><strong>Later edit</strong>: I actually gathered the other solutions from other answers and measured time execution (200000 uniformly distributed tuples with 'a'-'z' first element), see below:</p>
<pre><code># 0.048532 s
def foo(input):
  d = {}
  for i in input:
    if i[0] in d:
      d[i[0]].append(i)
    else:
      d[i[0]] = [i]

  return len(([d[k] for k in d if len(d[k]) &gt; 1]))

# 1.9594 s
def foo2(input):
  [list(filter(lambda x:x[0]==i, input)) for i in set(map(lambda x:x[0], input)) if len(list(filter(lambda x:x[0]==i, input)))&gt;1]

# 0.209639 s
def foo3(input):
  [filter(lambda x: len(x)&gt;1, [list(g) for i,g in itertools.groupby(input, key=lambda x: x[0])])]

# 0.188625
def foo4(input):
  lists = list()
  for name, group in itertools.groupby(input, key=lambda x: x[0]):
    l = list(group)
    if len(l) == 2:
      lists.extend(l)

# didn't even finish, &gt;120 s
def foo5(input_list):
  [[x for x in input_list if x[0]==a] for a in {x[0] for x in input_list if [k[0] for k in input].count(x[0])&gt;1}]
</code></pre>
<p>So yes, more clever one-line solutions, but slower and harder to read are not really the "most pythonic".</p>
</div>
<span class="comment-copy">Where did <code>b</code> go?</span>
<span class="comment-copy">'b'is a unique element so I don't want it</span>
<span class="comment-copy">@Lutz Horn : there is only 1 entry for b. AugBar wants collection whose entry is more than 1. so b is excluded.</span>
<span class="comment-copy">You shouldn't name a variable input. You are overwriting the <code>input</code> function</span>
<span class="comment-copy">That was just for the sake of demonstration</span>
<span class="comment-copy">how come downvote? the other previous answer are extremely long for a simple operation ...</span>
<span class="comment-copy">Not me who downvoted, but he wanted to get rid of unique elements like b.</span>
<span class="comment-copy">I used filter afterwards, cannot use if in the list comprehension due to the generator specificity ...</span>
<span class="comment-copy">This is one line... but is it readable?</span>
<span class="comment-copy">I think he not looking for this</span>
<span class="comment-copy">@RahulKP, it  is not one-liner, but more readable.</span>
<span class="comment-copy">This is an incredibly slow solution.</span>
<span class="comment-copy">Yet it is the only solution that is one line and uses nothing but comprehensions, the two requirements in the question.</span>
<span class="comment-copy">Well, you're right. But I'd prefer 'the ugly' solution in 2 lines which at least finishes execution.</span>
<span class="comment-copy">I would too, but the question specifically asks for it. The OP states that they already know the <i>two step</i> solution to this.</span>
<span class="comment-copy">Nice benchmark, I realize now that trying too hard to 'python' a solution might not be the best idea</span>
<span class="comment-copy">@AugBar, squeezing code into one-line doesn't make it more pythonic. Read this about the zen of python "<a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">python.org/dev/peps/pep-0020</a>"</span>
