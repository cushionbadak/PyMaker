<div class="post-text" itemprop="text">
<p>Why is my code so sluggish (inefficient)? I need to make two methods to record the time it takes to process a list of a given size. I have a <code>search_fast</code> and <code>search_slow</code> method. Even though there is a difference between those two search times. <code>Search_fast</code> is still pretty slow. I'd like to optimise the processing time so instead of getting <code>8.99038815498</code> with <code>search_fast</code> and <code>65.0739619732</code> with <code>search_slow</code>. It would only take a fraction of a second. What can I do? I'd be eternally grateful for some tips as coding is still pretty new to me. :)</p>
<pre><code>from timeit import Timer


def fillList(l, n):
    l.extend(range(1, n + 1))
l = []
fillList(l, 100)

def search_fast(l):
    for item in l:
        if item == 10:
            return True
    return False

def search_slow(l):
    return_value = False
    for item in l:
        if item == 10: 
            return_value = True
    return return_value

t = Timer(lambda: search_fast(l))
print t.timeit()
t = Timer(lambda: search_slow(l))
print t.timeit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The fastest way is using <code>in</code> operator, which tests membership of a value in a sequence.</p>
<pre><code>if value in some_container:
    â€¦
</code></pre>
<p>Reference: <a href="https://docs.python.org/3/reference/expressions.html#membership-test-operations" rel="nofollow">https://docs.python.org/3/reference/expressions.html#membership-test-operations</a></p>
<p>Update: also, if you frequently need to test the membership, consider using sets instead of lists.<br/>
Some pros and cons can be found here: <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Adding the following code to above:</p>
<pre><code>t = Timer(lambda: 10 in l)
print(t.timeit())
</code></pre>
<p>produces the following on my system:</p>
<pre><code>0.6166538814701169
3.884095008084452
0.29087270299795875
&gt;&gt;&gt;
</code></pre>
<p>Hope this helps. The basic idea is to tap into underlying C code and not make your own Python code.</p>
</div>
<div class="post-text" itemprop="text">
<p>I managed to find out what made the code sluggish. It was a simple mistake of adding to the list by<code>extend</code> instead of <code>append</code>. </p>
<pre><code>def fillList(l, n):
    l.**append**(range(1, n + 1))
l = []
fillList(l, 100)
</code></pre>
<p>Now <code>search_slow</code>clocks in at <code>3.91826605797</code> instead of <code>65.0739619732</code>. But I have no idea why it changes the performance so much.</p>
</div>
<span class="comment-copy">If you mean that it takes a long time before you get the result: Timeit takes a long time as executes the function 1000000 times. <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer">docs.python.org/2/library/timeit.html</a></span>
