<div class="post-text" itemprop="text">
<p>I have a list of dict like this, the value of each dict key is a list,</p>
<pre><code>[{'mike':[500,1000,1500,2750,3000]},{'john':[750,1250,2000]},{'luke':[600,1100]}]
</code></pre>
<p>The number of dict in list will vary.</p>
<p>How i can get output like this,
Each dict value in ascending order</p>
<pre><code>500:mike
600:luke
750:john
1000:mike
1100:luke
1250:john
1500:mike
2000:john
2750:mike
3000:mike
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>A one liner:</h1>
<pre><code>result = sorted(((item, key) for d in x for (key, value) in d.items() for item in value), key=lambda x: x[0])

for elem in result:
    print ({elem[0]}:{elem[0]}.format(elem=elem)
</code></pre>
<h1>A multi liner:</h1>
<pre><code>x = [{"mike":[500,1000,1500,2750,3000]},{"john":[750,1250,2000]},{"luke":[600,1100]}]
result = []
for item in x:
    for key, value in item.iteritems():
        for v in value:
            result.append((v, key))
result.sort(key=lambda x: x[0])
for elem in result:
    print ({elem[0]}:{elem[0]}.format(elem=elem)

# outputs
500:mike
600:luke
750:john
1000:mike
1100:luke
1250:john
1500:mike
2000:john
2750:mike
3000:mike
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You use <code>itertools</code> for solving this problem:</p>
<pre><code>from itertools import product, chain

LL = list(chain(*[list(product(i.keys(), i.values()[0])) for i in L]))
sorted(LL, key=lambda x: x[1])

Out[152]:
[('mike', 500),
 ('luke', 600),
 ('john', 750),
 ('mike', 1000),
 ('luke', 1100),
 ('john', 1250),
 ('mike', 1500),
 ('john', 2000),
 ('mike', 2750),
 ('mike', 3000)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a> to flat the list of dicts into a list of tuples <code>(value, key)</code>, use <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a> to sort them by the value, use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a> to format your output.</p>
<pre><code>list_dicts = [  {'mike':[500,1000,1500,2750,3000]},
                {'john':[750,1250,2000]},
                {'luke':[600,1100]}]

# flat the list of dicts as a list of tuples (value, key), sort them
result = sorted([(item, k) for d in list_dicts for k, l in d.items() for item in l])

# format output
print('\n'.join([':'.join([str(i) for i in t]) for t in result]))
# Output
500:mike
600:luke
750:john
1000:mike
1100:luke
1250:john
1500:mike
2000:john
2750:mike
3000:mike
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a,b=[],[]
for i in g:
    for k in i.values()[0]:
        a.append(k)
        b.append(i.keys())

print sorted(zip(a,b))
</code></pre>
</div>
<span class="comment-copy">Python 3.5.1: <code>TypeError: 'dict_values' object does not support indexing</code>. It's this part - <code>i.values()[0]</code></span>
