<div class="post-text" itemprop="text">
<p>I have a unicode string <code>x = u'12345678.87654321'</code>, I want to convert it to <code>float</code> in python using</p>
<pre><code>float(x)
</code></pre>
<p>It is converted to <code>12345678.88</code> instead. It seem like <code>float()</code> automatically rounds the number to two decimal places. I want to keep whatever is in the unicode string (less than 10 decimal places). What would be a good alternative?</p>
<p>EDIT: My apologies. The example I used is not tested. I will just use my real data:
I have an unicode string u'1464106296.285190'. This is the one that cannot be converted to float and retain all decimal places.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/decimal.html"><code>decimal.Decimal</code></a>:</p>
<pre><code>In [103]: import decimal

In [104]: D = decimal.Decimal

In [109]: D(u'1464106296.285190')
Out[109]: Decimal('1464106296.285190')

In [110]: float(u'1464106296.285190')
Out[110]: 1464106296.28519

In [111]: print(D(u'1464106296.285190'))
1464106296.285190
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It converts just fine.  Python floats can hold about 16 digits of precision.  <code>print</code> is doing some default rounding in Python 2.7 to display it, but either way the value is converted the same.  You can format the value to print more precision.  Here's examples in Python 3 and 2.  Note the conversion is accurate to 16 places.</p>
<pre><code>Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; s=u'1464106296.285190'
&gt;&gt;&gt; f=float(s)
&gt;&gt;&gt; f
1464106296.28519
&gt;&gt;&gt; format(f,'.30f')
'1464106296.285190105438232421875000000000'
&gt;&gt;&gt; print(f)
1464106296.28519

Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 20:32:19) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; s=u'1464106296.285190'
&gt;&gt;&gt; f=float(s)
&gt;&gt;&gt; f
1464106296.28519
&gt;&gt;&gt; format(f,'.30f')
'1464106296.285190105438232421875000000000'
&gt;&gt;&gt; print(f)
1464106296.29
</code></pre>
</div>
<span class="comment-copy">Are you using Python 3? I don't get this result in 2.7.</span>
<span class="comment-copy">There are two problems here: 1) <code>float</code> doesn't have infinite precision, 16 digits end-to-end is about the max; 2) Python won't necessarily output all the digits unless you use formatting to force it.</span>
<span class="comment-copy">Please see my edits. I agree with @MarkRansom that float has 16 digits end-to-end. What if I want to go beyond that limit?</span>
<span class="comment-copy">What's this for? Do you <i>really</i> need more precision than <code>float</code> provides?</span>
<span class="comment-copy">@RadLexus it's easily reproducible if you use <code>print</code> in Python 2. And I don't see any requests for a library recommendation in the question.</span>
<span class="comment-copy">This doesn't work with "0.00000001"</span>
