<div class="post-text" itemprop="text">
<p>I'm currently trying to write an abstraction for some Spark Streaming jobs that each have a portion of code which the the same between all of them (hence the need for an abstraction). </p>
<p>The format of each job is in this format:</p>
<pre><code>dStream \
        .filter(lambda rec: rec[self.EVENT_KEY_VALUE[0]] in list(self.EVENT_KEY_VALUE[1])) \
        .filter(lambda rec: self.EVENT_FIELDS.issubset(set(rec.keys()))) \

for INPUT in INPUTS:
        dStream \
            .map(lambda rdd: format_record_keys_for_salesforce(self.INPUT))

for map_func in OPTIONAL_MAPS:
        dStream \
            .map(map_func)

return dStream.map(self.OUTPUT.project_row)
</code></pre>
<p>There is always a <code>format_record_keys_for_salesforce</code> map stage and always a <code>dStream.map(self.OUTPUT.project_row)</code> stage. The problem comes from the first two <code>filter()</code>s. There is almost always the two filter stages in in each job however sometimes the job does not require it. I would rather have the filters be redundant and do nothing but return <code>True</code> than have a dev have to write extra code. </p>
<p>So, how can I write a <code>list</code> where any arbitrary value is a member of it? We do not know the values beforehand, only that it is a member of the list.</p>
<p>Kind of like: </p>
<pre><code>&gt;&gt; 'a' in list(all)
True
&gt;&gt; 5 in list(all)
True
&gt;&gt; *anything* in list(all)
True
&gt;&gt; ALL_NATURAL_NUMBERS in list(all)
True
&gt;&gt; ALL_SUBSETS_OF_NATURAL_NUMBERS in list(all)
True 
etc...
</code></pre>
<p>Is this possible or will I have to remove those stages from my abstraction and leave it up to the dev writing to job to decide whether they need a filter or not?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand you correctly, you need a list-like object, claiming that it contains any object.</p>
<p>You need to define a <a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types" rel="nofollow">list-like class</a>.</p>
<p>The simplest solution I can think about is a dirty hack:</p>
<pre><code>class MyList(list):
    def __contains__(self, item):
        return True
</code></pre>
<p>then  for any value assigned to <code>anyValue</code>:</p>
<pre><code>&gt;&gt;&gt; anyValue in MyList([])
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, you just want to mock the <code>__contains__</code> operator. So maybe something like:</p>
<pre><code>class MockList(list):
    def __contains__(self, item):
        return True
</code></pre>
</div>
<span class="comment-copy">I don't completely understand your question, lists in python can have any kind of objects in them: <code>a = ['a', 5, int, (lambda:1+2), map] ; 5 in a -&gt; True  ; 'a' in a -&gt; True</code></span>
<span class="comment-copy">The thing is we don't know what could be in the list, the thing that you're checking for membership could be absolutely anything, and I would like for it to be in the list. Does that help?</span>
<span class="comment-copy">ah, well not if you cast it to a list but an object that overloads <code>__contains__</code> can simulate containing every possible value.</span>
<span class="comment-copy">Good idea!!!!! Life saver mate, props! @TadhgMcDonald-Jensen</span>
