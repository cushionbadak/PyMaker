<div class="post-text" itemprop="text">
<p>So I'm currently (ab)using python notation to create a domain specific language. As part of this I'm overriding comparison functions to return non-boolean values.</p>
<p>So, for (mytype1 &lt; mytype2) and (mytype &lt; 0) I can easily do this by defining the __lt__() magic method.</p>
<p>However, I cannot figure out how to do so for (0 &lt; mytype) as presumably the magic method would need to be defined on the built-in int type. There doesn't seem to be a __rlt__() function as exists for numeric operations.</p>
<p>How do I add support for this comparison where the lhs is of type int (in python3)?</p>
</div>
<div class="post-text" itemprop="text">
<p>As per <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow">the documentation</a> the reflected form of <code>__lt__()</code> is <code>__gt__()</code>.</p>
<blockquote>
<p>There are no swapped-argument versions of these methods (to be used when the left argument does not support the operation but the right argument does); rather, <code>__lt__()</code> and <code>__gt__()</code> are each other’s reflection, <code>__le__()</code> and <code>__ge__()</code> are each other’s reflection, and <code>__eq__()</code> and <code>__ne__()</code> are their own reflection. If the operands are of different types, and right operand’s type is a direct or indirect subclass of the left operand’s type, the reflected method of the right operand has priority, otherwise the left operand’s method has priority. Virtual subclassing is not considered.</p>
</blockquote>
</div>
<span class="comment-copy">Thanks - I swear that wasn't there when I read that section before posting!</span>
