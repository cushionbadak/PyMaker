<div class="post-text" itemprop="text">
<p>Consider the simplest possible <code>python setup.py cmd</code>:</p>
<pre><code>from distutils.core import Command, setup


class Foo(Command):
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        pass

setup(
    cmdclass={'cmd': Foo}
)
</code></pre>
<p>It does precisely nothing.</p>
<p>But suppose something goes wrong while we're doing nothing, how should the command return a non-zero exit code to the user?</p>
<p>Return values seem to be ignored; <a href="https://docs.python.org/3/distutils/apiref.html#distutils.cmd.Command.run" rel="nofollow">the documentation</a> says only:</p>
<blockquote>
<p>All terminal output and filesystem interaction should be done by run().</p>
</blockquote>
<p>which seems relevant without being particularly helpful.</p>
<p>Perhaps we should infer to <code>exit</code>:</p>
<pre><code>class Foo(Command):
    # ...
    def run(self):
        exit(1)
</code></pre>
<p>This works, of course.</p>
<p>But it's not clear to me that it's the right thing to do: if the command is run as a part of a longer process, or it's overriding a built-in command, presumably nothing further will execute.</p>
<p>We could raise a relevant exception directly instead, assuming it might be more likely to be well-handled, but then there's a nasty traceback when we exit - what if we've already logged something nicer ourselves?</p>
<pre><code>class Foo(Command):
    # ...
    def run(self):
        print('Oh noes!', file=sys.stderr)
        exit(1)
</code></pre>
<p>Is this safe to do; is there a better alternative?</p>
</div>
<div class="post-text" itemprop="text">
<p>While exit will defintely work, raising any of the <a href="https://docs.python.org/3/distutils/apiref.html#module-distutils.errors" rel="nofollow noreferrer"><code>distutils.errors</code></a> with the error message desired to halt execution is how distutils handle problems internally.  For instance, if one wish to prevent editable (develop) installation method provided by setuptools, using only <code>distutils</code> API, raising <code>DistutilsError</code> can be achieve this.</p>
<pre><code>from setuptools.command.develop import develop 
from distutils.errors import DistutilsError

class fail_develop(develop):

    def run(self):
        raise DistutilsError('develop installation mode unsupported')

setup(
    ...
    cmdclass={'develop': fail_develop},
)
</code></pre>
<p>Running that with the develop option may result in this:</p>
<pre><code>running develop
error: develop installation mode unsupported
</code></pre>
<p>Execution will halt, as that is trapped and a <code>SystemExit</code> will be raised (now if somehow the whole process is wrapped by some other Python libraries that trap all exceptions including <code>SystemExit</code> or some other process expect a non-zero exit code, a traceback or other unexpected output will likely be produced).  While on the surface this is not too different than raising <code>SystemExit</code> (or calling <code>sys.exit</code>) directly, there are prefixes that do get generated for errors such as <code>DistutilsSetupError</code> that one might raise in a custom <code>Distribution</code> class.  So with all that said, calling <code>sys.exit</code> is fine.</p>
</div>
<span class="comment-copy">Raise an exception?  BTW <code>exit()</code> should not be used programatically, <code>sys.exit()</code> is preferred.  See <a href="http://stackoverflow.com/questions/6501121/the-difference-between-exit-and-sys-exit-in-python" title="the difference between exit and sys exit in python">stackoverflow.com/questions/6501121/â€¦</a></span>
<span class="comment-copy">@cdarke Huh, that's odd one (I mean, why not <code>print</code> and <code>sys.print</code> then..), cheers. I considered raising an exception, but as noted in my OP, the traceback might not be (I would go so far as "probably isn't") desired.</span>
<span class="comment-copy">It is an oddball, it is not obvious and you are certainly not the only person using it.  But its not <code>sys</code>, its <code>__builtins__.print('hello')</code> (for python 3).</span>
<span class="comment-copy">@cdarke Right, but it's also <code>__builtins__.exit</code> - I just meant it's odd to have different function to call interactively. Especially considering that each option works under each circumstance anyway!</span>
