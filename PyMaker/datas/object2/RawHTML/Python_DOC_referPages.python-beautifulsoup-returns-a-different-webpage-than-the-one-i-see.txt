<div class="post-text" itemprop="text">
<p>I'm very new to either web scraping or python so apologies in advance if it's a stupid question. </p>
<pre><code>url=https://infoweb.newsbank.com/apps/news/results?sort=YMD_date%3AD&amp;p=AWNB&amp;t=&amp;maxresults=20&amp;f=advanced&amp;b=results&amp;val-base-0=January%201%2C%202005&amp;fld-base-0=YMD_date&amp;bln-base-1=and&amp;val-base-1=drone%2C%20unmanned%20aerial%20vehicle%2C%20UAV&amp;fld-base-1=alltext
page = requests.get(url, allow_redirects=True)
allcont = BeautifulSoup(page.text, 'html.parser')
allcont.find_all('div',class_="search-hits__meta--total_hits")
</code></pre>
<p>When I put in the url in a browser, I'm directed to a page with search result for January 1, 2005 for keywords "drone" on the website AccessWorldNews. The element I'm interested in is the number of results returned - in this cases it's 2, which can be isolated by `'div',class_="search-hits__meta--total_hits"'. </p>
<p>However, the web content that beautifulsoup has found me is entirely different from what I can see from the browser. Looking at the text, it appears to be an intermediate webpage where users put in username and password, but the funny thing is it appears to me that I did not ever have to put in any username and password to access that url above. </p>
<p>I'd love to learn about how I can tell beautifulsoup to go to the page that's the same as I see when I put the url into the browser. Any help is highly appreciated! </p>
</div>
<div class="post-text" itemprop="text">
<p>The URL you provided loads the user login page for any external visitor. So BeautifulSoup (BS) too will get you the html for that page. To obtain the search results, which you find after logging in, you need to first login to the page and then use BS parser in that page. But BS doesn't support logins. Instead, use selenium to do browser automation, perform the login through selenium and also get the html of the logged in page. Refer to get_attribute() in selenium.</p>
</div>
<span class="comment-copy">You can always try <code>selenium</code>. That module lets you visually see what the program is also seeing. Documentation is at <a href="https://selenium-python.readthedocs.io/" rel="nofollow noreferrer">selenium-python.readthedocs.io</a></span>
<span class="comment-copy">You're already logged into the web site, so you don't have to go through the login page. But your script isn't logged in yet, so it gets redirected there.</span>
<span class="comment-copy">You would need to send all your cookies in <code>requests.get()</code>.</span>
<span class="comment-copy">Since you're already familiar with <code>requests</code>, you might prefer <a href="https://html.python-requests.org/#javascript-support" rel="nofollow noreferrer"><code>requests_html</code></a> as an alternative to selenium for rendering Javascript. It has a nice API and is integrated with requests, so you wouldn't have to change much of your existing code.</span>
<span class="comment-copy">Thanks so much! This is really helpful. I really appreciate it!</span>
