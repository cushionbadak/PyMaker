<div class="post-text" itemprop="text">
<p>I have a function that is supposed to merge two sorted lists into a combined sorted list.  I know there are other ways of accomplishing this, but can someone explain why this code doesn't work</p>
<pre><code>def merge_two(list1,list2):
    new=[]
    l1=list1[:]
    l2=list2[:]
    while l1 and l2:
        if l1[0]&lt;l2[0]:
            new.append(l1.pop(0))
        else:
            new.append(l2.pop(0))
        print(new,l1,l2)    
        return new+l1+l2
</code></pre>
<p>For some reason the <code>while</code> loop only seems to run once.  For example if I use <code>list=['a','x','z']</code> and <code>list2=['b','c','f','g']</code>, the print line at the end of the function results in <code>['a']['x','z']['b','c','f','g']</code></p>
<p>From debugging this seems to be due to the while loop only executing once, but I'm not sure why that's happening...it should go until either <code>l1</code> or <code>l2</code> is empty</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because a function breaks after it returns something. You need to un-indent your return statement:</p>
<pre><code>def merge_two(list1,list2):
    new=[]
    l1=list1[:]
    l2=list2[:]
    while l1 and l2:
        if l1[0]&lt;l2[0]:
            new.append(l1.pop(0))
        else:
            new.append(l2.pop(0))   
    return new+l1+l2
</code></pre>
<p>Alternatively, if for some reason you would like a list of all the steps your function produced, you could actually use <code>yield</code> instead of <code>return</code> in the exact same spot you used your return at:</p>
<pre><code>def merge_two(list1,list2):
    new=[]
    l1=list1[:]
    l2=list2[:]
    while l1 and l2:
        if l1[0]&lt;l2[0]:
            new.append(l1.pop(0))
        else:
            new.append(l2.pop(0))   
        yield new+l1+l2
</code></pre>
<p>Then running it:</p>
<pre><code>&gt;&gt;&gt; list(merge_two(a, b))
[['a', 'x', 'z', 'b', 'c', 'f', 'g'],
 ['a', 'b', 'x', 'z', 'c', 'f', 'g'],
 ['a', 'b', 'c', 'x', 'z', 'f', 'g'],
 ['a', 'b', 'c', 'f', 'x', 'z', 'g'],
 ['a', 'b', 'c', 'f', 'g', 'x', 'z']]
</code></pre>
<p>And of course you'll see that the last list yielded is the sorted list :).</p>
</div>
<span class="comment-copy">... because the <code>return</code> leaves the function before the <code>while</code> has a chance to run a second time?</span>
<span class="comment-copy">OP may also want to check out the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> builtin function.</span>
<span class="comment-copy">Sigh, of course it was something silly like an indent problem.  I kept checking the fact to make sure the if/else statement was indented correctly but totally overlooked that the return was in the wrong place.  Must've been just staring at this too long.  I'm just getting back into learning some programming after not doing any in many years.  And when I learned back in school it was all C++.  I'm still thrown by the lack of braces to segment off blocks...</span>
<span class="comment-copy">@wildpygmy Happens to us all don't worry lol</span>
