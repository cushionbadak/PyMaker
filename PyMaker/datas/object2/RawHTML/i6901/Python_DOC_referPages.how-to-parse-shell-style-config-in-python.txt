<div class="post-text" itemprop="text">
<p>all,</p>
<p>I'm working on some scripts, I have a shell style config file like this:</p>
<pre><code>A=1
B=2
</code></pre>
<p>Now I have to write a python script, and use this config file for some value. Someone said to use ConfigureParser module of python(codes like this), but I got error.</p>
<pre><code>&gt;&gt;&gt; import ConfigParser
&gt;&gt;&gt; cf = ConfigParser.ConfigParser()
&gt;&gt;&gt; cf.read("config")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py", line 305, in read
    self._read(fp, filename)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py", line 512, in _read
    raise MissingSectionHeaderError(fpname, lineno, line)
ConfigParser.MissingSectionHeaderError: File contains no section headers.
file: config, line: 1
'A=1\n'
</code></pre>
<p>I can't use python ConfigParser style config file, which means the config file is just like above, could not change it. So how to parse shell style config in python? Thank you~</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this.</p>
<pre><code>import configparser
config = configparser.RawConfigParser()

try:
    with open(YourConfigFilePath) as f:
        config.readfp(f)
except:
    print("Config file Don't exist.")

# Check the config variable
print(config)    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from configparser import ConfigParser
config = ConfigParser()
config.read('config')

print('IP' in config)
print(config.sections())
print((config['IP']['A']))
</code></pre>
<p><strong>OUTPUT:</strong></p>
<pre><code>True
['IP']
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using the <a href="https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_string" rel="nofollow noreferrer"><code>config.read_string()</code></a> method to parse a config string instead of a filename. You can then use a string header to change the format of the config file in-memory:</p>
<pre><code>import configparser

# Slurp in file contents
with open('example.cfg') as ec:
    cfg_data = ec.read()

# Insert a section header
cfg_data = "[default]\n\n" + cfg_data


# Now read the configuration:
cfgparser = configparser.ConfigParser()
cfgparser.read_string(cfg_data, source='example.cfg')
</code></pre>
</div>
