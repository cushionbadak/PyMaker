<div class="post-text" itemprop="text">
<p>Alright all you genius programmers and developers you... I could really use some help on this one, please.</p>
<p>I'm currently taking the 'Python for Everybody Specialization', that's offered through Coursera (<a href="https://www.coursera.org/specializations/python" rel="nofollow noreferrer">https://www.coursera.org/specializations/python</a>), and I'm stuck on an assignment.</p>
<p>I cannot figure out how to create a list that contains only the first instances of each word that's found in a string:</p>
<p>Example string:</p>
<pre><code>my_string = "How much wood would a woodchuck chuck,
             if a woodchuck would chuck wood?"
</code></pre>
<p>Desired list:</p>
<pre><code>words_list = ['How', 'much', 'wood', 'would',
              'a', 'woodchuck', 'chuck', 'if']
</code></pre>
<p>Thank you all for your time, consideration, and contributions!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can build a list with words that have already been seen and filter non alphabetic characters:</p>
<pre><code>my_string = "How much wood would a woodchuck chuck, if a woodchuck would chuck wood?"

new_l = []
final_l = []

for word in my_string.split():
    word = ''.join(i for i in word if i.isalpha())
    if word not in new_l:
       final_l.append(word)
       new_l.append(word)
</code></pre>
<p>Output:</p>
<pre><code>['How', 'much', 'wood', 'would', 'a', 'woodchuck', 'chuck', 'if']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be accomplished in 2 steps, first remove punctuation and then add the words to a set which will remove duplicates.</p>
<p>Python 3:</p>
<pre><code>from string import punctuation #  This is a string of all ascii punctuation characters

trans = str.maketrans('', '', punctuation)

text = 'How much wood would a woodchuck chuck, if a woodchuck would chuck wood?'.translate(trans)

words = set(text.split())
</code></pre>
<p>Pyhton 2:</p>
<pre><code>from string import punctuation #  This is a string of all ascii punctuation characters

text = 'How much wood would a woodchuck chuck, if a woodchuck would chuck wood?'.translate(None, punctuation)

words = set(text.split())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since all instances of a word are identical, I'm going to take the question to mean that you want a unique list of words that appear in the string.  Probably the easiest way to do this is:</p>
<pre><code>import re
non_unique_words = re.findall(r'\w+', my_string)
unique_words = list(set(non_unique_words))
</code></pre>
<p>The 're.findall' command will return any word, and converting to a set and back to a list will make the results unique.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try it:</p>
<pre><code>my_string = "How much wood would a woodchuck chuck, if a woodchuck would chuck wood?"
def replace(word, block):
    for i in block:
        word = word.replace(i, '')
    return word
my_string = replace(my_string, ',?')
result = list(set(my_string.split()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code></a> module and cast result to a <code>set</code> in order to remove duplicates:</p>
<pre><code>&gt;&gt;&gt; import re

&gt;&gt;&gt; my_string = "How much wood would a woodchuck chuck, if a woodchuck would chuck wood?"
&gt;&gt;&gt; words_list = re.findall(r'\w+', my_string)  # Find all words in your string (without punctuation)
&gt;&gt;&gt; words_list_unique = sorted(set(words_list), key=words_list.index)  # Cast your result to a set in order to remove duplicates. Then cast again to a list.

&gt;&gt;&gt; print(words_list_unique)
['How', 'much', 'wood', 'would', 'a', 'woodchuck', 'chuck', 'if']
</code></pre>
<p>Explanation:</p>
<ul>
<li><code>\w</code> means <strong>character</strong>, <code>\w+</code> means <strong>word</strong>.</li>
<li>So you use <code>re.findall(r'\w+', my_string)</code> in order to <strong>find all the words in <code>my_string</code></strong>.</li>
<li>A <code>set</code> is a collection with unique elements, so you cast your result list from <code>re.findall()</code> into a set.</li>
<li>Then you recast to a <code>list</code> (<code>sorted</code>) in order to get a list with unique words from your string.</li>
<li><strong>EDIT</strong> - If you want to preserve the order of the words, you can use <code>sorted()</code> with a <code>key=words_list.index</code> in order to keep them ordered, because <code>set</code>s are unordered collections.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you need to preserve the order the words appear in:</p>
<pre><code>import string
from collections import OrderedDict

def unique_words(text):
    without_punctuation = text.translate({ord(c): None for c in string.punctuation})
    words_dict = OrderedDict((k, None) for k in without_punctuation.split())
    return list(words_dict.keys())

unique_words("How much wood would a woodchuck chuck, if a woodchuck would chuck wood?")
# ['How', 'much', 'wood', 'would', 'a', 'woodchuck', 'chuck', 'if']
</code></pre>
<p>I use OrderedDict because there does not appear to be an ordered set in the Python standard library.</p>
<p><strong>Edit:</strong></p>
<p>To make the word list case insensitive one could make the dictionary keys lowercase: <code>(k.lower(), None) for k in ...</code></p>
</div>
<div class="post-text" itemprop="text">
<p>It should be sufficient to find all of the words, and then filter out the duplicates.</p>
<pre><code>words = re.findall('[a-zA-Z]+', my_string)
words_list = [w for idx, w in enumerate(words) if w not in words[:idx]]
</code></pre>
</div>
<span class="comment-copy">Remove punctuation and use a <code>set</code>? Youll likely get more answers if you posted your own atempt first...</span>
<span class="comment-copy">As a start, see this <a href="https://stackoverflow.com/questions/265960/best-way-to-strip-punctuation-from-a-string-in-python" title="best way to strip punctuation from a string in python">stackoverflow.com/questions/265960/â€¦</a></span>
<span class="comment-copy">Why so many answers to a question that shows no effort from the OPs side?</span>
<span class="comment-copy">@FredrikPihl Because it's relatively simple and people seem to be bored. I agree that there are probably more "deserving" questions though.</span>
<span class="comment-copy">@FredrikPihl: I felt that if the contributors didn't have a syntactual constraint (i.e., some silly code snippet I slopped together in a sad attempt to appear less of a newbie coder, which I believe would have only caused confusion as to my desired output anyways)... that it would allow them the freedom to express how they would achieve the desired output.</span>
<span class="comment-copy">This is brilliant. I love how you only used the standard library to achieve the desired output!; thank you for sharing!</span>
<span class="comment-copy">@ScriptNasty Glad to help!</span>
<span class="comment-copy">Sets are unordered, so this solution will not help if you need the words in order.</span>
<span class="comment-copy">That seems to achieve the individual word slicing efficietly, but upon invoking print(unique_words), they're all unordered. I'd like to have all the words indexed within the list.</span>
<span class="comment-copy"><code>\w+</code> is equivalent to <code>[a-zA-Z0-9_]+</code>, which OP may not want to match.</span>
<span class="comment-copy">@ZachGates Sure.  OP needs to define "word" more clearly for this level of detail to matter.</span>
<span class="comment-copy">@ScriptNasty It's important to include such details in the original question.  In that case you'll have to use another method to make the list of words unique.  OrderedSet is one, but probably the simplest in standard Python is ZachGates's suggestion.  The only problem I see with it is that it is $O(n^2)$ if the string has many words.</span>
<span class="comment-copy">What about if I write a <code>'?!'</code> in the end of the sentence?</span>
<span class="comment-copy">You can use <code>punctuation</code> function from string module for delete all punctuation.</span>
<span class="comment-copy"><code>\w+</code> is equivalent to <code>[a-zA-Z0-9_]+</code>, which OP may not want to match.</span>
