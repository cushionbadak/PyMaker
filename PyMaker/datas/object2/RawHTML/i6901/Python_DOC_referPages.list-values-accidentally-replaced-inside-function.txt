<div class="post-text" itemprop="text">
<p>I have a List of List (tableData) and I want to return a new List (cloneTable) that outputs the length of each string in the original List so I can find the longest string using the function longestString. I also want to keep the values in the original List. The problem is that after my function runs, the original List has been converted to lengths. </p>
<p>I am sure the code can be better (I am still learning) but I also want to understand WHY there is this problem. I did not Assign tableData I am passing the values from tableData to assign to cloneTable. Thanks for the help! </p>
<pre><code>#A list of lists
tableData = [
    ['apples','oranges','cherries','banana'], #6,7,8,6
    ['Alice','Bob','Carol','David'], #5,3,5,5
    ['dogs','cats','moose','goose'], #4,4,5,5
    ['car','train','helicopter','plane'] #3,5,10,5
]

#longestString function finds the longest string in each list of list
def longestString(table):
    cloneTable = []
    output = []

    for v1 in range(len(table)):
        cloneTable = cloneTable + [table[v1]]

    for v1 in range(len(cloneTable)):
        for v2 in range(len(cloneTable)):
            cloneTable[v1][v2] = len(cloneTable[v1][v2])

        cloneTable[v1].sort()

    for v1 in range(len(cloneTable)):
        output = output + [cloneTable[v1][-1]]

    return output

##################################################################

for v1 in range(len(tableData)): #returns the list - OK
    print(tableData[v1])

print(longestString(tableData)) #returns the longest strings - OK

for v1 in range(len(tableData)): #returns a list of string lengths - Not OK
    print(tableData[v1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure why you call your list <code>cloneTable</code> if it is just a reference copy/assignment you're doing. </p>
<p>You should perform a deep copy of your list if you really want to clone it. A cross-python solution involves using <code>copy.deepcopy</code>:</p>
<pre><code>import copy
def longestString(table):
    cloneTable = []
    output = []

    cloneTable = copy.deepcopy(table)
    ...
</code></pre>
</div>
<span class="comment-copy">A more advanced solution might be something like <code>[max(l, key=len) for l in tableData]</code> This takes advantage of the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">max</a> function and a concept called <a href="http://www.secnetix.de/olli/Python/list_comprehensions.hawk" rel="nofollow noreferrer">list comprehension</a></span>
<span class="comment-copy">slice notation will also work <code>table[:]</code></span>
<span class="comment-copy">@Soviut Incorrect, we're dealing with a nested list.</span>
<span class="comment-copy">Ah you're right, I missed that due to the indentation. I'm going to clarify that in the question.</span>
<span class="comment-copy">Thanks coldspeed and others! deepcopy - That did the trick!</span>
<span class="comment-copy">@user8521366 No problem. Since it helped, do consider <a href="https://stackoverflow.com/help/someone-answers">marking my answer accepted</a>. Cheers.</span>
