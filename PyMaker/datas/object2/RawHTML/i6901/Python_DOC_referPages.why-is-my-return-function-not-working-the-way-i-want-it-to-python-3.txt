<div class="post-text" itemprop="text">
<p>Can someone give me some hints or ideas as to why this:</p>
<pre><code>def fishstore(fish, price):
  total = "Your", fish, "costs", price, "$"
  return total
print (fishstore("sardines", 5))
</code></pre>
<p>shows this:</p>
<pre><code>('Your', 'sardines', 'costs', 5, '$')
</code></pre>
<p>instead of this:</p>
<pre><code>Your sardines costs 5 $
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are returning a tuple, and that's what is being printed. Just because you return multiple items separate by commas does not mean <code>print()</code> will see those as separate arguments. Otherwise, how would you print a tuple as a tuple?</p>
<p>If you wanted to print the <em>contents</em> of the tuple as separate arguments, use the <code>*argument</code> call syntax:</p>
<pre><code>print(*fishstore("sardines", 5))
</code></pre>
<p>The <code>*argument</code> syntax makes it explicit you want to unpack all the values into separate items for <code>print()</code> to process.</p>
<p>The function isn't all that useful, really. It might be more useful to use <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer"><em>string formatting</em></a> to put the item and price together into a single string to print:</p>
<pre><code>def fishstore(fish, price):
    total = "Your {} costs {}$".format(fish, price)
    return total
</code></pre>
<p>at which point <code>print(fishstore("sardines", 5))</code> will work just fine.</p>
<p>If you are using Python 3.6 (or newer), you can use the <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer"><code>f'....'</code> formated string literals</a> syntax too:</p>
<pre><code>def fishstore(fish, price):
    total = f"Your {fish} costs {price}$"
    return total
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just concat the string by coding <code>total = "Your " + fish + "costs " + price +"$"</code> in replacement. I'm not too positive why it outputs it in a list like that, but the rest of the code looks correct. You could also just do <code>print ("Your %s cost %d $", fish, price)</code>.</p>
<p>In Python, commas don't concat. If you wanted it to be stored in a list, you could also use the .join() function as others have commented. </p>
</div>
<span class="comment-copy">Thank you for helping! I just have one more question: what do you mean by "the argument call syntax"?thank you!! I'm just beginning with python 3, so sorry if I ask stupid questions.</span>
<span class="comment-copy">@MacKenzieRichards: Adding <code>(...)</code> after a name is called a <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer"><i>call</i></a>. Part of that syntax is the ability to specify that an object should not be treated as a single argument to the call, but as a sequence of separate arguments.</span>
<span class="comment-copy">@MacKenzieRichards: so <code>print(1, 2, 3)</code> can also be expressed as <code>args = [1, 2, 3]</code>, and <code>print(*args)</code>. Using <code>*args</code> in the <code>print</code> call tells Python to take all the elements contained in <code>args</code> and use those as separate arguments instead.</span>
<span class="comment-copy">Ohhh! Thank you, I think I understand now.</span>
