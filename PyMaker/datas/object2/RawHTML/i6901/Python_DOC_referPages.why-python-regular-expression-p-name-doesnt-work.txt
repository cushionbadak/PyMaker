<div class="post-text" itemprop="text">
<p>I am learning '<code>re</code>' part of Python, and the named pattern <code>(?P=name)</code> confused me,</p>
<p>When I using <code>re.sub()</code> to make some exchange for digit and character, the patter '<code>(?P=name)</code>' doesn't work, but the pattern '<code>\N</code>' and '<code>\g&lt;name&gt;</code>' still make sense. Code below:</p>
<pre><code>[IN]print(re.sub(r'(?P&lt;digit&gt;\d{3})-(?P&lt;char&gt;\w{4})', r'(?P=char)-(?P=digit)', '123-abcd'))
[OUT] (?P=char)-(?P=digit)
[IN] print(re.sub(r'(?P&lt;digit&gt;\d{3})-(?P&lt;char&gt;\w{4})', r'\2-\1', '123-abcd'))
[OUT] abcd-123
[IN] print(re.sub(r'(?P&lt;digit&gt;\d{3})-(?P&lt;char&gt;\w{4})', r'\g&lt;char&gt;-\g&lt;digit&gt;', '123-abcd'))
[OUT] abcd-123
</code></pre>
<p>Why it failed to make substitute when I use <code>(?P=name)</code>?<br/>
And how to use it correctly?<br/>
I am using Python 3.5</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>(?P=name)</code> is an <em>inline (in-pattern) backreference</em>. You may use it inside a regular expression pattern to match the same content as is captured by the corresponding named capturing group, see the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">Python <em>Regular Expression Syntax</em> reference</a>:</p>
<blockquote>
<p><strong><code>(?P=name)</code></strong><br>
  A backreference to a named group; it matches whatever text was matched by the earlier group named name.</br></p>
</blockquote>
<p>See <a href="https://regex101.com/r/Px2iGU/1" rel="nofollow noreferrer">this demo</a>: <code>(?P&lt;digit&gt;\d{3})-(?P&lt;char&gt;\w{4})&amp;(?P=char)-(?P=digit)</code> matches <code>123-abcd&amp;abcd-123</code> because the "digit" group matches and captures <code>123</code>, "char" group captures <code>abcd</code> and then the named inline backreferences match <code>abcd</code> and <code>123</code>.</p>
<p>To replace matches, use <code>\1</code>, <code>\g&lt;1&gt;</code> or <code>\g&lt;char&gt;</code> syntax with <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> replacement pattern. Do not use <code>(?P=name)</code> for that purpose:</p>
<blockquote>
<p><em>repl</em> can be a string or a function... Backreferences, such as <code>\6</code>, are replaced with the substring matched by group 6 in the pattern... <br><br/>In string-type repl arguments, in addition to the character escapes and backreferences described above, <strong><code>\g&lt;name&gt;</code> will use the substring matched by the group named name, as defined by the <code>(?P&lt;name&gt;...)</code> syntax</strong>. <code>\g&lt;number&gt;</code> uses the corresponding group number; <code>\g&lt;2&gt;</code> is therefore equivalent to <code>\2</code>, but isnâ€™t ambiguous in a replacement such as <code>\g&lt;2&gt;0</code>. <code>\20</code> would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character '0'. The backreference <code>\g&lt;0&gt;</code> substitutes in the entire substring matched by the RE.</br></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can check the details of using and back-referencing ?P visiting:</p>
<pre><code>https://docs.python.org/3/library/re.html
</code></pre>
<p>and using CTRL+F in your browser to look for (?P...). It comes a nice chart with all the instructions about when you can make use of ?P=name.</p>
<p>For this example, you're doing right at your third re.sub() call.</p>
<p>In the all re.sub() calls you can only use the ?P=name syntax in the first string parameter of this method and you don't need it in the second string parameter because you have the \g syntax.</p>
<p>In case you're confuse about the ?P=name being useful, it is, but for making a match by backreferencing an already named string.</p>
<p>Example: you want to match potatoXXXpotato and replace it for YYXXXYY. You could make:</p>
<pre><code>re.sub(r'(?P&lt;myName&gt;potato)(XXX)(?P=myName)', r'YY\2YY', 'potatoXXXpotato')
</code></pre>
<p>or</p>
<pre><code>re.sub(r'(?P&lt;myName&gt;potato)(?P&lt;triple&gt;XXX)(?P=myName)', r'YY\g&lt;triple&gt;YY', 'potatoXXXpotato')
</code></pre>
</div>
<span class="comment-copy"><code>(?P=name)</code> is an in-pattern backreference. You cannot use it in the replacement pattern.</span>
<span class="comment-copy">What were you trying to achieve with "?P=name" ???</span>
<span class="comment-copy">Thanks, now I know that, I should use &lt;?P=name&gt; inside a re expression with named group and &lt;?P=name&gt; will get the matched result(such as '123') rather than the re pattern(\d{3}) again. Appreciate your help!</span>
<span class="comment-copy">Thanks! you do me a great favor by showing me a correct example.</span>
<span class="comment-copy">You're welcome. The doc is useful too, take this in mind for the next time :-)</span>
