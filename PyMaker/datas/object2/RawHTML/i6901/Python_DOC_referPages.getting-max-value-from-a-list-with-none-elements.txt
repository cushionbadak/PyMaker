<div class="post-text" itemprop="text">
<p>I'm trying to get maximal value from a list object that contains nonetype using the following code:</p>
<pre><code>import numpy as np

LIST = [1,2,3,4,5,None]
np.nanmax(LIST)
</code></pre>
<p>But I received this error message</p>
<pre><code>'&gt;=' not supported between instances of 'int' and 'NoneType'
</code></pre>
<p>Clearly <code>np.nanmax()</code> doesn't work with <code>None</code>. What's the alternative way to get max value from list objects that contain <code>None</code> values?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, convert to a numpy array. Specify <code>dtype=np.floatX</code>, and all those <code>None</code>s will be casted to <code>np.nan</code> type.</p>
<pre><code>import numpy as np

lst = [1, 2, 3, 4, 5, None]

x = np.array(lst, dtype=np.float64)
print(x)
array([  1.,   2.,   3.,   4.,   5.,  nan])
</code></pre>
<p>Now, call <code>np.nanmax</code>:</p>
<pre><code>print(np.nanmax(x))
5.0
</code></pre>
<p>To return the max as an integer, you can use <code>.astype</code>:</p>
<pre><code>print(np.nanmax(x).astype(int)) # or int(np.nanmax(x))
5
</code></pre>
<p>This approach works as of <code>v1.13.1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One approach could be -</p>
<pre><code>max([i for i in LIST if i is not None])
</code></pre>
<p>Sample runs -</p>
<pre><code>In [184]: LIST = [1,2,3,4,5,None]

In [185]: max([i for i in LIST if i is not None])
Out[185]: 5

In [186]: LIST = [1,2,3,4,5,None, 6, 9]

In [187]: max([i for i in LIST if i is not None])
Out[187]: 9
</code></pre>
<hr/>
<p>Based on <a href="https://stackoverflow.com/questions/46025724/getting-max-value-from-a-list-with-none-elements/46025745?noredirect=1#comment79011518_46025745"><code>comments from OP</code></a>, it seems we could have an input list of all <code>None</code>s and for that special case, it output should be <code>[None, None, None]</code>. For the otherwise case, the output would be the scalar <code>max</code> value. So, to solve for such a scenario, we could do -</p>
<pre><code>a = [i for i in LIST if i is not None]
out = [None]*3 if len(a)==0 else max(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a simple list-comprehension to first filter out Nones:</p>
<pre><code>np.nanmax([x for x in LIST if x is not None])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to be more specific to take the <code>max</code> of numbers only you can use <code>filter</code> and the <a href="https://docs.python.org/2/library/numbers.html" rel="nofollow noreferrer">numbers</a> abstract base class:</p>
<pre><code>&gt;&gt;&gt; import numbers
&gt;&gt;&gt; filter(lambda e: isinstance(e, numbers.Number), [1,'1',2,None])
[1, 2]
</code></pre>
<p>Or, a generator version of this:</p>
<pre><code>&gt;&gt;&gt; max(e for e in [1,'1',2,None] if isinstance(e, numbers.Number))
2
</code></pre>
<hr/>
<p>Since this is Python 3, your error is the stricter comparison rules under Python 3:</p>
<pre><code>Python 3.6.1 (default, Mar 23 2017, 16:49:06) 
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 1&lt;None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: '&lt;' not supported between instances of 'int' and 'NoneType'
</code></pre>
<p>Where Python 2 does allow unlike object comparisons:</p>
<pre><code>Python 2.7.13 (default, Jan 15 2017, 08:44:24) 
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 1&lt;None
False
&gt;&gt;&gt; 1&gt;None
True
</code></pre>
<p>So when you create a numpy array you are getting an array of Python objects:</p>
<pre><code>&gt;&gt;&gt; np.array([1,2,3,4,5,None])
array([1, 2, 3, 4, 5, None], dtype=object)
</code></pre>
<p>So numpy is using the underlying Python 3 comparison rules to compare an array of Python objects which is your error:</p>
<pre><code>&gt;&gt;&gt; np.max(np.array([1,2,3,4,5,None]))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py", line 2252, in amax
    out=out, **kwargs)
  File "/usr/local/lib/python3.6/site-packages/numpy/core/_methods.py", line 26, in _amax
    return umr_maximum(a, axis, None, out, keepdims)
TypeError: '&gt;=' not supported between instances of 'int' and 'NoneType'
</code></pre>
<p>So you either need to filter out the <code>None</code> when you create the numpy array:</p>
<pre><code>&gt;&gt;&gt; np.max(np.array([e for e in [1,2,3,4,5,None] if e is not None]))
5
</code></pre>
<p>Or convert it to a numpy type that supports <code>nan</code> (and <code>np.int</code> does not have <code>nan</code>):</p>
<pre><code>&gt;&gt;&gt; np.array([1,2,3,4,5,None], dtype=np.float)
array([  1.,   2.,   3.,   4.,   5.,  nan])
</code></pre>
<p>But in this case, <code>nan</code> is the max value:</p>
<pre><code>&gt;&gt;&gt; np.max(np.array([1,2,3,4,5,None], dtype=np.float))
nan
</code></pre>
<p>So use <code>np.nanmax</code>:</p>
<pre><code>&gt;&gt;&gt; np.nanmax(np.array([1,2,3,4,5,None], dtype=np.float))
5.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python 2</p>
<pre><code>max([i for i in LIST if i is not None])
</code></pre>
<p>Simple in python 3 onwards</p>
<pre><code>max(filter(None, LIST))
</code></pre>
<p>However above code also filters out 0 if it's there in list. So working code will be as below</p>
<pre><code>max(filter(lambda v: v is not None, LIST))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a> to get rid of all the <code>None</code> of the <code>LIST</code><br/>
We are taking advantage of the fact that, filter method takes two parameters. The first one is a function and the second one is an Iterable.<br/>
This function must return an element of the Iterable(provided as the second argument) which gets removed from the Iterable. We are passing None as the first argument thus all of the objects that are <em><strong>false</strong></em> (in this case <code>None</code>) of the Iterable (<code>LIST</code>) gets filtered out.</p>
<pre><code>import numpy as np
LIST = [1,2,3,4,5,None]

filtered_list = list(filter(None, LIST))
np.nanmax(filtered_list) 
</code></pre>
<p><strong>Edit:</strong>  This won't remove 0 from the LIST</p>
<pre><code>filtered_list = list(filter(None.__ne__, LIST))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is what I would do:</p>
<pre><code>&gt;&gt;&gt; max(el for el in LIST if el is not None)
5
</code></pre>
<p>It is superficially similar to the other answers, but is subtly different in that it uses a <em>generator expression</em> rather than a <em>list comprehension</em>. The difference is that it doesn't create an intermediate list to store the result of the filtering.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pandas DataFrame have their own function,</p>
<p><code>list.idxmax()</code> return the index of max value by ignoring NaN value.
Look <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.idxmax.html" rel="nofollow noreferrer">this URl</a> for more info.</p>
</div>
<span class="comment-copy">What about converting <code>None</code> to 0?</span>
<span class="comment-copy"><code>None is not np.nan</code></span>
<span class="comment-copy">This works for me</span>
<span class="comment-copy">Good to know that <code>np.array</code> with specified dtype converts <code>None</code> to <code>nan</code>. NumPy is full of surprises.</span>
<span class="comment-copy">@MSeifert yes, the explicit type forces the conversion. Otherwise, it is stuck with <code>dtype=object</code> (shudder).</span>
<span class="comment-copy">Yeah, I would have expected a <code>TypeError</code> (like in <code>float(None)</code>) though. :)</span>
<span class="comment-copy">@MSeifert Added a version note. I'm unaware as to whether this continues to work in older versions.</span>
<span class="comment-copy">Hi, thanks for the comments from you all. I noticed that using your recommended method will generate an output of 5.0, is this a float64 object?</span>
<span class="comment-copy">Hi, thanks for your reply. I tried that before and ran a for loop to generate the my output into a list, but received this error <code>max() arg is an empty sequence</code>.</span>
<span class="comment-copy">@ChrisT. Is it possible that <code>LIST</code> contains only <code>None</code>s?</span>
<span class="comment-copy">@MSeifert. Yes, and thanks so much for asking (I was thinking about this and was just about to open another question thread). How does one deal with such empty list?</span>
<span class="comment-copy">@ChrisT. What's the expected output if there are all <code>None</code>s?</span>
<span class="comment-copy">@ChrisT. In Python 3 <code>max</code> accepts a <code>default</code> argument, so you could use <code>max([i for i in LIST if i is not None], default=None)</code>, that will return <code>None</code> if all your values are <code>None</code> instead of failing. Of course you could also use another value as default.</span>
<span class="comment-copy">Hi, thanks for your reply. I put your code into a for loop to generate the output into a list, but this, like other methods, also threw me an error <code>zero-size array to reduction operation fmax which has no identity</code></span>
<span class="comment-copy">Don't use <code>filter</code> here. It would also discard zeros which could be a problem if you have <code>LIST=[-1, 0]</code>. You wouldn't expect it to return <code>-1</code> as maximum.</span>
<span class="comment-copy">When you say "best", it would help if you also mentioned it's best by what criteria (it's not really clear).</span>
<span class="comment-copy">use max(filter(None.__ne__, LIST))</span>
<span class="comment-copy"><code>filter(None, ...)</code> also discards zeros. That could lead to problems if <code>0</code> would be in fact the maximum (e.g. <code>LIST=[-1, 0]</code>)</span>
<span class="comment-copy">Yes, I saw in an earlier post using filter, but this also generated an error on my Python.</span>
<span class="comment-copy">what error did you get?</span>
<span class="comment-copy">Though this generator route doesn't save time.</span>
<span class="comment-copy">@hpaulj: I never said it did. ;-) In my benchmarks, the two approaches have similar performance (but one is O(1) memory whereas the other is O(n)).</span>
