<div class="post-text" itemprop="text">
<p>I'm having trouble with async methods. I've already tried many examples from stack overflow, such as:</p>
<pre><code>loop = asyncio.get_event_loop()
loop.run_until_complete(method())
loop.close()

-----------

loop = asyncio.get_event_loop()
tasks = [  
    asyncio.ensure_future(method()),
    asyncio.ensure_future(method()),
]
loop.run_until_complete(asyncio.wait(tasks))  
loop.close()
</code></pre>
<p>The problem with those approaches is that they need to specify the number/methods before executing. What I need is a way to call a specific method many times from the terminal, but it can't be stuck on the last call.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> module:</p>
<pre><code>import multiprocessing
import random
import time

def printRandomNumber():
    print(random.randint(0, 100)) # output a random number 0-100
    time.sleep(30) # pause 30 seconds

FUNCS = {
    'foo': printRandomNumber
}

def createWorker(name):
    func = FUNCS.get(name, lambda: None)
    process = multiprocessing.Process(target = func, name = name)
    process.start()

while True:
    func_name = input('next function name: ')
    createWorker(func_name)
</code></pre>
<p>When executed, you can type "foo" and <code>printRandomNumber</code> will run in the background. You can, of course, change <code>"foo"</code> to whatever you like (like <code>"printRandomNumber"</code>), and with a little work, you could even get some arguments working.</p>
</div>
<span class="comment-copy">What do you mean by "call a specific method many times"? The same method or different methods? Also, how will you be calling these functions from the terminal?</span>
<span class="comment-copy">Let's say that I have a void method and it takes around 30s to process. I would like to call it from terminal by typing it, but each time I don't want to wait it finish before call the same method again. It can be done in C# as a background worker, but I don't know how to do in python.</span>
<span class="comment-copy">Nice! Thanks for the help.</span>
