<div class="post-text" itemprop="text">
<p>From the <a href="https://google.github.io/styleguide/pyguide.html#Lexical_Scoping" rel="nofollow noreferrer">Google Style Guide</a> on lexical scoping:</p>
<blockquote>
<p>A nested Python function can refer to variables defined in enclosing
  functions, but can not assign to them.</p>
</blockquote>
<p>Both of these seem to check out at first:</p>
<pre><code># Reference
def toplevel():
    a = 5
    def nested():
        print(a + 2)
    nested()
    return a
toplevel()
7
Out[]: 5

# Assignment
def toplevel():
    a = 5
    def nested():
        a = 7 # a is still 5, can't modify enclosing scope variable
    nested()
    return a
toplevel()
Out[]: 5
</code></pre>
<p>So why, then, does a combination of both reference and assignment in the nested function lead to an exception?</p>
<pre><code># Reference and assignment
def toplevel():
    a = 5
    def nested():
        print(a + 2)
        a = 7
    nested()
    return a
toplevel()
# UnboundLocalError: local variable 'a' referenced before assignment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In first case, you are referring to a <code>nonlocal</code> variable which is ok because there is no local variable called <code>a</code>.</p>
<pre><code>def toplevel():
    a = 5
    def nested():
        print(a + 2) # theres no local variable a so it prints the nonlocal one
    nested()
    return a
</code></pre>
<p>In the second case, you create a local variable <code>a</code> which is also fine (local <code>a</code> will be different than the nonlocal one thats why the original <code>a</code> wasn't changed). </p>
<pre><code>def toplevel():
    a = 5 
    def nested():
        a = 7 # create a local variable called a which is different than the nonlocal one
        print(a) # prints 7
    nested()
    print(a) # prints 5
    return a
</code></pre>
<p>In the third case, you create a local variable but you have <code>print(a+2)</code> before that and that is why the exception is raised. Because <code>print(a+2)</code> will refer to the local variable <code>a</code> which was created after that line.</p>
<pre><code>def toplevel():
    a = 5
    def nested():
        print(a + 2) # tries to print local variable a but its created after this line so exception is raised
        a = 7
    nested()
    return a
toplevel()
</code></pre>
<p>To achieve what you want, you need to use <code>nonlocal a</code> inside your inner function:</p>
<pre><code>def toplevel():
    a = 5
    def nested():
        nonlocal a
        print(a + 2)
        a = 7
    nested()
    return a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For anyone stumbling across this question, in addition to the accepted answer here, it is answered concisely in the <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow noreferrer">Python docs</a>:</p>
<blockquote>
<p>This code:</p>
<pre><code>&gt;&gt;&gt; x = 10
&gt;&gt;&gt; def bar():
...     print(x)
&gt;&gt;&gt; bar()
10
</code></pre>
<p>works, but this code:</p>
<pre><code>&gt;&gt;&gt; x = 10
&gt;&gt;&gt; def foo():
...     print(x)
...     x += 1
</code></pre>
<p>results in an <code>UnboundLocalError</code>.</p>
<p>This is because when you make an assignment to a variable in a scope,
  that variable becomes local to that scope and shadows any similarly
  named variable in the outer scope. Since the last statement in foo
  assigns a new value to <code>x</code>, the compiler recognizes it as a local
  variable. Consequently when the earlier <code>print(x)</code> attempts to print the
  uninitialized local variable and an error results.</p>
<p>In the example above you can access the outer scope variable by
  declaring it <code>global</code>:</p>
<pre><code>&gt;&gt;&gt; x = 10
&gt;&gt;&gt; def foobar():
...     global x
...     print(x)
...     x += 1
&gt;&gt;&gt; foobar()
10
</code></pre>
<p>You can do a similar thing in a nested scope using the <code>nonlocal</code>
  keyword:</p>
<pre><code>&gt;&gt;&gt; def foo():
...    x = 10
...    def bar():
...        nonlocal x
...        print(x)
...        x += 1
...    bar()
...    print(x)
&gt;&gt;&gt; foo()
10
11
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Just a note, the <code>print(a+2);a=7</code> combination doesn't work, however, the <code>a=7;print(a+2)</code> combination works.</span>
<span class="comment-copy">In the third case, how does <code>nested</code> "know" to search for a local variable rather than use the enclosing function's <code>a</code>? I follow your answer otherwise, but not this aspect since python is interpreted line by line.</span>
<span class="comment-copy">Even though its an interpreted language, the whole syntax gets checked before it runs. Have a look at <a href="https://stackoverflow.com/a/6889798/7688996">this</a> and <a href="https://softwareengineering.stackexchange.com/questions/263982/why-is-python-treated-as-a-interpreted-language-when-it-has-a-compiling-stage">this</a></span>
