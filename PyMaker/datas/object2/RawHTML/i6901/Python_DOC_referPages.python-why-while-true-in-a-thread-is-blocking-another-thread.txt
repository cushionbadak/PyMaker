<div class="post-text" itemprop="text">
<p>I have two threads. The first one (update_ds()) gets data from server and store in a global variable(ds). The second thread (ldk_modes()) uses the data from the first thread and do things accordingly. It's something like this:</p>
<pre><code>def update_ds():
    global ds
    try:
        ds = get_data(5)
        print (ds)
    except:
        print('update error')
        pass
    #runs every 1 second
    threading.Timer(1, update_ds).start()

def ldk_modes():
    global old_ds
    old_ds = ds
    while True:
        if ds != old_ds:
            if ds == 1003:
                do_something()
                old_ds = ds
            elif ds == 1002:
                do_something_else()
                old_ds = ds
        else:
            pass

update_ds()
threading.Thread(target=ldk_modes).start()
</code></pre>
<p>My first question is, my print out from update_ds() does not print every second. The do_something() or do_something_else() also do not respond to server data update quickly (I guess it's ultimately the result that the update_ds() thread did not update every second). Why?</p>
<p>Earlier, I have another version of the code:</p>
<pre><code>ds = 0
old_ds = 0

def update_ds():
    global ds
    try:
        ds = get_data(5)
        print (ds)
    except:
        print('update error')
        pass
    #runs every 1 second
    threading.Timer(1, update_ds).start()

def ldk_modes():
    global old_ds
    while True:
        if ds != old_ds:
            if ds == 1003:
                do_something()
                old_ds = ds
            elif ds == 1002:
                do_something_else()
                old_ds = ds

update_ds()
threading.Thread(target=ldk_modes).start()
</code></pre>
<p>I have the same problem that print(ds) does not execute every second. However, if I do "ctrl+c", although I wasn't able to terminate the program, I was able to get print(ds) to print every second! Why? and what's the proper way of terminating the program? For now, I'm use sudo kill processID, and it is a little inconvenient.</p>
<p>Lastly, what's the difference between</p>
<pre><code>def thread_fn():
    while True:
        print("hello")

threading.Thread(target=thread_fn).start()
</code></pre>
<p>and</p>
<pre><code>def thread_fn():
    print("hello")
    threading.Thread(target=thread_fn).start()
</code></pre>
<p>Both will create a thread that runs infinitely, is one better than the other? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure <code>Timer</code> is appropriate here.  Better to just use two different <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer"><code>Thread</code></a> instances, and include a <code>time.sleep(1)</code> when you want a 1-second pause before a recursive call. (Or, use a loop instead of recursion, where you build and take down a new <code>Thread</code> on each iteration.)</p>
<p>Even given this setup, race conditions may play havoc with synchronization. 
 It's not exactly clear what kind of guarantees you need, but if you want to ensure one <code>Thread</code> has control, consider using a <a href="https://docs.python.org/3/library/threading.html#threading.Lock" rel="nofollow noreferrer"><code>Lock</code></a> or <a href="https://docs.python.org/3/library/threading.html#condition-objects" rel="nofollow noreferrer"><code>Condition</code></a>.</p>
<p>Here's a short demonstration showing the unreliability of threaded processes, using a similar invocation of <code>global</code> as in your original example.  </p>
<p>Brief description:</p>
<ul>
<li>The <code>foo()</code> thread will stop when <code>new_x</code> crosses a given threshold.  </li>
<li>The <code>bar()</code> thread will also stop upon reaching a certain inequality.     </li>
<li><code>bar()</code> makes its comparison using <code>new_x</code>, a value updated in <code>foo()</code>.  </li>
<li><code>foo()</code> notes the time elapsed since its last run (to address you concern about running once every second).</li>
</ul>
<p>While the output will differ on each run, below is some example output, where you can see that, without any kind of lock in place, it's not at all clear which function has control at any given point in time.  </p>
<pre><code>import numpy as np
import threading
import time

x = 5
new_x = 0
comparison = 6
current_ts = time.time()

def foo(x, ts, thresh=0.7):
    print("[FOO] foo() is running.\n")
    global new_x, current_ts
    current_ts = time.time()
    delta = round(current_ts - ts, 4)
    print("[FOO] seconds elapsed since last run: {}\n".format(delta))
    new_x = round(x + np.random.random(), 4)
    diff = abs(new_x-x)
    print("[FOO] x: {}, new_x: {}, diff: {}, thresh: {}\n".format(x, new_x, diff, thresh))
    if new_x &lt; x + thresh:
        print("[FOO] We continue.\n")
        time.sleep(1)
        foo(new_x, current_ts)
    else:
        print("[FOO] We end.\n")

def bar():
    print("[BAR] bar() is running.\n")  
    bar_ts = time.time()
    delta = round(bar_ts - current_ts, 4)
    print("[BAR] ts: {}, delta from current_ts: {}\n".format(bar_ts, delta)) 
    if (new_x &lt;= comparison) and t1:
        time.sleep(1)
        bar()
    else:
        print("[BAR] new_x ({}) &gt; comparison ({})...\n".format(new_x, comparison))
        print("[BAR] We end.\n")
</code></pre>
<p>Now run:</p>
<pre><code>t1 = threading.Thread(target=foo, args=(x, current_ts))
t1.start()

t2 = threading.Thread(target=bar)
t2.start()
</code></pre>
<p>Output:</p>
<pre><code>[FOO] foo() is running.
[BAR] bar() is running.
[BAR] ts: 1504494723.83073, delta from current_ts: 0.0016
[FOO] seconds elapsed since last run: 0.0022
[FOO] x: 5, new_x: 5.5483, diff: 0.5483000000000002, thresh: 0.7
[FOO] We continue.
[BAR] bar() is running.
[FOO] foo() is running.
[FOO] seconds elapsed since last run: 1.0041
[BAR] ts: 1504494724.83534, delta from current_ts: 1.004
[FOO] x: 5.5483, new_x: 6.1234, diff: 0.5751, thresh: 0.7
[FOO] We continue.
[BAR] bar() is running.
[FOO] foo() is running.
[FOO] seconds elapsed since last run: 1.0027
[BAR] ts: 1504494725.838043, delta from current_ts: 1.0026
[FOO] x: 6.1234, new_x: 6.2092, diff: 0.08579999999999988, thresh: 0.7
[BAR] new_x (6.1234) &gt; comparison (6)...
[FOO] We continue.
[BAR] We end.
[FOO] foo() is running.
[FOO] seconds elapsed since last run: 1.0055
[FOO] x: 6.2092, new_x: 6.9843, diff: 0.7751000000000001, thresh: 0.7
[FOO] We end.
</code></pre>
<p>Incidentally, note that with <code>Timer</code> you're not guaranteed to get exactly a one-second interval, even if you specify it!  From <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>The interval the timer will wait before executing its action may not be exactly the same as the interval specified by the user.</p>
</blockquote>
</div>
<span class="comment-copy">I don't see any reason to use threads in python, it will never perform like a single threaded program and usually it will perform worse due to <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">GIL</a></span>
<span class="comment-copy">@alfasin In my larger program, I have multiple threads, like 3 threads getting information, and 5 threads using information for these 3 threads to carry out things. They can't be combined because I can't retrieve information from server at the same rate in all threads. Here I'm just writing a smaller program to make sure that I understand things correctly before I spend too much time writing the final program</span>
<span class="comment-copy">If it's about retrieving information over the network and then processing it, you're usually better off using multiple processes and IPC instead of pythons rather anemic threading facilities.</span>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/queue.html#module-queue" rel="nofollow noreferrer">A synchronized queue class</a></span>
