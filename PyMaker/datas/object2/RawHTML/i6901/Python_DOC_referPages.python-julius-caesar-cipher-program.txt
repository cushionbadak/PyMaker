<div class="post-text" itemprop="text">
<p>I am trying to make the Julius Caesar Cipher program but adding a twist by adding a random letter to the beginning and end of the sentence. For some reason when I enter a long string part of the string is lost when printing. I am using python 3. Can someone explain how to fix this issue and why this is happening? Thank you</p>
<pre><code>import random
alpha = 'abcdefghijklmnopqrstuvwxyz'
alphaupper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'


def encode(cleartext):
    global alpha
    global alphaupper
    words = cleartext
    cyphertext = ""
    for char in words:
        if char in alphaupper:
            newpos = (alphaupper.find(char) + 13) % 26
            cyphertext += alphaupper[newpos]
        elif char in alpha:
            newpos = (alpha.find(char) + 13) % 26
            cyphertext += alpha[newpos]
        else:
            cyphertext += char

    cyphertext = alpha[random.randrange(len(alpha) - 1)] + cyphertext + alpha[random.randrange(len(alpha) - 1)]
    return cyphertext


def decode(cleartext):
    global alpha
    global alphaupper
    words = cleartext.replace(cleartext[len(cleartext) - 1], "")
    words = words.replace(words[0], "")
    cyphertext = ""
    for char in words:
        if char in alphaupper:
            newpos = (alphaupper.find(char) + 13) % 26
            cyphertext += alphaupper[newpos]
        elif char in alpha:
            newpos = (alpha.find(char) + 13) % 26
            cyphertext += alpha[newpos]
        else:
            cyphertext += char
    return cyphertext


print("Julias Ceasar 13 letter shift")


def men():
    words = input("Would you like to decode or encode: ")
    if "decode" in words:
        words = input("What would you like to decode: ")
        print(decode(words))
        print('\n')
        men()
    elif "encode" in words:
        words = input("What would you like to encode: ")
        print(encode(words))
        print('\n')
        men()
    else:
        print("Could not understand please try again")
        print('\n')
        men()


if __name__ == "__main__":
    men()
</code></pre>
<p>OUTPUT : </p>
<pre class="lang-none prettyprint-override"><code>Julias Ceasar 13 letter shift
Would you like to decode or encode: encode
What would you like to encode: This program deletes parts of this string for some reason
</code></pre>
<p>ENCODED:</p>
<pre><code>yGuvf cebtenz qryrgrf cnegf bs guvf fgevat sbe fbzr ernfbas
</code></pre>
<p>DECODING:</p>
<pre><code>Would you like to decode or encode: decode
What would you like to decode: yGuvf cebtenz qryrgrf cnegf bs guvf fgevat sbe fbzr ernfbas
</code></pre>
<p>FINAL DECODED SENTENCE:</p>
<pre><code>This program deletes parts o this string or some reason


Would you like to decode or encode: 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like the problem is that, when decoding, you do </p>
<pre><code>words = cleartext.replace(cleartext[len(cleartext) - 1], "")
words = words.replace(words[0], "")
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a> replaces <strong>all</strong> occurrences if you don't include the optional third <code>count</code> argument. That means you're removing more characters than you bargained for.</p>
<p>If all you want to do is strip the first and last characters off the string, you can do something like</p>
<pre><code>words = cleartext[1:-1]
</code></pre>
<p>which is much cleaner, since you don't actually care what the first and last characters <strong>are</strong>, you just want them gone.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I know the problem here.</p>
<p>those two lines:</p>
<pre><code>words = cleartext.replace(cleartext[len(cleartext) - 1], "")
words = words.replace(words[0], "")
</code></pre>
<p>your problem here is that you choose to delete by value, and not by index.</p>
<p>this works on, maybe an array of objects (for example if you use remove),
because every instance of an object always has a different object reference.</p>
<p>(unless you use something like arr[1] = arr[3], which means you copied the reference).</p>
<p>anyways, it's a good habit to replace by index when you want to replace by index.</p>
<p>besides that you're using the function wrong. it is supposed to give you a new string,
when it's arguments are a substring and a substring to replace.
replace searches for ALL instances of the substring and replaces them.
it's not supposed to remove it like that.</p>
<p>so, the reason it's starting to delete parts of the message on larger messages
is probably because you're always deleting all instances of a random char,
and the longer the string the more likely it is to have the random char in it.</p>
<p>anyways, I like using:</p>
<pre><code>words = cleartext[1:len(cleartext)]
</code></pre>
<p>when I do something like that.</p>
<p>I also don't think it's a good idea to do a recursive call like that:</p>
<pre><code>def men():
    input("something")
    men()
</code></pre>
<p>mainly because, even though you may not know it does, but each and evey time</p>
<p>you do a recursive call it saves the location you called from.</p>
<p>this is true  not only for recursive calls but most function calls.</p>
<p>so you're creating something which equals to a new int, but you never delete it.</p>
<p>try using</p>
<pre><code>if __name__ == "__main__":
    while True: men()
</code></pre>
</div>
<span class="comment-copy">Note: the point of rot13 is that you don't need a separate encode and decode function as they are the same. Even if you do stuff like adding/removing padding characters, you should factor out the rot13 part into a separate method to remove code duplication, reduce the chance of bugs and make your code more maintainable</span>
<span class="comment-copy">Sounds like a great idea except when encoding I want to add extra letters at the beginning and end to make it a bit harder to decode. When decoding if it were supposed to be one function it would add the extra letters and decode the past string instead of deleting the extra letters and decoding into the original string.</span>
<span class="comment-copy">"if it were supposed to be one function" - it is <i>not</i> supposed to be in one function. There is never a requirement (outside classroom assignments and puzzles perhaps) to do everything in one function. It would be good for you to look into <a href="https://en.wikipedia.org/wiki/Decomposition_(computer_science)" rel="nofollow noreferrer">decomposition</a> of problems into smaller pieces so you can build bigger programs that are still maintainable.</span>
<span class="comment-copy">Ok, thank you so much for clarifying, after reading the answers posted I feel so dumb because its something that I probably should have known. I guess its a part of the learning process and as a beginner it only makes we want to learn more. Thank you for clarifying and taking the time to answer my question.</span>
<span class="comment-copy">Ok, thank you so much for clarifying, after reading the answers posted I feel so dumb because its something that I probably should have known. I guess its a part of the learning process and as a beginner it only makes we want to learn more. Thank you for clarifying and taking the time to answer my question.</span>
