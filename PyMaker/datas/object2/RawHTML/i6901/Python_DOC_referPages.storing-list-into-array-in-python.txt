<div class="post-text" itemprop="text">
<p>I'm new to python and trying to split a list and store as an array.</p>
<p>I have a csv file which I'm reading and store each row as a list. Each of these rows are separated by comma and I want to store each of those values into an array</p>
<p>This is my current code that retrieves the rows in csv file. I'm stuck in trying to parse each row to store into an array</p>
<pre><code>def read_csv(self):
    csvFileArray=[]
    with open('myfile.csv','rb') as csvfile:
        bufferreader=csv.reader(csvfile,delimiter=',')
        for row in bufferreader:
            csvFileArray.append(row)
    return csvFileArray
</code></pre>
<p>The output of <code>print(csvFileArray[0])</code> would be  <code>['11043299,1,2,1,true']</code>. Now I want this ouput to be easily accessible as array for further calculations. For instance - I should print <code>true</code> when I <code>print(newArray[4])</code></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The output of print(csvFileArray[0]) would be  ['11043299,1,2,1,true'].</p>
</blockquote>
<p>I don't think so; that's a list of one string, not five elements For example.  </p>
<pre><code>$ echo '11043299,1,2,1,true' &gt;&gt; myfile.csv
</code></pre>
<hr/>
<pre><code>In [1]: import csv

In [2]: with open('myfile.csv') as f:
   ...:     reader = csv.reader(f)
   ...:     rows = [row for row in reader]
   ...:

In [3]: rows
Out[3]: [['11043299', '1', '2', '1', 'true']]
</code></pre>
<p>Is this what you are trying to do?</p>
<pre><code>In [4]: rows[0][4]
Out[4]: 'true'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think that your method can be written as:</p>
<pre><code>def read_csv(self):
        return list(open('myfile.csv'))
</code></pre>
<p>or</p>
<pre><code>def read_csv(self):
        with open('myfile.csv') as f:
            return list(f)
</code></pre>
<p>if you need close the file descriptor ASAP because the wait for the Python GC will impact your performance. See my comment about it.</p>
<p>To convert a string of comma separated values into a list of values just do:</p>
<pre><code>comma_separeted.split(',')
</code></pre>
<p>Could be useful for you take a look of what Python Standard Library have to offer <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at the CSV module. The csv.DictReader class will plop the CSV file rows into a dictionary with the header row fields as dictionary keys. However, note that the CSV module reads your data as strings, so you may have to do some type conversion.</p>
<pre><code>import csv

with open('favorite_color.csv', 'rb') as csvfile:
    reader = csv.DictReader(csvfile)
    data = {}
    for row in reader:
        for field, value in row.iteritems():
            if not field in data:
                data[field] = [value]
            else:
                data[field].append(value)
data['correct_answers'] = [int(val) for val in data['correct_answers']]
boolval = {'true': True, 'false': False}
data['cross_bridge'] = [boolval[val.lower()] for val in data['cross_bridge']
</code></pre>
<p>Which puts the contents of the CSV nicely into a dictionary.</p>
<pre><code>In [2]: data
{'correct_answers': [0, 3, 3, 2],
 'cross_bridge': [False, True, True, False],
 'favorite_color': ['orange', 'green', 'blue', 'yellow'],
 'first_name': ['Dirk', 'King', 'Lancelot', 'Sir'],
 'last_name': ['Diggler', 'Arthur', 'du Lac', 'Galahad']}
In [3]: data['cross_bridge'][0]
Out[3]: False
</code></pre>
<hr/>
<p>Alternatively, if you truly want each row to be a list, you could use csv.reader() instead:</p>
<pre><code>import csv

with open('favorite_color.csv') as csvfile:
    reader = csv.reader(csvfile)
    data = []
    for row in reader:
        data.append(row)
</code></pre>
<p>Which gives you a list of lists:</p>
<pre><code>In [5]: data
Out[5]: 
[['first_name',
  'last_name',
  'favorite_color',
  'correct_answers',
  'cross_bridge'],
 ['Dirk', 'Diggler', 'orange', '0', 'False'],
 ['King', 'Arthur', 'green', '3', 'True'],
 ['Lancelot', 'du Lac', 'blue', '3', 'True'],
 ['Sir', 'Galahad', 'yellow', '2', 'False']]
</code></pre>
<p>Here is the documentation for the CSV module:</p>
<p><a href="https://docs.python.org/3.5/library/csv.html#csv.reader" rel="nofollow noreferrer">https://docs.python.org/3.5/library/csv.html#csv.reader</a></p>
<p>You mentioned an <code>array</code> in your question. I'm not sure that's what you really want here. Python arrays must all contain the same data type. The example given does not. Here is the documentation for Python arrays:</p>
<p><a href="https://docs.python.org/2/library/array.html" rel="nofollow noreferrer">https://docs.python.org/2/library/array.html</a></p>
<p>Hope that helps!</p>
</div>
<span class="comment-copy">You don't have arrays here. Only lists</span>
<span class="comment-copy">There is something wrong with the way the CSV file was parsed. Are you sure it is comma-delimited? Please include the first line of myfile.csv and the matching <code>print(csvFileArray[0])</code>.</span>
<span class="comment-copy"><code>csv.reader()</code> should already be splitting this into a list.</span>
<span class="comment-copy">try to remove <code>rb</code> option in <code>open</code>, i.e. <code>open('myfile.csv')</code></span>
<span class="comment-copy">if you csv file has contents as below -  1501043799,1,2,1,true 1501044312,3,3,2,false  Then your output of csvFileArray[0] would be what I mentioned  @cricket_007</span>
<span class="comment-copy">No, it wouldn't... Go ahead and see what <code>['11043299,1,2,1,true'] != ['11043299', '1', '2', '1', 'true']</code> tells you in Python</span>
<span class="comment-copy"><code>list(open('myfile.csv'))</code> is bad because it does not use <code>with</code> to access the file.</span>
<span class="comment-copy">@DYZ Not necessary. Is bad just in cases where you don't like that the  Python GC do its job when it decides to do it, or what is the same, when you have to worry about the amount of time that your opened file keep consuming resources after needed. Is a trade off between source code simplicity and very little performance impact in most cases. I opted here for simplicity. Still, thanks for your comment, I will enrich my answer.</span>
