<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/31447694/why-does-python-3-allow-00-as-a-literal-for-0-but-not-allow-01-as-a-literal">Why does Python 3 allow “00” as a literal for 0 but not allow “01” as a literal for 1?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I found, this in Python3:</p>
<pre><code>&gt;&gt;&gt; 00 + 00 == 00
True
</code></pre>
<p>While:</p>
<pre><code>&gt;&gt;&gt; 01 + 01 == 02
    File "&lt;input&gt;", line 1
01 + 01 == 02
 ^
SyntaxError: invalid token
</code></pre>
<p>Why does the first example works while the second one fails? Should't it be better if both failed or both worked?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/lexical_analysis.html#integer-literals" rel="nofollow noreferrer">Integer literals</a>:</p>
<blockquote>
<p>Note that leading zeros in a non-zero decimal number are not allowed.
  This is for disambiguation with C-style octal literals, which Python
  used before version 3.0.</p>
</blockquote>
<p>You can read the lexical definitions to understand the rule to parse integer literals.</p>
</div>
<span class="comment-copy">because you can input integers in <code>oct</code> or <code>hex</code> using leading zero, for example <code>0o71</code> == <code>0x39</code>, so <code>01</code> - its in octal/decimal/hex form? I don't know, <code>explicit is better than implicit</code>.</span>
