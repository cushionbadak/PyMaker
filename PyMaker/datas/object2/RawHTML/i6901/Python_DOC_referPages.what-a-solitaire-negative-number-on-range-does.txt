<div class="post-text" itemprop="text">
<p>I was doing an exercise from John Zelle's book on Python, he asked to do the Fibonacci sequence using a loop function.</p>
<p>After I didn't manage to get it done, I gave a look at his resolution, which was this:</p>
<pre><code>n = int(input("Enter the value of n: "))
curr, prev = 1, 1
for i in range(n-2):
    curr, prev = curr+prev, curr
print("The nth Fibonacci number is", curr)
</code></pre>
<p>While I did understand part of what he did, the part that I missed was the <code>(n-2)</code> range.</p>
<p>I gave a look here on Stackoverflow to see about this and people say that a negative number on the range goes back to the end of the list. But in this case, if the user prompts 1, the result will be <code>range(-1)</code>.</p>
<p>My guess was that the author did that so that the for loop didn't sum the first two values of the Fibonacci sequence, since they are both 1, and only after the user prompts 2 and forth, the loop actually starts adding up. Am I right on my guess?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you enter 0 or 1 for this, the code does not enter the loop, and the result is the initial value of <strong>curr</strong>, that being <strong>1</strong>.  For any higher value, the loop will iteratively compute the proper value.</p>
<p>Your memory of negative values is a little bit off: a negative index will work from the opposite end of an <em>iterable</em> (e.g. list, tuple, string).  A <strong>range</strong> is not quite in that class; the result in this case is an empty range.</p>
<hr/>
<p><strong>CLARIFICATION</strong> after OP comment</p>
<p>I see your confusion.  <strong>range</strong> returns an iterable of the given values.  However, it looks like you've confused the limits with the index.  Let's work with a general form:</p>
<pre><code>r = range(left, right, step)
r[pos]
</code></pre>
<p><strong>left* defaults to 0; **step</strong> defaults to 1</p>
<p>Here are some examples:</p>
<pre><code>&gt;&gt;&gt; r = range(0, 20, 2)
&gt;&gt;&gt; r[-1]
18
&gt;&gt;&gt; r = range(0, -1)
&gt;&gt;&gt; r
[]
&gt;&gt;&gt; r = range(0, -10, -2)
&gt;&gt;&gt; r
[0, -2, -4, -6, -8]
&gt;&gt;&gt; r[-2]
-6
</code></pre>
<p>Note the second and third examples, where we use negative values for endpoints.  There's a distinction between a negative <em>endpoint</em> and a negative <em>index</em>.  The endpoint is used to build the list; if the endpoints aren't in the order implied by the step, then the resulting range is the empty list.  <strong>range(0, -1)</strong> is such an example.</p>
<p>Once the list is built, such as with range(0, 20, 2), <em>then</em> a reference into that list with a negative <em>index</em> will count from the right end of the list.  Note the third example, making a list that goes "backward", 0 down to -8.  A negative index in this case also works from the right.  The negative right-end value, the negative step, and the negative index are three distinct usages.</p>
<p>Does that clear up things?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; range(-1)
range(0, -1)
</code></pre>
<p>So the for loop is not entered if n is 1 or 2 and curr (which is set to 1) is the result.</p>
</div>
<span class="comment-copy">Yes. <code>range(-x)</code> or <code>range(0)</code> doesn't yield anything.</span>
<span class="comment-copy">This was something you could easily test, no?</span>
<span class="comment-copy">Read the <a href="https://docs.python.org/3/" rel="nofollow noreferrer">docs</a>.  Most Python built-in functions are under <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">functions</a>.  The details for ranges and other built-in objects are mostly in <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow noreferrer">Built-In Types</a>.</span>
<span class="comment-copy">Thanks for the info Kevin, it was in the Built-In Types. For whoever gave negative, i saw questions here about syntax error due to a missing ")" on a print function that didn't get a negative. I just began to learn programming these days, so sorry if my question was an offense.</span>
<span class="comment-copy">I agree, the docs were helpful, the theory on it answered my question, but since there wasn't an exact example of range(-n) on it i guess i would've made the question anyway. The sentence "A range object will be empty if r[0] does not meet the value constraint." and the examples list(range(0)) and list(range(1, 0)) were very helpful, but i was still a little bit confused about it.</span>
<span class="comment-copy">Thanks for the answer and for clarifying the index/range negative values mistake!</span>
<span class="comment-copy">Just so i understand this straight, i was looking on the 4.6.6 section on built-in types and it says: "Ranges do support negative indices, but these are interpreted as indexing from the end of the sequence determined by the positive indices." and there is an example: r = range(0, 20, 2) and then r[-1] equals to 18. So in this example this is an iterable?</span>
