<div class="post-text" itemprop="text">
<p>I have a list and I want to put its elements inside a for loop string like this:</p>
<pre><code>my_list = ["Germany", "England", "Spain", "France"]
for this in that:
    do stuff
    print(my_list[0]+ some other stuff)
</code></pre>
<p>The output should be like:</p>
<pre><code>Germany + some other stuff
England + some other stuff
Spain + some other stuff
France + some other stuff
</code></pre>
<p>How can I loop the indices for string interpolation as well?</p>
<p>Thanks!</p>
<p>Edit: The loop is a bit different. It's more like this:</p>
<pre><code>for foo in bar:
    another_bar = []
    for x, y in foo:
        do stuff
        a = object.method()
        another_bar.append(my_list[0]+a)
</code></pre>
<p>I need to put the strings of lists into the 2nd layer of nested loop. Can't use zip here.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you are assuming that <code>that</code> is the same lenght as <code>my_list</code>.  If so, you can use <code>zip</code> to iterate over the two containers in parallel.</p>
<pre><code>my_list = ["Germany", "England", "Spain", "France"]
my_other_list = [' is great at football', ' has good years in rugby', ' has Renaldo', ' is, well...']

def foo(bar):
    return bar + '!'

for country, bar in zip(my_list, my_other_list):
    other = foo(bar)
    print(country + other)

# Output:
# Germany is great at football!
# England has good years in rugby!
# Spain has Renaldo!
# France is, well...!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in function <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a>. <code>zip</code> allows to process each list in parallel:</p>
<blockquote>
<p>Make an iterator that aggregates elements from each of the iterables.</p>
<p>Returns an iterator of tuples, where the <em>i</em>-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples. With no arguments, it returns an empty iterator.</p>
</blockquote>
<pre><code>my_list = ["Germany", "England", "Spain", "France"]
for country, this in zip(my_list, that):
    # do stuff
    print(country + that)
</code></pre>
<p>If your list are of different size, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertoos.zip_longest</code></a>:</p>
<blockquote>
<p>Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted. </p>
</blockquote>
<pre><code>from itertools import zip_longest

my_list = ["Germany", "England", "Spain", "France"]
for country, this in zip_longest(my_list, that):
    # do stuff
    print(country + that)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hope this can help you.</p>
<pre><code>for index, this in enumerate(that):
    do stuff
    print(my_list[index]+ some other stuff)
</code></pre>
</div>
<span class="comment-copy">as I understand this is what you want: my_list = ["Germany", "England", "Spain", "France"] for country in my_list:     print(country + 'some other stuff')</span>
<span class="comment-copy">@0x1 I edited your edit to fix indentations.  Please ensure it matches your intent.  Also, your code needs more structure.  For example, <code>index</code> is not defined.  Please refer to <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">Its a nested loop. I cannot use zip here unfortunately. I edited the question.</span>
<span class="comment-copy">Its a nested loop. I cannot use zip here unfortunately. I edited the question.</span>
<span class="comment-copy">Its a nested loop. I cannot use zip here unfortunately. I edited the question.</span>
<span class="comment-copy">You say you need an index, and I still feel that enumerate can satisfy you.<a href="https://docs.python.org/2.7/library/functions.html?highlight=enumerate#enumerate" rel="nofollow noreferrer">enumerate</a></span>
