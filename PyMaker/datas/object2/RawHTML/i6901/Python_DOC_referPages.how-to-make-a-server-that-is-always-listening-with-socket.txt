<div class="post-text" itemprop="text">
<p>iv'e build a basic command server:</p>
<pre><code>import socket
import time
import random

server_socket = socket.socket()
server_socket.bind(('0.0.0.0', 8821))

server_socket.listen(1)

(client_socket, client_address) = server_socket.accept()

client_input = client_socket.recv(1024)
client_input = client_input.upper()


if client_input == 'TIME':
    client_socket.send(time.strftime("%c"))
elif client_input == 'RAND':
    client_socket.send(str(random.randrange(0, 11)))
elif client_input == 'NAME':
    client_socket.send("My master called me \"Arik\". Funny, ha?")
else:
    client_socket.send("Unknown command")

if len(client_input) &gt; 4 or len(client_input) &lt; 4:
    client_socket.send("The length of your messege\nneeds to be 4 chracters.\nI know only 4 commands.\nRAND, TIME, NAME &amp; EXIT.\nThanks.")


client_socket.close()
server_socket.close()
</code></pre>
<p>and a basic client:</p>
<pre><code>import socket
my_socket = socket.socket()
my_socket.connect(('127.0.0.1', 8820))

message = raw_input("Insert Command\n")
my_socket.send(message)

data = my_socket.recv(1024)
print "Answer Sent: " + data

my_socket.close()
</code></pre>
<p>now i'd like to make the server listen to command all the time, until he will get an "exit" command. I didn't quite got the way of doing that, so i'd like you to help me. thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply run a loop to keep receiving from client until <code>'exit'</code> is received:</p>
<pre><code>import socket
import time
import random

server_socket = socket.socket()
server_socket.bind(('0.0.0.0', 8821))

server_socket.listen(1)

(client_socket, client_address) = server_socket.accept()

while True:
    client_input = client_socket.recv(1024).upper()
    if len(client_input) &gt; 4 or len(client_input) &lt; 4:
        client_socket.send("The length of your messege\nneeds to be 4 chracters.\nI know only 4 commands.\nRAND, TIME, NAME &amp; EXIT.\nThanks.")
    else:
        if client_input == 'TIME':
            client_socket.send(time.strftime("%c"))
        elif client_input == 'RAND':
            client_socket.send(str(random.randrange(0, 11)))
        elif client_input == 'NAME':
            client_socket.send("My master called me \"Arik\". Funny, ha?")
        elif client_input == 'EXIT':
            client_socket.send("Exiting.")
            break
        else:
            client_socket.send("Unknown command")

client_socket.close()
server_socket.close()
</code></pre>
<p>And your client should be:</p>
<pre><code>import socket
my_socket = socket.socket()
my_socket.connect(('127.0.0.1', 8820))

message = ''
while message.upper() != 'EXIT':
    message = raw_input("Insert Command\n")
    my_socket.send(message)
    data = my_socket.recv(1024)
    print "Answer Sent: " + data

my_socket.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have never used python networking myself, but I think this would work.
You can just put your server listener in a loop and if it receive EXIT then break the loop.</p>
<pre><code>while(true):
    server_socket.listen(1)

    (client_socket, client_address) = server_socket.accept()

    client_input = client_socket.recv(1024)
    client_input = client_input.upper()


    if client_input == 'TIME':
        client_socket.send(time.strftime("%c"))
    elif client_input == 'RAND':
        client_socket.send(str(random.randrange(0, 11)))
    elif client_input == 'NAME':
        client_socket.send("My master called me \"Arik\". Funny, ha?")
    elif client_input == 'EXIT':
          break;
    else:
        client_socket.send("Unknown command")

    if len(client_input) &gt; 4 or len(client_input) &lt; 4:
        client_socket.send("The length of your messege\nneeds to be 4 chracters.\nI know only 4 commands.\nRAND, TIME, NAME &amp; EXIT.\nThanks.")

client_socket.close()
server_socket.close()
</code></pre>
</div>
<span class="comment-copy">Check the <a href="https://docs.python.org/3/library/socket.html#example" rel="nofollow noreferrer"><code>socket</code> module example</a>. Basically, just run it in a loop and keep running <code>accept()</code> on the socket server and <code>recv()</code> on the socket.</span>
<span class="comment-copy">thanks a lot!!!</span>
<span class="comment-copy">Glad to help, feel free to <a href="https://stackoverflow.com/help/someone-answers">accept the answer</a> if you find it useful :-)</span>
<span class="comment-copy">File "/Networks/EX2.6---server.py", line 13, in &lt;module&gt;     client_input = client_socket.recv(1024).upper() socket.error: [Errno 54] Connection reset by peer</span>
<span class="comment-copy">it sends me that and disconnecting...</span>
<span class="comment-copy">Because your client is disconnecting before sending <code>'exit'</code>, I just edited the answer to add a fix for that.</span>
