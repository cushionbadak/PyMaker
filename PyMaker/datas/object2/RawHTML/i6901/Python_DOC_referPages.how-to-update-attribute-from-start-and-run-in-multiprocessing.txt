<div class="post-text" itemprop="text">
<p>I create sub-class from multiprocessing.Process.</p>
<p>Object p.run() can update instance.ret_value from the long_runtime_proc, but p.start() can't get the ret_value updated though long_runtime_proc called and ran.</p>
<p>How can I get ret_value with p.start()?</p>
<pre><code>*class myProcess (multiprocessing.Process):
    def __init__(self, pid, name, ret_value=0):
        multiprocessing.Process.__init__(self)
        self.id = pid
        self.ret_value = ret_value
    def run(self):
        self.ret_value = long_runtime_proc (self.id)*
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Calling <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.run" rel="nofollow noreferrer"><code>Process.run()</code></a> directly does <em>not</em> start a new process, i.e. the code in <code>Process.run()</code> is executed in the <em>same process</em> that invoked it. That's why changes to <code>self.ret_value</code> are effective. However, you are not supposed to call <code>Process.run()</code> directly.</p>
<p>When you start the subprocess with <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.start" rel="nofollow noreferrer"><code>Process.start()</code></a> a new child process is created and then the code in <code>Process.run()</code> is executed <em>in this new process</em>. When you assign the return value of <code>long_runtime_proc</code> to <code>self.ret_value</code>, this occurs in the child process, not the parent and thus the parent <code>ret_vaule</code> is not updated.</p>
<p>What you probably need to do is to use a pipe or a queue to send the return value to the parent process. See the <a href="https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow noreferrer">documentation</a> for details. Here is an example using a queue:</p>
<pre><code>import time
import multiprocessing

def long_runtime_proc():
    '''Simulate a long running process'''
    time.sleep(10)
    return 1234

class myProcess(multiprocessing.Process):
    def __init__(self, result_queue):
        self.result_queue = result_queue
        super(myProcess, self).__init__()

    def run(self):
        self.result_queue.put(long_runtime_proc())

q = multiprocessing.Queue()
p = myProcess(q)
p.start()
ret_value = q.get()
p.join()
</code></pre>
<p>With this code <code>ret_value</code> will end up being assigned the value off the queue which will be 1234.</p>
</div>
<span class="comment-copy">Thanks for the repy.    p.run() just runs its proc in main process instead of sub-parallel process, so it can return value to main process. And it's not parallel as I need.    p.start() really invokes a new process but can't transfer value to parent process.</span>
<span class="comment-copy">@xinwu: correct, that's what I said: <code>p.run()</code> runs in the same process so you can get the result. <code>p.start()</code> runs the <code>run()</code> method in a child process. If you read further into my answer you will see that the solution is to use a queue, or some other form of interprocess communication.</span>
<span class="comment-copy">Yes, I can use queue or pipe to get the return value from parallel processes. Thanks for your replies.</span>
<span class="comment-copy">@xinwu: No problem. If I have answered your question you might consider upvoting and accepting this answer.</span>
<span class="comment-copy">It's my first question. Could you show me how to upvote the answer?</span>
