<div class="post-text" itemprop="text">
<p>The Proper way to strip(not remove) specified tags from an HTML string using Python. </p>
<pre><code>def strip_tags(html, tags=[]):
    ....
    pass #return the html string by stripping the tags from the list
</code></pre>
<p>The questions explain it all.</p>
<p>I am to write a python function that takes HTML string as input, and list of tags to be stripped,  (mimicking Django template's <code>removetags</code> functionality as it's deprecated )</p>
<p>What's the simplest way of doing this?<br/>
The following approaches didn't work for me for the listed reasons:</p>
<ul>
<li><p>Using regular expressions (for <a href="https://stackoverflow.com/a/1732454/968442">obvious</a> reasons)</p></li>
<li><p><strong><a href="http://pythonhosted.org/bleach/clean.html" rel="nofollow noreferrer">Clean() method by Bleach library</a>.</strong> Surprisingly such a robust library is useless for this requirement, as it follows
a whitelist-first approach, while the problem is blacklist-first. 
    Bleach will only be useful to 'keep' certain tags but not for
removing certain (unless you are ready to maintain a huge list of all
possible <code>ALLOWED_TAGS</code>) </p></li>
<li><p><strong><a href="http://lxml.de/lxmlhtml.html" rel="nofollow noreferrer">lxml.html.Cleaner()</a></strong> combined with <code>remove_tags</code> or <code>kill_tags</code>      This is somewhat closer to what I was looking for, but it goes
ahead and does(removes) more than what it is supposed to, And there
is no way to control the behaviour at the finest, like requesting the
Cleaner() to keep the evil <code>&lt;script&gt;</code> tag.</p></li>
<li><p><strong><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#clear" rel="nofollow noreferrer">BeautifulSoup</a></strong>. This has a method called <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#clear" rel="nofollow noreferrer">clear()</a> to remove the specified tags, but it removes the content of the tags while I only
need to strip the tags but to keep the content.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Beautiful soup has <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unwrap" rel="nofollow noreferrer"><code>unwrap()</code></a>:</p>
<blockquote>
<p>It replaces a tag with whateverâ€™s inside that tag.</p>
</blockquote>
<p>You will have to manually iterate over all tags you want to replace.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can extend Python's <a href="https://docs.python.org/3/library/html.parser.html" rel="nofollow noreferrer"><code>HTMLParser</code></a> and create your own parser to skip specified tags.</p>
<p>Using the example provided in the <a href="https://docs.python.org/3/library/html.parser.html#example-html-parser-application" rel="nofollow noreferrer">given link</a>, I will modify it to strip <code>&lt;h1&gt;&lt;/h1&gt;</code> tags but keep their data:</p>
<pre><code>from html.parser import HTMLParser

NOT_ALLOWED_TAGS = ['h1']

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        if tag not in NOT_ALLOWED_TAGS:
            print("Encountered a start tag:", tag)

    def handle_endtag(self, tag):
        if tag not in NOT_ALLOWED_TAGS:
            print("Encountered an end tag :", tag)

    def handle_data(self, data):
        print("Encountered some data  :", data)

parser = MyHTMLParser()
parser.feed('&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;'
            '&lt;body&gt;&lt;h1&gt;Parse me!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;')
</code></pre>
<p>That will return:</p>
<pre><code>Encountered a start tag: html
Encountered a start tag: head
Encountered a start tag: title
Encountered some data  : Test
Encountered an end tag : title
Encountered an end tag : head
Encountered a start tag: body 
# h1 start tag here
Encountered some data  : Parse me!
# h1 close tag here
Encountered an end tag : body
Encountered an end tag : html
</code></pre>
<p>You can now maintain a <code>NOT_ALLOWED_TAG</code> list to use for stripping those tags.</p>
</div>
<span class="comment-copy">If you want to mimic Django's <code>removetags</code>, you can effectively copy it's source code. There's, however, a security risk with this tag, that is why it's been deprecated. But as it has been mentioned <a href="https://docs.djangoproject.com/en/1.8/ref/utils/#django.utils.html.remove_tags" rel="nofollow noreferrer">here</a>, you can escape it's result and you'll be fine.</span>
<span class="comment-copy">Obviously they've used Regex which I chose not to go with</span>
