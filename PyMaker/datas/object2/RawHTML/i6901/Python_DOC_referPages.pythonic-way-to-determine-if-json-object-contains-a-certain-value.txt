<div class="post-text" itemprop="text">
<p>I have a json object I get returned from a call, similar to this:</p>
<pre><code>{
    'Tags': [
        {
            'Key': 'Dept',
            'PropagateAtLaunch': True,
            'ResourceId': 'my-auto-scaling-group',
            'ResourceType': 'auto-scaling-group',
            'Value': 'Research',
        },
        {
            'Key': 'Role',
            'PropagateAtLaunch': True,
            'ResourceId': 'my-auto-scaling-group',
            'ResourceType': 'auto-scaling-group',
            'Value': 'WebServer',
        },
        {
            'Key': 'ecs_scaling',
            'PropagateAtLaunch': True,
            'ResourceId': 'my-auto-scaling-group',
            'ResourceType': 'auto-scaling-group',
            'Value': 'true',
        },
    ],
    'ResponseMetadata': {
        '...': '...',
    },
}
</code></pre>
<p>Is there a more Pythonic way of simply determining whether or not the Key <code>ecs_scaling</code> exists, other than the standard:</p>
<pre><code>data = json.loads(theThing)
for key in data.items():
   ... 
</code></pre>
<p>The Key could be the first item, it could be the 40th item -- ideally I'd like to be able to do something like <code>if 'ecs_scaling' in theKeys: ...</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the builtin <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>.</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer">Return True if any element of the iterable is true. If the iterable is empty, return False.</a></p>
</blockquote>
<pre><code>if any(tag['key'] == 'ecs_scaling' for tag in data['Tags']):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The complexity is already linear, so the only faster thing that you could hope for is a hash search.
However, constructing a hash set or a hash table would require a linear complexity.</p>
<p>So unless the functions you call from the <code>json</code> module already build such a hash set, an iteration is the best thing you can do, for a linear complexity, ie <code>O(n)</code>.</p>
<p>In this regard, I think the most Pythonic approach is using the <code>any</code> built-in, already mentioned by the other.</p>
<p>For the sake of completeness, although it would be less performant, you could go with a list comprehension as well, which is often considered as "highly Pythonic":</p>
<pre><code>'ecs_scaling' in [item['Key'] for item in data.items()]
</code></pre>
<p>This is not as good, because an additional list has to be constructed, which requires an iteration over the whole data.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>any(el['Key'] == 'ecs_scaling' for el in data['Tags'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was thinking if there could be another way of doing that. Though it's little funny ;) but it will work and reduce calling any <code>build-in</code> methods for this. However I doubt if I am fulfilling the criteria of doing it in pythonic way. </p>
<p>However I am definitely considering the fact that the <code>Key</code> and its value <code>ecs_scaling</code> will exist in the desired data section i.e <code>Tags</code>. Along with that the patterns should be fixed otherwise the solution wont work i.e <code>"Key": "ecs_scaling"</code> that I think will be if it was a dict before came here as string.</p>
<p>Simply use the <code>str.find</code> but you may need to call this twice to ensure desirable result.
<code>if data.find("'Key': 'ecs_scaling'") != -1 or data.find('"Key": "ecs_scaling"') != -1</code></p>
<p>But yes <code>any</code> is one of the best solutions if we ignore shortfalls of not checking if-exist prior to checking entire dataset.</p>
</div>
<span class="comment-copy">Will 'ecs_scaling' always be in a Tags key? And will Tags always exist?</span>
<span class="comment-copy"><code>ecs_scaling</code> may or may not exist, <code>Tags</code> will always be in the response.</span>
<span class="comment-copy">Because <code>Tags</code> contains a list, all solutions are going to iterate the list in linear time.</span>
<span class="comment-copy">Same complexity that "for key in data.items():"</span>
<span class="comment-copy">@Xire: I believe <code>tag['key'] == 'ecs_scaling'</code> would be faster than <code>'ecs_scaling' in tag.items()</code>, as there is not guarantee than the <code>key</code> item will be the first element of <code>tag.items()</code> (you may end up iterating over additional items), as opposed to selecting the appropriate key. Edit: If you're referring to Right Leg's approach, that seems like it would be slower, to me.</span>
<span class="comment-copy">Set comp would be more suitable so you don't have the O(n) lookup.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Sure thing, but the set needs to be built... However, it might be (although I doubt it) that the <code>json</code> module already provides such lookup functions, so that <i>in effect</i> no additional processing is required...</span>
<span class="comment-copy">If the first key you check is <code>'ecs_scaling'</code>, you wouldn't need to access the rest of them. You're building an array of <i>all</i> keys, but may only need the first one/two/etc.</span>
<span class="comment-copy">@ZachGates Yes, that's one of my points. I forgot to add "for the sake of completeness"...</span>
