<div class="post-text" itemprop="text">
<p>I have strange (for me) problem about calling PyQt5.QtSerialPort from other class:</p>
<p>This is serial code class implementation I'd like to call from other dialog or class:</p>
<pre><code># -*- coding: utf-8 -*-
import sys
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import QObject, QIODevice, pyqtSignal
from PyQt5.QtSerialPort import QSerialPort

class Com_port(QObject):
    ser = None
    packet_received = pyqtSignal(int)
    packet = [0,1,2,3,4,5,6,7,8,9,10,11,12]

    def __init__(self, *args, **kwds):
        super(Com_port, self).__init__()
        #self.buffer = kwds.pop('buffer')
        self.ser = QSerialPort(kwds.pop('port'))
        #self.ser = QSerialPort("COM5")
        self.ser.open(QIODevice.ReadWrite)
        self.ser.setBaudRate(kwds.pop('baudrate'))
        #self.ser.setBaudRate(115200)
        self.ser.readyRead.connect(self.on_serial_read)
        self.packet_received.connect(self.rcvData_signal)

        self.b1_bmsovi=b'\x0d\x0e\x0f\x10\x11\x12'
        self.brojac=0
        self.bms_number=0
        self.b1_bmsovi=b'\x0d\x0e\x0f\x10\x11\x12'
        self.brojac=0
        self.bms_number=0
        print ("Ipak sam prozvan")

    def rcvData_signal(self,bms):
        print(bms)

    def check_packet(self):
        rezultat = 0
        if self.packet[0]==170 and self.packet[1]==200 and self.packet[3]==1 and self.packet[12]==85 and (self.packet[2] in self.b1_bmsovi):
            self.bms_number = self.packet[2]
            rezultat = 1
        return rezultat

    def process_bytes(self, bs):
        """
        """
        for b in bs:
            if b == 170:
                self.brojac=0
            if self.brojac &lt; 13:
                print (b)
                self.packet[self.brojac] = b
                self.brojac += 1
            if self.brojac==12 and self.check_packet()==1:
                self.packet_received.emit(self.bms_number)

    def on_serial_read(self):
        """
            Called when the application gets data from the connected device.
        """
        self.process_bytes(bytes(self.ser.readAll()))
# end of class Com_port

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ComPortApp = Com_port(port="COM5",baudrate=115200)
    sys.exit(app.exec_())
    """
    Korisni linkovi
    https://programtalk.com/vs2/python/8876/mu/mu/interface.py/
    """
</code></pre>
<p>When I execute this code alone I got result from rcvData_signal(self,bms) function which print bms number.</p>
<p>So I'd like to use this class as general serial data source from com port.
I wrote this code just to test Com_port class:</p>
<pre><code>import sys
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import *
from bms_single_ui import Ui_bms_single
from com_port_thread import Com_port

class bms_single(QMainWindow):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)

        ser=Com_port(port="COM5",baudrate=115200) # Com_port instance
        ComPortApp.packet_received.connect(self.rcvData_signal) #event redir

        self.ui = Ui_bms_single()
        self.ui.setupUi(self)
        self.setWindowTitle("BMS SINGLE PREVIEW")
        self.setWindowFlags(Qt.FramelessWindowHint)
        #self.setWindowFlags(Qt.Window | Qt.WindowTitleHint | Qt.CustomizeWindowHint )
        self.setFixedSize(800,480)
        self.move(0, 0)

    def rcvData_signal(self,bms):   # No calling to this :(
        print(bms)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    #ComPortApp = Com_port(port="COM5",baudrate=115200)
    sys.exit(app.exec_())
</code></pre>
<p>In this case I cant' get any data from Com_port instance :(</p>
<p>But when I uncoment this line #ComPortApp = Com_port(port="COM5",baudrate=115200) at the bottom of the code (and comment all lines about com port in class bms_singe), I got all data from Com_port instance. </p>
<p>What is wrong with calling Com_port class from bms_single class ?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p><code>'__main__'</code> is the name of the scope in which top-level code executes.
  A moduleâ€™s <code>__name__</code> is set equal to <code>'__main__'</code> when read from standard input, a script, or from an interactive prompt.</p>
<p>[..]</p>
</blockquote>
<p>From the above we conclude that only an <code>if __name__ ==" __main__ "</code>
is executed:". If this same expression exists in other files, they will be omitted. So you should not use the variable <code>ComPortApp</code> since it does not exist, the correct thing is to use the variable <code>ser</code>, in your case it changes:</p>
<pre><code>ComPortApp.packet_received.connect(self.rcvData_signal)
</code></pre>
<p>to:</p>
<pre><code>ser.packet_received.connect(self.rcvData_signal)
</code></pre>
<p>The other problem is that the object <code>ser</code> is being eliminated by the garbage collector, there are 2 options:</p>
<ol>
<li>Making the variable <code>ser</code> class member for it changes to being in <code>self.ser</code> in the <code>bms_single</code> class. </li>
</ol>
<hr/>
<pre><code>self.ser=Com_port(port="COM5",baudrate=115200) # Com_port instance
self.ser.packet_received.connect(self.rcvData_signal) #event redir
</code></pre>
<ol start="2">
<li>Passing the parent attribute to the Com_port class, you have to change the following:</li>
</ol>
<hr/>
<pre><code>ser= Com_port(port="COM5",baudrate=115200, parent=self)
</code></pre>
<p>and </p>
<pre><code>class Com_port(QObject):
    [...]

    def __init__(self, *args, **kwds):
        super(Com_port, self).__init__(kwds.pop('parent'))
</code></pre>
<p>I also recommend changing <code>QWidget.__init__(self, parent)</code> to <code>QMainWindow.__init__(self, parent)</code></p>
<p>Lastly do not forget to create and display an instance of <code>bms_single</code> in the main.</p>
<pre><code>if __name__ == '__main__':
    app = QApplication(sys.argv)
    w = bms_single()
    w.show()
    sys.exit(app.exec_())
</code></pre>
</div>
<span class="comment-copy">ComPortApp.packet_received.connect(self.rcvData_signal) #event redir is not correct at first listing  it should be  ser.packet_received.connect(self.rcvData_signal) #event redir  but it is still not working</span>
