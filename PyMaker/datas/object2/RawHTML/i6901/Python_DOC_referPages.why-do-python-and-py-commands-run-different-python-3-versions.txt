<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2812520/dealing-with-multiple-python-versions-and-pip">Dealing with multiple Python versions and PIP?</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
</ul>
</div>
<p>I've installed <code>django</code> using the <code>pip</code> command (<code>pip install Django</code>), but i can't run it using the <code>py</code> command, as it can't find the module. 
I can only make it works using 'python' command.</p>
<p>Here is a summary of the screenshot I have atttached</p>
<pre><code>$ python --version
Python 3.6.1
$ py --version
Python 3.6.0
</code></pre>
<p>It also looks like django works only with 3.6.1. </p>
<p>Is there any way to set both commands to run newest version of python?</p>
<p>Screenshot:</p>
<p><img alt="screen" src="https://i.stack.imgur.com/56cEN.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>On windows, py is an executable stored in the C:\Windows folder. I honestly don't know what it contains, as I am used to where it is a symbolic link on linux, and my windows install shows the normal python executable as being a fraction of the size of py, despite my being quite sure that they point to the same installation. Regardless, you can fix your problem by deleting or renaming (python.bak, etc) the executable you don't want to keep using from the Windows folder, then copying the one you want in place and renaming it to the same name that you previously deleted or renamed. I can't imagine this is the official way to fix this problem, but this will work. Also, in the future, feel free to specify the version you are installing to with pip explicitly if you want to be sure of which installation you are using instead of just running whatever points to pip:</p>
<pre><code>py -m pip install packagename
python -m pip install packagename
</code></pre>
<p>Running into problems with multiple python versions on the same system is quite common with Windows, so setting up a virtual environment may be beneficial. This is explained in the <a href="https://docs.djangoproject.com/en/1.11/howto/windows/" rel="nofollow noreferrer">Django Windows install how-to</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're using <a href="https://www.python.org/dev/peps/pep-0397/" rel="nofollow noreferrer">Python launcher for Windows</a> when you execute<code>py</code>. You could be specific about which Python interpreter version that you want <code>py</code> to execute with this command:</p>
<pre><code>&gt; py -3.6
</code></pre>
<p>See this section from PEP 397: 
<a href="https://www.python.org/dev/peps/pep-0397/#python-version-qualifiers" rel="nofollow noreferrer">Python Version Qualifiers</a></p>
<blockquote>
<p>If no version qualifiers are found in a command, the environment
  variable <code>PY_PYTHON</code> can be set to specify the default version qualifier
  <code>-</code> the default value is "2". Note this value could specify just a major version (e.g. "2") or a <code>major.minor</code> qualifier (e.g. "2.6"), or even
  <code>major.minor-32</code>.</p>
<p>If no minor version qualifiers are found, the environment variable
  <code>PY_PYTHON{major}</code> (where <code>{major}</code> is the current major version qualifier
  as determined above) can be set to specify the full version. If no
  such option is found, the launcher will enumerate the installed Python
  versions and use the latest minor release found for the major version,
  which is likely, although not guaranteed, to be the most recently
  installed version in that family.</p>
<p>In addition to environment variables, the same settings can be
  configured in the .INI file used by the launcher. The section in the
  INI file is called [defaults] and the key name will be the same as the
  environment variables without the leading <code>PY_ prefix</code> (and note that
  the key names in the INI file are case insensitive.) The contents of
  an environment variable will override things specified in the INI
  file.</p>
</blockquote>
<p>Plus Python launcher isn't just limited to launching different Python versions, it also parses shebang <code>#!</code> in source code files, providing a functionality similar to that in *nix operating systems in Windows. </p>
<p>*Refer to <a href="https://docs.python.org/3/using/windows.html#python-launcher-for-windows" rel="nofollow noreferrer">Python Launcher for Windows</a> documentation. </p>
</div>
<span class="comment-copy">What is your operating system?</span>
<span class="comment-copy">type <code>which python</code> and <code>which py</code> and post your results. I have found that on my <code>windows pc</code> these commands are from different python installation. Packaes like <code>django</code> are specific to a python install or virtual environment.</span>
<span class="comment-copy">1. @Evan - Win10Pro 64-bit  2. @surfer190 - these <code>which python</code> and <code>which py</code> command are not recognized as commands in my prompt</span>
<span class="comment-copy">Try <code>where</code> (Windows) instead of <code>which</code> (Linux).</span>
<span class="comment-copy">It may be that the 3.6.1 installation is 32-bit, and the 3.6.0 installation is 64-bit. The launcher prefers 64-bit builds over 32-bit builds for a given major.minor version. The micro release number (i.e. major.minor.micro) is ignored here.</span>
<span class="comment-copy">python.exe is not in the Windows folder, and nothing should be deleted or renamed. It's simply a matter of which version py.exe prefers, e.g. 64-bit 3.6 over 32-bit 3.6 vs the version the OP has in <code>PATH</code>. The problem can be resolved without resorting to such drastic measures.</span>
<span class="comment-copy">@eryksun Thanks for the information. I included a reference to the doc page you've provided.</span>
