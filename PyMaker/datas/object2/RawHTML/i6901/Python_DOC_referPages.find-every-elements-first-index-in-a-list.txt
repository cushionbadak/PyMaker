<div class="post-text" itemprop="text">
<p>Here is a list <code>a=[1,1,1,2,4,2,4,32,1,4,35,23,24,23]</code></p>
<p>I do this in python:</p>
<pre><code>unique_number=list(set(a))
ans=map(lambda x:a.index(x),unique_number)
</code></pre>
<p>output:</p>
<pre><code>&lt;map at 0x2b98b307828&gt;
</code></pre>
<p>I want to know what's wrong with my code and find an more efficient way to achieve this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can avoid keep re-indexing and building a set first - simply build a <code>dict</code> iterating over <code>a</code> backwards as the dictionary will only keep the last value for a key (in this case - the earliest appearing index), eg:</p>
<pre><code>a=[1,1,1,2,4,2,4,32,1,4,35,23,24,23]

first_index = {v:len(a) - k for k,v in enumerate(reversed(a), 1)}
# {1: 0, 2: 3, 4: 4, 23: 11, 24: 12, 32: 7, 35: 10}
</code></pre>
<p>This way you're only scanning the sequence once.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code would work as you expected in Python 2. In Python 3, <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> returns an iterator. You could, e.g., convert it to a list:</p>
<pre><code>&gt;&gt;&gt; ans=map(lambda x:a.index(x),unique_number)
&gt;&gt;&gt; list(ans)
[7, 0, 3, 10, 4, 11, 12]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>for value in map(lambda x:a.index(x),unique_number):
     print(value)
</code></pre>
<p>or append this:</p>
<pre><code>for var in ans:
     print(var)
</code></pre>
</div>
<span class="comment-copy">What if you <code>print(list(ans))</code> ?</span>
<span class="comment-copy">@khelwood It returns  <code>[7, 0, 3, 10, 4, 11, 12]</code></span>
<span class="comment-copy">What exactly is your desired output? Also you don't need lambda to get <code>list(map(a.index,list(set(a))))</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/q/1303347/2301450">stackoverflow.com/q/1303347/2301450</a></span>
<span class="comment-copy">If you are trying to get the indexes of the unique values, then @khelwood is right, hence the output. If you are trying to get the Unique value itself, then remove <code>ans=map(lambda x:a.index(x),unique_number)</code> and directly print <code>unique_number</code></span>
<span class="comment-copy">Thanks,this is really cool !</span>
<span class="comment-copy">maybe take <code>len(a)</code> outside the dict comp</span>
<span class="comment-copy">@Chris_Rands yup... or zip <code>a</code> with <code>range(len(a), -1, -1)</code> instead of <code>enumerate</code>... the idea can be tweaked however :)</span>
<span class="comment-copy">Thx.<code>list(ans)</code> solved my problem</span>
<span class="comment-copy">No need for lambda here</span>
<span class="comment-copy">@Chris_Rands this is copied from the OP. I was just explaining why he got the output he got.</span>
<span class="comment-copy">Might be worth noting for future reference that the whole lambda can go when using map... Just <code>list(map(a.index, set(a))</code> will do it...</span>
