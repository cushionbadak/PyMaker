<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20261517/inheritance-of-private-and-protected-methods-in-python">Inheritance of private and protected methods in Python</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I've read all the similar posts regarding this topic but none that I found related to my problem in a way that helped me figure out what was happening.</p>
<pre><code>class A:
    def __init__(self, value):
        self.__value = value
        self.__conn = httpsconnection # Specifics don't matter

class B(A):
    def __init__(self, id, type, value):
        super().__init__(value)
        self.data = self.__create_sub_class(id, type)

    def __create_sub_class(self, id, type):
        self.__conn.request(...)
        ...
        return data

class C(B):
    def __init__(self, id, value):
        super().__init__(id, externalVariable, value)
</code></pre>
<p>The error I am getting is <code>AttributeError: 'C' object has no attribute '_B__conn'</code></p>
<p>Shouldn't class <code>C</code> inherit the variable from <code>B</code> which inherited it from <code>A</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Do not use leading double-underscore names if you want to use those names in subclasses. The <code>__name</code> is explicitly designed to make the name <em>class private</em>, that is, only useful for the exact class. The idea is that you can use such names in a framework without then limiting what names subclasses can use.</p>
<p>Such names are <em>mangled</em> at compile time; they have <code>_ClassName</code> prefixed (with the current class name). Simply use single underscore names if you want to signal that a name is internal (Python has no actual privacy model, names are always accessible):</p>
<pre><code>class A:
    def __init__(self, value):
        self._value = value
        self._conn = httpsconnection # Specifics don't matter

class B(A):
    def __init__(self, id, type, value):
        super().__init__(value)
        self.data = self._create_sub_class(id, type)

    def _create_sub_class(self, id, type):
        self._conn.request(...)
        ...
        return data
</code></pre>
<p>See <a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer"><em>Reserved classes of identifiers</em></a> in the lexical analysis documentation:</p>
<blockquote>
<p><code>__*</code><br/>
  Class-private names. Names in this category, when used within the context of a class definition, are re-written to use a mangled form to help avoid name clashes between “private” attributes of base and derived classes.</p>
</blockquote>
<p>and the referenced <a href="http://docs.python.org/3/reference/expressions.html#atom-identifiers" rel="nofollow noreferrer">documentation on names</a>:</p>
<blockquote>
<p><strong>Private name mangling</strong>: When an identifier that textually occurs in a class definition begins with two or more underscore characters and does not end in two or more underscores, it is considered a private name of that class. Private names are transformed to a longer form before code is generated for them. The transformation inserts the class name, with leading underscores removed and a single underscore inserted, in front of the name. For example, the identifier <code>__spam</code> occurring in a class named Ham will be transformed to <code>_Ham__spam</code>. This transformation is independent of the syntactical context in which the identifier is used.</p>
</blockquote>
</div>
<span class="comment-copy">Why are you using double-underscore names? Those are explicitly designed to avoid inheritability.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html#private-variables</a></span>
<span class="comment-copy">@MartijnPieters They're my private variables. A habit I picked up in another language when I was learning to program.</span>
<span class="comment-copy">@Spedwards: there is no privacy model in Python, other than class-private names, and your use cases doesn't fit their goal.</span>
<span class="comment-copy">Thank you. I didn't know about the whole name-mangling. I don't know why but I've always preferred using double underscores over single. I guess that'll have to change now.</span>
