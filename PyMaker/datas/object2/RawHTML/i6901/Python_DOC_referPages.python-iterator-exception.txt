<div class="post-text" itemprop="text">
<p>I learnt in the past that Exception should be fired when there is somthing in the program which is not normal. For example an error when reading a file.
If you look this python code you will see that a StopIteration Exception is fired. But this is not an anormal behaviour of the program. So my question is: Should we raise an exception in this case ? Thanks</p>
<pre><code>class MyIterator():
    def __init__(self, n):
        self.max = n

    def __iter__(self):
        self.count = 0
        return self

    # For Python3
    def __next__(self):
        if self.count == self.max:
            raise StopIteration
        self.count += 1
        return self.count - 1

c = MyIterator(4)
for i in c:
   print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes. You not only should raise an exception here, you <em>must</em> raise an exception here. <a href="https://docs.python.org/3.6/library/stdtypes.html#iterator.__next__" rel="nofollow noreferrer">This is what the iterator protocol calls for</a>:</p>
<blockquote>
<p><code>iterator.__next__()</code></p>
<blockquote>
<p>Return the next item from the container. If there are no further items, raise the <code>StopIteration</code> exception. [...]</p>
</blockquote>
</blockquote>
<p>You're correct in that exceptions should be raised when the program is in an exceptional state (yes, I know that sounds redundant). However, exceptions in Python are different than in most languages. Exceptions in Python are used for core language features such as iteration, and they are preferred over conditional statements. The common idiom in Python is that <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">"It's easier to ask for foreignness instead of permission"</a>:</p>
<blockquote>
<p>Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C. </p>
</blockquote>
<p>The <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow noreferrer"><code>try</code></a> statement is also fined-tuned to allow for the user to have control over how exceptions are handled. It allows <code>else</code>, <code>finally</code>, and multiple <code>except</code> clasues to be used in conjugation with it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, absolutely. The StopIteration exception <strong>needs</strong> to be raised to signal iterator when the <code>self.count</code> equals to <code>self.max</code> which means there are no more elements. Look at Python's <a href="https://docs.python.org/3/howto/functional.html#iterators" rel="nofollow noreferrer">Iterator documentation</a></p>
<blockquote>
<p>If there are no more elements in the stream, <strong>next</strong>() must raise the
  StopIteration exception.</p>
</blockquote>
</div>
<span class="comment-copy">Yes you should. It tells the for loop the iterator reached the end.</span>
<span class="comment-copy">Specifically: yes, that's how the iterator protocol works, <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow noreferrer">as documented</a>. Generally: it's common in Python to use exceptions for flow control - it's <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer"><i>easier to ask for forgiveness than permission</i></a>.</span>
<span class="comment-copy">Relevant documentation is <a href="https://docs.python.org/3/howto/functional.html#iterators" rel="nofollow noreferrer">here</a> by the way.</span>
<span class="comment-copy">@Blckknght Thanks, I accidentally posted the link instead of the content at the link.</span>
<span class="comment-copy">That's what I figured. I was initially just going to edit to fix the "your"-&gt;"you're" typo, but looked for other stuff to change at the same time and thought that looked like a copy and paste error.</span>
