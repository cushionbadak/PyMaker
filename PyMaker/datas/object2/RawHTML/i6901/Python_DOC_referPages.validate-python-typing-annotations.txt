<div class="post-text" itemprop="text">
<p>I'd like to use <code>typing</code> to validate data structures at runtime outside of function invocations. But, I'm not sure how to check if two <code>typing</code> types are compatible. It seems that <code>typing</code> types don't play nicely with <code>isinstance</code>.</p>
<p>The goal is to define class attributes which use descriptors to perform type checking on assignment.</p>
<p>Here's an example:</p>
<pre><code>class MyStruct(object, metaclass=MyStructMeta):
    a = List[int]

my_struct = MyStruct()
my_struct.a = [1]
my_struct.a = ['a']  # should assert
</code></pre>
<p>Now, it's clear to me how to write the descriptors and metaclasses required to make this work. But, I'm not sure how to validate that the value being assigned to an attribute conforms to the <code>typing</code> definition.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm standing by what I said in the comments - it shouldn't be possible to implement this for everything in the <code>typing</code> module. I can't think of any way to reliably implement this for an untrusted callable or consumable iterator (what if it expects you to send something? How will you know what to send?). However, for nested lists of primitive types I came up with this recursive solution:</p>
<pre><code>from typing import *

def is_type(var, typ):
    if issubclass(typ, list):
        if isinstance(var, list):
            subtype, = typ.__args__
            return all(is_type(i, subtype) for i in var)
        return False
    return isinstance(var, typ)
</code></pre>
<p>I've tested it with the following:</p>
<pre><code>print("should all be True:")
print(is_type(1, int))
print(is_type([1, 2, 3], List[int]))
print(is_type([[1, 2], [3, 4], [5, 6]], List[List[int]]))
print(is_type("a", str))
print(is_type(["a", "bc", "d"], List[str]))
print(is_type([["a", "bc"], ["d", "e"]], List[List[str]]))
print(is_type([], List[int]))
print(is_type([], List[List[str]]))
print(is_type([[]], List[List[int]]))

print("should all be False:")
print(is_type(1, str))
print(is_type([1, "2", 3], List[int]))
print(is_type(3, List[int]))
print(is_type([["a", 2], [3, 4], [5, 6]], List[List[int]]))
print(is_type([[1, 2], [3, 4], 56], List[List[int]]))
print(is_type([[]], List[int]))
</code></pre>
<p>which on my machine behaves correctly. This will throw a TypeError if you were to do eg:</p>
<pre><code>is_type(lambda x: x**2, Callable[[int], int])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">typing</a> module does not validate your types; it simply provides more abstract types (such as <code>List</code>, <code>Set</code>, <code>Optional</code>, etc.) on top of what is already available in the <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">builtins</a> module.</p>
<p>In order to validate your code you should use a linter which can understand Python typehints, such as <a href="http://mypy-lang.org/" rel="nofollow noreferrer">MyPy</a>.</p>
<p>For example, if you save your code into a file <code>/tmp/test.py</code>:</p>
<pre><code>from typing import List


class MyStruct(object):
    a: List[int]


my_struct = MyStruct()
my_struct.a = [1]
my_struct.a = ['a']  # should assert
</code></pre>
<p>Running <code>python -m pypy test.py</code> gives the following error:</p>
<pre><code>tmp/test.py:10: error: List item 0 has incompatible type "str"
</code></pre>
</div>
<span class="comment-copy">I suspect that doing this dynamically and generally at runtime will be very difficult. For example, I think it won't be possible to check the return type of a generator or anonymous function without possible side effects. If you'd only like to check for primitive types, or nested lists of primitive types, I'd suspect it would be possible.</span>
<span class="comment-copy">There are some libraries that can do run-time validation of Python 3.5's type annotations. It sounds like you're looking for something like that?</span>
<span class="comment-copy">@IzaakvanDongen yeah, i only need to type check on attribute assignment.  So, handling primitives and nested lists should be sufficient.</span>
<span class="comment-copy">Yeah, that seems like a reasonable solution. I'm surprised though that such a function isn't available somewhere in the Python standard library. Maybe it is and I'm just looking in the wrong place. Thanks!</span>
<span class="comment-copy">I'm afraid that to my knowledge, as ostrokach mentioned, <code>typing</code> is simply not intended for that kind of thing - it's a framework for <b>hints</b>, which static type checkers can compare crucially to other hints, but not to the types. It's not a framework as closely integrated with Python's type system as you'd like. I can't foresee any more concise way to do it than this.</span>
<span class="comment-copy">So, how do static analyzers do this checking? It seems like there should be a python utility function somewhere which checks <code>typing</code> types.</span>
<span class="comment-copy">See <a href="https://www.python.org/dev/peps/pep-0484/#rationale-and-goals" rel="nofollow noreferrer">PEP484: Rationale and Goals</a>: <i>[...] This includes support for off-line type checkers such as mypy, as well as providing a standard notation that can be used by IDEs for code completion and refactoring.</i> Basically, this PEP just proves a convention for adding typehints to Python code. It is up to the individual IDEs and linters to process the type information and display helpful messages, etc.</span>
