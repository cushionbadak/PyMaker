<div class="post-text" itemprop="text">
<p>I'm writing a testing tool in python that downloads REST data, tosses the return value through json.loads() and then compares the value returned from the DB with an expected value.  Unfortunately trying to print out that value or compare that value fails.  Even though the pretty print of the JSON / Rest data is correct and has the full value.  So something as simple as the example below prints lesser precision </p>
<p>Example:</p>
<pre><code>print 1.414213562373095
1.41421356237
</code></pre>
<p>Note the reduced precision. Running an equal compare does not work either.  In both cases I'm coercing the value to a string since comparing two numbers such as 1.13337 and 1.133333333333337 compare as the same number.  Although technically correct we want to be sure that the output from the DB is at the promised precision.  I would be grateful for any solutions out there.  Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you're not actually losing the precision you think you are in your example. <code>print</code> just truncates more aggressively than you expected on Python 2. Comparisons should work fine on that number, as long as you're not losing more precision somewhere else.</p>
<p>If you have an actual precision limits problem - for example, JSON with 20-digit numbers - you can address that. <code>json.loads</code> defaults to parsing numbers as <code>float</code>s, and floats have limited precision. If you don't want that, change how <code>json.loads</code> parses numbers:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; x = '{"a": 1.2345678901234567890}'
&gt;&gt;&gt; json.loads(x, parse_float=str, parse_int=str, parse_constant=str)
{u'a': '1.2345678901234567890'}
&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; json.loads(x, parse_float=Decimal, parse_int=Decimal, parse_constant=Decimal)
{u'a': Decimal('1.2345678901234567890')}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do as user2357112 suggested.
Not enough info to tell exactly the procedure you're going through to compare with the DB, but for future reference, you could use format such as:</p>
<pre><code>val = "{0:.15f}".format(1.414213562373095)
print val
</code></pre>
<p>Edit: Looks like Zinki beat me to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python (and many other programming languages) inherently have problems representing decimal numbers as floats and floating point arithmetic (including comparing floating point numbers). Please see these pages for an extensive explanation as to why: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">Floating Point Arithmetic: Issues and Limitations</a>, <a href="http://homepage.math.uiowa.edu/~atkinson/m170.dir/goldberg.pdf" rel="nofollow noreferrer">What Every Computer Scientist
Should Know About Floating Point
Arithmetic</a>. </p>
<p>If you require high levels of precision in Python, using the <code>Decimal</code> class can help. From the Python docs: "The decimal module provides support for fast correctly-rounded decimal floating point arithmetic". Please see <a href="https://docs.python.org/3.6/library/decimal.html" rel="nofollow noreferrer">Decimal fixed point and floating point arithmetic</a> for more detail.</p>
<p>Here is an example (from Python docs) showing the user-alterable level of precision:</p>
<pre><code>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext().prec = 6
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.142857')
&gt;&gt;&gt; getcontext().prec = 28
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.1428571428571428571428571429')
</code></pre>
<p>EDIT:
As per discussion in comments, I was looking further into floating point comparison and it is possible to use math.isclose in Python if you desire comparisons to a specific precision. See <a href="https://stackoverflow.com/questions/5595425/what-is-the-best-way-to-compare-floats-for-almost-equality-in-python">What is the best way to compare floats for almost-equality in Python?</a> for more details. 
For an analysis of floating point comparisons, please see: <a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/" rel="nofollow noreferrer">Comparing Floating Point Numbers</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is complete coded up answer that will correctly print any arbitrarily large decimal number.  Unfortunately, you must use the DecimalEncoder class to return the value as a string.  When I run this code stand alone I get exactly what I want.  (remember this is being used for testing and I want to be sure that python isn't changing the value somehow).  So when I get the value back from the database I can compare the value correctly without python rounding or clipping the value.  </p>
<p>This solution in my testing environment, for some reason, rounds the last digit but no longer clips to 11 digits of precision.  Swapping the json.loads calls will show the original issue.  </p>
<p>Unfortunately this changes the type of the data to a string and I still have to figure out why my code is rounding the value for the comparison but I can figure that out on the weekend :).  Thanks for everybody's help!!</p>
<pre><code>import json
import decimal  # use decimal to tell python to leave my numbers alone

class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            return str(o)
        return super(DecimalEncoder, self).default(o)

class JSONUtils:
    def __init__( self, response ):
        self.response = response
        self.jsonData = None
        self.LoadData( )

        print 'jsonData: ' + json.dumps( self.jsonData, cls=DecimalEncoder, indent=2 )

    def LoadData ( self ):
        if ( self.jsonData == None ):
            if ( type( self.response ) == str or type( self.response ) == unicode ):
#               self.jsonData = json.loads(self.response )
                self.jsonData = json.loads(self.response, parse_float=decimal.Decimal )

    def GetJSONChunk( self, path ):
        returnValue = ''
        curPath     = ''
        try:
            if ( type( path ) == str ):
                returnValue = self.jsonData[path]
            elif (type( path ) == list):
                temp = ''
                firstTime = True
                for curPath in path:
                    if firstTime == True:
                        temp = self.jsonData[curPath]
                        firstTime = False
                    else:
                        temp = temp[curPath]
                returnValue = temp
            else:
                print 'Unknown type in GetJSONChunk: ' + unicode( type( path ))
        except KeyError as err:
            ti.DBG_OUT( 'JSON chunk doesn\'t have value: ' + unicode( path ))
            returnValue = self.kNoNode
        except IndexError as err:
            ti.DBG_OUT( 'Index does not exist: ' + unicode( curPath ))
            returnValue = self.kInvalidIndex

        return returnValue

myJSON = JSONUtils( '{ "fldName":4.9497474683058327445566778899001122334455667788990011 }' )
value =  str( myJSON.GetJSONChunk ( 'fldName' ))
print str( type( value ))
print value
</code></pre>
<p>Output:</p>
<pre><code>&lt;type 'str'&gt;
4.9497474683058327445566778899001122334455667788990011
</code></pre>
</div>
<span class="comment-copy"><code>print("{:.15f}".format(1.414213562373095))</code>&gt;&gt;&gt;1.414213562373095</span>
<span class="comment-copy"><code>1.13337 == 1.133333333333337</code>? I can't test right now but is that even correct in 32-bit?</span>
<span class="comment-copy">Use formatting. a = "1.414213562373095" print "{0:.14f}".format(a)</span>
<span class="comment-copy">@roganjosh. 32-bits only gives you about 5 significant figures in decimal, so it might actually be.</span>
<span class="comment-copy">@madphysicist I went to <a href="https://stackoverflow.com/a/13543600/4799172">stackoverflow.com/a/13543600/4799172</a> and it seems a bit low still? I guess it's because it's &gt;1</span>
<span class="comment-copy">This looks good and possible.  The example code works for me but unfortunately putting it into my implementation ends with a large stack that says:  Decimal('1.414213562373095') is not JSON serializable.  My load call looks like:   if ( type( self.urlResponse ) == str or type( self.urlResponse ) == unicode ):     self.jsonData = json.loads(self.urlResponse, parse_float=Decimal)  elif ( type( self.urlResponse ) == dict ):     dump = json.dumps(self.urlResponse)     self.jsonData = json.loads(dump, parse_float=Decimal)</span>
<span class="comment-copy">Sorry about the mess.  It appears that stackoverflow can't handle comments with formatting</span>
<span class="comment-copy">@Keith: It looks like if you have a dict, you're dumping and then loading it. First, if this code isn't sure whether it has a dict or a string, that's a warning sign that you may need to be more careful about types. Second, if you have a dict, you probably don't need to dump and reload it.</span>
<span class="comment-copy">The code checks to see if I have a string a dict and there is a third definition for file pointer.  This allows me to pass in various types and load them up.  Are you saying one of the types is wrong.  I believe the 3rd type is what this code path is going through.  I'll check and BRB</span>
<span class="comment-copy">Nope it is going through the first path.  It is a string:     AssertionError: isString:  So how does that affect the load not loading types correctly and seeing the Decimal('1.414213562373095') is not JSON serializable error.  So this is the load command that is being used:  				self.jsonData = json.loads(self.urlResponse, parse_float=Decimal)</span>
<span class="comment-copy">While useful information in general, how does this actually apply to OP's problem?</span>
<span class="comment-copy">Using a Decimal class as opposed to floats would allow the OP to compare values exactly. From OP: "comparing two numbers such as 1.13337 and 1.133333333333337 compare as the same number". Other answers mentioned here also work (in this case using Decimal is likely overkill and not needed). Floating point comparisons are hard: <a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/" rel="nofollow noreferrer">randomascii.wordpress.com/2012/02/25/…</a></span>
