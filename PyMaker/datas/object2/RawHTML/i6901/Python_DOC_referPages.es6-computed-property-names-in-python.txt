<div class="post-text" itemprop="text">
<p>I'm trying to find an equivalent ES6 feature in Python.</p>
<p>In JS, I have something like this:</p>
<pre class="lang-js prettyprint-override"><code>let obj = {['composed' + objKey()]: true}
</code></pre>
<hr/>
<p>I want do be able to compose a dictionary key in a dict constructor in Python as well, something like:
</p>
<pre><code>MyClass.render(storyboard=dict([getAuthor()]=self.authorStoryData()))
</code></pre>
<p><code>[getAuthor()]</code> should result in a dictionary key of the return value of that function. Or if it's variable, it's value, etc...</p>
<p>Is there anyway to do this in Python?</p>
<p>I've tried doing <code>dict=('%s' % (variable,)=self.content</code> but that threw errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just like you use an object literal in JavaScript, you should use a dictionary literal in Python for this. This would be the exact equivalent in Python:</p>
<pre><code>def objKey():
   return 'foo'

obj = {
    'composed' + objKey(): True
}

print(obj['composedfoo']) # True
</code></pre>
<p>Or in your actual case:</p>
<pre><code>MyClass.render(storyboard={ getAuthor(): self.authorStoryData() })
</code></pre>
<hr/>
<p>As Jon highlights on the comments, the big difference between a JavaScript object literal and a Python dict literal is that Python’s behavior for the keys is basically JavaScript’s behavior with <code>[]</code> by default.</p>
<p>So to translate a <code>{ [expr]: value }</code> in JavaScript, you would write <code>{ expr: value }</code> in Python. But when you just write <code>{ key: value }</code> in JavaScript, you have to understand it’s essentially a <code>{ ['key']: value }</code> which makes it equivalent to <code>{ 'key': value }</code> in Python.</p>
<p>The reason why you need a string literal for string keys is simply because Python dictionaries can have almost arbitrary key <em>objects</em> and are not limited to string keys as JavaScript objects are.</p>
</div>
<span class="comment-copy">Thank you. The following would still work as well yes? <code>MyClass.render(storyboard={ 'composed' + objKey(): self.authorStoryData() })</code></span>
<span class="comment-copy">Yeah, that works just the same. Though it might make sense to put the dictionary creation on its own line for readability reasons.</span>
<span class="comment-copy">Basically whatever you want without the <code>[]</code> syntax. While <code>something</code> will be made a literal in JS in Python it will be the <i>value</i> of <code>something</code>...  and you have to make the literal explicit for literals...</span>
<span class="comment-copy">Do you know of where I can find the documentation on this? I've checked <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">The Python Tutorial</a> and the <a href="https://docs.python.org/3/reference/index.html" rel="nofollow noreferrer">Language Reference</a></span>
<span class="comment-copy">Syntactically, it’s defined <a href="https://docs.python.org/3/reference/expressions.html#dictionary-displays" rel="nofollow noreferrer">in the language reference</a>, but explained in the <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">documentation for <code>dict</code></a>. You have to keep in mind that keys in JavaScript objects can only be strings (or <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol" rel="nofollow noreferrer">symbols</a>), while dictionary keys can be almost any object, which makes Python require string literals when you want a string key.</span>
