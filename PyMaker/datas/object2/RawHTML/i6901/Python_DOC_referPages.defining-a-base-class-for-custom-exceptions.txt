<div class="post-text" itemprop="text">
<p><strong>Question:</strong></p>
<p><em>What is the need to define a base class for handling errors?</em></p>
<p><strong>Background:</strong></p>
<p>I was reading through the docs on <a href="https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions" rel="nofollow noreferrer">User-Defined Exception Handling</a> when I noticed in the example they defined <code>class Error(Exception)</code>. The remaining classes are all subclasses of it. </p>
<p>When I have been defining custom exceptions, I've simply written <code>class MyExc(Exception)</code> and never define a base class.</p>
<p>I don't understand, particularly in their example, the need for defining <code>class Error(Exception)</code> when all it does is pass. Yes they could just <code>raise Error</code> for a particular case, but couldn't they have just as well defined the two other exceptions as subclasses of <code>Exception</code> vice <code>Error</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you write a library you usually define a base exception class for all your exceptions so that a user has a simple way to handle them all at the same time, e.g.</p>
<p><strong>MyLib</strong></p>
<pre><code>class MyError(Exception):
    pass
</code></pre>
<p><strong>some other code</strong></p>
<pre><code>try:
   ...
except MyError:
   # MyLib error, handle it
</code></pre>
<p>But to be honest this "lib specific" handling hardly ever happens (usually you either catch a specific exception or just catch all <code>except Exception:</code>). So I guess it's not that important. More a matter of style.</p>
</div>
<span class="comment-copy">... Because now you can catch <code>Error</code> instead of having to catch each individually.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams Why define them individually if you wouldn't want to catch one specifically?</span>
<span class="comment-copy">Sometimes you want to, sometimes you don't.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams Hmm. That seems odd. You wouldn't <code>raise InputError("Hello", "World")</code> but <code>except Error</code> would you??</span>
<span class="comment-copy">Only if knowing that it's an <code>InputError</code> is important. Otherwise you can treat it just like a generic <code>Error</code>.</span>
<span class="comment-copy">If you're catching <code>Exception</code> then you're Doing It Wrong (unless it's your job, which it almost never is).</span>
<span class="comment-copy">@IgnacioVazquez-Abrams Lol, and why is that? Cause the internet says so? :D</span>
<span class="comment-copy">@freakish if you're catching blanket <code>Exception</code>s that have nothing to do with your framework and aren't re-raising them to something that can deal with them in context of the overall system, then yes - you're doing it wrong. If it's an exception you can deal with and sort out, then do so, otherwise, let it propagate until something else can.</span>
<span class="comment-copy">@JonClements Of course it is not wrong. For example if I write a web server framework and don't catch an <code>Exception</code> at the top level it will crash. So instead you catch generic <code>Exception</code> and return 500 to the user. And log it in the meantime. Actually the same goes for <b>any</b> code that accepts a user defined function. Besides there's no such thing as <code>you're doing it wrong</code>. Everything has its place.</span>
<span class="comment-copy">@JonClements Someone had to write this framework using <code>except Exception:</code> line, my friend. So don't say that "you're doing it wrong". You don't know the context, you don't know what code someone is writing. Such generic statements are simply wrong and confusing.</span>
