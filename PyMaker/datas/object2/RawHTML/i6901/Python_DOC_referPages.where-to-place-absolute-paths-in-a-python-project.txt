<div class="post-text" itemprop="text">
<p>I have the following project structure</p>
<pre><code>ts_tools
    /bin
    /docs
    /lib
    /ts_tools
        /data_transfer
            /tests
            data_import.py
            __init__.py
        /data_manipulation
            /tests
            data_smoothing.py
            __init__.py
        __init__.py
    config.yaml.conf
    setup.py
    LICENSE
    README.md
    TODO.md
</code></pre>
<p>I would like to import data with the <code>data_import.py</code> file from an external source. I use the <code>config.yaml.conf</code> file to specify the absolute paths of the data with:</p>
<pre><code>root_path:
    windows:
        data_fundamental: C:\\Users\\Malcom\\Data_Fundamental
        data_event: C:\\Users\\Malcom\\Data_Event
    linux:
        data_fundamental: /home/data/data_fundamental
        data_event: /home/data/data_event
</code></pre>
<p>The respective paths should be available for all tools in the <code>ts_tools</code> package (i.e. <code>data_import.py</code> and <code>data_smoothing.py</code>). Furthermore, the program should identify the os and choose the path structure accordingly.</p>
<p>I know how to set the paths with the yaml file using</p>
<pre><code>import yaml

with open("config.yaml.conf", "r") as ymlfile:
    cfg = yaml.load(ymlfile)
</code></pre>
<p>and I know how to discriminate between the os with</p>
<pre><code>if platform.system().lower() == 'windows':
    ROOT_DATA_PATH = cfg['windows']
else:
    ROOT_DATA_PATH = cfg['linux']
</code></pre>
<p>but I don't know where to place these code snippets. I don't think that it is appropriate to use it in the <code>setup.py</code> file. On the other hand I consider it inappropriate to specify a new .py file. What is a good design structure for this problem? Where should a specify absolute file paths? Is my ansatz a step in the right direction?</p>
<p>Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this case, you can make it relative to the home directory, so you can have <code>~/data_fundamental</code> and <code>~/data_event</code> (Which should be equivalent on both platforms). You can expand this with <a href="https://docs.python.org/3/library/os.path.html#os.path.expandhome" rel="nofollow noreferrer"><code>os.path.expandhome</code></a></p>
<pre><code>import os.path

def get_path(s):
    return os.path.normpath(os.path.normcase(
        os.path.expanduser(os.path.expandvars(s))
    ))

# get_path('~/data_fundamental') on Windows:
#    r'c:\users\malcom\data_fundamental'
# get_path('~/data_fundamental') on Linux:
#    r'/home/data/data_fundamental'
# (Assuming your username on Windows is Malcolm
#  and on Linux is data and you haven't changed
#  the default home path)
</code></pre>
<p>In any case, having two different setup things might be overly confusing, and you should expand <code>~</code> and <code>%VARS%</code> and <code>${VARS}</code> anyways to make setting it up easier and run as expected.</p>
<p>Your other alternatives include:</p>
<ul>
<li>Reading from environment variables</li>
<li>Writing it in <code>setup.py</code> (You should probably allow some way to change where the config file is as <code>setup.py</code> might put it in a write-protected location)</li>
</ul>
<p>You could also not have a default at all, and when not given either make a default based on <code>sys.platform()</code> or raise an error message telling the user to set it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's identify two different type of files/data.</p>
<ul>
<li>Files/data written by the user or for the user during installation/deploy</li>
<li>Files/data written by the coder</li>
</ul>
<p>It can be okay to have absolute paths in files/data defined by the user or generated by the program executing on the user machine.
Absolute paths are intrinsically more fragile than relative paths, but it's not that bad in the first case.</p>
<p>In the second case you should never use absolute paths. I see that you are even using two different paths for windows and linux. You don't have to do that and you shouldn't.</p>
<p>In Python you have things such as <code>os.path.expanduser('~')</code> to find the user path, or packages like <a href="https://pypi.python.org/pypi/appdirs/1.4.0" rel="nofollow noreferrer">appdirs</a>. You want to be cross-platform as much as possible, and with Python is almost always possible.</p>
</div>
