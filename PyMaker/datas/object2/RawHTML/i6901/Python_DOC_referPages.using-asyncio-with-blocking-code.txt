<div class="post-text" itemprop="text">
<p>Firstly, I looked at <a href="https://stackoverflow.com/questions/23898363/how-to-interface-blocking-and-non-blocking-code-with-asyncio">this</a>, <a href="https://stackoverflow.com/questions/28492103/how-to-combine-python-asyncio-with-threads">this</a> and <a href="https://stackoverflow.com/questions/23898363/how-to-interface-blocking-and-non-blocking-code-with-asyncio">this</a> and whilst the first has some useful information, it's not relevant here because I'm trying to iterate over values.</p>
<p>Here's an example of something I want to be able to do:</p>
<pre class="lang-python prettyprint-override"><code>class BlockingIter:
    def __iter__(self):
        while True:
            yield input()

async def coroutine():
    my_iter = BlockingIter()
    #Magic thing here
    async for i in my_iter:
        await do_stuff_with(i)
</code></pre>
<p>How would I go about this?</p>
<p>(Note, <code>BlockingIter</code> is in reality a library I'm using (<a href="https://github.com/Manishearth/ChatExchange" rel="nofollow noreferrer">chatexchange</a>) so there might be a few other complications.)</p>
</div>
<div class="post-text" itemprop="text">
<p>As @vaultah says and also explained in the <a href="https://docs.python.org/3/library/asyncio-eventloop.html#executor" rel="nofollow noreferrer">docs</a>, <code>awaiting</code> the <code>executor</code> (<code>await loop.run_in_executor(None, next, iter_messages)</code>) is probably what you want.</p>
</div>
<span class="comment-copy">Can you say more about the behavior you want here: is <code>do_stuff_with(i)</code> the only part you want done asynchronously?</span>
<span class="comment-copy">No, I'm working in a framework that uses asyncio as a base and I've got to work with it</span>
<span class="comment-copy">Well, you could probably use <code>run_in_executor</code> to advance an iterator object. So <code>await</code>ing <code>loop.run_in_executor(None, next, it)</code> in a loop would be reasonably close to the desired behaviour.</span>
<span class="comment-copy">@vaultah that works, thanks! If you want to write an answer, the final code is <code>iter_messages = iter(my_iter);while 1:;i = await loop.run_in_executor(None, next, iter_messages)</code></span>
<span class="comment-copy">I think a better question is "how do I get user input asynchronously"</span>
