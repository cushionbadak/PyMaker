<div class="post-text" itemprop="text">
<p>I am given a list of numbers <code>a = [1, 2, 3, 4, 5, 6]</code> and using only Python's <strong>reduce</strong> function, return a value. The value is calculated by:
<code>(((...(a[0] + a[1]) * a[2] + a[3]) * a[4] + ...)</code>
<br/><br/>
So in the above example where <code>a = [1, 2, 3, 4, 5, 6]</code>, the answer should be <code>((1 + 2) * 3 + 4) * 5 + 6 = 71</code></p>
<p><br/><br/>
I'm fairly new to Python and I'm trying to learn it:<br/>
<code>reduce(lambda x,y: x * y, map(lambda x,y: x+y, numbers))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The tricky bit is, of course, that you have to alternate between two functions in <code>reduce</code>. Since you can't really keep track of the current position in the list<sup>1)</sup>, in order to decide which operation to use, your best chance is to use an iterator that alternates between <code>+</code> and <code>*</code>.</p>
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> to alternate between <code>add</code> and <code>mul</code> and use those in <code>reduce</code></p>
<pre><code>&gt;&gt;&gt; import itertools, operator
&gt;&gt;&gt; op = itertools.cycle([operator.add, operator.mul])
&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; reduce(lambda x, y: next(op)(x, y), a)
71
</code></pre>
<p>If you can't use those modules, you can make a generator expression alternating between <code>+</code> and <code>*</code> using <code>lambda</code>s in a ternary expression. The rest remains the same.</p>
<pre><code>&gt;&gt;&gt; op = ((lambda x,y:x+y) if i % 2 == 0 else (lambda x,y:x*y) for i in range(len(a)))
&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; reduce(lambda x, y: next(op)(x, y), a)
71
</code></pre>
<hr/>
<p><sup>1)</sup> Well, you can, using <code>enumerate(a)</code>, or <code>zip(range(len(a)), a)</code>, if you prefer...</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; reduce(lambda x, y: (y[0], x[1]+y[1]) if x[0]%2==0 else (y[0], x[1]*y[1]), enumerate(a))[1]
71
</code></pre>
<p>Or shorter, using tuple-unpacking in the <code>lambda</code>s, but this only works in Python 2.x:</p>
<pre><code>&gt;&gt;&gt; reduce(lambda (i,x),(j,y): (j, x+y) if i%2==0 else (j, x*y), enumerate(a))[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Improving the solution of Akash Patel, i have come up with this, with only reduce.</p>
<pre><code>reduce(lambda acc,x: (acc+x[1] if x[0]%2 else acc*x[1]), enumerate(numbers), 1)
</code></pre>
<p>We need to add odd number of elements and multiply even number of elements with previous elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>This was a tough problem because you wanted to use everything in <code>reduce</code>. So just use reduce twice!</p>
<pre><code>reduce(lambda x, y: x + y, reduce(lambda x, y: (x[0], x[1] + y[1]) if y[0]%2==1 else (x[0], x[1]*y[1]) , enumerate(a)))
</code></pre>
</div>
<span class="comment-copy">So ? What did you already do ?</span>
<span class="comment-copy">I'm fairly new to Python and I'm trying to learn it:    <code>reduce(lambda x,y: x * y, map(lambda x,y: x+y, numbers))</code></span>
<span class="comment-copy"><a href="https://stackoverflow.com/posts/45984550/edit">Edit</a> your question and add your code there but continue to receive downvotes.</span>
<span class="comment-copy">using only reduce</span>
<span class="comment-copy">You can't do anything with <i>only</i> <code>reduce</code>; what exactly <i>is</i> allowed to be used to define the function argument?</span>
<span class="comment-copy">just reduce is allowed.</span>
<span class="comment-copy">@Eduardo I don't think you understand how <code>reduce</code> works. You have to define <i>some</i> function to pass as the first argument.</span>
