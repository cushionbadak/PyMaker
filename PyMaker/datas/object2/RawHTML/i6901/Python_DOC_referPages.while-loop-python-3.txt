<div class="post-text" itemprop="text">
<p>I tried to write a <code>while</code>  loop that let a user insert a number. And Python will summarize n+0.5 util it will get to the user's number.</p>
<p>I wrote:</p>
<pre><code>num_u=float(input('insert a number'))
num_a=0

while num_a&lt;num_u: 
    num_a=(num_a+0.5)
    print(num_a)

print(num_a)
</code></pre>
<p>I inserted the number 2.6 and received:</p>
<pre><code>0.5
1.0
1.5
2.0
2.0
2.5
3.0
</code></pre>
<p>what is wrong? Why don't I get</p>
<pre><code>0.5
1.0
1.5
2.0
2.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are flooring the input:</p>
<pre><code>while num_a&lt;int(num_u): 
</code></pre>
<p><code>int(2.6)</code> is <code>2</code>, not <code>3</code>, so the last number that's lower is <code>1.5</code>; <code>2.0 &lt; 2</code> is false and the loop ends.</p>
<p>I'm not sure why you are converting to an integer at all; removing the <code>int()</code> call produces your desired output:</p>
<pre><code>while num_a &lt; num_u:
</code></pre>
<p>albeit with <code>2.5</code> printed twice (once by <code>print()</code> in the <code>while</code> loop, then again by the final <code>print()</code> outside the loop).</p>
<p>If you expected to <em>round</em> the number, then your expected output is incorrect. Looping until <code>3</code> would not only print <code>2.5</code>, but <code>3.0</code> too. You round floating point numbers with the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer"><code>round()</code> function</a>. If you wanted to get the ceiling (always round <em>up</em>) you'd need to use <a href="https://docs.python.org/3/library/math.html#math.ceil" rel="nofollow noreferrer"><code>math.ceil()</code></a>.</p>
<p>If you wanted to list all numbers in <code>0.5</code> steps that are <em>lower or equal</em> to your end number, you need to alter your code to only print those numbers that are still lower:</p>
<pre><code>num_a = 0.5
while num_a &lt; num_u:
    print(num_a)
    num_a += 0.5
</code></pre>
<p>Note that we print <code>num_a</code> <strong>before</strong> adding 0.5 to it (and we started at <code>0.5</code>).</p>
<p>If swapping the <code>print()</code> statement and incrementing are not an option for you, you need to alter your test to add <code>0.5</code> first:</p>
<pre><code>num_a = 0
while num_a + 0.5 &lt; num_u:
    num_a += 0.5
    print(num_a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>2.5 &lt; 2.6, hence num_a = 2.5 is allowed to run through the while loop. Because of this, when 2.5 is passed into:</p>
<pre><code>num_a=(num_a+0.5)
print(num_a)
</code></pre>
<p>You get 3 which it then prints, where as you wish to have the reverse, i.e., printing 2.5 and then adding 0.5.</p>
<p>To solve the problem, use the following:</p>
<pre><code>num_a=0.5

while num_a&lt;num_u: 
    print(num_a)
    num_a=(num_a+0.5)
</code></pre>
<p>This way, when num_a = 2.5 it will print the statement before it adds 0.5. The loop will then terminate without printing 3.0.</p>
<p>As a final precaution, make sure you don't get confused by your final print statement which is outside of the while loop. This will still give out 3, making it seem like the loop is erroneous.</p>
<pre><code>print(num_a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As said in the commentary, you shouldn't use int(). Moreover, you should place the print before the iteration. You'll get this :</p>
<pre><code>num_u=float(input('insert a number'))
num_a=0

while num_a &lt; num_u:
    print(num_a)
    num_a += 0.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no real way to round to 0.5 to my knowledge if that is indeed the plan to get it rounded on halfs and then compared this seems to work:</p>
<pre><code>num_u=float(input('insert a number'))

def roundhalfs(num):
    digit = num- int(num)
    digit = round(digit*2)/2
    return int(num) + digit

num_a=0
while num_a&lt;roundhalfs(num_u):
    num_a=(num_a+0.5)
    print(num_a)

print(num_a)
</code></pre>
<p><em>EDIT:</em> Some output:</p>
<pre><code>insert a number2.8
0.5
1.0
1.5
2.0
2.5
3.0

insert a number2.6
0.5
1.0
1.5
2.0
2.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is because you are casting the float to an integer.</p>
<pre><code>while num_a&lt;int(num_u):
</code></pre>
<p>Converting a float to an integer using the int() cuts the numbers behind the point.
<br/><br/>So for example:<br/></p>
<ul>
<li>int(2.6) is 2</li>
<li>int(9.8) is 9
<br/>
<br/></li>
</ul>
<p>You have to make sure, it will keep the floating point number.<br/></p>
<ul>
<li>float(2.6) is 2.6</li>
<li>float(9.8) is 9.8</li>
</ul>
<p><br/>You are able to use the function without casting the given number, because you casted it once the user entered it.</p>
<pre><code>num_u=float(input('insert a number'))
</code></pre>
<p><br/>
<b>The correct code is</b></p>
<pre class="lang-python prettyprint-override"><code>num_u=float(input('insert a number'))
num_a=0

while num_a &lt; num_u: # Replaced int(num_u) with num_u to keep float
    num_a = (num_a+0.5)
    print(num_a)

print(num_a)
</code></pre>
</div>
<span class="comment-copy">Because <code>int(2.6) == 2</code>, not <code>3</code>. <code>int()</code> <b>floors</b>, it does not round.</span>
<span class="comment-copy">and besides, continually adding 0.5 in a loop leads to floating point accumulation error. You'd be better off with integers &amp; divide by 2 if you're going to fix that 0.5 step.</span>
<span class="comment-copy">@Jean-FrançoisFabre Are you sure about that? 0.5 can still be represented exactly in floats.</span>
<span class="comment-copy">@Jean-FrançoisFabre: 0.5 happens to be cleanly representable in floating point. As long as the other number is close enough in terms of the exponent, you'd not see any errors accumulate.</span>
<span class="comment-copy">right! because it's a power of 2. But I wouldn't rely on that for any values.</span>
<span class="comment-copy">because it doesn't work with out int. if I write 2.8 the last result is 3 not 2.5 even if I wrote "while num_a&lt;num_u"</span>
<span class="comment-copy">@m.k.l: no, because <code>2.5 &lt; 2.8</code> is true, so you add <code>0.5</code> again. You want to start <code>num_a = 0.5</code> then, and move the print to <i>before</i> you add another <code>0.5</code>. Or use <code>while num_a + 0.5 &lt; num_u:</code>.</span>
<span class="comment-copy">you right... let me try again and see</span>
<span class="comment-copy">no I want that num_a&lt;num_u</span>
<span class="comment-copy">because in the while I wrote that num_a=num_a+0.5</span>
<span class="comment-copy">Now the loop starts by printing <code>0</code>, that's not a requirement either.</span>
<span class="comment-copy">no the print is not part of the while</span>
<span class="comment-copy">the print was part of the while in his code, and since he print after the iteration, he get the first number after the num_u, in his case, the loop ended with 3 (2.5 &lt; 2.6 =&gt; add 0.5 =&gt; print). Although it's true 0 isn't a requirement.</span>
<span class="comment-copy">check your code.. it's printing 2.5 twice for 2.6 and 3.0 twice for 2.8</span>
<span class="comment-copy">that is because he prints it again after the iteration is finished in order to remove that the last print just needs to be removed. I was under the impression as he done that that it was desired to print the final answer again</span>
<span class="comment-copy">The OP wasn't all that clear about their edge-cases. They want to print <code>2.5</code> for <code>2.8</code> as well. There is no rounding needed here, only better boundary testing.</span>
<span class="comment-copy">That is true however he increments with 0.5 so it suggests he want to stop at the number closest to it with maximal error of 0.25</span>
<span class="comment-copy">removing the int will result in it stopping at 3.0 and not 2.5. So in regards to his expected outcome this is right</span>
<span class="comment-copy"><code>num_u</code> is <b>already a float</b>. There is no point in converting it to float again for the <code>while</code> test.</span>
<span class="comment-copy">You are right, i will change it.</span>
