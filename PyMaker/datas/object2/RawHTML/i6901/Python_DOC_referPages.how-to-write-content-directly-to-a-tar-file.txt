<div class="post-text" itemprop="text">
<p>I have a url that I can make curl requests against</p>
<pre><code>curl --insecure --header "Expect:" \ 
     --header "Authorization: Bearer &lt;api key&gt;" \
     https://some-url --silent --show-error --fail -o data-package.tar -v
</code></pre>
<p>Here I am trying to do it with the requests module</p>
<pre><code>r = requests.get('https://stg-app.conduce.com/conduce/api/v1/admin/export/' + id, 
                 headers=headers)
r.content ##binary tar file info  
</code></pre>
<p>How do I write this to a tarfile-like data package? </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>content</code> will be the entire file (as bytes) that you can write out.</p>
<pre><code>import requests

r = requests.get('...YOUR URL...')

# Create a file to write to in binary mode and just write out
# the entire contents at once.
# Also check to see if we get a successful response (add whatever codes
# are necessary if this endpoint will return something other than 200 for success)
if r.status_code in (200,):
    with open('tarfile.tar', 'wb') as tarfile:
        tarfile.write(r.content)
</code></pre>
<p>If you are downloading any arbitrary tar file and it could be rather large, you can <a href="http://docs.python-requests.org/en/master/user/advanced/#body-content-workflow" rel="nofollow noreferrer">choose to stream it</a> instead. </p>
<pre><code>import requests

tar_url = 'YOUR TAR URL HERE'
rsp = requests.get(tar_url, stream=True)
if rsp.status_code in (200,):
    with open('tarfile.tar', 'wb') as tarfile:
        # chunk size is how many bytes to read at a time,
        # feel free to adjust up or down as you see fit.
        for file_chunk in rsp.iter_content(chunk_size=512):
            tarfile.write(chunk)
</code></pre>
<p>Note that this pattern (opening a file with <code>wb</code> mode) should generally work with writing any type of binary file. I would suggest reading the <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">writing file documentation for Python 3</a> (Python 2 <a href="https://docs.python.org/2/tutorial/inputoutput.html" rel="nofollow noreferrer">documentation here</a>).</p>
</div>
