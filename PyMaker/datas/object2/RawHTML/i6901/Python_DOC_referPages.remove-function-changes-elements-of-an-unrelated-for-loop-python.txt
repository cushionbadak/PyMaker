<div class="post-text" itemprop="text">
<p>I try to remove all characters in the database that are smaller than a chosen character i. The database is a list of lists of characters.</p>
<pre><code>def project(database, i):
    test = database.copy()
    for idx,lists in enumerate(database.copy()):
        for char in lists:
            print(char)
            if char &lt;= i:
                test[idx].remove(char)
     return test

a = [['A','B','D'],['A','B','C','D']]
print(project(a, 'C'))


Output:
A D A C
[['B', 'D'], ['B', 'D']]
</code></pre>
<p>Somehow the code never checks for 'B' although it is in the list. The same code without the if condition + remove line (line 5-6) does the following:</p>
<pre><code>Output:
A B D A B C D
['A', 'B', 'D'], ['A', 'B', 'C', 'D']]
</code></pre>
<p>Why does the printed character change although I do not change the iterated list?</p>
</div>
<div class="post-text" itemprop="text">
<p>After debugging:</p>
<p>The issue is not because of your if statement, It is because remove change the index.</p>
<p>Let mt demonstrate that:</p>
<ul>
<li><p>after first iterate with removing A the list will be:</p>
<pre><code>["B", "D"]
</code></pre></li>
</ul>
<p>And your index will be 1, because of that <code>"B"</code> will be ignored.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your issue has to do with your copying of the list <code>database</code>. </p>
<p>Per the <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">python.org docs</a>:</p>
<blockquote>
<p>A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.</p>
<p>A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.</p>
</blockquote>
<p>If you deep copy <code>copy.deepcopy(x)</code> your list, then you will get a separate object that is not a reference of the other, but rather, a full copy.</p>
</div>
<div class="post-text" itemprop="text">
<p>As it has been already mentioned in the other answers, your code has two issues: one with shallow copying and the other with modifying the list that is being iterated. However, you do not even need all this complexity. In your case, it is cheaper to retain the "good" items than to remove the "bad" items:</p>
<pre><code>def project(database, i):
    return [[item for item in lst if item &gt;= i] for lst in database]

print(project(a, 'C'))
# [['D'], ['C', 'D']]
</code></pre>
<p>By the way, the condition <code>char &lt;= i</code> removes the items that are smaller than <em>or equal to</em> <code>i</code>, not just smaller than <code>i</code>.</p>
</div>
<span class="comment-copy"><code>test</code> is <i>not</i> a copy of the <code>database</code>. Well, it is - but it is a shallow copy. It contains references to the original inner lists. You need a deep copy.</span>
<span class="comment-copy">I was afraid that changing the matrix that I am iterating through maybe explains the weird behaviour. I just checked the code without all copies, it does the same.</span>
<span class="comment-copy">Please read the answers, at least one of them explains how to make a deep copy.</span>
<span class="comment-copy">Deep copy fixed this how?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/33344413/why-is-my-for-loop-skipping-an-element-in-my-list">Why is my for loop skipping an element in my list?</a></span>
<span class="comment-copy">Also see <a href="https://stackoverflow.com/questions/243836/how-to-copy-all-properties-of-an-object-to-another-object-in-python">This question</a></span>
