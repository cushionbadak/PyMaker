<div class="post-text" itemprop="text">
<p>So the title might not make sense. But here is the code:</p>
<pre><code>def play_game(ml_string, blanks, selectedLevel):


replaced = []
ml_string = ml_string.split()
currentQuestion = 0


for blank in ml_string:
    replacement = blank_in_quiz(blank, blanks,)
    if replacement != None:
        user_input = raw_input("Type in the answer for blank " + replacement + " ")
        while user_input != allanswers[selectedLevel][currentQuestion]:
            print "Incorrect!"
            user_input = raw_input("Type in the answer for blank " + replacement + " ")
        else:
            blank = blank.replace(replacement, user_input)
            replaced.append(blank)
            print "\nCorrect!\n"
            print " ".join(replaced + [currentQuestion,ml_string])
            currentQuestion = currentQuestion + 1
    else:
        replaced.append(blank)
replaced = " ".join(replaced)
print replaced
</code></pre>
<p>Essentially what this does is take this string, which is ml_string:</p>
<pre><code>"The movie __1__ is a war movie directed by __2__ Nolan about the __3__ and French armies stranded on the __4__ of Dunkirk while the __5__ army closed in on them."
</code></pre>
<p>And once the user adds the correct answer to the blank, I am trying to print out the answer filled in the blank, as well as the rest of the quiz with the blanks they haven't answered yet.</p>
<p>I am a beginner at python, but I've always struggled with lists and index values. If you would like to view the entirety: <a href="https://repl.it/KTJh/16" rel="nofollow noreferrer">https://repl.it/KTJh/16</a></p>
<p>Line 55 is what I'm having trouble with. Thanks for any kind of advice.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting</a> to create your string with <em>placeholders</em> (replacement_field) that get filled in with some predefined variables, as the users answers you just change the variables.  The format specification allows named placeholders</p>
<pre><code>s = "The movie {ans1} is a war movie directed by {ans2} Nolan about the {ans3} and French armies stranded on the {ans4} of Dunkirk while the {ans5} army closed in on them."
</code></pre>
<p>Which makes it convenient to fill in the placeholders with a dictionary</p>
<pre><code>d = {'ans1' : '__1__', 'ans2' : '__2__',
     'ans3' : '__3__', 'ans4' : '__4__',
     'ans5' : '__5__'}
</code></pre>
<p>You use it like this:</p>
<pre><code>&gt;&gt;&gt; s.format(**d)
'The movie __1__ is a war movie directed by __2__ Nolan about the __3__ and French armies stranded on the __4__ of Dunkirk while the __5__ army closed in on them.'
</code></pre>
<p>Change the answers like this</p>
<pre><code>&gt;&gt;&gt; d['ans1'] = 'Ziegfield Follies'
&gt;&gt;&gt; s.format(**d)
'The movie Ziegfield Follies is a war movie directed by __2__ Nolan about the __3__ and French armies stranded on the __4__ of Dunkirk while the __5__ army closed in on them.'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are using the latest Python to learn (3.6), your could use f-strings.  The items in curly braces can be most Python expressions.  In this case, they index a word list:</p>
<pre><code>import textwrap

def paragraph(words):
    s = f'The movie {words[0]} is a war movie directed by {words[1]} Nolan about the {words[2]} and French armies stranded on the {words[3]} of Dunkirk while the {words[4]} army closed in on them.'
    print()
    print(textwrap.fill(s))

words = '__1__ __2__ __3__ __4__ __5__'.split()
paragraph(words)
words[0] = 'Dunkirk'
paragraph(words)
</code></pre>
<p>Output:</p>
<pre><code>The movie __1__ is a war movie directed by __2__ Nolan about the __3__
and French armies stranded on the __4__ of Dunkirk while the __5__
army closed in on them.

The movie Dunkirk is a war movie directed by __2__ Nolan about the
__3__ and French armies stranded on the __4__ of Dunkirk while the
__5__ army closed in on them.
</code></pre>
</div>
<span class="comment-copy">A regex would probably work, but you're kind of doing this is an overly complicated fashion. I'd probably store the complete strings separately, then add in the "underscore fillers" only when you want it to print out. I can see that being much easier than trying to replace bits of an existing string.</span>
<span class="comment-copy">@Carcigenicate that's interesting. I'll try to implement that</span>
<span class="comment-copy">That way, once the user gets an answer right, you can just replace the filler with the right answer. I'd try to elaborate, but I just got off of a night shift and feel brain dead. Good luck.</span>
<span class="comment-copy">If Python has an "interleave" function for lists, you could just <code>interleave</code> the complete strings and the fillers/answers, then <code>join</code> the separate strings using an empty string. Then just replace the entire in the filler/answer list as the user answers them right.</span>
<span class="comment-copy">@Carcigenicate thanks for your help, I really appreciate it. You helped me out on my last problem too.</span>
<span class="comment-copy">Oh, that's a neat idea too. Probably more Pythonic than my suggestion.</span>
<span class="comment-copy">That's really interesting. I haven't learned or even seen any examples of dictionaries in python yet. It looks more efficient than basics lists, like I'm trying to do. Thank you for your answer</span>
<span class="comment-copy">@Carcigenicate I read your comment while writing this and the ideas are basically the same I almost gave you a mention.</span>
<span class="comment-copy">@louielouielouie - you should take the time to work through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">The Tutorial</a> , you will have a better idea of the tools Python offers to help you solve your problems.</span>
<span class="comment-copy">@wwii My Python is rusty, but this looks like string replacement, whereas I was suggesting interleaving the fillers with the strings. Should have identical results though.</span>
