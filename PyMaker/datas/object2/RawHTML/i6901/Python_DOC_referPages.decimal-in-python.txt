<div class="post-text" itemprop="text">
<p>I am using Python for programming and then Gurobi for solving my optimization problems. As a part of my codes I read the data from a text file (called “Feed2”), then do some calculations on it.</p>
<pre><code>with open('Feed2.txt', 'r') as Fee:

    for i in range(C):
        Feed= Fee.readline()
        for s in L11:
            A[i,s]=float(Feed)
        for s in L12:
            A[i,s] =float(Feed)*1.28
        for s in L13:
            A[i,s] =float(Feed)*0.95

print A
</code></pre>
<p>The result shows some of the numbers have many digits after the decimal (such as 106.51209999999999 or 1029.4144000000001) which crates problem for Gurobi for reading all those which are not really useful digits to me. So, I want to set the number of digits after the decimal to 5 for my entire program, I followed the method explained in <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">https://docs.python.org/3/library/decimal.html</a> (codes are below); but nothing is changed. </p>
<pre><code>from decimal import *

getcontext().prec = 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The documentation for the <a href="https://docs.python.org/3/library/decimal.html#module-decimal" rel="nofollow noreferrer">decimal module</a> offers an explanation:</p>
<blockquote>
<p><strong>Unlike hardware based binary floating point, the decimal module has a user alterable precision</strong> (defaulting to 28 places) which can be as large as needed for a given problem.</p>
</blockquote>
<p>When you did:</p>
<pre><code>from decimal import *
getcontext().prec = 5
</code></pre>
<p><strong><em>You only changed to precision used with <a href="https://docs.python.org/3/library/decimal.html#decimal-objects" rel="nofollow noreferrer"><code>Decimal</code></a> objects from the decimal module</em></strong>. You didn't change the precision amount for Python's built-in floating point numbers.</p>
<p>As said in the comments, the behavior you are experiencing is not new. It's simply an side-effect of the way floating point numbers being stored in memory. If you really need the floats to stay a specific precision, use the <code>decimal.Decimal</code> class. e.g.:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal.from_float(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
&gt;&gt;&gt; Decimal('0.1')
Decimal('0.1')
&gt;&gt;&gt; Decimal('0.1') / Decimal('0.5')
Decimal('0.2')
</code></pre>
<p>If you simply need to round the decimal to a specif precision to display properly, use <code>str.format</code> in the format:</p>
<pre><code>'{:&lt;number of digits before decimal&gt;.&lt;number of digits after decimal &gt;f}'.format(float)
</code></pre>
<p>Or with old style formatting:</p>
<pre><code>'%&lt;number of digits before decimal&gt;.&lt;number of digits after decimal &gt;f' % (float)
</code></pre>
<hr/>
<p>Recommended reading: <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer"><em>What Every Computer Scientist Should Know About Floating-Point Arithmetic</em></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just need to print the numbers with, for example, only two decimals:</p>
<pre><code>print "%.2f" % (A,)
</code></pre>
<p>or the newer</p>
<pre><code>print "{0:.2f}".format(A)
</code></pre>
</div>
<span class="comment-copy">I think the settings in <code>decimal</code> only affect numbers created with that package, not regular <code>float</code> numbers. Also, this is just an artefact from how floating point numbers are represented in memory. Is this really a problem?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1995615/how-can-i-format-a-decimal-to-always-show-2-decimal-places">How can I format a decimal to always show 2 decimal places?</a></span>
<span class="comment-copy">Thanks,; the problem is with Gurobi while reading these numbers to solve the optimization problem. This increases the time of computation which is approximated more than a day and precision, meaning reaching the optimal solution with zero gap.</span>
