<div class="post-text" itemprop="text">
<p>I compare ranges as follows:</p>
<pre><code>def get_intersections(ranges):
    """Marks ranges if they intersect with other ranges with True.
    """
    intersection_idxs = len(ranges) * [False]
    for idx in range(len(ranges)):
        r, rest = set(ranges[idx]), [set(_) for _ in ranges[:idx] + ranges[idx+1:]]
        # Uncomment to understand.
        # print(r)
        # print(rest)
        if any([len(set.intersection(r, r2)) &gt; 0 for r2 in rest]):
            intersection_idxs[idx] = True
    return intersection_idxs

# Example 1.
ran1 = range(4,9)
ran2 = range(2,5)
ran3 = range(2,3)
ranges = [ran1, ran2, ran3]
print(get_intersections(ranges))

# Example 2.
ran1 = range(1,5)
ran2 = range(2,5)
ran3 = range(7,9)
ranges = [ran1, ran2, ran3]
print(get_intersections(ranges))

# Example 3.
#ran1 = range(1,inf)
#ran2 = range(2,5)
#ran3 = range(7,9)
#ranges = [ran1, ran2, ran3]
#print(get_intersections(ranges))
#&gt;&gt; [True, True, True]
</code></pre>
<p>As you can see, the first 2 examples work quite well. Since all ranges intersect in the first example, the get_intersections function returns [True, True, True].</p>
<p>In the second example, the last range (range(7,9)) does not intersect with other ranges. Therefore [True, True, False] is returned.</p>
<p>I'd like to realize example 3 (see pseudocode). In this case, the first range goes from 1 to infinity which means that it intersects with the other ranges. The other ranges therefore automatically intersect as well. Right now I see no way how to do this. Is there any way to use open ranges or ranges to infinity in a similar way?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know why you use <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range</a>.</p>
<p>You could use tuples with lower and upper bound <code>(a,b)</code>.</p>
<p>When you need inf you can use <a href="https://docs.python.org/3/library/math.html?highlight=math%20inf#math.inf" rel="nofollow noreferrer">math.inf</a> which is greater than any real number.</p>
<p>So <code>(a,b)</code> interesect with <code>(c,d)</code> if <code>c&lt;b and a&lt;d</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You got it right Frane. This was a design flaw. Here is my code now:</p>
<pre><code>def get_intersections(lis):
    """Marks ranges if they intersect with other ranges with True.
    """
    intersection_idxs = len(ranges) * [False]
    for idx in range(len(lis)):
        r, rest = lis[idx], ranges[:idx] + ranges[idx+1:]
        # Uncomment to understand.
        # print(r)
        # print(rest)
        if any([r2[0] &lt;= r[1] and r[0] &lt;= r2[1] for r2 in rest]):
            intersection_idxs[idx] = True
    return intersection_idxs

# Example 1.
ranges = [(4,9), (2,5), (2,3)]
assert(get_intersections(ranges) == 3 * [True])
# Example 2.
ranges = [(1,5), (2,5), (7,9)]
assert(get_intersections(ranges) == [True, True, False])
# Example 3.
ranges = [(1,float('inf')), (2,5), (7,9)]
assert(get_intersections(ranges) == [True, True, True])
# Example 4.
ranges = [(1,2), (4,float('inf')), (7,9)]
assert(get_intersections(ranges) == [False, True, True])
</code></pre>
</div>
<span class="comment-copy">Since i don't know what the application is behind, I'm not sure my answer is gonna help. Why not define inf as an important number ? For instance, import sys then use inf = sys.maxsize. On my computer, this is the number : 9223372036854775807.</span>
<span class="comment-copy">@Mathieu running <code>set</code> even on that (or any significant range) to compare things is going to blow pretty much most machines up :)</span>
<span class="comment-copy">Hmm right, poor computer. You could check if you have inf as a boundary. If this is the case, you search the higher real boudary (in the example 9), and simply set inf as 9 + 1. But that's just to keep the code like it is now, Frane solution is better.</span>
<span class="comment-copy">Thanks for the responses so far. I try to implement and post a minimal working example based on Frane's answer.</span>
<span class="comment-copy">Thank you this was helpful!</span>
<span class="comment-copy">Just to note you'll also be able to use <code>float('-inf')</code> for a lower bound in this case as well...</span>
<span class="comment-copy">Thank you I do!</span>
