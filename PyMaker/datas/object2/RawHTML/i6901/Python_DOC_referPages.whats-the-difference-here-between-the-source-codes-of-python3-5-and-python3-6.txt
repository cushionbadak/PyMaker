<div class="post-text" itemprop="text">
<pre><code> testing on ../../test/test_patm.py
python: Python/compile.c:4420: int assemble_lnotab(struct assembler *, 
struct instr *): Assertion `d_lineno &gt;= 0' failed.
Aborted
</code></pre>
<p>When running my test programs I got an error as given above.
Finally I found it was just quite few differences between the source codes of Python3.5 and Python3.6.
Just one line:</p>
<p>Python3.5</p>
<pre><code>static int
assemble_lnotab(struct assembler *a, struct instr *i)
{
  int d_bytecode, d_lineno;
  Py_ssize_t len;
  unsigned char *lnotab;

  d_bytecode = a-&gt;a_offset - a-&gt;a_lineno_off;
  d_lineno = i-&gt;i_lineno - a-&gt;a_lineno;

  assert(d_bytecode &gt;= 0);
  assert(d_lineno &gt;= 0);   // the only difference

  if(d_bytecode == 0 &amp;&amp; d_lineno == 0)
      return 1;
  ...
</code></pre>
<p>Python 3.6</p>
<pre><code>static int
assemble_lnotab(struct assembler *a, struct instr *i)
{
    int d_bytecode, d_lineno;
    Py_ssize_t len;
    unsigned char *lnotab;

    d_bytecode = (a-&gt;a_offset - a-&gt;a_lineno_off) * sizeof(_Py_CODEUNIT);
    d_lineno = i-&gt;i_lineno - a-&gt;a_lineno;

    assert(d_bytecode &gt;= 0);

    if(d_bytecode == 0 &amp;&amp; d_lineno == 0)
        return 1;
</code></pre>
<p>What if I just deleted <code>assert(d_lineno &gt;= 0);</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're using a <em>debug</em> build of 3.5. In Python 3.5 and <em>any</em> previous version, the line numbering within a single bytecode block (i.e. the bytecode of a module, or a function) had to be <em>monotonic</em>, that is each opcode had to map to a line in source code whose linenumber must be <em>greater than or equal to</em> the line number of the <em>previous</em> opcode.  This was ever checked in debug builds; in release builds of Python the <code>assert</code> would not be compiled in, but the generated line number tab would have been invalid anyway. </p>
<p>This was discussed in <a href="https://bugs.python.org/issue26107" rel="nofollow noreferrer">Issue 26107</a> on <a href="http://bugs.python.org" rel="nofollow noreferrer">bugs.python.org</a>. The requirement of monotonicity of line numbers was seen detrimental to optimizations, many of which would reorganize the generated bytecode around. Thus the check was removed in 3.6 <em>along with other changes</em> that make the line number delta be a signed integer. </p>
<p><strong>You can comment out <em>this</em> assert pretty safely, as release builds would have eliminated it anyhow, but don't expect debugging to work correctly in the generated code as the line number tab is now invalid.</strong></p>
<p>As an alternative, if you're reorganizing lines in the AST, or something similar, you can set <em>all</em> line numbers to 0 - not just the missing ones; or you can generate fake line numbers that don't break the monotonicity rule.</p>
<hr/>
<p>A coincidental problem occurred with generated ASTs, as the  <a href="https://docs.python.org/3/library/ast.html#ast.fix_missing_locations" rel="nofollow noreferrer"><code>ast.fix_missing_locations</code></a> would write the line number of <em>0</em> to any nodes that lacked line numbering. If parts of the AST contain line numbers because they originated from <code>ast.parse</code>, it will be likely that the resulting AST tree would break the monotonicity requirement - which again would only lead to problems on non-release builds of Pythons &lt; 3.6.</p>
<hr/>
<p>The other change, that is not relevant to the bug here, is the change from bytecode to <em>wordcode</em>, which also was introduced in Python 3.6. Here each opcode would be a 16-bit word instead of a 8-bit byte with possible extended args. That's the reason for the offset being multiplied by <code>sizeof(_Py_CODEUNIT);</code>.</p>
</div>
<span class="comment-copy">I see another difference, <code>d_bytecode</code> is multiplied by <code>sizeof(_Py_CODEUNIT)</code>.</span>
<span class="comment-copy">@MartijnPieters This is the definition of it.  <code>typedef uint16_t _Py_CODEUNIT;</code></span>
<span class="comment-copy">So what is your code, why does it trigger the assertion error? I'd not remove an assertion from Python code, no, it indicates you have a bug <i>elsewhere</i>.</span>
<span class="comment-copy">have you tested your program on 3.6 ?</span>
<span class="comment-copy">@MartijnPieters Why my codes resulted this question is that I didn't change the <code>lineno</code> of the ast, it might seem to be incorrect, but it do not lead to any error in Python3.6!</span>
