<div class="post-text" itemprop="text">
<p>Getting back into Python after a 2 year hiatus. Don't remember the best way to loop through a string from the beginning and stopping at a certain character, then returning the string. </p>
<pre><code>def my_string(long_string, char):

    newstr = " "
    for i in range(len(long_string)):
       if long_string[i] == char:
           # now what?
</code></pre>
<p>I know I need to create a new string, then start a loop to go through the existing string. But then I get stuck. I know I need to return the new string, but am not sure what the rest of my code should look like. Thanks in advance for your help. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to get the substring from the beginning of the long string until a certain char, you can just do the following:</p>
<pre><code>&gt;&gt;&gt; ch = 'r'
&gt;&gt;&gt; s = 'Hello, world!'
&gt;&gt;&gt; print(s[:s.find(ch)])
#  Hello, wo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>try:
    print d[:d.index('y')]
except ValueError:
    print d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a string slice to grab the portion of the string you want. From your description it sounds like you want all characters up to the first occurrence of that character correct?</p>
<p>Try this for example. Tweak the indices to get the portion of the string you want.</p>
<p><code>long_string[0:i]</code></p>
<p>The answers that include the use of .index() will not work well if the target character doesn't exist in the string without catching the exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a list containing each char in the string and loop through the list. </p>
<pre><code>mystr = raw_input("Input: ")
newStr = list(mystr)

print(newStr)
</code></pre>
<p>Then you can just loop through the list to meet your conditions</p>
</div>
<div class="post-text" itemprop="text">
<p>If the stop character is definitely in the string you can use <code>.index()</code> which will find the index of the first occurrence of the thing in brackets and slicing <code>[]</code></p>
<pre><code>string = "hello op"
stopchar = " "

newstr = string[:string.index(stopchar)]

#newstr = "hello"
</code></pre>
<p>If you're not sure if the stop character is in the string you should use <code>.find()</code> which will not raise an error if it does not find the character:</p>
<pre><code>newstr = string[:string.find(stopchar)]
</code></pre>
<p>If you don't want to stop at the first character and want to get all words before the stop character you could use this list comprehension:</p>
<pre><code>string2 = "hello op today"
strings = [string2[:i] for i,c in enumerate(string2)
           if c == stopchar]
print (strings)
</code></pre>
<p>result:</p>
<pre><code>['hello', 'hello op']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think <code>split</code> works better than <code>index</code> (returns error if character not found) or <code>find</code> (returns -1 if character isn't found). </p>
<pre><code>&gt;&gt;&gt; s,c='Who fwamed wodgew wabit?','w'
&gt;&gt;&gt; s.split(c)[0]
'Who f'
&gt;&gt;&gt; c='r'
&gt;&gt;&gt; s.split(c)[0]
'Who fwamed wodgew wabit?' 
</code></pre>
<p>Explanation: <code>split</code> <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">returns a list of the words in the string, using sep as the delimiter string</a>. By returning the first item, this works exactly as specified. </p>
</div>
<span class="comment-copy">is that <i>certain character</i> guaranteed in the string? Do you want to include the certain character in the new string or stop just before it?</span>
<span class="comment-copy">This doesn't work for the case where ch is not in s: <code>c,s='r','Who fwamed wodgew wabit?'; s[:s.find(c)]</code> gives: <code>'Who fwamed wodgew wabit'</code> (note the missing questionmark)...</span>
<span class="comment-copy">you probably want to return the entire string in that case. And writing <code>except ValueError</code> would be a tiny bit better</span>
<span class="comment-copy">Thanks,edited it.</span>
<span class="comment-copy">You can index just find on strings in python there is no need to convert it to a list first.</span>
