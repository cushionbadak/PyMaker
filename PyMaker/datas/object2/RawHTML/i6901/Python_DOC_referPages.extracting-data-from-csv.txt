<div class="post-text" itemprop="text">
<p>I have a csv file with each row containing lists of adjectives.</p>
<p>For example, the first 2 rows are as follows:</p>
<pre><code>["happy","sad","colorful"]
["horrible","sad","cheerful","happy"]
</code></pre>
<p>I want to extract all the data from this file to get a list containing each adjective only one.
(Here, it would be a list as follows : </p>
<pre><code>["happy","sad","colorful","horrible","cheerful"]
</code></pre>
<p>I am doing this using Python.</p>
<pre><code>import csv
with open('adj.csv', 'rb') as f: 
    reader = csv.reader(f) 
    adj_list = list(reader) 
    filtered_list = [] 
    for l in adj_list: 
        if l not in new_list: 
            filtered_list.append(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Supposing that "memory is not important" and that one liner is what you are looking for:</p>
<pre><code>from itertools import chain
from csv import reader

print(list(set(chain(*reader(open('file.csv'))))))
</code></pre>
<p>having 'file.csv' content like this:</p>
<pre><code>happy, sad, colorful
horrible, sad, cheerful, happy
</code></pre>
<p><strong>OUTPUT:</strong></p>
<p>['horrible', ' colorful', ' sad', ' cheerful', ' happy', 'happy']</p>
<p>You can remove the <code>list()</code> part if you don't mind receive a <em>Python set</em> instead of a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are only interested in a list of unique words where <em>order does not matter</em>:</p>
<pre><code># Option A1
import csv


with open("adj.csv", "r") as f:
    seen = set()
    reader = csv.reader(f)
    for line in reader:
        for word in line:
            seen.add(word)
list(seen)
# ['cheerful', 'colorful', 'horrible', 'happy', 'sad']
</code></pre>
<p>More concisely:</p>
<pre><code># Option A2
with open("adj.csv", "r") as f:
    reader = csv.reader(f)
    unique_words = {word for line in reader for word in line}

list(unique_words)
</code></pre>
<p>The <code>with</code> statement safely opens and closes the file.  We are simply adding every word to a set.  We cast the filtered result to <code>list()</code> and get a list of unique (unordered) words.</p>
<hr/>
<p><strong>Alternatives</strong></p>
<p>If <em>ordered does matter</em>, implement the <code>unique_everseen</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipe</a>.</p>
<p>From itertools recipes:</p>
<pre><code>def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in it.filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
</code></pre>
<p>You can manually implement this or install a third-library that implements it for you, such as <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.unique_everseen" rel="nofollow noreferrer"><code>more_itertools</code></a>, e.g. <code>pip install more_itertools</code></p>
<pre><code># Option B
import csv

import more_itertools as mit


with open("adj.csv", "r") as f:
    reader = csv.reader(f)
    words = (word for line in reader for word in line)
    unique_words = list(mit.unique_everseen(words))

unique_words
# ['happy', 'sad', 'colorful', 'horrible', 'cheerful']
</code></pre>
</div>
<span class="comment-copy">Does this csv literally have brackets in it?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1319338/combining-two-lists-and-removing-duplicates-without-removing-duplicates-in-orig">Combining two lists and removing duplicates, without removing duplicates in original list</a></span>
<span class="comment-copy">Should i use pandas or csv module?</span>
<span class="comment-copy">Does it matter?</span>
<span class="comment-copy">import csv with open('adj.csv', 'rb') as f:     reader = csv.reader(f)     adj_list = list(reader)      filtered_list = [] for l in adj_list:     if l not in new_list:         filtered_list.append(l)</span>
<span class="comment-copy">This too gives a set of lists. I want just a single list with no word repetition.</span>
<span class="comment-copy">@Newbie No set of list, just a set without any string repeat. If want a list and not a set, just add list(). I will edit to clarify.</span>
