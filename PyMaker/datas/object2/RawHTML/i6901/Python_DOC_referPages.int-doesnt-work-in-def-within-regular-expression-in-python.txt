<div class="post-text" itemprop="text">
<p>I need to write function which takes a count and a string and return a list of all of the words in the string that are count word characters long or longer.</p>
<p>My function is:</p>
<pre><code>import re

def find_words(count, a_str):
    count = int(count)
    return re.findall(r'\w{},'.format(int(count)), a_str)
</code></pre>
<p>But it doesn't work, it is return empty list:</p>
<p>Example: </p>
<pre><code>find_words(4, "dog, cat, baby, balloon, me")
</code></pre>
<p>Should return:</p>
<pre><code>['baby', 'balloon']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The regex isn't correct. The <code>{}</code> is interpreted as placeholder for <code>format</code>, but you want it to be the regexs' <code>{}</code> which specifies the number of repeats. You need to use <code>r'\w{{{}}}'</code> here. Observe the difference:</p>
<pre><code>&gt;&gt;&gt; r'\w{},'.format(4)
'\\w4,'

&gt;&gt;&gt; r'\w{{{},}}'.format(4)
'\\w{4,}'
</code></pre>
<p>And then it works correctly:</p>
<pre><code>import re
def find_words(count, a_str):
    count = int(count)
    return re.findall(r'\w{{{},}}'.format(count), a_str)

&gt;&gt;&gt; find_words(4, "dog, cat, baby, balloon, me") 
['baby', 'balloon']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why RegExp?</p>
<pre><code>&gt;&gt;&gt; string = "dog, cat, baby, balloon, me"
&gt;&gt;&gt; [word for word in string.split(', ') if len(word) &gt;= 4]
['baby', 'balloon']
</code></pre>
<p>So function could be something like follow:</p>
<pre><code>&gt;&gt;&gt; def find_words(count, a_str):
...     return [word for word in a_str.split(', ') if len(word) &gt;= count]
...
&gt;&gt;&gt; find_words(4, 'dog, cat, baby, balloon, me')
['baby', 'balloon']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>def find_words(count, a_str):
   s = [re.findall("\w{"+str(count)+",}", i) for i in ["dog, cat, baby, balloon, me"]]
   return s[0]

print(find_words(4, ["dog, cat, baby, balloon, me"]))
</code></pre>
<p>Output:</p>
<pre><code>['baby', 'balloon']
</code></pre>
</div>
<span class="comment-copy">Thanks, but why it is needed {{{}}} instead of just {{}}?</span>
<span class="comment-copy">@Dmitriy_kzn The docs say "If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>." <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">"Format String Syntax"</a> And you want to keep one brace character in the literal text for the regex but you also want to insert the <code>count</code>. So <code>{{</code> so it keeps the <code>{</code> and one <code>{</code> for the formatting.</span>
<span class="comment-copy">This is better than the regex version if you input a silly but valid count, like 0 or -1</span>
