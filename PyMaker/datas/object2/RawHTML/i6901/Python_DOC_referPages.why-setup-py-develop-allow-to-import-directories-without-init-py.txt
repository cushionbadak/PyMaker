<div class="post-text" itemprop="text">
<p>I'm working on simple project looking like this:</p>
<pre><code>\setup.py
\abcd
\abcd\__init__.py
\abcd\history\docs.py
</code></pre>
<p>When I run <code>setup.py develop</code>, against my venv, <code>import abcd.history</code> works. when I run <code>setup.py install</code>, against my venv, <code>import abcd.history</code> returns me an exception:</p>
<pre><code>ImportError: No module named 'abcd.history'
</code></pre>
<p>Why? Python version is 3.5.1</p>
</div>
<div class="post-text" itemprop="text">
<p><code>setup.py develop</code> installs your package as <a href="http://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode" rel="nofollow noreferrer">sort of a pseudo-symlink</a> to your development directory, so stuff like <code>\abcd\history\</code> is visible there. <code>import abcd.history</code> then imports the folder as an <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow noreferrer">implicit namespace package</a>, a feature introduced in Python 3.3. Implicit namespace packages don't require <code>__init__.py</code>.</p>
<p><code>setup.py install</code> doesn't create the pseudo-symlink. It only installs what it's configured to install, and apparently, it wasn't configured to install <code>abcd.history</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>$ ls -R1
sub
test-sub.py

./sub:
__init__.py
module

./sub/module:
testxxx.py

$ cat test-sub.py 
#! /usr/bin/env python
import sub.module

$ python3.5 test-sub.py 
$ python3.4 test-sub.py 
$ python2.7 test-sub.py 
Traceback (most recent call last):
  File "test-sub.py", line 3, in &lt;module&gt;
    import sub.module
ImportError: No module named module
</code></pre>
<p>Resume: Python 3 can import a submodule without <code>__init__.py</code> (only the top-level directory of a module requires <code>__init__.py</code>), Python 2 cannot. Try to find out where Python 2 has creeped and crippled your installation.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path.</p>
</blockquote>
<p>There must be something about the fact that <code>setup.py develop</code> just points your interpreter to the local directory that allows for the import of <code>abcd.history</code> that fails when you try to actually <code>install</code> it into an environment.</p>
</div>
<span class="comment-copy"><code>setup.py install</code> indeed does not copy <code>abcd\history</code> directory into venv. Egg file inside venv contains only <code>\abcd\__init__.py</code></span>
