<div class="post-text" itemprop="text">
<p>This is what I have at the moment:</p>
<pre><code>import bs4
import requests

def getXkcdComic(comicUrl):
    for i in range(0,20):
        res = requests.get(comicUrl + str(1882 - i))
        res.raise_for_status()

        soup = bs4.BeautifulSoup(res.text, 'html.parser')
        img = soup.select_one("div#comic &gt; img")
        return str(img['src'])


link = getXkcdComic('https://xkcd.com/')

print(link)
</code></pre>
<p>I parses the html, gets one link, the first one, and since I know the url finishes at 1882 and the next I want is 1881, I wrote this <code>for-loop</code> to get the rest.
It only prints one result as if there was not loop written.
Strangely, if I reduce the indentation for the <code>return</code> function it returns a different url.</p>
<p>I didn't quite get how <code>For-loops</code> works yet. 
Also, this is my first post ever here so forgive my english and ignorance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first time you hit a <code>return</code> statement, the function is going to return, regardless of whether you're in a loop. So your <code>for()</code> loop is going to get to the end of the first iteration, see the <code>return</code>, and that's it. The other 19 iterations won't run.</p>
<p>The reason you get a different URL if you dedent the <code>return</code> is that your <code>for()</code> loop can now run to completion. But since you didn't save any of your previous iterations, it will return only the last one.</p>
<p>What it looks like you might want is to build a list of results, and return that.</p>
<pre><code>def getXkcdComic(comicUrl):
    images = []                           # Create an empty list for results
    for i in range(0,20):
        res = requests.get(comicUrl + str(1882 - i))
        res.raise_for_status()
        soup = bs4.BeautifulSoup(res.text, 'html.parser')
        img = soup.select_one("div#comic &gt; img")
        images.append(str(img['src']))    # Save the result by adding it to the list
    return images                         # Return the list
</code></pre>
<p>Just remember then that <code>link</code> in your outer scope will actually be a <em>list</em> of links, and handle it accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p>How do you expect to get multiple outputs (url here) with a single method call? The for loop helps you iterate over a range multiple times and get multiple results, but its of no use until you have a single call. You can do one of the following:</p>
<ul>
<li>Instead of writing a loop inside the method, call the method in a loop. That way your output will be printed for each call.</li>
<li>Write the entire thing in the method so that you have multiple print statements.</li>
</ul>
<p>Do the following:</p>
<pre><code>def getXkcdComic(comicUrl):
    for i in range(0,20):
        res = requests.get(comicUrl + str(1882 - i))
        res.raise_for_status()
        soup = bs4.BeautifulSoup(res.text, 'html.parser')
        img = soup.select_one("div#comic &gt; img")
        print str(img['src'])
getXkcdComic('https://xkcd.com/')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your function <em>returns</em> control to the caller once it encounters the <code>return</code> statement, here in the first iteration of the <em>for</em>.</p>
<p>You can <code>yield</code> instead of <code>return</code> in your function to produce image links successively from the function and keep the <em>for</em> loop running:</p>
<pre><code>import bs4
import requests

def getXkcdComic(comicUrl):
    for i in range(0,20):
        ...
        yield img['src']  # &lt;- here

# make a list of links yielded by function
links = list(getXkcdComic('https://xkcd.com/')) 
</code></pre>
<hr/>
<p>References:</p>
<ol>
<li><p><a href="https://stackoverflow.com/questions/1756096/understanding-generators-in-python">Understanding Generators in Python</a></p></li>
<li><p><a href="https://docs.python.org/3/reference/expressions.html#grammar-token-yield_expression" rel="nofollow noreferrer">Python yield expression</a></p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>It happened because you make <code>return</code> in the loop. Try it:</p>
<pre><code>def getXkcdComic(comicUrl):
    res = list()
    for i in range(0,20):
        res = requests.get(comicUrl + str(1882 - i))
        res.raise_for_status()

        soup = bs4.BeautifulSoup(res.text, 'html.parser')
        img = soup.select_one("div#comic &gt; img")
        res.append(str(img['src']))
    return res
</code></pre>
<p>And you can change this:</p>
<pre><code>for i in range(0,20):
            res = requests.get(comicUrl + str(1882 - i))
</code></pre>
<p>on this:</p>
<pre><code>for i in range(1862, 1883, 1):
            res = requests.get(comicUrl + str(i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are good and general, but for this specific case there's an even better way. xkcd provides a JSON API, so you can use a list comprehension:</p>
<pre><code>def getXkcdComic(comicUrl):
    return [requests.get(comicUrl + str(1882 - i) + '/info.0.json').json()['img']
            for i in range(0,20)]
</code></pre>
<p>This is also faster and more friendly to the xkcd servers.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you call 'return' during the first loop the entire 'getXkcdComic' function exits and returns.</p>
<p>Something like this may work and print like the original code intended:</p>
<pre><code>import bs4
import requests

def getXkcdComic(comicUrl, number):
    res = requests.get(comicUrl + str(number))
    res.raise_for_status()

    soup = bs4.BeautifulSoup(res.text, 'html.parser')
    return str(soup.select_one("div#comic &gt; img")['src'])

link = 'https://xkcd.com/'
for i in range(20):
    print(getXkcdComic(link, 1882-i))
</code></pre>
</div>
<span class="comment-copy">Perfect. I was really thinking I should put them in a list but I couldn't recall how (this is my second week on python). Thanks a lot!  I used <code>pprint.pprint (link[0:20])</code> and it worked.</span>
<span class="comment-copy">This is what I was trying and it works perfectly. Thanks a lot!</span>
<span class="comment-copy">This works perfectly too! So cool to see so many ways to get the same result.  Thanks a lot!</span>
<span class="comment-copy">I was indeed wondering about their servers. It takes a few seconds to run the code.  I know absolutely nothing about JSON API, but it seems interesting! Thanks for the answer.  Edit: How do I print the result in this case?</span>
<span class="comment-copy">Got it!  <code>print(getXkcdComic('https://xkcd.com/'))</code>  Thanks again.</span>
<span class="comment-copy">This didn't seem to work. But I don't know why. Thanks anyway =)</span>
<span class="comment-copy">I've edited to fix the missing parentheses and the link value.</span>
