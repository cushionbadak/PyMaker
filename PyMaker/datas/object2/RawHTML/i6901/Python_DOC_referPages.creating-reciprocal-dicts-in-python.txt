<div class="post-text" itemprop="text">
<p>I have a common requirement to look up a code from value, and also a value from a code. For example, I have a dict of colours that enables me to derive  a code for the colour. On the other hand I may have a code and wish to derive the colour. I solve this by creating what I call reciprocal dicts.</p>
<pre><code>colour_list = [["red", "0"], ["green", "1"], ["blue", "2"]]
colours = {}
codes = {}
for colour in colour_list:
    colours[colour[0]] = colour[1]
    codes[colour[1]] = colour[0]

print colours
print codes
</code></pre>
<p>If I know a code I can look up the <strong>colour</strong> in <em>codes</em> and if I know a colour I can look up the <strong>code</strong> in <em>colours</em>.</p>
<p>Is this the best data structure to tackle this problem? Is there a more pythonic way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use an <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer"><code>Enum</code></a> instead:</p>
<pre><code>from enum import Enum

class Colour(Enum):
    red = 0
    green = 1
    blue = 2
</code></pre>
<p>You can then go both ways:</p>
<pre><code># getting the integer value for a name
Colour[name].value 

# getting the name for a value
Colour(value).name
</code></pre>
<p>In code, just use the members directly:</p>
<pre><code>colour = Colour.red
</code></pre>
</div>
<span class="comment-copy">Sounds like you want to use an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a> instead.</span>
<span class="comment-copy">In Clojure, this is called an <i>inverted map</i>. <i>Inverted dictionary</i> may be a Pythonic term. And what if you have duplicate values? What do you want the behavior to be?</span>
<span class="comment-copy">Usually there aren't any key/value clashes in situations like this, so why not just put everything in one dict? The reciprocal items can be added with: <code>d.update(list(zip(d.values(), d.keys())))</code>.</span>
<span class="comment-copy">May or may not need to consider using the <code>unique</code> decorator from the enum package if values are going to be used to access name.</span>
<span class="comment-copy">@OluwafemiSule: duplicate values are interpreted as <i>aliases</i>; <code>EnumClass(value)</code> will give you the first member with that value. Using either <code>EnumClass[first_name]</code> or <code>EnumClass[alias_name]</code> will also give you the first member with the value. See the <a href="https://docs.python.org/3/library/enum.html#duplicating-enum-members-and-values" rel="nofollow noreferrer">section on duplicating members and values</a>.</span>
<span class="comment-copy">@MartijnPieters Thanks. Very elegant. I KNEW there had to be a better way</span>
