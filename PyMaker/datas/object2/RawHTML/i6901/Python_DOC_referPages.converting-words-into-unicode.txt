<div class="post-text" itemprop="text">
<p>Can anyone please explain this block of code to me? I don't really understand. </p>
<ol>
<li><p>Why do I need to declare <code>uniMessage = ""</code> what is the use of it here? Sometimes when I code I realise that I need to declare it beforehand but sometimes I don't need to. </p></li>
<li><p>Why I need to use <code>+=</code> and also convert the user inputted word into <code>str</code>? Isn't <code>+=</code> is like <code>unicode = unicode + str(ord(char))</code>? I don't see the impact of <code>+=</code> here why can't I just use <code>=</code>. And if I thought that the user inputted message is already a string? Why do I need to convert it into <code>str</code> again?</p></li>
<li><p>Also it is not necessary to convert <code>convMessage += chr(int(alphabet))</code> into integer isn't it?</p>
<pre><code>message = input("Enter a word ")

uniMessage = ""
for char in message:
    uniMessage += str(ord(char))
print("Unicode message:", uniMessage)

convMessage = ""
for i in range(0, len(uniMessage)-1, 2):
    alphabet = uniMessage[i] + uniMessage[i+1]
    convMessage += chr(int(alphabet))
print("Orginal message:", convMessage)
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><strong>Important clarification</strong></p>
<p>The code is not a real Unicode encoding/decoding because is supposing that the Unicode characters you will input have just two decimal digits. You can test that yourself if you enter <code>def</code> as input, those characters have 100, 101 and 102 ASCII code.</p>
<p><strong>(1)</strong><code>uniMessage = ""</code> needed because you are using it the first time as a right part of an assignment operator.</p>
<pre><code>uniMessage += str(ord(char))
</code></pre>
<p>is "equivalent" to:</p>
<pre><code>uniMessage = uniMessage + str(ord(char))
</code></pre>
<p>and in Python a variable need to be declared before used and the <code>=</code> operator evaluate the right operant first.</p>
<p><strong>(2)</strong> <code>+=</code> is just syntax sugar, so yes, you can use the <code>=</code>, but some people would say that is less pythonic and "harder" to read ;) I recommend to use <code>+=</code> when you can. You have to convert to string using <code>str</code> because you are before converting user input to a number using <code>ord</code>. <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow noreferrer">ord</a></p>
<p><strong>(3)</strong> Is necessary because <code>uniMessage</code> is a string, a string full of digits characters, but still a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>That code might intend to convert characters into their internal number representation and back to a string. But that code just <strong>fails</strong> for 8-bit coded characters below line feed (typically 0x0A = 10dec) and above "c" (0x63 = 99dec). 
Besides that, in Python every string is a Unicode string with a UTF-8 encoding. Using other encoding is possible (<code>str.encode()</code>), however, will yield "bytes"</p>
</div>
<span class="comment-copy">Why can't i just code <code>uniMessage = str(ord(char))</code> Since it was declared with no value? Shouldn't make any impact isnt it? That <code>uniMessage</code> in <code>uniMessage + str(ord(char))</code> doesnt seems to do anything?</span>
<span class="comment-copy">You could write <code>uniMessage = str(ord(char))</code> for just one character input, but you are processing the user input that could be more than 1 character, that is why you put <code>uniMessage += str(ord(char))</code> inside a <code>for</code> loop. You need to add the code of each character to the "encoded" string, is like an accumulation, like a sum.</span>
