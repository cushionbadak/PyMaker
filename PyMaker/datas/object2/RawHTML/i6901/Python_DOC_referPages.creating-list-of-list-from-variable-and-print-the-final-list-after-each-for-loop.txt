<div class="post-text" itemprop="text">
<p>I have a log file that looks like this:</p>
<pre><code>|Label: - Name:locale - Type:
|Label:Main Menu - Name:menu - Type:
||Label:Broadband - Name:menu - Type:
|||Label:Load and Save Profiles - Name:menu - Type:
||||Label:Load Profile - Name:application - Type:
||||Label:Save Profile - Name:application - Type:
||||Label:Delete Profile - Name:application - Type:
|||Label:Interface - Name:parameter - Type:list
||||Label:xDSL - Name:value - Type:
||||Label:SFP - Name:value - Type:
||||Label:Ethernet - Name:value - Type:
||||Label:SHDSL - Name:value - Type:
|||Label:xDSL Interface - Name:menu - Type:
||||Label:xDSL Mode - Name:parameter - Type:list
|||||Label:Annex A/M - Name:value - Type:
|||||Label:Annex B/J - Name:value - Type:
||||Label:MAC Address - Name:application - Type:
|||||Label:MAC Address - Name:param - Type:string
||||Label:Vectoring Mode - Name:parameter - Type:list
|||||Label:Disabled - Name:value - Type:
|||||Label:Enabled - Name:value - Type:
|||||Label:Friendly - Name:value - Type:
||||Label:G.FAST - Name:parameter - Type:list
|||||Label:Disabled - Name:value - Type:
|||||Label:Enabled - Name:value - Type:
||||Label:Auto Re-Sync - Name:parameter - Type:list
|||||Label:On - Name:value - Type:
|||||Label:Off - Name:value - Type:
</code></pre>
<p>I want to write a python code that will read the txt file and create a list of lists and print the list file after each for loop.</p>
<p>This is the code I have written:</p>
<pre><code>dict = {}

with open("/home/mr/Desktop/git/Squish/parsedXML.txt") as f:

    for line in f:
        if "list" in line:                
            list_title = re.search('Label:(.*) - N', line).group(1)
            dict['lst_%s' % list_title] = []

        if "value" in line:
            list_option = re.search('Label:(.*) - N', line).group(1)
            dict['lst_%s' % list_title].append(list_option)
            test.log(str(dict)) #The print command for the IDE I am using
</code></pre>
<p>The output of the code is:</p>
<pre><code>TestCase tst_xml_tree_2 Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_xDSL Mode': ['Annex A/M']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J'], 'lst_G.FAST': ['Disabled']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J'], 'lst_G.FAST': ['Disabled', 'Enabled']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J'], 'lst_Auto Re-Sync': ['On'], 'lst_G.FAST': ['Disabled', 'Enabled']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J'], 'lst_Auto Re-Sync': ['On', 'Off'], 'lst_G.FAST': ['Disabled', 'Enabled']} Aug 28, 2017 11:57:37 AM
</code></pre>
<p>But if you look at the output, it prints everytime it appends a string in the list. I want to print the final output of the list after every for loop. Like this:</p>
<pre><code>Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL']} Aug 28, 2017 11:57:37
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 11:57:37 AM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J'], 'lst_Auto Re-Sync': ['On', 'Off'], 'lst_G.FAST': ['Disabled', 'Enabled']} Aug 28, 2017 11:57:37 AM
</code></pre>
<p>Can anyone please tell me how should I achieve this?</p>
<p>If I put the print command outside of the loop like this:</p>
<pre><code>dict = {}

with open("/home/mr/Desktop/git/Squish/parsedXML.txt") as f:

    for line in f:
        if "list" in line:                
            list_title = re.search('Label:(.*) - N', line).group(1)
            dict['lst_%s' % list_title] = []

        if "value" in line:
            list_option = re.search('Label:(.*) - N', line).group(1)
            dict['lst_%s' % list_title].append(list_option)
        test.log(str(dict)) #The print command for the IDE I am using
</code></pre>
<p>It prints the following output:</p>
<pre><code>TestCase tst_asd Aug 28, 2017 12:26:06 PM
Log {} Aug 28, 2017 12:26:06 PM
Log {} Aug 28, 2017 12:26:06 PM
Log {} Aug 28, 2017 12:26:06 PM
Log {} Aug 28, 2017 12:26:06 PM
Log {} Aug 28, 2017 12:26:06 PM
Log {} Aug 28, 2017 12:26:06 PM
Log {} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': []} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_xDSL Mode': []} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_xDSL Mode': ['Annex A/M']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': [], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J']} Aug 28, 2017 12:26:06 PM
Log {'lst_Interface': ['xDSL', 'SFP', 'Ethernet', 'SHDSL'], 'lst_Vectoring Mode': ['Disabled', 'Enabled', 'Friendly'], 'lst_xDSL Mode': ['Annex A/M', 'Annex B/J'], 'lst_G.FAST': []} Aug 28, 2017 12:26:06 PM
</code></pre>
<p>Also another issue is, when a new list is created inside that list, here in my code it should be created in this sequence:</p>
<pre><code>'lst_Interface' &gt; 'lst_xDSL Mode' &gt; 'lst_Vectoring Mode' &gt;  'lst_G.FAST' &gt; 'lst_Auto Re-Sync'
</code></pre>
<p>But if you look at my final line of the log, you will see that the lists sequence is:</p>
<pre><code>'lst_Interface' &gt; 'lst_Vectoring Mode' &gt; 'lst_xDSL Mode' &gt; 'lst_Auto Re-Sync' &gt; 'lst_G.FAST' 
</code></pre>
<p>How can I maintain the sequence of the lists?</p>
<p>Further clarification of the question:</p>
<p>I am actually going through a XML file of an application and I want to create a new list every time the string "list" is found on the XML, and immediately after that will be a set of "values" which I want to append in that list and then print the final list. And then when it's done, it will continue looking into the file and when it finds another "list" string in the XML file, it will create another list and so on. Isn't there any way to achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me see if I understood this correctly: you want to execute a print statement only after a group of 'values' is parsed. Here is my take:</p>
<pre><code>import re
from collections import OrderedDict

history = OrderedDict()

with open("file.txt") as f:
    flag = False
    for line in f:
        if "value" in line:
            list_option = re.search('Label:(.*) - N', line).group(1)
            history['lst_%s' % list_title].append(list_option)
            flag = True
        elif flag:  # executes only if previous line was a 'value' and this one is not.
            print(str(history))  # Replace this print statement with yours.
            flag = False
        if "list" in line:
            list_title = re.search('Label:(.*) - N', line).group(1)
            history.update({'lst_%s' % list_title: []})
    else:
        print(str(history))  # Replace this one as well.
</code></pre>
<p>Which produces:</p>
<pre><code>OrderedDict([('lst_Interface', ['xDSL', 'SFP', 'Ethernet', 'SHDSL'])])
OrderedDict([('lst_Interface', ['xDSL', 'SFP', 'Ethernet', 'SHDSL']), ('lst_xDSL Mode', ['Annex A/M', 'Annex B/J'])])
OrderedDict([('lst_Interface', ['xDSL', 'SFP', 'Ethernet', 'SHDSL']), ('lst_xDSL Mode', ['Annex A/M', 'Annex B/J']), ('lst_Vectoring Mode', ['Disabled', 'Enabled', 'Friendly'])])
OrderedDict([('lst_Interface', ['xDSL', 'SFP', 'Ethernet', 'SHDSL']), ('lst_xDSL Mode', ['Annex A/M', 'Annex B/J']), ('lst_Vectoring Mode', ['Disabled', 'Enabled', 'Friendly']), ('lst_G.FAST', ['Disabled', 'Enabled'])])
OrderedDict([('lst_Interface', ['xDSL', 'SFP', 'Ethernet', 'SHDSL']), ('lst_xDSL Mode', ['Annex A/M', 'Annex B/J']), ('lst_Vectoring Mode', ['Disabled', 'Enabled', 'Friendly']), ('lst_G.FAST', ['Disabled', 'Enabled']), ('lst_Auto Re-Sync', ['On', 'Off'])])
</code></pre>
<p>I used <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> since you need to preserve insertion order.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no way to print after each list has ended because your input is not ordered, so there is no way to know if a particular list has ended or not.</p>
<p>All you can do is print the list after the whole file has been processed; to do so, place your print statement outside the loop.</p>
</div>
<span class="comment-copy">Just a suggestion, naming <code>listoflist</code> a <code>dict</code> makes things a little bit confusing.</span>
<span class="comment-copy">Thanks. Actually at first I thought of creating an array of list. And then searched on the internet how to do that. And this is what I came up with. I will change it in my final code.</span>
<span class="comment-copy">please avoid to edit your question to reply to wrong answers, try to keep the question as clean and as concise as possible, otherwise it gets harder to read.</span>
<span class="comment-copy">This almost exactly what I want. Thanks a lot. If you look at the third and fourth line of your result, there is an extra "[]" printed inside of it. Which doesnt occur in the first two lines. How can I avoid those?</span>
<span class="comment-copy">@Russo should be fixed now, I've just inverted the two <code>if</code>s.</span>
<span class="comment-copy">@Russo no worries, thanks for marking it as accepted. By the way, I see you are parsing an XML file, so I assume the text file you posted is just the representation of the XML file, with the pipes indicating the nesting level. Seems like more troubles than necessary if that's the case, you should check <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer"><code>ElementTree</code></a> so you can parse the XML file directly.</span>
<span class="comment-copy">Yes I am parsing a XML file. I also think that I am doing things in a more complicated way than it should be. A short summary: I have written a test script which will go through all the menus of an application. For this, I have already used ElementTree to generate the text file and now I am trying to get all the branches because there are different methods to access different branch of the menu, so I am trying to group one branch at a time. I guess this is not the right place to discuss if I dont have a specific question. I will post a new question if I face more issues. Thanks again.</span>
