<div class="post-text" itemprop="text">
<p>I have two Python scripts, one testclass.py:  </p>
<pre><code>import numpy
zz = numpy

class Something(object):
    def __init__(self):
        self.xp = zz
</code></pre>
<p>and one testscript.py:</p>
<pre><code>from testclass import Something
x = Something()
print(x.xp)
</code></pre>
<p>I expected testscript.py to throw an error because I thought that testscript only imports the class <code>Something</code> (with its <code>__init__</code> method), and not the global variable <code>zz</code>. So, given this bevahiour, my question is, when importing from a module, does Python "run" everything in the module file?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. When you execute:</p>
<pre><code>from testclass import Something
</code></pre>
<p>It has the same effect as:</p>
<pre><code>import testclass
Something = testclass.Something
</code></pre>
<p>More generally, the Python interpreter can't know beforehand what objects your module exposes (unless you explicitly name them in <a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer"><code>__all__</code></a>). For an extreme case, consider the following:</p>
<p><code>a.py</code>:</p>
<pre><code>import random

if random.random() &gt; 0.5:
    class Foo(object):
        pass
else:
    class Bar(object):
        pass
</code></pre>
<p>Running <code>from a import Foo</code> has a 50% chance of failing because the <code>a</code> module object may or may not have a <code>Foo</code> attribute.</p>
</div>
<span class="comment-copy">I like the idea of defining random stuff in a module deep in your project. Preferably keeping the same name, but a different MRO, would make for fun times.</span>
<span class="comment-copy">Will executing <code>from a import Foo</code> multiple times increase/decrease the chance of failing? Or will the defined class remain the same during the process after the first import?</span>
<span class="comment-copy">@ZachGates: The module object is cached in <code>sys.modules</code> after it's first  imported.</span>
