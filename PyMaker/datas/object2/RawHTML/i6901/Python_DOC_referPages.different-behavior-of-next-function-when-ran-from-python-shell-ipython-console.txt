<div class="post-text" itemprop="text">
<p>I have a class for which the <code>next</code> method is defined. When I run a script from the command line which creates an object of this class and run the following loop to call <code>next</code>, the return value of next is not printed but when I run the same lines from a Python console, the return values are printed.</p>
<p>More concretely, if we save the following script as <code>tests.py</code>:</p>
<pre><code>class Solution():
    def __next__(self):
        return 1

s = Solution()
for _ in range(5):
    next(s)
</code></pre>
<p>And run <code>python test.py</code>, nothing is printed (I tested this on Python 3.4 and a Windows machine).</p>
<p>However, if we do as follows in a Python shell, the output will be printed:</p>
<pre><code>(python34) C:\&gt;python
Python 3.4.5 |Anaconda custom (64-bit)| (default, Jul  5 2016, 14:53:07) [MSC 
v.1600 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class Solution():
...     def __next__(self):
...         return 1
...
&gt;&gt;&gt; s = Solution()
&gt;&gt;&gt; for _ in range(5):
...     next(s)
...
1
1
1 
1
1
</code></pre>
<p>On the IPython console also no output is printed.    </p>
</div>
<div class="post-text" itemprop="text">
<p>You can see <a href="https://github.com/ipython/ipython/blob/46cd3a95e86fba00c51f214555b22b52c0ef1eaf/IPython/core/interactiveshell.py#L2813-L2857" rel="nofollow noreferrer">here</a> that IPython runs the ast nodes one by one instead of all at once, you can change how IPython run nodes, but by default it will trigger display side effect only on the last root node of the AST. If you have a for loop, the "next()" node is not the last root node, the "for" is, and it return no value (it's a statement not an expression). This is deliberate not to overwhelm users in a notebook.</p>
<p>My guess is this is semantically different than what the Python REPL does, the pure Python repl either run run interactively the <strong>last</strong> node, or <strong>all</strong>, I do not remember.</p>
<p>You can check what the Python repl does with simpler examples: You do not need the <code>Solution</code> class, you can do it with any expressions, which does work:</p>
<pre><code>&gt;&gt;&gt; for i in range(5):
...     i # try adding more expressions like i**2 on another line
...
0
1
2
3
4
</code></pre>
<p>And you can get the same behavior in IPython with a flag:</p>
<pre><code>$ ipython --TerminalInteractiveShell.ast_node_interactivity=all
Python 3.6.1 | packaged by conda-forge | (default, May 23 2017, 14:31:56)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.2.0.dev -- An enhanced Interactive Python. Type '?' for help.

In [1]: for i in range(5):
   ...:     i
   ...:
Out[1]: 0
Out[1]: 1
Out[1]: 2
Out[1]: 3
Out[1]: 4
</code></pre>
<p>I personally love the <code>last_expr_or_assign</code> value that make the last assignment return the assigned value:</p>
<p>$ ipython --TerminalInteractiveShell.ast_node_interactivity=last_expr_or_assign</p>
<p>Python 3.6.1 | packaged by conda-forge | (default, May 23 2017, 14:31:56)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.2.0.dev -- An enhanced Interactive Python. Type '?' for help.</p>
<pre><code>In [1]: a = 1 # No Out
   ...: b = 2 # Out will be 2. Useless here, 
   ...:       # but nice if you do `df = pd.load_csv(...)`
Out[1]: 2
</code></pre>
</div>
<span class="comment-copy">What I thought I knew.. turns out I don't know very well. The behaviour documented in my answer is observed only in IPython, not the standard IDLE. So, I will be deleting my answer.</span>
<span class="comment-copy">How do you run these code? Do you run it in python console, or ipython, or in command line? I think what you see depends on how you run it. Can you also include the <code>Solution</code> class, in a simplified form?</span>
<span class="comment-copy">Yes, I also noticed the behavior actually depends on how you run the code after@ COLDSPEED  somewhat alluded to that. I will update the question with information as soon as I get a chance. It doesn't have anything to do with the temp variable.</span>
<span class="comment-copy">why would you expect anything to be printed? You are not calling print.</span>
<span class="comment-copy">@RedCricket The behavior is different in different environments as stated in the question.</span>
<span class="comment-copy">Thanks. Is the 'last_expr_or_assign' value only a feature of iPython 6.2 because in iPython 6.1, it doesn't seem to be available.</span>
<span class="comment-copy">Can we also control the behavior of Python (e.g. CPython) when invoked in an interactive mode in a similar way? When I searched here <a href="https://docs.python.org/3/using/cmdline.html" rel="nofollow noreferrer">docs.python.org/3/using/cmdline.html</a> I couldn't find any flags.</span>
<span class="comment-copy">I don't think you can control the Python's one. Also it's IPython upper case I, don't want annoy the fruit company :-)</span>
