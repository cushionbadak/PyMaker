<div class="post-text" itemprop="text">
<p>When I try to run this it says "enddata" is not defined, even though it is a list containing formatted data from the document. Is there a better way of coding this part?</p>
<pre><code>def openfile ():

    global enddata
    global index

    file=open("weatherData.csv","r")
    data=file.readlines()
    file.close()

    enddata=[]
    index=0

    for sample in data:
        enddata.append(data[index].split(","))
        index +=1

    print("-"*50)

    return enddata

print(enddata)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As others pointed out, you have to call the <code>openfile</code> function: The code could be like this:</p>
<pre><code>def openfile ():

    global enddata
    global index

    file=open("weatherData.csv","r")
    data=file.readlines()
    file.close()

    enddata=[]
    index=0

    for sample in data:
        enddata.append(data[index].split(","))
        index +=1

    print("-"*50)

    return enddata

openfile()
print(enddata)
</code></pre>
<p>Another way to do it a little more short and pythonic could be:</p>
<pre><code>def openfile():
    with open("weatherData.csv") as f:
        return [line.split(',') for line in f]

enddata = openfile()
print("-"*50)
print(enddata)
</code></pre>
<p>Worth it to explore the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> Python module:</p>
<pre><code>import csv

def openfile():
    with open('weatherData.csv') as f:
        return list(csv.reader(f))

enddata = openfile()
print("-"*50)
print(enddata)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to call <code>openfile</code> for it to initialize (and create, for that matter) the global name <code>enddata</code>. However, you should not be using a global variable. Have <code>openfile</code> <em>return</em> the value you are assigning to <code>enddata</code> and assign it to the the variable in the calling scope.</p>
<p>A few other tips:</p>
<ul>
<li>Your function doesn't just open a file, it reads it and returns some data.</li>
<li>Use a <code>with</code> statement to manage opening and closing the file.</li>
<li>Don't read the entire file into memory at once; read it line by line.</li>
<li>You are iterating over <code>data</code> twice, in some sense: once using the <code>for</code> loop, and again with <code>index</code>. It appears that <code>sample == data[index]</code> during each iteration. The entire iteration could be handled with a single list comprehension.</li>
<li>Use the <code>csv</code> module for reading CSV files.</li>
</ul>
<p>Putting it all together:</p>
<pre><code>import csv

def read_file(fname):
    with open(fname) as fh:
        return list(csv.reader(fh))

enddata = read_file("weatherData.csv")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a slightly more advanced way of writing your code.</p>
<ul>
<li>I use the <code>with statement so that I don't have to remember to close the file. It makes the code more compact in general.</code>weatherData` becomes the alias for the file.</li>
<li><code>sample</code> becomes the name for one line in the input file.</li>
<li>It's important to note that each line in a file will have a so-called 'line-end' which has to be stripped off; hence the <code>.strip()</code>. Then I can do the <code>.split</code> on commas.</li>
<li>Because each input line can contain more than one value, I use <code>.extend</code> to add them to <code>enddata</code>.</li>
<li>I've written <code>print (openfile())</code> to see the results. Alternatively I could have written <code>result = openfile(); print(result)</code>.</li>
</ul>
<p>.</p>
<pre><code>def openfile():
    enddata = []
    with open('weatherData.csv') as weatherData:
        for sample in weatherData.readlines():
            enddata.extend(sample.strip().split(','))
    return enddata

print (openfile())
</code></pre>
<p>Output:</p>
<pre><code>['1', '2', '3', '4', '5', '6']
</code></pre>
</div>
<span class="comment-copy">Do you ever call the <code>openfile</code> function?</span>
<span class="comment-copy">Friendly advice: try to forget that you ever knew about the existence of <code>global</code>. That would be the best advice anyone could offer here. Since <code>enddata</code> is the thing you want to make available 'outside' the <code>openfile</code> function you need only <code>return</code> it, which is what you have done. Since you <code>return enddata</code> you can make use of the result of the function by using <code>print(openfile())</code> rather than <code>print(enddata)</code>.</span>
<span class="comment-copy">Don't use <code>global</code> - you did not define enddata globally and you did not call openfile() at all thats why you get the error.</span>
