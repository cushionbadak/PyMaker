<div class="post-text" itemprop="text">
<p>I want to threads has some local variable, with <code>thread.Thread</code> it can be done like this elegantly:</p>
<pre><code>class TTT(threading.Thread):
    def __init__(self, lines, ip, port):
        threading.Thread.__init__(self)
        self._lines = lines;
        self._sock = initsock(ip, port)
        self._sts = 0
        self._cts = 0

    def run(self):
        for line in self._lines:
            query = genquery(line)
            length = len(query)
            head = "0xFFFFFFFE"
            q = struct.pack('II%ds'%len(query),  head,  length, query)
            sock.send(q)
            sock.recv(4)
            length,  = struct.unpack('I',  sock.recv(4))
            result = ''
            remain = length
            while remain:
                t = sock.recv(remain)
                result+=t
                remain-=len(t)
            print(result)
</code></pre>
<p>As you can see that <code>_lines</code> <code>_sock</code> <code>_sts</code> <code>_cts</code> these variable will be independent in every thread.</p>
<p>But with <code>concurrent.future.ThreadPoolExecutor</code>, it seems that it's not that easy. With <code>ThreadPoolExecutor</code>, how can I make things elegantly?(no more global variables)</p>
<hr/>
<p>New Edited</p>
<pre><code>class Processor(object):
    def __init__(self, host, port):
        self._sock = self._init_sock(host, port)

    def __call__(self, address, adcode):
        self._send_data(address, adcode)
        result = self._recv_data()
        return json.loads(result)

def main():
    args = parse_args()
    adcode = {"shenzhen": 440300}[args.city]

    if args.output:
        fo = open(args.output, "w", encoding="utf-8")
    else:
        fo = sys.stdout
    with open(args.file, encoding=args.encoding) as fi, fo,\
        ThreadPoolExecutor(max_workers=args.processes) as executor:
        reader = csv.DictReader(fi)
        writer = csv.DictWriter(fo, reader.fieldnames + ["crfterm"])
        test_set = AddressIter(args.file, args.field, args.encoding)
        func = Processor(args.host, args.port)
        futures = map(lambda x: executor.submit(func, x, adcode), test_set)
        for row, future in zip(reader, as_completed(futures)):
            result = future.result()
            row["crfterm"] = join_segs_tags(result["segs"], result["tags"])
            writer.writerow(row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a layout very similar to what you have now would be the easiest thing. Instead of a <code>Thread</code>, have a normal object, and instead of <code>run</code>, implement your logic in <code>__call__</code>:</p>
<pre><code>class TTT:
    def __init__(self, lines, ip, port):
        self._lines = lines;
        self._sock = initsock(ip, port)
        self._sts = 0
        self._cts = 0

    def __call__(self):
        ...
        # do stuff to self
</code></pre>
<p>Adding a <a href="https://docs.python.org/3/reference/datamodel.html#emulating-callable-objects" rel="nofollow noreferrer"><code>__call__</code></a> method to a class makes it possible to invoke instances as if they were regular functions. In fact, normal functions are objects with such a method. You can now pass a bunch of <code>TTT</code> instances to either <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map" rel="nofollow noreferrer"><code>map</code></a> or <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit" rel="nofollow noreferrer"><code>submit</code></a>.</p>
<p>Alternatively, you could absorb the initialization into your task function:</p>
<pre><code>def ttt(lines, ip, port):
    sock = initsock(ip, port)
    sts = cts = 0
    ...
</code></pre>
<p>Now you can call <code>submit</code> with the correct parameter list or <code>map</code> with an iterable of values for each parameter.</p>
<p>I would prefer the former approach for this example because it opens the port outside the executor. Error reporting in executor tasks can be tricky sometimes, and I would prefer to make the error prone operation of opening a port as transparent as possible.</p>
<p><strong>EDIT</strong></p>
<p>Based on your related question, I believe that the real question you are asking is about function-local variables (which are automatically thread-local as well), not being shared between function calls on the same thread. However, you can always pass references between function calls.</p>
</div>
<span class="comment-copy">Your functions can actually be callable objects.</span>
<span class="comment-copy">Show what you are doing now with the thread pool and I'll tell you how to fix it.</span>
<span class="comment-copy">@MadPhysicist wait a minute</span>
<span class="comment-copy">@MadPhysicist is these detail enough?</span>
<span class="comment-copy">Sure, I was looking more for your attempt at using the thread pool, but my answer remains basically accurate.</span>
<span class="comment-copy">I add my new code, with <code>__call__</code> and <code>submit</code> but how to use the class?</span>
<span class="comment-copy">In my code, <code>Processor</code> is just init one time, if I do <code>executor.submit(Processor(args.host, args.port), x, adcode)</code>, it will init every time.</span>
<span class="comment-copy">@roger #1 that actually means that all your threads share the state and you aren't asking what you think you are. #2, you can always do <code>proc = Processor(...); executor.submit(proc, ...)</code></span>
<span class="comment-copy">yes, my code is all thread share the same state, and <code>proc = Processor(...); executor.submit(proc, ...)</code>, this also means that the <code>proc</code> is not thread bind,   what I want is still I want to <code>_sock </code> variable is thread bind variable</span>
<span class="comment-copy">I combing my question, I ask a new question here <a href="https://stackoverflow.com/questions/45901594/how-to-bind-some-variable-to-thread-with-concurrent-futures-threadpoolexecutor-o" title="how to bind some variable to thread with concurrent futures threadpoolexecutor o">stackoverflow.com/questions/45901594/â€¦</a></span>
