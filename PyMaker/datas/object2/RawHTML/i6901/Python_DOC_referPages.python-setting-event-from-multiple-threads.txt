<div class="post-text" itemprop="text">
<p>I have 2 threads that are listening for data on 2 different UART lines that can come in any time. I also have a 3rd thread that is just a timer. In my main thread I would like to wait for any of these three threads to signal in order to trigger a parse data and update type function.</p>
<p>Is using 1 event with a separate flag that each thread would set before setting the event to indicate which one of them triggered the event an acceptable solution or is there a better way to do this that I'm missing?</p>
<p>Using python 2.7</p>
<p>For example:    </p>
<pre><code>'''
UART RX thread for GNSS
'''
def uart_rx_gnss( threadName, ser):
  global event_flag
  global rx_buffer

  while(1):
    line = ser.readline()
    logger.debug(" GNSS &gt;&gt; " + str(line))

    with t_lock:
      rx_buffer = line
      event_flag = EVENT_GNSS
      t_event.set()      

'''
UART RX thread for cc1350
'''
def uart_rx_cc1350( threadName, ser, t_lock, t_event):
  global event_flag
  global rx_buffer

  while(1):
    cc1350_buffer = ser.readline()
    logger.debug(" CC1350 &gt;&gt; " + str(cc1350_buffer))

    with t_lock:
      rx_buffer = line
      event_flag = EVENT_CC1350
      t_event.set()


'''
  Periodically update if no uart
'''
def periodic_update( threadName, t_lock, t_event ):
  global event_flag

  while(1):
    time.sleep(3)
    with t_lock:
      event_flag = EVENT_TIMEOUT
      t_event.set()

'''
Main
'''
def main(verbosity="info", mode="normal"):
  # SIGING Handler 
  signal.signal(signal.SIGINT, signal_handler)

  ######### GLOBAL VARIABLES #########  
  global event_flag

  ser = ic.initialize_uart('/dev/ttymxc6', 9600)
  thread.start_new_thread( uart_rx_gnss, ("Thread-GNSS-RX", ser ) )

  ser = ic.initialize_uart('/dev/ttymxc4')
  thread.start_new_thread( uart_rx_cc1350, ("Thread-cc1350-RX", ser, lock, event ) )

  thread.start_new_thread( periodic_update, ("Updater", lock, event ) )

  # Main Loop
  while (running == True):
    event.wait()

    if (event_flag == EVENT_TIMEOUT):
      logger.info("EVENT: TIMEOUT")
      # UPDATE
    elif (event_flag == EVENT_GNSS):
      logger.info("EVENT: GNSS")
      # Parse rx_buffer
    elif (event_flag == EVENT_CC1350):
      logger.info("EVENT: CC1350") 
      # Parse rx_buffer
    else:
      logger.info("EVENT UNKNOWN")   

    event_flag = 0
    event.clear()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will explode.</p>
<p>All you need are two close events, and your global <code>evetn_flag</code> will be overwritten in a race-condition. </p>
<p>You should be using queues for that.</p>
<p><a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">https://docs.python.org/3/library/queue.html</a></p>
<p>Queues will preserve the order, and warrant your main thread will process all events that arrived. </p>
<p>You can post an arbitrary data structure to the Queue - so, since yu alredy have an event-type "quasi-enumeration", you can post a tuple with this event_type as first element, and whatever data you have to comunicate across threads as second element. Just create a <code>queue.Queue</code> object before spawning your threads, you can even set it as a global variable, and use the queue's <code>get</code> method instead of <code>event.wait()</code>.</p>
</div>
<span class="comment-copy">Thanks that sounds like a better solution. That being said, wouldn't the lock prevent the race condition you describe?</span>
