<div class="post-text" itemprop="text">
<p>I have a small program to track monthly balances.  This worked fine as is, and then I added in the section to write to a .txt file at the bottom.  I did some searching but can't figure out a way to make it work.  Basically I want to keep appending to this test.txt file.  Every time I enter a new month/account/balance I want that appended to the file.</p>
<p>The alternative is to append to the test.txt file after 'exit', so it doesn't do it every loop.  Not sure which way is more efficient</p>
<p>***EDIT****</p>
<p>This updated code now creates test.txt file but the file is blank after each loop</p>
<p>Secondary question - I have heard this would be better off using a Class for this, but I haven't any idea how that would look.  If someone wants to demonstrate that would be awesome.  This isn't homework, this is strictly learning on my own time.</p>
<p>Any ideas?  Thanks</p>
<pre><code># create program to track monthly account balances

savings = []

def add_accounts(date, account, balance):

    savings.append({'date': date, 'account': account, 'balance': 
balance})

def print_accounts():
    print(savings)

while True:

    date = input('Enter the date, type exit to exit program: ')
    if date == 'exit':
        break
    account = input('Enter the account: ')
    balance = int(input('Enter the balance: '))

    add_accounts(date, account, balance)
    print_accounts()
with open('test.txt', 'a') as f:
for row in savings():
    print (row)
    f.write(str(savings[-1]))
    file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this code (use -1 to exit):</p>
<pre><code>savings = []

def add_accounts(date, account, balance):

    savings.append({'date': date, 'account': account, 'balance': 
balance})

def print_accounts():
    print(savings)

while True:

    date = input('Enter the date, type exit to exit program: ')
    if date == -1:
        break
    account = input('Enter the account: ')
    balance = int(input('Enter the balance: '))

    add_accounts(date, account, balance)
    print_accounts()
with open('test.txt', 'a') as f:
    for row in savings:
        print (row)
        f.write(str(savings[-1]))
        f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your original code is that <code>print_accounts()</code> doesn't return anything, yet you attempt to perform operations on its (nonexistent) return value.</p>
<p>Here is a version of your program made using classes, and with a few corrections:</p>
<pre><code>class Account:
    def __init__(self, id, date, balance):
        self.id = id
        self.date = date
        self.balance = balance

    def getString(self):
        return self.id + "," + self.date + "," + str(self.balance)

savings = []

def add_account(date, account, balance):
    savings.append(Account(date, account, balance))

def print_accounts():
    for account in savings:
        print(account.getString())

while True:
    date = input("Enter the date, type exit to exit program: ")
    if date.lower() == "exit":
        break
    else:
        account = input('Enter the account: ')
        balance = int(input('Enter the balance: '))
        add_account(date, account, balance)
        print_accounts()
        with open("test.txt", "w") as file:
            for account in savings:
                file.write(account.getString() + "\n")
</code></pre>
<p>Some explanation regarding the class: The <code>Account</code> class has 3 fields: <code>id</code>, <code>date</code>, and <code>balance</code>. These fields are defined in the constructor (<a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer"><code>__init__()</code></a>). The class also has a method, <code>getString()</code>, which I use to get the <em>string representation</em> of each instance.</p>
<p>Over all, the following changes have been made:</p>
<ul>
<li>Create an Account class, which serves as the template for the object which holds the data of each account.</li>
<li>Use a loop to print accounts and write them to the file.</li>
<li>Turn <code>date</code> into lowercase before checking to see if it is equal to "exit". This is a minor change but a good habit to have.</li>
<li>Removed <code>f.close()</code>, as it is unnecessary when using a <code>with open()</code> statement.</li>
<li>Created a custom string representation of each instance of <code>Account</code>, consistent with what you would otherwise get.</li>
</ul>
<p>That last one is achieved via defining the <code>getString</code> method in the account class. There is nothing special about it, it is merely what we use to get the string representation. </p>
<p>A better but quite more advanced way to achieve that is by overriding the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__</code></a> methods of the base object. These are essentially hidden functions that every class has, but which python defines for us. The purpose of these two specific ones is to give string representations of objects. The default code for them doesn't produce anything meaningful:</p>
<pre><code>&lt;__main__.Account object at 0x0000000003D79A58&gt;
</code></pre>
<p>However, by overriding them, we can use <code>str()</code> on instances of <code>Account</code>, and we will get a string representation in the exact format we want. The modified class will look like so:</p>
<pre><code>class Account:
    def __init__(self, id, date, balance):
        self.id = id
        self.date = date
        self.balance = balance

    def __repr__(self):
        return self.id + "," + self.date + "," + str(self.balance)
    def __str__(self):
        return self.__repr__()
</code></pre>
<p>This also eliminates the need to loop through <code>savings</code> when writing to the file:</p>
<pre><code>with open("test.txt", "w") as file:
    for account in savings:
        file.write(account.getString() + "\n")
</code></pre>
<p>Turns into:</p>
<pre><code>with open("test.txt", "w") as file:
    file.write(str(savings))
</code></pre>
<p>This wouldn't have worked before, as <code>str()</code> would have given us the gibberish data you saw earlier. However, now that we have overridden the methods, it works just fine.</p>
</div>
<span class="comment-copy"><code>"w"</code> overwrites the file - see <a href="https://stackoverflow.com/questions/4706499/how-do-you-append-to-a-file" title="how do you append to a file">stackoverflow.com/questions/4706499/how-do-you-append-to-a-file</a></span>
<span class="comment-copy">@IzaakvanDongen . ah yes, thanks, should be 'a'.  that doesnt solve the issue though.  Still throwing a:  for row in print_accounts(): TypeError: 'NoneType' object is not iterable . error</span>
<span class="comment-copy">because the method <code>print_accounts</code> isnt returning anything. It is just printing. (explaining the error)</span>
<span class="comment-copy">If you're updating it for each new addition you don't need to iterate over everything in <code>savings</code> (aside from that, <code>print_accounts</code> doesn't return anything). Just do something like <code>f.write(str(savings[-1]))</code></span>
<span class="comment-copy">As Sachin and Izaak suggested, print_accounts() function is not returning anything. You can iterate over savings array.</span>
<span class="comment-copy">@jd2775 Does this work? are there still any issues remaining?</span>
<span class="comment-copy">works great, thank you very much!</span>
<span class="comment-copy">can you do me a favor and run the code you showed me here when you get time? I still get a blank output text file when running. Just noticing it now. Curious if you get the same result. Thanks â€“</span>
<span class="comment-copy">I ran the code yesterday itself, seems to be working fine on my machine. Are u getting an empty file on running the exact code?</span>
<span class="comment-copy">Thank you very much for taking the time to write this out and explain this to me.  Great reference for me</span>
