<div class="post-text" itemprop="text">
<p>I am trying to test a particular chat program by sending a series of commands and capturing the output. </p>
<p>How can I pass:</p>
<pre><code>sleep 2
echo test
sleep 2
echo test1
</code></pre>
<p>I have tried this:</p>
<pre><code>(sleep 2; echo test; sleep 2; echo test1) | python3 test.py
</code></pre>
<p>but it just prints the first part while for the second I get nothing. It enters into an endless loop instead.</p>
<p>the python program's code is:</p>
<pre><code>import sys, select

while True:
  socket_list = [sys.stdin]
  read_sockets, write_sockets, error_sockets = select.select(socket_list, [], [])
  for sock in read_sockets:
    message = sys.stdin.readline()
    sys.stdout.write("&gt; %s: ")
    sys.stdout.flush()
</code></pre>
<p>I should mentioned that this is not the complete program but it is the part where it helps recreate the exact same effect.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your example goes to loop because after <code>echo test1</code> <em>stdin</em> is closed and <code>read()</code> always returns empty.
Also you shouldn't use another blocking call with <code>select</code>. If you would
use it on more than one object, you could still be blocked by <code>readline</code>
from the previous event.</p>
<p>For reading a line at time from <em>stdin</em> you do not need to use
<code>select.select()</code>. Possibly the simplest way to achieve that:</p>
<pre><code>for line in sys.stdin:
    print(line)
</code></pre>
<p>If you want to use either <code>stdin</code> or a list of files as arguments to
your program, Python's
<a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput</code></a> module
is out of the box solution.</p>
<p>In case you want/need to use <code>select.select()</code> anyways:</p>
<pre><code>import os, sys, select

buffer = ""
while True:
  select.select([sys.stdin.fileno()], [], [])
  read = os.read(sys.stdin.fileno(), 512)

  # empty read: EOF
  if len(read) == 0:
    # buffer might not be empty
    if len(buffer) &gt; 0:
      sys.stdout.write(buffer + "\n")

    break

  # find newlines
  parts = read.split("\n")
  buffer += parts.pop(0)

  while len(parts) &gt; 0:
    sys.stdout.write(buffer + "\n")
    buffer = parts.pop(0)
</code></pre>
<p>When an object becomes ready,
<a href="https://docs.python.org/3/library/select.html#select.select" rel="nofollow noreferrer"><code>select.select</code></a>
unblocks. The only object in this case is <em>stdin</em>. With more than one
object you need to check the return value of <code>select.select</code> to find out
which one is ready. <code>os.read()</code> is used to do non-blocking read from
<em>stdin</em> (alternatively:
it's possible to use <code>stdin.read(1)</code> reading a character at a time).
<code>read.split("\n")</code> is used for finding newlines, note that it is
possible a single read yields more than one line.</p>
</div>
<div class="post-text" itemprop="text">
<p>After running <code>strace</code> on <code>cat</code>, I created this:</p>
<pre><code>import sys

while True:
    data = sys.stdin.read()
    if not len(data):
        break
    sys.stdout.write(data)
</code></pre>
<p><strong>Command</strong></p>
<pre><code>(sleep 2; echo test; sleep 2; echo test1) | python3 test.py
</code></pre>
<p><strong>Output</strong></p>
<pre><code>test
test1
</code></pre>
<p>This solution relies on this fact:</p>
<blockquote>
<p>If the end of the file has been reached, f.read() will return an empty string ('').</p>
</blockquote>
<p>See <a href="https://docs.python.org/3.3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">Methods of File Objects</a>.</p>
<p>If you need a version that uses <code>select</code>:</p>
<pre><code>import os
import select
import sys

while True:
    rlist = [sys.stdin.fileno()]
    wlist = []
    xlist = []
    rlist, wlist, xlist = select.select(rlist, wlist, xlist)
    if sys.stdin.fileno() in rlist:
        data = os.read(sys.stdin.fileno(), 4096)
        if not len(data):
            break
        sys.stdout.write(data)
</code></pre>
</div>
<span class="comment-copy">Shot in the dark, but what about <code>{ sleep 2; echo test; sleep 2; echo test1 }</code> and maybe redirect it to python instead of pipe?</span>
<span class="comment-copy"><code>date +%s; (sleep 2; echo test; sleep 2; echo test1) | perl -pe '$_=time()." ".$_'</code> shows both <code>test</code> strings and the two-second delays for me.</span>
<span class="comment-copy">You need to show us how you are sending and receiving. It sounds like a problem for SO, but it's hard to tell.</span>
<span class="comment-copy">Can you please post the supposed output?</span>
<span class="comment-copy">Assuming, this is a reduced example for something that will need multiple sockets, use Twisted (or a similar library). Do <i>not</i> implement the whole event dispatch system yourself.</span>
<span class="comment-copy">Excellent response and thank you for sending the example using select.select. Indeed after the last echo there is multiple b'' sent to stdin so checking for an empty read and exiting fixed the issue.</span>
