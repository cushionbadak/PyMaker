<div class="post-text" itemprop="text">
<p>I have the following example in which the next method of a class is supposed to return the values from two generators:</p>
<pre><code>class Test():
    def __next__(self):
        g1, g2 = self._gen1(), self._gen2() 
        return next(g1), next(g2)

    def _gen1(self):
        i = 0
        while True:
            yield i
            i += 2

    def _gen2(self):
        i = 1
        while True:
            yield i
            i += 2
</code></pre>
<p>However, when I call <code>next</code> for this class, the values are not incremented.</p>
<pre><code>&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; next(t)
&gt;&gt;&gt; (0, 1)
&gt;&gt;&gt; next(t)
&gt;&gt;&gt; (0, 1)
</code></pre>
<p>What is wrong? Is there a more eloquent way to write this class?   </p>
</div>
<div class="post-text" itemprop="text">
<p>Your code doesn't work because it recreates the generator functions <em>every</em> time <code>__next__()</code> is called, which effectively resets them back to their initial state before their next <code>next()</code> values are returned:</p>
<pre><code>    def __next__(self):
        g1, g2 = self._gen1(), self._gen2()  # Don't do this here.
        return next(g1), next(g2)
</code></pre>
<p>You can fix that by adding an <code>__init__()</code> method and initializing them in it:</p>
<pre><code>class Test:
    def __init__(self):
        self.g1, self.g2 = self._gen1(), self._gen2()  # Initialize here.

    def __next__(self):
        return next(self.g1), next(self.g2)
    ...
</code></pre>
<p>A more eloquent and slightly more concise way to do it which likewise will avoid the problem would be to use the builtin <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code> function</a> to create an "iterator of generators" that will return pairs of next values from each generator every time it's called. Another advantage is it's very easy to extend to handle even more generators simply just changing the <code>__init__()</code> method.</p>
<p>Here's what I mean:</p>
<pre><code>class Test:
    def __init__(self):
        self.generators = zip(self._gen1(), self._gen2())

    def __next__(self):
        return next(self.generators)

    def _gen1(self):
        i = 0
        while True:
            yield i
            i += 2

    def _gen2(self):
        i = 1
        while True:
            yield i
            i += 2

t = Test()
for _ in range(3):
    print(next(t))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>(0, 1)
(2, 3)
(4, 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although I have no idea what you are trying to accomplish, here is a cleaned up version which (I think) does what you want.</p>
<pre><code>class Test():
    def __init__(self):
        self.g1 = self._gen2() 
        self.g2 = self._gen1()
    def __next__(self):
        return next(self.g1), next(self.g2)

    def _gen1(self):
        i = 0
        while True:
            yield i
            i += 2

    def _gen2(self):
        i = 1
        while True:
            yield i
            i += 2

t = Test()

print(next(t))           
print(next(t))           
print(next(t))  
</code></pre>
</div>
<span class="comment-copy">What are instances of this class supposed to be? Iterators, or multi-use iterables? Why do you have this class at all instead of writing another generator?</span>
<span class="comment-copy">What behavior did you intend to create by writing this class?</span>
<span class="comment-copy">I basically want to return values from two separate functions. I don't want to write those two functions inside the next method and those functions can be generators. Makes sense?</span>
<span class="comment-copy">Are you going to accept one of the answers you've gotten, and if not, why is that?</span>
<span class="comment-copy">Sorry. I didn't know I need to accept an answer.</span>
<span class="comment-copy">Thanks. I thought my example is self-explanatory. My next method is supposed to return values from  two functions. I don't want to write those functions inside the next method body. Those functions can be potentially written as generators. Does this make sense or am I missing something? What is unclear?</span>
<span class="comment-copy">Does the provided solution not accomplish that?</span>
<span class="comment-copy">It works but since you mentioned it is not clear to you what I am doing I am wondering if my approach is wrong. Is there a different way to achieve this goal?</span>
<span class="comment-copy">Well, if all you want to do is iterate over two generators simultaneously, i don't know that you need all the boilerplate of a class.  Why not just do something like <code>foo = zip(range(10),range(11,20))</code>.</span>
