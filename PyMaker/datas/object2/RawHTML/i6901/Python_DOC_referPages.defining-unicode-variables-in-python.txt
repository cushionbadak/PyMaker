<div class="post-text" itemprop="text">
<p>Recently, I have been reading about the Python source code encoding, especially <a href="https://www.python.org/dev/peps/pep-0263/" rel="nofollow noreferrer">PEP 263</a> and <a href="https://www.python.org/dev/peps/pep-3120/" rel="nofollow noreferrer">PEP 3120</a>.</p>
<p>I have the following code:</p>
<pre><code># coding:utf-8

s = 'abc∂´ƒ©'
ƒ = 'My name is'
ß = '˚ß˙ˆ†ˆ∆ ßå®åø©ˆ'
print('s =', s)
print('ƒ =', ƒ, 'ß =', ß)
</code></pre>
<p>This code works fine for Python3 but results in a <code>SyntaxError</code> in Python2.7 .<br/>
I do understand that this probably might have nothing to do with source code encoding.<br/>
So, I would like to know if there is a way to support Unicode variable names in Python2.</p>
<p>In all, I am also having a hard time figuring out what pragmatic problem the PEPs exactly aim to solve and how(and where) do I take advantage of the proposed solutions. I have read few discussions on the same but they do not present an answer to my question rather an explanation of the correct syntax:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/728891/correct-way-to-define-python-source-code-encoding">Correct way to define Python source code encoding</a></li>
<li><a href="https://stackoverflow.com/questions/6289474/working-with-utf-8-encoding-in-python-source">Working with utf-8 encoding in Python source</a></li>
<li><a href="https://stackoverflow.com/questions/4872007/where-does-this-come-from-coding-utf-8">Where does this come from: -*- coding: utf-8 -*-</a></li>
<li><a href="https://stackoverflow.com/questions/41680533/is-coding-utf-8-also-a-comment-in-python">Is '# -*- coding: utf-8 -*-' also a comment in Python?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>No, Python 2 only supports ASCII names. From <a href="https://docs.python.org/2/reference/lexical_analysis.html#identifiers" rel="noreferrer">the language reference</a>:</p>
<pre><code>identifier ::=  (letter|”_”) (letter | digit | “_”)*
letter     ::=  lowercase | uppercase
lowercase  ::=  “a”…”z”
uppercase  ::=  “A”…”Z”
digit      ::=  “0”…”9”
</code></pre>
<p>Compared that the much longer <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="noreferrer">Python 3 version</a>, which does have full Unicode names.</p>
<p>The practical problem the PEPs solve is that before, if a byte over 127 appeared in a source file (say inside a unicode string), then Python had no way of knowing which character was meant by that as it could have been any encoding. Now it's interpreted as UTF-8 by default, and can be changed by adding such a header.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think that those two articles are about encoding in the sense of your variable name being a Beta-symbol for example, but regarding the encoding in the variable value.</p>
<p>so if you change your code to this example:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

a = 'abc?´ƒ©'
b = 'My name is'
c = '°ß?ˆ†ˆ? ßå®åø©ˆ'
print 'a =', a # by the way, the brackets are only used in python 3, so they are also being displayed when running the code in python 2.7
print 'b =', b, 'c =', c 
</code></pre>
<p>Hope that answers your question</p>
<p>Greetings
Frame</p>
</div>
<span class="comment-copy">I am sorry but I am unable to understand the meaning of "a byte over 127"? Do you mean to say that the ASCII code of a character is over 127?</span>
<span class="comment-copy">Yes. ASCII defines the meanings of bytes 0 to 127. Almost all encodings you'll see encode those values the same as ASCII. But values over 127 are not ASCII and are usually completely different characters in different encodings.</span>
<span class="comment-copy">This is the classic article: <a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" rel="nofollow noreferrer">joelonsoftware.com/2003/10/08/…</a> .</span>
<span class="comment-copy">This would be a hack around the problem rather than a solution. BTW, my problem here is interoperability between Python2 and Python3.</span>
<span class="comment-copy">@KshitijSaraogi you can't expect perfect interoperability between the versions, there are things you can do in Python 3 that you simply can't do in Python 2. Special characters for variable names is one of those things.</span>
