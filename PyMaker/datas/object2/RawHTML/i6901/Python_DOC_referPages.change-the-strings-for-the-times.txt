<div class="post-text" itemprop="text">
<p>I'm working on my code as I'm checking on the <code>getTime1</code> to see if the strings is valid. If the strings is valid, I want to change the strings for the time to go 30 minutes backward in each time when the <code>getTime1</code> strings is valid. </p>
<p>Example: The <code>getTime1</code> strings show <code>12:00AM</code> so I want to change it to 30 minutes backward to make it to show <code>11:30PM</code>. If the <code>getTime1</code> strings show <code>12:30PM</code>, I want to change it to 30 minutes backward to make it to show <code>12:00PM</code>.</p>
<p>Here is the code:</p>
<pre><code>getTime1 = self.getControl(344).getLabel()

if day_date &gt;= 0 and day_date &lt;= 6:
    if getTime1 == '12:00AM':
       self.getControl(344).setLabel('11:30PM')
    elif getTime1 == '12:30AM':
        self.getControl(344).setLabel('12:00AM')
    elif getTime1 == '1:00AM':
        self.getControl(344).setLabel('12:30AM')
    elif getTime1 == '1:30AM':
        self.getControl(344).setLabel('1:00AM')
    elif getTime1 == '2:00AM':
        self.getControl(344).setLabel('1:30AM')
    elif getTime1 == '2:30AM':
        self.getControl(344).setLabel('2:00AM')
    elif getTime1 == '3:00AM':
        self.getControl(344).setLabel('2:30AM')
    elif getTime1 == '3:30AM':
        self.getControl(344).setLabel('3:00AM')
    elif getTime1 == '4:00AM':
        self.getControl(344).setLabel('3:30AM')
    elif getTime1 == '4:30AM':
        self.getControl(344).setLabel('4:00AM')
    elif getTime1 == '5:00AM':
        self.getControl(344).setLabel('4:30AM')
    elif getTime1 == '5:30AM':
        self.getControl(344).setLabel('5:00AM')
    elif getTime1 == '6:00AM':
        self.getControl(344).setLabel('5:30AM')
    elif getTime1 == '6:30AM':
        self.getControl(344).setLabel('6:00AM')
    elif getTime1 == '7:00AM':
        self.getControl(344).setLabel('6:30AM')
    elif getTime1 == '7:30AM':
        self.getControl(344).setLabel('7:00AM')
    elif getTime1 == '8:00AM':
        self.getControl(344).setLabel('7:30AM')
    elif getTime1 == '8:30AM':
        self.getControl(344).setLabel('8:00AM')
    elif getTime1 == '9:00AM':
        self.getControl(344).setLabel('8:30AM')
    elif getTime1 == '9:30AM':
        self.getControl(344).setLabel('9:00AM')
    elif getTime1 == '10:00AM':
        self.getControl(344).setLabel('9:30AM')
    elif getTime1 == '10:30AM':
        self.getControl(344).setLabel('10:00AM')
    elif getTime1 == '11:00AM':
        self.getControl(344).setLabel('10:30AM')
    elif getTime1 == '11:30AM':
        self.getControl(344).setLabel('11:00AM')
    elif getTime1 == '12:00PM':
        self.getControl(344).setLabel('11:30AM')
    elif getTime1 == '12:30PM':
        self.getControl(344).setLabel('12:00PM')
    elif getTime1 == '1:00PM':
        self.getControl(344).setLabel('12:30PM')
    elif getTime1 == '1:30PM':
        self.getControl(344).setLabel('1:00PM')
    elif getTime1 == '2:00PM':
        self.getControl(344).setLabel('1:30PM')
    elif getTime1 == '2:30PM':
        self.getControl(344).setLabel('2:00PM')
    elif getTime1 == '3:00PM':
        self.getControl(344).setLabel('2:30PM')
    elif getTime1 == '3:30PM':
        self.getControl(344).setLabel('3:00PM')
    elif getTime1 == '4:00PM':
        self.getControl(344).setLabel('3:30PM')
    elif getTime1 == '4:30PM':
        self.getControl(344).setLabel('4:00PM')
    elif getTime1 == '5:00PM':
        self.getControl(344).setLabel('4:30PM')
    elif getTime1 == '5:30PM':
        self.getControl(344).setLabel('5:00PM')
    elif getTime1 == '6:00PM':
        self.getControl(344).setLabel('5:30PM')
    elif getTime1 == '6:30PM':
        self.getControl(344).setLabel('6:00PM')
    elif getTime1 == '7:00PM':
        self.getControl(344).setLabel('6:30PM')
    elif getTime1 == '7:30PM':
        self.getControl(344).setLabel('7:00PM')
    elif getTime1 == '8:00PM':
        self.getControl(344).setLabel('7:30PM')
    elif getTime1 == '8:30PM':
        self.getControl(344).setLabel('8:00PM')
    elif getTime1 == '9:00PM':
        self.getControl(344).setLabel('8:30PM')
    elif getTime1 == '9:30PM':
        self.getControl(344).setLabel('9:00PM')
    elif getTime1 == '10:00PM':
        self.getControl(344).setLabel('9:30PM')
    elif getTime1 == '10:30PM':
        self.getControl(344).setLabel('10:00PM')
    elif getTime1 == '11:00PM':
        self.getControl(344).setLabel('10:30PM')
    elif getTime1 == '11:30PM':
        self.getControl(344).setLabel('11:00PM')
</code></pre>
<p>But the problem is the <code>getTime1</code> strings will only show 12 hours time.</p>
<p>I'm wondered if there is a way if I could be able to reduce the code to make it to go with something like in 6-7 lines instead of 97 lines?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>if getTime1 == '12:00AM':
    self.getControl(344).setLabel('11:30PM')
elif getTime1 == '12:00PM':
    self.getControl(344).setLabel('11:30AM')
else:
    ind = getTime1.find(':')
    if getTime1[ind+1:ind+3]=='30':
        getTime1 = getTime1[:ind]+':00'+getTime1[-2:]
        self.getControl(344).setLabel(getTime1)  
    else: 
        getTime1 = str(int(getTime1[:ind])-1)+':30'+getTime1[-2:]
        self.getControl(344).setLabel(getTime1)  
</code></pre>
<p>Except for the two special cases, this program finds the <code>:</code>, checks if <code>30</code> is present, if it is then it keeps the current hour and makes a new string with <code>AM</code>/<code>PM</code> label and hour intact but with <code>00</code> instead of <code>30</code>. If the ending is <code>00</code> it turns the hour portion into an <code>int</code>, subtracts 1, turns it back to a string, adds <code>30</code> in the minute section and again preserves the <code>AM</code>/<code>PM</code> part. </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there are easier ways. You might be interested in the built-in <a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer">time module</a>. It lets you parse strings and perform operations on them. You could also do something like:</p>
<pre><code>time = time.split(':')
hour = int(time[0])
minute = int(time[1][:2])
</code></pre>
<p>And then you could figure out how to subtract 30 minutes. For validating you could use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a>.</p>
</div>
<span class="comment-copy">Holy cow! so many <code>if/elif</code> statements. Can you create a dictionary?</span>
<span class="comment-copy">No, I can't create a dictionary as I have to use the code that I wrote but I am unable to find out how to reduce the <code>if/elif</code> statements. Maybe you could post an example how I could do that with 12 hours clock?</span>
<span class="comment-copy">No, this is not the answer I am looking for. I am looking for the how to reduce the code the one I wrote as I want to change the strings. Example: <code>if getTime1 &gt;= 12 and getTime1 &lt;= 11:   self.getControl(344).setLabel(changetime + 'AM') else: self.getControl(344).setLabel(changetime + 'PM')</code> something like that but the problem is the <code>getTime1</code> will show the strings like <code>12:00AM</code>, <code>12:30AM</code>, <code>1:00AM</code> or whatever it is as it is a 12 hours clock?</span>
