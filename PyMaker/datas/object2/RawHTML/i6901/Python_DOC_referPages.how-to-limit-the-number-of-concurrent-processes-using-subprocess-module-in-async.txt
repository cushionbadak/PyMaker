<div class="post-text" itemprop="text">
<pre><code>import asyncio
import asyncio.subprocess
args="blah blah argument "     
create=asyncio.create_subprocess_shell(args,stdout=asyncio.subprocess.PIPE)
proc = await create
output= await proc.stdout.read( )
</code></pre>
<p>This is a part of my server code , which gets 1000s of parallel hits from clients.Now how should i limit the maximum number of subprocesses created by the server to run the argument blah blah . As this is code is using 100% of my cpu. I need to deploy other servers on smae cpu</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore" rel="nofollow noreferrer">asyncio.Semaphore</a> is a way of limiting internal counter of simultaneous jobs:</p>
<pre><code>sem = asyncio.Semaphore(10)

async def do_job(args):
    async with sem:  # Don't run more than 10 simultaneous jobs below
        proc = await asyncio.create_subprocess_shell(args, stdout=PIPE)
        output = await proc.stdout.read()
        return output
</code></pre>
<p>Note, you should be sure count of jobs doesn't increase much faster then you can actually do them. Otherwise, you'll need something more complex than that.</p>
</div>
<span class="comment-copy">Is it worth considering something like Celery and RabbitMQ? It might give you more scaleability and finer control in the long run. Just a thought.</span>
<span class="comment-copy">The client connects through websocket. And the process i run is cpu bound .so i needed asynchronus support ,that made me to prefer asyncio . Does Celery and RMQ support this? I never used them :/</span>
<span class="comment-copy">Celery is an asynchronous task queue, whereas RabbitMQ is the task broker. This article gives a nice example - <a href="http://suzannewang.com/celery-rabbitmq-tutorial/" rel="nofollow noreferrer">suzannewang.com/celery-rabbitmq-tutorial</a></span>
<span class="comment-copy">It might not be suitable for your application, but worth exploring if you haven't come across it before.</span>
