<div class="post-text" itemprop="text">
<p>I'm coming from a Ruby/Rspec world where it is very simple to mock and setup tests/expects() statements to test static methods.</p>
<p>I was wondering if there is a simple way to test same things in Python.  Please disregard what the code is actually doing (i have changed many names in it) I have the following code:</p>
<pre><code>def create_models(pr_dict):
    facility = FacilityCreator.doit(pr_dict)

    p = PCreator.doit(facility, pr_dict)

    pr = PRCreator.doit(p, p.recent, pr_dict)

    models_affected = {'f': f,
                       'pr': pr,}

    return models_affected
</code></pre>
<p>I have looked at unittest and unittest.mock but it doesn't seem to be eloquent solution if I have many static methods in my method. In other words, I would be doing a @patch within a @patch, etc. etc. </p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to take a look at the python <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest module</a>. It has mocking and patching modules</p>
</div>
<span class="comment-copy">Thanks. Have done that but and looked at mock as well. it's not answering my 'static methods' question clearly.</span>
<span class="comment-copy">You can create a "Mock Class" which has the methods you want to mock and the patch the entire class to avoid nested patch declarations</span>
