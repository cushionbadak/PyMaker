<div class="post-text" itemprop="text">
<p>I've got a script which is using argparse to pull flags from the command line and using socket to validate an IP Address. So far it works if I'm just using the standard IPv4 X.X.X.X format. What I want to do is validate an IP Address that includes a CIDR notation. How can I modify my bit of code to validate the 2-digit integer in the CIDR field (ie: 192.168.2.1/32)</p>
<pre><code>import argparse
import socket

parser = argparse.ArgumentParser()
parser.add_argument("-i", "--ipaddr")
args = parser.parse_args()

# Validate IP Address Given in (-i) argparse
try:
        s = socket.inet_aton(args.ipaddr)
except socket.error:
        print ""
        print("Bad IP Address entered")
        print ""
        sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Python 3</h3>
<p>There is an <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer">ipaddress</a> module that may do the job.</p>
<p>The constructor of the class <code>Ip4Network</code> handles both <code>255.255.255.255</code> and <code>255.255.255.255/32</code> (and also IPv6 format, with <code>Ip6Network</code>)</p>
<p>So you may add in your code</p>
<pre><code>import ipaddress
</code></pre>
<p>and create an <code>Ip4Network</code> with the code:</p>
<pre><code>try:
    ip_addr = ipaddress.ip_address(args.ipaddr)
except ValueError:
    # handle bad ip
</code></pre>
<p>Than, continue with your code on the socket:</p>
<pre><code>socket.inet_aton(str(ip_addr))
</code></pre>
<p>you have only to convert it in a string.</p>
<h3>Python 2.7</h3>
<p>The <code>ipaddress</code> must be installed from the repository (<code>py2-ipaddress</code>) and has some issue between <code>str</code> and <code>bytearray</code> interpretation of string (refer <a href="https://pypi.python.org/pypi/py2-ipaddress#changes-from-py2-ipaddress-2-0-1-and-earlier" rel="nofollow noreferrer">here</a>)</p>
<p>So it works in my experiments if you do:</p>
<pre><code>ipaddress.ip_address(bytearray('192.168.1.1'))
ipaddress.ip_network(u'10.0.0.0/24')
</code></pre>
</div>
<span class="comment-copy">I tried this suggestion and it just errors out for both 192.168.2.1 and 192.168.2.1/32. Does having Python 2.7.5 make a difference with import ipaddress?</span>
<span class="comment-copy">Let me check...</span>
<span class="comment-copy">Please check the answer again...</span>
<span class="comment-copy">Thanks. That works.</span>
