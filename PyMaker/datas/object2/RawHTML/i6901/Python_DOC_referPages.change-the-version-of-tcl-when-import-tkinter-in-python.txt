<div class="post-text" itemprop="text">
<p>I use <code>import tkinter</code> to perform <code>Tcl</code> script.</p>
<p>Such as:</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>import tkinter
runTCL = tkinter.Tk()
runTCL.tk.eval('puts [info tclversion]')</code></pre>
</div>
</div>
</p>
<p>The default <code>Tcl</code> lib installed in my <code>Python3.5</code> is <code>Tcl8.6</code>.</p>
<p>What I intent to do is that access IXIA and automatically configure it by script.</p>
<p>The problem is the <strong>APIs</strong> provides by my IXIA (with <code>IxOS4.10</code>) only can be accessed by <code>Tcl8.4</code> lib, newer versions are unacceptable.</p>
<p>I knew it might be easy in Unix-like system by using <code>./configure --with-tcltk-libs</code> and something like that.</p>
<p>But how could i re-build my <code>Python3.5</code> with <code>Tcl8.4</code> lib when i <code>import tkinter</code> on my <code>Windows-64bit</code> machine?</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way may be to run the code to access the IXIA as a <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> so that it can use Tcl 8.4 without disrupting the version used by Python (which would have a lot of other consequences). Now Tcl 8.4 is no longer supported <em>at all</em>, but the most recent version of Tcl is 8.4.20, and came out only a few years ago so it is largely compatible with current build systems. (You can get the 8.4.20 source code from <a href="https://sourceforge.net/projects/tcl/files/Tcl/8.4.20/" rel="nofollow noreferrer">SourceForge</a>.)</p>
<p>When you are building Tcl, assuming you are targeting Unix, you can configure where it will install using the <code>--prefix=</code> option to <code>configure</code>; the default location is <code>/usr/local</code> (e.g., the <code>tclsh8.4</code> binary goes in <code>/usr/local/bin</code>, the support libraries go in <code>/usr/local/lib</code>, the documentation goes in <code>/usr/local/man</code>, â€¦). If you have Tcl packages elsewhere that you want to use, the <code>TCLLIBPATH</code> environment variable can be used to say where they are. Also, if you are running as a subprocess, you may want to tune the level of buffering used on standard output:</p>
<pre><code># The default with terminals is line. The default with pipes is full.
fconfigure stdout -buffering line
</code></pre>
<p>In general, you will probably be substituting <code>runTCL.tk.eval</code> in your Python code for printing the code to run to the subprocess pipe and reading the result back. There's going to be a need for a bit of work to make that work neatly, but that sort of thing has been discussed in other questions here. The only major complication is really that you're working with an unsupported version of the code for your subprocess.</p>
</div>
<span class="comment-copy">Please read python.org/download/mac/tcltk. You'll discover there that you can't change the Tk version without recompiling and relinking the _tkinter module in Python</span>
<span class="comment-copy">@MohhamadHasham Yes, that's what i'm asking. I need to re-build and re-compiling my Python. But i have no idea how to do.</span>
<span class="comment-copy">The problem is that you can't, as written in the docs.You have to think other way round. :-)</span>
<span class="comment-copy">Tcl 8.4.0 is 15 years old at this point. Even the most recent point release is over 10  years old. I suspect it would be easier to modify  your scripts than it would be to recompile back to a 10-15  year old version of Tcl.</span>
<span class="comment-copy">@BryanOakley Exactly. But i don't think i have ability to modify these old version IXOS APIs &amp; scripts. Thanks for the advice! :(</span>
<span class="comment-copy">Very thankful to this subprocess solution, simpler than i thought.</span>
