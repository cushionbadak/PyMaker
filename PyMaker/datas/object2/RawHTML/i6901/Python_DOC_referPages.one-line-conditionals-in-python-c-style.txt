<div class="post-text" itemprop="text">
<p>I tried to replicate C++ style single line conditionals in Python like so:</p>
<p>I have a function defined : <code>isPalidrome (mystr)</code> - returns <code>True</code> if <code>mystr</code> is a palidrome,<code>False</code> otherwise.  The function works. </p>
<p>Now I have a simple main function like so:   </p>
<pre><code>mystr =''
isitapalindromealready = lambda : if isPalindrome(mystr) ==True:    return "" else return 'not'
while mystr != 'quit':
    mystr = input("enter a string: ")
    print  ('{} is {} a palindrome'.format(mystr, isitapalindromealready())
</code></pre>
<p>But i get an Syntax error - </p>
<pre><code>  File "scratch1.py", line 45
    isitapalindromealready = lambda : if isPalindrome(mystr) ==True:    return "" else return 'not'
                                       ^
SyntaxError: invalid syntax
</code></pre>
<p>I did check a similar thread that comes very close to replicating my logic above (it just does not call the lambda as a function anywhere).</p>
<p><a href="https://stackoverflow.com/questions/15772617/conditional-statement-in-a-one-line-lambda-function-in-python">Conditional statement in a one line lambda function in python?</a></p>
<p>However, none of the answers explain WHY it is a syntax error. If you ignore PEP 8, the syntax is valid unless you you cannot include <code>else</code> in the same line as <code>if</code>.  </p>
<p>Any help, options, alternative considerations ? 
BTW: I wrote this simple program to check on this feature for reducing the logic size of much larger modules. I know very well that I can get away with checking if its a palindrome within the <code>isPalindrome</code> function. Thats not the point of my question. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can fit your conditionals on one line, definitely. This is how you do it in python.</p>
<pre><code>isitapalindromealready = lambda x: "" if isPalindrome(x) else "not"
</code></pre>
<p>Sure, you can have lambdas work with global variables, but that is not how I would recommend doing it. A well written lambda should be a pure function, meaning you would pass the parameter to it. Additionally, the <code>lambda</code> needs no <code>return</code> as it is implied. Now, you must call your lambda as such:</p>
<pre><code>isitapalindromealready(mystr)
</code></pre>
<hr/>
<pre><code>isitapalindromealready = lambda x: "" if isPalindrome(x) else "not"
while mystr != 'quit':
    mystr = input("enter a string: ")
    print  ('{} is {} a palindrome'.format(mystr, isitapalindromealready(mystr))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hope that his explanation help you. From the <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">doc</a>:</p>
<blockquote>
<p>lambda_expr        ::=  “lambda” [parameter_list]: expression</p>
<p>lambda_expr_nocond ::=  “lambda” [parameter_list]: expression_nocond</p>
<p>Lambda expressions (sometimes called lambda forms) are used to create
  anonymous functions. The expression lambda arguments: expression
  yields a function object. The unnamed object behaves like a function
  object defined with:</p>
<p>def (arguments):
      return expression</p>
</blockquote>
<p>So, you have to pass an expression to the lambda. A <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">Conditional expressions</a> (using the if/else keyword) is a valid expression. You can't pass just a <a href="https://docs.python.org/3/reference/compound_stmts.html#the-if-statement" rel="nofollow noreferrer">if/else</a> sentence. A valid code could be:</p>
<pre><code>isitapalindromealready = lambda x: "" if isPalindrome(x) else "not"
</code></pre>
</div>
<span class="comment-copy">@DYZ: Note that your previous edit invalidated the error message posted, so I rolled it back.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">Does Python have a ternary conditional operator?</a></span>
<span class="comment-copy">Thanks it worked - mistakes i made - were 1) thinking in terms of C++ - i was thinking of lambdas a #defines rather than function expressions of their own 2) forgot the special form of if - "" if... 3) included semicolons in the if statement :).</span>
<span class="comment-copy">@ssscld Glad to be able to help.</span>
