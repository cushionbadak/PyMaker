<div class="post-text" itemprop="text">
<p>I am trying to make a nested loop to check if a user's input should be an integer or a float.
In my calculator, rate per compounds is stored in an integer based on text input, however I want to add the functionality for the else statement to check if the input is a whole number or if its decimal. If its a whole number, I want the text to produce the number without a .0, but if its a float, such as 6.5, I want to keep that variable as a float.</p>
<pre><code>rerun = True

while (rerun):
    print ("Welcome to the interest calculator")
    balance = input ("\nPlease enter your account balance: ")
    interest = input ("\nWhat is the interest rate on the account? (decimal): ")
    rate = input ("\nWhat is the rate that interest is applied? "
                  "\n(Monthly, Quarterly, Annually, Biannually): ")
    balance = float(balance)
    interest = float(interest)
#Convert text to rate variable

    if (rate == "Monthly" or rate == "monthly"):
        compounds = 12
    elif (rate == "Quarterly" or rate == "quarterly"):
        compounds = 4
    elif (rate == "Annually" or rate == "annually"):
        compounds = 1
    elif (rate == "Biannually" or rate == "biannually"):
        compounds = 2
</code></pre>
<h1>This is where I think the check should be</h1>
<pre><code>    else:
        compounds = float(rate)
#Display Data
    print ('interest = ',  type(interest))
    print ('balance = ',  type(balance))
    print ('compounds = ', type(compounds))

    if (compounds == 1):
        print ("\nYour account has a balance of $" + str(balance), "dollars with an interest rate \n"
               "of ", str(interest) + "%", " being applied", str(compounds), "time per year")
    else:
        print ("\nYour account has a balance of $" + str(balance), "dollars with an interest rate \n"
               "of ", str(interest) + "%", " being applied", str(compounds), "times per year")

    total = interest * balance * compounds

    if (total &lt; 1):
        print ("Calculated total = $" + "{:.2f}".format(total) + " cents")
    else:
        print ("Calculated total = $" + "{:.2f}".format(total) + " dollars")
    #while loop to rerun program

    answer = input ("\nType (y) to rerun the program: ")
    if (answer == "y" or "Y"):
        rerun = True
        print ("\n")
    else:
        rerun = False
</code></pre>
<p>So if a user inputs 1 for rate, which would fall in the else statement as it is not one of my predefined words, the "Your account balance......" should display compounds as an int.
If a user inputs 1.5 for rate, which would fall in the else statement as it is not one of my predefined words, the "Your account balance......." should display compounds as a float.</p>
<p>Can anyone offer me some input on how I can approach this? I have tried writing it out using remainders, subtracting and adding numbers to check if compounds is &gt; than a whole number, but I cant seem to get it to write correctly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>float</code> initially, then check if <code>is_integer</code> and handle accordingly:</p>
<pre><code>&gt;&gt;&gt; f = float(input())
3
&gt;&gt;&gt; f
3.0
&gt;&gt;&gt; f.is_integer()
True
</code></pre>
<p>Or even better, use the <code>g</code> <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">format specifier</a>:</p>
<pre><code>&gt;&gt;&gt; f = 1.000
&gt;&gt;&gt; f
1.0
&gt;&gt;&gt; print("{:g}".format(f))
1
&gt;&gt;&gt; f = 3.14
&gt;&gt;&gt; print("{:g}".format(f))
3.14
</code></pre>
<blockquote>
<p>General format. For a given precision p &gt;= 1, this rounds the number
  to p significant digits and then formats the result in either
  fixed-point format or in scientific notation, depending on its
  magnitude.</p>
<p>The precise rules are as follows: suppose that the result formatted
  with presentation type 'e' and precision p-1 would have exponent exp.
  Then if -4 &lt;= exp &lt; p, the number is formatted with presentation type
  'f' and precision p-1-exp. Otherwise, the number is formatted with
  presentation type 'e' and precision p-1. <strong>In both cases insignificant
  trailing zeros are removed from the significand, and the decimal point
  is also removed if there are no remaining digits following it.</strong></p>
</blockquote>
</div>
