<div class="post-text" itemprop="text">
<p>Hi Guys I am struggling for the past 3 days getting the following working:</p>
<p>I can not test this on localhost as the payment gateway needs to be on a live server.</p>
<p>The data does get saved to the payfast model but not the bookings model</p>
<p>My code as follows</p>
<p>Bookings View</p>
<pre><code>class ViewBookingSummery(LoginRequiredMixin, FormView):
    login_url = '/login/'

    def get(self, request, slug, pk, guests):
        if pk:
            events_data = Events.objects.get(pk=pk)
            user = User.objects.get(pk=request.user.id)
            if events_data:
                formset = EventBookingForm()
                forms = PayFastForm(initial={
                    # required params:
                    'amount': int(events_data.price) * int(guests),
                    'item_name': events_data.title,
                    'name_first': user.first_name,
                    'name_last': user.last_name,
                    'email_address': user.email,

                    'custom_str1': user.id,
                    'custom_str2': events_data.id,
                    'custom_str3': events_data.date,
                    'custom_str4': guests,

                    # optional params:
                    'return_url' : settings.DOMAIN_NAME + '/bookings/',
                    'cancel_url' : settings.DOMAIN_NAME + '/booking-summery/' + slug + '/' + pk + '/' + guests + '/'
                    # ... etc.
                }, user=user)

                context = {'events_data': events_data, 'guests': guests, 'formset': formset, 'forms': forms}
                return render(request, 'bookings/booking-summery.html', context)
            else:
                return HttpResponseRedirect('/')
        else:
            return HttpResponseRedirect('/')
</code></pre>
<p>My Payment Gateway model (Saves in the database after successful payment)</p>
<pre><code>class PayFastOrder(models.Model):

    # see http://djangosnippets.org/snippets/2180/
    __metaclass__ = readable_models.ModelBase

    # Transaction Details
    m_payment_id = models.AutoField(primary_key=True)
    pf_payment_id = models.CharField(max_length=40, unique=True, null=True, blank=True)
    payment_status = models.CharField(max_length=20, null=True, blank=True)
    item_name = models.CharField(max_length=100)
    item_description = models.CharField(max_length=255, null=True, blank=True)
    amount_gross = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    amount_fee = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    amount_net = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)

    # The series of 5 custom string variables (custom_str1, custom_str2...)
    # originally passed by the receiver during the payment request.
    custom_str1 = models.CharField(max_length=255, null=True, blank=True)
    custom_str2 = models.CharField(max_length=255, null=True, blank=True)
    custom_str3 = models.CharField(max_length=255, null=True, blank=True)
    custom_str4 = models.CharField(max_length=255, null=True, blank=True)
    custom_str5 = models.CharField(max_length=255, null=True, blank=True)

    # The series of 5 custom integer variables (custom_int1, custom_int2...)
    # originally passed by the receiver during the payment request.
    custom_int1 = models.IntegerField(null=True, blank=True)
    custom_int2 = models.IntegerField(null=True, blank=True)
    custom_int3 = models.IntegerField(null=True, blank=True)
    custom_int4 = models.IntegerField(null=True, blank=True)
    custom_int5 = models.IntegerField(null=True, blank=True)

    # Payer Information
    name_first = models.CharField(max_length=100, null=True, blank=True)
    name_last = models.CharField(max_length=100, null=True, blank=True)
    email_address = models.CharField(max_length=100, null=True, blank=True)

    # Receiver Information
    merchant_id = models.CharField(max_length=15)

    # Security Information
    signature = models.CharField(max_length=32, null=True, blank=True)

    # Utility fields
    created_at = models.DateTimeField(default=datetime.now)
    updated_at = models.DateTimeField(default=datetime.now)
    request_ip = models.GenericIPAddressField(null=True, blank=True)
    debug_info = models.CharField(max_length=255, null=True, blank=True)
    trusted = models.NullBooleanField(default=None)
    user = models.ForeignKey(User, null=True, blank=True)
</code></pre>
<p>My bookings model</p>
<pre><code>class Bookings(models.Model):
    OPTIONS_STATUS = (
        ('y', "Yes"), 
        ('n', "No"), 
        ('p', "Pending")
    )
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    event = models.ForeignKey(Events, on_delete=models.CASCADE)
    eventdate = models.DateField()
    event_amount = models.CharField(max_length=50, blank=True, default='')
    guests = models.CharField(max_length=50, blank=True, default='')
    bookingstatus = models.CharField(max_length=50, default='p', blank=True, choices=OPTIONS_STATUS)
    created_date = models.DateTimeField(auto_now_add=True)
    modified_date = models.DateTimeField(auto_now=True)

    class Meta:
        app_label = 'bookings'
        verbose_name = _("Bookings")
        verbose_name_plural = _("Bookings")
</code></pre>
<p>Once the payment goes through the following code runs</p>
<pre><code>def notify_handler(request):
    """
    Notify URL handler.

    On successful access 'payfast.signals.notify' signal is sent.
    Orders should be processed in signal handler.
    """

    id = request.POST.get('m_payment_id', None)
    order = get_object_or_404(PayFastOrder, pk=id)

    form = NotifyForm(request, request.POST, instance=order)
    if not form.is_valid():
        errors = form.plain_errors()[:255]
        order.request_ip = form.ip
        order.debug_info = errors
        order.trusted = True
        order.save()
        raise Http404

    order = form.save()

    obj = Bookings()  # gets new object
    obj.user_id = int(request.POST.get('custom_str1', None))
    obj.event_id = int(request.POST.get('custom_str2', None))
    obj.eventdate = '1992-03-17'
    obj.event_amount = '600'
    # finally save the object in db
    obj.save()

    signals.notify.send(sender=notify_handler, order=order)

    return HttpResponse()
</code></pre>
<p>for some reason this does not work</p>
<pre><code>obj = Bookings()  # gets new object
obj.user_id = int(request.POST.get('custom_str1', None))
obj.event_id = int(request.POST.get('custom_str2', None))
obj.eventdate = '1992-03-17'
obj.event_amount = '600'
# finally save the object in db
obj.save()
</code></pre>
<p>how do I get values from the form to show in the booking model</p>
</div>
<div class="post-text" itemprop="text">
<p>As i can see your final code for saving obj in <strong>Booking</strong> model, there are following things you need to take care of.</p>
<ol>
<li><p>Make sure below line of code should return an parsable int string not None or any random string as <em>user</em> and <em>event</em> are not nullable field of <strong>Booking</strong> model</p>
<pre><code>request.POST.get('custom_str1', None)
request.POST.get('custom_str2', None)
</code></pre></li>
<li><p>As <em>eventdate</em> field is DateField it will not accept any date string you pass. </p>
<blockquote>
<p><strong>Note:</strong> Format strings use Pythonâ€™s <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">datetime</a> module syntax.</p>
</blockquote>
<p>for your case it will look like.</p>
<pre><code>datetime.strptime('1992-03-17','%Y-%m-%d')
</code></pre></li>
</ol>
<p>For more information you can visit <a href="https://docs.djangoproject.com/en/1.8/ref/settings/#date-input-formats" rel="nofollow noreferrer">https://docs.djangoproject.com/en/1.8/ref/settings/#date-input-formats</a></p>
</div>
