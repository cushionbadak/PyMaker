<div class="post-text" itemprop="text">
<p>I would like to check a tensorflow variable and set it to zero if it is NaN.</p>
<p>How can I do this? The following trick seems not to work:</p>
<pre><code>if tf.is_nan(v) is True:
    v = 0.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If <code>v</code> is a 0d tensor, you might use <code>tf.where</code> to test and update the value:</p>
<pre><code>import numpy as np

v = tf.constant(np.nan)                  # initialize a variable as nan  ​
v = tf.where(tf.is_nan(v), 0., v)
​
with tf.Session() as sess:    
    print(sess.run(v))

# 0.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use tf.is_nan in combination with tf.cond to change values if the tensorflow value is NAN.</p>
</div>
<div class="post-text" itemprop="text">
<p>Libraries like numpy (<em>in this case, tensorflow</em>) often have their own boolean implementations, comparing the memory addresses of a custom boolean type, and CPython's built in using <code>is</code> is going to result in erratic behaviour.</p>
<p>Either just check implicit boolean-ness -&gt; <code>if tf.is_nan(v)</code> or do a equality comparison <code>if tf.is_nan(v) == True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I hope this can help you.   <a href="https://docs.python.org/3/library/math.html#math.isnan" rel="nofollow noreferrer">math.is_nan</a></p>
<pre><code>import math
if math.isnan(float(v)):
    v = 0.0
</code></pre>
</div>
<span class="comment-copy">Are you certain that is_nan() returns a boolean?</span>
<span class="comment-copy">It returns a tensor of type boolean</span>
<span class="comment-copy">What is the shape of <code>v</code>? is <code>v</code> a scalar?</span>
<span class="comment-copy">It is the cost of optimization. So, yes it is a tensor containing a scalar number.</span>
<span class="comment-copy">Not a tensorflow operaton, unfortunately useless answer</span>
