<div class="post-text" itemprop="text">
<p><em>Python 3.5. Sqlite3</em></p>
<p>The goal is to have a method that add records to a log table but it doesn't knows whether that method will crash:</p>
<ol>
<li>open logger connection</li>
<li>logger insert "Method starts"</li>
<li>do something</li>
<li>logger insert "I did something"</li>
<li>do another thing</li>
<li>logger insert "I did another thing"</li>
<li>logger insert "Method ends"</li>
<li>close logger connection</li>
</ol>
<p><strong>How do I commit that?</strong> </p>
<p>Until now while learning Sqlite I though I had to use as many <code>execute</code>as I wanted and just commit them before closing the connection to actually "save" the changes, something like this:</p>
<pre><code>conn = sqlite3.connect("myfile.db")
cursor = conn.cursor()
cursor.execute("INSERT INTO foo VALUES (?,?)", (var1, var2))
cursor.execute("INSERT INTO other VALUES (?,?)", (var1, var2))
cursor.execute("INSERT INTO another VALUES (?,?)", (var1, var2))
conexion.commit() # Save all
cursor.close()
conn.close()
</code></pre>
<p>But if we take into account that it can crash <strong>before</strong> it gets to the commit part, how would you do? why?</p>
<p>For reference, this is my real code:</p>
<pre><code>def connect(database):
    """Open a connection and a cursor to the database file provided."""
    conexion = sqlite3.connect(database + ".db")
    cursor = conexion.cursor()
    return (conexion, cursor)

def disconnect(conexion, cursor, savechanges=False):
    """Disconnect from database, closing the cursor first.
    Save the cursor data with a commit if specified.
    """
    cursor.close()
    if savechanges:
        conexion.commit()
    conexion.close()

def logger_query(cursor, comments):
    """It inserts into the log database an unique record with comments"""
    record_date = str(datetime.datetime.now())
    cursor.execute("INSERT INTO Log VALUES (?,?)", (comments, record_date))
</code></pre>
<p>Called as this:</p>
<pre><code>conexionlog, cursorlog = connect("Log")
logger_query(cursorlog, "Record starts")
#... Do something
logger_query(cursorlog, "Record something")
#... Do another something
logger_query(cursorlog, "Record another something")
#... Maybe I crash here...
logger_query(cursorlog, "Record ends")
disconnect(conexionlog, cursorlog, True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Updated based on comment clarifications:</h3>
<p>Per your comment, you don't mean an exception, but an actual hard termination (e.g. power failure). In that case, you need to commit your log queries individually, as a committed transaction is the only thing that's going to be persisted through a hard termination like that.</p>
<pre><code>def logger_query(cursor, comments):
    """It inserts into the log database an unique record with comments"""
    record_date = str(datetime.datetime.now())
    cursor.execute("INSERT INTO Log VALUES (?,?)", (comments, record_date))
    cursor.connection.commit()
</code></pre>
<hr/>
<h3>Previous answer:</h3>
<p>Assuming by <code>crash</code> you mean an exception gets raised, you can use a <a href="https://docs.python.org/3/tutorial/errors.html#defining-clean-up-actions" rel="nofollow noreferrer"><code>try</code>/<code>finally</code></a> block:</p>
<pre><code>conexionlog, cursorlog = connect("Log")
try:
    logger_query(cursorlog, "Record starts")
    #... Do something
    logger_query(cursorlog, "Record something")
    #... Do another something
    logger_query(cursorlog, "Record another something")
    #... Maybe I crash here...
    logger_query(cursorlog, "Record ends")
finally:
    disconnect(conexionlog, cursorlog, True)
</code></pre>
<p>The code in the <code>finally</code> block will be run even if the code in the <code>try</code> block raises an exception. Note however that only the code from the <code>try</code> block that has already run by the point of the exception will be run; the rest of the <code>try</code> block will not be run (execution will move directly to the <code>finally</code> block, followed by the exception continuing to raise up the stack).</p>
</div>
<span class="comment-copy">Umm... why not catch such an exception and do a commit in the <code>except</code> block?</span>
<span class="comment-copy">See my comment to @Amber. An exception wouldn't work.</span>
<span class="comment-copy">Hm maybe I wasn't clear with the crash. Let's put an stupid example: Someone unplugs the power wire from the computer. In that example, the script never gets to execute the <code>finally</code> part of your code either, but you would want to know what is the "last" saved records. That is my goal. So I would want to know how to properly save each individual record while keeping the connection and the cursor opened.</span>
<span class="comment-copy">In that case, you need to commit after every single log write you do. You can't hold off on committing while also protecting yourself against power-outage style crashes.</span>
<span class="comment-copy">So I can add a <code>conn.commit()</code> line at the <code>logger_query</code> method and nothing bad would happen? I though I could only commit once before closing the connection O,o (total newbie fail).</span>
<span class="comment-copy">You can commit as many times per connection as you want. (<a href="https://docs.python.org/2/library/sqlite3.html#sqlite3.Connection.commit" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a>)</span>
<span class="comment-copy">As per your last edit, You read my mind. Thank you for clarification :D</span>
