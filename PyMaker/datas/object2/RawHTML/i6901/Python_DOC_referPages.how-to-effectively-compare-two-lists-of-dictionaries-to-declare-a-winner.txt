<div class="post-text" itemprop="text">
<p>I have the following data in a list of dictionaries. How can I effectively compare these two according to the following rule, and conclude who the winner is? </p>
<blockquote>
<p>if any value in a list turns out to be more than all the other values
  of the other list , The list with bigger value will be declared the
  winner</p>
</blockquote>
<pre><code>s1=[{'link': 0}, {'link': 0}] 
s2=[{'link': 0}, {'link': 1}]
</code></pre>
<p>My Attempt was : </p>
<pre><code>for stat in s2:
    for stat1 in s1:
        if stat['link'] &gt;= stat1['link']:
            print('success')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to see which list has the biggest number, you can use the builtin <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">max function</a>:</p>
<pre><code>s1=[{'link': 0}, {'link': 0}] 
s2=[{'link': 0}, {'link': 1}]

maxes = max([[item["link"] for item in s1], [item["link"] for item in s2]])

if maxes[0] &gt; maxes[1]:
    print("S1 is greater than S2")
elif maxes[0] &lt; maxes[1]:
    print("S2 is greater than S1")
else:
    print("S1 and S2 are equal")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I assume that you consider the sequencing relevant. Your existing solution would compare every value in s1 against every value in s2. </p>
<p>You probably want to use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to marry the two sequences together. If you expect the sequences to have different lengths, use <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a> instead.</p>
<p>For example:</p>
<pre><code>def compare_same_lengths(s1, s2):
    for i1, i2 in zip(s1, s2):
        if i1['link'] &lt; i2['link']:
            return -1
        elif i1['link'] &gt; i2['link']:
            return 1

    return 0
</code></pre>
<p><strong>Edit:</strong></p>
<p>Based on your comment:</p>
<blockquote>
<p>if any value in a list turns out to be more than all the other values of the other list , The list with bigger value will be declared the winner</p>
</blockquote>
<p>you should probably use <code>max</code> and then just compare the two maxima:</p>
<pre><code>m1 = max(s1, key=operator.itemgetter('link'))
m2 = max(s2, key=operator.itemgetter('link'))

if m1['link'] &gt; m2['link']:
    return 1
elif m2['link'] &lt; m1['link']:
    return -1
else:
    return 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you were trying to break out of the nested loop? In which case, I suggest you wrap your code in a function so you can simply use <code>return</code> once you find an element in s2 greater than one in s1.</p>
<p>Anyway, assuming this is the strict definition: </p>
<blockquote>
<p>s2 is greater than s1 because one of the values in s2 turns out to be
  greater than in s1</p>
</blockquote>
<p>One linear solution is to first get the minimum of s1, then iteratively compare that with the elements in s2.</p>
<pre><code>def is_greater(s1, s2):
  s1_min = min(s1, key=lambda x: x['link']) # just `min(s1)` works for python 2.7
  for item in s2:
    if item['link'] &gt; s1_min['link']:
      return True
  return False    
</code></pre>
<p>Note that if you have s1 values of [0,1,2,3] and s2 values of [0,1,0,0] that would still result s2 &gt; s1 because at least one of the values in s2 is greater than at least one of the values in s1 (which i think doesn't really make sense as a definition of greater than :P )</p>
<p>EDIT: added key parameter in <code>min</code> function</p>
</div>
<span class="comment-copy">Are you sure your total ordering is precise enough? "s2 is greater than s1 because one of the values in s2 turns out to be greater than in s1"</span>
<span class="comment-copy">if any value in a list turns out to be more than all the other values of the other list , The list with bigger value will be declared the winner</span>
<span class="comment-copy">Just to be clear: What you are saying is that you do not need to compare element by element. The list with the biggest value is the winner. The description of the question does not reflect this statement. You should update the description of your question.</span>
<span class="comment-copy">Sure Will add that</span>
<span class="comment-copy">To make your description more clear you should write: "One of the values of s2 is greater than ALL the values of s1".</span>
<span class="comment-copy">You probably mean <code>any</code>.</span>
<span class="comment-copy">@AustinHastings I think you're right. I was trying to do a neutral comparison because if one element of S1 was greater, and one element of S2 was greater I thought that it shouldn't return that S1 was greater overall, but I guess that's was OP wants.</span>
<span class="comment-copy">This does not match the "s2 is greater than s1 because one of the values in s2 turns out to be greater than in s1"; it</span>
<span class="comment-copy">I updated my answer based on new information OP provided.</span>
<span class="comment-copy">This is a correct <i>and</i> pythonic answer.</span>
<span class="comment-copy">It is getting the below error "TypeError: '&gt;' not supported between instances of 'dict' and 'dict'"</span>
<span class="comment-copy">@Zuckerberg That's because <code>m1</code> and <code>m2</code> are the original dictionaries and not the values. Just use <code>m1['link'] &gt; m2['link']</code>, etc.</span>
<span class="comment-copy">@Zuckerberg updated.</span>
<span class="comment-copy">@AustinHastings -Thanks</span>
<span class="comment-copy">Thanks, Will this work if s1 and s2 turns out to have different number of elements also ?</span>
<span class="comment-copy">This list with the biggest value wins. This is what the OP wants.</span>
<span class="comment-copy">also min is not supported on a list of dictionaries.</span>
<span class="comment-copy">Yes, this will work if you  have different number of elements in the list. Ah you're right, min is not supported for a list of dictionaries. I'll edit the answer</span>
<span class="comment-copy">This is the error I am getting now :Traceback (most recent call last):   File "python", line 5, in &lt;module&gt; AttributeError: 'list' object has no attribute 'items'</span>
