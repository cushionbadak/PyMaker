<div class="post-text" itemprop="text">
<p>How do you use a method from the same class in this case? I am trying to make a tkinter scale that will update every time it is changed. How do I collect this value?</p>
<p>This is a snippet of the code</p>
<p>For example,</p>
<pre><code>class Humidity(Page):

   humidityValue = 0

   def __init__(self, *args, **kwargs):
      Page.__init__(self, *args, **kwargs)
      container = tk.Frame(self)
      container.pack(side="top", expand =True, fill = "both")

      humidityScale = tk.Scale(container, from_=0, to=60, tickinterval=10, width= 30,
                             orient="horizontal", borderwidth = 0, highlightthickness= 0, length=800, command=set_humidity)
      humidityLabel = tk.Label(container, text="Humidity(%)" , fg='White')
      humidityScale.pack(side="top")                            
      humidityScale.set(25)                                    #Sets humidity values to 25%
      humidityLabel.pack(side="bottom")
      humidityValue = humidityScale.get()

   def get_humidity(self):
      print self.humidityValue

   def set_humidity(val):
      humidityValue = val         
</code></pre>
<p>Will return an error saying : global name 'set_humidity' is not defined  </p>
</div>
<div class="post-text" itemprop="text">
<p>You forgot to add <code>self.</code> behind <code>humidityValue</code> when you were declaring the attributes in your <code>__init__</code>:</p>
<p><code>humidityValue = humidityScale.get()</code> should be <code>self.humidityValue = humidityScale.get()</code>.</p>
<p>This is needed so that both objects created using your class AND functions inside the class (as you have witnessed) can self-reference attributes.</p>
<p>You probably will need to do the same changes to other variables in your <code>__init__</code> (eg <code>humidityScale</code>, <code>humidityLabel</code>).</p>
<hr/>
<p>In regards to why your function <code>set_humidity</code> doesn't work - you forgot to add <code>self</code> as the first parameter of the function, just like you've done with <code>get_humidity</code></p>
</div>
<span class="comment-copy">Python != Java. Instance variables <i>require explicite reference</i>, in a method, this is through <i><code>self</code></i>, although note, the actual name <code>self</code> is a convention. You could use whatever you want, but it is always the <i>first argument to the method</i>.You should familiarize yourself with some Python OOP tutorials. Starting with the official <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">docs</a> would be good. Also note, it is not customary to use getters and setters in Python.</span>
<span class="comment-copy">@juanpa.arrivillaga Thank you, I was definitley thinking about it like it was Java, the distinction is now clear.</span>
<span class="comment-copy">Note also that you should not put <code>humidityValue = 0</code> at the class level unless you <i>actually want to create a static class variable</i>. However, since in your constructor you're going to assign to <code>self.humidityValue = &lt;something&gt;</code> you will <i>shadow the class-level variable with an instance variable</i>, making it pointless. This can also lead to subtle bugs later on.</span>
<span class="comment-copy">@pam Can you post the full trace-back error? Preferably in the main body of your question</span>
<span class="comment-copy">@pam Nevermind, I found your error</span>
<span class="comment-copy">It still gives me the same error I even tried doing what you suggested and     def set_humidity(val):       humidityValue = humidityScale.get() But then it says that humidityScale is not defined for humidityScale.get()</span>
<span class="comment-copy">@pam Check the bottom of my answer</span>
<span class="comment-copy">Thank you! Works</span>
