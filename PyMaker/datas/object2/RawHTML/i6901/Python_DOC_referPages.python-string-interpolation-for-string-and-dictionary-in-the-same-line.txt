<div class="post-text" itemprop="text">
<p>I have a dictionary and a datetime object I converted to string. How do I print the datetime string and several items from the dictionary in the same line?</p>
<p>For example:</p>
<pre><code>dictionary = {"_source": {"host": "host", "type": "type"}}
datetime = '25-08-2017 10:26:11'
</code></pre>
<p>This is what I'm trying to print:</p>
<pre><code>print("%s %(host)s %(type)s" % (datetime,dictionary["_source"]))
</code></pre>
<p>Getting an error on the datetime string:</p>
<pre><code>TypeError: format requires a mapping
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Like others have said it is probably the best to use <a href="https://docs.python.org/3.5/library/stdtypes.html#str.format" rel="nofollow noreferrer">str.format()</a>. The closest option with method <a href="https://docs.python.org/3.5/library/stdtypes.html#str.format" rel="nofollow noreferrer">str.format()</a> to your question is code which 
<a href="https://stackoverflow.com/users/8370836/violet-red">Violet Red</a> suggested in his <a href="https://stackoverflow.com/a/45885146/6476044">answer</a>:</p>
<pre><code>"{} {host} {type}".format(datetime,**dictionary["_source"])
</code></pre>
<p>But if you really want or need to use the old way of formatting (using <code>%</code>) then you can try some of these options:</p>
<ul>
<li><p><strong>Separating string into two or more strings</strong></p>
<p>Like <a href="https://stackoverflow.com/users/244297/eugene-yarmash">Eugene Yarmash</a> explained in his <a href="https://stackoverflow.com/a/45885233/6476044">answer</a> you can't mix ordinary and mapping format specifiers in same string, but you could separate it to two (or more) strings like this:</p>
<pre><code>'%s' % datetime + ' %(type)s %(host)s' % dictionary["_source"]
</code></pre>
<p>This will work but if you wanted to print <code>datetime</code> in the middle (something like this <code>'%(type)s %s %(host)s'</code>) or if you have more ordinary and mapping format specifiers which are intertwined (something like this <code>'%s '%(type)s %s %(host)s' %s</code>). You could separate <code>'%(type)s %s %(host)s'</code> into multiple strings like this:</p>
<pre><code>'%(type)s' % dictionary["_source"] + ' %s ' % datetime +  '%(host)s' % dictionary["_source"]
</code></pre>
<p>But then there is no point in string format in first place.</p></li>
<li><p><strong>First applying mapping than ordinary format specifiers</strong></p>
<p>This method solves our problem of formatting string with ordinary and mapping format specifiers which are intertwined. I will explain this method on the example from OP. We have string <code>'%s %(type)s %(host)s'</code> which we want to format. Like I said in first we apply mapping format specifiers:</p>
<pre><code>print('%s %(type)s %(host)s' % dictionary["_source"])
</code></pre>
<p>If we do this it will print out:</p>
<pre><code>'{'type': 'type', 'host': 'host'} type host'
</code></pre>
<p>This does not work, but what we can do is add parentheses <code>()</code> in every ordinary format specifier and update our dictionary with <code>{'': '%s'}</code>:</p>
<pre><code>print('%()s %(type)s %(host)s' % {'type': 'type', 'host': 'host', '': '%s'})
</code></pre>
<p>This will print out:</p>
<p><code>'%s type host'</code></p>
<p>which we can easily format with <code>% (datetime)</code>.</p>
<p>The question is how to <code>{'': '%s'}</code> to your dictionary. You have two options, to use a function or to define your class for the dictionary object.</p>
<p><strong>1. Using function</strong></p>
<pre><code>def ForFormat(x):
    d = x.copy()
    d.update({'': '%s'})
    return d
</code></pre>
<p>And you use it like this:</p>
<pre><code>print('%()s %(type)s %(host)s' % ForFormat(dictionary["_source"]) % (datetime))
</code></pre>
<p>The result is exactly what we want:</p>
<pre><code>'25-08-2017 10:26:11 type 45 host'
</code></pre>
<p><strong>2. Creating class</strong></p>
<pre><code>class FormatDict(dict):
    def __missing__(self, key):
        return '%s'
</code></pre>
<p>Here we don't actually add <code>{'': '%s'}</code> to dictionary, but rather change its method <code>__missing__()</code> which is called when key can not be found in dictionary so it will retrun <code>'%s'</code> for each mapping format specifier that is not in dictionary. It is used like this:</p>
<pre><code>print('%()s %(type)s %(host)s' % FormatDict(dictionary["_source"]) % (datetime))
</code></pre>
<p>It also prints out the desired result:</p>
<pre><code>'25-08-2017 10:26:11 type 45 host'
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>One way is to assign a name to your datetime arg:</p>
<pre><code>"{t} {host} {type}".format(t=datetime,**dictionary["_source"])
</code></pre>
<p>But actually it will work even without it</p>
<pre><code>"{} {host} {type}".format(datetime,**dictionary["_source"])
</code></pre>
<p>though it's better to use named values in formatted strings imo</p>
</div>
<div class="post-text" itemprop="text">
<p>You're better off using the <a href="https://docs.python.org/3.5/library/string.html#format-string-syntax" rel="nofollow noreferrer"><code>format</code></a> method:</p>
<pre><code>&gt;&gt;&gt; "{} {d[host]} {d[type]}".format(datetime, d=dictionary["_source"])
'25-08-2017 10:26:11 host type'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't mix ordinary and mapping format specifiers in a single format string. You should use either </p>
<pre><code>"%s %s %s" % (param1, param2, param3)
</code></pre>
<p>or </p>
<pre><code>"%(key1)s %(key2)s %(key3)s" % {"key1": val1, "key2": val2, "key3": val3}
</code></pre>
<p>In Python 3.6+ you can use much more convenient and efficient <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="nofollow noreferrer">f-strings</a> for interpolation, e.g:</p>
<pre><code>f'{val1} {val2} {val3}'
</code></pre>
<p>where replacement fields are <em>expressions</em> evaluated at run time.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>dictionary = {"_source": {"host": "host", "type": "type"}}
datetime = '25-08-2017 10:26:11'

print("host {} type {} datetime {}".format(dictionary["_source"]["host"], dictionary["_source"]["type"], datetime))
</code></pre>
</div>
<span class="comment-copy">Can you add what do you what for output for this example? Is it '25-08-2017 10:26:11 host type'?</span>
<span class="comment-copy">Here's how you would do it using <code>format</code>: <code>print("{0} {1[host]} {1[type]}".format(datetime,dictionary["_source"]))</code>  Read more about <code>format</code> <a href="https://docs.python.org/3.4/library/string.html#formatspec" rel="nofollow noreferrer">here</a></span>
