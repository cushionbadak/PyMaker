<div class="post-text" itemprop="text">
<p>If we consider the following generator and the generator function:</p>
<pre><code>def integers():
    """Infinite sequence of integers."""
    i = 1
    while True:
        yield i
        i = i + 1

def take(n, seq):
    """Returns first n values from the given sequence."""
    seq = iter(seq)
    result = []
    try:
        for i in range(n):
            result.append(seq.next())
    except StopIteration:
        pass
    return result

print take(5, integers()) # prints [1,2,3,4,5]
</code></pre>
<p>Why does the built-in iter function have to be called onto the generator in the generator function? The code still runs and prints the correct value without it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>take</code> does not know whether it receives a iterator (such as a generator) or a container (such as a list/tuple/set). In the latter case, containers do not have a <code>.next</code> method associated with them, so your code will fail. Your code is playing it safe rather than taking a chance, which I'd consider good programming practice.</p>
<hr/>
<p>An example (in python3):</p>
<pre><code>def foo():
     yield from [1, 2, 3]

x = iter([1, 2, 3])
y = iter(foo())

print( next(x), next(y) ) # this would be `x.next()` in python2
(1, 1)
</code></pre>
<p>In the latter case, the <code>iter</code> is redundant, but it the code works in both cases. However, consider:</p>
<pre><code>x = [1, 2, 3]
print(next(x))
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-351-cf05c93171ef&gt; in &lt;module&gt;()
----&gt; 1 print(next(x))

TypeError: 'list' object is not an iterator
</code></pre>
<p>It should be clear why the <code>iter</code> call is needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you pass a <code>list</code> or <code>tuple</code> to your <code>take</code> function, they won't have a <code>next</code> method.</p>
<pre><code>&gt;&gt;&gt; [1, 2, 3].next() # AttributeError: 'list' object has no attribute 'next'
</code></pre>
<p>Using <code>iter</code> on a <code>list</code> will give you a <code>listiterator</code>, which does have a <code>next</code> method.</p>
<pre><code>&gt;&gt;&gt; my_gen = iter([1, 2, 3])
&gt;&gt;&gt; print(my_gen)
&lt;listiterator object at 0x108390a10&gt;
&gt;&gt;&gt; my_gen.next()
1
&gt;&gt;&gt; next(my_gen)
2
</code></pre>
</div>
<span class="comment-copy">Try to remove that line and pass a list to take. <code>take([1, 2, 3], 2)</code></span>
<span class="comment-copy">Iterators <i>are</i> iterables. This is required by the <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__iter__" rel="nofollow noreferrer">iterator spec</a>.</span>
<span class="comment-copy">@user2357112 I'm struggling to find the right wording... what is appropriate here?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ You could refer to them as containers.</span>
<span class="comment-copy">@MosesKoledoye Thanks!</span>
<span class="comment-copy">I usually go for wording like "some other iterable" or "non-iterator iterable" to accomodate particularly weird iterables, but "container" covers most non-iterator iterables and avoids implying that iterators aren't iterables.</span>
<span class="comment-copy"><code>listiterator</code> is an iterator, but not a generator</span>
<span class="comment-copy">@vaultah: Beat me to my edit. :-)</span>
