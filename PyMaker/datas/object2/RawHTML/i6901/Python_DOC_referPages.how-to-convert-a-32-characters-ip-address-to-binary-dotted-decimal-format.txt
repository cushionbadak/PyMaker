<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2733788/convert-ip-address-string-to-binary-in-python">Convert IP address string to binary in Python</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>IP address <code>00000011100000001111111111111111</code> will be converted into dotted decimal format as: <code>3.128.255.255</code>. This is because the 1st 8 bits <code>00000011</code> will be converted to 3, the 2nd 8 bits <code>10000000</code> will be converted to 128, the 3rd 8 bits <code>11111111</code> will be converted to 255 and the last 8 bits <code>11111111</code> will be converted to 255.</p>
<p>How to write a function <code>ip_format()</code> that accepts an IP address in binary format and converts it into its dotted decimal format ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="http://%20https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer"><code>ipaddress</code></a> module from the standard library:</p>
<pre><code>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; def ip_format(ip):
...     return str(ipaddress.ip_address(int(ip, 2)))
...
&gt;&gt;&gt; ip_format('00000011100000001111111111111111')
'3.128.255.255'
</code></pre>
<p>Otherwise, it's pretty easy to do it manually:</p>
<pre><code>&gt;&gt;&gt; def ip_format(ip):
...     return ".".join(map(str, int(ip, 2).to_bytes(4, "big")))
... 
&gt;&gt;&gt; ip_format("00000011100000001111111111111111")
'3.128.255.255'
</code></pre>
<p>As far as the logic: you convert the binary string to an <a href="https://docs.python.org/3.6/library/functions.html#int" rel="nofollow noreferrer">integer</a>, split that to individual bytes, convert those to strings, and join with <code>"."</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you convert to <code>int</code> you can also specify a second argument that is the base (in this case <code>2</code> for binary). Then you can stride through your string 8 elements at a time, and lastly <code>join</code> with <code>'.'</code> characters</p>
<pre><code>def ip_format(s):
    return '.'.join(str(int(s[i:i+8], 2)) for i in range(0, 32, 8))

&gt;&gt;&gt; ip_format('00000011100000001111111111111111')
'3.128.255.255'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def ip_format(s): 
    return '.'.join(str(int(s[n * 8:(n + 1) * 8], 2)) for n in range(4))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The string can be converted using standard Python libraries as follows:</p>
<pre><code>import socket
import struct

ip_addr_binary = '00000011100000001111111111111111'  

print socket.inet_ntoa(struct.pack('&gt;I', int(ip_addr_binary, 2)))
</code></pre>
<p>Which displays:</p>
<pre><code>3.128.255.255    
</code></pre>
<p><strong>How does it work?</strong></p>
<p>First convert the binary string into a corresponding integer using <code>int(x, 2)</code>. Next use <a href="https://docs.python.org/2/library/struct.html?highlight=struct%20pack#struct.pack" rel="nofollow noreferrer"><code>struct.pack()</code></a> to convert the number into a four character packed string. This can then be passed to <a href="https://docs.python.org/2/library/socket.html?highlight=socket%20inet_ntoa#socket.inet_ntoa" rel="nofollow noreferrer"><code>socket.inet_ntoa(packed_ip)</code></a> to convert it into a dot separated IP address.</p>
</div>
<span class="comment-copy">"Write a function that...". YES SIR, at your disposal. Did you try anything at least?</span>
