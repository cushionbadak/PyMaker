<div class="post-text" itemprop="text">
<p>I am newbie in mocking. I've looked at the <a href="https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock" rel="nofollow noreferrer">mock</a> module and understood how to mock a specific method or module using patch decorator.</p>
<p>In order to mock a single method in a module, one way of doing it is:</p>
<pre><code>@mock.patch('module1.method1')
def test_val(self, mock_method1):
    mock_method1.return_value = "whatever_i_want"
</code></pre>
<p>In order to mock multiple methods in the same module, I can do this:</p>
<pre><code>@mock.patch('module1.method2')
@mock.patch('module1.method1')
def test_val(self, mock_method1, mock_method2):
    mock_method1.return_value = "whatever_i_want"
    mock_method1.return_value = "whatever"
</code></pre>
<p>What I want is to mock a few methods in a module and keep the others as they are. If I mock the entire module, then every method or attribute in that module is mocked. </p>
<p>So, instead of mocking multiple methods individually like I've shown above, is there any way I can mock an entire module (by only keeping certain methods un-mocked)?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can subclass the class under test and mock out all the methods in the constructor.  Then under test you only use the mock class and not the real one.</p>
<pre><code>class MockSubClass(RealClass):

    def __init__(self, *args, **kwargs):
        self.method_to_mock1 = mock.create_autospec(RealClass, 'method_to_mock1', ...)
        ...

class TestRealClass(TestCase):

    def setUp(self, *args, **kwargs):
        self.object_to_test = MockSubClass(...)
</code></pre>
</div>
<span class="comment-copy">could you please post the code that you are testing? You could restructure it so that the test can invoke it directly with an object that the test configures itself, allowing you to override a single method or w/e.  Are you looking for a black list approach to mocking an object??</span>
<span class="comment-copy">@dm03514 I am sorry, I can't post my code. No, I am looking for a white list approach (Mock all methods in the module except a few desired ones)</span>
