<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13795758/what-is-sys-maxint-in-python-3">What is sys.maxint in Python 3?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/7604966/maximum-and-minimum-values-for-ints">Maximum and Minimum values for ints</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/9860588/maximum-value-for-long-integer">Maximum value for long integer</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I checked maximum size of the integer Python holds using <code>sys.maxsize</code> and it returned me <code>9223372036854775807</code>. </p>
<p>Then why I can still store a value greater than this range?</p>
<p>How many bytes are required to store an integer and do Python changes number of bytes depending on the size of an integer?</p>
<p>I am using Python 3.6</p>
</div>
<div class="post-text" itemprop="text">
<p>If you check the <a href="https://docs.python.org/3/library/sys.html#sys.maxsize" rel="nofollow noreferrer">docs</a> for <code>sys.maxsize</code>, you'll see</p>
<blockquote>
<p><code>sys.maxsize</code><br/>
  An integer giving the maximum value a variable of type <code>Py_ssize_t</code> can take. Itâ€™s usually <code>2**31 - 1</code> on a 32-bit platform and <code>2**63 - 1</code> on a 64-bit platform.</p>
</blockquote>
<p>There's nothing in there about Python <code>int</code>s! It's talking about <code>Py_ssize_t</code>, an internal C API thing with no practical relevance to working with Python <code>int</code>s.</p>
<p>Python <code>int</code>s use an arbitrary-precision representation that will use more bytes of memory to represent bigger integers. They are not limited by the values of <code>Py_ssize_t</code>s.</p>
</div>
<span class="comment-copy">You do realize the number of bytes is not the same as the <i>value</i> that those bytes can represent?</span>
<span class="comment-copy">In Python 2, any integer larger than <code>2^63 - 1</code> is a <code>long</code>, and will be represented with a trailing <code>L</code>: <code>9223372036854775808L</code>.</span>
<span class="comment-copy">@ZachGates not really relevant to this question.</span>
<span class="comment-copy">Fundamentally, <code>sys.maxsize</code> <b>is not the maximum size of an <code>int</code></b>. It is the maximum size of a <i>machine word</i>, so, on your 64bit system, that is <code>2**63 - 1</code>. This many <i>bytes</i> is fundamentally how much memory can be allocated. Note, this is why, on 32-bit versions of Python, you cannot allocate more than 4 gigs of ram, no matter how much your hardware supports. This is because the maximum addressable size is <code>2**32 - 1 == 4294967295</code>. It just <i>happens</i> that in Python 2, the <code>int</code> type uses a machine-word's size, but one <i>could</i> have used 128 bits...</span>
<span class="comment-copy">you're mixing this up with <code>maxint</code>, the duplicate seems right</span>
<span class="comment-copy">"Python ints use an arbitrary-precision representation that will use more bytes of memory to represent bigger integers. They are not limited by the values of Py_ssize_ts." - this is making sense. Thanks @user2357112</span>
