<div class="post-text" itemprop="text">
<p>In below example, I try to get address of m variable but it show error</p>
<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; m = 1
&gt;&gt;&gt; ctypes.addressof(m)
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: invalid type
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; class A:
...     pass
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; 
&gt;&gt;&gt; ctypes.addressof(a)
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: invalid type
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you've passed to <code>addressof</code> is not a variable, it is a Python <code>int</code> object in the first example and an <code>A</code> object in the second example. <code>addressof</code> only works on <a href="https://docs.python.org/3/library/ctypes.html#data-types" rel="nofollow noreferrer">ctypes <code>_CData</code></a>. </p>
<p>I suggest reading <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a> to learn how Python doesn't have the concept of "variable" you are expecting. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the address of the variable using the following command:</p>
<pre><code>id(m)
#Example Output : 51148608
</code></pre>
<p>To get it using hex style use:</p>
<pre><code>hex(id(m))
#Output: 0x30c7740
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>ctypes.addressof</code> can only get the address of a <code>ctypes</code> type:</p>
<pre><code>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; m = c_int(1)
&gt;&gt;&gt; addressof(m)
56017424
</code></pre>
</div>
<span class="comment-copy">Strictly speaking, using <code>id</code> to find the address is <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><i>a CPython implementation detail</i></a>.</span>
<span class="comment-copy">How I can get address of class objects  <code>A()</code> or list,</span>
<span class="comment-copy">In CPython, id() does (but it's in general not guaranteed to). Why are you trying to do that?</span>
<span class="comment-copy">That address returned from <code>id()</code> in CPython is an implementation detail, and is the address of a PyObject-derived instance. That's an opaque structure so the usefulness of the address is suspect.</span>
<span class="comment-copy">@YannVernier I am trying to write the test cases for singleton class.</span>
<span class="comment-copy">Then you can check with <code>a is b</code>, which effectively performs <code>id(a) == id(b)</code>.</span>
