<div class="post-text" itemprop="text">
<p>Is there a way to use Python in order to test all possible field value combinations for JSON data? For example, I have some JSON data and have included possible field values for each of these of fields in parenthesis:</p>
<pre><code>{
"userPrompt": {
     "enabled": false, (true or false)
     "clickable": true, (true, false)
     "imageUrl": "http://www.dummyimage.com/300x250.jpg", 
     "imageWidth": 10, (value must be an integer)
     "imageHeight": 10, (value must be an integer)
     "showStatus": true (true or false)
 },

"showVideo": {
    "enabled": false, (true or false)
    "play": false (true or false)
 },
 "playerType": [ (array must include "flash", "html5", or both)
 "flash",
 "html5"
 ]
</code></pre>
<p>I am really just trying to figure out a way to iterate through all field possibilities and print out the full JSON structure with each of these field combinations. Hopefully, this makes sense; I appreciate the help. Thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product()</code></a> to generate a bunch of combinations.</p>
<pre><code>import itertools

some_ints = (1, 5)
bools = (True, False)

choices = [
    bools,
    bools,
    some_ints,
    some_ints,
    bools,
    bools,
    bools,
    (['flash'], ['html'], ['flash', 'html']),
]

for tup in itertools.product(*choices):
    print(tup)
</code></pre>
<p>Then use the generated tuples to build the desired dicts/JSONs.</p>
</div>
<div class="post-text" itemprop="text">
<p>To expand on @FMc's approach, you have 8 fields that need to be modified, i.e. assuming <code>imageUrl</code> is not changed. Using <code>itertools.product()</code> is a compact way of achieving multiple nested loops in a single simple iterative way. Each iteration will result in one combination of values for all of the fields. This first iteration would give you the following tuple of values for your fields:</p>
<pre><code>(False, False, 10, 10, False, False, False, ['flash'])
</code></pre>
<p>Next you need to update your JSON object with all of the new values. One way would be to use <code>update()</code> to assign new values as follows:    </p>
<pre><code>import itertools
import json

data = """{
"userPrompt": {
     "enabled": false,
     "clickable": true,
     "imageUrl": "http://www.dummyimage.com/300x250.jpg", 
     "imageWidth": 10,
     "imageHeight": 10,
     "showStatus": true
 },

"showVideo": {
    "enabled": false,
    "play": false
 },
 "playerType": ["flash", "html5"]
 }
 """

jd = json.loads(data)
ints = (10, 20, 30)
bools = (False, True)
choices = [bools, bools, ints, ints, bools, bools, bools, (['flash'], ['html'], ['flash', 'html'])]

for tup in itertools.product(*choices):
    jd['userPrompt'].update({
        'enabled': tup[0], 
        'clickable': tup[1], 
        'imageWidth': tup[2],
        'imageHeight': tup[3],
        'showStatus' : tup[4]})
    jd['showVideo'].update({
        'enabled' : tup[5],
        'play' : tup[6]})
    jd['playerType'] = tup[7]

    print(jd)
</code></pre>
<p>So this first iteration would display the following:</p>
<pre><code>{
    u'userPrompt': {
        u'showStatus': False, 
        u'imageUrl': u'http://www.dummyimage.com/300x250.jpg', 
        u'enabled': False, 
        u'imageHeight': 10, 
        u'imageWidth': 10, 
        u'clickable': False
    }, 

    u'playerType': ['flash'], 

    u'showVideo': {
        u'play': False, 
        u'enabled': False
    }
}
</code></pre>
</div>
<span class="comment-copy">Use nested loops with all the possible values of each field.</span>
<span class="comment-copy">Integer fields can have a practically infinite number of possibilities, how will you iterate through all of them?</span>
<span class="comment-copy">Those arent integers, those are strings.</span>
<span class="comment-copy">Thanks for the response. For the fields that require an integer, I was thinking of just using a few different test values since I obviously can't use every number in existence.</span>
<span class="comment-copy">I updated my code: I incorrectly listed those integers as strings.</span>
