<div class="post-text" itemprop="text">
<p>I am working on a Python Toolbox running on Windows, that needs to know several paths: </p>
<ul>
<li>Folders, e.g.  <code>/path/to/output</code>, <code>/path/to/calc/</code>, <code>/fixed/path/to/server</code></li>
<li>Programs, e.g. <code>/path/to/program.exe</code></li>
</ul>
<p>Some of these paths are fixed and could be hard coded. Some of them change depending on the user. </p>
<p>At the moment I solve that problem using a config file <code>config.param</code>. This file has to be created by each user. </p>
<p>The reason why I chose such a config file is, that inexperienced users can simply copy this file from someone else and change the content according to their system.</p>
<p>The directory looks like this</p>
<pre><code>Toolbox
 |
 +-- config.param
 |
 +-- package
 |    |
 |    +-- __init__.py
 |    |
 |    +-- path_and_names.py
 |
 +-- example
      |
      +-- example.py
      |
      + example_sub
         |
         +-- example_sub.py
</code></pre>
<p>For internal use of all path-variables, I use a class called <code>PathAndNames</code>. The problem is now reduced to: This class <code>PathAndNames</code> needs to know the location of the file <code>config.param</code>. Since both are part of the Python package with a fixed relative path, I solved that by</p>
<pre><code>class PathAndNames:
    PATH_TO_CONFIG = os.path.normpath("../config.param")
</code></pre>
<hr/>
<h2>Problem:</h2>
<p>Since this is a Toolbox the user should be able to use it from <code>/where/he/likes</code>, e.g. where his Calculation-Folder is located. 
He will need to create an instance of <code>PathAndNames</code>, which then should know all correct paths. </p>
<p>The problem is, that <code>../config.param</code> now refers to <code>/where/he/likes/../config.param</code> and not the correct path inside the Toolbox. </p>
<hr/>
<h2>Example:</h2>
<p>The user is at the moment forced to write his code in a subfolder of the Toolbox, e.g. like <code>example.py</code> in the subfolder <code>Toolbox/example/</code>. 
If the folder is located not in a direct subfolder of <code>Toolbox</code>, e.g. like <code>example_sub.py</code> in the subsubfolder <code>Toolbox/example/example_sub</code>, then the Toolbox won't work. In this example the location of <code>../config.param</code> that <code>PathAndNames</code> knows,  would be <code>Toolbox/example/config.param</code>.</p>
<hr/>
<p>Is there a way to define a relative path inside a Python package / module?<br/>
Are there other possible ways to solve the path problem, in a way that inexperienced users can understand what they should do?</p>
<p>Any ideas are appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/reference/import.html#__file__" rel="nofollow noreferrer"><code>__file__</code></a> attribute will get the absolute file path to the module in which you call it (rather than the working directory of whichever file loads it). This allows you to define two files, say <code>config.param</code> and <code>config.py</code>, then in <code>config.py</code> you can put a line like the following:</p>
<pre><code>import os
__here__ = os.path.join(*list(os.path.split(os.path.dirname(__file__)))[:-1])
PATH_TO_CONFIG = os.path.join(__here__, 'config.param')
</code></pre>
<p>From the user script, then you can get the file path as</p>
<pre><code>from my_module.config import PATH_TO_CONFIG
</code></pre>
</div>
<span class="comment-copy">I am feeling quite dumb right now. Especially since I postponed this problem for several weeks ;)  Thanks  a lot for your answer. `</span>
<span class="comment-copy">Small addition: If <code>/path/to/__file__</code> contains symbolic links <code>os.path.dirname()</code> will return an empty string. Using <code>os.path.realpath()</code> solves this.</span>
