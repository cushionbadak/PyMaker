<div class="post-text" itemprop="text">
<p>Here is my code:</p>
<pre><code>class MyClass:

    def __init__(self):
        self.value = 0

    def set_value(self, value):
        self.value = 5

    def get_value(self):
        return self.value

    value = print("Hello")

a = MyClass()
</code></pre>
<p>The output is:</p>
<pre><code>Hello
</code></pre>
<p>What I do not understand is why <code>print("Hello")</code> gets executed. When I create an instance of the class only the instance variable is set to 0. Why <code>self.value = 0</code> calls <code>value = print("Hello")</code>?</p>
<p>Can someone explain me this behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>The code evaluates the class when you execute it, and calls the <code>print</code> to define the class variable <code>value</code>. </p>
<p>The below example shows that it's printed before the instanciation.</p>
<pre><code>class MyClass:

    def __init__(self):
        self.value = 0

    def set_value(self, value):
        self.value = 5

    def get_value(self):
        return self.value

    value = print("Hello")

print('hi')
a = MyClass()

#output
&gt;&gt;&gt; Hello
&gt;&gt;&gt;hi
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't. That print is executed because it's at the class level itself; the body of a class is executed at the time the class is defined. You would get that output even if you never instantiated MyClass.</p>
</div>
<div class="post-text" itemprop="text">
<p>It does not, drop <code>a = MyClass()</code> and it will print <code>"Hello"</code> anyway. It executes code in the body when a class is defined:</p>
<pre><code>class MyClass:
    print(2 * 2)

# prints 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't let the indentation trick you. <code>value</code> <strong><em>is not</em></strong> an instance variable. <code>value</code> is a class variable because it is defined in the class's scope. It's the same as doing:</p>
<pre><code>class MyClass:
    value = print("Hello")
    ....
</code></pre>
<p>Which means that the call to <code>print</code> will run at <strong><em>class definition time</em></strong>. In other words, when Python defines <code>MyClass</code> it also defines all of the class level variables - including <code>value</code>. To define value, it then calls <code>print</code>, which is why <code>Hello</code> is printed <em>before</em> you create an instance of <code>MyClass</code>.</p>
<p>If you want only instances of <code>MyClass</code> to print <code>Hello</code>, put the variable definition inside of the class constructor.</p>
<p><strong>Side note:</strong> The <code>print</code> function returns <code>None</code>, so it's seems a bit strange that your assigning the value to a variable. Perhaps you were looking for something like <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> instead?</p>
</div>
