<div class="post-text" itemprop="text">
<p>When not using objects i am finding it difficult to store and parse through the data. Looking for ways where i can shorten the code using generator comprehension.
for a problem where input to the program code is as below </p>
<pre><code>Courses
TRAN~Transfiguration~1~2011-2012~Minerva McGonagall
CHAR~Charms~1~2011-2012~Filius Flitwick
Students
SLY2301~Hannah Abbott
SLY2302~Euan Abercrombie
SLY2303~Stewart Ackerley
SLY2304~Bertram Aubrey
SLY2305~Avery
SLY2306~Malcolm Baddock
SLY2307~Marcus Belby
SLY2308~Katie Bell
SLY2309~Sirius Orion Black
Grades
TRAN~1~2011-2012~SLY2301~AB
TRAN~1~2011-2012~SLY2302~B
TRAN~1~2011-2012~SLY2303~B
TRAN~1~2011-2012~SLY2305~A
TRAN~1~2011-2012~SLY2306~BC
TRAN~1~2011-2012~SLY2308~A
TRAN~1~2011-2012~SLY2309~AB
CHAR~1~2011-2012~SLY2301~A
CHAR~1~2011-2012~SLY2302~BC
CHAR~1~2011-2012~SLY2303~B
CHAR~1~2011-2012~SLY2305~BC
CHAR~1~2011-2012~SLY2306~C
CHAR~1~2011-2012~SLY2307~B
CHAR~1~2011-2012~SLY2308~AB
EndOfInput
</code></pre>
<p>Expected Output</p>
<pre><code>SLY2301~Hannah Abbott~9.5
SLY2302~Euan Abercrombie~7.5
SLY2303~Stewart Ackerley~8.0
SLY2304~Bertram Aubrey~0
SLY2305~Avery~8.5
SLY2306~Malcolm Baddock~6.5
SLY2307~Marcus Belby~8.0
SLY2308~Katie Bell~9.5
SLY2309~Sirius Orion Black~9.0
</code></pre>
<p>I managed to solve it using objects but is there any other way to write the code without using objects?</p>
<pre><code>import sys
from Courses.Courses import Course
from Students.Students import Student
from Grades.Grades import Grade

courses = []
students = []
grades = []
gradeDict = {'A':10,'AB':9,'B':8,'BC':7,'C':6,'CD':5,'D':4}
courseCodeDict = {}

def readInput():
    isSectionStart=True
    while True:
        # Reading data from console
        input_var = raw_input()
        if "EndOfInput" != input_var:
            if input_var in "Courses Students Grades":
                section=input_var
                isSectionStart=True
            else:
                isSectionStart=False
            if not isSectionStart:    
                extractDataFromRawData(input_var,section)
        else:
            break;
    #printData(courses,students,grades)
    calculateGradeAverage(grades,courses)

def calculateGradeAverage(grades,courses):
    print("Calculating Average now...")
    gradeRollNumberDict={}
    courseGradeDict={}
    gradesSet = {}
    for course in courses:
        courseCodeDict.update({course.course_code : 1})

    for grade in grades:
        if gradeRollNumberDict.get(grade.roll_number) == None:
            grade.totalGradePoint = grade.grade
            gradeRollNumberDict.update({grade.roll_number : grade.totalGradePoint})
        else:
           grade.totalGradePoint= grade.grade + gradeRollNumberDict.get(grade.roll_number)
           gradeRollNumberDict.update({grade.roll_number : grade.totalGradePoint})

        if courseGradeDict.get(grade.roll_number) == None:
            grade.totalCourseTaken = courseCodeDict.get(grade.course_code)
            courseGradeDict.update({grade.roll_number : courseCodeDict.get(grade.course_code)})
        else:
           grade.totalCourseTaken= courseCodeDict.get(grade.course_code) + courseGradeDict.get(grade.roll_number)
           courseGradeDict.update({grade.roll_number : grade.totalCourseTaken})
    for grade in grades:
        grade.avgGrade = grade.totalGradePoint/grade.totalCourseTaken
        grade.avgGrade = round(grade.avgGrade)

    seenGrades = set()
    uniqueGrades = []
    grades.reverse()
    for grade in grades:
        if grade.roll_number not in seenGrades:
            uniqueGrades.append(grade)
            seenGrades.add(grade.roll_number)
    #uniqueGrades.reverse()
    for a in uniqueGrades:
        print(a.roll_number)
    #print(uniqueGrades)
    grades=uniqueGrades
    grades.sort(key=lambda grade:grade.roll_number)
    for grade in grades:       
        print("RollNumber: {0} \t Total CourseTaken: {1} \t Total Grade Point: {2} \t Avg Grade: {3}".format(grade.roll_number,grade.totalCourseTaken,grade.totalGradePoint,grade.avgGrade))

def extractDataFromRawData(input_data,section):
    if "Courses" == section:
        courses.append(createCourseObject(input_data))
    elif "Students" == section:
        students.append(createStudentObject(input_data))
    elif "Grades" == section:
        grades.append(createGradeObject(input_data))   
    else:
        print("Invalid input!!! Exiting the system...")
        sys.exit()

def createCourseObject(input_data):
    courseInputData = input_data.split("~")
    course = Course(courseInputData[0],courseInputData[1],courseInputData[2],courseInputData[3],courseInputData[4])
    return course

def createStudentObject(input_data):
    studentInputData = input_data.split("~")
    student = Student(studentInputData[0],studentInputData[1])
    return student

def createGradeObject(input_data):    
    gradeInputData = input_data.split("~")
    grade = Grade(gradeInputData[0],gradeInputData[1],gradeInputData[2],gradeInputData[3],gradeDict[gradeInputData[4]])
    return grade    

def printData(courses,students,grades):
    printObject(courses,"Courses")
    printObject(students,"Students")
    printObject(grades,"Grades")

def printObject(list,object):
    print("Printing %s"%object)
    for data in list:
        print(data)

if __name__ == '__main__':
    readInput()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Code</strong>:</p>
<pre><code>from collections import OrderedDict
from pprint import pprint as pp


SEPARATOR = "~"
GRADE_DICT = {
    "A": 10,
    "AB": 9,
    "B": 8,
    "BC": 7,
    "C": 6,
    "CD": 5,
    "D": 4
}


def read_input_from_file(file_name="input.txt"):
    course_list= list()
    student_list = list()
    grade_list = list()

    section_map = {
        "Courses": course_list,
        "Students": student_list,
        "Grades": grade_list,
    }

    with open(file_name) as f:
        current_item = None
        for line in f:
            line = line.strip()
            if line in section_map:
                current_item = section_map[line]
            elif line == "EndOfInput":
                break
            elif current_item is not None:
                current_item.append(line)
            else:
                print("Ignoring line: {}".format(line))
    return course_list, student_list, grade_list


def convert_names(name_list):
    ret = OrderedDict()
    for element in name_list:
        id, name = element.split(SEPARATOR)
        ret[id] = name
    return ret


def convert_grades(grade_list):
    ret = dict()
    for element in grade_list:
        course_id, student_id, grade_id = element.rsplit(SEPARATOR, 2)
        ret.setdefault(student_id, dict())[course_id] = grade_id
    return ret


def main():
    course_list, student_list, grade_list = read_input_from_file()
    student_dict = convert_names(student_list)
    print("\n[SECTION 0]: Student IDs and names:\n")
    pp(student_dict)
    exam_stat_dict = convert_grades(grade_list)
    print("\n[SECTION 1]: Grades organized by students and courses:\n")
    pp(exam_stat_dict)
    print("\n[SECTION 2]: Final Grades:\n")
    for student_id in student_dict:
        if student_id in exam_stat_dict:
            grade_dict = exam_stat_dict[student_id]
            grades_sum = sum([GRADE_DICT.get(item, 0) for item in grade_dict.values()])
            print(SEPARATOR.join([student_id, student_dict[student_id], str(grades_sum/len(grade_dict))]))
        else:
            print(SEPARATOR.join([student_id, student_dict.get(student_id), "0.0"]))


if __name__ == "__main__":
    main()
</code></pre>
<p><strong>Output</strong> (I'm placing it before the <em>Notes</em>, since I'm going to refer to it from there):</p>
<blockquote>
<pre><code>(py35x64_test) c:\Work\Dev\StackOverflow\q45987148&gt;python a.py

[SECTION 0]: Student IDs and names:

OrderedDict([('SLY2301', 'Hannah Abbott'),
             ('SLY2302', 'Euan Abercrombie'),
             ('SLY2303', 'Stewart Ackerley'),
             ('SLY2304', 'Bertram Aubrey'),
             ('SLY2305', 'Avery'),
             ('SLY2306', 'Malcolm Baddock'),
             ('SLY2307', 'Marcus Belby'),
             ('SLY2308', 'Katie Bell'),
             ('SLY2309', 'Sirius Orion Black')])

[SECTION 1]: Grades organized by students and courses:

{'SLY2301': {'CHAR~1~2011-2012': 'A', 'TRAN~1~2011-2012': 'AB'},
 'SLY2302': {'CHAR~1~2011-2012': 'BC', 'TRAN~1~2011-2012': 'B'},
 'SLY2303': {'CHAR~1~2011-2012': 'B', 'TRAN~1~2011-2012': 'B'},
 'SLY2305': {'CHAR~1~2011-2012': 'BC', 'TRAN~1~2011-2012': 'A'},
 'SLY2306': {'CHAR~1~2011-2012': 'C', 'TRAN~1~2011-2012': 'BC'},
 'SLY2307': {'CHAR~1~2011-2012': 'B'},
 'SLY2308': {'CHAR~1~2011-2012': 'AB', 'TRAN~1~2011-2012': 'A'},
 'SLY2309': {'TRAN~1~2011-2012': 'AB'}}

[SECTION 2]: Final Grades:

SLY2301~Hannah Abbott~9.5
SLY2302~Euan Abercrombie~7.5
SLY2303~Stewart Ackerley~8.0
SLY2304~Bertram Aubrey~0.0
SLY2305~Avery~8.5
SLY2306~Malcolm Baddock~6.5
SLY2307~Marcus Belby~8.0
SLY2308~Katie Bell~9.5
SLY2309~Sirius Orion Black~9.0
</code></pre>
</blockquote>
<p><strong>Notes</strong>:</p>
<ul>
<li>This is a "slightly" modified version of your code, that only uses stuff from <em>Python</em> standard library</li>
<li>Code explanation:

<ul>
<li><code>read_input_from_file</code> (since it's only a helper function, I'm not going to insist much on it):

<ul>
<li>I saved the input (<em>copy/paste</em>) in a file (called it <em>input.txt</em>), and every time the program runs, it loads the data from there (the reason is obvious)</li>
<li>It (populates and) returns 3 lists (<code>curses</code>, <code>students</code> and <code>grades</code> from your code)</li>
</ul></li>
<li><code>convert_names</code>:

<ul>
<li>Converts every student name entry (as given in input) into a dictionary<sup><strong>*</strong></sup>: {<em>id</em>: <em>name</em>} (e.g. <code>"SLY2301~Hannah Abbott"</code> -&gt; <code>{"SLY2301": "Hannah Abbott"}</code>) - the key will be <em>id</em></li>
<li><sup><strong>*</strong></sup>Since in a regular <em>Python</em> dictionary (<a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer">[Python]: Mapping Types — dict</a>) the keys are ordered by their <em>hash</em> (the <em>hash</em> function can change between <em>Python</em> versions), there's almost 100% chance that the dictionary elements won't be stored in the order they were inserted (as an example you could type in the <em>Python</em> console <code>{1:2, 0:1}</code> and you'll see that it will output <code>{0: 1, 1: 2}</code>), I'm using <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">[Python]: class collections.OrderedDict([items])</a> which ensures the key order</li>
<li>The return value can be seen in program output (<code>SECTION 0</code>)</li>
</ul></li>
<li><code>convert_grades</code>:

<ul>
<li>This is where (most of) the magic takes place</li>
<li>Converts every grade entry (as given in input) in a dictionary: {<em>student_id</em> : {<em>course_id</em>: <em>grade_id</em>}} (the last 2 values are aggregated in an inner dictionary; e.g. <code>"TRAN~1~2011-2012~SLY2301~AB"</code> -&gt; <code>{"SLY2301": {"TRAN~1~2011-2012": "AB"}}</code>). For that, I'm using <a href="https://docs.python.org/3/library/stdtypes.html#str.rsplit" rel="nofollow noreferrer">[Python]: str.rsplit(sep=None, maxsplit=-1)</a> with a <code>maxsplit</code> value of 2, as I don't care about the <code>~</code>s in <code>TRAN~1~2011-2012</code></li>
<li>If a <em>student_id</em> is present more than once (was to more than 1 course exam), I am just adding the <em>course_id</em> and <em>grade_id</em> in the inner dictionary (this is where <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">[Python]: setdefault(key[, default])</a> comes into play)</li>
<li>The return value can be seen in program output (<code>SECTION 1</code>)</li>
</ul></li>
<li><code>main</code>:

<ul>
<li>The program main function. Here, I'm making use of the other functions and display the final data in a proper manner to the user (<code>SECTION 2</code>)</li>
<li>If there was a student that wasn't at any exam, like <code>Bertram Aubrey</code> (the <em>id</em> is not present in the exam statistics dictionary), I just print the <em>id</em>, <em>name</em> and <code>0.0</code></li>
<li>Otherwise, I calculate the arithmetic average from the grades in the inner dictionary (I am using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">[Python]: list Comprehensions</a> to convert the grades into actual numbers, <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">[Python]: sum(iterable[, start])</a> to sum the grades, then I divide the total by the number of inner dictionary keys) and display it, together with the <em>id</em> and <em>name</em></li>
</ul></li>
</ul></li>
<li>The code runs with <em>Python3</em> and <em>Python2</em></li>
</ul>
<p><em>@EDIT0</em>:</p>
<p>Adding <code>read_input</code> function (<code>read_input_from_file</code> with minimum and trivial modifications) to read input from keyboard:</p>
<pre><code>def read_input():
    course_list= list()
    student_list = list()
    grade_list = list()

    section_map = {
        "Courses": course_list,
        "Students": student_list,
        "Grades": grade_list,
    }

    current_item = None
    while(1):
        line = input()
        if line in section_map:
            current_item = section_map[line]
        elif line == "EndOfInput":
            break
        elif current_item is not None:
            current_item.append(line)
        else:
            print("Ignoring line: {}".format(line))
    return course_list, student_list, grade_list
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li><p>In order for this function to work with <em>Python2</em>, this code should be added at the beginning of the file:</p>
<pre><code>import sys
if sys.version_info.major &lt; 3:
    input = raw_input
</code></pre></li>
<li><p>You can also use the <em>input.txt</em> file to test the code with large datasets (like provided in the question, without having to manually type all the data) like this:</p>
<pre><code>python a.py &lt; input.txt
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>@CristiFati using your code i managed to tweak to solve my problem as below.</p>
<pre><code>from collections import OrderedDict
import sys


SEPARATOR = "~"
GRADE_DICT = {
    "A": 10,
    "AB": 9,
    "B": 8,
    "BC": 7,
    "C": 6,
    "CD": 5,
    "D": 4
}


def read_input_from_file():
    course_list= list()
    student_list = list()
    grade_list = list()

    section_map = {
        "Courses": course_list,
        "Students": student_list,
        "Grades": grade_list,
    }

    current_item = None
    while True:
        line = input()
        #line = line.strip()
        if line != "EndOfInput":
          if line in section_map:
            current_item = section_map[line]
          elif current_item is not None:
            current_item.append(line)
          else:
            print("Ignoring line: {}".format(line))
        else:
          break
    return course_list, student_list, grade_list

def convert_names(name_list):
    ret = OrderedDict()
    for element in name_list:
        id, name = element.split(SEPARATOR)
        ret[id] = name    
    return ret


def convert_grades(grade_list):
    ret = dict()
    for element in grade_list:
        course_id, student_id, grade_id = element.rsplit(SEPARATOR, 2)
        ret.setdefault(student_id, dict())[course_id] = grade_id
    return ret


def main():
    course_list, student_list, grade_list = read_input_from_file()
    student_list.sort()
    student_dict = convert_names(student_list)
    exam_stat_dict = convert_grades(grade_list)
    for student_id in student_dict:
        if student_id in exam_stat_dict:
            grade_dict = exam_stat_dict[student_id]
            grades_sum = sum([GRADE_DICT.get(item, 0) for item in grade_dict.values()])
            print(SEPARATOR.join([student_id, student_dict[student_id], str(round(float(grades_sum/len(grade_dict)),2))]))
        else:
            print(SEPARATOR.join([student_id, student_dict.get(student_id), "0"]))


if __name__ == "__main__":
    main()
</code></pre>
</div>
<span class="comment-copy">What do you consider to be an object?</span>
<span class="comment-copy">Is this some kind of a homework? Because the inputs look awfully similar to the ones from <a href="https://stackoverflow.com/questions/45986308/how-to-extract-the-substring-from-the-string-in-python">[SO]: How to extract the substring from the String in python [on hold]</a>. Anyway, seems like you're light years ahead your colleague :)</span>
<span class="comment-copy">@CristiFati yes actually it is... i am just trying to look for an easier way.</span>
<span class="comment-copy">@roganjosh i meant i want to deal away with the imports and i am okay to use the in built objects but i don't want to use user defined ones</span>
<span class="comment-copy">You're on your own I'm afraid. We don't know what those objects even do.</span>
<span class="comment-copy">that is insanely helpful</span>
<span class="comment-copy">when i am trying to change the code to accommodate input directly from the console rather than a text file using a while loop i keep entering the ignoring lines section. Any tips on that ?</span>
<span class="comment-copy">I'm afraid that without looking at the code I can only guess. Tomorrow, I'll add some function to read from <i>stdin</i>.</span>
<span class="comment-copy">i managed to solve it. Your tips helped a lot thanks for that</span>
