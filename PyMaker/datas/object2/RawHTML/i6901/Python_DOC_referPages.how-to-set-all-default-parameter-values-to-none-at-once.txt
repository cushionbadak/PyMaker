<div class="post-text" itemprop="text">
<p>I have a method with n parameters. I want to set all the default parameter value to <code>None</code>, e.g.: </p>
<pre><code>def x(a=None,b=None,c=None.......z=None): 
</code></pre>
<p>Is there any built in method to set all the parameter values to None at once if they are not set default to None while writing the method? </p>
</div>
<div class="post-text" itemprop="text">
<p>For a plain function, you can set <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer"><code>__defaults__</code></a>:</p>
<pre><code>def foo(a, b, c, d):
    print (a, b, c, d)

# foo.__code__.co_varnames is ('a', 'b', 'c', 'd')
foo.__defaults__ = tuple(None for name in foo.__code__.co_varnames)

foo(b=4, d=3)  # prints (None, 4, None, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you literally want to add <code>None</code> as default to every argument you need some sort of decorator approach. If it's only about Python 3 then <a href="https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object" rel="nofollow noreferrer"><code>inspect.signature</code></a> can be used:</p>
<pre><code>def function_arguments_default_to_None(func):
    # Get the current function signature
    sig = inspect.signature(func)
    # Create a list of the parameters with an default of None but otherwise
    # identical to the original parameters
    newparams = [param.replace(default=None) for param in sig.parameters.values()]
    # Create a new signature based on the parameters with "None" default.
    newsig = sig.replace(parameters=newparams)
    def inner(*args, **kwargs):
        # Bind the passed in arguments (positional and named) to the changed
        # signature and pass them into the function.
        arguments = newsig.bind(*args, **kwargs)
        arguments.apply_defaults()
        return func(**arguments.arguments)
    return inner


@function_arguments_default_to_None
def x(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z): 
    print(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)

x()
# None None None None None None None None None None None None None None 
# None None None None None None None None None None None None

x(2)
# 2 None None None None None None None None None None None None None 
# None None None None None None None None None None None None

x(q=3)
# None None None None None None None None None None None None None None 
# None None 3 None None None None None None None None None
</code></pre>
<p>However that way you will loose introspection for the function because you manually altered the signature.</p>
<p>But I suspect that there are probably better way to solve the problem or avoiding the problem completely.</p>
</div>
<span class="comment-copy">Not as far as I know, but you could write a decorator to handle it</span>
<span class="comment-copy">Yeah, there are probably lots of ways to accomplish that but all will come with some sort of "disadvantage" (at least if you don't do it at an IDE level), for example it could seriously limited introspection.</span>
<span class="comment-copy">My question is from this question <a href="https://stackoverflow.com/questions/46025154/how-to-pass-pandas-dataframe-columns-as-kwargs/46025394#46025394" title="how to pass pandas dataframe columns as kwargs">stackoverflow.com/questions/46025154/â€¦</a>. I had to write None so many times. So easier ways to do it?</span>
<span class="comment-copy">If you have that many default values and arguments to a function, it implies that you should be encapsulating those arguments in an object itself (a <code>dict</code> seems reasonable) and pass that to the function instead. Then as part of your sanity checking/validation, you can default whatever's not supplied there...</span>
<span class="comment-copy">You could even accept <code>**kwargs</code> and inside do a <code>params = dict.fromkeys('abcdefghij', None)</code> then <code>params.update(kwargs)</code> or similar... All depends what you're trying to do.</span>
<span class="comment-copy">I knew there was some attribute for that but I thought one had to recompile the function to make it work. That's pretty clever.</span>
