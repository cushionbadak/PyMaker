<div class="post-text" itemprop="text">
<p>I need to count the number of files in a directory in a remote machine. I need to ssh to that machine and perform directory counting operations (-lR | grep ^d | wc -l). This needs to be done in a shell script.</p>
<p>I also need to call this shell script from a python program by passing a variable to be used in the shell script and return the result to the python program.</p>
<p>Components involved:</p>
<ol>
<li><p>Python program calling the shell script (passing a variable)</p></li>
<li><p>Performing ssh to remote machine and perform directory counting</p></li>
<li><p>Return the result to my original python program</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer">subprocess.run</a> function to execute an SSH command. <code>subprocess.run("ssh user@host 'grep ^d'")</code>, but it becomes tricky when it comes to passing in a password. So you have a few options.</p>
<p><strong>Option A:</strong>
  Use an SSH key. <code>subprocess.run("ssh user@host -i /path/to/priv_key 'grep ^d'")</code>. Or better yet, <a href="https://apple.stackexchange.com/questions/48502/how-can-i-permanently-add-my-ssh-private-key-to-keychain-so-it-is-automatically">add the SSH key to your SSH config file</a> so you can simply do <code>ssh some_identifier 'grep^d'</code>. The downside is this method only works for your computer.</p>
<p><strong>Option B:</strong>
  On Windows, install <a href="http://www.putty.org/" rel="nofollow noreferrer">Putty</a>, and pass in the password with the -pw switch. <code>subprocess.run("putty -ssh user@host -pw your_password 'grep ^d'")</code>
  On Linux/Mac, use <a href="https://linux.die.net/man/1/sshpass" rel="nofollow noreferrer">sshpass</a>. <code>subprocess.run("sshpass --password 'your_password' ssh -oStrictHostKeyChecking=no user@host 'grep -d'")</code>
 The downside is that Windows users will have to install Putty, and it is less secure as you are passing a password instead of an SSH key.</p>
<p><strong>Option C:</strong>
  Use the Python library <a href="http://www.paramiko.org/" rel="nofollow noreferrer">Paramiko</a>. See their documentation for info on how to do this, however, I have found that their library is not the most intuitive. Especially when it comes to passing and viewing data on stdin, stdout, and stderr. You're also introducing a third-party dependency. Paramiko can take either a password or an SSH key.</p>
<p><strong>Option D:</strong>
Have your script handle creating and copying SSH keys to the server, if it hasn't been done already. The user will be prompted for their SSH password once, and then after that you would be able to use option A for all further communication. I've never done this before, but it could work. The downside is the time it would take to put this solution together.</p>
</div>
<span class="comment-copy">SO is not a free coding service. You have to make some attempt to solve the problem yourself. If you can't get it working, post what you tried and we'll help you fix it. Try working on each component separately, then put them all together.</span>
