<div class="post-text" itemprop="text">
<p>I want to make a chessboard in pygame with python. Just only the chessboard with for loops. I tried in several ways to do this but i didn't figured out what exactly it will be. Here is my code:</p>
<pre><code>import pygame
pygame.init()

#set color with rgb
white,black,red = (255,255,255),(0,0,0),(255,0,0)

#set display
gameDisplay = pygame.display.set_mode((800,600))

#caption
pygame.display.set_caption("ChessBoard")

#beginning of logic
gameExit = False

lead_x = 20
lead_y = 20

while not gameExit:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gameExit = True

#For loop for chessboard 

#draw a rectangle
gameDisplay.fill(white)
pygame.draw.rect(gameDisplay, black, [lead_x,lead_y,20,20])
pygame.display.update()


#quit from pygame &amp; python
pygame.quit()
quit()
</code></pre>
<p>Now i need an expert suggestion what it will be with python code. I just wanna show a chessboard in my screen. Thats it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Possible solution, maybe not the most elegant, but you can create the squares in a loop</p>
<pre><code>#Size of squares
size = 20

#board length, must be even
boardLength = 8
gameDisplay.fill(white)

cnt = 0
for i in range(1,boardLength+1):
    for z in range(1,boardLength+1):
        #check if current loop value is even
        if cnt % 2 == 0:
            pygame.draw.rect(gameDisplay, white,[size*z,size*i,size,size])
        else:
            pygame.draw.rect(gameDisplay, black, [size*z,size*i,size,size])
        cnt +=1
    #since theres an even number of squares go back one value
    cnt-=1
#Add a nice boarder
pygame.draw.rect(gameDisplay,black,[size,size,boardLength*size,boardLength*size],1)

pygame.display.update()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>More efficient would be to draw the board once at initialization and just blit that surface:</p>
<pre><code>cellSize = 20
board = Surface((cellSize * 8, cellSize * 8))
board.fill((255, 255, 255))
for x in range(0, 8, 2):
    for y in range(0, 8, 2):
        pygame.draw.rect(board, (0,0,0), (x*size, y*size, size, size))
</code></pre>
<p>And then in your loop you draw the board surface first:</p>
<pre><code>gameDisplay.blit(board, board.get_rect())
# Draw your game pieces
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> to cycle through the colors in a nested for loop and just pass <code>next(colors)</code> to <code>pygame.draw.rect</code>. I'd create a background surface and draw the rects onto it when the program starts, and then just blit the background surf in the while loop, because that's more efficient than blitting the rects separately.</p>
<pre><code>import itertools
import pygame as pg


pg.init()

BLACK = pg.Color('black')
WHITE = pg.Color('white')

screen = pg.display.set_mode((800, 600))
clock = pg.time.Clock()

colors = itertools.cycle((WHITE, BLACK))
tile_size = 20
width, height = 8*tile_size, 8*tile_size
background = pg.Surface((width, height))

for y in range(0, height, tile_size):
    for x in range(0, width, tile_size):
        rect = (x, y, tile_size, tile_size)
        pg.draw.rect(background, next(colors), rect)
    next(colors)

game_exit = False
while not game_exit:
    for event in pg.event.get():
        if event.type == pg.QUIT:
            game_exit = True

    screen.fill((60, 70, 90))
    screen.blit(background, (100, 100))

    pg.display.flip()
    clock.tick(30)

pg.quit()
</code></pre>
</div>
<span class="comment-copy">You didn't include your code. Here's some links that may be related or helpful: <a href="http://www.pygame.org/project-ChessBoard-282-.html" rel="nofollow noreferrer">ChessBoard - Pygame</a>, <a href="http://openbookproject.net/thinkcs/python/english3e/pygame.html" rel="nofollow noreferrer">openbookproject.net/thinkcs/python/english3e/pygame.html</a></span>
<span class="comment-copy">Can you please show what you've tried?</span>
<span class="comment-copy">yes, i paste my code here now.</span>
<span class="comment-copy">format it please</span>
<span class="comment-copy">yes, it works. Thanks for your feedback.</span>
