<div class="post-text" itemprop="text">
<p>I have used <code>os.system('cls' if os.name == 'nt' else 'clear')</code> to clear the ouput while running scripts but on codacy i am getting one securiy issue  </p>
<blockquote>
<p>Starting a process with a shell, possible injection detected, security issue.  </p>
</blockquote>
<p>How to resolve the issue?   </p>
<p>Script link: <a href="https://www.codacy.com/app/vaibhavsingh97/StalkPy/file/9458582870/issues/source?bid=5189215&amp;fileBranchId=5189215#l43" rel="nofollow noreferrer">https://www.codacy.com/app/vaibhavsingh97/StalkPy/file/9458582870/issues/source?bid=5189215&amp;fileBranchId=5189215#l43</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>It has security issues just when you run the function with arguments taken from users. For example:</p>
<pre><code>import os
def do_clear(command): # Notice command is sent as argument from outside world and hence this makes it vulnerable
    os.system(command)
</code></pre>
<p>If the method is called with for example</p>
<pre><code>do_clear('rm -f */*')
</code></pre>
<p>Then it is possible that it deletes all the files of current directory. But if the 'clear' command is to be directly used, you do not have to worry about the security issue, as only 'clear' is run in all conditions. So the following function is secure enough.</p>
<pre><code>def do_clear(): # Notice command is not sent as argument from outside world
    os.system('cls' if os.name == 'nt' else 'clear') # This is not risky as os.system takes clear/cls command always.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a></p>
<blockquote>
<p>The subprocess module provides more powerful facilities for spawning
  new processes and retrieving their results; using that module is
  preferable to using this function. See the Replacing Older Functions
  with the subprocess Module section in the subprocess documentation for
  some helpful recipes.</p>
</blockquote>
<p>I recommend a test with one of the <a href="https://docs.python.org/3.6/library/subprocess.html#module-subprocess" rel="nofollow noreferrer">subprocess</a> passing as parameter <code>shell=False</code> and see if that work on codacy. <code>subprocess.run(['clear'])</code> worked in my local Python interpreter, you would have to test it on codacy.</p>
<p>If Python 2.x, you can try:</p>
<pre><code>subprocess.call(['clear'])
</code></pre>
</div>
<span class="comment-copy">Simply don't use os.system</span>
<span class="comment-copy">@Nabin How can i clear terminal output then in python?</span>
<span class="comment-copy">Can you tell the scenario where you would like to clear the screen?</span>
<span class="comment-copy">Some terminals have scroll backs which may be infinite - users who want to snoop can simply scroll back up the terminal log.</span>
<span class="comment-copy">Like everytime i run script it should clear previous output.</span>
<span class="comment-copy">yep. To give an equivalent, you could use <code>subprocess.run(['cls'] if os.name == 'nt' else ['clear'])</code></span>
<span class="comment-copy">subprocess.run() only works in <code>python 3.5</code> and above so no python 2.7 support</span>
<span class="comment-copy">@VaibhavSingh I edited the answer.</span>
