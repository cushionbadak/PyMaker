<div class="post-text" itemprop="text">
<p>How (in Python 3) to get values of all properties that belong to specific class. I need ONLY those values (properties) that defined in specific class without inherited ones.</p>
<p>Here is some example:</p>
<pre><code>class A(object):
    def __init__(self, color):
        self._color = color

    @property
    def color(self):
        return self._color

class B(A):
    def __init__(self, color, height, width):
        super().__init__(color)
        self._height = height
        self._width = width

    @property
    def height(self):
        return self._height

    @property
    def width(self):
        return self._width
</code></pre>
<p>and here is a code for fetching all values (including inherited):</p>
<pre><code>b_inst = B('red', 10, 20)
val = [{p: b_inst.__getattribute__(p)} for p in dir(B)
       if isinstance(getattr(B, p), property)]

print(val)

&gt;&gt; [{'color': 'red'}, {'height': 10}, {'width': 20}]
</code></pre>
<p>Now, I just want to retrieve values of properties defined ONLY in <code>class B</code>, i.e. <code>height</code> and <code>width</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that in Python "property" has a very specific meaning (the builtin <code>property</code> type). If you're only concerned about this  then you just have to lookup your child class's <code>__dict__</code>:</p>
<pre><code>val = [p.__get__(c) for k, p in type(c).__dict__.items() if isinstance(p, property)]
</code></pre>
<p>If you want something that works on any arbitrary attribute then what you ask for is just not possible, since Python objects (with a few exceptions) are dict-based (vs struct-based like in C++ or Java) and dynamic (any piece of code can add / remove arbitrary attributes on a per-instance basis) so there's no fix schema nor class-level definition of what attributes a given object may or not possess.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>If property == to attribute</strong>, from the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">doc</a>:</p>
<blockquote>
<p>Attribute assignments and deletions update the instance’s dictionary,
  never a class’s dictionary.</p>
</blockquote>
<p>So even you do <code>self._color = color</code> on a base class, you are assigning that attribute/property to the instance of the B class.</p>
<p>So, at least that you save info tied to the attribute/property for consult latter, I don't think that given how Python works, you will be able to determine to <strong>what class the method in which a property was assigned belong to</strong>, that is how your question means in Python.</p>
<p>I hope that this helps you to clarify the OOP model of Python.</p>
<p><strong>If you are referring to Python's properties</strong>, then the @bruno answer is perfect. I will still leave this answer here because is kind of related to your topic and could be useful for readers.</p>
</div>
<span class="comment-copy">Loop over <code>B.__dict__</code> or <code>vars(B)</code> in that case, <code>dir()</code> is recursive.</span>
<span class="comment-copy">What are you <i>actually</i> trying to achieve; why do you think you need this?</span>
<span class="comment-copy">That's what OP specifically asks ;)</span>
<span class="comment-copy">@AnttiHaapala that's what I understand from the OP's code snippet yes but in OO "property" has a more general meaning so I thought I'd better mention it.</span>
