<div class="post-text" itemprop="text">
<p>How can I override the built in <code>open</code> function such that when I call it like so...</p>
<pre><code>with open(file_path, "r") as f:
    contents = f.read()
</code></pre>
<p>The <code>contents</code> variable is any string I want?</p>
<p>EDIT: To clarify, I want to be able to just provide a string to the open function rather than a file path that will be read.</p>
<pre><code>with open("foobar") as f:
    contents = f.read()
    print(contents)
</code></pre>
<p>The above should print foobar.</p>
<p>I am aware this is defeating the purpose of open etc but it is for testing purposes.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create your own file-like type and override the builtin <code>open</code> with your own <code>open</code> function.</p>
<pre><code>import builtins


class File(object):
    """A basic file-like object."""

    def __init__(self, path, *args, **kwargs):
        self._file = builtins.open(path, *args, **kwargs)

    def read(self, n_bytes = -1):
        data = self._file.read(n_bytes)
        ...
        return data

    def __enter__(self):
        return self

    def __exit__(self, e_type, e_val, e_tb):
        self._file.close()
        self._file = None


def open(path, *args, **kwargs):
    return File(path, *args, **kwargs)
</code></pre>
<p>You can then write whatever logic you need to determine the return value of <code>read</code> inside <code>File.read</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Considering it is for testing purpose and you want to force the open calls to return a specific string then you can use <a href="https://docs.python.org/3/library/unittest.mock.html#mock-open" rel="nofollow noreferrer"><code>mock_open</code></a> here.</p>
<p>Let's say I have a module <code>foo</code> that has a function that reads content from a file and counts the number of lines:</p>
<pre><code># foo.py
def read_and_process_file():
    with open('Pickle Rick') as f:
        contents = f.read()
    print('File has {n} lines'.format(n=len(contents.splitlines())))
</code></pre>
<p>Now in your test you can mock the <code>open</code> for this module and make it return any string you want:</p>
<pre><code>from unittest.mock import mock_open, patch
import foo

m = mock_open(read_data='I am some random data\nthat spans over 2 lines')
with patch('foo.open', m):
    foo.read_and_process_file()  # prints 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can design your own class, as with requires an object with a defined <code>__enter__</code> and <code>__exit__</code> method. As that is what with does.</p>
<pre><code>class my_class:
    def __init__(self, *args):
        print("initializing variable, got args: {}".format(args))
    def __enter__(self):
        print("Inside enter statement!")
        return "arbitrary text"
    def __exit__(self, type, value, traceback):
        print("closing time, you don't have to go home")
        return
with my_class(1,2,3) as my_thing:
    print("inside the with block!")
    print("The return from my_class __enter__ is: ", my_thing)


print("Outside with block!")
</code></pre>
<p>output when ran:</p>
<pre><code>initializing variable, got args: (1, 2, 3)
Inside enter statement!
inside the with block!
The return from my_class __enter__ is:  arbitrary text
closing time, you don't have to go home
Outside with block!
</code></pre>
<p>More reading here: <a href="http://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer">http://effbot.org/zone/python-with-statement.htm</a></p>
</div>
<span class="comment-copy">What do you mean "any string I want"?</span>
<span class="comment-copy">Yes. As long as you put anything you want inside the file, you'll get whatever you want.</span>
<span class="comment-copy">@TerryA Please see my edit hopefully that clarifies things</span>
<span class="comment-copy">I might be understanding this wrong, but wouldn't that defy the purpose of <code>open</code>?</span>
<span class="comment-copy">Are you specifically wanting to override the <code>open</code> function, or to have some other function that works with the <code>with .. as</code> statement?</span>
<span class="comment-copy">That works perfectly thanks</span>
