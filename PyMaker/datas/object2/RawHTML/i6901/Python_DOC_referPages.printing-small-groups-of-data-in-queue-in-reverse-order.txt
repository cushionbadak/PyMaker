<div class="post-text" itemprop="text">
<p>I have a queue with elements as follows :</p>
<pre><code>1 None 2 3 None 4 5 6 7 None 8 9 10 11 12 13 14 15
</code></pre>
<p>Here None does the job of a separator and nothing more than that.</p>
<p>Now I want to print output like this :</p>
<pre><code>8 9 10 11 12 13 14 15
4 5 6 7
2 3
1
</code></pre>
<p>I'm able to print this output:</p>
<pre><code>15 14 13 12 11 10 9 8 
7 6 5 4 
3 2 
1
</code></pre>
<p>by traversing the queue from right side.</p>
<p>It's the code :</p>
<pre><code>length = len(sequenced_que)
    for i in range(0, length):
        temp = sequenced_que.pop()
        if temp is None:
            print()
        else:
            print(temp.data, end=" ")


8 9 10 11 12 13 14 15
4 5 6 7
2 3
1
</code></pre>
<p>The above desired output can be achieved by using a temporary stack. I can push elements into stack until I encounter a None and then start popping them out.</p>
<p>But this requires an O(n) extra space.</p>
<p>I just need an efficient algorithm instead of using temporary stack.You can use all properties of queues and lists.</p>
<p>Thankyou :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to "split" the array at the desired elements.</p>
<pre><code>import itertools

data = [1, None, 2, 3, None, 4, 5, 6, 7, None, 8, 9, 10, 11, 12, 13, 14, 15]
# Break the array into subarrays at None
blocks = [list(v) for k, v in itertools.groupby(data, lambda e: e is None) if not k]
# Reverse the subarrays
blocks.reverse()  # or as a new list: rev_blocks = blocks[::-1]
</code></pre>
<p>After the above, <code>blocks</code> is equal to <code>[[8, 9, 10, 11, 12, 13, 14, 15], [4, 5, 6, 7], [2, 3], [1]]</code>. If you want to print those subarrays in the same format:</p>
<pre><code>for arr in blocks:
    print(*arr, sep=' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>a solution using <code>itertools</code> :</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l=[1, None, 2 ,3, None, 4 ,5, 6, 7, None, 8, 9, 10, 11, 12 ,13 ,14 ,15]
&gt;&gt;&gt; l2=[list(g) for k,g in itertools.groupby(l,lambda x:x is None) if not k]
&gt;&gt;&gt; l2
[[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]]
&gt;&gt;&gt; for i in range(len(l2)):
...     print l2[-(i+1)]
... 
[8, 9, 10, 11, 12, 13, 14, 15]
[4, 5, 6, 7]
[2, 3]
[1]
</code></pre>
</div>
<span class="comment-copy">What is wrong with your current approach?  Is it bad because you call <code>print()</code> too often? What is objectionable about a temporary stack?  You said it "requires an O(n) extra space", but that would only be true when your  queue contains no <code>None</code> separators.  If you can count on the data always being chunked by <code>None</code> separators it may use much less than O(n) extra space.  Are you sure memory consumption is a limiting factor?</span>
<span class="comment-copy">A python <a href="https://docs.python.org/3.6/library/queue.html" rel="nofollow noreferrer"><code>queue</code></a> has no method <code>.pop()</code>.  What sort of queue are you using?</span>
<span class="comment-copy">I'm using deque since it allows adding and removing at both the ends</span>
<span class="comment-copy">@StevenRumbalski in my case memory consumption is not a limiting factor.After all I'm practicing algorithms. I'm trying to print reverse level order of a tree. The solution given in my book was with a queue and a single stack. I tried my own approach but I'm requiring this temporary stack. So I just thought whether this could be resolved without that temporary stack.</span>
<span class="comment-copy">Ask your question more clearly next time.  You made objections about the memory consumption of the stack approach and marked your question data structures and algorithms. You called your data structure a <code>queue</code> but did not specify you were using a <code>deque</code>.</span>
<span class="comment-copy">I'm new to python can you please explain what itertools does</span>
<span class="comment-copy">But this has nothing to do with queues or lists.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ its okay. we can traverse queue just like a list. In question I mentioned that we can use all properties of lists as well</span>
<span class="comment-copy">@bharath You can click itertools.groupby hyperlink to see what the function does</span>
<span class="comment-copy">@bharath: A short summary (from the documentation): "The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python."</span>
<span class="comment-copy">Optionally, you could replace <code>-(i+1)</code> with <code>~i</code>.</span>
<span class="comment-copy"><code>x in [None]</code> seems unusual - <code>x is None</code> would be more common.</span>
