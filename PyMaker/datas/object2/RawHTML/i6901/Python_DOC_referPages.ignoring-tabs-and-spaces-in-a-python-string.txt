<div class="post-text" itemprop="text">
<p>I need to compare two string in python, first string is read from .xlsx file and second is an output from stdout.readlines().</p>
<p>Below code is to get command output.</p>
<pre><code>stdin, stdout, stderr = client.exec_command(testCommand)
op = stdout.readlines()
print("op =\n"+str(op))
str1 = "".join(op)
</code></pre>
<p>Since some commands output begin with \t or might have \t in between .</p>
<p>For Eg : Below command output begin with \t and after LEN there is \t.  </p>
<pre><code>#   PASS_MIN_LEN    Minimum acceptable password length.
PASS_MIN_LEN    5
</code></pre>
<p>And xlsx file is having </p>
<pre><code># PASS_MIN_LEN Minimum acceptable password length.
PASS_MIN_LEN 5
</code></pre>
<p>As .xlsx comparison string doesn't have \t, how can i ignore \t while comparing two string. </p>
<pre><code>if cmdOutput== xlsxOutput:
</code></pre>
<p>is not working.</p>
<p>I tried to trim the cmdOutput with \t, it didn't worked. 
Any approach can i follow?</p>
</div>
<div class="post-text" itemprop="text">
<p>if you just want to replace tabs with a space, perhaps <code>str.replace</code> is simple enough. But that doesn't leave the trailing newlines. You might consider the replacement followed by <code>str.strip</code>. For example:</p>
<pre><code>op = [x.replace('\t', ' ').strip() for x in op]
print(op)

['# PASS_MIN_LEN Minimum acceptable password length.', 'PASS_MIN_LEN 5']
</code></pre>
<p>If you have other kinds of characters, or multiple characters (missing data, or the like), a more aggressive approach with <code>re</code>gex may be considered:</p>
<pre><code>import re
op = [x for x in map(lambda x: re.sub('\s+', ' ', x).strip(), op)]
print(op) 

['# PASS_MIN_LEN Minimum acceptable password length.', 'PASS_MIN_LEN 5']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can replace the tab in the command output string with a space.</p>
<p>For example:</p>
<pre><code>cmdOutput.replace('\t', ' ') == xlsxOutput
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Read the description for <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer">strip() method</a> in official python documentation.</p>
<p>"Return a copy of the string with the leading and trailing characters removed."</p>
<p>So, the characters within the string remain unchanged. Using replace() method is the best solution for your problem.</p>
<pre><code>&gt;&gt;&gt; str1 = "PASS_MIN_LEN\t5"
&gt;&gt;&gt; str2 = "PASS_MIN_LEN 5"
&gt;&gt;&gt; str1.replace('\t', ' ') == str2
True
</code></pre>
</div>
<span class="comment-copy">Is <code>op</code> a list?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ I'm 99.999999999% sure it is. <code>stdout</code> looks like a file, and <code>file.readlines()</code> returns a list. Not to mention the OP's use of <code>str.join</code>.</span>
<span class="comment-copy">@ChristianDean Mhm... thought so... I suppose OP tried something like <code>str(op).strip()</code>.</span>
<span class="comment-copy">Its is a list.                                                      [u'#\tPASS_MIN_LEN\tMinimum acceptable password length.\n', u'PASS_MIN_LEN\t5\n' ]</span>
<span class="comment-copy">@Sameer So you want to replace all tabs with one space?</span>
<span class="comment-copy">Thanks, this pretty much works. I have a \n   in between. And my xlsx file has a new line entry.                                                                         '#\tPASS_MIN_LEN\tMinimum acceptable password length.\n', u'PASS_MIN_LEN\t5\n'</span>
<span class="comment-copy">@COLDSPEED second regex is not handling \n. trying to get it fixed. its already 2AM.</span>
<span class="comment-copy">@Sameer Are you sure it's a new line and not a literal backslash followed by n? Because that regex would handle the new line if it was actually one.</span>
<span class="comment-copy">@COLDSPEED its not a literal backslash, stdout.readlines() is giving me        [u'#\tPASS_MIN_LEN\tMinimum acceptable password length.\n', u'PASS_MIN_LEN\t5\n' ]                                                                                                                           And doing a  "".join() on it, \n is treated as new line.</span>
<span class="comment-copy">@Sameer add a <code>flags=re.MULTILINE</code> to the regex. <code>[x for x in map(lambda x: re.sub('\s+', ' ', x, flags=re.M).strip(), op)]</code></span>
<span class="comment-copy">Rather than having to repeatedly do <code>str.replace(...)</code> on each element, why not just do it once on the entire list of strings?</span>
<span class="comment-copy">Yes, calling replace on the whole list would make the most sense in this case.</span>
