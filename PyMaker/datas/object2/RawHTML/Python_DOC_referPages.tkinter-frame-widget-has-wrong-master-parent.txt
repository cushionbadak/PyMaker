<div class="post-text" itemprop="text">
<p>So, the Program I am creating is supposed to show 2 lists inside of a window. I am going to enter code snipplets for what I think is important, but I will add my entire code down if any more questions follow. Empty it looks like <a href="https://i.stack.imgur.com/d0m6x.png" rel="nofollow noreferrer">this</a></p>
<p>My program is supposed to be able to move and copy files from one folder to another, with both folders being shown on either side. Using OOP is very important to me for the practice sake. I am also trying to seperate the code into Model - View - Controller, the MVC-Architecture</p>
<p>So, my GUI is build like this: tk.TK has 4 Frames, a TopFrame, 2x my DataView class and a LowerOptionBar frame. Each DataView consists of some buttons, a <strong>canvas containing a frame</strong> and some other things. It also has the method that should fill the frame. The class looks like this: </p>
<pre><code>class DataView(tk.Frame):
    def __init__(self, file_view_list, _controller):
        self.file_view_list = file_view_list
        tk.Frame.__init__(self)
        back_navigator = tk.Button(self, text='&lt;-', height=1, width=6)
        back_navigator.grid(row=1, column=0, sticky="E")
        forwards_navigator = tk.Button(self, text='-&gt;', height=1, width=6)
        forwards_navigator.grid(row=1, column=1, sticky="E")

        search_label = tk.Label(self, text='Search:')
        search_label.grid(row=0, column=1)

        self.selected_path = tk.StringVar(self)
        self.selected_path.set("Selected Path")
        selected_path_label = tk.Label(self, textvariable=self.selected_path)
        selected_path_label.grid(row=1, column=2, columnspan=100)

        # will be added later on, to look for objects
        object_search_term = tk.StringVar() 
        object_search_entry = tk.Entry(self, textvariable=object_search_term)
        object_search_entry.grid(row=0, column=2, sticky="E")

        object_search_start = tk.Button(self, text=("Accept"))
        object_search_start.grid(row=0, column=3, sticky="W")

        self.data_canvas = tk.Canvas(self, bg="grey")
        self.data_canvas.grid(row=2, column=0, columnspan=20, sticky="news")

        self.scroll_bar = tk.Scrollbar(self, orient="vertical", command=self.data_canvas.yview, bg="pink")
        self.scroll_bar.grid(row=2, column=21, sticky='ns')
        self.data_canvas.configure(yscrollcommand=self.scroll_bar.set)

        self.frame_buttons = tk.Frame(self.data_canvas)
        self.data_canvas.create_window((0, 0), window=self.frame_buttons, anchor='nw')

    def update_list(self, file_path_list):
        print(file_path_list)
        row = 0
        for i in file_path_list:
            self.file_view_list.append(FileView(self.frame_buttons, i, 53, row))
            self.file_view_list[row].grid(column=1, row=row, sticky=tk.W)
            row +=1

        self.frame_buttons.update_idletasks()
        self.data_canvas.config(scrollregion=self.data_canvas.bbox("all"))
</code></pre>
<p>Then I have another class, called my FileView class. Its entire point is to replace buttons in functionalit - while earlier iterations of my program used buttons to display found files in a folder, they don't work quite as they are supposed to: so I want to replace buttons with my new FileView. </p>
<pre><code>class FileView(tk.Frame):
   def __init__(self, _controller, _text, _width, _row):
       tk.Frame.__init__(self)
       self._controller = _controller
       self._text = _text
       self._width = _width
       that_view = tk.Button(self, text=_text, width=_width)
       that_view.pack()

   def grid_view(self, _row):
       self.grid(column=1, row=_row)
</code></pre>
<p>While now they only have a button, this is a mere placeholder, when this works it will be a file-dependent icon on the left as well as a label on the right with hover-functionality and being able to click many. For now a button will suffice.</p>
<p>When I didn't use my own view, my program <a href="https://i.stack.imgur.com/UdOGk.png" rel="nofollow noreferrer">worked</a>. It put buttons into the correct frame. But since I replaced tk.Button with View, it does <a href="https://i.stack.imgur.com/t5pQe.png" rel="nofollow noreferrer">this</a>. </p>
<p>Debunging showed that the Master of the FileViews are, for some reason, my tk.TK window. Setting the master manually is according to another post here not an option, and I tried a lot of things and googled and all, but I can't find anyone who encountered something similiar. If any of you could spot the mistake, and why the views have the wrong master will be greatly appreciated.</p>
<p>Thank you so much and I hope I provided everything you need to help me. I appologis for my english but also my lack of commenting, whichever is actually worse</p>
<pre><code>#main.py:##############################################################################
from Controller import Controller

running_controller = Controller()

running_controller.run_program()

 #View.py:##############################################################################

class DataManagerGui(tk.Tk):
    def __init__(self, _controller, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.title_font = font.Font(family='Helvetica', size=18, weight="bold", slant="italic")
        self._controller = _controller

        container = tk.Frame(self)
        container.grid()
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        page_name = TopFrame.__name__
        main_frame = TopFrame(_controller=_controller)
        main_frame.grid(row=0, column=0, sticky="nsew")

    def menubar(self):
        menu = tk.Menu(self)
        #help
        help_menu = tk.Menu(menu)
        menu.add_cascade(label="Help", menu=help_menu)
        return menu

class TopFrame(tk.Frame):

    def __init__(self, _controller):
        tk.Frame.__init__(self)
        self._controller = _controller

        label = tk.Label(self, text="Data-Manager", font='Helvitica')
        label.grid(columnspan=10, row=0, sticky="E")

        button = tk.Button(self, text="Idunfuckingknowpfg")
        button.grid(columnspan=10, row=1, sticky="E")

class DataView(tk.Frame):
    def __init__(self, file_view_list, _controller):
        self.file_view_list = file_view_list
        tk.Frame.__init__(self)
        back_navigator = tk.Button(self, text='&lt;-', height=1, width=6)
        back_navigator.grid(row=1, column=0, sticky="E")
        forwards_navigator = tk.Button(self, text='-&gt;', height=1, width=6)
        forwards_navigator.grid(row=1, column=1, sticky="E")

        search_label = tk.Label(self, text='Search:')
        search_label.grid(row=0, column=1)

        self.selected_path = tk.StringVar(self)
        self.selected_path.set("Selected Path")
        selected_path_label = tk.Label(self, textvariable=self.selected_path)
        selected_path_label.grid(row=1, column=2, columnspan=100)

        # will be added later on, to look for objects
        object_search_term = tk.StringVar() 
        object_search_entry = tk.Entry(self, textvariable=object_search_term)
        object_search_entry.grid(row=0, column=2, sticky="E")

        object_search_start = tk.Button(self, text=("Accept"))
        object_search_start.grid(row=0, column=3, sticky="W")

        self.data_canvas = tk.Canvas(self, bg="blue")
        self.data_canvas.grid(row=2, column=0, columnspan=20, sticky="news")

        self.scroll_bar = tk.Scrollbar(self, orient="vertical", command=self.data_canvas.yview, bg="pink")
        self.scroll_bar.grid(row=2, column=21, sticky='ns')
        self.data_canvas.configure(yscrollcommand=self.scroll_bar.set)

        self.frame_buttons = tk.Frame(self.data_canvas)
        self.data_canvas.create_window((0, 0), window=self.frame_buttons, anchor='nw')

    def update_list(self, file_path_list):
        print(file_path_list)
        row = 0
        for i in file_path_list:

            # if os.path.isdir(path + '\\' + i):
                #     f_type = 'Folder'
                # elif os.path.isfile(path + '\\' + i):
                #     f_type = 'File'  

                # self.file_view_list.append(Model.File(path, i, f_type))

            self.file_view_list.append(FileView(self.frame_buttons, i, 53, row))
            self.file_view_list[row].grid(column=1, row=row, sticky=tk.W)
            row +=1

        self.frame_buttons.update_idletasks()
        self.data_canvas.config(scrollregion=self.data_canvas.bbox("all"))

        # if len(path) &gt; 44:
        #     path = path[-44:]
        # view_inst['!dataview'].selected_path.set(path) 

class LowerOptionBar(tk.Frame):
    def __init__(self, _controller):
        self._controller = _controller
        tk.Frame.__init__(self)
        move_button = tk.Button(self, text='Move')
        move_button.grid(row=0, column=0)
        copy_button = tk.Button(self, text='Copy')
        copy_button.grid(row=0, column=1)
        delete_button = tk.Button(self, text='Delete')
        delete_button.grid(row=0, column=2)
        rename_button = tk.Button(self, text='Rename')
        rename_button.grid(row=0, column=3)
        rename_button = tk.Button(self, text='///testA\\\\\\', command=lambda: self._controller.fill_list(self.master.children, r'C:\Users\geidobler\Google Drive\Files\Programs\python\Work\DataManager\TestFolderA', 'left'))
        rename_button.grid(row=0, column=4)
        rename_button = tk.Button(self, text='///testB\\\\\\', command=lambda: self._controller.fill_list(self.master.children, r'C:\Users\geidobler\Google Drive\Files\Programs\python\Work\DataManager\TestFolderB', 'right'))
        rename_button.grid(row=0, column=5)
                                            # command=lambda i=i: controller.select_user(self, i)

class FileView(tk.Frame):
    def __init__(self, _controller, _text, _width, _row):
        tk.Frame.__init__(self)
        self._controller = _controller
        self._text = _text
        self._width = _width
        that_view = tk.Button(self, text=_text, width=_width)
        that_view.pack()

    def grid_view(self, _row):
        self.grid(column=1, row=_row)



    def menubar(self):
        menu = tk.Menu(self)
        #help
        help_menu = tk.Menu(menu)
        menu.add_cascade(label="Help", menu=help_menu)
        return menuw=_row)

#Controller.py###################################################################################

class Controller():

    def run_program(self):
        self.app = View.DataManagerGui(self)

        self.app.left_side_data_view = View.DataView([], self)
        self.app.left_side_data_view.grid(row=2, column=0)
        self.app.right_side_data_view = View.DataView([], self)
        self.app.right_side_data_view.grid(row=2, column=5)
        self.app.lower_option_bar = View.LowerOptionBar(self)
        self.app.lower_option_bar.grid(row=3, column=0)  

        self.app.mainloop()

    def delete_file(self, path):
        os.remove(path)

    def rename_file(self, old_path, new_path):
        os.rename(old_path, new_path)  

    def move_file(self, old_path, new_path):
        shutil.move(old_path, new_path)

    def copy_file(self, old_path, new_path):
        shutil.copyfile(old_path, new_path)

    def fill_list(self, view_inst, path, list):
        file_path_list = []
        row = 0
        f_type = None

        for i in os.listdir(path):
            file_path_list.append(i)

        if list == 'left':
            view_inst['!dataview'].update_list(file_path_list)
        elif list == 'right':
            view_inst['!dataview2'].update_list(file_path_list)
</code></pre>
<p>Thank you so much and I hope I provided everything you need to help me. I appologis for my english but also my lack of commenting, whichever is actually worse. Other maybe useful information: using python 3.7.2 64-bit on a Windows PC.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your <code>FileView</code>, you don't pass a master to your <code>Frame</code>. The master then defaults to the root window. You do pass the widget that should be the master to the <code>FileView</code> (<code>self.frame_buttons</code>), which you accept as <code>_controller</code> (which it isn't, really). All you have to do is pass this widget as the master to the Frame you initialize:</p>
<pre><code>tk.Frame.__init__(self, _controller)
</code></pre>
</div>
<span class="comment-copy">Thank you very much! I just realised while debugging that my controller is not my controller, but that aside: you fixed the problem that's been bugging me for, like, 3 days now!</span>
<span class="comment-copy">Glad I could help! As an aside, you also don't pass a master to the <code>TopFrame</code>'s, <code>DataView</code>'s and <code>LowerOptionBar</code>'s <code>__init__ </code> functions. Since you expect these to have the root window as the master this is not a problem, but <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">"Explicit is better than implicit"</a>.</span>
