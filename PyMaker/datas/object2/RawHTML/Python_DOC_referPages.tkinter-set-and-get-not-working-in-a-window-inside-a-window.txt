<div class="post-text" itemprop="text">
<pre><code>from tkinter import *

def fun():
    trywindow=Tk()
    s=StringVar()
    entry=Entry(trywindow, textvariable=s)
    s.set("print")
    entry.pack()
    trywindow.mainloop()

root=Tk()
fun()

root.mainloop()
</code></pre>
<p>According to me after executing this code 2nd window should show enter block with text written in it "PRINTED" but it is blank.</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the comments, using multiple instances of <code>Tk()</code> is discouraged. It leads to behavior that people don't expect, of which this question is a great example.</p>
<p>As explained in <a href="https://stackoverflow.com/a/48045508/3714930">this answer</a>, all instances of <code>Tk</code> are completely isolated. Objects "belonging" to one of them can not be seen or used in the others.<br/>
What happens in your code is that you have two <code>Tk</code> instances: <code>root</code> and <code>trywindow</code>. Then you create a <code>StringVar</code>, without any arguments. This is the usual way to do this, but you actually can supply a master widget during construction. This way, you can control to which <code>Tk</code> instance your <code>StringVar</code> "belongs". See this quote from <a href="http://effbot.org/tkinterbook/variable.htm" rel="nofollow noreferrer">effbot</a>:</p>
<blockquote>
<p>The constructor argument is only relevant if you’re running Tkinter with multiple Tk instances (which you shouldn’t do, unless you really know what you’re doing).</p>
</blockquote>
<p>If you don't specify the master, a master is chosen implicitly. I do believe it is always the first created instance of <code>Tk</code>. In your case, the <code>StringVar</code> is created with <code>root</code> as its master. Because these <code>Tk</code> instances are completely separated, <code>trywindow</code> and all widgets in it can not "see" the <code>StringVar</code> or any value in it.</p>
<p>So you could fix your code by simply passing <code>trywindow</code> to the <code>SringVar</code> constructuion:</p>
<pre><code>s=StringVar(trywindow)
</code></pre>
<p>However, it's probably easier to change <code>trywindow</code> from a <code>Tk</code> instance to a <code>Toplevel</code> widget. This also creates a new window, but it belongs to the same <code>Tk</code> instance so you don't have these difficulties with separate <code>Tk</code> instances:</p>
<pre><code>from tkinter import *

def fun():
    trywindow = Toplevel()
    s = StringVar()
    entry = Entry(trywindow, textvariable=s)
    s.set("print")
    entry.pack()
    trywindow.mainloop()

root = Tk()
fun()

root.mainloop()
</code></pre>
</div>
<span class="comment-copy">Multiple instances of <code>Tk()</code> <i>simply do not work right</i>.  Use <code>Toplevel()</code> instead to create additional windows.</span>
<span class="comment-copy">@jasonharper it's not so much that they don't work <i>right</i>, but rather they don't work the way you expect if you don't fulkly understand what an instance of <code>Tk</code> actually is.</span>
<span class="comment-copy">Why do you think that calling <code>.get()</code> isn't working? Nowhere in your code do you call it.</span>
