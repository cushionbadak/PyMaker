<div class="post-text" itemprop="text">
<p>I have an open source project that works fine with python 2 and I am trying to make it work on python 3 as well.
I tried one approach that is using if statements in the code to check <code>sys.version_info.major</code> but this seems to be messy.
Is it possible to specify the interpreter version in setup.py to that when folks use pip install, it automatically pick up a compatible package?</p>
<p>This way, I can branch the code and the packages on github.
so lets say I have</p>
<pre><code>x1.2 for python &lt; 3
x1.1 for python &gt;= 3
</code></pre>
<p>if the user has python3, pip should grab x1.1 (not the latest but the latest package for python3)</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no way for you to specify what version <code>pip</code> should install, no. You can specify Python compatibility in the Trove classifiers, but <code>pip</code> will not differentiate on those, let alone pick a different version based on that.</p>
<p>You are stuck with writing a version that works on both Python 2 and 3. I recommend you read through the <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow"><em>Porting Python 2 Code to Python 3</em> guide</a> and use a compatibility layer support library like <a href="https://pypi.python.org/pypi/six" rel="nofollow"><code>six</code></a>. You can use the <a href="http://python-modernize.readthedocs.org/en/latest/" rel="nofollow">Modernize tool</a> to help you rewrite your code here. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/2to3.html" rel="nofollow"><code>2to3</code></a> :</p>
<blockquote>
<p>2to3 is a Python program that reads Python 2.x source code and applies a series of fixers to transform it into valid Python 3.x code.</p>
</blockquote>
<p>and as @Martijn says in comment you can find the best recipe in <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow"><code>Porting Python 2 Code to Python 3</code></a></p>
</div>
<span class="comment-copy">Thanks all. This is a major flaw of pip then. I actually managed to port things manually but now I know there are easier ways. The only problem is that the code is starting to look ugly due to changes in packages names which forces me to put conditions. I think one other approach might be to make a duplicate project with a "3" added to the project/package name in case someone else might be interested.</span>
<span class="comment-copy"><code>2to3</code> is no magic bullet that makes any project work on 3.x. You still need to put in some work for this.</span>
<span class="comment-copy">@MartijnPieters i think its depends on the OP's code ! is it so ?</span>
<span class="comment-copy">Yes, that's what I am saying.</span>
<span class="comment-copy">Note that <code>2to3</code> is listed under the <i>dropping Python 2 support completely</i> option. I <i>think</i> there are ways to use <code>lib2to3</code> from setuptools but it is not recommended.</span>
