<div class="post-text" itemprop="text">
<p>I would like to replace <code>items[1]</code>, <code>items[2]</code>, <code>items[3]</code> with a boolean value based on whether or not the value is None. This works but eliminates <code>items[0]</code>, <code>items[4]</code>, <code>items[5]</code> from the output. I could insert/append the values back in, but I'm thinking there must be a way to do it in a single line.</p>
<pre><code>my_list = [[10,30,None,20,30,40],[10,20,None,10,30,40]]
booleans = [[1 if item is None else 0 for item in each_list[1:-2]] for each_list in my_list]
print booleans
</code></pre>
<p>Expected Output:</p>
<pre><code>[[10, 0, 1, 0, 30, 40], [10, 0, 1, 0, 30, 40]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using nested list comprehensions:</p>
<pre><code>booleans= [[l[0]]+[1 if i is None else 0 for i in l[1:4]]+l[4:] for l in my_list]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are close, you can use <a href="https://docs.python.org/3/library/functions.html#enumerate"><code>enumerate</code></a> when iterating over your inner lists and test whether the indices are in a set that should be modified. This allows you to easily modify which indices should be tested by simply modifying the <code>tests</code> set, and doesn't require some form of slicing which is difficult to modify easily.</p>
<pre><code>my_list = [[10,30,None,20,30,40],[10,20,None,10,30,40]]
tests = {1, 2, 3}

new_list = [[v if i not in tests else 1 if v is None else 0 for i, v in enumerate(x)] 
            for x in my_list]

print(new_list)
# [[10, 0, 1, 0, 30, 40], [10, 0, 1, 0, 30, 40]]
</code></pre>
<p>Personally though, I wouldn't use a list comprehension in this case as it's <em>ugly</em>. The code below does exactly the same and is much more readable:</p>
<pre><code>my_list = [[10,30,None,20,30,40],[10,20,None,10,30,40]]
tests = {1, 2, 3}

for x in my_list:
    for i, v in enumerate(x):
        if i in tests:
            x[i] = 1 if v is None else 0

print(my_list)
# [[10, 0, 1, 0, 30, 40], [10, 0, 1, 0, 30, 40]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to add the rest of list (that you don't want to replace its elements ) to your edited sub_list :</p>
<pre><code>&gt;&gt;&gt; booleans = [each_list[0:1]+[1 if item is None else 0 for item in each_list[1:-2]]+each_list[4:] for each_list in my_list]
&gt;&gt;&gt; print booleans
[[10, 0, 1, 0, 30, 40], [10, 0, 1, 0, 30, 40]]
</code></pre>
</div>
<span class="comment-copy">Just add expected output, for the sake of clarity</span>
<span class="comment-copy">@BhargavRao just added</span>
<span class="comment-copy">Note that you can assign to a slice; <code>each_list[1:-2] = [1 if item is None ...]</code>, although you'd have to unroll the list comprehension to do this.</span>
<span class="comment-copy">@Fsifegydd, what if the elements to be modified are defined via a <code>slice</code> object?</span>
