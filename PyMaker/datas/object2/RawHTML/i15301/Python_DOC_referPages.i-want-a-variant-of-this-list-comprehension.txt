<div class="post-text" itemprop="text">
<p>I have 10 transactions with properties shares and size. I want the sum of each of these. Is there a way to do it in one loop instead of 2?</p>
<p>How I achieve this now:</p>
<pre><code>total_shares = sum((t.shares for t in transactions))
total_size   = sum((t.size for t in transactions))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nope. <code>sum</code> function can find the sum of only one iterable at a time. So, you either need to change your code like this</p>
<pre><code>total_shares, total_size = 0, 0

for t in transactions:
    total_shares, total_size = total_shares + t.shares, total_size + t.size
</code></pre>
<p>Or be happy with the code which you have already shown in the question. That is perfect and nothing wrong in it.</p>
<p>If you really like to complicate your code, you can change it into this</p>
<pre><code>t_shares, t_size = map(sum, zip(*((t.shares, t.size) for t in transactions))))
</code></pre>
<p>This get first generate tuples with <code>shares</code> and <code>sizes</code> and then <code>zip</code> will transform the tuples into two tuples of <code>shares</code> and <code>sizes</code> and finally <code>sum</code> will be applied to each of the tuples which will be unpacked over <code>t_shares</code> and <code>t_size</code>.</p>
<p><strong>Note:</strong> The <code>map</code>, <code>sum</code> and <code>zip</code> variation actually runs more loops internally than the explicit two loops like you have shown in your question.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to go full functional, toss in a <code>map</code> with your <code>reduce</code>: </p>
<pre><code>import operator
reduce(lambda *tups: map(operator.add, *tups), ((t.shares, t.size) for t in transactions))
</code></pre>
<p>Though, if you only have 10 transactions, it's not like it really matters how many passes you do.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>reduce</code></a> and write your own addition operator:</p>
<pre><code>from functools import reduce

def add_transaction(x, y):
    # exact details here depend on what a transaction contains
    return Transaction(shares=x.shares + y.shares,
                       size=x.size + y.size)

total_shares, total_size = reduce(add_transaction, transactions)
</code></pre>
<p>No bets on whether this is an improvement though.  It might even be a pessimization.</p>
</div>
<span class="comment-copy">Do you think is one loop may change anything instead of 2? Codes looks fine I think.</span>
<span class="comment-copy">Note that you have extra parenthesis in your code.  You could just do: <code>sum(t.shares for t in transactions)</code>, since the parenthesis for <code>sum()</code> enclose the generator expression.</span>
<span class="comment-copy">I was going to suggest the <code>map sum zip</code> variation. I would point out that it does not really reduce the number of loops, though</span>
<span class="comment-copy">Or <code>map(sum, zip(*map(attrgetter('shares', 'size'), transactions)))</code> to get really functional. :)</span>
<span class="comment-copy">I'm going to refuse to post <code>s = sum(t.shares+t.size*1j for t in transactions); total_shares, total_size = s.real, s.imag</code> as an answer because it's insane..</span>
<span class="comment-copy">@DSM lol, I saw that answer in a canon question. That is real evil... :D</span>
<span class="comment-copy">People use it on codegolf..  Which is the whole point, really: there's no native way to do this, so as you say, we write the loop, we wrap it in a function if we really care, and we get on with our day..</span>
<span class="comment-copy">FYI, <code>reduce</code> is also available as a builtin on Python 2. It only got moved out of the main namespace as part of Python 3</span>
<span class="comment-copy">like for VHarisop, this is not how reduce work</span>
<span class="comment-copy">@njzk2: You're right, I forgot the OP changed the datatype from a pair to a "transaction".</span>
