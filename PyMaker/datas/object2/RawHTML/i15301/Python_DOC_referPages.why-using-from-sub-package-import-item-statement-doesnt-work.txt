<div class="post-text" itemprop="text">
<p>I came across this confusing problem: </p>
<pre><code> \dir0 
   \dir1  #package
      __init__.py 
      \dir2  #sub-package 
       __init__.py 
       module.py
</code></pre>
<p>when I use this statement: </p>
<pre><code>from dir1 import dir2 
</code></pre>
<p>then: </p>
<pre><code>from dir2 import module
</code></pre>
<p>it doesn't work, but</p>
<pre><code>from dir1.dir2 import module
</code></pre>
<p>works! </p>
<p>Q:How could this be since <code>dir2</code> is just a namespace (module object) which is initialized <code>from __init__ file</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>from dir2</code> does not look at local names in the current module, it <em>only</em> looks at directories on the <code>sys.path</code> search path.</p>
<p>In other words, it doesn't matter that you imported <code>dir2</code> here, as the global namespace of your module has no influence on what can be imported.</p>
<p>The rules for Python 2 for imports that do not start with a <code>.</code> are as follows:</p>
<ol>
<li><p>Look in the current package for the name. If your current module is the initial script or the interactive interpreter, there is no current package.</p></li>
<li><p>Look at each directory named in <code>sys.path</code> in turn.</p></li>
</ol>
<p>If you are using <code>from __future__ import absolute_imports</code> then the first option is dropped altogether and only the second location is used.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the <a href="https://docs.python.org/3/reference/import.html" rel="nofollow"><code>import</code></a> statement use <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow"><code>sys.path</code></a> (A list of strings that specifies the search path for modules ) for import modules . its because of that you have not <code>dir2</code> in your <code>sys.path</code> but you have <code>dir1</code>. </p>
<p>and about dot (<code>.</code>) <a href="https://docs.python.org/2/tutorial/modules.html#packages" rel="nofollow">python wiki</a> says :</p>
<blockquote>
<p>Packages are a way of structuring Python’s module namespace by using “dotted module names”. For example, the module name A.B designates a submodule named B in a package named A. Just like the use of modules saves the authors of different modules from having to worry about each other’s global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or the Python Imaging Library from having to worry about each other’s module names. </p>
</blockquote>
<p>so when you use <code>from dir1.dir2 import module</code> actually python assume <code>dir2</code> as a submodule of <code>dir1</code>.</p>
</div>
<span class="comment-copy">Well, I'm not quite sure of what do you mean by "current package", Python first searches sys.modules to check if the module was loaded into memory before, if not it'll traverse 'sys.path'.</span>
<span class="comment-copy">@direprobs: Yes, <code>sys.path</code> is only searched if a module hasn't been loaded yet. If you are in a namespaced module (<code>packagename.module</code>) then that namespace is searched before top-level modules are searched. E.g. <code>import foo</code> in <code>packagename.module</code> will find <code>packagename.foo</code> before it'll find a top-level <code>foo</code>.</span>
<span class="comment-copy">I'm not quite sure what all this mess is about ! You puzzled me.</span>
<span class="comment-copy">I was being complete, sorry to have confused you with that.</span>
<span class="comment-copy">@ Martijn Pieters Could you explain your last point? Python will always cache loaded modules in <code>sys.module</code> dictionary. This dictionary is always first looked up before any import, if the name wasn't found there then it's looked up in <code>sys.path</code>. When you talk about a namespaced module what do you mean by that? I can't get your point. <code>package.module</code>, <code>module</code> name is looked up in <code>package's</code> namespace if not found Python will try to import it, if not found it'll raise ImportError, is that what you mean?</span>
<span class="comment-copy">Therefore when a a package is imported it's treated as a module and the sub-packages are treated as nested objects (attributes), correct ?</span>
<span class="comment-copy">@direprobs actually not as <code>attributes</code> In this case, Python first tries to import <code>dir1</code>, then <code>dir1.dir2</code> .</span>
