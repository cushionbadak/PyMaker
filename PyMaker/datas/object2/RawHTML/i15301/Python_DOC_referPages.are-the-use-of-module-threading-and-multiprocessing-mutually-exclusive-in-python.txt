<div class="post-text" itemprop="text">
<ul>
<li><a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html</a></li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">https://docs.python.org/3/library/multiprocessing.html</a></li>
<li><a href="https://stackoverflow.com/questions/18114285/python-what-are-the-differences-between-the-threading-and-multiprocessing-modul">Python: what are the differences between the threading and multiprocessing modules?</a></li>
</ul>
<p>Using Python 3.4 on Linux</p>
<p>I’m new to parallel programming and I’m encountering problems when running the threading.Threads() for a specific method, and the module multiprocessing.Process() for another. Both methods work fine when the other one is commented out. Neither method has anything to do with the other (eg no attempt to share data). But when I have them both running neither works and everything freezes. As far as I can tell the multiprocessing seems to lock up. I assume the same thing applies for the Threading.</p>
<p><strong>So the first step is to assert whether or not this is even possible?</strong></p>
<p>(I have a feeling some of you will ask the reason for this... The threading does a simple capture user key checking while the multiprocessing does some heavy lifting)</p>
<p>I’m providing an example (more like pseudo code) to help illustrate how the methods are used. </p>
<p>file t.py</p>
<pre><code>import threading

Class T:

    Def __init__():
        t = threading.Thread(target = self.ThreadMethod)
        t.daemon = True
        t.start()

    Def ThreadMehod():
        # capture key
</code></pre>
<p>file m.py</p>
<pre><code>import multiproceessing

Class M:

    Def __init__():
        mp = multiprocessing.Process(target = self.ProcessMethod)
        mp.start()

    Def ProcessMethod():
        # heavy lifting
</code></pre>
<p>file main.py</p>
<pre><code>import T
import M

Class main:

  Def __init__():
     T()

  Def DoTheProcess()
     for i in range(5):
       M()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>"no. threading and multiprocessing are not mutually exlusive. Though there are known issues (e.g., the reason for atfork existance) that constrain how they can be used together."
- J.F. Sebastian</p>
</div>
<span class="comment-copy">the short answer is that i dont think this should happen, i've used both in the same application before without issue, although with a slightly different arrangement, have you checked to make sure you haven't got any overlap of variable names? and how are you importing? are you doing from x import * or just import x?</span>
<span class="comment-copy">I've just tried using Pool instead of Process and now it seems that both work... Like I said, I'm new to mp so I probably implemented Process wrong. I'd accept your answer if I could...</span>
<span class="comment-copy">Could you provide <a href="http://stackoverflow.com/help/mcve">a minimal but complete code example</a>? It might help to diagnose the problem. Mention what is your OS and how do you run the script: what do you expect to happen? And what happens instead?</span>
<span class="comment-copy">Can you reproduce the issue with <code>forkserver</code> start method? (make sure to call <code>mp.set_start_method('spawn')</code> before starting any threads).</span>
<span class="comment-copy">If <code>Pool</code> works but <code>Process</code> doesn't then it means that the issue is in your code. The answer to the title is "no. <code>threading</code> and <code>multiprocessing</code> are not mutually exlusive. Though there are known issues (e.g., the reason for <code>atfork</code> existance) that constrain how they can be used together."</span>
<span class="comment-copy"><a href="http://meta.stackoverflow.com/questions/251597/question-with-no-answers-but-issue-solved-in-the-comments" title="question with no answers but issue solved in the comments">meta.stackoverflow.com/questions/251597/…</a></span>
