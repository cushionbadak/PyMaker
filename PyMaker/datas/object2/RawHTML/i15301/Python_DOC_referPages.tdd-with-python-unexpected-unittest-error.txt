<div class="post-text" itemprop="text">
<p>This is my code;    </p>
<pre><code>from selenium import webdriver
import unittest

class NewVisitorTest(unittest.TestCase):

    def setup(self):
        self.browser = webdriver.Firefox()
        self.browser.implicitly_wait(5)

    def teardown(self):
        self.browser.quit()

    def test_can_start_list_and_retrieve_later(self):
    # checkout the homepage
        self.browser.get('http://127.0.0.1:8000')

    # check title and header
        self.assertIn('To-Do', self.browser.title)
        self.fail('Finish the test')

if __name__ == '__main__':
    unittest.main(warnings='ignore')
</code></pre>
<p>which results in the following error:</p>
<pre><code>$ python3 functional_tests.py 
E
======================================================================
ERROR: test_can_start_list_and_retrieve_later         (__main__.NewVisitorTest)
----------------------------------------------------------------------
Traceback (most recent call last):
File "functional_tests.py", line 15, in     test_can_start_list_and_retrieve_later
self.browser.get('http://127.0.0.1:8000')
AttributeError: 'NewVisitorTest' object has no attribute 'browser'

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (errors=1)
</code></pre>
<p>the code is taken from TDD with python</p>
<p>My code matches with what has beeen written in the tutorial but should produce an assertIn error as the page has yet to be set up. Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are typos: <code>setup</code> should be <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp" rel="nofollow"><code>setUp</code></a>. And <code>teardown</code> should be <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown" rel="nofollow"><code>tearDown</code></a>.</p>
<pre><code>class NewVisitorTest(unittest.TestCase):

    def setUp(self):
        self.browser = webdriver.Firefox()
        self.browser.implicitly_wait(5)

    def tearDown(self):
        self.browser.quit()

    ...
</code></pre>
</div>
<span class="comment-copy">Thank you, that makes the code fail as expected. Could you explain to me why that makes it work? Sorry for my ignorance.</span>
<span class="comment-copy">@w0nk, The names of the methods should match (Python does distinguish identifier cases). And the <code>TestCase</code> expect <code>setUp</code>, <code>tearDown</code>, not <code>setup</code>, <code>teardown</code>.</span>
<span class="comment-copy">done and thanks</span>
