<div class="post-text" itemprop="text">
<p>I am reading in file as follows:</p>
<pre><code>def main(src):
    with open(src, encoding='UTF-8') as incoming:
        for line in incoming:
            data = line
            print(data)
        del line
</code></pre>
<p>Code gets struck at this line (I don't know if it will show in browser):</p>
<pre><code>    &lt;DT&gt;&lt;A HREF="https://www.youtube.com/watch?v=-ygKS7WU4YU" ADD_DATE="1421587655"&gt;?*** EarAbuse ♛ &amp;#39;Pppppp&amp;#39; (Official &amp;amp; Uncensored) - YouTube&lt;/A&gt;
</code></pre>
<p>Notice that <strong>B</strong>lack <strong>C</strong>hess <strong>Q</strong>ueen (i.e. \u265b) just after the words <code>EarAbuse</code> seems to be causing the problem as reported in-</p>
<pre><code>Traceback (most recent call last):
  File "a.py", line 18, in &lt;module&gt;
    moduleName.main(fileName)
  File "C:\Users\Systems\Desktop\merc\bm\chrome.py", line 53, in main
    print(data)
  File "C:\Python34\lib\encodings\cp1252.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_table)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u265b' in position
87: character maps to &lt;undefined&gt;
</code></pre>
<p>I have-</p>
<ol>
<li>read docs.python.org/3/howto/unicode.html</li>
<li>used <code>data = repr(line)</code></li>
<li>used <code>errors="surrogateescape"</code> while opening file</li>
</ol>
<p>No love. Also charbase says that python escape for that BCQ is <code>u'\u265b'</code>, what does it mean &amp; am I not implementing it already?</p>
<p><strong>Edit:</strong> Strangely, typing <code>print('\u265b')</code> or <code>print(♛)</code> in IDLE works fine without any error &amp; shows that <em>beautiful</em> BCQ - so what is wrong, why won't my code read beyond this line?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem occurs when you are trying to print the BCQ character. I would guess that your console encoding/locale is not capable of emitting all Unicode code points - i.e. it is either ASCII or a 256-character codepage.</p>
<p>Instead of printing, try:</p>
<pre><code>import sys

sys.stdout.buffer.write(data.encode('utf8'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error is (almost) self explainatory. It says that Python tries to encode the string in Windows 1252 character set, that cannot represent <code>'\u265b'</code>. It works fine in idle, because idle is a GUI application is only limited by the glyphs that the font can represent, whereas a console application con only display the 256 characters of the code page of the console.</p>
<p>You should explicitely convert the string into a byte array in the correct code page, with <code>errors='replace'</code> :</p>
<pre><code>for line in incoming:
    data = line
    print(data.encode('cp1252', errors='replace'))
</code></pre>
<p>Of course it will display a <code>?</code> instead of the <code>♛</code> as the console driver cannot display that UTF character, but you won't get any error.</p>
<p>If you do not like the <code>b'...'</code> saying that you are printing 8 bits characters, just convert back to string again :</p>
<pre><code>    print(data.encode('cp1252', errors='replace').decode('cp1252'))
</code></pre>
<p>The forward-reverse encoding just ensures that all characters are now printable on the console (or are replaced).</p>
</div>
<span class="comment-copy">This is not a problem with the file.  It is a problem with the terminal you are trying to <code>print()</code> to.  Your terminal is using the <code>charmap</code> codec, probably because you're on Windows.</span>
<span class="comment-copy">Of course, this will probably give you <a href="http://en.wikipedia.org/wiki/Mojibake" rel="nofollow noreferrer">mojibake</a> on a terminal which is not actually using UTF-8...</span>
<span class="comment-copy">True - just trying to point the OP in the right direction without knowing exactly what environment the person is working in.</span>
<span class="comment-copy">Thanks @user5402, support or no support my code needed something to display on the terminal - this fixed my problem. Also, please suggest a better title for this question so it may help others in future</span>
<span class="comment-copy">Perhaps "Unable to print Unicode char despite reading as UTF-8" because printing is really where your program failed.</span>
<span class="comment-copy">thanks for the great insights, +1(ed), I will surely learn from your answer but will need some time being able to completely digest it. Also, how did u figure out it was <code>Windows 1252</code>?</span>
<span class="comment-copy">@user4453945 : from your error message <code>File "...\cp1252.py"</code> I assumed that Python was trying to encode in win1252. But I must acknowledge I'm not really sure. But <code>chcp</code> in console shows current code page.</span>
<span class="comment-copy">ok great. One more thing - how to develop good "Error Reading" prowess, if u can spare some time posting a small answer?</span>
<span class="comment-copy">For Windows 8+, use <code>chcp 65001</code> to set the console to UTF-8 before starting Python. Make sure the console is using a truetype font such as Consolas. But don't use this with Windows XP, Vista, or 7. The old console server is buggy for multibyte encodings. Instead try Drekin's <a href="https://github.com/Drekin/win-unicode-console" rel="nofollow noreferrer">win-unicode-console</a> to use the console's native UTF-16 encoding.</span>
