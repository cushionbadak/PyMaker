<div class="post-text" itemprop="text">
<p>I have two files, file1 and file2, sorted numerically by column 2:</p>
<p>file1</p>
<pre><code>A 1
B 10
</code></pre>
<p>file2</p>
<pre><code>C 2
D 100
</code></pre>
<p>I want to merge them and get this output, which is also sorted numerically by column 2:</p>
<pre><code>D 1
B 2
C 10
A 100
</code></pre>
<p>I can do it with this unix command, which doesn't sort, but merges the pre-sorted files:</p>
<pre><code>sort -m -k2n,2 file1 file2
</code></pre>
<p>But how do I do this in Python 3.4 without reading the files into memory and without sorting? Python 3.5 will add a key parameter to heapq.merge() according to <a href="https://docs.python.org/3.5/library/heapq.html#heapq.merge" rel="nofollow">docs.python.org</a>, <a href="http://bugs.python.org/issue13742" rel="nofollow">bugs.python.org</a> and <a href="https://github.com/python/cpython/blob/master/Lib/heapq.py" rel="nofollow">github.com</a>, but no pre-release is available. In the meantime I came up with the solution below. Is there a more elegant way? Could I have used <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">map</a> and looped over the two files? Perhaps I should post to codereview instead?</p>
<pre><code>import heapq

def key_generator(fd):
    for line in fd:
        yield int(line.split()[1]), line

with open('file1') as fd1, open('file2') as fd2:

    it1 = key_generator(fd1)
    it2 = key_generator(fd2)
    for key, line in heapq.merge(it1, it2):
        print(line, end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just downloaded alpha release 1 of Python3.5 and I was able to do it by using the new <a href="https://docs.python.org/3/glossary.html#term-key-function" rel="nofollow">key function</a> of <a href="https://docs.python.org/3.5/library/heapq.html#heapq.merge" rel="nofollow">heapq.merge()</a>:</p>
<pre><code>from heapq import merge

def keyfunc(s):
    return int(s.split()[1])

with open('file1') as fd1, open('file2') as fd2:
    for line in merge(fd1, fd2, key=keyfunc):
        print(line)
</code></pre>
<p>Or for those that prefer one line lambda functions:</p>
<pre><code>key=lambda line: int(line.split()[1])
</code></pre>
<p>Could I have done this in one line using map, operator.itemgetter(), str.split and int?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>You can try this way</p>
</blockquote>
<pre><code>dict={}

with open("a.txt",'r') as f1, open("b.txt",'rb') as f2:
    lines_a=f1.readlines()
    lines_b=f2.readlines()
    for line in lines_a:
        dict.update({line.split()[0]:int(line.split()[1])})

    for line in lines_b:
        dict.update({line.split()[0]:int(line.split()[1])})

for w in sorted(dict, key=dict.get):
  print w,(dict[w])
</code></pre>
</div>
<span class="comment-copy">This looks elegant to me. You can't use <code>map</code> without using extra temporary storage since sometimes you want to print several items from one list in a row, so you'd need to save the items you'd iterated past in the other list.</span>
<span class="comment-copy">Your solution is just fine, this is called the <a href="https://en.wikipedia.org/wiki/Schwartzian_transform" rel="nofollow noreferrer">Decorate-Sort-Undecorate</a> pattern.</span>
<span class="comment-copy">@augurar Thanks for explaining the terms to a non programmer.</span>
<span class="comment-copy">The OP stated he does not want to read the whole file into memory at once.  His solution only requires storing one line from each file at a time.</span>
