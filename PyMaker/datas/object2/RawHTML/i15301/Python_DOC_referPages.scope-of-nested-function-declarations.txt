<div class="post-text" itemprop="text">
<p>I have the following code: </p>
<pre><code>def function_reader(path):
    line_no = 0 
    with open(path, "r") as myfile:
        def readline():
            line_no +=1
            return myfile.readline()
</code></pre>
<p>Python keeps returning:</p>
<blockquote>
<p>UnboundLocalError: local variable 'line_no' referenced before assignment</p>
</blockquote>
<p>when executing <code>line_no +=1</code>. </p>
<p>I understand that the problem is that nested function declarations have weird scoping in python (though I do not understand why it was programmed this way). I'm mostly wondering if there is a simple way to help python resolve the reference, since I really like the functionality this would provide. </p>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, there is not a way to do this in Python 2.x.  Nested functions can only read names in the enclosing function, not reassign them.</p>
<p>One workaround would be to make <code>line_no</code> a list and then alter its single item:</p>
<pre><code>def function_reader(path):
    line_no = [0]
    with open(path, "r") as myfile:
        def readline():
            line_no[0] += 1
            return myfile.readline()
</code></pre>
<p>You would then access the line number via <code>line_no[0]</code>.  Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; def outer():
...     data = [0]
...     def inner():
...        data[0] += 1
...     inner()
...     return data[0]
...
&gt;&gt;&gt; outer()
1
&gt;&gt;&gt;
</code></pre>
<p>This solution works because we are not reassigning the name <code>line_no</code>, only mutating the object that it references.</p>
<hr/>
<p>Note that in Python 3.x, this problem would be easily solved using the <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt" rel="nofollow"><code>nonlocal</code> statement</a>:</p>
<pre><code>def function_reader(path):
    line_no = 0
    with open(path, "r") as myfile:
        def readline():
            nonlocal line_no
            line_no += 1
            return myfile.readline()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's hard to say what you're trying to achieve here by using closures. But the problem is that with this approach either you'll end with an <code>ValueError: I/O operation on closed file</code> when you return <code>readline</code> from the outer function or just the first line if you return <code>readline()</code> from the outer function. </p>
<p>If all you wanted to do is call <code>readline()</code> repeatedly or loop over the file and also remember the current line number then better use a class:  </p>
<pre><code>class FileReader(object):
    def __init__(self, path):
        self.line_no = 0
        self.file = open(path)

    def __enter__(self):
        return self

    def __iter__(self):
       return self

    def next(self):
        line = next(self.file)
        self.line_no += 1
        return line

    def readline(self):
        return next(self)

    def __exit__(self, *args):
        self.file.close()
</code></pre>
<p><strong>Usage:</strong> </p>
<pre><code>with FileReader('file.txt') as f:
    print next(f)
    print next(f)
    print f.readline()
    print f.line_no # prints 3
    for _ in xrange(3):
        print f.readline() 
    print f.line_no # prints 6
    for line in f:
        print line
        break
    print f.line_no # prints 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The more Pythonic way to get the next line and keep track of the line number is with the enumerate builtin:</p>
<pre><code>with open(path, "r") as my file:
    for no, line in enumerate(myfile, start=1):
        # process line
</code></pre>
<p>This will work in all current Python versions.</p>
</div>
<span class="comment-copy">It's working in Python 3.4</span>
<span class="comment-copy">@sacma: Did you actually call <code>readline()</code>?</span>
<span class="comment-copy">No, this isn’t possible (at all!) in Python 2. In Python 3, it’s easy: <code>nonlocal line_no</code>. (Use Python 3 if you can.)</span>
<span class="comment-copy">This problem is actually <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow noreferrer">documented in the FAQ</a>, but alas, you need to use the <code>nonlocal</code> keyword that wasn't introduced until Python 3.</span>
<span class="comment-copy">And what exactly you're trying to do here? I'd use a class here.</span>
<span class="comment-copy"><code>nonlocal</code> actually equal to <code>global</code> in some cases right? Or they are doing the same thing in some points. The difference is <code>global</code> variables can changeable by outside of function, <code>nonlocal</code> not. Am I right?</span>
<span class="comment-copy">Yes.  <code>global</code> is for names in the <code>global</code> namespace (outside all functions) where as <code>nonlocal</code> is for names in enclosing functions.  Both are scope declarations through.</span>
<span class="comment-copy">A class is overkill here since the file itself can iterate linewise. For keeping track of the current line number, all you need is enumerate.</span>
