<div class="post-text" itemprop="text">
<p>In python 2.7:</p>
<pre><code>&gt;&gt;&gt; x1= '\xba\xba'
&gt;&gt;&gt; x2=b'\xba\xba'
&gt;&gt;&gt; x1==x2
True
</code></pre>
<p>In python 3.4:</p>
<pre><code>&gt;&gt;&gt; x1='\xba\xba'
&gt;&gt;&gt; x2=b'\xba\xba'
&gt;&gt;&gt; x1==x2
False
&gt;&gt;&gt; type(x1)
&lt;class 'str'&gt;
&gt;&gt;&gt; type(x2)
&lt;class 'bytes'&gt;
</code></pre>
<ol>
<li>how to change <code>x1</code> into <code>x2</code>?    </li>
<li>how to change <code>x2</code> into <code>x1</code>?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x, use <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow"><code>str.encode</code></a> (str -&gt; bytes) and <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow"><code>bytes.decode</code></a> (bytes -&gt; str) with latin1 encoding (or iso-8859-1):</p>
<pre><code>&gt;&gt;&gt; x1 = '\xba\xba'
&gt;&gt;&gt; x2 = b'\xba\xba'
&gt;&gt;&gt; x1.encode('latin1') == x2
True
&gt;&gt;&gt; x2.decode('latin1') == x1
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Both <code>x1</code> and <code>x2</code> are bytestrings in Python 2. If you compare Unicode and bytes on Python 2; you also get <code>False</code> in this case:</p>
<pre><code>&gt;&gt;&gt; u'\xba\xba' == b'\xba\xba'
__main__:1: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
False
</code></pre>
<p><code>x1</code> is a Unicode string in Python 3. </p>
<p>You could add <code>from __future__ import unicode_literals</code> to make the code work the same on both Python 2 and 3:</p>
<pre><code>&gt;&gt;&gt; from __future__ import unicode_literals
&gt;&gt;&gt; x1 = '\xab\xab'
&gt;&gt;&gt; type(x1)
&lt;type 'unicode'&gt;
</code></pre>
<p>Don't mix bytestrings and Unicode strings.</p>
<p>To convert Unicode string to bytes:</p>
<pre><code>bytestring = unicode_string.encode(character_encoding)
</code></pre>
<p>To convert bytes to Unicode string:</p>
<pre><code>unicode_string = bytestring.decode(character_encoding)
</code></pre>
</div>
<span class="comment-copy"><code>'\xba\xba'.encode('latin1')</code> -&gt; <code>UnicodeDecodeError</code> on Python 2.</span>
<span class="comment-copy">@J.F.Sebastian, in Python 2.x, <code>'\xba\xba' == b'\xba\xba'</code> (assuming no <code>from __future__ import unicode_literals</code>); no need to encode it. They are both byte strings.</span>
<span class="comment-copy">The quesiton has code in both Python 2 and 3. You should specify the Python version you expect the code example to work if your code can't work on both.</span>
<span class="comment-copy">@J.F.Sebastian, The question title mentioned <code>Python 3</code>. Anyway, I will specify the version. Thank you for the suggestion.</span>
