<div class="post-text" itemprop="text">
<p>If I understand correctly, when I run a Python program, the Python interpreter generates <em>bytecode</em> (the <code>.pyc</code> file that appears alongside the <code>.py</code> source) unless the source contains a syntax error.</p>
<p>Does the bytecode compiler generate any other exceptions or are all the other exceptions raised at runtime when the <code>.pyc</code> code is being executed?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, any exception type can <em>technically</em> be raised during runtime via <code>raise &lt;exception&gt;</code>. But I assume that you understand this and are asking what exceptions might be raised while Python interprets your code (before execution).  There are actually quite a few:</p>
<ul>
<li><p><a href="https://docs.python.org/3/library/exceptions.html#SyntaxError" rel="nofollow"><code>SyntaxError</code></a>: This is raised by the parser as it reads the code.  It results from invalid syntax such as unbalanced parenthesis, using a keyword in the wrong place, etc.</p></li>
<li><p><a href="https://docs.python.org/3/library/exceptions.html#IndentationError" rel="nofollow"><code>IndentationError</code></a>: This is a subclass of <code>SyntaxError</code> and is raised whenever your code has improper indentation.  An example would be:</p>
<pre><code>if condition:
    line_indented_4_spaces
   line_indented_3_spaces
</code></pre></li>
<li><p><a href="https://docs.python.org/3/library/exceptions.html#TabError" rel="nofollow"><code>TabError</code></a>: This is a subclass of <code>IndentationError</code> and is raised when you inconsistently mix tabs and spaces in a source file.</p></li>
<li><p><a href="https://docs.python.org/3/library/exceptions.html#SystemError" rel="nofollow"><code>SystemError</code></a>: This is raised by the interpreter when an internal operation fails.  Encountering one usually means that your Python installation is messed up and might need a reinstall.  </p></li>
<li><p><a href="https://docs.python.org/3/library/exceptions.html#MemoryError" rel="nofollow"><code>MemoryError</code></a>: This is similar to <code>SystemError</code> and can be raised when an internal operation fails for lack of memory.</p></li>
</ul>
<p>All of these exceptions can be raised before your code even begins to execute.  The first three are caused by a corrupt source file and can be resolved by simply fixing the syntax or indentation.  The latter two however are raised by the interpreter itself for internal operations which fail.  This means that they are rare, but also that they are more serious and not so easy to fix.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no compilation step typically when you're working with Python code so I would argue that all errors in Python, SyntaxErrors included, are runtime errors.</p>
<p>For example, lets write this file:</p>
<pre><code>in xrange(5):
</code></pre>
<p>That's obviously just nonsense (we'll even name it nonsense.py), but lets fire up the interpreter:</p>
<pre><code>$ python
&gt;&gt;&gt; try:
...     import nonsense
... except SyntaxError:
...     print("A syntax error occurred at runtime!")
...
A syntax error occurred at runtime!
&gt;&gt;&gt;
</code></pre>
<p>So there you have it - a SyntaxError was raised and caught at runtime, which, in my mind at least, indicates that it's a runtime error.</p>
</div>
<span class="comment-copy">There's also <code>IndentationError</code> but that may be a trivial addition to your question (since it's effectively also a syntax error).</span>
<span class="comment-copy">The entire list of built-in exceptions for Python 2.7 is <a href="https://docs.python.org/2/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">here</a>. There is also <code>TabError</code> which I forgot about. I believe the rest are runtime errors but there's some obscure ones that I'm not entirely sure all the ways they can be triggered. I'll let someone more knowledgeable about more implementations of Python correct me if I'm wrong.</span>
<span class="comment-copy">Note that errors like <code>SyntaxError</code> <i>can</i> also be raised at runtime.  e.g. <code>ast.parse</code> can raise <code>SyntaxError</code> for example.</span>
<span class="comment-copy">@RickTeachey <code>SyntaxError</code> subclasses <code>Exception</code> (see my link to 2.7 docs).</span>
<span class="comment-copy"><code>MemoryError</code> can also be raised at runtime, even without doing funny things with <code>ast</code> or explicitly <code>raise</code>ing it or any of those other loopholes - if you try to make a <code>list</code> that's too big for your system's memory, for example.</span>
<span class="comment-copy">This works because you are <i>importing</i> the module, which is done at runtime.  You cannot catch a <code>SyntaxError</code> in a file which you run directly however.  Also, you cannot catch a <code>SystemError</code> raised by a corrupted Python install.  The exceptions I listed in my answer can all be raised before the code starts executing (before runtime).</span>
<span class="comment-copy">Precisely. Move your try/except block into nonsense.py then execute <code>python ./nonsense.py</code> from the command line. Even if you wrap with try...except SyntaxError it will not be caught.</span>
<span class="comment-copy">&gt; <code>There is no compilation step typically when you're working with Python code</code>  That's not true. CPython (the main Python implementation) always compiles Python code to bytecode even though that happens automatically on the background.</span>
