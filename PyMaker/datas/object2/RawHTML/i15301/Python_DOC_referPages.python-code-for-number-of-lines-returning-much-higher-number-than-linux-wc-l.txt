<div class="post-text" itemprop="text">
<p>When I do <code>wc -l</code> on a file in Linux (a CSV file of a couple million rows), it reports a number of lines that is lower than what this Python code shows (simply iterating over the lines in the file) by over a thousand. What would be the reason for that?</p>
<pre><code>with open(csv) as csv_lines:
    num_lines = 0
    for line in csv_lines:
        num_lines += 1
    print(num_lines)
</code></pre>
<p>I've had cases where <code>wc</code> reports one less than the above, which makes sense in cases where the file has no terminating newline character, as it seems like <code>wc</code> counts complete lines (including terminating newline) while this code only counts any lines. But what would be the case for a difference of over a thousand lines?</p>
<p>I don't know much about line endings and things like that, so maybe I've misunderstood how <code>wc</code> and this Python code count lines, so maybe someone could clarify. In <a href="https://stackoverflow.com/questions/14594533/linux-lines-counting-not-working-with-python-code">linux lines counting not working with python code</a> it says that <code>wc</code> works by counting the number of <code>\n</code> characters in the file. But then what is tis Python code doing exactly?</p>
<p>Is there a way to reconcile the difference in numbers to figure out exactly what is causing it? Like a way to calculate number of lines from Python that counts in the same way that <code>wc</code> does.</p>
<p>The file was generated possibly on a different platform that Linux, not sure if that might be related.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are using <code>print(num_lines)</code> I'm assuming you are using Python 3.x, and I've used Python 3.4.2 as an example.</p>
<p>There reason for different number of line counts comes from the fact that the file opened by <code>open(&lt;name&gt;)</code> counts both <code>\r</code> and <code>\n</code> characters as <em>separate</em> lines as well as the <code>\r\n</code> combination (<a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow">docs</a>, the <em>universal newlines</em> part). This leads to the following:</p>
<pre><code>&gt;&gt;&gt; with open('test', 'w') as f:
        f.write('\r\r\r\r')

&gt;&gt;&gt; with open('test') as f:
        print(sum(1 for _ in f))
4
</code></pre>
<p>whilst <code>wc -l</code> gives:</p>
<pre><code>$ wc -l test
0 test
</code></pre>
<p>The <code>\r</code> character is used as a newline in i.e. old Macintosh systems.</p>
<p>If you would like to split only on <code>\n</code> characters, use the <code>newline</code> keyword argument to <code>open</code>:</p>
<pre><code>&gt;&gt;&gt; with open('test', 'w') as f:
        f.write('\r\r\r\r')

&gt;&gt;&gt; with open('test', newline='\n') as f:
        print(sum(1 for _ in f))
1
</code></pre>
<p>The <code>1</code> comes from the fact you've already mentioned. There is not a single <code>\n</code> character in the file so <code>wc -l</code> returns 0, and Python counts that as a single line.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try taking a part of the file and repeat line counting. For example:</p>
<pre><code># take first 10000 lines
head -10000 file.csv &gt; file_head.csv

# take last 10000 lines
tail -10000 file.csv &gt; file_tail.csv

# take first 100MB
dd if=file.csv of=file_100M.csv bs=1M count=100
</code></pre>
</div>
<span class="comment-copy">Here's a <a href="http://stackoverflow.com/questions/9371238/why-is-reading-lines-from-stdin-much-slower-in-c-than-python#comment11966378_9371238">simple but efficient <code>wc -l</code> implementation in Python</a></span>
