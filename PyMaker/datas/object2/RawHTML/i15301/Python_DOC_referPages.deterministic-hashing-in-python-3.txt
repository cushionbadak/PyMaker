<div class="post-text" itemprop="text">
<p>I'm using hashing of strings for seeding random states in the following way:</p>
<pre><code>context = "string"
seed = hash(context) % 4294967295 # This is necessary to keep the hash within allowed seed values
np.random.seed(seed)
</code></pre>
<p>This is unfortunately (for my usage) non-deterministic between runs in Python 3.3 and up. I do know that I could set the <code>PYTHONHASHSEED</code> environment variable to an integer value to regain the determinism, but I would probably prefer something that feels a bit less hacky, and won't entirely disregard the extra security added by random hashing. Suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a purpose-built hash function. <a href="https://docs.python.org/3/library/zlib.html#zlib.adler32" rel="noreferrer"><code>zlib.adler32()</code></a> is an excellent choice; alternatively, check out the <a href="https://docs.python.org/3/library/hashlib.html" rel="noreferrer"><code>hashlib</code></a> module for more options.</p>
</div>
<div class="post-text" itemprop="text">
<p>Forcing Python's built-in <code>hash</code> to be deterministic <strong>is</strong> intrinsically hacky.  If you want to avoid hackitude, use a different hashing function -- see e.g in Python-2: <a href="https://docs.python.org/2/library/hashlib.html" rel="nofollow noreferrer">https://docs.python.org/2/library/hashlib.html</a>,
and in Python-3: <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer">https://docs.python.org/3/library/hashlib.html</a></p>
</div>
<span class="comment-copy">Perfect, thanks!</span>
