<div class="post-text" itemprop="text">
<p>I was checking a calculator example, in the example used <code>eval()</code> which is dangerous normally, but here is a part of that example;    </p>
<pre><code>if button == "=":
    #Check carefully how we using the 'dangerous' eval()
    total = eval(str1,{"__builtins__":None},{})
    str1 = str(total)
    print (str1)
</code></pre>
<p>I checked it but I didn't understand; how <code>eval(str1,{"__builtins__":None},{})</code> is not dangerous? It's about <code>{"__builtins__":None},{}</code> this part obviously, but I don't understand.</p>
<p>Note: <code>str1</code> is a string that we are adding numbers and smybols like <code>4+5</code>. Then <code>eval()</code> processing it. </p>
</div>
<div class="post-text" itemprop="text">
<p>The code is not safe in the slightest. It's relatively easy to get access to the <code>builtins</code> module just by accessing attributes of literals.</p>
<p>eg.</p>
<pre><code>result = eval("""[klass for klass in ''.__class__.__base__.__subclasses__()
            if klass.__name__ == "BuiltinImporter"][0].load_module("builtins")""",
    {"__builtins__":None},{})
assert result is __builtins__
</code></pre>
<p>Broken down:</p>
<ul>
<li><code>''.__class__.__base__</code> is shorthand for <code>object</code></li>
<li><code>object.__subclasses__()</code> lists all the subclasses of <code>object</code> in the interpreter (this includes classes used by the import machinery</li>
<li><code>[klass for klass in ... if klass.__name__ == "BuiltinImporter"][0]</code> -- select the <code>BuiltinImporter</code> class.</li>
<li><code>load_module("builtins")</code> use the <code>BuiltinImporter</code> to get access to the <code>builtins</code> module -- the very thing you were trying to restrict access to.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow">the documentation of <code>eval</code></a>,</p>
<blockquote>
<pre><code>eval(expression, globals=None, locals=None)
</code></pre>
<p>The <em><code>expression</code></em> argument is parsed and evaluated as a Python expression using the <em><code>globals</code></em> and <em><code>locals</code></em> dictionaries as global and local namespace. If the <em><code>globals</code></em> dictionary is present and lacks <code>'__builtins__'</code>, the current globals are copied into <em><code>globals</code></em> before <em><code>expression</code></em> is parsed. This means that <em><code>expression</code></em> normally has full access to the standard <code>builtins</code> module and restricted environments are propagated. If the <em><code>locals</code></em> dictionary is omitted it defaults to the <em><code>globals</code></em> dictionary. If both dictionaries are omitted, the expression is executed in the environment where <code>eval()</code> is called.</p>
</blockquote>
<p>So the attempt of the code you are showing is to <code>eval</code> an expression in a context where no potentially dangerous functions are available.  For example, <code>eval('print("bad stuff")')</code> will print bad stuff but not if you pass an empty global namespace even without the builtin <code>print</code>.</p>
<p>Don't take this sense of security too far.  Untrusted code can also harvoc your program even within those restrictions.  For example, the following string if <code>eval()</code>d will crash your Python interpreter by exceeding its recursion stack:</p>
<pre><code>(lambda f : f(f))(lambda f : f(f))
</code></pre>
<p>As HÃ¥ken Lid has mentioned in <a href="https://stackoverflow.com/questions/28100471/how-eval-is-not-dangerous-in-this-example/28100600#comment44576634_28100471">his comment</a>, a safer approach would be to use <a href="https://docs.python.org/3.4/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a> which was just made for this.  As a general rule: it is always better to use the least powerful command that does the job rather than using a powerful one and trying to restrict it manually.  There are too many things you can forget.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason why that is a safer way of executing eval() is because it is explicitly restricting which builtin methods are allowed (which are none in this case). You can use that parameter to specify any of the builtins that are allowed.  <a href="http://lybniz2.sourceforge.net/safeeval.html" rel="nofollow">Here</a> is more information on the subject</p>
</div>
<span class="comment-copy">This might be safe, but I would use <a href="https://docs.python.org/3.4/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval()</a> for untrusted input.</span>
<span class="comment-copy">See <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">Eval really is dangerous</a> for an explanation of why this <b>isn't</b> in fact safe.</span>
<span class="comment-copy">The confused part is, <code>{"__builtins__":None},{}</code> in here, are we set <code>builtins</code> to <code>None</code> ? And what about <code>{}</code> empty bracers?</span>
<span class="comment-copy">It is explained in the quoted documentation, no?  If we don't explicitly set <code>'__builtins__' : None</code>, the expression would be evaluated with global builtins such as <code>print</code> available.</span>
