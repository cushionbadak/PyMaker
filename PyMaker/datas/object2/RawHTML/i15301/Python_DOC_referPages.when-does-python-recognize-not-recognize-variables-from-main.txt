<div class="post-text" itemprop="text">
<p>When (if at all) do functions recognize variables that have been initialized in the <code>main</code> function?</p>
<p>E.g.: When I write the following Python code:</p>
<pre><code>def plus():
    variable += 1

if __name__ == '__main__': 
    variable = 1
    plus()
</code></pre>
<p>I get the following error: <code>UnboundLocalError: local variable 'variable' referenced before assignment</code></p>
<p>However, when I do something similar, but with a <code>dictionary</code>:</p>
<pre><code>def plus():
    dic[1] += 1

if __name__ == '__main__':
    dic = {}
    dic[1] = 1
    plus()
    print dic[1]
</code></pre>
<p>The output is : <code>2</code></p>
<p>What's the difference between the two cases?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>+=</code> operator is considered as an assignment when used with <strong>simple</strong> variables. So, Python while parsing the function body will add <code>variable</code> in <code>&lt;function_object&gt;.func_code.co_varnames</code>, and due to this during runtime Python will never look for that variable in any other scope unless you had <code>global</code> or <code>nonlocal</code> declaration(Python 3 only) at the top of the function. Note that it doesn't matter if you used <code>variable</code> before using it with <code>+=</code>(see the last example), the variable is now local everywhere in the function body. </p>
<pre><code>&gt;&gt;&gt; def plus():
...     var += 1
...     
&gt;&gt;&gt; dis.dis(plus)
  2           0 LOAD_FAST                0 (var)
              3 LOAD_CONST               1 (1)
              6 INPLACE_ADD         
              7 STORE_FAST               0 (var)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE   
</code></pre>
<p>On the other hand, <code>dic[1]</code> is variable look-up followed by a <a href="https://docs.python.org/2/library/dis.html#opcode-BINARY_SUBSCR" rel="nofollow"><code>BINARY_SUBSCR</code></a>(same thing for <a href="https://docs.python.org/2/library/dis.html#opcode-LOAD_ATTR" rel="nofollow"><code>LOAD_ATTR</code></a> as well; you can do <code>x.extend([100])</code> but not <code>x+=[100]</code>; where <code>x</code> is a list) and as there are no assignment statements related to <code>dic</code> after that Python considers it as a either a global variable(<a href="https://docs.python.org/2/library/dis.html#opcode-LOAD_GLOBAL" rel="nofollow"><code>LOAD_GLOBAL</code></a>) or a free variable(<a href="https://docs.python.org/2/library/dis.html#opcode-LOAD_DEREF" rel="nofollow"><code>LOAD_DEREF</code></a>) and fetches its value from there.</p>
<pre><code>&gt;&gt;&gt; def plus():
    var[0] += 1
...     
&gt;&gt;&gt; dis.dis(plus)
  2           0 LOAD_GLOBAL              0 (var)
              3 LOAD_CONST               1 (0)
              6 DUP_TOPX                 2
              9 BINARY_SUBSCR       
             10 LOAD_CONST               2 (1)
             13 INPLACE_ADD         
             14 ROT_THREE           
             15 STORE_SUBSCR        
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE        

&gt;&gt;&gt; def plus_with_twist():
    var[0] += 1  # this will fail due to the next line
    var += 1     # Now `var` is a local variable everywhere in the function body
&gt;&gt;&gt; dis.dis(plus_with_twist)
  2           0 LOAD_FAST                0 (var)
              3 LOAD_CONST               1 (0)
              6 DUP_TOPX                 2
              9 BINARY_SUBSCR       
             10 LOAD_CONST               2 (1)
             13 INPLACE_ADD         
             14 ROT_THREE           
             15 STORE_SUBSCR        

  3          16 LOAD_FAST                0 (var)
             19 LOAD_CONST               2 (1)
             22 INPLACE_ADD         
             23 STORE_FAST               0 (var)
             26 LOAD_CONST               0 (None)
             29 RETURN_VALUE    
</code></pre>
</div>
<span class="comment-copy">Have you read e.g. <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow noreferrer">docs.python.org/3/faq/…</a>? There are lots of questions on SO already explaining Python scope generally and <code>UnboundLocalError</code> specifically.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/27795943/referencing-global-primitives-vs-objects-in-python/27796098" title="referencing global primitives vs objects in python">stackoverflow.com/questions/27795943/…</a></span>
<span class="comment-copy">This has been asked at least a thousand times here and elsewhere. Also and for the record, your question is wrongly worded ("variables that have been initialized in the main function") - you don't have any "main" function here, just a top-level branch.</span>
<span class="comment-copy">OK I apologize to all of those who were annoyed by the question. I guess you need to know the answer in order to know how to ask the question with the right wording. Thanks of the answers.</span>
