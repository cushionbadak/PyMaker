<div class="post-text" itemprop="text">
<p>What's the most idiomatic way of writing a <code>filter</code> with a negation?</p>
<p>Example:</p>
<pre><code>is_even= lambda x : x % 2 == 0
odd_numbers= filter( lambda x: not is_even(x), range(10) )
</code></pre>
<p>Of course, you can just use list comprehensions - but then you needn't use <code>filter</code> anyway</p>
<p>In case anyone wonders, I've stumbled upon this while trying to <a href="https://stackoverflow.com/questions/949098/python-split-a-list-based-on-a-condition">split a list based on a condition</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>itertools</code> module includes both <a href="https://docs.python.org/2/library/itertools.html#itertools.ifilter" rel="nofollow noreferrer">ifilter()</a> and <a href="https://docs.python.org/2/library/itertools.html#itertools.ifilterfalse" rel="nofollow noreferrer">ifilterfalse()</a>, which filter elements where the function returns <code>True</code> and <code>False</code> respectively.</p>
<pre><code>odd_numbers = ifilterfalse(is_even, range(10))
</code></pre>
<p>Note that, in Python 2, there is a difference between <code>filter</code> and <code>ifilter</code>: <code>odd_numbers</code> here would be an iterator, while filter() would give a list (see <a href="https://stackoverflow.com/questions/8994319/itertools-ifilter-vs-filter-vs-list-comprehensions">itertools.ifilter Vs. filter Vs. list comprehensions</a>). If you actually want to build a list, your example with <code>not</code> seems fine, assuming you are set on using <code>filter</code> - list comprehensions may be more 'idiomatic' (<a href="https://stackoverflow.com/questions/3013449/list-filtering-list-comprehension-vs-lambda-filter">List filtering: list comprehension vs. lambda + filter</a>).</p>
<p>In Python 3, <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter()</a> constructs an iterator, not a list, and <a href="https://docs.python.org/3/library/itertools.html#itertools.filterfalse" rel="nofollow noreferrer">itertools.filterfalse()</a> is the complement.</p>
</div>
<div class="post-text" itemprop="text">
<p>Splitting based on a predicate is called a <code>partition</code>. I would find it more idiomatic to implement <code>partition</code> as a separate function rather than repeat its internals specifically for odd and even numbers.  Python 3's <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">Itertools Recipes</a> has the following implementation:</p>
<pre><code>def partition(pred, iterable):
    'Use a predicate to partition entries into false entries and true entries'
    # partition(is_odd, range(10)) --&gt; 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)
</code></pre>
<p>It uses <code>filterfalse</code> (as described by @Lack) and <code>tee</code> defined in that module.  So your highest-level code would look like:</p>
<pre><code>odds, evens = partition(is_even, range(10))
</code></pre>
</div>
<span class="comment-copy">In case anyone wonders, I'm trying to <a href="https://stackoverflow.com/questions/949098/python-split-a-list-based-on-a-condition">split a list based on a condition</a></span>
<span class="comment-copy">Is that missin <code>)</code> a typo?</span>
<span class="comment-copy">@BhargavRao yes</span>
<span class="comment-copy">Damn, you edited it 1s after I posted. That's too fast :P ..</span>
<span class="comment-copy">Can you tell us what you're actually trying to do? A broader description please. What's wrong with what you posted?</span>
<span class="comment-copy">Does anyone have any insight into why the authors chose <code>ifilterfalse</code> instead of <code>ireject</code>?</span>
<span class="comment-copy">Yes, this is a better solution to the actual problem if you are using both parts of the list.</span>
<span class="comment-copy">This is probably worth posting in the question I linked to, as nobody mentioned it yet. My question in particular was more motivated by curiosity than the practical need to solve the actual partitioning (for which there's a lot of answers already)</span>
