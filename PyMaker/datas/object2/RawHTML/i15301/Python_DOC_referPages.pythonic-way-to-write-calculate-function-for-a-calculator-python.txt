<div class="post-text" itemprop="text">
<p>I am creating a text calculator that does not work completely conventionally. It works like this:</p>
<ul>
<li><strong>Operation Input:</strong> The user inputs the operation the calculator will process (<code>+</code> for addition, <code>-</code> for subtraction, <code>*</code> for multiplication, or <code>/</code> for division)</li>
<li><strong>Operand Input:</strong> The user inputs in each operand of the calculation, pressing Return between operands. Once the user has inputted all of his desired operands, striking Return three times initiates calculation.</li>
</ul>
<p><strong>Calculation:</strong></p>
<p>When a user enters in <em>more than two operands</em>, instead of doing:</p>
<p><code>operand1 plus/minus/times/divided by operand2</code>,</p>
<p>It does:</p>
<p><code>operand1 plus/minus/times/divided by operand2 plus/minus/times/divided by operand3</code>,</p>
<p>And so on for all of the inputted operands.</p>
<p>The code for this simply loops through the list of inputted operands, <code>operandList</code>, and uses the chosen operation, <code>operation</code> (and <code>result</code> is the result of the calculation):</p>
<pre><code>def Calculate():
    global operation, operandList, result
    operateCount = 0
    result = 0
    while operateCount &lt; len(operandList):
        if operation == '+':
            result += operandList[operateCount]
        elif operation == '-':
            result -= operandList[operateCount]
        elif operation == '*':
            result *= operandList[operateCount]
        elif operation == '/':
            result /= operandList[operateCount]        
        operateCount += 1

    if operation == '+':
        resultName = 'Sum'    
    elif operation == '-':
        resultName = 'Difference'
    elif operation == '*':
        resultName = 'Product'
    elif operation == '/':
        resultName = 'Quotient'

    if result.is_integer():
        print(int(result), '=', resultName)
    else:
        print(result, '=', resultName)
    print()
</code></pre>
<p>This is super inefficient because it checks for the operation twice, and once inside the while loop, which is even worse.</p>
<p>Obviously if I write one of those while loop blocks for each operation and begin each one with an if statement to check for the operation that is much worse.</p>
<p>If I did that you would see that the only difference between each block of code is the operation sign in <code>result +,-,*,/= operandList[operateCount]</code>.</p>
<p>How can I:</p>
<ul>
<li>Cut out the redundant code that checks for the operation and executes the respective loop, and </li>
<li>Reduce/ change the redundant code that checks for the operation when it displays the <code>result</code>?</li>
</ul>
<p>Any help is greatly appreciated. Please ask for specifications if necessary. And if you down vote, please comment your reason for doing so so I can make changes.</p>
</div>
<div class="post-text" itemprop="text">
<p>The key idea is, build a <code>dict</code>:</p>
<pre><code>import operator

ops = {
    '+': (operator.add, 'Sum', 0),
    '-': (operator.sub, 'Difference', 0),
    '*': (operator.mul, 'Product', 1),
    '/': (operator.truediv, 'Quotient', 1),
}
</code></pre>
<p>I'm associating to each operator symbols <strong>three</strong> items: the function to use, the name to use, <strong>and</strong> (which you seem to have ignored!) the "neutral" starting point.  Starting always at <code>0</code> as you do makes products and quotient risible -- multiply and divide by whatever, it doesn't matter, if it starts at <code>0</code>, it <strong>stays</strong> at <code>0</code> forever, you know!-)</p>
<p>Now things get simpler...:</p>
<pre><code>def Calculate():
    global result
    op, resultName, result = ops[operation]
    for item in operandList:
        result = op(result, item)
    if result == int(result):
        print(int(result), '=', resultName)
    else:
        print(result, '=', resultName)
    print()
</code></pre>
<p>I have <strong>no</strong> idea why you're so inordinately fond of <code>global</code> and messing with indexing without necessity.  <code>is_number</code> apparently is a method only of <code>float</code>s and you're initializing <code>result</code> to an <code>int</code>, so it could crash the code -- I've replaced it with a sensible check.</p>
<p>No need for <code>global</code> for names you're only using and <strong>not</strong> assigning -- and of course it would make sense to lose the <code>global result</code> and instead <code>return result</code> at the end; but I've left it in just in case there might be any sane reason to have it global (I can't think of any).</p>
<p>But the core idea is: in Python, for dispatching purposes, <strong>think <code>dict</code></strong> first and foremost!</p>
<p>Added: OP asks peculiar questions in comments, such as "What exactly is the function of the import statement?" -- answer, obviously, is "to make another module available" (in this case, module <code>operator</code> from Python's standard library, to get its functions performing addition, multiplication, and so forth).  Also "what is the 'neutral starting point'" -- answer, obviously, is "the initial value of <code>result</code> before you start adding, multiplying and so on.</p>
<p>In the OP's original code in the Q, <code>result</code> was unconditionally initialized to zero.  If you start with zero and multiply it by whatever number(s), it <strong>stays</strong> zero -- it's not a "neutral" starting point for a series of multiplication, it's more of a "fixed" point, a "black hole" in a sense.  So, I used different initial values depending on the operation.</p>
</div>
<span class="comment-copy">What exactly is the function of the import statement? What is the function/ purpose of the <code>operator</code> part in <code>operator.xxx,</code>? This is a class? For what?</span>
<span class="comment-copy">And what is the 'neutral starting point'?</span>
<span class="comment-copy">"[D]efinitely not from Python"?  How long have you been away? ;-)  (<a href="https://docs.python.org/3/library/stdtypes.html#float.is_integer" rel="nofollow noreferrer">is_integer docs</a>)</span>
<span class="comment-copy">I'm still confused. Could you answer my questions please?</span>
<span class="comment-copy">@Jacob, you asked two questions starting "How can I" and I answered them: <b>use a <code>dict</code></b>, and <b>use a <code>dict</code></b>.  <b>That</b> is how you "Cut out the redundant code that checks for the operation and executes the respective loop", <b>and</b> that is <b>also</b> how you "Reduce/ change the redundant code that checks for the operation when it displays the result", which are the two questions you asked.  Since I <b>did</b> answer your questions, I find this comment asking me to do so simply absurd.</span>
