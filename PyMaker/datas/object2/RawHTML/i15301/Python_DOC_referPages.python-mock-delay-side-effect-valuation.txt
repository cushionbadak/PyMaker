<div class="post-text" itemprop="text">
<p>Is there any way to delay the evaluation of a Mock side_effect.</p>
<pre><code>def mockfunc(wheel):
    wheel.rubber = soft

wheel.make = Mock(side_effect=mockfunc(wheel)))
</code></pre>
<p>The problem here is that I'm trying to replace the 'wheel.make' method such that when it is called under test, mockfunc is instead called and one of the wheel attributes is set instead of running the usual method.</p>
<p>Thing is - when I set the side_effect, the mockfunc call happens immediately, The rubber attribute is set to soft. I don't want this to happen until the method wheel.make is called.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow"><code>side_effect</code> documentation</a> it should be a callable, an iterable or an exception (class or object). Moreover I guess you want to replace a unboundmethod <code>make</code> in <code>wheel</code>'s Class: to do these kind of patching you should use <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow"><code>patch</code> or <code>patch.object</code></a> as context or decorator as described <a href="https://docs.python.org/3/library/unittest.mock-examples.html#mocking-unbound-methods" rel="nofollow">here</a>.</p>
<p>Follow is a complete example of how to do it:</p>
<pre><code>from mock import patch

class Wheel():
    def __init__(self):
        self.rubber = 0

    def make(self):
        self.rubber = 10

soft = 36
def mockfunc(wheel):
    wheel.rubber = soft

wheel = Wheel()
print("unpatched wheel before make rubber = {}".format(wheel.rubber))
wheel.make()
print("unpatched wheel after make rubber = {}".format(wheel.rubber))

with patch.object(Wheel, "make", side_effect=mockfunc, autospec=True):
    print("patched wheel before make rubber = {}".format(wheel.rubber))
    wheel.make()
    print("patched wheel after make rubber = {}".format(wheel.rubber))
</code></pre>
<p>And the output is</p>
<pre><code>unpatched wheel before make rubber = 0
unpatched wheel after make rubber = 10
patched wheel before make rubber = 10
patched wheel after make rubber = 36
</code></pre>
</div>
<span class="comment-copy">Are you still interested on this question?</span>
<span class="comment-copy">hey Michele. I'm going to give your solution a go later today hopefully. Then i'll comment back. Thanks a million for your time.</span>
