<div class="post-text" itemprop="text">
<p>My task is to create a quiz for primary school children. The quiz bit works fine. But I must time how long the child takes and store their 'username' 'correctAnswers' and 'timeTaken' into a .txt file for the specific class the child is in. To do that I ask the child their class number and store their information into the file that was specifically made for that class.
The problems I in counter are: </p>
<p>The time isnt being rounded even though I have timeTaken = round(etime)in my code  </p>
<p>raw_input not being defined (I have no idea how else to define it)</p>
<p>The message "Sorry, we can not save your data as the class you entered is not valid." comes up even when a valid class number has been entered.</p>
<p>Ive searched everywhere but with no luck. Any help at all would be greatly appreciated.</p>
<pre><code>import time
import random
import math

def test():
    num1=random.randint(1, 10)
    num2=random.randint(1, num1)

    ops = ['+','-','*']
    operation = random.choice(ops)

    num3=int(eval(str(num1) + operation + str(num2)))

    print ("What is {} {} {}?".format(num1, operation, num2))
    userAnswer= int(input("Your answer:"))
    if userAnswer != num3:
        print ("Incorrect. The right answer is {}".format(num3))
        return False
    else:
        print("correct")
        return True

username=input("What is your name?")
print ("Welcome {} to the Arithmetic quiz".format(username))
usersClass = input("Which class are you in? (1,2 or 3)")
raw_input("Press Enter to Start...")
start = time.time()
correctAnswers=0
for question_number in range(10):
    if test():
        correctAnswers +=1

print("{}: You got {} answers correct".format(username, correctAnswers))
end = time.time()
etime = end - start
timeTaken = round(etime)
print ("You completed the quiz in {} seconds".format(timeTaken))
if usersClass == 1:
    with open("class1.txt","a+") as f:
        f.write("{}:Scored {} in {} seconds".format(username,correctAnswers,timeTaken))

elif usersClass == 2:
    with open("class2.txt","a+") as f:
        f.write("{}:Scored {} in {} seconds".format(username,correctAnswers,timeTaken))

elif usersClass == 3:
    with open("class3.txt","a+") as f:
        f.write("{}:Scored {} in {} seconds".format(username,correctAnswers,timeTaken))
else:
    print("Sorry, we can not save your data as the class you entered is not valid.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The return value of <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow"><code>input</code></a> is a <code>str</code> object:</p>
<pre><code>&gt;&gt;&gt; usersClass = input("Which class are you in? (1,2 or 3)")
Which class are you in? (1,2 or 3)3
&gt;&gt;&gt; type(usersClass)
&lt;class 'str'&gt;
</code></pre>
<p>As a result, your subsequent checks against <code>int</code> objects will evaluate to <code>False</code> (ie, <code>'3' != 3</code>) resulting in what you are seeing.</p>
<p>The conditions of comparing which <code>usersClass</code> the user has selected would need to compare the same type to ensure equality. This means you could convert your return value of <code>input</code> to an <code>int</code> and continue to compare <code>usersClass</code> to an <code>int</code> which would satisfy your comparison as your code is written now,</p>
<pre><code>usersClass = int(input("Which class are you in? (1,2 or 3)"))
</code></pre>
<p>or change the conditionals to compare <code>usersClass</code> to the <code>str</code> representation of <code>1</code>, <code>2</code> and <code>3</code>.</p>
<pre><code>if usersClass == '1':
with open("class1.txt","a+") as f:
    f.write("{}:Scored {} in {} seconds".format(username,correctAnswers,timeTaken))
...
</code></pre>
<p>As to the problem you are experiencing with <code>raw_input</code> using Python 3, it has been renamed to <code>input</code>: (taken from <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow">What's New in Python 3.0</a>)</p>
<blockquote>
<p>PEP 3111: raw_input() was renamed to input(). That is, the new input()
  function reads a line from sys.stdin and returns it with the trailing
  newline stripped. It raises EOFError if the input is terminated
  prematurely. To get the old behavior of input(), use eval(input()).</p>
</blockquote>
</div>
<span class="comment-copy">When you assign <code>usersClass</code> from the <code>input</code> function, you are returning back a <code>str</code> object, so your checks for <code>str === int</code> evalutes to <code>False</code>.</span>
<span class="comment-copy">which version of python?</span>
<span class="comment-copy">Python 3.3.5 ---</span>
<span class="comment-copy">Thanks! any advice on the raw_input problem though?</span>
<span class="comment-copy">@Sajjjjid Updating my answer to include the documentation illustrating that <code>raw_input</code> has been deprecated in Python 3.</span>
