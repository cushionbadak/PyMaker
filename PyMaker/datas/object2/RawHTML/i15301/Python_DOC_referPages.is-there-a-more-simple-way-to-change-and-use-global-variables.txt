<div class="post-text" itemprop="text">
<p>If you declare a global variable before a function and try to change that variables in a function it throws back an error:</p>
<pre><code>james = 100

def runthis():
    james += 5
</code></pre>
<p>This wont work.</p>
<p>Unless you declare the global variables again in the function, like this:</p>
<pre><code>james = 100

def runthis():
    global james
    james += 5
</code></pre>
<p>Is there a more simple way to change the variable inside the function? It's sort of messy and annoying re-declaring variables again and again.</p>
</div>
<div class="post-text" itemprop="text">
<p>Modifying global variables is ugly in Python.  If you need to maintain state, use a <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow">class</a>:</p>
<pre><code>class MyClass(object):
    def __init__(self):
        self.james = 100
    def runThis(self):
        self.james += 5
</code></pre>
<p>Or, if you need <code>james</code> to be shared among all your instances, make it a class attribute:</p>
<pre><code>class MyClass(object):
    james = 100
    def runThis(self):
        MyClass.james += 5
</code></pre>
<p>It may not be simpler, but it is definitely more pythonic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Wouldn't it be simpler to avoid using the global variable in the function?</p>
<pre><code>james = 100

def runthis(value):
    return value + 5

james = runthis(james)
</code></pre>
<p>If you've got a lot of them it might make more sense to put them in a single mutable container, such as a dictionary:</p>
<pre><code>def runthis(scores):
    scores['james'] += 5

players = {'james': 100, 'sue': 42}

runthis(players)
print players  # -&gt; {'james': 105, 'sue': 42}
</code></pre>
<p>If you don't like the <code>scores['james']</code> notation, you could create a specialized <code>dict</code> class:</p>
<pre><code># from http://stackoverflow.com/a/15109345/355230
class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

def runthis(scores):
    scores.james += 5  # note use of dot + attribute name

players = AttrDict({'james': 100, 'sue': 42})

runthis(players)
print players  # -&gt; {'james': 105, 'sue': 42}
</code></pre>
</div>
<span class="comment-copy"><code>global x</code> seems like a pretty simple way of declaring a variable as global.  How would you imagine a simpler way would look like?  That said, global variables should be a rare thing to need.  I hardly ever use the <code>global</code> keyboard.</span>
<span class="comment-copy">You can reference <code>james</code> as <code>globals()['james']</code></span>
<span class="comment-copy">Sven Mrnach, well in the instance i'm needing this help for, I find myself having to change global variables in multiple function constantly its sort of a pain.</span>
<span class="comment-copy">@user3579419 Well, what I'm saying is -- don't do that.  Global state is evil, and using lots of global state results in unmaintainable and untestable code.  It's a bit hard to explain this in a few comments here, but it's something every experienced programmer can confirm.</span>
<span class="comment-copy">If it serves as a deterrent to using globals, so much the better.</span>
<span class="comment-copy">Genius, never really crossed my mind but its a great solution. So thanks :D</span>
<span class="comment-copy">Glad you are happy with the class solution.  For others, actually, its better not to use globals.  See @martineau below.</span>
<span class="comment-copy">Yes but in an instance where i'm working with a lot of code, that can become messy to putting so many parameters into one function.</span>
