<div class="post-text" itemprop="text">
<p>I know how to use generators but I don't know anything about their internals. I tried this:</p>
<pre><code>In [4]: def f(): yield 1
In [6]: type(f())
Out[6]: generator
</code></pre>
<p>Now I disassemble it:</p>
<pre><code>In [7]: dis.dis(f)
  1           0 LOAD_CONST               1 (1)
              3 YIELD_VALUE         
              4 POP_TOP             
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE        
</code></pre>
<p>Why does the opcodes suggest <code>return None</code> while <code>f</code> actually returns a generator?</p>
</div>
<div class="post-text" itemprop="text">
<p>All functions return <code>None</code> at their end if there is no explicit return, generators are no exception. As of Python 3.3, generators can <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow">return a final value</a> when ending, but in Python 2.7 a blank return is mandatory if you use <code>return</code> to end the function early.</p>
<p>This is a 'limitation' of how Python frames are implemented; you have to have a <code>RETURN_VALUE</code> opcode to exit the frame cleanly and unwind the stack, and that opcode requires an operand, always.</p>
<p>Calling the function still produces a generator, but the <em>byte code</em> isn't executed until you actually call the <code>.next()</code> method on the generator.</p>
</div>
