<div class="post-text" itemprop="text">
<h2>Question</h2>
<p>I am observing behavior in Python 3.3.4 that I would like help understanding: Why are my exceptions properly raised when a function is executed normally, but not when the function is executed in a pool of workers?</p>
<h2>Code</h2>
<pre><code>import multiprocessing

class AllModuleExceptions(Exception):
    """Base class for library exceptions"""
    pass

class ModuleException_1(AllModuleExceptions):
    def __init__(self, message1):
        super(ModuleException_1, self).__init__()
        self.e_string = "Message: {}".format(message1)
        return

class ModuleException_2(AllModuleExceptions):
    def __init__(self, message2):
        super(ModuleException_2, self).__init__()
        self.e_string = "Message: {}".format(message2)
        return

def func_that_raises_exception(arg1, arg2):
    result = arg1 + arg2
    raise ModuleException_1("Something bad happened")

def func(arg1, arg2):

    try:
        result = func_that_raises_exception(arg1, arg2)

    except ModuleException_1:
        raise ModuleException_2("We need to halt main") from None

    return result

pool = multiprocessing.Pool(2)
results = pool.starmap(func, [(1,2), (3,4)])

pool.close()
pool.join()

print(results)
</code></pre>
<p>This code produces this error:</p>
<blockquote>
<p>Exception in thread Thread-3:<br/>
  Traceback (most recent call last):<br/>
     File "/user/peteoss/encap/Python-3.4.2/lib/python3.4/threading.py", line 921, in _bootstrap_inner<br/>
      self.run()  <br/>
  File "/user/peteoss/encap/Python-3.4.2/lib/python3.4/threading.py", line 869, in run<br/>
      self._target(*self._args, **self._kwargs)<br/>
    File "/user/peteoss/encap/Python-3.4.2/lib/python3.4/multiprocessing/pool.py", line 420, in _handle_results<br/>
      task = get()<br/>
    File "/user/peteoss/encap/Python-3.4.2/lib/python3.4/multiprocessing/connection.py", line 251, in recv<br/>
      return ForkingPickler.loads(buf.getbuffer())
  TypeError: __init__() missing 1 required positional argument: 'message2'  </p>
</blockquote>
<p>Conversely, if I simply call the function, it seems to handle the exception properly:</p>
<pre><code>print(func(1, 2))
</code></pre>
<p>Produces:</p>
<blockquote>
<p>Traceback (most recent call last):<br/>
    File "exceptions.py", line 40, in <br/>
      print(func(1, 2))<br/>
    File "exceptions.py", line 30, in func<br/>
      raise ModuleException_2("We need to halt main") from None<br/>
  __main__.ModuleException_2</p>
</blockquote>
<p>Why does <code>ModuleException_2</code> behave differently when it is run in a process pool?</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that your exception classes have non-optional arguments in their <code>__init__</code> methods, but that when you call the superclass <code>__init__</code> method you don't pass those arguments along. This causes a new exception when your exception instances are unpickled by the <code>multiprocessing</code> code.</p>
<p>This has been a long-standing issue with Python exceptions, and you can read quite a bit of the history of the issue in <a href="http://bugs.python.org/issue1692335">this bug report</a> (in which a part of the underlying issue with pickling exceptions was fixed, but not the part you're hitting).</p>
<p>To summarize the issue: Python's base <code>Exception</code> class puts all the arguments it's <code>__init__</code> method receives into an attribute named <code>args</code>. Those arguments are put into the <code>pickle</code> data and when the stream is unpickled, they're passed to the <code>__init__</code> method of the newly created object. If the number of arguments received by <code>Exception.__init__</code> is not the same as a child class expects, you'll get at error at unpickling time.</p>
<p>A workaround for the issue is to pass all the arguments you custom exception classes require in their <code>__init__</code> methods to the superclass <code>__init__</code>:</p>
<pre><code>class ModuleException_2(AllModuleExceptions):
    def __init__(self, message2):
        super(ModuleException_2, self).__init__(message2) # the change is here!
        self.e_string = "Message: {}".format(message2)
</code></pre>
<p>Another possible fix would be to not call the superclass <code>__init__</code> method at all (this is what the fix in the bug linked above allows), but since that's usually poor behavior for a subclass, I can't really recommend it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>ModuleException_2.__init__</code> fails while beeing unpickled.</p>
<p>I was able to fix the problem by changing the signature to</p>
<pre><code>class ModuleException_2(AllModuleExceptions):
    def __init__(self, message2=None):
        super(ModuleException_2, self).__init__()
        self.e_string = "Message: {}".format(message2)
        return
</code></pre>
<p>but better have a look at <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances" rel="nofollow">Pickling Class Instances</a> to ensure a clean implementation.</p>
</div>
<span class="comment-copy">What if the custom exception is defined inside a third-party library? Is there a workaround that doesn't require changing the definition of the custom exception? I'm having the issue with <code>botocore.exceptions.ClientError</code></span>
<span class="comment-copy">I'm not aware of a good solution that could work without changing the exception type. You might be able to monkey-patch the library, or perhaps your worker code could catch the library's exception and raise a better behaved exception in its place? Otherwise, I'd suggest filing a bug report on the library.</span>
