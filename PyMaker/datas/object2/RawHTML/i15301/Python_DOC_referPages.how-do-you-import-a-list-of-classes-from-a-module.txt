<div class="post-text" itemprop="text">
<p>Is there a way to import only a specific, predefined list of classes from a Python module? For example, say that I had modules <code>a.py</code> and <code>b.py</code> in the same directory with the following code:</p>
<pre><code>#a.py
class Foo(object):
    '''definition of class Foo goes here'''

class Bar(object):
    '''definition of class Bar goes here'''

aTypes = [Foo, Bar]
</code></pre>
<p>_</p>
<pre><code>#b.py
from a import aTypes

print Foo
</code></pre>
<p>Running <code>b.py</code> causes, of course, the <code>print Foo</code> line to raise a <code>NameError</code>. I didn't really think that this would work (the import statement in <code>b.py</code> gives me an <code>a.Foo</code> type instead of a <code>Foo</code> type), but I can't figure out the right syntax. Is there an alternative to <code>from a import aTypes</code> that gives the desired behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>Supposing you really do need to do this (deal with list of types) and can't use tricks like <code>__all__</code> that only work once (one such special list per module), then:</p>
<pre><code>def gettypes(types):
    thismodule = sys.modules[__name__]
    for t in types:
        setattr(thismodule, t.__name__, t)
</code></pre>
<p>Use it like this:</p>
<pre><code>import a
gettypes(a.aTypes)
</code></pre>
<p>I'm finding it difficult to imagine why you'd need this, but that's not my problem ;-)</p>
<p>Note the use of <code>__name__</code> means this doesn't work for symbols in general, only for classes, modules, functions and anything else I've forgotten (or at a pinch for objects of your own design that have a <code>__name__</code>). It also won't work for things you've aliased in the module, for example by writing <code>Baz = Bar</code> in the module and then using <code>Baz</code> in the list. If the list was <code>['Foo', 'Bar']</code> instead of <code>[Foo, Bar]</code>, and you also passed the source module into <code>gettypes</code>, then you could avoid those restrictions.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could import the names directly:</p>
<pre><code>from a import Foo, Bar
</code></pre>
<p>Alternately, you could define <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="nofollow"><code>__all__</code></a> in <code>a.py</code>:</p>
<pre><code>__all__ = ['Foo', 'Bar']
</code></pre>
<p>and then do a wildcard import in <code>b.py</code>:</p>
<pre><code>from a import *
</code></pre>
<p>For just two names though, it would be easier to use the first solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define <code>__all__</code> at the module level of <code>a.py</code>:</p>
<pre><code>__all__ = ['Foo', 'Bar']
</code></pre>
<p>This will allow you to import it in the following way:</p>
<pre><code>from a import *
</code></pre>
<p>Of course, this behaviour isn't always encouraged, and the alternative is preferred:</p>
<pre><code>from a import Foo, Bar
</code></pre>
</div>
<span class="comment-copy">The first argument of <code>gettypes</code> isn't necessary?</span>
<span class="comment-copy">You're quite right.</span>
<span class="comment-copy">Not only easier, but probably the best. This way, anyone can know where the symbol come from just by looking at the top of the file.</span>
