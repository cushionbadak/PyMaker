<div class="post-text" itemprop="text">
<p>I have researched a bit around this; however, when I tried implementing it into my code, I was unsuccessful. This is what I have so far:</p>
<pre><code>f = open('ClassA.txt', 'r')
dictionary = {}
for line in f:
    firstpart, secondpart = line.strip().split(':')
    dictionary[firstpart.strip()] = secondpart.strip()
f.close()
sorted_dict = {k: sorted(v) for k, v in dictionary.items()}
print (sorted_dict)
</code></pre>
<p><code>ClassA.txt</code> would contain for example:</p>
<pre><code>Jakub Scored: 10
Dan Scored: 10
Jake Scored: 9
Harry Scored: 5
</code></pre>
<p>And I want the names to come alphabetically in order. However, when I print the <code>sorted_dict</code> it comes up with:</p>
<pre><code>{'Jakub Scored': ['0', '1'], 
 'Dan Scored': ['0', '1'], 
 'Harry Scored': ['5'], 
 'Jake Scored': ['9']}
</code></pre>
<p>Not only isn't it in order, but also the people who scored <code>10</code> for some reason are printed incorrectly (backwards).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sorted(v)</code> will sort the strings alphabetically, returning a list of the sorted characters. This will place 0 before 1 because that's how they are defined (think 0, 1, 2, 3, 4, 5...).</p>
<p>Dictionaries are inherently unordered, being a collection of key:value mappings. If you wish to print the dictionary in order, as sorted by the keys, then you can do</p>
<pre><code>print(sorted(sorted_dict))
</code></pre>
<p>Note that this won't permanently alter the sorting of the dictionary, if you try <code>print(sorted_dict)</code> after this then the ordering may be unsorted.</p>
<p>If you require a permanently sorted dict then you should look up <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>. </p>
<p>OrderedDicts only remember the order of insertion though, you can't sort them and then keep the sorted order. Your code could look something like this when using an OrderedDict (note that I've removed the bit about sorting the 10, etc as I don't <em>think</em> that's what you wanted, but if you do you can always add it in).</p>
<p><em>Note: you can ignore the part about <code>s</code> and <code>StringIO</code>, that's just me creating a file-like object for testing the code.</em></p>
<pre><code>from collections import OrderedDict
from io import StringIO

s = '''Jakub Scored: 10
Dan Scored: 10
Jake Scored: 9
Harry Scored: 5'''

f = StringIO(s)

dictionary = {}
for line in f:
    firstpart, secondpart = line.strip().split(':')
    dictionary[firstpart.strip()] = secondpart.strip()
f.close()

sorted_dict = OrderedDict(sorted(dictionary.items()))

print(sorted_dict)
# OrderedDict([('Dan Scored', '10'), ('Harry Scored', '5'), ('Jake Scored', '9'), ('Jakub Scored', '10')])
</code></pre>
</div>
<span class="comment-copy"><code>sorted(v)</code> is sorting <i>the string containing their score</i>, .e.g. <code>sorted('10') == ['0', '1']</code>. If you want to order by name, a dictionary is a poor choice - they are unordered.</span>
<span class="comment-copy">The reason why you get your score scrambled is this: <code>sorted(v)</code> in your case is <code>sorted('10')</code> which equals to <code>['0', '1']</code>. The sorted() function expects an iterable, when strings are used as iterables (in this case you used <code>'10'</code>), they iterate over each one of their characters (<code>['0', '1']</code>). You said you wanted to sort the names, but you are "sorting" the scores (in a incorrect way), not the names.</span>
<span class="comment-copy"><code>OrderedDict</code> only remembers the order of insertion. It does not allow sorting the key-value pairs on an arbitrary criteria. You have to sort the items of a regular dict and insert them in the right order in the OD.</span>
<span class="comment-copy">@DownVoter: I'd love to know what was wrong with my answer so I can improve it :)</span>
