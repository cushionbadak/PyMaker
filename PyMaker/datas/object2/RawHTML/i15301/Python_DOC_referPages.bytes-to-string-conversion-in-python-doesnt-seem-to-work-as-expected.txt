<div class="post-text" itemprop="text">
<p>Why in Python 3 would the following code</p>
<pre><code>print(str(b"Hello"))
</code></pre>
<p>output <code>b'Hello'</code> instead of just <code>Hello</code> as it happens with regular text strings? It looks like ultimately explicit, would-be-easy creating a <code>str</code> object from the most related binary string type is so counter-intuitive.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <code>bytes.__str__</code> is <strong>not defined</strong>, so <code>bytes.__repr__</code> is used instead, when you use <code>str()</code> on the object. Note that <code>print()</code> <em>also</em> calls <code>str()</code> on objects passed in, so the call is entirely redundant here.</p>
<p>If you are expecting text, decode explicitly instead:</p>
<pre><code>print(b'Hello'.decode('ascii'))
</code></pre>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow"><code>str()</code> type</a> can handle <code>bytes</code> objects explicitly, but only if (again) you provide an explicit codec to decode the bytes with first:</p>
<pre><code>print(str(b'Hello', 'ascii'))
</code></pre>
<p>The documentation is <em>very explicit</em> about this behaviour:</p>
<blockquote>
<p>If neither <em>encoding</em> nor <em>errors</em> is given, <code>str(object)</code> returns <code>object.__str__()</code>, which is the “informal” or nicely printable string representation of object. For string objects, this is the string itself. If object does not have a <code>__str__()</code> method, then <code>str()</code> falls back to returning <code>repr(object)</code>.</p>
<p>If at least one of <em>encoding</em> or errors is given, <em>object</em> should be a <em>bytes-like object</em> (e.g. <code>bytes</code> or <code>bytearray</code>). In this case, if object is a <code>bytes</code> (or <code>bytearray</code>) object, then <code>str(bytes, encoding, errors)</code> is equivalent to <code>bytes.decode(encoding, errors)</code>.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Passing a <code>bytes</code> object to <code>str()</code> <strong>without the encoding or errors arguments</strong> falls under the first case of returning the informal string representation.</p>
</blockquote>
<p><em>Emphasis mine</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why do you want this to "work"? A bytes object is a bytes object, and its string representation in Python 3 is on that form. You can convert it's contents to a proper text string (in Python3 - which in Python2 would be "unicode" objects) you have to <em>decode</em> it to text.</p>
<p>And for that you need to know the encoding - </p>
<p>Try the following instead:</p>
<pre><code>print(b"Hello".decode("latin-1"))
</code></pre>
<p>Note the assumed "latin-1" text codec which will translate transparently codes not in ASCII range (128-256) to unicode. It is the codec used by default by Windows for western-European languages.  </p>
<p>The "utf-8" codec can represent a much larger range  of characters, and is the preferred encoding for international text - but if your byte string is not properly composed of utf-8 characters you might have an UnicodeDecode error on the process. </p>
<p>Please read <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="nofollow">http://www.joelonsoftware.com/articles/Unicode.html</a> to proper undestand what text is about. </p>
</div>
<div class="post-text" itemprop="text">
<p>Beforehand, sorry for my English...</p>
<p>Hey, I had this problem some weeks ago. It works as the people above said.
Here is a tip if the exceptions of the decoding process do not matter. In this case you can use:</p>
<pre><code>bytesText.decode(textEncoding, 'ignore')
</code></pre>
<p>Ex:</p>
<pre><code>&gt;&gt;&gt; b'text \xab text'.decode('utf-8', 'ignore')  # Using UTF-8 is nice as you might know!
'text  text'                                     # As you can see, the « (\xab) symbol was
                                                 # ignored :D
</code></pre>
</div>
<span class="comment-copy">It prints <code>Hello</code> in py2 but <code>b'Hello'</code> in py3.</span>
<span class="comment-copy">@BhargavRao: that's because in Python 2, <code>b'Hello'</code> is <i>already a string</i>. <code>b''</code> is just an alias for <code>''</code>, for forward compatibility.</span>
<span class="comment-copy">@MartijnPieters Thanks, got it.</span>
<span class="comment-copy">So I do get a Unicode text string from <code>str(b"Hello")</code> but its contents are simply confusing?</span>
<span class="comment-copy">@DesmondHume: you get a <b>representation</b>. A debugging tool. You get the same information for any other object that implements a helpful <code>__repr__</code> representation. For <code>bytes</code> that is a string that lets you recreate the exact same value in another Python script or in the interactive interpreter.</span>
<span class="comment-copy">One thing to know about it is that if you run Python with <code>-b</code> option such cases cause warnings or errors if using <code>-bb</code> option.</span>
