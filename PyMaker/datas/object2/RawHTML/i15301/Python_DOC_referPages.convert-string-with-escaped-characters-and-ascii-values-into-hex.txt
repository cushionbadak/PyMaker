<div class="post-text" itemprop="text">
<p>I have the following string which contains escaped HEX values and ASCII characters</p>
<pre><code>"\01B\2E\00   k\00"
</code></pre>
<p>A backslash means that the next two characters are HEX values, everything else in the  string is ASCII</p>
<p>The goal is to convert the entire string into all HEX values</p>
<p>end result:</p>
<pre><code>"\01\42\2E\00\20\20\20\6B\00"
</code></pre>
<p><em>::edit::</em></p>
<p>I had tried the following:</p>
<pre><code>s = "\01B\2E\00   k\00"
r = [ ]

for x in s:
    r.append(x.encode("hex"))

print r
</code></pre>
<p>the problem was the values (ex:  \1E ) were being interpreted as \x01 and E</p>
<p>Then i ran into the following question <a href="https://mail.python.org/pipermail/tutor/2008-April/061025.html" rel="nofollow">online</a> came to post an update, and realized my question was already answered.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a Python string that contains escaped hex values and ascii characters.</p>
<pre><code>&gt;&gt;&gt; s = r"\01B\2E\00   k\00"
&gt;&gt;&gt; s
'\\01B\\2E\\00   k\\00'
&gt;&gt;&gt; print(s)
\01B\2E\00   k\00
</code></pre>
<p>First we decode with the <code>string-escape</code> codec to convert the escaped hex values into the character representation. In order to use <code>string-escape</code> with hexadecimal values, we need to use <code>\x</code> for the escape indicator rather than just <code>\</code> (which implies octal values iirc)</p>
<pre><code>&gt;&gt;&gt; escaped = s.replace('\\', '\\x').decode('string-escape')
&gt;&gt;&gt; escaped
'\x01B.\x00   k\x00'
&gt;&gt;&gt; print escaped
B.   k
</code></pre>
<p>Some of our characters are not printable. But the result is that all our characters are hex values/characters.</p>
<p>If you want to convert all the characters in the <strong>escaped hex representation</strong>, however, you will need to convert explicitly into hex values:</p>
<pre><code>&gt;&gt;&gt; h = ''.join('\\' + char.encode('hex') for char in escaped)
&gt;&gt;&gt; h
'\\01\\42\\2e\\00\\20\\20\\20\\6b\\00'
&gt;&gt;&gt; print h
\01\42\2e\00\20\20\20\6b\00
</code></pre>
<p>Note that bytes-to-bytes encoding is deprecated in Python3. You would instead use the <a href="https://docs.python.org/3/library/binascii.html" rel="nofollow"><code>binascii</code></a> <code>.hexlify</code> and <code>.unhexlify</code> methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>re.split()</code> to tokenize the string in Python:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; data = r"\01B\2E\00   k\00"
&gt;&gt;&gt; L = re.split(r'((?:\\{hex}{hex})+)'.format(hex='[0-9a-fA-F]'), data)
&gt;&gt;&gt; L
['', '\\01', 'B', '\\2E\\00', '   k', '\\00', '']
&gt;&gt;&gt; L[::2] = [''.join('\\' + c.encode('hex') for c in s) for s in L[::2]]
&gt;&gt;&gt; print ''.join(L)
\01\42\2E\00\20\20\20\6b\00
</code></pre>
</div>
<span class="comment-copy">What did you tried?</span>
<span class="comment-copy">Which language's string is that exactly?</span>
<span class="comment-copy">Thanks for the answers below, I just found out i could use raw characters in python, I was using python and javascript</span>
<span class="comment-copy">Is this solution character-encoding agnostic, i.e. are <code>.decode('string-escape)'</code> and <code>.encode('hex')</code> symmetric to each other under all circumstances?</span>
<span class="comment-copy">@Tomalak I believe so. <code>string-escape</code> converts to byte representation independent of character encoding, and <code>.encode</code> re-escapes the bytes, again independent of character encoding.</span>
<span class="comment-copy">However, the <code>hex</code> encoding is deprecated in Python3. Added a note.</span>
