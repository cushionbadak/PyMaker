<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/library/audioop.html" rel="noreferrer">Python audioop documentation</a> states that most of the available functions require "sound fragments."</p>
<blockquote>
<p>The audioop module contains some useful operations on sound fragments. It operates on sound fragments consisting of signed integer samples 8, 16 or 32 bits wide, stored in Python strings.</p>
</blockquote>
<p>What exactly is a sound fragment and how can I turn an existing .wav file into one?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do so by using the <a href="https://docs.python.org/2/library/wave.html" rel="noreferrer">wave module</a></p>
<p>The <code>open()</code> method opens the file and <code>readframes(n)</code> returns (maximum) n frames of audio as a string of bytes, just what audioop wants.</p>
<p>For example, let's say you need to use the <code>avg()</code> method from audioop. This is how you could do it:</p>
<pre class="lang-python prettyprint-override"><code>import wave
import audioop


wav = wave.open("piano2.wav")
print(audioop.avg(wav.readframes(wav.getnframes()), wav.getsampwidth()))
</code></pre>
<p>Outputs:</p>
<pre><code>-2
</code></pre>
<p>Also, you may be interested in the <code>rewind()</code> method from the wave module. It puts the reading position back to the beginning of the wav file.</p>
<p>If you need to read through your wav file twice you can write this:</p>
<pre class="lang-python prettyprint-override"><code>wav = wave.open("piano2.wav")
print(audioop.avg(wav.readframes(wav.getnframes()), wav.getsampwidth()))

# if you don't call rewind, next readframes() call 
# will return nothing and audioop will fail

wav.rewind() 
print(audioop.max(wav.readframes(wav.getnframes()), wav.getsampwidth()))
</code></pre>
<p>Or alternatively you can cache the string:</p>
<pre class="lang-python prettyprint-override"><code>wav = wave.open("piano2.wav")
string_wav = wav.readframes(wav.getnframes())
print(audioop.avg(string_wav, wav.getsampwidth()))
# wav.rewind()
print(audioop.max(string_wav, wav.getsampwidth()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to look into the <a href="https://docs.python.org/2/library/wave.html" rel="nofollow"><code>wave</code></a> module. You probably want to open a file in read mode and use <code>readframes</code> to get the sample you need for <code>audiooop.</code></p>
</div>
<div class="post-text" itemprop="text">
<p>To answer what exactly a fragment is, it's a <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer">bytes object</a>, which is just a string of bytes. I believe that for 8-bit audio files, there would be one byte for each frame for 8-bit audio, two bytes per frame for 16-bit audio, and four bytes for 32-bit audio.</p>
</div>
<span class="comment-copy">Thanks for this, very thorough!</span>
