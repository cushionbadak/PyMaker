<div class="post-text" itemprop="text">
<p>The standard way of creating a list of random numbers is:</p>
<pre><code>def generateList(n):
    randlist = []
    for i in range(n):
        randlist.append(random.randint(1,9))
    return randlist
</code></pre>
<p>However, I recently stumbled upon <code>random.sample</code>, which is much more compact:</p>
<pre><code>def generateList(n):
    return random.sample(range(1, 10), n)
</code></pre>
<p>But this results in an error if <code>n</code> is greater than 10. So, my question is, does there exist a built-in function that does exactly what I intend it to do without running into error? If not, is there at least a more efficient alternative to the first excerpt (considering that <code>n</code> can be quite large)?</p>
</div>
<div class="post-text" itemprop="text">
<p>The activity of sampling is to select a maximum of <code>N</code> elements from the sample space of size <code>N</code>. That is why you are getting an error.</p>
<p>Having said that, there are many efficient ways to solve your problem.</p>
<ol>
<li><p>We can simply wrap your code in a list comprehension, like this</p>
<pre><code>def generateList(n):
    return [randint(1, 9) for i in range(n)]
</code></pre></li>
<li><p>Use <a href="https://docs.python.org/2/library/random.html#random.randrange" rel="nofollow noreferrer"><code>randrange</code></a> instead of <a href="https://docs.python.org/2/library/random.html#random.randint" rel="nofollow noreferrer"><code>randint</code></a>, like this</p>
<pre><code>def generateList(n):
    return [randrange(1, 10) for i in range(n)]
</code></pre></li>
<li><p>If the number of possible elements is small, you can even use <a href="https://docs.python.org/2/library/random.html#random.choice" rel="nofollow noreferrer"><code>choice</code></a> like this</p>
<pre><code>def generateList(n, sample_space = range(1, 10)):
    return [choice(sample_space) for i in range(n)]
</code></pre></li>
</ol>
<p><strong>Note:</strong> Since <code>n</code> is going to large, if you are using Python 2.7, use <code>xrange</code> instead of <code>range</code>. You can read more about the differences in <a href="https://stackoverflow.com/q/23221025/1903116">this answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is not a function specifically dedicated to this task.  But you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehension</a> if you want to condense the code:</p>
<pre><code>def generateList(n):
    return [randint(1, 9) for _ in range(n)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you're going to just have to sample it n times, each with size 1.  The reason you are running into the error is that sample doesn't want to repeat numbers:  when you ask for 12 unique numbers from a 10 element list, it chokes.  Try:</p>
<pre><code>def generateList(n, theList):
    return [random.sample(theList, 1) for _ in range(n)]
</code></pre>
</div>
<span class="comment-copy">You are misinterpreting <code>random.sample</code>: notice that none of the numbers in the random list ever appears twice. A shorter version of <code>generateList</code> is <code>lambda n: [randint(1,9) for _ in range(n)]</code>.</span>
