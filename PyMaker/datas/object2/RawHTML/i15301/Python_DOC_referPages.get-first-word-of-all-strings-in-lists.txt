<div class="post-text" itemprop="text">
<p>I have a CSV file which I'm reading in like below. I need to get the first word of all the strings. I know how to get first letter but I'm not sure how I can get words. </p>
<pre><code>['diffuse systemic sclerosis', 'back', 'public on july 15 2008']
['diffuse systemic sclerosis', 'forearm', 'public on may 9 2014']
</code></pre>
<p>I want my output to be </p>
<pre><code>diffuse
back
public
forearm
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension , and <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow"><code>split()</code></a> function  :</p>
<pre><code>&gt;&gt;&gt; l=['diffuse systemic sclerosis', 'back', 'public on july 15 2008']
&gt;&gt;&gt; [i.split()[0] for i in l]
['diffuse', 'back', 'public']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use comprehension</p>
<pre><code>&gt;&gt;&gt; l = [['diffuse systemic sclerosis', 'back', 'public on july 15 2008']
,['diffuse systemic sclerosis', 'forearm', 'public on may 9 2014']]

&gt;&gt;&gt; list({i.split()[0] for j in l for i in j})
['back', 'diffuse', 'forearm', 'public']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = [
    ['diffuse systemic sclerosis', 'back', 'public on july 15 2008'],
    ['diffuse systemic sclerosis', 'forearm', 'public on may 9 2014']
    ]
d = lambda o: [a.split().pop(0) for a in o]
r = lambda a,b: d(a) + d(b)
print "\n".join(set(reduce(r, l)))
&gt;&gt;&gt; 
public
forearm
diffuse
back
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a> in a list comprehension, noting that you can specify <code>maxsplit</code> to reduce the number of operations:</p>
<pre><code>L = ['diffuse systemic sclerosis', 'back', 'public on july 15 2008']

res = [i.split(maxsplit=1)[0] for i in L]
# ['diffuse', 'back', 'public']
</code></pre>
<p>You can also perform the same operations functionally:</p>
<pre><code>from operator import itemgetter, methodcaller

splitter = methodcaller('split', maxsplit=1)
res = list(map(itemgetter(0), map(splitter, L)))
</code></pre>
<p>Across multiple lists, if you wish to maintain the order with which you observe unique first words, you can use the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertool</code> <code>unique_everseen</code> recipe</a>, also found in the <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_everseen" rel="nofollow noreferrer"><code>more_itertools</code></a> library:</p>
<pre><code>from itertools import chain
from more_itertool import unique_everseen

L1 = ['diffuse systemic sclerosis', 'back', 'public on july 15 2008']
L2 = ['diffuse systemic sclerosis', 'forearm', 'public on may 9 2014']

res = list(unique_everseen(i.split(maxsplit=1)[0] for i in chain(L1, L2)))

# ['diffuse', 'back', 'public', 'forearm']
</code></pre>
</div>
<span class="comment-copy">Perfect! Thank you.</span>
<span class="comment-copy">Why downvotes? any idea?</span>
<span class="comment-copy">@BhargavRato, No idea, your solution seems to answer the question better than the accepted one.</span>
