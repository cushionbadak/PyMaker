<div class="post-text" itemprop="text">
<pre><code>class Square:
    def __init__(self, value):
        self.size = value
    def __repr__(self):
        return '{0}' .format(self.size)
    def bigger_than(self, t):
        if self.size &gt; t:
            return True
        else:
            return False
s = Square(8)
t = Square(7)
if s.bigger_than(t):
    print('The first square is bigger than the second one.')
else:
    print('The first square is not bigger than the second one.')
</code></pre>
<p>The error message from this is as follows:</p>
<pre><code>Traceback (most recent call last):
  File "sourceFile", line 38, in &lt;module&gt;
    if s.bigger_than(t):
  File "sourceFile", line 14, in bigger_than
    if self.size &gt; t:
TypeError: unorderable types: int() &gt; Square()
</code></pre>
<p>I think the problem is somewhere in <code>bigger_than</code> but I am not too sure. What I am trying to do is add a method that compares the size of the square with the size of another square and output whether the square is bigger or smaller.</p>
<p>if I try and <code>print()</code>, <code>self.size</code> and <code>t</code> it outputs the values from: <code>s = Square(8)</code> and <code>t = Square(7)</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You should implement as follows:</p>
<pre><code>class Square:

    def __init__(self, value):
        self.size = value

    def __repr__(self):
        return 'Square({0.size})'.format(self)

    def __gt__(self, other):
       return self.size &gt; other.size


s = Square(8)
t = Square(7)

if s &gt; t:
    print('The first square is bigger than the second one.')
else:
    print('The first square is not bigger than the second one.')
</code></pre>
<p>Note that naming the method <code>__gt__</code> allows direct use of <code>&gt;</code> (<strong>g</strong>reater <strong>t</strong>han), and we are explicitly comparing the <code>size</code> attributes of the two arguments (<code>s &gt; t</code> is equivalent to <code>s.__gt__(t)</code> or <code>Square.__gt__(s, t)</code>). </p>
<p>I have also altered the <code>__repr__</code> to:</p>
<blockquote>
<p>look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment)</p>
</blockquote>
<p>You should read <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">the documentation</a> for more information on these "magic methods". </p>
</div>
<span class="comment-copy"><code>if self.size &gt; t.size:</code></span>
<span class="comment-copy">Also, you should implement it as <code>__gt__</code> not <code>bigger_than</code>, so you can use more natural syntax (<code>if s &gt; t:</code>). See <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html</a></span>
<span class="comment-copy">there is no error, this code is working fine for me.</span>
<span class="comment-copy">@GaneshKamath presumably you're using Python 2.x, this error occurs only in 3.x. See <a href="https://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.0.html#ordering-comparisons</a></span>
<span class="comment-copy">@GaneshKamath: yes, no exception in python <code>2.X</code> but output is always <code>The first square is bigger than the second one.</code> for any <code>size</code> value for object <code>t</code></span>
<span class="comment-copy">Thank you, for “rich comparison” methods.</span>
<span class="comment-copy">I'd throw in a <code>@functools.total_ordering</code> decorator on the class.</span>
<span class="comment-copy">@Kevin that is mentioned in the docs. It doesn't play nice with <code>NotImplemented</code>, which I also didn't cover, until 3.4 anyway.</span>
