<div class="post-text" itemprop="text">
<p>Suppose I have a class with <code>__slots__</code></p>
<pre><code>class A:
    __slots__ = ['x']

a = A()
a.x = 1   # works fine
a.y = 1   # AttributeError (as expected)
</code></pre>
<p>Now I am going to change <code>__slots__</code> of <code>A</code>. </p>
<pre><code>A.__slots__.append('y')
print(A.__slots__)   # ['x', 'y']
b = A()
b.x = 1   # OK
b.y = 1   # AttributeError (why?)
</code></pre>
<p><code>b</code> was created after <code>__slots__</code> of <code>A</code> had changed, so Python, in principle, could allocate memory for <code>b.y</code>. Why it didn't?</p>
<p>How to properly modify <code>__slots__</code> of a class, so that new instances have the modified attributes?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot dynamically alter the <code>__slots__</code> attribute after creating the class, no. That's because the value is used to create special <a href="https://docs.python.org/3/reference/datamodel.html#descriptors" rel="nofollow"><em>descriptors</em></a> for each slot. From the <a href="https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots" rel="nofollow"><code>__slots__</code> documentation</a>:</p>
<blockquote>
<p><code>__slots__</code> are implemented at the class level by creating descriptors (<em>Implementing Descriptors</em>) for each variable name. As a result, class attributes cannot be used to set default values for instance variables defined by <code>__slots__</code>; otherwise, the class attribute would overwrite the descriptor assignment.</p>
</blockquote>
<p>You can see the descriptors in the class <code>__dict__</code>:</p>
<pre><code>&gt;&gt;&gt; class A:
...     __slots__ = ['x']
... 
&gt;&gt;&gt; A.__dict__
mappingproxy({'__module__': '__main__', '__doc__': None, 'x': &lt;member 'x' of 'A' objects&gt;, '__slots__': ['x']})
&gt;&gt;&gt; A.__dict__['x']
&lt;member 'x' of 'A' objects&gt;
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; A.__dict__['x'].__get__(a, A)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: x
&gt;&gt;&gt; A.__dict__['x'].__set__(a, 'foobar')
&gt;&gt;&gt; A.__dict__['x'].__get__(a, A)
'foobar'
&gt;&gt;&gt; a.x
'foobar'
</code></pre>
<p>You cannot yourself create these additional descriptors. Even if you could, you cannot allocate more memory space for the extra slot references on the instances produced for this class, as that's information stored in the C struct for the class, and not in a manner accessible to Python code.</p>
<p>That's all because <code>__slots__</code> is only an extension of the low-level handling of the elements that make up Python instances to Python code; the <code>__dict__</code> and <code>__weakref__</code> attributes on <em>regular</em> Python instances were always implemented as slots:</p>
<pre><code>&gt;&gt;&gt; class Regular: pass
... 
&gt;&gt;&gt; Regular.__dict__['__dict__']
&lt;attribute '__dict__' of 'Regular' objects&gt;
&gt;&gt;&gt; Regular.__dict__['__weakref__']
&lt;attribute '__weakref__' of 'Regular' objects&gt;
&gt;&gt;&gt; r = Regular()
&gt;&gt;&gt; Regular.__dict__['__dict__'].__get__(r, Regular) is r.__dict__
True
</code></pre>
<p>All the Python developers did here was extend the system to add a few more of such slots using arbitrary names, with those names taken from the <code>__slots__</code> attribute on the class being created, so that you can <em>save memory</em>; dictionaries take more memory than simple references to values in slots do. By specifying <code>__slots__</code> you disable the <code>__dict__</code> and <code>__weakref__</code> slots, unless you explicitly include those in the <code>__slots__</code> sequence.</p>
<p>The only way to extend slots then is to subclass; you can dynamically create a subclass with the <code>type()</code> function or by using a factory function:</p>
<pre><code>def extra_slots_subclass(base, *slots):
    class ExtraSlots(base):
        __slots__ = slots
    ExtraSlots.__name__ = base.__name__
    return ExtraSlots
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It appears to me <a href="https://hg.python.org/cpython/file/8b3c609f3f73/Objects/typeobject.c#l2253" rel="nofollow">a type turns <code>__slots__</code> into a tuple as one of it's first orders of action</a>.  It then <a href="https://hg.python.org/cpython/file/8b3c609f3f73/Objects/typeobject.c#l2374" rel="nofollow">stores the tuple on the extended type object</a>.  Since beneath it all, the python is looking at a <code>tuple</code>, there is no way to mutate it.  Indeed, I'm not even sure you can <em>access</em> it unless you pass a tuple in to the instance in the first place.</p>
<p>The fact that the original object that you set still remains as an attribute on the type is (perhaps) just a convenience for introspection.</p>
<p>You <em>can't</em> modify <code>__slots__</code> and expect to have that show up somewhere (and really -- from a readability perspective, You probably don't <em>really</em> want to do that anyway, right?)...</p>
<p>Of course, you can always subclass to extend the slots:</p>
<pre><code>&gt;&gt;&gt; class C(A):
...   __slots__ = ['z']
... 
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.x = 1
&gt;&gt;&gt; c.z = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot modify the <code>__slots__</code> attribute after class creation. This is because it would leade to strange behaviour.</p>
<p>Imagine the following.</p>
<pre><code>class A:
    __slots__ = ["x"]

a = A()
A.__slots__.append("y")
a.y = None 
</code></pre>
<p>What should happen in this scenario? No space was originally allocated for a second slot, but according to the slots attribute, <code>a</code> should be able have space for <code>y</code>.</p>
<p><code>__slots__</code> is not about protecting what names can and cannot be accessed. Rather <code>__slots__</code> is about reducing the memory footprint of an object. By attempting to modify <code>__slots__</code> you would defeat the optimisations that <code>__slots__</code> is meant to achieve.</p>
<h2>How __slots__ reduces memory footprint</h2>
<p>Normally, an object's attributes are stored in a <code>dict</code>, which requires a fair bit of memory itself. If you are creating millions of objects then the space required by these dicts becomes prohibitive. <code>__slots__</code> informs the python machinery that makes the class object that there will only be so many attributes refered to by instances of this class and what the names of the attributes will be. Therefore, the class can make an optimisation by storing the attributes directly on the instance rather than in a <code>dict</code>. It places the memory for the (pointers to the) attributes directly on the object, rather than creating a new <code>dict</code> for the object.</p>
</div>
<span class="comment-copy">Sure, just come gallivanting in here trampling all over my answer ;-).  +1 for the interesting demo with descriptors though.</span>
<span class="comment-copy">@mgilson: :-P yours is just as valid in this picture, so I already voted you up.</span>
<span class="comment-copy">Thanks for the upvote :-).  I was beginning to wonder if I was out in the weeds and should delete my answer ... Anyway, lately I've been looking for any opportunity to go digging in the C-code because, why not?</span>
<span class="comment-copy">after playing with descriptors for a few years, I've come to think of a descriptor as it's own dict, for example: <code>def __get__(dsc, obj, cls=None): return dsc if cls is None else dsc.Map[obj]</code> where <code>Map</code> would be a dict on the descriptor instance containing the value associated with the obj instance... which leads me to question whether descriptiors really do save memory.</span>
<span class="comment-copy">@Tcll You're confusing slots and descriptors. Slots are a specialised form of descriptor. A object with slots is kind of like a mutable named tuple, where attribute names are just convenience methods for getting the element at a given index. A slot descriptor is implemented the C level and is essentially just <code>*(self + attr_index)</code>.</span>
<span class="comment-copy">admittedly, I'm not exactly sure how the <code>member_descriptor</code> class (a slots attribute) works... so you're saying it's basically a pointer to the value using the supplied instance for attribute indexing??</span>
