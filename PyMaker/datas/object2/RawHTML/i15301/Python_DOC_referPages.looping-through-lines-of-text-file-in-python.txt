<div class="post-text" itemprop="text">
<p>I have two text files, I want to read it line by line and check if a match occurs and if it occurs then print or else do nothing. But in the following code it checks only for the first line of the first file and checks for the all lines of second for loop file. But I want to check for all lines of the first file as well as second file. I am not sure what mistake I am doing.</p>
<pre><code>with open("changed_commands_from_default_value", "a") \
            as changed_commands_from_default_value, \
     open(command_file, "r") \
            as command_executed_file, \
     open("default_command_values", "r") \
            as default_command_values:
    for default_command in default_command_values:
       for command_executed in command_executed_file:
           only_command = command_executed.split()[0]
           only_default_command = default_command.split()[0]
           if only_command == only_default_command:
               if command_executed != default_command:
                   print("   &gt; The default value " +
                         default_command.rstrip() + " is changed to " +
                         command_executed.rstrip())
                   changed_commands_from_default_value.write(
                       "The default value " + '"' + default_command + '"' +
                       "is changed to " + '"' + command_executed + '"')
</code></pre>
<p>My data is like</p>
<pre><code>File 1:

Data1 1
Data2 2
Data3 3
Data4 6
Data5 10

File 2:

Data1 4
Data2 4
Data3 6
....
</code></pre>
<p>I would like to have an output like</p>
<pre><code>Data1 is changed from 1 to 4
Data2 is changed from 2 to 4 and so on...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To loop "in parallel" over two iterators, use built-in <code>zip</code>, or, in Python 2, <code>itertools.izip</code> (the latter will require an <code>import itertools</code> at the start of the module, of course).</p>
<p>E.g, change:</p>
<pre><code>        for default_command in default_command_values:
            for command_executed in command_executed_file:
</code></pre>
<p>into:</p>
<pre><code>        for default_command, command_executed in zip(
            default_command_values, command_executed_file):
</code></pre>
<p>This assumes the two files are indeed "parallel" -- i.e, in 1-1 correspondence line by line.  If that is not the case, then the simplest approach (unless the files are so huge that your memory can't take it) is to first read one into a <code>dict</code>, then loop over the other one checking in with the <code>dict</code>.  So, for example:</p>
<pre><code>    cmd2val = {}
    with open("default_command_values", "r") as default_command_values:
        for default_command in default_command_values:
            cmd2val[default_command.split()[0]] = default_command.strip()
</code></pre>
<p>then, separately:</p>
<pre><code>with open(command_file, "r") as command_executed_file:
    for command_executed in command_executed_file:
        only_command = command_executed.split()[0]
        if only_command not in cmd2val: continue   # or whatever
        command_executed = command_executed.strip()
        if command_executed != cmd2val[only_command]:
            # etc, etc, for all output you desire in this case
</code></pre>
<p>or vice versa, building the dict from the file that's expected to be smaller, then using it to check, line by line, the file that's expected to be larger.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just put the reads in the same loop. A minimal working example for two files, named t1.in and t2.in respectively would be:</p>
<pre><code>with open('t1.in', 'r') as f1:
    with open('t2.in', 'r') as f2:
        while True:
        l1, l2 = f1.readline(), f2.readline() # read lines simultaneously

        # handle case where one of the lines is empty 
        # as file line count may differ
        if (not l1) or (not l2): break
        else: 
            # process lines here
</code></pre>
<p>This example reads the lines from two files simultaneously and if one of them has fewer lines than the other, <code>min(lines_of_file_1, lines_of_file_2)</code> lines are read.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an implementation of <a href="https://stackoverflow.com/a/27889760/4279">@Alex Martelli's <code>dict</code> suggestion</a>:</p>
<pre><code>#!/usr/bin/env python3
"""Match data in two files. Print the changes in the matched values.

Usage: %(prog)s &lt;old-file&gt; &lt;new-file&gt;
"""
import sys

if len(sys.argv) != 3:
    sys.exit(__doc__ % dict(prog=sys.argv[0]))

old_filename, new_filename = sys.argv[1:]

# read old file
data = {}
with open(old_filename) as file:
    for line in file:
        try:
            key, value = line.split()
            data[key] = int(value)
        except ValueError:
            pass # ignore non-key-value lines

# compare with the new file
with open(new_filename) as file:
    for line in file:
        columns = line.split()
        if len(columns) == 2 and columns[0] in data:
            try:
                new_value = int(columns[1])
            except ValueError:
                continue # ignore invalid lines
            else: # matching line
                value = data[columns[0]]
                if value != new_value: # but values differ
                    print('{key} is changed from {value} to {new_value}'.format(
                        key=columns[0], value=value, new_value=new_value))
</code></pre>
<h3>Output (for the input from the question)</h3>
<pre><code>Data1 is changed from 1 to 4
Data2 is changed from 2 to 4
Data3 is changed from 3 to 6
</code></pre>
</div>
<span class="comment-copy">That's because you are reading the lines of the two files in a nested loop. If the two files have the same number of lines you could read a line from each inside the same loop.</span>
<span class="comment-copy">@VHarisop No they have completely different number of lines :/</span>
<span class="comment-copy">"I have two text files, I want to read it line by line..." which one of the two is "it". What are the contents of your <code>command_file</code>?</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/difflib.html#module-difflib" rel="nofollow noreferrer"><code>difflib1</code></a> module might be helpful to you in doing this.</span>
<span class="comment-copy">have you heard of diff?</span>
<span class="comment-copy">Putting the data into a dict like this won't preserve the ordering of changes which appears to be important in the OP's desired output.</span>
<span class="comment-copy">@martineau, the order comes from the <b>other</b> file, the one that's processed sequentially.  If the two files are in different order then obviously you can't "preserve the order" of <b>both</b> of them -- if order matters, but it may differ between files, then you need to pick the one input file for which it does, and turn the other one into a <code>dict</code>, obviously.</span>
<span class="comment-copy">This worked perfectly for me :)</span>
