<div class="post-text" itemprop="text">
<p>I have a variable, <code>x</code>, and I want to know whether it is pointing to a function or not.</p>
<p>I had hoped I could do something like:</p>
<pre><code>&gt;&gt;&gt; isinstance(x, function)
</code></pre>
<p>But that gives me:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
NameError: name 'function' is not defined
</code></pre>
<p>The reason I picked that is because</p>
<pre><code>&gt;&gt;&gt; type(x)
&lt;type 'function'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If this is for Python 2.x or for Python 3.2+, you can also use <code>callable()</code>. It used to be deprecated, but is now undeprecated, so you can use it again. You can read the discussion here: <a href="http://bugs.python.org/issue10518" rel="noreferrer">http://bugs.python.org/issue10518</a>. You can do this with:</p>
<pre><code>callable(obj)
</code></pre>
<p>If this is for Python 3.x but before 3.2, check if the object has a <code>__call__</code> attribute. You can do this with:</p>
<pre><code>hasattr(obj, '__call__')
</code></pre>
<p>The oft-suggested <code>types.FunctionTypes</code> approach is not correct because it fails to cover many cases that you would presumably want it to pass, like with builtins:</p>
<pre><code>&gt;&gt;&gt; isinstance(open, types.FunctionType)
False

&gt;&gt;&gt; callable(open)
True
</code></pre>
<p>The proper way to check properties of duck-typed objects is to ask them if they quack, not to see if they fit in a duck-sized container. Don't use <code>types.FunctionType</code> unless you have a very specific idea of what a function is.</p>
</div>
<div class="post-text" itemprop="text">
<p>Builtin types that don't have constructors in the built-in namespace (e.g. functions, generators, methods) are in the <code>types</code> module. You can use <code>types.FunctionType</code> in an isinstance call.</p>
<pre><code>In [1]: import types
In [2]: types.FunctionType
Out[2]: &lt;type 'function'&gt;
In [3]: def f(): pass
   ...:
In [4]: isinstance(f, types.FunctionType)
Out[4]: True
In [5]: isinstance(lambda x : None, types.FunctionType)
Out[5]: True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/inspect.html#module-inspect">Since Python 2.1</a> you can import <code>isfunction</code> from the <a href="http://docs.python.org/library/inspect.html"><code>inspect</code></a> module.</p>
<pre><code>&gt;&gt;&gt; from inspect import isfunction
&gt;&gt;&gt; def f(): pass
&gt;&gt;&gt; isfunction(f)
True
&gt;&gt;&gt; isfunction(lambda x: x)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer was at the time it was offered thought to be correct. As it
turns out, there is <em>no substitute</em> for <code>callable()</code>, which is back in Python
3.2: Specifically, <code>callable()</code> checks the <code>tp_call</code> field of the object being
tested. There is no plain Python equivalent.  Most of the suggested tests are
correct most of the time:</p>
<pre><code>&gt;&gt;&gt; class Spam(object):
...     def __call__(self):
...         return 'OK'
&gt;&gt;&gt; can_o_spam = Spam()


&gt;&gt;&gt; can_o_spam()
'OK'
&gt;&gt;&gt; callable(can_o_spam)
True
&gt;&gt;&gt; hasattr(can_o_spam, '__call__')
True
&gt;&gt;&gt; import collections
&gt;&gt;&gt; isinstance(can_o_spam, collections.Callable)
True
</code></pre>
<p>We can throw a monkey-wrench into this by removing the <code>__call__</code> from the
class. And just to keep things extra exciting, add a fake <code>__call__</code> to the instance!</p>
<pre><code>&gt;&gt;&gt; del Spam.__call__
&gt;&gt;&gt; can_o_spam.__call__ = lambda *args: 'OK?'
</code></pre>
<p>Notice this really isn't callable:</p>
<pre><code>&gt;&gt;&gt; can_o_spam()
Traceback (most recent call last):
  ...
TypeError: 'Spam' object is not callable
</code></pre>
<p><code>callable()</code> returns the correct result:</p>
<pre><code>&gt;&gt;&gt; callable(can_o_spam)
False
</code></pre>
<p>But <code>hasattr</code> is <em>wrong</em>:</p>
<pre><code>&gt;&gt;&gt; hasattr(can_o_spam, '__call__')
True
</code></pre>
<p><code>can_o_spam</code> does have that attribute after all; it's just not used when calling
the instance.</p>
<p>Even more subtle, <code>isinstance()</code> also gets this wrong:</p>
<pre><code>&gt;&gt;&gt; isinstance(can_o_spam, collections.Callable)
True
</code></pre>
<p>Because we used this check earlier and later deleted the method, <code>abc.ABCMeta</code>
caches the result. Arguably this is a bug in <code>abc.ABCMeta</code>. That said,
there's really no possible way it <em>could</em> produce a more accurate result than
the result than by using <code>callable()</code> itself, since the <code>typeobject-&gt;tp_call</code>
slot method is not accessible in any other way.</p>
<p>Just use <code>callable()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The following should return a boolean:</p>
<pre><code>callable(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's 2to3 tool (<a href="http://docs.python.org/dev/library/2to3.html">http://docs.python.org/dev/library/2to3.html</a>) suggests:</p>
<pre><code>import collections
isinstance(obj, collections.Callable)
</code></pre>
<p>It seems this was chosen instead of the <code>hasattr(x, '__call__')</code> method because of <a href="http://bugs.python.org/issue7006">http://bugs.python.org/issue7006</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>callable(x)</code> <em>will</em> return true if the object passed can be called in Python, but the function does not exist in Python 3.0, and properly speaking will not distinguish between:</p>
<pre><code>class A(object):
    def __call__(self):
        return 'Foo'

def B():
    return 'Bar'

a = A()
b = B

print type(a), callable(a)
print type(b), callable(b)
</code></pre>
<p>You'll get <code>&lt;class 'A'&gt; True</code> and <code>&lt;type function&gt; True</code> as output.</p>
<p><code>isinstance</code> works perfectly well to determine if something is a function (try <code>isinstance(b, types.FunctionType)</code>); if you're really interested in knowing if something can be called, you can either use <code>hasattr(b, '__call__')</code> or just try it.</p>
<pre><code>test_as_func = True
try:
    b()
except TypeError:
    test_as_func = False
except:
    pass
</code></pre>
<p>This, of course, won't tell you whether it's callable but throws a <code>TypeError</code> when it executes, or isn't callable in the first place.  That may not matter to you.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to detect everything that syntactically looks like a function: a function, method, built-in fun/meth, lambda ... but <strong>exclude</strong> callable objects (objects with <code>__call__</code> method defined), then try this one:</p>
<pre><code>import types
isinstance(x, (types.FunctionType, types.BuiltinFunctionType, types.MethodType, types.BuiltinMethodType, types.UnboundMethodType))
</code></pre>
<p>I compared this with the code of <code>is*()</code> checks in <code>inspect</code> module and the expression above is much more complete, especially if your goal is filtering out any functions or detecting regular properties of an object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>callable(x)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A function is just a class with a <code>__call__</code> method, so you can do</p>
<pre><code>hasattr(obj, '__call__')
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; hasattr(x, '__call__')
True

&gt;&gt;&gt; x = 2
&gt;&gt;&gt; hasattr(x, '__call__')
False
</code></pre>
<p>That is the "best" way of doing it, but depending on why you need to know if it's callable or note, you could just put it in a try/execpt block:</p>
<pre><code>try:
    x()
except TypeError:
    print "was not callable"
</code></pre>
<p>It's arguable if try/except is more Python'y than doing <code>if hasattr(x, '__call__'): x()</code>.. I would say <code>hasattr</code> is more accurate, since you wont accidently catch the wrong TypeError, for example:</p>
<pre><code>&gt;&gt;&gt; def x():
...     raise TypeError
... 
&gt;&gt;&gt; hasattr(x, '__call__')
True # Correct
&gt;&gt;&gt; try:
...     x()
... except TypeError:
...     print "x was not callable"
... 
x was not callable # Wrong!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a couple of other ways:</p>
<pre><code>def isFunction1(f) :
    return type(f) == type(lambda x: x);

def isFunction2(f) :
    return 'function' in str(type(f));
</code></pre>
<p>Here's how I came up with the second:</p>
<pre><code>&gt;&gt;&gt; type(lambda x: x);
&lt;type 'function'&gt;
&gt;&gt;&gt; str(type(lambda x: x));
"&lt;type 'function'&gt;"
# Look Maa, function! ... I ACTUALLY told my mom about this!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that Python classes are also callable.</p>
<p>To get functions (and by functions we mean standard functions and lambdas) use:</p>
<pre><code>import types

def is_func(obj):
    return isinstance(obj, (types.FunctionType, types.LambdaType))


def f(x):
    return x


assert is_func(f)
assert is_func(lambda x: x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have learned <code>C++</code>, you must be familiar with <code>function object</code> or <code>functor</code>, means any object that can <code>be called as if it is a function</code>.</p>
<p>In C++,  <code>an ordinary function</code> is a function object, and so is a function pointer; more generally, so is an object of a class that defines <code>operator()</code>. In C++11 and greater, <code>the lambda expression</code> is the <code>functor</code> too.</p>
<p>Similarity, in Python, those <code>functors</code> are all <code>callable</code>. <code>An ordinary function</code> can be callable, <code>a lambda expression</code> can be callable, a <code>functional.partial</code> can be callable, the instances of <code>class with a __call__() method</code> can be callable. </p>
<hr/>
<p>Ok, go back to question : <code>I have a variable, x, and I want to know whether it is pointing to a function or not.</code></p>
<blockquote>
<p>If you want to judge weather the object acts like a function, then the <code>callable</code> method suggested by <code>@John Feminella</code> is ok.</p>
<p>If you want to <code>judge whether a object is just an ordinary function or not</code>( not a callable class instance, or a lambda expression), then the <code>xtypes.XXX</code> suggested by <code>@Ryan</code> is a better choice.</p>
</blockquote>
<h2>Then I do an experiment using those code:</h2>
<pre><code>#!/usr/bin/python3
# 2017.12.10 14:25:01 CST
# 2017.12.10 15:54:19 CST

import functools
import types
import pprint
</code></pre>
<blockquote>
<p>Define a class and an ordinary function.</p>
</blockquote>
<pre><code>class A():
    def __call__(self, a,b):
        print(a,b)
    def func1(self, a, b):
        print("[classfunction]:", a, b)
    @classmethod
    def func2(cls, a,b):
        print("[classmethod]:", a, b)
    @staticmethod
    def func3(a,b):
        print("[staticmethod]:", a, b)

def func(a,b):
    print("[function]", a,b)
</code></pre>
<blockquote>
<p>Define the functors:</p>
</blockquote>
<pre><code>#(1.1) built-in function
builtins_func = open
#(1.2) ordinary function
ordinary_func = func
#(1.3) lambda expression
lambda_func  = lambda a : func(a,4)
#(1.4) functools.partial
partial_func = functools.partial(func, b=4)

#(2.1) callable class instance
class_callable_instance = A()
#(2.2) ordinary class function
class_ordinary_func = A.func1
#(2.3) bound class method
class_bound_method = A.func2
#(2.4) static class method
class_static_func = A.func3
</code></pre>
<blockquote>
<p>Define the functors' list and the types' list:</p>
</blockquote>
<pre><code>## list of functors
xfuncs = [builtins_func, ordinary_func, lambda_func, partial_func, class_callable_instance, class_ordinary_func, class_bound_method, class_static_func]
## list of type
xtypes = [types.BuiltinFunctionType, types.FunctionType, types.MethodType, types.LambdaType, functools.partial]
</code></pre>
<blockquote>
<p>Judge wether the functor is callable. As you can see, they all are callable.</p>
</blockquote>
<pre><code>res = [callable(xfunc)  for xfunc in xfuncs]
print("functors callable:")
print(res)

"""
functors callable:
[True, True, True, True, True, True, True, True]
"""
</code></pre>
<blockquote>
<p>Judge the functor's type( types.XXX). Then the types of functors are not all the same.</p>
</blockquote>
<pre><code>res = [[isinstance(xfunc, xtype) for xtype in xtypes] for xfunc in xfuncs]

## output the result
print("functors' types")
for (row, xfunc) in zip(res, xfuncs):
    print(row, xfunc)

"""
functors' types
[True, False, False, False, False] &lt;built-in function open&gt;
[False, True, False, True, False] &lt;function func at 0x7f1b5203e048&gt;
[False, True, False, True, False] &lt;function &lt;lambda&gt; at 0x7f1b5081fd08&gt;
[False, False, False, False, True] functools.partial(&lt;function func at 0x7f1b5203e048&gt;, b=4)
[False, False, False, False, False] &lt;__main__.A object at 0x7f1b50870cc0&gt;
[False, True, False, True, False] &lt;function A.func1 at 0x7f1b5081fb70&gt;
[False, False, True, False, False] &lt;bound method A.func2 of &lt;class '__main__.A'&gt;&gt;
[False, True, False, True, False] &lt;function A.func3 at 0x7f1b5081fc80&gt;
"""
</code></pre>
<hr/>
<h2>I draw a table of callable functor's types using the data.</h2>
<p><a href="https://i.stack.imgur.com/W3Hvi.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/W3Hvi.png"/></a></p>
<blockquote>
<p>Then you can choose the functors' types that suitable.</p>
</blockquote>
<p>such as:</p>
<pre><code>def func(a,b):
    print("[function]", a,b)

&gt;&gt;&gt; callable(func)
True
&gt;&gt;&gt; isinstance(func,  types.FunctionType)
True
&gt;&gt;&gt; isinstance(func, (types.BuiltinFunctionType, types.FunctionType, functools.partial))
True
&gt;&gt;&gt; 
&gt;&gt;&gt; isinstance(func, (types.MethodType, functools.partial))
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since classes also have <code>__call__</code> method, I recommend another solution:</p>
<pre><code>class A(object):
    def __init__(self):
        pass
    def __call__(self):
        print 'I am a Class'

MyClass = A()

def foo():
    pass

print hasattr(foo.__class__, 'func_name') # Returns True
print hasattr(A.__class__, 'func_name')   # Returns False as expected

print hasattr(foo, '__call__') # Returns True
print hasattr(A, '__call__')   # (!) Returns True while it is not a function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the accepted answer, John Feminella stated that:</p>
<blockquote>
<p>The proper way to check properties of duck-typed objects is to ask them if they quack, not to see if they fit in a duck-sized container. The "compare it directly" approach will give the wrong answer for many functions, like builtins.</p>
</blockquote>
<p>Even though,  there're two libs to distinguish functions strictly, I draw an exhaustive comparable table:</p>
<p><a href="https://docs.python.org/3.7/library/types.html" rel="nofollow noreferrer">8.9. types — Dynamic type creation and names for built-in types — Python 3.7.0 documentation</a></p>
<p><a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">30.13. inspect — Inspect live objects — Python 3.7.0 documentation</a></p>
<pre><code>#import inspect             #import types
['isabstract',
 'isasyncgen',              'AsyncGeneratorType',
 'isasyncgenfunction', 
 'isawaitable',
 'isbuiltin',               'BuiltinFunctionType',
                            'BuiltinMethodType',
 'isclass',
 'iscode',                  'CodeType',
 'iscoroutine',             'CoroutineType',
 'iscoroutinefunction',
 'isdatadescriptor',
 'isframe',                 'FrameType',
 'isfunction',              'FunctionType',
                            'LambdaType',
                            'MethodType',
 'isgenerator',             'GeneratorType',
 'isgeneratorfunction',
 'ismethod',
 'ismethoddescriptor',
 'ismodule',                'ModuleType',        
 'isroutine',            
 'istraceback',             'TracebackType'
                            'MappingProxyType',
]
</code></pre>
<p>The "duck typing" is a preferred solution for general purpose:</p>
<pre><code>def detect_function(obj):
    return hasattr(obj,"__call__")

In [26]: detect_function(detect_function)
Out[26]: True
In [27]: callable(detect_function)
Out[27]: True
</code></pre>
<p>As for the builtins function</p>
<pre><code>In [43]: callable(hasattr)
Out[43]: True
</code></pre>
<p>When go one more step to check if builtin function or user-defined funtion</p>
<pre><code>#check inspect.isfunction and type.FunctionType
In [46]: inspect.isfunction(detect_function)
Out[46]: True
In [47]: inspect.isfunction(hasattr)
Out[47]: False
In [48]: isinstance(detect_function, types.FunctionType)
Out[48]: True
In [49]: isinstance(getattr, types.FunctionType)
Out[49]: False
#so they both just applied to judge the user-definded
</code></pre>
<p>Determine if <code>builtin function</code></p>
<pre><code>In [50]: isinstance(getattr, types.BuiltinFunctionType)
Out[50]: True
In [51]: isinstance(detect_function, types.BuiltinFunctionType)
Out[51]: False
</code></pre>
<p><strong>Summary</strong></p>
<p>Employ <code>callable</code> to duck type checking a function,<br/>
Use <code>types.BuiltinFunctionType</code> if you have further specified demand.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of checking for <code>'__call__'</code> (which is not exclusive to functions), you can check whether a user-defined function has attributes <code>func_name</code>, <code>func_doc</code>, etc. This does not work for methods. </p>
<pre><code>&gt;&gt;&gt; def x(): pass
... 
&gt;&gt;&gt; hasattr(x, 'func_name')
True
</code></pre>
<p>Another way of checking is using the <code>isfunction()</code> method from the <code>inspect</code> module.</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.isfunction(x)
True
</code></pre>
<p>To check if an object is a method, use <code>inspect.ismethod()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Whatever function is a class so you can take the name of the class of instance x and compare:</p>
<pre><code>
if(x.__class__.__name__ == 'function'):
     print "it's a function"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solutions using <code>hasattr(obj, '__call__')</code> and <code>callable(.)</code> mentioned in some of the answers have a main drawback: both also return <code>True</code> for classes and instances of classes with a <code>__call__()</code> method. Eg.</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; Test = collections.namedtuple('Test', [])
&gt;&gt;&gt; callable(Test)
True
&gt;&gt;&gt; hasattr(Test, '__call__')
True
</code></pre>
<p>One proper way of checking if an object is a user-defined function (and nothing but a that) is to use <code>isfunction(.)</code>:</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.isfunction(Test)
False
&gt;&gt;&gt; def t(): pass
&gt;&gt;&gt; inspect.isfunction(t)
True
</code></pre>
<p>If you need to check for other types, have a look at <a href="http://docs.python.org/3/library/inspect.html" rel="nofollow">inspect — Inspect live objects</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python3 I came up with <code>type (f) == type (lambda x:x)</code> which yields <code>True</code> if <code>f</code> is a function and <code>False</code> if it is not. But I think I prefer <code>isinstance (f, types.FunctionType)</code>, which feels less ad hoc. I wanted to do <code>type (f) is function</code>, but that doesn't work. </p>
</div>
<div class="post-text" itemprop="text">
<p>Following previous replies, I came up with this:</p>
<pre><code>from pprint import pprint

def print_callables_of(obj):
    li = []
    for name in dir(obj):
        attr = getattr(obj, name)
        if hasattr(attr, '__call__'):
            li.append(name)
    pprint(li)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the code will go on to perform the call if the value is callable, just perform the call and catch <code>TypeError</code>.</p>
<pre><code>def myfunc(x):
  try:
    x()
  except TypeError:
    raise Exception("Not callable")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following is a "repr way" to check it. Also it works with lambda.</p>
<pre><code>def a():pass
type(a) #&lt;class 'function'&gt;
str(type(a))=="&lt;class 'function'&gt;" #True

b = lambda x:x*2
str(type(b))=="&lt;class 'function'&gt;" #True
</code></pre>
</div>
<span class="comment-copy">I'm depressed by the number of answers working around the problem by looking for some <b>call</b> attribute or callable function... A clean way is about type(a) == types.functionType as suggested by @ryan</span>
<span class="comment-copy">@AsTeR The proper way to check properties of duck-typed objects is to ask them if they quack, not to see if they fit in a duck-sized container. The "compare it directly" approach will give the wrong answer for many functions, like builtins.</span>
<span class="comment-copy">@JohnFeminella While I agree with you in principle. The OP didn't ask if it was callable, just if it is a function. Perhaps it could be argued that he needed a distinction between, for example, functions and classes?</span>
<span class="comment-copy">For my purposes, I came here because I wanted to use <code>insepct.getsource</code> on a variety of objects, and it actually matters not whether the object was callable but whether it was something that would give 'function' for <code>type(obj)</code>. Since google led me here, I'd say AsTeR's comment was the most useful answer (for me). There are plenty of other places on the internet for people to discover <code>__call__</code> or <code>callable</code>.</span>
<span class="comment-copy">Any object acts like a function, that is a <code>functor</code>, can be <code>callable</code>. So just use <code>callable</code> to judge whether a variable is <code>function</code> is not that accurate in some situation, such as for an instance of the class with <code>__call__</code>. Using <code>isinstance( func, (types.FunctionType, types.BuiltinFunctionType, functools.partial))</code> is a better choice. Details in my answer. <a href="https://stackoverflow.com/questions/624926/how-to-detect-whether-a-python-variable-is-a-function/47737017#47737017" title="how to detect whether a python variable is a function">stackoverflow.com/questions/624926/…</a></span>
<span class="comment-copy">This also won't tell you if it's a function--just if it can be called.</span>
<span class="comment-copy">Arguably, you shouldn't care about that distinction..</span>
<span class="comment-copy">Depends on the application whether the distinction matters or not; I suspect you're right that it doesn't for the original question, but that's far from certain.</span>
<span class="comment-copy">the "duck typing" concept makes this the better answer, e.g. "what does it matter if it's a function as long as it behaves like one?"</span>
<span class="comment-copy">Note that callable is not deprecated any more in 3.2, it's only deprecated in 3.0 and 3.1: <a href="http://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#callable</a></span>
<span class="comment-copy">+1 answering the question. However, trying to guess whether an object is a function — or even if it is any callable object — is usually a mistake. Without further information from the OP it's difficult to dismiss it out of hand of course, but still...</span>
<span class="comment-copy">It will actually return False for builtin functions, like 'open' for eg. So to be specific you will have to use isinstance(f, (types.FunctionType, types.BuiltinFunctionType)). And of course if you strictly want just functions, not callables nor methods.</span>
<span class="comment-copy">@ŁukaszKorzybski and to be more precdise... you should also check for functools.partial: <code>isinstance(f, (types.FunctionType, types.BuiltinFunctionType, functools.partial))</code> or checking <code>f.func</code> in such a case.</span>
<span class="comment-copy">@bobince, how about this usecase: I want to write a decorator <code>@foo</code> that I can use both as <code>@foo</code> and as <code>@foo(some_parameter)</code>. It then needs to check what it is being called with, e.g. the function to decorate (first case) or the parameter (the second case, in which it needs to return a further decorator).</span>
<span class="comment-copy">Anyone else think this is the best answer, since it directly address the OP question? I mean, I'm all for duck typing, but for PyCharm to give me AutoCompleteness, I need this specific check... Oh darn, it still doesn't work.</span>
<span class="comment-copy">Nice, but it seems to return False for builtin functions like <code>open</code> and <code>hasattr</code>.</span>
<span class="comment-copy">@Zecc <a href="http://docs.python.org/2/library/inspect.html#inspect.isbuiltin" rel="nofollow noreferrer">isbuiltin</a> is for that.</span>
<span class="comment-copy">See the <code>inspect.isfunction</code> docstring: <i>"Return true if the object is a user-defined function."</i></span>
<span class="comment-copy">Note that 'isfunction' does not recognize functool.partial functions.</span>
<span class="comment-copy">does not work for a class instancemethod</span>
<span class="comment-copy">Amazing illustration of the pitfalls of <code>hasattr(o, '__call__')</code> approach and why <code>callable()</code>, if available, is superior.</span>
<span class="comment-copy">That solves his problem, but he's still created a mystery: if x is of class 'function' in module <b>builtin</b>, and help(x.__class__) describes "class function", why is "function" apparently "not defined"?</span>
<span class="comment-copy">"function" isn't a keyword or a built-in type.  The type of functions is defined in the "types" module, as "types.FunctionType"</span>
<span class="comment-copy">It's also mentioned in the bug report about bringing back <code>callable()</code> for py3.3: <a href="https://bugs.python.org/issue10518#msg122309" rel="nofollow noreferrer">bugs.python.org/issue10518#msg122309</a></span>
<span class="comment-copy">Calling it is a bad idea. What if it has side-effects, or actually does something but takes a really long time?</span>
<span class="comment-copy">@asmeurer - Why else would you need to know if it's a function if you're not calling it?</span>
<span class="comment-copy">@detly: for debugging I regularly want to print all variables in an object, the methods are usually not useful to me so I wouldn't want to execute them. In the end I just list every non-callable property with the corresponding values :)</span>
<span class="comment-copy">Just because <i>you're</i> not calling it doesn't mean it's not being called. Maybe you're doing dispatch.</span>
<span class="comment-copy">There's a big problem with using exceptions to know whether it was callable or not; what if it <i>is</i> callable, but calling it raises an exception you're looking for? You'll both silently ignore an error <i>and</i> misdiagnose whether it was callable. When you're using EAFP you really want to avoid putting too much in the try, but there's no way to do that for this use case.</span>
<span class="comment-copy">Thank you for pointing me to the <code>types</code> module. I was testing a <code>make_stemmer()</code> factory that would sometimes return a function and sometimes a callable <code>Stemmer</code> instance, and I needed to detect the difference.</span>
<span class="comment-copy">Use exception handling to protect against unexpected behavior only, never for logic flow--that is definitely not Pythonic.</span>
<span class="comment-copy">Well, hasattr basically does a getattr in a try/except block (albeit in C). <a href="http://blog.jancewicz.net/2007/10/reflection-hasattr.html" rel="nofollow noreferrer">blog.jancewicz.net/2007/10/reflection-hasattr.html</a></span>
<span class="comment-copy">@dbr: But hasattr is more aesthetic.</span>
<span class="comment-copy">This is nice! Should work on all version of python2.x and python3.x!</span>
<span class="comment-copy">agree with your answer, John Feminella's answer <code>hasattr(obj, '__call__')</code> is ambiguous.</span>
<span class="comment-copy">This is dangerous; you have no idea what side effects <code>x</code> has.</span>
