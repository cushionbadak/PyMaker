<div class="post-text" itemprop="text">
<p>Currently I'm learning Python3, and I already have some experience with C. 
I need to shift string to get rid of two first bytes. Here's code in C:</p>
<pre><code>char *a = "Hello World";
a += 2;
printf ("%s", a)
</code></pre>
<p>this program will output "llo World"</p>
<p>I was wondering if there is a way of doing such thing in Python efficiently, without copying the whole string.</p>
</div>
<div class="post-text" itemprop="text">
<p>The closest operation in 2.x would be creating a <code>buffer</code> from the string and then slicing that. Creating the <code>buffer</code> is an additional operation, but only needs to be performed once since the <code>buffer</code> can be reused.</p>
<pre><code>&gt;&gt;&gt; a = 'Hello world'
&gt;&gt;&gt; b = buffer(a)
&gt;&gt;&gt; print b[2:]
llo world
&gt;&gt;&gt; print b[:5]
Hello
</code></pre>
<p>3.x doesn't have <code>buffer</code>, but you shouldn't be trying to emulate the C code in Python regardless. Figure out what you're actually trying to do, and then write the appropriate Pythonic code for it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is higher level than C and understands what a string is. You can do:</p>
<pre><code>s = "Hello World"
print(s[2:])
</code></pre>
<p>You can find more here: <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow">https://docs.python.org/3/tutorial/introduction.html#strings</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure there is and is better than C</p>
<pre><code>a = "Hello World"
print a[2:]
</code></pre>
<p>This is called <em>slicing</em> </p>
<p>Refer the image</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/bbKOT.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>FYI : You don't need to declare any variable, you can do the operations on the string directly</p>
<pre><code>"Hello world"[2:] # llo world
</code></pre>
</div>
<span class="comment-copy">Python isn't used to be efficient in the way you mean. The language has its own paradigm of 'Pythonic' code conventions, and using pointers to address memory spaces directly is not common. The answers to this question are all the standard "Pythonic" way to do things - treat the string as a list of characters and return a new list with the substring you want.</span>
<span class="comment-copy">Does Python 3 have <code>buffer</code>? I know it has <code>memoryview</code>, but I don't think that works on <code>str</code> objects.</span>
<span class="comment-copy">No, <code>buffer</code> is gone in 3.x. But you shouldn't be trying to emulate C in Python regardless, unless you want to write slower code.</span>
<span class="comment-copy">OP did say he was using Python 3 though.</span>
<span class="comment-copy">Slicing a string copies the elements.</span>
<span class="comment-copy">Well, you can use a <a href="https://docs.python.org/3/library/stdtypes.html#memoryview" rel="nofollow noreferrer">memoryview</a> but it's probably not worth it in most cases and definitely not for a beginner.</span>
<span class="comment-copy">and the third parameter for the increment in the slicing, meaning that with <code>[::-1]</code> you will get the list reversed</span>
<span class="comment-copy">@markcial It is called strides .. :)</span>
<span class="comment-copy">This does copy the sliced elements, unlike the C code.</span>
<span class="comment-copy">i will remember that then, ok</span>
