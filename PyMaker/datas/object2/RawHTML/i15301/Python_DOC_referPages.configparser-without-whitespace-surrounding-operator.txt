<div class="post-text" itemprop="text">
<p>This script:</p>
<pre><code>import ConfigParser

config = ConfigParser.ConfigParser()
config.optionxform = str
with open('config.ini', 'w') as config_file:
    config.add_section('config')
    config.set('config', 'NumberOfEntries', 10)
    config.write(config_file)
</code></pre>
<p>produces:</p>
<pre><code>[config]
NumberOfEntries = 10
</code></pre>
<p>where <code>key</code> and <code>property</code> are not delimited by "=" but with " = " (equal sign surrounded by spaces).</p>
<p>How to instruct Python, to use "=" as delimiter with ConfigParser?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could extend the <code>ConfigParser</code> class and override the <code>write</code> method such that it behaves the way you would like.</p>
<pre><code>import ConfigParser

class GrumpyConfigParser(ConfigParser.ConfigParser):
  """Virtually identical to the original method, but delimit keys and values with '=' instead of ' = '"""
  def write(self, fp):
    if self._defaults:
      fp.write("[%s]\n" % DEFAULTSECT)
      for (key, value) in self._defaults.items():
        fp.write("%s = %s\n" % (key, str(value).replace('\n', '\n\t')))
      fp.write("\n")
    for section in self._sections:
      fp.write("[%s]\n" % section)
      for (key, value) in self._sections[section].items():
        if key == "__name__":
          continue
        if (value is not None) or (self._optcre == self.OPTCRE):

          # This is the important departure from ConfigParser for what you are looking for
          key = "=".join((key, str(value).replace('\n', '\n\t')))

        fp.write("%s\n" % (key))
      fp.write("\n")

if __name__ == '__main__':
  config = GrumpyConfigParser()
  config.optionxform = str
  with open('config.ini', 'w') as config_file:
    config.add_section('config')
    config.set('config', 'NumberOfEntries', 10)
    config.write(config_file)
</code></pre>
<p>This produces the following output file:</p>
<pre><code>[config]
NumberOfEntries=10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just use configparser (very recomended) but in simpler way, just add: </p>
<p><code>with open('example.ini', 'w') as configfile:
...   config.write(configfile, space_around_delimiters=False)</code></p>
<p>As described in: 
<a href="https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.write" rel="noreferrer">https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.write</a></p>
<pre><code> write(fileobject, space_around_delimiters=True)
</code></pre>
<p>Write a representation of the configuration to the specified file object, which must be opened in text mode (accepting strings). This representation can be parsed by a future read() call. If space_around_delimiters is true, delimiters between keys and values are surrounded by spaces.</p>
</div>
<span class="comment-copy">Why? <code>ConfigParser.read</code> can read without any trouble even if there is a space.</span>
<span class="comment-copy">It's read by other app, and INI specification defines delimeter just by "=" (w/o spaces)</span>
<span class="comment-copy">@vlad: you might want to consider unaccepting the answer that includes extending the class, and accepting the other one instead. "config.write(configfile, space_around_delimiters=False)" is a fairly simple solution.</span>
<span class="comment-copy">OK thanks, I was hoping for simpler solution, which in my case will be just to write INI file by file i/o, instead using ConfigParser.</span>
