<div class="post-text" itemprop="text">
<p>I have the following script:</p>
<p><em>a.py</em></p>
<pre><code>print(__builtins__.max)
import b
</code></pre>
<p>and the following module:</p>
<p><em>b.py</em></p>
<pre><code>print(__builtins__.max)
</code></pre>
<p>Launching them with <code>python3 a.py</code> I get:</p>
<pre><code>&lt;built-in function max&gt;
Traceback (most recent call last):
  File "a.py", line 2, in &lt;module&gt;
    import b
  File "/home/antonio/Scrivania/b.py", line 1, in &lt;module&gt;
    print(__builtins__.max)
AttributeError: 'dict' object has no attribute 'max'
</code></pre>
<p>so I don't understand. Why in the script <code>__builtins__</code> is assigned to the builtins module instead in the module <code>__builtins__</code> is assigned to a dict?</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>__builtins__</code>; use the <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer"><code>builtins</code> module</a> instead.</p>
<p>The <code>__builtins__</code> object is an implementation detail you should not rely on. From the <code>builtins</code> module documentation:</p>
<blockquote>
<p>As an implementation detail, most modules have the name <code>__builtins__</code> made available as part of their globals. <strong>The value of <code>__builtins__</code> is normally either this module or the value of this moduleâ€™s <code>__dict__</code> attribute</strong>. Since this is an implementation detail, it may not be used by alternate implementations of Python.</p>
</blockquote>
<p>Note my emphasis there; you can either have a dictionary or the module object when you access <code>__builtins__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Honestly? I can't imagine what they were thinking when they made <code>__builtins__</code> mean different things in a script and in a module. I was using <code>__builtins__</code> to access built-in <code>ImportError</code> from a library that defines its own <code>ImportError</code> as a public API and it worked for me until today.</p>
<p>I do not know the exact difference. My <code>__builtins__.ImportError</code> was working in a module for both Python 2.x and Python 3.x. Now with some upstream changes in the code the same construct fails exactly like in your case. I found your question using web search and I'm going to answer for others who might get into the same situations.</p>
<p>You cannot use <code>__builtins__</code> due to the above problem and you cannot use <code>builtins</code> in Python 2.x, but I managed to fix that using the <em>six</em> python module.</p>
<pre><code>from six.moves import builtins
</code></pre>
<p>This works for me both in Python 2.x and in Python 3.x and it works in the exact same place where <code>__builtins__</code> fails. Hope that helps.</p>
</div>
<span class="comment-copy">@martineau: no, <code>__builtins__</code> is a global global. It is how built-in objects are resolved everywhere. But it is an implementation detail, and a module in one location, a dictionary in all others.</span>
<span class="comment-copy">Looks like Python devs didn't think about this properly. I was going to use <code>__builtins__</code> to access <code>ImportError</code> universally in Python 2.x and 3.x in a module that unfortunately has its own <code>ImportError</code> as part of the public API. Looks like it won't work.</span>
<span class="comment-copy">Yeah yeah, I know. But it's pretty odd what I noticed, don't you think so?</span>
<span class="comment-copy">@antox: why is it odd you noticed? The documentation clearly states it is one or the other. The module is imported once (into <code>__main__</code> IIRC) and from there on out all other modules get the <code>__dict__</code> attribute.</span>
<span class="comment-copy">Now that I have read the doumentation it's not even odd, my fault.</span>
<span class="comment-copy">P.S. what does IIRC mean?</span>
<span class="comment-copy">@martineau: it is there. It is a dictionary, not a module object. Which is why you get an <code>AttributeError</code>, not a <code>NameError</code>; <code>__builtins__</code> is a dictionary and <code>__builtins__.max</code> is not an attribute on that dictionary. <code>__builtins__['max']</code> would work.</span>
