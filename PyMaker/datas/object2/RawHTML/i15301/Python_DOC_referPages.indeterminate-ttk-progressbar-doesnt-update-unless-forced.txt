<div class="post-text" itemprop="text">
<p>I have a tkinter GUI that allows users to perform searches on a sqlite database. The database is not static so it's unknown how long each search will take. The application is single threaded (and I'd like to keep it that way). I'd therefore like a progressbar (or something animated) to re-assure the user that something is happening while the search is going on. At first glance <code>ttk.ProgressBar</code> looked like it might do the trick with its <code>indeterminate</code> mode but it doesn't seem to work as detailed in <a href="http://www.tkdocs.com/tutorial/morewidgets.html" rel="nofollow">TkDocs.</a></p>
<p>For indeterminate progress TkDocs states...</p>
<blockquote>
<p>...at the start of the operation you'll just call the progressbar's "start" method, and at the end of the operation, you'll call its "stop" method. The progressbar will take care of the rest.</p>
</blockquote>
<p>...but that doesn't seem to be the case. If I just use <code>.start()</code> before I perform my sqlite query, and <code>.stop()</code> once it's finished, the progress bar is present but doesn't animate at all.</p>
<p>I can force it to update if I execute the sqlite select statement in a <code>for</code> loop and include a <code>prog.step()</code> and a <code>prog.update_idletasks()</code>. But this impacts performance and only really works if multiple lines are returned since the loop is <code>for row in select_statement:</code>.</p>
<p>So how can I get an indeterminate progress bar (or animation) to animate on a single thread without forcing it with <code>step</code> and <code>update_idletask</code>?</p>
<hr/>
<p>The code. This doesn't work...</p>
<pre><code>prog = ttk.ProgressBar(root,mode='indeterminate')
...
prog.start()
result = None
try:
    conn = sqlite3.connect(database)
    result = conn.execute('select * from table where a=? and b=?',(var1,var2))
    result = result.fetchall()
    conn.close()
except:
    handle the exception
prog.stop()
</code></pre>
<p>Works-ish, but is hacky.</p>
<pre><code>prog = ttk.ProgressBar(root,mode='indeterminate')
...
prog.start()
result = None
try:
    for row in conn.execute('select * from table where a=? and b=?',(var1,var2)):
        result.append(row)
        prog.step()
        prog.update_idletasks()
    conn.close()
except:
    handle the exception
prog.stop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So taking your second working code block and refactoring out the progress bar update cleans things up.</p>
<pre><code>prog = ttk.ProgressBar(root,mode='indeterminate')
...
prog.start()

def progress():
    prog.step()
    prog.update_idletasks()

with sqlite3.connect(database) as conn:
     conn.set_progress_handler(handler=progress, n=1)
     database_query = conn.execute('select * from table where a=? and b=?',(var1,var2))
     result = database_query.fetchall()
</code></pre>
</div>
<span class="comment-copy">Does your program have a <code>.mainloop()</code>?</span>
<span class="comment-copy">Yes. This is all happening in a <code>toplevel</code> window that the user opens from the <code>root</code> window, whose <code>mainloop</code> has already been initialised.</span>
<span class="comment-copy">while you have stated that you would prefer to keep it single threaded, i would say that to get a smooth reacting from the GUI you would be best off making your query in a second thread, so that you can start the progressbar and let the main thread return to the mainloop.</span>
<span class="comment-copy">I agree with James. Please read <a href="http://stackoverflow.com/a/15374078/1217270">this answer</a> and let me know if you are not fully enlightened. ;-]</span>
<span class="comment-copy">But does this have the same issue as the second example, in that <code>progress</code> will only be called when a row is found and added to the list? What would happen if a million rows were scanned and only a single row returned? Would the progress bar increment once?</span>
<span class="comment-copy">Ah I see what you're looking for. It looks like set_progress_handler is what you're looking for.   <a href="https://www.sqlite.org/c3ref/progress_handler.html" rel="nofollow noreferrer">sqlite.org/c3ref/progress_handler.html</a>  I updated my answer to fit with your requirements.</span>
<span class="comment-copy">This looks very promising, but at the moment I haven't been able to get it to work as the method expects inputs other than the <code>progress</code> function, and I'm a bit stumped as to what those values should be. I'll have a play around.</span>
<span class="comment-copy">Yeah that's really weird how hard it is to find the documentation, sorry about not linking it! <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_progress_handler" rel="nofollow noreferrer">Here's the link</a>, the parameters are the handler function, then the number of iterations between each function call. I updated the code with the correct convention</span>
