<div class="post-text" itemprop="text">
<p>If you do a try in python, and the code doesn't fail, but it's outside of a range you want or something, what is the best way to make it fail so it goes to the except?</p>
<p>A simple example is as follows, to check the input is a number between 0 and 1:</p>
<pre><code>input = 0.2
try:
    if 0 &lt; float( input ) &lt; 1:
        print "Valid input"
    else:
        "fail"+0  (to make the code go to except)
except:
    print "Invalid input"
</code></pre>
<p>Is there a better way to go about this? The between range is just an example, so it should work with other things too (also, in the above example, it should also be able to use a number in string format, so detecting the type wouldn't really work).</p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry but rchang's answer is not reliable for production code (assert statements are skipped if Python is run with the -O flag). The correct solution is to raise a <code>ValueError</code>, ie:</p>
<pre><code>try:
    if 0 &lt; float(input) &lt; 1:
        raise ValueError("invalid input value")
    print "Valid input"
except (TypeError, ValueError):
    print "Invalid input"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>raise</code> statement:</p>
<pre><code>try:
    if (some condition):
        Exception
except:
    ...
</code></pre>
<p>Note that <code>Exception</code> can be more specific, like for example, a <code>ValueError</code>, or maybe it can be an exception defined by you:</p>
<pre><code>class MyException(Exception):
    pass

try:
    if (some condition):
        raise MyException
except MyException:
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answer is accurate. But to educate you more about exception handling ... you could use <a href="https://docs.python.org/2/tutorial/errors.html#raising-exceptions" rel="nofollow noreferrer"><code>raise</code></a>.</p>
<p>Also consider <a href="https://stackoverflow.com/questions/27904725/better-way-to-fail-a-try-in-python-if-result-is-valid-but-not-wanted/27904814?noredirect=1#comment44209458_27904814">Bruno</a>'s comment where he says:</p>
<blockquote>
<p>You also want to catch TypeError in case input is neither a string nor a number.</p>
</blockquote>
<p>Thus in this case we may add another except block</p>
<pre><code>input = 1.2
try:
    if 0 &lt; float( input ) &lt; 1:
        print "Valid input"
    else:
        raise ValueError  #(to make the code go to except)
except ValueError:
    print "Input Out of Range"
except TypeError:
    print "Input NaN"
</code></pre>
<p><code>TypeError</code> will be raised iff the input is an object ( for e.g)</p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in assertion mechanism may be a fit here.</p>
<pre><code>input = 0.2
try:
    assert 0 &lt; float( input ) &lt; 1
    print "Valid input"
except (AssertionError, ValueError):
    print "Invalid input"
</code></pre>
<p><code>AssertionError</code> will be raised if the condition you provide to the <code>assert</code> statement does not evaluate to <code>True</code>.  Also, upon attempting the <code>float</code> conversion upon an invalid value would raise the <code>ValueError</code>.</p>
</div>
<span class="comment-copy">Hmm, are you totally sure? I just tried it with Maya which creates the .pyo file and it still seemed to work correctly.</span>
<span class="comment-copy">Ahh nvm, just noticed the other comment with a link to another post and it appears to be true, weird that it doesn't do that in Maya :p</span>
<span class="comment-copy">@Peter: more exactly (sorry wrong wording), assert statements are skipped when Python is run with the '-O' flag.</span>
<span class="comment-copy">Ah thanks, it does what I'm after, but the assert method seems to work better with the stuff I'm using it for :)</span>
<span class="comment-copy">@Peter: the "assert method" is not reliable, it will break if the code is compiled (or executed) with the "-O" flag.</span>
<span class="comment-copy">Thanks, though to be fair, the assert method seems a lot neater to use, avoids an extra if statement :)</span>
<span class="comment-copy">@Peter That's why I told the other answer is accurate ;) ...</span>
<span class="comment-copy">Ahhh ok haha, thought you were referring to christians then :P   But yeah thanks anyways, I don't know much about exceptions aside from the basics, so any help is useful :)</span>
<span class="comment-copy">please <i>dont</i> use bare except clauses - always specify the exception you want to handle.</span>
<span class="comment-copy">@brunodesthuilliers Yeah. The OP had used so ... Will edit now. Thanks</span>
<span class="comment-copy">Thanks haha, with what I'm after this seems perfect, I'd not heard of assert before but it seems really useful.</span>
<span class="comment-copy"><code>assert</code> statements are deactived in .pyo files, they are for developers only.</span>
<span class="comment-copy">Assertions are only meant for debugging and testing purposes, not for actual application logic. If you compile the Python code with optimizations, the <code>assert</code>statements are removed. Please see <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-assert_stmt" rel="nofollow noreferrer">the Python 3.4.2 doc</a> and <a href="http://stackoverflow.com/a/1838411/1388240">this SO answer</a> for details. Better use exceptions for this, as shown in @brunodesthuilliers answer.</span>
<span class="comment-copy">@brunodesthuilliers I learn things every day, it seems.  Thanks for the course correction.</span>
<span class="comment-copy">@rchang: we all learn things everyday... Or at least we should ;)</span>
