<div class="post-text" itemprop="text">
<p>Python 3</p>
<pre><code>import re

P = re.compile(r'[\s\t]+') 
re.sub(P, ' ', '\xa0 haha')
' haha' 
</code></pre>
<p>Python 2</p>
<pre><code>import re

P = re.compile(r'[\s\t]+')
re.sub(P, u' ', u'\xa0 haha')
u'\xa0 haha'
</code></pre>
<p>I desire the Python 3 behavior, but in Python 2 code. How come the regex pattern fails to match space-like codepoints like <code>\xa0</code> in Python 2 but correctly matches these in Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>re.UNICODE</code> flag:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; P = re.compile(r'[\s\t]+', flags=re.UNICODE)
&gt;&gt;&gt; re.sub(P, u' ', u'\xa0 haha')
u' haha'
</code></pre>
<p>Without the flag, only ASCII whitespace is matched; <code>\xa0</code> is not part of the ASCII standard (it is a Latin-1 codepoint).</p>
<p>The <code>re.UNICODE</code> flag is the default in Python 3; use <a href="https://docs.python.org/3/library/re.html#re.ASCII" rel="nofollow"><code>re.ASCII</code></a> if you wanted to have the Python 2 (bytestring) behaviour.</p>
<p>Note that there is no point in including <code>\t</code> in the character class; <code>\t</code> is already part of the <code>\s</code> class, so the following will match the exact same input:</p>
<pre><code>P = re.compile(r'\s+', flags=re.UNICODE)
</code></pre>
</div>
