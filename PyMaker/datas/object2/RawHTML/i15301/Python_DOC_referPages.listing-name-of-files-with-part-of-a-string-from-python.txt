<div class="post-text" itemprop="text">
<p>I am trying to list all files within a directory that contain the string I specify as part of their names. I want to vary this string with each iteration of the loop. The code I am using is:</p>
<pre><code>from subprocess import Popen
from subprocess import call

species_array = ["homo_sapiens", "pan_troglodytes", "pongo_abelii", "gorilla_gorilla", "macaca_mulatta", "callithrix_jacchus", "bos_taurus", "canis_familiaris", "equus_caballus", "felis_catus", "ovis_aries", "sus_scrofa", "oryctolagus_cuniculus", "rattus_norvegicus", "mus_caroli", "mus_pahari", "mus_musculus"]
run_length = (len(species_array) - 5)
path = "/homes/varshith/maf_files/1/testmafs/HAL_Files/"
for i in range (run_length):
    s = Popen("find", path, "-name", *species_array[i+1]*)
    print s.communicate()[0]
</code></pre>
<p>The file should contain species_array[i+1] as part of its name. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use <code>find</code> you need to pass a <code>list</code> of <code>args</code> when <code>shell=False</code>.  <code>check_output</code> will work for your case, you can slice the list instead of using range and you need <code>str.format</code> to wrap each specie/ele in <code>*</code>:</p>
<pre><code>from subprocess import check_output

species_array = ["homo_sapiens", "pan_troglodytes", "pongo_abelii", "gorilla_gorilla", "macaca_mulatta", "callithrix_jacchus", "bos_taurus", "canis_familiaris", "equus_caballus", "felis_catus", "ovis_aries", "sus_scrofa", "oryctolagus_cuniculus", "rattus_norvegicus", "mus_caroli", "mus_pahari", "mus_musculus"]
path = "/homes/varshith/maf_files/1/testmafs/HAL_Files/"
for ele in species_array[1:-5]:
    s = check_output(["find", path, "-name", "*{0}*".format(ele)])
    print s
</code></pre>
<p>For python 2.6 use Popen:</p>
<pre><code>from subprocess Popen,PIPE

species_array = ["homo_sapiens", "pan_troglodytes", "pongo_abelii", "gorilla_gorilla", "macaca_mulatta", "callithrix_jacchus", "bos_taurus", "canis_familiaris", "equus_caballus", "felis_catus", "ovis_aries", "sus_scrofa", "oryctolagus_cuniculus", "rattus_norvegicus", "mus_caroli", "mus_pahari", "mus_musculus"]
path = "/homes/varshith/maf_files/1/testmafs/HAL_Files/"
for ele in species_array[1:-5]:
    s = Popen(["find", path, "-name", "*{0}*".format(ele)],stdout=PIPE,stderr=PIPE)
    out,err = s.communicate()
    print(out,err)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your loop is all wrong.  python is much more expressive than that:</p>
<p>1) You can skip the first element by starting the range at 1: </p>
<pre><code>for i in range(1, len(species_arr) - 4):
</code></pre>
<p>...then use <code>i</code> instead of <code>i+1</code> inside your loop.</p>
<p>2) Even easier (and more idiomatic) is to use list slicing:</p>
<pre><code>for species in species_arr[1:-4]:
</code></pre>
<p>3) You can format strings in python using the format() method.  </p>
<p>Here is an example employing those concepts:</p>
<pre><code>species_arr = [
    "homo_sapiens", 
    "pan_troglodytes", 
    "pongo_abelii", 
    "gorilla_gorilla", 
    "macaca_mulatta", 
    "callithrix_jacchus", 
    "bos_taurus", 
    "canis_familiaris", 
    "equus_caballus", 
    "felis_catus", 
    "ovis_aries", 
    "sus_scrofa", 
    "oryctolagus_cuniculus", 
    "rattus_norvegicus", 
    "mus_caroli", 
    "mus_pahari", 
    "mus_musculus"
]

chop_from_end = 4 

for species in species_arr[1:-chop_from_end]:
    fname = "*{0}*".format(species)
    print fname

--output:--
*pan_troglodytes*
*pongo_abelii*
*gorilla_gorilla*
*macaca_mulatta*
*callithrix_jacchus*
*bos_taurus*
*canis_familiaris*
*equus_caballus*
*felis_catus*
*ovis_aries*
*sus_scrofa*
*oryctolagus_cuniculus*
</code></pre>
<p>The format() method was introduced in python 3.0--but it was backported to python 2.6 (in a more limited form).  If for some reason your install does not have the format() method, you can use the old way:</p>
<pre><code> fname = "*%s*" % species
</code></pre>
<p>See additional format() examples here:</p>
<p><a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow">https://docs.python.org/3/library/string.html#format-examples</a></p>
<p>4) Here's what you can do with the <code>glob module</code>:</p>
<pre><code>import glob
import os.path
import pprint

base_dir = '/Users/7stud/python_programs/dir1'

names = ['a', 'b', 'c']

for name in names: 
    fname = "*{0}*".format(name)
    path = os.path.join(base_dir, fname)
    pprint.pprint(glob.glob(path))
    print '-' * 20

--output:--
['/Users/7stud/python_programs/dir1/__pycache__',
 '/Users/7stud/python_programs/dir1/a.txt',
 '/Users/7stud/python_programs/dir1/aa.txt',
 '/Users/7stud/python_programs/dir1/ab.txt',
 '/Users/7stud/python_programs/dir1/ba.txt']
--------------------
['/Users/7stud/python_programs/dir1/ab.txt',
 '/Users/7stud/python_programs/dir1/b.txt',
 '/Users/7stud/python_programs/dir1/ba.txt']
--------------------
['/Users/7stud/python_programs/dir1/__pycache__']
--------------------
</code></pre>
<p>Or, as a dict of <code>name, matches</code> pairs:</p>
<pre><code>results = dict(
    (
      name,
      glob.iglob(os.path.join(base_dir, "*{0}*".format(name)))
    )
    for name in names
)

for name, _iter in results.items():
    print "{0}:".format(name)
    pprint.pprint(list(_iter))

--output:--
a:
['/Users/7stud/python_programs/dir1/__pycache__',
 '/Users/7stud/python_programs/dir1/a.txt',
 '/Users/7stud/python_programs/dir1/aa.txt',
 '/Users/7stud/python_programs/dir1/ab.txt',
 '/Users/7stud/python_programs/dir1/ba.txt']
c:
['/Users/7stud/python_programs/dir1/__pycache__']
b:
['/Users/7stud/python_programs/dir1/ab.txt',
 '/Users/7stud/python_programs/dir1/b.txt',
 '/Users/7stud/python_programs/dir1/ba.txt']
</code></pre>
</div>
<span class="comment-copy">see <a href="http://stackoverflow.com/questions/3207219/how-to-list-all-files-of-a-directory-in-python" title="how to list all files of a directory in python">stackoverflow.com/questions/3207219/â€¦</a></span>
<span class="comment-copy">just use glob of fnmatch also why use <code>i+1</code> do you not want the first?</span>
<span class="comment-copy">I dont want the first. And all of these glob functions only take into account a string that doesn't change over the entire program. I am looking for a code which enables me to find a variable substring in a filename.</span>
<span class="comment-copy">There is an error saying that check_output is not defined! I am using Python 2.6.6</span>
<span class="comment-copy">ok give me one sec will switch to Popen</span>
<span class="comment-copy"><code>check_output()</code> was introduced in 2.7. You can use <code>Popen()</code> with <code>communicate()</code> in place of <code>check_output()</code>.</span>
<span class="comment-copy">I am getting an error like:s = Popen(["find", path, "-name", "<i>{}</i>".format(ele)],stdout=PIPE,stderr=PIPE) ValueError: zero length field name in format</span>
<span class="comment-copy">Got it now! Thanks Padraic :D</span>
