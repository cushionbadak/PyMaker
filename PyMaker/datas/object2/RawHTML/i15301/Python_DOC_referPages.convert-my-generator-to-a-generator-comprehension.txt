<div class="post-text" itemprop="text">
<p>A question for the functional programming ninjas. Here's my generator:</p>
<pre><code>def get_interesting_line(file,*searches):
    with open(file,'r') as f:
        for line in f:
            if all(search in line for search in searches):
                yield line
</code></pre>
<p>I have a suspicion this could be turned into a generator expression. My head tends to hurt when I try to make them, though. Is it possible? </p>
<p>EDIT: Here was my attempt, which didn't work (yielding a generator object):</p>
<pre><code>def test(file, *searches):
    with open(file) as f:
        yield (line for line in f if all(search in line for search in searches))

lines = test('myfile')
next(lines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code didn't work, because </p>
<pre><code>yield (line for line in f if all(search in line for search in searches))
</code></pre>
<p>turns your function into a generator, which yields another generator (formed by generator expression).</p>
<p>What you need is <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow"><code>yield from</code></a> (Python 3.3+):</p>
<pre><code>yield from (line for line in f if all(search in line for search in searches))
</code></pre>
</div>
<span class="comment-copy">Python version?</span>
<span class="comment-copy">what is searches?</span>
<span class="comment-copy">python 3. searches is an iterable container of strings.</span>
<span class="comment-copy">You're blatantly asking for people to give you teh codez?</span>
<span class="comment-copy">i would use sets</span>
<span class="comment-copy">nifty! is there a python 2 option as well?</span>
<span class="comment-copy">@RickTeachey as mentioned in the answer, just remove <code>yield</code>, more specifically, you already have a generator expression, just return it, instead of yielding.</span>
<span class="comment-copy">@RickTeachey I'd collect all matched lines to a list and <code>return</code> the result (or iterate over it and <code>yield</code> every element)</span>
<span class="comment-copy">i normally would as well, but if the file is a couple gigs of data, i prefer the lazy method.</span>
<span class="comment-copy">if you make searches a set you can use <code>line for line in f if searches.issubset(line.rstrip().split())</code></span>
