<div class="post-text" itemprop="text">
<p>I tend to use a Debian <em>wheezy</em> system, that ships with Python 2.6, 2.7 and 3.2.</p>
<p>However I'm developing now using a local installation Python 3.4 because has a very interesting advantage over Python 3.2.</p>
<p>The problem is that I don't know how to install such a thing as a <code>pdb3.4</code>. When I run <code>pdb3</code> over my Python 3.4 program, it runs as a Python 3.2 program, failing.</p>
<p><strong>I'm on the need of general Python advice on versions and multi-host (Ubuntu <em>precise</em> and <em>trusty</em>, and Debian <em>wheezy</em>) multi-version development, and I particularly need downloading and building a 3.4 version of <code>pdb</code></strong>, but I don't get to find any documentation on that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Every version of Python comes with its own <code>pdb</code> module. It is <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow">part of the standard library</a>.</p>
<p>The version in the 3.4 standard library has no special advantages over the version that comes with 3.2 or 2.7. The last time <code>pdb</code> functionality was changed was in the 3.2 and 2.7 releases (the only thing missing in the 2.6 version is the <a href="https://docs.python.org/2/library/pdb.html#pdb.Pdb" rel="nofollow"><code>skip</code> keyword argument to <code>pdb.Pdb()</code></a>, and 3.3 added more tab completion support).</p>
<p>If you have a <code>pdb</code> command line, then that's just an alias for <code>python3 -m pdb</code>; you can use that with any of your versions:</p>
<pre><code>python3.2 -m pdb yourscript.py
</code></pre>
<p>Debian and Ubuntu simply copy the <code>pdb</code> module to <code>/usr/bin/</code> with the Python version appended, so <code>/usr/lib/python3.2/pdb.py</code> is copied to <code>/usr/bin/pdb3.2</code>.</p>
</div>
<span class="comment-copy">pdb is a module from the standard library. There is no need to install it.</span>
<span class="comment-copy">Actually I have seen that usage written somewhere, but I was confused by not finding any <code>pdb3.4</code> binary or script. You answer me, but I'm staring now to /usr/lib/python2.7/pdb.py and /usr/lib/python3.2/pdb.py, the two resolution endpoints of my <code>pdb</code> and <code>pdb3</code>, and see many more things than just wrapping around a script with '-m pdb '. I wonder other user might need some contents additional to watch you answer me.</span>
<span class="comment-copy">The rest of the module is well enough documented in the Python documentation I linked to.</span>
<span class="comment-copy">The sentence <i>If you have a <code>pdb</code> command line, then that's just an alias for <code>python3 -m pdb</code></i> is not true. But maybe it is true in your particular system.</span>
<span class="comment-copy">@galegosimpatico: Debian copies the whole <code>pdb</code> library to <code>/usr/bin/pdb&lt;version&gt;</code>. Running <code>python -m pdb</code> does the <i>exact same thing</i> as running the library as a script. Python modules can double up as scripts and can also be used as <code>-m modulename</code> on the command line, <code>pdb</code> does both.</span>
<span class="comment-copy">@galegosimpatico: The module has a <code>__main__</code> test <a href="https://hg.python.org/cpython/file/3.4/Lib/pdb.py#l1682" rel="nofollow noreferrer">at the bottom of the file</a> that handles being run as a script or with <code>python -m pdb</code>. If you use <code>diff -u /usr/bin/pdb3.4 /usr/lib/python3.4/pdb.py</code> you'll see that the files do not differ.</span>
