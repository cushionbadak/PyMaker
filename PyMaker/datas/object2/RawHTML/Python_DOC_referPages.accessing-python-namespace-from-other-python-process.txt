<div class="post-text" itemprop="text">
<p>Let's that I have the following Python script <code>script.py</code>:</p>
<pre><code>a = 1
b = 10

for i in range(b):
    a += 1

print(a)
</code></pre>
<p>I know that I can use <code>globals()</code> inside this <code>script.py</code> in order to show the namespace:</p>
<pre><code>{'__file__': 'counter.py', '__doc__': None, 'i': 9, '__spec__': None, '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000027C8D9402E8&gt;, '__name__': '__main__', '__cached__': None, 'b': 10, 'a': 11, '__package__': None, '__builtins__': &lt;module 'builtins' (built-in)&gt;}
</code></pre>
<p>I wonder whether you can somehow emulate <code>globals()</code> from outside the <code>script.py</code>? In other words, I want to run <code>other_script.py</code> and see the <code>script.py</code>'s <code>globals()</code> output. Is <code>import counter</code> somehow useful?</p>
<p>EDIT: if possible, can <code>script.py</code>'s <code>globals</code> output be updated with each increment of <code>i</code> in the for loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with <code>import counter</code> is that the namespace inside counter.py will be changed to your current namespace, since you are importing it inside your current namespace.  </p>
<p>However, if all you want to do is simply see the counter.py output, you could just use the <code>exec()</code> function to execute it separately. This will not change its namespace.</p>
<p>Example:  </p>
<p>In <strong>counter.py</strong>:  </p>
<pre><code>a = 1
b = 10

for i in range(b):
    print('\na = ', a)
    print('globals = ', globals())
    a += 1

print('\na = ', a)
print('globals = ', globals())
</code></pre>
<p>In <strong>other_script.py</strong>:</p>
<pre><code>exec(open('counter.py').read())
</code></pre>
</div>
<span class="comment-copy">Can you give some more deployment details? Are <code>script.py</code> and <code>other_script.py</code> started separately (ie as completely separate processes) or do you intend for one to start the other? As completely sperrate processes I don't believe you should be able to do much but you may have some options if one is the subprocess of the other using pythons multiprocessing module.</span>
<span class="comment-copy"><code>script.py</code> and <code>other_script.py</code> are completely separate processes.</span>
<span class="comment-copy">This may be an OS dependant problem since you want one process to access the memory of another. There are ways to do this but very few are easy. My advice is to not reinvent the wheel: use a database (a simple k/v store should be fine like redis) or set up a simple Http server in your host script.</span>
<span class="comment-copy">Thank you for the answer. Let's assume that there're no print statements in the <code>counter.py</code> file. Is it still possible to see the values of variables <code>a</code>, <code>b</code> and <code>i</code>? The current approach with <code>exec(open('counter.py').read())</code> produces empty output.</span>
