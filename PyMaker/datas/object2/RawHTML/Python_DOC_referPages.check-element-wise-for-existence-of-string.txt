<div class="post-text" itemprop="text">
<p>I'm looking for a way to check whether one string can be found in another string. <code>str.contains</code> only takes a fixed string pattern as argument, I'd rather like to have an element-wise comparison between two string columns.</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'long': ['sometext', 'someothertext', 'evenmoretext'],
               'short': ['some', 'other', 'stuff']})


# This fails:
df['short_in_long'] = df['long'].str.contains(df['short'])
</code></pre>
<p>Expected Output:</p>
<pre><code>[True, True, False]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension with <code>zip</code>:</p>
<pre><code>df['short_in_long'] = [b in a for a, b in zip(df['long'], df['short'])]

print (df)
            long  short  short_in_long
0       sometext   some           True
1  someothertext  other           True
2   evenmoretext  stuff          False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a prime use case for a list comprehension:</p>
<pre><code># df['short_in_long'] = [y in x for x, y in df[['long', 'short']].values.tolist()]
df['short_in_long'] = [y in x for x, y in df[['long', 'short']].values]
df

            long  short  short_in_long
0       sometext   some           True
1  someothertext  other           True
2   evenmoretext  stuff          False
</code></pre>
<p>List comprehensions are usually faster than string methods because of lesser overhead. See <a href="https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care">For loops with pandas - When should I care?</a>.</p>
<hr/>
<p>If your data contains NaNs, you can call a function with error handling:</p>
<pre><code>def try_check(haystack, needle):
    try:
        return needle in haystack
    except TypeError:
        return False

df['short_in_long'] = [try_check(x, y) for x, y in df[['long', 'short']].values]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check with <code>numpy</code>, it is row-wise :-) .</p>
<pre><code>np.core.char.find(df.long.values.astype(str),df.short.values.astype(str))!=-1
Out[302]: array([ True,  True, False])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also,</p>
<pre><code>df['short_in_long'] = df['long'].str.contains('|'.join(df['short'].values))
</code></pre>
<p><strong>Update :</strong>
I misinterpreted the problem. Here is the corrected version:</p>
<pre><code>df['short_in_long'] = df['long'].apply(lambda x: True if x[1] in x[0] else False, axis =1)
</code></pre>
</div>
<span class="comment-copy">You've accepted an answer that is a near carbon copy of another.  Not sure that kind of thing should be encouraged. Just FYI.</span>
<span class="comment-copy">I accepted the other answer only because your (excellent one) did not work in my actual case. So the other seems to be more general.</span>
<span class="comment-copy">Not sure which version of the answer you're referring to. The other answer will also fail from a TypeError. And like I replied to your other comment, the initial edit with <code>str.contains</code> is wrong, because the check is <i>not</i> element wise. For example, using the contains solution, you will search for "some" across all rows, when it should have checked just the first. General, but completely wrong.</span>
<span class="comment-copy">You don't have to accept my answer, but you should check/verify the correctness of the solutions that you decide to accept, general or not... That's all. Have a nice day :)</span>
<span class="comment-copy">I did check them obviously, and I accepted the final version, not the initial (wrong) one. You have a nice day too :)</span>
<span class="comment-copy">I used <code>numpy</code> a well. I was trying <code>df['short_in_long'] = np.where(df['short'].str.contains(df['long']), True, False)</code>. Why does this not work row-wise?</span>
<span class="comment-copy">@Erfan isin will not check the partial match :-)</span>
<span class="comment-copy">Sorry, that was my second try. I edited my comment.</span>
<span class="comment-copy">@Erfan two part , <code>str.contain</code> do not accept <code>Series</code>, second , if you using join string with <code>sep = '|'</code> when the 3rd row have any partial string like <code>some</code> and <code>other</code>, the 3rd row will return as True under  <code>str.contain</code></span>
<span class="comment-copy">@Erfan yes that is why when do rowwise check like 1-1 , we can not using str.contains</span>
<span class="comment-copy">It was my first wrong answer. OP need check values per rows.</span>
<span class="comment-copy">As @jezrael mentioned , op want a row-wise check (1-1 check ), not (1-n) check</span>
<span class="comment-copy">Thanks. I have corrected my code for one-to-one row-wise checking.</span>
