<div class="post-text" itemprop="text">
<p>I have a Python list and I want to know what's the quickest way to count the number of occurrences of the item, <code>'1'</code> in this list. In my actual case, the item can occur tens of thousands of times which is why I want a fast way.</p>
<pre><code>['1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '7', '7', '7', '10', '10']
</code></pre>
<p>Does the <code>collections</code> module help? I'm using Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = ['1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '7', '7', '7', '10', '10']
print a.count("1")
</code></pre>
<p>It's probably optimized heavily at the C level.</p>
<p>Edit: I randomly generated a large list. </p>
<pre><code>In [8]: len(a)
Out[8]: 6339347

In [9]: %timeit a.count("1")
10 loops, best of 3: 86.4 ms per loop
</code></pre>
<p>Edit edit: This could be done with <a href="http://docs.python.org/library/collections.html#collections.Counter" rel="noreferrer">collections.Counter</a> </p>
<pre><code>a = Counter(your_list)
print a['1']
</code></pre>
<p>Using the same list in my last timing example</p>
<pre><code>In [17]: %timeit Counter(a)['1']
1 loops, best of 3: 1.52 s per loop
</code></pre>
<p>My timing is simplistic and conditional on many different factors, but it gives you a good clue as to performance.</p>
<p>Here is some profiling</p>
<pre><code>In [24]: profile.run("a.count('1')")
         3 function calls in 0.091 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.091    0.091 &lt;string&gt;:1(&lt;module&gt;)
        1    0.091    0.091    0.091    0.091 {method 'count' of 'list' objects}

        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Prof
iler' objects}



In [25]: profile.run("b = Counter(a); b['1']")
         6339356 function calls in 2.143 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    2.143    2.143 &lt;string&gt;:1(&lt;module&gt;)
        2    0.000    0.000    0.000    0.000 _weakrefset.py:68(__contains__)
        1    0.000    0.000    0.000    0.000 abc.py:128(__instancecheck__)
        1    0.000    0.000    2.143    2.143 collections.py:407(__init__)
        1    1.788    1.788    2.143    2.143 collections.py:470(update)
        1    0.000    0.000    0.000    0.000 {getattr}
        1    0.000    0.000    0.000    0.000 {isinstance}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Prof
iler' objects}
  6339347    0.356    0.000    0.356    0.000 {method 'get' of 'dict' objects}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By the use of <strong>Counter</strong> dictionary counting the occurrences of all element as well as most common element in python list with its occurrence value in most efficient way.</p>
<p>If our python list is:-</p>
<pre><code>l=['1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '7', '7', '7', '10', '10']
</code></pre>
<p><strong>To find occurrence of every items in the python list use following:-</strong></p>
<pre><code>\&gt;&gt;from collections import Counter

\&gt;&gt;c=Counter(l)

\&gt;&gt;print c

Counter({'1': 6, '2': 4, '7': 3, '10': 2})
</code></pre>
<p><strong>To find most/highest occurrence of items in the python list:-</strong></p>
<pre><code>\&gt;&gt;k=c.most_common()

\&gt;&gt;k

[('1', 6), ('2', 4), ('7', 3), ('10', 2)]
</code></pre>
<p><strong>For Highest one</strong>:-</p>
<pre><code>\&gt;&gt;k[0][1]

6
</code></pre>
<p>For the item just use k[0][0]</p>
<pre><code>\&gt;&gt;k[0][0]

'1'
</code></pre>
<p><strong>For nth highest item and its no of occurrence in the list use follow:-</strong></p>
<p>**for n=2 **</p>
<pre><code>\&gt;&gt;print k[n-1][0] # For item

2

\&gt;&gt;print k[n-1][1] # For value

4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Combination of lambda and map function can also do the job:</p>
<pre><code>list_ = ['a', 'b', 'b', 'c']
sum(map(lambda x: x=="b", list_))
:2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>pandas</code>, by transforming the <code>list</code> to a <code>pd.Series</code> then simply use <code>.value_counts()</code></p>
<pre><code>import pandas as pd
a = ['1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '7', '7', '7', '10', '10']
a_cnts = pd.Series(a).value_counts().to_dict()

Input  &gt;&gt; a_cnts["1"], a_cnts["10"]
Output &gt;&gt; (6, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can convert list in string with elements seperated by space and split it based on number/char to be searched..</p>
<p>Will be clean and fast for large list..</p>
<pre><code>&gt;&gt;&gt;L = [2,1,1,2,1,3]
&gt;&gt;&gt;strL = " ".join(str(x) for x in L)
&gt;&gt;&gt;strL
2 1 1 2 1 3
&gt;&gt;&gt;count=len(strL.split(" 1"))-1
&gt;&gt;&gt;count
3
</code></pre>
</div>
<span class="comment-copy">Is the list always sorted? Are you always counting the first item?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/2600191/how-to-calculate-the-occurrences-of-a-list-item-in-python">How to calculate the occurrences of a list item in Python?</a></span>
<span class="comment-copy">@JoshCaswell No the list is not sorted and I'd count any item. I wasn't sure which approach: <code>count</code> or <code>collections.Counter</code> was better optimized which is why I asked</span>
<span class="comment-copy">@prrao Depends if you want to do this multiple times or not.</span>
<span class="comment-copy">@jamylak Yes I want to do this multiple times, for multiple items.</span>
<span class="comment-copy">Which approach do you think is better optimized? I guess the better option is case dependent?</span>
<span class="comment-copy">@prrao Use <code>.count</code></span>
<span class="comment-copy">@prrao. In this case <code>count</code> is ~20x faster than creating a <code>Counter</code>, but the same <code>Counter</code> can be used to retrieve counts of multiple different value at very low extra cost. If you need to count 20 or more values from the same list <code>Counter</code> will be more efficient than running <code>.count()</code> 20 times</span>
<span class="comment-copy">I was working with data set of 1,000,000 integers  where the range of set was 100, i.e each element was repeated around 10,000 times. Using <code>Counter</code> instead of <code>.count</code> brought down my time by half. +1 for <code>Counter</code>.</span>
<span class="comment-copy">And I was working with a list of 350,000 strings (urls): using Counter took less than a second while I had time to drink a smoothie waiting for .count() to be done, so +1 again for Counter :) (Indeed I was counting every distinct url so, as said before, it's better to use Counter in this case).</span>
