<div class="post-text" itemprop="text">
<p>I have to mock a method shown below:</p>
<h3>Actual python method</h3>
<pre><code>import json
def some_method(self):
    output_one = json.loads(varone)
    output_two = json.loads(vartwo)
</code></pre>
<h3>Test Method</h3>
<pre><code>import json
self.stubs = stubout.StubOutForTesting()
self.stubs.Set(json, "loads", lambda *a: output_one)
self.stubs.Set(json, "loads", lambda *a: output_two)
</code></pre>
<p>the result is see is only the <strong>output_two</strong> as <strong>output_one</strong> is getting overwritten.
How should i mock a method twice and expect different output each time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow">side_effect</a>.</p>
<p>Example from docs:</p>
<pre><code>&gt;&gt;&gt; mock = Mock()
&gt;&gt;&gt; mock.side_effect = [3, 2, 1]
&gt;&gt;&gt; mock(), mock(), mock()
(3, 2, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to move the code into two test functions.</p>
<pre><code>def test_output_one():
    self.stubs = stubout.StubOutForTesting()
    self.stubs.Set(json, "loads", lambda *a: output_one)
    ... code for the first test here ...

def test_output_two():
    self.stubs = stubout.StubOutForTesting()
    self.stubs.Set(json, "loads", lambda *a: output_two)
    ... code for the second test here ...
</code></pre>
</div>
<span class="comment-copy">Are you calling <code>self.stubs</code> in between the <code>Set</code> with <code>output_one</code> and the <code>Set</code> with <code>output_two</code>? What are you expecting to happen here? Why don't you show us the rest of your code...</span>
<span class="comment-copy">Yes. Am calling Set for output_one and output_two. Now you should have a better picture.</span>
<span class="comment-copy">You didn't answer my question. I'm asking you if you do anything in between <code>self.stubs.Set(json, "loads", lambda *a: output_one)</code> and <code>self.stubs.Set(json, "loads", lambda *a: output_two)</code> or if that's exactly how your code is written.</span>
<span class="comment-copy">In my test case, no i dont. I just mock them. But in my actual code i do use them. How does that help you solve the issue?</span>
<span class="comment-copy">I dont want to change my python-code. Test case must handle the scenarios.</span>
