<div class="post-text" itemprop="text">
<p>I have written a Model class which wraps some RethinkDB functionality in an object. Part of it looks like:</p>
<pre><code>class Model(object):
    __metaclass__ = ModelType

    def __init__(self, **kwargs):
        self._fields = kwargs
        self._saved = False

    def save(self):
        if self._saved:
            id = self._fields.pop('id')
            result = r.table(self._tablename)
                      .get(id)
                      .update(self._fields, return_vals=True)
                      .run(self.connection())
        else:
            result = r.table(self._tablename)
                      .insert(self._fields, return_vals=True)
                      .run(self.connection())

        if result['errors'] &gt; 0:
            raise ActionError(result['first_error'])

        self._fields = result['new_val']
        self._saved = True
</code></pre>
<p>Now, I would like to test whether the <code>save()</code> method does what it is supposed to do. Since I am using a database connection for this operation, creating and removing a connection before the test is expensive and useless, since I only need to test that the correct methods on the <code>r</code> object are called. Obviously, mocking is the solution to this, but I am facing some difficulties in what and <em>how</em> should I mock the <code>r</code> object. I admit I am new to mocking concepts.</p>
<p>So, in my method that tests <code>save()</code>, how can I test whether the <code>update()</code>/<code>insert()</code> have been called with the right arguments, and also, how can I assign some return values to them?</p>
</div>
<div class="post-text" itemprop="text">
<p>so, you need to mock r:</p>
<pre><code>r = mock.Mock()
r.table = mock.Mock(return_value=r)
r.insert = mock.Mock(return_value=r)

Model.save()

r.insert.assert_called_with("args", "you're" "expecting")
</code></pre>
<p>I'm assuming you can extrapolate from there</p>
</div>
<span class="comment-copy">Do you mean to mock Model, or RethinkDB?</span>
<span class="comment-copy">I am testing the Model class and need to mock RethinkDB. I've updated the question title.</span>
<span class="comment-copy">And does it work with chained methods?</span>
<span class="comment-copy">@AndreiHorak yes, look for info <a href="https://docs.python.org/3/library/unittest.mock-examples.html#mocking-chained-calls" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">Okay. And which <code>r</code> should I mock precisely? I am thinking about <code>Model.r</code> because that's the one used in model methods, but how can I mock it in my tests file?</span>
