<div class="post-text" itemprop="text">
<p>I'm creating a game in python so here's what I got...</p>
<pre><code>def initGame():
    chip = int(input("How many chips would you like to start with? "))
    if chip&lt;=0:
       print("Please input a number greater than 0")

    return chip
def displayPiles():
    print("It is your turn human.")
    print("Here are the piles:")
    pile1= print(chip)                     #What I originally had
    pile2= print(initGame())               #What I did after 
    print("pile 1: ", str(pile1))
    print("pile 2: ", str(pile2))
</code></pre>
<p>I read another similar question that said doing "pile1= print(initGame())" will return the variable "chip" in the "initGame()" function, but when I run it it looks like this</p>
<pre><code>Welcome to the game of chips. I know you know the rules so let's go.
How many chips would you like to start with? 12
It is your turn human.
Here are the piles:
How many chips would you like to start with? 
</code></pre>
<p>When it should look something like this</p>
<pre><code>Welcome to the game of chips. I know you know the rules so let's go.
How many chips would you like to start with? 12
It is your turn human.
Here are the piles:
pile 1: 12
pile 2: 12
</code></pre>
<p>So my question is how do I get the "chip" variable to work in my other function?</p>
<p>EDIT:</p>
<pre><code> def initGame():
    chip = int(input("How many chips would you like to start with? "))
    if chip&lt;=0:
        print("Please input a number greater than 0")

    return chip
def displayPiles():
    #chip= (trying to define chip from the initGame function so that I can set it to pile1,pile2)
    pile1= initGame()
    pile2= pile1
    print("It is your turn human.")
    print("Here are the piles: ")
    print("pile 1: "+ str(pile1))
    print("pile 2: "+ str(pile2))

    return pile1, pile2
def getHumanMove():
    x=int(input("Which pile would you like to take from?(1 or 2)"))
    y=int(input("How many would you like from pile "+ str(x)+ "? "))
    #if y&gt;chip: (trying to recall chip from initGame) 
        print("pile " +str(x)+ " does not have that many chips. Try again.")
    elif y==0:
        print("You must take at least one chip. Try again.")
    else:
        print("That was a legal move. Thank You.")
    print("Here are the piles: ")
    pile1= initGame()
    pile2= initGame()
    if x == 1:
        pile1= initGame()- y
        print("pile 1: ", str(pile1))
        print("pile 2: ", str(pile2))
    elif x == 2:
        pile2= initGame()- y
        print("pile 1: ", str(pile1))
        print("pile 2: ", str(pile2))
        return pile1, pile2

def getCompMove(getHumanMove):
    print("Now it's my turn.")
    #x= (Trying to recall the x,y values from the function getHumanMove)
    #y= 
    finished = False
    while not finished:
        if x==1:
            print("I, the champion chips computer will take "+str(y)+ " chips from pile 2")
            pile2= pile2 - y
        elif x==2:
            print("I, the champion chips computer will take "+str(y)+ " chips from pile 1")
            pile1= pile1 - y
        if pile1==0 and pile2==0:
            finished= True
            print("The game is over because I took the last chip.")
            print("Thanks for playing. Let's wager next time.")        
    return pile1,pile2


#######################################################################
#Main

print("Welcome to the game of chips. I know you know the rules so let's go.")

#chips= initGame()

piles = displayPiles()

move= getHumanMove()

comp= getCompMove()

print(move)    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The return from a print is None you need to store the value and print it seperately, i.e.:</p>
<p>Instead of:</p>
<pre><code>pile2= print(initGame()) 
</code></pre>
<p>Try:</p>
<pre><code>pile2 = initGame()
print(pile2)  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're using a print statement with a nested call to initGame() function and you're assuming that the print() will return something to the variables pile1 and pile2.</p>
<p>Try this:</p>
<pre><code>def initGame():
    chip = int(input("How many chips would you like to start with? "))
    if chip&lt;=0:
       print("Please input a number greater than 0")

    return chip

def displayPiles():
    print("It is your turn human.")
    print("Here are the piles:")
    pile2 = initGame()                  # Changed here
    print("pile 2: ", str(pile2))
</code></pre>
<p>Edit #1 (in reply to comments):</p>
<p>In order to test this portion of code (only), create a new .py file and put the following into it:</p>
<pre><code>#!/usr/bin/python

def initGame():
    chip = int(input("How many chips would you like to start with? "))
    if chip&lt;=0:
       print("Please input a number greater than 0")

    return chip

def displayPiles():
    print("It is your turn human.")
    print("Here are the piles:")
    pile2 = initGame()                  # Changed here
    print "pile 2:", str(pile2)

displayPiles()
</code></pre>
<p>Does this behave as expected?</p>
<p>Edit #2 (in reply to new comments):</p>
<pre><code>def initGame():
    chip = int(input("How many chips would you like to start with? "))
    if chip&lt;=0:
        print("Please input a number greater than 0")

    return chip
def displayPiles():
    print("It is your turn human.")
    print("Here are the piles: ")
    pile1= initGame()
    pile2= initGame()
    print("pile 1: " + str(pile1))       # Changed here
    print("pile 2: " + str(pile2))       # Changed here

    return pile1, pile2

def getHumanMove():
    x=int(input("Which pile would you like to take from?(1 or 2)"))
    y=int(input("How many would you like from pile " + str(x) + "? "))   # Changed here

    return x,y


#######################################################################
#Main

print("Welcome to the game of chips. I know you know the rules so let's go.")

#chips= initGame()            # Commented this

piles = displayPiles()

move= getHumanMove()

print move                    # Added this
</code></pre>
<p>You should not call the initGame() function (the one that i've commented), as it's already called inside displayPiles(). You should also rename it to initPile().</p>
</div>
<span class="comment-copy">You should probably use a <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer"><b>class</b></a>.</span>
<span class="comment-copy">Still seems like it's doing the same thing</span>
<span class="comment-copy">That's weird. I suspected that the next question would be why the print statement isn't working as expected (since you're passing a tuple to it)... but the same behavior after that change is something that I wouldn't expect. Are you sure you've exactly what I've post? Are you calling displayPiles() directly? Do you have any other code that can be causing any other kind of trouble?</span>
<span class="comment-copy">It works with 1 pile but when I do two piles, it doesn't return anything. @threadp</span>
<span class="comment-copy">Can you provide an example of your current code with two piles?</span>
<span class="comment-copy">I'll edit it on the original post @threadp</span>
