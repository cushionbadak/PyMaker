<div class="post-text" itemprop="text">
<p>I'm getting a NameError in the __del__ function of a class. I do not understand why 'open' is not accessible inside the function __del__. I am using Python 3.4.0</p>
<p>Python Code:</p>
<pre><code>class Contoller:

    ...

    def __del__(self):
        store = {}
        ...
        pickle.dump(store, open('data.p', 'wb'))    

class MyWindow(Gtk.Window):

    def __init__(self):
        ...
        self.controller = Contoller(self)
        ...
        self.connect("delete-event", self.quit)
        ...

    ...

    def quit(self, widget, event):
        del self.controller
        Gtk.main_quit()
</code></pre>
<p>Error Message:</p>
<pre><code>Traceback (most recent call last):
  File "main.py", line 69, in __del__
NameError: name 'open' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>user3595184</code>'s code used to work until Python 3.4. I know because I've just run into the same issue, calling <code>open()</code> within <code>__del__</code>.  Apparently built-in functions no longer work, because of a change in when <code>__del__</code> is run as the interpreter shuts down.</p>
<p><strong>UPDATE:</strong>
See <a href="https://docs.python.org/3/library/weakref.html" rel="noreferrer">https://docs.python.org/3/library/weakref.html</a>, especially the section on finalizers.  I have several classes that encapsulate access to resources that had <code>__del__()</code> methods to unlock or clean up as soon as the application would exit, for any reason.  Catching all exceptions or exits at the application level and explicitly calling cleanup methods is inconvenient and bug-prone.  I'll try using a local <code>finalizer</code> instead.</p>
<p><strong>UPDATE:</strong>
I'm having better luck with <code>__enter__()</code> and <code>__exit__()</code>, putting the top-level object in a <code>with</code> clause.  It appears at least the <code>__exit__()</code> gets called no matter how, so I can call the cleanup methods (<code>__exit__()</code>'s themselves) of all subordinate objects.  That's working for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is generally not a good idea to rely on <code>__del__</code> for anything in Python.</p>
<p>Better use a normal method and call it, <code>self.controller.store()</code> or whatever name you find best.</p>
<p>Related discussion is for example in <a href="https://stackoverflow.com/questions/6104535/i-dont-understand-this-python-del-behaviour">I don't understand this python __del__ behaviour</a></p>
<p>UPDATE: atexit.register may be what you want, <a href="https://docs.python.org/2/library/atexit.html" rel="nofollow noreferrer">https://docs.python.org/2/library/atexit.html</a> . As featured in this nice article at "Common Mistake #10: Misusing the <code>__del__</code> method" <a href="http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make" rel="nofollow noreferrer">http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make</a></p>
<p>As for the explanation, this discussion tells: "At interpreter shutdown, the module's global variables are set to None before the module itself is released." -- perhaps that applies to builtins too, <a href="http://bugs.python.org/issue5099" rel="nofollow noreferrer">http://bugs.python.org/issue5099</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think it just a scope problem. </p>
<pre><code>self.controller = Contoller(self)
</code></pre>
<p>I don't know why you should pass MyWindow class as argument when initiating Controller class. Try to change it to:</p>
<pre><code>self.controller = Contoller()
</code></pre>
</div>
<span class="comment-copy"><code>weakref.finalize()</code> behaves like <code>atexit.register()</code>: good at exiting an application, but <code>mod_wsgi</code> doesn't call either when it finishes serving a URI.  I might look into gc.collect(), but for now I'm having to trap all exit paths from my application and explicitly call cleanup code.  Yuck.</span>
<span class="comment-copy">Of course this will work as a workaround. This however does not explain the behavior. Besides that calling a function directly does also cause multiple execution if multiple instances exist.</span>
<span class="comment-copy">True, it does not explain the behaviour. However it is not a workaround but more like a bugfix -- AFAIK you really should not rely on <code>__del__</code> being called.</span>
<span class="comment-copy">That said I have also a guess for the reason. <code>__del__</code> is not called when you say <code>del</code> (which just removes your reference to the object) but upon garbage collection (or however the py impl at hand works). As you quit the whole application on the next line after <code>del</code> I bet the python interpreter then starts shutdown too etc. and I suppose removes builtins like <code>open</code> before it gets to clear your object too.</span>
<span class="comment-copy">That is not the solution.</span>
