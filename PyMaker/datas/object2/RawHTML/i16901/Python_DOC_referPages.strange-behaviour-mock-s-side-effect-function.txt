<div class="post-text" itemprop="text">
<p>I have this piece of code:</p>
<pre><code>import postie

def send_mail(self, outbox):
    try:
        postie.postmail(self.dbname, outbox)
    except postie.EmailDeliveryException:
        self.logger.error('Fail to send mail’)
        return False
    return True
</code></pre>
<p>And I want to test the case a postie.EmailDeliveryException is raised.
So I mock out postie.postmail and put the exception as aside effect of its call:</p>
<pre><code>import postie

@patch('postie.postmail')
def test_send_mail_False(self, postie_stub):
    ''' Mail send failed '''
    postie_stub.return_value = None
    postie_stub.side_effect = postie.EmailDeliveryException
    op = OutboxProcessor('db name', None, None)
    self.assertFalse(op.send_mail(Outbox()))
</code></pre>
<p>The above results in:</p>
<pre><code>test_send_mail_False (test_outbox_processor.OutboxProcessorTestCase)
Mail send failed ... No handlers could be found for logger "outbox"
ok
</code></pre>
<p>Now I want to mock out the logger and check that the error function is also called in case of ‘EmailDeliveryException’. So I go:</p>
<pre><code>@patch('postie.postmail')
@patch.object(Logger, 'error')
def test_send_mail_False(self, postie_stub, logger_stub):
    ''' Mail sending failed '''
    postie_stub.return_value = None
    postie_stub.side_effect = postie.EmailDeliveryException
    logger_stub.return_value = None

    op = OutboxProcessor('db name', None, None)
    self.assertFalse(op.send_mail(Outbox(), None))
    logger_stub.assert_called()
</code></pre>
<p>The result will be:</p>
<pre><code>FAIL: test_send_mail_False (test_outbox_processor.OutboxProcessorTestCase)
Mail sending failed
AssertionError: True is not false
</code></pre>
<p>So it looks like the assertFalse does no longer succeed, (probably the exception is no longer raised). Anyone has any idea if anything interferes with my side_effect here? Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have incorrect order of patch decorators (or stub arguments). Here's an explanation from <a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow">mock docs</a>:</p>
<blockquote>
<p>When you nest patch decorators the mocks are passed in to the
  decorated function in the same order they applied (the normal python
  order that decorators are applied). This means from the bottom up...</p>
</blockquote>
<p>So it should be:</p>
<pre><code>@patch.object(Logger, 'error')
@patch('postie.postmail')
def test_send_mail_False(self, postie_stub, logger_stub):
    ''' Mail sending failed '''
</code></pre>
</div>
<span class="comment-copy">Jesus! I missed this one! Thanks a ton!</span>
