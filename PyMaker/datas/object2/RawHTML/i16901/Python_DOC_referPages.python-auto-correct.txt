<div class="post-text" itemprop="text">
<p>I have two files check.txt and orig.txt. I want to check every word in check.txt and see if it matches with any word in orig.txt. If it does match then the code should replace that word with its first match otherwise it should leave the word as it is. But somehow its not working as required. Kindly help.</p>
<p><strong>check.txt looks like this:</strong></p>
<pre><code>ukrain

troop

force
</code></pre>
<p><strong>and orig.txt looks like:</strong></p>
<pre><code>ukraine cnn should stop pretending &amp;amp; announce: we will not report news while it reflects bad on obama @bostonglobe @crowleycnn @hardball

rt @cbcnews: breaking: .@vice journalist @simonostrovsky, held in #ukraine now free and safe http://t.co/sgxbedktlu http://t.co/jduzlg6jou

russia 'outraged' at deadly shootout in east #ukraine -  moscow:... http://t.co/nqim7uk7zg
 #groundtroops #russianpresidentvladimirputin
</code></pre>
<p><a href="http://pastebin.com/XJeDhY3G" rel="nofollow">http://pastebin.com/XJeDhY3G</a></p>
<pre><code>f = open('check.txt','r')
orig = open('orig.txt','r')
new = open('newfile.txt','w')

for word in f:
    for line in orig:
        for word2 in line.split(" "):
            word2 = word2.lower()            
            if word in word2:
                word = word2
            else:
                print('not found')
        new.write(word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two problems with your code: </p>
<ol>
<li>when you loop over the words in <code>f</code>, each word will still have a new line character, so your <code>in</code> check does not work </li>
<li>you want to iterate <code>orig</code> for each of the words from <code>f</code>, but files are iterators, being exhausted after the first word from <code>f</code></li>
</ol>
<p>You can fix those by doing  <code>word = word.strip()</code> and <code>orig = list(orig)</code>, or you can try something like this:</p>
<pre><code># get all stemmed words
stemmed = [line.strip() for line in f]
# set of lowercased original words
original = set(word.lower() for line in orig for word in line.split())
# map stemmed words to unstemmed words
unstemmed = {word: None for word in stemmed}
# find original words for word stems in map
for stem in unstemmed:
    for word in original:
        if stem in word:
            unstemmed[stem] = word
print unstemmed
</code></pre>
<p>Or shorter (without that final double loop), using <a href="https://docs.python.org/3/library/difflib.html" rel="nofollow noreferrer"><code>difflib</code></a>, as suggested in the comments:</p>
<pre><code>unstemmed = {word: difflib.get_close_matches(word, original, 1) for word in stemmed}
</code></pre>
<p>Also, remember to <code>close</code> your files, or use the <a href="https://stackoverflow.com/questions/1369526/what-is-the-python-keyword-with-used-for"><code>with</code></a> keyword to close them automatically.</p>
</div>
<span class="comment-copy"><i>"If it does match then the code should replace that word with its first match otherwise it should leave the word as it is"</i> what should be replaced? in original file or in check file?</span>
<span class="comment-copy">Note if you opens a file in read more using 'r' then can't write in that file.</span>
<span class="comment-copy"><code>for word in f: for line in orig</code> If the second loop loops over lines, then what would the first loop loop over?</span>
<span class="comment-copy">It would help if you provided some example inputs and expected outputs. Now we're just guessing.</span>
<span class="comment-copy">check this might be useful <a href="https://docs.python.org/2/library/difflib.html#difflib.get_close_matches" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">thank u... it works as required :)</span>
