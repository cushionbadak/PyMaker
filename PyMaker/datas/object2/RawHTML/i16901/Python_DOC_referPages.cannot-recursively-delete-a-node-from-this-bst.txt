<div class="post-text" itemprop="text">
<p>New to Python. Tried implementing a BST. It works, except for the fact that I can't seem to delete nodes from it recursively:</p>
<pre><code># in class BST
def destroy(self):
    if self.left:
        self.left.destroy()
    if self.right:
        self.right.destroy()
    self = None

# in main
root = BST(60)
root.insert(40) # inserts 40 at 60's left
root.insert(50) # inserts 50 at 40's right

print root.right # prints None because nothing's there
print root.left.right # prints 50 
root.left.destroy() # is supposed to remove 40 and 50 from the tree
print root.left.right # prints 50, even though it should be None now...
</code></pre>
<p>The problem must be with the <code>destroy()</code> method, but I can't see what the problem could be.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python you don't need to explicitly manage memory; <a href="https://stackoverflow.com/questions/293431/python-object-deleting-itself">here is a link to another SO question</a> with the same main gist. From <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">the Python docs</a>:</p>
<blockquote>
<p>Objects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. An implementation is allowed to postpone garbage collection or omit it altogether â€” it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable.</p>
</blockquote>
<p>To get your code working -- you don't need to recursively destroy. In Python can do:</p>
<pre><code># in main
print root.right # prints None because nothing's there
print root.left.right # prints 50 
root.left = None
print root.left.right # AttributeError:'NoneType' object has no attribute 'right'
</code></pre>
</div>
<span class="comment-copy">This code wouldn't work in any programming language I know of. You'll have to update the links of the parent (depending how you want to handle the children of a node), but setting self to none I'd a nop.</span>
<span class="comment-copy">Actually, I did something similar in C++ and it worked: <code>void destroy() {if (left != NULL) left-&gt;destroy(); if (right != NULL) right-&gt;destroy(); delete this;}</code></span>
<span class="comment-copy">Which would just cause the parent of the node to point to a deleted node (<code>delete this</code> is legal, but almost never a good idea - also easy to introduce bugs) which will best case cause an exception when iterating later or just return garbage when iterating.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/293431/python-object-deleting-itself">Python object deleting itself</a></span>
