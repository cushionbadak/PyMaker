<div class="post-text" itemprop="text">
<p>How are array types (lists and tuples) and for loops related in Python?</p>
<p>A. The for statement expects an array type as part of the syntax<br/>
B. For loops define an index that is used to iterate through the array elements<br/>
C. For loops always use the range() function<br/>
D. Array types and for loops are not related in Python</p>
<p>Which one is it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The main Idea of a For loop is to have a variable that you update after each iteration. That is very useful when you work with arrays, so this would be the relation you are looking for. However, keep in mind that it is not the only usage of For loops. They are not limited to arrays.</p>
</div>
<div class="post-text" itemprop="text">
<p>Read Python's <a href="https://docs.python.org/2/tutorial/controlflow.html" rel="nofollow">documentation</a>.</p>
<blockquote>
<p>Pythonâ€™s for statement iterates over the items of any sequence (a list
  or a string), in the order that they appear in the sequence.</p>
</blockquote>
<p><strike>Notice that it says "of any sequence". This is just another way of saying "array type".</strike></p>
<p><code>A. The for statement expects an array type as part of the syntax</code> </p></div>
<div class="post-text" itemprop="text">
<p>A for loop can iterate over anything with a next (<code>.__next__</code>) method. Lists and tuples are just two examples of data types with this next method. Thus, they work perfectly in conjunction with a for loop, but one could imagine another datatype (say, a tree) that could be iterated over with a for loop or a non-for-loop function that iterates over a list or a tuple. Therefore, I think that your closest answer is 'D' -- i.e. they are not strongly related, but clearly the language was designed so that they work well together.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no difference on how you go about looping Lists, tuples, dictionarys (iterate key to get values), etc, they all have indexes just like arrays.</p>
<pre><code>#------------------------------------------------
lst = [1,2,3,4,5,6,7,8,9,] 
for item in lst:
    print(item)
#-------------------------------------------------
tup = (1,2,3,4,5,6,7,8,9,)
for item in tup:
    print(item)
#--------------------------------------------------
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/16345307/how-are-array-types-lists-and-tuples-and-for-loops-related-in-python">How are array types (lists and tuples) and for loops related in Python?</a></span>
<span class="comment-copy">For loops don't always use the range function, nor do they require an array. For example range() doesn't return an array, it returns a range.</span>
<span class="comment-copy">Please read <a href="http://stackoverflow.com/users/14343/ned-batchelder">Ned Batchelder's</a> <a href="http://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">Loop Like a Native</a></span>
<span class="comment-copy">Well, not quite.  It is true that the <code>for</code> statement iterates over list and string items in the order that they appear in the sequence.  However, it's not true that the <code>for</code> statement expects an array type: you can <code>for</code>-loop over things which aren't sequences.  (Assuming we accept the odd definition of "array type" to mean "sequence".)</span>
<span class="comment-copy">@DSM What's an example of a for loop not accepting an array type? Using an iterator or something? Regardless, it seems 'A' would be the correct answer. I mean, 'D' is the only other option and would you really say that array types and for loops are not related? I don't know, I read 'array type' very loosely as 'something that can be iterated over' considering this is probably a question for an introductory course and disambiguating the two would probably be way over his head.</span>
<span class="comment-copy">Iterating over a set, for example: it's not a sequence.  But yes, <code>for x in (3*i for i in range(10)):</code> would also qualify as something which can't be viewed as an "array type".</span>
<span class="comment-copy">Ah, yes, you're definitely right then. Thanks for the explanation. I still think the alternative answer is confusing, though. :P</span>
<span class="comment-copy">You mean <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer"><code>__iter__</code></a>, which returns an iterator that has a <code>__next__</code> method to get the next item. An iterator also has an <code>__iter__</code> method that simply returns <code>self</code>. Some types such as the <code>io</code> file types are also iterators, but typically <code>__iter__</code> returns a single-pass iterator (use once and throw it away) such as a <code>list_iterator</code> or <code>tuple_iterator</code>.</span>
