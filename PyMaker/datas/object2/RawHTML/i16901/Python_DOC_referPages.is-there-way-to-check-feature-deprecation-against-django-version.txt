<div class="post-text" itemprop="text">
<p>As some features get deprecated with new versions of Django, is there a way to check for that on an existing project code say on github.</p>
<p>Could a tool do that. Is there a way to detect that through testcases.</p>
<p>Would it be possible to do the same against a python version.</p>
<p>I guess one way could be to run through a specific version of django / python using tox and then check for errors.</p>
<p>I am just looking for something more elegant or direct, something like which says - <strong><em>"Note this feature has been deprecated"</em></strong>, something which can be done in strongly typed language like Java.</p>
<p>If one wanted to build such a tool, what could be starting point for that, if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how I got tox to run one project of mine against Django 1.6, 1.7 and 1.8 with deprecation warnings on:</p>
<pre><code>[tox]
envlist = {py27,py34}-{django16,django17,django18}

[testenv]
basepython =
           py27: python2.7
           py34: python3.4

deps =
     django16: Django&gt;=1.6,&lt;1.7
     django17: Django&gt;=1.7,&lt;1.8
     django18: Django&gt;=1.8,&lt;1.9

commands =
         python -Wmodule ./manage.py test
</code></pre>
<p>The <code>-Wmodule</code> argument causes Python to output each deprecation warning the first time it occurs in a module, which was good enough for me. I was able to deal with instances where I used <code>from django.core.cache import get_cache</code>, which will be gone in Django 1.9.</p>
<p>In cases where <code>-Wmodule</code> outputs too much, you might want to be more selective. Python's documentation gives the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-W" rel="nofollow">lowdown on how to use this argument</a>. I've <em>purposely</em> not used <code>-Werror</code> because this would not just make the individual tests fail but would make my test suite fail to execute <em>any</em> test because the suite uses deprecated features.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this would have to be in the unit tests for your project.</p>
<p>If your tests exercise code that will be deprecated in a future version of Django you will get <a href="https://docs.python.org/2/library/warnings.html" rel="nofollow noreferrer">warnings</a>. If you've jumped to a version of Django where the feature is already deprecated you'll get exceptions and failed tests of course.</p>
<p>You can <a href="https://docs.python.org/2/using/cmdline.html#cmdoption-W" rel="nofollow noreferrer">tell the Python interpreter</a> to promote warnings to exceptions, which would cause tests to fail.</p>
<p>Instructions <a href="https://stackoverflow.com/a/20998338/202168">here</a> to apply the same trick to the popular <a href="https://nose.readthedocs.org/en/latest/" rel="nofollow noreferrer">nosetests</a> test framework.</p>
<p>If you know already (from Django docs) that some code you're writing will need to change depending on Django version it is run under (eg you're distributing a reusable Django app) I would suggest a form of <a href="http://learn.jquery.com/code-organization/feature-browser-detection/#specific-feature-detection" rel="nofollow noreferrer">feature detection</a> using <code>try ... except</code></p>
<p>For example, here I wanted to conditionally use the <a href="https://github.com/anentropic/django-exclusivebooleanfield/blob/0.1.2/exclusivebooleanfield/fields.py#L5" rel="nofollow noreferrer">new <code>transaction.atomic</code> feature</a> from Django &gt;= 1.6: .</p>
<p>As you anticipated, I then run the tests against different versions of Django with the <a href="https://github.com/anentropic/django-exclusivebooleanfield/blob/0.1.2/tox.ini" rel="nofollow noreferrer">help of Tox</a>.</p>
</div>
<span class="comment-copy">Great question, I too miss the code inspection available in Java IDEs. Also, having warnings for missed exceptions / errors to catch is very helpful, rather than trying to find them manually or waiting til they show up in production.</span>
