<div class="post-text" itemprop="text">
<p>I have something like this, hardcoded:</p>
<pre><code>class csv_row:
  def __init__(self, name, time, more_stuff):
    self.name = name
    self.time = time
    self.more_stuff = more_stuff
</code></pre>
<p>this class is the representation of a csv row. What I want to do is make this more generic, and grab the head of the csv file and use it to initialize it in the same way as this list. Something like so:</p>
<pre><code>class csv_row:
  def __init__(self, list_of_attrs):
    for column in list_of_attrs:
      # initialize a self.variable with the same name as the column 
</code></pre>
<p>for example, the header for a csv is <code>[name, time, something]</code>. The <code>__init__</code>, when passed that, will initialize with:</p>
<pre><code>self.name = name
self.time = time
self.something = something
</code></pre>
<p>How can this be done?</p>
</div>
<div class="post-text" itemprop="text">
<p>There already exist several facilities for dealing with something like this. There is no need to reinvent the wheel:</p>
<h2><a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code></a></h2>
<pre><code>from collections import namedtuple
headers = ["one", "two", "three"]

CustomRow = namedtuple("CustomRow", headers)

a_row = CustomRow(1, 2, 3)
a_row.one == 1 # True
a_row.two == 2 # True
a_row.three == 3 # True
</code></pre>
<h2><a href="https://docs.python.org/2/library/csv.html#csv.DictWriter" rel="nofollow"><code>csv.DictWriter</code></a> and <a href="https://docs.python.org/2/library/csv.html#csv.DictReader" rel="nofollow"><code>csv.DictReader</code></a></h2>
<pre><code>import csv

with open("my_file.csv", "rb") as f:
    reader = csv.DictReader(f, ["one", "two", "three"])
    for line in reader:
        print line["one"] # prints the 1st column
        print line["two"] # etc.
        print line["three"] # etc., etc.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an idea: use the keywords:</p>
<pre><code>class csv_row:
    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)


c = csv_row(id=501, alias="john", shell="bash")
print c.id    # 501
print c.alias # john
print c.shell # bash
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python allows dynamic manipulation of class instance using <a href="https://docs.python.org/2/library/stdtypes.html#special-attributes" rel="nofollow noreferrer"><strong>dict</strong></a> magic field.</p>
<pre><code>def __init__(self, list_of_attrs):
    for column in list_of_attrs:
       self.__dict__[column] = None
</code></pre>
<p>Also, you might want to provide actual values, e.g.:</p>
<pre><code>def __init__(self, **kwargs):
    for name, value in kwargs.items():
       self.__dict__[name] = value
</code></pre>
<p>Pythonic way would be to use <a href="https://stackoverflow.com/questions/3394835/args-and-kwargs"><code>kwargs</code></a>, which stands for KeyWord ARGumentS. <code>kwargs</code> is just a convention, actual meaning is given by **, so you can name it as you wish.</p>
</div>
<div class="post-text" itemprop="text">
<p>I realize that it's not exactly what you're asking for in the original comment, but have you thought of using csv.DictReader/csv.DictWriter [1]/[2]? This combined with the other answers might help when creating a clean, robust solution.</p>
<ol>
<li><a href="https://docs.python.org/2/library/csv.html" rel="nofollow">https://docs.python.org/2/library/csv.html</a></li>
<li><a href="https://docs.python.org/3/library/csv.html" rel="nofollow">https://docs.python.org/3/library/csv.html</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><em>Not exactly what you're asking, but just in case anybody finds this helpful.</em></p>
<p>If you know the attributes in advance, and simply want to avoid the duplication in the assignment to <code>self</code>, you can define the argument list once in the <code>__init__</code> signature, as usual, and then iterate over <code>locals()</code> and assign to <code>__dict__</code>:</p>
<pre><code>class csv_row(object):
  def __init__(self, name, time, more_stuff):
    for k,v in locals().items():
      if k != 'self':
         self.__dict__[k] = v
</code></pre>
</div>
<span class="comment-copy">Looking at the bigger picture, if you are reading CSV from a file, csv.DictReader can help in that regard.</span>
<span class="comment-copy">alas, I need to set the <code>__eq__</code> and <code>__hash__</code> functions. Is this possible with namedtuples?</span>
<span class="comment-copy">@Crow: If you want those methods to work based on attribute equality, that's already how it works. If not, you can subclass the class created by <code>namedtuple</code> to add the methods. Note that the default <code>__eq__</code> will make these objects compare equal with ordinary tuples with the same items.</span>
<span class="comment-copy">alas, it is important it must stay in order.</span>
<span class="comment-copy">No, the keywords can be anything (except for Python's keywords such as <code>class</code>), in any order.</span>
