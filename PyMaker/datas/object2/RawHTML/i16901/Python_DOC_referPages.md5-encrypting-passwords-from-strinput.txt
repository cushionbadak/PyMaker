<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7585307/how-to-correct-typeerror-unicode-objects-must-be-encoded-before-hashing">How to correct TypeError: Unicode-objects must be encoded before hashing?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>im trying to hash a password from a file and then match it with the password given by the user. it's not ment to be super safe just safe enought so that the password isn't plain text in the file.
I get the error </p>
<pre><code>TypeError: Unicode-objects must be encoded before hashing
</code></pre>
<p>it works if i type hashpass = hashlib.md5(b'p').hexdigest()
but then it only encrypts "p"</p>
<p>How do i get it to encrypt my string inputs?</p>
<p>PROGRAM</p>
<pre><code>import hashlib

status = ""

def passhash():    
    code = open("password.txt", "r")
    password = code.readline()                
    global encrypt
    encrypt = hashlib.md5(password).hexdigest()

def checkPassword():
    for key in range(3):        
        p = input("Enter the password &gt;&gt;")      
        hashpass = hashlib.md5(p).hexdigest()

        if hashpass == encrypt:            
            print("password correct!")
            status = "q"
            return status
        else:
            print ('wrong password, try again')
    print ('you have failed')

def Main():
    status = input("p for program, q to quit: ")
    if status == "p":
        passhash()
        checkPassword()
    elif status == "q":
        print("Byebye")
        status = "q"
        return status

while status != "q":            
    status = Main()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Encode your Unicode string before hashing and/or open the file in binary mode. Pick an encoding and stick to it; UTF-8 supports all of Unicode:</p>
<pre><code>p = input("Enter the password &gt;&gt;")      
hashpass = hashlib.md5(p.encode('utf8')).hexdigest()
</code></pre>
<p>You either have to do the same in <code>passhash()</code> or open the file in binary mode and assume that the file uses the same encoding.</p>
</div>
<div class="post-text" itemprop="text">
<p>The expression <code>b'p'</code> encodes the string literal <code>'p'</code> as bytes, not the value of the <code>p</code> variable.  Try <code>p.encode('utf-8')</code>. </p>
<p>By the way, what you're doing is pointless. Since you're storing plaintext and collecting plaintext input from the user, hashing the two before comparing them doesn't add any security.</p>
<p>The right way to approach this is to store the password hash (never storing the plaintext) and hashing the input for comparison. Better yet to hash the password with a random salt; store the salt and hashed password; and hash the input with the salt for comparison. </p>
</div>
<span class="comment-copy">Well, did you do as the error message suggests and try <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow noreferrer">encoding <code>password</code></a>?</span>
<span class="comment-copy">You don't want to use md5 for any password hashing, it is not designed for it. Instead you want to look into <a href="https://pypi.python.org/pypi/passlib" rel="nofollow noreferrer"><code>passlib</code> module</a>, or use the <a href="https://docs.python.org/2/library/crypt.html" rel="nofollow noreferrer"><code>crypt</code> module</a> on unix platforms. They are not any more complicated to use than your naive approach.</span>
<span class="comment-copy">Thanks man, this was exactly what i was looking for</span>
<span class="comment-copy">yeah i agree, now when my program recives a password its going to hash it and then only handle passwords in their hashed form</span>
<span class="comment-copy">That's the responsible approach, good for you</span>
