<div class="post-text" itemprop="text">
<p>I have a dictionary of characters and their position on a page keyed by their y position (so all characters in a row are under a single key in the dictionary). The data comes from a table from a pdf and I am trying to combine the characters in rows into words based on spacing so that columns are separated as values. So this:</p>
<pre><code>380.822: [[u'1', [61.2, 380.822, 65.622, 391.736]],
[u' ', [65.622, 380.822, 67.834, 391.736]],
[u'p', [81.738, 380.822, 83.503, 391.736]],
[u'i', [84.911, 380.822, 89.333, 391.736]],
[u'e', [90.741, 380.822, 95.163, 391.736]],
[u'c', [96.571, 380.822, 100.548, 391.736]],
[u'e', [100.548, 380.822, 104.97, 391.736]],
[u' ', [104.97, 380.822, 107.181, 391.736]],
[u'8', [122.81, 380.822, 127.232, 391.736]],
[u'9', [127.723, 380.822, 132.146, 391.736]],
[u'0', [132.636, 380.822, 137.059, 391.736]],
[u'1', [137.55, 380.822, 141.972, 391.736]],
[u'S', [142.463, 380.822, 146.885, 391.736]],
[u'Y', [147.376, 380.822, 152.681, 391.736]],
[u'R', [153.172, 380.822, 157.595, 391.736]],
[u'8', [157.595, 380.822, 162.017, 391.736]]]
</code></pre>
<p>would become this:</p>
<pre><code>380.822: [[u'1 ', [61.2, 380.822, 67.834, 391.736]],
[u'piece ', [81.738, 380.822, 107.181, 391.736]],
[u'8901SYR8', [122.81, 380.822, 162.017, 391.736]]]
</code></pre>
<p>I thought I could iterate through the values for each key and merge the text and coordinates if the space was less than some value and then delete the value that got merged, but this would throw off the iteration. All the possibilities I come up with are really clunky, such as marking the leftovers from merges with a character to indicate deletion later but my function started merging these as well.</p>
<p>Thanks</p>
<p>@Lattyware, thanks again for your help. I tried implementing your suggestions and they are mostly working, but I think I am not fully grasping the idea of the groupby. Specifically why in your example it did not do a merge without a group change, but it does with my modifications (such as the merge after the 8 in the 8901SYR8)? The result in my code is that some of my lines split the first letter of the string from the rest:</p>
<pre><code>{380.822: [
  (u'1 ', [61.2, 380.822, 65.622, 391.736]),
  (u'p', [81.738, 380.822, 83.503, 391.736]),
  (u'iece ', [84.911, 380.822, 89.333, 391.736]),
  (u'8', [122.81, 380.822, 127.232, 391.736]),
  (u'901SYR8 ', [127.723, 380.822, 132.146, 391.736]),
  (u'M', [172.239, 380.822, 178.864, 391.736]),
  (u'ultipurpose Aluminum (Alloy 6061) .125" Thick Sheet, 12"'...]}
</code></pre>
<p>The adaptations I made are:</p>
<pre><code>xtol=7

def xDist(rCur,rPrv):
    if rPrv == None: output=False
    else: return not rCur[1][0]-rPrv[1][2] &lt; xtol

def split(row):
    ret = xDist(row, split.previous)
    print "split",ret,row,split.previous
    split.previous = row
    return ret
split.previous = None

def merge(group):
    letters, position_groups = zip(*group)
    return "".join(letters), next(iter(position_groups))

def group(value):
    return [merge(group) for isspace, group in
            itertools.groupby(value, key=split)]

print({key: group(value) for key, value in old.items()})
</code></pre>
<p>and the print output is:</p>
<pre><code>...
split False [u'9', [127.723, 380.822, 132.146, 391.736]] [u'8', [122.81, 380.822, 127.232, 391.736]]
merge (u'8',) ([122.81, 380.822, 127.232, 391.736],)
split False [u'0', [132.636, 380.822, 137.059, 391.736]] [u'9', [127.723, 380.822, 132.146, 391.736]]
split False [u'1', [137.55, 380.822, 141.972, 391.736]] [u'0', [132.636, 380.822, 137.059, 391.736]]
split False [u'5', [142.463, 380.822, 146.885, 391.736]] [u'1', [137.55, 380.822, 141.972, 391.736]]
split False [u'K', [147.376, 380.822, 152.681, 391.736]] [u'5', [142.463, 380.822, 146.885, 391.736]]
split False [u'2', [153.172, 380.822, 157.595, 391.736]] [u'K', [147.376, 380.822, 152.681, 391.736]]    
split False [u'8', [157.595, 380.822, 162.017, 391.736]] [u'2', [153.172, 380.822, 157.595, 391.736]]
split False [u' ', [162.017, 380.822, 164.228, 391.736]] [u'8', [157.595, 380.822, 162.017, 391.736]]
split True [u'M', [172.239, 380.822, 178.864, 391.736]] [u' ', [162.017, 380.822, 164.228, 391.736]]
merge (u'9', u'0', u'1', u'S', u'Y', u'R', u'8', u' ') ([127.723, 380.822, 132.146, 391.736], [132.636, 380.822, 137.059, 391.736], [137.55, 380.822, 141.972, 391.736], [142.463, 380.822, 146.885, 391.736], [147.376, 380.822, 152.681, 391.736], [153.172, 380.822, 157.595, 391.736], [157.595, 380.822, 162.017, 391.736], [162.017, 380.822, 164.228, 391.736])
split False [u'u', [179.292, 380.822, 183.714, 391.736]] [u'M', [172.239, 380.822, 178.864, 391.736]]
merge (u'M',) ([172.239, 380.822, 178.864, 391.736],)
split False [u'l', [184.142, 380.822, 185.908, 391.736]] [u'u', [179.292, 380.822, 183.714, 391.736]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The trick is to build up a new dictionary (and inner lists), rather than trying to modify the old one. <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow">The <code>itertools</code> module</a> provides what you need:</p>
<pre><code>new = {}
for key, value in old.items():
    values = []
    for isspace, group in itertools.groupby(value, key=lambda x: x[0] == " "):
        if not isspace:
            letters, coords = zip(*group)
            values.append(("".join(letters), next(iter(coords))))
    new[key] = values
</code></pre>
<p>Here I am just taking the first of the co-ordinates, but of course you could merge those values however you wanted.</p>
<p>Edit: Split into functions for readability, using <a href="https://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">list/dict comprehensions</a>:</p>
<pre><code>def split(row):
    character, positions = row
    return character == " "

def merge(group):
    letters, position_groups = zip(*group)
    return "".join(letters), next(iter(position_groups))

def group(value):
    return [merge(group) for isspace, group in
            itertools.groupby(value, key=split) if not isspace]

print({key: group(value) for key, value in old.items()})
</code></pre>
<p>Giving:</p>
<pre><code>{380.822: [
    ('1', [61.2, 380.822, 65.622, 391.736]), 
    ('piece', [81.738, 380.822, 83.503, 391.736]), 
    ('8901SYR8', [122.81, 380.822, 127.232, 391.736])
]}
</code></pre>
<p>Edit:</p>
<p>You mention in your comment using the previous value to compute the grouping - this can be done in many ways, but one of the lightest-weight ways is function attributes e.g:</p>
<pre><code>def split(row):
    ret = some_computation(row, split.previous)
    split.previous = row
    return ret
split.previous = None
</code></pre>
<p>And note, of course, that you may not want to do the <code>if not isspace</code> in my example.</p>
</div>
<span class="comment-copy">What you call <code>dictionary</code> is <code>list</code>. Dictionary would not allow multiple occurrence of the same key, in your case <code>u" "</code> and <code>u"e"</code>.</span>
<span class="comment-copy">check <code>itertools.groupby</code> which shall help you grouping all list items having something incomon, in your case you group by having the same 4 numbers denoting the line position.</span>
<span class="comment-copy">How are you "merging" the values? It seems like you are getting some fields from certain occurences, and other fields in other occurences. Anyway I'd use <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to group together the values you want.</span>
<span class="comment-copy">Sorry, this is just an excerpt from the entire dictionary. The key is the 380.822. The values are of the format [character,[x0,y0,x1,y1]]</span>
<span class="comment-copy">I was merging by saving the last value as p and saving p[0]=p[0]+v[0], then saving p[1]=p[1][:2]+v[1][2:] if the space was less than the tolerance value. I am stuck when I try to delete v after merging. Otherwise save the current value as p and</span>
<span class="comment-copy">Thank you for the advice. One question, if a block of text is expected to possibly have a space I could handle that by changing the isspace to something like if x1prev-x0current &gt; toleranceValue ?</span>
<span class="comment-copy">The grouping is decided by the key function passed into <code>groupby()</code> - any time the value this returns changes, a new group will be started. This is just a normal function, so you can do whatever logic you want here to get the groups you need.</span>
<span class="comment-copy">Thank you very much for your help</span>
