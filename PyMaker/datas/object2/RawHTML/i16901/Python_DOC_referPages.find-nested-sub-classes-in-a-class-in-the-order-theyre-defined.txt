<div class="post-text" itemprop="text">
<p>Imagine a case like so:</p>
<pre><code>class A:
    pass

class B:
    x = 5
    class D(A):
        pass
    class C(A):
        pass
</code></pre>
<p>What I want is to find all the classes in class <code>B</code> that are subclasses of <code>A</code>:</p>
<pre><code>&gt;&gt;&gt; for cls in dir(B):
    if issubclass(cls, A):
        print(cls)
&lt;class '__main__.C'&gt;
&lt;class '__main__.D'&gt;
</code></pre>
<p>And it works as intended, but the problem is: I need to get them in the order they are defiend in <code>class B</code> definition, so instead of printing C before D, I need to get D before C. Using <code>dir()</code> obviously doesn't work, since it returns alphabetically sorted list.
What are my other options, if any?</p>
<p><strong>EDIT:</strong>
The reason I want this is to help "players" make their own heroes/champions (for a video game) as easily as possible. So instead of having to write:</p>
<pre><code>class MyHero(Hero):
     def __init__(self, name='My Hero', description='My description', ...):
          super().__init__(name, description, ...)
          self.spells = [MySpell1(), MySpell2(), MySpell3()]

class MySpell1(Spell):
     def __init__(...):
          ...
</code></pre>
<p>They could just write:</p>
<pre><code>class MyHero(Hero):
    name = 'My Hero'
    description = 'My description'
    ...

    class MySpell1(Spell):
        name = ...

    class MySpell2(Spell):
        ...
</code></pre>
<p>Obviously the second one looks much better than the first, and even more to a person who doesn't know much of Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>The metaclass documentation includes a nice <a href="https://docs.python.org/3/reference/datamodel.html#metaclass-example" rel="nofollow">example</a> of how to get a class to remember what order its members were defined in:</p>
<pre><code>class OrderedClass(type):

     @classmethod
     def __prepare__(metacls, name, bases, **kwds):
        return collections.OrderedDict()

     def __new__(cls, name, bases, namespace, **kwds):
        result = type.__new__(cls, name, bases, dict(namespace))
        result.members = tuple(namespace)
        return result

class A(metaclass=OrderedClass):
    def one(self): pass
    def two(self): pass
    def three(self): pass
    def four(self): pass 


&gt;&gt;&gt; A.members
('__module__', 'one', 'two', 'three', 'four')
</code></pre>
<p>You can adapt this to your case like this:</p>
<pre><code>class A:
    pass

class B(metaclass=OrderedClass):
    x = 5
    class D(A):
        pass
    class C(A):
        pass

print(filter(lambda x: isinstance(getattr(B, x), type), b.members)))
</code></pre>
<p>gives:</p>
<pre><code>['D', 'C']
</code></pre>
<p>Note that this gives you the names of the classes; if you want the classes themselves, you can do this instead:</p>
<pre><code>print(list(filter(lambda x: isinstance(x, type), (getattr(B, x) for x in B.members))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>May be something like that can be helpful:</p>
<pre><code>import inspect

class Spell(object):
    name = "Abstract spell"

class MyHero(object):
    name = "BATMAN"
    description = "the bat man"

    class MySpell1(Spell):
        name = "Fly"

    class MySpell2(Spell):
        name = "Sleep"


for k, v in MyHero.__dict__.iteritems():
    if inspect.isclass(v) and issubclass(v, Spell):
        print "%s cast the spell %s" % (MyHero.name, v.name)
</code></pre>
<p><strong>UPDATE</strong>:</p>
<p>Another way to iterate by class attributes is:</p>
<pre><code>for attr_name in dir(MyHero):
    attr = getattr(MyHero, attr_name)
    if inspect.isclass(attr) and issubclass(attr, Spell):
        print "%s cast the spell %s" % (MyHero.name, attr.name)
</code></pre>
<p>P.S. Python class is also object</p>
</div>
<span class="comment-copy">Why would you want to do this? If the order is important, store them in an ordered container.</span>
<span class="comment-copy">Why are you nesting classes anyway? That has no significance in Python.</span>
<span class="comment-copy">@jonrsharpe read the edit, I tried to explain :P Feel free to give better ideas if you have any...</span>
<span class="comment-copy">@MarkusMeskanen you could separate the user configuration from the Python - define a text file format they can use, then parse that into the appropriate Python objects. Why require the user to halfway-learn Python? This would also avoid annoying people who do know a class attribute when they see one!</span>
<span class="comment-copy">This seemed promising, but I'm on Python 2.5 and <code>__prepare__</code> doesn't work there :/</span>
<span class="comment-copy">@MarkusMeskanen <a href="http://legacy.python.org/dev/peps/pep-3115/" rel="nofollow noreferrer">PEP 3115</a>, which proposed the changes to metaclasses in Python 3, gives this as a justification for adding <code>__prepare__</code>: "it would be useful for a Python programmer to specify such ordering directly using the declaration order of class members. Currently, <b>such orderings must be specified explicitly, using some other mechanism</b>" (my emphasis). So, what you are asking for is not directly possible in Python 2.x.</span>
<span class="comment-copy">This doesn't really help - <code>MyHero.__dict__</code> is a dictionary, and thus has no guaranteed order</span>
<span class="comment-copy">That's a part of answer to your question: all class attributes stored in the dictionary and as you said dictionary is unordered collection. So your should add to each nested class an order number if you'd like to use such scheme.</span>
