<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/11168076/why-cant-i-end-a-raw-string-with-a-backslash">Why can't I end a raw string with a backslash? [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/647769/why-cant-pythons-raw-string-literals-end-with-a-single-backslash">Why can't Python's raw string literals end with a single backslash?</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>Just a quick silly question. How do I write a trailing slash in a raw string literal?</p>
<pre><code>r = r'abc\'  # syntax error
r = r'abc\\' # two slashes: "abc\\"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't. A raw string literal can't end with an odd number of backslashes (<a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer">langref</a>; last paragraph of that section). You can, howerver, write a raw string literal without the backslash, and write the final backslash as an ordinary string literal:</p>
<pre><code>r = r'abc' '\\'
</code></pre>
<p>Adjacent string literals are implicitly concatenated by the parser.</p>
</div>
<div class="post-text" itemprop="text">
<p>Raw string literals are parsed in exactly the same way as ordinary string literals; it’s just the conversion from string literal to string object that’s different. This means that all string literals must end with an even number of backslashes; otherwise, the unpaired backslash at the end escapes the closing quote character, leaving an unterminated string.</p>
</div>
<span class="comment-copy">You cannot. Simple as that. Don't use a raw string. Use a normal string.</span>
<span class="comment-copy">@thefourtheye and others: I think "<i>how</i> do I do this" is a sufficiently different (and much more practical) question than "<i>why can't</i> I do this". Of course, I may be biased because I already wrote an answer :-)</span>
<span class="comment-copy">@delnan Which has already been covered in both the referenced duplicates.</span>
<span class="comment-copy">documentations of this issue: <a href="https://docs.python.org/2/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash" rel="nofollow noreferrer">docs.python.org/2/faq/…</a></span>
<span class="comment-copy">Also <a href="http://stackoverflow.com/questions/2870730/python-raw-strings-and-trailing-backslash" title="python raw strings and trailing backslash">stackoverflow.com/questions/2870730/…</a></span>
<span class="comment-copy">+1 I thought it is not possible...</span>
<span class="comment-copy">@thefourtheye <a href="http://stackoverflow.com/a/11170170/2235132">stackoverflow.com/a/11170170/2235132</a> Also <a href="http://stackoverflow.com/a/5830053/2235132">stackoverflow.com/a/5830053/2235132</a></span>
<span class="comment-copy">@thefourtheye It's not possible to write (in python syntax, not in string literal AST node) <i>one</i> raw string literal ending in an odd number of backslashes. Once you lift the restriction about the number of string literals and their types the question becomes "how to concatenate two strings" which is trivial...</span>
<span class="comment-copy">Thanks, this is what I hoped for.</span>
