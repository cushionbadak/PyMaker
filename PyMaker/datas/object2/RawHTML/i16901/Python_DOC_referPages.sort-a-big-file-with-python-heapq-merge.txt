<div class="post-text" itemprop="text">
<p>I'm looking to complete such job but have encountered difficulty:</p>
<p>I have a huge file of texts. Each line is of the format <code>"AGTCCCGGAT filename"</code> where the first part is a DNA thing.</p>
<p>The professor suggests that we break this huge file into many temporary files and use <code>heapq.merge()</code> to sort them. The goal is to have one file at the end which contains every line of the original file and is sorted.</p>
<p>My first try was to break each line into a separate temporary file. The problem is that <code>heapq.merge()</code> reports there are too many files to sort. </p>
<p>My second try was to break it into temporary files by 50000 lines. The problem is that it seems that it does not sort by line, but by file. for example, we have something like:</p>
<pre><code>ACGTACGT filename
CGTACGTA filename
ACGTCCGT filename
CGTAAAAA filename
</code></pre>
<p>where the first two lines are from one temp file and the last two lines are from the second file.</p>
<p>My code to sort them is as follows: </p>
<pre><code>for line in heapq.merge(*[open('/var/tmp/L._Ipsum-strain01.fa_dir/'+str(f),'r') for f in os.listdir('/var/tmp/L._Ipsum-strain01.fa_dir')]):
     result.write(line)
result.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your solution is almost correct. However, each partial file must be <em>sorted</em> before you <em>write</em> them to the disk. Here's a 2-pass algorithm that demonstrates it: First, iterate the file in 50k line chunks, <em>sort</em> the lines in a chunk and then write this sorted chunk into a file. In second pass, open all these files and merge to the output file.</p>
<pre><code>from heapq import merge
from itertools import count, islice
from contextlib import ExitStack  # not available on Python 2
                                  # need to care for closing files otherwise

chunk_names = []

# chunk and sort
with open('input.txt') as input_file:
    for chunk_number in count(1):
        # read in next 50k lines and sort them
        sorted_chunk = sorted(islice(input_file, 50000))
        if not sorted_chunk:
            # end of input
            break

        chunk_name = 'chunk_{}.chk'.format(chunk_number)
        chunk_names.append(chunk_name)
        with open(chunk_name, 'w') as chunk_file:
            chunk_file.writelines(sorted_chunk)

with ExitStack() as stack, open('output.txt', 'w') as output_file:
    files = [stack.enter_context(open(chunk)) for chunk in chunk_names]
    output_file.writelines(merge(*files))
</code></pre>
</div>
<span class="comment-copy">Are the lines in each file already sorted? If not, note that <code>heapq.merge</code> requires that the input is already sorted from smallest to largest.</span>
<span class="comment-copy">No they aren't. I can definitely do that. But the problem is, even if they are sorted, the result could still be I sorted. For example if I have one file of "1 4 7" and another file of "3 5 6"  doesn't heapq.merge simply put the second file after the first one?</span>
<span class="comment-copy">No. heapq.merge will sort all lines and will not simply put one file's lines after another.</span>
<span class="comment-copy">If your goal is simply to sort the file, <a href="http://en.wikipedia.org/wiki/Sort_(Unix)" rel="nofollow noreferrer">unix sort</a> will deal with really very large files quite easily. I think the <a href="http://www.windows-commandline.com/sort-command/" rel="nofollow noreferrer">Windows sort</a> will do the same.</span>
<span class="comment-copy">I tested this and got <code>TypeError: write() argument must be str, not generator</code> (I'm using Python 3.5.1). Does it actually work for you? Which Python version are you using?</span>
<span class="comment-copy">@StefanPochmann sorry, fixed :D the last one needs to be <code>writelines</code> not <code>write</code> (I somehow missed this when fixing)</span>
<span class="comment-copy">This is brilliant.  How would you modify to do a numeric sort?  I have a file which just has numbers (integers).</span>
<span class="comment-copy">@Arnold <i>if</i> you're lucky enough to have Python 3.5, there is <code>key</code> argument to <code>merge</code> wherein you can use any function that you could use for <code>sort</code>/<code>sorted</code>: <a href="https://docs.python.org/3/library/heapq.html#heapq.merge" rel="nofollow noreferrer">docs.python.org/3/library/heapq.html#heapq.merge</a> - In Python's before merge, you'd need to use <a href="https://en.wikipedia.org/wiki/Schwartzian_transform" rel="nofollow noreferrer">Schwartzian transform</a></span>
<span class="comment-copy">Thanks.  I am not smart enough to figure that out but hoped I could easily modify your code.  Never mind. I got the job done by recreating my file as text rather than numbers.  It just took a few minutes for an 8gb file on an 8gb MacBook Pro.  Hope to spend a bit of time understanding your code completely - but it works !! And the logic would make it work on ANY size file.</span>
