<div class="post-text" itemprop="text">
<p>here is my code:</p>
<pre><code>def is_prime(x):
    if x &lt; 2:
        return False

    else:
        for i in range(2,x):
            if x % i == 0:
                return False
        else:
            return True

print is_prime(508)
</code></pre>
<p>I don't understand why the last <code>else: return true</code> works with the indentation. If I type</p>
<pre><code>else:
            for i in range(2,x):
                if x % i == 0:
                    return False
                else:
                    return True
</code></pre>
<p>Then def is_prime(2) returns none? why?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because in python, a <code>for</code>-loop can have an <code>else</code>-clause. </p>
<p>This clause is executed if the loop exits normally. If the loop is exited by using the <code>break</code> statement, the <code>else</code> is not entered.</p>
<p>I suggest you read up the official <a href="https://docs.python.org/2/reference/compound_stmts.html#the-for-statement" rel="nofollow">doc</a> and if it's still unclear, <a href="http://psung.blogspot.fi/2007/12/for-else-in-python.html" rel="nofollow">this blog</a> summarizes the concept fairly well.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>for</code> and <code>while</code> loops also know <code>else</code> clauses, not just <code>if</code> or <code>try</code> statements.</p>
<p>The <code>else</code> clause of a loop is executed when control leaves the loop, unless you have used <code>break</code> to abort the loop.</p>
<p>I must admit that this behavior <a href="https://stackoverflow.com/questions/1576537/why-does-else-behave-differently-in-for-while-statements-as-opposed-to-if-try-st">puzzled me at first, as well</a>, but it's actually quite sensible, and a useful feature (see <a href="https://stackoverflow.com/a/1576552/20670">this answer</a> for a good example).</p>
</div>
<div class="post-text" itemprop="text">
<p>In the second example, the <code>else</code> is on the same indentation level as the <code>if</code>, so they both belong together. So for the first item in the loop, you will either return <code>False</code> or <code>True</code> depending on that value; i.e. the loop won’t continue.</p>
<p>Now in your original code, the <code>else</code> is on the same level as the <code>for</code>. So it’s a <code>for..else</code> which is actually <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow">a special construct</a>:</p>
<blockquote>
<p>When the items are exhausted, the suite in the <code>else</code> clause, if present, is executed, and the loop terminates.</p>
</blockquote>
<p>So basically, the else block is executed, if the loop naturally finishes (without calling <code>break</code>). So in your case, it’s the same as leaving the <code>else</code> out:</p>
<pre><code>for i in range(2,x):
    if x % i == 0:
        return False
return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As others have said, a for loop can have an else clause. Read more in the <a href="https://docs.python.org/2/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow">docs</a></p>
<blockquote>
<p>When used with a loop, the else clause has more in common with 
  the else clause of a try statement than it does that of if statements: 
  a try statement’s else clause runs when no exception occurs, and a 
  loop’s else clause runs when no break occurs.</p>
</blockquote>
</div>
<span class="comment-copy">There is nice blog on this topic "Reasons for Confusion": <a href="https://ncoghlan_devs-python-notes.readthedocs.org/en/latest/python_concepts/break_else.html" rel="nofollow noreferrer">ncoghlan_devs-python-notes.readthedocs.org/en/latest/…</a>. I would recommend using other constructs as it is really confusing you and future reader.</span>
