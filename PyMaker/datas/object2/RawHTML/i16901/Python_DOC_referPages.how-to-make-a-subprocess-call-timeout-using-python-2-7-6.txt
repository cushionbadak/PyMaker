<div class="post-text" itemprop="text">
<p>This has probably been asked but I cannot find anything regarding a subprocess.call timeout when using python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way I've always done timeouts with 2.7 is utilizing <code>subprocess.poll()</code> alongside <code>time.sleep()</code> with a delay. Here's a very basic example:</p>
<pre><code>import subprocess
import time

x = #some amount of seconds
delay = 1.0
timeout = int(x / delay)

args = #a string or array of arguments
task = subprocess.Popen(args)

#while the process is still executing and we haven't timed-out yet
while task.poll() is None and timeout &gt; 0:
     #do other things too if necessary e.g. print, check resources, etc.
     time.sleep(delay)
     timeout -= delay
</code></pre>
<p>If you set <code>x = 600</code>, then your timeout would amount to 10 minutes. While <code>task.poll()</code> will query whether or not the process has terminated. <code>time.sleep(delay)</code> will sleep for 1 second in this case, and then decrement the timeout by 1 second. You can play around with that part to your heart's content, but the basic concept is the same throughout.</p>
<p>Hope this helps!</p>
<p><code>subprocess.poll()</code> <a href="https://docs.python.org/2/library/subprocess.html#popen-objects" rel="noreferrer">https://docs.python.org/2/library/subprocess.html#popen-objects</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could install <a href="http://pypi.python.org/pypi/subprocess32/" rel="nofollow noreferrer"><code>subprocess32</code> module</a> <a href="https://stackoverflow.com/a/12698328/4279">mentioned by @gps</a> -- the backport of the <code>subprocess</code> module from Python 3.2/3.3 for use on 2.x.  It works on Python 2.7 and it includes timeout support from Python 3.3.</p>
<p><a href="https://github.com/python/cpython/blob/03760b0a261dadf317f01ddfbcdf51e73fcfd49c/Lib/subprocess.py#L514-L522" rel="nofollow noreferrer"><code>subprocess.call()</code> is just <code>Popen().wait()</code></a> and therefore to interrupt a long running process in <code>timeout</code> seconds:</p>
<pre><code>#!/usr/bin/env python
import time
from subprocess import Popen

p = Popen(*call_args)
time.sleep(timeout)
try:
    p.kill()
except OSError:
    pass # ignore
p.wait()
</code></pre>
<p>If the child process may end sooner then a portable solution is to <a href="https://stackoverflow.com/a/10012262/4279">use <code>Timer()</code> as suggested in @sussudio's answer</a>:</p>
<pre><code>#!/usr/bin/env python
from subprocess import Popen
from threading import Timer

def kill(p):
    try:
        p.kill()
    except OSError:
        pass # ignore

p = Popen(*call_args)
t = Timer(timeout, kill, [p])
t.start()
p.wait()
t.cancel()
</code></pre>
<p>On Unix, you could <a href="https://stackoverflow.com/a/1191537/4279">use <code>SIGALRM</code> as suggested in @Alex Martelli's answer</a>:</p>
<pre><code>#!/usr/bin/env python
import signal
from subprocess import Popen

class Alarm(Exception):
    pass

def alarm_handler(signum, frame):
    raise Alarm

signal.signal(signal.SIGALRM, alarm_handler)


p = Popen(*call_args)
signal.alarm(timeout)  # raise Alarm in 5 minutes
try:
    p.wait()
    signal.alarm(0)  # reset the alarm
except Alarm:
    p.kill()
    p.wait()
</code></pre>
<p>To avoid using threads and signals here, <code>subprocess</code> module on Python 3 uses a <a href="https://github.com/python/cpython/blob/7b2ba5601ae02ec046853a5e468160d443cf24f7/Lib/subprocess.py#L1607-L1653" rel="nofollow noreferrer">busy loop with <code>waitpid(WNOHANG)</code> calls on Unix</a> and <a href="https://github.com/python/cpython/blob/7b2ba5601ae02ec046853a5e468160d443cf24f7/Lib/subprocess.py#L1260-L1275" rel="nofollow noreferrer"><code>winapi.WaitForSingleObject()</code> on Windows</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try to use <strong>"easyprocess"</strong>:</p>
<p><a href="https://github.com/ponty/EasyProcess" rel="nofollow">https://github.com/ponty/EasyProcess</a></p>
<p>It has many features that you need like <strong>"timeout"</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python 3.3 <em>timeout</em> argument was added.</p>
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow">https://docs.python.org/3/library/subprocess.html#subprocess.call</a></p>
</div>
<span class="comment-copy">have a look into: <a href="http://stackoverflow.com/questions/1191374/subprocess-with-timeout" title="subprocess with timeout">stackoverflow.com/questions/1191374/subprocess-with-timeout</a></span>
<span class="comment-copy">This doesn't kill the process. You need to add os.killpg(os.getpgid(task.pid), signal.SIGTERM)</span>
<span class="comment-copy">@AaronS I think <code>task.terminate()</code> does virtually the same.</span>
<span class="comment-copy">Thanks for your response.I know that we are using python 2.7.6</span>
