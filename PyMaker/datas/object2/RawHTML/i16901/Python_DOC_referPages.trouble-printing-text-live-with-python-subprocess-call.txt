<div class="post-text" itemprop="text">
<p>Off the bat, here is what I am importing:
    import os, shutil
    from subprocess import call, PIPE, STDOUT</p>
<p>I have a line of code that calls bjam to compile a library:</p>
<pre><code>call(['./bjam',
      '-j8',
      '--prefix="' + tools_dir + '"'],
     stdout=PIPE)
</code></pre>
<p>I want it to print out text as the compilation occurs. Instead, it prints everything out at the end.</p>
<p>It does not print anything when I run it like this. I have tried running the command outside of Python and determined that all of the output is to stdout (when I did <code>./bjam -j8 &gt; /dev/null</code> I got no output, and when I ran <code>./bjam -j8 2&gt; /dev/null</code> I got output).</p>
<p>What am I doing wrong here? I want to print the output from call live.</p>
<hr/>
<p>As a sidenote, I also noticed something when I was outputting the results of a git clone operation:</p>
<pre><code>call(['git',
      'clone', 'https://github.com/moses-smt/mosesdecoder.git'],
     stdout=PIPE)
</code></pre>
<p>prints the stdout text live as the call process is run.</p>
<pre><code>call(['git',
      'clone', 'https://github.com/moses-smt/mosesdecoder.git'],
     stdout=PIPE, stderr=STDOUT)
</code></pre>
<p>does not print out any text. What is going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>def run(command):
    proc = subprocess.Popen(command, stdout=subprocess.PIPE)
    for lineno, line in enumerate(proc.stdout):
        try:
            print(line.decode('utf-8').replace('\n', ''))
        except UnicodeDecodeError:
            print('error(%d): cannot decode %s' % (lineno, line))
</code></pre>
<p>The <code>try...except</code> logic is for python 3 (maybe 3.2/3.3, I'm not sure), as there <code>line</code> is a byte array not a string. For earlier versions of python, you should be able to do:</p>
<pre><code>def run(command):
    proc = subprocess.Popen(command, stdout=subprocess.PIPE)
    for line in proc.stdout:
        print(line.replace('\n', ''))
</code></pre>
<p>Now, you can do:</p>
<pre><code>run(['./bjam', '-j8', '--prefix="' + tools_dir + '"'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>stdout=PIPE</code> redirects subprocess' stdout to a pipe. Don't do it unless you want to read from the subprocesses stdout in your code using <code>proc.communicate()</code> method or using <code>proc.stdout</code> attribute directly.</p>
<p>If you remove it then subprocess should print to stdout like it does in the shell:</p>
<pre><code>from subprocess import check_call

check_call(['./bjam', '-j8', '--prefix', tools_dir])
</code></pre>
<p>I've used <code>check_call()</code> to raise an exception if the child process fails.</p>
<p>See <a href="https://stackoverflow.com/a/17698359/4279">Python: read streaming input from subprocess.communicate()</a> if you want to read subprocess' output line by line (making the line available as a variable in Python) as soon as it is avaiable.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>call</code> will not print anything it captures. As <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow">documentation</a> says "Do not use stdout=PIPE or stderr=PIPE with this function. As the pipes are not being read in the current process, the child process may block if it generates enough output to a pipe to fill up the OS pipe buffer."</p>
<p>Consider using <code>check_output</code> and print its return value.</p>
<p>In the first case with git call you are not capturing <code>stderr</code> and therefor it normally flows onto your terminal.</p>
</div>
