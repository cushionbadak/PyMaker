<div class="post-text" itemprop="text">
<p>I need to create a function that takes as input a list of positive numbers and a positive number target and returns <code>True</code> if there are three numbers in the list that add up to the target.</p>
<p>So far I've come up with this:</p>
<pre><code>def subsetSum(l, sum):
    found = False
    for i in range(len(l) - 2):
        for j in range(i + 1, len(l) - 1):
            for k in range(j + 1, len(l)):
                return True
    return found
</code></pre>
<p>REPL:</p>
<pre><code>&gt;&gt;&gt; subsetSum([5, 4, 10, 20, 15, 19], 38)
True
</code></pre>
<p>So the sum of 4, 15 and 19 equals to 38, which is my target. When I run this code it comes out to be <code>True</code>.</p>
<p>But when I run the following code, it still comes out to be <code>True</code>, although the list of numbers doesn't have three numbers that add up to the target, which is 10.</p>
<pre><code>&gt;&gt;&gt; subsetSum([5, 4, 10, 20, 15, 19], 10)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably the simplest and the most efficient solution using <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a>:</p>
<pre><code>from itertools import combinations

def subset_sum(lst, target):
    return len(lst) &gt; 2 and any(sum(x) == target for x in combinations(lst, 3))
</code></pre>
<p>Examples:</p>
<pre><code>&gt;&gt;&gt; subset_sum([5, 4, 10, 20, 15, 19], 38)
True
&gt;&gt;&gt; subset_sum([10], 38)
False
</code></pre>
<hr/>
<p>Just in case you want to stick with your own code, here's how you can fix it:</p>
<pre><code>def subset_sum(l, target):
    if len(l) &lt; 3:
        return False

    for ki, i in enumerate(l):
        for kj, j in enumerate(l):
            for kk, k in enumerate(l):
                # To make sure we sum elements ONLY on different positions
                if kk != kj and kk != ki and kj != ki and i + j + k == target:
                    return True

    return False
</code></pre>
<p>This solution isn't very fast, but it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are always returning True. Since python can handle multiple return statements in a function there is no need for the found variable. Get rid of found and at the end return False. You need an if statement to compare sum and the input values, that returns True when the condition is met or False otherwise. Right now your code is essentially a complicated way of returning True, you are simply iterating through abstract values, not assigning those values to anything and then returning True before returning found. </p>
</div>
<span class="comment-copy">Google subset sum in python</span>
<span class="comment-copy">Shouldn't you have an <code>if</code> in there somewhere? To check that the numbers actually add up to something.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/14692130/find-all-elements-in-a-list-of-positive-numbers-that-add-up-to-number-x">find all elements in a list of positive numbers that add up to number X</a></span>
<span class="comment-copy">It's not a duplicate because it's capped at <b>3</b> numbers, making it naively <code>O(n**3)</code>, it's not NPC</span>
