<div class="post-text" itemprop="text">
<p>I have this line of code in my python script. It searches all the files in in a particular directory for * cycle *.log. </p>
<pre><code>for searchedfile in glob.glob("*cycle*.log"):
</code></pre>
<p>This works perfectly, however when I run my script to a network location it does not search them in order and instead searches randomly. </p>
<p>Is there a way to force the code to search by date order?</p>
<p>This question has been asked for php but I am not sure of the differences.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>To sort files by date:</p>
<pre><code>import glob
import os

files = glob.glob("*cycle*.log")
files.sort(key=os.path.getmtime)
print("\n".join(files))
</code></pre>
<p>See also <a href="https://docs.python.org/3/howto/sorting.html">Sorting HOW TO</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well. The answer is nope. <a href="https://docs.python.org/2/library/glob.html#module-glob" rel="nofollow"><code>glob</code></a> uses <a href="https://docs.python.org/2/library/os.html#os.listdir" rel="nofollow"><code>os.listdir</code></a> which is described by:</p>
<p>"<em>Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order. It does not include the special entries '.' and '..' even if they are present in the directory.</em>"</p>
<p>So you are actually lucky that you got it sorted. You need to sort it yourself.</p>
<p>This works for me:</p>
<pre><code>import glob
import os
import time

searchedfile = glob.glob("*.cpp")
files = sorted( searchedfile, key = lambda file: os.path.getctime(file))

for file in files:
 print("{} - {}".format(file, time.ctime(os.path.getctime(file))) )
</code></pre>
<p>Also note that this uses creation time, if you want to use modification time, the function used must be <code>getmtime</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using glob no. Right now as you're using it, glob is storing all the files simultaneously in code and has no methods for organizing those files. If only the final result is important, you could use a second loop that checks the file's date and resorts based on that. If the parse order matters, glob is probably not the best way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can sort the list of files that come back using <code>os.path.getmtime</code> or <code>os.path.getctime</code>. See this other <a href="https://stackoverflow.com/a/237084/7376">SO answer</a> and note the comments as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Essentially the same as @jfs but in one line using <code>sorted</code></p>
<pre><code>import os,glob
searchedfiles = sorted(glob.glob("*cycle*.log"), key=os.path.getmtime)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your paths are in sortable order then you can always sort them as strings (as others have already mentioned in their answers). </p>
<p>However, if your paths use a datetime format like <code>%d.%m.%Y</code>, it becomes a bit more involving. Since <code>strptime</code> does not support wildcards, we developed a module <a href="https://libraries.io/pypi/datetime-glob" rel="nofollow noreferrer">datetime-glob</a> to parse the date/times from paths including wildcards. </p>
<p>Using <code>datetime-glob</code>, you could walk through the tree, list a directory, parse the date/times and sort them as tuples <code>(date/time, path)</code>.</p>
<p>From the module's test cases:</p>
<pre><code>import pathlib
import tempfile

import datetime_glob

def test_sort_listdir(self):
    with tempfile.TemporaryDirectory() as tempdir:
        pth = pathlib.Path(tempdir)
        (pth / 'some-description-20.3.2016.txt').write_text('tested')
        (pth / 'other-description-7.4.2016.txt').write_text('tested')
        (pth / 'yet-another-description-1.1.2016.txt').write_text('tested')

        matcher = datetime_glob.Matcher(pattern='*%-d.%-m.%Y.txt')
        subpths_matches = [(subpth, matcher.match(subpth.name)) for subpth in pth.iterdir()]
        dtimes_subpths = [(mtch.as_datetime(), subpth) for subpth, mtch in subpths_matches]

        subpths = [subpth for _, subpth in sorted(dtimes_subpths)]

        # yapf: disable
        expected = [
            pth / 'yet-another-description-1.1.2016.txt',
            pth / 'some-description-20.3.2016.txt',
            pth / 'other-description-7.4.2016.txt'
        ]
        # yapf: enable

        self.assertListEqual(subpths, expected)
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/6759415/4279">Sorting files by date</a></span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/168409/4279">How do you get a directory listing sorted by creation date in python?</a></span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/237079/4279">How to get file creation &amp; modification date/times in Python?</a></span>
<span class="comment-copy">Final code: <code>searchedfiles = glob.glob("*cycle*.log")</code> <code>searchedfiles.sort(key=os.path.getmtime)</code> <code>for searchedfile in searchedfiles:</code></span>
<span class="comment-copy">Great this worked with a bit of tweaking to fit my needs. What is the key= for?</span>
<span class="comment-copy">I've added the link to docs</span>
<span class="comment-copy">Elegant and simple solution. Thanks for that.</span>
<span class="comment-copy">"glob is storing all the files simultaneously in code" what?</span>
<span class="comment-copy">@luk32 The <a href="https://docs.python.org/2/library/glob.html#glob.glob" rel="nofollow noreferrer">glob.glob()</a> code is loading the entire directory's set of files in to some sort of data structure. I said code because I do not know whether they're using a list or an internalized array.</span>
<span class="comment-copy">It is still not the code. Also it doesn't matter. The problem is, that it is in arbitrary order because it gets it straight from the system. It depends on implementation of the kernel and file-system driver.</span>
