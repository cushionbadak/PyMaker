<div class="post-text" itemprop="text">
<p>I am python beginner, so far I have read that python does not have references, if this is true what is the equivalent of following perl code in python?</p>
<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;

my @grps = qw/grp1:1:2:3 grp2:1:2:3 grp3:1:2:3/;

# CREATES AN ARRAY OF REFERENCES TO ARRAYS - AoR2A
my @agrps;
foreach (@grps){
  push @agrps, [split(":")];
}

# CREATES AN HASH OF REFERENCES TO ARRAYS (REFERENCES ARE THE SAME AS THEY ARE IN AoR2A ABOVE)
my %hgrps;
foreach (@agrps){
   $hgrps{"$_-&gt;[0]"} = $_;
}

# THE ELEMENTS CAN BE THEN ACCESSED EITHER VIA ARRAY OR HASH SYNTAX
$hgrps{"grp3"}-&gt;[3] = "NEW VALUE 3rd INDEX";
$agrps[2]-&gt;[2] = "NEW VALUE 2nd INDEX";

print Dumper @agrps;
print "\n";
print Dumper %hgrps;
</code></pre>
<p>The output of above script is following:</p>
<pre><code>$VAR1 = [
          'grp1',
          '1',
          '2',
          '3'
        ];
$VAR2 = [
          'grp2',
          '1',
          '2',
          '3'
        ];
$VAR3 = [
          'grp3',
          '1',
          'NEW VALUE 2nd INDEX',
          'NEW VALUE 3rd INDEX'
        ];

$VAR1 = 'grp3';
$VAR2 = [
          'grp3',
          '1',
          'NEW VALUE 2nd INDEX',
          'NEW VALUE 3rd INDEX'
        ];
$VAR3 = 'grp1';
$VAR4 = [
          'grp1',
          '1',
          '2',
          '3'
        ];
$VAR5 = 'grp2';
$VAR6 = [
          'grp2',
          '1',
          '2',
          '3'
        ];
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perl needs references for two reasons:</p>
<ol>
<li><p>Complex (i.e. nested) data structures in a backwards compatible way. E.g. <code>$hash{entry} = @array</code> would have to keep assigning the array size to that entry, so using an array reference was an escape to use nested data structures: <code>$hash{entry} = \@array</code>.</p>
<p>This problem does not exist in Python. Arrays and other data structures already are reference types, not value types.</p></li>
<li><p>Indirection. For example in Perl we can do</p>
<pre><code>my $x = 1;
my $ref = \$x; 
$$ref = 42;
# ($x == 42) is true
</code></pre>
<p>This can be faked to a certain degree using arrays, the important part is not to use value types. For example we'd need two levels to change some value through a reference.</p>
<pre><code>x = [1]
ref = [x]
ref[0][0] = 42
# (x is [42]) is True
</code></pre>
<p>We need only one level if we just need a pointer that can refer to different things.</p>
<p>It might be more readable if you use a <code>Ref</code> class:</p>
<pre><code>class Ref(object):
    def __init__(self, val):
        self.val = val

ref = Ref(1)
ref.val = 42
</code></pre></li>
</ol>
<p>As your problem is centered around nested data structures, a translation of your code to Python would not require any “array references”. Plain lists will do.</p>
<pre><code>grps = [...]
argps = list()
hrgps = dict()
for entry in grps:
    fields = entry.split(":") # split returns a list
    argps.append(fields)
    hrgps[fields[0]] = fields
</code></pre>
</div>
<span class="comment-copy">@jmetz, "References" and "passing by reference" are two different things.</span>
<span class="comment-copy">The more interesting question is does Perl need array and hash types as opposed to array and hash references (other than backward compatibility)?</span>
<span class="comment-copy">@socketpuppet not really. Perl6 gets rid of references, at the expense of adding more contexts. Perl5 has void, scalar, and list context. Perl6 also has an item context in which an array behaves similar to Perl5's array references. Perl5 has also been drifting in that direction since then: Many builtins can now take array references where previously array variables were required, e.g. <code>push $array_ref, $value</code>.</span>
<span class="comment-copy">@newacct: Python is "pass by name" it is neither "by reference" nor "by value" e.g., <a href="http://stackoverflow.com/q/575196/4279">In Python, why can a function modify some arguments as perceived by the caller, but not others?</a>.</span>
<span class="comment-copy">@J.F.Sebastian: No, you are the one who is wrong. Rather than telling me to read something someone else wrote, you can defend your assertion yourself. Terms must be defined in ways that are consistent across languages. If you look anywhere on StackOverflow or on the Internet, Java is said to be pass-by-value. But the semantics of variables and assignment and passing are <i>exactly identical</i> between Java and Python. So both must be described with the same terms.</span>
<span class="comment-copy">@newacct: Wikipedia calls it <a href="http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing" rel="nofollow noreferrer">Call by sharing</a> (it is good because I don't know who else uses that term. So there is no wrong preconceptions). pass-by-value is <a href="http://stackoverflow.com/q/373419/4279">understood by many people as a process that involves <b>a copy</b></a> and CPython implementation uses it in that sense e.g., see <code>ctypes</code> source. But Python objects and their values are not copied during a function call. <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">objects and values have well-defined meaning</a> in Python.</span>
