<div class="post-text" itemprop="text">
<p>Confused newbie here. What's the difference between using:</p>
<pre><code>print ("So you are {0} years old".format(age))
</code></pre>
<p>AND</p>
<pre><code>print ("So you are", age, "years old")
</code></pre>
<p>Both work. </p>
</div>
<div class="post-text" itemprop="text">
<p>Actually there's a huge difference. The former use string's <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str#str.format" rel="nofollow"><code>format</code></a> method to create a string. The latter, pass several arguments to <a href="https://docs.python.org/3.4/library/functions.html?#print" rel="nofollow"><code>print</code></a> function, which will concatenate them all adding a whitespace (default) between them.</p>
<p>The former is far more powerful, for instance, you can use <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow">the format syntax</a> to accomplish things like:</p>
<pre><code># trunc a float to two decimal places
&gt;&gt;&gt; '{:.2f}'.format(3.4567)
'3.46'

# access an objects method
&gt;&gt;&gt; import math
&gt;&gt;&gt; '{.pi}'.format(math)
'3.141592653589793'
</code></pre>
<p>It is similar to <code>printf</code> style formats used in earlier versions of python with the <code>%</code> operator: (ie: <code>"%d" % 3</code>) Now <code>str.format()</code> is recommended over the <code>%</code> operator and is the new standard in Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; class Age:
...     def __format__(self, format_spec):
...         return "{:{}}".format("format", format_spec)
...     def __str__(self):
...         return "str"
... 
&gt;&gt;&gt; age = Age()
&gt;&gt;&gt; print(age)
str
&gt;&gt;&gt; print("{:s}".format(age))
format
</code></pre>
<p><code>format()</code> allows to convert the same object into a string using different representations specified by <code>format_spec</code>. <code>print</code> uses <code>__str__</code> or <code>__repr__</code> if the former is not defined. <code>format()</code> may also use <code>__str__</code>, <code>__repr__</code> if <code>__format__</code> is not defined.</p>
<p>In Python 2 you could also define <code>__unicode__</code> method:</p>
<pre><code>&gt;&gt;&gt; class U:
...   def __unicode__(self):
...       return u"unicode"
...   def __str__(self):
...       return "str"
...   def __repr__(self):
...       return "repr"
... 
&gt;&gt;&gt; u = U()
&gt;&gt;&gt; print(u"%s" % u)
unicode
&gt;&gt;&gt; print(u)
str
&gt;&gt;&gt; print(repr(u))
repr
&gt;&gt;&gt; u
repr
</code></pre>
<p>There is also <code>ascii()</code> builtin function in Python 3 that behaves like <code>repr()</code> but produces ascii-only results:</p>
<pre><code>&gt;&gt;&gt; print(ascii("üêç"))
'\U0001f40d'
</code></pre>
<p>See <a href="http://codepoints.net/U+1F40D" rel="nofollow">U+1F40D SNAKE</a>.</p>
<p><code>format()</code> uses <a href="https://docs.python.org/3.4/library/string.html#formatspec" rel="nofollow">Format Specification Mini-Language</a> instead of running various conversion to string functions.</p>
<p>An object may invent its own <code>format_spec</code> language e.g., <code>datetime</code> allows to use <code>strftime</code> formats:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; "{:%c}".format(datetime.utcnow())
'Sun May  4 18:51:18 2014'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The former is more convenient. Imagine if you have lots of parameters, you'll end up with something like this:</p>
<pre><code>print ("So your name is ", firstname, " ", lastname, " and you are ", age, " years old")
</code></pre>
<p>This is a pain to both read and write. So the format method is there to help you write cleaner and more readable strings.</p>
</div>
<span class="comment-copy">Personal convenience</span>
<span class="comment-copy">Look closely...they aren't actually the same.</span>
<span class="comment-copy">String formatting can be used in more contexts than just <code>print</code>.</span>
<span class="comment-copy">In the latter case, the <code>print()</code> function is doing the work, so that syntax won't work anywhere except inside the <code>print()</code> function.  In the former case, the string instance method is doing the work, so that will work anywhere you have a string.</span>
<span class="comment-copy">Remove the <code>print</code> and look what makes more sense.</span>
<span class="comment-copy"><a href="https://docs.python.org/3.4/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer"><code>%</code> operator is not deprecated though <code>str.format()</code> is recommended instead</a> e.g., <code>logging</code> modules uses <code>%</code> formatting.</span>
<span class="comment-copy">You're right, I thought I read that somewhere in the docs but evidences hint the contrary. Thanks for correcting, I'll edit the answer :)</span>
<span class="comment-copy">Those extra blanks aren't necessary; <code>print()</code> already inserts them.</span>
