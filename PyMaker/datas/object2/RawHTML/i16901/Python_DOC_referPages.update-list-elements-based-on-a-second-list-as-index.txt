<div class="post-text" itemprop="text">
<p>A not too difficult question, I hope, from a beginner in Python.</p>
<p>I have a main list, listA, and I need to zero out items in that list based on values in an index list, listB.</p>
<p>So, for example, given:</p>
<pre><code>listA = [10, 12, 3, 8, 9, 17, 3, 7, 2, 8]
listB = [1, 4, 8, 9]
</code></pre>
<p>the output I want is</p>
<pre><code>listC = [10, 0, 3, 8, 0, 17, 3, 7, 0, 0]
</code></pre>
<p>This question [1] seems similar, but asked for the elements to be removed, not changed. I'm not sure if a similar approach is needed, but if so I can't see how to apply it.</p>
<p>[1] <a href="https://stackoverflow.com/questions/14974411/how-to-remove-elements-from-one-list-if-other-list-contain-the-indexes-of-the-el">how to remove elements from one list if other list contain the indexes of the elements to be removed</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As a list comprehension:</p>
<pre><code>listC = [value if index not in listB else 0 for index, value in enumerate(listA)]
</code></pre>
<p>Which for large lists can be improved substantially by using a <code>set</code> for listB:</p>
<pre><code>setB = set(listB)
listC = [value if index not in setB else 0 for index, value in enumerate(listA)]
</code></pre>
<hr/>
<p>Or copy the list and modify it, which is both faster and more readable:</p>
<pre><code>listC = listA[:]
for index in listB:
    listC[index] = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>, and a <a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">conditional expression</a>:</p>
<pre><code>&gt;&gt;&gt; listA = [10, 12, 3, 8, 9, 17, 3, 7, 2, 8]
&gt;&gt;&gt; listB = [1, 4, 8, 9]
&gt;&gt;&gt;
&gt;&gt;&gt; list(enumerate(listA))  # Just to demonstrate
[(0, 10), (1, 12), (2, 3), (3, 8), (4, 9), (5, 17), (6, 3), (7, 7), (8, 2), (9, 8)]
&gt;&gt;&gt;
&gt;&gt;&gt; listC = [0 if x in listB else y for x,y in enumerate(listA)]
&gt;&gt;&gt; listC
[10, 0, 3, 8, 0, 17, 3, 7, 0, 0]
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">I wouldn't be so sure the former is faster: it does a slow list membership test for each index and an <code>enumerate</code> call.  The second approach does one fast copy and then only zeroes as many elements as it needs to.</span>
<span class="comment-copy">Heh, you're probably right. It's funny how easy it is to fall into the trap of always assuming a list comprehension is better</span>
<span class="comment-copy">Thanks for the reply.  In my actual data, listA has one million items and listB has 1089. Using %%timeit gives 27.5 seconds for the first approach and only 13ms for the second. Can that be right? It seems a huge difference.</span>
<span class="comment-copy">@MichaelMaggs: testing membership in lists is slow, because the elements have to be scanned one by one (and if an element isn't found, you don't know that until you've scanned the entire list).  It should be much faster if you did <code>setB = set(listB)</code> and then used <code>not in setB</code> instead of <code>not in listB</code>.</span>
<span class="comment-copy">Yes, that makes a big difference. It brings the time for the list comprehension from 27.5 seconds down to 191 ms. Still, for handling large lists the simple loop still wins on speed.</span>
<span class="comment-copy">Many thanks for the help. I'd be happy to accept this, as it works fine, but as I can only accept one reply I've decided to go for mhlester's which also included an alternative approach.</span>
