<div class="post-text" itemprop="text">
<p>I need to find all functions in a Python project which are recursive (i.e. call themselves).
Any ideas how to approach this?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's hard to say whether function recursive or not before it runs. I would personally use this one with <a href="https://docs.python.org/3/library/inspect.html?highlight=inspect#inspect.getclosurevars" rel="nofollow"><code>inspect.getclosurevars</code></a> (added in Python 3.3):</p>
<pre><code>import sys

if sys.version_info &gt;= (3, 3, 0):
    from inspect import getclosurevars

def is_recursive(func):
    if sys.version_info &gt;= (3, 3, 0):
        return getclosurevars(func).globals.get(func.__name__) is func
    else:
        # We can implement part of it if it's not in our standard library 
        def global_vars_in_closure(func):
            vars = {x: func.__globals__.get(x) for x in func.__code__.co_names}
            return vars

        return global_vars_in_closure(func).get(func.__name__) is func
</code></pre>
<p>It will work correctly in <em>most</em> use cases, just remember to use <code>func_X</code> instead of <code>__X__</code> as function methods on Python 2. It will fail <strong>only</strong> if a function contain a reference to itself without call:</p>
<pre><code>def false_recursive():
    false_recursive

def true_recursive():
    true_recursive()

assert is_recursive(true_recursive), 'Must not fail'
assert not is_recursive(false_recursive), 'See? It fails' # AssertionError: See? It fails
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can parse the source code with <code>ast</code>:</p>
<pre><code>code = """
def f(x):
    f(x)

def g(x):
    pass
"""

import ast

class FindRecursiveFunctions(ast.NodeVisitor):
    def __init__(self):
        self._current_func = None
        self.recursive_funcs = set()

    def generic_visit(self, node):
        if node.__class__ is ast.FunctionDef:
            self._current_func = node.name
        if node.__class__ is ast.Call and node.func.id == self._current_func:
            self.recursive_funcs.add(self._current_func)
        super(FindRecursiveFunctions, self).generic_visit(node)

&gt;&gt;&gt; tree = ast.parse(code)
&gt;&gt;&gt; finder = FindRecursiveFunctions()
&gt;&gt;&gt; finder.visit(tree)
&gt;&gt;&gt; finder.recursive_funcs
set(['f'])
</code></pre>
</div>
<span class="comment-copy">Extract functions, one at a time. Parse the function name, with, parameters. See if they call themselves. The first part is probably the tricky one. <code>inspect</code> might be applicable.</span>
<span class="comment-copy">Maybe grahically using <code>pycallgraph</code>, see <a href="http://pycallgraph.slowchop.com/en/master/" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">Note that this won't detect the case where the function was passed itself from outside, and will false-positive in cases where for example the function returns (but does not call) itself or passes itself to some other function/class. There isn't really a general way to detect recursion with 100% certainty pre-runtime in a language with first-class function objects. But for the purpose of what I assume is an assignment, this will probably work.</span>
<span class="comment-copy">It will also give a false positive if the function is mentioned in comments or docstrings, which can be fairly common with doctest et al.</span>
<span class="comment-copy">@MatthewTrevor updated, take a look</span>
<span class="comment-copy">While this is a generally elegant solution, it can be broken if you have any nested function definitions. For example, move the definition of <code>g</code> into the <code>f</code> function before the recursive call, and the recursion won't be detected any more. I'd also expect that you'd get false positives if you define a nested function, then call it (from the outer function).</span>
