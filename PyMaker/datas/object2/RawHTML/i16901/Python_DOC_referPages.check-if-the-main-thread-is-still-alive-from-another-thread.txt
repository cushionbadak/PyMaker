<div class="post-text" itemprop="text">
<p><strong>How can I check if the Main Thread is alive from another ( non-daemon, child ) thread?</strong></p>
<p>The child thread is a non-daemon thread and I'd like to check if the Main thread is still running or not, and stop this non-daemon thread based on the result.</p>
<p>( Making the thread daemon is not good for my situation because my thread writes to <em><code>stdout</code></em> which creates problems when the thread is set as a daemon)</p>
<p>Using python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p>For Python 2.7 you can try this:</p>
<pre><code>for i in threading.enumerate():
   if i.name == "MainThread":
       print i.is_alive()
</code></pre>
<p>The usage of lower camel case in function names is deprecated and so you should  be using <code>i.is_alive()</code> instead of <code>i.isAlive()</code>.</p></li>
<li><p>If you like one-liners try this:</p>
<pre><code>is_main_thread_active = lambda : any((i.name == "MainThread") and i.is_alive() for i in threading.enumerate())
</code></pre>
<p>Then call <code>is_main_thread_active()</code> to check if the Main Thread is active.</p>
<p>For one time use, however, you could use this directly without creating a function.</p>
<p><code>any((i.name == "MainThread") and i.is_alive() for i in threading.enumerate())</code></p></li>
<li><p>Check <a href="https://docs.python.org/3/library/threading.html" rel="nofollow">this page</a> for more info about threading.</p></li>
<li><p>In python 3.4 a dedicated function to return the main thread exists and so you can use this one liner to see if your main thread is still alive..</p>
<pre><code>threading.main_thread().is_alive()
</code></pre></li>
</ul>
<p>Hope this helps you.</p>
</div>
<span class="comment-copy">What's your definition of "still running"? Do you mean still performing an operation? Or still alive?</span>
<span class="comment-copy">I mean that it's still alive</span>
<span class="comment-copy">You could pass the stream to write to as part of the other context data given to the thread. Then there wouldn't be anything that keeps you from making the thread a daemon.</span>
<span class="comment-copy">@UlrichEckhardt How can I do that? I'm simply using <code>print</code> in the thread</span>
<span class="comment-copy">Don't use <code>print</code> but <code>some_stream.write()</code> instead.</span>
<span class="comment-copy">Awesome! works great.</span>
