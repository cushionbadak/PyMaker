<div class="post-text" itemprop="text">
<p>Why is this code</p>
<pre><code>for i in range(10):
    if i == 5: print i
</code></pre>
<p>valid while the compound statement (I know that <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8 discourages</a> such coding style)</p>
<pre><code>for i in range(10): if i == 5: print i
</code></pre>
<p>is not?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because python has strict rules about indentation being used to represent blocks of code and by putting an <code>for</code> followed by an <code>if</code>, you create ambiguous indentation interpretations and thus python does not allow it.</p>
<p>For python, you can put as many lines as you want after a <code>if</code> statement:</p>
<pre><code>if 1==1: print 'Y'; print 'E'; print 'S'; print '!';
</code></pre>
<p>as long as they all have the same indentation level, i.e., no <code>if</code>, <code>while</code>, <code>for</code> as they introduce a deeper indentation level.</p>
<p>Hope that helps</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason <em>why</em> you cannot is because <a href="https://docs.python.org/2/reference/compound_stmts.html#the-for-statement" rel="nofollow">the language simply doesn't support it</a>:</p>
<pre><code>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</code></pre>
<p>It has been <a href="https://mail.python.org/pipermail/python-ideas/2014-March/027141.html" rel="nofollow">suggested many times</a> on the Python mailing lists, but has never really gained traction because it's already possible to do using existing mechanisms...</p>
<p>Such as a filtered generator expression:</p>
<pre><code>for i in (i for i in range(10) if i == 5):
    ...
</code></pre>
<p>The advantage of this over the list comprehension is that it doesn't generate the entire list before iterating over it.</p>
</div>
<div class="post-text" itemprop="text">
<p>using  list comprehension:</p>
<pre><code>In [10]: [x for x in range(10) if x ==5][0]
Out[10]: 5
</code></pre>
</div>
<span class="comment-copy">Try using a list comprehension</span>
<span class="comment-copy">A list-comp is clearly incorrect for the above loop, since it would just build up a list of <code>None</code>s.</span>
<span class="comment-copy">@roippi Not so. It would <i>only</i> include values of 5.</span>
<span class="comment-copy">@MatthewTrevor no.  He is only <code>print</code>ing, there is no list being made.  <code>[print(x) for x in range(10)]</code> is an abuse of list comprehension syntax and should be avoided.</span>
<span class="comment-copy">@roippi Not if the comprehension feeds the for loop, which is what I took Daenyth's suggestion to mean.</span>
<span class="comment-copy">This is documented in the <code>Python Language Reference</code> document under <code>Compound statements</code> (<a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow noreferrer">docs.python.org/3/reference/compound_stmts.html</a>): "A suite can be one or more semicolon-separated simple statements on the same line as the header, following the headerâ€™s colon, or it can be one or more indented statements on subsequent lines. Only the latter form of suite can contain nested compound statements [...]".</span>
<span class="comment-copy">Including an <code>if</code> clause with a <code>for</code> statement is not really what the OP is asking about.  Disallowing multiple compound statements on the same line is a more general issue.</span>
<span class="comment-copy">@NedDeily good catch</span>
<span class="comment-copy">why the downvote?</span>
<span class="comment-copy">The OP was asking a "why" question, I don't see how your answer helps.</span>
<span class="comment-copy">You don't see any relation?</span>
<span class="comment-copy">I don't, the answer has to do with indentation rules, as explained by @sshashank124. As OP question stands, they were looking for an explanation of why certain code does not work, not a hacky 1-liner that does something similar. Your code is different, OP only intends to print an element, not create a list as you do.</span>
