<div class="post-text" itemprop="text">
<p>I studied predominantly in C and spent a lot of time understanding its implementation under the hood. But I've recently begun learning python. So there are a lot of quirks here different from C.</p>
<p>How does the 'in' statement work in python? </p>
<pre><code>if x in array:
   #the usage of an in statement produces a boolean
for x in array:
   #the usage of an in statement produces an iterable
</code></pre>
<p>Also as a side question. 'Not' can be placed in front of a boolean expression, similar to '!' in C or it can be placed in front of the 'in' statement in python. How is this possible?</p>
<pre><code>if not x == 5:
   #makes sense because 'x == 5' evaluates to a boolean
if x not in array:
   #the statement 'in array' is not a boolean
   #shouldn't it be 'if not x in array'
</code></pre>
<p>How are both of these possible? Shouldn't there be a consistency in how they are evaluated? Right now, I believe that it's because Python is an interpreted language, the interpreter can just do different things based on the surrounding syntax.</p>
<p>An explanation or link to an explanation would be super helpful, I've been unable to find anything addressing this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are confusing two <em>totally unrelated</em> pieces of syntax. </p>
<p>One is a <em>statement</em>, see the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer"><code>for</code> statement</a> documentation. The <code>in</code> is part of the fixed grammar:</p>
<pre><code>for_stmt ::=  “for” target_list “in” expression_list “:” suite
              [“else” “:” suite]
</code></pre>
<p>The moment you use <code>for</code> to start a line, the <code>in</code> part is required, just as the <code>:</code> is required. And don't confuse Python's <code>for</code> with a C <code>for</code> loop; Python's is a <a href="https://en.wikipedia.org/wiki/Foreach" rel="nofollow noreferrer"><em>For Each</em> construct</a>. As such it doesn't 'produce' an iterable, it requires an iterable as input.</p>
<p>The other is a <a href="https://docs.python.org/3/reference/expressions.html#membership-test-operations" rel="nofollow noreferrer"><em>membership test operation</em></a>, and operators are a type of <em>expression</em>:</p>
<blockquote>
<p>The operators <code>in</code> and <code>not in</code> test for membership.</p>
</blockquote>
<p>It is meant to apply to containers (not just iterables).</p>
<p>Both are leaning heavily on Python's OO nature, something C can't do. If you want to find equivalents in other languages, look at concepts in C++, Java or C#, not at C.</p>
<p><code>for &lt;expr&gt; in &lt;iterable&gt;</code> takes an <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer"><em>iterable object</em></a>, something that can produce elements, one after another. C++ has an <a href="http://www.cplusplus.com/reference/iterator/" rel="nofollow noreferrer">equivalent concept</a>, in Java there are parallels in <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html" rel="nofollow noreferrer">iterators</a> and <a href="https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html" rel="nofollow noreferrer">streams</a>.</p>
<p><code>&lt;expr&gt; [not] in &lt;expr&gt;</code> only requires that the right-hand expression result supports membership testing, but Python will fall back to iteration if no explicit hooks are available for a membership test. The <code>not</code> in <code>not in</code> simply inverts the result of the <code>in</code> operation. </p>
<p>C++ and Java have no standard abstraction for this, different container types each implement their own spelling (in C++ most call it <code>find</code>, e.g. <a href="http://www.cplusplus.com/reference/set/set/find/" rel="nofollow noreferrer"><code>set::find</code></a> or <a href="http://en.cppreference.com/w/cpp/container/map/find" rel="nofollow noreferrer"><code>map::find</code></a>, while Java usually picks <code>contains</code> variations, giving you <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Set.html#contains%28java.lang.Object%29" rel="nofollow noreferrer"><code>Set.contains()</code></a>, and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#containsKey-java.lang.Object-" rel="nofollow noreferrer"><code>Map.containsKey()</code></a>). </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>for x in array:</code> is not much different from the <a href="http://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">range based for loop</a> introduced in c++11. The syntax in c++ is also quite similar:</p>
<pre><code>int a[] = {0, 1, 2, 3, 4, 5};
for (int n : a) // the initializer may be an array
    std::cout &lt;&lt; n &lt;&lt; ' ';
</code></pre>
<p>The statements <code>if x in a:</code> and <code>for x in a:</code> do not have much to do with each other, they simply feature the same word <code>in</code>, but it has different meaning. </p>
<p>You could easily imagine how one would implement a feature similar to <code>if x in a:</code> in c++ - for instance use <a href="http://en.cppreference.com/w/cpp/algorithm/find" rel="nofollow noreferrer">std::find</a>. An alternative is to iterate over the container and compare each element to <code>x</code>. There can be specific overloads for certain types of containers to make this more performant of course, but important thing is that it <em>can</em> be implemented. </p>
</div>
<span class="comment-copy"><code>for &lt;target&gt; in &lt;iterable&gt;</code> does not have much in common with <code>&lt;expr&gt; in &lt;expr&gt;</code> other than that both syntaxes use the letters <code>i</code> and <code>n</code> in the same order.</span>
<span class="comment-copy"><code>not x in array</code> works too, but <code>not in</code> is more readable. <code>in</code> and <code>not in</code> are both operators. As Martijn Pieters said, <code>for … in</code> is unrelated and <code>in</code> is not an operator there; instead, it’s part of the <code>for</code> syntax. This has nothing to do with Python being an interpreted language.</span>
<span class="comment-copy">If you've studied C extensively, you should know a thing or two about the compiler and lexical analysis? Well, the two types of statements are quite different in that sense... They are simply compiled in an entirely different fashion..</span>
<span class="comment-copy">my question is more about how python can handle both, not which way is better</span>
<span class="comment-copy">Its the same in any language. Certain keywords have multiple uses and the compiler knows how to handle them by context. Take the <code>extern</code> keyword in <code>C</code>.</span>
