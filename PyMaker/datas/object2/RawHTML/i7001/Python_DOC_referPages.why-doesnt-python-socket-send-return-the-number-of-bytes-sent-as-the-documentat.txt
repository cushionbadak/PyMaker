<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/socket.html" rel="nofollow noreferrer">According to the docs</a>, Python's <code>socket.send()</code>:</p>
<blockquote>
<p>Returns the number of bytes sent.</p>
</blockquote>
<p>However, when I use it, it seems to return the byte that was last sent, not the total number of bytes sent.  Consider this code:</p>
<pre><code>&gt;&gt;&gt; import socket
&gt;&gt;&gt; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&gt;&gt;&gt; s.connect(('localhost', 12345))
&gt;&gt;&gt; r = s.send(bytes(1))
&gt;&gt;&gt; print(r)
1
&gt;&gt;&gt; r = s.send(bytes(15))
&gt;&gt;&gt; print(r)
15
&gt;&gt;&gt; r = s.send(bytes(150))
&gt;&gt;&gt; print(r)
150
&gt;&gt;&gt; r = s.send(bytes(255))
&gt;&gt;&gt; print(r)
255
&gt;&gt;&gt; r = s.send(bytes(0))
&gt;&gt;&gt; print(r)
0
</code></pre>
<p><a href="https://stackoverflow.com/questions/34919846/when-and-why-socket-send-returns-0-in-python">This SO post seems related</a>, though it doesn't answer my question.</p>
<p>What I'm expecting to see is <code>r == 1</code> for every line.</p>
<p><strong>Solved:</strong></p>
<p>I got it.  This works:</p>
<pre><code>&gt;&gt;&gt; y = bytearray(1)
&gt;&gt;&gt; y[0] = 125
&gt;&gt;&gt; r = s.send(y)
&gt;&gt;&gt; print(r)
1
</code></pre>
<p>The reason I put <code>bytes()</code> in there to begin with is because without it you get:</p>
<pre><code>&gt;&gt;&gt; r = s.send(125)
TypeError: a bytes-like object is required, not 'int'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the docs for <code>bytes</code> say, if the argument is an integer, then it creates a bytearray of that size.</p>
<p><a href="https://docs.python.org/3.1/library/functions.html#bytes" rel="nofollow noreferrer">https://docs.python.org/3.1/library/functions.html#bytes</a>
<a href="https://docs.python.org/3.1/library/functions.html#bytearray" rel="nofollow noreferrer">https://docs.python.org/3.1/library/functions.html#bytearray</a></p>
<p>Maybe this is what you meant to do?</p>
<pre><code>In [26]: r = s.send(b'250')

In [27]: r
Out[27]: 3
</code></pre>
<p>But even then <code>b'250'</code> returns <code>3</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The confusion is how Python 2.x and Python 3.x use the <code>bytes()</code> function.</p>
<p>In Python3, <code>bytes(100)</code> will evaluate to a 100 byte binary array filled in with zero. (<a href="https://docs.python.org/3.1/library/functions.html#bytes" rel="nofollow noreferrer">API docs</a>)
This must be the version of Python you're running as this behavior is consistent with your output.</p>
<p>In Python2, <code>bytes(100)</code> will evaluate to <code>'100'</code>.
It converts the integer into a string and then assigns the bytearray to that value.
Doing <code>help(bytes)</code> on it shows that it is actually the same as the built-in object <code>str</code>. So in Python2 <code>bytes(100)</code> behaves the same as <code>str(100)</code>.</p>
<p>Also in your examples, even according to your expected Python2 behavior, the return value would not always be <code>1</code>.
It would be the length of the string, which would be the same as the number of digits in the integer, e.g. <code>3</code> for the case of <code>bytes(100)</code>.</p>
</div>
<span class="comment-copy">Maybe you confuse <code>bytes</code> with <code>chr</code>?</span>
