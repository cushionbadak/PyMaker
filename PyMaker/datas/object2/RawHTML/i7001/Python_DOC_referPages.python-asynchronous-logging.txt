<div class="post-text" itemprop="text">
<p>I need to log plenty of data while running my system code. What logging packages I can use to have an efficient, asynchronous logging? 
Is the standard Python logging package (<a href="https://docs.python.org/2/library/logging.html" rel="nofollow noreferrer">https://docs.python.org/2/library/logging.html</a>) asynchronous by default? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can execute <code>logging.info()</code> message using a pool of <em>n</em> worker, uing <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="nofollow noreferrer">concurrent.futures.ThreadPoolExecutor</a>, n should be always equals to one :</p>
<pre><code>import concurrent.futures 
import logging

executor = concurrent.futures.ThreadPoolExecutor(max_workers=1) 

def info(self, msg, *args):
    executor.submit(logging.info, msg, *args)
</code></pre>
</div>
<span class="comment-copy">No it's not. But it easy to write your own handler that drops the message into a Queue where it is picked up by an other thread.</span>
<span class="comment-copy">@KlausD. Can you maybe explain more or suggest some link to read about it?</span>
<span class="comment-copy">If it's linux you can use syslog or syslog-ng directly which is quick to use.</span>
<span class="comment-copy">Can you maybe explain what your code is supposed to do and how it relates mine question?</span>
<span class="comment-copy">The code example shows, how to organize a kind of async queue of the "info" function calls as you requested. Very important here to have count of workers equals to one, that will give you exact order of the calls.  In the case of n more then one you can have unexpected behavior - and order of the lines in the result log will be wrong. BR, Andrew</span>
