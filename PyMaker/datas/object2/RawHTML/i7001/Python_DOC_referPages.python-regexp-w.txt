<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3.1/library/re.html" rel="nofollow noreferrer">Python manual</a> states: </p>
<blockquote>
<p>The special sequence \w for 8-bit (bytes) patterns matches characters 
  considered alphanumeric in the ASCII character set; this is equivalent to 
  [a-zA-Z0-9_].</p>
</blockquote>
<p>Compare now:</p>
<pre><code>re.search(r"([\w]+)", 'München').group(1)
</code></pre>
<p>with:</p>
<pre><code>re.search(r"([a-zA-Z0-9_]+)", 'München').group(1)  
</code></pre>
<p>The first statement outputs the whole city name München, the second only the first letter <code>M</code>. The letter <code>ü</code> is a single byte with code point <code>0xFC</code> = <code>252</code> (Latin-1). 
My question is: assuming that the Python manual is correct, how can I reconcile the difference in output between <code>[\w]+</code> and <code>[a-zA-Z0-9_]+</code>  with the statement in the Python-3 manual? I use IDLE v. 3.6.2.</p>
</div>
<div class="post-text" itemprop="text">
<p>You referenced wrong manual (manual for python 3.1).</p>
<p>The correct one is at <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a></p>
<p>If you want <code>\w</code> work like <code>[a-zA-Z0-9_]</code>, you should use the flag <code>re.ASCII</code>:</p>
<pre><code>&gt;&gt;&gt; re.search(r"([\w]+)", 'München').group(1)
'München'
&gt;&gt;&gt; re.search(r"([\w]+)", 'München', flags=re.ASCII).group(1)
'M'
&gt;&gt;&gt; re.search(r"([a-zA-Z0-9_]+)", 'München').group(1)
'M'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what source you're quoting from, but your link says:</p>
<blockquote>
<p>For Unicode (str) patterns:</p>
<p>Matches Unicode word characters; this includes most characters that can be part of a word in any language, as well as numbers and the underscore. If the ASCII flag is used, only [a-zA-Z0-9_] is matched (but the flag affects the entire regular expression, so in such cases using an explicit [a-zA-Z0-9_] may be a better choice).</p>
<p>For 8-bit (bytes) patterns:</p>
<p>Matches characters considered alphanumeric in the ASCII character set; this is equivalent to [a-zA-Z0-9_].</p>
</blockquote>
<p>I'm still primarily using Python 2, but one of the big changes in Python 3 is that all strings are Unicode by default. Python will convert text to Unicode upon reading it.</p>
</div>
<span class="comment-copy"><code>re.U</code> flag is enabled by default (=<code>\w</code> matches any  Unicode letters and digits) in Python 3. Python 3 strings are Unicode strings, not byte strings, by default.</span>
<span class="comment-copy">But I use Latin-1, not UTF-8. And should the manual not mention the re.U flag?</span>
<span class="comment-copy">What do you actually need? Make <code>\w</code> always match only <code>[A-Za-z0-9_]</code> in Python 3? Then pass <code>re.ASCII</code> flag.</span>
<span class="comment-copy">@P.Wormer The manual <i>does</i> mention that. You just didn't read the correct section. You aren't working with <code>bytes</code>, so why do you quote the <code>bytes</code> section?</span>
<span class="comment-copy">I wrote a little  Python program that counts words in a text that is in Latin-1. The text  contains single byte characters between 128 and 255 (accented characters). To my surprise \w+ did exactly what I wanted (counted words with accented characters). Now I try to understand what is going on.</span>
<span class="comment-copy">I'm sure that the text I'm reading is in Latin-1. The text  is actually older than Unicode. Maybe Python converts it somewhere (upon reading maybe?).</span>
<span class="comment-copy">Yes, Python converts it upon reading as text.</span>
<span class="comment-copy">OK that is the answer: Inadvertently I worked with UTF-8 and should have realized that the re.U flag is on. Thank you all!</span>
