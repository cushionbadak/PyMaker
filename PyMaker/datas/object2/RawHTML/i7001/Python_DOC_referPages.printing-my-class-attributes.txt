<div class="post-text" itemprop="text">
<p>these are 2 parts of my misbehaving text based adventure code that I'm trying to learn how to do with a youtube tutorial. I believe that most of my problems arise because the tutorial I'm pretty sure is using python2.something and I'm using 3.
  My problem is I'm trying to list the "Player" class attributes on the start screen, which I have successfully done with Playername, but I'm having trouble getting the numbers listed as self.attack and self.health etc to print.
  I downloaded python for the first time about 5 days ago, so bear with a noob if you can, please.
  Let me know what I can change, and thank you in advance!</p>
<pre><code>class Player:
    def _init_(self, name):
    self.name = name
    self.maxhealth = 100
    self.health = self.health
    self.attack = 10
    self.gold = 0
    self.bandages = 0

def start1():
    os.system("cls")
    print("Name: %s" % (PlayerIG))
    print("Attack: {}".format (PlayerIG.attack))
    print('Health: {}/{}'.format(PlayerIG.health, PlayerIG.maxhealth))
    print("Gold: %i") % PlayerIG.gold
    print("Bandages: %i") % PlayerIG.bandages
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A few things immediately:</p>
<ol>
<li><code>def _init_</code> needs to be <code>def __init__</code> (note the double underscores).</li>
<li><code>self.health = self.health</code> doesn't make sense - whatever is on the right side of an <code>=</code> needs to exist before you can assign some other variable to it, and <code>self.health</code> doesn't exist until that line.</li>
<li>The variable <code>PlayerIG</code> was never assigned to anything, so none of the code in <code>start1</code> will work (unless it was done somewhere else, that you haven't included in the question).</li>
</ol>
<p>A working version of what you have in your question would be something like</p>
<pre><code>class Player:
    def __init__(self, name, maxhealth, health, attack, gold, bandages):
        self.name = name
        self.maxhealth = maxhealth
        self.health = health
        self.attack = attack
        self.gold = gold
        self.bandages = bandages

def start1():
    PlayerIG = Player('foo', 100, 50, 10, 0, 0)
    print('Name: {}'.format(PlayerIG.name))
    print('Health: {}/{}'.format(PlayerIG.health, PlayerIG.maxhealth))
    print('Attack: {}'.format(PlayerIG.attack))
    print('Gold: {}'.format(PlayerIG.gold))
    print('Bandages: {}'.format(PlayerIG.bandages))

start1()
</code></pre>
<p>There are many improvements you could make from there, like defining a <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a> function for <code>Player</code> or using <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">keyword arguments</a> in your <code>__init__</code> method.</p>
</div>
<span class="comment-copy"><code>_init_</code> should be <code>__init__</code> and what's <code>PlayerIG</code>?</span>
<span class="comment-copy"><code>print("Gold: %i") % PlayerIG.gold</code> this is obviously incorrect syntax.</span>
<span class="comment-copy"><code>self.health = self.health</code> is meaningless.</span>
<span class="comment-copy">Ah thank you. <b>init</b>, ok @AshwiniChaudhary.  Ok COLDSPEED, I'm going through it as the problems come up, not done. And yes lincr, i wondered about that earlier, I was just following along for the time being until I understood a bit more</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Amusingly, I believe that syntax runs correctly on Python 2, so it's possible that the OP's Youtube tutorial was made by a Python 2 coder with very poor knowledge of Python 3.</span>
