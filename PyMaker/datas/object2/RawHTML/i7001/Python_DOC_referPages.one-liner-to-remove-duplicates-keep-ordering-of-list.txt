<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/480214/how-do-you-remove-duplicates-from-a-list-whilst-preserving-order">How do you remove duplicates from a list whilst preserving order?</a>
<span class="question-originals-answer-count">
                    24 answers
                </span>
</li>
</ul>
</div>
<p>I have the following list:</p>
<pre><code>['Herb', 'Alec', 'Herb', 'Don']
</code></pre>
<p>I want to remove duplicates while keeping the order, so it would be :</p>
<pre><code>['Herb', 'Alec', 'Don']
</code></pre>
<p>Here is how I would do this verbosely:</p>
<pre><code>l_new = []
for item in l_old:
    if item not in l_new: l_new.append(item)
</code></pre>
<p>Is there a way to do this in a single line?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use an <code>OrderedDict</code>, but I suggest sticking with your for-loop.</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; data = ['Herb', 'Alec', 'Herb', 'Don']
&gt;&gt;&gt; list(OrderedDict.fromkeys(data))
['Herb', 'Alec', 'Don']
</code></pre>
<p>Just to reiterate: I <strong>seriously suggest</strong> sticking with your for-loop approach, and use a <code>set</code> to keep track of already seen items:</p>
<pre><code>&gt;&gt;&gt; data = ['Herb', 'Alec', 'Herb', 'Don']
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; unique_data = []
&gt;&gt;&gt; for x in data:
...     if x not in seen:
...         unique_data.append(x)
...         seen.add(x)
...
&gt;&gt;&gt; unique_data
['Herb', 'Alec', 'Don']
</code></pre>
<p>And in case you just want to be wacky (<strong>seriously don't do this</strong>):</p>
<pre><code>&gt;&gt;&gt; [t[0] for t in sorted(dict(zip(reversed(data), range(len(data), -1, -1))).items(), key=lambda t:t[1])]
['Herb', 'Alec', 'Don']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a set to remove duplicates and then restore ordering. And it's just as slow as your original, yaeh :-)</p>
<pre><code>&gt;&gt;&gt; sorted(set(l_old), key=l_old.index)
['Herb', 'Alec', 'Don']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using pandas, create a series from the list, drop duplicates, and then convert it back to a list.</p>
<pre><code>import pandas as pd

&gt;&gt;&gt; pd.Series(['Herb', 'Alec', 'Herb', 'Don']).drop_duplicates().tolist()
['Herb', 'Alec', 'Don']
</code></pre>
<p><strong>Timings</strong></p>
<p>Solution from @StefanPochmann is the clear winner for lists with high duplication.</p>
<pre><code>my_list = ['Herb', 'Alec', 'Don'] * 10000

%timeit pd.Series(my_list).drop_duplicates().tolist()
# 100 loops, best of 3: 3.11 ms per loop

%timeit list(OrderedDict().fromkeys(my_list))
# 100 loops, best of 3: 16.1 ms per loop

%timeit sorted(set(my_list), key=my_list.index)
# 1000 loops, best of 3: 396 Âµs per loop
</code></pre>
<p>For larger lists with no duplication (e.g. simply a range of numbers), the pandas solution is very fast.</p>
<pre><code>my_list = range(10000)

%timeit pd.Series(my_list).drop_duplicates().tolist()
# 100 loops, best of 3: 3.16 ms per loop

%timeit list(OrderedDict().fromkeys(my_list))
# 100 loops, best of 3: 10.8 ms per loop

%timeit sorted(set(my_list), key=my_list.index)
# 1 loop, best of 3: 716 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really don't care about optimizations and stuff you can use the following:</p>
<pre><code>s = ['Herb', 'Alec', 'Herb', 'Don']
[x[0] for x in zip(s, range(len(s))) if x[0] not in s[:x[1]]]
</code></pre>
<blockquote>
<p>Note that in my opinion you really should use the <code>for</code> loop in your question or the answer by @juanpa.arrivillaga</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>l = ['Herb', 'Alec', 'Herb', 'Don']
data = [i[-1] for i in sorted([({a:i for i, a in enumerate(l)}[a], a) for a in set({a:i for i, a in enumerate(l)}.keys())], key = lambda x: x[0])]
</code></pre>
<p>Output:</p>
<pre><code>['Alec', 'Herb', 'Don']
</code></pre>
<p>This algorithm merely removes the first instance of a duplicate value.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>l_new = []
for item in l_old:
    if item not in l_new: l_new.append(item)
</code></pre>
<p>In one line..ish:</p>
<pre><code>l_new = []

[ l_new.append(item)  for item in l_old if item not in l_new]
</code></pre>
<p>Which has the behavior:</p>
<pre><code>&gt; a = [1,1,2,2,3,3,4,5,5]
&gt; b = []
&gt; [ b.append(item) for item in a if item not in b]
&gt; print(b)
[1,2,3,4,5]
</code></pre>
</div>
<span class="comment-copy">@Dekel I understand, my question is looking for a one-liner though to do that.</span>
<span class="comment-copy">many of the answers from that question have one liners using different approaches</span>
<span class="comment-copy">Why would you suggest against the above though?</span>
<span class="comment-copy">@David542 because it is inefficient and not explicit. Indeed, almost any one-liner will be, I suspect.</span>
<span class="comment-copy">@StefanPochmann I've edited to explicitly include what I <i>meant</i> to imply.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>OrderedDict.fromkeys</code> is a class method</a>, no? So there's no need to create an <code>OrderedDict</code> instance. <code>list(OrderedDict.fromkeys(data))</code> would work.</span>
<span class="comment-copy">@ChristianDean yep, silly mistake on my  part. Thanks for pointing it out. I think I originally started writing something like <code>OrderedDict((k, None) for k in data)</code> and then was like, oh wait, <code>.fromkeys</code>already exists...</span>
<span class="comment-copy">Hah! I find that solutions hilarious! It's inspired me as well...</span>
<span class="comment-copy">How fitting for you to use <i>pandas</i> ;-)</span>
<span class="comment-copy">@ChristianDean A pandas developer using pandas... shocking.</span>
<span class="comment-copy">@StefanPochmann You realize I'm talking about his profile picture, right?</span>
<span class="comment-copy">@ChristianDean I do, but I think you got it backwards. I think it's the pic that's fitting his use of pandas, not the other way around.</span>
<span class="comment-copy">@Alexander While I do like winning things, I do need to point out that your test case is extreeeemely unfair towards the other solutions (because it's unreasonably good for mine).</span>
<span class="comment-copy">Your one-line solution needs a semicolon: <code>l_new = []; [l_new.append(item)  for item in l_old if item not in l_new]</code></span>
<span class="comment-copy">But that would be cheating :P</span>
<span class="comment-copy">Then do it <i>inside</i> the comprehension.</span>
<span class="comment-copy">@Erich Huh? You're already doing that. With <code>item</code>. Ok, here's a way: <code>[l_new.append(item) or l_new for l_new in [[]] for item in l_old if item not in l_new][0]</code></span>
<span class="comment-copy">Ahhh, I see. I thought that I would have to create something which existed outside of the scope of the comprehension but your empty list trick is very cool :)</span>
