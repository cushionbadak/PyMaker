<div class="post-text" itemprop="text">
<p>I have database with a single table <code>Person</code> which has a <code>name(str)</code> and <code>age(int)</code> columns. So, I create simple validate function for my <code>sqlite3.connection</code><br/></p>
<pre><code>def adult(age):
    return age &gt; 18
</code></pre>
<p>And with following code, it works fine</p>
<pre><code>connection = sqlite3.connect(r'C:\Dev\Garbage\database.db')
with connection:
    connection.create_function('adult', 1, adult)
    cursor = connection.cursor()
    persons = cursor.execute('select "p"."name", "p"."age" from "Person" "p" where adult("p"."age")').fetchall()
    for person in persons:
        print(person)
</code></pre>
<p>But if I change <code>adult</code> like this</p>
<pre><code>def adult(age):
    return 1 / 0
</code></pre>
<p>I will get <code>sqlite3.OperationalError: user-defined function raised exception</code>.
In my project, it might be a huge amount of functions and I'd like to know - <strong>is there any way to know which function raised an exception? Or get <code>ZeroDivisionError: division by zero</code> instead of this.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <code>sqlite3</code> module throws away any error information from the exception, and replaces it with the constant message you've seen:</p>
<pre class="lang-c prettyprint-override"><code>void _pysqlite_func_callback(sqlite3_context* context, int argc, sqlite3_value** argv)
{
    ...
    py_func = (PyObject*)sqlite3_user_data(context);

    args = _pysqlite_build_py_params(context, argc, argv);
    if (args) {
        py_retval = PyObject_CallObject(py_func, args);
        Py_DECREF(args);
    }

    ok = 0;
    if (py_retval) {
        ok = _pysqlite_set_result(context, py_retval) == 0;
        Py_DECREF(py_retval);
    }
    if (!ok) {
        if (_enable_callback_tracebacks) {
            PyErr_Print();
        } else {
            PyErr_Clear();
        }
        sqlite3_result_error(context, "user-defined function raised exception", -1);
    }
    ...
}
</code></pre>
<p>I don't know what prevents it from appending the exception message to the returned error message.</p>
<p>Anyway, it is possible to print out the inner stack trace by calling <a href="https://docs.python.org/2/library/sqlite3.html#sqlite3.enable_callback_tracebacks" rel="nofollow noreferrer">enable_callback_tracebacks</a>:</p>
<pre><code>import sqlite3

db = sqlite3.connect(':memory:')

def error():
    raise Exception('hello')

db.create_function('error', 0, error)

sqlite3.enable_callback_tracebacks(True)   # &lt;-- !

db.execute('select error()')
</code></pre>
<pre>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in error
Exception: hello
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in 
sqlite3.OperationalError: user-defined function raised exception
</pre>
</div>
<span class="comment-copy">couldn't you use a try except block, and raise the ZeroDivisionError on the except?</span>
<span class="comment-copy">@KevinPasquarella it's just an example. I'd like to know about any exceptions that can appear.</span>
<span class="comment-copy">Do you know in advance how you want to handle any arbitrary exception that might be raised?  Can you post an actual Traceback?</span>
<span class="comment-copy">Seems like some combination of the <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow noreferrer">traceback</a>, <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">inspect</a> and <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a> modules might help. There are an number of SO Q&amp;A's that may be relevant; like - <a href="https://stackoverflow.com/q/1095601/2823755">stackoverflow.com/q/1095601/2823755</a>. Or <a href="https://stackoverflow.com/q/5067604/2823755">stackoverflow.com/q/5067604/2823755</a></span>
<span class="comment-copy">@Yes, I'd like to tell about it to the user. It's complete traceback. I mean, trace stack contains only this call. Thanks for the advice, will try to find a solution.</span>
