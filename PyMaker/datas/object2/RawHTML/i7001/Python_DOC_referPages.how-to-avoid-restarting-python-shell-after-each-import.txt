<div class="post-text" itemprop="text">
<p>When I run the terminal then access to python3 shell, I can run a file or module using import, but if I try to run it again, nothing happens.</p>
<p>I saw this question before: [<a href="https://stackoverflow.com/questions/3374542/need-to-restart-python-in-terminal-every-time-a-change-is-made-to-script][1]">Need to restart python in Terminal every time a change is made to script</a></p>
<p>and I read the docs: [<a href="https://docs.python.org/3/tutorial/modules.html#executing-modules-as-scripts][1]" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#executing-modules-as-scripts][1]</a></p>
<p>but both are talking about restarting a single function in the module. I am talking about rerunning the whole file.
I included this code in the end of my file, but still nothing happened</p>
<pre><code>if __name__ == "__main__":
        pass
</code></pre>
<p><strong>UPDATE:</strong> 
After I ran the file as in the comments, this is what I got:</p>
<pre><code>Ms-MBP:mine M$ python3
Python 3.6.2 (v3.6.2:5fd33b5926, Jul 16 2017, 20:11:06) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; python python_file.py
  File "&lt;stdin&gt;", line 1
    python python_file.py
                     ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the comments, if you're working in a terminal you should use the command (remember to do this from the main shell, ie probably bash, not from the Python shell)</p>
<pre><code>$ python script.py
</code></pre>
<p>This is the intended way to execute python files. You can normally quickly cycle back to the previous command with the UP arrow on your keyboard.</p>
<p>However, if you for some reason really need to run your script from the interactive interpreter, there are some options, although beware that they are kind of hacky and probably not the best way to go about running your code, although this may vary with what your specific use case is.</p>
<p>If your script, <code>hello.py</code>, had the following source:</p>
<pre><code>print("hello world")
</code></pre>
<p>In python3 you could do the following from the shell:</p>
<pre><code>&gt;&gt;&gt; from importlib import reload
&gt;&gt;&gt; import hello
hello world
&gt;&gt;&gt; reload(hello)
hello world
&lt;module 'hello' from '/home/izaak/programmeren/stackoverflow/replrun/hello.py'&gt;
</code></pre>
<p><a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer">Here</a> is the documentation for <code>importlib.reload</code>. As you can see, this replicates the side effects of the script. The second part is the <code>repr()</code> of the module, as the <code>reload()</code> function returns the module - this is nothing to worry about, it is part of the way the interpreter works, in that it prints the value of anything you enter into it - eg you can do</p>
<pre><code>&gt;&gt;&gt; 2 + 3
5
</code></pre>
<p>rather than having to explicitly <code>print(2 + 3)</code>. If this really bother you, you could do</p>
<pre><code>&gt;&gt;&gt; from importlib import reload as _reload
&gt;&gt;&gt; def reload(mod):
...     _reload(mod)
... 
&gt;&gt;&gt; import hello
hello world
&gt;&gt;&gt; reload(hello)
hello world
</code></pre>
<p>However, it would be more idiomatic for your script to look something like this, using that <code>if</code> statement you found (this was also a suggestion in the comments):</p>
<pre><code>def main():
    print("hello world")

if __name__ == "__main__":
    main()
</code></pre>
<p>This way, from the Python shell you can do:</p>
<pre><code>&gt;&gt;&gt; import hello
&gt;&gt;&gt; hello.main()
hello world
&gt;&gt;&gt; hello.main()
hello world
</code></pre>
<p>This is very good practice. The <code>if</code> statement here checks if the script is being executed as the 'main' script (like running it directly from the command line, as in my first suggestion), and if so it executes the main function. This means that the script will not do anything if another script wants to <code>import</code> it, allowing it to act more like a module.</p>
<p>If you're using IPython, you'll probably know this but this becomes a lot easier and you can do</p>
<pre><code>In [1]: %run hello.py
hello world
</code></pre>
</div>
<span class="comment-copy">The way to run a script is to run the command <code>python my_python_file.py</code> in the terminal.</span>
<span class="comment-copy"><code>import</code> is not intended as a "run this file" system. Have the file define a function to perform its functionality, and call the function.</span>
<span class="comment-copy">Thanks everyone, but I meant how to run it in the interpreter many times not from the normal terminal.</span>
<span class="comment-copy">@iCoder you <i>should</i> not paste the answer into your question. The answer is below, everyone can see it. You <i>must</i> not delete a relevant part of your question when doing so, because afterwards, the answers don't make sense anymore.</span>
<span class="comment-copy">Thanks a lot. But is there any differences between running a script from the terminal or the interpreter. Or running it from the IDLE?</span>
<span class="comment-copy">There isn't necessarily a difference, but the interpreter isn't really designed for running your scripts. To execute any python code you'd almost always want to use <code>$ python hello.py</code> in the terminal (bash), rather than any solution in the interpreter. If you're working in IDLE, you should be able to just run your file using some menu option (refer to <a href="https://stackoverflow.com/questions/6513967/running-python-script-from-idle-on-windows-7-64-bit" title="running python script from idle on windows 7 64 bit">stackoverflow.com/questions/6513967/â€¦</a>)</span>
