<div class="post-text" itemprop="text">
<p>Let's say I have something like this:</p>
<pre><code>    list(range(9:12))
</code></pre>
<p>Which gives me a list:</p>
<pre><code>    [9,10,11]
</code></pre>
<p>However I want it to be like:</p>
<pre><code>    [9,1,0,1,1]
</code></pre>
<p>Which splits every integer into single digits, is there anyway of achieving this without sacrificing too much performance?  Or is there a way of generating list like these in the first place?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can build the final result efficiently without having to build one large and/or small intermediate strings using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>. </p>
<pre><code>In [18]: list(map(int, chain.from_iterable(map(str, range(9, 12)))))
Out[18]: [9, 1, 0, 1, 1]
</code></pre>
<hr/>
<pre><code>In [12]: %%timeit
    ...: list(map(int, chain.from_iterable(map(str, range(9, 20)))))
    ...: 
100000 loops, best of 3: 8.19 µs per loop

In [13]: %%timeit
    ...: [int(i) for i in ''.join(map(str, range(9, 20)))]
    ...: 
100000 loops, best of 3: 9.15 µs per loop

In [14]: %%timeit
    ...: [int(x) for i in range(9, 20) for x in str(i)]
    ...: 
100000 loops, best of 3: 9.92 µs per loop
</code></pre>
<p>Timings scale with input. The <em>itertools</em> version also <strong>uses memory efficiently</strong> although it is marginally slower than the <code>str.join</code> version if used with <code>list(map(int, ...))</code>:</p>
<pre><code>In [15]: %%timeit
    ...: list(map(int, chain.from_iterable(map(str, range(9, 200)))))
    ...: 
10000 loops, best of 3: 138 µs per loop

In [16]: %%timeit
    ...: [int(i) for i in ''.join(map(str, range(9, 200)))]
    ...: 
10000 loops, best of 3: 159 µs per loop

In [17]: %%timeit
    ...: [int(x) for i in range(9, 200) for x in str(i)]
    ...: 
10000 loops, best of 3: 182 µs per loop

In [18]: %%timeit
    ...: list(map(int, ''.join(map(str, range(9, 200)))))
    ...: 
10000 loops, best of 3: 130 µs per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>simplest way is, </p>
<pre><code>&gt;&gt;&gt; [int(i) for i in range(9,12) for i in str(i)]
[9, 1, 0, 1, 1]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Convert the integers to strings, then <code>split()</code> the string and reconvert the digits back to ints.</p>
<pre><code>li = range(9,12)

digitlist = [int(d) for number in li for d in str(number)]
</code></pre>
<p>Output:</p>
<pre><code>[9,1,0,1,1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've investigated how performant I can make this a little more. The first function I wrote was <code>naive_single_digits</code>, which uses the <code>str</code> approach, with a pretty efficient list comprehension.</p>
<pre><code>def naive_single_digits(l):
    return [int(c) for n in l
                   for c in str(n)]
</code></pre>
<p>As you can see, this approach works:</p>
<pre><code>In [2]: naive_single_digits(range(9, 15))
Out[2]: [9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4]
</code></pre>
<p>However, I thought that it would surely be unecessary to always build a <code>str</code> object for each item in the list - all we actually need is a base conversion to digits. Out of laziness, I copied this function from <a href="https://stackoverflow.com/questions/2267362/how-to-convert-an-integer-in-any-base-to-a-string">here</a>. I've optimised it a bit by specifying it to base 10.</p>
<pre><code>def base10(n):
    if n == 0:
        return [0]
    digits = []
    while n:
        digits.append(n % 10)
        n //= 10
    return digits[::-1]
</code></pre>
<p>Using this, I made</p>
<pre><code>def arithmetic_single_digits(l):
    return [i for n in l
              for i in base10(n)]
</code></pre>
<p>which also behaves correctly:</p>
<pre><code>In [3]: arithmetic_single_digits(range(9, 15))
Out[3]: [9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4]
</code></pre>
<p>Now to time it. I've also tested against one other answer (full disclosure: I modified it a bit to work in Python2, but that shouldn't have affected the performance much)</p>
<pre><code>In [11]: %timeit -n 10 naive_single_digits(range(100000))
10 loops, best of 3: 173 ms per loop

In [10]: %timeit -n 10 list(map(int, itertools.chain(*map(str, range(100000)))))
10 loops, best of 3: 154 ms per loop

In [12]: %timeit arithmetic_single_digits(range(100000))
10 loops, best of 3: 93.3 ms per loop
</code></pre>
<p>As you can see <code>arithmetic_single_digits</code> is actually somewhat faster, although this is at the cost of more code and possibly less clarity. I've tested against ridiculously large inputs, so you can see a difference in performance - at any kind of reasonable scale, every answer here will be blazingly fast. Note that python's integer arithmetic is probably actually relatively slow, as it doesn't use a primitive integer type. If this were to be implemented in C, I'd suspect my approach to get a bit faster.</p>
<p>Comparing this to viblo's answer, using (pure) Python 3 (to my shame I haven't installed ipython for python 3):</p>
<pre><code>print(timeit.timeit("digits(range(1, 100000))", number=10, globals=globals()))
print(timeit.timeit("arithmetic_single_digits(range(1, 100000))", number=10, globals=globals()))
</code></pre>
<p>This has the output of:</p>
<pre><code>3.5284318959747907
0.806847038998967
</code></pre>
<p>My approach is quite a bit faster, presumably because I'm purely using integer arithmetic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way to write an arithmetic solution. Compared to Izaak van Dongens solution this doesnt use a while loop but calculates upfront how many iterations it need in the list comprehension/loop.</p>
<pre><code>import itertools, math

def digits(ns):
    return list(itertools.chain.from_iterable(
        [
            [
                (abs(n) - (abs(n) // 10 **x)*10**x ) // 10**(x-1) 
                for x 
                in range(1+math.floor(math.log10(abs(n) if n!=0 else 1)), 0, -1)] 
            for n in ns
        ]
    ))

digits([-11,-10,-9,0,9,10,11])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Turn it to a string then back into a list :)</p>
<pre><code>lambda x: list(''.join(str(e) for e in x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do with map function</p>
<pre><code>a=range(9,12)
res = []
b=[map(int, str(i)) for i in a]
for i in b:
    res.extend(i)

print(res)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here is how I did it:</p>
<pre><code>ls =  range(9,12)
lsNew = []
length = len(ls)
for i in range(length):
    item = ls[i]
    string = str(item)
    if len(string) &gt; 1:
        split = list(string)
        lsNew = lsNew + split
    else:
        lsNew.append(item)
ls = lsNew
print(ls)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def breakall(L):
  if L == []:
    return []
  elif L[0] &lt; 10:
    return [L[0]] + breakall(L[1:])
  else: 
    return breakall([L[0]//10]) + [L[0] % 10] + breakall(L[1:]) 

print(breakall([9,10,12]))
--&gt;
[9, 1, 0, 1, 2]
</code></pre>
</div>
<span class="comment-copy">Awesome : D. You're a braver person than I to get into the guts of the arithmetic like that. By the way, for <code>digits([0])</code> you get a math domain error, although 0 does have digits.</span>
<span class="comment-copy">Thanks, I updated the code to handle 0 and negative integers. Unfortunately its hopelessly slow compared to the other solutions.</span>
