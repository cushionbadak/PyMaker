<div class="post-text" itemprop="text">
<p>Let's say I do this:</p>
<pre><code>from multiprocessing import Process

def a():
    #Do something

x = Process(target = a)
x.start()
</code></pre>
<p>I want to use <code>x.terminate()</code> within the defined function but to do that I would need to add x as an argument, WHILE defining x and that isn't possible.</p>
<p>So my question is, how do I terminate the process within the function?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just <code>return</code> from <code>a</code>, and the process will end. (Implicitly returning by running off the end of the function counts too.)</p>
<p>You'll need an <code>if __name__ == '__main__'</code> guard for safe process creation, though:</p>
<pre><code>if __name__ == '__main__':
    x = Process(target=a)
    x.start()
</code></pre>
</div>
<span class="comment-copy">So if I did <code>x.isalive()</code>, it would say it isn't?</span>
<span class="comment-copy">@Krishi: After <code>a</code> returns, yes.</span>
<span class="comment-copy">The problem I'm having now is that the code which is after the defined functions is running multiple times. What I mean is,in my actual program I am creating 4 processes. Despite having a return at the end of every defined function, the code after it is running 4 times at once.</span>
<span class="comment-copy">@Krishi: <a href="https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods" rel="nofollow noreferrer">Entirely unrelated issue.</a></span>
<span class="comment-copy">I'll try and understand that.</span>
