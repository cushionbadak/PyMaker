<div class="post-text" itemprop="text">
<p>I have been coding for a few months and hit a wall.
The following code simply prints a menu and runs a few shell commands and outputs these to the screen.
What i'd like to do is send the output of the menu 1 options to a "workspace".
I'm calling a workspace a user inputted directory whereby when a shell command is executed it saves the the std in as a file to that respective directory.
I will have over 50 different command that will be executed eventually and i want them to all be neatly stored in the relative directories.
Currently using Python 3.4</p>
<p>So far my code can, request user input for a workspace, which inturn creates a relative directory.
What I need to is get a file to be outputted.</p>
<pre><code>#Imports
import os
import subprocess


#Set Globals for Workspace to 0
workspace = 0
absolute_path = 0


#Initally clear the screen
os.system('clear')

#Define Option 0 - Create a Workspace
def workspace_menu():
    print ("Enter the name of the Workspace or type 'q' or 'quit' to return to the main menu")
    print ("")
    workspace_input = input(":")
    if workspace_input in ("q", "quit"):
        os.system('clear')
    else:
#Define the current working directoy (__file__)
    script_dir = os.path.dirname(__file__)
    relative_path = 'workspaces/'
    joined_path = os.path.join(script_dir, relative_path)
    os.chdir(joined_path)
    if os.path.exists(workspace_input):
        print ("Directory already Exists! - Try a different name")
        input("Press any key to Return to the Main Menu")
        os.system('clear')
    else:
        make_path = os.makedirs(workspace_input)
        absolute_path = joined_path + workspace_input
        global absolute_path
        absolute_path = absolute_path
        global workspace
        workspace = 1
        print ("Workspace created!"), absolute_path
        input("Press any Key to Continue")
        os.system('clear')
        return

#Define the Main Menu
def menu():
    print(" 0) Add a Workspace")
    print(" 1) System Tasks")
    print("11) Exit")


#Define System Tasks
def system_tasks():
    os.system('clear')
    print(" 1) Display Local Network information")
    print(" 5) Back")
    system_tasks_answer = int(input(":"))
    if system_tasks_answer == 1:
        print("The Local Network Configuration of this OS are:")
        print("")
        ifconfig = subprocess.call(['/sbin/ifconfig'])
        dns = subprocess.call(['cat', '/etc/resolv.conf'])
        print("")
        print(workspace)
        lni_menu = input("Press any Key to Continue")
        system_tasks()
        os.system('clear')
    elif system_tasks_answer == 5:
        os.system('clear')


loop=True

while loop:
    print (menu())
    mm_answer = int(input(":"))
    if mm_answer ==0:
        workspace_menu()
    elif mm_answer ==1:
        system_tasks()
    elif mm_answer ==11:
        break
    else:
        input("You did not give a valid answer, press any key to try again") 
        os.system('clear')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>subprocess.call</code>'s <code>stdout</code> argument to run a command and redirect its standard output to a file. The <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer">documentation</a> states</p>
<blockquote>
<p>stdin, stdout and stderr specify the executed programâ€™s standard input, standard output and standard error file handles, respectively. Valid values are PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None. [...]</p>
</blockquote>
<p>This means, if you pass a file object (returned by <code>open()</code>) to <code>stdout</code>, it will use this file object to redirect the standard output. Everything that the sub-process writes to its standard output is written to the file object.</p>
<p>For example to redirect the output of the command <code>ls /tmp</code> to a file <code>output</code> you can write:</p>
<pre><code>with open("output", "wb") as f:
    return_code = subprocess.call(["ls", "/tmp"], stdout=f)
</code></pre>
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer">1</a> <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#subprocess.call</a></p>
</div>
<span class="comment-copy">BTW. there is a neat package which makes it really easy to create prompt oriented programs: <a href="https://docs.python.org/3/library/cmd.html" rel="nofollow noreferrer">docs.python.org/3/library/cmd.html</a></span>
<span class="comment-copy">Thank you for your comment. Would you be able to elaborate a little on it please?</span>
<span class="comment-copy">The answer should be more verbose now.</span>
