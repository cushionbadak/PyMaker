<div class="post-text" itemprop="text">
<p>In python 3, you can now open a file safely using the <code>with</code> clause like this:</p>
<pre><code>with open("stuff.txt") as f:
    data = f.read()
</code></pre>
<p>Using this method, I don't need to worry about closing the connection</p>
<p>I was wondering if I could do the same for the multiprocessing. For example, my current code looks like: </p>
<pre><code>pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())
pool.starmap(function,list)
pool.close()
pool.join()
</code></pre>
<p>Is there any way I could use a with clause to simplify this?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>with multiprocessing.Pool( ... ) as pool:
    pool.starmap( ... )
</code></pre>
<p><a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool" rel="noreferrer">https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool</a></p>
<blockquote>
<p>New in version 3.3: Pool objects now support the context management protocol â€“ see Context Manager Types. <strong>enter</strong>() returns the pool object, and <strong>exit</strong>() calls terminate().</p>
</blockquote>
<p>You can see an example at the bottom of the <code>Pool</code> section.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although its more than what the OP asked, if you want something that will work for both Python 2 and Python 3, you can use:</p>
<pre class="lang-py prettyprint-override"><code># For python 2/3 compatibility, define pool context manager
# to support the 'with' statement in Python 2
if sys.version_info[0] == 2:
    from contextlib import contextmanager
    @contextmanager
    def multiprocessing_context(*args, **kwargs):
        pool = multiprocessing.Pool(*args, **kwargs)
        yield pool
        pool.terminate()
else:
    multiprocessing_context = multiprocessing.Pool
</code></pre>
<p>After that, you can use multiprocessing the regular Python 3 way, regardless of which version of Python you are using. For example:</p>
<pre><code>def _function_to_run_for_each(x):
       return x.lower()
with multiprocessing_context(processes=3) as pool:
    results = pool.map(_function_to_run_for_each, ['Bob', 'Sue', 'Tim'])    print(results)
</code></pre>
<p>will work in Python 2 or Python 3.</p>
</div>
<span class="comment-copy">Either use a <code>try catch</code> block, or write a <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow noreferrer">context manager</a> to wrap it.</span>
