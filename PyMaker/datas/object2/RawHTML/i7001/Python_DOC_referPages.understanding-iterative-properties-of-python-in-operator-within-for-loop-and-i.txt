<div class="post-text" itemprop="text">
<p>The following code returns the summation of the values in list "A" that exist <strong>before</strong> the first <strong>even</strong> value in the list. </p>
<p>Example:</p>
<p>if list A = [1,3,5,4] the result would return 1 + 3 + 5 = 9</p>
<p>if list A = [1,2,5,4] the result would return 1</p>
<pre><code>def for_version(L):
    found_even = False
    total = 0

    for num in L:
        if num % 2 != 0 and not found_even:
            total = total + num
        else:
            found_even = True

    return total

A = [1,3,5,9]

for_version(A)
</code></pre>
<p>I don't understand how, after the first iteration, we don't lose the 1st integer in the list.  In other words, here's how I imagine the code is working.</p>
<p>Starts at the first value in the list "A" and prepares to move through all values one at a time:</p>
<pre><code>for num in L:
</code></pre>
<p>Checks the first iteration of the if statement:</p>
<pre><code>if num % 2 != 0 and not found_even:
</code></pre>
<p>Although the first number in the list IS ODD, because <code>found_even</code> was set to <code>False</code> originally the code should move to the <code>else</code> statement:</p>
<pre><code>else:
     found_even = True
</code></pre>
<p>I imagine that the if statement has now been completed on the first value of the list and all that occurred was that the found_even bool was changed to True.  </p>
<p>I assumed that the code would then move on; that the if statements would then be tested on the <strong>NEXT</strong> value in the list.  This, however appears incorrect.  If my thinking were right, in the example above, it would mean that the first value in the list "1" would be ignored when completing the summation, and we would end up with 3 + 5 = 8 <strong>NOT</strong> 1 + 3 + 5 = 9.</p>
<p>I obviously don't understand something very foundational about how the</p>
<pre><code>for num in L:
</code></pre>
<p>line works...  It's as if it did not, in fact, move to the next integer in the list and reruns the code on the first integer in the list.  Can someone please explain why this is.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Although the first number in the list IS ODD, because <code>found_even</code> was set to <code>False</code> originally the code should move to the <code>else</code> statement[.]</p>
</blockquote>
<p>You got your logic wrong right there. <code>not False</code> is true, so the <code>if</code> statement test tests true and the <code>else</code> suite is <em>not</em> executed.</p>
<p>You can test this yourself:</p>
<pre><code>&gt;&gt;&gt; num = 1  # odd
&gt;&gt;&gt; found_even = False
&gt;&gt;&gt; num % 2
1
&gt;&gt;&gt; num % 2 != 0
True
&gt;&gt;&gt; not found_even
True
&gt;&gt;&gt; num % 2 != 0 and not found_even
True
</code></pre>
<p>The code itself is overly complicated; just return early. There is no need to iterate on, or use a flag; <code>return</code> ends a function and iteration:</p>
<pre><code>def for_version(L):
    total = 0    
    for num in L:
        if num % 2 == 0:
            return total
        total += num
</code></pre>
<p>Alternatively, use <code>break</code> to stop the loop, and return afterwards.</p>
<p>The Python standard library has a helpful tool in the <code>itertools</code> library for this, called <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile()</code></a>; it'll give you all elements of an iterable <em>until</em> the given test fails. It then just stops iterating:</p>
<pre><code>from itertools import takewhile

sum(takewhile(lambda x: x % 2, A))
</code></pre>
<p>I removed the <code>!= 0</code> test there; <code>% 2</code> only results in <code>0</code> or <code>1</code>, and <code>0</code> is considered a false value in a boolean test. I also used the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code> function</a> to add up all the numbers that <code>takewhile</code> does pass through.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to keep track if you found or not the first even number, just break and leave the for loop when you find it:</p>
<pre><code>for num in L:
    if num % 2 != 0:
        total = total + num
    else:
        break
</code></pre>
</div>
<span class="comment-copy">Wonderful explanation! As I expected, I'm new to programming and it was a very fundamental confusion about how the if statements operate.  I improperly thought the if statement tested the current state of the found_even variable and proceeded only if that state matched the previously set state.  In reality, the if statements simply checks if the expression currently evaluates to "True".  If it does, it fires, if not, it moves to the else...  Really cleared this up for me thanks again!  Also not sure why the question was voted down... did my best to be clear and pertinent ;(</span>
