<div class="post-text" itemprop="text">
<p>I am pretty much copying from the example given in online docs, but using filter() in windows-based Python 3 is perplexing me.  What is wrong here:</p>
<pre><code>a=[1,2,3,4]    
b=[1,0,1,0]    
f=filter(b,a)    
for fs in f : print(fs)

...
</code></pre>
<blockquote>
<p>Traceback (most recent call last):<br/>
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br/>
      TypeError: 'list' object is not callable</p>
</blockquote>
<pre><code>f=list(filter(b,a))
</code></pre>
<blockquote>
<p>Traceback (most recent call last):<br/>
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br/>
      TypeError: 'list' object is not callable</p>
</blockquote>
<p>Online docs say to throw <code>list()</code> in, but that clearly helps not.</p>
</div>
<div class="post-text" itemprop="text">
<p>First argument of <code>filter</code> must be a function or lambda. You passed <code>b</code> which is a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Filter's documentation clearly states that it takes a function and an iterable as input. Perhaps if you want to check if a value is in both a and b, you could do something like:</p>
<pre><code>f = filter(lambda x: x in b, a)
</code></pre>
<p>and then loop over f.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are misunderstanding how <code>filter</code> works, <code>filter</code> needs a function that returns <code>True</code> for each item that you want to keep.</p>
<p>I'm assuming <code>b</code> describes the things in <code>a</code> you want to select, then you meant something like::</p>
<pre><code>f = filter(lambda x: x[1], zip(a, b))
for fs, _ in f: ...
</code></pre>
<p>You can also replace <code>filter</code> with a list comprehension:</p>
<pre><code>f = [x for x, y in zip(a, b) if y]
for fs in f: ...
</code></pre>
<p>But there is a function in <code>itertools</code> that does exactly this:</p>
<pre><code>import itertools as it
f = it.compress(a, b)
for fs in f: ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically filter takes a function and an iterable value to filter in</p>
<pre><code>a = [1,2,3,4]
b = [1,0,1,0]
f = filter(lambda val: val not in b, a)
for fs in f: print(fs)
</code></pre>
<p>output:</p>
<pre><code>2
3
4
</code></pre>
<p>Confusion occurs when we call filter with None</p>
<pre><code>list(filter(None, [0,1,2]))
# This returns [1,2] Which is a special case
# and it is not equal to:
list(filter(1, [0,1,2])) #invalid
</code></pre>
<p>The reason being When we pass filter condition as <code>None</code> filter function checks each value in the list and sees if they qualify the <code>if value</code> condition.</p>
<p>Which roughly translates to this.</p>
<pre><code>[value for value in [0,1,2] if value]
</code></pre>
</div>
<span class="comment-copy">What output do you expect to get here? Note that <code>filter</code> is not the same thing as "find the elements in these lists that are in both lists"</span>
<span class="comment-copy">What online docs are you referring to? The <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">official docs</a> do not say "to throw list() in".</span>
<span class="comment-copy">Which online docs are you referring to? Is <code>b</code> meant to indicate which values in <code>a</code> you want and don't want, i.e. is <code>b</code> a mask on <code>a</code>?</span>
<span class="comment-copy">Isn't <code>lambda</code> a function (anonymous)?</span>
<span class="comment-copy">@AChampion yes it is. I mentioned it separately just to emphasize it.</span>
<span class="comment-copy">That is exactly what I needed to understand.  I am always curious why Python doesn't provide the 'obvious' solution as the base case, and a more complex one for the more rich case...in this case, it seems to me (and I saw many wrong examples) that filter([1,0,1,0], [2,4,6,8]) ought to return a list (or in Python three a generator) that gives back (appropriately for the version) 2 and 6 as the answer - i.e., a mask.</span>
<span class="comment-copy">Were it me making the calls, 'filter' would just use a mask, and something called ffilter or some such would require the lambda...the lambda seems like both unnecessary keystrokes, unnecessary function calls, and buggy/cryptic code.</span>
<span class="comment-copy">@eSurfsnake not sure about the design reason for the filter API. But anyways, glad I could clarify the problem :). Please consider upvote or tick, if the answer helped :)</span>
