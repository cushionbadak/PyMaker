<div class="post-text" itemprop="text">
<p>I'm trying to configure my Python logging module using <a href="https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig" rel="nofollow noreferrer">logging.config.dictConfig()</a></p>
<p>However, my JSON file appears to be corrupt even though it works as a Python dict with <code>false</code> changed to <code>False</code>, so I don't think it's a syntax error.</p>
<p>My code says:</p>
<pre><code>import json

with open('logging_config.json') as f:
    d = json.load(f)
</code></pre>
<p>My <code>logging_config.json</code> file is:</p>
<pre><code>{
  "version": 1,
  "disable_existing_loggers": false,
  "formatters": {
    "standard": {
      "format": "[%(levelname)s] %(name)s: %(message)s"
    },
  },
  "handlers": {
    "default": {
      "level": "DEBUG",
      "formatter": "standard",
      "class": "logging.StreamHandler",
    },
  },
  "loggers": {
    "": {
      "handlers": ["default"],
      "level": "INFO",
      "propagate": true
    },
    "myfunc": {
      "handlers": ["default"],
      "level": "DEBUG",
      "propagate": false
    },
  }
}
</code></pre>
<p>When I run that simple program, I get an error: <code>json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 8 column 3 (char 156)</code></p>
<p>What could be causing the JSON decoder to fail?</p>
<p>Thanks in advance for any help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have multiple extraneous commas which will break the JSON deserialization.</p>
<p>Here's your original JSON with every extraneous comma pointed out:</p>
<pre><code>{
  "version": 1,
  "disable_existing_loggers": false,
  "formatters": {
    "standard": {
      "format": "[%(levelname)s] %(name)s: %(message)s"
    }, # &lt;--- extraneous comma
  },
  "handlers": {
    "default": {
      "level": "DEBUG",
      "formatter": "standard",
      "class": "logging.StreamHandler", # &lt;--- extraneous comma
    }, # &lt;--- extraneous comma
  },
  "loggers": {
    "": {
      "handlers": ["default"],
      "level": "INFO",
      "propagate": true
    },
    "myfunc": {
      "handlers": ["default"],
      "level": "DEBUG",
      "propagate": false
    }, # &lt;--- extraneous comma
  }
}
</code></pre>
<p>Removing those, this is now a valid JSON document:</p>
<pre><code>{
    "version": 1,
    "disable_existing_loggers": false,
    "formatters": {
        "standard": {
            "format": "[%(levelname)s] %(name)s: %(message)s"
        }
    },
    "handlers": {
        "default": {
            "level": "DEBUG",
            "formatter": "standard",
            "class": "logging.StreamHandler"
        }
    },
    "loggers": {
        "": {
            "handlers": ["default"],
            "level": "INFO",
            "propagate": true
        },
        "myfunc": {
            "handlers": ["default"],
            "level": "DEBUG",
            "propagate": false
        }
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This happens because your JSON is invalid. this one JSON is valid.
I removed extra commas from your JSON.
You can use any JSON validator to fix it.</p>
<pre><code>{
  "version": 1,
  "disable_existing_loggers": false,
  "formatters": 
  {
    "standard": 
    {
      "format": "[%(levelname)s] %(name)s: %(message)s"
    }
  },
  "handlers": 
  {
    "default": 
    {
      "level": "DEBUG",
      "formatter": "standard",
      "class": "logging.StreamHandler"
    }
  },
  "loggers": 
  {
    "": 
    {
      "handlers": ["default"],
      "level": "INFO",
      "propagate": true
    },
    "myfunc": 
    {
      "handlers": ["default"],
      "level": "DEBUG",
      "propagate": false
    }
  }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As others already answered, there are some excess commas in your JSON.</p>
<p>You could feed your JSON to <a href="https://jsonlint.com/" rel="nofollow noreferrer">https://jsonlint.com/</a> ; it tends to give more useful help messages.</p>
</div>
<span class="comment-copy">The JSON parser is expecting a certain type of value for each key. A string is one accepted value, an integer another. You're trying to insert a boolean, but there is a difference between upper and lowercase for booleans. Only one is a valid boolean. Here's some <a href="https://www.w3schools.com/js/js_json_datatypes.asp" rel="nofollow noreferrer">documentation</a></span>
<span class="comment-copy">@ajoseps that isn't the issue. The issue is you have an extraneous comma, so JSON expects a key. How was this JSON generated? It certainly wasn't by the python <code>json</code> module</span>
<span class="comment-copy">It used to be a Python dict which I converted manually. Python forgives the extra commas but json doesn't</span>
<span class="comment-copy">Ah, Python forgives these extra commas. I missed them when converting the Python to json. Thanks</span>
