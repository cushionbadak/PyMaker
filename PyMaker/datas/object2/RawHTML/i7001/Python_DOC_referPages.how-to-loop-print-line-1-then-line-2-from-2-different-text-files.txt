<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1830552/how-to-cleanly-loop-over-two-files-in-parallel-in-python">How to cleanly loop over two files in parallel in Python</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have 2 text files with data in it, and i want a loop where it goes through 1st line of each text files simultaneously then 2nd then 3rd. So i used a inner 'for' loop for both of them but it isn't looping like i want it to be instead it loops with 1st line of 1st text file with all lines in 2nd text file then 2nd line from 1st file with all lines from 2nd file. </p>
<p>i have tried everything but none works.if i use break statement like below it start using all lines one by one of 1st text file with same 1st line of 2nd text file but if i remove that break statement then it will select same 1st line of 1st text file but with all lines of 2nd text file. </p>
<p>here is my code:</p>
<pre><code>fi  =open("C:\\Users\\file1.txt","r")
file1 = fi.read().splitlines()    
fi2 =  open("C:\\Users\\file2.txt","r")
file2 = fi2.read().splitlines()

for file1_data in file1:
    for file2_data in file2:    
        try:
            print(file1_data)
            print(file2_data)

        except:

            print("exit")

        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this: </p>
<pre><code>for file1_data, file2_data in zip(file1,file2):
    try:
        print(file1_data)
        print(file2_data)

    except:
        print("exit")

    break
</code></pre>
<p>You can find more information about zip <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">here</a>.  </p>
<p>If the files have different lengths, use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">itertools.zip_longest</a>. So, you would do it like this: </p>
<pre><code>from itertools import zip_longest
for file1_data, file2_data in zip_longest(file1,file2):
    try:
        print(file1_data)
        print(file2_data)

    except:
        print("exit")

    break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use only 1 <code>for</code> loop, and a line counter.
If the files are reasonably small, you can read the data using <code>readlines()</code>, so you do not have to <code>split()</code>, then get the minimum number of lines of the two files, and then read them one by one.</p>
<p>Something like this:</p>
<pre><code>def read_data(filename):
    openfile = open(filename, 'r')
    data = openfile.readlines()
    openfile.close()
    return data


def get_min_lines(list1, list2):
    """
    returns the minimum number of lines 
    comparing the two lists
    """
    return min([len(list1), len(list2)])


def main():
    #
    # read the data of both files
    file_1_data = read_data(r'c:\somedir\somefile1.txt')
    file_2_data = read_data(r'c:\somedir\somefile2.txt')
    #
    # get the max number of lines you need to iterate to
    # this will be the smaller of the two files
    # just in case the files are not equal size
    max_lines = get_min_lines(file_1_data, file_2_data)
    #
    # use one for loop to go over all lines
    # added in the .strip('\n') to get rid of extra linefeeds
    # which are still present in the data from the original readlines()
    for line_counter in range(0, max_lines):
        print(file_1_data[line_counter].strip('\n'))
        print(file_2_data[line_counter].strip('\n'))


if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy"><code>zip</code> the file iterators together... Also, try to avoid <code>read().splitlines()</code> when using large files.. You can just do <code>for line in file1</code></span>
<span class="comment-copy">Also answered here more generally <a href="https://stackoverflow.com/questions/21248122/how-to-iterate-over-arbitrary-number-of-files-in-parallel-in-python" title="how to iterate over arbitrary number of files in parallel in python">stackoverflow.com/questions/21248122/â€¦</a></span>
<span class="comment-copy">thank you guys thank you so much. it worked by using zip method, you guys are really amazing.</span>
<span class="comment-copy">although using <code>zip()</code> is probably better than my answer, this code only prints the first lines of the files.</span>
<span class="comment-copy">@EdwinvanMierlo that's a probably an issue with the way you are reading the data. Print the two lists of lines before iterating to check ..</span>
<span class="comment-copy">thank you so much @MedAli it worked. After watching you guys i guess i have to learn lot more than this.</span>
<span class="comment-copy">@Rahul you are welcome :)</span>
<span class="comment-copy">You don't need to count the lines if you use zip_longest</span>
<span class="comment-copy">I know that <code>zip()</code> or <code>zip_longest()</code> are better answers, this is just an alternative working answer. I will leave this answer up for now, as I believe it is a valid answer.</span>
<span class="comment-copy">This doesn't iterate the full content of both files, though</span>
<span class="comment-copy">@cricket_007 hmmm; I just tested it with two 1000 line files, and all was iterated, then I took a 1000 line and a1001 line file, and 1000 lines of those were iterated. If my code is not functioning, can you detail what your experiences are, so I can better investigate, and update my answer. (and learn myself)</span>
<span class="comment-copy">As I said, full content of <b>both</b> files. If you have one line in one file, and a thousand in the other, you would ideally want a total lines output that sum to the total lines in all the files</span>
