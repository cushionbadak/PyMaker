<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1436703/difference-between-str-and-repr">Difference between __str__ and __repr__?</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
</ul>
</div>
<p>I wondered why <code>list.__str__()</code> stringifies each element by <code>__repr__()</code> in follow case:</p>
<pre class="lang-py prettyprint-override"><code>class A:
    def __repr__(self):
        return 'repr()'

    def __str__(self):
        return 'str()'

print(str([A(), A()]))  # output: [repr(), repr()]
</code></pre>
<p><img alt="(screen shot)" src="https://i.stack.imgur.com/YSxZ0.png"/></p>
<p>First, I tried running above code in other python interpreter and get same result.</p>
<p>Then I googled whether this behavior has been defined in the spec or not, however I couldn't find any document about <code>list.__str__()</code>'s procedure. I found <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer">this document</a>, but it's not enough. It doesn't defined any procedure.</p>
<p>Do any specifications for <code>list.__str__</code> exist or not?</p>
</div>
<div class="post-text" itemprop="text">
<p>This might not be explicitly specified, but there is certainly logic to it. You're looking at the per type methods for <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">repr</a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">str</a> in the <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list</a> type. If you read the documentation for <code>__str__</code>, it shows that the default implementation is to fall back on <code>__repr__</code>. The core difference between the two is that <code>__str__</code> is not expected to produce a valid Python expression, while <code>__repr__</code> is. Lists, being a Python standard type, are naturally expected to show as valid expressions, thus should have repr, and repr will rely on calling repr for the contained items as well, or the expression might break. </p>
<p>We end up with one question: How should lists be shown differently for str than for repr? This is where for instance a type for a deck of cards might produce <code>"queen of hearts"</code> instead of <code>Card(1,12)</code>. There's no obvious choice for a list, so it just has no <code>__str__</code>. </p>
<p>We can even verify that this is the case:</p>
<pre><code>&gt;&gt;&gt; list.__str__
&lt;slot wrapper '__str__' of 'object' objects&gt;
&gt;&gt;&gt; list.__repr__
&lt;slot wrapper '__repr__' of 'list' objects&gt;
</code></pre>
<p>The <code>__str__</code> is inherited from <code>object</code>, and not specialized for <code>list</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>In the absence of <code>__str__</code> any container will default to <code>__repr__</code> if passed to <code>str</code>. As it happens the containers in CPython (<code>list</code>, etc.) generally don't have a <code>__str__</code> method and thus they will delegate to <code>__repr__</code>. For the <code>__repr__</code> it makes sense to call the <code>__repr__</code> of the elements.</p>
<p>So it's no formal specification. It's just because these containers have no <code>__str__</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that this behavior can be considered as specified. <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#list</a> states that lists implement all of the common and mutable sequence operations (none of them include <code>__str__</code> or <code>__repr__</code>) plus <code>sort</code>. So, according to the specification, there's no <code>list.__str__</code> or <code>list.__repr__</code> (despite that in CPython you can see them). </p>
<p>Therefore <code>str(a_list)</code> is resolved as <code>str(a_list) -&gt; repr(a_list) -&gt; list.__repr__ -&gt; object.__repr__</code> (since <code>list</code> is a subclass of <code>object</code>). And according to <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#object.<strong>repr</strong></a>, <code>object.__repr__</code> returns "the “official” string representation of an object". It's obvious from the docs that the official string representation for lists looks like <code>[...]</code> (where each element is <code>repr</code>-ed), that's what you observed.</p>
</div>
<span class="comment-copy">The specification is "whatever CPython does".</span>
<span class="comment-copy">Check this answer <a href="https://stackoverflow.com/a/2626364/840582">stackoverflow.com/a/2626364/840582</a></span>
<span class="comment-copy">If an object doesn't define <code>__str__</code>, calling <code>str</code> on it delegates to the object's <code>__repr__</code> method. All objects have a <code>__repr__</code>: if its class doesn't explicitly define one, then it will inherit one from its parent, possibly the <code>__repr__</code> defined in the base <code>object</code> class.  However, calling <code>str()</code> on a list <i>always</i> calls <code>repr()</code> on each list item, whether or not that item defines <code>__str__</code>.</span>
<span class="comment-copy">Thank you! I understood the difference of semantics between <code>__str__()</code> and <code>__repr__()</code>, and why <code>list</code> doesn't have default implementation of <code>__str__()</code>.</span>
<span class="comment-copy">Also your method to check whether list has own <code>__str__</code> implementation or inherits from super class is very useful. thank you!</span>
<span class="comment-copy">Not really true. <a href="https://github.com/python/cpython/blob/v3.6.2/Objects/listobject.c#L2637" rel="nofollow noreferrer">lists implement <code>__repr__</code></a> but they <a href="https://github.com/python/cpython/blob/v3.6.2/Objects/listobject.c#L2643" rel="nofollow noreferrer">don't implement <code>__str__</code></a>.</span>
<span class="comment-copy">@MSeifert Note that the question is about the specification (i.e., the docs). Also note this: "despite that in CPython [I mean the program, not its sources] you can see them".</span>
<span class="comment-copy">If you combine the <a href="https://docs.python.org/3/reference/expressions.html#list-displays" rel="nofollow noreferrer">list display syntax</a> and "if at all possible" part regarding <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">repr</a>, I'd say the central documents do guide lists to have this repr form. The spaces after the commas are recommended per PEP 8.</span>
<span class="comment-copy">@YannVernier Thanks, this is the final bit to describe the behavior using only the docs.</span>
