<div class="post-text" itemprop="text">
<p>I have the following code</p>
<pre><code>from operator import attrgetter

class A:
    def __init__(self, aList):
        self.aList = aList

b1 = A([1,2,3])
b2 = A([0,7,5])

bList = [b1, b2]

# minB = min(bList, key=attrgetter('aList[0]'))
</code></pre>
<p>I want <code>minB</code> to equal b2, on the criterion that its first item on its list is the lowest. How do I do that? The commented thing is what I tried, but it does't seem to work for a list attribute</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple. Just remove the <code>[0]</code> from your call to <code>attrgetter</code>:</p>
<pre><code>from operator import attrgetter

class A:
    def __init__(self, aList):
        self.aList = aList

b1 = A([1,2,3])
b2 = A([0,7,5])

bList = [b1, b2]

minB = min(bList, key=attrgetter('aList'))
print(minB is b2) # True
</code></pre>
<p>If you want to set <code>key</code> to be the first element in each <code>A</code> object's list, you'll have to use a normal function for <code>key</code>:</p>
<pre><code>minB = min(bList, key=lambda a_obj: a_obj.alist[0])
</code></pre>
</div>
<span class="comment-copy">Thanks, it seems to work, but where this behaviour is defined? What if I'd want to compare some index other than 0?</span>
<span class="comment-copy">@OdedSayar Just put a different number in the square brackets. If you want to compare using the second element for example, use <code>alist[1]</code>. If you want to learn more about indexing, see <a href="https://docs.python.org/3.6/tutorial/introduction.html#lists" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@OdedSayar When comparing two ordered collections (strings, lists or tuples), Python compares the items in order, stopping as soon as it can tell which one is greater, i.e., when it detects a mismatch. So if the first items don't match then it can stop comparing, but if they're equal then it'll compare the second items, etc, until it finds a mismatch or one of the collections runs out of items. See <a href="https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
