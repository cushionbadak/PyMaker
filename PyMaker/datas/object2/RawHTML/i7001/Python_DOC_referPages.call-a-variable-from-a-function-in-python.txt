<div class="post-text" itemprop="text">
<p>I'm not even sure I'm calling those by their correct names but here's what I'm working with. I'm working on a simple hockey simulator that only uses math at this time to simulate the results of the games. Currently there is no names or anything like that and I've just generated a "list" of names for "team1" when the scorers are chosen.  That's where this comes in.  I want to create a list of players for each team and figured functions would be best...if its not please let me know an easier way.  So here's the function right now:</p>
<pre><code>def c1():
     _name = "Jason Delhomme"
     _overall = random.choice((6.00, 7.44, 8.91))
</code></pre>
<p>And the _overall variable would need to be called in some places whereas the _name variable would be called in another place. Is this possible?</p>
<pre><code>tm1center = ((c1 * .5) + (c2 * .35) + (c3 * .15)) * 3
</code></pre>
<p>Instead of "c1" above I would replace that with _overall from the c1 function. I'm not sure how to do that or if its possible.. sorry for repeating myself here lol...</p>
<p>And then I have this (below) for the player list:</p>
<pre><code>tm1players = ["player1", "player2", "player3", "player4", "player5"]
</code></pre>
<p>Ideally, I would replace all of those with the _name variable in each function. The player functions would also go into more depth with their speed, hands, shooting, etc. ratings as well. I don't know how sim sports handle this as I'm very new to coding (just started school) and I wrote the original engine in excel, which is why its just numbers and not physics or plays.</p>
<p>If this doesn't explain it well enough please let me know and I'll further explain what I'm trying to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your case, its better to use a class and assign two variable to that class then create instances of it, for example:</p>
<pre><code>class Player:
    def __init__(self, name):
        self.name = name
        self.overall = random.choice((6.00, 7.44, 8.91))

player1 = Player('Jason Delhomme')
player2 = Player('Another Player')

tm1center = (player1.overall * .5) + (player2.overall * .35)
tm1players = [player1.name, player2.name]
</code></pre>
<p>EDIT:</p>
<p>to add <code>overall</code> when creating the class you need to change the init method to :</p>
<pre><code>def __init__(self, name, overall):
    self.name = name
    self.overall = overall
</code></pre>
<p>then pass it when creating the class:</p>
<pre><code>player1 = Player('Player Name', 6.23)
</code></pre>
<p>You can create a list of players at start and append each instance of player to that list for future use, for example:</p>
<pre><code>player_list = []
player1 = Player('Player Name', 5)
player_list.append(player1)
player2 = Player('Player2 Name', 2.5)
player_list.append(player2)

# dynamically create tm1players and tm1center
tm1players = [x.name for x in player_list]
tm1center = [x.overall for x in player_list]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to read about object oriented programming, and then start working with classes, methods, and from that creating objects. This is an example for using different functions (methods) under the umbrella of a Class. Note how the use of <code>self</code> is necessary for accessing variables between the different methods:</p>
<pre><code>ClassHockey():
   def __init__(self):
       self.description = "in here you would define some 'you always use' 
                                                                variables"

   def c1(self):
       self._name = "Jason Delhome"
       self._overall = random.choice((6.00, 7.44, 8.91))

   def c2(self):
       self._new_name = self._name + "Jefferson"
       return self._new_name



hockeyName = ClassHockey()
hockeyName.c2()
</code></pre>
<p>If you run this you'll get the  _new_name "Jason Delhome Jefferson", and  you can apply this example to all kinds of operations between your class methods. </p>
</div>
<div class="post-text" itemprop="text">
<p>While manually creating a class is a great solution for this problem, I believe that generating one via <code>collections.namedtuple</code> could also work in this senario.</p>
<pre><code>from collections import namedtuple
import random

Player = namedtuple("Player", "name overall")

player1 = Player("Jason Delhomme", random.choice((6.00, 7.44, 8.91)))

player1 = Player("Other Name", random.choice((6.00, 7.44, 8.91)))

final_overall = (player1.overall * .5) + (player2.overall * .35)
</code></pre>
<p>Using list comprehension, you could built your entire team:</p>
<pre><code>list_of_players = [Player(input("Enter player: "), random.choice((6.00, 7.44, 8.91))) for i in range(5)]

tm1center = ((list_of_players[0].overall * .5) + (list_of_players[1].overall * .35) + (list_of_players[2].overall * .15)) * 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python lets you group info and data together using <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">classes</a>. In your case, you mostly have information about each player, like a name and various stats. You could define a class like:</p>
<pre><code>class Player:
    def __init__(self, name):
        self.name = name
        self.overal = random.choice((6.00, 7.44, 8.91))
</code></pre>
<p>Now you can create a bunch of objects from the class:</p>
<pre><code>c1 = Player("player1")
c2 = Player("player2")
c3 = Player("player3")
</code></pre>
<p>And you could calculate</p>
<pre><code>tm1center = ((c1.overall * .5) + (c2.overall * .35) + (c3.overall * .15)) * 3
</code></pre>
<p>Since you already have a <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">list</a> of player names, you can use a <a href="https://docs.python.org/3.6/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to get a list of players in one step:</p>
<pre><code>tm1players = ["player1", "player2", "player3", "player4", "player5"]
tm1 = [Player(name) for name in tm1players]
</code></pre>
<p>Now you can access each element in that list, and get their <code>name</code> and <code>overall</code> attributes to do with them as you see fit.</p>
<p>If you want to extend the <code>tm1center1</code> calculation to include all five players now, you can assign a weight to each one:</p>
<pre><code>class Player:
    def __init__(self, name, weight):
        self.name = name
        self.weight = weight
        self.overal = random.choice((6.00, 7.44, 8.91))
</code></pre>
<p></p>
<pre><code>tm1center = sum([p.overall * p.weight for p in tm1]) * len(tm1)
</code></pre>
<p>where <code>tm1</code> is defined something like:</p>
<pre><code> tm1players = ["player1", "player2", "player3", "player4", "player5"]
 tm1weights = [0.5, 0.3, 0.05, 0.1, 0.05]
 tm1 = [Player(name, weight) for name, weight in zip(tm1players, tm1weights)]
</code></pre>
<p>Python is a pretty flexible language. Go crazy with it!</p>
</div>
<span class="comment-copy">It sounds like you want <a href="https://learnpythonthehardway.org/book/ex40.html" rel="nofollow noreferrer">objects</a>.</span>
<span class="comment-copy">Also, fix your indentation. Whitespace is important in Python.</span>
<span class="comment-copy">You should use a <code>class</code> instead of functions. Then make the specific players instances of that class.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html</a></span>
<span class="comment-copy">How would I call the variable in an object or class?</span>
<span class="comment-copy">How would I set a different overall for player 2, though? Does player 2 not grab the same overall from the class player in this scenario?</span>
<span class="comment-copy">It will randomly select <code>overall</code> for <code>player2</code>. if you want to add it when creating the player you can add it to <code>__init__()</code> ill edit the answer now</span>
<span class="comment-copy">So for the tm1players is there a way to grab all the player.name's instead of having to type that list out in full?</span>
<span class="comment-copy">And since its in a class now how can I import it into the engine.py file? I tried "from team1 import team.players" but it doesn't work. I'll need to refer all of this back to engine.py where all the simulation takes place.</span>
<span class="comment-copy">You can import the class itself and create the instances in engine.py, and for <code>tm1players</code> you can add each class to a list when creating it then use <code>tm1players = [x.name for x in player_list]</code></span>
<span class="comment-copy"><code>collections.namedtuple</code> generates a class for you.</span>
<span class="comment-copy">@MadPhysicist I changed the wording of my answer.</span>
