<div class="post-text" itemprop="text">
<p>Python 3.6</p>
<p>I'm trying to modify the behavior of a third party library.</p>
<p>I don't want to directly change the source code.</p>
<p>Considering this code below:</p>
<pre><code>class UselessObject(object):
    pass


class PretendClassDef(object):
    """
    A class to highlight my problem
    """

    def do_something(self):

        # Allot of code here

        result = UselessObject()

        return result
</code></pre>
<p>I'd like to substitute my own class for <code>UselessObject</code> </p>
<p>I'd like to know if using a metaclass in my module to intercept the creation of <code>UselessObject</code> is a valid idea?</p>
<p><strong>EDIT</strong></p>
<p><a href="https://stackoverflow.com/questions/45673983/override-used-classes-in-parent-class">This</a> answer posted by Ashwini Chaudhary on the same question, may be of use to others. As well as the below answer.</p>
<p>P.S. I also discovered that 'module' level <code>__metaclass__</code> does't work in python 3. So my initial question of it 'being a valid idea' is False</p>
</div>
<div class="post-text" itemprop="text">
<p>FWIW, here's some code that illustrates Rawing's idea.</p>
<pre><code>class UselessObject(object):
    def __repr__(self):
        return "I'm useless"

class PretendClassDef(object):
    def do_something(self):
        return UselessObject()

# -------

class CoolObject(object):
    def __repr__(self):
        return "I'm cool"

UselessObject = CoolObject

p = PretendClassDef()
print(p.do_something())
</code></pre>
<p><strong>output</strong></p>
<pre><code>I'm cool
</code></pre>
<hr/>
<p>We can even use this technique if <code>CoolObject</code> needs to inherit <code>UselessObject</code>. If we change the definition of <code>CoolObject</code> to:</p>
<pre><code>class CoolObject(UselessObject):
    def __repr__(self):
        s = super().__repr__()
        return "I'm cool, but my parent says " + s
</code></pre>
<p>we get this output:</p>
<pre><code>I'm cool, but my parent says I'm useless
</code></pre>
<p>This works because the name <code>UselessObject</code> has its old definition when the <code>CoolObject</code> class definition is executed. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is not a job for metaclasses.  </p>
<p>Rather, Python allows you to do this through a technique called "Monkeypatching", in which you, at run time, substitute one object for another in run time. </p>
<p>In this case, you'd be changing the <code>thirdyparty.UselessObject</code> for <code>your.CoolObject</code> before calling <code>thirdyparty.PretendClassDef.do_something</code></p>
<p>The way to do that is a simple assignment. 
So, supposing the example snippet you gave on the question is the trirdyparty module, on the library, your code would look like:</p>
<pre><code>import thirdyparty

class CoolObject:
    # Your class definition here

thirdyparty.UselesObject = Coolobject
</code></pre>
<p>Things you have to take care of: that you change the object pointed by  <code>UselessObject</code> in the way it is used in your target module.</p>
<p>If for example, your PretendedClassDef and UselessObject are defined in different modules, you have to procees in one way if UselessObject is imported with <code>from .useless import UselessObject</code> (in this case the example above is fine), and <code>import .useless</code> and later uses it as <code>useless.UselessObject</code> - in this second case, you have to patch it on the <code>useless</code> module. </p>
<p>Also, Python's <code>unittest.mock</code> has a nice <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"><code>patch</code></a> callable that can properly perform a monkeypatching and undo it if by some reason you want the modification to be valid in a limited scope, like inside a function of yours, or inside a <code>with</code> block.  That might be the case if you don't want to change the behavior of the thirdyparty module in other sections of your program.</p>
<p>As for metaclasses, they only would be of any use if you would need to change the metaclass of a class you'd be replacing in this way - and them they only could have any use if you'd like to insert behavior in classes that inherit from <code>UselessObject</code>. In that case it would be used to create the local <code>CoolObject</code> and you'd still perform as above, but taking care that you'd perform the monkeypatching <em>before</em>  Python would run the class body of any of the derived classes of <code>UselessObject</code>, taking extreme care when doing any imports from the thirdparty library (that would be tricky if these subclasses were defined on the same file)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is just building on PM 2Ring's and jsbueno's answers with more contexts:</p>
<p>If you happen to be creating a library for others to use as a third-party library (rather than you using the third-party library), and if you need CoolObject to inherit UselessObject to avoid repetition, the following may be useful to avoid an infinite recursion error that you might get in some circumstances:</p>
<p>module1.py</p>
<pre><code>class Parent:
    def __init__(self):
        print("I'm the parent.")

class Actor:
    def __init__(self, parent_class=None):
        if parent_class!=None: #This is in case you don't want it to actually literally be useless 100% of the time.
            global Parent
            Parent=parent_class
        Parent()
</code></pre>
<p>module2.py</p>
<pre><code>from module1 import *

class Child(Parent):
    def __init__(self):
        print("I'm the child.")

class LeadActor(Actor): #There's not necessarily a need to subclass Actor, but in the situation I'm thinking, it seems it would be a common thing.
    def __init__(self):
        Actor.__init__(self, parent_class=Child)

a=Actor(parent_class=Child) #prints "I'm the child." instead of "I'm the parent."
l=LeadActor() #prints "I'm the child." instead of "I'm the parent."
</code></pre>
<p>Just be careful that the user knows not to set a different value for parent_class with different subclasses of Actor. I mean, if you make multiple kinds of Actors, you'll only want to set parent_class once, unless you want it to change for all of them.</p>
</div>
<span class="comment-copy">Why not just <code>import that_library; that_library.UselessObject = MyOwnObject</code>?</span>
<span class="comment-copy">Something like <a href="https://stackoverflow.com/q/45673983/846892">this</a> may help.</span>
<span class="comment-copy">Sweet! did not know u could do that! @ Ashwini Chaudhary- Yep answer and that post better describes my issue</span>
<span class="comment-copy">@Rawing, Yes, thats a great idea!</span>
<span class="comment-copy">The answer given will do - but we should note that this has not to do with "Metaclasses" - this is known as "Monkeypatching".</span>
<span class="comment-copy">You really need to add the <code>import other</code> and <code>other.UselessObject = CoolObject</code> for it to work in OP's case</span>
<span class="comment-copy">@MarkusMeskanen True, and you can see that from Rawing's comment, but this is just a simple MCVE that can go into one file. I didn't want to mess around creating an example that needs the reader to create two separate files just to test a dozen lines of code.</span>
<span class="comment-copy">I understand the idea behind you thought, but this is SO, you should answer to OP's question directly, and in his case it's not a class he's defined in the first place, but a class from someone elses package.</span>
<span class="comment-copy">If CoolObject needed to inherit UselessObject, would this answer suffice?</span>
<span class="comment-copy">@Shule. Sure! I've just added some code to illustrate that.</span>
<span class="comment-copy">Thanks! I could never quite grasp what a 'monkey patch' was. I will have to check out <code>unittest.mock</code></span>
