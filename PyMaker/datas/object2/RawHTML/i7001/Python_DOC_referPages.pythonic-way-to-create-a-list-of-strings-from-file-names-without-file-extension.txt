<div class="post-text" itemprop="text">
<p>I have a folder in my computer with many <code>.txt</code> files:</p>
<pre><code>file_one.txt    --&gt; location = r'C:\Users\User\data\file_one.txt'
file_two.txt    --&gt; location = r'C:\Users\User\data\file_two.txt'
file_forty.txt  --&gt; location = r'C:\Users\User\data\file_forty.txt'
</code></pre>
<p>How can I turn the name of the files (without the <code>.txt</code> part) into a list like this:</p>
<pre><code>list_from_files = ['file_one', 'file_two', 'file_forty']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>pathlib</code><sup>1</sup>. It has a dedicated <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.stem" rel="nofollow noreferrer"><code>stem</code></a> property which returns the filename without suffix:</p>
<pre><code>import pathlib

p = pathlib.Path('.')   # current directory, insert your directory here
[x.stem for x in p.glob('*.txt')]
</code></pre>
<hr/>
<p><sup>1</sup>
<code>pathlib</code> is part of the <a href="https://docs.python.org/library/pathlib.html" rel="nofollow noreferrer">standard library in Python 3.4+</a> - but you can use third-party (backport-)packages, available on PyPI and conda, like <a href="https://pypi.python.org/pypi/pathlib/" rel="nofollow noreferrer"><code>pathlib</code></a> and <a href="https://pypi.python.org/pypi/pathlib2/" rel="nofollow noreferrer"><code>pathlib2</code></a> if you have an older Python version.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote this but I much prefer MSeifert's answer. I checked and pathlib seems available in Python 2.7 as well.</p>
<p>You can try something like this</p>
<pre><code>import os
import glob
print([os.path.splitext(os.path.split(x)[-1])[0] for x in glob.glob("/path/to/dir/*.txt")])
</code></pre>
<p>It uses a list comprehension, which you can read about <a href="http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Comprehensions.html" rel="nofollow noreferrer">here</a>.</p>
<p>In <code>glob()</code> you can add in the path to your directory of choice. </p>
<p><code>os.path.split(x)[-1]</code> gets the file name without the path info</p>
<p><code>os.path.splitext(...)[0]</code> is used to split the <code>filename.extension</code> into a tuple `(filename, extension), of which the first element is chosen to get just the filename.</p>
</div>
<span class="comment-copy">Target dupe only covers half the question.</span>
<span class="comment-copy"><code>[os.path.splitext(os.path.basename(f))[0] for f in os.listdir('/path/to/location')]</code></span>
<span class="comment-copy">use <code>os.listdir()</code> and <code>split</code> the name of files</span>
<span class="comment-copy">Other half of the question is answered by this - <a href="https://stackoverflow.com/questions/541390/extracting-extension-from-filename-in-python" title="extracting extension from filename in python">stackoverflow.com/questions/541390/â€¦</a></span>
<span class="comment-copy">Why is there a downvote? I though that was a pretty good answer...</span>
<span class="comment-copy">By making use of <code>glob</code> he cannot run the program from any other location, He has to run from that specific directory. Its better to accept a path of dirrectory.</span>
<span class="comment-copy">He can do <code>glob("/path/to/my/dir/*.txt")</code>... ah I get it, he will get the paths that he doesn;t want... correcting, thank you</span>
<span class="comment-copy">Yes he can, but unnecessary whole file path get attached for every files, because of <code>glob</code></span>
<span class="comment-copy">Yes, there's a backport of <code>pathlib</code> in PyPI: <a href="https://pypi.python.org/pypi/pathlib2/" rel="nofollow noreferrer"><code>pathlib2</code></a>. But it's not part of the standard library. You probably have that package installed if it works on 2.7.</span>
<span class="comment-copy">It looks like a nice library... thanks for pointing it out.</span>
