<div class="post-text" itemprop="text">
<p>My program has a structure like so:</p>
<pre><code>scripts/
     __init__.py
     mod1.py
     mod2.py
     sub1/
         __init__.py
         mod3.py
     sub2/
         __init__.py
         mod4.py 
</code></pre>
<p>All programs are started with <code>mod1.py</code> which chooses which subsequent script (<code>mod3/mod4.py</code>) to run based off supplied system arguments. So the top level directory at import is <code>scripts/</code>. </p>
<p>Say I run my program such that <code>&gt;mod1.py 3</code> executes <code>sub1.mod3</code>. Within <code>mod3</code> I need a function defined in <code>mod2</code> (this module holds reused code blocks for <code>mod3/mod4</code>). </p>
<p>When I try <code>from .. import mod2</code> I get the <code>ValueError</code> that I attempted a relative import beyond the top-level directory. I was referencing the <a href="https://www.python.org/dev/peps/pep-0328/#guido-s-decision" rel="nofollow noreferrer">docs</a> on the syntax, and if we compare them to my situation, <code>mod3.py</code> would be the current module (after <code>mod1.py</code>) called it. </p>
<p>What is wrong with how I am trying to do relative imports?</p>
<p><strong>mod1.py</strong>:</p>
<pre><code>import sys

def imp(module):
    m = __import__(module) # equivalent to import module as m
    m.start()

if __name__ == '__main__':
    mods = {'3': 'sub1.mod3',
            '4': 'sub2.mod4'}

    imp(mods[sys.argv[1]])
</code></pre>
<p><strong>mod3.py</strong></p>
<pre><code>from .. import mod2  # fails
import mod2  # works; guessing since import considers mod1 location top-level
.
.
.
def start():
    # do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You say:</p>
<blockquote>
<p>All programs are started with mod1.py which chooses which subsequent script (mod3/mod4.py) to run based off supplied system arguments. So the top level directory at import is scripts/. </p>
</blockquote>
<p><a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">From the docs</a> (6.4.2 Intra-package Referencing):</p>
<blockquote>
<p>Note that relative imports are based on the name of the current module. Since the name of the main module is always "__main__", modules intended for use as the main module of a Python application must always use absolute imports.</p>
</blockquote>
<p>hence you must use absolute imports in your files.</p>
<p>So your code should read</p>
<pre><code>from scripts.mod2 import X
</code></pre>
<p>or</p>
<pre><code>from scripts import mod2
</code></pre>
<p>Additionally, I'm not sure why you want to do this.
It would be simpler to keep both modules in separate packages, and load them with an <code>if</code> condition, while keeping the files all in the same directory, sans the <code>__init__.py</code>:</p>
<pre><code>if sys.argv[1] == '3':
    import mod3
elif sys.argv[2] == '4':
    import mod4
</code></pre>
<p>If you must keep them in separate folders, use this strcture:</p>
<pre><code>scripts/
    mod1.py
    pkg/
        __init__.py
        mod2.py
        sub1/
            __init__.py
            mod3.py
        sub2/
            __init__.py
            mod4.py
</code></pre>
<p>With this structure your relative imports should work. Importing would then be:</p>
<pre><code>if sys.argv[1] == '3':
    from pkg.sub1 import mod3
elif sys.argv[2] == '4':
    from pkg.sub2 import mod4
</code></pre>
<p>It is worthy to note that, regardless of what part of a library or package you import, the entire package gets imported anyway - it's just not all available in the scope.</p>
</div>
<span class="comment-copy"><code>mod2</code> is not in <code>scripts.sub2</code></span>
<span class="comment-copy">You should include a link to the documentation source.</span>
<span class="comment-copy">good point, done!</span>
<span class="comment-copy">When I do either of those, I get <code>'no module named scripts'</code>. Again, just calling <code>import mod2</code> works, even though its in <code>mod3/mod4</code>; but I should be able to do what you've said; don't know why I cant.</span>
<span class="comment-copy">I need to keep them in their own directories, so not using relative imports doesn't solve the problem.</span>
<span class="comment-copy">Fair enough - but still, why do they need to be one module?</span>
