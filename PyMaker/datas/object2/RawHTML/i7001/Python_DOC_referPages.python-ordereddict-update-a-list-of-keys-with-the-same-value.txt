<div class="post-text" itemprop="text">
<p>I am trying to update a list of keys for an <code>OrderedDict</code> with the same <code>int</code> value, like</p>
<pre><code>for idx in indexes:
    res_dict[idx] = value
</code></pre>
<p>where <code>value</code> is an <code>int</code> variable, <code>indexes</code> is a <code>list</code> of <code>int</code>s, which act as keys, <code>res_dict</code> is an <code>OrderedDict</code>, tried to resolve the above in one line,</p>
<pre><code>res_dict[indexes]=value
</code></pre>
<p>But got the error:</p>
<pre><code>TypeError: unhashable type: 'list'
</code></pre>
<p>Is a loop or list comprehension the only way(s) to do this update here? </p>
</div>
<div class="post-text" itemprop="text">
<p>The OrderedDict (and dict as well) provide the method <code>update</code> to update multiple values at once.</p>
<p>The most pythonic manner to do what you want to do is : </p>
<pre><code>res_dict.update((idx, value) for idx in indexes)
</code></pre>
<p>It will keep the original order of your <code>OrderedDict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>update</code></a> your <code>OrderedDict</code> based on a new <code>OrderedDict</code> that's created <a href="https://docs.python.org/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>fromkeys</code></a>. </p>
<p>The <code>fromkeys</code> method allows to give a default value for all the keys, so you don't need any explicit iteration here. And because it uses <code>OrderedDict</code>s <code>fromkeys</code> it will also keep the order of your <code>indexes</code>:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; indexes = [1, 2, 3]
&gt;&gt;&gt; value = 2
&gt;&gt;&gt; od = OrderedDict([(0, 10), (1, 10)])
&gt;&gt;&gt; od.update(OrderedDict.fromkeys(indexes, value))  # that's the interesting line
&gt;&gt;&gt; od
OrderedDict([(0, 10), (1, 2), (2, 2), (3, 2)])
</code></pre>
<p>Note that in case the <code>OrderedDict</code> were empty before the <code>update</code> you could also use:</p>
<pre><code>&gt;&gt;&gt; od = OrderedDict.fromkeys(indexes, value)
&gt;&gt;&gt; od
OrderedDict([(1, 2), (2, 2), (3, 2)])
</code></pre>
</div>
<span class="comment-copy"><b><i>indexes is a list of keys</i></b>? and <code>keys</code> are what? If there is a list inside <code>indexes</code> (which I bet there is), then make sure it is not used as a key; simply because <code>lists</code> can't be used as keys.</span>
<span class="comment-copy">@Abdou <code>indexes</code> is a list of <code>int</code>s, which act as keys in this context</span>
<span class="comment-copy">Well... you could do <code>res_dict.update((idx, value) for idx in indexes)</code>...</span>
<span class="comment-copy">The explicit <code>OrderedDict(...)</code> is redudant here if <code>res_dict</code> is already an <code>OrderedDict</code>... existing keys will keep their ordering and any new keys will be inserted as normal...</span>
<span class="comment-copy">Yes that's right, thanks for the precision!</span>
<span class="comment-copy">in my case, <code>od</code> is not empty at the first place, with initialized key:value pairs in place</span>
<span class="comment-copy">okay, then you need the explicit <code>.update(OrderedDict.fromkeys(indexes, value))</code>. It was just a thought. :)</span>
<span class="comment-copy"><code>res_dict.update((idx, value) for idx in indexes)</code> also retains the order of the <code>indexes</code>, right? considering <code>res_dict</code> is not empty at the first place</span>
<span class="comment-copy">Yes, that also keeps the order. I just mentioned it because normal <code>dict.fromkeys</code> doesn't keep the order. Note that the order of already present items will stay the same no matter which approach you use (except when you delete keys). But if you <b>also add new keys with <code>update</code></b> these new keys order depends on the orderedness of the argument passed to <code>update</code>. So yes <code>(idx, value) for idx in indexes</code> is fine too but <code>dict.fromkeys(indexes, value)</code> or <code>{idx: value for idx in indexes}</code> aren't.</span>
