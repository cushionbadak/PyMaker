<div class="post-text" itemprop="text">
<p>Given a function with a parameter <code>a</code> and two other parameters (<code>pickle_from</code>, <code>pickle_to</code>), I'd like to:</p>
<ul>
<li>Load and return the pickled object located at <code>pickle_from</code>, if <code>pickle_from</code> is not <code>None</code>.  If it is <code>None</code>, compute some function of <code>a</code> and return it.</li>
<li>Dump the result of the above to <code>pickle_to</code> if <code>pickle_to</code> is not <code>None</code>.</li>
</ul>
<p>With a single function this is straightforward.  If <code>pickle_from</code> isn't null, the function just loads the pickled result and returns it.  Otherwise, it performs some time-intensive calculation with <code>a</code>, dumps that to <code>pickle_to</code>, and returns the calculation result.</p>
<pre><code>try:
   import cPickle as pickle
except:
   import pickle

def somefunc(a, pickle_from=None, pickle_to=None):

    if pickle_from:
        with open(pickle_from + '.pickle', 'rb') as f
            res = pickle.load(f)

    else:
        # Re-calcualte some time-intensive func call
        res = a ** 2

    if pickle_to:
        # Update pickled data with newly calculated `res`
        with open(pickle_to + '.pickle', 'wb') as f:
            pickle.dump(res, f)

    return res
</code></pre>
<p><strong>My question is regarding how to build a decorator so that this process can form a shell around multiple functions similar to <code>somefunc</code></strong>, cutting down on source code in the process.</p>
<p>I'd like to be able to write something like:</p>
<pre><code>@pickle_option
def somefunc(a, pickle_from=None, pickle_to=None)  
    # or do params need to be in the decorator call?
    # remember, "the files are in the computer"
    res = a ** 2
    return res
</code></pre>
<p>Is this possible?  Something about decorators makes my head explode, so I will politely decline to post here "what I have tried."</p>
</div>
<div class="post-text" itemprop="text">
<p>This decorator requires a little bit of introspection. Specifically, I've made use of <a href="https://docs.python.org/3/library/inspect.html#inspect.Signature" rel="nofollow noreferrer"><code>inspect.Signature</code></a> to extract the <code>pickle_from</code> and <code>pickle_to</code> parameters.</p>
<p>Other than that, it's a very straightforward decorator: It keeps a reference to the decorated function, and calls it if necessary.</p>
<pre><code>import inspect
from functools import wraps

def pickle_option(func):
    sig = inspect.signature(func)

    @wraps(func)
    def wrapper(*args, **kwargs):
        # get the value of the pickle_from and pickle_to parameters
        # introspection magic, don't worry about it or read the docs
        bound_args = sig.bind(*args, **kwargs)
        pickle_from = bound_args.arguments.get('pickle_from', \
                             sig.parameters['pickle_from'].default)
        pickle_to = bound_args.arguments.get('pickle_to', \
                             sig.parameters['pickle_to'].default)

        if pickle_from:
            with open(pickle_from + '.pickle', 'rb') as f:
                result = pickle.load(f)
        else:
            result = func(*args, **kwargs)

        if pickle_to:
            with open(pickle_to + '.pickle', 'wb') as f:
                pickle.dump(result, f)

        return result

    return wrapper
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given your use case, I think it would be clearer to use just a generic wrapper:</p>
<pre><code>def pickle_call(fun, *args, pickle_from=None, pickle_to=None, **kwargs):
    if pickle_from:
        with open(pickle_from + '.pickle', 'rb') as f
            res = pickle.load(f)
    else:
        res = fun(*args, **kwargs)
    if pickle_to:
        # Update pickled data with newly calculated `res`
        with open(pickle_to + '.pickle', 'wb') as f:
            pickle.dump(res, f)
    return res
</code></pre>
<p>Then you'd use it like:</p>
<pre><code>res = pickle_call(somefunc, a, pickle_from="from", pickle_to="to")
</code></pre>
<p>This avoids having to add a decorator everywhere you want to use this feature, and in fact works with any callable (not just functions), from your code or else.</p>
</div>
<span class="comment-copy">Shouldn't <code>pickle_from</code>, <code>pickle_to</code> and <code>pathname</code> be parameters for the decorator? Why does <code>somefunc</code> have them? You can have them whereever you want, but it affects how the decorator must be coded.</span>
<span class="comment-copy">I would think they should be in the function itself because they're designed to be specified by the user rather than in the code itself.  But hence my question</span>
<span class="comment-copy">@Rawing well, hold on. If they're given to the decorator, then there's no way to change the behavior when you call the function. It'll either always or never load the value.</span>
<span class="comment-copy">@mwchase correct, that's what I was trying to say.</span>
<span class="comment-copy">Will <code>somefunc</code> ever use the <code>pickle_from</code> and <code>pickle_to</code> parameters? You could have the decorator provide those parameters, then you wouldn't have to define them every time.</span>
<span class="comment-copy">@BradSolomon functools.wraps should fix the inspectability. See <a href="https://docs.python.org/3.6/library/functools.html#functools.wraps" rel="nofollow noreferrer">docs.python.org/3.6/library/functools.html#functools.wraps</a></span>
<span class="comment-copy">Where <code>res = pickle_call(somefunc...</code> is specified in the body of <code>somefunc</code>?  Sorry, following you up til there.</span>
<span class="comment-copy">@BradSolomon No, sorry, the second snippet was meant to show how you would use the wrapper whenever you need to call one of these functions. I assumes you have defined a function <code>somefunc</code> that receives a parameter <code>a</code> (like in your example). Then, instead directly calling <code>somefunc</code>, you would call <code>pickle_call</code> (or however you want to name the wrapper) and pass <code>somefunc</code> as the first parameter followed by the usual parameters of the function, plus <code>pickle_from</code> / <code>pickle_to</code> as necessary; then <code>pickle_call</code> invokes the passed function only if necessary.</span>
