<div class="post-text" itemprop="text">
<p>I am using "<a href="https://github.com/ross/requests-futures" rel="nofollow noreferrer">requests-futures</a>" package and call asynchronous get/post in asynchronous get/post result callback (add_done_callback on futur result). Sometimes, my code hangs. After many investigation hours, I can reproduce the lock with a minimal code: </p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import time

pool = ThreadPoolExecutor(max_workers=10)

def f(_):
    time.sleep(0.1) # Try to force context switch
    x = pool.submit(lambda: None)
    print "1"
    x.result()
    print "2"

def main():
    x = pool.submit(lambda : None)
    x.add_done_callback(f)
    print "3"
    x.result()
    print "4"

print "==="
main()
</code></pre>
<p>If I run this peace of code in a bash loop:</p>
<pre><code>$&gt; while true; do python code.py; done;
</code></pre>
<p>The program hangs every times with the "trace": </p>
<pre><code>(...)
===
1
2
3
4
===
3
4
1
</code></pre>
<p>If I break it with ctrl^c, I have the following stack trace:</p>
<pre><code>^CError in atexit._run_exitfuncs:
Traceback (most recent call last):
  File "/usr/lib/python2.7/atexit.py", line 24, in _run_exitfuncs
    func(*targs, **kargs)
  File "/home/yienyien/Angus/test/futur/env/local/lib/python2.7/site-
packages/concurrent/futures/thread.py", line 46, in _python_exit
    t.join(sys.maxint)
  File "/usr/lib/python2.7/threading.py", line 951, in join
    self.__block.wait(delay)
  File "/usr/lib/python2.7/threading.py", line 359, in wait
    _sleep(delay)
KeyboardInterrupt
Error in sys.exitfunc:
Traceback (most recent call last):
  File "/usr/lib/python2.7/atexit.py", line 24, in _run_exitfuncs
    func(*targs, **kargs)
  File "/home/yienyien/Angus/test/futur/env/local/lib/python2.7/site-
packages/concurrent/futures/thread.py", line 46, in _python_exit
    t.join(sys.maxint)
 File "/usr/lib/python2.7/threading.py", line 951, in join
    self.__block.wait(delay)
  File "/usr/lib/python2.7/threading.py", line 359, in wait
    _sleep(delay)
KeyboardInterrupt
</code></pre>
<p>Somebody could explain me what is happening ? I check <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow noreferrer">the possible deadlocks</a> in the concurrent.futures module, but I do not think it matches.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>tasks submitted to a fixed-sized thread pool may not call blocking operations like <code>Future.result()</code>. This leads to a specific kind of deadlock, called "thread starvation". Using <code>time.sleep()</code> also switches a thread off the service and increases probability of thread starvation.</p>
</div>
<div class="post-text" itemprop="text">
<p>I answer to my own question. 
After investigation, it's simple. I do not shutdown the <code>TheadPoolExecutor</code> and do not use <code>with</code>, then sometimes the <code>main</code> function completes and the finalize the main thread, the <code>ThreadPoolExecutor</code> state becomes "shutdown" whereas callback is not completed. </p>
</div>
<span class="comment-copy">I do not think this is the case, but I found, it's much simpler. I will write the answer. Thank you.</span>
