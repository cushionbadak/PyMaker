<div class="post-text" itemprop="text">
<p>I am using python 2.7, and I have a text file that looks like this:</p>
<pre>id     value
---    ----
1      x
2      a
1      z
1      y
2      b</pre>
<p>I am trying to get an ouput that looks like this:</p>
<pre>id     value
---    ----
1      x,z,y
2      a,b</pre>
<p>Much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#read
fp=open('','r') 
d=fp.read().split("\n")
fp.close()
x=len(d)
for i in range(len(d)):
    n= d[i].split()
    d.append(n)
d=d[x:]
</code></pre>
<hr/>
<pre><code>m={}
for i in d:
    if i[0] not in m:
        m[i[0]]=[i[1]]
    else:
        if i[1] not in m[i[0]]:
            m[i[0]].append(i[1])
for i in m:
    print i,",".join(m[i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest solution would be to use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> and <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>. If you don't care about order you could also use <code>set</code>s instead of <code>OrderedDict</code>.</p>
<pre><code>from collections import defaultdict, OrderedDict

# Keeps all unique values for each id
dd = defaultdict(OrderedDict)
# Keeps the unique ids in order of appearance
ids = OrderedDict()

with open(yourfilename) as f:
    f = iter(f)
    # skip first two lines
    next(f), next(f)  
    for line in f:
        id_, value = list(filter(bool, line.split()))  # split at whitespace and remove empty ones
        dd[id_][value] = None  # dicts need a value, but here it doesn't matter which one...
        ids[id_] = None

print('id     value')
print('---    ----')
for id_ in ids:
    print('{}      {}'.format(id_, ','.join(dd[id_])))
</code></pre>
<p>Result:</p>
<pre><code>id     value
---    ----
1      x,z,y
2      a,b
</code></pre>
<p>In case you want to write it to another file just concatenate what I printed with <code>\n</code> and <code>write</code> it to a file.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this could also work, although the other answer seems more sophisticated:</p>
<pre><code>input =['1,x',
'2,a',
'1,z',
'1,y',
'2,b',
'2,a', #added extra values to show duplicates won't be added
'1,z',
'1,y']

output = {}

for row in input:
    parts = row.split(",")
    id_ = parts[0]
    value = parts[1]
    if id_ not in output:
        output[id_] = value
    else:
        a_List = list(output[id_])
        if value not in a_List:
            output[id_] += "," + value
        else:
            pass
</code></pre>
<p>You end up with a dictionary similar to what you requested.</p>
</div>
<span class="comment-copy">I rolled back your question because it non-trivially changed the question and invalidated all answers. Please ask a new question instead of doing such kinds of edits. :)</span>
<span class="comment-copy">Just a minor thing: <code>id</code> will shadow the builtin <code>id</code> function. Better to give it a different name, i.e. <code>id_</code>. Good solution otherwise (+1)</span>
<span class="comment-copy">Please note, though, that there are no commas in the value strings using this method... if anyone wants to chime in on how to change this, I'd be interested.</span>
<span class="comment-copy">You could use <code>output[id_] += ',' + value</code> (instead of <code>output[id_] += value</code>) if you want to insert the commas.</span>
<span class="comment-copy">Note that your solution might produce unexpected result (at least the duplicate check won't work correctly all the time) for multi-character values, e.g. if you add <code>'1,zab'</code> at the beginning of the list (or <code>'2,ab'</code>).</span>
<span class="comment-copy">@mseifert Let's fix it.Or I guess your solution already has.</span>
