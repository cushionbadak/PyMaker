<div class="post-text" itemprop="text">
<p>How do I replace special characters (emoticons) with a given feature.</p>
<p>For example</p>
<pre><code>emoticons = \
    [   ('__EMOT_SMILEY',   [':-)', ':)', '(:', '(-:', ] )  ,\
        ('__EMOT_LAUGH',        [':-D', ':D', 'X-D', 'XD', 'xD', ] )    ,\
        ('__EMOT_LOVE',     ['&lt;3', ':\*', ] )   ,\
        ('__EMOT_WINK',     [';-)', ';)', ';-D', ';D', '(;', '(-;', ] ) ,\
        ('__EMOT_FROWN',        [':-(', ':(', ] )   ,\
        ('__EMOT_CRY',      [':,(', ':\'(', ':"(', ':(('] ) ,\
    ]

msg = 'I had a beautiful day :)'
</code></pre>
<p>output desired</p>
<pre><code>&gt;&gt; I had a beautiful day __EMOT_SMILEY
</code></pre>
<p>I know how to do it with a dict, but here I have multiple values associated to each feature</p>
<p>The following code will not work in this case</p>
<pre><code>for emote, replacement in emoticons.items():
  msg = msg.replace(emote, replacement)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a dictionary <em>and</em> a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a>:</p>
<pre><code>import re

def replace(msg, emoticons):
    d = {r: emote for emote, replacement in emoticons for r in replacement}
    pattern = "|".join(map(re.escape, d))
    msg = re.sub(pattern, lambda match: d[match.group()], msg)
    return msg

print(replace(msg, emoticons))  # I had a beautiful day __EMOT_SMILEY
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This oughta do it:</p>
<pre><code>emoticons = [   ('__EMOT_SMILEY',   [':-)', ':)', '(:', '(-:', ] ),
        ('__EMOT_LAUGH',    [':-D', ':D', 'X-D', 'XD', 'xD', ] ),
        ('__EMOT_LOVE',     ['&lt;3', ':\*', ] ),
        ('__EMOT_WINK',     [';-)', ';)', ';-D', ';D', '(;', '(-;', ] ),
        ('__EMOT_FROWN',        [':-(', ':(', '(:', '(-:', ] ),
        ('__EMOT_CRY',      [':,(', ':\'(', ':"(', ':(('] )
    ]

emoticons = dict(emoticons)    
emoticons = {v: k for k in emoticons for v in emoticons[k]}

msg = 'I had a beautiful day :)'

for item in emoticons:
    if item in msg:
        msg = msg.replace(item, emoticons[item])
</code></pre>
<p>So, you crate a dict, invert it and replace all the emoticons that exist in sentence.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>emoticons = [   ('__EMOT_SMILEY',   [':-)', ':)', '(:', '(-:', ] )  ,
    ('__EMOT_LAUGH',        [':-D', ':D', 'X-D', 'XD', 'xD', ] )    ,
    ('__EMOT_LOVE',     ['&lt;3', ':\*', ] )   ,
    ('__EMOT_WINK',     [';-)', ';)', ';-D', ';D', '(;', '(-;', ] ) ,
    ('__EMOT_FROWN',        [':-(', ':(', '(:', '(-:', ] )  ,
    ('__EMOT_CRY',      [':,(', ':\'(', ':"(', ':(('] ) ,
]


msg = 'I had a beautiful day :)'

for emote, replacement in emoticons:
     for symbol in replacement:
         msg = msg.replace(symbol,emote)

print(msg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>emoticons = [('__EMOT_SMILEY',   [':-)', ':)', '(:', '(-:']),
             ('__EMOT_LAUGH',    [':-D', ':D', 'X-D', 'XD', 'xD']),
             ('__EMOT_LOVE',     ['&lt;3', ':\*']),
             ('__EMOT_WINK',     [';-)', ';)', ';-D', ';D', '(;', '(-;']),
             ('__EMOT_FROWN',    [':-(', ':(', '(:', '(-:']),
             ('__EMOT_CRY',      [':,(', ':\'(', ':"(', ':(('])]

msg = 'I had a beautiful day :)'

grabs = set([x for _, y in emoticons for x in y[1]])

for word in [x for x in msg.split() if all(y in grabs for y in x)]:
    for emot_code, search_patterns in emoticons:
        if word in search_patterns:
            msg = msg.replace(word, emot_code)
print(msg)  # I had a beautiful day __EMOT_SMILEY
</code></pre>
<p>Instead of trying to find any of the emoticons in the <code>msg</code> to replace them, it first searches for substrings that <em>might be emoticons</em> and tries to replaces those only.</p>
<p>That said, it does fail for cases with punctuation right after or before the emoticons; e.g., <code>"I had a beautiful day :)."</code></p>
<p>So all in all.. <code>"__EMOT_FROWN"</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There are plenty of answers giving you exactly what you asked for, but sometimes I think exactly what you asked for isn't the best solution. Like tobias_k said, the cleanest solution is to map many keys to the same value, essentially "reversing" your dictionary:</p>
<pre><code>emoticons = \
    [   ('__EMOT_SMILEY',   [':-)', ':)', '(:', '(-:', ] )  ,\
        ('__EMOT_LAUGH',        [':-D', ':D', 'X-D', 'XD', 'xD', ] )    ,\
        ('__EMOT_LOVE',     ['&lt;3', ':\*', ] )   ,\
        ('__EMOT_WINK',     [';-)', ';)', ';-D', ';D', '(;', '(-;', ] ) ,\
        ('__EMOT_FROWN',        [':-(', ':(', '(:', '(-:', ] )  ,\
        ('__EMOT_CRY',      [':,(', ':\'(', ':"(', ':(('] ) ,\
    ]

emote_dict = {emote: name for name, vals in emoticons for emote in vals}
</code></pre>
<p>The above code reverses the dictionary, so now it can be used like this:</p>
<pre><code>&gt;&gt;&gt;print(emote_dict[':)'])
_EMOT_SMILY
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try using a dict, This should work as long as you only have 2 or 3 chars in your emoticons and the person uses a space... Im sure you can make it more robust but this will work for now.</p>
<pre><code>emoticons = {
    '__EMOT_SMILEY': {':-)', ':)', '(:', '(-:'},
    '__EMOT_LAUGH' : {':-D', ':D', 'X-D', 'XD', 'xD'},
    '__EMOT_LOVE' : {'&lt;3', ':\*'},
    '__EMOT_WINK' :{';-)', ';)', ';-D', ';D', '(;', '(-;'},
    '__EMOT_FROWN' : {':-(', ':(', '(:', '(-:'},
    '__EMOT_CRY' : {':,(', ':\'(', ':"(', ':(('}
        }

msg = 'I had a beautiful day :,('
img = msg[-3]
if img[0]==' ':
    img = msg[-2:]
else:
    img = msg[-3:]

for k, v in emoticons.items():
    if img in v:
        print(msg[:-3], k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this instead:</p>
<pre><code>emoticons = [
    ('__EMOT_SMILEY', [':-)', ':)', '(:', '(-:',]),
    ('__EMOT_LAUGH',  [':-D', ':D', 'X-D', 'XD', 'xD',]),
    ('__EMOT_LOVE',   ['&lt;3', ':\*',]),
    ('__EMOT_WINK',   [';-)', ';) ', ';-D', ';D', '(;', '(-;',]),
    ('__EMOT_FROWN',  [':-(', ':(', '(:', '(-:',]),
    ('__EMOT_CRY',    [':,(', ':\'(', ':"(', ':((',]),
]

msg = 'I had a beautiful day :)'

for key, replaceables in dict(emoticons).items():
  for replaceable in replaceables:
    msg = msg.replace(replaceable, key)

print(msg)
&gt;&gt;&gt; I had a beautiful day __EMOT_SMILEY
</code></pre>
</div>
<span class="comment-copy">you can still use a dict, with values being lists. Then you check for the presence in the list.</span>
<span class="comment-copy">Or use a dict with many keys mapping to the same value.</span>
<span class="comment-copy">Obviously it won't work for many reasons.  1. Lists don't have items() method. 2. You're trying to replace a string with an entire list of symbols.</span>
<span class="comment-copy">BTW, <code>'(:', '(-:'</code> should probably not be in the "frown" category.</span>
<span class="comment-copy">@ChristianDean You're right, thanks. I copy/pasted it from the question without thinking too much, but it does make it harder to read.</span>
