<div class="post-text" itemprop="text">
<p>I'm trying to iterate over each row in a list of lists, append an element from each row to a new list, then find the unique elements in the new list.</p>
<p>I understand that I can do this easily with a for loop. I'm trying a different route because I want to learn more about classes and functions.</p>
<p>Here's an example of the list of lists. The first row is the header:</p>
<pre><code>legislators = [
 ['last_name', 'first_name', 'birthday', 'gender', 'type', 'state', 'party'],
 ['Bassett', 'Richard', '1745-04-02', 'M', 'sen', 'DE', 'Anti-Administration'],
 ['Bland', 'Theodorick', '1742-03-21', '', 'rep', 'VA', ''],
 ['Burke', 'Aedanus', '1743-06-16', '', 'rep', 'SC', ''],
 ['Carroll', 'Daniel', '1730-07-22', 'M', 'rep', 'MD', ''],
 ['Clymer', 'George', '1739-03-16', 'M', 'rep', 'PA', ''],
 ['Contee', 'Benjamin', '', 'M', 'rep', 'MD', ''],...]
</code></pre>
<p>Here's my code:</p>
<pre><code>import csv
f = open("legislators.csv")
csvreader = csv.reader(f)
legislators = list(csvreader)

class Dataset:
    def __init__(self, data):
        self.header = data[0] #Isolate header from CSV file
        self.data = data[1:] #Subset CSV data to remove header

legislators_dataset = Dataset(legislators)

def the_set_maker(dataset):
    gender = []
    for each in dataset:
        gender.append(each[3])
    return set(gender)

t=the_set_maker(legislators_dataset)
print(t)
</code></pre>
<p>I get the following error:</p>
<pre class="lang-none prettyprint-override"><code>TypeErrorTraceback (most recent call last)
&lt;ipython-input-1-d65cb459931b&gt; in &lt;module&gt;()
     20     return set(gender)
     21
---&gt; 22 t=the_set_maker(legislators_dataset)
     23 print(t)

&lt;ipython-input-1-d65cb459931b&gt; in the_set_maker(dataset)
     16 def the_set_maker(dataset):
     17     gender = []
---&gt; 18     for each in dataset:
     19         gender.append(each[3])
     20     return set(gender)

TypeError: 'Dataset' object is not iterable
</code></pre>
<p>I think the answer is to try to create a method using <code>def __iter__(self)</code> in my <code>Dataset</code> class, but I haven't been able to get this to work. Is this the right track? If not, what's a better one?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer">the documentation for <code>__iter__</code></a>:</p>
<blockquote>
<p>This method should return a new iterator object that can iterate over all the objects in the container.</p>
</blockquote>
<p>You might try the following class definition:</p>
<pre><code>class Dataset:
    def __init__(self, data):
        self.header = data[0] #Isolate header from CSV file
        self.data = data[1:] #Subset CSV data to remove header

    def __iter__(self):
        return iter(self.data)
</code></pre>
<p>If you're open to trying new options, consider using Pandas:</p>
<pre><code>import pandas as pd
df = pd.read_csv('legislators.csv')
t=df['gender']
</code></pre>
<p>Or, if you really want to read in the CSV yourself,</p>
<pre><code>df = pd.DataFrame(legislators[1:], columns=legislators[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you mentioned, you'll need to implement <code>__iter__</code> in <code>class Dataset</code>. Note that this is actually the <code>set(...)</code> call that's throwing the error, since it iterates through your class to enumerate the set elements.</p>
<p>Luckily your set elements are likely just <code>Dataset.data</code>, which makes this easy to write <code>Dataset.__iter__</code>.</p>
<pre><code>class Dataset(object):
    ...

    def __iter__(self):
        return iter(self)
</code></pre>
<p>I would point out, however, that your <code>the_set_maker</code> function seems a little too specialized to be top-level. It's also a bit trivial, since it's literally <code>set([el[3] for el in container])</code>. I would put this in <code>Dataset</code> as well.</p>
<pre><code>class Dataset(object):
    ...

    def to_set(self):
        return set([el[3] for el in self.data])
        # Note that this throws away your header!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you need to change a little</p>
<pre><code>class Dataset:
    i = 0

    def __init__(self, data):
        self.header = data[0] #Isolate header from CSV file
        self.data = data[1:] #Subset CSV data to remove header

    def __iter__(self):
        return self
    def __next__(self):
        return self.next()

    def next(self):
        if self.i &lt; len(self.data):
            self.i += 1
            return self.data[self.i-1]
        else:
            raise StopIteration()
</code></pre>
</div>
<span class="comment-copy">To make an object <i>iterable</i>, it needs to implement <code>__iter__</code>, which must return an <i>iterator</i>, i.e., an object that implements <code>__iter__</code> <b>and</b> <code>__next__</code>. Iterator <code>__iter__</code> methods should simply return <code>self</code>.</span>
<span class="comment-copy">@juanpa.arrivillaga Thank you. I'll look into <b>next</b>. Can you demonstrate how to use <b>next</b> and <b>iter</b> in my code?</span>
<span class="comment-copy">I'm not convinced this is a duplicate of that. You answered "How do I make my class iterable" with "what is an iterable," which requires at least one or two logical jumps to implement. I've reopened.</span>
<span class="comment-copy">You should be able the get the behavior you're looking for by defining your iter method as <b>return iter(self.data)</b>. Alternatively, take a look at making a Pandas DataFrame out of your CSV file (or out of the list objects), and reference the column by name instead</span>
<span class="comment-copy">Just an aside, you can do <code>self.header, *self.data = data</code>...</span>
<span class="comment-copy">The <code>pandas</code> seems irrelevant. Regardless, the <code>csv</code> module is just fine...</span>
<span class="comment-copy">True, it's irrelevant to learning how to make objects iterable. In the specific case given, though, he mentioned wanting to get specific elements out of each row, in which case <code>numpy</code> or (since we have labeled columns) <code>pandas</code> is ideal for the purpose</span>
<span class="comment-copy">... so is the standard library <code>csv</code> and it doesn't require the heavy, heavy, <code>numpy</code>/<code>pandas</code> dependancy just to grab data from a column in a csv file.</span>
<span class="comment-copy">I was able to get the code to work- thank you all for your help and for the alternative ideas, especially the DataFrame. As you can see, I'm new to all of this, so I really appreciate the support.</span>
<span class="comment-copy">Thank you for this. I agree that the function is trivial- I'm trying to use classes and functions even if they are trivial so that I can become more comfortable with them, so I appreciate your example of how I can incorporate the function into the class!</span>
<span class="comment-copy">This is incorrectly implemented, you don't need <i>both <code>.next</code> and <code>__next__</code></i>, the former is Python 2, the latter is Python 3, don't mix them.</span>
<span class="comment-copy">Also, this makes <code>Dataset</code> an <i>iterator</i>, which is almost certainly not what you want.</span>
<span class="comment-copy">it will work both for Python3 and python2</span>
<span class="comment-copy">That's fine, I suppose, if you want to write code that is runnable on Python 2/3, but the main issue here is that you've made <code>Dataset</code> an <i>iterator</i>, not merely <i>iterable</i>, which is not a good practice. Consider all the built-in container types, <code>list</code>, <code>tuple</code>, <code>set</code> etc - these return specialized iterator objects from <code>iter</code>, not themselves. The <i>iterators</i> return themselves.</span>
<span class="comment-copy">I've got, thanks</span>
