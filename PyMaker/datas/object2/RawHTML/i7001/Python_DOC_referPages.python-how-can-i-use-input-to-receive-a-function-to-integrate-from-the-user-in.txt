<div class="post-text" itemprop="text">
<p>It is a program that calculates a continuous uniform distribution. So for example I enter x^2, with a = 0, b = 1. The program would evaluate x^2 from  0 to 1. The coefficient 1/(b-a) is part of the rules of a continuous uniform distribution. </p>
<pre><code>formula = input(
    "What is the formula? Use x for variables.")
a = input("What is the value of a?")
b = input("What is the value of b?")

formula = formula.replace("^", "**")

coefficient = 1 / (float(b) - float(a))
coefficient = float(coefficient)

ans,err = quad(formula, a, b)

print(ans * coefficient)
</code></pre>
<p>It is telling me that it can't convert the formula from a string to a float. The problem is that the formula string has the variable 'x' in it. So even if I do float(formula) it gives me an error that it can't convert from string to float. Is there any way around this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, the user is able to input a formula using the variables <code>a</code> and <code>b</code>. So an example would be: <code>formula = 'a*b'</code>, <code>a = 3</code>, <code>b = 5</code>, which would yield <code>15</code>. </p>
<p>Perhaps you could use the python <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">exec(string)</a> method to execute the code given in formula.</p>
</div>
<span class="comment-copy">I am not really sure what you are asking, but could it be that you are looking for the 'eval' function? It makes it possible to evaluate strings, e.g. eval('2*3') returns 6. If you need variables you could use format: eval('{a}*{b}'.format(a=2, b=3)) also returns 6</span>
<span class="comment-copy">You may find <a href="https://stackoverflow.com/questions/2371436/evaluating-a-mathematical-expression-in-a-string" title="evaluating a mathematical expression in a string">stackoverflow.com/questions/2371436/â€¦</a> useful, to fit to your specific use case. This is complicated stuff. I wouldn't recommend using <code>eval</code>, as discussed in that post, unless your user is explicitly trustworthy, as <code>eval</code> can and will always break your system. The same goes for <code>exec</code>.</span>
<span class="comment-copy"><code>formula</code> has to be a function (e.g. <code>def formula(x):...</code>) or <code>lambda</code> expression.  While not impossible, converting a string to a function at runtime is not trivial, and isn't something that a new Python programmer should focus on.  It would make more sense to have your user write a simple Python script file with the function.  You can ask for the file name, import it, and then evaluate it.  Get that approach working first, then revisit the string input idea.</span>
<span class="comment-copy">Convert <code>a</code> and <code>b</code> to float before giving them <code>quad</code></span>
<span class="comment-copy">You could explore <code>sympy</code>, a package that lets you create symbolic expressions.  Those can be <code>lambdified</code> to make a <code>numpy</code> compatible function.  But there's a good size learning curve.  Another thing to consider is creating a polynomial function. <code>numpy</code> has <code>poly</code> functions that create such a function from coefficients.</span>
<span class="comment-copy">Where would you apply <code>eval</code>.  Suppose the string is <code>x**2</code>?  <code>eval('x**2')</code> should give an Name error, <code>x</code> undefined.  What <code>quad</code> expects is a function created with <code>def formula(x): return x**2</code>.</span>
