<div class="post-text" itemprop="text">
<p>Consider a list  variable  <strong>t</strong></p>
<pre><code>In [55]: t
Out[55]:
['1.423',
 '0.046',
 '98.521',
 '0.010',
 '0.000',
 '0.000',
 '5814251520.0',
 '769945600.0',
 '18775908352.0',
 '2.45024350208e+11',
 '8131.903',
 '168485.073',
 '0.0',
 '0.0',
 '0.022',
 '372.162',
 '1123.041',
 '1448.424']
</code></pre>
<p>Now consider a <strong>namedtuple</strong> 'Point':</p>
<pre><code>Point = namedtuple('Point', 'usr sys idl wai hiq siq  used  buff  cach  free
    read  writ recv  send majpf minpf alloc  vmfree')
</code></pre>
<p>How do we convert the variable t to a Point?  The most obvious (to me anyways..) approach - of just providing the list as a constructor argument - does not work:</p>
<pre><code>In [57]: Point(t)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-57-635019d8b551&gt; in &lt;module&gt;()
----&gt; 1 Point(t)

TypeError: __new__() takes exactly 19 arguments (2 given)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>Point(*t)</code> to expand the contents of <code>t</code> as arguments to the <code>Point</code> constructor.</p>
</div>
<div class="post-text" itemprop="text">
<p>More efficient solution: Use the <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._make" rel="nofollow noreferrer">special <code>_make</code> alternate constructor</a> to directly construct the <code>namedtuple</code> from an arbitrary iterable without creating additional intermediate <code>tuple</code>s (as star-unpacking to the main constructor requires). Runs faster, less memory churn:</p>
<pre><code>Point._make(t)
</code></pre>
<p>Despite the name, <code>_make</code> <em>is</em> part of the public API; it's named with a leading underscore to avoid conflicts with field names (which aren't allowed to begin with an underscore).</p>
</div>
