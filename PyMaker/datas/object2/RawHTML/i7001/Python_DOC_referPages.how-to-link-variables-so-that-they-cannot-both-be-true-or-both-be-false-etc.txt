<div class="post-text" itemprop="text">
<p>Not sure if my question title is correct, please tell me if it isn't so.</p>
<p>Say I have a list, dictionary or tuple of transactions, where the transactions are instances of class. I want to record whether the transaction is pending, completed or cancelled, so I create booleans (within the __init__() of the class) self.completed and self.cancelled (whether it is pending or not can be inferred from both self.completed and self.cancelled being False)</p>
<p>Of course, a transaction cannot be any more than one of the three states at any time, so is there any library to check that only one is true at a time?</p>
<p>I could check this every time I change one of the variables and raise an exception, but I would rather save the lines of code.</p>
<p>I could also have a variable with a integer value of 0, 1, or 2; where 0 is pending, 1 is completed etc. However, this gets rid of the intuitive:</p>
<pre><code>    if transaction_a.completed == True: do something
</code></pre>
<p>Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want to do is to have a single <code>status</code> attribute instead of 3 booleans. You can use an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a> to represent the different states. You can then make 3 <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">properties</a> that query the <code>status</code> attribute:</p>
<pre><code>from enum import Enum, auto

class Status(Enum):
    pending = auto()
    completed = auto()
    cancelled = auto()

class Transaction:
    def __init__(self):
        self.status = Status.pending

    @property
    def is_pending(self):
        return self.status == Status.pending

    @property
    def is_completed(self):
        return self.status == Status.completed
</code></pre>
<pre><code>t = Transaction()

print(t.is_pending) # True
t.status = Status.completed
print(t.is_pending) # False
print(t.is_completed) # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suppose you can do that using <code>xor</code> like so:</p>
<pre><code>class myclass(object):
    """docstring for myclass"""
    def __init__(self, completed=True):
        self.completed = completed
        self.canceled  = self.opposite(self.completed)

    def opposite(self, v):
        return v^v
</code></pre>
<p>In this way whatever you do, <code>self.canceled</code> will always be opposite from <code>self.completed</code>.</p>
<pre><code>&gt;&gt;&gt; cl = myclass(True)
&gt;&gt;&gt; print cl.completed
True
&gt;&gt;&gt; print cl.canceled
False
</code></pre>
</div>
<span class="comment-copy">If they're going to be the opposite of each other no matter what, why do you need 2 separate variables?</span>
<span class="comment-copy">Could you please clarify what you want exactly? Also what you have already tried to achieve this.</span>
<span class="comment-copy">Sorry, I accidentally posted earlier before finishing the question.</span>
<span class="comment-copy">P.S. wow the replies here are quick! I appreciate that.</span>
