<div class="post-text" itemprop="text">
<p>If i need to ask a condition on every element of a numpy.ndarray of integers, do I have to use a for loop</p>
<pre><code>for i in range(n):
    if a[i] == 0:
        a[i] = 1   
</code></pre>
<p>or can I ask the question using [:] syntax</p>
<pre><code>if a[:] == 0:
    #...
</code></pre>
<p>I know the previous is wrong, but is there any way of doing something similar?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html?highlight=all#all" rel="nofollow noreferrer"><code>all</code></a> builtin function to accomplish what your asking:</p>
<pre><code>all(i == 0 for i in a)
</code></pre>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt; a = [1, 0, 0, 2, 3, 0]
&gt;&gt;&gt; all(i == 0 for i in a)
False
</code></pre>
<p>Note however that behinds the scenes, <code>all</code> still uses a for loop. <a href="https://github.com/python/cpython/blob/master/Python/bltinmodule.c#L283" rel="nofollow noreferrer">It's just implemented in C</a>:</p>
<pre class="lang-c prettyprint-override"><code>for (;;) {
    item = iternext(it);
    if (item == NULL)
        break;
    cmp = PyObject_IsTrue(item);
    Py_DECREF(item);
    if (cmp &lt; 0) {
        Py_DECREF(it);
        return NULL;
    }
    if (cmp == 0) {
        Py_DECREF(it);
        Py_RETURN_FALSE;
    }
</code></pre>
<p><strong>EDIT</strong>: Given your most recent edits, what you probably want instead is to use a list comprehension with the ternary operator:</p>
<pre><code>[1 if  i == 0 else i for i in a]
</code></pre>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt; a = [1, 0, 0, 2, 3, 0]
&gt;&gt;&gt; [1 if  i == 0 else i for i in a]
[1, 1, 1, 2, 3, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming <code>a</code> is your array, and you want to change values of <code>a</code> that are greater than 1 to be equal to 1:</p>
<pre><code>a[a &gt; 1] = 1
</code></pre>
<p>This works because the expression <code>a &gt; 1</code> creates a <a href="https://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays" rel="nofollow noreferrer">mask array</a>, and when a mask array is used as an index (which it is here), the operation only applies on the <code>True</code> indices.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you need not just check, but map all 0 --&gt; 1, use <code>map</code>:</p>
<pre><code>map(lambda x: 1 if x==0 else x, a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For testing a condition on every element of a numpy.ndarray <strong>at once</strong>, as the title could suggest:</p>
<p>use numpy's <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.all.html" rel="nofollow noreferrer"><code>np.all</code></a> for that:</p>
<pre class="lang-python prettyprint-override"><code>if np.all(a == 0):
    # ...
</code></pre>
<p>Despite it is not lazy, <code>np.all</code> is vectorized and very fast</p>
<pre class="lang-python prettyprint-override"><code># arrays of zeros

&gt;&gt;&gt; a = np.zeros((1000000))
&gt;&gt;&gt; %timeit np.all(a == 0)                    # vectorized, very fast 
10000 loops, best of 3: 34.5 µs per loop

&gt;&gt;&gt;%timeit all(i == 0 for i in a)             # not vectorized...
100 loops, best of 3: 19.3 ms per loop


# arrays of non-zeros

&gt;&gt;&gt; b = np.ones((1000000))
&gt;&gt;&gt; %timeit np.all(b == 0)                    # not lazy, iterates through all array
1000 loops, best of 3: 498 µs per loop

&gt;&gt;&gt; %timeit all(i == 0 for i in b)            # lazy, return false at first 1
1000000 loops, best of 3: 561 ns per loop


# n-D arrays of zeros

&gt;&gt;&gt; c = a.reshape((100, 1000))                # 2D array
&gt;&gt;&gt; %timeit np.all(c == 0)
10000 loops, best of 3: 34.7 µs per loop      # works on n-dim arrays

&gt;&gt;&gt; %timeit all(i == 0 for i in c)            # wors for a 1D arrays only
...
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</code></pre>
<hr/>
<p>For testing a condition on every element of a numpy.ndarray <strong>iteratively</strong>:</p>
<pre class="lang-python prettyprint-override"><code>for i in range(n):
    if a[i] == 0:
        a[i] = 1  
</code></pre>
<p>can be replaced by <code>np.where</code></p>
<pre class="lang-python prettyprint-override"><code>a = np.where(a == 0, 1, a)  # set value '1' where condition is met
</code></pre>
<hr/>
<p>EDIT: precisions according to the OP's comments</p>
</div>
<span class="comment-copy">What is <code>#...</code> supposed to do. Do you want to call a code fragment for every element?</span>
<span class="comment-copy">List comprehension would work here depending on what you want to do</span>
<span class="comment-copy">Do you have a <i>list</i> or an <i>array</i>?</span>
<span class="comment-copy">What is the type of <code>a</code>? Python array or numpy array?</span>
<span class="comment-copy">@WillemVanOnsem for example, if an element if bigger than 1, then assign 1 to that element, for every element</span>
<span class="comment-copy">Hmmm... I don't think this actually does what the OP is asking.  Looks like the OP wants to do an operation on each element of an array, not check for the truthiness of everything.  The OP either needs to do list comprehensions with conditionals or vectorized numpy operations.</span>
<span class="comment-copy">Nice use of the ternary in the list comp!  +1, even though at first it was hard for me to read because my brain expects the <code>if</code> to come later.</span>
<span class="comment-copy">@CodyPiersall Thanks. But now that the OP has update their question, your solution is clearly the better one! You have my up-vote.</span>
<span class="comment-copy">@ChristianDean Thanks for answering anyways, I realised my question wasnt clear enough</span>
<span class="comment-copy">unfortunately it won't work with n-D arrays</span>
<span class="comment-copy">this is the logical answer except it should be <code>a[a == 0] = 1</code>.  All the other answers are unnecessarily complicated.</span>
<span class="comment-copy">@C8H10N4O2 You're right according to the original question, but I was basing this example off of a comment by the OP on the OP's question.</span>
<span class="comment-copy">OK I see that now.  This has to be a dupe.</span>
<span class="comment-copy">@C8H10N4O2 Yeah, you've gotta be right about that.</span>
<span class="comment-copy">You can see I am a newbie at this, I thought my question was clear enough, and it didnt matter what was done inside the "if" statement, or if I used a NumPy array</span>
