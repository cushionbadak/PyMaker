<div class="post-text" itemprop="text">
<p>The code i have so far is </p>
<pre><code>for i in range(6):
    roll1 =int(random.randint(1,6))
    print ("You rolled",roll1)
</code></pre>
<p>I need it to print out like  </p>
<pre><code>you rolled 3,4,5,6,2
</code></pre>
<p>But my output looks like:</p>
<pre><code>You rolled 4
You rolled 4
You rolled 1
You rolled 1
You rolled 6
You rolled 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>from random import randint
print( "You rolled " + ",".join(str(randint(1,6)) for j in range(6)) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using python 3, which it appears you are, you could very simply print like that printing "you rolled" and then the numbers one at a time with the print argument 'end' set to a blank string</p>
<pre><code>print("You rolled ", end='')
for i in range(6):
    print(str(random.randint(1,6)), end='')
        if i &lt; 5:
            print(", ", end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want a comma-separated list of numbers, but you are only generating one number at a time.</p>
<p>You say:</p>
<pre><code>for i in range(6):
    roll1 =int(random.randint(1,6))
    print ("You rolled",roll1)
</code></pre>
<blockquote>
<p>I need it to print out like</p>
</blockquote>
<pre><code>you rolled 3,4,5,6,2
</code></pre>
<p>First, let's try working with what you already have. Python's built-in <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print()</code></a> function can do a lot of cool things - please do read the documentation.</p>
<p>First, you can use a "keyword argument" to override what <code>print()</code> outputs when it finishes printing. Normally, at the end <code>print()</code> emits a newline, but you can suppress that, or replace it:</p>
<pre><code>print("you rolled ", end='')   # Print empty string (nothing) at end of line
</code></pre>
<p>Or, since you want a space between the words and the numbers, you could use the space as the end-of-line marker:</p>
<pre><code>print("you rolled", end=' ')  # Note: no space at end of "rolled"
</code></pre>
<p>In either of the above cases, there <strong>will not</strong> be a newline printed, so whatever you put in your <em>next</em> call to <code>print()</code> will pick up at the end of the text.</p>
<p>Now, in your loop you generate a random number and print it. You can do that just fine. It's worth pointing out that <code>randint</code> returns an integer. It actually has the word "int" as part of the name. So you really don't need to call <code>int(randint</code>. </p>
<pre><code>print("you rolled ", end='')

for i in range(6):
    roll1 = random.randint(1,6)
    print(roll1, end='')
</code></pre>
<p>Now, that's not going to do what you want, because it will jam all the numbers together like "you rolled 123456". So there's a tricky problem of how to separate the numbers with commas:</p>
<pre><code>for i in range(6):
    roll1 = random.randint(1,6)
    print(",", roll1, end='')
</code></pre>
<p>That won't quite work, because <code>print()</code> puts a space between every two things it prints. You can override that with the <code>sep=</code> named argument.</p>
<pre><code>    print(",", roll1, sep='', end='')
</code></pre>
<p>Even this won't quite work, since it <em>always</em> puts a comma in front of the number. That is fine, except for the very first number, but you wind up with something like "you rolled ,1,2,3,4,5,6".</p>
<p>Instead, you need some logic to suppress the comma. </p>
<pre><code>for i in range(6):
    roll1 = random.randint(1,6)
    if i == 0:
        print(roll1, end='')
    else:
        print(",", roll1, sep='', end='')

print()
</code></pre>
<p>Or you need to handle one case outside the loop:</p>
<pre><code>roll1 = random.randint(1, 6)
print("you rolled ", roll1, end='')

for i in range(5): # note: 5, not 6
     roll1 = random.randint(1, 6)
     print(",", roll1, sep='', end='')

print()
</code></pre>
<p>In general, suppressing the comma with an <code>if</code> statement is "cleaner" but pulling that outside the loop will be faster, since the <code>if</code> statement gets executed every time. This won't matter for 6 items, but it does matter if you have, say, 6 billion items. </p>
<p>Finally, it's worth pointing out that in this scenario, you are <em>forgetting</em> the numbers rolled as soon as you roll them. Frequently, that won't work. You might consider just "unrolling the loop" and storing 6 values in 6 variables. (I don't know if this is useful, since I don't know what problem you are trying to solve.)</p>
<p>In role-playing games, the dice used are frequently described as letter 'd' plus a number indicating the number of sides. A die capable of returning a number from 1-6 is a six-sided die (#sides ranges from 4 to 100). Thus, you are rolling a "d6", pronounced "dee six". Your for loop causes six such rolls, which is expressed as 6d6, "six dee six". Let's write a little function to avoid having to type so much, called <code>d6</code> because that meets the requirements for Python identifiers:</p>
<pre><code>def d6():
    '''Return the result of rolling 1d6'''
    return random.randint(1, 6)
</code></pre>
<p>With that written, you can just say:</p>
<pre><code>roll1 = d6()
roll2 = d6()
roll3 = d6()
roll4 = d6()
roll5 = d6()
roll6 = d6()

print("you rolled ", end='')
print(roll1, roll2, roll3, roll4, roll5, roll6, sep=',')
</code></pre>
</div>
