<div class="post-text" itemprop="text">
<p>I am new to python and came from strongly typed language background, so i got very frustrated when i didn't recieve any type of syntax error upon the last line of this (using Beautiful Soup markup parsing) :</p>
<pre><code>from urllib.request import urlopen
from bs4 import BeautifulSoup

url = input("Enter URL:")
html = urlopen(url, context=ctx).read()

soup = BeautifulSoup(html, 'html.parser')
print(soup.asdmsakdaskmdkvnqienwekmfsd)
</code></pre>
<p>It is just returning <code>None</code> as no such tag exist in document and 
it will work that way  with every variable name. Why aren't there an error when code is trying to access property that is not defined inside class?
Is the . operator somehow redefined here?</p>
</div>
<div class="post-text" itemprop="text">
<p><em>Yes</em>, Python is a dynamic language with <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">overloading</a>. This includes attribute lookup, as a commenter has already stated, meaning that it is difficult (sometimes impossible) to tell at 'compile' time whether a given attribute exists. In the case of BeautifulSoup, dynamic lookup of <em>any string</em> appears to be an intentional feature.</p>
<p>Secondly, this is not a syntax error. At most, it's a bug that will cause a runtime exception (<code>AttributeError</code>).</p>
</div>
<span class="comment-copy">A class can define <code>__getattr__</code> to handle random attribute access on its instances.</span>
<span class="comment-copy">Frustrated about a documented feature?</span>
<span class="comment-copy">Note, this is something that BeautifulSoup has specifically enabled; normally this would raise an AttributeError.</span>
<span class="comment-copy">This has nothing to do with the syntax (structure) of your program. Rather, it's a consequence of Python being a dynamic language.</span>
