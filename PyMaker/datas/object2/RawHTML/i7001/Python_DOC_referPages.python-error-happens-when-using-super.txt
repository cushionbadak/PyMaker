<div class="post-text" itemprop="text">
<pre><code>from flask_sqlalchemy import SQLAlchemy
import datetime

db = SQLAlchemy()

class BaseModel(db.Model):
    """Base data model for all objects"""
    __abstract__ = True

    def __init__(self, *args):
        super(self).__init__(*args)

    def __repr__(self):
        """Define a base way to print models"""
        return '%s(%s)' % (self.__class__.__name__, {
            column: value
            for column, value in self._to_dict().items()
        })

    def json(self):
        """Define a base way to jsonify models, dealing with datetime objects"""
        return {
            column: value if not isinstance(value, datetime.date) else value.strftime('%Y-%m-%d')
            for column, value in self._to_dict().items()
        }


class Station(BaseModel, db.Model):
    """Model for the stations table"""
    __tablename__ = 'stations'

    id = db.Column(db.Integer, primary_key = True)
    lat = db.Column(db.Float)
    lng = db.Column(db.Float)
</code></pre>
<blockquote>
<p>TypeError: super() argument 1 must be type, not Station</p>
</blockquote>
<p>I know super with no argument is only used in python3. but in my case what should i fill in the super()? Also is it okay to put the super() in init of the father class(basemodel)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're not <em>doing</em> anything in <code>BaseModel.__init__</code>, the correct approach is to not implement it at all. Without <code>__init__</code> defined in <code>BaseModel</code>, you'll go to the super class's <code>__init__</code> automatically, and more efficiently.</p>
<p>That said, if you <em>are</em> doing something meaningful in <code>BaseModel.__init__</code>, you can't use one-argument <code>super</code> like that. One-argument <code>super</code> is of very limited use (basically, only for <code>classmethod</code>s, where you're passing the type but not an instance of the type as the argument). You need <a href="https://docs.python.org/2/library/functions.html#super" rel="nofollow noreferrer">two-argument <code>super</code></a>, explicitly providing the name of the <em>current</em> class you're trying to bypass looking for superclasses, then <code>self</code>, e.g:</p>
<pre><code>class BaseModel(db.Model):
    """Base data model for all objects"""
    __abstract__ = True

    def __init__(self, *args):
        super(BaseModel, self).__init__(*args)
</code></pre>
</div>
<span class="comment-copy">So I still need a init in my station class? BaseModel.__init__ is only to define those things that i want the child class to inherit? also can you explain how do i pass the *args to the BaseModel.__init__ and what does it do?</span>
<span class="comment-copy">@pwan: You only need a <code>__init__</code> in your class if it is doing some unique that the parent class doesn't already do. SQLAlchemy types provide a decent default, so you might not need it in any class. As for the meaning of <code>*args</code>, I suggest you read <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">the Python tutorial on arbitrary argument lists</a> and <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpacking argument lists</a>.</span>
