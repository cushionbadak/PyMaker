<div class="post-text" itemprop="text">
<p>The data looks something like this</p>
<pre><code>A, B, YYMM
1, 1, 1707
1, 2, 1707
1, 3, 1707
2, 3, 1706
2, 1, 1706
2, 2, 1706
2, 4, 1706
3, 3, 1705
3, 2, 1705
3, 1, 1704
3, 4, 1704
</code></pre>
<p>I would like the output as Source and Target that concatenate A,B as follows:</p>
<pre><code>Source, Target
(1,1), (1,2)
(1,1), (1,3)
(1,2), (1,3)
(2,3), (2,1)
(2,3), (2,2)
(2,3), (2,4)
(2,1), (2,2)
(2,1), (2,4)
(2,2), (2,4)
(3,3), (3,2)
(3,1), (3,4)
</code></pre>
<p>Basically, what I would like to do is to calculate all the possible number of cases as concatenation by YYMM to view the relations between the two columns.</p>
<p>At first, I thought about concatenating them through range i : max-i and then i+1 to max, but despite the values being an integer, I feel like I should use them as a string since the order matters.</p>
<p>Is there a function available to manipulate the dataset as I want? Appreciate your suggestions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one option. We can use the <code>combn</code> function and the help with the <code>tidyverse</code> package.</p>
<pre><code>library(tidyverse)

dt2 &lt;- dt %&gt;%
  unite(Value, A, B, sep = ",") %&gt;%
  split(f = .$YYMM) %&gt;%
  map(function(x){
    as_data_frame(t(combn(x$Value, m = 2)))
  }) %&gt;%
  bind_rows(.id = "YYMM") %&gt;%
  arrange(desc(YYMM)) %&gt;%
  select(Source = V1, Target = V2)

dt2
# A tibble: 11 x 2
   Source Target
    &lt;chr&gt;  &lt;chr&gt;
 1    1,1    1,2
 2    1,1    1,3
 3    1,2    1,3
 4    2,3    2,1
 5    2,3    2,2
 6    2,3    2,4
 7    2,1    2,2
 8    2,1    2,4
 9    2,2    2,4
10    3,3    3,2
11    3,1    3,4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import groupby, combinations

origin_list = [((1, 1), 1707), ((1, 2), 1707), ((1, 3), 1707), ((2, 3), 1706), ((2, 1), 1706), ((2, 2), 1706), ((2, 4), 1706), ((3, 3), 1705), ((3, 2), 1705), ((3, 1), 1704), ((3, 4), 1704)]

for yymm, group in groupby(origin_list, key=lambda item: item[1]):
    print(yymm)
    for pair in combinations([item[0] for item in group], 2):
        print(*pair)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Once you group your data by <code>YYMM</code>, you can use <code>itertools.combinations</code> for what you want: <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools.combinations</a></p>
</div>
