<div class="post-text" itemprop="text">
<p>Let's consider this example - code that returns index of the first <code>None</code> value in the list <code>li</code> (if present) or the last element's index if <code>None</code> is not present in <code>li</code>.</p>
<p>I could possibly check for None being in list but using ifs isn't the preferred way - Dive Into Python encourages to use exceptions as they are said to be faster and make code cleaner (see <a href="https://stackoverflow.com/questions/7604636/better-to-try-something-and-catch-the-exception-or-test-if-its-possible-first">this</a> question). So I came with three approaches:</p>
<p><strong>1.</strong></p>
<pre><code>try:
    my_index = li.index(None)
except ValueError:
    my_index = len(li) - 1

print my_index
</code></pre>
<p><code>my_index</code> is declared inside try/except block. Less lines, no redundant declaration. Possible problem - different exception type will result in not creating <code>my_index</code> and crashing the script on <code>print</code>.</p>
<p><strong>2.</strong></p>
<pre><code>my_index = None  # or anything else
try:
    my_index = li.index(None)
except ValueError:
    my_index = len(li) - 1

print my_index
</code></pre>
<p><code>my_index</code> is declared before try/except and has a value assigned regardless of what exception happens. Cons - more lines, looks redundant.</p>
<p><s><strong>3.</strong> </s> edit: Won't work - finally is executed regardless of try/except results<s></s></p>
<pre><code>try:
    my_index = li.index(None)
except ValueError:
    my_index = len(li) - 1
finally:
    my_index = None  # or anything else

print my_index
</code></pre>
<p></p></div>
<div class="post-text" itemprop="text">
<blockquote>
<pre><code>try:
    my_index = li.index(None)
except ValueError:
    my_index = len(li) - 1

print my_index
</code></pre>
<p>Possible problem - different exception type will result in not creating <code>my_index</code> and crashing the script on <code>print</code>.</p>
</blockquote>
<p>Err, no. If any other exception is raised, this entire block of code will be aborted as the exception bubbles up to the caller. So if any other exception type besides <code>ValueError</code> is raised, <code>print</code> will never be executed. Which is a pretty sane behaviour: you handle the errors you expect and <em>can</em> handle, and let other errors cause the entire block to abort, possibly the entire script. This is the sanest and most concise solution for what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>The third option won't work. Check out the documentation on <a href="https://docs.python.org/2/tutorial/errors.html#defining-clean-up-actions" rel="nofollow noreferrer"><code>finally</code></a>
 (emphasis mine):</p>
<blockquote>
<p>A finally clause is always executed before leaving the try statement, <strong>whether an exception has occurred or not.</strong></p>
</blockquote>
<p>So in the third option, no matter what happens, <code>my_index</code> is always none.</p>
<p>That leaves us with the first and second option. It is worth noting that the second one is what you'll see in most statically typed languages. Python however is a bit more lenient and allows for either option.</p>
<p>Your argument regarding an exception that isn't <code>ValueError</code> is, I think, invalid. Another exception will halt execution and go back to the caller, so the print will never be reached. So the first solution should work just fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>++ As @deceze noticed already, <em>except ValueError:</em> will catch only errors of this class and not others.</p>
<p>If you really need to process different error cases differently, you may provide more exception clauses:</p>
<pre><code>try:
    ...
except ValueError:
    ...
except TypeError:
    ...
</code></pre>
<p>Sequences in <em>except</em> are also supported:</p>
<pre><code>try:
    ...
except (ValueError, TypeError, ...):
    ...
</code></pre>
<p>+++ You should consider what does your code need to return if empty list was passed: -1? Raise an exception?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is an example where you should <em>not</em> use an exception. While Python employs exception as "usual" programming constructs to reduce complexity, this is I think a case of adding complexity. Your code tells me that <code>my_index</code> has to hold a value after these lines and that you expect <code>li</code> to be an iterable, even under the occurrence of an exception. That this exception is <code>ValueError</code> which is the consequence of <code>None</code> not being in the list, is an added complexity, and one only understandable by convention - moreover, are you sure that its not <code>IndexError</code> that could be thrown? You see, IMHO the construct</p>
<pre><code>if None in li: my_index = li.index(None)
else         : my_index = len(li) - 1
</code></pre>
<p>will not throw the programmer who comes across this code in half a year, i.e. maybe you yourself, off the track in understanding your program logic, while the version with the exception will cause additional mental work, raising the question if your anticipation of the possible exceptions and reactions was complete and correct. Only if this is a really really performance critical piece of code you should try to evade the double search.</p>
</div>
<span class="comment-copy">I'd probably use <b>1.</b>. You said: "different exception type will result in not creating my_index", but if that happens then there's something drastically wrong with the code logic: <code>li</code> doesn't even exist, or it's an object that doesn't have an <code>.index</code> method, so you probably <i>want</i> to crash at that point (or have some other error handling), you probably don't want to blithely continue on with a default <code>my_index</code> that's not really relevant.</span>
<span class="comment-copy">Good point, I didn't test different exception types and I missed the fact, that other (unhandled) exception will stop execution at caller (thus <code>print</code> will not execute). Thanks!</span>
<span class="comment-copy"><code>except Exception: raise</code>â€¦? That's pretty darn redundant. That outer <code>try</code> block says <i>"if any exception is raised, an exception is raised, else continue as usual."</i> Which means the entire outer <code>try</code> block is superfluous.</span>
<span class="comment-copy">@deceze Looking at it again I realize that it would be entirely possible to move the <code>print</code> into the <code>try</code> clause, at which point we might as well get rid of it entirely. So yeah, redundant.</span>
<span class="comment-copy">You got me, I've just edited the original question.</span>
<span class="comment-copy">Thanks! It works but is very unclear to read. Still, good point with different approach.</span>
<span class="comment-copy">Apologies. I already considered this approach shitty and deleted the code ) Index() is really faster, though in more complex situations you may find generator expressions useful.</span>
<span class="comment-copy">Sure. Thanks for sequences, never used them.</span>
<span class="comment-copy">In my opinion your first code sample is just as readable as try/except approach (although I'd rather stick close to pep8 formatting) but the second approach is <i>way</i> less readable than try/except. Answering you question - this is not performance critical, readability is the key.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a></span>
<span class="comment-copy">The second approach was buggy, sorry. But, sorry to say, to a programmer this should not be less readable.</span>
<span class="comment-copy">@deceze yes, but if your read the answers and comments here, they circle about 80% around the correctness of the exception construct, so I keep my opinion on this one.</span>
