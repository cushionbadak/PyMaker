<div class="post-text" itemprop="text">
<p>EDIT: The suggested duplicate is incredibly helpful in regards to basic input validation. While it does cover a lot, my specific problem (failing to assign <code>int(evaluation)</code> to a variable) is only explicitly addressed here. I'm marking this separately in case anyone else has made a similarly silly mistake :)</p>
<p>I've spent the last few weeks playing with Python 2.7 and having a lot of fun. To learn more about <code>while</code> loops, I've created a small script which asks the user for an integer between 1 and 10.</p>
<p>My goal is to then be able to respond to cases in which the user responds with unexpected input, like a non-integer, or an integer outside the specified range. I've been able to fix a lot of my issues with help from other StackOverflow threads, but now I'm stumped.</p>
<p>First, I created a variable, <code>idiocy</code>, to keep track of exceptions. (The script is supposed to be sassy, but until I get it working, <i> I'm </i> the one it's making fun of.)</p>
<pre><code>idiocy = 0

while 1:
    evaluation = raw_input("&gt; ")
    try:
        int(evaluation)
        if evaluation &lt; 1 or evaluation &gt; 10:
            raise AssertionError
    except ValueError:
        idiocy += 1
        print "\nEnter an INTEGER, dirtbag.\n"
    except AssertionError:
        idiocy += 1
        print "\nI said between 1 and 10, moron.\n"
    else:
        if idiocy == 0:
            print "\nOkay, processing..."
        else:
            print "\nDid we finally figure out how to follow instructions?"
            print "Okay, processing..."
        break
</code></pre>
<p>As you can see, I'm trying to handle two different errors -- a <code>ValueError</code> for the input type, and an <code>AssertionError</code> for the integer range -- and keep track of how many times they're raised. (Really, I only care about knowing whether or not they've been raised at least once; that's all I need to insult the user.)</p>
<p>Anyways, when I run the script in its current form, the error response works just fine ('dirtbag' for non-integers, 'moron' for out-of-range). The problem is that even when I input a valid integer, I still get an out-of-range <code>AssertionError</code>.</p>
<p>I suspect that my issue has to do with my <code>while</code> logic, but I'm not sure what to do. I've added a <code>break</code> here or there but that doesn't seem to help. Any suggestions or blatant errors? Again, total Python beginner here, so I'm half winging it. </p>
<p>//If anyone has simpler, cleaner, or prettier ways to do this, feel free to let me know too. I'm here to learn!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have <code>int(evalutation)</code>, but you're not assigning it to anything.</p>
<p>Try </p>
<pre><code>try:
    evaluation = int(evaluation)
    assert 0 &lt; evaluation &lt; 10
except ValueError:
    ...
except AssertionError:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is you're not saving the <code>int</code> version of <code>evaluation</code> to <code>evaluation</code> like this:</p>
<pre><code>idiocy = 0

while 1:
    evaluation = raw_input("&gt; ")
    try:
        evaluation = int(evaluation) &lt;--- here
        if evaluation &lt; 1 or evaluation &gt; 10:
            raise AssertionError
    except ValueError:
        idiocy += 1
        print "\nEnter an INTEGER, dirtbag.\n"
    except AssertionError:
        idiocy += 1
        print "\nI said between 1 and 10, moron.\n"
    else:
        if idiocy == 0:
            print "\nDid we finally figure out how to follow instructions?"
            print "Okay, processing..."
        else:
            print "\nOkay, processing..."
</code></pre>
<p>If you wanted to track the types of exceptions raised, you could use <code>collections.Counter</code> for <code>idiocy</code> and change the code like this:</p>
<pre><code>from collections import Counter

idiocy = Counter()

while 1:
    evaluation = raw_input("&gt; ")
    try:
        evaluation = int(evaluation)
        if evaluation &lt; 1 or evaluation &gt; 10:
            raise AssertionError
    except ValueError as e:
        idiocy[e.__class__] += 1 
        print "\nEnter an INTEGER, dirtbag.\n"
    except AssertionError as e:
        idiocy[e.__class__] += 1
        print "\nI said between 1 and 10, moron.\n"
    else:
        if idiocy == 0:
            print "\nDid we finally figure out how to follow instructions?"
            print "Okay, processing..."
        else:
            print "\nOkay, processing..."

&gt;&gt;&gt; idiocy
Counter({AssertionError: 2, ValueError: 3})
</code></pre>
<p>And you can access the error counts by key like <code>idiocy[AssertionError]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Your range test can be refactored as </p>
<pre><code>assert 1 &lt;= evaluation &lt;= 10
</code></pre>
<p>You could keep your insults in a dictionary</p>
<pre><code>insults = {AssertionError : "\nI said between 1 and 10, moron.\n",
           ValueError : "\nEnter an INTEGER, dirtbag.\n"
           }
</code></pre>
<p>And write the try/except like this</p>
<pre><code>try:
    ...
except (AssertionError, ValueError) as e:
    print(insults[type(e)])
</code></pre>
<p>When you change the user input to an int, you need to assign it to something</p>
<pre><code>evaluation = int(evaluation)
</code></pre>
<hr/>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" rel="nofollow noreferrer">assert</a> was meant for debugging - you are using it incorrectly.  </p>
<ul>
<li>You should use <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer">TypeError</a> for non-integer repsonses - the type is wrong.</li>
<li>You use <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer">ValueError</a> for responses outside of a range - the value is wrong  </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In your code: 
<code>int(evaluation)</code> is not typecasting evaluation variable to int type. The output is: </p>
<pre><code>&gt; 2
&lt;type 'str'&gt;
I said between 1 and 10, moron.
</code></pre>
<p>Try this:</p>
<pre><code>idiocy = 0

while 1:
    try:
        evaluation = int(raw_input("&gt; "))
        if evaluation &lt; 1 or evaluation &gt; 10:
            raise AssertionError
    except ValueError:
        idiocy += 1
        print "\nEnter an INTEGER, dirtbag.\n"
    except AssertionError:
        idiocy += 1
        print "\nI said between 1 and 10, moron.\n"
    else:
        if idiocy == 0:
            print "\nOkay, processing..."
        else:
            print "\nDid we finally figure out how to follow instructions?"
            print "Okay, processing..."
        break
</code></pre>
<p>By the way you can use tuple to store all your exceptions.
Example: </p>
<pre><code>idiocy = 0

all_exceptions = (ValueError, AssertionError)
while 1:
    try:
        evaluation = int(raw_input("&gt; "))
        if evaluation &lt; 1 or evaluation &gt; 10:
            raise AssertionError("\nI said between 1 and 10, moron.\n")
    except all_exceptions as e:
        idiocy += 1
        print str(e)
    else:
        if idiocy == 0:
            print "\nOkay, processing..."
        else:
            print "\nDid we finally figure out how to follow instructions?"
            print "Okay, processing..."
        break
</code></pre>
<p>Hope it helps.</p>
</div>
<span class="comment-copy">I would stop working with python 2.7 and focus on python 3, preferably version 3.6.2 if you can. The end of life for 2.7 is only a couple of years away and it would be good if you started out on the right foot without having to relearn some of the finer points.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response">Asking the user for input until they give a valid response</a></span>
<span class="comment-copy">@MatthewPurdon I've been learning with the help of Zed Shaw's infamously divisive book, which only addresses 2.7, since I like its format. That being said, I've thought about moving to 3.x before. I'll look around, but are there any [updated] e-books or websites you'd recommend I get started with?</span>
<span class="comment-copy">That's the ticket. Seems obvious in retrospect! Thank you.</span>
<span class="comment-copy">One more thing -- is it bad form to assign <code>int(evaluation)</code> to <code>evaluation</code>, instead of using a unique variable name? Seems like it could be confusing, unless I've missed something.</span>
<span class="comment-copy">It's a little more verbose, but there's nothing actually wrong with it. If you'd like to cut down on the renaming, you could also have <code>try:      evaluation = int(raw_input('&gt; ') except ValueError:     ...</code> but in my opinion, this gets a little busy for one line :)</span>
<span class="comment-copy">Ah, my issue was more along the lines of, might it be confusing to write <code>evaluation = int(evaluation)</code> instead of, say, <code>fixed_evaluation = int(evaluation)</code>? Or does doing it your way overwrite the <code>raw_input</code> that <code>evaluation</code> was assigned to earlier?</span>
<span class="comment-copy">I see! There's no issue with re-assigning the <code>evaluation</code> variable if it's always your intention to convert it to <code>int</code>.</span>
<span class="comment-copy">I hadn't seen the <code>Counter</code> module before, thank you for sharing. I think I'm better off without it in this script but it'll definitely be useful in the future.</span>
<span class="comment-copy">Your last point was especially helpful, thank you. Changing the error types makes the logic much cleaner -- I'll do that now.</span>
