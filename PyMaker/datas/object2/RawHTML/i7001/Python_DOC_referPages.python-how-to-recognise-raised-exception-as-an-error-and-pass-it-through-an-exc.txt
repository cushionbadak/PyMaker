<div class="post-text" itemprop="text">
<p>I'm extracting spreadsheets and realise that some will be password protected, therefore some spreadsheets will not be able to be read by the code below, which is fine. I'm trying to pass these spreadsheets through the except line and I have imported BadZipfile from zipfile to try to recognise them as errors.</p>
<p>However, the except function doesn't recognise BadZipfile as an error, and it will still raise the error in the Traceback (below). I was hoping that by leaving the except line blank, it would pass any errors and would loop over again to run the try statement on the remaining files, however it doesn't seem to recognise BadZipfile as an error. </p>
<p>KeyError is needed as well within the except statement, as some spreadsheets don't have the index label I want to extract. Perhaps  I should pass any exceptions, as further errors may crop up from the files I haven't looped over. I would prefer to process any spreadsheets that work at this point, and reconcile the errors at a later point.</p>
<p><em>Therefore, how can I ensure that BadZipfile is recognised as an error, then use the except statement to pass any errors?</em> </p>
<p><strong>CODE</strong></p>
<pre><code>import itertools
import glob
from openpyxl import load_workbook
from pandas import DataFrame
import pandas as pd
import os
from zipfile import BadZipfile

def get_data(ws):
        for row in ws.values:
            row_it = iter(row)
            for cell in row_it:
                if cell is not None:
                    yield itertools.chain((cell,), row_it)
                    break

def read_workbook(file_):
        wb = load_workbook(file_, data_only=True)
        for sheet in wb.worksheets:
            ws = sheet
        return DataFrame(get_data(ws))

path =r'dir'
allFiles = glob.glob(path + "/*.xlsx")
frame = pd.DataFrame()
list_ = []
for file_ in allFiles:
        parsed_file = read_workbook(file_)
        parsed_file['filename'] = os.path.basename(file_)
        parsed_file.set_index(parsed_file.columns[0], inplace = True)
        parsed_file.index.str.strip()

        try: 
                parsed_file.loc["Staff" : "Total  Staff"].copy()
                list_.append(parsed_file)
        except KeyError or BadZipfile:
            pass
frame = pd.concat(list_)
print(frame.dropna(axis='columns', thresh=2, inplace = True))
</code></pre>
<p><strong>ERROR</strong></p>
<pre><code>Traceback (most recent call last):

  File "&lt;ipython-input-47-2d5508ddf805&gt;", line 1, in &lt;module&gt;
    runfile('C:dir.py', wdir='C:dir')

  File "C:\ProgramData\Anaconda2\lib\site-packages\spyder\utils\site\sitecustomize.py", line 880, in runfile
    execfile(filename, namespace)

  File "C:\ProgramData\Anaconda2\lib\site-packages\spyder\utils\site\sitecustomize.py", line 87, in execfile
    exec(compile(scripttext, filename, 'exec'), glob, loc)

  File "C:dir.py", line 35, in &lt;module&gt;
    parsed_file = read_workbook(file_)

  File "C:dir.py", line 25, in read_workbook
    wb = load_workbook(file_, data_only=True)

  File "C:\ProgramData\Anaconda2\lib\site-packages\openpyxl\reader\excel.py", line 164, in load_workbook
    archive = _validate_archive(filename)

  File "C:\ProgramData\Anaconda2\lib\site-packages\openpyxl\reader\excel.py", line 121, in _validate_archive
    archive = ZipFile(f, 'r', ZIP_DEFLATED)

  File "C:\ProgramData\Anaconda2\lib\zipfile.py", line 770, in __init__
    self._RealGetContents()

  File "C:\ProgramData\Anaconda2\lib\zipfile.py", line 813, in _RealGetContents
    raise BadZipfile, "File is not a zip file"

BadZipfile: File is not a zip file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>first, check your stack trace. you don't have a <code>try/except</code> around where the error's being thrown.</p>
<p>second, to catch multiple types of errors, you do <code>except (KeyError, BadZipFile):</code> not <code>except KeyError or BadZipFile:</code>, which just evaluates to <code>except KeyError</code> (read up on how <code>or</code> works)</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs page on error handling</a>:</p>
<pre><code>try:
    # your code

except (KeyError, BadZipfile):
    pass
</code></pre>
<p>If you wanted to do something with the error, you could use</p>
<pre><code>try:
    # your code

except (KeyError, BadZipfile) as err:
    # do something
</code></pre>
<p>It looks like the error is actually occurring in your <code>read_workbook</code> function when you call the statement <code>load_workbook</code> so you're not catching the error when it occurs.</p>
</div>
<span class="comment-copy">I have a tingling sensation that this line is your culprit: except KeyError or BadZipfile: That or i've been sitting down for too long.</span>
<span class="comment-copy"><code>for sheet in wb.worksheets: ws = sheet</code> might not do what you think it does.  I suspect you'll end up leaving that function with only the data from the last sheet.  Maybe create a dataframe before entering that loop and then within the loop, appending DataFrame(ws) to it.</span>
<span class="comment-copy">I want it to loop through each worksheet within the workbooks and convert each worksheet from all workbooks into individual dataframes. Does it not work that way?  I will need the get_data function in order to remove blank cells, and the index label needs to run before concatenating the files as the index labels are duplicated across most worksheets.</span>
<span class="comment-copy">Great advice, thank you very much.</span>
<span class="comment-copy">Hi, thank you very much for your input.</span>
<span class="comment-copy">Would it be best, therefore, to use two tries, one for read_workbook and within it, another try on the .loc function?</span>
<span class="comment-copy">Yeah, that could work.  It might also be worth throwing in a statement to check if the file exists before you try to open it.  You could raise an error if the file doesn't exist.</span>
