<div class="post-text" itemprop="text">
<p>Suppose if I have a class as shown below,</p>
<pre><code>class TestClass(object):

    def __init__(self):
        self.name = 'Marty'
        self.age = 25
        self.place = 'CL'

    @property
    def country(self):
        return 'USA'

    @property
    def age_group(self):
        return '18-25'
</code></pre>
<p>I want to create a dict out of all the @properties. I have tried with <code>__dict__</code> and <code>vars</code> but still the <code>@property</code> is not showing up. How can I include <code>@property</code> too.</p>
<pre><code>&gt;&gt;&gt; x = TestClass()
&gt;&gt;&gt; x.__dict__
{'age': 25, 'name': 'Marty', 'place': 'CL'}
&gt;&gt;&gt; vars(x)
{'age': 25, 'name': 'Marty', 'place': 'CL'}
</code></pre>
<p>I want to include <code>age_group</code> and <code>country</code> with the returned values as the keys and values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a dict comprehension that iterates over the objects attributes:</p>
<pre><code>obj = TestClass()
object_dict = {attr: getattr(obj, attr) for attr in dir(obj)}
</code></pre>
<p>If you really just want the <code>@property</code> attributes, which is unclear in your question, you can filter for them like so:</p>
<pre><code>object_properties_dict = {attr: getattr(obj, attr) for attr in dir(obj.__class__) if type(getattr(obj.__class__, attr)) is property}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the names you want by calling <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer"><code>dir</code></a> on your instance. However, the list returned by <code>dir</code> also has a bunch of names you <em>don't</em> want (the names of the methods inherited from <code>object</code>), so we need to filter those out.</p>
<pre><code>class TestClass(object):
    def __init__(self):
        self.name = 'Marty'
        self.age = 25
        self.place = 'CL'

    @property
    def country(self):
        return 'USA'

    @property
    def age_group(self):
        return '18-25'

x = TestClass()
d = {k: getattr(x, k) for k in dir(x) if not k.startswith('__')}
print(d)
</code></pre>
<p><strong>output</strong></p>
<pre><code>{'age': 25, 'age_group': '18-25', 'country': 'USA', 'name': 'Marty', 'place': 'CL'}
</code></pre>
<hr/>
<p>Here's a cleaner way to do this. We loop over the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code></a> of the class object, specifically looking for items that are <code>property</code> instances. Then we use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> to combine those names with the names from calling <code>vars()</code> on the instance of the class.</p>
<pre><code>from itertools import chain

class TestClass(object):
    def __init__(self):
        self.name = 'Marty'
        self.age = 25
        self.place = 'CL'

    @property
    def country(self):
        return 'USA'

    @property
    def age_group(self):
        return '18-25'

    def do_stuff(self):
        return 'hello'

def attributes_and_properties(obj):
    props = (k for k, ktype in vars(type(obj)).items() 
        if isinstance(ktype, property))
    return {k: getattr(obj, k) for k in chain(props, vars(obj))}

x = TestClass()
print(attributes_and_properties(x))
</code></pre>
<p><strong>output</strong></p>
<pre><code>{'country': 'USA', 'age_group': '18-25', 'name': 'Marty', 'age': 25, 'place': 'CL'}
</code></pre>
<p>This way is superior to the previous technique, since that code will also include bound methods whose names don't start with <code>__</code>, like <code>do_stuff</code>, in its output.</p>
</div>
<span class="comment-copy">you can have access to properties on the TestClass.__dict__. So i guess you could iterate through those and add the names if the <code>type == property</code></span>
<span class="comment-copy">Where did the OP state, that he does not want inherited properties?</span>
<span class="comment-copy">@RichardNeumann The last line in the question says "I want to include <code>age_group</code> and <code>country</code> with the returned values as the keys and values." In other words, he only wants those <i>property</i> key-value pairs in addition to the instance attributes his code is currently printing. Your code also prints a bunch of methods, and I don't think he wants those.</span>
