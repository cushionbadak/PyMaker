<div class="post-text" itemprop="text">
<p>This is a basic exercise. I just don't know hot to implement the timeit module correctly. I keep recieving syntax errors</p>
<pre><code>import timeit
import random
def bubblesort(LAux):
    for i in range(len(LAux)): 
    exchange = False 
    for j in range(len(LAux)-1): 
        if LAux[j] &gt; LAux[j+1]: 
            tmp = LAux[j+1] 
            LAux[j+1] = LAux[j] 
            LAux[j] = tmp 
            exchange = True
    if not exchange: 
        break
return(LAux)

a=int(input("Size of list: "))
lst = [0]*a
for i in range(a):
    lst[i] = random.randint(1,100)
print(bubblesort(lst))
print(timeit.timeit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You seem to have misinterpreted the function of <a href="https://docs.python.org/3/library/timeit.html#examples" rel="nofollow noreferrer"><code>timeit.timeit</code></a> - the idea is that you tell it what to actually time, and it then times it. Normally, it does the thing you're timing many, many times, so you can get a meaningful average. This means it also needs to provide a 'setup' argument, as the list should presumably be different for each test. Refer to the examples in the documentation if you need - I normally find that they're easy enough to suit to your purpose. I've implemented timeit below:</p>
<pre><code>a=int(input("Size of list: "))

n = 100000

setup = "lst = [random.randrange(100) for _ in range(a)]"
time = timeit.timeit("bubblesort(lst)", setup=setup, globals=globals(), number=n)

print("{} sorts took {}s".format(n, time))
</code></pre>
<p>Of course, if you're using IPython you can do something like this:</p>
<pre><code>In [1]: from bubble import bubblesort

In [2]: from random import randrange

In [3]: %timeit bubblesort([randrange(100) for _ in range(50)])
10000 loops, best of 3: 175 Âµs per loop
</code></pre>
<p>Maybe you were expecting timeit() to tell you just how much time has passed. If so, this could be done using the <code>time</code> module, quite simply.</p>
<pre><code>import time

start_time = time.time()
bubblesort(lst)
time_taken = time.time() - start_time
print("One sort took {}s".format(time_taken))
</code></pre>
<p>On another note, I'd recommend using a different name for the argument "Laux". As you can see, SO's syntax highlighting thinks it's a class, as normally anything starting with a capital letter is a class. Laux also doesn't particularly tell me as an outsider what it is, although I can infer from the name bubblesort.</p>
</div>
<span class="comment-copy">please provide the syntax errors.</span>
<span class="comment-copy">Lines 5, 12, 13, 14 needs to be indented and you're missing a closing parentheses on the last line; pretty much what the error message tells you.</span>
<span class="comment-copy">For me it works if you put a <code>)</code> behind the last <code>print()</code></span>
<span class="comment-copy">Please provide syntax error. As i have noticed. Error is "print(timeit.timeit()". You missed second parenthesis ")".</span>
<span class="comment-copy">That code isn't indented properly, and it's missing a closing parenthesis <code>)</code> at the end. What do you expect <code>print(timeit.timeit())</code> to do? You haven't given it anything to perform a timing test on.</span>
