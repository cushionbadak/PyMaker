<div class="post-text" itemprop="text">
<p>I have integer numbers in the range of 0 up until (including) 100. I want to convert them to strings of a fixed length of 3 with space padding and alignment to the right.</p>
<p>I've tried to use the following format string, but it adds another space for three digit numbers, which makes them length 4 instead of 3.</p>
<pre><code>fmt = lambda x: "{: 3d}".format(x)
[fmt(99), fmt(100)] # produces [' 99', ' 100'] instead of [' 99', '100']
</code></pre>
<p>Interestingly, it works as expected when zero-padding is used:</p>
<pre><code>fmt = lambda x: "{:03d}".format(x) 
[fmt(99), fmt(100)] # produces ['099', '100'] as expected
</code></pre>
<p>Why is this? How can I fix this?</p>
<p>Do I really need to convert to string first?</p>
<pre><code>fmt = lambda x: "{:&gt;3s}".format(str(x))
[fmt(99), fmt(100)] # produces [' 99', '100'] as expected
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By default, numbers are aligned to the right and padded with spaces when formatted, so you should just specify the <em>width</em>:</p>
<pre><code>&gt;&gt;&gt; '{:3d}'.format(99)
' 99'
&gt;&gt;&gt; '{:3d}'.format(100)
'100'
</code></pre>
<p>Alternatively, you can specify both the <em>fill</em> character and <em>alignment</em>:</p>
<pre><code>&gt;&gt;&gt; '{: &gt;3d}'.format(99)
' 99'
&gt;&gt;&gt; '{: &gt;3d}'.format(100)
'100'
</code></pre>
<p>A single space before width, however, is treated as the <em>sign</em> option. Quoting the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>The sign option is only valid for number types, and can be one of the
  following:</p>
<p><code>'+'</code> indicates that a sign should be used for both positive as well as
  negative numbers.<br/>
<code>'-'</code> indicates that a sign should be used only for negative numbers
  (this is the default behavior).<br/>
<code>' '</code> indicates that a leading space
  should be used on positive numbers, and a minus sign on negative
  numbers.</p>
</blockquote>
<p>That's why <code>"{: 3d}"</code> formats with a leading space in your examples.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason it is not working for numbers is because space is being considered a sign character.</p>
<blockquote>
<p>Indicates that a leading space should be used on positive numbers, and
  a minus sign on negative numbers.</p>
</blockquote>
<p>Hence there's always a leading space in your numbers.</p>
<p>On the other hand fill value expects a align value to be specified first:</p>
<blockquote>
<p>If a valid align value is specified, it can be preceded by a fill
  character that can be any character and defaults to a space if
  omitted.</p>
</blockquote>
<p>But it works in case of <code>'0'</code> with no align value because it is a special case:</p>
<blockquote>
<p>When no explicit alignment is given, preceding the width field by a
  zero ('0') character enables sign-aware zero-padding for numeric
  types. This is equivalent to a fill character of '0' with an alignment
  type of '='.</p>
</blockquote>
<p>But won't work for other fill values:</p>
<pre><code>&gt;&gt;&gt; '{:*5d}'.format(100)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-10-559a168f3704&gt; in &lt;module&gt;()
----&gt; 1 '{:*5d}'.format(100)

ValueError: Invalid format specifier
&gt;&gt;&gt; '{:*=5d}'.format(100)
'**100'
</code></pre>
<p>Hence in your case, as the default fill value is space you can simply drop it to prevent specifying alignment:</p>
<pre><code>&gt;&gt;&gt; '{:3d}'.format(99)
' 99'    
&gt;&gt;&gt; '{:3d}'.format(100)
'100'

# With alignment and fill character

&gt;&gt;&gt; '{: =3d}'.format(99)
' 99'    
&gt;&gt;&gt; '{: =3d}'.format(100)
'100'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need not convert to string, the issue with above code is you used <code>"{: 3d}".format(x)</code> instead of <code>"{:3d}".format(x)</code> </p>
<pre><code>   fmt = lambda x: "{:3d}".format(x)
   [fmt(99), fmt(100)] #produces [' 99', '100']
</code></pre>
</div>
<span class="comment-copy">How did I overlook this? It's really as simple as that.</span>
