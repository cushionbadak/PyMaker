<div class="post-text" itemprop="text">
<p>Alright, so consider that I have a matrix <code>m</code>, as follows:</p>
<pre><code>m = [[0, 1, 0, 0, 0, 1],
     [4, 0, 0, 3, 2, 0],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0]]
</code></pre>
<p>My goal is to check each row of the matrix and see if the sum of that row is zero. If the sum is not zero, I want to shift the column that corresponds to that row to the end of the matrix. If the sum of the row is zero, nothing happens. So in the given matrix above the following should occur:</p>
<ol>
<li>The program discovers that the 0th row has a sum that does not equal zero</li>
<li><p>The 0th column of the matrix is shifted to the end of the matrix, as follows:</p>
<pre><code>m = [[1, 0, 0, 0, 1, 0],
     [0, 0, 3, 2, 0, 4],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0]]
</code></pre></li>
<li><p>The program checks the next row and does the same, shifting the column to the end of the matrix</p>
<pre><code>m = [[0, 0, 0, 1, 0, 1],
     [0, 3, 2, 0, 4, 0],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0]]
</code></pre></li>
<li><p>Each of the other rows are checked, but since all of their sums are zero no shift is made, and the final result is the matrix above.</p></li>
</ol>
<p>The issue arises after shifting the columns of the matrix for the first time, once all of the values are shifted it becomes tricky to tell which column corresponds to the correct row.</p>
<p>I can't use <code>numpy</code> to solve this problem as I can only use the original Python 2 libraries.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a simple loop and when the sum is not equal to zero loop over rows again and append the popped first item to each row.</p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; m = [[0, 1, 0, 0, 0, 1],
    [4, 0, 0, 3, 2, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; for row in m:
    # If all numbers are &gt;= 0 then we can short-circuit this using `if any(row):`.
    if sum(row) != 0:
        for row in m:
            row.append(row.pop(0))
...
&gt;&gt;&gt; pprint(m)
[[0, 0, 0, 1, 0, 1],
 [0, 3, 2, 0, 4, 0],
 [0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0]]
</code></pre>
<hr/>
<p><code>list.pop</code> is <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">O(N) operation</a>, if you need something fast then use <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>deque</code> can rotate elements.</p>
<pre><code>from collections import deque

def rotate(matrix):

    matrix_d = [deque(row) for row in matrix]

    for row in matrix:

        if sum(row) != 0:

            for row_d in matrix_d:

                row_d.rotate(-1)

    return [list(row) for row in matrix_d]
</code></pre>
</div>
<span class="comment-copy">Nice, this is slick as hell.</span>
<span class="comment-copy">Thank you. I have no idea how such an obvious solution escaped me. As you can probably tell I'm still a novice programmer. Thank you especially for answering so quickly (4 minutes, wow!)</span>
<span class="comment-copy">The time is almost euqal to use <code>deque</code>.</span>
<span class="comment-copy">@stamaimer The conversion to deque may slow things down. If we start with deque itself then it should be faster.Though for tiny lists it will be barely noticeable.</span>
<span class="comment-copy">Interesting, I'll look into this.</span>
