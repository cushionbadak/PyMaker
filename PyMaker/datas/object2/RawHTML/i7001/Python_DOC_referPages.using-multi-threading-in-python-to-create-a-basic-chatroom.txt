<div class="post-text" itemprop="text">
<p>I've been given a summer assignment to create a chat room on python using sockets, using a main socket as the server that connects to all the other "client" sockets, each time a client sends a message to the server, the server sends it to everyone else but the client that sent it. The catch is that I need to make it so you can write messages and receive them at the same time, which is something I have no idea how to do so I took my friend's advice and tried to do it using multi-threading.</p>
<p>This is what I have right now, it's supposed to get more complicated but this is the very basic part:</p>
<h2>client</h2>
<pre><code>import socket
import thread
import time


def receive_messages(recieve_socket):
    while True:
        print recieve_socket.recv(1024)


def send_messages(send_socket):
    while True:
        data = raw_input()
        send_socket.send(data)    

def main():
    my_socket = socket.socket()
    my_socket.connect(('127.0.0.1', 8822))

    thread.start_new_thread(send_messages, (my_socket, ))
    thread.start_new_thread(receive_messages, (my_socket, ))
    time.sleep(1)  #this delay lets the threads kick in, otherwise the thread count is zero and it crashes
    while thread._count() &gt; 1:
        pass

if __name__ == '__main__':
    main()
</code></pre>
<h2>server</h2>
<pre><code>import socket
import select


waiting_messages = []
users = []


def add_new_user(user_socket):
    new_socket, address = user_socket.accept()
    users.append(new_socket)
    print "A new user has joined"


def remove_user(user_socket):
    users.remove(user_socket)
    print "A user has left"


def send_waiting_messages(wlist):
    for message in waiting_messages:
        receiving_socket, data = message
        if receiving_socket in wlist:
            receiving_socket.send(data)
            waiting_messages.remove(message)


def spread_messages(message, sending_user):
    receiving_list = users
    receiving_list.remove(sending_user)
    for user in receiving_list:
        waiting_messages.append((user, message))
    print "A user has sent a message"


def main():
    server_socket = socket.socket()
    server_socket.bind(('0.0.0.0', 8822))
    server_socket.listen(5)
    # users = []
    # messages_to_send = []

    while True:
        rlist, wlist, xlist = select.select([server_socket] + users, users, [])

        for current_socket in rlist:
            if current_socket is server_socket:
                add_new_user(server_socket)
            else:
                data = current_socket.recv(1024)
                if data == "quit":
                    remove_user(current_socket)
                else:
                    spread_messages(data, current_socket)

        send_waiting_messages(wlist)


if __name__ == '__main__':
    main()
</code></pre>
<p>The issue is when I try to run it, the first message works fine, but after the second message the server just sends a lot of blank messages and stops sending the messages I send it. </p>
<p>I'd really appreciate help in the matter.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the help guys, in the end I asked a friend of mine and he told me to use threading instead of select on the server and it worked great! I'll post the code later if anyone's interested.</p>
</div>
<span class="comment-copy">As a matter of fact, you can complete it without multithreading, using just the <code>select</code> module. Have a look at <a href="https://github.com/schedutron/CPAP/blob/master/Chap2/multi_user_chat_serv.py" rel="nofollow noreferrer">this</a>. Also, avoid using the <code>thread</code> module. Use <code>threading</code> instead.</span>
<span class="comment-copy">In my opinion you will have an easier time of it by using doing blocking socket operations using separate threads, and using <a href="https://docs.python.org/3/library/queue.html#module-queue" rel="nofollow noreferrer">thread-safe queues</a> to stage messages.</span>
<span class="comment-copy">@SamChats I am only using threading in the clients in order to receive and send messages simultaneously. Also, the example you sent is almost identical to mine except yours only sends it to whoever is available, and not to the people who aren't. Thanks for the help though.</span>
