<div class="post-text" itemprop="text">
<p>I would like to keep a resource file (which is really anything shared among scripts but not Python itself) in my <code>PYTHONPATH</code> so that it can be used by modules that are in that path, which are in turn invoked by different end scripts/apps. </p>
<pre><code>PYTHONPATH
  |
  |--Module1.py
  |--Module2.py
  |--Resource.res
</code></pre>
<p>Is there a way I can easily reference a resource (Resource.res) file that is located under the PYTHONPATH hierarchy along with actual Python modules that are shared, without supplying the full path to the file? There is equivalent way of getting a resource file from Java's classpath, which is where I'm getting the idea.</p>
<p>The contents of the resource file should be irrelevant but just for illustration's sake, it could be anything non-pythonic, such as random data, config, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's trivial to write a function that does this:</p>
<pre><code>import sys, os.path

def resolve(filename):
    for directory in sys.path:
        path = os.path.join(directory, filename)
        if os.path.isfile(path):
            return path
</code></pre>
<p>This version returns <code>None</code> if the file can't be found on the path. You could also raise an exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is very similar to @kindall's answer, but uses the <code>PYTHONPATH</code> environment variable instead of <code>sys.path</code> to determine the directory search list:</p>
<pre><code>import os
import sys

def resource_file_path(filename):
    """ Search for filename in the list of directories specified in the
        PYTHONPATH environment variable.
    """
    pythonpath = os.environ.get("PYTHONPATH")
    if pythonpath:
        for d in pythonpath.split(os.pathsep):
            filepath = os.path.join(d, filename)
            if os.path.isfile(filepath):
                return filepath
    return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can read arbitrary files from a package using <code>pkgutil.get_data</code>
<a href="https://docs.python.org/3/library/pkgutil.html#pkgutil.get_data" rel="nofollow noreferrer">https://docs.python.org/3/library/pkgutil.html#pkgutil.get_data</a></p>
<p>For instance, to load a GIF icon from your package:</p>
<pre><code>image = pkgutil.get_data(__name__, "icon.gif")
</code></pre>
<p>You can vary the package argument to load things from different places.
If you're okay of installing a recent <code>setuptools</code> you could use their version of it,  which provides a few more possibilities
<a href="http://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-resource-access" rel="nofollow noreferrer">http://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-resource-access</a></p>
<p>These work regardless on how the package is installed (separate files on the filesystem, or as a zip/egg/whatever.</p>
</div>
<span class="comment-copy">OP asked specifically to use  PYTHONPATH which is not the same as sys,path.  It is available by <code>os.getenv('PYTHONPATH')</code>, so if he replaces your sys,path with that function call it should work.</span>
<span class="comment-copy">This doesn't work if the package containing the resource is loaded from a zip file.</span>
<span class="comment-copy">@Paul: Not quite, since <code>sys.path</code> is a list and <code>os.getenv('PYTHONPATH')</code> returns a string.</span>
