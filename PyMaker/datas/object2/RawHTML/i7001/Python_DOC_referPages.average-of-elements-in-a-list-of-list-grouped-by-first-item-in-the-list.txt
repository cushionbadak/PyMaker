<div class="post-text" itemprop="text">
<p>My list looks like <code>my_list = [['A', 6, 7], ['A', 4, 8], ['B', 9, 3], ['C', 1, 1]], ['B', 10, 7]]</code></p>
<p>I want to find the averages of the other two columns in each of the inner lists grouped by the first column in each of the inner list.</p>
<p><code>[['A', 5, 7.5], ['B', 9.5, 5], ['C', 1, 1]]</code></p>
<p><code>['A', 5, 7.5]</code> comes from <code>['A', (6+4)/2 ,(7+8)/2]</code></p>
<p>I don't mind if I end up getting a dictionary or something, but I would prefer it remain a list.</p>
<p>I've tried the following:</p>
<hr/>
<ol>
<li><code>my_list1 = [i[0] for i in my_list]
my_list2 = [i[1:] for i in my_list]
new_dict = {k: v for k, v in zip(my_list1, my_list2)}</code> </li>
</ol>
<p>SPLITTING THE ORIGINAL LIST SO the first column becomes KEY, and the second and third columns becomes VALUE, and converting it to a dictionary will give you the aggregate but the problem is </p>
<p><strong>I WANT TO TO PRESERVE THE DECIMAL PLACES, IT ROUNDS UP AND GIVES ME WHOLE NUMBERS INSTEAD OF FLOAT VALUES</strong></p>
<p><code>my_list1 = ['A', 'A', 'B', 'C', 'B']</code></p>
<p><code>my_list2 = [[6, 7], [4, 8], [9, 3], [1, 1], [10, 7]]</code></p>
<p><code>new_dict= {'A': [5, 8], 'B': [10, 5], 'C': [1, 1]}</code></p>
<p>when what I would ideally want is,  <code>[['A', 5, 7.5], ['B', 9.5, 5], ['C', 1, 1]]</code> (Don't mind if its a dictionary)</p>
<hr/>
<ol start="2">
<li><p>Converted the second and third columns to float maybe using a for loop thinking, then it will give me a float when I convert it to a dictionary.. But no difference, IT ROUNDS UP and gives a A WHOLE NUMBER.</p>
<pre><code>for i in range(0, len(my_list)):
  for j in range(1, len(my_list[i])):
    my_list[i][j].astype(float)

dict = {}

for l2 in my_list:
  dict[l2[0]] = l2[1:]
</code></pre></li>
</ol>
<hr/>
<p>The reason I need to preserve the decimal places is because the second and third columns refer to x and y coordinates..</p>
<p>So all in all the objective is to <strong>find the averages of the other two columns in each of the inner lists grouped by the first column in each of the inner list with as many decimal places as possible</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you meant to use the following list:</p>
<pre><code>In [4]: my_list = [['A', 6, 7], ['A', 4, 8], ['B', 9, 3], ['C', 1, 1], ['B', 10, 7]]
</code></pre>
<p>The simply use a <code>defaultdict</code> to group by the first element, then find the <code>mean</code>:</p>
<pre><code>In [6]: from collections import defaultdict

In [7]: grouper = defaultdict(list)

In [8]: for k, *tail in my_list:
    ...:     grouper[k].append(tail)
    ...:

In [9]: grouper
Out[9]:
defaultdict(list,
            {'A': [[6, 7], [4, 8]], 'B': [[9, 3], [10, 7]], 'C': [[1, 1]]})

In [10]: import statistics

In [11]: {k: list(map(statistics.mean, zip(*v))) for k,v in grouper.items()}
Out[11]: {'A': [5, 7.5], 'B': [9.5, 5], 'C': [1, 1]}
</code></pre>
<p>Note, if you are on Python 2, no need to call <code>list</code> after <code>map</code>. Also, you should use <code>iteritems</code> instead of <code>items</code>.</p>
<p>Also, you will have to do something like:</p>
<pre><code>for sub in my_list:
    grouper[sub[0]].append(sub[1:])
</code></pre>
<p>Instead of the cleaner version on Python 3.</p>
<p>Finally, there is no <code>statistics</code> module in Python 2. So just do:</p>
<pre><code>def mean(seq):
    return float(sum(seq))/len(seq)
</code></pre>
<p>and use that <code>mean</code> instead of <code>statistics.mean</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Similarly using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a></p>
<pre><code>import operator as op 
import itertools as it
import statistics as stats


iterables = [['A', 6, 7], ['A', 4, 8], ['B', 9, 3], ['C', 1, 1], ['B', 10, 7]]
groups = it.groupby(sorted(iterables), op.itemgetter(0))
{k: list(map(stats.mean, zip(*[i[1:] for i in g]))) for k, g in groups}
# {'A': [5, 7.5], 'B': [9.5, 5], 'C': [1, 1]}
</code></pre>
</div>
<span class="comment-copy"><code>my_list</code> is a <code>tuple</code>, not a list...</span>
<span class="comment-copy">You trying to get floats but get int in python 2 ? if that is the case you need a float in your division. try something like <code>['A', (6+4)/2.0 ,(7+8)/2.0]</code>.</span>
<span class="comment-copy">Yes I edited it now so I've changed the bracket discrepancies; I'll try yours out and let you know.</span>
<span class="comment-copy"><code>File "&lt;ipython-input-16-9a30058da39f&gt;", line 5     for k, *tail in my_list:            ^ SyntaxError: invalid syntax</code></span>
<span class="comment-copy">@Abhishek yes, because you are on Python 2...</span>
<span class="comment-copy">@Abhishek added a Python 2 compatible version.</span>
<span class="comment-copy">Now it says <code>No module named statistics</code>. I better update Python.. I think that module has been what people say 'depricated'</span>
