<div class="post-text" itemprop="text">
<p>I am trying to create a simple login system. What I'm doing is storing the login data in a text file called 'accounts.txt'</p>
<p>Now, when user tires to login, it first checks if the username given by the user is in the 'accounts.txt'. If it exists, then it asks for the password and then checks if password matches with the password in 'accounts.txt'</p>
<pre><code>fr = open('accounts.txt', 'r')
while True:
username = input('Enter your username: ')  # Ask for their username

    if username in fr.read():  # Check if username exists
        password = input('Enter password: ')  # Ask for password if username exists

        if username+password in fr.read():
            print('Welcome ' + username)
            break
        else:
            print('Wrong password')
</code></pre>
<p>Note, the password save in accounts.txt is in the format of usernamepassword so if username is jack and password is gate, the actual password in the txt file will be jackgate, hence im using username+password to check if password is correct.</p>
<p>The problem occuring is if the user enters correct username, then program moves ahead properly but even if the password entered is right, it still displays 'Wrong password' .When the second time user enters username, it even shows error for wrong username. I tried to play with the code for a long time but couldn't come up with a solution. I guess it has something to do with fr.read(). Can I use that 'fr' object only once?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me suggest some improvements with my answer to your question. I would read the accounts file in its entirety so you have an in-memory structure. If you do this as a dictionary in the form <code>accounts[USER] -&gt; PASS</code> you can easily check for any account as per the code below.</p>
<p>Regarding my suggestions (they do not exactly only answer your questions, but IMHO the topic of writing login code should be treated with care):</p>
<ul>
<li>I strongly recommend <em>not</em> to store passwords in plain text, regardless of application importance, always use hashes.</li>
<li>Do not store just the password hash, always use salting.</li>
<li>Do not tell the person trying to log in, if the username or the password was wrong, always just say "<em>that's not the right combination</em>", thus making it harder to break in.</li>
<li>Please find information about hashing functions in Python here: <a href="https://docs.python.org/3/library/hashlib.html#randomized-hashing" rel="nofollow noreferrer">https://docs.python.org/3/library/hashlib.html#randomized-hashing</a></li>
<li>This site has a good introduction on salting ans securing passwords:  <a href="https://crackstation.net/hashing-security.htm" rel="nofollow noreferrer">https://crackstation.net/hashing-security.htm</a></li>
<li>Do you users a favor and treat the username as no case-sensitive. That is a totally valid approach, but it annoys me every time I have to use such a site (just like email addr are not case-sensitive)</li>
<li>As I am a total layman regarding password security, maybe one of the other Stackoverflow users can jump in with a comment and expand on this topic.</li>
</ul>
<p>Anyway, here is my answer for your question on how to check for a login. I created a function <code>check_account()</code> that returns <code>True</code> or <code>False</code>, depending on wether the supplied credentials were correct or not.</p>
<pre><code>import hashlib
import os
import binascii

def check_account(usr, pwd):
    # read the accounts file, a simple CSV where
    # username, salt value and password hash are
    # stored in three columns separated by a pipe char
    accounts = {}
    fr = open('/users/armin/temp/test.csv', 'r')
    for line in [x.strip().split("|") for x in fr.readlines()]:
        accounts[line[0].lower()] = (line[1], line[2])
    fr.close()

    # now go looking if we do have the user account
    # in the dictionary
    if usr in accounts:
        credentials = accounts[usr]
        # credentials is a list with salt at index 0
        # and pwd hash at index 1
        # generate the hash form the functions parameters
        # and compare with our account
        h = hashlib.blake2b(salt=binascii.unhexlify(credentials[0]))
        h.update(pwd.encode('utf-8'))
        if credentials[1] == h.hexdigest():
            return True
        else:
            return False
    else:
        return False


def main():
    while True:
        username = input('Enter your username: ')  # Ask for their username
        password = input('Enter password: ')  # Ask for password if username exists
        if check_account(username.lower(), password):
            print("Welcome, {0}".format(username))
        else:
            print('Username or password unknown')


if __name__ == '__main__':
    main()
</code></pre>
<p>To create the data for a user account, use may this code.</p>
<pre><code>def create():
    username = input('Enter your username: ').lower()  # Ask for their username
    password = input('Enter password: ')  # Ask for password if username exists
    salt = binascii.hexlify(os.urandom(hashlib.blake2b.SALT_SIZE))
    print("SALT value:", salt)
    h = hashlib.blake2b(salt=binascii.unhexlify(salt))
    h.update(password.encode('utf-8'))
    print("Pwd hash:", h.hexdigest())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>startswith</code> and <code>endswith</code>:</p>
<pre><code>fr = [i.strip('\n') for i in open('accounts.txt')]

while True:
   username = input()
   if any(i.startswith(username) for i in fr):
       password = input('Enter password: ')
       if any(username+password == i for i in fr):
            print("welcome")
            break
       else:
           print("wrong password")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do </p>
<pre><code>if password in fr.read():
</code></pre>
<p>instead of </p>
<pre><code>if username+password in fr.read():
</code></pre>
<p>This is because for it to get to the if password in fr.read loop it first has to pass the if username in fr.read loop. However, the only problem I find with this is that if they enter a correct username but enter the wrong password for that username but correct password for another username it will still pass. </p>
<p>That is why I think you should use a dictionary not a text file. 
For example, if the usernames allowed is username and username1 and the password is username and username1, then in a different .py file, you can say.</p>
<pre><code>username_password={'username':'username','username1':'username1'}
</code></pre>
<p>that makes a dictionary that has the username and passwords.</p>
<p>let's say you name that file stuff.py. Then in the second file that has to be in the same directory, you can do </p>
<pre><code>from stuff import * #imports all values from stuff.py
while True:
    username = input('Enter your username: ') #gets username
    if username_password.has_key(username):
        password = input('Enter password: ')
        if password== username_password[username]:
            print('Welcome '+username)
            break
        else:
            print('Wrong password')
            break
    else:
        print('Wrong username')
</code></pre>
<p>I still don't get why you have a while loop, but if you want it, it is fine. Also, I added an else loop just in case the username is wrong.</p>
</div>
<span class="comment-copy"><code>fr.read()</code> is called twice, the second time it returns nothing because the file has already been read fully.</span>
<span class="comment-copy">i have a question what happens if username is correct and you give the password for another username wont it also say it is correct? i am pretty sure it will.</span>
<span class="comment-copy">@VictorLi to tackle this problem, i save every users password in the format usernamepassword  so if you have username as victor_li and password as mypass, your actual password will be stored as victor_limypass</span>
<span class="comment-copy">@Aryan oh so ur saying my answer is useless because of this statement lol anyways i still think a dictionary is better than a text with strings everywhere.</span>
<span class="comment-copy">@Aryan oh so in the end the password is the username with the password attached at the end okay. Should i delete my answer since it is kinda irrelevant?</span>
<span class="comment-copy">Example line for an account entry:  Franz|0fef31b549f275995919063e31bf2f17|c6d8cdd7a0164dfb99a4095d999da7bd994d8b8fde71b2fb1bda71b60d11fc93977d4afb2c6795a7299b90cb778ea397316754ba981ba167841718032d2d8711</span>
<span class="comment-copy">Thanks for this. Im glad I could learn a more of a professional approach to this. I'll surely try to implement this. :)</span>
<span class="comment-copy">Thanks for the answer :) Can you possibly tell me what is wrong with my code or why isn't it working. I'd like to know where i went wrong.</span>
<span class="comment-copy">@Aryan Glad to help. You logic appears to be fine; however, as @ Jean-Fran√ßois Fabre pointed out, the <code>read()</code> method is called twice. This means that the second time you attempt to call it, no contents are stored as it has already been fully read.</span>
