<div class="post-text" itemprop="text">
<p>I have list or/and tuple:</p>
<pre><code>MyVar = [0,0,0,0,1,0,0,0,0]
</code></pre>
<p>And I want to count elements in this which are different from <code>0</code>.</p>
<p>How to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do a <code>sum</code> over a conditional generator expression which doesn't require any intermediate lists or unnecessary arithmetic operations:</p>
<pre><code>&gt;&gt;&gt; sum(1 for element in MyVar if element != 0)
1
</code></pre>
<p>or as pointed out by @Jean-François Fabre:</p>
<pre><code>&gt;&gt;&gt; sum(1 for element in MyVar if element)
1
</code></pre>
<p>In case the <code>MyVar</code> <strong>only</strong> contains numbers this counts the number of not-zero values.</p>
</div>
<div class="post-text" itemprop="text">
<p>No need to generate lists, just:</p>
<pre><code>len(MyVar) - MyVar.count(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Get the length of the sublist of all elements that are not 0</p>
<pre><code>MyVar = [0,0,0,0,1,0,0,0,0]
len([x for x in MyVar if x != 0])
&gt;&gt; 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following should work:</p>
<pre><code>&gt;&gt;&gt; MyVar = [0,0,0,0,1,0,0,0,0]
&gt;&gt;&gt; sum(map(bool, MyVar))
1
</code></pre>
<p>It will convert the list to a list of booleans, with value <code>True</code> iff an element is nonzero. Then it'll sum all elements by implicitly considering <code>True</code> having value 1 and <code>False</code> having value 0.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try:</p>
<pre><code>&gt;&gt;&gt; len(filter(lambda x: x != 0, MyVar))
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try with <code>filter()</code>:</p>
<pre><code>&gt;&gt;&gt; my_var = [0, 0, 0, 0, 1, 0, 0, 0, 0]
&gt;&gt;&gt; result = filter(lambda x: x &gt; 0, my_var)
[1]
&gt;&gt;&gt; print(len(result))
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not nearly as efficient as any of the answers above, but simple and straight forward nonetheless </p>
<pre><code>myVar = [0,0,0,0,1,0,0,0,0]
count = 0

for var in myVar:
    if var != 0:
        count += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce</a> from functools:</p>
<pre><code>from functools import reduce

reduce((lambda x, y: x + (y&gt;0)), MyVar, 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>f = sum([1 for x in MyVar if x!= 0])
</code></pre>
<p>One line :) </p>
</div>
<div class="post-text" itemprop="text">
<p>Using sum of iterator:</p>
<pre><code>sum(x != 0 for x in MyVar)
</code></pre>
</div>
<span class="comment-copy">Similar question: <a href="https://stackoverflow.com/questions/15375093/python-get-number-of-items-from-listsequence-with-certain-condition" title="python get number of items from listsequence with certain condition">stackoverflow.com/questions/15375093/…</a></span>
<span class="comment-copy">or <code>sum(1 for element in MyVar if element)</code></span>
<span class="comment-copy">There is a subtle difference between "not zero" and "is truthy" - and the question asked for "not zero". In this case both would give the same result but they wouldn't if the list contains some weird values like empty strings/tuples/dicts/lists.</span>
<span class="comment-copy">of course, I know about the truthy bit...</span>
<span class="comment-copy">Probably not a good idea to use <code>is</code> or <code>is not</code> to compare values. It's just an implementation detail that <code>0</code> is a constant and it's only a constant in CPython.  <code>!=</code> would be better.</span>
<span class="comment-copy"><code>sum(MyVar)</code> also does the trick!</span>
<span class="comment-copy">that for <code>MyVar = [0,0,0,0,1,0,0,0,3]</code> will return <code>1 + 3 = 4</code></span>
<span class="comment-copy">true. OP example isn't representative, as always :)</span>
<span class="comment-copy">doesn't work in python 3. You don't have to pass an argument to filter. Just pass <code>None</code> BTW.: <code>len(list(filter(None,MyVar)))</code></span>
<span class="comment-copy">@Jean-FrançoisFabre good thing there isn't a python3 tag on this question :)</span>
<span class="comment-copy">for me now answers should be python 3 compliant unless otherwise stated. python 2 is history.</span>
<span class="comment-copy">@Jean-FrançoisFabre <i>"...unless otherwise stated"</i>.  As in, how there is specifically a python2.7 tag on this question...</span>
<span class="comment-copy">okay, that was just a comment. The <code>filter(None,</code> part is interesting, you should try it, though.</span>
<span class="comment-copy">should it be x for x in MyVar?</span>
<span class="comment-copy">why? I am doing a sum</span>
<span class="comment-copy">Well it wasn't me that down voted - but I just took a guess at why you received it.</span>
<span class="comment-copy">i see, thank you anyway :)</span>
<span class="comment-copy">Seems to work fine.. no idea why they downvoted</span>
