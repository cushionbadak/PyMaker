<div class="post-text" itemprop="text">
<p>I want to run a bash script from a python program. The script has a command like this:</p>
<pre><code>find . -type d -exec bash -c 'cd "$0" &amp;&amp; gunzip -c *.gz | cut -f 3 &gt;&gt; ../mydoc.txt' {} \;
</code></pre>
<p>Normally I would run a subprocess call like:</p>
<pre><code>subprocess.call('ls | wc -l', shell=True)
</code></pre>
<p>But that's not possible here because of the quoting signs. Any suggestions?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Escape the <code>'</code> marks with a <code>\</code>.</p>
<p><em>i.e.</em> For every: <code>'</code>, replace with: <code>\'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>While the question is answered already, I'll still jump in because I assume that you want to execute that bash script because you do not have the functionally equivalent Python code (which is lees than 40 lines basically, see below). 
Why do this instead the bash script? </p>
<ul>
<li>Your script now is able to run on any OS that has a Python interpreter</li>
<li>The functionality is a lot easier to read and understand</li>
<li>If you need anything special, it is always easier to adapt your own code</li>
<li>More Pythonic :-)</li>
</ul>
<p>Please bear in mind that is (as your bash script) without any kind of error checking and the output file is a global variable, but that can be changed easily.</p>
<pre><code>import gzip
import os

# create out output file
outfile = open('/tmp/output.txt', mode='w', encoding='utf-8')

def process_line(line):
    """
    get the third column (delimiter is tab char) and write to output file
    """
    columns = line.split('\t')
    if len(columns) &gt; 3:
        outfile.write(columns[3] + '\n')

def process_zipfile(filename):
    """
    read zip file content (we assume text) and split into lines for processing
    """
    print('Reading {0} ...'.format(filename))
    with gzip.open(filename, mode='rb') as f:
        lines = f.read().decode('utf-8').split('\n')
        for line in lines:
            process_line(line.strip())


def process_directory(dirtuple):
    """
    loop thru the list of files in that directory and process any .gz file
    """
    print('Processing {0} ...'.format(dirtuple[0]))
    for filename in dirtuple[2]:
        if filename.endswith('.gz'):
            process_zipfile(os.path.join(dirtuple[0], filename))

# walk the directory tree from current directory downward
for dirtuple in os.walk('.'):
    process_directory(dirtuple)

outfile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Triple quotes or triple double quotes ('''some string''' or """some other string""") are handy as well. See <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">here</a> (yeah, its python3 documentation, but it all works 100% in python2)</p>
<pre><code>mystring = """how many 'cakes' can you "deliver"?"""
print(mystring)
how many 'cakes' can you "deliver"?
</code></pre>
</div>
<span class="comment-copy">Can you escape the <code>' </code> marks with a <code>\ </code>?</span>
<span class="comment-copy">Wow. It actually does work. I didn't think it would work since the other command is going in each subdirectories. Thanks!</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/22224800/why-are-single-quote-or-double-quote-not-allowed-in-subprocess-check-outpu">why are '(single quote) or "(double quote) not allowed in subprocess.check_output() in python?</a></span>
