<div class="post-text" itemprop="text">
<p>I have a small C# function that I want to use in Python. However Im not sure how to use hashlib to accomplish the same result. The function receives a string an returns the base64 encoding of the sha1 hash of the string:</p>
<pre><code>private string ConvertStringToHash(string word)
{
  return Convert.ToBase64String(new SHA1CryptoServiceProvider().ComputeHash(new UnicodeEncoding().GetBytes(word)));
}
</code></pre>
<p>I tried this on python but im not getting the same results:</p>
<pre><code>def convert_string_to_hash(word):
    m1 = hashlib.sha1()
    m1.update(word)
    res = m1.digest()
    encoded = base64.b64encode(res)
    return encoded
</code></pre>
<p>Whats the best way to accomplish the same thing in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>The difference in the output stems from the encoding you are using:</p>
<ul>
<li>in your C# code, <a href="https://msdn.microsoft.com/en-us/library/system.text.unicodeencoding(v=vs.110).aspx" rel="nofollow noreferrer"><code>UnicodeEncoding</code></a> encodes the input string (<code>word</code>) as UTF-16 little endian; and</li>
<li>in your Python code, you're not even handling Unicode strings (they must be encoded as <em>some</em> bytes)</li>
</ul>
<p>So, just encode the <code>word</code> as <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">UTF-16 little endian</a> before hashing:</p>
<pre><code>import hashlib
import base64

def convert_string_to_hash(word):
    digest = hashlib.sha1(word.encode('utf-16-le')).digest()
    return base64.b64encode(digest)
</code></pre>
<p>Also, your Python function can be somewhat shortened.</p>
</div>
<span class="comment-copy">Can you post some sample input word and your expected output?</span>
<span class="comment-copy">Thank you very much! Outputs now match perfectly :)</span>
<span class="comment-copy">You're welcome, I'm glad it works for you.</span>
