<div class="post-text" itemprop="text">
<p>I need some examples with file operations using in memory and temporary files.</p>
<p>I searched a lot for a good example /tutorial and I found just basic read/write/append operations.</p>
<p>I need to understand how can I read in Django a file that is uploaded(an image) before the save(post) is finished. </p>
<p>Because Django is Python, I think is better to understand first in python.  </p>
<p>I checked the Django documentation/examples about, but it is not very clear so I need to understand first in phyton than in Django how the operations are working, not just copy and paste.   </p>
<p>I know how to use ImageFields, upload default operation, I'm interested only in  using "in memory and temporary files."</p>
<p>I want to use this in combination with a crop function. So the user can upload 1,2,3 .. images, and with a javascript crop script I get the coordinates in a hidden field. After javascript simulated crop I show the user a thumbnail with the crop, how will look like ratio</p>
<p>The user can change his mind and can edit/update or delete a file before saving.</p>
<p>Now depending on the file size it can be keep in memory or write.</p>
</div>
<div class="post-text" itemprop="text">
<p>When a file is uploaded Django will do one of two things: store it in memory if the file is small (&lt; 2 MB last time I checked), or store it as a temporary file on disk if it's large. This behavior is configurable via the <code>FILE_UPLOAD_HANDLERS</code> setting. So, your web server and Django take care of the actual upload and storage, but it's your job to process the file before the request is over, otherwise the file is deleted.</p>
<p>Uploaded files are accessible through the <code>request.FILES</code> property. Each key in <code>FILES</code> will match the name of the file input on your <code>&lt;form&gt;</code>. The value is an <code>UploadedFile</code> object, which is a stream you can use to read the file data. </p>
<p>For example, say you have an <code>&lt;input name="img" type="file" /&gt;</code> and you want to detect if the image is completely white. You don't need to store the file for this, you just need to load it into memory, process it to get the result and then let it be discarded. </p>
<pre><code>from PIL import Image

def some_view(request):
    if request.method == 'POST':
        img_file = request.FILES['img']

        if img_file.size &gt; 2000000:
            return HttpResponseBadRequest()

        img = Image.open(img_file)

        # analyze the image...
</code></pre>
<p>Another possibility is that someone is uploading a backup file that is quite large (lets say 2 GB), and you need to store it somewhere. It's effectively the same thing, except we read the file into memory in chunks, then write each chunk to disk somewhere else so that it's saved after the request finishes. </p>
<pre><code>def some_view(request):
    if request.method == 'POST':
        backup_file = request.FILES['backup_file']
        with open('some/file/name.bak', 'wb+') as destination:
            for chunk in backup_file.chunks():
                destination.write(chunk)

        # file is saved
</code></pre>
<p>When the request is over, the uploaded file is stored at <code>some/file/name.bak</code>.</p>
<p>Whether it's in memory or a temporary file is usually not important because the interface is the same. You can read a temporary file just like you can read an in memory file. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can set which upload handler is used for a Django form: <a href="https://docs.djangoproject.com/en/1.11/ref/files/uploads/#module-django.core.files.uploadhandler" rel="nofollow noreferrer">https://docs.djangoproject.com/en/1.11/ref/files/uploads/#module-django.core.files.uploadhandler</a></p>
<p>There are two built in options:</p>
<ul>
<li><a href="https://docs.djangoproject.com/en/1.11/ref/files/uploads/#django.core.files.uploadedfile.InMemoryUploadedFile" rel="nofollow noreferrer">in memory</a></li>
<li><a href="https://docs.djangoproject.com/en/1.11/ref/files/uploads/#django.core.files.uploadedfile.TemporaryUploadedFile" rel="nofollow noreferrer">temporary file</a></li>
</ul>
<p>The way Django seems to work is by walking through the list of all upload handlers: <a href="https://docs.djangoproject.com/en/1.11/topics/http/file-uploads/#upload-handlers" rel="nofollow noreferrer">https://docs.djangoproject.com/en/1.11/topics/http/file-uploads/#upload-handlers</a></p>
<p>For each upload handler it will check for a specific condition and if that condition is true, it will activate and use that upload handler.</p>
<p>The InMemoryUploadHandler, for example, is activated and used when files are below a certain size. The TemporaryFileUploadHandler is used when files are very large.</p>
<p>You will be able to access the data and files from the <code>request</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking at Python specific (not Django), then it sounds like you may be interested in the <code>tempfile</code> module:</p>
<p><a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">https://docs.python.org/3/library/tempfile.html</a></p>
<p>Adapting the example from the document above:</p>
<pre><code>import tempfile

fp = tempfile.TemporaryFile()
fp.write(b'Hello world!')
# Closing automatically deletes the tempfile
fp.close()
</code></pre>
<p>You can see this works fairly similarly to generic read/write file operations.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly you are looking for a way to access the uploaded file before it is saved using <code>instance.save()</code> or similar.</p>
<p>If that is the case, you might try to read the file directly from request:</p>
<pre><code>if my_form.is_valid():
    data = request.FILES['myfile'].read()
</code></pre>
</div>
<span class="comment-copy">i feel you want to know how to upload an image to a django server. is that correct ?</span>
<span class="comment-copy">I know how to upload a Image, using ImageField etc, I need something specific regarding in memory and temporary files</span>
<span class="comment-copy">i tried to write down the best i can get out of your question. Feel free to add what you are looking for as a comment there..</span>
<span class="comment-copy">It would help if you said a bit more about what exactly you want to do with the in-memory/temp file. Everything in Django is build on top of native python IO library. <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">OK now I see what you're trying to achieve. In this case you don't really need to send the file to the server. Crop and preview on the client and save to server only when user accepts the crop</span>
<span class="comment-copy">I try to understand first how is working in python, the I go to Django</span>
