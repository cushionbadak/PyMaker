<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3845018/boolean-operators-vs-bitwise-operators">Boolean operators vs Bitwise operators</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I'm reading through a <a href="https://www.quantopian.com/tutorials/pipeline#lesson6" rel="nofollow noreferrer">tutorial</a> for a Python based trading platform, and it is recommending the use of bitwise (<code>~</code>, <code>&amp;</code>, <code>|</code>) rather than boolean (<code>not</code>, <code>and</code>, <code>or</code>) operators for combining boolean expressions.</p>
<blockquote>
<p>Like factors, filters can be combined. Combining filters is done using
  the <code>&amp;</code> (and) and <code>|</code> (or) operators.</p>
</blockquote>
<p>Is there a good reason for this? I've never seen it before. I am not entirely sure about all the properties of booleans in Python but I do believe that in C and C++ booleans are represented by an integer 1 or 0 and can be operated on as such. Is Python similar? I can see how an <code>&amp;</code> and an <code>|</code> at least could work in that case.</p>
<p>What could be the purpose for using these bitwise operators instead of boolean? Is it faster?</p>
</div>
<div class="post-text" itemprop="text">
<p>Bitwise operators are usually the <em>very wrong tool</em> for the job. Bitwise operators are not faster (they have to do more work actually), and have a different precedence, so are bound to different parts of a larger expression compared to boolean operators.</p>
<p>However, in <strong>some specific frameworks</strong>, bitwise operators replace boolean operators because they can be hooked into. There are <a href="https://docs.python.org/3/reference/datamodel.html#object.__or__" rel="nofollow noreferrer"><code>__or__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__and__" rel="nofollow noreferrer"><code>__and__</code></a> specal methods that let you control the return value for <code>|</code> and <code>&amp;</code>, but there are no such hooks for the boolean operators (as the latter <em>short-circuit</em>; evaluating both expressions to pass to a hook would defeat that).</p>
<p>So if the article is talking about numpy (or numpy-derived frameworks such as Pandas or Scipy), or an ORM framework like SQLAlchemy, Peewee or Django, then there is a good reason to use bitwise operators.</p>
</div>
<span class="comment-copy">Well what does the tutorial say about why it recommends that?</span>
<span class="comment-copy">If they're recommending you bitwise operators vs the normal boolean operators in <i>conditional expressions</i>, then that's a problem.</span>
<span class="comment-copy">It doesn't. It actually implies that it thinks that they are the boolean operators. <code>Like factors, filters can be combined. Combining filters is done using the &amp; (and) and | (or) operators.</code></span>
<span class="comment-copy">"for combining boolean expressions": that's conditional.</span>
<span class="comment-copy">@Luke Python expressions do not have a type so there's no such a thing like "boolean expressions". Most likely things like "factors" and "filters" are not boolean, but we cannot tell for sure without more context. Expressions using <code>&gt;</code>, etc. not always evaluate to a boolean.</span>
<span class="comment-copy">I believe they have their own framework which is tightly integrated into the platform. You have to use an online IDE to develop with it, so I suspect this is the answer. I was unaware of those hooks. Thanks! I will accept your answer when I am able to!</span>
<span class="comment-copy">good answer, for a very vague question. I closed as duplicate, maybe your answer could be merged into the original, because noone tackles the problem like you did.</span>
<span class="comment-copy">Looks like they are using pandas <a href="https://www.quantopian.com/tutorials/getting-started#lesson5" rel="nofollow noreferrer">quantopian.com/tutorials/getting-started#lesson5</a></span>
<span class="comment-copy">@ayhan You mean <a href="https://www.quantopian.com/tutorials/pipeline#lesson6" rel="nofollow noreferrer">quantopian.com/tutorials/pipeline#lesson6</a></span>
<span class="comment-copy">@StefanPochmann Yes that's the page OP quoted from but I wanted to link the data object (and its relation to a pandas Series or a DataFrame).</span>
