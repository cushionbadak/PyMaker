<div class="post-text" itemprop="text">
<p>In Python 3.5 the recommended way to create virtual environments is with the <a href="https://docs.python.org/3/library/venv.html" rel="noreferrer">venv</a>, instead of <a href="https://virtualenv.pypa.io/en/stable/" rel="noreferrer">virtualenv</a>. Still the <a href="https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments" rel="noreferrer">python packaging tutorial mentions both tools.</a></p>
<p>However <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" rel="noreferrer">virtualenvwrapper</a> is a recommended wrapper tool to use when using virtualenv.</p>
<p>My questions are then:</p>
<ol>
<li>Is there a way to use virtualenvwrapper with venv?</li>
<li>Or could one even consider virtualenvwrapper not needed due to venv? (I cannot see how this could be true since it is a wrapper solving
another problem)</li>
</ol>
<p><strong>Edit:</strong> I can see that there is some confusion in the answers to my question. venv is Python's official equivalent of virtualenv, as explained in the links above. Multiple stack overflow questions suggests that venv should be used. As mentioned in the "duplicate" you suggested:</p>
<blockquote>
<p>the introduction of venv is in part a response to that mess. If you want to help improve the situation, I suggest you use venv and encourage others to do the same</p>
</blockquote>
<p>So it is encouraged to use venv. But as this questions implies, if one is to use venv how does one use a wrapper like virtualenvwrapper</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>As its name suggests, <code>virtualenvwrapper</code> was specifically designed to
wrap <code>virtualenv</code>, on which it depends. I don't believe that anyone
has similarly wrapped <code>venv</code> yet.</p></li>
<li><p><code>venv</code> is intended to do the basic work of creating virtual
environments, but environment management has to be done with
scripts. Although shell scripting is often people's first
resort, the <code>venv</code> module has an extensive API to help you in
those tasks.</p></li>
</ol>
<p>Nowadays there are many options for creating Python virtual environments. Besides those you mention, <code>anaconda</code> allows the creation and management of environments and even works pretty well with <code>pip</code> most of the time.</p>
<p>The tools in the virtual environment space have been designed to work together with standard Python distribution tools as far as possible, but the arrival of <code>venv</code> in Python 3.5 did not invalidate either <code>virtualenv</code> or <code>virtualenvwrapper</code>, which should both still work fine.</p>
<p>The <code>venv</code> module is principally a simple toolkit to allow the creation of virtualenvs inside programs, and is by no means intended to replace the convenience of <code>virtualenvwrapper</code>. It simply meets a rather different set of needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Append <a href="https://gist.github.com/dbtek/fb2ddccb18f0cf63a654ea2cc94c8f19" rel="nofollow noreferrer">This script</a> to in .bashrc / .bash_profile / .zshrc, then enables you basic management of venv.</p>
<p>In addition, you can extend the script by adding the following line so that it will also display the existing venv lists.</p>
<pre><code>lsvenv(){
    ls $VENV_HOME
}
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe">What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?</a></span>
<span class="comment-copy">@JBentley you are entirely correct in your assumptions. I thought I was clear, but I guess not. Glad someone got it :) I'll also add that with the introduction of pipenv this issue is no longer that relevant.</span>
<span class="comment-copy">In fact <a href="https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe">this question</a> gives a far more complete description of the issues.</span>
<span class="comment-copy">I'm more reluctant to downvote this answer than the other one because it is closer to being relevant, but it could do with improvement to more fully answer the question. It is not clear from this answer whether <code>virtualenvwrapper</code> can wrap <code>venv</code>, which I think is the main issue the OP is driving at (see his numbered question 1). To put it another way, is it a binary choice between (1) <code>virtualenvwrapper</code> + <code>virtualenv</code>; or (2) <code>venv</code> (without <code>virtualenvwrapper</code>)? Or is there an option (3) <code>virtualenvwrapper</code> + <code>venv</code>?</span>
<span class="comment-copy">@JBentley you are entirely correct in your assumptions. I thought I was clear, but I guess not. Glad someone got it :) I'll also add that with the introduction of pipenv this issue is no longer that relevant.</span>
<span class="comment-copy">pipenv uses virtualenv to achieve its purpose. So I think the question of virtualenvwrapper + venv still remains. But from the docs and repository of virtualenvwrapper, I don't think this is the case.</span>
<span class="comment-copy">Doesn't answer the question. Arguably still useful information. Perhaps post as a comment, or expand this to a full answer and leave this as an alternative solution?</span>
<span class="comment-copy">I am currently using this script, and it is quite helpful to manage the virtual environments. Although I got two downvotes, I will leave it here, in case it may help some others...</span>
