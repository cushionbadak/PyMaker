<div class="post-text" itemprop="text">
<p>I have a class for which I would like to override a variety of methods such as <code>__str__</code>, <code>__iter__</code> or <code>len</code>. However, the implementation of all of these methods are identical. For example, I might have something like this:</p>
<pre><code>def __len__(self):
    return list.__len__(self.do_something())

def __str__(self):
    return str(self.do_something())

def __iter__(self):
    return list.__iter__(self.do_something())

def items(self):
    return (self.do_something()).items()
</code></pre>
<p>My idea was to capture the methods or magic methods, and call them after performing <code>do_something</code> (in a type of wrapper function). Is there a way to do this? Or maybe there are alternative solutions?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to encapsulate all the "magic" methods, you could use a decorator and a metaclass.</p>
<pre><code>import functools


def magic_decorator(func):
    @functools.wraps(func)
    def func_wrapper(*args, **kwargs):
        ...
        return func(*args, **kwargs)
    return func_wrapper


class WrappedMagicMeta(type):

    def __new__(cls, name, bases, attrs):
        for k, v in attrs.items():
            if k.startswith('__') and k.endswith('__') and callable(v):
                attrs[k] = magic_decorator(v)

        return type.__new__(cls, name, bases, attrs)


class MyCustomObject(metaclass = WrappedMagicMeta):
    pass
</code></pre>
<p>You would implement whatever functionality you need to impose on <code>MyCustomObject</code>'s magic methods inside <code>func_wrapper</code>.</p>
<hr/>
<ul>
<li><p><a href="https://docs.python.org/3/glossary.html#term-metaclass" rel="nofollow noreferrer">What is a metaclass?</a></p></li>
<li><p><a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer">What is <code>@functools.wraps</code>?</a></p></li>
</ul>
</div>
<span class="comment-copy">It almost seems like you should be subclassing <code>list</code>, but I can't tell without more context.</span>
<span class="comment-copy">@Stephen S, I am making an object that acts as a remote procedure calling stub. It can be a list, dict, or other object reference (on the server side). The <code>do_something</code> method would return the list, if it is a list. However, if it is a dict, it will return a dict. (Forgive my <code>__iter__</code> example which simply returns a <code>list</code> method)</span>
<span class="comment-copy">@StephenS if I were to subclass <code>list</code>, how can I wrap all <code>list</code> specific methods?</span>
<span class="comment-copy">If you subclass <code>list</code>, it will give you all of the methods of list. Each method that you implement in your subclass will override the parent methods. To call the parent methods anyway, <a href="https://stackoverflow.com/a/7806655/7605753">use super</a>.</span>
<span class="comment-copy">@StephenS, I guess that would also work without subclassing list, but my main concern is to ensure coverage of all the methods that are part of list and dict.</span>
