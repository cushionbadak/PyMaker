<div class="post-text" itemprop="text">
<p>Could someone explain the role of the following functions:</p>
<pre><code>list()
map()
split()
</code></pre>
<p>In the context of this line of code please:</p>
<pre><code>input = list(map(int,input().split()))
</code></pre>
<p>Finally, should it be:</p>
<pre><code>int,input()
</code></pre>
<p>rather than:</p>
<pre><code>int(input())
</code></pre>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>input().split()</code> takes a line of keyboard input from the user and returns a list of words (separated by spaces).  For example if the user typed <code>the quick brown fox</code>, it would return <code>['the', 'quick', 'brown', 'fox']</code>.</p>
<p><code>map()</code> takes a function and a sequence of values, calls the function on each value in the sequence, and returns a sequence of all the results.  For example <code>map(int, ['1', '2', '3'])</code> would return <code>[1, 2, 3]</code>.</p>
<p>Finally, <code>list()</code> takes a sequence of values and returns it as a list.</p>
<p>So overall, your example line of code accepts a string of input from the user, splits it into a list of words, calls <code>int()</code> on each word, and assembles a final list of the returned values.</p>
<p>To answer your question about <code>int</code>, yes, in this case that is the correct way to call it.  <code>map()</code> takes a function <em>object</em>; you're not actually calling <code>int()</code> yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>All of these functions are members of the standard library and are as such covered by the <a href="https://docs.python.org/3.6/library/functions.html" rel="nofollow noreferrer">official documentation</a>.</p>
<p>That being said, I'll summarise them briefly.</p>
<ol>
<li><p><code>list</code> turns an <a href="https://docs.python.org/3.6/glossary.html?highlight=iterable" rel="nofollow noreferrer">iterable</a> into a list. In this case, the iterable is a <code>map</code> object.</p></li>
<li><p><code>map</code> takes a function <code>f</code> (or any callable, really), and an iterable <code>iter</code> and produces another iterable where the callable is applied to each element in <code>iter</code>.</p>
<p>In your case, the callable is <code>int</code>, which tries to convert its argument to an integer. <code>map</code> is a common term for applying a function to a collection of elements, but the 'Pythonic' way is to use a list comprehension:</p>
<pre><code>[f(x) for x in iterable] == list(map(f, iterable))
</code></pre></li>
<li><p><code>split</code> is a method on <code>str</code>ing objects, which divides the given string at every occurrence of the given separator, returning a list. If the separator argument is omitted, it defaults to a space.</p></li>
</ol>
<hr/>
<p>Putting it all together, you're reading input from stdin, splitting the resulting string into multiple strings, mapping <code>int</code> to each item (turning them into integers, or causing an exception on input like <code>'words instead of numbers'</code>) and converting the mapping to a list.</p>
<p>You're then shadowing a built in by assigning the result to <code>input</code>, which is generally speaking a bad idea (imagine the confusion when <code>input()</code> causes an error).</p>
<p>To answer your second question: no, since <code>map</code> takes two separate arguments.</p>
<hr/>
<p>I'd rewrite it slightly, if I were using it in a production environment:</p>
<pre><code>try:
  numbers = [int(n) for n in input('Space-separated integers, please: ').split()]
except ValueError as e:
  print('I needed numbers. You gave me something else.')
</code></pre>
<p>The argument to <code>input</code> is a prompt to the user (it's optional, of course).</p>
</div>
<div class="post-text" itemprop="text">
<p>Lets break it down
<code>input = list(map(int,input().split()))</code></p>
<p><code>map(int, input().split())</code> calls the <code>int()</code> functions which returns an int for every object returned from <code>input().split()</code></p>
<p>Now <code>map</code> returns a list object in Python 2.7 and a map object in Python 3. If you're running 2.7 then the <code>list(..)</code> is useless. In 3 it is required.</p>
<p>Regarding your second question, <code>map()</code> takes two arguments, so it needs to be <code>int, input()</code> because <code>int(input())</code> is considered a single arg.</p>
<p><code>input = list(map(int,input().split()))</code></p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.split</a> <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#map</a> <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#func-list</a></span>
<span class="comment-copy">Don't use <code>input</code> as a variable name (i.e. <code>input = ...</code>). It's a built-in function, and you just replaced it with a list, so you can't use that function again later in your program.</span>
<span class="comment-copy">Thank you for your help.  Definitely cleared that up allot. So the default 'split' is ' '. So  <code>input = list(map(int,input().split(' ')))</code>, would compile in the same as as the line in the question?</span>
<span class="comment-copy">I checked with 2.7, thanks for the comment. I edited my answer</span>
<span class="comment-copy">If it was python 2.7, you should be using <code>raw_input()</code> instead of <code>input()</code>.</span>
<span class="comment-copy">Thank you ever so much for your help, folks!</span>
