<div class="post-text" itemprop="text">
<p>I would like to add code formatting to a reference like this:</p>
<pre><code>:ref:`__slots__ &lt;python:slots&gt;`
</code></pre>
<p>My <code>intersphinx_mapping</code> defines <code>python</code> like this:</p>
<pre><code>intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
}
</code></pre>
<p>so the link is to <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#slots</a> (<code>slots</code> is defined in the <code>std:label</code> section of <code>https://docs.python.org/3/objects.inv</code>)</p>
<p>My goal is to format the rendered link in the style of <code>:py:attr:</code> or similar rather than the default text style with which <code>:ref:</code> renders.</p>
<p>None of the following options work:</p>
<ul>
<li><p><code>... ``:ref:`__slots__ &lt;python:slots&gt;``` ...</code> yeilds output like</p>
<blockquote>
<p>... <code>:ref:`__slots__ &lt;python:slots&gt;`</code> ...</p>
</blockquote></li>
<li><p><code>... ``:ref:`__slots__ &lt;python:slots&gt;` `` ...</code> yeilds output like</p>
<blockquote>
<p>... <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer">__slots__</a> ...</p>
</blockquote></li>
<li><p><code>... :ref:```__slots__`` &lt;python:slots&gt;` ...</code> yeilds output like</p>
<blockquote>
<p>... :ref:<a href="http://#id1" rel="nofollow noreferrer">``</a><a href="http://#id1" rel="nofollow noreferrer">`__slots__``</a> &lt;python:slots&gt;` ...</p>
</blockquote>
<p>There are two separate internal links to <code>#id1</code> in this case.</p></li>
<li><p><code>... :ref:` ``__slots__`` &lt;python:slots&gt;` ...</code> yeilds output like</p>
<blockquote>
<p>... :ref:` <a href="http://#id1" rel="nofollow noreferrer">``</a>__slots__`` &lt;python:slots&gt;` ...</p>
</blockquote></li>
</ul>
<p>Relpacing <code>``...``</code> with <code>:code:`...`</code> or <code>:literal:`...`</code> either inside or outside the <code>:ref:</code> does not help any either. In fact, it appears that nested roles are not allowed at all.</p>
<p>I would like to have an inline role that results in something that renders with a code style and a link, like</p>
<blockquote>
<p>... <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer"><code>__slots__</code></a> ...</p>
</blockquote>
<p>How do I get the basic <code>:ref:</code> (or equivalent) to appear with the code-style formatting used by <code>:py:attr:</code>?</p>
<p>I am using Sphinx 1.6.3 with Python 3.6.2 in an Anaconda environment.</p>
<p>Inverse question is here: <a href="https://stackoverflow.com/q/45741326/2988730">Sphinx remove code formatting from custom code reference</a></p>
<p>A tangentially relevant question: <a href="https://stackoverflow.com/q/43162240/2988730">Nested / Compounded roles: apply multiple roles to overlapping text</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://www.sphinx-doc.org/en/stable/markup/inline.html#role-any" rel="nofollow noreferrer"><code>:any:</code></a> role does what you want:</p>
<pre><code>:any:`__slots__ &lt;python:slots&gt;`
</code></pre>
<p>This is a "convenience role" that looks for cross-reference targets in the current domain as well as targets that work with <code>:ref:</code>.</p>
<p>The Python domain has several <a href="http://www.sphinx-doc.org/en/stable/domains.html#cross-referencing-python-objects" rel="nofollow noreferrer">specific cross-reference roles</a>, for different types of objects.</p>
</div>
<span class="comment-copy">I'm a little confused by what you want. First, do you want this inline and not in a <code>code-block</code>? Second, do you want the rendered output to be linked to the Python docs for slots? Finally, do you want to apply a style to the rendered output?</span>
<span class="comment-copy">@StevePiercy. Apologies for the confusion. 1) I would like the <code>:ref:</code> (or equivalent) to be inline, as it currently is. 2) I would like the output to be linked to the python docs with label <code>slots</code>. 3) I would like the output to be rendered in code font, even though <code>:ref:</code> is not. Preferably with the style of <code>:py:attr:</code> for this case. If that means applying a style to it, I would be happy to do so.</span>
<span class="comment-copy">I have updated the info above into the question.</span>
<span class="comment-copy">I don't think this is possible. See my answer to your inverse question.</span>
<span class="comment-copy">Could I somehow define a custom role based on <code>ref</code> that just adds the same formatting as <code>:py:attr:</code>?</span>
<span class="comment-copy">This definitely works, but I don't understand why. I went through every python-specific cross-reference role and none of them worked. Neither does <code>doc</code> or <code>option</code>. The only thing that works is <code>ref</code>, so <code>any</code> must be an alias to that, except it magically renders as a code snippet instead of <code>ref</code>'s plain text.</span>
<span class="comment-copy">There is a regular <code>.. _slots:</code> cross-reference label in the RST source, so it is not strange that <code>:ref:`slots` </code> works. (<code>:doc:</code> and <code>:option:</code> are different kinds of cross-references that I would not expect to work). Somehow <code>:any:</code> results in code formatting on the link (but I cannot really explain why).</span>
