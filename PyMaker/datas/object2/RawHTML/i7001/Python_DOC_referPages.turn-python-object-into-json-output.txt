<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3768895/how-to-make-a-class-json-serializable">How to make a class JSON serializable</a>
<span class="question-originals-answer-count">
                    25 answers
                </span>
</li>
</ul>
</div>
<p>New to Python, trying to define a very simple class that will hold a few values, and then get it output into JSON notation.</p>
<pre><code>import json

class Multiple:
    def __init__(self, basis):
            self.double = basis * 2
            self.triple = basis * 3
            self.quadruple = basis * 4


m = Multiple(100)
json.dumps(m)
</code></pre>
<p>I was hoping to see something like</p>
<pre><code>{
  "double":"200",
  "triple":"300",
  "quadruple":"400"
}
</code></pre>
<p>but instead get an error: "TypeError: &lt;<strong>main</strong>.Multiple object at 0x0149A3F0&gt; is not JSON serializable"</p>
</div>
<div class="post-text" itemprop="text">
<p>You can serialise the <code>__dict__</code> attribute of <code>m</code>:</p>
<pre><code>In [214]: json.dumps(m.__dict__)
Out[214]: '{"quadruple": 400, "double": 200, "triple": 300}'
</code></pre>
<hr/>
<p>You <a href="https://stackoverflow.com/questions/45834577/turn-python-object-into-json-output/45834618#comment78626512_45834618">can</a> also call <a href="http://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars</code></a>:</p>
<pre><code>In [216]: json.dumps(vars(m))
Out[216]: '{"quadruple": 400, "double": 200, "triple": 300}'
</code></pre>
<p>What to use and why:
<a href="https://stackoverflow.com/questions/21297203/use-dict-or-vars">Use `__dict__` or `vars()`?</a></p>
<hr/>
<p>For more complicated classes, consider the use of <a href="http://jsonpickle.github.io" rel="nofollow noreferrer"><code>jsonpickle</code></a>.</p>
<blockquote>
<p><code>jsonpickle</code> is a Python library for serialization and deserialization
  of complex Python objects to and from JSON. The standard Python
  libraries for encoding Python into JSON, such as the stdlib’s <code>json</code>,
  <code>simplejson</code>, and <code>demjson</code>, can only handle Python primitives that have a
  direct JSON equivalent (e.g. <code>dict</code>s, <code>list</code>s, <code>str</code>ings, <code>int</code>s, etc.).
  <strong><code>jsonpickle</code> builds on top of these libraries and allows more complex
  data structures to be serialized to JSON.</strong> </p>
</blockquote>
<p>Emphasis mine.</p>
</div>
<span class="comment-copy">beat me for a second , nice answer</span>
<span class="comment-copy">@DanielSanchez Next time :)</span>
<span class="comment-copy">it is better to use <a href="https://docs.python.org/2/library/functions.html#vars" rel="nofollow noreferrer"><code>vars</code></a></span>
<span class="comment-copy">@AzatIbrakov, did not know about <code>vars</code> and had struggle sometimes with that. It is the useful tip of the day, thanks!!</span>
<span class="comment-copy">@AzatIbrakov: I disagree with it in the case of <code>__dict__</code> just because <code>vars</code>’s overloading is icky.</span>
