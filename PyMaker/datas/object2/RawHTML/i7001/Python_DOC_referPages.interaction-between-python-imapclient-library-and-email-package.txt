<div class="post-text" itemprop="text">
<p>I have a Django project where I am working on an email client. I've decided to use python's <a href="https://github.com/mjs/imapclient" rel="nofollow noreferrer">IMAPClient</a> instead of standard library's <code>imaplib</code> for getting access to the messages. Currently, I don't make use of <a href="https://docs.python.org/3/library/email-examples.html" rel="nofollow noreferrer">python's email package</a> to encode/decode responses received from <a href="https://github.com/mjs/imapclient" rel="nofollow noreferrer">IMAPClient</a>, and I have a feeling that I manually implement things that should be handled by <a href="https://docs.python.org/3/library/email-examples.html" rel="nofollow noreferrer">email</a>.</p>
<p>Example code for downloading attachment:</p>
<pre><code>def download_attachment(server, msgid, index, encoding):
    # index and encoding is known from previous analysis of bodystructure
    file_content = f_fetch(server, msgid, index)
    # the below code should be handled by email's message_from_bytes 
    # and subsequent get_payload(decode = True) function
    if encoding == 'base64':
        file_content = base64.b64decode(file_content)
    elif ...
    ...
    endif
    #writing file_content to a folder
    return

def f_fetch(server, msgid, index):
    if not index:
        index = '1'
    response = server.fetch(msgid, 'BODY[' + index + ']')
    key = ('BODY[' + index + ']').encode('utf-8')
    if type(msgid) is str:
        msgid = int(msgid)
    return response[msgid][key]
</code></pre>
<p>So the question is, how should I rewrite this code to make use of <a href="https://docs.python.org/3/library/email-examples.html" rel="nofollow noreferrer">email</a>. 
Specifically, <strong>what should I do with the response from IMAPClient to pass it to email's message_from_bytes() function?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>If you wish to parse an email using the email package's message_from_bytes() function then you need to give it the entire, raw email body. To get this, fetch using the <code>RFC822</code> selector like this:</p>
<pre><code>fetch_data = server.fetch(msgid, ['RFC822'])
parsed = email.message_from_bytes(fetch_data[msgid][b'RFC822'])
</code></pre>
<p>If you're pulling individual message parts/attachments from the IMAP server, then the server is effectively doing the parsing work for you and you don't need to use the email package's parser.</p>
</div>
<span class="comment-copy">If you want to use the email package, you probably should use directly imaplib, because IMAPClient has already parsed the message.</span>
<span class="comment-copy">@Serge, so does it mean that as long as I use IMAPClient, I should forget about <code>email</code> package ?</span>
<span class="comment-copy">Unsure of it (the reason why it is a comment and not an answer...). I do not use IMAPClient, but I thought one of its major interests is to parse the message. If you do not need that, I'm just unsure of how you use IMAPClient, and why it is better than imaplib. Sorry not to be able to help your more...</span>
<span class="comment-copy">Ok. Thank you for this )</span>
<span class="comment-copy">Do I understand correctly that if my message contains some heavy attachment, say, a video file, then <code>RFC822</code> will download it all. So, if all the user wants to see is just the <code>plain text/HTML</code> of the message and the names of the attachment, then it's not optimal to download <code>RFC822</code>.</span>
