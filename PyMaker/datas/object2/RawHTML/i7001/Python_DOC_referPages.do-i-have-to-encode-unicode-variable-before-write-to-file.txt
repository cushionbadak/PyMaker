<div class="post-text" itemprop="text">
<p>I read the "Unicdoe Pain" article days ago. And I keep the "Unicode Sandwich" in mind. 
<a href="https://i.stack.imgur.com/zKjUq.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/zKjUq.png"/></a></p>
<p>Now I have to handle some Chinese and I've got a list</p>
<pre><code>chinese = [u'中文', u'你好']
</code></pre>
<p>Do i need to proceed encoding before writing to file?</p>
<pre><code>add_line_break = [word + u'\n' for word in chinese]
encoded_chinese = [word.encode('utf-8') for word in add_line_break]
with open('filename', 'wb') as f:
    f.writelines(encoded_chinese)
</code></pre>
<p>Somehow I find out that in python2. I can do this:</p>
<pre><code>chinese = ['中文', '你好']
with open('filename', 'wb') as f:
    f.writelines(chinese)
</code></pre>
<p>no unicode matter involed. :D</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to do that, you could use <code>io</code> or <code>codecs</code> to open the file with encoding.</p>
<pre><code>import io
with io.open('file.txt', 'w', encoding='utf-8') as f:
    f.write(u'你好')
</code></pre>
<p><code>codecs.open</code> has the same syntax.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3;</p>
<pre><code>with open('file.txt, 'w', encoding='utf-8') as f:
    f.write('你好')
</code></pre>
<p>will do just fine.</p>
</div>
<span class="comment-copy">For reading/writing files, use the <a href="https://docs.python.org/3/library/codecs.html#codecs.open" rel="nofollow noreferrer">codecs.open</a> function instead with the encoding - the <code>bytes</code> (Python2 <code>str</code>) type will no longer need to be manually managed within your application when everything will be proper <code>str</code> (Python2 <code>unicode</code>) types.</span>
<span class="comment-copy">Better yet, use <code>io.open</code>.  It's compatible with Python 3's <code>open</code> and aids porting later.</span>
<span class="comment-copy">Yes. I found out that I can do that in python2 as well. Then why we get unicode type involved in our program? Why not declare byte text everywhere?</span>
