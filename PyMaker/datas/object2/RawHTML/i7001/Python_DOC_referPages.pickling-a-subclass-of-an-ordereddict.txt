<div class="post-text" itemprop="text">
<p>The following statements:</p>
<pre><code>import pickle
from collections import OrderedDict as Odict

class A(Odict):
    def __init__(self, items):
        super().__init__(items)

items = Odict((('a',1), ('b', 2)))
a = A(items)

with open('test.pickle','wb') as fout:
    pickle.dump(a, fout)

with open('test.pickle','rb') as fin:
    pickle.load(fin)
</code></pre>
<p>Lead to this error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
TypeError: __init__() missing 1 required positional argument: 'items'
</code></pre>
<p>But work fine with a plain <code>dict</code> rather than <code>OrderedDict</code>. I know in this case I don't need the <code>__init__</code>, but this problem is preventing from using the multiprocessing module with a more complex subclass of <code>OrderedDict</code> where other arguments are stored as attributes and I can't avoid having it. (I used python 3.4.6).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>OrderedDict</code> overwrites <a href="https://docs.python.org/3/library/pickle.html#object.__reduce__" rel="nofollow noreferrer"><code>__reduce__</code></a> and you need to override it if you overwrite the <code>__init__</code> or <code>__new__</code> method and/or want to store additional attributes.</p>
<p>In your case you made the argument for <code>__init__</code> mandatory (it isn't mandatory for <code>dict</code> or <code>OrderedDict</code>) so you need to override <a href="https://docs.python.org/3/library/pickle.html#object.__reduce__" rel="nofollow noreferrer"><code>__reduce__</code></a>:</p>
<pre><code>import collections

class OD(collections.OrderedDict):
    def __init__(self, items):
        super().__init__(items)

    def __reduce__(self):
        state = super().__reduce__()
        # OrderedDict.__reduce__ returns a 5 tuple
        # the first and last can be kept
        # the fourth is None and needs to stay None
        # the second must be set to an empty sequence
        # the third can be used to store attributes
        newstate = (state[0],
                    ([], ),
                    None,
                    None,
                    state[4])
        return newstate
</code></pre>
<p>This can now be pickled without problems:</p>
<pre><code>import pickle

a = OD((('a',1), ('b', 2)))

with open('test.pickle','wb') as fout:
    pickle.dump(a, fout)

with open('test.pickle','rb') as fin:
    pickle.load(fin)
</code></pre>
<p>However if you want attributes that aren't set in your <code>__init__</code> this won't work correctly yet:</p>
<pre><code>a = OD((('a',1), ('b', 2)))
a.a = 10

with open('test.pickle','wb') as fout:
    pickle.dump(a, fout)

with open('test.pickle','rb') as fin:
    b = pickle.load(fin)

b.a  # AttributeError: 'OD' object has no attribute 'a'
</code></pre>
<p>To make that work you need to change the above mentioned <code>__reduce__</code> function as well to return a third argument. For example you could simply return the <code>__dict__</code>:</p>
<pre><code>class OD(collections.OrderedDict):
    def __init__(self, items):
        super().__init__(items)

    def __reduce__(self):
        state = super().__reduce__()
        newstate = (state[0],
                    ([], ),
                    self.__dict__,
                    None,
                    state[4])
        return newstate
</code></pre>
<p>With this the above example will work correctly.</p>
<hr/>
<p>A lot of the design depends on how you want your subclass to behave. In some cases it would be better to pass the items via the second argument (the one that is passed to <code>__init__</code>). As to how you set your attributes: Sometimes it's enough to use <code>self.__dict__</code> but in other cases it would be safer/better to use <a href="https://docs.python.org/3/library/pickle.html#object.__setstate__" rel="nofollow noreferrer"><code>__setstate__</code></a>. You should definitely read the <a href="https://docs.python.org/3/library/pickle.html#module-pickle" rel="nofollow noreferrer">documentation of the <code>pickle</code> module</a> and check which approach is best for you.</p>
</div>
<span class="comment-copy">I think I might have worked out a solution to this which I thought might be useful to others. Adding:</span>
