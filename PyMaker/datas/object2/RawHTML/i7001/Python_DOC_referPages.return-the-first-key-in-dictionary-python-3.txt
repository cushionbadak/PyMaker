<div class="post-text" itemprop="text">
<p>I'm trying to print the key and value using the below code : </p>
<pre><code>data = {"Key1" : "Value1", "Key2" : "Value2"}
print(data.keys()[1])   
print(data.values()[1])
</code></pre>
<p>I get the error </p>
<pre><code>'dict_keys' object does not support indexing
</code></pre>
<p>What is wrong with the mentioned code?</p>
<p>Accepted Output :</p>
<pre><code>Key2
Value2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It does rather depend on what you mean by <em>first</em>. In Python 3.6, entries in a dictionary are ordered by the key, but probably not quite in the way you expect.</p>
<p>To take your example:</p>
<pre><code>&gt;&gt;&gt; data = {"Key1" : "Value1", "Key2" : "Value2"}
</code></pre>
<p>Now add the key <code>0</code>:</p>
<pre><code>&gt;&gt;&gt; data[0] = "Value0"
&gt;&gt;&gt; data
{'Key1': 'Value1', 'Key2': 'Value2', 0: 'Value0'}
</code></pre>
<p>So the zero comes at the end. But if you construct the dict from scratch, like this:</p>
<pre><code>&gt;&gt;&gt; data = {0: "Value0", "Key1" : "Value1", "Key2" : "Value2"}
</code></pre>
<p>you get this result instead</p>
<pre><code>&gt;&gt;&gt; data
{0: 'Value0', 'Key1': 'Value1', 'Key2': 'Value2'}
</code></pre>
<p>This illustrates the principle that you should not depend on the ordering, which is defined only by the dict implementation, which, in CPython 3.6 and later, is order of entry. To illustrate that point in a different way:</p>
<pre><code>&gt;&gt;&gt; data = {0: "Value0", "Key1" : "Value1", "Key2" : "Value2"}
&gt;&gt;&gt; sorted(data.keys())
Traceback (most recent call last):
  File "&lt;pyshell#42&gt;", line 1, in &lt;module&gt;
    sorted(data.keys())
TypeError: '&lt;' not supported between instances of 'str' and 'int'
</code></pre>
<p>Guido has this to say on the subject:</p>
<blockquote>
<p>I'd like to handwave on the ordering of ... dicts. Yes, in
  CPython 3.6 and in PyPy they are all ordered, but it's an
  implementation detail. I don't want to <em>force</em> all other
  implementations to follow suit. I also don't want too many people
  start depending on this, since their code will break in 3.5. (Code
  that needs to depend on the ordering of keyword args or class
  attributes should be relatively uncommon; but people will start to
  depend on the ordering of all dicts all too easily. I want to remind
  them that they are taking a risk, and their code won't be backwards
  compatible.) </p>
</blockquote>
<p>The full post is <a href="https://mail.python.org/pipermail/python-dev/2016-September/146348.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>in python3 <code>data.keys()</code> returns a <code>dict_keys</code> object, so, in general, apply list on it to be able to index/slice it: </p>
<pre><code>data = {"Key1" : "Value1", "Key2" : "Value2"}
print(data.keys()) 
# output &gt;&gt;&gt; dict_keys(['Key1', 'Key2'])
print(list(data.keys())[1])   
# output &gt;&gt;&gt; Key2
print(list(data.values())[1])
# output &gt;&gt;&gt; Value2
</code></pre>
<p>For your specific case, you need to convert the dictionary to an ordered one to conserve the order and get the first element as follows: </p>
<pre><code>from collections import OrderedDict 
data = {"Key1" : "Value1", "Key2" : "Value2"}
data = OrderedDict(data)
print(data)
# output &gt;&gt;&gt; OrderedDict([('Key1', 'Value1'), ('Key2', 'Value2')])
print(list(data.keys())[0])
# output &gt;&gt;&gt; Key1
</code></pre>
<h1>Edit:</h1>
<p>Based on comments from @Mseifert (thanks), preserving the order after conversion from the unordered dictionary to the ordered one is only an implementation detail that works in python3.6 and we cannot rely on, here's the discussion Mseifert shared: </p>
<ul>
<li><a href="https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6">Dictionaries are ordered in Python 3.6+</a> </li>
</ul>
<p>So the correct way to do what you want is to explicitly define the order </p>
<pre><code>from collections import OrderedDict
data = OrderedDict([('Key1', 'Value1'), ('Key2', 'Value2')])
print(list(data.keys())[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries are unordered and in the newer Python versions the hashes of strings are randomized (per session). So you have to accept that what you get as "n"-th key (or value) of a dictionary isn't predictable (at least when the keys are strings).</p>
<p>But if you just want the element that happens to be "first" (or "second") just use <code>list</code> to convert the <code>dict_keys</code> to an sequence that can be indexed:</p>
<pre><code>print(list(data.keys())[1])   
print(list(data.values())[1])
</code></pre>
<p>However, my suggestion would be to use an <a href="https://docs.python.org/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> instead of a normal dict to make the result deterministic:</p>
<pre><code>from collections import OrderedDict
data = OrderedDict([("Key1", "Value1"), ("Key2", "Value2")])
print(list(data.keys())[1])     # Key2
print(list(data.values())[1])   # Value2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <code>dict</code>s are unordered data structures. Therefore there is no <em>first</em> key. If you want to have a <code>dict</code>-like data structure with internal ordering of keys, have a look at <code>OrderedDict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dicts represent an unordered datatype, therefore there is no indexing. There is an option in collections. Try OrderedDict.</p>
<pre><code>import collections

d = collections.OrderedDict()
d['Key1'] = 'Value1'
d['Key2'] = 'Value2' # that's how to add values to OrderedDict

items = list(d.items())
print(items)
#[('Key1', 'Value1'), ('Key2', 'Value2')]
print(items[0])
#('Key1', 'Value1')
print(items[1])
#('Key2', 'Value2')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Shortest:</p>
<pre><code>mydict = {"Key1" : "Value1", "Key2" : "Value2"}
print( next(iter(mydict)) ) # 'Key1'
</code></pre>
<p>For both the key and value:</p>
<pre><code>print( next(iter( mydict.items() )) ) # ('Key1', 'Value1')
</code></pre>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/q/18686903/2301450">dict.keys()[0] on Python 3</a></span>
<span class="comment-copy">It’s not a good idea to rely on <code>dict</code> ordering. Use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">an <code>OrderedDict</code></a> instead.</span>
<span class="comment-copy">'dict_keys' object does not support indexing</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3097866/access-an-arbitrary-element-in-a-dictionary-in-python">Access an arbitrary element in a dictionary in Python</a></span>
<span class="comment-copy">Well the dupe I suggested is value not key, perhaps <a href="https://stackoverflow.com/questions/30362391/how-to-find-first-key-in-a-dictionary" title="how to find first key in a dictionary">stackoverflow.com/questions/30362391/…</a></span>
<span class="comment-copy">The code of this answer is correct but that’s misleading; dict keys aren’t ordered so calling <code>list(data.keys())[0]</code> won’t return the "first" key of the dict because there’s no such thing as a "first key" in a dict.</span>
<span class="comment-copy">@bfontaine edited according to the specific request of the OP.</span>
<span class="comment-copy">I haven't downvoted <i>but</i> when you do <code>data = {"Key1" : "Value1", "Key2" : "Value2"}</code> the order is gone, there's no point converting it to an <code>OrderedDict(data)</code> afterwards.</span>
<span class="comment-copy">I've tested it on python3.6, the order is preserved, please check here: <a href="https://repl.it/KVt8" rel="nofollow noreferrer">repl.it/KVt8</a>. @MSeifert can you point me to the doc link stating otherwise?</span>
<span class="comment-copy">Even though it works in 3.6 (it won't in earlier versions and the question isn't explicitly tagged for Python 3.6) that's an implementation detail you shouldn't rely on (see also <a href="https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6" title="dictionaries are ordered in python 3 6">stackoverflow.com/questions/39980323/…</a>)</span>
