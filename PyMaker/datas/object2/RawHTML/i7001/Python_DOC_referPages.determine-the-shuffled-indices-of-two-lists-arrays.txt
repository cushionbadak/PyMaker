<div class="post-text" itemprop="text">
<p>As a challenge, I've given myself this problem:</p>
<p>Given 2 lists, A, and B, where B is a shuffled version of A, the idea is to figure out the shuffled indices.</p>
<p>For example:</p>
<pre><code>A = [10, 40, 30, 2]
B = [30, 2, 10, 40]

result = [2,   3,    0,      1] 
        A[2]  A[3]   A[0]  A[1]
        ||     ||     ||    ||
        30      2     10    40
</code></pre>
<p>Note that ties for identical elements can be resolved arbitrarily. </p>
<p>I've come up with a <a href="https://stackoverflow.com/a/45830948/4909087">solution</a> that involves the use of a dictionary to store indices. What other possible solutions does this problem have? A solution using a library also works. Numpy, pandas, anything is fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>As an improvement over your current solution, you could use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> and avoid <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault</code></a>:</p>
<pre><code>from collections import defaultdict

A = [10, 40, 30, 2]
B = [30, 2, 10, 40]

idx = defaultdict(list)
for i, l in enumerate(A):
    idx[l].append(i)

res = [idx[l].pop() for l in B]
print(res)
</code></pre>
<hr/>
<p>Here are the timings for the two methods using the sample input given:</p>
<p><strong>Script used for testing</strong></p>
<pre><code>from timeit import timeit


setup = """
from collections import defaultdict;
idx1 = defaultdict(list); idx2 = {}
A = [10, 40, 30, 2]
B = [30, 2, 10, 40]
"""

me = """
for i, l in enumerate(A):
    idx1[l].append(i)
res = [idx1[l].pop() for l in B]
"""

coldspeed = """
for i, l in enumerate(A):
    idx2.setdefault(l, []).append(i)
res = [idx2[l].pop() for l in B]
"""

print(timeit(setup=setup, stmt=me))
print(timeit(setup=setup, stmt=coldspeed))
</code></pre>
<p><strong>Results</strong></p>
<pre><code>original: 2.601998388010543
modified: 2.0607256239745766
</code></pre>
<p>So it appears that using <code>defaultdict</code> actually yields a slight speed increase. This actually makes since though since <code>defaultdict</code> is implemented in C rather than Python. Not to mention that the attribute lookup of the original solution - <code>idx.setdefault1</code> - is costly.</p>
</div>
<div class="post-text" itemprop="text">
<p>We can make use of <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html" rel="nofollow noreferrer"><code>np.searchsorted</code></a> with its optional <code>sorter</code> argument -</p>
<pre><code>sidx = np.argsort(B)
out = sidx[np.searchsorted(B,A, sorter=sidx)]
</code></pre>
<p>Sample run -</p>
<pre><code>In [19]: A = [10, 40, 30, 2, 40]
    ...: B = [30, 2, 10, 40]
    ...: 

In [20]: sidx = np.argsort(B)

In [21]: sidx[np.searchsorted(B,A, sorter=sidx)]
Out[21]: array([2, 3, 0, 1, 3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>LOL</p>
<pre><code>pd.Series(A).reset_index().set_index(0).ix[B].T.values[0]
#array([2, 3, 0, 1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in my question, I was able to solve this using a dictionary. I store the indices in a <code>dict</code> and then use a list comprehension to pop them out:</p>
<pre><code>A = [10, 40, 30, 2]
B = [30, 2, 10, 40]

idx = {}
for i, l in enumerate(A):
    idx.setdefault(l, []).append(i)

res = [idx[l].pop() for l in B]
print(res)
</code></pre>
<p>Output:</p>
<pre><code>[2, 3, 0, 1]
</code></pre>
<p>This is better than the obvious <code>[A.index(x) for x in B]</code> because it is </p>
<ol>
<li>linear</li>
<li>handles duplicates gracefully </li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://github.com/EelcoHoogendoorn/Numpy_arraysetops_EP" rel="nofollow noreferrer">numpy_indexed</a> package has an efficient and general solution to this:</p>
<pre><code>import numpy_indexed as npi
result = npi.indices(A, B)
</code></pre>
<p>Note that it has a kwarg to set a mode for dealing with missing values; and it works with nd-arrays of any type just the same, as it does with 1d integer arrays.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since several very nice solutions were posted, I've taken the liberty of assembling some crude timings to compare each method.</p>
<p><strong>Script used for testing</strong></p>
<pre><code>from timeit import timeit


setup = """
from collections import defaultdict
import pandas as pd 
import numpy as np 
idx1 = defaultdict(list); idx2 = {}
A = [10, 40, 30, 2]
B = [30, 2, 10, 40]
"""

me = """
for i, l in enumerate(A):
    idx1[l].append(i)
res = [idx1[l].pop() for l in B]
"""

coldspeed = """
for i, l in enumerate(A):
    idx2.setdefault(l, []).append(i)
res = [idx2[l].pop() for l in B]
"""

divakar = """
sidx = np.argsort(B)
res = sidx[np.searchsorted(B,A, sorter=sidx)]
"""

dyz = """
res = pd.Series(A).reset_index().set_index(0).ix[B].T.values[0]
"""

print('mine:', timeit(setup=setup, stmt=me, number=1000))
print('coldspeed:', timeit(setup=setup, stmt=coldspeed, number=1000))
print('divakar:', timeit(setup=setup, stmt=divakar, number=1000))
print('dyz:', timeit(setup=setup, stmt=dyz, number=1000))
</code></pre>
<p><strong>Result/Output (run on Jupyter notebook server. 1000 loops)</strong></p>
<pre><code>mine: 0.0026700650341808796
coldspeed: 0.0029303128831088543
divakar: 0.02583012101240456
dyz: 2.208147854078561
</code></pre>
<p>Here are some timings where the size of <code>A</code> is 100,000 random numbers. And <code>B</code> is its shuffled equivalent. The program was just too time and memory consuming. Also I <em>had</em> to reduce the number of loops to 100. Otherwise, everything is the same as above:</p>
<pre><code>mine: 17.663535300991498
coldspeed: 17.11006522300886
divakar: 8.73397267702967
dyz: 44.61878849985078
</code></pre>
</div>
<span class="comment-copy">using the list comprehension    '[ A.index(x) for x in B ]' output is [2, 3, 0, 1]</span>
<span class="comment-copy">@Kallz That's O(n^2). I think a dict is better.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/q/8251541/846892">Numpy way</a>.</span>
<span class="comment-copy">@AshwiniChaudhary That looks like a good dup. Think we should close this one.</span>
<span class="comment-copy">@Divakar This is not a "numpy only" question...</span>
<span class="comment-copy">Nice. Does it make a big difference?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Alright, I update with some timings if you wanna to take a look.</span>
<span class="comment-copy">Nice. Thanks for the neat answer.</span>
<span class="comment-copy">@ChristianDean for '[ A.index(x) for x in B ]'  it give 0.569697856903</span>
<span class="comment-copy">@Kallz I don't have time to confirm that right now, but I imagine that as the size of <code>A</code> and <code>B</code> increased the time spent searching for <code>x</code> in <code>A</code> using <code>index</code> would increase exponential.</span>
<span class="comment-copy">Just confirming, how does this handle duplicates?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Dups in <code>A</code>?</span>
<span class="comment-copy">Yep, how is that handled?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Handles pretty gracefully :) Should I add  a sample for that?</span>
<span class="comment-copy">Sure... please do.</span>
<span class="comment-copy">Probably should have kept pandas out of this :p</span>
<span class="comment-copy">Keep your word. Or else.</span>
<span class="comment-copy">Relax. I did say pandas. :p Here's my +1.</span>
<span class="comment-copy">Congrats on the 10K dude :-) Just noticed you reached it.</span>
<span class="comment-copy">A simpler pandas solution could be: <code>pd.Index(A).get_indexer_for(B)</code>.</span>
<span class="comment-copy">Okay.. since you've done this much, can you try the same for a <code>random.randint()</code> array of size 100000, and its equivalent <code>random.shuffle()</code>'d version?</span>
<span class="comment-copy">Ah, it looks exactly like I imagined.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Yup. I figured numpy would come out on top with bigger input.</span>
