<div class="post-text" itemprop="text">
<p>My task is to:</p>
<p>Print out a list of all the words that occur in the corpus and their frequencies. This list should be sorted by word frequencies in descending order (most frequent word first)."</p>
<pre><code>def printWordFrequencies(index, vocab):
    #print("Your task 3: print out a list of all the words that occur in the corpus and their frequencies. This list should be sorted by word frequencies in descending order (most frequent word first).")
    newList = []
    for i in index:
        newList.append([i, len(index[i])])
        sorted(newList)
    return newList
</code></pre>
<p><code>index</code> is a dictionary (associative array) that maps words to a list of their positions and <code>vocab</code> is an alphabetically sorted list of the vocabulary used in the corpus.</p>
<p>The function that I have written has two problems. Firstly, it does not sort properly. It gives the right word frequency like <code>[.., ['plot', 128], ['two', 166] , ..]</code> but it does not sort depending on its frequency.</p>
<p>Secondly, it takes way too long time to run. I am assuming that it is because it's trying to append and sort such a long list, but I am not sure how to fix this issue.</p>
<p>One small thing is that, I am not sure why I need <code>vocab</code> as an input parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, you would only need to sort <code>newList</code> once, at the end. Currently you are sorting it for each iteration of your loop which is why it is running so slowly. Using <code>sorted()</code> also does not change your original list, but returns a new sorted list, so in your code, the sorting has no effect as you are not storing the list returned.</p>
<p>Secondly, to sort based on the second item in each entry, you can give <code>sorted()</code> a <code>key</code> to use. In this case, it sorts first based on the second length item <code>x[1]</code>, and if two entries have the same length, it sorts based on the first entry <code>x[0]</code>.</p>
<pre><code>def printWordFrequencies(index, vocab):
    newList = []

    for i in index:
        newList.append([i, len(index[i])])

    return sorted(newList, key=lambda x: [x[1], x[0]], reverse=True)
</code></pre>
<p>This could be further simplified by using a list comprehension:</p>
<pre><code>def printWordFrequencies(index, vocab):    
    return sorted([i, len(index[i])]] for i in index, key=lambda x: [x[1], x[0]], reverse=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to sorted the new list for every word that you add in your newList, so exclude the sorted method from the for-loop.</p>
<p>If i understand you need to check if the words that are in index are also in vocab.</p>
<p>You can try something like this:</p>
<pre><code>def printWordFrequencies(index, vocab):

    newList = []
    for i in index:
        if i in vocab:
            newList.append([i, len(index[i])])
    sorted(newList, key=lambda k: [k[1], k[0]])
    return newList
</code></pre>
<p>Key order first by second value and if the length is the same by first.</p>
<p>Hope it helps.</p>
</div>
<span class="comment-copy">Why are you sorting inside the loop? Just sort once, after you have added all the items. Python will sort a list of lists by the first element, so if you want to sort by the length, you can pass a key function to <code>sorted()</code>. <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#sorted</a></span>
<span class="comment-copy">This seems to be the answer that I was looking for. One more thing is, it sorts in an ascending order, not descending. I tried to reverse the sorted list by using reversed command at the end, but it did not return anything for me. Any idea?</span>
<span class="comment-copy">You can add <code>reverse=True</code> as a parameter to <a href="https://docs.python.org/2/library/functions.html?highlight=sorted#sorted" rel="nofollow noreferrer"><code>sorted()</code></a>.</span>
<span class="comment-copy">Great! Thanks a lot. I am sorry but my last question is, do you find the necessity to use the 'vocab' parameter in this function?</span>
<span class="comment-copy">It would have helped to have seen small examples of <code>index</code> and <code>vocab</code> in your question to understand better.</span>
<span class="comment-copy">The whole question looks like: Write a function printWordFrequencies(index, vocab) that takes this index and the corpus vocabulary as arguments and prints out all words sorted by their frequencies (how often they occur in the corpus), in descending order (most frequent word first).</span>
