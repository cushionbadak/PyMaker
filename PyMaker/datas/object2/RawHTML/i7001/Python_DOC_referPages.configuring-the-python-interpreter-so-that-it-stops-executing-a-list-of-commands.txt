<div class="post-text" itemprop="text">
<p>I sometimes paste  a list of commands to be executed in the Python interpreter (<a href="https://docs.python.org/3/tutorial/appendix.html#tut-interac" rel="nofollow noreferrer">Interactive Mode</a>  (<a href="https://web.archive.org/web/20170816015345/https://docs.python.org/3/tutorial/appendix.html" rel="nofollow noreferrer">mirror</a>)). By default, if one command fails (i.e., raises an error), the Python interpreter indicates the command has failed, then executes the subsequent commands.</p>
<p>Is there any way to configure the Python interpreter (Interactive Mode) so that it stops executing a list of commands whenever one command fails?</p>
<hr/>
<p>Answering the comments:</p>
<ul>
<li>I am interested in Linux, Mac OS X and Microsoft Windows.</li>
<li><p>Code example that I paste in the Python interpreter:</p>
<pre><code>1/0
print('yo')
</code></pre>
<p>I don't want <code>yo</code> to be printed, since <code>1/0</code> raises an error.</p></li>
<li><p>I paste the list of commands, from the clipboard, to the Python interpreter</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can extend <a href="https://docs.python.org/2.7/library/code.html#code.InteractiveConsole" rel="nofollow noreferrer"><code>InteractiveConsole</code></a> and create your own shell which bails out on error. You can even run it from within interactive-mode :)</p>
<p>Here's a small example:</p>
<pre><code>from code import InteractiveConsole
import sys


class Shell(InteractiveConsole):
    def __init__(self):
        self.stdout = sys.stdout
        InteractiveConsole.__init__(self)
        return

    def runcode(self, code):        
        try:
            exec code in self.locals
        except:
            self.showtraceback()
            sys.exit(1)  # &lt;-- this is the secret sauce!


if __name__ == '__main__':
     sh = Shell()
     sh.interact()
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>&gt;&gt;&gt; sh = Shell()
&gt;&gt;&gt; sh.interact()
Python 2.7.6 (default, Jan 26 2016, 22:37:40)
[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(Shell)
&gt;&gt;&gt; 1
1
&gt;&gt;&gt; 1+1
2
&gt;&gt;&gt; 1/0
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
alfasi:~/Desktop &gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure how to fix this on a standard Python REPL, but you can definitely achieve this with IPython. </p>
<p>In IPython, when you paste code, it is treated as a single code block, rather than a bunch of individual statements.</p>
<p>For example, open an IPython interactive session on your terminal and paste this: </p>
<pre><code>x = [1]
y = [1 for _ in range(100)]] # &lt;------ SyntaxError
z = x + y
</code></pre>
<p>This is what it looks like when pasted:</p>
<pre><code>In [136]: x = [1]
     ...: y = [1 for _ in range(100)]]
     ...: z = x + y
</code></pre>
<p>Now hit enter:</p>
<pre><code>  File "&lt;ipython-input-136-20c7b020310a&gt;", line 2
    y = [1 for _ in range(100)]]
                               ^
SyntaxError: invalid syntax
</code></pre>
<p>In contrast, on the standard REPL interpreter:</p>
<pre><code>&gt;&gt;&gt; x = [1]
&gt;&gt;&gt; y = [1 for _ in range(100)]]
  File "&lt;stdin&gt;", line 1
    y = [1 for _ in range(100)]]
                               ^
SyntaxError: invalid syntax
&gt;&gt;&gt; z = x + y
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'y' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Borrowing heavily from @alfasin's answer, you can extend the <code>InteractiveConsole</code> class.</p>
<p>To keep the interactive session running, but ignore the rest of the pasted commands, you can discard the input for a short while (I've used 1 second) after an exception. This means that the rest of the pasted commands are ignored, while leaving you with the session still running.</p>
<pre><code>from code import InteractiveConsole
import sys
import time

WAIT_TIME = 1

class Shell(InteractiveConsole):
    def __init__(self):
        self.stdout = sys.stdout
        InteractiveConsole.__init__(self)
        return
    def runcode(self, code):        
        try:
            exec(code, self.locals)
        except SystemExit:
            raise
        except:
            self.showtraceback()
            t_end = time.time() + WAIT_TIME
            while time.time() &lt; t_end:
                _ = self.raw_input()  # Extra pasted commands are discarded


if __name__ == '__main__':
     sh = Shell()
     sh.interact()
</code></pre>
<p>Note that the extra commands are still printed to the terminal, but aren't actually run.</p>
</div>
<span class="comment-copy">"a list of commands to be executed in the Python interpreter" - how ? which OS ? can you provide an example ?</span>
<span class="comment-copy">@alfasin question updated.</span>
<span class="comment-copy">Sorry if I wasn't clear in my question: how do you run these "list of commands" ?  if you're saving these list of commands in a file.py and call it with "python file.py" the last command to execute will be 1/0 - in your example.</span>
<span class="comment-copy">@alfasin I paste the list of commands, from the clipboard</span>
<span class="comment-copy">I assume you're referring to "Interactive mode" ?</span>
<span class="comment-copy">Nice answer! It doesn't keep the interactive session running though, which I think is the aim here.</span>
<span class="comment-copy">I hope you don't mind I've borrowed heavily from your answer in an attempt to keep the interactive session going, but ignore subsequent pasted commands. :) Let me know if you'd prefer an edit to your answer.</span>
<span class="comment-copy">@AndrewGuy I don't think he wants to keep the interactive session - the question is around bailing out on the first error. Keeping the session is the <i>default</i> behavior which the OP wanted to get rid of.</span>
<span class="comment-copy">You may be right. Hopefully OP will chime in. I <i>thought</i> he meant that he wanted to keep the session open, but ignore the rest of the commands that were pasted in. But doesn't seem so clear after re-reading.</span>
