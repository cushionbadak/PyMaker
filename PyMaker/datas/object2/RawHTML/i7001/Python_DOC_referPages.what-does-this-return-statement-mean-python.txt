<div class="post-text" itemprop="text">
<p>I am working on a genetic algorithm, and I found a code that works, and now I am trying to understand, but I saw this return statement:</p>
<pre><code>return sum(1 for expected, actual in zip(target, guess)
  if expected == actual)
</code></pre>
<p>What does it do?</p>
<p>Here is the full code:</p>
<p>main.py:</p>
<pre><code>from population import *

while True:
    child = mutate(bestParent)
    childFitness = get_fitness(child)
    if bestFitness &gt;= childFitness:
        continue
    print(child)
    if childFitness &gt;= len(bestParent):
        break
    bestFitness = childFitness
    bestParent = child
</code></pre>
<p>population.py:</p>
<pre><code>import random

geneSet = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.,1234567890-_=+!@#$%^&amp;*():'[]\""
target = input()

def generate_parent(length):
    genes = []
    while len(genes) &lt; length:
        sampleSize = min(length - len(genes), len(geneSet))
        genes.extend(random.sample(geneSet, sampleSize))
    parent = ""
    for i in genes:
        parent += i
    return parent

def get_fitness(guess):
    return sum(1 for expected, actual in zip(target, guess)
        if expected == actual)

def mutate(parent):
    index = random.randrange(0, len(parent))
    childGenes = list(parent)
    newGene, alternate = random.sample(geneSet, 2)
    childGenes[index] = alternate \
        if newGene == childGenes[index] \
        else newGene

    child = ""
    for i in childGenes:
        child += i

    return child

def display(guess):
    timeDiff = datetime.datetime.now() - startTime
    fitness = get_fitness(guess)
    print(str(guess) + "\t" + str(fitness) + "\t" + str(timeDiff))

random.seed()
bestParent = generate_parent(len(target))
bestFitness = get_fitness(bestParent)
print(bestParent)
</code></pre>
<p>This is the full code of an working genetic algorithm. I modified some parts to make it more readable for me.</p>
<p>The return statement is in the population.py file, in the get_fitness function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's break that down:</p>
<pre><code>return sum(1 for expected, actual in zip(target, guess)
  if expected == actual)
</code></pre>
<p>could be written as:</p>
<pre><code>total = 0
for i in range(len(target)):
    if target[i] == guess[i]:
        total = total + 1
return total
</code></pre>
<p><code>zip(a, b)</code> makes a list of pairs of items from <code>a</code> and <code>b</code>, like:</p>
<pre><code>zip([1, 2, 3], ['a', 'b', 'c'])
</code></pre>
<p>yields <code>[(1, 'a'), (2, 'b'), (3, 'c')]</code>. So the <code>zip(target, guess)</code> expression returns a list of the first item from <code>target</code> and the first item of <code>guess</code>, then the second item from <code>target</code> and the second from <code>guess</code>, and so on.</p>
<p>The <code>for expected, actual in zip()</code> bit <em>unpacks</em> the pairs of values from the output of <code>zip()</code>, so the first of the pair (from <code>target</code>) goes to the variable <code>expected</code>, and the second of the pair (from <code>guess</code>) goes to the variable <code>actual</code>.</p>
<p>The <code>1 ... if expected == actual</code> bit says "emit a value of 1 for every item from <code>zip()</code> if the value in <code>expected</code> equals the value in <code>actual</code>.</p>
<p><code>sum()</code> adds up the number of <code>1</code> values from the for loop.</p>
<p>Ta-da! Now you have the count of items where the expected and actual values are the same. There are a couple of reasons to write it this way:</p>
<ol>
<li>It's very terse but expressive. People who write a lot of Python can glance at that and understand it.</li>
<li>It's potentially very fast, as the Python interpreter is handling the looping, conditionals, etc. and improvements to the Python interpreter could make the code faster without it having to understand the whole program. Basically you're telling Python "I want this thing done" instead of "here are 100 little steps to do this thing".</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I think it returns the total number of matches where actual= expected. Essentially I think it is checking how many times the algorithms model was able to correctly predict </p>
</div>
<div class="post-text" itemprop="text">
<p>It is a type of <a href="http://www.pythonforbeginners.com/basics/list-comprehensions-in-python" rel="nofollow noreferrer">List Comprehension</a> that makes use of the <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> function.</p>
<p>Basically, the code is saying:</p>
<ul>
<li>Create a list.   </li>
<li>Retrieve variables "expected" and "actual" from zip(target, guess). If they are equal, add 1 to the list. </li>
<li>Repeat for next values from zip(target, guess). </li>
<li>Sum all the 1's. </li>
<li>Return this summation.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>There are several things going on:</p>
<pre><code>return sum(...)
</code></pre>
<p>this means that you are returning a number.</p>
<p>The inner part of the <code>sum</code> is a <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer"><code>generator expression</code></a> which creates and runs an implicit loop.</p>
<p>In this case, <code>1 for expected, actual in zip(target, guess) if expected == actual</code> creates a sequence of <code>1</code> values, with one entry created each time the guard condition is true (<code>expected == actual</code>). </p>
<p>So this line is effectively creating code like: <code>sum(1, 1, 1, 1, ...)</code></p>
<p>Within the generator expression, you have a <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> call. The zip expression will take the two (or more!) sequences, and convert them into a single sequence with tuples of two (or more!) values. That is, <code>zip(['a', 'b', 'c'], [1, 2, 3])</code> will produce as its output a sequence like <code>[('a', 1), ('b', 2), ('c', 3)]</code>.</p>
<p>So if your <code>expected</code> is <code>[1, 2, 3]</code> and your <code>actual</code> is <code>[1, 1, 3]</code>, you will get a zip result like:</p>
<pre><code>expected = [1, 2, 3]
actual = [1, 1, 3]
zip(expected, actual)   # [(1, 1), (2, 1), (3, 3)]
</code></pre>
<p>The generator expression contains a <code>for</code> which uses what was once called "tuple unpacking" to assign multiple targets in its <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer"><code>target_list</code></a> from a single aggregate (tuple) value.</p>
<p>So when the zip expression produces <code>(1, 1)</code> the <code>for expected, actual</code> unpacks that into <code>expected=1, actual=1</code>.</p>
<p>Thus, the <code>zip</code> takes two equal-length sequences and pairs their corresponding elements: a[0] with b[0], a[1] with b[1], etc. The <code>for</code> generator expression assigns those elements into variables called <code>expected</code> and <code>actual</code>. The <code>for...if</code> generator conditional part compares the <code>expected == actual</code> values, and either generates a value or does not generate a value. Thus, the length of the resulting sequence is guaranteed to be less than or equal to the length of the input sequences, but you don't know how long it will be. The <em>expression</em> part of the generator is simply <code>1</code>. So you have a variable-length sequence of 1's. It's <strong>not</strong> 1 or 0. It's 1 or no-entry. Add up all the 1's, and that's the result.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/q/34835951/2301450">What does “list comprehension” mean? How does it work and how can I use it?</a></span>
<span class="comment-copy">It's called list comprehension. It would help if you posted more code</span>
<span class="comment-copy">@vaultah That's a <i>generator expression</i> not a list comprehension. Nevertheless, the link you provided does offer an explanation for comprehensions in general, so I'll vote to close a duplicate as well.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/34835951/what-does-list-comprehension-mean-how-does-it-work-and-how-can-i-use-it">What does "list comprehension" mean? How does it work and how can I use it?</a></span>
<span class="comment-copy">@ChristianDean: that is the canonical duplicate for questions asking for explanation of both comprehensions and generator expressions. I didn't vote to close it as dupe, though.</span>
<span class="comment-copy">Thank you so much for this. I now understand. It was exacly what I needed. Thank you again</span>
<span class="comment-copy">I'm happy to help!</span>
<span class="comment-copy">Yes, that what it returns, but what are all of these? I don't understand the syntax.</span>
<span class="comment-copy">You don't understand what the syntax is doing??Just trying to understand what you want to know</span>
