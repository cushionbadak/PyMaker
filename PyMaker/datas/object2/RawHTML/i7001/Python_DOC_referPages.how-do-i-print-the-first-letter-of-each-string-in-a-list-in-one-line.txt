<div class="post-text" itemprop="text">
<p>For one of my tasks, the user inputs multiple strings until they enter a blank line and then it prints it out in one line, this is how I did it. </p>
<pre><code>words = []
word = input("Word: ")

while word:
  words.append(word)
  word = input("Word: ")

words = (' ').join(words)
print(words)
</code></pre>
<p>However, there's another part where it takes the first letter of each string in the list and prints it out in capital letters in one line. I cannot figure out how to print this on one line. This is my code:</p>
<pre><code>words_split = words.split() 
for word in words_split:
  i = word[0]
  print(i.upper())
</code></pre>
<p>e.g. If I entered <code>ace, bravo, charlie</code>: it would print out</p>
<p>A</p>
<p>C</p>
<p>E</p>
<p>instead of </p>
<p>ACE</p>
<p>Can someone assist me thank you (:</p>
</div>
<div class="post-text" itemprop="text">
<p>Lots of possibilities, but this is how I would do it:</p>
<pre><code>words_split = words.split() 
print(''.join(word[0].upper() for word in words_split))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Updated my answer since @Smarx gave an identical one.</p>
<p>Considering:</p>
<pre><code>words = "ABC BCA CAB"
</code></pre>
<p>This is how I'd put it:    </p>
<pre><code>first_letter_upper = [word[0].upper() for word in words.split()]
joined_words = ''.join(first_letter_upper)
print(joined_words)
</code></pre>
<p>Prints</p>
<pre><code>ABC
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>your problem is that the print function going one line down after each print, to solve it you can use the end parameter:</p>
<pre><code>print("a",end = '')
print("b",end = '')
</code></pre>
<p>will print:</p>
<blockquote>
<p>ab</p>
</blockquote>
<p>instead of:</p>
<blockquote>
<p>a</p>
<p>b</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Create an empty string outside of the for loop and add each letter to it inside the loop. Once the loop ends, print the string.</p>
<pre><code>words_split = words.split()

output = ""

for word in words_split:
    output += word[0].upper()

print(output)
</code></pre>
<p>An alternate method is to change the terminating character of the print to nothing:</p>
<pre><code>words_split = words.split()

for word in words_split:
    i = word[0]
    print(i.upper(), end='')
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#print</a></span>
<span class="comment-copy">Shouldn't the output be ABC in your example?</span>
<span class="comment-copy">You're missing a close paren on the <code>joined_words = ...</code> line. Also, no need to construct a list. (You can drop the square brackets.)</span>
<span class="comment-copy">@smarx A list get's constructed anyway, so passing a list is actually faster and no less memory efficient.</span>
<span class="comment-copy">@smarx see <a href="https://stackoverflow.com/a/9061024/5014455">this answer</a> and <a href="https://stackoverflow.com/questions/37782066/list-vs-generator-comprehension-speed-with-join-function">this question</a></span>
<span class="comment-copy">@smarx saw you posted something similar/identical. Thanks for comments. I gave you +1</span>
<span class="comment-copy">@juanpa.arrivillaga It seems to be correct that <code>str.join</code> needs a <code>list</code>, but I believe that in Python 3, it's neither faster nor more space efficient to construct the list yourself.</span>
<span class="comment-copy">So unindenting the print(output) makes it so it only prints the last result for the for loop?</span>
<span class="comment-copy">It doesn't print the last result, but rather the final result of all the characters concatenated together.</span>
<span class="comment-copy">"Create an empty string outside of the for loop and add each letter to it inside the loop." Don't do that. It's very inefficient. Sometimes on later versions of Python the interpreter optimizes this, but many times it becomes O(n^2)</span>
