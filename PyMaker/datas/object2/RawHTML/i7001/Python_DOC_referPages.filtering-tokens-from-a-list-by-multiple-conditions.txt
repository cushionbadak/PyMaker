<div class="post-text" itemprop="text">
<p>I want to filer some tokens from a list by the following conditions.
1) token length greater than 5
2) the frequency of appearance (in the original text) more than 100</p>
<p>I used the following code </p>
<pre><code>#token_list is a list object containing tokenized words from raw text

from collections import Counter
c = Counter(token_list)
selected_tokens = [word for word in token_list if len(word) &gt; 5 and c.item[2] &gt; 100]

selected_tokens
</code></pre>
<p>But can't seem to get it. I believe the error came from 'c.item[2]' but don't quite understand the mechanics behind the 'Counter()' command.</p>
<p>It will be really appreciated if someone could enlighten me on this.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Did someone say <code>filter</code>?</p>
<pre><code>selected_tokens = list(filter(lambda x: len(x) &gt; 5 and c[x] &gt; 100, token_list))
</code></pre>
<p>Also, you access the counter count using <code>c[...]</code>. Also, you might want to be wary of case issues (the same word present in different case).</p>
<hr/>
<p>If you want speed, use a list comprehension instead:</p>
<pre><code>selected_tokens = [x for x in token_list if len(x) &gt; 5 and c[x] &gt; 100]
</code></pre>
<p>If you are looking to obtain words satisfying your condition without unwanted duplicates, work on a <code>set</code> instead of a set:</p>
<pre><code>token_set = set(token_list)
selected_tokens = [x for x in token_set if if len(x) &gt; 5 and c[x] &gt; 100]
</code></pre>
<p>Beware, order is lost. If you want order without duplicates, use an <code>OrderedDict</code> (python &lt; 3.6 or <code>dict</code> (python &gt;= 3.6). </p>
<pre><code>dict_ = OrderedDict()
for t in token_list:
    dict_[t] = None

selected_tokens = [x for x in dict_ if len(x) &gt; 5 and c[x] &gt; 100]
</code></pre>
<p>If a <code>dict</code> doesn't do it, you can look at the <a href="http://code.activestate.com/recipes/576694/" rel="nofollow noreferrer"><code>OrderedSet</code></a> recipe and implement something to the same effect:</p>
<pre><code>token_set = OrderedSet(token_list)
selected_tokens = [x for x in token_set if ...] # as usual
</code></pre>
</div>
<span class="comment-copy">Literally the first sentence in <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">the <code>Counter</code> documentation</a> tells you how to work with them: "A Counter is a dict subclass". If you're going to use a class or function, you'd do well to read its docs first.</span>
<span class="comment-copy">@Rawing Ah, thank you good sir.</span>
<span class="comment-copy">Because from my previous attempts, Counter() returns output of this form '[('token1', freq1), ('token2, freq2)]'.  Hence, I used Counter().item[2] to access 'frequency.'</span>
<span class="comment-copy">@ChrisT. That's only the repr playing tricks on you. You still access it as a normal dict.</span>
<span class="comment-copy">@ChrisT. Also, did you mean to filter on <code>set(token_list)</code>? This way, you obtain duplicates</span>
<span class="comment-copy">oh stop, why you need to use here slow filter instead of generator?</span>
