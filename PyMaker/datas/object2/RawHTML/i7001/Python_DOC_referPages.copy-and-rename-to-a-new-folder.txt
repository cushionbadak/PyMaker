<div class="post-text" itemprop="text">
<p>I have written some simple and easy code to rename a lot of files. 
The source Folder is path (the files are in the main Folder and a lot of sub-Folders.
The target Folder is newPath (here I want to assemble all the renamed files together. </p>
<p>The code works, but I want to change / update it.  </p>
<p>I dont now how to include the Folder name in the shutil.copy </p>
<pre><code>"changed" + str(count) + ".csv"
</code></pre>
<p>How can I get the Name of the Folder, where the file is in, includes in the copied name?</p>
<pre><code>import os
import shutil

def main():
    path = "C:/code/convert/renamefiles/source"
    newPath = "C:/code/convert/renamefiles/target"
    count = 1

    for root, dirs, files in os.walk(path):
        for i in files:
            if i.endswith('lb_panorama.csv'):
                shutil.copy(os.path.join(root, i), os.path.join(newPath, "changed" + str(count) + ".csv"))
                print i
                count += 1

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I used <code>pathlib</code> to iterate through directories because it's much simpler than the method you were using. I do not check if the source and destination paths exist, so an exception will be thrown if they don't. When files are copied, they are renamed to their source parent folder's name, which is retrieved with <code>pathlib.Path.parent.name</code>.</p>
<p>The top bit of code is for the logger. It logs to a file named <code>CopyErrors.log</code> and is created in the same directory as the Python script. To log errors, I just catch any exceptions that <code>shutil.copy</code> throws.</p>
<pre class="lang-python prettyprint-override"><code>import pathlib
import shutil
import logging

def main(src, dest):
    logger = logging.getLogger("CopyFiles")
    logger.setLevel(logging.WARNING)
    handler = logging.FileHandler(filename = "CopyErrors.log",
                                  encoding = "utf-8",
                                  mode = "w")
    handler.setFormatter(logging.Formatter(
        "%(asctime)s - [%(levelname)s] %(name)s: %(message)s"))
    logger.addHandler(handler)

    pathSrc = pathlib.Path(src).glob("**/*.csv")

    for file in pathSrc:
        try:
            shutil.copy(str(file), f"{dest}/{file.parent.name}.csv")
        except Exception as e:
            logger.warning(f"{file} could not be copied.\n"
                           f"{type(e).__name__}: {e}")

if __name__ == '__main__':
    main("Z:/Geoportal/MoMa/MoMa1", "Z:/Geoportal/MoMa/Moma1_new")
</code></pre>
</div>
<span class="comment-copy">sounds like you want us to write code for you (not to mention this code won't be very useful for other users). You can do that yourself: use <code>shutil.copyfile</code> to copy instead of renaming, and use <code>time</code> or <code>datetime</code> module to generate a timestamp... for the rest, figure it out!</span>
<span class="comment-copy">oh sorry, I just want some tips for the things I want to change. Or some direction for the different topics. I dont want a time or datetime. I want the name of the source folder in the renamed/copied filename.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/posts/45764616/edit">edit</a> your question with a closer attempt then, and ask a real question if you have an issue.</span>
<span class="comment-copy">ok, I just did the update</span>
<span class="comment-copy">shutil.copy(str(file), f"{dest}/{file.parent.name}.csv") there is a syntax error on the F, would should I do with it?</span>
<span class="comment-copy">@BjorntenBroeke That's <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-string formatting</a>, which is only available on Python 3.6 and later. If you're on an earlier version of Python you'll need to use a different formatting method, for example <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a>.</span>
<span class="comment-copy">this answer demonstrates a good knowledge of python packages. The question is not very clear but the answer shows a lot of useful stuff. I guess there's worse Q&amp;As out there.</span>
