<div class="post-text" itemprop="text">
<p><strong>Problem:</strong> When exceptions are raised in slots, invoked by signals, they do not seem to propagate as usual through <em>Pythons</em> call stack. In the example code below invoking:</p>
<ul>
<li><code>on_raise_without_signal()</code>: Will handle the exception as expected.</li>
<li><code>on_raise_with_signal()</code>: Will print the exception and then unexpectedly print the success message from the <code>else</code> block.</li>
</ul>
<p><strong>Question:</strong> What is the reason behind the exception being handled surprisingly when raised in a slot? Is it some implementation detail/limitation of the <em>PySide</em> Qt wrapping of signals/slots? Is there something to read about in the docs?</p>
<p><strong>PS:</strong> I initially came across that topic when I got surprising results upon using <em>try/except/else/finally</em> when implementing a <code>QAbstractTableModels</code> virtual methods <code>insertRows()</code> and <code>removeRows()</code>.</p>
<hr/>
<pre class="lang-python prettyprint-override"><code># -*- coding: utf-8 -*-
"""Testing exception handling in PySide slots."""
from __future__ import unicode_literals, print_function, division

import logging
import sys

from PySide import QtCore
from PySide import QtGui


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class ExceptionTestWidget(QtGui.QWidget):

    raise_exception = QtCore.Signal()

    def __init__(self, *args, **kwargs):
        super(ExceptionTestWidget, self).__init__(*args, **kwargs)

        self.raise_exception.connect(self.slot_raise_exception)

        layout = QtGui.QVBoxLayout()
        self.setLayout(layout)

        # button to invoke handler that handles raised exception as expected
        btn_raise_without_signal = QtGui.QPushButton("Raise without signal")
        btn_raise_without_signal.clicked.connect(self.on_raise_without_signal)
        layout.addWidget(btn_raise_without_signal)

        # button to invoke handler that handles raised exception via signal unexpectedly
        btn_raise_with_signal = QtGui.QPushButton("Raise with signal")
        btn_raise_with_signal.clicked.connect(self.on_raise_with_signal)
        layout.addWidget(btn_raise_with_signal)

    def slot_raise_exception(self):
        raise ValueError("ValueError on purpose")

    def on_raise_without_signal(self):
        """Call function that raises exception directly."""
        try:
            self.slot_raise_exception()
        except ValueError as exception_instance:
            logger.error("{}".format(exception_instance))
        else:
            logger.info("on_raise_without_signal() executed successfully")

    def on_raise_with_signal(self):
        """Call slot that raises exception via signal."""
        try:
            self.raise_exception.emit()
        except ValueError as exception_instance:
            logger.error("{}".format(exception_instance))
        else:
            logger.info("on_raise_with_signal() executed successfully")


if (__name__ == "__main__"):
    application = QtGui.QApplication(sys.argv)

    widget = ExceptionTestWidget()
    widget.show()

    sys.exit(application.exec_())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you've already noted in your question, the real issue here is the treatment of unhandled exceptions raised in python code executed from C++. So this is not only about signals: it also affects reimplemented virtual methods as well.</p>
<p>In PySide, PyQt4, and all PyQt5 versions up to 5.5, the default behaviour is to automatically catch the error on the C++ side and dump a traceback to stderr. Normally, a python script would also automatically terminate after this. But that is not what happens here. Instead, the PySide/PyQt script just carries on regardless, and many people quite rightly regard this as a bug (or at least a misfeature). In PyQt-5.5, this behaviour has now been changed so that <code>qFatal()</code> is also called on the C++ side, and the program will abort like a normal python script would. (I don't know what the current situation is with PySide2, though).</p>
<p>So - what should be done about all this? The best solution for all versions of PySide and PyQt is to install an <a href="https://docs.python.org/3/library/sys.html?#sys.excepthook" rel="nofollow noreferrer">exception hook</a> - because it will always take precedence over the default behaviour (whatever that may be). Any unhandled exception raised by a signal, virtual method or other python code will firstly invoke <code>sys.excepthook</code>, allowing you to fully customise the behaviour in whatever way you like.</p>
<p>In your example script, this could simply mean adding something like this:</p>
<pre><code>def excepthook(cls, exception, traceback):
    print('calling excepthook...')
    logger.error("{}".format(exception))

sys.excepthook = excepthook
</code></pre>
<p>and now the exception raised by <code>on_raise_with_signal</code> can be handled in the same way as all other unhandled exceptions.</p>
<p>Of course, this does imply that best practice for most PySide/PyQt applications is to use largely centralised exception handling. This often includes showing some kind of crash-dialog where the user can report unexpected errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://doc.qt.io/qt-5/exceptionsafety.html" rel="nofollow noreferrer">Qt5 docs</a> you need to handle exceptions within the slot being invoked.</p>
<blockquote>
<p>Throwing an exception from a slot invoked by Qt's signal-slot connection mechanism is considered undefined behaviour, unless it is handled within the slot</p>
</blockquote>
<pre><code>State state;
StateListener stateListener;

// OK; the exception is handled before it leaves the slot.
QObject::connect(&amp;state, SIGNAL(stateChanged()), &amp;stateListener, SLOT(throwHandledException()));
// Undefined behaviour; upon invocation of the slot, the exception will be propagated to the
// point of emission, unwinding the stack of the Qt code (which is not guaranteed to be exception safe).
QObject::connect(&amp;state, SIGNAL(stateChanged()), &amp;stateListener, SLOT(throwUnhandledException()));
</code></pre>
<blockquote>
<p>If the slot was invoked directly, like a regular function call,
  exceptions may be used. This is because the connection mechanism is
  bypassed when invoking slots directly</p>
</blockquote>
<p>In the first case you call <code>slot_raise_exception()</code> directly, so this is fine. </p>
<p>In the second case you are invoking it via the <code>raise_exception</code> signal, so the exception will only propagate up to the point where <code>slot_raise_exception()</code> is called. You need to place the <code>try/except/else</code> inside <code>slot_raise_exception()</code> for the exception to be handled correctly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for answering guys. I found <em>ekhumoros</em> answer particularly useful to understand where the exceptions are handled and because of the idea to utilize <code>sys.excepthook</code>.</p>
<p>I mocked up a quick solution via context manager to temporarily extend the current <code>sys.excepthook</code> to record any exception in the realm of <em>"C++ calling Python"</em> (as it seems to happen when slots are invoked by signals or virtual methods) and possibly re-raise upon exiting the context to achieve expected control flow in <em>try/except/else/finally</em> blocks.</p>
<p>The context manager allows <code>on_raise_with_signal</code> to maintain the same control flow as <code>on_raise_without_signal</code> with the surrounding <em>try/except/else/finally</em> block.</p>
<hr/>
<pre class="lang-python prettyprint-override"><code># -*- coding: utf-8 -*-
"""Testing exception handling in PySide slots."""
from __future__ import unicode_literals, print_function, division

import logging
import sys
from functools import wraps

from PySide import QtCore
from PySide import QtGui


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class ExceptionHook(object):

    def extend_exception_hook(self, exception_hook):
        """Decorate sys.excepthook to store a record on the context manager
        instance that might be used upon leaving the context.
        """

        @wraps(exception_hook)
        def wrapped_exception_hook(exc_type, exc_val, exc_tb):
            self.exc_val = exc_val
            return exception_hook(exc_type, exc_val, exc_tb)

        return wrapped_exception_hook

    def __enter__(self):
        """Temporary extend current exception hook."""
        self.current_exception_hook = sys.excepthook
        sys.excepthook = self.extend_exception_hook(sys.excepthook)

        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Reset current exception hook and re-raise in Python call stack after
        we have left the realm of `C++ calling Python`.
        """
        sys.excepthook = self.current_exception_hook

        try:
            exception_type = type(self.exc_val)
        except AttributeError:
            pass
        else:
            msg = "{}".format(self.exc_val)
            raise exception_type(msg)


class ExceptionTestWidget(QtGui.QWidget):

    raise_exception = QtCore.Signal()

    def __init__(self, *args, **kwargs):
        super(ExceptionTestWidget, self).__init__(*args, **kwargs)

        self.raise_exception.connect(self.slot_raise_exception)

        layout = QtGui.QVBoxLayout()
        self.setLayout(layout)

        # button to invoke handler that handles raised exception as expected
        btn_raise_without_signal = QtGui.QPushButton("Raise without signal")
        btn_raise_without_signal.clicked.connect(self.on_raise_without_signal)
        layout.addWidget(btn_raise_without_signal)

        # button to invoke handler that handles raised exception via signal unexpectedly
        btn_raise_with_signal = QtGui.QPushButton("Raise with signal")
        btn_raise_with_signal.clicked.connect(self.on_raise_with_signal)
        layout.addWidget(btn_raise_with_signal)

    def slot_raise_exception(self):
        raise ValueError("ValueError on purpose")

    def on_raise_without_signal(self):
        """Call function that raises exception directly."""
        try:
            self.slot_raise_exception()
        except ValueError as exception_instance:
            logger.error("{}".format(exception_instance))
        else:
            logger.info("on_raise_without_signal() executed successfully")

    def on_raise_with_signal(self):
        """Call slot that raises exception via signal."""
        try:
            with ExceptionHook() as exception_hook:
                self.raise_exception.emit()
        except ValueError as exception_instance:
            logger.error("{}".format(exception_instance))
        else:
            logger.info("on_raise_with_signal() executed successfully")


if (__name__ == "__main__"):
    application = QtGui.QApplication(sys.argv)

    widget = ExceptionTestWidget()
    widget.show()

    sys.exit(application.exec_())
</code></pre>
</div>
