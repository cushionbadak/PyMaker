<div class="post-text" itemprop="text">
<p>I just finished a Python course and I'm working on my very first project, a tool for practising Spanish verbs and their conjugations. The tool is working, but now I want to improve it. For example, it's currently difficult to handle the data (e.g. add past tense to a verb + complicated random quiz function).</p>
<p>I however stumbled upon a couple of problems, one of them being: 
<b>how can I add a new dictionary and give that dictionary the name from raw input?</b> I thought that shouldn't be hard, but haven't found a solution after a lot of searching.</p>
<p>I have two files: one with the code and a .txt file that contains all verbs as dictionaries on seperate lines. Below you see my function for adding a new verb and appending it to the .txt file.</p>
<p>Example of a line in my .txt file:</p>
<pre><code>to talk = {'present': ['hablo', 'hablas', ... ]}
</code></pre>
<p><b>Current code:</b></p>
<pre><code>def add_verb():
    verb = {}
    name = (raw_input("Verb in Dutch: "))
    tense = (raw_input("Verb tense: ")) 

    conjugations = []
    conjugations.append(raw_input("Yo: "))
    conjugations.append(raw_input("Tú: "))

    verb_dict[tense] = conjugations

    with open("verbs.txt", "a") as abc:
        abc.write("%s = {'%s': %s}\n" % (name, tense, conjugations))
</code></pre>
<p>Basically, what I want is this:</p>
<pre><code>abc.write(dictionary)
</code></pre>
<p>Thus, I want the dictionary to be written into the file as it is, but with the name of the dictionary given by raw input.</p>
<p>I'm currently also thinking of using a Verb class, because I think that would make the tool even better, but then I stumbled upon the exact same problem (how do I give a new class instance a name that's given by raw input?).</p>
<p>P.S. If you see other things that I should improve, please don't hesitate to mention this.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the other context in your question, it sounds like you might actually benefit from a nested dictionary structure more similar to this:</p>
<pre><code>import pprint

spanish_dictionary = {"hablar": {"present": ["hablo", "hablas", "hablamos", ...],
                                 "past": ["i'm", "out", "of", "my", "depth"]},
                      "comer": {"present": ["como", ...] #you get the idea
                                }
                     }

def add_verb():
    spanish_dictionary["tener"] = {"present": ["tengo", ...]}

add_verb()

pprint.pprint(spanish_dictionary)
</code></pre>
<p>Note that it will run in Python2 if you replace the ellipses with something appropriate, and it actually already already runs in Python3, giving the output:</p>
<pre><code>{'comer': {'present': ['como', Ellipsis]},
 'hablar': {'past': ["i'm", 'out', 'of', 'my', 'depth'],
            'present': ['hablo', 'hablas', 'hablamos', Ellipsis]},
 'tener': {'present': ['tengo', Ellipsis]}}
</code></pre>
<p>Please forgive my very limited Spanish, hopefully this is enough to demonstrate the structure. As you can see, it's generally a good idea not to have dictionaries with names you want to change, but instead to just put these in a bigger dictionary, so rather than having to do anything difficult and dangerous with <code>exec</code>, you can add dictionaries by adding values to the larger dictionary. If you have a name given by <code>raw_input</code>, say, like so:</p>
<pre><code>new_verb_name = raw_input()
new_verb_data = some_processing(raw_input())
spanish_dictionary[new_verb_name] = new_verb_data
</code></pre>
<p>Regarding your idea to have a Verb class - I think this is probably a very good idea, but I have a tip. A Verb will probably be immutable, as the conjugations of a verb don't change, so <code>collections.namedtuple</code> seems suited to this task. <code>namedtuple</code> allows you to basically define a class without the hassle of defining it if all it needs to do is store values. Note that <code>namedtuple</code> is actually a factory function that returns a class. You might use it like so:</p>
<pre><code>from collections import namedtuple

Verb = namedtuple("Verb", "past present")
Conjugation = namedtuple("Conjugation", "yo tu")

spanish_dict = {"hablar": Verb(present=Conjugation(yo="hablo", tu="hablas"),
                               past=Conjugation(yo="yo hablo in past :p", tu=...))
               }

print(spanish_dict)
print(spanish_dict["hablar"].present.tu)
</code></pre>
<p>This has the output:</p>
<pre><code>{'hablar': Verb(past=Conjugation(yo='yo hablo in past :p', tu=Ellipsis), present=Conjugation(yo='hablo', tu='hablas'))}
hablas
</code></pre>
<p>As you can see, it's pretty expressive to be able to use <code>.present.tu</code> to access the attributes of the verb. This is just an example though - you'll get to do the actual job of all the Spanish : )</p>
<p>It can be fun to see what the line</p>
<pre><code>Verb = namedtuple("Verb", "past present")
</code></pre>
<p>would be equivalent to in a full class definition. You can view it by running</p>
<pre><code>Verb = namedtuple("Verb", "past present", verbose=True)
</code></pre>
<p>Bewarned, this results in 50 odd lines of code. To be honest, whoever implemented <code>namedtuple</code> is probably just showing off a bit ;). But this does illustrate how powerful the <code>namedtuple</code> factory is.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>What you are trying to do is really not recommended, because it mixes data (your user input) and code, which is usually the sign of some design flaw.</strong></p>
<p>But, for the record, you can achieve what you want using <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a>:</p>
<pre><code>&gt;&gt;&gt; name = input("What is your name?\n")
What is your name?
test

&gt;&gt;&gt; exec(f"{name} = dict()")  # Python 3.6 and above
&gt;&gt;&gt; exec("{0} = dict()".format(name))  # Python 2.7 &amp; 3.5
&gt;&gt;&gt; print(test)
{}
</code></pre>
<h1>Warning</h1>
<p><strong><code>exec</code> simply executes the code it gets as an argument. As reminded by @Błażej Michalik in the comments, this is quite dangerous, especially combined with user's input.</strong></p>
<p><strong>With my example, if the user decides to enter actual Python code instead of their name, it will get executed so it can cause great damages!!!</strong></p>
<p><br/></p>
<h1>Why is it so bad to mix data and code and where to go from here?</h1>
<p>I mentioned that doing what you're trying to do is a common sign of design flaw. The simple reason is that your code is not exposed to the outside and should not depend on actual data. Applied to your example: why should the name of a dictionary, which is an object living inside of your program only, depend on anything from "the outside world"?</p>
<p>So, here are some hints on how to proceed:</p>
<ul>
<li>store all your data in the JSON format (or YAML, TOML, XML, etc.). You're not far from that already, given the way you store your data in the text file. It'll just make it more standard.</li>
<li>if you use user input, store that input in a variable, which has any name you want. For instance, let's say you want the user to create some collection of words, just create a class <code>WordsCollection</code>, which will have a <code>name</code> attribute, and create instances of that class with any variable name you want.</li>
<li>if you start learning Python, I would rather choose working with Python 3 :)</li>
</ul>
</div>
<span class="comment-copy">Do not name variables <code>dict</code>, <code>list</code> or <code>type</code> they hide the python's builtin types and methods. It sounds like you just need a nested dictionary.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4010840/generating-variable-names-on-fly-in-python">generating variable names on fly in python</a></span>
<span class="comment-copy">Yes, I changed the names for this post (in my original code, they are in Dutch)</span>
<span class="comment-copy">Even if they are in Dutch, "list" isn't very indicative, and it would probably be a good idea to name it something corresponding to what it actually represents, which will make your code a lot clearer. Unless I've misunderstood and in your translation to English you've also changed the semantics of the names. Also, hoi hoi :)</span>
<span class="comment-copy">Hoi @IzaakvanDongen! Thanks, I was afraid it would complicate it instead of making it easier, but I see why it didn't. I edited the post!</span>
<span class="comment-copy">It took me a little while to implement (since I'm still new to coding), but the nested dictionary made the entire tool/code so much better and easier! I'm going to try using the classes next, have to read into this more, but this seems even better (especially for the 'random quiz' function in the tool). Dankjewel/muchas gracias! ;) P.S. If you ever whish ito learn Spanish, feel free to use the tool when it's finished, haha!</span>
<span class="comment-copy">It is not recommended, because that <code>exec()</code> is a surefire way to introduce a code injection vulnerability to your app.</span>
<span class="comment-copy">Well, that's why I mentioned that not being recommended :) I'll add more warnings to my answer!</span>
<span class="comment-copy">Are you sure that's what they want to do? To me it looks like all they want is to write it to a file, not introduce it to the global namespace. Also, considering this is in 'Python 2.7', I wouldn't use an f-string.</span>
<span class="comment-copy">@IzaakvanDongen You're right about Python 2.7, I'll edit my answer. And about what the OP wants to do, I'm also unsure about what they try to achieve but if they get a dictionary named after the user input, it's easy to dump it to a file using <code>str()</code>.</span>
<span class="comment-copy">@filaton Thank you for your reply! I see why it's not recommended, then I'll search for a way around it, starting with looking into your suggestions on how to proceed! Thanks</span>
