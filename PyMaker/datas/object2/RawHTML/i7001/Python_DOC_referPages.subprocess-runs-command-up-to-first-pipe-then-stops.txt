<div class="post-text" itemprop="text">
<p>If i run this command on its own:</p>
<pre><code>nmap -PN -p 22 --open -oG - 10.15.86.0/24 | awk '$NF~/ssh/{print$2}' &gt; sshopen.txt
</code></pre>
<p>I receive my desired output of:</p>
<pre><code>10.15.86.4
10.15.86.5
10.15.86.9
10.15.86.11
etc...
</code></pre>
<p>All the hosts on my network with an open ssh port.
However, when i try to run the same command within a Python subprocess, it seems to skip the awk. Python below:</p>
<pre><code>import subprocess

subnet = raw_input("Enter subnet to scan: ")
command1 = "nmap -PN -p 22 --open -oG - 10.15.86.0/24 | awk '$NF~/ssh /{print$2}' &gt; sshopen.txt".split()
#command = ["nmap", "-PN", "-p", "22", "--open", "-oG", "-", subnet, "|", "awk", "'$NF~/ssh/{print $2}'", "&gt;", "sshopen.txt"]
nmap = subprocess.Popen(command1, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
nmap_info, out = nmap.communicate()  
print nmap_info
</code></pre>
<p>You'll notice the commented 'command', as i've tried as 'command' and 'command1'. Both return output of:</p>
<pre><code>Host: 10.15.86.4 () Status: Up
Host: 10.15.86.4 () Ports: 22/open/tcp//ssh///
Host: 10.15.86.5 () Status: Up
Host: 10.15.86.5 () Ports: 22/open/tcp//ssh///
etc...
</code></pre>
<p>It outputs as though there is no pipe awk (nmap -PN -p 22 --open -oG - 10.15.86.0/24) rather than (nmap -PN -p 22 --open -oG - 10.15.86.0/24 | awk '$NF~/ssh/{print$2}' &gt; sshopen.txt).
Why is it not applying the awk within the script?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>p1 = Popen(["nmap", "-PN", "-p", "22", "--open", "-oG", "-", subnet], stdout=PIPE)
p2 = Popen(["awk", "$NF~/ssh/{print$2}"], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()
output = p2.communicate()[0]
</code></pre>
<p>or</p>
<pre><code>check_output(command, shell=True)
</code></pre>
<p>This is from python's official <a href="https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline" rel="nofollow noreferrer">subprocess doc</a>.</p>
<p>There are some <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">security considerations</a> with <code>shell=True</code> though.</p>
<blockquote>
<p>Unlike some other popen functions, this implementation will never implicitly call a system shell. This means that all characters, including shell metacharacters, can safely be passed to child processes. If the shell is invoked explicitly, via shell=True, it is the applicationâ€™s responsibility to ensure that all whitespace and metacharacters are quoted appropriately to avoid shell injection vulnerabilities.</p>
</blockquote>
<hr/>
<ol>
<li><a href="https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline</a></li>
<li><a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#security-considerations</a></li>
</ol>
</div>
<span class="comment-copy">You're trying to stuff two separate commands (<code>nmap</code> and <code>awk</code>) into one <code>Popen()</code> call, and that's not how it works.  See @delta's answer below.</span>
<span class="comment-copy">Ahh, okay. I thought you could treat a Popen() as one giant one liner, as long as it correctly executed on it's own as bash. Makes sense. Thanks!</span>
<span class="comment-copy">This worked, thank you.</span>
