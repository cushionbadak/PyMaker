<div class="post-text" itemprop="text">
<p>I hope this question is sufficiently question-worthy and that I haven't missed the point. I understand that there are likely multiple answers - I will mark the best one I get correct, but if this is not an OK question to ask then please say and I will delete as appropriate.</p>
<p>If I am using python scripts where there's lots of (more than one) random numbers required, e.g.</p>
<pre><code>from random import randrange

number1 = randrange(10)
number2 = randrange(10)
number3 = randrange(10)

print number1, number2, number3
</code></pre>
<p>...then is randrange the best way to do it? Specifically, how random actually is it? I feel like I notice that it has a sort of... bias?</p>
<p>Like, repeatedly seems to get the same values.</p>
<p>I might be imagining it.</p>
<p>But obviously I know computers don't do random well (at all), and I was wondering how this module is even seeded or whatever...</p>
<p>Is there a better way to generate my random numbers? Like a module that's "more random" or a way to give it a "more random" seed?</p>
</div>
<div class="post-text" itemprop="text">
<p>Better to use <code>SystemRandom</code> for better unpredictability. <code>randrange</code> is a pseudorandom number generator which uses <a href="https://en.wikipedia.org/wiki/Mersenne_Twister" rel="nofollow noreferrer">Mersenne Twister</a>.</p>
<pre><code>from random import SystemRandom

srand = SystemRandom()

num1 = srand.choice(range(10))
num2 = srand.choice(range(10))
num3 = srand.choice(range(10))

print num1, num2, num3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is heavily dependent on what degree of randomness you're looking for. Python provides <a href="https://docs.python.org/3/library/os.html#os.urandom" rel="nofollow noreferrer">os.urandom</a> with the intent of cryptographic use; but that reads from /dev/urandom, not /dev/random, so it might not be random enough for some extreme cases (<a href="https://unix.stackexchange.com/questions/324209/when-to-use-dev-random-vs-dev-urandom">discussion on unix &amp; linux stack exchange</a>). The <a href="https://docs.python.org/3/library/secrets.html#module-secrets" rel="nofollow noreferrer">secrets</a> module was developed for a clearer choice, while the <a href="https://docs.python.org/3/library/random.html#module-random" rel="nofollow noreferrer">random</a> module is clearly pseudo-random. That pseudo-randomness is usually enough, provided the seed is not repeated (doing that is helpful for things like repeatable tests or regenerating identical procedurally generated games, which is why we have getstate and setstate). </p>
<p>In general, our ability to find patterns in randomness far exceeds our ability to recognize randomness. </p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know much about the differences of random or pseudo-random but if you run the same randrange command for 10 million times you can see that the percentages of repeats are very close. So I don't think you can spot any non-random behavior just by printing the generated numbers and looking at them (not in this case at least).</p>
<pre><code>from random import randrange
number_of_repeats = [0,0,0,0,0,0,0,0,0,0]
percentage = {}
loop_count = 10000000
for _ in range(loop_count):
    number_of_repeats[randrange(10)]+=1
for num,i in enumerate(number_of_repeats):
    percentage[num] = (i/loop_count)*100
print(percentage)
</code></pre>
</div>
<span class="comment-copy">Repeatedly getting the same values is inherent to randomness. If you never got the same values, <i>that</i> would be bias. If you roll a six sided die a thousand times and never get two sixes in a row, it's rigged.</span>
<span class="comment-copy">Chekc this info, is for use of random and maybe be helpful to you: <a href="https://docs.python.org/3/library/random.html#" rel="nofollow noreferrer">docs.python.org/3/library/random.html#</a></span>
<span class="comment-copy">You should look into generating numbers and then performing a chi square test on them.</span>
<span class="comment-copy">you have several random generators, normally random, uniformilly random, poisson random, depending on the distribution you want. For a simple implementation such as yours, you don't have to worry, the pseudorandom generator should be fine, also, the seed number will generate you the same results over and over, which is perfect when you want to share your work and show the same results.</span>
<span class="comment-copy">"I feel like I notice that it has a sort of... bias?" Don't feel. Test! Humans are very good at perceiving patterns when they don't actually exist.</span>
<span class="comment-copy">Thanks! All good comments and I see that what I am already doing is almost certainly fine, but since your answer offers an alternative with more unpredictability I'll go with that!</span>
<span class="comment-copy">Thanks for your comment - and especially the last one!</span>
<span class="comment-copy">Nicely illustrated!</span>
