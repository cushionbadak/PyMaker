<div class="post-text" itemprop="text">
<p>i want to get some string, range from 0000 to 9999, that's to say, i want to print the following string:</p>
<pre><code>0000
0001
0002
0003
0004
0005
0006
....
9999
</code></pre>
<p>i tried to use <code>print "\n".join([str(num) for num in range(0, 9999)])</code>, but failed, i get the following number:</p>
<pre><code>0
1
2
3
4
5
6
...
9999
</code></pre>
<p>i want python to add the prefix <strong><em>0</em></strong> automatically, making the number remain <strong><em>4 bit digits</em></strong> all the time. can anyone give a hand to me? any help appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to get what you want is to use string formatting:</p>
<pre><code>&gt;&gt;&gt; for i in range(10):
...     '{0:04}'.format(i)
... 
'0000'
'0001'
'0002'
'0003'
'0004'
'0005'
'0006'
'0007'
'0008'
'0009'
</code></pre>
<p>So to do what you want, do this:</p>
<pre><code>print "\n".join(['{0:04}'.format(num) for num in range(0, 10000)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code>print"\n".join(["%#04d" % num for num in range(0, 9999)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/stdtypes.html#str.zfill" rel="noreferrer">http://docs.python.org/library/stdtypes.html#str.zfill</a></p>
<blockquote>
<p>Return the numeric string left filled with zeros in a string of length
  width. A sign prefix is handled correctly. The original string is
  returned if width is less than or equal to len(s).</p>
</blockquote>
<p>E.g.:</p>
<pre><code>&gt;&gt;&gt; for i in range(10):
...   print('{:d}'.format(i).zfill(4))
... 
0000
0001
0002
0003
0004
0005
0006
0007
0008
0009
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply using <a href="https://docs.python.org/3/library/stdtypes.html?highlight=rjust#str.rjust" rel="nofollow noreferrer">str.rjust</a>:</p>
<pre><code>print "\n".join([str(num).rjust(4, '0') for num in range(0, 1000)])
</code></pre>
<blockquote>
<p>Return the string right justified in a string of length width. Padding
  is done using the specified fillchar (default is an ASCII space). The
  original string is returned if width is less than or equal to len(s).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/stdtypes.html?highlight=zfill#str.zfill" rel="nofollow">str.zfill</a> also works:  </p>
<p><code>print('\n'.join([str(num).zfill(4) for num in range(0, 10000)]))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>another way to do that:</p>
<pre><code>["%.4d" % i for i in range(0,999)]
</code></pre>
<p>or</p>
<pre><code>["%04d" % i for i in range(0,999)]
</code></pre>
</div>
<span class="comment-copy">You can't get a sequence ending in "9999" with range(0, 9999); Python ranges don't include the upper bound.  Use range(10**4) if you want to include 9999.</span>
<span class="comment-copy">thx, perfect solution</span>
<span class="comment-copy">No it is not a perfect solution. Major flaw there. If you are going to be using big ranges like 9999 then you should use <code>xrange</code> to avoid allocating the whole list of numbers. It may not make a big difference to do it once or twice, but what if that loop is inside another loop inside some recursive function calls?</span>
<span class="comment-copy">What Michael said plus remove [] (use gen exp instead of list comp).</span>
<span class="comment-copy">@MichaelDillon, that's only true in Python 2. In Python 3, <code>range</code> == <code>xrange</code> and <code>xrange</code> is undefined. The OP used <code>range</code>, so I assumed that he's using Python 3.</span>
<span class="comment-copy">@yak, that's also depends on circumstances. Using a genex saves memory but is actually a bit slower in this case. On my machine, anyway.</span>
