<div class="post-text" itemprop="text">
<p>I would like to match dotall and non-greedy. This is what I have:</p>
<pre><code>img(.*?)(onmouseover)+?(.*?)a
</code></pre>
<p>However, this is not being non-greedy. This data is not matching as I expected:</p>
<pre><code>&lt;img src="icon_siteItem.gif" alt="siteItem" title="A version of this resource is available on siteItem" border="0"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;td rowspan="4" width="20"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;An activity in which students find other more specific adjectives to 
describe a range of nouns, followed by writing a postcard to describe a 
nice holiday without using the word 'nice'.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;From the resource collection: &lt;a href="http://www.siteItem.co.uk/index.asp?CurrMenu=searchresults&amp;amp;tag=326" title="Resources to help work"&gt;Drafting &lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;abbr style="border-bottom:0px" title="Key Stage 3"&gt;thing&lt;/abbr&gt; | &lt;abbr style="border-bottom:0px" title="Key Stage 4"&gt;hello&lt;/abbr&gt; | &lt;abbr style="border-bottom:0px" title="Resources"&gt;Skills&lt;/abbr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;div style="padding-left: 30px"&gt;&lt;div&gt;&lt;table style="" bgcolor="#DFE7EE" border="0" cellpadding="0" cellspacing="5" width="100%"&gt;&lt;tbody&gt;&lt;tr valign="top"&gt;&lt;td rowspan="4" width="60"&gt;&lt;a href="javascript:requiresLevel0(350,350);"&gt;&lt;img name="/attachments/3700.pdf" onmouseover="ChangeImageOnRollover(this,'/application/files/images/attach_icons/rollover_pdf.gif')" onmouseout="ChangeImageOnRollover(this,'/application/files/images/attach_icons/small_pdf.gif')" src="small_pdf.gif" alt="Download Recognising and avoiding ambiguity in PDF format" title="Download in PDF format" style="vertical-align: middle;" border="0"&gt;&lt;/a&gt;&lt;br&gt;790.0 k&lt;br&gt;
</code></pre>
<p>and I cannot understand why.</p>
<p>What I think I am stating in the above regex is:</p>
<blockquote>
<p>start with "img", then allow 0 or more any character including new line, then look for at least 1 "onmouseover", then allow 0 or more any character including new line, then an "a"</p>
</blockquote>
<p>Why doesn't this work as I expected?</p>
<p>KEY POINT: dotall must be enabled</p>
</div>
<div class="post-text" itemprop="text">
<p>It is being non-greedy.
It is your understanding of non-greedy that is not correct.</p>
<p>A regex will <strong><em>always</em></strong> try to match.</p>
<p>Let me show a simplified example of what non-greedy actually means(as suggested by a comment):</p>
<pre><code>re.findall(r'a*?bc*?', 'aabcc', re.DOTALL)
</code></pre>
<p>This will match:</p>
<ul>
<li>as few repetitions of 'a' as possible (in this case 2)</li>
<li>followed by a 'b'</li>
<li>and as few repetitions of 'c' as possible (in this case 0)</li>
</ul>
<p>so the only match is <code>'aab'</code>.</p>
<p><em>And just to conclude:</em><br/><br/>
Don't use regex to parse HTML. There are libraries that were made for the job. <a href="https://docs.python.org/3/library/re.html" rel="nofollow"><code>re</code></a> is not one of them.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, your regex looks a little funky: you're saying match "img", then any number of characters, "onmouseover" at least once, but possibly repeated (e.g. "onmouseoveronmouseoveronmouseover"), followed by any number of characters, followed by "a".</p>
<p>This should match from <code>img src="icon_</code> all the way to <code>onmouseover="Cha</code>. That's probably not what you want, but it's what you asked for.</p>
<p>Second, and this is significanly more important:</p>
<h1>DON'T USE REGULAR EXPESSIONS TO PARSE HTML.</h1>
<p>And in case you didn't understand it the first time, let me repeat it in italics:</p>
<h1><em>DON'T USE REGULAR EXPESSIONS TO PARSE HTML.</em></h1>
<p>Finally, let me link you to the canonical grimoire on the subject:  </p>
<h2><a href="https://stackoverflow.com/a/1732454/8606">You can't parse [X]HTML with a regex</a></h2>
</div>
<span class="comment-copy">This seems to work perfectly. I get a match on <code>img name="/attachments/3700.pdf" onmouseover="Cha</code></span>
<span class="comment-copy">@jurgemaister do you have dotall enabled?</span>
<span class="comment-copy">No, I don't. Guess I didn't read the question carefully enough. In that case it matches everything from the second character to the point i mentioned above. Which also would be expected.</span>
<span class="comment-copy">Non-greedy matching means that it will stop at the first possible character. It does not mean that it will start at the last possible character, which you seem to be expecting.</span>
<span class="comment-copy">What are you actually trying to achieve with this? It'd be easier to suggest improvements if we knew the aim, and some example results...</span>
<span class="comment-copy">as a simplified example, use <code>re.findall(r'a*?bc*?', 'aabcc', re.DOTALL)</code></span>
<span class="comment-copy">Thanks for the suggestion. I updated my answer.</span>
<span class="comment-copy">Why doesn't your example just return <code>b</code>? Why can it get away with matching 'c' zero times but it must match 'a' twice?</span>
<span class="comment-copy">Found an answer to my question: <a href="http://stackoverflow.com/questions/16633315/non-greedy-regex-quantifier-gives-greedy-result" title="non greedy regex quantifier gives greedy result">stackoverflow.com/questions/16633315/â€¦</a></span>
<span class="comment-copy">You should probably add two examples for libaries that could be used to parse HTML. (I know that beautiful soup works well).</span>
<span class="comment-copy">@tchirst: What you created in the post you linked is an HTML parser which uses regexes to build its lexer. It is clever, it's powerful. But what it <i>isn't</i> is a regular expression which describes HTML, because state (depth) has to be maintained separately. It's useful as a third-party parser library, but the whole point of discouraging beginners from parsing HTML with regexes is to encourage them to use tested, purpose-built parser libraries. HTML is far more complex than can be safely captured in a single-line regex written by a beginner. (Also, loved your books)</span>
