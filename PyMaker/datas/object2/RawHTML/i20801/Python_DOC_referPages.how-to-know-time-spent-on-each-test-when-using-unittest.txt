<div class="post-text" itemprop="text">
<p>Unittest presents only total time spent on running all tests but does not present time spent on each test separately.</p>
<p>How to add timing of each test when using unittest?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suppose, that it's not possible for now: <a href="http://bugs.python.org/issue4080" rel="noreferrer">http://bugs.python.org/issue4080</a>.</p>
<p>But you can do something like this:</p>
<pre><code>import unittest
import time

class SomeTest(unittest.TestCase):
    def setUp(self):
        self.startTime = time.time()

    def tearDown(self):
        t = time.time() - self.startTime
        print "%s: %.3f" % (self.id(), t)

    def testOne(self):
        time.sleep(1)
        self.assertEquals(int('42'), 42)

    def testTwo(self):
        time.sleep(2)
        self.assertEquals(str(42), '42')

if __name__ == '__main__':
    suite = unittest.TestLoader().loadTestsFromTestCase(SomeTest)
    unittest.TextTestRunner(verbosity=0).run(suite)
</code></pre>
<p>Result:</p>
<pre><code>__main__.SomeTest.testOne: 1.001
__main__.SomeTest.testTwo: 2.002
----------------------------------------------------------------------
Ran 2 tests in 3.003s

OK
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://readthedocs.org/docs/nose/en/latest/" rel="noreferrer">Nose</a> tests with the <a href="http://darcs.idyll.org/~t/projects/pinocchio/doc/" rel="noreferrer">pinnochio extension</a> has a <a href="http://darcs.idyll.org/~t/projects/pinocchio/doc/#stopwatch-selecting-tests-based-on-execution-time" rel="noreferrer">stopwatch</a> option which will give you this, if nose is an option for you.</p>
<p>It also has a ton of other useful features and plugins to make using unittest nicer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is variation of script from horejsek's answer.
It will monkey-patch django TestCase so that every TestCase will give its total running time.</p>
<p>You can place this sript in the root package's __init__.py, where your settings.py lives.
After that you can run tests with <em>./mange.py test -s</em></p>
<pre><code>from django import test
import time


@classmethod
def setUpClass(cls):
    cls.startTime = time.time()


@classmethod
def tearDownClass(cls):
    print "\n%s.%s: %.3f" % (cls.__module__, cls.__name__, time.time() - cls.startTime)


test.TestCase.setUpClass = setUpClass
test.TestCase.tearDownClass = tearDownClass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://github.com/realpython/django-slow-tests" rel="nofollow noreferrer">django-slowtests</a>, which provides output like this:</p>
<pre><code>$ python manage.py test
Creating test database for alias 'default'...
..........
----------------------------------------------------------------------
Ran 10 tests in 0.413s

OK
Destroying test database for alias 'default'...

Ten slowest tests:
0.3597s test_detail_view_with_a_future_poll (polls.tests.PollIndexDetailTests)
0.0284s test_detail_view_with_a_past_poll (polls.tests.PollIndexDetailTests)
0.0068s test_index_view_with_a_future_poll (polls.tests.PollViewTests)
0.0047s test_index_view_with_a_past_poll (polls.tests.PollViewTests)
0.0045s test_index_view_with_two_past_polls (polls.tests.PollViewTests)
0.0041s test_index_view_with_future_poll_and_past_poll (polls.tests.PollViewTests)
0.0036s test_index_view_with_no_polls (polls.tests.PollViewTests)
0.0003s test_was_published_recently_with_future_poll (polls.tests.PollMethodTests)
0.0002s test_was_published_recently_with_recent_poll (polls.tests.PollMethodTests)
0.0002s test_was_published_recently_with_old_poll (polls.tests.PollMethodTests)
</code></pre>
<p>If you look at <a href="https://github.com/realpython/django-slow-tests/blob/fd5f5070e3fbf7996d1f37b0f0997613bcd488ca/django_slowtests/testrunner.py#L25" rel="nofollow noreferrer">django_slowtests/test_runner.py</a> you could also adapt the technique yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>Solution with command-line only:  </p>
<p>1/ install <code>nose</code> (popular alternative test-runner) and extension <code>pinnochio</code> </p>
<pre><code>$ pip install nose pinnochio
</code></pre>
<p>2/ run tests with time recording (times are saved in file <code>.nose-stopwatch-times</code>)  </p>
<pre><code>$ nosetests --with-stopwatch
</code></pre>
<p>3/ display tests names sorted by decreasing time:  </p>
<pre><code>$ python -c "import pickle,operator,signal; signal.signal(signal.SIGPIPE, signal.SIG_DFL); print '\n'.join(['%.03fs: %s'%(v[1],v[0]) for v in sorted(pickle.load(open('.nose-stopwatch-times','r')).items(), key=operator.itemgetter(1), reverse=True)])" | less
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.pytest.org/en/latest/" rel="nofollow noreferrer">pytest</a> with <code>--durations=0</code> and it will give you execution time for each test</p>
</div>
<span class="comment-copy">I guess it would be good to have this defined in some base class so that one could easily mix it in.</span>
<span class="comment-copy">Definitelly. This is only example of one possibility.</span>
<span class="comment-copy">@szeitlin No, it's method: <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.id" rel="nofollow noreferrer">docs.python.org/3/library/unittest.html#unittest.TestCase.id</a></span>
<span class="comment-copy">Nose is not actively maintained and recommends to migrate to pytest</span>
<span class="comment-copy">Nose is passe for a few years now. Everybody uses py.test and rightly so.</span>
<span class="comment-copy">I think this prints <code>ms</code> when it should print <code>s</code></span>
