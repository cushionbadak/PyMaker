<div class="post-text" itemprop="text">
<p>Assuming <code>connectionDetails</code> is a Python dictionary, what's the best, most elegant, most "pythonic" way of refactoring code like this?</p>
<pre><code>if "host" in connectionDetails:
    host = connectionDetails["host"]
else:
    host = someDefaultValue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like this:</p>
<pre><code>host = connectionDetails.get('host', someDefaultValue)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="noreferrer"><code>defaultdict</code></a> like so:</p>
<pre><code>from collections import defaultdict
a = defaultdict(lambda: "default", key="some_value")
a["blabla"] =&gt; "default"
a["key"] =&gt; "some_value"
</code></pre>
<p>You can pass any ordinary function instead of lambda:</p>
<pre><code>from collections import defaultdict
def a():
  return 4

b = defaultdict(a, key="some_value")
b['absent'] =&gt; 4
b['key'] =&gt; "some_value"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While <code>.get()</code> is a nice idiom, it's slower than <code>if/else</code> (and slower than <code>try/except</code> if presence of the key in the dictionary can be expected most of the time):</p>
<pre><code>&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}", 
... stmt="try:\n a=d[1]\nexcept KeyError:\n a=10")
0.07691968797894333
&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}", 
... stmt="try:\n a=d[2]\nexcept KeyError:\n a=10")
0.4583777282275605
&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}", 
... stmt="a=d.get(1, 10)")
0.17784020746671558
&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}", 
... stmt="a=d.get(2, 10)")
0.17952161730158878
&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}", 
... stmt="if 1 in d:\n a=d[1]\nelse:\n a=10")
0.10071221458065338
&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}", 
... stmt="if 2 in d:\n a=d[2]\nelse:\n a=10")
0.06966537335119938
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For multiple different defaults try this:</p>
<pre><code>connectionDetails = { "host": "www.example.com" }
defaults = { "host": "127.0.0.1", "port": 8080 }

completeDetails = {}
completeDetails.update(defaults)
completeDetails.update(connectionDetails)
completeDetails["host"]  # ==&gt; "www.example.com"
completeDetails["port"]  # ==&gt; 8080
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a method in python dictionaries to do this: <code>dict.setdefault</code></p>
<pre><code>connectionDetails.setdefault('host',someDefaultValue)
host = connectionDetails['host']
</code></pre>
<p>However this method sets the value of <code>connectionDetails['host']</code> to <code>someDefaultValue</code> if key <code>host</code> is not already defined, unlike what the question asked.</p>
</div>
<div class="post-text" itemprop="text">
<p>(this is a late answer)</p>
<p>An alternative is to subclass the <code>dict</code> class and implement the <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__missing__#object.__missing__" rel="noreferrer"><code>__missing__()</code></a> method, like this:</p>
<pre><code>class ConnectionDetails(dict):
    def __missing__(self, key):
        if key == 'host':
            return "localhost"
        raise KeyError(key)
</code></pre>
<p>Examples:</p>
<pre><code>&gt;&gt;&gt; connection_details = ConnectionDetails(port=80)

&gt;&gt;&gt; connection_details['host']
'localhost'

&gt;&gt;&gt; connection_details['port']
80

&gt;&gt;&gt; connection_details['password']
Traceback (most recent call last):
  File "python", line 1, in &lt;module&gt;
  File "python", line 6, in __missing__
KeyError: 'password'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Testing @Tim Pietzcker's suspicion about the situation in PyPy (5.2.0-alpha0) for Python 3.3.5, I find that indeed both <code>.get()</code> and the <code>if</code>/<code>else</code> way perform similar. Actually it seems that in the if/else case there is even only a single lookup if the condition and the assignment involve the same key (compare with the last case where there is two lookups).</p>
<pre><code>&gt;&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}",
.... stmt="try:\n a=d[1]\nexcept KeyError:\n a=10")
0.011889292989508249
&gt;&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}",
.... stmt="try:\n a=d[2]\nexcept KeyError:\n a=10")
0.07310474599944428
&gt;&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}",
.... stmt="a=d.get(1, 10)")
0.010391917996457778
&gt;&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}",
.... stmt="a=d.get(2, 10)")
0.009348208011942916
&gt;&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}",
.... stmt="if 1 in d:\n a=d[1]\nelse:\n a=10")
0.011475925013655797
&gt;&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}",
.... stmt="if 2 in d:\n a=d[2]\nelse:\n a=10")
0.009605801998986863
&gt;&gt;&gt;&gt; timeit.timeit(setup="d={1:2, 3:4, 5:6, 7:8, 9:0}",
.... stmt="if 2 in d:\n a=d[2]\nelse:\n a=d[1]")
0.017342638995614834
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a lamba function for this as a one-liner. Make a new object     <code>connectionDetails2</code> which is accessed like a function...</p>
<pre><code>connectionDetails2 = lambda k: connectionDetails[k] if k in connectionDetails.keys() else "DEFAULT"
</code></pre>
<p>Now use </p>
<pre><code>connectionDetails2(k)
</code></pre>
<p>instead of </p>
<pre><code>connectionDetails[k]
</code></pre>
<p>which returns the dictionary value if <code>k</code> is in the keys, otherwise it returns <code>"DEFAULT"</code></p>
</div>
<span class="comment-copy">Note that the second argument is a value, not a key.</span>
<span class="comment-copy">+1 for readability, but <code>if/else</code> is much faster. That might or might not play a role.</span>
<span class="comment-copy">@Tim, Can you provide  a reference as to why <code>if/else</code> is faster?</span>
<span class="comment-copy">@Tim: I had assumed that one of the advantages of using a higher level language is that the interpreter would be able to 'see' inside the functions and optimize it - that the user wouldn't have to deal with micro-optimizations as much. Isn't that what things like JIT compilation are for?</span>
<span class="comment-copy">@nishantjr: Python (at least CPython, the most common variant) does'nt have JIT compilation. PyPy might indeed solve this faster, but I haven't got that installed since standard Python has always been fast enough for my purposes so far. In general, it's unlikely to matter in real life - if you need to do time-critical number crunching, Python probably is not the language of choice...</span>
<span class="comment-copy">I came here for some different problem than the OP's question, and your solution exactly solves it.</span>
<span class="comment-copy">I would +1 it but sadly it doesn't fit in with <code>get</code> or similar methods.</span>
<span class="comment-copy">I still don't see <i>why</i> <code>if/then</code> would be faster. Both cases require a dictionary lookup, and unless the invocation of <code>get()</code> is <i>so</i> much slower, what else accounts for the slowdown?</span>
<span class="comment-copy">@Jens: Function calls are expensive.</span>
<span class="comment-copy">Which shouldn't be a big deal in a heavily populated dictionary, correct? Meaning the function call is not going to matter much if the actual lookup is costly. It probably only matters in toy examples.</span>
<span class="comment-copy">@zehelvion: Dictionary lookup is <code>O(1)</code> regardless of dictionary size, so the function call overhead is relevant.</span>
<span class="comment-copy">it is bizarre if the overhead of calling a function would make you decide against using get. Use what your fellow team members can read best.</span>
<span class="comment-copy">This is a good idiomatic solution, but there is a pitfall. Unexpected outcomes may result if connectionDetails is supplied with <code>None</code> or the emptyString as one of the values in the key-value pairs. The <code>defaults</code> dictionary could potentially have one of its values unintentionally blanked out. (see also <a href="https://stackoverflow.com/questions/6354436">stackoverflow.com/questions/6354436</a>)</span>
<span class="comment-copy">Note that <code>setdefault()</code> returns value, so this works as well: <code>host = connectionDetails.setdefault('host', someDefaultValue)</code>. Just beware that it will set <code>connectionDetails['host']</code> to default value if the key wasn't there before.</span>
<span class="comment-copy">I don't understand why this is being downvoted. It's lightweight and works...</span>
