<div class="post-text" itemprop="text">
<p>How can I round up a number to the second decimal place in python?  For example:</p>
<pre><code>0.022499999999999999
</code></pre>
<p>Should round up to <code>0.03</code></p>
<pre><code>0.1111111111111000
</code></pre>
<p>Should round up to <code>0.12</code></p>
<p>If there is any value in the third decimal place, I want it to always round up leaving me 2 values behind the decimal point.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python includes the <code>round()</code> function which <a href="http://docs.python.org/library/functions.html#round">lets you specify</a> the number of digits you want. From the documentation: </p>
<blockquote>
<p><code>round(x[, n])</code></p>
<p>Return the floating point value x rounded to n digits after the decimal point. If n is omitted, it defaults to zero. The result is a floating point number. Values are rounded to the closest multiple of 10 to the power minus n; if two multiples are equally close, rounding is done away from 0 (so. for example, round(0.5) is 1.0 and round(-0.5) is -1.0).</p>
</blockquote>
<p>So you would want to use <code>round(x, 2)</code> to do normal rounding. To ensure that the number is always rounded <em>up</em> you would need to use the <code>ceil(x)</code> function. Similarly, to round <em>down</em> use <code>floor(x)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from math import ceil

num = 0.1111111111000
num = ceil(num * 100) / 100.0
</code></pre>
<p>See:<br/>
<a href="http://docs.python.org/library/math.html#math.ceil" rel="noreferrer"><code>math.ceil</code> documentation</a><br/>
<a href="http://docs.python.org/library/functions.html#round" rel="noreferrer"><code>round</code> documentation</a> - You'll probably want to check this out anyway for future reference</p>
</div>
<div class="post-text" itemprop="text">
<p>Extrapolating from Edwin's answer:</p>
<pre><code>from math import ceil, floor
def float_round(num, places = 0, direction = floor):
    return direction(num * (10**places)) / float(10**places)
</code></pre>
<p>To use:</p>
<pre><code>&gt;&gt;&gt; float_round(0.21111, 3, ceil)  #round up
&gt;&gt;&gt; 0.212
&gt;&gt;&gt; float_round(0.21111, 3)        #round down
&gt;&gt;&gt; 0.211
&gt;&gt;&gt; float_round(0.21111, 3, round) #round naturally
&gt;&gt;&gt; 0.211
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = math.ceil(x * 100.0) / 100.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This depends on the behavior you want when considering positive and negative numbers, but if you want something that always rounds to a larger value (e.g. 2.0449 -&gt; 2.05, -2.0449 -&gt; -2.04) then you can do:</p>
<pre><code>round(x + 0.005, 2)
</code></pre>
<p>or a little fancier:</p>
<pre><code>def round_up(x, place):
    return round(x + 5 * 10**(-1 * (place + 1)), place)
</code></pre>
<p>This also seems to work as follows:</p>
<pre><code>round(144, -1)
# 140
round_up(144, -1)
# 150
round_up(1e308, -307)
# 1.1e308
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that the <code>ceil(num * 100) / 100</code> trick will crash on some degenerate inputs, like 1e308.  This may not come up often but I can tell you it just cost me a couple of days.  To avoid this, "it would be nice if" <code>ceil()</code> and <code>floor()</code> took a decimal places argument, like <a href="https://docs.python.org/3.4/library/functions.html#round" rel="nofollow"><code>round()</code></a> does...  Meanwhile, anyone know a clean alternative that won't crash on inputs like this?  I had some hopes for the <a href="https://docs.python.org/3.4/library/decimal.html" rel="nofollow"><code>decimal</code></a> package but it seems to die too:</p>
<pre><code>&gt;&gt;&gt; from math import ceil
&gt;&gt;&gt; from decimal import Decimal, ROUND_DOWN, ROUND_UP
&gt;&gt;&gt; num = 0.1111111111000
&gt;&gt;&gt; ceil(num * 100) / 100
0.12
&gt;&gt;&gt; float(Decimal(num).quantize(Decimal('.01'), rounding=ROUND_UP))
0.12
&gt;&gt;&gt; num = 1e308
&gt;&gt;&gt; ceil(num * 100) / 100
Traceback (most recent call last):
  File "&lt;string&gt;", line 301, in runcode
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
OverflowError: cannot convert float infinity to integer
&gt;&gt;&gt; float(Decimal(num).quantize(Decimal('.01'), rounding=ROUND_UP))
Traceback (most recent call last):
  File "&lt;string&gt;", line 301, in runcode
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
decimal.InvalidOperation: [&lt;class 'decimal.InvalidOperation'&gt;]
</code></pre>
<p>Of course one might say that crashing is the only sane behavior on such inputs, but I would argue that it's not the rounding but the multiplication that's causing the problem (that's why, eg, 1e306 doesn't crash), and a cleaner implementation of the round-up-nth-place fn would avoid the multiplication hack.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def round_up(number, ndigits=None):
    # start by just rounding the number, as sometimes this rounds it up
    result = round(number, ndigits if ndigits else 0)
    if result &lt; number:
        # whoops, the number was rounded down instead, so correct for that
        if ndigits:
            # use the type of number provided, e.g. float, decimal, fraction
            Numerical = type(number)
            # add the digit 1 in the correct decimal place
            result += Numerical(10) ** -ndigits
            # may need to be tweaked slightly if the addition was inexact
            result = round(result, ndigits)
        else:
            result += 1 # same as 10 ** -0 for precision of zero digits
    return result

assert round_up(0.022499999999999999, 2) == 0.03
assert round_up(0.1111111111111000, 2) == 0.12

assert round_up(1.11, 2) == 1.11
assert round_up(1e308, 2) == 1e308
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The round funtion stated does not works for definate integers like :</p>
<blockquote>
<p>a=8<br/>
  round(a,3)<br/>
  8.0<br/>
  a=8.00<br/>
  round(a,3)<br/>
  8.0<br/>
  a=8.000000000000000000000000<br/>
  round(a,3)<br/>
  8.0<br/></p>
</blockquote>
<p>but , works for :</p>
<blockquote>
<p>r=400/3.0<br/>
  r<br/>
      133.33333333333334<br/>
  round(r,3)<br/>
      133.333<br/></p>
</blockquote>
<p>Morever the decimals like 2.675 are rounded as 2.67 not 2.68.<br/>
Better use the other method provided above.</p>
</div>
<div class="post-text" itemprop="text">
<p>The python <code>round</code> function could be rounding the way not you expected.</p>
<p>You can be more specific about the rounding method by using <code>Decimal.quantize</code></p>
<p>eg.</p>
<pre><code>from decimal import Decimal, ROUND_HALF_UP
res = Decimal('0.25').quantize(Decimal('0.0'), rounding=ROUND_HALF_UP)
print(res) 
# prints 0.3
</code></pre>
<p>More reference:</p>
<p><a href="https://gist.github.com/jackiekazil/6201722" rel="nofollow noreferrer">https://gist.github.com/jackiekazil/6201722</a></p>
</div>
<span class="comment-copy">I'd suggest to read <a href="http://docs.python.org/tutorial/floatingpoint.html" rel="nofollow noreferrer">Floating Point Arithmetic: Issues and Limitations</a> from the Python tutorial before you go on.</span>
<span class="comment-copy">Also, consider whether you really want to round the values, or you just want to <i>display</i> them with 3 decimal places...</span>
<span class="comment-copy">Good suggestion, but it doesn't round <b>up</b> as the OP seems to require.</span>
<span class="comment-copy">"Round up" isn't the same as normal rounding. Look at the examples in the question.</span>
<span class="comment-copy">You're both right--I'm editing now.</span>
<span class="comment-copy">@Mark Because adding in the exact code to do <code>ceil</code> would mean copying your answer, I'm leaving mine as (almost) is and upvoting yours.</span>
<span class="comment-copy">You don't need <code>round()</code> here -- it won't change the result in any way.</span>
<span class="comment-copy">Gives wrong results in following cases:  <code>math.ceil((1.11 * 100.0)) / 100.0</code> comes out to be <code>1.12</code>  Because: <code>1.11 * 100.0</code> has value <code>111.00000000000001</code></span>
<span class="comment-copy">@nimeshkiranverma see <a href="https://stackoverflow.com/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a> Use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code> module</a> if you need exact decimal results.</span>
<span class="comment-copy">Gives wrong results in following cases:  <code>math.ceil((1.11 * 100.0)) / 100.0</code> comes out to be <code>1.12</code>  Because: <code>1.11 * 100.0</code> has value <code>111.00000000000001</code></span>
<span class="comment-copy">I had to stare at this for a while before I realized this is even more pythonic than my solution.</span>
<span class="comment-copy">The problem you're running into with this use of <code>Decimal</code> is that the result of the quantize expression needs 311 digits to express, and the current precision is too small.  If you do a <code>from decimal import getcontext; getcontext().prec = 400</code> beforehand, this will "work", for some value of "work".  Or you could note that any float larger than 2**52 in absolute value must already be an integer, so the rounding will have no effect.  And yes, I agree it would nice if "ceil" and "floor" took a decimal places argument.</span>
<span class="comment-copy">You should add comments in your code to describe what you did</span>
<span class="comment-copy">Is that better?</span>
<span class="comment-copy">That's great, thanks!</span>
