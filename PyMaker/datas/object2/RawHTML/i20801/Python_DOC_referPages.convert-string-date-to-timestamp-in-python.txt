<div class="post-text" itemprop="text">
<p>How to convert a string in the format <code>"%d/%m/%Y"</code> to timestamp?</p>
<pre><code>"01/12/2011" -&gt; 1322697600
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; s = "01/12/2011"
&gt;&gt;&gt; time.mktime(datetime.datetime.strptime(s, "%d/%m/%Y").timetuple())
1322697600.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To convert the string into a date object:</p>
<pre><code>from datetime import date, datetime

date_string = "01/12/2011"
date_object = date(*map(int, reversed(date_string.split("/"))))
assert date_object == datetime.strptime(date_string, "%d/%m/%Y").date()
</code></pre>
<p>The way to convert the date object into POSIX timestamp depends on timezone. From <a href="https://stackoverflow.com/a/8778548/4279">Converting <code>datetime.date</code> to UTC timestamp in Python</a>:</p>
<ul>
<li><p>date object represents midnight in UTC</p>
<pre><code>import calendar

timestamp1 = calendar.timegm(utc_date.timetuple())
timestamp2 = (utc_date.toordinal() - date(1970, 1, 1).toordinal()) * 24*60*60
assert timestamp1 == timestamp2
</code></pre></li>
<li><p>date object represents midnight in local time</p>
<pre><code>import time

timestamp3 = time.mktime(local_date.timetuple())
assert timestamp3 != timestamp1 or (time.gmtime() == time.localtime())
</code></pre></li>
</ul>
<p>The timestamps are different unless midnight in UTC and in local time is the same time instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use <code>ciso8601</code>, which is 62x faster than datetime's strptime.</p>
<pre><code>t = "01/12/2011"
ts = ciso8601.parse_datetime(t)
# to get time in seconds:
time.mktime(ts.timetuple())
</code></pre>
<p>You can learn more <a href="https://pypi.python.org/pypi/ciso8601/1.0.1" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime("%s"))
1322683200
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer depends also on your input date timezone. If your date is a local date, then you can use mktime() like katrielalex said - only I don't see why he used datetime instead of this shorter version:</p>
<pre><code>&gt;&gt;&gt; time.mktime(time.strptime('01/12/2011', "%d/%m/%Y"))
1322694000.0
</code></pre>
<p>But observe that my result is different than his, as I am probably in a different TZ (and the result is timezone-free UNIX timestamp)</p>
<p>Now if the input date is already in UTC, than I believe the right solution is:</p>
<pre><code>&gt;&gt;&gt; calendar.timegm(time.strptime('01/12/2011', '%d/%m/%Y'))
1322697600
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply use <code>datetime.datetime.strptime</code>:</p>
<pre><code>import datetime
stime = "01/12/2011"
print(datetime.datetime.strptime(stime, "%d/%m/%Y").timestamp())
</code></pre>
<p>Result:</p>
<pre><code>1322697600
</code></pre>
<p>To use UTC instead of the local timezone use <code>.replace</code>:</p>
<pre><code>datetime.datetime.strptime(stime, "%d/%m/%Y").replace(tzinfo=datetime.timezone.utc).timestamp()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First you must the <a href="http://docs.python.org/library/time.html#time.strptime" rel="noreferrer">strptime</a> class to convert the string to a struct_time format. </p>
<p>Then just use <a href="http://docs.python.org/library/time.html#time.mktime" rel="noreferrer">mktime</a> from there to get your float.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest <a href="http://labix.org/python-dateutil" rel="nofollow noreferrer">dateutil</a>:</p>
<pre><code>import dateutil.parser
dateutil.parser.parse("01/12/2011", dayfirst=True).timestamp()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A lot of these answers don't bother to consider that the date is naive to begin with</p>
<p>To be correct, you need to make the naive date a timezone aware datetime first</p>
<pre><code>import datetime
import pytz
# naive datetime
d = datetime.datetime.strptime('01/12/2011', '%d/%m/%Y')
&gt;&gt;&gt; datetime.datetime(2011, 12, 1, 0, 0)

# add proper timezone
pst = pytz.timezone('America/Los_Angeles')
d = pst.localize(d)
&gt;&gt;&gt; datetime.datetime(2011, 12, 1, 0, 0,
tzinfo=&lt;DstTzInfo 'America/Los_Angeles' PST-1 day, 16:00:00 STD&gt;)

# convert to UTC timezone
utc = pytz.UTC
d = d.astimezone(utc)
&gt;&gt;&gt; datetime.datetime(2011, 12, 1, 8, 0, tzinfo=&lt;UTC&gt;)

# epoch is the beginning of time in the UTC timestamp world
epoch = datetime.datetime(1970,1,1,0,0,0,tzinfo=pytz.UTC)
&gt;&gt;&gt; datetime.datetime(1970, 1, 1, 0, 0, tzinfo=&lt;UTC&gt;)

# get the total second difference
ts = (d - epoch).total_seconds()
&gt;&gt;&gt; 1322726400.0
</code></pre>
<p><strong>Also:</strong></p>
<p>Be careful, using <code>pytz</code> for <code>tzinfo</code> in a <code>datetime.datetime</code> DOESN'T WORK for many timezones. See <a href="https://stackoverflow.com/questions/23699115/datetime-with-pytz-timezone-different-offset-depending-on-how-tzinfo-is-set">datetime with pytz timezone. Different offset depending on how tzinfo is set</a></p>
<pre><code># Don't do this:
d = datetime.datetime(2011, 12, 1,0,0,0, tzinfo=pytz.timezone('America/Los_Angeles'))
&gt;&gt;&gt; datetime.datetime(2011, 1, 12, 0, 0, 
tzinfo=&lt;DstTzInfo 'America/Los_Angeles' LMT-1 day, 16:07:00 STD&gt;)
# tzinfo in not PST but LMT here, with a 7min offset !!!

# when converting to UTC:
d = d.astimezone(pytz.UTC)
&gt;&gt;&gt; datetime.datetime(2011, 1, 12, 7, 53, tzinfo=&lt;UTC&gt;)
# you end up with an offset
</code></pre>
<p><a href="https://en.wikipedia.org/wiki/Local_mean_time" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Local_mean_time</a></p>
</div>
<div class="post-text" itemprop="text">
<p>just use datetime.timestamp(your datetime instanse), datetime instance contains the timezone infomation, so the timestamp will be a standard utc timestamp. if you transform the datetime to timetuple, it will lose it's timezone, so the result will be error.
if you want to provide an interface, you should write like this:
 int(datetime.timestamp(time_instance)) * 1000</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems to be quite efficient:</p>
<pre><code>import datetime
day, month, year = '01/12/2011'.split('/')
datetime.datetime(int(year), int(month), int(day)).timestamp()
</code></pre>
<p>1.61 µs ± 120 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</p>
</div>
<span class="comment-copy">What's the 2nd number?  Unix Epoch time?</span>
<span class="comment-copy">@Hasteur, yes.  The second number represents the number of seconds that have passed between the beginning of the unix epoch and the date specified.  This format is also referred to as POSIX time.</span>
<span class="comment-copy">it assumes midnight 01/12/2011 in local timezone. If input is in UTC; you could use <a href="http://stackoverflow.com/a/20035328/4279"><code>calendar.timegm()</code> or <code>.toordinal()</code></a></span>
<span class="comment-copy"><code>datetime.datetime.strptime(s, "%d/%m/%Y").timestamp()</code> is a bit shorter</span>
<span class="comment-copy">@timdiels: again. <code>.timestamp()</code> assumes <i>local</i> time instead of UTC if no explicit timezone is given. The code in the answer works (produces expected <code>1322697600</code>) only on a computer where local timezone has zero utc offset.</span>
<span class="comment-copy">this doesn't work: datetime.datetime.strptime("2014:06:28 11:53:21", "%Y:%m:%d %H:%M:%S").timestamp() Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'datetime.datetime' object has no attribute 'timestamp'</span>
<span class="comment-copy">@ZdenekMaxa datetime.timestamp() available only for python &gt;= 3.3 versions. <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.3.html</a></span>
<span class="comment-copy">this is the most complete and useful, thanks</span>
<span class="comment-copy">When I run the examples in this post, I get the error: <code>NameError: name 'wckCalendar' is not defined</code>. I am running Python 3.4.1 on a Windows 32 bits machine. Any idea? Thanks.</span>
<span class="comment-copy">@sedeh there is no wckCalendar in the post. Check your code.</span>
<span class="comment-copy">@törzsmókus: If the answer is wrong, It doesn't matter how readable it is.</span>
<span class="comment-copy">@törzsmókus: look at my answer: it may produce <i>two</i> different numbers. Your answer produces <i>one</i> number without mentioning which one.</span>
<span class="comment-copy">this is a fantastic suggestion.  i just used it and shaved TONS of time off of my execution.</span>
<span class="comment-copy">My god this is fast</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/17433056/4279"><code>"%s"</code> is not supported by Python</a>. It is not portable.</span>
<span class="comment-copy"><b><a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python" rel="nofollow noreferrer">Readability counts.</a></b> See my answer with <i>dateutil</i> for a far more human-readable solution.</span>
<span class="comment-copy">I think this is better. No need to import both 'time' and 'datetime'.</span>
<span class="comment-copy">simple and elegant..</span>
<span class="comment-copy">It is wrong. OP expects time in <code>"%d/%m/%Y"</code> format. Compare: <code>dateutil.parser.parse("01/02/2001")</code> and <code>datetime.strptime("01/02/2001", "%d/%m/%Y")</code></span>
<span class="comment-copy">thanks @jfs, good catch. I updated my answer accordingly. (as a non-American, I wouldn’t have thought the illogical M/D/Y format was the default for the parser.)</span>
<span class="comment-copy">it doesn't produce the expected <code>1322697600</code> unless your local timezone is UTC. See <a href="https://stackoverflow.com/questions/9637838/convert-string-date-to-timestamp-in-python/20035328#comment34554753_9637908">my comment from 2014</a></span>
<span class="comment-copy">What's the <code>datetime</code> function? <code>datetime</code> from the <code>datetime</code> library doesn't support <code>.timestamp()</code></span>
<span class="comment-copy">@Joooeey: <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow noreferrer">It does, on Python 3.3 or later</a>. Wasn't available when the question was posted, but it's been available since Sept. of 2012.</span>
