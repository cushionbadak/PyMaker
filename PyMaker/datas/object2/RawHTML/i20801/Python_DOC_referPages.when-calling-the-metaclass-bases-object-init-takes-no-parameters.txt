<div class="post-text" itemprop="text">
<p>When I try to use this one approach of singleton:</p>
<pre><code>class Singleton(object):                                                     
    def __init__(self, name, bases, dict):                                   
        super(Singleton, self).__init__(name, bases, dict)                   
        self._instance = None                                                

    def __call__(self):                                                      
        if self._instance is None:                                           
            self._instance = super(Singleton, self).__call__()
        return self._instance                                                


class NewClass(object):      
    __metaclass__ = Singleton
</code></pre>
<p>I got an error:</p>
<blockquote>
<p>Error when calling the metaclass bases
      object.<strong>init</strong>() takes no parameters</p>
</blockquote>
<p>I'm not sure, am I correctly understand what the arguments are takes <code>__init__</code> method: <code>name, bases, dict</code>. And actually - where is my mistake/incomprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p>Metaclasses derive from <code>type</code>, not <code>object</code>.</p>
</div>
<span class="comment-copy">This answer is incorrect. At least technically. The docs for <a href="https://docs.python.org/2.7/reference/datamodel.html#customizing-class-creation" rel="nofollow noreferrer">Python2</a>  and <a href="https://docs.python.org/3/reference/datamodel.html#determining-the-appropriate-metaclass" rel="nofollow noreferrer">Python3</a> state that it is allowed not to inherit from type (although not recommended). In Python2 it can be any callable.</span>
