<div class="post-text" itemprop="text">
<p>I'm writing a central <code>logging</code> configuration file for a dozen or so Python components and I need one specific logger to log time in the UNIX time format (either milliseconds or seconds with fractions, both is good).</p>
<p>Is there a way to configure a formatter in the config file, to output <code>%(asctime)s</code> like that? I'm trying to avoid having to monkey-patch a Formatter instance in multiple independent Python scripts, and it's unfeasible to post-process the log-file.</p>
<p>Related: <a href="https://stackoverflow.com/questions/8376626/python-logging-override-log-time">Python logging: override log time</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Just add</p>
<pre><code>datefmt = %s
</code></pre>
<p>to your corresponding formatter config section or formatter constructor call, e.g.:</p>
<pre><code>[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %s
</code></pre>
<p>See also <a href="http://docs.python.org/library/logging.html#logging.Formatter" rel="nofollow noreferrer"><code>logging.Formatter</code></a> constructor and <a href="http://linux.die.net/man/3/strftime" rel="nofollow noreferrer">strftime(3)</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have just found the following solution:</p>
<pre><code>import logging

class UnixTimeStampFormatter(logging.Formatter):
    def formatTime(self, record, datefmt = None):
        return "{0:.6f}".format(record.created)

def main():
    logChannel = logging.StreamHandler()
    logChannel.setFormatter(UnixTimeStampFormatter("%(asctime)s %(levelname)-5.5s [%(name)s] %(message)s"))
    logging.getLogger().setLevel(logging.DEBUG)
    logging.getLogger().addHandler(logChannel)
    logging.debug('hello');

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/logging.html#logrecord-attributes" rel="nofollow noreferrer">LogRecord object</a> has the attribute <code>created</code> which is used as basis for the <code>asctime</code> and is already in the format you want (seconds with fractions). The easiest solution therefore might be to replace all occurrences of <code>%(asctime)s</code> in the format strings with <code>%(created)f</code>:</p>
<pre><code>[formatter_generic]
format = %(created)f %(levelname)-5.5s [%(name)s] %(message)s
</code></pre>
</div>
<span class="comment-copy">Have you actually tried this? I know it looks like it should work, but I get <code>ValueError: Invalid format string</code> (only) when I use the small <code>%s</code>.</span>
<span class="comment-copy">Yes, works perfectly for me. See minimal working example here: <a href="https://gist.github.com/1819970" rel="nofollow noreferrer">gist.github.com/1819970</a></span>
<span class="comment-copy">Bah. <code>time.strftime</code> fails as described on Windows and I could confirm your solution on Linux. Apparently, Python's strftime is <a href="http://docs.python.org/library/time.html#time.strftime" rel="nofollow noreferrer">documented</a> as not having <code>%s</code>, so it's effectively an undocumented platform-specific feature...</span>
<span class="comment-copy">If you really need that on windows, you could consider monkey-patching <code>time.strftime</code>. <code>%s</code> is apparently supported on Linux, FreeBSD and MacOS X, but apparently it is missing on Windows and Solaris.</span>
<span class="comment-copy">This solution doesn't appear to answer the original question (as posed) to give milliseconds since epoch (or seconds+fraction). It only gives seconds since epoch. Is there a variant where I could actually get milliseconds since the epoch?</span>
<span class="comment-copy">I was trying to avoid having to do something like this, because I have many independent, no-code-shared scripts that need to log the time in the asked fashion.</span>
