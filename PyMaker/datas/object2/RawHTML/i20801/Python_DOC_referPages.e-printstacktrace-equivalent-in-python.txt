<div class="post-text" itemprop="text">
<p>I know that <code>print(e)</code> (where e is an Exception) prints the occurred exception
but, I was trying to find the python equivalent of Java's <code>e.printStackTrace()</code> that exactly traces the exception to what line it occurred and prints the entire trace of it.</p>
<p>Could anyone please tell me the equivalent of <code>e.printStackTrace()</code> in Python?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import traceback
traceback.print_exc()
</code></pre>
<p>When doing this inside an <code>except ...:</code> block it will automatically use the current exception. See <a href="http://docs.python.org/library/traceback.html">http://docs.python.org/library/traceback.html</a> for more information.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is also <code>logging.exception</code>.</p>
<pre><code>import logging

...

try:
    g()
except Exception as ex:
    logging.exception("Something awful happened!")
    # will print this message followed by traceback
</code></pre>
<p>Output:</p>
<pre><code>ERROR 2007-09-18 23:30:19,913 error 1294 Something awful happened!
Traceback (most recent call last):
  File "b.py", line 22, in f
    g()
  File "b.py", line 14, in g
    1/0
ZeroDivisionError: integer division or modulo by zero
</code></pre>
<p>(From <a href="http://blog.tplus1.com/index.php/2007/09/28/the-python-logging-module-is-much-better-than-print-statements/" rel="noreferrer">http://blog.tplus1.com/index.php/2007/09/28/the-python-logging-module-is-much-better-than-print-statements/</a> via <a href="https://stackoverflow.com/questions/3702675/print-the-full-traceback-in-python-without-halting-the-program">How to print the full traceback without halting the program?</a>)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>e.printStackTrace equivalent in python</strong></p>
</blockquote>
<p>In Java, this does the following (<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#printStackTrace%28%29" rel="noreferrer">docs</a>):</p>
<blockquote>
<pre><code>public void printStackTrace()
</code></pre>
<p>Prints this throwable and its backtrace to the standard error stream...</p>
</blockquote>
<p>This is used like this:</p>
<pre><code>try
{ 
// code that may raise an error
}
catch (IOException e)
{
// exception handling
e.printStackTrace();
}
</code></pre>
<p>In Java, <strong>the Standard Error stream is unbuffered so that output arrives immediately.</strong></p>
<h2>The same semantics in Python 2 are:</h2>
<pre><code>import traceback
import sys
try: # code that may raise an error
    pass 
except IOError as e: # exception handling
    # in Python 2, stderr is also unbuffered
    print &gt;&gt; sys.stderr, traceback.format_exc()
    # in Python 2, you can also from __future__ import print_function
    print(traceback.format_exc(), file=sys.stderr)
    # or as the top answer here demonstrates, use:
    traceback.print_exc()
    # which also uses stderr.
</code></pre>
<h2>Python 3</h2>
<p>In Python 3, we can get the traceback directly from the exception object (which likely behaves better for threaded code).
Also, <a href="https://docs.python.org/3/library/sys.html#sys.stderr" rel="noreferrer">stderr is line-buffered</a>, but the print function gets 
a flush argument, so this would be immediately printed to stderr: </p>
<pre><code>    print(traceback.format_exception(None, # &lt;- type(e) by docs, but ignored 
                                     e, e.__traceback__),
          file=sys.stderr, flush=True)
</code></pre>
<p><strong>Conclusion:</strong></p>
<p>In Python 3, therefore, <code>traceback.print_exc()</code>, although it uses <code>sys.stderr</code> <a href="https://hg.python.org/cpython/file/3.5/Lib/traceback.py" rel="noreferrer">by default</a>, would buffer the output, and you may possibly lose it. So to get as equivalent semantics as possible, in Python 3, use <code>print</code> with <code>flush=True</code>.</p>
</div>
<span class="comment-copy">If you're working inside some kind of container such as <a href="http://www.jython.org/" rel="nofollow noreferrer">Jython</a> and therefore cannot just print the trace, you can <a href="https://docs.python.org/3/library/traceback.html#traceback.format_exc" rel="nofollow noreferrer"><code>format_exc</code></a> instead to get a string.</span>
