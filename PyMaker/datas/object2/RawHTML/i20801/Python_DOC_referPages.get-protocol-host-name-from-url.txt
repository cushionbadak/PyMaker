<div class="post-text" itemprop="text">
<p>In my Django app, I need to get the host name from the referrer in <code>request.META.get('HTTP_REFERER')</code> along with its protocol so that from URLs like:</p>
<ul>
<li><a href="https://docs.google.com/spreadsheet/ccc?key=blah-blah-blah-blah#gid=1" rel="noreferrer">https://docs.google.com/spreadsheet/ccc?key=blah-blah-blah-blah#gid=1</a></li>
<li><a href="https://stackoverflow.com/questions/1234567/blah-blah-blah-blah">https://stackoverflow.com/questions/1234567/blah-blah-blah-blah</a></li>
<li><a href="http://www.example.com" rel="noreferrer">http://www.example.com</a></li>
<li><a href="https://www.other-domain.com/whatever/blah/blah/?v1=0&amp;v2=blah+blah" rel="noreferrer">https://www.other-domain.com/whatever/blah/blah/?v1=0&amp;v2=blah+blah</a> ...</li>
</ul>
<p>I should get:</p>
<ul>
<li><a href="https://docs.google.com/" rel="noreferrer">https://docs.google.com/</a></li>
<li><a href="https://stackoverflow.com/">https://stackoverflow.com/</a></li>
<li><a href="http://www.example.com" rel="noreferrer">http://www.example.com</a></li>
<li><a href="https://www.other-domain.com/" rel="noreferrer">https://www.other-domain.com/</a></li>
</ul>
<p>I looked over other related questions and found about urlparse, but that didn't do the trick since</p>
<pre><code>&gt;&gt;&gt; urlparse(request.META.get('HTTP_REFERER')).hostname
'docs.google.com'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to do it with <code>urlparse</code> (docs: <a href="https://docs.python.org/2/library/urlparse.html" rel="noreferrer">python2</a>, <a href="https://docs.python.org/3/library/urllib.parse.html" rel="noreferrer">python3</a>):</p>
<pre><code>from urllib.parse import urlparse
# from urlparse import urlparse  # Python 2
parsed_uri = urlparse('http://stackoverflow.com/questions/1234567/blah-blah-blah-blah' )
result = '{uri.scheme}://{uri.netloc}/'.format(uri=parsed_uri)
print(result)

# gives
'http://stackoverflow.com/'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/john-kurkowski/tldextract" rel="noreferrer">https://github.com/john-kurkowski/tldextract</a></p>
<p>This is a more verbose version of urlparse.  It detects domains and subdomains for you.</p>
<p>From their documentation:</p>
<pre><code>&gt;&gt;&gt; import tldextract
&gt;&gt;&gt; tldextract.extract('http://forums.news.cnn.com/')
ExtractResult(subdomain='forums.news', domain='cnn', suffix='com')
&gt;&gt;&gt; tldextract.extract('http://forums.bbc.co.uk/') # United Kingdom
ExtractResult(subdomain='forums', domain='bbc', suffix='co.uk')
&gt;&gt;&gt; tldextract.extract('http://www.worldbank.org.kg/') # Kyrgyzstan
ExtractResult(subdomain='www', domain='worldbank', suffix='org.kg')
</code></pre>
<p><code>ExtractResult</code> is a namedtuple, so it's simple to access the parts you want.</p>
<pre><code>&gt;&gt;&gt; ext = tldextract.extract('http://forums.bbc.co.uk')
&gt;&gt;&gt; ext.domain
'bbc'
&gt;&gt;&gt; '.'.join(ext[:2]) # rejoin subdomain and domain
'forums.bbc'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Python3 using <a href="http://docs.python.org/3/library/urllib.parse#urllib.parse.urlsplit">urlsplit</a>:</h3>
<pre><code>from urllib.parse import urlsplit
url = "http://stackoverflow.com/questions/9626535/get-domain-name-from-url"
base_url = "{0.scheme}://{0.netloc}/".format(urlsplit(url))
print(base_url)
# http://stackoverflow.com/
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pure string operations :):</p>
<pre><code>&gt;&gt;&gt; url = "http://stackoverflow.com/questions/9626535/get-domain-name-from-url"
&gt;&gt;&gt; url.split("//")[-1].split("/")[0].split('?')[0]
'stackoverflow.com'
&gt;&gt;&gt; url = "stackoverflow.com/questions/9626535/get-domain-name-from-url"
&gt;&gt;&gt; url.split("//")[-1].split("/")[0].split('?')[0]
'stackoverflow.com'
&gt;&gt;&gt; url = "http://foo.bar?haha/whatever"
&gt;&gt;&gt; url.split("//")[-1].split("/")[0].split('?')[0]
'foo.bar'
</code></pre>
<p>That's all, folks.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; url = 'http://stackoverflow.com/questions/1234567/blah-blah-blah-blah'
&gt;&gt;&gt; urlparse.urljoin(url, '/')
'http://stackoverflow.com/'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a slightly improved version:</p>
<pre><code>urls = [
    "http://stackoverflow.com:8080/some/folder?test=/questions/9626535/get-domain-name-from-url",
    "Stackoverflow.com:8080/some/folder?test=/questions/9626535/get-domain-name-from-url",
    "http://stackoverflow.com/some/folder?test=/questions/9626535/get-domain-name-from-url",
    "https://StackOverflow.com:8080?test=/questions/9626535/get-domain-name-from-url",
    "stackoverflow.com?test=questions&amp;v=get-domain-name-from-url"]
for url in urls:
    spltAr = url.split("://");
    i = (0,1)[len(spltAr)&gt;1];
    dm = spltAr[i].split("?")[0].split('/')[0].split(':')[0].lower();
    print dm
</code></pre>
<p>Output</p>
<pre><code>stackoverflow.com
stackoverflow.com
stackoverflow.com
stackoverflow.com
stackoverflow.com
</code></pre>
<p>Fiddle: <a href="https://pyfiddle.io/fiddle/23e4976e-88d2-4757-993e-532aa41b7bf0/?i=true" rel="noreferrer">https://pyfiddle.io/fiddle/23e4976e-88d2-4757-993e-532aa41b7bf0/?i=true</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Is there anything wrong with pure string operations:</p>
<pre><code>url = 'http://stackoverflow.com/questions/9626535/get-domain-name-from-url'
parts = url.split('//', 1)
print parts[0]+'//'+parts[1].split('/', 1)[0]
&gt;&gt;&gt; http://stackoverflow.com
</code></pre>
<p>If you prefer having a trailing slash appended, extend this script a bit like so:</p>
<pre><code>parts = url.split('//', 1)
base = parts[0]+'//'+parts[1].split('/', 1)[0]
print base + (len(url) &gt; len(base) and url[len(base)]=='/'and'/' or '')
</code></pre>
<p>That can probably be optimized a bit ...</p>
</div>
<div class="post-text" itemprop="text">
<p>if you think your url is valid then this will work all the time</p>
<pre><code>domain = "http://google.com".split("://")[1].split("/")[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a bit obtuse, but uses <code>urlparse</code> in both directions:</p>
<pre><code>import urlparse
def uri2schemehostname(uri):
    urlparse.urlunparse(urlparse.urlparse(uri)[:2] + ("",) * 4)
</code></pre>
<p>that odd <code>("",) * 4</code> bit is because urlparse expects a sequence of <em>exactly</em> <code>len(urlparse.ParseResult._fields)</code> = 6</p>
</div>
<div class="post-text" itemprop="text">
<p>If it contains less than 3 slashes thus you've it got and if not then we can find the occurrence between it:</p>
<pre><code>import re

link = http://forum.unisoftdev.com/something

slash_count = len(re.findall("/", link))
print slash_count # output: 3

if slash_count &gt; 2:
   regex = r'\:\/\/(.*?)\/'
   pattern  = re.compile(regex)
   path = re.findall(pattern, url)

   print path
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>urlparse</code> from the <code>urllib</code> library:</p>
<pre><code>from urllib.parse import urlparse
o = urlparse("http://www.example.com/br/pages/")
domain = "://".join([o.scheme, o.netloc])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know it's an old question, but I too encountered it today.
Solved this with an one-liner:</p>
<pre><code>import re
result = re.sub(r'(.*://)?([^/?]+).*', '\g&lt;1&gt;\g&lt;2&gt;', url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>to get domain/hostname and Origin*</p>
<pre><code>url = 'https://stackoverflow.com/questions/9626535/get-protocol-host-name-from-url'
hostname = url.split('/')[2] # stackoverflow.com
origin = '/'.join(url.split('/')[:3]) # https://stackoverflow.com
</code></pre>
<p>*<code>Origin</code> is used in <code>XMLHttpRequest</code> headers</p>
</div>
<span class="comment-copy">this answer <i>adds</i> a <code>/</code> to the third example <code>http://www.domain.com</code>, but I think this might be a shortcoming of the question, not of the answer.</span>
<span class="comment-copy">@TokenMacGuy: ya, my bad... didn't notice the missing <b>/</b></span>
<span class="comment-copy"><code>urlparse.urlparse()</code> returns a namedtuple-like result; you could use <code>{uri.scheme}://{uri.netloc}/'.format(uri=parsed_uri)</code> for readability.</span>
<span class="comment-copy">I don't think this is a good solution, as <code>netloc</code> is not domain: try <code>urlparse.urlparse('http://user:pass@example.com:8080')</code> and find it gives parts like <code>'user:pass@'</code> and <code>':8080'</code></span>
<span class="comment-copy">The urlparse module is renamed to urllib.parse in Python 3. So, <code>from urllib.parse import urlparse</code></span>
<span class="comment-copy">This is the correct answer for the question as written, how to get the DOMAIN name. The chosen solution provides the HOSTNAME, which I believe is what the author wanted in the first place.</span>
<span class="comment-copy">Good and simple option, but fails in some cases, e.g. <a href="https://foo.bar?haha" rel="nofollow noreferrer">foo.bar?haha</a></span>
<span class="comment-copy">@SimonSteinberger  :-) How'bout this : <code>url.split("//")[-1].split("/")[0].split('?')[0]</code> :-))</span>
<span class="comment-copy">Well spotted, Simon!</span>
<span class="comment-copy">For Python 3 the import is <code>from urllib.parse import urlparse</code>.</span>
<span class="comment-copy">IMHO the best solution, because simple and it considers all sorts of rare cases. Thanks!</span>
<span class="comment-copy">neither simple nor improved</span>
<span class="comment-copy">it's not wrong but we got a tool that already does the work, let's not reinvent the wheel ;)</span>
