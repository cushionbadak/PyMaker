<div class="post-text" itemprop="text">
<p>The closest was this one <a href="https://stackoverflow.com/questions/3223043/how-do-i-sum-the-columns-in-2d-list">summing columns</a>.</p>
<p>So I'll do something similar in my question:</p>
<p>Say I've a Python 2D list as below:</p>
<pre><code>my_list =  [ [1,2,3,4],
             [2,4,5,6] ]
</code></pre>
<p>I can get the row totals with a list comprehension:</p>
<pre><code>row_totals = [ sum(x) for x in my_list ]
</code></pre>
<p>In one line, how can I sum the entire 2d-array?</p>
<pre><code>27
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do as easy as </p>
<pre><code>sum(map(sum, my_list))
</code></pre>
<p>or alternatively</p>
<pre><code>sum(sum(x) for x in my_list))
</code></pre>
<p>and call it a day, if you don't expect more than 2 dimensions. Note that the first solution is most likely not the fastest (as in execution time) solution, due to the usage of <code>map()</code>. Benchmark and compare as necessary.</p>
<p>Finally, if you find yourself using multidimensional arrays, consider using <a href="http://numpy.scipy.org/">NumPy</a> and its superior array-friendly functions. Here's a short excerpt for your problem:</p>
<pre><code>import numpy as np

my_list = np.array([[1,2,3,4], [2,4,5,6]])
np.sum(my_list)
</code></pre>
<p>This would work for any number of dimensions your arrays might have.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; sum ( [ sum(x) for x in [[1,2,3,4], [2,4,5,6]] ] )
27
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution using <a href="http://docs.python.org/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; my_list = [ [1,2,3,4], [2,4,5,6] ]
&gt;&gt;&gt; sum(chain(*my_list))
27
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; my_list = [[1,2,3,4], [2,4,5,6]]
&gt;&gt;&gt; sum(chain.from_iterable(my_list))
27
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use sum to first add the inner lists together and then sum the resulting flattened list:</p>
<pre><code>&gt;&gt;&gt; my_list = [ [1,2,3,4], [2,4,5,6] ]

&gt;&gt;&gt; sum(my_list, [])
[1, 2, 3, 4, 2, 4, 5, 6]

&gt;&gt;&gt; sum(sum(my_list, []))
27
</code></pre>
</div>
<span class="comment-copy"><code>map</code> is not inherently slow.</span>
<span class="comment-copy">@Marcin it is in Python 2.x.</span>
<span class="comment-copy">@katrielalex: The numbers disagree with you: <a href="http://ideone.com/4RXfR" rel="nofollow noreferrer">ideone.com/4RXfR</a> vs <a href="http://ideone.com/6tOEJ" rel="nofollow noreferrer">ideone.com/6tOEJ</a></span>
<span class="comment-copy">@Marcin you're missing the point -- if you use a <i>list</i> comprehension then the advantage of <code>map</code> goes away. Otherwise it allocates an unnecessary list.</span>
<span class="comment-copy">@katrielalex No, I don't think I am missing the point. In a fair comparison, map is faster. In fact, you can check those links again - I've updated them to use sum of map vs sum of generator expression.</span>
<span class="comment-copy">Use a generator not a list comprehension (<code>()</code> not <code>[]</code>).</span>
<span class="comment-copy">@katrielalex: you are right, as well as mindcorrosive. I took OP code to test, then forgot to remove squares.</span>
<span class="comment-copy">What does the * stands for?</span>
<span class="comment-copy">It's the "unpacking operator" (<code>*</code> for lists/tuples, <code>**</code> for dictionaries): <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">Does your answer add anything on top of the other answers here?</span>
