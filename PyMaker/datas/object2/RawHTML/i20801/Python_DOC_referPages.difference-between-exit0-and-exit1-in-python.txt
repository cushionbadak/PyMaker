<div class="post-text" itemprop="text">
<p>What's the difference between <code>exit(0)</code> and <code>exit(1)</code> in Python?</p>
<p>I tried looking around but didn't find a specific question on these lines. If it's already been answered, a link would be sufficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>0 and 1 are the exit codes.</p>
<p><code>exit(0)</code> means a clean exit without any errors / problems</p>
<p><code>exit(1)</code> means there was some issue / error / problem and that is why the program is exiting.</p>
<p>This is not Python specific and is pretty common. A non-zero exit code is treated as an abnormal exit, and at times, the error code indicates what the problem was. A zero error code means a successful exit.</p>
<p>This is useful for other programs, shell, caller etc. to know what happened with your program and proceed accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p>This determines the <a href="http://en.wikipedia.org/wiki/Exit_status" rel="noreferrer">exit status</a> of the program when it finishes running (generally, 0 for success and 1 for error).</p>
<p>It is not unique to Python, and the exact effect depends on your operating system and how the program is called (though 99% of the time, if you're just running Python scripts, it doesn't matter).</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard convention for all C programs, including Python, is for <code>exit(0)</code> to indicate success, and <code>exit(1)</code> or any other non-zero value (in the range 1..255) to indicate failure.  Any value outside the range 0..255 is treated modulo 256 (the exit status is stored in an 8-bit value).  Sometimes, that will be treated as signed (so you might see -128, -127, etc) but more usually it is treated as unsigned.</p>
<p>This status is available to the code that invoked Python.  This convention applies across platforms, though the meaning of non-zero exit status can vary on different platforms.</p>
</div>
<div class="post-text" itemprop="text">
<p>The number you pass to the <code>exit()</code> function is simply your program's return code, which is given to the operating system. From your program's point of view, there is no difference: execution will end in both cases, and the value supplied to the function will be given to the OS. But some tools and scripts take into account the program's exit code. Most tools return 0 when they succeed and nonzero to indicate an error.</p>
<p>So, if your program will be run from a script, an automated tool or from some other software that takes into account the return code (such as an IDE), you must be careful on what you return.</p>
<p>When in doubt, just return 0 to indicate everything is OK.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>exit(0)</code>: This causes the program to exit with a successful termination.</p>
<p><code>exit(1)</code>: This causes the program to exit with a system-specific meaning.</p>
<p>On many systems, <code>exit(1)</code> signals some sort of failure, however there
is no guarantee.</p>
<p>As I recall, the C standard only recognizes three standard exit
values:</p>
<ul>
<li><code>EXIT_SUCCESS</code> -- successful termination</li>
<li><code>EXIT_FAILURE</code> -- unsuccessful termination</li>
<li><code>0</code> -- same as <code>EXIT_SUCCESS</code></li>
</ul>
</div>
<span class="comment-copy">Here's a link to <a href="https://docs.python.org/3/library/constants.html#constants-added-by-the-site-module" rel="nofollow noreferrer"><code>exit()</code> in the docs</a>, which took me forever to find.</span>
<span class="comment-copy">keep in mind: <a href="https://docs.python.org/3/library/constants.html#constants-added-by-the-site-module" rel="nofollow noreferrer"><code>The site module (which is imported automatically during startup, except if the -S command-line option is given) adds several constants to the built-in namespace. They are useful for the interactive interpreter shell and should not be used in programs</code></a>, instead, use <a href="https://docs.python.org/2/library/sys.html#sys.exit" rel="nofollow noreferrer"><code>sys.exit()</code></a></span>
<span class="comment-copy">Just realised there is <code>exit(0)</code> which is discussed in this question and also one with an underscore <code>_exit(0)</code>, the difference is explained <a href="https://stackoverflow.com/questions/9591350/what-is-difference-between-sys-exit0-and-os-exit0">here</a></span>
<span class="comment-copy">The nice thing about these codes is that they can be used directly in an <code>if</code> statement in a <code>bash</code> wrapper, so further action can be taken whether or not the Python program succeeds or whether it raised a non-zero status.</span>
<span class="comment-copy">weird, if 0 is False and 1 is True in Python, you'd think the numbers would mean the opposite</span>
<span class="comment-copy">And what about exit(-1) ?</span>
<span class="comment-copy">@Faizan: The exit code is an 8-bit value on Unix.  If you invoke <code>exit(-1)</code>, the value is equivalent to <code>exit(255)</code> - the least significant 8 bits are relayed to the calling program (shell or whatever).</span>
