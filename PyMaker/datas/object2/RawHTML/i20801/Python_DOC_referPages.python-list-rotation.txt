<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong><br/>
<a href="https://stackoverflow.com/questions/2150108/efficient-way-to-shift-a-list-in-python">Efficient way to shift a list in python</a> </p>
</blockquote>
<p>I'd like to rotate a Python list by an arbitrary number of items to the right or left (the latter using a negative argument).</p>
<p>Something like this:</p>
<pre><code>&gt;&gt;&gt; l = [1,2,3,4]
&gt;&gt;&gt; l.rotate(0)
[1,2,3,4]
&gt;&gt;&gt; l.rotate(1)
[4,1,2,3]
&gt;&gt;&gt; l.rotate(-1)
[2,3,4,1]
&gt;&gt;&gt; l.rotate(4)
[1,2,3,4]
</code></pre>
<p>How might this be done?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def rotate(l, n):
    return l[-n:] + l[:-n]
</code></pre>
<p>More conventional direction:</p>
<pre><code>def rotate(l, n):
    return l[n:] + l[:n]
</code></pre>
<p>Example:</p>
<pre><code>example_list = [1, 2, 3, 4, 5]

rotate(example_list, 2)
# [3, 4, 5, 1, 2]
</code></pre>
<p>The arguments to <code>rotate</code> are a list and an integer denoting the shift. The function creates two new lists using <a href="https://stackoverflow.com/q/509211/553404">slicing</a> and returns the concatenatenation of these lists. The <code>rotate</code> function does not modify the input list.</p>
</div>
<div class="post-text" itemprop="text">
<p>If applicable, you could use <code>collections.deque</code> as a solution:</p>
<pre><code>import collections

d = collections.deque([1,2,3,4,5])
d.rotate(3)

print d
&gt;&gt;&gt; deque([3, 4, 5, 1, 2])
</code></pre>
<p>As a bonus, I'd expect it to be faster than in-built list.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following function will rotate the list <code>l</code>, <code>x</code> spaces to the right:</p>
<pre><code>def rotate(l, x):
  return l[-x:] + l[:-x]
</code></pre>
<p>Note that this will only return the original list if <code>x</code> is outside the range <code>[-len(l), len(l)]</code>.  To make it work for all values of <code>x</code>, use:</p>
<pre><code>def rotate(li, x):
  return li[-x % len(li):] + li[:-x % len(li)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; l=[1,2,3,4]
&gt;&gt;&gt; l[1:]+l[:1]
[2, 3, 4, 1]
&gt;&gt;&gt; l=[1,2,3,4]
&gt;&gt;&gt; l[2:]+l[:2]
[3, 4, 1, 2]
&gt;&gt;&gt; l[-1:]+l[:-1]
[4, 1, 2, 3]
</code></pre>
<p>A general rotate <code>n</code> to the left (positive y in the call to <code>rotate</code>) or right (negative y) then: </p>
<pre><code>def rotate(l, y=1):
   if len(l) == 0:
      return l
   y = y % len(l)    # Why? this works for negative y

   return l[y:] + l[:y]
</code></pre>
<p>If you want the direction of rotation to be the same as your example, just negate <code>y</code> in rotate. </p>
<pre><code>def rotate(l, y=1):
   if len(l) == 0:
      return l
   y = -y % len(l)     # flip rotation direction

   return l[y:] + l[:y]
</code></pre>
</div>
<span class="comment-copy">I don't use Python, but if you have a push/pop method, you can l.push(l.pop()). Then for loop it. That would cover moving forward.</span>
<span class="comment-copy">Does <a href="http://stackoverflow.com/questions/2150108/efficient-way-to-shift-a-list-in-python">this question</a> help?</span>
<span class="comment-copy">@DrewNoakes: both show up in the first page of SO search results for "python list rotate".  Need to use shorter forms of the words, I think. ;-)</span>
<span class="comment-copy">The other question is specifically about efficiency; this one may cover slightly different ground.</span>
<span class="comment-copy">This "duplicate", and the answers here were more useful than the original.  Thanks!</span>
<span class="comment-copy">Nice and simple.  It rotates the opposite direction to that specified in the question though.</span>
<span class="comment-copy">@S.Lott: One could argue that the OP's direction is backwards in his example. Most Python tutorials on slice idiom with a list rotation has the sign convention the same direction as Mr E first rotation function...</span>
<span class="comment-copy">I'd add <code>n = n % len(n)</code> to make this work for <code>n &gt; len(n)</code>.</span>
<span class="comment-copy">Not sure what you mean. The function doesn't modify the input parameter, it returns a new list. Probably best to ask a new question about your issue.</span>
<span class="comment-copy">@user1071136 I think you mean <code>n = n % len(l)</code>.</span>
<span class="comment-copy">For future readers: <code>collections.deque rotate()</code> is faster than slicing according to <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">wiki.python.org/moin/TimeComplexity</a></span>
<span class="comment-copy">shouldn't it be mentioned that collections is rotating to the left by default?</span>
<span class="comment-copy">@HasanIqbalAnik deque.rotate rotates to the right <a href="https://docs.python.org/3/library/collections.html#collections.deque.rotate" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Is there a way to this without <code>return</code> ? I tried <code>l=l[n:] + l[:n]</code> but when I try to return a <code>l</code> I get the original.</span>
<span class="comment-copy">@GinKin Why without a return?  That's how you return things from a function.  I mean, you could use a lambda, but that just makes the return implicit.</span>
<span class="comment-copy">I want to make it 'in place' so it won't return anything and if I'll type <code>&gt;&gt;&gt; l</code> after running the function I'll get a the rotated list, not the original.</span>
<span class="comment-copy">@GinKin Instead of <code>return ...</code> you can say <code>l[:] = ...</code> and it will do it in place.  I don't recommend this, though.</span>
<span class="comment-copy">@GinKin Functions in Python are generally expected to be side-effect free; normally you would only change one of the parameters if it was the first (<code>self</code>) argument to a method.  It's just a convention, though.</span>
