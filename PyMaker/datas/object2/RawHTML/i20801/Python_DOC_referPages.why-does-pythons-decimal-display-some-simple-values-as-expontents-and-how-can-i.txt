<div class="post-text" itemprop="text">
<p>I understand the value of exponents, but typically when displaying decimal values to an end user, it's easier for the layman to understand normal decimal values. When I perform the following, I'd rather the display value of the decimal be <code>50</code>, instead of:</p>
<pre><code>&gt;&gt;&gt; Decimal('22679.6185') / Decimal('28.349523125') / 16
Decimal('5E+1')
</code></pre>
<p>Is this possible without quantizing or doing anything to modify the actual value? Also, why does it display a short value like this as an exponent and some longer values in their normal decimal form? Is this a product of division (irony intended)?</p>
</div>
<div class="post-text" itemprop="text">
<p>See: <a href="https://stackoverflow.com/questions/144218/significant-figures-in-the-decimal-module">Significant figures in the decimal module</a> (which admittedly tells you to use .quantize()).  The main problem is that you must keep track of the number of significant digits manually.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're seeing the default representation, which you can change by subclassing <code>Decimal</code> and overriding <code>__str__</code> and/or <code>__repr__</code>.</p>
<p>Note that <code>__repr__</code> is just implemented like <code>return "Decimal('%s')" % str(self)</code>, but you should try and preserve the invariant that <code>eval(repr(d)) == d</code>.  </p>
<p>Probably what you're more interested in is not modifying the default str output or the representation of the <em>class</em>, but just controlling the display format of an <em>instance</em>. In this case, you should just be able to use the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer"><code>str.format</code></a> features, e.g.</p>
<pre><code>&gt;&gt;&gt; num = Decimal('5E+1')
&gt;&gt;&gt; num
Decimal('5E+1')
&gt;&gt;&gt; print("{:f}".format(num))
50
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Directly parse the Decimal to int or float you want.</p>
<pre><code>int(decimal.Decimal('22679.6185') / decimal.Decimal('28.349523125') / 16)
</code></pre>
<p>or</p>
<pre><code>float(decimal.Decimal('22679.6185') / decimal.Decimal('28.349523125') / 16)
</code></pre>
<p>22679.6185 / 28.349523125 is exactly equals 800. and it shows Decimal("8E2") without anything wrong.</p>
<p>the precision depends on the context  object. check it by using "decimal.getcontext()".It looks like following:</p>
<pre><code>Context(prec=28, rounding=ROUND_HALF_EVEN, ....)
</code></pre>
<p>the "prec" is what you want. Try this.</p>
<pre><code> decimal.Decimal("42.5") / decimal.Decimal("37.1")
</code></pre>
<p>It results in 28 significant figures.</p>
</div>
<span class="comment-copy"><a href="http://en.wikipedia.org/wiki/Significant_figures" rel="nofollow noreferrer">en.wikipedia.org/wiki/Significant_figures</a></span>
<span class="comment-copy"><code>Decimal('22679.6185') / Decimal('28.349523125')</code> returns <code>Decimal('8E+2')</code>, but in theory the result should contain 9 significant figures. Why would it return only 1 significant figure?</span>
<span class="comment-copy">I don't think anyone else understood the question I was asking, which was how to display the decimal normally (without an exponential representation of it), so I appreciate your answer, even though it isn't what I was hoping to hear :)</span>
<span class="comment-copy">Ah ... in that case, you might want to start with <code>.quantize()</code>, then go through <code>.as_tuple()</code> and format it manually.  This is kind of a pain in the butt but is what I do in my "money" module, which I plan to clean up someday and put on github or something. :-)  (However I'm doing formatting with optional leading or trailing CR, DB, parentheses, and all the other accounting things, and I even handle Indian Rupee formatting with lakh and crore.)</span>
<span class="comment-copy">Also: if your python is new enough (2.7), the <code>'{:f}'.format()</code> method (@wim below) works great.  If not ... (I'm stuck with python back to 2.5 if not earlier, so, yeah :-) )</span>
<span class="comment-copy">Is there any reason not to use <code>'{:f}'</code> rather than <code>'{:2f}'</code> for <code>format</code>?</span>
<span class="comment-copy">Not that I can think of, it may have just been a case of me being an idiot 6 years ago?  edited.</span>
