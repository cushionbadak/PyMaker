<div class="post-text" itemprop="text">
<p>If I have a URL that, when submitted in a web browser, pops up a dialog box to save a zip file, how would I go about catching and downloading this zip file in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/urllib2.html#urllib2.urlopen" rel="nofollow noreferrer"><code>urllib2.urlopen</code></a>. The return value is a file-like object that you can <code>read()</code>, pass to <a href="https://docs.python.org/2/library/zipfile.html" rel="nofollow noreferrer"><code>zipfile</code></a> and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>As far as I can tell, the proper way to do this is:</p>
<pre><code>import requests, zipfile, StringIO
r = requests.get(zip_file_url, stream=True)
z = zipfile.ZipFile(StringIO.StringIO(r.content))
z.extractall()
</code></pre>
<p>of course you'd want to check that the GET was successful with <code>r.ok</code>.</p>
<p>For python 3+, sub the StringIO module with the <a href="https://docs.python.org/3/library/io.html" rel="noreferrer">io</a> module and use BytesIO instead of StringIO: <a href="https://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit" rel="noreferrer">Here</a> are release notes that mention this change. </p>
<pre><code>import requests, zipfile, io
r = requests.get(zip_file_url)
z = zipfile.ZipFile(io.BytesIO(r.content))
z.extractall()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's what I got to work in Python 3:</p>
<pre><code>import zipfile, urllib.request, shutil

url = 'http://www....myzipfile.zip'
file_name = 'myzip.zip'

with urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:
    shutil.copyfileobj(response, out_file)
    with zipfile.ZipFile(file_name) as zf:
        zf.extractall()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With the help of <a href="http://masnun.com/2016/09/18/python-using-the-requests-module-to-download-large-files-efficiently.html" rel="nofollow noreferrer">this blog post</a>, I've got it working with just <code>requests</code>. The point of the weird <code>stream</code> thing is so we don't need to call <code>content</code> on large requests, which would require it to all be processed at once, clogging the memory. The <code>stream</code> avoids this by iterating through the data one chunk at a time.</p>
<pre><code>url = 'https://www2.census.gov/geo/tiger/GENZ2017/shp/cb_2017_02_tract_500k.zip'
target_path = 'alaska.zip'

response = requests.get(url, stream=True)
handle = open(target_path, "wb")
for chunk in response.iter_content(chunk_size=512):
    if chunk:  # filter out keep-alive new chunks
        handle.write(chunk)
handle.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Either use urllib2.urlopen, or you could try using the excellent <a href="http://docs.python-requests.org/en/latest/index.html" rel="nofollow"><code>Requests</code></a> module and avoid urllib2 headaches:</p>
<pre><code>import requests
results = requests.get('url')
#pass results.content onto secondary processing...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to @yoavram for the above solution,
 my url path linked to a zipped <strong>folder</strong>, and encounter an error of BADZipfile 
 (file is not a zip file), and it was strange if I tried several times it 
 retrieve the url and unzipped it all of sudden so I amend the solution a little 
 bit. using the <em>is_zipfile</em> method as per <a href="https://docs.python.org/3/library/zipfile.html#zipfile.is_zipfile" rel="nofollow noreferrer">here</a> </p>
<pre><code>r = requests.get(url, stream =True)
check = zipfile.is_zipfile(io.BytesIO(r.content))
while not check:
    r = requests.get(url, stream =True)
    check = zipfile.is_zipfile(io.BytesIO(r.content))
else:
    z = zipfile.ZipFile(io.BytesIO(r.content))
    z.extractall()
</code></pre>
</div>
<span class="comment-copy">I tried section <b>Downloading a binary file and writing it to disk</b> of <a href="http://www.compciv.org/practicum/shakefiles/b-downloading-the-shakespeare-zip/" rel="nofollow noreferrer">this page</a> which worked as a chram.</span>
<span class="comment-copy">Thanks for this answer. I used it to solve <a href="http://stackoverflow.com/questions/36779870/python-requests-not-returning-same-header-as-browser-request-curl/36990934#36990934">my issue getting a zip file with requests</a>.</span>
<span class="comment-copy">yoavram, in your code- where i enter the url of the webpage?</span>
<span class="comment-copy">If you'd like to save the downloaded file in a different location, replace <code>z.extractall()</code> with <code>z.extractall("/path/to/destination_directory")</code></span>
<span class="comment-copy">If you just want to save the file from the url you can do: <code>urllib.request.urlretrieve(url, filename)</code>.</span>
<span class="comment-copy">To help others connect the dots it took me 60minutes too long to, you can then use <code>pd.read_table(z.open('filename'))</code> with the above. Useful if you have a zip url link that contains multiple files and you're only interested in loading one.</span>
<span class="comment-copy">Answers should not rely on links for the bulk of their content. Links can go dead, or the content on the other side can be changed to no longer answer the question. Please edit your answer to include a summary or explanation of the information you link points to.</span>
<span class="comment-copy">But how do you parse results.content int a zip?</span>
<span class="comment-copy">Use the <code>zipfile</code> module:  <code>zip = zipfile.ZipFile(results.content)</code>.  Then just parse through the files using <code>ZipFile.namelist()</code>, <code>ZipFile.open()</code>, or <code>ZipFile.extractall()</code></span>
