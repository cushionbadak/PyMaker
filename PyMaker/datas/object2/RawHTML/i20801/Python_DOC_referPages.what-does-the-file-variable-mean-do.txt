<div class="post-text" itemprop="text">
<pre><code>A = os.path.join(os.path.dirname(__file__), '..')

B = os.path.dirname(os.path.realpath(__file__))

C = os.path.abspath(os.path.dirname(__file__))
</code></pre>
<p>I usually just hardwire these with the actual path.  But there is a reason for these statements that determine path at runtime, and I would really like to understant the os.path module so I can start using it.</p>
</div>
<div class="post-text" itemprop="text">
<p>When a module is loaded in Python, <code>__file__</code> is set to its name. You can then use that with other functions to find the directory that the file is located in.</p>
<p>Taking your examples one at a time:</p>
<pre><code>A = os.path.join(os.path.dirname(__file__), '..')
# A is the parent directory of the directory where program resides.

B = os.path.dirname(os.path.realpath(__file__))
# B is the canonicalised (?) directory where the program resides.

C = os.path.abspath(os.path.dirname(__file__))
# C is the absolute path of the directory where the program resides.
</code></pre>
<p>You can see the various values returned from these here:</p>
<pre><code>import os
print __file__
print os.path.join(os.path.dirname(__file__), '..')
print os.path.dirname(os.path.realpath(__file__))
print os.path.abspath(os.path.dirname(__file__))
</code></pre>
<p>and make sure you run it from different locations (such as <code>./text.py</code>, <code>~/python/text.py</code> and so forth) to see what difference that makes.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just want to address some confusion first.  <code>__file__</code> is not a wildcard it is an attribute.  Double underscore attributes and methods are considered to be "special" by convention and serve a special purpose.</p>
<p><a href="http://docs.python.org/reference/datamodel.html">http://docs.python.org/reference/datamodel.html</a> shows many of the special methods and attributes, if not all of them.</p>
<p>In this case <code>__file__</code> is an attribute of a module (a module object).  In Python a <code>.py</code> file is a module.  So <code>import amodule</code> will have an attribute of <code>__file__</code> which means different things under difference circumstances.</p>
<p>Taken from the docs:</p>
<blockquote>
<p><code>__file__</code> is the pathname of the file from which the module was loaded, if it was loaded from a file. The <code>__file__</code> attribute is not present
  for C modules that are statically linked into the interpreter; for
  extension modules loaded dynamically from a shared library, it is the
  pathname of the shared library file.</p>
</blockquote>
<p>In your case the module is accessing it's own <code>__file__</code> attribute in the global namespace.</p>
<p>To see this in action try:</p>
<pre><code># file: test.py

print globals()
print __file__
</code></pre>
<p>And run:</p>
<pre><code>python test.py

{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__file__':
 'test_print__file__.py', '__doc__': None, '__package__': None}
test_print__file__.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Per the <a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p><code>__file__</code> is the pathname of the file from which the module was
  loaded, if it was loaded from a file. The <code>__file__</code> attribute is not
  present for C modules that are statically linked into the interpreter;
  for extension modules loaded dynamically from a shared library, it is
  the pathname of the shared library file.</p>
</blockquote>
<p>and <a href="https://docs.python.org/2/reference/simple_stmts.html?highlight=__file__" rel="noreferrer">also</a>:</p>
<blockquote>
<p><code>__file__</code> is to be the “path” to the file unless the module is built-in (and thus listed in <code>sys.builtin_module_names</code>) in which case the attribute is not set.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>__file__</code> combined with various <code>os.path</code> modules lets all paths be relative the current module's directory location.  This allows your modules/projects to be portable to other machines.</p>
<p>In your project you do:</p>
<pre><code>A = '/Users/myname/Projects/mydevproject/somefile.txt'
</code></pre>
<p>and then try to deploy it to your server with a deployments directory like <code>/home/web/mydevproject/</code> then your code won't be able to find the paths correctly.</p>
</div>
<span class="comment-copy">Obviously, it's not a wildcard.</span>
<span class="comment-copy">Its a "magic" variable; wildcard means something quite different.</span>
<span class="comment-copy">Good answer, but see other an important detail from other answers: <code>__file__</code> is NOT defined in all cases, e.g. statically linked C modules.  We can't count on <code>__file__</code> always being available.</span>
<span class="comment-copy">In interpreter, all examples return <code>name '__file__' is not defined</code>.</span>
<span class="comment-copy">@user1063287 Look at DemoUser's answer; <code>__file__</code> is the pathname of the file from which the module was loaded, if it was loaded from a file. This means <code>__file__</code> will only work when you run it as a script not in interpreter.(unless you import it in interpreter...)</span>
