<div class="post-text" itemprop="text">
<p>I'd like to get a list of all of Pythons keywords as strings. It would also be rather nifty if I could do a similar thing for built in functions.</p>
<p>Something like this :</p>
<pre><code>import syntax
print syntax.keywords
# prints ['print', 'if', 'for', etc...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You asked about <strong>statements</strong>, while showing <strong>keywords</strong> in your output example.</p>
<p>If you're looking for <strong>keywords</strong>, they're all listed in the <a href="http://docs.python.org/library/keyword.html"><code>keyword</code></a> module:</p>
<pre><code>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.kwlist
['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif',
 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import',
 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try',
 'while', 'with', 'yield']
</code></pre>
<p>From the <a href="http://docs.python.org/library/keyword.html#keyword.kwlist"><code>keyword.kwlist</code> doc</a>:</p>
<blockquote>
<p>Sequence containing all the keywords defined for the interpreter. If any keywords are defined to only be active when particular <code>__future__</code> statements are in effect, these will be included as well.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The built-in functions are in a module called <code>__builtins__</code>, so:</p>
<pre><code>dir(__builtins__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The closest approach I can think of is the following:</p>
<pre><code>from keyword import kwlist
print kwlist
</code></pre>
<p>The standard <a href="http://docs.python.org/library/keyword.html" rel="noreferrer">keyword</a> module is generated automatically.  For other things related to Python parsing from Python, check the <a href="http://docs.python.org/library/language.html" rel="noreferrer">language services</a> set of modules.</p>
<p>Regarding listing the builtins I'm not clear if you're asking for items in the <code>__builtin__</code> module or functions in that package that are implemented directly in the CPython interpreter:</p>
<pre><code>import __builtin__ as B
from inspect import isbuiltin

# You're either asking for this:
print [name for name in dir(B) if isbuiltin(getattr(B, name))]

# Or this:
print dir(B)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>&gt;&gt;&gt; help()</code></p>
<p><strong>help&gt; keywords</strong></p>
<p>Here is a list of the Python keywords.  Enter any keyword to get more help.</p>
<p><code>False               def                 if                  raise</code></p>
<p><code>None                del                 import              return</code></p>
<p><code>True                elif                in                  try</code></p>
<p><code>and                 else                is                  while</code></p>
<p><code>as                  except              lambda              with</code></p>
<p><code>assert              finally             nonlocal            yield</code></p>
<p><code>break               for                 not</code> </p>
<p><code>class               from                or</code> </p>
<p><code>continue            global              pass</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Or you can <code>import</code> <code>builtins</code>:</p>
<pre><code>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; dir(builtins)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
&gt;&gt;&gt; 
</code></pre>
<p>OR (this does not contain errors and stuff with <code>__</code> beside them):</p>
<pre><code>&gt;&gt;&gt; help('keywords')

Here is a list of the Python keywords.  Enter any keyword to get more help.

False               def                 if                  raise
None                del                 import              return
True                elif                in                  try
and                 else                is                  while
as                  except              lambda              with
assert              finally             nonlocal            yield
break               for                 not                 
class               from                or                  
continue            global              pass                
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Get a list of all of Pythons keywords</p>
</blockquote>
<ul>
<li>2018-06-07 </li>
</ul>
<p>The standard keyword module is generated automatically (a Quine)
<a href="https://en.wikipedia.org/wiki/Quine_(computing)" rel="nofollow noreferrer">Quine (computing)</a></p>
<pre><code>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
&gt;&gt;&gt; len(keyword.kwlist)
33
</code></pre>
<p>I categorized the keywords for further reference.</p>
<pre><code>keywords_33=[
    ('file_2', ['with', 'as']),
    ('module_2', ['from', 'import']),
    ('constant_3', {'bool': ['False', 'True'], 
                    'none': ['None']}),
    ('operator_5',
            {'logic': ['and', 'not', 'or'],
            'relation': ['is', 'in']}),
    ('class_1', ['class']),
    ('function_7',
            ['lambda','def','pass',
            'global','nonlocal',
            'return','yield']),
    ('loop_4', ['while', 'for', 'continue', 'break']),
    ('condition_3', ['if', 'elif', 'else']),
    ('exception_4', ['try', 'raise','except', 'finally']),
    ('debug_2', ['del','assert']),
]
</code></pre>
</div>
<span class="comment-copy">What string would you expect in this list for assignment statements?  Or for expression statements?  Or would you rather like a list of all keywords?</span>
<span class="comment-copy">Anyway: See the Python language documentation: <a href="http://docs.python.org/reference/simple_stmts.html" rel="nofollow noreferrer">Simple statements</a>, <a href="http://docs.python.org/reference/compound_stmts.html" rel="nofollow noreferrer">Compund statements</a> and <a href="http://docs.python.org/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">Keywords</a>.</span>
<span class="comment-copy">Could you provide some background for why you need that?</span>
<span class="comment-copy">Rik Poggi, I'm going to write a simple syntax highlighting scheme.</span>
<span class="comment-copy">You might be happy with <code>ast</code> module, which allows you to do better than "simple". Check this out: <code>import ast; ast.dump(ast.parse("x = 0\nwhile x &lt; 10:\n  print(x)\n  x += 2"))</code></span>
<span class="comment-copy">I didn't post this answer since the OP asked for "statements", not "keywords", though it is quite possible this is the answer the OP is looking for.</span>
<span class="comment-copy">This will work for my purposes, thanks!</span>
<span class="comment-copy">TBH I just looked at he's example and didn't even noticed that. All <code>print</code>, <code>for</code> and <code>if</code> are in the list above, so... Anyway I'll put a warning in the answer for the users to come.</span>
<span class="comment-copy">If this code is in an imported module, I think it would be <code>__builtins__.keys()</code> instead. Or in Python 3, <code>import builtins</code> then <code>dir(builtins)</code> regardless of module. <a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">docs.python.org/3/reference/executionmodel.html</a> "By default, when in the <code>__main__</code> module, <code>__builtins__</code> is the built-in module <code>builtins</code>; when in any other module, <code>__builtins__</code> is an alias for the dictionary of the <code>builtins</code> module itself."</span>
