<div class="post-text" itemprop="text">
<p>I want to move an object and scroll the canvas window for follow the object  continuously with the <code>Timer</code> function from the <code>threading</code> module, 
here is an executable example</p>
<pre><code>from tkinter import *
from threading import Timer

x_movement = 3
def move_Timer(object):
    canvas.move(object, x_movement, 0)
    canvas.xview_scroll(3, UNITS)
    Timer(30/1000, lambda: move_Timer(object)).start()


def move_after(object):
    canvas.move(object, x_movement, 0)
    canvas.xview_scroll(3, UNITS)
    master.after(30, lambda: move_after(object))


master = Tk()

canvas_width = 1000
canvas_height = 600
canvas_scrollregion_width = 3000
canvas_scrollregion_height = 3000
canvas = Canvas(master, width=canvas_width, height=canvas_height, bg="black")
canvas.configure(scrollregion=(0, 0, canvas_scrollregion_width,     canvas_scrollregion_height), yscrollincrement='1', xscrollincrement='1')
x = (master.winfo_screenwidth() / 2) - (canvas_width // 2)
y = (master.winfo_screenheight() / 2) - (canvas_height // 2)
master.geometry('%dx%d+%d+%d' % (canvas_width + 4, canvas_height + 4, x, y))
canvas.pack()

x1, y1 = canvas_scrollregion_width/2, canvas_scrollregion_height/2
ball = canvas.create_oval(x1, y1, x1 + 50, y1 + 50, fill="red")
canvas.xview_moveto((x1 - canvas_width/2)/canvas_scrollregion_width)
canvas.yview_moveto((y1 - canvas_height/2)/canvas_scrollregion_height)


master.bind("d", lambda event: move_Timer(ball))
master.bind('&lt;Right&gt;', lambda event: move_after(ball))
master.bind("&lt;Button-1&gt;", lambda event: print(canvas.canvasx(event.x),canvas.canvasy(event.y)))
master.mainloop()
</code></pre>
<p>In this example there are two functions, the first <code>move_Timer(object)</code> that move the object using <code>Timer</code> (in the example is activated by pressing the <code>d</code> key) and the second <code>move_after(object)</code> that moves the object using <code>after</code> (in the example is activated by pressing the <code>arrow_right</code> key).
The problem is that with the first function when the object starts to move it starts to vibrate too while with the second function the object movement is correct. I don't understand why the object vibrate when i use the Timer function, i need to use it for not overload the main loop.
I'm working on Windows 10 with python 3</p>
</div>
<div class="post-text" itemprop="text">
<p>It vibrate because x_movement doesn't change never and even y never change.</p>
<p>I've do a little change to demonstrate this.</p>
<p>I've introduce the y variable...;)</p>
<pre><code>def move_Timer(object,y):
    canvas.move(object, x_movement, y)
    canvas.xview_scroll(3, UNITS)
    #master.after(30, lambda: move_after(object))
    y +=1
    t =Timer(30/1000, lambda: move_Timer(object,y))
    t.start()
</code></pre>
<p>change even this line</p>
<pre><code>master.bind("d", lambda event: move_Timer(ball,0))
</code></pre>
</div>
<span class="comment-copy">it doesn't work for me, it still vibrates, anyway i'd like to no change the <code>x_movement</code> and <code>y_movement</code> values, there should be a better solution i think . By the way in the code u call both  <code>master.after(30, lambda: move_after(object))</code> and <code>Timer(30/1000, lambda: move_Timer(object,y))</code>.</span>
<span class="comment-copy">ops I made a mistake, you can delete  master.after(30, lambda: move_after(object)), for me anyway it works.</span>
