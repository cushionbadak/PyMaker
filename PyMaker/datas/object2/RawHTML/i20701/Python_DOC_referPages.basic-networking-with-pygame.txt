<div class="post-text" itemprop="text">
<p>I need to do some basic networking for a Pygame project.</p>
<p>Basically, it's a 2D single player or cooperative game. The networking only needs to support 2 players, with one as a host.</p>
<p>The only information that needs to be sent is the positions of players, creeps and bullets.</p>
<p>I've  been reading around and Twisted keeps coming up, but I haven't done networking before and I'm not sure if that might be an overkill.</p>
<p>So, is it possible for a relative newbie to implement networking in Pygame? Can anyone point me in the right direction?</p>
</div>
<div class="post-text" itemprop="text">
<p>This was asked recently on Reddit, so I'll more or less just copy my answer over from there. I apologize for not being able to provide more links, I have &lt;10 rep so I can only post two at a time.</p>
<p>Twisted might work, but I don't have a whole lot of experience with it. I'd recommend going with sockets, as that's what Twisted uses in the background anyway. Beej's guide (google it) is pretty much the Holy Bible of sockets if you want to learn how they work (in C++, but the concepts extend everywhere). Python does abstract some of the complexity away, but it's still a good idea to know what's going on in the background.</p>
<p>For Python specific sockets, you can go ahead and just use the howto (user745294 posted a link above). <a href="http://gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking/" rel="nofollow noreferrer">Here</a>'s a nice article titled "What every programmer needs to know about Game Networking". It goes into the different types of major networking styles (client-server, p2p, udp v. tcp, etc.) and the history behind what some major games used for their networking.</p>
<p>Below is a link to a demo I did on making a networked "game" in Python 2.6/Pygame. It's not actually a game, but each client you create connects to the server and controls a character. You can move your character with the arrow keys and the character will move on all connected clients. I tried commenting the source code with some indication of what I'm sending back and forth, but you may need a little knowledge about sockets to understand it.</p>
<p>The source code is provided in the codepad links in the comment below this post. You will need to provide two images in the same directory as the scripts:</p>
<ol>
<li><code>bg.png</code> is the background sprite. It should be an image 400px wide and 300px tall (this can be changed in the <code>GameClient</code> class if needed)</li>
<li><code>sprite.png</code> is the player character. It should be smaller than the background so that you can see it moving around.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://twistedmatrix.com" rel="noreferrer">Twisted</a> for networking with PyGame.  <a href="https://launchpad.net/game" rel="noreferrer">The "game" project</a> on Launchpad has  some examples of how one might integrate the main loops together; basically, use <code>twisted.internet.task.LoopingCall</code> to draw PyGame frames and handle input, while letting the  Twisted reactor of your choice run normally.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are already using Pygame I think this light networking lib made for Pygame will do what you need and teach you but not overwhelm you. <a href="http://www.pygame.org/project-Mastermind+Networking+Lib-859-.html" rel="nofollow">"Mastermind Networking Lib" via pygame.org</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>There is pyro (python remote object) as another solution for networking in python.</p>
<p><a href="http://irmen.home.xs4all.nl/pyro/" rel="nofollow">http://irmen.home.xs4all.nl/pyro/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using raw sockets is low-level and full of danger. As said before, Twisted is complex and takes to time get up and running. To save yourself some headaches I'd try something like <a href="https://github.com/dotcloud/zerorpc-python" rel="nofollow">https://github.com/dotcloud/zerorpc-python</a></p>
<p>You need following solutions:</p>
<ul>
<li>discovering other player(s) on (local) network, you don't want player to enter some IP address</li>
<li>handle network errors</li>
<li>serialize messages containing your data (positions, player name, etc.)</li>
<li>handle threading as networking is asynchronous IO</li>
</ul>
<p>Above should still be called 'basic', you should really use some fancy networking library with idiomatic API.</p>
<p>UPDATE:</p>
<p>Essentially you need to expose network service (in it's own thread) that will push messages to Python's <code>Queue</code>, then access this same queue from your Pygame code, and if there is a message then you update whatever structures you use to store player's position and draw it on screen. You shouldn't sent stuff like bullet positions over the network as they can be easily (and faster) calculated locally, you just send an event like <code>bullet_shot</code> over the network with source position and velocity vector.</p>
</div>
<span class="comment-copy">Here are a couple of codepad links to the Client/Server in case you don't want to visit mediafire (you'll have to provide your own bg.png and sprite.png).  Server: <a href="http://codepad.org/p9lVrmqn" rel="nofollow noreferrer">codepad.org/p9lVrmqn</a>   Client: <a href="http://codepad.org/e6pwGj24" rel="nofollow noreferrer">codepad.org/e6pwGj24</a></span>
<span class="comment-copy">The mediafire link is dead anyway, it would seem. The codepad links are great though, thanks!</span>
<span class="comment-copy">Hi I know this is old, but the mediafire link is dead. If you still happen to have the source code Im really interested!</span>
<span class="comment-copy">Source code is provided in the codepad links in the comment above. The only additional content that was included in the mediafire are two images: bg.png (the background) and sprite.png (the player character). Provide two images of your own (I no longer have them) and the code will work as expected.</span>
<span class="comment-copy">Mastermind uses <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a> which is not secure. <i>"  Warning:  The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source."</i></span>
<span class="comment-copy">The author changed the lib so that it uses json by default now which is safe.</span>
<span class="comment-copy">Do not use Pyro for any untrusted communications.  It definitely is not suitable for a game played over the internet.  <a href="http://packages.python.org/Pyro4/security.html#pickle-as-serialization-format" rel="nofollow noreferrer">packages.python.org/Pyro4/â€¦</a></span>
<span class="comment-copy">I admit that's not the best use case for it, thanks for pointing out.</span>
<span class="comment-copy">Twisted isn't all that complex.  An echo server is 3 lines of code.  A 2-way RPC server isn't much more than that.  Twisted's a general networking solution though, suitable for a game client - zerorpc relies on zeromq and is therefore not suitable for untrusted-client communications; it's more for coordinating back-end services with each other.</span>
