<div class="post-text" itemprop="text">
<p>I want to remove characters in a string in python:</p>
<pre><code>string.replace(',', '').replace("!", '').replace(":", '').replace(";", '')...
</code></pre>
<p>But I have many characters I have to remove. I thought about a list</p>
<pre><code>list = [',', '!', '.', ';'...]
</code></pre>
<p>But how can I use the <code>list</code> to replace the characters in the <code>string</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using python2 and your inputs are strings (not unicodes), the absolutely best method is <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate</code></a>:</p>
<pre><code>&gt;&gt;&gt; chars_to_remove = ['.', '!', '?']
&gt;&gt;&gt; subj = 'A.B!C?'
&gt;&gt;&gt; subj.translate(None, ''.join(chars_to_remove))
'ABC'
</code></pre>
<p>Otherwise, there are following options to consider:</p>
<p>A. Iterate the subject char by char, omit unwanted characters and <a href="https://docs.python.org/2/library/stdtypes.html#str.join" rel="noreferrer"><code>join</code></a> the resulting list:</p>
<pre><code>&gt;&gt;&gt; sc = set(chars_to_remove)
&gt;&gt;&gt; ''.join([c for c in subj if c not in sc])
'ABC'
</code></pre>
<p>(Note that the generator version <code>''.join(c for c ...)</code> will be less efficient).</p>
<p>B. Create a regular expression on the fly and <a href="https://docs.python.org/2/library/re.html#re.sub" rel="noreferrer"><code>re.sub</code></a> with an empty string:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; rx = '[' + re.escape(''.join(chars_to_remove)) + ']'
&gt;&gt;&gt; re.sub(rx, '', subj)
'ABC'
</code></pre>
<p>(<a href="https://docs.python.org/2/library/re.html#re.escape" rel="noreferrer"><code>re.escape</code></a> ensures that characters like <code>^</code> or <code>]</code> won't break the regular expression).</p>
<p>C. Use the <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="noreferrer">mapping variant of <code>translate</code></a>:</p>
<pre><code>&gt;&gt;&gt; chars_to_remove = [u'δ', u'Γ', u'ж']
&gt;&gt;&gt; subj = u'AжBδCΓ'
&gt;&gt;&gt; dd = {ord(c):None for c in chars_to_remove}
&gt;&gt;&gt; subj.translate(dd)
u'ABC'
</code></pre>
<p>Full testing code and timings:</p>
<pre><code>#coding=utf8

import re

def remove_chars_iter(subj, chars):
    sc = set(chars)
    return ''.join([c for c in subj if c not in sc])

def remove_chars_re(subj, chars):
    return re.sub('[' + re.escape(''.join(chars)) + ']', '', subj)

def remove_chars_re_unicode(subj, chars):
    return re.sub(u'(?u)[' + re.escape(''.join(chars)) + ']', '', subj)

def remove_chars_translate_bytes(subj, chars):
    return subj.translate(None, ''.join(chars))

def remove_chars_translate_unicode(subj, chars):
    d = {ord(c):None for c in chars}
    return subj.translate(d)

import timeit, sys

def profile(f):
    assert f(subj, chars_to_remove) == test
    t = timeit.timeit(lambda: f(subj, chars_to_remove), number=1000)
    print ('{0:.3f} {1}'.format(t, f.__name__))

print (sys.version)
PYTHON2 = sys.version_info[0] == 2

print ('\n"plain" string:\n')

chars_to_remove = ['.', '!', '?']
subj = 'A.B!C?' * 1000
test = 'ABC' * 1000

profile(remove_chars_iter)
profile(remove_chars_re)

if PYTHON2:
    profile(remove_chars_translate_bytes)
else:
    profile(remove_chars_translate_unicode)

print ('\nunicode string:\n')

if PYTHON2:
    chars_to_remove = [u'δ', u'Γ', u'ж']
    subj = u'AжBδCΓ'
else:
    chars_to_remove = ['δ', 'Γ', 'ж']
    subj = 'AжBδCΓ'

subj = subj * 1000
test = 'ABC' * 1000

profile(remove_chars_iter)

if PYTHON2:
    profile(remove_chars_re_unicode)
else:
    profile(remove_chars_re)

profile(remove_chars_translate_unicode)
</code></pre>
<p>Results:</p>
<pre class="lang-none prettyprint-override"><code>2.7.5 (default, Mar  9 2014, 22:15:05) 
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)]

"plain" string:

0.637 remove_chars_iter
0.649 remove_chars_re
0.010 remove_chars_translate_bytes

unicode string:

0.866 remove_chars_iter
0.680 remove_chars_re_unicode
1.373 remove_chars_translate_unicode

---

3.4.2 (v3.4.2:ab2c023a9432, Oct  5 2014, 20:42:22) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]

"plain" string:

0.512 remove_chars_iter
0.574 remove_chars_re
0.765 remove_chars_translate_unicode

unicode string:

0.817 remove_chars_iter
0.686 remove_chars_re
0.876 remove_chars_translate_unicode
</code></pre>
<p>(As a side note, the figure for <code>remove_chars_translate_bytes</code> might give us a clue why the industry was reluctant to adopt Unicode for such a long time).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate()</code></a>:</p>
<pre><code>s.translate(None, ",!.;")
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; s = "asjo,fdjk;djaso,oio!kod.kjods;dkps"
&gt;&gt;&gt; s.translate(None, ",!.;")
'asjofdjkdjasooiokodkjodsdkps'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/library/string.html#string.translate" rel="noreferrer">translate</a> method.</p>
<pre><code>s.translate(None, '!.;,')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>''.join(c for c in myString if not c in badTokens)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using <strong>python3</strong> and looking for the <code>translate</code> solution - the function was changed and now takes 1 parameter instead of 2.  </p>
<p>That parameter is a table (can be dictionary) where each key is the Unicode ordinal (int) of the character to find and the value is the replacement (can be either a Unicode ordinal or a string to map the key to).</p>
<p>Here is a usage example:</p>
<pre><code>&gt;&gt;&gt; list = [',', '!', '.', ';']
&gt;&gt;&gt; s = "This is, my! str,ing."
&gt;&gt;&gt; s.translate({ord(x): '' for x in list})
'This is my string'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach using regex:  </p>
<pre><code>''.join(re.split(r'[.;!?,]', s))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could use something like this</p>
<pre><code>def replace_all(text, dic):
  for i, j in dic.iteritems():
    text = text.replace(i, j)
  return text
</code></pre>
<p>This code is not my own and comes from <a href="http://gomputor.wordpress.com/2008/09/27/search-replace-multiple-words-or-characters-with-python/" rel="noreferrer">here</a> its a great article and dicusses in depth doing this</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not a simple loop?</p>
<pre><code>for i in replace_list:
    string = string.replace(i, '')
</code></pre>
<p>Also, avoid naming lists 'list'. It overrides the built-in function <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Also an interesting topic on removal UTF-8 accent form a string converting char to their standard non-accentuated char:</p>
<p><a href="https://stackoverflow.com/questions/517923/what-is-the-best-way-to-remove-accents-in-a-python-unicode-string">What is the best way to remove accents in a python unicode string?</a></p>
<p>code extract from the topic:</p>
<pre><code>import unicodedata

def remove_accents(input_str):
    nkfd_form = unicodedata.normalize('NFKD', input_str)
    return u"".join([c for c in nkfd_form if not unicodedata.combining(c)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps a more modern and functional way to achieve what you wish:</p>
<pre><code>&gt;&gt;&gt; subj = 'A.B!C?'
&gt;&gt;&gt; list = set([',', '!', '.', ';', '?'])
&gt;&gt;&gt; filter(lambda x: x not in list, subj)
'ABC'
</code></pre>
<p>please note that for this particular purpose it's quite an overkill, but once you need more complex conditions, filter comes handy</p>
</div>
<div class="post-text" itemprop="text">
<p>simple way,</p>
<pre><code>import re
str = 'this is string !    &gt;&gt;&lt;&lt; (foo---&gt; bar) @-tuna-#   sandwich-%-is-$-* good'

// condense multiple empty spaces into 1
str = ' '.join(str.split()

// replace empty space with dash
str = str.replace(" ","-")

// take out any char that matches regex
str = re.sub('[!@#$%^&amp;*()_+&lt;&gt;]', '', str)
</code></pre>
<p>output:</p>
<p><em><code>this-is-string--foo----bar--tuna---sandwich--is---good</code></em></p>
</div>
<div class="post-text" itemprop="text">
<p>These days I am diving into scheme, and now I think am good at recursing and eval. HAHAHA. Just share some new ways:</p>
<p>first ,eval it</p>
<pre><code>print eval('string%s' % (''.join(['.replace("%s","")'%i for i in replace_list])))
</code></pre>
<p>second , recurse it</p>
<pre><code>def repn(string,replace_list):
    if replace_list==[]:
        return string
    else:
        return repn(string.replace(replace_list.pop(),""),replace_list)

print repn(string,replace_list)
</code></pre>
<p>Hey ,don't downvote. I am just want to share some new idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this - a one liner. </p>
<pre><code>reduce(lambda x,y : x.replace(y,"") ,[',', '!', '.', ';'],";Test , ,  !Stri!ng ..")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i think this is simple enough and will do!</p>
<pre><code>list = [",",",","!",";",":"] #the list goes on.....

theString = "dlkaj;lkdjf'adklfaj;lsd'fa'dfj;alkdjf" #is an example string;
newString="" #the unwanted character free string
for i in range(len(TheString)):
    if theString[i] in list:
        newString += "" #concatenate an empty string.
    else:
        newString += theString[i]
</code></pre>
<p>this is one way to do it. But if you are tired of keeping a list of characters that you want to remove, you can actually do it by using the order number of the strings you iterate through. the order number is the ascii value of that character. the ascii number for 0 as a char is 48 and the ascii number for lower case z is 122 so:</p>
<pre><code>theString = "lkdsjf;alkd8a'asdjf;lkaheoialkdjf;ad"
newString = ""
for i in range(len(theString)):
     if ord(theString[i]) &lt; 48 or ord(theString[i]) &gt; 122: #ord() =&gt; ascii num.
         newString += ""
     else:
        newString += theString[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am thinking about a solution for this. First I would make the string input as a list. Then I would replace the items of list. Then through using join command, I will return list as a string. The code can be like this:</p>
<pre><code>def the_replacer(text):
    test = []    
    for m in range(len(text)):
        test.append(text[m])
        if test[m]==','\
        or test[m]=='!'\
        or test[m]=='.'\
        or test[m]=='\''\
        or test[m]==';':
    #....
            test[n]=''
    return ''.join(test)
</code></pre>
<p>This would remove anything from the string. What do you think about that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> approach:</p>
<pre><code>import more_itertools as mit


s = "A.B!C?D_E@F#"
blacklist = ".!?_@#"

"".join(mit.flatten(mit.split_at(s, pred=lambda x: x in set(blacklist))))
# 'ABCDEF'
</code></pre>
<p>Here we split upon items found in the <code>blacklist</code>, flatten the results and join the string.</p>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/1919096/mass-string-replace-in-python" title="mass string replace in python">stackoverflow.com/questions/1919096/…</a> for various solutions and a nice comparison.</span>
<span class="comment-copy">It's a pity that Python (which is said to come with batteries included) does not handle this use case out of the box. PHP's function str_replace does it - you can pass an array as the first argument and a string as the second (<a href="http://php.net/manual/pl/function.str-replace.php" rel="nofollow noreferrer">php.net/manual/pl/function.str-replace.php</a> ).</span>
<span class="comment-copy">The second method raises an error <code>TypeError: translate() takes exactly one argument (2 given)</code>. Apparently it takes dict as an argument.</span>
<span class="comment-copy">@antonavy - the 2nd solution does work - but only of the string is not unicode (for which a different translate() is needed)</span>
<span class="comment-copy">@thg435: Nobody asked for this, but anyway: <code>s.translate(dict.fromkeys(map(ord, u",!.;")))</code></span>
<span class="comment-copy">This (and @PraveenGollakota's) <a href="http://stackoverflow.com/a/10017200/623735">simultaneous answer</a> is exactly what @Laura asked for and should be the preferred answer(s).</span>
<span class="comment-copy">why python3:TypeError: translate() takes exactly one argument (2 given)</span>
<span class="comment-copy">@Gank: The <code>unicode.translate()</code> method has different parameters than the <code>str.translate()</code> method.  Use the variant in the above comment for Unicode objects.</span>
<span class="comment-copy">@SvenMarnach what is map(ord, u",!.;"))?  and does u stand for unicode?</span>
<span class="comment-copy">Useful in similar cases not based on chars and strings +1</span>
<span class="comment-copy">Also note that this can just as easily be done with list comprehensions, which is way more pythonic in my opinion.</span>
