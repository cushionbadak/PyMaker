<div class="post-text" itemprop="text">
<p>How can I assign the maximum value for a long integer to a variable, similar, for example, to C++'s <code>LONG_MAX</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Long integers:</h2>
<p>There is no explicitly defined limit. The amount of available address space forms a practical limit.<br/>
(Taken from <a href="http://bytes.com/topic/python/answers/761897-max-long">this</a> site). See the docs on <a href="http://docs.python.org/2/library/stdtypes.html#numeric-types-int-float-long-complex">Numeric Types</a> where you'll see that <code>Long integers have unlimited precision</code>. In Python 2, Integers will automatically switch to longs when they grow beyond their limit:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; type(sys.maxsize)
&lt;type 'int'&gt;
&gt;&gt;&gt; type(sys.maxsize+1)
&lt;type 'long'&gt;
</code></pre>
<p><br/>
for integers we have</p>
<h2>maxint and maxsize:</h2>
<p>The maximum value of an int can be found in Python 2.x with <code>sys.maxint</code>. It was removed in Python 3, but <code>sys.maxsize</code> can often be used instead. From <a href="http://docs.python.org/3.1/whatsnew/3.0.html#integers">the changelog</a>:</p>
<blockquote>
<p>The sys.maxint constant was removed, since there is no longer a limit
  to the value of integers. However, sys.maxsize can be used as an
  integer larger than any practical list or string index. It conforms to
  the implementation’s “natural” integer size and is typically the same
  as sys.maxint in previous releases on the same platform (assuming the
  same build options).</p>
</blockquote>
<p>and, for anyone interested in <a href="http://docs.python.org/2/library/sys.html#sys.maxint">the difference</a> (Python 2.x):</p>
<blockquote>
<p><strong>sys.maxint</strong> The largest positive integer supported by Python’s regular
  integer type. This is at least 2**31-1. The largest negative integer
  is -maxint-1 — the asymmetry results from the use of 2’s complement
  binary arithmetic.</p>
<p><strong>sys.maxsize</strong> The largest positive integer supported by the platform’s
  Py_ssize_t type, and thus the maximum size lists, strings, dicts, and
  many other containers can have.</p>
</blockquote>
<p>and for completeness, here's the <a href="http://docs.python.org/3/library/sys.html#sys.maxsize">Python 3 version</a>:</p>
<blockquote>
<p><strong>sys.maxsize</strong> 
  An integer giving the maximum value a variable of type Py_ssize_t can take. It’s usually 2^31 - 1 on a 32-bit platform and
  2^63 - 1 on a 64-bit platform.</p>
</blockquote>
<h2>floats:</h2>
<p>There's <code>float("inf")</code> and <code>float("-inf")</code>. These can be compared to other numeric types:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; float("inf") &gt; sys.maxsize
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>long</code> can be arbitrarily large. If you need a value that's greater than any other value, you can use <code>float('inf')</code>, since Python has no trouble comparing numeric values of different types. Similarly, for a value lesser than any other value, you can use <code>float('-inf')</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h3>Direct answer to title question:</h3>
<p>Integers are unlimited in size and have no maximum value in Python.</p>
<h3>Answer which addresses stated underlying use case:</h3>
<p>According to your comment of what you're trying to do, you are currently thinking something along the lines of</p>
<pre><code>minval = MAXINT;
for (i = 1; i &lt; num_elems; i++)
    if a[i] &lt; a[i-1]
        minval = a[i];
</code></pre>
<p>That's not how to think in Python. A better translation to Python (but still not the best) would be</p>
<pre><code>minval = a[0]  # Just use the first value
for i in range(1, len(a)):
    minval = min(a[i], a[i - 1])
</code></pre>
<p>Note that the above doesn't use MAXINT at all. That part of the solution applies to any programming language: You don't need to know the highest possible value just to find the smallest value in a collection.</p>
<p>But anyway, what you <em>really</em> do in Python is just</p>
<pre><code>minval = min(a)
</code></pre>
<p>That is, you don't write a loop at all. The built-in <code>min()</code> function gets the minimum of the whole collection.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>long</code> type in Python 2.x uses <a href="http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic" rel="noreferrer">arbitrary precision arithmetic</a> and has no such thing as maximum possible value. It is limited by the available memory. Python 3.x has no special type for values that cannot be represented by the native machine integer — everything is <code>int</code> and conversion is handled behind the scenes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Unlike C/C++ Long  in Python have unlimited precision. Refer the section <a href="http://docs.python.org/library/stdtypes.html#numeric-types-int-float-long-complex" rel="noreferrer">Numeric Types</a>  in python for more information.To determine the max value of integer you can just refer <code>sys.maxint</code>. You can get more details from the documentation of <a href="http://docs.python.org/library/sys.html" rel="noreferrer">sys</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use: max value of float is  </p>
<pre><code>float('inf')
</code></pre>
<p>for negative</p>
<pre><code>float('-inf')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python3, you can send the float value into the int function the get that number 1.7976931348623157e+308 in integer representation.</p>
<pre><code>import sys    
int(sys.float_info.max)
</code></pre>
</div>
<span class="comment-copy">I am not sure Python integers are limited at all. At the moment you cross sys.maxint it changes internal representation from int to long, which has unlimited presicion.</span>
<span class="comment-copy">I asked because i need to find a min value among a group of values one by one So first i need to store a big value to a variable so that i can compare it with others</span>
<span class="comment-copy">To your comment - i recommned to use built-in function min.</span>
<span class="comment-copy">You don't need the maximum value if you are just trying to find the minimum, even if you are programming in C++ or any other language.  If you are just going to loop through all the elements anyway, simply use the first element as your starting value.  (But better to use the <code>min</code> function, if you really want to program in Python!)</span>
<span class="comment-copy">@Sreevisakh: for the "big value", use infinity, <code>float("inf")</code>. Or better, use the built-in <code>min</code> function.</span>
<span class="comment-copy">I tried the same code but it still show type as int in python 3 on windows 64 bit machine. Any valued reason for it.</span>
<span class="comment-copy">@ManojP It's because there's no longer a limit to the size of integers in Python 3. See the first block quote. I'll edit to clarify that the example is Python 2</span>
<span class="comment-copy">so it return a very large value does it?</span>
<span class="comment-copy">It returns floating-point infinity, which is greater than any finite number.</span>
<span class="comment-copy">I have to say, this answer is definitely the closest to correct in terms of responding to the OP's title question.  That is, "how do you get a Python sentinel value that will be larger than all your input (or at least not smaller than the largest value)?".  So I've upvoted this answer, but I think it is better if the OP learns to think in Python instead.</span>
<span class="comment-copy">Agreed. That said, I have been in a situation where this was the only way to do what I needed.</span>
<span class="comment-copy">The title is <i>"Maximum value for long integer"</i>, not max value of float. So, without an explanation how this <i>answers</i> the question, I regard this NAA (not an answer).</span>
