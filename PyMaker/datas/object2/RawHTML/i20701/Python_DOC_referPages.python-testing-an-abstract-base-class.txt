<div class="post-text" itemprop="text">
<p>I am looking for ways / best practices on testing methods defined in an abstract base class. One thing I can think of directly is performing the test on all concrete subclasses of the base class, but that seems excessive at some times.</p>
<p>Consider this example:</p>
<pre><code>import abc

class Abstract(object):

    __metaclass__ = abc.ABCMeta

    @abc.abstractproperty
    def id(self):
        return   

    @abc.abstractmethod
    def foo(self):
        print "foo"

    def bar(self):
        print "bar"
</code></pre>
<p>Is it possible to test <code>bar</code> without doing any subclassing? </p>
</div>
<div class="post-text" itemprop="text">
<p>As properly put by lunaryon, it is not possible. The very purpose of ABCs containing abstract methods is that they are not instantiatable as declared. </p>
<p>However, it is possible to create a utility function that introspects an ABC, and creates a dummy, non abstract class on the fly. This function could be called directly inside your test method/function and spare you of having to wite boiler plate code on the test file just for testing a few methods.</p>
<pre><code>def concreter(abclass):
    """
    &gt;&gt;&gt; import abc
    &gt;&gt;&gt; class Abstract(metaclass=abc.ABCMeta):
    ...     @abc.abstractmethod
    ...     def bar(self):
    ...        return None

    &gt;&gt;&gt; c = concreter(Abstract)
    &gt;&gt;&gt; c.__name__
    'dummy_concrete_Abstract'
    &gt;&gt;&gt; c().bar() # doctest: +ELLIPSIS
    (&lt;abc_utils.Abstract object at 0x...&gt;, (), {})
    """
    if not "__abstractmethods__" in abclass.__dict__:
        return abclass
    new_dict = abclass.__dict__.copy()
    for abstractmethod in abclass.__abstractmethods__:
        #replace each abc method or property with an identity function:
        new_dict[abstractmethod] = lambda x, *args, **kw: (x, args, kw)
    #creates a new class, with the overriden ABCs:
    return type("dummy_concrete_%s" % abclass.__name__, (abclass,), new_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In newer versions of Python you can use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"><code>unittest.mock.patch()</code></a></p>
<pre><code>class MyAbcClassTest(unittest.TestCase):

    @patch.multiple(MyAbcClass, __abstractmethods__=set())
    def test(self):
         self.instance = MyAbcClass() # Ha!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is what I have found: If you set <code>__abstractmethods__</code> attribute to be an empty set you'll be able to instantiate abstract class. This behaviour is specified in <a href="http://www.python.org/dev/peps/pep-3119/#the-abc-module-an-abc-support-framework" rel="noreferrer">PEP 3119</a>:</p>
<blockquote>
<p>If the resulting <code>__abstractmethods__</code> set is non-empty, the class is considered abstract, and attempts to instantiate it will raise TypeError.</p>
</blockquote>
<p>So you just need to clear this attribute for the duration of tests. </p>
<pre><code>&gt;&gt;&gt; import abc
&gt;&gt;&gt; class A(metaclass = abc.ABCMeta):
...     @abc.abstractmethod
...     def foo(self): pass
</code></pre>
<p>You cant instantiate A: </p>
<pre><code>&gt;&gt;&gt; A()
Traceback (most recent call last):
TypeError: Can't instantiate abstract class A with abstract methods foo
</code></pre>
<p>If you override <code>__abstractmethods__</code> you can: </p>
<pre><code>&gt;&gt;&gt; A.__abstractmethods__=set()
&gt;&gt;&gt; A() #doctest: +ELLIPSIS
&lt;....A object at 0x...&gt;
</code></pre>
<p>It works both ways: </p>
<pre><code>&gt;&gt;&gt; class B(object): pass
&gt;&gt;&gt; B() #doctest: +ELLIPSIS
&lt;....B object at 0x...&gt;

&gt;&gt;&gt; B.__abstractmethods__={"foo"}
&gt;&gt;&gt; B()
Traceback (most recent call last):
TypeError: Can't instantiate abstract class B with abstract methods foo
</code></pre>
<p>You can also use <code>unittest.mock</code> (from 3.3) to override temporarily ABC behaviour. </p>
<pre><code>&gt;&gt;&gt; class A(metaclass = abc.ABCMeta):
...     @abc.abstractmethod
...     def foo(self): pass
&gt;&gt;&gt; from unittest.mock import patch
&gt;&gt;&gt; p = patch.multiple(A, __abstractmethods__=set())
&gt;&gt;&gt; p.start()
{}
&gt;&gt;&gt; A() #doctest: +ELLIPSIS
&lt;....A object at 0x...&gt;
&gt;&gt;&gt; p.stop()
&gt;&gt;&gt; A()
Traceback (most recent call last):
TypeError: Can't instantiate abstract class A with abstract methods foo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, it's not.  The very purpose of <code>abc</code> is to create classes that cannot be instantiated unless all abstract attributes are overridden with concrete implementations.  Hence you need to derive from the abstract base class and override all abstract methods and properties.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps a more compact version of the <em>concreter</em> proposed by @jsbueno could be:</p>
<pre><code>def concreter(abclass):
    class concreteCls(abclass):
        pass
    concreteCls.__abstractmethods__ = frozenset()
    return type('DummyConcrete' + abclass.__name__, (concreteCls,), {})
</code></pre>
<p>The resulting class still has all original abstract methods (which can be now called, even if this is not likely to be useful...) and can be mocked as needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/tutorial/classes.html#multiple-inheritance" rel="nofollow noreferrer">multiple inheritance</a> practice to have access to the implemented methods of the abstract class. Obviously following such design decision depends on the structure of the abstract class since you need to implement abstract methods (at least bring the signature) in your test case. </p>
<p>Here is the example for your case:</p>
<pre><code>class Abstract(object):

    __metaclass__ = abc.ABCMeta

    @abc.abstractproperty
    def id(self):
        return

    @abc.abstractmethod
    def foo(self):
        print("foo")

    def bar(self):
        print("bar")

class AbstractTest(unittest.TestCase, Abstract):

    def foo(self):
        pass
    def test_bar(self):
        self.bar()
        self.assertTrue(1==1)
</code></pre>
</div>
<span class="comment-copy">Cool. I'll try fiddling with this code on some of my tests :). Thanks!</span>
<span class="comment-copy">Why do we really need <code>multiple</code>?</span>
<span class="comment-copy">You can mock multiple properties at once with <code>multiple()</code></span>
<span class="comment-copy">Yes but that doesn't seem to justify its use here since only one attribute seems patched. Is there something simpler that can be used?</span>
<span class="comment-copy"><code>mocker.patch.object</code> solution: <code>mocker.patch.object(MyAbcClass, "__abstractmethods__", new_callable = set)</code></span>
<span class="comment-copy">Hm..if that's so, would it be wise to make a fake subclass of the abstract class with the abstract methods and properties defined, then do the test on it?</span>
<span class="comment-copy">@bow: Yes, that's how you'd do this.</span>
