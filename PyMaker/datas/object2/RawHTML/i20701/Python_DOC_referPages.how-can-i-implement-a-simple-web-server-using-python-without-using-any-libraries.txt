<div class="post-text" itemprop="text">
<p>I need to implement a very simple web-server-like app in Python which would perform basic HTTP requests and responses and display very basic output on the web page. I am not too concerned about actually coding it in Python, but I am not sure where to start? How to set this up? One file? Multiple files? I guess I have no idea how to approach the fact that this is a "server" - so I am unfamiliar with how to approach dealing with HTTP requests/sockets/processing requests, etc. Any advice? Resources?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/howto/sockets.html" rel="nofollow noreferrer">socket programming</a> for this purpose. The following snippet creates a tcp socket and listens on port 9000 for http requests:</p>
<pre><code>from socket import *

def createServer():
    serversocket = socket(AF_INET, SOCK_STREAM)
    serversocket.bind(('localhost',9000))
    serversocket.listen(5)
    while(1):
        (clientsocket, address) = serversocket.accept()
        clientsocket.send("HTTP/1.1 200 OK\n"
         +"Content-Type: text/html\n"
         +"\n" # Important!
         +"&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;\n")
        clientsocket.shutdown(SHUT_WR)
        clientsocket.close()

    serversocket.close()

createServer()
</code></pre>
<p>Start the server, <code>$ python server.py</code>.
Open <code>http://localhost:9000/</code> in your web-browser (which acts as client). Then in the browser window, you can see the text "Hello World" (http response).</p>
<p>EDIT**
The previous code was only tested on chrome, and as you guys suggested about other browsers, the code was modified as:</p>
<ol>
<li>To make the response http-alike you can send in plain header with http version 1.1, status code 200 OK and content-type text/html.</li>
<li>The client socket needs to be closed once response is submitted as it's a TCP socket.</li>
<li>To properly close the client socket, <code>shutdown()</code> needs to be called <a href="https://stackoverflow.com/questions/409783/socket-shutdown-vs-socket-close">socket.shutdown vs socket.close</a></li>
</ol>
<p>Then the code was tested on chrome, firefox (<a href="http://localhost:9000/" rel="nofollow noreferrer">http://localhost:9000/</a>) and simple curl in terminal (curl <a href="http://localhost:9000" rel="nofollow noreferrer">http://localhost:9000</a>). </p>
</div>
<div class="post-text" itemprop="text">
<p>You should look at the <a href="https://docs.python.org/2/library/simplehttpserver.html" rel="nofollow noreferrer">SimpleHttpServer</a> (py3: <a href="https://docs.python.org/3/library/http.server.html" rel="nofollow noreferrer">http.server</a>) module.</p>
<p>Depending on what you're trying to do, you can either just use it, or check out the module's source (<a href="http://hg.python.org/cpython/file/2.7/Lib/SimpleHTTPServer.py" rel="nofollow noreferrer">py2</a>, <a href="https://hg.python.org/cpython/file/3.5/Lib/http/server.py" rel="nofollow noreferrer">py3</a>) for ideas.</p>
<p>If you want to get more low-level, SimpleHttpServer extends <a href="https://docs.python.org/2/library/basehttpserver.html" rel="nofollow noreferrer">BaseHttpServer</a> (<a href="http://hg.python.org/cpython/file/2.7/Lib/BaseHTTPServer.py" rel="nofollow noreferrer">source</a>) to make it just work.</p>
<p>If you want to get even <em>more</em> low-level, take a look at <a href="http://docs.python.org/library/socketserver.html" rel="nofollow noreferrer">SocketServer</a> (source: <a href="http://hg.python.org/cpython/file/2.7/Lib/SocketServer.py" rel="nofollow noreferrer">py2</a>, <a href="https://hg.python.org/cpython/file/3.5/Lib/socketserver.py" rel="nofollow noreferrer">py3</a>).</p>
<p>People will often run python like <code>python -m SimpleHttpServer</code> (or <code>python3 -m http.server</code>) if they just want to share a directory: it's a fully functional and... simple server.</p>
</div>
<div class="post-text" itemprop="text">
<p>I decided to make this work in Python 3 and make it work for Chrome to use as an example for an online course I am developing.  Python 3 of course needs <code>encode()</code> and <code>decode()</code> in the right places.  Chrome - really wants to send its <strong>GET</strong> request before it gets data. I also added some error checking so it cleans up its socket if you abort the server or it blows up:</p>
<pre><code>def createServer():
    serversocket = socket(AF_INET, SOCK_STREAM)
    try :
        serversocket.bind(('localhost',9000))
        serversocket.listen(5)
        while(1):
            (clientsocket, address) = serversocket.accept()

            rd = clientsocket.recv(5000).decode()
            pieces = rd.split("\n")
            if ( len(pieces) &gt; 0 ) : print(pieces[0])

            data = "HTTP/1.1 200 OK\r\n"
            data += "Content-Type: text/html; charset=utf-8\r\n"
            data += "\r\n"
            data += "&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;\r\n\r\n"
            clientsocket.sendall(data.encode())
            clientsocket.shutdown(SHUT_WR)

    except KeyboardInterrupt :
        print("\nShutting down...\n");
    except Exception as exc :
        print("Error:\n");
        print(exc)

    serversocket.close()

print('Access http://localhost:9000')
createServer()
</code></pre>
<p>The server also prints out the incoming HTTP request.  The code of course only sends text/html regardless of the request - even if the browser is asking for the favicon:</p>
<pre><code>$ python3 server.py
Access http://localhost:9000
GET / HTTP/1.1
GET /favicon.ico HTTP/1.1
^C
Shutting down...
</code></pre>
<p>But it is a pretty good example that mostly shows why you want to use a framework like Flask or DJango instead of writing your own. Thanks for the initial code.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a very simple solution mentioned above, but the solution above doesn't work. This solution is tested on chrome and it works. This is python 3 although it may work on python 2 since I never tested it.</p>
<pre><code>from socket import *

def createServer():
    serversocket = socket(AF_INET, SOCK_STREAM)
    serversocket.bind(('localhost',9000))
    serversocket.listen(5)
    while(1):
        (clientsocket, address) = serversocket.accept()
        clientsocket.send(bytes("HTTP/1.1 200 OK\n"
         +"Content-Type: text/html\n"
         +"\n" # Important!
         +"&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;\n",'utf-8'))
        clientsocket.shutdown(SHUT_WR)
        clientsocket.close()

    serversocket.close()

createServer()
</code></pre>
<p>This is improved from the answer that was accepted, but I will post this so future users can use it easily.</p>
</div>
<span class="comment-copy">Explain further your requirements (and why). Are you wanting to implement the full application-level stack, or can you use e.g. Apache? Explain more what you need <i>And why.</i> Finally, when you have the "websocket" tag, do you mean it or was that just an incorrect tag to use?</span>
<span class="comment-copy">Without using <i>any</i> libraries? Surely <code>socket</code> is going to be required at a minimum?</span>
<span class="comment-copy">check <a href="http://docs.python.org/library/simplehttpserver.html" rel="nofollow noreferrer">this documentation</a> page, here I assume that "any libraries" are libraries that are not included in the python installation.</span>
<span class="comment-copy">@Wooble: I think it is quite fair to assume "any libraries" to mean "any non-standard libraries".</span>
<span class="comment-copy">-1. Did you try this? This doesn't work at all; it's a socket server, but doesn't speak HTTP.</span>
<span class="comment-copy">It doesn't actually speak HTTP, so almost every browser wouldn't work with this. It doesn't work in Chrome. It only works in Firefox if you press the Stop button. This is not a web server.</span>
<span class="comment-copy">I copied your script ran it and I'm getting an error saying <code>a byte-like object is required not 'str'</code> how do I fix this?</span>
<span class="comment-copy">@Simon Modified the code a bit. Also it was tested on python 2.7.6. If you are using python 3, where strings are Unicode; but when transmitting on the network, we need to send bytes strings instead. So try sendall() instead of send() with string output encoded as utf-8.      #START     output = "It works"     clientsocket.sendall(output.encode("utf-8"))    #END</span>
<span class="comment-copy">Super!  That's just what I needed.  I do use Python 3 so the ` sendall()` and <code>.encode("utf-8")</code> are absolutely essential and both these have fixed the error I was getting. all my server attempts up to this point have failed so I am very grateful.  This is a well deserved up-vote however I do not like the <code>clientsocket.send("HTTP/1.1 200 OK\n"          +"Content-Type: text/html\n"          +"\n" # Important!          +"&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;\n")</code> shouldn't that be all on the same line? I had to modify that part. Thanks again.  : )</span>
<span class="comment-copy">I would probably say you should check the HTTP documentation first. like RFC.</span>
<span class="comment-copy">Welcome to Stack Overflow. This question is a near duplicate of the <a href="https://stackoverflow.com/a/53157058/148680">answer provided by @drchuck</a>. The only thing that differentiates it from the latter is the lack of exception handling.</span>
