<div class="post-text" itemprop="text">
<p>Given an absolute url of a page, and a relative link found within that page, would there be a way to <strong>a)</strong> definitively reconstruct or <strong>b)</strong> best-effort reconstruct the absolute url of the relative link?</p>
<p>In my case, I'm reading an html file from a given url using beautiful soup, stripping out all the img tag sources, and trying to construct a list of absolute urls to the page images.</p>
<p>My Python function so far looks like:</p>
<pre><code>function get_image_url(page_url,image_src):

    from urlparse import urlparse
    # parsed = urlparse('http://user:pass@NetLoc:80/path;parameters?query=argument#fragment')
    parsed = urlparse(page_url)
    url_base = parsed.netloc
    url_path = parsed.path

    if src.find('http') == 0:
        # It's an absolute URL, do nothing.
        pass
    elif src.find('/') == 0:
        # If it's a root URL, append it to the base URL:
        src = 'http://' + url_base + src
    else:
        # If it's a relative URL, ?
</code></pre>
<p><strong>NOTE:</strong> Don't need a Python answer, just the logic required.       </p>
</div>
<div class="post-text" itemprop="text">
<p>very simple:</p>
<pre><code>&gt;&gt;&gt; from urlparse import urljoin
&gt;&gt;&gt; urljoin('http://mysite.com/foo/bar/x.html', '../../images/img.png')
'http://mysite.com/images/img.png'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urljoin" rel="noreferrer"><code>urllib.parse.urljoin</code></a> to resolve a (possibly relative) URL against a base URL.</p>
<p><em>But</em>, the base URL of a web page isn't necessarily the same as the URL you fetched the document from, because HTML allows a page to specify its preferred base URL <a href="http://www.w3.org/TR/html5/document-metadata.html#the-base-element" rel="noreferrer">via the <code>BASE</code> element</a>. The logic you need is as follows:</p>
<pre><code>base_url = page_url
head = document.getElementsByTagName('head')[0]
for base in head.getElementsByTagName('base'):
    if base.hasAttribute('href'):
        base_url = urllib.parse.urljoin(base_url, base.getAttribute('href'))
        # HTML5 4.2.3 "if there are multiple base elements with href
        # attributes, all but the first are ignored."
        break
</code></pre>
<p>(If you are parsing XHTML then in theory you ought to take into account the rather hairy <a href="http://www.w3.org/TR/xmlbase/" rel="noreferrer">XML Base specification</a> instead. But you can probably get away without worrying about that, since no-one really uses XHTML.)</p>
</div>
<span class="comment-copy">Hey coool!! (Guess I did need Python..)</span>
<span class="comment-copy">The urlparse module is renamed to urllib.parse in Python 3. So, <code>from urllib.parse import urljoin</code></span>
<span class="comment-copy">A crucial point- Thank you</span>
