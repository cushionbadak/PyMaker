<div class="post-text" itemprop="text">
<p>I recently upgrade Django from v1.3.1 to v1.4.</p>
<p>In my old <code>settings.py</code> I have </p>
<pre><code>TEMPLATE_DIRS = (
    os.path.join(os.path.dirname( __file__ ), 'templates').replace('\\', '/'),
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)
</code></pre>
<p>This will point to <code>/Users/hobbes3/Sites/mysite/templates</code>, but <a href="https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py" rel="noreferrer">because Django v1.4 moved the project folder to the same level as the app folders</a>, my <code>settings.py</code> file is now in <code>/Users/hobbes3/Sites/mysite/mysite/</code> instead of <code>/Users/hobbes3/Sites/mysite/</code>.</p>
<p>So actually my question is now twofold:</p>
<ol>
<li>How do I use <code>os.path</code> to look at a directory one level above from <code>__file__</code>. In other words, I want <code>/Users/hobbes3/Sites/mysite/mysite/settings.py</code> to find <code>/Users/hobbes3/Sites/mysite/templates</code> using relative paths.</li>
<li>Should I be keeping the <code>template</code> folder (which has cross-app templates, like <code>admin</code>, <code>registration</code>, etc.) at the project <code>/User/hobbes3/Sites/mysite</code> level or at <code>/User/hobbes3/Sites/mysite/mysite</code>?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<pre><code>os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'templates'))
</code></pre>
<p>As far as where the templates folder should go, I don't know since Django 1.4 just came out and I haven't looked at it yet. You should probably ask another question on SE to solve that issue.</p>
<p>You can also use <code>normpath</code> to clean up the path, rather than <code>abspath</code>. However, in this situation, Django expects an absolute path rather than a relative path.</p>
<p>For cross platform compatability, use <code>os.pardir</code> instead of <code>'..'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get the folder of a file just use:</p>
<pre><code>os.path.dirname(path) 
</code></pre>
<p>To get a folder up just use <code>os.path.dirname</code> again</p>
<pre><code>os.path.dirname(os.path.dirname(path))
</code></pre>
<p>You might want to check if <code>__file__</code> is a symlink: </p>
<pre><code>if os.path.islink(__file__): path = os.readlink (__file__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want exactly this:</p>
<pre><code>BASE_DIR = os.path.join( os.path.dirname( __file__ ), '..' )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Personally, I'd go for the function approach</p>
<pre><code>def get_parent_dir(directory):
    import os
    return os.path.dirname(directory)

current_dirs_parent = get_parent_dir(os.getcwd())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from os.path import dirname, realpath, join
join(dirname(realpath(dirname(__file__))), 'templates')
</code></pre>
<p><strong>Update:</strong></p>
<p>If you happen to "copy" <code>settings.py</code> through symlinking, @forivall's answer is better:</p>
<pre><code>~user/
    project1/  
        mysite/
            settings.py
        templates/
            wrong.html

    project2/
        mysite/
            settings.py -&gt; ~user/project1/settings.py
        templates/
            right.html
</code></pre>
<p>The method above will 'see' <code>wrong.html</code> while @forivall's method will see <code>right.html</code></p>
<p>In the absense of symlinks the two answers are identical.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python 3.4 or newer, a convenient way to move up multiple directories is <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a>:</p>
<pre><code>from pathlib import Path

full_path = "path/to/directory"
str(Path(full_path).parents[0])  # "path/to"
str(Path(full_path).parents[1])  # "path"
str(Path(full_path).parents[2])  # "."
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the easiest thing to do is just to reuse dirname()
So you can call </p>
<pre><code>os.path.dirname(os.path.dirname( __file__ ))
</code></pre>
<p>if you file is at /Users/hobbes3/Sites/mysite/templates/method.py </p>
<p>This will return "/Users/hobbes3/Sites/mysite"</p>
</div>
<div class="post-text" itemprop="text">
<p>This might be useful for other cases where you want to go x folders up. Just run <code>walk_up_folder(path, 6)</code> to go up 6 folders. </p>
<pre><code>def walk_up_folder(path, depth=1):
    _cur_depth = 1        
    while _cur_depth &lt; depth:
        path = os.path.dirname(path)
        _cur_depth += 1
    return path   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a paranoid like me, I'd prefer this one</p>
<pre><code>TEMPLATE_DIRS = (
    __file__.rsplit('/', 2)[0] + '/templates',
)
</code></pre>
</div>
<span class="comment-copy">Cant you just use <code>os</code> to <code>cd</code> to <code>../mysite</code>? Or whatever command you want</span>
<span class="comment-copy">@prelic Hmm? I don't understand. I am trying to avoid hardcoding the path, because I use the same <code>settings.py</code> in multiple servers. The only difference might be the database credentials. I was reading the <a href="http://docs.python.org/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code> documentation</a> but I couldn't find a command that let's you go up one directory. Like <code>cd ..</code>.</span>
<span class="comment-copy">@hobbes3 You can just <code>os.path.join( os.path.dirname( __file__ ), '..' )</code> <code>..</code> means <i>the directory above</i> throughout the filesystem, not just when passed to <code>cd</code>.</span>
<span class="comment-copy">@Michael, it is probably better to use <code>os.path.join( os.path.dirname ( __file__), os.path.pardir)</code></span>
<span class="comment-copy">Is it a bad idea to use <code>..</code> or something? Why is this answer getting less votes?</span>
<span class="comment-copy">I don't know why it's getting less votes, but it's what I've always used. It's even defined in the example for <a href="http://docs.python.org/library/os.path.html#os.path.normpath" rel="nofollow noreferrer"><code>normpath</code></a>. Plus, it will traverse symlinks properly.</span>
<span class="comment-copy">Using abspath will just clean it up a bit. If it's not there, the actual string for the path name will be <code>/Users/hobbes3/Sites/mysite/mysite/../templates</code>, which is perfectly fine, but just a little more cluttered. It also ensures that Django's reminder to use absolute paths is obeyed. If you're in a different situation that uses a relative path, you should use normpath to simplify your paths instead.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/9857364/whats-is-the-best-way-to-migrate-folder-and-files-structure-from-django1-3-to-dj">This question was just asked regarding migrating folder structure for the new version of Django</a>, so you probably should look to that for solving your second issue.</span>
<span class="comment-copy">@hobbes3 Can use os.pardir instead of ..</span>
<span class="comment-copy">Is there a way to go up <code>n</code> folders without having to call <code>os.path.dirname</code> <code>n</code> times?</span>
<span class="comment-copy">@OriolNieto Yes, as of version Python 3.4+ you can use <code>pathlib.Path.parents[levels_up-1]</code>. See <a href="https://stackoverflow.com/q/55516779/11021886">this question</a> for more solutions</span>
<span class="comment-copy">Be careful this answer not works if input contains trailing slash, e.g. <code>os.path.dirname('/tmp/lala/')</code> still return <code>'/tmp/lala'</code></span>
<span class="comment-copy">The trailing slash case can refer this answer: <a href="https://stackoverflow.com/a/25669963/1074998">stackoverflow.com/a/25669963/1074998</a></span>
<span class="comment-copy">Is there anything wrong with this approach? It works nice and look nice but a little hackish ;)</span>
<span class="comment-copy">It is slightly different from the accepted answer in how it deals with the links. They are identical otherwise.</span>
<span class="comment-copy">Could just use <code>for _ in xrange(depth)</code> instead of keeping track of the local variable.</span>
<span class="comment-copy">perhaps instead of <code>'/'</code> you should use <code>os.sep</code></span>
