<div class="post-text" itemprop="text">
<p>Lets say I have the following code:</p>
<pre><code>import collections
d = collections.OrderedDict()
d['foo'] = 'python'
d['bar'] = 'spam'
</code></pre>
<p>Is there a way I can access the items in a numbered manner, like: </p>
<pre><code>d(0) #foo's Output
d(1) #bar's Output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If its an <code>OrderedDict()</code> you can easily access the elements by indexing by getting the tuples of (key,value) pairs as follows</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = collections.OrderedDict()
&gt;&gt;&gt; d['foo'] = 'python'
&gt;&gt;&gt; d['bar'] = 'spam'
&gt;&gt;&gt; d.items()
[('foo', 'python'), ('bar', 'spam')]
&gt;&gt;&gt; d.items()[0]
('foo', 'python')
&gt;&gt;&gt; d.items()[1]
('bar', 'spam')
</code></pre>
<p><strong>Note for Python 3.X</strong></p>
<p><code>dict.items</code> would return an <a href="http://docs.python.org/3.3/library/stdtypes.html#dict-views">iterable dict view object</a> rather than a list. We need to wrap the call onto a list in order to make the indexing possible</p>
<pre><code>&gt;&gt;&gt; items = list(d.items())
&gt;&gt;&gt; items
[('foo', 'python'), ('bar', 'spam')]
&gt;&gt;&gt; items[0]
('foo', 'python')
&gt;&gt;&gt; items[1]
('bar', 'spam')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you have to use an OrderedDict or do you specifically want a map-like type that's ordered in some way with fast positional indexing? If the latter, then consider one of Python's many sorted dict types (which orders key-value pairs based on key sort order). Some implementations also support fast indexing. For example, the <a href="http://www.grantjenks.com/docs/sortedcontainers/">sortedcontainers</a> project has a <a href="http://www.grantjenks.com/docs/sortedcontainers/sorteddict.html">SortedDict</a> type for just this purpose.</p>
<pre><code>&gt;&gt;&gt; from sortedcontainers import SortedDict
&gt;&gt;&gt; sd = SortedDict()
&gt;&gt;&gt; sd['foo'] = 'python'
&gt;&gt;&gt; sd['bar'] = 'spam'
&gt;&gt;&gt; print sd.iloc[0] # Note that 'bar' comes before 'foo' in sort order.
'bar'
&gt;&gt;&gt; # If you want the value, then simple do a key lookup:
&gt;&gt;&gt; print sd[sd.iloc[1]]
'python'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a special case if you want the <em>first</em> entry (or close to it) in an OrderedDict, without creating a list:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; 
&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; d["foo"] = "one"
&gt;&gt;&gt; d["bar"] = "two"
&gt;&gt;&gt; d["baz"] = "three"
&gt;&gt;&gt; 
&gt;&gt;&gt; d.iteritems().next()
('foo', 'one')
</code></pre>
<p>(The first time you say "next()", it really means "first.")</p>
<p>In my informal test in Python 2.7, <code>iteritems().next()</code> with a small OrderedDict is only a tiny bit faster than <code>items()[0]</code>.  With an OrderedDict of 10,000 entries, <code>iteritems().next()</code> was about 200 times faster than <code>items()[0]</code>. </p>
<p><strong>BUT</strong> if you save the items() list once and then use the list a lot, that could be faster.  Or if you repeatedly { create an iteritems() iterator and step through it to to the position you want }, that could be slower.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is dramatically more efficient to use <strong>IndexedOrderedDict</strong> from the <a href="https://pypi.python.org/pypi/indexed.py" rel="nofollow noreferrer"><code>indexed</code></a> package.</p>
<p>Following Niklas's comment, I have done a benchmark on <strong>OrderedDict</strong> and <strong>IndexedOrderedDict</strong> with 1000 entries.</p>
<pre><code>In [1]: from numpy import *
In [2]: from indexed import IndexedOrderedDict
In [3]: id=IndexedOrderedDict(zip(arange(1000),random.random(1000)))
In [4]: timeit id.keys()[56]
1000000 loops, best of 3: 969 ns per loop

In [8]: from collections import OrderedDict
In [9]: od=OrderedDict(zip(arange(1000),random.random(1000)))
In [10]: timeit od.keys()[56]
10000 loops, best of 3: 104 Âµs per loop
</code></pre>
<p><strong>IndexedOrderedDict</strong> is ~100 times faster in indexing elements at specific position in this specific case.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>This community wiki attempts to collect existing answers.</em></p>
<p><strong>Python 2.7</strong></p>
<p>In python 2, the <code>keys()</code>, <code>values()</code>, and <code>items()</code> functions of <code>OrderedDict</code> return lists. Using <code>values</code> as an example, the simplest way is</p>
<pre><code>d.values()[0]  # "python"
d.values()[1]  # "spam"
</code></pre>
<p>For large collections where you only care about a single index, you can avoid creating the full list using the generator versions, <code>iterkeys</code>, <code>itervalues</code> and <code>iteritems</code>:</p>
<pre><code>import itertools
next(itertools.islice(d.itervalues(), 0, 1))  # "python"
next(itertools.islice(d.itervalues(), 1, 2))  # "spam"
</code></pre>
<p>The <a href="https://pypi.python.org/pypi/indexed.py" rel="noreferrer">indexed.py</a> package provides <code>IndexedOrderedDict</code>, which is designed for this use case and will be the fastest option.</p>
<pre><code>from indexed import IndexedOrderedDict
d = IndexedOrderedDict({'foo':'python','bar':'spam'})
d.values()[0]  # "python"
d.values()[1]  # "spam"
</code></pre>
<p>Using itervalues can be considerably faster for large dictionaries with random access:</p>
<pre><code>$ python2 -m timeit -s 'from collections import OrderedDict; from random import randint; size = 1000;   d = OrderedDict({i:i for i in range(size)})'  'i = randint(0, size-1); d.values()[i:i+1]'
1000 loops, best of 3: 259 usec per loop
$ python2 -m timeit -s 'from collections import OrderedDict; from random import randint; size = 10000;  d = OrderedDict({i:i for i in range(size)})' 'i = randint(0, size-1); d.values()[i:i+1]'
100 loops, best of 3: 2.3 msec per loop
$ python2 -m timeit -s 'from collections import OrderedDict; from random import randint; size = 100000; d = OrderedDict({i:i for i in range(size)})' 'i = randint(0, size-1); d.values()[i:i+1]'
10 loops, best of 3: 24.5 msec per loop

$ python2 -m timeit -s 'from collections import OrderedDict; from random import randint; size = 1000;   d = OrderedDict({i:i for i in range(size)})' 'i = randint(0, size-1); next(itertools.islice(d.itervalues(), i, i+1))'
10000 loops, best of 3: 118 usec per loop
$ python2 -m timeit -s 'from collections import OrderedDict; from random import randint; size = 10000;  d = OrderedDict({i:i for i in range(size)})' 'i = randint(0, size-1); next(itertools.islice(d.itervalues(), i, i+1))'
1000 loops, best of 3: 1.26 msec per loop
$ python2 -m timeit -s 'from collections import OrderedDict; from random import randint; size = 100000; d = OrderedDict({i:i for i in range(size)})' 'i = randint(0, size-1); next(itertools.islice(d.itervalues(), i, i+1))'
100 loops, best of 3: 10.9 msec per loop

$ python2 -m timeit -s 'from indexed import IndexedOrderedDict; from random import randint; size = 1000;   d = IndexedOrderedDict({i:i for i in range(size)})' 'i = randint(0, size-1); d.values()[i]'
100000 loops, best of 3: 2.19 usec per loop
$ python2 -m timeit -s 'from indexed import IndexedOrderedDict; from random import randint; size = 10000;  d = IndexedOrderedDict({i:i for i in range(size)})' 'i = randint(0, size-1); d.values()[i]'
100000 loops, best of 3: 2.24 usec per loop
$ python2 -m timeit -s 'from indexed import IndexedOrderedDict; from random import randint; size = 100000; d = IndexedOrderedDict({i:i for i in range(size)})' 'i = randint(0, size-1); d.values()[i]'
100000 loops, best of 3: 2.61 usec per loop

+--------+-----------+----------------+---------+
|  size  | list (ms) | generator (ms) | indexed |
+--------+-----------+----------------+---------+
|   1000 | .259      | .118           | .00219  |
|  10000 | 2.3       | 1.26           | .00224  |
| 100000 | 24.5      | 10.9           | .00261  |
+--------+-----------+----------------+---------+
</code></pre>
<p><strong>Python 3.6</strong></p>
<p>Python 3 has the same two basic options (list vs generator), but the dict methods return generators by default.</p>
<p>List method:</p>
<pre><code>list(d.values())[0]  # "python"
list(d.values())[1]  # "spam"
</code></pre>
<p>Generator method:</p>
<pre><code>import itertools
next(itertools.islice(d.values(), 0, 1))  # "python"
next(itertools.islice(d.values(), 1, 2))  # "spam"
</code></pre>
<p>Python 3 dictionaries are an order of magnitude faster than python 2 and have similar speedups for using generators.</p>
<pre><code>+--------+-----------+----------------+---------+
|  size  | list (ms) | generator (ms) | indexed |
+--------+-----------+----------------+---------+
|   1000 | .0316     | .0165          | .00262  |
|  10000 | .288      | .166           | .00294  |
| 100000 | 3.53      | 1.48           | .00332  |
+--------+-----------+----------------+---------+
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's a new era and with Python 3.6.1 dictionaries now retain their order. These semantics aren't explicit because that would require BDFL approval. But Raymond Hettinger is the next best thing (and funnier) and he makes a <a href="https://www.youtube.com/watch?v=p33CVV29OG8" rel="nofollow noreferrer">pretty strong case</a> that dictionaries will be ordered for a very long time.</p>
<p>So now it's easy to create slices of a dictionary:</p>
<pre><code>test_dict = {
                'first':  1,
                'second': 2,
                'third':  3,
                'fourth': 4
            }

list(test_dict.items())[:2]
</code></pre>
<p><strong>Note:</strong> Dictonary insertion-order preservation is now <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer">official in Python 3.7</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>for OrderedDict() you can access the elements by indexing by getting the tuples of (key,value) pairs as follows or using  '.values()'</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = collections.OrderedDict()
&gt;&gt;&gt; d['foo'] = 'python'
&gt;&gt;&gt; d['bar'] = 'spam'
&gt;&gt;&gt; d.items()
[('foo', 'python'), ('bar', 'spam')]
&gt;&gt;&gt;d.values()
odict_values(['python','spam'])
&gt;&gt;&gt;list(d.values())
['python','spam']
</code></pre>
</div>
<span class="comment-copy">Note that in 3.x the <code>items</code> method returns an interable dictionary view object rather than a list, and don't support slicing or indexing.  So you'd have to turn it into a list first. <a href="http://docs.python.org/3.3/library/stdtypes.html#dict-views" rel="nofollow noreferrer">docs.python.org/3.3/library/stdtypes.html#dict-views</a></span>
<span class="comment-copy">Copying items, values or keys into lists can be quite slow for big dictonaries. I created a rewrite of OrderedDict() with a different internal datastructure for applications that have to do this very often: <a href="https://github.com/niklasf/indexed.py" rel="nofollow noreferrer">github.com/niklasf/indexed.py</a></span>
<span class="comment-copy">@PeterDeGlopper how do I turn it into a list?</span>
<span class="comment-copy">@Dejel - use the constructor: <code>list(d.items())</code></span>
<span class="comment-copy">If you only access one item, you can avoid the memory overhead of <code>list(d.items())</code> by using <code>next(islice(d.items(), 1))</code> to get <code>('bar', 'spam')</code></span>
<span class="comment-copy">thank you for making me aware of sortedcontainers</span>
<span class="comment-copy">You could also use <code>SortedDict</code> with a key function to avoid comparisons. Like: <code>SortedDict(lambda key: 0, ...)</code>. Keys will then be unsorted but will remain in a stable order and are indexable.</span>
<span class="comment-copy">Python 3 <code>OrderedDict</code>s don't have an <code>iteritems()</code> method, so you will need to do the following in order to obtain the first item: <code>next(iter(d.items()))</code>.</span>
<span class="comment-copy">In Python 3 <code>d.items()</code> does not seem to be an iterator, so iter in front will not help?  It will still return the complete list :(</span>
<span class="comment-copy">Update: I was wrong, iter(d.items()) returns <code>odict_iterator</code> and was confirmed to me on IRC #python that this does not make a copy of the list.</span>
<span class="comment-copy">Nice! Not yet in Anaconda unfortunately.</span>
