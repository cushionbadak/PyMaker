<div class="post-text" itemprop="text">
<p>I am programming in Python, and I am wondering if i can test if a function has been called in my code </p>
<pre><code>def example():
    pass
example()
#Pseudocode:
if example.has_been_called:
   print("foo bar")
</code></pre>
<p>How would I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If it's OK for the function to know its own name, you can use a function attribute:</p>
<pre><code>def example():
    example.has_been_called = True
    pass
example.has_been_called = False


example()

#Actual Code!:
if example.has_been_called:
   print("foo bar")
</code></pre>
<p>You could also use a decorator to set the attribute:</p>
<pre><code>import functools

def trackcalls(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        wrapper.has_been_called = True
        return func(*args, **kwargs)
    wrapper.has_been_called = False
    return wrapper

@trackcalls
def example():
    pass


example()

#Actual Code!:
if example.has_been_called:
   print("foo bar")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer">Memoization</a> functions have been around since the 1960s. In python you can use them as decorators on your <strong>example()</strong> function.</p>
<p>The standard memoization function looks something like this:</p>
<pre><code>def memoize(func):
    memo = {}
    def wrapper(*args):
        if not args in memo:
            memo[args] = func(*args)
        return memo[args]
    return wrapper 
</code></pre>
<p>and you decorate your function like this:</p>
<pre><code>@memoize
def example():
    pass
</code></pre>
<p>In python3.2, you can use the <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">functools.lru_cache</a> instead of the memoziation function.</p>
<pre><code>import functools

@functools.lru_cache(maxsize=None)
def example():
     pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a decorator that will watch all your functiona, using colorama, and return a nice output.</p>
<pre><code>try:
    import colorama
except ImportError:
    class StdClass: pass
    def passer(*args, **kwargs): pass
    colorama = StdClass()
    colorama.init = passer
    colorama.Fore = StdClass()
    colorama.Fore.RED = colorama.Fore.GREEN = ''

def check_for_use(show=False):
    if show:
        try:
            check_for_use.functions
        except AttributeError:
            return
        no_error = True
        for function in check_for_use.functions.keys():
            if check_for_use.functions[function][0] is False:
                print(colorama.Fore.RED + 'The function {!r} hasn\'t been called. Defined in "{}" '.format(function, check_for_use.functions[function][1].__code__.co_filename))
                no_error = False
        if no_error:
            print(colorama.Fore.GREEN + 'Great! All your checked function are being called!')
        return check_for_use.functions
    try:
        check_for_use.functions
    except AttributeError:
        check_for_use.functions = {}
        if colorama:
            colorama.init(autoreset=True)

    def add(function):
        check_for_use.functions[function.__name__] = [False, function]
        def func(*args, **kwargs):
            check_for_use.functions[function.__name__] = [True, function]
            function(*args, **kwargs)
        return func
    return add

@check_for_use()
def hello():
    print('Hello world!')

@check_for_use()
def bonjour(nb):
    print('Bonjour tout le monde!')


# hello(); bonjour(0)

hello()


check_for_use(True) # outputs the following
</code></pre>

Output:

<pre><code>Hello world!
The function 'bonjour' hasn't been called. Defined in "path_to_file.py" 
</code></pre>
</div>
<span class="comment-copy">I wrote a <a href="http://code.activestate.com/recipes/577534-counting-decorator/?in=user-4173873" rel="nofollow noreferrer">counting decorator</a> that when applied will tell you how many times a function was called. You can adapt this to your need if you want.</span>
<span class="comment-copy">What are you hoping to do with this information?</span>
<span class="comment-copy">It's interesting to know that the function can get an attribute because everything in Python is an object. Functions are objects of the "function" class. And you can assign an attribute to an instance because you have not to declare variables in Python, so you can assign them at runtime.</span>
<span class="comment-copy">Notice that using the function attribute will fail a mypy check</span>
<span class="comment-copy">@DanielBraun In what way will it fail a mypy check?</span>
