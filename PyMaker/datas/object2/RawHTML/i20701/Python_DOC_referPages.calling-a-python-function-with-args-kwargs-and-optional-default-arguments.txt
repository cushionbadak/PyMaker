<div class="post-text" itemprop="text">
<p>In python, I can define a function as follows:</p>
<pre><code>def func(kw1=None,kw2=None,**kwargs):
   ...
</code></pre>
<p>In this case, i can call func as:</p>
<pre><code>func(kw1=3,kw2=4,who_knows_if_this_will_be_used=7,more_kwargs=Ellipsis)
</code></pre>
<p>I can also define a function as:</p>
<pre><code>def func(arg1,arg2,*args):
    ...
</code></pre>
<p>which can be called as</p>
<pre><code>func(3,4,additional,arguments,go,here,Ellipsis)
</code></pre>
<p>Finally, I can combine the two forms</p>
<pre><code>def func(arg1,arg2,*args,**kwargs):
    ...
</code></pre>
<p>But, what does not work is calling:</p>
<pre><code>func(arg1,arg2,*args,kw1=None,kw2=None,**kwargs):  #SYNTAX ERROR (in python 2 only,  apparently this works in python 3)
    ...
</code></pre>
<p>My original thought was that this was probably because a function</p>
<pre><code>def func(arg1,arg2,*args,kw1=None):
    ...
</code></pre>
<p>can be called as</p>
<pre><code>func(1,2,3) #kw1 will be assigned 3
</code></pre>
<p>So this would introduce some ambiguity as to whether 3 should be packed into args or kwargs.  However, with python 3, there is the ability to specify keyword only arguments:</p>
<pre><code>def func(a,b,*,kw=None):  #can be called as func(1,2), func(1,2,kw=3), but NOT func(1,2,3)
   ...
</code></pre>
<p>With this, it seems that there is no syntactic ambiguity with:</p>
<pre><code>def func(a,b,*args,*,kw1=None,**kwargs):
    ...
</code></pre>
<p>However, this still brings up a syntax error (tested with Python3.2).  Is there a reason for this that I am missing?  And, is there a way to get the behavior I described above (Having *args with default arguments) -- I know I can simulate that behavior by manipulating the kwargs dictionary inside the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>can</em> do that in Python 3.</p>
<pre><code>def func(a,b,*args,kw1=None,**kwargs):
</code></pre>
<p>The bare <code>*</code> is only used when you want to specify keyword only arguments <em>without</em> accepting a variable number of positional arguments with <code>*args</code>. You don't use two <code>*</code>s.</p>
<p>To quote from the grammar, in <a href="https://docs.python.org/2/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">Python 2</a>, you have</p>
<pre><code>parameter_list ::=  (defparameter ",")*
                    (  "*" identifier [, "**" identifier]
                    | "**" identifier
                    | defparameter [","] )
</code></pre>
<p>while in <a href="https://docs.python.org/release/3.2.2/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">Python 3</a>, you have</p>
<pre><code>parameter_list ::=  (defparameter ",")*
                    (  "*" [parameter] ("," defparameter)*
                    [, "**" parameter]
                    | "**" parameter
                    | defparameter [","] )
</code></pre>
<p>which includes a provision for additional parameters after the <code>*</code> parameter.</p>
<p><strong>UPDATE:</strong></p>
<p>Latest Python 3 documentation <a href="https://docs.python.org/3/reference/compound_stmts.html#def" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to do a mixture of both remember that *args and **kwargs must be the last parameters specified.</p>
<pre><code>def func(arg1,arg2,*args,kw1=None,kw2=None,**kwargs): #Invalid
def func(arg1,arg2,kw1=None,kw2=None,*args,**kwargs): #Valid
</code></pre>
<p>The comments seem to be based on mixing up how a function definition is constructed compared to how the arguments provided are assigned back to the parameters specified in the definition.</p>
<p>This is the definition of this function which has 6 parameters.
It is called by passing named and unnamed arguments to it in a function call.</p>
<p>For this example...
When an argument is named when calling the function it can be provided out of order.
arg1 and arg2 are mandatory parameters and if not passed to the function as named arguments, then they must be assigned in order from the provided unnamed arguments.
kw1 and kw2 have default values provided in the function definition so they are not mandatory, but if not provided for as named arguments they will take any available values from the remaining provided unnamed arguments.
Any unnamed arguments left over are provided to the function in an array called args
Any named arguments that do not have a corresponding parameter name in the function definition are provided to the function call in a dictionary called kwargs.</p>
</div>
<span class="comment-copy">no idea why you got syntax error for "def func(arg1,arg2,*args,kw1=None,kw2=None,**kwargs):"</span>
<span class="comment-copy">@okm  Because I didn't test that version on python 3, only python 2.  I just assumed the final version would work, and when It didn't, I assumed the previous versions wouldn't work either.  Thanks!.</span>
<span class="comment-copy">How should a bare <code>3</code> ever get into <code>kwargs</code>?  What keyword would it use?  I cannot see any ambiguity.  Note that the bare <code>*</code> in the argument list is only useful if there's no <code>*args</code>.  It's a placeholder you use <i>instead</i> of <code>*args</code>.</span>
<span class="comment-copy">Good question but why spreading <b>the world-encompassing confusion</b> of calling <i>parameters</i> (those guys in function definitions) <i>arguments</i> (those fellows in function calls)?</span>
<span class="comment-copy">*args should be after keyword arguments should it not? e.g. def func(a,b, kw1=None, *args, **kwargs):</span>
<span class="comment-copy">@Nimi I'm specifically showing a Python 3 only feature that allows you to put named arguments after <code>*args</code>, so they can only be used by name, not position. What you're showing allows <code>kw1</code> to be filled in by position or name -- for your version <code>func(1, 2, 3)</code> will fill in <code>a</code>, <code>b</code>, and <code>kw1</code>, where in my version <code>func(1, 2, 3)</code> will fill in <code>a</code>, <code>b</code>, and <code>args</code>, and require you to do <code>func(1, 2, kw1=3)</code> if you want to fill in <code>kw1</code>.</span>
<span class="comment-copy">This is syntactically valid, but doesn't work as one might expect because there's ambiguity as to whether extra required arguments are mapped to the named keyword arguments or *args.</span>
<span class="comment-copy">I would go a step further and say that this does not work for making kw1 and kw2 'keyword' args with Python 2.7, which is why I'm here!  The form would be better listed as <code>func(arg1,arg2,arg3=None,arg4=None,*args,**kwargs): #Valid with defaults on positional args</code>, but this is really just four positional args, two of which are optional. To pass kwargs, you will need to fill in <i>all four args</i>, including arg3 and arg4.</span>
<span class="comment-copy">I suggest <a href="http://stackoverflow.com/a/15302038/527489">stackoverflow.com/a/15302038/527489</a> for Python 2.7 and notice the 'def_val'.</span>
<span class="comment-copy">As @sage mentioned, this means you NEED to fill in <code>kw1</code> and <code>kw2</code> if you want to define <code>args*</code></span>
<span class="comment-copy">This is only true for Python 2, not Python 3, where arguments specified after the <code>*args</code> var-positional parameter (or a lone <code>*</code>) are called <a href="https://docs.python.org/3/glossary.html#keyword-only-parameter" rel="nofollow noreferrer">keyword-only parameters</a>. These do not even need to have default values.</span>
