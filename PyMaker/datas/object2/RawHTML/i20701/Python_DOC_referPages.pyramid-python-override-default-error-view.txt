<div class="post-text" itemprop="text">
<p>Task: When an error occurs in one of my views I need to show a custom error view. The error type does not matter.</p>
<p>I tried to override all exceptions by registring a view for all exceptions, like this:</p>
<pre><code>&lt;view
    context="Exception"
    renderer="server_error.pt"
    /&gt;
</code></pre>
<p>It worked <strong>good</strong>. All exceptions were showing my view. But the problem was that those <strong>errors stopped logging</strong>. Of cource I can do something like logger.error(traceback) in my error view, but this is a dumb idea.</p>
<p>How can I register a view for all errors without breaking the logging pyramid system.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can log the error in your view via the plain old python logging. Or Set the status on the response to 500 (assuming your view is now return a status of 200 which indicates a successful response ). </p>
<p>Edit: working example</p>
<p>I'm not a logging expert, but I was under the impression that your logging config in development.ini/production.ini would be picked up, the example below seems to prove that but you be the judge.....</p>
<p>changes to log config from default</p>
<pre><code>[formatter_generic]
# format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
format = y u no work??!!?? %(message)s
# End logging configuration
</code></pre>
<p>the views</p>
<pre><code>from pyramid.view import view_config
from webob import Response
import logging
log = logging.getLogger(__name__)

@view_config(route_name='home', renderer='templates/mytemplate.pt')
def my_view(request):
    raise ValueError("oops")
    return {'project':'tstLogError'}


@view_config(context=Exception)
def exception_view(context, request):
    log.error("The error was: %s" % context, exc_info=(context))
    return Response(status_int=500, body=str(context))

    from pyramid.view import view_config
    from webob import Response
</code></pre>
<p>console output:</p>
<pre><code>serving on http://0.0.0.0:6543
y u no work??!!?? The error was: oops
Traceback (most recent call last):
  File "/home/twillis/projects/TestLogError/local/lib/python2.7/site-packages/pyramid/tweens.py", line 20, in excview_tween
    response = handler(request)
  File "/home/twillis/projects/TestLogError/local/lib/python2.7/site-packages/pyramid/router.py", line 164, in handle_request
    response = view_callable(context, request)
  File "/home/twillis/projects/TestLogError/local/lib/python2.7/site-packages/pyramid/config/views.py", line 333, in rendered_view
    result = view(context, request)
  File "/home/twillis/projects/TestLogError/local/lib/python2.7/site-packages/pyramid/config/views.py", line 471, in _requestonly_view
    response = view(request)
  File "/home/twillis/projects/TestLogError/tstLogError/tstlogerror/views.py", line 8, in my_view
    raise ValueError("oops")
ValueError: oops
</code></pre>
<p><img alt="browser screenshot" src="https://i.stack.imgur.com/3GHzj.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>It is not dumb to log the exception in your own error view (the exception will be available as <code>request.context</code>.) As is always the case with exceptions, you can either do nothing, handle the exception and log it, or re-raise the same exception.</p>
<p>In my setup, an uncaught exception is logged by the WSGI server itself, in this case wsgiref. It's not possible to trigger both the WSGI server's normal response mechanism and its exception logger.</p>
<p>wsgiref's exception logger:</p>
<pre><code>def log_exception(self,exc_info):
    """Log the 'exc_info' tuple in the server log

    Subclasses may override to retarget the output or change its format.
    """
    try:
        from traceback import print_exception
        stderr = self.get_stderr()
        print_exception(
            exc_info[0], exc_info[1], exc_info[2],
            self.traceback_limit, stderr
        )
        stderr.flush()
    finally:
        exc_info = None
</code></pre>
<p>One alternative that may be acceptable to you is to display your custom error page at the web server layer instead of at the Pyramid layer.</p>
</div>
<div class="post-text" itemprop="text">
<p>The plugin <a href="https://docs.pylonsproject.org/projects/pyramid-exclog/en/latest/" rel="nofollow noreferrer">pyramid_exclog</a> fills this purpose very well. </p>
<p>It is implemented as a tween so that you can still write a view for <code>Exception</code> and it will log the details of the exception to whatever log handler you specify in your pyramid configuration file - weather that is to the console, a file or an email.</p>
<p>In addition to the <a href="https://docs.pylonsproject.org/projects/pyramid-exclog/en/latest/" rel="nofollow noreferrer">pyramid_exclog</a> documentation I also found the Python <a href="https://docs.python.org/3/library/logging.config.html#configuration-file-format" rel="nofollow noreferrer">Configuration file format</a> section of the Python documentation very helpful since the config is a quite tricky to get right.</p>
</div>
<span class="comment-copy">You must log the error yourself or reraise the error. If you reraise the error it will log but wont render your view. If you log the error within your view, it will log and render your view.</span>
<span class="comment-copy">As I sayed: Logging with base logger is a bad solution. If I do that I can not log it with pyramid's configuration. I tried the statatus code setting, but it did not change the logging situation (still no error).</span>
<span class="comment-copy">so what you are saying is when you hit that view with your browser, your browser sees a HTTP_STATUS=500 but it's not being logged? That is suprising. Id have to see it to believe it.</span>
<span class="comment-copy">Dou! In your example you log it yourself :). it is displayed with 'y u no work??!!??' is because you changed the formatter config, which is applied on all output to the sys.error. But still thanks! Now I understand that there is no other way, than to log it yourself and the formatter is applied, so it seems to not be a problem</span>
<span class="comment-copy">that's what I understood you to be asking is that not the case?</span>
<span class="comment-copy">Thanks for the answer. Seems like I will just log it inside the view then.</span>
