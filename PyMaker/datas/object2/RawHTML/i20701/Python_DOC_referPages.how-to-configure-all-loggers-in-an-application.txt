<div class="post-text" itemprop="text">
<p>Python's logging module lets modules or classes define their own loggers. And different loggers can have different handlers. Some of them may choose to log to a file, while some choose to log to, say, stdout.</p>
<p>Now my application uses several of these modules, each with their own loggers that have various handlers. Can I unify the logging behavior so that all logs go to a log file that I specified? In other words, is there a way to .config() all the loggers' handlers at once, from a single place?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should probably look into the <a href="http://docs.python.org/howto/logging.html" rel="noreferrer">Python Logging HOWTO</a> to understand how it works.</p>
<p>In short, all that modules usually do is getting a logger of the form <code>G_LOG = logging.getLogger('package.name')</code> and sending messages to the logger: <code>G_LOG.info('some message'), G_LOG.exception('something bad happened')</code>. Modules should not usually configure anything.</p>
<p>The application that uses the modules can turn the logging on and configure the handlers based on the logger names:</p>
<ul>
<li>listen all messages, or</li>
<li>listen only messages above a certain threshold, or</li>
<li>listen messages only from loggers whose name starts with <code>package</code>, or</li>
<li>listen messages only from loggers whose name starts woth <code>package.name</code>, etc</li>
</ul>
<p>The easiest way is to configure logging through <a href="http://docs.python.org/library/logging.html#logging.basicConfig" rel="noreferrer">logging.basicConfig</a> somewhere in the beginning of your application:</p>
<pre><code>logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(levelname)-8s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    filename=log_file, filemode='a')
</code></pre>
<p>That way you will write all logging messages from all modules to the <code>log_file</code>.</p>
<p>If you need a more detailed logging strategy (put logs from different loggers to different files, or send stacktraces to a separate file), it is better to define a logging config file and configure logging using <a href="http://docs.python.org/library/logging.config.html#logging.config.dictConfig" rel="noreferrer">logging.config.dictConfig</a> or <code>logging.config.fileConfig</code>.</p>
<p>P.S. I usually create two loggers as module variables:</p>
<pre><code>G_LOG = logging.getLogger(__name__)
ST_LOG = logging.getLogger('stacktrace.' + __name__)
</code></pre>
<p>to <code>G_LOG</code> I send only one-line messages. To <code>ST_LOG</code> I duplicate important messages using <code>ST_LOG.exception</code> which implicitly has <code>exc_info=True</code> and writes the stacktrace of the current exception.</p>
<p>At the start of the application I load a configuration that configures two loggers (and two file handlers for them): one that receives messages that start with <code>stacktrace</code> and has <code>propagate=0</code> (that is stacktrace messages are not visible at the top) and the root logger that handles the rest of the messages. I will not put here my complete log config files, since it is a useful home work to understand how it all works.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">Logging HOWTO</a>:</p>
<blockquote>
<p>Child loggers propagate messages up to the handlers associated with their ancestor loggers. Because of this, it is unnecessary to define and configure handlers for all the loggers an application uses. It is sufficient to configure handlers for a top-level logger and create child loggers as needed. (You can, however, turn off propagation by setting the propagate attribute of a logger to False.)</p>
</blockquote>
<p>Any handlers you add to the root logger will be used when child loggers create log entries.</p>
<pre><code>import logging

root_handler = ...

root_logger = logging.getLogger()
root_logger.addHandler(root_handler)  # Will receive all log entries

# Meanwhile in a module...

import logging

logger = logging.getLogger(__name__)

logger.error(...)  # Will go to root_handler
</code></pre>
</div>
<span class="comment-copy">I love the stacktrace idea you have here, but I hate your "I will not put here my complete log config files" position. I've been doing python dev for nearly 10 years and still do logging very poorly because of how terrible the documentation is. A few times a year I invest entire work days to trying to find something better. I usually give up and settle for something I've done in the past.</span>
<span class="comment-copy">@BrunoBronosky, probably, you are right. It's a good idea.</span>
