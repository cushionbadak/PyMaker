<div class="post-text" itemprop="text">
<p>How do I make a:</p>
<pre><code>if str(variable) == [contains text]:
</code></pre>
<p>condition? </p>
<p>(or something, because I am pretty sure that what I just wrote is completely wrong)</p>
<p>I am sort of trying to check if a <code>random.choice</code> from my list is <code>["",]</code> (blank) or contains <code>["text",]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just compare your string to the empty string:</p>
<pre><code>if variable != "":
    etc.
</code></pre>
<p>But you can abbreviate that as follows:</p>
<pre><code>if variable:
    etc.
</code></pre>
<p>Explanation: An <code>if</code> actually works by computing a value for the logical expression you give it: <code>True</code> or <code>False</code>. If you simply use a variable name (or a literal string like "hello") instead of a logical test, the rule is: An empty string counts as False, all other strings count as True. Empty lists and the number zero also count as false, and most other things count as true.</p>
</div>
<div class="post-text" itemprop="text">
<p>The "Pythonic" way to check if a string is empty is:</p>
<pre><code>import random
variable = random.choice(l)
if variable:
    # got a non-empty string
else:
    # got an empty string
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Empty strings are False by default:</p>
<pre><code>&gt;&gt;&gt; if not "":
...     print("empty")
...
empty
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just say <code>if s</code> or <code>if not s</code>. As in</p>
<pre><code>s = ''
if not s:
    print 'not', s
</code></pre>
<p>So in your specific example, if I understand it correctly...</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; l = ['', 'foo', '', 'bar']
&gt;&gt;&gt; def default_str(l):
...     s = random.choice(l)
...     if not s:
...         print 'default'
...     else:
...         print s
... 
&gt;&gt;&gt; default_str(l)
default
&gt;&gt;&gt; default_str(l)
default
&gt;&gt;&gt; default_str(l)
bar
&gt;&gt;&gt; default_str(l)
default
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>element = random.choice(myList)
if element:
    # element contains text
else:
    # element is empty ''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For python 3, you can use <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer">bool()</a></p>
<pre><code>&gt;&gt;&gt; bool(None)
False
&gt;&gt;&gt; bool("")
False
&gt;&gt;&gt; bool("a")
True
&gt;&gt;&gt; bool("ab")
True
&gt;&gt;&gt; bool("9")
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How do i make an: <code>if str(variable) == [contains text]:</code> condition?</p>
</blockquote>
<p>Perhaps the most direct way is:</p>
<pre><code>if str(variable) != '':
  # ...
</code></pre>
<p>Note that the <code>if not ...</code> solutions test the <em>opposite</em> condition.</p>
</div>
<div class="post-text" itemprop="text">
<p>Some time we have more spaces in between quotes, then use this approach</p>
<pre><code>a = "   "
&gt;&gt;&gt; bool(a)
True
&gt;&gt;&gt; bool(a.strip())
False

if not a.strip():
    print("String is empty")
else:
    print("String is not empty")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if the variable contains text then:</p>
<p><code>len(variable) != 0</code></p>
<p>of it does not</p>
<p><code>len(variable) == 0</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>string = "TEST"
try:
  if str(string):
     print "good string"
except NameError:
     print "bad string"
</code></pre>
</div>
<span class="comment-copy">do you mean <code>if str(variable) == "my text":</code> ?</span>
<span class="comment-copy">You seem to be a little confused, I'd sugget you to read a <a href="http://www.google.com/search?q=python+tutorial" rel="nofollow noreferrer">python tutorial</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/9573244/most-elegant-way-to-check-if-the-string-is-empty-in-python">Most elegant way to check if the string is empty in Python?</a></span>
<span class="comment-copy">Hehe, i kind of understand the principle bout the If, True and False thingy. Warcraft 3 trigger editor: 'if (this unit equals that unit) == True'</span>
<span class="comment-copy">I'm guessing you can leave out the <code>== True</code> part in the Warcraft editor, too.</span>
<span class="comment-copy">Yep. Never actually thought of that hehe, but this is definetly helpful.</span>
<span class="comment-copy">This is not the SAME. Do not do this. In [14]: a = ""  In [15]: if a.replace(' ', ''):     ...:     print 1     ...:  In [16]: if a.replace(' ', '') == "":     ...:     print 1     ...: 1</span>
<span class="comment-copy">Oh right, what @AndreaBergonzo said: When you compare a string to "", you're checking if it's empty-- which counts as False.</span>
<span class="comment-copy">I dont get it. so, if i do "variable = random.choice(list)" and the variable is a blank "", then i can just do the condition "if variable:" and... yeah, i dont really get anything else of what you wrote...</span>
<span class="comment-copy">@user1275670, it sounds like you do understand. But I added another example just in case. In short <code>''</code> evaluates to <code>False</code>, so if you want to get <code>True</code> when <code>s</code> is an empty string, you say <code>if not s</code>.</span>
<span class="comment-copy">This would've been perfect but <code>bool(0)</code> returns <code>False</code></span>
<span class="comment-copy">@kaushalagrawal <code>bool(0)</code> returning <code>False</code> is expectable for me. Why it shouldn't ?</span>
<span class="comment-copy">True, I don't remember/understand why I felt so</span>
<span class="comment-copy">Usually is a good practice in StackOverflow to comment the code posted.</span>
<span class="comment-copy">While this answer is probably correct and useful, it is preferred if you include some explanation along with it to explain how it helps to solve the problem. This becomes especially useful in the future, if there is a change (possibly unrelated) that causes it to stop working and users need to understand how it once worked.</span>
<span class="comment-copy">Sorry, my English it's so bad but in future i will keep in mind to comment  my post.</span>
