<div class="post-text" itemprop="text">
<p>I want to find out the following:
given a date (<code>datetime</code> object), what is the corresponding day of the week.</p>
<p>For instance Sunday is the first day, Monday: second day.. and so on</p>
<p>And then if the input is something like today's date.</p>
<h2>Example</h2>
<pre><code>&gt;&gt;&gt; today = datetime.datetime(2017, 10, 20)
&gt;&gt;&gt; today.get_weekday()  # what I look for
</code></pre>
<p>The output is maybe <code>6</code> (since its Friday)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>weekday()</code> (<a href="http://docs.python.org/library/datetime.html#datetime.date.weekday">docs</a>):</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
&gt;&gt;&gt; datetime.datetime.today().weekday()
4
</code></pre>
<p>From the documentation:</p>
<blockquote>
<p>Return the day of the week as an integer, where Monday is 0 and Sunday is 6.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you'd like to have the date in English:</p>
<pre><code>from datetime import date
import calendar
my_date = date.today()
calendar.day_name[my_date.weekday()]  #'Wednesday'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/datetime.html#datetime.date.weekday" rel="noreferrer"><code>date.weekday()</code></a> or <a href="https://docs.python.org/3/library/datetime.html#datetime.date.isoweekday" rel="noreferrer"><code>date.isoweekday()</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A solution whithout imports for dates after 1700/1/1 </p>
<pre><code>def weekDay(year, month, day):
    offset = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]
    week   = ['Sunday', 
              'Monday', 
              'Tuesday', 
              'Wednesday', 
              'Thursday',  
              'Friday', 
              'Saturday']
    afterFeb = 1
    if month &gt; 2: afterFeb = 0
    aux = year - 1700 - afterFeb
    # dayOfWeek for 1700/1/1 = 5, Friday
    dayOfWeek  = 5
    # partial sum of days betweem current date and 1700/1/1
    dayOfWeek += (aux + afterFeb) * 365                  
    # leap year correction    
    dayOfWeek += aux / 4 - aux / 100 + (aux + 100) / 400     
    # sum monthly and day offsets
    dayOfWeek += offset[month - 1] + (day - 1)               
    dayOfWeek %= 7
    return dayOfWeek, week[dayOfWeek]

print weekDay(2013, 6, 15) == (6, 'Saturday')
print weekDay(1969, 7, 20) == (0, 'Sunday')
print weekDay(1945, 4, 30) == (1, 'Monday')
print weekDay(1900, 1, 1)  == (1, 'Monday')
print weekDay(1789, 7, 14) == (2, 'Tuesday')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I solved this for a codechef <a href="http://www.codechef.com/TCTR2012/problems/NOPC10/" rel="noreferrer">question</a>.</p>
<pre><code>import datetime
dt = '21/03/2012'
day, month, year = (int(x) for x in dt.split('/'))    
ans = datetime.date(year, month, day)
print ans.strftime("%A")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you'd like to have the date in English:</p>
<pre><code>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; datetime.datetime.today().strftime('%A')
'Wednesday'
</code></pre>
<p>Read more:
<a href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="noreferrer">https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is a solution if the date is a datetime object.</p>
<pre><code>import datetime
def dow(date):
    days=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]
    dayNumber=date.weekday()
    print days[dayNumber]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>datetime library sometimes gives errors with strptime() so I switched to dateutil library. Here's an example of how you can use it :</p>
<pre><code>from dateutil import parser
parser.parse('January 11, 2010').strftime("%a")
</code></pre>
<p>The output that you get from this is <code>'Mon'</code>. If you want the output as 'Monday', use the following :</p>
<pre><code>parser.parse('January 11, 2010').strftime("%A")
</code></pre>
<p>This worked for me pretty quickly. I was having problems while using the datetime library because I wanted to store the weekday name instead of weekday number and the format from using the datetime library was causing problems. If you're not having problems with this, great! If you are, you cand efinitely go for this as it has a simpler syntax as well. Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are given the day, month, and year, you could do:</p>
<pre><code>import datetime
DayL = ['Mon','Tues','Wednes','Thurs','Fri','Satur','Sun']
date = DayL[datetime.date(year,month,day).weekday()] + 'day'
#Set day, month, year to your value
#Now, date is set as an actual day, not a number from 0 to 6.

print(date)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have reason to avoid the use of the datetime module, then this function will work.</p>
<p>Note: The change from the Julian to the Gregorian calendar is assumed to have occurred in 1582. If this is not true for your calendar of interest then change the line <em>if year &gt; 1582:</em> accordingly.</p>
<pre><code>def dow(year,month,day):
    """ day of week, Sunday = 1, Saturday = 7
     http://en.wikipedia.org/wiki/Zeller%27s_congruence """
    m, q = month, day
    if m == 1:
        m = 13
        year -= 1
    elif m == 2:
        m = 14
        year -= 1
    K = year % 100    
    J = year // 100
    f = (q + int(13*(m + 1)/5.0) + K + int(K/4.0))
    fg = f + int(J/4.0) - 2 * J
    fj = f + 5 - J
    if year &gt; 1582:
        h = fg % 7
    else:
        h = fj % 7
    if h == 0:
        h = 7
    return h
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're not solely reliant on the <code>datetime</code> module, <code>calendar</code> might be a better alternative. This, for example, will provide you with the day codes:</p>
<pre><code>calendar.weekday(2017,12,22);
</code></pre>
<p>And this will give you the day itself:</p>
<pre><code>days = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]
days[calendar.weekday(2017,12,22)]
</code></pre>
<p>Or in the style of python, as a one liner:</p>
<pre><code>["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"][calendar.weekday(2017,12,22)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime
import calendar

day, month, year = map(int, input().split())
my_date = datetime.date(year, month, day)
print(calendar.day_name[my_date.weekday()])
</code></pre>
<h1>Output Sample</h1>
<pre><code>08 05 2015
Friday
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Say you have <strong>timeStamp: String variable, YYYY-MM-DD HH:MM:SS</strong></p>
<p><strong>step 1</strong>: convert it to dateTime function with blow code...</p>
<pre><code>df['timeStamp'] = pd.to_datetime(df['timeStamp'])
</code></pre>
<p><strong>Step 2</strong> : Now you can extract all the required feature as below which will create new Column for each of the fild- hour,month,day of week,year, date</p>
<pre><code>df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)
df['Month'] = df['timeStamp'].apply(lambda time: time.month)
df['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)
df['Year'] = df['timeStamp'].apply(lambda t: t.year)
df['Date'] = df['timeStamp'].apply(lambda t: t.day)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get Sunday as 1 through Saturday as 7, this is the simplest solution to your question:</p>
<pre><code>datetime.date.today().toordinal()%7 + 1
</code></pre>
<p>All of them:</p>
<pre><code>import datetime

today = datetime.date.today()
sunday = today - datetime.timedelta(today.weekday()+1)

for i in range(7):
    tmp_date = sunday + datetime.timedelta(i)
    print tmp_date.toordinal()%7 + 1, '==', tmp_date.strftime('%A')
</code></pre>
<p>Output:</p>
<pre><code>1 == Sunday
2 == Monday
3 == Tuesday
4 == Wednesday
5 == Thursday
6 == Friday
7 == Saturday
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here is how to convert a listof dates to date</p>
<pre><code>import datetime,time
ls={'1/1/2007','1/2/2017'}
dt=datetime.datetime.strptime(ls[1], "%m/%d/%Y")
print(dt)
print(dt.month)
print(dt.year)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>We can take help of Pandas:</strong></p>
<pre><code>import pandas as pd
</code></pre>
<p>As mentioned above in the problem We have:</p>
<pre><code>datetime(2017, 10, 20)
</code></pre>
<p>If execute this line in the jupyter notebook we have an output like this:</p>
<pre><code>datetime.datetime(2017, 10, 20, 0, 0)
</code></pre>
<p><strong>Using weekday() and weekday_name:</strong></p>
<p>If you want weekdays in integer number format then use:</p>
<pre><code>pd.to_datetime(datetime(2017, 10, 20)).weekday()
</code></pre>
<p>The output will be:</p>
<pre><code>4
</code></pre>
<p>And if you want it as name of the day like Sunday, Monday, Friday, etc you can use:</p>
<pre><code>pd.to_datetime(datetime(2017, 10, 20)).weekday_name
</code></pre>
<p>The output will be:</p>
<p><code>'Friday'</code></p>
<p><strong>If having a dates column in Pandas dataframe then:</strong></p>
<p>Now suppose if you have a pandas dataframe having a date column like this:
pdExampleDataFrame['Dates'].head(5)</p>
<pre><code>0   2010-04-01
1   2010-04-02
2   2010-04-03
3   2010-04-04
4   2010-04-05
Name: Dates, dtype: datetime64[ns]
</code></pre>
<p>Now If we want to know the name of the weekday like Monday, Tuesday, ..etc we can use <code>.weekday_name</code> as follows:</p>
<pre><code>pdExampleDataFrame.head(5)['Dates'].dt.weekday_name
</code></pre>
<p>the output will be:</p>
<pre><code>0    Thursday
1      Friday
2    Saturday
3      Sunday
4      Monday
Name: Dates, dtype: object
</code></pre>
<p>And if we want the integer number of weekday from this Dates column then we can use:</p>
<pre><code>pdExampleDataFrame.head(5)['Dates'].apply(lambda x: x.weekday())
</code></pre>
<p>The output will look like this:</p>
<pre><code>0    3
1    4
2    5
3    6
4    0
Name: Dates, dtype: int64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Canlendar Module</p>
<pre><code>import calendar
a=calendar.weekday(year,month,day)
days=["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]
print(days[a])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is my python3 implementation. </p>
<pre><code>months = {'jan' : 1, 'feb' : 4, 'mar' : 4, 'apr':0, 'may':2, 'jun':5, 'jul':6, 'aug':3, 'sep':6, 'oct':1, 'nov':4, 'dec':6}
dates = {'Sunday':1, 'Monday':2, 'Tuesday':3, 'Wednesday':4, 'Thursday':5, 'Friday':6, 'Saterday':0}
ranges = {'1800-1899':2, '1900-1999':0, '2000-2099':6, '2100-2199':4, '2200-2299':2}

def getValue(val, dic):
    if(len(val)==4):
        for k,v in dic.items():
            x,y=int(k.split('-')[0]),int(k.split('-')[1])
            val = int(val)
            if(val&gt;=x and val&lt;=y):
                return v
    else:
        return dic[val]

def getDate(val):
    return (list(dates.keys())[list(dates.values()).index(val)]) 



def main(myDate):
    dateArray = myDate.split('-')
    # print(dateArray)
    date,month,year = dateArray[2],dateArray[1],dateArray[0]
    # print(date,month,year)

    date = int(date)
    month_v = getValue(month, months)
    year_2 = int(year[2:])
    div = year_2//4
    year_v = getValue(year, ranges)
    sumAll = date+month_v+year_2+div+year_v
    val = (sumAll)%7
    str_date = getDate(val)

    print('{} is a {}.'.format(myDate, str_date))

if __name__ == "__main__":
    testDate = '2018-mar-4'
    main(testDate)
</code></pre>
</div>
<span class="comment-copy">One important thing to note is that in JavaScript 0 = Sunday, Python starts with 0 = Monday.  Something that I ran into, front-end vs back-end..</span>
<span class="comment-copy">Calendar math generally sucks because computers don't know what PTO is.  In an effort to avoid teaching them I highly recommend obfuscating functions which determine whether it is currently a holiday or weekend.</span>
<span class="comment-copy">Probably because the OP says "For instance", "something like" and "maybe".</span>
<span class="comment-copy">If you'd like Sunday to be day 0: <code>int(datetime.datetime.today().strftime('%w'))</code></span>
<span class="comment-copy">To start from 1, we can use isoweekday in place of weekday; 1 = Monday</span>
<span class="comment-copy">This seems to be the best answer to generate an English, day-of-week date. I'm guessing it's not upvoted more simply because the answer is ~1 month old, while the question is ~3 years old.</span>
<span class="comment-copy">That, and the original question asked for the date as an integer...</span>
<span class="comment-copy"><a href="http://i2.kym-cdn.com/entries/icons/original/000/006/759/both.png" rel="nofollow noreferrer">i2.kym-cdn.com/entries/icons/original/000/006/759/both.png</a></span>
<span class="comment-copy">I find it much more effective to just do <code>my_date.strftime('%A')</code></span>
<span class="comment-copy">Because the op asked with regards to a <code>datetime</code> object (not a <code>date</code> object) I’d like to mention that the <code>datetime</code> class sports the same <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.weekday" rel="nofollow noreferrer"><code>weekday()</code></a> and <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.isoweekday" rel="nofollow noreferrer"><code>isoweekday()</code></a> methods.</span>
<span class="comment-copy">Why a dictionary, when a list would suffice?</span>
<span class="comment-copy">thanks Martijn, I don't remember why I take that option, I appreciate your call for attention, is very correct</span>
<span class="comment-copy">why do we need to do aux+100 / 400 instead of aux/400 can you please explain</span>
<span class="comment-copy">I saw a lot of posts on people trying workarounds and complex codes to get weekday, thought of sharing this. This is my <b>very first answer in stackoverflow</b> so if I had broken any moderation rules :) <i>sorry</i></span>
<span class="comment-copy">There is no need of using DayL array as you can directly get day name by using <code>strftime("%A")</code> instead of <code>weekday()</code></span>
<span class="comment-copy">'A' for effort! You might move statements, like those assigning to <code>fg</code> and <code>fj</code>, inside the conditional to prevent unnecessary computations.</span>
<span class="comment-copy">The question asks for Sunday == 1, Monday == 2, and Friday == 6.</span>
