<div class="post-text" itemprop="text">
<p>How can I ignore the "not in list" error message if I call <code>a.remove(x)</code> when <code>x</code> is not present in list <code>a</code>?</p>
<p>This is my situation:</p>
<pre><code>&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; a.remove(10)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: list.remove(x): x not in list
&gt;&gt;&gt; a.remove(9)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A good and thread-safe way to do this is to just try it and ignore the exception:</p>
<pre><code>try:
    a.remove(10)
except ValueError:
    pass  # do nothing!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd personally consider using a <code>set</code> instead of a <code>list</code> as long as the order of your elements isn't necessarily important.  Then you can use the discard method:</p>
<pre><code>&gt;&gt;&gt; S = set(range(10))
&gt;&gt;&gt; S
set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&gt;&gt;&gt; S.remove(10)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 10
&gt;&gt;&gt; S.discard(10)
&gt;&gt;&gt; S
set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative to ignoring the ValueError</p>
<pre><code>try:
    a.remove(10)
except ValueError:
    pass  # do nothing!
</code></pre>
<p>I think the following is a little more straightforward and readable:</p>
<pre><code>if 10 in a:
    a.remove(10)
</code></pre>
</div>
<span class="comment-copy">Why wouldn't Python list also have Python <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.discard" rel="nofollow noreferrer">set's discard operation</a>? <code>discard</code> removes element from the set if it is present.</span>
<span class="comment-copy">Using a <code>set</code> when not appropriate can have unintended consequences.  From the documentation, <a href="http://docs.python.org/2/tutorial/datastructures.html" rel="nofollow noreferrer"><code>Remove the first item from the list whose value is x. It is an error if there is no such item.</code></a>  OP may want to only remove the first item in other use cases, indicating valid duplicates within the list.</span>
<span class="comment-copy">It's a good thought, but as @Niklas B. points out, his is "thread-safe", because no matter what, 10 not being there can only ever cause a <i>caught</i> exception. Whereas in this answer, <code>10</code> could be removed from <code>a</code> between the <code>if</code> condition being checked and <code>.remove()</code> being called, resulting in an <i>uncaught</i> <code>ValueError</code>. (If you can make a guarantee about <code>a</code> not being modified by anything else, then this is fine, but with the accepted answer you don't even have to think about that possibility.)</span>
<span class="comment-copy">For lambda expressions, it can sometimes be helpful to have a one-liner for the same purpose, and in that case <code>a in 10 and a.remove(10)</code> does the job. It's also not thread-safe though.</span>
<span class="comment-copy">Kinda torn on this one ... at what point do you abandon the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">zen of python</a> for thread safety?  Certainly if you are writing a library module that is likely to be used in a multithreaded app you will need to make things more complex and/or document its thread safety (or lack thereof), but should one try to do that in general?</span>
<span class="comment-copy">@reteptilian I think it is not actually the "thread safety" rather than it is "<a href="https://docs.python.org/3/glossary.html?highlight=eafp#term-eafp" rel="nofollow noreferrer">Easier to ask for forgiveness than permission.</a>"</span>
<span class="comment-copy">If you care about thread safety you should be using explicit locking.</span>
