<div class="post-text" itemprop="text">
<p>Ok.. So probably an example is a good way to explain this problem</p>
<p>So I  have something like  this:</p>
<pre><code>if __name__=="__main__"
    result = foobar()
    sys.stdout.write(str(result))
    sys.stdout.flush()
    sys.exit(0)
</code></pre>
<p>Now this script is being called from a ruby script.. and basically it parses the result there.
But foobar() has a lot of print statments.. and stdout flushes all those prints as well.
Is there a way (besides logging mathods) I can modify something over here which automatically suppresses those prints and just flushes this result??
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to shadow (or otherwise hide) the stdout temporarily.  Something like this:</p>
<pre><code>actualstdout = sys.stdout
sys.stdout = StringIO()
result = foobar()
sys.stdout = actualstdout
sys.stdout.write(str(result))
sys.stdout.flush()
sys.exit(0)
</code></pre>
<p>You need to assign something that is file-like to sys.stdout so that other methods can use it effectively.  <code>StringIO</code> is a good candidate because it doesn't require disk access (it'll just collect in memory) and then is discarded.</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.4 and up you can use the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="noreferrer">redirect_stdout</a> contextmanager like this:</p>
<pre><code>with redirect_stdout(open(os.devnull, "w")):
    print("This text goes nowhere")
print("This text gets printed normally")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys

class output:
    def __init__(self):
        self.content = []
    def write(self, string):
        self.content.append(string)


if __name__=="__main__":

    out = output()                   
    sys.stdout = out                   #redirecting the output to a variable content

    result = foobar()
    sys.stdout.write(str(result))
    sys.stdout.flush() 

    sys.stdout = sys.__stdout__        #redirecting the output back to std output   
    print "o/p of foo :",out.content

    sys.exit(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/2829036/724357">This link shows how to redirect stdout in python</a>. Redirect it to an internal pipe, then read your pipe and filter out the unwanted lines. That will let you keep only the lines you are interested in.</p>
</div>
<span class="comment-copy">awesome.. just what i needed :)</span>
<span class="comment-copy">What about using <code>sys.stdout = open(os.devnull,'w')</code> instead of <code>StringIO()</code>?</span>
<span class="comment-copy">@ovgolovin - definitely reasonable as well if there's no expectation you might ever need the output.  With StringIO you could retrieve it if needed before you reset the original value of <code>stdout</code>.</span>
<span class="comment-copy">If you're on Windows watch out for Windows bug - <a href="http://stackoverflow.com/questions/3018848/">Cannot redirect output when I run Python script on Windows using just script's name</a>.</span>
<span class="comment-copy">for anyone coming along like I did... don't try this inside an ipython console :)</span>
