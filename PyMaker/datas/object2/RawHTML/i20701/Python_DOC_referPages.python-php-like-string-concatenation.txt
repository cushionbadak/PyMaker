<div class="post-text" itemprop="text">
<p>I am developing python application which should work with database. I came along with one problem. In PHP I can make queries with variables directly just by $ sign, but in python I am writing this code:</p>
<pre><code>query = "INSERT INTO shops (id, shop_id, shop_url, shop_name, shop_cat, datas)" + "VALUES("+count+", "+str(shop_id)+", "+shop_url+", "+shop_name+", "+shop_cat+", "+pdfs+datas+");"
</code></pre>
<p>Is there any method doing it like in PHP, I mean doing it inside one string?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should <strong>never</strong> concatenate an SQL string like that. You are asking for an SQL injection.</p>
<p>Use the built in escaping in the DB API:</p>
<pre><code>cursor.execute("INSERT INTO shops (id, shop_id, shop_url, shop_name, shop_cat, datas) VALUES (%d, %s, %s, %s, %s, %s)", (count, show_id, shop_url, shop_name, shop_cat, pdfs + datas))
</code></pre>
<p>...and your query will be properly escaped.</p>
<p>In general in Python, you can use "+" to concatenate strings. You can also use printf-like syntax "Hello %s!" % "World" and the newer formatting syntax "Hello {0}".format('World!')</p>
</div>
<div class="post-text" itemprop="text">
<p>Not directly, but you can use <a href="http://docs.python.org/library/stdtypes.html#string-formatting-operations" rel="nofollow">string formating operations</a>:</p>
<pre><code>query = "...VALUES(%d, %d, %s, %s)" % (some_int, some_other_int, some_string, some_other_string)
</code></pre>
<p>In your case, this is however a <strong>bad idea</strong>. For this kind of things in SQL queries, you should do this instead:</p>
<pre><code>query = "INSERT INTO ... VALUES(?, ?, ?, ?)"
cursor.execute(query, some_int, some_other_int, some_string, some_other_string)
</code></pre>
<p>This is the easiest and most effective way to be safe against SQL injections.
This syntax is supported by all major SQL Python modules (at least MySQL, SQLite, PostgreSQL).</p>
<p>More details about this in the <a href="http://docs.python.org/library/sqlite3.html#sqlite3.Cursor.execute" rel="nofollow">sqlite3 module doc</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about using formatting:</p>
<pre><code>query = (
    "INSERT INTO shops (id, shop_id, shop_url, shop_name, shop_cat, datas)"
    "VALUES(%d, %s, %s, %s, %s, %s%s);" %
    (count, show_id, shop_url, shop_name, shop_cat, pdfs, datas))
</code></pre>
<p>Or like this:</p>
<pre><code>query = (
    "INSERT INTO shops (id, shop_id, shop_url, shop_name, shop_cat, datas)"
    "VALUES(%(count)d, %(show_id)s, %(shop_url)s, %(shop_name)s,"
    " %(shop_cat)s, %(pdfs)s%(datas)s);" % vars())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't create query by concatenate string like that, use paramterize query like this</p>
<pre><code>cursor.execute(""INSERT INTO shops (id, shop_id, shop_url, shop_name, shop_cat, datas) VALUES(?,?,?,?,?,?)", (count, shop_id, shop_url, shop_name, shop_cat, datas))
</code></pre>
<p>This will save you from a lot of trouble in the long run and it also runs faster. The symbol <code>?</code> after <code>VALUES</code> can vary between different API</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, it's a terrible practice to construct SQL queries this way. You should use parametrized queries instead. Now, Python's <a href="http://www.python.org/dev/peps/pep-0249/" rel="nofollow">DB-API 2.0 (PEP-249)</a> defines few param styles:</p>
<blockquote>
<p>paramstyle</p>
<pre><code>       String constant stating the type of parameter marker
       formatting expected by the interface. Possible values are
       [2]:

           'qmark'         Question mark style, 
                           e.g. '...WHERE name=?'
           'numeric'       Numeric, positional style, 
                           e.g. '...WHERE name=:1'
           'named'         Named style, 
                           e.g. '...WHERE name=:name'
           'format'        ANSI C printf format codes, 
                           e.g. '...WHERE name=%s'
           'pyformat'      Python extended format codes, 
                           e.g. '...WHERE name=%(name)s'
</code></pre>
</blockquote>
<p>For example for MySQL the default param style is "format" (which is C-style), thus you'd do</p>
<pre><code>cursor.execute("INSERT INTO shops (id, shop_id, shop_url, shop_name, shop_cat, datas) VALUES (%s, %s, %s, %s, %s, %s)" , (count, shop_id, shop_url, shop_name, shop_cat, pdfs+datas)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>First of all, <em>do not</em> create SQL queries as such. That said, this is how to get named (PHP-style) variable interpolation in Python.</strong></p>
<p>Use a <a href="https://docs.python.org/3/library/string.html#string.Template" rel="nofollow">string template</a>. Here is an example:</p>
<pre><code>from string import Template

foo = Template('All that $does is $metal.')
bar = foo.substitute(does='glitters', metal='gold')

print(bar) // All that glitters is gold.
</code></pre>
</div>
<span class="comment-copy">You should really use the DB API and the methods there that do the substitution for you. Building strings this way is fertile ground for SQL injection exploits.</span>
<span class="comment-copy">What you're looking for is called <a href="http://stackoverflow.com/search?q=python+string+interpolation">string interpolation</a></span>
<span class="comment-copy">I am using sqlite3 but it gives error:cursor.execute("INSERT INTO shops (id) VALUES (%d)", (id)) sqlite3.OperationalError: near "%": syntax error</span>
<span class="comment-copy">Ahh. Different databases use different placeholders. Sqlite uses '?', so replace %d and %s with ?. <a href="http://docs.python.org/library/sqlite3.html" rel="nofollow noreferrer">docs.python.org/library/sqlite3.html</a></span>
<span class="comment-copy">Also "(id)" is not the correct way to make a tuple of one element in Python. Use "(id,)". Furthermore "id" is a bad variable name, since it shadows a builtin function called id, but that is more a matter of style.</span>
