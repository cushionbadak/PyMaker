<div class="post-text" itemprop="text">
<p>In the python.org math library, I could only find <code>math.cos(x)</code>, with cos/sin/tan/acos/asin/atan. This returns the answer in radians. How can I get the answer in degrees?</p>
<p>Here's my code:</p>
<pre><code>import math

x = math.cos(1)
y = x * 180 / math.pi
print y
30.9570417874
</code></pre>
<p>My calculator, on deg, gives me:</p>
<pre><code>cos(1)
0.9998476...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python includes two functions in the <code>math</code> package; <code>radians</code> converts degrees to radians, and <code>degrees</code> converts radians to degrees.</p>
<p>To match the output of your calculator you need:</p>
<pre><code>&gt;&gt;&gt; math.cos(math.radians(1))
0.9998476951563913
</code></pre>
<p>Note that all of the trig functions convert between an angle and the ratio of two sides of a triangle. cos, sin, and tan take an angle in radians as input and return the ratio; acos, asin, and atan take a ratio as input and return an angle in radians. You only convert the angles, never the ratios.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Python convert radians to degrees or degrees to radians:</h2>
<p><strong>What are Radians and what problem does it solve?:</strong></p>
<p>Radians and degrees are two separate units of measure that help people express and communicate precise changes in direction.  Wikipedia has some great intuition with their infographics on how one Radian is defined relative to degrees:</p>
<p><a href="https://en.wikipedia.org/wiki/Radian" rel="noreferrer">https://en.wikipedia.org/wiki/Radian</a></p>
<p><a href="https://i.stack.imgur.com/xsAa3.png" rel="noreferrer"><img alt="Conversion from radians to degrees" src="https://i.stack.imgur.com/xsAa3.png"/></a></p>
<p><strong>Python examples using libraries calculating degrees from radians:</strong></p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.degrees(0)                       #0 radians == 0 degrees
0.0
&gt;&gt;&gt; math.degrees(math.pi/2)               #pi/2 radians is 90 degrees
90.0
&gt;&gt;&gt; math.degrees(math.pi)                 #pi radians is 180 degrees
180.0      
&gt;&gt;&gt; math.degrees(math.pi+(math.pi/2))     #pi+pi/2 radians is 270 degrees
270.0 
&gt;&gt;&gt; math.degrees(math.pi+math.pi)         #2*pi radians is 360 degrees
360.0      
</code></pre>
<p><strong>Python examples using libraries calculating radians from degrees:</strong></p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.radians(0)           #0 degrees == 0 radians
0.0
&gt;&gt;&gt; math.radians(90)          #90 degrees is pi/2 radians
1.5707963267948966
&gt;&gt;&gt; math.radians(180)         #180 degrees is pi radians
3.141592653589793
&gt;&gt;&gt; math.radians(270)         #270 degrees is pi+(pi/2) radians
4.71238898038469
&gt;&gt;&gt; math.radians(360)         #360 degrees is 2*pi radians
6.283185307179586
</code></pre>
<p>Source: <a href="https://docs.python.org/3/library/math.html#angular-conversion" rel="noreferrer">https://docs.python.org/3/library/math.html#angular-conversion</a></p>
<p><strong>The mathematical notation:</strong></p>
<p><a href="https://i.stack.imgur.com/ogMhv.png" rel="noreferrer"><img alt="Mathematical notation of degrees and radians" src="https://i.stack.imgur.com/ogMhv.png"/></a></p>
<h2>You can do degree/radian conversion without libraries:</h2>
<p>If you roll your own degree/radian converter, you have to write your own code to handle edge cases.  </p>
<p>Mistakes here are easy to make, and will hurt just like it hurt the developers of the 1999 mars orbiter who sunk $125m dollars crashing it into Mars because of non intuitive edge cases here.  </p>
<p><strong>Lets crash that orbiter and Roll our own Radians to Degrees:</strong></p>
<p>Invalid radians as input return garbage output.</p>
<pre><code>&gt;&gt;&gt; 0 * 180.0 / math.pi                         #0 radians is 0 degrees
0.0
&gt;&gt;&gt; (math.pi/2) * 180.0 / math.pi               #pi/2 radians is 90 degrees
90.0
&gt;&gt;&gt; (math.pi) * 180.0 / math.pi                 #pi radians is 180 degrees
180.0
&gt;&gt;&gt; (math.pi+(math.pi/2)) * 180.0 / math.pi     #pi+(pi/2) radians is 270 degrees
270.0
&gt;&gt;&gt; (2 * math.pi) * 180.0 / math.pi             #2*pi radians is 360 degrees
360.0
</code></pre>
<p><strong>Degrees to radians:</strong></p>
<pre><code>&gt;&gt;&gt; 0 * math.pi / 180.0              #0 degrees in radians
0.0
&gt;&gt;&gt; 90 * math.pi / 180.0             #90 degrees in radians
1.5707963267948966
&gt;&gt;&gt; 180 * math.pi / 180.0            #180 degrees in radians
3.141592653589793
&gt;&gt;&gt; 270 * math.pi / 180.0            #270 degrees in radians
4.71238898038469
&gt;&gt;&gt; 360 * math.pi / 180.0            #360 degrees in radians
6.283185307179586
</code></pre>
<p><strong>Expressing multiple rotations with degrees and radians</strong></p>
<p>Single rotation valid radian values are between 0 and 2*pi.  Single rotation degree values are between 0 and 360.  However if you want to express multiple rotations, valid radian and degree values are between 0 and infinity.</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.radians(360)                 #one complete rotation
6.283185307179586
&gt;&gt;&gt; math.radians(360+360)             #two rotations
12.566370614359172
&gt;&gt;&gt; math.degrees(12.566370614359172)  #math.degrees and math.radians preserve the
720.0                                 #number of rotations
</code></pre>
<p><strong>Collapsing multiple rotations:</strong></p>
<p>You can collapse multiple degree/radian rotations into a single rotation by modding against the value of one rotation.  For degrees you mod by 360, for radians you modulus by 2*pi.  </p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.radians(720+90)        #2 whole rotations plus 90 is 14.14 radians
14.137166941154069
&gt;&gt;&gt; math.radians((720+90)%360)  #14.1 radians brings you to 
1.5707963267948966              #the end point as 1.57 radians.

&gt;&gt;&gt; math.degrees((2*math.pi)+(math.pi/2))            #one rotation plus a quarter 
450.0                                                #rotation is 450 degrees.
&gt;&gt;&gt; math.degrees(((2*math.pi)+(math.pi/2))%(2*math.pi)) #one rotation plus a quarter
90.0                                                    #rotation brings you to 90.
</code></pre>
<p><strong>Protip</strong></p>
<p>Khan academy has some excellent content to solidify intuition around trigonometry and angular mathematics: <a href="https://www.khanacademy.org/math/algebra2/trig-functions/intro-to-radians-alg2/v/introduction-to-radians" rel="noreferrer">https://www.khanacademy.org/math/algebra2/trig-functions/intro-to-radians-alg2/v/introduction-to-radians</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply convert your radian result to degree by using</p>
<p><a href="http://docs.python.org/library/math.html#angular-conversion" rel="noreferrer">math.degrees</a> and rounding appropriately to the required decimal places</p>
<p>for example</p>
<pre><code>&gt;&gt;&gt; round(math.degrees(math.asin(0.5)),2)
30.0
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I also like to define my own functions that take and return arguments in degrees rather than radians.  I am sure there some capitalization purest who don't like my names, but I just use a capital first letter for my custom functions.  The definitions and testing code are below.</p>
<pre><code>#Definitions for trig functions using degrees.
def Cos(a):
    return cos(radians(a))
def Sin(a):
    return sin(radians(a))
def Tan(a):
    return tan(radians(a))
def ArcTan(a):
    return degrees(arctan(a))
def ArcSin(a):
    return degrees(arcsin(a))
def ArcCos(a):
    return degrees(arccos(a))

#Testing Code
print(Cos(90))
print(Sin(90))
print(Tan(45))
print(ArcTan(1))
print(ArcSin(1))
print(ArcCos(0))
</code></pre>
<p>Note that I have imported math (or numpy) into the namespace with</p>
<pre><code>from math import *
</code></pre>
<p>Also note, that my functions are in the namespace in which they were defined.  For instance,</p>
<pre><code>math.Cos(45)
</code></pre>
<p>does not exist.</p>
</div>
<div class="post-text" itemprop="text">
<p>-fix-
because you want to change from radians to degrees, it is actually 
rad=deg * math.pi /180
and not deg*180/math.pi</p>
<pre><code>import math
x=1                # in deg
x = x*math.pi/180  # convert to rad
y = math.cos(x)    # calculate in rad

print y
</code></pre>
<p>in 1 line it can be like this</p>
<pre><code>y=math.cos(1*math.pi/180)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>radian can also be converted to degree by using numpy</p>
<pre><code>print(np.rad2deg(1))
57.29577951308232
</code></pre>
<p>if needed to roundoff ( I did with 6 digits after decimal below), then</p>
<pre><code>print(np.round(np.rad2deg(1), 6)

57.29578
</code></pre>
</div>
<span class="comment-copy">You have things backward, <code>cos</code> takes an angle as input, not output.</span>
<span class="comment-copy">@Mark Ransom How does that make sense?</span>
<span class="comment-copy">@lucase.62, Mark is correct.  The cos function operates on an angle as the input, <code>1</code> in your example.  On your calculator, this angle is in degress, in Python, this angle must be given in radians.  The return value, <code>x</code> in your example, is a dimensionless number.  On your calculator you have calculated the cos of 1 degree.  In your Python example, you have calculated the cos of 1 radian, which is equivalent to 57.296 degrees.</span>
<span class="comment-copy"><code>cos</code> takes an angle as input and produces a ratio as output. Trying to convert the output to degrees as you've done in your example doesn't make sense at all. You need to convert the input <code>1</code> from degrees to radians instead. If you were using <code>acos</code> it would be the other way around, the input is a ratio and the output is radians.</span>
<span class="comment-copy">This is a fantastic response.  Your example is clear but your "bonus" explanation is really helpful.  I was curious about this exact thing.</span>
<span class="comment-copy">THANK YOU. As the only compsci person without any good math skills, this was incredibly helpful!</span>
<span class="comment-copy">If anyone wonders, <code>numpy</code> also have those functions, to convert entire arrays in one go. It also has them under the more explicit names <code>rad2deg</code> and <code>deg2rad</code>.</span>
<span class="comment-copy">To match the example from the question use <code>math.cos(math.radians(1))</code></span>
<span class="comment-copy">Why are you passing the radians into asin before passing it to math.degrees?   What you have causes <code>ValueError: math domain error</code> for valid radian values.</span>
<span class="comment-copy">Never ever divide by an integer (in a setting such as this one), it will be rare cases where this is useful and even then there is ways of writing it more explicit.</span>
