<div class="post-text" itemprop="text">
<p>So I need to call an <code>async</code> function for all items in a list. This could be a list of URLs and an async function using <code>aiohttp</code> that gets a response back from every URL. Now obviously I cannot do the following:</p>
<pre><code>async for url in ['www.google.com', 'www.youtube.com', 'www.aol.com']:
</code></pre>
<p>I can use a normal for loop but then my code will act synchronously and I lose the benefits and speed of having an <code>async</code> response fetching function.</p>
<p>Is there any way I can convert a list such that the above works? I just need to change the list's <code>__iter__()</code> to a <code>__aiter__()</code> method right? Can this be achieved by subclassing a list? Maybe encapsulating it in a class?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed" rel="noreferrer">asyncio.as_completed</a>:</p>
<pre><code>for future in asyncio.as_completed(map(fetch, urls)):
    result = await future
</code></pre>
<p>Or <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="noreferrer">asyncio.gather</a>:</p>
<pre><code>results = await asyncio.gather(map(fetch, urls))
</code></pre>
<hr/>
<p><strong>EDIT:</strong> If you don't mind having an external dependency, you can use <a href="http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.map" rel="noreferrer">aiostream.stream.map</a>:</p>
<pre><code>from aiostream import stream, pipe

async def fetch_many(urls):
    xs = stream.iterate(urls) | pipe.map(fetch, ordered=True, task_limit=10)
    async for result in xs:
        print(result)
</code></pre>
<p>You can control the amount of <code>fetch</code> coroutine running concurrently using the <code>task_limit</code> argument, and choose whether to get the results in order, or as soon as possible.</p>
<p>See more examples in this <a href="https://github.com/vxgmichel/aiostream#demonstration" rel="noreferrer">demonstration</a> and the <a href="http://aiostream.readthedocs.io/en/latest/examples.html" rel="noreferrer">documentation</a>.</p>
</div>
<span class="comment-copy">But here you are using map and that is essentially like a normal for loop, applying the function to every element in the list. Why would this be any faster and how is it async? Map is also limited by the number of parameters the fetch function can receive. I was planning on passing an aiohttp session as well.</span>
<span class="comment-copy">@MaxSmith In this case, <code>map</code> simply creates the coroutines. Then <code>as_completed</code> (or <code>gather</code>, or <code>wait</code>) schedules them so they can run concurrently. An <code>async for</code> loop is not needed, since the asynchronous call is done within the loop (and not in the the <code>iter</code>/<code>next</code> calls)</span>
<span class="comment-copy">Thank you, this seems to work well except that now the program crashes because there are too many open sockets... I think I'm going to need semaphores...</span>
<span class="comment-copy">@MaxSmith See my edit for a solution to your socket issue.</span>
