<div class="post-text" itemprop="text">
<p>Below is the basic logic for function <em>foo</em>:</p>
<pre><code>def foo(item_lst):
    val_in_foo_scope = 1        

    for item in item_lst:
        # some logic to deal with item
        # val_in_foo_scope used
        pass

    return 0
</code></pre>
<p>The logic in the loop can be very complex, in order to make the code more clear, I want to split the logic with a separate function.</p>
<hr/>
<p><strong><em>With inner function:</em></strong></p>
<pre><code>def foo(item_lst):
    val_in_foo_scope = 1 

    def some_logic(item):
        # val_in_foo_scope used
        pass

    for item in item_lst:
        some_logic(item)

    return 0
</code></pre>
<p><strong><em>With outer function:</em></strong></p>
<pre><code>def some_logic(item, val):
    # val used
    pass

def foo(item_lst):
    val_in_foo_scope = 1 

    for item in item_lst:
        some_logic(item, val_in_foo_scope)

    return 0
</code></pre>
<hr/>
<p><strong>The inner function version</strong> </p>
<ol>
<li><em>val_in_foo_scope</em> can be used directly -- <strong>good</strong></li>
<li>we can easily know that the <em>some_logic</em> is relevant with <em>foo</em>, actually only be used in function <em>foo</em> -- <strong>good</strong></li>
<li>each time function <em>foo</em> is called, a new inner function will be created -- <strong>not so good</strong></li>
</ol>
<p><strong>The outer function version</strong></p>
<ol>
<li><em>val_in_foo_scope</em> can not be used directly -- <strong>not so good</strong></li>
<li>we can not see the relevance between <em>some_logic</em> and <em>foo</em> directly -- <strong>not so good</strong></li>
<li><em>some_logic</em> will be created one time -- <strong>good</strong></li>
<li>there will be so many functions in the global namespace -- <strong>not so good</strong></li>
</ol>
<hr/>
<p><strong><em>So, which solution is better or is there any other solutions?</em></strong></p>
<p>Factors below or any other factors you come up with can be consideredï¼š</p>
<ol>
<li>val_in_foo_scope is used or not</li>
<li>whether the time cost to create inner function each time can be ignored</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda</a> if it's a simple function.</p>
<p>Use an inner function if it is complex and you don't want to make it "public".</p>
<p>Use a "<a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">private</a>" method if you want to mark it hidden and uses members of the instance.</p>
<p>Use a method if you want to make it "public" and uses members of the instance.</p>
<p>Use a class method if it uses class members.</p>
<p>And lastly use a global function if it's general enough to be used by other classes/functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>You forgot one point in your pro/cons list: testability. Keeping <code>some_logic</code> out of <code>foo</code> makes it testable in isolation, which is important if it's indeed a "complex" (hence very probably critical) function. </p>
<p>As a general rule, only use inner functions when you have both of those conditions: it's trivial stuff  <strong>and</strong>  passing the required context (the 'outer' function's context) would be a pain. </p>
<p>(nb: I'm of course not talking about using inner functions for closures - like in a decorator - here).</p>
</div>
<span class="comment-copy">if the logic is completely dependent  and used by the main function then an inner function should do, otherwise if the logic is used by multiple methods and is independent, two different methods would make things clear</span>
<span class="comment-copy">If you are sure that your inner function is suited only for the use within that function, and won't be needed to execute outside it, then it makes perfect sense to define it inside.</span>
<span class="comment-copy">Use lambda if it's a simple function, use an inner function if it is complex and you don't want to make it "public". Use a method if you want to make it "public" and uses members of the instance. Use a class method if it uses class members. And lastly use a global function if it's general enough to be used by other classes/functions.</span>
<span class="comment-copy">@Mixone alright, I added it as answer and expanded it with private methods.</span>
<span class="comment-copy">@Mixone It seems that like the outer function version, using class can not show the relevance clearly compared with the inner function version?</span>
