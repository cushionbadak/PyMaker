<div class="post-text" itemprop="text">
<p>I am just playing along with python to understand the things in more depth.</p>
<p>I learned that One of the easier ways is to use <a href="https://stackoverflow.com/questions/6473679/transpose-list-of-lists/6473724#6473724"><code>zip</code></a>, but how about this:</p>
<pre><code>&gt;&gt;&gt; a = [[1,1,1], [2,2,2], [3,3,3]]
&gt;&gt;&gt; for i in range(len(a)):
...   for j in range(len(a[0])):
...     a[i][j], a[j][i] = a[j][i], a[i][j]
... 
&gt;&gt;&gt; a
[[1, 1, 1], [2, 2, 2], [3, 3, 3]]
&gt;&gt;&gt; 
</code></pre>
<p>well, I was expecting the answer to be </p>
<pre><code>[[1, 2, 3], [1, 2, 3], [1, 2, 3]]
</code></pre>
<p>because that is what Transpose would be ? I swapped the elements, right??
Also, this way was more natural to me. I read the documentation for zip <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">here</a> and it does not say anything about such "tricks". How to learn these more pythonic ways of doing the things? I am aware that asking for resources to learn goes into subjective choices and SO does not encourage such questions. But IMO, it is clearly not a matter of choice in this case, but finding any and every resource where such information is available. </p>
</div>
<div class="post-text" itemprop="text">
<p>You swap <code>l[0][1]</code> with <code>l[1][0]</code>... and then when you get to <code>l[1][0]</code>, you swap <code>l[1][0]</code> with <code>l[0][1]</code>. Every pair of elements gets swapped twice, except for the diagonal elements, but those get swapped with themselves anyway. Everything ends up back where it started.</p>
<p>If you want to perform a transpose by element swaps, you need to avoid swapping pairs twice:</p>
<pre><code>for i in range(len(a)):
    for j in range(i+1, len(a)):
        a[i][j], a[j][i] = a[j][i], a[i][j]
</code></pre>
<p>Also, your transpose implicitly assumes square input. If you get a 3x5 input, you can't swap <code>a[2][4]</code> with <code>a[4][2]</code>, because there is no <code>a[4][2]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also just use a basic list comprehension here:</p>
<pre><code>a = [[1,1,1], [2,2,2], [3,3,3]]

transposed = [[x[i] for x in a] for i in range(len(a[0]))]

print(transposed)
# [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are overwriting <code>a</code> during your loop, such that after the first transpose operation, the second just undoes the first.</p>
<p>You could either make a copy of <code>a</code> (and not overwrite <code>a</code>), or do it by a list comprehension.</p>
<pre><code>import copy
a = [[1,1,1], [2,2,2], [3,3,3]]
a2  = copy.deepcopy(a)
for i in range(len(a)):
  for j in range(len(a[0])):
    a2[i][j] = a[j][i]

a3 = [[a[j][i] for j, _ in enumerate(ai)] for i, ai in enumerate(a)]

print(a)
print(a2)
print(a3)
</code></pre>
</div>
<span class="comment-copy">I don't get it. Is there a question here?</span>
<span class="comment-copy">Did you notice that your list doesn't end up transposed?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, edited question</span>
<span class="comment-copy">Unfortunately, you swap the same set of elements twice. So, you end up transposing, and then undoing what you did later on.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, gotcha. Could you comment on second part? I would not want to write these two for loops when one liner is available. This way, by using as much internal functionality as possible, there would be less margin for silly mistakes I guess.</span>
<span class="comment-copy">Great that you added a disclaimer about rectangular matrices.</span>
<span class="comment-copy">gotcha! any comment on second part of the question? where to learn more pythonic ways of doing the things, like using <code>zip</code> for transpose? My natural thought-process was to iterate and then swap. <code>zip</code> documentation does not cover it, hence i call it a "trick"</span>
<span class="comment-copy">@Adorn: <a href="https://www.google.com/search?q=python+transpose" rel="nofollow noreferrer">Google does a decent job</a>, although you shouldn't automatically trust whatever comes up on Google.</span>
<span class="comment-copy">@user2357112, yes it is true. But one would google if problem is unsolved or there is a mismatch between reality and expectation. I was more inclined to know book./videos./blogs. Googling every single sub-problem is not worth of time as it leads to different train of thoughts altogether, IMO</span>
<span class="comment-copy">@Adorn: Maybe those are the situations in which you'd google, but I suggest googling more.</span>
