<div class="post-text" itemprop="text">
<p>I would like to know how i can iterate through a list containing lists in python, however i would like to use the for loop method that uses index rather than iterating the normal way in python. is it possible to do that?</p>
<p>here is the python code:</p>
<pre><code>n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]

def flatten(my_lists):
  results = []
  for outer in range(len(my_lists)):
    for inner in range(len(outer)):
      results.append(lists[outer][inner])
  return results

print flatten(n)
</code></pre>
<p>this is the error I get in the console:</p>
<pre><code>Traceback (most recent call last):
  File "python", line 10, in &lt;module&gt;
  File "python", line 6, in flatten
TypeError: object of type 'int' has no len()
</code></pre>
<p>what is the error in my code ?</p>
<p>thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>outer</code> and <code>inner</code> are both <code>ints</code>. Thus, <code>len(outer)</code> is bound to fail:</p>
<pre><code>results = []
  for outer in range(len(my_lists)):
    # you need the length of the list in position 'outer', not of 'outer' itself
    for inner in range(len(my_lists[outer])):  
      results.append(my_lists[outer][inner])
  return results
</code></pre>
<p>It is easier not to use indexes at all:</p>
<pre><code>results = []
  for lst in my_lists:
    for x in lst:  
      results.append(x)
    # Or without inner loop
    # results.extend(lst)
  return results
</code></pre>
<p>Moreover, for flattening a list of lists, there are many well-documented approaches, a straightforward one being a nested comprehension like:</p>
<pre><code>n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
flat = [x for lst in n for x in lst]
# [1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>For more, you can refer to <a href="https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python">Making a flat list out of list of lists in Python</a> and <a href="https://stackoverflow.com/questions/2158395/flatten-an-irregular-list-of-lists">Flatten (an irregular) list of lists</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here the loop with indexes using enumerate.</p>
<pre><code>n = [[8, 2, 3], [4, 5, 6, 7, 8, 9]]

def flatten(my_lists):
  results = []
  for idx, outer in enumerate(my_lists):
    for idx2, inner in enumerate(outer):
      results.append(my_lists[idx][idx2])
  return results

print flatten(n)
</code></pre>
<p>idx and idx2 are the current index of the for loops</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the other answers, there is the standard library solution using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools</code></a>.</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
&gt;&gt;&gt; print(list(itertools.chain(*n)))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Or (possibly) more explicitly</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
&gt;&gt;&gt; print(list(chain.from_iterable(n)))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>If you just need the flattened 'list' to be iterable, you can omit the <code>list</code> call and use the returned <code>itertools.chain</code> object.</p>
<pre><code>&gt;&gt;&gt; chain.from_iterable(n)
&lt;itertools.chain object at 0x7f2ecc05f668&gt;
</code></pre>
</div>
<span class="comment-copy">Can you share me what is the output that you are expecting</span>
<span class="comment-copy">How about <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.chain</a> ?</span>
<span class="comment-copy">Are you asking how to flatten a list of lists?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python">Making a flat list out of list of lists in Python</a></span>
<span class="comment-copy"><code>outer</code> is an <code>int</code>, so you need <code>for inner in range(len(my_list[outer]))</code></span>
