<div class="post-text" itemprop="text">
<p>How could I check if a number is a perfect square?</p>
<p>Speed is of no concern, for now, just working.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with relying on any floating point computation (<code>math.sqrt(x)</code>, or <code>x**0.5</code>) is that you can't really be sure it's exact (for sufficiently large integers <code>x</code>, it won't be, and might even overflow). Fortunately (if one's in no hurry;-) there are many pure integer approaches, such as the following...:</p>
<pre><code>def is_square(apositiveint):
  x = apositiveint // 2
  seen = set([x])
  while x * x != apositiveint:
    x = (x + (apositiveint // x)) // 2
    if x in seen: return False
    seen.add(x)
  return True

for i in range(110, 130):
   print i, is_square(i)
</code></pre>
<p>Hint: it's based on the "Babylonian algorithm" for square root, see <a href="http://en.wikipedia.org/wiki/Methods_of_computing_square_roots" rel="noreferrer">wikipedia</a>.  It <em>does</em> work for any positive number for which you have enough memory for the computation to proceed to completion;-).</p>
<p><strong>Edit</strong>: let's see an example...</p>
<pre><code>x = 12345678987654321234567 ** 2

for i in range(x, x+2):
   print i, is_square(i)
</code></pre>
<p>this prints, as desired (and in a reasonable amount of time, too;-):</p>
<pre><code>152415789666209426002111556165263283035677489 True
152415789666209426002111556165263283035677490 False
</code></pre>
<p>Please, before you propose solutions based on floating point intermediate results, make sure they work correctly on this simple example -- it's not <strong>that</strong> hard (you just need a few extra checks in case the sqrt computed is a little off), just takes a bit of care.</p>
<p>And then try with <code>x**7</code> and find clever way to work around the problem you'll get,</p>
<pre><code>OverflowError: long int too large to convert to float
</code></pre>
<p>you'll have to get more and more clever as the numbers keep growing, of course.</p>
<p>If I <em>was</em> in a hurry, of course, I'd use <a href="http://www.gmpy.org/" rel="noreferrer">gmpy</a> -- but then, I'm clearly biased;-).</p>
<pre><code>&gt;&gt;&gt; import gmpy
&gt;&gt;&gt; gmpy.is_square(x**7)
1
&gt;&gt;&gt; gmpy.is_square(x**7 + 1)
0
</code></pre>
<p>Yeah, I know, that's just so easy it feels like cheating (a bit the way I feel towards Python in general;-) -- no cleverness at all, just perfect directness and simplicity (and, in the case of gmpy, sheer speed;-)...</p>
</div>
<div class="post-text" itemprop="text">
<p>Use Newton's method to quickly zero in on the nearest integer square root, then square it and see if it's your number. See <a href="http://en.wikipedia.org/wiki/Isqrt" rel="noreferrer">isqrt</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you can never depend on exact comparisons when dealing with floating point computations (such as these ways of calculating the square root), a less error-prone implementation would be</p>
<pre><code>import math
def is_square(integer):
    root = math.sqrt(integer)
    if int(root + 0.5) ** 2 == integer: 
        return True
    else:
        return False
</code></pre>
<p>Imagine <code>integer</code> is <code>9</code>. <code>math.sqrt(9)</code> could be <code>3.0</code>, but it could also be something like <code>2.99999</code> or <code>3.00001</code>, so squaring the result right off isn't reliable. Knowing that <code>int</code> takes the floor value, increasing the float value by <code>0.5</code> first means we'll get the value we're looking for if we're in a range where <code>float</code> still has a fine enough resolution to represent numbers near the one for which we are looking.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import math
if (math.sqrt(number)-int(math.sqrt(number))):
    print "it's not a perfect square"
</code></pre>
<p>A perfect square is a number that can be expressed as the product of two equal integers. <code>math.sqrt(number)</code> return a <code>float</code>. <code>int(math.sqrt(number))</code> casts the outcome to <code>int</code>.</p>
<p>If the square root is an integer, like 3, for example, then <code>math.sqrt(number) - int(math.sqrt(number))</code> will be 0, and the <code>if</code> statement will be <code>False</code>. If the square root was a real number like 3.2, then it will be <code>True</code> and print "it's not a perfect square".</p>
</div>
<div class="post-text" itemprop="text">
<p>If youre interested, I have a pure-math response to a similar question at <a href="https://math.stackexchange.com/questions/131330/detecting-perfect-squares-faster-than-by-extracting-square-root/712818#712818" title="Detecting perfect squares faster than by extracting square root">math stackexchange, "Detecting perfect squares faster than by extracting square root"</a>.</p>
<p>My own implementation of isSquare(n) may not be the best, but I like it. Took me several months of study in math theory, digital computation and python programming, comparing myself to other contributors, etc., to really click with this method. I like its simplicity and efficiency though. I havent seen better. Tell me what you think.</p>
<pre><code>def isSquare(n):
    ## Trivial checks
    if type(n) != int:  ## integer
        return False
    if n &lt; 0:      ## positivity
        return False
    if n == 0:      ## 0 pass
        return True

    ## Reduction by powers of 4 with bit-logic
    while n&amp;3 == 0:    
        n=n&gt;&gt;2

    ## Simple bit-logic test. All perfect squares, in binary,
    ## end in 001, when powers of 4 are factored out.
    if n&amp;7 != 1:
        return False

    if n==1:
        return True  ## is power of 4, or even power of 2


    ## Simple modulo equivalency test
    c = n%10
    if c in {3, 7}:
        return False  ## Not 1,4,5,6,9 in mod 10
    if n % 7 in {3, 5, 6}:
        return False  ## Not 1,2,4 mod 7
    if n % 9 in {2,3,5,6,8}:
        return False  
    if n % 13 in {2,5,6,7,8,11}:
        return False  

    ## Other patterns
    if c == 5:  ## if it ends in a 5
        if (n//10)%10 != 2:
            return False    ## then it must end in 25
        if (n//100)%10 not in {0,2,6}: 
            return False    ## and in 025, 225, or 625
        if (n//100)%10 == 6:
            if (n//1000)%10 not in {0,5}:
                return False    ## that is, 0625 or 5625
    else:
        if (n//10)%4 != 0:
            return False    ## (4k)*10 + (1,9)


    ## Babylonian Algorithm. Finding the integer square root.
    ## Root extraction.
    s = (len(str(n))-1) // 2
    x = (10**s) * 4

    A = {x, n}
    while x * x != n:
        x = (x + (n // x)) &gt;&gt; 1
        if x in A:
            return False
        A.add(x)
    return True
</code></pre>
<p>Pretty straight forward. First it checks that we have an integer, and a positive one at that. Otherwise there is no point.   It lets 0 slip through as True (necessary or else next block is infinite loop).</p>
<p>The next block of code systematically removes powers of 4 in a very fast sub-algorithm using bit shift and bit logic operations.  We ultimately are not finding the isSquare of our original n but of a k&lt;n that has been scaled down by powers of 4, if possible. This reduces the size of the number we are working with and really speeds up the Babylonian method, but also makes other checks faster too.</p>
<p>The third block of code performs a simple Boolean bit-logic test.  The least significant three digits, in binary, of any perfect square are 001. Always. Save for leading zeros resulting from powers of 4, anyway, which has already been accounted for.  If it fails the test, you immediately know it isnt a square. If it passes, you cant be sure.</p>
<p>Also, if we end up with a 1 for a test value then the test number was originally a power of 4, including perhaps 1 itself.</p>
<p>Like the third block, the fourth tests the ones-place value in decimal using simple modulus operator, and tends to catch values that slip through the previous test. Also a mod 7, mod 8, mod 9, and mod 13 test.</p>
<p>The fifth block of code checks for some of the well-known perfect square patterns. Numbers ending in 1 or 9 are preceded by a multiple of four. And numbers ending in 5 must end in 5625, 0625, 225, or 025. I had included others but realized they were redundant or never actually used.</p>
<p>Lastly, the sixth block of code resembles very much what the top answerer - Alex Martelli - answer is.  Basically finds the square root using the ancient Babylonian algorithm, but restricting it to integer values while ignoring floating point. Done both for speed and extending the magnitudes of values that are testable. I used sets instead of lists because it takes far less time, I used bit shifts instead of division by two, and I smartly chose an initial start value much more efficiently.</p>
<p>By the way, I did test Alex Martelli's recommended test number, as well as a few numbers many orders magnitude larger, such as:</p>
<pre><code>x=1000199838770766116385386300483414671297203029840113913153824086810909168246772838680374612768821282446322068401699727842499994541063844393713189701844134801239504543830737724442006577672181059194558045164589783791764790043104263404683317158624270845302200548606715007310112016456397357027095564872551184907513312382763025454118825703090010401842892088063527451562032322039937924274426211671442740679624285180817682659081248396873230975882215128049713559849427311798959652681930663843994067353808298002406164092996533923220683447265882968239141724624870704231013642255563984374257471112743917655991279898690480703935007493906644744151022265929975993911186879561257100479593516979735117799410600147341193819147290056586421994333004992422258618475766549646258761885662783430625 ** 2
for i in range(x, x+2):
    print(i, isSquare(i))
</code></pre>
<p>printed the following results:</p>
<pre><code>1000399717477066534083185452789672211951514938424998708930175541558932213310056978758103599452364409903384901149641614494249195605016959576235097480592396214296565598519295693079257885246632306201885850365687426564365813280963724310434494316592041592681626416195491751015907716210235352495422858432792668507052756279908951163972960239286719854867504108121432187033786444937064356645218196398775923710931242852937602515835035177768967470757847368349565128635934683294155947532322786360581473152034468071184081729335560769488880138928479829695277968766082973795720937033019047838250608170693879209655321034310764422462828792636246742456408134706264621790736361118589122797268261542115823201538743148116654378511916000714911467547209475246784887830649309238110794938892491396597873160778553131774466638923135932135417900066903068192088883207721545109720968467560224268563643820599665232314256575428214983451466488658896488012211237139254674708538347237589290497713613898546363590044902791724541048198769085430459186735166233549186115282574626012296888817453914112423361525305960060329430234696000121420787598967383958525670258016851764034555105019265380321048686563527396844220047826436035333266263375049097675787975100014823583097518824871586828195368306649956481108708929669583308777347960115138098217676704862934389659753628861667169905594181756523762369645897154232744410732552956489694024357481100742138381514396851789639339362228442689184910464071202445106084939268067445115601375050153663645294106475257440167535462278022649865332161044187890625 True
1000399717477066534083185452789672211951514938424998708930175541558932213310056978758103599452364409903384901149641614494249195605016959576235097480592396214296565598519295693079257885246632306201885850365687426564365813280963724310434494316592041592681626416195491751015907716210235352495422858432792668507052756279908951163972960239286719854867504108121432187033786444937064356645218196398775923710931242852937602515835035177768967470757847368349565128635934683294155947532322786360581473152034468071184081729335560769488880138928479829695277968766082973795720937033019047838250608170693879209655321034310764422462828792636246742456408134706264621790736361118589122797268261542115823201538743148116654378511916000714911467547209475246784887830649309238110794938892491396597873160778553131774466638923135932135417900066903068192088883207721545109720968467560224268563643820599665232314256575428214983451466488658896488012211237139254674708538347237589290497713613898546363590044902791724541048198769085430459186735166233549186115282574626012296888817453914112423361525305960060329430234696000121420787598967383958525670258016851764034555105019265380321048686563527396844220047826436035333266263375049097675787975100014823583097518824871586828195368306649956481108708929669583308777347960115138098217676704862934389659753628861667169905594181756523762369645897154232744410732552956489694024357481100742138381514396851789639339362228442689184910464071202445106084939268067445115601375050153663645294106475257440167535462278022649865332161044187890626 False
</code></pre>
<p>And it did this in 0.33 seconds.</p>
<p>In my opinion, my algorithm works the same as Alex Martelli's, with all the benefits thereof, but has the added benefit highly efficient simple-test rejections that save a lot of time, not to mention the reduction in size of test numbers by powers of 4, which improves speed, efficiency, accuracy and the size of numbers that are testable. Probably especially true in non-Python implementations.</p>
<p>Roughly 99% of all integers are rejected as non-Square before Babylonian root extraction is even implemented, and in 2/3 the time it would take the Babylonian to reject the integer. And though these tests dont speed up the process that significantly, the reduction in all test numbers to an odd by dividing out all powers of 4 <em>really</em> accelerates the Babylonian test.</p>
<p>I did a time comparison test.  I tested all integers from 1 to 10 Million in succession.  Using just the Babylonian method by itself (with my specially tailored initial guess) it took my Surface 3 an average of 165 seconds (with 100% accuracy). Using just the logical tests in my algorithm (excluding the Babylonian), it took 127 seconds, it rejected 99% of all integers as non-Square without mistakenly rejecting any perfect squares. Of those integers that passed, only 3% were perfect Squares (a much higher density).  Using the full algorithm above that employs both the logical tests and the Babylonian root extraction, we have 100% accuracy, and test completion in only 14 seconds.  The first 100 Million integers takes roughly 2 minutes 45 seconds to test.</p>
<p>EDIT: I have been able to bring down the time further. I can now test the integers 0 to 100 Million in 1 minute 40 seconds.  A lot of time is wasted checking the data type and the positivity.  Eliminate the very first two checks and I cut the experiment down by a minute.  One must assume the user is smart enough to know that negatives and floats are not perfect squares.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm new to Stack Overflow, and did a quick skim to find a solution. I just posted a slight variation on some of the examples above on another thread (<a href="https://stackoverflow.com/questions/1547196/finding-perfect-square/5750159#5750159">Finding perfect squares</a>) and thought I'd include a slight variation of what I posted there here (using nsqrt as a temporary variable), in case it's of interest / use:</p>
<pre><code>import math

def is_perfect_square(n):
  if not ( isinstance(n, (int, long)) and ( n &gt;= 0 ) ):
    return False 
  else:
    nsqrt = math.sqrt(n)
    return nsqrt == math.trunc(nsqrt)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be solved using <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow">the <code>decimal</code> module</a> to get arbitrary precision square roots and easy checks for "exactness":</p>
<pre><code>import math
from decimal import localcontext, Context, Inexact

def is_perfect_square(x):
    # If you want to allow negative squares, then set x = abs(x) instead
    if x &lt; 0:
        return False

    # Create localized, default context so flags and traps unset
    with localcontext(Context()) as ctx:
        # Set a precision sufficient to represent x exactly; `x or 1` avoids
        # math domain error for log10 when x is 0
        ctx.prec = math.ceil(math.log10(x or 1)) + 1  # Wrap ceil call in int() on Py2
        # Compute integer square root; don't even store result, just setting flags
        ctx.sqrt(x).to_integral_exact()
        # If previous line couldn't represent square root as exact int, sets Inexact flag
        return not ctx.flags[Inexact]
</code></pre>
<p>For demonstration with truly huge values:</p>
<pre><code># I just kept mashing the numpad for awhile :-)
&gt;&gt;&gt; base = 100009991439393999999393939398348438492389402490289028439083249803434098349083490340934903498034098390834980349083490384903843908309390282930823940230932490340983098349032098324908324098339779438974879480379380439748093874970843479280329708324970832497804329783429874329873429870234987234978034297804329782349783249873249870234987034298703249780349783497832497823497823497803429780324
&gt;&gt;&gt; sqr = base ** 2
&gt;&gt;&gt; sqr ** 0.5  # Too large to use floating point math
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: int too large to convert to float

&gt;&gt;&gt; is_perfect_power(sqr)
True
&gt;&gt;&gt; is_perfect_power(sqr-1)
False
&gt;&gt;&gt; is_perfect_power(sqr+1)
False
</code></pre>
<p>If you increase the size of the value being tested, this eventually gets rather slow (takes close to a second for a 200,000 bit square), but for more moderate numbers (say, 20,000 bits), it's still faster than a human would notice for individual values (~33 ms on my machine). But since speed wasn't your primary concern, this is a good way to do it with Python's standard libraries.</p>
<p>Of course, it would be much faster to use <a href="https://pypi.python.org/pypi/gmpy2" rel="nofollow"><code>gmpy2</code></a> and just test <code>gmpy2.mpz(x).is_square()</code>, but if third party packages aren't your thing, the above works quite well.</p>
</div>
<div class="post-text" itemprop="text">
<p>My answer would be:</p>
<pre><code>def checkSquare(x):return x**.5%1==0
</code></pre>
<p>This basically does a square root, then modulo by 1 to strip the integer part and if the result is 0 return <code>True</code> otherwise return <code>False</code>. In this case x can be any large number, just not as large as the max float number that python can handle: 1.7976931348623157e+308</p>
</div>
<div class="post-text" itemprop="text">
<p>This is my method </p>
<pre><code>int(n**0.5)**2 == int(n)
</code></pre>
<p>take square root of number convert to integer then take the square
 if the numbers are equal then it is a perfect square otherwise not.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could binary-search for the rounded square root. Square the result to see if it matches the original value.</p>
<p>You're probably better off with FogleBirds answer - though beware, as floating point arithmetic is approximate, which can throw this approach off. You could in principle get a false positive from a large integer which is one more than a perfect square, for instance, due to lost precision.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Decide how long the number will be.</li>
<li>take a delta 0.000000000000.......000001</li>
<li>see if the (sqrt(x))^2 - x is greater / equal /smaller than delta and decide based on the delta error.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>This response doesn't pertain to your stated question, but to an implicit question I see in the code you posted, ie, "how to check if something is an integer?"</p>
<p>The first answer you'll generally get to that question is "Don't!" And it's true that in Python, typechecking is usually not the right thing to do.</p>
<p>For those rare exceptions, though, instead of looking for a decimal point in the string representation of the number, the thing to do is use the <em>isinstance</em> function:</p>
<pre><code>&gt;&gt;&gt; isinstance(5,int)
True
&gt;&gt;&gt; isinstance(5.0,int)
False
</code></pre>
<p>Of course this applies to the variable rather than a value. If I wanted to determine whether the <em>value</em> was an integer, I'd do this:</p>
<pre><code>&gt;&gt;&gt; x=5.0
&gt;&gt;&gt; round(x) == x
True
</code></pre>
<p>But as everyone else has covered in detail, there are floating-point issues to be considered in most non-toy examples of this kind of thing.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to loop over a range and do something for every number that is NOT a perfect square, you could do something like this:</p>
<pre><code>def non_squares(upper):
    next_square = 0
    diff = 1
    for i in range(0, upper):
        if i == next_square:
            next_square += diff
            diff += 2
            continue
        yield i
</code></pre>
<p>If you want to do something for every number that IS a perfect square, the generator is even easier:</p>
<pre><code>(n * n for n in range(upper))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think that this works and is very simple: </p>
<pre><code>from math import sqrt

def is_perfect_square(num):
    return int(sqrt(num)) == sqrt(num)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is numerically about as naive a solution as you can possibly have. It works for small numbers.</p>
<pre><code>def is_perfect_square(n):
    return (n ** .5).is_integer()
</code></pre>
<p>Evidently it fails for a large number such as 152415789666209426002111556165263283035677490.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure of the Python, but you could do something like:</p>
<pre><code>function isSquare(x) = x == floor(sqrt(x) + 0.5)^2
</code></pre>
<p>That is, take a number, find the square root, round it to the nearest integer, square it, and test if it's the same as the original number. (<code>floor</code> and adding <code>0.5</code> is done to prevent cases like <code>sqrt(4)</code> returning <code>1.9999999...</code> due to floating point math, as Mike Graham pointed out.)</p>
<p>In case you're interested, there was once a very good discussion on the <a href="https://stackoverflow.com/questions/295579/fastest-way-to-determine-if-an-integers-square-root-is-an-integer">Fastest way to determine if an integer’s square root is an integer</a>.</p>
<p><em>Edited for clarification.</em></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = math.sqrt(n)
b = int(a) 
a == b 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have a slight improvement on the original solution using the Babylonian approach.  Instead of using a set to store every previously generated approximation,  only the most recent two approximations are stored and checked against the current approximation.  This saves the huge amount of time wasted checking through the entire set of previous approximations.  I'm using java instead of python and a BigInteger class instead a normal primitive integer.</p>
<pre><code>    BigInteger S = BigInteger.ZERO;    
    BigInteger x = BigInteger.ZERO;
    BigInteger prev1 = BigInteger.ZERO;
    BigInteger prev2 = BigInteger.ZERO;
    Boolean isInt = null;

    x = S.divide(BigInteger.valueOf(2));

    while (true) {
        x = x.add(preA.divide(x)).divide(BigInteger.valueOf(2));
        if (x.pow(2).equals(S)) {   
            isInt = true;
            break;
        }

        if (prev1.equals(x) || prev2.equals(x)) {
            isInt = false; 
            break;
        }

        prev2 = prev1;
        prev1 = x;
    }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a VERY easy way to do this. Find how many factors the number has (including one and itself). If it has an odd amount of factors, it is a square.</p>
<pre><code>def getFactors(n):
    '''Code for counting factors of n.'''
    result = 1 # not forgetting to count the number itself
    for i in range(1, n // 2 + 1):
         if n % i == 0:
             result += 1
    return result</code></pre>
<p>If the result of the function is odd, it is a square.</p>
<p>EDIT:</p>
<p>This might not be the best method for a computer program but it's a good method for humans.</p>
</div>
<span class="comment-copy">For very large numbers, there is a fast randomized algorithm: <a href="http://petr-mitrichev.blogspot.com/2017/12/a-quadratic-week.html" rel="nofollow noreferrer">petr-mitrichev.blogspot.com/2017/12/a-quadratic-week.html</a></span>
<span class="comment-copy">Say what you want about the author, gmpy sounds like a great tool for this task.</span>
<span class="comment-copy">The Babylonian method works well, but you need to have special cases for 0 and 1 to avoid division by zero.</span>
<span class="comment-copy">By the way, <code>set([x])</code> = <code>{x}</code></span>
<span class="comment-copy">Isn't the <code>set</code> ovekill? Doesn't Babylonian just converge to <code>int(sqrt(x))</code>, where we just have to check if  <code>prev != next</code>?</span>
<span class="comment-copy">"I know, that's just so easy it feels like cheating (a bit the way I feel towards Python in general". Soo true ;)</span>
<span class="comment-copy">It would be slightly better to just do <code>if int(root + 0.5) ** 2 == integer:</code> if <code>int</code> acts as <code>floor</code> for the numbers we care about.</span>
<span class="comment-copy">@David Johnstone, I changed this post to use that implementation, which I agree is nicer than the old way I had. In any event, some of the other techniques others mention here are even better and more reliable.</span>
<span class="comment-copy">I understand that FP is approximate, but can <code>math.sqrt(9)</code> really ever be <code>2.99999</code>?  Python's <code>float</code> maps to C's <code>double</code>, but I think even a 16-bit FP type has more precision than that, so maybe if you had a C compiler that used 8-bit FP ("minifloats") as its <code>double</code> type?  I suppose it's technically possible, but it seems unlikely to me that that's the case on any computer running Python today.</span>
<span class="comment-copy">@Ken, I said "something like" to indicate I was getting at the underlying concept; it is not guaranteed that the value you get won't be slightly less than the exact value. I cannot imagine that <code>math.sqrt(9)</code> will return <code>2.99999</code> on any particular system, but the actual result is system-dependent and cannot be expected to be exact.</span>
<span class="comment-copy">Sorry, I took "like" to mean "for example" rather than "in the neighborhood".  Another casualty of the war between English and mathematics!</span>
<span class="comment-copy">Of course this only works for small numbers.</span>
<span class="comment-copy">Change <code>if (math.sqrt(number)-int(math.sqrt(number))):</code> to <code>a=math.sqrt(number)</code> then another line for: <code>if a-int(a):</code>. This is since it only has to calculate the square root once, which imo for large n is significant</span>
<span class="comment-copy">@JamesKPolk Why is that?</span>
<span class="comment-copy">As for simplicity, it's hard to beat the accepted answer. Performance-wise, yours should be better. I'm skeptical of the value of reducing the target by square powers of small primes, but computing jacobi symbols for small primes should be a win. And the larger the numbers the bigger the advantage for this answer.</span>
<span class="comment-copy">Reduction by powers of small primes is necessary for the jacobi symbol computation to provide deterministic results. Otherwise its at best probabilistic, or deterministic for non-squareness, but does not verify squareness.  Thats partially why I do factoring by powers of squares; the only jacobi symbols I calculate are for the same small primes I factor out. I also do it simply to reduce the size of the test number to make the Babylonian method used later a bit faster (but that is debatable).</span>
<span class="comment-copy">Well, it's certainly a good and unique answer and if I have some time in the future I'd like to play around with this, try some timings varying the number of small primes to see if an optimum number can be found at a given bitsize.</span>
<span class="comment-copy">By all means, test my code. Break it.  Im not a programmer by trade, Im a math major. Python is just a hobby.  Id be curious if its any more efficient on average.</span>
<span class="comment-copy">If you are still interested in there is essentially a duplicate question <a href="https://stackoverflow.com/q/295579/238704">here</a> with some interesting answers , especially <a href="https://stackoverflow.com/a/424936/238704">A.Rex's answer</a>.</span>
<span class="comment-copy">Won't work for negative numbers but still a great solution!</span>
<span class="comment-copy">What does "this applies to the variable rather than a value" mean? You can use round(5.0) == 5.0 and isinstance(x, int) without problems. (And the OOWTDI is just to call x.is_integer().)</span>
<span class="comment-copy">Fails on <code>is_perfect_square(152415789666209426002111556165263283035677490)</code></span>
<span class="comment-copy"><code>sqrt</code> is normally a floating point operation. It is not reliable to check it this way with <code>int</code> taking the floor because it is conceivable that you could have <code>sqrt(x)</code> return a value that is slightly less than the actual square root of <code>x</code>.</span>
<span class="comment-copy">Which is why the comment below my pseudocode said to round it. Don't presume too much about how pseudocode functions perform. (That said, I've changed the psuedocode to <code>round</code> instead of <code>int</code>.)</span>
<span class="comment-copy">This is a code only answer. Please provide a bit of reasoning.</span>
<span class="comment-copy">You cant reason your way through that @hotzst ? It makes perfect sense and Im not even an expert in python.  Its not the greatest test but it is valid both in theory and for small cases.</span>
<span class="comment-copy">@CogitoErgoCogitoSum: You don't understand. Code-only answers don't get found by searches using search engines like google. Whether one can understand the answer is irrelevant.</span>
<span class="comment-copy">Have you done a <a href="http://stackoverflow.com/a/1624688/1240268">timeit</a>? how much faster is it?</span>
<span class="comment-copy">Since the method converges quadratically the set size will be linear in the number of digits. In other words, the set size is very small. Also, python sets are implemented using a hash-based scheme; they are very fast. Most likely your method is not faster at all.</span>
<span class="comment-copy">Given this question is about Python, a solution that isn't algorithmically superior and with non-Python code seems a poor answer.</span>
<span class="comment-copy">@Machavity I have added some code.</span>
<span class="comment-copy">You have an incredibly weird definition of "easy". :-P</span>
<span class="comment-copy">@Veky Well... how is it hard?</span>
<span class="comment-copy">You're probably joking, but if not: factoring a number is <i>traditionally</i> considered a canonical case of hard problem. E.g. <a href="http://r6.ca/blog/20051222T210600Z.html" rel="nofollow noreferrer">r6.ca/blog/20051222T210600Z.html</a></span>
<span class="comment-copy">Of course finding prime factors is what's hard, not multiplying them. :-D And sqrt is not hard in that sense: it's easy to see that it can be calculated in linear time (using bisection) in the size of input.</span>
