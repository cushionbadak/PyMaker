<div class="post-text" itemprop="text">
<p>The first code is:</p>
<pre><code> string = "DBCABA"
 #computing the first recurring alphabet
 def compute_reccuring():
     for a in string:
         var = string.count(a)
         if var &gt; 1:
            final = str(a) 
        print(str(final) + " is repeated first")
        break
</code></pre>
<p>The second code is:</p>
<pre><code>def recurring():
    counts = {}
    for a in string:
        if a in counts:
           print(a)
        else:
           counts[a] = 1
</code></pre>
<p>Both of these codes work but I don't know which one is better in performance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a timer function as below and decorate your function with it and see the result yourself.</p>
<pre><code>import time                                                

def timeme(method):
    def wrapper(*args, **kw):
        startTime = int(round(time.time() * 1000))
        result = method(*args, **kw)
        endTime = int(round(time.time() * 1000))

        print(endTime - startTime,'ms')
        return result

    return wrapper
</code></pre>
<p>You can then use this function as decorator for your function. Something like this:</p>
<pre><code>@timeme
def recurring():
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use below code to check time taken by your script to run.</p>
<pre><code>import time
start = time.time()
'''
Your Code

'''
end = time.time()

print(start - end)
</code></pre>
</div>
<span class="comment-copy">Create a big enough string and try to test the performance.</span>
<span class="comment-copy"><code>string.count</code> is an implicit loop. Also, in the second example the <code>if a in counts..</code> probably should be outside / previously terminated.</span>
<span class="comment-copy"><a href="https://en.wikipedia.org/wiki/Benchmark_(computing)" rel="nofollow noreferrer">en.wikipedia.org/wiki/Benchmark_(computing)</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">docs.python.org/3/library/timeit.html</a></span>
<span class="comment-copy">So it looks to me that the first one is <code>O(n^2)</code> (for each <code>a in string</code> you walk the whole string again in the <code>.count(a)</code>), while the second one is <code>O(n)</code> since you're using a <code>dict</code> (<code>counts</code>) that has a constant access time of <code>O(1)</code> so, just by looking at the code I'd say the 2nd one is "better" However, in the second one you need to keep a <code>dict</code> in memory, so it could take more memory... Depends on what you consider <b>better</b>... Faster? Less memory?</span>
<span class="comment-copy">thanks. its shows the time for these two functions, but what about the memory?</span>
<span class="comment-copy">May be you can experiment with <a href="https://pypi.python.org/pypi/memory_profiler" rel="nofollow noreferrer">memory_profiler</a>. Hope that helps.</span>
