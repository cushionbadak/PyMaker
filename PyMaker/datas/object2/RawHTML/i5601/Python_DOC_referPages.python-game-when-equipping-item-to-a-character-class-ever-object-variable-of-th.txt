<div class="post-text" itemprop="text">
<p>Hey sorry for the long title, couldn't quite put my error into a short phrase. Anyway the code isn't throwing any exceptions, just an error I noticed. I'm creating a simple text based python game to get the flow of inheritance and whatnot down. in my chara class (the class used to initialize character variables) I have an empty array set a s a class variable called equiptedlist. I created a function that adds an item to that array and returns it. My error is if I equip a sword to chara bob, then all other chara variables in my program will also have a sword equipped. Here's my code, thanks in advance!</p>
<pre><code>class Chara():
"""Class used to initialize new characters, including player, NPC's, enemies
and animals. inventory value should be a dictionary i.e. {Gold:50,
weapons:[sword, bow]} IMPORTANT, all chara object variables must have 
backpack as
as their inventory array key"""

equiptedlist = []
def __init__(self, hp, speed, name, inventory, isenemy, isplayer):
    self.hp = hp
    self.speed = speed
    self.name = name
    self.inventory = inventory
    self.isenemy = isenemy
    self.isplayer = isplayer


def gethp(self):
    return self.hp

def getspeed(self):
    return self.speed

def getname(self):
    return self.name

def getinv(self):
    return self.inventory

#gets whether the char is an enemy or not
def enemy(self):
    return self.isenemy

#gets whether the char is a player or not
def player(self):
    return self.isplayer

def sethp(self, newhp):
    self.hp = newhp
    return self.hp

def setspeed(self, newspeed):
    self.speed = newspeed
    return self.speed

def setname(self, newname):
    self.name = newname
    return self.name

def setinv(self, newinv):
    self.inventory = newinv
    return self.inventory

#sets whether the char is an enemy or not
def setenemy(self, enemy):
    self.isenemy = enemy
    return self.isenemy

#sets whether the char is a player or not
def setplayer(self, player):
    self.isplayer = player
    return self.isplayer

#picks up an item
def pickup(self, item):
    self.inventory.setdefault("backpack", []).append(item)
    return self.inventory

#returns a boolean value to check if the item is in the charas inventory
def has(self, item):
    for key in self.inventory.keys():
        if item in self.inventory[key]:
            return True
        else:
            return False

#returns new enemy hp after an attack
def attack(self, enemy, weapon):
   enemy.sethp(enemy.gethp() - weapon.getdmg())
   return enemy.gethp()

#equipts an item to the player
def equipt(self, item):
    self.equiptedlist.append(item)
    return self.equiptedlist

#checks if an item as equipted
def isequipted(self, item):
    for i in self.equiptedlist:
        if item == i:
            return True
        else:
            return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow noreferrer">Here is the python doc that explains why every Chara equips sword.</a></p>
<blockquote>
<p>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:</p>
</blockquote>
<pre><code>class Chara():

    equipped = []           # class variable shared by all instances

    def __init__(self, name):
        self.name = name    # instance variable unique to each instance
        self.equipped = []  # instance variable unique to each instance

    def equip(self, item):
        self.equipped.push(item)

&gt;&gt;&gt; d = Chara('Thor')
&gt;&gt;&gt; d.equip('Mjolnir')
&gt;&gt;&gt; e = Chara('Tony Stark')
&gt;&gt;&gt; e.equip('Mark I')
&gt;&gt;&gt; d.equipped              # Thor unique equipped items
['Mjolnir']
&gt;&gt;&gt; e.equipped              # Ironman unique equipped items
['Mark I']
&gt;&gt;&gt; Chara.equipped          # Shared equipped items
['']
</code></pre>
</div>
<span class="comment-copy">I'm guessing all of these definitions are inside <code>def class Chara():</code> In python the <code>equiptedlist = []</code> is shared for class itself if its defined inside <code>def class Chara():</code> block. The ones with <code>self.something</code> are the object variables while the <code>equiptedlist = []</code> itself belongs the whole class, and this is the reason you see everyone has a sword.</span>
<span class="comment-copy">updated my comment, I mistyped the enter instead of shift+enter ^-^</span>
<span class="comment-copy">Yes, you need to make equiptedlist an instance variable not a class variable. That should solve your problem if I am understanding your "question" correctly. Also you should start adhering to the PEP 8 style guide for naming your variables and functions. It is a good habit to start early with Python <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python.org/dev/peps/pep-0008</a></span>
