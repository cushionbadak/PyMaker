<div class="post-text" itemprop="text">
<p>As some good people showed me that <code>callable()</code> can be used to solve this problem, I still found it to be a different question, because anyone that has this question in mind will not found the answer because he won't connect this directly to <code>callable()</code>. Plus I found a possible way to go around without using <code>callable()</code>, which is to use <code>type()</code> as showed in one of the answers from myself.</p>
<p>Assume I create a simple class as <code>Cls</code></p>
<pre><code>class Cls():
    attr1 = 'attr1'

    def __init__(self, attr2):
        self.attr2 = attr2

    def meth1(self, num):
        return num**2

obj = Cls('attribute2')
print(hasattr(obj, 'attr1'))  # &gt;&gt;&gt; True
print(hasattr(obj, 'attr2'))  # &gt;&gt;&gt; True
print(hasattr(obj, 'meth1'))  # &gt;&gt;&gt; True
</code></pre>
<p>From what I learned, an attribute is a variable inside a class, and a method is a function inside a class. They are not the same.</p>
<p>Apparently, there is no <code>hasmethod()</code> to be called by python. And it seems that <code>hasattr()</code> really gives all <code>True</code> to my test on <code>'attr1'</code>, <code>'attr2'</code>, <code>'meth1'</code>. It does not differentiate from an attribute or a method.</p>
<p>And if I use <code>dir()</code>, the attributes and methods will all show up in the output, and you can't really tell which one is what type either.</p>
<p>Can someone please explain me why?</p>
</div>
<div class="post-text" itemprop="text">
<p>No matter it's a variable or a method, they are all considered "attributes". So <code>hasattr</code> returns <code>True</code>.</p>
<p>The way in which methods are different is that they are callable. This can be checked by calling <code>callable</code>. So if you want to figure out whether an attribute is callable, you can</p>
<pre><code>if hasattr(obj, "attr1"):
    if callable(obj.attr1):
        # attr1 is a method!
    else:
         # attr1 is not a method but an attribute
else:
    # attr1 is not an attribute
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define <code>hasmethod()</code> as below</p>
<pre><code>def hasmethod(obj,method_name):
     return hasattr(obj,method_name) and callable(getattr(obj,method_name))

print(hasmethod(obj,'meth1')) #True
print(hasmethod(obj,'attr1')) #False 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something interesting that I found is that if I call <code>type()</code> on the attributes, a method will shows up as a method, while attributes will be a string or an int or any other types.</p>
<pre><code>print(type(obj.attr1))  # &gt;&gt;&gt; &lt;class 'str'&gt;
print(type(obj.attr2))  # &gt;&gt;&gt; &lt;class 'str'&gt;
print(type(obj.meth1))  # &gt;&gt;&gt; &lt;class 'method'&gt;
</code></pre>
<p>maybe this can tell whether it is a method or not?</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/111234/what-is-a-callable-in-python">What is a "callable" in Python?</a></span>
<span class="comment-copy">In the Custom classes and Class instances <i>sections</i> of  <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">The Standard Type Hierarchy</a> , methods and functions are referred to as class attributes also.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/glossary.html#term-attribute" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-attribute</a></span>
<span class="comment-copy">thanks, did not realize that callable() can solve this problem</span>
<span class="comment-copy">quite Interesting</span>
