<div class="post-text" itemprop="text">
<p>I am new to Python and OOP. For some reason I have some troubles to understand OOP  and not sure when to use class (objects) and when dictionaries.</p>
<p>I have a file in following format:</p>
<pre><code>system1 attr1 attr2 attr3
system2 attr1 attr2 attr3
system3 attr1 attr2 attr3
system4 attr1 attr2 attr3
</code></pre>
<p>...</p>
<p>Any advice how to create a class where my objecs will be items in 1st column and propertiers/attributes in 2-4 columns? T</p>
<p>I am able to do this with dict but not sure how to use class here?
Any guidlelines pls?</p>
<p>ZDZ</p>
</div>
<div class="post-text" itemprop="text">
<p>From my experience, classes are best used when they have to do something; this is when you define methods/functions for them. 
if you're just wanting to store the data then using dictionaries is fine. </p>
<pre><code>d = {}
d['system1'] = {}
d['system1']['attr1'] = value_of_attr1
</code></pre>
<p>i use multidimensional dicts in a lot of my code to keep it organized. unless there is something to be done, i stick with dicts. </p>
</div>
<span class="comment-copy">Can you post the code for how you did this with <code>dict</code>s?</span>
<span class="comment-copy">Usually one uses a classes if the fields are more or less fixed: i.e. all objects have exactly the same fields. Furthermore OO is used if these fields have a semantical meaning, or reference each other in a circular way. Dictionaries are usually used if the keys are more arbitrary (i.e. the names of students). Note that most classes use under the hood a dictionary, and that Python adds some magic to it.</span>
<span class="comment-copy">Damn, I can't remember where the quote came from, but some Python programmers mockingly make a sport of having colleagues defend their self written classes when they could just have used a dictionary plus some extra methods.</span>
<span class="comment-copy">So do you want an object which represents <code>system1 attr1 attr2 attr3</code>, or do you want an object which is <code>system1</code>, or do you want an object which has the attributes <code>attr1 attr2 attr3</code>?</span>
<span class="comment-copy">You should probably use <i>both</i> for this particular example. The data should be stored in a <code>dict</code>, and held internally within a manager class. The class would be responsible for reading and writing the data, and provide accessor methods for the data. So the overall structure would be a simplified version of something like the <a href="https://docs.python.org/3/library/configparser.html#module-configparser" rel="nofollow noreferrer">ConfigParser</a> class in the stdlib.</span>
<span class="comment-copy">Cheers Taylor. I am ok with dict and i used the very same structure.</span>
