<div class="post-text" itemprop="text">
<p>Consider the following CSV:</p>
<pre><code>"""tom"""
""fred""
"henry"
Jack
"""mary"""
</code></pre>
<p>The following looks for some characters I've defined, removes them, then adds a string at the end of each line (row). It "works", but I'm not sure I'm going about it the right way....which...in my opinion, should open, edit, and save the original file. I'll be running this against thousands of CSV files so it can get quite cluttered. </p>
<pre><code>import csv
s = open('Book1.csv','r').read()
chars = ('$','%','^','*','"','_') # etc
for c in chars:
  s = ''.join( s.split(c) )
out_file = open('Book2.csv','w')
out_file.write(s)
out_file.close()
output = ""
file_name = 'Book2.csv'
string_to_add = "@bigfoot.com"
with open(file_name, 'r') as f:
    file_lines = [''.join([x.strip(), string_to_add, '\n']) for x in f.readlines()]
with open(file_name, 'w') as f:
    f.writelines(file_lines)


tom@bigfoot.com
fred@bigfoot.com
henry@bigfoot.com
Jack@bigfoot.com
mary@bigfoot.com
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You only need to open the file once to read, and once to write, and you don't need to use two separate files. The less file reading and writing you do, the faster your script will run.</p>
<p>A few incidental points:</p>
<ul>
<li>use <code>with open(...) as f</code> consistently</li>
<li>a more readable method of replacing characters is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace()</code></a>.</li>
<li>you might like to check out <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer"><code>str.splitlines()</code></a></li>
</ul>
<p>Also, it doesn't look from this example like you're actually using the <code>csv</code> module at all in your code.</p>
<p>Here's what I would suggest:</p>
<pre><code>chars = ('$', '%', '^', '*', '"', '_')
string_to_add = '@bigfoot.com'

with open('tmp', 'r') as f:
    s = f.read()

# Replace unwanted characters
for c in chars:
    s = s.replace(c, '')

# Append line ending
s = '\n'.join(line + string_to_add for line in s.splitlines())

with open('tmp', 'w') as f:
    f.write(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you're overcomplicating it.</p>
<p>First, read the lines, applying <code>strip</code> on the lines to remove all the chars at start or end of the string (including newline or it wouldn't work). Using a loop with <code>replace</code> is highly inefficient and unneccesary here since <code>strip</code> does exactly what you want in one go.</p>
<p>Then, write back the lines to the same file, appending the domain &amp; linefeed</p>
<pre><code>input_file = 'Book1.csv'
chars = '$%^*"_\n'  # etc notice the \n (linefeed)
with open(input_file) as f:
    lines = [x.strip(chars) for x in f]
with open(input_file,"w") as f:
    f.writelines("{}@bigfoot.com\n".format(x) for x in lines)
</code></pre>
</div>
<span class="comment-copy">it's not really a csv / at least not using <code>csv</code> module at all but rather text processing. can the characters be in the middle of the string?</span>
<span class="comment-copy">why not read the file lines, perform the replace+add then write back to the original file?</span>
<span class="comment-copy">no the characters will always be at either end of the original string, and the string to be added will always be appended to the end, after removal of the characters</span>
<span class="comment-copy">Thanks! Both of these solutions work perfectly!</span>
