<div class="post-text" itemprop="text">
<p>I'm using python 3.6 django 1.11 windows10 and trying to send email using multiprocessing.</p>
<p>recipients are connected to database(django model) and email contents form is html(by django get_template), also used get_connection to send multi-email. What I'm trying is to use multiprocessing to accelerate sending rate.</p>
<p>My code is here</p>
<pre><code>from django.core.management.base import BaseCommand
from django.core.mail import get_connection, EmailMessage
from django.template.loader import get_template

from multiprocessing import Pool

from sending.models import Subscriber


class Command(BaseCommand):
    def handle(self, *args, **options):

        connection = get_connection()

        recipients = [i.email for i in Subscriber.objects.all()]
        num = Subscriber.objects.count()

        subject = 'Multiprocessing trying 1'
        body = get_template('Newsletter20171229.html').render()
        from_email = 'info@modoodoc.com'


        def send(i):
            msg = EmailMessage(subject, body, from_email, [recipients[i]])
            msg.content_subtype = 'html'

            print("Sending email to: " + recipients[i] + " No: " + str(i))
            connection.send_messages([msg])
            print("Complete.")

        pool = Pool(processes=2)
        pool.map(send, range(0, num))


        print("Mail have just sent. The program is going to end.")
        connection.close()
</code></pre>
<p>And I've got an error like this.</p>
<pre><code>  File "c:\python36-32\Lib\multiprocessing\connection.py", line 206, in send
    self._send_bytes(_ForkingPickler.dumps(obj))
  File "c:\python36-32\Lib\multiprocessing\reduction.py", line 51, in dumps
    cls(buf, protocol).dump(obj)
AttributeError: Can't pickle local object 'Command.handle.&lt;locals&gt;.f'
</code></pre>
<p>How to fix this?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You must take the local function <code>send</code> out of <code>handle</code> (and the <code>Command</code> class) and <strong>put it at the top level of your module</strong>, according to <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">the reference</a>. </p>
<p>For closured variables like <code>subject</code>, <code>body</code>, <code>from_email</code>, etc., you can bundle them in a <code>tuple</code> and pass the <code>tuple</code> as a single argument to <code>send</code>. Or better, create <code>msg</code> objects outside <code>send</code>, and pass the <code>msg</code> list to <code>pool.map()</code>:</p>
<pre><code>msg_list = [EmailMessage(subject, body, from_email, [recipients[i]])
            for i in range(0, num)]

for msg in msg_list
    msg.content_subtype = 'html'

pool = Pool(processes=2)
pool.map(send, msg_list)
</code></pre>
<p>in which the <strong>module-level</strong> <code>send</code> function is defined as follows:</p>
<pre><code>def send(msg):
    print("Sending email to: {}".format(msg.recipients()[0]))
    connection.send_messages([msg])
    print("Complete.")
</code></pre>
</div>
