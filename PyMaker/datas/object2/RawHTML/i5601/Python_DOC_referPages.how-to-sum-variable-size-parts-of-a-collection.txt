<div class="post-text" itemprop="text">
<p>I want to calculate the sum of a collection, for sections of different sizes:</p>
<pre><code>d = (1, 2, 3, 4, 5, 6, 7, 8, 9)
sz = (2, 3, 4)

# here I expect 1+2=3, 3+4+5=12, 6+7+8+9=30

itd = iter(d)
result = tuple( sum(tuple(next(itd) for i in range(s))) for s in sz )

print("result = {}".format(result))
</code></pre>
<p>I wonder whether the solution I came up with is the most 'pythonic' (elegant, readable, concise) way to achieve what I want...</p>
<p>In particular, I wonder whether there is a way to get rid of the separate iterator 'itd', and whether it would be easier to work with slices?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">itertools.islice</a> since you can directly use the values in <code>sz</code> as the step size at each point:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; it=iter(d)
&gt;&gt;&gt; [sum(islice(it,s)) for s in sz]
[3, 12, 30]
</code></pre>
<p>Then you can convert that to a tuple if needed.</p>
<p>The <code>iter</code> is certainly needed in order to step through the tuple at the point where the last slice left off. Otherwise each slice would be <code>d[0:s]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There's no reason to get rid of your iterator – iterating over <code>d</code> is what you are doing, after all. </p>
<p>You do seem to have an overabundance of tuples in that code, though. The line that's doing all the work could be made more legible by getting rid of them:</p>
<pre><code>it = iter(d)
result = [sum(next(it) for _ in range(s)) for s in sz]
# [3, 12, 30]
</code></pre>
<p>… which has the added advantage that now you're producing a list rather than a tuple. <code>d</code> and <code>sz</code> also make <a href="https://stackoverflow.com/a/626871">more sense</a> as lists, by the way: they're variable-length sequences of homogeneous data, not fixed-length sequences of heterogeneous data.</p>
<p>Note also that <code>it</code> is the conventional name for an arbitrary iterator, and <code>_</code> is the conventional name for any variable that must exist but is never actually used.</p>
<p>Going a little further, <code>next(it) for _ in range(s)</code> is doing the same work that <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>islice()</code></a> could do more legibly:</p>
<pre><code>from itertools import islice

it = iter(d)
result = [sum(islice(it, s)) for s in sz]
# [3, 12, 30]
</code></pre>
<p>… at which point, I'd say the code's about as elegant, readable and concise as it's likely to get.</p>
</div>
<span class="comment-copy">Why so many tuples?</span>
<span class="comment-copy">Maybe I am misled, but I like to have expressions that are not meant to change to be immutables... Like I would use a <code>const</code> expression in <code>C</code>, both for readability and to support optimization by the compiler. I have read the thread about homogeneous vs. heterogeneous contents but am not convinced. That is a bit like mixing up array and list in other languages with immutability (const vs. non-const). But the inner tuple should for sure be omitted.</span>
<span class="comment-copy">Would a <a href="https://mail.python.org/pipermail/python-dev/2003-March/033964.html" rel="nofollow noreferrer">definitive pronouncement by the BDFL</a> help to convince you? Or <a href="https://mail.python.org/pipermail/python-dev/2003-March/033972.html" rel="nofollow noreferrer">another, even more definitive one</a> from the same discussion?</span>
<span class="comment-copy">Thanks for the link. I understand part of the reasoning but it still seems weird to me to rank semantics above some hard-coded (and I think useful) feature like immutability.</span>
<span class="comment-copy">I ended up writing your <code>islice</code> without reading yours first ;-) +1</span>
<span class="comment-copy">the islice part improved readability I think. I used a tuple because I considered the result immutable.</span>
<span class="comment-copy">The most important distinction between tuples and lists is not mutable vs immutable, but order vs structure: see <a href="https://nedbatchelder.com/blog/201608/lists_vs_tuples.html" rel="nofollow noreferrer">Lists vs. Tuples</a> by Ned Batchelder for more on this. A list is the semantically correct data structure to use here.</span>
