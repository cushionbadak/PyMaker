<div class="post-text" itemprop="text">
<p>I'm trying override my last print with a new line but I can't clear the last line. </p>
<p>I thought that flush would clear the line, but I can't see it has any effect.</p>
<pre><code>import time

s = "qwertyuiopåasdfghjklæøzxccvbnm"

for num in range(len(s)):
    print("\r{}".format(str[:len(s)-num]), end="", flush=True)
    time.sleep(.1)
</code></pre>
<p>Here in my example, I end up with the output:</p>
<pre><code>qwertyuiopåasdfghjklæøzxccvbnm
</code></pre>
<p>But wanted the output to be "q" only. 
If the next print is smaller than the first line I can still see the end of the last line.</p>
<p>I could just override the first line with spaces, but I don't like that because if I then resize the console, it will shift everything around.</p>
<p>Is there anyway to really clear the last line and only the last line?</p>
<p>a solution that works both in linux and windows would be great. </p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>format</code> to pad the string with whitespace, which will overwrite the old text.</p>
<pre><code>import time
s = "qwertyuiopåasdfghjklæøzxccvbnm"

spacer = '\r{{:{}}}'.format(len(s)) # '\r{:30}' for this s

for num in range(len(s), 0, -1):
    print(spacer.format(s[:num]), end='')
    time.sleep(.1)

print()
</code></pre>
<p>You can read more about the Format Specification Mini-Language <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>A more reusable solution could be:</p>
<pre><code>from os import get_terminal_size

def rprint(*args, **kwargs):
    try:
        cols, rows = get_terminal_size()
    except OSError:
        # If get_terminal_size is not supported, override with whitespaces is not needed.
        cols, rows = (1, 1)

    # Override the line with whitespace and return cursor(-1 because of cursor size)
    print("\r{:&gt;{}}".format("", cols-1), end="\r")
    print(*args, **{**kwargs, **{"end": "", "flush": True}})


if __name__ == '__main__':
    import time

    s = "qwertyuiopåasdfghjklæøzxccvbnmq"

    # I want to end the loop with "q", not an empty string.
    for num in range(len(s)):
        rprint(s[:len(s) - num])
        time.sleep(.1)

    rprint("Override last line again")
</code></pre>
<p>Tested only in python 3.5+</p>
<p>But does fail, if the last printed line was larger than the terminal width.</p>
<p>I don't know if there is some way to get the last printed line to stdout? If there is then it would be possible to count the length of that line instead of get_terminal_size. </p>
</div>
<span class="comment-copy">check the answer here <a href="https://stackoverflow.com/questions/4897359/output-to-the-same-line-overwriting-previous-output-python-2-5" title="output to the same line overwriting previous output python 2 5">stackoverflow.com/questions/4897359/…</a></span>
<span class="comment-copy">Why not just <code>' ' * (len(s) - num)</code>?</span>
<span class="comment-copy">@Dan I guess you could do <code>print(s[:num] + ' ' * (len(s) - num))</code>.  I don't see that as much better. If the <code>'{{:{}}}'.format(len(s))</code> is confusing, I suppose you could do <code>'{:' + str(len(s)) + '}'</code></span>
<span class="comment-copy">your code does not end with "q" at the end of the loop like i wanted because of your end="\r". but i see what you mean. i would still use my code and do <code>ns = s[:len(s) - num]</code>  and <code>print("\r{:{}}".format(ns, len(ns)+1), end="", flush=True)</code></span>
