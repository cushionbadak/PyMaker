<div class="post-text" itemprop="text">
<p>I have a list of numbers ; <code>1 6 3 15 54...</code></p>
<p>Let's say list is L,  I want to apply this condition as simple as possible ;</p>
<pre><code>L[2]-L[1] 
L[4]-L[3]
.
.
.
</code></pre>
<p>Then a new list emerges let's say L2, apply the same rule again ;</p>
<pre><code>L2[2]-L2[1]
L2[4]-L2[3]
.
.
.
</code></pre>
<p>Until there is only one number is left from the initial L list.</p>
<p>I am currently working on something like this ;</p>
<pre><code>for n in range(2,len(L),1):
  r.append(s[n]-s[n-1])
</code></pre>
<p>works for 1 loop but to introduce corresponding iterations I am looking for a decent approach. I will gladly accept the innovative answer. Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that your example should be the following:</p>
<pre><code>[1, 6, 3, 15, 54]
[5, -3, 12, 39]
[-8, 15, 27]
[23, 12]
[-11]
</code></pre>
<p>Where in each step, the numbers are taken as a pair and the first number is substracted from the second.</p>
<p>In that case, you can use the <code>pairwise</code> function from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a>:</p>
<pre><code># original list
l = [1, 6, 3, 15, 54]

# copy it over to a new name which will be updated on each iteration
lst = l

# repeat until the list only contains a single element
while len(lst) &gt; 1:
    # take all pairs from the list and substract the first from the second
    # collect the results in a list and assign that to `lst`
    lst = [y - x for x, y in pairwise(lst)]

# finally, print the single element that’s left in the list
print(lst[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that <code>[1, 6, 3, 15, 54]</code> gets reduced to <code>[-11]</code> in the end, you can just use recursion for this. What recursion will do here is keep calling the same function over and over again, until a base case is met. In your case, it will keep reducing the list on each recursive call, until the length of the list only has one element. I'm also assuming that you want to return the final singleton list at the end. </p>
<p><strong>Recursion Approach:</strong></p>
<pre><code>lst = [1, 6, 3, 15, 54]

def reduce_list(l):
    if len(l) == 1:
        return l

    return reduce_list([y - x for x, y in zip(l, l[1:])])

print(reduce_list(lst))
</code></pre>
<p>Which Outputs:</p>
<pre><code>[-11]
</code></pre>
<p><strong>Note:</strong> <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> was used to pair every 2 elements elements together in the list, and minus the second element from the first element. </p>
<p>Here is an example that breaks down the above usage of <code>zip()</code>:</p>
<pre><code>&gt;&gt;&gt; lst = [1, 6, 3, 15, 54]
&gt;&gt;&gt; zipped = list(zip(lst, lst[1:]))
[(1, 6), (6, 3), (3, 15), (15, 54)]
&gt;&gt;&gt; print([y - x for x, y in zipped])
[5, -3, 12, 39]
</code></pre>
<p>Additionally, anything done with recursion can be done with a simple loop, which @poke has nicely shown.</p>
<p><strong>EDIT:</strong></p>
<p>Since the above code is prone to <code>RecursionError: maximum recursion depth</code> errors with lists of size 1000 or greater, because 1000 is the recusion limit,  you can see this <a href="https://stackoverflow.com/questions/3323001/what-is-the-maximum-recursion-depth-in-python-and-how-to-increase-it">post</a> for more details on how to increase the limit. Alternatively, you can also just make an iterative version that is bypasses this problem, as shown below. </p>
<p><strong>Iterative Approach:</strong></p>
<pre><code>lst = [1, 6, 3, 15, 54]

def reduce_list(l):
    return [y - x for x, y in zip(l, l[1:])]

# Since 5 elements reduce to 1, 4 iterations only needed
for _ in range(len(lst) - 1):
    lst = reduce_list(lst)

print(lst)
# [-11]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try recursive approach :</p>
<pre><code>data=[1,6,3,15,54]

def finding(list_1):
    if not list_1:
        return 0
    list_2=[]
    for i in range(0,len(list_1),1):
        chunk=list_1[i:i+2]
        if len(chunk)==2:
            list_2.append(chunk[1]-chunk[0])

    if list_2:
        print(list_2)



    return finding(list_2)


print(finding(data))
</code></pre>
<p>output:</p>
<pre><code>[5, -3, 12, 39]
[-8, 15, 27]
[23, 12]
[-11]
0
</code></pre>
</div>
<span class="comment-copy">Can you try to explain that a little less abstract? Maybe with a few examples?</span>
<span class="comment-copy">You should write the code yourself rather than asking for someone to write it for you. I would ‘gladly accept’ a holiday in the sun :-o</span>
<span class="comment-copy">In the question, you make pairs 2-1, 4-3 (and likely 6-5, 8-7), but your example also includes 3-2 and 5-4. Which of those is correct?</span>
<span class="comment-copy">Is this process being applied on the same list over and over again?</span>
<span class="comment-copy">I also don’t understand where the <code>-7, -15, 27</code> comes from. It should be <code>-8, 15, 27</code>, no?</span>
<span class="comment-copy"><code>lst = [y - x for x, y in zip(lst,lst[1:])]</code></span>
<span class="comment-copy">@splash58 <code>lst[1:]</code> creates a new copy of the list, <code>pairwise</code> doesn’t.</span>
<span class="comment-copy"><code>lst = [lst[x+1] - lst[x] for x in range(len(lst)-1)]</code></span>
<span class="comment-copy">@splash58 That’s just very unpythonic.</span>
<span class="comment-copy">RuntimeError: maximum recursion depth exceeded     Any ideas ?</span>
<span class="comment-copy">@y33t What example are you running this on?</span>
<span class="comment-copy">there is a list I generated consisting of approximately 10 elements.</span>
<span class="comment-copy">Yeah thats strange, I'm running this code on 100 elements and its working fine. You could just use @poke's example, its much simpler and error prone compared to this one.</span>
<span class="comment-copy">thank you for your effort!</span>
