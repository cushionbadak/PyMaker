<div class="post-text" itemprop="text">
<p>The code:</p>
<pre><code>&gt;&gt;&gt; class Negative: 
...      pass

&gt;&gt;&gt; class Positive:
...    @classmethod
...    def __neg__(cls):
...        return Negative
</code></pre>
<p>So I try</p>
<pre><code>&gt;&gt;&gt; -Positive is Negative
TypeError: bad operand type for unary -: 'type'
</code></pre>
<p>this works though</p>
<pre><code>&gt;&gt;&gt; -Positive() is Negative
True
</code></pre>
<p>The same goes with other unary operators and their related "magic" methods (e.g. <code>~</code> and <code>__invert__</code>, <code>+</code> and <code>__pos__</code>, etc).</p>
<p>Why does it work with instances but not with classes? How can I get it to work?</p>
<p><strong>Edit: I have modified the code as suggested to move the magic method in a metaclass.</strong></p>
<pre><code>class Negative: pass

class PositiveMeta(type):
    def __neg__(cls):
        return Negative

class Positive(metaclass=PositiveMeta): pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason your code does not work as originally written is that you can not define a magic method in an instance. According to the <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>For custom classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s type, not in the object’s instance dictionary.</p>
</blockquote>
<p>This applies to classes (which are instances of some metaclass), just as much as it does to "regular" objects. In that sense, this question is equivalent to any of the following: <a href="https://stackoverflow.com/q/10376604/2988730">Overriding special methods on an instance</a>, <a href="https://stackoverflow.com/q/42146413/2988730">Why does Python's bool builtin only look at the class-level __bool__ method</a>, <a href="https://stackoverflow.com/q/38133096/2988730">Assigning (instead of defining) a __getitem__ magic method breaks indexing</a>.</p>
<p>Decorating your magic method with <code>@classmethod</code> is analagous to assigning a bound method obtained through <code>__get__</code> to an instance. In both cases, Python simply ignores any descriptors not defined in the class.</p>
<p>That is also the reason that <code>-Positive() is Negative</code> works. When you negate an instance of <code>Positive</code>, the interpreter looks up <code>__neg__</code> in the class. Decorating with <code>@classmethod</code> is totally superfluous here since you ignore the input parameters anyway. But now you have a magic method that returns a class object.</p>
<p>To properly define a magic method on your class object, you need to define it on the metaclass:</p>
<pre><code>class MetaPositive(type):
    def __neg__(self):
        return Negative

class Negative: pass

class Positive(metaclass=MetaPositive): pass
</code></pre>
<p>The interesting thing here is that this is not restricted to unary operators. You can define <em>any</em> dunder method on the metaclass and have your classes support the corresponding operations:</p>
<pre><code>class MetaPositive(type):
    def __gt__(self, other):
        if other is Negative:
            return True
        return False
</code></pre>
<p>Now you can use the <code>&gt;</code> operator to compare your classes. I'm not implying that you should ever do something like that, but the possibility is definitely there.</p>
<p>The question remains, as it often does, as to why you would want to do something like this in the first place.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this one:</p>
<pre><code>class Negative:
    pass

class meta(type):
    def __neg__(cls):
        return Negative

class Positive(metaclass=meta):
    pass

-Positive
#output __main__.Negative
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems to work:</p>
<pre><code>class Negative: pass

class PositiveMeta(type):
    def __neg__(self):
        return Negative

class Positive(metaclass=PositiveMeta):
    pass

print(-Positive is Negative)  # prints True
</code></pre>
</div>
<span class="comment-copy">The class of a class is it's metaclass. Define the methods in a custom metaclass, not in a classmethod. Magic methods are only recognized when they are defined in a class.</span>
<span class="comment-copy">@Jean-FrançoisFabre why not? They'd just have to go in a metaclass to take effect.</span>
<span class="comment-copy">In fact, this is probably not restricted to unary operators. You could probably add and multiply classes together if you define the appropriate methods in the metaclass.</span>
<span class="comment-copy">@MadPhysicist: yes it works. I think my issue was that I was originally mixing Python2 metaclass syntax with Python3. Thanks</span>
<span class="comment-copy">Nice. The sheer majesty of Python's object orientedness never ceases to amaze me. Go apeshit: define some binary operators for your classes. Let them divide and exponentiate each other.</span>
<span class="comment-copy">Thanks for the more complete explanation. I moved the accepted answer, as your comment was the one to originally put me back on track. I had in fact already tried to go through metaclasses to do this, but being new to Python3 I had not realized that the old syntax (<code>__metaclass__ = PositiveMeta</code>) wasn't doing anything and the error message threw me off (bad operant type). Your comments confirmed that some of my assumptions were correct, while others needed rechecking. Good catch and thank you.</span>
<span class="comment-copy">@mike_e. Good call, my answer is only suitable for Python 3. Thanks for selecting it. While I agree that it offers a much more detailed explanation, I have to give credit to the other answers too. They confirmed what was initially just a very educated guess on my part, made on a mobile device with no access to an interpreter.</span>
<span class="comment-copy">Why do you have a classmethod in your example?</span>
<span class="comment-copy">What I meant is, why do you bother defining <code>__pos__</code> the way you do right after you show the correct way of defining <code>__neg__</code>?</span>
<span class="comment-copy">It was copied from OP's code. However, it's not needed and may confuse future readers so I edited my answer.</span>
<span class="comment-copy">It's outright counterproductive. The whole point of answering a question is to fix OP's code, not to make it more convoluted.</span>
<span class="comment-copy">Noted and edited.</span>
