<div class="post-text" itemprop="text">
<p>I created a (rather complicated) Monty Hall simulation in Python, but, when run, returns equal odds of 33% for both Switching and not, when I know that, in reality, this cannot be the case and is not the case. What is wrong?</p>
<pre><code>import math
import random

Right = 0
def TestWithSwitch():
    global Right
    wdoor = math.floor(random.random() * 3)
    doors = [0,0,0]
    doors[wdoor] = 1
    Ldoors = [0,0]
    i=0
    ##Declare winning door to be the winning door in the door Array

    for x in range(0, 3):
        if(x!=3):
            if(doors[x] != 1):
                Ldoors[i] = x
                i+=1
    ##Chose the losing doors to be the doors that aren't the winning door
    choice = math.floor(random.random() * 3)
    DoorOut = 0
    ##Pick a Choice
    LChose = False
    for y in range(0, 2):
        if(y!= 2):
            if(Ldoors[y] == choice):
                DoorOut = Ldoors[(y+1)%2]
                LChose = True
    if(LChose == False):
        DoorOut = Ldoors[math.floor(random.random() * 2)]
    Reserved = [DoorOut, choice]

##DoorOut is chosen from any of the losing doors we didn't pick as our choice, and is the door the computer is told doesn't have the prize
    for z in range(0, 3):
        if(z!= 3):
            if(z in Reserved == False):
                choice = z
                ##Make our new choice the other choice that we didn't previously choose
    if(choice == wdoor):
        Right+=1

def TestNoSwitch():
    global Right
    wdoor = math.floor(random.random() * 3)
    doors = [0,0,0]
    doors[wdoor] = 1
    Ldoors = [0,0]
    i=0


    for x in range(0, 3):
        if(x!=3):
            if(doors[x] != 1):
                Ldoors[i] = x
                i+=1
    choice = math.floor(random.random() * 3)
    if(choice == wdoor):
        Right+=1



for j in range(1, 10000):
    ## TestWithSwitch() and TestNoSwitch() both result in about 1/3. You can test by putting either function in.
    if(j == 9999):
        print(Right/10000)
</code></pre>
<p>I know that switching should return 66% odds, while not should return 33% odds. THe odds I recieve tend to not even add up to 100% , but about two thirds, which is a probabilistic impossibility. </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is here:</p>
<pre><code>if(z in Reserved == False):
</code></pre>
<p>This is evaluated as a <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">chained comparison</a> and will always result as false.</p>
<pre><code>if(z in Reserved and Reserved == False):
</code></pre>
<p>Use parenthesis to create the right operator order:</p>
<pre><code>if((z in Reserved) == False):
</code></pre>
<p>Or better use the explicit "not in" operator:</p>
<pre><code>if(z not in Reserved):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well for one thing,</p>
<pre><code>for x in range(0, 3):
    if(x!=3):          # redundant: x will never be 3
</code></pre>
<p>For another, collecting function results via a global variable is kind of evil.</p>
<p>Here's how I would do it:</p>
<pre><code>from random import choice

DOORS = "ABC"

def pick():
    """
    Return a door at random
    """
    return choice(DOORS)

def always_switch():
    """
    Monty Hall strategy - when offered a choice, always switch
    """
    guess = pick()
    actual = pick()
    return not guess == actual

def never_switch():
    """
    Monty Hall strategy - when offered a choice, never switch
    """
    guess = pick()
    actual = pick()
    return guess == actual

def test(fn, tries):
    """
    Return the fraction of calls to fn which return True
    """
    return sum(1 for _ in range(tries) if fn()) / tries

def main():
    """
    Simulate the Monty Hall problem
    """
    tries = 10000

    pct = 100. * test(always_switch, tries)
    print("Test (always switch): %0.1f %%" % (pct,))

    pct = 100. * test(never_switch, tries)
    print("Test (never switch): %0.1f %%" % (pct,))

if __name__ == "__main__":
    main()
</code></pre>
<p>which produces output like</p>
<pre><code>Test (always switch): 66.3 %
Test (never switch): 32.7 %
</code></pre>
<p>Note: you could speed it up by arbitrarily replacing <code>guess = pick()</code> with <code>guess = "A"</code> (without loss of generality).</p>
</div>
<span class="comment-copy">Your indentation of <code>TestWithSwitch</code> is broken. Also, you've made it <i>way</i> more complicated than it needs to be.</span>
<span class="comment-copy">For those who are wondering, I used the function <code>math.floor(random.random()*3))</code> because I did not know of random's randint function</span>
<span class="comment-copy">@HughBothwell  I fixed my indentation. Do you know why it is returning equal odds? I know it is way more complicated than necessary, that's just how I did it.</span>
<span class="comment-copy">The indentation is still not correct</span>
<span class="comment-copy">@DavidZ there. I guess it didn't save.</span>
<span class="comment-copy">Although then you get 1.66 for <code>TestWithSwitch</code>.</span>
<span class="comment-copy">NineBerry, I was using an old version of the OP code which had an indent error. With the latest code from the question, the edit you suggest does result in the right answer. +1</span>
<span class="comment-copy">This answer helped me out more, but I chose The other answer as the correct one as it helped debug.</span>
