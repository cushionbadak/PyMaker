<div class="post-text" itemprop="text">
<p>MyData.txt is a tab delimited file. It has 3 lines that look like this.</p>
<p>Adam    124 145</p>
<p>Beth    121 206</p>
<p>Andy    049 294</p>
<p>In the code below, I understand why the second for loop works (where i'm looping through "data"). I'm trying to understand why the first for loop part doesn't work. What does it mean to loop though "myfile" and why won't it print any values.</p>
<pre><code>myfile = open("MyData.txt", "r")
data = myfile.readlines()

# This part doesn't work
for line in myfile:
    print(line)

# This part does!
for line in data:
    print(line)

myfile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are numerous ways to read the content of a file and this answer could be infinite. The file objects have built in methods you can use. See this for instance: <a href="https://docs.python.org/3.6/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">https://docs.python.org/3.6/tutorial/inputoutput.html#methods-of-file-objects</a></p>
<blockquote>
<p>read()</p>
</blockquote>
<p>method that reads all the content to one string </p>
<hr/>
<blockquote>
<p>readlines()</p>
</blockquote>
<p>method that reads all lines to a list (you are now at the end of the file)</p>
<hr/>
<blockquote>
<p>readline() </p>
</blockquote>
<p>method that reads one line (you are now on next row)</p>
<hr/>
<blockquote>
<p>for row in file: ...</p>
</blockquote>
<p>For loop (iterator) over the file. This will read it line by line See: <a href="https://stackoverflow.com/questions/8009882/how-to-read-large-file-line-by-line-in-python">How to read large file, line by line in python</a> for instance.</p>
<hr/>
<p><strong>So why not one way?</strong> Simply because there are tons of ways to read and write the data. Depending on the situation you will most likely want to use a different approach. </p>
<p>My personal favourite for smaller files is using .read() like this:</p>
<pre><code>data = '''\
Adam 124 145
Beth 121 206
Andy 049 294'''

# Let's recreate the file
with open('MyData.txt','w') as f:
    f.write(data)

# Open file with 'with' to ensure it is closed
# Read the whole content and split it with '\n' linbreak
# Use a list comprehension

with open('MyData.txt','r') as f:
    data = [i.split(' ') for i in f.read().split('\n')] # Change ' ' to '\t' for tab
</code></pre>
<p>data variable is now:</p>
<pre><code>[['Adam', '124', '145'], ['Beth', '121', '206'], ['Andy', '049', '294']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With</p>
<pre><code>myfile = open("MyData.txt", "r")
</code></pre>
<p>you open a file handle, and</p>
<pre><code>data = myfile.readlines()
</code></pre>
<p>reads all of the files content, meaning until the end of the file is reached.</p>
<p>Since after this, you reached the end of the file, there is nothing left to read from <code>myfile</code> in your first for loop, while you can iterate through the already read <code>data</code> as often as you like.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Whenever you use readlines or iterate over a file pointer , the position will be changed!</strong></p>
<p>When you call <strong>myfile.readlines()</strong> , the position is changed to the end and thus when you iterate , there is no output , use <strong>myfile.tell()</strong> to find the position of your file pointer!</p>
<pre><code>fp = open("Data.txt" , "r")
data = fp.readlines()
pos = fp.tell()

print("Position of File Pointer:: {}".format(pos))
</code></pre>
<h1>Solution</h1>
<p>You need to open the file twice. you can also use <strong>with</strong> </p>
</div>
<span class="comment-copy">Try to remove the <code>data = ..</code> line and see what happens.</span>
<span class="comment-copy"><code>readlines</code> consumes the buffer. <code>data</code> is a <code>list</code> so it's a copy of the contents. voil√†</span>
<span class="comment-copy">@AntonvBR omg, that actually works! So what's the difference between using readlines() and just using looping through "myfile" here!</span>
<span class="comment-copy">@NumberCruncher Well what you have is an iterable. You can read it (scan through start to end) to memory with the readlines() function or just loop over it. Depends what you want to do. One more thing: In Python you can use the <code>with open(....)</code> statement to open files which will make sure they are closed. Look it up!</span>
<span class="comment-copy">use <code>file.tell()</code> where in the file you are. using <code>readlines()</code> will place you at the end so there is no more data to read.use <code>myfile.seek(0)</code> to position yourself at the start of the file again. its simple stream stuff. see <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">methods-of-file-objects</a></span>
