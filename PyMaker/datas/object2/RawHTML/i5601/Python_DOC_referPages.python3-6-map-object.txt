<div class="post-text" itemprop="text">
<p>What is the difference between the following two code snippets:</p>
<pre><code>a1 = map(int,'222211112211')
</code></pre>
<p>and</p>
<pre><code>a2 = int('222211112211')
</code></pre>
<p>Why can I iterate over <code>a1</code> which is type <code>int</code>? </p>
<p>For example: I can do something like this with <code>a1</code>:</p>
<pre><code>for i in a1:
    print(i)
</code></pre>
<p>But not with <code>a2</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>a1</code>, you're iterating over a <code>string</code> and converting each of its characters into an <code>int</code>, the result is an iterator of <code>int</code>s, check the documentation for <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>list(a1) # use `list()` to consume the iterator
=&gt; [2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1]
</code></pre>
<p>In <code>a2</code>, you're converting a <code>string</code> into an <code>int</code>, the result is an <code>int</code>. They're very different things!</p>
<pre><code>a2
=&gt; 222211112211
</code></pre>
<p>That's why you can iterate over <code>a1</code>, because it's an iterator, not an <code>int</code>. And that's why you can't iterate over <code>a2</code>, it's just an <code>int</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the best thing to do in situations like these is to check the actual values in the REPL.</p>
<pre><code>&gt;&gt;&gt; a1 = map(int, '2212')
&gt;&gt;&gt; a1
&lt;map object at 0x7f0036c2a4a8&gt;
&gt;&gt;&gt; list(a1)
[2, 2, 1, 2]
&gt;&gt;&gt; a2 = int('2212')
&gt;&gt;&gt; a2
2212
</code></pre>
<p>So <code>a1</code> is a special map object which turns out to be iterable. It stores each character of <code>'2212'</code>, individually converted to an integer. Meanwhile, <code>a2</code> simply converts the whole string to a simple integer. It would be an error to iterate over <code>a2</code>, but it would also be an error to do integer arithmetic on <code>a1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>in python 3.6 ,the map function returns a generator , </p>
<p>Note:these are are not loaded into the memory as a whole </p>
<p>This is the implementation of map in python3</p>
<pre><code>def map(func, iterable):
    for i in iterable:
        yield func(i)
</code></pre>
<p>when u call the map as <code>iterable</code> the value is produced onspot as opposed to loading the entire thing, which could crash the memory in some cases.</p>
<p><code>list(map())</code> does is load the entire list into the memory which is what python2 versions of map does</p>
<pre><code>`a=int('2212')` 
</code></pre>
<p>gives <code>a</code> an integer value thats it its not an iterable </p>
<pre><code>a=map(int,'2212')
</code></pre>
<p>returns an iterable generator object </p>
<pre><code>&lt;map object at 0x7f97e30d7f98&gt;
</code></pre>
<p>it is an iterable  which converts each character in the string to int and yields the result one by one </p>
<p>so </p>
<pre><code>a=map(int ,'2212')
for i in a:
   print(i)
for i in a:
   print(i)
</code></pre>
<p>would print</p>
<pre><code>2
2
1
2
</code></pre>
<p>calling the stored <code>map</code> object second time yields no result as the function has run out of values in the first run </p>
<p>if you want to get the values in the second run convert it to a list so that it resides in the main memory <code>list(a)</code>  or if it is really long store the result of the map object in a separate file and read from there   </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <code>map</code> return an iterator that you can use in a for loop. </p>
<p><code>map</code> takes at least two parameters, a function and an iterable argument. Here <code>int</code> is the function and <code>'222211112211'</code>, a string, is the iterable object. <code>map</code> applies the function to each value of the iterable. Here, <code>int</code> will be applied to "2", "2", "2", ... "2", "1", "1" individually and make them all to be integers. <code>map</code> will return an iterator that allows you to loop over the results yielding from the previous step: (2, 2, 2, ..., 1, 1)</p>
<p>For  <code>a2</code>,  you are creating an integer out of the <code>int</code> function, and an integer is not iterable. Thus, you cannot loop of it.</p>
<p>Below is the description of <code>map</code> cited from Python 3 documentation.</p>
<blockquote>
<p>map(function, iterable, ...)
   : Return an iterator that applies function to every item of iterable, yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see itertools.starmap().</p>
</blockquote>
<p>One thing worth noting is that in Python 2, <code>map</code> returns a list rather than an iterator. In Python 3, you have to explicitly make it a list like <code>list(map(int, "222"))</code>. </p>
</div>
<span class="comment-copy">So is it possible to iterate over a1 twice in single python program? What I mean by that is  <code>a = map(int,'12')</code> <code>for i in a:</code> <code>print(i)</code> <code>for i in a:</code> <code>print(i)</code> The above code should produce the following output: 1 2 1 2 But it is printing only 12 single time??</span>
<span class="comment-copy">An iterator can be consumed only once, if you need to traverse it multiple times then create a list, as shown above.</span>
<span class="comment-copy">So is it possible to iterate over a1 twice in single python program? What I mean by that is  <code>a = map(int,'12')</code> <code>for i in a:</code> <code>print(i)</code> <code>for i in a:</code> <code>print(i)</code> The above code should produce the following output: 1 2 1 2 But it is printing only 12 single time??</span>
<span class="comment-copy">@Rohan. Map is a generator that only runs once</span>
<span class="comment-copy">You can either use <code>tee</code> (from the <code>itertools</code> module) or simply convert the iterator to a list with <code>list</code>. Be careful with both of these solutions, however, as they both can be fairly space-intensive if not used carefully.</span>
<span class="comment-copy">So is it possible to iterate over a1 twice in single python program? What I mean by that is  <code>a = map(int,'12')</code> <code>for i in a:</code> <code>print(i)</code> <code>for i in a:</code> <code>print(i)</code> The above code should produce the following output: 1 2 1 2 But it is printing only 12 single time??</span>
<span class="comment-copy">@ No you cannot ,thats what the implementation means it only yields the value once</span>
<span class="comment-copy">Now that make sense.</span>
<span class="comment-copy">So is it possible to iterate over a1 twice in single python program? What I mean by that is  <code>a = map(int,'12')</code> <code>for i in a:</code> <code>print(i)</code> <code>for i in a:</code> <code>print(i)</code> The above code should produce the following output: 1 2 1 2 But it is printing only 12 single time??</span>
<span class="comment-copy">No you cannot do it twice. It will be depleted the first time you used it. You can try it now!!</span>
<span class="comment-copy">That make sense. I understand now why I was getting wrong in one codforces problem.</span>
<span class="comment-copy">If you want to loop over it twice, you can make it a list. list(map(int, "22222")) or recreate it when you need it.</span>
