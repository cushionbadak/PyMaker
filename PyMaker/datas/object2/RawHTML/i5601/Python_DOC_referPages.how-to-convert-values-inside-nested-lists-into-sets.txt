<div class="post-text" itemprop="text">
<p>I was wondering if anyone has any ideas of how to convert the values contained in nested lists, so you end up with a list of a list of sets? 
e.g I have:</p>
<pre><code>[[0, 1, 2, 3, 4, 0, 6, 7, 8], [1, 4, 5, ...], ...]
</code></pre>
<p>I am trying to convert this so the <code>0</code> is <code>{0}</code>, <code>1</code> is <code>{1}</code>. i.e.:</p>
<pre><code>[[{0}, {1}, {2}, {3}, {4}, {0}, {6}, {7}, {8}], [{1}, {4}, {5}, ...], ...]
</code></pre>
<p>I currently have:</p>
<pre><code>def ToSets(list):
    for i in range(0,9): #row
        for j in list[i]:
            list[i][j] = set(list[i][j])
   print(list)
</code></pre>
<p>I keep getting this error:</p>
<pre><code>TypeError: 'int' object is not iterable
</code></pre>
<p>Does anyone know how I can fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>set()</code> takes the values from <em>an iterable</em> and adds each value separately. You passed in an <code>int</code>, which is not iterable at all.</p>
<p>You would have to wrap your individual values in an iterable, like a list:</p>
<pre><code>list[i][j] = set([list[i][j]])
</code></pre>
<p>A much easier option would be to use the <code>{...}</code> set literal notation:</p>
<pre><code>list[i][j] = {list[i][j]}
</code></pre>
<p>If the list doesn't need updating <em>in place</em>, you can also use a <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow noreferrer">nested list comprehension</a> to create a new list-of-lists-of-sets structure:</p>
<pre><code>def to_sets(l):
    return [[{i} for i in row] for row in l]
</code></pre>
<p>If you must update in place, at least just iterate over the outer rows, and use <code>enumerate()</code> to generate the indices for the inner columns:</p>
<pre><code>def to_sets_inplace(l):
    for row in l:
        for i, value in enumerate(row):
            row[i] = {value}
</code></pre>
<p>If you have other references to the original list of lists, stick with with setting the values directly, otherwise use the list comprehensions. Both work:</p>
<pre><code>&gt;&gt;&gt; def to_sets(l):
...     return [[{i} for i in row] for row in l]
...
&gt;&gt;&gt; demo = [[0, 1, 2, 3, 4, 0, 6, 7, 8], [1, 4, 5]]
&gt;&gt;&gt; def to_sets_inplace(l):
...     for row in l:
...         for i, value in enumerate(row):
...             row[i] = {value}
...
&gt;&gt;&gt; to_sets(demo)
[[{0}, {1}, {2}, {3}, {4}, {0}, {6}, {7}, {8}], [{1}, {4}, {5}]]
&gt;&gt;&gt; to_sets_inplace(demo)
&gt;&gt;&gt; demo
[[{0}, {1}, {2}, {3}, {4}, {0}, {6}, {7}, {8}], [{1}, {4}, {5}]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pass each element in <code>{}</code> to create a set, otherwise you have to pass <code>set()</code> an iterable sequence, which a single integer is not.</p>
<pre><code>&gt;&gt;&gt; data = [[1,2,3],[4,5,6]]
&gt;&gt;&gt; [[{j} for j in i] for i in data]
[[{1}, {2}, {3}], [{4}, {5}, {6}]]
</code></pre>
</div>
<span class="comment-copy">What sense does it make to convert each element into a singleton set?</span>
<span class="comment-copy">You can achieve it by: <code>[[{y} for y in x] for x in my_list]</code>. But why do you want that?</span>
<span class="comment-copy">Your question title is misleading. You are not converting the nested lists. You are replacing the <i>values</i> in the nested list with single-value sets.</span>
<span class="comment-copy">Question: you currently attempt to update the lists <i>in place</i>, so other references to the list will see the changes. How important is this? Is it okay to create a <i>new</i> list of lists of sets instead?</span>
<span class="comment-copy">I would like to use this method, but when I try your suggestion (list[i][j] = {list[i][j]}) I'm getting a "unhasable type: set" error.</span>
<span class="comment-copy">@user9080591 probably some of your elements are already updated to set value with the execution of your previous code. Please create a new list and pass to the function, it should work</span>
<span class="comment-copy">@user9080591: that means your <i>real</i> data already has some sets, you can't put a <code>set()</code> object inside another set.</span>
<span class="comment-copy">@user9080591: check your data. You have three options: 1. try again with a clean dataset that has no sets in them. 2. skip the set objects (you could use a <code>try...except</code> or use <code>isinstance()</code> to test for the object type) and 3. convert sets to <code>frozenset()</code> objects before wrapping them in a set.</span>
<span class="comment-copy">I just have a list of lists - no sets in them at all. Moinuddin, your first way works fine, but I want to do it using two 'for' statements so I can change the set 0 to another set. I can't see if there is a way for doing this using your simpler method?</span>
<span class="comment-copy">Note that the OP updates the list <b>in place</b>, while you produce a new list. This is a crucial differences that you need to make explicit.</span>
