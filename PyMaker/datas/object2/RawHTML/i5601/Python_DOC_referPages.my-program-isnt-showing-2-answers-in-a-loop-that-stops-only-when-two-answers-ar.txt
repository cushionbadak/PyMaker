<div class="post-text" itemprop="text">
<p>I am trying to build a BlackJack game. </p>
<p>The program starts, and uses the random module to generate 2 different numbers which tells you which card you have. </p>
<ul>
<li>Number 1 is the value, e.g. 8</li>
<li>Number 2 is the suit, e.g. 4 = Spades</li>
</ul>
<p>The program gives me 2 cards sometimes, and the other half the time it gives me one card. </p>
<p><strong>Question:</strong> Why is this program not working as desired?</p>
<pre><code>types = [" of Spades", " of Diamonds", " of Clubs", " of Hearts"]
special = ["King", "Queen", "Jack", "Ace"] 
tries = 0

import random
import time

print("Welcome to BlackJack.")
time.sleep(1)

print("Let's Begin.")
time.sleep(1)

while tries &lt; 1:
    cardnumber1 = random.randint(2, 13)
    random.shuffle(types)
    random.shuffle(special)
    cardnumber2 = random.randint(2, 13)
    random.shuffle(special)
    random.shuffle(types)
    cardnumber3 = random.randint(2, 9)
    random.shuffle(special)
    random.shuffle(types)
    cardnumber4 = random.randint(2, 9)
    random.shuffle(special)
    random.shuffle(types)
    cardtype1 = random.choice(types)
    random.shuffle(special)
    random.shuffle(types)
    cardtype2 = random.choice(types)
    random.shuffle(special)
    random.shuffle(types)
    cardtype3 = random.choice(types)
    random.shuffle(special)
    random.shuffle(types)
    cardtype4 = random.choice(types)
    random.shuffle(special)
    random.shuffle(types)
    cardspecial = random.choice(special)
    random.shuffle(special)
    random.shuffle(types)
    cardspecial2 = random.choice(special)
    random.shuffle(special)
    random.shuffle(types)

    if cardnumber1 &gt; 10:
        print(str(cardnumber3) + cardtype1)
        tries = tries + 1
    if cardnumber2 &gt; 10:
        print(str(cardnumber4) + cardtype2)
        tries = tries + 1
    if cardnumber1 &lt; 9:
        print(cardspecial + cardtype3)
        tries = tries + 1
    if cardnumber2 &lt; 9:
        print(cardspecial2 + cardtype4)
        tries = tries + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is your <code>if</code>-statements.
If any card is a 9 or a 10, while the other card is not, then you will end up with only a single card.
The reason for this is because a 9 or a 10 is not handled by any of your <code>if</code>-statements, but are excluded. Since the <code>while</code>-loop ends if any <code>if</code>-statement has been True, you end up with a single card.</p>
<p>So, to follow your coding closely, I think it should be the following:</p>
<pre><code>if cardnumber1 &gt;= 10:
    print(str(cardnumber3) + cardtype1)
    tries = tries + 1
if cardnumber2 &gt;= 10:
    print(str(cardnumber4) + cardtype2)
    tries = tries + 1
if cardnumber1 &lt;= 9:
    print(cardspecial + cardtype3)
    tries = tries + 1
if cardnumber2 &lt;= 9:
    print(cardspecial2 + cardtype4)
    tries = tries + 1
</code></pre>
<p>EDIT: However, on how to improve the coding in itself, Patrick Artner's answer is very useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could declare your lists fully: </p>
<pre><code>types = [" of Spades", " of Diamonds", " of Clubs", " of Hearts"]
cards = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"] 
</code></pre>
<p>And create a full deck of them:</p>
<pre><code>deck =  [ (card, typ) for card in cards for typ in types] # create tuples
print (deck)
</code></pre>
<p>To draw a card:</p>
<pre><code>card = random.choice(deck) # will return a tuple for 1 card, 1st value is face, 2nd is typ

deck.remove(card)  # remove the card from the deck so you dont draw it again

face,typ = card # deconstruct tuple

print(face)
print(typ)
</code></pre>
<p>Outputs:</p>
<pre><code> [('2', ' of Spades'), ('2', ' of Diamonds'), ('2', ' of Clubs'), ('2', ' of Hearts'),
  ('3', ' of Spades'), ('3', ' of Diamonds'), ('3', ' of Clubs'), ('3', ' of Hearts'), 
  ('4', ' of Spades'), ('4', ' of Diamonds'), ('4', ' of Clubs'), ('4', ' of Hearts'), 
  ('5', ' of Spades'), ('5', ' of Diamonds'), ('5', ' of Clubs'), ('5', ' of Hearts'),
  ('6', ' of Spades'), ('6', ' of Diamonds'), ('6', ' of Clubs'), ('6', ' of Hearts'),
  ('7', ' of Spades'), ('7', ' of Diamonds'), ('7', ' of Clubs'), ('7', ' of Hearts'),
  ('8', ' of Spades'), ('8', ' of Diamonds'), ('8', ' of Clubs'), ('8', ' of Hearts'), 
  ('9', ' of Spades'), ('9', ' of Diamonds'), ('9', ' of Clubs'), ('9', ' of Hearts'),
  ('10', ' of Spades'), ('10', ' of Diamonds'), ('10', ' of Clubs'), ('10', ' of Hearts'), 
  ('Jack', ' of Spades'), ('Jack', ' of Diamonds'), ('Jack', ' of Clubs'), ('Jack', ' of Hearts'),
  ('Queen', ' of Spades'), ('Queen', ' of Diamonds'), ('Queen', ' of Clubs'), ('Queen', ' of Hearts'), 
  ('King', ' of Spades'), ('King', ' of Diamonds'), ('King', ' of Clubs'), ('King', ' of Hearts'),
  ('Ace', ' of Spades'), ('Ace', ' of Diamonds'), ('Ace', ' of Clubs'), ('Ace', ' of Hearts')]


10
 of Diamonds
</code></pre>
<hr/>
<pre><code>deck = [ (card, typ) for card in cards for typ in types] 
</code></pre>
<p>is called a list comprehension. It is a way to construct lists from stuff - i.e. ranges, other lists, iterators, ...</p>
<p>Basic syntax : </p>
<ul>
<li><code>newList = [ str(x) for x in range(0,10)]</code> will use the inbuilt range(0,10) which creates numbers from 0 to 9 and makes them a string and built a list from it - Link to doku:  <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></li>
</ul>
<p>I build tuples <code>(card, typ)</code> for each element in <code>cards</code> (your list) and <code>types</code> your other list).</p>
<pre><code>[ (card, typ) for card in cards for typ in types] 
# equivalent to
deck = [] # empty list
for card in cards:
    for typ in types:
        deck.append( (card,typ) ) # create tuples and add to list
</code></pre>
<p>You could use this deck and shuffle() it once, and then deck.pop() cards from it (faster, only one shuffling needed) or draw a random card every time random.choice(deck) and then remove it from the deck.</p>
<p>See <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">Lists</a> for methods on a list.</p>
<p>See <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">buildins</a> - you find the <code>range()</code> in that list and can get more infos.</p>
</div>
<span class="comment-copy">You need to fix the indentation. Re-copy your code in, highlight all of it, and hit the code <code>{}</code> button.</span>
<span class="comment-copy">Try that, i've never used stackoverflow before, sorry.</span>
<span class="comment-copy"><code>random.choice()</code> doesn't rely on the order of the cards, so <i>all</i> of the <code>random.shuffle()</code>s you don't make it any more random. It's like shuffling the deck twice instead of once. If you did a proper shuffle, it doesn't matter.</span>
<span class="comment-copy">I'll remove those, but if you run the code enough it gives you one card instead of 2. I don't understand what's happening.</span>
<span class="comment-copy">What happens if cardnumber1 or cardnumber2 is equal to 9 or 10?</span>
<span class="comment-copy">Thanks alot! I thought that was the problem at first but my mind has trouble comprehending the fact that when something is greater than something, it isn't actually it.</span>
<span class="comment-copy">No problem, that is why we are here.</span>
<span class="comment-copy">Oh that's really cool! I didn't know you could do that. Can you explain what the deck =  [ (card, typ) for card in cards for typ in types] is?</span>
<span class="comment-copy">@JonahBrunson Put some links and basic explanation in. List comprehension are fun, you can f.e. do stuff like <code>squared = [x*x for x in range(-10,11,2)]</code> ==&gt; [100, 64, 36, 16, 4, 0, 4, 16, 36, 64, 100] - the range() thingy is something to study as well.</span>
