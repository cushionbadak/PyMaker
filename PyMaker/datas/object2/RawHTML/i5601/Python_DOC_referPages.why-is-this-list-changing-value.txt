<div class="post-text" itemprop="text">
<p>I have a <code>list</code> called <code>ones</code> that changes value after a block of code that shouldn't affect it. Why?</p>
<pre><code>s = 3

ones = []
terms = []
for i in range (0, s):
    ones.append(1)
terms.append(ones)
print(terms)

twos = []
if len(ones) &gt; 1:
    twos.append(ones)
    twos[-1].pop()
    twos[-1][-1] = 2
    print(twos)

print(terms)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>[[1, 1, 1]]  # terms
[[1, 1, 2]]  # twos
[1, 1, 2]    # terms
</code></pre>
<p>For context, I'm trying to use this to begin to solve the problem on page 5 of this British Informatics Olympiad past exam: <a href="http://www.olympiad.org.uk/papers/2009/bio/bio09-exam.pdf" rel="nofollow noreferrer">http://www.olympiad.org.uk/papers/2009/bio/bio09-exam.pdf</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here:</p>
<pre><code>twos.append(ones)
</code></pre>
<p>You are appending a <strong>reference</strong> to <code>ones</code>, not its values. See the difference:</p>
<pre><code>In [1]: l1 = [1, 2, 3]

In [2]: l2 = []

In [3]: l2.append(l1)

In [4]: l2, l1
Out[4]: ([[1, 2, 3]], [1, 2, 3])

In [5]: l2[0][1] = 'test'

In [6]: l2, l1
Out[6]: ([[1, 'test', 3]], [1, 'test', 3])
</code></pre>
<p>In order to avoid this you can give a copy by using <code>[:]</code> operator:</p>
<pre><code>In [7]: l1 = [1, 2, 3]

In [8]: l2 = []

In [9]: l2.append(l1[:])

In [10]: l2, l1
Out[10]: ([[1, 2, 3]], [1, 2, 3])

In [11]: l2[0][1] = 'test'

In [12]: l2, l1
Out[12]: ([[1, 'test', 3]], [1, 2, 3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>twos.append(ones)</code> does not copy <code>ones</code>.</p>
<p>There is only ever one list <code>ones</code> in memory, which also goes by the following references: </p>
<ol>
<li><code>terms[0]</code></li>
<li><code>twos[0]</code></li>
</ol>
<p>and also <code>terms[-1]</code> and <code>twos[-1]</code> because <code>terms</code> and <code>twos</code> only have one element each, so the first is the last.</p>
<p>Now, when you <em>mutate</em> <code>ones</code>/<code>terms[0]</code>/<code>terms[-1]</code>/<code>twos[0]</code>/<code>twos[-1]</code> you are mutating the same list in memory.</p>
<p>I highly recommend watching <a href="https://www.youtube.com/watch?v=_AEJHKGk9ns" rel="nofollow noreferrer">Facts and Myths about Python names and values</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do <code>twos.append(ones)</code>, you're passing the reference to the ones list, not the value itself. Therefore, when you do <code>twos[-1][-1] = 2</code>, it'll modify the value in the ones list itself, not a copy in the twos list.</p>
<p>To pass the value instead of the reference to the ones list, you can do:</p>
<pre><code>twos.append(ones[:])
</code></pre>
</div>
<span class="comment-copy">Both <code>terms.append(ones)</code> and <code>twos.append(ones)</code> append references to the list held in <code>ones</code>, <code>twos[-1][-1] = 2</code> mutates that list.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly" title="list of lists changes reflected across sublists unexpectedly">stackoverflow.com/questions/240178/â€¦</a>, <a href="https://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list" title="how to clone or copy a list">stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list</a></span>
<span class="comment-copy">@khelwood Thank you for the reply. <code>terms</code> contains <code>ones</code> once, as far as I can see. What am I missing?</span>
<span class="comment-copy">It is wrong. For that you'd use <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer"><code>list.extend()</code></a>.</span>
<span class="comment-copy">It seems, you use Python 2. I recommend to use Python 3, if you just started.</span>
<span class="comment-copy">I can't upvote you yet, but thank you - and I will watch the video.</span>
<span class="comment-copy">Ah right, thank you. Now how do I pass on the value of <code>ones</code> rather than a reference?</span>
<span class="comment-copy">Try doing <code>twos = ones[:]</code></span>
<span class="comment-copy">Thank you! I tried <code>twos.append(ones[:])</code> and that seemed to work.</span>
