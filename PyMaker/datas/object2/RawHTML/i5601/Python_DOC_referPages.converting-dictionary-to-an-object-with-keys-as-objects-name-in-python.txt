<div class="post-text" itemprop="text">
<p>I have a dictionary like this:</p>
<pre><code>d = {'item1': ('Hi', (150, 495)), 'item2': ('Hola', (590, 40))}
</code></pre>
<p>I want to convert it to object, recursively if possible. I have a class:</p>
<pre><code>class Item:
    def __init__(self,thetuple):
    self.greeting=thetuple[0]
    self.coordinate=thetuple[1]
</code></pre>
<p>So what I want is, there should be an object, for instance item1, and item1.greeting is "Hi", item1.coordinate is (150,495) etc.</p>
<p>I'm open to all kinds of solutions, improvements, ideas. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a>.</p>
<p>So do something like this:</p>
<pre><code>import collections

Item = collections.namedtuple('Item', ('greeting', 'coordinate'))

d = {'item1': ('Hi', (150, 495)), 'item2': ('Hola', (590, 40))}

new_d = {k: Item(*v) for k, v in d.items()}

# Now you can do

new_d['item1'].greeting == 'Hi'

new_d['item2'].coordinate == (590, 40)
</code></pre>
</div>
<span class="comment-copy"><i>recursively</i>? There is nothing recursive in the data... Recursion should be used for things that have an inductive nature.</span>
<span class="comment-copy">This is a simple iteration through the dictionary, forming an object from each dictionary entry.  Where are you stuck?</span>
<span class="comment-copy">@WillemVanOnsem  Professor asked us to take this dictionary and turn each key to an object in a function,with recursion. If I understood you correctly, the answer is there is no recursion in the data because I couldn't implement it.</span>
<span class="comment-copy">@Prune I'm exactly stuck at that part, I try iteration but I must be doing something wrong.</span>
