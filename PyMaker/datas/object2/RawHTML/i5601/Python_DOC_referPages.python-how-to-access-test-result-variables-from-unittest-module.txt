<div class="post-text" itemprop="text">
<p>For a specific program I'm working in, we need to evaluate some code, then run a <em>unittest</em>, and then depending on whether or not the test failed, do A or B.</p>
<p>But the usual <strong>self.assertEqual(...)</strong> seems to display the results (fail, errors, success) instead of saving them somewhere, so I can't access that result.
I have been checking the modules of unittest for days but I can't figure out where does the magic happen or if there is somewhere a variable I can call to know the result of the test without having to read the screen (making the program read and try to find the words "error" or "failed" doesn't sound like a good solution).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use pdb to debug this issue, in the test simply add these two lines to halt execution and begin debugging.</p>
<p><code>import pdb
 pdb.settrace()</code></p>
<p>Now for good testing practice you want deterministic test results, a test that fails only sometimes is not a good test. I recommend mocking the random function and using data sets that capture the errors you find.</p>
</div>
<div class="post-text" itemprop="text">
<p>After some days of researching, I sent an email to <em>help@python.org</em> and got the perfect solution for my issue.
The answer I got was:</p>
<blockquote>
<p>I suspect that the reason that you're having trouble getting unittest
  to do that is that that's not the sort of thing that unittest was
  written to do. A hint that that's the case seems to me to be that over
  at the documentation:</p>
<p><a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.html</a></p>
<p>there's a section on the command-line interface but nothing much about
  using the module as an imported module.</p>
<p>A bit of Googling yields this recipe:</p>
<p><a href="http://code.activestate.com/recipes/578866-python-unittest-obtain-the-results-of-all-the-test/" rel="nofollow noreferrer">http://code.activestate.com/recipes/578866-python-unittest-obtain-the-results-of-all-the-test/</a></p>
<p>Which looks as though it might be useful to you but I can't vouch for
  it and it seems to involve replacing one of the library's files.
  (Replacing one of the library's files is perfectly reasonable in my
  opinion. The point of Python's being open-source is that you can hack
  it for yourself.)</p>
<p>But if I were doing what you're describing, I'd probably write my own
  testing code. You could steal what you found useful from unittest
  (kind of the inverse of changing the library in place). Or you might
  find that your needs are sufficiently simple that a simple file of
  testing code was sufficient.</p>
<p>If none of that points to a solution, let us know what you get and
  I'll try to think some more.</p>
<p>Regards, Matt</p>
</blockquote>
<p>After changing my <strong>result.py</strong> module from unittest, I'm able to access the value of the test (True, False, or Error).</p>
<p>Thank you very much, Matt.</p>
<p>P.S. I edited my question so it was more clear and didn't have unnecessary code.</p>
</div>
<span class="comment-copy">If I get it right, you are altering AST during unit test, would you like explain a bit why?</span>
<span class="comment-copy">I guess <a href="https://docs.pytest.org/en/latest/writing_plugins.html" rel="nofollow noreferrer">pytest hooks</a> can be useful to this scenario.</span>
<span class="comment-copy">Are you trying to do so-called "fuzzing"?</span>
<span class="comment-copy">I think it's not exactly fuzzing. But as I understand it (random tests to check for stuff), this might be used for fuzzing.  What I'm trying to do is a piece of code which writes a test  of a certain type given a function with its inputs and expected output. But I want my program to generate the tests by trial and error.</span>
<span class="comment-copy">If I'm understanding your answer, you think I have a test which I coded wrong and I want to know where the error is. And it's not. It's a generator of random tests which could be right, wrong, or syntactically incorrect and I want to discard the wrong ones or the syntactically incorrect ones to eventually get to a right test. I'm sorry if I wasn't clear enough, I edited the question.</span>
