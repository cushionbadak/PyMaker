<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15112125/how-to-test-multiple-variables-against-a-value">How to test multiple variables against a value?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to add multiple 'or' clauses to a python if statement using list comprehension. My code is shown below. I would like to keep the list comprehension. In terms of pseudocode, the logic would simply be:</p>
<p>Alive_Beatles = each name that contains '(Beatle)' <strong>and</strong> either ('Paul', 'Yoko' or 'Ringo')</p>
<p>The code only returns Paul and skips Ringo and Yoko.</p>
<pre><code>Names = ["John Lennon (Beatle)",  "Paul McCartney (Beatle)", "Ringo Starr (Beatle)", "Yoko Ono (Beatle)", "Mick Jagger (Rolling Stone)", "Brian Jones (Rolling Stone)", "Alex Jones (na)", "Adam Smith (na)"]
Alive_Beatles = [n for n in Names if ("Beatle" and ("Paul" or "Ringo" or "Yoko")) in n]

print Alive_Beatles
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to test each name explicitly if it's <code>in n</code>:</p>
<pre><code>[n for n in Names if ("Beatle" in n and ("Paul" in n or "Ringo" in n or "Yoko" in n))]
</code></pre>
<p>Otherwise the <code>and</code> and <code>or</code> use the truth value of you search strings (and each non-empty string is always True) and finally tests if <code>Paul in n</code> (the first truth value of the <code>or</code>s).</p>
<p>The <a href="https://docs.python.org/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">documentation</a> explicitly mentions this:</p>
<blockquote>
<h2>4.2. Boolean Operations — and, or, not</h2>
<p>These are the Boolean operations, ordered by ascending priority:</p>
<pre><code>Operation     Result                                Notes
x or y        if x is false, then y, else x         (1)
x and y       if x is false, then x, else y         (2)
not x         if x is false, then True, else False  (3)
</code></pre>
<h3>Notes:</h3>
<p>(1) This is a short-circuit operator, so it only evaluates the second argument if the first one is false.</p>
<p>(2) This is a short-circuit operator, so it only evaluates the second argument if the first one is true.</p>
<p>(3) not has a lower priority than non-Boolean operators, so not a == b is interpreted as not (a == b), and a == not b is a syntax error.</p>
</blockquote>
<p>So <code>"Beatle" and (...)</code> evaluates according to (2) to the second argument because <code>"Beatle"</code> is truthy and according to (1) it evaluates to the first argument of the chained <code>or</code>s: <code>"Paul"</code> because it's also truthy.</p>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't do what you expect because the expression </p>
<pre><code>("Paul" or "Ringo" or "Yoko")
</code></pre>
<p>evaluates to <code>"Paul"</code>. Type it in at an interpreter prompt to confirm this.</p>
<p>And even that only seems to work because</p>
<pre><code>("Beatle" and ("Paul" or "Ringo" or "Yoko")) 
</code></pre>
<p>also evaluates to <code>"Paul"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The most straightforward solution is to just list </p>
<pre><code>[n for n in Names if "Beatle" in n and ("Paul" in n or "Ringo" in n or "Yoko" in n)]
</code></pre>
<p>But you could use <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> to get a bit closer to what you tried initially:</p>
<pre><code>[n for n in Names if "Beatle" in n and any(x in n for x in ("Paul", "Ringo", "Yoko"))]
</code></pre>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/15112125/how-do-i-test-multiple-variables-against-a-value" title="how do i test multiple variables against a value">stackoverflow.com/questions/15112125/…</a></span>
<span class="comment-copy">Closed as dupe, reopened because of the second question, wish I had not reopened. Need coffee.</span>
<span class="comment-copy">@timgeb Cheers, go get your coffee.</span>
<span class="comment-copy">The title of this question is very misleading, esp. given that it was closed in favor of something non-list-comprehension-related. What to do?</span>
<span class="comment-copy">I fixed the title to reflect the actual question. I guess we can leave it closed, although I don't think it's an exact dupe and the answers here are better.</span>
