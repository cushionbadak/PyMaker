<div class="post-text" itemprop="text">
<p>I am attempting to write a script which pulls data from a sqlite3 db and outputs only specific data which is of interest.</p>
<p><strong>I have written a function:</strong></p>
<pre><code>def get_ip(db_file):
    cur = con.cursor()
    cur.execute('select "Computer Name","User", "IP Address1", "IP Address2", "IP Address3", "IP Address4" from SepData')
    ip_data = cur.fetchall()
    cur.close()
    return ip_data
</code></pre>
<p><strong>Which yields:</strong></p>
<pre><code>[('user-PC1', 'upc1', '172.24.49.88', '0.0.0.0', '33.4.1.54', '0.0.0.0'), ('user-pc2', 'upc2', '64.24.49.90', '0.0.0.0', '0.0.0.0', '0.0.0.0'), ('user-pc3', 'upc3', '172.24.49.71', '0.0.0.0', '0.0.0.0', '0.0.0.0'), ('user-pc4', 'upc4', '172.24.89.101', '192.168.3.3', '0.0.0.0', '55.13.0.1'),]
</code></pre>
<p>My intention is to pull global/public IPs and the user affiliated with them and store this data as an ordered list/dict. I believe there may be duplicate entries, so I think the only way to do this is with a list.</p>
<p>If the user shows only private or non route-able IP's, Id like for this data to be ignored. </p>
<p>Initially I attempted to do this within the SQL query but this is only doable as far as I can tell with the REGEXP function which does not come shipped with sqlite3 by default and may cause others to have trouble using the script. I am now attempting this with just python <strong>ipaddress</strong> library. I convert the list of tuples into a list of lists and am trying something like this:</p>
<pre><code>pubips = ()
iplist = get_ip('dbfile')
itr = range(1,4)
for host, user, ipaddr1, ipaddr2, ipaddr3, ipaddr4 in zip(iplist):
    for i in itr:
        if ipaddr+i.is_global():
        pubips.insert(user, ipaddr+i)
</code></pre>
<p>This code obviously doesn't work but gives general idea of what I am trying to accomplish. I am struggling to come up with a clean way of doing this and would appreciate any feedback. Thanks for reading</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do a few things, first I would prepare the data better by selecting only IP addresses.</p>
<pre><code>def get_ip(db_file):
    cur = con.cursor()
    cur.execute('SELECT "IP Address1", "IP Address2", "IP Address3", "IP Address4" FROM SepData')
    query= cur.fetchall()
    cur.close()
    return query
</code></pre>
<p>next you can process the prepared data using a set to ensure uniqueness, and using ipaddress</p>
<pre><code>import itertools
import ipaddress

def unique_global_ips(query):
    ips= itertools.chain.from_iterable(query)
    return set([ip for ip in ips if ipaddress.ip_address(ip).is_global])
</code></pre>
<p>some people try to avoid list comprehensions because they can defeat their own purpose and become unreadable but I think this is an appropriate use.</p>
</div>
<div class="post-text" itemprop="text">
<p>I really appreciate the feedback fellas, but after some unit testing Ive actually created a solution that better answers my problem:</p>
<pre><code>pubips = {}
for row in hostips_lists:
    for ip in row[2:6]:
        if ipaddress.ip_address(unicode(ip)).is_global:
            pubips[row[0]] = ip
</code></pre>
<p>I needed the user - ip relationship to be intact so I created a dict, thanks for steering me in the right direction however.</p>
</div>
<span class="comment-copy">This schema violates the <a href="http://en.wikipedia.org/wiki/Zero_one_infinity_rule" rel="nofollow noreferrer">Zero, One or Infinity Rule</a> of <a href="http://en.wikipedia.org/wiki/Database_normalization" rel="nofollow noreferrer">database normalization</a>. A secondary table with a one-to-many relationship for storing the IP addresses would give you N possible addresses, not this schema arbitrarily limited to four. Those column names are also a total wreck, some have spaces, some don't, there's no consistency at all. Keep your schema as clean as possible, it's important. Spaces in column names tend to be extremely annoying.</span>
<span class="comment-copy">How does <code>is_global()</code> work? Are you sure you're using it correctly?</span>
<span class="comment-copy">is_global to my knowledge will validate ipv4 addresses which are within a public range. The schema is not something with which I have control sadly.</span>
<span class="comment-copy">That's what it does. How does it work? Do you call it on a string? Do you pass in a string? If you're talking about <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer">this library</a> then you'll need to call <code>ip_address</code> first to convert it to the right type of object.</span>
<span class="comment-copy">I understand what youre saying and agree, the code I have written is more or less seudo code. I would have to add something like my_ip = ipaddress.ip_address('ipaddr). I dont claim to be a python expert and understand that what I have written is ugly hence why I am posting here</span>
<span class="comment-copy">This worked for me, very much appreciated.</span>
