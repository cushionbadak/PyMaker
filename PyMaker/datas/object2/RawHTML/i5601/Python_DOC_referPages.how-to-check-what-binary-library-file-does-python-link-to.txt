<div class="post-text" itemprop="text">
<p>Some time ago, I <a href="http://dynet.readthedocs.io/en/latest/python.html" rel="nofollow noreferrer">installed dynet for Python</a> and it worked fine. I installed it automatically with <code>pip install git+https://github.com/clab/dynet#egg=dynet</code>.</p>
<p>Then, I wanted to add MKL support. So I installed dynet again manually,  using the instructions here: <a href="http://dynet.readthedocs.io/en/latest/python.html#manual-installation" rel="nofollow noreferrer">http://dynet.readthedocs.io/en/latest/python.html#manual-installation</a>, passing a <code>-DMKL</code> parameter to cmake.</p>
<p>I want to make sure that I did everything correctly and that Python indeed takes the new installation of dynet. How can I check this?</p>
<p>In general, when I have a library that is built in C++ and linked from Python, how can I check, from within Python, the details of the installed library, and particularly, what binary file does Python link to?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is tricky. There is no standard way, you have to rely on information provided by the package (which many don't do) and on implementation details for the specific library.</p>
<p>Python libraries <em>often</em> expose their version number in a <code>__version__</code> attribute. This attribute is <em>not standardised</em>, it is at most a convention. The <code>dynet</code> library does have this attribute but it doesn't list the patch-level version, only the major and minor versions:</p>
<pre><code>&gt;&gt;&gt; import dynet
&gt;&gt;&gt; dynet.__version__
'2.0'
</code></pre>
<p>Because you installed the library either directly from the version control system (with <code>git+https://...</code>) or manually from source, you can't use <code>pip freeze</code> or <code>pkg_resources.get_distribution()</code> to inspect the version either:</p>
<pre><code>$ pip freeze | grep -i dynet
dyNET==0.0.0
</code></pre>
<p>Compilation flags are <strong>not stored anywhere</strong>, normally. Python exposes it's own compilation-time info in structures in the <a href="https://docs.python.org/3/library/sys.html" rel="nofollow noreferrer"><code>sys</code> module</a> and the <a href="https://docs.python.org/3/library/sysconfig.html" rel="nofollow noreferrer"><code>sysconfig</code> module</a>, but there is no such facility for extension modules. Unless the extension module explicitly includes such info in the API, you are out of luck there.</p>
<p>At best, you can try to locate the actual dynamic module loaded. Many projects use a <em>wrapper Python module</em>, which indirectly loads the actual extension module, confusing matters. In this case, importing <code>dynet</code> gives you the <code>dynet.py</code> file:</p>
<pre><code>&gt;&gt;&gt; dynet.__file__
'/.../lib/python3.6/site-packages/dynet.py'
</code></pre>
<p>This file was generated from the <a href="https://github.com/clab/dynet/blob/master/python/dynet.py.in" rel="nofollow noreferrer"><code>dynet.py.in</code> file</a> in the project source code. It imports the dynamic module as <code>_dynet</code>:</p>
<pre><code>from _dynet import *
</code></pre>
<p>So you can still at least find the <em>location</em> of the dynamic object loaded with:</p>
<pre><code>&gt;&gt;&gt; import _dynet
&gt;&gt;&gt; _dynet.__file__
'/.../lib/python3.6/site-packages/_dynet.cpython-36m-darwin.so'
</code></pre>
<p>You can further check what that dynamic library links to if you want to check they are the right versions; how you do this is platform dependent:</p>
<ul>
<li>On most UNIX system's you'd use <code>ldd</code>, see <a href="https://stackoverflow.com/questions/50159/how-to-show-all-shared-libraries-used-by-executables-in-linux">How to show all shared libraries used by executables in Linux?</a></li>
<li>On OS X, use <code>otool -L</code> instead, see <a href="https://stackoverflow.com/questions/23697641/what-is-the-clang-analogue-of-ldd">What is the clang analogue of ldd?</a></li>
<li>On Windows, you need a third-party tool like dependency walker or the VS <code>dumpbin</code> tool, see <a href="https://stackoverflow.com/questions/7378959/how-to-check-for-dll-dependency">How to check for DLL dependency?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>3 ways from <a href="https://www.linkedin.com/pulse/python-ways-check-version-installed-rishikesh-agrawani/" rel="nofollow noreferrer">this source</a>:</p>
<pre><code>&gt;&gt;&gt; import django
&gt;&gt;&gt; django.__version__
'1.8'
&gt;&gt;&gt; 
&gt;&gt;&gt; import flask
&gt;&gt;&gt; flask.__version__
'0.11.1'
&gt;&gt;&gt; 
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; urllib2.__version__
'2.7'
&gt;&gt;&gt; 
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.__version__
'2.0.9'
</code></pre>
<p>Or by using <code>pkg_resources</code></p>
<pre><code>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; pkg_resources.get_distribution('flask').version
</code></pre>
<p>Or by using <code>pip freeze</code></p>
<p><code>pip freeze | find /I "virtualenv"</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Not very clear with your question.
But you can see all installed libraries by running the below command.</p>
<pre><code>pip freeze 
</code></pre>
<p>It will list all the libraries installed in your environment along with its version number.</p>
</div>
<span class="comment-copy"><i>How</i> did you install dynet? Using the system package manager, pip, directly from source?</span>
<span class="comment-copy">I see the library has a <code>__version__</code> attribute; <code>import dynet; print(dynet.__version__)</code>.</span>
<span class="comment-copy">The library would have to expose, in some library-specific manner, what flags were used to build it. There is no standard for that. Python stores such metadata in the <code>sys</code> and <a href="https://docs.python.org/3/library/sysconfig.html" rel="nofollow noreferrer"><code>sysconfig</code></a> modules, but that doesn't cover extension modules.</span>
<span class="comment-copy">@MartijnPieters I added explanation. Initially I installed automatically using pip, but later I wanted to add a flag so I installed manually from source.  <b>version</b> only gives the major version number (2.0), it gives no details about flags..</span>
<span class="comment-copy">@MartijnPieters Is there a way to see what binary file does python link to? Then, I can see whether the binary file is the one I just re-built.</span>
<span class="comment-copy">@ErelSegalHalevi: sorry, I had to roll back that edit. <code>ldd</code> is not a tool available on OS X, but you edited in my OS X path into the answer; you'd use <code>otool -L</code> instead. For Windows, you'd have to use a different tool altogether again. I'll happily link to instructions on how to list what dependencies are there on different platforms, but to put all that into this one probably is a little too verbose.</span>
<span class="comment-copy">While <code>__version__</code> is more widespread, it is <b>still package specific</b>. If a package doesn't set it, it is not set.</span>
<span class="comment-copy">There won't be a perfect solution for it if author just didn't give any information about version. For example, as Martijn Pietersâ™¦ has metioned, no <code>__version__</code> is set.</span>
<span class="comment-copy">These methods only give serial version number, but do not give information about flags used during the build.  Is there maybe a way to see what binary file does python link to?</span>
<span class="comment-copy">The version is either <code>2.0</code> or <code>0.0.0</code> according to each of these methods. All those are <i>wrong</i>.</span>
<span class="comment-copy">It won't list the version number for packages installed directly from github, as the OP has done.</span>
