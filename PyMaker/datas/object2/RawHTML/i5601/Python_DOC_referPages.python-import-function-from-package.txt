<div class="post-text" itemprop="text">
<p><em>(Python 3.6)</em></p>
<p>I have this folder structure:</p>
<pre><code>package/
       start.py
       subpackage/
                 __init__.py
                 submodule.py
</code></pre>
<p><strong>submodule.py:</strong></p>
<pre><code>def subfunc():
    print("This is submodule")
</code></pre>
<p><strong>__ init __.py:</strong></p>
<pre><code>from subpackage.submodule import subfunc
</code></pre>
<p><strong>start.py:</strong></p>
<pre><code>import subpackage 

subpackage.subfunc()

subpackage.submodule.subfunc()
</code></pre>
<p>I understand how and why</p>
<pre><code>subpackage.subfunc()
</code></pre>
<p>works.</p>
<p>But I don't understand why:</p>
<pre><code>subpackage.submodule.subfunc()
</code></pre>
<p>also works, if I have not done:</p>
<pre><code>from subpackage import submodule
</code></pre>
<p>Nor:</p>
<pre><code>import subpackage.submodule
</code></pre>
<p>Neither in <strong>__ init __.py</strong> nor in <strong>start.py</strong></p>
<p>Thank you very much if anyone may clear my doubt.</p>
</div>
<div class="post-text" itemprop="text">
<p>When issuing <code>from subpackage.submodule import subfunc</code>, python does <a href="https://docs.python.org/3/reference/import.html#the-import-system" rel="nofollow noreferrer">two things</a> for you: one, search and evaluate the module named <code>subpackage.submodule</code>, put it into <code>sys.modules</code> cache; two, populate <code>subpackage.submodule.subfunc</code> object and bind name "subfunc" to the namespace of the current module:</p>
<blockquote>
<p>The import statement combines two operations; it searches for the named module, then it binds the results of that search to a name in the local scope.</p>
</blockquote>
<p>When importing <code>subpackage.submodule</code>, parent of <code>submodule</code> also got imported:</p>
<blockquote>
<p>While certain side-effects may occur, such as the importing of parent packages, and the updating of various caches (including sys.modules) ...</p>
</blockquote>
<p>On the last stage of importing <code>subpackage.submodule</code>, python would set the module <a href="https://github.com/python/cpython/blob/v3.6.3/Lib/importlib/_bootstrap.py#L956-L959" rel="nofollow noreferrer">as an attribute</a> on its parent <code>subpackage</code>, this behavior is <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">documented</a>:</p>
<blockquote>
<p>When a submodule is loaded using any mechanism (e.g. importlib APIs, the import or import-from statements, or built-in __import__()) a binding is placed in the parent moduleâ€™s namespace to the submodule object.</p>
</blockquote>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>If I'm getting this right, you have a folder called "package" in which there are 2 <em>things</em>: a .py file and another folder called "subpackage".</p>
<p>Inside "subpackage" you have <code>__init__.py</code> and <code>submodule.py</code> which the latter contains a function that just prints "This is submodule".</p>
<p>Now, when you call <code>import subpackage</code>, you call and "pull" <strong>everything</strong> that's inside <em>"subpackage"</em>, including submodule and therefore, the <code>subfunc()</code> function.
When you write <code>subpackage.submodule.subfunc()</code> there's really nothing amazing going there, you just call the mainfolder/container <strong>(subpackage.)</strong>, then the .py file <strong>(submodule.)</strong> and finally the function itself <strong>(subfunc() )</strong>.</p>
</div>
<span class="comment-copy">Hello georgexsh. I have not done "import subpackage.submodule" neither in "__ init <b>.py" nor  "start.py" . I imported the "subfunc()" into the namespace of " __ init __.py" and then imported the content of " __ init __.py" into start by importing "subpackage" into "start.py". The "func()" in "</b> init __" should be a different object than the one in "submodule". That is my doubt.  Am I wrong?</span>
<span class="comment-copy">Sorry, I'm still learning the formating of comment...</span>
<span class="comment-copy">@maxfraguas updated post.</span>
<span class="comment-copy">Hello Rolin. You got the strcture right. But this is the question:</span>
<span class="comment-copy">Hello Rolin. You got the structure right. This is the doubt: in the "<b>init</b>.py" file the "subfuc()" function was imported into the namespace, which makes it accesible directly but not by referencing it with dot notation (since they are 2 different objects). When I imported the package "subpackage" into start.py,  the "start.py" have access to the content of  subpackage's <b>init</b> file.  The statement "subpackage.submodule.subfunc()" in "start.py" is accesing the "func()" in "submodule.py" which should not be accesible since "submodule.py" was not imported into "start" nor "<b>init</b>".</span>
<span class="comment-copy">Man, you are twisting your head around this simple problem ;) The thing is, when you import <code>subpackage</code> in <b>start.py</b>, the <b><i>_init_</i>.py</b> inside the subpackage tells <code>start.py</code> what is inside <code>submodule.py</code>, so it basically acts as an index for <code>start.py</code>. Try commenting everything inside <code>__init__.py</code> and then executing <code>start</code> to see what I mean.</span>
<span class="comment-copy">Rolin, thank you for your awnser. But I don't think you understand my question. When I import just a package, the content of its <b>init</b> file is executed in the script importing the package. If the content of the <b>init</b> (as in my example) just import an object from a module as in "from module import function object" , only the function object should be accesible to the <b>init</b> and to the script importing the content of the <b>init</b>. The whole module to which the function object belong should not be accesible. That is my doubt.</span>
