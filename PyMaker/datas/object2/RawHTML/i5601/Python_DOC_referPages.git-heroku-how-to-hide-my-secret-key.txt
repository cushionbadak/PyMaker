<div class="post-text" itemprop="text">
<p>Im using Python and Django to create a Heroku web app and Heroku gives me this error after the command 'git push heroku master': <code>ModuleNotFoundError: No module named 'dlist.secret_settings'</code> when attempting to do this:</p>
<pre><code>#settings.py
from .secret_settings import *  
# from secret_settings.py import * doesn't work for some reason.
</code></pre>
<p>Here is what secret_settings.py (which is in the same folder as settings.py) contains:</p>
<pre><code>#secret_settings.py
SECRET_KEY = 'string here'
</code></pre>
<p>The problem is, this works when I test my web app on my local server (ie <a href="http://127.0.0.1:8000/" rel="nofollow noreferrer">http://127.0.0.1:8000/</a>), but its not working when I push these changes to Heroku. All I want to do is hide my SECRET_KEY, per others advice, as you can see. Ive looked at others suggestions and I can't seem to figure it out, choosing this method because it was understandable. Very frustrating. Beginner friendly answers/steps are greatly appreciated.  </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm guessing you've configured Git to ignore <code>secret_settings.py</code>. That's the only reason I can think of to create a separate file.</p>
<p>Heroku deploys are powered by Git. Since <code>secret_settings.py</code> isn't tracked by Git it doesn't get pushed to Heroku. You could add the file to your repository, but that would defeat the purpose of having a separate untracked file in the first place.</p>
<p>The solution is to use an <a href="https://en.wikipedia.org/wiki/Environment_variable" rel="nofollow noreferrer">environment variable</a>. This is <a href="https://devcenter.heroku.com/articles/config-vars" rel="nofollow noreferrer">well-supported on Heroku</a>.</p>
<p>In your <code>settings.py</code> file, set your <code>SECRET_KEY</code> using <a href="https://docs.python.org/3/library/os.html#os.getenv" rel="nofollow noreferrer"><code>os.getenv()</code></a> like this:</p>
<pre><code>import os

SECRET_KEY = os.getenv('SECRET_KEY', 'Optional default value')
</code></pre>
<p>This tells Django to load your <code>SECRET_KEY</code> setting from an environment variable called <code>SECRET_KEY</code>. If no such environment variable exists it will fall back to the optional default value. On your development machine it's probably fine to use the default.</p>
<p>Finally, set the <code>SECRET_KEY</code> environment variable on Heroku. You can do this by running <a href="https://devcenter.heroku.com/articles/config-vars#setting-up-config-vars-for-a-deployed-application" rel="nofollow noreferrer"><code>heroku config:set SECRET_KEY="YOUR_SECRET_KEY_VALUE"</code></a> on your development machine, or via Heroku's web-based dashboard.</p>
<p>Your <code>secret_settings.py</code> file is no longer required.</p>
</div>
<span class="comment-copy">Thanks Chris that helps immensely, the documentation wasn't clear to me. One follow up question is if its secure to include my original <code>SECRET_KEY</code> in the second argument in <code>os.getenv</code> (ie the Optional default value) if I'm committing it to a public repo? If its not secure should I just use <code>SECRET_KEY = os.getenv('SECRET_KEY')</code> in <code>settings.py</code>? I guess the question really is if the 1st argument in <code>os.getenv</code> is the <b>only</b> authentic <code>SECRET_KEY</code> on the web app if its included, but if its not included and your on the development machine, it will instead use the second argument?</span>
<span class="comment-copy">@reedx8, if you include your real secret key as the second argument it will be visible to the world in your public repository. That's probably not what you want. You can use <code>os.getenv('SECRET_KEY')</code>, but then you'll need to set a <code>SECRET_KEY</code> environment variable in <i>all</i> of your environments (your development machine, any test or staging environments you may have, etc.). It's probably easier to include a dummy value as a default value, though of course it's possible to set environment variables everywhere. I've added a link to the docs for <code>os.getenv()</code>.</span>
