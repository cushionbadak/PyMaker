<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6822725/rolling-or-sliding-window-iterator">Rolling or sliding window iterator?</a>
<span class="question-originals-answer-count">
                    19 answers
                </span>
</li>
</ul>
</div>
<p>I have an N length string of digits or a number. I then turn it into a list to iterate over the digits. I want to slice the list into 5 digit blocks that look like so:</p>
<pre><code>N = '1234567890'

slice1 = '12345'
slice2 = '23456'
slice3 = '34567'
</code></pre>
<p>and so on...</p>
<p>I am having trouble finding code examples of this for python, specifically slicing and for loops. Any help would be appreciated, thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you need to understand how each of the elements in N = '1234567890' is indexed. If you want to access <code>"1"</code>, you can use <code>N[0]</code>. <code>"2"</code> with <code>N[1]</code>. And so on till <code>N[9]</code> which equals to <code>"0"</code>.</p>
<p>Your goals is to create things like</p>
<pre><code>slice1 = '12345' 
slice2 = '23456'
slice3 = '34567'
</code></pre>
<p>Let's take a look at <code>slice1</code> with both values and how to access then via <code>N</code></p>
<pre><code>'1'    '2'    '3'    '4'    '5'
N[0]   N[1]   N[2]   N[3]   N[4]
</code></pre>
<p>Now we turn to list slices. Given a list <code>l</code>. One can select a part of it by specifying the <code>start</code> and <code>end</code>, two indeces like <code>l[start:end]</code>. </p>
<p>Note that <code>l[start:end]</code> will select elements </p>
<pre><code>l[start], l[start+1], ..., l[end-1]
</code></pre>
<p>Yes. <code>l[end]</code> is not selected. The selection will include the starting index but exclude the ending index.</p>
<p>Back to the <code>slice1</code> example, how do you select <code>'12345'</code>? From the discussion above, we know we want indeces from 0 to 4. Thus, we need to put <code>N[0:5]</code> because as mentioned, <code>N[5]</code> would not be included in this way. </p>
<p>Given this practice, you can now write a for loop to yield <code>slice1</code>, <code>slice2</code>, and <code>slice3</code> in a row.</p>
<p>We can do it like </p>
<pre><code>gap = 5
slices = []
for i in range(3):
    slices[i] = N[i:i+gap]
# slices will be ["12345", "23456", "34567"]

# or 
slice1 = N[0:5]
slice2 = N[1:6]
slice3 = N[2:7]
</code></pre>
<p>We did it by defining a variable <code>gap</code>. There is always a gap of 5 between the starting index and the ending index because the slices we want are of length 5. With some more observation: if a starting index is <code>i</code> and then the ending index should be <code>i + gap</code>. We increment one at a time to get a new slice.</p>
<p>Note that I only introduce one way to do list slicing that matches your particular need in this example. You can find more usage in this question <a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">Understanding Python's slice notation</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a list of using list comprehension.</p>
<pre><code>N = '1234567890'

all_slices = [N[i:i+5] for i in range(len(N)-4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just do this</p>
<pre><code>n = '1234567890'
for i in range(len(n)):
   print(n[i:i+5])
</code></pre>
<p>this should do the trick. But I need to say that it is hard to believe you actually search the Internet because it is a frequently asked question...</p>
<p><strong>UPDATE</strong></p>
<p>if you want to use the different slices you can try this:</p>
<pre><code>n = '1234567890'

ar= [None]*len(n)

for i in range(len(n)):
   if len(n[i:i+5]) == 5:
      ar[i] = n[i:i+5]
   else:
      del ar[i:-1]
      del ar[-1]
      break

for i in ar:
   print(i)
</code></pre>
<p>So what happens here is:</p>
<ul>
<li>You make an array that has the size of the string and fill them with None values</li>
<li>You check if the remaining size of the string is 5 pieces long

<ul>
<li>if so you slice the string in pieces of 5 with [i:i+5] and do the check again for the next slices</li>
<li>if not you delete the remaining None values and break the loop</li>
</ul></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can also try converting <code>N</code> to a list beforehand, and popping off the first character each iteration, until the list is less than length <code>5</code>. Then you could just take the first five characters each iteration.</p>
<p>Here is an example using <a href="https://docs.python.org/2/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a>:</p>
<pre><code>from collections import deque
from itertools import islice

N = '1234567890'
items = deque(N)
size = 5

result = []
while len(items) &gt;= size:
    result.append("".join(islice(items, 0, size)))
    items.popleft()

print(result)
</code></pre>
<p>Which Outputs:</p>
<pre><code>['12345', '23456', '34567', '45678', '56789', '67890']
</code></pre>
<p><strong>Note:</strong> <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> was used here to slice the <code>deque</code> object. You could also use <code>list(items)[:5]</code>, but this creates an extra copy of the list everytime. </p>
</div>
<div class="post-text" itemprop="text">
<p>Using a <code>dict comprehension</code>:</p>
<pre><code>N = '1234567890'
slices = {'slice'+str(i+1): N[i:i+5] for i in range(len(N)-4)}
</code></pre>
<p>Usage:</p>
<pre><code>slice1 = slices['slice1']
slice2 = slices['slice2']
slice3 = slices['slice3']
</code></pre>
<p>and so on...</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>As simple as that:-</strong></p>
<pre><code>from collections import deque
N = '1234567890'
m = deque(N)
for i in range(len(m)-4):
    print N[i:i+5]
#output as you expected
</code></pre>
</div>
<span class="comment-copy">@wwii nah, OP isn't asking to split the string to even chucks, but there should be other dupes.</span>
<span class="comment-copy">@wwii. No. Not at all</span>
<span class="comment-copy">What you are lookingfor is called a "sliding window"</span>
<span class="comment-copy">@Code-Apprentice There are some great solutions here, but this is basically what I was looking for. "Sliding/Rolling window"</span>
<span class="comment-copy">When searching for the terms "For loop/looping over/iterating over slices/arrays/lists" I was having a trouble find the term "sliding/rolling window" so that's when I deferred to this site for help. Thanks for the solution and explanation.</span>
<span class="comment-copy">No problem :) Please accept answer if you find this answer to be the solution</span>
