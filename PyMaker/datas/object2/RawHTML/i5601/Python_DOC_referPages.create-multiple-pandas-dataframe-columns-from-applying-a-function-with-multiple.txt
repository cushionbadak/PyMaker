<div class="post-text" itemprop="text">
<p>I'd like to apply a function with multiple returns to a <code>pandas DataFrame</code> and put the results in separate new columns in that <code>DataFrame</code>.</p>
<p>So given something like this:</p>
<pre><code>import pandas as pd

df = pd.DataFrame(data = {'a': [1, 2, 3], 'b': [4, 5, 6]})

def add_subtract(a, b):
  return (a + b, a - b)
</code></pre>
<p>The goal is a single command that calls <code>add_subtract</code> on <code>a</code> and <code>b</code> to create two new columns in <code>df</code>: <code>sum</code> and <code>difference</code>.</p>
<p>I thought something like this might work:</p>
<pre><code>(df['sum'], df['difference']) = df.apply(
    lambda row: add_subtract(row['a'], row['b']), axis=1)
</code></pre>
<p>But it yields this error:</p>
<blockquote>
<p>----&gt; 9     lambda row: add_subtract(row['a'], row['b']), axis=1)</p>
<p>ValueError: too many values to unpack (expected 2)</p>
</blockquote>
<p><strong>EDIT:</strong> In addition to the below answers, <a href="https://stackoverflow.com/questions/23690284/pandas-apply-function-that-returns-multiple-values-to-rows-in-pandas-dataframe">pandas apply function that returns multiple values to rows in pandas dataframe</a> shows that the function can be modified to return a list or <code>Series</code>, i.e.:</p>
<pre><code>def add_subtract_list(a, b):
  return [a + b, a - b]

df[['sum', 'difference']] = df.apply(
    lambda row: add_subtract_list(row['a'], row['b']), axis=1)
</code></pre>
<p>or </p>
<pre><code>def add_subtract_series(a, b):
  return pd.Series((a + b, a - b))

df[['sum', 'difference']] = df.apply(
    lambda row: add_subtract_list(row['a'], row['b']), axis=1)
</code></pre>
<p>both work (the latter being equivalent to Wen's accepted answer).</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding <code>pd.Series</code></p>
<pre><code>df[['sum', 'difference']] = df.apply(
    lambda row: pd.Series(add_subtract(row['a'], row['b'])), axis=1)
df
</code></pre>
<p>yields</p>
<pre><code>   a  b  sum  difference
0  1  4    5          -3
1  2  5    7          -3
2  3  6    9          -3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this would be to use <code>pd.DataFrame.assign</code> as follows:</p>
<pre><code>df.assign(**{k:v for k,v in zip(['sum', 'difference'], add_subtract(df.a, df.b))})
</code></pre>
<p>Should yield:</p>
<pre><code>   a  b  difference  sum
0  1  4          -3    5
1  2  5          -3    7
2  3  6          -3    9
</code></pre>
<h3>Clarifications:</h3>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> is a builtin function that returns an iterator of tuples, where the <em>i-th tuple</em> contains the <em>i-th element</em> from each of the argument sequences or iterables. For instance, <code>list(zip(['sum', 'difference'], [df.a + df.b], df.a - df.b))</code> should return <code>[('sum', df.a + df.b), ('difference', df.a - df.b)]</code>.</p>
<p><a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer"><code>**</code></a> in front of a dictionary object serves as an operator that unpacks the combination of <code>key</code> and <code>value</code> pairs. In essence, the unpacking could be represented as something like this: <code>sum=df.a + df.b, difference=df.a - df.b</code>.</p>
<p>In sum, when combined, you get something like the following:</p>
<pre><code>df.assign(sum=df.a + df.b, difference=df.a - df.b)
</code></pre>
<p>Follow the provided links to both <code>zip</code> and the <code>**</code> operator in front of a dictionary object to get a better idea of how these useful tools work beyond this particular example.</p>
</div>
<span class="comment-copy">Thank you! Can you explain why <code>pd.Series</code> is needed here?</span>
<span class="comment-copy">@MaxGhenis    You have tuple as result in your function   , so , we pass tuple to pd.Series , this will reconstruct the column of tuple to two pd.Series (Dataframe), more info  <a href="https://stackoverflow.com/questions/29550414/how-to-split-column-of-tuples-in-pandas-dataframe" title="how to split column of tuples in pandas dataframe">stackoverflow.com/questions/29550414/â€¦</a></span>
<span class="comment-copy">This is intriguing: I'm relatively new to Python (mostly an R user), so could you explain what the <code>**</code> and <code>zip</code> are doing here? Seems like a useful construct. I accepted Wen's answer as it differed least from my guess, but upvoted this and can change if this would be significantly better performance-wise.</span>
<span class="comment-copy">@MaxGhenis you can treat the zip in python is list of list in R , in R we need   <code>unlist</code> here is the example of R :-) (PS, I am 50% R user too :-) ) <a href="https://stackoverflow.com/questions/4227223/r-list-to-data-frame">stackoverflow.com/questions/4227223/r-list-to-data-frame</a></span>
<span class="comment-copy">That statement is a bit lacking. Data structures in R are not that easily translated in python data structures. The closest to <code>zip</code> I can think of in R is the <a href="http://purrr.tidyverse.org/reference/transpose.html" rel="nofollow noreferrer"><code>transpose</code></a> function from the <a href="http://purrr.tidyverse.org/" rel="nofollow noreferrer"><code>purrr</code></a> package. Even that doesn't really work the same way in all cases.</span>
