<div class="post-text" itemprop="text">
<p>I've been trying to work with the <code>map</code> function in Python, and I've been having a little bit of trouble with it. I can't tell which of these is the proper way to map function foo to the list bar:</p>
<pre><code>map(foo, bar)
</code></pre>
<p>or</p>
<pre><code>newBar = map(foo, bar)
</code></pre>
<p>I'm getting varied results from different websites. Which of these is the correct usage?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, <a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map()</code></a> returns a list of return values of <code>foo(...)</code>. If you don't care about the results and just want to run the elements of <code>bar</code> through <code>foo</code>, either of your examples will work.</p>
<p>In Python 3, <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map()</code></a> returns an iterator that is evaluated lazily. Neither of your examples will actually run any elements of <code>bar</code> through <code>foo</code> <em>yet</em>. You will need to iterate over that iterator. The simplest way would be to convert it to a list:</p>
<pre><code>list(map(foo, bar))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> returns a new list, and does not change the one you enter into the function. So, the usage is:</p>
<pre><code>def foo(x): #sample function
    return x * 2

bar = [1, 2, 3, 4, 5]
newBar = map(foo, bar)
</code></pre>
<p>In the interpreter:</p>
<pre><code>&gt;&gt;&gt; print bar
[1, 2, 3, 4, 5]
&gt;&gt;&gt; print newBar
[2, 4, 6, 8, 10]
</code></pre>
<p><em>Note: This is python 2.x</em></p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2 <code>map()</code> returns a new list. In Python 3 it returns an iterator. You can convert it into a list with:</p>
<pre><code>new_list = list(map(foo, bar))
</code></pre>
<p>As the name suggests, a common use of an iterator is to iterate over it:</p>
<pre><code>for x in map(foo, bar):
    # do something with x
</code></pre>
<p>This produces one value at a time without putting all values in memory as creating a list would.</p>
<p>Furthermore, you can do single steps through an iterator:</p>
<pre><code>my_iter = map(foo, bar)
first_value = next(my_iter)
second_value = next(my_iter)
</code></pre>
<p>Now work with the rest:</p>
<pre><code>for x in map(foo, bar):
    # x starts from the third value
</code></pre>
<p>This is very common in Python 3. <code>zip</code> and <code>enumerate</code> also return iterators. Often this is called lazy evaluation, because values are only produce when really need.</p>
</div>
