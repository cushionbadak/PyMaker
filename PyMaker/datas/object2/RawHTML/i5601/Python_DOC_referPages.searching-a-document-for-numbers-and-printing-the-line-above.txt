<div class="post-text" itemprop="text">
<p>I have existing data in a file that looks like this:</p>
<pre><code>d893ecee58ee4d6f1ca56a358d2e6287
69
ae0d10efd7663c734b9ea66cec5aaa44
100
c9136ba49f4b1a8e89d6ed35cac95f7c
100
67c1431d8a06d7b2e31g86874b757eeb
0
8478b9587875f65d5afe54f541bada61
11
</code></pre>
<p>What i'd like to do is search the document for any line with a number value greater than 30 and print the line above that number.</p>
<p>Here's what I have now :</p>
<pre><code>with open ('somefile.txt','r') as f, open('newfile.txt','w') as fnew:
        for i, line in enumerate(f):
            if line.startswith('1' or '2' or '3' or '4' or '5' or '6' or '7' or '8' or '9' or '10' or '11' or '12' or '13' or '14' or '15' or '16' or '17' or '18' or '19' or '20' or '21' or '22' or '23' or '24' or '25' or '26' or '27' or '28' or '29' or '30'):
                fnew.write(line -1)
</code></pre>
<p>I know this isn't the cleanest script but i just want something that works. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is the approach I would take, which assumes your input data is regular:</p>
<pre><code>with open('data.txt') as f:
    while True:
        try:
            data = next(f).strip()
            number = next(f).strip()
        except StopIteration:
            # EOF
            break
        number = int(number)
        if number &gt; 30:
            # TODO: Write data to other file
            print(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want different approach , then collect data and values in a dict and then iterate over dict if key is large than 30 then fetch the value:</p>
<pre><code>values={}
with open('test.txt','r') as f:
    sub = []
    for line in f:

        sub.append(line.strip())
        if len(sub) == 2:
            if int(sub[1]) not in values:
                values[int(sub[1])]=[sub[0]]
            else:
                values[int(sub[1])].append(sub[0])

            sub=[]




for key,value in values.items():
    if key&gt;30:
        print(key,value)
</code></pre>
<p>output:</p>
<pre><code>100 ['ae0d10efd7663c734b9ea66cec5aaa44', 'c9136ba49f4b1a8e89d6ed35cac95f7c']
69 ['d893ecee58ee4d6f1ca56a358d2e6287']
</code></pre>
<p>step by step:</p>
<p>First collect all values and num in dict :</p>
<pre><code>values={}
with open('test.txt','r') as f:
    sub = []
    for line in f:

        sub.append(line.strip())
        if len(sub) == 2:
            if int(sub[1]) not in values:
                values[int(sub[1])]=[sub[0]]
            else:
                values[int(sub[1])].append(sub[0])

            sub=[]
</code></pre>
<p>it will give :</p>
<pre><code>{0: ['67c1431d8a06d7b2e31g86874b757eeb'], 11: ['8478b9587875f65d5afe54f541bada61'], 100: ['ae0d10efd7663c734b9ea66cec5aaa44', 'c9136ba49f4b1a8e89d6ed35cac95f7c'], 69: ['d893ecee58ee4d6f1ca56a358d2e6287']}
</code></pre>
<p>Now iterate over this dict and fetch value of that key if key &gt;30</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a couple problems with your approach. Here's my attempt:</p>
<pre><code>def line_gt_30(line):
   try:
       return int(line.strip()) &gt; 30
   except ValueError:
       return False

prev_line = None
with open ('somefile.txt','r') as f, open('newfile.txt','w') as fnew:
    for line in f:
        if line_gt_30(line) and prev_line is not None: 
            fnew.write(prev_line)
        prev_line = line
</code></pre>
<p>I haven't really tested it but it should work. It is similar to yours but it fixes a lot of your problems. </p>
<p>First of all you don't need to use enumerate here. I'm not sure exactly what you were getting at with print(line -1) but you need to keep the previous line in a temp variable because our file is now an iterable, meaning you can't use indexing to grab lines like in a list. </p>
<p>Also in startswith('1' or '2' or '3' or '4' or ... ) is equivalent to startswith('1'). You should read into exactly what or does.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a combination of list comprehensions and itertools.compress to solve this.</p>
<p>Your file format has to follow strictly what you posted here though.</p>
<pre><code>import itertools
# zero-line is the ID, 1st line is the number. NO empty lines in between.

text = '''d893ecee58ee4d6f1ca56a358d2e6287
69
ae0d10efd7663c734b9ea66cec5aaa44
100
c9136ba49f4b1a8e89d6ed35cac95f7c
100
67c1431d8a06d7b2e31g86874b757eeb
0
8478b9587875f65d5afe54f541bada61
11
'''

lines = text.split("\n") # list of all lines - you can get that from 
                         # file with readlines()

data = lines[0::2]       # your data is in every 2nd line starting at 0

                         # your numbers are in every 2nd line starting on 1
nums = [1 if (int(x) &gt; 30) else 0 for x in lines[1::2] ]

# the list comprehension creates a list of 0 and 1 - 1 if number &gt; 30
# itertools.compress does the lifing for you 

result = itertools.compress(data,nums)

print(list(result))
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.compress" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools.compress</a></p>
<p>Compress utilizes 2 lists and returns an iterator over list1 that includes only elements that have a <code>True</code> in the other list.</p>
<p>Without itertools:</p>
<pre><code>result2 = []
for idx in range(len(lines)):
    try: 
        if idx%2 == 1 and int(lines[idx])&gt;30:
            result2.append(lines[idx-1])
    except:
        print("Error at line: ",idx, " unable to convert to int for input'", lines[idx],"'")


print(result2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>data = [i.strip('\n') for i in open('filename.txt')]
final_data = [data[i-1] for i in range(len(data)) if all(b.isdigit() for b in data[i]) and int(data[i]) &gt; 30]
</code></pre>
<p>Output:</p>
<pre><code>['d893ecee58ee4d6f1ca56a358d2e6287', 'ae0d10efd7663c734b9ea66cec5aaa44', 'c9136ba49f4b1a8e89d6ed35cac95f7c']
</code></pre>
</div>
<span class="comment-copy">There are better ways to do this but, for starters, what result are you getting?</span>
<span class="comment-copy">Run in your Python interpreter: <code>'1' or '2'</code>. Do you get what you expected? Also, <code>line -1</code> doesn't make sense <i>at all</i> as it subtracts an integer from a string. Even worse, <code>fnew.print</code> doesn't exist.</span>
<span class="comment-copy">The code/pseudocode shown here does <code>&lt;= 30</code> rather than <code>&gt; 30</code>.</span>
<span class="comment-copy">You need to keep track of the previous line as you are iterating over the input file. And I would suggest you use something like <code>if line.strip().isdigit()</code>. The way your code is written now, it will inadvertently match a lot of data lines.</span>
<span class="comment-copy">neater - but you missed the chance to spread itertools ;)</span>
<span class="comment-copy">Thanks for the help. This was exactly what I needed.</span>
<span class="comment-copy">This seems like a neat but overly complex way to solve the problem.</span>
<span class="comment-copy">@Blurp Thanks, still learning python here :)</span>
