<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/28382433/how-can-i-make-a-for-loop-pyramid-more-concise-in-python">How can I make a for-loop pyramid more concise in Python? [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/533905/get-the-cartesian-product-of-a-series-of-lists">Get the cartesian product of a series of lists?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>I have this code:</p>
<pre><code>list_1 = [11, 22]
list_2 = [33, 44, 55 ,66]
list_3 = [77, 88 ,99]
</code></pre>
<p>I want to sum each elements in lists. i.e. 11 + 33 + 77, 11 + 33 + 88, … 22 + 33 + 77, 22 + 33 + 88… and put all the sums into a final list</p>
<p>I have these lines:</p>
<pre><code>list_1 = [11, 22]
list_2 = [33, 44, 55 ,66]
list_3 = [77, 88 ,99]

result = []

for L_1 in list_1:
    for L_2 in list_2:
        for L_3 in list_3:
            result.append(L_1 + L_2 + L_3)

print result                   # to output all elements
print list(set(result))     # to not showing duplicates
</code></pre>
<p>The codes work well but looked clumsy. If there are 20  or more lists to take part in the calculation, it doesn’t looked good at all.</p>
<p>Could you please show me a better way? </p>
</div>
<div class="post-text" itemprop="text">
<p>This sort of combination is called the Cartesian product. You can get it using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>.</p>
<pre><code>from itertools import product

list_1 = [11, 22]
list_2 = [33, 44, 55, 66]
list_3 = [77, 88, 99]

result = {sum(t) for t in product(list_1, list_2, list_3)}
print(sorted(result))
</code></pre>
<p><strong>output</strong></p>
<pre><code>[121, 132, 143, 154, 165, 176, 187]
</code></pre>
<p>You can even use <code>product</code> if you don't know in advance how many lists you have:</p>
<pre><code>all_lists = list_1, list_2, list_3
result = {sum(t) for t in product(*all_lists)}
</code></pre>
<hr/>
<p>The <code>product</code> iterator yields tuples of the items from the iterables that you pass it. We then pass those tuples to the built-in <code>sum</code> function to perform the addition.</p>
<p>Here's what the "raw" output from <code>product</code> looks like:</p>
<pre><code>from itertools import product

list_1 = [1, 2]
list_2 = [3, 4]
list_3 = [5, 6]

all_lists = list_1, list_2, list_3
for t in product(*all_lists):
    print(t)
</code></pre>
<p><strong>output</strong></p>
<pre><code>(1, 3, 5)
(1, 3, 6)
(1, 4, 5)
(1, 4, 6)
(2, 3, 5)
(2, 3, 6)
(2, 4, 5)
(2, 4, 6)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>map(sum, product(*lists))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; lists = [11, 22], [33, 44, 55, 66], [77, 88, 99]
&gt;&gt;&gt; map(sum, product(*lists))
[121, 132, 143, 132, 143, 154, 143, 154, 165, 154, 165, 176, 132, 143, 154, 143, 154, 165, 154, 165, 176, 165, 176, 187]
</code></pre>
</div>
<span class="comment-copy">Check this out: <a href="https://stackoverflow.com/questions/13885234/python-nested-looping-idiom" title="python nested looping idiom">stackoverflow.com/questions/13885234/…</a></span>
<span class="comment-copy">@Transhuman, thank you for your help. your lines are good for learning. could you please resume your answer?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ - Thanks, I mis-understood the question.</span>
<span class="comment-copy">Also see <a href="https://stackoverflow.com/questions/533905/get-the-cartesian-product-of-a-series-of-lists" title="get the cartesian product of a series of lists">stackoverflow.com/questions/533905/…</a></span>
<span class="comment-copy">This gives the product, but doesn't the asker want to sum the values instead?</span>
<span class="comment-copy">@Windmill Which it also does</span>
<span class="comment-copy">Does it? Sorry, was just going off the number of values given in the output.</span>
<span class="comment-copy">@PM 2Ring, thank you for the teaching!</span>
<span class="comment-copy">@Windmill The number of items in <code>result</code> is small because we've collected them in a set to eliminate duplicates.</span>
<span class="comment-copy"><code>set(map(sum, product(*lists)))</code> based on Op's requirements.</span>
<span class="comment-copy">You mean their <i>"put all the sums into a final list"</i>?</span>
<span class="comment-copy">@StefanPochmann, very good! thank you for teaching. :)</span>
<span class="comment-copy">No, I mean by the <code>list(set(result))</code> in the list line.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ That's not in the stated "requirements". Also, it's commented with "to not <i>showing</i> duplicates" (emphasis my interpretation). And it's literally not their <code>result</code>.</span>
