<div class="post-text" itemprop="text">
<p>So I want to count up in binary but keep the leading zeros in example to count to 6 it'd look like this:</p>
<blockquote>
<p>0000</p>
<p>0001</p>
<p>0010</p>
<p>0011</p>
<p>0100</p>
<p>0101</p>
<p>0110</p>
</blockquote>
<p>I have this code but it only goes up to a certain amount specified by repeat=4 and i need it to go until it finds a specific number.</p>
<pre><code>for i in itertools.product([0,1],repeat=4):
x += 1
print i
if binNum == i:
    print "Found after ", x, "attempts"
    break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Without leading zeros</h2>
<pre><code>n=5   # End number
i=0   # index var
while i &lt; n:
    print format(i, "04b") 
    i+=1
</code></pre>
<p>The above example would display from 0 to 5. And <code>04b</code> gives you 4 characters as the result (with leading zeros).</p>
<p>Output:</p>
<pre><code>0000
0001
0010
0011
0100
</code></pre>
<hr/>
<h2>With leading zeros</h2>
<pre><code>while( i &lt;= n ):
    len_bin = len(bin(i)[2:])
    if(len_bin%4 != 0):
        lead = 4 - len_bin % 4
    else:
        lead = 0
    print format(i, "0"+str(lead+len_bin)+"b")
    i+=1
</code></pre>
<p>The above code would go from <code>i</code> to <code>n</code> and display the binary with leading zeros.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nevermind guys, I found the answer! </p>
<p>I simply put it in a while loop like this: </p>
<pre><code>while found == 0:
repeatTimes += 1
for i in itertools.product([0,1],repeat=repeatTimes):
    x += 1
    print i
    if binNum == i:
        found = 1
        pos = x
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A more pythonic way is </p>
<pre><code>for k in range(7): #range's stop is not included

    print('{:04b}'.format(k))
</code></pre>
<p>This uses Python's string formatting language (<a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">https://docs.python.org/3/library/string.html#format-specification-mini-language</a>)</p>
<p>To print higher numbers in blocks of four use something like</p>
<pre><code>for k in range(20): #range's stop is not included

    # https://docs.python.org/3/library/string.html#format-specification-mini-language

    if len('{:b}'.format(k)) &gt; 4:
        print(k, '{:08b}'.format(k))
    else:
        print('{:04b}'.format(k))
</code></pre>
<p>You could even dynamically adjust the formatting term <code>'{:08b}'</code> using the string formatting language itself and the equation <code>y = 2^x</code> to work for any integer:</p>
<pre><code>for k in range(300):

    print(k, '{{:0{:.0f}b}}'.format(ceil((len(bin(k))-2)/4)*4).format(k))
</code></pre>
</div>
<span class="comment-copy">What is <code>binNum</code>? A number in binary? A string?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, from the code it seems binNum is a tuple. but in general the question is a bit vague.</span>
<span class="comment-copy">@coldspeed it is a binary number in a tuple such as 1001 looks like (1,0,0,1)</span>
<span class="comment-copy">How would i make it so once it exceeds 15 (1111) it would add another 4? so 16 would be 0001 0000.</span>
<span class="comment-copy">see my answer below</span>
<span class="comment-copy">I attached an example for arbitrary integers to print in blocks of four</span>
<span class="comment-copy">Why the down-vote?</span>
<span class="comment-copy">Alright, well and good, but do you need itertools? Also, what if you want to count to an odd number of digits?</span>
<span class="comment-copy">@coldspeed if you can help me find a more efficient way or better. I would greatly appreciate. I don't really need itertools. All i need is a way to "bruteforce" a binary string</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/a/47958737/4909087">stackoverflow.com/a/47958737/4909087</a></span>
