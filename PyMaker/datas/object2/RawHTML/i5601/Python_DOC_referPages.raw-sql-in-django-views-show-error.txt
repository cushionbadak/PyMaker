<div class="post-text" itemprop="text">
<p>For some special reasons we had to perform raw query in view.py file. (There is some page that user types an SQL query and sends it so our system and we should perform it and show the result of tat query)</p>
<pre><code>def query(request):
    result = None
    if request.method == "POST":
        form = forms.QueryForm(request.POST)
        if form.is_valid():
            query_text = form.cleaned_data['query']
            with connection.cursor() as cursor:
                try:
                    cursor.execute(query_text)
                    result = cursor.fetchall()
                except:
                    result = cursor.statusmessage
    else:
        form = forms.QueryForm()

    return render(request, "portal/query.html", {
        'form': form,
        'result': result
    })
</code></pre>
<p>if we run something like SELECT * FROM table1, the try part would successfully run and if some queries that do not return some rows like UPDATE, the except part  works.</p>
<p>My question is that if we perform some meaningless queries like <em>sakufhskghks</em>, we want to see the error from DB, or any type of error from DB.</p>
<p>Is that possible? tnx</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are not sure about the exception raised, you can call for generic exception information from system.</p>
<p><strong>Example</strong>:  </p>
<pre><code>import sys
....
try:
    # whatever code you want ...
    pass
except OSError as err: # when you know and expect specific error
    # decide what you want to perform
    pass
except ValueError: # when you know and expect specific error
    # decide what you want to perform
    pass
except: # unhandled exceptions
    print("Unexpected error:", sys.exc_info()[0])
    raise
</code></pre>
<p>Database errors too have named exceptions.<br/>
Relevant errors can be assumed expected and raised.</p>
<p><strong>Refer to documentation</strong>:  </p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer"><strong>Errors and Exceptions</strong></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I think you need to check for various exceptions.
Currently, you are just checking some exception happened or not and then printing <code>cursor.statusmessage</code>. When you pass junk, <code>cursor.statusmessage</code> will contain nothing.</p>
<p>Good way to handle various error conditions is to check various database exceptions.</p>
<p><a href="https://docs.djangoproject.com/en/2.0/ref/exceptions/#database-exceptions" rel="nofollow noreferrer">Various Database Exceptions in Django!!!</a></p>
<p><strong>Demo Code :</strong></p>
<pre><code>import django.db as db
try:
    pass
except db.OperationalError,e:
    print str(e)
except db.Error,e:
    print(str(e))
except:
    result = cursor.statusmessage
</code></pre>
</div>
<span class="comment-copy">fill your query_text with your desired junk sentence and execute your code. you will get answer for your posted question.</span>
<span class="comment-copy">that's exactly what is happening. Whatever we type is stored in  query_text  ,even junks. except part runs but we cannot see the message from database @RavinderReddy</span>
<span class="comment-copy">except is to hold and manage exceptions raised.</span>
<span class="comment-copy">thanks a million</span>
