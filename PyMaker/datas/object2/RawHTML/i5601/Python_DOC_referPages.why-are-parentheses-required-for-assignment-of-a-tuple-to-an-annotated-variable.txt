<div class="post-text" itemprop="text">
<p>When I have a line that looks like this:</p>
<pre><code>t: Tuple[int, int] = 0, 1
</code></pre>
<p>… I get a <code>SyntaxError</code>, but when I do this:</p>
<pre><code>t = 0, 1
t: Tuple[int, int] = (0, 1)
</code></pre>
<p>… it's valid.</p>
<p>Is this intentional? Is there an ambiguity in the parse tree with a type specifier and no parens?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is intentional. In the original proposal for variable annotations on the python-ideas mailing list, Guido van Rossum <a href="https://mail.python.org/pipermail/python-ideas/2016-August/041294.html" rel="nofollow noreferrer">writes</a>:</p>
<pre class="lang-none prettyprint-override"><code>Third, there's an annoying thing with tuples/commas here. On the one
hand, in a function declaration, we may see (a: int = 0, b: str = '').
On the other hand, in an assignment, we may see

a, b = 0, ''

Suppose we wanted to add types to the latter. Would we write this as

a, b: int, str = 0, ''

or as

a: int, b: str = 0, ''

??? Personally I think neither is acceptable, and we should just write it as

a: int = 0
b: str = ''

but this is a slight step back from

a, b = 0, ''   # type: (int, str)
</code></pre>
<p>… and then, in the relevant GitHub <a href="https://github.com/python/typing/issues/258" rel="nofollow noreferrer">issue</a>: </p>
<blockquote>
<h3>Multiple types/variables</h3>
<p>An obvious question is whether to allow combining type declarations
  with tuple unpacking (e.g. <code>a, b, c = x</code>). This leads to (real or
  perceived) ambiguity, and I propose <em>not</em> to support this. If there's a
  type annotation there can only be one variable to its left, and one
  value to its right. <strong>This still allows tuple <em>packing</em> (just put the
  tuple in parentheses)</strong> but it disallows tuple <em>unpacking</em>. (It's been
  proposed to allow multiple parenthesized variable names, or types
  inside parentheses, but none of these look attractive to me.)</p>
</blockquote>
</div>
<span class="comment-copy">I don't know the rationale, but this is explicitly called out in the docs and the original PEP.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/simple_stmts.html#annotated-assignment-statements" rel="nofollow noreferrer">Docs</a>: "The difference from normal Assignment statements is that only single target and only <i>single right hand side value</i> is allowed."</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0526/#where-annotations-aren-t-allowed" rel="nofollow noreferrer">PEP 526</a>: "Only single assignment targets and <i>single right hand side values</i> are allowed."</span>
