<div class="post-text" itemprop="text">
<p>Why doesn't following code print anything:</p>
<pre><code>#!/usr/bin/python3
class test:
    def do_someting(self,value):
        print(value)
        return value

    def fun1(self):
        map(self.do_someting,range(10))

if __name__=="__main__":
    t = test()
    t.fun1()
</code></pre>
<p>I'm executing the above code in Python 3. I think i'm missing something very basic but not able to figure it out.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map()</code> returns an iterator</a>, and will not process elements until you ask it to.</p>
<p>Turn it into a list to force all elements to be processed:</p>
<pre><code>list(map(self.do_someting,range(10)))
</code></pre>
<p>or use <code>collections.deque()</code> with the length set to 0 to not produce a list if you don't need the map output:</p>
<pre><code>from collections import deque

deque(map(self.do_someting, range(10)))
</code></pre>
<p>but note that simply using a <code>for</code> loop is far more readable for any future maintainers of your code:</p>
<pre><code>for i in range(10):
    self.do_someting(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Before Python 3, map() returned a list, not an iterator.  So your example would work in Python 2.7.</p>
<p>list() creates a new list by iterating over its argument.  ( list() is NOT JUST a type conversion from say tuple to list.  So list(list((1,2))) returns [1,2]. )  So list(map(...)) is backwards compatible with Python 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just want to add the following:</p>
<p><code>With multiple iterables, the iterator stops when the shortest iterable is exhausted</code> [ <a href="https://docs.python.org/3.4/library/functions.html#map" rel="nofollow">https://docs.python.org/3.4/library/functions.html#map</a> ]</p>
<p>Python 2.7.6 (default, Mar 22 2014, 22:59:56) </p>
<pre><code>&gt;&gt;&gt; list(map(lambda a, b: [a, b], [1, 2, 3], ['a', 'b']))
[[1, 'a'], [2, 'b'], [3, None]]
</code></pre>
<p>Python 3.4.0 (default, Apr 11 2014, 13:05:11) </p>
<pre><code>&gt;&gt;&gt; list(map(lambda a, b: [a, b], [1, 2, 3], ['a', 'b']))
[[1, 'a'], [2, 'b']]
</code></pre>
<p>That difference makes the answer about simple wrapping with <code>list(...)</code> not completely correct</p>
<p>The same could be achieved with:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [[a, b] for a, b in itertools.zip_longest([1, 2, 3], ['a', 'b'])]
[[1, 'a'], [2, 'b'], [3, None]]
</code></pre>
</div>
<span class="comment-copy">Also, the OP may just be missing a <code>return</code>, but it's generally not considered good practice to use <code>map</code> to execute a function repeatedly for side-effects (in this case <code>print</code>) as opposed to working with the result set...</span>
<span class="comment-copy">@JonClements: The OP is playing around with the map function and created a short piece of example code to show that things didn't work as he expected, I'd say.</span>
<span class="comment-copy">Creating a temporary list is not the best thing, I'd say. The <b><code>consume</code> <a href="http://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">recipe</a></b> may be better.</span>
<span class="comment-copy">Also, to avoid creating unneeded list (probably large), the simplest way might be to use <code>all</code> built-in function: <code>all(map(self.do_something, range(10)))</code> - for this construct the only overhead over trivial <code>for i in range(10): self.do_something(i)</code> is calculating boolean value.</span>
<span class="comment-copy">@MarSoft: the best way to consume without creating a list is to use <code>collections.deque(iterator, maxlen=0)</code>; <code>all()</code> requires all values to be <i>True</i>; e.g. if you produce <code>None</code> values <code>all()</code> exits early.</span>
