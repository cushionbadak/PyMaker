<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; sentence = "Thomas Jefferson began building Monticello at the age of 26."
&gt;&gt;&gt; tokens1 = re.split(r"([-\s.,;!?])+", sentence)
&gt;&gt;&gt; tokens2 = re.split(r"[-\s.,;!?]+", sentence)
&gt;&gt;&gt; tokens1 = ['Thomas', ' ', 'Jefferson', ' ', 'began', ' ', 'building', ' ', 'Monticello', ' ', 'at', ' ', 'the', ' ', 'age', ' ', 'of', ' ', '26', '.', '']
&gt;&gt;&gt; tokens2 = ['Thomas', 'Jefferson', 'began', 'building', 'Monticello', 'at', 'the', 'age', 'of', '26', '']
</code></pre>
<p>Can you explain the purpose of <code>(</code> and <code>)</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>(..)</code> in a regex denotes a <em>capturing group</em> (aka "capturing parenthesis"). They are used when you want to extract values out of a pattern. In this case, you are using <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a> function which behaves in a specific way when the pattern has capturing groups. According to the documentation:</p>
<blockquote>
<p>re.split(pattern, string, maxsplit=0, flags=0)</p>
<p>Split string by the occurrences of pattern. <strong>If capturing parentheses
  are used in pattern, then the text of all groups in the pattern are
  also returned as part of the resulting list.</strong></p>
</blockquote>
<p>So normally, the delimiters used to split the string are not present in the result, like in your second example. However, if you use <code>()</code>, the text captured in the groups will also be in the result of the split. This is why you get a lot of <code>' '</code> in the first example. That is what is captured by your group <code>([-\s.,;!?])</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>With a capturing group (<code>()</code>) in the regex used to split a string, split will include the captured parts.</p>
<p>In your case, you are splitting on one or more characters of whitespace and/or punctuation, and capturing the last of those characters to include in the split parts, which seems kind of a weird thing to do.  I'd have expected you might want to capture all of the separator, which would look like <code>r"([-\s.,;!?]+)"</code> (capturing one or more characters whitespace/punctuation characters, rather than matching one or more but only capturing the last).</p>
</div>
<span class="comment-copy">Inside a regular expression, <code>(..)</code> is a "capture group" and <code>[..]</code> is a "character class". The documentation will explain what these mean (and how capture groups apply to split) in more detail.</span>
<span class="comment-copy">Read the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs</a> before asking here.</span>
<span class="comment-copy">@user2864740 Yes, but why would simply <i>capturing</i> <code>([...])</code> change what is matched?</span>
<span class="comment-copy">@TimBiegeleisen <code>(..)</code> changes the behavior of <code>split</code>. Hence the follow-on sentence. There is definitely some duplicates..</span>
<span class="comment-copy">@TimBiegeleisen it doesn't change what is matched.  exactly the same things are matched.  it does, however, change what split returns (a very different thing)</span>
