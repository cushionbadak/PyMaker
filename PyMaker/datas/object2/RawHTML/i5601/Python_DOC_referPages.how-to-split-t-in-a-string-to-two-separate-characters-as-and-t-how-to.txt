<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2081640/what-exactly-do-u-and-r-string-flags-do-and-what-are-raw-string-literals">What exactly do “u” and “r” string flags do, and what are raw string literals?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/4703516/how-to-write-string-literals-in-python-without-having-to-escape-them">How to write string literals in python without having to escape them?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/3517802/python-raw-literal-string">Python raw literal string</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to split a string in python into a list of characters. I know that there are a lot of ways to do this in python, but I have a case where those methods don't give me the desired results. </p>
<p>The problem happens when I have special characters like '\t' that is explicitly written in the string (and I don't mean the real tab).</p>
<p>Example:</p>
<pre><code>string = "    Hello \t World."
</code></pre>
<p>the output I need is:</p>
<pre><code>list_of_chars = [' ', ' ', ' ', ' ', 'H', 'e', 'l', 'l', 'o', ' ', '\', 't', ' ', 'W', 'o', 'r', 'l', 'd', '.']
</code></pre>
<p>but when I use the methods that are given in <a href="https://stackoverflow.com/questions/4978787/how-to-split-a-string-into-array-of-characters">this question</a>, I get a list that contains '/t' as whole string - not separated. </p>
<p>Example:</p>
<pre><code>&gt; list(string)
&gt; ['H', 'e', 'l', 'l', 'o', 'w', ' ', '\t', ' ', 'W', 'o', 'r', 'l', 'd', '.']
</code></pre>
<p>I want to know why this happens and how to get what I want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can substitute your string accordingly:</p>
<pre><code>import itertools
txt = "    Hello \t World."

specials = { 
    '\a' : '\\a', #     ASCII Bell (BEL)
    '\b' : '\\b', #     ASCII Backspace (BS)
    '\f' : '\\f', #     ASCII Formfeed (FF)
    '\n' : '\\n', #     ASCII Linefeed (LF)
    '\r' : '\\r', #     ASCII Carriage Return (CR)
    '\t' : '\\t', #     ASCII Horizontal Tab (TAB)
    '\v' : '\\v'  #     ASCII Vertical Tab (VT)
}

# edited out: # txt2 = "".join([x if x not in specials else specials[x] for x in txt])
txt2 = itertools.chain(* [(list(specials[x]) if x in specials else [x]) for x in txt])

print(list(txt2))
</code></pre>
<p>Output:</p>
<pre><code>[' ', ' ', ' ', ' ', 'H', 'e', 'l', 'l', 'o', ' ', '\\', 't', ' ', 'W', 
 'o', 'r', 'l', 'd', '.'] 
</code></pre>
<p>The list comprehension looks more  "positive" and uses <code>list(itertools.chain(*[...]))</code> instead of <code>list("".join([...]))</code> which should be more performant.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should take a look at <a href="https://docs.python.org/2.0/ref/strings.html" rel="nofollow noreferrer">String Literal</a> document, which says:</p>
<blockquote>
<p>The backslash (<code>\</code>) character is used to escape characters that otherwise have a special meaning, such as newline, backslash itself, or the quote character. String literals may optionally be prefixed with a letter <code>r' or</code>R'; such strings are called raw strings and use different rules for backslash escape sequences.</p>
</blockquote>
<p>In your example string, <code>\t</code> are not two characters but a single character which represents <em>ASCII Horizontal Tab (TAB)</em>.</p>
<p>In order to tell your Python interpreter that these two are separate character, you should be using raw string (using <strong>r</strong> before string <strong>""</strong>)as:</p>
<pre><code>&gt;&gt;&gt; list(r"    Hello \t World.")
[' ', ' ', ' ', ' ', 'H', 'e', 'l', 'l', 'o', ' ', '\\', 't', ' ', 'W', 'o', 'r', 'l', 'd', '.']
</code></pre>
<p>But here also you'll see two <code>\\</code> in the resultant list, which is just a Python's way of representing <code>\</code>.</p>
<p>For Python interpreter <code>'\'</code> is an invalid string because <code>\'</code> in a string represent <em>Single quote (')</em>. Hence, when you do <code>'\'</code>, it raises below error because for Python there is no end quote present in the string:</p>
<pre><code>&gt;&gt;&gt; '\'
  File "&lt;stdin&gt;", line 1
    '\'
      ^
SyntaxError: EOL while scanning string literal
</code></pre>
<hr/>
<p>If you can't declare your string as raw string (as it's already defined or imported from some other source), you may convert it to byte string by setting encoding as "unicode-escape":</p>
<pre><code>&gt;&gt;&gt; my_str = "    Hello \t World."

&gt;&gt;&gt; unicode_escaped_string = my_str.encode('unicode-escape')
&gt;&gt;&gt; unicode_escaped_string
b'    Hello \\t World.'
</code></pre>
<p>Since it is a byte-string, you need to call <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer"><strong><code>chr</code></strong></a> to get the corresponding character value of each byte. For example:</p>
<pre><code>&gt;&gt;&gt; list(map(chr, unicode_escaped_string))
[' ', ' ', ' ', ' ', 'H', 'e', 'l', 'l', 'o', ' ', '\\', 't', ' ', 'W', 'o', 'r', 'l', 'd', '.']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could maybe convert to a Python's literal string and then split character by character?</p>
<pre><code>string = "    Hello \t World."
string_raw = string.encode('unicode-escape')
print([ch for ch in string_raw])
print([chr(ch) for ch in string_raw])
</code></pre>
<p>Outputs:</p>
<pre><code>[32, 32, 32, 32, 72, 101, 108, 108, 111, 32, 92, 116, 32, 87, 111, 114, 108, 100, 46]
[' ', ' ', ' ', ' ', 'H', 'e', 'l', 'l', 'o', ' ', '\\', 't', ' ', 'W', 'o', 'r', 'l', 'd', '.']
</code></pre>
<p>The Ascii <code>92</code> is a single backlash, even though when you print it in a terminal, it'll show it escaped.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>\t</code> means tab, if you want to explicitely have a <code>\</code> character, you'll need to escape it in your string:</p>
<pre><code>string = "    Hello \\t World."
</code></pre>
<p>Or use a raw string:</p>
<pre><code>string = r"    Hello \t World."
</code></pre>
</div>
<span class="comment-copy"><code>string = [x for x in r"    Hello \t World."]</code> is the closest you'll get.</span>
<span class="comment-copy">The output you need is impossible. That's a syntax error.</span>
<span class="comment-copy">If you typed <code>"    Hello \t World."</code> in Python, this is the real tab. A string containing backslash-t would be either <code>r"    Hello \t World."</code> or <code>"    Hello \\t World."</code>. Do you have the string in the code or are you reading a file?...</span>
<span class="comment-copy">@dividebyzero I am reading a source code file of a high-level like language, and it have strings like the one I mentioned.</span>
<span class="comment-copy">... or simpy <code>txt2 = list(txt.translate(str.maketrans(specials)))</code>. There's really no need for <code>itertools</code> either way</span>
<span class="comment-copy">Alternatively: <code>txt2 = [c for x in txt for c in specials.get(x, x)]</code>.</span>
<span class="comment-copy">@vaultah Cool. Only new about <code>[key]</code> and <code>.keys</code> - a <code>.get()</code> with a default - should have thought it would be provided. Found it here: <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#dict</a>. I read about the <a href="https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python">"flatten inner lists"</a> syntax but cant get my head around it. Thanks for commenting - gonna read up on translate next.</span>
<span class="comment-copy">What if the OP can't change the string literal or it's defined outside of the program?</span>
