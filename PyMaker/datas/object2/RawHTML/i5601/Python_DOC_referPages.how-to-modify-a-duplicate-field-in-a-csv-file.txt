<div class="post-text" itemprop="text">
<p>I want to modified field email in csv file for example <code>mycsv_file.csv</code>:</p>
<pre class="lang-none prettyprint-override"><code>john@gmail.com
mary@gmail.com
klarck@gmail.com
ralf@gmail.com
john@gmail.com
mary@gmail.com
klarck@gmail.com
</code></pre>
<p>Code for reading csv file:</p>
<pre><code>import csv

with open('mycsv_file.csv', 'r') as csv_file: 
     spamreader = csv.reader(csv_file)
     for line in spamreader:
         ord = next.spamreader
         for k in ored:       
            if line[0]==k[0]:
               line[0]==????
</code></pre>
<p>Result I want:</p>
<pre class="lang-none prettyprint-override"><code>john@gmail.com
mary@gmail.com
klarck@gmail.com
ralf@gmail.com
john1@gmail.com
mary1@gmail.com
klarck1@gmail.com
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to keep track of how many times an email address has been seen so far and know what number to attach as a suffix to make it unique. To illustrate this, I added one line to the end of the sample input so it is now:</p>
<pre class="lang-none prettyprint-override"><code>john@gmail.com
mary@gmail.com
klarck@gmail.com
ralf@gmail.com
john@gmail.com
mary@gmail.com
klarck@gmail.com
mary@gmail.com,third occurrence
</code></pre>
<p>Here's the code:</p>
<pre><code>import csv
from collections import Counter

# Note: For Python 2.x, use "open('mycsv_file.csv', 'rb')" below.
with open('mycsv_file.csv', 'r', newline='') as csv_file:
     occurrences = Counter()
     for line in csv.reader(csv_file):
         email = line[0]
         if email in occurrences:
            head, tail = email.split('@')
            print('{}@{}'.format(head+str(occurrences[email]), tail))
            occurrences[email] += 1
         else:
            print('{}'.format(email))
            occurrences[email] = 1
</code></pre>
<p>Output (note the <code>mary2@gmail.com</code> generated at the end, since it has already be seen twice):</p>
<pre class="lang-none prettyprint-override"><code>john@gmail.com
mary@gmail.com
klarck@gmail.com
ralf@gmail.com
john1@gmail.com
mary1@gmail.com
klarck1@gmail.com
mary2@gmail.com
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd keep track of known addresses in a Dictionary structure, and append the number to the address if I'd seen it before.</p>
<p>This solution will keep track of previous addresses, and append a number to them if they have been seen before.</p>
<pre><code>addresses = []  # [ "user@host.com"]
known_addresses = {}  # { "user@host.com": 0 }

with open('mycsv_file.csv', 'r') as csv_file:
    reader = csv.reader(csv_file)
    for line in reader:
        address = line[0]
        if address in known_addresses:
            known_addresses[address] += 1
            email, host = address.split("@")
            number = str(known_addresses[address])
            address = email + number + '@' + host
        else:
            known_addresses[address] = 0
        addresses.append(address)
</code></pre>
<p>However, it won't know if an incremented address appears later in the list, so there could still be duplicates.</p>
<p>For instance, if your list was</p>
<pre><code>mary@gmail.com
mary@gmail.com
mary1@gmail.com
</code></pre>
<p>you'd get the output</p>
<pre><code>mary@gmail.com
mary1@gmail.com
mary1@gmail.com
</code></pre>
<p>If you want to ensure that all addresses are unique after processing, without loosing any in the original set of addresses, you can read all addresses and process them to increment any duplicates.</p>
<pre><code># all read addresses from file, keeping track of duplication
addresses = {} # { "user@host.com": 0 }

# addresses which have had duplication removed
processed_addresses = set()s

with open('mycsv_file.csv', 'r') as csv_file:
    reader = csv.reader(csv_file)
    for line in reader:
        address = line[0]
        if address in addresses:
            addresses[address] += 1
        else:
            addresses[address] = 1

for address, count in addresses.items(): # .iteritems() if python 2.7
    num = 1
    for _ in range(count):
        if address not in processed_addresses:
            processed_addresses.add(address)
        else:
            parts = address.split('@')
            added = False
            while not added:
                tentative_address = parts[0] + str(num) + '@' + parts[1]
                if tentative_address not in processed_addresses:
                    processed_addresses.add(tentative_address)
                    added = True
                num += 1
</code></pre>
<p>Given the input</p>
<pre><code>mary@gmail.com
mary@gmail.com
mary1@gmail.com
</code></pre>
<p>This would produce</p>
<pre><code>mary@gmail.com
mary1@gmail.com
mary11@gmail.com
</code></pre>
<p>If you need a List of addresses, you can turn the processed entry set to a list using the following function.</p>
<pre><code>addresses = list(processed_addresses)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Read, check and write new file in one loop.</p>
<pre><code>from csv import reader,writer
names = []
with open("Emails") as fin, open("Emails_New","w") as fout:                                                                                      
    spamreader = reader(fin, delimiter="@")                                                                                                      
    spamwriter = writer(fout, delimiter="@")                                                                                                     
    for name, domain in spamreader:                                                                                                              
        names.append(name)                                                                                                                       
        if names.count(name) &gt; 1:                                                                                                                
            new_name = name + str(names.count(name) - 1)
        else:
            new_name = name
        w = spamwriter.writerow([new_name, domain])

$ cat Emails
john@gmail.com
mary@gmail.com
klarck@gmail.com
ralf@gmail.com
john@gmail.com
mary@gmail.com
klarck@gmail.com
mary@gmail.com

$ cat Emails_New
john@gmail.com
mary@gmail.com
klarck@gmail.com
ralf@gmail.com
john1@gmail.com
mary1@gmail.com
klarck1@gmail.com
mary2@gmail.com
</code></pre>
</div>
<span class="comment-copy">What should happen if there's already an entry "mary1@gmail.com" in the list?</span>
