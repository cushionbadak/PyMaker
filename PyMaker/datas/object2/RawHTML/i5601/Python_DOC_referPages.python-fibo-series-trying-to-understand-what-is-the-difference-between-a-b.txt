<div class="post-text" itemprop="text">
<p>I am not sure what would be an appropriate heading for this question and this can be a repeated question as well. So please guide accordingly.</p>
<p>I am new to python programming. I have this simple code to generate Fibonacci series.</p>
<pre><code>1: def fibo(n):
2:    a = 0
3:    b = 1
4:    for x in range(n):
5:        print (a, end=' ')
6:        #a, b = b, a+b
7:        a = b
8:        b = a+b
9:    print()
10: num = int(input("enter n value: "))
11: print(fibo(num))
</code></pre>
<p>If I execute the above code as-is the result I get is as follows</p>
<pre><code>enter n value: 10
0 1 2 4 8 16 32 64 128 256 
</code></pre>
<p>If uncomment #6 and comment lines #7 and #8 the result I get is the actual fibo series.</p>
<pre><code>enter n value: 10
0 1 1 2 3 5 8 13 21 34 
</code></pre>
<p>I would like to know what is the difference between</p>
<pre><code>a, b = b, a + b 
</code></pre>
<p>and </p>
<pre><code>a = b
b = a + b
</code></pre>
<p>Programming IDE used: PyCharm Community 2017.3</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = b
b = a + b
</code></pre>
<p>is actually:</p>
<pre><code>a = b
b = b + b
</code></pre>
<p>what you want is:</p>
<pre><code>a = b
b = old_value_of_a + b
</code></pre>
<p>When you do
<code>a, b = b, a + b</code>
it really is doing:</p>
<pre><code>tmp_a = b
tmp_b = a + b
a = tmp_a
b = tmp_b
</code></pre>
<p>which is what you want</p>
</div>
<div class="post-text" itemprop="text">
<p>In line 7, you've already assigned the value in <code>b</code> to <code>a</code>, so in line 8, new value for <code>b</code> is actually double the old b's value. </p>
<p>While in line 6, the values on the right side of <code>=</code> will be using the old values, that's why you could get Fibo series.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">Assignment Statements</a> assigns reference of source variable to target variable. Let walk through an example to understand more</p>
<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = 6
&gt;&gt;&gt; a = b
</code></pre>
<p>In this example <code>b</code> is source variable and <code>a</code> is the target variable. Now memory address for both of these variables are same. We can confirm this as well</p>
<pre><code>&gt;&gt;&gt; hex(id(a)), hex(id(b))
&gt;&gt;&gt; ('0x1002739e0', '0x1002739e0')
</code></pre>
<p>Another test to confirm this is to use <a href="https://stackoverflow.com/questions/13650293/understanding-pythons-is-operator">is</a> operator</p>
<pre><code>&gt;&gt;&gt; a is b
&gt;&gt;&gt; True
</code></pre>
<p>Now coming back to your example. First statement</p>
<pre><code>&gt;&gt;&gt; a, b = b, a + b 
</code></pre>
<p>Assignes <code>b</code> to <code>a</code> and <code>(a+b)</code> to <code>b</code>. This happens as a single operation so both variables are different. We can apply above tests to confirm this</p>
<pre><code>&gt;&gt;&gt; a is b
&gt;&gt;&gt; False

&gt;&gt;&gt; hex(id(a)), hex(id(b))
&gt;&gt;&gt; ('0x1002739e0', '0x2008739t0')
</code></pre>
<p>The second statement</p>
<pre><code> &gt;&gt;&gt; a = b
 &gt;&gt;&gt; b = a + b
</code></pre>
<p>Assignes <code>b</code> to <code>a</code> and then <code>(a+b)</code> to <code>b</code>. These are two different statements, so at first step <code>a</code> and <code>b</code> are already identical. Thus the second statement is equivalent to <code>b = b + b</code>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Thought make it simple so anyone can understand it 
if you use this kind of syntax </p>
<pre><code>a = 10
b = 20

a = b
b = a+b

print (a)
print (b)
</code></pre>
<p>after initially assigning a = 10 it will be assigning a = 20 since python is dynamically typed language it will change the value of variable a from 10 to 20
so the result will be like </p>
<pre><code>a=20
b=40
</code></pre>
<p>but if we use </p>
<pre><code>a = 10
b = 20

a,b = b,a+b

print (a)
print (b)
</code></pre>
<p>this will be assigning the values in a single line so the values of a and b will be exactly used from what it is initialised above it and the result will be like 
which is the correct solution</p>
<pre><code>a=20
b=30
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the <code>#</code> line is pythonic solution. But if you got confused,you can you use a variable which is temporary. you can assign the value <code>temp</code> before, then you can change the values</p>
</div>
<span class="comment-copy">both are same in python it is more easy to assign multiple values in a single line</span>
<span class="comment-copy">@MidhunMohan That should be an answer, not a comment. (Well in any case it's not correct, but things like that which answer the question should be posted as answers.)</span>
<span class="comment-copy">@DavidZ i thought to give the author a hint so that he could come up with more specific question since the author is a newbie i thought like giving the author some hints will help to solve the issue by himself</span>
<span class="comment-copy">@MidhunMohan That's a reasonable thought, but the thing is, what you posted is an outright answer to the question, not just a hint. Besides, the goal here is not just to help askers get their questions answered, but also to have those answers documented for other people who come along with the same question. Hints are not that helpful for those other people.</span>
<span class="comment-copy">@MidhunMohan Yes. At least, next time you find yourself in a similar situation, make it an answer. (This one time, it doesn't really matter.)</span>
<span class="comment-copy">this is interesting. So a,b=b,a+b the interpreter will do this temporary allocation of the respective values and then processes it. But one part is still confusing, what is the order or sequence of execution in this? If a=b is applied first then the value gets replaced correct?</span>
<span class="comment-copy">It will evaluate the right hand side of the <code>=</code> first, as usual. The right hand side will create a tuple (a pair basically) of values that will then be assigned ti the left hand side. So it literally translates to what I wrote in the answer</span>
<span class="comment-copy">thanks of the heads up</span>
<span class="comment-copy">You may want to check this out: <a href="https://wiki.python.org/moin/TupleSyntax" rel="nofollow noreferrer">wiki.python.org/moin/TupleSyntax</a> . It is building a tuple on the right hand side, then assigning it to the left hand side.</span>
<span class="comment-copy">Actually this is probably a better link: <a href="http://interactivepython.org/runestone/static/thinkcspy/Lists/TupleAssignment.html" rel="nofollow noreferrer">interactivepython.org/runestone/static/thinkcspy/Lists/â€¦</a></span>
<span class="comment-copy">your answer has give me a full explanation and understanding. Thank you very much. Sorry cannot mark your response as answer too.</span>
