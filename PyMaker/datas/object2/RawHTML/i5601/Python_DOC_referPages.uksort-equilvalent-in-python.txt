<div class="post-text" itemprop="text">
<p>been trying to work out how to port this PHP code into Python 3 code but I can't for the life of me understand how it functions, let alone port it. 
The code I'm trying to port is:</p>
<pre><code>uksort($data, function ($a, $b) use ($codes) {
            $a = $codes[$a];
            $b = $codes[$b];
            if ($a &lt; $b) {
                return -1;
            } elseif ($a &gt; $b) {
                return 1;
            } else {
                return 0;
            }
        });
</code></pre>
<p>Which sorts an associative array based on the values of each key. However, what I don't understand is how the sorting actually works - I've googled around and I cannot seem to find what the return values refer to.</p>
<p>Hopefully someone can help me with some pointers in regards to writing a Python port of this PHP function or at least point me along the right lines.</p>
<p>Of course I'd use the collection module's ordered dicts but I have no idea how I'd actually create a sorting function to emulate what is going on in the PHP code.</p>
<p>Edit: to clarify I need to sort an ordered dict based on the values of another ordered dict. For example here  Ineed to sort data by the values of codes. At least I think I do to my current understanding.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you want to pass a function to the <code>key</code> argument to the <code>sorted</code> function. Something like this:</p>
<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c']
&gt;&gt;&gt; codes = {'a': 3, 'b': 1, 'c':2}
&gt;&gt;&gt; sorted(a, key=lambda e: codes[e])
['b', 'c', 'a']
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#sorted</a></p>
<p>Edit: To sort an <code>OrderedDict</code> as described in the question you'll need to use the list of keys returned by <code>sorted</code> to build a new one - <code>o</code> is an existing <code>OrderedDict</code>:</p>
<pre><code>&gt;&gt;&gt; o2 = OrderedDict()
&gt;&gt;&gt; for k in sorted(o, key=lambda e: codes[e]):
...     o2[k] = o[k]
</code></pre>
</div>
<span class="comment-copy"><a href="http://php.net/manual/en/function.usort.php" rel="nofollow noreferrer"><i>The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.</i></a>. Nowadays in PHP 7, it's cleaner to use the <a href="http://php.net/manual/en/migration70.new-features.php" rel="nofollow noreferrer">spaceship operator</a></span>
<span class="comment-copy">Ah so the first argument is compared to the second one, if it is less, the first argument will be placed before the second, if they are the same they will not change and if the first is greater than the second, it will be placed after? Is that how example function works? Just need to think of an efficient way to port this to python.</span>
<span class="comment-copy">that'll work when a is also a dict as well would it not? If so that's perfect. Exactly what I was looking for thank you!</span>
<span class="comment-copy">Ah, no (I missed your edit) - <code>sorted</code> returns a list of the sorted keys so you'll then need to create a new <code>OrderedDict</code> using those keys.</span>
<span class="comment-copy">this seemed to work <code>sorted(data, key=lambda e: hashcodes[e])</code> where <code>data</code> and <code>hashcodes</code> are both sorted dicts. In that case it returned a correctly sorted dict fine?</span>
