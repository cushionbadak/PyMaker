<div class="post-text" itemprop="text">
<p>What are metaclasses and what do we use them for?</p>
</div>
<div class="post-text" itemprop="text">
<p>A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>
<p>While in Python you can use arbitrary callables for metaclasses (like <a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037">Jerub</a> shows), the better approach is to make it an actual class itself. <code>type</code> is the usual metaclass in Python. <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>
<p>A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry or replace the class with something else entirely.</p>
<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>
<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>
<p>Here's an aggregated example of the bits and pieces:</p>
<pre><code>def make_hook(f):
    """Decorator to turn 'foo' method into '__foo__'"""
    f.is_hook = 1
    return f

class MyType(type):
    def __new__(mcls, name, bases, attrs):

        if name.startswith('None'):
            return None

        # Go over attributes and see if they should be renamed.
        newattrs = {}
        for attrname, attrvalue in attrs.iteritems():
            if getattr(attrvalue, 'is_hook', 0):
                newattrs['__%s__' % attrname] = attrvalue
            else:
                newattrs[attrname] = attrvalue

        return super(MyType, mcls).__new__(mcls, name, bases, newattrs)

    def __init__(self, name, bases, attrs):
        super(MyType, self).__init__(name, bases, attrs)

        # classregistry.register(self, self.interfaces)
        print "Would register class %s now." % self

    def __add__(self, other):
        class AutoClass(self, other):
            pass
        return AutoClass
        # Alternatively, to autogenerate the classname as well as the class:
        # return type(self.__name__ + other.__name__, (self, other), {})

    def unregister(self):
        # classregistry.unregister(self)
        print "Would unregister class %s now." % self

class MyObject:
    __metaclass__ = MyType


class NoneSample(MyObject):
    pass

# Will print "NoneType None"
print type(NoneSample), repr(NoneSample)

class Example(MyObject):
    def __init__(self, value):
        self.value = value
    @make_hook
    def add(self, other):
        return self.__class__(self.value + other.value)

# Will unregister the class
Example.unregister()

inst = Example(10)
# Will fail with an AttributeError
#inst.unregister()

print inst + inst
class Sibling(MyObject):
    pass

ExampleSibling = Example + Sibling
# ExampleSibling is now a subclass of both Example and Sibling (with no
# content of its own) although it will believe it's called 'AutoClass'
print ExampleSibling
print ExampleSibling.__mro__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Classes as objects</h1>
<p>Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.</p>
<p>In most languages, classes are just pieces of code that describe how to produce an object. That's kinda true in Python too:</p>
<pre><code>&gt;&gt;&gt; class ObjectCreator(object):
...       pass
...

&gt;&gt;&gt; my_object = ObjectCreator()
&gt;&gt;&gt; print(my_object)
&lt;__main__.ObjectCreator object at 0x8974f2c&gt;
</code></pre>
<p>But classes are more than that in Python. Classes are objects too.</p>
<p>Yes, objects.</p>
<p>As soon as you use the keyword <code>class</code>, Python executes it and creates
an OBJECT. The instruction</p>
<pre><code>&gt;&gt;&gt; class ObjectCreator(object):
...       pass
...
</code></pre>
<p>creates in memory an object with the name "ObjectCreator".</p>
<p><strong>This object (the class) is itself capable of creating objects (the instances),
and this is why it's a class</strong>.</p>
<p>But still, it's an object, and therefore:</p>
<ul>
<li>you can assign it to a variable</li>
<li>you can copy it</li>
<li>you can add attributes to it</li>
<li>you can pass it as a function parameter</li>
</ul>
<p>e.g.:</p>
<pre><code>&gt;&gt;&gt; print(ObjectCreator) # you can print a class because it's an object
&lt;class '__main__.ObjectCreator'&gt;
&gt;&gt;&gt; def echo(o):
...       print(o)
...
&gt;&gt;&gt; echo(ObjectCreator) # you can pass a class as a parameter
&lt;class '__main__.ObjectCreator'&gt;
&gt;&gt;&gt; print(hasattr(ObjectCreator, 'new_attribute'))
False
&gt;&gt;&gt; ObjectCreator.new_attribute = 'foo' # you can add attributes to a class
&gt;&gt;&gt; print(hasattr(ObjectCreator, 'new_attribute'))
True
&gt;&gt;&gt; print(ObjectCreator.new_attribute)
foo
&gt;&gt;&gt; ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable
&gt;&gt;&gt; print(ObjectCreatorMirror.new_attribute)
foo
&gt;&gt;&gt; print(ObjectCreatorMirror())
&lt;__main__.ObjectCreator object at 0x8997b4c&gt;
</code></pre>
<h1>Creating classes dynamically</h1>
<p>Since classes are objects, you can create them on the fly, like any object.</p>
<p>First, you can create a class in a function using <code>class</code>:</p>
<pre><code>&gt;&gt;&gt; def choose_class(name):
...     if name == 'foo':
...         class Foo(object):
...             pass
...         return Foo # return the class, not an instance
...     else:
...         class Bar(object):
...             pass
...         return Bar
...
&gt;&gt;&gt; MyClass = choose_class('foo')
&gt;&gt;&gt; print(MyClass) # the function returns a class, not an instance
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; print(MyClass()) # you can create an object from this class
&lt;__main__.Foo object at 0x89c6d4c&gt;
</code></pre>
<p>But it's not so dynamic, since you still have to write the whole class yourself.</p>
<p>Since classes are objects, they must be generated by something.</p>
<p>When you use the <code>class</code> keyword, Python creates this object automatically. But as
with most things in Python, it gives you a way to do it manually.</p>
<p>Remember the function <code>type</code>? The good old function that lets you know what
type an object is:</p>
<pre><code>&gt;&gt;&gt; print(type(1))
&lt;type 'int'&gt;
&gt;&gt;&gt; print(type("1"))
&lt;type 'str'&gt;
&gt;&gt;&gt; print(type(ObjectCreator))
&lt;type 'type'&gt;
&gt;&gt;&gt; print(type(ObjectCreator()))
&lt;class '__main__.ObjectCreator'&gt;
</code></pre>
<p>Well, <a href="http://docs.python.org/2/library/functions.html#type" rel="noreferrer"><code>type</code></a> has a completely different ability, it can also create classes on the fly. <code>type</code> can take the description of a class as parameters,
and return a class.</p>
<p>(I  know, it's silly that the same function can have two completely different uses according to the parameters you pass to it. It's an issue due to backwards
compatibility in Python)</p>
<p><code>type</code> works this way:</p>
<pre><code>type(name of the class,
     tuple of the parent class (for inheritance, can be empty),
     dictionary containing attributes names and values)
</code></pre>
<p>e.g.:</p>
<pre><code>&gt;&gt;&gt; class MyShinyClass(object):
...       pass
</code></pre>
<p>can be created manually this way:</p>
<pre><code>&gt;&gt;&gt; MyShinyClass = type('MyShinyClass', (), {}) # returns a class object
&gt;&gt;&gt; print(MyShinyClass)
&lt;class '__main__.MyShinyClass'&gt;
&gt;&gt;&gt; print(MyShinyClass()) # create an instance with the class
&lt;__main__.MyShinyClass object at 0x8997cec&gt;
</code></pre>
<p>You'll notice that we use "MyShinyClass" as the name of the class
and as the variable to hold the class reference. They can be different,
but there is no reason to complicate things.</p>
<p><code>type</code> accepts a dictionary to define the attributes of the class. So:</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...       bar = True
</code></pre>
<p>Can be translated to:</p>
<pre><code>&gt;&gt;&gt; Foo = type('Foo', (), {'bar':True})
</code></pre>
<p>And used as a normal class:</p>
<pre><code>&gt;&gt;&gt; print(Foo)
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; print(Foo.bar)
True
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; print(f)
&lt;__main__.Foo object at 0x8a9b84c&gt;
&gt;&gt;&gt; print(f.bar)
True
</code></pre>
<p>And of course, you can inherit from it, so:</p>
<pre><code>&gt;&gt;&gt;   class FooChild(Foo):
...         pass
</code></pre>
<p>would be:</p>
<pre><code>&gt;&gt;&gt; FooChild = type('FooChild', (Foo,), {})
&gt;&gt;&gt; print(FooChild)
&lt;class '__main__.FooChild'&gt;
&gt;&gt;&gt; print(FooChild.bar) # bar is inherited from Foo
True
</code></pre>
<p>Eventually you'll want to add methods to your class. Just define a function
with the proper signature and assign it as an attribute.</p>
<pre><code>&gt;&gt;&gt; def echo_bar(self):
...       print(self.bar)
...
&gt;&gt;&gt; FooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})
&gt;&gt;&gt; hasattr(Foo, 'echo_bar')
False
&gt;&gt;&gt; hasattr(FooChild, 'echo_bar')
True
&gt;&gt;&gt; my_foo = FooChild()
&gt;&gt;&gt; my_foo.echo_bar()
True
</code></pre>
<p>And you can add even more methods after you dynamically create the class, just like adding methods to a normally created class object.</p>
<pre><code>&gt;&gt;&gt; def echo_bar_more(self):
...       print('yet another method')
...
&gt;&gt;&gt; FooChild.echo_bar_more = echo_bar_more
&gt;&gt;&gt; hasattr(FooChild, 'echo_bar_more')
True
</code></pre>
<p>You see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.</p>
<p>This is what Python does when you use the keyword <code>class</code>, and it does so by using a metaclass.</p>
<h1>What are metaclasses (finally)</h1>
<p>Metaclasses are the 'stuff' that creates classes.</p>
<p>You define classes in order to create objects, right?</p>
<p>But we learned that Python classes are objects.</p>
<p>Well, metaclasses are what create these objects. They are the classes' classes,
you can picture them this way:</p>
<pre><code>MyClass = MetaClass()
my_object = MyClass()
</code></pre>
<p>You've seen that <code>type</code> lets you do something like this:</p>
<pre><code>MyClass = type('MyClass', (), {})
</code></pre>
<p>It's because the function <code>type</code> is in fact a metaclass. <code>type</code> is the
metaclass Python uses to create all classes behind the scenes.</p>
<p>Now you wonder why the heck is it written in lowercase, and not <code>Type</code>?</p>
<p>Well, I guess it's a matter of consistency with <code>str</code>, the class that creates
strings objects, and <code>int</code> the class that creates integer objects. <code>type</code> is
just the class that creates class objects.</p>
<p>You see that by checking the <code>__class__</code> attribute.</p>
<p>Everything, and I mean everything, is an object in Python. That includes ints,
strings, functions and classes. All of them are objects. And all of them have
been created from a class:</p>
<pre><code>&gt;&gt;&gt; age = 35
&gt;&gt;&gt; age.__class__
&lt;type 'int'&gt;
&gt;&gt;&gt; name = 'bob'
&gt;&gt;&gt; name.__class__
&lt;type 'str'&gt;
&gt;&gt;&gt; def foo(): pass
&gt;&gt;&gt; foo.__class__
&lt;type 'function'&gt;
&gt;&gt;&gt; class Bar(object): pass
&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; b.__class__
&lt;class '__main__.Bar'&gt;
</code></pre>
<p>Now, what is the <code>__class__</code> of any <code>__class__</code> ?</p>
<pre><code>&gt;&gt;&gt; age.__class__.__class__
&lt;type 'type'&gt;
&gt;&gt;&gt; name.__class__.__class__
&lt;type 'type'&gt;
&gt;&gt;&gt; foo.__class__.__class__
&lt;type 'type'&gt;
&gt;&gt;&gt; b.__class__.__class__
&lt;type 'type'&gt;
</code></pre>
<p>So, a metaclass is just the stuff that creates class objects.</p>
<p>You can call it a 'class factory' if you wish.</p>
<p><code>type</code> is the built-in metaclass Python uses, but of course, you can create your
own metaclass.</p>
<h1>The <a href="http://docs.python.org/2/reference/datamodel.html?highlight=__metaclass__#__metaclass__" rel="noreferrer"><code>__metaclass__</code></a> attribute</h1>
<p>In Python 2, you can add a <code>__metaclass__</code> attribute when you write a class (see next section for the Python 3 syntax):</p>
<pre><code>class Foo(object):
    __metaclass__ = something...
    [...]
</code></pre>
<p>If you do so, Python will use the metaclass to create the class <code>Foo</code>.</p>
<p>Careful, it's tricky.</p>
<p>You write <code>class Foo(object)</code> first, but the class object <code>Foo</code> is not created
in memory yet.</p>
<p>Python will look for <code>__metaclass__</code> in the class definition. If it finds it,
it will use it to create the object class <code>Foo</code>. If it doesn't, it will use
<code>type</code> to create the class.</p>
<p>Read that several times.</p>
<p>When you do:</p>
<pre><code>class Foo(Bar):
    pass
</code></pre>
<p>Python does the following:</p>
<p>Is there a <code>__metaclass__</code> attribute in <code>Foo</code>?</p>
<p>If yes, create in memory a class object (I said a class object, stay with me here), with the name <code>Foo</code> by using what is in <code>__metaclass__</code>.</p>
<p>If Python can't find <code>__metaclass__</code>, it will look for a <code>__metaclass__</code> at the MODULE level, and try to do the same (but only for classes that don't inherit anything, basically old-style classes).</p>
<p>Then if it can't find any <code>__metaclass__</code> at all, it will use the <code>Bar</code>'s (the first parent) own metaclass (which might be the default <code>type</code>) to create the class object.</p>
<p>Be careful here that the <code>__metaclass__</code> attribute will not be inherited, the metaclass of the parent (<code>Bar.__class__</code>) will be. If <code>Bar</code> used a <code>__metaclass__</code> attribute that created <code>Bar</code> with <code>type()</code> (and not <code>type.__new__()</code>), the subclasses will not inherit that behavior.</p>
<p>Now the big question is, what can you put in <code>__metaclass__</code> ?</p>
<p>The answer is: something that can create a class.</p>
<p>And what can create a class? <code>type</code>, or anything that subclasses or uses it.</p>
<h1>Metaclasses in Python 3</h1>
<p>The syntax to set the metaclass has been changed in Python 3:</p>
<pre><code>class Foo(object, metaclass=something):
    ...
</code></pre>
<p>i.e. the <code>__metaclass__</code> attribute is no longer used, in favor of a keyword argument in the list of base classes.</p>
<p>The behaviour of metaclasses however stays <a href="https://www.python.org/dev/peps/pep-3115/" rel="noreferrer">largely the same</a>.</p>
<p>One thing added to metaclasses in python 3 is that you can also pass attributes as keyword-arguments into a metaclass, like so:</p>
<pre><code>class Foo(object, metaclass=something, kwarg1=value1, kwarg2=value2):
    ...
</code></pre>
<p>Read the section below for how python handles this.</p>
<h1>Custom metaclasses</h1>
<p>The main purpose of a metaclass is to change the class automatically,
when it's created.</p>
<p>You usually do this for APIs, where you want to create classes matching the
current context.</p>
<p>Imagine a stupid example, where you decide that all classes in your module
should have their attributes written in uppercase. There are several ways to
do this, but one way is to set <code>__metaclass__</code> at the module level.</p>
<p>This way, all classes of this module will be created using this metaclass,
and we just have to tell the metaclass to turn all attributes to uppercase.</p>
<p>Luckily, <code>__metaclass__</code> can actually be any callable, it doesn't need to be a
formal class (I know, something with 'class' in its name doesn't need to be
a class, go figure... but it's helpful).</p>
<p>So we will start with a simple example, by using a function.</p>
<pre><code># the metaclass will automatically get passed the same argument
# that you usually pass to `type`
def upper_attr(future_class_name, future_class_parents, future_class_attr):
    """
      Return a class object, with the list of its attribute turned
      into uppercase.
    """

    # pick up any attribute that doesn't start with '__' and uppercase it
    uppercase_attr = {}
    for name, val in future_class_attr.items():
        if not name.startswith('__'):
            uppercase_attr[name.upper()] = val
        else:
            uppercase_attr[name] = val

    # let `type` do the class creation
    return type(future_class_name, future_class_parents, uppercase_attr)

__metaclass__ = upper_attr # this will affect all classes in the module

class Foo(): # global __metaclass__ won't work with "object" though
    # but we can define __metaclass__ here instead to affect only this class
    # and this will work with "object" children
    bar = 'bip'

print(hasattr(Foo, 'bar'))
# Out: False
print(hasattr(Foo, 'BAR'))
# Out: True

f = Foo()
print(f.BAR)
# Out: 'bip'
</code></pre>
<p>Now, let's do exactly the same, but using a real class for a metaclass:</p>
<pre><code># remember that `type` is actually a class like `str` and `int`
# so you can inherit from it
class UpperAttrMetaclass(type):
    # __new__ is the method called before __init__
    # it's the method that creates the object and returns it
    # while __init__ just initializes the object passed as parameter
    # you rarely use __new__, except when you want to control how the object
    # is created.
    # here the created object is the class, and we want to customize it
    # so we override __new__
    # you can do some stuff in __init__ too if you wish
    # some advanced use involves overriding __call__ as well, but we won't
    # see this
    def __new__(upperattr_metaclass, future_class_name,
                future_class_parents, future_class_attr):

        uppercase_attr = {}
        for name, val in future_class_attr.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        return type(future_class_name, future_class_parents, uppercase_attr)
</code></pre>
<p>But this is not really OOP. We call <code>type</code> directly and we don't override
or call the parent <code>__new__</code>. Let's do it:</p>
<pre><code>class UpperAttrMetaclass(type):

    def __new__(upperattr_metaclass, future_class_name,
                future_class_parents, future_class_attr):

        uppercase_attr = {}
        for name, val in future_class_attr.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        # reuse the type.__new__ method
        # this is basic OOP, nothing magic in there
        return type.__new__(upperattr_metaclass, future_class_name,
                            future_class_parents, uppercase_attr)
</code></pre>
<p>You may have noticed the extra argument <code>upperattr_metaclass</code>. There is
nothing special about it: <code>__new__</code> always receives the class it's defined in, as first parameter. Just like you have <code>self</code> for ordinary methods which receive the instance as first parameter, or the defining class for class methods.</p>
<p>Of course, the names I used here are long for the sake of clarity, but like
for <code>self</code>, all the arguments have conventional names. So a real production
metaclass would look like this:</p>
<pre><code>class UpperAttrMetaclass(type):

    def __new__(cls, clsname, bases, dct):

        uppercase_attr = {}
        for name, val in dct.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        return type.__new__(cls, clsname, bases, uppercase_attr)
</code></pre>
<p>We can make it even cleaner by using <code>super</code>, which will ease inheritance (because yes, you can have metaclasses, inheriting from metaclasses, inheriting from type):</p>
<pre><code>class UpperAttrMetaclass(type):

    def __new__(cls, clsname, bases, dct):

        uppercase_attr = {}
        for name, val in dct.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        return super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr)
</code></pre>
<p>Oh, and in python 3 if you do this call with keyword arguments, like this:</p>
<pre><code>class Foo(object, metaclass=Thing, kwarg1=value1):
    ...
</code></pre>
<p>It translates to this in the metaclass to use it:</p>
<pre><code>class Thing(type):
    def __new__(class, clsname, bases, dct, kwargs1=default):
        ...
</code></pre>
<p>That's it. There is really nothing more about metaclasses.</p>
<p>The reason behind the complexity of the code using metaclasses is not because
of metaclasses, it's because you usually use metaclasses to do twisted stuff
relying on introspection, manipulating inheritance, vars such as <code>__dict__</code>, etc.</p>
<p>Indeed, metaclasses are especially useful to do black magic, and therefore
complicated stuff. But by themselves, they are simple:</p>
<ul>
<li>intercept a class creation</li>
<li>modify the class</li>
<li>return the modified class</li>
</ul>
<h1>Why would you use metaclasses classes instead of functions?</h1>
<p>Since <code>__metaclass__</code> can accept any callable, why would you use a class
since it's obviously more complicated?</p>
<p>There are several reasons to do so:</p>
<ul>
<li>The intention is clear. When you read <code>UpperAttrMetaclass(type)</code>, you know
what's going to follow</li>
<li>You can use OOP. Metaclass can inherit from metaclass, override parent methods. Metaclasses can even use metaclasses.</li>
<li>Subclasses of a class will be instances of its metaclass if you specified a metaclass-class, but not with a metaclass-function.</li>
<li>You can structure your code better. You never use metaclasses for something as
trivial as the above example. It's usually for something complicated. Having the
ability to make several methods and group them in one class is very useful
to make the code easier to read.</li>
<li>You can hook on <code>__new__</code>, <code>__init__</code> and <code>__call__</code>. Which will allow
you to do different stuff. Even if usually you can do it all in <code>__new__</code>,
some people are just more comfortable using <code>__init__</code>.</li>
<li>These are called metaclasses, damn it! It must mean something!</li>
</ul>
<h1>Why would you use metaclasses?</h1>
<p>Now the big question. Why would you use some obscure error prone feature?</p>
<p>Well, usually you don't:</p>
<blockquote>
<p>Metaclasses are deeper magic that
  99% of users should never worry about.
  If you wonder whether you need them,
  you don't (the people who actually
  need them know with certainty that
  they need them, and don't need an
  explanation about why).</p>
</blockquote>
<p><em>Python Guru Tim Peters</em></p>
<p>The main use case for a metaclass is creating an API. A typical example of this is the Django ORM.</p>
<p>It allows you to define something like this:</p>
<pre><code>class Person(models.Model):
    name = models.CharField(max_length=30)
    age = models.IntegerField()
</code></pre>
<p>But if you do this:</p>
<pre><code>guy = Person(name='bob', age='35')
print(guy.age)
</code></pre>
<p>It won't return an <code>IntegerField</code> object. It will return an <code>int</code>, and can even take it directly from the database.</p>
<p>This is possible because <code>models.Model</code> defines <code>__metaclass__</code> and
it uses some magic that will turn the <code>Person</code> you just defined with simple statements
into a complex hook to a database field.</p>
<p>Django makes something complex look simple by exposing a simple API
and using metaclasses, recreating code from this API to do the real job
behind the scenes.</p>
<h1>The last word</h1>
<p>First, you know that classes are objects that can create instances.</p>
<p>Well in fact, classes are themselves instances. Of metaclasses.</p>
<pre><code>&gt;&gt;&gt; class Foo(object): pass
&gt;&gt;&gt; id(Foo)
142630324
</code></pre>
<p>Everything is an object in Python, and they are all either instances of classes
or instances of metaclasses.</p>
<p>Except for <code>type</code>.</p>
<p><code>type</code> is actually its own metaclass. This is not something you could
reproduce in pure Python, and is done by cheating a little bit at the implementation
level.</p>
<p>Secondly, metaclasses are complicated. You may not want to use them for
very simple class alterations. You can change classes by using two different techniques:</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="noreferrer">monkey patching</a></li>
<li>class decorators</li>
</ul>
<p>99% of the time you need class alteration, you are better off using these.</p>
<p>But 98% of the time, you don't need class alteration at all.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>Note, this answer is for Python 2.x as it was written in 2008, metaclasses are slightly different in 3.x, see the comments.</em></p>
<p>Metaclasses are the secret sauce that make 'class' work. The default metaclass for a new style object is called 'type'.</p>
<pre class="lang-none prettyprint-override"><code>class type(object)
  |  type(object) -&gt; the object's type
  |  type(name, bases, dict) -&gt; a new type
</code></pre>
<p>Metaclasses take 3 args. '<strong>name</strong>', '<strong>bases</strong>' and '<strong>dict</strong>'</p>
<p>Here is where the secret starts. Look for where name, bases and the dict come from in this example class definition.</p>
<pre><code>class ThisIsTheName(Bases, Are, Here):
    All_the_code_here
    def doesIs(create, a):
        dict
</code></pre>
<p>Lets define a metaclass that will demonstrate how '<strong>class:</strong>' calls it.</p>
<pre><code>def test_metaclass(name, bases, dict):
    print 'The Class Name is', name
    print 'The Class Bases are', bases
    print 'The dict has', len(dict), 'elems, the keys are', dict.keys()

    return "yellow"

class TestName(object, None, int, 1):
    __metaclass__ = test_metaclass
    foo = 1
    def baz(self, arr):
        pass

print 'TestName = ', repr(TestName)

# output =&gt; 
The Class Name is TestName
The Class Bases are (&lt;type 'object'&gt;, None, &lt;type 'int'&gt;, 1)
The dict has 4 elems, the keys are ['baz', '__module__', 'foo', '__metaclass__']
TestName =  'yellow'
</code></pre>
<p>And now, an example that actually means something, this will automatically make the variables in the list "attributes" set on the class, and set to None.</p>
<pre><code>def init_attributes(name, bases, dict):
    if 'attributes' in dict:
        for attr in dict['attributes']:
            dict[attr] = None

    return type(name, bases, dict)

class Initialised(object):
    __metaclass__ = init_attributes
    attributes = ['foo', 'bar', 'baz']

print 'foo =&gt;', Initialised.foo
# output=&gt;
foo =&gt; None
</code></pre>
<p>Note that the magic behaviour that 'Initalised' gains by having the metaclass <code>init_attributes</code> is not passed onto a subclass of Initalised.</p>
<p>Here is an even more concrete example, showing how you can subclass 'type' to make a metaclass that performs an action when the class is created. This is quite tricky:</p>
<pre><code>class MetaSingleton(type):
    instance = None
    def __call__(cls, *args, **kw):
        if cls.instance is None:
            cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)
        return cls.instance

 class Foo(object):
     __metaclass__ = MetaSingleton

 a = Foo()
 b = Foo()
 assert a is b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One use for metaclasses is adding new properties and methods to an instance automatically.</p>
<p>For example, if you look at <a href="http://docs.djangoproject.com/en/dev/topics/db/models/" rel="noreferrer">Django models</a>, their definition looks a bit confusing. It looks as if you are only defining class properties:</p>
<pre><code>class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
</code></pre>
<p>However, at runtime the Person objects are filled with all sorts of useful methods. See the <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py" rel="noreferrer">source</a> for some amazing metaclassery.</p>
</div>
<div class="post-text" itemprop="text">
<p>Others have explained how metaclasses work and how they fit into the Python type system. Here's an example of what they can be used for. In a testing framework I wrote, I wanted to keep track of the order in which classes were defined, so that I could later instantiate them in this order. I found it easiest to do this using a metaclass.</p>
<pre><code>class MyMeta(type):

    counter = 0

    def __init__(cls, name, bases, dic):
        type.__init__(cls, name, bases, dic)
        cls._order = MyMeta.counter
        MyMeta.counter += 1

class MyType(object):              # Python 2
    __metaclass__ = MyMeta

class MyType(metaclass=MyMeta):    # Python 3
    pass
</code></pre>
<p>Anything that's a subclass of <code>MyType</code> then gets a class attribute <code>_order</code> that records the order in which the classes were defined.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.</p>
<p><a href="http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html" rel="noreferrer">http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html</a> (archived at <a href="https://web.archive.org/web/20080206005253/http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html" rel="noreferrer">https://web.archive.org/web/20080206005253/http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html</a>)</p>
<p>In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior.</p>
<p>I've never written one myself, but I think one of the nicest uses of metaclasses can be seen in the <a href="http://www.djangoproject.com/" rel="noreferrer">Django framework</a>. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself.</p>
<ul>
<li><a href="http://docs.djangoproject.com/en/dev/intro/tutorial01/#id3" rel="noreferrer">Creating a new model</a></li>
<li><a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py#L25" rel="noreferrer">The metaclass enabling this</a></li>
</ul>
<p>The thing that's left to say is: If you don't know what metaclasses are, the probability that you <strong>will not need them</strong> is 99%.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>What are metaclasses? What do you use them for?</h2>
</blockquote>
<p>TLDR: A metaclass instantiates and defines behavior for a class just like a class instantiates and defines behavior for an instance. </p>
<p>Pseudocode:</p>
<pre><code>&gt;&gt;&gt; Class(...)
instance
</code></pre>
<p>The above should look familiar. Well, where does <code>Class</code> come from? It's an instance of a metaclass (also pseudocode):</p>
<pre><code>&gt;&gt;&gt; Metaclass(...)
Class
</code></pre>
<p>In real code, we can pass the default metaclass, <code>type</code>, everything we need to instantiate a class and we get a class:</p>
<pre><code>&gt;&gt;&gt; type('Foo', (object,), {}) # requires a name, bases, and a namespace
&lt;class '__main__.Foo'&gt;
</code></pre>
<h2>Putting it differently</h2>
<ul>
<li><p>A class is to an instance as a metaclass is to a class. </p>
<p>When we instantiate an object, we get an instance:</p>
<pre><code>&gt;&gt;&gt; object()                          # instantiation of class
&lt;object object at 0x7f9069b4e0b0&gt;     # instance
</code></pre>
<p>Likewise, when we define a class explicitly with the default metaclass, <code>type</code>, we instantiate it:</p>
<pre><code>&gt;&gt;&gt; type('Object', (object,), {})     # instantiation of metaclass
&lt;class '__main__.Object'&gt;             # instance
</code></pre></li>
<li><p>Put another way, a class is an instance of a metaclass:</p>
<pre><code>&gt;&gt;&gt; isinstance(object, type)
True
</code></pre></li>
<li><p>Put a third way, a metaclass is a class's class.</p>
<pre><code>&gt;&gt;&gt; type(object) == type
True
&gt;&gt;&gt; object.__class__
&lt;class 'type'&gt;
</code></pre></li>
</ul>
<p>When you write a class definition and Python executes it, it uses a metaclass to instantiate the class object (which will, in turn, be used to instantiate instances of that class).</p>
<p>Just as we can use class definitions to change how custom object instances behave, we can use a metaclass class definition to change the way a class object behaves.</p>
<p>What can they be used for? From the <a href="https://docs.python.org/3/reference/datamodel.html#metaclass-example" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>The potential uses for metaclasses are boundless. Some ideas that have been explored include logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization.</p>
</blockquote>
<p>Nevertheless, it is usually encouraged for users to avoid using metaclasses unless absolutely necessary.</p>
<h1>You use a metaclass every time you create a class:</h1>
<p>When you write a class definition, for example, like this,</p>
<pre><code>class Foo(object): 
    'demo'
</code></pre>
<p>You instantiate a class object.</p>
<pre><code>&gt;&gt;&gt; Foo
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; isinstance(Foo, type), isinstance(Foo, object)
(True, True)
</code></pre>
<p>It is the same as functionally calling <code>type</code> with the appropriate arguments and assigning the result to a variable of that name:</p>
<pre><code>name = 'Foo'
bases = (object,)
namespace = {'__doc__': 'demo'}
Foo = type(name, bases, namespace)
</code></pre>
<p>Note, some things automatically get added to the <code>__dict__</code>, i.e., the namespace:</p>
<pre><code>&gt;&gt;&gt; Foo.__dict__
dict_proxy({'__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, 
'__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' 
of 'Foo' objects&gt;, '__doc__': 'demo'})
</code></pre>
<p>The <em>metaclass</em> of the object we created, in both cases, is <code>type</code>. </p>
<p>(A side-note on the contents of the class <code>__dict__</code>: <code>__module__</code> is there because classes must know where they are defined, and  <code>__dict__</code> and <code>__weakref__</code> are there because we don't define <code>__slots__</code> - if we <a href="https://stackoverflow.com/q/472000/541136">define <code>__slots__</code></a> we'll save a bit of space in the instances, as we can disallow <code>__dict__</code> and <code>__weakref__</code> by excluding them. For example:</p>
<pre><code>&gt;&gt;&gt; Baz = type('Bar', (object,), {'__doc__': 'demo', '__slots__': ()})
&gt;&gt;&gt; Baz.__dict__
mappingproxy({'__doc__': 'demo', '__slots__': (), '__module__': '__main__'})
</code></pre>
<p>... but I digress.)</p>
<h1>We can extend <code>type</code> just like any other class definition:</h1>
<p>Here's the default <code>__repr__</code> of classes:</p>
<pre><code>&gt;&gt;&gt; Foo
&lt;class '__main__.Foo'&gt;
</code></pre>
<p>One of the most valuable things we can do by default in writing a Python object is to provide it with a good <code>__repr__</code>. When we call <code>help(repr)</code> we learn that there's a good test for a <code>__repr__</code> that also requires a test for equality - <code>obj == eval(repr(obj))</code>. The following simple implementation of <code>__repr__</code> and <code>__eq__</code> for class instances of our type class provides us with a demonstration that may improve on the default <code>__repr__</code> of classes:</p>
<pre><code>class Type(type):
    def __repr__(cls):
        """
        &gt;&gt;&gt; Baz
        Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})
        &gt;&gt;&gt; eval(repr(Baz))
        Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})
        """
        metaname = type(cls).__name__
        name = cls.__name__
        parents = ', '.join(b.__name__ for b in cls.__bases__)
        if parents:
            parents += ','
        namespace = ', '.join(': '.join(
          (repr(k), repr(v) if not isinstance(v, type) else v.__name__))
               for k, v in cls.__dict__.items())
        return '{0}(\'{1}\', ({2}), {{{3}}})'.format(metaname, name, parents, namespace)
    def __eq__(cls, other):
        """
        &gt;&gt;&gt; Baz == eval(repr(Baz))
        True            
        """
        return (cls.__name__, cls.__bases__, cls.__dict__) == (
                other.__name__, other.__bases__, other.__dict__)
</code></pre>
<p>So now when we create an object with this metaclass, the <code>__repr__</code> echoed on the command line provides a much less ugly sight than the default:</p>
<pre><code>&gt;&gt;&gt; class Bar(object): pass
&gt;&gt;&gt; Baz = Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})
&gt;&gt;&gt; Baz
Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})
</code></pre>
<p>With a nice <code>__repr__</code> defined for the class instance, we have a stronger ability to debug our code. However, much further checking with <code>eval(repr(Class))</code> is unlikely (as functions would be rather impossible to eval from their default <code>__repr__</code>'s).</p>
<h1>An expected usage: <code>__prepare__</code> a namespace</h1>
<p>If, for example, we want to know in what order a class's methods are created in, we could provide an ordered dict as the namespace of the class. We would do this with <code>__prepare__</code> which <a href="https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace" rel="noreferrer">returns the namespace dict for the class if it is implemented in Python 3</a>: </p>
<pre><code>from collections import OrderedDict

class OrderedType(Type):
    @classmethod
    def __prepare__(metacls, name, bases, **kwargs):
        return OrderedDict()
    def __new__(cls, name, bases, namespace, **kwargs):
        result = Type.__new__(cls, name, bases, dict(namespace))
        result.members = tuple(namespace)
        return result
</code></pre>
<p>And usage:</p>
<pre><code>class OrderedMethodsObject(object, metaclass=OrderedType):
    def method1(self): pass
    def method2(self): pass
    def method3(self): pass
    def method4(self): pass
</code></pre>
<p>And now we have a record of the order in which these methods (and other class attributes) were created:</p>
<pre><code>&gt;&gt;&gt; OrderedMethodsObject.members
('__module__', '__qualname__', 'method1', 'method2', 'method3', 'method4')
</code></pre>
<p>Note, this example was adapted from the <a href="https://docs.python.org/3/reference/datamodel.html#metaclass-example" rel="noreferrer">documentation</a> - the new <a href="https://github.com/python/cpython/blob/master/Lib/enum.py" rel="noreferrer">enum in the standard library</a> does this.</p>
<p>So what we did was instantiate a metaclass by creating a class. We can also treat the metaclass as we would any other class. It has a method resolution order:</p>
<pre><code>&gt;&gt;&gt; inspect.getmro(OrderedType)
(&lt;class '__main__.OrderedType'&gt;, &lt;class '__main__.Type'&gt;, &lt;class 'type'&gt;, &lt;class 'object'&gt;)
</code></pre>
<p>And it has approximately the correct <code>repr</code> (which we can no longer eval unless we can find a way to represent our functions.):</p>
<pre><code>&gt;&gt;&gt; OrderedMethodsObject
OrderedType('OrderedMethodsObject', (object,), {'method1': &lt;function OrderedMethodsObject.method1 at 0x0000000002DB01E0&gt;, 'members': ('__module__', '__qualname__', 'method1', 'method2', 'method3', 'method4'), 'method3': &lt;function OrderedMet
hodsObject.method3 at 0x0000000002DB02F0&gt;, 'method2': &lt;function OrderedMethodsObject.method2 at 0x0000000002DB0268&gt;, '__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' of 'OrderedMethodsObject' objects&gt;, '__doc__': None, '__d
ict__': &lt;attribute '__dict__' of 'OrderedMethodsObject' objects&gt;, 'method4': &lt;function OrderedMethodsObject.method4 at 0x0000000002DB0378&gt;})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 3 update</strong></p>
<p>There are (at this point) two key methods in a metaclass:</p>
<ul>
<li><code>__prepare__</code>, and</li>
<li><code>__new__</code></li>
</ul>
<p><code>__prepare__</code> lets you supply a custom mapping (such as an <code>OrderedDict</code>) to be used as the namespace while the class is being created.  You must return an instance of whatever namespace you choose.  If you don't implement <code>__prepare__</code> a normal <code>dict</code> is used.</p>
<p><code>__new__</code> is responsible for the actual creation/modification of the final class.</p>
<p>A bare-bones, do-nothing-extra metaclass would like:</p>
<pre><code>class Meta(type):

    def __prepare__(metaclass, cls, bases):
        return dict()

    def __new__(metacls, cls, bases, clsdict):
        return super().__new__(metacls, cls, bases, clsdict)
</code></pre>
<p>A simple example:</p>
<p>Say you want some simple validation code to run on your attributes -- like it must always be an <code>int</code> or a <code>str</code>.  Without a metaclass, your class would look something like:</p>
<pre><code>class Person:
    weight = ValidateType('weight', int)
    age = ValidateType('age', int)
    name = ValidateType('name', str)
</code></pre>
<p>As you can see, you have to repeat the name of the attribute twice.  This makes typos possible along with irritating bugs.</p>
<p>A simple metaclass can address that problem:</p>
<pre><code>class Person(metaclass=Validator):
    weight = ValidateType(int)
    age = ValidateType(int)
    name = ValidateType(str)
</code></pre>
<p>This is what the metaclass would look like (not using <code>__prepare__</code> since it is not needed):</p>
<pre><code>class Validator(type):
    def __new__(metacls, cls, bases, clsdict):
        # search clsdict looking for ValidateType descriptors
        for name, attr in clsdict.items():
            if isinstance(attr, ValidateType):
                attr.name = name
                attr.attr = '_' + name
        # create final class and return it
        return super().__new__(metacls, cls, bases, clsdict)
</code></pre>
<p>A sample run of:</p>
<pre><code>p = Person()
p.weight = 9
print(p.weight)
p.weight = '9'
</code></pre>
<p>produces:</p>
<pre><code>9
Traceback (most recent call last):
  File "simple_meta.py", line 36, in &lt;module&gt;
    p.weight = '9'
  File "simple_meta.py", line 24, in __set__
    (self.name, self.type, value))
TypeError: weight must be of type(s) &lt;class 'int'&gt; (got '9')
</code></pre>
<hr/>
<p><strong>Note</strong>:  This example is simple enough it could have also been accomplished with a class decorator, but presumably an actual metaclass would be doing much more.</p>
<p>The 'ValidateType' class for reference:</p>
<pre><code>class ValidateType:
    def __init__(self, type):
        self.name = None  # will be set by metaclass
        self.attr = None  # will be set by metaclass
        self.type = type
    def __get__(self, inst, cls):
        if inst is None:
            return self
        else:
            return inst.__dict__[self.attr]
    def __set__(self, inst, value):
        if not isinstance(value, self.type):
            raise TypeError('%s must be of type(s) %s (got %r)' %
                    (self.name, self.type, value))
        else:
            inst.__dict__[self.attr] = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Role of a metaclass' <code>__call__()</code> method when creating a class instance</h1>
<p>If you've done Python programming for more than a few months you'll eventually stumble upon code that looks like this:</p>
<pre><code># define a class
class SomeClass(object):
    # ...
    # some definition here ...
    # ...

# create an instance of it
instance = SomeClass()

# then call the object as if it's a function
result = instance('foo', 'bar')
</code></pre>
<p>The latter is possible when you implement the <code>__call__()</code> magic method on the class.</p>
<pre><code>class SomeClass(object):
    # ...
    # some definition here ...
    # ...

    def __call__(self, foo, bar):
        return bar + foo
</code></pre>
<p>The <code>__call__()</code> method is invoked when an instance of a class is used as a callable. But as we've seen from previous answers a class itself is an instance of a metaclass, so when we use the class as a callable (i.e. when we create an instance of it) we're actually calling its metaclass' <code>__call__()</code> method. At this point most Python programmers are a bit confused because they've been told that when creating an instance like this <code>instance = SomeClass()</code> you're calling its <code>__init__()</code> method. Some who've dug a bit deeper know that before <code>__init__()</code> there's <code>__new__()</code>. Well, today another layer of truth is being revealed, before <code>__new__()</code> there's the metaclass' <code>__call__()</code>.</p>
<p>Let's study the method call chain from specifically the perspective of creating an instance of a class.</p>
<p>This is a metaclass that logs exactly the moment before an instance is created and the moment it's about to return it.</p>
<pre><code>class Meta_1(type):
    def __call__(cls):
        print "Meta_1.__call__() before creating an instance of ", cls
        instance = super(Meta_1, cls).__call__()
        print "Meta_1.__call__() about to return instance."
        return instance
</code></pre>
<p>This is a class that uses that metaclass</p>
<pre><code>class Class_1(object):

    __metaclass__ = Meta_1

    def __new__(cls):
        print "Class_1.__new__() before creating an instance."
        instance = super(Class_1, cls).__new__(cls)
        print "Class_1.__new__() about to return instance."
        return instance

    def __init__(self):
        print "entering Class_1.__init__() for instance initialization."
        super(Class_1,self).__init__()
        print "exiting Class_1.__init__()."
</code></pre>
<p>And now let's create an instance of <code>Class_1</code></p>
<pre><code>instance = Class_1()
# Meta_1.__call__() before creating an instance of &lt;class '__main__.Class_1'&gt;.
# Class_1.__new__() before creating an instance.
# Class_1.__new__() about to return instance.
# entering Class_1.__init__() for instance initialization.
# exiting Class_1.__init__().
# Meta_1.__call__() about to return instance.
</code></pre>
<p>Observe that the code above doesn't actually do anything more than logging the tasks. Each method delegates the actual work to its parent's implementation, thus keeping the default behavior. Since <code>type</code> is <code>Meta_1</code>'s parent class (<code>type</code> being the default parent metaclass) and considering the ordering sequence of the output above, we now have a clue as to what would be the pseudo implementation of <code>type.__call__()</code>:</p>
<pre><code>class type:
    def __call__(cls, *args, **kwarg):

        # ... maybe a few things done to cls here

        # then we call __new__() on the class to create an instance
        instance = cls.__new__(cls, *args, **kwargs)

        # ... maybe a few things done to the instance here

        # then we initialize the instance with its __init__() method
        instance.__init__(*args, **kwargs)

        # ... maybe a few more things done to instance here

        # then we return it
        return instance
</code></pre>
<p>We can see that the metaclass' <code>__call__()</code> method is the one that's called first. It then delegates creation of the instance to the class's <code>__new__()</code> method and initialization to the instance's <code>__init__()</code>. It's also the one that ultimately returns the instance.</p>
<p>From the above it stems that the metaclass' <code>__call__()</code> is also given the opportunity to decide whether or not a call to <code>Class_1.__new__()</code> or <code>Class_1.__init__()</code> will eventually be made. Over the course of its execution it could actually return an object that hasn't been touched by either of these methods. Take for example this approach to the singleton pattern:</p>
<pre><code>class Meta_2(type):
    singletons = {}

    def __call__(cls, *args, **kwargs):
        if cls in Meta_2.singletons:
            # we return the only instance and skip a call to __new__()
            # and __init__()
            print ("{} singleton returning from Meta_2.__call__(), "
                   "skipping creation of new instance.".format(cls))
            return Meta_2.singletons[cls]

        # else if the singleton isn't present we proceed as usual
        print "Meta_2.__call__() before creating an instance."
        instance = super(Meta_2, cls).__call__(*args, **kwargs)
        Meta_2.singletons[cls] = instance
        print "Meta_2.__call__() returning new instance."
        return instance

class Class_2(object):

    __metaclass__ = Meta_2

    def __new__(cls, *args, **kwargs):
        print "Class_2.__new__() before creating instance."
        instance = super(Class_2, cls).__new__(cls)
        print "Class_2.__new__() returning instance."
        return instance

    def __init__(self, *args, **kwargs):
        print "entering Class_2.__init__() for initialization."
        super(Class_2, self).__init__()
        print "exiting Class_2.__init__()."
</code></pre>
<p>Let's observe what happens when repeatedly trying to create an object of type <code>Class_2</code></p>
<pre><code>a = Class_2()
# Meta_2.__call__() before creating an instance.
# Class_2.__new__() before creating instance.
# Class_2.__new__() returning instance.
# entering Class_2.__init__() for initialization.
# exiting Class_2.__init__().
# Meta_2.__call__() returning new instance.

b = Class_2()
# &lt;class '__main__.Class_2'&gt; singleton returning from Meta_2.__call__(), skipping creation of new instance.

c = Class_2()
# &lt;class '__main__.Class_2'&gt; singleton returning from Meta_2.__call__(), skipping creation of new instance.

a is b is c # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A metaclass is a class that tells how (some) other class should be created.</p>
<p>This is a case where I saw metaclass as a solution to my problem:
I had a really complicated problem, that probably could have been solved differently, but I chose to solve it using a metaclass.  Because of the complexity, it is one of the few modules I have written where the comments in the module surpass the amount of code that has been written.  Here it is...</p>
<pre><code>#!/usr/bin/env python

# Copyright (C) 2013-2014 Craig Phillips.  All rights reserved.

# This requires some explaining.  The point of this metaclass excercise is to
# create a static abstract class that is in one way or another, dormant until
# queried.  I experimented with creating a singlton on import, but that did
# not quite behave how I wanted it to.  See now here, we are creating a class
# called GsyncOptions, that on import, will do nothing except state that its
# class creator is GsyncOptionsType.  This means, docopt doesn't parse any
# of the help document, nor does it start processing command line options.
# So importing this module becomes really efficient.  The complicated bit
# comes from requiring the GsyncOptions class to be static.  By that, I mean
# any property on it, may or may not exist, since they are not statically
# defined; so I can't simply just define the class with a whole bunch of
# properties that are @property @staticmethods.
#
# So here's how it works:
#
# Executing 'from libgsync.options import GsyncOptions' does nothing more
# than load up this module, define the Type and the Class and import them
# into the callers namespace.  Simple.
#
# Invoking 'GsyncOptions.debug' for the first time, or any other property
# causes the __metaclass__ __getattr__ method to be called, since the class
# is not instantiated as a class instance yet.  The __getattr__ method on
# the type then initialises the class (GsyncOptions) via the __initialiseClass
# method.  This is the first and only time the class will actually have its
# dictionary statically populated.  The docopt module is invoked to parse the
# usage document and generate command line options from it.  These are then
# paired with their defaults and what's in sys.argv.  After all that, we
# setup some dynamic properties that could not be defined by their name in
# the usage, before everything is then transplanted onto the actual class
# object (or static class GsyncOptions).
#
# Another piece of magic, is to allow command line options to be set in
# in their native form and be translated into argparse style properties.
#
# Finally, the GsyncListOptions class is actually where the options are
# stored.  This only acts as a mechanism for storing options as lists, to
# allow aggregation of duplicate options or options that can be specified
# multiple times.  The __getattr__ call hides this by default, returning the
# last item in a property's list.  However, if the entire list is required,
# calling the 'list()' method on the GsyncOptions class, returns a reference
# to the GsyncListOptions class, which contains all of the same properties
# but as lists and without the duplication of having them as both lists and
# static singlton values.
#
# So this actually means that GsyncOptions is actually a static proxy class...
#
# ...And all this is neatly hidden within a closure for safe keeping.
def GetGsyncOptionsType():
    class GsyncListOptions(object):
        __initialised = False

    class GsyncOptionsType(type):
        def __initialiseClass(cls):
            if GsyncListOptions._GsyncListOptions__initialised: return

            from docopt import docopt
            from libgsync.options import doc
            from libgsync import __version__

            options = docopt(
                doc.__doc__ % __version__,
                version = __version__,
                options_first = True
            )

            paths = options.pop('&lt;path&gt;', None)
            setattr(cls, "destination_path", paths.pop() if paths else None)
            setattr(cls, "source_paths", paths)
            setattr(cls, "options", options)

            for k, v in options.iteritems():
                setattr(cls, k, v)

            GsyncListOptions._GsyncListOptions__initialised = True

        def list(cls):
            return GsyncListOptions

        def __getattr__(cls, name):
            cls.__initialiseClass()
            return getattr(GsyncListOptions, name)[-1]

        def __setattr__(cls, name, value):
            # Substitut option names: --an-option-name for an_option_name
            import re
            name = re.sub(r'^__', "", re.sub(r'-', "_", name))
            listvalue = []

            # Ensure value is converted to a list type for GsyncListOptions
            if isinstance(value, list):
                if value:
                    listvalue = [] + value
                else:
                    listvalue = [ None ]
            else:
                listvalue = [ value ]

            type.__setattr__(GsyncListOptions, name, listvalue)

    # Cleanup this module to prevent tinkering.
    import sys
    module = sys.modules[__name__]
    del module.__dict__['GetGsyncOptionsType']

    return GsyncOptionsType

# Our singlton abstract proxy class.
class GsyncOptions(object):
    __metaclass__ = GetGsyncOptionsType()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>type</code> is actually a <code>metaclass</code> -- a class that creates another classes.
Most <code>metaclass</code> are the subclasses of <code>type</code>. The <code>metaclass</code> receives the <code>new</code> class as its first argument and provide access to class object with details as mentioned below:</p>
<pre><code>&gt;&gt;&gt; class MetaClass(type):
...     def __init__(cls, name, bases, attrs):
...         print ('class name: %s' %name )
...         print ('Defining class %s' %cls)
...         print('Bases %s: ' %bases)
...         print('Attributes')
...         for (name, value) in attrs.items():
...             print ('%s :%r' %(name, value))
... 

&gt;&gt;&gt; class NewClass(object, metaclass=MetaClass):
...    get_choch='dairy'
... 
class name: NewClass
Bases &lt;class 'object'&gt;: 
Defining class &lt;class 'NewClass'&gt;
get_choch :'dairy'
__module__ :'builtins'
__qualname__ :'NewClass'
</code></pre>
<p><code>Note:</code></p>
<p>Notice that the class was not instantiated at any time; the simple act of creating the class triggered execution of the <code>metaclass</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h2>The tl;dr version</h2>
<p>The <code>type(obj)</code> function gets you the type of an object. </p>
<p><strong>The <code>type()</code> of a class is its <em>metaclass</em>.</strong></p>
<p>To use a metaclass:</p>
<pre><code>class Foo(object):
    __metaclass__ = MyMetaClass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python classes are themselves objects - as in instance - of their meta-class. </p>
<p>The default metaclass, which is applied when when you determine classes as:</p>
<pre><code>class foo:
    ...
</code></pre>
<p>meta class are used to apply some rule to an entire set of classes. For example, suppose you're building an ORM to access a database, and you want records from each table to be of a class mapped to that table (based on fields, business rules, etc..,), a possible use of metaclass is for instance, connection pool logic, which is share by all classes of record from all tables. Another use is logic to to support foreign keys, which involves multiple classes of records. </p>
<p>when you define metaclass, you subclass type, and can overrided the following magic methods to insert your logic. </p>
<pre><code>class somemeta(type):
    __new__(mcs, name, bases, clsdict):
      """
  mcs: is the base metaclass, in this case type.
  name: name of the new class, as provided by the user.
  bases: tuple of base classes 
  clsdict: a dictionary containing all methods and attributes defined on class

  you must return a class object by invoking the __new__ constructor on the base metaclass. 
 ie: 
    return type.__call__(mcs, name, bases, clsdict).

  in the following case:

  class foo(baseclass):
        __metaclass__ = somemeta

  an_attr = 12

  def bar(self):
      ...

  @classmethod
  def foo(cls):
      ...

      arguments would be : ( somemeta, "foo", (baseclass, baseofbase,..., object), {"an_attr":12, "bar": &lt;function&gt;, "foo": &lt;bound class method&gt;}

      you can modify any of these values before passing on to type
      """
      return type.__call__(mcs, name, bases, clsdict)


    def __init__(self, name, bases, clsdict):
      """ 
      called after type has been created. unlike in standard classes, __init__ method cannot modify the instance (cls) - and should be used for class validaton.
      """
      pass


    def __prepare__():
        """
        returns a dict or something that can be used as a namespace.
        the type will then attach methods and attributes from class definition to it.

        call order :

        somemeta.__new__ -&gt;  type.__new__ -&gt; type.__init__ -&gt; somemeta.__init__ 
        """
        return dict()

    def mymethod(cls):
        """ works like a classmethod, but for class objects. Also, my method will not be visible to instances of cls.
        """
        pass
</code></pre>
<p>anyhow, those two are the most commonly used hooks. metaclassing is powerful, and above is nowhere near and exhaustive list of uses for metaclassing. </p>
</div>
<div class="post-text" itemprop="text">
<p>The type() function can return the type of an object or create a new type, </p>
<p>for example, we can create a Hi class with the type() function and do not  need to use this way with class Hi(object):</p>
<pre><code>def func(self, name='mike'):
    print('Hi, %s.' % name)

Hi = type('Hi', (object,), dict(hi=func))
h = Hi()
h.hi()
Hi, mike.

type(Hi)
type

type(h)
__main__.Hi
</code></pre>
<p>In addition to using type() to create classes dynamically, you can control creation behavior of class and use metaclass.</p>
<p>According to the Python object model, the class is the object, so the class must be an instance of another certain class.
By default, a Python class is instance of the type class. That is, type is metaclass of most of the built-in classes and metaclass of user-defined classes.</p>
<pre><code>class ListMetaclass(type):
    def __new__(cls, name, bases, attrs):
        attrs['add'] = lambda self, value: self.append(value)
        return type.__new__(cls, name, bases, attrs)

class CustomList(list, metaclass=ListMetaclass):
    pass

lst = CustomList()
lst.add('custom_list_1')
lst.add('custom_list_2')

lst
['custom_list_1', 'custom_list_2']
</code></pre>
<p>Magic will take effect when we passed keyword arguments in metaclass, it indicates the Python interpreter to create the CustomList through ListMetaclass. <strong>new</strong> (), at this point, we can modify the class definition, for example, and add a new method and then return the revised definition.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the published answers I can say that a <code>metaclass</code> defines the behaviour for a class. So, you can explicitly set your metaclass. Whenever Python gets a keyword <code>class</code> then it starts searching for the <code>metaclass</code>. If it's not found – the default metaclass type is used to create the class's object. Using the <code>__metaclass__</code> attribute, you can set <code>metaclass</code> of your class:</p>
<pre><code>class MyClass:
   __metaclass__ = type
   # write here other method
   # write here one more method

print(MyClass.__metaclass__)
</code></pre>
<p>It'll produce the output like this:</p>
<pre><code>class 'type'
</code></pre>
<p>And, of course, you can create your own <code>metaclass</code> to define the behaviour of any class that are created using your class.</p>
<p>For doing that, your default <code>metaclass</code> type class must be inherited as this is the main <code>metaclass</code>:</p>
<pre><code>class MyMetaClass(type):
   __metaclass__ = type
   # you can write here any behaviour you want

class MyTestClass:
   __metaclass__ = MyMetaClass

Obj = MyTestClass()
print(Obj.__metaclass__)
print(MyMetaClass.__metaclass__)
</code></pre>
<p>The output will be:</p>
<pre><code>class '__main__.MyMetaClass'
class 'type'
</code></pre>
</div>
<span class="comment-copy"><code>class A(type):pass&lt;NEWLINE&gt;class B(type,metaclass=A):pass&lt;NEWLINE&gt;b.__class__ = b</code></span>
<span class="comment-copy">ppperry he obviously meant you can't recreate type without using type itself as a metaclass. Which is fair enough to say.</span>
<span class="comment-copy">Shouldn't unregister()  be called by instance of Example class ?</span>
<span class="comment-copy">It appears that in Django <code>models.Model</code> it does not use <code>__metaclass__</code> but rather <code>class Model(metaclass=ModelBase):</code> to reference a <code>ModelBase</code> class which then does the aforementioned metaclass magic. Great post! Here's the Django source: <a href="https://github.com/django/django/blob/master/django/db/models/base.py#L382" rel="nofollow noreferrer">github.com/django/django/blob/master/django/db/models/…</a></span>
<span class="comment-copy">&lt;&lt;Be careful here that the <code>__metaclass__</code> attribute will not be inherited, the metaclass of the parent (<code>Bar.__class__</code>) will be. If <code>Bar</code> used a <code>__metaclass__</code> attribute that created <code>Bar</code> with <code>type()</code> (and not <code>type.__new__()</code>), the subclasses will not inherit that behavior.&gt;&gt; -- Could you/someone please explain a bit deeper this passage?</span>
<span class="comment-copy">@MaxGoodridge That's the Python 3 syntax for metaclasses. See <a href="https://docs.python.org/3.6/reference/datamodel.html#metaclasses" rel="nofollow noreferrer">Python 3.6 Data model</a> VS <a href="https://docs.python.org/2.7/reference/datamodel.html?#customizing-class-creation" rel="nofollow noreferrer">Python 2.7 Data model</a></span>
<span class="comment-copy">It's a community wiki answer (so, those who commented with corrections/improvements might consider editing their comments into the answer, if they're sure they are correct).</span>
<span class="comment-copy">Which parts of this answer is about <code>python2</code> and which about <code>pythono3</code>?</span>
<span class="comment-copy">Isn't the use of meta classes adding new properties and methods to a <b>class</b> and not an instance? As far as i understood it the meta class alters the class itself and as a result the instances can be constructed differently by the altered class. Could be a bit misleading to people who try to get the nature of a meta class. Having useful methods on instances can be achieved by normal inherence. The reference to Django code as an example is good, though.</span>
<span class="comment-copy">In the metaclass example I get <code>NameError: name 'ValidateType' is not defined</code>. Any suggestions how to best fix this? I'm using python 2</span>
