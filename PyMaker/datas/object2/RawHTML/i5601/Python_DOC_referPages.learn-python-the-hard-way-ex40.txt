<div class="post-text" itemprop="text">
<p>I'm learning python from the book called "Learn python the hard way" and i came across this block of code in exercise40</p>
<pre><code>cities = {'CA': 'San Francisco', 'MI': 'Detroit', 'FL': 'Jacksonville'}

cities['NY'] = 'New York'
cities['OR'] = 'Portland'

def find_city(themap, state):
    if state in themap:
        return themap[state]
    else:
        return "Not found."

# ok pay attention!
cities['_find'] = find_city

while True:
    print "State? (ENTER to quit)",
    state = raw_input("&gt; ")
    if not state: break

# this line is the most important ever! study!
city_found = cities['_find'](cities, state)
print city_found
</code></pre>
<p>1.Is it necessary to add "find_city" function to the dictionary?</p>
<p>2.Can i remove "themap" argument in the function "find_city"?</p>
<p>Here is my new code and it can still run without any error:</p>
<pre><code>cities = {"CA" : "San Francisco", "MI" : "Detroit", "FL" : "Jacksonville"}

cities["NY"]= "New York"
cities["OR"] = "Portland"

def find_city(state):
    if state in cities:
        return cities[state]
    else:
        return "Not Found."

while True:
    print "State? (ENTER to quit)",
    state = raw_input("&gt;")
    if not state:
        break
    city_found = find_city(state)
    print city_found
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>no, it is not.</p></li>
<li><p>yes you can.</p></li>
</ol>
<p>And as a side note, many of the top <a class="post-tag" href="/questions/tagged/python" rel="tag" title="show questions tagged 'python'">python</a> answerers here on Stack Overflow do not recommend using Learn Python the Hard Way - quite contrary. As a newcomer, in 2017, your time would be more well-spent learning Python 3 and using some other resource.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it's strange, to put a function in a dictionary with cities. I wouldn't do that, but I don't know, what the author want to demonstrate with.</p>
<p>It is not a good idea, to rely on the global variable <code>cities</code> in <code>find_city</code>.</p>
<p>Usually, you would use <code>.get</code>:</p>
<pre><code>def find_city(mapping, state):
    return mapping.get(state, "Not Found.")

while True:
    print "State? (ENTER to quit)",
    state = raw_input("&gt;")
    if not state:
        break
    city_found = find_city(cities, state)
    print city_found
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this, but the first 'codepiece' example stores a "functionpointer" for the find-function inside the dictionary itself so you can use the function by using a key of <code>'_find'</code> and supply the parameters to the found value (the FP) for this key.</p>
<p>I do not know the book, but probably this is done on a purpose, like f.e. to teach you that "values" in a dictionary can be of different types - maybe even an introduction to study functions as objects and how to use them....</p>
<p>In a real world example I would not do this, I might wrap the whole dictionary in a class and supply class methods <em>IF</em> (and thats a big if) there are other concerns that leads me to wrap stuff for this class...</p>
<p>All in all it is a very contreived example (in germany we would say "An den Haaren herbeigezogen" wich roughly translates to "pulled by it's hairs" (word by word) or "pulled out of the a..")</p>
<p>I think you are better of using the python3 website and its examples to learn - there are plenty of things to gain there - and study the documentation. </p>
<p>Start here:  <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/</a></p>
</div>
<span class="comment-copy">I think the method is put inside the dictionary to demonstrate that you <i>can</i> call it by referencing through the dictionary as well.</span>
<span class="comment-copy">Not much of 2017 left though :)</span>
<span class="comment-copy">Well, even worse :D</span>
