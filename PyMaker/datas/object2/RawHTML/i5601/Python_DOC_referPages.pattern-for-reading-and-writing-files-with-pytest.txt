<div class="post-text" itemprop="text">
<p><strong>constants.py</strong></p>
<pre><code>import os

BASE_PATH = os.path.abspath(os.path.dirname(__file__))
INPUT_PATH = os.path.join(BASE_PATH, 'input')
FILE_INPUT1_PATH = os.path.join(INPUT_PATH, 'input1.csv')
FILE_INPUT2_PATH = os.path.join(INPUT_PATH, 'input2.csv')
PROCESSED_PATH = os.path.join(BASE_PATH, 'processed')
FILE_PROC1_PATH = os.path.join(PROCESSED_PATH, 'processed1.pkl')
FILE_PROC2_PATH = os.path.join(PROCESSED_PATH, 'processed2.pkl')
</code></pre>
<p><strong>structure dir</strong>:</p>
<pre><code>root
  |__ constant.py
  |__ input
          |__ input1.csv
          |__ input2.csv 
  |__ process
          |__ processed1.pkl
          |__ processed2.pkl
</code></pre>
<p><strong>data_handling.py</strong></p>
<pre><code>from constants import FILE_INPUT1_PATH, FILE_INPUT2_PATH, FILE_PROC1_PATH, FILE_PROC2_PATH

def foo(*args):
    file = FILE_INPUT1_PATH
    # Here it is doing staff
    # Finally I write data into FILE_PROC1_PATH

def bar(*args):
    file = FILE_INPUT2_PATH
    # Here it is doing staff
    # Finally I write data into FILE_PROC2_PATH
</code></pre>
<p>Currently I'm trying to use pytest and testing <code>foo()</code> and <code>bar()</code> but I don't know how to proceed due to input files and processed files are too big and test process musn't override processed files.
One approach is to change definition <code>bar()</code> to <code>bar(path)</code> and then call <code>bar(FILE_INPUT2_PATH)</code> but that it isn't make sense in the code because <code>bar</code> always needs to read <code>FILE_INPUT2_PATH</code> and it is called in many places.
Unit test for foo() and bar() would test if the processed files were created or not because it depends on <code>*args</code>.</p>
<p>So... question is how can I solve it? Does a pattern/good practice exists for this case? What should I change in my code?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>input files and processed files are too big and test process musn't
  override processed files</p>
</blockquote>
<p>Yes, and tests are perfectly suitable for that kind of job. Generic approach is to create a test data (which can be a subset of original data with edge cases included) and place it somewhere near your tests, for example:</p>
<pre><code>├───tests
│   │   test_bar.py
│   │   test_foo.py
│   │
│   └───data
│           input_1.dat
│           input_2.dat
│           expected_1.pkl
│           expected_2.pkl
</code></pre>
<p>Then, if testing functions accept input as a constant rather than a parameter, use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"><code>unittest.mock.patch</code></a> to change constant in test run (see <a href="https://stackoverflow.com/questions/27252840/how-to-patch-a-constant-in-python">this excellent answer</a> for a quick reference). For storing output either regular or temporary file can be used.</p>
<pre><code>import tempfile
from pathlib import Path
from unittest.mock import patch

import foo_module


TEST_DATA_DIR = Path(__file__).resolve().parent / 'data'


@patch('foo_module.FILE_INPUT1_PATH', TEST_DATA_DIR / 'input_1.dat')
@patch('foo_module.FILE_PROC1_PATH', tempfile.mktemp())
def test_foo(tmpdir):
    """Process input and check result."""
    foo_module.foo()
    result = open(foo_module.FILE_PROC1_PATH, 'rb').read()
    expected = open(TEST_DATA_DIR / 'expected_1.pkl', 'rb').read()
    assert result == expected
</code></pre>
<p><em>NOTE:</em> <a href="https://docs.python.org/3.6/library/tempfile.html#tempfile.mkstemp" rel="nofollow noreferrer"><code>tempfile.mktemp()</code></a> is deprecated because file is not created on <code>mktemp()</code> call thus can be locked by another process. Feel free to suggest alternative approach.</p>
</div>
<span class="comment-copy">One option is to <a href="https://stackoverflow.com/questions/27252840/how-to-patch-a-constant-in-python">patch file path constants</a> to point to files with test data.</span>
<span class="comment-copy">@9dogs thank you! It is what I wanted. If can post the answer</span>
