<div class="post-text" itemprop="text">
<p>Say I have a mock object (let it be Mock or MagicMock). I want to mock one of its method to return one value for a specific input and to return another value for another specific input. How do I do it without having to care about the order the input is sent to the method?</p>
<p>Pseudo code:</p>
<pre><code>def test_blah():
    o = MagicMock()

    # How to do I these?
    o.foo.return_value.on(1) = 10
    o.foo.return_value.on(2) = 20

    assert o.foo(2) == 20
    assert o.foo(1) == 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you need to <em>dynamically change the return values</em>, you need to use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock" rel="noreferrer"><code>side_effect</code></a> and not the <code>return_value</code>. You may map the desired return values to the expected inputs and use the <code>.get</code> function of this mapping/dictionary as a side effect:</p>
<pre><code>return_values = {1: 10, 2: 20}
o.foo.side_effect = return_values.get
</code></pre>
<p>Demo:</p>
<pre><code>In [1]: from unittest import mock

In [2]: m = mock.MagicMock()

In [3]: return_values = {1: 10, 2: 20}

In [4]: m.foo.side_effect = return_values.get

In [5]: m.foo(1)
Out[5]: 10

In [6]: m.foo(2)
Out[6]: 20
</code></pre>
</div>
