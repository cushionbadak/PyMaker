<div class="post-text" itemprop="text">
<p>I am studying the Python built-in method <code>int(x)</code>, which casts a variable to <code>int</code>. The documentation is at <a href="https://docs.python.org/2/library/functions.html#int" rel="nofollow noreferrer">https://docs.python.org/2/library/functions.html#int</a>.</p>
<p>In a code I found:</p>
<pre><code>errors += int(update != 0.0)
</code></pre>
<p>This code simply increases or decreases an error variable.
What i see is a conditional as a variable, even though the method doesn't take Boolean values. How is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider two possibilities:</p>
<p><code>int(True)</code> and <code>int(False)</code><br/>
First case will evaluate to <code>1</code> and second to <code>0</code><br/>
hence, <code>errors</code> will either increase by <code>1</code> or by <code>0</code></p>
<p>refer to  the <a href="https://docs.python.org/2/library/stdtypes.html" rel="nofollow noreferrer">doc</a></p>
<blockquote>
<p>Boolean values are the two constant objects False and True. They are used to represent truth values (although other values can also be considered false or true). In numeric contexts (for example when used as the argument to an arithmetic operator), <strong>they behave like the integers 0 and 1</strong>, respectively. The built-in function bool() can be used to convert any value to a Boolean, if the value can be interpreted as a truth value (see section Truth Value Testing above).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer">The Python 3 documentation</a> is ever so slightly more straightforward than the 2 documentation here, so I’ll quote it:</p>
<blockquote>
<p>Return an integer object constructed from a number or string <code>x</code>, or return <code>0</code> if no arguments are given. If <code>x</code> is a number, return <code>x.__int__()</code>.</p>
</blockquote>
<p>So <code>int</code> accepts a string or a number. Booleans aren’t strings, but they are in fact numbers! Following the link to <a href="https://docs.python.org/3/library/stdtypes.html#typesnumeric" rel="nofollow noreferrer">Numeric Types – <code>int</code>, <code>float</code>, <code>complex</code></a> explains that…</p>
<blockquote>
<p>There are three distinct numeric types: <em>integers</em>, <em>floating point numbers</em>, and <em>complex numbers</em>. <strong>In addition, Booleans are a subtype of integers.</strong></p>
</blockquote>
<p>which you can confirm in the REPL:</p>
<pre><code>&gt;&gt;&gt; import numbers
&gt;&gt;&gt; isinstance(False, int)
True
&gt;&gt;&gt; isinstance(True, numbers.Numeric)
True
</code></pre>
<p>and by doing math with booleans, which act as the integer values 0 and 1 as one would expect:</p>
<pre><code>&gt;&gt;&gt; True * 5
5
&gt;&gt;&gt; math.acos(False)
1.5707963267948966
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Booleans are a sub class of Integers in python and internally and <code>False</code> is represented as <code>0</code> in Python.</p>
</div>
<span class="comment-copy"><i>“Return an integer object constructed from a number or string x, or return 0 if no arguments are given. If x is a number, it can be a plain integer, a long integer, or a floating point number.”</i> Technically correct, but misleading – booleans are integers in Python. Try it out: <code>isinstance(True, int)</code></span>
