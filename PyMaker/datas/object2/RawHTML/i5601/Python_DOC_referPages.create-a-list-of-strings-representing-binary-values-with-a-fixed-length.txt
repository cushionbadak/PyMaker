<div class="post-text" itemprop="text">
<p>I need a list of strings representing binary values, with a fixed length, thus with leading zeros. for example:</p>
<pre><code>my_list = ["00", "01", "10", "11"]
</code></pre>
<p>I want to be able to generate the list given the number of bits. I've come up with a code, but I'm not sure if this is the best way to do it and wonder if it's possible to do the same with a one-liner?</p>
<pre><code>bits = 2
my_list = []
for i in range(2**bits):
    my_list.append(format(i, '0b').zfill(bits))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All you need to do for a list comprehension is bring up the last line and make it a list:</p>
<pre><code>&gt;&gt;&gt; bits = 2
&gt;&gt;&gt; l = [format(i, 'b').zfill(bits) for i in range(2**bits)]
&gt;&gt;&gt; l
['00', '01', '10', '11']
</code></pre>
<p>So </p>
<pre><code>for block1:
    block2
</code></pre>
<p>is</p>
<pre><code>[block2 for block1]
</code></pre>
<p>Alternatively, you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>, and map <code>''.join</code> to make them into the right format:</p>
<pre><code>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; list(map(''.join, it.product('01', repeat=bits)))
['00', '01', '10', '11']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to accomplish this</p>
<pre><code>from itertools import product 

def bitstrings(n):
    return [''.join(bits) for bits in product('01', repeat=n)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; [''.join(bs) for bs in product('01', repeat=2)]
['00', '01', '10', '11']
&gt;&gt;&gt; [''.join(bs) for bs in product('01', repeat=3)]
['000', '001', '010', '011', '100', '101', '110', '111']
</code></pre>
<p>You could also specify the total string length directly in <code>format</code>:</p>
<pre><code>&gt;&gt;&gt; n = 2
&gt;&gt;&gt; [format(i, '0%ib' % n) for i in range(2**n)]
['00', '01', '10', '11']
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; [format(i, '0%ib' % n) for i in range(2**n)]
['000', '001', '010', '011', '100', '101', '110', '111']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this without using any imports and can use list comprehension to make it one line. I suggest using <code>&lt;&lt;</code> instead of <code>**</code> because it's <em>much</em> faster when dealing with binary numbers since it deals with the number in binary and then shifts it (1 &lt;&lt; n is the same as 2**n) by <code>n</code>.</p>
<pre><code>def bitstring(bits):
    return ["{:0{}b}".format(i, bits) for i in range(1 &lt;&lt; bits)]

print(bitstring(2))
</code></pre>
<p>will return </p>
<blockquote>
<p>['00', '01', '10', '11']</p>
</blockquote>
</div>
