<div class="post-text" itemprop="text">
<pre><code>import random
result = []
for i in list_data:
    for e in list_data:
        result += str(i,e)
# ======
return result


import gowithflow as gwf
a = ['a', 'b', 'c']
gwf.number_of_cases(a)
['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']

a = ['a', 'a']
gwf.number_of_cases(a)
['aa']

a = [1, 2, 3, 'a']
gwf.number_of_cases(a)
['11', '12', '13', '1a', '21', '22', '23', '2a', '31', '32', '33', '3a', 'a1', 'a2', 'a3', 'aa']
# '''
</code></pre>
<p>I want a new list with every pair of values in a original list. every single pair of values returns out to 'str' format. If there is same pair of values, either of the two will be removed. My code is first half and the second half is an example.</p>
<p>Typeerror is printed:</p>
<blockquote>
<p>decoding str is not supported</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If the examples that you have given are your desired output, then the following solution should suffice:</p>
<pre><code>list(set([str(c) + str(d) for c in a for d in a]))
</code></pre>
<p>The inner part of the code creates a list of all the pairs, but does not remove duplicates.</p>
<pre><code>[str(c) + str(d) for c in a for d in a]
</code></pre>
<p>By converting to a set and back to a list, duplicates are removed.</p>
<pre><code>a = ['a', 'a']
</code></pre>
<p>Output:</p>
<pre><code>['aa']
</code></pre>
<p>Second example:</p>
<pre><code>a = [1, 2, 3, 'a']
</code></pre>
<p>Output:</p>
<pre><code>['33', '2a', 'aa', '1a', '31', '23', '3a', '13', 'a2', 'a3', '32', '11', '21', 'a1', '12', '22']
</code></pre>
<p>EDIT:</p>
<p>If order is important to you, and you want the order from your examples, you can do this:</p>
<pre><code>def uniq(input):
  output = []
  for x in input:
    if x not in output:
      output.append(x)
  return output

a = [1, 2, 3, 'a'] 
ordered_with_duplicates = [str(c) + str(d) for c in a for d in a]
ordered_no_duplicates = uniq(ordered_with_duplicates)
</code></pre>
<p>Output:</p>
<pre><code>['11', '12', '13', '1a', '21', '22', '23', '2a', '31', '32', '33', '3a', 'a1', 'a2', 'a3', 'aa']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to generate the pairs, and then use <code>''.join</code> to make them into strings. </p>
<pre><code>from itertools import product

a = [1, 2, 3, 'a']

[''.join(x) for x in product(map(str, a), repeat=2)]
</code></pre>
<p>gives us </p>
<pre><code>['11', '12', '13', '1a', '21', '22', '23', '2a', '31', '32', '33', '3a', 'a1', 'a2', 'a3', 'aa']
</code></pre>
</div>
<span class="comment-copy">What is the desired output for which given input?</span>
<span class="comment-copy"><code>list(set([str(c) + str(d) for c in a for d in a]))</code></span>
<span class="comment-copy">Where does <code>list_data</code> come from?  Please put the <b>full</b> traceback of the error in your question.  <code>decode()</code> is typically used on <code>bytes</code> objects, so it might be that you are mixing types here, maybe in the <code>gowithflow</code> module?</span>
<span class="comment-copy">my fault... three lists of second half that consists of lots of pairs is desired output. First half that starts with 'import random' is my def to get a desired output.</span>
<span class="comment-copy">@chris I think it just needs to be <code>sorted</code>. :-)</span>
