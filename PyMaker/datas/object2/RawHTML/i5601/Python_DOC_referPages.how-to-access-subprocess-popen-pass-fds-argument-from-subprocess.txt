<div class="post-text" itemprop="text">
<p>So the title is a bit long but it is the only thing I cannot find online, with a little bit searching. How do I access the <code>pass_fds</code> argument from subprocess? </p>
<pre><code># parent.py
import subprocess

subprocess.Popen(['run', 'some', 'program'], pass_fds=(afd, bfd))

# child.py
import subprocess

# need to access pass_fds argument? but how?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to explicitly inform the child of the fds passed in some way. The most common/simple mechanisms would be:</p>
<ol>
<li>Via an environment variable set for the child</li>
<li>Via an argument passed to the child</li>
<li>(Less common, but possible) Written to the child's <code>stdin</code></li>
</ol>
<p>All of these require the child's cooperation of course; it needs to define an interface to inform it of the fds passed.</p>
<p><code>openssl</code>'s command line tool supports all these mechanisms for a similar purpose (communicating a passphrase to the child without putting it on the command line). You pass <code>-pass</code> and a second argument that defines where to look for the password. If the second argument is <code>stdin</code>, it reads from <code>stdin</code>, if it's <code>-pass fd:#</code> (where <code>#</code> is the fd number) it reads from an arbitrary file descriptor provided, <code>-pass env:var</code> (where <code>var</code> is the name of an environment variable) reads from the environment, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well maybe it's not the best technical answer but I wanted to dig about file descriptors. Following your question I made this two scripts. Os creates pipe and parent sends descriptors to child by pass_fds tuple. More info in <a href="https://docs.python.org/3/library/os.html#inheritance-of-file-descriptors" rel="nofollow noreferrer">python docs</a> , <a href="https://docs.python.org/3/library/os.html#os.read" rel="nofollow noreferrer">os.read()</a> description. After that parent's fdw is pushed as bytes to child proc and then used to send back some answer.</p>
<p>Hope it helps.</p>
<p>edit: 
Found <a href="https://groups.google.com/forum/#!msg/comp.lang.python/7n2IRw8tE-c/iM3Xjt00DgAJ" rel="nofollow noreferrer">this post</a> in google forums.</p>
<pre><code>##### child.py
import subprocess, os

fdr_data = os.read(3,20) # 3 is inherited by pass_fds    
fdw = int(fdr_data)      # 4

print("CHILD fdw = ", fdw , "\n")

os.write(fdw, bytes("some answer".encode())) 
exit()


##### parent.py
import subprocess, os, time

fdr, fdw = os.pipe() # new file descriptor read , fd write
print("PARENT", "fdr = ", fdr , " fdw = " , fdw)

subprocess.Popen(['python3','child.py'], pass_fds=(fdr, fdw))    
os.write(fdw, bytes("{}".format(fdw).encode())) # pipe file descriptor write (out 4)

time.sleep(1)   # so subproc can execute

read_pipe = os.read(fdr, 20) # pipe file descriptor read (in 3)    
print("PARENT" , read_pipe.decode())
</code></pre>
</div>
<span class="comment-copy">so i guess only way to, without using some other ipc technique involved, is sending file descriptor to stdin of child process. And then the child would read from stdin and act according to received fd</span>
<span class="comment-copy">...you <i>could</i> use whatever OS-specific interfaces (ie. procfs) to introspect what open FDs are available from the child and try to infer the interesting ones from metadata (ie. if you expect two TCP sockets, scanning for those), but that seems very error-prone, as opposed to having an explicit interface.</span>
<span class="comment-copy">@charles sure normally i would use something like shared memory, but that did not seem python-ish and thought that there might be some info I missed. But after digging into cpython source code of <code>subprocess.Popen</code> I noticed they tried to be as general as possible, therefore they did not include a mechanism, if the said command is still calling python and do some (magic) trick to handle &amp; store into predefined variables, etc.</span>
<span class="comment-copy"><code>subprocess</code> is intended to be used for invoking non-Python code. If you were creating subprocesses for the explicit purpose of running Python code in them, you'd be expected to use <code>multiprocessing</code>.</span>
<span class="comment-copy">i guess the easiest way, and probably safest way to, pass it via argument. as I already do some pre-processing on arguments anyway. thanks for the help</span>
