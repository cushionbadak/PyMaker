<div class="post-text" itemprop="text">
<p>Suppose I have the following list:</p>
<pre><code>temp = ['Ok', 'Whoa. Robot?']
</code></pre>
<p>How do I get a string that looks like</p>
<pre><code>"1) 'Ok', 2) 'Whoa. Robot?'"
</code></pre>
<p>I'm trying to do this for a list comprehension. I can obviously join them using:</p>
<pre><code>" ".join(temp)
</code></pre>
<p>I can do it in a loop in a fairly ugly way:</p>
<pre><code>mystring = ""
temp = ['Ok', 'Whoa. Robot?']
for i in range(len(temp)):
    mystring += str(i) + ") " + temp[i] + "  "
</code></pre>
<p>Is there a pythonic way to do it in one step with a list comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>mystring = ', '.join(["{}) {!r}".format(i, s) for i, s in enumerate(temp, 1)])
</code></pre>
<p>The <code>{!r}</code> conversion produces the <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>repr()</code></a> representation of the string, so you get quotes around the parts, but note that the quotes may change depending on the string's content, or in other words if it contains quotes itself.</p>
</div>
<span class="comment-copy">You don't need the list comp brackets inside of the <code>join</code>.  It will evaluate the generator.</span>
<span class="comment-copy">@James See e.g. <a href="https://stackoverflow.com/questions/37782066/list-vs-generator-comprehension-speed-with-join-function">this thread</a>. <code>str.join</code> is one of the functions that are faster with lists than with generators.</span>
<span class="comment-copy">Wow.  That is really fascinating, thanks.</span>
