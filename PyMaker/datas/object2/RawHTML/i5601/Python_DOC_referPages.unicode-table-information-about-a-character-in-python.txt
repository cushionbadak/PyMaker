<div class="post-text" itemprop="text">
<p>Is there a way in python to get the technical information for a given character like it's displayed in the Unicode table? (cf.<a href="https://unicode-table.com/en/" rel="nofollow noreferrer">https://unicode-table.com/en/</a>)</p>
<p>Example:
for the letter "Ȅ"</p>
<ul>
<li>Name &gt; Latin Capital Letter E with Double Grave</li>
<li>Unicode number &gt; U+0204</li>
<li>HTML-code &gt; Ȅ </li>
<li>Bloc &gt; Latin Extended-B </li>
<li>Lowercase &gt; ȅ</li>
</ul>
<p>What I actually need is to get for any Unicode number (like here U+0204) the corresponding name (Latin Capital Letter E with Double Grave) and the lowercase version (here "ȅ").</p>
<p>Roughly:<br/>
input = a Unicode number<br/>
output = corresponding information</p>
<p>The closest thing I've been able to find is the fontTools library but I can't seem to find any tutorial/documentation on how to use it to do that.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard module <a href="https://docs.python.org/3/library/unicodedata.html?#module-unicodedata" rel="nofollow noreferrer"><code>unicodedata</code></a> defines a lot of properties, but not <em>everything</em>. A quick peek at <a href="https://github.com/python/cpython/blob/master/Modules/unicodedata.c" rel="nofollow noreferrer">its source</a> confirms this.</p>
<p>Fortunately <a href="ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt" rel="nofollow noreferrer"><code>unicodedata.txt</code></a>, the data file where this comes from, is not hard to parse. Each line consists of exactly 15 elements, <code>;</code> separated, which makes it ideal for parsing. Using the description of the elements on <a href="ftp://ftp.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.html" rel="nofollow noreferrer">ftp://ftp.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.html</a>, you can create a few classes to encapsulate the data. I've taken the names of the class elements from that list; the meaning of each of the elements is explained on that same page.</p>
<p>Make sure to download <a href="ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt" rel="nofollow noreferrer">ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt</a> and <a href="ftp://ftp.unicode.org/Public/UNIDATA/Blocks.txt" rel="nofollow noreferrer">ftp://ftp.unicode.org/Public/UNIDATA/Blocks.txt</a> first, and put them inside the same folder as this program.</p>
<p>Code (tested with Python 2.7 and 3.6):</p>
<pre><code># -*- coding: utf-8 -*-

class UnicodeCharacter:
    def __init__(self):
        self.code = 0
        self.name = 'unnamed'
        self.category = ''
        self.combining = ''
        self.bidirectional = ''
        self.decomposition = ''
        self.asDecimal = None
        self.asDigit = None
        self.asNumeric = None
        self.mirrored = False
        self.uc1Name = None
        self.comment = ''
        self.uppercase = None
        self.lowercase = None
        self.titlecase = None
        self.block = None

    def __getitem__(self, item):
        return getattr(self, item)

    def __repr__(self):
        return '{'+self.name+'}'

class UnicodeBlock:
    def __init__(self):
        self.first = 0
        self.last = 0
        self.name = 'unnamed'

    def __repr__(self):
        return '{'+self.name+'}'

class BlockList:
    def __init__(self):
        self.blocklist = []
        with open('Blocks.txt','r') as uc_f:
            for line in uc_f:
                line = line.strip(' \r\n')
                if '#' in line:
                    line = line.split('#')[0].strip()
                if line != '':
                    rawdata = line.split(';')
                    block = UnicodeBlock()
                    block.name = rawdata[1].strip()
                    rawdata = rawdata[0].split('..')
                    block.first = int(rawdata[0],16)
                    block.last = int(rawdata[1],16)
                    self.blocklist.append(block)
            # make 100% sure it's sorted, for quicker look-up later
            # (it is usually sorted in the file, but better make sure)
            self.blocklist.sort (key=lambda x: block.first)

    def lookup(self,code):
        for item in self.blocklist:
            if code &gt;= item.first and code &lt;= item.last:
                return item.name
        return None

class UnicodeList:
    """UnicodeList loads Unicode data from the external files
    'UnicodeData.txt' and 'Blocks.txt', both available at unicode.org

    These files must appear in the same directory as this program.

    UnicodeList is a new interpretation of the standard library
    'unicodedata'; you may first want to check if its functionality
    suffices.

    As UnicodeList loads its data from an external file, it does not depend
    on the local build from Python (in which the Unicode data gets frozen
    to the then 'current' version).

    Initialize with

        uclist = UnicodeList()
    """
    def __init__(self):

        # we need this first
        blocklist = BlockList()
        bpos = 0

        self.codelist = []
        with open('UnicodeData.txt','r') as uc_f:
            for line in uc_f:
                line = line.strip(' \r\n')
                if '#' in line:
                    line = line.split('#')[0].strip()
                if line != '':
                    rawdata = line.strip().split(';')
                    parsed = UnicodeCharacter()
                    parsed.code = int(rawdata[0],16)
                    parsed.characterName = rawdata[1]
                    parsed.category = rawdata[2]
                    parsed.combining = rawdata[3]
                    parsed.bidirectional = rawdata[4]
                    parsed.decomposition = rawdata[5]
                    parsed.asDecimal = int(rawdata[6]) if rawdata[6] else None
                    parsed.asDigit = int(rawdata[7]) if rawdata[7] else None
                    # the following value may contain a slash:
                    #  ONE QUARTER ... 1/4
                    # let's make it Python 2.7 compatible :)
                    if '/' in rawdata[8]:
                        rawdata[8] = rawdata[8].replace('/','./')
                        parsed.asNumeric = eval(rawdata[8])
                    else:
                        parsed.asNumeric = int(rawdata[8]) if rawdata[8] else None
                    parsed.mirrored = rawdata[9] == 'Y'
                    parsed.uc1Name = rawdata[10]
                    parsed.comment = rawdata[11]
                    parsed.uppercase = int(rawdata[12],16) if rawdata[12] else None
                    parsed.lowercase = int(rawdata[13],16) if rawdata[13] else None
                    parsed.titlecase = int(rawdata[14],16) if rawdata[14] else None
                    while bpos &lt; len(blocklist.blocklist) and parsed.code &gt; blocklist.blocklist[bpos].last:
                        bpos += 1
                    parsed.block = blocklist.blocklist[bpos].name if bpos &lt; len(blocklist.blocklist) and parsed.code &gt;= blocklist.blocklist[bpos].first else None
                    self.codelist.append(parsed)

    def find_code(self,codepoint):
        """Find the Unicode information for a codepoint (as int).

        Returns:
            a UnicodeCharacter class object or None.
        """
        # the list is unlikely to contain duplicates but I have seen Unicode.org
        # doing that in similar situations. Again, better make sure.
        val = [x for x in self.codelist if codepoint == x.code]
        return val[0] if val else None

    def find_char(self,str):
        """Find the Unicode information for a codepoint (as character).

        Returns:
            for a single character: a UnicodeCharacter class object or
            None.
            for a multicharacter string: a list of the above, one element
            per character.
        """
        if len(str) &gt; 1:
            result = [self.find_code(ord(x)) for x in str]
            return result
        else:
            return self.find_code(ord(str))
</code></pre>
<p>When loaded, you can now look up a character code with</p>
<pre><code>&gt;&gt;&gt; ul = UnicodeList()     # ONLY NEEDED ONCE!
&gt;&gt;&gt; print (ul.find_code(0x204))
{LATIN CAPITAL LETTER E WITH DOUBLE GRAVE}
</code></pre>
<p>which by default is shown as the <em>name</em> of a character (Unicode calls this a 'code point'), but you can retrieve other properties as well:</p>
<pre><code>&gt;&gt;&gt; print ('%04X' % uc.find_code(0x204).lowercase)
0205
&gt;&gt;&gt; print (ul.lookup(0x204).block)
Latin Extended-B
</code></pre>
<p>and (as long as you don't get a <code>None</code>) even chain them:</p>
<pre><code>&gt;&gt;&gt; print (ul.find_code(ul.find_code(0x204).lowercase))
{LATIN SMALL LETTER E WITH DOUBLE GRAVE}
</code></pre>
<p>It does not rely on your particular build of Python; you can always download an updated list from unicode.org and be assured to get the most recent information:</p>
<pre><code>import unicodedata
&gt;&gt;&gt; print (unicodedata.name('\U0001F903'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: no such name
&gt;&gt;&gt; print (uclist.find_code(0x1f903))
{LEFT HALF CIRCLE WITH FOUR DOTS}
</code></pre>
<p>(As tested with Python 3.5.3.)</p>
<p>There are currently two lookup functions defined:</p>
<ul>
<li><code>find_code(int)</code> looks up character information by <em>codepoint</em> as an integer.</li>
<li><code>find_char(string)</code> looks up character information for the character(s) in <code>string</code>. If there is only one character, it returns a <code>UnicodeCharacter</code> object; if there are more, it returns a <em>list</em> of objects.</li>
</ul>
<p>After <code>import unicodelist</code> (assuming you saved this as <code>unicodelist.py</code>), you can use</p>
<pre><code>&gt;&gt;&gt; ul = UnicodeList()
&gt;&gt;&gt; hex(ul.find_char(u'è').code)
'0xe8'
</code></pre>
<p>to look up the hex code for any character, and a list comprehension such as</p>
<pre><code>&gt;&gt;&gt; l = [hex(ul.find_char(x).code) for x in 'Hello']
&gt;&gt;&gt; l
['0x48', '0x65', '0x6c', '0x6c', '0x6f']
</code></pre>
<p>for longer strings. <em>Note that you don't actually need all of this</em> if all you want is a <em>hex</em> representation of a string! This suffices:</p>
<pre><code> l = [hex(ord(x)) for x in 'Hello']
</code></pre>
<p>The purpose of this module is to give easy access to <em>other</em> Unicode properties. A longer example:</p>
<pre><code>str = 'Héllo...'
dest = ''
for i in str:
    dest += chr(ul.find_char(i).uppercase) if ul.find_char(i).uppercase is not None else i
print (dest)

HÉLLO...
</code></pre>
<p>and showing a list of properties for a character per your example:</p>
<pre><code>letter = u'Ȅ'
print ('Name &gt; '+ul.find_char(letter).name)
print ('Unicode number &gt; U+%04x' % ul.find_char(letter).code)
print ('Bloc &gt; '+ul.find_char(letter).block)
print ('Lowercase &gt; %s' % chr(ul.find_char(letter).lowercase))
</code></pre>
<p>(I left out HTML; these names are not defined in the Unicode standard.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/unicodedata.html?#module-unicodedata" rel="nofollow noreferrer"><code>unicodedata</code> documentation</a> shows how to do most of this.</p>
<p>The Unicode block name is apparently not available but <a href="https://stackoverflow.com/questions/243831/unicode-block-of-a-character-in-python">another Stack Overflow question has a solution of sorts</a> and <a href="https://stackoverflow.com/questions/1832893/python-regex-matching-unicode-properties">another has some additional approaches using regex</a>.</p>
<p>The uppercase/lowercase mapping and character number information is not particularly Unicode-specific; just use the regular Python string functions.</p>
<p>So in summary</p>
<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.name('Ë')
'LATIN CAPITAL LETTER E WITH DIAERESIS'
&gt;&gt;&gt; 'U+%04X' % ord('Ë')
'U+00CB'
&gt;&gt;&gt; '&amp;#%i;' % ord('Ë')
'&amp;#203;'
&gt;&gt;&gt; 'Ë'.lower()
'ë'
</code></pre>
<p>The <code>U+%04X</code> formatting is sort-of correct, in that it simply avoids padding and prints the whole hex number for code points with a value higher than 65,535.  Note that some other formats require the use of <code>%08X</code> padding in this scenario (notably <code>\U00010000</code> format in Python).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this in some ways :</p>
<p><strong>1</strong>- create an API yourself ( I can't find anything that do this )<br/>
<strong>2</strong>- create table in database or excel file<br/>
<strong>3</strong>- load and parse a website to do that</p>
<p>I think the 3rd way is very easy. take a look as <a href="http://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=dec" rel="nofollow noreferrer">This Page</a>. you can find some information there Unicodes.</p>
<p>Get your Unicode number and then, find it in web page using parse tools like <a href="http://lxml.de/" rel="nofollow noreferrer">LXML</a> , <a href="https://scrapy.org/" rel="nofollow noreferrer">Scrapy</a> , <a href="https://pypi.python.org/pypi/selenium" rel="nofollow noreferrer">Selenium</a> , etc</p>
</div>
<span class="comment-copy">Does <a href="https://docs.python.org/3/library/unicodedata.html?#module-unicodedata" rel="nofollow noreferrer"><code>unicodedata</code></a> suffice? From the looks of it, it does not tell <i>everything</i> about each code point, but it's sure a lot.</span>
<span class="comment-copy">Note to self: I'm not that confident yet about the code in <code>lookup</code> :( It looks fairly un-pythonic to my (untrained) eyes. ... it's better than a loop, though.</span>
<span class="comment-copy">this is awesome thank you</span>
<span class="comment-copy">Is it possible to run this code on a whole tex converting the letters to their hex value on the fly ? Because hex(ord(u'è')) returns an str type but uclist.lookup takes an int as an argument.</span>
<span class="comment-copy">@LilithM: no, that needs an entirely new program. But converting a single integer to hex in Python should not be a problem.</span>
<span class="comment-copy">converting an int to hex is no problem but I was looking for a way to convert a letter to it's hex value and get an int. Because hex(ord()) produces an str.</span>
<span class="comment-copy">thank you, this is very helpful</span>
<span class="comment-copy">For something quick I'll use tripleee's suggestion but ultimately I think the 3rd way is the way to go. Thank you very much.</span>
<span class="comment-copy">No need to parse 3rd party web pages if the data is already freely accessible through <a href="https://www.unicode.org" rel="nofollow noreferrer">unicode.org</a>.</span>
