<div class="post-text" itemprop="text">
<p>I've read some switch MAC address table into a file and for some reason the MAC address if formatted as such:</p>
<p>'aabb.eeff.hhii'</p>
<p>This is not what a MAC address should be, it should follow: 'aa:bb:cc:dd:ee:ff'</p>
<p>I've had a look at the top rated suggestions while writing this and found an answer that may fit my needs but it doesn't work</p>
<p><a href="https://stackoverflow.com/questions/9475241/split-string-every-nth-character">satomacoto's answer</a></p>
<p>The MACs are in a list, so when I run for loop I can see them all as such:</p>
<p><strong>Current Output</strong></p>
<pre><code>['8424.aa21.4er9','fa2']
['94f1.3002.c43a','fa1']
</code></pre>
<p>I just want to append ':' at every 2nd nth character, I can just remove the '.' with a simple replace so don't worry about that</p>
<p><strong>Desired output</strong></p>
<pre><code>['84:24:aa:21:4e:r9','fa2']
['94:f1:30:02:c4:3a','fa1']
</code></pre>
<p><strong>My code</strong></p>
<pre><code>info = []
newinfo = []
file = open('switchoutput')
newfile = file.read().split('switch')
macaddtable = newfile[3].split('\\r')
for x in macaddtable:
   if '\\n' in x:
       x = x.replace('\\n', '')
   if carriage in x:
       x = x.replace(carriage, '')
   if '_#' in x:
       x = x.replace('_#', '')
   x.split('/r')
   info.append(x)
for x in info:
   if "Dynamic" in x:
      x = x.replace('Dynamic', '')
   if 'SVL' in x:
      x = x.replace('SVL', '')
   newinfo.append(x.split(' '))
for x in newinfo:
   for x in x[:1]:
       if '.' in x:
           x = x.replace('.', '')
   print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Borrowing from the solution that <a href="https://stackoverflow.com/questions/9475241/split-string-every-nth-character">you linked</a>, you can achieve this as follows:</p>
<pre><code>macs = [['8424.aa21.4er9','fa2'], ['94f1.3002.c43a','fa1']]

macs_fixed = [(":".join(map(''.join, zip(*[iter(m[0].replace(".", ""))]*2))), m[1]) for m in macs]
</code></pre>
<p>Which yields:</p>
<pre><code>[('84:24:aa:21:4e:r9', 'fa2'), ('94:f1:30:02:c4:3a', 'fa1')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you like regular expressions:</p>
<pre><code>import re

dotted = '1234.3456.5678'
re.sub('(..)\.?(?!$)', '\\1:', dotted)
# '12:34:34:56:56:78'
</code></pre>
<p>The template string looks for two arbitrary characters '(..)' and assigns them to group 1. It then allows for 0 or 1 dots to follow '\.?' and makes sure that at the very end there is no match '(?!$)'. Every match is then replaced with its group 1 plus a colon.</p>
<p>This uses the fact that <code>re.sub</code> operates on <em>nonoverlapping</em> matches.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = '8424.aa21.4er9'.replace('.','')
print(':'.join(x[y:y+2] for y in range(0, len(x) - 1, 2)))
&gt;&gt; 84:24:aa:21:4e:r9
</code></pre>
<p>Just iterate through the string once you've cleaned it, and grab 2 string each time you loop through the string. Using <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range()</code></a> third optional argument you can loop through every second elements. Using <code>join()</code> to add the <code>:</code> in between the two elements you are iterating.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re</code> module to achieve your desired output. </p>
<pre><code>import re

s = '8424.aa21.4er9'
s = s.replace('.','')
groups = re.findall(r'([a-zA-Z0-9]{2})', s)
mac = ":".join(groups)
#'84:24:aa:21:4e:r9'
</code></pre>
<p><strong>Regex Explanation</strong></p>
<ul>
<li><code>[a-zA-Z0-9]</code>: Match any alphabets or number</li>
<li><code>{2}</code>: Match at most 2 characters.</li>
</ul>
<p>This way you can get groups of two and then join them on <code>:</code> to achieve your desired mac address format</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>wrong_mac = '8424.aa21.4er9'
correct_mac = ''.join(wrong_mac.split('.'))

correct_mac  = ':'.join(correct_mac[i:i+2] for i in range(0, len(correct_mac), 2))

print(correct_mac)
</code></pre>
</div>
<span class="comment-copy">It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on their own. A good way to demonstrate this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (console output, tracebacks, etc.). The more detail you provide, the more answers you are likely to receive. Check the <a href="https://stackoverflow.com/tour">FAQ</a> and <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">My mistake I'll post my code</span>
<span class="comment-copy">After you remove periods, the answer you've linked above should work. Could you explain why it doesn't?</span>
