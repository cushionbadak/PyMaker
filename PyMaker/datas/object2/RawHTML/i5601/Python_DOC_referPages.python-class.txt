<div class="post-text" itemprop="text">
<p>In Python's documentation <code>__class__</code> is described as an attribute. In the object <code>type</code> (the metaclass), <code>__class__</code> appears to be a method.</p>
<p>If we do:</p>
<pre><code>&gt;&gt;&gt; class Foo:
        pass

&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a.__class__ == type.__class__(a)
True
</code></pre>
<p>So, my questions are:</p>
<ol>
<li>When we call <code>a.__class__</code>, are we really calling the method <code>type.__class__(a)</code>?</li>
<li>Is this the reason why <code>__class__</code> is not a member of the <code>__dict__</code> attribute of <code>a</code>?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>__class__</code> is a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer"><em>descriptor object</em></a>. Many attributes on Python core objects are implemented as descriptors. You should see that as an implementation detail, nothing more.</p>
<p><code>__class__</code> is a descriptor because Python needs to be able to validate new values you assign to it; there are certain limitations to assigning to <code>__class__</code> that need to be honoured, and making <code>__class__</code> a descriptor is the most efficient method of doing so.</p>
<p>Descriptor objects are automatically found and invoked on the type when you try to access the attribute on an object. <code>instance.__class__</code> will find and execute the <code>__class__</code> descriptor on the class (by searching through all classes in the inheritance graph), typically ending up with <code>object.__dict__['__class__'].__get__(instance, type(instance))</code> (where <code>object</code> is usually the first class on which the <code>__class__</code> attribute is found in the <code>type(instance).__mro__</code> sequence); This happens because Python will always use the type's <code>__getattribute__</code> method to find attributes, and that method knows how to handle descriptors found on the class and bases, as well as look at the <code>object.__dict__</code> attributes. So they don't live on the object <code>__dict__</code> itself, they live on the object type, by design.</p>
<p>Now, class objects are also <em>callable</em> objects. That's how you create an instance; for a given class <code>Foo</code>, you create an instance by calling it, so <code>Foo()</code>. <code>instance.__class__</code> is just a reference to the class object, just like <code>class_obj = Foo</code> would create a reference to a class. Calling the class object produces a new instance, whatever reference you used to get to it.</p>
<p>Finally, <code>type.__class__</code> is just a reference to <code>type()</code> itself:</p>
<pre><code>&gt;&gt;&gt; type.__class__ is type
True
&gt;&gt;&gt; type.__class__
&lt;class 'type'&gt;
&gt;&gt;&gt; type(type)
&lt;class 'type'&gt;
</code></pre>
<p>That's because <code>type</code> is it's own type. The parent-child relationships of the Python type system must stop somewhere, and <code>type</code> is that point.</p>
<p>In your example, <code>a.__class__</code> is a reference to the <code>Foo</code> class. And <code>type.__class__</code> is the same object as <code>type</code>, so you essentially did this:</p>
<pre><code>Foo == type(a)
</code></pre>
<p>which is indeed true, the type of <code>a</code> is <code>Foo</code>.</p>
</div>
<span class="comment-copy">Thank you for your answer. Now, you said:  <code>instance.__class__ </code> will find and execute <code>type(instance).__dict__['__class__'].__get__(instance, type(instance))</code>  but if do: <code>type(instance).__dict__</code> there is not a    <b>__ class__</b> descriptor, which gets me to my first question, and assume that the descriptor <b>__ class__</b> exist only in the object <b>type</b> and is passed to all their instance objects (all classes). ?</span>
<span class="comment-copy">@maxfraguas: sorry, I made things a little more confusing than I meant to. It's <code>object.__dict__['__class__']</code> that is the descriptor object; all classes inherit from that. The whole class hierarchy is searched for such attributes (so <code>next(t.__dict__['__class__'] for t in type(instance).__mro__ if '__class__' in t.__dict__).__get__(instance, type(instance))</code>.</span>
<span class="comment-copy">Thanks @Matijn Pieters. After a little of playing around, I found <code>__class__</code> inside the <b>object</b>'s  <code>__dict__</code>.</span>
