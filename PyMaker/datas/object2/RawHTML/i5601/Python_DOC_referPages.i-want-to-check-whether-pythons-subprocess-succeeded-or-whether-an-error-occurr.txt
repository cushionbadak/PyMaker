<div class="post-text" itemprop="text">
<p>I am trying to create a code making code  with python subprocess.</p>
<pre><code>#code = 'print("hey")' #OK
code = 'print"hey")'   #SyntaxError
with open(filename, 'w') as f:
    f.write(code)

proc = s.Popen(['python',filename], stdout=s.PIPE, stderr=s.STDOUT)
stdout_v, stderr_v = proc.communicate('')
print(stdout_v.decode('utf8'))
</code></pre>
<p>It is roughly like this.</p>
<p>Currently, the return value from the subprocess is included in stdout_v even if it operates normally or when a syntax error occurs, and it can not tell them apart.</p>
<p>Can I receive the output if it is executed normally, and can receive an error message from the subprocess if an error occurs?</p>
</div>
<div class="post-text" itemprop="text">
<p>The recommended way to use subprocess in Python 3.5+ is with the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer">run function</a>. </p>
<pre><code>proc = s.run(['python',filename], stdout=s.PIPE, stderr=s.PIPE, check=False)
stdout_v, stderr_v, = proc.stdout, proc.stderr
return_code = proc.return_code
</code></pre>
<p>Set <code>check=True</code> to throw an error if the return code is non-zero (which is an indication of some error happening).</p>
<p>In older versions of Python, I usually preferred to use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">check_output</a> or <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer">call</a> functions. Check_output will throw an error if it detects a non-zero exit code, whereas the call function will continue normally.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documents </p>
<p><a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">https://docs.python.org/2/library/subprocess.html</a></p>
<p>You can check for command validity by </p>
<pre><code>subprocess.check_call(args, *, stdin=None, stdout=None, stderr=None, shell=False)
</code></pre>
<p>Run command with arguments. Wait for command to complete. If the return code was zero then return, otherwise raise CalledProcessError. The CalledProcessError object will have the return code in the returncode attribute.</p>
<pre><code>Return code 0= Sucess
</code></pre>
<p>If you wish to see the output of command </p>
<pre><code>subprocess.check_output(args, *, stdin=None, stderr=None, shell=False, universal_newlines=False)
</code></pre>
<p>Run command with arguments and return its output as a byte string.</p>
</div>
<span class="comment-copy">Are you able to use Python 3.5+?</span>
<span class="comment-copy">Check <code>proc.returncode</code>.</span>
<span class="comment-copy">BTW -- don't use the "snippet" button except for HTML/JavaScript that can be run in a browser. The <code>{}</code> button should be used to code-format other languages.</span>
<span class="comment-copy">Where do you get the claim that <code>run</code> is "the preferred way"? The <a href="https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module" rel="nofollow noreferrer">docs on replacing old mechanisms with <code>subprocess</code></a> show a wide variety of uses, not just <code>run</code>.</span>
<span class="comment-copy">The documentation for the run function says "The recommended approach to invoking subprocesses is to use the run() function for all use cases it can handle."</span>
<span class="comment-copy">Ahh. Note that that's Python-3 specific.</span>
<span class="comment-copy">I've updated my answer to reflect this.</span>
<span class="comment-copy">You can't compare the returncode to <code>1</code> to check for failure - anything other than 0 is a failure. Also, the returncode attribute of the CalledProcessError will never be 0, as it's not thrown on success. If all you want to do is check for success/failure, there's no point checking returncode - just catch the exception and handle the failure case there.</span>
<span class="comment-copy">I removed the return code 1= fail, that was incorrect thanks for input</span>
