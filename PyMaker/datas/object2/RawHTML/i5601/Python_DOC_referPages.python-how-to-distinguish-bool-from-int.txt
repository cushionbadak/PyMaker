<div class="post-text" itemprop="text">
<p>I have an array. It contains values of different types. For instance, </p>
<pre><code>[1,2,3,'a', False,0,5,0,3] 
</code></pre>
<p>The task is to move all of the zeros to the end of the array. In fact, it should look like this </p>
<pre><code>[1,2,3,'a',False,5,3,0,0]
</code></pre>
<p>My question is how to distinguish the boolean value <code>False</code> from <code>0</code>? I'm trying to analyze the values one by one comparing them with <code>0</code>. </p>
<p>However, Python does not see any difference between <strong>0</strong> and False and in the end I have something like this below</p>
<pre><code>[1,2,3,'a', 5,3, 0, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, due to historic and not breaking compatibility reasons, bool is a subclass of "int" and False and true just evaluate to 0 and 1. </p>
<p>You can use a custom key function that checks, besides equality to zero, the type of the element. And then, since you want only 0s at the end, use the "0 and 1" equivalence of bool on your favor - elements that fail the boolean expression in the function are evaluated to "0" and placed before all the rest. </p>
<pre><code>mylist.sort(key=lambda value: value == 0 and not isinstance(value, bool))
</code></pre>
<p>Order on the remaining elements, for which the key is "False" is guarranteed to be preserved: <a href="https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts" rel="nofollow noreferrer">https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts</a> (Thanks to Patrick Haugh)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can filter the list from zeroes and add a list with the number of zeroes found to the end of the filtered list:</p>
<pre><code>s = [1,2,3,'a', False,0,5,0,3]
new_s = [i for i in s if isinstance(i, int) and i or isinstance(i, bool)]+[0]*s.count(0) 
</code></pre>
<p>Output:</p>
<pre><code>[1, 2, 3, False, 5, 3, 0, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a built-in function type() which returns the "type" object of the parameter.</p>
<p>You can simply do:</p>
<pre><code>array = [1,2,3,'a', False,0,5,0,3]                #Initial Array
for element in range(len(array)):                 #Iterating indexes in the array
    if type(array[element])==type(1) and array[element] == 0: #If the type of the element is an Integer AND If element is equal to 0 
        e = array.pop(element) #Remove the element from its current position
        array.append(e)                           #Adding the element at the end of the array
        element -= 1                              #Decrementing current index
print(array)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For this problem, type checking is a good idea. You could check if the current element is <code>0</code> and its <strong>not</strong> of type <code>bool</code>, and remove that element and add it to end of the list:</p>
<pre><code>lst = [1,2,3,'a', False,0,5,0,3] 

for i, x in enumerate(lst):
    if x == 0 and not isinstance(x, bool):
        lst.append(lst.pop(i))

print(lst)
</code></pre>
<p>Which Outputs what you want:</p>
<pre><code>[1, 2, 3, 'a', False, 5, 3, 0, 0]
</code></pre>
<p>Or you could make two lists, one with zeroes, and one with non-zeroes, and add them together. For the list of non-zeroes, the elements must <strong>not</strong> be <code>0</code>, but can be of type <code>bool</code>, since <code>False</code> does not get moved to the end. However, for the list of zeroes, the elements must be <code>0</code>, but <strong>not</strong> of type <code>bool</code>, since we don't want to move <code>False</code> to the end. </p>
<p>Here are some examples below:</p>
<p><strong>1.</strong> Using list comprehensions</p>
<pre><code>non_zeroes = [x for x in lst if x != 0 or isinstance(x, bool)]
zeroes = [x for x in lst if x == 0 and not isinstance(x, bool)]

print(non_zeroes + zeroes)
# [1, 2, 3, 'a', False, 5, 3, 0, 0]
</code></pre>
<p><strong>2.</strong> Using <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter()</code></a>:</p>
<pre><code>non_zeroes = list(filter(lambda x: x != 0 or isinstance(x, bool), lst))
zeroes = list(filter(lambda x: x == 0 and not isinstance(x, bool), lst))

print(non_zeroes + zeroes)
# [1, 2, 3, 'a', False, 5, 3, 0, 0]
</code></pre>
<p><strong>Note:</strong> For the type checking, we can use <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code></a> or <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance()</code></a> here. You can choose either. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>You can do something like this in just single loop :</strong></p>
<p>first collect all int values which are non-zero in one list and all zero in second list , at last extend the list:</p>
<pre><code>list_1=[1,2,3,'a', False,0,5,0,3]

all_zero=[]
all_int=[]
for i in list_1:
    if i!=0:
        all_int.append(i)
    else:
        all_zero.append(i)

all_int.extend(all_zero)
print(all_int)
</code></pre>
<p>output:</p>
<pre><code>[1, 2, 3, 'a', 5, 3, False, 0, 0]
</code></pre>
</div>
<span class="comment-copy">Please update your question with the code you have tried already.</span>
<span class="comment-copy">You can use the isdigit() method.</span>
<span class="comment-copy"><code>type(False)</code> is bool</span>
<span class="comment-copy">How do you come to the conclusion that Python doesn't see a difference between <code>0</code> and <code>False</code>?</span>
<span class="comment-copy">@excaza I'm assuming OP is referring to the statement  <code>0 == False</code> being <code>true</code>.</span>
<span class="comment-copy">Isn't there that guarantee? The docs on <a href="https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts" rel="nofollow noreferrer">sort stability</a> seem to indicate that all the sorts that Python offers are stable.</span>
<span class="comment-copy">well, that's a surprise!</span>
