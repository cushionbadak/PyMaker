<div class="post-text" itemprop="text">
<p>I want to know how to randomly pick k items from a list of n size for ALL possible combinations.</p>
<blockquote>
<p>For example, let A = [1, 2, 3, 4] and K = 3. Then it should return [1, 2, 3], [1, 2, 4], [1, 3, 4], and [2, 3, 4].</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a>. For example:</p>
<pre><code>&gt;&gt;&gt; my_list = A = [1, 2, 3, 4]
&gt;&gt;&gt; k = 3

&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; list(combinations(my_list, k))
[(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the ordering inside the results matters you might use <a href="https://docs.python.org/2/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">itertools.permutations</a> to get all permutations as well - putting them into a set removes duplicates stemming from duplicate numbers in your list</p>
<pre><code>import itertools

n = 3
my_list =  [1, 2, 3, 2 ,1]

print( set(itertools.permutations(my_list, n))) # or list, see below
</code></pre>
<p>Output:</p>
<pre><code>{(1, 2, 1), (3, 1, 2), (2, 3, 2), (1, 3, 2), (3, 1, 1), (3, 2, 1), (1, 2, 2), 
 (1, 1, 3), (2, 2, 1), (2, 1, 1), (1, 3, 1), (2, 3, 1), (1, 2, 3), (1, 1, 2), ...} 
 # with set: 17 items

[(1, 2, 3), (1, 2, 2), (1, 2, 1), (1, 3, 2), (1, 3, 2), (1, 3, 1), (1, 2, 2), 
 (1, 2, 3), (1, 2, 1), (1, 1, 2), (1, 1, 3), (1, 1, 2), (2, 1, 3), (2, 1, 2), ...] 
 # with list: 60 items
</code></pre>
<p>Difference between permutations and combinations:</p>
<pre><code># permutations - based on all values on any position in the resulttuple
[(1, 2, 3), (1, 2, 2), (1, 2, 1), (1, 3, 2), (1, 3, 2), (1, 3, 1), (1, 2, 2), (1
, 2, 3), (1, 2, 1), (1, 1, 2), (1, 1, 3), (1, 1, 2), (2, 1, 3), (2, 1, 2), (2, 1
, 1), (2, 3, 1), (2, 3, 2), (2, 3, 1), (2, 2, 1), (2, 2, 3), (2, 2, 1), (2, 1, 1
), (2, 1, 3), (2, 1, 2), (3, 1, 2), (3, 1, 2), (3, 1, 1), (3, 2, 1), (3, 2, 2),
(3, 2, 1), (3, 2, 1), (3, 2, 2), (3, 2, 1), (3, 1, 1), (3, 1, 2), (3, 1, 2), (2,
 1, 2), (2, 1, 3), (2, 1, 1), (2, 2, 1), (2, 2, 3), (2, 2, 1), (2, 3, 1), (2, 3,
 2), (2, 3, 1), (2, 1, 1), (2, 1, 2), (2, 1, 3), (1, 1, 2), (1, 1, 3), (1, 1, 2)
, (1, 2, 1), (1, 2, 3), (1, 2, 2), (1, 3, 1), (1, 3, 2), (1, 3, 2), (1, 2, 1), (
1, 2, 2), (1, 2, 3)]

# combinations - based on position in source list not on value order in tuple preserved
[(1, 2, 3), (1, 2, 2), (1, 2, 1), (1, 3, 2), (1, 3, 1), (1, 2, 1), (2, 3, 2), (2
, 3, 1), (2, 2, 1), (3, 2, 1)]
</code></pre>
<p>Press any key to continue . . .</p>
</div>
<span class="comment-copy">What part of this is random?</span>
<span class="comment-copy">Any attempt from your side.</span>
