<div class="post-text" itemprop="text">
<p>I noticed that after calling <code>init_printing</code> method of sympy, variable's representation have a better visual appealing. I know that is usually done inheriting repr method. </p>
<p>But when I call <code>__repr__</code> method, result is different. Why? </p>
<p>Before <code>init_printing</code> being called, this is the result:</p>
<pre><code>&gt;&gt;&gt; import sympy as sy
&gt;&gt;&gt; x = sy.Symbol('x')
&gt;&gt;&gt; sy.exp(x)
exp(x)

&gt;&gt; sy.exp(x).__repr__()
'exp(x)'
</code></pre>
<p>After <code>init_printing</code> being called, this is the result:</p>
<pre><code>&gt;&gt;&gt; import sympy as sy
&gt;&gt; sy.init_printing()
&gt;&gt;&gt; x = sy.Symbol('x')
&gt;&gt;&gt; sy.exp(x)
 x
e

&gt;&gt; sy.exp(x).__repr__()
'exp(x)'
</code></pre>
<p>Why the <strong>repr</strong> method doesn't return the same as evaluating the representation of the variable?</p>
<pre><code>&gt;&gt;&gt; sy.exp(x).__repr__
&lt;bound method Basic.__repr__ of exp(x)&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That function installs a custom <a href="https://docs.python.org/3/library/sys.html#sys.displayhook" rel="nofollow noreferrer"><code>sys.displayhook()</code> function</a>, which is used in the interactive interpreter to echo the result of expressions:</p>
<blockquote>
<p><code>sys.displayhook</code> is called on the result of evaluating an expression entered in an interactive Python session. The display of these values can be customized by assigning another one-argument function to <code>sys.displayhook</code>.</p>
</blockquote>
<p>The implementation is found in the <a href="https://github.com/sympy/sympy/blob/9670ff89dd8bff7878c6d636ec4f493b87d092df/sympy/interactive/printing.py#L15-L33" rel="nofollow noreferrer"><code>sympy.interactive.printing</code> module</a>:</p>
<blockquote>
<pre><code>def _init_python_printing(stringify_func, **settings):
    """Setup printing in Python interactive session. """
    import sys
    from sympy.core.compatibility import builtins

    def _displayhook(arg):
        """Python's pretty-printer display hook.
           This function was adapted from:
            http://www.python.org/dev/peps/pep-0217/
        """
        if arg is not None:
            builtins._ = None
            print(stringify_func(arg, **settings))
            builtins._ = arg

sys.displayhook = _displayhook
</code></pre>
</blockquote>
<p>In other words, this has nothing to do with how the objects implement <code>__repr__</code>.</p>
</div>
<span class="comment-copy">Didn't know about sys.displayhook existence. Thank you.</span>
