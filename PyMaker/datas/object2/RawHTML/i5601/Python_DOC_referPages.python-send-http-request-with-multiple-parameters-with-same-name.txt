<div class="post-text" itemprop="text">
<p>I need to send a simple form to a remote server using POST method with python.
This form is a bit strange... some fields name are repeated without using the [] but only passing the key=value pair (this is a requisite otherwise the process on server side doesn't work!).</p>
<p>Below an example of the original form:</p>
<pre><code>  &lt;form method="post" action="/remote/test.php"&gt;
    &lt;input type=hidden name="value01" value="7777" size="12" maxlength=20&gt;
    &lt;input type="text" name="value02" value="123456789"&gt;
    &lt;input type="text" name="value03" value="A1234"&gt;
    &lt;input type="text" name="value04" value="B5678"&gt;
    &lt;input type=submit value="value05 " class="button"&gt;
    &lt;input type="hidden" name="VALUE00" value="9999"&gt;
    &lt;input type=hidden name="VALUE99"value="09.01.2015 14:52:40"&gt;
    &lt;input type="hidden" name="LIST" value="D0000000033039"&gt;
    &lt;input type="hidden" name="LIST" value="D0000000033039"&gt;
    &lt;input type="hidden" name="LIST" value="C0000000032032"&gt;
    &lt;input type="hidden" name="LIST" value="X0000000031820"&gt;    
  &lt;/form&gt;
</code></pre>
<p>I use "Requests" and as per the documentation, i can pass a dictionary for sending post parameters.
So i implement below code. The real data that fill the sourceDataList variable are read from a text file with a windows EOL (CR+LF), so to "emulate" the file for this example, i compile a list with some value similar to real values that are present in the file</p>
<pre><code>import re

sourceDataList = [
 '2017-12-20 08:59:17;Value01\r\n',
 '2017-12-20 08:59:18;Value02\r\n', 
 '2017-12-20 08:59:20;Value03\r\n',
 '2017-12-20 08:59:21;Value04\r\n'
]
dataList = [];
for line in sourceDataList:
  dataList.append({'RESULT' , re.sub('[^A-Za-z0-9]+', '', line.split(';')[1].strip())});

print dataList;
</code></pre>
<p>The problem start here.. when I print the dataList I discover that the data are "mixed" in a strange way.. sometime there is a swap between key and value!</p>
<p>as example, the code above produce below result:</p>
<pre><code>[
 set(['Value01', 'RESULT']), 
 set(['RESULT', 'Value02']), 
 set(['RESULT', 'Value03']), 
 set(['Value04', 'RESULT'])
]
</code></pre>
<p>where did i go wrong?</p>
<p><strong>- UPDATE 1 -</strong> </p>
<p>my purpose is to create a dictionary that i can use with "Requests".
If i use above set the call work as expected and send the data to server but in wrong order (some key and value inverted)</p>
<p>If i use a real dictionary like this (notice that now i use : instead , ):</p>
<pre><code>  for line in sourceDataList:
      dataList.append({'RESULT' : re.sub('[^A-Za-z0-9]+', '', line.split(';')[1].strip())});
</code></pre>
<p>and use it as parameter for "requests":</p>
<pre><code>r = requests.post(url, data=dataToSend);
</code></pre>
<p>I get an error:</p>
<pre><code>  File "test.py", line 46, in &lt;module&gt;
    r = requests.post(url, data=dataToSend);
  File "C:\Python27\lib\site-packages\requests\api.py", line 112, in post
    return request('post', url, data=data, json=json, **kwargs)
  File "C:\Python27\lib\site-packages\requests\api.py", line 58, in request
    return session.request(method=method, url=url, **kwargs)
  File "C:\Python27\lib\site-packages\requests\sessions.py", line 494, in request
    prep = self.prepare_request(req)
  File "C:\Python27\lib\site-packages\requests\sessions.py", line 437, in prepare_request
    hooks=merge_hooks(request.hooks, self.hooks),
  File "C:\Python27\lib\site-packages\requests\models.py", line 308, in prepare
    self.prepare_body(data, files, json)
  File "C:\Python27\lib\site-packages\requests\models.py", line 499, in prepare_body
    body = self._encode_params(data)
  File "C:\Python27\lib\site-packages\requests\models.py", line 97, in _encode_params
    for k, vs in to_key_val_list(data):
ValueError: need more than 1 value to unpack
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here you are storing your data as <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow noreferrer"><strong><code>set</code></strong></a>.  <em>Sets in Python are unordered in nature.</em> <code>{a, b}</code> (note comma <code>,</code> here) is a syntax of a <code>set</code>. Probably you want to store it as <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow noreferrer"><strong><code>dict</code></strong></a> (if you want it as key-value pair) which has the syntax <code>{a: b}</code> (note here the colon <code>:</code> instead of <code>,</code>). OR, may be you can store it as a <a href="https://docs.python.org/3/library/functions.html#func-tuple" rel="nofollow noreferrer"><strong><code>tuple</code></strong></a> too.</p>
<p>For example:</p>
<pre><code>import re

sourceDataList = [
     '2017-12-20 08:59:17;Value01\r\n',
      '2017-12-20 08:59:18;Value02\r\n',
      '2017-12-20 08:59:20;Value03\r\n',
      '2017-12-20 08:59:21;Value04\r\n'
]

# --- Using Dictionary ---
dataList = []
for line in sourceDataList:
    dataList.append({'RESULT' : re.sub('[^A-Za-z0-9]+', '', line.split(';')[1].strip())})

# --- Using tuple ---
dataList = []
for line in sourceDataList:
    dataList.append(('RESULT', re.sub('[^A-Za-z0-9]+', '', line.split(';')[1].strip())))
</code></pre>
<p>Here are one-liners to get the same result:</p>
<pre><code># For Dictionary 
dataList = [{'RESULT' : re.sub('[^A-Za-z0-9]+', '', line.split(';')[1].strip())} for line in sourceDataList]

# For Dictionary 
dataList = [('RESULT', re.sub('[^A-Za-z0-9]+', '', line.split(';')[1].strip())) for line in sourceDataList]
</code></pre>
<p>Here are the sample of the result that you'll receive:</p>
<pre><code># --- For Dictionary ---
[{'RESULT': 'Value01'}, {'RESULT': 'Value02'}, {'RESULT': 'Value03'}, {'RESULT': 'Value04'}]

# --- For tuple ---
[('RESULT', 'Value01'), ('RESULT', 'Value02'), ('RESULT', 'Value03'), ('RESULT', 'Value04')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>after some tests and after reading a lot of documentation about requests I finally found a solution to my specific problem.
To sum up, i need to send some data to a web address using POST method with one parameter. This parameter can contain different data with same field name.
As example:
TESTFIELD= test01, TESTFIELD= test02</p>
<p>and so on..</p>
<p>now, the problem can be solved using this syntax:</p>
<pre><code>import re

def sendData():


  sourceDataList = [
    '2017-12-20 08:59:17;Value01\r\n',
    '2017-12-20 08:59:18;Value02\r\n', 
    '2017-12-20 08:59:20;Value03\r\n',
    '2017-12-20 08:59:21;Value04\r\n'
   ]

  dataList = [];
  for line in sourceDataList:
    dataList.extend([re.sub('[^A-Za-z0-9]+', '', line.split(';')[1].strip())]);
  return {'TESTFIELD': dataList}
</code></pre>
<p>this function return below dictionary:</p>
<p>{'TESTFIELD': ['test01', 'test02', 'test03', 'test04']}</p>
<p>that request convert in a POST body like this:</p>
<p>TESTFIELD=test01&amp;TESTFIELD=test02&amp;TESTFIELD=test03&amp;TESTFIELD=test04</p>
<p><strong>FINAL WARNING!</strong> this is specific uses case, where the field name must be always the same, this imply that also the server side code must be able to read this specific set-up. I must use this service that is not made by me and i can't change anything on server side so i need to find this solution.
The correct way to pass multiple value with same field name is to use [].
As example:</p>
<p>TESTFIELD[] = test01, TESTFIELD[] = test02 and so on...</p>
<p>This return an array on server side. Instead, if you use this solution some server side languages can't handle it with standard functions.</p>
<p>As example, with PHP you can't rely on $_POST superglobal you will always find ONLY ONE VALUE because this is a non standard way to pass multiple value for same parameters.
If you use PHP you must use file_get_contents("php://input") to obtain all values and you must parse it by yourself.</p>
</div>
<span class="comment-copy">How do you want <code>dataList</code> to look like ?</span>
<span class="comment-copy">You can remove the code related to form and HTTP request which is totally irrelevant to your problem. And should explain more about the problem in later code.</span>
