<div class="post-text" itemprop="text">
<h1>Question</h1>
<p>In <code>python</code>, what is the shortest/easiest way to create a function which allows me to access a variable by concatenating two string literals to generate the variable's name?</p>
<hr/>
<h1>Background</h1>
<p>In <code>C</code>, I can do something like so:</p>
<pre><code>#define CONCAT(x,y) x ## _ ## y
</code></pre>
<p>Then, later in my code, I could do something like:</p>
<pre><code>int i = CONCAT(PRODUCT,BANANA).
</code></pre>
<p>Assuming a macro exists with the name PRODUCT_BANANA, its value is now assigned to <code>i</code>. I can accomplish something similar in shell scripts via indirection.</p>
<hr/>
<h1>Question - Redux</h1>
<p>How can I accomplish this same functionality in <code>python</code>? I'm doing this because I have a <code>python</code> class with thousands of variables for dozens of different products, i.e.</p>
<pre><code>class A(object):
    BANANA_ADDRESS0 = 0xABCD;
    PINEAPPLE_ADDRESS0 = 0x1234;
    BANANA_ADDRESS1 = 0x4567;
    PINEAPPLE_ADDRESS1 = 0x1000;
</code></pre>
<p>I'd like to be able to have a function that can be, for example, executed via <code>someFunc("BANANA", "ADDRESS0")</code>, resolve the value as <code>A.BANANA_ADDRESS0</code>, and return the associated value (<code>0xABCD</code>, in this case).</p>
<hr/>
<h1>Extra</h1>
<p>Assuming the above is possible, is it possible to have the function always interpret the supplied function arguments as string literals, so function calls don't need the arguments wrapped in single/double quotes? i.e. so it can be called via <code>someFunc(BANANA, ADDRESS0)</code>, rather than <code>someFunc("BANANA", "ADDRESS0")</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The first part is easy:</p>
<pre><code>class A(object):
    BANANA_ADDRESS0 = 0xABCD;
    PINEAPPLE_ADDRESS0 = 0x1234;
    BANANA_ADDRESS1 = 0x4567;
    PINEAPPLE_ADDRESS1 = 0x1000;

    @classmethod
    def some_func(cls, name_a, name_b):
        name = '{}_{}'.format(name_a, name_b)
        return getattr(cls, name)

value = A.some_func('BANANA', 'ADDRESS1')
</code></pre>
<p>But the second part is not possible unless you have a limited set of names, in which case you would also have to have</p>
<pre><code>BANANA = 'BANANA'
PINEAPPLE = 'PINEAPPLE'
</code></pre>
<p>etc</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to do this for class/instance attributes, you want <a href="https://docs.python.org/2/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a>. It takes a string argument, which you can construct any way you like:</p>
<pre><code>getattr(A, "BANANA" + "_" + "ADDRESS0")
</code></pre>
<p>You could of course write a simple wrapper if you wanted, but in my opinion that would be obfuscatory for no benefit.</p>
<p>Building the string passed to <code>getattr</code> any way you want includes using other constructs like <code>for</code> loops if appropriate. For instance, suppose you have iterables of elements of the attribute names and want to get them all:</p>
<pre><code>for first_part in first_parts:
   for second_part in second_parts:
       print(getattr(A, first_part + "_" + second_part))
</code></pre>
<p>For your "extra" block - well, <code>BANANA</code> means a variable named <code>BANANA</code>, not the literal string. You could define such a string constant if you really wanted, but I wouldn't. There is no good way to tell Python to always assume an unresolved variable name actually means a string literal, and I think it would be a bad idea to do so if you could.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use a <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow noreferrer">dict</a>. i.e.</p>
<pre><code>A = {
    "BANANA_ADDRESS0": 0xABCD,
    "PINEAPPLE_ADDRESS0": 0x1234,
    "PINEAPPLE_ADDRESS1": 0x1000
} 
</code></pre>
<p>And then you can do something like this:</p>
<pre><code>var1 = "BANANA" # or any other value
var2 = "ADDRESS0" # or any other value
myValue = A[var1 + "_"  + var2]
</code></pre>
</div>
<span class="comment-copy">It's common to build a string and then use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">getattr</a> built-in: <code>getattr(A_obj, var_name)</code></span>
<span class="comment-copy">Why do you not use a dictionary for this? <code>A={"BANANA_ADDRESS0</code>:0xABCD}` and access it with <code>A["BANANA"+"_"+"ADDRESS0"]</code> (and probably replacing "BANANA" and "ADDRESS0" with a variable?</span>
<span class="comment-copy">If you would need this to be global use the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code></a> function that allows you to set and get global variables</span>
<span class="comment-copy">@MEE The code is dynamically generated, and the script requires that the names be "interleaved" (i.e. create definitions for <code>ADDRESS0</code> for all products, create definitions for <code>ADDRESS1</code> for all products, etc). I need to be able to extract the value without changing the definitions.</span>
<span class="comment-copy">If you want to access (set/write) the value from the variable <code>var1</code> just do this: <code>A[var1 + "_" + (some way to get the second part)]</code></span>
