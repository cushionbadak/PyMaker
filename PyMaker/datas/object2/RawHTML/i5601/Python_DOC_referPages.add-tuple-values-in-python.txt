<div class="post-text" itemprop="text">
<p>I'm working on a script where I have a list of tuples </p>
<pre><code>tuple=()
number=input("Enter the how many elements you want :")
for i in range(0,number):
     ele=input("Enter the element :")
     tuple.apppend(ele)
print tuple
</code></pre>
<p>Append method cannot work</p>
</div>
<div class="post-text" itemprop="text">
<p>You can solve it by creating your tuple-inputs from a list like so:</p>
<pre><code>def GetTuple():
    data=[]
    number=input("Enter the how many elements you want :")
    for i in range(0,number):
        ele=input("Enter the element :")
        data.append(ele)

    return tuple(data)


myTup = GetTuple()
print(myTup)
</code></pre>
<p>If you need multiple tuples you have to call this multiple times and put each tumple inside another list. After the tuple is created, you cannot modify it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Tuples are <a href="https://stackoverflow.com/questions/8056130/immutable-vs-mutable-types">immutable</a>, meaning that their value cannot be changed where they're stored in memory, but rather pointing the <em>variable</em> to a different instance in memory.</p>
<p>Therefore, it does not make sense to have an <code>append()</code> method for an immutable type. This method is designed specifically for <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">lists</a>. </p>
<p>In your case, you might want to switch to a list rather than a tuple.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Append method cannot work</p>
</blockquote>
<p>Exactly. Tuples are immutable. So provide all contents <em>during creation</em>. Like:</p>
<pre><code>elements = tuple(input('Enter the element: ') for _ in range(number))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; number = input('Enter the how many elements you want: ')
Enter the how many elements you want: 3
&gt;&gt;&gt; elements = tuple(input('Enter the element: ') for _ in range(number))
Enter the element: 3.142
Enter the element: 2.718
Enter the element: 42
&gt;&gt;&gt; elements
(3.142, 2.718, 42)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of <code>tuple.append(ele)</code> you could do <code>tuple += ele,</code><sup>[*]</sup>. It's less efficient because it copies the whole tuple every time, but since you apparently have a person enter data manually, I assume it won't be much.</p>
<p>Btw, don't call it <code>tuple</code>. You're shadowing Python's built-in, plus you'd better use a meaningful name that <em>describes the contents</em>.</p>
<p><sup>[*] To the inevitable noobs ignoring the comma and claiming that that doesn't work: Don't ignore the comma, and do test it.</sup></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>tuple=()
number=int(input("Enter the how many elements you want :"))
for i in range(number):
    ele=input("Enter the element :")
    tuple = tuple + (int(ele),)
print(tuple)
</code></pre>
<p>This works on Python 3.6.</p>
</div>
<span class="comment-copy">Well that is what a <code>list</code> is for. A tuple is immutable.</span>
<span class="comment-copy">Yes, if you could append arbitrary values to a tuple it wouldn't be a tuple.</span>
<span class="comment-copy">This is not a list of tuples, it is just a tuple, that you want to fill with strings.</span>
<span class="comment-copy">that mean's append method cannot work in tuple</span>
<span class="comment-copy">Also there's a typo in <code>apppend</code>: correct would be <code>append</code></span>
<span class="comment-copy">Tuple is immutable so we cannot edit the data's</span>
<span class="comment-copy">@kaviraj Exactly, that is the reason to collect all values stored inside that tuple into a list and converting that into a tumple at the end. The resulting tuple is immutable. If you need to mutate the values of your tuples, then you should not use them but use lists instead.</span>
<span class="comment-copy">please give more explanation for your solution</span>
<span class="comment-copy">It works everywhere. But it creates a new tuple everytime instead of adding elements into existing one (what is impossible by definition).</span>
