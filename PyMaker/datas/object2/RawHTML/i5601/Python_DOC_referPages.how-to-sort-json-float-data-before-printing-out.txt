<div class="post-text" itemprop="text">
<p>I'm trying to get data in JSON file, but before I print out, I want to sort the <code>money</code>. This is my code</p>
<pre><code>with open("cash.json", "r", encoding="utf-8") as f:
    data = json.load(f)
    for c in data['NotAdmin']:
        a_new_list = sorted(c["money"])
        print(a_new_list)
</code></pre>
<p>This is what is inside my <code>cash.json</code> file</p>
<pre><code>{
    "NotAdmin": [
        {
            "money": 200.0,
            "name": "Sam",
            "password": "1234"
        }, {
            "money": 150.0,
            "name": "Jasmin",
            "password": "1573"
        }, {
            "money": 100.0,
            "name": "Ali",
            "password": "1856"
        }
    ],
    "admin": [
        {
            "name": "Adam",
            "password": "6767"
        }, {
            "name": "Eva",
            "password": "2222"
        }
    ]
}
</code></pre>
<p>Im keep getting this error <code>TypeError: 'float' object is not iterable</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The reason that you are getting the <code>TypeError</code> is that you were iterating through the <code>dictionaries</code> in the <code>NotAdmin</code> <code>list</code> and trying to apply to the <code>sorted</code> functions to the <code>money</code> attributes. This will obviously fail as you are trying to "sort" a <code>float</code>(?).</p>
<p>So, the way the <code>sorted</code> (or <code>sort</code> function which modifies the <code>iterable</code> in place) works is to take an <code>iterable</code> and apply an "evaluation" function to each element, in order to sort them. This function can either be passed in under the <code>key</code> parameter, or if not passed in, Python will automatically decide how to sort the elements.</p>
<p>To apply this to our code, we want to take the <code>data["NotAdmin"]</code> list and apply the <code>.sort</code> method with a <code>key</code> to select the <code>money</code> attribute of each of the dictionaries. We can do this with an (anonymous) <code>lambda</code> function. </p>
<p>So, here is the full code:</p>
<pre><code>with open("cash.json", "r", encoding="utf-8") as f:
    data = json.load(f)
    data["NotAdmin"].sort(key = lambda d: d["money"])
    print(data)
</code></pre>
<p>output:</p>
<pre><code>{'admin': [{'password': '6767', 'name': 'Adam'}, {'password': '2222', 'name': 'Eva'}], 'NotAdmin': [{'password': '1856', 'money': 100.0, 'name': 'Ali'}, {'password': '1573', 'money': 150.0, 'name': 'Jasmin'}, {'password': '1234', 'money': 200.0, 'name': 'Sam'}]}
</code></pre>
<hr/>
<p>And also, if you want to have the elements in <em>descending</em> order, then we can take a look at <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">the documentation</a> and see that we can set the <code>reverse</code> flag to <code>True</code>.</p>
<p>Which would just change the line to:</p>
<pre><code>...
    ...
    data["NotAdmin"].sort(key = lambda d: d["money"], reverse = True)
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you want to do is:</p>
<pre><code>with open("cash.json", "r", encoding="utf-8") as f:
    data = json.load(f)
    a_new_list = sorted(data['NotAdmin'], key=lambda k: k['money'])
    print(a_new_list)
</code></pre>
<p>By doing <code>sorted(c["money"])</code>, you want to sort one <code>float</code>, the <code>money</code> of the dictionary <code>c</code>, which is not possible, nor what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>with open("cash.json", "r", encoding="utf-8") as f:
   data = json.load(f)
   new_data = {a:sorted(b, key=lambda x:x['money']) if all('money' in c for c in b) else b for a, b in data.items()}
</code></pre>
<p>Output:</p>
<pre><code>{'NotAdmin': [{'money': 100.0, 'password': '1856', 'name': 'Ali'}, {'money': 150.0, 'password': '1573', 'name': 'Jasmin'}, {'money': 200.0, 'password': '1234', 'name': 'Sam'}], 'admin': [{'password': '6767', 'name': 'Adam'}, {'password': '2222', 'name': 'Eva'}]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error you got is due to its definition </p>
<pre><code>sorted??
Docstring: sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list
Type:      builtin_function_or_method
</code></pre>
<p>To tackle your problem, you need to sort array object using their attributes, example </p>
<pre><code>with open("cash.json", "r", encoding="utf-8") as f:
    data = json.load(f)
    for c in data['NotAdmin']:
        a_new_list = sorted(c, key=lambda x: x['money'], reverse=True)
        print(a_new_list)
</code></pre>
<p>see more: <a href="https://stackoverflow.com/questions/403421/how-to-sort-a-list-of-objects-based-on-an-attribute-of-the-objects">How to sort a list of objects based on an attribute of the objects?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is one line solution , You can try </p>
<p>Approach is , first check if key is <code>'NotAdmin'</code> and then sorted key is <code>'money'</code> </p>
<pre><code>import json
print([sorted(value, key=lambda x: x['money']) for key,value in json.loads(open('data.json','r').read()).items() if key=='NotAdmin'])
</code></pre>
<p>output:</p>
<pre><code>[[{'name': 'Ali', 'money': 100.0, 'password': '1856'}, {'name': 'Jasmin', 'money': 150.0, 'password': '1573'}, {'name': 'Sam', 'money': 200.0, 'password': '1234'}]]
</code></pre>
</div>
<span class="comment-copy">wohh, that was a long line with code.</span>
<span class="comment-copy">this is close to what I'm looking for, but there is an error with this TypeError: string indices must be integers.</span>
