<div class="post-text" itemprop="text">
<p>I have a csv file that contains 6 columns.</p>
<p>I want to sort it by col #2 and then by col #3. </p>
<p>My current code is creating a blank file:</p>
<pre><code>import csv
with open('original.csv', mode='rt') as f, open('sorted.csv', 'w') as final:
        writer = csv.writer(final, delimiter='\t')
        reader = csv.reader(f, delimiter=',')
        _ = next(reader)
        sorted1 = sorted(reader, key=lambda row: int(row[1]))
        sorted2 = sorted(reader, key=lambda row: int(row[2]))
        for row in sorted2:
            writer.writerow(row)
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason that your output file is empty is because</p>
<pre><code>sorted2 = sorted(reader, key=lambda row: int(row[2]))
</code></pre>
<p>is trying to sort the data from <code>reader</code>, but you've already read all the data in the previous sorting statement, so there's nothing left for the reader to read. However, you really <em>don't</em> want to re-sort the data from <code>reader</code>, you want to re-sort the data in <code>sorted1</code>, like this:</p>
<pre><code>import csv

with open('original.csv', mode='rt') as f, open('sorted.csv', 'w') as final:
    writer = csv.writer(final, delimiter='\t')
    reader = csv.reader(f, delimiter=',')
    _ = next(reader)
    sorted1 = sorted(reader, key=lambda row: int(row[1]))
    sorted2 = sorted(sorted1, key=lambda row: int(row[2]))
    for row in sorted2:
        writer.writerow(row)
</code></pre>
<p>OTOH, there's no need to do the sorting in two passes. You can do it in a single pass by changing the key function.</p>
<pre><code>import csv

with open('original.csv', mode='rt') as f, open('sorted.csv', 'w') as final:
    writer = csv.writer(final, delimiter='\t')
    reader = csv.reader(f, delimiter=',')
    _ = next(reader)
    sorted2 = sorted(reader, key=lambda row: (int(row[1]), int(row[2])))        
    for row in sorted2:
        writer.writerow(row)
</code></pre>
<p>That key function first compares items by their <code>row[1]</code> values, and if those values are identical it then compares them by their <code>row[2]</code> values. That <em>may</em> not give the ordering that you actually want. You may want to reverse the order of those tests: </p>
<pre><code>key=lambda row: (int(row[2]), int(row[1])) 
</code></pre>
<p>As Peter Wood mentions in the comments, Writer objects have a <a href="https://docs.python.org/3/library/csv.html#csv.csvwriter.writerows" rel="noreferrer"><code>writerows</code></a> method that will write all the rows in one call. This is more efficient than writing the rows one by one in a <code>for</code> loop.</p>
<p>BTW, there's no need to do this assignment:</p>
<pre><code>_ = next(reader)
</code></pre>
<p>I guess it makes it clear that you're discarding the 1st row, but you could just write the call without performing an assignment:</p>
<pre><code>next(reader)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With pandas you could achieve simple.</p>
<pre><code>import pandas as pd

df = pd.read_csv('original.csv', delimiter='\t')

df = df.sort_values(['col1', 'col2'], ascending=[True, True]) # parameter ascending is applied to 'col1' and 'col2' respectively.

df.to_csv('sorted.csv')
</code></pre>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer">doc to pandas read_csv</a>
<br/>
<br/>
<a href="http://pandas.pydata.org/pandas-docs/version/0.19/generated/pandas.DataFrame.sort.html" rel="nofollow noreferrer">doc to pandas sort</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The lambda function can return a tuple</p>
<pre><code>sorted(reader, key=lambda row: (int(row[1]), int(row[2])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code> with open('original.csv',mode='r') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=";")
        sortedlist = sorted(reader, key=lambda row:(int(row[1]), int(row[2])))
</code></pre>
</div>
<span class="comment-copy">One point: "If csvfile is a file object, it must be opened with the ‘b’ flag on platforms where that makes a difference." <a href="https://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">docs.python.org/2/library/csv.html</a></span>
<span class="comment-copy">@sancho.s That is certainly true for Python 2, but in Python 3 CSV files <i>must</i> be opened in text mode. This is rather annoying when you want to process CSV files with code that runs on both Python 2 &amp; Python 3.</span>
<span class="comment-copy">@PM2Ring - True. OP does not specify version, then the caveat.</span>
<span class="comment-copy">Did you check the contents of sorted1 and sorted2 to ascertain where is the problem?</span>
<span class="comment-copy">Also, <a href="https://docs.python.org/3/library/csv.html#csv.csvwriter.writerows" rel="nofollow noreferrer"><b><code>writerows</code></b></a> will loop and write all the rows for you.</span>
<span class="comment-copy">so simple! thanks a lot!! :)</span>
<span class="comment-copy">@PeterWood Good point. I should add that info to my answer.</span>
<span class="comment-copy">@Lala No worries. BTW, I've added some more info to my answer.</span>
<span class="comment-copy">That's nice, but the OP hasn't mentioned Pandas, so why are you posting a Pandas answer? Not everyone has Pandas installed, and the standard <code>csv</code> module is quite capable of performing a simple task like this.</span>
