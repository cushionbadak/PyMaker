<div class="post-text" itemprop="text">
<p>By calling <code>sys.exc_info()</code> when an exception is handled a 3-tuple is returned containing the exception class, the exception object and the traceback.</p>
<p>This is also evident by the documentation of <a href="https://docs.python.org/2/library/sys.html#sys.exc_info" rel="nofollow noreferrer"><code>sys.exc_info</code></a>:</p>
<blockquote>
<p>This function returns a tuple of three values that give information about the exception that is currently being handled. ... the values returned are <code>(type, value, traceback)</code>. ... <em>traceback</em> gets a traceback object (see the Reference Manual) which encapsulates the call stack at the point where the exception originally occurred.</p>
</blockquote>
<p>I want to use the <em>type</em> traceback which is used to create the third variable in the aforementioned <code>exc_info</code> return value but can't find where it's defined.</p>
<p>My question is, therefore, where is the <code>traceback</code> type available for python scripts?</p>
<p><strong>EDIT:</strong></p>
<p>I would like to use the <code>traceback</code> type to define a PyQt <em>signal</em>. PyQt Signals are defined by specifying the signal name together with the types of parameters passed. I do <strong>not</strong> need to create an object of that type, only use it in a manner similar to an <code>isinstance</code> call. </p>
</div>
<div class="post-text" itemprop="text">
<p>bad news, even if you can get the class of the traceback object like this:</p>
<pre><code>import sys

try:
    raise Exception
except:
    tb = sys.exc_info()[2]

print(tb.__class__)
</code></pre>
<p>result:</p>
<pre><code>&lt;class 'traceback'&gt;
</code></pre>
<p>when you try:</p>
<pre><code>tb.__class__()
</code></pre>
<p>you get:</p>
<pre><code>TypeError: cannot create 'traceback' instances
</code></pre>
<p>so the traceback type cannot be instanciated externally, probably because you'd need to access python internals to do so (and attributes are read-only even <code>tb_lineno</code> so not possible to "reuse" an instance either)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>traceback.format_exc()</code> or <code>sys.exc_info()</code> like :</p>
<pre><code>try:
    raise TypeError("Error !?!")
except Exception:
    print(traceback.format_exc())
    # or
    print(sys.exc_info()[2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That should be defined in C code:</p>
<p>Include/traceback.h</p>
<pre><code>#ifndef Py_LIMITED_API
typedef struct _traceback {
    PyObject_HEAD
    struct _traceback *tb_next;
    struct _frame *tb_frame;
    int tb_lasti;
    int tb_lineno;
} PyTracebackObject;
#endif
</code></pre>
<p>Hm.. in fact, I am not very sure what you want to do, so cannot help more..</p>
</div>
<span class="comment-copy">This smells like an <i>XY problem</i>. How do you want to use the <i>traceback</i> type?</span>
<span class="comment-copy">@CristiFati Edited with an explanation for why I need the type</span>
<span class="comment-copy">@Axalix This is not a duplicate, as I do not need to create an instance of said type, which is evidently more difficult (see Jean-Francois's answer)</span>
<span class="comment-copy">Maybe - <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow noreferrer">docs.python.org/3/library/traceback.html</a></span>
<span class="comment-copy">using the traceback type &amp; creating a traceback object: what's the difference. Reopening anyway.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/a/27138624/4621324">stackoverflow.com/a/27138624/4621324</a></span>
<span class="comment-copy">This is fine by me, as I do not need to create an instance. See edit to my question.</span>
<span class="comment-copy">I repeat: This isn't a duplicate as I do not wish to create an instance...</span>
<span class="comment-copy">Yes, however this is not what I was asking about. I'm asking about the traceback <i>type</i>, not the traceback <i>module</i>.</span>
<span class="comment-copy">Still not what OP is asking.</span>
<span class="comment-copy">calling <code>sys.exc_info</code> while inside an exception and getting the type of the second tuple object is indeed <i>a</i> way to get the object, however it is very hackish and not pythonic. I rather have a more straightforward way to get the type.</span>
<span class="comment-copy">@NirIzr: yes, i agree with you. That's not a pythonic way at all. but as you can see sys.exc_info()[2] object is an instance of the traceback object</span>
<span class="comment-copy">I do not wish to use C code.</span>
<span class="comment-copy">@NirIzr yes, this is answering your question, the traceback is defined in C code, sys.exc_info method is written in C too, it returned traceback object in C code.</span>
<span class="comment-copy">sorry mate, it does not. I'm not asking about modifying the python interpreter. I wish to use features exposed to the python language.</span>
<span class="comment-copy">@NirIzr hm.. sorry, I just saw your last " where this type is defined?" lol :) , didn't notice your signal requirement. But why do you want to creat Qt signal based on that? Do you want to pass full error stack to Qt? But this is not this question's scope</span>
<span class="comment-copy">No worries, totally get the confusion. edited to make it clearer... I want to send a signal to a PyQt slot that will handle the exception in a different thread.</span>
