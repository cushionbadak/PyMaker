<div class="post-text" itemprop="text">
<p>I'm trying to create an array of bits in python that are two binary numbers into a fixed width.</p>
<p>For eg.</p>
<p><code>[11,90]   ----&gt; 0000101101011010</code></p>
<p>What I've tried/ Problems I've encountered:</p>
<ol>
<li><p><code>bin(11)</code> =&gt; 0b1010 (which is not the fixed width I need)</p></li>
<li><p>String manipulation using format <code>'{0:11b}'.format(8)</code> (this works but I'd like to avoid converting to strings and back if I can. It seems like a lot of overhead to do essentially a shift and add)</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a>:</p>
<pre><code>bin(int.from_bytes(struct.pack('&gt;bb', 11, 90), byteorder='big'))
</code></pre>
<p>If you want the leading 0s:</p>
<pre><code>'{:016b}'.format(int.from_bytes(struct.pack('&gt;bb', 11, 90), byteorder='big'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Guessing what you want to do, since you're not very detailed on your question, you can use <code>bin(x)[2:]</code> removing the first two characters, then zero fill it with <code>str.zfill(length)</code> and then concatenating your two numbers, like so:</p>
<pre><code>print(bin(11)[2:].zfill(8) + bin(90)[2:].zfill(8))
</code></pre>
<p>Will print: <code>0000101101011010</code></p>
</div>
<span class="comment-copy">Python doesn't support bit arrays. Or what do you mean?</span>
<span class="comment-copy">How did you get <code>0b0000101101011010</code> from <code>11</code> and <code>90</code>?</span>
<span class="comment-copy"><code>bin</code> returns a string. I wouldn't worry about the overhead unless you actually see it causing problems, it's unlikely to matter much.  If you are worried, then you should build your own <code>list</code>s of <code>True</code> and <code>False</code>, which are as close as you are likely to get to a bit array.  <code>'{:0&gt;8b}{:0&gt;8b}'.format(x, y)</code> should be sufficient</span>
<span class="comment-copy">@Galen I see it now.  11 in binary is <code>1011</code>, and <code>00001011</code> is the first half of the number, 90 is <code>1011010</code> and <code>01011010</code> is the second half. So it seems as if they want to convert numbers in a list to binary, add 0's to the front until each is 8 bits long, then append them together.</span>
<span class="comment-copy">Try <code>a = 11 &lt;&lt; 8 | 90</code>, then <code>bin(a)</code> produces <code>0b101101011010</code></span>
