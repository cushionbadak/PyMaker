<div class="post-text" itemprop="text">
<p>We have a method in our Python 3.5 application where one of the in-parameters (<code>new_value</code> in the example below) can be of any type, and we're wondering if there is a type hint that we can use for this case?</p>
<p><code>def update(self, col_name: str, new_value) -&gt; None:</code></p>
<p>(We would like the type hint for documentation purposes, to make the code easier to read)</p>
<p>Grateful for help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on what exactly you want to use, there are two different options:</p>
<ol>
<li><p>If you want to basically opt-out of type-checking <code>any_value</code> completely and indicate it could be literally any type with zero restrictions, use <code>typing.Any</code>. Example:</p>
<pre><code>from typing import Any

class MyThing:
    def update(self, col_name: str, new_value: Any) -&gt; None:
        # Note: this typechecks; new_value can be anything, and 
        # that object might have a foo method
        new_value.foo()  
        # ...snip...
</code></pre></li>
<li><p>If you want to indicate that <code>new_value</code> can be of any type, but also want to ensure that the <code>update</code> method only ever uses <code>new_value</code> in a fully typesafe way, I would use <code>object</code>, which is the base type of every type in Python:</p>
<pre><code>class MyThing:
    def update(self, col_name: str, new_value: object) -&gt; None:
        # Note: this does not typecheck since new_value is of
        # type 'object', and 'object' is not guaranteed to have
        # a method named 'foo'
        new_value.foo()  
        # ...snip...
</code></pre></li>
</ol>
<p>I personally bias towards using <code>object</code> -- <code>Any</code> is designed specifically as a "bridge" that lets you mix the typed and untyped worlds within your program. I personally think it's easier to reason about code if you keep those two worlds fairly distinct (e.g. by having a fully typed "core" possibly with a bunch of untyped code wrapping it) instead of a method that's both statically and dynamically typed.</p>
<p>Of course, it's not always possible to do this...</p>
<blockquote>
<p>(We would like the type hint for documentation purposes, to make the code easier to read)</p>
</blockquote>
<p>As an aside/as a suggestion, if you're going to use type hints, I would also strongly recommend going all the way and actually type-check your code using tools like mypy as a part of your development process.</p>
<p>Using type hints for documentation is great, but it can be very confusing if your code doesn't conform to the documentation. Since we have tools to automatically typecheck our code using those type hints, we might as well (and gain that extra guarantee).</p>
<p>(Pragmatically, trying to typecheck your entire codebase all at once can lead to a lot of noise -- what you can try and do instead is <em>progressively</em> typecheck your codebase. For example, you can configure mypy to typecheck only a set list of files (that you maybe grow over time?), make certain checks stricter or looser (perhaps on a per-file basis), and so forth. This works well with the "typed core, untyped wrapper" strategy mentioned above.)</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/typing.html#the-any-type" rel="nofollow noreferrer">Use <code>Any</code> from the <code>typing</code> module</a>.</span>
