<div class="post-text" itemprop="text">
<p>Consider two list comprehensions <code>gamma</code> and <code>delta</code> with nearly redundant code. The difference being the sliced lists <code>alpha</code> and <code>beta</code>, namely </p>
<pre><code>gamma = [alpha[i:i+30] for i in range(0,49980,30)]
delta = [beta[i:i+30] for i in range(0,49980,30)]
</code></pre>
<p>Is there a pythonic way to write this as a one liner (say <code>gamma,delta = ...</code> )? </p>
<p>I have a few other pieces of code that are similar in nature, and I'd like to simplify the code's seeming redundancy. </p>
</div>
<div class="post-text" itemprop="text">
<p>As far as your question related to combining both the <em>list comprehension</em> expression above is concerned, you can get <code>gamma</code> and <code>delta</code> by using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><strong><code>zip</code></strong></a> with single <em>list comprehension</em> as:</p>
<pre><code>gamma, delta = zip(*[(alpha[i:i+30], beta[i:i+30]) for i in range(0,50000,30)])
</code></pre>
<hr/>
<p>Sample example to show how <code>zip</code> works:</p>
<pre><code>&gt;&gt;&gt; zip(*[(i, i+1) for i in range(0, 10, 2)])
[(0, 2, 4, 6, 8), (1, 3, 5, 7, 9)]
</code></pre>
<p>Here our <em>list comprehension</em> will return the list of tuples:</p>
<pre><code>&gt;&gt;&gt; [(i, i+1) for i in range(0, 10, 2)]
[(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]
</code></pre>
<p>Then we are unpacking this list using <code>*</code> and using zip we are aggregating the element from each of the iterables:</p>
<pre><code>&gt;&gt;&gt; zip(*[(i, i+1) for i in range(0, 10, 2)])
[(0, 2, 4, 6, 8), (1, 3, 5, 7, 9)]
</code></pre>
<hr/>
<p>As an alternative, for dividing the list into evenly sized chunks, please take a look at <a href="https://stackoverflow.com/q/312443/2063361"><em>"How do you split a list into evenly sized chunks?"</em></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Although one-line <code>list-comprehensions</code> are really useful, they aren't always the best choice. So here since you're doing the same chunking to both <code>lists</code>, if you wanted to change the chunking, you would have to modify both lines.</p>
<p>Instead, we could use a <code>function</code> that would chunk any given <code>list</code> and then use a one-line assignment to chunk <code>gamma</code> and <code>delta</code>.</p>
<pre><code>def chunk(l):
    return [l[i:i+30] for i in range(0, len(l), 30)]

gamma, delta = chunk(gamma), chunk(delta)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just another way...</p>
<pre><code>gamma, delta = ([src[i:i+30] for i in range(0,49980,30)] for src in (alpha, beta))
</code></pre>
<p>It's a bit faster than the accepted zip solution:</p>
<pre><code>genny 3.439506340350704
zippy 4.3039169818228515
</code></pre>
<p>Code:</p>
<pre><code>from timeit import timeit
alpha = list(range(60000))
beta = list(range(60000))
def genny():
    gamma, delta = ([src[i:i+30] for i in range(0,49980,30)] for src in (alpha, beta))
def zippy():
    gamma, delta = zip(*[(alpha[i:i+30], beta[i:i+30]) for i in range(0,50000,30)])
n = 1000
print('genny', timeit(genny, number=n))
print('zippy', timeit(zippy, number=n))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can you lambda expression:</p>
<pre><code>g = lambda l: [l[i:i+30] for i in range(0,50000, 30)]
gamma, delta = g(alpha), g(beta)
</code></pre>
</div>
<span class="comment-copy">@TimPietzcker Just commented the same thing on coldspeed's answer</span>
<span class="comment-copy">Thanks for the comments! Didn't notice that OP wanted 2D lists.</span>
<span class="comment-copy">Also see <a href="http://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks" title="what is the most pythonic way to iterate over a list in chunks">stackoverflow.com/questions/434287/…</a> and <a href="http://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python" title="how do you split a list into evenly sized chunks in python">stackoverflow.com/questions/312443/…</a></span>
<span class="comment-copy">Double zip? <code>gamma, delta = zip(values[i:i+30] for i in range(0,50000,30) for values in [list(zip(alpha, beta))])</code></span>
<span class="comment-copy">@sunspots: did you consider using <code>numpy</code> with <code>reshape</code>?</span>
<span class="comment-copy">you can do this, if speed and readability is not of concern.</span>
<span class="comment-copy">@Daniel how does this compromise readability? And are you referring to the slicing or the latter zip?</span>
<span class="comment-copy">@Daniel Performance wise usage of <code>zip</code> in above example will performa better as compared to the two <i>list comprehensions</i></span>
<span class="comment-copy">@MoinuddinQuadri Have you tested that? The separate comprehensions are faster on my machine.</span>
<span class="comment-copy">@MoinuddinQuadri: your zip-variant is about 50% slower than two LCs.</span>
<span class="comment-copy">More directly, if you want to reuse them, put them in a function.</span>
<span class="comment-copy">I prefer this: <code>def chunk(l, size):     return [l[i:i+size] for i in range(0, len(l), size)]</code></span>
<span class="comment-copy">@RoadRunner Yeah I was considering whether or not to make it general purpose, could go either way <b>:)</b></span>
<span class="comment-copy">Yeah not that important for this question, I still upvoted regardless.</span>
<span class="comment-copy">This is what Paul Panzer put in the comments and Peter Wood had a similar idea with zip (earlier in the comments).</span>
<span class="comment-copy">@sunspots Ok... good for them?</span>
<span class="comment-copy">I hadn't seen the timing portion before, it's a nice addition.</span>
<span class="comment-copy">If you're naming a lambda, then there's no point to it being a lambda.</span>
<span class="comment-copy">Please do <i>not</i> use <code>lambda</code> for named functions.  <code>lambda</code> is supposed to be for anonymous functions. If you want a named function, use the <code>def</code> syntax. However, I do agree that it's probably a good idea to use a function for this task.</span>
<span class="comment-copy">I agree with the comments and I also think that using a function is a better idea for this. It is difficult sometimes to say which is a more pythonic solution. But this seems to be a legit use case for function.</span>
<span class="comment-copy">I've seen in lots of places that this a legit way to define a one-liner function... why is this wrong?</span>
<span class="comment-copy">All functions have a <code>__name__</code> attribute. This can be handy when debugging, among other situations. (So if you print a function, or convert it to a string, the name attribute is part of that string representation). But a lambda's name is set to <code>'&lt;lambda&gt;'</code>, which isn't very informative. ;)</span>
