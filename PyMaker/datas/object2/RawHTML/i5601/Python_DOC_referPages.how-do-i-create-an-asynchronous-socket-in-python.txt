<div class="post-text" itemprop="text">
<p>I've created a socket object for Telnet communication, and I'm using it to communicate with an API, sending and receiving data. I need to configure it in such a way that I can send and receive data <em>at the same time</em>. By that, I mean data should be sent as soon as the application tries to send it, and data should be processed immediately on receipt. Currently, I have a configuration which allows receipt to be instant, and sending to be second priority with a very short delay.</p>
<p>Currently the best way I have found to do this is by having an event queue, and pushing data to send into it, then having a response queue into which I put messages from the server. I have a thread which polls the buffer every .1 seconds to check for new data, if there isn't any, it then checks the request queue and processes anything there, and that's running in a continuous loop. I then have threads insert data into the request queue, and read data from the response queue. Everything is <em>just about linear enough</em> that this works fine.</p>
<p>This is not "asynchronous", in a sense that I've had to make it <em>as asynchronous as possible</em> without actually achieving it. Is there a proper way to do this? Or is anything under the hood going to be doing exactly the same as I am?</p>
<p>Other things I have investigated as a solution to this problem:</p>
<ul>
<li>A callback system, where I might call <code>socket.on_receipt(handle_message, args)</code> to call the method <code>handle_message</code> with <code>args</code> as a parameter, passing the received data into the method. The only way I could find to achieve this is by implementing what I already have, then registering a callback for it (in fact, this is very close to what I do already have).</li>
</ul>
<p>Please note: I am approaching this as a learning exercise to understand better how asynchronous systems work, not to understand how to use a particular library, so please do not suggest an existing library unless it contains very clear code which is simple to understand and answers the question fully and concisely.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems like a pretty straightforward use case for asyncio. I wouldn't consider using asyncio as "using a particular library" since socket programming paired with asyncio's event loop is pretty low-level and the concept is very transparent if you have experience with other languages and just want to see how async programming works in Python.</p>
<p>You can use this async chat as an example: <a href="https://gist.github.com/gregvish/7665915" rel="nofollow noreferrer">https://gist.github.com/gregvish/7665915</a></p>
<p>Essentially, you create a non-blocking socket, see standard library reference on <code>socket.setblocking(0)</code>:</p>
<p><a href="https://docs.python.org/3/library/socket.html#socket.socket.setblocking" rel="nofollow noreferrer">https://docs.python.org/3/library/socket.html#socket.socket.setblocking</a></p>
<p>I'd also suggest this amazing session by David Beazley as a must-see for async Python programming. He explains the concurrency concepts in Python using sockets, exactly what you need: <a href="https://www.youtube.com/watch?v=MCs5OvhV9S4" rel="nofollow noreferrer">https://www.youtube.com/watch?v=MCs5OvhV9S4</a></p>
</div>
