<div class="post-text" itemprop="text">
<p>I read elements from a txt file and I want to write elements to the array, I know I must use substring method but I don't know how to generate an array while I am using substring method.</p>
<p>example.txt file includes</p>
<pre><code>001, A, 50, 70, 65
002, B, 25, 55, 80
003, C, 60, 40, 85
004, D, 75, 55, 70
005, E, 40, 40, 45
006, F, 35, 25, 85
</code></pre>
<p>My python code:</p>
<pre><code>file = open("example.txt", "r")
a = file.read()
print(a)
</code></pre>
<p>I need to generate 30 elements multi dimensional(5x6) array, I can read elements of this file using this code but I wonder that how to write them to the array.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get multidimensional array you need to read file line by line, and split every line by commas, like in my <a href="https://stackoverflow.com/a/47992052/2622523">previous answer</a></p>
<pre><code># Prepare result array:
array = []
# Open file
with open("example.txt", "r") as f:
    # read the contents of file line by line:
    for line in f:
        # split current line by comma to get array of items from it
        array_parts = line.split(",")
        # filter elements, removing empty, and stripping spaces:
        array_parts = [item.strip() for item in array_parts if item.strip() != ""]
        # add line's items into result array:
        array.append(array_parts)        
# Printing result:
print(array)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do like this, Using <code>split</code></p>
<pre><code>In [14]: print map(str.strip,sum([i.split(',') for i in open("example.txt").split('\n')],[]))
['001', 'A', '50', '70', '65', '002', 'B', '25', '55', '80', '003', 'C', '60', '40', '85', '004', 'D', '75', '55', '70', '005', 'E', '40', '40', '45', '006', 'F', '35', '25', '85']
</code></pre>
<p>flattening list with different method, </p>
<pre><code>result = map(str.strip,[item for sublist in [i.split(',') for i in txt.split('\n')] for item in sublist])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All you need is <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a> along with <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip()</code></a> as:</p>
<pre><code>with open("example.txt") as f:
    my_list = [w.strip() for l in f for w in l.split(',')]
#                ^ to remove extra white-spaces 
</code></pre>
<p>which will return you <code>my_list</code> list as:</p>
<pre><code>&gt;&gt;&gt; my_list
['001', 'A', '50', '70', '65', '002', 'B', '25', '55', '80', '003', 'C', '60', '40', '85', '004', 'D', '75', '55', '70', '005', 'E', '40', '40', '45', '006', 'F', '35', '25', '85']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lots of decent comprehension based solutions around. Here is one to use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>from itertools import chain
with open("example.txt", "r") as f:
    array = list(chain(*(map(str.strip, line.split()) for line in f)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to read the data as a string, and when split it by a comma and newline character:</p>
<pre><code># Open file
with open("example.txt", "r") as f:
    # read the contents and replace "\n" characters by commas
    thedata = f.read().replace("\n", ",")
    # split it by "," creating an array
    array = thedata.split(",")
    # if it's needed, remove empty elements and trim spaces:
    array = [item.strip() for item in array if item.strip() != ""]
# Printing result:
print(array)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want to keep the formatting of the CSV file and have a two dimensional array then maybe setting up the 2d array first then iterating through the file and adding in the values might be the way to go.</p>
<pre><code>array = []

for row in range(0,6):
    array.append([])
    for col in range(0,5):
        array[row].append(" ")

print(array)
</code></pre>
<p>Then to add your vales in instead of the spaces, import the file, iterate through each row and for each value add it to the corresponding space in your 2d array</p>
</div>
<span class="comment-copy">Look at <a href="https://docs.python.org/2/library/string.html#string.split" rel="nofollow noreferrer"><code>str.split</code></a> and <a href="https://docs.python.org/2/library/string.html#string.strip" rel="nofollow noreferrer"><code>str.strip</code></a></span>
<span class="comment-copy">I receive an error</span>
<span class="comment-copy">Fixed it. It was supposed, that solving this error would be your homework :)</span>
<span class="comment-copy">thanks a lot, I learned that what I should do.</span>
<span class="comment-copy">Why do you have two answers?</span>
<span class="comment-copy">@RoadRunner my first answer was written with the assumption that hbakan wanted to read all data into a single list. This one is about loading data into a list of lists.</span>
<span class="comment-copy">boy, do I love those python one-liners :)</span>
<span class="comment-copy">Note, however, that the sum approach to list flattening has quadratic time complexity. You are also not stripping the spaces.</span>
<span class="comment-copy">@schwobaseggl Thanks for the point,</span>
<span class="comment-copy">And why downvote ?</span>
<span class="comment-copy">@schwobaseggl Added striping also.</span>
<span class="comment-copy">This is the cleanest and most Pythonic approach!</span>
<span class="comment-copy">You should account for the lines as well.</span>
<span class="comment-copy">It looks like so, but author of the question said: "I need to generate 30 elements array", and I've answered to that need :)</span>
<span class="comment-copy">I don't think you get a full 30 if you split only on commas ;)</span>
<span class="comment-copy">Oh, you're right :)</span>
<span class="comment-copy">Thank you very much, I also want to write these elements as a multidimensional array, how should I split them?</span>
