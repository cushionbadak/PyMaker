<div class="post-text" itemprop="text">
<p>I found a weird result of this below code on my project (below code is equivalent to the code in my project since I have to remove parts that are irrelevant to the question):</p>
<pre><code>import random
random.seed(9000)

...
list1 = [0, 1]
list2 = []
set_diff = set(list1) - set(list2)
print( set_diff )
list_diff = list( set_diff )
print( list_diff )
print( random.choice( list_diff ) )
</code></pre>
<p>The result is unstable since the order (as printed) of set_diff is unstable (set is supposed to have no order). Result could be:</p>
<pre><code>{'0', '1'}
['0', '1']
1
</code></pre>
<p>or</p>
<pre><code>{'1', '0'}
['1', '0']
0
</code></pre>
<p>in different runs.
Could anyone please explain why? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>A set is unordered and so will yield its elements in any order. However, this order is consistent within one python invocation. That is, <code>set_ = set(range(N)); list(set_) == list(set_)</code> is always true within in the same python program. Python 3.2+ explicitly makes sure that the ordering will inconsistent from one python instance to the next (this is a security consideration relating to denial of service attacks involving dictionary construction). This is the behaviour you are seeing.</p>
<p>To avoid this you need to set the environment variable <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow noreferrer"><code>PYTHONHASHSEED</code></a> to the same value before you start your program. This is in addition to setting the random seed before using <code>random.choice</code>.</p>
<pre><code>export PYTHONHASHSEED=1
python myscript.py
</code></pre>
<p>A simpler solution, however, is to create a sorted list before doing <code>random.choice</code>. ie. </p>
<pre><code>random.choice(sorted({1, 2, 3}))
</code></pre>
</div>
<span class="comment-copy">The order of a set is non-deterministic, and cannot be fixed with a random seed...</span>
<span class="comment-copy">ah, then list(set) will give stochastic output. Thanks a lot!</span>
<span class="comment-copy">hashes and set's don't have an order.</span>
<span class="comment-copy">Then what affects the result of print( set ) and list( set )? Why they're different between runs?</span>
