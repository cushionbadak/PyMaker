<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1801391/what-is-the-best-algorithm-for-checking-if-a-number-is-prime">What is the best algorithm for checking if a number is prime?</a>
<span class="question-originals-answer-count">
                    27 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/38567337/debugging-a-python-prime-number-program">Debugging a Python Prime Number Program</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<pre><code>import math
while True:
 n=(raw_input("Please enter a number to check if it is prime or not " ))
 if n == "gate":
    exit()
 n=int(n)
 x=int( math.sqrt(n))
 if n%2==0:
    print n , "is an even number"
 else:
    for i in range(3,x+1,2):
        if n%i==0 :
           print " Composite",n, "div by" ,i ,"."
        else:
           print "PRIME"
</code></pre>
<p>This code runs fine if I enter an even but acts abnormal when I input an odd or prime integer. It identifies composite accurately. Irrespective of prime or composite odd it prints  PRIME many times.(sometimes twice or thrice).
The output is like:</p>
<pre class="lang-none prettyprint-override"><code>Please enter a number to check if it is prime or not  53
PRIME
PRIME
PRIME
Please enter a number to check if it is prime or not  36
36 is an even number
Please enter a number to check if it is prime or not  21
Composite 21 div by 3 .
Please enter a number to check if it is prime or not  23
PRIME
Please enter a number to check if it is prime or not  37
PRIME
PRIME
Please enter a number to check if it is prime or not  
</code></pre>
<p>I think I have done some indentation error or implemented while loop incorrectly.
please help.</p>
<p>This question is not just about an algorithm for primality test but this addresses an implementation problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>You print "PRIME" as soon as the current i does not n, but you should only output "PRIME" if <em>no</em> i divides n. You can do it like this:</p>
<pre><code>import math
while True:
 n=(raw_input("Please enter a number to check if it is prime or not " ))
 if n == "gate":
    exit()
 n=int(n)
 x=int( math.sqrt(n))
 if n%2==0:
    print n , "is an even number"
 else:
    prime = True
    for i in range(3,x+1,2):
        if n%i==0 :
           print " Composite",n, "div by" ,i ,"."
           prime = False
    if prime:
        print "PRIME"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to exit the loop when a factor is found, and print that the number is prime only after all factors have been tested. So your loop should look more like this:</p>
<pre><code>for i in range(3, x + 1, 2):
    if not n % i:
       print " Composite", n, "div by" , i ,"."
       break      # exit loop explicitly
else:             # execute only if we didn't break out of loop
   print "PRIME"
</code></pre>
<p>Note that the <code>else</code> lines up with the <code>for</code>, not with the <code>if</code>.</p>
</div>
<span class="comment-copy">see <a href="https://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops">else on for loop</a></span>
<span class="comment-copy">Thank you very much. It solved my problem.</span>
<span class="comment-copy">Thank you for help.Your code does  the task perfectly. But can you explain what is the if for that else. It seems to be an else without if under previous else.</span>
<span class="comment-copy">As noted in the comment, the <code>else</code> is executed only if we didn't break out of the <code>for</code> loop. The <code>else</code> goes with the <code>for</code> not the <code>if</code>. <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">Documentation on use of <code>else</code> with loops</a>.. Using <code>for</code>/<code>else</code> avoids the need to use a flag as some other solutions do.</span>
