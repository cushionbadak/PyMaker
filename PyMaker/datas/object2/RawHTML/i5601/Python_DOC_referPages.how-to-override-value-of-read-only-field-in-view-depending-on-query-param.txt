<div class="post-text" itemprop="text">
<p>I have this model that has a read-only field where I calculate some property.</p>
<pre><code>class BlastEvent(Event):
    tonnes = models.FloatField()
    blast_type = models.ForeignKey(BlastType)

    @property
    def size(self):
        return self.tonnes / BlastEvent.objects.all().aggregate(Max('tonnes'))['tonnes__max']
</code></pre>
<p>This is my serializer:</p>
<pre><code>class BlastEventSerializer(serializers.HyperlinkedModelSerializer):

    size = serializers.ReadOnlyField()

    included_serializers = {'blast_type': BlastTypeSerializer}

    blast_type = ResourceRelatedField(
        queryset=BlastType.objects,
        related_link_view_name='blastevent-blasttype-list',
        related_link_url_kwarg='pk',
        self_link_view_name='blastevent-relationships'
    )

    class Meta:
        model = BlastEvent
        fields = ('url', 'id', 'tonnes', 'blast_type', 'size')

    class JSONAPIMeta:
        included_resources = ['blast_type']
</code></pre>
<p>And this is my view:</p>
<pre><code>class BlastEventViewSet(EventViewSet):
    queryset = BlastEvent.objects.all()
    serializer_class = BlastEventSerializer
</code></pre>
<p>Now I need to re-calculate and override this read-only field depending on query parameter. I'm not sure where is the proper place to do it. I tried to do it in get_queryset() method of my view like this:</p>
<pre><code>class BlastEventViewSet(EventViewSet):
    queryset = BlastEvent.objects.all()
    serializer_class = BlastEventSerializer

    def get_queryset(self):
        queryset = self.queryset
        instrument_id = self.request.GET.get('instrument_id')
        if instrument_id:
            for e in queryset:
                e.size = e.size + Instrument.objects.get(pk=instrument_id).distance
        return queryset
</code></pre>
<p>but it doesn't work. It says 'AttributeError: can't set attribute':</p>
<pre><code>Traceback:  

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/django/core/handlers/exception.py" in inner
  41.             response = get_response(request)

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  187.                 response = self.process_exception_by_middleware(e, request)

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/django/views/decorators/csrf.py" in wrapped_view
  58.         return view_func(*args, **kwargs)

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/rest_framework/viewsets.py" in view
  86.             return self.dispatch(request, *args, **kwargs)

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  489.             response = self.handle_exception(exc)

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/rest_framework/views.py" in handle_exception
  449.             self.raise_uncaught_exception(exc)

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  486.             response = handler(request, *args, **kwargs)

File "/home/nargiza/virtualenvs/myenv/local/lib/python2.7/site-packages/rest_framework/mixins.py" in list
  40.         queryset = self.filter_queryset(self.get_queryset())

File "/home/nargiza/Development/geotechnical-data-platform-api/events/views.py" in get_queryset
  205.             e.size = ...
</code></pre>
<p>Where I can override this field's value depending on query parameter?</p>
</div>
<div class="post-text" itemprop="text">
<p>Properties require setters for assignment. Try adding a setter to <code>BlastEvent</code> like this:</p>
<p><a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#property</a></p>
<pre><code>class BlastEvent(Event):
    tonnes = models.FloatField()
    blast_type = models.ForeignKey(BlastType)

    def _get_size(self):
        return self.tonnes / BlastEvent.objects.all().aggregate(Max('tonnes'))['tonnes__max']

    @property
    def size(self):
        if callable(self._get_size):
            return self._get_size()
        else:
            return self._get_size

    @size.setter
    def size(self, value):
        self._get_size = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solution I came up with is to override to_representation() method of serializer:</p>
<pre><code>def to_representation(self, instance):
    ret = super(BlastEventSerializer, self).to_representation(instance)

    instrument_id = self.context['request'].query_params.get('instrument_id')
    if instrument_id:
        ret['size'] = 77  # some custom calculations
    return ret
</code></pre>
</div>
<span class="comment-copy">I need to be able to modify this field from view because I need to modify it depending on query parameter.</span>
<span class="comment-copy">Correct - I believe using a setter method will enable you to modify the size attribute of an instantiated BlastEvent. Does this solution not work? Why?</span>
