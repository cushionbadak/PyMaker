<div class="post-text" itemprop="text">
<p>I've started a project using Object Oriented Programming but I have some trouble understanding some basic rules about paths.</p>
<p>Here's the arborescence of my project:</p>
<pre><code>Project/
    main.py
    classes/
        Database.py
    database/
        Project.db
</code></pre>
<p><strong>main.py</strong></p>
<pre><code>import sys
sys.path.insert(0, 'classes/')
from Database import Database
</code></pre>
<p><strong>Database.py</strong></p>
<pre><code>import sys
sys.path.insert(0, '../database/')
import sqlite3

# in my Database class
def connect(self):
    self.conn = sqlite3.connect('database/{}.db'.format(self.name))
    self.c = self.conn.cursor()
</code></pre>
<p><strong>Instantiation in main.py VS in Database.py</strong></p>
<pre><code>ProjectDatabase = Database('Project')
ProjectDatabase.connect()
</code></pre>
<p>If I make the instantiation in the main.py file and run it then I don't need to change anything in the Database.py file.</p>
<p>But, if I make the instantiation in the Database.py file and run it then I need to change the connect method to this :</p>
<pre><code>def connect(self):
    self.conn = sqlite3.connect('../database/{}.db'.format(self.name))
    self.c = self.conn.cursor()
</code></pre>
<p>I don't understand why I need to do that and why I don't have to change the sys.path.insert() command in Database.py if I make the instantiation in the main.py file... Why shouldn't it be just sys.path.insert('database/') instead ?</p>
<p>I hope I'm being clear here, I just don't get how we should write paths inside our scripts depending on what script we intend to run and depending on if there are embedded scripts into others such as classes call into a main program.</p>
<p>Thanks for your explanations!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're initializing in main.py, then the directory of your main.py file become's the root for the program instance. Hence all the reference for the files will be initiated from the directory where the main.py file exists.</p>
<p>If you initialize from database.py than your database folder directory becomes root directory for your program instance and you need to reference all other files according to database folder directory.</p>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">I'd recommend reading <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#packages</a></span>
<span class="comment-copy">You mean that if I run my script main.py then all paths to other files (and in other files), must be specified from the folder that contains my main.py script, meaning specified from the Project/ folder. But if I run the Database.py script then it's my classes/ folder that becomes the root for my program, so everything should be specified from there. Right ? That doesn't explain why when I run main.py I can leave sys.path.insert('../database/') at the beginning of Database.py, it should be sys.path.insert('database/') theoretically. No ?</span>
<span class="comment-copy">whenever you use sys.path in the file it uses your system filepath reference, so whenever database.py is initiated from any other file, sys.path refers to database.py folder for all its instances. Hence you need to specify ../database to go to go back to database folder from classes folder and. I would suggest you to use import to get the required module from database.py eg: " import classes.database"</span>
<span class="comment-copy">I really don't get it. Do you have any online resources talking about this, I've searched but the more I read the less I understand.</span>
<span class="comment-copy">When I use the sys.path.insert() function I just think "I'm adding to the PYTHONPATH variable of that file/script this folder, so that it can check for resources/files/modules/classes in it". And that's it. But then it doesn't explain why in Database.py I can do both sys.path.insert('../database') and later on in the connect() function call for 'database/{}.db' instead of '../database/{}.db'. Is it just because when I did sys.path.insert(0, '../database/') I added the database/ folder and I don't need to do ../database/ anymore later in the Database.py file ?</span>
