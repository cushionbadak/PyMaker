<div class="post-text" itemprop="text">
<p>I got this wonderful image below from the <a href="https://en.wikipedia.org/wiki/Dodecahedron" rel="nofollow noreferrer">Wikipedia page on Dodecahedrons</a>. It shows a Tetroid rotating slowly. If you look carefully, it is clear that the assumption is that there is a light source somewhere outside the screen. If a face reflects  more light back to the observer, it appears brighter and if it reflects less light back, it appears darker. I have an idea about how I might get a metric for the amount of light a face is reflecting back at a certain rotation. I can also scale the metric to a value between 0 and 255 (which most color scales assume). However, how do I get the actual rgb values that look like a bright, reflective blue when the metric is high and the darkish blue when the metric is low?</p>
<p><a href="https://i.stack.imgur.com/1Tmbs.gif" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/1Tmbs.gif"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest that you use the standard <a href="https://docs.python.org/3/library/colorsys.html" rel="nofollow noreferrer"><code>colorsys</code></a> module for this task, and work in the HSV or HLS color coordinate systems. Typically, you'd determine the hue and saturation of your base color, and then vary the value or lightness to create the range of shades that you want.</p>
<p>Here's a short example that uses Numpy to create a HLS grid from a given hue.</p>
<pre><code>from colorsys import hls_to_rgb
import numpy as np
from PIL import Image

def ls_grid(hue, numcolors, scale):
    a = np.linspace(0, 1, num=numcolors, endpoint=True)
    grid = np.array([[hls_to_rgb(hue, lite, sat) for sat in a] for lite in a])
    grid = (0.5 + 255 * grid).astype(np.uint8)
    return grid.repeat(scale, axis=1).repeat(scale, axis=0)

hue = 0.585
numcolors, scale = 32, 16
grid = ls_grid(hue, numcolors, scale)
img = Image.fromarray(grid)
img.show()
img.save('litesat.png')
</code></pre>
<p><a href="https://i.stack.imgur.com/ZAc1r.png" rel="nofollow noreferrer"><img alt="lightness-saturation grid" src="https://i.stack.imgur.com/ZAc1r.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Start with high RGB values and reduce R and G progressively to get darker hues of blue. Following figure is based on these RGB values (R and G being reduced in steps of 20):</p>
<pre><code>230 230 250
210 210 250
190 190 250
170 170 250
150 150 250
</code></pre>
<p><a href="https://i.stack.imgur.com/sEIkd.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/sEIkd.png"/></a></p>
</div>
<span class="comment-copy">To learn how to do the brightness calculations, take a look at <a href="https://en.wikipedia.org/wiki/Specular_highlight" rel="nofollow noreferrer">Specular highlight</a>. To get the actual RGB value, you can use the HSV or HLS color parametrization and convert to RGB using the functions in the standard <a href="https://docs.python.org/3/library/colorsys.html" rel="nofollow noreferrer"><code>colorsys</code></a> module.</span>
<span class="comment-copy">I assume you want to do 3D rendering from scratch. However, it's a lot easier to use an existing 3D engine. I suggest that you take a look at <a href="http://www.povray.org/" rel="nofollow noreferrer">POV-Ray</a>.</span>
<span class="comment-copy">@PM2Ring the HSL solution is exactly what I needed. You should add that as an answer.</span>
<span class="comment-copy">FWIW, there's a good chance that the anim in your question was created using POV-Ray. My avatar image was created using it, here's a <a href="http://i2.photobucket.com/albums/y43/PM2Ring/RhombicKC4S.jpg" rel="nofollow noreferrer">larger version</a>, and here's a <a href="http://i2.photobucket.com/albums/y43/PM2Ring/DiamondSCanim.gif" rel="nofollow noreferrer">diamond</a> I did several years ago.</span>
<span class="comment-copy">Fair enough! There's a bit of a learning curve to POV-Ray, it's not something that you can pick up in a couple of days. But the time you invest in it is worthwhile, IMHO, because it's so stable. I can still run POV scripts that I created over 20 years ago.</span>
<span class="comment-copy">Immensely helpful!</span>
