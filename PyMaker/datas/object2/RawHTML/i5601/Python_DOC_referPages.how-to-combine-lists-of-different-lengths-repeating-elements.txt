<div class="post-text" itemprop="text">
<p>so I have say two lists:</p>
<pre><code>list1 = [1,2,3]
</code></pre>
<p>and</p>
<pre><code>list2 = [4]
</code></pre>
<p>and I need to combine them to produce the following output:</p>
<pre><code>list3=[[1,4],[2,4],[3,4]]
</code></pre>
<p><code>itertools</code> doesn't seem to have a method to accomplish this, the <code>zip</code> function ends when the second list does...</p>
<p>I'm sure there's a one liner out there, but I'm finding too much stuff about similar but not the same problems on here and google.</p>
<p>Thanks for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over the list and concatenate the <code>list2</code> value and the element for the current iteration:</p>
<pre><code>list1 = [1,2,3]
list2 = [4]
new_list = [[a]+list2 for a in list1]
</code></pre>
<p>Output:</p>
<pre><code>[[1, 4], [2, 4], [3, 4]]
</code></pre>
<p>Or, an alternative, although lower solution using <code>map</code>:</p>
<pre><code>final_list = map(lambda x:[x, list2[0]], list1)
</code></pre>
<p>Output:</p>
<pre><code>[[1, 4], [2, 4], [3, 4]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2.7/library/itertools.html#itertools.izip_longest" rel="noreferrer">itertools izip_longest (py2)</a>  or <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="noreferrer">itertools zip longest (py3)</a> too: </p>
<pre><code>import itertools

list(map(list,itertools.izip_longest([], list1, fillvalue=list2[0])))
</code></pre>
<p>Returns:</p>
<pre><code>[[4, 1], [4, 2], [4, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you need a third alternative?</p>
<pre><code>&gt;&gt;&gt; list(map(list,zip(list2 * len(list1), list1)))
[[4, 1], [4, 2], [4, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also try using <a href="https://docs.python.org/2.7/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle()</code></a>:   </p>
<pre><code>&gt;&gt;&gt; import itertools    
&gt;&gt;&gt; list1 = [1,2,3]
&gt;&gt;&gt; list2 = [4]
&gt;&gt;&gt; print([list(x) for x in zip(list1, itertools.cycle(list2))])
[[1, 4], [2, 4], [3, 4]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you looking for something like this?</p>
<p>Without any external module or heavy code:</p>
<pre><code>print(list(map(lambda x:[x,list2[0]],list1)))
</code></pre>
<p>when data is :</p>
<pre><code>list1 = [1,2,3]
list2 = [4]
</code></pre>
<p>output:</p>
<pre><code>[[1, 4], [2, 4], [3, 4]]
</code></pre>
<p>As someone pointed out this is already given answer ,Here is another solution:</p>
<pre><code>list1 = [1,2,3]
list2 = [4]

print(list(zip(list1,list2*len(list1))))
</code></pre>
<p>output:</p>
<pre><code>[(1, 4), (2, 4), (3, 4)]
</code></pre>
</div>
<span class="comment-copy">zip ends when the second list does... +1 for zip_longest</span>
<span class="comment-copy">I ran some timings and your first solution is the quickest (maybe not so surprising).</span>
<span class="comment-copy">@AntonvBR List comprehensions are faster than <code>map</code> on shorter examples, however, <code>map</code> is almost always slower when using a lambda function (as in this case). I will edit the post the mention this.</span>
<span class="comment-copy">I am wishing you a Merry Christmas! Thank you for all comments and support. Good luck and nice day! Small gift, 3plus ;)</span>
<span class="comment-copy">@jezrael Hahahahaha. How nice of you. You made me smile and think about how nice it can be to help people here on SO while also learning. Merry Xmas and Happy new year. (And Btw you have reached far more people with your ultra quick responses. Iâ€™ll find some posts to upvote as well!!!</span>
<span class="comment-copy">Took the liberty to edit the answer to list of lists.</span>
<span class="comment-copy">@AntonvBR: Thanks! Missed that entirely.</span>
<span class="comment-copy">This is an alternative in the accepted answer already.</span>
<span class="comment-copy">@AntonvBR thanks for putting effort in downvote , well i didn't saw that.</span>
<span class="comment-copy">No worries. Happens sometimes. But if you have an identical answer you might as well remove it.</span>
