<div class="post-text" itemprop="text">
<p>A friend sent me a Jupyter notebook with the below code:</p>
<pre><code>for stock_df, allo in zip((aapl, cisco, ibm, amzn), [.3,.2,.4,.1]):
    stock_df['Allocation'] = stock_df['NormedReturn']*allo
</code></pre>
<p>I understand the output as it creates a new column 'Allocation' in each dataframe 'aapl', 'cisco'... and applies weights to the Normed Returns. However, I do not understand the syntax enough that I could do it again by myself.</p>
<p>How does this for loop on 2 elements and the zip work please? (I thought that the elements had to be of similar length when zipping otherwise the output data would be truncated).</p>
</div>
<div class="post-text" itemprop="text">
<p>The key bit of Python syntax here is the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><strong><code>zip()</code></strong></a> function.</p>
<p>From the documentation, we can see that this:</p>
<blockquote>
<p>Returns an iterator of <code>tuples</code>, where the <code>i-th</code> tuple contains the <code>i-th</code> element from each of the argument sequences or <code>iterables</code>. </p>
</blockquote>
<p>So it is passed iterables and  'zips' them together. This may be easier to see with an example:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = [9, 8, 7, 6]
&gt;&gt;&gt; list(zip(a, b))
[(1, 9), (2, 8), (3, 7), (4, 6)]
</code></pre>
<hr/>
<p>So, in your code, this is being used alongside a method called 'tuple unpacking' which is just doing something like:</p>
<pre><code>&gt;&gt;&gt; i, j = 5, 6
&gt;&gt;&gt; i
5
&gt;&gt;&gt; j
6
</code></pre>
<p>This allows for clean code that will iterate over the tuples that are returned from the <code>zip()</code>. If you are still unsure on what the loop is doing, we could modify it to <code>print</code> the variables (for simplicity I also converted the variables passed into <code>zip</code> to strings):</p>
<pre><code>for stock_df, allo in zip(('aapl', 'cisco', 'ibm', 'amzn'), [.3,.2,.4,.1]):
    print(stock_df, allo)
</code></pre>
<p>which you can see from the output gives what we expected:</p>
<pre><code>aapl 0.3
cisco 0.2
ibm 0.4
amzn 0.1
</code></pre>
<p>I hope that clears up the code for you, it seems from how you asked the question that you already know how these variables are actually being dealt with in the loop so I won't go into that.</p>
</div>
<div class="post-text" itemprop="text">
<p>This looks like a portfolio diversification kind of code. The aapl, cisco, ibm and amzn are DataFrames containing at least a NormedReturn field.</p>
<pre><code>aapl = pd.DataFrame({'NormedReturn':[1,2,3]})
cisco = pd.DataFrame({'NormedReturn':[4,5,6]})
ibm = pd.DataFrame({'NormedReturn':[7,8,9]})
amzn = pd.DataFrame({'NormedReturn':[10,11,12]})
</code></pre>
<p>The DataFrames might as well be containing single values, like 'NormedReturn':[13], no problem.</p>
<p>Zip function zips together iterables. It is assigning the given allocation weights to these returns; .3 weigth to the aapl stock, .2 weight to the cisco stock, etc:</p>
<pre><code>for stock_df, allo in zip((aapl, cisco, ibm, amzn), [.3,.2,.4,.1]):
    print stock_df, allo
</code></pre>
<p>Gives us the stock returns and the respective allocation weight:</p>
<pre><code>   NormedReturn
0             1
1             2
2             3 0.3
   NormedReturn
0             4
1             5
2             6 0.2
   NormedReturn
0             7
1             8
2             9 0.4
   NormedReturn
0            10
1            11
2            12 0.1
</code></pre>
<p>Finally the assignment multiplies return series by the allocation weights:</p>
<pre><code>for stock_df, allo in zip((aapl, cisco, ibm, amzn), [.3,.2,.4,.1]):
    stock_df['Allocation'] = stock_df['NormedReturn']*allo
    print stock_df
</code></pre>
<p>Gives your allocation, i.e. return*weight series:</p>
<pre><code>   NormedReturn  Allocation
0             1         0.3
1             2         0.6
2             3         0.9
   NormedReturn  Allocation
0             4         0.8
1             5         1.0
2             6         1.2
   NormedReturn  Allocation
0             7         2.8
1             8         3.2
2             9         3.6
   NormedReturn  Allocation
0            10         1.0
1            11         1.1
2            12         1.2
</code></pre>
<p>I think after this your friend must be putting all of the NormedReturns and Allocations together, which is like your final portfolio return.</p>
</div>
<span class="comment-copy">look at python document: <a href="https://docs.python.org/3.6/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/3.6/library/functions.html#zip</a></span>
<span class="comment-copy">There is a nice explanation on <code>zip</code> <a href="https://stackoverflow.com/questions/1663807/how-to-iterate-through-two-lists-in-parallel">here</a>.</span>
<span class="comment-copy">The objects you are zipping will truncate, but they are of the same length: <code>(aapl, cisco, ibm, amzn)</code> has length 3, so does <code>[.3,.2,.4,.1]</code>.</span>
<span class="comment-copy">@juanpa.arrivillaga length <code>4</code></span>
<span class="comment-copy">@JoeIddon whoops. Yes, typo.</span>
<span class="comment-copy">Thanks Joe! Clearer now :)</span>
<span class="comment-copy">@choubix please accept (grey --&gt; green arrow next to answer) thank you :)</span>
<span class="comment-copy">Thank you Fatih, really thorough and useful answer!!! :)</span>
<span class="comment-copy">You are very welcome, @choubix! Please feel free to mark mine or Joe's answer as the accepted answer. Merry Christmas!</span>
