<div class="post-text" itemprop="text">
<p>I do not seem to understand how to import modules into an apache airflow DAG definition file. I would want to do this to be able to create a library which makes declaring tasks with similar settings less verbose, for instance.</p>
<p>Here is the simplest example I can think of that replicates the issue: I modified the airflow tutorial (<a href="https://airflow.apache.org/tutorial.html#recap" rel="noreferrer">https://airflow.apache.org/tutorial.html#recap</a>) to simply import a module and run a definition from that module. Like so:</p>
<p>Directory structure:</p>
<pre><code>- dags/
-- __init__.py
-- lib.py
-- tutorial.py
</code></pre>
<p>tutorial.py:</p>
<pre><code>"""
Code that goes along with the Airflow located at:
http://airflow.readthedocs.org/en/latest/tutorial.html
"""
from airflow import DAG
from airflow.operators.bash_operator import BashOperator
from datetime import datetime, timedelta

# Here is my added import
from lib import print_double

# And my usage of the imported def
print_double(2)

## -- snip, because this is just the tutorial code, 
## i.e., some standard DAG defintion stuff --
</code></pre>
<p><code>print_double</code> is just a simple def which multiplies whatever input you give it by 2, and prints the result, but obviously that doesn't even matter because this is an import issue.</p>
<p>I am able to run <code>airflow test tutorial print_date 2015-06-01</code> as per the tutorial docs successfully - the dag runs, and moreover the print_double succeeds. <code>4</code> is printed to the console, as expected. All appears well.</p>
<p>Then I go the web UI, and am greeted by <code>Broken DAG: [/home/airflow/airflow/dags/tutorial.py] No module named 'lib'</code>. Unpausing the dag and attempting a manual run using the UI causes a "running" status, but it never succeeds or fails. It just sits on "running" forever. I can queue up as many as I'd like, but they'll all just sit on "running" status.</p>
<p>I've checked the airflow logs, and don't see any useful debug information there.</p>
<p>So what am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you using Airflow 1.9.0? This might be fixed there.</p>
<p>The issue is caused by the way Airflow loads DAGs: it doesn't just import them as normal python modules, because it want's to be able to reload it without restarting processes. As a result <code>.</code> isn't in the python search path.</p>
<p>If 1.9.0 doesn't fix this, the easiest change is to put <code>export PYTHONPATH=/home/airflow/airflow/:$PYTHONPATH</code> in the startup scripts. The exact format of that will depend on what you are using (systemd vs init scripts etc.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding the sys path again worked for me,</p>
<pre><code>import sys
sys.path.insert(0,os.path.abspath(os.path.join(os.path.dirname(__file__))))
</code></pre>
</div>
<span class="comment-copy">tested this in my local and it worked; are you sure you got the files in the proper directory? could you be editing a tutorial.py file that it's not really in the dag folder? the path looks dodgy with the two "airflow"'s there: <code>/home/airflow/airflow/dags/tutorial.py</code></span>
<span class="comment-copy">I've context switched off of this problem, but I'll try a totally fresh airflow install in a vm and try to replicate again when I get a chance. However I can confirm that <code>airflow</code> is the username and <code>airflow/airflow</code> is the install dir, so at least that part is not the issue. I also can confirm just by <code>cd</code>ing into the dir that the directory structure is as posted in the question. But I'll do my due diligence and replicate the whole thing in an isolated environment since you are saying it works for you.</span>
<span class="comment-copy">Context switched out of this for the moment - will investigate this answer as soon as I can!</span>
<span class="comment-copy">I'm having the same problem any fixes yet?</span>
<span class="comment-copy">I handed off the airflow task to a coworker, so I won't get around to checking this answer yet. But this answer seems reasonable - have you tried it @moku ?</span>
<span class="comment-copy">"it want's to be able to reload it without restarting processes" Couldn't Airflow use importlib.reload <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer">docs.python.org/3/library/importlib.html#importlib.reload</a> if this were the only reason?</span>
<span class="comment-copy">It could, but that wouldn't help with deps/imported libs. There are other reasons too (like sys.exit, or worse case a segfault in one dag shouldn't bring down the scheduler, and it uses multiple parallel processes to improve performance)</span>
