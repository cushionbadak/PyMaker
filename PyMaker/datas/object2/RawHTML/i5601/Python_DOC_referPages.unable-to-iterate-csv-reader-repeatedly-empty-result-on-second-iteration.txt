<div class="post-text" itemprop="text">
<p>I have created <code>list1</code> to include the unique values from a particular column by appending values identified as unique to it in order to perform a sort of "sum if". </p>
<p>Below is the scenario I am struggling with, the inner loop, iterating through the csv rows is only executing once. Is there some special characteristic that makes iterating through rows in a csv file in the inner loop of a nested loop problematic? </p>
<p>csv contents:</p>
<pre><code>Field1
row1
row2
row3
</code></pre>
<p>Code:</p>
<pre><code>datafile = open(r"my_file.csv", "r")
myreader = csv.reader(datafile, delimiter=",")

list1 = ["A", "B", "C"]

for x in list1[:]:
    print(x)
        for y in myreader:
               print(y)
</code></pre>
<p>Expected result:</p>
<pre><code>A
row1
row2
row3
B
row1
row2
row3
C
row1
row2
row3
</code></pre>
<p>Actual result:</p>
<pre><code>A
row1
row2
row3&lt;
B
C
</code></pre>
<p>It appears only the initial iteration of the inner loop is working. </p>
<p>If I replace the csv with another list it works fine:</p>
<pre><code>datafile = open(r"my_file.csv", "r")
myreader = csv.reader(datafile, delimiter=",")

list1 = ["A", "B", "C"]
list2 = ["row1", "row2", "row2"]

for x in list2[:]:
    print(x)
        for y in list2:
               print(y)
</code></pre>
<p>gives expected result</p>
<p>And I can iterate through the csv rows in a single loop no problem with the below:</p>
<pre><code>x = 0
for y in myreader:
        x = x + 1
        print(y[2] + " INNER")
</code></pre>
<p>So why won't it all work together?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader</code></a> returns an <code>reader</code> object which is an iterator. So, once you iterate the entire list, it becomes empty. You need to save your reader as a <code>list</code> in order to iterate it repeatedly.</p>
<p>In order to achieve this, you need to change:</p>
<pre><code>myreader = list(csv.reader(datafile, delimiter=","))
#           ^ it'll save `myreader` as list
</code></pre>
<p>Hence, you complete code should be:</p>
<pre><code>datafile = open(r"my_file.csv", "r")
myreader = list(csv.reader(datafile, delimiter=","))    
#           ^ converting the `iterator` to list type

list1 = ["A", "B", "C"]

#            v  I removed "[:]" from here because it is not required
#            v  `list1[:]` creates a copy of the list "list1". You 
#            v  don't need copy here
for x in list1:
    print(x)
    for y in myreader:
        print(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After your loop with <code>A</code> your reader iterator is BEHIND all the data. 
You would have to reposition it to the start but why do you do this?</p>
<p>It would be better to save all the data once into a list and then reuse that.</p>
<pre><code>myData = list(myreader) # this will iterate the whole file and put all in a list.
</code></pre>
<p>See <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html</a> </p>
</div>
<div class="post-text" itemprop="text">
<p><code>myreader</code> is an iterator and will be exhausted after the first iteration.
Convert it into a list to get your desired output.</p>
<pre><code>csv_rows = list(myreader)
for x in list1[:]:
    print(x)
        for y in csv_rows:
               print(y)
</code></pre>
<p>Iterators allow only one iteration. On the other hand, a list can be iterated over again and again. The advantage of the iterator is that does not load all elements into memory at once. This can be important if the file is large. In this case, the list might consume considerable amounts of memory.</p>
</div>
