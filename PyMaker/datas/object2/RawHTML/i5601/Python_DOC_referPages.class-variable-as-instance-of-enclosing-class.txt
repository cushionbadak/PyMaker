<div class="post-text" itemprop="text">
<p>I know Python can do enums (well sort of) but the type of enums it does is very primitive. For example I can do this:</p>
<pre><code>from enum import Enum

class Color(Enum):
  BLACK = 'black'
  WHITE = 'white'

print(Color.BLACK.value)
</code></pre>
<p>This is fine but what if I want each color to have a name and a hex value? I have several options (like making the enum values be dictionaries) but I prefer the way Java does enums. In Java, enums are allowed to have fields and methods like a class. So normally when a language only supports simple enums like the above example, I restructure the code similar to the following:</p>
<pre><code>class Color(object):
  BLACK = Color('black', '#000')
  WHITE = Color('white', '#fff')

  def __init__(self, name, hex):
    self.name = name
    self.hex = hex

print(Color.BLACK.name + ' ' + Color.BLACK.hex)
</code></pre>
<p>Now I can have multiple values, custom methods and can refer to the different fields by name since each color is an object. I've done this in several languages without issue, but Python seems to complain that "name 'Color' is not defined". Can I not create an instance of a class inside that class? My hacky solution is to do this:</p>
<pre><code>class Color(object):
  def __init__(self, name, hex):
    self.name = name
    self.hex = hex

Color.BLACK = Color('black', '#000')
Color.WHITE = Color('white', '#fff')

print(Color.BLACK.name + ' ' + Color.BLACK.hex)
</code></pre>
<p>Which works just fine. My question, though, is why are the fields not allowed inside the class? Can I add something or restructure it to make it allowed? Thanks in advance for any answers!</p>
</div>
<div class="post-text" itemprop="text">
<p>Enums support this usecase <strong>directly</strong>. The documentation for the library covers this in the <a href="https://docs.python.org/3/library/enum.html#planet" rel="nofollow noreferrer"><em>Planet</em> example in the examples section</a>:</p>
<blockquote>
<p>If <code>__new__()</code> or <code>__init__()</code> is defined the value of the enum member will be passed to those methods:</p>
<pre><code>&gt;&gt;&gt; class Planet(Enum):
...     MERCURY = (3.303e+23, 2.4397e6)
...     # ...
...
...     def __init__(self, mass, radius):
...         self.mass = mass       # in kilograms
...         self.radius = radius   # in meters
...     @property
...     def surface_gravity(self):
...         # universal gravitational constant  (m3 kg-1 s-2)
...         G = 6.67300E-11
...         return G * self.mass / (self.radius * self.radius)
</code></pre>
<p>[...]</p>
<pre><code>&gt;&gt;&gt; Planet.EARTH.value
(5.976e+24, 6378140.0)
&gt;&gt;&gt; Planet.EARTH.surface_gravity
9.802652743337129
</code></pre>
</blockquote>
<p>So for your specific example, just define a <code>__init__</code> method:</p>
<pre><code>from enum import Enum

class Color(Enum):
    BLACK = ('black', '#000')
    WHITE = ('white', '#fff')

    def __init__(self, color_name, hex):
        self.color_name = color_name
        self.hex = hex 

print(Color.BLACK.color_name + ' ' + Color.BLACK.hex)
</code></pre>
<p>I did not use <code>name</code> as an attribute because that is a reserved attribute (used to reflect the enum value name, here <code>BLACK</code> and <code>WHITE</code>):</p>
<pre><code>&gt;&gt;&gt; Color.BLACK
&lt;Color.BLACK: ('black', '#000')&gt;
&gt;&gt;&gt; Color.BLACK.name
'BLACK'
&gt;&gt;&gt; Color.BLACK.color_name
'black'
&gt;&gt;&gt; Color.BLACK.hex
'#000'
</code></pre>
<p>You can still override the <code>name</code> attribute with a <code>@property</code> but Iâ€™d not deviate from the standard here. </p>
<p>I used this technique to define the virus states in my <a href="https://github.com/mjpieters/adventofcode/blob/master/2017/Day%2022.ipynb" rel="nofollow noreferrer">Advent of Code day 22 solution</a>, defining both the next state name and the direction change for each entry. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use tuple values and <code>@property</code> accessors to give names to the tuple elements:</p>
<pre><code>from enum import Enum

class Color(Enum):
    BLACK = ('black', '#000')
    WHITE = ('white', '#fff')

    @property
    def name(self):
        return self.value[0]

    @property
    def hex(self):
        return self.value[1]

print(Color.BLACK.name)
print(Color.BLACK.hex)
</code></pre>
<p><a href="https://ideone.com/xDLc5f" rel="noreferrer">Output</a>:</p>
<pre><code>black
#000
</code></pre>
<p>As for why your code doesn't work, Python class definitions are imperative. At the time you're trying to construct a <code>Color</code> instance, the <code>Color</code> class doesn't exist yet.</p>
</div>
<div class="post-text" itemprop="text">
<h1>The "<em>chicken and egg</em>"-problem</h1>
<p>You encounter the "<em>chicken and egg</em>"-problem here. Since if you construct a class, Python has to associate the names of attributes and functions, with the values of tha attributes and functions. If you access <code>Color.abc</code>, then it will look whether it finds such corresponding name, and returns the value/function definition.</p>
<p>But now there is a problem. If you write:</p>
<pre><code>class <b>Foo</b>(object):
    bar = <b>Foo</b>()</code></pre>
<p>Why? Well in order to construct the <code>class</code>, it first has to construct the attributes. So it has to construct a <code>'bar'</code> entry that maps to the result of <code>Foo()</code> but we are constructing <code>Foo</code> at that moment, so how can we construct a <code>Foo</code> if <code>Foo</code> depends on that construction. We can not. In Java it is simpler since classes are conceptually constructed at <em>compile time</em>.</p>
<p>We have some options here however.</p>
<h1>Monkey-patching the <code>Color</code> class</h1>
<p>We can first construct the <code>Color</code> class and then "<em>monkey patch</em>" that class:</p>
<pre><code>class Color(object):

  def __init__(self, name, hex):
    self.name = name
    self.hex = hex

<b>Color.black = Color('black', '#000')
Color.white = Color('white', '#fff')</b></code></pre>
<p>Here we first define the <code>Color</code> class, and then add attributes to the <code>Color</code> class. We can do this afterward, since now the objects are defined.</p>
<h1>Attaching values to the <code>Enum</code> objects</h1>
<p>We can also attach values to the <code>Enum</code> objects:</p>
<pre><code><b>from enum import Enum</b>

class Color(<b>Enum</b>):

  <b>white = {'name': 'white', 'hex': '#fff'}
  black = {'name': 'black', 'hex': '#000'}

  @property
  def name(self):
    return self.value['name']

  @property
  def hex(self):
    return self.value['hex']</b></code></pre>
<p>We can attach a value to every <code>Enum</code> member. For instance we attach <code>{'name': 'white', 'hex': '#fff'}</code> to <code>white</code>. We can later access that value, through <code>self.value</code>. So now we can define a property on <code>Color.white</code> by defining a property function <code>def name(self):</code> that accesses the <code>'name'</code> key of the dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about a named tuple solution ?</p>
<pre><code>from collections import namedtuple

color = namedtuple('Color', ['name', 'value'])  # Add attributes as you please

class Color:
    BLACK = color('black', '#000')
    WHITE = color('white', '#fff')

print(Color.BLACK.name, Color.BLACK.value)
</code></pre>
<p>Outputs</p>
<blockquote>
<p>black #000</p>
</blockquote>
<p>Adding new ones is as easy as this</p>
<pre><code>Color.RED = color('red', '#ff0')
print(Color.RED.name, Color.RED.value)
</code></pre>
<blockquote>
<p>red #ff0</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You could do what you want by using a meta-class to help construct the <code>Color</code> class:</p>
<pre><code>class ColorMeta(type):
    def __new__(cls, class_name, parents, attrs):
        NUL = object()  # Sentinel.
        meta_args = attrs.get('meta_args', NUL)
        if meta_args is NUL:
            meta_args = []
        else:
            del attrs['meta_args']  # Clean up so isn't part of class created.

        clsobj = super().__new__(cls, class_name, parents, attrs)

        for meta_arg in meta_args:
            name, hex = meta_arg
            color = clsobj(name, hex)
            setattr(clsobj, name, color)

        return clsobj


class Color(metaclass=ColorMeta):
    meta_args = [('WHITE', '#fff'),
                 ('BLACK', '#000'),]

    def __init__(self, name, hex):
        self.name = name
        self.hex = hex


print(Color.WHITE.name + ' ' + Color.WHITE.hex)
print(Color.BLACK.name + ' ' + Color.BLACK.hex)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think <code>user2357112</code> has already the answer you are looking for, but it might be worthwhile looking into<code>namedtuples</code> as well to access properties.</p>
<p><strong>Named Tuples:</strong></p>
<pre><code>from collections import namedtuple
Color = namedtuple('Color', 'name hex')
Black = Color(name='Black', hex='#000')

print(Black.hex)
print(Black.name)
&gt;#000
&gt;Black
</code></pre>
</div>
<span class="comment-copy">Well Python has to construct a <code>Color</code> class, with as argument <code>BLACK = Color('black', '#000')</code>. But at that time, <code>Color</code> is thus not defined yet. So it is like the "<i>chicken and the egg</i>"-problem.</span>
<span class="comment-copy">Classes aren't dictionaries. Only dictionaries are dictionaries. It would be more accurate to say that classes have a dict, or (if you want to emphasize the dict more) that classes are wrappers around dicts.</span>
<span class="comment-copy">I think having two color classes like this could be bit confusing (<code>color</code> is a subclass of <code>tuple</code>, which is what the <code>namedtuple()</code> factory function returns).</span>
