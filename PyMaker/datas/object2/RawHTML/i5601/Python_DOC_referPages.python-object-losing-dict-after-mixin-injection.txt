<div class="post-text" itemprop="text">
<p>I am trying to inject a mixin to a class with a decorator. When the code runs the class no longer has a <strong>dict</strong> property even though the dir(instance) says it has one. I'm not sure where the property is disappearing. Is there a way that I can get <strong>dict</strong> or otherwise find the instance's attributes?</p>
<pre><code>def testDecorator(cls):
    return type(cls.__name__, (Mixin,) + cls.__bases__, dict(cls.__dict__))

class Mixin:         
     pass

@testDecorator
class dummyClass:
    def __init__(self):
        self.testVar1 = 'test'
        self.testVar2 = 3.14

inst = dummyClass()
print(dir(inst))
print(inst.__dict__)
</code></pre>
<p>This code works if the decorator is commented out yet causes an error when the decorator is present. Running on python 3.5.1</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not "losing <code>__dict__</code>". What's happening is that your original <code>dummyClass</code> has a <code>__dict__</code> <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">descriptor</a> intended to retrieve the <code>__dict__</code> attribute of instances of your original <code>dummyClass</code>, but your decorator puts that descriptor into a new <code>dummyClass</code> that doesn't descend from the original.</p>
<p>It's not safe to use the original <code>__dict__</code> descriptor with instances of the new class, because there's no inheritance relationship, and instances of the new class could have their dict pointer at a different offset in their memory layout. To fix this, have your decorator create a class that descends from the original instead of copying its dict and bases:</p>
<pre><code>def testDecorator(cls):
    return type(cls.__name__, (Mixin, cls), {})
</code></pre>
</div>
<span class="comment-copy">Simply excising <code>__dict__</code> from the mapping passed to <code>type</code> also works (a new <code>__dict__</code> descriptor is created automatically).  Might be a good idea to also remove <code>__weakref__</code>.</span>
<span class="comment-copy">Well, <code>Mixin</code> has its own <code>__dict__</code> descriptor, so it ends up using that one instead of creating a new one, but yeah, removing <code>__dict__</code> should work.</span>
