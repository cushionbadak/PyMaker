<div class="post-text" itemprop="text">
<p>With <a href="https://www.python.org/dev/peps/pep-0557/" rel="noreferrer">PEP 557</a> data classes are introduced into python standard library. </p>
<p>They make use of the <code>@dataclass</code> decorator and they are supposed to be "mutable namedtuples with default" but I'm not really sure I understand what this actually means and how they are different from common classes.</p>
<p>What exactly are python data classes and when is it best to use them?</p>
</div>
<div class="post-text" itemprop="text">
<p>Data classes are just regular classes that are geared towards storing state, more than contain a lot of logic. Every time you create a class that mostly consists of attributes you made a data class.</p>
<p>What the <code>dataclasses</code> module does is make it <strong>easier</strong> to create data classes. It takes care of a lot of boiler plate for you.</p>
<p>This is especially important when your data class must be hashable; this requires a <code>__hash__</code> method as well as an <code>__eq__</code> method. If you add a custom <code>__repr__</code> method for ease of debugging, that can become quite verbose:</p>
<pre><code>class InventoryItem:
    '''Class for keeping track of an item in inventory.'''
    name: str
    unit_price: float
    quantity_on_hand: int = 0

    def __init__(
            self, 
            name: str, 
            unit_price: float,
            quantity_on_hand: int = 0
        ) -&gt; None:
        self.name = name
        self.unit_price = unit_price
        self.quantity_on_hand = quantity_on_hand

    def total_cost(self) -&gt; float:
        return self.unit_price * self.quantity_on_hand

    def __repr__(self) -&gt; str:
        return (
            'InventoryItem('
            f'name={self.name!r}, unit_price={self.unit_price!r}, '
            f'quantity_on_hand={self.quantity_on_hand!r})'

    def __hash__(self) -&gt; int:
        return hash((self.name, self.unit_price, self.quantity_on_hand))

    def __eq__(self, other) -&gt; bool:
        if not isinstance(other, InventoryItem):
            return NotImplemented
        return (
            (self.name, self.unit_price, self.quantity_on_hand) == 
            (other.name, other.unit_price, other.quantity_on_hand))
</code></pre>
<p>With <code>dataclasses</code> you can reduce it to:</p>
<pre><code>from dataclasses import dataclass

@dataclass(unsafe_hash=True)
class InventoryItem:
    '''Class for keeping track of an item in inventory.'''
    name: str
    unit_price: float
    quantity_on_hand: int = 0

    def total_cost(self) -&gt; float:
        return self.unit_price * self.quantity_on_hand
</code></pre>
<p>The same class decorator can also generate comparison methods (<code>__lt__</code>, <code>__gt__</code>, etc.) and handle immutability.</p>
<p><code>namedtuple</code> classes are also data classes, but are immutable by default (as well as being sequences). <code>dataclasses</code> are much more flexible in this regard, and can easily be structured such that they can <a href="https://stackoverflow.com/questions/44287623/a-way-to-subclass-namedtuple-for-purposes-of-typechecking/50369898#50369898">fill the same role as a <code>namedtuple</code> class</a>.</p>
<p>The PEP was inspired by the <a href="http://www.attrs.org/en/stable/" rel="noreferrer"><code>attrs</code> project</a>, which can do even more (including slots, validators, converters, metadata, etc.).</p>
<p>If you want to see some examples, I recently used <code>dataclasses</code> for several of my <a href="http://adventofcode.com/" rel="noreferrer">Advent of Code</a> solutions, see the solutions for <a href="https://github.com/mjpieters/adventofcode/blob/master/2017/Day%2007.ipynb" rel="noreferrer">day 7</a>, <a href="https://github.com/mjpieters/adventofcode/blob/master/2017/Day%2008.ipynb" rel="noreferrer">day 8</a>, <a href="https://github.com/mjpieters/adventofcode/blob/master/2017/Day%2011.ipynb" rel="noreferrer">day 11</a> and <a href="https://github.com/mjpieters/adventofcode/blob/master/2017/Day%2020.ipynb" rel="noreferrer">day 20</a>.</p>
<p>If you want to use <code>dataclasses</code> module in Python versions &lt; 3.7, then you could install the <a href="https://pypi.org/p/dataclasses/" rel="noreferrer">backported module</a> (requires 3.6) or use the <code>attrs</code> project mentioned above.</p>
</div>
<div class="post-text" itemprop="text">
<p>Btw. Raymond Hettinger (Python core developer) had a great talk at PyCon 2018:</p>
<p><a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw&amp;t=1390" rel="noreferrer">https://www.youtube.com/watch?v=T-TwcmT6Rcw&amp;t=1390</a></p>
<p>The slides are here: <a href="https://twitter.com/raymondh/status/995693882812915712" rel="noreferrer">https://twitter.com/raymondh/status/995693882812915712</a></p>
<p><a href="https://i.stack.imgur.com/NmQO9.png" rel="noreferrer"><img alt="comparison" src="https://i.stack.imgur.com/NmQO9.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<h1>Overview</h1>
<p>The question has been addressed.  However, this answer adds some practical examples to aid in the basic understanding of dataclasses.</p>
<blockquote>
<p>What exactly are python data classes and when is it best to use them?</p>
</blockquote>
<ol>
<li><em>code generators</em>: generate boilerplate code; you can choose to implement special methods in a regular class or have a dataclass implement them automatically. </li>
<li><em>data containers</em>: structures that hold data (e.g. tuples and dicts), often with dotted, attribute access such as <a href="https://stackoverflow.com/questions/3357581/using-python-class-as-a-data-container">classes, <code>namedtuple</code> and others</a>.</li>
</ol>
<blockquote>
<p>"mutable namedtuples with default[s]"</p>
</blockquote>
<p>Here is what the latter phrase means:</p>
<ul>
<li><em>mutable</em>: by default, dataclass attributes can be reassigned.  You can optionally make them immutable (see Examples below).</li>
<li><em>namedtuple</em>: you have dotted, attribute access like a <code>namedtuple</code> or a regular class.</li>
<li><em>default</em>: you can assign default values to attributes</li>
</ul>
<p>Compared to common classes, you primarily save on typing boilerplate code.</p>
<hr/>
<h1>Features</h1>
<p>Here is an overview of dataclass features (see examples in the Summary Table).</p>
<h2>What you get</h2>
<p>Here are features you get by default from dataclasses.</p>
<p><em>Attributes + Representation + Comparison</em></p>
<pre><code>import dataclasses


@dataclasses.dataclass
#@dataclasses.dataclass()                                       # alternative
class Color:
    r : int = 0
    g : int = 0
    b : int = 0
</code></pre>
<p>The following defaults are automatically set to <code>True</code>:</p>
<pre><code>@dataclasses.dataclass(init=True, repr=True, eq=True)
</code></pre>
<h2>What you can turn on</h2>
<p>Additional features are available if the appropriate keywords are set to <code>True</code>.</p>
<p><em>Order</em></p>
<pre><code>@dataclasses.dataclass(order=True)
class Color:
    r : int = 0
    g : int = 0
    b : int = 0
</code></pre>
<p>The ordering methods are now implemented (overloading operators: <code>&lt; &gt; &lt;= &gt;=</code>), similarly to <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer"><code>functools.total_ordering</code></a> with stronger equality tests.</p>
<p><em>Hashable, Mutable</em></p>
<pre><code>@dataclasses.dataclass(unsafe_hash=True)                        # override base `__hash__`
class Color:
    ...
</code></pre>
<p>Although the object is potentially mutable (possibly undesired), a hash is implemented.</p>
<p><em>Hashable, Immutable</em></p>
<pre><code>@dataclasses.dataclass(frozen=True)                                 # `eq=True` (default) to be immutable 
class Color:
    ...
</code></pre>
<p>A hash is now implemented and changing the object or assigning to attributes is disallowed.</p>
<p>Overall, the object is hashable if either <code>unsafe_hash=True</code> or <code>frozen=True</code>. </p>
<p>See also the original <a href="https://github.com/ericvsmith/dataclasses/blob/d4c87c663feb0617fd8c7e6fe0a58882c4ccd468/dataclasses.py#L115" rel="nofollow noreferrer">hashing logic table</a> with more details.</p>
<h2>What you don't get</h2>
<p>To get the following features, special methods must be manually implemented:</p>
<p><em>Unpackable</em></p>
<pre><code>@dataclasses.dataclass
class Color:
    r : int = 0
    g : int = 0
    b : int = 0

    def __iter__(self):
        yield from dataclasses.astuple(self)
</code></pre>
<p><em>Optimization</em></p>
<pre><code>@dataclasses.dataclass
class SlottedColor:
    __slots__ = ["r", "b", "g"]
    r : int
    g : int
    b : int
</code></pre>
<p>The object size is now reduced:</p>
<pre><code>&gt;&gt;&gt; imp sys
&gt;&gt;&gt; sys.getsizeof(Color)
1056
&gt;&gt;&gt; sys.getsizeof(SlottedColor)
888
</code></pre>
<p>In some circumstances, <code>__slots__</code> also improves the speed of creating instances and accessing attributes.  Also, slots do not allow default assignments; otherwise, a <code>ValueError</code> is raised.  </p>
<p>See more on slots in this <a href="https://realpython.com/python-data-classes/#optimizing-data-classes" rel="nofollow noreferrer">blog post</a>. </p>
<hr/>
<h1>Summary Table</h1>
<pre><code>+----------------------+----------------------+----------------------------------------------------+-----------------------------------------+
|       Feature        |       Keyword        |                      Example                       |           Implement in a Class          |
+----------------------+----------------------+----------------------------------------------------+-----------------------------------------+
| Attributes           |  init                |  Color().r -&gt; 0                                    |  __init__                               |
| Representation       |  repr                |  Color() -&gt; Color(r=0, g=0, b=0)                   |  __repr__                               |
| Comparision*         |  eq                  |  Color() == Color(0, 0, 0) -&gt; True                 |  __eq__                                 |
|                      |                      |                                                    |                                         |
| Order                |  order               |  sorted([Color(0, 50, 0), Color()]) -&gt; ...         |  __lt__, __le__, __gt__, __ge__         |
| Hashable             |  unsafe_hash/frozen  |  {Color(), {Color()}} -&gt; {Color(r=0, g=0, b=0)}    |  __hash__                               |
| Immutable            |  frozen + eq         |  Color().r = 10 -&gt; TypeError                       |  __setattr__, __delattr__               |
|                      |                      |                                                    |                                         |
| Unpackable+          |  -                   |  r, g, b = Color()                                 |   __iter__                              |
| Optimization+        |  -                   |  sys.getsizeof(SlottedColor) -&gt; 888                |  __slots__                              |
+----------------------+----------------------+----------------------------------------------------+-----------------------------------------+
</code></pre>
<p><sub><sup>+</sup>These methods are not automatically generated and require manual implementation in a dataclass.</sub></p>
<p><sub><sup>*</sup> <code>__ne__</code> is <a href="https://github.com/ericvsmith/dataclasses/blob/d4c87c663feb0617fd8c7e6fe0a58882c4ccd468/dataclasses.py#L882" rel="nofollow noreferrer">not implemented</a>.</sub></p>
<hr/>
<h1>Additional features</h1>
<p><em>Post-initialization</em></p>
<pre><code>@dataclasses.dataclass
class RGBA:
    r : int = 0
    g : int = 0
    b : int = 0
    a : float = 1.0

    def __post_init__(self):
        self.a : int =  int(self.a * 255)


RGBA(127, 0, 255, 0.5)
# RGBA(r=127, g=0, b=255, a=127)
</code></pre>
<p><em>Inheritance</em></p>
<pre><code>@dataclasses.dataclass
class RGBA(Color):
    a : int = 0
</code></pre>
<p><em>Conversions</em></p>
<p>Convert a dataclass to a tuple or a dict, <a href="https://stackoverflow.com/questions/51564841/creating-nested-dataclass-objects-in-python">recursively</a>:</p>
<pre><code>&gt;&gt;&gt; dataclasses.astuple(Color(128, 0, 255))
(128, 0, 255)
&gt;&gt;&gt; dataclasses.asdict(Color(128, 0, 255))
{r: 128, g: 0, b: 255}
</code></pre>
<p>Limitations</p>
<ul>
<li>Lacks mechanisms to handle <a href="https://stackoverflow.com/questions/50764873/is-it-possible-to-use-args-in-a-dataclass">starred arguments</a></li>
</ul>
<hr/>
<h1>References</h1>
<ul>
<li>R. Hettinger's <a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw" rel="nofollow noreferrer">talk</a> on <em>Dataclasses: The code generator to end all code generators</em></li>
<li>T. Hunner's <a href="https://www.youtube.com/watch?v=COMRNKAVesI" rel="nofollow noreferrer">talk</a> on <em>Easier Classes: Python Classes Without All the Cruft</em></li>
<li>Python's <a href="https://docs.python.org/3/library/dataclasses.html#module-level-decorators-classes-and-functions" rel="nofollow noreferrer">documentation</a> on hashing details</li>
<li>Real Python's <a href="https://realpython.com/python-data-classes/" rel="nofollow noreferrer">guide</a> on <em>The Ultimate Guide to Data Classes in Python 3.7</em></li>
<li>A. Shaw's <a href="https://hackernoon.com/a-brief-tour-of-python-3-7-data-classes-22ee5e046517" rel="nofollow noreferrer">blog post</a> on <em>A brief tour of Python 3.7 data classes</em></li>
<li>E. Smith's <a href="https://github.com/ericvsmith/dataclasses" rel="nofollow noreferrer">github repository</a> on <em>dataclasses</em></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://www.python.org/dev/peps/pep-0557/" rel="nofollow noreferrer">PEP specification</a>:</p>
<blockquote>
<p>A class decorator is provided which inspects a class definition for
  variables with type annotations as defined in PEP 526, "Syntax for
  Variable Annotations". In this document, such variables are called
  fields. Using these fields, the decorator adds generated method
  definitions to the class to support instance initialization, a repr,
  comparison methods, and optionally other methods as described in the
  Specification section. Such a class is called a Data Class, but
  there's really nothing special about the class: the decorator adds
  generated methods to the class and returns the same class it was
  given.</p>
</blockquote>
<p>The <code>@dataclass</code> generator adds methods to the class that you'd otherwise define yourself like <code>__repr__</code>, <code>__init__</code>, <code>__lt__</code>, and <code>__gt__</code>.</p>
</div>
<span class="comment-copy">Given the extensive content of the PEP, what else could you want to know? <code>namedtuple</code>s are immutable and can't have default values for the attributes, whereas data classes are mutable and can have them.</span>
<span class="comment-copy">@jonrsharpe Seems reasonable to me that there should be a stackoverflow thread on the subject. Stackoverflow is meant to be an encyclopedia in Q&amp;A format, no? The answer is never "just look on this other website." There shouldn't have been downvotes here.</span>
<span class="comment-copy">There are five threads on how to append an item to a list. One question on <code>@dataclass</code> won't cause the site to disintegrate.</span>
<span class="comment-copy">Thank you for your answer. It was clear, concise and to the point. You explained the concept in a very simple yet comprehensible way.</span>
<span class="comment-copy">In the first example do you intentionally hide class members with instance members of the same names? Please help understanding this idiom.</span>
<span class="comment-copy">@VladimirLenin: there are no class attributes, there are only type annotations. See <a href="https://www.python.org/dev/peps/pep-0526/" rel="nofollow noreferrer">PEP 526</a>, specifically the <a href="https://www.python.org/dev/peps/pep-0526/#class-and-instance-variable-annotations" rel="nofollow noreferrer"><i>Class and instance variable annotations</i> section</a>.</span>
<span class="comment-copy">@Bananach: the <code>@dataclass</code> generates roughly the same <code>__init__</code> method, with a <code>quantity_on_hand</code> keyword argument with default value. When you create an instance, it'll set the <code>quantity_on_hand</code> instance attribute, always. So my <i>first</i>, non-dataclass example uses the same pattern to echo what the dataclass generated code will do.</span>
<span class="comment-copy">@Bananach: so in the first example, we <i>could</i> just omit setting an instance attribute and not shadow the class attribute, it is redundant setting it anyway in that sense, but dataclasses <i>do</i> set it.</span>
<span class="comment-copy">Shouldn't this be a comment instead of an answer? It links to an answer instead of providing one.</span>
