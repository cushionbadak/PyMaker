<div class="post-text" itemprop="text">
<p>Consider list of tuples </p>
<pre><code>[(7751, 0.9407466053962708), (6631, 0.03942129), (7751, 0.1235432)]
</code></pre>
<p>how to compute mean of all tuple values in pythonic way where 1st number is similar? for example the answer has to be </p>
<pre><code>[(7751, 0.532144902698135), (6631, 0.03942129)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way is using <code>collections.defaultdict</code></p>
<pre><code>from collections import defaultdict
lst = [(7751, 0.9407466053962708), (6631, 0.03942129), (7751, 0.1235432)]
d_dict = defaultdict(list)
for k,v in lst:
    d_dict[k].append(v)

[(k,sum(v)/len(v)) for k,v in d_dict.items()]
#[(7751, 0.5321449026981354), (6631, 0.03942129)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You do with <code>groupby</code> ,</p>
<pre><code>from itertools import groupby
result = []
for i,g in groupby(sorted(lst),key=lambda x:x[0]):
    grp = list(g)
    result.append((i,sum(i[1] for i in grp)/len(grp)))
</code></pre>
<p>Using, <code>list comprehension</code>, </p>
<pre><code>def get_avg(g):
    grp = list(g)
    return sum(i[1] for i in grp)/len(grp)

result = [(i,get_avg(g)) for i,g in groupby(sorted(lst),key=lambda x:x[0])]
</code></pre>
<p>Result</p>
<pre><code>[(6631, 0.03942129), (7751, 0.5321449026981354)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>groupby</code> from <code>itertools</code> is your friend:</p>
<pre><code>&gt;&gt;&gt; l=[(7751, 0.9407466053962708), (6631, 0.03942129), (7751, 0.1235432)] 

&gt;&gt;&gt; #importing libs:
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from statistics import mean              #(only python &gt;= 3.4)
&gt;&gt;&gt; # mean=lambda l: sum(l) / float(len(l))  #(for python &lt; 3.4) (*1)

&gt;&gt;&gt; #set the key to group and sort and sorting
&gt;&gt;&gt; k=lambda x: x[0]         
&gt;&gt;&gt; data = sorted(l, key=k)  

&gt;&gt;&gt; #here it is, pythonic way:
&gt;&gt;&gt; [ (k, mean([m[1] for m in g ])) for k, g in groupby(data, k) ] 
</code></pre>
<p>Results:</p>
<pre><code>[(6631, 0.03942129), (7751, 0.5321449026981354)]
</code></pre>
<p><strong>EDITED</strong> (*1) Thanks <a href="https://stackoverflow.com/users/5707684/elmex80s">Elmex80s</a> to refer me to <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">mean</a>.</p>
</div>
<span class="comment-copy">Also, where is the <code>mean</code> ?</span>
<span class="comment-copy">@danihp Updated answer. Thanks.</span>
<span class="comment-copy">List comprehension would be more beautiful.</span>
<span class="comment-copy">@Elmex80s <code>g</code> is generator, So it's difficult to get the length. So it's almost impossible.</span>
<span class="comment-copy">@Elmex80s Updated with list comprehension,</span>
<span class="comment-copy">numpy has a mean. You could do <code>float(np.mean(zip(*g)[1]))</code>.</span>
<span class="comment-copy">@Elmex80s, yea, is right you say! You know if It worths to import the whole numpy just to make a mean?</span>
<span class="comment-copy">There is also this light weight statistics module <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">docs.python.org/3/library/statistics.html</a> which has a mean, Python 3 only it seems.</span>
<span class="comment-copy">Wow! I go to update my answer. Thanks a lot.</span>
