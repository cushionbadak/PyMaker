<div class="post-text" itemprop="text">
<p>The following is not working for me, with Python 3.4.7, ruamel.yaml version 0.15.35:</p>
<pre><code>import sys
import enum

import ruamel.yaml
from ruamel.yaml import yaml_object
yaml = ruamel.yaml.YAML()

@yaml_object(yaml)
class Speed(enum.IntEnum):
    Reverse = 0
    Neutral = 1
    Low = 2
    Drive = 3
    Park = 999

print("Neutral:", repr(Speed.Neutral))

yaml.dump(Speed.Neutral, sys.stdout)
</code></pre>
<p>I get a totally reasonable <code>repr</code>:</p>
<pre><code>Neutral: &lt;Speed.Neutral: 1&gt;
</code></pre>
<p>but the <code>.dump()</code> raises:</p>
<pre><code>ruamel.yaml.representer.RepresenterError: cannot represent an object: &lt;enum 'Speed'&gt;
</code></pre>
<p>If <code>enum</code>'s are not supported, is there something I can do to extend the <code>enum</code> class I am using (or the subclass <code>enum.IntEnum</code> I have created), e.g. a dunder method?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>enum</code> is not supported out-of-the-box, essentially because the default <code>dump</code> method is safe and therefore doesn't support arbitrary Python objects. That safety excludes types as <code>enum</code> from the standard library as well. </p>
<p>What you should do is add a <code>to_yaml</code> <code>classmethod</code> to your <code>Speed</code> class as described in the <a href="http://yaml.readthedocs.io/en/latest/dumpcls.html?highlight=yaml_object#dumping-python-classes" rel="nofollow noreferrer">ruamel.yaml documentation</a>:</p>
<pre><code>import sys
import enum

import ruamel.yaml
from ruamel.yaml import yaml_object
yaml = ruamel.yaml.YAML()

@yaml_object(yaml)
class Speed(enum.IntEnum):
    Reverse = 0
    Neutral = 1
    Low = 2
    Drive = 3
    Park = 999

    @classmethod
    def to_yaml(cls, representer, node):
        return representer.represent_scalar(
            u'!Speed',
            '{}-{}'.format(node._name_, node._value_)
        )

yaml.dump(Speed.Neutral, sys.stdout)
</code></pre>
<p>which gives:</p>
<pre><code>!Speed Neutral-1
...
</code></pre>
<p>You can of course adapt the string representation to your liking (and add a <code>from_yaml</code> to be able to load the output back in).</p>
<p>Please note that you cannot add <code>yaml_tag</code> as in the documentation example, as this would interfere with the <code>enum</code> values.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you'll need to pass the enum by value.</p>
<p><a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow noreferrer">https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes</a></p>
<pre><code>yaml.dump(Speed.Neutral.value, sys.stdout)
</code></pre>
<p>Extended answer to add a @classmethod which calls .value as it's being passed</p>
<p><a href="http://yaml.readthedocs.io/en/latest/dumpcls.html" rel="nofollow noreferrer">http://yaml.readthedocs.io/en/latest/dumpcls.html</a></p>
<pre><code>import sys
import enum
import ruamel.yaml
from ruamel.yaml import yaml_object
yaml = ruamel.yaml.YAML()

@yaml_object(yaml)
class Speed(enum.IntEnum):
    Reverse = 0
    Neutral = 1
    Low = 2
    Drive = 3
    Park = 999

    @classmethod
    def to_yaml(cls, representer, node):
        return representer.represent_scalar(u'!enum:', u'{.value}'.format(node))
</code></pre>
</div>
<span class="comment-copy">and what if we don't have access to the class. E.g. what if we consume data from a 3rd party lib? Do we have to convert the enum to a string/integer manually?</span>
<span class="comment-copy">If you don't have access to a class, you cannot use it, so there is never need to dump it. If you have access to a class, but cannot update/extend the <code>.py</code> it is in, there are other methods of making that class "known" to <code>ruamel.yaml</code>. That would be an excellent question for <a href="https://stackoverflow.com">Stack Overflow</a>, but not an appropriate comment.</span>
<span class="comment-copy">I asked a question here: <a href="https://stackoverflow.com/q/54378220/592289">stackoverflow.com/q/54378220/592289</a></span>
<span class="comment-copy">I get notified via email of any new question tagged ruamel.yaml, no need to notify me via a comment for that.</span>
<span class="comment-copy">That is a workaround, but it loses the type information, as I am then just encoding an int. YAML is able to preserve type and value for other objects. It feels like it should be able to do so for enums.</span>
