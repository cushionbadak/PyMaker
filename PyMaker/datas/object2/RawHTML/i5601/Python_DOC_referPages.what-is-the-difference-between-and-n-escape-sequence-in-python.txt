<div class="post-text" itemprop="text">
<p>I am coming from C language</p>
<p>In book of Python it is given</p>
<p>among escape sequence</p>
<p>\ - New line in a multi-line string</p>
<p>\n - Line break</p>
<p>I am confused and unable to differentiate between the two.</p>
</div>
<div class="post-text" itemprop="text">
<p>The book is confusing you by mixing two entirely different concepts.</p>
<ul>
<li><p><code>\n</code> is an escape sequence in a string literal. Like other <code>\single-character</code> and <code>\xhh</code> or <code>\uhhhh</code> escape sequences these work <em>exactly</em> like <a href="https://en.wikipedia.org/wiki/Escape_sequences_in_C" rel="nofollow noreferrer">those in C</a>; they define a character in the string that would otherwise be difficult to spell out when writing code.</p></li>
<li><p><code>\</code> <em>at the end of a physical line of code</em> extends the <em>logical</em> line. That is, Python will see text on the next line as part of the current line, making it one long line of code. This applies <em>anywhere</em> in Python code.</p></li>
</ul>
<p>You can trivially see the difference when you print the results of strings that use either technique:</p>
<pre><code>escape_sequence = "This is a line.\nThis is another line"
logical_line_extended = "This is a logical line. \
This is still the same logical line."

print(escape_sequence)
print(logical_line_extended)
</code></pre>
<p>This outputs</p>
<pre class="lang-none prettyprint-override"><code>This is a line.
This is another line
This is a logical line. This is still the same logical line.
</code></pre>
<p>Note that the line breaks have swapped! The <code>\n</code> escape sequence in the string value caused the output to be broken across two lines (the terminal or console or whatever is displaying the printed data, knows how to interpret a newline character), while the newline in the <code>logical_line_extended</code> string literal definition is gone; it was never part of the string value being defined, it was a newline in the source code only.</p>
<p>Python lets you extend a line of code like this because Python defines how you delimit logical lines very differently from C. In C, you end statements with <code>;</code>, and group blocks of lines with <code>{...}</code> curly braces. Newlines are not part of how C reads your code.</p>
<p>So, the following C code:</p>
<pre class="lang-c prettyprint-override"><code>if (a) { foo = 'bar'; spam = 'ham'; }
</code></pre>
<p>is the same thing as</p>
<pre class="lang-c prettyprint-override"><code>if (a) {
    foo = 'bar';
    spam = 'ham';
}
</code></pre>
<p>C knows where each statement starts and ends because the programmer has to use <code>;</code> and <code>{...}</code> to delimit lines and blocks, the language doesn't care about indentation or newlines at all here. In Python however, you explicitly use newlines and indentation to define the same structure. So Python uses <em>whitespace</em> instead of <code>{</code>, <code>}</code> and <code>;</code>.</p>
<p>This means you could end up with <em>long lines of code</em> to hold a complex expression:</p>
<pre><code># deliberately convoluted long expression to illustrate a point
expr = 18 ** (1 / 3) / (6 * (3 + sqrt(3) * I) ** (1 / 3)) + 12 ** (1 / 3) * (3 + sqrt(3) * I) ** (1 / 3) / 12
</code></pre>
<p>The point of <code>\</code> is to allow you to break up such a long expression across multiple <em>logical</em> lines by extending the current line with <code>\</code> at the end:</p>
<pre><code># deliberately convoluted long expression to illustrate a point
expr = 18 ** (1 / 3) / (6 * (3 + sqrt(3) * I) ** (1 / 3)) + \
       12 ** (1 / 3) * (3 + sqrt(3) * I) ** (1 / 3) / 12
</code></pre>
<p>So the <code>\</code> as the <em>last character on a line</em>, tells Python to ignore the newline that's there and continue treating the following line as part of the same logical line.</p>
<p>Python also extends the logical line when it has seen an opening <code>(</code>, <code>[</code> or <code>{</code> brace, until the matching <code>}</code>, <code>]</code> or <code>)</code> brace is found to close the expression. This is the <em>preferred</em> method of extending lines. So the above expression could be broken up across multiple logical lines with:</p>
<pre><code>expr = (18 ** (1 / 3) / (6 * (3 + sqrt(3) * I) ** (1 / 3)) +
        12 ** (1 / 3) * (3 + sqrt(3) * I) ** (1 / 3) / 12)
</code></pre>
<p>You can do the same with strings:</p>
<pre><code>long_string = (
    "This is a longer string that does not contain any newline "
    "*characters*, but is defined in the source code with "
    "multiple strings across multiple logical lines."
)
</code></pre>
<p>This uses another C string literal trick Python borrowed: <a href="https://stackoverflow.com/questions/12120944/how-does-concatenation-of-two-string-literals-work">multiple consecutive string literals form one long string object</a> once parsed and compiled. </p>
<p>See the <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow noreferrer"><em>Lexical analysis</em> reference documentation</a>:</p>
<blockquote>
<h2>2.1.5. Explicit line joining</h2>
<p>Two or more physical lines may be joined into logical lines using backslash characters (<code>\</code>)<em>[.]</em></p>
<p><em>[...]</em></p>
<h2>2.1.6. Implicit line joining</h2>
<p>Expressions in parentheses, square brackets or curly braces can be split over more than one physical line without using backslashes.</p>
</blockquote>
<p>The same documentation lists all the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">permitted Python string escape sequences</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have completely misread the book.</p>
<p><code>\</code> is <em>not</em> an escape sequence, and is not used on its own in strings. It is used in multi-line <em>code</em>.</p>
<p><code>\n</code> is a newline character <em>in strings</em>.</p>
</div>
<div class="post-text" itemprop="text">
<h2>\ - New line in a multi-line string</h2>
<p>It is used for splitting a string which has a vast number of characters into multi lines as it is inconvenient to write in a single line.
This is something that has effect in the code only.</p>
<h2>\n - Line break</h2>
<p>This one on the other hand is a typical line break statement for printing something in a new line. The same thing we use in C and C++ languages.
this is something that has effect in the output.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the response to your question:</p>
<p><strong>Purpose of \n is basically used to give a line break as you mention too.</strong></p>
<p>Example:</p>
<blockquote>
<p>print("Hello\n")</p>
<p>print("Hi")</p>
</blockquote>
<p>The output of the above would be like:</p>
<blockquote>
<p>Hello</p>
<p>Hi</p>
</blockquote>
<p><strong>Purpose of \ is basically used to escape characters which have special meaning</strong></p>
<p>Example: I have to print Hello\ in the output then the code will be like</p>
<blockquote>
<p>print("Hello\\")</p>
</blockquote>
<p>The output of the above code will be like:</p>
<blockquote>
<p>Hello\</p>
</blockquote>
<p>So bascially in order to print Hello\ in your output, you have to put two "\\" and this is the purpose of \ character (to escape special characters).</p>
<p>I hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>With "\" you can change line as you write your code. What I mean is that if you write a long line of code and you want to change line to see what you type.
For example :</p>
<p><code>print("This is a demonstration of backslash.")</code> 
is the same as writing :</p>
<p><code>print("This is a demonstration \
of backslash")</code></p>
<p>On the other hand with "\n" you can change line in what you want to print. For example, when you write:<code>print("this is an \nexample")</code>, it will print "this is an"(changes line) "example".</p>
</div>
<div class="post-text" itemprop="text">
<p>Use \n  to have your output go to the next line.</p>
<pre><code>print('Hello \nworld!')
</code></pre>
<blockquote>
<p>Hello</p>
<p>world!</p>
</blockquote>
<p>Use the back slash with a character that has a meaning to Python when you want that character to appear in the printed output.</p>
<pre><code>print('It\'s cold outside')
</code></pre>
<blockquote>
<p>It's cold outside</p>
</blockquote>
<p>I hope this helps. ðŸ˜€</p>
</div>
<div class="post-text" itemprop="text">
<p>As excellently answered by @Jimmy I further give the following examples to make the matter more clear.</p>
<p>Case 1:</p>
<pre><code>&gt;&gt;&gt; var1 = "Adolf Hitler was a German dictator. He started the second world war."
&gt;&gt;&gt; print(var1)
Adolf Hitler was a German dictator. He started the second world war.
&gt;&gt;&gt; 
</code></pre>
<p>Case 2:</p>
<pre><code>&gt;&gt;&gt; var2 = "Adolf Hitler\
...  was a German dictator.\
...  He started the\
...  second world war."\
... 
&gt;&gt;&gt; print(var2)
Adolf Hitler was a German dictator. He started the second world war.
&gt;&gt;&gt;
</code></pre>
<p>Case 3:</p>
<pre><code>&gt;&gt;&gt; var3 = "Adolf Hitler\nwas a German dictator.\nHe started the\nsecond world war."
&gt;&gt;&gt; print(var3)
Adolf Hitler
was a German dictator.
He started the
second world war.
&gt;&gt;&gt;
</code></pre>
<p>Case 4:</p>
<pre><code>&gt;&gt;&gt; var4 = "Adolf Hitler\
... \nwas a German dictator.\
... \nhe started the\
... \nsecond world war."\
... 
&gt;&gt;&gt; print(var4)
Adolf Hitler
was a German dictator.
he started the
second world war.
&gt;&gt;&gt;
</code></pre>
<p>There is also another point which @Jimmy has not mentioned. I have illustrated it by the following two examples -</p>
<p>Example 1:</p>
<pre><code>&gt;&gt;&gt; var5 = """
... This multi-line string
... has a space at the top
... and a space at the bottom
... when it prints.
... """
&gt;&gt;&gt; print(var5)

This multi-line string
has a space at the top
and a space at the bottom
when it prints.

&gt;&gt;&gt;
</code></pre>
<p>Example 2:</p>
<pre><code>&gt;&gt;&gt; var6 = """\
... This multi-line string
... has no space at the
... top or the bottom
... when it prints.\
... """
&gt;&gt;&gt; print(var6)
This multi-line string
has no space at the
top or the bottom
when it prints.
</code></pre>
</div>
<span class="comment-copy"><code>\</code> means you can go to a new line in your source code but have no effect on the program. <code>\n</code> means produce a new line as a character in a string.</span>
<span class="comment-copy"><code>\n</code> only works inside a string literal. A backslash at the end of a physical line extends the logical line, anywhere, both <i>in</i> and <i>outside</i> of string literals. Not sure why you are confusing the two.</span>
<span class="comment-copy">In C, the end of a statement is signalled with <code>;</code>; that indicator is <i>required</i>. In Python, the end of a logical line is usually signalled by a newline (in your editor, hitting <code>&lt;ENTER&gt;</code> to go to the next line). The logical line can be extended across multiple physical lines by using <code>(....)</code> paretheses, <code>[...]</code> brackets, or <code>{...}</code> curly braces with newlines inside. <i>Or</i> you can end the line with a backslash, <code>\ </code>. This is entirely orthogonal to escape sequences in string literals, which in Python are a lot like those in C.</span>
<span class="comment-copy">(Python does support <code>;</code> to end a simple single-line statement, but using that is usually frowned upon from a style point of view).</span>
<span class="comment-copy">See the <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow noreferrer"><i>Lexical analysis</i> reference documentation</a> for the nitty gritty.</span>
<span class="comment-copy"><a href="https://www.digitalocean.com/community/tutorials/how-to-format-text-in-python-3" rel="nofollow noreferrer">digitalocean.com/community/tutorials/â€¦</a> says `` is an escape character</span>
<span class="comment-copy">Yes. It is an escape character <i>used in combination with other characters</i>, such as your own example <code>\n</code>. Why is this confusing you?</span>
<span class="comment-copy">NO it says \ itsel is an escape character, \ - New line in a multi-line string</span>
<span class="comment-copy">Well that's simply wrong. <code>\&lt;newline&gt;</code> inside a string means that the newline is <i>ignored</i>, as shown in the example further down that document. But `` by itself <i>cannot occur</i> in a string, because it is the beginning of an escape sequence.</span>
<span class="comment-copy">@DanielRoseman: <code>\ </code> can appear on its own in as string just fine, provided it is the last character on a line. It still works to extend the logical line there, it doesn't matter if it is used inside a string literal, or out.</span>
<span class="comment-copy">No I mean in <a href="https://www.digitalocean.com/community/tutorials/how-to-format-text-in-python-3" rel="nofollow noreferrer">digitalocean.com/community/tutorials/â€¦</a> it is given \ itselp is escape character. It is used for new-line in muti line string</span>
<span class="comment-copy">I understand your point. So there are multiple use cases. One of them is what I explained (to escape special characters) and another is what @Jimmy mentions (used when writing long lines of code).</span>
<span class="comment-copy">No, I didn't mean this, please see the accepted answer</span>
