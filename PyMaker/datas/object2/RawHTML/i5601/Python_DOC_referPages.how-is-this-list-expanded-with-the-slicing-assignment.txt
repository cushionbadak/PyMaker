<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10623302/how-assignment-works-with-python-list-slice">How assignment works with python list slice</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I came across the following code (sort of):</p>
<pre><code>my_list = [1, [2, 3, 4], 5]
my_list[1:2] = my_list[1]
</code></pre>
<p>After running these two lines, the variable <code>my_list</code> will be <code>[1, 2, 3, 4, 5]</code>. Pretty useful for expanding nested lists.</p>
<p>But why does it actually do what it does?</p>
<p>I would have assumed that the statement <code>my_list[1:2] = my_list[1]</code> would do one of the following:</p>
<ul>
<li>simply put <code>[2, 3, 4]</code> into the second position in the list (where it already is)</li>
<li>give some kind of "too many values to unpack" error, from trying to put three values (namely 2,3,4) into a container of only length 1 (namely <code>my_list[1:2]</code>). (Repeating the above with a Numpy array instead of a list results in a similar error.)</li>
</ul>
<p>Other questions (e.g. <a href="https://stackoverflow.com/questions/10623302/how-assignment-works-with-python-list-slice">How assignment works with python list slice</a>) tend to not pay much attention to the discrepancy between the size of the slice to be replaced, and the size of the items you're replacing it with. (Let alone explaining why it works the way it does.)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="noreferrer">Slice assignment</a> replaces the specified part of the list with the iterable on the right-hand side, which may have a different length than the slice. Taking the question at face value, the reason why this is so is because it's convenient.</p>
<p>You are not really assigning to the slice, i.e. Python doesn't produce a slice object that contains the specified values from the list and then changes these values. One reason that wouldn't work is that slicing returns a new list, so this operation wouldn't change the original list.</p>
<p>Also see <a href="https://stackoverflow.com/questions/10623302/how-assignment-works-with-python-list-slice">this question</a>, which emphasizes that slicing and slice assignment are totally different.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the relevant bit from the <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">Python Language Reference</a></p>
<blockquote>
<p>If the target is a slicing: The primary expression in the reference is
  evaluated. It should yield a mutable sequence object (such as a list).
  The assigned object should be a sequence object of the same type.
  Next, the lower and upper bound expressions are evaluated, insofar
  they are present; defaults are zero and the sequence’s length. The
  bounds should evaluate to integers. If either bound is negative, the
  sequence’s length is added to it. The resulting bounds are clipped to
  lie between zero and the sequence’s length, inclusive. Finally, the
  sequence object is asked to replace the slice with the items of the
  assigned sequence. The length of the slice may be different from the
  length of the assigned sequence, thus changing the length of the
  target sequence, if the target sequence allows it.</p>
</blockquote>
<p>This behavior makes sense qualitatively because when you slice a list you get a sub <em>list</em> so replacing that with another list shouldn't add a level of nesting. Allowing it to change the length of the list is a design choice. Other choices are possible as your <code>numpy</code> example demonstrates.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short Answer:</strong> </p>
<blockquote>
<p><strong><code>my_list[1:2] = my_list[1]</code> will replaced the content from 1st index to 2nd index of <code>my_list</code> with the content of present in 1st index of
  <code>my_list</code></strong></p>
</blockquote>
<p><strong>Explanation:</strong> </p>
<p>Let's see two slicing operations, very similar but totally distinct</p>
<ol>
<li><p>This <strong>creates the copy of list and stores it the variable</strong></p>
<pre><code>some_variable = some_list[2:5]
</code></pre></li>
<li><p>This <strong>replaces the content of the list <em>inplace</em></strong>, which permits changing the length of the list too.</p>
<pre><code>some_list[2:5] = [1, 2, 3, 4]
</code></pre></li>
</ol>
<p>When you use assignment operator <code>=</code>, it invokes a <a href="https://docs.python.org/2/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer"><code>__setitem__</code></a> function. Our focus here is the case 2 above. As per the <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">Python's Assignment Statement</a> document:</p>
<blockquote>
<p><strong>If the target is a slicing</strong>: The primary expression in the reference is
  evaluated. It should yield a mutable sequence object (such as a list).
  The assigned object should be a sequence object of the same type.
  Next, the lower and upper bound expressions are evaluated, insofar
  they are present; defaults are zero and the sequence’s length. The
  bounds should evaluate to integers. If either bound is negative, the
  sequence’s length is added to it. The resulting bounds are clipped to
  lie between zero and the sequence’s length, inclusive. Finally, <strong>the
  sequence object is asked to replace the slice with the items of the
  assigned sequence. The length of the slice may be different from the
  length of the assigned sequence, thus changing the length of the
  target sequence</strong>, if the target sequence allows it.</p>
</blockquote>
<p>In our case <code>my_list[1:2] = my_list[1]</code>, python will also call <a href="https://docs.python.org/2/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer"><code>__setitem__</code></a> as:</p>
<pre><code>my_list.__setitem__(slice(1,2,None), [2, 3, 4])
</code></pre>
<p>Refer <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><strong><code>slice</code></strong></a> document to know what it does.</p>
<p>So, when you did <code>my_list[1:2] = my_list[1]</code>, you replaced the content from 1st index to 2nd index of <code>my_list</code> with the content of present in 1st index of <code>my_list</code> i.e. <code>[2, 3, 4]</code>.</p>
<hr/>
<p>I think now we can answer why your assumptions are incorrect:</p>
<blockquote>
<ul>
<li>put [2, 3, 4] into the second position in the list (where it already is)</li>
</ul>
</blockquote>
<p>No. Because <code>__setitem__</code> is not called on the index but on the <code>slice</code> of the indices which you passed.</p>
<blockquote>
<ul>
<li>give some kind of "too many values to unpack" error, from trying to put three values (namely 2,3,4) into a container of only length 1 (namely my_list[1:2]).</li>
</ul>
</blockquote>
<p>Again No. Because the range of your indices creating your container is replaced with new set of values.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are doing is <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">slice assignment</a>.</p>
<blockquote>
<p>Assignment to slices is also possible, and this can even change the size of the list or clear it entirely</p>
</blockquote>
<p><code>my_list[1:2] = my_list[1]</code></p>
<p>This replaces the slice of <code>my_list</code> with the contents of <code>my_list[1]</code>.</p>
<p>By specifying <code>my_list[1:2]</code> on the left side of the assignment operator <code>=</code>, you are telling Python you want to use slice assignment.</p>
<p><code>my_list[1:2] = my_list[1]</code> is equivalent to <code>my_list.__setitem__(slice(1, 2, None), my_list[1])</code></p>
<p>In <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer">slice</a>(1, 2, None), <code>1</code> is start, <code>2</code> is stop, and <code>None</code> is step and is optional.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are trying here is called <em>Slice Assingnment</em>. In python it is possible to assign an iterable(<code>my_list[1]</code> in your case) to a slice of another iterable(<code>my_list[0:1]</code> in your case). Lets walk through some examples to understand what it really means:</p>
<pre><code> &gt;&gt;&gt; l = [1,2,3,4,5]
 &gt;&gt;&gt; b = [6,7,8]
 &gt;&gt;&gt; l[0:3] = b
 &gt;&gt;&gt; l
 &gt;&gt;&gt; [6, 7, 8, 4, 5]
</code></pre>
<p>So what happened here is the portion of list <code>l</code> for <code>0,1,2</code> indices is
which covers elements <code>1,2,3</code>is replaced by elements of list <code>b</code> <code>6,7,8</code>. However in this case size of slice and replaced elements happens to be equal by chance.</p>
<p>So what happens when slice size and iterable to be replaced are not equal</p>
<pre><code>&gt;&gt;&gt; l = [1,2,3,4,5]
&gt;&gt;&gt; b = [6,7,8]
&gt;&gt;&gt; l[0:4] = b
&gt;&gt;&gt; l 
&gt;&gt;&gt; [6,7,8,5]
</code></pre>
<p>Notice that this operation didn't produce any error, instead, it just copied whatever elements are available with the entire sliced portion. In this case, sliced elements are <code>1,2,3,4</code> replaced by <code>6,7,8</code></p>
<p>In the previous example iterable to be replaced was smaller. What happens if slice portion is smaller</p>
<pre><code>&gt;&gt;&gt; l = [1,2,3,4,5]
&gt;&gt;&gt; b = [6,7,8]
&gt;&gt;&gt; l[0:1] = b
&gt;&gt;&gt; l 
&gt;&gt;&gt; [6,7,8,2,3,4,5]
</code></pre>
<p>So now we can see that only first element is replaced by entire iterable <code>b</code>. </p>
<p>You can also use this behaviour to remove a specific portion of the list ( Which I find convenient in some situations ).</p>
<pre><code> &gt;&gt;&gt; l = [1,2,3,4,5]
 &gt;&gt;&gt; l[0:2] = []
 &gt;&gt;&gt; l 
 &gt;&gt;&gt; [3,4,5]
</code></pre>
<p>First two elements are removed very conveniently here. </p>
<p>So the example in your question is similar to the examples I posted above, except that in your case there is an additional step of <em>unpacking list values</em>. Unpacking list value happens every time when you assign list to another list. A short example</p>
<pre><code>&gt;&gt;&gt; l = [[1]]
&gt;&gt;&gt; a = []
&gt;&gt;&gt; a = l[0]
&gt;&gt;&gt; a
&gt;&gt;&gt; [1]
</code></pre>
<p>Your example now:</p>
<pre><code>#Replace the slice [0:1] with my_list[1] perform unpacking list values as well
&gt;&gt;&gt; my_list[1:2] = my_list[1]  
&gt;&gt;&gt; [1,2,3,4,5]
</code></pre>
<p>Also note that slice assignment is only possible if you assign iterable to a slice. If you try to assign an int or something that is not an iterable to a slice python will throw an error.</p>
<pre><code>&gt;&gt;&gt; l = [1,2,3,4,5]
&gt;&gt;&gt; b = [6,7,8]
&gt;&gt;&gt; l[0:1] = b[1]
&gt;&gt;&gt; Traceback (most recent call last):
    File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 TypeError: can only assign an iterable
</code></pre>
<p>That's why in your case <code>my_list[1]</code> don't raise an error since it is an iterable.</p>
</div>
<div class="post-text" itemprop="text">
<p>That what you are doing is insert an element through slicing. I will explain everything by parts. More than an inserting it could be interpreted as adding an item to your list after slicing target list in a range desired. Now to explain every line in detail:</p>
<pre><code>my_list[1:2]
</code></pre>
<p>That part is like saying to Python; "I want to get the values (slice) from index 1 to the index before 2 (excluding 2, I will explain with another example later on)". After that you assign a value to those values:</p>
<pre><code>my_list[1:2] = my_list[1] #The same as my_list[1:2] = [2,3,4]
</code></pre>
<p>Now that you know what the first part does, next it is going to add the item at the right side of the '=' operator so you could interpret it like this; "I want to slice from index 1 to everything before 2 (again, excluding index 2) and then add my list [2,3,4]". Now here comes another examples so you understand even better I hope.</p>
<pre><code>problemList = [1, [2, 3, 4], 5]
problemList[1:2] = problemList[1] #The same as problemList[1:2] = [2,3,4]
analogProblemL = [1] + [2,3,4] + [5] #Output : [1,2,3,4,5]

insertList = [12,13,14]
myList = [1, [2, 3, 4], 5,6,7,8,9]
myList[3:6] = insertList
analogFstList = [1,[2,3,4] ,5] + insertList + [9] #Output : [1,[2,3,4],5,12,13,14,9]

myScnList = [1, [2, 3, 4], 5]
myScnList[1:3] = [2,3,4]
analogScnList = [1] + [2,3,4] + [5] #Output : [1,2,3,4,5]
</code></pre>
<p>The next lines will be like if it was an animation frames so it's easier to interpret:</p>
<pre><code>[1,2,3,4,5] #List before line of code: myList[1:3] = [12,13,14]
[1,|2,3|,4,5] #The moment where you slice the list with: myList[1:3]. Please notice that the characters used '|' are for representing the slice.
[1] + [12,13,14] + [4,5] #After assigning what the slice should be changed for. It's like excracting from the whole list the values [2,3] and changing it for [12,13,14].
[1,12,13,14,4,5] #Final list after running the code.
</code></pre>
<p>Some references used for this answer:
<a href="http://effbot.org/zone/python-list.htm" rel="nofollow noreferrer">http://effbot.org/zone/python-list.htm</a>
<a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">Understanding Python's slice notation</a>
<a href="https://stackoverflow.com/questions/10623302/how-assignment-works-with-python-list-slice">How assignment works with python list slice</a></p>
<p>Hope it was useful for you.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_list[1:2] = my_list[1], Its simply a inserting statement, it translate to
</code></pre>
<p>We are just trying to some element between my_list1from my_list[1] to my_list2. Now its very similar to list.extend(list1), just we are inserting between a list instead at the end</p>
</div>
<span class="comment-copy"><code>my_list = [1,2,3]; my_list[1:2] = [9,8,7]</code> =&gt; <code>[1, 9, 8, 7,3]</code>  I thought it's usual behaviour of python while replacing slice with list</span>
<span class="comment-copy">Use this <code>my_list[1:2] = [my_list[1]]</code></span>
<span class="comment-copy">I edited one of the answers there to explicitly mention that you can use different-sized lists on both sides of the assignment. <i>"Let alone explaining why it works the way it does."</i> What kind of answer do you expect?  <a href="https://stackoverflow.com/a/10623352/2301450">stackoverflow.com/a/10623352/2301450</a> and <a href="https://stackoverflow.com/a/35632876/2301450">stackoverflow.com/a/35632876/2301450</a> are both correct.</span>
<span class="comment-copy">I was hoping for an answer detailing a mechanic of the language that I misunderstood, or wasn't familiar with (an underlying reason for why this should work, like "containers are implemented as double-linked lists, so setting a single element to multiple elements automatically works because blah blah"). The real answer turns out to be a very mundane "because we made this work magically for lists, but nothing else". (I was afraid this would be the answer when I noticed that it doesn't work for Numpy arrays.)</span>
<span class="comment-copy">This answer is similar to some of the others, except for one sentence, which I think is very important: "the reason why this is so is because it's convenient". List slice assignment was made specifically to have this behaviour, not necessarily because it's logical (I think it isn't logical at all) but because it's convenient. Thanks!</span>
<span class="comment-copy">This merely re-words what the statement does, not how it actually works under the hood.</span>
