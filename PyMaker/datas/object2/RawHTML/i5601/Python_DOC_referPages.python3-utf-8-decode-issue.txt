<div class="post-text" itemprop="text">
<p>The following code runs fine with Python3 on my Windows machine and prints the character 'é':</p>
<pre><code>data = b"\xc3\xa9"

print(data.decode('utf-8'))
</code></pre>
<p>However, running the same on an Ubuntu based docker container results in :</p>
<pre><code>UnicodeEncodeError: 'ascii' codec can't encode character '\xe9' in position 0: ordinal not in range(128)
</code></pre>
<p>Is there anything that I have to install to enable utf-8 decoding ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is with the <code>print()</code> expression, not with the <code>decode()</code> method.
If you look closely, the raised exception is a Unicode<strong>En</strong>codeError, not a -<strong>De</strong>codeError.</p>
<p>Whenever you use the <code>print()</code> function, Python converts its arguments to a <code>str</code> and subsequently encodes the result to <code>bytes</code>, which are sent to the terminal (or whatever Python is run in).
The codec which is used for encoding (eg. UTF-8 or ASCII) depends on the environment.
In an ideal case,</p>
<ul>
<li>the codec which Python uses is compatible with the one which the terminal expects, so the characters are displayed correctly (otherwise you get mojibake like "Ã©" instead of "é");</li>
<li>the codec used covers a range of characters that is sufficient for your needs (such as UTF-8 or UTF-16, which contain all characters).</li>
</ul>
<p>In your case, the second condition isn't met for the Linux docker you mention: the encoding used is ASCII, which only supports characters found on an old English typewriter.
These are a few options to address this problem:</p>
<ul>
<li>Set environment variables: on Linux, Python's encoding defaults depend on this (at least partially). In my experience, this is a bit of a trial and error; setting <code>LC_ALL</code> to something containing "UTF-8" worked for me once. You'll have to put them in start-up script for the shell your terminal runs, eg. <em>.bashrc</em>.</li>
<li><p>Re-encode STDOUT, like so:</p>
<pre><code>sys.stdout = open(sys.stdout.buffer.fileno(), 'w', encoding='utf8')
</code></pre>
<p>The encoding used has to match the one of the terminal.</p></li>
<li>Encode the strings yourself and send them to the binary buffer underlying <code>sys.stdout</code>, eg. <code>sys.stdout.buffer.write("é".encode('utf8'))</code>. This is of course much more boilerplate than <code>print("é")</code>. Again, the encoding used has to match the one of the terminal.</li>
<li>Avoid <code>print()</code> altogether. Use <code>open(fn, encoding=...)</code> for output, the logging module for progress info – depending on how interactive your script is, this might be worthwhile (admittedly, you'll probably face the same encoding problem when writing to STDERR with the logging module).</li>
</ul>
<p>There might be other options, but I doubt that there are nicer ones.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems ubuntu - depending on version - uses one encoding or another as default, and it may vary between shell and python as well. Adopted from <a href="http://%20https://stackoverflow.com/questions/2276200/changing-default-encoding-of-python" rel="nofollow noreferrer">this posting</a> and also <a href="http://www.ianbicking.org/illusive-setdefaultencoding.html" rel="nofollow noreferrer">this blog</a>:</p>
<p>Thus the recommended way seems to be to tell your python instance to use <code>utf-8</code> as default encoding:</p>
<p>Set your default encoding of python source files via environment variable:</p>
<pre><code>export PYTHONIOENCODING=utf8
</code></pre>
<p>Also, in your source files you can state the encoding you prefer to be used explicitly, so it should work irrespective of environment setting (see <a href="https://stackoverflow.com/questions/728891/correct-way-to-define-python-source-code-encoding">this question + answer</a>, <a href="https://docs.python.org/3/reference/lexical_analysis.html#encoding-declarations" rel="nofollow noreferrer">python docs</a> and <a href="https://www.python.org/dev/peps/pep-0263/" rel="nofollow noreferrer">PEP 263</a>:</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
....
</code></pre>
<p>Concerning the interpretation of encoding of files read by python, you can specify it explicitly in the open command</p>
<pre><code>with open(fname, "rt", encoding="utf-8") as f:
    ...
</code></pre>
<p>and there's a more hackish way with some side effects, but saves you to explicitly specify it each time</p>
<pre><code>import sys
# sys.setdefaultencoding() does not exist, here!
reload(sys)  # Reload does the trick!
sys.setdefaultencoding('UTF8')
</code></pre>
<p>Please read the warnings about this hack in the <a href="http://%20https://stackoverflow.com/questions/2276200/changing-default-encoding-of-python" rel="nofollow noreferrer">related answer</a> and comments.</p>
</div>
<span class="comment-copy">Specifying to decode the given string as 'utf-8' should work regardless. I get the error you quote only when I explicitly specify 'ascii' as codec. Your error also hints that ascii is being used. I know of no linux which uses anything else than utf-8 as default for many years....</span>
<span class="comment-copy">@planetmaker: There are definitely some "minimal" setups for Linux that default to <code>LANG=C</code>, where the <code>print</code>, not the <code>decode</code>, would have the problem. Explicitly changing to <code>LANG=en_US.utf-8</code> in the relevant shell initialization file (and logging out and then back in to make sure the locale is set properly everywhere) should fix it.</span>
<span class="comment-copy">@ShadowRanger it doesn't, on Ubuntu Xenial, at least. I have had locale lv_LV.Utf-8 from very start always, but python defaults to ascii. Only found out recently when tried to enter unicode in CLI. In files always had encoding specified via comment.</span>
<span class="comment-copy">Don't know why this was downvoted, this is exactly the case I had recently (Ubuntu shell using utf8, but python command line interpreter using ascii). Just note that in python code (files) you don't need to use sys, just specify encoding via comment at start of file.</span>
<span class="comment-copy">Thanks, @Gnudiff - I added that way to the answer</span>
<span class="comment-copy">Please note that the <code># coding: utf8</code> line in the source header and <code>sys.setdefaultencoding</code> do different things. The first is about how the Python interpreter deals with string literals in the source code. The second one affects the default encoding when you <code>open()</code> a file without specifying a codec explicitly. You should also be aware that the <code>setdefaultencoding</code> tricks is a hack and can have bad side effects (I forgot what specifically, because I never use that). It's better to always use <code>open(fn, encoding=...)</code>.</span>
<span class="comment-copy">@lenz of course... should have added that, too. And amended as well. Thanks!</span>
