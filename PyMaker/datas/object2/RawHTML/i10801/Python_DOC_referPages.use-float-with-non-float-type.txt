<div class="post-text" itemprop="text">
<p>Per my <a href="https://stackoverflow.com/q/38533476/3928184">question from earlier today</a> (which was wonderfully answered, and I appreciate everyone's insight), I've <a href="https://github.com/bjd2385/fftconvolve/blob/master/operalist.py" rel="nofollow noreferrer">extended that small class</a> for the heck of it to almost all the operations we'd normally perform upon integers and floats.</p>
<p>Now I'm not certain how to convert all the entries to floats <em>without</em> <a href="https://stackoverflow.com/questions/1614236/in-python-how-to-i-convert-all-items-in-a-list-to-floats">list comprehensions</a>.</p>
<p>For instance, right now I have the following:</p>
<pre><code>def __float__(self):
    return operalist(float(i) for i in self)
</code></pre>
<p>But when I call the following sequence of commands:</p>
<pre><code>&gt;&gt;&gt; from operalist import operalist
&gt;&gt;&gt; X = operalist(range(1, 11))
&gt;&gt;&gt; X
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; float(X)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __float__ returned non-float (type operalist)
</code></pre>
<p>What I would rather see is what we'd get by using a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [float(i) for i in X]
[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
</code></pre>
<p>How do I add a <code>__float__</code> method, since it doesn't appear to be native to lists? Unless it's not a good idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, you can't. I can't find any precise wording on this, but <a href="https://docs.python.org/3/reference/datamodel.html#object.__complex__" rel="nofollow">the documentation states</a>:</p>
<blockquote>
<p>Called to implement the built-in functions complex(), int(), float()
  and round(). Should return a value of the appropriate type.</p>
</blockquote>
<p>I read that as that <code>__float__()</code> should return a <code>float</code>, since <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow"><code>float()</code></a>:</p>
<blockquote>
<p>[r]eturn[s] a floating point number constructed from a number or string x.</p>
</blockquote>
<hr/>
<p>For comparison, numpy also doesn't do this. Instead, it has a method <code>astype(&lt;type&gt;)</code> to its <code>ndarray</code> that converts to the specific <code>&lt;type&gt;</code>.<br/>
That confirms to me that this indeed cannot be done.</p>
</div>
<span class="comment-copy">The exception you're getting suggests that <code>__float__</code> is expected to return a single float value and that doing something else is not acceptable. See <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__float__#object.__complex__" rel="nofollow noreferrer">the docs</a>.</span>
<span class="comment-copy">Looking at your gist, and the (as yet empty) <code>multioperalist</code> class: I hope you're not trying to re-invent numpy, but are doing this as an exercise.</span>
<span class="comment-copy">@Evert I'm not, don't worry. It's just to understand how all of this stuff works</span>
<span class="comment-copy">@Evert Even if much of the same functionality were the same (again that's not my goal, it's just to understand how magic methods work and may be overridden, etc.), why should everything be a NumPy array? Or is it just for the readibility of others, since it's the standard for array manipulation</span>
<span class="comment-copy">Correct: NumPy's optimized and very well tested. That's why I asked. Of course, there'll always be use for lists. And it's definitely useful as practice to mimic something like a numpy array. In the end though, there are often better (tested) solutions out there than one's own crafted solutions (though it sometimes requires rethinking and recoding your code. E.g., numpy arrays don't have a simple <code>append()</code> method). Enjoy.</span>
<span class="comment-copy">Okay, this makes sense. And further, for the record, I'm definitely <i>not</i> trying to re-create NumPy lol. It's just cool, nothing more</span>
