<div class="post-text" itemprop="text">
<p>I need to implement an <code>atexit</code> Python function that would get the last error object and check for it's type. If the type of python error corresponds to PHP's <code>E_ERROR</code> I should save the error's output to a file. </p>
<p>The PHP code I'm porting looks like so:</p>
<pre><code>register_shutdown_function( "fatal_handler" );
function fatal_handler() {
  $error = error_get_last();
    if ($error != null &amp;&amp; $error['type'] === E_ERROR)
        echo  "recordFatalError: {$error['message']}\n";
}
</code></pre>
<p>My code snap are as follows:</p>
<pre><code>def fatal_handler():
   # How to get last error object?

atexit.register(fatal_handler)
</code></pre>
<p>I would be glad if somebody explained me how can I get the necessary functionality with python.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://docs.python.org/3/library/sys.html#sys.last_value" rel="nofollow noreferrer"><code>sys.last_value</code></a> for this:</p>
<pre><code>import atexit
import sys

def fatal_handler():
    try:
        e = sys.last_value
    except AttributeError: # no exception prior to execution of fatal_handler
        return

atexit.register(fatal_handler)
</code></pre>
<p>You may choose to use <code>getattr(sys, 'last_value', None)</code> in place of the <a href="https://stackoverflow.com/q/11360858/2301450">EAFP approach</a> above. It returns <code>None</code> if <code>sys.last_value</code> isn't available.</p>
<p>Alternatively, if there's just one function you want to run only when the interpreter shutdown is caused by an exception, you could use <a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow noreferrer"><code>sys.excepthook</code></a>:</p>
<pre><code>import sys

def fatal_handler(type, value, traceback):
   e = value

sys.excepthook = fatal_handler
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When an exception is raised and uncaught, the interpreter calls <a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow">sys.excepthook</a> with info about the exception. The default function prints out a given traceback and exception to sys.stderr. You can replace this function with a function which save this data. Later you can use this data in your atexit handler:</p>
<pre><code>import atexit
import sys

class LastException:
    value     = None
    type      = None
    trackback = None

    @staticmethod
    def excepthook(type,value,trackback):
        LastException.type      = type
        LastException.value     = value
        LastException.trackback = trackback

    @staticmethod
    def register():
        sys.excepthook = LastException.excepthook

def fatal_handler():
   print('{0} {1}'.format( LastException.type, LastException.value))

LastException.register()
atexit.register(fatal_handler)

raise BaseException("I am an error") 
# should print: &lt;class 'BaseException'&gt; I am an error
</code></pre>
</div>
<span class="comment-copy">The problem with this approach is that <code>sys.last_value</code> can be referenced only if error has happened while it's not always true with <code>atexit</code> function. Also I need also a type of the exception not only the value (<code>sys.last_type</code>).</span>
<span class="comment-copy">@ddnomad it's trivial to find the type of any object e.g. using <code>type</code>. There's also <code>sys.last_type</code> available.</span>
<span class="comment-copy">yet I'm interested in other possible ways of avoiding <code>try/except</code> blocks to check for these values to be present.</span>
<span class="comment-copy">@ddnomad <a href="http://stackoverflow.com/q/11360858/2301450">What is the EAFP principle in Python?</a></span>
<span class="comment-copy">thank you for your answer!</span>
