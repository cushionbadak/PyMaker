<div class="post-text" itemprop="text">
<p>I need a class that behaves like a string but also takes additional <code>kwargs</code>. Therefor I subclass <code>str</code>: </p>
<pre><code>class Child(str):

    def __init__(self, x, **kwargs):
        # some code ...
        pass


inst = Child('a', y=2)
print(inst)
</code></pre>
<p>This however raises: </p>
<pre><code>Traceback (most recent call last):
  File "/home/user1/Project/exp1.py", line 8, in &lt;module&gt;
    inst = Child('a', y=2)
TypeError: 'y' is an invalid keyword argument for this function
</code></pre>
<p>Which is rather strange, since the code below works without any error:</p>
<pre><code>class Child(object):

    def __init__(self, x, **kwargs):
        # some code ...
        pass


inst = Child('a', y=2)
</code></pre>
<hr/>
<p><strong>Questions:</strong> </p>
<ul>
<li>Why do I get different behavior when trying to subclass <code>str</code>, <code>int</code>, <code>float</code>, <code>tuple</code> etc compared to other classes like <code>object</code>, <code>list</code>, <code>dict</code> etc?</li>
<li>How can I create a class that behaves like a string but has
additional kwargs?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You need to override <code>__new__</code> in this case, not <code>__init__</code>:</p>
<pre><code>&gt;&gt;&gt; class Child(str):
...    def __new__(cls, s, **kwargs):
...       inst = str.__new__(cls, s)
...       inst.__dict__.update(kwargs)
...       return inst
...
&gt;&gt;&gt; c = Child("foo")
&gt;&gt;&gt; c.upper()
'FOO'
&gt;&gt;&gt; c = Child("foo", y="banana")
&gt;&gt;&gt; c.upper()
'FOO'
&gt;&gt;&gt; c.y
'banana'
&gt;&gt;&gt;
</code></pre>
<p>See <a href="https://docs.python.org/3/reference/datamodel.html#basic-customization" rel="nofollow">here</a> for the answer to why overriding <code>__init__</code> doesn't work when subclassing immutable types like <code>str</code>, <code>int</code>, and <code>float</code>: </p>
<blockquote>
<p><code>__new__()</code> is intended mainly to allow subclasses of immutable types <strong>(like int, str, or tuple)</strong> to customize instance creation. It is also
  commonly overridden in custom metaclasses in order to customize class
  creation.</p>
</blockquote>
</div>
<span class="comment-copy">maybe something about the <code>__str__</code> or <code>__unicode__</code> methods that needs to be overridden</span>
