<div class="post-text" itemprop="text">
<p>I have the following array:</p>
<pre><code>a = [0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0]
</code></pre>
<p>Each time I have a '1' or a series of them(consecutive), this is one event. I need to get, in Python, how many events my array has. So in this case we will have 5 events (that is 5 times 1 or sequences of it appears). I need to count such events in order to to get:</p>
<pre><code>b = [5]
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> (it does exactly what you want - groups consecutive elements) and count all groups which starts with <code>1</code>:</p>
<pre><code>In [1]: from itertools import groupby

In [2]: a = [0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0]

In [3]: len([k for k, _ in groupby(a) if k == 1])
Out[3]: 5
</code></pre>
<hr/>
<blockquote>
<p>what if I wanted to add a condition that an event is given as long as
  there are is 2 or more '0's in between.</p>
</blockquote>
<p>This could be done using <code>groupby</code> and custom <code>key</code> function:</p>
<pre><code>from itertools import groupby


class GrouperFn:
    def __init__(self):
        self.prev = None

    def __call__(self, n):
        assert n is not None, 'n must not be None'

        if self.prev is None:
            self.prev = n
            return n

        if self.prev == 1:
            self.prev = n
            return 1

        self.prev = n
        return n


def count_events(events):
    return len([k for k, _ in groupby(events, GrouperFn()) if k == 1])


def run_tests(tests):
    for e, a in tests:
        c = count_events(e)
        assert c == a, 'failed for {}, expected {}, given {}'.format(e, a, c)

    print('All tests passed')


def main():
    run_tests([
        ([0, 1, 1, 1, 0], 1),
        ([], 0),
        ([1], 1),
        ([0], 0),
        ([0, 0, 0], 0),
        ([1, 1, 0, 1, 1], 1),
        ([0, 1, 1, 0, 1, 1, 0], 1),
        ([1, 0, 1, 1, 0, 1, 1, 0, 0, 1], 2),
        ([1, 1, 0, 0, 1, 1], 2),
        ([0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], 4)
    ])


if __name__ == "__main__":
    main()
</code></pre>
<p>The idea is pretty simple - when a <code>0</code> goes after a group of <code>1</code>'s, it could be a part of the group and therefore should be included in that group. The next event either continues the group (if the event is <code>1</code>) or splits it (if the event is <code>0</code>)</p>
<p><em>Note, that presented approach will work only when you need to <strong>count</strong> a number of events, since it splits <code>[1, 1, 0, 0]</code> as <code>[[1, 1, 0], [0]]</code></em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Math way (be careful with an empty array):</p>
<pre><code>a = [0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0]
events = (a[0] + a[-1] + sum(a[i] != a[i-1] for i in range(1, len(a)))) / 2
print events
</code></pre>
<p>I like to think this is efficient :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>a = [0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0]

flag = 0
cnt = 0
for j in (a):
    if( j == 1):
        if(flag == 0):
            cnt += 1
        flag = 1
    elif (j == 0):
        flag = 0


print cnt                   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One more:</p>
<pre><code>sum([(a[i] - a[i-1])&gt;0 for i in range(1, len(a))])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def num_events(list):
    total = 0
    in_event = 0
    for current in list:
        if current and not in_event:
            total += 1
        in_event = current
    return total
</code></pre>
<p>This function iterates over the list from the left side and every time it encounters a 1 immediately after a 0, it increments the counter. In other words, it adds 1 to the total count at the start of each event.</p>
</div>
<div class="post-text" itemprop="text">
<p>Me being a simpleton ;-)</p>
<pre><code>def get_number_of_events(event_list):
    num_of_events = 0
    for index, value in enumerate(event_list):
        if 0 in (value, index):
            continue
        elif event_list[index-1] == 0:
            num_of_events += 1
    return num_of_events
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To replace multiple occurrence with single occurrence, append each item in a list if only the last appended item is not equal to the current one, and do the count.</p>
<pre><code>def count_series(seq):
    seq = iter(seq)
    result = [next(seq, None)]
    for item in seq:
        if result[-1] != item:
            result.append(item)
    return result

a = [0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0]

count_series(a).count(1)
5
</code></pre>
</div>
<span class="comment-copy">Should the 5 be wrapped in a list?</span>
<span class="comment-copy">not necessary,  just need to get that number</span>
<span class="comment-copy">many thanks! this works perfectly - and what if I wanted to add a condition that an event is given as long as there are is 2 or more '0's in between. That is, in the example above, when we have 1,1,0,1,1,1 this counts as one event. So the total would be just 4</span>
<span class="comment-copy">Hi soon, Thanks! could you please explain more the code above? Also, when I run it, it just returns 'all tests passed'</span>
<span class="comment-copy">Sure, a little bit later. For the second question - all you need is to use the count_events function, passing the events array as the first parameter</span>
<span class="comment-copy">@hpnk85, I've added explanations for the <code>GrouperFn</code> algorithm</span>
<span class="comment-copy">many thanks - just one question, where do I define my array (the one to be assessed)?</span>
<span class="comment-copy">Great thinking. However, this is not efficient as we will be iterating the list twice :-)</span>
<span class="comment-copy">@thiruvenkadam Hmm... Are you sure?</span>
