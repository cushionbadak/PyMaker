<div class="post-text" itemprop="text">
<p>I have set of inbuilt functions in 'pythonfile1.py' located at '/Users/testuser/Documents', the file contains</p>
<pre><code>import os
import sys
import time
</code></pre>
<p>Now i want to import 'pythonfile1.py' to 'pythonfile2.py', which is located at '/Users/testuser/Documents/execute'
I have tried with my following code and it didn't work:</p>
<pre><code>import sys
sys.path[0:0] = '/Users/testuser/Documents'
import pythonfile1.py
print os.getcwd()
</code></pre>
<p>I want it to print the current working directory </p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is a bit unclear. Basically, there are two things 'wrong'. </p>
<ul>
<li><p>First, your import statement is broken:</p>
<pre><code>import pythonfile1.py
</code></pre>
<p>This specifies a <strong>file</strong> name, not a <strong>module</strong> name - modules don't contain dots and extensions. This is important because dots indicate <em>sub</em>-modules of packages. Your statement is trying to import module <code>py</code> from package <code>pythonfile1</code>. Change it to</p>
<pre><code>import pythonfile1
</code></pre></li>
<li><p>Second, there's no need to fetch builtins from another module. You can just import them again.</p>
<pre><code># pythonfile1
import os
print 'pythonfile1', os.getcwd()  # assuming py2 syntax

# pythonfile2
import os
print 'pythonfile2', os.getcwd()
</code></pre>
<p>If you <em>really</em> want to use <code>os</code> from <code>pythonfile1</code>, you can do so:</p>
<pre><code># pythonfile2
import os
import pythonfile1
print 'pythonfile2', os.getcwd()
print 'pythonfile1-&gt;2', pythonfile1.os.getcwd()
</code></pre>
<p>Note that <code>os</code> and <code>pythonfile1.os</code> in <code>pythonfile2</code> are the exact same module.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>if you want to import stuff from another file, you should use python modules.</p>
<p>If you will create file named <strong>init</strong>.py then the execute folder becomes a module.
After that you can use</p>
<pre><code>from .pythonfile1 import function_name
</code></pre>
<p>or you can use</p>
<pre><code>from .pythonfile1 import * 
</code></pre>
<p>which imports all, but better solution is name everything you want to use explicitly</p>
<p>you can find more about modules in <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow">documentation</a></p>
</div>
<span class="comment-copy">Try printing sys.path after you modify it.</span>
<span class="comment-copy">For a start (may not be all) change 'import pythonfile1.py' to 'from pythonfile1 import *'</span>
<span class="comment-copy">Please include the error you receive when running the code! Your import statements is wrong...</span>
<span class="comment-copy">Also, <a href="http://xyproblem.info" rel="nofollow noreferrer">what are you trying to achieve</a>? You could simply import <code>os</code> directly to call <code>os.getcwd()</code>, there's no effect from importing <code>pythonfile1</code>.</span>
<span class="comment-copy">The statement <code>from .pythonfile1 import function_name</code> won't work in his <code>pythonfile2</code>, since it's in a subdirectory of execute. It should be <code>from execute.pythonfile1 import function_name</code> instead. But I'm suspecting turning <code>execute</code> into a package might be what he's up to indeed.</span>
