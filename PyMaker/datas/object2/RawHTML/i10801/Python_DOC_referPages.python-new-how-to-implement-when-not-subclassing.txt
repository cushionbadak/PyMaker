<div class="post-text" itemprop="text">
<p><strong>Part A</strong></p>
<p>I want to do some checking on arguments to a class instantiation and possibly return <code>None</code> if it doesn't make sense to even create the object.</p>
<p>I've read the docs but I don't understand <strong>what to return</strong> in this case.</p>
<pre><code>class MyClass:
    def __new__(cls, Param):
        if Param == 5:
            return None
        else:
            # What should 'X' be?
            return X
</code></pre>
<p>What should <code>X</code> be in <code>return X</code>?<br/></p>
<ul>
<li>It cannot be <code>self</code> because the object doesn't exist yet so <code>self</code> is not a valid keyword in this context.</li>
</ul>
<p><strong>Part B</strong></p>
<p>Tied to my question, I don't understand the <strong>need</strong> to have the <code>cls</code> parameter.</p>
<p>If you call the constructor of <code>MyClass</code> - <code>var = MyClass(1)</code> - won't <code>cls</code> always be <code>MyClass</code>?<br/>
How could it be anything else?</p>
<p>According to the docs, <code>cls</code> in <code>object.__new__(cls[, ...])</code> is:</p>
<blockquote>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow">. . .the class of which an instance was requested as its first
  argument.</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>(I'm assuming you are using Python 3 because you provided a link to Python 3 docs)</p>
<p><code>X</code> could be <code>super().__new__(cls)</code>.</p>
<p><code>super()</code> returns the parent class (in this case it is simply <code>object</code>). Most of the times when you are overriding methods you will need to call the parent class's method at some point.</p>
<p>See this example:</p>
<pre><code>class MyClass:
    def __new__(cls, param):
        if param == 5:
            return None
        else:
            return super().__new__(cls)

    def __init__(self, param):
        self.param = param
</code></pre>
<p>And then:</p>
<pre><code>a = MyClass(1)

print(a)
print(a.param)

&gt;&gt; &lt;__main__.MyClass object at 0x00000000038964A8&gt;
1

b = MyClass(5)

print(b)
print(b.param)

&gt;&gt; None
   Traceback (most recent call last):
   File "main.py", line 37, in &lt;module&gt;
   print(b.param)
   AttributeError: 'NoneType' object has no attribute 'param'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just return the instance of cls like this <code>return object.__ new__(cls)</code>. Because every class is subclass of <code>object</code>, you can use that as a object creator for your class. The returnes object is passed as a first argument to the <code>__init__()</code> with the any number of positional argument or any number of keyword argument you passed to new. There you will create instance variable assigning those values.</p>
</div>
<span class="comment-copy">You are most probably better off raising an exception than returning <code>None</code>.</span>
<span class="comment-copy">@DeepSpace noted. But it may make sense to return <code>None</code> in some cases.</span>
<span class="comment-copy">It's ok, as long as you remember that.</span>
<span class="comment-copy">What does <code>super()</code> return?</span>
<span class="comment-copy">I've read <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">the doc on super</a> but I'm hopelessly confused.</span>
<span class="comment-copy">@Adrian <code>super()</code> returns the parent class, in this case <code>object</code>. I assumed  you are using Python 3, is that correct?</span>
<span class="comment-copy">I believe that and it makes sense but I'm trying to find THAT info in the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super()</code> doc</a> and cannot.</span>
<span class="comment-copy"><code>super([type[, object-or-type]])</code> - "Return a proxy object that delegates method calls to a parent or sibling class of type." What does that mean? I can't figure out what "proxy object" means.</span>
<span class="comment-copy">How does that return an instance of <code>cls</code>? <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer">That's the requirement for <code>__init__</code> to be called.</a></span>
<span class="comment-copy">That question was like how python creates an object. For every objcet creation, before __init__() ,__new__() is called. Refer to this page, this may give you a clear idea. <a href="http://eli.thegreenplace.net/2012/04/16/python-object-creation-sequence" rel="nofollow noreferrer">eli.thegreenplace.net/2012/04/16/â€¦</a></span>
<span class="comment-copy">". . .the class of which an instance was requested as its first argument." this means name of the class. if you print the <code>cls</code>, it will print it as <code>__main__.MyClassName</code></span>
