<div class="post-text" itemprop="text">
<p>This question is for Python version 2.7. For example, if I have the following class:</p>
<pre><code>class Example:
    def __init__(self, a, b):
        self.a = a
        self.b = b
object = Example("x", "y")
t = tuple(object)
</code></pre>
<p>After executing the code above I get <code>TypeError: iteration over non-sequence</code> because I can only store a single variable of the object inside the tuple and not the object itself. My question is, is there an easy solution to store class objects in tuples such that <code>tuple = (o1, o2, o3)</code> where <code>o1, o2 and o3</code> are objects?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to call <code>tuple</code> on the object to do this:</p>
<pre><code>obj = Example("x", "y")
t = (obj,) # one item tuple
</code></pre>
<p>Be careful to not use the name <code>object</code> to not shadow the builtin <code>object</code> class.</p>
<p>To create a tuple with more than one item:</p>
<pre><code>t = (obj1, obj2, obj3)
</code></pre>
<p>Note that the <em>parenthesis</em> serve only for grouping and removing them will not have any effect.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem doesn't really have to do with the type of the tuple's elements, but rather with single-item tuples. From the <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses).</p>
</blockquote>
<p>Note the following:</p>
<pre><code>In [1]: a = (1)

In [2]: type(a)
Out[2]: int

In [3]: a = (1, )

In [4]: type(a)
Out[4]: tuple

In [5]: a = 1, 

In [6]: type(a)
Out[6]: tuple
</code></pre>
</div>
<span class="comment-copy">Yes! This seems to work. To access class variables all I have to do is <code>t[0].a</code> for example.</span>
<span class="comment-copy">@Sajid Yes, you can access them like so</span>
<span class="comment-copy">This was not really the problem I had, but this is good information!</span>
<span class="comment-copy">@Sajid :-) padding</span>
