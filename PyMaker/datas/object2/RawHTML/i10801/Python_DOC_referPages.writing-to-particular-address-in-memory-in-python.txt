<div class="post-text" itemprop="text">
<p>I know python is a high level language and manages the memory allocation etc. on its own user/developer doesn't need to worry much unlike other languages like c, c++ etc.</p>
<p>but is there a way through will we can write some value in a particular memory address in python</p>
<p>i know about id() which if hex type casted can give hexadecimal location but how can we write at a location. </p>
</div>
<div class="post-text" itemprop="text">
<p>To begin with, as noted in the comments, it's quite a question why you would want to do such a thing at all. You should consider carefully whether there is any alternative.</p>
<p>Having said that, it is quite easy to do so via extensions. Python itself is built so that it is easy to <a href="https://docs.python.org/3/extending/extending.html" rel="nofollow noreferrer">extend it via C or C++</a>. It's even easier doing it via <a href="http://cython.org/" rel="nofollow noreferrer">Cython</a>.</p>
<p>The following sketches how to build a Python-callable function taking integers <code>p</code> and <code>v</code>. It will write the value <code>v</code> to the memory address whose numeric address is <code>p</code>. </p>
<p><strong>Note</strong> Once again, note, this is a technical answer only. The entire operation, and parts of it, are questionable, and you should consider what you're trying to achieve.</p>
<p>Create a file <code>modify.h</code>, with the content:</p>
<pre><code>void modify(int p, int v);
</code></pre>
<p>Create a file <code>modify.c</code>, with the content:</p>
<pre><code>#include "modify.h"

void modify(int p, int v)
{
    *(int *)(p) = v;
}
</code></pre>
<p>Create a file <code>modify.pyx</code>, with the content:</p>
<pre><code>cdef extern from "modify.h"
     void modify(int p, int v)

def py_modify(p, v):
    modify(p, v)
</code></pre>
<p>Finally, create <code>setup.py</code>, with the content:</p>
<pre><code>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

ext_modules = [Extension(
    name="modify",
    sources=["modify.pyx", "modify.c"])]

setup(
    name = 'modify',
    cmdclass = {'build_ext': build_ext},
    ext_modules = ext_modules,
    # ext_modules = cythonize(ext_modules)  ? not in 0.14.1
    # version=
    # description=
    # author=
    # author_email=
)
</code></pre>
<hr/>
<p>I hope you use this answer for learning purposes only.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python itself does not include any facilities to allow the programmer direct access to memory. This means that sadly (or happily, depending on your outlook) the answer to your question is "no".</p>
</div>
<div class="post-text" itemprop="text">
<p>I can't advise how but I do know (one) why.  Direct writing to registers allows one to set up a particular microcontroller.  For example, configuring ports or peripherals.  This is normally done in C (closer to hardware) but it would be a nice feature if you wanted to use Python for other reasons.</p>
</div>
<span class="comment-copy">You can't write on a hard code memory location even in C, unless you are working on some systems where you have absolute access to memory. <a href="http://stackoverflow.com/questions/11207783/read-and-write-to-a-memory-location" title="read and write to a memory location">stackoverflow.com/questions/11207783/…</a></span>
<span class="comment-copy">Not a duplicate, but see the discussion here: <a href="http://stackoverflow.com/questions/8250625/access-memory-address-in-python" title="access memory address in python">stackoverflow.com/questions/8250625/…</a></span>
<span class="comment-copy">AFAIK, "Python itself" doesn't allow GPU manipulation, or socket messaging. It merely allows doing so through extensions and libraries. So the answer might be strictly correct, but you could apply its rationale to several other questions where Python is used in practice.</span>
