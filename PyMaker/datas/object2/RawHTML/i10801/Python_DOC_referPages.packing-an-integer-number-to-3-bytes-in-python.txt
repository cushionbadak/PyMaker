<div class="post-text" itemprop="text">
<p>With background knowledge of C I want to serialize an integer number to 3 bytes. I searched a lot and found out I should use struct packing. I want something like this:</p>
<pre><code>number = 1195855
buffer = struct.pack("format_string", number)
</code></pre>
<p>Now I expect buffer to be something like <code>['\x12' '\x3F' '\x4F']</code>. Is it also possible to set endianness?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible, using either <code>&gt;</code> or <code>&lt;</code> in your format string:</p>
<pre><code>import struct

number = 1195855

def print_buffer(buffer):
    print(''.join(["%02x" % ord(b) for b in buffer]))   # Python 2
    #print(buffer.hex())                                # Python 3


# Little Endian
buffer = struct.pack("&lt;L", number)
print_buffer(buffer)                # 4f3f1200

# Big Endian
buffer = struct.pack("&gt;L", number)
print_buffer(buffer)                # 00123f4f
</code></pre>
<ul>
<li><a href="https://docs.python.org/2/library/struct.html#byte-order-size-and-alignment" rel="nofollow">2.x docs</a></li>
<li><a href="https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="nofollow">3.x docs</a></li>
</ul>
<p>Note, however, that you're going to have to figure out how you want to get rid of the empty byte in the buffer, since <code>L</code> will give you 4 bytes and you only want 3.</p>
<p>Something like:</p>
<pre><code>buffer = struct.pack("&lt;L", number)
print_buffer(buffer[:3])            # 4f3f12

# Big Endian
buffer = struct.pack("&gt;L", number)
print_buffer(buffer[-3:])           # 123f4f
</code></pre>
<p>would be one way.</p>
</div>
<span class="comment-copy"><code>buffer = struct.pack("&gt;L", number)[1:]</code> will do the trick of dropping the first byte.</span>
<span class="comment-copy"><code>assert [hex(b) for b in struct.pack('&gt;L', 1195855)[1:]] == ['0x12', '0x3f', '0x4f']</code></span>
<span class="comment-copy">AttributeError: 'str' object has no attribute 'hex'. What does this error say?</span>
<span class="comment-copy">@saeed It means you're using Python 2 (I used Python 3).  I updated my answer to include a way for you to get the same output as I did.</span>
<span class="comment-copy">Thanks so much man :)</span>
