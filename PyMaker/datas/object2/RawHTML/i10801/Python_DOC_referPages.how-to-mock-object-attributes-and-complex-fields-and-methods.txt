<div class="post-text" itemprop="text">
<p>I have a following function which needs to be unit tested.</p>
<pre><code>def read_all_fields(all_fields_sheet):
    entries = []

    for row_index in xrange(2, all_fields_sheet.nrows):
        d = {'size' : all_fields_sheet.cell(row_index,0).value,\
             'type' : all_fields_sheet.cell(row_index,1).value,\
             'hotslide' : all_fields_sheet.cell(row_index,3).value}
        entries.append((all_fields_sheet.cell(row_index,2).value,d))

    return entries
</code></pre>
<p>Now, my all_fields_sheet is a sheet returned by xlrd module(Used to read Excel file).</p>
<p>So, basically I need to mock for following attributes
nrows
cell</p>
<p>How should I go abput it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just mock the calls and attributes directly on a mock object; adjust to cover your test needs:</p>
<pre><code>mock_sheet = MagicMock()
mock_sheet.nrows = 3  # loop once
cells = [
    MagicMock(value=42),     # row_index, 0
    MagicMock(value='foo'),  # row_index, 1
    MagicMock(value='bar'),  # row_index, 3
    MagicMock(value='spam'), # row_index, 2
]
mock_sheet.cell.side_effect = cells
</code></pre>
<p>By assigning a list to <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow"><code>Mock.side_effect</code></a> you can control, in order, what calls to <code>.cell()</code> return.</p>
<p>Afterwards, you can test if the right calls have been made with the various assertion methods. You could use the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.call" rel="nofollow"><code>mock.call()</code> object</a> to give precise expectations:</p>
<pre><code>result = read_all_fields(mock_sheet)
self.assertEqual(
    result, 
    [('spam', {'size': 42, 'type': 'foo', 'hotslide': 'bar'})]
)

self.assertEqual(
    mock_sheet.cell.call_args_list,
    [call(2, 0), call(2, 1), call(2, 3), call(2, 2)])
</code></pre>
<p>I used <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args_list" rel="nofollow"><code>Mock.call_args_list</code></a> here to match an exact number of calls, directly to <code>mock_sheet.cell</code> alone.</p>
<p>Demo, assuming that your <code>read_all_fields()</code> function is already defined:</p>
<pre><code>&gt;&gt;&gt; from unittest.mock import MagicMock, call
&gt;&gt;&gt; mock_sheet = MagicMock()
&gt;&gt;&gt; mock_sheet.nrows = 3  # loop once
&gt;&gt;&gt; cells = [
...     MagicMock(value=42),     # row_index, 0
...     MagicMock(value='foo'),  # row_index, 1
...     MagicMock(value='bar'),  # row_index, 3
...     MagicMock(value='spam'), # row_index, 2
... ]
&gt;&gt;&gt; mock_sheet.cell.side_effect = cells
&gt;&gt;&gt; result = read_all_fields(mock_sheet)
&gt;&gt;&gt; result == [('spam', {'size': 42, 'type': 'foo', 'hotslide': 'bar'})]
True
&gt;&gt;&gt; mock_sheet.cell.call_args_list == [call(2, 0), call(2, 1), call(2, 3), call(2, 2)]
True
</code></pre>
<p>Alternatively, you could create a function for the <code>mock_sheet.cell.side_effect</code> attribute, to return values from a 'sheet' you set up up front:</p>
<pre><code>cells = [[42, 'foo', 'spam', 'bar']]  # 1 row
def mock_cells(row, cell):
    return MagicMock(value=cells[row - 2][cell])
mock_sheet.cell.side_effect = mock_cells
</code></pre>
<p>When <code>side_effect</code> is a function, it is called whenever <code>mock_sheet.cell()</code> is called, with the same arguments.</p>
</div>
