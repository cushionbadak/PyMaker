<div class="post-text" itemprop="text">
<p>Currently I'm using python 3.4.3 and developing PyQt5 application.</p>
<p>In my app, there's a QThread, and some large object(100MB) is being (pickle) dumped by the thread.</p>
<p>However, dumping that object requires 1~2 seconds, and it blocks the main thread about 1~2 seconds because of GIL.</p>
<p>How can I solve this issue(non-blocking the main thread)?</p>
<p>I think that serializing my object to string takes time and it requires GIL, eventually blocks the main thread.(As I know, writing to file does not require GIL)</p>
<p>I'm thinking about using Cython, but since I'm the beginner in cython, I'm not sure whether or not using Cython will solve this issue.</p>
<p>Is there any way to work around this issue?</p>
<p>Edit: I tried <code>multiprocessing</code> module, but the intercommunication time (passing shared memory variables across processes) also takes about 1~2 seconds, which eventually gives no advantages.</p>
</div>
<div class="post-text" itemprop="text">
<p>I solved my issue.</p>
<p>The solution was </p>
<ol>
<li><p>Making my object really simple. In my case, I converted my object to array of simple stringified dictionaries.</p></li>
<li><p>I used <code>file.write(stringified_dictionaries)</code> directly instead of using pickle. This reduced time for serializing python object to string.</p></li>
</ol>
<p>Since disk I/O does not require GIL in python, the only moment main thread blocked was the moment of converting my object, which was really short.</p>
</div>
<span class="comment-copy">Is it compulsory for your app to be multithread? You could get rid of GIL if you use multiproccess instead.</span>
<span class="comment-copy">@RicardoSilveira I tried multiprocessing module, but it also takes 1~2 seconds to pass the shared memory variables across processes, which eventually gives no advantages. I should've mentioned it in my question.</span>
<span class="comment-copy">Maybe <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.sharedctypes" rel="nofollow noreferrer">multiprocessing.sharedctypes</a></span>
<span class="comment-copy">I think this depends on the contents of the object you want to pickle. If it's made up of a big tree of smaller Python objects it's going to be hard to avoid needing the GIL. If it's (for example) a large array of a single numeric data-type you can probably do quite well at avoiding the GIL. (Also, multiprocessing uses pickle to pass data between threads on Windows so that may not help much)</span>
<span class="comment-copy">You were right. I solved my issue by making my object more simple (array of simple dictionaries) and using <code>file.write</code> directly instead of using pickle. (<code>file.write</code> does not require GIL).</span>
