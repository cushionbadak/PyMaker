<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9056955/what-does-super-in-new">what does `super()` in `__new__`</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I've read <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow">the documentation for <code>super()</code></a> multiple times but I still don't get what the two argument version <strong>returns</strong>.</p>
<blockquote>
<p>Return a proxy object that delegates method calls to a parent or
  sibling class of <em>type</em>. This is useful for accessing inherited methods
  that have been overridden in a class.</p>
</blockquote>
<ol>
<li>What is a proxy object?</li>
<li>parent <strong>or sibling</strong>? </li>
</ol>
<blockquote>
<p>If the second argument is an object, <code>isinstance(obj, type)</code> must be
  true. If the second argument is a type, <code>issubclass(type2, type)</code> must
  be true (this is useful for classmethods).</p>
</blockquote>
<ol start="3">
<li>That's all nice but <strong>what is returned</strong>? And what does the syntax <code>super(a,b)</code> <strong>mean</strong>? </li>
</ol>
<p>In context of <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow"><code>__new__</code></a>, </p>
<blockquote>
<p>Typical implementations create a new instance of the class by invoking
  the superclassâ€™s __new__() method using <code>super(currentclass,
  cls).__new__(cls[, ...])</code> with appropriate arguments and then modifying
  the newly-created instance as necessary before returning it.</p>
</blockquote>
<p><code>super(currentclass, cls).__new__(cls[, ...])</code></p>
<p>If <code>currentclass</code> is equal to <code>cls</code>, you have <code>super(currentclass, currentclass)</code></p>
<ol start="4">
<li>What does that return? What does that syntax mean?</li>
<li>How does this statement return an instance of <code>cls</code> so that <code>__init__</code> will be called on the returned object?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The answer to "what does <code>super</code> return" isn't anything like "it returns a list" or "it returns a modified copy of the second object". <code>super</code> returns an object of type <code>super</code>, a type designed specifically to have the qualities the documentation says it has.</p>
<p>Perhaps it would help to show a pure-Python implementation of <code>super</code>. If <code>super</code> wasn't written in C, it would look basically like this:</p>
<pre><code>class super(object):
    def __init__(self, klass, object_or_klass):
        # The real super can be called with 0 arguments on Python 3,
        # but digging into the magic that makes that work isn't relevant here.

        if isinstance(object_or_klass, klass):
            mro = type(object_or_klass).__mro__
            self.obj_type = type(object_or_klass)
            self.obj = object_or_klass
        elif issubclass(object_or_klass, klass):
            mro = object_or_klass.__mro__
            self.obj_type = object_or_klass
            self.obj = None
        else:
            raise TypeError

        # Set up a copy of the MRO to search,
        # with everything up to and including klass skipped
        self.searchlist = mro[mro.index(klass)+1:]

    def __getattribute__(self, name):
        # self.searchlist would be infinite recursion, as would super().__getattribute__
        searchlist = object.__getattribute__(self, 'searchlist')

        # Search the method resolution order for the attribute we want.
        for klass in searchlist:
            if name in klass.__dict__:
                attr = klass.__dict__[name]
                break
        else:
            raise AttributeError

        if hasattr(attr, '__get__'):
            # Handle descriptors.
            obj = object.__getattribute__(self, 'obj')
            obj_type = object.__getattribute__(self, 'obj_type')
            attr = attr.__get__(obj, obj_type)
        return attr
</code></pre>
<p>Now you can see that <code>super(a, b)</code> constructs a <code>super</code> object, and <code>super(a, b).whatever</code> calls the <code>__getattribute__</code> method of that <code>super</code> object to search the method resolution order of the second argument for the attribute we want. The attribute lookup procedure for <code>b.whatever</code> is very similar, just without chopping off the first part of the MRO, and checking the instance dict if <code>b</code> isn't a class.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should <em>definitely</em> watch Raymond Hettinger's talk from PyCon 2015, <a href="https://www.youtube.com/watch?v=EiOglTERPEo" rel="nofollow">Super is considered super!</a></p>
<p>But if not, why not add a bunch of print statements to answer your questions?</p>
<pre><code># (object) is only required in Python2
class Mom(object):
    def __init__(self, *args, **kwargs):
        print('Mom is initializing - args: {!r} kwargs: {!r}'.format(
              args, kwargs))

    def do_something(self):
        print('Doing some Mom thing')


class Dad(object):
    def __init__(self, *args, **kwargs):
        print('Dad is initializing - args: {!r} kwargs: {!r}'.format(
              args, kwargs))

    def do_something(self):
        print('Doing some Dad thing')


class Sister(Mom, Dad):
    def __init__(self, name):
        print('initializing a Sister with name: {!r}'.format(name))
        parent = super(Sister, self)
        print(type(parent))
        print(parent)
        print('Calling super __init__')
        parent.__init__(name)

    def do_something(self, value):
        if value == 5:
            print('calling method on super')
            super(Sister, self).do_something()
        else:
            print('Sister did something')


class Brother(Mom):
    def __init__(self, name):
        print('initializing a Brother with name: {!r}'.format(name))
        parent = super(Brother, self)
        print(type(parent))
        print(parent)
        print('Calling super __init__')
        parent.__init__(name)

    def do_something(self, value):
        if value == 5:
            print('calling method on super')
            super(Brother, self).do_something()
        else:
            print('Brother did something')


b = Brother('Bear')
s = Sister('Moon')

b.do_something(3)
b.do_something(5)

s.do_something(3)
s.do_something(5)
</code></pre>
<p>That produces the following output (with added commentary):</p>
<pre><code>&lt;type 'super'&gt;
&lt;super: &lt;class 'Brother'&gt;, &lt;Brother object&gt;&gt;
Calling super __init__
Mom is initializing - args: ('Bear',) kwargs: {}
</code></pre>
<p>Apparently, <code>super</code> returns a class of type <code>super</code>. Which, according to the documentation, is a proxy object. A proxy, by definition, is a replacement for something else. In this case, the proxy is a replacement for getting <code>Mom</code>. You can see that when we actually call the <code>__init__</code> function, that Mom's init function is called.</p>
<pre><code>initializing a Sister with name: 'Moon'
&lt;type 'super'&gt;
&lt;super: &lt;class 'Sister'&gt;, &lt;Sister object&gt;&gt;
Calling super __init__
Mom is initializing - args: ('Moon',) kwargs: {}
</code></pre>
<p>You'll notice here, that Dad's init function isn't called. That's because, if you watch Raymond's talk, you'll know that <code>super</code> looks for the function on parents from left to right.</p>
<pre><code>Brother did something
calling method on super
Doing some Mom thing
</code></pre>
<p>You see the same behavior repeated here</p>
<pre><code>Sister did something
calling method on super
Doing some Mom thing
</code></pre>
<p>If you change the order on Sister, to <code>Dad, Mom</code>, you'll see that those calls change:</p>
<pre><code>initializing a Brother with name: 'Bear'
&lt;type 'super'&gt;
&lt;super: &lt;class 'Brother'&gt;, &lt;Brother object&gt;&gt;
Calling super __init__
Mom is initializing - args: ('Bear',) kwargs: {}
initializing a Sister with name: 'Moon'
&lt;type 'super'&gt;
&lt;super: &lt;class 'Sister'&gt;, &lt;Sister object&gt;&gt;
Calling super __init__
Dad is initializing - args: ('Moon',) kwargs: {}
Brother did something
calling method on super
Doing some Mom thing
Sister did something
calling method on super
Doing some Dad thing
</code></pre>
<p>To sum up:</p>
<ol>
<li><p>A proxy is something that stands in for something else. In our case, <code>super</code> is a proxy for both Mom &amp; Dad, depending on which order they're inherited from.</p></li>
<li><p>Honestly, I couldn't get any kind of meaningful sibling thing to work. I'm not sure when you'd even need that anyway.</p></li>
<li><p>An instance of <code>super</code> is returned.</p></li>
<li><p>That would really only work if you had something that inherited from <code>type</code>, e.g. <code>super(type, type)</code>, because you need an <em>instance</em> of that type. <code>object</code> would also work because:</p>
<p>print(isinstance(object, object))
print(isinstance(type, type))
print(isinstance(object, type))
print(isinstance(type, object))</p></li>
</ol>
<p>There's some pretty involved magic going on around <em>that</em> process.</p>
<ol start="5">
<li>Are you asking how functions return things? Because <strong>new</strong> is a function - and it returns or it doesn't. <code>object.__new__</code> returns something. I'm not sure where the actual source code is for that function, or I could point you there if you were interested in the exact mechanism.</li>
</ol>
</div>
<span class="comment-copy">The syntax <code>super(a,b)</code> means: call the <code>super</code> function with two arguments, <code>a</code> and <code>b</code>.</span>
<span class="comment-copy">A proxy object is an object that forwards method calls to another object.</span>
<span class="comment-copy">1) See melpomene comment. 2) See <a href="http://stackoverflow.com/questions/27954695/what-is-a-sibling-class-in-python" title="what is a sibling class in python">stackoverflow.com/questions/27954695/â€¦</a>. 3) I cannot understand your third question, you just wrote the constraints above (<code>instance(b, a)</code>)? 4) What is returned by <code>__new__</code> is explain in the link you posted.</span>
<span class="comment-copy">@Holt what does <code>super(class1, class2)</code> return?</span>
<span class="comment-copy">@melpomene I know what a function call is. I meant what is the relation of <code>a</code> to <code>b</code>. What constraints do there have to be.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">This is the <code>super</code> documentation</a>. Why doesn't it tell what <code>super(class1, class2)</code> do?</span>
<span class="comment-copy">@Adrian: It says what <code>super(class1, class2)</code> does in about as much detail as it says what <code>super(klass, obj)</code> does. It just needs more detail about the lookup it implements in general, and perhaps a link to <a href="https://www.python.org/download/releases/2.3/mro/" rel="nofollow noreferrer">how the MRO works</a>.</span>
