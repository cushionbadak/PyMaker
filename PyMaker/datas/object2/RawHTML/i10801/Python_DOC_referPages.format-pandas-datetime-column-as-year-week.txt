<div class="post-text" itemprop="text">
<p>Please what's wrong with my code: </p>
<pre><code>import datetime
d = "2013-W26"
r = datetime.datetime.strptime(d, "%Y-W%W")
print(r)
</code></pre>
<p>Display "2013-01-01 00:00:00", Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>A week number is not enough to generate a date; you need a day of the week as well. Add a default:</p>
<pre><code>import datetime
d = "2013-W26"
r = datetime.datetime.strptime(d + '-1', "%Y-W%W-%w")
print(r)
</code></pre>
<p>The <code>-1</code> and <code>-%w</code> pattern tells the parser to pick the Monday in that week. This outputs:</p>
<pre><code>2013-07-01 00:00:00
</code></pre>
<p><code>%W</code> uses Monday as the first day of the week. While you can pick your own weekday, you may get unexpected results if you deviate from that.</p>
<p>See the <a href="http://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer"><code>strftime()</code> and <code>strptime()</code> behaviour</a> section in the documentation, footnote 4:</p>
<blockquote>
<p>When used with the <code>strptime()</code> method, <code>%U</code> and <code>%W</code> are only used in calculations when the day of the week and the year are specified.</p>
</blockquote>
<p>Note, if your week number is a <a href="https://en.wikipedia.org/wiki/ISO_week_date" rel="noreferrer">ISO week date</a>, you'll want to use <code>%G-W%V-%u</code> instead! Those directives require Python 3.6 or newer.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime
res = datetime.datetime.strptime("2018 W30 w1", "%Y %W w%w")
print res
</code></pre>
<p>Adding of 1 as week day will yield exact current week start. Adding of timedelta(days=6) will gives you the week end.</p>
<pre><code>datetime.datetime(2018, 7, 23)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To complete the other answers - if you are using <em>ISO</em> week numbers, this string is appropriate (to get the Monday of a given ISO week number):</p>
<pre><code>import datetime
d = '2013-W26'
datetime.datetime.strptime(d + '-1', '%G-W%V-%u')
print(r)
</code></pre>
<p><code>%G</code>, <code>%V</code>, <code>%u</code> are ISO equivalents of <code>%Y</code>, <code>%W</code>, <code>%w</code>, so this outputs:</p>
<pre><code>2013-06-24 00:00:00
</code></pre>
<p>Availabe in Python 3.6+; from <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a <a href="https://stackoverflow.com/questions/51194745/get-first-and-last-day-of-given-week-number-in-python">handy function</a> including the issue with zero-week.</p>
</div>
<span class="comment-copy">I wish I could give you more than 1 vote... I was banging my head around to figure out why it wasn't working.</span>
<span class="comment-copy">Does not work. datetime.datetime.strptime("2018-W0-0", "%Y-W%W-%w") == datetime.datetime.strptime("2018-W1-0", "%Y-W%W-%w") --&gt; "2018-01-07 00:00:00".  1st and 2nd week of 2018 have the same start date.</span>
<span class="comment-copy">@ozw1z5rd: that’s because there is no week 0 in 2018. Week 0 is the partial week before the first Monday of the year; in 2018 the first Monday is the 1st of January. In other words, <i>your input string</i> is the problem here, not the technique, and Python has error-corrected to interpret W0 to mean W1 instead.</span>
<span class="comment-copy">@ozw1z5rd: If this is an issue for your app, you’ll need to special-case such years; <code>if d.endswith('-W0') and r.day == 7: raise ValueError('Invalid date string, No week 0 in {}'.format(r.year))</code></span>
<span class="comment-copy">@darda: Python 3.6 already supports ISO 8601 week definitions, use <code>%G</code> (year for the greater part of the week) and <code>%V</code> in that case.</span>
