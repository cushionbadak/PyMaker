<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14128763/how-to-find-the-overlap-between-2-sequences-and-return-it">How to find the overlap between 2 sequences, and return it</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have two examples of pair of strings</p>
<pre><code>YHFLSPYVY      # answer
   LSPYVYSPR   # prediction
+++******ooo


  YHFLSPYVS    # answer
VEYHFLSPY      # prediction
oo*******++
</code></pre>
<p>As stated above I'd like to find the overlapping region (<code>*</code>) and non-overlapping region in answer (<code>+</code>) and prediction (<code>o</code>).</p>
<p>How can I do it in Python?</p>
<p>I'm stuck with this</p>
<pre><code>import re
# This is of example 1
ans = "YHFLSPYVY"
pred= "LSPYVYSPR"
matches = re.finditer(r'(?=(%s))' % re.escape(pred), ans)
print [m.start(1) for m in matches]
#[]
</code></pre>
<p>The answer  I hope to get for example 1 is:</p>
<pre><code>plus_len = 3
star_len = 6
ooo_len = 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's easy with <a href="https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.find_longest_match" rel="nofollow"><code>difflib.SequenceMatcher.find_longest_match</code></a>:</p>
<pre><code>from difflib import SequenceMatcher

def f(answer, prediction):
    sm = SequenceMatcher(a=answer, b=prediction)
    match = sm.find_longest_match(0, len(answer), 0, len(prediction))
    star_len = match.size
    return (len(answer) - star_len, star_len, len(prediction) - star_len)
</code></pre>
<p>The function returns a 3-tuple of integers <code>(plus_len, star_len, ooo_len)</code>:</p>
<pre><code>f('YHFLSPYVY', 'LSPYVYSPR') -&gt; (3, 6, 3)
f('YHFLSPYVS', 'VEYHFLSPY') -&gt; (2, 7, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>difflib</code>:</p>
<pre><code>import difflib

ans = "YHFLSPYVY"
pred = "LSPYVYSPR"

def get_overlap(s1, s2):
     s = difflib.SequenceMatcher(None, s1, s2)
     pos_a, pos_b, size = s.find_longest_match(0, len(s1), 0, len(s2))
     return s1[pos_a:pos_a+size]

overlap = get_overlap(ans, pred)
plus = ans.replace(get_overlap(ans, pred), "")
oo = pred.replace(get_overlap(ans, pred), "")

print len(overlap)
print len(plus)
print len(oo)
</code></pre>
</div>
<span class="comment-copy">Do you want the first overlap? Or the longest overlap?</span>
<span class="comment-copy">Do you also want the string with *+o or just the values of plus_len etc.?</span>
<span class="comment-copy">Looks like <a href="https://en.wikipedia.org/wiki/Longest_common_subsequence_problem" rel="nofollow noreferrer">longest common subsequence</a></span>
<span class="comment-copy">Will a single character common to both also be considered an overlap?</span>
<span class="comment-copy">@Rawing: longest.</span>
<span class="comment-copy">SO is like an army of super intelligent minds, not even a second and the question was answered :D !</span>
