<div class="post-text" itemprop="text">
<p>Say for example I have a structure that contains many sub-elements some of which are structures:</p>
<pre><code>v = [1, 2, 3, [4, (5, 6)]]
</code></pre>
<p>How can I unpack these into a series of names that contain only the contents of the structures and not a structure?</p>
<p>Trying <code>a, b, c, d, e, f = v</code> raises a <code>ValueError</code> while using the starred expression would assign a structure to the names. How can I unpack them in order to get:</p>
<pre><code>print(a, b, c, d, e, f)
</code></pre>
<p>to print:</p>
<pre><code>1 2 3 4 5 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assignments are defined recursively, you need to <em><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">use parentheses <code>()</code> and/or square brackets <code>[]</code> to enclose target names</a></em> and match the nested structure of your iterable. In your case:</p>
<pre><code>a, b, c, (d, (e, f)) = v
print(a, b, c, d, e, f) 
1 2 3 4 5 6
</code></pre>
<p>Similarly, with no change in semantics, you could use <code>[]</code> to denote the structure:</p>
<pre><code>a, b, c, [d, [e, f]] = v
print(a, b, c, d, e, f) 
1 2 3 4 5 6
</code></pre>
<p>or, of course, mix them up.</p>
<p>Python will then unpack <code>v</code> and assign the first 3 values normally, then unpack the contents of <code>(d, (e, f))</code> and assign <code>d</code> and then again unpack <code>(e, f)</code> and do the same.</p>
<p>You can see this happening if you import the <code>dis</code> module and disassembling the statement with <code>dis.dis</code>:</p>
<pre><code>dis.dis('a, b, c, (d, (e, f)) = v')
  1           0 LOAD_NAME                0 (v)
              3 UNPACK_SEQUENCE          4      # &lt;- first unpack
              6 STORE_NAME               1 (a)
              9 STORE_NAME               2 (b)
             12 STORE_NAME               3 (c)
             15 UNPACK_SEQUENCE          2      # &lt;- second unpack
             18 STORE_NAME               4 (d)
             21 UNPACK_SEQUENCE          2      # &lt;- third unpack
             24 STORE_NAME               5 (e)
             27 STORE_NAME               6 (f)
             30 LOAD_CONST               0 (None)
             33 RETURN_VALUE
</code></pre>
<p>In general, to unpack arbitrarily nested structures, match the structure in the left side of the assignment (target-list):</p>
<pre><code>v = [1, [2, [3, [4, 5]]]]    
[a, [b, [c, [d, e]]]] = v    
print(a, b, c, d, e)
1 2 3 4 5
</code></pre>
<p>the outer <code>[]</code> are, of course, unnecessary, just adding them to show that simply matching the structure suffices. </p>
</div>
<div class="post-text" itemprop="text">
<p>Another option you might consider is to flatten the structure and then assign it.</p>
<pre><code>def flatten(container):
    for i in container:
        if isinstance(i, (list,tuple)):
            for j in flatten(i):
                yield j
        else:
            yield i
</code></pre>
<p>Then </p>
<pre><code>a, b, c, d, e, f = flatten(v)
</code></pre>
</div>
<span class="comment-copy">you could use <code>isinstance(i, Container)</code> with <code>Container</code> from <code>collections.abc</code> in order to catch all containers, not just <code>list</code> and <code>tuple</code> types.</span>
<span class="comment-copy">@JimFasarakisHilliard: Though you'd likely want to explicitly exclude or otherwise special-case <code>str</code> (and possibly <code>bytes</code> and related types), since they count as <code>Container</code>s but are usually used as if they were scalar quantities.</span>
