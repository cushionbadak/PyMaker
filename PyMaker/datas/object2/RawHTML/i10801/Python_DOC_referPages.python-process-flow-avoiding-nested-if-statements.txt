<div class="post-text" itemprop="text">
<p>I have a process (class) that I split into several steps (methods). each step can only be invoked if the previous one was successful. I created a method run() that runs the process by checking each step before invoking the next one:</p>
<pre><code>def run(self):
    status = False
    if step_1():
        if step_2():
            if step_3():
                etc... [several nested IFs]
                status = True
            else:
                self.logger.error('Error in step 3')
        else:
            self.logger.error('Error in step 2')
    else:
        self.logger.error('Error in step 1')
    return status
</code></pre>
<p>Is there a more elegant way (a design pattern?) to avoid these nested IF statements?</p>
<p>Thanks a lot,</p>
</div>
<div class="post-text" itemprop="text">
<p>You would place your steps in a list:</p>
<pre><code>my_plan = (step1, step2, step3, ..., stepN)
</code></pre>
<p>And then execute them in a loop:</p>
<pre><code>for step in my_plan:
   if not step():
      print 'Error in %s' % step.__name__
      status = False
      break
else:
    status = True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an alternative if you don't have too many steps or you don't want to put your step functions in a sequence.</p>
<pre><code>def run(self):
    status = step_1():
    if status:
        status = step_2():
    if status:
        status = step_3():

    etc... [several IFs]

    if status is False:
        self.logger.error('Error')

    return status
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Think of it as failing returning False instead of passing returning True.</p>
<pre><code>def run(self):
    if not step_1():
        self.logger.error('Error in step 1')
        return False
    if not step_2():
        self.logger.error('Error in step 2')
        return False
    if not step_3():
        self.logger.error('Error in step 3')
        return False
    return True
</code></pre>
</div>
<span class="comment-copy">@JohnCarpenter Do not "fix" indentation on Python. <code>for</code> can have an <code>else</code> statement, and that's the correct way to do it in this case.</span>
<span class="comment-copy">@JohnCarpenter please spend some time with the <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">python docs</a>.</span>
<span class="comment-copy">@JohnCarpenter No, the way you did it sets <code>status</code> to <code>True</code> after every step instead of after the loop.</span>
<span class="comment-copy">@RikiLyng If you don't have a consistent parameter list, it becomes MUCH harder.  It might be worth just passing the same list of params to each function, even if they don't need it.</span>
<span class="comment-copy">Trying to write this sort of pipeline really requires that your functions take a consistent parameter list. Otherwise you're pretty much left with your original solution involving lots of nested <code>if</code> statements.  Thinking about it for a bit, you could in theory create your pipeline (<code>(step1, step2, ...)</code>) using calls to <code>functools.partial</code> to include parameters on each step (<code>(partial(step1, arg1, arg2), partial(step2, arg1), ...)</code>), but that gets increasingly ugly.</span>
<span class="comment-copy">The second one runs all the steps. OP specifically only wants to run the next step if the prior one succeeded. Your first approach runs into the same problem as the nested if statements, where the code grows far more than it should on each step. larsks's solution is the correct one.</span>
<span class="comment-copy">In the second one, if the step returns False (if not steps[i]), then it prints an error and return False, breaking the loop. It only continues to the next step if False isn't returned.</span>
<span class="comment-copy">Gotcha. Deleted that one.</span>
<span class="comment-copy">This is better, but it still runs into the issue of the code growing more than it needs to with each step. It's still not any better than OP's original code. It just grows horizontally instead of vertically.</span>
