<div class="post-text" itemprop="text">
<p>I have a binary foo which requires two command line arguments: username and password. </p>
<p>I have written script.py to generate the username and password. Currently, I am using print to print them to stdout and then manually copy and paste them in the shell when I call foo in shell, i.e.,</p>
<pre><code>$python script.py
username password
(i copied and paste the output below)
$./foo username password
</code></pre>
<p>However, I need to generate special bytes which are not printable in stdout and therefore if I copy and paste from stdout, these special byte values are gone. How can I redirect my python output as the argument for foo?</p>
<p>BTW: I have tried using call in subprocess to directly call foo in python, this is not ideal because if I trigger a seg fault in the foo, it does not reflected in bash.</p>
</div>
<div class="post-text" itemprop="text">
<p>Run:</p>
<pre><code>./foo $(python script.py)
</code></pre>
<p>To demonstrates that this works and provides <code>foo</code> with two arguments, let's use this script.py:</p>
<pre><code>$ cat script.py
#!/usr/bin/python
print("name1 pass1")
</code></pre>
<p>And let's use this <code>foo</code> so that we can see what arguments were provided to it:</p>
<pre><code>$ cat foo
#!/bin/sh
echo "1=$1 2=$2"
</code></pre>
<p>Here is the result of execution:</p>
<pre><code>$ ./foo $(python script.py)
1=name1 2=pass1
</code></pre>
<p>As you can see, <code>foo</code> received the name as its first argument and the password as its second argument.</p>
<p><em>Security Note:</em>  The OP has stated that this is not relevant for his application but, for others who may read this with other applications in mind, be aware that passing a password on a command line is not secure: full command lines are readily available to all users on a system.</p>
</div>
<div class="post-text" itemprop="text">
<p>So <code>subprocess</code>  worked but you didn't used because you than didn't got the output from 'foo' (the binary)?</p>
<p>You can use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow">communicate()</a> function to get output from the binary back.</p>
</div>
<span class="comment-copy">@John1024, that wont work because foo checks to see if there are two arguments. It reported error because there is not enough arguments. Thank you for the hint, but I am not worrying about password snooping. This is just an example to ask how to feed two arguments.</span>
<span class="comment-copy">You are right. I forgot I added an additional debug print in my python script. I commented it and it works now.</span>
<span class="comment-copy">"call" did not generate a segmentation fault in stdout. It does generate a core dump file, But I would like to see the seg fault info in stdout. If I just feed the arguments by directly calling foo in shell, it will have seg fault info in the shell. Can you put a proper code for using communicate? Thanks,</span>
