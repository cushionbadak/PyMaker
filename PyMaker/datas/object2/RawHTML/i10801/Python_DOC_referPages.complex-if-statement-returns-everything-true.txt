<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15112125/how-to-test-multiple-variables-against-a-value">How to test multiple variables against a value?</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
</ul>
</div>
<p>Below is my code. I am trying to parse a DataFrame and store company matches. However, the if statement always returns true and everything is saved in the dataframe <code>current_customers</code> even though about 10 out of my 150 rows has a value &gt; 97. Below my code is a sample of my data. </p>
<pre><code>current_customers = pandas.DataFrame()
potential_customers = pandas.DataFrame()
for i in range(0, len(FDA_useful_companies_bing)):
    if combined_data['match token sort'].iloc[i] or combined_data['match ratio'].iloc[i] or combined_data['match partial ratio'].iloc[i] &gt; 97:
        current_customers = current_customers.append(combined_data.ix[i,4::])
    else:
        potential_customers = potential_customers.append(combined_data.ix[i,4::])
</code></pre>
<p>Sample of my data</p>
<pre><code>Company                             City            State       ZIP     FDA Company                 FDA City            FDA State   FDA ZIP Token sort ratio              match token sort  Ratio                           match ratio    Partial Ratio            match partial ratio
NOVARTIS                            Larchwood       IA          51241   HELGET GAS PRODUCTS INC     Kansas City         MO          64116   AIR PRODUCTS  CHEMICALS INC   73                OCEANIC MEDICAL PRODUCTS INC    59             LUCAS INC                78
BOEHRINGER INGELHEIM VETMEDICA INC  Sioux Center    IA          51250   SOUTHWEST TECHNOLOGIES INC  North Kansas City   MO          64116   SOUTHWEST TECHNOLOGIES        100               SOUTHWEST TECHNOLOGIES          92             SOUTHWEST TECHNOLOGIES   100
</code></pre>
<p>EDIT:
Additionally, if there is a more efficient way to do this, I would love to hear. </p>
</div>
<div class="post-text" itemprop="text">
<p>IIUC you can just do :</p>
<pre><code>current_customer = combined_data[(combined_data[['match token sort','match ratio','match partial ratio']] &gt; 97).any(axis=1)]

potential_customer = combined_data[(combined_data[['match token sort','match ratio','match partial ratio']] &lt;= 97).all(axis=1)]
</code></pre>
<p>What you tried short circuits because any non-zero value will evaluate to <code>True</code> as it's not comparing all the terms against the last numerical value as you expected:</p>
<pre><code>if combined_data['match token sort'].iloc[i] or combined_data['match ratio'].iloc[i] or combined_data['match partial ratio'].iloc[i] &gt; 97:
</code></pre>
<p>So this is equivalent to:</p>
<pre><code>if some_val or another_val or last_val &gt; 95
</code></pre>
<p>so here if some_val is non-zero or another_val is non_zero then the entire statement evaluates to <code>True</code></p>
<p>You can see this in a simplified case:</p>
<pre><code>In [83]:
x = 1    â€‹
if 5 or x &gt; 95:
    print('True')
else:
    print('False')
</code></pre>
<p>this outputs:</p>
<pre><code>True
</code></pre>
<p>With just a single comparison:</p>
<pre><code>In [85]:
if 5 &gt; 95:
    print('True')
else:
    print('False')
</code></pre>
<p>outputs:</p>
<pre><code>False
</code></pre>
<p>but with each value compared with the target value:</p>
<pre><code>In [87]:
x=1
if 5 &gt; 95 or x &gt; 95:
    print('True')
else:
    print('False')
</code></pre>
<p>this now prints:</p>
<pre><code>False
</code></pre>
<p>but the real point here is to not loop at all, you can sub-select from your df by passing a list of the cols of interest, you can then compare the entire df against your scalar value and use <code>any(axis=1)</code> to generate a boolean mask and use this to mask the df to return you the current customers, you then invert the comparison and use <code>all(axis=1)</code> to find the rows where none of the cols satisfy your previous comparison to filter the df for the potential customers</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is the if statement, as you suspected:</p>
<pre><code>if combined_data['match token sort'].iloc[i] or combined_data['match ratio'].iloc[i] or combined_data['match partial ratio'].iloc[i] &gt; 97:
</code></pre>
<p>You're asking if the expression "combined_data['match token sort'].iloc[i]" is true, which it is a number &gt; 0, so it is a truthey value according to Python. Thus, the entire expression returns True.</p>
<p>I'll add parenthesis to make it more clear how Python is interpreting this line of code:</p>
<pre><code>if (combined_data['match token sort'].iloc[i]) or 
    (combined_data['match ratio'].iloc[i]) or 
    (combined_data['match partial ratio'].iloc[i] &gt; 97):
</code></pre>
<p>Python is evaluating the statements in the parenthesis separately, and <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow">Python considers any non-zero number to be a "truthey" value</a>, and thus used as a conditional it returns True. Here's a corrected expression:</p>
<pre><code>if (combined_data['match token sort'].iloc[i]) &gt; 97 or 
        (combined_data['match ratio'].iloc[i]) &gt; 97 or 
        (combined_data['match partial ratio'].iloc[i] &gt; 97):
</code></pre>
<p>Now Python will each operation as a comparison operation as you intended.</p>
</div>
<span class="comment-copy">I don't believe that mine is a duplicate because mine has to do with how pandas dataframe works with the if statement.</span>
<span class="comment-copy">No, the issue is standard Python. <code>foo or bar or baz &gt; 97</code> will always return True for non-0 values of foo and bar.</span>
<span class="comment-copy">You are right. I did not understand the error.</span>
<span class="comment-copy">A ha I knew there had to be a simpler way to do this. I appreciate taking the time to explain why it always evaluates as true with your example!</span>
<span class="comment-copy">The <code>axis=1</code> command is hard to understand though.</span>
<span class="comment-copy">the <code>axis=1</code> param indicates we want the comparison to be done row-wise instead of column-wise which would be <code>axis=0</code> you should try changing it from <code>1</code> to <code>0</code> to see the difference</span>
