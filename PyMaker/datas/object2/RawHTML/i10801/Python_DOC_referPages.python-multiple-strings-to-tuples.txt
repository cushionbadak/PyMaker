<div class="post-text" itemprop="text">
<p>Hi everyone I wonder if you can help with my problem.</p>
<p>I am defining a function which takes a string and converts it into 5 items in a tuple. The function will be required to take a number of strings, in which some of the items will vary in length. How would I go about doing this as using the indexes of the string does not work for every string.</p>
<p>As an example - </p>
<p>I want to convert a string like the following: </p>
<pre><code>Doctor E212 40000 Peter David Jones
</code></pre>
<p>The tuple items of the string will be: </p>
<pre><code>Job(Doctor), Department(E212), Pay(40000), Other names (Peter David), Surname (Jones)
</code></pre>
<p>However some of the strings have 2 other names where others will have just 1.</p>
<p>How would I go about converting strings like this into tuples when the other names can vary between 1 and 2?</p>
<p>I am a bit of a novice when it comes to python as you can probably tell ;) </p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3, you can just <code>split()</code> and  use <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow">"catch-all" tuple unpacking</a> with <code>*</code>:</p>
<pre><code>&gt;&gt;&gt; string = "Doctor E212 40000 Peter David Jones"
&gt;&gt;&gt; job, dep, sal, *other, names = string.split()
&gt;&gt;&gt; job, dep, sal, " ".join(other), names
('Doctor', 'E212', '40000', 'Peter David', 'Jones')
</code></pre>
<p>Alternatively, you can use <a href="https://docs.python.org/3/library/re.html" rel="nofollow">regular expressions</a>, e.g. something like this:</p>
<pre><code>&gt;&gt;&gt; m = re.match(r"(\w+) (\w+) (\d+) ([\w\s]+) (\w+)", string)
&gt;&gt;&gt; job, dep, sal, other, names = m.groups()
&gt;&gt;&gt; job, dep, sal, other, names
('Doctor', 'E212', '40000', 'Peter David', 'Jones')
</code></pre>
</div>
<span class="comment-copy">How would <i>you</i> go about it, and in what way(s) does it not work?</span>
<span class="comment-copy">Hi thanks for your help, I tried implementing the first method however it did not work when used in a function like the following: (where 'x' is a string)                                                                                                  <code>def strTup(x):     payR, dep, sal, *other, surn = x.split()     payR, dep, sal, " ".join(other), surn</code></span>
<span class="comment-copy">Sorry for the layout of the code, Its not easy in comments lol, please could you tell me how to get this working so that it returns a tuple like in the above example, thanks :)</span>
<span class="comment-copy">Well,you have to <code>return</code> the tuple; in my code I just echoed it in the interactive shell. In your function, use <code>return payR, dep, sal, " ".join(other), surn</code>.</span>
<span class="comment-copy">I was having some trouble implementing it and getting it to return the output when ran, however I have sorted that now</span>
<span class="comment-copy">@RJB Good to hear that. Just drop a comment if you have any more troubles.</span>
