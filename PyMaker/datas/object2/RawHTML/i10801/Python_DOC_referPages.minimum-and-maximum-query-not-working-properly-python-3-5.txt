<div class="post-text" itemprop="text">
<p>I wonder if you can help because I've been looking at this for a good half hour and I'm completely baffled, I think I must be missing something so I hope you can shed some light on this.</p>
<p>In this area of my program I am coding a query which will search a list of tuples for the salary of the person. Each tuple in the list is a separate record of a persons details, hence I have used two indexes; one for the record which is looped over, and one for the salary of the employee. What I am aiming for is for the program to ask you a minimum and maximum salary and for the program to print the names of the employees who are in that salary range. </p>
<p>It all seemed to work fine, until I realised that when entering in the value '100000' as a maximum value the query would output nothing. Completely baffled I tried entering in '999999' which then worked and all records were print. The only thing that I can think of is that the program is ignoring the extra digit, which I could not figure out why this would be?!</p>
<p>Below is my code for that specific section and output for a maximum value of 999999 (I would prefer not to paste the whole program as this is for a coursework project and I want to prevent anyone on the same course potentially copying my work, sorry if this makes my question unclear!):</p>
<p><strong>The maximum salary out of all the records is 55000, hence why it doesnt make sense that a minimum of 0 and maximum of 100000 does not work, but a maximum of 999999 does!</strong></p>
<p>If any more information is need to help, please ask! This probably seems unclear but like I said above, I dont want anyone from the class to plagiarise and my work to be void because of that! So I have tried to ask this without posting all my code on here!</p>
</div>
<div class="post-text" itemprop="text">
<p>Given your use of the <code>print</code> function (instead of the Python 2 <code>print</code> statement), it looks like you're writing Python 3 code. In Python 3, <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow"><code>input</code></a> returns a <code>str</code>. I'm guessing your data is also storing the salaries as <code>str</code> (otherwise the comparison would raise a <code>TypeError</code>). You need to convert both stored values and the result of <code>input</code> to <code>int</code> so it performs numerical comparisons, not ASCIIbetical comparisons.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you read in from standard input in Python, no matter what input you get, you receive the input as a string. That means that your comparison function is resulting to:</p>
<pre><code>if tuplist[x][2] &gt; "0" and tuplist[x][2] &lt; "999999" :
</code></pre>
<p>Can you see what the problem is now? Because it's a homework assignment, I don't want to give you the answer straight away.</p>
</div>
<span class="comment-copy">Thanks! I completely see what you are saying is right, however I'm a little bit unsure as to how I convert the stored values to integers because the coursework requires that I import the records from a .txt file, so they come as str types and I'm not sure how I change this!</span>
<span class="comment-copy">I converted the user input easily by changing it to <code>int(input(" "))</code> so that doesnt need to be worried about</span>
<span class="comment-copy">@RJB: In the code that parses the <code>.txt</code> file, you need to ensure it's converting the relevant values to <code>int</code>. For example, if the file is just space separated text, you might do <code>record = line.split()</code>, <code>record[2] = int(record[2])</code>, <code>tuplist.append(tuple(record))</code></span>
<span class="comment-copy">Sorry to be a bother, I have tried doing this but I have a problem in which that I use the ".join" method which doesnt work when the string has an int inside of it, I'm a little bit lost to as where I go now</span>
<span class="comment-copy">@RJB: Convert back to an iterable of <code>str</code> when stringifying, or use a format string. <code>' '.join(map(str, record))</code> or (assuming three elements in a record) <code>'{} {} {}'.format(*record)</code>.</span>
