<div class="post-text" itemprop="text">
<p>I'm trying to convert a Python 2.x version of this code:</p>
<pre><code>out_chunk = open('out.txt','w+b')
chunks.append(out_chunk) # out_chunk is just a list of strings like ['a', 'b', ...]
out_chunk.writelines(chunk)
</code></pre>
<p>into Python 3.x version. If I run the above code in Python 3.x directly, I get an error like below, which is expected:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/Desktop/es/prog.py", line 145, in &lt;module&gt;
    ob.external_sort()
  File "C:/Users/Desktop/es/prog.py", line 70, in my_func
    out_chunk.writelines(chunk)
TypeError: a bytes-like object is required, not 'str'
</code></pre>
<p>Is there a way to write list of strings as bytes in Python 3.x? Or should I just write as a list of strings (and take the performance hit, maybe?)</p>
</div>
<div class="post-text" itemprop="text">
<p>You opened the file in <em>binary</em> mode, so you'd have to encode your bytes.</p>
<p>If you drop the <code>'b'</code> part from the file mode (so open with <code>'w+'</code> rather than <code>'w+b'</code>), you get an implementation of the <a href="https://docs.python.org/3/library/io.html#io.TextIOBase" rel="nofollow"><code>TextIOBase</code> interface</a> instead, which will encode strings for you given an encoding (the default is to use the result of <code>locale.getdefaultencoding()</code>, you probably want to supply an explicit <code>encoding</code> argument to the <code>open()</code> call instead).</p>
<p>The alternative would be for you to encode your strings manually, using the <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow"><code>str.encode()</code> method</a> on each chunk. Leaving encoding to the <code>TextIOBase</code> implementation is going to be a little faster however, because the I/O layer can encode without having to look up a method object on each <code>str</code> chunk, nor do the resulting bytes have to be boxed in a Python <code>bytes</code> object again.</p>
<p>Also, for encodings that require a <a href="https://en.wikipedia.org/wiki/Byte_order_mark" rel="nofollow">byte order mark</a>, it is best to leave writing that marker to the file implementation.</p>
<p>However, if you could produce <em><code>bytes</code> objects</em> in the first place, you'd avoid having to encode at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just don't open the file in binary mode:</p>
<pre><code>out_chunk = open('out.txt','w+')
</code></pre>
<p>Hope it helps!</p>
</div>
<span class="comment-copy">So why is your Python 3 version not producing bytes objects?</span>
<span class="comment-copy">Yeah, I figured that. But I wonder if writing a list of string as binary might add some performance gain as opposed to just simply writing them Text I/O. Hopefully, someone who knows Python 3.x IO behavior well might comment here. :) Thank you for your suggestion.</span>
<span class="comment-copy">Don't worry for such lower case optimization as it could change in a minor Python release. If you have Python3 (unicode) strings and want to write them to a text file, you must first encode them. You can either do explicit encoding and then write to a binary file, or let the TextIO engine do an implicit encoding. Any way, the same encoding have took place so performance should be very close.</span>
<span class="comment-copy">@SergeBallesta: well, the TextIOBase implementation doesn't have to resolve the <code>.encode</code> attribute for each chunk, nor push the current frame on the stack to make the call, nor does it have to create the <code>bytes</code> object (it can just leave the bytes as a C array to pass on to the wrapped buffer).</span>
<span class="comment-copy">@SergeBallesta: of course, compared to the slow speed of hardware access to a spinning disk that performance difference is going to be insignificant in most cases.</span>
<span class="comment-copy">Thank you guys for insightful answers. I learned more from them! :)</span>
