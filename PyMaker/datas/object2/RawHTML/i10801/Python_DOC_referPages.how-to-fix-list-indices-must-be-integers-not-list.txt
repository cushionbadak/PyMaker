<div class="post-text" itemprop="text">
<p>Hi i would like to know what is wrong with this code</p>
<pre><code>f = open('test.txt', 'a+')
yourResult = [line.split(',') for line in f.readlines()]
for answer in yourResult:
    print (yourResult[answer])

a = raw_input('What Was That')
Format = (answer + ' : ' + a + ', ')
f.write(Format)
print (Format)
File = open('test.txt', 'r')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's <code>for</code> loop doesn't yield indices but the item in the sequence itself, so here, inside the loop, <code>answer</code> is already an element of <code>yourResult</code>. IOW, you want:</p>
<pre><code>for answer in yourResult:
    print (answer)
</code></pre>
<p>As a side note:</p>
<p>1/ a <code>file</code> object is an iterable, so you don't need to use <code>readlines()</code>, you can (and should) directly iterate over the file (it will avoid loading the whole content in memory):</p>
<p>2/ <code>open()</code> is context manager which takes care of properly closing the file.</p>
<p>The clean version of your code would then be:</p>
<pre><code>with open('test.txt', 'r') as f:
    yourResult = [line.split(',') for line in f]

for answer in yourResult:
    print(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>yourResult[answer]</code> can't work, the <code>[]</code> are expecting integer. when you do:</p>
<p><code>for answer in yourResult:</code>, <code>answer</code> is a <strong>list</strong>(thanks bruno desthuilliers).</p>
<p>You should do: </p>
<pre><code>for answer in yourResult:
    print (answer)
</code></pre>
<p>here, answer will be <code>yourResult[0]</code>, then <code>yourResult[1]</code> etc.. </p>
</div>
<div class="post-text" itemprop="text">
<p>When you use a for this way, <code>answer</code> is one of the elements of yourResult, not the index of such an element.<br/>
To do what you want with indexes, do :</p>
<pre><code>for answer in range(len(yourResult)):
    print(yourResult[answer])
</code></pre>
<p>In this case, you'll look inside yourResult by using indexes.</p>
<p>If not, you can do :</p>
<pre><code>for answer in yourResult:
    print(answer)
</code></pre>
<p>In this case, you loop directly at the elements inside the array, thus not needing to access them through indexes.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to use </p>
<pre><code>print(yourResult[answer])
</code></pre>
<p>using</p>
<pre><code>print(answer)
</code></pre>
<p>will do what I expect you want. 
Since you have created yourResult as a list, yourResult[x] expects x to be a number from 0 to len(yourResult)-1. 
By doing</p>
<pre><code>for answer in yourResult
</code></pre>
<p>You are iteratively setting answer to each item in yourResult.</p>
</div>
<span class="comment-copy"><code>answer</code> still a list. You should be clear with <code>yourResult</code>. If not, you can <code>print</code> it.</span>
<span class="comment-copy">In free time look on this - "It is good practice to use the <code>with</code> keyword when dealing with file objects. This has the advantage that the file is properly closed after its suite finishes, even if an exception is raised on the way." <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/inputoutput.html</a></span>
<span class="comment-copy">Yeah this one should be the accepted answer, the <code>with open</code> is important to note</span>
<span class="comment-copy">In this case, <code>answer</code> is actually a <code>list</code>, cf the <code>line.split()</code> call when building <code>yourResult</code>.</span>
