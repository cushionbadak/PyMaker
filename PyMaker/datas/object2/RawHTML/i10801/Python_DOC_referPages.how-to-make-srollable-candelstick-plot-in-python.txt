<div class="post-text" itemprop="text">
<p>I have following candlestick plot. I want to make it scrollable so that I can see more details. The current plot is too long to see details. 
I have found examples for making a line plot scrollable at here:
<a href="https://stackoverflow.com/questions/38559270/matplotlib-scrolling-plot">Matplotlib: scrolling plot</a></p>
<p>However, updating a candlestick seems way more complicated than updating a line chart. The candlestick plot returns lines and patches. Can you help?</p>
<pre><code>from pandas.io.data import get_data_yahoo
import matplotlib.pyplot as plt
from matplotlib import dates as mdates
from matplotlib import ticker as mticker
from matplotlib.finance import candlestick_ohlc
import datetime as dt
symbol = "GOOG"

data = get_data_yahoo(symbol, start = '2011-9-01', end = '2015-10-23')
data.reset_index(inplace=True)
data['Date']=mdates.date2num(data['Date'].astype(dt.date))
fig = plt.figure()
ax1 = plt.subplot2grid((1,1),(0,0))
plt.title('How to make it scrollable')
plt.ylabel('Price')
ax1.xaxis.set_major_locator(mticker.MaxNLocator(6))
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))

candlestick_ohlc(ax1,data.values,width=0.2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can plot the whole plot, and then use the slider widget to modify the axes area.</p>
<p>I couldn't reproduce your data because I don't have the <code>pandas.io.data</code> library, so I modified <a href="http://matplotlib.org/examples/pylab_examples/finance_demo.html" rel="nofollow">the candlestick example from here</a>, and added the slider.</p>
<pre><code>import matplotlib.pyplot as plt
import datetime
from matplotlib.widgets import Slider
from matplotlib.finance import quotes_historical_yahoo_ohlc, candlestick_ohlc
from matplotlib.dates import DateFormatter, WeekdayLocator,\
    DayLocator, MONDAY

# (Year, month, day) tuples suffice as args for quotes_historical_yahoo
date1 = (2004, 2, 1)
date2 = (2004, 4, 12)

mondays = WeekdayLocator(MONDAY)        # major ticks on the mondays
alldays = DayLocator()              # minor ticks on the days
weekFormatter = DateFormatter('%b %d')  # e.g., Jan 12
dayFormatter = DateFormatter('%d')      # e.g., 12

quotes = quotes_historical_yahoo_ohlc('INTC', date1, date2)
if len(quotes) == 0:
    raise SystemExit

fig, ax = plt.subplots()
fig.subplots_adjust(bottom=0.2)
ax.xaxis.set_major_locator(mondays)
ax.xaxis.set_minor_locator(alldays)
ax.xaxis.set_major_formatter(weekFormatter)
#ax.xaxis.set_minor_formatter(dayFormatter)

#plot_day_summary(ax, quotes, ticksize=3)
candlestick_ohlc(ax, quotes, width=0.6)

ax.xaxis_date()
ax.autoscale_view()
plt.axis([datetime.date(*date1).toordinal(), datetime.date(*date1).toordinal()+10, 18.5, 22.5])
plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')


axcolor = 'lightgoldenrodyellow'
axpos = plt.axes([0.2, 0.05, 0.65, 0.03], axisbg=axcolor)


spos = Slider(axpos, 'Position', datetime.date(*date1).toordinal(), datetime.date(*date2).toordinal())

def update(val):
    pos = spos.val
    ax.axis([pos,pos+10, 18.5, 22.5])
    fig.canvas.draw_idle()

spos.on_changed(update)

plt.show()
</code></pre>
<p>I hardcoded some values of the axes sizes and positions, please be careful when adapting to your code.</p>
<p>Also same idea can be implemented to add a vertical scroll if needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>For what you want, I'd recommend using Plotly, which allows for interactive data visualization (including scroll, zoom, panning, etc), and has a nice Python API.</p>
<p>Here are two different ways to do it (in both cases, you will need to <code>pip install plotly</code>)</p>
<ol>
<li><p>Using the Plotly website API (requires that you <a href="https://plot.ly/feed/" rel="nofollow noreferrer">create an account here</a> and get your username and API key. You'll need to be connected to Internet to generate the plot.)</p>
<pre><code>from pandas.io.data import get_data_yahoo
import matplotlib.pyplot as plt
from matplotlib import dates as mdates
from matplotlib import ticker as mticker
from matplotlib.finance import candlestick_ohlc
import datetime as dt
# Imports for Plotly
import plotly.plotly as py
import plotly.tools as tls
from plotly.tools import FigureFactory as FF

# Put your credentials here
tls.set_credentials_file(username='YourUserName', api_key='YourAPIKey')

# Getting the data
symbol = "GOOG"
data = get_data_yahoo(symbol, start = '2011-9-01', end = '2015-10-23')
data.reset_index(inplace=True)
# Not needed anymore, we'll use the string-formatted dates.
#data['Date']=mdates.date2num(data['Date'].astype(dt.date))

# Creating the Plotly Figure
fig = FF.create_candlestick(data.Open, data.High, data.Low, data.Close, dates=data.Date)
lay = fig.layout

# Formatting the ticks.
lay.xaxis.nticks = 6
lay.xaxis.tickformat = "%Y-%m-%d"

# Removing the hover annotations Plotly adds by default, but this is optional.
lay.hovermode = False

# A nice title...
lay.title = "See, I made it scrollable :)"
py.iplot(fig)
</code></pre></li>
<li><p>Using Plotly's offline mode. I assume that you will be using the Jupyter (IPython notebook). You won't need to be connected to the Internet.</p>
<pre><code>from pandas.io.data import get_data_yahoo
import matplotlib.pyplot as plt
from matplotlib import dates as mdates
from matplotlib import ticker as mticker
from matplotlib.finance import candlestick_ohlc
import datetime as dt

# Imports for Plotly
from plotly.offline import download_plotlyjs, init_notebook_mode, iplot
import plotly.tools as tls
from plotly.tools import FigureFactory as FF

init_notebook_mode() # Inject Plotly.js into the notebook

# Getting the data
symbol = "GOOG"
data = get_data_yahoo(symbol, start = '2011-9-01', end = '2015-10-23')
data.reset_index(inplace=True)
# Not needed anymore, we'll use the string-formatted dates.
#data['Date']=mdates.date2num(data['Date'].astype(dt.date))

# Creating the Plotly Figure
fig = FF.create_candlestick(data.Open, data.High, data.Low, data.Close, dates=data.Date)
lay = fig.layout

# Formatting the ticks.
lay.xaxis.nticks = 6
lay.xaxis.tickformat = "%Y-%m-%d"

# Removing the hover annotations Plotly adds by default, but this is optional.
lay.hovermode = False

# A nice title...
lay.title = "See, I made it scrollable :)"
iplot(fig)
</code></pre></li>
</ol>
<p>The result before zoom...</p>
<p><a href="https://i.stack.imgur.com/nIqGG.png" rel="nofollow noreferrer"><img alt="Before" src="https://i.stack.imgur.com/nIqGG.png"/></a></p>
<p>... And after zooming on a specific region.</p>
<p><a href="https://i.stack.imgur.com/kM952.png" rel="nofollow noreferrer"><img alt="After" src="https://i.stack.imgur.com/kM952.png"/></a></p>
<p>If you have any other question, please let me know. Hope the answer will suit you!</p>
</div>
<span class="comment-copy">Thanks! Would you please explain spos = Slider(axpos, 'Position', datetime.date(<i>date1).toordinal(), datetime.date(*date2).toordinal())         why you put '</i>' there, and why we need '.tordinal()'?is it related the 'update' function?</span>
<span class="comment-copy">Glad I could help. The * operator is to unpack the tuple <code>date1</code> and <code>date2</code> into arguments of the constructor <code>datetime.date</code> check here <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a> . And the <code>Slider</code> widget can only manage numbers, it cannot handle <code>datetime.date</code> objects, the <code>toordinal()</code> method converts a date into the number of seconds since epoch, which conveniently is also the position in the axes where our data is plotted. Depending on your version of matplotlib you might be able to see this number right of the slider.</span>
<span class="comment-copy">Also check the <code>Slider</code> documentation so you can see the order of the arguments <a href="http://matplotlib.org/1.3.1/api/widgets_api.html#matplotlib.widgets.Slider" rel="nofollow noreferrer">matplotlib.org/1.3.1/api/…</a></span>
<span class="comment-copy">Thanks for help. you answer help me to zoom in, but I want to scroll the chart: The initial window shows a small portion of the data that are short enough for me to see the details without zooming in. If I want to see the rest part of the data, I can scroll and see. Any tips on how to do it? Thank you again and want to buy you a coffee. What's your favorite coffee place?@Andreq</span>
<span class="comment-copy">I'm not sure what you're asking exactly : you mean scrolling horizontally, using your mouse wheel maybe? If that's the case, I'm afraid I do not see how it could be easily done. As for the coffee, thanks, but I'm pretty sure any external compensation is against the rules of SO :). On the other hand, if you find the answer satisfactory, don't forget to approve it :).</span>
<span class="comment-copy">Thank you. Yes i want to scroll it horizontally. Please check the accepted answer for the way to do it. Thank a lot for help!</span>
