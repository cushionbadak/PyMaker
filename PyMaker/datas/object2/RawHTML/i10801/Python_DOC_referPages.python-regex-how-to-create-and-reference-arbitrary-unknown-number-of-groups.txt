<div class="post-text" itemprop="text">
<p>I have a text file consisting of space-separate text values:</p>
<pre><code>a: b c d e f g
h: i j k
l:
m: n
</code></pre>
<p>I do not know how many of these values - right of <code>;</code>- I'll have a priori.</p>
<p>I want to use <a href="https://docs.python.org/3/library/re.html" rel="nofollow">Python groups</a> within a regular expression to be able to refer to each capture.</p>
<p><code>GnuATgtRE = re.compile(br'^\r\n(?P&lt;target&gt;.+): (?P&lt;deps&gt;.*)\r\n#  Implicit rule search has', re.MULTILINE)</code></p>
<p>Currently, <code>&lt;target&gt;</code> references the item to the left of semi-colon and <code>&lt;deps&gt;</code> references everything, in one string, to the right.</p>
<p>I do not know a priori how many <code>deps</code> each <code>target</code> will have.</p>
<p>The syntax <a href="https://docs.python.org/3/library/re.html" rel="nofollow"><code>(?P&lt;text&gt;)</code> is used to create a group which can be used to reference a specific captured sub-regex</a>. </p>
<p>For example, for line 1</p>
<p><code>match_obj.group('target')</code> = <code>a</code>
<code>match_obj.group('deps')</code> = <code>b c d e f g</code></p>
<p>Line 2:</p>
<p><code>match_obj.group('target')</code> = <code>h</code>
<code>match_obj.group('deps')</code> = <code>i j k</code></p>
<p><strong>Question</strong></p>
<p>After I execute <code>match = GnuATgtRE.search(string)</code>, I want to be able to be able to reference each space-separate <code>dep</code> via <code>match.group('some_text')</code>.</p>
<p>The problem is that I don't know if there is a way to create an <strong>arbitrary number of unnamed groups.</strong></p>
<p>For line 1, I'd like to be able to say <code>match.group('&lt;5&gt;')</code> and have that return <code>d</code>. </p>
<p>For line 2, <code>match.group('&lt;5')</code> should return `` since there's only 5 letters.</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://stackoverflow.com/questions/6673686/python-regex-repetition-with-capture-question">this answer</a>.</p>
<blockquote>
<p>Most or all regular expression engines in common use, including in particular those based on the PCRE syntax (like Python's), label their capturing groups according to the numerical index of the opening parenthesis, as the regex is written. So no, you cannot use capturing groups alone to extract an arbitrary, variable number of subsequences from a string.</p>
</blockquote>
<p>A better solution is to just call line.split() on everything after the <code>x:</code> on a line.</p>
</div>
<span class="comment-copy">Is it really an arbitrary number, or is it up to some limit (e.g., 10 or 100)?  Also, you may be better off with <a href="http://pyparsing.wikispaces.com/" rel="nofollow noreferrer"><code>pyparsing</code></a> or another more powerful parser here.</span>
<span class="comment-copy">Why can't you just split group 2 on space?</span>
<span class="comment-copy">@cxw it's pretty arbitrary. This is from the output of <code>make</code>. To be clear, I know I could just do <code>matchObj.group('deps').split()</code> . . . hmmm. I think I just solved my problem.</span>
<span class="comment-copy">I would just go with <code>target, deplist = line.strip().split(':')</code> followed by <code>deps = deplist.strip().split()</code>... No reason to unnecessarily complicate it with regexps...</span>
<span class="comment-copy">I'm using <code>mmap</code> which can only do regex searches with byte array strings.</span>
<span class="comment-copy">Regex should rarely be the first thing you try for text processing. +1 for split.</span>
