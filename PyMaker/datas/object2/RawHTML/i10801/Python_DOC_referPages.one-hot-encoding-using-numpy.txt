<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/29831489/convert-array-of-indices-to-1-hot-encoded-numpy-array">Convert array of indices to 1-hot encoded numpy array</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<p>If the input is zero I want to make an array which looks like this:</p>
<pre><code>[1,0,0,0,0,0,0,0,0,0]
</code></pre>
<p>and if the input is 5:</p>
<pre><code>[0,0,0,0,0,1,0,0,0,0]
</code></pre>
<p>For the above I wrote:</p>
<pre><code>np.put(np.zeros(10),5,1)
</code></pre>
<p>but it did not work.</p>
<p>Is there any way in which, this can be implemented in one line?</p>
</div>
<div class="post-text" itemprop="text">
<p>Usually, when you want to get a one-hot encoding for classification in machine learning, you have an array of indices.</p>
<pre><code>import numpy as np
nb_classes = 6
targets = np.array([[2, 3, 4, 0]]).reshape(-1)
one_hot_targets = np.eye(nb_classes)[targets]
</code></pre>
<p>The <code>one_hot_targets</code> is now</p>
<pre><code>array([[[ 0.,  0.,  1.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  1.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  1.,  0.],
        [ 1.,  0.,  0.,  0.,  0.,  0.]]])
</code></pre>
<p>The <code>.reshape(-1)</code> is there to make sure you have the right labels format (you might also have <code>[[2], [3], [4], [0]]</code>). The <code>-1</code> is a special value which means "put all remaining stuff in this dimension". As there is only one, it flattens the array.</p>
<h2>Copy-Paste solution</h2>
<pre><code>def get_one_hot(targets, nb_classes):
    res = np.eye(nb_classes)[np.array(targets).reshape(-1)]
    return res.reshape(list(targets.shape)+[nb_classes])
</code></pre>
<h2>Package</h2>
<p>You can use <a href="http://mpu.readthedocs.io/en/latest/ml.html#mpu.ml.indices2one_hot" rel="noreferrer">mpu.ml.indices2one_hot</a>. It's tested and simple to use:</p>
<pre><code>import mpu.ml
one_hot = mpu.ml.indices2one_hot([1, 3, 0], nb_classes=5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like : </p>
<pre><code>np.array([int(i == 5) for i in range(10)])
</code></pre>
<p>Should do the trick.
But I suppose there exist other solutions using numpy.</p>
<p>edit : the reason why your formula does not work : np.put does not return anything, it just modifies the element given in first parameter. The good answer while using <code>np.put()</code> is :</p>
<pre><code>a = np.zeros(10)
np.put(a,5,1)
</code></pre>
<p>The problem is that it can't be done in one line, as you need to define the array before passing it to <code>np.put()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use List comprehension:</p>
<pre><code>[0 if i !=5 else 1 for i in range(10)]
</code></pre>
<p>turns to</p>
<pre><code>[0,0,0,0,0,1,0,0,0,0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Taking a quick look at <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.put.html" rel="nofollow">the manual</a>, you will see that <code>np.put</code> does not return a value. While your technique is fine, you are accessing <code>None</code> instead of your result array.</p>
<p>For a 1-D array it is better to just use direct indexing, especially for such a simple case.</p>
<p>Here is how to rewrite your code with minimal modification:</p>
<pre><code>arr = np.zeros(10)
np.put(arr, 5, 1)
</code></pre>
<p>Here is how to do the second line with indexing instead of <code>put</code>:</p>
<pre><code>arr[5] = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that you save your array nowhere. The <code>put</code> function works in place on the array and returns nothing. Since you never give your array a name you can not address it later. So this</p>
<pre><code>one_pos = 5
x = np.zeros(10)
np.put(x, one_pos, 1)
</code></pre>
<p>would work, but then you could just use indexing:</p>
<pre><code>one_pos = 5
x = np.zeros(10)
x[one_pos] = 1
</code></pre>
<p>In my opinion that would be the correct way to do this if no special reason exists to do this as a one liner. This might also be easier to read and readable code is good code.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>np.put</code> mutates its array arg <em>in-place</em>. It's conventional in Python for functions / methods that perform in-place mutation to return <code>None</code>; <code>np.put</code> adheres to that convention. So if <code>a</code> is a 1D array and you do</p>
<pre><code>a = np.put(a, 5, 1)
</code></pre>
<p>then <code>a</code> will get replaced by <code>None</code>.</p>
<p>Your code is similar to that, but it passes an un-named array to <code>np.put</code>.</p>
<p>A compact &amp; efficient way to do what you want is with a simple function, eg:</p>
<pre><code>import numpy as np

def one_hot(i):
    a = np.zeros(10, 'uint8')
    a[i] = 1
    return a

a = one_hot(5) 
print(a)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[0 0 0 0 0 1 0 0 0 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>np.identity</code> or <code>np.eye</code>. You can try something like this with your input i, and the array size s:</p>
<pre><code>np.identity(s)[i:i+1]
</code></pre>
<p>For example, <code>print(np.identity(5)[0:1])</code> will result:</p>
<pre><code>[[ 1.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]
</code></pre>
<p>If you are using TensorFlow, you can use <code>tf.one_hot</code>: <a href="https://www.tensorflow.org/api_docs/python/array_ops/slicing_and_joining#one_hot" rel="nofollow noreferrer">https://www.tensorflow.org/api_docs/python/array_ops/slicing_and_joining#one_hot</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time
start_time = time.time()
z=[]
for l in [1,2,3,4,5,6,1,2,3,4,4,6,]:
    a= np.repeat(0,10)
    np.put(a,l,1)
    z.append(a)
print("--- %s seconds ---" % (time.time() - start_time))

#--- 0.00174784660339 seconds ---

import time
start_time = time.time()
z=[]
for l in [1,2,3,4,5,6,1,2,3,4,4,6,]:
    z.append(np.array([int(i == l) for i in range(10)]))
print("--- %s seconds ---" % (time.time() - start_time))

#--- 0.000400066375732 seconds ---
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure the performance, but the following code works and it's neat.</p>
<pre><code>x = np.array([0, 5])
x_onehot = np.identity(6)[x]
</code></pre>
</div>
<span class="comment-copy">How did it not work?</span>
<span class="comment-copy">Why do you want to do this in one line? If you want to keep it compact, just write a function.</span>
<span class="comment-copy">It is customary to select one of the answers when you have been provided with at least one that solves your problem.</span>
<span class="comment-copy">But how it works? <code>np.eye(nb_classes)</code> should be 6x6 matrix, but it's shape changed to 4x6. Can you eleborate on this?</span>
<span class="comment-copy"><code>np.eye(nb_classes)</code> is a 6x6 matrix. Then I select the rows specified in target. I only select four, so it is a 4x6 matrix.</span>
<span class="comment-copy">this seems to work only for 2-dim targets, but could be generalized for further shapes by executing <code>.reshape(list(targets.shape)+[nb_classes])</code></span>
<span class="comment-copy">@AbhijayGhildyal: That's just about the most <i>inefficient</i> way to accomplish what you want.</span>
<span class="comment-copy">@PM2Ring I know the one-liner I wrote is bad, but do you have any source telling what you should and should not do with list and numpy arrays ?</span>
<span class="comment-copy">@HolyDanna: It's a general rule in Python that a Python loop runs slower than one that executes using C code. So if there's an obvious way to use a C loop instead of a Python one you should use the C loop. And the whole point of using Numpy is to do array processing at C speed, when possible.  I'm not familiar with the numpy source code, but <code>numpy.zeros</code> probably runs even faster than a C <code>for</code> loop, since the CPU can fill a block of memory with a single value <i>very</i> quickly.</span>
<span class="comment-copy">BTW, I'm <i>not</i> saying that your 1st code example is bad. In a non-Numpy program it would be a <i>good</i> way to do this, and it'd be silly to import Numpy just for this operation. But if the program's already using Numpy anyway it makes sense to take advantage of what Numpy has to offer.</span>
<span class="comment-copy">I'll take not of that, so as not to be rude to people</span>
<span class="comment-copy">Using <code>a=np.zeros(10)</code>, I get a slightly faster version with the first version : <code>0.0007712841033935547 seconds</code> against <code>0.0008835792541503906 seconds</code> for the second version</span>
<span class="comment-copy">Try <code>a = np.zeros(10); a[l] = 1</code>; indexed assignment is faster than doing a function call. My <code>one_hot</code> function is a little slower than this inline version, also due to the overhead of the function call, but it's faster than the other techniques. However, this timing info is not very accurate, you should use the <code>timeit</code> module, and use its facitlities to perform your tests hundreds (or thousands) of times to get meaningful results that aren't swamped by the "noise" of other tasks your CPU is performing.</span>
<span class="comment-copy">Thanks. Do you know of any better ways to check code run times?</span>
<span class="comment-copy">As I said, use the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">timeit</a> module. FWIW, here are a couple of my recent answers that use <code>timeit</code> <a href="http://stackoverflow.com/a/38075792/4014959">stackoverflow.com/a/38075792/4014959</a> and <a href="http://stackoverflow.com/a/36030019/4014959">stackoverflow.com/a/36030019/4014959</a></span>
