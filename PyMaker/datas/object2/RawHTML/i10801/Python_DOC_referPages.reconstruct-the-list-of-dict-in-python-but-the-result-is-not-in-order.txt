<div class="post-text" itemprop="text">
<pre><code>list_1 = [{'1': 'name_1', '2': 'name_2', '3': 'name_3',}, 
       {'1': 'age_1', '2': 'age_2' ,'3': 'age_3',}]
</code></pre>
<p>I want to manipulate this list so that the dicts contain all the attributes for a particular ID. The ID itself must form part of the resulting dict. An example output is shown below:</p>
<pre><code>list_2 = [{'id' : '1', 'name' : 'name_1', 'age': 'age_1'},
       {'id' : '2', 'name' : 'name_2', 'age': 'age_2'},
       {'id' : '3', 'name' : 'name_3', 'age': 'age_3'}]
</code></pre>
<p>Then I did following:</p>
<pre><code>&gt;&gt;&gt; list_2=[{'id':x,'name':list_1[0][x],'age':list_1[1][x]} for x in list_1[0].keys()]
</code></pre>
<p>Then it gives:</p>
<pre><code>&gt;&gt;&gt; list_2
    [{'age': 'age_1', 'id': '1', 'name': 'name_1'}, 
     {'age': 'age_3', 'id': '3', 'name': 'name_3'}, 
     {'age': 'age_2', 'id': '2', 'name': 'name_2'}]
</code></pre>
<p>But I don't understand why 'id' is showing in the second position while 'age' showing first?</p>
<p>I tried other ways but the result is the same. Any one can help to figure it out?</p>
</div>
<div class="post-text" itemprop="text">
<p>To keep the order, you should use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">ordered dictionary</a>. Using your sample:</p>
<pre><code>new_list = [OrderedDict([('id', x), ('name', list_1[0][x]), ('age', list_1[1][x])]) for x in list_1[0].keys()]
</code></pre>
<p>Printing the ordered list...</p>
<pre><code>for d in new_list:                                                                                            
    print(d[name], d[age])
</code></pre>
<blockquote>
<p>name_1 age_1 </p>
<p>name_3 age_3</p>
<p>name_2 age_2</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Try using an OrderedDict:</p>
<pre><code>list_1 = [collections.OrderedDict([('1','name_1'), ('2', 'name_2'), ('3', 'name_3')]),
        collections.OrderedDict([('1','age_1'),('2','age_2'),('3', 'age_3')])]

list_2=[collections.OrderedDict([('id',x), ('name',list_1[0][x]), ('age', list_1[1][x])]) 
        for x in list_1[0].keys()]
</code></pre>
<p>This is more likely to preserve the order you want.  I am still new to Python, so this may not be super Pythonic, but I think it will work.</p>
<p>output -</p>
<pre><code>In [24]: list( list_2[0].keys() )
Out[24]: ['id', 'name', 'age']
</code></pre>
<p>Docs:
<a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html#collections.OrderedDict</a></p>
<p>Examples:
<a href="https://pymotw.com/2/collections/ordereddict.html" rel="nofollow noreferrer">https://pymotw.com/2/collections/ordereddict.html</a></p>
<p>Getting the constructors right:
<a href="https://stackoverflow.com/questions/25480089/initializing-an-ordereddict-using-its-constructor">Right way to initialize an OrderedDict using its constructor such that it retains order of initial data?</a></p>
</div>
<span class="comment-copy">I think this is quite the duplicate: <a href="http://stackoverflow.com/q/1867861/42346">stackoverflow.com/q/1867861/42346</a></span>
<span class="comment-copy">python dictionaries has no order. you must you ordered dictionary</span>
