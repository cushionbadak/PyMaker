<div class="post-text" itemprop="text">
<p>I have a folder with about 50,000 text files in it, and I need to see if any of them have lines that end in the CR character only (not CR/LF, or LF) - hex 0x0D.</p>
<p>The following code doesn't return any results, and takes a LONG time to process.</p>
<pre><code>import re
import os

rootDir = 'Z:\Archive\\20160701'
for root, dirs, files in os.walk(rootDir):
    print('--\nroot = ' + rootDir)

    for filename in rootDir:
        file_path = os.path.join(rootDir, filename)
        print('Searching file: %s' % filename)

        with open(file_path, 'r') as f:
            f_content = f.read()
            check = re.search('[\x0D$]', f_content, re.MULTILINE)
            if check:
                print check
                gotit = open('U:\Temp3\\foundit.txt', 'a')
                gotit.write(file_path + '\n')
                gotit.close()
</code></pre>
<p>Thanks in advance for any insight anyone can provide.  I know there's at least one file in the folder that has line breaks as the 0x0D character only.</p>
</div>
<div class="post-text" itemprop="text">
<p>This line is wrong:</p>
<pre><code>for filename in rootDir:    # rootDir is 'Z:\Archive\\20160701'
</code></pre>
<p>Should be:</p>
<pre><code>for filename in files:
</code></pre>
<p>If all the files are in one folder, as you said, it is easier to use <code>os.listdir</code> You don't need all the power of <code>os.walk</code> that gives you the whole tree under the root dir, including sub dirs, and files.</p>
<p>Now, as for using <code>regex</code> to detect the newline characters, the problem is that when Python opens the file in <code>'r'</code> mode, <code>read</code> or <code>readline</code> change the newlines all to be <code>\n</code>.</p>
<p>The option would be to open the file in <code>'rb'</code> mode:</p>
<pre><code>LF = b'\n'
CR = b'\r'
CRLF = b'\r\n'

def sniff(filename):
    with open(filename, 'rb') as f:
        content = f.read()
        if CRLF in content:
            newline = 'CRLF'
        elif LF in content:
            newline = 'LF'
        elif CR in content:
            newline = 'CR'
    return newline
</code></pre>
<p>*nix systems have the <code>file</code> command to determine the file type. <code>file</code> can detect the file type based on "magic number", extension, etc. so that determining the type of text file is a very trivial task for <code>file</code></p>
<p>What kept me <em>waddling</em> for a while is when I tested a text file created on a mac using nano. I got <code>\n</code> instead of the expected <code>\r</code>, until I <a href="https://superuser.com/a/439443">found out</a> that MacOS changed to <code>\n</code> in order to be Unix compliant, leaving the <code>\r</code> to legacy text files.</p>
<p>Hope this helps a bit.\n</p>
<p>EOF</p>
</div>
<span class="comment-copy">Just use <code>r'\r(?!\n)'</code> but read the whole file in before.</span>
<span class="comment-copy">You are opening files in text mode, which is converting all the line endings to <code>\n</code>; as detailed in the <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">documentation</a> on reading and writing files.</span>
<span class="comment-copy">The regex  I suggested was <code>r'\r(?!\n)'</code>. No need doubling the backslashes.</span>
<span class="comment-copy">Yes, but for some reason, when I tried it it didn't work with one, I had to use two slashes. The file I tested it with, is a 520MB json file I downloaded, that happens to have \r\n sequences.</span>
