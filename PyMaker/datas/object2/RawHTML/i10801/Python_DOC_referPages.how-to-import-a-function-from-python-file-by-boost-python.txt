<div class="post-text" itemprop="text">
<p>I am totally new to boost.python. 
I reviewed a lot of recommending of using boost.python to apply with python, however still not easy to understand and find a solution for me.</p>
<p>What I want is to import a function or class that directly from a python "SourceFile"</p>
<p>Example File:
Main.cpp
MyPythonClass.py</p>
<p>Let's says if there is a "Dog" class in "MyPythonClass.py" with "bark()" function, how do I get callback and send argument in cpp?  </p>
<p>I have no idea what I should do!
Please help me!</p>
</div>
<div class="post-text" itemprop="text">
<p>When one needs to call Python from C++, and C++ owns the main function, then one must <em>embed</em> the Python interrupter within the C++ program.  The Boost.Python API is not a complete wrapper around the Python/C API, so one may find the need to directly invoke parts of the Python/C API.  Nevertheless, Boost.Python's API can make interoperability easier.  Consider reading the official Boost.Python <a href="http://www.boost.org/doc/libs/1_61_0/libs/python/doc/html/tutorial/tutorial/embedding.html" rel="noreferrer">embedding tutorial</a> for more information.</p>
<hr/>
<p>Here is a basic skeleton for a C++ program that embeds Python:</p>
<pre class="lang-cpp prettyprint-override"><code>int main()
{
  // Initialize Python.
  Py_Initialize();

  namespace python = boost::python;
  try
  {
    ... Boost.Python calls ...
  }
  catch (const python::error_already_set&amp;)
  {
    PyErr_Print();
    return 1;
  }

  // Do not call Py_Finalize() with Boost.Python.
}
</code></pre>
<p>When embedding Python, it may be necessary to augment the <a href="https://docs.python.org/2/tutorial/modules.html#the-module-search-path" rel="noreferrer">module search path</a> via <a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH" rel="noreferrer"><code>PYTHONPATH</code></a> so that modules can be imported from custom locations.</p>
<pre class="lang-cpp prettyprint-override"><code>// Allow Python to load modules from the current directory.
setenv("PYTHONPATH", ".", 1);
// Initialize Python.
Py_Initialize();
</code></pre>
<p>Often times, the Boost.Python API provides a way to write C++ code in a Python-ish manner.  The following example <a href="http://coliru.stacked-crooked.com/a/e926ffe1ee46fd5a" rel="noreferrer">demonstrates</a> embedding a Python interpreter in C++, and having C++ import a <code>MyPythonClass</code> Python module from disk, instantiate an instance of <code>MyPythonClass.Dog</code>, and then invoking <code>bark()</code> on the <code>Dog</code> instance:</p>
<pre class="lang-cpp prettyprint-override"><code>#include &lt;boost/python.hpp&gt;
#include &lt;cstdlib&gt; // setenv

int main()
{
  // Allow Python to load modules from the current directory.
  setenv("PYTHONPATH", ".", 1);
  // Initialize Python.
  Py_Initialize();

  namespace python = boost::python;
  try
  {
    // &gt;&gt;&gt; import MyPythonClass
    python::object my_python_class_module = python::import("MyPythonClass");

    // &gt;&gt;&gt; dog = MyPythonClass.Dog()
    python::object dog = my_python_class_module.attr("Dog")();

    // &gt;&gt;&gt; dog.bark("woof");
    dog.attr("bark")("woof");
  }
  catch (const python::error_already_set&amp;)
  {
    PyErr_Print();
    return 1;
  }

  // Do not call Py_Finalize() with Boost.Python.
}
</code></pre>
<p>Given a <code>MyPythonClass</code> module that contains:</p>
<pre class="lang-python prettyprint-override"><code>class Dog():
    def bark(self, message):
        print "The dog barks: {}".format(message)
</code></pre>
<p>The above program outputs:</p>
<pre class="lang-none prettyprint-override"><code>The dog barks: woof
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Boost python is used to call cplusplus functions from a python source. Pretty much like the Perl xs module.</p>
<p>If you have a function say bark() in main.cpp, you can use boost python to convert this main.cpp into a python callable module.</p>
<p>Then from python script(assuming link output file is main.so):</p>
<pre><code>import main
main.bark()
</code></pre>
</div>
<span class="comment-copy">Big thank you. Working!!!</span>
<span class="comment-copy">shouldn't you be calling <code>Py_Finalize();</code> at the end?</span>
<span class="comment-copy">@TrevorHickey, no. As noted in the <a href="http://www.boost.org/doc/libs/1_65_1/libs/python/doc/html/tutorial/tutorial/embedding.html" rel="nofollow noreferrer">Boost.Python embedding documentation</a>, <code>Py_Finalize()</code> should not be called to stop the interpreter.</span>
<span class="comment-copy">How can I hide python scripts file contents? Is there anyway to encrypt python files but still decrypt and call python module in c++ runtime?</span>
<span class="comment-copy">Sorry, I think maybe there is some misunderstanding.I have to work in C++ environment, so I want my C++ program directly use Dog.bark() from python.... not in python</span>
<span class="comment-copy">Boost python doesn't help you there. boost is a c++ module. try this <a href="https://docs.python.org/3/extending/embedding.html" rel="nofollow noreferrer">docs.python.org/3/extending/embedding.html</a></span>
