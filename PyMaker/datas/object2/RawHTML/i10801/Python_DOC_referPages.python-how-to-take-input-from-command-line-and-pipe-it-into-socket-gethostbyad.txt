<div class="post-text" itemprop="text">
<p>I have been scouring the internet looking for the answer to this. Please not my python coding skills are not all that great. I am trying to create a command line script that will take the input from the command line like this:</p>
<pre><code>$python GetHostID.py serverName.com   
</code></pre>
<p>the last part is what I am wanting to pass on as a variable to socket.gethostbyaddr("") module. this is the code that I have so far. can someone help me figure out how to put that variable into the (" "). I think the "" is creating problems with using a simple variable name as it is trying to treat it as a string of text as appose to a variable name.
here is the code I have in my script:</p>
<pre><code>#!/bin/python
# 
import sys, os
import optparse
import socket


remoteServer = input("Enter a remote host to scan: ")
remoteServerIP  = socket.gethostbyaddr(remoteServer)
socket.gethostbyaddr('remoteServer')[0]
os.getenv('remoteServer')
print (remoteServerIP)
</code></pre>
<p>any help would be welcome. I have been racking my brain over this...
thanks </p>
</div>
<div class="post-text" itemprop="text">
<p>The command line arguments are available as the list <code>sys.argv</code>, whose first element is the path to the program. There are a number of libraries you can use (argparse, optparse, etc.) to analyse the command line, but for your simple application you could do something like this:</p>
<pre><code>import sys
import sys, os
import optparse
import socket
remoteServer = sys.argv[1]
remoteServerIP = socket.gethostbyaddr(remoteServer)
print (remoteServerIP)
</code></pre>
<p>Running this program with the command line</p>
<pre><code>$ python GetHostID.py holdenweb.com
</code></pre>
<p>gives the output</p>
<pre><code>('web105.webfaction.com', [], ['108.59.9.144'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>os.getenv('remoteserver') does not use the variable remoteserver as an argument. Instead it uses a string 'remoteserver'.</p>
<p>Also, are you trying to take input as a command line argument? Or are you trying to take it as user input? Your problem description and implementation differ here. The easiest way would be to run your script using</p>
<pre><code>python GetHostID.py
</code></pre>
<p>and then in your code include</p>
<pre><code>remoteServer = raw_input().strip().split()
</code></pre>
<p>to get the input you want for remoteserver.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow">sys.argv</a> </p>
<p>for</p>
<pre><code>$python GetHostID.py serverName.com  
</code></pre>
<p><code>sys.argv</code> would be </p>
<pre><code>['GetHostID.py', 'serverName.com'] 
</code></pre>
<p>but for being friendly to the user have a look at the <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow">argparse Tutorial</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, <code>input</code> reads text <em>and evaluates it as a Python expression in the current context</em>.  This is almost never what you want; you want <code>raw_input</code> instead.  However, in Python 3, <code>input</code> does what <code>raw_input</code> did in version 2, and <code>raw_input</code> is not available.</p>
<p>So, if you need your code to work in <em>both</em> Python 2 and 3, you should do something like this after your imports block:</p>
<pre><code># Apply Python 3 semantics to input() if running under v2.
try:
    input = raw_input
    def raw_input(*a, **k):
        raise NameError('use input()')
except NameError:
    pass
</code></pre>
<p>This has no effect in Python 3, but in v2 it replaces the stock <code>input</code> with <code>raw_input</code>, and <code>raw_input</code> with a function that always throws an exception (so you notice if you accidentally use <code>raw_input</code>).</p>
<p>If you find yourself needing to smooth over <em>lots</em> of differences between v2 and v3, the <a href="http://python-future.org/" rel="nofollow">python-future</a> library will probably make your life easier.</p>
</div>
<span class="comment-copy">Why do you think you need to put <code>remoteServer</code> in quotes at all?</span>
<span class="comment-copy">when I do it with out the quotes it seems to error out. File "C:\Bin\Scripts\PyTools\tiniGetHost.py", line 10, in &lt;module&gt;     socket.gethostbyaddr('remoteServer')[0] socket.gaierror: [Errno 11004] getaddrinfo failed</span>
<span class="comment-copy">i removed the quotes, it ran successfully in the python shell, but when i run it under the bash shell, it seems to not notice that i added the server name, and then errors out... âž¤ python tiniGetHost.py serverName Enter a remote host to scan: serverName    # had to take real name for posting.... # Traceback (most recent call last):   File "tiniGetHost.py", line 8, in &lt;module&gt;     remoteServer = input("Enter a remote host to scan: ")   File "&lt;string&gt;", line 1, in &lt;module&gt; NameError: name 'serv' is not defined</span>
<span class="comment-copy">I think you've tripped over one of the really nasty gotchas in the Python 2 standard library.  <a href="https://www.smallsurething.com/the-difference-between-input-and-raw_input-in-python/" rel="nofollow noreferrer">You almost always want <code>raw_input</code>, not <code>input</code>.</a> Or <code>sys.stdin.readline</code>.  Or, for this particular program, <code>sys.argv</code> is even better.</span>
<span class="comment-copy">oh ok, ya in the direct python shell i am using 3.5.2, but in the MobaXterm version i am using 2.7 (i think...) that would explain why in the bash shell it is having a hard time running then.</span>
<span class="comment-copy">awesome, thank you so much! i had another question related to this. for the socket module, is there a function that can be used to tell what remote OS the server is running? i am in a situation where i am running behind a heavely firewalled / security locked down env, so i am not able to install python modules such as scapy... so i am having to rely on what i am able to code with the default python 3.5 package. any ideas would be great.</span>
<span class="comment-copy">Not an easy problem, and I am personally not aware of a library that ,might solve it. Most such "client fingerprinting" relies of arcane knowledge about the differences between TCP/IP stacks and subtle differences between their responses to particular probes. You might do some reading around the <code>nmap</code> utility to get an idea of what's possible, but aggressive client fingerprinting isn't a simple or a common task.</span>
