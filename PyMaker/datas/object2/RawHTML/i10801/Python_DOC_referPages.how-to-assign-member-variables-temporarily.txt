<div class="post-text" itemprop="text">
<p>I often find that I need to assign some member variables temporarily, <em>e.g.</em></p>
<pre><code>old_x = c.x
old_y = c.y
# keep c.z unchanged

c.x = new_x
c.y = new_y

do_something(c)

c.x = old_x
c.y = old_y
</code></pre>
<p>but I wish I could simply write</p>
<pre><code>with c.x = new_x; c.y = new_y:
    do_something(c)
</code></pre>
<p>or even</p>
<pre><code>do_something(c with x = new_x; y = new_y)
</code></pre>
<p>Can Python's decorators or other language features enable this kind of pattern? (I could modify <code>c</code>'s class as needed)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/reference/datamodel.html#context-managers">Context managers</a> may be used for it easily.</p>
<p>Quoting official docs:</p>
<blockquote>
<p>Typical uses of context managers include saving and restoring various
  kinds of global state, locking and unlocking resources, closing opened
  files, etc.</p>
</blockquote>
<p>It seems like saving and restoring state is exactly what we want to do here.</p>
<p>Example:</p>
<pre><code>from contextlib import contextmanager


@contextmanager
def temporary_change_attributes(something, **kwargs):
    previous_values = {k: getattr(something, k) for k in kwargs}
    for k, v in kwargs.items():
        setattr(something, k, v)
    try:
        yield
    finally:
        for k, v in previous_values.items():
            setattr(something, k, v)


class Something(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def say_hello(self):
        print("hello", self.x, self.y)


s = Something(1, 2)
s.say_hello()  # hello 1 2
with temporary_change_attributes(s, x=4, y=5):
    s.say_hello()  # hello 4 5
s.say_hello()  # hello 1 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think a <a href="https://docs.python.org/3/library/contextlib.html" rel="noreferrer"><code>contextmanager</code></a> should do what you want:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def current_instance(c, temp_x, temp_y):
    old_x, old_y = c.x, c.y
    c.x, c.y = temp_x, temp_y
    yield c
    c.x, c.y = old_x, old_y

with current_instance(c, x, y) as c_temp:
    do_something(c_temp) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do this natively using <code>__enter__</code> and <code>__exit__</code>. Simplistic example:</p>
<pre><code>class SomeObject(object):
    def __init__(self):
        self.a = 1
        self.b = 2
        self.c = 3

class Temporary(object):
    def __init__(self, target, **kv):
        self.target = target
        self.to_set = kv
        self.to_restore = {}

    def __enter__(self):
        self.to_restore = map(partial(getattr, self.target), filter(partial(hasattr, self.target), self.to_set.keys()))
        for k,v in self.to_set.items():
            if hasattr(self.target, k):
                self.to_restore[k] = getattr(self.target, k)
            setattr(self.target, k, v)

    def __exit__(self, *_):
        for k,v in self.to_restore.items():
            setattr(self.target, k, v)
        for k in self.to_set.keys():
            if k not in self.to_restore:
                delattr(self.target, k)

o = SomeObject()

print(o.__dict__)
with Temporary(o, a=42, d=1337):
    print(o.__dict__)
print(o.__dict__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>mock</code> provides this functionality, specifically look at the context-manager usage of <a href="https://docs.python.org/3/library/unittest.mock.html#patch-object" rel="nofollow"><code>patch.object</code></a>.  It's in core libraries in python3, and <a href="https://pypi.python.org/pypi/mock" rel="nofollow">available on pypi</a> for older python.</p>
<p>Setup:</p>
<pre><code>&gt;&gt;&gt; class C:
...     def __init__(self, x, y, z):
...         self.x = x
...         self.y = y
...         self.z = z
...         
&gt;&gt;&gt; c = C(0,1,2)
</code></pre>
<p>Usage demo:</p>
<pre><code>&gt;&gt;&gt; print(c.x, c.y, c.z)
0 1 2
&gt;&gt;&gt; with patch.object(c, 'x', 'spam'), patch.object(c, 'y', 'eggs'):
...     print(c.x, c.y, c.z)
...     
spam eggs 2
&gt;&gt;&gt; print(c.x, c.y, c.z)
0 1 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Goofy solution</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
        def __init__(self):
             self._x = []
             self._y = []


        @property
        def x(self):
           return self._x[-1] or None

        @x.setter 
        def x(self, val):
           self._x.append(val)

        def reset_vals(self):
           if len(self._x) &gt; 1:
              self._x.pop()


&gt;&gt;&gt; bar = Foo()
&gt;&gt;&gt; bar.x = 1
&gt;&gt;&gt; bar.x
1
&gt;&gt;&gt; bar.x = 2
&gt;&gt;&gt; bar.x
2
&gt;&gt;&gt; bar.reset_vals()
&gt;&gt;&gt; bar.x
1
&gt;&gt;&gt; bar.reset_vals()
&gt;&gt;&gt; bar.x
1
</code></pre>
<p>Still goofy but less so solution</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
    def __init__(self):
        pass


&gt;&gt;&gt; import copy
&gt;&gt;&gt; bar = Foo()
&gt;&gt;&gt; bar.x = 1
&gt;&gt;&gt; bar.x
1
&gt;&gt;&gt; bar2 = copy.copy(bar)
&gt;&gt;&gt; bar2.x
1
&gt;&gt;&gt; bar2.x = 5
&gt;&gt;&gt; bar2.x
5
&gt;&gt;&gt; bar
&lt;__main__.Foo object at 0x0426A870&gt;
&gt;&gt;&gt; bar.x
1
</code></pre>
</div>
<span class="comment-copy">why not create a new instanceï¼Ÿ</span>
<span class="comment-copy">@HaifengZhang <code>c</code> could have many other variables that aren't modified</span>
<span class="comment-copy">Good call @HaifengZhang, unless <code>do_something(c)</code> assigns to other attributes of <code>c</code>.</span>
<span class="comment-copy">@MaxB  Create a new Class that contains your modified attributes of instance c, and use <code>c</code> for other tasks.</span>
<span class="comment-copy">this is a great answer, but you might want to wrap the internals of the contextmanager in a <code>try/finally</code></span>
