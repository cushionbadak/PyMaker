<div class="post-text" itemprop="text">
<p>If I embed the Python interpreter in a C or C++ program, as in <a href="https://docs.python.org/2.7/extending/embedding.html#pure-embedding" rel="noreferrer">this example</a>, is there any way to limit how long the interpreter runs for? Is there anything to stop the Python code from entering an infinite loop and thus preventing <code>PyObject_CallObject</code> (or equivalent) from ever returning?</p>
<p>Similarly, if the Python code creates a new thread, is there anything to stop this thread from entering an infinite loop and running forever?</p>
</div>
<div class="post-text" itemprop="text">
<p>As you can see in <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_CallObject" rel="nofollow noreferrer">the docs</a>, <code>PyObject_CallObject</code> has no mechanism for limiting how long the function runs.  There is also no Python C API function that I am aware of that allows you to pause or kill a thread used by the interpreter.</p>
<p>We therefore have to be a little more creative in how we stop a thread running.  I can think of 3 ways you could do it (from safest/cleanest to most dangerous...</p>
<h3>Poll your main application</h3>
<p>The idea here is that your Python function which could run for a long time simply calls another function inside your main application, using the C API to see if it should shut down.  A simple True/False result would allow you to terminate gracefully.</p>
<p>This is the safest solution, but requires that you alter your Python code.</p>
<h3>Use exceptions</h3>
<p>Since you are embedding the Interpreter, you are already using the C API and so could use <a href="https://docs.python.org/3/c-api/init.html#c.PyThreadState_SetAsyncExc" rel="nofollow noreferrer">PyThreadState_SetAsyncExc</a> to force an exception to be raised in the offending thread.  You can find an example that uses this API <a href="https://gist.github.com/liuw/2407154" rel="nofollow noreferrer">here</a>.  While it is Python code, the same function will work from your main application.</p>
<p>This solution is a little less safe as it requires the code not to catch the Exception and to remain in a usable state afterwards.</p>
<h3>Use the OS to terminate the thread</h3>
<p>I'm not going to go into this one as it is inherently unsafe.  See <a href="https://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread-in-python">Is there any way to kill a Thread in Python?</a> for some explanations of why.</p>
</div>
<div class="post-text" itemprop="text">
<p>If You need control lag and jitter in some realtime system, embed "StacklessPython" - Python with support co-routines. Used in "Twisted Web Server".</p>
</div>
