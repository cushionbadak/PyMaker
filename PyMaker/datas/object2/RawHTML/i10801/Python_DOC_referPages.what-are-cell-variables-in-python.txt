<div class="post-text" itemprop="text">
<p>Python code objects have an attribute <a href="https://docs.python.org/3/reference/datamodel.html?highlight=co_cellvars#index-55" rel="nofollow noreferrer"><code>co_cellvars</code></a>. The documentation to <a href="http://doc.pypy.org/en/latest/interpreter.html?highlight=cell#code-class" rel="nofollow noreferrer">PyPy's bytecode interpreter</a> often uses the term <em>Cell</em>.</p>
<p>Among other langauges, Rust <a href="http://static.rust-lang.org/doc/0.10/std/cell/index.html" rel="nofollow noreferrer">provides a Cell datatype</a>. Googling suggests they relate to closures somehow.</p>
<p>What is a <em>cell</em>, in the context of a programming language implementation? What problem do cells solve?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <code>cell</code> objects are used to store the <a href="http://en.wikipedia.org/wiki/Free_variable" rel="noreferrer">free variables</a> of a <a href="http://en.wikipedia.org/wiki/Closure_%28computer_programming%29" rel="noreferrer">closure</a>.</p>
<p>Let's say you want a function that always returns a particular fraction of its argument. You can use a closure to achieve this:</p>
<pre><code>def multiplier(n, d):
    """Return a function that multiplies its argument by n/d."""
    def multiply(x):
        """Multiply x by n/d."""
        return x * n / d
    return multiply
</code></pre>
<p>And here's how you can use it:</p>
<pre><code>&gt;&gt;&gt; two_thirds = multiplier(2, 3)
&gt;&gt;&gt; two_thirds(7)
4.666666666666667
</code></pre>
<p>How does <code>two_thirds</code> remember the values of <code>n</code> and <code>d</code>? They aren't arguments to the <code>multiply</code> function that <code>multiplier</code> defined, they aren't local variables defined inside <code>multiply</code>, they aren't globals, and since <code>multiplier</code> has already terminated, its local variables no longer exist, right?</p>
<p>What happens is that when <code>multiplier</code> is compiled, the interpreter notices that <code>multiply</code> is going to want to use its local variables later, so it keeps a note of them:</p>
<pre><code>&gt;&gt;&gt; multiplier.__code__.co_cellvars
('d', 'n')
</code></pre>
<p>Then when <code>multiplier</code> is called, the value of those outer local variables is stored in the returned function's <code>__closure__</code> attribute, as a tuple of <code>cell</code> objects:</p>
<pre><code>&gt;&gt;&gt; two_thirds.__closure__
(&lt;cell at 0x7f7a81282678: int object at 0x88ef60&gt;,
 &lt;cell at 0x7f7a81282738: int object at 0x88ef40&gt;)
</code></pre>
<p>... with their names in the <code>__code__</code> object as <code>co_freevars</code>:</p>
<pre><code>&gt;&gt;&gt; two_thirds.__code__.co_freevars
('d', 'n')
</code></pre>
<p>You can get at the contents of the cells using their <code>cell_contents</code> attribute:</p>
<pre><code>&gt;&gt;&gt; {v: c.cell_contents for v, c in zip(
        two_thirds.__code__.co_freevars,
        two_thirds.__closure__
)}
{'d': 3, 'n': 2}
</code></pre>
<p>You can read more about closures and their implementation in the Python Enhancement Proposal which introduced them: <a href="http://legacy.python.org/dev/peps/pep-0227/" rel="noreferrer">PEP 227 â€” Statically Nested Scopes</a>.</p>
</div>
<span class="comment-copy">In Rust, <code>Cell</code> is just a way of getting around inherited immutability so that you can modify data despite having an immutable reference to it. This is quite a different thing to what Python means by it. "Cell" is a pretty generic term, you know.</span>
<span class="comment-copy">@ChrisMorgan sounds like you're familiar with Cell in both the contexts I mention. Would you be willing to submit an answer?</span>
<span class="comment-copy">I'm not really familiar with the internals of the Python code object representation, but I can guess at what it is meaning by "cell".</span>
