<div class="post-text" itemprop="text">
<p>I want to run a python script that can execute OS (linux) commands , I got few modules that helps me in doing that like os, subprocess . In OS module am not able to redirect the output to a variable . In subprocess.popen am not able to use variable in the arguments. Need someone help in finding the alternative . </p>
<p>Am trying to run some OS commands from python script . for example  df -h output. It works fine with by using some modules like os or subprocess .But am not able to store those output to any variable . </p>
<p>Here am not able to save this output to a variable . How do I save this to a variable. </p>
<p>i saw multiple other options like subprocess.Popen but am not getting proper output.</p>
<p>Below program i used subprocess module but here I have another issue , as the command is big am not able to use variables in subprocess.Popen.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>subprocess</code> method <code>check_output</code></p>
<pre><code>import subprocess
output = subprocess.check_output("your command", shell=True)
</code></pre>
<p>see previously answered SO question here for more info: <a href="https://stackoverflow.com/a/8659333/3264217">https://stackoverflow.com/a/8659333/3264217</a></p>
<p>Also for more info on check_output, see python docs here:
<a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#subprocess.check_output</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use either subprocess or pexpect depending on what is your exact use case.</p>
<p>subprocess can do what os.system does and much more. If you need to start some command, wait for it to exit and then get the output, subprocess can do it:</p>
<pre><code>import subprocess
res = subprocess.check_output('ls -l')
</code></pre>
<p>But if you need to interact with some command line utility, that is repeatedly read/write, then have a look at pexpect module. It is written for Unix systems but if you ever want to go cross-platform, there is a port for Windows called winpexpect.</p>
<p>spawn's attribute 'before' is probably what you need:</p>
<pre><code>p = pexpect.spawn('/bin/ls')
p.expect(pexpect.EOF)
print p.before
</code></pre>
<p>(see the <a href="http://pexpect.readthedocs.io/en/stable/api/pexpect.html#spawn-class" rel="nofollow">docs</a>)</p>
</div>
<span class="comment-copy">shantojosee@srv-dcb-erp-mgnt01:~/python&gt; cat ping #!/usr/bin/python import subprocess  # Ask the user for input host = raw_input("Enter a host to ping: ")  # Set up the echo command and direct the output to a pipe p1 = subprocess.Popen(['ping', '-c 2', host], stdout=subprocess.PIPE)  # Run the command output = p1.communicate()[0]  print output shantojosee@srv-dcb-erp-mgnt01:~/python&gt;</span>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/38569772/edit">edit</a> your question to add code, not the comments section</span>
