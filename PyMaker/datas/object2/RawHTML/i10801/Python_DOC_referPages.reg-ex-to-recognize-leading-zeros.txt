<div class="post-text" itemprop="text">
<p>I'm working on a program that searches all the files in my database and groups them based on what number is in the file name (from 001 to 100). </p>
<p>The only problem is that python interprets '001' as '1', but '001' is  the exact number in the file name, and since I'm using regular expressions to search it doesn't recognize the numbers the way I want it to.<br/>
Would really appreciate some help! Here's my code so far:</p>
<pre><code>import sys
import os
import re
import glob

time_data = open("time_data.txt", "w")
space_data = open("space_data.txt", "w")


folder_list = ['/Users/fenyolab/Downloads/root images/pet week img seq - removed 621 and after - ch1 registered', 'C:/Users/fenyolab/Downloads/root images/0329 to 033116 - WERSCR regen - STELLAR - registered', 'C:/Users/fenyolab/Downloads/root images/0406 to 040816 - H2BIAAWOX regen - GOOD - pt II - REGISTERED']


def stack_at_time_point(direc, time_point):
    time_list = []
    for x in glob.glob('%s/*' % direc):
        if re.search("t.*%s_z" % time_point, x) != None and re.search('_c1.*', x) != None:
            time_list.append(x)
    for i in time_list:
        time_data.write("%s\n" % i)

def stack_at_zlocation(direc, location):
    location_list = []
    for x in glob.glob('%s/*' % direc):
        if re.search("_z.*%s_." % location, x) != None and re.search('_c1.*', x) != None:
            location_list.append(x)
    for i in location_list:
        space_data.write("%s\n" % i)

for i in folder_list:
    for x in xrange(100):
        stack_at_zlocation(i, x)
        space_data.write("\n\n\n")
        stack_at_time_point(i, x)
        time_data.write("\n\n\n")

space_data.close()
time_data.close()

print "Done."
</code></pre>
<p>The regex <code>"_z.*%s_." % location</code> would match to <code>_z023_</code> if the specified location is 23, but if the specified location is 1, the program will return <code>_z001_, _z011_, _z021_, _z031_, _z041_ ... _z091_.</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>You use <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" rel="nofollow">printf-style string formatting</a>. Using printf-style formatting, you may specify leading zereos and a field width.</p>
<p>Replace your <code>%s</code> with <code>%03d</code>:</p>
<pre><code>re.search("t.*%03d_z" % time_point, x) 
</code></pre>
<p>and</p>
<pre><code>re.search("_z.*%03d_." % location, x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Suggest that you build an index based on a flexible length number portion and use this to lookup the appropriate file. E.g.:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; locations = ['_z{0:03d}_'.format(x) for x in range(1,101)]
&gt;&gt;&gt;
&gt;&gt;&gt; def create_zindex(names):
...   reg = re.compile('_z(\d+)_')
...   result = {}
...   for name in names:
...     m = reg.search(name)
...     if not m:
...       print "Can't find z index in {0!r}".format(name)
...       continue
...     zindex = int(m.groups()[0])
...     if zindex in result:
...       print "Duplicate z-index {0} - {1}".format(name,result[zindex])
...       continue
...     result[zindex] = name
...   return result
...
&gt;&gt;&gt; print locations
['_z001_', '_z002_', '_z003_', '_z004_', '_z005_', '_z006_', '_z007_', '_z008_', '_z009_', '_z010_', '_z011_', '_z012_', '_z013_', '_z014_', '_z015_', '_z016_', '_z017_', '_z018_', '_z019_', '_z020_', '_z021_', '_z022_', '_z023_', '_z024_', '_z025_', '_z026_', '_z027_', '_z028_', '_z029_', '_z030_', '_z031_', '_z032_', '_z033_', '_z034_', '_z035_', '_z036_', '_z037_', '_z038_', '_z039_', '_z040_', '_z041_', '_z042_', '_z043_', '_z044_', '_z045_', '_z046_', '_z047_', '_z048_', '_z049_', '_z050_', '_z051_', '_z052_', '_z053_', '_z054_', '_z055_', '_z056_', '_z057_', '_z058_', '_z059_', '_z060_', '_z061_', '_z062_', '_z063_', '_z064_', '_z065_', '_z066_', '_z067_', '_z068_', '_z069_', '_z070_', '_z071_', '_z072_', '_z073_', '_z074_', '_z075_', '_z076_', '_z077_', '_z078_', '_z079_', '_z080_', '_z081_', '_z082_', '_z083_', '_z084_', '_z085_', '_z086_', '_z087_', '_z088_', '_z089_', '_z090_', '_z091_', '_z092_', '_z093_', '_z094_', '_z095_', '_z096_', '_z097_', '_z098_', '_z099_', '_z100_']
&gt;&gt;&gt; print create_zindex(locations)
{1: '_z001_', 2: '_z002_', 3: '_z003_', 4: '_z004_', 5: '_z005_', 6: '_z006_', 7: '_z007_', 8: '_z008_', 9: '_z009_', 10: '_z010_', 11: '_z011_', 12: '_z012_', 13: '_z013_', 14: '_z014_', 15: '_z015_', 16: '_z016_', 17: '_z017_', 18: '_z018_', 19: '_z019_', 20: '_z020_', 21: '_z021_', 22: '_z022_', 23: '_z023_', 24: '_z024_', 25: '_z025_', 26: '_z026_', 27: '_z027_', 28: '_z028_', 29: '_z029_', 30: '_z030_', 31: '_z031_', 32: '_z032_', 33: '_z033_', 34: '_z034_', 35: '_z035_', 36: '_z036_', 37: '_z037_', 38: '_z038_', 39: '_z039_', 40: '_z040_', 41: '_z041_', 42: '_z042_', 43: '_z043_', 44: '_z044_', 45: '_z045_', 46: '_z046_', 47: '_z047_', 48: '_z048_', 49: '_z049_', 50: '_z050_', 51: '_z051_', 52: '_z052_', 53: '_z053_', 54: '_z054_', 55: '_z055_', 56: '_z056_', 57: '_z057_', 58: '_z058_', 59: '_z059_', 60: '_z060_', 61: '_z061_', 62: '_z062_', 63: '_z063_', 64: '_z064_', 65: '_z065_', 66: '_z066_', 67: '_z067_', 68: '_z068_', 69: '_z069_', 70: '_z070_', 71: '_z071_', 72: '_z072_', 73: '_z073_', 74: '_z074_', 75: '_z075_', 76: '_z076_', 77: '_z077_', 78: '_z078_', 79: '_z079_', 80: '_z080_', 81: '_z081_', 82: '_z082_', 83: '_z083_', 84: '_z084_', 85: '_z085_', 86: '_z086_', 87: '_z087_', 88: '_z088_', 89: '_z089_', 90: '_z090_', 91: '_z091_', 92: '_z092_', 93: '_z093_', 94: '_z094_', 95: '_z095_', 96: '_z096_', 97: '_z097_', 98: '_z098_', 99: '_z099_', 100: '_z100_'}
</code></pre>
</div>
<span class="comment-copy">Is the letter <code>z</code> always followed by a three-digit, zero-padded number?</span>
<span class="comment-copy">Yes! Unfortunately, that's how the files were given to me, and there are too many thousands to manually rename.</span>
<span class="comment-copy">In that case, as @Robáµ© points out use <code>%03d</code> instead of <code>%s</code>.</span>
