<div class="post-text" itemprop="text">
<p>I am running a sample python program on my Mac (El Capitan, 10.11.5)<br/>
I have a the default version of python installed (2.6) and on top of that I installed python 2.7 and 3.5.  I need matplotlib on my 2.7 version. </p>
<p>I installed it with pip (not pip3) and I don't know why it got installed on python 3.5. </p>
<p>If I type <code>pip list</code> this is the output: </p>
<pre><code>cycler (0.10.0)
Django (1.8.4)
matplotlib (1.5.1)
numpy (1.11.1)
pip (8.1.2)
pyparsing (2.1.5)
python-dateutil (2.5.3)
pytz (2016.6.1)
selenium (2.53.6)
setuptools (19.4)
six (1.10.0)
wheel (0.26.0)
</code></pre>
<p><code>which python</code> outputs: <code>/usr/local/bin/python</code> </p>
<p>My path is:</p>
<pre><code>/usr/local/share/python3:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
</code></pre>
<p>In <code>/usr/local/share/python3</code>: I have python 3.5, in <code>/usr/local/bin</code>: python 2.7 and then in <code>/usr/bin</code> the default python. </p>
<p>When I run in my program <code>from matplotlib import pyplot as plt</code> and try to use it I get: </p>
<blockquote>
<p>ImportError: No module named matplotlib</p>
</blockquote>
<p>I think the problem is that matplotlib is installed on python3.5 site-package. How could I fix this? </p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I have a the default version of python installed (2.6) and on top of that I installed python 2.7 and 3.5. I need matplotlib on my 2.7 version. </p>
</blockquote>
<p>that's genereally not a problem, however you need to make sure the python environments are not mixed up. </p>
<blockquote>
<p>I think the problem is that matplotlib is installed on python3.5 site-package. How could I fix this? </p>
</blockquote>
<p><strong>1. Use python's virtualenv feature</strong></p>
<p>My recommendation is to use <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" rel="nofollow"><code>virtualenv</code></a> *):</p>
<pre><code># for a python 3.5 environment
$ cd /path/to/&lt;project with python 3&gt;
$ PATH="/path/to/python3.x;$PATH" python -m venv myenv

# for a python 2.7 environment
$ cd /path/to/&lt;project with python 2&gt;
$ PATH="/path/to/python2.7;$PATH" virtualenv myenv
</code></pre>
<p>This will create clean per-project python environments with their seperate <code>site-packages</code>. With that you can work on your project (or even multiple projects) that have different packages or package versions installed, without them interfering. </p>
<p><em>That said, before you move any further, open a new Terminal to make sure all path are reset to a clean state.</em></p>
<p><strong>2. Re-Install packages into your fresh virtualenv</strong></p>
<p>Activate the environment and re-install the required packages into the project's environment using</p>
<pre><code># assuming the list of packages is in /path/to/project/requirements.txt
$ cd /path/to/project
$ source myenv/bin/activate
$ pip install -r requirements.txt
</code></pre>
<p>Once you have done this, you should be able to import matplotlib lib just fine:</p>
<pre><code>python -c 'import matplotlib; print matplotlib'
&lt;module 'matplotlib' from '/path/to/python/site-packages/matplotlib/__init__.pyc'&gt;
</code></pre>
<p><strong>3. Give yourself a break</strong></p>
<p>To simplify using virtualenvs try <a href="http://virtualenvwrapper.readthedocs.io/en/latest/index.html" rel="nofollow"><code>virtualenvwrapper</code></a>. This adds a couple of commands to your system to simplify the handling of virtualenvs, e.g.:</p>
<pre><code># create new environments
$ mkvirtualenv foo
# activate a particular environment
$ workon foo
# list packages in your environment 
$ lssitepackages 
(...)
</code></pre>
<p>*) Note that Python 3 provides the <a href="https://docs.python.org/3/library/venv.html" rel="nofollow"><code>venv</code></a> package as part of the standard library, whereas Python 2.7 requires that you install the <code>virtualenv</code> package first.</p>
</div>
<span class="comment-copy">please check <code>python -m site</code>, I guess  the <code>python</code> binary runs from a different environment than pip has you believe.</span>
<span class="comment-copy">You could <code>ls</code> into the python site-packages to be sure exactly where it's installed</span>
<span class="comment-copy">To further add up on what @miraculixx said, using <code>pip --version</code> will not only tell you the Pip version but also for which python install it is configured.</span>
<span class="comment-copy">And a <i>which pip</i> tells you where it was found too.</span>
