<div class="post-text" itemprop="text">
<p>Given a real number between 0 and 1 (for example 0.2836) I want to return only the number without the dot (for example in this case from 0.2836 -&gt; 2836 or 02836). I was trying to use python to do this but I just started and I need some help.</p>
</div>
<div class="post-text" itemprop="text">
<p>As long as you have a number, the following should do:</p>
<pre><code>&gt;&gt;&gt; number = 0.2836
&gt;&gt;&gt; int(str(number).replace('.', ''))
2836
</code></pre>
<p>If a <code>.</code> is not found in the string, <a href="https://docs.python.org/2/library/stdtypes.html#str.replace" rel="nofollow"><code>str.replace</code></a> just returns the original string.</p>
<p>With more numbers:</p>
<pre><code>&gt;&gt;&gt; int(str(1).replace('.', ''))
1
&gt;&gt;&gt; int(str(1.2).replace('.', ''))
12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to remove an unwanted character from a strip is to call its <code>.replace</code> method with an empty string as the second argument:</p>
<pre><code>x = str(123.45)
x = x.replace('.','')
print(x)                 # Prints 12345
</code></pre>
<p>Note, this would leave any leading zeros (i.e. <code>0.123</code> using this method would result in <code>0123</code>)</p>
<p>If you know there are always, say, 4 numbers after the decimal (and in the case that there are less, you want trailing zeros), you could multiply the number by an appropriate factor first:</p>
<pre><code>x = 123.4567
x *= 10000
x = str(int(x))          # Convert float to integer first, then to string
print(x)                 # Prints 1234567
</code></pre>
<p>There are other options, but this may point you in the right direction.</p>
</div>
<span class="comment-copy">Show what you have tried. (and you mean <i>period</i>, not comma)</span>
<span class="comment-copy">I haven't tried anything because I don't know where to begin</span>
<span class="comment-copy"><code>str(number).replace('.','')</code></span>
<span class="comment-copy"><code>number = number.translate(None, '.').lstrip('0')</code></span>
<span class="comment-copy"><i>What have you tried</i> to read on the Python documentation, then?</span>
<span class="comment-copy">As far as I can see the command works with numbers with less than 12 digits after the comma, is there a way to have more digits returned?</span>
<span class="comment-copy">@Peterix <a href="https://docs.python.org/3/tutorial/floatingpoint.html#floating-point-arithmetic-issues-and-limitations" rel="nofollow noreferrer">Floating Point Arithmetic: Issues and Limitations</a></span>
