<div class="post-text" itemprop="text">
<p>I have a method in Python that looks like this (in <code>comicfile.py</code>):</p>
<pre><code>from zipfile import ZipFile

...

class ComicFile():
    ...

    def page_count(self):
        """Return the number of pages in the file."""
        if self.file == None:
            raise ComicFile.FileNoneError()

        if not os.path.isfile(self.file):
            raise ComicFile.FileNotFoundError()

        with ZipFile(self.file) as zip:
            members = zip.namelist()
            pruned = self.prune_dirs(members)
            length = len(pruned)
            return length
</code></pre>
<p>I'm trying to write a unit test for this (I've already tested <code>prune_dirs</code>), and so for this is what I have (<code>test_comicfile.py</code>):</p>
<pre><code>import unittest
import unittest.mock

import comicfile

...

class TestPageCount(unittest.TestCase):

    def setUp(self):
        self.comic_file = comicfile.ComicFile()

    @unittest.mock.patch('comicfile.ZipFile')
    def test_page_count(self, mock_zip_file):
        # Store as tuples to use as dictionary keys.
        members_dict = {('dir/', 'dir/file1', 'dir/file2'):2,
                        ('file1.jpg', 'file2.jpg', 'file3.jpg'):3
        }

        # Make the file point to something to prevent FileNoneError.
        self.comic_file.file = __file__

        for file_tuple, count in members_dict.items():
            mock_zip_file.return_value.namelist = list(file_tuple)
            self.assertEqual(count, self.comic_file.page_count())
</code></pre>
<p>When I run this test, I get the following:</p>
<pre><code>F..ss....
======================================================================
FAIL: test_page_count (test_comicfile.TestPageCount)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/mock.py", line 1157, in patched
    return func(*args, **keywargs)
  File "/Users/chuck/Dropbox/Projects/chiv/chiv.cbstar/test_comicfile.py", line 86, in test_page_count
    self.assertEqual(count, self.comic_file.page_count())
AssertionError: 2 != 0

----------------------------------------------------------------------
Ran 9 tests in 0.010s

FAILED (failures=1, skipped=2)
</code></pre>
<p>OK, so <code>self.comic_file.page_count()</code> is returning <code>0</code>. I tried placing the following line after <code>members = zip.namelist()</code> in <code>page_count</code>.</p>
<pre><code>print('\nmembers -&gt; ' + str(members))
</code></pre>
<p>During the test, I get this:</p>
<pre><code>members -&gt; &lt;MagicMock name='ZipFile().__enter__().namelist()' id='4483358280'&gt;
</code></pre>
<p>I'm quite new to unit testing and am quite nebulous on using <code>unittest.mock</code>, but my understanding is that <code>mock_zip-file.return_value.namelist = list(file_tuple)</code> should have made it so that the <code>namelist</code> method of the <code>ZipFile</code> class would return each of the <code>file_tuple</code> contents in turn. What it <em>is</em> doing I have no idea.</p>
<p>I think what I'm trying to do here is clear, but I can't seem to figure out how to override the <code>namelist</code> method so that my unit test is only testing this one function instead of having to deal with <code>ZipFile</code> as well.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ZipFile</code> is instantiated as a <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow">context manager</a>.  to <a href="https://docs.python.org/3/library/unittest.mock.html#calling" rel="nofollow">mock</a> it you have to refer to its <code>__enter__</code> method.</p>
<p><code>mock_zip_file.return_value.__enter__.return_value.namelist.return_value = list(file_tuple)</code></p>
<p>What you're trying to do is very clear, but the context manager adds complexity to the mocking. </p>
<hr/>
<p>One trick is that when a mock registers all calls made to it, in this example it is saying it has a call at:</p>
<p><code>members -&gt; &lt;MagicMock name='ZipFile().__enter__().namelist()' id='4483358280'&gt;</code></p>
<p>This can guide you in registering your mocked object, replace all <code>()</code> with <code>return_value</code></p>
</div>
<span class="comment-copy">Your code is confusing.  Are 'ComicFile' and 'comicfile' 1 class (once misspelled) or 2?  Should 'Zipfile' in the first snippet by 'self.Zipfile'?  Without knowing the details, I wonder if you even need the mock.  Each test should assume that everything else works.  You only question that when a test fails.  There needs to be a positive reason to mock something.  For instance, 'the call will fail in the test setting' or 'calling a real object takes too much time or space' or 'the return is not deterministic'.</span>
<span class="comment-copy">It's quite possible that I'm using non-Pythonic naming conventions, although I'm trying to conform to them. <code>ComicFile</code> is the class, <code>comicfile</code> is the module containing the class. <code>ZipFile</code> is imported via <code>from zipfile import ZipeFile</code>. I <i>think</i> I need to mock because if I don't, in order to test this I'd actually need to have zip files in the file system, and I just want to test that, if a zip file object returns a <code>namelist</code>, this function correctly counts the number of files.</span>
<span class="comment-copy">mock IS confusing, especially regarding context managers.</span>
<span class="comment-copy">Mocking an external resource <i>is</i> a good use.  If I were <i>not</i> using it as a context manager and were only making the one function call, I might temporarily replace Zipfile with "class Zipfile:\n  def namelist(): return ...".  But for this case, I also learned something from dm03514's great answer.</span>
<span class="comment-copy">OK, first, tyvm. I copied and pasted and got the test to work and the prints I'd placed throughout the code show what I expect them to (the mocked members). Of course, I don't yet understand <i>why</i> it works, that's going to bug me until I figure it out. I've read the <code>mock</code> docs a few times, but I'll take a look at the article you linked to and perhaps that'll help me understand what that kind of code means.</span>
<span class="comment-copy">I (think) I understand now. If I'd set <code>zip</code> without the <code>with</code> block, but with just <code>zip = ZipFile...</code>, then <code>mock_zip_file.return_value.namelist.return_value = list(file_tuple)</code> would have worked. The <code>__enter__</code> in the <code>print</code> you quoted should have alerted me that the path I was using to get to <code>namevalue</code> was incorrect.</span>
