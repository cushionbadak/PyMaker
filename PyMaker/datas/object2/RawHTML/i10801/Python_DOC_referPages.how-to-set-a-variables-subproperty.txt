<div class="post-text" itemprop="text">
<p>I am a newbie to Python. I got some Python sample code from a software vendor who extended their software API with boost.python so we can call them in Python. I am confused with some of the segments, such as:</p>
<pre class="lang-py prettyprint-override"><code>settings = zoo.AddAnimalSettings(carni_bird_list)
settings.Name = 'birds'
settings.Type = settings.Type.enum.Bird
settings.water_min = 1, units.Litre
settings.food_min = 10, units.Gram
</code></pre>
<p>All the variable names are replaced to be these funny things anyway, just for explanation of the general idea. </p>
<p>So here the problem is in the 3rd line. How can we set the variable <code>settings.Type</code> with its sub property <code>settings.Type.enum.Bird</code>, where <code>enum.Bird</code> I suppose is some kind of enum of different kind of animals, which is a sub-property of <code>settings.Type</code>?</p>
<p>I tried doing some test to add one line following the above 5 lines to see if <code>enum.Bird</code> is still there:</p>
<pre><code>settings.Type = settings.Type.enum.Bird
</code></pre>
<p>and it works ok. 
So for this instance <code>settings</code>, it's sub property <code>Type</code> is not overwritten by its sub property of <code>enum.Bird</code>, it still knows <code>enum.Bird</code> is its sub-property. </p>
<p>Can you advise if I need to implement this line in Python, how can I do that?</p>
<p>I suppose it would be a quite interesting knowledge for people learning Python, so I raised this question here for discussing. I am trying to think in a C++ way, but I didn't figure it out.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't really see what's the issue. Consider an <code>Enum</code> defined in python:</p>
<pre><code>import enum


class Type(enum.Enum):
    Bird = 0
    Cat = 1
</code></pre>
<p>The <code>Type.Bird</code> and <code>Type.Cat</code> are <strong>instances</strong> of the <code>Type</code> class:</p>
<pre><code>&gt;&gt;&gt; Type.Bird
&lt;Type.Bird: 0&gt;
&gt;&gt;&gt; Type.Cat
&lt;Type.Cat: 1&gt;
</code></pre>
<p>As such they have access to their own class, which is <code>Type</code>:</p>
<pre><code>&gt;&gt;&gt; Type.Bird.__class__
&lt;enum 'Type'&gt;
</code></pre>
<p>Now you can just add a <code>property</code> to the <code>Type</code> class and obtain that behaviour:</p>
<pre><code>class Type(enum.Enum):
    Bird = 0
    Cat = 1

    @property
    def enum(self):
        return self.__class__
</code></pre>
<p>and now you have:</p>
<pre><code>&gt;&gt;&gt; Type.Bird
&lt;Type.Bird: 0&gt;
&gt;&gt;&gt; Type.Bird.enum
&lt;enum 'Type'&gt;
&gt;&gt;&gt; Type.Bird.enum.Bird
&lt;Type.Bird: 0&gt;
&gt;&gt;&gt; Type.Bird.enum.Cat
&lt;Type.Cat: 1&gt;
</code></pre>
<hr/>
<p>Note that while the above allows you to write <code>Bird.enum</code> doesn't allow you to access as in <code>Type.enum</code> because this would return the <code>property</code> object.</p>
<p>To obtain the exact behaviour you see in that code you could:</p>
<ul>
<li><p>Set the <code>settings.Type</code> attribute to be an instance of <code>Type</code> (possibly an <code>Invalid</code> one) and be done:</p>
<pre><code>def AddAnimalSettings(*args)
    settings = MyClass(*args)
    settings.Type = Type.Bird
    return settings
</code></pre></li>
<li><p>Replace the use of <code>property</code> with a custom made descriptor that will handle the access via the class too.  In this case read <a href="https://docs.python.org/3/howto/descriptor.html#properties" rel="nofollow">the documentation about <code>property</code></a> which also provides its python code equivalent. The case you have to change is <code>__get__</code> when <code>obj is None</code>:</p>
<pre><code>class MyProperty(object):

    # omissis

    def __get__(self, obj, objtype=None):
        if obj is None:
            return objtype   # &lt;-- changed this line
        if self.fget is None:
            raise AttributeError("unreadable attribute")
        return self.fget(obj)
</code></pre>
<p>Use this as:</p>
<pre><code>class Type(enum.Enum):
    Bird = 0
    Cat = 1

    @MyProperty
    def enum(self):
        return self.__class__
</code></pre>
<p>And now you have:</p>
<pre><code>&gt;&gt;&gt; Type.enum
&lt;enum 'Type'&gt;
</code></pre>
<p>so that <code>Type.enum.Bird</code> works.</p></li>
</ul>
</div>
<span class="comment-copy">That's a really weird API, if what you've written is really representative of the vendor's code samples. We can tell you what it would ordinarily do, but if the API actually works that way, they've probably set up something weird that changes things in an important way. Are you sure you didn't mix up two similar names or something?</span>
<span class="comment-copy">oh, thanks! I am sure I didn't mix up similar names. Actually the vendor uses this method everywhere.</span>
<span class="comment-copy">There are two ways of doing this. One involves assigning to the attribute in the initializer, and the other involves returning a class or instance from a descriptor. Both are very strange.</span>
<span class="comment-copy">The issue is that <code>settings.Type</code> either contains or returns a class or namespace that contains this enum class.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams I don't understand your comment. I believe the initial value of <code>settings.Type</code> is just a default value, so is just one of the instances of the enum (they may add an <code>Invalid</code> case that is handled especially).</span>
<span class="comment-copy">Yes, and it is very strange to do it that way.</span>
<span class="comment-copy">Hi @Bakuriu, thank you for your answer. I really new to python...but can you confirm that after <code>settings.Type = Type.Bird</code>, <code>settings.Type </code> still has the sub enum property? I tried your code, and if I try &gt;&gt;&gt;type(settings.Type), I got &lt;type 'int'&gt;</span>
<span class="comment-copy">@georgeandrew I don't think that you are using the same code. you must subclass <code>Enum</code> for this to work. If you don't want to then you have to create those instances manually and add them as class attributes.</span>
