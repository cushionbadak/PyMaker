<div class="post-text" itemprop="text">
<p>I am having trouble understanding how the deque works in the snippet of code below, while trying to recreate a queue and a stack in Python.</p>
<p><strong>Stack Example - Understood</strong></p>
<pre><code>stack = ["a", "b", "c"]

# push operation
stack.append("e")
print(stack)

# pop operation
stack.pop()
print(stack)
</code></pre>
<p>As expected when pushing and popping, the "e" goes Last In, First Out (LIFO). My question is with the example below.</p>
<p><strong>Queue Example - Not Understanding</strong></p>
<pre><code>from collections import deque

dq = deque(['a','b','c'])
print(dq)

# push
dq.append('e')
print(dq)

# pop
dq.pop()
print(dq)
</code></pre>
<p>When pushing and popping, the "e" goes Last In, First Out (LIFO). Shouldn't it be First In, First Out (FIFO)?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="noreferrer">A deque is a generalization of stack and a queue (It is short for "double-ended queue")</a>.</p>
<p>Thus, the pop() operation still causes it to act like a stack, just as it would have as a list. To make it act like a queue, use the popleft() command. Deques are made to support both behaviors, and this way the pop() function is consistent across data structures. In order to make the deque act like a queue, you must use the functions that correspond to queues. So, replace pop() with popleft() in your second example, and you should see the FIFO behavior that you expect.</p>
<p>Deques also support a max length, which means when you add objects to the deque greater than the maxlength, it will "drop" a number of objects off the opposite end to maintain its max size.</p>
</div>
<span class="comment-copy">You should check out the <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>deque</code></a> documentation.  You might be looking for <a href="https://docs.python.org/3/library/collections.html#collections.deque.popleft" rel="nofollow noreferrer"><code>dq.popleft()</code></a> (or <code>.appendleft()</code>).  In either case, the "de" in dequeue stands for "double-ended".</span>
<span class="comment-copy">Why should it be any different?</span>
