<div class="post-text" itemprop="text">
<p><code>np.where</code> has the semantics of a vectorized if/else (similar to Apache Spark's <code>when</code>/<code>otherwise</code> DataFrame method). I know that I can use <code>np.where</code> on pandas <code>Series</code>, but <code>pandas</code> often defines its own API to use instead of raw <code>numpy</code> functions, which is usually more convenient with <code>pd.Series</code>/<code>pd.DataFrame</code>.</p>
<p>Sure enough, I found <code>pandas.DataFrame.where</code>. However, at first glance, it has a completely different semantics. I could not find a way to rewrite the most basic example of <code>np.where</code> using pandas <code>where</code>:</p>
<pre><code># df is pd.DataFrame
# how to write this using df.where?
df['C'] = np.where((df['A']&lt;0) | (df['B']&gt;0), df['A']+df['B'], df['A']/df['B'])
</code></pre>
<p>Am I missing something obvious? Or is pandas <code>where</code> intended for a completely different use case, despite same name as <code>np.where</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>(df['A'] + df['B']).where((df['A'] &lt; 0) | (df['B'] &gt; 0), df['A'] / df['B'])
</code></pre>
<p>The difference between the <code>numpy</code> <code>where</code> and <code>DataFrame</code> <code>where</code> is that the default values are supplied by the <code>DataFrame</code> that the <code>where</code> method is being called on (<a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.where.html">docs</a>).</p>
<p>I.e.</p>
<pre><code>np.where(m, A, B)
</code></pre>
<p>is roughly equivalent to</p>
<pre><code>A.where(m, B)
</code></pre>
<p>If you wanted a similar call signature using pandas, you could take advantage of <a href="https://docs.python.org/3/tutorial/classes.html#method-objects">the way method calls work in Python</a>:</p>
<pre><code>pd.DataFrame.where(cond=(df['A'] &lt; 0) | (df['B'] &gt; 0), self=df['A'] + df['B'], other=df['A'] / df['B'])
</code></pre>
<p>or without kwargs (Note: that the positional order of arguments is different from the <code>numpy</code> <code>where</code> <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html">argument order</a>):</p>
<pre><code>pd.DataFrame.where(df['A'] + df['B'], (df['A'] &lt; 0) | (df['B'] &gt; 0), df['A'] / df['B'])
</code></pre>
</div>
<span class="comment-copy">The docstring <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.where.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/generated/â€¦</a> seems to explain it reasonably well (althought it could use an example or two).  Pay attention to the short description, and the description of the <code>cond</code> and <code>other</code> arguments, but ignore the option for these arguments to be callable.</span>
<span class="comment-copy">@WarrenWeckesser On the second reading of the docs, I think I got it... It's something like <code>(df.A + df.B).where((df['A']&lt;0) | (df['B']&gt;0), df.A/df.B)</code>, right? I'll delete my question I guess.</span>
<span class="comment-copy">@max: No don't delete. This will likely help someone in the future.</span>
<span class="comment-copy">if you would like to show an example in the doc string would be a great contribution !</span>
<span class="comment-copy">@Jeff Just submitted a PR. Do you have any resources for understanding pandas's source code structure at a high level (e.g. extant docs/ posts on developer forums)? I read through the contribution/development docs that I found and didn't see anything resembling this kind of 5000-ft view of the source code.</span>
<span class="comment-copy">And what do we do when we want a single value if condition is satisfied? We can't really say <code>1.where(df['A']&gt;df['B'], other=df['C'])</code></span>
<span class="comment-copy">@max Make a new DataFrame with same index that is filled with ones.</span>
<span class="comment-copy">@Alex, Thank you!  --I was using a pd.Dataframe instance and not the class object pd.DataFrame.  Using "pd.DataFrame" works.</span>
