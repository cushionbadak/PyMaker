<div class="post-text" itemprop="text">
<p>I have some config file from which I need to extract only some values. For example, I have this:</p>
<pre><code>PART
{
    title = Some Title
    description = Some description here.    // this 2 params are needed 
    tags = qwe rty    // don't need this param
    ...
}
</code></pre>
<p>I need to extract value of certain param, for example <code>description</code>'s value. How do I do this in Python3 with regex?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the regex, assuming that the file text is in <code>txt</code>:</p>
<pre><code>import re

m = re.search(r'^\s*description\s*=\s*(.*?)(?=(//)|$)', txt, re.M)
print(m.group(1))
</code></pre>
<p>Let me explain.
<code>^</code> matches at beginning of line.
Then <code>\s*</code> means zero or more spaces (or tabs)
<code>description</code> is your anchor for finding the value part.
After that we expect <code>=</code> sign with optional spaces before or after by denoting <code>\s*=\s*</code>.
Then we capture everything after the <code>=</code> and optional spaces, by denoting <code>(.*?)</code>. This expression is captured by parenthesis. Inside the parenthesis we say match anything (the dot) as many times as you can find (the asterisk) in a non greedy manner (the question mark), that is, stop as soon as the following expression is matched.</p>
<p>The following expression is a lookahead expression, starting with <code>(?=</code> which matches the thing right after the <code>(?=</code>.
And that thing is actually two options, separated by the vertical bar <code>|</code>.</p>
<p>The first option, to the left of the bar says <code>//</code> (in parenthesis to make it atomic unit for the vertical bar choice operation), that is, the start of the comment, which, I suppose, you don't want to capture.
The second option is <code>$</code>, meaning the end of the line, which will be reached if there is no comment <code>//</code> on the line.
So we look for everything we can after the first <code>=</code> sign, until either we meet a <code>//</code> pattern, or we meet the end of the line. This is the essence of the <code>(?=(//)|$)</code> part.</p>
<p>We also need the <code>re.M</code> flag, to tell the regex engine that we want <code>^</code> and <code>$</code> match the start and end of lines, respectively. Without the flag they match the start and end of the entire string, which isn't what we want in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>The better approach would be to use an established configuration file system. Python has built-in support for INI-like files in the <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow"><code>configparser</code></a> module.</p>
<p>However, if you just <em>desperately</em> need to get the string of text in that file after the <code>description</code>, you could do this:</p>
<pre><code>def get_value_for_key(key, file):
    with open(file) as f:
        lines = f.readlines()
    for line in lines:
        line = line.lstrip()
        if line.startswith(key + " ="):
            return line.split("=", 1)[1].lstrip()
</code></pre>
<p>You can use it with a call like: <code>get_value_for_key("description", "myfile.txt")</code>. The method will return <code>None</code> if nothing is found. It is assumed that your file will be formatted where there is a space and the equals sign after the key name, e.g. <code>key = value</code>.</p>
<p>This avoids regular expressions altogether and preserves any whitespace on the right side of the value. (If that's not important to you, you can use <code>strip</code> instead of <code>lstrip</code>.)</p>
<p>Why avoid regular expressions? They're expensive and really not ideal for this scenario. Use simple string matching. This avoids importing a module and simplifies your code. But really I'd say to convert to a supported configuration file format.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a pretty simple regex, you just need a positive lookbehind, and optionally something to remove the comments. (do this by appending <code>?(//)?</code> to the regex)</p>
<pre><code>r"(?&lt;=description = ).*"
</code></pre>
<p><a href="https://regex101.com/r/bL4dQ9/1" rel="nofollow">Regex101 demo</a></p>
</div>
<span class="comment-copy">comments was added by me just for claryfying :P</span>
<span class="comment-copy">This will match the doc line too.</span>
<span class="comment-copy">What is the "doc line"?</span>
<span class="comment-copy">The line after <code>//</code>.</span>
