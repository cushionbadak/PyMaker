<div class="post-text" itemprop="text">
<p>i am new to programming and have been studying some code to get to know about OOP.Here is what i have understood and need help on,
1) import gym and env=gym.make('String') : This means gym is a library, and make is a class under it? Have we created an object instance?</p>
<p>I understood classes contains methods inside them..i.e functions..but in this case i am not able to decipher clearly.The line after this env.monitor.start()..this contains 3 parts..what does each indiciate..i thought env was an object instantiated earlier.</p>
<pre><code>import gym
env = gym.make('CartPole-v0')
env.monitor.start('/tmp/cartpole-experiment-1',force=True)
for i_episode in range(20):
    observation = env.reset()
    for t in range(1009):
        env.render()
        print(observation)
        action = env.action_space.sample()
        observation, reward, done, info = env.step(action)
        if done:
            print("Episode finished after {} timesteps".format(t+1))
            break

env.monitor.close()
</code></pre>
<p>Thanks for your help, apologise if the question is stupid</p>
</div>
<div class="post-text" itemprop="text">
<p><code>gym</code> can be a package or a module. The <code>import</code> statement doesn't tell you what <code>gym</code> is. </p>
<p>gym.make means that you are calling a method called 'make' from gym. </p>
<p><code>env</code> is then whatever <code>make('CartPole-v0')</code> returns, which may or may not be an object. It has a monitor attribute which seems to be startable, from the method <code>monitor.start()</code>, so I'd guess that it is, but you can't know this without looking at the code for gym or calling <code>type(env)</code>. </p>
<p><code>env.monitor.start()</code> means that the start method from <code>env.monitor</code> is called. What <code>env.monitor</code> <em>is</em> can't be determined without looking at the code for gym.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the basic structure of the above program:</p>
<p><code>import</code> statements bring modules into the program. These modules contain functions. The module is able to use these functions. For example,</p>
<pre><code>import myMod as mM

mM.fooFunc()
</code></pre>
<p>imports a module <code>myMod</code> and gives it an alias of <code>mM</code>. <code>fooFunc</code> belongs inside the module and so we're able to call it.</p>
<p>We don't need aliases. We can also just say </p>
<pre><code>import myMod
myMod.fooFunc()
</code></pre>
<p>but it's slightly less convenient.</p>
<p><code>env</code> is just a name for the return value of the function <code>gym.make('CartPole-v0')</code>. Functions always return something, such as an actual object, an integral type (like an integer, or a string), or <code>None</code>.</p>
<p>The return value doesn't need to always be stored, such as in <code>env.monitor.start('/tmp/cartpole-experiment-1',force=True)</code>. It simply performs some data manipulation.</p>
<p>As for the rest of the program, it's ran by <code>for-loop</code>s and <code>if</code> statements. <a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow">Read about it here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>gym</code>can be a package or module. There is no way to tell what it is by its import statement.</p>
<p><code>env = gym.make('CartPole-v0')</code> can either assign the return value of the call of function <code>make</code> from <code>gym</code> to variable <code>env</code>, or create an item of class <code>make</code> and assign that item to variable <code>env</code></p>
<p><code>env.monitor.start('/tmp/cartpole-experiment-1',force=True)</code> means the <code>env</code> variable most likely returned an item of class that has a property/subclass called <code>monitor</code>. This property/subclass possess a function called <code>start</code></p>
<p><code>env</code> most likely also has a subclass/property <code>action_space</code> with a function <code>sample</code></p>
</div>
<div class="post-text" itemprop="text">
<p>gym.make('CartPole-v0') returns an object.</p>
<p>Therefore, <strong>'env'</strong> is an <strong>object</strong>.</p>
<p>'env' contains a property, <strong>'monitor'</strong>, which is also an <strong>object</strong>. </p>
<p>The <strong>'start'</strong> method is a method of the <strong>'monitor' object</strong>, not the <em>env object.</em> </p>
<pre><code>    env = gym.make('CartPole-v0')
    env.monitor.start('/tmp/cartpole-experiment-1',force=True)
</code></pre>
<p>Another way to write it would be (env.monitor).start('/tmp/cartpole-experiment-1',force=True)</p>
<p>For the sake of repetition,</p>
<pre><code> env.reset() 
#env is object, reset is method of env object

 env.render() 
#env is object, render is method of env object

 env.action_space.sample() 
#env is object, action_space is object, sample is method of action_space object

 env.step(action) 
#env is object, step is method of env object
</code></pre>
</div>
<span class="comment-copy">It looks like you are confused about the for loop?  You can look that up.  It is a standard programming construct for looping</span>
<span class="comment-copy">Hello, for the loop is not my problems..the accessing such as env.monitor.start..i.e ones related to classes and objects are my problem</span>
<span class="comment-copy">@Thiagarajan, take a look at my answer.</span>
<span class="comment-copy">gym.make(XX) can also be the creation of an item of class 'make' defined in gym, that requires a String in its initialization</span>
<span class="comment-copy">then what would env.monitor.start mean..if env were an object perhaps env.monitor would be accesing a method called monitor..but what about the start</span>
<span class="comment-copy">yes, if the method make in gym returns a 'make' object. broadly speaking, It is correct to say that <code>env</code> is whatever <code>gym.make(xx)</code> returns.</span>
<span class="comment-copy">@Thiagarajan There exist 'class methods', that are functions of a given class, that can be called with the name fo the class (and do not depends of an item the class). If <code>monitor</code> is a class in module/package <code>gym</code>, then <code>start can be one such functions</code></span>
<span class="comment-copy">@Thiagarajan <code>env.monitor.start()</code> calls the <code>start()</code> method from whatever <code>env.monitor</code> is.</span>
<span class="comment-copy">Okay, i got most of it except env.monitor.start()..say the env=gym.make() has made as a an object..an object can have various attributes...like env.name and so on..but what does it mean when we use the dot operator twice..like env.monitor.start()</span>
<span class="comment-copy">@Thiagarajan Notice that <code>env.monitor</code> has no parentheses around monitor. That means that it's an attribute of <code>env</code>. The <code>start</code> function is then called on the <code>env.monitor</code> attribute.</span>
