<div class="post-text" itemprop="text">
<p>I wrote some codes to get some lines from .txt like below and its keep returning lines with brackets which I did not intend. Could you help me?</p>
<p>codes:</p>
<pre><code>#!/bin/python
i=1
f=open("name.txt","r")
while(i&lt;=225):
 x=f.readline().splitlines()
 print("mol new %s.bgf"%(x))
 i+=1
f.close()
</code></pre>
<p>name.txt</p>
<pre><code>02.ala.r49r50.TRK820.no_0.rnd_1.c14421.f.c
04.ala.r44r45.TRK820.no_0.rnd_1.c48608.h.c
09.ala.r46r47.TRK820.no_0.rnd_1.c14682.t.c
17.ala.r47r48.TRK820.no_0.rnd_1.c9610.th.c
18.ala.r48r49.TRK820.no_59.rnd_1.c19106.t.c
</code></pre>
<p>And it returns</p>
<pre><code>mol new ['02.ala.r49r50.TRK820.no_0.rnd_1.c14421.f.c'].bgf
mol new ['04.ala.r44r45.TRK820.no_0.rnd_1.c48608.h.c'].bgf
mol new ['09.ala.r46r47.TRK820.no_0.rnd_1.c14682.t.c'].bgf
mol new ['17.ala.r47r48.TRK820.no_0.rnd_1.c9610.th.c'].bgf
mol new ['18.ala.r48r49.TRK820.no_59.rnd_1.c19106.t.c'].bgf
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to call the splitlines() method on the results of readline()<p>
file.readline() returns one line of the file, including the trailing newline.
<p>
.splitlines() is getting rid of the newline by using it as a delimiter and giving you a LIST of lines with only 1 item.  The brackets are coming from the str representation of that 1 item list</p>
<p>you want this:</p>
<pre><code>x = f.readline().rstrip()
</code></pre>
<p>to remove the newline or you could also <em>slice</em> off the newline like this</p>
<pre><code>x = f.readline()[:-1]
</code></pre>
<p>another thing you might consider is changing your code to use the file object as an iterable.  It is more idiomatic in Python to write</p>
<pre><code>for line in fileobject:
    print line[:-1]
</code></pre>
<p>than to use a while loop and .readline()</p>
</p></p></div>
<div class="post-text" itemprop="text">
<p>Making minimal changes to your code, try:</p>
<pre><code>i=1
f=open("name.txt","r")
while(i&lt;=225):
 x=f.readline().rstrip('\n')
 print("mol new %s.bgf"%(x))
 i+=1
f.close()
</code></pre>
<p>This produces output like:</p>
<pre><code>mol new 02.ala.r49r50.TRK820.no_0.rnd_1.c14421.f.c.bgf
mol new 04.ala.r44r45.TRK820.no_0.rnd_1.c48608.h.c.bgf
mol new 09.ala.r46r47.TRK820.no_0.rnd_1.c14682.t.c.bgf
mol new 17.ala.r47r48.TRK820.no_0.rnd_1.c9610.th.c.bgf
mol new 18.ala.r48r49.TRK820.no_59.rnd_1.c19106.t.c.bgf
</code></pre>
<p>Further improvements:</p>
<pre><code>with open("name.txt","r") as f:
    for i, line in enumerate(f):
        if i &gt;= 225:
            break
        print("mol new %s.bgf"%(line.rstrip('\n')))
</code></pre>
<p>Notes:</p>
<ol>
<li><p>You want to use <code>with open("name.txt","r") as f</code> to assure that the file <code>f</code> gets closed regardless.</p></li>
<li><p>Looping over <code>i</code> as a counter as in <code>i=1; while(i&lt;=225): i+=1</code> is not pythonic.  Use enumerate instead.</p></li>
<li><p><code>readline</code> reads in a line.  There is no need for <code>splitlines</code>.</p></li>
<li><p>By looping over the lines in the file with <code>for i, line in enumerate(f):</code>, we eliminate the need to read the whole file in at once.  This makes the program suitable for handling very large files.</p></li>
<li><p>In python, when a line is read from a file, it still has the newline at the end of it.  We use <code>rstrip('\n')</code> to safely remove it.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The <code>readline</code> function reads a single line from the file. Then you ask to split the line into a <strong><em>list</em></strong> of lines (which will give you a list of only one line since that's what you have).</p>
<p>Don't split the <em>single line</em>. Instead <em>strip</em> the string (to remove leading and trailing "white-space").</p>
<p>Please read <a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow">the string reference</a> for more information about both <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow"><code>splitlines</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow"><code>strip</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because <code>f.readline().splitlines()</code> returns the line in a list form containing a single element. </p>
<p>Try this instead:</p>
<pre><code>x = f.readline().splitlines()
x = x[0]
</code></pre>
</div>
<span class="comment-copy">That's because you're using <code>splitlines</code>. Instead of <code>x=f.readline().splitlines()</code>, try <code>x=f.readline().strip()</code>.</span>
<span class="comment-copy">Thanks, @SIMONSON92, for creating a short, complete example program. Having that complete sample made life much easier for your readers. See <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> for more info.</span>
<span class="comment-copy">Wouldn't <code>line.rstrip()</code> or even <code>line.rstrip('\n')</code> be more idiomatic?</span>
<span class="comment-copy">good question - I did show using .rstrip() in the first part of the answer because I do think it's more obvious that a method named rstrip is going be removing something :-)</span>
<span class="comment-copy">What solution do you propose?</span>
<span class="comment-copy">@VaibhavBajaj Please read the second paragraph.</span>
<span class="comment-copy">I was wondering how to implement that in code. I now understand with your new edit. Thanks</span>
<span class="comment-copy">@Robáµ© Yup... sorry, I tested on <code>"[string]"</code> instead of <code>["string"]</code></span>
