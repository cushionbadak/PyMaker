<div class="post-text" itemprop="text">
<p>I have a package structure like this:</p>
<pre><code>A/__init__.py
|
 --B/__init__.py
|
 --C/__init__.py
</code></pre>
<p>In each package and sub packages, it contains a few classes, e.g. <code>A/__init__.py</code> contains class A1 and A2, <code>B/__init__.py</code> contains class B1 and B2, <code>C/__init__.py</code> contains class C1 and C2. In <code>A/__init__.py</code>, it adds all the class names of A and its sub packages into <code>__all__</code>. </p>
<p>Now, I want to print out all package names as well as their contained class names, e.g. </p>
<blockquote>
<p>A contains A1, A2, B contains B1, B2, C contains C1, C2</p>
</blockquote>
<p>So given the absolute path of package A, e.g. 'xx/yy/A', how can I print the above line?</p>
<blockquote>
<p><strong>My question is not about how to retrieve file path of a package.</strong></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I will try to dig some code out, but in general : </p>
<ol>
<li>Walk through the package folders and files using 'os.walk'</li>
<li>For every Python file you find use importlib to import it. </li>
<li>For every imported module use the functions in the 'inspect' standard library module to identify the classes within each imported module. </li>
</ol>
<p>I don't there is any nice way to import a module based on it's absolute path. The import process works by importing paths which are either relative to the existing module, or relative to an entry in sys.path. An option might be to force add the root of your package into sys.path - and for every file you find work out the dotted module name for the module.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print(os.path.dirname(os.path.abspath(A.__file__)))
</code></pre>
<p>Or did you have something different in mind?</p>
<p><strong>Update</strong>:</p>
<blockquote>
<p>if package A has not been imported, how can I refer it using <code>A.__file__</code>?</p>
</blockquote>
<p>Arguably, there's no <em>easy</em> way to know. You could figure it out by looking at what the <a href="https://docs.python.org/3/reference/import.html" rel="nofollow">import mechanism does</a> and following that to find a folder/file named <code>A</code>.</p>
<blockquote>
<p>I only know the absolute folder path of this package.</p>
</blockquote>
<p>But that makes it sound like you already know the location of the package on disk and you want to import it, even though it's not installed <a href="https://packaging.python.org/distributing/" rel="nofollow">as a package</a>. You <em>can</em> do something like that, but you shouldn't.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/247770/retrieving-python-module-path">Retrieving python module path</a></span>
<span class="comment-copy">@WayneWerner thanks but the link you gave is not relevant to my question.</span>
<span class="comment-copy">thanks but this does not answer my question.</span>
<span class="comment-copy">It answered your <i>original</i> question. You probably should have asked <i>another</i> question, since it's fundamentally different than the one that you asked.</span>
<span class="comment-copy">sorry, your answer came too quickly for me to edit it properly. but the question title did tell what i am looking for. it's to print all class names under a package. And I'd like to import this package via its file path.</span>
<span class="comment-copy">Do you have a <i>really good</i> reason for that? Because that's introducing all kinds of potential problems to your code.</span>
<span class="comment-copy">we have developers working on all those modules (e.g. A1, A2, B1, B2... referred above) and we'd like to build a tool to connect these modules to each other. the first step to do is to list all the available modules and present them in some way, maybe via a GUI app so that people can pick the modules they want to use in their project. That's why this question...</span>
