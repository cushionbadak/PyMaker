<div class="post-text" itemprop="text">
<p>So I have a dictionary like the one below, however, I am trying to subtract ART[0][0] - ART[1][0] and this has to be an iteration. </p>
<p>This is what I have, but it doesn't seem to work. I keep getting the error: 'KeyError: 2'</p>
<p>Any help would be appreciated.</p>
<pre><code>   for i in range(1, 5): #from
      k = i
      for j in range (1, 5): #to
           if i == j:
              pass
           else:
               t = ART[j][0] - ART[i][0]
               g = ART[j][1] - ART[i][1] 
</code></pre>
<p>Sample input:</p>
<blockquote>
<p>ART = {'U': (5, 6),  'E': (7, 3),  'A': (3, 3),  'O': (3, 2),  'I':
  (1, 4)}</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries are accessed by the key name. See <a href="https://developers.google.com/edu/python/dict-files" rel="nofollow">here</a> for examples.</p>
<p>For example, <code>ART['U']</code> would return <code>(5, 6)</code>. In your code, you're trying to access a key <code>2</code>, because that's what <code>j</code> is equal to. However, there is no key named <code>2</code> in the dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you want to get all the combinations of keys from the dictionary. Dictionaries are unordered, so <code>ART[0]</code> does not have any meaning<sup>1)</sup>. Instead, you can iterate the keys directly:</p>
<pre><code>for i in ART:
    for j in ART:
        if i != j:
            t = ART[j][0] - ART[i][0]
            g = ART[j][1] - ART[i][1]
</code></pre>
<p>Or shorter, using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a>:</p>
<pre><code>for i, j in itertools.product(ART, repeat=2):
    if ...
</code></pre>
<hr/>
<p><sup>1)</sup> Except if you have a key <code>0</code> in your dictionary, which you don't.</p>
</div>
<div class="post-text" itemprop="text">
<p>You mention in comments that you want to call items in the dictionary by an index. This is not possible because dictionaries are unordered. Dictionaries are for mapping a particular 'key' to a value that you stored against that key. If you <code>print ART</code> several times, you will see different ordering. I don't think you want a dictionary here and I believe you've picked letters to make keys for the sake of making keys.</p>
<p>Python uses zero indexing. So <code>range(1, 5)</code> would miss the first item in a <em>list</em> if you were iterating through. You would want <code>for x in range(0, 5)</code> to get all elements in the list, which can be written simply as <code>for x in range(5)</code>.</p>
<p>Finally, your code has <code>i</code>, <code>j</code>, <code>k</code> (never used), <code>t</code> and <code>g</code>. This makes things <strong>much</strong> harder to understand, especially when Python gives you so much flexibility in naming things.</p>
<p>With those assumptions, I think you want a list of tuples as your data structure:</p>
<pre><code>ART = [(5, 6), (7, 3), (3, 3), (3, 2), (1, 4)]
for i, item in enumerate(ART):
    for j, pair_item in enumerate(ART):
        if i != j:
            t = item[0] - pair_item[0]
            g = item[1] - pair_item[1]
</code></pre>
</div>
<span class="comment-copy">You have not shown your expected result</span>
<span class="comment-copy">Is the else block indented as you show? because that is wrong.  Indent the lines below it</span>
<span class="comment-copy">I need to subtract the two values based on the key so my expected output is t=3 and g=-3</span>
<span class="comment-copy">Your dictionary keys are the letters, and the tuples are the values stored against the key. But you are trying to use indices on a dictionary. I don't think this is the data structure that you want for ART.</span>
<span class="comment-copy">And even if you swap the dictionary structure of <code>ART</code> around, so that the tuple values are the key and the letter is the value, the output would be nonsense because you'd be subtracting letters.</span>
<span class="comment-copy">I get the impression that the letters are superfluous and the OP is really looking for a list of tuples as the data structure.</span>
<span class="comment-copy">@roganjosh Maybe, but I don't think so. After all, the keys are all the vowels, that might have some meaning.</span>
<span class="comment-copy">Comments ask for indexing and enumerating dictionary. I've put another answer in the meantime but we may never know :)</span>
<span class="comment-copy">Note that this might not work in all cases. Consider a list like <code>[(1,2),(3,4),(1,2)]</code>. OP is checking whether the indices are different, so he probably would want to handle the <code>(1,2), (1,2)</code> pair as well, but yours will skip it. Maybe use <code>enumerate</code> instead to get and compare the indices?</span>
<span class="comment-copy">@tobias_k Noted and made change accordingly. Thanks.</span>
