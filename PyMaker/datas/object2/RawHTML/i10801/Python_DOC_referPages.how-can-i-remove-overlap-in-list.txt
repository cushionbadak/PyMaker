<div class="post-text" itemprop="text">
<p>I made example python list.</p>
<pre><code>list_1 = [1,3,2,2,3,4,5,1]
print(list_1)
</code></pre>
<blockquote>
<p>[1, 3, 2, 2, 3, 4, 5, 1]</p>
</blockquote>
<p>To remove overlap, i tried to use set().</p>
<pre><code>print(set(list_1))
</code></pre>
<blockquote>
<p>{1, 2, 3, 4, 5}</p>
</blockquote>
<p>but i want make </p>
<pre><code>[1,3,2,4,5]
</code></pre>
<p>I want remove overlap in list, but i also want order not to be changed.</p>
<p>How can i do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use list-comprehension with filter (initialize the empty list first, ignore the resulting list)</p>
<pre><code>list_u = []
[list_u.append(v) for v in list_1 if v not in list_u]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could (ab)use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> to get just the unique elements in order:</p>
<pre><code>&gt;&gt;&gt; list_1 = [1,3,2,2,3,4,5,1]
&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; list(OrderedDict((x, None) for x in list_1))
[1, 3, 2, 4, 5]
</code></pre>
<hr/>
<p>Alternatively, you could use a list comprehension with an additional <code>set</code> of already seen items. However, list comprehensions with side-effects are not considered best style.</p>
<pre><code>&gt;&gt;&gt; list_1 = [1,3,2,2,3,4,5,1]
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; [x for x in list_1 if not (x in seen or seen.add(x))]
[1, 3, 2, 4, 5]
</code></pre>
<p>The condition <code>not (x in seen or seen.add(x))</code> <a href="https://stackoverflow.com/a/38563651/1639625">works like this</a>: If <code>x in seen</code>, the <code>or</code> is true and thus the <code>not</code> is false, but if <code>x not in seen</code>, then the first part of the <code>or</code> is false, and thus the second part is executed and returns <code>None</code>, which is then converted to <code>True</code> by <code>not</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To have distinct values in your list, just use the following snippet:</p>
<pre><code>l = [1,3,2,2,3,4,5,1]
result = list()
map(lambda x: not x in result and result.append(x), l)
print(result) #[1,3,2,4,5]
</code></pre>
<p>As you already found out, <code>set()</code> doesn't preserve the order of your sequence. The basic idea is taken from <a href="https://stackoverflow.com/questions/4459703/how-to-make-lists-distinct">here</a>.</p>
<hr/>
<p>As tobias_k mentioned in the comment, this solution won't work with Python 3. If you use Python 3, you may just iterate through your list with a simple for loop (tobias_k's idea) or use libraries like <code>OrderedDict</code>:</p>
<pre><code>from collections import OrderedDict

list(OrderedDict.fromkeys([1,3,2,2,3,4,5,1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try This You can do this using reversing a <code>list</code>.without using any python libraries.</p>
<pre><code>&gt;&gt;&gt; list_1 = [1,3,2,2,3,4,5,1]
&gt;&gt;&gt; list_1.reverse()
&gt;&gt;&gt; for i in list_1:
...     if(list_1.count(i)&gt;1):
...        list_1.remove(i)
... 
&gt;&gt;&gt; list_1.reverse()
&gt;&gt;&gt; list_1
[1, 3, 2, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would probably do something like this:</p>
<pre><code>seen = set()
result
for i in the_list:
  if i not in seen:
    seen.add(i)
    result.append(i)
</code></pre>
<p>I use <code>seen</code> for fast lookups, still unknown time complexity from the <code>result.append</code> method call.</p>
<p>It's possible to do this as a list comprehension as well, at the cost of mixing functional and imperative code in a horrible mish-mash:</p>
<pre><code>seen = set()
def process(e):
  seen.add(e)
  return e
[process(element) for element in the_list if element not in seen]
</code></pre>
<p>But! This relies on side-effects in the mapping, so it's less than ideal. </p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order">How do you remove duplicates from a list in Python whilst preserving order?</a></span>
<span class="comment-copy">Thank you. it was useful</span>
<span class="comment-copy">Thanks for very kind explanation.</span>
<span class="comment-copy">IMHO using a plain old <code>for</code> loop would be more pythonic than using <code>map</code> for side-effects. Also, this won't work in Python 3.</span>
<span class="comment-copy">@tobias_k Thanks for the comment mate. I agree with you. This isn't the pythonic way to go. But as I'm seeing right now, you also thought of the OrderedDict as a solution :-).</span>
