<div class="post-text" itemprop="text">
<p>I have a project whose lines of code I want to count. Is it possible to count all the lines of code in the file directory containing the project by using Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a function I wrote to count all lines of code in a python package and print an informative output. It will count all lines in all .py </p>
<pre><code>import os

def countlines(start, lines=0, header=True, begin_start=None):
    if header:
        print('{:&gt;10} |{:&gt;10} | {:&lt;20}'.format('ADDED', 'TOTAL', 'FILE'))
        print('{:-&gt;11}|{:-&gt;11}|{:-&gt;20}'.format('', '', ''))

    for thing in os.listdir(start):
        thing = os.path.join(start, thing)
        if os.path.isfile(thing):
            if thing.endswith('.py'):
                with open(thing, 'r') as f:
                    newlines = f.readlines()
                    newlines = len(newlines)
                    lines += newlines

                    if begin_start is not None:
                        reldir_of_thing = '.' + thing.replace(begin_start, '')
                    else:
                        reldir_of_thing = '.' + thing.replace(start, '')

                    print('{:&gt;10} |{:&gt;10} | {:&lt;20}'.format(
                            newlines, lines, reldir_of_thing))


    for thing in os.listdir(start):
        thing = os.path.join(start, thing)
        if os.path.isdir(thing):
            lines = countlines(thing, lines, header=False, begin_start=start)

    return lines
</code></pre>
<p>To use it, just pass the directory you'd like to start in. For example, to count the lines of code in some package <code>foo</code>:</p>
<pre><code>countlines(r'...\foo')
</code></pre>
<p>Which would output something like:</p>
<pre><code>     ADDED |     TOTAL | FILE               
-----------|-----------|--------------------
        5  |        5  | .\__init__.py       
       539 |       578 | .\bar.py          
       558 |      1136 | .\baz\qux.py         
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from os import listdir
from os.path import isfile, join
def countLinesInPath(path,directory):
    count=0
    for line in open(join(directory,path), encoding="utf8"):
        count+=1
    return count
def countLines(paths,directory):
    count=0
    for path in paths:
        count=count+countLinesInPath(path,directory)
    return count
def getPaths(directory):
    return [f for f in listdir(directory) if isfile(join(directory, f))]
def countIn(directory):
    return countLines(getPaths(directory),directory)
</code></pre>
<p>To count all the lines of code in the files in a directory, call the "countIn" function, passing the directory as a parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is derived from Daniel's answer (though refactored enough that this won't be obvious). That one doesn't recurse through subdirectories, which is the behavior I wanted.</p>
<pre><code>from os import listdir
from os.path import isfile, isdir, join
def item_line_count(path):
    if isdir(path):
        return dir_line_count(path)
    elif isfile(path):
        return len(open(path, 'rb').readlines())
    else:
        return 0
def dir_line_count(dir):
    return sum(map(lambda item: item_line_count(join(dir, item)), listdir(dir)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pypi.org/project/pygount/" rel="nofollow noreferrer">https://pypi.org/project/pygount/</a></p>
<p>pip install pygount</p>
<p>To list current directory run:</p>
<p>pygount</p>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> to traverse the files and sub directories, use <a href="https://docs.python.org/3/library/stdtypes.html#str.endswith" rel="nofollow noreferrer"><code>endswith</code></a> to filter the files you want to count, <code>open</code> each file and use <code>sum(1 for line in f)</code> to count the lines, aggregate all the file line counts.</span>
<span class="comment-copy"><code>import io</code> and try using <code>io.open</code> instead of <code>open</code> if anyone has issues using python2</span>
<span class="comment-copy">Doesn't python already have a <code>len(file.readlines())</code>? And that's just one way I know of</span>
<span class="comment-copy">Yeah I think that could work too, this doesn't take that much more code though</span>
