<div class="post-text" itemprop="text">
<p>I've been reading lately about the generic relations. I know that <code>GenericForeignKey</code> is to define and manaeg the generic relation using <code>ForeignKey</code> and <code>PositiveIntegerField</code> fields. I dove into the source code in search for the <code>__set__</code> method of the <code>GenericForeignKey</code> to see how does it work.</p>
<p>Here is the snippet for <code>GenericForeignKey.__set__()</code>:</p>
<pre><code>def __set__(self, instance, value):
    ct = None
    fk = None
    if value is not None:
        ct = self.get_content_type(obj=value)
        fk = value._get_pk_val()
    setattr(instance, self.ct_field, ct)
    setattr(instance, self.fk_field, fk)
    setattr(instance, self.cache_attr, value)
</code></pre>
<p>and model definition from django docs <a href="https://docs.djangoproject.com/en/1.9/ref/contrib/contenttypes/" rel="nofollow">example</a>:</p>
<pre><code>class TaggedItem(models.Model):
    tag = models.SlugField()
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
</code></pre>
<h2>Question:</h2>
<p>When I assign value of <code>guido</code> to the <code>content_object</code> then what is the value of each of these paremeters: <code>self</code>, <code>instance</code> and <code>value</code> in the <code>GenericForeignKey.__set__()</code>? </p>
<p>Is <code>self=&lt;GenericForeignKey: 1&gt;</code>, <code>instance='content_object'</code>, and <code>value=&lt;User: guido&gt;</code>?</p>
<pre><code>&gt;&gt;&gt; guido = User.objects.get(username='Guido')
&gt;&gt;&gt; t = TaggedItem(content_object=guido, tag='bdfl')
&gt;&gt;&gt; t.save()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__set__</code> method is for <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptors</a>.</p>
<p>The following simple example will show what the arguments passed to <code>__set__</code> are:</p>
<pre><code>class MyDescriptor:
    def __set__(self, instance, value):
        print((self, instance, value))

class MyClass:
    attr = MyDescriptor()

inst = MyClass()
inst.attr = "foo"
</code></pre>
<p>You'll get something like:</p>
<pre><code>&lt;__main__.MyDescriptor object at 0x000002017192AD68&gt;,   # self
&lt;__main__.MyClass object at 0x000002017192ACF8&gt;,        # instance
'foo'                                                   # value
</code></pre>
<p>Specifically:</p>
<ul>
<li><code>self</code> is the instance of the <code>MyDescriptor</code> descriptor (<code>MyClass.attr</code>), </li>
<li><code>instance</code> is the instance of the <code>MyClass</code> class (<code>inst</code>), and</li>
<li><code>value</code> is what you're setting the attribute to (<code>"foo"</code>).</li>
</ul>
<p>See a more thorough example <a href="https://docs.python.org/3/howto/descriptor.html#descriptor-example" rel="nofollow">here</a>.</p>
<p>So, without similarly diving into the Django code, it would seem that:</p>
<ul>
<li><code>self</code> is the instance of the <code>GenericForeignKey</code> descriptor (<code>TaggedItem.content_object</code>), </li>
<li><code>instance</code> is the instance of the <code>TaggedItem</code> class, and</li>
<li><code>value</code> is what you're setting the attribute to.</li>
</ul>
<p>But note that, with this line:</p>
<pre><code>t = TaggedItem(content_object=guido, tag='bdfl')
</code></pre>
<p>It looks like you're creating a <code>TaggedItem</code>, which <em>creates</em> a descriptor with this line</p>
<pre><code>content_object = GenericForeignKey('content_type', 'object_id')
</code></pre>
<p>So, at least from the code you posted, the <code>__set__</code> method won't be called.  Instead <code>GenericForeignKey</code>'s <code>__init__</code> method would be called.</p>
<p>To call <code>GenericForeignKey</code>'s <code>__set__</code> method, you'd need to do have an instance of a class (call it <code>inst</code>) that had a <code>GenericForeignKey</code> descriptor as an attribute (call it <code>attr</code>), then write something like:</p>
<pre><code>inst.attr = "not guido"
</code></pre>
<p>Then, the <code>__set__</code> method of the <code>GenericForeignKey</code> descriptor <em>would</em> be called.</p>
</div>
<span class="comment-copy">Read up on <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a>!  Here's  a useful answer: <a href="http://stackoverflow.com/a/34554353/674039">stackoverflow.com/a/34554353/674039</a></span>
<span class="comment-copy">That makes sense! However it does not explicitly answer the question, it gives you the tools to understand what I was asking about.</span>
<span class="comment-copy">@an0o0nym regarding "When I assign value of guido to the content_object then what is the value of each of these paremeters: self, instance and value in the GenericForeignKey.__set__()?" the answer sort of addresses it.  It tells you what the parameters <i>would be</i> if it was called, but I explained why it probably wouldn't be called.</span>
