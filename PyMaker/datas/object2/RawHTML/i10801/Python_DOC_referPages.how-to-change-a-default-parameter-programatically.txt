<div class="post-text" itemprop="text">
<p>In Python, is it possible to redefine the default parameters of a function at runtime?</p>
<p>I defined a function with 3 parameters here:</p>
<pre><code>def multiplyNumbers(x,y,z):
    return x*y*z

print(multiplyNumbers(x=2,y=3,z=3))
</code></pre>
<p>Next, I tried (unsuccessfully) to set the default parameter value for y, and then I tried calling the function without the parameter <code>y</code>:</p>
<pre><code>multiplyNumbers.y = 2;
print(multiplyNumbers(x=3, z=3))
</code></pre>
<p>But the following error was produced, since the default value of <code>y</code> was not set correctly:</p>
<pre><code>TypeError: multiplyNumbers() missing 1 required positional argument: 'y'
</code></pre>
<p>Is it possible to redefine the default parameters of a function at runtime, as I'm attempting to do here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="http://docs.python.org/2/library/functools.html#functools.partial" rel="noreferrer">functools.partial</a></p>
<pre><code> multiplyNumbers = functools.partial(multiplyNumbers, y = 42)
</code></pre>
<p>One problem here: you will not be able to call it as <code>multiplyNumbers(5, 7, 9);</code> you should manually say <code>y=7</code></p>
<p>If you need to remove default arguments I see two ways:</p>
<ol>
<li><p>Store original function somewhere</p>
<pre><code>oldF = f
f = functools.partial(f, y = 42)
//work with changed f
f = oldF //restore
</code></pre></li>
<li><p>use <code>partial.func</code></p>
<pre><code>f = f.func //go to previous version.
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Technically, it is possible to do what you ask… but it's not a good idea. RiaD's answer is the Pythonic way to do this.</p>
<p>In Python 3:</p>
<pre><code>&gt;&gt;&gt; def f(x=1, y=2, z=3):
...     print(x, y, z)
&gt;&gt;&gt; f()
1 2 3
&gt;&gt;&gt; f.__defaults__ = (4, 5, 6)
4 5 6
</code></pre>
<p>As with everything else that's under the covers and hard to find in the docs, the <a href="http://docs.python.org/3/library/inspect.html"><code>inspect</code></a> module chart is the best place to look for function attributes.</p>
<p>The details are slightly different in Python 2, but the idea is the same. (Just change the pulldown at the top left of the docs page from 3.3 to 2.7.)</p>
<hr/>
<p>If you're wondering how Python knows which defaults go with which arguments when it's just got a tuple… it just counts backward from the end (or the first of <code>*</code>, <code>*args</code>, <code>**kwargs</code>—anything after that goes into the <code>__kwdefaults__</code> dict instead). <code>f.__defaults = (4, 5)</code> will set the defaults to <code>y</code> and <code>z</code> to <code>4</code> and <code>5</code>, and with default for <code>x</code>. That works because you can't have non-defaulted parameters after defaulted parameters.</p>
<hr/>
<p>There are some cases where this won't work, but even then, you can immutably copy it to a new function with different defaults:</p>
<pre><code>&gt;&gt;&gt; f2 = types.FunctionType(f.__code__, f.__globals__, f.__name__,
...                         (4, 5, 6), f.__closure__)
</code></pre>
<p>Here, the <a href="http://docs.python.org/3.3/library/types.html#types.FunctionType"><code>types</code> module</a> documentation doesn't really explain anything, but <code>help(types.FunctionType)</code> in the interactive interpreter shows the params you need.</p>
<hr/>
<p>The only case you <em>can't</em> handle is a builtin function. But they generally don't have actual defaults anyway; instead, they fake something similar in the C API.</p>
</div>
<div class="post-text" itemprop="text">
<p>use <code>func_defaults</code> as in</p>
<pre><code>def myfun(a=3):
    return a

myfun.func_defaults = (4,)
b = myfun()
assert b == 4
</code></pre>
<p>check the docs for func_defaults <a href="http://docs.python.org/2/reference/datamodel.html" rel="nofollow">here</a></p>
<p><strong>UPDATE:</strong> looking at RiaD's response I think I was too literal with mine. I don't know the context from where you're asking this question but in general (and following the <a href="http://www.python.org/dev/peps/pep-0020/" rel="nofollow">Zen of Python</a>) I believe working with partial applications is a better option than redefining a function's defaults arguments</p>
</div>
<span class="comment-copy">Setting the attribute <code>y</code> on the function <i>also</i> doesn't change the default parameter for <code>y</code>.</span>
<span class="comment-copy">damn that's sexy.</span>
<span class="comment-copy">@joshlf13, you may be in static languages too.</span>
<span class="comment-copy">Actually, come to think of it, that's basically like currying, except without needing to have your variables ordered.</span>
<span class="comment-copy">@AndersonGreen, I did understand. I mean, I don't know how to do it directly but you may do it as following <code>oldF = f; f = partials(...); ... ; f = oldF</code></span>
<span class="comment-copy">@AndersonGreen, added some info</span>
<span class="comment-copy">You mentioned that it's "not a good idea" to change the default parameters of a function at runtime. Have you noticed any disadvantages of this approach? (I'm not yet aware of any).</span>
<span class="comment-copy">@AndersonGreen: Well, there's the obvious disadvantage that it makes it harder for you, other humans, linters, IDEs, reflection-based tools like <code>pickle</code>, etc. to understand your code. And you have to fully understand the rules about args/params to be sure you're doing it right. Then there's the fact that you can't make it work generally without writing code that can deal with regular functions, weird immutable functions (which need to construct a new function out of the code), and builtin functions (which you need to wrap, with a <code>partial</code> or a new function that calls it).</span>
<span class="comment-copy">I didn't manage to set it to second of 3 variables. Only works for last for me.</span>
<span class="comment-copy">@RiaD: Function defaults have to be a final sequence of parameters; just as you can't write <code>def foo(x, y=2, z):</code>, you can't change the <code>func_defaults</code>/<code>__defaults__</code> to just cover <code>y</code>.</span>
