<div class="post-text" itemprop="text">
<p>I have some python methods with instructions. For example, parameter combinations to be tested. In a count-part of my code, I use a parser for the doc-string of the function that I use so that a configuration file is no longer needed. The information I need are solely contained in the functions doc string. I wonder if this is a good and common practice in industry? </p>
<p>update: I have a long list of experiments to do, represented by functions. For each function, I have some test cases (different for different functions). When I create the function, the test cases are defined. I put them in the doc string and parse them when I do the test.</p>
<pre><code>def my_function1(param1,param2)
    '''param1: 10, 20, 40, 60; param2: 5, 10, 20, 40;'''

    return something 


def my_function2(param1,param2,param3)
    '''param1: 10, 20, 40, 60; param2: 5, 10, 20, 40; param3: 100, 200'''
    return something 

.
.
.
</code></pre>
<p>It is convenient to me in this case to save the test cases into doc string not separately. But I am not sure parsing a doc string is a safe practice. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong> Here are the PEP suggestions:
<a href="https://www.python.org/dev/peps/pep-0257/#specification" rel="nofollow">https://www.python.org/dev/peps/pep-0257/#specification</a></p>
<p>I am fairly confident that this is not common practice, and my instinct is that it is not good practice either.</p>
<p>First, some example Docstrings from Python standard library modules.</p>
<p>When I type help for <strong>combinations</strong>:</p>
<pre><code>Signature:
combinations(iterable, r) --&gt; combinations object

Docstring:
Return successive r-length combinations of elements in the iterable.

combinations(range(4), 3) --&gt; (0,1,2), (0,1,3), (0,2,3), (1,2,3)
</code></pre>
<p>This is the help for <strong>sum</strong>:</p>
<pre><code>Signature:
sum(sequence[, start]) -&gt; value

Docstring:
Return the sum of a sequence of numbers (NOT strings) plus the value
of parameter 'start' (which defaults to 0).  When the sequence is
empty, return start.
</code></pre>
<p>These docstrings elaborate in English.</p>
<p>The goal of a docstring according to Python core developers seems to be to explicitly show how to use the methods, and to clear up any doubt. I would suggest that your practice is wrong because you are mixing in different goals, different kinds of logic into your docstrings.</p>
<p>If I were you, I would isolate and separate your goals instead of combining everything into your docstrings. I would keep the logic of your test cases, and of your configuration in separate places designated for that logic.</p>
<p>In general in programming, I believe keeping your different goals isolated is part of what "best practices" encapsulates.</p>
<p>I should admit, though, that from reading your question I'm not confident that I completely understand what you're asking, or what you're doing with your testing and configuration.</p>
</div>
<span class="comment-copy">If the configuration is private, there doesn't seem to be any reason to put it in the doc string instead of directly in the code. If the configuration is public, users should be modifying configuration files, not the source code.</span>
<span class="comment-copy">@chepner Thanks! my situation is that I have multiple functions and for each function there is some 'instructions' which is written when the function is created.Therefore, save the 'instructions' with function is more sensible in my case. Otherwise I have to keep a 'instruction' list somewhere in my code.</span>
<span class="comment-copy">It is not really clear what you are trying to achieve. Are you reinventing some sort of "docstring-to-unittest"-framework?</span>
<span class="comment-copy">Are you thinking of something like doctest? <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">docs.python.org/3/library/doctest.html</a></span>
<span class="comment-copy"><code>Doctest</code> does that, but honestly I'm not a big fan of it. If your code requires tests, white them. If your code requires configuration, pass it explicitly. Explicit is better than implicit. Also, comments generally have a tendency to rot. Someone sooner or later will change a code, but won't change a comment.</span>
