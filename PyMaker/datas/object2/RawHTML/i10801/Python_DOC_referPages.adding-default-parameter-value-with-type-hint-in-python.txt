<div class="post-text" itemprop="text">
<p>If I have a function like this:</p>
<pre><code>def foo(name, opts={}):
  pass
</code></pre>
<p>And I want to add type hints to the parameters, how do I do it? The way I assumed gives me a syntax error:</p>
<pre><code>def foo(name: str, opts={}: dict) -&gt; str:
  pass
</code></pre>
<p>The following doesn't throw a syntax error but it doesn't seem like the intuitive way to handle this case:</p>
<pre><code>def foo(name: str, opts: dict={}) -&gt; str:
  pass
</code></pre>
<p>I can't find anything in the <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer"><code>typing</code> documentation</a> or on a Google search. </p>
<p>Edit: I didn't know how default arguments worked in Python, but for the sake of this question, I will keep the examples above. In general it's much better to do the following:</p>
<pre><code>def foo(name: str, opts: dict=None) -&gt; str:
  if not opts:
    opts={}
  pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your second way is correct. </p>
<pre><code>def foo(opts: dict = {}):
    pass

print(foo.__annotations__)
</code></pre>
<p>this outputs</p>
<pre><code>{'opts': &lt;class 'dict'&gt;}
</code></pre>
<p>It's true that's it's not listed in <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>, but type hints are an application of function annotations, which are documented in PEP 3107. <a href="https://www.python.org/dev/peps/pep-3107/#syntax">The syntax section</a> makes it clear that keyword arguments works with function annotations in this way. </p>
<p>I strongly advise against using mutable keyword arguments. More information <a href="http://docs.python-guide.org/en/latest/writing/gotchas/#mutable-default-arguments">here</a>.</p>
</div>
<span class="comment-copy">The last function is the correct way. It's the same way <code>scala</code> language does it too.</span>
<span class="comment-copy">you have a mutable default type - that will lead to problems</span>
<span class="comment-copy">see my update answer, @josh</span>
<span class="comment-copy">@noɥʇʎԀʎzɐɹƆ Not unless you're using it for, e.g. memoization. :P</span>
<span class="comment-copy">See <a href="http://legacy.python.org/dev/peps/pep-3107/#syntax" rel="nofollow noreferrer">legacy.python.org/dev/peps/pep-3107/#syntax</a>. Type hinting is just an application of function annotations.</span>
<span class="comment-copy">@chepner true. didn't know that PEP 3107 had something about keyword arguments.</span>
<span class="comment-copy">Wow, I didn't know about the mutable default arguments in Python... especially coming from Javascript/Ruby where default arguments work differently. Not gonna rehash what's already been said ad nauseum around SO about it, I'm just glad I found out about this before it bit me. Thanks!</span>
<span class="comment-copy">@josh you're welcome!</span>
<span class="comment-copy">I was always advised to use None rather than a mutable type like {} or [] or a default object as mutations to that object without a deep-copy will persist between iterations.</span>
