<div class="post-text" itemprop="text">
<p>I have just started out with Python, and am using Idle.</p>
<p>I put in:</p>
<pre><code>print("Professor Redwood: Right! So your name is",name,"!")
</code></pre>
<p>And got this in the console:</p>
<pre><code>Professor Redwood: Right! So your name is Chase !
</code></pre>
<p>Notice the spaces around the name <code>"Chase"</code>. I can't figure out how to get rid of these spaces. I looked up this question, and went to <a href="https://stackoverflow.com/questions/24692694/unwanted-blank-space-after-variable">this page</a>. I could not understand what the answer meant, so I need some help with it.</p>
<p>(Please note that I have already set the variable.)</p>
</div>
<div class="post-text" itemprop="text">
<p>By default, the Python <code>print</code> function uses a separation set to a single space when printing arguments; you can easily override this by defining <code>sep=''</code> (i.e empty space):</p>
<pre><code>print("Professor Redwood: Right! So your name is",name,"!", sep='')
</code></pre>
<p>Which will now <code>print</code>:</p>
<pre><code>Professor Redwood: Right! So your name isChase!
</code></pre>
<hr/>
<p>For Python <code>2.x</code> you could either use <code>from __future__ import print_function</code> and if that doesn't suit you for some undisclosed reason, use <code>join</code> to explicitly join on the empty string:</p>
<pre><code>print "".join(["Professor Redwood: Right! So your name is",name,"!"])
</code></pre>
<p>or, use <code>.format</code> as the other answer suggests:</p>
<pre><code>print "Professor Redwood: Right! So your name is{0}!".format(name) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option using string concatenation:</p>
<pre><code>print("Professor Redwood: Right! So your name is"+ name + "!")
</code></pre>
<p>You could also do the following using string formatting</p>
<pre><code>print("Professor Redwood: Right! So your name is {0} !".format(name))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you're trying to do is concatenate strings which isn't exactly what commas in the <code>print</code> statement do. Instead, concatenation can be achieved several ways, the most common of which is to use the <code>+</code> operator.</p>
<pre><code>print("Professor Redwood: Right! So your name is " + name + "!")
</code></pre>
<p>or you can concatenate into a variable and print that. This is especially useful if you're concatenating lots of different strings or you want to reuse the string several times.</p>
<pre><code>sentence = "Professor Redwood: Right! So your name is " + name + "!"
print sentence
</code></pre>
<p>or you can use string formatting. This has the benefit of usually looking cleaner and allowing special variable types such as decimals or currency to be formatted correctly.</p>
<pre><code>print "Professor Redwood: Right! So your name is %s!" % name
print "Professor %s: Right! So your name is %s!" % (prof_name, name)
print "Professor Redwood: Right! So your name is {0}!".format(name)
</code></pre>
<p>Note that in Python 2, the print statement does not require brackets around the string. In Python 3 they are required.</p>
</div>
<span class="comment-copy">Not a duplicate, but see <a href="http://stackoverflow.com/questions/2960772/putting-a-variable-inside-a-string-python">this question</a>.</span>
<span class="comment-copy">And did you try looking up the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">documentation for the <code>print</code> function</a>?</span>
<span class="comment-copy">Good answer, of note, this only works with Python  â‰¥ 3.0 by default.</span>
<span class="comment-copy">Using <code>join</code> is slightly verbose.</span>
<span class="comment-copy">@intboolstring agreed, just adding alternatives is all.</span>
<span class="comment-copy">@Jim makes sense. I would definitely keep it in your answer.</span>
<span class="comment-copy">another option for python 2 is to include the future import to make <code>print</code> a function</span>
