<div class="post-text" itemprop="text">
<p>First, I realize the following code is probably not very good, so apologies for anything that makes you cringe, I'm just trying to code as much as I can in hopes of getting better.</p>
<p>This is part of a small hangman game project, I'm trying to figure the best way to deal with duplicate letters in strings.</p>
<p>This is what I got for now:</p>
<pre><code>def checkDupes(word):

    global dupeList
    global repeatTimesDupes

    if repeatTimesDupes != 0:
        dupeCount = 0
        for i in range(len(word)):
            temp = word[i]
            print("temp letter is: ", temp)

            for j in range(i+1,len(word)):
                if word[j] == temp:
                    if temp not in dupeList:
                        dupeList.append(word[j])
                        print("the dupeList contains: ", dupeList)#debug


    repeatTimesDupes -= 1

def getLetter(position,buttons,word):
    i = 96
    index = 0
    letter = chr(i)

    for button in buttons:
        if button != None:
            i+=1
            if button.collidepoint(position):
                print("the position is: ", position)
                print(i)
                for j in range(len(word)):
                    print(word[j] , chr(i))
                    if word[j] == chr(i):
                        index = j
                        return chr(i), index

        else:
            return '?', -1



def checkForLetter(word,letter):

    inWord = " "
    for i in range(len(word)):
        if word[i] == letter:
            inWord = True
            break
        else:
            print(len(word))
            print (word[i])
            inWord = False

    return inWord

#========================== Start Loop ===========================================

while done == False:
    events = pygame.event.get()
    screen.fill(BGCOLOR)
    timedelta = clock.tick_busy_loop(60)
    timedelta /= 1000 # Convert milliseconds to seconds
    for event in events: 
        if event.type == pygame.QUIT:
            done = True

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:                
                done = True

        if event.type == pygame.MOUSEBUTTONUP:
            if event.button == MOUSEBUTTONLEFT:
                pos = pygame.mouse.get_pos()
                for button in buttonsList:
                    if button.collidepoint(pos):
                        if button != None:
                            checkDupes(gameWord)
                            letter, atIndex = getLetter(pos,buttonsList,gameWord)
                            letterSelected = True
                            moveCounter+=1


    screen.blit(blackBG,(0,0))
    showButtons(letterList)
    showLetterSlots(gameWord,screenRect)
    setCounters(moveMade,mistakeMade)

    if letterSelected:
        inGameWord = checkForLetter(gameWord, letter)
        if inGameWord:
            print(atIndex)
            print(letter)
            letterRen = wordFonts.render(letter,1,(0,255,0))
            renderList[atIndex] = letterRen
            print("The render list is: ", renderList)

            renCount = 0
            for r in lineRectList:
                if renderList[renCount] != '?' :
                    screen.blit(renderList[renCount],((r.centerx-10),430))
                if renCount &lt;= len(gameWord):
                    renCount+=1



#update game screen
    clock.tick(60)
    pygame.display.update()



#========================== End Loop =============================================

pygame.quit()  
</code></pre>
<p>I'm looking for quick way to deal with duplicates so they are blitted along with their matches. I'm already slowing down my letter blits with all that looping, so I'm not really sure my current <code>getDupes</code> is the way to go.</p>
<p>If anyone is willing to look at this and give some input, I'd very much appreciate it.</p>
<p>Thanks for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on what you've described in the comments, it seems reasonable to use a <code>dictionary</code> object in this case. You don't just want to store the letter, you want to store <em>where</em> those letters occur. </p>
<p>Dictionaries have a key and a value. For example:</p>
<p><code>{'jack': 4095, 'jill': 12}</code>
The key is <code>jack</code> and the value is <code>4095</code>.</p>
<p>In this case, we won't be using an <code>int</code> for the value. We'll actually be using an array of ints. </p>
<p>So, your dictionary might look like this:</p>
<p><code>{'o':[1, 5, 6, 3, 2, 1]}</code> where those numbers are the <em>index</em> that the letter was encountered at. That will work for an arbitrary number of duplicate letters. Then, in your buttons, you know which ones to 'blit' because they're in the same order as the string.</p>
<p>Python dictionary documentation: 
<a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">https://docs.python.org/3/tutorial/datastructures.html</a></p>
<p>FWIW, some refactoring would do you service here as well.</p>
</div>
<span class="comment-copy">Please narrow down your code posting to only what is relevant to the question you are asking.</span>
<span class="comment-copy">Done and done, while all the downvotes though? Is this place so entrenched in elitism that people look down on novices and those trying to improve?   I'm sorry, I don't wanna come across as an arse, but the negative response I get to every question I post is a bit frustrating. I mean, should I just look elsewhere for decent help?</span>
<span class="comment-copy">@Wretch11 Welcome to Stack Overflow! Downvotes are not a personal reflection on you. You're very welcome here. Downvotes are signals that the post need to be improved, not an outright rejection of what you've submitted. Now, let's see if we can figure out what's going on here. What's the desired behavior, here? What's supposed to happen if there's a duplicate string?</span>
<span class="comment-copy">@Ares As the code is now, it will simply blit the first instance of any letter at the first index position it appears at. For now the <code>checkDupes</code> function only append duplicate letters to a duplicate list.   What I'd like is for every instance of a char in a string to blit when it's button is clicked. So for instance, if my the game string is "hello world", id like both 'o' chars to blit when the 'o' is clicked.  I know I can simply iterate through my duplicate list after the intial blit, and just blit those, but as I mentioned, my blit are already slow, due to all the looping.</span>
<span class="comment-copy">So, right now, you store a list of duplicate letters; this is a strange way of solving the problem. You may want to make checkDupes return a value, but my immediate thought is that you ought to use a dictionary.</span>
<span class="comment-copy">I'll try that out now, and looking over dict list comprehension, I can probably make things a lot quicker. Thanks man, I'll check back in when I try this out.</span>
