<div class="post-text" itemprop="text">
<p>So in games where you can create "random" worlds there is an option for seeds. The thing i don't understand is: how can you get the same outcome if you fill in the same seed? I would say you have to store every outcome but thats very hard to achieve. I've read something about PRNG(Pseudo random number generator). Every outcome is determined in a PRNG. But i have no idea how to achieve this in python</p>
</div>
<div class="post-text" itemprop="text">
<h2>How does a RNG end up generating the same sequence given the same seed?</h2>
<p>Let's take a trivial RNG implementation:</p>
<pre><code>class SillyRand:
    """Don't try this at home!"""

    def __init__(self, seed):
        self.current = self.calc(seed)

    def get(self):
        current_ = self.current
        self.current = self.calc(current_)
        return current_

    def calc(self, prev):
        return ((prev * 7) + 17) % 100
</code></pre>
<p>This implementation contains many flaws, but it should be enough to demonstrate the concept. <strong>It uses the <code>seed</code> as the predecessor of the first random number in the sequence.</strong></p>
<p>If we run this:</p>
<pre><code>print("Seed is 123")
r = SillyRand(123)
for i in range(10):
    print(r.get())
</code></pre>
<p>The output will be:</p>
<pre><code>Seed is 123
78
63
58
23
78
63
58
23
78
63
</code></pre>
<p>And with a different seed...</p>
<pre><code>print("Seed is 42")
r = SillyRand(42)
for i in range(10):
    print(r.get())
</code></pre>
<p>we get a different sequence:</p>
<pre><code>Seed is 42
11
94
75
42
11
94
75
42
11
94
</code></pre>
<p>But the same seed will give the same sequence every run.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>random.seed</code>:</p>
<pre><code>import random

random.seed(42)
random.random() # 0.6394267984578837
</code></pre>
<p>This program will always return that value as the first generated random number, because the seed is always the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's quite easy actually, firstly you have to import random library and then you juste have to set the seed manually using your game's seed value :</p>
<pre><code>import random
your_seed = 1234
random.seed(seed)
random.randint(1, 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A PRNG does not create "random" number but always produces the same numbers when the same seed is used. Thus if you do something in dependence on these numbers you will always do the same when you enter the same seed.</p>
<p>In python the <code>random</code> module will take a seed, see <a href="https://docs.python.org/3/library/random.html#random.seed" rel="nofollow">the documentation</a>. If you provide no seed the current system time is chosen and thus it seems random and is often random enough.</p>
<p>An example may help you how this relates to level creation.</p>
<pre><code>import random
elements = ["Enemy1", "Enemy2", "Powerup", "Hazard", "empty", "empty", "empty"]
level_length = 100
seed = 100
random.seed(100)

level = []

for i in range(level_length):
    level.append(random.choice(elements))

print(level)
</code></pre>
<p>This will generate a random level - besides that it is not random but dependent on the seed. If you choose a different seed, you will get a different level. But if you choose the same seed, you will get the same level.</p>
<p>Ofcourse this is only a one dimensional level, but it is the same for two or three dimensional level.</p>
</div>
<span class="comment-copy">Your question is not clear. What are you trying to achieve?</span>
<span class="comment-copy">PRNG is maybe too a general term, maybe you're looking for an LCG (linear-congruental generator). It can be implemented using a couple of lines.</span>
<span class="comment-copy">You don't need to worry about the details of <i>how</i> it works. But if you <i>do</i> want to understand this interesting topic the Wikipedia articles are a good starting point. You don't need to create your own PRNG in Python: there's a good one you can use in the standard Python <code>random</code> module.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/random.html#random.seed" rel="nofollow noreferrer">The <code>random.seed</code> docs</a> say that if you provide no seed then the <code>random</code> module will create a seed using the current time. However, if the OS provides a randomness source, (aka <a href="https://en.wikipedia.org/wiki/Entropy_%28computing%29" rel="nofollow noreferrer">entropy source</a> or entropy pool) then that will be used in preference to system time. As the Wikipedia link shows, most modern OSes provide an entropy source.</span>
