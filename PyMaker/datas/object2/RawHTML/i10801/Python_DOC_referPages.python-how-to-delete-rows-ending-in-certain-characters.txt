<div class="post-text" itemprop="text">
<p>I have a large data file and I need to delete rows that end in certain letters.</p>
<p>Here is an example of the file I'm using:</p>
<pre><code>User Name     DN
MB212DA       CN=MB212DA,CN=Users,DC=prod,DC=trovp,DC=net
MB423DA       CN=MB423DA,OU=Generic Mailbox,DC=prod,DC=trovp,DC=net
MB424PL       CN=MB424PL,CN=Users,DC=prod,DC=trovp,DC=net
MBDA423       CN=MBDA423,OU=DNA,DC=prod,DC=trovp,DC=net
MB2ADA4       CN=MB2ADA4,OU=DNA,DC=prod,DC=trovp,DC=netenter code here
</code></pre>
<p>Code I am using:</p>
<pre><code>from pandas import DataFrame, read_csv
import pandas as pd
f = pd.read_csv('test1.csv', sep=',',encoding='latin1') 
df = f.loc[~(~pd.isnull(f['User Name']) &amp; f['UserName'].str.contains("DA|PL",))]
</code></pre>
<p>How do I use regular expression syntax to delete the words that end in "DA" and "PL" but make sure I do not delete the other rows because they contain "DA" or "PL" inside of them?</p>
<p>It should delete the rows and I end up with a file like this:</p>
<pre><code>User Name     DN
MBDA423       CN=MBDA423,OU=DNA,DC=prod,DC=trovp,DC=net
MB2ADA4       CN=MB2ADA4,OU=DNA,DC=prod,DC=trovp,DC=net
</code></pre>
<p>First 3 rows are deleted because they ended in DA and PL.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use this expression</p>
<pre><code>df = df[~df['User Name'].str.contains('(?:DA|PL)$')]
</code></pre>
<p>It will return all rows that don't end in either DA or PL. </p>
<p>The <code>?:</code> is so that the brackets would not capture anything. Otherwise, you'd see pandas returning the following (harmless) warning: </p>
<pre><code>UserWarning: This pattern has match groups. To actually get the groups, use str.extract.
</code></pre>
<p>Alternatively, using <code>endswith()</code> and without regular expressions, the same filtering could be achieved by using the following expression:</p>
<pre><code>df = df[~df['User Name'].str.endswith(('DA', 'PL'))]
</code></pre>
<p>As expected, the version without regular expression will be faster. A simple test, consisting of <code>big_df</code>, which consists of 10001 copies of your original <code>df</code>:</p>
<pre><code># Create a larger DF to get better timing results
big_df = df.copy()

for i in range(10000):
    big_df = big_df.append(df)

print(big_df.shape)

&gt;&gt; (50005, 2)

# Without regular expressions
%%timeit
big_df[~big_df['User Name'].str.endswith(('DA', 'PL'))]

&gt;&gt; 10 loops, best of 3: 22.3 ms per loop

# With regular expressions
%%timeit
big_df[~big_df['User Name'].str.contains('(?:DA|PL)$')]

&gt;&gt; 10 loops, best of 3: 61.8 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a boolean mask whereby you check if the last two characters of <code>User_Name</code> are in not (<code>~</code>) in a set of two character endings:</p>
<pre><code>&gt;&gt;&gt; df[~df.User_Name.str[-2:].isin(['DA', 'PA'])]
  User_Name                                                 DN
2   MB424PL    CN=MB424PL, CN=Users, DC=prod, DC=trovp, DC=net
3   MBDA423      CN=MBDA423, OU=DNA, DC=prod, DC=trovp, DC=net
4   MB2ADA4  CN=MB2ADA4, OU=DNA, DC=prod, DC=trovp, DC=nete...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of <code>regular expressions</code>, you can use the <a href="https://docs.python.org/3/library/stdtypes.html#str.endswith" rel="nofollow"><code>endswith()</code></a> method to check if a string ends with a specific pattern.</p>
<p>I.e.:</p>
<pre><code>for row in rows:
    if row.endswith('DA') or row.endswith('PL'):
        #doSomething
</code></pre>
<p>You should create another df using the filtered data, and then use <code>pd.to_csv()</code> to save a clean version of your file.</p>
</div>
<span class="comment-copy">Doesn't endswith accept a regex? I suspect it uses one under the hood.</span>
<span class="comment-copy">I thought so too, even the docs state that the first argument is a pattern, but I couldn't get it to recognise a regex.</span>
<span class="comment-copy">@AndyHayden apparently it does take a tuple.</span>
<span class="comment-copy">@AndyHayden, <code>/core/strings.py - str_endswith(arr, pat, na=np.nan)</code> doesn't seem to accept RegEx'es</span>
