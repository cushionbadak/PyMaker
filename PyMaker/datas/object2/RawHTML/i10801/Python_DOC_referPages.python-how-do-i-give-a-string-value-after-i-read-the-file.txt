<div class="post-text" itemprop="text">
<p>I'm new to this community and this computer language. Recently I'm working on some practice and a question has bugged me for several days. Here is the question:
Read file test.txt(index: "CDEF","ABC","FIJK") in python, and re-align it into "ABC","CDEF","FIJK" , and given each character a value based on alphabet order(eg, "ABC" = 1+2+3=6), at last print the value of the index
(eg, A+B+C=6,"ABC"at first place represents 1, so the value of"ABC"is 6, the value of "CDEF" is 18*2=36(2 represents second place of the list) "FIJK" is 36*3=108)print out 150(6+36+108)  </p>
<p>I don't have code right now. I'm thinking of if I do it with dictionary key. But is there any brilliant way to do it or if the file today isn't the index above. Should I do it in loop? </p>
</div>
<div class="post-text" itemprop="text">
<p>First, let's assume that you have a file called <code>sample.txt</code> containing the following:</p>
<pre><code>CDEF
ABC
FIJK
</code></pre>
<p><strong>SCRIPT</strong></p>
<p>Here is the script to accomplish what (I think) you are after:</p>
<pre><code>with open('so.txt', 'r') as file:
    lines = [x.replace('\n', '') for x in file.readlines()]
    print "lines: ", lines
    lines.sort()
    print "lines sorted: ", lines

    sums = [sum([ord(letter.lower()) - 96 for letter in line]) for line in lines]
    print "sums: ", sums

    products = [x * (sums.index(x) + 1) for x in sums]
    print "products: ", products

    total = sum(products)
    print "total: ", total
</code></pre>
<p><strong>OUTPUT</strong></p>
<p>The output of the above code:</p>
<pre><code>lines:  ['CDEF', 'ABC', 'FIJK']
lines sorted:  ['ABC', 'CDEF', 'FIJK']
sums:  [6, 18, 36]
products:  [6, 36, 108]
total:  150
</code></pre>
<p><strong>EXPLANATION</strong></p>
<p>(1) Open <code>so.txt</code> as a read-only file, and store it as a variable: <code>file</code>.</p>
<pre><code>with open('so.txt', 'r') as file:
</code></pre>
<p>(2) Take each line in <code>file</code> and remove any linebreaks and turn it into a list.</p>
<pre><code>    lines = [x.replace('\n', '') for x in file.readlines()]
</code></pre>
<p>(3) Sort the list.</p>
<pre><code>    lines.sort()
</code></pre>
<p>(4) This one is a little tricky as it is doing a few things.</p>
<pre><code>    sums = [sum([ord(letter.lower()) - 96 for letter in line]) for line in lines]
</code></pre>
<p>So, let's break it up into two components:</p>
<pre><code>    sums = [&lt;do_something_here with line&gt; for line in lines]
</code></pre>
<p>That code is called a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>. It is creating a new list with each element of the <code>lines</code> list, and doing something. It is roughly equivalent to:</p>
<pre><code>    sums = []
    for line in lines:
        sums.append(&lt;do_something_here with line&gt;)
</code></pre>
<p>So, having the <code>line</code> variable (which would be a string), we can treat that also as a list and iterate over it in another list comprehension:</p>
<pre><code>    [ord(letter.lower()) - 96 for letter in line]
</code></pre>
<p>For each <code>letter</code> in the <code>line</code> string, it converts it to lower case, makes it an ASCII ordinal, and subtracts <code>96</code> to get it to start with <code>a == 1</code>. You can see a list of <a href="http://www.ascii-code.com/" rel="nofollow">all ASCII numbers here</a>.</p>
<p>Finally, having a list that is now character strings converted into numbers, we apply <code>sum()</code> to that list.</p>
<p>We now have:</p>
<pre><code>[6, 18, 36]
</code></pre>
<p>(5) We take that list of the <code>sums</code> and provide <em>another</em> list comprehension. This time, the goal is to take each number, and multiply it by its <code>index</code>. You can get the index of an element by calling <code>list.index(element)</code>. As follows:</p>
<pre><code>    products = [x * (sums.index(x) + 1) for x in sums]
</code></pre>
<p>(6) Finally, all we have to do is sum that last list we made using the <code>sum()</code> method again.</p>
<pre><code>    total = sum(products)
</code></pre>
<p>I hope I answered the question you were after.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a nested comprehension:</p>
<pre><code>&gt;&gt;&gt; lst = ["ABC", "CDEF", "FIJK"]
&gt;&gt;&gt; sum((idx + 1) * sum(ord(letter) - 64 for letter in item) for idx, item in enumerate(lst))
150
</code></pre>
<p>If you want to use a regular for loop with an accumulator:</p>
<pre><code>total_sum = 0 
for idx, item in enumerate(lst):
    total_sum += (idx + 1) * sum(ord(letter) - 64 for letter in item)
print(total_sum)
</code></pre>
<p><code>ord("A")</code> gives you the ascii value of a character. For <code>"A"</code> it is <code>65</code>. This is why I'm subtracting <code>64</code> in the example. So <code>(ord(letter) - 64 for letter in item)</code> generates a number for each character in the string <code>"ABC"</code>, for example, and then sum adds them up. This value is then accumulated into <code>total_sum</code>, which will contain <code>6</code> after the first iteration of the <code>for</code> loop.</p>
</div>
<span class="comment-copy">You don't need dictionaries. Lists are your friend here. And, in particular, search for "list comprehension". That is what you want. Welcome to the community. Are you looking for the code on how to accomplish this, or just suggestions on how to get started?</span>
<span class="comment-copy">Hi! @Ahop . If it won't bother you. I hope maybe I can get some sample code. Maybe it could redirect me. Thank you!</span>
<span class="comment-copy">Thank you for the tutorial!! Now I thoroughly know how to use list comprehension properly. You the real MVP!</span>
<span class="comment-copy">:-) glad to help. I remember myself as soon as I figured them out, it opened the world of python to me. If you like the answer, you can click the check box to accept it.</span>
<span class="comment-copy">@Ahop in step 4, is it necessarily to transfer letter in to lower?  [ord(letter()) - 64 for letter in line]  is this same as what you did?</span>
<span class="comment-copy">Yes. I only made it lower so that the code was more reusable and could handle different files regardless of case. You could use .upper() for the same effect.</span>
<span class="comment-copy">thank you for the answer. But how can I write it in loop?</span>
