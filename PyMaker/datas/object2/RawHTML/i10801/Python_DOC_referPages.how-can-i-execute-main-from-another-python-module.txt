<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/26463200/calling-if-name-main-in-one-module-from-a-function-in-another-modu">Calling if __name__ == '__main__': in one module from a function in another module [closed]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have a python file that I am not the maintainer of that looks like the code below. Without modifying the code to put everything under the if __name__, is there a way to import this from another module so I can execute it and pass arguments programmatically?</p>
<pre><code>import configargparse

if __name__ == '__main__':
    args = get_args()
    #more code to execute...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't, for the most part.  That code isn't exposed in a useful fashion.  If you are able to modify the source file, the typical solution would be to move all of that code out of the <code>if __name__ == '__main__'</code> block and put it into a <code>main()</code> function instead.</p>
<p>It's <em>possible</em> to use the <code>execfile</code> function to sort of do what you want, as described <a href="http://www.jjinux.com/2007/01/python-running-main-from-another-script.html" rel="nofollow">here</a>, but this is an ugly solution for a number of reasons (the <code>import</code> statement is being used only for side effects, because you're cheating and using it to get the filename, and module level variables will probably not behave as you expect when referenced as <code>module.var</code>, as described in some of the comments on that page).</p>
<p>And even in this example, it's not clear that there's a useful way to pass arguments.  I guess you could set <code>sys.argv</code> explicitly, but look how hacky this is already smelling...</p>
</div>
<span class="comment-copy">Definitely a duplicate, thanks.  After reading that it looks like the answer is it isn't possible.</span>
<span class="comment-copy">No, unless the module just uses <code>if __name__ == '__main__'</code> to call a <code>main()</code> function, you can't do it unfortunately.</span>
<span class="comment-copy">I have it sort of working by launching command shells, but I was hoping for a cleaner solution without touching code that isn't mine.  Thanks though.</span>
<span class="comment-copy">how about using runpy <a href="https://docs.python.org/3/library/runpy.html" rel="nofollow noreferrer">docs.python.org/3/library/runpy.html</a>? It looks like it is intended for this exact purpose</span>
