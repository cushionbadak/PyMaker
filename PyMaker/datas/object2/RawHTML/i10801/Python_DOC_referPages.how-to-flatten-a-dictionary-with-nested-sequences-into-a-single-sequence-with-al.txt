<div class="post-text" itemprop="text">
<p>I have a workable solution that returns a set:</p>
<pre><code>&gt;&gt;&gt; a = {'a': {'1', '2', '3'}, 'b': {'4', '5', '6'}, 'c': {'7', '8', '9'}}

&gt;&gt;&gt; def flatten_nested(a):
        temp = set(
            [value for value_set in a.values() for value in value_set]
        )
        return temp | a.keys()

&gt;&gt;&gt; flatten_nested(a)
&gt;&gt;&gt; {'1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c'}
</code></pre>
<p>I wondered if there was some <code>itertools.chain</code>-like function already built in to Python to do something similar?</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess more simple is this:</p>
<pre><code>&gt;&gt;&gt; set.union(set(a), *a.values())
{'1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c'}
</code></pre>
<p>Or, here's the same thing via the bound method:</p>
<pre><code>&gt;&gt;&gt; set(a).union(*a.values())
{'1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the values are already sets then <a href="https://stackoverflow.com/a/38731658/2141635">wims answer</a> is the simplest, but to work for iterables like a list, tuples etc.. you would have to map to a set i.e <code>set(a).union(map(set, a.values())</code> or you could union the <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">chain</a> of all the values with the view of the keys:</p>
<pre><code>from itertools import chain
def flatten_nested(a):
    return a.keys() | chain(*a.values()) # a.viewkeys() python2
</code></pre>
</div>
<span class="comment-copy">@wim,  they are probably using python3 where .keys is a dictview object so there is no need for the set call although <code>return temp.union(a)</code> would work for both python2 and 3.</span>
<span class="comment-copy">Fun fact, the dict_keys view supports the operand <code>|</code> with a chain object, but an actual set doesn't!</span>
<span class="comment-copy">@wim, yep,  probably why sets have  <code>.union, .difference</code> etc..</span>
