<div class="post-text" itemprop="text">
<p>How do I write a list of tuples to a text file and read them back into the original list format?</p>
<p>My code gives:</p>
<pre><code>["(50, 'AAA')\n", "(40, 'BBB')\n", "(30, 'CCC')\n", "(20, 'DDD')\n", "(10, 'EEE')\n"]
</code></pre>
<p>My code:</p>
<pre><code>file = open("x.txt", "w")
default_scores = [(10, "EEE"), (20, "DDD"), (30, "CCC"), (40, "BBB"), \
                  (50, "AAA")]
default_scores.sort(reverse=True)
default_score_strings = []
for entry in default_scores:
    default_score_strings.append(str(entry) + "\n")
file.writelines(default_score_strings)
file.close()

file = open("x.txt", "r")
lines = file.readlines()
file.close()

print(lines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to write a data-structure to a file and get it back (without mixing it with other contents) you can use (de)serialization with <a href="https://docs.python.org/3/library/pickle.html#examples" rel="nofollow">pickle</a>:</p>
<pre><code>import pickle
pickle.dump(default_scores, open('tuple.dump', 'wb'))
retreived_default_scores = pickle.load(open('tuple.dump', 'rb'))
</code></pre>
<p><strong>UPDATE:</strong>
If this is the challenge where pickling is not expected, then it can be done this way:</p>
<pre><code>import ast

ds=[(10, "EEE"), (20, "DDD"), (30, "CCC"), (40, "BBB"), \
                  (50, "AAA")]
fname = 'practice.txt'

with open(fname, 'w') as f:
    f.write(str(ds))

with open(fname, 'r') as f:
    retreived_ds = ast.literal_eval(f.read())

print(ds == retreived_ds)# True
</code></pre>
<p><strong>Further update:</strong></p>
<p>OPs comment imply that this is a practice question in string processing for beginners where use of tools like pickle is not allowed. Then, so are <code>eval</code> statements. In that case:</p>
<pre><code>ds=[(10, "EEE"), (20, "DDD"), (30, "CCC"), (40, "BBB"), \
                  (50, "AAA")]
fname = 'practices.txt'

with open(fname, 'w') as f:
    f.write(str(ds))

with open(fname, 'r') as f:
    ds_string = f.read()

retreived_ds = []
i = 0
ds_string = ds_string.strip()[1:-1]
while(i &lt; len(ds_string)):
    if ds_string[i] == '(':
        end_index = ds_string[i+1:].index(')') + i
        first, second = ds_string[i+1: end_index].split(',')
        retreived_ds.append((int(first), second.strip().replace("'", "")))
        i = end_index + 1
    i = i + 1

print(retreived_ds == ds)#True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension to convert the list returned by file.readlines() into list of tuples -</p>
<p><strong>lines = [ast.literal_eval(line.strip()) for line in file.readlines()]</strong></p>
<p>I have used ast.literal_eval to convert string into tuple.
read more about ast.literal_eval <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow">here</a></p>
<p>Here is the complete code -</p>
<pre><code>import ast
file = open("x.txt", "w")
default_scores = [(10, "EEE"), (20, "DDD"), (30, "CCC"), (40, "BBB"), \
                  (50, "AAA")]
default_scores.sort(reverse=True)
default_score_strings = []
for entry in default_scores:
    default_score_strings.append(str(entry) + "\n")
file.writelines(default_score_strings)
file.close()

file = open("x.txt", "r")
lines = [ast.literal_eval(line.strip()) for line in file.readlines()]
file.close()

print(lines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If it's a file used only internally for your program to store an later retrieve the data you can use a simpler approach:</p>
<pre><code># Save data to disk
with open("mydata.dat", "w") as f:
    f.write(repr(data))

...

# Read back from disk
with open("mydata.dat") as f:
    data = eval(f.read())
</code></pre>
<p>This will handle nicely a lot of Python arbitrary data structures made of lists, tuples, dictionaries, strings, numbers, bools ... provided that the data structure is just tree-like (without loops or sharing). The advantage of this approach is that the file is in human readable form and you can edit the content manually easily (it's just Python syntax).</p>
<p>For tree-like data structures it's also easy to us the <code>json</code> module that has the added advantage to write/read in a manually editable format for which there are also support libraries for basically any language allowing easy data exchange between Python, Java, Javascript, C++, C# and you-name-it. The code would be:</p>
<pre><code># save
with open("mydata.json", "w") as f:
    f.write(json.dumps(data))

...

# load
with open("mydata.json") as f:
    data = json.loads(f.read())
</code></pre>
<p>For a more general approach supporting internal references (loops and shared data) and user defined classes you can use instead the standard module <code>pickle</code> (the result however will not be manually editable).</p>
<p>Note that if the input file is coming from an untrusted source then you should use a different approach as <code>eval</code>, <code>pickle</code> and other ready made library functions (except possibly <code>json</code>) are not designed to be able to stop hostile attacks.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that <a href="https://docs.python.org/3/library/json.html" rel="nofollow">json</a> is suitable for the task :</p>
<pre><code>default_scores = [(10, "EEE"), (20, "DDD"), (30, "CCC"), (40, "BBB"), (50, "AAA")]

import json
with open('scores.txt','w') as ff:
    json.dump(default_scores ,ff )
with open('scores.txt','r') as ff:
    scores = json.load(ff)
    print(scores)
    # should print : [[10, 'EEE'], [20, 'DDD'], [30, 'CCC'], [40, 'BBB'], [50, 'AAA']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your purpose is to read the lines without the newline characters, you can change that after reading the lines with a simple for loop:</p>
<pre><code>lines = file.readlines()
lines = [line[:-1] for line in lines]
</code></pre>
<p>Or of course, you could read the file and split lines using <code>str.splitlines</code>:</p>
<pre><code>lines = file.read().splitlines()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just delete the '\n' character and append everything into a new list</p>
<pre><code>x = []
for i in lines:
    i = i.replace("\n","")
    x.append(i)
lines = x
</code></pre>
</div>
<span class="comment-copy">Thanks for all the replies. Much appreciated.</span>
<span class="comment-copy">The challenge (in my beginners book) is to use a plain .txt file. The previous challenge was actually to pickle the data.</span>
<span class="comment-copy">@MichaelJohnson , I have further updated the answer to include the solution that do not user eval/pickle. Just plain string processing and file read.</span>
<span class="comment-copy">Thank you very much. I've learned plenty from your code.</span>
<span class="comment-copy">Glad that it helps you.</span>
<span class="comment-copy">Regarding, your last statement, using <code>ast.literal_eval</code> would be OP's best bet.</span>
<span class="comment-copy">@DeepSpace: <code>json</code> should be reasonably safe (there is the problem of maximum resource consumption, but that's another matter that's difficult to handle without writing a custom parser).</span>
