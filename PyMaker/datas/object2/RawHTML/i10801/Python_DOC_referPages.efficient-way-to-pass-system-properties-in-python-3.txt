<div class="post-text" itemprop="text">
<p>I'm using python 3 for an application. For that utility, I need to pass command line arguments as following, </p>
<pre><code>python3 -m com.xxx.executor -Denvironment=dev -Dtoggle=False 
</code></pre>
<p>Both the parameter <code>environment</code> and <code>toggle</code> are present in a property file too. If the value is specified in command line, it should override what is present on property file.</p>
<p>I'm basically a java guy and in java, the properties passed in the form <code>-Dkey=value</code> will be set as system property. Then these properties can be read from code as <code>System.getProperty(key, defaultVal)</code>.</p>
<p>But when I try the same in python 3, it didn't work. </p>
<p>After referring python docs, it seems to me like the sys._xoptions are suitable for my requirement. </p>
<pre><code> python3 -Xenvironment=dev -Xtoggle=False -m com.xxx.executor
</code></pre>
<p>Then read the properties using, <code>sys._xoptions</code></p>
<p>I'm using Cpython. The aim of the thread is to ensure that, the way I'm proceeding is right or not. Or is there any other better ways in python to implement the same.</p>
<p>Python veterans, please guide !</p>
</div>
<div class="post-text" itemprop="text">
<p>For argument parsing, I use the <code>argparse</code> module (<a href="https://docs.python.org/3.5/library/argparse.html#module-argparse" rel="nofollow noreferrer">docs</a>) to define which are valid named and/or positional arguments. </p>
<p>There are third-party modules as well such as <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer">click</a> and <a href="http://docopt.org" rel="nofollow noreferrer">docopt</a>. You should use what you feel most comfortable with and whether or not you can use third-party modules. The click documentation contains a (possibly biased) comparison between it, argparse and docopt.</p>
<p>I've never used <code>sys._xoptions</code>, nor did I know of its existence. Seems a bit strange that a function starting with an <a href="https://stackoverflow.com/a/1301369">underscore</a> (normally used to indicate a "private" function) is mentioned in the docs. Perhaps someone else can shed some light on this.</p>
<p>For the parsing of a property file, I use the <code>configparser</code> module (<a href="https://docs.python.org/3.5/library/configparser.html#module-configparser" rel="nofollow noreferrer">docs</a>). Of course, you could opt for a JSON or YAML config file if you'd prefer that.</p>
<p>That said, you'll have to come up with the necessary code to overrule properties when specified as arguments (though that shouldn't be too difficult).</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3.4/using/cmdline.html#cmdoption-X" rel="nofollow">the docs on -X args</a></p>
<blockquote>
<p>Reserved for various implementation-specific options. CPython currently defines the following possible values:</p>
</blockquote>
<p>That means you probably shouldn't be hijacking these for your own purposes. As Kristof mentioned, argparse is a pretty reasonable choice. Since you want both a file and command line arguments, here's a quick example using a <code>json</code> file-based config:</p>
<pre><code>import json                                                 
import argparse                                             

argparser = argparse.ArgumentParser()                       
argparser.add_argument('--environment')                     
argparser.add_argument('--toggle', action='store_true')     
try:                                                        
    with open('config.json') as f:                          
        args = json.load(f)                                 
except (IOError, ValueError) as e:                          
    # If the file doesn't exist or has invalid JSON         
    args = {}                                               
args.update(vars(argparser.parse_args()))                   
print(args)     
</code></pre>
<p>There are other possible alternatives for the file-based config, like the <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow">configparser</a> module.</p>
</div>
<span class="comment-copy">from <code>import this</code>, <i>flat is better than nested</i>. While Python encourages namespacing, you probably don't want <code>com.xxx.executor</code>. Java encourages nesting, but you really don't need that in Python.</span>
<span class="comment-copy">The problem is that, I'm invoking the framework entry class(<code>com.xxx.executor</code>) from Jenkins build, where the module is pre installed in agent machine using a wheel package in its <code>{python.sys.path}\Lib\site-pacakges\com\xxx\executor</code>. So how can I use <code>import this</code> then ?</span>
<span class="comment-copy">Well, if someone <i>else</i> created a terribly nested package, then you're obligated to use it, but if you have any control over the nesting of the package you should fix that.</span>
<span class="comment-copy">Okay, I suggested to remove the nested packaging to the framework owners.</span>
<span class="comment-copy">OK. For property file parsing, I'm currently using <code>configparser</code>. Problem is with how to pass a property as generic <code>key=value</code> from command line. I think, I can use <code>argparse</code>. But I do have arount 25+ properties of which 2 or 3 are used in one execution. So thought of a generic way to pass <code>key=value</code> from command line(<code>-Xkey=value), so that I don't need to write 25+ different </code>parser.add_argument(key)<code>. I'll work out on </code>argparse` and let u know. Also, third party libraries and not allowed to use.</span>
<span class="comment-copy">You don't <i>have</i> to use <code>argparse</code> to parse the commandline options, you could very well reference <code>sys.argv</code>. <code>argparse</code> allows you to define which arguments you support, configure valid values for them etc.</span>
<span class="comment-copy">If all your arguments are more or less the same (i.e. only differ in name, but same datatype etc), you could just as easily wrap the <code>add_argument()</code> call in a <code>for</code> loop with a static list of values, e.g. <code>for arg in ['key1', 'key2',â€¦]</code></span>
<span class="comment-copy">Datatypes of the values may differ. But those will be simple objects of types  <code>str</code>, <code>int</code>, <code>bool</code>, <code>float</code> etc and not complex data structures like dictionary, lists, tuples etc.</span>
<span class="comment-copy">I'll try the mentioned <code>argparse</code> option and get back to you</span>
<span class="comment-copy">Please see <a href="https://docs.python.org/3.4/library/sys.html#sys._xoptions" rel="nofollow noreferrer">docs.python.org/3.4/library/sys.html#sys._xoptions</a> from python docs. So  is it not safe to use with Cpython? Please share your suggestions</span>
<span class="comment-copy">@appu if you carefully read that documentation, it says <i>This is a CPython-specific way of accessing options passed through -X. Other implementations may export them through other means, or not at all.</i> and if you click on the <code>-X</code> it will send you to the docs that I linked to. You <i>could</i> use it, but you're asking for trouble. Better to use an official/supported method for getting parameters from the command line/files.</span>
