<div class="post-text" itemprop="text">
<pre><code>class Test:
    __x = 1
    class C:
        def test(self):
            print(Test.__x)
    c = C()

a = Test()
a.c.test()
</code></pre>
<p>I get Error Information like this</p>
<blockquote>
<p>AttributeError: type object 'Test' has no attribute '_C__x'</p>
</blockquote>
<p>So, is it inner class cannot get access to outer class?
Or It can be using some other techniques?</p>
<p>And this questions comes from reading Learning Python, when author write about CardHolder, a inner class as a descriptor use instance.__name to reach the outer class' attribute, so what is the rule of whether can we access __X attribute?</p>
<p>Thank you for reading my problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow">Private Variables</a></p>
<blockquote>
<p>Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with leading underscore(s) stripped. <em>This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.</em></p>
</blockquote>
<pre><code>class Test:
    __x = 1                     # &lt;= A
    class C:
        def test(self):
            print(Test.__x)     # &lt;= B
    c = C()
</code></pre>
<ul>
<li>In <code>A</code> the class is <code>Test</code> and therefore <code>__x</code> is replaced with <code>_Test__x</code>, So, <code>Test</code> actually have the attribute <code>_Test__x</code></li>
<li>In <code>B</code> the class is <code>C</code>    and therefore <code>__x</code> is replaced with <code>_C__x</code>, So the attribute you  actually access is <code>Test._C__x</code></li>
</ul>
<p>To access 'private' <code>__x</code> attribute of <code>Test</code> class outside Test class definition you should use: <code>Test._Test__x</code></p>
<pre><code>print(Test._Test__x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding to underscores is the proper way to declare private attributes in Python. Your code would work fine if you changed the name of <code>__x</code> to <code>_Test__x</code> when you call it from the other class.</p>
<pre><code>class Test:
    __x = 1
    class C:
        def test(self):
            print(Test._Test__x)
    c = C()
    def test2(self):
        print self.__x

a = Test()
a.test2()   # prints 1
a.c.test()  # prints 1
</code></pre>
<p><a href="http://www.bogotobogo.com/python/python_private_attributes_methods.php" rel="nofollow">This tutorial</a> goes in the details of it. The rule is: you have to be in the class to call it directly. Subclasses won't work, but methods will.</p>
</div>
