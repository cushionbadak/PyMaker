<div class="post-text" itemprop="text">
<p>I'm following this <a href="https://stackoverflow.com/a/6798042/820410">link</a> and trying to make a singleton class using Metaclass. But, I want to make some internal tweaks to this singleton class and want the users to use another class (let's call it <code>MySingleton(__Singleton)</code>). So I decided to make it private but it gives the following error.</p>
<p><a href="https://i.stack.imgur.com/Smemv.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Smemv.png"/></a></p>
<p>My sole purpose is to prevent <code>__Singleton</code> from being used outside. How can I achieve this?</p>
<p>On a separate note, is it a good practice to use double underscore with classes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Inside the class, the identifier <code>__Singleton</code> is getting <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow">mangled</a>.  You end up having problems because name mangling only happens inside classes (not outside).  So <code>__Singleton</code> as a class name means something different than <code>__Singleton</code> when you are inside a class suite.</p>
<blockquote>
<p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where classname is the current class name with leading underscore(s) stripped. <strong>This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.</strong></p>
</blockquote>
<p>Note that the primary reason for mangling is because it</p>
<blockquote>
<p>... is helpful for letting subclasses override methods without breaking intraclass method calls.</p>
</blockquote>
<p>Also:</p>
<blockquote>
<p>... to avoid name clashes of names with names defined by subclasses</p>
</blockquote>
<p>As such, there really isn't any reason to have a class with leading double underscores in the name (there is no chance of intraclass method calls having conflicts with class names).  A single leading underscore is a good enough signal to users that they shouldn't use that class:</p>
<blockquote>
<p>... a name prefixed with an underscore (e.g. <code>_spam</code>) should be treated as a non-public part of the API (whether it is a function, a method or a data member). <strong>It should be considered an implementation detail and subject to change without notice.</strong></p>
</blockquote>
<hr/>
<p>I wouldn't advise it, but if you <em>really</em> want it to work, you can probably use <code>globals</code> to look up the class:</p>
<pre><code>class __Foo(object):
    def __init__(self):
        super(globals()['__Foo'], self).__init__()

f = __Foo()
print f
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Every name inside a class definition with two leading underscores is mangled, so <code>__Singleton</code> becomes <code>_Singleton__Singleton</code>. To make clear, that some class is not supposed to be used publicly use <strong>one</strong> underscore.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does not have <a href="https://docs.python.org/2/tutorial/classes.html#tut-private" rel="nofollow">private variables</a>; they are all accessible externally.</p>
<blockquote>
<p>“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.</p>
</blockquote>
<p>The Python Cookbook provides a <a href="http://code.activestate.com/recipes/412551-simple-singleton/" rel="nofollow">Singleton class</a> that can be inherited by other classes to become Singletons.</p>
</div>
<span class="comment-copy">You want to prevent <code>__Singleton</code> from being used outside of what?</span>
<span class="comment-copy">Outside of my module. Only <code>MySingleton</code> should be accessible for anyone who wants to use this.</span>
<span class="comment-copy">Leading double underscores are not a general-purpose privacy marker. They don't make things any more private than single underscores.</span>
<span class="comment-copy">basically, the name is mangled. So, the friction to use this is more.</span>
<span class="comment-copy">Why is it unadvisable?</span>
<span class="comment-copy">@PankajSinghal -- It's a lot of extra typing and weird (somewhat confusing and inefficient) introspection for absolutely no gain...</span>
<span class="comment-copy">even <code>_Singleton__Singleton</code> is not working. just try it out</span>
<span class="comment-copy">Did you really tried <code>class _Singleton__Singleton(type): ...</code>?</span>
<span class="comment-copy">No, I tried <code>super(_Singleton__Singleton, cls)</code></span>
