<div class="post-text" itemprop="text">
<p>I'm trying to build a counter in python with the property of closure. The code in the following works:</p>
<pre><code>def generate_counter():
    CNT = [0]
    def add_one():
        CNT[0] = CNT[0] + 1
        return CNT[0]
    return add_one
</code></pre>
<p>However when I change the list CNT to a var, it did not work:</p>
<pre><code>def generate_counter1():
    x = 0
    def add_one():
        x = x + 1
        return x
    return add_one
</code></pre>
<p>when I print the closure property of an instance, I found the <code>__closure__</code> of the second case is none:</p>
<pre><code>&gt;&gt;&gt; ct1 = generate_counter()
&gt;&gt;&gt; ct2 = generate_counter1()
&gt;&gt;&gt; print(ct1.__closure__[0])
&lt;cell at 0xb723765c: list object at 0xb724370c&gt;
&gt;&gt;&gt; print(ct2.__closure__)
None
</code></pre>
<p>Just wondering why the index in outer function has to be a list?</p>
<hr/>
<p>Thanks for the answers! Found the docs which clearly explained this problem
<a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow">https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Python determines the scope of a name by looking at name binding behaviour; assignment is one such behaviour (function parameters, importing, the target in <code>for target ...</code> or <code>while .. as target</code> are other examples). A name you bind to in a function is considered <em>local</em>. See the <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow"><em>Naming and Binding</em> section</a> of the reference documentation.</p>
<p>So the name <code>x</code> in your second example is a <em>local</em> variable, because you assigned directly to it:</p>
<pre><code>x = x + 1
</code></pre>
<p>In fact, because you never gave that <code>x</code> a local value, you'll get an exception when you try to use that function; the local name is <em>unbound</em> when you try to read it:</p>
<pre><code>&gt;&gt;&gt; generate_counter1()()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in add_one
UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>
<p>In your first example no such binding takes place; you are instead altering the <em>contents</em> of <code>CNT</code>, what that name references is not altered.</p>
<p>If you are using Python 3, you can override the decision to make a name local, by using a <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow"><code>nonlocal</code> statement</a>:</p>
<pre><code>def generate_counter2():
    x = 0
    def add_one():
        nonlocal x
        x = x + 1
        return x
    return add_one
</code></pre>
<p>By making <code>x</code> non-local, Python finds it in the parent context and creates a closure for it again.</p>
<pre><code>&gt;&gt;&gt; def generate_counter2():
...     x = 0
...     def add_one():
...         nonlocal x
...         x = x + 1
...         return x
...     return add_one
...
&gt;&gt;&gt; generate_counter2().__closure__
(&lt;cell at 0x1078c62e8: int object at 0x1072c8070&gt;,)
</code></pre>
<p><code>nonlocal</code> is new in Python 3; in Python 2 you are limited to tricks like using a mutable list object to evade the binding rule. Another trick would be to assign the counter to an attribute of the nested function; again, this avoids binding a name in the current scope:</p>
<pre><code>def generate_counter3():
    def add_one():
        add_one.x += 1
        return add_one.x
    add_one.x = 0
    return add_one
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't <em>have</em> to be a list, it just has to be an mutable object which you <em>mutate</em>, not reassign.</p>
<p>From the <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow">docs</a>:</p>
<blockquote>
<p>If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.</p>
</blockquote>
<p>Thus, in your second example, <code>x</code> is considered local (to the inner function), and, after your first assignment, you're shadowing the outer 'x'.</p>
<p>On the other hand, in the first example (since you don't assign a value to <code>CNT</code>) it operates on the <code>CNT</code> defined in the outer function.</p>
</div>
<span class="comment-copy">Looks like a duplicate of this <a href="http://stackoverflow.com/questions/4851463/python-closure-write-to-variable-in-parent-scope" title="python closure write to variable in parent scope">stackoverflow.com/questions/4851463/…</a></span>
<span class="comment-copy">"it just has to be an immutable object" I think you mean mutable?</span>
<span class="comment-copy">@roganjosh Indeed I did! thanks for the correction :)</span>
