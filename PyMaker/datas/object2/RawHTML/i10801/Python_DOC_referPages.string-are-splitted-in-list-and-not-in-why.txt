<div class="post-text" itemprop="text">
<p>I have been working in a project then I accidently 
discovered when I pass string,they are splitted in <code>list()</code> but when I pass the same string to  <code>[ ]</code> there is no splitting into single letters of  the string.</p>
<p>Can anyone tell me what happend here?</p>
<pre><code>&gt;&gt;&gt; y = list("hello")
&gt;&gt;&gt; y
['h', 'e', 'l', 'l', 'o']
&gt;&gt;&gt; z = ["hello"]
&gt;&gt;&gt; z
['hello']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because the <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow"><code>list</code> constructor</a> takes an iterable as an argument and constructs a list from the items of that iterable. In your case it will grab each individual sub string in the string and us them as items.</p>
<p>On the contrary, <code>[]</code> is an alternate constructor that constructs a list from the elements the comma-separated values that are provided, no additional actions are performed.</p>
<p>You could achieve a similar result with <code>[]</code> in Python 3 by unpacking the string inside the square brackets:</p>
<pre><code>s = "hello"
l = [*s]
print(l) # ['h', 'e', 'l', 'l', 'o']
</code></pre>
<p>In <strong>both</strong> Python versions, you can get the <em>same</em> result with a comprehension:</p>
<pre><code>l = [char for char in s]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/functions.html#list" rel="nofollow"><code>list</code></a> is a <code>builtin</code> that takes an <em>iterable</em> and turns it into a list. </p>
<p><code>[]</code> on the other hand is a language construct for <em>defining</em> lists. To achieve the same results with the construct <code>[]</code> you can use a comprehension:</p>
<pre><code>&gt;&gt;&gt; z = [i for i in "hello"]
&gt;&gt;&gt; z
['h', 'e', 'l', 'l', 'o']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings are iterable. The <code>list</code> function (really it's a type, but it's callable) iterates over its argument, making each element of the iterable (in your case, each character of a string) an element of the resulting list.</p>
<p>That's pretty much the same for any iterables. What you are doing is the string equivalent of</p>
<pre><code>&gt;&gt;&gt; list([1, 2, 3])
[1, 2, 3]
&gt;&gt;&gt; [[1, 2, 3]]
[[1, 2, 3]]
</code></pre>
<p>Which is to say, in the second case you get a list containing a single iterable while in the first one you get a list made up of the individual elements of the iterable.</p>
</div>
<div class="post-text" itemprop="text">
<p>in <code>&gt;&gt;&gt; y = list("hello")</code>
You ask python to build a list from <code>"hello"</code> si it cut the string in element</p>
<p>and in <code>&gt;&gt;&gt; z = ["hello"]</code>
you make a list with a single element <code>hello</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The list() method makes a list out of given input.</p>
<p>The version with square brackets implies you want to create a list with one element, your string. Therefore it is not splitted up.</p>
</div>
<div class="post-text" itemprop="text">
<p>y = list("hello")
list() is a built-in function that takes an iterable and "Return a list whose items are the same and in the same order as iterableâ€˜s items" (see <a href="https://docs.python.org/2/library/functions.html#list" rel="nofollow">https://docs.python.org/2/library/functions.html#list</a>).</p>
<p>z = ["hello"]
This is just a list with a single element (of type string) on it.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your first example;</p>
<pre><code>&gt;&gt;&gt; y = list("hello")
</code></pre>
<p>you are casting a string "hello" to a list</p>
<p>In the second example;</p>
<pre><code>&gt;&gt;&gt; z = ["hello"]
</code></pre>
<p>You are creating an array(list) with one item which is a string with contents "hello"</p>
</div>
<span class="comment-copy">Did you check the docs for <a href="https://docs.python.org/2.7/library/functions.html#list" rel="nofollow noreferrer"><code>list()</code></a>?</span>
