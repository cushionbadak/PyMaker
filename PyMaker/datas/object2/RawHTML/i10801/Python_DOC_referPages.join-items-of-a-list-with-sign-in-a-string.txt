<div class="post-text" itemprop="text">
<p>I would like my output to be :</p>
<pre><code>Enter a number : n
List from zero to your number is : [0,1,2,3, ... , n]
0 + 1 + 2 + 3 + 4 + 5 ... + n = sum(list)
</code></pre>
<p>Yet my actual output is :</p>
<pre><code>Enter a number : 5
List from zero to your number is :  [0, 1, 2, 3, 4, 5]
[+0+,+ +1+,+ +2+,+ +3+,+ +4+,+ +5+] =  15
</code></pre>
<p>I'm using <code>join</code> as it's the only type I know. </p>
<p>Why are the plus signs printed around the items and why are they surrounding blank spaces?</p>
<p>How should I print the <code>list</code>'s values into a string for the user to read ?</p>
<p>Thank you. Here's my code :</p>
<pre><code>##Begin n_nx1 application
n_put = int(input("Choose a number : "))

n_nx1lst = list()
def n_nx1fct():
    for i in range(0,n_put+1):
        n_nx1lst.append(i)
    return n_nx1lst

print ("List is : ", n_nx1fct())
print ('+'.join(str(n_nx1lst)) + " = ", sum(n_nx1lst))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change each individual <code>int</code> element in the <code>list</code> to a <code>str</code> inside the <code>.join</code> call instead by using a <code>generator expression</code>:</p>
<pre><code>print("+".join(str(i) for i in n_nx1lst) + " = ", sum(n_nx1lst))    
</code></pre>
<p>In the first case, you're calling <code>str</code> on the whole <code>list</code> and not on individual elements in that <code>list</code>. As a result, it <em>joins each character in the representation of the list</em>, which looks like this:</p>
<pre><code>'[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'
</code></pre>
<p>with the <code>+</code> sign yielding the result you're seeing.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to call <code>str</code> on your list. That returns the str representation of your list and the output of that is joined with <code>'+'</code>. </p>
<p>You can instead use <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map</code></a> to convert each item in your list to <code>str</code>, then <code>join</code>:</p>
<pre><code>print('+'.join(map(str, n_nx1lst)) + " = ", sum(n_nx1lst))
</code></pre>
<p>You can also use the new style formatting to have a more readable output:</p>
<pre><code>result = '+'.join(map(str, n_nx1lst))
print("{} = {}".format(result, sum(n_nx1lst)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you need to do is concatenate a <strong>string</strong> element with ' + ' for <em>each</em> element in your list. All you need from there is to have some string formatting.  </p>
<pre><code>def sum_of_input():
    n = int(raw_input("Enter a number : "))  # Get our raw_input -&gt; int
    l = range(n + 1)  # Create our list of range [ x≥0 | x≤10 ]
    print("List from zero to your number: {}".format(l))
    print(' + '.join(str(i) for i in l) + ' = {}'.format(sum(l)))
</code></pre>
<p><strong>Sample output:</strong></p>
<pre><code>&gt;&gt;&gt; sum_of_input()
Enter a number : 10
List from zero to your number: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55
</code></pre>
<p><strong>How does it work?</strong>
<br/>We use what's called a <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">list comprehension (5.1.3)</a> (<em>generator in this specific usage</em>) to iterate over our list of <code>int</code> elements creating a <code>list</code> of <code>string</code> elements. <em>Now</em> we can use the <code>string</code> method <code>join()</code> to create our desired format.</p>
<pre><code>&gt;&gt;&gt; [str(i) for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
&gt;&gt;&gt; ' + '.join(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])
'1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10'
</code></pre>
</div>
<span class="comment-copy">When you write <code>str(n_nx1lst)</code>, you're getting a string representation of your list, so the list <code>[1, 2, 3, 4]</code> literally becomes the string <code>"[1, 2, 3, 4]"</code></span>
<span class="comment-copy">…actually <code>"[1, 2, 3, 4]"</code> and then the join will take the string as a list of characters, inserting a <code>+</code> in between each. Thus the <code>[+1+ +,+ +2+,+ +3+,+ +4+]</code></span>
<span class="comment-copy">I'd just like to add now that the right answer has been posted that your variable names are awful.. Very confusing and hard to read.</span>
<span class="comment-copy">BTW, you don't need to write a function to construct your list. Just do <code>n_nx1lst = list(range(n_put+1))</code>. But if you <i>really</i> want to do this with a function it should take the number as an argument, and it should construct   a new list in the function and return it.</span>
<span class="comment-copy">Greg + @spectras : Thank you. You're right. I was turning everything of that list into a string. Jim explained to me that I should've iterated through each item.</span>
<span class="comment-copy">Thank you. That did the job and also got the difference between changing a whole int list into a str and changing each str into an int. You rule [ :</span>
<span class="comment-copy">he should've had, I'll +1 this since it offers a nice alt.</span>
<span class="comment-copy">Just guessing, but maybe the down-voter didn't like you suggesting <code>map</code> to a newbie who doesn't even know how to write a simple function properly.</span>
<span class="comment-copy">@PM2Ring You do have a point. But map is probably as easy to grab as a comprehension. That is subjective though.</span>
<span class="comment-copy">Thank you. I will check map functions.</span>
<span class="comment-copy">Your code is brilliant. I really wish I could accept two answers. You definetly taught a new thing to test around.</span>
<span class="comment-copy">You're welcome! @randomhopeful</span>
