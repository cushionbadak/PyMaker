<div class="post-text" itemprop="text">
<p>I have a program that stores a few important variables as strings that are necessary for the program to operate properly: <code>DeviceNumber</code>, <code>IPAddress</code>, and  <code>Port</code>. These variables are stored in a file, which is loaded by the program.</p>
<p>For debugging purposes, I would like to be able to quickly overwrite the files with command line arguments. The args would all be optional, and if not used then it just uses the variables taken out of the file.</p>
<p>I can do simple positional args using something like <code>DeviceNumber = sys.args[1]</code>, and only overwrite vars if the args are present, but this has the problem of not being able to handle if you enter the variables in the wrong order, or if you enter, say, the <code>IPAddress</code> and <code>Port</code> but not the <code>DeviceNumber</code>.</p>
<p>I have been reading through the pyDocs <a href="https://docs.python.org/2/howto/argparse.html" rel="nofollow">argparse Tutorial</a> and documentation, but it does not seem terribly useful for what I need - it covers mandatory args, and optional flags, but does not seem to allow optional args that depend on a flag to denote their purpose. <strong>EDIT:</strong> <em>Turns out it does, but the example is not very obvious, so I missed it.</em> Similarly I have had trouble finding applicable questions here on SE. </p>
<p>In short, given a program like</p>
<pre><code>#Default Names loaded from file
DeviceNumber = "2000"
IPAddress = "159.142.32.30"
Port = 80

#if command line args entered:
    #overwrite default vars with arg corresponding to each one
    #this probably involves argparse, but I don't know how

print "DNumber:"+DeviceNumber+" IP:"+IPAddress+" Port:"+Port
</code></pre>
<p>Some examples with different cmd line inputs/outputs would be:</p>
<p>All values are defaults</p>
<pre><code>$ python myfile.py
DNumber:2000 IP:159.142.32.30 Port:80 
</code></pre>
<p>All values are overridden</p>
<pre><code>$ python myfile.py -n 1701 -ip 120.50.60.1 -p 3000
DNumber:1701 IP:120.50.60.1 Port:3000 
</code></pre>
<p>Default <code>DNumber</code>, Override <code>IPAddress</code> + <code>Port</code>. Args were specified in different order.</p>
<pre><code>$ python myfile.py -p 123 -ip 124.45.67.89
DNumber:2000 IP:124.45.67.89 Port:123 
</code></pre>
<p>Default <code>DNumber</code> and <code>IPAddress</code>, Override <code>Port</code></p>
<pre><code>$ python myfile.py -p 500
DNumber:2000 IP:159.142.32.30 Port:500
</code></pre>
<p>You get the idea...</p>
<p>for the syntax of the flag/args relationship, I am also not sure if there is a specific syntax python needs you to use (i.e. <code>-p 500</code> vs. <code>-p500</code> v <code>-p=500</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a few ways to define default values for arguments specified by <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow"><code>argparse</code></a>. When adding arguments to your parser, you can specify a default value. Simply:</p>
<pre class="lang-py prettyprint-override"><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-p", "--port", dest="port", default=500,
    type=int, help="specify port")

args = parser.parse_args()
print "You've selected port: %d" % (args.port)
</code></pre>
<p>From the above example, it is trivial to extend to allow additional default functionality. Note that <code>dest="port"</code> is already by default due to the naming of the long argument <code>--port</code>. Like so:</p>
<pre class="lang-py prettyprint-override"><code>parser.add_argument("-p", "--port", dest="port", default=None,
    type=int, help="specify port")

args = parser.parse_args()

if args.port is None:
    port = read_port_from_file()
    print "No optional port specified. Reading value from file." 

print "You've selected port: %d" % (args.port)
</code></pre>
</div>
<span class="comment-copy">The syntax for arguments is not specific to Python, but generally follows GNU C <code>getopt</code> operation.</span>
<span class="comment-copy"><i>"but does not seem to allow optional args that depend on a flag to denote their purpose"</i> doesn't seem that you need it.</span>
<span class="comment-copy">"does not seem to allow optional args that depend on a flag to denote their purpose" - do you mean like the <code>123</code> in <code>-p 123</code>? argparse handles that.</span>
<span class="comment-copy">I now see that the pydocs tutorial does cover this, but it is not too obvious. It uses the value assigned with <code>-v</code> to cause the program to act differently via if-else statements, and that it all. I was looking for an args that had a flag and used the value as an operand, or passed it somewhere, or printed it.</span>
<span class="comment-copy"><code>'store_int'</code> - that's an action value that I haven't seen before.</span>
<span class="comment-copy">You're right. I've been mixing them up. I'll update the answer to use <code>type=int</code></span>
<span class="comment-copy">Thanks! This worked great, but there is one error (which I edited). You had written <code>type="int"</code>, which  gives a <code>"Str type not callable"</code> error. You muse use <code>type=int</code>.</span>
<span class="comment-copy">Thanks for the fix.</span>
