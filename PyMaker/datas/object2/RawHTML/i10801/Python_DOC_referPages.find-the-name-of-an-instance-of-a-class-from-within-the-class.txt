<div class="post-text" itemprop="text">
<p>If I had this Python script:</p>
<pre><code>class my_class(object):

    def __init__(self):
        pass

    def get_name(self):
        return [name of self]


this_is_the_name_im_looking_for = my_class()

print ('the name is: ' + this_is_the_name_im_looking_for.get_name())
</code></pre>
<p>What would I have to replace <em>[name of self]</em> with in order to have the function <em>get_name</em> to return 'this_is_the_name_im_looking_for'?</p>
<p>I need this because I'm creating a Python module and want to feed back which instance of this class they're using</p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in python method <code>id</code> <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow">returns</a></p>
<blockquote>
<p>an integer which is guaranteed to be unique and constant for this object during its lifetime.</p>
</blockquote>
<p>This doesn't return the 'name' of the object per-se, but it will allow you to distinguish between different instances of the class.  This also solves the problem of having multiple pointers to the same object since the id is associated with the underlying object (the address of the object in memory):</p>
<pre><code>val1 = 1
val2 = val1
id(val1) == id(val2)
# returns: True
id(val1) == id(1)
# returns: True
id(val1) == id(2)
# returns: False
</code></pre>
</div>
<span class="comment-copy">A single instance of your class may be bound to multiple variable names: <code>this_name = my_class(); other_name = this_name; this_name is other_name == True</code></span>
<span class="comment-copy">@ali_m I'm basing the question on the assumption that this is not the case, but that's a helpful comment nonetheless</span>
<span class="comment-copy">Or, it might have no name at all: <code>mylist.append(my_class())</code>.</span>
<span class="comment-copy">Why call a method, when you already have to type the name  (if there is one) of the instance in order to call the method. Not clear why you need this</span>
<span class="comment-copy">Why not make the name an attribute of the instance, e.g. <code>def __init__(self, name); self.name = name</code>?</span>
<span class="comment-copy">I think he wants <code>get_name(val1) != get_name(val2)</code>.</span>
<span class="comment-copy">Be careful using int with id as examples you get surprising results. id(100*1000) is not the same as id (1000*100) but the int passed id is the value value.</span>
