<div class="post-text" itemprop="text">
<p>I'm trying to write a program that would ask for a students name, a couple other numerical values, and assign them to groups, via their numerical value, to have all groups as close to equal as possible (by taking the the highest next value in the list, and assigning it to the next group and so on).</p>
<p>However, I'd need to save their number to some variable, as well as their name, to then print out the group's list.
For this I'd need a variable that changes everytime the loop goes through to add another student. I'd also need to sort these number, and then somehow call back the name they corrispond to after they've been sorted into groups, and I'm not sure how to do any of these. Is there any way for this to be done, would I have to use another language?</p>
<p>This is the code I have so far:</p>
<pre><code>from easygui import *
times = 0
name = 0


s_yn = ynbox("Would you like to enter a student?")
while s_yn == 1:
    msg = "Student's Information"
    title = "House Sorting Program"
    fieldNames = ["Name", "Grade","Athleticism (1-10)","Intellect (1-10)","Adherance to school rules (1-10)"]
    fieldValues = [] 
    fieldValues = multenterbox(msg,title, fieldNames)

    times =  times + 1

    ath = fieldValues[2]
    int_ = fieldValues[3]
    adh = fieldValues[4]
    ath = int(ath)
    int_ = int(int_)
    adh = int(adh)
    total = ath+int_+adh

    s_yn = ynbox("Would you like to enter a student?")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe it would be nice to create a Student class that holds all variables associated with a student. Then you could add each student to a list which you could sort by the values you want and divide to how many groups you want.</p>
<pre><code>from easygui import *
from operator import attrgetter


class Student(object):

    def __init__(self, name, grade, athleticism, intellect, adherance):
        self.name = name
        self.grade = int(grade)
        self.athleticism = int(athleticism)
        self.intellect = int(intellect)
        self.adherance = int(adherance)
        self.total = self.athleticism + self.intellect + self.adherance

    def __str__(self):  # When converting an instance of this class to a string it'll return the string below.
        return "Name: %s, Grade: %s, Athleticism (1-10): %s, Intellect (1-10): %s, Adherance to school rules (1-10): %s"\
               % (self.name, self.grade, self.athleticism, self.intellect, self.adherance)


student_group = []
while ynbox("Would you like to enter a student?"):  # Returns 'True' or 'False' so it'll loop every time the user press 'yes'.
    message = "Student's Information"
    title = "House Sorting Program"
    field_names = ["Name", "Grade", "Athleticism (1-10)", "Intellect (1-10)", "Adherance to school rules (1-10)"]
    field_values = multenterbox(message, title, field_names)

    student = Student(*field_values)  # Unpack all elements in the list 'field_values' to the initializer.
    student_group.append(student)  # Add the student to the group 'student_group'.


# When the user has put in all the students we sort our group by 'total' (or any other value you want to sort by).
sorted_group = sorted(student_group, key=attrgetter("total"), reverse=True)

# Just as an example I divided the students into 3 groups based on their total.
best_students = sorted_group[:len(sorted_group) // 3]
average_students = sorted_group[len(sorted_group) // 3:2 * len(sorted_group) // 3]
worst_students = sorted_group[2 * len(sorted_group) // 3::]
</code></pre>
</div>
<span class="comment-copy">Do you have a question?</span>
<span class="comment-copy">you're right, my bad</span>
<span class="comment-copy">I think part of the answer could be to use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a>, which defaults to a empty array, then adding the student's name keyed by their total score. e.g. <code>my_default_dict[total].append(student_name)</code>. Can only think of naive ways to try and group them and make the groups have as even as possible scores.</span>
