<div class="post-text" itemprop="text">
<p>I am very new to python and opencv world. I was just trying to read and show an image but I always get an error:</p>
<blockquote>
<p>error:
  D:\Build\OpenCV\opencv-3.1.0\modules\highgui\src\window.cpp:289:
  error: (-215) size.width&gt;0 &amp;&amp; size.height&gt;0 in function cv::imshow</p>
</blockquote>
<p>I have created a module named test.py. In that module, I tried to read the image <strong>"car.png"</strong> which is in my system path <strong>"C:\cv\images"</strong> and show it as below:</p>
<pre><code>import cv2;
import sys;


sys.path.append('C:\\cv\\images');

im = cv2.imread('car.png');
cv2.imshow('Car Figure',im);
cv2.waitKey(0);
</code></pre>
<p>When I debug the code, I can see that the im variable is never initialized which is why I get that error code. However, When I type sys.path in the interpreter it shows that the path was already added as many times I tried to run my module. And when I copy/paste the module contents directly in the interpreter, the code works fine and the image appears.</p>
<p>It seems that inside the module, the sys.path is not taken into consideration and python is unable to read the image.</p>
<p>Any idea if this is a normal behavior, or should I do something inside my module to let the interpreter read sys.path contents?</p>
</div>
<div class="post-text" itemprop="text">
<p>What makes you imagine that <code>sys.path</code> settings will affect the directories from which you read files? It's purely used to locate Python modules for import. So to answer your question, the behaviour you are seeing is normal and expected. If you have a directory in <code>dir</code> and a filename in <code>filename</code> then the file you should be opening will be</p>
<pre><code>os.path.join(dir, filename)
</code></pre>
<p>so you should try</p>
<pre><code>im = cv2.imread(os.path.join(dir, filename))
</code></pre>
<p>Those interested in shipping data files with their Python package could do worse than take a look at the documentation for the <code>pkgutil</code> package. In particular, <a href="https://docs.python.org/3/library/pkgutil.html#pkgutil.get_data" rel="nofollow noreferrer"><code>pkgutil.get_data</code></a> is useful for finding data files wherever the installation process has put them.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what you're trying to do in your application but <code>sys.path</code> seems superfluous in the example code.  Furthermore, <code>sys.path</code> says in the <a href="https://docs.python.org/2/library/sys.html#sys.path" rel="nofollow">Python documentation</a> that it is </p>
<blockquote>
<p>A list of strings that specifies the search path for modules</p>
</blockquote>
<p>Basically, <code>sys.path</code> is for loading modules themselves not files inside of modules.</p>
<p>The variable is never initialized because it isn't loading the image. This workaround, which bruteforces the <code>sys.path</code> until a file loads, works fine but is not elegant, conventional, or necessary:</p>
<pre><code>import sys
import cv2

sys.path.append('C:\\users\\xxxx\\pictures\\')

loaded = False
for rel in sys.path:
    im = cv2.imread(rel+'image.jpg')
    if im is not None:
        loaded = True
        cv2.imshow('Car Figure',im)
        cv2.waitKey(0)

if loaded == False:
    raise Exception('Couldn\'t load image')
</code></pre>
<p>After looking at the <a href="https://github.com/opencv/opencv/blob/master/modules/imgcodecs/src/loadsave.cpp#L425" rel="nofollow">source code</a> and <a href="https://github.com/opencv/opencv/blob/master/modules/imgcodecs/src/loadsave.cpp#L244" rel="nofollow">internal load function</a> for the version of Open CV you're using, it seems that the <code>imread</code> function does not consider <code>sys.path</code>:</p>
<pre><code>Mat imread( const String&amp; filename, int flags )
{
    /// create the basic container
    Mat img;

    /// load the data
    imread_( filename, flags, LOAD_MAT, &amp;img );

    /// return a reference to the data
    return img;
}
</code></pre>
</div>
<span class="comment-copy">Thanks for the answer. But, lets say I want to make my module portable. I need to know how to reference a path relative the current module path instead of typing a full path name. How can I do that?</span>
<span class="comment-copy">@HishamRagheb if you go to google and search "relative path names" you'll find a <i>wealth</i> of examples</span>
<span class="comment-copy">Most modules will have a <code>__file__</code> attribute, from which you can extract the directory path with <a href="https://docs.python.org/2/library/os.path.html#os.path.dirname" rel="nofollow noreferrer"><code>os.path.dirname(module.__file__)</code></a>, then join it to the name of the file you want to read.</span>
<span class="comment-copy">@holdenweb Thanks. That what I was looking for</span>
<span class="comment-copy">thank you for the answer, I was struggling with sys.path.append() but it did not solve my problem, but your answer really helped me</span>
<span class="comment-copy">Still same error. As I mentioned If I print sys.path from inside the module. I can see the path 'C:\\cv\\images' is already in sys.path list. But imread can't see the file 'car.png'</span>
<span class="comment-copy">@HishamRagheb I updated my code snippet above to solve that issue.  What I'm saying is that <code>imread</code> is not aware of <code>sys.path</code> and will not be aware of it unless you modify the source code and recompile Open CV yourself.</span>
<span class="comment-copy">Thank you for the valuable info.  Your solution looks great but will require a compilation of opencv while I'm still crawling with python from a java world prespective. I used a simpler hint from @holdenweb which is os.path.dirname(sys.argv[0])+'\\images' to reference my images folder relatively and that was enough for now. Thank you again. Wanted to vote up but my reputation is still low to do that</span>
