<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6500888/removing-from-a-list-while-iterating-over-it">Removing from a list while iterating over it</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>In a list, I have duplicate elements that I want to remove.</p>
<p>The following code doesn't work:</p>
<p>Note: 
temp containts the list of indexes of elements that I want to remove.</p>
<p>x is my list.</p>
<pre><code>temp = self.list_duplicates(x)
for index in tmp:
   del x[index] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Build a new list with a comprehension:</p>
<pre><code>x = [element for (i,element) in enumerate(x) if i not in temp]
</code></pre>
<p>If you want to remove only duplicates, i.e. leaving one copy of the original, there is a better way to do that:</p>
<pre><code>from collections import OrderedDict
x = list(OrderedDict.fromkeys(x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>x.pop(index)</code> will remove the item at index. However, <code>x = [x[i] for i in range(len(x)) if x[i] not in x[:i]]</code> will remove the duplicates more quickly.</p>
</div>
<div class="post-text" itemprop="text">
<p>No one addressed the first part of the question. So, for removing duplicate items its wise to use <code>set()</code>, it removes the duplicate items and returns a arbitrary list of unique items.</p>
<pre><code>lst = [1,1,2,3,4,4]
new_lst = list(set(lst))
print(lst)
</code></pre>
<p>It will return unique list of elements in an arbitrary manner Eg : [1,4,2,3]</p>
</div>
<div class="post-text" itemprop="text">
<p>You can filter the list with the following:</p>
<p><strong>Edit</strong>: Works now for list of indices</p>
<pre><code>x = list(filter(lambda item: x.index(item) not in temp, x))
</code></pre>
</div>
<span class="comment-copy">It's worth noting that if you just want to keep unique items in a list, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a>.</span>
<span class="comment-copy">This is true, but sets don't have order, which can make them not work for some problems.</span>
<span class="comment-copy">Also see <a href="http://sopython.com/canon/95/removing-items-from-a-list-while-iterating-over-the-list" rel="nofollow noreferrer">Removing items from a list while iterating over the list</a></span>
<span class="comment-copy"><code>for i in len(x)</code> will raise <code>TypeError</code>.  And <code>x.pop(index)</code> will offset the other indices, so careful with that.</span>
<span class="comment-copy">Good catch on the first, fixed. The second is true, but that will be true any time you remove an element from the middle of a list.</span>
<span class="comment-copy"><code>temp</code> is a list of indices, not items.</span>
<span class="comment-copy">Have corrected it.</span>
