<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1680528/how-to-avoid-having-class-data-shared-among-instances">How to avoid having class data shared among instances?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>So today I have an assignment that requires me to construct a bank account class. I have everything in order for my output to match the expected output. </p>
<p>My Output:</p>
<pre><code>Alin,Smith (SSN:111-11-1111) account number: 5040470401, balance: $20000
Alin,Smith (SSN:111-11-1111) account number: 5040470401, balance: $15000
Alin,Smith (SSN:111-11-1111) account number: 5040470401, balance: $15100.0
Mary,Lee (SSN:222-22-2222) account number: 5040470401, balance: $10000
Mary,Lee (SSN:222-22-2222) Insufficient Funds to withdraw: $15000
Mary,Lee (SSN:222-22-2222) account number: 5040470401, balance: $10000
Mary,Lee (SSN:222-22-2222) account number: 5040470401, balance: $10500.0
</code></pre>
<p>However as you can see, even though Mary and Alin are different customers, they generate the same account number. </p>
<p>My question today is how can I give a different random 10-digit account number for each customer object created in my Bank Account class. </p>
<p>right now I have my Customer class </p>
<pre><code>class Customer:
    def __init__(self,firstName, lastName, social):
        self.firstName = firstName 
        self.lastName = lastName 
        self.social = social 

    def setfirstName(self,firstName):
        self.firstName = firstName

    def setlastName(self,lastName):
        self.lastName = lastName

    def __str__(self):
        self.name = "{},{} (SSN:{})".format(self.firstName, self.lastName,self.social)
        return self.name 
</code></pre>
<p>and then my BankAccount class (only including random number parts):</p>
<pre><code>class BankAccount(Customer):
    from random import randint
    n = 10
    range_start = 10**(n-1)
    range_end = (10**n)-1
    accountNumber = randint(range_start, range_end)

    def __init__(self,customer,balance = 0):
        self.customer = customer
        self.balance = balance 

    def setCustomer(self,customer,accountNumber):
        self.customer = customer
        self.accountNumber = accountNumber 

    def getCustomer(self,customer,accountNumber):
        return self.customer, self.accountNumber

     def __str__(self):
        customer = "{} account number: {}, balance: ${}".format(self.customer,self.accountNumber,self.balance)
        return customer 
</code></pre>
<p>I figured that for every account object I made, a new random number would be generated but that does not seem to be the case. </p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because you are statically setting the variable. Your line <code>accountNumber = randint(range_start, range_end)</code> only gets called once. Move it to the <code>__init__</code> call of <code>BankAccount</code> and you should get different account numbers.</p>
</div>
<div class="post-text" itemprop="text">
<p>You defined the <code>accountNumber</code> as a class variable, therefore once the class is created, the same <code>accountNumber</code> will be assigned to every instance of the class.</p>
<p>You should instead create the account numbers in the instance and not as a class variable:</p>
<pre><code>def __init__(self,customer,balance = 0):
    self.customer = customer
    self.balance = balance 
    self.accountNumber = randint(self.range_start, self.range_end)
</code></pre>
<hr/>
<p>More so, since you're almost always guaranteed to use the <code>random</code> module, you may consider moving that <code>import</code> statement to the top of your module.</p>
<p>On another note, you should consider using a more reliable logic to generate unique account numbers. <code>randint</code> would create duplicate account numbers at some point, which is a behavior you don't want. You can have a look at the <a href="https://docs.python.org/3/library/uuid.html" rel="nofollow"><code>uuid</code></a> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you make accountNumber it is statically created once. If you are re-using this it will be the same everytime.</p>
<p>Compare the output of something like:</p>
<pre><code>import random

account_number = random.randint(1,10)

for i in range(10):
    print account_number
</code></pre>
<p>with:</p>
<pre><code>for i in range(10):
    account_number = random.randint(1,10)
    print account_number
</code></pre>
<p>Move it inside the class and it will be ok.</p>
</div>
<span class="comment-copy">thank you for this. Your answer was the same Moses' answer up above and it did the trick.   I hate that sometimes I dont see simple fixes such as this.</span>
<span class="comment-copy">Ahh, such a simple fix. I had in the instance initially but as      def __init__(self,customer, accountNumber,....)  and it would require me to call the bankaccount object with the name of the customer and the accountNumber so i took it out.</span>
<span class="comment-copy">Moses, so for the UUID module would I just use the uuid4() function and shorten it to 10 characters?   or would it be more along the lines of the uuid.UUID('......')?</span>
<span class="comment-copy">You could use <code>uuid.uuid4()</code> but truncating the uuid to 10 characters is not safe. Are you using a sort of DB? In that case you could keep your current approach, and create a new account number if the one created already exists in the DB.</span>
<span class="comment-copy">@MosesKoleydoye DB? are you referring to a dictionary? If so, then no. right now it's just generating new account numbers for every customer. they are not being stored in anything.</span>
<span class="comment-copy">I only wanted to know how you could prevent dupes. It think you can do that with a dictionary too, by checking for existing keys</span>
<span class="comment-copy">Thank you for the help :)</span>
