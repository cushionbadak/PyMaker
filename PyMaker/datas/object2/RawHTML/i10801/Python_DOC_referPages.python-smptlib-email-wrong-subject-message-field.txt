<div class="post-text" itemprop="text">
<p>Everytime I send an email with this function, it doesn't add the subject and the message to the right fields, but instead of that, it adds it to the 'from:' or something.
<a href="http://i.stack.imgur.com/Kn5ux.png" rel="nofollow">Here's the image of it.</a>
Any idea how this can be fixed? Thanks for answer</p>
<pre><code>import smtplib

## NON-ANONYMOUS EMAIL
def email():
    # Parts of an email
    SERVER = 'smtp.gmail.com'
    PORT = 587
    USER = 'something@gmail.com'
    PASS = 'something'
    FROM = USER
    TO = ['something@riseup.net']
    #SUBJECT = 'Test'
    MESSAGE = 'Test message.'

    # Connects all parts of email together
    message = "From: %s\r\n To: %s\r\n %s" % (FROM, ", ".join(TO), MESSAGE)

    # Sends an email
    email = smtplib.SMTP()
    email.connect(SERVER,PORT)
    email.starttls()
    email.login(USER,PASS)
    email.sendmail(FROM, TO, message)
    email.quit()

email()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot have a space after the <code>\r\n</code>. An email header line is continued by indenting it, so your code is creating a really long <code>From:</code> header with all the data you are trying to put in different fields.</p>
<p>Anyway, manually gluing together snippets of plain text is a really crude and error-prone way to construct an email message. You will soon find that you need the various features of the Python <code>email</code> module anyway (legacy email is 7-bit single part ASCII only; you'll probably want one or more of attachments, content encoding, character set support, multipart messages, or one of the many other MIME features). This also coincidentally offers much better documentation for how to correcty create a trivial email message.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following on from @tripleee suggestion to use the <code>email</code> module, here's a basic example using your current code:</p>
<pre><code>import smtplib
from email.mime.text import MIMEText

## NON-ANONYMOUS EMAIL
def email():
    # Parts of an email
    SERVER = 'smtp.gmail.com'
    PORT = 587
    USER = 'something@gmail.com'
    PASS = 'something'
    FROM = USER
    TO = ['something@riseup.net']
    SUBJECT = 'Test'

    # Create the email
    message = MIMEText('Test message.')
    message['From'] = FROM
    message['To'] = ",".join(TO)
    message['Subject'] = SUBJECT

    # Sends an email
    email = smtplib.SMTP()
    email.connect(SERVER,PORT)
    email.starttls()
    email.login(USER,PASS)
    email.sendmail(FROM, TO, message.as_string())
    email.quit()
</code></pre>
<p>Notice how much easier it is to define the parts of the email using <em>keys</em> like <code>message['Subject']</code> instead of attempting to build a string or 'gluing parts together' as tripleee put it.</p>
<p>The different fields (From, To, Subject, et cetera) you can access are defined in <a href="https://tools.ietf.org/html/rfc2822.html#section-3.6" rel="nofollow">RFC 2822 - Internet Message Format</a>. </p>
<p>These documents are not easy to read, so here's a list of some of the fields' keys you can use: <code>To</code>, <code>From</code>, <code>Cc</code>, <code>Bcc</code>, <code>Reply-To</code>, <code>Sender</code>, <code>Subject</code>.</p>
<blockquote>
<p>You cannot have a space after the \r\n. An email header line is continued by indenting it, so your code is creating a really long From: header with all the data you are trying to put in different fields.</p>
</blockquote>
<p>As triplee and the RFC-2822 document says, if you are wanting to build the email string manually look at the field definitions in that document which look similar to this example:</p>
<blockquote>
<p>from = "From:" mailbox-list CRLF</p>
</blockquote>
<p>You can translate this into Python code when building an email string like so:</p>
<p><code>"From: something@riseup.net \r\n"</code></p>
</div>
<span class="comment-copy">Can you show me an example of what data is being passed into the <code>TO</code> variable please? For example, show me what code is calling this <code>email</code> function.</span>
<span class="comment-copy">Yes. I already added them. Thanks for answer</span>
<span class="comment-copy">Actually, it doesn't appear to be a problem with <code>.join</code> as I first thought. As a test, instead of defining the <code>message</code> across multiple lines, change it to the following: <code>"From: %s\r\n To: %s\r\n Subject: %s\r\n %s" % (FROM, ", ".join(TO), SUBJECT, MESSAGE)</code>. It's possible \n (newline) does not cause <code>sendmail</code> to recognise the different parts of the message. I noticed that <code>send_message</code> uses \r\n as the email part separators, whereas <code>.join(TO)</code> would generate \n if I am not mistaken.</span>
<span class="comment-copy"><code>message = "From: %s\r\n To: %s\r\n Subject: %s\r\n %s" % (FROM, ", ".join(TO), SUBJECT, MESSAGE)</code> resulted in the same thing.</span>
<span class="comment-copy">Okay, can you call <code>print (message)</code> and show what the final formatted message looks like please?</span>
<span class="comment-copy">Just tried that, but it shows an error: <code>File "C:\python27\lib\email\quoprimime.py", line 97, in _max_append     L.append(s.lstrip()) AttributeError: 'list' object has no attribute 'lstrip'</code> Any idea how to solve that? <b>EDIT:</b> Why is there that <code>as_string()</code>?</span>
<span class="comment-copy"><code>as_string()</code> converts the message into a string. This is because <code>MIMEText</code> is an <i>object structure</i> and <code>sendmail</code> <i><code>msg</code></i> parameter is a <code>string</code>; you need to convert it. In other words, it is equivalent to what you were doing previously by building the email structure yourself. Call <code>print (message.as_string())</code> to see.  Regarding that error, are you still using <code>", ".join(TO)</code>?</span>
<span class="comment-copy">(1) No, I deleted the whole previous code, so I am not using <code>", ".join(TO)</code>. (2) What is the difference between <code>message.as_string()</code> &amp; <code>str(message)</code>?</span>
<span class="comment-copy">1. You'll still need the <code>",".join(TO)</code> to build your list of receiver email addresses; that doesn't change. Remember, this is the equivalent to what you were doing but removes the need for you to build the email string. 2. both are equivalent. For reference <a href="https://docs.python.org/3/library/email.message.html#email.message.Message.as_string" rel="nofollow noreferrer">as_string</a></span>
<span class="comment-copy">Correct. Updated my code earlier to include that for you. Apologies.</span>
