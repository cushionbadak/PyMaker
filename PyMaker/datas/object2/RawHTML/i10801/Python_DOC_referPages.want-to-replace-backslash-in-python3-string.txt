<div class="post-text" itemprop="text">
<p>I have a string</p>
<pre><code>"abc INC\","None", "0", "test"
</code></pre>
<p>From this string I want to replace any occurrence of backslash when it appears before " with a pipe |. I wrote the following code but it actually takes out " and leaves the \ behind. </p>
<pre><code>import re
str = "\"abc INC\\\",\"None\", \"0\", \"test\""
str = re.sub("(\\\")", "|", str)
print(str)

Output: |abc INC\|,|None|, |0|, |test|
Desired Output: "abc INC|","None", "0", "test"
</code></pre>
<p>Can someone point out what am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following <em>positive lookahead</em> assertion <code>'\\(?=")'</code>:</p>
<pre><code>import re

my_str = "\"abc INC\\\",\"None\", \"0\", \"test\""
p = re.sub(r'\\(?=")', '|', my_str)
print(p)
# '"abc INC|","None", "0", "test"'
</code></pre>
<p>Try not to use builtin names as names for variables, viz. <code>str</code>, to avoid shadowing the builtin.</p>
</div>
<div class="post-text" itemprop="text">
<p>See Jamie Zawinksi's <a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/" rel="nofollow">famous quote about regular expressions</a>. Try to only resort to the use of re's when absolutely necessary. In this case, it isn't.</p>
<p>The actual content of string <code>str</code> (bad name for a variable, by the way, since there's a built-in type of that name) is</p>
<pre><code>"abc INC\","None", "0", "test"
</code></pre>
<p>Why not just</p>
<pre><code>str.replace('\\"', '|"')
</code></pre>
<p>which will do exactly what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>This must solve your problem:</p>
<pre><code>import re
s = "\"abc INC\\\",\"None\", \"0\", \"test\""
s = re.sub(r"\\", "|", s)
</code></pre>
<p>Also don't use str as a variable name, it is a reserved keyword.</p>
</div>
<div class="post-text" itemprop="text">
<p>For literal backslashes in python regexes you need to escape  twice, giving you the pattern <code>'\\\\"'</code> or <code>"\\\\\""</code>. The first escaping is needed for python to actually put a backslash into the string. But regex patterns themself use backshlashes as a special character (for things like <code>\w</code> word characters, etc.). The <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">documentation</a> states:</p>
<blockquote>
<p>The special sequences consist of '\' and a character from the list below. If the ordinary character is not on the list, then the resulting RE will match the second character. </p>
</blockquote>
<p>So the pattern <code>\"</code> will match a single <code>"</code> because <code>"</code> is not a character with a special meaning there.</p>
<p>You can use the raw notation to only escape once: <code>r'\\"'</code>.</p>
</div>
<span class="comment-copy">Don't know python, but you can use this regex <code>\\(?=")</code></span>
<span class="comment-copy">please use <code>'</code> to delimite your python string if there are <code>"</code> inside, it will be clearer to see what are your strings</span>
<span class="comment-copy">@MosesKoledoye it is a complete string. Read the code which has escape sequence.</span>
<span class="comment-copy">@jotasi here is the output  <code>|"abc INC\|",|"None|", |"0|", |"test|"</code></span>
<span class="comment-copy">@Jacquot  str = '\"abc INC\\\",\"None\", \"0\", \"test\"'</span>
<span class="comment-copy">That did the job. Any good tutorial where I can learn this bad boy?</span>
<span class="comment-copy">@r0xette You can start with the <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">re docs</a>. It has a lot of useful details with a few examples :))</span>
<span class="comment-copy">Thank you. I didn't think about it. And I will keep in mind "Try to only resort to the use of re's when absolutely necessary."</span>
