<div class="post-text" itemprop="text">
<p>Consider the following Python program:</p>
<pre><code>class Foo(object):

    def __init__(self, bar):
        self.bar = bar

    def __repr__(self):
        return 'Foo(%r)' % (self.bar,)

    def __eq__(self, other):
        print('Foo.__eq__(%r, %r)' % (self, other))
        return self.bar == other

foo1 = Foo('A')
foo2 = Foo('B')
assert foo1 not in [foo2]
</code></pre>
<p>Under CPython 2.7.11 and 3.5.1, it prints:</p>
<pre><code>Foo.__eq__(Foo('A'), Foo('B'))
Foo.__eq__(Foo('B'), 'A')
</code></pre>
<p>But under PyPy 5.3.1 (2.7), it prints:</p>
<pre><code>Foo.__eq__(Foo('B'), Foo('A'))
Foo.__eq__(Foo('A'), 'B')
</code></pre>
<p>Although Python 3.5’s documentation <a href="https://docs.python.org/3.5/reference/expressions.html#value-comparisons" rel="nofollow">states</a> that equality should be symmetric “if possible”, sometimes it is not. In that case, the order of arguments to <code>Foo.__eq__</code> becomes important.</p>
<p>So, is the above CPython behavior an implementation detail, or is it a part of <code>list</code>’s public interface (meaning that PyPy has a bug)? Please explain why you think so.</p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/reference/expressions.html#membership-test-details" rel="nofollow">the language reference</a>:</p>
<blockquote>
<p>For container types such as list, tuple, set, frozenset, dict, or
  collections.deque, the expression <code>x in y</code> is equivalent to <code>any(x is
  e or x == e for e in y)</code>.</p>
</blockquote>
<p>The other examples in the same section show the same ordering for the equality test. This suggests that the comparison should be <code>item_maybe_in_list.__eq__(item_actually_in_list)</code>, in which case this could be considered a bug in PyPy. Additionally, CPython is the reference implementation, so in any discrepancy that version wins!</p>
<p>That said, you should raise it with that community to see how they feel about it. </p>
</div>
<span class="comment-copy">I should be reading the docs more thoroughly...</span>
<span class="comment-copy">Wait, where does it say that <code>x == e</code> has to be <code>x.__eq__(e)</code>?</span>
<span class="comment-copy">@Rawing <a href="https://docs.python.org/2/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer">docs.python.org/2/reference/datamodel.html#object.__eq__</a></span>
<span class="comment-copy">@VasiliyFaronov ah. It seems <b><i>I</i></b> should be reading the docs more thoroughly.</span>
<span class="comment-copy">@Rawing it should at least <i>start</i> there, although <code>return NotImplemented</code> may cause some fallback behaviour.</span>
