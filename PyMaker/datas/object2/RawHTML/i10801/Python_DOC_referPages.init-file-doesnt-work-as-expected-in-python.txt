<div class="post-text" itemprop="text">
<p>I have some folders and <code>.py</code> files in the following structure:</p>
<pre><code>parent/
       __init__.py
       test.ipynb
       code/
            __init__.py
            common.py
            subcode/
                    __init__.py
                    get_data.py
</code></pre>
<p>In the <code>__init__</code> file under the <code>parent</code> folder, I have <code>import code</code> and in the one of <code>code</code>, I have <code>import subcode</code>. But when I tried <code>import code.subcode</code>, I got such an error:</p>
<pre><code>ImportError: No module named 'code.subcode'; 'code' is not a package
</code></pre>
<p>But when I just <code>import code</code>, no error is thrown. However, when I call <code>code.subcode</code>, this error happens:</p>
<pre><code>AttributeError: module 'code' has no attribute 'subcode' 
</code></pre>
<p>I try all of those mentioned above in the <code>test.ipynb</code>, which is at the root of the directory.</p>
<p>Do you know what is the reason and how can I fix it? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are importing another module named <code>code</code> that is installed on your system rather than your own module. You can verify this by checking the module file path in <code>code.__file__</code> after you <code>import code</code>.</p>
<p>The first thing to do is change the name of your module to avoid namespace collisions with the other <code>code</code> package on your system. If your new package name doesn't collide with something else, you should now either successfully be importing it and have it behave as expected, or it fails to import entirely.</p>
<p>If it fails to import, it is most likely because your <code>parent</code> directory is not in your <code>PYTHONPATH</code> environment variable.</p>
<p>There can potentially also be other more technical reasons that a module is not recognized by the interpreter such as old definitions being cached (in which case restarting the interpreter is often enough. Possibly after deleting any precompiled versions of the module). Another problem I have seen ended up being that a module contained a bug that made the interpreter unable to parse it. I am sure there are other odd possibilities out there.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're on Python 3. You need to perform relative imports explicitly:</p>
<pre><code>from . import code
</code></pre>
<p>The <code>code</code> module you're currently getting is the standard library <a href="https://docs.python.org/3/library/code.html" rel="nofollow"><code>code</code></a> module.</p>
</div>
<span class="comment-copy">Try just leaving your <code>__init__.py</code> files empty.</span>
<span class="comment-copy">@DrK Same thing happened.......</span>
<span class="comment-copy">After you import <code>code</code> does <code>code.__file__</code> point to the directory that you expect?</span>
<span class="comment-copy">@Dr.k Oh, really no....... it points to <code>'/home/lcc/anaconda3/envs/parent/lib/python3.5/code.py'</code>. Why does it happen...</span>
<span class="comment-copy">My guess is that your <code>PYTHONPATH</code> environment variable does not contain your <code>parent</code> directory and if it does, then it is placed lower down in the list than the path to the <code>code</code> module that you are actually importing. Solution: add <code>parent</code> to your <code>PYTHONPATH</code> and maybe use a different name than <code>code</code> to avoid namespace collisions.</span>
<span class="comment-copy">But shouldn't <code>code</code> be found in the current directory(parent/) <b>before</b> <code>PYTHONPATH</code> is searched? See: <a href="https://docs.python.org/2.7/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">docs.python.org/2.7/tutorial/â€¦</a></span>
<span class="comment-copy">Given that <code>parent</code> is a package, the <code>parent</code> directory itself probably shouldn't be on the <code>PYTHONPATH</code>; the directory containing the <code>parent</code> directory should be there.</span>
<span class="comment-copy">@user2357112 yeah, I was thinking that too but from the way he was importing, it seemed more like he meant for <code>code</code> to be the package. But you are right.</span>
<span class="comment-copy">@sunqingyao You are right. He was probably also in the wrong directory. I gave your comment an up-vote.</span>
