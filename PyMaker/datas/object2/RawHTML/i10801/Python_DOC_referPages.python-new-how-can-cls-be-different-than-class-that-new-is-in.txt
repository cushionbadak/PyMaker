<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow">Documentation for <code>object.__new__(cls[, ...])</code> says:</a></p>
<blockquote>
<p>Called to create a new instance of class <code>cls</code>. __ <code>new</code> __ is a static
  method (special-cased so you need not declare it as such) that takes
  the class of which an instance was requested as its first argument.</p>
</blockquote>
<p>So if you have <code>var = MyClass()</code> and</p>
<pre><code>class MyClass:
    def __new__(cls):
        ...
</code></pre>
<p>Won't <code>cls</code> ALWAYS be equal to <code>MyClass</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>class MyClass:
    def __new__(cls):
        print(cls)

class Yac(MyClass):
    pass

x = Yac()
print(x)
</code></pre>
<p>We get:</p>
<pre><code>&lt;class '__main__.Yac'&gt;
None
</code></pre>
<p>By the way, this is fine in Python 3, but will not work in Python 2.  In Python 2 <code>__new__</code> is only supported in "new-style" classes:</p>
<pre><code>class MyClass(object):
</code></pre>
<p>In Python 3 all classes are "new-style".</p>
</div>
<span class="comment-copy">Hint: What will happen when you create a subclass that inherits <code>MyClass</code>?</span>
<span class="comment-copy">What if <code>__new__</code> was inherited by a derived class?</span>
