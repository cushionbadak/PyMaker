<div class="post-text" itemprop="text">
<p>I am posting videos to Google Cloud Buckets and a signed PUT url does the trick. However, if the file size is greater than 10MB it will not work, so I found an open source that will allow me to do this however, it uses a file like object.</p>
<pre><code>def read_in_chunks(file_object, chunk_size=65536):
while True:
    data = file_object.read(chunk_size)
    if not data:
        break
    yield data

def main(file, url):
content_name = str(file)
content_path = os.path.abspath(file)
content_size = os.stat(content_path).st_size

print content_name, content_path, content_size

f = open(content_path)

index = 0
offset = 0
headers = {}

for chunk in read_in_chunks(f):
    offset = index + len(chunk)
    headers['Content-Type'] = 'application/octet-stream'
    headers['Content-length'] = content_size
    headers['Content-Range'] = 'bytes %s-%s/%s' % (index, offset, content_size)
    index = offset
    try:
        r = requests.put(url, data=chunk, headers=headers)
        print "r: %s, Content-Range: %s" % (r, headers['Content-Range'])
    except Exception, e:
        print e
</code></pre>
<p>The way that I was uploading videos was passing in json formatted data. </p>
<pre><code>class GetData(webapp2.RequestHandler):
def post(self):
    data = self.request.get('file')
</code></pre>
<p>Then all I did was a request.put(url, data=data). This worked seamlessly. </p>
<p>How do I convert this data, that Python recognizes as str to a file like object?</p>
</div>
<div class="post-text" itemprop="text">
<p>A so called 'file-like' object is in most cases just an object that implements the Python buffer interface; that is, has methods like <code>read</code>, <code>write</code>, <code>seek</code>, and so on.</p>
<p>The standard library module for buffer interface tools is called <a href="https://docs.python.org/3/library/io.html" rel="nofollow"><code>io</code></a>. You're looking for either <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow"><code>io.StringIO</code></a> or <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow"><code>io.BytesIO</code></a>, depending on the type of data you have â€” if it's a unicode encoded string, you're supposed to use <code>io.StringIO</code>, but you're probably working with a raw bytestream (such as in an image file) as opposed to just text, so <code>io.BytesIO</code> is what you're looking for. When working with files, this is the same distinction as doing <code>open(path, 'r')</code> for unicode files and <code>open(path, 'rb')</code> for raw processing of the bytes.</p>
<p>Both classes take the data for the file-like object as the first parameter, so you just do:</p>
<pre><code>f = io.BytesIO(b'test data')
</code></pre>
<p>After this, <code>f</code> will be an object that works just like a file, except for the fact that it holds its data in memory as opposed to on disk.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow"><code>StringIO</code></a>:</p>
<pre><code>data= StringIO(data)
read_in_chunks(data)
</code></pre>
</div>
<span class="comment-copy">Thank You, This was the solution. Now I just have to figure out why I got a 400 response. But thank you, this is what I was looking for.</span>
<span class="comment-copy">This solution does not work under Python 3, you need to use the <code>io</code> module instead. See my answer for more details.</span>
<span class="comment-copy">@Underyx...OP seems to be working with Python2 instead!</span>
<span class="comment-copy">@IronFist yes, and it is a shame. Either way, this question will probably not be found exclusively by Python 2 users, so it's important to note that one of the answers is compatible with both versions and the other isn't.</span>
