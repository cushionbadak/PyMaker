<div class="post-text" itemprop="text">
<p>I tried performing Modular Exponentiation in Javascript to verify an algorithm and was shocked to find that <strong>Javascript was not giving accurate results compared to Python</strong>, Why is it so. I think it has something to do with the way Javascript handles datatypes(as Text), But I would like to know more about it and I know the purpose why both the langs were designed.</p>
<p><img alt="Modular Exponentiation result comparison in .js and .py" src="https://i.stack.imgur.com/snPtH.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>It gets a bit clearer, when you look at the intermediary results before the modulo operation first:</p>
<pre class="lang-js prettyprint-override"><code>&gt; Math.pow(17, 22)
1.1745628765211486e+27
</code></pre>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; pow(17, 22)
1174562876521148458974062689
</code></pre>
<p>As you can see, the Python result has a lot more digits than the JavaScript result. This is due to how each language handles numbers or integers.</p>
<p>Python has an <a href="http://docs.python.org/3/reference/datamodel.html#index-9"><code>int</code> type</a>, which is basically unlimited: <em>“These represent numbers in an unlimited range, subject to available (virtual) memory only.”</em> So as long as you have memory available, the integers that can be represented with this type can be as big as you want—without any loss in precision.</p>
<p>Enter JavaScript and the ECMA standard. Unlike Python and other languages, we only have a single type responsible for all numeric types: <code>Number</code>. This type holds integers and decimals without any differentiation. They are internally represented as <a href="http://en.wikipedia.org/wiki/Double-precision_floating-point_format">double precision floating point numbers</a>. As such, they are subject to those restrictions, allowing only a certain amount of precision for big numbers. Hence, the best you can get for <code>17^22</code> is the above result, with the rest of the precision lost in the process.</p>
<hr/>
<p>If you are not too focused on performance, you could write your own <code>pow</code> function that additional takes a third parameter to apply a modulo operation to the result, similar to how Python’s <a href="http://docs.python.org/3/library/functions.html#pow"><code>pow</code></a> does.</p>
<pre class="lang-js prettyprint-override"><code>function modpow (base, exponent, modulo) {
    var result = base;
    while (exponent &gt; 1 ) {
        result = (result * base) % modulo;
        exponent--;
    }
    return result;
}
</code></pre>
<p>Of course, this is a lot less efficient than the internal <code>pow</code> and only works for integer exponents, but at least it would solve your job correctly:</p>
<pre class="lang-js prettyprint-override"><code>&gt; modpow(17, 22, 21)
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>pow()</code> function <em>in Python</em> returns an integer result for integer inputs:</p>
<pre><code>&gt;&gt;&gt; pow(17, 22)
1174562876521148458974062689L
</code></pre>
<p>This is <em>not the same function</em> as what <code>Math.pow()</code> gives you, which uses floating point results:</p>
<pre><code>&gt; Math.pow(17, 22)
  1.1745628765211486e+27
</code></pre>
<p>The equivalent function in Python is <a href="http://docs.python.org/2/library/math.html#math.pow"><code>math.pow()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.pow(17, 22)
1.1745628765211484e+27
</code></pre>
<p>and suffers from the same limitations, albeit subtly different in actual result:</p>
<pre><code>&gt;&gt;&gt; math.pow(17, 22) % 21
3.0
</code></pre>
<p>JavaScript only has the Number type, which limits JS arithmetic to float precision, <em>always</em>, while Python's support for a memory-bound integer type gives it more scope for precision.</p>
</div>
<span class="comment-copy"><a href="http://programmers.stackexchange.com/">programmers.stackexchange.com</a> might be a better place for this kind of question.</span>
<span class="comment-copy">This is a valid question</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/588004/is-javascripts-floating-point-math-broken">Is JavaScript's Floating-Point Math Broken?</a></span>
<span class="comment-copy">@PaulGreen What makes you think that?</span>
<span class="comment-copy">@delnan sounded more like a general question about the inner working of both languages. Which is what I thought is more of a thing for programmers.stackexchange.com was just a suggestion though</span>
