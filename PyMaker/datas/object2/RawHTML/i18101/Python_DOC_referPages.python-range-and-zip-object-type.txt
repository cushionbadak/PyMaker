<div class="post-text" itemprop="text">
<p>I understand how functions like <code>range()</code> and <code>zip()</code> can be used in a for loop. However I expected <code>range()</code> to output a list - much like <code>seq</code> in the unix shell. If I run the following code:</p>
<pre><code>a=range(10)
print(a)
</code></pre>
<p>The output is <code>range(10)</code>, suggesting it's not a list but a different type of object. <code>zip()</code> has a similar behaviour when printed, outputting something like</p>
<pre><code>&lt;zip object at "hexadecimal number"&gt;
</code></pre>
<p>So my question is what are they, what advantages are there to making them this, and how can I get their output to lists without looping over them?</p>
</div>
<div class="post-text" itemprop="text">
<p>You must be using Python 3.  </p>
<p>In Python 2, the objects <code>zip</code> and <code>range</code> did behave as you were suggesting, returning lists.  They were changed to <a href="https://wiki.python.org/moin/Generators" rel="noreferrer">generator</a>-like objects which produce the elements on demand rather than expand an entire list into memory.  One advantage was greater efficiency in their typical use-cases (e.g. iterating over them).</p>
<p>The "lazy" versions also exist in Python 2.x, but they have different names i.e. <code>xrange</code> and <code>itertools.izip</code>.</p>
<p>To retrieve all the output at once into a familiar list object, you may simply call <code>list</code> to iterate and consume the contents:</p>
<pre><code>&gt;&gt;&gt; list(range(3))
[0, 1, 2]
&gt;&gt;&gt; list(zip(range(3), 'abc'))
[(0, 'a'), (1, 'b'), (2, 'c')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x., <a href="http://docs.python.org/3.2/library/functions.html#range"><code>range</code></a> returns a range object instead of a list like it did in Python 2.x.  Similarly, <a href="http://docs.python.org/3.2/library/functions.html#zip"><code>zip</code></a> now returns a zip object instead of a list.  </p>
<p>To get these objects as lists, put them in <a href="http://docs.python.org/3.2/library/functions.html#list"><code>list</code></a>:</p>
<pre><code>&gt;&gt;&gt; range(10)
range(0, 10)
&gt;&gt;&gt; list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; zip('abc', 'abc')
&lt;zip object at 0x01DB7120&gt;
&gt;&gt;&gt; list(zip('abc', 'abc'))
[('a', 'a'), ('b', 'b'), ('c', 'c')]
&gt;&gt;&gt;
</code></pre>
<p>While it may seem unhelpful at first, this change in the behavior of <code>range</code> and <code>zip</code> actually increases efficiency.  This is because the zip and range objects produce items as they are needed, instead of creating a list to hold them all at once.  Doing so saves on memory consumption and improves operation speed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Range (<code>xrange</code> in python 2.*) objects are <a href="http://docs.python.org/3/library/stdtypes.html#immutable-sequence-types" rel="nofollow">immutable sequences</a>, while zip (<code>itertools.izip</code> repectively) is a <a href="https://wiki.python.org/moin/Generators" rel="nofollow">generator object</a>. To make a list from a generator or a sequence, simply cast to list. For example:</p>
<pre><code>&gt;&gt;&gt; x = range(10) 
&gt;&gt;&gt; list(x)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>But they differ in a way how elements are generated. Normal generators are mutable and exaust their content if iterated, while range is immutable, and don't:</p>
<pre><code>&gt;&gt;&gt; list(x) # x is a range-object
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # second cast to list, contents is the same
&gt;&gt;&gt; y = zip('abc', 'abc')
&gt;&gt;&gt; list(y) # y is a generator
[('a', 'a'), ('b', 'b'), ('c', 'c')]
&gt;&gt;&gt; list(y) 
[] # second cast to list, content is empty!
</code></pre>
</div>
<span class="comment-copy">Looks like Python 3. Use <code>a = list(range(10))</code>.</span>
<span class="comment-copy">In addition to the good answers here, I recommend reading the answer to <a href="http://stackoverflow.com/a/231855/1599111">The Python yield keyword explained</a> to learn about generators - an excellent example for why your functions might not want to return a list... just yet.</span>
<span class="comment-copy">While these objects are <i>lazy</i> I think it is mis-leading to describe them as like generators, e.g. see <a href="http://stackoverflow.com/questions/13092267/if-range-is-a-generator-in-python-3-3-why-can-i-not-call-next-on-a-range" title="if range is a generator in python 3 3 why can i not call next on a range">stackoverflow.com/questions/13092267/â€¦</a></span>
<span class="comment-copy">@Chris_Rands  They are like generators in the most important sense, that elements are produced on demand.  I think my description is fair; I was careful not to actually call them generators, and the differences are not important for this question.</span>
<span class="comment-copy">True, perhaps the tone of my first comment was unfair, sorry, still I'll leave it there because the link provides some further details on range objects for those that are interested</span>
<span class="comment-copy">zip is an iterator:  &gt;&gt;&gt; z = zip((1,2),(3,4)) &gt;&gt;&gt; next(z) (1, 3)</span>
