<div class="post-text" itemprop="text">
<p>My goal is to create a list of tours. Each tour is a list as well.</p>
<p>The problem with this code is that at the end of the loop, the list <code>tours</code> is not a list of different, shuffled tours, but a list of the last tour that was added to the list. I imagine this has to do with Python object referencing but I do not know how to change this. I have tried <code>del tour</code> but to no avail.</p>
<pre><code>def initialisePopulation(self, cities):
    tours = []

    for i in xrange(0, PopulationSize):
        tour = Tour(cities)
        shuffle(tour.tour)
        tours.append(tour)
        print str(tour.tour[0].id) + "," + str(tour.tour[1].id) + "," + str(tour.tour[2].id) + "," + str(tour.tour[3].id) + "," + str(tour.tour[4].id)
        del(tour)
    print "-"
    for j in xrange(0, PopulationSize):
        print str(tours[j].tour[0].id) + "," + str(tours[j].tour[1].id) + "," + str(tours[j].tour[2].id) + "," + str(tours[j].tour[3].id) + "," + str(tours[j].tour[4].id)
</code></pre>
<p>When I print each tour, everything is fine. When I print the contents of <code>tours</code>, each item is the same.
Here is the output:</p>
<pre><code>2,3,1,5,4
2,4,3,1,5
2,3,4,1,5
4,3,1,5,2
3,4,1,5,2
-
3,4,1,5,2
3,4,1,5,2
3,4,1,5,2
3,4,1,5,2
3,4,1,5,2
</code></pre>
<p>Tour class:</p>
<pre><code>class Tour(object):
    '''
    classdocs
    '''

    def __init__(self, cityList):
        self.tour = cityList
        self.size = len(cityList)
        self.fitness = self.getFitness(self.tour)

    def getFitness(self, tour):
        fitness = sum([self.euclideanDistance(tour[i], tour[i+1]) for i in xrange(0, self.size-1)])
        return fitness

    def euclideanDistance(self, p, q):
        distance = sqrt((p.x - q.x)**2 + (p.y - q.y)**2)
        return  distance
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're almost certainly making one of two mistakes here—but it's in the code you haven't shown us, so I can't tell which one.</p>
<p>The first possibility is that you're storing <code>tour</code> as a class attribute instead of an instance attribute in Tours, so they're all sharing the same attribute:</p>
<pre><code>class Tour(object):
    tour = something
</code></pre>
<p>The second possibility is that you're copying the list of cities into the <code>tour</code> instance attribute, so they all have different attributes, but all of them are references to the same list value:</p>
<pre><code>class Tour(object):
    def __init__(self, cities):
        self.tour = cities
</code></pre>
<hr/>
<p>From your updated question, it's the second one.</p>
<p>This is ultimately identical to the <a href="http://docs.python.org/3/faq/programming.html#how-do-i-create-a-multidimensional-list" rel="nofollow">FAQ about multidimensional lists</a>, except that instead of directly having a list of lists, you have a list of objects that each wrap a list.</p>
<p>At any rate, you want each <code>Tour</code> to have a separate list, so you can mutate them separately with functions like <code>shuffle</code>, right? Then you will need to explicitly copy the list somewhere. For example:</p>
<pre><code>class Tour(object):
    def __init__(self, cities):
        self.tour = cities[:]
</code></pre>
<hr/>
<p>However, I would probably write this differently. First, created a <code>shuffled</code> method that <em>doesn't</em> mutate in-place, but instead returns a new list:</p>
<pre><code>def shuffled(iterable):
    result = list(iterable)
    shuffle(result)
    return result
</code></pre>
<p>Then you can replace your whole first loop with:</p>
<pre><code>tours = [Tour(shuffled(cities)) for _ in xrange(PopulationSize)]
</code></pre>
<hr/>
<p>While we're at it, you can replace the second loop with:</p>
<pre><code>for tour in tours:
    print ','.join(city.id for city in tour)
</code></pre>
<p>The <a href="http://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow">tutorial on <code>for</code> loops</a> explains the <code>for tour in tours</code> part. The second line uses a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">comprehension</a> and the <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>join</code></a> method to avoid repeating yourself five times.</p>
</div>
<span class="comment-copy">Can we see your <code>Tour</code> class? Because it looks like you are properly creating separate <code>Tour</code> instance here—but that all of the <code>Tour</code> instances are sharing a single list of cities.</span>
<span class="comment-copy">I'm willing to bet that the problem is either (a) that <code>tour</code> is a class attribute instead of an instance attribute, so all instances have the same <code>tour</code>, or (b) that you're setting <code>self.tour = cities</code>, so each instance has a separate <code>tour</code> but they're all references to the same list.</span>
<span class="comment-copy">As a side note, instead of writing <code>for j in xrange(0, PopulationSize):</code> only to use <code>tours[j]</code> inside the loop, just do <code>for tour in tours:</code>.</span>
<span class="comment-copy">I've updated the question</span>
<span class="comment-copy">I've updated the question</span>
<span class="comment-copy">@RupertCobbe-Warburton: OK, it's the second one.</span>
<span class="comment-copy">Can't believe I confused copying with referencing the list! noob error. thanks a lot!</span>
