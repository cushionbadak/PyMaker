<div class="post-text" itemprop="text">
<p>I have a list, in which is another list and I want to <code>doc.write(a)</code></p>
<pre><code>a = [[1, 2, "hello"],
     [3, 5, "hi There"],
     [5,7,"I don't know"]]
doc.write(''.join(a))



TypeError: sequence item 0: expected str instance, list found
</code></pre>
<p>How can I handle this, do I have to make a for-loop in which I join and add all the sublists?</p>
<p>The real goal was to make it somehow readable for human beeing, but I didn't wanted a finished solution from you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try something like</p>
<pre><code>&gt;&gt;&gt; a = [[1, 2, "hello"],[3, 5, "hi There"],[5,7,"I don't know"]]
&gt;&gt;&gt; 
&gt;&gt;&gt; ''.join(str(r) for v in a for r in v)
"12hello35hi There57I don't know"
</code></pre>
<p>i.e.</p>
<pre><code>doc.write(''.join(str(r) for v in a for r in v))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are different legal things you can do, and no way for anyone to say which one is right without knowing which one you want.</p>
<hr/>
<p>First, you can just write the <code>str</code> or <code>repr</code> of <code>a</code>:</p>
<pre><code>&gt;&gt;&gt; a=[[1, 2, "hello"],[3, 5, "hi There"],[5,7,"I don't know"]]
&gt;&gt;&gt; repr(a)
'[[1, 2, \'hello\'], [3, 5, \'hi There\'], [5, 7, "I don\'t know"]]'
</code></pre>
<p>Note that this is what <code>print</code> does (it prints the <code>str</code> of whatever you give it—although with a list, the <code>str</code> is identical to the <code>repr</code>; they're both effectively <code>'[' + ', '.join(map(repr, self)) + ']'</code>).</p>
<hr/>
<p>Second, you could use a format that's designed for data persistent, like JSON:</p>
<pre><code>&gt;&gt;&gt; json.dumps(a)
'[[1, 2, "hello"], [3, 5, "hi There"], [5, 7, "I don\'t know"]]'
</code></pre>
<hr/>
<p>Third, you can join together the repr of each element of <code>a</code> in some way of your choosing, which is trivial with a <code>map</code> or a comprehension. For example:</p>
<pre><code>&gt;&gt;&gt; '[' + ', '.join(map(repr, a)) + ']'
'[[1, 2, \'hello\'], [3, 5, \'hi There\'], [5, 7, "I don\'t know"]]'
</code></pre>
<p>… or …</p>
<pre><code>&gt;&gt;&gt; 'My stuff includes: ' + ','.join(map(repr, a)) + '\n'
'My stuff includes: [1, 2, \'hello\'],[3, 5, \'hi There\'],[5, 7, "I don\'t know"]\n'
</code></pre>
<hr/>
<p>Or you can do the same thing recursively.</p>
<p>Or you can flatten the list (e.g., flatten it one step with <code>itertools.chain</code>, or recursively with the recipes from the <code>itertools</code> docs or with the <code>more-itertools</code> package) and then stringify the pieces however you want and then join them up.</p>
<p>Or you can just write the word <code>LIST</code>.</p>
<p>All of those are perfectly valid things to pass to <code>write</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension would be the best choice:</p>
<pre><code>&gt;&gt;&gt; ''.join([str(item) for sublist in a for item in sublist])
"12hello35hi There57I don't know"
</code></pre>
<p>It's the most recommended approach in a <a href="https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python">similar SO question</a>, considering performance and syntax.</p>
</div>
<div class="post-text" itemprop="text">
<p>What about using itertools?</p>
<pre><code>from itertools import chain
doc.write(''.join(map(str, chain(a))))
</code></pre>
<p>Alternatively:</p>
<pre><code>doc.write(''.join(str(i) for sub_list in a for i in sub_list))
</code></pre>
<p>You suggested a using a <code>for</code> loop. You could indeed do this, although the options above are probably better.</p>
<pre><code>new_a = []
for sub_list in a:
    for i in sublist:
        new_a.append(str(i))
doc.write(''.join(new_a))
</code></pre>
<p>This is basically the previous option, but unrolled.</p>
<p>Unless you want to just write the first list, in which case you could do this:</p>
<pre><code>doc.write(''.join(map(str, a[0])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's difficult for me to be sure, because your question is too short, but it seems to me that you are in a XY problem, that is to say :<br/>
you ask a question about a Y problem that you think of as being the one that needs to be solved to goes out of an uphill X problem. But your real problem is that you think that the Y problem is the way to answer to the real problem X AND that you present here only the Y problem.<br/>
Writing that, I only paraphrase what is said here: <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a></p>
<p>If I am right, my opinion is that you will have a better way to solve your real X problem using one of the following tools, that allow to serialize an object and to record the serialized object in a file:</p>
<p><a href="http://docs.python.org/2/library/pickle.html#module-pickle" rel="nofollow noreferrer">pickle</a></p>
<p><a href="http://docs.python.org/2/library/marshal.html#module-marshal" rel="nofollow noreferrer">marshal</a></p>
<p><a href="http://docs.python.org/2/library/shelve.html#module-shelve" rel="nofollow noreferrer">shelve</a></p>
<p>I won't paraphrase and repeat all is the docs on these tools, read them.</p>
<p>.</p>
<p>If i am wrong and that you really just want to write an object under the form of a string representation, you can also do:</p>
<pre><code>from pprint import pformat

a = [[1, 2, "hello"],
     [3, 5, "hi There"],
     [5,7,"I don't know"]]

with open('doc.txt','w') as f:
    f.write(pformat(a,width=12))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also just use a simple list comprehension like this:</p>
<pre><code>doc.write([x for x in i for i in a])
</code></pre>
</div>
<span class="comment-copy">What do you want to do with the numbers?</span>
<span class="comment-copy">Please show the actual output you want.</span>
<span class="comment-copy">I want to write the list in a textfile. Somehow.</span>
<span class="comment-copy">@PellatonYvesBastian: And you don't care how at all? It doesn't need to be re-parseable by your code, or readable by a human being, or importable into some other program, or anything? In that case, just do <code>write('stuff')</code> and you're done.</span>
<span class="comment-copy">@abarnert What is 'stuff' ??</span>
<span class="comment-copy">This has been a long time since that answer - with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>'\t'.join()</code></a> this can be beautified to a tab separated list which might be more readable.</span>
<span class="comment-copy">This is more of a comment than an answer.</span>
<span class="comment-copy">I don't think this is helpful. The OP isn't asking about how to do something wrongly (e.g. parse XML with regex), but a reasonable question. The modules you have given aren't very helpful in terms of writing to a human-readable "<b>text</b>file" (my emphasis), and I believe that link-only answers are discouraged.</span>
<span class="comment-copy">@abarnert I habitually appreciate your answers and comments, but presently I don't understand this comment of yours. It seems to me that the crucial point is: am I right when thinking that the OP tries to find a way to apply a wrong solution to his problem instead of finding a real good and adapted soulution. If yes my advice, that answers to his X problem instead of answering to the Y pseudo-solution, deserves as much an answer format as the other answers, in my opinion.</span>
<span class="comment-copy">@sweeneyrod Where do you see allusions to XML and regex in the question and in my answer ?????</span>
<span class="comment-copy">Explaining why the question is not a good question is not an answer. Any answer that roughly matches one of the standard close reasons is not an answer. Even if it were, a list of links with no commentary is not an answer. So, this is not an answer. (That being said, whoever downvoted your answer should probably have flagged it as "Not an Answer" instead, as explained <a href="http://meta.stackexchange.com/questions/118582/what-is-an-acceptable-answer">here</a>.)</span>
