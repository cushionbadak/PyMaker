<div class="post-text" itemprop="text">
<p>I am trying to convert a list that contains negative values, to a list of non-negative values; inverting the negative ones. I have tried <code>abs</code> but it didn't work.</p>
<p>My input is</p>
<pre><code>x = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
</code></pre>
<p>How can I make it into this format as I am trying calculate the area</p>
<pre><code>x = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try a list comprehension:</p>
<pre><code>x2 = [abs(k) for k in x]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your attempt didn't work because <code>abs()</code> takes an integer, not a list. To do this, you'll have to either loop through the list:</p>
<pre><code>x = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
for i in range(len(x)):
     x[i] = abs(x[i])
</code></pre>
<p>Or you can use list comprehension, which is shorter:</p>
<pre><code>x = [abs(i) for i in x]
</code></pre>
<p>Or simply use the built-in <code>map</code> function, which is even shorter :)</p>
<pre><code>x = list(map(abs, x))
</code></pre>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>The simple pythonic way is the list comprehension above but if you're using Numpy for anything else you could do:</p>
<pre><code>x2 = numpy.abs(x)
</code></pre>
<p>with no need to convert or do any looping.</p>
</div>
<div class="post-text" itemprop="text">
<p>what you want is to use the absolute value (|x| = x if x &gt; 0, |x| = -x if x &lt; 0)</p>
<pre><code>for index in range(len(x)):
    x[index] =  x[index] if x[index] &gt; 0 else -x[index]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a wrong answer to your question, but this is what I came here looking for. This is how to invert all the numbers in your list using <a href="https://docs.python.org/3/library/operator.html#operator.neg" rel="nofollow noreferrer">operator.neg</a>; i.e. also positives to negatives.</p>
<pre><code>import operator
x = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
x = list(map(operator.neg, x))
</code></pre>
<p>It returns:</p>
<pre><code>[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<p>Or you can do a list comprehension of course:</p>
<pre><code>x = [-xi for xi in x]
</code></pre>
</div>
<span class="comment-copy">That's a bit too far, no need for numpy here.</span>
<span class="comment-copy">I agree and I put caveats in my answer; however it's the shortest and simplest option from a syntax perspective and it seems the question is from a relatively inexperienced python-er, who has probably not heard of list comprehensions or map either.</span>
<span class="comment-copy">And.. who probably never heard of numpy at all. Well, you actually have a have a good point though.</span>
<span class="comment-copy">The only thing I don't like about this answer (but to be fair I thought of this solution when I read the question as well) is that it returns a numpy array and not a list.  It's a small point, but at least something to point out.</span>
<span class="comment-copy">In that case, numpy.abs(x).tolist()</span>
<span class="comment-copy">You don't have to do this, you can use <code>abs</code> instead. Python provided a built-in function.</span>
