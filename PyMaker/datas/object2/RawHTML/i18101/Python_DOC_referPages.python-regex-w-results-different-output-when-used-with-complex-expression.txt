<div class="post-text" itemprop="text">
<p>I have doubt on python regex operation. Here you go my sample test.</p>
<pre><code>&gt;&gt;&gt;re.match(r'(\w+)','a-b') gives an output
&gt;&gt;&gt; &lt;_sre.SRE_Match object at 0x7f51c0033210&gt;

&gt;&gt;&gt;re.match(r'(\w+):(\d+)','a-b:1')
&gt;&gt;&gt; 
</code></pre>
<p>Why does the 2nd regex condition doesn't give match object though the 1st regex gives match object for a normal string match condition, irrespective of special characters is available in the string? </p>
<p>However, \w+ will matches for [a-z,A-Z,_]. I'm not clear why (\w+) gives matched object for the string 'a-b'. How can I check whether  the given string doesn't contain any special characters?</p>
</div>
<div class="post-text" itemprop="text">
<p>Taking a look at the actual match will give you an idea of what happens.</p>
<pre><code>&gt;&gt;&gt; re.match(r'(\w+)', 'a-b')
&lt;_sre.SRE_Match object at 0x0000000002DE45D0&gt;
&gt;&gt;&gt; _.groups()
('a',)
</code></pre>
<p>As you can see, the expression matched <code>a</code>. The character sequence <code>\w</code> only contains actual <em>word characters</em>, but not separators like dashes. So you can’t actually match <code>a-b</code> using just a <code>\w+</code>.</p>
<p>Now in the second expression one might think that it would match <code>b:1</code> at least, given that <code>\w+</code> matches <code>b</code> and <code>:(\d+)</code> does match the <code>1</code>. However it does not happen due to how <a href="http://docs.python.org/3/library/re.html#re.match" rel="noreferrer"><code>re.match</code></a> works. As the documentation hints, it only tries to match <em>“at the beginning of <code>string</code>”</em>. So when using <code>re.match</code> there is an implicit <code>^</code> at the beginning of the expression that makes it only match from the start. So it actually tries to find a match starting with <code>a</code>.</p>
<p>Instead, you can use <a href="http://docs.python.org/3/library/re.html#re.search" rel="noreferrer"><code>re.search</code></a> which actually looks in the whole string if it can match the expression anywhere. So there, you will get a result:</p>
<pre><code>&gt;&gt;&gt; re.search(r'(\w+):(\d+)', 'a-b:1')
&lt;_sre.SRE_Match object at 0x0000000002E01B58&gt;
&gt;&gt;&gt; _.groups()
('b', '1')
</code></pre>
<p>For further information on the <code>search</code> vs. <code>match</code> topic, check <a href="http://docs.python.org/3/library/re.html#search-vs-match" rel="noreferrer">this section in the manual</a>.</p>
<p>And finally, if you want to match dashes too, you can use a character sequence <code>[\w-]</code> for example:</p>
<pre><code>&gt;&gt;&gt; re.match(r'([\w-]+):(\d+)', 'a-b:1')
&lt;_sre.SRE_Match object at 0x0000000002E01B58&gt;
&gt;&gt;&gt; _.groups()
('a-b', '1')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first matches the <code>a</code> - one or more word chars.</p>
<p>The second is one or more word chars <em>immediately</em> followed by a <code>:</code> which there aren't...</p>
<p><code>[a-z,A-Z,_]</code> (the equivalent of <code>\w</code>) means <em>a</em> to <em>z</em> and <em>A</em> to <em>Z</em> - it isn't the literal hyphen in this context, if you did want a hyphen, put it as the first or last character of a character class.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2.7/library/re.html#re.match" rel="nofollow">Match's docs</a> say</p>
<blockquote>
<p>If <strong>zero or more characters at the beginning of string</strong> match the
  regular expression pattern, return a corresponding MatchObject
  instance.</p>
</blockquote>
<p><code>match</code> method will return the matched object if it finds a match at the beginning of the string. <code>(\w+)</code> matches <code>a</code> in <code>a-b</code>. </p>
<pre><code>print re.match(r'(\w+)','a-b').group()
</code></pre>
<p>will print </p>
<pre><code>a
</code></pre>
<p>In the second case (<code>(\w+):(\d+)</code>), the actual string which gets matched is <code>b:1</code>, which is not at the beginning of the string. That's why its returning <code>None</code>.</p>
<blockquote>
<p>How can I check whether the given string doesn't contain any special characters?</p>
</blockquote>
<p>I would say, the second regular expression which you have used should be enough and <code>match</code> function should be enough. I insist on <code>match</code>, since there are differences between <code>match</code> and <code>search</code> <a href="http://docs.python.org/2.7/library/re.html#search-vs-match" rel="nofollow">http://docs.python.org/2.7/library/re.html#search-vs-match</a></p>
<p>Remember, you</p>
</div>
