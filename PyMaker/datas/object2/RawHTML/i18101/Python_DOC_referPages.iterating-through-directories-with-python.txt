<div class="post-text" itemprop="text">
<p>I need to iterate through the subdirectories of a given directory and search for files. If I get a file I have to open it and change the content and replace it with my own lines.</p>
<p>I tried this:</p>
<pre><code>import os

rootdir ='C:/Users/sid/Desktop/test'

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        f=open(file,'r')
        lines=f.readlines()
        f.close()
        f=open(file,'w')
        for line in lines:
            newline = "No you are not"
            f.write(newline)
        f.close()
</code></pre>
<p>but I am getting an error. What am I doing wrong? </p>
</div>
<div class="post-text" itemprop="text">
<p>The actual walk through the directories works as you have coded it. If you replace the contents of the inner loop with a simple <code>print</code> statement you can see that each file is found:</p>
<pre><code>import os
rootdir = 'C:/Users/sid/Desktop/test'

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        print os.path.join(subdir, file)
</code></pre>
<p>If you still get errors when running the above, please provide the error message.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way of returning all files in subdirectories is to use <a href="https://docs.python.org/3.4/library/pathlib.html#" rel="noreferrer">the <code>pathlib</code> module</a>, introduced in Python 3.4, which provides an object oriented approach to handling filesystem paths (Pathlib is also available on Python 2.7 via <a href="https://pypi.python.org/pypi/pathlib2/" rel="noreferrer">the pathlib2 module on PyPi</a>):</p>
<pre><code>from pathlib import Path

rootdir = Path('C:/Users/sid/Desktop/test')
# Return a list of regular files only, not directories
file_list = [f for f in rootdir.glob('**/*') if f.is_file()]

# For absolute paths instead of relative the current dir
file_list = [f for f in rootdir.resolve().glob('**/*') if f.is_file()]
</code></pre>
<p>Since Python 3.5, the <code>glob</code> module also supports recursive file finding:</p>
<pre><code>import os
from glob import iglob

rootdir_glob = 'C:/Users/sid/Desktop/test/**/*' # Note the added asterisks
# This will return absolute paths
file_list = [f for f in iglob('**/*', recursive=True) if os.path.isfile(f)]
</code></pre>
<p>The <code>file_list</code> from either of the above approaches can be iterated over without the need for a nested loop:</p>
<pre><code>for f in file_list:
    print(f) # Replace with desired operations
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of <strong>2019</strong>, <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer"><code>glob.iglob(path/**, recursive=True)</code></a> seems the most <em>pythonic</em> solution, i.e.:</p>
<pre><code>import glob, os

for filename in glob.iglob('/pardadox-music/**', recursive=True):
    if os.path.isfile(filename): # filter dirs
        print(filename)
</code></pre>
<p>Output:</p>
<pre><code>/pardadox-music/modules/her1.mod
/pardadox-music/modules/her2.mod
...
</code></pre>
<hr/>
<p>Notes:<br/>
1 - <strong><a href="https://docs.python.org/3/library/glob.html#glob.iglob" rel="nofollow noreferrer">glob.iglob</a></strong></p>
<blockquote>
<p><code>glob.iglob(pathname, recursive=False)</code></p>
<p>Return an iterator which yields the same values as <code>glob()</code> without actually storing them all simultaneously.</p>
</blockquote>
<p>2 - If recursive is <code>True</code>, the pattern <code>'**'</code> will match any files and
zero or more <code>directories</code> and <code>subdirectories</code>.</p>
<p>.</p>
</div>
<span class="comment-copy">"An error" - any error in particular?</span>
<span class="comment-copy">@DanielRoseman He's not supposed to. Code is right.</span>
<span class="comment-copy">Please could you explain a little about what you hope to do with the files / directories once you get the walk through them working as intended? Also please provide error details.</span>
<span class="comment-copy">The error message that im getting is that the file cool.txt is not found. In my test folder i have an other folder called src and in the src folder i have another folder called main, in this folder i have cool.txt</span>
<span class="comment-copy">can you just write the error in the question? its beyond annoying and unnecessary to have to read through the comments to find it.</span>
<span class="comment-copy">C:/Users/sid/Desktop/test\src\app/cool.txt C:/Users/sid/Desktop/test\src\app/woohoo.txt  Ya in the open statement of my code, i think i have to give the absolute path to the file.   import os rootdir ='C:/Users/spemmara/Desktop/test/src/app/'  for subdir, dirs, files in os.walk(rootdir):     for file in files:             f=open(subdir+'/'+ file,'r')             lines=f.readlines()             f.close()             f=open(subdir+'/'+file,'w')             for line in lines:                 newline = "hey i know"                 f.write(newline)             f.close()      Thanks man. Its solved</span>
<span class="comment-copy">What is preferable here for Python 3.6?</span>
<span class="comment-copy">@PhoenixDev I haven't heard of one approach being recommended over the other in general. I prefer using <code>pathlib</code> myself, mostly because I like  the object oriented methods-syntax. There are other differences, such as the path library returns specific path classes rather than strings, and the available functions differ between the libraries (e.g. <code>os.path.expanduser('~')</code> vs <code>Path.home()</code>). Browse through the documentation and see which approach you prefer.</span>
<span class="comment-copy">Instead of adding <code>**</code> in the glob pattern, you can use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob" rel="nofollow noreferrer"><code>rglob</code></a>.</span>
