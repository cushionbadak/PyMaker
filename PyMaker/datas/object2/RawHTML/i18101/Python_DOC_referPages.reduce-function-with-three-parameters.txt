<div class="post-text" itemprop="text">
<p>How does <code>reduce</code> function work in python3 with three parameters instead of two.
So, for two,</p>
<pre><code>tup = (1,2,3)
reduce(lambda x, y: x+y, tup)
</code></pre>
<p>I get this one. This would just sum up all the elements in <code>tup</code>. However, if you give reduce function three parameters like this below,</p>
<pre><code>tup = (1,2,3)
reduce(lambda x, y: x+y, tup, 6)
</code></pre>
<p>this would give you a value of <code>12</code>. 
I checked up on the documentation for python3 and it says the third argument is an initializer. That said, then what is the default initializer if the third argument is not inserted?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you omit the third parameter, then the <em>first</em> value from <code>tup</code> is used as the initializer.</p>
<p>Or, to put it a different way, <code>reduce()</code> places the optional 3rd parameter before the values of the second argument, if present.</p>
<p>Moreover, that means that if the second argument is an <em>empty</em> sequence, that third argument serves as the default, just as a second argument with only <em>one</em> element (and no explicit initializer argument), would be the default return value.</p>
<p>The <a href="http://docs.python.org/3/library/functools.html#functools.reduce" rel="noreferrer"><code>functools.reduce()</code> documentation</a> includes a Python version of the function:</p>
<pre><code>def reduce(function, iterable, initializer=None):
    it = iter(iterable)
    if initializer is None:
        value = next(it)
    else:
        value = initializer
    for element in it:
        value = function(value, element)
    return value
</code></pre>
<p>Note how the <code>initializer</code>, when not <code>None</code>, is used as the first value instead of a first value from <code>iterable</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>reduce</strong> optional third argument :</p>
<pre><code>&gt;&gt;&gt; import functools
&gt;&gt;&gt; test = []
&gt;&gt;&gt; functools.reduce((lambda x,y: x+y), test, "testing")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Providing a tuple as a third parametr we will be able to calculate and return from reduce multiple values.</p>
<pre><code>from functools import reduce
def mean(my_list):                  # == sum(my_list) / len(my_list)
    return (lambda x: x[0]/x[1]) (reduce(lambda x, y : (x[0]+y, x[1]+1), 
                                                my_list, (0, 0,)))
</code></pre>
</div>
<span class="comment-copy">Ok I seem to understand! What does <code>next</code> do in this function?</span>
<span class="comment-copy">@ChanPark: See the <a href="http://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code> function documentation</a>; retrieve the next value from an iterator. If <code>iterable</code> is a tuple, that's the first index.</span>
<span class="comment-copy">Note that the actual reduce function does accept <code>None</code> as a 3rd argument.</span>
<span class="comment-copy">@thg435: yup, in Python code, you'd employ a sentinel instead; <code>_sentinel = object()</code>, then <code>initializer=_sentinel</code> in the function signature, then <code>if initializer is _sentinel:</code>. But to improve readability, <code>None</code> was chosen.</span>
