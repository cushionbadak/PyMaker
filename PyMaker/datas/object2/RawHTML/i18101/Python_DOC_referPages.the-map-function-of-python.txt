<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; dataset
[[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]
&gt;&gt;&gt; D=map(set,dataset)
&gt;&gt;&gt; D
&lt;map object at 0x0000000002ABF5F8&gt;
</code></pre>
<p>When I input D into interactive window of python3.3,I supposed that it should appear:</p>
<p><code>[set([1, 3, 4]), set([2, 3, 5]), set([1, 2, 3, 5]), set([2, 5])]</code></p>
<p>Why a map object?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why the result of map is an object? Because in <a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow">documentation for python 3.3</a> it is written that it yields the result, thus it is a generator.</p>
<p>You can read it by using</p>
<pre><code>for i in D:
  print i
</code></pre>
<p>or as it was suggested by Grijesh</p>
<p><code>list(D)</code> will convert it to list</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, map doesn't return a list, but a map object, an iterator. There's a <a href="https://stackoverflow.com/questions/1303347/getting-a-map-to-return-a-list-in-python-3-1">similar question</a> about this.
If you need a list, you can easily convert it to a list:</p>
<pre><code>D = list(map(set,dataset))
</code></pre>
<p>See the <a href="http://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow noreferrer">docs</a> about this.</p>
<p>By the way, it's a good practice to use lower case letters for variable names. Hope this helps!</p>
</div>
<span class="comment-copy">It return generator for 3+, Do <code>list(map(set, dataset))</code></span>
<span class="comment-copy">Read <a href="http://stackoverflow.com/questions/1303347/getting-a-map-to-return-a-list-in-python-3-1">Getting a map() to return a list in python 3.1</a> I didn't read anywhere  But I observe the difference that in new Python version most in-built functions return generator instead of sequences (for efficiency purpose I suppose)</span>
<span class="comment-copy">You can also use LCs <code>[set(i) for i in dataset]</code></span>
<span class="comment-copy">When noticing strange behaviour if using Py3, it is always worth to take a look at the function's documentation. There are many subtledifferences, making your life hard if you are used to Py2.</span>
<span class="comment-copy">Haven't seen yours when i wrote it. Sorry mate.</span>
