<div class="post-text" itemprop="text">
<p>When I'm using Python 3 to launch a program via <code>subprocess.call()</code>, why do I need 4 backslashes in paths?</p>
<p>This is my code:</p>
<pre class="lang-python prettyprint-override"><code>cmd = 'C:\\\\Windows\\\\System32\\\\cmd.exe'

cmd = shlex.split(cmd)

subprocess.call(cmd)
</code></pre>
<p>When I examine the command line of the launched <code>cmd.exe</code> instance with Task Manager, it shows the path correctly with only one backslash separating each path.</p>
<hr/>
<p>Because of this, I need this on Windows to make the paths work:</p>
<pre><code>if platform.platform().startswith('Windows'):
    cmd = cmd.replace(os.sep, os.sep + os.sep)
</code></pre>
<p>is there a more elegant solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>Part of the problem is that you're using <code>shlex</code>, which implements escaping rules used by Unix-ish shells.  But you're <em>running</em> on Windows, whose command shells use different rules.  That accounts for one level of needing to double backslashes (i.e., to worm around something <code>shlex</code> does that you didn't need to begin with).</p>
<p>That you're using a regular string instead of a raw string (<code>r"..."</code>) accounts for the other level of needing to double backslashes, and 2*2 = 4.  QED ;-)</p>
<p>This works fine on Windows:</p>
<pre><code>cmd = subprocess.call(r"C:\Windows\System32\cmd.exe")
</code></pre>
<p>By the way, read the docs for <code>subprocess.Popen()</code> carefully:  the Windows <code>CreateProcess()</code> API call <em>requires</em> a string for an argument.  When you pass a sequence instead, Python tries to turn that sequence into a string, via rules explained in the docs.   When feasible, it's better - on Windows - to pass the string you want directly.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you are creating the string, you need to double each backslash for escaping, and then when the string is passed to your shell, you need to double each backslash again. You can cute the backslashes in half by using a raw string:</p>
<pre><code>cmd = r'C:\\Windows\\System32\\cmd.exe'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>\</code> has special meaning - you're using it as part of an escape sequence.  Double up the backslashes, and you have a literal backslash <code>\</code>.</p>
<p>The caveat is that, with only one pair of escaped backslashes, <em>you still have only one literal backslash.</em>  You need to escape <em>that</em> backslash, too.</p>
<p>Alternatively, why not just use <a href="http://docs.python.org/3/library/os.html#os.sep" rel="nofollow"><code>os.sep</code></a> instead?  You'll be able to ensure your code is more portable (since it'll use the system-specific separator), and you won't have to deal [directly] with escaping backslashes.</p>
</div>
<div class="post-text" itemprop="text">
<p>As John points out 4 slashes isn't necessary when accessing files locally.
One place where 4 slashes is necessary is when connecting to (generally windows) servers over SMB or CIFS.</p>
<p>Normally you would just use \servername\share\</p>
<p>But each one of those slashes needs to be escaped.  So thus the 4 slashes before servernames.</p>
<p>you could also use subprocess.call()</p>
<pre><code>import subprocess as sp
sp.call(['c:\\program files\\&lt;path&gt;'])
</code></pre>
</div>
<span class="comment-copy">Thanks for this detailed explanation. I'll make a note not to use <code>shlex.split()</code> on Windows, only on Linux.</span>
<span class="comment-copy">This mostly makes sense, but if the first pair of backslashes are interpreted by Python, what interprets the 2nd pair?</span>
<span class="comment-copy">@minerz029, as I explained in my answer, <code>shlex.split()</code> <i>also</i> interprets backslashes as escape characters.</span>
<span class="comment-copy"><code>os.sep</code>? I've edited my question to show that I need to double <code>os.sep</code> to make the paths launch correctly.</span>
<span class="comment-copy">It may be the case that you're stuck like that.  <a href="http://stackoverflow.com/a/11924842/1079354">This similar question</a> doesn't offer much in the way of relief either, unless you wanted to go the path of raw strings.</span>
<span class="comment-copy">I don't get what you mean. John's answer said that the 4 backslashes are a necessity and I haven't mentioned servers anywhere in my question (see my example in my question).</span>
<span class="comment-copy">Your question was "why do I need 4 backslashes in paths?"  Your example didn't fit the entirety of the question.  So I added network paths to the realm of possibilities.</span>
