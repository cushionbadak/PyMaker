<div class="post-text" itemprop="text">
<p>I stumbled across this extra, no-underscores <code>mro</code> method when I was using <code>__metaclass__ = abc.ABCMeta</code>. It seems to be the same as <code>__mro__</code> except that it returns a list instead of a tuple. Here's a random example (<a href="http://ideone.com/aEhzAw" rel="nofollow noreferrer">ideone snippet</a>):</p>
<pre><code>import abc
import copy

class Life(object):
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def reproduce(self):
        pass

class Bacterium(Life):
    def reproduce(self):
        return copy.deepcopy(self)

wiggly = Bacterium()

print wiggly.__class__.__mro__
# (&lt;class '__main__.Bacterium'&gt;, &lt;class '__main__.Life'&gt;, &lt;type 'object'&gt;)

print wiggly.__class__.mro()
# [&lt;class '__main__.Bacterium'&gt;, &lt;class '__main__.Life'&gt;, &lt;type 'object'&gt;]
</code></pre>
<p>I found later that this isn't unique to <code>ABCMeta</code> but is available in all new-style classes.</p>
<p>So... why? What is this doing that <code>__mro__</code> isn't?</p>
</div>
<div class="post-text" itemprop="text">
<p>Directly from <a href="http://docs.python.org/3/library/stdtypes.html#class.mro">the documentation</a>:</p>
<blockquote>
<p>This method can be overridden by a metaclass to customize the method resolution order for its instances. It is called at class instantiation, and its result is stored in <a href="http://docs.python.org/3/library/stdtypes.html#class.__mro__">__mro__</a>.</p>
</blockquote>
<p>Pretty self-explanatory to me...</p>
<p><code>mro()</code> is called on instanciation and stores its result in <code>__mro__</code>. They don't really have the same purpose.</p>
</div>
<span class="comment-copy">So when should I use which? Does the standard implementation of <code>mro()</code> use <code>__mro__</code> as a cache, in that it does not recompute? If yes, then that's the reason for <code>__mro__</code> and should be considered an implementation detail. Otherwise, what's the purpose of it?</span>
<span class="comment-copy">@burnpanck. <code>__mro__</code> is explicitly used by <code>super</code>: <a href="https://docs.python.org/3/reference/datamodel.html#invoking-descriptors" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#invoking-descriptors</a></span>
