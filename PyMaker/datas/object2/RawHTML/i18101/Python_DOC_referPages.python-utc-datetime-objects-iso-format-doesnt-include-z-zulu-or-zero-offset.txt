<div class="post-text" itemprop="text">
<p>Why python 2.7 doesn't include Z character (Zulu or zero offset) at the end of UTC datetime object's isoformat string unlike JavaScript?</p>
<pre><code>&gt;&gt;&gt; datetime.datetime.utcnow().isoformat()
'2013-10-29T09:14:03.895210'
</code></pre>
<p>Whereas in javascript</p>
<pre><code>&gt;&gt;&gt;  console.log(new Date().toISOString()); 
2013-10-29T09:38:41.341Z
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>datetime</code> objects don't have time zone info by default, and without it, Python actually violates the ISO 8601 specification (<a href="http://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators" rel="noreferrer">if no time zone info is given, assumed to be local time</a>). You can use the <a href="https://pypi.python.org/pypi/pytz/" rel="noreferrer">pytz package</a> to get some default time zones, or directly subclass <code>tzinfo</code> yourself:</p>
<pre><code>from datetime import datetime, tzinfo, timedelta
class simple_utc(tzinfo):
    def tzname(self,**kwargs):
        return "UTC"
    def utcoffset(self, dt):
        return timedelta(0)
</code></pre>
<p>Then you can manually add the time zone info to <code>utcnow()</code>:</p>
<pre><code>&gt;&gt;&gt; datetime.utcnow().replace(tzinfo=simple_utc()).isoformat()
'2014-05-16T22:51:53.015001+00:00'
</code></pre>
<p>Note that this DOES conform to the ISO 8601 format, which allows for either <code>Z</code> or <code>+00:00</code> as the suffix for UTC. Note that the latter actually conforms to the standard better, with how time zones are represented in general (UTC is a special case.)</p>
</div>
<div class="post-text" itemprop="text">
<h3>Option: <code>isoformat()</code></h3>
<p>Python's <code>datetime</code> does not support the <a href="https://en.wikipedia.org/wiki/List_of_military_time_zones" rel="noreferrer">military timezone</a> suffixes like 'Z' suffix for UTC. The following simple string replacement does the trick:</p>
<pre><code>In [1]: import datetime

In [2]: d = datetime.datetime(2014, 12, 10, 12, 0, 0)

In [3]: str(d).replace('+00:00', 'Z')
Out[3]: '2014-12-10 12:00:00Z'
</code></pre>
<p><code>str(d)</code> is essentially the same as <code>d.isoformat(sep=' ')</code></p>
<p>See: <a href="https://docs.python.org/2/library/datetime.html#datetime.date.__str__" rel="noreferrer">Datetime, Python Standard Library</a></p>
<h3>Option: <code>strftime()</code></h3>
<p>Or you could use <code>strftime</code> to achieve the same effect:</p>
<pre><code>In [4]: d.strftime('%Y-%m-%d %H:%M:%SZ')
Out[4]: '2014-12-10 12:00:00Z'
</code></pre>
<p>Note: This option works only when you know the date specified is in UTC. </p>
<p>See: <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime" rel="noreferrer">datetime.strftime()</a></p>
<hr/>
<h3>Additional: Human Readable Timezone</h3>
<p>Going further, you may be interested in displaying human readable timezone information, <code>pytz</code> with <code>strftime</code> <code>%Z</code> timezone flag: </p>
<pre><code>In [5]: import pytz

In [6]: d = datetime.datetime(2014, 12, 10, 12, 0, 0, tzinfo=pytz.utc)

In [7]: d
Out[7]: datetime.datetime(2014, 12, 10, 12, 0, tzinfo=&lt;UTC&gt;)

In [8]: d.strftime('%Y-%m-%d %H:%M:%S %Z')
Out[8]: '2014-12-10 12:00:00 UTC'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python datetimes are a little clunky. Use <code>arrow</code>.</p>
<pre><code>&gt; str(arrow.utcnow())
'2014-05-17T01:18:47.944126+00:00'
</code></pre>
<p>Arrow has essentially the same api as datetime, but with timezones and some extra niceties that should be in the main library.</p>
<p>A format compatible with Javascript can be achieved by:</p>
<pre><code>arrow.utcnow().isoformat().replace("+00:00", "Z")
'2018-11-30T02:46:40.714281Z'
</code></pre>
<p>Javascript <code>Date.parse</code> will quietly drop microseconds from the timestamp.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following javascript and python scripts give identical outputs. I think it's what you are looking for.</p>
<p>JavaScript</p>
<pre><code>new Date().toISOString()
</code></pre>
<p>Python</p>
<pre><code>import datetime

datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z'
</code></pre>
<p>The output they give is the utc (zelda) time formatted as an ISO string with a 3 millisecond significant digit and appended with a Z.</p>
<pre><code>2019-01-19T23:20:25.459Z
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By combining all answers above I came with following function : </p>
<pre><code>from datetime import datetime, tzinfo, timedelta
class simple_utc(tzinfo):
    def tzname(self,**kwargs):
        return "UTC"
    def utcoffset(self, dt):
        return timedelta(0)


def getdata(yy, mm, dd, h, m, s) :
    d = datetime(yy, mm, dd, h, m, s)
    d = d.replace(tzinfo=simple_utc()).isoformat()
    d = str(d).replace('+00:00', 'Z')
    return d


print getdata(2018, 02, 03, 15, 0, 14)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a lot of good answers on the post, but I wanted the format to come out exactly as it does with JavaScript. This is what I'm using and it works well.</p>
<pre><code>In [1]: import datetime

In [1]: now = datetime.datetime.utcnow()

In [1]: now.strftime('%Y-%m-%dT%H:%M:%S') + now.strftime('.%f')[:4] + 'Z'
Out[3]: '2018-10-16T13:18:34.856Z'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python &gt;= 3.2 you can simply use this:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime, timezone
&gt;&gt;&gt; datetime.now(timezone.utc).isoformat()
'2019-03-14T07:55:36.979511+00:00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import arrow

&gt;&gt;&gt; now = arrow.utcnow().format('YYYY-MM-DDTHH:mm:ss.SSS')
&gt;&gt;&gt; now
'2018-11-28T21:34:59.235'
&gt;&gt;&gt; zulu = "{}Z".format(now)
&gt;&gt;&gt; zulu
'2018-11-28T21:34:59.235Z'
</code></pre>
<p>Or, to get it in one fell swoop:</p>
<pre><code>&gt;&gt;&gt; zulu = "{}Z".format(arrow.utcnow().format('YYYY-MM-DDTHH:mm:ss.SSS'))
&gt;&gt;&gt; zulu
'2018-11-28T21:54:49.639Z'
</code></pre>
</div>
<span class="comment-copy">Python datetime values have NO timezone information.  Try pytz or Babel if you want timezone info stored in your time stamp.</span>
<span class="comment-copy"><code>datetime.datetime.utcnow().isoformat() + 'Z'</code></span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/a/28164131/4279">How to get an isoformat datetime string including the default timezone?</a></span>
<span class="comment-copy">..and the missing Z surprisingly causes some things not to work eg API call</span>
<span class="comment-copy">how do I include <code>Z</code> instead of <code>+00:00</code> ?</span>
<span class="comment-copy">Nice, this post actually answer's OP's initial question (unlike the other ones here).</span>
<span class="comment-copy">Shouldn't the separator be <code>T</code> instead of a blank?</span>
<span class="comment-copy">This doesn't answer the question as the string doesn't end with 'Z'.</span>
<span class="comment-copy">"A little clunky" is the kindest thing that's ever been said about Python date and time handling.</span>
