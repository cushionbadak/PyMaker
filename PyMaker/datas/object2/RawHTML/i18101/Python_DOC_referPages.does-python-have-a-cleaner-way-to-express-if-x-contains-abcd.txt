<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4843158/check-if-a-python-list-item-contains-a-string-inside-another-string">Check if a Python list item contains a string inside another string</a>
<span class="question-originals-answer-count">
                    15 answers
                </span>
</li>
</ul>
</div>
<p>The Pythonic way to check if a string <code>x</code> is a substring of <code>y</code> is:</p>
<pre><code>if x in y:
</code></pre>
<p>Finding if <code>x</code> is equivalent to <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>, <code>f</code> or <code>g</code> is also Pythonic:</p>
<pre><code>if x in [a,b,c,d,e,f,g]:
</code></pre>
<p>But checking if some string <code>x</code> contains either <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>, <code>f</code> or <code>g</code> seems clunky:</p>
<pre><code>if a in x or b in x or c in x or d in x or e in x or f in x or g in x
</code></pre>
<p>Is there a more <strong>Pythonic</strong> method of checking if a string <code>x</code> contains an element of a list?</p>
<p>I know it is trivial to write this myself using a loop or using a regex:</p>
<pre><code>re.search('(dog|cat|bird|mouse|elephant|pig|cow)', x)
</code></pre>
<p>but I was wondering if there was a cleaner way that does not involve regex.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Pythonic approach would be to use <a href="http://docs.python.org/3/library/functions.html#any" rel="noreferrer"><code>any()</code></a>:</p>
<pre><code>if any(s in x for s in (a,b,c,d,e,f,g)):
</code></pre>
<p>From the linked documentation: </p>
<blockquote>
<p><strong><code>any</code></strong>(<em>iterable</em>)</p>
<p>Return True if any element of the <em>iterable</em> is true. If the iterable is empty, return False. Equivalent to:</p>
<pre><code>def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
</code></pre>
</blockquote>
<p>Also, notice that I've used a tuple instead of a list here. If your <code>a</code>-<code>g</code> values are pre-defined, then a tuple would indeed be preferred. See: <a href="https://stackoverflow.com/questions/68630/are-tuples-more-efficient-than-lists-in-python">Are tuples more efficient than lists in Python?</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if any(q in x for q in [a,b,c,d,e,f,g]):
</code></pre>
<p>I think that's about as short &amp; Pythonic as you can get it.</p>
</div>
<div class="post-text" itemprop="text">
<p>A bit late to the party, but</p>
<pre><code>not frozenset(x).isdisjoint(frozenset(y))
</code></pre>
<p>would work, and may be faster (algorithmically, but maybe not for smaller test cases).</p>
</div>
<div class="post-text" itemprop="text">
<p>without using <code>any</code> but simply <code>max</code></p>
<pre><code>def is_in(symbol, lst):
    return max([symbol in x for x in lst]) 

print is_in('a',['ae','br','tl'])
print is_in('c',['ae','br','tl'])
</code></pre>
<p>gives</p>
<pre><code>&gt;&gt;&gt; 
True
False
</code></pre>
</div>
<span class="comment-copy">Inner parenthesis aren't nessesary <code>any(s in x for s in a, b, c, d, e, f, g)</code> is fine.</span>
<span class="comment-copy">@Igonato I find the inner parenthesis add readability.</span>
<span class="comment-copy">Yes. My mistake :/</span>
<span class="comment-copy">@chepner: You can't. a,b,c,.. are variables, not chars!</span>
<span class="comment-copy">@CeasarBautista No, that's completely different. What you have checks if any of the characters of <code>x</code> are in the set <code>{a,...,g}</code>, which isn't what we want.</span>
<span class="comment-copy">I find this one much harder to read.</span>
<span class="comment-copy">this is rather obscure</span>
<span class="comment-copy">@siledh not really, it's referenced in some other answers, and the fact that using <code>set</code> and similar types will reduce the lookup cost isn't too esoteric either.</span>
<span class="comment-copy">It's faster as <code>max(...)</code> instead of <code>max([...])</code>.</span>
<span class="comment-copy">It's much faster as <code>any(...)</code> instead of <code>max(...)</code>...</span>
<span class="comment-copy">yes, <code>any</code> is preferable as it will short-circuit when a match is found, <code>max</code> will check every string every time.</span>
