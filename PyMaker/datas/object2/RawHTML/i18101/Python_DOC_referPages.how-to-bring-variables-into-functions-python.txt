<div class="post-text" itemprop="text">
<p>I am having an issue where I want to bring a variable into a function by name.</p>
<p>I have tried this so far:</p>
<pre><code>x = 5
def func(y = x):
    return y ** 2

&gt;&gt;&gt;print func()
25
&gt;&gt;&gt;x = 4
&gt;&gt;&gt;print func()
25
</code></pre>
<p>However if I try to edit that input variable after I input the code the number the function detects the old input so it would still print 25 as oppose to the new input squared.</p>
<p>Is there a cleaner way to pull a variable into a function that actually works?</p>
</div>
<div class="post-text" itemprop="text">
<p>Default functions values are calculated during function creation time, so even if you change the value of <code>x</code> it is not going to be changed in the function.</p>
<p>From <a href="http://docs.python.org/2/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><strong>Default parameter values are evaluated when the function definition is
  executed</strong>. This means that the expression is evaluated once, when the
  function is defined, and that the same “pre-computed” value is used
  for each call.</p>
</blockquote>
<p><strong>Read:</strong> Using <code>mutable</code> objects as default value can <a href="https://stackoverflow.com/questions/1132941/least-astonishment-in-python-the-mutable-default-argument">lead to unexpected results.</a></p>
<p>If you want to access a global value then simply do:</p>
<pre><code>def func():
    return x**2
</code></pre>
<p>Or better pass it explicitly:</p>
<pre><code>def func(y):
   return y**2
</code></pre>
<p><a href="http://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow noreferrer">Another reason why not to use global variables inside function</a>:</p>
<pre><code>&gt;&gt;&gt; x = 10
&gt;&gt;&gt; def func():
...     print x
...     x = 5
...     
&gt;&gt;&gt; func()
Traceback (most recent call last):
    func()
  File "&lt;ipython-input-5-ab38e6cadf6b&gt;", line 2, in func
    print x
UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>
<hr/>
<p>Using <code>classes</code>:</p>
<pre><code>class A:
    x = 5
    @staticmethod
    def func():
        return A.x**2
...     
&gt;&gt;&gt; A.func()
25
&gt;&gt;&gt; A.x = 10
&gt;&gt;&gt; A.func()
100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just reference the global variable directly, instead of using it as the default value of an argument.</p>
<pre><code>def func():
    return x ** 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The default value of y is set during function definition, not when running it. So default value for <code>y</code> is set to value of <code>x</code> on <code>def</code> line.</p>
<p>This should work:</p>
<pre><code>def func(y=None):
    if y is None:
        y = x
    return y ** 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generally in python Keyword Arguments are always assigned a value and you cant change that assigned value . So in your code</p>
<pre><code>x=5
def func(y = x):
    return y ** 2
print func()
x=4
print func()
</code></pre>
<p>For the keyword argument y the value of x i.e 5 is assigned and we cant change that value. So even if you change the value of x you will get the same output as 25</p>
<p>To solve this the function might directly access the global variable and return the value like the below code</p>
<pre><code>x=5
def func():
   return x ** 2
print func()
x=4
print func()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is the correct way to do this</p>
<pre><code>x=5
def foo():
    global x
    return x**2
</code></pre>
<p>Or you can simply do it like this</p>
<pre><code>x=5
def foo():
    return x**2
</code></pre>
<p>In this case the same global variable is referenced if it exists.</p>
</div>
<span class="comment-copy">But is there a way to achieve what I'm trying to do?</span>
<span class="comment-copy">@deadfire19 I've updated my answer.</span>
<span class="comment-copy">Thanks, I didn't know you could reference global variables in functions. Would +rep but I can't.</span>
<span class="comment-copy">@deadfire19 Yes you can access global variables inside a function, but usually its not recommended. It's better to pass it explicitly.</span>
<span class="comment-copy">Oh didn't know you can do that. Can't +rep yet but thanks!</span>
<span class="comment-copy">You're the questioner, you don't need to upvote, just accept the answer.</span>
<span class="comment-copy">Ah, sorry, first time using this site.</span>
