<div class="post-text" itemprop="text">
<p>how should be valid domain name regex which full fill following criteria.</p>
<ol>
<li>each label max 63 characters long minimum 1 characters</li>
<li>contains numbers, letters and '-', But</li>
<li>should not start and end with '-'</li>
<li>max domain name length 255 characters minimum 1.</li>
</ol>
<p>for example</p>
<p>some of valid combinations:</p>
<pre><code>a
a.com
aa-bb.b
</code></pre>
<p>I created this <code>^(([a-z0-9]){1,63}\.?){1,255}$</code></p>
<p>But currently its not validating '-' part as required (it's , missing)</p>
<p>Is there any way? </p>
<p>plz correct me if I am wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>and mandatory to end with '.' :
Here i found the solution </p>
<pre><code>"^(((([A-Za-z0-9]+){1,63}\.)|(([A-Za-z0-9]+(\-)+[A-Za-z0-9]+){1,63}\.))+){1,255}$"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this:</p>
<pre><code>^(([a-zA-Z0-9\-]{1,63}\.?)+(\-[a-zA-Z0-9]+)){1,255}$
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using regex try to look at <code>urlparse</code> </p>
<p><a href="http://docs.python.org/library/urlparse.html" rel="nofollow">http://docs.python.org/library/urlparse.html</a></p>
<p>It's fairly simple to learn and a lot better and comfortable to use.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use regex for parsing domain names, use <a href="http://docs.python.org/3/library/urllib.parse.html" rel="nofollow">urllib.parse</a>.</p>
<p>If you need to find valid domain names in HTML then split the text of the page with a regex <code>[ &lt;&gt;]</code> and then parse each resulting string with urllib.parse.</p>
</div>
<div class="post-text" itemprop="text">
<p>TRy this:</p>
<pre><code>^(([a-z0-9]\-*[a-z0-9]*){1,63}\.?){1,255}$
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the | operator in your RE followed by the '-'.. ensure you escape the literal '-' with \</p>
</div>
<div class="post-text" itemprop="text">
<p>This expression should meet all the requirements:
<code>
^(?=.{1,255}$)(?!-)[A-Za-z0-9\-]{1,63}(\.[A-Za-z0-9\-]{1,63})*\.?(?&lt;!-)$
</code></p>
<ul>
<li>uses lookahead for total character length</li>
<li>domain can optionally end with a <code>.</code> </li>
</ul>
</div>
<span class="comment-copy">use urlparse! Regex is not the answer to everything.</span>
<span class="comment-copy">It doesn't have to end with a period. Mind explaining? A period normally comes in the last 2-4 characters of the domain, before the domain extension.</span>
<span class="comment-copy">Yes, It is optional to have period at end. Needs improvement accordingly.</span>
<span class="comment-copy">I decided to go with this: <a href="http://stackoverflow.com/questions/2532053/validate-a-hostname-string" title="validate a hostname string">stackoverflow.com/questions/2532053/validate-a-hostname-string</a></span>
<span class="comment-copy">urllib.parse will not ensure a valid domain name.  the <code>netloc</code> could contain "localhost" or a false-positive of a malformed url ( e.g. "<a href="http://example" rel="nofollow noreferrer">example</a>", "<a href="http://malformed" rel="nofollow noreferrer">malformed</a>" )</span>
<span class="comment-copy">Thanks, I tried this but its not validation - at end.</span>
