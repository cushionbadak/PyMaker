<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/576169/understanding-python-super-with-init-methods">Understanding Python super() with __init__() methods [duplicate]</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I can not understand the usage of <code>super</code> term here? Is it a class or function or something else ?</p>
<p>From the code below:</p>
<pre><code>class Child(SomeBaseClass):
    def __init__(self):
        super(Child, self).__init__()
</code></pre>
<p>Can someone please explain this line of code below ?</p>
<pre><code>super(Child, self).__init__()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>super(Child, self).__init__() &lt;=&gt; SomeBaseClass.__init__(self)
</code></pre>
<p>It provides a nice shorthand for calling a method on the parent class without having to type it explicitly, which can be long (programmers are lazy) and error-prone. If you change your code later such that <code>Child</code> is not a <code>SomeBaseClass</code> anymore but a <code>AnotherBaseClass</code> instead, you don't have to change the call to the constructor (which is itself required as it will <em>not</em> be called by default)</p>
<p>Note that the case here is obvious, since there is only one base class, but in case where there is an ambiguity (e.g. two or more parent classes), mro prevails (as you would expect I suppose, since that's what it is about):</p>
<pre><code>&gt;&gt;&gt; class A(object):
...     def __init__(self):
...         print "A"
... 
&gt;&gt;&gt; class B(object):
...     def __init__(self):
...         print "B"
... 
&gt;&gt;&gt; class C(A, B):
...     def __init__(self):
...         super(C, self).__init__()
...             print "C"
... 
&gt;&gt;&gt; c = C()
A
C
&gt;&gt;&gt; class D(B, A):
...     def __init__(self):
...         super(D, self).__init__()
...             print "D"
... 
&gt;&gt;&gt; d = D()
B
D
&gt;&gt;&gt; class CC(A, B):
...     def __init__(self):
...         B.__init__(self) # Explicitely call B and not A !
...         print "CC"
... 
&gt;&gt;&gt; cc = CC()
B
CC
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>super(Child, self).__init__()
</code></pre>
<p>Means: Call the method <code>__init__</code> of the base type of <code>Child</code> with the instance <code>self</code>. So in your case, this would be equivalent to <code>SomeBaseClass.__init__(self)</code>. But using <code>super</code> lets you avoid explicitely naming the base type again and also works for multiple inheritance.</p>
<p>So <a href="http://docs.python.org/2/library/functions.html#super" rel="nofollow"><code>super(t, self)</code></a> basically means get the base type(s) of the type <code>t</code>, and bind it to the instance <code>self</code> so you can call methods directly.</p>
<p>Note that in Python 3, the arguments to <a href="http://docs.python.org/3/library/functions.html#super" rel="nofollow"><code>super()</code></a> are optional, so <code>super().__init__()</code> works.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__init__()</code> is the constructor in python, and <code>super</code> is the parent class which you inherit your class from.</p>
<pre><code>class Child(SomeBaseClass):
    def __init__(self):
        super(Child, self).__init__()
</code></pre>
<p>For this code whenever you insatiate a new object of type <code>Child</code> it will call its constructor <code>__init__()</code> which in its turn calls <code>SomeBaseClass.__init__().</code></p>
</div>
<span class="comment-copy">Just to add, you can find out more in the documentation here: <a href="http://docs.python.org/2/library/functions.html" rel="nofollow noreferrer">docs.python.org/2/library/functions.html</a>. It is located farther down on the page.</span>
<span class="comment-copy">so why we overriding <b>init</b> ?</span>
<span class="comment-copy">you are not overriding it, every class has its on <code>__init__()</code> and never inherit it from super or give it to a child. it's like a constructor in c++ or java. What are you doing here is calling the base class init from child class init.</span>
