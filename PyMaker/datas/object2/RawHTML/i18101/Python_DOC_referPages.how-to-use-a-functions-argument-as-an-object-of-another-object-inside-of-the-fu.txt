<div class="post-text" itemprop="text">
<p>I've been stuck on this for a long time (like literally weeks), I've completed everything else in the code but this. I've also researched a lot but can't get anywhere near the solution. The only reason I waited a week to come here is because I wanted to solve this myself, but now, I give up!</p>
<p>Now, suppose I have the following code:</p>
<pre><code>class test:
  def meth1(self, obj):
    self.hello = {}
    return self.hello.obj()
  def meth2(self):
      test.meth1(self, 'keys')
</code></pre>
<p>Now, when I create an instance and try to call the method <code>meth2</code>like this:</p>
<pre><code>x = test()
x.meth2()
</code></pre>
<p>It gives me an error for obvious reasons. How can I get it do what I want-- pass an argument to a function and use that argument as an object of another object? </p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you want <a href="http://docs.python.org/3/library/functions.html#getattr" rel="nofollow"><code>getattr()</code></a>:</p>
<pre><code>def meth1(self, obj):
    self.hello = {}
    return getattr(self.hello, obj)()
</code></pre>
<p><code>getattr(a, b)</code> is equivalent to <code>a.b</code> (where <code>b</code> in the second case is the string that the <code>b</code> of the first case holds). In this case, <code>a</code> is <code>self.hello</code> and <code>b</code> is <code>obj</code>. From your snippet, it looks like you want to <em>call</em> the <code>obj</code> attribute as opposed to returning it directly, which is why we have a <code>()</code> at the end.</p>
<hr/>
<pre><code>&gt;&gt;&gt; class test:
...     def meth1(self, obj):
...         self.hello = {}
...         return getattr(self.hello, obj)()
...     def meth2(self):
...         return test.meth1(self, 'keys')
... 
&gt;&gt;&gt; x = test()
&gt;&gt;&gt; x.meth2()
[]
</code></pre>
</div>
<span class="comment-copy">OK! I had actually forgot about getattr because I was never able to <i>get</i> it properly...? So, would you mind explaining me what's going on with that code?  I mean, I know that it's similar to saying <code>self.hello.obj</code> but what difference does it make?</span>
<span class="comment-copy">@AkshatTripathi Sure, I added a small explanation. Let me know if there is anything you still don't understand.</span>
<span class="comment-copy">But what difference does it make? The code you wrote: <code>getattr(self.hello, obj)()</code> is equivalent to <code>self.hello.obj()</code>, still, when I try the latter one, it raises an exception, why so?</span>
<span class="comment-copy">@AkshatTripathi They're not exactly equivalent in the sense you're thinking of. <code>obj</code> is a string here, and we say it's equivalent to <code>self.hello.*obj*()</code> where <code>*obj*</code> is replaced by the string <code>obj</code> holds. So, if <code>obj</code> is <code>'keys'</code>, then <code>getattr(self.hello, obj)</code> would be <code>self.hello.keys</code>. You wrote <code>self.hello.obj()</code>, which has <i>nothing</i> to do with the <code>obj</code> argument; it just tried to call the <code>obj</code> attribute of <code>self.hello</code>, and fails because there isn't one.</span>
<span class="comment-copy">Got it, life saver! Thanks so much. :)</span>
