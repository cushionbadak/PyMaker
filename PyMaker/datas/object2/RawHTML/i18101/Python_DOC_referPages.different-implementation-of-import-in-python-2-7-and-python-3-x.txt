<div class="post-text" itemprop="text">
<p>In Python 3 I got something like this to work:</p>
<pre><code>def aFunctionImportingAndCallingAnotherFunction(functionName, args):
    packageString = "a_nested_package.to_be_imported.at_run_time"
    _temp = __import__(packageString, globals(), locals(), [functionName], 0)
    function = eval("_temp." + functionName)
    return function(args)
</code></pre>
<p>in Python 2.7 I get an error that the function I am passing in with <code>functionName</code> does not exist. </p>
<p>In this example the package <code>a_nested_package</code> is in <code>sys.path</code>, it has a package <code>to_be_imported</code>, which has a package <code>at_run_time</code>. All packages have <code>__init__.py</code> files.</p>
<p>I tried:</p>
<ul>
<li>playing with the level argument (I tried -1 and 1)</li>
<li>removing <code>a_nested_package</code> from <code>packageString</code></li>
<li>removing <code>a_nested_package</code> from <code>packageString</code> and replacing it with <code>.</code></li>
</ul>
<p>Also, if this is completely the wrong approach to do run-time imports of functions, please let me know! I am pretty new to Python (coming from C++, PHP and Java)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/2/library/importlib.html" rel="nofollow"><code>importlib</code> module</a> to dynamically import modules, then use <code>getattr()</code> to retrieve a specific name from that module:</p>
<pre><code>import importlib

def aFunctionImportingAndCallingAnotherFunction(functionName, args):
    module = importlib.import_module(packageString)
    func = getattr(module, functionname)
    return func(*args)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__import__</code> works just like the <code>import</code> statement.  (For good reason.)</p>
<p>When you do this:</p>
<pre><code>import foo.bar.baz
</code></pre>
<p>You don't get a <code>baz</code> object in your file; you get <code>foo</code>!  Likewise, this:</p>
<pre><code>__import__('foo.bar.baz')
</code></pre>
<p>returns the <code>foo</code> module, but guarantees that it's been populated with <code>bar</code>.</p>
<p>So in your example, <code>__import__</code> is returning <code>a_nested_package</code>, and you have to traverse the rest of the path yourself.  Which sucks, and is why <code>importlib</code> is useful.  :)</p>
</div>
<span class="comment-copy">Why are you not using the <a href="http://docs.python.org/2/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code> module</a> instead?</span>
<span class="comment-copy">What are you really trying to do here? import a module dynamically, or just pick an object <i>inside</i> the imported module dynamically?</span>
<span class="comment-copy">@MartijnPieters: because I didn't know about it;-) I'll give that a quick try.</span>
<span class="comment-copy">In other words, what is the dynamic part here, the module name, or the function name?</span>
<span class="comment-copy">@MartijnPieters: I am importing a package that is only known at runtime (I know, this sounds awful, but I am trying to write a way for people to write plugins for my application.) Then from that package I am calling a known function with known arguments.</span>
<span class="comment-copy">@DudeOnRock: ah, no, disregard that remark, that's an explanation for things working the other way around. I just tested this on Python 2.7 and 3.3 and it works fine for me on both.</span>
<span class="comment-copy">That is good to know, that might mean that somehow my <code>sys.path</code> is not the same in both versions. Thanks a bunch!</span>
<span class="comment-copy">But this is the same in both python 2.7 and 3.x, or am I mistaken?</span>
<span class="comment-copy">it's the same.  the only difference is that <code>level</code> defaults to -1 in 2.7 and thus tries relative imports, which 3.3+ doesn't support.  compare the docs yourself: <a href="http://docs.python.org/2/library/functions.html#__import__" rel="nofollow noreferrer">2.7</a>, <a href="http://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer">3.3</a></span>
<span class="comment-copy">Cool, thanks for clarifying that though!</span>
