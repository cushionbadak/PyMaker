<div class="post-text" itemprop="text">
<p>I'm using  <code>iter(range())</code>, but I also need to use the results twice, assuming <code>j=iter(range(n,2n)</code>)</p>
<p><code>next(j)</code> would be n, but then I need that certain <code>next(j)</code> again without stepping forward, Is that possible without further complications?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can easily write a generator which repeats each element of a given iterator twice:</p>
<pre><code>def repeat_iter(iter, n = 2):
    for x in iter:
        for i in range(n):
            yield x

for x in repeat_iter(range(n)):
    print x
</code></pre>
<p>If what your use case requires is <em>looking ahead</em>, see <a href="https://stackoverflow.com/questions/2425270/how-to-look-ahead-one-element-in-a-python-generator">this question</a> for some nice solutions.</p>
</div>
<div class="post-text" itemprop="text">
<p>One approach is to explicitly get two iterators, using <code>itertools.tee</code>:</p>
<pre><code>iter1,iter2 = itertools.tee(iter(range(5,10)))

next(iter1)
Out[15]: 5

next(iter2)
Out[16]: 5
</code></pre>
<p>This can be more flexible depending on what you're doing, but the downside is that you need to make sure you're going 1-for-1 consuming from both iterators.</p>
<p>But honestly I don't think I've ever found myself doing this with <code>range</code>.  When you assign <code>next()</code> to a variable, you can access it as many times as you want (<em>a la</em> <code>for i in range</code>), so...</p>
</div>
<div class="post-text" itemprop="text">
<p>or You can use generator statement</p>
<pre><code>for i in (j for j in range(n, 2 * n) for k in range(2)):
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>zip</code>:</p>
<pre><code>for a, b in zip(range(...), range(...)):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe <a href="https://stackoverflow.com/a/19575221/923794">shx2's answer</a> to be the correct answer to the question.</p>
<p>However, in the case where</p>
<ul>
<li>you only need to reuse some of the values, and do not know at the time the iterator is created which ones you need to reappear, or </li>
<li>some of the values may have to be repeated more often than others,</li>
</ul>
<p>then here's a different generator that can react on feedback via the <a href="http://docs.python.org/3/reference/expressions.html#generator.send" rel="nofollow noreferrer"><code>send()</code> builtin</a>.</p>
<pre><code>def iter_with_standstill(iter):
    standstill = False
    for x in iter:
        while True:
            pause = yield x
            if pause is not None:
                standstill = pause
                yield None
            if not standstill:
                break
</code></pre>
<p>The trick used is that any call of <code>generator.send(value)</code> will send back the <code>value</code> to the generator which receives it as the result of <code>yield</code>. As any <code>send()</code> will cause the generator to also immediately run up to the next <code>yield()</code>, we <code>yield(None)</code> here to give back control immediately to the calling code. This method makes <code>send()</code> to truly operate as a one way operation.</p>
<p>Here's how to use it:</p>
<pre><code>orig = range(10)
paused = iter_with_standstill(orig)

waiting = None
for x in paused:
    if x in [4,7]:
        if waiting is None:
            waiting = 3
        waiting -= 1
        if waiting &gt; 0:
            paused.send(True)
        else:
            paused.send(False)
            waiting = None
    print(x, end=' ')
print()
</code></pre>
<p>The whole point of the <code>waiting</code> variable is to pause at the values 4 and 7, and re-iterating those values up to a total of 3 times. The output looks like:</p>
<pre><code>0 1 2 3 4 4 4 5 6 7 7 7 8 9 
</code></pre>
</div>
