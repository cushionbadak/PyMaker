<div class="post-text" itemprop="text">
<p>I usually use the following pattern (as mentioned in <a href="https://stackoverflow.com/questions/11764900/using-locals-and-format-method-for-strings-are-there-any-caveats">this question</a>):</p>
<pre><code>a=1
s= "{a}".format(**locals())
</code></pre>
<p>I think it's a great way to write easily readable code.</p>
<p>Sometimes it's useful to "chain" string formats, in order to "modularize" the creation of complex strings:</p>
<pre><code>a="1"
b="2"
c="{a}+{b}".format(**locals())
d="{c} is a sum".format(**locals())
#d=="1+2 is a sum"
</code></pre>
<p>Pretty soon, the code is pestered with <code>X.format(**locals())</code>. 
To solve this problem, I tried to create a lambda:</p>
<pre><code>f= lambda x: x.format(**locals())
a="1"
b="2"
c= f("{a}+{b}")
d= f("{c} is a sum")
</code></pre>
<p>but this throws a KeyError, since <code>locals()</code> are the lambda's locals.</p>
<p>I also tried to apply the format only on the last string:</p>
<pre><code>a="1"
b="2"
c="{a}+{b}"
d="{c} is a sum".format(**locals())
#d=="{a}+{b} is a sum"
</code></pre>
<p>But this doesn't work, since python only formats once.
Now, I <em>could</em> write a function that formats repeatedly until there's nothing more to do:</p>
<pre><code>def my_format( string, vars ):
    f= string.format(**vars)
    return f if f==string else my_format(f, vars)
</code></pre>
<p>but I'm wondering: is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>f = lambda x, l=locals(): x.format(**l)</code> appears to work... </p>
<p>and if you wanted a version that is a little more all-encompassing (and probably a lot slower):</p>
<pre><code>fg = lambda x, l=locals(), g=globals(): x.format(**dict(g.items() + l.items()))
</code></pre>
<p>will find the symbols in either locals or globals. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you only need to do this within the function scope as a local shortcut, the following will work:</p>
<pre><code>def formatter(fmt, loc=locals()):
    return fmt.format(**loc)
</code></pre>
<p>However, this will bind the value returned by <code>locals()</code> at the time of function declaration, rather than execution, so it will not be updated as values change, nor will it be useful when called from any other scope.</p>
<p>If you want to get access to the calling method's <code>locals</code>, you need to <code>inspect</code> the call stack (<a href="http://docs.python.org/2/library/inspect.html" rel="nofollow">http://docs.python.org/2/library/inspect.html</a>)</p>
<pre><code>import inspect

def formatter(fmt):
    parent = inspect.stack()[1][0] # 1 = the previous frame context
                                   # 0 = the frame object
    return fmt.format(**parent.f_locals)
</code></pre>
<p>Note that this may not work for implementations of python that are not CPython.</p>
<p>Now you can do:</p>
<pre><code>a = "1"
b = "2"
c = formatter("{a}+{b}")
d = formatter("{c} is a sum")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Starting with Python 3.6 the effect of <code>**locals()</code> is already included in <code>string#format</code> or rather "formatted string literals".</p>
<p>See also <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498</a>
and <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">Python 3.6 release notes</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not a one-liner, but it works:</p>
<pre><code>def fmt(s, l=locals()):
    while '{' in s:
        s = s.format(**l)
    return s

a="1"
b="2"
c="{a}+{b}"
d="{c} is a sum"

print fmt(d)  # 1+2 is a sum
</code></pre>
<p>Here's a one line (and slightly less efficient) recursive version:</p>
<pre><code>fmt = lambda s, l=locals(): fmt(s.format(**l), l=l) if '{' in s else s
</code></pre>
</div>
<span class="comment-copy">You probably want locals to override globals. Currently, you have it the other way round, since later arguments to dict win.</span>
<span class="comment-copy">good point... i'll make that change.</span>
<span class="comment-copy">actually, this is true sometimes, but not always...  it looks like locals() actually returns a pointer to the dict value of 'locals', which seems to change. You can do the following experiments: <code>f = locals(); x = 1; g = locals(); f == g</code>, which will be True, even though you've modified a local value between f and g. Also: <code>def fn(x, l=locals()): print l[x]; x = 2; fn('x'); x = 3; fn('x')</code> will print 2, then 3. It seems like it should be true sometimes, so it's a good comment, but there seem to be a lot of practical cases where you can ignore it.</span>
