<div class="post-text" itemprop="text">
<p>Recently I'm writing a Python program, and it has a bug, I spent more than an hour solving this and finally it turned out that the regular expression was the problem, I didn't know that there <code>MUST</code> be no <code>space</code> between <code>m</code> and <code>n</code> in pattern <code>M{m,n}</code>, and I wrote it as <code>M{m, n}</code>, and the code couldn't be executed. </p>
<p>I checked <a href="http://docs.python.org/3/library/re.html" rel="nofollow">http://docs.python.org/3/library/re.html</a> about the <code>{m,n}</code> part, it didn't say that you can't put a space between <code>m</code> and <code>n</code> in <code>{m,n}</code>. Why is that? Is there other tiny things that the documents don't mention and I should know about the regular expressions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You won't find any documents noting this, but this stems from the nature of regular expressions, because every character in the regular expression has special meaning and it could have different meanings depending on the context where it is used.</p>
<p>That's why some flavors support a flag usually called <a href="http://www.regular-expressions.info/freespacing.html" rel="nofollow">Free Spacing Mode</a>, that allows you to write regular expressions with spaces to improve readability and maintainability by allowing you to also include comments inside the regular expression itself.</p>
<p><strong>Summary:</strong> Every character and symbol inside a regular expression matters, so don't put something assuming it would mean nothing or it would pass along just like that.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need white space to be ignored you can use the verbose option when usings regex as described here:
<a href="http://docs.python.org/3/library/re.html?highlight=single%20line%20mode#re.VERBOSE" rel="nofollow">http://docs.python.org/3/library/re.html?highlight=single%20line%20mode#re.VERBOSE</a></p>
<p>e.g. </p>
<p><code>re.compile(r"\d{3,     5}", re.X)</code></p>
<p>is treated the same as</p>
<p><code>re.compile(r"\d{3,5}")</code></p>
</div>
<div class="post-text" itemprop="text">
<p>That's the correct behavior.  Range quantifiers (<code>{n,m}</code>), like character classes (<code>[xyz]</code>), are considered atomic units; free-spacing mode has no effect on them.  In a character class a space character still matches a literal space, and in a range quantifier it's still a syntax error.  For example, Java treats <code>{3, 5}</code> as a syntax error because the braces aren't escaped, but in Python it matches the literal sequence <code>{3, 5}</code>.</p>
</div>
<span class="comment-copy">Usually the docs only list the things that you can do, and do not try to iterate all the possible ways of doing it wrong. ;-)</span>
<span class="comment-copy">I think the problem CodyChan is describing is that the documentation states, when using the verbose flag, that "Whitespace within the pattern is ignored, except when in a character class or preceded by an unescaped backslash". The whitespace in his example is neither escaped or in a character class, it is part of a quantifier. So it appears the documentation is wrong.</span>
<span class="comment-copy">@JonM: Qtax is right; even in free-spacing mode the whitespace can only occupy spots where it would have been legal to begin with.  By your reasoning, <code>(?:foo)</code> could be written as <code>(? :foo)</code> in free-spacing mode and still be recognized as a non-capturing group.</span>
<span class="comment-copy">@Alan Moore - Not my reasoning. I'm saying the python documentation is misleading. Besides your example <code>(?x)(? :foo)</code> IS valid in some implementations of regex (Java for example).</span>
<span class="comment-copy">Java is notoriously buggy when it comes to free-spacing mode, but I hadn't realized how bad it was until just now.  It lets you put whitespace anywhere you please.  Free-spacing mode or not, <code>(? :...)</code> and <code>{2, 4}</code> should always be treated as syntax errors, and the space in <code>[123 xyz]</code> should always match a space character.</span>
<span class="comment-copy">I did put re.VERBOSE(or re.X) at the end of re.complile like yours in the first place, but the space still did cause the problem.</span>
<span class="comment-copy">Ahhh yes, you're right! I have just tested it and it doesn't like spaces in a range quantifier despite verbose mode as you have just said. I didn't realise from your question that you had already attempting using the verbose mode.</span>
<span class="comment-copy">Just let @JonM know that re.VERBOSE is used for ignoring the whitespace(such as the whitespace in "(D?C{0,3}) (XL|L?X{0,3})", not the space in {0, 3}) and comments, check the detail at <a href="http://www.diveinto.org/python3/regular-expressions.html#verbosere" rel="nofollow noreferrer">diveinto.org/python3/regular-expressions.html#verbosere</a></span>
