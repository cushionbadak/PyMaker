<div class="post-text" itemprop="text">
<p>I've got a Python program where two variables are set to the value <code>'public'</code>. In a conditional expression I have the comparison <code>var1 is var2</code> which fails, but if I change it to <code>var1 == var2</code> it returns <code>True</code>.</p>
<p>Now if I open my Python interpreter and do the same "is" comparison, it succeeds.</p>
<pre><code>&gt;&gt;&gt; s1 = 'public'
&gt;&gt;&gt; s2 = 'public'
&gt;&gt;&gt; s2 is s1
True
</code></pre>
<p>What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>is</code> is identity testing, <code>==</code> is equality testing. what happens in your code would be emulated in the interpreter like this:</p>
<pre><code>&gt;&gt;&gt; a = 'pub'
&gt;&gt;&gt; b = ''.join(['p', 'u', 'b'])
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</code></pre>
<p>so, no wonder they're not the same, right?</p>
<p>In other words: <code>is</code> is the <code>id(a) == id(b)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Other answers here are correct: <code>is</code> is used for <em>identity</em> comparison, while <code>==</code> is used for <em>equality</em> comparison. Since what you care about is equality (the two strings should contain the same characters), in this case the <code>is</code> operator is simply wrong and you should be using <code>==</code> instead.</p>
<p>The reason <code>is</code> works interactively is that (most) string literals are <a href="https://en.wikipedia.org/wiki/String_interning" rel="noreferrer">interned</a> by default. From Wikipedia:</p>
<blockquote>
<p>Interned strings speed up string
  comparisons, which are sometimes a
  performance bottleneck in applications
  (such as compilers and dynamic
  programming language runtimes) that
  rely heavily on hash tables with
  string keys. Without interning,
  checking that two different strings
  are equal involves examining every
  character of both strings. This is
  slow for several reasons: it is
  inherently O(n) in the length of the
  strings; it typically requires reads
  from several regions of memory, which
  take time; and the reads fills up the
  processor cache, meaning there is less
  cache available for other needs. With
  interned strings, a simple object
  identity test suffices after the
  original intern operation; this is
  typically implemented as a pointer
  equality test, normally just a single
  machine instruction with no memory
  reference at all.</p>
</blockquote>
<p>So, when you have two string literals (words that are literally typed into your program source code, surrounded by quotation marks) in your program that have the same value, the Python compiler will automatically intern the strings, making them both stored at the same memory location.  (Note that this doesn't <em>always</em> happen, and the rules for when this happens are quite convoluted, so please don't rely on this behavior in production code!)</p>
<p>Since in your interactive session both strings are actually stored in the same memory location, they have the same <em>identity</em>, so the <code>is</code> operator works as expected.  But if you construct a string by some other method (even if that string contains <em>exactly</em> the same characters), then the string may be <em>equal</em>, but it is not <em>the same string</em> -- that is, it has a different <em>identity</em>, because it is stored in a different place in memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>is</code> keyword is a test for object identity while <code>==</code> is a value comparison.</p>
<p>If you use <code>is</code>, the result will be true if and only if the object is the same object. However, <code>==</code> will be true any time the values of the object are the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>One last thing to note, you may use the intern function to ensure that you're getting a reference to the same string:</p>
<pre><code>&gt;&gt;&gt; a = intern('a')
&gt;&gt;&gt; a2 = intern('a')
&gt;&gt;&gt; a is a2
True
</code></pre>
<p>As pointed out above, you should probably not be doing is to determine equality on strings.  But this may be helpful to know if you have some kind of weird requirement to use <code>is</code>.</p>
<p>Note that the intern function got moved from being a built in function to being in the module <code>sys</code> for Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>is</code> is identity testing, <code>==</code> is equality testing. What this means is that <code>is</code> is a way to check whether two things are the <em>same</em> things, or just equivalent. </p>
<p>Say you've got a simple <code>person</code> object. If it is named 'Jack' and is '23' years old, it's equivalent to another 23yr old Jack, but its not the same person.</p>
<pre><code>class Person(object):
   def __init__(self, name, age):
       self.name = name
       self.age = age

   def __eq__(self, other):
       return self.name == other.name and self.age == other.age

jack1 = Person('Jack', 23)
jack2 = Person('Jack', 23)

jack1 == jack2 #True
jack1 is jack2 #False
</code></pre>
<p>They're the same age, but they're not the same instance of person. A string might be equivalent to another, but it's not the same object.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a side note, but in idiomatic python, you will often see things like:</p>
<pre><code>if x is None: 
    # some clauses
</code></pre>
<p>This is safe, because <a href="http://docs.python.org/library/stdtypes.html#the-null-object" rel="noreferrer">there is guaranteed to be one instance of the Null Object (i.e., None)</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're not sure what you're doing, use the '=='.
If you have a little more knowledge about it you can use 'is' for known objects like 'None'.</p>
<p>Otherwise you'll end up wondering why things doesn't work and why this happens:</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; b is a
True
&gt;&gt;&gt; a = 6000
&gt;&gt;&gt; b = 6000
&gt;&gt;&gt; b is a
False
</code></pre>
<p>I'm not even sure if some things are guaranteed to stay the same between different python versions/implementations.</p>
</div>
<div class="post-text" itemprop="text">
<p>From my limited experience with python, <code>is</code> is used to compare two objects to see if they are the same object as opposed to two different objects with the same value.  <code>==</code> is used to determine if the values are identical. </p>
<p>Here is a good example:</p>
<pre><code>&gt;&gt;&gt; s1 = u'public'
&gt;&gt;&gt; s2 = 'public'
&gt;&gt;&gt; s1 is s2
False
&gt;&gt;&gt; s1 == s2
True
</code></pre>
<p><code>s1</code> is a unicode string, and <code>s2</code> is a normal string.  They are not the same type, but are the same value.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it has to do with the fact that, when the 'is' comparison evaluates to false, two distinct objects are used. If it evaluates to true, that means internally it's using the same exact object and not creating a new one, possibly because you created them within a fraction of 2 or so seconds and because there isn't a large time gap in between it's optimized and uses the same object.</p>
<p>This is why you should be using the equality operator <code>==</code>, not <code>is</code>, to compare the value of a string object.</p>
<pre><code>&gt;&gt;&gt; s = 'one'
&gt;&gt;&gt; s2 = 'two'
&gt;&gt;&gt; s is s2
False
&gt;&gt;&gt; s2 = s2.replace('two', 'one')
&gt;&gt;&gt; s2
'one'
&gt;&gt;&gt; s2 is s
False
&gt;&gt;&gt; 
</code></pre>
<p>In this example, I made s2, which was a different string object previously equal to 'one' but it is not the same object as <code>s</code>, because the interpreter did not use the same object as I did not initially assign it to 'one', if I had it would have made them the same object.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe that this is known as "interned" strings. Python does this, so does Java, and so do C and C++ when compiling in optimized modes.</p>
<p>If you use two identical strings, instead of wasting memory by creating two string objects, all interned strings with the same contents point to the same memory.</p>
<p>This results in the Python "is" operator returning True because two strings with the same contents are pointing at the same string object. This will also happen in Java and in C.</p>
<p>This is only useful for memory savings though. You cannot rely on it to test for string equality, because the various interpreters and compilers and JIT engines cannot always do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am answering the question even though the question is to old because no answers above quotes the language reference</p>
<p>Actually the is operator checks for identity and == operator checks for equality,</p>
<p><strong><em>From Language Reference:</em></strong></p>
<p>Types affect almost all aspects of object behavior. Even the importance of object identity is affected in some sense: for immutable types, operations <strong>that compute new values may actually return a reference to any existing object with the same type and value, while for mutable objects this is not allowed</strong>. E.g., after a = 1; b = 1, a and b may or may not refer to the same object with the value one, depending on the implementation, but after c = []; d = [], c and d are guaranteed to refer to two different, unique, newly created empty lists. (Note that c = d = [] assigns the same object to both c and d.)</p>
<p>so from above statement we can infer that the strings which is an immutable type may fail when checked with "is" and may checked succeed when checked with "is"</p>
<p>The same applies for int,tuple which are also immutable types</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>==</code> operator test value equivalence. The <code>is</code> operator tests object identity, Python tests whether the two are really the same object(i.e., live at the same address in memory).</p>
<pre><code>&gt;&gt;&gt; a = 'banana'
&gt;&gt;&gt; b = 'banana'
&gt;&gt;&gt; a is b 
True
</code></pre>
<p>In this example, Python only created one string object, and both <code>a</code> and <code>b</code> refers to it. The reason is that Python internally caches and reuses some strings as an optimization, there really is just a string 'banana' in memory, shared by a and b; To trigger the normal behavior, you need to use longer strings:</p>
<pre><code>&gt;&gt;&gt; a = 'a longer banana'
&gt;&gt;&gt; b = 'a longer banana'
&gt;&gt;&gt; a == b, a is b
(True, False)
</code></pre>
<p>When you create two lists, you get two objects:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [1, 2, 3]
&gt;&gt;&gt; a is b
False
</code></pre>
<p>In this case we would say that the two lists are equivalent, because they have the same elements, but not identical, because they are not the same object. If two objects are identical, they are also equivalent, but if they are equivalent, they are not necessarily identical.</p>
<p>If <code>a</code> refers to an object and you assign <code>b = a</code>, then both variables refer to the same object: </p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>is</code> is identity testing, <code>==</code> is equality testing (see <a href="https://docs.python.org/3/library/stdtypes.html#comparisons" rel="nofollow noreferrer">Python Documentation</a>). </p>
<p>In most cases, if <code>a is b</code>, then <code>a == b</code>. But there are exceptions, for example: </p>
<pre><code>&gt;&gt;&gt; nan = float('nan')
&gt;&gt;&gt; nan is nan
True
&gt;&gt;&gt; nan == nan
False
</code></pre>
<p>So, you can only use <code>is</code> for identity tests, never equality tests.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>is</code> will compare the memory location. It is used for object-level comparison.</p>
<p><code>==</code> will compare the variables in the program. It is used for checking at value level. </p>
<p><code>is</code> checks for address level equivalence</p>
<p><code>==</code> checks for value level equivalence</p>
</div>
<span class="comment-copy">I don't know anything about Python, but is it possible that one is comparing values while the other is comparing objects?</span>
<span class="comment-copy">see: <a href="http://stackoverflow.com/questions/1392433/python-why-is-hello-is-hello" title="python why is hello is hello">stackoverflow.com/questions/1392433/…</a></span>
<span class="comment-copy">This problem also occurs when you read a console input via e.g.: <code>input = raw_input("Decide (y/n): ")</code>. In this case an input of "y" and <code>if input == 'y':</code>will return "True" while <code>if input is 'y':</code> will return False.</span>
<span class="comment-copy">This blog provides a far more complete explanation than any answer <a href="http://guilload.com/python-string-interning/" rel="nofollow noreferrer">guilload.com/python-string-interning</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python">Is there a difference between `==` and `is` in Python?</a></span>
<span class="comment-copy">ahh same as eq? vs equal? in scheme, got it.</span>
<span class="comment-copy">Or <code>==</code> vs <code>.equals()</code> in Java. The best part is that the Python <code>==</code> is not analogous to the Java <code>==</code>.</span>
<span class="comment-copy">@Крайст: there is only a single <code>None</code> value. So it always has the same id.</span>
<span class="comment-copy">This doesn't address the OP's "is -&gt; True" example.</span>
<span class="comment-copy">@AlexanderSupertramp, because of <a href="http://stackoverflow.com/questions/15541404/python-string-interning">string interning</a>.</span>
<span class="comment-copy">Where can someone read more on the convoluted rules for when strings are interned?</span>
<span class="comment-copy">+1 for a thorough explanation. Not sure how the other answer received so many upvotes without explaining what ACTUALLY happened.</span>
<span class="comment-copy">this is exactly what I thought of when I read the question. The accepted answer is short yet contains the fact, but this answer <i>explains</i> things far better. Nice!</span>
<span class="comment-copy">@NoctisSkytower Googled the same and found this <a href="http://guilload.com/python-string-interning/" rel="nofollow noreferrer">guilload.com/python-string-interning</a></span>
<span class="comment-copy">@naught101: No, the rule is to choose between <code>==</code> and <code>is</code> based on what kind of check you want. If you care about the strings being <i>equal</i> (that is, having the same contents) then you should always use <code>==</code>. If you care about whether any two Python names refer to the same object instance, you should use <code>is</code>. You might need <code>is</code> if you're writing code that handles lots of different values without caring about their contents, or else if you know there is only one of something and you want to ignore other objects pretending to be that thing. If you're not sure, always chose <code>==</code>.</span>
<span class="comment-copy">I was pondering about this. suddenly I saw your answer!</span>
<span class="comment-copy">Is the same true for True and False?  Only one instance so is will match?</span>
<span class="comment-copy">@HandyManDan Yes, they are singletons both in python 2 and 3.</span>
<span class="comment-copy">@kamillitw but in Python 2 you can reassign False and True.</span>
<span class="comment-copy">Interesting example showing how reassigning ints makes triggers this condition.  Why did this fail?  Is it due to intern-ing or something else?</span>
<span class="comment-copy">It looks like the reason the is returns false may due to the interpreter implementation: <a href="http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python" title="is there a difference between and is in python">stackoverflow.com/questions/132988/…</a></span>
<span class="comment-copy">Read : <a href="http://stackoverflow.com/questions/306313/pythons-is-operator-behaves-unexpectedly-with-integers" title="pythons is operator behaves unexpectedly with integers">stackoverflow.com/questions/306313/…</a>   and     <a href="http://stackoverflow.com/questions/11476190/why-0-6-is-6-false">stackoverflow.com/questions/11476190/why-0-6-is-6-false</a></span>
<span class="comment-copy">@ArchitJain Yes, those links explain it pretty well. When you read them, you'll know what numbers you can use 'is' on. I just wish they would explain why it is still not a good idea to do that :) You knowing this does not make it a good idea to assume everyone else does as well (or that the internalized number range will never change)</span>
<span class="comment-copy">Your example still follows the older text....</span>
<span class="comment-copy">Using <code>.replace()</code> as an example in this context is probably not the best, though, because its semantics can be confusing.  <code>s2 = s2.replace()</code> will <i>always</i> create a <i>new</i> string object, assign the new string object to <code>s2</code>, and then dispose of the string object that <code>s2</code> used to point to.  So even if you did <code>s = s.replace('one', 'one')</code> you would still get a new string object.</span>
<span class="comment-copy">Ah, good point and that is true.</span>
