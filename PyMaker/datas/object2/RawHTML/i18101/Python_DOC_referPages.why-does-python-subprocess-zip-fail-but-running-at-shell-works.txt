<div class="post-text" itemprop="text">
<p>I'm on Mac OS X using Python 2.7; using <code>subprocess.call</code> with <code>zip</code> fails yet running the <em>same command</em> at the shell succeeds. Here's a copy of my terminal:</p>
<pre><code>$ python
Python 2.7.2 (default, Oct 11 2012, 20:14:37) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call(['zip', 'example.zip', 'example/*'])
    zip warning: name not matched: example/*

zip error: Nothing to do! (example.zip)
12
&gt;&gt;&gt; quit()
$ zip example.zip example/*
  adding: example/file.gz (deflated 0%)
</code></pre>
<p>I've also tried with full paths and had the same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because running a command in the shell is not the same thing as running it with <code>subprocess.call()</code>; the shell expanded the <code>example/*</code> wildcard.</p>
<p>Either expand the list of files with <code>os.listdir()</code> or the <code>glob</code> module yourself, or run the command through the shell from Python; with the <code>shell=True</code> argument to <code>subprocess.call()</code> (but make the first argument a whitespace-separated string).</p>
<p>Using <a href="http://docs.python.org/2/library/glob.html#glob.glob" rel="noreferrer"><code>glob.glob()</code></a> is probably the best option here:</p>
<pre><code>import glob
import subprocess

subprocess.call(['zip', 'example.zip'] + glob.glob('example/*'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Martijn's advice to use <a href="http://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow noreferrer"><code>glob.glob</code></a> is good for general shell wildcards, but in this case it looks as if you want to add all files in a directory to the ZIP archive. If that's right, you might be able to use the <code>-r</code> option to <a href="http://linux.die.net/man/1/zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>directory = 'example'
subprocess.call(['zip', '-r', 'example.zip', directory])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try shell=True. subprocess.call('zip example.zip example/*', shell=True) would work. </p>
</div>
<span class="comment-copy">Behaviour is system-dependent and works on Windows, while fails on *nix due reasons explained by @MartijnPieters</span>
<span class="comment-copy">Why don't we use <a href="https://docs.python.org/3.6/library/zipfile.html" rel="nofollow noreferrer">docs.python.org/3.6/library/zipfile.html</a> module in python. Is there any difference between both methods ?</span>
<span class="comment-copy">@C.R.Sharat: the question is about why the glob wasn't being expanded. You'll have to ask the OP why they prefer using the command-line tool over the Python module.</span>
<span class="comment-copy">Good answer, but I think the order should be <code>subprocess.call(['zip', '-r',  'example.zip', directory])</code>.</span>
<span class="comment-copy">@shahar_m: Good spot! Fixed, thank you.</span>
<span class="comment-copy">shell=True can cause security problems, but it does enable shell globbing; <code>glob.glob</code> is a better answer</span>
