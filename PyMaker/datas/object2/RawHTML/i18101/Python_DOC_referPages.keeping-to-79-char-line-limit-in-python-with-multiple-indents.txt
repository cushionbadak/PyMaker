<div class="post-text" itemprop="text">
<p>I understand that to write good Python code, I should keep my lines to no more than 79 characters.</p>
<p>This is fine most of the time, but if I have various nested for loops and if statements themselves nested within a class, I might easily find that I have 5 or 6 indents (ie 20-24 characters, if I'm indenting by 4 spaces a time) before I start. Then the 79 character limit becomes quite tricky. I'm aware of various tricks like implicit continuations within brackets and using brackets to concatenate long strings, but even so, it gets a bit fiddly.</p>
<p>So, what do you gurus advise?</p>
<p>Indenting by 2 spaces instead of 4 would help, but is that considered good style? Not sure it would help make my code more readable, and I note that PEP8 says to use 4 spaces.</p>
<p>If I find I have multiple levels of indents, is that perhaps I sign that I'm writing bad code? And if so, any helpful tips or tricks for ways to avoid too much nesting?</p>
<p>Am I right in trying to stick to the 79 character recommendation in the first place?</p>
<p>Or do I just have to get used to a lot of statements broken over multiple lines?</p>
<p>Thanks
Adam</p>
</div>
<div class="post-text" itemprop="text">
<h3>1. Loops</h3>
<p>You can often use <a href="http://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> or <a href="http://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> to transform nested loops to a single loop.</p>
<p>When the loops are independent, use <code>product</code>. For example, these nested loops:</p>
<pre><code>for x in range(3):
    for y in range(5):
        for z in range(7):
            print((x, y, z))
</code></pre>
<p>become the single loop:</p>
<pre><code>from itertools import product
for x, y, z in product(range(3), range(5), range(7)):
    print((x, y, z))
</code></pre>
<p>When the loop indices must be distinct, then you can use <code>combinations</code>. For example, these nested loops:</p>
<pre><code>for start in range(length - 1):
    for end in range(start + 1, length):
        print((start, end))
</code></pre>
<p>become the single loop:</p>
<pre><code>from itertools import combinations
for start, end in combinations(range(length), 2):
    print((start, end))
</code></pre>
<p>See <a href="https://codereview.stackexchange.com/a/31872/11728">here</a> for a real-life example using <code>product</code>, and <a href="https://codereview.stackexchange.com/a/18659/11728">here</a> for an example using <code>combinations</code>.</p>
<h3>2. Conditions</h3>
<p>When you have lots of <code>if</code> statements, it's often possible to reorganize the code to save indentation steps, and at the same time make the code clearer. The basic idea is to dispose of errors first, and then cases in which you can <code>return</code> immediately, so that the main body of the condition doesn't need to be indented so far (or, in many cases, at all). For example, if you have code like:</p>
<pre><code>if x &gt;= 0:
    if x == 0:
        return 1
    else:
        # ... main body here ...
        return result
else:
    raise ValueError("Negative values not supported: {!r}".format(x))
</code></pre>
<p>Then you can reorganize the code like this:</p>
<pre><code>if x &lt; 0:
    raise ValueError("Negative values not supported: {!r}".format(x))
if x == 0:
    return 1
# ... main body here ...
return result
</code></pre>
<p>which saves you two levels of indentation for the main body.</p>
</div>
<span class="comment-copy">Generally: avoid having that many indents. Multiple nested loops is a sign of an inefficient algorithm.</span>
<span class="comment-copy">Completely agree. You will rarely see code, where there isn't enough space in 79 chars because of indents.</span>
<span class="comment-copy">PEP 8 also illustrates safe, readable indentation of lines. <a href="http://www.python.org/dev/peps/pep-0008/#code-lay-out" rel="nofollow noreferrer">python.org/dev/peps/pep-0008/#code-lay-out</a> shows where lines can be split. For example, if you have a function that takes many arguments, open with a '(' and write the functions on the next line or two or three, and then close it on a subsequent line. I've written large programs that always adhere to PEP 8 and don't get awkward because of it. The only time it ever gets weird is with long strings, but if strings are that long they shouldn't be programmatic anyway.</span>
<span class="comment-copy">79 characters is really useful because lots of consoles are 80x25 (or 80x43, or 80x50); more than 79 characters, and when you try to edit on that screen, you'll get nasty code wrapping. but then, <a href="http://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">python.org/dev/peps/pep-0008/â€¦</a>... if you don't have this limitation, it's consistent in your project, and it makes your life easier... then choose what makes sense.</span>
<span class="comment-copy">Sticking to 79 characters also means that when you post code on Stack Overflow it won't disappear off the right hand side of the box.</span>
<span class="comment-copy">Thanks Gareth, those do indeed look like helpful hints and tips to make sure I'm not having too many levels of indents</span>
<span class="comment-copy">Any advice on nested/inner functions, when using nonlocal to updated a variable inside the inner/nested function?</span>
<span class="comment-copy">@tommy.carstensen: That would make a good question for Stack Overflow.</span>
<span class="comment-copy">I asked here: <a href="http://stackoverflow.com/questions/28467259">stackoverflow.com/questions/28467259</a></span>
