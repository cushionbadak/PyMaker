<div class="post-text" itemprop="text">
<p>I've got this block of code in a real Django function. If certain conditions are met, items are added to the <code>list</code>.</p>
<pre><code>ret = []

if self.taken():
    ret.append('taken')

if self.suggested():
    ret.append('suggested')

#.... many more conditions and appends...

return ret
</code></pre>
<p>It's very <em>functional</em>. You know what it does, and that's great...<br/>
But I've learned to appreciate the beauty of <code>list</code> and <code>dict</code> comprehensions.</p>
<p>Is there a more <em>Pythonic</em> way of phrasing this construct, perhaps that initialises and populates the array in one blow?</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a mapping dictionary:</p>
<pre><code>self.map_dict = {'taken': self.taken,
                 'suggested': self.suggested,
                 'foo' : self.bar}
[x for x in ['taken', 'suggested', 'foo'] if self.map_dict.get(x, lambda:False)()]
</code></pre>
<hr/>
<p>Related: <a href="https://stackoverflow.com/questions/17166074/most-efficient-way-of-making-an-if-elif-elif-else-statement-when-the-else-is-don">Most efficient way of making an if-elif-elif-else statement when the else is done the most?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Not a big improvement, but I'll mention it:</p>
<pre><code>def populate():
    if self.taken():
        yield 'taken'
    if self.suggested():
        yield 'suggested'

ret = list(populate())
</code></pre>
<p>Can we do better? I'm skeptical. Clearly there's a need of using another syntax than a list literal, because we no longer have the "1 expression = 1 element in result" invariant.</p>
<hr/>
<p>Edit:</p>
<p>There's a pattern to our data, and it's a list of (condition, value) pairs. We might try to exploit it using:</p>
<pre><code>[value
 for condition, value
 in [(self.taken(), 'taken'),
     (self.suggested(), 'suggested')]
 if condition]
</code></pre>
<p>but this still is a restriction for how you describe your logic, still has the nasty side effect of evaluating all values no matter the condition (unless you throw in a ton of lambdas), and I can't really see it as an improvement over what we've started with.</p>
</div>
<div class="post-text" itemprop="text">
<p>For this <em>very specific</em> example, I could do:</p>
<pre><code>return [x for x in ['taken', 'suggested', ...] if getattr(self, x)()]
</code></pre>
<p>But again, this <em>only</em>  works where the item and method it calls to check have the same name, ie for my exact code. It could be adapted but it's a bit crusty. I'm very open to other solutions!</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know why we are appending strings that match the function names, but if this is a general pattern, we can use that.  Functions have a <code>__name__</code> attribute and I think it always contains what you want in the list.</p>
<p>So how about:</p>
<pre><code>return [fn.__name__ for fn in (self.taken, self.suggested, foo, bar, baz) if fn()]
</code></pre>
<p>If I understand the problem correctly, this works just as well for non-member functions as for member functions.</p>
<p>EDIT:</p>
<p>Okay, let's add a mapping dictionary.  And split out the function names into a tuple or list.</p>
<pre><code>fns_to_check = (self.taken, self.suggested, foo, bar, baz)

# This holds only the exceptions; if a function isn't in here,
# we will use the .__name__ attribute.
fn_name_map = {foo:'alternate', bar:'other'}

def fn_name(fn):
    """Return name from exceptions map, or .__name__ if not in map"""
    return fn_name_map.get(fn, fn.__name__)

return [fn_name(fn) for fn in fns_to_check if fn()]
</code></pre>
<p>You could also just use @hcwhsa's mapping dictionary answer.  The main difference here is I'm suggesting just mapping the exceptions.</p>
</div>
<div class="post-text" itemprop="text">
<p>In another instance (where a value will be defined but might be None - a Django model's fields in my case), I've found that just adding them and filtering works:</p>
<pre><code>return filter(None, [self.user, self.partner])
</code></pre>
<p>If either of those is <code>None</code>, They'll be removed from the list. It's a little more intensive than just checking but still fairly easy way of cleaning the output without writing a book.</p>
</div>
<div class="post-text" itemprop="text">
<p>One option is to have a "sentinel"-style object to take the place of list entries that fail the corresponding condition.  Then a function can be defined to <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a> out the missing items:</p>
<pre class="lang-py prettyprint-override"><code># "sentinel indicating a list element that should be skipped
Skip = object()

def drop_missing(itr):
    """returns an iterator yielding all but Skip objects from the given itr"""
    return filter(lambda v: v is not Skip, itr)
</code></pre>
<p>With this simple machinery, we come reasonably close to list-comprehension style syntax:</p>
<pre class="lang-py prettyprint-override"><code>return drop_skips([
    'taken' if self.taken else Skip,
    'suggested' if self.suggested else Skip,
    100 if self.full else Skip,
    // many other values and conditions
])
</code></pre>
</div>
<span class="comment-copy">not always, names can be overriden by poorly designed decorators</span>
