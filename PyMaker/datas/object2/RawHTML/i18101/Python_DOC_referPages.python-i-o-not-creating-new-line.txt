<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>lines[usernum] = str(user) + "\n"         
f = open('users.txt','w')
userstr = str(lines)
f.write(userstr) 
</code></pre>
<p>Effectively I am modifying the <code>lines</code> list at <code>usernum</code>, then writing it back to the original file <code>'users.txt'</code>. However, even adding the "\n", everything gets written to one line rather than an individual line for each line in <code>lines</code>. Why is this?</p>
</div>
<div class="post-text" itemprop="text">
<p>That is because <code>str(lines)</code> will not do what you expect it to do:</p>
<pre><code>&gt;&gt;&gt; lst = ['This', 'is a\n', 'fancy\n', 'list']
&gt;&gt;&gt; print(str(lst))
['This', 'is a\n', 'fancy\n', 'list']
</code></pre>
<p>As you can see, it will write a representation of the list, and not print out the individual lines. You can use <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a> to combine the list elements:</p>
<pre><code>lines[usernum] = str(user)
with open('users.txt', 'w') as f:
    f.write('\n'.join(lines))
</code></pre>
<p>Using <code>'\n'</code> as the join character will make sure that a newline is inserted between each list element, so you do not need to take care of adding it to every item manually.</p>
<p>Furthermore, when working with files, it is recommended to use the <code>with</code> statement when opening them, to make sure that they are closed correctly when you are done working with them.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are writing the string <em>representation</em> of the list to the file.</p>
<p>String representations of Python containers use the <em>representation</em> of the contents, not directly write strings.</p>
<p>Use the <code>writelines()</code> function to write a sequence of strings:</p>
<pre><code>f.writelines(lines)
</code></pre>
<p>or write each line separately:</p>
<pre><code>for line in lines:
    f.write(line)
</code></pre>
<p>or join the lines into one long string:</p>
<pre><code>f.write(''.join(lines))
</code></pre>
<p>The latter also allows you to add the newlines at the time of writing, by using <code>\n</code> as the joining string:</p>
<pre><code>f.write('\n'.join(lines))
</code></pre>
<p>where <code>lines</code> contains strings <em>without</em> newlines.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a for-loop and <code>'\n'</code> to write each item on a new line:</p>
<pre><code>with open('users.txt','w') as f:
    for line in lines:
        f.write('{}\n'.format(line))
</code></pre>
<p>Calling <code>str()</code> on a python object like <code>list</code> or <code>dict</code> simply returns the <code>str</code> version of that object, to write it's content to a file you should loop over it.</p>
<p><strong>Demo:</strong></p>
<pre><code>lines = [1, 'foo', 3, 'bar']
with open('users.txt','w') as f:
    for line in lines:
        f.write('{}\n'.format(line))
...         
&gt;&gt;&gt; !cat users.txt
1
foo
3
bar
</code></pre>
</div>
<span class="comment-copy">What <b>exactly</b> do you expect <code>str(lines)</code> to do, and <b>why</b>?</span>
<span class="comment-copy">This seems to add a new line at the end of the file everytime I run this. How do I prevent that?</span>
<span class="comment-copy">The join will only add newlines <i>between</i> list elements, and <code>f.write</code> itself will not terminate lines with newlines. So itâ€™s probably that your last list item has a line break at the end. You can use <code>str.strip()</code> to get rid of leading and trailing whitespace in a string. If you want to apply that to all list elements, you could do this: <code>f.write('\n'.join(map(lambda x: x.strip(), lines)))</code></span>
<span class="comment-copy">this works but seems to always add a blank new line to the end of the document if I run it more than once</span>
<span class="comment-copy">@user1045280 Use <code>f.write('\n'.join(str(x) for x in lines))</code> if you don't want a '\n' on the last line.</span>
