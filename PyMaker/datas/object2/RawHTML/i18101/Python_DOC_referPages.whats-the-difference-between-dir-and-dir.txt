<div class="post-text" itemprop="text">
<p>in python what's the difference between <code>dir()</code> function and <code>__dir__</code> attribute in python?</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; 2 .__dir__()
['__divmod__', 'real', '__rxor__', '__floor__', '__hash__', '__index__', '__lt__', '__ceil__', '__repr__', '__reduce_ex__', '__rpow__', '__rand__', '__truediv__', '__subclasshook__', '__doc__', '__radd__', '__or__', '__pow__', '__trunc__', '__rrshift__', '__delattr__', '__reduce__', '__rlshift__', 'conjugate', '__xor__', '__rtruediv__', '__rfloordiv__', '__ge__', '__setattr__', '__class__', 'bit_length', '__neg__', '__mod__', '__int__', '__pos__', 'from_bytes', '__format__', '__rmul__', '__lshift__', '__rsub__', '__new__', '__add__', '__floordiv__', 'imag', 'to_bytes', 'numerator', '__dir__', '__abs__', '__init__', '__sizeof__', '__getnewargs__', '__getattribute__', '__invert__', '__gt__', '__rshift__', '__ne__', '__rdivmod__', '__mul__', '__and__', '__sub__', '__rmod__', '__round__', '__ror__', '__le__', '__eq__', '__float__', '__bool__', '__str__', 'denominator']
&gt;&gt;&gt; dir(2)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dir</code> calls <code>__dir__</code> internally:</p>
<pre><code>In [1]: class Hello():
   ...:     def __dir__(self):
   ...:         return [1,2,3]
   ...:     

In [2]: dir(Hello())
Out[2]: [1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/2/library/functions.html#dir" rel="noreferrer">docs</a> explain it:</p>
<pre><code>If the object has a method named __dir__(), this method will be called and must
return the list of attributes. This allows objects that implement a custom
__getattr__() or __getattribute__() function to customize the way dir() reports
their attributes.

If the object does not provide __dir__(), the function tries its best to gather
information from the object’s __dict__ attribute, if defined, and from its type
object. The resulting list is not necessarily complete, and may be inaccurate
when the object has a custom __getattr__().
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>dir calls <code>__dir__</code> method if it is present,
from <a href="http://docs.python.org/2/library/functions.html#dir" rel="nofollow">python documentation</a> :</p>
<blockquote>
<p>dir([object])¶ Without arguments, return the list of names in the
  current local scope. With an argument, attempt to return a list of
  valid attributes for that object.</p>
<p>If the object has a method named <code>__dir__()</code>, this method will be called
  and must return the list of attributes. This allows objects that
  implement a custom <code>__getattr__()</code> or <code>__getattribute__()</code> function to
  customize the way <code>dir()</code> reports their attributes.</p>
<p>If the object does not provide <code>__dir__()</code>, the function tries its best
  to gather information from the object’s <code>__dict__</code> attribute, if
  defined, and from its type object. The resulting list is not
  necessarily complete, and may be inaccurate when the object has a
  custom <code>__getattr__()</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It's worth pointing out that the <code>__dir__</code> on many objects cannot be customized, so if you call it directly there is no opportunity to place a shim/wrapper in there.</p>
<p>It's easy to replace the builtin <code>dir</code> and give it some special powers if you need to. Tricks like this can be very useful when debugging.</p>
</div>
<span class="comment-copy"><code>2 .__dir__()</code> results in an error for me (<code>has no attribute '__dir__'</code>).  How come?</span>
<span class="comment-copy">you should have space between 2 and dot!</span>
<span class="comment-copy">I have.  And I prefer to use <code>(2).__dir__()</code> anyway for such things.  But nevertheless my Python 2.7 and my Python 3.2 both have no <code>__dir__</code> in <code>int</code> values.  Btw, without a space you'd get a <code>SyntaxError</code>.</span>
<span class="comment-copy">tnx for your rapid answer! sorry i started to learn python since yesterday.I'm a noob ;) first i should tried to read help.</span>
<span class="comment-copy">If your answer was true, the result of both would be identical, wouldn't they?</span>
<span class="comment-copy">@Alfe yes, modulo any further processing done by <code>dir()</code>, like sorting</span>
<span class="comment-copy">This pattern used for other functions too. <code>str(obj)</code> calls <code>obj.__str__()</code> and <code>x &lt; y</code> calls <code>x.__lt__(y)</code>. You can see a complete list <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">in the documentation</a>.</span>
