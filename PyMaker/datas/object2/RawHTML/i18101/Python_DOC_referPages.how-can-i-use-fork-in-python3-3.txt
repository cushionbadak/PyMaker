<div class="post-text" itemprop="text">
<p>how can i use fork() in Python3.3
**This is My code :</p>
<p>Input:</p>
<pre><code>#!/usr/bin/env python
import os

def Child_process():
    print("We are in Child_Process")
    print("My PID: %d"%os.getpid())
    print("Child_Process is exiting")

def Parent_process():
    print("-------Parent_process---------")
    wpid = os.fork()
    if wpid==0:
        print("wpid is 0 means We are in Child_process")
        print("Child :%d"%wpid)
        Child_process()
    else:
        print("Execute Parent_process")
        print("Parent_process %d"%wpid)
        Parent_process()

Parent_process()
</code></pre>
<p>Output:</p>
<pre><code>C:\Python33\python.exe C:/Users/Iem-Prog/Desktop/Py/Fork

Traceback (most recent call last):

  File "C:/Users/Iem-Prog/Desktop/Py/Fork", line 21, in &lt;module&gt;
-------Parent_process---------
    Parent_process()
  File "C:/Users/Iem-Prog/Desktop/Py/Fork", line 11, in Parent_process
    wpid = os.fork()

AttributeError: 'module' object has no attribute 'fork'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/os.html#os.fork" rel="nofollow"><code>os.fork</code></a> is only available in Unix-like system. You cannot use that in Windows.</p>
<blockquote>
<p><code>os.fork()</code></p>
<p>Fork a child process. Return 0 in the child and the childâ€™s process id
  in the parent. If an error occurs OSError is raised.</p>
<p>Note that some platforms including FreeBSD &lt;= 6.3, Cygwin and OS/2 EMX
  have known issues when using fork() from a thread.</p>
<p><strong>Availability: Unix.</strong></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>os.fork</code> isn't available on your target, consider instead using the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code> module</a> or even (batteries-not-included) <a href="https://github.com/kennethreitz/envoy." rel="nofollow noreferrer"><code>envoy</code></a>.</p>
<p>These create a convenient abstraction around launching children.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use the python's default <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code> package</a>. It works with both Linux and Windows. </p>
<pre><code>from multiprocessing import Process, Array

def split_work_receiver(import_type, process_no, i, shared_arr):
   creds= login()

    if creds is not None:
        process_submissions(browser, i, import_type, process_no, shared_arr)
    else:
        print("Failed login.")
    return

def split_work(base_path, i, connection_url, database_name):
    shared_arr = Array('i', range(0)) # Used to send data across processeses
    processes = [
        Process(target=split_work_receiver, args=("arg1", base_path, i, shared_arr)),
        Process(target=split_work_receiver, args=("arg1", base_path, i, shared_arr)),
        Process(target=split_work_receiver, args=("arg1", base_path, i, shared_arr))]

    #Run processes
    for p in processes:
        p.start()

    while True:
        sleep(600)

    #Exit the completed processes
    for p in processes:
        print('Closed process: '+ str(p))
        p.join()
</code></pre>
</div>
<span class="comment-copy">Which operating system do you use? This is not possible under windows for example.</span>
<span class="comment-copy">Investigate the <code>subprocess</code> and <code>multiprocessing</code> modules.</span>
<span class="comment-copy">A good thing that it didn't work, because it calls itself infinitely and becomes a fork bomb.</span>
