<div class="post-text" itemprop="text">
<p>I'm using the filter function in Python (3.3). I tried to convert the filter object to list. That's what I found:</p>
<pre><code>&gt;&gt;&gt; a=['1', '2', '3', None]
&gt;&gt;&gt; b=filter(None,a)
&gt;&gt;&gt; list(b)
['1', '2', '3']
&gt;&gt;&gt; list(b)
[]
</code></pre>
<p>That's quite strange to me. Can anyone explain this?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <a href="http://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter()</code></a> returns an <a href="http://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow"><em>iterator type</em></a>, and like all iterators, can only be iterated over just once. The <code>filter()</code> iterator filters values on demand, it doesn't hold any filtered values in memory itself.</p>
<p>You can do the same with the list iterator, returned by <code>iter()</code>:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = iter(a)
&gt;&gt;&gt; list(b)
[1, 2, 3]
&gt;&gt;&gt; list(b)
[]
</code></pre>
<p>This happens because the <a href="http://docs.python.org/3/library/stdtypes.html#iterator.__next__" rel="nofollow"><code>.__next__()</code> method</a> of iterators are expected to raise <code>StopIteration</code> once exhausted, then must <em>always</em> raise <code>StopIteration</code> from there on out:</p>
<blockquote>
<p>Once an iteratorâ€™s <code>__next__()</code> method raises <code>StopIteration</code>, it must continue to do so on subsequent calls. Implementations that do not obey this property are deemed broken.</p>
</blockquote>
<p><code>filter()</code> does this correctly:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, None]
&gt;&gt;&gt; b = filter(None, a)
&gt;&gt;&gt; list(b)
[1, 2, 3]
&gt;&gt;&gt; next(b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>Here the <a href="http://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next()</code> function</a> calls the <code>.__next__()</code> iterator method, and propagates the exception raised; <code>list()</code> on the other hand iterates until <code>StopIteration</code>, catches that exception and returns a list of whatever elements it managed to receive.</p>
<p>For completeness sake, in Python 2, <code>filter()</code> (as well as many other built-in functions and methods) returns a <code>list</code>, often wasting memory and cycles on building an intermediary list object that was then discarded again after iteration. By returning an iterator instead, the choice to materialize a list is up to the programmer instead.</p>
</div>
