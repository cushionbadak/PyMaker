<div class="post-text" itemprop="text">
<p>In systems programming it is common to invoke some library function which may fail, and if it does fail, to check <code>errno</code> for the exact cause.  This is true even in Python, and I think it's more cumbersome than it needs to be.  Let's take for example some code which tries to remove a file, and continues silently if the file did not exist:</p>
<pre><code>try:
    sftp.unlink(path)
except IOError as ex:
    if ex.errno != errno.ENOENT:
        raise
</code></pre>
<p>I'd like to know if it has ever been allowed or proposed in Python to do something more like this:</p>
<pre><code>try:
    sftp.unlink(path)
except IOError as ex if ex.errno == errno.ENOENT:
    pass
</code></pre>
<p>I think this has a few things to recommend it:</p>
<ol>
<li>More concise.</li>
<li>Familiar: as we can already catch certain types of exceptions, we catch only certain actual instances.  An uncaught exception is propagated in the usual way.</li>
<li>No new keywords required, nor any major new syntactic constructs.</li>
</ol>
<p>I'd be surprised if this hasn't been considered before, so I'd accept as an answer any links to proposals past or pending.  I'd also accept an answer explaining why the above would introduce any sort of problem with the existing language (Python 3.x, as I think 2.x is mostly frozen).</p>
</div>
<div class="post-text" itemprop="text">
<p>I doubt you will get far with this proposal, but you can get what you want want with a context manager.  Try this:</p>
<pre><code>import os

class SuppressOSError(object):
    def __init__(self, *valid_errno):
        self.valid_errno = valid_errno

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, traceback):
        if issubclass(ex_type, OSError) and ex_value.errno in self.valid_errno:
            return True # suppress exception

with SuppressOSError(os.errno.ENOENT):
    os.remove('/tmp/no_such_file')
    print("This line will not be reached.")
print("An exception was not raised.")
</code></pre>
<p>The above prints "An exception was not raised."</p>
<p>You can pass in any number of <code>errno</code> values; in my example I just passed in one.  Tested in Python 2.7.4, should work in any Python 2.5 or newer.</p>
</div>
<span class="comment-copy">I think this is a great idea, but it does not fit the format of this site at all, and it also invited discussion, as this can not be answered, and is opinionated.</span>
<span class="comment-copy">And the best place to check if it's not already been proposed would be checking the <a href="http://www.python.org/dev/peps/" rel="nofollow noreferrer">PEPs</a> (if it's been formally proposed / rejected) and the <a href="https://mail.python.org/mailman/listinfo/python-ideas" rel="nofollow noreferrer">Python Ideas List</a> for any discussion... It's also worth referring to: the <a href="https://mail.python.org/mailman/listinfo/python-list" rel="nofollow noreferrer">Python List</a> and the <a href="https://mail.python.org/mailman/listinfo/python-dev" rel="nofollow noreferrer">Python Developer's List</a></span>
<span class="comment-copy">There's a official workaround since Python3.4+: <code>contextlib.suppress(*exceptions)</code> <a href="http://docs.python.org/dev/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer">docs.python.org/dev/library/contextlib.html#contextlib.suppress</a> And I think it is better than mix if statements with except</span>
<span class="comment-copy">@InbarRose: I explicitly stated in the question how it might be answered: with a link to a PEP (I could find none) or other proposal document, or with some technical explanation of how it might break the language.  Barring both, the best answer would be for it to eventually end up with a new PEP, or perhaps some code showing a better way to do it.  If you have another StackExchange site I should post this on, please do let me know.</span>
<span class="comment-copy">It is solved by introducing <a href="http://docs.python.org/3/library/exceptions.html?highlight=filenotfounderror#FileNotFoundError" rel="nofollow noreferrer"><code>FileNotFoundError</code></a>, see <a href="http://www.python.org/dev/peps/pep-3151/" rel="nofollow noreferrer">pep 3151 Reworking the OS and IO exception hierarchy</a></span>
<span class="comment-copy">Thanks for showing us this trick, but I have to say, I'd probably never use it, as it's far more complex (harder for new maintainers to follow, more code) than the naive solution.</span>
<span class="comment-copy">It is harder to implement, but easy to use.  And you don't have to implement it because I just gave it to you.  This is, IMHO, the best way to solve your problem; it is using the features that the language supports right now (and has since 2.5).  Python in general is going in this direction; take a look at the documentation for <code>contextlib</code> and look up <code>contextlib.suppress()</code> here: <a href="http://docs.python.org/dev/library/contextlib.html" rel="nofollow noreferrer">docs.python.org/dev/library/contextlib.html</a></span>
<span class="comment-copy">You will not succeed in getting your proposed change to the language.  Something like it has already been discussed, and was not popular.  The Python development community is very careful about adding new stuff to the language, and they won't go for this without a good reason.  The newly refactored exceptions solve most of the problem anyway in 3.3 and newer, and my solution works in 2.5 and newer, so I don't think there is enough of a problem left to support a change to the language.</span>
