<div class="post-text" itemprop="text">
<p>It prints diga and digb but doesnt work with c!  Any help?  It's supposed to be a Denary to Binary converter but only 1-64, once i've cracked the code will increase this!  Thanks so much</p>
<pre><code>denaryno=int(input("Write a number from 1-64 "))
if 64%denaryno &gt; 0:
    diga=0
    remaindera=(64%denaryno)
    if 32/denaryno&lt;1:
        digb=1
        remainderb=(denaryno%32)
    else:
        digb =0
        if 16/remainderb&lt;1:
            digc=1
            remainderc=(denaryno%16)
        else:
            digc=0
            if 8/remainderc&lt;1:
                digd=1
                remainderd=(denaryno%8)
            else:
                digd=0
                if 4/remainderd&lt;1:
                    dige=1
                    remaindere=(denary%4)
                else:
                    dige=0
                    if 2/remaindere&lt;1:
                        digf=1
                        remainderf=(denary%2)
                    else:
                        digf=0
                        if 1/remainderf&lt;1:
                            digg=1
                            remainderg=(denary%1)
                        else:
                            digg=0
print (str(diga)+str(digb))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Wow that was a lot of work, you don't have to do all that.</p>
<pre><code>def bin_convert(x, count=8):
    return "".join(map(lambda y:str((x&gt;&gt;y)&amp;1), range(count-1, -1, -1)))
</code></pre>
<p>here are the functions comprising this one from easy-&gt;important</p>
<p><code>str()</code> returns a string</p>
<p><code>range()</code> is a way to get a list from 1 number to another.  Written like this <code>range(count-1, -1, -1)</code> counts backwards.</p>
<p><code>"".join()</code> is a way to take an iterable and put the pieces together.</p>
<p><code>map()</code> is a way to take a function and apply it to an iterable.</p>
<p><code>lambda</code> is a way to write a function in 1 line.   I was being lazy and could have written another <code>def func_name(y)</code> and it would have worked just as well.</p>
<p><code>&gt;&gt;</code> is a way to shift bits.  (which I believe understanding this one is the key component to understanding your problem)</p>
</div>
<div class="post-text" itemprop="text">
<p>You only set <code>digc</code> in <em>one</em> of the top <code>if</code>/<code>else</code> statement. If <code>32/denaryno&lt;1</code> is <code>True</code>, you don't set <code>digc</code> at all.</p>
<p>Set <code>digc</code> at the top of the function (to <code>0</code> or whatever else you want it to be). This applies to <em>all</em> the digit variables, <code>digd</code>, <code>dige</code>, etc.</p>
<p>What you <em>really</em> should do, instead, is use a list of digits, and append either a 0 or a 1 to that list every time you divide the number by a factor.</p>
<p>You may want to take a look at the <a href="http://docs.python.org/3/library/functions.html#divmod" rel="nofollow"><code>divmod()</code> function</a>; it returns both the quotient and the remainder. You could also do with some looping here to slash the number of <code>if</code> statements needed here:</p>
<pre><code>number = int(input("Write a number from 1-64 "))
digits = []
factor = 64
while number:
    quotient, number = divmod(number, factor)
    digits.append(quotient)
    factor //= 2
print(''.join(map(str, digits)))
</code></pre>
</div>
<span class="comment-copy">what is the output?</span>
<span class="comment-copy">supposed to be whatever number they typed in binary.  For example, if they typed in 50 Output should be 0110010</span>
<span class="comment-copy">You should try doing this recursively, or in a loop / use mapping (dictionaries) this code is very unreadable.</span>
<span class="comment-copy">May I suggest the built-in function <code>bin</code>?</span>
<span class="comment-copy">Any chance of comments on the code? I'm not too familiar with these new functions</span>
<span class="comment-copy">I hope this helps.</span>
<span class="comment-copy">Thanks a lot, much appreciated.</span>
<span class="comment-copy">Right, i dont understand that, im a real novice.  Apologies.  Any chance of an example line?</span>
<span class="comment-copy">Thank you Mr Pieters, i know my code is highly inefficient.. But, is there any way i could get it to work without adding extra functions and just toggling with as little as possible?</span>
<span class="comment-copy">@user2942083: I gave you all that you need to make your function work in my answer now; but I urge you to at least think about using a list instead.</span>
