<div class="post-text" itemprop="text">
<p>Suppose we are on python3.3 and multi-platform (Linux and WIndow), if I do following:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; eval(input("enter a percent from 1-100"))
</code></pre>
<p>I get:</p>
<pre class="lang-none prettyprint-override"><code>enter a percent from 1-100: (Terminal is Waiting for user prompt) 
</code></pre>
<p>I want it to display:</p>
<pre class="lang-none prettyprint-override"><code>enter a percent from 1-100: (waiting for user prompt)  %
</code></pre>
<p>How do I show that <code>%</code> following the parenthesis?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your question, you want to be able to write a prompt that includes a <code>%</code> sign character, but places the user's cursor to the left of the sign, like this:</p>
<pre><code>Enter a percent from 1-100:     %
                            ^ cursor is here
</code></pre>
<p>There's not a universal solution to this, since basic text-IO is usually oriented around input and output streams that don't have well defined interactions. There are some approaches that will work in some situations but not others, but I'm not sure of anything that will work everywhere (short of writing a GUI).</p>
<p>One suggestion I have is to include ASCII (and unicode) backspace characters <code>'\b'</code> (or <code>'\x08'</code>) in your prompt. On some consoles this will move the cursor to the left one character per backspace. So, the prompt above could be generated by:</p>
<pre><code>input("Enter a percent from 1-100:     %\b\b\b\b\b")
</code></pre>
<p>This works when I run Python from a windows <code>CMD.exe</code> shell, but not when I run it within IDLE (the <code>'\x08'</code> characters are displayed as a box with a small circle taken out of the middle). It's a bit crude though, as it can't prevent the user from entering more characters than there are spaces before the <code>%</code> (which will be overwritten by the fifth character entered).</p>
<p>Another solution which may be a bit more robust (but not cross-platform, alas) is to use the <a href="http://docs.python.org/3/library/curses.html" rel="nofollow"><code>curses</code> module</a>. I'm not knowledgeable enough about it to suggest code, but it should be possible to make it do what you want (and even control things like preventing the user from entering more than three characters, or moving the <code>%</code> sign to correctly align with values of any length).</p>
<p>One final thing: I strongly suggest that you don't use <code>eval</code> around your <code>input</code> call. If you expect (and require) an integer value, use <code>int(input())</code>. If you might get an integer, but could also get some other kind of value, use multiple lines to test what you got:</p>
<pre><code>def get_val():
    str_val = input()
    try:
        return int(str_val) # handle numbers like 1, 23232, etc.
    except ValueError:
        pass

    try:
        return float(str_val) # handles 23.5 and -3e-3 (but beware, also "nan" and "inf")
    except ValueError:
        pass

    try:
        return make_some_other_value(str_val) # whatever you want
    except ValueError:
        pass

    return str_val # give up and return the string
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's an alternative using the <a href="https://pypi.python.org/pypi/getch" rel="nofollow">getch</a> package. Instead of using <code>input</code>, we'll roll our own.</p>
<pre><code>import string
import sys
try:
    from msvcrt import getch
except ImportError:
    from getch import getch


def char_valid(char):
    """Do whatever validation you need here."""
    return char in string.ascii_letters or char in string.digits


def char_bkspace(char):
    """Matches backspace and delete."""
    return char in ['\x08', '\x7f']

message_pre = 'enter a percent from 1-100'
message_post = '%'
user_input = ''
while True:
    sys.stdout.write('\r{0} {1} {2}'.format(message_pre, user_input, message_post))
    char = getch()
    if char_bkspace(char):
        user_input = user_input[:-1]
    elif char_valid(char):
        user_input += char
    else:
        break

print('\nyour message was', user_input)
</code></pre>
<p>This gets user input one character at a time in a <code>while</code> loop using <code>getch</code>. By using <code>sys.stdout.write('\r...')</code> we can avoid newlines and constantly overwrite the previous line.</p>
<p>This has the problem that if you backspace, multiple %'s will be visible because the new line is not entirely overwriting the previous line. This can be fixed by padding the string with spaces.</p>
</div>
<span class="comment-copy">This simply can't be done.</span>
<span class="comment-copy">Is this on windows or linux? You can look at the <code>console</code> module on windows. It can be done.</span>
<span class="comment-copy">Im writing this script on Linux.</span>
<span class="comment-copy">You could try including backspace characters (<code>\x08</code>) in your prompt string following the <code>%</code> character. On some terminals that may back up the cursor so the user's typed text appears to its left. It's not consistent though (it works for me on the windows command line, but not in IDLE).</span>
<span class="comment-copy"><code>enter a percent from 1-100: __import__('shutil').rmtree('.') %</code></span>
<span class="comment-copy">Oh, I thought <code>\b</code> character would <i>delete</i> the percent character?</span>
<span class="comment-copy">@justhalf: It's up to the terminal what it does, but I don't think most systems delete things when backspace characters are printed. If they work at all (rather than printing an escape code or something), they just back up the cursor position, which will let you overwrite things if you want. (e.g. a spinner: <code>while True: for c in '/-\|': print(c, end="\b", flush=True); sleep(.25)</code>).</span>
