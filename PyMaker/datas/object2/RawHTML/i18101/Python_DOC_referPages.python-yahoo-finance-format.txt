<div class="post-text" itemprop="text">
<p>so I did this:</p>
<pre><code>def get_quotes(ticker:str, start_date:datetime.date, end_date:datetime.date)-&gt;list:
'''Downloads the quotes from Yahoo finance'''


start_month = str(start_date.month-1)
start_day   = str(start_date.day)
start_year  = str(start_date.year)

end_month   = str(end_date.month-1)
end_day     = str(end_date.day)
end_year    = str(end_date.year)

try:
    list = []
    quote = 'http://ichart.yahoo.com/table.csv?s='+ticker+'&amp;a'+start_month+'&amp;b='+start_day+"&amp;c="+start_year+'&amp;d='+end_month+'&amp;e='+ end_day +'&amp;f='+end_year+'&amp;g=d'
    response = urllib.request.urlopen(quote) 
    data = response.read()
    string_data = data.decode(encoding='utf-8')
    lines = string_data.splitlines()
    for x in lines:
        data = [y for y in x.split(',')]
        list.append(data[0:5])
    return list

except URLError:
    print('Page not found! Please enter a valid ticker')
</code></pre>
<p>But the resulting list is:
    [['Date', 'Open', 'High', 'Low', 'Close'], ['2011-10-10', '26.58', '26.97', '26.47',<br/>
    '26.94'], ['2011-10-07', '26.34', '26.51', '26.20', '26.25'], ['2011-10-06', '25.90', 
    '26.40', '25.70', '26.34']]</p>
<p>when it should be:
    ['Date', 'Open', 'High', 'Low', 'Close'], ['2011-10-10', '26.58', '26.97', '26.47', 
    '26.94'], ['2011-10-07', '26.34', '26.51', '26.20', '26.25'], ['2011-10-06', '25.90', 
    '26.40', '25.70', '26.34']</p>
<p>Can i eliminate the double list somehow?</p>
</div>
<div class="post-text" itemprop="text">
<p>Is this what you're looking for?</p>
<pre><code>rows = ['Date,Open,High,Low,Close,Volume,Adj Close', '2012-11-30,691.31,699.22,685.69,698.37,3163600,698.37', '2012-11-29,687.78,693.90,682.00,691.89,2776500,691.89','2012-11-28,668.01,684.91,663.89,683.67,3042000,683.67', '2012-11-27,660.17,675.00,658.00,670.71,2508700,670.71']

def format_rows(rows, gap):
    split_rows = [row.split(',') for row in rows]
    # Splits each row up, by comma
    column_lengths = [max(col_len) for col_len in zip(*[map(len, row) for row in split_rows])]
    # Finds the maximum size of each column

    for row in split_rows:
        col_lengths = zip(row, column_lengths)
        print ''.join(col.ljust(col_length + gap, ' ') for (col, col_length) in col_lengths)
        # Prints out the data, making sure there's a minimum of "gap" spaces 
        # between each column
</code></pre>
<p>Doing <code>format_rows(rows, 4)</code> will result in the following table being printed out, with a gap of 4 spaces between each column:</p>
<pre><code>Date          Open      High      Low       Close     Volume     Adj Close
2012-11-30    691.31    699.22    685.69    698.37    3163600    698.37
2012-11-29    687.78    693.90    682.00    691.89    2776500    691.89
2012-11-28    668.01    684.91    663.89    683.67    3042000    683.67
2012-11-27    660.17    675.00    658.00    670.71    2508700    670.71
</code></pre>
<p>You can modify the code so it returns a string instead by doing this:</p>
<pre><code>def format_rows(rows, gap):
    split_rows = [row.split(',') for row in rows]
    # Splits each row up, by comma
    column_lengths = [max(col_len) for col_len in zip(*[map(len, row) for row in split_rows])]
    # Finds the maximum size of each column

    output = []
    for row in split_rows:
        col_lengths = zip(row, column_lengths)
        output.append(''.join(col.ljust(col_length + gap, ' ') for (col, col_length) in col_lengths))
    return '\n'.join(output)
</code></pre>
<p><strong>Edit:</strong></p>
<p>If you want to only include the first <code>n</code> rows, you could use the below function and call <code>format_rows(rows, 4, 5)</code>. In essence, we're truncating each row to the first five before printing it.</p>
<pre><code>def format_rows(rows, gap, limit):
    split_rows = [row.split(',') for row in rows]
    # Splits each row up, by comma
    column_lengths = [max(col_len) for col_len in zip(*[map(len, row) for row in split_rows])]
    # Finds the maximum size of each column

    for row in split_rows:
        col_lengths = zip(row, column_lengths)[:limit]
        # Prints out only the first `limit` columns

        print ''.join(col.ljust(col_length + gap, ' ') for (col, col_length) in col_lengths)
        # Prints out the data, making sure there's a minimum of "gap" spaces 
        # between each column
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With this you can easily customize the appearance, even though it's "less automatic" than Michael's solution:</p>
<pre><code>lines = [x.split(',') for x in a]
for line in lines:
    print "{0[0]:&lt;10} {0[1]:&lt;6} {0[2]:&lt;6} {0[3]:&lt;6} {0[4]:&lt;6} {0[5]:&lt;7} {0[6]:&lt;6}".format(line)
</code></pre>
<p>Result:</p>
<pre><code>Date       Open   High   Low    Close  Volume  Adj Close
2012-11-30 691.31 699.22 685.69 698.37 3163600 698.37
2012-11-29 687.78 693.90 682.00 691.89 2776500 691.89
2012-11-28 668.01 684.91 663.89 683.67 3042000 683.67
</code></pre>
<p>Want to display the first columnn centered, all the others right aligned, a large gap in the last one and omit the open column? just a minor change to the format string:<br/>
<code>"{0[0]:^10} {0[2]:&gt;6} {0[3]:&gt;6} {0[4]:&gt;6} {0[5]:&gt;7} {0[6]:&gt;12}"</code><br/>
(See the <a href="http://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">format string syntax</a>)  </p>
<p>And you get:</p>
<pre><code>   Date      High    Low  Close  Volume    Adj Close
2012-11-30 699.22 685.69 698.37 3163600       698.37
2012-11-29 693.90 682.00 691.89 2776500       691.89
2012-11-28 684.91 663.89 683.67 3042000       683.67
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are really many ways to do this if you just want your output to look pretty then as the two responses have pointed out you can do that quite easily. If you just want a generality then your code as everything it needs you'd just have to </p>
<pre><code>for x in lines:
    print x
</code></pre>
<p>However if you want to generate a list of lines you'd have to do the following:</p>
<pre><code>lst = []

for x in lines:
    data = [y for y in x.split(',')]
    lst.append(data)

for x in lst:
    print x

['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close']
['2012-11-30', '691.31', '699.22', '685.69', '698.37', '3163600', '698.37']
['2012-11-29', '687.78', '693.90', '682.00', '691.89', '2776500', '691.89']
['2012-11-28', '668.01', '684.91', '663.89', '683.67', '3042000', '683.67']
['2012-11-27', '660.17', '675.00', '658.00', '670.71', '2508700', '670.71']
['2012-11-26', '666.44', '667.00', '659.02', '661.15', '2204600', '661.15']
['2012-11-23', '669.97', '670.00', '666.10', '667.97', '922500', '667.97']
</code></pre>
<p>but for simple pretty output you get you get rid of the date, open line and do this:</p>
<pre><code>print('Date         Open     High     Low      Closee    Volume     Adj Close')
del lines[0]
for x in lines:
    data = [y for y in x.split(',')]
    print("{0}   {1}   {2}   {3}   {4}   {5}    {6}".format(*data))

Date         Open     High     Low      Close    Volume     Adj Close
2012-11-30   691.31   699.22   685.69   698.37   3163600    698.37
2012-11-29   687.78   693.90   682.00   691.89   2776500    691.89
2012-11-28   668.01   684.91   663.89   683.67   3042000    683.67
2012-11-27   660.17   675.00   658.00   670.71   2508700    670.71
2012-11-26   666.44   667.00   659.02   661.15   2204600    661.15
</code></pre>
<p>Hope this helps. Though <strong>LeartS</strong> has his formatting far better best practice style. </p>
</div>
<span class="comment-copy">Aside: if you're going to be working with tabular stock data, you should check out <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">pandas</a>.  It has excellent facilities for manipulating OHLC data.</span>
<span class="comment-copy">Thanks DSM..I'll look into it..but for now I was wondering if this can be solved without making much changes..plus since am a beginner wanted to see if I can do it this way.  :)</span>
<span class="comment-copy">This is not a double list. This is list of lists, exactly what you want. gg[0] will give you titles, gg[1] first date and so on.</span>
<span class="comment-copy">Thanks Michael!..Is there anyway to display the first five columns only?</span>
<span class="comment-copy">@SajathMohan -- Yep: check my edit, and see if that works for you.</span>
<span class="comment-copy">I tried doing this..here is my code:</span>
<span class="comment-copy">What you have now is a list of lists exactly like my second example, to print it just run it through a for loop for x in list:;   print x</span>
<span class="comment-copy">Thanks for the input Peter!</span>
