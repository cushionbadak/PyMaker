<div class="post-text" itemprop="text">
<p>I am trying to replace special characters with HTML entities, But the results are random with the same input and I don't understand why.</p>
<p>Here is the code :</p>
<pre><code>def secure(text):
    hsconvert = {"\'": "\\'", "\"": "\\\"", "¢": "&amp;cent;", "©": "&amp;copy;", "÷": "&amp;divide;", "&gt;": "&amp;gt;", "&lt;": "&amp;lt;", "µ": "&amp;micro;", "·": "&amp;middot;", "¶": "&amp;para;", "±": "&amp;plusmn;", "€": "&amp;euro;", "£": "&amp;pound;", "®": "&amp;reg;", "§": "&amp;sect;", "™": "&amp;trade;", "¥": "&amp;yen;", "á": "&amp;aacute;", "Á": "&amp;Aacute;", "à": "&amp;agrave;", "À": "&amp;Agrave;", "â": "&amp;acirc;", "Â": "&amp;Acirc;", "å": "&amp;aring;", "Å": "&amp;Aring;", "ã": "&amp;atilde;", "Ã": "&amp;Atilde;", "ä": "&amp;auml;", "Ä": "&amp;Auml;", "æ": "&amp;aelig;", "Æ": "&amp;AElig;", "ç": "&amp;ccedil;", "Ç": "&amp;Ccedil;", "é": "&amp;eacute;", "É": "&amp;Eacute;", "è": "&amp;egrave;", "È": "&amp;Egrave;", "ê": "&amp;ecirc;", "Ê": "&amp;Ecirc;", "ë": "&amp;euml;", "Ë": "&amp;Euml;", "í": "&amp;iacute;", "Í": "&amp;Iacute;", "ì": "&amp;igrave;", "Ì": "&amp;Igrave;", "î": "&amp;icirc;", "Î": "&amp;Icirc;", "ï": "&amp;iuml;", "Ï": "&amp;Iuml;", "ñ": "&amp;ntilde;", "Ñ": "&amp;Ntilde;", "ó": "&amp;oacute;", "Ó": "&amp;Oacute;", "ò": "&amp;ograve;", "Ò": "&amp;Ograve;", "ô": "&amp;ocirc;", "Ô": "&amp;Ocirc;", "ø": "&amp;oslash;", "Ø": "&amp;Oslash;", "õ": "&amp;otilde;", "Õ": "&amp;Otilde;", "ö": "&amp;ouml;", "Ö": "&amp;Ouml;", "ß": "&amp;szlig;", "ú": "&amp;uacute;", "Ú": "&amp;Uacute;", "ù": "&amp;ugrave;", "Ù": "&amp;Ugrave;", "û": "&amp;ucirc;", "Û": "&amp;Ucirc;", "ü": "&amp;uuml;", "Ü": "&amp;Uuml;", "ÿ": "&amp;yuml;", "\\":"\\\\"};
    for i, j in hsconvert.items():
        text = text.replace(i, j)
        return text

print(secure("La Vie d'Adèle, chapitres 1 &amp; 2"))
</code></pre>
<p>Here are the console outputs:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
La Vie d\'Ad&amp;egrave;le, chapitres 1 &amp; 2
['TV Movie', 'Video Game', 'TV Episode', 'TV Series', 'TV Series ', 'Short', 'TV Mini-Series']
&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
La Vie d\\'Ad&amp;egrave;le, chapitres 1 &amp; 2
['TV Movie', 'Video Game', 'TV Episode', 'TV Series', 'TV Series ', 'Short', 'TV Mini-Series']
</code></pre>
<p>The problem is with the <code>'</code> character which is sometimes returned as <code>\'</code> and sometimes as <code>\\'</code>.</p>
<p>I think it is coming from the last item in the dictionary, <code>"\\":"\\\\"</code> but I don't understand why it is not interpreted the same on each run.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you speculated in your answer, the problem is that iteration over a dictionary does not have a defined order.</p>
<p>From the <a href="http://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">Python 3 documentation</a>:</p>
<blockquote>
<p>Performing list(d.keys()) on a dictionary returns a list of all the
  keys used in the dictionary, in arbitrary order (if you want it
  sorted, just use sorted(d.keys()) instead).</p>
</blockquote>
<p>It's not explicitly stated, but the same applies to items().</p>
<p>I'm a little surprised to see the order changes between iterations in this case, but arbitrary in this case means undefined -- any order is technically valid.  If you want consistent results, I recommend redesigning your algorithm to not be sensitive to the ordering of the items at all; failing that, sorting the output first or using an OrderedDict would at least solve the consistency problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have modified the function as follow and it is working :</p>
<pre><code>def secure(text):
    text.replace("\\", "\\\\")
    hsconvert = {"\'": "\\'", "\"": "\\\"", "¢": "&amp;cent;", "©": "&amp;copy;", "÷": "&amp;divide;", "&gt;": "&amp;gt;", "&lt;": "&amp;lt;", "µ": "&amp;micro;", "·": "&amp;middot;", "¶": "&amp;para;", "±": "&amp;plusmn;", "€": "&amp;euro;", "£": "&amp;pound;", "®": "&amp;reg;", "§": "&amp;sect;", "™": "&amp;trade;", "¥": "&amp;yen;", "á": "&amp;aacute;", "Á": "&amp;Aacute;", "à": "&amp;agrave;", "À": "&amp;Agrave;", "â": "&amp;acirc;", "Â": "&amp;Acirc;", "å": "&amp;aring;", "Å": "&amp;Aring;", "ã": "&amp;atilde;", "Ã": "&amp;Atilde;", "ä": "&amp;auml;", "Ä": "&amp;Auml;", "æ": "&amp;aelig;", "Æ": "&amp;AElig;", "ç": "&amp;ccedil;", "Ç": "&amp;Ccedil;", "é": "&amp;eacute;", "É": "&amp;Eacute;", "è": "&amp;egrave;", "È": "&amp;Egrave;", "ê": "&amp;ecirc;", "Ê": "&amp;Ecirc;", "ë": "&amp;euml;", "Ë": "&amp;Euml;", "í": "&amp;iacute;", "Í": "&amp;Iacute;", "ì": "&amp;igrave;", "Ì": "&amp;Igrave;", "î": "&amp;icirc;", "Î": "&amp;Icirc;", "ï": "&amp;iuml;", "Ï": "&amp;Iuml;", "ñ": "&amp;ntilde;", "Ñ": "&amp;Ntilde;", "ó": "&amp;oacute;", "Ó": "&amp;Oacute;", "ò": "&amp;ograve;", "Ò": "&amp;Ograve;", "ô": "&amp;ocirc;", "Ô": "&amp;Ocirc;", "ø": "&amp;oslash;", "Ø": "&amp;Oslash;", "õ": "&amp;otilde;", "Õ": "&amp;Otilde;", "ö": "&amp;ouml;", "Ö": "&amp;Ouml;", "ß": "&amp;szlig;", "ú": "&amp;uacute;", "Ú": "&amp;Uacute;", "ù": "&amp;ugrave;", "Ù": "&amp;Ugrave;", "û": "&amp;ucirc;", "Û": "&amp;Ucirc;", "ü": "&amp;uuml;", "Ü": "&amp;Uuml;", "ÿ": "&amp;yuml;"};
    for i, j in hsconvert.items():
        text = text.replace(i, j)
    return text
</code></pre>
<p>but I don't understand why the old function is not working... A for x in ... is not always the same order ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes, your code replaces <code>\\</code> with <code>\\\\</code> first, and then <code>\'</code> with <code>\\'</code>. Sometimes it does it the other way round.</p>
<p>Example (using "\'" as input):</p>
<p>If we do <code>\\</code> -&gt; <code>\\\\</code> first, and then <code>\'</code> -&gt; <code>\\'</code> we get <code>\'</code> after the first attempted replacement (where nothing happens because there isn't a <code>\\</code>), and then <code>\\'</code> after the second.</p>
<p>But if we do it the other way round, we get <code>\\'</code> after the first, and then it replaces the <code>\\</code> with <code>\\\\</code> for the second, so we end up with <code>\\\\'</code>!</p>
<p>This happens because <code>hsconvert</code> is a dictionary, so it isn't ordered, and iterating through it (the <code>for</code> loop) doesn't necessarily happen in the same way each time.</p>
<p>The way you have gone about solving it is fine, but for future reference there is an <code>OrderedDict</code> in the <code>collections</code> module.</p>
</div>
<span class="comment-copy">Maybe you could make it more obvious <i>exactly</i> what your modifications are and why you think it solves the problem, even if you don't know what was causing the old one to fail? P.S. dictionaries don't have an order, which means the replace is getting evaluated in a random order...</span>
<span class="comment-copy">I think you just answered the problem... I thought the for was ordered but it seems to be ordered therefore if the replacement made at first was done after first two the result differed !!!</span>
<span class="comment-copy">The <code>for</code> is ordered. It's the dictionary that isn't (as I explain in my answer!)</span>
<span class="comment-copy">Yes, I'm aware that it solves the "problem" @user1998000, but I didn't have the energy to write a good answer for it so letting other people, who have more experience with Python is easier :-).</span>
