<div class="post-text" itemprop="text">
<p>What really is the difference between file.write() and file.flush()?</p>
<p>From <a href="https://docs.python.org/3/library/io.html?highlight=flush#io.BufferedWriter.flush" rel="nofollow noreferrer">Python's official documentation</a>, I get this:</p>
<blockquote>
<p>flush() Force bytes held in the buffer into the raw stream. A
  BlockingIOError should be raised if the raw stream blocks.</p>
<p>write(b) Write the bytes-like object, b, and return the number of
  bytes written. When in non-blocking mode, a BlockingIOError is raised
  if the buffer needs to be written out but the raw stream blocks.</p>
</blockquote>
<p>To the best of my newbie understanding, they both transfer information currently held in memory to a file on disk. The difference however that write() also returns information on how much information was stored, while flush() performs this task immediately. Is that correct?
In what circumstances would it then be preferable to apply write() over flush() and vice-versa?</p>
</div>
<div class="post-text" itemprop="text">
<p>[See also the comments by Stephen Rauch and Peter Wood]  Think about it in the context of a stream that is connected to something that is reading from that stream at the other end.</p>
<p>write(b) contributes b to that stream's buffer on your end.  It may or may not actually put all those bytes in so that they are 'sent' down the stream to the reader at the other end.</p>
<p>flush() on the other hand takes everything that is in the stream's buffer, and 'sends' it to the reader.</p>
<p>Basically, you use write(b) to load your data onto the stream, and then you all flush() at the end to make sure that everything has actually gone into the underlying stream and 'been sent', rather than sitting in the stream's buffer.</p>
<p>So, for example, if I connect my computer to another device using the PySerial package (which creates a serial connection that effectively works as a stream), then to put some data into that stream, I will use write(b).  To make certain that all that data has gone through the serial connection and through to the other device however, I will call flush().  This is because write(b) doesn't guarantee that all (or any in fact) of that data will actually be sent to the other device immediately.</p>
</div>
<span class="comment-copy">but <code>flush</code> takes no arguments... they're not the same at all. The doc you copied shows an argument for <code>write</code> and none for <code>flush</code>. <code>flush</code> forces data written using <code>write</code> to be dumped to the media.</span>
<span class="comment-copy">Have you tried using both functions? It should become clear that they do different things.</span>
<span class="comment-copy"><code>write()</code> sends the data from your program into the IO subsystem where it may be buffered. <code>flush()</code> tells the IO subsystem that you would like to commit any data that has been buffered.</span>
<span class="comment-copy">If you've not previously called <code>write</code>, <code>flush</code> will do nothing.</span>
