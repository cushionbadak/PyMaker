<div class="post-text" itemprop="text">
<p>I have some data with start and end times in it (datetime format), and I want to calculate duration in hours based on a more restricted date range. But so far, I've been unsuccessful. (Still very much an amateur with python.)</p>
<p>Example: John Doe lived at 123 Main St from 1990-01-01T00:00:00.0 to 2016-12-31T23:59:59.0, but I want to know how many hours he lived there between October and December 2015.</p>
<p>The code below will successfully calculates hours, but I haven't been able to successfully filter the datetimes, so that I only get hours between the dates of Oct 1, 2015 and Dec 31, 2015.</p>
<pre><code>from datetime import datetime

# The getValue function retrieves the datetime values from the table
time1str = getValue("START_DT_TM")
time2str = getValue("STOP_DT_TM")

# Intended date range
# periodstart = datetime.strptime("2015-10-01T00:00:00.0", '%Y-%m-%dT%H:%M:%S.%f')
# periodend = datetime.strptime("2015-12-31T23:59:59.0", '%Y-%m-%dT%H:%M:%S.%f')

time1 = datetime.strptime(time1str, '%Y-%m-%dT%H:%M:%S.%f')
time2 = datetime.strptime(time2str, '%Y-%m-%dT%H:%M:%S.%f')
timen = datetime.strptime(nowstr, '%Y-%m-%d %H:%M:%S.%f')
timef = (time2-timen).days*24

if timef &gt; 0:
    delta = timen - time1
    seconds = delta.seconds/1440
    days = delta.days*24
    return str(days+seconds)
else:
    delta = time2 - time1
    seconds = delta.seconds/1440
    days = delta.days*24
    return str(days+seconds)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to do two things:</p>
<ul>
<li><p>Determine if your range needs adjusting; if someone didn't move to the place until after October 1st, then you need to pick the later date that they did actually start living at the house. The same applies for the end date.</p></li>
<li><p>Then calculate the number of hours between the start and end date (adjusted as needed). Take into account that this may be 0!</p></li>
</ul>
<p>I'm leaving out converting values to <code>datetime</code> objects here; you have that down correctly already. So given <code>time1</code> and <code>time2</code> being the start and end times a person lives at an address, and <code>periodstart</code> and <code>periodend</code> are the boundaries for which you want to know the number of hours:</p>
<pre><code># Adjust the start, pick the later value
periodstart = max(periodstart, time1)
# Adjust the end, pick the earlier value
periodend = min(periodend, time2)

duration = periodend - periodstart
hours = duration.total_seconds() // 3600
</code></pre>
<p>I took the <a href="https://docs.python.org/3/library/datetime.html#datetime.timedelta.total_seconds" rel="nofollow noreferrer"><code>timedelta.total_seconds()</code> method</a> rather than the <code>.days</code> attribute here to make sure you incorporate durations fractions of a day in your hour count.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; time1, time2 = datetime(1990, 1, 1, 0, 0), datetime(2016, 12, 31, 23, 59, 59)
&gt;&gt;&gt; periodstart, periodend = datetime(2015, 10, 1, 0, 0), datetime(2015, 12, 31, 23, 59, 59)    
&gt;&gt;&gt; periodstart = max(periodstart, time1)
&gt;&gt;&gt; periodend = min(periodend, time2)
&gt;&gt;&gt; duration = periodend - periodstart
&gt;&gt;&gt; duration
datetime.timedelta(91, 86399)
&gt;&gt;&gt; duration.total_seconds() // 3600
2207.0
</code></pre>
<p>This still holds true when <code>time1</code> or <code>time2</code> fall within the period:</p>
<pre><code>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; time1 = periodstart + timedelta(days=25) # moved in after the periodstart date
&gt;&gt;&gt; periodstart = max(periodstart, time1)
&gt;&gt;&gt; periodend = min(periodend, time2)
&gt;&gt;&gt; duration = periodend - periodstart
&gt;&gt;&gt; duration.total_seconds() // 3600
1607.0
&gt;&gt;&gt; time1, time2 = datetime(1990, 1, 1, 0, 0), datetime(2016, 12, 31, 23, 59, 59)
&gt;&gt;&gt; periodstart, periodend = datetime(2015, 10, 1, 0, 0), datetime(2015, 12, 31, 23, 59, 59)
&gt;&gt;&gt; time2 = periodend - timedelta(days=42)   # moved out before periodend
&gt;&gt;&gt; periodstart = max(periodstart, time1)
&gt;&gt;&gt; periodend = min(periodend, time2)
&gt;&gt;&gt; duration = periodend - periodstart
&gt;&gt;&gt; duration.total_seconds() // 3600
1199.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have this method that I have used for computing the working days (from Monday to Friday) in a period.</p>
<pre><code>from datetime import date, timedelta

def working_days(fromdate, todate):
    daygenerator = (fromdate + timedelta(x + 1) for x in xrange((todate - fromdate).days))
    return sum(1 for day in daygenerator if day.weekday() &lt; 5)

print working_days(date(2018,01,10), date(2018,11,09))
</code></pre>
<p>Maybe changing the method in this way could work and you have just to multiply *24 the result obtaining the hours:</p>
<pre><code>def working_days(fromdate, todate):
    daygenerator = (fromdate + timedelta(x + 1) for x in xrange((todate - fromdate).days))
    return sum(1 for day in daygenerator)
</code></pre>
<p>I'm still a beginner, so probably someone will help you in a better way.</p>
</div>
<span class="comment-copy">why not just calculate the number of hours between Oct 1, 2015 and Dec 31, 2015? For any range you just need to determine upper and lower limit  by simple comparisons and then find the number of hours in that range, like you just did</span>
<span class="comment-copy">I should have been clearer. The issue is that, in the data I'm working with, there are multiple durations overlapping the range (Oct 1 - Dec 31). So, to use the same example, consider four different cases: Adam lives there prior to the period, but moves out during the period; Bob starts living there after the period begins, but leaves before the period ends; Chris begins living there after the period begins, but leaves after the period ends; and Dave lives there both before and after the period end. I need to be able to calculate the duration of each person's stay within a range.</span>
<span class="comment-copy">I'm not sure why exactly, but this is returning the wrong result. It's giving me the full duration of how long X lived at place Y, not just how long he lived there within the range of Oct 1 to Dec 31. So, I'm supposed to get a result (roughly) between 0 and 92 days (or equivalent in hours), but instead it gives me (e.g.) 3,000 days, because overall he lived there for several years.</span>
<span class="comment-copy">@BrianDonohue: other than having swapped <code>periodend</code> and <code>periodstart</code> in the subtraction, I get the correct answer (2207 hours), for your given inputs.</span>
