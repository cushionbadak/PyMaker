<div class="post-text" itemprop="text">
<p>I'm new programming on python(2.x) and even looking for hours i  couldn't solve the problem.
Python returns a KeyError</p>
<p>The (object).csv file is:</p>
<pre><code>id,name,type
1,low,player
</code></pre>
<p>The python code is:</p>
<pre><code>import csv

class Item(object):

    def setup(self, config):
        self.config = config
        self.label = config['label']
        self.name = config['name']
        self.type = config['type']
def create_item(config):
    new_item = Item()
    new_item.setup(config)
    return(new_item)

def populate():
    all_items = {}
    f = open('object.csv', 'rb')
    reader = csv.DictReader(f, delimiter = ',')
    for row in reader:
        new_item = (create_item(row))
        all_items[new_item.label] = new_item 
    return(all_items)
</code></pre>
<p>Python returns:</p>
<pre><code>Self.type = config['type']
KeyError: 'type'
</code></pre>
<p>The weird thing is that both in csv and in the python code the column header doesn't contain any typing error.
When i change the name of "id" column, the error returns to the new header (previously "id"). (The same happens when i add another header and try to read it)</p>
<p>Any help is welcome and sorry for the inconvenience.
grateful</p>
</div>
<div class="post-text" itemprop="text">
<pre><code> class Item(object):

      def setup(self, config):
          self.config = config
          self.id = config['id']
          self.name = config['name']
          self.type = config['type']

  def create_item(config):
          new_item = Item()
          new_item.setup(config)
          return(new_item)
  def populate():
          all_items = {}
          f = open('test.txt', 'r')
          reader = csv.DictReader(f, delimiter = ',')
          for row in reader:
              new_item = (create_item(row))
              all_items[new_item.id] = new_item
          return(all_items)
</code></pre>
<p>output: </p>
<pre><code>things = populate()
things.keys()
dict_keys(['1'])
</code></pre>
</div>
<span class="comment-copy">You have extra space around the commas so the real column names are <code>'id '</code>, <code>' name '</code> &amp; <code>' type'</code>. Try printing a row before calling <code>create_item</code> to see it in practice.</span>
<span class="comment-copy">The extra spaces were my mistake typing the post. Sorry about that. The return when i print the row is: '{'id': '1', 'name': 'low', 'type': 'player'}' but after that, the error persists</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Catch the exception</a> and in the except suite print <code>row</code> - are the keys what you expected?</span>
<span class="comment-copy">this output returns me: File "items.py", line 33, in populate f = open('files/object.csv', 'rb') RuntimeError: maximum recursion depth exceeded while calling a Python object I have no idea what it is</span>
<span class="comment-copy">the same happens with f = open('files/object.txt', 'r') [the same when I swap the all_items[new_item.label] for all_items[new_item.id]]</span>
<span class="comment-copy">@LeandroPeres, 1. this is a different error, so your problem is resolved. 2. The new issue you're encountering is already discussed here: <a href="http://stackoverflow.com/questions/14222416/recursion-in-python-runtimeerror-maximum-recursion-depth-exceeded-while-callin" title="recursion in python runtimeerror maximum recursion depth exceeded while callin">stackoverflow.com/questions/14222416/â€¦</a></span>
