<div class="post-text" itemprop="text">
<p><strong>Question:</strong> </p>
<p>How do I apply the same python code to multiple columns of data.</p>
<p><strong>Data Format:</strong></p>
<p>I am just learning python and I have written a script to reformat my data. My current format starts with 4 descriptive columns followed by many columns of data (e.g., 1/1)</p>
<pre><code>#CHROM POS REF ALT IND_1 IND_2 IND_3 IND_4
2L  6631    A   G   1/1 0/0 0/0 0/0
2L  6633    T   C   0/0 1/0 0/0 0/0
2L  6637    C   G   1/1 0/0 0/0 0/0
</code></pre>
<p>I am trying to change the 0 and 1 to the values in the REF and ALT columns, respectively with the desired end format to look like:</p>
<pre><code>2L  6631    A   G   G/G A/A A/A A/A
2L  6633    T   C   T/T C/T T/T T/T
2L  6637    C   G   G/G C/C C/C C/C 
</code></pre>
<p><strong>What I have so far:</strong></p>
<p>I have written a script that will do this for an single column, but I have 100+ columns of data so I was wondering if there is a way to apply this script to multiple columns instead of writing it out specifically for each one.</p>
<pre><code>for line in openfile:
    ## skip header
    if line.startswith("#CHROM"):
        continue
    columns = line.rstrip().split("\t")
    CHROM = columns[0]
    POS = columns[1]
    REF = columns[2]
    ALT = columns[3]
    ALLELES1 = columns[4].replace("0",REF).replace("1",ALT).replace(".","0")
    ALLELES2 = columns[5].replace("0",REF).replace("1",ALT).replace(".","0")
    print CHROM, POS, REF, ALT, ALLELES1, ALLELES2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest implementing this using a list comprehension:</p>
<pre><code>for line in f.readlines():
    ## skip header
    if line.startswith("#CHROM"):
        continue
    columns = line.rstrip().split("\t")
    REF, ALT = columns[2:4]
    modified = [c.replace("0", REF).replace("1", ALT).replace(".", "0")
                for c in columns[4:]]
    print('\t'.join(columns[0:4] + modified))
</code></pre>
<p>Three additions to your code:</p>
<pre><code>REF, ALT = columns[2:4]
</code></pre>
<p>Which is a clean way to grab two elements from the list.</p>
<pre><code>modified = [c.replace("0", REF).replace("1", ALT).replace(".", "0")
            for c in columns[4:]]
</code></pre>
<p>Which is a list comprehension to do the replace across all of the fields at once. And then </p>
<pre><code>print('\t'.join(columns[0:4] + modified))
</code></pre>
<p>which reassembles everything at once.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my solution:</p>
<pre><code>def read_data(filename):
    with open(filename, "r") as file_handle:
        for line in file_handle:
            # skip header
            if line.startswith("#CHROM"):
                continue
            columns = line.rstrip().split("\t")
            CHROM = columns[0]
            POS = columns[1]
            REF = columns[2]
            ALT = columns[3]
            ALLELS = [value.replace("0", REF).replace("1", ALT).replace(".", "0") for value in columns[4:]]
            print("\t".join(columns[0:4] + ALLELS))
</code></pre>
<p>You call it like this:</p>
<pre><code>read_data("file.txt")
</code></pre>
<p><code>[value.replace("0", REF).replace("1", ALT).replace(".", "0") for value in columns[4:]]</code>is called a "List comprehension". It looks at every value of a list and does something with it. See <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">Documentation</a>.</p>
<p><code>columns[4:]</code> means, look at all my columns and get me the columns starting at index 4 until the last column.</p>
<p><code>sep="\t"</code> in the <code>print</code> statement means, that all the elements you pass to the print function should be printed with a TAB in between them.</p>
<p><code>"\t".join(columns[0:4] + ALLELS)</code> returns a single string in which all elements are joined by a TAB. See <a href="https://stackoverflow.com/a/42330119/5472124">Stephen Rauch</a>.</p>
</div>
<span class="comment-copy">Read about functions. I think they do what you want.</span>
<span class="comment-copy">Thanks for the suggestion!</span>
<span class="comment-copy">Thank you for such a clear explanation.  The code works perfectly and the description makes it clear what each part does so can adjust and implement it myself in the future.</span>
