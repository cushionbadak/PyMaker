<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a>
<span class="question-originals-answer-count">
                    57 answers
                </span>
</li>
</ul>
</div>
<p>I'm looking to fill a 3x3 matrix in the most pythonic way from a 1D list.</p>
<p>So transform from the first to the second</p>
<pre><code>[1,2,3,4,5,6,7,8,9]

[ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]
</code></pre>
<p>so far I can fill the first as such:</p>
<pre><code>l = [1,2,3,4,5,6,7,8,9]
m = [[l[y] for y in range(3)] for x in range(3)]
</code></pre>
<p>but this gives</p>
<pre><code>[['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this using <code>list comprehension</code>:</p>
<pre><code>a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
b = [a[k:k+3] for k in range(0,len(a),3)]
</code></pre>
<p>Output:</p>
<pre><code>print(b)
&gt;&gt;&gt; [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</code></pre>
<p>You can also, create a method for this case to handle the resizing of your array:</p>
<pre><code>def reshape(a = list, r = 1):
    return [a[k:k+r] for k in range(0,len(a),r)]

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Output:</p>
<pre><code>print(reshape(a, 3))
&gt;&gt;&gt; [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(reshape(a,2))
&gt;&gt;&gt; [[1, 2], [3, 4], [5, 6], [7, 8], [9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given:</p>
<pre><code>l = [1,2,3,4,5,6,7,8,9]
</code></pre>
<p>You can create N <a href="https://docs.python.org/3/library/functions.html?highlight=iter#iter" rel="nofollow noreferrer"><em>iterators</em></a> and then <a href="https://docs.python.org/3/library/functions.html?highlight=zip#zip" rel="nofollow noreferrer"><code>zip</code></a> them together. This technique is described in the <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools%20recipes#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> Recipes</a> section of the docs, under <code>grouper</code>.</p>
<pre><code>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

print(list(grouper(l, 3)))
</code></pre>
<p>Output:</p>
<pre><code>[(1, 2, 3), (4, 5, 6), (7, 8, 9)]
</code></pre>
</div>
<span class="comment-copy">see numpy.reshape <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</a></span>
