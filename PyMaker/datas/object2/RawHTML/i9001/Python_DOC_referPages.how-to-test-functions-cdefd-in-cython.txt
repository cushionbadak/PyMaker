<div class="post-text" itemprop="text">
<p>I have a .pyx file in which I define some functions, e.g.</p>
<pre><code>cdef double foo(double a) nogil:
    return 3. * a
</code></pre>
<p>How could I unit test the behavior of such functions outside the pyx file? Since they are cdef'd, I am not able to simply import them...</p>
</div>
<div class="post-text" itemprop="text">
<p>To test <code>cdef</code>-fuctionality you need to write your tests in Cython. One could try to use <code>cpdef</code>-functions, however not all signatures can be used in this case (for example signatures using pointers like <code>int *</code>, <code>float *</code> and so on).</p>
<p>To access the cdef-functions you will need to "export" them via a pxd-file:</p>
<pre><code>#my_module.pyx:
cdef double foo(double a) nogil:
    return 3. * a

#my_module.pxd:
cdef double foo(double a) nogil
</code></pre>
<p>Now the functionality can be cimported and tested in a Cython-tester:</p>
<pre><code>#test_my_module.pyx
cimport my_module

def test_foo():
    assert my_module.foo(2.0)==6.0
    print("test ok")

test_foo()
</code></pre>
<p>And now</p>
<pre><code>&gt;&gt;&gt; cythonize -i my_module.pyx
&gt;&gt;&gt; cythonize -i test_my_module.pyx 
&gt;&gt;&gt; python -c "import test_my_module"
test ok
</code></pre>
<p>Where to go from there depends on your testing infrastructure. </p>
<hr/>
<p>For example if you use <code>unittest</code>-module, then you could use pyximport to cythonize/load the test-module inspect it and convert all test cases into <code>unittest</code>-test cases or use <code>unittest</code> directly in your cython code (probably a better solution).</p>
<p>Here is a proof of concept for <code>unittest</code>:</p>
<pre><code>#test_my_module.pyx
cimport my_module
import unittest

class CytTester(unittest.TestCase): 
    def test_foo(self):
        self.assertEqual(my_module.foo(2.0),6.0)
</code></pre>
<p>Now we only need to translate and to import it in pure python to be able to <code>unittest</code> it:</p>
<pre><code>#test_cy.py 
import pyximport; pyximport.install()
from test_my_module import *

import unittest
</code></pre>
<p>And now:</p>
<pre><code>&gt;&gt;&gt; python -m unittest test_cy.py
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
</code></pre>
<p>Btw, there is no need to cythonize pyx-modules explicitly - <code>pyximport</code> does it for us automatically.</p>
<p><strong>A word of warning:</strong> <code>pyximport</code> caches cythonized c-files in <code>~/.pyxbld</code> (or similar on other OSes) and as long as <code>test_my_module.pyx</code> has not changed the extension isn't rebuild. This might be a problem when <code>my_module</code> changes and it leads to binary incompatibility (luckily python warns if this is the case).</p>
<p>One has to ensure in the test-environment, that either the pyx-files are rebuild (it is timestamp-based) or that the cached-files are deleted (one could use a temporary directory, for example created with <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory" rel="nofollow noreferrer"><code>tempfile.TemporaryDirectory()</code></a>,  via <a href="https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#arguments" rel="nofollow noreferrer"><code>pyximport.install(build_dir=...)</code></a>).</p>
<hr/>
<p>If you use a virtual environment and install you cython-package via <code>setup.py</code> (or a similar workflow), you need <a href="https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#distributing-cython-modules" rel="nofollow noreferrer">to make sure that <code>*.pxd</code> files are also included into installation</a>, i.e. your setup-file needs to be augmented with:</p>
<pre><code>from setuptools import setup, find_packages, Extension
# usual stuff for cython-modules here
...

kwargs = {
      # usual stuff for cython-modules here
      ...

      #ensure pxd-files:
      'package_data' : { 'my_module': ['*.pxd']},
      'include_package_data' : True,
      'zip_safe' : False  #needed because setuptools are used
}

setup(**kwargs)
</code></pre>
</div>
<span class="comment-copy">How about writing a <code>def</code> or <code>cpdef</code> that calls <code>foo</code>?</span>
<span class="comment-copy">Is there a good solution to this that does not involve cpdef?</span>
<span class="comment-copy">Thanks. That is pretty amazing.</span>
