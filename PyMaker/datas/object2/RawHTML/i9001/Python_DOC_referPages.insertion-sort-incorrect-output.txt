<div class="post-text" itemprop="text">
<p>I am trying to learn more about the insertion sort algorithm by writing a little script, however I got stuck.</p>
<p>Everything works great, except one number is being displayed multiple times.</p>
<p><strong>My Code:</strong></p>
<pre><code>#
# Insertion Sort
#

def _ord(l):
 lst=[]
 for k in l:
  if not lst:
   lst.append(k)
   continue

  for a,b in enumerate(reversed(lst)):
   if k &lt;= lst[a]:
    lst.insert(a,k)

   if a == len(lst)-1:
    lst.append(k)

 return lst

if __name__ == '__main__':
 l = [3,2,4,6,5,1]
 print _ord(l)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[1, 1, 1, 1, 1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def _ord(l):
    lst=[]
    for k in l:
        print k
        if not lst:
            lst.append(k)
            continue

        for a,b in enumerate(reversed(lst)):
            print a, b
            if k &lt;= lst[a]:
                lst.insert(a,k)
                break  # &lt;-- add this

            if a == len(lst)-1:
                lst.append(k)
        print lst
        print '-' * 80

    return lst


l = [3,2,4,6,5,1]
print _ord(l)
</code></pre>
<p>You can use <code>print</code> or <code>pdb</code> to debug your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is when <code>k=1</code>, <code>k &lt;= lst[a]</code> is <code>True</code> for every other integers in the list, so it inserted five times.</p>
<p>A quick fix to the fragment is to introduce <code>break</code> point:</p>
<pre><code>def _ord(l):
 lst=[]
 for k in l:
  if not lst:
   lst.append(k)
   continue

  for a,b in enumerate(reversed(lst)):
   if k &lt;= lst[a]:
    lst.insert(a,k)
    break
   if a == len(lst)-1:
    lst.append(k)

 return lst

if __name__ == '__main__':
 l = [3,2,4,6,5,1]
 print _ord(l)
</code></pre>
<p>EDIT: Have a look at <a href="http://www.pythontutor.com/visualize.html#code=def%20_ord%28l%29%3A%0A%20lst%3D%5B%5D%0A%20for%20k%20in%20l%3A%0A%20%20if%20not%20lst%3A%0A%20%20%20lst.append%28k%29%0A%20%20%20continue%0A%0A%20%20for%20a,b%20in%20enumerate%28reversed%28lst%29%29%3A%0A%20%20%20if%20k%20%3C%3D%20lst%5Ba%5D%3A%0A%20%20%20%20lst.insert%28a,k%29%0A%0A%20%20%20if%20a%20%3D%3D%20len%28lst%29-1%3A%0A%20%20%20%20lst.append%28k%29%0A%0A%20return%20lst%0A%0Aif%20__name__%20%3D%3D%20'__main__'%3A%0A%20l%20%3D%20%5B3,2,4,6,5,1%5D%0A%20print%20_ord%28l%29&amp;cumulative=false&amp;curInstr=65&amp;heapPrimitives=false&amp;mode=display&amp;origin=opt-frontend.js&amp;py=2&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" rel="nofollow noreferrer">this link</a> in order to check out the execution of your fragment.</p>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>def _old(l):
    for i in range(1, len(l)):
        tmp = l[i]
        for j in reversed(range(i)):
            if l[j] &gt; tmp:
                l[j+1] = l[j]
                l[j] = tmp
            else:
                break
    return l

if __name__ == '__main__':
    l = [3,2,4,6,5,1]
    print(_old(l))
</code></pre>
</div>
<span class="comment-copy">Side-note: While doing this as a learning exercise is totally fine, I should note, for production code, you'd want to use <code>list.sort</code>/<code>sorted</code> (to sort a whole bunch of elements) or <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">the <code>bisect</code> module</a> (to insert individual elements into an already sorted <code>list</code>). For general purpose sorts, basically nothing you write in Python itself can beat the built-ins (which on the reference interpreter are C accelerated).</span>
