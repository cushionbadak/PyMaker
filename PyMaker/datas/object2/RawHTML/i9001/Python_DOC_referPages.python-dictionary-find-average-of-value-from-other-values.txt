<div class="post-text" itemprop="text">
<p>I have the following list</p>
<pre><code>count = 3.5, price = 2500

count = 3, price = 400

count = 2, price = 3000

count = 3.5, price = 750

count = 2, price = 500
</code></pre>
<p>I want to find the average price for all where the count is the same.  For example:</p>
<pre><code>count = 2, price = 3000

count = 2, price = 500

3000 + 500 = 3500

3500/2 = 1750
</code></pre>
<p><strong>Avg for 'count 2' is 1750</strong></p>
<p>Here's my code so far</p>
<pre><code>avg_list = [value["average"] for value in dictionary_database_list] 

counter_obj = collections.Counter(count_list)

print ("AVG:")

for i in counter_obj:

    print (i, counter_obj[i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'll admit I'm not 100% clear on what you're looking for here, but I'll give it a shot:</p>
<p>A good strategy when you want to iterate over a list of "things" and accumulate some kind of information about "the same kind of thing" is to use a hash table. In Python, we usually use a <code>dict</code> for algorithms that require a hash table.</p>
<p>To collect enough information to get the average price for each item in your list, we need:</p>
<blockquote>
<p>a) the total number of items with a specific "count"</p>
<p>b) the total price of items with a specific "count"</p>
</blockquote>
<p>So let's build a data structure that maps a "count" to a dict containing "total items" and "total price" for the item with that "count".</p>
<p>Let's take our input in the format:</p>
<pre><code>item_list = [
    {'count': 3.5, 'price': 2500},
    {'count': 3, 'price': 400},
    {'count': 2, 'price': 3000},
    {'count': 3.5, 'price': 750},
    {'count': 2, 'price': 500},
]
</code></pre>
<p>Now let's map the info about "total items" and "total price" in a <code>dict</code> called <code>items_by_count</code>:</p>
<pre><code>for item in item_list:
    count, price = item['count'], item['price']
    items_by_count[count]['total_items'] += 1
    items_by_count[count]['total_price'] += price
</code></pre>
<p><strong>But wait!</strong> <code>items_by_count[count]</code> will throw a <code>KeyError</code> if <code>count</code> isn't already in the dict. This is a good use case for <a href="https://docs.python.org/2/library/collections.html#defaultdict-objects" rel="nofollow noreferrer"><code>defaultdict</code></a>. Let's define the default value of a <code>count</code> we've never seen before as 0 total price, and 0 total items:</p>
<pre><code>from collections import defaultdict
items_by_count = defaultdict(lambda: {
    'total_items': 0,
    'total_price': 0
})
</code></pre>
<p><em>Now</em> our code won't throw an exception every time we see a new value for <code>count</code>.</p>
<p>Finally, we need to actually take the average. Let's get the information we need in another <code>dict</code>, mapping count to average price. This is a good use case for a <a href="https://stackoverflow.com/a/14507637/7484636">dict comprehension</a>:</p>
<pre><code>{count: item['total_price'] / item['total_items']
for count, item in items_by_count.iteritems()}
</code></pre>
<p>This iterates over the <code>items_by_count</code> dict and creates the new dict that we want.</p>
<p>Putting it all together:</p>
<pre><code>from collections import defaultdict

def get_average_price(item_list):
    items_by_count = defaultdict(lambda: {
        'total_items': 0,
        'total_price': 0
    })

    for item in item_list:
        count, price = item['count'], item['price']
        items_by_count[count]['total_items'] += 1
        items_by_count[count]['total_price'] += price

    return {count: item['total_price'] / item['total_items']
            for count, item in items_by_count.iteritems()}
</code></pre>
<p>If we pass in our example input dict, this function returns:
<code>{3.5: 1625, 2: 1750, 3: 400}</code></p>
<p>Which is hopefully the output you want! Be cautious of gotchas like <a href="https://stackoverflow.com/a/2958717/7484636">float division</a> in your particular Python version.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to iterate over your items </p>
<p><a href="https://docs.python.org/2/library/stdtypes.html#dict.items" rel="nofollow noreferrer">See documentation</a></p>
<ul>
<li><code>avg(dictionary.values())</code> is probably what you want</li>
</ul>
</div>
<span class="comment-copy">The "dictionary" tag looks like a good start--what have you tried so far?</span>
<span class="comment-copy">simple to code! think little harder you will do it!! :)</span>
<span class="comment-copy">If only there was a function that could <b>group</b> the items <b>by</b> a shared key! Oh, wait, <a href="https://docs.python.org/3/library/itertools.html?highlight=groupby#itertools.groupby" rel="nofollow noreferrer">there is!</a></span>
<span class="comment-copy">I'm able to get the count for an object.  So I was able to add up how many times count = 2 showed up.  But I don't know how to compare that back to the price value.   Here's what I have</span>
<span class="comment-copy">@KernelPanic True. But that boils down to "sorting the data", since grouping it is what groupby <i>does</i>, and computing the average is going to have to happen anyway. (And calling <code>statistics.mean()</code> isn't really that hard, is it?)</span>
<span class="comment-copy">That is exactly what I was looking for and it worked perfectly!! You're awesome!</span>
<span class="comment-copy">While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes. - <a href="/review/low-quality-posts/15253408">From Review</a></span>
<span class="comment-copy">I though I could help just posting a single method since @phunsukwangdu comment, and then upvoted for me too. 'simple code'. PD:I posted a permalink from python official documentation. Changes could happen but deletion of a so common method...idts</span>
<span class="comment-copy">I'm still pretty lost with this one... Not sure how to implement avg(dictionary.values())</span>
