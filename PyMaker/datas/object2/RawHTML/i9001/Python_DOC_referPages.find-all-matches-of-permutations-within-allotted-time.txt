<div class="post-text" itemprop="text">
<p>I'm writing a program that takes 9 characters, creates all possible permutations, and grabs a dictionary files for each character and then creates a set of all possible words. What I need to do is compare all permutations to words and return matches. </p>
<pre><code>import os, itertools

def parsed(choices): 
    mySet = set()
    location = os.getcwd()
    for item in choices: 
        filename = location + "\\dicts\\%s.txt" % (item)
        mySet.update(open(filename).read().splitlines())

    return mySet  

def permutations(input): 
    possibilities = []
    pospos = []   

    for x in range(3,9):
        pospos.append([''.join(i) for i in itertools.permutations(input, x)])


    for pos in pospos: 
        for i in pos: 
            possibilities.append(i)
    return possibilities
</code></pre>
<p>The problematic function is this one: </p>
<pre><code>def return_matches(): 
    matches = []
    words = parsed(['s','m','o','k','e', 'j', 'a', 'c', 'k'])
    pos = permutations(['s','m','o','k','e', 'j', 'a', 'c', 'k'])

    for item in pos:  
        if item in words: 
            matches.append(item)

    return matches
</code></pre>
<p>This code should return: </p>
<pre><code>matches = ['a', 'om', 'ja', 'jo', ..., 'jacks', 'cokes', 'kecks', 'jokes', 'cakes', 'smoke', 'comes', 'makes', 'cameos']
</code></pre>
<p>If I get this code to work properly, it takes 10 - 15 minutes to complete. On the other hand, every attempt at making this execute within allotted time, it can only be done with 5 or less characters or returns the wrong result. </p>
<p>So my question is how to optimize this code to return the right result, within 30 seconds time. </p>
<p><strong>Edit</strong>
<a href="http://www.mso.anu.edu.au/~ralph/OPTED/v003" rel="nofollow noreferrer">http://www.mso.anu.edu.au/~ralph/OPTED/v003</a> this is the website I'm scraping the dictionary files from. </p>
</div>
<div class="post-text" itemprop="text">
<p>It wastes RAM and time storing all the permutations in a list before you test if they're valid. Instead, test the permutations as you generate them, and save the valid ones into a set to eliminate duplicates. </p>
<p>Duplicates are possible because of the way <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a> works:</p>
<blockquote>
<p>Elements are treated as unique based on their position, not on their
  value. So if the input elements are unique, there will be no repeat
  values in each permutation.</p>
</blockquote>
<p>Your input word "SMOKEJACK" contains 2 Ks, so every permutation containing K gets generated twice.</p>
<p>Anyway, here's some code that uses the <a href="http://www.3zsoftware.com/download/" rel="nofollow noreferrer">SOWPODS</a> Scrabble word list for English.</p>
<pre><code>from itertools import permutations

# Get all the words from the SOWPODS file
all_words = set('AI')
fname = 'scrabble_wordlist_sowpods.txt'
with open(fname) as f:
    all_words.update(f.read().splitlines())

print(len(all_words))

choices = 'SMOKEJACK'

# Generate all permutations of `choices` from length 3 to 8 
# and save them in a set to eliminate duplicates.
matches = set()
for n in range(3, 9):
    for t in permutations(choices, n):
        s = ''.join(t)
        if s in all_words:
            matches.add(s)

for i, s in enumerate(sorted(matches)):
    print('{:3} {}'.format(i, s))
</code></pre>
<p><strong>output</strong></p>
<pre><code>216555
  0 ACE
  1 ACES
  2 ACME
  3 ACMES
  4 AESC
  5 AKE
  6 AKES
  7 AMOK
  8 AMOKS
  9 ASK
 10 CAKE
 11 CAKES
 12 CAM
 13 CAME
 14 CAMEO
 15 CAMEOS
 16 CAMES
 17 CAMS
 18 CASE
 19 CASK
 20 CEAS
 21 COKE
 22 COKES
 23 COMA
 24 COMAE
 25 COMAKE
 26 COMAKES
 27 COMAS
 28 COME
 29 COMES
 30 COMS
 31 COS
 32 COSE
 33 COSMEA
 34 EAS
 35 EKKA
 36 EKKAS
 37 EMS
 38 JACK
 39 JACKS
 40 JAK
 41 JAKE
 42 JAKES
 43 JAKS
 44 JAM
 45 JAMES
 46 JAMS
 47 JOCK
 48 JOCKS
 49 JOE
 50 JOES
 51 JOKE
 52 JOKES
 53 KAE
 54 KAES
 55 KAM
 56 KAME
 57 KAMES
 58 KAS
 59 KEA
 60 KEAS
 61 KECK
 62 KECKS
 63 KEKS
 64 KOA
 65 KOAS
 66 KOS
 67 MAC
 68 MACE
 69 MACES
 70 MACK
 71 MACKS
 72 MACS
 73 MAE
 74 MAES
 75 MAK
 76 MAKE
 77 MAKES
 78 MAKO
 79 MAKOS
 80 MAKS
 81 MAS
 82 MASE
 83 MASK
 84 MES
 85 MESA
 86 MOA
 87 MOAS
 88 MOC
 89 MOCK
 90 MOCKS
 91 MOCS
 92 MOE
 93 MOES
 94 MOKE
 95 MOKES
 96 MOS
 97 MOSE
 98 MOSK
 99 OAK
100 OAKS
101 OCA
102 OCAS
103 OES
104 OKA
105 OKAS
106 OKE
107 OKES
108 OMS
109 OSE
110 SAC
111 SACK
112 SAE
113 SAKE
114 SAM
115 SAME
116 SAMEK
117 SCAM
118 SEA
119 SEAM
120 SEC
121 SECO
122 SKA
123 SKEO
124 SMA
125 SMACK
126 SMOCK
127 SMOKE
128 SOAK
129 SOC
130 SOCA
131 SOCK
132 SOJA
133 SOKE
134 SOMA
135 SOME
</code></pre>
<p>This code runs in around 2.5 seconds on my rather ancient 32 bit 2GHz machine running Python 3.6.0 on Linux. It's slightly faster on Python 2 (since Python2 strings are ASCII, not Unicode).</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of generating <em>all</em> the permutations of your letters, you should use a <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">Prefix Tree, or Trie</a>, to keep track of all the <em>prefixes</em> to valid words. </p>
<pre><code>def make_trie(words):
    res = {}
    for word in words:
        d = res
        for c in word:
            d = d.setdefault(c, {})
        d["."] = None
    return res
</code></pre>
<p>We are using <code>d["."] = None</code> here to signify where a prefix actually becomes a valid word. Creating the tree can take a few seconds, but you only have to do this once.</p>
<p>Now, we can go through our letters in a recursive function, checking for each letter whether it contributes to a valid prefix in the current stage of the recursion: (That <code>rest = letters[:i] + letters[i+1:]</code> part is not very efficient, but as we will see it does not matter much.)</p>
<pre><code>def find_words(trie, letters, prefix=""):
    if "." in trie:  # found a full valid word
        yield prefix
    for i, c in enumerate(letters):
        if c in trie:  # contributes to valid prefix
            rest = letters[:i] + letters[i+1:]
            for res in find_words(trie[c], rest, prefix + c):
                yield res  # all words starting with that prefix
</code></pre>
<p>Minimal example:</p>
<pre><code>&gt;&gt;&gt; trie = make_trie(["cat", "cats", "act", "car", "carts", "cash"])
&gt;&gt;&gt; trie
{'a': {'c': {'t': {'.': None}}}, 'c': {'a': {'r': {'t': {'s': 
    {'.':  None}}, '.': None}, 's': {'h': {'.': None}}, 't': 
    {'s': {'.': None}, '.': None}}}}
&gt;&gt;&gt; set(find_words(trie, "acst"))
{'cat', 'act', 'cats'}
</code></pre>
<p>Or with your 9 letters and the words from <a href="http://www.3zsoftware.com/download" rel="nofollow noreferrer"><code>sowpods.txt</code></a>:</p>
<pre><code>with open("sowpods.txt") as words:
    trie = make_trie(map(str.strip, words))  # ~1.3 s on my system, only once
    res = set(find_words(trie, "SMOKEJACK")) #  ~2 ms on my system
</code></pre>
<p>You have to pipe the result through a <code>set</code> as you have duplicate letters. This yields 153 words, after a total of 623 recursive calls to <code>find_words</code> (measured with a counter variable). Compare that to 216,555 words in the <code>sowpods.txt</code> file and a total of 986,409 permutations of all the 1-9 letter combinations that could make up a valid word. Thus, once the <code>trie</code> is initially generated, <code>res = set(find_words(...))</code> takes only a few milli seconds.</p>
<hr/>
<p>You could also change the <code>find_words</code> function to use a mutable dictionary of letter counts instead of a string or list of letters. This way, no duplicates are generated and the function is called fewer times, but the overall running time does not change much.</p>
<pre><code>def find_words(trie, letters, prefix=""):
    if "." in trie:
        yield prefix
    for c in letters:
        if letters[c] and c in trie:
            letters[c] -= 1
            for res in find_words(trie[c], letters, prefix + c):
                yield res
            letters[c] += 1
</code></pre>
<p>Then call it like this: <code>find_words(trie, collections.Counter("SMOKEJACK"))</code></p>
</div>
<span class="comment-copy">What do you mean "I have got this code to work as it should, but ... it either takes 10-15 minutes or it doesn't return the right results"? If it works as it should, how can it not return the right results?</span>
<span class="comment-copy">What I meant is it returns the right results, but it takes too long (10 - 15min) or it doesn't work. I'll edit that bit. I do apologize for my phrasing.</span>
<span class="comment-copy">I assume you've used those files from www.mso.anu.edu.au to build your own word list files, stripping off the definitions, and putting one word per line. I recommend using the SOWPODS file I linked in the comment on your previous question. However, it <i>is</i> a Scrabble word list, so it doesn't contain one letter words, and so you need to initialise your word set with those words, eg `set('AI').</span>
<span class="comment-copy">This is a follow-on question from <a href="http://stackoverflow.com/questions/42203482/dictionary-update-sequence-element-error" title="dictionary update sequence element error">stackoverflow.com/questions/42203482/â€¦</a></span>
<span class="comment-copy">Have you considered using a <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">Prefix Tree, or Trie</a> for this? Instead of generating all the permutations, take one letter at a time and only expand further on this "path" if there is it's actually a prefix in the Trie.</span>
<span class="comment-copy">Thank you very much for helping me (in both my questions). I really do appreciate your help.</span>
<span class="comment-copy">Why are you restricting the permutations to 3 or more letters? Yes, there is something similar in OP's original code, but then again, the expected output clearly contains one- and two-character words.</span>
<span class="comment-copy">@tobias_k And in the original question the OP only wanted full-length permutations. The main reason I used the <code>range(3, 9)</code> shown in the OP's code rather than using eg <code>range(1, 1 + len(choices))</code> was to keep the length of the output small. The OP seems to be happy enough with the code I posted...</span>
<span class="comment-copy">I was just wondering why I got a different number of results than you. But apart from starting only at 3, why do you stop before 9? This way you are missing "smokejack", which in itself is a valid word from sawpods, too.</span>
<span class="comment-copy">Thank you, while I got @PM 2Ring version to work perfectly, I will definitely rewrite the code with your version too. Can't learn too much.</span>
