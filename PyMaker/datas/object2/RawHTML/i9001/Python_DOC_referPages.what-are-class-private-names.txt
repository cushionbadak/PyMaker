<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name">What is the meaning of a single and a double underscore before an object name?</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>Python's <a href="https://docs.python.org/3/index.html" rel="nofollow noreferrer">online documentation</a> contains the description quoted below.<br/>
Could someone please explain what it means?</p>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer">2.3.2. Reserved classes of identifiers</a></p>
<blockquote>
<p><code>__*</code> Class-private names. Names in this category, when used within
  the context of a class definition, are re-written to use a mangled
  form to help avoid name clashes between “private” attributes of base
  and derived classes.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Whenever code written inside a <code>class</code> uses a name that begins with two underscores but doesn't also end with two underscores the compiler replaces that name with a mangled form that includes the class name:</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
    __bar = None
    def set_bar(self, v):
        self.__bar = v


&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.set_bar(42)
&gt;&gt;&gt; f.__dict__
{'_Foo__bar': 42}
</code></pre>
<p>What this means in practice is that when you create subclasses then (provided the subclass has a different name than the base class) you won't accidentally collide with the private names used in the base class.</p>
<p>It isn't a security mechanism as you can still get at the 'private' values using <code>getattr</code>, or even just the mangled form of the name, and it isn't perfect protection as sometimes class hierarchies have both base and derived classes with the same name.</p>
</div>
<span class="comment-copy">you can actually get it using <code>f._Foo_bar</code> directly ☺</span>
<span class="comment-copy">@zmo, yes you can. Why did that never occur to me? Added to my answer.</span>
