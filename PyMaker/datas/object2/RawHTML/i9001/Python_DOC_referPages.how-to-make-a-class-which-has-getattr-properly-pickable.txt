<div class="post-text" itemprop="text">
<p>I extended <code>dict</code> in a simple way to directly access it's values with the <code>d.key</code> notation instead of <code>d['key']</code>:</p>
<pre><code>class ddict(dict):

    def __getattr__(self, item):
        return self[item]

    def __setattr__(self, key, value):
        self[key] = value
</code></pre>
<p>Now when I try to pickle it, it will call <code>__getattr__</code> to find <code>__getstate__</code>, which is neither present nor necessary. The same will happen upon unpickling with <code>__setstate__</code>:</p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; class ddict(dict):
...     def __getattr__(self, item):
...         return self[item]
...     def __setattr__(self, key, value):
...         self[key] = value
...
&gt;&gt;&gt; pickle.dumps(ddict())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in __getattr__
KeyError: '__getstate__'
</code></pre>
<p><strong>How do I have to modify the class <code>ddict</code> in order to be properly pickable?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is not <code>pickle</code> but that your <code>__getattr__</code> method breaks the expected contract by raising <code>KeyError</code> exceptions. You need to fix your <code>__getattr__</code> method to raise <code>AttributeError</code> exceptions instead:</p>
<pre><code>def __getattr__(self, item):
    try:
        return self[item]
    except KeyError:
        raise AttributeError(item)
</code></pre>
<p>Now <code>pickle</code> is given the expected signal for a missing <code>__getstate__</code> customisation hook.</p>
<p>From the <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>object.__getattr__</code> documentation</a>:</p>
<blockquote>
<p>This method should return the (computed) attribute value <strong>or raise an <code>AttributeError</code> exception</strong>.</p>
</blockquote>
<p>(bold emphasis mine).</p>
<p>If you insist on keeping the <code>KeyError</code>, then at the very least you need to skip names that start and end with double underscores and raise an <code>AttributeError</code> just for those:</p>
<pre><code>def __getattr__(self, item):
    if isinstance(item, str) and item[:2] == item[-2:] == '__':
        # skip non-existing dunder method lookups
        raise AttributeError(item)
    return self[item]
</code></pre>
<p>Note that you probably want to give your <code>ddict()</code> subclass <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer">an empty <code>__slots__</code> tuple</a>; you don't need the extra <code>__dict__</code> attribute mapping on your instances, since you are diverting attributes to key-value pairs instead. That saves you a nice chunk of memory per instance.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; class ddict(dict):
...     __slots__ = ()
...     def __getattr__(self, item):
...         try:
...             return self[item]
...         except KeyError:
...             raise AttributeError(item)
...     def __setattr__(self, key, value):
...         self[key] = value
...
&gt;&gt;&gt; pickle.dumps(ddict())
b'\x80\x03c__main__\nddict\nq\x00)\x81q\x01.'
&gt;&gt;&gt; type(pickle.loads(pickle.dumps(ddict())))
&lt;class '__main__.ddict'&gt;
&gt;&gt;&gt; d = ddict()
&gt;&gt;&gt; d.foo = 'bar'
&gt;&gt;&gt; d.foo
'bar'
&gt;&gt;&gt; pickle.loads(pickle.dumps(d))
{'foo': 'bar'}
</code></pre>
<p>That <code>pickle</code> tests for the <code>__getstate__</code> method <em>on the instance</em> rather than on the class as <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer">is the norm for special methods</a>, is a discussion for another day.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, I think you may need to distinguish between instance attribute and class attribute.
In Python official document Chapter 11.1.4 about pickling, it says:</p>
<p><em>instances of such classes whose <strong>dict</strong> or the result of calling <strong>getstate</strong>() is picklable (see section The pickle protocol for details).</em></p>
<p>Therefore, the error message you're getting is when you try to pickle an instance of the class, but not the class itself - in fact, your class definition will just pickle fine.</p>
<p>Now for pickling an object of your class, the problem is that you need to call the parent class's serialization implementation first to properly set things up. The correct code is:</p>
<pre><code>In [1]: import pickle

In [2]: class ddict(dict):
   ...:
   ...:     def __getattr__(self, item):
   ...:         super.__getattr__(self, item)
   ...:         return self[item]
   ...:
   ...:     def __setattr__(self, key, value):
   ...:         super.__setattr__(self, key, value)
   ...:         self[key] = value
   ...:

In [3]: d = ddict()

In [4]: d.name = "Sam"

In [5]: d
Out[5]: {'name': 'Sam'}
In [6]: pickle.dumps(d)
Out[6]: b'\x80\x03c__main__\nddict\nq\x00)\x81q\x01X\x04\x00\x00\x00nameq\x02X\x03\x00\x00\x00Samq\x03s}q\x04h\x02h\x03sb.'
</code></pre>
</div>
<span class="comment-copy">Sorry, but everything in this answer is wrong. Pickle tries to access the <code>__getstate__</code> method on the instance, at which point the <code>__getattr__</code> method is consulted. This tries to access a key by that name in the mapping and that fails with a <code>KeyError</code>; that's not a normal exception for attribute access breaking pickle.</span>
<span class="comment-copy">Next, there is no <code>__getattr__</code> method on <code>dict</code> so the <code>super()</code> call will fail. The method is optional, only used as a fallback hook for missing attributes.</span>
<span class="comment-copy">Next, the whole point of intercepting <code>__setattr__</code> is to override the normal attribute assignment process and redirect to dictionary key assignment instead. Calling the <code>super()</code> version defeats that purpose.</span>
<span class="comment-copy">Last but not least, <code>super()</code> must be <i>called</i>, you example omits the calls. Plus there are a few other basic errors in the code, like indentation and trying to call an empty attribute on <code>__getattr__</code>. Please do make sure you post at least syntactically correct examples when answering.</span>
<span class="comment-copy">I'm new to the stackoverflow text editor and made quite a few mistakes like the indentation, for that I do apologize. However, the code itself, well of course in it formatting-correct form, should work - I am not someone imprudent to post untested code. I've updated my answer with the correct code and outputs - tested on python 3.5.2.</span>
