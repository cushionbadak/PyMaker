<div class="post-text" itemprop="text">
<p>What would be the most efficient way to map a 6 day schedule to a work week (excluding weekends)? Are there any existing algorithms that would suit this purpose? The use case would be to take the current date perform a function and output the corresponding Day.</p>
<p>For example:<br/></p>
<p>  Today, 2/15/2017 would be a Day 1. <code>day(2/15/2017) = "Day 1"</code> <br/> 
  Tomorrow, 2/16 would be a Day 2. <code>day(2/16/2017) = "Day 2"</code><br/>
  Friday would be a Day 3. <code>day(2/17/2017) = "Day 3"</code><br/>
  Monday would be a Day 4. <code>day(2/20/2017) = "Day 4"</code><br/>
  etc.
<br/></p>
<p>Ideally this would be executed in Python but any implementation would work</p>
</div>
<div class="post-text" itemprop="text">
<p>You can easily create a generator returning dates starting from today with <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer"><code>timedelta</code></a>. Then you could filter out the weekends with <a href="https://docs.python.org/3/library/datetime.html#datetime.date.weekday" rel="nofollow noreferrer"><code>date.weekday</code></a> and wrap the result in <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to get index for each day:</p>
<pre><code>from datetime import date, timedelta
from itertools import count
import calendar

WORK_WEEK = 6

today = date.today()

# Generator producing successive dates starting from today
dates = (today + timedelta(days=i) for i in count())

# Generator filtering weekends
work_dates = (d for d in dates if d.weekday() &lt;= calendar.FRIDAY)

for i, d in enumerate(work_dates):
    # Print only 10 first days
    if i == 10: 
        break
    print('{} -&gt; Day {}'.format(d, i % WORK_WEEK + 1))
</code></pre>
<p>Output:</p>
<pre><code>2017-02-16 -&gt; Day 1
2017-02-17 -&gt; Day 2
2017-02-20 -&gt; Day 3
2017-02-21 -&gt; Day 4
2017-02-22 -&gt; Day 5
2017-02-23 -&gt; Day 6
2017-02-24 -&gt; Day 1
2017-02-27 -&gt; Day 2
2017-02-28 -&gt; Day 3
2017-03-01 -&gt; Day 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given a date that is a "day 1", this will return the schedule day number for any given date:</p>
<pre><code>import datetime

def day_number(day1, target_date):
  days = (target_date - day1).days
  weeks = days // 7
  workdays = weeks * 5
  whole_week = day1 + datetime.timedelta(days=weeks*7)
  for d in range(days % 7):
    day = whole_week + datetime.timedelta(days=d)
    if day.weekday() &lt; 5:
      workdays += 1
  return workdays % 6 + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can yous momentjs , its a good library that help you with calendars like this </p>
<pre><code>moment().subtract(10, 'days').calendar(); // 02/05/2017
moment().subtract(6, 'days').calendar();  // Last Thursday at 9:06 PM
moment().subtract(3, 'days').calendar();  // Last Sunday at 9:06 PM
moment().subtract(1, 'days').calendar();  // Yesterday at 9:06 PM
moment().calendar();                      // Today at 9:06 PM
moment().add(1, 'days').calendar();       // Tomorrow at 9:06 PM
moment().add(3, 'days').calendar();       // Saturday at 9:06 PM
moment().add(10, 'days').calendar();      // 02/25/2017
</code></pre>
<p>also the instalation is very easy 
bower install moment --save # bower
npm install moment --save   # npm
Install-Package Moment.js   # NuGet
spm install moment --save   # spm
meteor add momentjs:moment  # meteor</p>
</div>
<div class="post-text" itemprop="text">
<p>Judging from what you said in your problem, you don't just want day of the week, you want how many weekdays since a beginning date. This would be my solution. This excludes extraneous exceptions such as holidays.</p>
<pre><code>from datetime import date


def day(day, month, year):
    # Create starting date, in this case 10th Feb, 2017
    # Let's assume the starting date is a weekday
    startingDate = date(2017, 2, 10)

    # Create ending date based on user input
    endingDate = date(year, month, day)

    # First check if the user input is a weekend
    if endingDate.weekday() == 5 or endingDate.weekday() == 6:
        return "This is not a workday"

    # Calculate the total days in between the two dates
    totalDays = (endingDate - startingDate).days

    #Subtract two days for every weekend
    totalDays -= int(totalDays/7)*2

    return "Day " + str(totalDays)


def main():
    print(day(14, 2, 2017))


main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I'm understanding you correctly, you can instantiate a date object, then use timedelta to add the corresponding days, filter out the weekends, using a list comprehension. Also, you can check if today is part of a weekend or not first:</p>
<pre><code>import datetime

today = datetime.date.today()

if today.weekday() &lt; 5:  # this if-else ensures today isn't a weekend
    first = today
else:
    delta = 7 - today.weekday() 
    first = today + datetime.timedelta(days=delta)

work_days = [first]
num = 1
while len(work_days) &lt; 6:  # get the next 5 week days, since we have the first already
    curr = first + datetime.timedelta(days=num)
    if curr.weekday() &lt; 5:
        work_days.append(curr)
    num += 1
</code></pre>
</div>
<span class="comment-copy">Is there a way to do it that would work without a library, such as in JS?</span>
<span class="comment-copy">+1 generators ftw. @Shaun the question was about python - so making this work in javascript is out of scope.</span>
<span class="comment-copy">This is a <code>pyton</code> question, not <code>javascript</code>.</span>
<span class="comment-copy">And it doesn't answer the question - you aren't omitting weekends.</span>
<span class="comment-copy">This doesn't exclude weekends as requested.</span>
<span class="comment-copy">@shadow oops, didn't see the excluding weekends part, correcting now</span>
