<div class="post-text" itemprop="text">
<p>Here's my code:</p>
<pre><code>player1 = player2 = ball = score1 = score2 = None

def reset_game():
    player1 = Pad(PAD_WIDTH, (WINDOW_HEIGHT / 2) - (PAD_HEIGHT / 2), FIRST_PLAYER)
    player2 = Pad(WINDOW_WIDTH - (PAD_WIDTH * 2), (WINDOW_HEIGHT / 2) - (PAD_HEIGHT / 2), SECOND_PLAYER)
    ball = Ball((WINDOW_WIDTH / 2) - (BALL_SIZE / 2), (WINDOW_HEIGHT / 2) - (BALL_SIZE / 2))
    score1 = Score(((WINDOW_WIDTH / 2) - (SCORE_SIZE / 2.8) - SCORE_SPACING * 2), SCORE_SPACING, 1)
    score2 = Score(((WINDOW_WIDTH / 2) - (SCORE_SIZE / 2.8) + SCORE_SPACING * 2), SCORE_SPACING, 2)

reset_game()
</code></pre>
<p>I define them initially like this (I know it's a bit java-ish, but anyway), because when I press ESCAPE, I want to reset the whole game to its initial values:</p>
<pre><code>if e.key == pygame.K_ESCAPE:
    reset_game()
</code></pre>
<p>It's pathetic to copy and paste the whole thing. Running like this, Python gives me the error:</p>
<p><a href="https://i.stack.imgur.com/E5YnJ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/E5YnJ.png"/></a></p>
<p>That's because Python just can't <em>see</em> the assignment inside the function.</p>
<pre><code>def redraw():
    pygame.display.flip()
    screen.fill((0, 0, 0))

    if game_screen == SINGLE_PLAYER or game_screen == MULTIPLAYER:
        draw_middle_line()
        player1.draw()
        player2.draw()
        score1.draw()
        score2.draw()
        ball.draw()
</code></pre>
<p>If I make the assignments in global scope, it works. Why Python can't see the assignments even if I "declared" as None and called the function with the assignments afterwards? (I know this is c/c++/java-ish thinking, but it makes sense nonetheless).</p>
</div>
<div class="post-text" itemprop="text">
<p>It isn't that "Python can't see assignments", but simply that you didn't declare your names as global.</p>
<p><a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces</a></p>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#global" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html#global</a></p>
<p>Change your function to look like this and try it:</p>
<pre><code>def reset_game():
    global player1, player2, player3
    player1 = Pad(PAD_WIDTH, (WINDOW_HEIGHT / 2) - (PAD_HEIGHT / 2), FIRST_PLAYER)
    player2 = Pad(WINDOW_WIDTH - (PAD_WIDTH * 2), (WINDOW_HEIGHT / 2) - (PAD_HEIGHT / 2), SECOND_PLAYER)
    ball = Ball((WINDOW_WIDTH / 2) - (BALL_SIZE / 2), (WINDOW_HEIGHT / 2) - (BALL_SIZE / 2))
    score1 = Score(((WINDOW_WIDTH / 2) - (SCORE_SIZE / 2.8) - SCORE_SPACING * 2), SCORE_SPACING, 1)
    score2 = Score(((WINDOW_WIDTH / 2) - (SCORE_SIZE / 2.8) + SCORE_SPACING * 2), SCORE_SPACING, 2)
</code></pre>
<p>PS.  Using global variables is very poor design.  I recommend using a different approach to organizing your program's data and code.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = None

def foo():
    global x
    x = 10

foo()
print x #prints 10
</code></pre>
<p>Any assignment in a local scope, is considered a local variable, you need to get it from the global scope</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't send variables to the function it will try to create it locally, so to allow the access it must be declared globally inside the function. </p>
<p>Example:</p>
<pre><code>player1 = None

     def reset_game():
          global player1  #now you can modify player1
          player1 = Pad(PAD_WIDTH, (WINDOW_HEIGHT / 2) - (PAD_HEIGHT / 2), FIRST_PLAYER)

reset_game()
</code></pre>
</div>
<span class="comment-copy">Local variables don't work like that. You assigned in the function, <code>player1</code> to be a local variable, if you want it to affect the global scope, call <code>global player1</code> in your function, there are better ways instead of calling <code>global</code></span>
<span class="comment-copy">Because function scope takes priority. You can use the <code>global</code> keyword to override this, but excessive use of it can lead to spaghetti code very, <i>very</i> easily. <a href="https://docs.python.org/3.6/reference/simple_stmts.html#global" rel="nofollow noreferrer">docs.python.org/3.6/reference/simple_stmts.html#global</a></span>
<span class="comment-copy">It doesn't "make sense" nonetheless. Setting a variable is always local, unless you use the global keyword.</span>
<span class="comment-copy">Don't listen to anyone who tells you to use <code>global</code>.  I will downvote them all.  You should maintain the state a different way, for example: have a <code>Game</code> object which has a <code>reset</code> method.</span>
<span class="comment-copy">Yep, <code>global</code> is Python's closest equivalent of <code>goto</code>...if you think you need it, you're almost certainly wrong.</span>
<span class="comment-copy">It's been a long time since I've read about scopes and namespaces in Python. The script for the game is quite short, so I didn't think global variables would do much harm.</span>
