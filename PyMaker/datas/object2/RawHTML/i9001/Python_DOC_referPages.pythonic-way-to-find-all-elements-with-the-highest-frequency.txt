<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3594514/how-to-find-most-common-elements-of-a-list">How to find most common elements of a list?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I have a list such as this:</p>
<pre><code>lst = [1, 3, 5, 1, 5, 6, 1, 1, 3, 4, 5, 2, 3, 4, 5, 3, 4]
</code></pre>
<p>I would like to find <strong><em>all</em></strong> the elements which occur most frequently.
So I would like:</p>
<pre><code>most = [1, 3, 5]
</code></pre>
<p>1, 3, and 5 would occur the most, which is 4 times. What's a fast, pythonic way to do this? I tried methods shown here:</p>
<p><a href="https://stackoverflow.com/questions/3594514/how-to-find-most-common-elements-of-a-list">How to find most common elements of a list?</a>. </p>
<p>But it only gives me the top 3, I need all elements. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://docs.python.org/3.1/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> and a <em>list comprehension</em>:    </p>
<pre><code>from collections import Counter

lst = [1, 3, 5, 1, 5, 6, 1, 1, 3, 4, 5, 2, 3, 4, 5, 3, 4]
r = [x for x, _ in Counter(lst).most_common(3)]
print(r)
# [1, 3, 5]
</code></pre>
<p>You can generalize for values with highest count by using <code>max</code> on the counter values:</p>
<pre><code>c = Counter(lst)
m = max(c.values())
r = [k for k in c if c[k] == m]
print(r)
# [1, 3, 5]
</code></pre>
<p>For large iterables, to efficiently iterate through the counter and stop once the required items have been taken, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile</code></a> with <code>most_common</code> without any parameters:</p>
<pre><code>from itertools import takewhile

c = Counter(lst)
m = max(c.values())
r = [x for x, _ in takewhile(lambda x: x[1]==m, c.most_common())] 
print(r)
# [1, 3, 5]
</code></pre>
<p>You gain by not having to iterate through all the items in the counter object, although there is some overhead with having to <em>sort</em> the items using <code>most_common</code>; so I'm sure if this <em>absolutely</em> efficient after all. You could do some experiments with <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer">timeit</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also get the same result with <code>groupby</code> from <code>itertools</code> module and <code>list comprehension</code> in this way:</p>
<pre><code>from itertools import groupby

a = [1, 3, 5, 1, 5, 6, 1, 1, 3, 4, 5, 2, 3, 4, 5, 3, 4]
most_common = 3
final = [k for k,v in groupby(sorted(a), lambda x: x) if len(list(v)) &gt; most_common]
</code></pre>
<p>Output:</p>
<pre><code>print(final)
&gt;&gt;&gt; [1, 3, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do the following if you like to print all the most frequent,</p>
<pre><code>    from collections import Counter
    words=[1, 3, 5, 1, 5, 6, 1, 1, 3, 4, 5, 2, 3, 4, 5, 3, 4]
    most= [word for word, word_count in Counter(words).most_common()]
    print (most)
&gt;&gt;&gt; 
[1, 3, 5, 4, 2, 6]
</code></pre>
<p>Please note, if you want to limit, you can enter the number inside <code>most_common()</code> function. Ex: <code>...most_common(3)]</code>. Hope this answers your question.  </p>
</div>
<span class="comment-copy">That answer in the link does a slice <code>popular_words[:3]</code> to only return the top 3.  The actual counter contains all totals, not just the top 3.</span>
<span class="comment-copy">This is works, but I would like to find <b>all</b> elements which occur the most frequently, not just the first 3. Thank you though.</span>
<span class="comment-copy">@ArjunVasudevan I've updated for a general case</span>
<span class="comment-copy">Well, this assumes you already have a threshold a priori</span>
<span class="comment-copy">Yes. It's true. However it can extended to handle all the cases.</span>
