<div class="post-text" itemprop="text">
<p>I have List of dictionaries like:</p>
<pre><code>Stock=[
{'ID':1,'color':'red','size':'L','material':'cotton','weight':100,'length':300,'location':'China'},
{'ID':2,'color':'green','size':'M','material':'cotton','weight':200,'length':300,'location':'China'},
{'ID':3,'color':'blue','size':'L','material':'cotton','weight':100,'length':300,'location':'China'}
]
</code></pre>
<p>And other list of dictionaries like:</p>
<pre><code>Prices=[
{'color':'red','size':'L','material':'cotton','weight':100,'length':300,'location':'China'}
{'color':'blue','size':'S','weight':500,'length':150,'location':'USA', 'cost':1$}
{'color':'pink','size':'L','material':'cotton','location':'China','cost':5$},
{'cost':5$,'color':'blue','size':'L','material':'silk','weight':100,'length':300}
]
</code></pre>
<p>So I need find <strong>'cost'</strong> for each record in <code>Stock</code> from <code>Prices</code>.  But may be a situation, when I don't find 100% coincidence of dict elements, and in this case I need most similar element and get it's <strong>"cost"</strong>.</p>
<pre><code>output=[{'ID':1,'cost':1$},{'ID':2,'cost':5$},...]
</code></pre>
<p>Please, prompt the optimal solution for this task. I think it's like Loop  from highest to lowest compliance, when we try find record with max coincidence, and if not found - try less matching condition.</p>
</div>
<div class="post-text" itemprop="text">
<p>how about this</p>
<pre><code>Stock=[
{'ID':1,'color':'red','size':'L','material':'cotton','weight':100,'length':300,'location':'China'},
{'ID':2,'color':'green','size':'M','material':'cotton','weight':200,'length':300,'location':'China'},
{'ID':3,'color':'blue','size':'L','material':'cotton','weight':100,'length':300,'location':'China'}
]

Prices=[
{'color':'red','size':'L','material':'cotton','weight':100,'length':300,'location':'China'},
{'cost':'2$','color':'blue','size':'S','weight':500,'length':150,'location':'USA'},
{'cost':'5$','color':'pink','size':'L','material':'cotton','location':'China'},
{'cost':'15$','color':'blue','size':'L','material':'silk','weight':100,'length':300}
]

Prices = [p for p in Prices if "cost" in p] #make sure that everything have a 'cost'
result = []
for s in Stock:
    field = set(s.items())
    best_match = max(Prices, key=lambda p: len( field.intersection(p.items()) ), default=None)
    if best_match:
        result.append( {"ID":s["ID"], "cost":best_match["cost"] } )
print(result)
#[{'ID': 1, 'cost': '5$'}, {'ID': 2, 'cost': '5$'}, {'ID': 3, 'cost': '15$'}]
</code></pre>
<p>to find the most similar entry I first transform the dict to a <code>set</code> then use <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">max</a> to find the largest <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow noreferrer">intersection</a> of a price with the stock that I'm checking using a lambda function for the key of <code>max</code></p>
</div>
<div class="post-text" itemprop="text">
<p>it reminds me of fuzzy or neural network solutions, 
[on python2]</p>
<p>anyway , here is a <strong>Numpy</strong> solution, :</p>
<pre><code>Stock=[
{'ID':1,'color':'red','size':'L','material':'cotton','weight':100,'length':300,'location':'China'},
{'ID':2,'color':'green','size':'M','material':'cotton','weight':200,'length':300,'location':'China'},
{'ID':3,'color':'blue','size':'L','material':'cotton','weight':100,'length':300,'location':'China'}
]

Prices=[
{'color':'red','size':'L','material':'cotton','weight':100,'length':300,'location':'China'},
{'cost':2,'color':'blue','size':'S','weight':500,'length':150,'location':'USA'},
{'cost':5,'color':'pink','size':'L','material':'cotton','location':'China'},
{'cost':15,'color':'blue','size':'L','material':'silk','weight':100,'length':300}
]

import numpy as np

# replace non useful records.
for p in Prices:
    if not(p.has_key('cost')):
        Prices.remove(p)

def numerize(lst_of_dics):
    r=[]
    for d in lst_of_dics:
        r1=[]
        for n in ['color','size','material','weight','length','location']:
            try:
                if n=='color':
                    # it is 0s if unknown
                    # only 3 letters, should work ,bug!!!
                    z=[0,0,0]
                    r1+=[ord(d[n][0]),ord(d[n][1]),ord(d[n][2])]
                elif n=='size':
                    z=[0,0,0]
                    r1+=[ord(d[n])]*3
                elif n=='material':
                    z=[0,0,0]
                    r1+=[ord(d[n][0]),ord(d[n][1]),ord(d[n][2])]
                elif n=='location':
                    z=[0,0,0]
                    r1+=[ord(d[n][0]),ord(d[n][1]),ord(d[n][2])]
                else:
                    z=[0,0,0]
                    r1+=[d[n]]*3
            except:
                r1+=z

        r.append(r1)
    return r

St = numerize(Stock)
Pr = np.array(numerize(Prices))

output=[]
for i,s in enumerate(St):
    s0 = np.reshape(s*Pr.shape[0],Pr.shape)
    # stage 0: make one element array to subtract easily
    s1 = abs(Pr -s0)
    # abs diff
    s2 = s1 * Pr.astype('bool') * s0.astype('bool')
    # non-extentent does'nt mean match..
    s21 =  np.logical_not(Pr.astype('bool') * s0.astype('bool'))*25            
    s2 = s2+s21
    # ignore the zero fields..(non-extentse)
    s3 = np.sum(s2,1)
    # take the smallest
    s4 = np.where(s3==np.min(s3))[0][0]
    c = Prices[s4]['cost']
    #print c,i
    output.append( {'ID':i+1 ,'cost':c})

print(output)
</code></pre>
<p>that gives me the next results (with many assumptions):</p>
<pre><code>[{'cost': 15, 'ID': 1}, {'cost': 5, 'ID': 2}, {'cost': 15, 'ID': 3}]
</code></pre>
<p>Note, that this is correct comparison result based on <strong>Values and Kinds</strong> of properties</p>
<p>please up vote and check the answer if it satisfies you..</p>
</div>
<span class="comment-copy">Please extend your question. For the given input (Stock and Prices), what should be the desired output?</span>
