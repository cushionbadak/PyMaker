<div class="post-text" itemprop="text">
<p>How can I get the complementary reverse for dna? following formula works for first string but when I add the second string in the list it does not work. </p>
<pre><code>dna = ['CAG', 'AGT']

def reverse_complementary (char):
    my_dictionary = {"A": "T", "C": "G", "G": "C", "T": "A"} 
    return "".join([my_dictionary[i] for i in reversed(char)])

print("reverse_complementary =" , reverse_complementary(dna))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you pass a <code>str</code> to <code>reverse_complementary</code>, it will reverse and
translate the characters, which is what you want.</p>
<p>If you pass a <code>list</code> of <code>str</code> objects, as you’re doing here, it will
reverse the <code>list</code>, then try to look up each <code>str</code> in the <code>dict</code>, and
that will fail.</p>
<p>How to fix it? That depends on whether you want to pass single DNA
sequences or lists of them. The former seems more generic, so I’ll go
with that.</p>
<p><code>reverse_complementary</code> already works with strings, so that’s unchanged.
We need to call it differently:</p>
<pre><code>dna = ['CAG', 'AGT']

for s in dna:
    print("reverse_complementary =" , reverse_complementary(s))
</code></pre>
<p>Edit: how to print results as a list.</p>
<p>With a loop:</p>
<pre><code>lst = []
for s in dna:
    lst.append(reverse_complementary(s))
print("reverse_complementary =" , lst)
</code></pre>
<p>With a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>lst = [reverse_complementary(s) for s in dna]
print("reverse_complementary =" , lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to perform the translation on each of your strings seperatly (and not the list itself), this can be done with a loop or with <code>map</code> or an explicit list-comprehension, for example:</p>
<pre><code>def reverse_complementary(char):
    my_dictionary = {"A": "T", "C": "G", "G": "C", "T": "A"} 
    return ["".join([my_dictionary[i] for i in reversed(seq)]) for seq in char]
</code></pre>
<p>However when you want to map characters to other characters it's generally better to use <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a>:</p>
<pre><code>to_complement = str.maketrans({"A": "T", "C": "G", "G": "C", "T": "A"})

def reverse_complementary(char):
    return [seq[::-1].translate(to_complement) for seq in char]
</code></pre>
<p>The <code>[::-1]</code> is another (also more efficient) way of reversing a string.</p>
</div>
<span class="comment-copy">Please provide expected and observed outputs.</span>
<span class="comment-copy">Did you originally run it with just the string <code>'CAG'</code>, not a <code>list</code>. That would be your problem.</span>
<span class="comment-copy">I run it with this dna = ['CAG', 'AGT']</span>
<span class="comment-copy">How can I print the result as list with this code?</span>
<span class="comment-copy">See edit for two ways to do that.</span>
<span class="comment-copy">But this code does not give complementary reverse, it is just reverse</span>
<span class="comment-copy">@Saram When I call it with <code>reverse_complementary(['AAT'])</code> (with either of these functions) it gives me <code>['ATT']</code> so I don't think it just reverses.</span>
