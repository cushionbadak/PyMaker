<div class="post-text" itemprop="text">
<p>I've just had the strangest error. I haven't had a chance to fully debug it, but I wanted to post this and see if anyone else has had a similar issue.</p>
<h2>Problem</h2>
<p>The following code is in a function that downloads a file. The <code>if</code> statement logic is intended to skip the download step if the final file exists.</p>
<pre><code>log.debug('force: {}, isfile: {}'.format(force, os.path.isfile(fasta_path)))
log.debug('if result: {}'.format(force or not os.path.isfile(fasta_path)))

if force or not os.path.isfile(fasta_path):
    # we don't have the file, so download it
    log.info('Downloading reference FASTA')
else:
    log.info('FASTA found--skipping download.')
</code></pre>
<p>When run, the following prints out:</p>
<pre><code>[17-02-14 05:03:32 - __main__:119 - DEBUG] force: False, isfile: True
[17-02-14 05:03:32 - __main__:120 - DEBUG] if result: False
[17-02-14 05:03:32 - __main__:124 - INFO] Downloading reference FASTA
</code></pre>
<h2>Breakdown</h2>
<p>The <code>force</code> variable is intended to allow the user to "force" the download to happen, regardless of existing data. As you can see in the output, it is <code>False</code>.</p>
<p>The path to the file is valid and the file exists, as seen in the output.</p>
<p>Thus, the if statement is essentially <code>False or not True</code>, which should (and does, also in the output) evaluate to <code>False</code>; however, the <code>True</code> conditional (<code>Downloading reference</code>) is executed.</p>
<p>I have tried parentheses and some minimal debugging, but I cannot find any reason for this to happen. For example, the following works as expected in the python interpreter:</p>
<pre><code>if False or not True:
    print('hi')
else:
    print('bye')
</code></pre>
<h2>Environment</h2>
<p>This issue occurs with Python 3.5 on ubuntu 16.04 within a docker container. </p>
</div>
<div class="post-text" itemprop="text">
<p>As noted by @user2357112 in the comments it seems very likely that <code>force</code> is a string:</p>
<pre><code>&gt;&gt;&gt; print('if result: {}'.format("False" or not True))
if result: False
&gt;&gt;&gt; "False" or not True
'False'
&gt;&gt;&gt; type("False" or not True)
&lt;class 'str'&gt;
&gt;&gt;&gt; bool("False" or not True)
True
</code></pre>
<p>That's probably why the second debug statement shows False (because it shows the string and not the boolean). You can test this by either</p>
<pre><code>log.debug('if result: {}'.format(bool(force or not os.path.isfile(fasta_path))))
</code></pre>
<p>(expected output <code>if result: True</code>) or </p>
<pre><code>log.debug('if result: {}'.format(repr(force or not os.path.isfile(fasta_path))))
</code></pre>
<p>(expected output <code>if result: 'False'</code> - note the quotes signalling it's a string and not a boolean)</p>
<p><strong>Edit</strong> Explanation: According to <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer" title="4.2. Boolean Operation">4.2. Boolean Operation</a> the expression <code>x or y</code> is evaluated according to <code>if x is false, then y, else x</code>. Since according to <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer" title="4.1. Truth Value Testing">4.1. Truth Value Testinge</a> only empty sequences are <code>False</code> (in the context of truth value testing) the sequence <code>'False'</code> is <code>True</code>. Thus <code>'False' or x</code> evaluates to the string <code>'False'</code> (independent of the value of <code>x</code>). During printing <code>'False'</code> is not interpreted as a boolean value. However in the if-statement the string <code>'False'</code> is  tested for <code>Truth</code> ...</p>
</div>
<div class="post-text" itemprop="text">
<p>FWIW, a slight modification of the code, running on a Windows machine, Python 2.6.5:</p>
<pre><code>def stackOverflow(self, force, fasta_path):
    logging.info('force: {0}, isfile: {1}'.format(force, os.path.isfile(fasta_path)))
    logging.info('if result: {0}'.format(force or not os.path.isfile(fasta_path)))

if force or not os.path.isfile(fasta_path):
    # we don't have the file, so download it
    logging.info('Downloading reference FASTA')
else:
    logging.info('FASTA found--skipping download.')
</code></pre>
<p>This takes the expected path ("skipping download") of <code>force</code> is <code>False</code> and the path exists. The call is:</p>
<pre><code>stackOverflow(False, r'C:\temp\pythoncode.txt')
</code></pre>
<p>Making the first argument a string, as the comments imply, will take the mystery path ("Downloading").</p>
<pre><code>stackOverflow("False", r'C:\temp\pythoncode.txt')
</code></pre>
</div>
<span class="comment-copy">I feel like you've put a reasonable amount of work into this post, but still have avoided giving us an MCVE to work with...</span>
<span class="comment-copy">Is <code>force</code> actually the string <code>"False"</code>?</span>
<span class="comment-copy">@user2357112 Yes, <code>force</code> is <code>False</code> and the file does exist--as shown in the output.</span>
<span class="comment-copy">I'm wondering if the os.path.isFile has a side effect? or if some short-circuiting is going on?</span>
<span class="comment-copy">I'm with the guys saying No MCVE. I agree it's puzzling, but that just means you haven't provided enough info. More code, please. If it makes you happier, create a standalone program that opens logger, collects args, and demonstrates that you're <i>not,</i> in fact, going nuts.</span>
