<div class="post-text" itemprop="text">
<p>I am trying to download remotely (i.e. through a browser) a Mongo dump from server using the mongodump command.</p>
<p>The backend is a Flask server and is like this:</p>
<pre><code>@api.route('/export', methods=['GET'])
def exportDb():
    subprocess.check_output(['mongodump','--archive=db.gz', '--gzip', '--db', 'my_db'])
    response = make_response(open('db.gz', 'r').read())
    response.headers["Content-Disposition"] = "attachment; filename=db.gz"
    return response
</code></pre>
<p>The frontend uses AngularJs and looks like this:</p>
<pre><code>    $http({
        method: 'GET',
        url: '/intro/export'
    }).then(function(response) {
        var blob = new Blob([response.data], {type: 'application/zip, application/octet-stream'});
        var objectUrl = URL.createObjectURL(blob);
        window.open(objectUrl);
    }
</code></pre>
<p>The archive is created correctly on the server side, but I can't manage to send it across to the client. When the request is sent, a new tab is opened for downloading a file named after a guid, so not "db.gz", and that file cannot be opened with any archive client, so I must have missed something either when sending it or saving it.</p>
<p>Any help would be very much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>So I've done it like this:</p>
<pre><code>@api.route('/exportDB', methods=['GET'])
def exportDB():
    subprocess.check_output(['mongodump','--archive=db.gz', '--gzip', '--db', 'my_db'])
    response = send_from_directory("path/to/folder", 'db.gz', as_attachment=True)
    response.headers["Content-Type"] = "application/javascript"
    return response
</code></pre>
<p>On client side I have: </p>
<pre><code>$http({
    method: 'GET',
    url: '/intro/exportDB',
    responseType: 'blob'
}).then(function(response) {
    var data = new Blob([response.data]);
    saveAs(data, "db.gz");
 }
</code></pre>
<p>Where saveAs is from Filesaver.js from <a href="https://github.com/eligrey/FileSaver.js" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">I think the issue here is that you are using <code>open('db.gz', 'r').read()</code> which reads your GZ in text mode (default), where you should read it in binary in order to preserve the data inside. So instead of <code>r</code> try using <code>rb</code> on your original code and see if it works. Here's a table for the <code>open</code> flags: <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#open</a></span>
