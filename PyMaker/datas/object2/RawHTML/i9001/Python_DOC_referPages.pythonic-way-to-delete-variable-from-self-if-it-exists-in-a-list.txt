<div class="post-text" itemprop="text">
<p>I have a list of strings ['foo1', 'foo2', ...] that represent variables that I want to delete from self if they are part of self. What is a Pythonic and compact way to do this?</p>
<p>My first attempt is</p>
<pre><code>if hasattr(self, 'foo1'):
    del self.foo1
if hasattr(self, 'foo2'):
    del self.foo2
...
</code></pre>
<p>but this obviously isn't scalable for a large list. </p>
<p>Can anyone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>for</code> loop and at the same time <em>boost performance</em> by using <code>pop</code> on the <code>__dict__</code> of the object:</p>
<pre><code>for attr in ('foo1','foo2'):
    self.__dict__.pop(attr,None)
</code></pre>
<p><code>pop</code> basically does a check whether the element is in the dictionary and removes it if that is the case (it also returns the corresponding value, but that is not relevant here). We also use <code>None</code> here as a "default" return value such that if the key does not exists, <code>pop</code> will not error.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.6/library/functions.html?highlight=delattr#delattr" rel="nofollow noreferrer"><code>delattr</code></a>. It will raise an <code>AttributeError</code> if the attribute does not exist, so you can wrap it in a method if you want:</p>
<pre><code>def safe_delattr(self, attrname):
    if hasattr(self, attrname):
        delattr(self, attrname)
</code></pre>
<p>or use a try/except block:</p>
<pre><code>try:
    delattr(self, attrname)
except AttributeError:
    pass
</code></pre>
<p>This has the advantage of working with classes that define <code>__slots__</code>, as they don't expose a <code>__dict__</code> attribute. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this quite easily, but I have to say it seems at first glance like a pretty bizarre requirement. Generally in Python anything that involves dynamic creation and/or deletion of variables is a code smell, so I'd be interested in how the requirement emerged (and whether your description might not be obscuring the real problem).</p>
<p>But remembering that instance variables are stored in <code>self.__dict__</code>, and assuming that your list of strings is called <code>los</code> you can do what you want with something like this</p>
<pre><code>for s in los:
    if s in self.__dict__:
        del self.__dict__[s]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>something like this perhaps?</p>
<pre><code>def del_attr(self, list):
    for l in list:
        delattr(self, l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Run it in a loop?</p>
<pre><code>var_names = ["foo1", "foo2", "foo3"]
for var_name in var_names:
    delattr(self, var_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="https://docs.python.org/3/library/functions.html#delattr" rel="nofollow noreferrer">delattr()</a>, although I can't think of many cases where deleting an attribute of an object is useful.</p>
</div>
<span class="comment-copy">Why do you want to do this?</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/16700958/python-how-can-i-dynamically-remove-a-method-from-a-class-i-e-opposite-of">Python - how can I dynamically remove a method from a class -- i.e. opposite of setattr</a></span>
<span class="comment-copy">@Kevin I have a class that can be modified after it is initialized (initialization is computationally expensive). There are certain rules on how it can be modified. My motivation behind deleting from self was to destroy variables/objects in the class if the class is modified incorrectly and these variables/objects are no longer valid. Perhaps, I should split the class into parent and child.</span>
<span class="comment-copy">@holdenweb See above</span>
<span class="comment-copy">I didn't realize <code>dict</code>s also had a <code>pop</code> method.</span>
<span class="comment-copy">I like this solution!</span>
<span class="comment-copy">Or <code>try: ...; except AttributeError: ...</code> for <a href="http://stackoverflow.com/questions/12265451/ask-forgiveness-not-permission-explain">EAFP</a>.</span>
<span class="comment-copy">Note that WillemVanOlson's solution using <code>pop()</code> is superior</span>
