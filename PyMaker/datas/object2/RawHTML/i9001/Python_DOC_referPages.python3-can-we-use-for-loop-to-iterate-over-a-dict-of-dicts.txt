<div class="post-text" itemprop="text">
<p>I have a dict of nested dicts and key-values.</p>
<pre><code> dicta = {'key1': {'keya': 'a', 'keyb': 'b'},
      'key2': {'key3':{'keyc': 'c'}}, 'key4': 4}}
</code></pre>
<p>Is there a way I can use a for loop to get to 'c'?</p>
<p>I tried,</p>
<pre><code>print(dicta['key2'])

for x in dicta['key2']:
    for y in x['key3']:
        print(y)
</code></pre>
<p>For the first print, I get </p>
<pre><code>{'key3': {'keyc': 'c'}}
</code></pre>
<p>But I get TypeError: string indices must be integers for the second print.</p>
<p>Thanks in advance!
*I edited replacing n with dicta; I copied and pasted it wrong the first time.</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, no. Dicts can be arbitrarily recursively deep, and there's no good way to traverse them using nothing but a <code>for</code> loop. (You could implement your own stack using a list and simulate recursion, but that's not "good".)</p>
<p>There's some recursive code for traversing dictionaries (counting the depth) in <a href="https://stackoverflow.com/questions/9538875/recursive-depth-of-python-dictionary">this question.</a></p>
<p>In specific, sure. Knowing the structure in advance, you can use the right number of <code>for</code> loops:</p>
<pre><code>n = {'key1': {'keya': 'a', 'keyb': 'b'},
     'key2': {'key3':{'keyc': 'c'}}, 'key4': 4}

for k1,v1 in n.items():
    try:
        for k2,v2 in v1.items():
            try:
                for k3,v3 in v2.items():
                    print(v3)
            except AttributeError:
                pass
    except AttributeError:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>for i in somedict</code> is to loop all the keys from a dictionary.
See more details from <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow noreferrer">dict views</a></p>
<blockquote>
<p>When looping through dictionaries, the key and corresponding value can
  be retrieved at the same time using the <code>items()</code> method.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer">items()</a> returns a new view of the dictionaryâ€™s items ((key, value) pairs).
So you can just try this:</p>
<pre><code>for k,v in dicta['key2'].items():
    if isinstance(v,dict):
        for k1,v1 in v.items():
            print(v1)
</code></pre>
<p><code>isinstance(v,dict)</code> return true if the object argument is an instance of the <code>dict</code> argument,so you don't need to catch exception.</p>
<p>Have a look at <a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">looping-techniques</a></p>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for k in n:
    v = n.get(k)
    if isinstance(v, dict):
    for j in v:
        print(v.get(j))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use recursion to dive into given dictionary and print the key and its values.</p>
<pre><code>def drill(dicta):
  for k in dicta.keys():
    if isinstance(dicta[k],dict):
      drill(dicta[k])
    else:
      print ('dicta[',k,']=',dicta[k])
  return
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using nested loop you can get the required results.</p>
<pre><code>for k,v in dicta.items():
     if k=="key2":
         new_dict=v
         for k1, v1 in new_dict.items():
               print v1["keyc"]
</code></pre>
</div>
<span class="comment-copy">It doesn't look like you should be <i>iterating</i> here. You probably just want <code>dicta['key2']['key3']</code>.</span>
<span class="comment-copy">What is the standard way to traverse them, not using a for loop?</span>
<span class="comment-copy">A stack (depth first search), a queue (breadth first search), or simulating either of those with recursion.</span>
<span class="comment-copy">Welcome to Stack Overflow!  While you may have solved this user's problem, code-only answers are not very helpful to users who come to this question in the future.  Please edit your answer to explain why your code solves the original problem.</span>
