<div class="post-text" itemprop="text">
<p>In the following code, I want to count the occurrence of every word in <code>word_list</code> in <code>test</code>, the code below can do this job but it may not be efficient, is there any better way to do it?</p>
<pre><code>word_list = ["hello", "wonderful", "good", "flawless", "perfect"]
test = ["abc", "hello", "vbf", "good", "dfdfdf", "good", "good"]

result = [0] * len(word_list)
for i in range(len(word_list)):
    for w in test:
        if w == word_list[i]:
            result[i] += 1

print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to count all the words in <code>test</code> in one go, then just get that count from the <code>Counter</code> for each word in <code>word_list</code>.</p>
<pre><code>&gt;&gt;&gt; word_list = ["hello", "wonderful", "good", "flawless", "perfect"]
&gt;&gt;&gt; test = ["abc", "hello", "vbf", "good", "dfdfdf", "good", "good"]
&gt;&gt;&gt; counts = collections.Counter(test)
&gt;&gt;&gt; [counts[w] for w in word_list]
[1, 0, 3, 0, 0]
</code></pre>
<p>Or using a dictionary comprehention:</p>
<pre><code>&gt;&gt;&gt; {w: counts[w] for w in word_list}
{'perfect': 0, 'flawless': 0, 'good': 3, 'wonderful': 0, 'hello': 1}
</code></pre>
<p>Creating the counter should be O(n), and each lookup O(1), giving you O(n+m) for n words in <code>test</code> and m words in <code>word_list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it in linear time using a dictionary.</p>
<pre><code>word_list = ["hello", "wonderful", "good", "flawless", "perfect"]
test = ["abc", "hello", "vbf", "good", "dfdfdf", "good", "good"]

result = []
word_map = {}
for w in test:
    if w in word_map:
        word_map[w] += 1
    else:
        word_map[w] = 1

for w in word_list:
    result.append(word_map.get(w, 0))

print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can combine <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>collections.Counter</code></a> and  <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a>:</p>
<pre><code>from collections import Counter
from operator import itemgetter

cnts = Counter(test)
word_cnts = dict(zip(word_list, itemgetter(*word_list)(cnts)))
</code></pre>
<p>Which gives:</p>
<pre><code>&gt;&gt;&gt; word_cnts
{'flawless': 0, 'good': 3, 'hello': 1, 'perfect': 0, 'wonderful': 0}
</code></pre>
<p>or if you rather want it as a <code>list</code>:</p>
<pre><code>&gt;&gt;&gt; list(zip(word_list, itemgetter(*word_list)(cnts)))
[('hello', 1), ('wonderful', 0), ('good', 3), ('flawless', 0), ('perfect', 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try to use dictionnaries :</p>
<pre><code>word_list = ["hello", "wonderful", "good", "flawless", "perfect"]
test = ["abc", "hello", "vbf", "good", "dfdfdf", "good", "good"]

result = {}
for word in word_list:
    result[word]=0
for w in test:
    if result.has_key(w):
        result[w] += 1
print(result)
</code></pre>
<p>But you would end with a different structure.
If you do not want that, you could try this instead</p>
<pre><code>word_list = ["hello", "wonderful", "good", "flawless", "perfect"]
test = ["abc", "hello", "vbf", "good", "dfdfdf", "good", "good"]

result = {}
for w in test:
    if(result.has_key(w)):
        result[w] += 1
    else:
        result[w] = 1
count = [0] * len(word_list)
for i in range(len(word_list)):
    if (result.has_key(word_list[i])):
        count[i]=result[word_list[i]]
print(count)
</code></pre>
</div>
<span class="comment-copy">wouldn't it be more efficient to do the filtering first? Also, referring to that page: <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">wiki.python.org/moin/TimeComplexity</a>, the lookup in a list is O(n), this can be improved to O(1) if you convert <code>word_list</code> to a set.</span>
<span class="comment-copy">@ZaccharieRamzi What's with all that "do the lookup in a set" today? You're the second one to suggest that. Is my answer that unclear? I'm <i>never</i> doing lookup in a list, only in a dict here, which is just as fast as lookup in a set. Also, what filtering?</span>
<span class="comment-copy">Yes you are right I got confused with what I had in mind. If you do:     <code>words = set(word_list);     new_test = [word for word in test if word in words];     counts = collections.Counter(new_test)</code> you might have faster results depending on the situation.</span>
<span class="comment-copy">@ZaccharieRamzi I don't think that that would be any faster. <code>Counter</code> does just one loop over the collection; your code does two: one for filtering, then one for creating the dictionary.</span>
<span class="comment-copy">Well, that second loop might be way faster since I removed some terms in the list. Then again, it depends on the situation.</span>
<span class="comment-copy">Nice "no libraries" solution, but even then you can make that code a bit more compact using <code>get</code> with default, e.g. <code>result.append(word_map.get(w, 0))</code></span>
<span class="comment-copy">Impressive display of functional programming, but I'd still prefer a list or dict comprehension. ;-)</span>
<span class="comment-copy">@tobias_k The comprehensions were already "taken" by another answer. Otherwise I would have added them as well :-P</span>
