<div class="post-text" itemprop="text">
<p>Is there a better way to write these exceptions instead of putting one exception into the other? In this case it works fine, but if I needed to add more exceptions, things might get very messy. </p>
<pre><code>print('I will divide two numbers for you: ')
while True:
    first_number= input('Enter first number: ')
    second_number= input('Enter second number: ')

    try:
        int(first_number)
        int(second_number)
    except ValueError:
        print('Please put it in numbers')
    else:
        try:
            answer = int(first_number)/int(second_number)
        except ZeroDivisionError:
            print("Can't divide by zero")
        else:
            print(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One <code>try</code> can have multiple <code>except</code>s.</p>
<pre><code>print('I will divide two numbers for you: ')
while True:
    first_number= input('Enter first number: ')
    second_number= input('Enter second number: ')

    try:
        answer = int(first_number) / int(second_number)
    except ValueError:
        print('Please put it in numbers')
    except ZeroDivisionError:
        print("Can't divide by zero")
    else:
        print(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another variation is to use <code>continue</code> to restart your loop in exceptional situations.  This would preclude the need for <code>try-else</code> clauses:</p>
<pre><code>print('I will divide two numbers for you: ')

while True:
    first_number = input('Enter first number: ')
    second_number = input('Enter second number: ')

    try:
        first_number = int(first_number)
        second_number = int(second_number)
    except ValueError:
        print('Please put it in numbers')
        continue

    try:
        answer = first_number / second_number
    except ZeroDivisionError:
        print("Can't divide by zero")
        continue

    print(answer)
</code></pre>
<p>The disadvantage of this approach is it is more verbose than Kevin's answer.  The advantage is that each <code>try</code> deals with only one type of thing that can go wrong, so it can make your code easier to think about.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can provide each handler underneath the next if you don't mind writing multiple except clauses or if you need specific handling of each case.</p>
<p>If you can provide a single error message and want to trim down as much as possible, you could always provide a tuple to <code>except</code> to catch many classes:</p>
<pre><code>except (ValueError, ZeroDivisionError) as e:
</code></pre>
<p>if an exception that is an instance of one of the classes specified in the tuple is raised, it'll get caught and assigned to <code>e</code> if that is wanted.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to except 2 cases as 1 you can do as Jim suggested.
I personally prefer this solution:</p>
<pre><code>try:
    a = int(string1)
    b = int(string2)
    ans = a/b
except ValueError:
    print("not numbers")
except ZeroDivisionError:
    print("zero division")
</code></pre>
</div>
<span class="comment-copy">Does else work in try/except? If so, good to know :) If not then you can put continue in each except, it will also solve this (like the else)</span>
<span class="comment-copy">Yes, an <code>else</code> may follow an <code>except</code>. It's somewhat uncommon, but syntactically valid. <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">"The try ... except statement has an optional else clause, which, when present, must follow all except clauses. It is useful for code that must be executed if the try clause does not raise an exception."</a></span>
<span class="comment-copy">This is not valid Python syntax.</span>
