<div class="post-text" itemprop="text">
<p>I have defined a function which requires 3 arguments, one of which must be a list.
One solution that I found works only when the list is made up of integers, which will not necessarily be the case (the types can vary within the same list). 
How to request a list type input from the user? e.g.: when something like [1,2,3] is inputted, it is considered as a list?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Here's one way:</strong></p>
<pre><code>$ cat foo.py
import sys
input1 = sys.argv[1]
input2 = sys.argv[2]
print('Before\n-------')
print('input1:{},type_of_input1:{}'.format(input1,  type(input1)))
print('input2:{},type_of_input2:{}'.format(input2,  type(input2)))
print('After\n-------')
input1 = input1.split(' ')
print('input1:{},type_of_input1:{}'.format(input1,  type(input1)))
print('input2:{},type_of_input2:{}'.format(input2,  type(input2)))
$
</code></pre>
<p><strong>Execution output</strong></p>
<pre><code>$ python foo.py 'foo bar' bat
Before
-------
input1:foo bar,type_of_input1:&lt;type 'str'&gt;
input2:bat,type_of_input2:&lt;type 'str'&gt;
After
-------
input1:['foo', 'bar'],type_of_input1:&lt;type 'list'&gt;
input2:bat,type_of_input2:&lt;type 'str'&gt;
$
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Keep it simple and safe and use <code>input</code> and convert the input into a list yourself: </p>
<pre><code>import re
re.sub("[^\w]", " ", input('--&gt;')).split()
--&gt;This is a string of words converted into a list

output: 

['This', 'is', 'a', 'string', 'of', 'words', 'converted', 'into', 'a', 'list']
</code></pre>
<p><code>input</code> is a built-in: <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#input</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval</a>:</p>
<pre><code>import ast
while True:
    s=raw_input("Enter a list: ")
    s=ast.literal_eval(s)
    if not isinstance(s, list):
        print "Nope! {} is a {}".format(s, type(s)) 
    else:
        break
print s 
</code></pre>
<p>If you want the option of the user entering a tuple (by entering <code>1,2,3</code> for example) add <code>tuple</code> to <code>isinstance</code>:</p>
<pre><code>import ast
while True:
    s=raw_input("Enter a list: ")
    s=ast.literal_eval(s)
    if not isinstance(s, (list, tuple)):
        print "Nope! {} is a {}".format(s, type(s)) 
    else:
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you completely trust user input, you can just use <code>eval()</code>. Assuming the user enters the string <code>[1, 2, 3]</code>:</p>
<pre><code>x = input()    # Python 3, use raw_input for Python 2
y = eval(x)    # Dangerous, don't use with untrusted input

print(y)
# [1, 2, 3]

print(len(y))
# 3
</code></pre>
<p><strong>Update:</strong></p>
<p><code>ast.literal_eval</code> is a better choice here.</p>
<pre><code>import ast

x = input()    # Python 3, use raw_input for Python 2
y = ast.literal_eval(x)

print(y)
# [1, 2, 3]

print(len(y))
# 3
</code></pre>
</div>
<span class="comment-copy">Read about <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval</a></span>
<span class="comment-copy">What's the relationship to the question?</span>
<span class="comment-copy">is the question: how to request a list type input from the user?</span>
<span class="comment-copy">@JohnDebs: "What's the relationship..?" With ast, the answer to you question is trivial. Try <code>ast.literal_eval("[1,2,'3']")</code> It will parse the list as a list, the integers as integers, the string as a string. Any other approach is going to be a lot more work (other than using <code>eval</code> but that has its own issues of safety...)</span>
<span class="comment-copy"><code>eval</code> is a dangerous idea ... just waiting for someone to input <code>__import__("shutil").rmtree</code></span>
<span class="comment-copy">Agree, that's why I mentioned that it was dangerous in my answer. If the intent is for the script to be run interactively by the author, locally, it's no more dangerous than a shell prompt.</span>
<span class="comment-copy">But why suggest <code>eval</code> instead of <code>ast.literal_eval</code> for such a case?</span>
<span class="comment-copy"><code>ast.literal_eval</code> is clearly a better option. You're right, I can't think of a reason to use <code>eval</code> over it. I'll update the answer to make that clear. Thanks!</span>
