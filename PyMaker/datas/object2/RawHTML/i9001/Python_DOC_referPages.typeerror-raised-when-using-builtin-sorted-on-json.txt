<div class="post-text" itemprop="text">
<p>Using Python 3.5, I'm running into a <code>TypeError</code> when I'm sorting JSON. The function can be found here on StackOverflow, and recursively sorts the dictionaries and lists found in valid JSON. I'm not using the json-module to sort my keys because it doesn't sort "deep" enough into the dictionary.</p>
<p>The <code>TypeError</code> arises from a comparison between two dictionaries: when similar dict's are evaluated by the builtin <code>sorted</code>, a comparison of their keys and values is made. If the keys are the same, their values are compared. If the values are of different types, a <code>TypeError</code> is raised.</p>
<p>Here's the JSON:</p>
<pre><code>{
    "features": [{
        "attributes": {
            "AnalysisArea": 0.21410982
        }
    }, {
        "attributes": {
            "AnalysisArea": null
        }
    }]
}
</code></pre>
<p>and here's the function:</p>
<pre><code>def sort_json(iter_obj):
    if isinstance(iter_obj, dict):
        return sorted((k, sort_json(v)) for k, v in iter_obj.items())
    elif isinstance(iter_obj, list):
        return sorted(sort_json(x) for x in iter_obj)
    else:
        return iter_obj
</code></pre>
<p>My thoughts as to getting around this involve either a) casting None-type objects to a float or string (since the <code>TypeError</code> would also happen if None is compared to Str) or b) creating a custom class and overriding the <code>__lt__</code>, <code>__gt__</code> special methods to return <code>True</code> or <code>False</code> based on a type comparison. (e.g. if a=None and b=0.0, a

<p>Is there a better way to avoid this issue and allow the sorted function to do my sorting for me without raising a <code>TypeError</code>?</p>
</p></div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted()</a> allows you to specify the key function, and for Python3 there is a <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer">functools.cmp_to_key()</a> which lets you supply a comparison function (like you could in Python 2)</p>
<p>Write a comparison function that will sort it however you want it sorted.</p>
</div>
<span class="comment-copy">What do you expect the result to be?  How should "null" and a number be sorted relative to each other?</span>
<span class="comment-copy">I'd like a much larger JSON to be sorted, but when this pattern is found, Python throws a TypeError.  Here's a sample: <a href="https://drive.google.com/drive/folders/0ByL968qEtAzBWnIxRlZKYWtQRjQ" rel="nofollow noreferrer">drive.google.com/drive/folders/0ByL968qEtAzBWnIxRlZKYWtQRjQ</a></span>
<span class="comment-copy">Why are you trying to sort the values in the lists, the order <b>matters</b> in lists.  if you have a list of dictionaries how are you expecting the dictionaries to be sorted?</span>
<span class="comment-copy">do you maybe want to use <code>collections.OrderedDict</code> so you still have a dictionary but the order of the keys is preserved?  If you do want to sort a list of dictionaries what logic would you sort by?</span>
<span class="comment-copy">@Drew: I understand that.  My question is <i>what do you want the order to be</i>.  Suppose I give you a list like <code>[1, null, "hello"]</code>.  What do you think is the "correct" order that your sort function should return?</span>
