<div class="post-text" itemprop="text">
<p>I'm having trouble understanding the use of asynchronous comprehensions introduced in Python 3.6. As a disclaimer, I don't have a lot of experience dealing with asynchronous code in general in Python.</p>
<p>The example given in the <a href="https://docs.python.org/3/whatsnew/3.6.html" rel="noreferrer">what's new for Python 3.6</a> document is:</p>
<pre><code>result = [i async for i in aiter() if i % 2]
</code></pre>
<p>In the <a href="https://www.python.org/dev/peps/pep-0530/" rel="noreferrer">PEP</a>, this is expanded to:</p>
<pre><code>result = []
async for i in aiter():
    if i % 2:
        result.append(i)
</code></pre>
<p>I <em>think</em> I understand that the <code>aiter()</code> function gets called asynchronously, so that each iteration of <code>aiter</code> can proceed without the previous one necessarily returning yet (or is this understanding wrong?).</p>
<p>What I'm not sure about is how that then translates to the list comprehension here. Do results get placed into the list in the order that they are returned? Or are there effective 'placeholders' in the final list so that each result is placed in the list in the right order? Or am I thinking about this the wrong way?</p>
<p>Additionally, is someone able to provide a real-world example that would illustrate both an applicable use case and the basic mechanics of <code>async</code> in comprehensions like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are basically asking how an <code>async for</code> loop works over a regular loop. That you can now use such a loop in a list comprehension doesn't make any difference here; that's just an optimisation that avoids repeated <code>list.append()</code> calls, exactly like a normal list comprehension does.</p>
<p>An <code>async for</code> loop then, simply awaits each next step of the iteration protocol, where a regular <code>for</code> loop would block.</p>
<p>To illustrate, imagine a normal <code>for</code> loop:</p>
<pre><code>for foo in bar:
    ...
</code></pre>
<p>For this loop, Python essentially does this:</p>
<pre><code>bar_iter = iter(bar)
while True:
    try:
        foo = next(bar_iter)
    except StopIteration:
        break
    ...
</code></pre>
<p>The <code>next(bar_iter)</code> call is not asynchronous; it blocks.</p>
<p>Now replace <code>for</code> with <code>async for</code>, and what Python does changes to:</p>
<pre><code>bar_iter = aiter(bar)  # aiter doesn't exist, but see below
while True:
    try:
        foo = await anext(bar_iter)  # anext doesn't exist, but see below
    except StopIteration:
        break
    ...
</code></pre>
<p>In the above example <code>aiter()</code> and <code>anext()</code> are fictional functions; these are functionally exact equivalents of their <code>iter()</code> and <code>next()</code> brethren but instead of <code>__iter__</code> and <code>__next__</code> these use <code>__aiter__</code> and <code>__anext__</code>. That is to say, asynchronous hooks exist for the same functionality but are distinguished from their non-async variants by the prefix <code>a</code>.</p>
<p>The <code>await</code> keyword there is the crucial difference, so for each iteration an <code>async for</code> loop yields control so other coroutines can run instead.</p>
<p>Again, to re-iterate, all this already was added in Python 3.5 (see <a href="https://www.python.org/dev/peps/pep-0492/#asynchronous-iterators-and-async-for" rel="noreferrer">PEP 492</a>), all that is new in Python 3.6 is that you can use such a loop in a list comprehension too. And in generator expressions and set and dict comprehensions, for that matter.</p>
<p>Last but not least, the same set of changes also made it possible to use <code>await &lt;expression&gt;</code> in the expression section of a comprehension, so:</p>
<pre><code>[await func(i) for i in someiterable]
</code></pre>
<p>is now possible.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I <em>think</em> I understand that the <code>aiter()</code> function gets called asynchronously, so that each iteration of <code>aiter</code> can proceed without the previous one necessarily returning yet (or is this understanding wrong?).</p>
</blockquote>
<p>That understanding is wrong. Iterations of an <code>async for</code> loop cannot be performed in parallel. <code>async for</code> is just as sequential as a regular <code>for</code> loop.</p>
<p>The asynchronous part of <code>async for</code> is that it lets the iterator <code>await</code> on behalf of the coroutine iterating over it. It's only for use within asynchronous coroutines, and only for use on special asynchronous iterables. Other than that, it's mostly just like a regular <code>for</code> loop.</p>
</div>
<span class="comment-copy">I'm curious about async generators as well. Same behavior or different?</span>
<span class="comment-copy">Thanks Martijn for the detailed answer. So an <code>async for</code> loop behaves the same as a normal <code>for</code> loop, except that control of loop iteration is passed to the enclosing coroutine? I will have to review the use of coroutines properly, but that makes a lot more sense.</span>
<span class="comment-copy">Thanks, it seems I needed to go and properly understand coroutines before trying to wrap my head around the use of <code>async</code>. I appreciate the correction. :)</span>
