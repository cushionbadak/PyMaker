<div class="post-text" itemprop="text">
<p>I have a list of strings such as this : </p>
<pre><code>['z+2-44', '4+55+z+88']
</code></pre>
<p>How can I split this strings in the list such that it would be something like</p>
<pre><code>[['z','+','2','-','44'],['4','+','55','+','z','+','88']]
</code></pre>
<p>I have tried using the <code>split</code> method already however that splits the 44 into 4 and 4, and am not sure what else to try.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex:</p>
<pre><code>import re
lst = ['z+2-44', '4+55+z+88']
[re.findall('\w+|\W+', s) for s in lst]
# [['z', '+', '2', '-', '44'], ['4', '+', '55', '+', 'z', '+', '88']]
</code></pre>
<p><code>\w+|\W+</code> matches a pattern that consists either of word characters (alphanumeric values in your case) or non word characters (<code>+-</code> signs in your case).</p>
</div>
<div class="post-text" itemprop="text">
<p>That will work, using <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a></p>
<pre><code>z = ['z+2-44', '4+55+z+88']

print([["".join(x) for k,x in itertools.groupby(i,str.isalnum)] for i in z])
</code></pre>
<p>output:</p>
<pre><code>[['z', '+', '2', '-', '44'], ['4', '+', '55', '+', 'z', '+', '88']]
</code></pre>
<p>It just groups the chars if they're alphanumerical (or not), just join them back in a list comprehension.</p>
<p>EDIT: the general case of a calculator with parenthesis has been asked as a follow-up question <a href="https://stackoverflow.com/questions/42333875/python-extracting-split-list-correctly">here</a>. If <code>z</code> is as follows:</p>
<pre><code>z = ['z+2-44', '4+55+((z+88))']
</code></pre>
<p>then with the previous grouping we get:</p>
<pre><code>[['z', '+', '2', '-', '44'], ['4', '+', '55', '+((', 'z', '+', '88', '))']]
</code></pre>
<p>Which is not easy to parse in terms of tokens. So a change would be to <code>join</code> only if alphanum, and let as list if not, flattening in the end using <code>chain.from_iterable</code>:</p>
<pre><code>print([list(itertools.chain.from_iterable(["".join(x)] if k else x for k,x in itertools.groupby(i,str.isalnum))) for i in z])
</code></pre>
<p>which yields:</p>
<pre><code>[['z', '+', '2', '-', '44'], ['4', '+', '55', '+', '(', '(', 'z', '+', '88', ')', ')']]
</code></pre>
<p>(note that the alternate regex answer can also be adapted like this: <code>[re.findall('\w+|\W', s) for s in lst]</code> (note the lack of <code>+</code> after <code>W</code>)</p>
<p>also <code>"".join(list(x))</code> is slightly faster than <code>"".join(x)</code>, but I'll let you add it up to avoid altering visibility of that already complex expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternative solution using <a href="https://docs.python.org/3/library/re.html#re.split" rel="noreferrer"><strong><em>re.split</em></strong></a> function:</p>
<pre><code>l = ['z+2-44', '4+55+z+88']
print([list(filter(None, re.split(r'(\w+)', i))) for i in l])
</code></pre>
<p>The output:</p>
<pre><code>[['z', '+', '2', '-', '44'], ['4', '+', '55', '+', 'z', '+', '88']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could only use <code>str.replace()</code> and <code>str.split()</code> built-in functions within a list comprehension:</p>
<pre><code>In [34]: lst = ['z+2-44', '4+55+z+88']

In [35]: [s.replace('+', ' + ').replace('-', ' - ').split() for s in lst]
Out[35]: [['z', '+', '2', '-', '44'], ['4', '+', '55', '+', 'z', '+', '88']]
</code></pre>
<p>But note that this is not an efficient approach for longer strings. In that case the best way to go is using regex.</p>
<p>As another pythonic way you can also use <code>tokenize</code> module:</p>
<pre><code>In [56]: from io import StringIO

In [57]: import tokenize

In [59]: [[t.string for t in tokenize.generate_tokens(StringIO(i).readline)][:-1] for i in lst]
Out[59]: [['z', '+', '2', '-', '44'], ['4', '+', '55', '+', 'z', '+', '88']]
</code></pre>
<blockquote>
<p>The <a href="https://docs.python.org/3/library/tokenize.html" rel="nofollow noreferrer">tokenize</a> module provides a lexical scanner for Python source code, implemented in Python. The scanner in this module returns comments as tokens as well, making it useful for implementing “pretty-printers,” including colorizers for on-screen displays.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you want to stick with <code>split</code> (hence avoiding regex), you can provide it with an optional character to split on:</p>
<pre><code>&gt;&gt;&gt; testing = 'z+2-44'
&gt;&gt;&gt; testing.split('+')
['z', '2-44']
&gt;&gt;&gt; testing.split('-')
['z+2', '44']
</code></pre>
<p>So, you could whip something up by chaining the split commands.</p>
<p>However, using regular expressions would probably be more readable:</p>
<pre><code>import re

&gt;&gt;&gt; re.split('\+|\-', testing)
['z', '2', '44']
</code></pre>
<p>This is just saying to "split the string at any + or - character" (the backslashes are escape characters because both of those have special meaning in a regex.</p>
<p>Lastly, in this particular case, I imagine the goal is something along the lines of "split at every non-alpha numeric character", in which case regex can still save the day:</p>
<pre><code>&gt;&gt;&gt; re.split('[^a-zA-Z0-9]', testing)
['z', '2', '44']
</code></pre>
<p>It is of course worth noting that there are a million other solutions, as discussed in some other SO discussions.</p>
<p><a href="https://stackoverflow.com/questions/4998629/python-split-string-with-multiple-delimiters">Python: Split string with multiple delimiters</a></p>
<p><a href="https://stackoverflow.com/questions/1059559/split-strings-with-multiple-delimiters">Split Strings with Multiple Delimiters?</a></p>
<p>My answers here are targeted towards simple, readable code and not performance, in honor of Donald Knuth</p>
</div>
<span class="comment-copy">The specification is incomplete I guess. What about math operators * and /? What about variables a, b, and c? Is pi a constant, a variable or p*i? The question as given will attract answers that might not really be helpful for all your cases.</span>
<span class="comment-copy">@martineau I believe that <a href="http://stackoverflow.com/questions/4736/learning-regular-expressions">this</a> question is not a proper duplicate.</span>
<span class="comment-copy">@Kasramvd: I'd be interested in hearing why you think that.</span>
<span class="comment-copy">@martineau Because answering this question doesn't need a knowledge about regex, necessarily. Also it's not only about string processing either, it's a list containing strings. As you can see these in my answer. I also mentioned the proper usage of the regex as well.</span>
<span class="comment-copy">@Kasramvd: While it's certainly possible to solve the problem without using regular expressions, it's really a poor way to do it (and possibly an excuse to not learn how to use regular expressions if one doesn't know already). However, if you feel strongly that the question being marked as a duplicate was wrong, feel free to reopen it yourself (or at least vote to reopen it).</span>
<span class="comment-copy">You beated me by 3 secs :P</span>
<span class="comment-copy">you're not a sore loser as I see :) thanks for the edit</span>
<span class="comment-copy">Asker wants those signs to be in resulted list as well. not just z 2 44.</span>
<span class="comment-copy">Ah yes, should have read the question better. I would update the answer but I see it has already been answered at this point. Carry on!</span>
