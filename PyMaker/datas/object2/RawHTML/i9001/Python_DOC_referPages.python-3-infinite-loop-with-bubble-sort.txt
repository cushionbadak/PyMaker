<div class="post-text" itemprop="text">
<p>I have a problem where I had to sort  a list of numbers, which I did fine. But then I am to put into a list the 5 highest numbers in the list, and I have to note that there are repetitive numbers. However, when I try to do this, nothing prints. If I try to print "count", there is just an infinite number of increasing numbers printed. What am I doing wrong? </p>
<pre><code>list = [8,3,7,4,2,1,6,5,10,9,3,9,6,7,5]

def sortList(list):
    switch = 1
    temp = int(0)

    while (switch != 0):
        switch = 0
        for i in range(len(list)-1):
            if list[i] &gt; list[i+1]:
                temp = list[i]
                list[i] = list[i+1]
                list[i+1] = temp
                switch = 1
</code></pre>
<p>#this is where my problem is </p>
<pre><code>    count = int(0) 
    expensive5 = []

    while count != 5:

        for i in range(len(list)-1, 0, -1):
            if float(list[i]) &gt; float(list[i-1]):
                expensive5.append(list[i])
                count += 1
                #if i print count here, I get an infinite number of increasing numbers





     print(expensive5)


sortList(list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that your <code>count</code> variable passes 5 on the first time through the <code>for</code> loop, so <code>count</code> is never equal to 5 when the while loop checks its condition.  To fix this, you need to move the check inside the inner loop like so:</p>
<pre><code>count = int(0) 
expensive5 = []

for i in range(len(list)-1, 0, -1):
    if float(list[i]) &gt; float(list[i-1]):
        expensive5.append(list[i])
        count += 1
        #if i print count here, I get an infinite number of increasing numbers
        if count == 5: break

print(expensive5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of counting, I suggest to simply use sets and then use slicing to get the desired numbers in the list.</p>
<pre><code>expensive5 = bubble_sort(list(set(l)))[:-6:-1]
print(expensive5)
</code></pre>
<p>Also, I suggest to not use <code>list</code> as a variable name as it's a default function to convert to type <code>list</code>. Here I'm using the variable <code>l</code> instead.</p>
<pre><code>l = [8,3,7,4,2,1,6,5,10,9,3,9,6,7,5]

def sortList(l):
    switch = 1
    temp = int(0)

    while (switch != 0):
        switch = 0
        for i in range(len(l)-1):
            if l[i] &gt; l[i+1]:
                temp = l[i]
                l[i] = l[i+1]
                l[i+1] = temp
                switch = 1
    return l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a set to only get unique elements in a list, since the list is sorted you can get the 5 highest numbers like so:</p>
<pre><code>l = [8,3,7,4,2,1,6,5,10,9,3,9,6,7,5]

def bubble_sort(l):
  changed = True
  while changed:
    changed = False
    for i in range(len(l) - 1):
      if l[i] &gt; l[i+1]:
        l[i], l[i+1] = l[i+1], l[i]
        changed = True
  return l

print(list(set(bubble_sort(l)))[-5:]) #[6, 7, 8, 9, 10]
</code></pre>
<p>Try it <a href="https://repl.it/Ffvh/0" rel="nofollow noreferrer">here!</a></p>
<p>Other general tips: </p>
<ul>
<li>Use <a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">snake_case</a> in python rather than <a href="https://en.wikipedia.org/wiki/Camel_case" rel="nofollow noreferrer">camelCase</a></li>
</ul>
</div>
<span class="comment-copy">I wouldn't recommend this.  Sets don't guarantee any ordering on their contents, so while CPython might currently preserve sorted order, you shouldn't rely on that behavior.  So for this to work, you would need to sort again after creating the set.</span>
<span class="comment-copy">As of python 3.6, sets preserves order.</span>
<span class="comment-copy">I see, I wasn't aware of that.  I still stand by my statement (or at least would recommend that this be clarified in the answer), because 1) it isn't guaranteed to work on versions earlier than python 3.6, and plenty of people who are on python 3.x aren't necessarily on python 3.6, and 2) converting to a set is unnecessarily expensive for what OP is trying to do</span>
<span class="comment-copy">I wouldn't recommend this. Sets don't guarantee any ordering on their contents, so while CPython might currently preserve sorted order, you shouldn't rely on that behavior. So for this to work, you would need to sort again after creating the set.</span>
<span class="comment-copy">OP tagged python 3.x <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-520-preserving-class-attribute-definition-order" rel="nofollow noreferrer">docs.python.org/3/whatsnew/â€¦</a></span>
<span class="comment-copy">I see, I wasn't aware of that. I still stand by my statement (or at least would recommend that this be clarified in the answer), because 1) it isn't guaranteed to work on versions earlier than python 3.6, and plenty of people who are on python 3.x aren't necessarily on python 3.6, and 2) converting to a set is unnecessarily expensive for what OP is trying to do</span>
