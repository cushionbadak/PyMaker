<div class="post-text" itemprop="text">
<p>I did a few searches on Python3 and interfaces. I can't seem to find a direct answer on if it's pythonic, or not to use interfaces. I understand that python allows mixins, and allows duck typing. However, they get a set of "requirements" from implementing the interface. What is the decision on Python3 interfaces?</p>
<p>If Interfaces are pythonic then what is the best way to implement them?</p>
</div>
<div class="post-text" itemprop="text">
<p>While Python 2 and 3 supports this type of functionality via <em>nominal subtyping</em> (<a href="https://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful">mixins</a>) and <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">abstract base classes</a>, if you're using type annotations, <a href="https://www.python.org/dev/peps/pep-0544/" rel="nofollow noreferrer">PEP 544</a> introduces the concept of <em>static duck typing</em> with <code>Protocol</code>. Similar to Swift protocols or Java interfaces, <code>Protocol</code> defines an interface for subtypes (optionally including default implementations for properties and methods).</p>
<p>You can use Protocols now in all Python versions (except 3.5.0) by importing the <a href="https://github.com/python/typing/tree/master/typing_extensions" rel="nofollow noreferrer"><code>typing-extensions</code></a> module.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/372042/difference-between-abstract-class-and-interface-in-python#372121">Python doesn't have (and doesn't need) a formal Interface contract</a></span>
<span class="comment-copy">I have always considered them a way to bring Java paradigms into Python. Therefore I do not consider them pythonic at all.</span>
<span class="comment-copy">Look up "duck typing". Interfacing is different than in many other languages.</span>
<span class="comment-copy">@martineau Thanks for helping me fix the way I described my question.</span>
<span class="comment-copy">You're welcome. Because of duck typing and the some of other reasons you mention in your question, Python doesn't determine suitability from an object's type—nor does it provide explicit language support for protocols or interfaces—so the practice of them with it is not widespread (and also why you're not finding a lot of information about it). See the <a href="https://en.wikipedia.org/wiki/Duck_typing#Protocols_and_Interfaces" rel="nofollow noreferrer">Protocols and Interfaces</a> section in the Wikipedia article on <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">Duck Typing</a>.</span>
