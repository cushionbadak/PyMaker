<div class="post-text" itemprop="text">
<p>I have a string which is list like this</p>
<pre><code>list_str = '[148654.08425925925, 148656.99994212962, 148658.08229166668, 148661.0020601852]'
</code></pre>
<p>then I use eval() to convert it to real list object in Python</p>
<pre><code>print eval(list_str)
</code></pre>
<p>However, the output is rounded which I don't want</p>
<pre><code>0 = {float} 148654.084259
1 = {float} 148656.999942
2 = {float} 148658.082292
3 = {float} 148661.00206
</code></pre>
<p>How could I make it keep the values as in String (decimal with precision) ?</p>
<p><em>I need to use eval() because it will use other operation on this list as well</em></p>
</div>
<div class="post-text" itemprop="text">
<p>While there can be loss of precision in floating point, there is no loss of precision here, given that it looks like the string was generated from a Python list of floats to begin with.  Note that <code>ast.literal_eval</code> is recommended over <code>eval</code>, however:</p>
<pre><code>&gt;&gt;&gt; list_str = '[148654.08425925925, 148656.99994212962, 148658.08229166668, 148661.0020601852]'
&gt;&gt;&gt; import ast
&gt;&gt;&gt; L = ast.literal_eval(list_str)
&gt;&gt;&gt; L
[148654.08425925925, 148656.99994212962, 148658.08229166668, 148661.0020601852]
</code></pre>
<p>Note the above exactly matches the original string.  However, printing individual floats as opposed to the whole list defaults to six digits after the decimal, so if you want more precision, specify it:</p>
<pre><code>&gt;&gt;&gt; for f in L:
...     print '{:.11f}'.format(f)
...     
148654.08425925925
148656.99994212962
148658.08229166668
148661.00206018519
</code></pre>
<p>I also recommend looking into the <a href="https://docs.python.org/2/library/pickle.html" rel="nofollow noreferrer">pickle</a> or <a href="https://docs.python.org/2/library/json.html" rel="nofollow noreferrer">json</a> modules for saving the list in the first place to avoid using <code>eval</code> or even <code>ast.literal_eval</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using Decimal in python</p>
<pre><code>from decimal import *
mlist = '[148654.08425925925, 148656.99994212962, 148658.08229166668, 148661.0020601852]'
mlisttrim = mlist[1:-1]
l = []
for i in mlisttrim.split(', '):
    l.append(Decimal(i))
print l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>floats</code> are represented by binary fractions and there is a loss of precision when converting to and from the dotted decimal representation you are using (<a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">see here</a>). The python <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code> package</a> implements decimal floating point arithmetic and doesn't have that limitation. </p>
<p>You can't use <code>eval</code> to break up the list because those values will evaluate to floats, but you can use the regex package to extract the floats and build the list from there.</p>
<pre><code>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; import re
&gt;&gt;&gt; list_str = '[148654.08425925925, 148656.99994212962, 148658.08229166668, 148661.0020601852]'
&gt;&gt;&gt; items = [decimal.Decimal(x) for x in re.findall(r'\d+\.?\d*', list_str)]
&gt;&gt;&gt; items
[Decimal('148654.08425925925'), Decimal('148656.99994212962'), Decimal('148658.08229166668'), Decimal('148661.0020601852')]
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Never name a variable things like  <code>list</code>, etc... Now you cannot call <code>list(..)</code> after that statement.</span>
<span class="comment-copy">@WillemVanOnsem probably 2.x as the <code>print</code> is not parenthesised.</span>
<span class="comment-copy">@Ev.Kounis, what's the point of speculating? Why "probably 2.x"? Lots of people use Python 3. Guessing something like that isn't helpful; let the OP answer.</span>
<span class="comment-copy">Is the numpy tag relevant?</span>
<span class="comment-copy">Just to point out the obvious: a (potentially) very easy fix to your problem is using Python 3.x instead of Python 2.7. In Python 3.5, your code produces the result that you require.</span>
<span class="comment-copy">I need to use eval() because it will use other operation on this list as well.</span>
<span class="comment-copy">@Báº±ngRikimaru, never use <code>eval()</code> unless you're <i>very</i> sure you need to. It can run arbitrary code. You almost never need it. Use <a href="https://docs.python.org/3/library/ast.html?highlight=ast.literal_eval#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a> instead.</span>
<span class="comment-copy">@Chris yeah, it can change anything, I have same idea, but I would need to solve this problem with the decimal first, thanks.</span>
<span class="comment-copy">seem like I don't have other idea, thanks for your useful comment.</span>
