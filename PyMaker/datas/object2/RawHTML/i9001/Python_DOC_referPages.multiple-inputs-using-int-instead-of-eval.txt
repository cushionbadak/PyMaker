<div class="post-text" itemprop="text">
<p>Small question: Why doesn't this piece of code work when I use <code>int</code> but does when I use <code>eval</code>?
<code>int</code> can only take one input? Is there a way to make it take multiple inputs as concise as using eval? Int is a stronger condition so that's why I am curious about how it would work.</p>
<pre><code>a,b,c = int(input("enter numbers: "))
print(no_teen_sum(a,b,c))
</code></pre>
<p>This gives <code>ValueError: invalid literal for int() with base 10</code>, but the following code does work.</p>
<pre><code>a,b,c = eval(input("enter numbers: "))
print(no_teen_sum(a,b,c))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>int</code> takes one input and possibly a base:</p>
<pre><code>&gt;&gt;&gt; int('46',7) # 46 is 34 in base 7

34
</code></pre>
<p>But you can use <code>int</code> along with <code>map</code>: </p>
<pre><code>&gt;&gt;&gt; map(int,['1','2','3'])

[1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension:</p>
<pre><code>def main():
    numbers = input("enter numbers: ").split()
    print(no_teen_sum(*[int(n) for n in numbers)])

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python is trying to parse the whole string as <em>one</em> integer rather than three.</p>
<p>What you could do is:</p>
<pre><code>a, b, c = map(int, input("enter numbers: ").split())
</code></pre>
<p>This way you are splitting the list into three strings, and then converting (mapping) each string to an int.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><code>int</code> can only take one input?</p>
</blockquote>
<p>Yes, and that is technically true for <code>eval</code>, too. It's just that <code>eval</code> might return something other than an <code>int</code>. In your case, I'm assuming you enter something like <code>1, 2, 3</code> on the <code>input</code> prompt. <code>eval</code> simply parses that as a tuple, which it returns, and <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">unpacks</a> into your three variables.</p>
<p>You can, however, easily achieve something similar to what you want using list comprehension:</p>
<pre><code>a, b, c = [int(x.strip()) for x in input("Enter numbers: ").split(",")]
</code></pre>
<p>This has the added benefit that you don't risk having some completely unexpected type returned from <code>eval</code>.</p>
<p>One caveat with using <code>eval</code> that should perhaps be worth noting is that it accepts any valid Python syntax and executes the parsed result, which may include arbitrary function calls, including code to erase your hard drive. Not much of a problem when you're just writing a program for yourself to use, but just so that you know.</p>
</div>
