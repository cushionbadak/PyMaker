<div class="post-text" itemprop="text">
<p>I was checking a similar problem about importing python files and it seems like something to do with my <code>_init_.py</code> file in the main parent folder a level up from my tests folder (which contains all my test files) for importing classes, but not sure. Maybe it is nothing to do with this.</p>
<p>I am using <code>pytest</code> for testing and want to group multiple tests into a class that helps me test the parsing of multiple sentences: <a href="http://doc.pytest.org/en/latest/getting-started.html#grouping-multiple-tests-in-a-class" rel="nofollow noreferrer">http://doc.pytest.org/en/latest/getting-started.html#grouping-multiple-tests-in-a-class</a>.</p>
<p>Now, when from another file which is in the same folder (<code>test_pipelines.py</code>), I try and run <code>import test_text</code> I am unable to do this. Why is this so?</p>
<p>The main issue here is this statement <code>from test_text import UNEMPLOYMENT_SENTENCES</code> within <code>test_pipelines.py</code> is not even picking up the file <code>test_text</code>, let alone<code>UNEMPLOYMENT_SENTENCES</code> within it.</p>
<p><strong>Contents of test_text.py</strong></p>
<pre><code>UNEMPLOYMENT_SENTENCES = [
    "The number of people out of work in Brazil is 2% of the population",
    "2% of Brazil is out of work",
    "2% of Brazil's citizens are jobless",
    "About 9% of Brazil's citizens are out of work or looking for jobs",
    "Brazil is in trouble; it has an unemployment rate of 7%",
    "Brazil is facing issues - it has an unemployment % of 6%"
]

def test_sample_sentences():
    """
    :param sentence_array: array
    :return: tests all sentences with 3 tests
    """

    for sentence in UNEMPLOYMENT_SENTENCES:
        doc = Text(sentence)
        test_instance = UnemploymentTestClass(doc)
        test_instance.sentence_tokenization()
        test_instance.entities()
        test_instance.claim_candidates()

class UnemploymentTestClass:

    def __init__(self,s):
        """
        Initiates a test sentence
        """
        self.s=s

    ....What follows is a list of functions that call self as an argument but don't contain 'test' at the front for pytest. e.g. def sentence_tokenization(self),  def entities(self), def claim_candidates(self), using self.s as a parameter to play with.


class ComplexTestClass:
    """
    Complex and more nuanced tests for specific sentences
    """
   ...Note, these are all @staticmethod functions which start with the word 'test_' e.g. def test_multiple_sentences().... so pytest can pick them up.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The file <code>__init__.py</code> is used to structure your modules and group them.</p>
<p>If you place your <code>test_text.py</code> in the same folder where you have the script that imports it, there should not be any problems. In case your <code>test_text.py</code> is in a subfolder I would recommend to add the <code>__init__.py</code> file.</p>
<p>This is how a package structure would look like:</p>
<pre><code>sound/                          Top-level package
      __init__.py               Initialize the sound package
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
</code></pre>
<p>Inside the <code>__init__.py</code> you can declare vars like <code>__all__ = ["echo", "surround", "reverse"]</code> which will import all submodules that you specify wen <code>from sound.effects import *</code></p>
<p>PS: I have copied your code and did not have any problem to import it from the same folder.</p>
<p>PS2: source: <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#packages</a></p>
<p>Piece of code that works for me when i place prueba.py (your code snippet) in the same folder as the scripts that imports it.</p>
<pre><code>from prueba import UnemploymentTestClass
a = UnemploymentTestClass("asd")
print a.s

# print result
# asd
</code></pre>
</div>
<span class="comment-copy">Hi @Manuel the import is from the same folder as <code>test_text.py</code> so this is not the issue. I think the problem may be to do with my classes.</span>
<span class="comment-copy">try to do:  <code>from file import Class</code>, also you can add this line of code to the <code>__init__.py</code> and modify the <code>__all__</code> var so it looks like <code>__all__ = ["Class1", "Class2"]</code></span>
<span class="comment-copy">I want all classes (what you call modules) ideally to be imported when I import <code>test_text.py</code> from <code>test_pipelines.py</code>. i.e. <code>UnemploymentTestClass</code>, <code>ComplexTestClass</code> and <code>UNEMPLOYMENT_SENTENCES</code>. The <code>UNEMPLOYMENT_SENTENCES</code> fixed variable is most important but specifying specific ones isn't that important. The main issue here is just this statement <code>from test_text import UNEMPLOYMENT_SENTENCES</code> is not even picking up <code>test_text</code>, let alone <code>UNEMPLOYMENT_SENTENCES</code> within it.</span>
<span class="comment-copy">Using the code snippet you copied above this piece of code seems to work for me (see the edit in the answer)</span>
<span class="comment-copy">Can you share more details about the error you are getting?</span>
