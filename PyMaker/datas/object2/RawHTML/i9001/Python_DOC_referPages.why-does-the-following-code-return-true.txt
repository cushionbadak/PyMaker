<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/31421379/why-does-nottrue-in-false-true-return-false">Why does “not(True) in [False, True]” return False?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I am doing an assignment to compile a subset of Pascal and in the initial program there is a line of code like this:</p>
<pre><code>if x.tp == y.tp in {Bool, Int}:
    some other code ...
</code></pre>
<p>This makes me really confused as <code>x.tp == y.tp</code> returns a boolean value <code>True</code> or <code>False</code> and thus <code>True/False in {Bool, Int}</code> will always return <code>False</code>.</p>
<p>The definition of <code>Bool</code> and <code>Int</code> is the following:</p>
<pre><code>class Int: pass

class Bool: pass
</code></pre>
<p>Then, I set a breakpoint at that line, and play around in VSCode's debugger:</p>
<pre><code>&gt;&gt; x.tp
&lt;class 'ST.Int'&gt;
&gt;&gt; y.tp
&lt;class 'ST.Int'&gt;
&gt;&gt; x.tp == y.tp
True
&gt;&gt; a = (x.tp == y.tp)
None
&gt;&gt; a
True
&gt;&gt; a in {Bool, Int}
False
&gt;&gt; x.tp == y.tp in {Bool, Int}
True       &lt;----------------------- why does it return True?
</code></pre>
<p>Why does <code>x.tp == y.tp in {Bool, Int}</code> return <code>True</code> here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use parentheses to group the equality comparison:</p>
<pre><code>if (x.tp == y.tp) in {Bool, Int}:
</code></pre>
<p>Your <strong>chained comparison</strong> gets evaluated by Python as:</p>
<pre><code>if x.tp == y.tp and y.tp in {Bool, Int}:
</code></pre>
<p>which yields <code>True</code> since <code>y.tp</code> is of class <code>&lt;class 'ST.Int'&gt;</code> and actually in that set.</p>
<p>From the <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">Reference Manual on Comparisons</a>:</p>
<blockquote>
<p>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>, except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &lt; y</code> is found to be <code>False</code>).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Naturally, we're of the assumption that this line of code</p>
<pre><code>if x.tp == y.tp in {Bool, Int}:
</code></pre>
<p>should work (or parsed) like:</p>
<pre><code>if (x.tp == y.tp) in {Bool, Int}:
</code></pre>
<p>But this is <strong>not</strong> the case. According to <a href="http://blog.stirbu.name/2013/07/python-comparison-operators-chaining/" rel="nofollow noreferrer">this article</a>, the parsing and then the comparison is done like:</p>
<pre><code>if (x.tp == y.tp) and (y.tp in {Bool, Int}) :
</code></pre>
<p>There's something confusing going on because of not being explicit. Please try to avoid similar situations for the benefit of the code maintainer.</p>
<p>Source: <a href="http://blog.stirbu.name/2013/07/python-comparison-operators-chaining/" rel="nofollow noreferrer">Python comparison operators chaining</a></p>
</div>
<span class="comment-copy">What are <code>x.tp</code> and <code>y.tp</code>?</span>
<span class="comment-copy">@JimFasarakis-Hilliard <code>x.tp</code> and <code>y.tp</code> are both types. I am not sure if I should post more code since it is too long</span>
<span class="comment-copy">That shouldn't matters as == and in has the same precedence and it will be evaluated from left to right isn't it?</span>
<span class="comment-copy">@Jackddddd <code>==</code> gets evaluated, <code>y.tp in {Bool, Int}</code> also gets evaluated though (since the equality is <code>True</code>) and makes the whole thing <code>True</code>, that's how Python deals with chained comparisons.</span>
<span class="comment-copy">Actualy if you do <code>True in {bool}</code> you will get False.</span>
<span class="comment-copy">It returns False</span>
<span class="comment-copy">@Jackddddd Updated the explanation!</span>
