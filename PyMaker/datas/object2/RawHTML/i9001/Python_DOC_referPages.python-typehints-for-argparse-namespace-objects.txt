<div class="post-text" itemprop="text">
<p>Is there a way to have Python static analyzers (e.g. in PyCharm, other IDEs) pick up on Typehints on <code>argparse.Namespace</code> objects?  Example:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('--somearg')
parsed = parser.parse_args(['--somearg','someval'])  # type: argparse.Namespace
the_arg = parsed.somearg  # &lt;- Pycharm complains that parsed object has no attribute 'somearg'
</code></pre>
<p>If I remove the type declaration in the inline comment, PyCharm doesn't complain, but it also doesn't pick up on invalid attributes.  For example:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('--somearg')
parsed = parser.parse_args(['--somearg','someval'])  # no typehint
the_arg = parsed.somaerg   # &lt;- typo in attribute, but no complaint in PyCharm.  Raises AttributeError when executed.
</code></pre>
<p>Any ideas?</p>
<hr/>
<h3>Update</h3>
<p>Inspired by <a href="https://stackoverflow.com/a/42279784/7007605">Austin's answer</a> below, the simplest solution I could find is one using <code>namedtuples</code>:</p>
<pre><code>from collections import namedtuple
ArgNamespace = namedtuple('ArgNamespace', ['some_arg', 'another_arg'])

parser = argparse.ArgumentParser()
parser.add_argument('--some-arg')
parser.add_argument('--another-arg')
parsed = parser.parse_args(['--some-arg', 'val1', '--another-arg', 'val2'])  # type: ArgNamespace

x = parsed.some_arg  # good...
y = parsed.another_arg  # still good...
z = parsed.aint_no_arg  # Flagged by PyCharm!
</code></pre>
<p>While this is satisfactory, I still don't like having to repeat the argument names.  If the argument list grows considerably, it will be tedious updating both locations.  What would be ideal is somehow extracting the arguments from the <code>parser</code> object like the following:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('--some-arg')
parser.add_argument('--another-arg')
MagicNamespace = parser.magically_extract_namespace()
parsed = parser.parse_args(['--some-arg', 'val1', '--another-arg', 'val2'])  # type: MagicNamespace
</code></pre>
<p>I haven't been able to find anything in the <code>argparse</code> module that could make this possible, and I'm still unsure if <em>any</em> static analysis tool could be clever enough to get those values and not bring the IDE to a grinding halt.</p>
<p>Still searching...</p>
<hr/>
<h3>Update 2</h3>
<p>Per hpaulj's comment, the closest thing I could find to the method described above that would "magically" extract the attributes of the parsed object is something that would extract the <code>dest</code> attribute from each of the parser's <code>_action</code>s.:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('--some-arg')
parser.add_argument('--another-arg')
MagicNamespace = namedtuple('MagicNamespace', [act.dest for act in parser._actions])
parsed = parser.parse_args(['--some-arg', 'val1', '--another-arg', 'val2'])  # type: MagicNamespace
</code></pre>
<p>But this still does not cause attribute errors to get flagged in static analysis.  This is true also true if I pass <code>namespace=MagicNamespace</code> in the <code>parser.parse_args</code> call.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider defining an extension class to <code>argparse.Namespace</code> that provides the type hints you want:</p>
<pre><code>class MyProgramArgs(argparse.Namespace):
    def __init__():
        self.somearg = 'defaultval' # type: str
</code></pre>
<p>Then use <code>namespace=</code> to pass that to <code>parse_args</code>:</p>
<pre><code>def process_argv():
    parser = argparse.ArgumentParser()
    parser.add_argument('--somearg')
    nsp = MyProgramArgs()
    parsed = parser.parse_args(['--somearg','someval'], namespace=nsp)  # type: MyProgramArgs
    the_arg = parsed.somearg  # &lt;- Pycharm should not complain
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know anything about how PyCharm handles these typehints, but understand the <code>Namespace</code> code.</p>
<p><code>argparse.Namespace</code> is a simple class; essentially an object with a few methods that make it easier to view the attributes. And for ease of unittesting it has a <code>__eq__</code> method.  You can read the definition in the <code>argparse.py</code> file.</p>
<p>The <code>parser</code> interacts with the namespace in the most general way possible - with <code>getattr</code>, <code>setattr</code>, <code>hasattr</code>.  So you can use almost any <code>dest</code> string, even ones you can't access with the <code>.dest</code> syntax.  </p>
<p>Make sure you don't confuse the <code>add_argument</code> <code>type=</code> parameter; that's a function.</p>
<p>Using your own <code>namespace</code> class (from scratch or subclassed) as suggested in the other answer may be the best option.  This is described briefly in the documentation.  <a href="https://docs.python.org/3/library/argparse.html#the-namespace-object" rel="nofollow noreferrer">Namespace Object</a>.  I haven't seen this done much, though I've suggested it a few times to handle special storage needs.  So you'll have to experiment.</p>
<p>If using subparsers, using a custom Namespace class may break, <a href="http://bugs.python.org/issue27859" rel="nofollow noreferrer">http://bugs.python.org/issue27859</a></p>
<p>Pay attention to handling of defaults.  The default default for most <code>argparse</code> actions is <code>None</code>.  It is handy to use this after parsing to do something special if the user did not provide this option.</p>
<pre><code> if args.foo is None:
     # user did not use this optional
     args.foo = 'some post parsing default'
 else:
     # user provided value
     pass
</code></pre>
<p>That could get in the way type hints.  Whatever solution you try, pay attention to the defaults.</p>
<hr/>
<p>A <code>namedtuple</code> won't work as a <code>Namespace</code>.</p>
<p>First, the proper use of a custom Namespace class is:</p>
<pre><code>nm = MyClass(&lt;default values&gt;)
args = parser.parse_args(namespace=nm)
</code></pre>
<p>That is, you initial an instance of that class, and pass it as the parameter.  The returned <code>args</code> will be the same instance, with new attributes set by parsing.</p>
<p>Second, a namedtuple can only created, it can't be changed.</p>
<pre><code>In [72]: MagicSpace=namedtuple('MagicSpace',['foo','bar'])
In [73]: nm = MagicSpace(1,2)
In [74]: nm
Out[74]: MagicSpace(foo=1, bar=2)
In [75]: nm.foo='one'
...
AttributeError: can't set attribute
In [76]: getattr(nm, 'foo')
Out[76]: 1
In [77]: setattr(nm, 'foo', 'one')    # not even with setattr
...
AttributeError: can't set attribute
</code></pre>
<p>A namespace has to work with <code>getattr</code> and <code>setattr</code>.</p>
<p>Another problem with <code>namedtuple</code> is that it doesn't set any kind of <code>type</code> information.  It just defines field/attribute names.  So there's nothing for the static typing to check.</p>
<p>While it is easy to get expected attribute names from the <code>parser</code>, you can't get any expected types.</p>
<p>For a simple parser:</p>
<pre><code>In [82]: parser.print_usage()
usage: ipython3 [-h] [-foo FOO] bar
In [83]: [a.dest for a in parser._actions[1:]]
Out[83]: ['foo', 'bar']
In [84]: [a.type for a in parser._actions[1:]]
Out[84]: [None, None]
</code></pre>
<p>The Actions <code>dest</code> is the normal attribute name.  But <code>type</code> is not the expected static type of that attribute.  It is a function that may or may not convert the input string.  Here <code>None</code> means the input string is saved as is.  </p>
<p>Because static typing and <code>argparse</code> require different information, there isn't an easy way to generate one from the other.</p>
<p>I think the best you can do is create your own database of parameters, probably in a dictionary, and create both the Namespace class and the parsesr from that, with your own utility function(s).</p>
<p>Let's say <code>dd</code> is dictionary with the necessary keys.  Then we can create an argument with:</p>
<pre><code>parser.add_argument(dd['short'],dd['long'], dest=dd['dest'], type=dd['typefun'], default=dd['default'], help=dd['help'])
</code></pre>
<p>You or someone else will have to come up with a Namespace class definition that sets the <code>default</code> (easy), and static type (hard?) from such a dictionary.</p>
</div>
<span class="comment-copy">A quick google says that you can use type hints on the first use of local variables. Try it on <code>parser = argparse.ArgumentParser() # type: argparse.Namespace</code> and see if it works.</span>
<span class="comment-copy">@Austin:  <code>parser</code> in this case is an <code>argparse.ArgumentParser</code> object, not an <code>argparse.Namespace</code> object.  I want the <code>parsed</code> object to be populated with the args as attributes.</span>
<span class="comment-copy">You're right. I missed <code>parsed</code> vs. <code>parser.</code> What you really want seems to be that PyCharm parses the method arguments when building your ArgumentParser. I doubt that works well.</span>
<span class="comment-copy"><code>add_argument</code> returns the <code>Action</code> object it just created.  Look at its attributes.  <code>parser._actions</code> is a list of all these actions, which the parser uses during parsing.  I've mentioned them in previous SO answers.</span>
<span class="comment-copy">In your new edits, are you passing the new namespace to the <code>parse_args</code>?</span>
<span class="comment-copy">The <code>defaultval</code> defined in this class over rides any default parameters defined in the parser methods.  That's probably is desirable.  But it's a detail to watch out for when using custom namespaces.</span>
