<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/233673/how-do-lexical-closures-work">How do lexical closures work?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I want to create a list that contains the monomials up to degree <em>n</em></p>
<pre><code>basis = [lambda x:x**i for i in range(0,n+1)]
</code></pre>
<p>This however creates a list of <em>n</em> functions, but all the same one (of degree <em>n</em>) and not of degree 0,1,2,...<em>n</em></p>
<p>I tried without list comprehension as well:</p>
<pre><code>basis = []
for i in range(0,n+1):
    basis.append(lambda x:x**i)
</code></pre>
<p>but with the same result. Substituting the lambda function by a classic function definition also did not fix it.</p>
<hr/>
<p>I checked <a href="https://stackoverflow.com/questions/1924214/python-lambdas-and-scoping">Python lambdas and scoping</a>, but that did not help, since I don't want to store function values, but the function itself. For example, I want to be able to call</p>
<pre><code>basis[0](34)
</code></pre>
<p>and this should return</p>
<pre><code>1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As i said in the comments, take a look at <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">partial</a></p>
<pre><code>def f(x, n):
    return x**n

basis = [partial(f, n=i) for i in range(10)]
print(basis[0](34))  # 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This entry sums it up perfectly</p>
<p><a href="http://docs.python-guide.org/en/latest/writing/gotchas/#late-binding-closures" rel="nofollow noreferrer">http://docs.python-guide.org/en/latest/writing/gotchas/#late-binding-closures</a> :</p>
<blockquote>
<p>... you can create a closure that binds immediately to its arguments by using a default arg like so:</p>
<pre><code>def create_multipliers():
      return [lambda x, i=i : i * x for i in range(5)]
</code></pre>
</blockquote>
<p>You code would become:</p>
<pre><code>basis = [lambda x,i=i:x**i for i in range(0,n+1)]
</code></pre>
<p>This is a bit of a hacky solution, but works. I still highly recommend to read the link provided as the 3 points that are made there are usual errors when you are new to Python.</p>
</div>
<span class="comment-copy">you can do this with <code>partial</code> (<a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">docs.python.org/3/library/functools.html#functools.partial</a>) but you will need a <i>proper</i> function declaration</span>
<span class="comment-copy">It seams this is a link only answer .</span>
<span class="comment-copy">Link-only answers are not appreciated. Copy the relevant text to the answer, and use the link for supporting details.</span>
