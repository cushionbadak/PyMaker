<div class="post-text" itemprop="text">
<p>I have a list like</p>
<pre><code>A = [1,10,50,100,500]
</code></pre>
<p>I need to group by 2 numbers with proper sequence. Output is like this,</p>
<pre><code>B = [(1,9),(10,49),(50,99),(100,499)]
</code></pre>
<p>I have tried via <code>yield</code>:</p>
<pre><code>def group(lst, n):
    for i in range(0, len(lst), n):
        val = lst[i:i+n]
        if len(val) == n:
            yield tuple(val)

print(list(group([1,10,50,100,500], 2)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply <code>zip</code> the sequence with itself (without the first item):</p>
<pre><code>A = [1,10,50,100,500]

def group(lst):
    for i, j in zip(A, A[1:]):  # pairwise items
        yield (i, j-1)          # decrement second item by 1

&gt;&gt;&gt; list(group(A))
[(1, 9), (10, 49), (50, 99), (100, 499)]
</code></pre>
<p>Or use it as list-comprehension without intermediate function:</p>
<pre><code>&gt;&gt;&gt; [(i, j-1) for i, j in zip(A, A[1:])]
[(1, 9), (10, 49), (50, 99), (100, 499)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension with <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>islice</code></a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to iterate pairwise over the list:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; A = [1,10,50,100,500]
&gt;&gt;&gt; [(x, y - 1) for x, y in zip(A, islice(A, 1, None))]
[(1, 9), (10, 49), (50, 99), (100, 499)]
</code></pre>
<p>In above <code>islice</code> returns an iterator that starts from the second element on <code>A</code>. <code>islice</code> is used instead of normal slicing so that the original list doesn't need to be copied:</p>
<pre><code>&gt;&gt;&gt; s = list(islice(A, 1, None))
&gt;&gt;&gt; s
[10, 50, 100, 500]
</code></pre>
<p>Then <code>zip</code> is used to create iterable pairs of items from the original list and iterator:</p>
<pre><code>&gt;&gt;&gt; pairs = list(zip(A, s))
&gt;&gt;&gt; pairs
[(1, 10), (10, 50), (50, 100), (100, 500)]
</code></pre>
<p>And finally list comprehension iterates over the pairs to create the result:</p>
<pre><code>&gt;&gt;&gt; [(x, y - 1) for x, y in pairs]
[(1, 9), (10, 49), (50, 99), (100, 499)]
</code></pre>
</div>
<span class="comment-copy">Are you sure you shouldn't be using <code>bisect</code> instead?</span>
