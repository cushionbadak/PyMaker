<div class="post-text" itemprop="text">
<p>So I have a class like this:</p>
<pre><code>class var:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

object = var(1, 2, 3)
</code></pre>
<p>And I want to make a function that takes as a parameter the name of one of the attributes of my class, to make something like this (example):</p>
<pre><code>def function(object, a):
    object.a = 5
</code></pre>
<p>Obviously I can pass 'a' as a string and make some if cases:</p>
<pre><code>def function(object, a):

    if (a == 'x'):
        object.x = 5

    if (a == 'y'):
        object.y = 5

    if (a == 'z'):
        object.z = 5
</code></pre>
<p>But in that case I'd have to copy the entire code inside the if's (obviously I want to do more than just assign a value). I'd like to know if there's a clever way to do that.</p>
<p>edit:</p>
<p>To clarify, my object has more variables:</p>
<pre><code>class var:
    def __init__(self, x, y, z, a, b, c):
        self.x = x
        self.y = y
        self.z = z
        self.a = a
        self.b = b
        self.c = c
</code></pre>
<p>And I will access these in my functions. That's why i don't pass simply object.x or object.y. I will pass the object and the variable I will use, but there are other variables I will access.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to use <code>setattr</code>:</p>
<pre><code>def set(object, name):
    setattr(object, name, 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Extending what Daniel showed in his answer, you can first check if the object has the attribute or not by using <a href="https://docs.python.org/3/library/functions.html#hasattr" rel="nofollow noreferrer"><code>hasattr()</code></a>, and then set the value of the attribute by using <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr()</code></a>.</p>
<pre><code>def function(object, a):
    if name in object.__dict__:
        setattr(object, a, 5)
</code></pre>
<p>Note: take a look at this <a href="https://stackoverflow.com/questions/42330143/pass-variable-of-class-as-parameter-in-function#comment71813422_42330176">comment</a>, which showed the correct way to determine if an object has an attribute. What I mean is <code>__dict__</code> doesn't include method names.</p>
</div>
<span class="comment-copy">is there a reason why you don't simply pass <code>object.a</code> as a single parameter, rather than <code>object</code> and <code>a</code> as two separate parameters?</span>
<span class="comment-copy">@BryanOakley the OP wants to set the value of <i>any</i> attribute of the object, which <i>I think</i> will not be achieved by passing in <code>object.a</code></span>
<span class="comment-copy">@Sнаđошƒаӽ: well, you can pass any attribute you want: <code>function(object.a)</code>, <code>function(object.b)</code> etc. Whatever you pass in is what gets set.</span>
<span class="comment-copy">@BryanOakley I am not entirely sure what you mean. Once the value is passed, how can you change the attribute in the object <i>through</i> that value, especially when the attribute is of primitive types like <code>int</code>?</span>
<span class="comment-copy">This might create unwanted new variables for the object. e.g. set(object, 'm')  will assign a new variable to the object i.e. object.m</span>
<span class="comment-copy">You can consider adding a check <code>if name in object.__dict__:</code> before calling setattr on the object.</span>
<span class="comment-copy">@Afaq or you can also use <code>hasattr()</code> method.</span>
<span class="comment-copy">@Sнаđошƒаӽ Yes I agree with you, but what if the class contains a method with name <code>test</code>, then in that case <code>hasattr(object, 'test')</code> will return true and render <code>test</code> method useless after <code>setattr</code>. <code>object.__dict__</code> will just contain the instance variables.</span>
<span class="comment-copy">@Afaq yeah, that's right. Thanks for pointing that out. I will update my answer.</span>
<span class="comment-copy">Thanks, that's what I wanted.</span>
