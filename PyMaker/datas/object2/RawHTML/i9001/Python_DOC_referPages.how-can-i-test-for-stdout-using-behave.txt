<div class="post-text" itemprop="text">
<p>I would like to create a Hello World command line application with BDD using <strong><em>python3</em></strong> and <strong><em>behave</em></strong>. I have my features file set up this way:</p>
<pre><code>Feature: Hello World

  Scenario: the program greets us
    When I start the program
    Then it prints "Hello World!"
</code></pre>
<p>In my <code>features/steps/hello.py</code> the outline of my <code>@Then</code> step is this:</p>
<pre><code>from behave import *

@then('it prints "{text}"')
def step_impl(context, text):
    # what goes here???
</code></pre>
<p>How can I test the output of my program? How can I capture stdout for this test?</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the typical ways to check the <code>print</code> output is to hijack <code>sys.stdout</code> and analyze it:</p>
<pre><code>from StringIO import StringIO
import sys

real_stdout = sys.stdout
try:
  mock_stdout = StringIO()
  sys.stdout = mock_stdout
  print "Hi there"
  assert mock_stdout.getvalue() == "Hi there"
finally:
  sys.stdout = real_stdout
</code></pre>
<p>Of course, the try/finally logic may be implicit in the testing framework you use. In <code>unittest</code>, it would be <code>setUp</code> / <code>tearDown</code>; I have no idea about <code>behave</code> but its docs likely cover it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's 9000's idea applied to behave:</p>
<p>I redirect stdout to a mock in the file named <code>features/environment.py</code>:</p>
<pre><code>import sys
import io

def before_all(context):
    context.real_stdout = sys.stdout
    context.stdout_mock = io.StringIO()
    sys.stdout = context.stdout_mock

def after_all(context):
    sys.stdout = context.real_stdout
</code></pre>
<p>And then in <code>features/steps/hello.py</code> I assert on the contents of the mock stdout:</p>
<pre><code>@then('it prints "{text}"')
    def step_impl(context, text):
    output = context.stdout_mock.getvalue()
    assertEqual( "Hello World!\n", output )
</code></pre>
</div>
<span class="comment-copy">I see your first step is "I start the program". Are you launching a child process there? And then you have to check <i>that process'</i> output?</span>
<span class="comment-copy">@Louis I could launch a child process but I was lazy and simply invoked the main() function.</span>
<span class="comment-copy">This is <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>, by the way.</span>
<span class="comment-copy">@JoshLee: Could you make an answer out of your comment? (I had to use stdout redirection maybe once in my life, wasn't aware, thanks!)</span>
