<div class="post-text" itemprop="text">
<pre><code>class BinaryStringList():
    def __init_(self):
        self.item = []

    def strAdd(self,item):
        self.items.append(item)

    def finditem(self, item):

        if len(self)==0:
            print("List is empty!")
        else:
            midpoint = len(self)//2
            if self[midpoint]==item:
                print("Item Found ", item)
            else:
                if item&lt;self[midpoint]:
                    return finditem(self[:midpoint], item)
                else:
                    return finditem(self[midpoint+1:], item)
</code></pre>
<p>So where I am finding I have an issue is when trying to add items to the list. If i do something like:</p>
<pre><code>alist = BinaryStringList()
alist.strAdd("test1")
</code></pre>
<p>my code fails stating object has no attribute. Not sure why it is failing since I have almost the exact same code for another program except the find is using a sequential search where as this is a binary search.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have multiple syntax errors in your code. Also recursion doesn't work that way, you need to have a base condition which returns. This solution will work, but I strongly suggest you to solve simpler problems using recursion to understand how it works.</p>
<pre><code>class BinaryStringList:
    def __init__(self): # You had 1 _ after init
        self.items = [] # Typo, should have been items.

    def strAdd(self,item):
        self.items.append(item)

    def finditem(self, item):
        return self.binser(self.items, item)

    def binser(self, items, item):
        if len(items)==0:
            return

        midpoint = len(items)/2 # len(self) means nothing, it should be len(self.items)
        if items[midpoint]==item:
            return item
        else:
            if item&lt;items[midpoint]:
                return self.binser(items[:midpoint], item) #self[:midpoint] means nothing, you needed self.items[:midpoint]
            else:
                return self.binser(items[midpoint+1:], item)

binser = BinaryStringList()
binser.strAdd(1) # You added a string here. Your logic won't work with string.
binser.strAdd(2)
binser.strAdd(3)
binser.strAdd(5)
binser.strAdd(8)
binser.strAdd(9)
binser.strAdd(10)

print binser.finditem(1)
print binser.finditem(10)
print binser.finditem(5)
print binser.finditem(11)
</code></pre>
<p>(there are other ways of solving binary search too - i.e. iterative approach, passing low/high index values rather than splicing the input array). Try to solve binary search using those two approaches.</p>
<p>Binary search with passing low/high index values, your signature for binser will look like: <code>def binser(self, low, high, item):</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is failing because you misspelled <code>__init__</code>. You need two underscores on each side, or it's just a weirdly named method. Since you lack a <code>__init__</code>, the default <code>__init__</code> (which sets no attributes) is used, and you don't have an <code>item</code> or <code>items</code> attribute. You need to fix the <code>__init__</code>, and use a consistent name for <code>items</code>:</p>
<pre><code>class BinaryStringList():
    def __init__(self):  # &lt;-- Added extra trailing underscore
        self.items = []  # Fixed name to be items, not item 
</code></pre>
<p>You have many other problems here (you're not maintaining sorted order, so binary search won't work, you haven't implemented <code>__getitem__</code> so <code>self[midpoint]</code> won't work so you'd need <code>self.items[midpoint]</code>, lack of <code>__len__</code> means <code>len(self)</code> won't work either, etc.), but the two issues above are what specifically makes you get the <code>AttributeError</code>.</p>
</div>
<span class="comment-copy">its <code>item</code> and you are adding to <code>items</code>. Typo.</span>
<span class="comment-copy">class SequentialStringList():     def __init__(self):          self.items = []              def strAdd(self, item):         self.items.append(item)      def findItem(self, item):                  for string in self.items:             if string == item:                 return string         return 'None'   def iadd():          alist = SequentialStringList()      for x in range(20):         alist.strAdd("test"+str(x))           print(alist.findItem("test19"))   works fine.</span>
<span class="comment-copy">Side-note: If this is for a class, then whatever, but if you're trying to do this for real code, I should note that <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">the <code>bisect</code> module</a> is <i>the</i> correct way to do binary search in Python.</span>
<span class="comment-copy">@MarkBruner: If you need to add/update code, edit the question, don't put it in a comment. You can't format or even line break comments.</span>
<span class="comment-copy">This is for a class and not sure why my code in the comment isnt working but I have basically the same add function for a sequential search and it works fine. Not sure if that's sheer luck or not. The error Im getting with the binary search is the object BinaryStringList has no object "item".</span>
<span class="comment-copy">So you saw what I was attempting to do. I was going for the recursion approach due to having to benchmark the assignment. Though I may look at the other approaches to benchmark as well. If you have a link that I could read up on the low/high index that would be great.</span>
<span class="comment-copy">Something like this <a href="http://stackoverflow.com/a/41452949/231917">stackoverflow.com/a/41452949/231917</a></span>
<span class="comment-copy">Would those still be relevant for handling strings over and int? for purpose of testing im just doing a for loop to add an int to the string "test" and add those to the array.</span>
<span class="comment-copy">Binary search compares values and checks which is greater/lesser. So if you use "test1", "test2" etc, your code needs to determine <code>test1 &lt; test2</code>. Probably by stripping out "test" and comparing ints. <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" rel="nofollow noreferrer">en.wikipedia.org/wiki/Binary_search_algorithm</a> I don't see any reason to use string. Simply use ints. Please accept the answer if it answers your question.</span>
<span class="comment-copy">Thank you didn't see the missing underscore. I am sure I have many issues I just needed help getting past this first one in order to progress.</span>
