<div class="post-text" itemprop="text">
<p>I am wondering if I have the function</p>
<pre><code>def f(*args):
    print(*args)
</code></pre>
<p>if I run it like this, do I have any guarantee of the order of processing arguments? I know c++ does not guarantee an order like this.</p>
<pre><code>&gt;&gt;&gt; d = {1:2, 3:4, 5:6, 7:8}
&gt;&gt;&gt; f(d.pop(1), d.pop(3), {k:v for k, v in d.items()})
2 4 {5: 6, 7: 8}
</code></pre>
<p>If the arguments were processed out of order, we may get</p>
<pre><code>2 4 {1:2, 3:4, 5:6, 7:8}
</code></pre>
<p>or</p>
<pre><code>2 4 {1:2, 5:6, 7:8}
</code></pre>
<p>or</p>
<pre><code>2 4 {3:4, 5:6, 7:8}
</code></pre>
<p>It seems to work, however I am not sure if this is just an effect of cPython or standard of python, or neither. I cannot seem to find the documentation on this.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>*args</code> will come through in the order you sent them, this is guaranteed by the language.  Function arguments are also <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">evaluated left to right</a>, this is guaranteed by the language.  Python has to make <em>some</em> choice about this, otherwise the evaluation of one argument could mutate another argument and result in unspecified behaviour.</p>
<p>You can rely on the behaviour you've described in the question:</p>
<pre><code>2 4 {5: 6, 7: 8}
</code></pre>
<p>However, note the result below is also a valid Python output.  Though you're unlikely to see it in CPython due to some implementation detail about <code>dict</code> and <code>int</code>.</p>
<pre><code>2 4 {7: 8, 5: 6}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unlike C and C++, <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">Python guarantees that function arguments are evaluated left to right</a>. You can be sure the <code>pop</code> calls will run before the dict comprehension.</p>
<blockquote>
<h3>6.15. Evaluation order</h3>
<p>Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side
  is evaluated before the left-hand side.</p>
<p>In the following lines, expressions will be evaluated in the
  arithmetic order of their suffixes:</p>
<pre><code>expr1, expr2, expr3, expr4
(expr1, expr2, expr3, expr4)
{expr1: expr2, expr3: expr4}
expr1 + expr2 * (expr3 - expr4)
expr1(expr2, expr3, *expr4, **expr5)
expr3, expr4 = expr1, expr2
</code></pre>
</blockquote>
</div>
<span class="comment-copy">@MooingRawr I think that is actually not relevant to this question, although, it is a poor choice for an example. A list would have been better.</span>
<span class="comment-copy">the order of *args is the order in which the caller puts them. Programming would be rather difficult if it weren't. The order of keyword arguments, i.e. arguments passed in the syntax name=value used to be undefined, however, starting with python 3.6 these also remember the order in which they are passed.</span>
<span class="comment-copy">Guys, the question is asking about the order of evaluation of the arguments at function-call time.</span>
<span class="comment-copy">Awesome! Where can I find the docs on that?</span>
