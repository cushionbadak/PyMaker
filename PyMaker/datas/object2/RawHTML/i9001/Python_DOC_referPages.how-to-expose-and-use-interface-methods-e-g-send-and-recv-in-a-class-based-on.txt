<div class="post-text" itemprop="text">
<p>I have subclassed <code>asyncio.Protocol</code> to create a TCP client that connects to some server.
I would like to <strong>separate the lower-level interface from the application</strong>, and create a layered architecture, but I'm unsure how to proceed.</p>
<p>I followed the example of the <a href="https://docs.python.org/3/library/asyncio-protocol.html#tcp-echo-client-protocol" rel="nofollow noreferrer">TCP Echo Client present on the official documentation</a> and the way I start the client is also very similar:</p>
<pre><code>loop = asyncio.get_event_loop()
coro = loop.create_connection(partial(MyClient, loop),
                              '127.0.0.1', 8888)
loop.run_until_complete(coro)
loop.run_forever()
loop.close()
</code></pre>
<p>However, in my protocol I created two methods (service access points, technically) that provide services to the "N+1" layer:</p>
<pre><code>def setDataReceivedCallback(self, fun):
    self.dataReceivedIndication = fun

def send(self, msg):
    self.transport.write(msg)
</code></pre>
<p>The <code>send</code> method would be used by the N+1 layer to send a message to the server (request), while the <code>setDataReceivedCallback</code> would be used to register a callback that is called when <code>data_received</code> is called (so that the protocol can issue an indication to the N+1 layer that some data has arrived).</p>
<p>However, I am not sure how I can get hold of those entry points.
To be more clear:</p>
<ul>
<li><code>create_connection</code> needs a callable that returns a Protocol instance: so I won't be able to get hold of the instance at that points</li>
<li><code>loop</code> seems not to expose any of the coroutines that it runs - furthermore, once I execute run_forever I lose the ability of getting hold of the loop itself</li>
</ul>
<p>What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Lo and behold, the answer lies in the documentation.
From the section on <a href="https://docs.python.org/3/library/asyncio-eventloop.html#creating-connections" rel="nofollow noreferrer">Creating Connections</a>:</p>
<blockquote>
<p>Note protocol_factory can be any kind of callable, not necessarily a
  class. For example, if you want to use a pre-created protocol
  instance, you can pass lambda: my_protocol.</p>
</blockquote>
<p>This, translated into code means the following:</p>
<pre><code>loop = asyncio.get_event_loop()
ThisClient = MyClient(loop)
ThisClient.setDataReceivedCallback(whateverFunction)
# And you can also use and pass around ThisClient.send at this point

coro = loop.create_connection(lambda: ThisClient,
                              '127.0.0.1', 8888)
loop.run_until_complete(coro)
loop.run_forever()
loop.close()
</code></pre>
</div>
