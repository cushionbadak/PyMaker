<div class="post-text" itemprop="text">
<p>I failed to answer this question in my midterm. I am NOT asking you guys to do homework for me. Just want to know how to solve this problem. I only know how to solve this problem using list index, but this solution is not allowed here because the question has stated that I have to include "for x in nums" in the function. I know that int is immutable, so what can I do? Thanks for the hint of "isinstance", but I'm sorry that we have not learned it before so I cannot use it in exams.</p>
<p>I had just learned how to solve similar problems using index. I think it can work like this:</p>
<pre><code>def square_all(nums):
    new = []
    for x in nums:
        new.append(x)
    for i in range(len(new)):
        if type(new[i]) != list:
            new[i] = new[i] ** 2
        else:
            square_all(new[i])
    return new
</code></pre>
<p>It doesn't work well. I think there is something wrong with 'else'. But how should I modify?</p>
<blockquote>
<p>Write a python function <code>square_all</code> that takes one parameter, a nested list of integers, and returns a new nested list of integers that is structurally identical to the given list, but in which all of the integers have been squared. Note that the function should no modify its parameter; it should build a new, separate list.</p>
<p>Complete the function by writing anything you think is needed above, within or below the loop. Don't write code outside of the function. Assume that there are no global variables available to you. don't make changes to the code that has been provided.</p>
<p>Example:  </p>
<pre><code>square_all([1,2,[3,4]]) = [1,4,[9,16]]
</code></pre>
<p>Given code:</p>
<pre><code>def square_all(nums;'nested list of integers') -&gt; 'nested list of integers':    
    for x in nums:
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your code is that you create a <em>new</em> list, thus just calling <code>square_all(new[i])</code> won't change <code>new[i]</code>. You have to assign the result: <code>new[i] = square_all(new[i])</code>.</p>
<pre><code>def square_all(nums):
    new = []
    for x in nums:
        new.append(x)
    for i in range(len(new)):
        if type(new[i]) != list:
            new[i] = new[i] ** 2
        else:
            new[i] = square_all(new[i])  # assign result to new[i]
    return new
</code></pre>
<p>Or a bit shorter, directly appending the final values instead of first using the original values and then overwriting them later:</p>
<pre><code>def square_all(nums):
    result = []
    for n in nums:
        if type(n) is list:
            result.append(square_all(n))
        else:
            result.append(n**2)
    return result
</code></pre>
<p>Or <em>really</em> short, using the given code in a list comprehension:</p>
<pre><code>def square_all(nums):
    return [square_all(n) if type(n) is list else n**2 for n in nums]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This a very general solution to this problem:</p>
<pre><code>def map_nested(fnc, obj):
    if isinstance(l, (list, set, tuple)):  # whatever collection type you want
        return type(obj)(map_nested(fnc, sub) for sub in obj)
    return fnc(obj)        

&gt; map_nested(lambda x: x**2, [1, 2, (3, 4, set([5, 6]))])
[1, 4, (9, 16, set([25, 36]))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may create your recursive function as:</p>
<pre><code>def get_square(l):
    return [get_square(e) if isinstance(e, list) else e**2 for e in l]
    #                           ^ to check object is of `list` type
</code></pre>
<p>Sample run:</p>
<pre><code>&gt;&gt;&gt; get_square([1,2,[3,4]])
[1, 4, [9, 16]]
</code></pre>
<p>However, this function will only support <code>list</code> as the nested object. It will fail in case you pass tuple as nested structure. For example:</p>
<pre><code>&gt;&gt;&gt; get_square([1,2,(3,4)])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in get_square
TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'
</code></pre>
<p>In case you want your function to support all the iterables, you should be doing <a href="https://docs.python.org/2/library/functions.html#isinstance" rel="nofollow noreferrer"><strong><code>isinstance</code></strong></a> check for <a href="https://docs.python.org/2/library/collections.html#collections.Iterable" rel="nofollow noreferrer"><strong><code>collections.Iterable</code></strong></a>. Hence your function should be like:</p>
<pre><code>from collections import Iterable

def get_square(l):
    return type(l)(get_square(e) if isinstance(e, Iterable) else e**2 for e in l)
    #        ^                        ^ check for `collections.Iterable`
    #        ^ for preserving the type of `Iterables`
</code></pre>
<p>Sample run:</p>
<pre><code>&gt;&gt;&gt; get_square([1,2,(3,4)])
[1, 4, (9, 16)]
</code></pre>
</div>
<span class="comment-copy">So according to the question, codes can be added above and below "for x in nums:"</span>
<span class="comment-copy">I'm voting to close this question as off-topic because you're asking us to do your homework assignment.  Try doing it yourself, and if you run into problems, come back here with specific questions.  You won't learn much if we do all the work for you.</span>
<span class="comment-copy">hint: <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer">isinstance</a></span>
<span class="comment-copy">This is not my homework....... I failed to answer this question in the midterm, just want to figure it out as soon as possible.</span>
<span class="comment-copy">Thank you so much! It works! By the way, can I ask one more question. I cannot ask questions within four days, but it's really important.</span>
<span class="comment-copy">The question says that there is a function to open the specified file, read the library information from it. Here is the function:</span>
<span class="comment-copy">def load_library(library_file_path: str) -&gt; library:</span>
<span class="comment-copy">'''Given the path to a file containing a media library, reads the details of the library from the file and return a library object'''                                         This is the description of it. Then the question asked, what should this function do if opening the file fails(by raising an exception)?                     The answer is chose was "It should catch the exception and in the except clause, print a message to the user and ask the user to specify another file path instead."</span>
<span class="comment-copy">But the correct answer is "It should do nothing; the failure to open the file also constitutes a failure of the load_library function."  Can't understand why shouldn't I ask the user to input another path?</span>
<span class="comment-copy">Not my downvote, but maybe for using <code>try/except</code>,particularly with a catch-all Exception, instead of using <code>if instanceof</code>. In particular, this will fail if <code>fnc</code> is applicable to lists, as well, e.g. <code>map_nested(str, nested_list)</code>.</span>
<span class="comment-copy">@tobias_k The issue is you don't know beforehand to which types <code>fnc</code> can be applied.</span>
<span class="comment-copy">@tobias_k I think now it is safer while keeping its sequence/iterable flexibility.</span>
<span class="comment-copy">Now it will try to apply <code>fnc</code> to each character in a string, and it will still fail for <code>dict</code>. You can use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a> to check against multiple types, so why not use <code>isinstance(l, (list, set,tuple))</code>?</span>
<span class="comment-copy">@tobias_k Convinced!</span>
<span class="comment-copy">Thank you very much for your help! But we are not allowed to use the methods that are not taught in class(isinstance). We had just learned how to use list index to solve similar problems. But "for x in nums" really confuse me, I learned that int is immutable, so what can I do?</span>
