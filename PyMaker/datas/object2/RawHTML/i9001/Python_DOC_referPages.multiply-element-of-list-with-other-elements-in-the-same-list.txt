<div class="post-text" itemprop="text">
<p>I want to multiply an element of a list with all other elements.</p>
<p>For example:</p>
<pre><code>def product(a,b,c):
    return (a*b, a*c, a*b*c)
</code></pre>
<p>I have done this</p>
<pre><code>def product(*args):
    list = []
    for index,element in enumerate(args):
        for i in args:
            if (args[index]*i) not in list:
                list.append(args[index]*i)
    return list
</code></pre>
<p>but this gives me <code>[a*a, a*b,a*c, b*b]</code> etc. I don't want the <code>a*a</code>, <code>b*b</code>, <code>c*c</code> bit in there.</p>
</div>
<div class="post-text" itemprop="text">
<p>you could check for equality</p>
<pre><code>if (args[index]*i) not in list and args[index] != i:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code> is your friend</a> here:</p>
<pre><code>from itertools import combinations
from functools import reduce, partial
from operator import mul

# Make a sum-like function for multiplication; I'd call it product,
# but that overlaps a name in itertools and our own function
multiplyall = partial(reduce, mul)

def product(*args):
    # Loop so you get all two elements combinations, then all three element, etc.
    for n in range(2, len(args) + 1):
        # Get the combinations for the current combo count
        for comb in combinations(args, n):
            # Compute product and yield it
            # yielding comb as well just for illustration
            yield comb, multiplyall(comb)
</code></pre>
<p>I made it a generator function, because frankly, almost any function that's just slowly building a list element by element and returning it should really be a generator function (if the caller wants a list, they just do <code>mylist = list(generatorfunc(...))</code>), making it easier to use iteratively without blowing main memory when many arguments are passed.</p>
<p>Example usage:</p>
<pre><code>&gt;&gt;&gt; for pieces, prod in product(2, 3, 4):
        print ' * '.join(map(str, pieces)), '=', prod
</code></pre>
<p>Which outputs:</p>
<pre><code>2 * 3 = 6
2 * 4 = 8
3 * 4 = 12
2 * 3 * 4 = 24
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So if the values are <code>2, 3, 4, 5</code> you want all and only these products:</p>
<pre><code>2*3=6, 2*4=8, 2*5=10, 2*3*4=24, 2*3*5=30, 2*4*5=40, 2*3*4*5=120
</code></pre>
<p>This means taking all combinations of <code>3, 4, 5</code> and then multiplying them togther with <code>2</code>. The <code>itertools</code> module has a <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations</a> function, and <a href="https://docs.python.org/2/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce</a> can be used in conjunction with <a href="https://docs.python.org/2/library/operator.html#operator.mul" rel="nofollow noreferrer">operator.mul</a> to do the calculation:</p>
<pre><code>def product(first, *other):
    for n in range(1, len(other) + 1):
        for m in combinations(other, n):
            yield reduce(mul, m, first)

list(product(2, 3, 4, 5))
</code></pre>
<p>Output:</p>
<pre><code>[6, 8, 10, 24, 30, 40, 120]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Does your list have duplicate elements, like <code>[2, 3, 4, 2]</code>?</p>
<p>If it does not, here is a one liner:</p>
<p>First, with tags to illustrate the pattern:</p>
<pre><code>a = ['a1','a2','a3']

lsta = [[x+y for y in [z for z in a if z != x]] for x in a]
lsta

[['a1a2', 'a1a3'], ['a2a1', 'a2a3'], ['a3a1', 'a3a2']]
</code></pre>
<p>And here, with numbers:</p>
<pre><code>a =[2,3,4,5]

print  [[x*y for y in [z for z in a if z != x]] for x in a]

[[6, 8, 10], [6, 12, 15], [8, 12, 20], [10, 15, 20]]
</code></pre>
<p>or the sum of the products, if you wish:</p>
<pre><code>a =[2,3,4,5]

print  [sum([x*y for y in [z for z in a if z != x]]) for x in a]

[24, 33, 40, 45]
</code></pre>
<p>If the list has duplicates, it gets more complicated.  Do you want the first occurrence and the second occurrence of <code>2</code> in <code>[2,3,4,2]</code> to be separately calculated (you might need that for some purposes even though you will get the same value for both)?</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> should be what you want</span>
<span class="comment-copy">Are you just want to multiple first element with others? Or you want to specify the element first, and then multiple it with others?</span>
<span class="comment-copy">@Harj do you want b*c?</span>
