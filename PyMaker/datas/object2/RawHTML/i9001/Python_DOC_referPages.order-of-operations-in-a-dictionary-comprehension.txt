<div class="post-text" itemprop="text">
<p>I came across the following interesting construct:</p>
<p>assuming you have a list of lists as follows:</p>
<pre><code>my_list = [['captain1', 'foo1', 'bar1', 'foobar1'], ['captain2', 'foo2', 'bar2', 'foobar2'], ...]
</code></pre>
<p>and you want to create a dict out of them with the <code>0</code>-index elements being the keys. A handy way to do it would be this:</p>
<pre><code>my_dict = {x.pop(0): x for x in my_list}
# {'captain1': ['foo1', 'bar1', 'foobar1'], ...}
</code></pre>
<p>As it seems, the <code>pop</code> precedes the assignment of list <code>x</code> as the value and that is why <code>'captain'</code> does not appear in the values (it is already popped)</p>
<p>Now let's take this a step further and try to get a structure like:</p>
<pre><code># {'captain1': {'column1': 'foo1', 'column2': 'bar1', 'column3': 'foobar1'}, ...}
</code></pre>
<p>For this task I wrote the following:</p>
<pre><code>my_headers = ['column1', 'column2', 'column3']
my_dict = {x.pop(0): {k: v for k, v in zip(my_headers, x)} for x in my_list}
</code></pre>
<p>but this returns:</p>
<pre><code># {'captain1': {'col3': 'bar1', 'col1': 'captain1', 'col2': 'foo1'}, 'captain2': {'col3': 'bar2', 'col1': 'captain2', 'col2': 'foo2'}}
</code></pre>
<p>so the <code>pop</code> in this case happens after the inner dictionary is constructed (or at least after the <code>zip</code>).</p>
<p>How can that be? How does this work?</p>
<p>The question is not about how to do it but rather why this behavior is seen.</p>
<p>I am using Python version <strong>3.5.1.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>tl;dr</em></strong>: Even though Python <em>does</em> evaluate values first (the right-side of the expression) <em>this does appear to be a bug</em> in (C)Python according to <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">the reference manual</a> and <a href="https://github.com/DimitrisJim/cpython/blob/79ab8be05fb4ffb5c258d2ca49be5fc2d4880431/Grammar/Grammar#L118" rel="nofollow noreferrer">the grammar</a> and the <a href="https://www.python.org/dev/peps/pep-0274/#semantics" rel="nofollow noreferrer">PEP on dict comprehensions</a>. </p>
<p>Though this was previously <a href="http://bugs.python.org/issue11205" rel="nofollow noreferrer">fixed for dictionary displays</a> where values were again evaluated before the keys, <em>the patch wasn't amended</em> to include dict-comprehensions. <a href="https://mail.python.org/pipermail/python-dev/2012-November/122584.html" rel="nofollow noreferrer">This requirement was also mentioned by one of the core-devs in a mailing list thread discussing this same subject</a>.</p>
<p>According to the reference manual, Python evaluates <em>expressions from left to right</em> and <em>assignments from right to left</em>; a dict-comprehension is really an expression containing expressions, <em>not an assignment</em><sup>*</sup>: </p>
<pre><code>{expr1: expr2 for ...}
</code></pre>
<p>where, according to the corresponding <a href="https://github.com/DimitrisJim/cpython/blob/79ab8be05fb4ffb5c258d2ca49be5fc2d4880431/Grammar/Grammar#L118" rel="nofollow noreferrer">rule of the <code>grammar</code></a> one would expect <code>expr1: expr2</code> to be evaluated similarly to what it does in displays. So, both expressions should follow the defined order, <code>expr1</code> should be evaluated before <code>expr2</code> (and, if <code>expr2</code> contains expressions of its own, they too should be evaluated from left to right.) </p>
<p>The PEP on dict-comps additionally states that the following should be semantically equivalent:</p>
<blockquote>
<p>The semantics of dict comprehensions can actually be demonstrated in
  stock Python 2.2, by passing a list comprehension to the built-in
  dictionary constructor:</p>
<p><code>&gt;&gt;&gt; dict([(i, chr(65+i)) for i in range(4)])</code> </p>
<p>is semantically equivalent to:</p>
<p><code>&gt;&gt;&gt; {i : chr(65+i) for i in range(4)}</code></p>
</blockquote>
<p>were the tuple <code>(i, chr(65+i))</code> is evaluated left to right as expected.</p>
<p>Changing this to behave according to the rules for expressions would create an inconsistency in the creation of <code>dict</code>s, of course. Dictionary comprehensions and a for loop with assignments result in a  different evaluation order but, that's fine since it is just following the rules.</p>
<p>Though this isn't a major issue it should be fixed (either the rule of evaluation, or the docs) to disambiguate the situation.</p>
<p><sup>*</sup><em>Internally</em>, this does result in an assignment to a dictionary object but, this shouldn't break the behavior expressions should have. Users have expectations about how expressions should behave as stated in the reference manual. </p>
<hr/>
<p>As the other answerers pointed out, since you perform a mutating action in one of the expressions, you toss out any information on what gets evaluated first; using <code>print</code> calls, as Duncan did, sheds light on what is done. </p>
<p>A function to help in showing the discrepancy:</p>
<pre><code>def printer(val):
    print(val, end=' ')
    return val
</code></pre>
<p>(Fixed) dictionary display:</p>
<pre><code>&gt;&gt;&gt; d = {printer(0): printer(1), printer(2): printer(3)}
0 1 2 3
</code></pre>
<p>(Odd) dictionary comprehension:</p>
<pre><code>&gt;&gt;&gt; t = (0, 1), (2, 3)
&gt;&gt;&gt; d = {printer(i):printer(j) for i,j in t}
1 0 3 2
</code></pre>
<p>and yes, this applies specifically for <code>C</code>Python. I am not aware of how other implementations evaluate this specific case (though they should all conform to the Python Reference Manual.)</p>
<p>Digging through the source is always nice (and you also find hidden comments describing the behavior too), so let's peek in <code>compiler_sync_comprehension_generator</code> of the file <a href="https://github.com/python/cpython/blob/3cdbd68ce8230cff1afb67472b96fbfa7f047e32/Python/compile.c#L3752" rel="nofollow noreferrer"><code>compile.c</code></a>:</p>
<pre><code>case COMP_DICTCOMP:
    /* With 'd[k] = v', v is evaluated before k, so we do
       the same. */
    VISIT(c, expr, val);
    VISIT(c, expr, elt);
    ADDOP_I(c, MAP_ADD, gen_index + 1);
    break;
</code></pre>
<p>this might seem like a good enough reason and, if it is judged as such, should be classified as a documentation bug, instead. </p>
<p>On a quick test I did, switching these statements around (<code>VISIT(c, expr, elt);</code> getting visited first) while also switching the corresponding <a href="https://github.com/python/cpython/blob/e32ec9334b35f897ace8a05128838f92c5e0b2fb/Python/ceval.c#L2754" rel="nofollow noreferrer">order in <code>MAP_ADD</code></a> (which is used for dict-comps):</p>
<pre><code>TARGET(MAP_ADD) {
    PyObject *value = TOP();   # was key 
    PyObject *key = SECOND();  # was value
    PyObject *map;
    int err;
</code></pre>
<p>results in the evaluation one would expect based on the docs, with the key evaluated before the value. (Not for their asynchronous versions, that's another switch required.) </p>
<hr/>
<p><strike>I'll drop a comment on the issue and update when and if someone gets back to me.</strike></p>
<p>Created <a href="http://bugs.python.org/issue29652" rel="nofollow noreferrer">Issue 29652 -- Fix evaluation order of keys/values in dict comprehensions</a> on the tracker. Will update the question when progress is made on it.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>As it seems, the pop precedes the assignment of list x as the value 
     and that is why 'captain' does not appear in the values (it is already
     popped)</p>
</blockquote>
<p>No, the order in which it happens is irrelevant. You are mutating the list so you will see the modified list after the pop wherever you use it. Note that in general you probably don't want to do this as you will destroy the original list. Even if that doesn't matter this time its a trap for the unwary in the future.</p>
<p>In both cases the value side is calculated first and then the corresponding key. It's just that in your first case it doesn't matter whereas it does in the second.</p>
<p>You can see this quite easily:</p>
<pre><code>&gt;&gt;&gt; def foo(a): print("foo", a)
... 
&gt;&gt;&gt; def bar(a): print("bar", a)
... 
&gt;&gt;&gt; { foo(a):bar(a) for a in (1, 2, 3) }
('bar', 1)
('foo', 1)
('bar', 2)
('foo', 2)
('bar', 3)
('foo', 3)
{None: None}
&gt;&gt;&gt; 
</code></pre>
<p>Note that you should not write code that depends on the values being evaluated first: the behaviour may change in future versions (it was said in some places to have changed in Python 3.5 and later although in fact that appears not to be the case).</p>
<p>A simpler way to do this, which avoids mutating the original data structure:</p>
<pre><code>my_dict = {x[0]: x[1:] for x in my_list}
</code></pre>
<p>Or your second example:</p>
<pre><code>my_headers = ['column1', 'column2', 'column3']
my_dict = {x[0]: {k: v for k, v in zip(my_headers, x[1:])} for x in my_list}
</code></pre>
<p>To answer the comments: the zip uses the original <code>x</code> because it is evaluated before the <code>pop</code>, but it uses the content of the list to construct a new list so any later changes to the list aren't seen in the result. The first comprehension also uses the original <code>x</code> as the value, but it then mutates the list so the value still sees the original list and hence the mutation.</p>
</div>
<div class="post-text" itemprop="text">
<p>As I said in comment that's because in a dictionary comprehension python evaluates the value first. And as a more pythonic approach you can use unpacking variables for this task, instead of popping from list in each iteration:</p>
<pre><code>In [32]: my_list = [['captain1', 'foo1', 'bar1', 'foobar1'], ['captain2', 'foo2', 'bar2', 'foobar2']]

In [33]: {frist: {"column{}".format(i): k for i, k in enumerate(last, 1)} for frist, *last in my_list}
Out[33]: 
{'captain2': {'column3': 'foobar2', 'column1': 'foo2', 'column2': 'bar2'},
 'captain1': {'column3': 'foobar1', 'column1': 'foo1', 'column2': 'bar1'}}
</code></pre>
<p>Regarding the strange behavior of python in evaluating the keys and values in a dictionary comprehension, after some experiments I realized that this behavior is somehow reasonable rather than being a bug.</p>
<p>I'll brake down my impression in following parts:</p>
<ol>
<li><p>In an assignment expression, python evaluates the right side first.
from doc:</p>
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.</p>
</blockquote></li>
<li><p>Dictionary comprehension is an expression and will be evaluated left to right but since there is an assignment under the hood, after translating it by python.
the value which is the right had side will be evaluated first.</p>
<p>for example the following comprehension:</p>
<p><code>{b.pop(0): b.pop(0) for _ in range(1)}</code>
is equivalent with following snippet:</p></li>
</ol>
<hr/>
<pre><code>def dict_comprehension():
    the_dict = {}
    for _ in range(1):
        the_dict[b.pop(0)] = b.pop(0)
    return the_dict
</code></pre>
<p>Here are some examples:</p>
<pre><code>In [12]: b = [4, 0]

# simple rule : Python evaluates expressions from left to right.
In [13]: [[b.pop(0), b.pop(0)] for _ in range(1)]
Out[13]: [[4, 0]]

In [14]: b = [4, 0]
# while evaluating an assignment (aforementioned rule 1), the right-hand side is evaluated before the left-hand side.
In [15]: {b.pop(0): b.pop(0) for _ in range(1)}
Out[15]: {0: 4}

In [16]: b = [4, 0]
# This is not a dictionary comprehension and will be evaluated left to right.
In [17]: {b.pop(0): {b.pop(0) for _ in range(1)}}
Out[17]: {4: {0}}

In [18]: b = [4, 0]
# This is not a dictionary comprehension and will be evaluated left to right.
In [19]: {b.pop(0): b.pop(0) == 0}
Out[19]: {4: True}

In [20]: b = [4, 0]
# dictionary comprehension.
In [21]: {b.pop(0): {b.pop(0) for _ in range(1)} for _ in range(1)}
Out[21]: {0: {4}}
</code></pre>
<hr/>
<p>Regarding the disparity between the the fact (Or it's better to say abstraction) that dictionary comprehensions are expression and should be evaluated left to right (based on python documentation)
with the observed behaviors I think it's actually a problem and immaturity of the python documentation and not a bug in python code. Because it's not reasonable at all to change the functionality because of the having a consistent documentation without any exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually your observation doesn't require special ordering of the operation. The reason is that <code>x.pop(0)</code> modifies the object <code>x</code>. So whether you evaluate the value (<code>x</code>) before or after the key (<code>x.pop(0)</code>) doesn't matter in this case.</p>
<p>Anyway I don't think the python language specification prescribes a certain order of operations, which means that you should not rely on the order being any particular.</p>
<p>Actually the standard implementation <strong>happens</strong> to evaluate the value before it evaluates the key, but there's nowhere in the standard where this is stated. The only guarantee is that the key-value pairs are evaluating in iteration order and they are inserted in that order.</p>
</div>
<span class="comment-copy">I think that's because the values gets evaluate first.</span>
<span class="comment-copy">@Kasramvd Do you have anything supporting that claim?</span>
<span class="comment-copy">@skyking As far as I know that's how comprehensions works. It'll evaluates the nested comprehension first, in such cases.</span>
<span class="comment-copy">@skyking It seems that it's True even for non-comprehension values. Try <code>{x.pop(0): x.pop(0) for x in [[1, 2]]}</code>. But note that it's doesn't perform like this when the list you are popping from is an internal object like a predefined list.</span>
<span class="comment-copy">Please, avoid putting material that does not belong to the question on a question. The question should only contain the problem and the information required to reproduce it, anything related to solving the problem either belongs to answers or comments. Don't put a "summary" of the answers on the question: that belongs to the answer (if the answer's author deem it appropriate).</span>
<span class="comment-copy">the <i>odd dict-comp</i> is definitely odd.. It is simply weird that Python operates almost randomly when it comes to the order of operations in dict-comprehensions. At the end the result is the same if the comprehension does not use methods that alter their objects but <code>pop</code> does.. For me that is the only reason <code>pop</code> is <i>bad</i> practice. I find the construct otherwise fairly useful..</span>
<span class="comment-copy">@Ev.Kounis indeed it is. Though a bug, I wouldn't be surprised if the effort required to fix it is greater than the benefit of actually fixing it (it is a real corner-case that, unless you're up to wacky things, shouldn't be an issue).  You could drop a comment on the issue that fixed this for dict displays and see what the devs think.</span>
<span class="comment-copy"><i>a dict-comprehension is really an expression containing expressions, not an assignment</i>. I disagree. Dictionary comprehension is an expression but python will translate it to a simple assignment and hence it will follows the assignment rule!</span>
<span class="comment-copy">I am afraid i wouldn't know how to do that. If you think it is worth it feel free to do it yourself. Post the link if you do so that I can follow it up. Thanks!</span>
<span class="comment-copy">@JimFasarakis-Hilliard: The implementation is undocumented, but declaring the semantics equivalent to some example implementation would only be documenting the semantics, not the real implementation.</span>
<span class="comment-copy">but then why does the <code>zip(header, x)</code> makes use of the unmodified <code>x</code>?</span>
<span class="comment-copy">because in both cases the value part of the dictionary comprehension executes before the key side.</span>
<span class="comment-copy">the only problem I have with the slicing approach is that the elements that is actually the <i>captain</i> is not the first one so i have to merge two slices. I did not dv btw.</span>
<span class="comment-copy">I've extended my answer to show how you can tell the order of evaluation with some prints. No problem on the dv, It would be nice if whoever did it said why they don't like the answer but I don't mind the odd downvote.</span>
<span class="comment-copy">"<i>No, the order in which it happens is irrelevant. You are mutating the list so you will see the modified list after the pop wherever you use it</i>". If it is so why does <code>zip</code> use the original <code>x</code>?</span>
<span class="comment-copy">I find this very interesting..</span>
<span class="comment-copy">Which definition of <code>my_list</code> are you using?</span>
<span class="comment-copy">@Ev.Kounis It was a modified list ;) checkout the update.</span>
<span class="comment-copy">This is curious, +1, but is this a specified language feature? It's hard to know how widely this applies is from a single example. I was under the impression keys should be evaluated first: <a href="http://stackoverflow.com/questions/28156687/will-a-python-dict-literal-be-evaluated-in-the-order-it-is-written" title="will a python dict literal be evaluated in the order it is written">stackoverflow.com/questions/28156687/…</a></span>
<span class="comment-copy">@Chris_Rands Yes python evaluates the expressions form left to right but it seems that this is an exception.</span>
<span class="comment-copy">but then why does the <code>zip(header, x)</code> makes use of the unmodified <code>x</code>?</span>
<span class="comment-copy">It was not me mate.</span>
<span class="comment-copy">@Ev.Kounis That's OK, stackoverflow is full of people that votes down answers without explanation...</span>
