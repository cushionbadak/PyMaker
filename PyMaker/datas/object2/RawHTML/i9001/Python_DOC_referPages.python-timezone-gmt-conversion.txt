<div class="post-text" itemprop="text">
<p>I have this date format:</p>
<pre><code>Sat Apr 14 21:05:23 GMT-00:00 2018
</code></pre>
<p>I want to use <code>datetime</code> to store this data.  </p>
<p><code>datetime.datetime.strptime(dateString, '%a %b %d %H:%M:%S %Z %Y').timetuple()</code></p>
<p>What is the date/time format for GMT?  The <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">document</a> doesn't have GMT.</p>
</div>
<div class="post-text" itemprop="text">
<p>Handling timezones is always a bit confusing.  In your example, you were not specific in your needs as it relates to the timezone.</p>
<p><strong>Fixed timezone offset:</strong></p>
<p>One way to read what you wrote is that the timezone information in your string is always <code>GMT-00:00</code>. If the timezone is always the same, then it is a simple matter to build a <code>strptime</code> string as:</p>
<pre><code>dt.datetime.strptime(date, '%a %b %d %H:%M:%S GMT-00:00 %Y')
</code></pre>
<p>This makes no effort to interpret the timezone, since it is fixed. This will give you timezone naive <code>datetime</code>.  And since your example immediately converted the <code>datetime</code> to a <code>timetuple</code>, I assume this is the result you wanted.</p>
<p><strong>To test:</strong></p>
<pre><code>&gt;&gt;&gt; date = "Sat Apr 14 21:05:23 GMT-00:00 2018"
&gt;&gt;&gt; print(dt.datetime.strptime(date, '%a %b %d %H:%M:%S GMT-00:00 %Y'))
2018-04-14 21:05:23
</code></pre>
<p><strong>Interpreting the timezone offset:</strong></p>
<p>If you have non-GMT timezones in your timestamps, and want to preserve the information you can do:</p>
<pre><code>def convert_to_datetime(datetime_string):
    # split on spaces
    ts = datetime_string.split()

    # remove the timezone
    tz = ts.pop(4)

    # parse the timezone to minutes and seconds
    tz_offset = int(tz[-6] + str(int(tz[-5:-3]) * 60 + int(tz[-2:])))

    # return a datetime that is offset
    return dt.datetime.strptime(' '.join(ts), '%a %b %d %H:%M:%S %Y') - \
        dt.timedelta(minutes=tz_offset)
</code></pre>
<p>This function will take your time string and make use of the <code>UTC</code> offset. (eg. <code>-00:00</code>).  It will parse the timezone information out of the string and then add the resulting minutes and seconds back into the <code>datetime</code> to make it <code>UTC</code> relative.</p>
<p><strong>To test:</strong></p>
<pre><code>&gt;&gt;&gt; print(convert_to_datetime("Sat Apr 14 21:05:23 GMT-00:00 2018"))
2018-04-14 21:05:23

&gt;&gt;&gt; print(convert_to_datetime("Sat Apr 14 21:05:23 PST-08:00 2018"))
2018-04-15 05:05:23
</code></pre>
<p><strong>Timezone aware:</strong></p>
<p>The above codes return a <code>UTC</code> relative timezone naive <code>datetime</code>.  It if you need a timezone aware <code>datetime</code>, then you can do that with:</p>
<pre><code>datetime.replace(tzinfo=pytz.UTC))
</code></pre>
<p><strong>To test:</strong></p>
<pre><code>&gt;&gt;&gt; import pytz
&gt;&gt;&gt; print(convert_to_datetime("Sat Apr 14 21:05:23 GMT-00:00 2018").replace(tzinfo=pytz.UTC))
2018-04-14 21:05:23+00:00
</code></pre>
</div>
<span class="comment-copy">What document are you referring to?</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/79797/how-do-i-convert-local-time-to-utc-in-python" title="how do i convert local time to utc in python">stackoverflow.com/questions/79797/â€¦</a> ?</span>
<span class="comment-copy">here is the link to the document:<a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">docs.python.org/3/library/datetime.html</a></span>
<span class="comment-copy">In my case, looks like I always have GMT-00:00.  Thank you so much for the answer.  My problem is solved.</span>
