<div class="post-text" itemprop="text">
<p>Suppose I have 5 objects: <code>obj1</code> to <code>obj5</code>:</p>
<pre><code>obj1.x = 2.7
obj2.x = 0.9
obj3.x = 3.8
obj4.x = 1.2
obj5.x = 0.4
</code></pre>
<p>How can I find (efficiently) the highest value of <code>x</code>, and identify the corresponding <code>obj</code>? Here the expected answer would be:</p>
<pre><code>x = 3.8, it belongs to obj3
</code></pre>
<p>By the way, in the actual case, I have <code>500</code> objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have a list and you need the index of the maximum, you can combine <code>max</code> and <code>enumerate</code> to make an equivalent to <code>numpy.argmax</code> in pure Python:</p>
<pre><code>l = [obj1, obj2, obj3, ...]
i = max(enumerate(l), key=lambda x: x[1].x)[0]
</code></pre>
<p><code>i</code> will be the index containing the maximum value, so you can print it as</p>
<pre><code>print('x = {}, belongs to obj{}'.format(l[i].x, i + 1))
</code></pre>
<p>In the example you gave, <code>i == 2</code>, which prints <code>x = 3.8, belongs to obj3</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Best to put them in a collection (i.e <code>list</code>, <code>tuple</code>, ..) and use <code>max</code> with <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow noreferrer"><code>operator.attrgetter</code></a> to grab the object with the max value of <code>x</code>:</p>
<pre><code>from operator import attrgetter
l = obj1, obj2, obj3, obj4, obj5  
o = max(l, key=attrgetter('x'))
</code></pre>
<p>The value <code>o</code> returned now corresponds to the one with the max value for the attribute <code>x</code>, i.e <code>obj3</code>:</p>
<pre><code>o == obj3 # True
</code></pre>
<p>Ideally, you shouldn't "identify" the object by means of its name, that can easily change and if you have a list that isn't ordered by the name you'd get wrong results. </p>
<p>Instead, you should give the class it was created from another attribute, say<code>"name"</code>, and define an <code>__str__</code>/<code>__repr__</code> for it that prints out the name and the value.</p>
</div>
<span class="comment-copy">Do you have them in a list or some sort of data structure?</span>
<span class="comment-copy">I posted a new answer based on the assumption that you identify the objects by their index in a sequence rather than by a unique variable name.</span>
<span class="comment-copy">@MadPhysicist Thanks for your kind help. Is it possible to sort the objects instead of only finding the max one.</span>
<span class="comment-copy">Thanks @Mad Physicist. Is it possible to sort the objects, instead of only finding the max one?</span>
<span class="comment-copy">You mean using <code>s = sorted(l, key=lambda x: x.x)</code>?. In that case, the max will just be <code>s[-1]</code>. If <code>l</code> is a mutable sequence like a <code>list</code> (as in my example), you can also do <code>l.sort(key = lambda x: x.x)</code>, in which case it will be sorted in-place.</span>
<span class="comment-copy">very nice. thanks.</span>
<span class="comment-copy">Nice! Always nice to get to use <code>attrgetter</code> :)</span>
<span class="comment-copy">If you want to avoid the import, <code>key=lambda x: x.x</code> works just fine as well.</span>
<span class="comment-copy">It's just too bad there is not built-in equivalent to numpy's <code>argmax</code> function.</span>
<span class="comment-copy">This has the drawback that it does not retrieve the index of the object.</span>
<span class="comment-copy">Thanks. It helps a lot.</span>
