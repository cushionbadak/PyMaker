<div class="post-text" itemprop="text">
<p>I am trying to get an understanding of the different version's of Python.  Currently, their website provides several different version within the download section.</p>
<p>I understand the distinction between Python 2.x and 3.x, and the larger confusion I am having is between different versions of Python 3.x.</p>
<p>For example, their website currently lists the three most recent releases as:</p>
<ul>
<li><strong>Python 3.4.6</strong> (2017-01-17)</li>
<li><strong>Python 3.5.3</strong> (2017-01-17)</li>
<li><strong>Python 3.6.0</strong> (2016-12-23)</li>
</ul>
<p>Clearly, the most recent release is 3.4.6, but it is not the largest release number.</p>
<p>What is the distinction between these three different versions?  Should I install the most recent version, or the largest release number?  All help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="http://semver.org/">this</a>, a version number is defined by</p>
<p>MAJOR.MINOR.PATCH</p>
<p>where </p>
<ol>
<li>MAJOR version when you make incompatible API changes</li>
<li>MINOR version when you add functionality in a backwards-compatible manner, and</li>
<li>PATCH version when you make backwards-compatible bug fixes.</li>
</ol>
<p>According to <a href="https://www.python.org/download/releases/3.4.0/">this</a> and <a href="https://www.python.org/downloads/release/python-350/">this</a> Python 3.5.0 was released in 2015-09-13, while Python 3.4.0 was released on March 16th, 2014.</p>
<p>The third number in the version number is the PATCH which usually fixes bugs, so the last version of Python is 3.6.0 which has no patches so far. I recommend to use the version based on the compatibility of the libraries you are going to use.</p>
</div>
<span class="comment-copy">Check this <a href="http://semver.org/" rel="nofollow noreferrer">semver.org</a></span>
<span class="comment-copy">If you want to use the most recently updated version, you will constantly be switching versions. If you target the highest version number, you'll only switch versions every time there's a new release. Also, given enough time, a higher version number will always have a more recent update than a lower version number.</span>
<span class="comment-copy">Thank you so much!  This is a wonderful answer.  As a secondary question, do most packages explicitly state which version number they work with?  Also, if a package says something like "works with 3.4+" does that generally mean it will work with version 3.6, or would it only work with 3.4.x?</span>
<span class="comment-copy">@user3317176: If it says "3.4+", that includes 3.6.</span>
<span class="comment-copy">@user3317176, it depends on the library. For example, in this page <a href="https://docs.djangoproject.com/en/1.10/faq/install/" rel="nofollow noreferrer">Django</a> it says which version of that package is compatible with which version of Python, and as user2357112 says, if you have something as version 3.4+ means that it will be compatible with version &gt;= 3.4.0.</span>
<span class="comment-copy">Another question.  Does Python 3.6 not have all the features of 3.4?  It seems strange to support both 3.4 and 3.5 and 3.6 at the same time.</span>
<span class="comment-copy">@ncuccia, you can see what is new in Python 3.6 <a href="https://docs.python.org/3/whatsnew/3.6.html" rel="nofollow noreferrer">here</a></span>
