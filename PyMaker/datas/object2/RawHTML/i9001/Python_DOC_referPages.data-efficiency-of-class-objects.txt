<div class="post-text" itemprop="text">
<p>It appears to me that each instance of a particular class has its own dictionary. This could waste a lot of space when there is a large number of identically structured class objects. Is this actually the case, or is the underlying mechanism more efficient, only creating an object's dictionary when it is explicitly asked for.
I am considering an application where I may have a very large number, possibly into millions, of objects, should I avoid using a class and instead use a sequence with a named constant as the index?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to reduce the overhead you have two options depending on what you actually need.</p>
<p>If you need a class-like structure then you should consider using <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer"><code>__slots__</code></a>. This will avoid the <code>__dict__</code> but still allows you to have methods, properties and so on. You'll lose the ability to dynamically add attributes (you're restricted to those listed as <code>__slots__</code>).</p>
<p>If you just want a "storage" for objects and don't need methods and similar you can use <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a>. These provide a "class-like" interface to their items and should be pretty space-efficient.</p>
<p>For example a class that just has two attributes "lastname" and "firstname" could be implemented as:</p>
<pre><code>class Person(object):
    __slots__ = ['firstname', 'lastname']

    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname

    def __repr__(self):
        return '{self.__class__.__name__}({self.firstname!r}, {self.lastname!r})'.format(self=self)

&gt;&gt;&gt; p = Person('Tom', 'Riddle')
&gt;&gt;&gt; p
Person('Tom', 'Riddle')
&gt;&gt;&gt; p.firstname
'Tom'
</code></pre>
<p>or as namedtuple:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple

&gt;&gt;&gt; Person = namedtuple('Person', 'firstname, lastname')

&gt;&gt;&gt; p = Person('Tom', 'Riddle')
&gt;&gt;&gt; p
Person(firstname='Tom', lastname='Riddle')
&gt;&gt;&gt; p.firstname
'Tom'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That depends on the data you want to store in each object, but in most cases lists should do.</p>
</div>
<span class="comment-copy">Millions is not a very large number, but you should check out <code>__slots__</code>. For example here: <a href="http://stackoverflow.com/questions/472000/usage-of-slots">stackoverflow.com/questions/472000/usage-of-slots</a></span>
<span class="comment-copy">@Paul Hankin That should have been an answer, then I could have upvoted it. It is precisely the answer I was looking for.</span>
<span class="comment-copy">It has the additional benefit that only elements named in the <b>slots</b> variable can be accessed, so typing errors are detected sooner. This really should be much more prominent in the Python documentation.</span>
<span class="comment-copy">Being prevented from dynamically adding members is, in my opinion, more often a benefit. I didn't know about namedtuple, and would otherwise have considered it to be a good solution, but <b>slots</b> seems superior.</span>
<span class="comment-copy">@ChrisBarry Both have their use-cases. I agree that <code>__slots__</code> is superior (they allow methods and real properties), but in some cases you just want a "class-like" immutable storage container and then <code>namedtuple</code> is a viable alternative.</span>
