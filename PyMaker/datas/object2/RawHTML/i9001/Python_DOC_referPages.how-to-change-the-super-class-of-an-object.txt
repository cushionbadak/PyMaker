<div class="post-text" itemprop="text">
<p>I have a class containing methods and a constructor in Python. The return value of the constructor will be an object, but I need a return value of a class (constructor) such as <code>numbers.Number</code> type. </p>
<p>Is it possible to change the return value of class by adding <code>numbers.Number</code> as super class of this class, and if so, could someone describe how to do it?</p>
<hr/>
<pre><code>class Num(Parent):
    #Some Code
    #Here Parent must be inherited

class Foo(Num):
    #Foo Should return of type numbers.Number
    #Here Num must be inherited
</code></pre>
<p>Now I want <code>Foo</code> to return <code>number.Number</code> value whenever we call constructor of <code>Foo</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what you're trying to accomplish by doing this, nor what you expect to happen as a result. However, since <code>numbers.Number</code> is an <code>abc</code> (abstract base class), it means you can make your own class be considered one of its subclasses simply by registering it with the <code>abc</code>. (There's no need to override <code>__new__</code> as I first thought because I didn't realize that <code>numbers.Number</code> was an <code>abc</code>.) </p>
<p>Here's what I mean:</p>
<pre><code>import numbers

class Parent(object):
    # Added only to make script runnable
    pass

class Num(Parent):
    #Some Code
    #Here Parent must be inherited
    pass

class Foo(Num):
    #Foo Should return of type numbers.Number
    #Here Num must be inherited
    pass

numbers.Number.register(Foo)

foo = Foo()
print(isinstance(foo, numbers.Number))  # -&gt; True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you have to inherit from int type:</p>
<pre><code>class MyClass(int):
    ....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done through standard <a href="https://docs.python.org/3/tutorial/classes.html#inheritance" rel="nofollow noreferrer">class inheritance</a>.</p>
<pre><code>from numbers import Number

class MyNumber(Number):
    def is_number(self):
        return isinstance(a, Number)

a = MyNumber()
print(a.is_number())
</code></pre>
<p>It should be noted that all classes of the <a href="https://docs.python.org/3/library/numbers.html" rel="nofollow noreferrer">numbers module</a> are <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">Abstract Base Classes</a> (ABCs) and cannot be instantiated.  They are similar to interfaces in other languages (like Java) and are implemented in corresponding types, e.g. <code>int</code> implements <code>numbers.Integral</code>.</p>
<p>By using <code>numbers.Number</code> as the base class, you will have all of the operations from that class in <code>MyNumber</code>, but if you instantiate it with a value like <code>MyNumber(2)</code> you will get <code>TypeError: object() takes no parameters</code>.</p>
</div>
<span class="comment-copy">Your factory class doesn't have to have numbers.Number as a base class in order to create objects of that type. It can just have a method that create objects of that type and return them. Maybe I'm missing something.</span>
<span class="comment-copy">Constructors in Python don't return anything. By the time they're called a class instance of some type already exists—constructor just do any further initialization required. You might be able to do what you want by overriding the <code>__new__()</code> method, which <i>does</i> determine the type of object created. Alternatively, you might need might need something sometimes described as a "virtual constructor"—so search for that term. If you had some actual code in your question illustrating what you''re trying to do, you might get better (or at least more concrete) answers.</span>
<span class="comment-copy">@martineau maybe you are on the right way, can you elaborate that with given code by me in question ?</span>
<span class="comment-copy"><code>numbers.Number.register(Foo) </code>  is generating error with message                                                           <code>AttributeError: type object 'Number' has no attribute 'register' </code></span>
<span class="comment-copy">The code in my answer runs without error for me in both Python 2.7.13 and Python 3.6.0—so I have no idea what the problem could be.</span>
<span class="comment-copy">Since <a href="https://www.python.org/dev/peps/pep-3141/#numeric-classes" rel="nofollow noreferrer">this section</a> in PEP 3141 for the <code>numbers</code> module says the abstract <code>Number</code> class does not provide any operations, it would seem that inheriting "all of the operations" from it is somewhat meaningless. As I wrote in my own answer, it's unclear what the OP hopes to accomplish by doing what they ask.</span>
<span class="comment-copy">Agreed, the question is unclear and my answer really only satisfies the basic requirement of what the OP asked while being mostly useless.</span>
