<div class="post-text" itemprop="text">
<p>I am trying to create tuple of following kind:</p>
<pre><code>('a', 0), ('b', 0), ('a', 1), ('b', 1), ('a', 2), ('b', 2), ('a', 3), ('b', 3)
</code></pre>
<p>from arrays:</p>
<p><code>A = ['a','b']</code> and numbers 0 through 3.</p>
<p>What is good pythonic representation as I am ending with a real for loop here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.product</code>.</p>
<pre><code>from itertools import product

tuples = list(product(['a', 'b'], [0, 1, 2, 3]))
print(tuples) # [('a', 0), ('a', 1), ..., ('b', 0), ('b', 1), ...]
</code></pre>
<p>If you need them in the exact order you originally specified, then:</p>
<pre><code>tuples = [(let, n) for n, let in product([0, 1, 2, 3], ['a', 'b'])]
</code></pre>
<p>If your comment that "I am ending with a real for loop here" means you ultimately just want to iterate over these elements, then:</p>
<pre><code>for n, let in product([0, 1, 2, 3], ['a', 'b']):
    tup = (let, n) # possibly unnecessary, depending on what you're doing
    ''' your code here '''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could opt for <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to get the Cartesian product you're looking for. If the element order isn't of significance, then we have</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product(A, range(4)))
[('a', 0),
 ('a', 1),
 ('a', 2),
 ('a', 3),
 ('b', 0),
 ('b', 1),
 ('b', 2),
 ('b', 3)]
</code></pre>
<p>If you need that <em>particular</em> order, </p>
<pre><code>&gt;&gt;&gt; list(tuple(reversed(x)) for x in product(range(4), A))
[('a', 0),
 ('b', 0),
 ('a', 1),
 ('b', 1),
 ('a', 2),
 ('b', 2),
 ('a', 3),
 ('b', 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>L = range(0, 4)
K = ['a', 'b']

L3 = [(i, j) for i in K for j in L]
print(L3)
</code></pre>
<p><strong>OUTPUT</strong>
<code>[('a', 0), ('a', 1), ('a', 2), ('a', 3), ('b', 0), ('b', 1), ('b', 2), ('b', 3)]</code></p>
<p>If you wish to use list comprehension... other answers are correct as well</p>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension</p>
<pre><code>&gt;&gt;&gt; [(a,n) for a in list1 for n in range(4)]
[('a', 0), ('a', 1), ('a', 2), ('a', 3), ('b', 0), ('b', 1), ('b', 2), ('b', 3)]
</code></pre>
<p>If order matters:</p>
<pre><code>&gt;&gt;&gt; [(a,n) for n in range(4) for a in list1]
[('a', 0), ('b', 0), ('a', 1), ('b', 1), ('a', 2), ('b', 2), ('a', 3), ('b', 3)]
</code></pre>
</div>
<span class="comment-copy"><code>[ (a,n) for n in num  for a in A ]</code> where num is range(0,3).</span>
