<div class="post-text" itemprop="text">
<p>Meaning "if each item is within range of other item with the same index".</p>
<pre><code>price = [1, 2]  
budget = [5, 7]
</code></pre>
<p>This works:</p>
<pre><code>if price[0] in range(budget[0]) and price[1] in range(budget[1]):
    affordable = True
</code></pre>
<p>I figure there's some way to just reference the whole array though. Like so: <code>if price in budget:</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use:</p>
<pre><code>if all(x in range(y) for x,y in zip(price,budget)):
    affordable = True
</code></pre>
<p>This will create tuples of <code>price[i],budget[i]</code> and then for each of these tuples we check that <code>price[i]</code> is in <code>range(budget[i])</code>. Nevertheless, you can optimize this further to:</p>
<pre><code>if all(<b>0 &lt;= x &lt; y</b> for x,y in zip(price,budget)):
    affordable = True</code></pre>
<p>Note that this makes the assumption that <code>price</code>s are <strong>all</strong> integers. If you however use <code>x in range(y)</code> it will fail if <code>x</code> is not an integer. So <code>0.7 in range(10)</code> would fail whereas our second approach will succeed (but it depends of course on what you want).</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that both prices and budgets must be non-negative, using <code>in range</code> seems to be over-complicating things. Instead, you could just use the <code>&lt;</code> operator.</p>
<p>Regardless of whether you use <code>&lt;</code> or <code>in range</code>, it seems like the easiest approach would be to <code>zip</code> both lists and apply the condition on the pairs:</p>
<pre><code>if (all([x[0] &gt;= x[1] for x in zip(budget, price)])):
    affordable = True
</code></pre>
</div>
<span class="comment-copy">What exactly do you mean, "within range"? What is a range of a single item? What determines whether the price is "in budget" here?</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a>; e.g. <code>if all(price[i] in range(budget[i]) for i in range(...))</code> or <code>all(p in range(b) for p,b in zip(price, budget))</code> if that's what you really want.</span>
<span class="comment-copy">Using range would also fail if budget isn't an integer</span>
<span class="comment-copy"><code>0&lt;=x&lt;=y</code> (or similar) instead of <code>x in range(y)</code> will deal with floats and not compile (and iterate; PY2) a <code>list</code></span>
<span class="comment-copy">That'd do it, thanks :) I just remembered what I actually need in my case was to check for either instead of both, here's how to do it in that case:             <code>if any(x not in range(y) for x, y in zip(price, budget)):</code></span>
<span class="comment-copy">@schwobaseggl: what do you mean with "<i>not compile</i>"?</span>
<span class="comment-copy">@WillemVanOnsem In Python2, <code>range</code> builds (compiles) a list of integers first, and then must iterate it again for the contains check, which seems like a lot work to check if some numerical values lies between two other numerical values. compile = build, put together, not in the computational sense of 'translate' ;)</span>
