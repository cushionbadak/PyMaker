<div class="post-text" itemprop="text">
<p>As a follow up to <a href="https://stackoverflow.com/questions/42330795/how-to-properly-split-this-list-of-strings">this question</a>, I have an expression such as this:<code>['(', '44', '+(', '3', '+', 'll', '))']</code> which was created by using <code>re.findall('\w+|\W+',item)</code> method, however within this list of strings, there are two errors. One is the '+(' and the other is the '))'.</p>
<p>Is there a pythonic way that I could split just the operators such that the list would be something like <code>['(', '44', '+','(', '3', '+', 'll', ')',')']</code>. </p>
<p>(keep the digits/letters together, separate the symbols)</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Short solution using <a href="https://docs.python.org/3.6/library/stdtypes.html#str.join" rel="nofollow noreferrer"><strong><em>str.join()</em></strong></a> and <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><strong><em>re.split()</em></strong></a> functions:</p>
<pre><code>import re
l = ['(', '44', '+(', '3', '+', 'll', '))']
new_list = [i for i in re.split(r'(\d+|[a-z]+|[^\w])', ''.join(l)) if i.strip()]

print(new_list)
</code></pre>
<p>The output:</p>
<pre><code>['(', '44', '+', '(', '3', '+', 'll', ')', ')']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative would be to change the regex in order to keep the non-alphanumeric characters separate :</p>
<pre><code>import re
lst = ['z+2-44', '4+(55+z)+88']
[re.findall('\w+|\W', s) for s in lst]

#[['z', '+', '2', '-', '44'], ['4', '+', '(', '55', '+', 'z', ')', '+', '88']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want to split characters of grouped non-alphanumerical characters.</p>
<p>I would create a 1-list item if the item is ok (alphanumerical) or a list of characters if the item is a sequence of symbols.</p>
<p>Then, I'd flatten the list to get what you asked for</p>
<pre><code>import itertools

l = ['(', '44', '+(', '3', '+', 'll', '))']
new_l = list(itertools.chain.from_iterable([x] if x.isalnum() else list(x) for x in l))
print(new_l)
</code></pre>
<p>result:</p>
<pre><code>['(', '44', '+', '(', '3', '+', 'll', ')', ')']
</code></pre>
<p>EDIT: actually you could link your 2 questions into one answer (adapting the <a href="https://stackoverflow.com/questions/42330795/how-to-properly-split-this-list-of-strings/42330843#42330843">regex answer</a> of the original question) by not grouping symbols in the regex:</p>
<pre><code>import re
lst = ['z+2-44', '4+55+((z+88))']
print([re.findall('\w+|\W', s) for s in lst])
</code></pre>
<p>(note the lack of <code>+</code> after <code>\W</code>) and you get directly:</p>
<pre><code>[['z', '+', '2', '-', '44'], ['4', '+', '55', '+', '(', '(', 'z', '+', '88', ')', ')']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import re
lst = ['z+2-44', '4+(55+z)+88']
[re.findall('\w+|\W', s) for s in lst]
</code></pre>
<p>May be it helps to others.</p>
</div>
<span class="comment-copy">it's <i>not</i> a duplicate like <i>at all</i>. It may appear like that, but I have edited the question to really show what OP wants (after answering the prequel question)</span>
<span class="comment-copy">check my answer, it answers both questions now.</span>
