<div class="post-text" itemprop="text">
<p>I iterate through a list of dictionaries ,in which a particular maps to a list.  </p>
<pre><code>[{..'ccy'=['a','b']....},{...'ccy'=['c','d']....},{....'ccy'=['e']....}].
</code></pre>
<p>How do I merge the lists corresponding to the 'ccy' key,while looping through the list of dictionaries?<br/>
Expected output:  </p>
<pre><code>['a','b','c','d','e']
</code></pre>
<p>Preferrably a one-liner solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <em>nested comprehension</em>:</p>
<pre><code>lst = [{'ccy':['a','b']},{'ccy':['c','d']},{'ccy':['e']}]

r = [i for d in lst for i in d.get('ccy', [])]
print(r)
# ['a', 'b', 'c', 'd', 'e']
</code></pre>
<p>The <code>dict.get</code> method ensures an empty list is returned in the case a dictionary has no key <code>'ccy'</code> (courtesy @tobias_k)</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to iterate over a bunch of things, and "accumulate" an answer?</p>
<p>This sounds like a job for <strong>sum,</strong> a <a href="https://docs.python.org/3/library/functions.html?highlight=sum#sum" rel="nofollow noreferrer" title="Python sum docs">Python built-in!</a></p>
<pre><code>some_dicts = [
        {'ccy':['a','b']},
        {'ccy':['c','d']},
        {'ccy':['e']},
        {'no ccy here!': ['fu']},
    ]

ccy = sum([d.get('ccy',[]) for d in some_dicts], [])
print(ccy)
</code></pre>
</div>
<span class="comment-copy">Your sets are <code>{'ccy'=['a','b']}</code> or <code>{'ccy':['a','b']}</code> it confuses me.</span>
<span class="comment-copy"><code>list(itertools.chain(*[i['ccy'] for i in c]))</code> <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.chain</a></span>
<span class="comment-copy">Maybe use <code>d.get("ccy", [])</code> in case some dicts don't have <code>ccy</code></span>
<span class="comment-copy">@tobias_k Good point.</span>
<span class="comment-copy"><code>r = [i for d in lst if 'ccy' in d for i in d['ccy']]</code> is kinda faster, but I get that some prefere the <code>.get()</code></span>
