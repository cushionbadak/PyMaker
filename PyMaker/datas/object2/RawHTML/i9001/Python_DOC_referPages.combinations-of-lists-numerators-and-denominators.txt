<div class="post-text" itemprop="text">
<p>This is something that I've managed to get working in R. Now it needs to be in python, for reasons. The translation is not straight forward. </p>
<p>If I have two lists, one of numerators and one of denominators, how would one go about picking all sets of two ratios, such that the numerators of the two ratios in each set are not the same. Similarly, I don't want the denominators to be the same. </p>
<pre><code>upList = ("up1","up2","up3")
downList = ("down1","down2","down3")
</code></pre>
<p>I want to produce:</p>
<pre><code>up1down1, up2down2
up1down1, up2down3
up1down1, up3down2
up1down1, up3down3

up1down2, up2down1
up1down2, up2down3
up1down2, up3down1
up1down2, up3down3
</code></pre>
<p>and so on ... </p>
<p>My initial attempt involved itertools.product</p>
<pre><code>upSets = itertools.combinations(upList,2)
downSets = itertools.combinations(downList,2)

allSets = itertools.product(upSets,downSets)

for aset in allSets:
    print (aset)
    print (list(itertools.product(geneSet[0],geneSet[1])))
</code></pre>
<p>This gets me sets of 4 numerator/denominator pairs, I can't figure out how to combine those 4 pairs in such a way that the numerators aren't the same though. The above code produces a number of lines like: </p>
<pre><code>[('up1', 'down1'), ('up1', 'down2'), ('up2', 'down1'), ('up2', 'down2')]
</code></pre>
<p>Out of this line, I'd want to produce</p>
<pre><code>[('up1', 'down1'), ('up2', 'down2')]
[('up1', 'down2'), ('up2', 'down1')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit: Corrected, thanks to comments from @Blckknght.</strong></p>
<p>Given your input data:</p>
<pre><code>upList = ("up1","up2","up3")
downList = ("down1","down2","down3")
</code></pre>
<p>You want to first create all permutations of numerator x denominator. That's available from <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools.combination#itertools.combinations" rel="nofollow noreferrer"><code>itertools.product</code></a>.</p>
<pre><code>from itertools import product

ratios = product(upList, downList)
</code></pre>
<p>You next want to find all combinations of 2 distinct items from the product. That's a 2-combination, and can be gotten via <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools.combination#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a>.</p>
<pre><code>from itertools import combinations

ratio_pairs = combinations(ratios, 2)
</code></pre>
<p>But you want to restrict the combinations to those where the two items don't share the same numerator, nor do they share the same denominator. That's a filtering list comprehension:</p>
<pre><code>distinct_ratio_pairs = [ (p1,p2) for p1,p2 in ratio_pairs if p1[0] != p2[0] and p1[1] != p2[1] ]

for drp in distinct_ratio_pairs:
    print(drp)
</code></pre>
<p>Output:</p>
<pre><code>(('up1', 'down1'), ('up2', 'down2'))
(('up1', 'down1'), ('up2', 'down3'))
(('up1', 'down1'), ('up3', 'down2'))
(('up1', 'down1'), ('up3', 'down3'))
(('up1', 'down2'), ('up2', 'down1'))
(('up1', 'down2'), ('up2', 'down3'))
(('up1', 'down2'), ('up3', 'down1'))
(('up1', 'down2'), ('up3', 'down3'))
(('up1', 'down3'), ('up2', 'down1'))
(('up1', 'down3'), ('up2', 'down2'))
(('up1', 'down3'), ('up3', 'down1'))
(('up1', 'down3'), ('up3', 'down2'))
(('up2', 'down1'), ('up3', 'down2'))
(('up2', 'down1'), ('up3', 'down3'))
(('up2', 'down2'), ('up3', 'down1'))
(('up2', 'down2'), ('up3', 'down3'))
(('up2', 'down3'), ('up3', 'down1'))
(('up2', 'down3'), ('up3', 'down2'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you're very close. You're code works correct up until you create the final lists that you're printing. I think you want to create two lists for each item yielded from <code>allSets</code>:</p>
<pre><code>upSets = itertools.combinations(upList,2)
downSets = itertools.combinations(downList,2)

allSets = itertools.product(upSets,downSets)

for (a, b), (c, d) in allSets:
    print([(a, c), (b, d)])
    print([(a, d), (b, c)])
</code></pre>
<p>This won't exactly match the order you wanted, but it should produce all the desired combinations of pairs. If you need the results in leicographical order, put the results in a list and <code>sort</code> it.</p>
<p>That assumes you don't care about the order of the pairs in the list. If you do, you'll want two more results with the pairs above swapped around (<code>[(b, d), (a, c)]</code> and <code>[(b, c), (a, d)]</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>product</code> method from <code>itertools</code> like this way in order to have your desired output:</p>
<pre><code>from itertools import product

a = ("up1","up2","up3")
# assuming your b variable is like this one
b = ("down1", "down2","down3")

c = ["".join(k) for k in list(product(a,b))]

subfinal = list(product(c,c))
# removing the duplicates
# maybe not the best way to do it...
# also removing those kind of data: up1down1,up1down2
# also removing those kind of data: up1down1,up3down1
final = [k for k in subfinal if k[0] != k[1] and k[0][:3] != k[1][:3] and k[0][3:] != k[1][3:]]
print('total: ', len(final))
for k in final:
    print(", ".join(k))
</code></pre>
<p>Output:</p>
<pre><code>total:  36
up1down1, up2down2
up1down1, up2down3
up1down1, up3down2
up1down1, up3down3
up1down2, up2down1
up1down2, up2down3
up1down2, up3down1
up1down2, up3down3
...
</code></pre>
</div>
<span class="comment-copy">How are these supposed to be numerators and denominators? Why are you calling tuples lists? Why is <code>'up1'</code> in the <code>downList</code>, and why isn't it in the output? If you don't want the "numerators" to match in a pair, why don't any of the "denominators" seem to match?</span>
<span class="comment-copy">i'm using this to illustrate my problem. I'm not calculating a ratio, I want to generate a list of all possible ratios. up1 in the downlist is a typo. I have no idea what you mean about the denominators not matching. ideally, I'd not want them to match either.</span>
<span class="comment-copy">None of the things paired with <code>up1down1</code> include <code>down1</code>. The question seemed to only indicate they shouldn't include <code>up1</code>.</span>
<span class="comment-copy">Which is as it should be. Both up1 and down1 are in the first first pair. Hold on, I'll edit the question to make it clearer.</span>
<span class="comment-copy">@Ben I think my answer fills with your needs. Take a look and don't hesitate to leave your feedbacks. I've made many edits, but now it will, hopefelly, produce the same output you desire.</span>
<span class="comment-copy">There's no need for a list comprehension on the <code>zip</code> output, just pass it to <code>list()</code>. The pairs are already tuples.</span>
<span class="comment-copy">I did that figuring that a print statement wasn't the real purpose the OP had in mind for this.</span>
<span class="comment-copy">My point is that <code>list(zip(np, dp))</code> gives exactly the same output as your list comprehension. And I think this solution is incomplete. For example, it will never combine <code>up1</code> and <code>down3</code> in a single pair, since <code>up1</code> is always part of the first pair and <code>down3</code> is always in the second pair.</span>
<span class="comment-copy">You're right. I need to create the product and filter, first. Man, I hate combinatorics.</span>
<span class="comment-copy">The hating of combinatorics, I can relate to. This works for me though - I can generalize easily enough (if not particularly prettily) to sets of 3 ratios and so forth. Ta muchly.</span>
