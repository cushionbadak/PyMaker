<div class="post-text" itemprop="text">
<p>Below is the code which demonstrates the problem. Please note that this is only an example, I am using the same logic in a more complicated application, where I can't use sleep as the amount of time, it will take for process1 to modify the variable, is dependent on the speed of the internet connection.</p>
<pre><code>from multiprocessing import Process

code = False

def func():
    global code
    code = True

pro = Process(target=func)
pro.start()

while code == False:
    pass

pro.terminate()
pro.join()

print('Done!')
</code></pre>
<p>On running this nothing appears on the screen. When I terminate the program, by pressing CTRL-C, the stack trace shows that the while loop was being executed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a few concurrency libraries:  <code>threading</code>, <code>multiprocessing</code> and <code>asyncio</code> (and more).</p>
<p><code>multiprocessing</code> is a library which uses subprocesses to bypass python's inability to concurrently run CPU intensive tasks.  To share variables between different <code>multiprocessing.Process</code>es, create them via a <code>multiprocessing.Manager()</code> instance.  For example:</p>
<pre><code>import multiprocessing

import time


def func(event):
    print("&gt; func()")
    time.sleep(1)
    print("setting event")
    event.set()
    time.sleep(1)
    print("&lt; func()")


def main():
    print("In main()")

    manager = multiprocessing.Manager()
    event = manager.Event()
    p = multiprocessing.Process(target=func, args=(event,))
    p.start()

    while not event.is_set():
        print("waiting...")
        time.sleep(0.2)

    print("OK! joining func()...")
    p.join()

    print('Done!')


if __name__ == "__main__":
    main()
</code></pre>
</div>
<span class="comment-copy">Processes aren't threads. That process is setting its own, independent global variable. If you want to communicate between <code>multiprocessing</code> processes, use the tools <code>multiprocessing</code> provides and documents.</span>
<span class="comment-copy">@user2357112 Could this question be marked as duplicate for: <a href="http://stackoverflow.com/questions/17377426/shared-variable-in-pythons-multiprocessing">Shared variable in python's multiprocessing</a>? I need second opinion</span>
<span class="comment-copy">@user2357112 Can you please give an example code?</span>
<span class="comment-copy">@AbhishekKumar: There's plenty of example code in the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">docs</a>.</span>
<span class="comment-copy">@MoinuddinQuadri: That one doesn't really say anything about what happens if you try to share globals without a <code>Manager</code>. Something like <a href="http://stackoverflow.com/questions/10845782/multiprocessing-module-in-python2-7-causing-some-issue">this</a> or <a href="http://stackoverflow.com/questions/21525460/cant-modify-global-dict-variable-using-mutliprocessing-in-python">this</a> might work better, although I'd like to find something with a more thorough explanation of the implications of the <code>multiprocessing</code> implementation.</span>
