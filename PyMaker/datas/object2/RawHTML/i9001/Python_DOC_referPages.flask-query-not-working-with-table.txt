<div class="post-text" itemprop="text">
<p>I have this script that I import into the route:</p>
<pre><code>import sqlite3

conn = sqlite3.connect("c:/DB/tvldb.db")  

cursor = conn.cursor()

cursor.execute('''SELECT code, type, issue, item_type, list_code FROM Issues''')

datarows = cursor.fetchall()

conn.close()
</code></pre>
<p>That works fine when I print it.</p>
<p>Here is the route:</p>
<pre><code>from flask import Flask, render_template
import db_issues

app = Flask(__name__)

datarows = db_issues.datarows

@app.route('/issues')
def issues():
   return render_template('leftside.html', datarows=datarows)

if __name__ == '__main__':
   app.run(debug=True)
</code></pre>
<p>And here is the template:</p>
<pre><code>&lt;h2 id="pageTitle"&gt; Missing Items&lt;/h2&gt;
&lt;table style="width:85%" border="1"&gt;
    &lt;tr&gt;
        &lt;th&gt;Code&lt;/th&gt;
        &lt;th&gt;Type&lt;/th&gt;
        &lt;th&gt;Issue&lt;/th&gt;
        &lt;th&gt;Entry Type&lt;/th&gt;
        &lt;th&gt;List Code&lt;/th&gt;
    &lt;/tr&gt;
    {% for row in datarows %}
        &lt;tr&gt;
            &lt;td&gt;{{ code }}&lt;/td&gt;
            &lt;td&gt;{{ type }}&lt;/td&gt;
            &lt;td&gt;{{ Issue }}&lt;/td&gt;
            &lt;td&gt;{{ item_type }}&lt;/td&gt;
            &lt;td&gt;{{ list_code }}&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}
&lt;/table&gt;&lt;br&gt;&lt;br&gt;
{% endblock %}
</code></pre>
<p>The table shows ok but no data is filled in. I been trying all day to do this simple thing and having no luck. According to all the tutorials and stackoverflow answers I checked, this should be correct. Any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you should write your table like this (not tested yet):</p>
<pre><code>{% for row in datarows %}
    &lt;tr&gt;
        &lt;td&gt;{{ row['code'] }}&lt;/td&gt;
        &lt;td&gt;{{ row['type'] }}&lt;/td&gt;
        &lt;td&gt;{{ row['issue'] }}&lt;/td&gt;
        &lt;td&gt;{{ row['item_type'] }}&lt;/td&gt;
        &lt;td&gt;{{ row['list_code'] }}&lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look more closely at <code>datarows</code>. It'll be a list of tuples, not a dictionary. That is, there no names to associate with each 'column', so attempts to reference in the template, say, <code>row.code</code> are going to fail, because <code>row</code> is a tuple.</p>
<p>You could, with a bit of work, turn the rows into dictionaries, by matching up the slots in each tuple with names found in <code>cursor.description</code>. There's an example of how to do that using <code>row_factory</code> in the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory" rel="nofollow noreferrer">sqlite3 docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Always debug the variable that you are passing to the rendered page this will let you know that whether the data are inside the index or not</p>
<pre><code>print(variable)
</code></pre>
<p>Using this you will be confirmed that what data you have to parse to the template page</p>
</div>
<span class="comment-copy">I tried that and it did not work.</span>
<span class="comment-copy">I did that in a separate script</span>
