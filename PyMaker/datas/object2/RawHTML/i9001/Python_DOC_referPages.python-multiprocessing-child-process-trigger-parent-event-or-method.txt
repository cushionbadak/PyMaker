<div class="post-text" itemprop="text">
<p>I am using multiprocessing to create a child process, then the child process will do some time consuming long time work which may never end.</p>
<p>What I want to do is when the child process finishes one step, it will trigger an event of the parent process or just call some functions. </p>
<p>Here is part of my script:</p>
<pre><code>class WorkerProcess(multiprocessing.Process):
    def __init__(self, port, addresslist, result_queue):
        multiprocessing.Process.__init__(self)
        self.exit = multiprocessing.Event()
        self.serialPort = port
        self.addressList = addresslist
        self.sch = SerialCommunication(self.serialPort, self.addressList)
        self.result_queue = result_queue

    def run(self):
        while not self.exit.is_set():
            self.sch.RegularLoadInfo()
            self.result_queue.put(self.sch.rawData)
            # here trigger event or method in parent process, or let the queue put trigger it

    def shutdown(self):
        try:
            self.sch.stopSerial()
        except Exception:
            print(Exception)
        self.exit.set()

class DataExchange(object):
    def __init__(self):
        self._serialOn = False
        self.workerSerial = None

    def get_serialOn(self):
        return self._serialOn

    def set_serialOn(self, value):
        self._serialOn = value
        if self.serialOn == True:
            result = multiprocessing.Queue()
            self.workerSerial = WorkerProcess(self.serialPort, self.addressList, result)
            self.workerSerial.daemon = True
            self.workerSerial.start()

        elif self.serialOn == False:
            self.workerSerial.shutdown()

    serialOn = property(get_serialOn, set_serialOn)

    def OnUpdate(self, event):
        # triggered by child process
        # do something
        pass
</code></pre>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot call a method in another process directly, but you have two possibilities:</p>
<h2>a) parent waits until child sends</h2>
<p>You'll need to set up a <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue" rel="nofollow noreferrer"><code>queue</code></a> to communicate from the child to the parent (or a <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Pipe" rel="nofollow noreferrer"><code>pipe</code></a> if you need to communicate both ways) and then make the parent block (run <code>get()</code>) until the child sends data (runs <code>put()</code>).</p>
<p>Since you already have set up a queue <code>result</code> in your code you either want to take this or hand in another queue to the <code>__init__</code> constructor of <code>WorkerProcess</code>. </p>
<p>In the parent process do something like this:</p>
<pre><code>        result = multiprocessing.Queue()
        self.workerSerial = WorkerProcess(self.serialPort, self.addressList, result)
        self.workerSerial.daemon = True
        self.workerSerial.start()
        while True:
            event = result.get()
            if event is None:
                break
            if event == 'update':
                self.OnUpdate()
        self.workerSerial.terminate()
</code></pre>
<p>You'll need to define how the child communicates that he sent the last element (aka the "sentinel"), I chose <code>None</code> in the example code above.</p>
<p>Once the parent gets the sentinel, it runs <code>terminate()</code> on the child to end it.</p>
<h2>b) parent polls for changes</h2>
<p>If the parent needs to do stuff alongside waiting for the result, you'll need to periodically check if there's stuff in your queue:</p>
<pre><code># do stuff in parent
if not result.empty():
    event = result.get()
    # process event as above and terminate if `None`
</code></pre>
</div>
<span class="comment-copy">Thanks, I need to keep the parent responsible to another GUI button click event, so I think I cannot use the while loop in a). Another thing is the WorkerProcess will not stop unless it is told to, so the terminate may not proper here.</span>
<span class="comment-copy">For b), I think it also needs a loop for it. So where can I put it if I need to keep the parent process always able to response to outside event?</span>
<span class="comment-copy">it needs to be inside the GUI loop, if you want you can add the GUI loop bit to your question and I can try to work the if not <code>result.empty()</code> if block in</span>
<span class="comment-copy">I use b) with a new threading.Timer. Even though this is not what I wish, but problem is solved. Thanks~</span>
