<div class="post-text" itemprop="text">
<pre><code>def Change_char_stats():
    Char_dmg = 50
    Char_health = 100
    Char_stat_choice= ''
    print('Current Damage is:',Char_dmg,'and health is:',Char_health,'.')
    Char_stat_choice=input('\nWhat character stat would you like to edit?')

    if Char_stat_choice == '1':
        print('Current damage is',Char_dmg,'.')
        Char_dmg=int(input('Character damage to: '))
        print('Character damage has been changed to',Char_dmg,'.')
        Change_char_stats()

    elif Char_stat_choice == '2':
        print('Current damage is',Char_health,'.')
        Char_health=int(input('Character health to: '))
        print('Character health has been changed to',Char_health,'.')
        Change_char_stats()
    else:
        print('Input invalid.')
        Change_char_stats()

Change_char_stats()
</code></pre>
<p>So basically I'm working on a simple game for myself on Python, and I'm having an issue with my variables as when I run the program original variables are set to 50 dmg and 100 health, but what I want to do is be able to run the code, change the variables and then have them stay as that. Although I understand why the variables aren't staying as the new values, I have no clue how to over-write them, help would be much appreciated.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest creating a class to package all of the variables into a single object:</p>
<pre><code>def class player_character:
    def __init__(self):
        self.health = 100
        self.dmg = 50
</code></pre>
<p>Now you create an instance of the class:</p>
<pre><code>player = player_character()
</code></pre>
<p>And change the variables directly:</p>
<pre><code>player.health -= 10
</code></pre>
<p>Alternatively, you can add functions to the class:</p>
<pre><code>def class player_character:
    def __init__(self):
        self.health = 100
        self.dmg = 50

    def hit(self, dmg):
        self.health -= dmg
</code></pre>
<p>Now you can call the function on an object:</p>
<pre><code>player.hit(10)
</code></pre>
<p>Classes are incredibly powerful and great tools for organizing code. They allow you to treat a lot of data as a single entity. I strongly encourage you to learn more about them and object oriented programming in general.</p>
</div>
<div class="post-text" itemprop="text">
<p>Place the variables outside function body and make them accessible within usng global keyword:</p>
<pre><code>somevar = 5

def foobar(x):
    global somevar
    somevar = x

print somevar
foobar(6)
print somevar
</code></pre>
</div>
<span class="comment-copy">You are missing a closing quote <code>'</code> on this line <code>Char_stat_choice=input('\nWhat character stat would you like to edit?)</code></span>
<span class="comment-copy">You keep calling <code>Change_char_stats()</code> recursively but you don't keep track of any changes done to <code>Char_health</code> etc. It might be better to have a character represented as an instance of a class so that you can keep track of changes.</span>
<span class="comment-copy">You should be usign a class and use instances there - but you really should understand better how funcitons workm before defining yur character class. I suggest you take  read on the Python tutorial at <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/index.html</a></span>
<span class="comment-copy">Do the <code>if</code> statements belong inside the <code>Change_char_stats()</code> function?</span>
<span class="comment-copy">This would be interesting in a multiplayer game :) There's no reason to use globals here.</span>
<span class="comment-copy">Well, there is in a sense it does properly answer what the OP asked. I would not downvote this answer, as it is "correct". But I won't upvote it either, unless it explains what are the issues with this design, and offers a better one.</span>
