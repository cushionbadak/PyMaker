<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1224741/trying-to-import-module-with-the-same-name-as-a-built-in-module-causes-an-import">Trying to import module with the same name as a built-in module causes an import error</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>The following simple script raises an ImportError in python3:</p>
<pre><code>from multiprocessing import Queue
queue = Queue()
print("OK")
</code></pre>
<p>The key to reproduce this error is to name this file <code>queue.py</code>, and then the following messages appear:</p>
<pre><code>Traceback (most recent call last):
File "queue.py", line 3, in &lt;module&gt;
    queue = Queue()
File "/home/wangc/app/anaconda/lib/python3.5/multiprocessing/context.py", line 100, in Queue
    from .queues import Queue
File "/home/wangc/app/anaconda/lib/python3.5/multiprocessing/queues.py", line 20, in &lt;module&gt;
    from queue import Empty, Full
File "/home/wangc/temp/queue.py", line 3, in &lt;module&gt;
    queue = Queue()
File "/home/wangc/app/anaconda/lib/python3.5/multiprocessing/context.py", line 100, in Queue
    from .queues import Queue
ImportError: cannot import name 'Queue'
</code></pre>
<p>If the file is named as <code>queueue.py</code>, then everything is fine.</p>
<p>I think this is because multiprocessing module is trying to import Queue from my queue.py since its name coincides with some file in multiprocessing module. </p>
<p>However, If it is how python works, then I should avoid filenames of any possible internal libraries, which is not practical.</p>
<p>Is this error attributed to the same filename of my file and some file in multiprocessing module? And if it is, how can I ensure my filenames are distinct from files of any possible library in general programming?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't have the same file name as the module you are importing.
Read modules for more clarification 
Using that, any unadorned package name will always refer to the top level package. You will then need to use relative imports to access your own package.
You will want to read about <a href="https://docs.python.org/3/whatsnew/2.5.html#pep-328-absolute-and-relative-imports" rel="nofollow noreferrer">Absolute and Relative</a> Imports which addresses this very problem.</p>
</div>
<span class="comment-copy">The <code>Queue</code> actually comes from the <code>queue</code> package in the standard lib.</span>
<span class="comment-copy">This is indeed how python works - check out <a href="http://stackoverflow.com/questions/1224741/trying-to-import-module-with-the-same-name-as-a-built-in-module-causes-an-import" title="trying to import module with the same name as a built in module causes an import">stackoverflow.com/questions/1224741/â€¦</a></span>
<span class="comment-copy">Then I should avoid names of any possible library. How can I do that?</span>
<span class="comment-copy">It's only modules you've written that are on the module search path that can be problematic. If you put your modules into packages, then only the package name is at risk of colliding with something.</span>
