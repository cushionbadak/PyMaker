<div class="post-text" itemprop="text">
<p>I'm expecting arguments in this format</p>
<pre><code>filname.py -input="a","b","c"
</code></pre>
<p>currently, I'm parsing command line parameters by this code</p>
<pre><code>dict(item.split("=") for item in sys.argv[1].split(" "))
</code></pre>
<p>is there any better way to read command line arguments. I tried using OptionParser but OptionParser requires key value pairs to be separated by space.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a specific example of accumulating a list via <a href="https://docs.python.org/3.6/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>, which I mentioned in a comment above.</p>
<pre><code>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--foo', action='append')
&gt;&gt;&gt; args = parser.parse_args("--foo a --foo b --foo c".split())
&gt;&gt;&gt; print(args.foo)
['a', 'b', 'c']
</code></pre>
<p>This is not quite as ideal, since this requires the argument name <code>--foo</code> to be given with each item you want to add to its list.</p>
<p>An alternative would be to read in a string with commas and split them:</p>
<pre><code>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--foo')
&gt;&gt;&gt; args = parser.parse_args("--foo a,b,c".split())
&gt;&gt;&gt; args.foo
'a,b,c'
&gt;&gt;&gt; args.foo.split(',')
['a', 'b', 'c']
</code></pre>
<p>I suppose this may be an XY problem. What is it exactly that you are attempting to accomplish by having an argument with parameters like this?</p>
<hr/>
<p>After receiving further information (OP's comments), it appears that the key-value reading is vital.</p>
<p>The <a href="http://www.tornadoweb.org/en/stable/" rel="nofollow noreferrer">Tornado</a> project has a custom option-parsing module <a href="https://github.com/tornadoweb/tornado/blob/master/tornado/options.py" rel="nofollow noreferrer"><code>tornado.options</code></a> which assumes values to be given on the command line as key-value pairs like you want.</p>
<p>I would <em>not</em> advise you to import Tornado into your project just to get this to work. However, you can read through the <a href="http://www.tornadoweb.org/en/stable/options.html#optionparser-class" rel="nofollow noreferrer"><code>OptionParser</code></a> object's definition in that file I linked to see how you might implement such functionality. To simulate <code>argparse</code> using this new argument parser:</p>
<pre><code>&gt;&gt;&gt; from tornado.options import OptionParser
&gt;&gt;&gt; parser = OptionParser()
&gt;&gt;&gt; parser.define('foo', multiple=True)
&gt;&gt;&gt; parser.parse_command_line('throwaway --foo="a","b","c"'.split())
&gt;&gt;&gt; parser.foo
['"a"', '"b"', '"c"']
</code></pre>
<p>Notice that <code>parse_command_line</code> requires an extra throwaway argument at the beginning. This is because if you don't supply a value, it uses <code>sys.args</code> and skips the first argument (which is generally the name of the command being executed). In your own parser, you could rewrite <a href="https://github.com/tornadoweb/tornado/blob/master/tornado/options.py#L274" rel="nofollow noreferrer">this line</a> to start at <code>0</code> instead of <code>1</code> and avoid this necessity.</p>
<p>Conveniently, Tornado's <code>OptionParser</code> does include the ability to specify a list through the <code>multiple=True</code> parameter of <code>define</code>. You would still have to strip the resulting values of their extraneous quotation marks, but that's done simply enough.</p>
</div>
<span class="comment-copy">The goto is part of the standard library: <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer"><code>argparse</code> tutorial</a>.</span>
<span class="comment-copy">A different program is triggering my script and it is passing arguments in that way</span>
<span class="comment-copy">and it seems like there is not cleaner way in python to get arguments in that format (key value pairs separated by '='). I will either have to change format of input arguments or have to use the code that I mention in question.</span>
<span class="comment-copy">@RAQ please see the update, as I may have found some information relevant to your specific needs. :)</span>
