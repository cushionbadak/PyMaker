<div class="post-text" itemprop="text">
<p>I hope it's pretty clear what I wanna do with this function:</p>
<pre><code>def this_one_operator(math_operator, num1, num2):
    return num1 * num2 if operator == "*" \
        or num1 / num2 if operator == "/" \
        or num1 + num2 if operator == "+" \
        or num1 - num2 if operator == "-"
</code></pre>
<p>Obviously, it doesn't work (SyntaxError: invalid syntax).</p>
<p>Sorry if I duplicate the question. I did my best to find here how to deal with that problem. Also, I appreciate any suggestion how to edit the question if it's not accurate.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a <code>value if condition else default</code> <a href="https://docs.python.org/3/faq/programming.html?highlight=ternary#is-there-an-equivalent-of-c-s-ternary-operator" rel="noreferrer">ternary operation,</a> which you could stack for this result. However, it's not very compact, and not very pythonic to be doing what you seem to want to do.</p>
<p>Instead, you might try:</p>
<pre><code>import operator 

def binary_op(op, lopd, ropd):
    return { '/' : operator.floordiv,
             '*' : operator.mul,
             '+' : operator.add,
             '-' : operator.sub,
             '%' : operator.mod }[op](lopd, ropd)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, but it's ugly.</p>
<pre><code>return (x * y if operator == "*" else
        x / y if operator == "/" else
        x + y if operator == "+" else
        x - y if operator == "-" else
        None)
</code></pre>
<p>Alternatively:</p>
<pre><code>import operator
OPERATORS = {
    '*': operator.mul,
    '/': operator.truediv,
    '+': operator.add,
    '-': operator.sub,
}

return OPERATOR[op](x, y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This isn't pretty, but it works:</p>
<pre><code>def this_one_operator(math_operator, num1, num2):
    return (operator == "/")*(num1/num2) + \
           (operator == "+")*(num1+num2) + \
           (operator == "-")*(num1-num2) + \
           (operator == "*")*(num1*num2)
</code></pre>
<p>The reason this works is that the boolean statements are equal to either 0 or 1, so multiplying them by the correct expression and summing the correct total will yield the right result.</p>
<p>Edit: Actually, this doesn't work as others have pointed out because the division operation may result in an undefined result.</p>
</div>
<span class="comment-copy"><code>else</code>, not <code>or</code>, and you need a default case.</span>
<span class="comment-copy">I supposed there was some stuff like this for math operators. Thanks. It works.</span>
<span class="comment-copy">Thank you. Your first one clarified Python's logic and syntax for me.</span>
<span class="comment-copy">But now you can't do <code>this_one_operator('+', 0, 0)</code></span>
<span class="comment-copy">It doesn't work: <code>this_one_operator('+', 5, 0)</code> should return 5 but it raises an exception...</span>
<span class="comment-copy">Probably a divide-by-zero error due to computing something that shouldn't be computed.</span>
<span class="comment-copy">Good call, guess it doesn't work.</span>
