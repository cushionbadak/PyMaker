<div class="post-text" itemprop="text">
<p>here i have an array of numbers, how to determine whether array can be divided into two subsets for which the sum of elements in both subsets is the same, if the subsets are available, the program should return true.</p>
<pre><code>For array = [8, 6, 3, 5], the output should be sub(array) = true
</code></pre>
<blockquote>
<p>It is possible to partition this array into two subsets that have a sum of 8: [8] and [3,5].</p>
</blockquote>
<p>`</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a brute-force solution. It uses the powerset recipe from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>Itertools Recipes</code></a> in the docs to generate all the subsets. It then sorts and groups them by sum, using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>. Then finally it checks all pairs of subsets with the same sum to find pairs that do not intersect.</p>
<pre><code>from itertools import chain, combinations, groupby

def equal_sum_partitions(seq):
    subsets = chain.from_iterable(combinations(seq, r) for r in range(len(seq)+1))
    for k, g in groupby(sorted(subsets, key=sum), key=sum):
        group = [set(u) for u in g]
        if len(group) &gt; 1:
            for u, v in combinations(group, 2):
                if not u &amp; v:
                    print(k, (u, v))

# test

equal_sum_partitions([2, 4, 8, 6, 3, 5])  
</code></pre>
<p><strong>output</strong></p>
<pre><code>5 ({5}, {2, 3})
6 ({6}, {2, 4})
7 ({2, 5}, {3, 4})
8 ({8}, {2, 6})
8 ({8}, {3, 5})
8 ({2, 6}, {3, 5})
9 ({4, 5}, {3, 6})
10 ({8, 2}, {4, 6})
10 ({4, 6}, {2, 3, 5})
11 ({8, 3}, {5, 6})
11 ({8, 3}, {2, 4, 5})
13 ({8, 5}, {3, 4, 6})
14 ({8, 6}, {2, 3, 4, 5})
14 ({8, 2, 4}, {3, 5, 6})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found a solution, but it will raise a memory error for larger inputs :(   </p>
<pre><code>def subs(l):
 if l == []:
    return [[]]
x = subs(l[1:])
return x + [[l[0]] + y for y in x]

def sub(arr):
ls=[]
ls=subs(arr)
for i in ls:
    if(sum(list(set(arr)-set(i)))==sum(i)):
        return True
return False
</code></pre>
</div>
<span class="comment-copy">have you looked at <a href="https://en.wikipedia.org/wiki/Subset_sum_problem" rel="nofollow noreferrer">en.wikipedia.org/wiki/Subset_sum_problem</a> your question is a more advance problem that requires some fancy dynamic programming, I doubt there is a python library that can do it for you :(</span>
<span class="comment-copy">Okay thanks ......</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/6012963/subset-sum-problem">stackoverflow.com/questions/6012963/subset-sum-problem</a> ; <a href="http://stackoverflow.com/questions/23087820/python-subset-sum">stackoverflow.com/questions/23087820/python-subset-sum</a></span>
<span class="comment-copy">I noticed I was voted down, could whoever do it provide a reason?</span>
<span class="comment-copy">I certainly didn't down-vote, but it's quite common for questions to get down-voted when they don't include some code that attempts to solve the problem.</span>
<span class="comment-copy">What if the input array features a duplicated element? e.g. <code>[8, 8, 2, 1, 3]</code> There are two subsets of sum 11, but this method will not capture them.</span>
<span class="comment-copy">@asongtoruin True, but I decided to assume that we're working with true sets, which don't contain duplicates. ;) If the original set contains two <code>8</code>s, does <code>({8}, {8})</code> count as a valid partition?</span>
<span class="comment-copy">Excellent use of itertools. But so complex, after you have the subsets you can just iterate over them and check <code>if sum(sub) == sum(seq) / 2</code> That is it.</span>
<span class="comment-copy">@Janhak That would work if we were literally partitioning <code>seq</code> into 2 parts, but we aren't doing that. The example in the OP is <code>[8]</code> and <code>[3,5]</code>, which doesn't completely cover the original set.</span>
