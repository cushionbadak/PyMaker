<div class="post-text" itemprop="text">
<p>Let's say I have a text file containing, for example, the following (assuming the headings are these: Name, Amount of pencils)</p>
<pre><code>Harry,3,
Alexander,4,
Rebecca,39,
Rachel,7,
Alexander,9,
Harvey,5,
Rebecca,11,
</code></pre>
<p>The main thing here is that both Alexander and Rebecca have multiple entries. Currently, my code reads the lines from the file, and just outputs the lines, ignoring any multiple entries; i.e. the entries are all separate from each other (I'm not sure I need to put the code here - it's just general formatting for aesthetics). Instead, I want it to add the two quantities together for any names that have multiple occurrences, and output that to the user instead.</p>
<p>So, for example, the output should look like this:</p>
<pre><code>Harry        3
Alexander    13
Rebecca      50
Rachel       7
Harvey       5
</code></pre>
<p>I feel like I'm missing something obvious (apologies if I am), but how would I check if lines have a matching name, and then if they do, add the numbers together for the final output? And would it be easier to create a new file to store these new values?
Currently, I'm thinking along the lines of:</p>
<pre><code>namesInFile = []
with open("Pencils.txt","r") as file:
    for line in file:
        pencilArr = line.split(",")
        namesInFile.append(pencilArr[0])

       if namesInFile.count(pencilArr[0]) &gt; 0:
         do something
</code></pre>
<p>But I'm unsure of how exactly to go about adding numbers from different arrays that are created in a loop? Perhaps if I initialised a variable to keep track of quantities, but then is it possible to do that only for those that I know have matching conditions.</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to use a Python dictionary for this instead of a list. You will want to read up on <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionaries</a>, but this is how it could be implemented using one:</p>
<pre><code>name_pencil_dict = {}    # Create the dictionary
with open("Pencils.txt","r") as file:
for line in file:
    pencilArr = line.split(",")
    name = pencilArr[0]
    num_pencils = pencilArr[1]

    if name not in list(name_pencil_dict.keys):
        # Name not found, create new dictionary entry, initialize num pencils to zero
        name_pencil_dict[name] = 0

    # Add the number of pencils to the name's dictionary value
    name_pencil_dict[name] += num_pencils
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> would be nice here:</p>
<pre><code>import collections as co

dd = co.defaultdict(int)
with open("Pencils.txt","r") as fin:
    for line in fin:
        name,amount,blank = line.split(',')
        dd[name] += int(amount)
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; dd
defaultdict(&lt;type 'int'&gt;, {'Harvey': 5, 'Alexander': 13, 'Rebecca': 50, 'Rachel': 7, 'Harry': 3})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't use lists, use dictionary instead. Store person name as a key and  accumulated sum as a value.</p>
<pre><code>names_in_file = {}
with open("Pencils.txt","r") as file:
    for line in file:
        pencil_list = line.split(",")
        names_in_file[pencil_list[0]] = names_in_file.get(pencil_list[0], 0) + int(pencil_list[1])
</code></pre>
<p>Then, after finishing reading the file, form an output file by processing key and value in a formed dictionary.</p>
<pre><code>out_content = ''
for name, age in names_in_file.iteritems():
    out_content = '{}{}\t{}\n'.format(out_content, name, age)
with out_file as open('path_to_out_file', "wt"):
    out_file.write(out_content)
</code></pre>
<p><strong>NOTE</strong>: I've renamed variables with more pythonic names.</p>
<p><strong>Good luck :) !</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Also you can try</p>
<pre><code>file_obj = open('data.txt', 'r')
dic = {}
for line in file_obj:
    arr = line.split(',')[:2]
    if arr[0] in dic:
        dic[arr[0]] += int(arr[1])
    else:
        dic[arr[0]] = int(arr[1])


file_obj.close()
</code></pre>
</div>
<span class="comment-copy">Thank you! Could I just ask what the purpose of the presence of out_content is in the line"  out_content = '{}{}\t{}\n'.format(out_content, name, age)" ?</span>
