<div class="post-text" itemprop="text">
<p>I have a simple game which is based on probabilities, every day we toss a coin and if we get heads then we win and we get $20 and if we toss the coin and we get tails then we lose $19, at the end of the month (28 days) we see how much we have lost or made. </p>
<pre><code>def coin_tossing_game():
    random_numbers = [random.randint(0, 1) for x in range(500)] #generate 500 random numbers
    for x in random_numbers:
        if x == 0: #if we get heads
            return 20 #we win $20
        elif x == 1: #if we get tails
            return -19 #we lose $19


for a in range(1, 28): #for each day of the month
    print(coin_tossing_game())
</code></pre>
<p>This returns the output 20
20
-19
-19
-19
-19
-19
20
-19
20
-19
20
-19
20
20
-19
-19
20
20
-19
-19
-19
20
20
20
-19
-19
-19
20
20</p>
<p>This output is exactly what I expected. I want to find the sum of the output and other descriptive statistics like the mean, mode, median, standard deviation, confidence intervals etc. I have had to copy and paste this data to excel to do this data analysis. I was hoping there was a way to easily do this in python quickly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're asking <strong>how</strong>. The most immediately available is build into Python in the form of the <strong>statistics</strong> library. But again, you seem to want to know how to do this. The following code shows the basics, which I haven't felt the need to do for almost 50 years.</p>
<p>First, modify your code so that it captures the sample in a vector. In my code it's called <code>sample</code>.</p>
<p>The first part of the code simply exercises the Python library. No sweat there.</p>
<p>The second part of the code shows how to accumulate the sum of the values in the sample, and the sum of the squares of their deviations from the mean. I leave it to you to work out how to calculate the sample variance, sample standard deviation and confidence intervals under the usual assumptions from these statistics. Having sorted and renamed the sample I calculate the maximum and minimum values (useful for estimation for some distributions). Finally I calculate the median from the sorted sample. I leave calculation of the median to you.</p>
<pre><code>import random

def coin_tossing_game():
    random_numbers = [random.randint(0, 1) for x in range(500)] #generate 500 random numbers
    for x in random_numbers:
        if x == 0: #if we get heads
            return 20 #we win $20
        elif x == 1: #if we get tails
            return -19 #we lose $19

sample = []
for a in range(1, 28): #for each day of the month
    #~ print(coin_tossing_game())
    sample.append(coin_tossing_game())

## the easy way

import statistics

print (statistics.mean(sample))
print (statistics.median(sample))
print (statistics.mode(sample))
print (statistics.stdev(sample))
print (statistics.variance(sample))

## the hard way

sample.sort()
orderedSample = sample
N = len(sample)
minSample = orderedSample[0]
maxSample = orderedSample[-1]
sumX = 0
for x in sample:
    sumX += x
mean = sumX / N

sumDeviates2 = 0
for x in sample:
    sumDeviates2 += ( x-mean )**2

k = N//2
if N%2==0:
    mode = 0.5* (orderedSample[k]+orderedSample[k-1])
else:
    mode = orderedSample[k]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there is: Install numpy and scipy. Use functions <code>numpy.mean</code>, <code>numpy.std</code>, <code>numpy.median</code>, <code>scipy.stats.mode</code>.</p>
<p>Scipy also contains the <code>scipy.stats</code> module which provides various common significance tests.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the scipy stats module and use <code>modal</code> for the mode, use <code>scipy.stats.mstats.median_cihs</code> for the median, and use <code>trim_mean</code> for the mean. You could also use the statistics module and use the <code>mean()</code>, <code>median()</code>, and <code>mode()</code> functions. </p>
</div>
<span class="comment-copy"><a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html" rel="nofollow noreferrer"><code>pandas</code></a> is a python library that does many of the things that excel does.</span>
<span class="comment-copy">Maybe check out scipy stats module. <a href="https://docs.scipy.org/doc/scipy/reference/stats.html" rel="nofollow noreferrer">docs.scipy.org/doc/scipy/reference/stats.html</a></span>
<span class="comment-copy">as a starting point, you could output a list from the function, and then have some functions that calculate stats (e.g. mean, stdev, etc) on a provided list of numbers. Its basic python code (for loop, basic math), you dont really need a library to get started with these kind of basic stats</span>
<span class="comment-copy">From 3.4 Python his a <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer"><b>statistics</b></a> module built in</span>
<span class="comment-copy">Hi Bill, I just wanted to take the time out to say thank you very much for your help. Thank you so much for giving me both methods, I was actually just looking for the easy method but you gave me both. Thank you</span>
<span class="comment-copy">You're very welcome!</span>
