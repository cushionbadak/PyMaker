<div class="post-text" itemprop="text">
<p>I usually use very simply <code>subprocess.check_output</code>:</p>
<pre><code>process = subprocess.check_output("ps aux", shell=True)
print process #display the list of process
</code></pre>
<p>If I fear there is something in <code>stderr</code>, I use it like that:</p>
<pre><code>process = subprocess.check_output("ps aux 2&gt; /dev/null", shell=True)
print process #display the list of process
</code></pre>
<p>But I have a problem with <code>nginx -V</code>:</p>
<pre><code>modules = subprocess.check_output("nginx -V", shell=True) #display the result
print modules #empty

modules = subprocess.check_output("nginx -V 2&gt; /dev/null", shell=True) #display nothing
print modules #empty
</code></pre>
<p>Why is the command <code>nginx -V</code> behaving differently (all printing in <code>stderr</code>)? How can I design esealy a workaround with ``subprocess.check_output`?</p>
</div>
<div class="post-text" itemprop="text">
<p>The way to redirect standard error to standard output in the shell is <code>2&gt;&amp;1</code> but you would do well to avoid using the shell at all here.</p>
<pre><code>p = subprocess.Popen(['nginx', '-V'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = p.communicate()
if out == '':
    modules = err
modules = out
</code></pre>
<p>If you have a more recent Python, also consider switching to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run()</code></a></p>
</div>
<span class="comment-copy">It might be that a process is specifically printing to the terminal it is run on instead of the normal channels.</span>
<span class="comment-copy">See also <a href="http://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess/36008455#36008455" title="actual meaning of shell true in subprocess">stackoverflow.com/questions/3172470/â€¦</a> for a general discussion of why to avoid <code>shell=True</code>.</span>
