<div class="post-text" itemprop="text">
<p>I have been coding for about 1 and half years now on and off, but I still don't get how grids work in Python.</p>
<p>So my problem is that I have to make a grid to display a population model. So I need to populate my grid with different variables that change for every row you have in the grid:
<a href="https://i.stack.imgur.com/iLjCZ.png" rel="nofollow noreferrer"><img alt="" src="https://i.stack.imgur.com/iLjCZ.png"/></a></p>
<p>So how would I got about this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You really don't need a concept of a grid to accomplish what you want.  You simply need a <code>generator</code> to propagate your population from one generation to the next.  You can then use Python's <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">Format Specification Mini-Language</a> to print the values in a table that matches your example output.</p>
<pre><code>def propagate(num_generations, population_start = None):
    if population_start is None:
        population = [10, 10, 10, 30]
    else:
        population = population_start
    for gen in range(num_generations):
        yield population
        population = [population[1]*2, population[0], population[1]]
        population.append(sum(population))

def print_propagation(num_generations, population_start = None):
    print('GENERATION\tJUVENILES\tADULTS\tSENILES\t\tTOTAL')
    for gen, pops in enumerate(propagate(num_generations, population_start)):
        print('{:^10}\t{:^8}\t{:^6}\t{:^7}\t\t{:^5}'.format(gen, *pops))
</code></pre>
<p>You can use the above functions like so:</p>
<pre><code>&gt;&gt;&gt; list(propagate(6))
[[10, 10, 10, 30],
 [20, 10, 10, 40],
 [20, 20, 10, 50],
 [40, 20, 20, 80],
 [40, 40, 20, 100],
 [80, 40, 40, 160]]

&gt;&gt;&gt; print_propagation(6)
GENERATION      JUVENILES       ADULTS  SENILES         TOTAL
    0              10             10      10             30  
    1              20             10      10             40  
    2              20             20      10             50  
    3              40             20      20             80  
    4              40             40      20             100 
    5              80             40      40             160 
</code></pre>
</div>
<span class="comment-copy">Thank you very much!! Just so I can better understand what is going on please could you explain what -  '{:^10}\t{:^8}\t{:^6}\t{:^7}\t\t{:^5} - does?</span>
<span class="comment-copy">See the Python Format Specification Mini Language documentation (link above).  Each set of braces (the <code>{}</code>s) will include the unpacked arguments from the <code>.format</code> method call, and the <code>^10</code> strings indicate that each value will be center aligned within that field in the string.</span>
