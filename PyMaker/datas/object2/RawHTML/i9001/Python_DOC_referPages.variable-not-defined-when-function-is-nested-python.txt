<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/291978/short-description-of-the-scoping-rules">Short description of the scoping rules?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I am a history student who was challenged to make this program so please assume I have little knowledge of coding.</p>
<p>I thought my program was approaching completion but am getting an error that the variables inside the roll function are not defined. However, when I run the roll function on its own there is no problem. I'm sure this is a simple mistake but, would like to know how to correct it, and why. (learning things is cool)</p>
<pre><code>import random

def roll():
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)          
    r =  die1 + die2
return r

def Turn():
    pScore = 0
    cScore = 0
    turn = True
    while turn == True:
        pChoice = str(input("Would you like to roll? Type yes or no."))
        if pChoice == "yes":
            roll()
            if r == 2:
                turn = False
                pScore = 0
                print("You have rolled snake eyes. Your turn is over and         your score is 0.")
            elif die1 == 1 or die2 == 1:
                turn = False
                pScore += r
                print("You rolled {}, {} and your score is {}. your turn is     over".format(die1, die2, pScore))
            else :
                turn = True
                pScore += r
            print("You rolled {}, {} and your score is {}".format(die1, die2, pScore))
        if pChoice == "no":
            turn = False
            print("You have chosen not to roll. Your score is {}.".format(pScore))

    while turn == False:
        roll()
        if r == 2:
            turn = True
            cScore = 0
            print("The computer has rolled snake eyes. It's turn is over")
        elif die1 == 1 or die2 == 1:
            turn = true
            print("The computer {}, {} and its score is {}. Its turn is over".format(die1, die2, cScore))
        else:
            turn = False
            pScore =+ r
            print("The computer {}, {} and its score is {}.".format(die1, die2, cScore))

def main():
    pScore = 0
    cScore = 0
    while pScore &lt;100 and cScore &lt;100:
        Turn()
    if pScore &gt;= 100:
        print("Your score is {} you win!".format(pScore))    
        return
    elif cScore &gt;= 100:
        print("The computer score is {} you lose!".format(cScore))
        return
main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <code>Turn</code>, you reference <code>r</code> which is not in scope; see <a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/executionmodel.html</a>. What you want appears to be something like <code>r = roll()</code> rather than just <code>roll()</code>.</p>
<p>Some other things to be aware of:</p>
<ul>
<li>For the same reason as above, <code>pScore</code> and <code>cScore</code> are never actually updated in <code>main</code>; you will want to return those values from <code>Turn</code> so as to be able to use them in <code>main</code>. In particular, the loop appearing in <code>main</code> is infinite.</li>
<li><code>while turn == True</code> could be written simply as <code>while turn</code>. Similarly, <code>while turn != True</code> could be written as <code>while not turn</code>.</li>
<li>Letting <code>turn = True</code> when <code>turn</code> is guaranteed to be <code>True</code> does nothing.</li>
<li>The <code>return</code> statements in <code>main</code> do nothing.</li>
</ul>
</div>
<span class="comment-copy">In the Turn() always do r = roll() and you will be fine, because r inside roll() is a local variable.</span>
<span class="comment-copy">Briefly: functions have their own scope, and returning a variable doesn't automatically save it to the calling scope. You have to save it, with e.g. <code>r = roll()</code>.</span>
<span class="comment-copy">So, now that I have changed <code>roll()</code> to <code>r = roll()</code> this is pulling the value of <code>r</code> from <code>roll()</code> correct? I ask this because now that I have corrected my initial problem I am getting the same error for the dice. To pull the values for the dice would I simply type <code>die1 = roll()</code></span>
<span class="comment-copy">No, when you write <code>anything = roll()</code>, that <code>anything</code> becomes whatever you return from the function. That is, <code>die1 = roll()</code> would become what is called <code>r</code> in the implementation of <code>roll()</code>. In your case, what you might want to do is to look into having multiple return values from the <code>roll</code> function.</span>
<span class="comment-copy">That makes perfect sense and what I had initially thought. Thanks very much for your help.</span>
