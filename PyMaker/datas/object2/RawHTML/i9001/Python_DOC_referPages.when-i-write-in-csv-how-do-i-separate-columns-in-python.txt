<div class="post-text" itemprop="text">
<p>My code is </p>
<pre><code>import pymysql
conn=pymysql.connect(host=.................)
curs=conn.cursor()
 import csv
f=open('./kospilist.csv','r')
data=f.readlines()
data_kp=[]
for i in data:
    data_kp.append(i[:-1])


c = csv.writer(open("./test_b.csv","wb"))

def exportFunc():
    result=[]
    for i in range(0,len(data_kp)):
        xp="select date from " + data_kp[i] + " where price is null"
        curs.execute(xp)
        result= curs.fetchall()

        for row in result:
            c.writerow(data_kp[i])
            c.writerow(row)

        c.writerow('\n')



exportFunc()
</code></pre>
<p>data_kp is reading the tables name
the tables' names are like this (string, ex: a000010)
I collect table names from here.
Then, execute and get the result.</p>
<p><a href="https://i.stack.imgur.com/Lf1hP.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Lf1hP.png"/></a></p>
<p>The actual output of my code is .. 
<a href="https://i.stack.imgur.com/Lf1hP.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2HgvI.png"/></a></p>
<p>My expectation is </p>
<p><a href="https://i.stack.imgur.com/6Ivkv.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/6Ivkv.png"/></a></p>
<p>(not 3 columns.. there are 2000 tables)</p>
<p>I thought my code is near the answer... but it's not working.. 
My work is almost done, but I couldn't finish this part. 
I had googled for almost 10 hours.. 
I don't know how.. please help </p>
<p>I think something is wrong with these part</p>
<pre><code>for row in result:
            c.writerow(data_kp[i])
            c.writerow(row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/csv.html#csv.csvwriter.writerow" rel="nofollow noreferrer"><code>csvwriter.writerow</code></a> method allows you to write a <em>row</em> in your output <code>csv</code> file. This means that once you have called the <code>writerow</code> method, the line is wrote and you can't come back to it. When you write the code:</p>
<pre><code>for row in result:
    c.writerow(data_kp[i])
    c.writerow(row)
</code></pre>
<p>You are saying: </p>
<blockquote>
<p>"For each result, write a line containing <code>data_kp[i]</code> then write a
  line containing <code>row</code>."</p>
</blockquote>
<p>This way, everything will be wrote verticaly with alternation between <code>data_kp[i]</code> and <code>row</code>. </p>
<p>What is surprising is that it is not what we get in your actual output. I think that you've changed something. Something like that:</p>
<pre><code>c.writerow(data_kp[i])
for row in result:
    c.writerow(row)
</code></pre>
<p>But this has not entirely solved your issue, obviously: The names of the tables are not correctly displayed (one character on each column) and they are not side-by-side. So you have 2 problems here:</p>
<p><strong>1. Get the table name in one cell and not splitted</strong></p>
<p>First, let's take a look at the documentation about the <a href="https://docs.python.org/3/library/csv.html#writer-objects" rel="nofollow noreferrer"><code>csvwriter</code></a>:</p>
<blockquote>
<p>A row must be an iterable of strings or numbers for Writer objects </p>
</blockquote>
<p>But your <code>data_kp[i]</code> is a <code>String</code>, not an "iterable of <code>String</code>". This can't work! But you don't get any error either, why? This is because a <code>String</code>, in python, may be itself considered as an iterable of <code>String</code>. Try by yourself:</p>
<pre><code>for char in "abcde":
    print(char)
</code></pre>
<p>And now, you have probably understood what to do in order to make the things work:</p>
<pre><code>#  Give an Iterable containing only data_kp[i]
c.writerow([data_kp[i]])
</code></pre>
<p>You have now your table name displayed in only 1 cell! But we still have an other problem...</p>
<p><strong>2. Get the table names displayed side by side</strong></p>
<p>Here, it is a problem in the logic of your code. You are browsing your table names, writing lines containing them and expect them to be written side-by-side and get columns of dates! </p>
<p>Your code need a little bit of rethinking because <code>csvwriter</code> is not made for writing columns but lines. We'll then use the <code>zip_longest</code> function of the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> module. One can ask why don't I use the <code>zip</code> built-in function of Python: this is because the columns are not said to be of equal size and the <code>zip</code> function will stop once it reached the end of the shortest list!</p>
<pre><code>import itertools

c = csv.writer(open("./test_b.csv","wb"))

# each entry of this list will contain a column for your csv file
data_columns = []

def exportFunc():
    result=[]
    for i in range(0,len(data_kp)):
        xp="select date from " + data_kp[i] + " where price is null"
        curs.execute(xp)
        result= curs.fetchall()

        # each column starts with the name of the table
        data_columns.append([data_kp[i]] + list(result))

    # the * operator explode the list into arguments for the zip function
    ziped_columns = itertools.zip_longest(*data_columns, fillvalue=" ")

    csvwriter.writerows(ziped_columns)
</code></pre>
<p><strong>Note:</strong>
The code provided here has not been tested and may contain bugs. Nevertheless, you should be able (by using the documentation I provided) to fix it in order to make it works! Good luck :)</p>
</div>
<span class="comment-copy">Can you provide an example of the csv row?</span>
<span class="comment-copy">Please show input, expected output and actual output (as csv, not as screen shots!).</span>
<span class="comment-copy">I added the exaple row</span>
<span class="comment-copy">well the actual output as csv is like this</span>
<span class="comment-copy">a,0,0,5,9,3,0 2000-01-04 2000-01-05 2000-01-11 2000-01-12 2000-01-13 2000-01-14 2000-01-17 2000-01-18 2000-01-19 2000-01-20 2000-01-21 2000-01-24</span>
