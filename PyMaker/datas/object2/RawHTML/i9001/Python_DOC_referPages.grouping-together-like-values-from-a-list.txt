<div class="post-text" itemprop="text">
<p>I am in the process of parsing log files I get from my Content Delivery Network. I have gotten to the point where I am able to isolate one part of the log file, which is what IP address accessed our website. What I want to achieve here is a top 10 or so list of IP addresses from a large list of every IP address. Some example data I get when I print the list looks like this:</p>
<pre><code>192.168.1.1
192.168.1.1
192.168.1.1
192.168.1.1
192.168.1.1
192.168.1.2
192.168.1.2
192.168.1.2
192.168.1.2
192.168.1.1
192.168.1.1
192.168.1.1
</code></pre>
<p>These are not the real IP's that I get from the output and there are many more. As you can see though, they are not grouped together. How would I do something like this?</p>
<p>Edit: Here is my code</p>
<pre><code>import gzip
from collections import Counter
logFileName = open('C:\\Users\\Pawlaczykm\\Desktop\\fileNames.txt', 'r')
for line in logFileName.readlines():
    print 'Summary of: ' + line
    # use gzip to decompress the file
    with gzip.open('C:\\Users\\Pawlaczykm\\Desktop\\' + line.rstrip() + '.gz', 'rb') as f:
    for eachLine in f:
        parts = eachLine.split('\t')
        if len(parts) &gt; 1:
            ipAdd = parts[2]
            c = Counter(ipAdd.splitlines())
            print(c.most_common(10))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> for this:</p>
<pre><code>s = """192.168.1.1
192.168.1.1
192.168.1.1
192.168.1.1
192.168.1.1
192.168.1.2
192.168.1.2
192.168.1.2
192.168.1.2
192.168.1.1
192.168.1.1
192.168.1.1"""

from collections import Counter
c = Counter(s.splitlines())
</code></pre>
<p>Now you can get the 10 most common addresses, i.e. the top-10-list:</p>
<pre><code>print(c.most_common(10))
</code></pre>
<p>Output:</p>
<pre><code>[('192.168.1.1', 8), ('192.168.1.2', 4)]
</code></pre>
<p>This is a list with the addresses an their counts. </p>
<p>In your case, you need to give the counter all the addresses:</p>
<pre><code>addresses = []
for eachLine in f:
    parts = eachLine.split('\t')
    if len(parts) &gt; 1:
        ipAdd = parts[2]
        addresses.append(ipAdd.strip())
c = Counter(addresses)
print(c.most_common(10))
</code></pre>
</div>
<span class="comment-copy"><code>sort</code> the list, and use <code>itertools.groupby</code> if you actually want them grouped together</span>
<span class="comment-copy">Something like this: <a href="http://stackoverflow.com/q/5695208">stackoverflow.com/q/5695208</a></span>
<span class="comment-copy">I tried doing this, but all it did was add a 1 at the end of every record. It did not actually group them or count how many there were of each record.</span>
<span class="comment-copy">Are all the records different?</span>
<span class="comment-copy">Some are, but I am getting the exact same output as before I applied what you suggested, except a "1" has been appended to the end of each record.</span>
<span class="comment-copy">Show your code.</span>
<span class="comment-copy">I edited my original post to include my code.</span>
