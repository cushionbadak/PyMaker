<div class="post-text" itemprop="text">
<p>I am writing a django command that takes a bunch of input and processes it.</p>
<p>It seems natural that because of the volume of the data, the input should either come in as a file or as stdin.</p>
<p>I would like to easily test it, and by easily, I mean, without having to create a bunch of files in my test environment.</p>
<p>Now, I remember somewhere (can't find it properly documented, <a href="https://gist.github.com/bmispelon/ad5a2c333443b3a1d051" rel="nofollow noreferrer">but I did find the "PR"</a>), that the "-" is supposed to read from stdin, but I can't get it to work.</p>
<p>It seems the command should do something like this:</p>
<pre><code>class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument("foo", type=file)

    def handle(self, *args, **options):
        file = options["foo"]
        # Then read the file, and process it
</code></pre>
<p>But then when I run the command on the command line, it doesn't like the <code>-</code> parameter (says it isn't a file).</p>
<p>The <a href="https://docs.djangoproject.com/en/1.10/howto/custom-management-commands/#management-commands-output.admonition.note" rel="nofollow noreferrer">command docs</a> recommend writing to <code>self.stdout</code> for better testing. I tried something similar for <code>self.stdin</code> but couldn't get that to work either.</p>
<p>Assuredly this is a common pattern, but I couldn't find any good helps on how to do this best. It seems like "There should be one-- and preferably only one --obvious way to do it.", but I can't find it. Is there something I'm missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Having a look at <a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer">the docs</a> for the <code>type=</code> argument to add_argument, it says "the argparse module provides the factory FileType". </p>
<p>So I did the following and <code>./manage.py test_stdin -</code> then worked as you'd expect.</p>
<pre class="lang-py prettyprint-override"><code>import argparse

class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument("foo", type=argparse.FileType('r'))

    def handle(self, *args, **options):
        input_file = options["foo"]
        while True:
            line = input_file.readline()
            if len(line.strip()) == 0:
                break
            else:
                self.stdout.write("I just read %d chars, line %s" % (len(line),line))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Django command argument parser is a wrapping of <a href="https://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer">argparse</a> module. According to this post: <a href="https://stackoverflow.com/questions/7576525/optional-stdin-in-python-with-argparse">Optional stdin in Python with argparse</a>, you can define an argument to accept <code>stdin</code> or a actual file as an input.</p>
<p>Sample command for your reference:</p>
<h3>management/commands/stdintest.py</h3>
<pre><code>from django.core.management.base import BaseCommand
import sys
import argparse


class Command(BaseCommand):
    help = 'Test stdin as input file'

    def add_arguments(self, parser):
        parser.add_argument('foo', nargs='?', type=argparse.FileType('r'), default=sys.stdin)

    def handle(self, *args, **options):
        foo = options.get('foo')
        sys.stdout.write(foo.read())
</code></pre>
<p>You can call the command without specifying the input file, and the command will grab input from stdin</p>
<pre><code>$ python manage.py stdintest
1234
abcd     &lt;- press ctrl+d to end stdin input
1234
abcd
</code></pre>
<p>or specify the <code>foo</code> argument with an actual file</p>
<pre><code>$ echo '12345' &gt; test.txt
$ python manage.py stdintest test.txt
</code></pre>
<p>I am not sure is that what you need. If I have misunderstood, please leave a comment. Hope it would help.</p>
</div>
<span class="comment-copy">I would create a bunch of files as my test fixture, if that solves the problems. I don't think that way is bad</span>
<span class="comment-copy">How did you write the tests? Where is the "-"?</span>
<span class="comment-copy">@Ming I want my tests to be simple, so they'll mostly just be files with just one line in them, even a single word, and that seems annoying to have to go look in the file to see what's inside. A test that passes a single item seems much cleaner.</span>
<span class="comment-copy">@Ming my tests of the "-" were run on the command line (edited question to better reflect that)</span>
<span class="comment-copy">This is great. Thanks. <code>argparse.FileType('r')</code> isn't very intuitive. I was (obviously) hoping for something simpler like <code>file</code>. Thanks.</span>
<span class="comment-copy">It's because <code>file</code> doesn't have special handling for '-', whereas looking at the source for argparse it has a check for <code>if string == '-'</code> and returns stdin if the mode is 'r'. Makes sense when you realise '-' is a convention in executable args and not elsewhere. But thanks for the accept, was fun working this out.</span>
<span class="comment-copy">This is very helpful, thanks, but the other answer is slightly more of what I asked for.</span>
