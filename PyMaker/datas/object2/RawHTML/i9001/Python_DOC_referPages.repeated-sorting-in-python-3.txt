<div class="post-text" itemprop="text">
<p>I am trying to understand why using the sorted function on a <code>zip</code> object in python 3 can't be done more than once.  It just returns an empty list the second time.</p>
<pre><code>In [34]: X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"] 
    ...: Y = [ 0, 1, 1, 0, 1, 2, 2, 0, 1]
    ...: yx = zip(Y, X) 
    ...: yx 
    ...: [(0, 'a'), (1, 'b'), (1, 'c'), (0, 'd'), (1, 'e'), (2, 'f'), (2, 'g'), 
    ...: (0, 'h'), (1, 'i')] 
    ...: yx_sorted=sorted(yx)
    ...: 

In [35]: yx_sorted
Out[35]: 
[(0, 'a'),
 (0, 'd'),
 (0, 'h'),
 (1, 'b'),
 (1, 'c'),
 (1, 'e'),
 (1, 'i'),
 (2, 'f'),
 (2, 'g')]

In [36]: yx_sorted=sorted(yx)

In [37]: yx_sorted
Out[37]: []

In [38]: yx
Out[38]: &lt;zip at 0x10476aa88&gt;
</code></pre>
<p><code>yx</code> is still there as far as I can see.</p>
</div>
<div class="post-text" itemprop="text">
<p>In CPython 3, zip is a class, which means it is a callable, which means it is a function in the wide, mathematical sense of the term.  It is documented in the <code>Built-in Functions</code> chapter of the <code>Library Manual</code>.</p>
<p>When called, CPython's <code>zip</code> returns a <code>zip object</code>, which is an iterator as the document entry says ("returns an iterator").  It has an <code>__iter__</code> method that returns <code>self</code> and a <code>__next__</code> method with the appropriate behavior.  Since a zip object is an iterator, it is exhausted after the first complete iteration performed by <code>sorted</code>.</p>
<p>In the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">doc entry</a>, the roughly equivalent Python code is for a generator function, which when called returns a generator.  (Since CPython built-in functions are coded in C, and generator functions can only be coded in Python, CPython implements it as a class.) This is why people somewhat mistakenly say that zip returns a generator.  However, since the generator produced by the equivalent code is only usable as an iterator, the effect would be the same, and "returns an iterator" would still be true.  If any implementation (other than CPython) uses the Python code (PyPy?), then for that implementation, <code>zip</code> would be a generator.</p>
<p>EDIT: Add link to doc entry, and the following:</p>
<p>Since X and Y in the question are reiterable, <code>zip(X, Y)</code> can be repeated to get a new, fresh iterable with the same sequence of pairs.  <code>sorted(zip(X,Y))</code> <em>will</em> work multiple times.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>zip</code> is a generator in Python 3. Once you've iterated it once, it's exhausted.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm unable to replicate this in the shell using 2.7.13</p>
<pre><code>&gt;&gt;&gt; X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
&gt;&gt;&gt; Y = [ 0, 1, 1, 0, 1, 2, 2, 0, 1]
&gt;&gt;&gt; yx = zip(X, Y)
&gt;&gt;&gt; yx
[('a', 0), ('b', 1), ('c', 1), ('d', 0), ('e', 1), ('f', 2), ('g', 2), ('h', 0), ('i', 1)]
&gt;&gt;&gt; yx_sorted = sorted(yx)
&gt;&gt;&gt; yx_sorted
[('a', 0), ('b', 1), ('c', 1), ('d', 0), ('e', 1), ('f', 2), ('g', 2), ('h', 0), ('i', 1)]
&gt;&gt;&gt; yx
[('a', 0), ('b', 1), ('c', 1), ('d', 0), ('e', 1), ('f', 2), ('g', 2), ('h', 0), ('i', 1)]
&gt;&gt;&gt; yx_sorted = sorted(yx)
&gt;&gt;&gt; yx_sorted
[('a', 0), ('b', 1), ('c', 1), ('d', 0), ('e', 1), ('f', 2), ('g', 2), ('h', 0), ('i', 1)]
&gt;&gt;&gt; yx
[('a', 0), ('b', 1), ('c', 1), ('d', 0), ('e', 1), ('f', 2), ('g', 2), ('h', 0), ('i', 1)]
&gt;&gt;&gt; 
</code></pre>
<p>Are you using a Jupyter notebook? Perhaps it's something to do with that, and not Python itself?</p>
</div>
<span class="comment-copy">@StefanPochmann Agreed, and done.</span>
<span class="comment-copy">Thanks for this!  Now to explain this to undergrad beginners. :D</span>
<span class="comment-copy">I don't think it is (or returns) a generator...</span>
<span class="comment-copy"><code>zip</code> is a function, but it <i>returns</i> a generator in Python 3. In Python 2 it returns a list.</span>
<span class="comment-copy">@Bendik I don't think it's a function, either. And I still don't think it returns a generator. It is a type and it returns an iterator, I think that's about as much as one can/should say.</span>
<span class="comment-copy">zip gives a generator in python 3, in python 2 it gives a list.</span>
<span class="comment-copy">You're right. When running in Python3 printing yx gives me a 'zip object'. How did OP get it to return the zipped list?</span>
