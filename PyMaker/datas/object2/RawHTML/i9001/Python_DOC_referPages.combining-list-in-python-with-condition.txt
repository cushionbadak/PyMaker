<div class="post-text" itemprop="text">
<p>I have two lists as shown below:</p>
<pre><code>  user_list = ['oshamir','oshamir','oshamir','ctmuser','ctmuser','root','root','root']

  num_list =  ['400','700','600','300','500','1000','400','2000']
</code></pre>
<p>I would like to combine a list with the condition that will take the max num for each user so finally I will get this list</p>
<pre><code>[['oshamir','700'],['ctmuser','500'],['root','2000']]
</code></pre>
<p>any suggestions?</p>
<p>TNX</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>zip</code> to pair the lists up, then group pairs by user and from each group pick the one with max value:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; user_list = ['oshamir','oshamir','oshamir','ctmuser','ctmuser','root','root','root']
&gt;&gt;&gt; num_list =  ['400','700','600','300','500','1000','400','2000']
&gt;&gt;&gt; [max(g, key=lambda x: int(x[1])) for _, g in groupby(zip(user_list, num_list), lambda x: x[0])]
[('oshamir', '700'), ('ctmuser', '500'), ('root', '2000')]
</code></pre>
<p>In above <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> returns iterable of <code>(user, num)</code> tuples:</p>
<pre><code>&gt;&gt;&gt; pairs = list(zip(user_list, num_list))
&gt;&gt;&gt; pairs
[('oshamir', '400'), ('oshamir', '700'), ('oshamir', '600'), ('ctmuser', '300'), ('ctmuser', '500'), ('root', '1000'), ('root', '400'), ('root', '2000')]
</code></pre>
<p>Then <a href="https://docs.python.org/3.6/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> is used to group the items based on the first item in each tuple:</p>
<pre><code>&gt;&gt;&gt; groups = [list(g) for _, g in groupby(pairs, lambda x: x[0])]
&gt;&gt;&gt; groups
[[('oshamir', '400'), ('oshamir', '700'), ('oshamir', '600')], [('ctmuser', '300'), ('ctmuser', '500')], [('root', '1000'), ('root', '400'), ('root', '2000')]]
</code></pre>
<p>Finally <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> with <code>key</code> function is used to pick the pair with maximum value. Note that the items on <code>num_list</code> are strings so they need to be converted to numbers so that we pick <code>'2000'</code> instead of <code>'400'</code>:</p>
<pre><code>&gt;&gt;&gt; [max(g, key=lambda x: int(x[1])) for g in groups]
[('oshamir', '700'), ('ctmuser', '500'), ('root', '2000')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If order matters, you can use an <code>OrderedDict</code>, otherwise, a normal <code>dict</code> will do. But basically, use one pass to make a mapping from user to num, keeping the larger value each time. Then, another pass to get the data-structure you want.</p>
<pre><code>&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; for user, num in zip(user_list, num_list):
...     d[user] = max(d.get(user, float('-inf')), int(num))
...
&gt;&gt;&gt; [[k,v] for k,v in d.items()]
[['oshamir', 700], ['ctmuser', 500], ['root', 2000]]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The sorting that you require needs numbers not strings. A different result is returned when sorting the numbers as strings.</p>
<pre><code>res = list(zip(user_list, map(int, num_list)))  # [('oshamir', 400), ('oshamir', 700), ('oshamir', 600), ('ctmuser', 300), ('ctmuser', 500), ('root', 1000), ('root', 400), ('root', 2000)]
res.sort(key=lambda x: (x[0], x[1]))            # [('ctmuser', 300), ('ctmuser', 500), ('oshamir', 400), ('oshamir', 600), ('oshamir', 700), ('root', 400), ('root', 1000), ('root', 2000)]
final = {k:str(v) for k,v in res}               # {'ctmuser': '500', 'root': '2000', 'oshamir': '700'}
</code></pre>
<p>So I would convert to numbers, sort and get the max and finally switch back to strings.</p>
<p>if you explicitly require a list of lists as the output you can add a list comprehension on top like so:</p>
<pre><code>final = [[a, b] for a, b in final.items()]      # [['ctmuser', '500'], ['root', '2000'], ['oshamir', '700']]
</code></pre>
</div>
<span class="comment-copy">Could you please clarify your question. What does "the max num for each user" mean?</span>
<span class="comment-copy">Is the user list always sorted by the user name? Does the order of <code>user_list</code> need to be preserved in the result?</span>
<span class="comment-copy">First change the strings to numbers in the <code>num_list</code>. Second combine the data: <code>combined = list(zip(user_list, num_list))</code>. Then keep working. (Hint: <code>data = dict(sorted(combined))</code> could be the next step).</span>
<span class="comment-copy">works awesome!!!!</span>
