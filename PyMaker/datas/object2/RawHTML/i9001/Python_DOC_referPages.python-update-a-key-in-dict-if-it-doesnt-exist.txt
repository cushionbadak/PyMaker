<div class="post-text" itemprop="text">
<p>I want to insert a key-value pair into dict if key not in dict.keys().
Basically I could do it with:</p>
<pre><code>if key not in d.keys():
    d[key] = value
</code></pre>
<p>But is there a better way? Or what's the pythonic solution to this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You do not need to call <code>d.keys()</code>, so</p>
<pre><code>if key not in d:
    d[key] = value
</code></pre>
<p>is enough. There is no clearer, more readable method.</p>
<p>You could update again with <code>dict.get()</code>, which would return an existing value if the key is already present:</p>
<pre><code>d[key] = d.get(key, value)
</code></pre>
<p>but I strongly recommend against this; this is code golfing, hindering maintenance and readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="noreferrer"><code>dict.setdefault()</code></a>:</p>
<pre><code>&gt;&gt;&gt; d = {1: 'one'}
&gt;&gt;&gt; d.setdefault(1, '1')
'one'
&gt;&gt;&gt; d    # d has not changed because the key already existed
{1: 'one'}
&gt;&gt;&gt; d.setdefault(2, 'two')
'two'
&gt;&gt;&gt; d
{1: 'one', 2: 'two'}
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15965146/set-a-value-in-a-dict-only-if-the-value-is-not-already-set">Set a value in a dict only if the value is not already set</a></span>
<span class="comment-copy">You could also mention that .keys() iterates through the keys == O(keys), while not/in is a direct lookup = O(1).</span>
<span class="comment-copy">@user117529: it doesnâ€™t. Not in Python 3. But it does create a dict view object which is unnecessary.</span>
<span class="comment-copy">@user117529: as for Python 2, yes, there a list of keys is created and containment testing takes O(n) time. But Python 2 reaches EOL in 9 months time anyway.</span>
<span class="comment-copy"><code>dict.setdefault()</code> should really only be used when trying to access the value too.</span>
<span class="comment-copy">@MartijnPieters: why does that matter? The name <code>setdefault()</code> clearly describes what is happening - that it also returns a value is not that important, and a little quirky IMO. Could you provide a quick explanation, or a link to one, as to why this is not desirable?</span>
<span class="comment-copy">You'd use it in an expression that expects a value to exist, like in a grouping loop: <code>for obj in iterable: d.setdefault(key_for_obj(obj), []).append(obj)</code>. There is nothing quirky about the value being returned, <i>that's the whole point of the method</i>.</span>
<span class="comment-copy">Also, it obscures what you are trying to do, which is to set a key only if it is not already present. Readability counts, just use a <code>if key not in d:</code> test.</span>
<span class="comment-copy">@MartijnPieters: Thanks for the explanation. Having read the docstring, <code>setdefault()</code> does seem to be geared to what you have said. Using a <code>defaultdict(list)</code> would result in more readable code than your example... so perhaps there is no use for it unless one must work with standard dictionaries. Overall, <code>if key not in d</code> is clearer.</span>
