<div class="post-text" itemprop="text">
<p>I've been working on a scraper to get large amounts of HTML and images from a website. I've got the scraper working, but the directory fills massively, making it hard to navigate. How would I go about saving it to a subdirectory?
The part that saves the HTML:</p>
<pre><code>t = open(str(current)+".html", 'w+')
t.write(b)
t.close()
</code></pre>
<p>And the part that saves the image:</p>
<pre><code>urllib.request.urlretrieve(img, page+".gif")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're only showing us a portion of your code which is unhelpful, with that said writing to a subdirectory is simple but first requires the creation of one. For now, I can only give you a few basic examples because I don't know what the rest of your code looks like, hope something here helps!</p>
<pre><code>def create_folder(self, path):
        try:
            if os.path.isdir(path):
                print("Error: The directory you're attempting to create already exists") # or just pass
            else:
                os.makedirs(path)
        except IOError as exception:
            raise IOError('%s: %s' % (path, exception.strerror))
        return None
</code></pre>
<p>or even easier</p>
<pre><code>os.makedirs("C:\\Example Folder\\")
</code></pre>
<p>or in the case of Linux</p>
<pre><code>os.makedirs('/home/' + os.getlogin() + '/Example Folder/')
</code></pre>
<p>Then just write to it like you normally would, as in just supply the path to the subdirectory.</p>
<pre><code>def write(self, path, text):
        try:
            if os.path.isfile(path):
                return None # or print and error, or pass etc...
            else:
                with open(path, 'w') as outFile:
                    outFile.write(text)
        except IOError as exception:
            raise IOError("%s: %s" % (path, exception.strerror))

        return None
</code></pre>
<p>in this case, you'd put the path to your subdirectory in the "path" parameter and the variable containing the text in the "text" parameter. You can modify this function to append, write bytes etc.. </p>
<p>Updated information addressing your comments</p>
<p>A really simple way to make small scale python programs "More" cross platform is to just do something like</p>
<pre><code>if sys.platform == 'win32':
    print('This is windows')
elif sys.platform == 'linux2':
    print('This is some form of linux')
</code></pre>
<p>You can add that to check the os and then run your blocks based on the os :)</p>
<p>Yes you're correct that the above write function does overwrite the files, you can append the files (add new text without overwriting the existing text) by changing the 'w' flag to 'a' like so</p>
<pre><code>def append(self, path, text):
        try:
            if os.path.isfile(path):
                with open(path, 'a') as outFile:
                    outFile.write(text)
        except IOError as exception:
            raise IOError('%s: %s' % (path, exception.strerror))
        return None    
</code></pre>
<p>Further updates: </p>
<p>You can remove "self" if you're not working with classes.</p>
<p>Based on your last comment which was " What do I put in self" I really highly suggest you abandon your project temporarily and first learn the basics of python... You can find tutorials all over including in the following places.</p>
<p><a href="https://www.tutorialspoint.com/python/" rel="nofollow noreferrer">https://www.tutorialspoint.com/python/</a></p>
<p><a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/</a></p>
<p>If you're using an older version you can simply change to whichever one you're using on the official site, I wish you the best of luck but unfortunately, I can't help you further without first knowing at least the basics, I'm sorry!</p>
<p>Update: 
This is coming after a long time but I felt obligated to add these to the answer because this post was recently viewed again. </p>
<pre><code>os.mkdir('\path\to\dir')
# is also valid
# Python 3+ use the following 
if sys.platform.startswith('linux'):
    print('This is linux')
    #insert code here. We use .startswith('')
    #becuase the version number was depricated 
elif sys.platform.startswith('win'):
    print('This is windows') 
</code></pre>
</div>
<span class="comment-copy">you might want to show us what you have so far?</span>
<span class="comment-copy">Isn't this as easy as changing the path you save to? What are we missing here?</span>
<span class="comment-copy">I have quite a lot of code, which particular part do you need to see?</span>
<span class="comment-copy">The part that saves something to your current directory.</span>
<span class="comment-copy"><code>t.write</code> does nothing, it does not call the <code>write</code> method, but <code>t.write(b)</code> does.  You should call <code>t.close()</code> to flush the buffers.  Why are you opening the file for both read <i>and</i> write?</span>
<span class="comment-copy">Ah, that looks good. Could I use try/except and use both methods for cross-platform compatibility?</span>
<span class="comment-copy">Yes you can, you could also throw in an easy way to find out which os you're working with to make it even better.</span>
<span class="comment-copy">Your code to write the file seems to rewrite what <code>t.write()</code> would do. Is that correct? If so, how would I use this method to save the images?</span>
<span class="comment-copy">that is correct you'll note I mentioned below that you could modify the code to append the file or write bytes etc.. to modify to append the file you'd simply change the 'w' flag to 'a', I'll put an append example in.</span>
<span class="comment-copy">Sorry, but I don't understand the usage of this function. What value do I pass to <i>self</i>?</span>
