<div class="post-text" itemprop="text">
<p>I am trying to write a test for a class like this:</p>
<pre><code>from public_library import SuperClass
from another_library import Foo


class MyClass(SuperClass):

    def __init__(self):
        # Call super class
        super(MyClass, self).__init__()

        self._foo = Foo(
            name='Some Name',
            thing='Some Thing',
            # self.something is defined in SuperClass.__init__()
            cool=self.something.cool(),
        )
</code></pre>
<p>In my test, I have mocked <code>Foo</code> class and call <code>assert_called_once_with()</code> to make sure <code>self._foo</code> is set up properly. However, I cannot figure out how to get the return value of <code>self.something.cool()</code>.</p>
<p>Sure, I can set the return value to an instance variable under <code>self</code> and use that in my test, but that seems like an ugly solution. Is there a way I can use <code>patch()</code> to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The recommended way to test your logic is to assert the expected result at the end. Given that we don't know your logic, you can expect any value to be returned. When running unit tests you can actually call your function and get a return value. A common example:</p>
<pre><code>def parse_http():
  response = socket.recvfrom(2048) # you don't want to wait for a connection to test your logic, so you mock it, how?
  return response[response.find('\r\n\r\n'):]

@patch('socket', 'recvfrom')
def testParseHttp(socket_recv_from):
  socket_recv_from.return_value = 'HTTP 1.1\r\n\r\nsomeresponse'
  assert parse_http() == 'someresponse'
</code></pre>
<p>Hope this clears up your question as my intention is to explain a mocked returned value and an asserted return value. </p>
<ul>
<li>The code is not tested nor should work, it's just an example</li>
</ul>
</div>
<span class="comment-copy">The mock <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls" rel="nofollow noreferrer">records what it was called with</a>.</span>
<span class="comment-copy">Also <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@user2357112: While <code>mock_calls</code> is quite helpful, I cannot figure out how to patch <code>self.something</code> into a <code>MagicMock</code> object.</span>
<span class="comment-copy">Why do you need to do that? You said you were trying to get the return value of <code>self.something.cool()</code>. Patching <code>self.something</code> would seem to be patching out the very thing you're trying to test.</span>
<span class="comment-copy">If you want that return value, examine what <code>Foo</code> was called with, because <code>Foo</code> recorded that value.</span>
<span class="comment-copy">I want to make sure <code>self._foo</code> is created correctly. Are you suggesting that I <code>patch</code> <code>Foo</code> class and do <code>assert mocked_foo.return_value == self._foo</code>? If so, the test will not catch the bug where <code>name</code> is accidentally changed from <code>Some Name</code> to <code>Same Name</code>.</span>
