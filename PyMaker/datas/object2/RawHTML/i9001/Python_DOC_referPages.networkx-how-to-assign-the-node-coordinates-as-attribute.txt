<div class="post-text" itemprop="text">
<p>In a simple graph like this:</p>
<pre><code>import networkx as nx
import matplotlib.pyplot as plt

G = nx.Graph()
G.add_edge('0','1')
G.add_edge('1','2')
G.add_edge('2','0')
G.add_edge('0','3')
G.add_edge('1','4')
G.add_edge('5','0')

pos={'0':(1,0),'1':(1,1),'2':(2,3),'3':(3,2),'4':(0.76,1.80),'5':(0,2)} #node:(x,y)
nx.draw(G,pos=pos,with_labels=True)
plt.show()
</code></pre>
<p>if I try to assign each node a list of attributes containing the node ID and its <code>(x,y)</code> coordinates like this:</p>
<pre><code>for i,n in enumerate(G.nodes()):
    G.nodes()[i]['weight']=[G.nodes()[i],pos[n]] #List of attributes
</code></pre>
<p>I get the following error:</p>
<pre><code>Traceback (most recent call last):

  File "&lt;ipython-input-47-0f9ca94eeefd&gt;", line 2, in &lt;module&gt;
    G.nodes()[i]['weight']=[G.nodes()[i],pos[n]] 

TypeError: 'str' object does not support item assignment
</code></pre>
<p>What is wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>After a bit of research I've figured out that the answer is in <code>nx.set_node_attributes()</code>.</p>
<p>It is of course possible to assign the node positions as attributes:</p>
<pre><code>pos={'0':(1,0),'1':(1,1),'2':(2,3),'3':(3,2),'4':(0.76,1.80),'5':(0,2)}    
nx.set_node_attributes(G, 'coord', pos)
</code></pre>
<p>which results in</p>
<pre><code>In[1]: G.nodes(data=True)
Out[1]:
[('1', {'coord': (1, 1)}), #each node has its own position
 ('0', {'coord': (1, 0)}),
 ('3', {'coord': (3, 2)}),
 ('2', {'coord': (2, 3)}),
 ('5', {'coord': (0, 2)}),
 ('4', {'coord': (0.76, 1.8)})]
</code></pre>
<p>and it is also possible to attach multiple attributes using dedicated dictionaries (in this case <code>test</code>) that don't have to have the same number of elements as the nodes in <code>G</code> (e.g., there can be nodes <em>without</em> attributes):</p>
<pre><code>test={'0':55,'1':43,'2':17,'3':86,'4':2} #node '5' is missing
nx.set_node_attributes(G, 'test', test)
</code></pre>
<p>which results in</p>
<pre><code>In[2]: G.nodes(data=True)
Out[2]:
[('1', {'coord': (1, 1), 'test': 43}),
 ('0', {'coord': (1, 0), 'test': 55}),
 ('3', {'coord': (3, 2), 'test': 86}),
 ('2', {'coord': (2, 3), 'test': 17}),
 ('5', {'coord': (0, 2)}),
 ('4', {'coord': (0.76, 1.8), 'test': 2})]
</code></pre>
<p>I am speculating that the same is possible with the graph edges, using <a href="https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.classes.function.set_edge_attributes.html" rel="nofollow noreferrer"><code>nx.set_edge_attributes()</code></a>.</p>
</div>
<span class="comment-copy">How to know the node coordinates created by it and save to be used within another graph later?</span>
<span class="comment-copy">@Sigur the node coordinates in this example were made up. This depends on the problem you are trying to solve, but you can assign the nodes the coordinates you want - you decide! These can be stored in a dictionary which can then be saved as a <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a>. This allows you to import and unpack your pickle, so you can use it with another graph later. I hope this helps. If you have a more specific problem, please ask a new question with all the details.</span>
<span class="comment-copy">Let me search a little about it. More or less what I want is a sequence of graphs with same vertex set but edges appearing according to some parameter. But the vertex set position is created at first by some layout and then for other graphs I'd like to use the same. But every time I run the code, the graph changes!</span>
<span class="comment-copy">@Sigur "every time I run the code, the graph changes" -&gt; it looks like there are random seeds involved. The seed, if unspecified, changes at every iteration. You can define a specific seed at the beginning of your script, so you will reproduce the same graph. What kind of graph-generating function are you using? 1/2</span>
<span class="comment-copy">I'll do. Thanks.</span>
