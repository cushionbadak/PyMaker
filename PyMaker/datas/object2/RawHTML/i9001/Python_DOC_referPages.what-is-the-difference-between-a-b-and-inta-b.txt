<div class="post-text" itemprop="text">
<p>They seem to be equal for small numbers but different for larger. </p>
<p>For example:</p>
<pre><code>a = int(1267650600228229401496703205376/10)
b = 1267650600228229401496703205376 // 10
print(a - b) # prints 7036874417767

a = int(1493845793475/10)
b = 1493845793475 // 10
print(a - b) # prints 0
</code></pre>
<p>How come?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 <code>/</code> performs float division, which has 53 bits of precision; <code>//</code> does floor division, which has no precision limit when both operands are integers (apart from limitations imposed by available RAM).</p>
<p>You can get the Python 3 behaviour in Python 2 by using the <code>true_division</code> <code>__future__</code> import. </p>
</div>
<div class="post-text" itemprop="text">
<p>As @khelwood explained, in Python 3, <code>a/b</code> performs float division. Try typing <code>1/2</code> into an interpreter -- you'll get <code>0.5</code>, not <code>0</code>.</p>
<p>So in your example, <code>1267650600228229401496703205376 / 10</code> in reality is equal to <code>126765060022822940149670320537.6 = 1.267650600228229401496703205376e+29</code> (floating point division), but due to the inaccuracy of floats, Python evaluates it as <code>1.2676506002282295e+29</code>, so you've lost precision, which accounts for the difference.</p>
<p>See <a href="https://docs.python.org/3/whatsnew/2.2.html#pep-238-changing-the-division-operator" rel="nofollow noreferrer">PEP 238</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Complementing the existing answers it seems worthwile mentioning that you needn't go that far out to observe a difference:</p>
<pre><code>&gt;&gt;&gt; -1//2
-1
&gt;&gt;&gt; int(-1/2)
0
</code></pre>
</div>
<span class="comment-copy"><code>int(a/b)</code> is truncated towards zero.</span>
<span class="comment-copy">In Python3, <code>a/b</code> will perform float division, which is inexact. Even if you cast the result to an <code>int</code>, you have already introduced inexactness.</span>
<span class="comment-copy">This works only for Python 3. For Python 2 it gives 0 in both cases.</span>
<span class="comment-copy"><a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">Why float arithmetic is hard</a></span>
<span class="comment-copy">True, but that difference is due to a completely different factor -- that <code>//</code> uses floor division. The issue the OP was asking about is due to float imprecision.</span>
<span class="comment-copy">@B.Eckles Well, I said 'complementing'; and it certainly should be part of the answer since the headline question is "What is the difference between a//b and int(a/b)?"</span>
<span class="comment-copy">True dat. Point taken. :-)</span>
