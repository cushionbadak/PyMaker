<div class="post-text" itemprop="text">
<p>I want to have code that does something like this</p>
<pre><code>class myClass():

    def __init__(self):
        self.__var1 = 'var1'

    var2 = 'var2'

    def myNormalMethod(self):
        print self.__var1

    @classmethod
    def myClassMethod(cls):
       print cls.__var2

    #How do I do this?
    def myMethod():
        print self.__var1
        print cls.__var2
</code></pre>
<p>Right now the final method does not work as I do not know how I can have access to both self and cls. How do I implement this?</p>
</div>
<div class="post-text" itemprop="text">
<p>As a <em>very</em> brief review, <code>self</code> refers to a current instance of the class while <code>cls</code> variables are attached to the class itelf i.e., shared among every instance. Here are some references to help with this, and how I got to your solution:</p>
<ul>
<li><a href="https://stackoverflow.com/a/25577642/5557662">https://stackoverflow.com/a/25577642/5557662</a></li>
<li><a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python datamodel docs</a></li>
</ul>
<p>I modified your sample code to illustrate the difference and included a solution:</p>
<pre><code>class MyClass:
    __var2 = 'var2'
    var3 = 'var3'

    def __init__(self):
        self.__var1 = 'var1'

    def normal_method(self):
        print self.__var1

    @classmethod
    def class_method(cls):
       print cls.__var2

    def my_method(self):
        print self.__var1
        print self.__var2
        print self.__class__.__var2


if __name__ == '__main__':
    print MyClass.__dict__['var3']

    clzz = MyClass()
    clzz.my_method()
</code></pre>
<p><code>__var2</code> and <code>var3</code> are variables saved to the class. You can access any class variable without an instance via <code>__dict__</code> which represents the name space.</p>
<p>Since class variables become a part of every instance, you can just call <code>self</code> to access them. Alternatively, you can explicitly call <code>self.__class__.__var2</code> to make it clear where the intended variable is actually stored.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just do <code>self.__var2</code> - any attributes not found on the instance will be automatically looked up in the class.</p>
<p>To make it explicit that you're expecting the attribute to come from the class itself, use <code>self.__class__.__var2</code>.</p>
</div>
<span class="comment-copy"><code>myMethod()</code> should be declared as <code>myMethod(self)</code>, so it has access to <code>self</code> as a parameter. (Like <code>myNormalMethod(self)</code>, above.) You can get <code>self</code>'s class using <code>type(self)</code>.</span>
