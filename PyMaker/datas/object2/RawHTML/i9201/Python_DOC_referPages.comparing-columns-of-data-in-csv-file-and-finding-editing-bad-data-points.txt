<div class="post-text" itemprop="text">
<p>I am working on a code to perform some data analysis.  I would like to compare the numbers in the columns of data.</p>
<p>The constraint I would like to use is if the column with "POA"  is &gt; 900 then the columns A401 A402 AND A403 must be &gt; 7.  If this condition isn't met I would like to do something with the data so it can easily be found.  Also don't want to include the VT column in the test condition.</p>
<p>Would really appreciate some help if someone can point me in the right direction.</p>
<p><strong>sample of data I am inputting as .CSV</strong></p>
<pre class="lang-none prettyprint-override"><code>DateTime       A0401    A0402   A0403   VT      POA
11/1/2014 0:00  1.12    0.96    1.11    4.06    50.00
11/1/2014 0:01  1.12    0.95    1.11    4.06    50.00
11/1/2014 0:02  1.12    0.95    1.11    4.06    100.00
11/1/2014 0:03  1.12    0.95    1.11    4.06    300.00
11/1/2014 0:04  1.12    0.96    1.11    4.06    901.00
11/1/2014 0:05  1.12    0.95    1.11    4.06    40.00
11/1/2014 0:06  1.12    0.95    1.11    4.06    0.00
11/1/2014 0:07  1.12    0.96    1.11    4.06    904.00
11/1/2014 0:09  1.12    0.96    1.11    4.06    100.00
11/1/2014 0:10  1.12    0.96    1.11    3.93    150.00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's say you have a file <code>data.csv</code> with the contents:</p>
<pre><code>DateTime       A0401    A0402   A0403   VT      POA
11/1/2014 0:00  1.12    0.96    1.11    4.06    50.00
11/1/2014 0:01  1.12    0.95    1.11    4.06    50.00
11/1/2014 0:02  1.12    0.95    1.11    4.06    100.00
11/1/2014 0:03  1.12    0.95    1.11    4.06    300.00
11/1/2014 0:04  1.12    0.96    1.11    4.06    901.00
11/1/2014 0:05  1.12    0.95    1.11    4.06    40.00
11/1/2014 0:06  1.12    0.95    1.11    4.06    0.00
11/1/2014 0:07  1.12    0.96    1.11    4.06    904.00
11/1/2014 0:09  1.12    0.96    1.11    4.06    100.00
11/1/2014 0:10  1.12    0.96    1.11    3.93    150.00
</code></pre>
<p>Then you can process it with Python like this:</p>
<pre><code># Open the file 
with open('data.csv', 'r') as f:
    # Split each line into row "cells"
    rows = [row.split('\t') for row in f]
    # Keep only non-empty strings (not "falsy") and remove extra spaces (strip)
    rows = [[cell.strip() for cell in row if cell] for row in rows]

def isValidRow(row):
    return float(row[5]) &lt;= 900 or all(float(val) &gt; 7 for val in row[1:4])

header, rows = rows[0], rows[1:]
validRows = list(map(isValidRow, rows))

# Write output
with open('output.csv', 'w') as f:
    f.write('\t'.join(header + ['IsValid']) + '\n')
    for row, valid in zip(rows, validRows):
        f.write('\t'.join(row + [str(valid)]) + '\n')
</code></pre>
<p>Then <code>output.txt</code> would contain:</p>
<pre><code>DateTime    A0401   A0402   A0403   VT  POA IsValid
11/1/2014 0:00  1.12    0.96    1.11    4.06    50.00   True
11/1/2014 0:01  1.12    0.95    1.11    4.06    50.00   True
11/1/2014 0:02  1.12    0.95    1.11    4.06    100.00  True
11/1/2014 0:03  1.12    0.95    1.11    4.06    300.00  True
11/1/2014 0:04  1.12    0.96    1.11    4.06    901.00  False
11/1/2014 0:05  1.12    0.95    1.11    4.06    40.00   True
11/1/2014 0:06  1.12    0.95    1.11    4.06    0.00    True
11/1/2014 0:07  1.12    0.96    1.11    4.06    904.00  False
11/1/2014 0:09  1.12    0.96    1.11    4.06    100.00  True
11/1/2014 0:10  1.12    0.96    1.11    3.93    150.00  True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/2/library/csv.html</a> to read your CSV data into an iterable object.</p>
<p>I'm guessing that you mean if POA is &gt;900 and A0401, A0402 and A0403 are &gt; 7, otherwise you want to do something else with the data?</p>
<pre class="lang-py prettyprint-override"><code>for row in reader:
    if not (row[5] &gt; 900 and row[1] &gt; 7 and row[2] &gt; 7 and row[3] &gt; 7):
        #do something
</code></pre>
<p>The other meaning of your question could be that if POA is &gt;900 then you want to set A0401, A0402 and A0403 to more than 7, otherwise, you want to do something else.</p>
<p>In which case</p>
<pre><code>for row in reader:
    if row[5] &gt; 900:
        row[1] = 7.1
        row[2] = 7.1
        row[3] = 7.1
    else:
        #do something
</code></pre>
<p>For your do something, I'm not entirely sure what you mean by you want the data to be easily found, but I'll assume that you want to highlight it somehow. If you want it to be easily found you could add another column to your CSV data. Something like, 'flagged', which will be set to 0 by default.</p>
<p>When you find an exception, simply set flagged to 1, then you can look through the data and find all of the rows with flagged set to 1 to find your exceptions.</p>
</div>
<span class="comment-copy">Tip: Use the <a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow noreferrer"><code>csv</code></a> module to read (and update) the file.</span>
<span class="comment-copy">And what have you tried so far?</span>
<span class="comment-copy">Thank you.  Can you explain to me what this line does?                            rows = [[cell.strip() for cell in row.split('  ') if cell] for row in data.split('\n')] header, rows = rows[0], rows[1:]</span>
<span class="comment-copy">@acb Sure, I've edited it so it is more step-by-step with comments</span>
<span class="comment-copy">one last question for you if you dont mind.  If I want to import the data from a csv file instead of setting data = """ .... """ how would I go about doing that.  I am trying to import it using pandas, but I get an error when I try to split the rows.</span>
<span class="comment-copy">@acb I have changed the solution to include file input and output, I hope that helps. My proposed solution is a very simple one that does not require you to install Pandas or any other package, but if you are going to do more advanced data processing in Python maybe Pandas is indeed the right choice.</span>
<span class="comment-copy">when I try that I get an index error saying list index out of range.  I tried changing the return to "return all(float(val) &lt;= 900 for val in row[5:6]) or all(float(val) &gt; 7 for val in row[1:4])" and it works however it is only giving true values.</span>
<span class="comment-copy">Yes I aplogize if that wasn't clear.  Basically what I was trying to say is that if POA is &gt; 900 and A0401, A0402 and A0403 are &lt; 7 then the data point is bad.  Flagging those bad data points is what I want to do.</span>
