<div class="post-text" itemprop="text">
<p>So I looked at various similar problems asked here but so far nothing worked for me.</p>
<p>I have the following file architecture:</p>
<pre><code>\folder
    __init__.py
    supClass.py
    script1.py
    \sub
        __init__.py
        script2.py
</code></pre>
<p>So in script2.py I try to import supClass. If I understood well what I read on related subjects, I have to specify that <code>\folder</code> is part of the PYTHONPATH.</p>
<p>So following examples I read, I ended up with this piece of code :</p>
<pre><code>if __name__ == '__main__' and __package__ is None:
    from os import sys, path
    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

from test_package import supClass

    a = supClass()
    a.print_sup()
</code></pre>
<p>But I get the following error :</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\site-packages\spyderlib\widgets\externalshell\sitecustomize.py", line 685, in runfile
    execfile(filename, namespace)
  File "C:\Python27\lib\site-packages\spyderlib\widgets\externalshell\sitecustomize.py", line 71, in execfile
    exec(compile(scripttext, filename, 'exec'), glob, loc)
  File "C:/Donnees/Programmes_Python/Developpement/Tests/test_package/sub/script.py", line 18, in &lt;module&gt;
    from test_package import supClass
ImportError: No module named test_package
</code></pre>
<p>I checked that \folder is now part of the PYTHONPATH by doing</p>
<pre><code>import sys
print sys.path
</code></pre>
<p>in my console and it's ok. However, the <code>__package__</code> variable stays set to None.</p>
<p>The error I get seems to say that my <code>\folder</code> is not a module. I don't see why, maybe I am confusing things between "package" and "module".</p>
<p>Anyway, if anyone has an idea, it'd be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>The <em>parent</em> of <code>\folder</code> should be on <code>PYTHONPATH</code>. You can then do </p>
<pre><code>from folder import subClass 
</code></pre>
<p>and </p>
<pre><code>from folder.sub import script2
</code></pre>
<p>The reason the <em>parent</em> of <code>folder</code> should be on <code>PYTHONPATH</code> (and not <code>folder</code> itself), is because <code>folder</code> is your package, and to <code>import folder</code> Python needs to look in the directory <em>containing</em> <code>folder</code>. </p>
<p>Note that executing scripts from sub-folders is problematic, but easy if you write a setup.py file. See my answer here stackoverflow.com/a/41201868/75103 for more info.</p>
</div>
<div class="post-text" itemprop="text">
<p>Did you tried to import just supClass?</p>
<pre><code>import supClass
</code></pre>
<p>Or try this:</p>
<pre><code>sys.path.append("../")
import supClass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried to reproduce your hierarchy and this does the trick:</p>
<pre><code>if __name__ == '__main__':
   from os import sys, path
   sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

   from supClass import supClass
   a = supClass()
   a.print_sup()
</code></pre>
</div>
<span class="comment-copy">The <i>parent</i> of <code>\folder</code> should be on <code>PYTHONPATH</code>.  Assuming <code>folder</code> == <code>test_package</code>, you can then do <code>from test_package import subClass</code> and <code>from test_package.sub import script2</code>.  Note that executing scripts from sub-folders is problematic (but easy if you write a <code>setup.py</code> file).  See my answer here <a href="http://stackoverflow.com/a/41201868/75103">stackoverflow.com/a/41201868/75103</a> for more info.</span>
<span class="comment-copy">This works! Thanks! But can you explain why the parent of \folder should be on PYTHONPATH and not just \folder itself?</span>
<span class="comment-copy">Because <code>folder</code> is your <i>package</i>, and to <code>import folder</code> Python needs to look in the directory <i>containing</i> <code>folder</code>.</span>
<span class="comment-copy">Ok I get it now! Can you write an answer so that I can mark it as solved?</span>
<span class="comment-copy">'import supClass' does not work, and I get the 'No module named supClass'  error, which I get as supClass is nor in the same folder as script2, neither part of the PYTHONPATH. The second option leads to the same error. I think it just does the same as my script.</span>
<span class="comment-copy">From wich directory do you execute the python file? Write how do you launch the program.</span>
<span class="comment-copy">I launch the program directly from my IDE, so it should be from the '\sub' directory I guess.</span>
<span class="comment-copy">ok, print(os.getcwd()) to check the directory. (import os #if you need)</span>
<span class="comment-copy">ok I checked and I am indeed in the \sub directory</span>
<span class="comment-copy">Ok I tried that and indeed it works! But I don't get why I cannot import directlty <code>test_package</code>. I would like to import directly <code>test_package</code> so that I could use its <code>__init__.py</code>, which could contain the <code>from supClass import supClass statement</code></span>
<span class="comment-copy"><b>init</b>.py is a package file. Why do you want to call it? Give a look at documentation here: <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#packages</a></span>
<span class="comment-copy">No <code>__init__.py</code> is not the constructor of the supClass() class. supClass has its own constructor (which is a method called <code>__init__</code>) defined. But <code>__init__.py</code> is just the initialisation file required to define the folder as a python package.</span>
<span class="comment-copy">Yes sorry I corrected myself, I was thinking about the init method. My fault.</span>
<span class="comment-copy">I don't call the <code>__init__.py</code> explicitely. I just put inside the from <code>supClass import supClass</code> statement.</span>
