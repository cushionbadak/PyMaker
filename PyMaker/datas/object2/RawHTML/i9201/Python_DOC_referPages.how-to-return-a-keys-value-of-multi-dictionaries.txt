<div class="post-text" itemprop="text">
<p>I have this code</p>
<pre><code>ones = {1 : "I", 2 : "II", 3 : "III", 4 : "IV", 5: "V", 6 : "VI",\
        7 : "VII", 8 : "VIII", 9 : "IX"}
tens = {10 : "X", 20 : "XL", 30 : "XXX", 40 : "XL", 50 : "L",\
        60 : "LX", 70 : "LXX", 80 : "LXXX", 90 : "XC"}
hun = {100 : "C", 200 : "CC", 300 : "CCC"}

ui = input('type a number from 1 to 303: ')
k = ui
print(ones[k])
</code></pre>
<p>I am trying to let a user input a number from 1 to 399.</p>
<p>when I used <code>ones[ui]</code>, I got a </p>
<blockquote>
<p>KeyError '2'</p>
</blockquote>
<p>2 is the number I did input. so, I passed the input of <code>ui</code> to another variable called <code>k</code>, but I got the same problem.</p>
<p>in the live environment of python (idle), when I write <code>ones[2]</code>, I get <code>"II"</code> instead of the error above. </p>
<p>So, what is the problem exactly and how can I solve it?</p>
</div>
<div class="post-text" itemprop="text">
<p>that's because your input is a <code>string</code>, not an <code>int</code> (using python 3), so you're actually doing <code>ones["2"]</code> which fails.</p>
<pre><code>ui = int(input('type a number from 1 to 303: '))
</code></pre>
<p>will fix that.</p>
<p>note that if the user enters "303" you'll also get a key error. So better do <code>print(ones[ui%10])</code> for your example (you also have to check for !=0 since Roman digits don't support it :))</p>
<p>Aside <code>20 : "XL",</code> should be <code>20 : "XX",</code></p>
<p>My fix proposal with full implementation of number build (also works with python 2):</p>
<pre><code>ones = {1 : "I", 2 : "II", 3 : "III", 4 : "IV", 5: "V", 6 : "VI",
        7 : "VII", 8 : "VIII", 9 : "IX",0:""}
tens = {10 : "X", 20 : "XX", 30 : "XXX", 40 : "XL", 50 : "L",
        60 : "LX", 70 : "LXX", 80 : "LXXX", 90 : "XC",0:""}
hun = {100 : "C", 200 : "CC", 300 : "CCC",0:""}

ui = int(input('type a number from 1 to 303: '))
if 0 &lt; ui &lt; 304:
    units = ui%10
    tenths = (ui-units)%100
    hundreds = (ui-tenths-units)

    string = "".join([d[v] for d,v in zip((hun,tens,ones),(hundreds,tenths,units))])
    print(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The documentation for <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> already explains this:</p>
<blockquote>
<p>The function then reads a line from input, <strong>converts it to a string</strong> (stripping a trailing newline), and returns that.</p>
</blockquote>
<p>So your <code>ui</code> is a string but your keys in the dictionary are numbers. So it can't find any match (because <code>2 != '2'</code>) and produces the <code>KeyError</code>.</p>
<p>As already mentioned by @Jean-FrançoisFabre you need to convert it to an integer:</p>
<pre><code>ui = input('type a number from 1 to 303: ')
if len(ui) == 3:
    ones_ui = int(ui[2])
    tens_ui = int(ui[1])
    hund_ui = int(ui[0])
elif len(ui) == 2:
    ones_ui = int(ui[1])
    tens_ui = int(ui[0])
elif len(ui) == 1:
    ones_ui = int(ui[0])
else:
    print('ups')
</code></pre>
<p>Or better reverse the string and then map each digit to an integer:</p>
<pre><code>ui = input('type a number from 1 to 303: ')
nums = list(map(int, ui[::-1]))
</code></pre>
<p>For example with input <code>20</code> this returns <code>[0, 2]</code></p>
<hr/>
<p>If you use indexing then you need to change your dictionaries a bit:</p>
<pre><code>ones = {1 : "I", 2 : "II", 3 : "III", 4 : "IV", 5: "V", 6 : "VI", 7 : "VII", 8 : "VIII", 9 : "IX", 0: ""}
tens = {1 : "X", 2 : "XL", 3 : "XXX", 4 : "XL", 5 : "L", 6 : "LX", 7 : "LXX", 8 : "LXXX", 9 : "XC", 0: ""}
hun  = {1 : "C", 2 : "CC", 3 : "CCC", 0: ""}
</code></pre>
<p>I added the number <code>0</code> to all of them because then you don't need to special case them and you can just go throw these:</p>
<pre><code>print(''.join([dct[val] for val, dct in zip(nums, (ones, tens, hun))][::-1]))
</code></pre>
<p>The <code>[::-1]</code> reverses the resulting string again before joining all parts.</p>
<p>Sample:</p>
<pre><code>type a number from 1 to 303: 10
X

type a number from 1 to 303: 303
CCCIII

type a number from 1 to 303: 158
CLVIII

type a number from 1 to 303: 19
XIX
</code></pre>
<p>The code I used was:</p>
<pre><code>ones = {1 : "I", 2 : "II", 3 : "III", 4 : "IV", 5: "V", 6 : "VI", 7 : "VII", 8 : "VIII", 9 : "IX", 0: ""}
tens = {1 : "X", 2 : "XL", 3 : "XXX", 4 : "XL", 5 : "L", 6 : "LX", 7 : "LXX", 8 : "LXXX", 9 : "XC", 0: ""}
hun  = {1 : "C", 2 : "CC", 3 : "CCC", 0: ""}

ui = input('type a number from 1 to 303: ')
nums = list(map(int, ui[::-1]))
print(''.join([dct[val] for val, dct in zip(nums, (ones, tens, hun))][::-1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>ones = {1 : "I", 2 : "II", 3 : "III", 4 : "IV", 5: "V", 6 : "VI",\
        7 : "VII", 8 : "VIII", 9 : "IX"}
tens = {10 : "X", 20 : "XX", 30 : "XXX", 40 : "XL", 50 : "L",\
        60 : "LX", 70 : "LXX", 80 : "LXXX", 90 : "XC",0:""}
hun = {100 : "C", 200 : "CC", 300 : "CCC",0:""}

MAPPING = {3:[hun,tens,ones],
           2:[tens, ones],
           1:[ones]}

rr = 304
_input = str(input('type a number from 1 to {0}: '.format(rr)))
_out = []

#check range and schema
if 0&lt;int(_input)&lt;rr and MAPPING.has_key(len(_input)):
  for n,sub_dict in enumerate(MAPPING[len(_input)]):
    #ignore zero
    if int(_input[n]):
      # go by mapping values, based on input len
      _out.append([sub_dict[x] for x in sub_dict.keys() if _input[n] in str(x)])

print _out


&gt;&gt;&gt;type a number from 1 to 304:  201
&gt;&gt;&gt;[['CC'], ['I']]

&gt;&gt;&gt;type a number from 1 to 304:  74
&gt;&gt;&gt;[['LXX'], ['IV']]

&gt;&gt;&gt;type a number from 1 to 304:  303
&gt;&gt;&gt;[['CCC'], ['III']]

&gt;&gt;&gt;type a number from 1 to 304:  123
&gt;&gt;&gt;[['C'], ['XX'], ['III']]
</code></pre>
</div>
<span class="comment-copy">Maybe we should adapt the "title" of the question - as it has become misleading, now that the answer guys cleared the fog ;-)</span>
<span class="comment-copy">@Dilettant Done</span>
<span class="comment-copy">You also need to add <code>0: ''</code> for <code>ones</code>, otherwise <code>10</code> doesn't work :-) Also you don't need the backslash for line-breaks in dictionaries.</span>
<span class="comment-copy">you have to check for length before accessing <code>ui[2]</code> or even check if it <i>is</i> an integer. +1 for the indexing though.</span>
<span class="comment-copy">@Jean-FrançoisFabre Thanks again.</span>
<span class="comment-copy">of course there's still the "0" case which is unhandled in roman digits, just being pedantic :)</span>
<span class="comment-copy">wow, that question is a real bugger. :-)</span>
<span class="comment-copy">I love those ones. Sounds innocuous at start and reveal interesting enough, also because there's some history/"science" behind it.</span>
