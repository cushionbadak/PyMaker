<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>It's been a while since I used Python, And this one I really don't get:
- I make a list of strings M1
- I copy it to M2
- Then I change a "e" to "E" using re.sub in M1
- M2 is also changed!</p>
<p>Here's is some code for thos who are interested.  It shows this behaviour on both Anaconda2 and Python 3.6.0.</p>
<pre><code>import re

# Normal operation on single strings
m1 = "Hello."
m2 = m1
m1 = re.sub("e", "E", m1)
print(m1)
print(m2)
print("")

# Normal operation on one list of strings
M = ["Hello.", "Bye-bye!"]
for i in range(len(M)):
    M[i] = re.sub("e", "E", M[i])
print (M)
print("")   

# Unexpected behaviour on a copied list of strings
M1 = ["Hello.", "Bye-bye!"]
M2 = M1
for i in range(len(M1)):
    M1[i] = re.sub("e", "E", M1[i])
print(M1)
print(M2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>m2 = m1</code> makes m2 point to the same object that m1 points to. It's like you're copying a pointer.</p>
<p>If you want to copy the contents, you could do something like <code>m2 = m1[:]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>m2=m1 gives you a shallow copy of m1, which is just a reference.</p>
<p>You need deep copy.</p>
<p>see <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">https://docs.python.org/3/library/copy.html</a></p>
<pre><code>import copy
m1 = "Hello."
m2 = copy.deepCopy(m1)
</code></pre>
</div>
<span class="comment-copy">M2 = M1 does not provide a new string with same content, its just a reference to the old string. Use for example deepcopy()</span>
<span class="comment-copy">Super! I had no idea that Python works with pointers like that.  Time to read some Python theory for me I guess.</span>
