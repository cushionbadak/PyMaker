<div class="post-text" itemprop="text">
<p>I have a file "test.txt". Its data is in the following style:</p>
<pre><code>[(5.0, 1.12, 1, ((False, []), 0.85)), (4.21, 3.2, 2, ((True, []), 0.7997))]\n
</code></pre>
<p>This example only shows the first row in the file, the file has actually 20 rows.</p>
<p>In each row, it starts with "[" and ends with "]" (note that the "\n" is just a new line symbol.).
As you can see, the pattern in each row is "[(  ((  )  ) ), (  ((  )  ) ), ...]". In real case, there are 10000 "(  ((  )  ) )" within one "[ ]".</p>
<p>Do you know how to read this information using python3?</p>
<p>The result I want is</p>
<pre><code>x_row1 = [[5.0, 1.12, 1],
          [4.21, 3.2, 2],
          ...,
         ]  # len(x_row1) == 10000
y_row1 = [[False, []], 0.85],
          [True, []], 0.7997],
          ...,
         ]  # len(y_row1) == 10000

x_row_all = [[x_row1], [x_row2], ..., [x_row20]]
y_row_all = [[y_row1], [y_row2], ..., [y_row20]]
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>:</p>
<blockquote>
<p>Safely evaluate an expression node or a string containing a Python
  literal or container display. The string or node provided <strong>may only
  consist of the following Python literal structures: strings, bytes,
  numbers, tuples, lists, dicts, sets, booleans, and <code>None</code>.</strong></p>
</blockquote>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval('[(5.0, 1.12, 1, ((False, []), 0.85)), (4.21, 3.2, 2, ((True, []), 0.7997))]\n')
[(5.0, 1.12, 1, ((False, []), 0.85)), (4.21, 3.2, 2, ((True, []), 0.7997))]
</code></pre>
<p>For your specific problem:</p>
<pre><code>import ast

with open('test.txt', 'r') as f:
    all_rows = list(map(ast.literal_eval, f))

x_row_all = [[item[:3] for item in row] for row in all_rows]
y_row_all = [[item[-1] for item in row] for row in all_rows]
</code></pre>
<p>If you really need the tuples to become lists do instead:</p>
<pre><code>def detuple(tup):
    return [detuple(x) if isinstance(x, tuple) else x for x in tup]

x_row_all = [[list(item[:3]) for item in row] for row in all_rows]
# tup = ((False, []), 0.85); detuple(tup) =&gt; [[False, []], 0.85]
y_row_all = [[detuple(item[-1]) for item in row] for row in all_rows]
</code></pre>
<p>Alternatively you can have lists from the beginning if you create <code>all_rows</code> as:</p>
<pre><code>all_rows = [ast.literal_eval(line.replace('(', '[').replace(')', ']') for line in f]
</code></pre>
</div>
<span class="comment-copy">It solves my question completely. Thanks!</span>
