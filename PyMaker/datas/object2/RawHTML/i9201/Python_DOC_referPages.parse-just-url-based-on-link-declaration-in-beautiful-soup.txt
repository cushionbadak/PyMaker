<div class="post-text" itemprop="text">
<p>Im trying to ultimately just <code>parse</code> out the <code>url</code> out of a page, if it meets a certain condition where one of the keywords in <code>xx_web_job_alt_keywords</code> is in the text of <code>job.get_text()</code> . </p>
<pre><code>xx_good_jobs = []
xx_web_job_alt_keywords = ['Website']
# &lt;a class="result-title hdrlnk" href="//mywebsite.com/web/123.html" data-id="5966181668"&gt;Print business magazine's website management&lt;/a&gt;
each_job_link_details = soup.find_all('a', class_='result-title hdrlnk')

for job in each_job_link_details:
    if xx_web_job_alt_keywords in job.get_text():
        #append '//mywebsite.com/web/123.html' to list:xx_good_jobs 
        xx_good_jobs.append(xx_web_job_alt_keywords.get('href',None))
</code></pre>
<p>How does this look to you?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import bs4, re
#keywords = ['Website', 'Website', 'business']
html = '''&lt;a class="result-title hdrlnk" href="//mywebsite.com/web/123.html" data-id="5966181668"&gt;Print business magazine's website management&lt;/a&gt;
        &lt;a class="result-title hdrlnk" href="//mywebsite.com/web/123.html" data-id="5966181668"&gt;Print business magazine's website management&lt;/a&gt;
        &lt;a class="result-title hdrlnk" href="//mywebsite.com/web/123.html" data-id="5966181668"&gt;Print business magazine's website management&lt;/a&gt;'''
soup = bs4.BeautifulSoup(html, 'lxml')

keywords = ['Website', 'Website', 'business']
regex = '|'.join(keywords)
for a in soup.find_all('a', class_="result-title hdrlnk", text=re.compile(regex,re.IGNORECASE)):
    print(a.get('href'))
</code></pre>
<p>out:</p>
<pre><code>//mywebsite.com/web/123.html
//mywebsite.com/web/123.html
//mywebsite.com/web/123.html
</code></pre>
<p>EDIT:</p>
<pre><code>keywords = ['Website', 'Website', 'business']

regex = '|'.join(keywords)
</code></pre>
<p>out:</p>
<pre><code>'Website|Website|business'
</code></pre>
<p>just use <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression" rel="nofollow noreferrer">regex</a> and <code>|</code> to match multiple keyword in the a tag.</p>
<p>EDIT2:</p>
<pre><code>keyword_lists = [['Website', 'Website', 'business'], ['Website1', 'Website1', 'business1'], ['Website2', 'Website2', 'business2']]
sum(keyword_lists, [])
</code></pre>
<p>out:</p>
<pre><code>['Website',
 'Website',
 'business',
 'Website1',
 'Website1',
 'business1',
 'Website2',
 'Website2',
 'business2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, you can go with a more explicit approach using a  <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function" rel="nofollow noreferrer">searching function</a>:</p>
<pre><code>xx_web_job_alt_keywords = ['Website']

def desired_links(tag):
    """Filters 'header' links having desired keywords in the text."""

    class_attribute = tag.get('class', [])
    is_header_link = tag.name == 'a' and 'result-title' in class_attribute and 'hdrlnk' in class_attribute

    link_text = tag.get_text()
    has_keywords = any(keyword.lower() in link_text.lower() for keyword in xx_web_job_alt_keywords)

    return is_header_link and has_keywords

xx_good_jobs = [link['href'] for link in soup.find_all(desired_links)]
</code></pre>
<p>Note that we are using <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code> built-in function</a> to check if any of the keywords is in the text. Also, note that we are <em>lowering</em> both the keyword and the text to handle differences in cases.</p>
<p>Demo:</p>
<pre><code>In [1]: from bs4 import BeautifulSoup

In [2]: data = """
   ...:     &lt;div&gt;
   ...:         &lt;a class="result-title hdrlnk" href="//mywebsite.com/web/123.html" data-id="596618166
   ...: 8"&gt;Print business magazine's website management&lt;/a&gt;
   ...:         &lt;a class="result-title hdrlnk" href="//mywebsite.com/web/456.html" data-id="1234"&gt;Som
   ...: e other header link&lt;/a&gt;
   ...:     &lt;/div&gt;"""

In [3]: soup = BeautifulSoup(data, "html.parser")

In [4]: xx_web_job_alt_keywords = ['Website']

In [5]: def desired_links(tag):
   ...:     """Filters 'header' links having desired keywords in the text."""
   ...: 
   ...:     class_attribute = tag.get('class', [])
   ...:     is_header_link = tag.name == 'a' and 'result-title' in class_attribute and 'hdrlnk' in cl
   ...: ass_attribute
   ...: 
   ...:     link_text = tag.get_text()
   ...:     has_keywords = any(keyword.lower() in link_text.lower() for keyword in xx_web_job_alt_key
   ...: words)
   ...: 
   ...:     return is_header_link and has_keywords
   ...: 

In [6]: xx_good_jobs = [link['href'] for link in soup.find_all(desired_links)]

In [7]: xx_good_jobs
Out[7]: [u'//mywebsite.com/web/123.html']
</code></pre>
</div>
<span class="comment-copy">What is the actual problem? All these xx_es hurt my eyes =(</span>
<span class="comment-copy">I had mentioned: Im looking to get a bunch of links from this site with characteristics of links <code>a</code>, with class <code>result-title hdrlnk</code>. Then look at just the <code>text</code> of the link e.g. <code>&lt;a somelink attributes&gt;TEXT&lt;/a&gt; if it contains any word from </code>xx_web_job_alt_keywords` then put it in a list named: <code>xx_good_jobs</code></span>
<span class="comment-copy">Lets just say there are more than a few keywords, could you use a list here? Maybe you could show that?</span>
<span class="comment-copy">@Jshee sure, you can join the list of keywords into a regex string: <code>'|'.join(xx_web_job_alt_keywords)</code>.</span>
<span class="comment-copy">Can you add that to your solution please? I really like your elegant solution</span>
<span class="comment-copy">@Jshee <code>join</code> the list and put it in the <code>re.compile()</code></span>
<span class="comment-copy">Im a bit confused where I should add them in <code>re.compile</code></span>
