<div class="post-text" itemprop="text">
<p>I am a Python and general programming noob. Only been programing for about 2 weeks. I have I quick question regarding functions in python.
Can someone explain to why this works:</p>
<pre><code>import random
valuea = valueb = valuec = "0"
stationary = "X"
def func1():
    print("",valuea,"\n",valueb,"\n",valuec)
    return
random.seed(0)
random_list = ("valuea","valueb","valuec")
random_result = random.choice(random_list)
locals()[random_result] = stationary
func1()
</code></pre>
<p>Result:</p>
<pre><code> 0 
 X 
 0
</code></pre>
<p>But this, however, does not work:</p>
<pre><code>def func1():
    import random
    valuea = valueb = valuec = "0"
    stationary = "X"
    def func2():
        print("",valuea,"\n",valueb,"\n",valuec)
        return
    random.seed(0)
    random_list = ("valuea","valueb","valuec")
    random_result = random.choice(random_list)
    locals()[random_result] = stationary
    func2()
    return
func1()
</code></pre>
<p>Result:</p>
<pre><code> 0 
 0 
 0
</code></pre>
<p>Is there a way to make it work in the second situation, being nestled inside function?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's look at a more simplistic example:</p>
<pre><code>def func1():
    a = 0
    def func2():
        print(a)
    locals()['a'] = 1
    print(a)
    func2()

func1()
print(a)
</code></pre>
<p>This outputs</p>
<pre><code>0
0
1
</code></pre>
<p>i.e. the variable <code>a</code> local to both functions is not modified. Looking at the documentation of <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer"><code>locals</code></a> one can find that "... changes may not affect the values of local and free variables used by the interpreter." Thus using it to change the value of local variables may or may not work ...</p>
<p><strong>Instead</strong> I'd suggest to use a dictionary if you want to associate values with a name:</p>
<pre><code>def func1():
    d = {'a' : 0}
    def func2():
        print(d['a'])
    d['a'] = 1
    print(d['a'])
    func2()

func1()
print(d['a'])
</code></pre>
<p>which leads to the following output:</p>
<pre><code>1
1
Traceback (most recent call last):
  File "...", line 10, in &lt;module&gt;
    print(d['a'])
NameError: name 'd' is not defined
</code></pre>
<p>The exception caused by the last line is the correct behaviour since <code>d</code> is only defined within <code>func1</code>. It therefore isn't accessible outside of the scope of <code>func1</code>.</p>
<p>You can read more about scopes e.g. <a href="http://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Thank you very much! Again :)</span>
<span class="comment-copy">Np - It was probably my fault anyways for showing you that stuff with locals in the first place. It would have been better to show you the list variant from the beginning.</span>
