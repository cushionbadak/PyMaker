<div class="post-text" itemprop="text">
<p>I've checked <a href="https://stackoverflow.com/questions/19609237/python-read-1000-at-a-time-until-end-of-file%20%22%22">this</a>, <a href="https://stackoverflow.com/questions/1657299/how-do-i-read-two-lines-from-a-file-at-a-time-using-python%22%22">this</a> and <a href="https://stackoverflow.com/questions/5832856/how-to-read-file-n-lines-at-a-time-in-python%20%22%22">this</a>.</p>
<p>The 3rd link seemed to have the answer yet it didn't do the job.</p>
<p>I can't have a solution where the whole file is brought to main memory, as the files I'll be working with will be very large. So I decided to use <code>islice</code> as shown in the 3rd link. First 2 links were irrelevant as they used it for only 2 lines or read 1000 characters. Whereas I need <strong>1000 lines.</strong> <code>for now N is 1000</code></p>
<p>My file contains <strong>1 million</strong> lines:</p>
<p><strong><em>Sample:</em></strong></p>
<pre><code>1 1 1
1 2 1
1 3 1
1 4 1
1 5 1
1 6 1
1 7 1
1 8 1
1 9 1
1 10 1
</code></pre>
<p>So if I read 1000 lines at a time, I should go through the <code>while</code> <code>1000</code> times, yet when I print <code>p</code> to check how many times I've been in through, it doesn't stop at a <code>1000</code>. It reached <code>19038838</code> after running my program for <code>1400</code> seconds!!</p>
<p><strong>CODE:</strong></p>
<pre><code>def _parse(pathToFile, N, alg):
    p = 1
    with open(pathToFile) as f:
        while True:
            myList = []
            next_N_lines = islice(f, N)
            if not next_N_lines:
                break
            for line in next_N_lines:
                s = line.split()
                x, y, w = [int(v) for v in s]
                obj = CoresetPoint(x, y)
                Wobj = CoresetWeightedPoint(obj, w)
                myList.append(Wobj)
            a = CoresetPoints(myList)
            client.compressPoints(a) // This line is not the problem
            print(p)
            p = p+1
    c = client.getTotalCoreset()
    return c
</code></pre>
<p>What am I doing wrong ?</p>
</div>
<div class="post-text" itemprop="text">
<p>As @Ev.kounis said your while loop doesn't seem to work properly.</p>
<p>I would recommend to go for the yield function for chunk of data at a time like this:</p>
<pre><code>def get_line():
    with open('your file') as file:
        for i in file:
            yield i

lines_required = 1000
gen = get_line()
chunk = [next(gen) for i in range(lines_required)]
</code></pre>
</div>
<span class="comment-copy">the <code>f</code> is probably not consumed so you end up reading the same and same 1000 lines every time. This will never terminate. You have to use the alternative formulation for <code>islice</code> (<code>itertools.islice(iterable, start, stop[, step])</code> this one and not <code>itertools.islice(iterable, stop)</code> this)</span>
<span class="comment-copy">But won't it try to open the same file <code>1M</code> times for each line ? it will slow down the program, is it not ?</span>
<span class="comment-copy">No, it will only repeat the steps in the for loop. Yield can be interpreted as "return this input and come back exactly here when asked to". Have a look at doc for Generators: <a href="https://docs.python.org/3/howto/functional.html#generators" rel="nofollow noreferrer">docs.python.org/3/howto/functional.html#generators</a></span>
<span class="comment-copy">@MKesper And how do if the file is over so I can stop iterating and reading ? <code>if not chunk: break</code> didn't work. Any ideas ?</span>
<span class="comment-copy">Managed to fix this by wrapping it by <code>try</code> and if an exception is thrown then I break. Thanks!</span>
<span class="comment-copy">Please share your improvements to the code.</span>
