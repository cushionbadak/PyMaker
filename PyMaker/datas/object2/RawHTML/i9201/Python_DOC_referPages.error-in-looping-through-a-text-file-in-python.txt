<div class="post-text" itemprop="text">
<p>I am trying to loop through a text file and apply some logic but I am not able to loop through the text file. So currently I have a text file that is structured like this:</p>
<pre><code>--- section1 ---
"a","b","c"
"d","e","f"
--- section2 ---
"1","2","3"
"4","5","6"
--- section3 ---
"12","12","12"
"11","11","11"
</code></pre>
<p>I am trying to filter out the first line which contains '---' and convert the lines below into json until the next '---' line appear in the text document.</p>
<p>However I got this error " <strong>fields1 = next(file).split(',') StopIteration</strong></p>
<pre><code>with open(fileName,'r') as file:
    for line in file:
        if line.startswith('-') and 'section1' in line:
            while '---' not in next(file):
                fields1 = next(file).split(',')
                for x in range(0,len(fields1)):
                    testarr.append({
                    config.get('test','test'): fields1[x]           
                    })

                with open(test_dir,'w') as test_file:
                    json.dump(testarr, test_file)
</code></pre>
<p>Any idea why my code is not working or how i can solve the error ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The cause of your error is that you are misusing the file object genrator by calling <code>next</code> on it twice as often as you think. Each call to <code>next</code> gets a line and returns it. Therefore, <code>while '---' not in next(file): fields1 = next(file).split(',')</code> gets a line, checks it for <code>---</code>, then gets another line and tries to parse it. This means that you are able to skip a line containing the <code>---</code> by having it come up in the second <code>next</code>. In that case you will get to the end of the file before you find the line you are looking for. <code>StopIteration</code> is how iterators normally indicate that their input has been exhausted.</p>
<p>There are a couple of other issues you may want to address in your code:</p>
<ol>
<li>Using <code>next</code> on a generator like a file when you are already inside a <code>for</code> loop may cause undefined behavior. You may be getting away with it this time, but it is not good practice in general. The main reason you are getting away with it, by the way, is possibly that you never actually return control to the <code>for</code> loop once the <code>while</code> is triggered, and not that files are particularly permissive in this regard.</li>
<li>The inner <code>with</code> that dumps your data to a file is inside your <code>while</code> loop. That means that the file you open with <code>'w'</code> permissions will get truncated for every iteration of the <code>while</code> (i.e., each line in the file). As the array grows, the output will actually appear fine, but you probably want to move that out of the inner loop.</li>
</ol>
<p>The simplest solution would be to rewrite the code in two loops: one to find the start of the part you care about, and the other to process it until the end is found.</p>
<p>Something like this:</p>
<pre><code>test_arr = []
with open(fileName, 'r') as file:
    for line in file:
        if line.startswith('---') and 'section1' in line:
            break

    for line in file:
        if '---' in line:
            break
        fields1 = line.split(',')
        for item in fields1:
            testarr.append({config.get('test','test'): item})

with open(test_dir,'w') as test_file:
    json.dump(testarr, test_file)
</code></pre>
<p>EDIT:</p>
<p>Taking @tripleee's advice, I have removed the regex check for the start line. While regex gives great precision and flexibility for finding a specific pattern, it is really overkill for this example. I would like to point out that if you are looking for a section other than section1, or if section1 appears after some other lines with dashes, you will absolutely need this two-loop approach. The one-loop solutions in the other answers will not work in a non-trivial case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you are overcomplicating matters massively. The <code>next</code> inside the inner <code>while</code> loop I imagine is tripping up the outer <code>for</code> loop, but that's just unnecessary anyway.  You are already looping over lines; pick the ones you want, then quit when you're done.</p>
<pre><code>with open(fileName,'r') as inputfile:
    for line in inputfile:
        if line.startswith('-') and 'section1' in line:
            continue
        elif line.startswith('-'):
            break
        else:
            testarr.append({config.get('test', 'test'): x
                for x in line.split(',')})

with open(test_dir,'w') as test_file:
    json.dump(testarr, test_file)
</code></pre>
<p>I hope I got the <code>append</code> right, as I wanted to also show you how to map the split fields more elegantly, but I'm not sure I completely understand what your original code did. (I'm guessing you'll want to trim the <code>\n</code> off the end of the line before splitting it, actually. Also, I imagine you want to trim the quotes from around each value. <code>x.strip('"') for x in line.rstrip('\n').split(',')</code>)</p>
<p>I also renamed <code>file</code> to <code>inputfile</code> to avoid clashing with the reserved keyword <code>file</code>.</p>
<p>If you want to write more files, basically, add more states in the loop and move the write snippet back inside the loop. I don't particularly want to explain how this is equivalent to a state machine but it should not be hard to understand: with two states, you are skipping or collecting; to extend this, add one more state for the boundary when flipping back, where you write out the collected data and reinitialize the collected lines to none.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> raises a <code>StopIteration</code> exception when the iterator is exhausted. In other words, your code gets to the end of the file, and you call <code>next()</code> again, and there's nothing more for it to return, so it raises that exception.</p>
<p>As for how to solve your problem, I think this might be what you want:</p>
<pre><code>with open(fileName, 'r') as file:
    for line in file:
        if line.startswith('---'):
            if 'section1' in line:
                continue
            else:
                break
        fields1 = line.split(',')
        for x in range(len(fields1)):
            testarr.append({
                config.get('test', 'test'): fields1[x]
            })

with open(test_dir, 'w') as test_file:
    json.dump(testarr, test_file)
</code></pre>
</div>
<span class="comment-copy">Try writing as two loops in series instead of nesting them. Loop1: skip all lines until <code>--- section1...</code>. Loop2: Dump all lines until another <code>---</code> is met.</span>
<span class="comment-copy">Given past experiences with similar titles, I expected this to be a crap question that needed to be closed. Instead, found a well phrased, clear question with basically all the relevant information present. Many kudos OP.</span>
<span class="comment-copy">Ignore my original (now deleted) comment. It's been a long time since I've seen an <code>else</code> to a <code>while</code> loop.</span>
<span class="comment-copy"><code>break</code> shouldn't be in an <code>else</code>. Inner <code>with</code> most certainly should not be in the <code>while</code> loop.</span>
<span class="comment-copy">Please don't edit the code in the question directly like that.</span>
<span class="comment-copy">While going to regex offers better precision for matching exactly the pattern(s) you want, in this case it looks like a complication and overkill to boot.</span>
<span class="comment-copy">@tripleee. I don't disagree with you. I did notice that the two-loop solution is necessary though if you look for a section other than section1, or if section1 is not the first section.</span>
<span class="comment-copy">The outer <code>for</code> loop is not what causes the problem. This is clearly stated in the question.</span>
<span class="comment-copy">Also, your code will add all lines that are not in section1 as well.</span>
<span class="comment-copy">Huh? The <code>elif</code> skips to the end when you reach section 2.</span>
<span class="comment-copy">The <code>next</code> in the inner loop in the OP's attempt manipulates the <code>file</code> iterator of the outer loop.</span>
<span class="comment-copy">Good point. Also, nice notes about trimming the input.</span>
<span class="comment-copy">Given the input file, you do not really explain how it is possibly to reach the end of the file when the stop condition is a line containing <code>---</code>.</span>
<span class="comment-copy">Also, that write needs to be outside the loop.</span>
<span class="comment-copy">@MadPhysicist So it does. Thanks.</span>
<span class="comment-copy">Also, same problem as with @tripleee's anser. It won't work for any section but the first. I'll bet OP will want to reuse this code for other sections too.</span>
