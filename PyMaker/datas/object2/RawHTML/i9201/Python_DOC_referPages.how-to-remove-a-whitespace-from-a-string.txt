<div class="post-text" itemprop="text">
<p>What I want my code to do is that eventually the <code>"-"</code> will collide with the <code>"0"</code>. But right now all it does is keep chasing the <code>"0"</code> and never touch it.  </p>
<pre><code>import time
global gunshot, gun
gun = 0
gunshot = "-           0"

while True:
    global gunshot
    gunshot = " " + gunshot
    gunshot.replace(' 0', '0')
    print ('\r {0}'.format(gunshot)),
    if gunshot.find("-0") == 1:
        gunshot = "-"
    time.sleep(.1)
</code></pre>
<p>That is want I want:</p>
<pre><code>     -     0
      -    0
       -   0
</code></pre>
<p>This is what it is doing</p>
<pre><code>     -     0
     -     0
     -     0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>replace returns a new string, it does not change the variable inplace.</p>
<pre><code>gunshot = gunshot.replace(' 0', '0')
</code></pre>
<p>This will fix your immediate problem, but you should consider using @MSeiferts code because it is much better.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="nofollow noreferrer"><code>str.rjust</code></a> function here:</p>
<pre><code>bullet = '-'
target = 'O'

distance = 3
field = 10

while distance &gt;= 0:
    print('{}{}{}'.format(bullet, ' '*distance, target).rjust(field))
    distance -= 1
</code></pre>
<p>which prints:</p>
<pre><code>     -   O
      -  O
       - O
        -O
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also use a deque and just rotate the values:</p>
<pre><code>from collections import deque


def gunshot_path(distance):
    return deque(['-'] + ([''] * (distance - 1)))


def print_gunshot_path(distance, target="0"):
    path = gunshot_path(distance)
    for i in range(distance):
        print(" ".join(path) + target)
        path.rotate()


print_gunshot_path(5)
print_gunshot_path(10, target='X')
</code></pre>
<p>Which prints:</p>
<pre><code>-    0
 -   0
  -  0
   - 0
    -0
-         X
 -        X
  -       X
   -      X
    -     X
     -    X
      -   X
       -  X
        - X
         -X
</code></pre>
</div>
<span class="comment-copy">You are replacing the space but not assigning the result into gunshot. Gunshot = gunshot.replace()</span>
<span class="comment-copy">oh thanks i just noticed</span>
<span class="comment-copy">You don't need to <a href="https://docs.python.org/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">declare global variables like that</a>: <code>global gunshot, gun</code>. That makes only sense if you are in a function and want to modify a <code>gunshot</code> and <code>gun</code> variable (which are outside of your function).</span>
<span class="comment-copy">how do i change variable inplace?</span>
<span class="comment-copy">@Cube you do what I did in my code snippet in my answer</span>
<span class="comment-copy">You can't change a string in-place in Python but you can reassign the variable name.</span>
