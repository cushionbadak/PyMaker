<div class="post-text" itemprop="text">
<p>A bunch of the tweets I am importing are having this issue where they read </p>
<pre><code>b'I posted a new photo to Facebook'
</code></pre>
<p>I gather the <code>b</code> indicates it is a byte. But this is proving problematic because in my CSV files that I end up writing, the <code>b</code> doesn't go away and is interferring in future code. </p>
<p>Is there a simple way to remove this <code>b</code> prefix from my lines of text? </p>
<p>Keep in mind, I seem to need to have the text encoded in utf-8 or tweepy has trouble pulling them from the web. </p>
<hr/>
<p>Here's the link content I'm analyzing:</p>
<p><a href="https://www.dropbox.com/s/sjmsbuhrghj7abt/new_tweets.txt?dl=0" rel="noreferrer">https://www.dropbox.com/s/sjmsbuhrghj7abt/new_tweets.txt?dl=0</a></p>
<pre><code>new_tweets = 'content in the link'
</code></pre>
<h1>Code Attempt</h1>
<pre><code>outtweets = [[tweet.text.encode("utf-8").decode("utf-8")] for tweet in new_tweets]
print(outtweets)
</code></pre>
<h1>Error</h1>
<pre><code>UnicodeEncodeError                        Traceback (most recent call last)
&lt;ipython-input-21-6019064596bf&gt; in &lt;module&gt;()
      1 for screen_name in user_list:
----&gt; 2     get_all_tweets(screen_name,"instance file")

&lt;ipython-input-19-e473b4771186&gt; in get_all_tweets(screen_name, mode)
     99             with open(os.path.join(save_location,'%s.instance' % screen_name), 'w') as f:
    100                 writer = csv.writer(f)
--&gt; 101                 writer.writerows(outtweets)
    102         else:
    103             with open(os.path.join(save_location,'%s.csv' % screen_name), 'w') as f:

C:\Users\Stan Shunpike\Anaconda3\lib\encodings\cp1252.py in encode(self, input, final)
     17 class IncrementalEncoder(codecs.IncrementalEncoder):
     18     def encode(self, input, final=False):
---&gt; 19         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
     20 
     21 class IncrementalDecoder(codecs.IncrementalDecoder):

UnicodeEncodeError: 'charmap' codec can't encode characters in position 64-65: character maps to &lt;undefined&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you need to <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="noreferrer">decode</a> the <code>bytes</code> of you want a string:</p>
<pre><code>b = b'1234'
print(b.decode('utf-8'))  # '1234'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is just letting you know that the object you are printing is not a string, rather a byte object as a <strong>byte literal</strong>. People explain this in incomplete ways, so here is my take.</p>
<p>Consider creating a <strong>byte object</strong> by typing a byte literal (literally defining a byte object without actually using a byte object e.g. by typing b'') and converting it into a <strong>string object</strong> encoded in utf-8. (Note that converting here means <em>decoding</em>)</p>
<pre><code>byte_object= b"test" # byte object by literally typing characters
print(byte_object) # Prints b'test'
print(byte_object.decode('utf8')) # Prints "test" without quotations
</code></pre>
<p>You see that we simply apply the <code>.decode(utf8)</code> function.</p>
<h1>Bytes in Python</h1>
<p><a href="https://docs.python.org/3.3/library/stdtypes.html#bytes" rel="nofollow noreferrer">https://docs.python.org/3.3/library/stdtypes.html#bytes</a></p>
<h1>String literals are described by the following lexical definitions:</h1>
<p><a href="https://docs.python.org/3.3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">https://docs.python.org/3.3/reference/lexical_analysis.html#string-and-bytes-literals</a></p>
<pre><code>stringliteral   ::=  [stringprefix](shortstring | longstring)
stringprefix    ::=  "r" | "u" | "R" | "U"
shortstring     ::=  "'" shortstringitem* "'" | '"' shortstringitem* '"'
longstring      ::=  "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
shortstringitem ::=  shortstringchar | stringescapeseq
longstringitem  ::=  longstringchar | stringescapeseq
shortstringchar ::=  &lt;any source character except "\" or newline or the quote&gt;
longstringchar  ::=  &lt;any source character except "\"&gt;
stringescapeseq ::=  "\" &lt;any source character&gt;

bytesliteral   ::=  bytesprefix(shortbytes | longbytes)
bytesprefix    ::=  "b" | "B" | "br" | "Br" | "bR" | "BR" | "rb" | "rB" | "Rb" | "RB"
shortbytes     ::=  "'" shortbytesitem* "'" | '"' shortbytesitem* '"'
longbytes      ::=  "'''" longbytesitem* "'''" | '"""' longbytesitem* '"""'
shortbytesitem ::=  shortbyteschar | bytesescapeseq
longbytesitem  ::=  longbyteschar | bytesescapeseq
shortbyteschar ::=  &lt;any ASCII character except "\" or newline or the quote&gt;
longbyteschar  ::=  &lt;any ASCII character except "\"&gt;
bytesescapeseq ::=  "\" &lt;any ASCII character&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to decode it to convert it to a string. Check the answer here
<a href="https://stackoverflow.com/a/24099252/1113211">about bytes literal in python3</a>.</p>
<pre><code>In [1]: b'I posted a new photo to Facebook'.decode('utf-8')
Out[1]: 'I posted a new photo to Facebook'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I got it done by only encoding the output using utf-8. 
Here is the code example</p>
<pre><code>new_tweets = api.GetUserTimeline(screen_name = user,count=200)
result = new_tweets[0]
try: text = result.text
except: text = ''

with open(file_name, 'a', encoding='utf-8') as f:
    writer = csv.writer(f)
    writer.writerows(text)
</code></pre>
<p>i.e: do not encode when collecting data from api, encode the output (print or write) only. </p>
</div>
<div class="post-text" itemprop="text">
<p>On python 3.6 with django 2.0, decode on a byte literal does not works as expected. 
Yeah i get the right result when i print it, but the b'value' is still there even if you print it right.</p>
<p>This is what im encoding</p>
<pre><code>uid': urlsafe_base64_encode(force_bytes(user.pk)),
</code></pre>
<p>This is what im decoding:</p>
<pre><code>uid = force_text(urlsafe_base64_decode(uidb64))
</code></pre>
<hr/>
<p><strong>This is what django 2.0 says :</strong></p>
<pre><code>urlsafe_base64_encode(s)[source]
</code></pre>
<p><strong>Encodes a bytestring in base64 for use in URLs, stripping any trailing equal signs.</strong></p>
<pre><code>urlsafe_base64_decode(s)[source]
</code></pre>
<p><strong>Decodes a base64 encoded string, adding back any trailing equal signs that might have been stripped.</strong></p>
<hr/>
<p><strong>This is my account_activation_email_test.html file</strong></p>
<pre><code>{% autoescape off %}
Hi {{ user.username }},

Please click on the link below to confirm your registration:

http://{{ domain }}{% url 'accounts:activate' uidb64=uid token=token %}
{% endautoescape %}
</code></pre>
<hr/>
<p><strong>This is my console response:</strong></p>
<p>Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Subject: Activate Your MySite Account
From: webmaster@localhost
To: testuser@yahoo.com
Date: Fri, 20 Apr 2018 06:26:46 -0000
Message-ID: &lt;152420560682.16725.4597194169307598579@Dash-U&gt;</p>
<p>Hi testuser,</p>
<p>Please click on the link below to confirm your registration:</p>
<pre><code>http://127.0.0.1:8000/activate/b'MjU'/4vi-fasdtRf2db2989413ba/
</code></pre>
<p><strong>as you can see <code>uid = b'MjU'</code></strong></p>
<p><strong>expected <code>uid = MjU</code></strong></p>
<hr/>
<p>test in console:</p>
<pre><code>$ python
Python 3.6.4 (default, Apr  7 2018, 00:45:33) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
&gt;&gt;&gt; from django.utils.encoding import force_bytes, force_text
&gt;&gt;&gt; var1=urlsafe_base64_encode(force_bytes(3))
&gt;&gt;&gt; print(var1)
b'Mw'
&gt;&gt;&gt; print(var1.decode())
Mw
&gt;&gt;&gt; 
</code></pre>
<p>After investigating it seems like its related to python 3.
My workaround was quite simple:</p>
<pre><code>'uid': user.pk,
</code></pre>
<p>i receive it as uidb64 on my activate function:</p>
<pre><code>user = User.objects.get(pk=uidb64)
</code></pre>
<p>and  voila:</p>
<pre><code>Content-Transfer-Encoding: 7bit
Subject: Activate Your MySite Account
From: webmaster@localhost
To: testuser@yahoo.com
Date: Fri, 20 Apr 2018 20:44:46 -0000
Message-ID: &lt;152425708646.11228.13738465662759110946@Dash-U&gt;


Hi testuser,

Please click on the link below to confirm your registration:

http://127.0.0.1:8000/activate/45/4vi-3895fbb6b74016ad1882/
</code></pre>
<p>now it works fine. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>****How to remove b' ' chars which is decoded string in python ****</p>
<pre><code>import base64
a='cm9vdA=='
b=base64.b64decode(a).decode('utf-8')
print(b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although the question is very old, I think it may be helpful to who is facing the same problem. Here the texts is a string like below:</p>
<pre><code>text= "b'I posted a new photo to Facebook'"
</code></pre>
<p>Thus you can not remove b by encoding it because it's not a byte. I did the following to remove it.</p>
<pre><code>cleaned_text = text.split("b'")[1]
</code></pre>
<p>which will give   <code>"I posted a new photo to Facebook"</code></p>
</div>
<span class="comment-copy">can you show at least part of those <i>lines of text</i> ?</span>
<span class="comment-copy">@RomanPerekhrest I'm sorry, what would you like more of? Code or output?</span>
<span class="comment-copy">Always specify the encoding when opening files.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/16748083/suppress-print-without-b-prefix-for-bytes-in-python-3">Suppress/ print without b' prefix for bytes in Python 3</a></span>
<span class="comment-copy">I've updated the question. I don't think this method works. If it does, could you elaborate why?</span>
<span class="comment-copy"><code>.encode("utf-8").decode("utf-8")</code> does absolutely nothing (if it works at all)... you are on python 3, right? py3 has a strong distinction between <code>bytes</code> and <code>str</code>. something in your code seems to use the <code>cp1252</code> encoding... you could try to open your file with <code>open(..., mode='w', encoding='utf-8')</code> and only write <code>str</code> to the file; or you forget about all the encoding and write the file in binary:  <code>open(..., mode='wb')</code> (note the <code>b</code>) and only write <code>bytes</code>. does that help?</span>
<span class="comment-copy">No, that doesn't fix it. I got <code>"b'Due to the storms this weekend, we have rescheduled the Blumenfield Bike Ride for Feb 26. Hope to see you there.\xe2\x80\xa6'"</code></span>
<span class="comment-copy">How can you tell it encodes as cp1252? I also didn't think <code>.encode("utf-8").decode("utf-8")</code> would do anything, but the people here seemed to think that was the right answer, which it is not as far as i can see.</span>
<span class="comment-copy">i spotted this path in you traceback: <code>C:\Users\Stan Shunpike\Anaconda3\lib\encodings\cp1252.py</code>. you probably should try to find out how/where that is used. oh, and you are using the <code>csv.writer</code>; in that case you need to write <code>str</code> indeed an not <code>bytes</code>. are you getting things from <code>requests</code>? the encoding you get from a web resource may differ from <code>utf-8</code>.</span>
<span class="comment-copy">the problem with this is that, when i try to download tweets without the <code>encode("utf-8")</code> I get errors. And, as I mentioned here, <a href="http://stackoverflow.com/q/41915383/4422095">stackoverflow.com/q/41915383/4422095</a> removing that didn't solve it. Even if I use the decode as u suggest, I still get an error. I will post that in the post.</span>
<span class="comment-copy">I posted the error</span>
<span class="comment-copy">You already have got the solution of your problem actually.</span>
<span class="comment-copy">How? it gives me an error?</span>
<span class="comment-copy">done. it's not exactly the same because u need twitter OAuth codes to do it. but if u just do the example i gave, u will get the same problem. it is not solved by the method u suggested. it just undoes the utf-8. <b>but that doesn't work because it won't process the characters in the tweets without utf-8 encoding</b></span>
<span class="comment-copy">I believe that the problem is not the decode but instead is the autoescape off in the template that is unable to strip the byte literal into a string just like decode does.</span>
<span class="comment-copy">No, that will give <code>"I posted a new photo to Facebook'"</code>. This is not what the question is about, anyway.</span>
