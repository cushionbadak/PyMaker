<div class="post-text" itemprop="text">
<p>I have a string <code>abccddde</code> </p>
<p>I need to find substrings like:
a, b, c, cc, d, dd, ddd, e</p>
<p>substrings <code>ab</code> or <code>cd</code> are not valid.</p>
<p>I tried finding all the substrings from a string but its not efficient</p>
<pre><code>def get_all_substrings(input_string):
    length = len(input_string)
    return [input_string[i:j+1] for i in range(length) for j in range(i,length)]
</code></pre>
<p>This is outputting:</p>
<p><code>['a', 'ab', 'abc', 'abcc', 'abccd', 'abccdd', 'abccddd', 'abccddde', 'b', 'bc', 'bcc', 'bccd', 'bccdd', 'bccddd', 'bccddde', 'c', 'cc', 'ccd', 'ccdd', 'ccddd', 'ccddde', 'c', 'cd', 'cdd', 'cddd', 'cddde', 'd', 'dd', 'ddd', 'ddde', 'd', 'dd', 'dde', 'd', 'de', 'e']</code></p>
<p>This was the method i followed to find the substrings but it gives all the possiblities but that is what makes it inefficient
Please Help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> for this:</p>
<pre><code>from itertools import groupby

s = 'abccdddcce'
l1 = ["".join(g) for k, g in groupby(s)]
l2 = [a[:i+1] for a in l1 for i in range(len(a))]
print l2
</code></pre>
<p>Output:</p>
<pre><code>['a', 'b', 'c', 'cc', 'd', 'dd', 'ddd', 'c', 'cc', 'e']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a>:</p>
<pre><code>from collections import Counter
L = []
s = 'abccddde'
c = Counter(s) # Counter({'d': 3, 'c': 2, 'a': 1, 'b': 1, 'e': 1})
for k, v in c.items():
    for x in range(1, v+1):
        L.append(x*k)
</code></pre>
<p><code>Counter(s)</code> returns a dictionary containing the amount of times the letters repeat in the string. We then iterate through the dictionary and create all the repeated strings ('d', 'dd', 'ddd', etc) for one term. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> can tell you the number of consecutive chars. After that for each group you have the char repeated upto that number.</p>
<pre><code>from itertools import groupby

def substrings(s):
    for char, group in groupby(s):
        substr = ''
        for i in group:
            substr += i
            yield substr

for result in substrings('abccdddcce'):
    print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here is one way using regex:</p>
<pre><code>In [85]: [j for i in re.findall(r'((\w)(\2+)?)', s) for j in set(i) if j]
Out[85]: ['a', 'b', 'c', 'cc', 'ddd', 'dd', 'd', 'e']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import groupby

def runlength_compress(src):
    return ((k, sum(1 for _ in g)) for k,g in groupby(src))

def contiguous_substrings(src):
    return [c*(i+1) for c, count in runlength_compress(src) for i in range(count)]

print(contiguous_substrings('abccddde'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following will do what you want. I don't know if its efficient compared to other solutions though.</p>
<pre><code>def get_all_substrings(text):
    res = []
    prev = ''
    s = ''

    for c in text:
        if c == prev:
            s += c
        else:
            s = prev = c
        res.append(s)

    return res

# Output
&gt;&gt;&gt; get_all_substrings('abccddde')
['a', 'b', 'c', 'cc', 'd', 'dd', 'ddd', 'e']
&gt;&gt;&gt; get_all_substrings('abccdddec')
['a', 'b', 'c', 'cc', 'd', 'dd', 'ddd', 'e', 'c']
</code></pre>
<hr/>
<p>Timings</p>
<pre><code>import timeit
import random

size = 100
values = 'abcde'
s = ''.join(random.choice(values) for _ in range(size))

print(s)

print(timeit.timeit("get_all_substrings(s)",
                    setup = 'from __main__ import s, get_all_substrings',
                    number = 10000) )

# Example for size 100 input
abbaaebacddbdedbdbbacadcdddabaeabacdcbeebbccaadebdcecadcecceececcacebacecbbccdedddddabaeeceeeccabdcc
0.16761969871275967
</code></pre>
</div>
<span class="comment-copy">Are the same symbols in the source string always grouped together? If yes, the solution with collections.Counter is ok. If no, it isn't.</span>
<span class="comment-copy">if i take a string 'ccdc' its giving me output as 'c', 'cc', 'ccc', 'd' which is wrong. It should not print 'ccc' as its not a contiguous substring. So the collections.Counter solution is not completely correct.</span>
<span class="comment-copy">@Sagar Check mine.</span>
<span class="comment-copy">were you trying to solve "Weighted Uniform Strings"? :)</span>
<span class="comment-copy">this answer is really cool. But is it efficient enough for larger inputs ? I tried with larger inputs and its taking a bit time</span>
<span class="comment-copy">@Sagar What you can do is make it a generator instead of list <code>l1=(..); l2=(..)</code> and then you can loop over <code>l2</code> to get the strings.</span>
<span class="comment-copy">This solution is a silverbullet for my problem.thanks a lot mate.</span>
<span class="comment-copy">if i take a string 'ccdc' its giving me output as 'c', 'cc', 'ccc', 'd' which is wrong. It should not take ccc as its not a contiguous substring.</span>
<span class="comment-copy">@Sagar No problem at all :)</span>
<span class="comment-copy">You can leave out the <code>key</code> function in <code>groupby(s, lambda x: x)</code> as it defaults to identity: <code>groupby(s)</code>.</span>
<span class="comment-copy">thanks a lot for the solution.even this worked for me.</span>
<span class="comment-copy">this also partially worked for me. anyway thanks for the solution. :)</span>
<span class="comment-copy">thanks alot for the solution and your time :)</span>
<span class="comment-copy">amazing :D thanks alot for this.</span>
