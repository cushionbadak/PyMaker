<div class="post-text" itemprop="text">
<p>I am only three weeks into my Intro to Programming course, so bear with me!</p>
<p>I am writing a code as follows: </p>
<pre><code>number1 = input('Enter the first number: ')
number1 = int(number1)
number2 = input('Enter the second number: ')
number2 = int(number2)
number3 = input('Enter the third number: ')
number3 = int(number3)
ratio12 = int(number1 / number2)
ratio13 = int(number1 / number3)
ratio23 = int(number2 / number3)
print('The ratio of', + number1, '+', + number2,'is', + ratio12, '.')
print('The ratio of', + number1, '+', + number3,'is', + ratio13, '.')
print('The ratio of', + number2, '+', + number3,'is', + ratio23, '.')
</code></pre>
<p>The code is functional (finally), but I can't seem to get rid of the space before the period on the print statements. Is there a way that I can do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason why this happens is because you are using commas in your print statements. In python there are a few ways to give the print statement multiple variables, you seem to be mixing two of them together. The ways are as follows.</p>
<ul>
<li>Concatenate the string.

<pre>print('The ratio of ' + str(number1) + ' + ' + str(number2) + ' is ' + str(ration12) + '.')</pre>

This way is probably the most basic way. It will join the strings without adding any characters in between them (e.g. no spaces in between unless you add them explicitly.) Also note, that string concatenation won't automatically cast the integers to a string for you.</li>
<li>Pass print multiple arguments.

<pre>print('The ratio of', number1, '+', number2, 'is', ration12, '.')</pre>

This will automatically add spaces between each argument and is what is happening in your case. The separator (which defaults to a space) can be changed by passing a keyword argument to the print function. For example, <code>print('i = ', i, sep='')</code></li>
<li>Use string formatting.

<pre>print('The ratio of {} + {} is {}.'.format(number1, number2, ratio12))</pre>

This way is the most readable and often the best way. It will replace the '{}' sections in you 'template' string  with the arguments based into the format function. It does this in order, however you can add an index like this '{0}' to explicitly use an argument by index.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Some <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">string formating</a> makes your live easier:</p>
<pre><code>number1 = 1
number2 = 2
ratio12 = number1 / number2
print('The ratio of {} + {} is {}.'.format(number1, number2, ratio12))
</code></pre>
<p>Output:</p>
<pre><code>The ratio of 1 + 2 is 0.5.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can control the "separator" using the <code>sep</code> argument to <a href="https://docs.python.org/3.6/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a>:</p>
<pre><code>print('The ratio of', + number1, '+', + number2,'is', + ratio12, '.', sep='')
</code></pre>
<p>Note that this will change the spacing between the other items as well.</p>
<hr/>
<p>Also -- You don't need the extra <code>+</code> operators in there.  Here's a version without the spaces and with explicit spaces added where I think you want them:</p>
<pre><code>print('The ratio of ', number1, ' + ', number2, ' is ', ratio12, '.', sep='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're confused about the concatenation function and print fields.  If you're going to concatenate all those strings, just use concatenation.  The comma includes the default separator.</p>
<pre><code>print('The ratio of', number1, '+', number2,'is', str(ratio12) + '.')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to write to it this way:</p>
<pre><code>print('The ratio of %d + %d is  %d.' %(number1, number2, ratio12))
print('The ratio of %d + %d is  %d.' %(number1, number3, ratio13))
print('The ratio of %d + %d is  %d.' %(number2, number3, ratio23))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's the way print works when you give it multiple comma separated arguments. The logic behind that is that when you quickly want to print a bunch of variables, it's a pain to manually add widespace.</p>
<p>Well, one thing to try: Get rid of all the <code>,</code> in the print statement. You can just chain strings using the <code>+</code> sign.</p>
<p>So, </p>
<pre><code>print('The ratio of ' + str(number1) + ' ' + str(number2) + ' is ' + str(ratio12) + '.')
</code></pre>
<p>If you need even greater control over formatting, you'd want to look into the <code>format</code> function.</p>
<pre><code>print("The ratio of {} + {} is {}.".format(number1, number2, ratio12))
</code></pre>
</div>
<span class="comment-copy">Why do you have both a <code>,</code> and a <code>+</code> between strings</span>
<span class="comment-copy">Natecat, I have extra commas and plus signs because I am very much a beginner in python coding, hah! I've now taken them out from the help of these answers.</span>
<span class="comment-copy">First example needs to cast number to a str. Also I think you should note that the default <code>sep</code> parameter is a single space <code>' '</code> when using commas.</span>
<span class="comment-copy">@StevenSummers Thanks, fixed.</span>
<span class="comment-copy">This worked well, thank you! And though the other answers to this post may also work, I believe that this is the format that my instructor would be looking for!</span>
<span class="comment-copy">I don't think your first example will work ... <code>number1</code> is an <code>int</code> and you can't add a <code>str</code> to an <code>int</code>.</span>
<span class="comment-copy">My mistake. Fixed. I think in some contexts there's automatic conversion. Maybe in the logging module... at least I vaguely recall that</span>
<span class="comment-copy">For logging you specify a format string:  <code>logger.info('blah %d', an_int)</code>.  There are objects which overload <code>+</code> to work with other types, but generally, the core objects avoid trying to guess.</span>
