<div class="post-text" itemprop="text">
<p>I need to average every <code>n</code> elements in Python list, <code>n = 3</code> in this example:</p>
<pre><code>list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>So that the output list would be: </p>
<pre><code>list2 = [2, 2, 2, 5, 5, 5, 8, 8, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Borrowing a bit from <a href="https://stackoverflow.com/a/41933377/5393381">@Jean-François Fabre's answer</a> but using <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code> (avaiable for python 3.4+)</a>:</p>
<pre><code>&gt;&gt;&gt; from statistics import mean
&gt;&gt;&gt; from itertools import chain

&gt;&gt;&gt; lst = [1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; n = 3

&gt;&gt;&gt; list(chain.from_iterable([mean(lst[i:i+n])]*n for i in range(0,len(lst),n)))
[2, 2, 2, 5, 5, 5, 8, 8, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can compute the <code>[2,5,8]</code> list in a list comprehension like this:</p>
<pre><code>list1 = [1,2,3,4,5,6,7,8,9]
n = 3

list2 = [sum(list1[i:i+n])//n for i in range(0,len(list1),n)]
</code></pre>
<p>Then put it back in <code>list1</code> (preserving size) like you requested like this:</p>
<pre><code>for i in range(0,len(list1)):
    list1[i] = list2[i//n]
</code></pre>
<p>or with a list comprehension:</p>
<pre><code>list1 = [list2[i//n] for i in range(len(list1))]
</code></pre>
<p>Final edit: found a nice oneliner to sum it all up:</p>
<pre><code>import itertools
list1 = list(itertools.chain.from_iterable([i]*n for i in [sum(list1[i:i+n])//n for i in range(0,len(list1),n)]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; n = 3
&gt;&gt;&gt; list1 = [1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; [avg for avg in [sum(list1[i:i+n])//n for i in range(0,len(list1),n)] for j in range(n)]
[2, 2, 2, 5, 5, 5, 8, 8, 8]
</code></pre>
<p>Don't need itertools :-)</p>
<p>Explanation: Following splits the job into 2 steps; does that help? Which part is still unclear?</p>
<pre><code>&gt;&gt;&gt; n = 3
&gt;&gt;&gt; list1 = [1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; averages = [sum(list1[i:i+n])//n for i in range(0,len(list1),n)]
&gt;&gt;&gt; print("averages: ", averages)
averages:  [2, 5, 8]
&gt;&gt;&gt; list2 = [avg for avg in averages for j in range(n)]
&gt;&gt;&gt; print("list2: ", list2)
list2:  [2, 2, 2, 5, 5, 5, 8, 8, 8]
</code></pre>
<p><strong>UPDATE: Another way of doing a no-itertools one-liner:</strong></p>
<pre><code>&gt;&gt;&gt; list2 = sum(([a]*n for a in [sum(list1[i:i+n])//n for i in range(0,len(list1),n)]), [])
[2, 2, 2, 5, 5, 5, 8, 8, 8]
</code></pre>
<p>Explanation: We calculate the averages as before. Then we spread them around like this:</p>
<pre><code>&gt;&gt;&gt; averages = [2, 5, 8]
&gt;&gt;&gt; list2 = sum(([a]*n for a in averages), []) ### see note [1] below
&gt;&gt;&gt; list2
[2, 2, 2, 5, 5, 5, 8, 8, 8]
</code></pre>
<p>which can be further unwound like this:</p>
<pre><code>&gt;&gt;&gt; all_items = list([a]*n for a in averages)
&gt;&gt;&gt; all_items
[[2, 2, 2], [5, 5, 5], [8, 8, 8]]
&gt;&gt;&gt; sum(all_items, [])
[2, 2, 2, 5, 5, 5, 8, 8, 8]
&gt;&gt;&gt;
</code></pre>
<p>Note [1]: The first arg of <code>sum</code> appears at first look to be contained in unnecessary round brackets ... if you think so, try to run it without them and see what happens.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use mean in numpy as :</p>
<pre><code>import numpy as np
list1 = [1,2,3,4,5,6,7,8,9]
np.mean(np.array(list1).reshape(-1, 3), axis=1)
</code></pre>
</div>
<span class="comment-copy">Did you try something yourself?</span>
<span class="comment-copy">Show a coding attempt, so <code>n</code> is 3 in your example?</span>
<span class="comment-copy">Shouldn't the result be <code>[2,5,8]</code>?</span>
<span class="comment-copy">Can you explain the question a bit more? About what is n, and how should the o/p come as. Currently you just have the input and output without any definitions of n.  If we assume n is 3, then it makes a bit of sense regarding the o/p, but you may want something entirely different. And also tell us what you tried so far. And shouldn't the result be  [2,5,8] instead of returning redundant data?</span>
<span class="comment-copy">@wvdz I need to keep the same number of elements in the <code>list2</code>, so I would like to write the average to the first 2 elements in the block as well</span>
<span class="comment-copy">Decent answer, but it IMO it seems perhaps too generous to provide one when the OP has not made any effort themselves. Also it's not clear floor division is most appropriate here</span>
<span class="comment-copy">thanks. I was trying to do that in one-line but failed. Yes, the second part could be done the other way round. oh found a one-liner to do all the work.</span>
<span class="comment-copy">Thank you @Jean-François Fabre! I will try harder with my own attempts next time!</span>
<span class="comment-copy">Care to explain how it works?</span>
<span class="comment-copy">@Pureferret It didn't work; see latest attempt</span>
<span class="comment-copy">It still lacks any explanation...</span>
<span class="comment-copy">@Pureferret See updated answer. BTW you haven't asked for explanation from answerers who use itertools ... what should I infer from that?</span>
<span class="comment-copy">Not that it matters, but I a) expected an explanation from a higher rep user, and b) I'm not as interested in their answers.</span>
