<div class="post-text" itemprop="text">
<p>Using <code>importlib</code>, what is the difference between "Meta Path Finder" (found by traversing over sys.meta_path) and Path Entry Finder" (found by traversing over sys.path_hooks)?</p>
<p>The first type is called upon begin of an import, but when is the second type used? Do both return a spec object? </p>
<p>I want to implement a customized import, where a module can be imported from sources other than *.py or *.pyc, e.g. from a stream. How can this be done?</p>
</div>
<div class="post-text" itemprop="text">
<p>sys.path_hooks <a href="https://docs.python.org/2/library/sys.html#sys.path_hooks" rel="nofollow noreferrer">returns a finder factory</a>.</p>
<blockquote>
<p>Path hooks are called as part of sys.path (or <code>package.__path__</code> ) processing</p>
</blockquote>
<p>as we read in <a href="https://www.python.org/dev/peps/pep-0302/#specification-part-2-registering-hooks" rel="nofollow noreferrer">PEP 302 relevant part</a> which you should read to do what you want.</p>
<p>Coming to speak of, we use a <a href="https://github.com/wrye-bash/wrye-bash/blob/8627c425d93e4078f41ad104c5216e56cc9b6ad3/Mopy/Wrye%20Bash%20Launcher.pyw" rel="nofollow noreferrer">custom hook</a> in my code but I would not recommend you to copy it verbatim (I am really not sure about the hocus pocus we do with init files)</p>
<p>However the process is a bit like in there - the <code>find_module</code> method returns self or None depending on what you want to accept as a module and the <code>load_module</code> method proceeds to load that by compiling the code and assigning it an entry into <code>sys.modules</code>. By replacing those parts you can pretty much load whatever you want.</p>
<p>Related:</p>
<ul>
<li><a href="https://stackoverflow.com/q/7268643/281545">Package-specific import hooks in Python</a></li>
<li><a href="http://www.programcreek.com/python/example/2197/sys.path_hooks" rel="nofollow noreferrer">Python sys.path_hooks Examples</a> </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>When a module is to be imported, the interpreter first walks through the list of objects in <code>sys.meta_path</code>, calling the <code>find_spec()</code> or (deprecated since 3.4) <code>find_module()</code> method on each. The interface is documented in the  <a href="https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder" rel="nofollow noreferrer">importlib.abc.MetaPathFinder</a> abstract base class. These are queried before any other importers (including frozen and built-in) are checked and so can override any other import processing.</p>
<p>If all the above returned <code>None</code>, the interpreter then walks through the list of paths in <code>sys.path</code>. For each path, if <a href="https://docs.python.org/3/glossary.html#term-finder" rel="nofollow noreferrer">finder</a> is not already  cached for that path in <code>sys.path_importer_cache</code> it walks through the list of callables in <code>sys.path_hooks</code>, calling each one with the path to see if it will produce a finder; it caches the first one it finds in <code>sys.path.importer_cache_</code>.</p>
<p>Once it's got the finder it queries that via the <code>find_spec()</code> or deprecated <code>find_module()</code> method to see if it can find that module. If so, it can continue on to import it, otherwise it starts the step above with the next path on <code>sys.path</code>.</p>
<p>This was initially described in <a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow noreferrer">PEP 302</a>, but be warned that that's now a bit out of date; the <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a> documentation appears to be the current spec.</p>
<p>The above description is from my <a href="https://github.com/0cjs/sedoc/blob/master/lang/python/import.md#importers" rel="nofollow noreferrer">personal notes</a>.</p>
</div>
<span class="comment-copy">I continued and have a more specific question: <a href="http://stackoverflow.com/questions/41990169/how-is-python-sys-path-hooks-used-correctly-for-customized-loading-of-modules" title="how is python sys path hooks used correctly for customized loading of modules">stackoverflow.com/questions/41990169/â€¦</a></span>
