<div class="post-text" itemprop="text">
<p>I'm working on creating a vision tracking program using a pipeline.  In my pipeline I have the following code:</p>
<pre><code>@staticmethod
def __approx_contours(input_contours):
    output = []
    kp = None
    for contour in input_contours:
        error = 0.1*cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, error, True)
        print(approx)
        kp = Keeper(approx)
        print(kp)
    if kp == None:
        return output
    for x,y in zip(kp.getX(),kp.getY()):
        output.append((x,y))
    kp.empty()
    return output
</code></pre>
<p>and here is Keeper class</p>
<pre><code>class Keeper:

    _x = []
    _y = []

    # constructor, requires a 3-D array
    def __init__(self, third_dim):
        if third_dim.ndim == 3:
            for row in third_dim:
                for col in row:
                    self._x.append(col[0])
                    self._y.append(col[1])
        else:
            raise NotThirdDimension("Entered array was not three dimensional")
        print(self._x)
        print(self._y)

    # return object "X" array
    def getX(self):
        return self._x

    # return object "Y" array
    def getY(self):
        return self._y

    def empty(self):
        self._x = []
        self._y = []
</code></pre>
<p>Disregard the print statements in <code>__init__</code>, they are only for debugging purposes.</p>
<p>Example output in current state:</p>
<pre><code>[[[183 169]]

 [[187 323]]]
Keeper
[183, 187]
[169, 323]
&lt;keeper.Keeper object at 0x05199630&gt;

[[[ 62 117]]

 [[ 93 366]]

 [[187 256]]]
Keeper
[183, 187, 62, 93, 187]
[169, 323, 117, 366, 256]
&lt;keeper.Keeper object at 0x06F10B70&gt;
</code></pre>
<p>It appears that the values in my Keeper object are not being reset, despite calling kp.empty().  I've also noted that the Keeper object is changing place in memory, perhaps this is part of the issue but I'm not sure where I am going wrong.  Full code is available <a href="https://bitbucket.org/gauszman/python-vision-pipeline/src" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The issue was as user @juanpa.arrivillaga said, I was using class attributes instead of instance attributes.  To remedy my issue the following changes needed to be made to Keeper:</p>
<pre><code>class Keeper:

    # constructor, requires a 3-D array
    def __init__(self, third_dim):
        self.x = []
        self.y = []
        if third_dim.ndim == 3:
            for row in third_dim:
                for col in row:
                    self.x.append(col[0])
                    self.y.append(col[1])
</code></pre>
</div>
<span class="comment-copy">You shouldn't write getters and setters in Python. Also, you've made <code>_x</code> and <code>_y</code> <i>class attributes</i>, which likely isn't what you intended. Furthermore, your <code>__approx_contours</code> method should probably just be a module-level function rather than a static method... why the <code>__</code> name-mangling? Is this a use-case for name-mangling? If not, then don't do it. In sum, <code>Python != Java</code></span>
<span class="comment-copy">How exactly are you calling calling your static method? You only empty it at the end. Likely, the issue is arising because you make <code>_x</code> and <code>_y</code> <i>class variable</i> instead of <i>instance variables</i>. Then, when you do <code>self._x = []; self._y = []</code> in <code>empty</code> you <i>create new instance variables that shadow the class variables</i>. But you've already mutated the class variables, and the changes will still be visible even if you use <code>empty</code>.</span>
<span class="comment-copy">Also, the <code>Keeper</code> object isn't changing place in memory, you are making a new obect every iteration of your loop: <code>kp = Keeper(approx)</code>.</span>
<span class="comment-copy">No, adding a single <code>_</code> does absolutely nothing out of the ordinary. You've made it a <b>class attribute</b>. <a href="http://stackoverflow.com/questions/207000/python-difference-between-class-and-instance-attributes" title="python difference between class and instance attributes">stackoverflow.com/questions/207000/â€¦</a></span>
<span class="comment-copy">Again, you are clearly trying to write Java in Python. They are not the same language. Please check out a Python-specific tutorial on OOP. The <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">official tutorial</a> is actually quite good.</span>
