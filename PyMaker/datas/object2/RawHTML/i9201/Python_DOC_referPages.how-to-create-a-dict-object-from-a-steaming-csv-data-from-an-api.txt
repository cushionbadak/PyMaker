<div class="post-text" itemprop="text">
<p>Here is my code: </p>
<pre><code>import csv
import requests
with requests.Session() as s:
    s.post(url, data=payload)
    download = s.get('url that directly download a csv report')
</code></pre>
<p>This gives me the access to the csv file. I tried different method to deal with the download:</p>
<p>This will give the the csv file in one string:</p>
<pre><code>print download.content
</code></pre>
<p>This print the first row and return error: _csv.Error: new-line character seen in unquoted field</p>
<pre><code>cr = csv.reader(download, dialect=csv.excel_tab)
for row in cr:
    print row
</code></pre>
<p>This will print a letter in each row and it won't print the whole thing:</p>
<pre><code>cr = csv.reader(download.content, dialect=csv.excel_tab)
for row in cr:
    print row
</code></pre>
<p>My question is: what's the most efficient way to read a csv file in this situation. 
And how to download it.</p>
<p>thanks </p>
</div>
<div class="post-text" itemprop="text">
<p>This should help:</p>
<pre><code>import csv
import requests

CSV_URL = 'http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv'


with requests.Session() as s:
    download = s.get(CSV_URL)

    decoded_content = download.content.decode('utf-8')

    cr = csv.reader(decoded_content.splitlines(), delimiter=',')
    my_list = list(cr)
    for row in my_list:
        print(row)
</code></pre>
<p>Ouput sample:</p>
<pre><code>['street', 'city', 'zip', 'state', 'beds', 'baths', 'sq__ft', 'type', 'sale_date', 'price', 'latitude', 'longitude']
['3526 HIGH ST', 'SACRAMENTO', '95838', 'CA', '2', '1', '836', 'Residential', 'Wed May 21 00:00:00 EDT 2008', '59222', '38.631913', '-121.434879']
['51 OMAHA CT', 'SACRAMENTO', '95823', 'CA', '3', '1', '1167', 'Residential', 'Wed May 21 00:00:00 EDT 2008', '68212', '38.478902', '-121.431028']
['2796 BRANCH ST', 'SACRAMENTO', '95815', 'CA', '2', '1', '796', 'Residential', 'Wed May 21 00:00:00 EDT 2008', '68880', '38.618305', '-121.443839']
['2805 JANETTE WAY', 'SACRAMENTO', '95815', 'CA', '2', '1', '852', 'Residential', 'Wed May 21 00:00:00 EDT 2008', '69307', '38.616835', '-121.439146']
[...]
</code></pre>
<p>Related question with answer: <a href="https://stackoverflow.com/a/33079644/295246">https://stackoverflow.com/a/33079644/295246</a></p>
<hr/>
<p>Edit: Other answers are useful if you need to download large files (i.e. <code>stream=True</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>To simplify these answers, and increase performance when downloading a large file, the below may work a bit more efficiently. </p>
<pre><code>import requests
from contextlib import closing
import csv

url = "http://download-and-process-csv-efficiently/python.csv"

with closing(requests.get(url, stream=True)) as r:
    reader = csv.reader(r.iter_lines(), delimiter=',', quotechar='"')
    for row in reader:
        print row   
</code></pre>
<p>By setting <code>stream=True</code> in the GET request, when we pass <code>r.iter_lines()</code>  to csv.reader(), we are passing a <strong><a href="https://wiki.python.org/moin/Generators" rel="noreferrer">generator</a></strong> to csv.reader(). By doing so, we enable csv.reader() to lazily iterate over each line in the response with <code>for row in reader</code>. </p>
<p>This avoids loading the entire file into memory before we start processing it, drastically reducing memory overhead <em>for large files</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="noreferrer"><code>DictReader</code></a> to iterate dictionaries of <code>{'columnname': 'value', ...}</code></p>
<pre><code>import csv
import requests

response = requests.get('http://example.test/foo.csv')
reader = csv.DictReader(response.iter_lines())
for record in reader:
    print(record)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like the answers from <a href="https://stackoverflow.com/users/3923962">The Aelfinn</a> and <a href="https://stackoverflow.com/users/1259640">aheld</a>. I can improve them only by shortening a bit more, removing superfluous pieces, using a real data source, making it 2.x &amp; 3.x-compatible, and maintaining the high-level of memory-efficiency seen elsewhere:</p>
<pre><code>import csv
import requests

CSV_URL = 'http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv'

with requests.get(CSV_URL, stream=True) as r:
    lines = (line.decode('utf-8') for line in r.iter_lines())
    for row in csv.reader(lines):
        print(row)
</code></pre>
<p>Too bad 3.x is less flexible CSV-wise because the iterator must emit Unicode strings (while <code>requests</code> does <code>bytes</code>) because the 2.x-only version—<code>for row in csv.reader(r.iter_lines()):</code>—is more Pythonic (shorter and easier-to-read). Anyhow, note the 2.x/3.x solution above won't handle the situation described by the OP where a NEWLINE is found unquoted in the data read.</p>
<p>For the part of the OP's question regarding <em>downloading</em> (vs. processing) the actual CSV file, here's another script that does <em>that</em>, 2.x &amp; 3.x-compatible, minimal, readable, and memory-efficient:</p>
<pre><code>import os
import requests

CSV_URL = 'http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv'

with open(os.path.split(CSV_URL)[1], 'wb') as f, \
        requests.get(CSV_URL, stream=True) as r:
    for line in r.iter_lines():
        f.write(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From a little search, that I understand the file should be opened in universal newline mode, which you cannot directly do with a response content (I guess).</p>
<p>To finish the task, you can either save the downloaded content to a temporary file, or process it in memory.</p>
<p>Save as file:</p>
<pre><code>import requests
import csv
import os

temp_file_name = 'temp_csv.csv'
url = 'http://url.to/file.csv'
download = requests.get(url)

with open(temp_file_name, 'w') as temp_file:
    temp_file.writelines(download.content)

with open(temp_file_name, 'rU') as temp_file:
    csv_reader = csv.reader(temp_file, dialect=csv.excel_tab)
    for line in csv_reader:
        print line

# delete the temp file after process
os.remove(temp_file_name)
</code></pre>
<p>In memory:</p>
<p>(To be updated)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can update the accepted answer with the iter_lines method of requests if the file is very large</p>
<pre><code>import csv
import requests

CSV_URL = 'http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv'

with requests.Session() as s:
    download = s.get(CSV_URL)

    line_iterator = (x.decode('utf-8') for x in download.iter_lines(decode_unicode=True))

    cr = csv.reader(line_iterator, delimiter=',')
    my_list = list(cr)
    for row in my_list:
        print(row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following approach worked well for me. I also did not need to use <code>csv.reader()</code> or <code>csv.writer()</code> functions, which I feel makes the code cleaner. The code is compatible with Python2 and Python 3.</p>
<pre><code>from six.moves import urllib

DOWNLOAD_URL = "https://raw.githubusercontent.com/gjreda/gregreda.com/master/content/notebooks/data/city-of-chicago-salaries.csv"
DOWNLOAD_PATH ="datasets\city-of-chicago-salaries.csv" 
urllib.request.urlretrieve(URL,DOWNLOAD_PATH)
</code></pre>
<p>Note - six is a package that helps in writing code that is compatible with both Python 2 and Python 3. For additional details regarding six see - <a href="https://stackoverflow.com/questions/34989206/what-does-from-six-moves-import-urllib-do-in-python">What does <code>from six.moves import urllib</code> do in Python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I use this code (I use Python 3):</p>
<pre class="lang-py prettyprint-override"><code>import csv
import io
import requests

url = "http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv"
r = requests.get(url)
r.encoding = 'utf-8'  # useful if encoding is not sent (or not sent properly) by the server
csvio = io.StringIO(r.text, newline="")
data = []
for row in csv.DictReader(csvio):
    data.append(row)
</code></pre>
</div>
<span class="comment-copy">splitlines() !! This works, thank you sir.</span>
<span class="comment-copy">I had to also <code>import codecs</code> and wrap the <code>r.iter_lines()</code> within <code>codecs.iterdecode()</code> like so: <code>codecs.iterdecode(r.iterlines(), 'utf-8')</code> ... in order to solve <code>byte</code> vs <code>str</code> issues, unicode decoding problems and universal new line problems.</span>
<span class="comment-copy">Thanks @IrvinH. , I ran into the same problem. btw it should be r.iter_lines() you missed the underscore.</span>
