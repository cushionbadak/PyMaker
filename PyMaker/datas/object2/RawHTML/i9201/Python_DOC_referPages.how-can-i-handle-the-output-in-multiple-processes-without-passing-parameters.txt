<div class="post-text" itemprop="text">
<p>How do I share a queue to a number of processes,the code of these processes in multiple files, and I don't want to pass the queue as parameter.</p>
<p>I try to solve the problem, but failed.
I have three files</p>
<p><code>main.py</code></p>
<pre><code>from p_1 import test
from p_2 import queue_run
import multiprocessing


if __name__ == '__main__':
    process_1 = multiprocessing.Process(target=test)
    process_2 = queue_run()
    process_1.start()
    process_2.start()
    process_1.join()
    process_2.join()
</code></pre>
<p><code>p_1.py</code></p>
<pre><code>import time
from p_2 import queue_put


def test():
    var = ['a', 'b', 'c', 'd']
    for v in var:
        queue_put('something : ' + v)
        time.sleep(0.8)
</code></pre>
<p><code>p_2.py</code></p>
<pre><code>import multiprocessing

queue = multiprocessing.Queue()


def queue_put(something):
    queue.put(something)

class queue_run(multiprocessing.Process):
    def __init__(self):
        multiprocessing.Process.__init__(self)

    def run(self):
        while True:
            try:
                data = queue.get(timeout=1)
                print data
            except:
                break
</code></pre>
<p>Then I run main.py, but without any output.</p>
</div>
<div class="post-text" itemprop="text">
<p>The docs about <a href="https://docs.python.org/2/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow noreferrer">exchanging data between processes</a> explain that you hand over the queue to the process as an argument. Your code worked on my Mac (I would call that "by chance" as it's using undocumented feature which might be just a side effect of one python version), but not on Windows.</p>
<p>An important fact is that processes started with <code>multiprocessing</code> don't have a shared memory space (unlike threads, which do share their memory). The mechanisms to share objects are <a href="https://docs.python.org/2/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow noreferrer">pipes, queues</a> and objects created via <a href="https://docs.python.org/2/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">shared memory or server processes</a>.</p>
<p>That said: there are a few things which I would improve in your code:</p>
<ul>
<li>the split into three modules does not make sense to me, especially <code>p_1.py</code> and <code>p_2.py</code></li>
<li>it's not clear why you did a class <code>queue_run</code> when a normal function similar to <code>test</code> would do the trick as well</li>
</ul>
<p>Here's your example, condensed into one file. I left the class so you can see easily what I changed:</p>
<pre><code>import multiprocessing
import time


def test(queue):
    var = ['a', 'b', 'c', 'd']
    for v in var:
        queue_put(queue, 'something : ' + v)
        time.sleep(0.8)


def queue_put(queue, something):
    queue.put(something)

class queue_run(multiprocessing.Process):
    def __init__(self, q):
        multiprocessing.Process.__init__(self)
        self.queue = q

    def run(self):
        print "started"
        while True:
            try:
                data = self.queue.get(timeout=1)
                print "got from queue: ", data
            except:
                print "timed out"
                break

if __name__ == '__main__':
    queue = multiprocessing.Queue()
    process_1 = multiprocessing.Process(target=test, args=(queue,))
    process_2 = queue_run(queue)
    process_1.start()
    process_2.start()
    process_1.join()
    process_2.join()
</code></pre>
<p>P.S. you may want to call <code>test</code> producer and <code>queue_run</code> consumer, that's how they are called in programming jargon</p>
<p><strong>Update</strong>:</p>
<blockquote>
<p>if I pass the queue as a parameter to all sub modules to solve the above problem, I need to modify all the files, this is a complex project</p>
</blockquote>
<p>As you're working on Windows (as you noted in a comment) there's an important fact to know: If you create a new process, it will be <a href="https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods" rel="nofollow noreferrer">spawned</a>: a new python interpreter is started, your python modules are loaded new, and thus all global variables (like your queue) are initiated afresh with a new instance. That means there is <em>no way</em> to share a global variable with processes.</p>
<p>If you want to stay with multiprocessing, the only way is to pass them to the submodules. I cannot imagine that you have more than 50 submodules, so an hour of work with a good editor should do the trick.</p>
<p>The alternative though is to use <a href="https://pymotw.com/2/threading/" rel="nofollow noreferrer"><strong>threading</strong></a>: the downside is that you can only use one cpu core, the upside is that all your threads share the same memory space. The only thing you need to care about is to use thread safe data structures, such as a <a href="https://docs.python.org/2/library/queue.html#module-Queue" rel="nofollow noreferrer"><code>queue</code></a>.</p>
</div>
<span class="comment-copy">although you <b>should</b> pass the queue as a parameter, it seems to work also having it as global variable. Anyway: I cannot reproduce. When I run <code>python2 main.py</code> I get <code>something : a</code> from a to d</span>
<span class="comment-copy">That's unbelievable, I had try to run main.py on cmdline and Pycharm, I did not get any output.</span>
<span class="comment-copy">Does it still not work? I have reworked your example into something which is better aligned to the design of multiprocessing. I can post that if you want</span>
<span class="comment-copy">Oh, yes, I still did not solve the problem. If you can, I would like to see your code.</span>
<span class="comment-copy">Are you on Windows?</span>
<span class="comment-copy">Although the code doesn't work well on my Windows(this may be related to the platform), thank you very much.</span>
<span class="comment-copy">What's the error?</span>
<span class="comment-copy">On windows, process <code>queue_run</code> seems running in a separate memory space, <code>queue.get(timeout=1)</code> timeout but didn't get anything and raise <code>Empty</code> then quit. So I didn't get anything output. On linux, I got the same result as you.<code>something : a</code>..</span>
<span class="comment-copy">Alright. I'll try to debug on Windows in a few hours</span>
<span class="comment-copy">Yes, there are many methods I have not tried, and also do not understand the underlying knowledge. I still need to learn.</span>
