<div class="post-text" itemprop="text">
<p>I have a huge list of lists, this is a section of it:</p>
<pre><code>[['cusA', 'zupT', 'rcnA', 'cusA', 'zupT', 'zupT']]
</code></pre>
<p>I did the following operation on the entire list of lists:</p>
<pre><code>[list(x) for x in set(tuple(x) for x in my_list)]
</code></pre>
<p>because I would like to have unique information in the sublists. This returned the following:</p>
<pre><code>[['c', 'u', 's', 'A'], ['r', 'c', 'n', 'A'], ['z', 'u', 'p', 'T']]
</code></pre>
<p>Which is great, since it did become unique, but now I need them to be in their original from, without being broken up character-by-character.</p>
<p>Is there any way to re-join them inside the sublists?</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of <code>list(x)</code>, use <code>''.join(x)</code>.</p>
<p>But you can just put the strings themselves in a set instead of calling tuple: <code>list(set(my_list))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the ordering of the contents of the inner lists does not matter, you can turn them into a set, which is a an un-ordered collection of unique elements, and then turn that set back into a list:</p>
<pre><code>result = [list(set(li)) for li in my_list]
</code></pre>
<p>Prints:</p>
<pre><code>[['cusA', 'rcnA', 'zupT']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as you already mentioned: you can <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code></a> the strings:</p>
<pre><code>print(''.join(['c', 'u', 's', 'A'])) # cusA
</code></pre>
<p>for your whole list you could do this:</p>
<pre><code>lst = [['c', 'u', 's', 'A'], ['r', 'c', 'n', 'A'], ['z', 'u', 'p', 'T']]

str_lst = [''.join(item) for item in lst]
print(str_lst)  # ['cusA', 'rcnA', 'zupT']
</code></pre>
<p>note that there is no point in creating a list of single characters; a string itself behaves exactly like a list of characters (an immutable one, though); so you could directoy do this:</p>
<pre><code>print(set(['cusA', 'zupT', 'rcnA', 'cusA', 'zupT', 'zupT']))
# {'zupT', 'cusA', 'rcnA'}
# if you need a list again instead of a set:
print(list(set(['cusA', 'zupT', 'rcnA', 'cusA', 'zupT', 'zupT'])))
# ['zupT', 'cusA', 'rcnA']
</code></pre>
<p>that will not preserve the order though...</p>
</div>
<span class="comment-copy">Does the ordering of the lists inside the list matter?</span>
<span class="comment-copy">Is <code>my_list</code> the list in the first part? Because then I get a different result.</span>
<span class="comment-copy">Hi. my_list is the outer list @tobias_k</span>
<span class="comment-copy">Please show how the output should look if there's more than one sublist. It is not clear whether you want to merge the lists, and whether duplicates should only be removed within sublists, or also between sublists.</span>
<span class="comment-copy">Sorry, you are right, I wasn't clear enough. I'll add expected output to the post.  I only wanted to remove the duplicates within sublists.</span>
<span class="comment-copy">If order of the lists does not matter*</span>
