<div class="post-text" itemprop="text">
<p>I am trying to find 9 letter words, that when you split evenly into 3 parts, and jumble around, you get another nine letter word.</p>
<pre><code>for i in nineWordList:
    for j in nineWordList:
        if (i[3:5] + i[0:2] + i[6:8]) == j:
            correctWords.append(i)
        elif (i[3:5] + i[6:8] + i[0:2]) == j:
            correctWords.append(i)
        elif (i[0:2] + i[6:8] + i[3:5]) == j:
            correctWords.append(i)
        elif (i[6:8] + i[0:2] + i[3:5]) == j:
            correctWords.append(i)
        elif (i[6:8] + i[3:5] + i[0:2]) == j:
            correctWords.append(i)
</code></pre>
<p>This is how I do it. The only problem is nineWordList is 68,000 elements long, and this takes ages. How can I improve this, to make it more efficient?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">set</a> to avoid having to loop on two levels through the list:</p>
<pre><code>nineWordSet = set(nineWordList)
for i in nineWordSet:
    if i[3:5] + i[0:2] + i[6:8] in nineWordSet:
        correctWords.append(i)
    elif i[3:5] + i[6:8] + i[0:2] in nineWordSet:
        correctWords.append(i)
    elif i[0:2] + i[6:8] + i[3:5] in nineWordSet:
        correctWords.append(i)
    elif i[6:8] + i[0:2] + i[3:5] in nineWordSet:
        correctWords.append(i)
    elif i[6:8] + i[3:5] + i[0:2] in nineWordSet:
        correctWords.append(i)
</code></pre>
<p>This will still have to loop through all those 68,000 entries (you obviously cannot avoid that) but in a first pass, it will convert the list into a set, so membership tests using <code>in</code> can be made in constant time. This gives you a linear time complexity instead of the quadratic time complexity that your nested loops had. Of course, the additional set will require more memory but that shouldn’t be a problem.</p>
<hr/>
<p>Btw. I believe your slicing is off. <code>i[0:2]</code> will not produce a 3-letter word (when you want to split a 9-letter word evenly):</p>
<pre><code>&gt;&gt;&gt; x = 'abcdefghi'
&gt;&gt;&gt; x[0:2], x[3:5], x[6:8]
('ab', 'de', 'gh')
</code></pre>
<p>The second index in slices is always non-inclusive so you need to increase that by one:</p>
<pre><code>&gt;&gt;&gt; x[0:3], x[3:6], x[6:9]
('abc', 'def', 'ghi')
</code></pre>
<p>You can also shorten your conditions a bit by using <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a> to generate those possible jumpled words. That way, your checks might be a bit nicer to the eye:</p>
<pre><code>import itertools
nineWordSet = set(nineWordList)

for word in nineWordSet:
    for perm in itertools.permutations((word[0:3], word[3:6], word[6:9])):
        # skip the original permutation
        if perm == word:
            continue

        elif perm in nineWordSet:
            correctWords.append(word)

            # stop checking for more permutations
            break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Put all your valid words in a Python set and then loop through the set rearranging the words in the manner you've described. For each rearrangement, check to see if it is in the set.</p>
<p>Since Python's set is <a href="https://stackoverflow.com/questions/3949310/how-is-set-implemented">based on a hash table</a> the look-ups occur in <code>O(1)</code> (constant) time. For a constant number of rearrangements per word, your algorithm then works in <code>O(n)</code> time, which is far better than the <code>O(n^2)</code> algorithm you have now.</p>
<p>The revised code looks like this:</p>
<pre><code>nineWordSet = set(nineWordList)
for i in nineWordSet:
  if i[3:5] + i[0:2] + i[6:8] in nineWordSet:
    correctWords.append(i)
  elif i[3:5] + i[6:8] + i[0:2] in nineWordSet:
    correctWords.append(i)
  elif i[0:2] + i[6:8] + i[3:5] in nineWordSet:
    correctWords.append(i)
  elif i[6:8] + i[0:2] + i[3:5] in nineWordSet:
    correctWords.append(i)
  elif i[6:8] + i[3:5] + i[0:2] in nineWordSet:
    correctWords.append(i)
</code></pre>
<p>Your previous code was slow because for each word you had to look at all the other words (technically, half of them, on average). That's about 2,312,000,000 words you have to look at; that's what's meant by <code>O(n^2)</code>. In the new code for each word you only have to look in one well-defined place, so you only look at 68,000 words. That's the benefit of <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">hash tables</a>, which can often give you <code>O(n)</code> performance on a dataset.</p>
</div>
<span class="comment-copy">If <code>correctWords</code> becomes a set, you can replace the <code>for j</code> loop by <code>if something in correctWords</code>, and it will be fast enough, O(log #entries).</span>
<span class="comment-copy">Thanks! Worked great! Btw though you wrote 'w' instead of 'word' in the for loop</span>
<span class="comment-copy">Note that the two algorithms possibly produce different results. The second collects all permutations that occur in the original list, except for the original word (which is debatable). Whereas the first algorithm (if...elif...elif...) only records the first match - all further permutations are mistakenly skipped.</span>
<span class="comment-copy">@user1016274 No, what is being appended to the <code>correctWords</code> in my second code example is the original <code>word</code>, not the permutation <code>perm</code>. And once <i>any</i> permutation match has been found, the remaining permutations of that word are no longer being looked at (that’s what the <code>break</code> does, essentially moving to the next <code>word</code>).</span>
