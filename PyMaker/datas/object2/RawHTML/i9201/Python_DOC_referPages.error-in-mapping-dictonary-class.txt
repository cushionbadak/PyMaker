<div class="post-text" itemprop="text">
<p>I'm trying to create a simple mapping class where when keys are 1-1, e.g. <code>key1:key2, key2:key1</code>. I'm running into an error when I'm checking to see if the class is equal to a value I enter, I should be getting <code>True</code> but I keep getting <code>False</code>. </p>
<pre><code>&gt;&gt;&gt; m=Mapping()
&gt;&gt;&gt; m[2]=3
&gt;&gt;&gt; m
Mapping({2: 3, 3: 2})
&gt;&gt;&gt; m==Mapping({2: 3, 3: 2})
False
</code></pre>
<p>I'm not sure what I'm doing wrong, my code is below, any help would be appreciated. </p>
<pre><code>class Mapping():
    def __init__(self, dic={}):
        self.Dict = dict(dic)
    def __repr__(self):
        return "Mapping({})".format(self.Dict)
    def __getitem__(self, loc=0):
        return self.Dict[loc]
    def pop(self, popn=0):
        popm = self.Dict[popn]
        self.Dict.pop(popn, None)
        self.Dict.pop(popm, None)
    def __setitem__(self, x, y):
        self.Dict[x]=y
        self.Dict[y]=x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>Mapping</code> class has to implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code></a> magic method in order for <code>==</code> to work properly. Assuming that two <code>Mappings</code> are equal if the <code>Dict</code> is equal, you can try somehting like this:</p>
<pre><code>    def __eq__(self, other):
        if isinstance(other, Mapping):
            return self.Dict == other.Dict
        return False
</code></pre>
<p>Without this, <code>==</code> will fall back to checking whether those are the same instance, i.e. what <code>is</code> does.</p>
<hr/>
<p>Often, when you implement <code>__eq__</code>, you would also implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__</code></a> method, so the two are consistent. Again, you could simply delegate to <code>self.Dict</code> for the hash, but <code>dict</code> is not hashable (for good reasons, see below), but you could hash the items:</p>
<pre><code>    def __hash__(self):
        return hash(frozenset(self.Dict.items()))
</code></pre>
<p>Without <code>__hash__</code>, you could e.g. not use your <code>Mapping</code> class as key inside another dictionary. However, this setup is problematic, as the <code>dict</code> is mutable, so <code>hash(m)</code> might change between uses, making it impossible to retrieve the <code>Mapping</code> from the <code>dict</code> or <code>set</code> at a later time.</p>
</div>
<span class="comment-copy">Implementing <code>__eq__</code> might help...</span>
<span class="comment-copy">I don't see any difference in functionality with basic dict. Defining <code>__eq__ </code> magic method would help, but why are you trying to reimplement dictionary based on dictionary?</span>
<span class="comment-copy">@NikolayProkopyev His dict automatically provides the reverse mapping, it appears.</span>
<span class="comment-copy">You should implement <code>__hash__</code> too in this case, right?</span>
<span class="comment-copy">@tobias_k, could you please explain why the <code>__hash__</code> is necessary?</span>
<span class="comment-copy">@NikolayProkopyev See my edit. However, in this particular case implementing <code>__hash__</code> actually does not make sense, just like for "normal" mutable <code>dict</code>.</span>
<span class="comment-copy">Yeah, I was trying to guess why :) Your edit looks reasonable. Also, it is probably better to fix words "you should also implement the <code>__hash__</code> method", since it is not 100% necessary, and depends.</span>
<span class="comment-copy">I definitely <i>wouldn't</i> be implementing <code>__hash__</code>. Mutable objects that can be hashed are scary! An object that does define <code>__hash__</code> must define <code>__eq__</code>, but the converse is certainly not true. See <a href="https://docs.python.org/3.6/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">the <code>__hash__</code> docs</a></span>
