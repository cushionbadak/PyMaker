<div class="post-text" itemprop="text">
<p>I imported a CSV using Pandas and one column was read in with string entries. Examining the entries for this Series (column), I see that they should actually be lists. For example:</p>
<pre><code>df['A'] = pd.Series(['["entry11"]', '["entry21","entry22"]', '["entry31","entry32"]'])
</code></pre>
<p>I would like to extract the list elements from the strings. So far, I've tried the following chain:</p>
<pre><code>df['A'] = df['A'].replace("'",'',regex=True).
                  replace('\[','',regex=True).
                  replace('\]','',regex=True).
                  str.split(",")
</code></pre>
<p>(all on one line, of course).</p>
<p>and this gives me back my desired list elements in one column.</p>
<ul>
<li>['"entry11"']</li>
<li>['"entry21", "entry22"']</li>
<li>['"entry31", "entry32"']</li>
</ul>
<p>My question: Is there a more efficient way of doing this? This seems like a lot of strain for something that should be a little easier.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html" rel="nofollow noreferrer">"apply"</a> the <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a> to the series:</p>
<pre><code>In [8]: from ast import literal_eval

In [9]: df['A'] = df['A'].apply(literal_eval)

In [10]: df
Out[10]: 
                    A
0           [entry11]
1  [entry21, entry22]
2  [entry31, entry32]
</code></pre>
<p>There is also <code>map()</code> and <code>applymap()</code> - here is a topic where the differences are discussed:</p>
<ul>
<li><a href="https://stackoverflow.com/q/19798153/771848">Difference between map, applymap and apply methods in Pandas</a></li>
</ul>
</div>
<span class="comment-copy">Thanks! I knew <code>ast.literal_eval</code> would do it, but I don't know pandas so I didn't know you can map that easily over the series</span>
<span class="comment-copy">@AdamSmith generally, you want to avid <code>.apply</code> for performance reasons because it just wraps a for-loop in Python, although, in some cases you don't have a choice.</span>
<span class="comment-copy">Thanks! That answers my question!! As a side question (if that's possible) what if some of the entries are pure strings rather than lists inside of strings, like "entry" rather than "[entry]'?</span>
<span class="comment-copy">@Chris sure, if the <code>"entry"</code> is enclosed into quotes, then <code>literal_eval</code> would be able to safely evaluate it (the solution would work as is). If not, you might need a custom function where you can handle possible <code>ValueError</code>s thrown by <code>literal_eval()</code> and return, for example, the same unevaluated string.</span>
