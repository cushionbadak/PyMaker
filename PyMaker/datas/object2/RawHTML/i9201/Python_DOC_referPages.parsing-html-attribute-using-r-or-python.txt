<div class="post-text" itemprop="text">
<p>So I have a HTML file with a bunch of <code>&lt;span&gt;</code> tags with <code>style="font-size:...px"</code>, and I want to automatically find the <code>&lt;span&gt;</code> with the biggest font-size and get the text that's between the span tags. Preferably in R or Python, but other methods are welcome as well. Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3, you can use <a href="https://docs.python.org/3/library/html.parser.html" rel="nofollow noreferrer"><code>html.parser</code></a>. (For Python 2.x you will need to look at <a href="https://docs.python.org/2/library/htmlparser.html" rel="nofollow noreferrer"><code>HTMLParser</code></a>)</p>
<p>An example would be:</p>
<pre><code>from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):

    def __init__(self, min_span):
        HTMLParser.__init__(self)

        #Keep track of our maximum entry thus far
        self.max_span = min_span #set a minimum font size if you like, or just use 0
        self.max_text = [] #to keep track of many entries

        #This flags to the object to get data if we found a span tag
        #with a new highest font-size
        self.recording = 0

    def handle_starttag(self, tag, attrs):

        #Ignore all other tags
        if tag != 'span':
            return

        for name, value in attrs:
            if name != 'style':
                continue

            for css_style in value.split(";"):
                sub_attrib = css_style.split(":")
                if sub_attrib[0].strip() != 'font-size':
                    continue

                this_size = int(sub_attrib[1][:-2])
                if (this_size &gt; self.max_span):
                    self.max_text = [] #'reset' the list for new maximum font-size
                    self.max_span = this_size
                    self.recording = 1
                elif (this_size == self.max_span): #For equally large span font-size tags
                    self.recording = 1

    def handle_endtag(self, tag):
        """
        Turns off recording flag
        """
        if tag == 'span' and self.recording:
          self.recording = 0

    def handle_data(self, data):
        if self.recording:
          self.max_text.append(data)
</code></pre>
<p>Not very good with HTML (as evident from my previous answer), so you may need more control flow for edge-cases</p>
<p>Useage:</p>
<pre><code>parser = MyHTMLParser(0)
parser.feed("""
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;My First Heading&lt;/h1&gt;

    &lt;p&gt;My first paragraph.&lt;/p&gt;

    &lt;span style="font-size:10px;font-family:test"&gt;Not this one&lt;/span&gt;
    &lt;span style="font-size:20px"&gt;Not this one either&lt;/span&gt;
    &lt;span style="font-size:60px;font-family:hello"&gt;Yay!&lt;/span&gt;
    &lt;span style="font-size:10px"&gt;Nope&lt;/span&gt;
    &lt;span style="font-size:60px"&gt;Also this one&lt;/span&gt;

&lt;/body&gt;
&lt;/html&gt;
""")

print(parser.max_text) #prints out ['Yay!', 'Also this one']

#to get individual entry
list_of_text = parser.max_text
first_maximum_text = list_of_text[0]
</code></pre>
<p>Edit: For going through all HTML files in a directory (in example, it is the current directory). This implementation will find the maximum value across all HTML files (if you want to the analysis once for each HTML file, initialize the <code>MyHTMLParser</code> after each iteration and handle the results)</p>
<pre><code>import os

def main():

    parser = MyHTMLParser(0)

    for file in os.listdir("./"):
        if file.endswith(".html"):
            with open(file, 'r') as fd:
                parser.feed(fd.read())

    print(parser.max_text)

if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">Comments are not for extended discussion; this conversation has been <a href="http://chat.stackoverflow.com/rooms/134080/discussion-on-answer-by-k-j-phan-parsing-html-attribute-using-r-or-python">moved to chat</a>.</span>
