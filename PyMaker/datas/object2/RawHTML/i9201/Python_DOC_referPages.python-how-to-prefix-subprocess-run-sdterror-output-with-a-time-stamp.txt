<div class="post-text" itemprop="text">
<p>I want to prefix the sdterror output from subprocess.run with a time stamp, unfortunately I have not been about to figure out how to do so.</p>
<p>This part of my shell script runs FFMPEG and writes the output to a logfile :</p>
<pre><code>try:
    conform_result = subprocess.run(ffmpeg_conform, stdout=PIPE, stderr=PIPE, universal_newlines=True)
    print(conform_result.stderr)
    c_log = open(config.transcode_logs + 'c_' + task_id + '_detail.txt', 'w')
    c_log.write(conform_result.stderr)
    c_log.close()
except Exception as e:
print('task ' + task_id + ' has failed for the following reason: ' + e)
</code></pre>
<p>I have done a lot of research into this and I can't seem to find a solution, from what I have been <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer">reading</a> the .run is the recommended approach for running subprocess.</p>
<p>I know how to create the time stamp:</p>
<pre><code>str(datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"))
</code></pre>
<p>Can someone explain how i would prefix the time stamp to each new line from the subprocess.run() call?</p>
<p>EDIT:</p>
<p>Just to be clear I want a timestamp at the start of each line, here is what I am getting using <a href="http://pastebin.com/tVdRKBX9" rel="nofollow noreferrer">log</a></p>
<p>Here is my <code>logging</code> code:</p>
<pre><code>file_log = logging.getLogger()
file_log.setLevel(logging.DEBUG)
fh = logging.FileHandler(filename=task_log + 'task_' + task_id + '.txt')
formatter = logging.Formatter(fmt='%(asctime)s %(levelname)s: %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S')
fh.setFormatter(formatter)
file_log.addHandler(fh)

# Conform section.
ffmpeg_conform_cmd, seg_number = functions.parse_xml(core_metadata_path, processing_temp_conform, base_mp4)
            ffmpeg_conform = str(ffmpeg_conform_cmd).replace('INPUT_FILE', conform_source)
print(timestamp() + ': ' + ffmpeg_conform)
logging.info(ffmpeg_conform)

# Updated database stating that the conform process has started
sql_conform = "UPDATE task SET status ='Conforming' WHERE task_id ='" + task_id + "'"
cursor.execute(sql_conform)
dbc.commit()
try:
   conform_result = subprocess.run(ffmpeg_conform, stdout=PIPE, stderr=PIPE, universal_newlines=True)
   print(timestamp() + ': ' +conform_result.stderr)
   file_log.info(conform_result.stderr)
except Exception as e:
   print(timestamp() + ': Conform has Failed: ' + task_id)
   print(e)
   file_log.error('Conform has Failed: ' + task_id)
   file_log.error(e)
</code></pre>
<p>I think the issue is that <code>conform_result.stderr</code> is a string and I cannot append by lines, is this the case?</p>
<p>BTW i am using python 3.5</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to log each execution in a separate, timestamp-named file.</p>
<p>First, notice that it's better to avoid <code>:</code> in file names. Windows cannot accept that, and you want portability. So I changed the format.</p>
<p>Basically, it's simple:</p>
<ul>
<li>compute the timestamp to capture start date</li>
<li>run the process</li>
<li>write the logfile with the timestamp in the name</li>
</ul>
<p>code:</p>
<pre><code>try:
    timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%d_%H_%M_%S")
    conform_result = subprocess.run(ffmpeg_conform, stdout=PIPE, stderr=PIPE, universal_newlines=True)
    log_file = os.path.join(config.transcode_logs,"c_{}_{}_detail.txt".format(timestamp,task_id))
    with open(log_file,"w") as c_log:
        c_log.write(conform_result.stderr)

except Exception as e:
    print('task {} has failed for the following reason: {}'.format(task_id,e))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This, <a href="https://docs.python.org/2/howto/logging-cookbook.html" rel="nofollow noreferrer">https://docs.python.org/2/howto/logging-cookbook.html</a>, should answer your questions - it mentions logging from different processes, timestamps, etc.</p>
</div>
<span class="comment-copy">you could use <code>Popen</code> instead, and timestamps the lines one by one. that'll work.</span>
<span class="comment-copy">I have tried using <code>Popen</code> but I am failing to get it to append each line with a timestamp. How would you go about doing this?</span>
<span class="comment-copy">I answered but now I'm not so sure. You shouldn't open the file after each popen or you'll destroy previous contents; You want only one file with dates on each line right?</span>
<span class="comment-copy">@Lewis909 You may want to take a look at the python logging module, it will do timestamps and much more.</span>
<span class="comment-copy">Does <code>logging</code> does timestamps on <i>file names</i> ?</span>
<span class="comment-copy">I am bowing to you on that one, Jean. It was not part of the question, but with subprocesses you don't want to write to the same file, that's what you are implying.</span>
<span class="comment-copy">And using <code>run</code>, you cannot possibly timestamp each line with the current timestamp. You're right: it should be a sole file, open outside the "loop" (that we don't see) and using <code>Popen</code> and <code>readline()</code> on process <code>stderr</code>, fed to the logging module. You could write such an answer.</span>
<span class="comment-copy">I did not mean to provide an answer - just wanted to point out to Lewis999 the functionality available in logging.</span>
