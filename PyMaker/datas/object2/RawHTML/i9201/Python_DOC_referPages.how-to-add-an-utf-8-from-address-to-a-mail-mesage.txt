<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10551933/python-email-module-form-header-from-with-some-unicode-name-email">Python email module: form header “From” with some unicode name + email</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I'm trying to send an email and have a small problem with the sender address in the header part of the message contents.</p>
<p>Basically, this is what I want to have in the headers:</p>
<pre><code>From: "Real Name" &lt;test@example.com&gt;
</code></pre>
<p>And this is what I do (Python 3.5):</p>
<pre><code>message = email.mime.text.MIMEText(body)
message.add_header('From', from_hdr)
</code></pre>
<p>It works as expected for ASCII, but not for UTF-8.</p>
<p>Given a non-ASCII name like <code>"Strángé Nämé" &lt;test@example.com&gt;</code> the input gets encoded by <code>add_header()</code>:</p>
<blockquote>
<p>If the value contains non-ASCII characters  .....  it is automatically
  encoded in RFC 2231 format using a CHARSET of utf-8 and a LANGUAGE of
  None.</p>
</blockquote>
<p>The problem is that the whole string - not only the real name - is encoded. The result looks like a single string: <code>=?utf-8?.....?=</code> and the original format is lost. The mail server adds the apparently missing domain to it and the damage is done.</p>
<p>The sender is then shown (decoded by the recipient's email program) as:
<code>"\"Strángé Nämé\" &lt;test@example.com&gt;"@server.example.com</code></p>
<p>I have tried to split the address using <code>email.utils.parseaddr()</code> and encode only the real name part with <code>email.utils.encode_rfc2231()</code> but this did not help.</p>
<p>I'm avoiding UTF-8 in the Form: field for now, don't know how to handle it properly. Could you please help?</p>
</div>
<div class="post-text" itemprop="text">
<p>The following worked for me (in python2 as well as python3):</p>
<pre><code># -*- coding: utf-8 -*-

import smtplib
from email.mime.text import MIMEText
from email.header import Header

msg = MIMEText("Hi! This is Mr. Robot!")

you = 'nehalxxxxx@somedomain.com'
me = Header('Strángé Nämé', 'utf-8')
me.append('&lt;test@example.com&gt;', 'ascii')

msg['Subject'] = 'Hi There'
msg['From'] = me
msg['To'] = you 

s = smtplib.SMTP('localhost')
s.sendmail(me.__str__(), [you], msg.as_string())
s.quit()
</code></pre>
<p>The trick is to use the <a href="https://docs.python.org/3/library/email.header.html#email.header.Header" rel="nofollow noreferrer">Header</a> class and the <a href="https://docs.python.org/3/library/email.header.html#email.header.Header.append" rel="nofollow noreferrer">append()</a> method</p>
<p>The message then looks like this (<code>msg.as_string()</code>):</p>
<pre><code>Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Subject: Hi There
From: =?utf-8?b?U3Ryw6FuZ8OpIE7DpG3DqQ==?= &lt;test@example.com&gt;
To: nehalxxxxx@somedomain.com
</code></pre>
</div>
<span class="comment-copy">Yes, the trick works for me too. The <code>Header</code> class documentation says that mixing string with different encodings is fine. Just wondering where is the separating space between the real name and the email address coming from. Anyway, the Form field is now OK. Thank you.</span>
