<div class="post-text" itemprop="text">
<p>I had written a python program to sort a two-dimensional array using the second column and if elements in the second column are the same sort by the first column. Though I solved the problem with my rudimentary python knowledge.
 I think it can be improved. Can anyone help optimizing it? 
Please also suggest if using other data types for sorting will be good option?</p>
<pre><code>#created a two dimensional array
two_dim_array=[[2, 5], [9, 1], [4, 8], [10, 0], [50, 32], [33, 31],[1, 5], [12, 5], [22, 5], [32, 5], [9, 5],[3, 31], [91, 32] ] 
#get the length of the array
n_ship=len(two_dim_array)
#sorting two dimensional array by using second column
sort_by_second_column=sorted(two_dim_array, key=lambda x: x[1], reverse=False)
#declared new variable for storing second soeted array
new_final_data=[]
#parameter used to slice the two dimensional column  
first_slice=0
    #tmp=[]
index=[0]
for m in range(1, n_ship):
        #print('m is: '+str(m)+'final_data[m-1][1] is: '+str(final_data[m-1][1])+'final_data[m][1] is: '+str(final_data[m][1]))
  #subtracting second column elements to detect  changes and saved to array
   if(abs(sort_by_second_column[m-1][1]-sort_by_second_column[m][1])!=0):
        index.append(m)
        # print(index)
        l=1
# used the above generated index to slice the data
for z in range(len(index)):
    tmp=[]
    if(l==1):
        first_slice=0
        last=index[z+1]
        mid_start=index[z]
        # print('l is start'+ 'first is '+str(first_slice)+'last is'+str(last))
        v=sort_by_second_column[:last]

    elif l==len(index):
        first_slice=index[z]
        # print('l is last'+str(1)+ 'first is '+str(first_slice)+'last is'+str(last))
        v=sort_by_second_column[first_slice:]
    else:
        first_slice=index[z]
        last=index[z+1]
        #print('l is middle'+str(1)+ 'first is '+str(first_slice)+'last is'+str(last))
        v=sort_by_second_column[first_slice:last]


    tmp.extend(v)
    tmp=sorted(tmp, key=lambda x: x[0], reverse=False)
        #print(tmp)
    new_final_data.extend(tmp)
       # print(new_final_data)
    l+=1


for l in range(n_ship):
        print(str(new_final_data[l][0])+' '+str(new_final_data[l][1]))


''' Input
    2 5
    9 1
    4 8
    10 0
    50 32
    33 31
    1 5
    12 5
    22 5
    32 5
    9 5
    3 31
    91 32

    Output
    10 0
    9 1
    1 5
    2 5
    9 5
    12 5
    22 5
    32 5
    4 8
    3 31
    33 31
    50 32
    91 32'''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should read the documentation on <code>sorted()</code>, as this is exactly what you need to use:
<a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#sorted</a></p>
<pre><code>newarray=sorted(two_dim_array, key=lambda x:(x[1],x[0]))
</code></pre>
<p>Outputs:</p>
<pre><code>[10, 0]
[9, 1]
[1, 5]
[2, 5]
[9, 5]
[12, 5]
[22, 5]
[32, 5]
[4, 8]
[3, 31]
[33, 31]
[50, 32]
[91, 32]
</code></pre>
</div>
<span class="comment-copy">@Thank you Trelzevir. I will work on your suggestion.</span>
<span class="comment-copy">You could also use <code>itemgetter(1, 0)</code> as key, which is effectively same as the lambda.</span>
