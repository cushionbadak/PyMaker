<div class="post-text" itemprop="text">
<p>This is for a modern cryptography class that I am currently taking.</p>
<p>The challenge is the cryptopals challenge 3: Single-Byte XOR Cipher, and I am trying to use python 3 to help complete this.</p>
<p>I know that I am supposed to XOR the string and converted to English. The hex string is "1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736" which converts to "806748453371902409051174291875458592743800337585421566549206796642836053682239286" in decimal form. </p>
<p>I have XOR'd this against multiple hex byte combinations (2 hex digits), but I do not know how to convert this into English. Is it just brute force and educated guessing at this point?</p>
<p>I know about ETAOIN SHRDLU, but this hasn't really been that helpful.  </p>
<p>Thank you for your time and help.</p>
<hr/>
<p>ADDED: 
Additionally, I tried Challenge #4 but this code does not seem to work. But it did work for Challenge #3 so I am confused.</p>
<p><a href="http://cryptopals.com/sets/1/challenges/3" rel="nofollow noreferrer">Challenge #3</a>
<a href="http://cryptopals.com/sets/1/challenges/4" rel="nofollow noreferrer">Challenge #4</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Building on @falsetru's answer, but showing just the decoded string with the most space characters:</p>
<pre><code>&gt;&gt;&gt; encoded = '1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'
&gt;&gt;&gt; import binascii
&gt;&gt;&gt; nums = binascii.unhexlify(encoded)
&gt;&gt;&gt; strings = (''.join(chr(num ^ key) for num in nums) for key in range(256))
&gt;&gt;&gt; max(strings, key=lambda s: s.count(' '))
"Cooking MC's like a pound of bacon"
</code></pre>
<p>Instead of counting spaces, you could use <a href="https://en.wikipedia.org/wiki/Etaoin_shrdlu" rel="nofollow noreferrer">ETAOIN SHRDLU</a> ("the approximate order of frequency of the 12 most commonly used letters in the English language") for weights, but it's not necessary here.</p>
<p>Btw, I think it would've been good if you had linked to <a href="https://cryptopals.com/sets/1/challenges/3" rel="nofollow noreferrer">the challenge</a>.</p>
<hr/>
<p><strong>Edit:</strong> Alternatively, you can try to find the key (or a few most promising keys) and then only decode using that key (or those few keys). For example, assuming that counting the spaces will determine the winner:</p>
<pre><code>&gt;&gt;&gt; encoded = '1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'
&gt;&gt;&gt; import binascii
&gt;&gt;&gt; nums = binascii.unhexlify(encoded)
&gt;&gt;&gt; key = max(nums, key=nums.count) ^ ord(' ')
&gt;&gt;&gt; ''.join(chr(num ^ key) for num in nums)
"Cooking MC's like a pound of bacon"
</code></pre>
<p>This could even easily be done by hand (though the challenge tells you not to do that).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/binascii.html#binascii.hexlify" rel="nofollow noreferrer"><code>binascii.hexlify</code></a>, <a href="https://docs.python.org/3/library/binascii.html#binascii.unhexlify" rel="nofollow noreferrer"><code>binascii.unhexlify</code></a> to convert byte strings to hexadecimals or vice versa:</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify(b'HELLO')  # to Hex
b'48454c4c4f'
&gt;&gt;&gt; binascii.unhexlify('48454c4c4f')  # from Hex
b'HELLO'
</code></pre>
<hr/>
<p>Using <a href="https://docs.python.org/3/library/stdtypes.html#str.isprintable" rel="nofollow noreferrer"><code>str.isprintable</code></a>, you can filter out non-printable candidates:</p>
<pre><code>&gt;&gt;&gt; 'abcd'.isprintable()
True
&gt;&gt;&gt; '\x00'.isprintable()
False
&gt;&gt;&gt; '\x7f'.isprintable()
False
</code></pre>
<hr/>
<pre><code>import binascii

encoded = binascii.unhexlify('1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736')
for xor_key in range(256):
    decoded = ''.join(chr(b ^ xor_key) for b in encoded)
    if decoded.isprintable():
        print(xor_key, decoded)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With observation you can find "3737" in encoded string, so it can be "e","E","o","O","r","R" for an English word may be?
Using retro-engineering, XOR results shows "R","r","X","x","E","e" as potentials keys.
After trying theses potentials Keys you will obtain that "X" is the key ;-)</p>
</div>
<span class="comment-copy">Do you have a key for decrypt th cipher?</span>
<span class="comment-copy">There are 256 possible keys. It is any combination of two hex characters. I have tried a bunch of them, but I don't know what to look for in order to pick a key.</span>
<span class="comment-copy">Noted. I will do that in the future. How would you use ETAOIN SHRDLU to weight the characters? I was supposed to find the key by hand.</span>
<span class="comment-copy">@PhillipSloan Who said you're supposed to do it by hand? Not the challenge. The challenge says exactly the opposite, that you shall <b>not</b> do it by hand. For weights, I just noticed that if I just use the 12 letters, not including the space in the middle as I did yesterday, I actually have trouble making the correct result the highest-valued string...</span>
<span class="comment-copy">Ohhhh ok. I completely misread it. I thought it meant "Do it by hand. Don't write code to do it for you." Thank you for the clarification. Punctuation is important.</span>
<span class="comment-copy">@PhillipSloan I already solved challenge #4 with my first approach, just decoding every string with every possible key and printing the result with the most space characters. If that somehow doesn't work for you, try printing a few more of the best candidates instead of just one. Overall there are just two that have the highest number of space characters, and the correct answer is one of them.</span>
<span class="comment-copy">@PhillipSloan Also, the weighting I suggested in my above comment works very well. The correct answer gets a score of 353, and the second-highest score is only 318.</span>
<span class="comment-copy">You could use ETAOIN SHRDLU to find just the correct decoded message.</span>
<span class="comment-copy">This is possible answer got using code above: Cooking MC's like a pound of bacon</span>
<span class="comment-copy">@StefanPochmann, I tried and found that <code>ETAOIN SHRDLU</code> is not a message.</span>
<span class="comment-copy">@falsetru I tried using it as weights in two different ways, both led the correct result.</span>
<span class="comment-copy">@PhillipSloan, Please read these: <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List comprehension</a>, <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">Generator expression</a>, <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> , <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer"><code>chr</code></a></span>
