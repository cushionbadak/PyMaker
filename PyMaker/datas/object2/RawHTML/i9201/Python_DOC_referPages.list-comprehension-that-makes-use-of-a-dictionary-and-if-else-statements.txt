<div class="post-text" itemprop="text">
<p>I am a beginner to list comprehension and am having trouble figuring something out. According to examples I have looked at on stackoverflow and other sites, I have a list comprehension that seems like it should work, but I have not been able to accomplish the desired output, as I have been unable to figure out the correct syntax for what I want to accomplish. </p>
<p>Given a string, I would like my function to return the string with the alpha characters replaced with the value associated with a key in the provided dictionary. For that task my list comprehension works, but I also need any characters and spaces to stay intact (no change). </p>
<p><strong>Here is what I have tried:</strong></p>
<pre><code>#random dictionary for my example 
d = {'a': 'b', 'c': 'i', 'b': 'a', 'e': 'j', 'd': 'm', 'g': 'q','f': 'l',  
     'i': 'c', 'h': 'w', 'k': 'r', 'j': 'e', 'm': 'd','l': 'f', 'o': 'v', 
     'n': 's', 'q': 'g', 'p': 't', 's': 'n','r': 'k', 'u': 'x', 't': 'p', 
     'w': 'h', 'v': 'o', 'y': 'z', 'x': 'u', 'z': 'y'}
def cipher(message):
    word = list(message)
    word = [v for x in word for k,v in d.iteritems() if x == k]
    #word = [v for x in word for k,v in d.iteritems() if x == k else x for x in word]
    return "".join(word)

print cipher("that tree is far away!")
</code></pre>
<p>This returns my string with the alpha characters correctly changed, but with no spaces and with no ! mark. From further research, that lead me to try the else statement I have in the list comprehension that is commented out in my code example, but that doesn't work.  </p>
<p>Can I edit my syntax or can I not accomplish what I am trying to do using list comprehension?</p>
<p><strong>To further clarify:</strong></p>
<p>I am receiving this output: <code>pwbppkjjcnlbkbhbz</code></p>
<p>I want this output: <code>pwbp pkjj cn lbk bhbz!</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Your current approach filters out all characters that are not in the dictionary viz. whitespace and the exclamation.</p>
<p>You could use the <a href="https://docs.python.org/2/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>.get</code></a> method of the dictionary instead to fetch replacements and return the original character when a replacement character does not exist in your mapping:</p>
<pre><code>def decipher(message):
    return "".join(d.get(x, x) for x in message)

print decipher("that tree is far away!")
#pwbp pkjj cn lbk bhbz!
</code></pre>
<p>Note that strings are iterable so <code>word = list(message)</code> is really not necessary and can be dropped.</p>
<hr/>
<p><sub>On a another note, the name of the function probably reads better as <code>cipher</code></sub></p>
</div>
<span class="comment-copy">See also: <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>.translate()</code></a>.</span>
<span class="comment-copy">Your problem is that ' ' is not a key in d so it doesn't get translated. Add <code>' ' : ' '</code> as a dict element and spaces will come through. Ditto for punctuation.</span>
<span class="comment-copy">If you needed to do this with a data structure that did not provide <code>.get</code> or a similar call, the general approach would be to use Python's ternary expression. Eg <code>[i if i % 2 == 0 else 2*i for i in range(0, 10)]</code> to return a list of all the even integers and doubled odd integers from 0 through 9.</span>
<span class="comment-copy">@Moses Koledoye thank you for the suggestion. I changed to cipher</span>
