<div class="post-text" itemprop="text">
<p>I'm running pyspark on an Amazon EMR cluster. I have a very simple test script to see if I can write data to s3 using spark-submit ...</p>
<pre><code>from pyspark import SparkContext
sc = SparkContext()
numbers = sc.parallelize(range(100))
numbers.saveAsTextFile("s3n://my-bucket/test.txt")
sc.stop()
</code></pre>
<p>When I run this script using spark-submit in a python2.7 environment, it works just fine. But when I try to run the same script in a python3.4 environment, I get the following traceback ...</p>
<pre><code>Caused by: org.apache.spark.api.python.PythonException: Traceback (most recent call last):
File ".../pyspark/worker.py", line 161, in main 
    func, profiler, deserializer, serializer = read_command(pickleSer, infile)
File ".../pyspark/worker.py", line 54, in read_command
    command = serializer._read_with_length(file)
File ".../pyspark/serializers.py", line 164, in _read_with_length
    return self.loads(obj)
File ".../pyspark/serializers.py", line 419, in loads
    return pickle.loads(obj, encoding=encoding)
AttributeError: Can't get attribute 'unicode' on &lt;module 'builtins' (built-in)&gt;
</code></pre>
<p>I'm manipulating my python environment using conda and by setting the <code>PYSPARK_PYTHON</code> and <code>PYSPARK_DRIVER_PYTHON</code> variables.</p>
<p>Is there an issue using <code>saveAsTextFile</code> in python 3? Or am I missing a step in setting up my python 3 environment?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible that your EMR cluster is configured to use pyspark 2.7, while you are running python 3.4 which might cause a problem when using with pyspark 2.7</p>
<p>The following link describe how to configure Amazon EMR to use spark with python 3.4</p>
<blockquote>
<p>I know Python 3.4.3 is installed on an Amazon EMR cluster instances,
  but the default Python version used by Spark and other programs is
  Python 2.7.10. How do I change the default Python version to Python 3
  and run a pyspark job?</p>
</blockquote>
<p><a href="https://aws.amazon.com/premiumsupport/knowledge-center/emr-pyspark-python-3x/" rel="nofollow noreferrer">https://aws.amazon.com/premiumsupport/knowledge-center/emr-pyspark-python-3x/</a></p>
<hr/>
<p>There is the different implementation of the <code>range()</code> function in Python2 vs Python3.</p>
<p>In Python2 <code>range()</code> returns <code>a list of numbers</code>.<br/>
In Python2 <code>range()</code> returns <code>a generator</code>. </p>
<p>So when you are using Python3, the input you provide is a <code>generator</code> instead of <code>list of numbers</code></p>
<p><strong>More info about the different between <code>range()</code> in python2 vs python3:</strong></p>
<p><em>Python2</em>
<a href="https://docs.python.org/2/library/functions.html#range" rel="nofollow noreferrer">https://docs.python.org/2/library/functions.html#range</a>
 range(start, stop[, step])</p>
<blockquote>
<p>This is a versatile function to create lists containing arithmetic
  progressions. It is most often used in for loops. The arguments must
  be plain integers. If the step argument is omitted, it defaults to 1.
  If the start argument is omitted, it defaults to 0. The full form
  returns a list of plain integers [start, start + step, start + 2 *
  step, ...]. If step is positive, the last element is the largest start
  + i * step less than stop; if step is negative, the last element is the smallest start + i * step greater than stop. step must not be zero
  (or else ValueError is raised).</p>
</blockquote>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p><em>Python 3</em>
<a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#func-range</a>
<strong>range(start, stop[, step])</strong></p>
<blockquote>
<p>Rather than being a function, range is actually an immutable sequence
  type, as documented in Ranges and Sequence Types â€” list, tuple, range.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; range(10)
range(0, 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<p>export PYSPARK_PYTHON=python3</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, so it looks like this has nothing to do with python3, and everything to do with my conda environment. In short, I set up a conda environment in my <code>bootstrap.sh</code>, but I only actually activated it on the master node. So the master node was using conda python, but the workers were using system python.</p>
<p>My solution now is to set <code>PYSPARK_PYTHON=/home/hadoop/miniconda3/envs/myenv/python</code>.</p>
<p>Is there a better way to activate my conda environment on the worker nodes?</p>
</div>
<span class="comment-copy">Thanks for your response! I replaced <code>range(100)</code> with <code>['a', 'b', 'c', 'd']</code> and I added a <code>configuration.json</code> that defines <code>"PYSPARK_PYTHON": "/usr/bin/python3"</code>. Unfortunately I'm still getting the same error.</span>
