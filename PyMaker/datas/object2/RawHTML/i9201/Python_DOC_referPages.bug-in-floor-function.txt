<div class="post-text" itemprop="text">
<pre><code>floor(-1e-14 % 2)
Out[1]: 1.0

floor(-1e-16 % 2)
Out[2]: 2.0
</code></pre>
<p>I understand that <code>-1e-16</code> may be too close from <code>0</code>, but in no way the result of floor after a <code>% 2</code> operation should be 2 (0 or 1)!</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not a bug in floor.Check the result of <code>%</code></p>
<pre><code>In [61]: -1e-16 % 2
Out[61]: 2.0

In [62]: -1e-14 % 2
Out[62]: 1.99999999999999
</code></pre>
<p>You may read <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a> to know more on why <code>%</code> is behaving so. </p>
<p>The <a href="https://docs.python.org/2/library/decimal.html" rel="nofollow noreferrer">decimal</a> module provides support for decimal floating point arithmetic. It offers several advantages over the foat datatype. So for precise math on floating point values</p>
<p><strong>sys.float_info</strong></p>
<p>For detailed information about float type one may use <code>sys.flaot_info</code>.</p>
<p><code>sys.float_info.dig</code> shows  maximum number of decimal digits that can be faithfully represented in a float; For calculations that includes values with more digits you may not expect accurate results with the given precision</p>
<p>This is what i have got</p>
<pre><code>In [217]: import sys

In [218]: sys.float_info.dig
Out[218]: 15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're right that the result of <code>-1e-16</code> should not be <code>2.0</code>, but floats are weird, and infamously less than precise.  The specification of the <code>%</code> operator <a href="https://docs.python.org/3/reference/expressions.html#id17" rel="nofollow noreferrer">states</a>:</p>
<blockquote>
<p>While abs(x%y) &lt; abs(y) is true mathematically, for floats it may not be true numerically due to roundoff. For example, and assuming a platform on which a Python float is an IEEE 754 double-precision number, in order that -1e-100 % 1e100 have the same sign as 1e100, the computed result is -1e-100 + 1e100, which is numerically exactly equal to 1e100. The function math.fmod() returns a result whose sign matches the sign of the first argument instead, and so returns -1e-100 in this case. Which approach is more appropriate depends on the application.</p>
</blockquote>
</div>
<span class="comment-copy">Seems more like an issue with the <code>%</code> operator than a bug in <code>floor</code>.</span>
<span class="comment-copy">According to my Python 3.3.1, <code>-1e-16 % 2</code> is <code>2</code></span>
<span class="comment-copy">Presumably <code>%2</code> moves <code>-1e-16</code> to the positive range (essentially adding <code>2</code>), and consequently the number gets rounded and you get a weird result. Oh well. Floating points.</span>
<span class="comment-copy">let the downvotes roll! need more downvotes!  a new user asking a good question! quick, everyone! down down !</span>
<span class="comment-copy">Before claiming a bug in <code>floor()</code>, you should have looked at what you input to <code>floor()</code></span>
<span class="comment-copy">I don't see the reason for the downvote. This answers OP's question exactly (although an even better answer would be one which explains why <code>%</code> works like that).</span>
<span class="comment-copy">@JohnColeman I didn't downvote but it <i>is</i> a quirk in <code>floor</code>. Why does <code>floor(1.9)</code> return 1 and <code>floor(1.9999)</code> return 1 but <code>floor(1.99999999999999999999)</code> return 2?</span>
<span class="comment-copy">@Tagc probably that's because why <a href="https://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">@Tagc Try typing <code>1.99999999999999999999</code> at the prompt. <code>floor</code> is actually getting <code>2.0</code> as its argument, because <code>1.99999999999999999999</code> cannot be accurately represented as a floating-point value.</span>
<span class="comment-copy">@chepner Good point.</span>
<span class="comment-copy">I understand problems when we reach the ultimate limit of distinguishing 0.0 and not 0.0, i.e. when we are in the vicinity of  1.18 × 10−38, but 1e-16 is orders of magnitude above !</span>
<span class="comment-copy">@YvesSurrel real numbers which are exactly representable by floats are not evenly distributed. Just because a given <code>x</code> near 0 is representable doesn't imply that <code>2 + x</code> is. <code>2 + -1e-16</code> evaluates to <code>2.0</code>.</span>
<span class="comment-copy">Good point! It is true that (2.0 + 1e-16) - 2.0 is exactly 0.0</span>
