<div class="post-text" itemprop="text">
<p>I'm trying to execute 10 python scripts from python code and open each of them in a new shell window.</p>
<p>My code :</p>
<pre><code>for i in range(10):
    name_of_file = "myscript"+str(i)+".py"
    cmd = "python " + name_of_file
    os.system("gnome-terminal -e 'bash -c " + cmd + "'")
</code></pre>
<p>But each script file are not executing, I get only the live interpreter of python in the new terminal...</p>
<p>Thank you guys</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using the <code>subprocess</code> module (<a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">https://docs.python.org/2/library/subprocess.html</a>).<br/>
In this way, you'll write something like the following:</p>
<pre><code>import subprocess

cmd = ['gnome-terminal', '-x', 'bash', '-c']
for i in range(10):
    name_of_file = "myscript"+str(i)+".py"
    your_proc = subprocess.Popen(cmd + ['python %s' % (name_of_file)])
    # or if you want to use the "modern" way of formatting string you can write
    # your_proc = subprocess.Popen(cmd + ['python {}'.format(name_of_file)])
    ...
</code></pre>
<p>and you have more control over the processes you start.<br/>
If you want to keep using <code>os.system()</code>, build your command string first, then pass it to the function. In your case would be:</p>
<pre><code>cmd = 'gnome-terminal -x bash -c "python {}"'.format(name_of_file)
os.system(cmd)
</code></pre>
<p>something along these lines.<br/>
Thanks to @anishsane for some suggestions!</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that it is to do with the string quoting of the argument to os.system. Try this:</p>
<pre><code>os.system("""gnome-terminal -e 'bash -c "{}"'""".format(cmd))
</code></pre>
</div>
<span class="comment-copy">I would suggest using the subprocess module, you might have more control over each one...</span>
<span class="comment-copy">In addition to @fedepad I'd like to cite the documentation of <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a>: "The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function."</span>
<span class="comment-copy">Don't you think, that in the iteration 2, <code>cmd</code> will contain something like <code>['gnome-terminal', '-x', 'bash', '-c', 'python myscript0.py', 'python myscript1.py' ]</code> instead of <code>['gnome-terminal', '-x', 'bash', '-c', 'python myscript1.py' ]</code>...?</span>
<span class="comment-copy">true, will edit!</span>
<span class="comment-copy">btw, with previous code, you could have used <code>subprocess.Popen(cmd + ["python {}".format(name_of_file)])</code></span>
<span class="comment-copy">@anishsane True, and probably is cleaner this last one that you propose...!!! I like it!</span>
