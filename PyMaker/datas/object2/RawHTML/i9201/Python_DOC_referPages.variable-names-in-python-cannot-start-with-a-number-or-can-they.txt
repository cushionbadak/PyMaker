<div class="post-text" itemprop="text">
<p>This is somewhat academic, but nevertheless.</p>
<p>Python syntax forbids starting a variable name with a number. But this can be sidestepped like so:</p>
<pre><code>&gt;&gt;&gt; globals()['1a'] = 1
&gt;&gt;&gt; globals()['1a']
1
</code></pre>
<p>Likewise for <code>locals()</code>.</p>
<p>Does that mean, that Python actually allows it, just not very visible?</p>
<p><strong>edit:</strong></p>
<p>My question is not, whether it is allowed. I am aware, that it is formally not allowed in Python. The question is why can I work around it by addressing <code>globals()</code> directly, and does that break other rules or guidelines, does it maybe even have a good reason/application to allow that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python parser forbids naming variables that way, for the sake of parsing numbers and variables separately, as naming a variable <code>1e1</code> would create a chaos - is it the number <code>10.0</code> or the variable <code>1e1</code>?</p>
<p><em>"Python, please output for me <code>1e1</code>!" - "Why is it 10.0? I stored 100 over there!"</em></p>
<p><em>But</em> the variables are actually stored in a way that allows binding a string that starts with a number to a value, because that feature is no harm in hashing maps of any kind, and so using this "trick" you can achieve your wanted numeral-prefixed-name variable without hurting the parser severability.</p>
<p>I would say that technically, naming variables in that manner is <strong>not a violation</strong> to python guidelines, but it is highly discouraged, and as a rule unnecessary. Using <code>globals</code> for injecting variables is known as a very <strong>bad practice</strong> and this case should not be an outstanding.</p>
<hr/>
<p>Of course, python could have used an encloser to numerals like strings, say <code>*123*</code>, but I believe the intent of inventing python was to make programming easier, not stretching the limits of variable naming space. </p>
<hr/>
<p>Practically speaking, if you <em>must</em> use number-headed names you better do it with your own dictionary, rather than <code>globals</code>:</p>
<pre><code>&gt;&gt;&gt; number_headed_vars = {'1a': 100}
&gt;&gt;&gt; number_headed_vars['1a']
100
</code></pre>
<p>That way you can create your own variables system - and avoid abusing <code>globals()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what you can and can't do with that <code>1a</code> in globals. You can't really use it in a variable, unless you use all of it's definition in globals (I mean accessing that dictionary), which makes it very uncomfortable for usage (another reason for not doing that).</p>
<p>Basically, <code>1a</code> is not a real variable as <code>a1</code> , as shown in the following output:</p>
<pre><code>&gt;&gt;&gt; globals()['1a'] = 1
&gt;&gt;&gt; globals()['1a']
1

&gt;&gt;&gt; a = 1a
File "&lt;stdin&gt;", line 1
    a = 1a
         ^
SyntaxError: invalid syntax

&gt;&gt;&gt; a = globals()['1a']
&gt;&gt;&gt; a
1

&gt;&gt;&gt; globals()['a1'] = 5
&gt;&gt;&gt; a = a1
&gt;&gt;&gt; a
5
</code></pre>
</div>
<span class="comment-copy">The parser disallows it, but you can do it by hijacking <code>globals()</code>. But you're not really intended to do that.</span>
<span class="comment-copy">You can't use it as a variable later... so it isn't really a variable, even though it is in the same namespace.</span>
<span class="comment-copy">Your answer (duplicate): <a href="http://stackoverflow.com/questions/342152/why-cant-variable-names-start-with-numbers" title="why cant variable names start with numbers">stackoverflow.com/questions/342152/â€¦</a></span>
<span class="comment-copy">@steffan Modifying <code>locals</code> doesn't work [<a href="https://docs.python.org/3/library/functions.html#locals]" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#locals]</a> so you can only do this trick in <code>globals</code></span>
<span class="comment-copy">@DavidW I just tried it... it works in Python 3.6.0 and 2.7.13</span>
<span class="comment-copy">Hi, came back to this question because of upvotes wave, and seen the sentence <code>"1a is not a real variable."</code>. While this makes sense, it isn't true. The problem isn't that <code>1a</code> isn't a "real" variable. The reason you can't use it in your code is because the parser <b>can not tokenize <code>1a</code> as a variable</b> (if it could, it would have worked perfectly, since is it stored normally in the <code>globals</code>). The rest is all good.</span>
