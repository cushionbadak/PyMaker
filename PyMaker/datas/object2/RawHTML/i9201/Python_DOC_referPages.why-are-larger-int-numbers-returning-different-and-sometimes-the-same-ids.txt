<div class="post-text" itemprop="text">
<p>Today I learned about <code>id</code> and decided to put it to use and test things out. I know integers are immutable, so the id should be (?) the same. But as I was testing things out in the prompt, I noticed slight differences and wanted to find out the reason behind it.</p>
<pre><code>a = 1
id(a)    # 10055552
id(1)    # 10055552
a = int(1)
id(a)    # 10055552
</code></pre>
<p>Cool! All checks out so far. But then...</p>
<pre><code>a = 10000
id(a)           # 140230117375888
id(10000)       # 140230116779920
a = int(10000)
id(a)           # 140230116779920

# wait what?? try it again
id(10000)       # 140230116780080
# Huh!?
</code></pre>
<p>Ok, so testing things out, I noticed this behavior happened until 256. The id would be up to 8 digits long, and then 257 would return a larger id of 15 digits long. So <code>int</code> types need to be 8 bytes.. Testing this out:</p>
<pre><code>a = 256
id(a)     # 10063712
id(256)   # 10063712

a = 257
id(a)     # 140230116780080
id(257)   # 140230117375888
a = int(257)
id(a)     # 140230117375888
id(257)   # 140230116779920
</code></pre>
<p>So I figured out it has something to do with being 8 bytes long, but anything larger than 256 would re-use some of the same ids:</p>
<pre><code>140230116780080
140230116780048
140230116780144
140230117375888
140230116779920
</code></pre>
<p>Please note the above list is non-exhaustive.</p>
<p>What is happening here under-the-hood? Why are some ids being re-used? Testing out multiple variables:</p>
<pre><code>a = 257
b = 258
c = 259

id(a)      # 140230116780176
id(257)    # 140230116779984   &lt;--- reused?
id(b)      # 140230116780080
id(258)    # 140230116780144
id(c)      # 140230116780048
id(259)    # 140230116779984   &lt;--- reused?

id(257) == id(259)    # False
</code></pre>
<p>TL;DR - For integers above 256, why are some of the ids reused? I thought these id's were supposed to be unique during their lifetime, but some of these id's look identical but when comparing them, they are different? Please look at last example provided.</p>
<p>Also, why are there a select few id's used for these larger integers? Maybe this is different for systems using many more variables?</p>
<p>Tested this on Python 3.4.3, GCC 4.8.4 on linux.</p>
</div>
<div class="post-text" itemprop="text">
<p>As an optimization, Python pre-creates a range of int objects (I think it's -5...256 by default, this is a compile-time option), and always uses those objects in preference to creating a new int.  For ints outside that range, the chance of ever needing the exact same int again is considered too low to be worth the effort of checking to see if the needed int object already exists.</p>
<p>This is PURELY an implementation detail.  If your code ever actually cares about it, you are doing something horribly wrong.</p>
</div>
<span class="comment-copy">I'm not sure, but maybe IDs are "lost" if not saved to a variable. So those changes make sense.</span>
<span class="comment-copy">[<a href="https://docs.python.org/3/library/functions.html#id](python#id)" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#id](python#id)</a> says based on cpython implementation, the <code>id</code> returns the address of the object in memory. Why are some of these larger integers using different memory addresses, and sometimes they share the same memory address. Also, when comparing the memory addresses in the last example I gave, it returned false even though the memory addresses were the same? I guess what I'm trying to figure out is why it filters through different memory addresses (randomly?) and why they sometimes are the same?</span>
<span class="comment-copy">If two different ints exist at the same time, they definitely cannot have the same id.  If they DON'T exist at the same time (for example, if you did two separate <code>print id(...)</code>s, they can have the same id - and due to the way memory management is handled for int objects, it's quite likely that the last memory address used for an int will be reused.</span>
<span class="comment-copy">cool thanks for the explanation!</span>
