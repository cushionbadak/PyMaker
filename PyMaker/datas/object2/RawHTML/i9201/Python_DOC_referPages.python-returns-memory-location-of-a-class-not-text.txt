<div class="post-text" itemprop="text">
<p>I have some code which seems to print <code>[&lt;__main__.TCar object at 0x0245C1B0&gt;]</code> but I want it to print the actual contents of the list.</p>
<pre><code>class TCar():
  def __init__(self, Make, Model, EngineSize, Price):
    self.Make = str(Make)
    self.Model = str(Model)
    self.EngineSize = float(EngineSize)
    self.Price = float(Price)

Garage = []

for i in range(5):
  Make = input("Please enter the make of the car: ")
  Model = input("Please enter the model of the car: ")
  EngineSize = input("Please enter the engine size of the car: ")
  Price = input("Please enter the price of the car: ")
  Garage.append(TCar(Make, Model, EngineSize, Price))
  print(Garage)
</code></pre>
<p>What is wrong with my code?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to define either a <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow"><code>__str__</code> method</a> or a <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow"><code>__repr__</code></a> method for that:</p>
<pre><code>class TCar():
  def __init__(self, Make, Model, EngineSize, Price):
    self.Make = str(Make)
    self.Model = str(Model)
    self.EngineSize = float(EngineSize)
    self.Price = float(Price)

  def __repr__(self):
    return "&lt;Car {0} {1} {2} {3}&gt;".format(self.Make, self.Model, self.EngineSize, self.Price)

  def __str__(self):
    return "{0} {1}".format(self.Make, self.Model)
</code></pre>
<p>In a nutshell,  </p>
<p><code>__repr__</code> is used if there's a need to display "raw" content of the object, it's the kind you see when you are displaying the list's contents, so if you have a list of cars, it would look like this:<br/>
<code>[&lt;Car Tesla Model S 500bhp $100000&gt;, &lt;Car Smart Fortwo 80bhp $5000&gt;]</code></p>
<p><code>__str__</code> is used if you try to print the actual object, like <code>print(TeslaCar)</code> with <code>TeslaCar</code> being a <code>TCar</code> instance. It would give you something like <code>"Tesla Model S"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a list of objects here. Add something like:-</p>
<pre><code>def __str__(self):
  print self.Make, self.Model, self.EngineSize, self.Price
</code></pre>
<p>This would print the value of all attributes of object. Or you can modify the function as per your behavior requirement.</p>
</div>
<div class="post-text" itemprop="text">
<p>print the attribute one by one rather than printing garange once: print(self.attribute).Note that the attribute in the code is an instance of the object</p>
</div>
<div class="post-text" itemprop="text">
<p>You can either override <code>__str__</code> or <code>__repr__</code> like this:</p>
<pre><code>class TCar():
  def __init__(self, Make, Model, EngineSize, Price):
    self.Make = str(Make)
    self.Model = str(Model)
    self.EngineSize = float(EngineSize)
    self.Price = float(Price)

  def __repr__(self):
    return "{Make}-{Model} (v{EngineSize}/{Price}$)".format(**self.__dict__)

Garage = [TCar("Audi", "TT", "8", "80000")]
print(Garage)
# [Audi-TT (v8.0/80000.0$)]
</code></pre>
<p>Also you might want to check out <a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python">this question</a> about <code>__str__</code> vs. <code>__repr__</code>.</p>
</div>
<span class="comment-copy">you need to define a <code>def __str__(self):</code></span>
<span class="comment-copy">You will also see the repr output in the list</span>
