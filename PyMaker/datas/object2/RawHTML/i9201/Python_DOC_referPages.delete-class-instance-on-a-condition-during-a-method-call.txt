<div class="post-text" itemprop="text">
<p>my question is about class design and my current approach is inspired by <a href="https://stackoverflow.com/questions/4831307/is-it-bad-to-store-all-instances-of-a-class-in-a-class-field">this question/answer</a>. Starting from there, I create multiple instances of the class <code>Foobar</code> which are collected and can be accessed via the class <code>Foobar_Collection</code>. Additionaly, the class <code>Foo</code> should have some method which is occasionally called for all instances. Now, conditional on the outcome of the method, is there a way to instantly delete an instance?</p>
<pre><code>class Foobar_Collection(dict):
    def __init__(self, *arg, **kw):
        super(Foobar_Collection, self).__init__(*arg,**kw)
    def foobar(self,*arg,**kw):
        foo = Foo(*arg,**kw)
        self[foo.name] = foo
        return ins

class Foo(object):
    def __init__(self,name,something):
        self.name = name
        self.something = something
    # just some toy example method    
    def myMethod(self,x):
        if x &lt; 0:
            #delete self
        else:
            print(x)
</code></pre>
<p><strong>EDIT</strong></p>
<p>Here is what I have in mind so far, but this is not "instantly" and it's "outside".</p>
<pre><code>fc_collection = Foobar_Collection()
fc_collection.foobar( 'first', 42 )
fc_collection.foobar( 'second', 77 ) 

for name in fc_collection:
    # x will actually be a class attribute, for simplicity:
    if x&lt;0:
        del fc_collection[name]
    else
        print(x)    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually when you have an object kill itself, you know your design is wrong. This is the case here.</p>
<p>You have Foobar responsible for adding Foos to the collection, but you want Foo to be responsible for removing itself from the collection. </p>
<p>Either Foobar manages the collection or Foo manages the collection. That way only one of them is aware, for instance, of the nature of the collection. In your case both classes need to know the collection is a dictionary whose key is <code>foo.name</code> . </p>
<p>Once you figure out who handles the collection, you'll see Foos no longer need to delete themselves, and the ordinary Python garbage collector will work just fine.</p>
</div>
<span class="comment-copy">Remove Foo from the collection, by sure there are no other refs to it and then run gc.collect(), see <a href="https://docs.python.org/3/library/gc.html" rel="nofollow noreferrer">docs.python.org/3/library/gc.html</a>, also see <a href="http://stackoverflow.com/questions/6772481/how-to-force-deletion-of-a-python-object" title="how to force deletion of a python object">stackoverflow.com/questions/6772481/…</a>.</span>
<span class="comment-copy">What is <code>ins</code> in <code>Foobar_collection.foobar</code>?</span>
<span class="comment-copy">I understand that I could do <code>del fb_collection[name]</code>, however, I wonder wether this could be achieved inside <code>myMethod</code>? Otherwise, could you please show me an example of what you mean?</span>
<span class="comment-copy">@Patrick Haugh, sry that should be <code>foo</code>.</span>
<span class="comment-copy">You'll want to take care of this in <code>Foobar_Collection</code>.  In <code>Foo.myMethod</code> you can set some property of <code>Foo</code>, <code>Foo.check</code> to <code>True</code> if it should get removed.  Then you can recalculate the membership of <code>Foobar_collection</code> based on the <code>Foo.check</code> values.  Don't worry about calling the garbage collector manually or anything, just remove all the references you're keeping and it will happen automatically.</span>
<span class="comment-copy">I can imagine to include a method in <code>Foobar_Collection</code> which, upon being called, checks for some condition and deletes the respective instance. Could such be automated?</span>
<span class="comment-copy">I would make Foo aware of Foobar_Collection and receive it in its <b>init</b> method. Foo can then call "i_am_not_worthy" on Foobar_Collection when the time comes, and Foobar_Collection can then remove the instance from the collection.</span>
<span class="comment-copy">Could you give a minimal working example of your first statement please (make Foo aware of Foobar_Collection)?</span>
<span class="comment-copy">Tim: I disagree about making <code>Foobar</code> aware of <code>Foobar_Collection</code> (assuming that's what you meant—there is nothing named <code>Foo</code> in your code). The couples the two classes together and might get in the way of <code>Foobar</code> instances being in other kinds of collections or subclassing it later. Think generically. Give <code>Foobar</code> instances some kind of attribute, property, or method that would let other objects, such as <code>Foobar_Collection</code> instance or even just a standalone function, query it to see if it's a candidate for deletion (or some other operation).</span>
