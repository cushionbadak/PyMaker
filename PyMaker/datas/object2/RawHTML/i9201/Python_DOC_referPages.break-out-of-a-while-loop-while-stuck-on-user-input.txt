<div class="post-text" itemprop="text">
<p>I have the following code to get user input to do certain tasks. What I want is to break out of the user prompt when some other task, outside this module, is completed. So even though the shell is showing 'Enter Command:', I want it to stop waiting for a prompt from the user and continue to the other task. Is this even possible and if so, how? Thanks in advance.     </p>
<pre><code>    def get_user_input():
        while True:
            info = str(raw_input('Enter Command:'))
            if info == 'exit':
                break
            if info == 'do_something':
                do_something()
</code></pre>
<p>Edit:
Actually this is already in a thread and the thread closes correctly. The issue is the screen is stuck on the user prompt even though the user prompt is useless at that point since the thread calling for the input is already closed. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Using Signals</h2>
<p>you can use <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer">signal</a> module (linux / unix only)</p>
<pre><code>import signal


class UserInputTimeoutError(Exception):
    pass


def handler(signum, frame):
    raise UserInputTimeoutError('no input from user')

# Set the signal handler and a 5-second alarm
signal.signal(signal.SIGALRM, handler)
signal.alarm(5)

try:
    # This may hang indefinitely
    user_input = raw_input('please insert something here:')
    print('got %s from user' % user_input)

    # cancel the alarm signal
    signal.alarm(0)
except UserInputTimeoutError:
    print('\nno input from user')
</code></pre>
<p>output when input is 'hello':</p>
<pre><code>please insert something here:hello
got hello from user
</code></pre>
<p>output when no input for 5 seconds:</p>
<pre><code>please insert something here:
no input from user
</code></pre>
<p><br/></p>
<h2>Using Select</h2>
<p>another option is to use <a href="https://docs.python.org/3/library/select.html" rel="nofollow noreferrer"><code>select.select()</code></a> for non-blocking io operation.</p>
<p>the <code>get_user_input</code> function tries to read every 0.1 sec the sys.stdin, if there is data to read it reads single byte. if it encounters a new line it returns the string.</p>
<p>if the timeout passed we exit returning <code>None</code></p>
<p>the code:</p>
<pre><code>import select
import sys
import time


def get_user_input(msg, timeout=5):
    print(msg)
    user_input = []
    stime = time.time()

    while time.time() - stime &lt;= timeout:
        readables, _, _ = select.select([sys.stdin], [], [], 0.1)
        if not readables:
            continue
        chr = readables[0].read(1)
        if chr == '\n':
            return ''.join(user_input)
        user_input.append(chr)

user_input = get_user_input('please insert something:')

if user_input is None:
    print('no user input')
else:
    print('input is %s' % user_input)
</code></pre>
<p>example output for input <code>hello select</code>:</p>
<pre><code>please insert something:
hello select
input is hello select
</code></pre>
<p>example when no input for 5 seconds:</p>
<pre><code>please insert something:
no user input
</code></pre>
<h2>Windows support</h2>
<p>if you use windows for some reason you can check out this <a href="https://stackoverflow.com/a/2409034/7438048">answer</a> about  <a href="https://docs.python.org/2/library/msvcrt.html#msvcrt.kbhit" rel="nofollow noreferrer"><code>msvcrt</code></a> module. </p>
<p>basically its the same as <code>select.select</code> for non-blocking io using <code>msvcrt.kbhit()</code> to check if user returned input.</p>
<p>if you need more info please update about your OS.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use this answer to read until a timeout, then check a variable and exit if the variable is set to false. If not then attempt to read again.</p>
<p><a href="https://stackoverflow.com/a/2904057/2066459">https://stackoverflow.com/a/2904057/2066459</a></p>
<pre><code>import sys, select

print "Answer me!"
while var:
    i, o, e = select.select( [sys.stdin], [], [], 10 )

    if (i):
      print "You said", sys.stdin.readline().strip()
      break
</code></pre>
</div>
<span class="comment-copy">You could put it in a <i>thread</i> and kill the thread, but actually it is rather weird to ask a user for input and then all of a sudden change your mind...</span>
<span class="comment-copy">you can't do this with <code>raw_input()</code>. Maybe if you run it in thread then you could do something with this.</span>
<span class="comment-copy">@furas: I think technically you can if you wrap the code in a thread and call <code>kill</code> on it, but as said, it is very inelegant (and well "rude" I would say).</span>
<span class="comment-copy">Agree that the correct answer is "don't do this". In addition, the problem with killing the thread, is how do you know if the thread is waiting input versus processing "do_something()"?  Better to implement a "getch" type function that loops through key presses. Check out <a href="https://rosettacode.org/wiki/Keyboard_input/Keypress_check#Python" rel="nofollow noreferrer">rosettacode.org/wiki/Keyboard_input/Keypress_check#Python</a>  But really the entire answer to your question is the <code>threading</code> module or <code>multiprocessing</code> module that allow you do do stuff in parallel with some communication between processes.</span>
<span class="comment-copy">@WillemVanOnsem I think OP want to do something similar to message window with button "Cancel Action" in GUI, so maybe <code>Ctrl+C</code> could be better than <code>raw_input()</code> and command <code>exit</code>.</span>
<span class="comment-copy">Thank you so much. Using a timeout, I can check for an outside condition and break out of that while loop. Much appreciated.</span>
