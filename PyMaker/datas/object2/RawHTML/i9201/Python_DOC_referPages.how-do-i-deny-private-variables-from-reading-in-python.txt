<div class="post-text" itemprop="text">
<p>I am trying to execute javascript code in python, using <code>pyv8</code> safely. At the end of the day, I have an object being used by javascript, with few fields I would like to have hidden.</p>
<p>I know python doesn't have encapsulation <a href="https://stackoverflow.com/questions/28138734/how-do-i-make-private-variables-inaccessable-in-python">(as explained in this question)</a>, but yet, is there a way to disable access using <code>__getattribute__</code>?</p>
<pre><code>class Context(object):
    def __init__(self, debug):
        self._a = ...
        self._b = ...
        self._c = ...
        self._unlocked = False

    def __enter__(self):
        self._unlocked = True

    def __exit__(self, exc_type, exc_val, exc_tb):
        self._unlocked = False

    def __getattribute__(self, name):
        if object.__getattribute__(self, "_unlocked"):
            return object.__getattribute__(self, name)

        if name.startswith("_"):
            return None

        return object.__getattribute__(self, name)
</code></pre>
<p>So this object denies access to a "private" variables, unless unlocked using like this:</p>
<pre><code>ctx = Context()
...
with ctx:
   # _b is accessible here
   print ctx._b 
</code></pre>
<p>As far as there's no way to do <code>with</code> from javascript, nor to call <code>__enter__</code> since the object is "locked".</p>
<p>Seems not very efficient though. Is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a property getter that restricts access?</p>
<pre><code>class Context(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
    """I'm the 'x' property."""
        return "Property can not be accessed."

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
</code></pre>
<p>More info can be found here:
<a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#property</a></p>
</div>
<span class="comment-copy">Name mangling performed by two leading underscores will cover all valid use cases of 'private variables' in python.</span>
<span class="comment-copy">Note that variables like <code>__foo</code> will be mangled so they're not easily visible to code outside the class that contains them (although you can get around it). the <code>__</code> is more of a "stay away even if you're not technically prevented from doing so".</span>
<span class="comment-copy">Yes, '__a' is actually available as '_A__a' by compiler. What I want is to literally disable any way to get the value.</span>
<span class="comment-copy">Please tell me you're not doing this in an attempt to sandbox the JS so you can run untrusted code...</span>
<span class="comment-copy">@SeanMcSomething well, kinda. I want sandbox javascript code, not python. Is there a way to access object's attributes, if object denies so via <code>__getattribute__</code>? That's why I try to use <code>with</code>. Please explain why it's bad and why it won't work.</span>
<span class="comment-copy">The thing is that this doesn't prevent a user from accessing <code>foo._x</code>.</span>
<span class="comment-copy">If the user has a reference to <code>foo</code>, she can get to any of <code>foo</code>'s data.  This is why python no longer pretends to have a sandboxed execution mode.  What you're asking for isn't possible in Python.</span>
