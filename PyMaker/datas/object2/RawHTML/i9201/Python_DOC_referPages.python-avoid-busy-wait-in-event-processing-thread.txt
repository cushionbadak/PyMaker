<div class="post-text" itemprop="text">
<p>How can I avoid busy_wait from the event consumer thread using asyncio?
I have a main thread which generates events which are processed by other thread. My event thread has busy_wait as it is trying to see if event queue has some item in it...</p>
<pre><code>from Queue import Queue

from threading import Thread
import threading

def do_work(p):
    print("print p - %s %s" % (p, threading.current_thread()))

def worker():
    print("starting %s" % threading.current_thread())
    while True: # &lt;------------ busy wait
        item = q.get()
        do_work(item)
        time.sleep(1)
        q.task_done()

q = Queue()
t = Thread(target=worker)
t.daemon = True
t.start()

for item in range(20):
    q.put(item)

q.join()       # block until all tasks are done
</code></pre>
<p>How can I achieve something similar to the above code using asyncio?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>asyncio</code> makes sense only if you are working with IO, for example running an <a href="http://aiohttp.readthedocs.io/en/stable/" rel="nofollow noreferrer">HTTP server or client</a>.  In the following example <code>asyncio.sleep()</code> simulates I/O calls.  If you have a bunch of I/O tasks it can get as simple as:</p>
<pre><code>import asyncio

import random

async def do_work(i):
    print("[#{}] work part 1".format(i))
    await asyncio.sleep(random.uniform(0.5, 2))
    print("[#{}] work part 2".format(i))
    await asyncio.sleep(random.uniform(0.1, 1))
    print("[#{}] work part 3".format(i))
    return "#{}".format(i)


loop = asyncio.get_event_loop()
tasks = [do_work(item + 1) for item in range(20)]
print("Start...")
results = loop.run_until_complete(asyncio.gather(*tasks))
print("...Done!")
print(results)
loop.close()
</code></pre>
<p>see also <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future" rel="nofollow noreferrer"><code>ensure_future</code></a> and <a href="https://docs.python.org/3/library/asyncio-queue.html" rel="nofollow noreferrer"><code>asyncio.Queue</code></a>.</p>
</div>
