<div class="post-text" itemprop="text">
<p>I have a relatively complicated project that is managed by Gradle. Most modules are Java-based, so I'm using IntelliJ (and not PyCharm) as the IDE. The Python plugin works fine for the one Python module, except that I can't get unit tests to work.</p>
<p>The directory structure is roughly like this:</p>
<pre><code>project_root
|- aJavaModule
|  |- ...
|- anotherJavaModule
|  |- ...
|- python_module/
|  |- src/
|     |- __init__.py
|     |- util.py
|     |- test/
|        |- __init__.py
|        |- util.py
| ...
</code></pre>
<p>The <code>test/util.py</code> file is this:</p>
<pre><code>import unittest
from util import util_func

class TestUtilities(unittest.TestCase):

    def test_util_func(self):
        ...
</code></pre>
<p>There is a specific virtual environment set up for the Python module to run in. This is configured in the <code>Project Structure -&gt; Facets -&gt; python_module</code> as the Python Interpreter. I'm confident this is working as expected, because when working in the IDE it is properly finding relative files, dependent libraries, etc.</p>
<p>In fact, if I'm in <code>test/util.py</code> the IDE recognizes the <code>from util import util_func</code>: I can click through to the correct, etc.</p>
<p>If I right click on the test class and <code>Create Run/Debug Configuration</code> I can set all of that up. In this modal it includes <code>Add content roots to PYTHONPATH</code> and <code>Add source roots to PYTHONPATH</code>, so presumably the <code>src</code> and <code>test</code> directories are being found. (Note that <code>python_module/src</code> is marked as a source root in the Project Structure modal.) I've tried selecting that specific script as the test, everything in the folder, etc. I've also tried moving the <code>test</code> directory outside the <code>src</code> directory and marking it as a test directory. Again, the IDE can find the classes when editing files, but when I run the test it fails to.</p>
<p>Specifically, when I run the tests I get this:</p>
<pre><code>Testing started at 5:39 PM ...
Traceback (most recent call last):
  File "/Users/nathanielford/Library/Application Support/IntelliJIdea2016.3/python/helpers/pycharm/utrunner.py", line 172, in &lt;module&gt;
    module = loadSource(a[0])
  File "/Users/nathanielford/Library/Application Support/IntelliJIdea2016.3/python/helpers/pycharm/utrunner.py", line 65, in loadSource
    module = imp.load_source(moduleName, fileName)
  File "/Users/nathanielford/virtualenvironments/ideenv/lib/python3.5/imp.py", line 172, in load_source
    module = _load(spec)
  File "&lt;frozen importlib._bootstrap&gt;", line 693, in _load
  File "&lt;frozen importlib._bootstrap&gt;", line 673, in _load_unlocked
  File "&lt;frozen importlib._bootstrap_external&gt;", line 665, in exec_module
  File "&lt;frozen importlib._bootstrap&gt;", line 222, in _call_with_frames_removed
  File "/Users/nathanielford/repos/project_root/python_module/src/tests/util.py", line 2, in &lt;module&gt;
    from util import util_func
ImportError: cannot import name 'util_func'

Process finished with exit code 1
</code></pre>
<p>What do I need to do to get the IDE test runner to recognize the correct environment and path variables? (Simply switching to PyCharm is not an option.)</p>
<p>Outputting the system path (<code>sys.path</code>) I get the following:</p>
<pre><code>System path=['/Users/nathanielford/repos/project_root/python_module/src/tests', '/Users/nathanielford/repos/project_root/python_module/src', '/Users/nathanielford/repos/project_root/python_module', '/Users/nathanielford/Library/Application Support/IntelliJIdea2016.3/python/helpers/pycharm', '/Users/nathanielford/virtualenvironments/ideenv/lib/python35.zip', '/Users/nathanielford/virtualenvironments/ideenv/lib/python3.5', '/Users/nathanielford/virtualenvironments/ideenv/lib/python3.5/plat-darwin', '/Users/nathanielford/virtualenvironments/ideenv/lib/python3.5/lib-dynload', '/opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5', '/opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/plat-darwin', '/Users/nathanielford/virtualenvironments/ideenv/lib/python3.5/site-packages'] 
</code></pre>
<p>This seems to suggest that the <code>src</code> directory is, in fact, being found? So everything in that directory should be available?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is due to namespaces in Python. Since both your test and the file being tested are named 'util.py', Python imports from the first one it comes across in the Python path. </p>
<p>Since the tests dir is before the parent directory in that path variable, it will try to import from the test itself, which doesn't have that function defined.</p>
<p>Simply renaming the test to "test_util.py" would resolve the namespace issue</p>
</div>
<span class="comment-copy">As a debug step I would try adding before that import statement an import for the sys module, and then print out sys.path. That will list what the python path that being searched is, so you can check for discrepancies. Also, putting an "import pdb; pdb.set_trace()" in your code before that import would allow you to get a debug console to poke around with. (IDK if pdb is supported like that in intellij or not)</span>
<span class="comment-copy">Overlooked something. If the util.py file contains 'import util' what module are you loading from?? Python puts the current directory into the search path, so it may in fact be trying to import a function from itself, instead of the desired module. So rename your test to util_test.py and try it and see if it works</span>
<span class="comment-copy">@BretD Ah! I forgot I need to prepend python files with <code>test_</code> because the namespacing don't matter like it does in Java. Thanks for the catch! If you want to file an answer I'll accept it.</span>
<span class="comment-copy">Added it as an answer, glad it helped!</span>
<span class="comment-copy">Thanks! Out of curiosity, do you know if there is a way to specifically point to a file for an import? Or are you always doomed to need to make sure your file is not named the same as a module you're importing from?</span>
<span class="comment-copy">@NathanielFord Python uses packages to avoid namespace conflicts <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#packages</a> So you can add an _<i>init_</i>.py file to a directory and then you can use dot notation for imports.</span>
