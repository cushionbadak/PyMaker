<div class="post-text" itemprop="text">
<p>I am trying to sum the product of two different list items in the same line using for loop, but I am not getting the output as expected.</p>
<p><strong>My example code:</strong></p>
<pre><code>a = [1,2,3]
b = [4,5,6]

sum = 0              # optional element

score = ((sum+(a(i)*b(i)) for i in range(len(a)))

print score
</code></pre>
<p><strong>output:</strong></p>
<pre><code>&lt;generator object &lt;genexpr&gt; at 0x027284B8&gt;
</code></pre>
<p><strong>expected output:</strong></p>
<pre><code>32                   # 0+(1*4)+(2*5)+(3*6)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a> the lists to generate pairs, multiply them and feed to <a href="https://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><code>sum</code></a>:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [4,5,6]
&gt;&gt;&gt; sum(x * y for x, y in zip(a, b))
32
</code></pre>
<p>In above <code>zip</code> will return iterable of tuples containing one number from both lists:</p>
<pre><code>&gt;&gt;&gt; list(zip(a, b))
[(1, 4), (2, 5), (3, 6)]
</code></pre>
<p>Then generator expression is used to multiply the numbers together:</p>
<pre><code>&gt;&gt;&gt; list(x*y for x, y in list(zip(a, b)))
[4, 10, 18]
</code></pre>
<p>Finally <code>sum</code> is used to sum them together for final result:</p>
<pre><code>&gt;&gt;&gt; sum(x*y for x, y in list(zip(a, b)))
32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have some problems in your code, first off you cant index your list with parenthesis you need <code>[]</code>, secondly you've created a generator not a number.</p>
<p>You need to <code>zip</code> your lists first:</p>
<pre><code>In [3]: sum(i*j for i,j in zip(a, b))
Out[3]: 32
</code></pre>
<p>Or as a functional approach use <code>operator.mul</code> within <code>map</code> and <code>sum</code>:</p>
<pre><code>In [11]: from operator import mul 

In [12]: sum(map(mul, a, b))
Out[12]: 32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A generator by itself, even if applied so as to generate the list result, will just give you a list of the products. You still need to do something to add up the elements of the list, which you can't do inside your generator.</p>
<p>Your method looks like you've mixed generator syntax with a traditional <code>for</code> loop, which would look like this:</p>
<pre><code>score = 0
for i in range(len(a)):
  score = score + a[i]*b[i]
</code></pre>
<p>The cleanest, or at least most Pythonic, solution probably uses <code>zip</code> to combine the lists, a list comprehension to multiply the elements, and <code>sum</code> to add them all up:</p>
<pre><code>score = sum([x*y for (x,y) in zip(a,b)])
</code></pre>
<p>You could also use <code>reduce</code> for the full-on functional approach (note that you have to <code>import</code> it from <code>functools</code> if you use Python 3):</p>
<pre><code>score = reduce(lambda s,t: s+t[0]*t[1], zip(a,b), 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's take a close look at your code:</p>
<pre><code>score = ((sum+(a(i)*b(i)) for i in range(len(a)))
</code></pre>
<p>The right hand side of this statement is a generator expression. Think of a generator as a lazy list. It doesn't actually sum anything, so to be more correct you should do</p>
<pre><code>score = (a[i]*b[i] for i in range(len(a)))
</code></pre>
<p>(Note the brackets, not parentheses, for subscripting the lists.)</p>
<p>Now <code>score</code> is a generator which "contains" the products of corresponding elements of the original lists <code>a</code> and <code>b</code>.</p>
<p>The next step is to iterate over the list to sum the elements:</p>
<pre><code>for x in score:
    sum += x
print(sum)
</code></pre>
<p>As others have already posted, you can do this all in one line with <code>zip()</code> and <code>sum()</code> built-in functions:</p>
<pre><code>sum([x*y for x, y in zip(a, b)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [1,2,3]
b = [4,5,6]
ls = [x * y for x, y in zip(a, b)]
x = sum(ls) 
print x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [4,5,6]
&gt;&gt;&gt; sum(map(lambda x: x[0] * x[1], zip(a, b)))
32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have a large list, you might consider using numpy arrays.</p>
<pre class="lang-py prettyprint-override"><code>import numpy as np
arr1 = np.random.randint(0,2,300)
arr2 = np.random.randint(0,2500,300)

list1 = list(arr1)
list2 = list(arr2)

%timeit sum([x * y for x, y in zip(list1,list2)])

38.9 µs ± 795 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

%timeit arr1 @ arr2

1.23 µs ± 89.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
</div>
<span class="comment-copy">You shouldn't use <code>sum</code> as a variable name because that shadows the built-in <code>sum</code> function. As you can see in the answers below, that's a very useful function! But if you shadow its name with an integer by doing <code>sum = 0</code> then you will get the <code>TypeError: 'int' object is not callable</code> error message when you try to call it.</span>
<span class="comment-copy">I am getting this error: <code>Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: 'int' object is not callable</code></span>
<span class="comment-copy">@JitendraReddy Feel free to post a new question. Be sure to include the code which causes the error.</span>
<span class="comment-copy">@JitendraReddy Did you run exactly the same example as in the answer? It should work the same for both Python 3.x and 2.7.</span>
<span class="comment-copy">@JitendraReddy you are getting that error because you previously reassigned the name <code>sum</code> (a builtin function) to refer to <code>0</code> (an integer). Restart your python console and try not to override builtins, or alternatively just run <code>sum = __builtins__.sum</code> to get the <code>sum()</code> function back.</span>
<span class="comment-copy">Yeah I noticed too :-) But I figured it would be helpful to note the difference just in case unsuspecting Python 3 users try to use your answer.</span>
<span class="comment-copy"><code>sum</code> is a predefined function and therefore a poor name for the variable; assigning it the number will replace the standard function.</span>
<span class="comment-copy">@MarkReed Good point. I was reusing the name from the OP's original code.</span>
