<div class="post-text" itemprop="text">
<p>I'm trying to write a function which accepts a list of chars and return a list of tuples composed of the chars that were repetitive in the list and how many times they repeated. For example: if I have a list such as: <code>["a", "a", "b", "b", "b", "c", "a", "a"]</code>
It should return:</p>
<pre><code>[('a', 2), ('b', 3), ('c', 1), ('a', 2)]
</code></pre>
<p>I wrote a code for this but the output I get is:</p>
<pre><code>[('a', 2), ('b', 3), ('c', 1)]
</code></pre>
<p>Here is my code:</p>
<pre><code>def comress(lst):
    i = 0
    counter = 0
    new_list = []
    while i &lt; len(lst) -1:
        if lst[i] == lst[i+1]:
            counter += 1
            i += 1
        else:
            counter += 1
            tup = (lst[i], counter)
            new_list.append(tup)
            counter = 0
            i += 1

    return new_list
a = ["a", "a", "b", "b", "b", "c", "a", "a"]
print(comress(a))
</code></pre>
<p>I don't know what the problem is. I would like to hear your opinion. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>One liner with <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a> and <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> methods.</p>
<pre><code>from itertools import groupby
from collections import Counter

l1 = ["a", "a", "b", "b", "b", "c", "a", "a"]
print [Counter(g).items()[0] for _, g in groupby(l1)]
</code></pre>
<p>Output:</p>
<pre><code>[('a', 2), ('b', 3), ('c', 1), ('a', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to keep an extra counter, just increment the counter in the tuple if the value is the same as the previous one:</p>
<pre><code>def compress(lst):
    res = [(lst[0], 1)]  #  take first value
    for val in lst[1:]:  #  go through the rest of the values
        if val == res[-1][0]:  #  if the value is the same as the last one in res
            res[-1] = (val, res[-1][-1] + 1)   #  increment the count
        else:   # otherwise
            res.append((val, 1))  #  add a new value-count pair
    return res

print(compress(lst))
</code></pre>
<p>Output:</p>
<pre><code>[('a', 2), ('b', 3), ('c', 1), ('a', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code will only append to <code>new_list</code> when the current character is different from the previous one. When the list traversal ends though, it ignores the last streak of characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code does not insert into the list when it comes to the last items, if they are equal you don't insert them.</p>
<p>You need to check the last items as well, if they are equal so insert them as well, as in here:</p>
<pre><code>lst= ["a", "a", "b", "b", "b", "c", "a", "a"]
def comress(lst):
    i = 0
    counter = 0
    new_list = []
    while i &lt; len(lst) - 1:
        if lst[i] == lst[i+1]:
            counter += 1
            i += 1
        else:
            counter += 1
            tup = (lst[i], counter)
            new_list.append(tup)
            counter = 0
            i += 1
        if i + 1 == len(lst) and lst[i] == lst[i-1]:
            counter +=1
            tup = (lst[i], counter)
            new_list.append(tup)

    return new_list
a = ["a", "a", "b", "b", "b", "c", "a", "a"]
print(comress(a))

&gt;&gt;&gt; [('a', 2), ('b', 3), ('c', 1), ('a', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>from itertools import groupby
L = ["a", "a", "b", "b", "b", "c", "a", "a"]
newL = []
for k, g in groupby(L):
    tempL = list(g)
    newL.append((k, len(tempL)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is probably the most pythonic solution that uses your counter logic: </p>
<pre><code>def comress(lst):
    counter = 1
    new_list = []
    for val1, val2 in zip(lst[:-1], lst[1:]):
        if val1 == val2:
            counter += 1
        else:
            new_list.append((val1, counter))
            counter = 1
    new_list.append((val2, counter))
    return new_list

â€‹    
a = ["a", "a", "b", "b", "b", "c", "a", "a"]
print(comress(a))
</code></pre>
<p>Output:</p>
<pre><code>[('a', 2), ('b', 3), ('c', 1), ('a', 2)]
</code></pre>
</div>
<span class="comment-copy">This will return <code>('a', 4)</code></span>
<span class="comment-copy">@TerryA	Check now.</span>
