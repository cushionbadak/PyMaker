<div class="post-text" itemprop="text">
<p>My problem is, whenever I use thr.results() the program acts like its running on one thread. But when i don't you use thr.results() it will use x threads
so if I remove my if statement, it will run on 10 threads, if I have it in there it will act like its on one 1 thread</p>
<pre><code>def search(query):
    r = requests.get("https://www.google.com/search?q=" + query)
    return r.status_code

pool = ThreadPoolExecutor(max_workers=10)
for i in range(50):
    thr = pool.submit(search, "stocks")
    print(i)
    if thr.result() != 404:
        print("Ran")

pool.shutdown(wait=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.result" rel="nofollow noreferrer"><code>result</code></a> will wait for the future to complete:</p>
<blockquote>
<p>Return the value returned by the call. If the call hasn’t yet completed then this method will wait up to timeout seconds. If the call hasn’t completed in timeout seconds, then a concurrent.futures.TimeoutError will be raised. timeout can be an int or float. If timeout is not specified or None, there is no limit to the wait time.</p>
</blockquote>
<p>When you have <code>result</code> within a loop you submit a task, then wait it to complete and then submit another one so there can be only one task running at a time.</p>
<p><strong>Update</strong> You can either store the returned futures to a list and iterate over them once you have submitted all the task. Other option is to use <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import time

def square(x):
    time.sleep(0.3)
    return x * x

print(time.time())
with ThreadPoolExecutor(max_workers=3) as pool:
    for res in pool.map(square, range(10)):
        print(res)

print(time.time())
</code></pre>
<p>Output:</p>
<pre><code>1485845609.983702
0
1
4
9
16
25
36
49
64
81
1485845611.1942203
</code></pre>
</div>
<span class="comment-copy">Hmm I see now, anything you would suggest to have the program do what I want?</span>
<span class="comment-copy">@LopezNlak Added example of using <code>map</code>.</span>
<span class="comment-copy">Thank you, would do Threading + Queue or do you think using concurrent  module is fine?</span>
<span class="comment-copy">@LopezNlak Both would do just fine but I'd guess you need to write less code with <code>concurrent.futures</code>.</span>
<span class="comment-copy">Alright, thanks once again.</span>
