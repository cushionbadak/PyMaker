<div class="post-text" itemprop="text">
<p>This subject can be already covered. If so, apologizes for that. I have a problem when fetching rows from database (with "for" and "while" loops) and executing the script from console.</p>
<p>I need to fetch a huge amount of rows from database and I'm building a script so that i can insert the user ID's and i'll get the account ID's of the clients and the statuses.
I have realized that when I run the script from Eclipse, full output is fetched from DB. When I run the script from console, there is a limit of rows. So, i'd like to know if i have a "while row is not None" loop... why my row becomes None if there are more rows in database??</p>
<p>Also: I need to solve this issue. No matter how. I'd prefer to not load the full list to a local file (if possible). But, if there is no other way... okay, please help!! This is my example.</p>
<pre><code>#!/usr/bin/env python3
# encoding: utf-8

import configparser
import pymysql
from prettytable import PrettyTable

conn = pymysql.connect(host=host, user=user, passwd=password, db=database)

print()
userid = input('Insert User ID(s) &gt; ') # userid is a list of 2000 users in comma-separated format
userids = userid.replace(" ", "").replace("'", "").replace(",", "','")
cur = conn.cursor()
cur.execute(""" SELECT user_ID, account_ID, status FROM Account WHERE user_ID IN ('%s'); """ % userids)
rows = cur.fetchall()

table = PrettyTable(["user_ID", "account_ID", "status"])
table.padding_width = 1

for line in rows:
    user_ID = str(line[0])
    account_ID = str(line[1])
    status = str(line[2])
    table.add_row([user_ID, account_ID, status])

print()
print(table)
conn.close()
print()
print()
exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without modifying too much your code you could try using <a href="https://github.com/lmaurits/prettytable/blob/master/prettytable.py#L1593" rel="nofollow noreferrer"><code>from_db_cursor()</code></a> provided by the <code>prettytable</code> module like this:</p>
<pre><code>#!/usr/bin/env python3

import pymysql
from prettytable import from_db_cursor

conn = pymysql.connect(host=host, user=user, passwd=password, db=database)

userid = input('Insert User ID(s) &gt; ') # userid is a list of 2000 users in comma-separated format
userids = userid.replace(" ", "").replace("'", "").replace(",", "','")
cur = conn.cursor()
cur.execute(""" SELECT user_ID, account_ID, status FROM Account WHERE user_ID IN ('%s'); """ % userids)

table = from_db_cursor(cur, padding_width=1)

print(table)
conn.close()
</code></pre>
<p>But looking at the source code of <code>prettytable</code> my guess is that it won't change the situation much since it does more or less what you were doing explicitly in your code.</p>
<hr/>
<p>What would probably work better is to add rows one at a time to <code>table</code> instead of fetching all rows and looping through them to add them. Something like:</p>
<pre><code>#!/usr/bin/env python3

import pymysql
from prettytable import PrettyTable

conn = pymysql.connect(host=host, user=user, passwd=password, db=database)

userid = input('Insert User ID(s) &gt; ') # userid is a list of 2000 users in comma-separated format
userids = userid.replace(" ", "").replace("'", "").replace(",", "','")
cur = conn.cursor()
cur.execute(""" SELECT user_ID, account_ID, status FROM Account WHERE user_ID IN ('%s'); """ % userids)
row = cur.fetchone()

table = PrettyTable(["user_ID", "account_ID", "status"], padding_width=1)

while row is not None:
    table.add_row(row)
    row = cur.fetchone()

print(table)
conn.close()
</code></pre>
<p>You don't need to transform the row elements to string values since <code>Prettytable</code> does that internally.</p>
<hr/>
<p>But it is possible to take advantage of different features to simplify your code and to make it more pythonic:</p>
<pre><code>#!/usr/bin/env python3

import re
import pymysql
from prettytable import PrettyTable

userid = input('Insert User ID(s) &gt; ') # userid is a list of 2000 users in comma-separated format
userids = re.sub("[ ']", "", userid).replace(",", "','")

table = PrettyTable(["user_ID", "account_ID", "status"], padding_width=1)

with pymysql.connect(host=host, user=user, passwd=password, db=database) as cur:
    cur.execute("""SELECT user_ID, account_ID, status FROM Account WHERE user_ID IN ('%s'); """ % userids)

    map(table.add_row, cur)

print(table)
</code></pre>
<p>In this version:</p>
<ul>
<li>I have used the <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> to do some of the substitutions (some may say that's a tad overkill but it could be useful to you in the future)</li>
<li>A <code>Pymysql</code> connection <a href="https://github.com/PyMySQL/PyMySQL/blob/master/pymysql/connections.py#L830" rel="nofollow noreferrer">implements</a> the <a href="https://docs.python.org/3/library/stdtypes.html#typecontextmanager" rel="nofollow noreferrer">context manager</a> that provides you directly with a cursor.</li>
<li>Since a <code>Pymysql</code> cursor can <a href="https://github.com/PyMySQL/PyMySQL/blob/master/pymysql/cursors.py#L357" rel="nofollow noreferrer">provide</a> an <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">iterator</a> we can use it with <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> to go through all the rows even if we don't care for the result.</li>
</ul>
</div>
