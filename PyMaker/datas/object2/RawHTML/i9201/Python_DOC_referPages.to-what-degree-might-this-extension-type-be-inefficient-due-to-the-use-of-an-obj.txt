<div class="post-text" itemprop="text">
<p>I was told the following extension type <a href="https://stackoverflow.com/questions/41905077/can-a-cdef-class-store-a-variable-that-isn-t-type-declared/41905513#41905513">may not be very efficient</a> due to the need for a Python object type-declaration for the use of <code>DefaultDict</code>. Can someone explain why this is, and whether <code>DefaultDict</code> could still be worth using (as opposed to <code>dict</code>)? </p>
<pre><code>cdef class CythonClass(object):

    cdef int var1, var2
    cdef object defaultdict

    def __init__(self, a, b):
        self.var1 = a
        self.var2 = b
        self.defaultdict = DefaultDict(DefaultDict([]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I may have overstated the efficiency part in <a href="https://stackoverflow.com/a/41905513/5393381">my other answer</a>. What I meant was: don't expect huge speedups (more than 1.5-2x) when you have to use Python objects. </p>
<p>You can use them and it won't be slower (except for very rare cases) than using them in python code. However the great power with Cython is that you can utilize native c types and homogeneous data structures like c-arrays (which can be much faster than python lists or even dictionaries) or if you go c++ then also <code>vector</code>, <code>unordered_map</code> and such.</p>
<p>One point to remember when dealing with Python objects is that <strong>all</strong> python objects are pointers to some structs, so each one adds one layer of indirection - that's even true for Python <code>int</code>s. However the Cython <code>int</code> is a C-integer without that indirection. That's one of the main reasons why <code>for</code>-loops in Cython are much faster. (However they are limit to the range of 64bits not unlimited precision like in Python, that's the trade-off).</p>
<p>Another point is that operating on python objects means that you need to go through pythons lookups, pythons operations, etc. However for <strong>built-in</strong> objects cython can use the <a href="https://docs.python.org/3.6/c-api/" rel="nofollow noreferrer">Python C API</a> to gain additional speed by avoiding the python based lookups (<code>DefaultDict</code> is not among them, I guess), for example with declared dicts the following code compiles differently:</p>
<pre><code>def dumb_func(dict dct, str key):
    return dct[key]   # translates to: __Pyx_PyDict_GetItem(__pyx_v_dct, __pyx_v_key)


def dumb_func(object dct, object key):  # different signature
    return dct[key]   # translates to: PyObject_GetItem(__pyx_v_dct, __pyx_v_key)
</code></pre>
<p>You probably could guess which one is faster, the one that adresses the dict directly (<code>__Pyx_PyDict_GetItem</code> is probably a sophisticated wrapper for <a href="https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItem" rel="nofollow noreferrer"><code>PyDict_GetItem</code></a> and <a href="https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemString" rel="nofollow noreferrer"><code>PyDict_GetItemString</code></a>) or the one that just adresses a python object with <code>PyObject_GetItem</code> (going through the python lookups). This won't be a huge speedup neither but it's noticable.</p>
<p>In the end I would say that normal (and declared) <code>dict</code>s would definetly be faster than <code>DefaultDict</code> (except that's some C or C++ class) in Cython code.</p>
</div>
